// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 , 14 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: LD_INT 14
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: ST_TO_ADDR
// debugMode = 0 ;
 186: LD_ADDR_EXP 45
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// PrepareDifficulty ;
 194: CALL 7766 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 198: LD_INT 43
 200: PPUSH
 201: LD_INT 22
 203: PPUSH
 204: LD_INT 1
 206: PPUSH
 207: LD_INT 333
 209: NEG
 210: PPUSH
 211: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 215: LD_INT 43
 217: PPUSH
 218: LD_INT 22
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 331
// PrepareGammaBase ;
 228: CALL 2639 0 0
// PrepareHeroes ;
 232: CALL 575 0 0
// PrepareRussianCommander ;
 236: CALL 6622 0 0
// PrepareRussians ;
 240: CALL 6940 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 244: LD_INT 22
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: PUSH
 254: LD_INT 25
 256: PUSH
 257: LD_INT 2
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PPUSH
 268: CALL_OW 69
 272: PPUSH
 273: LD_INT 0
 275: PPUSH
 276: LD_INT 90
 278: PPUSH
 279: LD_INT 86
 281: PPUSH
 282: LD_INT 3
 284: PPUSH
 285: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 289: LD_INT 3
 291: PPUSH
 292: LD_INT 24
 294: PPUSH
 295: LD_INT 3
 297: PPUSH
 298: LD_EXP 25
 302: PPUSH
 303: LD_EXP 26
 307: PPUSH
 308: CALL_OW 12
 312: PPUSH
 313: LD_INT 6
 315: PPUSH
 316: LD_INT 4
 318: PPUSH
 319: CALL 9191 0 6
// PrepareCutsceneAttack ;
 323: CALL 6674 0 0
// end ;
 327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 328: LD_INT 22
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 34
 340: PUSH
 341: LD_INT 6
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PPUSH
 352: CALL_OW 69
 356: PUSH
 357: LD_INT 6
 359: GREATEREQUAL
 360: IFFALSE 372
 362: GO 364
 364: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 365: LD_STRING ACH_ARMOR
 367: PPUSH
 368: CALL_OW 543
 372: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 373: LD_EXP 45
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 572
 383: GO 385
 385: DISABLE
 386: LD_INT 0
 388: PPUSH
// begin enable ;
 389: ENABLE
// fogoff ( true ) ;
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 397: LD_ADDR_VAR 0 1
 401: PUSH
 402: LD_INT 22
 404: PUSH
 405: LD_INT 1
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: PUSH
 412: LD_INT 21
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: FOR_IN
 432: IFFALSE 448
// SetLives ( i , 1000 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: LD_INT 1000
 441: PPUSH
 442: CALL_OW 234
 446: GO 431
 448: POP
 449: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 450: LD_ADDR_VAR 0 1
 454: PUSH
 455: LD_INT 22
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: FOR_IN
 485: IFFALSE 509
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 274
 496: PPUSH
 497: LD_INT 1
 499: PPUSH
 500: LD_INT 9999
 502: PPUSH
 503: CALL_OW 277
 507: GO 484
 509: POP
 510: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 511: LD_ADDR_VAR 0 1
 515: PUSH
 516: LD_INT 22
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 30
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PPUSH
 540: CALL_OW 69
 544: PUSH
 545: FOR_IN
 546: IFFALSE 570
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: CALL_OW 274
 557: PPUSH
 558: LD_INT 2
 560: PPUSH
 561: LD_INT 9999
 563: PPUSH
 564: CALL_OW 277
 568: GO 545
 570: POP
 571: POP
// end ; end_of_file
 572: PPOPN 1
 574: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 575: LD_INT 0
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
 588: PPUSH
 589: PPUSH
 590: PPUSH
 591: PPUSH
// uc_side = 1 ;
 592: LD_ADDR_OWVAR 20
 596: PUSH
 597: LD_INT 1
 599: ST_TO_ADDR
// uc_nation = 1 ;
 600: LD_ADDR_OWVAR 21
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// if gammaCommander = 1 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 1
 615: EQUAL
 616: IFFALSE 667
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 618: LD_ADDR_EXP 3
 622: PUSH
 623: LD_STRING Donaldson
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: LD_STRING 04_
 631: PPUSH
 632: CALL 46209 0 3
 636: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 637: LD_EXP 3
 641: PPUSH
 642: LD_INT 54
 644: PPUSH
 645: LD_INT 25
 647: PPUSH
 648: LD_INT 8
 650: PPUSH
 651: LD_INT 0
 653: PPUSH
 654: CALL_OW 50
// ComHold ( Donaldson ) ;
 658: LD_EXP 3
 662: PPUSH
 663: CALL_OW 140
// end ; if gammaCommander = 2 then
 667: LD_EXP 12
 671: PUSH
 672: LD_INT 2
 674: EQUAL
 675: IFFALSE 726
// begin Brown = PrepareUnit ( Brown , true , 04_ ) ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_STRING Brown
 684: PPUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_STRING 04_
 690: PPUSH
 691: CALL 46209 0 3
 695: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 696: LD_EXP 2
 700: PPUSH
 701: LD_INT 54
 703: PPUSH
 704: LD_INT 25
 706: PPUSH
 707: LD_INT 8
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 50
// ComHold ( Brown ) ;
 717: LD_EXP 2
 721: PPUSH
 722: CALL_OW 140
// end ; if gammaCommander = 3 then
 726: LD_EXP 12
 730: PUSH
 731: LD_INT 3
 733: EQUAL
 734: IFFALSE 785
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 736: LD_ADDR_EXP 13
 740: PUSH
 741: LD_STRING VanHouten
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: LD_STRING 
 749: PPUSH
 750: CALL 46209 0 3
 754: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 755: LD_EXP 13
 759: PPUSH
 760: LD_INT 54
 762: PPUSH
 763: LD_INT 25
 765: PPUSH
 766: LD_INT 8
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 50
// ComHold ( Houten ) ;
 776: LD_EXP 13
 780: PPUSH
 781: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 785: LD_ADDR_EXP 22
 789: PUSH
 790: LD_STRING Harisson
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: LD_STRING 
 798: PPUSH
 799: CALL 46209 0 3
 803: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 804: LD_ADDR_EXP 23
 808: PUSH
 809: LD_STRING Powell
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: LD_STRING 
 817: PPUSH
 818: CALL 46209 0 3
 822: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 823: LD_STRING 04_Lisa
 825: PUSH
 826: EMPTY
 827: LIST
 828: PPUSH
 829: CALL_OW 28
 833: PUSH
 834: LD_STRING LisaInDelta
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 30
 844: NOT
 845: AND
 846: PUSH
 847: LD_STRING 07_Lisa
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: NOT
 858: AND
 859: IFFALSE 898
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 861: LD_ADDR_EXP 6
 865: PUSH
 866: LD_STRING Lisa
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_STRING 04_
 874: PPUSH
 875: CALL 46209 0 3
 879: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 880: LD_ADDR_VAR 0 15
 884: PUSH
 885: LD_VAR 0 15
 889: PUSH
 890: LD_EXP 6
 894: ADD
 895: ST_TO_ADDR
// end else
 896: GO 953
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 898: LD_EXP 6
 902: NOT
 903: PUSH
 904: LD_STRING LisaIn07
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 30
 914: NOT
 915: AND
 916: IFFALSE 953
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 918: LD_ADDR_EXP 6
 922: PUSH
 923: LD_STRING Lisa
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: LD_STRING 07_
 931: PPUSH
 932: CALL 46209 0 3
 936: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 937: LD_ADDR_VAR 0 15
 941: PUSH
 942: LD_VAR 0 15
 946: PUSH
 947: LD_EXP 6
 951: ADD
 952: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 953: LD_STRING 04_Bobby
 955: PUSH
 956: EMPTY
 957: LIST
 958: PPUSH
 959: CALL_OW 28
 963: PUSH
 964: LD_STRING BobbyInDelta
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 30
 974: NOT
 975: AND
 976: PUSH
 977: LD_STRING 07_Bobby
 979: PUSH
 980: EMPTY
 981: LIST
 982: PPUSH
 983: CALL_OW 28
 987: NOT
 988: AND
 989: IFFALSE 1028
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 991: LD_ADDR_EXP 4
 995: PUSH
 996: LD_STRING Bobby
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: LD_STRING 04_
1004: PPUSH
1005: CALL 46209 0 3
1009: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1010: LD_ADDR_VAR 0 15
1014: PUSH
1015: LD_VAR 0 15
1019: PUSH
1020: LD_EXP 4
1024: ADD
1025: ST_TO_ADDR
// end else
1026: GO 1083
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1028: LD_EXP 4
1032: NOT
1033: PUSH
1034: LD_STRING BobbyIn07
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 30
1044: NOT
1045: AND
1046: IFFALSE 1083
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1048: LD_ADDR_EXP 4
1052: PUSH
1053: LD_STRING Bobby
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: LD_STRING 07_
1061: PPUSH
1062: CALL 46209 0 3
1066: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1067: LD_ADDR_VAR 0 15
1071: PUSH
1072: LD_VAR 0 15
1076: PUSH
1077: LD_EXP 4
1081: ADD
1082: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1083: LD_STRING 04_Cyrus
1085: PUSH
1086: EMPTY
1087: LIST
1088: PPUSH
1089: CALL_OW 28
1093: PUSH
1094: LD_STRING CyrusInDelta
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 30
1104: NOT
1105: AND
1106: PUSH
1107: LD_STRING 07_Cyrus
1109: PUSH
1110: EMPTY
1111: LIST
1112: PPUSH
1113: CALL_OW 28
1117: NOT
1118: AND
1119: IFFALSE 1158
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1121: LD_ADDR_EXP 5
1125: PUSH
1126: LD_STRING Cyrus
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: LD_STRING 04_
1134: PPUSH
1135: CALL 46209 0 3
1139: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1140: LD_ADDR_VAR 0 15
1144: PUSH
1145: LD_VAR 0 15
1149: PUSH
1150: LD_EXP 5
1154: ADD
1155: ST_TO_ADDR
// end else
1156: GO 1213
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1158: LD_EXP 5
1162: NOT
1163: PUSH
1164: LD_STRING CyrusIn07
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 30
1174: NOT
1175: AND
1176: IFFALSE 1213
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1178: LD_ADDR_EXP 5
1182: PUSH
1183: LD_STRING Cyrus
1185: PPUSH
1186: LD_INT 1
1188: PPUSH
1189: LD_STRING 07_
1191: PPUSH
1192: CALL 46209 0 3
1196: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1197: LD_ADDR_VAR 0 15
1201: PUSH
1202: LD_VAR 0 15
1206: PUSH
1207: LD_EXP 5
1211: ADD
1212: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1213: LD_STRING 04_Brown
1215: PUSH
1216: EMPTY
1217: LIST
1218: PPUSH
1219: CALL_OW 28
1223: PUSH
1224: LD_STRING BrownInDelta
1226: PPUSH
1227: LD_INT 0
1229: PPUSH
1230: CALL_OW 30
1234: NOT
1235: AND
1236: PUSH
1237: LD_STRING 07_Brown
1239: PUSH
1240: EMPTY
1241: LIST
1242: PPUSH
1243: CALL_OW 28
1247: NOT
1248: AND
1249: PUSH
1250: LD_EXP 12
1254: PUSH
1255: LD_INT 2
1257: NONEQUAL
1258: AND
1259: IFFALSE 1298
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1261: LD_ADDR_EXP 2
1265: PUSH
1266: LD_STRING Brown
1268: PPUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_STRING 04_
1274: PPUSH
1275: CALL 46209 0 3
1279: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1280: LD_ADDR_VAR 0 15
1284: PUSH
1285: LD_VAR 0 15
1289: PUSH
1290: LD_EXP 2
1294: ADD
1295: ST_TO_ADDR
// end else
1296: GO 1363
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1298: LD_EXP 2
1302: NOT
1303: PUSH
1304: LD_STRING BrownIn07
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 30
1314: NOT
1315: AND
1316: PUSH
1317: LD_EXP 12
1321: PUSH
1322: LD_INT 2
1324: NONEQUAL
1325: AND
1326: IFFALSE 1363
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1328: LD_ADDR_EXP 2
1332: PUSH
1333: LD_STRING Brown
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_STRING 07_
1341: PPUSH
1342: CALL 46209 0 3
1346: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1347: LD_ADDR_VAR 0 15
1351: PUSH
1352: LD_VAR 0 15
1356: PUSH
1357: LD_EXP 2
1361: ADD
1362: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1363: LD_STRING 04_Donaldson
1365: PUSH
1366: EMPTY
1367: LIST
1368: PPUSH
1369: CALL_OW 28
1373: PUSH
1374: LD_STRING DonaldsonInDelta
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL_OW 30
1384: NOT
1385: AND
1386: PUSH
1387: LD_STRING 07_Donaldson
1389: PUSH
1390: EMPTY
1391: LIST
1392: PPUSH
1393: CALL_OW 28
1397: NOT
1398: AND
1399: PUSH
1400: LD_EXP 12
1404: PUSH
1405: LD_INT 1
1407: NONEQUAL
1408: AND
1409: IFFALSE 1448
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1411: LD_ADDR_EXP 3
1415: PUSH
1416: LD_STRING Donaldson
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: LD_STRING 04_
1424: PPUSH
1425: CALL 46209 0 3
1429: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1430: LD_ADDR_VAR 0 15
1434: PUSH
1435: LD_VAR 0 15
1439: PUSH
1440: LD_EXP 3
1444: ADD
1445: ST_TO_ADDR
// end else
1446: GO 1513
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1448: LD_EXP 3
1452: NOT
1453: PUSH
1454: LD_STRING DonaldsonIn07
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 30
1464: NOT
1465: AND
1466: PUSH
1467: LD_EXP 12
1471: PUSH
1472: LD_INT 1
1474: NONEQUAL
1475: AND
1476: IFFALSE 1513
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1478: LD_ADDR_EXP 3
1482: PUSH
1483: LD_STRING Donaldson
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_STRING 07_
1491: PPUSH
1492: CALL 46209 0 3
1496: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1497: LD_ADDR_VAR 0 15
1501: PUSH
1502: LD_VAR 0 15
1506: PUSH
1507: LD_EXP 3
1511: ADD
1512: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1513: LD_STRING KhatamIn07
1515: PPUSH
1516: LD_INT 0
1518: PPUSH
1519: CALL_OW 30
1523: NOT
1524: IFFALSE 1561
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1526: LD_ADDR_EXP 10
1530: PUSH
1531: LD_STRING Khatam
1533: PPUSH
1534: LD_INT 1
1536: PPUSH
1537: LD_STRING 07_
1539: PPUSH
1540: CALL 46209 0 3
1544: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1545: LD_ADDR_VAR 0 15
1549: PUSH
1550: LD_VAR 0 15
1554: PUSH
1555: LD_EXP 10
1559: ADD
1560: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1561: LD_ADDR_EXP 11
1565: PUSH
1566: LD_STRING 07_othersGamma
1568: PPUSH
1569: CALL_OW 31
1573: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1574: LD_ADDR_VAR 0 14
1578: PUSH
1579: LD_INT 8
1581: PUSH
1582: LD_EXP 11
1586: MINUS
1587: ST_TO_ADDR
// if tmp then
1588: LD_VAR 0 14
1592: IFFALSE 1645
// for i = 1 to tmp do
1594: LD_ADDR_VAR 0 2
1598: PUSH
1599: DOUBLE
1600: LD_INT 1
1602: DEC
1603: ST_TO_ADDR
1604: LD_VAR 0 14
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1643
// begin PrepareHuman ( false , 1 , 5 ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 5
1620: PPUSH
1621: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1625: LD_ADDR_EXP 11
1629: PUSH
1630: LD_EXP 11
1634: PUSH
1635: CALL_OW 44
1639: ADD
1640: ST_TO_ADDR
// end ;
1641: GO 1609
1643: POP
1644: POP
// if HexInfo ( 61 , 29 ) = 0 then
1645: LD_INT 61
1647: PPUSH
1648: LD_INT 29
1650: PPUSH
1651: CALL_OW 428
1655: PUSH
1656: LD_INT 0
1658: EQUAL
1659: IFFALSE 1690
// begin bc_type := b_barracks ;
1661: LD_ADDR_OWVAR 42
1665: PUSH
1666: LD_INT 5
1668: ST_TO_ADDR
// bc_level := 6 ;
1669: LD_ADDR_OWVAR 43
1673: PUSH
1674: LD_INT 6
1676: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1677: LD_INT 61
1679: PPUSH
1680: LD_INT 29
1682: PPUSH
1683: LD_INT 5
1685: PPUSH
1686: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1690: LD_ADDR_VAR 0 13
1694: PUSH
1695: LD_INT 22
1697: PUSH
1698: LD_INT 1
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 31
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PPUSH
1719: CALL_OW 69
1723: ST_TO_ADDR
// for i in bun do
1724: LD_ADDR_VAR 0 2
1728: PUSH
1729: LD_VAR 0 13
1733: PUSH
1734: FOR_IN
1735: IFFALSE 1867
// begin x := GetX ( i ) ;
1737: LD_ADDR_VAR 0 3
1741: PUSH
1742: LD_VAR 0 2
1746: PPUSH
1747: CALL_OW 250
1751: ST_TO_ADDR
// y := GetY ( i ) ;
1752: LD_ADDR_VAR 0 4
1756: PUSH
1757: LD_VAR 0 2
1761: PPUSH
1762: CALL_OW 251
1766: ST_TO_ADDR
// d := GetDir ( i ) ;
1767: LD_ADDR_VAR 0 5
1771: PUSH
1772: LD_VAR 0 2
1776: PPUSH
1777: CALL_OW 254
1781: ST_TO_ADDR
// RemoveUnit ( i ) ;
1782: LD_VAR 0 2
1786: PPUSH
1787: CALL_OW 64
// bc_type := b_bunker ;
1791: LD_ADDR_OWVAR 42
1795: PUSH
1796: LD_INT 32
1798: ST_TO_ADDR
// bc_level := 6 ;
1799: LD_ADDR_OWVAR 43
1803: PUSH
1804: LD_INT 6
1806: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1807: LD_ADDR_VAR 0 6
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: LD_VAR 0 5
1826: PPUSH
1827: CALL_OW 47
1831: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1832: LD_VAR 0 6
1836: PPUSH
1837: LD_INT 5
1839: PUSH
1840: LD_INT 4
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: LD_VAR 0 2
1851: PUSH
1852: LD_INT 2
1854: MOD
1855: PUSH
1856: LD_INT 1
1858: PLUS
1859: ARRAY
1860: PPUSH
1861: CALL_OW 431
// end ;
1865: GO 1734
1867: POP
1868: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1869: LD_ADDR_VAR 0 9
1873: PUSH
1874: LD_INT 22
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 30
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PPUSH
1898: CALL_OW 69
1902: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1903: LD_ADDR_VAR 0 8
1907: PUSH
1908: LD_INT 22
1910: PUSH
1911: LD_INT 1
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: LD_INT 30
1923: PUSH
1924: LD_INT 6
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 30
1933: PUSH
1934: LD_INT 7
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 30
1943: PUSH
1944: LD_INT 8
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PPUSH
1961: CALL_OW 69
1965: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1966: LD_ADDR_VAR 0 7
1970: PUSH
1971: LD_INT 22
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PUSH
1981: LD_INT 30
1983: PUSH
1984: LD_INT 3
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 30
2017: PUSH
2018: LD_INT 36
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2034: LD_ADDR_VAR 0 13
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 2
2051: PUSH
2052: LD_INT 30
2054: PUSH
2055: LD_INT 31
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 30
2064: PUSH
2065: LD_INT 32
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: LD_EXP 11
2095: PUSH
2096: LD_VAR 0 15
2100: ADD
2101: PUSH
2102: FOR_IN
2103: IFFALSE 2524
// begin placed := false ;
2105: LD_ADDR_VAR 0 11
2109: PUSH
2110: LD_INT 0
2112: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2113: LD_VAR 0 2
2117: PPUSH
2118: CALL_OW 257
2122: PUSH
2123: LD_INT 1
2125: EQUAL
2126: IFFALSE 2251
// begin if UnitFilter ( bun , [ f_empty ] ) then
2128: LD_VAR 0 13
2132: PPUSH
2133: LD_INT 58
2135: PUSH
2136: EMPTY
2137: LIST
2138: PPUSH
2139: CALL_OW 72
2143: IFFALSE 2182
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2145: LD_VAR 0 2
2149: PPUSH
2150: LD_VAR 0 13
2154: PPUSH
2155: LD_INT 58
2157: PUSH
2158: EMPTY
2159: LIST
2160: PPUSH
2161: CALL_OW 72
2165: PUSH
2166: LD_INT 1
2168: ARRAY
2169: PPUSH
2170: CALL_OW 52
// placed := true ;
2174: LD_ADDR_VAR 0 11
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// end ; if arm and not placed then
2182: LD_VAR 0 9
2186: PUSH
2187: LD_VAR 0 11
2191: NOT
2192: AND
2193: IFFALSE 2251
// begin for j in arm do
2195: LD_ADDR_VAR 0 10
2199: PUSH
2200: LD_VAR 0 9
2204: PUSH
2205: FOR_IN
2206: IFFALSE 2249
// if UnitsInside ( j ) < 6 then
2208: LD_VAR 0 10
2212: PPUSH
2213: CALL_OW 313
2217: PUSH
2218: LD_INT 6
2220: LESS
2221: IFFALSE 2247
// begin PlaceHumanInUnit ( i , j ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_VAR 0 10
2232: PPUSH
2233: CALL_OW 52
// placed := true ;
2237: LD_ADDR_VAR 0 11
2241: PUSH
2242: LD_INT 1
2244: ST_TO_ADDR
// break ;
2245: GO 2249
// end ;
2247: GO 2205
2249: POP
2250: POP
// end ; end ; if GetClass ( i ) = 2 then
2251: LD_VAR 0 2
2255: PPUSH
2256: CALL_OW 257
2260: PUSH
2261: LD_INT 2
2263: EQUAL
2264: IFFALSE 2297
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2266: LD_VAR 0 2
2270: PPUSH
2271: LD_INT 52
2273: PPUSH
2274: LD_INT 20
2276: PPUSH
2277: LD_INT 6
2279: PPUSH
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 50
// placed := true ;
2287: LD_ADDR_VAR 0 11
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// continue ;
2295: GO 2102
// end ; if GetClass ( i ) = 3 then
2297: LD_VAR 0 2
2301: PPUSH
2302: CALL_OW 257
2306: PUSH
2307: LD_INT 3
2309: EQUAL
2310: IFFALSE 2414
// if fac then
2312: LD_VAR 0 7
2316: IFFALSE 2414
// begin if ct then
2318: LD_VAR 0 12
2322: IFFALSE 2350
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_VAR 0 12
2333: PUSH
2334: LD_INT 1
2336: ARRAY
2337: PPUSH
2338: CALL_OW 52
// placed := true ;
2342: LD_ADDR_VAR 0 11
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// end ; if placed then
2350: LD_VAR 0 11
2354: IFFALSE 2358
// continue ;
2356: GO 2102
// for j in fac do
2358: LD_ADDR_VAR 0 10
2362: PUSH
2363: LD_VAR 0 7
2367: PUSH
2368: FOR_IN
2369: IFFALSE 2412
// if UnitsInside ( j ) < 6 then
2371: LD_VAR 0 10
2375: PPUSH
2376: CALL_OW 313
2380: PUSH
2381: LD_INT 6
2383: LESS
2384: IFFALSE 2410
// begin PlaceHumanInUnit ( i , j ) ;
2386: LD_VAR 0 2
2390: PPUSH
2391: LD_VAR 0 10
2395: PPUSH
2396: CALL_OW 52
// placed := true ;
2400: LD_ADDR_VAR 0 11
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// break ;
2408: GO 2412
// end ;
2410: GO 2368
2412: POP
2413: POP
// end ; if GetClass ( i ) = 4 then
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL_OW 257
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2491
// if lab then
2429: LD_VAR 0 8
2433: IFFALSE 2491
// begin for j in lab do
2435: LD_ADDR_VAR 0 10
2439: PUSH
2440: LD_VAR 0 8
2444: PUSH
2445: FOR_IN
2446: IFFALSE 2489
// if UnitsInside ( j ) < 6 then
2448: LD_VAR 0 10
2452: PPUSH
2453: CALL_OW 313
2457: PUSH
2458: LD_INT 6
2460: LESS
2461: IFFALSE 2487
// begin PlaceHumanInUnit ( i , j ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 10
2472: PPUSH
2473: CALL_OW 52
// placed := true ;
2477: LD_ADDR_VAR 0 11
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// break ;
2485: GO 2489
// end ;
2487: GO 2445
2489: POP
2490: POP
// end ; if not placed then
2491: LD_VAR 0 11
2495: NOT
2496: IFFALSE 2522
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 5
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: CALL_OW 49
// ComHold ( i ) ;
2513: LD_VAR 0 2
2517: PPUSH
2518: CALL_OW 140
// end ; end ;
2522: GO 2102
2524: POP
2525: POP
// if ct then
2526: LD_VAR 0 12
2530: IFFALSE 2634
// if UnitsInside ( ct [ 1 ] ) then
2532: LD_VAR 0 12
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 313
2545: IFFALSE 2634
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2547: LD_ADDR_VAR 0 2
2551: PUSH
2552: LD_INT 22
2554: PUSH
2555: LD_INT 1
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 33
2564: PUSH
2565: LD_INT 2
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PUSH
2581: FOR_IN
2582: IFFALSE 2632
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_VAR 0 12
2593: PUSH
2594: LD_INT 1
2596: ARRAY
2597: PPUSH
2598: CALL_OW 313
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_VAR 0 12
2610: PUSH
2611: LD_INT 1
2613: ARRAY
2614: PPUSH
2615: CALL_OW 313
2619: PPUSH
2620: CALL_OW 12
2624: ARRAY
2625: PPUSH
2626: CALL_OW 135
2630: GO 2581
2632: POP
2633: POP
// end ; end ;
2634: LD_VAR 0 1
2638: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2639: LD_INT 0
2641: PPUSH
2642: PPUSH
2643: PPUSH
2644: PPUSH
2645: PPUSH
2646: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2647: LD_INT 71
2649: PPUSH
2650: LD_INT 5
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: LD_STRING GammaBase
2667: PPUSH
2668: EMPTY
2669: PPUSH
2670: CALL_OW 30
2674: ST_TO_ADDR
// if not blist then
2675: LD_VAR 0 2
2679: NOT
2680: IFFALSE 2720
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2682: LD_ADDR_VAR 0 2
2686: PUSH
2687: LD_INT 1
2689: PUSH
2690: LD_INT 52
2692: PUSH
2693: LD_INT 12
2695: PUSH
2696: LD_INT 3
2698: PUSH
2699: LD_INT 3
2701: PUSH
2702: LD_INT 0
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: ST_TO_ADDR
// uc_side := 1 ;
2720: LD_ADDR_OWVAR 20
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// uc_nation := 1 ;
2728: LD_ADDR_OWVAR 21
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// bc_kind1 := - 1 ;
2736: LD_ADDR_OWVAR 44
2740: PUSH
2741: LD_INT 1
2743: NEG
2744: ST_TO_ADDR
// bc_kind2 := - 1 ;
2745: LD_ADDR_OWVAR 45
2749: PUSH
2750: LD_INT 1
2752: NEG
2753: ST_TO_ADDR
// for i in blist do
2754: LD_ADDR_VAR 0 3
2758: PUSH
2759: LD_VAR 0 2
2763: PUSH
2764: FOR_IN
2765: IFFALSE 3041
// begin bc_type := i [ 1 ] ;
2767: LD_ADDR_OWVAR 42
2771: PUSH
2772: LD_VAR 0 3
2776: PUSH
2777: LD_INT 1
2779: ARRAY
2780: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2781: LD_ADDR_OWVAR 43
2785: PUSH
2786: LD_VAR 0 3
2790: PUSH
2791: LD_INT 5
2793: ARRAY
2794: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2795: LD_OWVAR 42
2799: PUSH
2800: LD_INT 6
2802: PUSH
2803: LD_INT 7
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: IN
2810: IFFALSE 2876
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2812: LD_STRING 06_remoteVehs_1
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 30
2822: NOT
2823: IFFALSE 2851
// begin bc_type := b_lab_full ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 8
2832: ST_TO_ADDR
// bc_kind1 := 10 ;
2833: LD_ADDR_OWVAR 44
2837: PUSH
2838: LD_INT 10
2840: ST_TO_ADDR
// bc_kind2 := 15 ;
2841: LD_ADDR_OWVAR 45
2845: PUSH
2846: LD_INT 15
2848: ST_TO_ADDR
// end else
2849: GO 2876
// begin bc_type := b_lab_half ;
2851: LD_ADDR_OWVAR 42
2855: PUSH
2856: LD_INT 7
2858: ST_TO_ADDR
// bc_kind1 := 10 ;
2859: LD_ADDR_OWVAR 44
2863: PUSH
2864: LD_INT 10
2866: ST_TO_ADDR
// bc_kind2 := - 1 ;
2867: LD_ADDR_OWVAR 45
2871: PUSH
2872: LD_INT 1
2874: NEG
2875: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2876: LD_OWVAR 42
2880: PUSH
2881: LD_INT 2
2883: EQUAL
2884: IFFALSE 2894
// bc_type := b_factory ;
2886: LD_ADDR_OWVAR 42
2890: PUSH
2891: LD_INT 3
2893: ST_TO_ADDR
// if bc_type = b_depot then
2894: LD_OWVAR 42
2898: PUSH
2899: LD_INT 0
2901: EQUAL
2902: IFFALSE 2951
// begin bc_type := b_warehouse ;
2904: LD_ADDR_OWVAR 42
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2912: LD_ADDR_EXP 37
2916: PUSH
2917: LD_VAR 0 3
2921: PUSH
2922: LD_INT 2
2924: ARRAY
2925: PPUSH
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 3
2933: ARRAY
2934: PPUSH
2935: LD_VAR 0 3
2939: PUSH
2940: LD_INT 4
2942: ARRAY
2943: PPUSH
2944: CALL_OW 47
2948: ST_TO_ADDR
// continue ;
2949: GO 2764
// end ; if bc_type = b_armoury then
2951: LD_OWVAR 42
2955: PUSH
2956: LD_INT 4
2958: EQUAL
2959: IFFALSE 2969
// bc_type = b_barracks ;
2961: LD_ADDR_OWVAR 42
2965: PUSH
2966: LD_INT 5
2968: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2969: LD_ADDR_VAR 0 4
2973: PUSH
2974: LD_VAR 0 3
2978: PUSH
2979: LD_INT 2
2981: ARRAY
2982: PPUSH
2983: LD_VAR 0 3
2987: PUSH
2988: LD_INT 3
2990: ARRAY
2991: PPUSH
2992: LD_VAR 0 3
2996: PUSH
2997: LD_INT 4
2999: ARRAY
3000: PPUSH
3001: CALL_OW 47
3005: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3006: LD_VAR 0 4
3010: PPUSH
3011: CALL_OW 266
3015: PUSH
3016: LD_INT 32
3018: EQUAL
3019: IFFALSE 3039
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 7
3033: ARRAY
3034: PPUSH
3035: CALL_OW 431
// end ;
3039: GO 2764
3041: POP
3042: POP
// if not amDepot then
3043: LD_EXP 37
3047: NOT
3048: IFFALSE 3085
// begin bc_type := b_warehouse ;
3050: LD_ADDR_OWVAR 42
3054: PUSH
3055: LD_INT 1
3057: ST_TO_ADDR
// bc_level := 6 ;
3058: LD_ADDR_OWVAR 43
3062: PUSH
3063: LD_INT 6
3065: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3066: LD_ADDR_EXP 37
3070: PUSH
3071: LD_INT 52
3073: PPUSH
3074: LD_INT 12
3076: PPUSH
3077: LD_INT 3
3079: PPUSH
3080: CALL_OW 47
3084: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3085: LD_EXP 37
3089: PPUSH
3090: LD_STRING gamma
3092: PPUSH
3093: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 , 280 ] [ Difficulty ] ) ;
3097: LD_EXP 37
3101: PPUSH
3102: CALL_OW 274
3106: PPUSH
3107: LD_INT 1
3109: PPUSH
3110: LD_INT 500
3112: PUSH
3113: LD_INT 420
3115: PUSH
3116: LD_INT 350
3118: PUSH
3119: LD_INT 280
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_OWVAR 67
3132: ARRAY
3133: PPUSH
3134: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3138: LD_EXP 37
3142: PPUSH
3143: CALL_OW 274
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 200
3153: PPUSH
3154: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3158: LD_INT 22
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 30
3170: PUSH
3171: LD_INT 3
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: IFFALSE 3434
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3188: LD_ADDR_VAR 0 4
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 30
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PPUSH
3217: CALL_OW 69
3221: PUSH
3222: LD_INT 1
3224: ARRAY
3225: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3226: LD_ADDR_VAR 0 6
3230: PUSH
3231: LD_VAR 0 4
3235: PPUSH
3236: CALL_OW 250
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: CALL_OW 251
3250: PPUSH
3251: LD_VAR 0 4
3255: PPUSH
3256: CALL_OW 254
3260: PPUSH
3261: CALL 80582 0 3
3265: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3266: LD_ADDR_VAR 0 2
3270: PUSH
3271: LD_INT 19
3273: PUSH
3274: LD_INT 17
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3281: LD_STRING 06_remoteVehs_1
3283: PPUSH
3284: LD_INT 0
3286: PPUSH
3287: CALL_OW 30
3291: IFFALSE 3314
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3293: LD_ADDR_VAR 0 2
3297: PUSH
3298: LD_VAR 0 2
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 22
3308: PPUSH
3309: CALL_OW 2
3313: ST_TO_ADDR
// for i in tmp do
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: LD_VAR 0 6
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3432
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3327: LD_VAR 0 3
3331: PUSH
3332: LD_INT 1
3334: ARRAY
3335: PPUSH
3336: LD_VAR 0 3
3340: PUSH
3341: LD_INT 2
3343: ARRAY
3344: PPUSH
3345: CALL_OW 428
3349: PUSH
3350: LD_INT 0
3352: EQUAL
3353: IFFALSE 3430
// begin bc_type := blist [ 1 ] ;
3355: LD_ADDR_OWVAR 42
3359: PUSH
3360: LD_VAR 0 2
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_VAR 0 3
3382: PUSH
3383: LD_INT 2
3385: ARRAY
3386: PPUSH
3387: LD_VAR 0 3
3391: PUSH
3392: LD_INT 3
3394: ARRAY
3395: PPUSH
3396: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: LD_VAR 0 2
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: CALL_OW 3
3417: ST_TO_ADDR
// if blist = 0 then
3418: LD_VAR 0 2
3422: PUSH
3423: LD_INT 0
3425: EQUAL
3426: IFFALSE 3430
// break ;
3428: GO 3432
// end ;
3430: GO 3324
3432: POP
3433: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3434: LD_STRING 06_remoteVehs_1
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 30
3444: IFFALSE 3911
// begin bc_type = 36 ;
3446: LD_ADDR_OWVAR 42
3450: PUSH
3451: LD_INT 36
3453: ST_TO_ADDR
// bc_level = 4 ;
3454: LD_ADDR_OWVAR 43
3458: PUSH
3459: LD_INT 4
3461: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3462: LD_EXP 37
3466: PPUSH
3467: LD_INT 36
3469: PPUSH
3470: LD_INT 62
3472: PPUSH
3473: LD_INT 12
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL 17162 0 6
3486: PUSH
3487: LD_INT 92
3489: PUSH
3490: LD_INT 62
3492: PUSH
3493: LD_INT 12
3495: PUSH
3496: LD_INT 3
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: NOT
3510: AND
3511: IFFALSE 3528
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3513: LD_INT 62
3515: PPUSH
3516: LD_INT 12
3518: PPUSH
3519: LD_INT 3
3521: PPUSH
3522: CALL_OW 47
3526: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3528: LD_EXP 37
3532: PPUSH
3533: LD_INT 36
3535: PPUSH
3536: LD_INT 37
3538: PPUSH
3539: LD_INT 18
3541: PPUSH
3542: LD_INT 2
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL 17162 0 6
3552: PUSH
3553: LD_INT 92
3555: PUSH
3556: LD_INT 37
3558: PUSH
3559: LD_INT 18
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: PPUSH
3571: CALL_OW 69
3575: NOT
3576: AND
3577: IFFALSE 3594
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3579: LD_INT 37
3581: PPUSH
3582: LD_INT 18
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: CALL_OW 47
3592: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3594: LD_EXP 37
3598: PPUSH
3599: LD_INT 36
3601: PPUSH
3602: LD_INT 66
3604: PPUSH
3605: LD_INT 14
3607: PPUSH
3608: LD_INT 4
3610: PPUSH
3611: LD_INT 0
3613: PPUSH
3614: CALL 17162 0 6
3618: PUSH
3619: LD_INT 92
3621: PUSH
3622: LD_INT 66
3624: PUSH
3625: LD_INT 14
3627: PUSH
3628: LD_INT 3
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 69
3641: NOT
3642: AND
3643: IFFALSE 3660
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3645: LD_INT 66
3647: PPUSH
3648: LD_INT 14
3650: PPUSH
3651: LD_INT 4
3653: PPUSH
3654: CALL_OW 47
3658: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3660: LD_EXP 37
3664: PPUSH
3665: LD_INT 36
3667: PPUSH
3668: LD_INT 74
3670: PPUSH
3671: LD_INT 26
3673: PPUSH
3674: LD_INT 4
3676: PPUSH
3677: LD_INT 0
3679: PPUSH
3680: CALL 17162 0 6
3684: IFFALSE 3699
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3686: LD_INT 74
3688: PPUSH
3689: LD_INT 26
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3699: LD_INT 22
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: LD_INT 30
3711: PUSH
3712: LD_INT 36
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PPUSH
3723: CALL_OW 69
3727: NOT
3728: IFFALSE 3732
// exit ;
3730: GO 3911
// for i := 1 to [ 3 , 2 , 2 , 1 ] [ Difficulty ] do
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: DOUBLE
3738: LD_INT 1
3740: DEC
3741: ST_TO_ADDR
3742: LD_INT 3
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: LD_INT 2
3750: PUSH
3751: LD_INT 1
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: PUSH
3760: LD_OWVAR 67
3764: ARRAY
3765: PUSH
3766: FOR_TO
3767: IFFALSE 3909
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 , 2 ] [ Difficulty ] ;
3769: LD_ADDR_OWVAR 37
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: LD_INT 3
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 1
3789: PPUSH
3790: LD_INT 2
3792: PPUSH
3793: CALL_OW 12
3797: ARRAY
3798: PUSH
3799: LD_INT 2
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: PUSH
3811: LD_OWVAR 67
3815: ARRAY
3816: ST_TO_ADDR
// vc_engine = 1 ;
3817: LD_ADDR_OWVAR 39
3821: PUSH
3822: LD_INT 1
3824: ST_TO_ADDR
// vc_control = 2 ;
3825: LD_ADDR_OWVAR 38
3829: PUSH
3830: LD_INT 2
3832: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3833: LD_ADDR_OWVAR 40
3837: PUSH
3838: LD_INT 3
3840: PUSH
3841: LD_INT 4
3843: PUSH
3844: LD_INT 5
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_INT 3
3857: PPUSH
3858: CALL_OW 12
3862: ARRAY
3863: ST_TO_ADDR
// veh = CreateVehicle ;
3864: LD_ADDR_VAR 0 5
3868: PUSH
3869: CALL_OW 45
3873: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3874: LD_VAR 0 5
3878: PPUSH
3879: LD_INT 4
3881: PPUSH
3882: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3886: LD_VAR 0 5
3890: PPUSH
3891: LD_INT 56
3893: PPUSH
3894: LD_INT 17
3896: PPUSH
3897: LD_INT 9
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 50
// end ;
3907: GO 3766
3909: POP
3910: POP
// end ; end ;
3911: LD_VAR 0 1
3915: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
3921: PPUSH
// uc_side = 1 ;
3922: LD_ADDR_OWVAR 20
3926: PUSH
3927: LD_INT 1
3929: ST_TO_ADDR
// uc_nation = 1 ;
3930: LD_ADDR_OWVAR 21
3934: PUSH
3935: LD_INT 1
3937: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3938: LD_ADDR_EXP 14
3942: PUSH
3943: LD_STRING Denis
3945: PPUSH
3946: LD_INT 1
3948: PPUSH
3949: LD_STRING 06c_
3951: PPUSH
3952: CALL 46209 0 3
3956: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3957: LD_EXP 14
3961: PPUSH
3962: LD_INT 4
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3972: LD_ADDR_EXP 15
3976: PUSH
3977: LD_STRING Joan
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_STRING 06c_
3985: PPUSH
3986: CALL 46209 0 3
3990: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3991: LD_EXP 15
3995: PPUSH
3996: LD_INT 4
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4006: LD_STRING GladstoneIn07
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 30
4016: NOT
4017: IFFALSE 4091
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4019: LD_ADDR_EXP 8
4023: PUSH
4024: LD_STRING Gladstone
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_STRING 06c_
4032: PPUSH
4033: CALL 46209 0 3
4037: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4038: LD_EXP 8
4042: NOT
4043: PUSH
4044: LD_STRING GladstoneStayInDelta
4046: PPUSH
4047: LD_INT 0
4049: PPUSH
4050: CALL_OW 30
4054: AND
4055: IFFALSE 4076
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4057: LD_ADDR_EXP 8
4061: PUSH
4062: LD_STRING Gladstone
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: LD_STRING 05_
4070: PPUSH
4071: CALL 46209 0 3
4075: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4076: LD_EXP 8
4080: PPUSH
4081: LD_INT 4
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4091: LD_STRING LisaStayInDelta
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 30
4101: IFFALSE 4137
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4103: LD_ADDR_EXP 6
4107: PUSH
4108: LD_STRING Lisa
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_STRING 05_
4116: PPUSH
4117: CALL 46209 0 3
4121: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4122: LD_EXP 6
4126: PPUSH
4127: LD_INT 4
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4137: LD_STRING BobbyStayInDelta
4139: PPUSH
4140: LD_INT 0
4142: PPUSH
4143: CALL_OW 30
4147: IFFALSE 4183
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4149: LD_ADDR_EXP 4
4153: PUSH
4154: LD_STRING Bobby
4156: PPUSH
4157: LD_INT 1
4159: PPUSH
4160: LD_STRING 05_
4162: PPUSH
4163: CALL 46209 0 3
4167: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4168: LD_EXP 4
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4183: LD_STRING CyrusStayInDelta
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 30
4193: IFFALSE 4229
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4195: LD_ADDR_EXP 5
4199: PUSH
4200: LD_STRING Cyrus
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: LD_STRING 05_
4208: PPUSH
4209: CALL 46209 0 3
4213: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4214: LD_EXP 5
4218: PPUSH
4219: LD_INT 4
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4229: LD_STRING BrownStayInDelta
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 30
4239: IFFALSE 4275
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4241: LD_ADDR_EXP 2
4245: PUSH
4246: LD_STRING Brown
4248: PPUSH
4249: LD_INT 1
4251: PPUSH
4252: LD_STRING 05_
4254: PPUSH
4255: CALL 46209 0 3
4259: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4260: LD_EXP 2
4264: PPUSH
4265: LD_INT 4
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4275: LD_STRING DonaldsonStayInDelta
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 30
4285: IFFALSE 4321
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4287: LD_ADDR_EXP 3
4291: PUSH
4292: LD_STRING Donaldson
4294: PPUSH
4295: LD_INT 1
4297: PPUSH
4298: LD_STRING 05_
4300: PPUSH
4301: CALL 46209 0 3
4305: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4306: LD_EXP 3
4310: PPUSH
4311: LD_INT 4
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: LD_STRING OthersStayInDelta
4328: PPUSH
4329: CALL_OW 31
4333: ST_TO_ADDR
// if other > 2 then
4334: LD_VAR 0 4
4338: PUSH
4339: LD_INT 2
4341: GREATER
4342: IFFALSE 4387
// begin for j = 1 to 2 do
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: DOUBLE
4350: LD_INT 1
4352: DEC
4353: ST_TO_ADDR
4354: LD_INT 2
4356: PUSH
4357: FOR_TO
4358: IFFALSE 4383
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4360: LD_VAR 0 4
4364: PUSH
4365: LD_VAR 0 3
4369: ARRAY
4370: PPUSH
4371: LD_INT 4
4373: PPUSH
4374: LD_INT 0
4376: PPUSH
4377: CALL_OW 49
4381: GO 4357
4383: POP
4384: POP
// end else
4385: GO 4430
// begin for j = 1 to other do
4387: LD_ADDR_VAR 0 3
4391: PUSH
4392: DOUBLE
4393: LD_INT 1
4395: DEC
4396: ST_TO_ADDR
4397: LD_VAR 0 4
4401: PUSH
4402: FOR_TO
4403: IFFALSE 4428
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4405: LD_VAR 0 4
4409: PUSH
4410: LD_VAR 0 3
4414: ARRAY
4415: PPUSH
4416: LD_INT 4
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL_OW 49
4426: GO 4402
4428: POP
4429: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4430: LD_ADDR_VAR 0 4
4434: PUSH
4435: LD_STRING 06_other_apemans
4437: PPUSH
4438: CALL_OW 31
4442: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
4443: LD_VAR 0 4
4447: PUSH
4448: LD_INT 5
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: LD_INT 3
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PUSH
4466: LD_OWVAR 67
4470: ARRAY
4471: GREATEREQUAL
4472: IFFALSE 4505
// j := [ 5 , 4 , 3 , 3 ] [ Difficulty ] else
4474: LD_ADDR_VAR 0 3
4478: PUSH
4479: LD_INT 5
4481: PUSH
4482: LD_INT 4
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 3
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_OWVAR 67
4501: ARRAY
4502: ST_TO_ADDR
4503: GO 4515
// j := other ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: LD_VAR 0 4
4514: ST_TO_ADDR
// for i = 1 to j do
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_VAR 0 3
4529: PUSH
4530: FOR_TO
4531: IFFALSE 4556
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4533: LD_VAR 0 4
4537: PUSH
4538: LD_VAR 0 2
4542: ARRAY
4543: PPUSH
4544: LD_INT 4
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
4554: GO 4530
4556: POP
4557: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4558: LD_INT 4
4560: PPUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 70
4589: PPUSH
4590: LD_INT 53
4592: PPUSH
4593: LD_INT 19
4595: PPUSH
4596: CALL_OW 111
// firstAttack = 1 ;
4600: LD_ADDR_EXP 33
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// end ;
4608: LD_VAR 0 1
4612: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4613: LD_INT 0
4615: PPUSH
4616: PPUSH
4617: PPUSH
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4624: LD_ADDR_VAR 0 8
4628: PUSH
4629: LD_STRING 07_vehicles
4631: PPUSH
4632: EMPTY
4633: PPUSH
4634: CALL_OW 30
4638: ST_TO_ADDR
// macmilan_squad := [ ] ;
4639: LD_ADDR_EXP 42
4643: PUSH
4644: EMPTY
4645: ST_TO_ADDR
// tmp := [ ] ;
4646: LD_ADDR_VAR 0 6
4650: PUSH
4651: EMPTY
4652: ST_TO_ADDR
// tmp_vehs := [ ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: EMPTY
4659: ST_TO_ADDR
// uc_side := 1 ;
4660: LD_ADDR_OWVAR 20
4664: PUSH
4665: LD_INT 1
4667: ST_TO_ADDR
// uc_nation := 1 ;
4668: LD_ADDR_OWVAR 21
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// if vehicles then
4676: LD_VAR 0 8
4680: IFFALSE 4839
// begin k := 1 ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_VAR 0 8
4704: PUSH
4705: LD_INT 4
4707: DIV
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4837
// begin vc_chassis = vehicles [ k ] ;
4712: LD_ADDR_OWVAR 37
4716: PUSH
4717: LD_VAR 0 8
4721: PUSH
4722: LD_VAR 0 3
4726: ARRAY
4727: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4728: LD_ADDR_OWVAR 39
4732: PUSH
4733: LD_VAR 0 8
4737: PUSH
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 1
4745: PLUS
4746: ARRAY
4747: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4748: LD_ADDR_OWVAR 38
4752: PUSH
4753: LD_VAR 0 8
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_INT 2
4765: PLUS
4766: ARRAY
4767: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4768: LD_ADDR_OWVAR 40
4772: PUSH
4773: LD_VAR 0 8
4777: PUSH
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 3
4785: PLUS
4786: ARRAY
4787: ST_TO_ADDR
// k := k + 4 ;
4788: LD_ADDR_VAR 0 3
4792: PUSH
4793: LD_VAR 0 3
4797: PUSH
4798: LD_INT 4
4800: PLUS
4801: ST_TO_ADDR
// veh := CreateVehicle ;
4802: LD_ADDR_VAR 0 9
4806: PUSH
4807: CALL_OW 45
4811: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4812: LD_ADDR_VAR 0 7
4816: PUSH
4817: LD_VAR 0 7
4821: PPUSH
4822: LD_INT 1
4824: PPUSH
4825: LD_VAR 0 9
4829: PPUSH
4830: CALL_OW 2
4834: ST_TO_ADDR
// end ;
4835: GO 4709
4837: POP
4838: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4839: LD_ADDR_EXP 1
4843: PUSH
4844: LD_STRING JMM
4846: PPUSH
4847: LD_INT 1
4849: PPUSH
4850: LD_EXP 44
4854: PPUSH
4855: CALL 46209 0 3
4859: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4860: LD_EXP 12
4864: PUSH
4865: LD_INT 1
4867: EQUAL
4868: PUSH
4869: LD_EXP 12
4873: PUSH
4874: LD_INT 3
4876: EQUAL
4877: OR
4878: PUSH
4879: LD_EXP 2
4883: NOT
4884: AND
4885: IFFALSE 4943
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4887: LD_ADDR_EXP 2
4891: PUSH
4892: LD_STRING Brown
4894: PPUSH
4895: LD_INT 1
4897: PPUSH
4898: LD_EXP 44
4902: PPUSH
4903: CALL 46209 0 3
4907: ST_TO_ADDR
// if Brown then
4908: LD_EXP 2
4912: IFFALSE 4943
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_VAR 0 6
4923: PPUSH
4924: LD_VAR 0 6
4928: PUSH
4929: LD_INT 1
4931: PLUS
4932: PPUSH
4933: LD_EXP 2
4937: PPUSH
4938: CALL_OW 1
4942: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4943: LD_EXP 12
4947: PUSH
4948: LD_INT 2
4950: EQUAL
4951: PUSH
4952: LD_EXP 12
4956: PUSH
4957: LD_INT 3
4959: EQUAL
4960: OR
4961: PUSH
4962: LD_EXP 3
4966: NOT
4967: AND
4968: IFFALSE 5026
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4970: LD_ADDR_EXP 3
4974: PUSH
4975: LD_STRING Donaldson
4977: PPUSH
4978: LD_INT 1
4980: PPUSH
4981: LD_EXP 44
4985: PPUSH
4986: CALL 46209 0 3
4990: ST_TO_ADDR
// if Donaldson then
4991: LD_EXP 3
4995: IFFALSE 5026
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
4997: LD_ADDR_VAR 0 6
5001: PUSH
5002: LD_VAR 0 6
5006: PPUSH
5007: LD_VAR 0 6
5011: PUSH
5012: LD_INT 1
5014: PLUS
5015: PPUSH
5016: LD_EXP 3
5020: PPUSH
5021: CALL_OW 1
5025: ST_TO_ADDR
// end ; if not Bobby then
5026: LD_EXP 4
5030: NOT
5031: IFFALSE 5089
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
5033: LD_ADDR_EXP 4
5037: PUSH
5038: LD_STRING Bobby
5040: PPUSH
5041: LD_INT 1
5043: PPUSH
5044: LD_EXP 44
5048: PPUSH
5049: CALL 46209 0 3
5053: ST_TO_ADDR
// if Bobby then
5054: LD_EXP 4
5058: IFFALSE 5089
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5060: LD_ADDR_VAR 0 6
5064: PUSH
5065: LD_VAR 0 6
5069: PPUSH
5070: LD_VAR 0 6
5074: PUSH
5075: LD_INT 1
5077: PLUS
5078: PPUSH
5079: LD_EXP 4
5083: PPUSH
5084: CALL_OW 1
5088: ST_TO_ADDR
// end ; if not Cyrus then
5089: LD_EXP 5
5093: NOT
5094: IFFALSE 5152
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5096: LD_ADDR_EXP 5
5100: PUSH
5101: LD_STRING Cyrus
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_EXP 44
5111: PPUSH
5112: CALL 46209 0 3
5116: ST_TO_ADDR
// if Cyrus then
5117: LD_EXP 5
5121: IFFALSE 5152
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5123: LD_ADDR_VAR 0 6
5127: PUSH
5128: LD_VAR 0 6
5132: PPUSH
5133: LD_VAR 0 6
5137: PUSH
5138: LD_INT 1
5140: PLUS
5141: PPUSH
5142: LD_EXP 5
5146: PPUSH
5147: CALL_OW 1
5151: ST_TO_ADDR
// end ; if not Lisa then
5152: LD_EXP 6
5156: NOT
5157: IFFALSE 5215
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5159: LD_ADDR_EXP 6
5163: PUSH
5164: LD_STRING Lisa
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: LD_EXP 44
5174: PPUSH
5175: CALL 46209 0 3
5179: ST_TO_ADDR
// if Lisa then
5180: LD_EXP 6
5184: IFFALSE 5215
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5186: LD_ADDR_VAR 0 6
5190: PUSH
5191: LD_VAR 0 6
5195: PPUSH
5196: LD_VAR 0 6
5200: PUSH
5201: LD_INT 1
5203: PLUS
5204: PPUSH
5205: LD_EXP 6
5209: PPUSH
5210: CALL_OW 1
5214: ST_TO_ADDR
// end ; if not Frank then
5215: LD_EXP 7
5219: NOT
5220: IFFALSE 5278
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5222: LD_ADDR_EXP 7
5226: PUSH
5227: LD_STRING Frank
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: LD_EXP 44
5237: PPUSH
5238: CALL 46209 0 3
5242: ST_TO_ADDR
// if Frank then
5243: LD_EXP 7
5247: IFFALSE 5278
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5249: LD_ADDR_VAR 0 6
5253: PUSH
5254: LD_VAR 0 6
5258: PPUSH
5259: LD_VAR 0 6
5263: PUSH
5264: LD_INT 1
5266: PLUS
5267: PPUSH
5268: LD_EXP 7
5272: PPUSH
5273: CALL_OW 1
5277: ST_TO_ADDR
// end ; if not Kikuchi then
5278: LD_EXP 9
5282: NOT
5283: IFFALSE 5341
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5285: LD_ADDR_EXP 9
5289: PUSH
5290: LD_STRING Kikuchi
5292: PPUSH
5293: LD_INT 1
5295: PPUSH
5296: LD_EXP 44
5300: PPUSH
5301: CALL 46209 0 3
5305: ST_TO_ADDR
// if Kikuchi then
5306: LD_EXP 9
5310: IFFALSE 5341
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5312: LD_ADDR_VAR 0 6
5316: PUSH
5317: LD_VAR 0 6
5321: PPUSH
5322: LD_VAR 0 6
5326: PUSH
5327: LD_INT 1
5329: PLUS
5330: PPUSH
5331: LD_EXP 9
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// end ; if not Gladstone then
5341: LD_EXP 8
5345: NOT
5346: IFFALSE 5404
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5348: LD_ADDR_EXP 8
5352: PUSH
5353: LD_STRING Gladstone
5355: PPUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_EXP 44
5363: PPUSH
5364: CALL 46209 0 3
5368: ST_TO_ADDR
// if Gladstone then
5369: LD_EXP 8
5373: IFFALSE 5404
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5375: LD_ADDR_VAR 0 6
5379: PUSH
5380: LD_VAR 0 6
5384: PPUSH
5385: LD_VAR 0 6
5389: PUSH
5390: LD_INT 1
5392: PLUS
5393: PPUSH
5394: LD_EXP 8
5398: PPUSH
5399: CALL_OW 1
5403: ST_TO_ADDR
// end ; if not Khatam then
5404: LD_EXP 10
5408: NOT
5409: IFFALSE 5467
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5411: LD_ADDR_EXP 10
5415: PUSH
5416: LD_STRING Khatam
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: LD_EXP 44
5426: PPUSH
5427: CALL 46209 0 3
5431: ST_TO_ADDR
// if Khatam then
5432: LD_EXP 10
5436: IFFALSE 5467
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5438: LD_ADDR_VAR 0 6
5442: PUSH
5443: LD_VAR 0 6
5447: PPUSH
5448: LD_VAR 0 6
5452: PUSH
5453: LD_INT 1
5455: PLUS
5456: PPUSH
5457: LD_EXP 10
5461: PPUSH
5462: CALL_OW 1
5466: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5467: LD_ADDR_VAR 0 5
5471: PUSH
5472: LD_STRING 07c_others
5474: PPUSH
5475: CALL_OW 31
5479: ST_TO_ADDR
// macmilan_squad := others ;
5480: LD_ADDR_EXP 42
5484: PUSH
5485: LD_VAR 0 5
5489: ST_TO_ADDR
// if others then
5490: LD_VAR 0 5
5494: IFFALSE 5582
// for i in others do
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_VAR 0 5
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5580
// if GetClass ( i ) = 3 then
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 257
5518: PUSH
5519: LD_INT 3
5521: EQUAL
5522: IFFALSE 5549
// tmp := Insert ( tmp , 1 , i ) else
5524: LD_ADDR_VAR 0 6
5528: PUSH
5529: LD_VAR 0 6
5533: PPUSH
5534: LD_INT 1
5536: PPUSH
5537: LD_VAR 0 2
5541: PPUSH
5542: CALL_OW 2
5546: ST_TO_ADDR
5547: GO 5578
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5549: LD_ADDR_VAR 0 6
5553: PUSH
5554: LD_VAR 0 6
5558: PPUSH
5559: LD_VAR 0 6
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: PPUSH
5568: LD_VAR 0 2
5572: PPUSH
5573: CALL_OW 1
5577: ST_TO_ADDR
5578: GO 5506
5580: POP
5581: POP
// if FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) then
5582: LD_INT 4
5584: PPUSH
5585: LD_INT 21
5587: PUSH
5588: LD_INT 3
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 70
5599: IFFALSE 5640
// for i in FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) do
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 21
5611: PUSH
5612: LD_INT 3
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 70
5623: PUSH
5624: FOR_IN
5625: IFFALSE 5638
// RemoveUnit ( i ) ;
5627: LD_VAR 0 2
5631: PPUSH
5632: CALL_OW 64
5636: GO 5624
5638: POP
5639: POP
// wait ( 0 0$1 ) ;
5640: LD_INT 35
5642: PPUSH
5643: CALL_OW 67
// if tmp then
5647: LD_VAR 0 6
5651: IFFALSE 5836
// begin for i in tmp do
5653: LD_ADDR_VAR 0 2
5657: PUSH
5658: LD_VAR 0 6
5662: PUSH
5663: FOR_IN
5664: IFFALSE 5834
// begin SetDir ( i , 3 ) ;
5666: LD_VAR 0 2
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 233
// if tmp_vehs then
5678: LD_VAR 0 7
5682: IFFALSE 5760
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5684: LD_VAR 0 7
5688: PUSH
5689: LD_INT 1
5691: ARRAY
5692: PPUSH
5693: LD_INT 3
5695: PPUSH
5696: CALL_OW 233
// PlaceUnitXY ( tmp_vehs [ 1 ] , 78 , 5 , false ) ;
5700: LD_VAR 0 7
5704: PUSH
5705: LD_INT 1
5707: ARRAY
5708: PPUSH
5709: LD_INT 78
5711: PPUSH
5712: LD_INT 5
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 48
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5722: LD_VAR 0 2
5726: PPUSH
5727: LD_VAR 0 7
5731: PUSH
5732: LD_INT 1
5734: ARRAY
5735: PPUSH
5736: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5740: LD_ADDR_VAR 0 7
5744: PUSH
5745: LD_VAR 0 7
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 3
5757: ST_TO_ADDR
// end else
5758: GO 5775
// PlaceUnitArea ( i , GammaSupport , false ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: LD_INT 4
5767: PPUSH
5768: LD_INT 0
5770: PPUSH
5771: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5775: LD_VAR 0 2
5779: PPUSH
5780: LD_INT 77
5782: PPUSH
5783: LD_INT 16
5785: PPUSH
5786: CALL_OW 111
// AddComMoveXY ( i , 65 , 24 ) ;
5790: LD_VAR 0 2
5794: PPUSH
5795: LD_INT 65
5797: PPUSH
5798: LD_INT 24
5800: PPUSH
5801: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5805: LD_INT 35
5807: PPUSH
5808: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5812: LD_INT 4
5814: PPUSH
5815: LD_INT 22
5817: PUSH
5818: LD_INT 1
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 70
5829: NOT
5830: IFFALSE 5805
// end ;
5832: GO 5663
5834: POP
5835: POP
// end ; PlaceUnitArea ( JMM , GammaSupport , false ) ;
5836: LD_EXP 1
5840: PPUSH
5841: LD_INT 4
5843: PPUSH
5844: LD_INT 0
5846: PPUSH
5847: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_INT 77
5858: PPUSH
5859: LD_INT 16
5861: PPUSH
5862: CALL_OW 111
// end ;
5866: LD_VAR 0 1
5870: RET
// export function PrepareSikorsky ; begin
5871: LD_INT 0
5873: PPUSH
// uc_side = 4 ;
5874: LD_ADDR_OWVAR 20
5878: PUSH
5879: LD_INT 4
5881: ST_TO_ADDR
// uc_nation = 1 ;
5882: LD_ADDR_OWVAR 21
5886: PUSH
5887: LD_INT 1
5889: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5890: LD_ADDR_EXP 16
5894: PUSH
5895: LD_STRING Sikorski
5897: PPUSH
5898: LD_INT 0
5900: PPUSH
5901: LD_STRING 
5903: PPUSH
5904: CALL 46209 0 3
5908: ST_TO_ADDR
// vc_engine = 1 ;
5909: LD_ADDR_OWVAR 39
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_control = 1 ;
5917: LD_ADDR_OWVAR 38
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 , 4 ] [ Difficulty ] ;
5925: LD_ADDR_OWVAR 40
5929: PUSH
5930: LD_INT 5
5932: PUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: LD_OWVAR 67
5952: ARRAY
5953: ST_TO_ADDR
// vc_chassis = 4 ;
5954: LD_ADDR_OWVAR 37
5958: PUSH
5959: LD_INT 4
5961: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5962: LD_ADDR_EXP 17
5966: PUSH
5967: CALL_OW 45
5971: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5972: LD_EXP 17
5976: PPUSH
5977: LD_INT 3
5979: PPUSH
5980: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5984: LD_INT 35
5986: PPUSH
5987: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5991: LD_EXP 17
5995: PPUSH
5996: LD_INT 18
5998: PPUSH
5999: LD_INT 5
6001: PPUSH
6002: LD_INT 0
6004: PPUSH
6005: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
6009: LD_EXP 17
6013: PPUSH
6014: CALL_OW 305
6018: IFFALSE 5984
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
6020: LD_EXP 16
6024: PPUSH
6025: LD_EXP 17
6029: PPUSH
6030: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
6034: LD_EXP 17
6038: PPUSH
6039: LD_INT 5
6041: PPUSH
6042: CALL_OW 113
// end ;
6046: LD_VAR 0 1
6050: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
6051: LD_INT 0
6053: PPUSH
6054: PPUSH
6055: PPUSH
6056: PPUSH
// InitHc ;
6057: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 , 3 ] [ Difficulty ] do
6061: LD_ADDR_VAR 0 2
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_INT 5
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: LD_INT 4
6079: PUSH
6080: LD_INT 3
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_OWVAR 67
6093: ARRAY
6094: PUSH
6095: FOR_TO
6096: IFFALSE 6212
// begin uc_side = 4 ;
6098: LD_ADDR_OWVAR 20
6102: PUSH
6103: LD_INT 4
6105: ST_TO_ADDR
// uc_nation = 1 ;
6106: LD_ADDR_OWVAR 21
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// hc_name =  ;
6114: LD_ADDR_OWVAR 26
6118: PUSH
6119: LD_STRING 
6121: ST_TO_ADDR
// hc_gallery =  ;
6122: LD_ADDR_OWVAR 33
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6130: LD_INT 0
6132: PPUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_INT 5
6138: PPUSH
6139: LD_INT 8
6141: PPUSH
6142: CALL_OW 12
6146: PPUSH
6147: CALL_OW 380
// un = CreateHuman ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: CALL_OW 44
6160: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6161: LD_VAR 0 3
6165: PPUSH
6166: LD_INT 3
6168: PPUSH
6169: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_INT 9
6180: PPUSH
6181: LD_INT 0
6183: PPUSH
6184: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6188: LD_VAR 0 3
6192: PPUSH
6193: LD_INT 53
6195: PPUSH
6196: LD_INT 23
6198: PPUSH
6199: CALL_OW 111
// wait ( 0 0$1 ) ;
6203: LD_INT 35
6205: PPUSH
6206: CALL_OW 67
// end ;
6210: GO 6095
6212: POP
6213: POP
// for i = 1 to 2 do
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: DOUBLE
6220: LD_INT 1
6222: DEC
6223: ST_TO_ADDR
6224: LD_INT 2
6226: PUSH
6227: FOR_TO
6228: IFFALSE 6344
// begin uc_side = 4 ;
6230: LD_ADDR_OWVAR 20
6234: PUSH
6235: LD_INT 4
6237: ST_TO_ADDR
// uc_nation = 1 ;
6238: LD_ADDR_OWVAR 21
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// hc_name =  ;
6246: LD_ADDR_OWVAR 26
6250: PUSH
6251: LD_STRING 
6253: ST_TO_ADDR
// hc_gallery =  ;
6254: LD_ADDR_OWVAR 33
6258: PUSH
6259: LD_STRING 
6261: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 4
6267: PPUSH
6268: LD_INT 5
6270: PPUSH
6271: LD_INT 8
6273: PPUSH
6274: CALL_OW 12
6278: PPUSH
6279: CALL_OW 380
// un = CreateHuman ;
6283: LD_ADDR_VAR 0 3
6287: PUSH
6288: CALL_OW 44
6292: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6293: LD_VAR 0 3
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6305: LD_VAR 0 3
6309: PPUSH
6310: LD_INT 9
6312: PPUSH
6313: LD_INT 0
6315: PPUSH
6316: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6320: LD_VAR 0 3
6324: PPUSH
6325: LD_INT 53
6327: PPUSH
6328: LD_INT 23
6330: PPUSH
6331: CALL_OW 111
// wait ( 0 0$1 ) ;
6335: LD_INT 35
6337: PPUSH
6338: CALL_OW 67
// end ;
6342: GO 6227
6344: POP
6345: POP
// for i = 1 to [ 5 , 5 , 4 , 3 ] [ Difficulty ] do
6346: LD_ADDR_VAR 0 2
6350: PUSH
6351: DOUBLE
6352: LD_INT 1
6354: DEC
6355: ST_TO_ADDR
6356: LD_INT 5
6358: PUSH
6359: LD_INT 5
6361: PUSH
6362: LD_INT 4
6364: PUSH
6365: LD_INT 3
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: LD_OWVAR 67
6378: ARRAY
6379: PUSH
6380: FOR_TO
6381: IFFALSE 6615
// begin uc_side = 4 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 4
6390: ST_TO_ADDR
// uc_nation = 1 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// vc_engine = 1 ;
6399: LD_ADDR_OWVAR 39
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// vc_control = 1 ;
6407: LD_ADDR_OWVAR 38
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6415: LD_ADDR_OWVAR 40
6419: PUSH
6420: LD_INT 7
6422: PUSH
6423: LD_INT 4
6425: PUSH
6426: LD_INT 5
6428: PUSH
6429: LD_INT 6
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_VAR 0 2
6442: PUSH
6443: LD_INT 4
6445: MOD
6446: PUSH
6447: LD_INT 1
6449: PLUS
6450: ARRAY
6451: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6452: LD_ADDR_OWVAR 37
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 3
6462: PUSH
6463: LD_INT 4
6465: PUSH
6466: LD_INT 4
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_VAR 0 2
6479: PUSH
6480: LD_INT 4
6482: MOD
6483: PUSH
6484: LD_INT 1
6486: PLUS
6487: ARRAY
6488: ST_TO_ADDR
// veh = CreateVehicle ;
6489: LD_ADDR_VAR 0 4
6493: PUSH
6494: CALL_OW 45
6498: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 3
6506: PPUSH
6507: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 9
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// InitHc ;
6526: CALL_OW 19
// hc_name =  ;
6530: LD_ADDR_OWVAR 26
6534: PUSH
6535: LD_STRING 
6537: ST_TO_ADDR
// hc_gallery =  ;
6538: LD_ADDR_OWVAR 33
6542: PUSH
6543: LD_STRING 
6545: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6546: LD_INT 0
6548: PPUSH
6549: LD_INT 3
6551: PPUSH
6552: LD_INT 5
6554: PPUSH
6555: LD_INT 8
6557: PPUSH
6558: CALL_OW 12
6562: PPUSH
6563: CALL_OW 380
// un = CreateHuman ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: CALL_OW 44
6576: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6577: LD_VAR 0 3
6581: PPUSH
6582: LD_VAR 0 4
6586: PPUSH
6587: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6591: LD_VAR 0 3
6595: PPUSH
6596: LD_INT 53
6598: PPUSH
6599: LD_INT 23
6601: PPUSH
6602: CALL_OW 111
// wait ( 0 0$5 ) ;
6606: LD_INT 175
6608: PPUSH
6609: CALL_OW 67
// end ;
6613: GO 6380
6615: POP
6616: POP
// end ; end_of_file
6617: LD_VAR 0 1
6621: RET
// export function PrepareRussianCommander ; begin
6622: LD_INT 0
6624: PPUSH
// uc_side = 3 ;
6625: LD_ADDR_OWVAR 20
6629: PUSH
6630: LD_INT 3
6632: ST_TO_ADDR
// uc_nation = 3 ;
6633: LD_ADDR_OWVAR 21
6637: PUSH
6638: LD_INT 3
6640: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6641: LD_ADDR_EXP 24
6645: PUSH
6646: LD_STRING Borodin
6648: PPUSH
6649: CALL_OW 25
6653: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6654: LD_EXP 24
6658: PPUSH
6659: LD_INT 25
6661: PPUSH
6662: LD_INT 0
6664: PPUSH
6665: CALL_OW 49
// end ;
6669: LD_VAR 0 1
6673: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6674: LD_INT 0
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
// for i = 1 to 10 do
6680: LD_ADDR_VAR 0 2
6684: PUSH
6685: DOUBLE
6686: LD_INT 1
6688: DEC
6689: ST_TO_ADDR
6690: LD_INT 10
6692: PUSH
6693: FOR_TO
6694: IFFALSE 6768
// begin uc_side = 6 ;
6696: LD_ADDR_OWVAR 20
6700: PUSH
6701: LD_INT 6
6703: ST_TO_ADDR
// uc_nation = 3 ;
6704: LD_ADDR_OWVAR 21
6708: PUSH
6709: LD_INT 3
6711: ST_TO_ADDR
// hc_gallery =  ;
6712: LD_ADDR_OWVAR 33
6716: PUSH
6717: LD_STRING 
6719: ST_TO_ADDR
// hc_name =  ;
6720: LD_ADDR_OWVAR 26
6724: PUSH
6725: LD_STRING 
6727: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6728: LD_INT 0
6730: PPUSH
6731: LD_INT 1
6733: PPUSH
6734: LD_INT 3
6736: PPUSH
6737: CALL_OW 380
// un = CreateHuman ;
6741: LD_ADDR_VAR 0 3
6745: PUSH
6746: CALL_OW 44
6750: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6751: LD_VAR 0 3
6755: PPUSH
6756: LD_INT 1
6758: PPUSH
6759: LD_INT 0
6761: PPUSH
6762: CALL_OW 49
// end ;
6766: GO 6693
6768: POP
6769: POP
// for i = 1 to 3 do
6770: LD_ADDR_VAR 0 2
6774: PUSH
6775: DOUBLE
6776: LD_INT 1
6778: DEC
6779: ST_TO_ADDR
6780: LD_INT 3
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6933
// begin uc_side = 6 ;
6786: LD_ADDR_OWVAR 20
6790: PUSH
6791: LD_INT 6
6793: ST_TO_ADDR
// uc_nation = 3 ;
6794: LD_ADDR_OWVAR 21
6798: PUSH
6799: LD_INT 3
6801: ST_TO_ADDR
// vc_engine = 1 ;
6802: LD_ADDR_OWVAR 39
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// vc_control = 1 ;
6810: LD_ADDR_OWVAR 38
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6818: LD_ADDR_OWVAR 40
6822: PUSH
6823: LD_INT 43
6825: PUSH
6826: LD_INT 44
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 1
6835: PPUSH
6836: LD_INT 2
6838: PPUSH
6839: CALL_OW 12
6843: ARRAY
6844: ST_TO_ADDR
// vc_chassis = 22 ;
6845: LD_ADDR_OWVAR 37
6849: PUSH
6850: LD_INT 22
6852: ST_TO_ADDR
// veh = CreateVehicle ;
6853: LD_ADDR_VAR 0 4
6857: PUSH
6858: CALL_OW 45
6862: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6863: LD_VAR 0 4
6867: PPUSH
6868: LD_INT 2
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: CALL_OW 49
// hc_gallery =  ;
6878: LD_ADDR_OWVAR 33
6882: PUSH
6883: LD_STRING 
6885: ST_TO_ADDR
// hc_name =  ;
6886: LD_ADDR_OWVAR 26
6890: PUSH
6891: LD_STRING 
6893: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6894: LD_INT 0
6896: PPUSH
6897: LD_INT 3
6899: PPUSH
6900: LD_INT 4
6902: PPUSH
6903: CALL_OW 380
// un = CreateHuman ;
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: CALL_OW 44
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_VAR 0 4
6926: PPUSH
6927: CALL_OW 52
// end ;
6931: GO 6783
6933: POP
6934: POP
// end ;
6935: LD_VAR 0 1
6939: RET
// export function PrepareRussians ; var i , un ; begin
6940: LD_INT 0
6942: PPUSH
6943: PPUSH
6944: PPUSH
// for i = 1 to 8 do
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_INT 8
6957: PUSH
6958: FOR_TO
6959: IFFALSE 7045
// begin uc_side = 3 ;
6961: LD_ADDR_OWVAR 20
6965: PUSH
6966: LD_INT 3
6968: ST_TO_ADDR
// uc_nation = 3 ;
6969: LD_ADDR_OWVAR 21
6973: PUSH
6974: LD_INT 3
6976: ST_TO_ADDR
// hc_gallery =  ;
6977: LD_ADDR_OWVAR 33
6981: PUSH
6982: LD_STRING 
6984: ST_TO_ADDR
// hc_name =  ;
6985: LD_ADDR_OWVAR 26
6989: PUSH
6990: LD_STRING 
6992: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6993: LD_INT 0
6995: PPUSH
6996: LD_INT 1
6998: PPUSH
6999: LD_EXP 25
7003: PPUSH
7004: LD_EXP 26
7008: PPUSH
7009: CALL_OW 12
7013: PPUSH
7014: CALL_OW 380
// un = CreateHuman ;
7018: LD_ADDR_VAR 0 3
7022: PUSH
7023: CALL_OW 44
7027: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7028: LD_VAR 0 3
7032: PPUSH
7033: LD_INT 3
7035: PPUSH
7036: LD_INT 0
7038: PPUSH
7039: CALL_OW 49
// end ;
7043: GO 6958
7045: POP
7046: POP
// for i = 1 to 4 do
7047: LD_ADDR_VAR 0 2
7051: PUSH
7052: DOUBLE
7053: LD_INT 1
7055: DEC
7056: ST_TO_ADDR
7057: LD_INT 4
7059: PUSH
7060: FOR_TO
7061: IFFALSE 7147
// begin uc_side = 3 ;
7063: LD_ADDR_OWVAR 20
7067: PUSH
7068: LD_INT 3
7070: ST_TO_ADDR
// uc_nation = 3 ;
7071: LD_ADDR_OWVAR 21
7075: PUSH
7076: LD_INT 3
7078: ST_TO_ADDR
// hc_gallery =  ;
7079: LD_ADDR_OWVAR 33
7083: PUSH
7084: LD_STRING 
7086: ST_TO_ADDR
// hc_name =  ;
7087: LD_ADDR_OWVAR 26
7091: PUSH
7092: LD_STRING 
7094: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7095: LD_INT 0
7097: PPUSH
7098: LD_INT 2
7100: PPUSH
7101: LD_EXP 25
7105: PPUSH
7106: LD_EXP 26
7110: PPUSH
7111: CALL_OW 12
7115: PPUSH
7116: CALL_OW 380
// un = CreateHuman ;
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: CALL_OW 44
7129: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7130: LD_VAR 0 3
7134: PPUSH
7135: LD_INT 3
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7060
7147: POP
7148: POP
// for i = 1 to 3 do
7149: LD_ADDR_VAR 0 2
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_INT 3
7161: PUSH
7162: FOR_TO
7163: IFFALSE 7249
// begin uc_side = 3 ;
7165: LD_ADDR_OWVAR 20
7169: PUSH
7170: LD_INT 3
7172: ST_TO_ADDR
// uc_nation = 3 ;
7173: LD_ADDR_OWVAR 21
7177: PUSH
7178: LD_INT 3
7180: ST_TO_ADDR
// hc_gallery =  ;
7181: LD_ADDR_OWVAR 33
7185: PUSH
7186: LD_STRING 
7188: ST_TO_ADDR
// hc_name =  ;
7189: LD_ADDR_OWVAR 26
7193: PUSH
7194: LD_STRING 
7196: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7197: LD_INT 0
7199: PPUSH
7200: LD_INT 3
7202: PPUSH
7203: LD_EXP 25
7207: PPUSH
7208: LD_EXP 26
7212: PPUSH
7213: CALL_OW 12
7217: PPUSH
7218: CALL_OW 380
// un = CreateHuman ;
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: CALL_OW 44
7231: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7232: LD_VAR 0 3
7236: PPUSH
7237: LD_INT 3
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: CALL_OW 49
// end ;
7247: GO 7162
7249: POP
7250: POP
// for i = 1 to 2 do
7251: LD_ADDR_VAR 0 2
7255: PUSH
7256: DOUBLE
7257: LD_INT 1
7259: DEC
7260: ST_TO_ADDR
7261: LD_INT 2
7263: PUSH
7264: FOR_TO
7265: IFFALSE 7351
// begin uc_side = 3 ;
7267: LD_ADDR_OWVAR 20
7271: PUSH
7272: LD_INT 3
7274: ST_TO_ADDR
// uc_nation = 3 ;
7275: LD_ADDR_OWVAR 21
7279: PUSH
7280: LD_INT 3
7282: ST_TO_ADDR
// hc_gallery =  ;
7283: LD_ADDR_OWVAR 33
7287: PUSH
7288: LD_STRING 
7290: ST_TO_ADDR
// hc_name =  ;
7291: LD_ADDR_OWVAR 26
7295: PUSH
7296: LD_STRING 
7298: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7299: LD_INT 0
7301: PPUSH
7302: LD_INT 4
7304: PPUSH
7305: LD_EXP 25
7309: PPUSH
7310: LD_EXP 26
7314: PPUSH
7315: CALL_OW 12
7319: PPUSH
7320: CALL_OW 380
// un = CreateHuman ;
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: CALL_OW 44
7333: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7334: LD_VAR 0 3
7338: PPUSH
7339: LD_INT 3
7341: PPUSH
7342: LD_INT 0
7344: PPUSH
7345: CALL_OW 49
// end ;
7349: GO 7264
7351: POP
7352: POP
// end ; end_of_file
7353: LD_VAR 0 1
7357: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7358: LD_INT 0
7360: PPUSH
7361: PPUSH
7362: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7363: LD_ADDR_VAR 0 1
7367: PUSH
7368: LD_VAR 0 1
7372: PUSH
7373: LD_EXP 1
7377: PUSH
7378: LD_EXP 2
7382: PUSH
7383: LD_EXP 3
7387: PUSH
7388: LD_EXP 4
7392: PUSH
7393: LD_EXP 5
7397: PUSH
7398: LD_EXP 6
7402: PUSH
7403: LD_EXP 7
7407: PUSH
7408: LD_EXP 8
7412: PUSH
7413: LD_EXP 9
7417: PUSH
7418: LD_EXP 10
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: DIFF
7435: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_VAR 0 1
7453: PPUSH
7454: CALL_OW 12
7458: ARRAY
7459: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7460: LD_VAR 0 6
7464: PPUSH
7465: CALL_OW 258
7469: PUSH
7470: LD_INT 1
7472: EQUAL
7473: IFFALSE 7491
// Say ( speaker , dialogMID ) else
7475: LD_VAR 0 6
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL_OW 88
7489: GO 7505
// Say ( speaker , dialogFID ) ;
7491: LD_VAR 0 6
7495: PPUSH
7496: LD_VAR 0 3
7500: PPUSH
7501: CALL_OW 88
// result := speaker ;
7505: LD_ADDR_VAR 0 4
7509: PUSH
7510: LD_VAR 0 6
7514: ST_TO_ADDR
// end ;
7515: LD_VAR 0 4
7519: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7520: LD_INT 0
7522: PPUSH
7523: PPUSH
7524: PPUSH
// uc_side := GetSide ( b ) ;
7525: LD_ADDR_OWVAR 20
7529: PUSH
7530: LD_VAR 0 2
7534: PPUSH
7535: CALL_OW 255
7539: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7540: LD_ADDR_OWVAR 21
7544: PUSH
7545: LD_VAR 0 2
7549: PPUSH
7550: CALL_OW 248
7554: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7555: LD_INT 0
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: LD_VAR 0 1
7565: PPUSH
7566: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7570: LD_ADDR_VAR 0 5
7574: PUSH
7575: LD_VAR 0 2
7579: PPUSH
7580: CALL_OW 254
7584: PUSH
7585: LD_INT 3
7587: MINUS
7588: ST_TO_ADDR
// if dir < 0 then
7589: LD_VAR 0 5
7593: PUSH
7594: LD_INT 0
7596: LESS
7597: IFFALSE 7613
// dir := 6 + dir ;
7599: LD_ADDR_VAR 0 5
7603: PUSH
7604: LD_INT 6
7606: PUSH
7607: LD_VAR 0 5
7611: PLUS
7612: ST_TO_ADDR
// un := CreateHuman ;
7613: LD_ADDR_VAR 0 4
7617: PUSH
7618: CALL_OW 44
7622: ST_TO_ADDR
// SetDir ( un , dir ) ;
7623: LD_VAR 0 4
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7637: LD_VAR 0 4
7641: PPUSH
7642: LD_VAR 0 2
7646: PPUSH
7647: CALL_OW 52
// end ;
7651: LD_VAR 0 3
7655: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7656: LD_INT 0
7658: PPUSH
7659: PPUSH
7660: PPUSH
7661: PPUSH
// for i = 1 to count do
7662: LD_ADDR_VAR 0 8
7666: PUSH
7667: DOUBLE
7668: LD_INT 1
7670: DEC
7671: ST_TO_ADDR
7672: LD_VAR 0 6
7676: PUSH
7677: FOR_TO
7678: IFFALSE 7759
// begin uc_side = side ;
7680: LD_ADDR_OWVAR 20
7684: PUSH
7685: LD_VAR 0 1
7689: ST_TO_ADDR
// uc_nation = nation ;
7690: LD_ADDR_OWVAR 21
7694: PUSH
7695: LD_VAR 0 2
7699: ST_TO_ADDR
// hc_gallery =  ;
7700: LD_ADDR_OWVAR 33
7704: PUSH
7705: LD_STRING 
7707: ST_TO_ADDR
// hc_name =  ;
7708: LD_ADDR_OWVAR 26
7712: PUSH
7713: LD_STRING 
7715: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7716: LD_INT 0
7718: PPUSH
7719: LD_VAR 0 5
7723: PPUSH
7724: LD_VAR 0 4
7728: PPUSH
7729: CALL_OW 380
// un = CreateHuman ;
7733: LD_ADDR_VAR 0 10
7737: PUSH
7738: CALL_OW 44
7742: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7743: LD_VAR 0 10
7747: PPUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: CALL_OW 52
// end ;
7757: GO 7677
7759: POP
7760: POP
// end ;
7761: LD_VAR 0 7
7765: RET
// export function PrepareDifficulty ; begin
7766: LD_INT 0
7768: PPUSH
// case Difficulty of 1 :
7769: LD_OWVAR 67
7773: PUSH
7774: LD_INT 1
7776: DOUBLE
7777: EQUAL
7778: IFTRUE 7782
7780: GO 7801
7782: POP
// begin RuSolMinLevel = 3 ;
7783: LD_ADDR_EXP 25
7787: PUSH
7788: LD_INT 3
7790: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7791: LD_ADDR_EXP 26
7795: PUSH
7796: LD_INT 5
7798: ST_TO_ADDR
// end ; 2 :
7799: GO 7979
7801: LD_INT 2
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7880
7809: POP
// begin RuSolMinLevel = 5 ;
7810: LD_ADDR_EXP 25
7814: PUSH
7815: LD_INT 5
7817: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7818: LD_ADDR_EXP 26
7822: PUSH
7823: LD_INT 6
7825: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7826: LD_INT 51
7828: PPUSH
7829: LD_INT 3
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7839: LD_INT 57
7841: PPUSH
7842: LD_INT 3
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7852: LD_INT 57
7854: PPUSH
7855: LD_INT 6
7857: PPUSH
7858: LD_INT 2
7860: PPUSH
7861: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7865: LD_INT 51
7867: PPUSH
7868: LD_INT 6
7870: PPUSH
7871: LD_INT 2
7873: PPUSH
7874: CALL_OW 322
// end ; 3 .. 4 :
7878: GO 7979
7880: LD_INT 3
7882: DOUBLE
7883: GREATEREQUAL
7884: IFFALSE 7892
7886: LD_INT 4
7888: DOUBLE
7889: LESSEQUAL
7890: IFTRUE 7894
7892: GO 7978
7894: POP
// begin RuSolMinLevel = 5 ;
7895: LD_ADDR_EXP 25
7899: PUSH
7900: LD_INT 5
7902: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7903: LD_ADDR_EXP 26
7907: PUSH
7908: LD_INT 6
7910: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7911: LD_INT 57
7913: PPUSH
7914: LD_INT 3
7916: PPUSH
7917: LD_INT 1
7919: PPUSH
7920: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7924: LD_INT 51
7926: PPUSH
7927: LD_INT 3
7929: PPUSH
7930: LD_INT 1
7932: PPUSH
7933: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7937: LD_INT 52
7939: PPUSH
7940: LD_INT 3
7942: PPUSH
7943: LD_INT 1
7945: PPUSH
7946: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7950: LD_INT 57
7952: PPUSH
7953: LD_INT 6
7955: PPUSH
7956: LD_INT 2
7958: PPUSH
7959: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7963: LD_INT 52
7965: PPUSH
7966: LD_INT 6
7968: PPUSH
7969: LD_INT 2
7971: PPUSH
7972: CALL_OW 322
// end ; end ;
7976: GO 7979
7978: POP
// end ;
7979: LD_VAR 0 1
7983: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7984: LD_INT 0
7986: PPUSH
7987: PPUSH
7988: PPUSH
7989: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7990: LD_ADDR_VAR 0 3
7994: PUSH
7995: LD_INT 22
7997: PUSH
7998: LD_INT 3
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 25
8007: PUSH
8008: LD_INT 2
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 69
8023: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
8024: LD_ADDR_VAR 0 4
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: LD_INT 75
8034: PUSH
8035: LD_INT 79
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: LD_INT 113
8052: PUSH
8053: LD_INT 94
8055: PUSH
8056: LD_INT 4
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 29
8067: PUSH
8068: LD_INT 106
8070: PUSH
8071: LD_INT 97
8073: PUSH
8074: LD_INT 3
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 26
8085: PUSH
8086: LD_INT 93
8088: PUSH
8089: LD_INT 97
8091: PUSH
8092: LD_INT 5
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 100
8106: PUSH
8107: LD_INT 89
8109: PUSH
8110: LD_INT 3
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 17
8121: PUSH
8122: LD_INT 96
8124: PUSH
8125: LD_INT 89
8127: PUSH
8128: LD_INT 1
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 32
8139: PUSH
8140: LD_INT 78
8142: PUSH
8143: LD_INT 94
8145: PUSH
8146: LD_INT 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 32
8157: PUSH
8158: LD_INT 95
8160: PUSH
8161: LD_INT 82
8163: PUSH
8164: LD_INT 3
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 32
8175: PUSH
8176: LD_INT 104
8178: PUSH
8179: LD_INT 85
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 32
8193: PUSH
8194: LD_INT 81
8196: PUSH
8197: LD_INT 78
8199: PUSH
8200: LD_INT 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 33
8211: PUSH
8212: LD_INT 109
8214: PUSH
8215: LD_INT 90
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 33
8229: PUSH
8230: LD_INT 88
8232: PUSH
8233: LD_INT 79
8235: PUSH
8236: LD_INT 3
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 33
8247: PUSH
8248: LD_INT 76
8250: PUSH
8251: LD_INT 87
8253: PUSH
8254: LD_INT 1
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 26
8265: PUSH
8266: LD_INT 96
8268: PUSH
8269: LD_INT 97
8271: PUSH
8272: LD_INT 5
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 26
8283: PUSH
8284: LD_INT 85
8286: PUSH
8287: LD_INT 84
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 6
8301: PUSH
8302: LD_INT 88
8304: PUSH
8305: LD_INT 95
8307: PUSH
8308: LD_INT 0
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 19
8319: PUSH
8320: LD_INT 103
8322: PUSH
8323: LD_INT 89
8325: PUSH
8326: LD_INT 4
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 16
8337: PUSH
8338: LD_INT 97
8340: PUSH
8341: LD_INT 86
8343: PUSH
8344: LD_INT 2
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 24
8355: PUSH
8356: LD_INT 100
8358: PUSH
8359: LD_INT 85
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: ST_TO_ADDR
// for i := 1 to buildingsTab do
8392: LD_ADDR_VAR 0 2
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_VAR 0 4
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8481
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8410: LD_VAR 0 3
8414: PPUSH
8415: LD_VAR 0 4
8419: PUSH
8420: LD_VAR 0 2
8424: ARRAY
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 4
8434: PUSH
8435: LD_VAR 0 2
8439: ARRAY
8440: PUSH
8441: LD_INT 2
8443: ARRAY
8444: PPUSH
8445: LD_VAR 0 4
8449: PUSH
8450: LD_VAR 0 2
8454: ARRAY
8455: PUSH
8456: LD_INT 3
8458: ARRAY
8459: PPUSH
8460: LD_VAR 0 4
8464: PUSH
8465: LD_VAR 0 2
8469: ARRAY
8470: PUSH
8471: LD_INT 4
8473: ARRAY
8474: PPUSH
8475: CALL_OW 205
8479: GO 8407
8481: POP
8482: POP
// end ;
8483: LD_VAR 0 1
8487: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8488: LD_INT 0
8490: PPUSH
8491: PPUSH
// for i in charactersList do
8492: LD_ADDR_VAR 0 4
8496: PUSH
8497: LD_VAR 0 1
8501: PUSH
8502: FOR_IN
8503: IFFALSE 8521
// SaveCharacters ( i , ident ) ;
8505: LD_VAR 0 4
8509: PPUSH
8510: LD_VAR 0 2
8514: PPUSH
8515: CALL_OW 38
8519: GO 8502
8521: POP
8522: POP
// end ;
8523: LD_VAR 0 3
8527: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8528: LD_INT 0
8530: PPUSH
8531: PPUSH
8532: PPUSH
8533: PPUSH
8534: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8535: LD_ADDR_VAR 0 8
8539: PUSH
8540: LD_INT 48
8542: PUSH
8543: LD_INT 49
8545: PUSH
8546: LD_INT 50
8548: PUSH
8549: LD_INT 20
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: LD_INT 51
8557: PUSH
8558: LD_INT 52
8560: PUSH
8561: LD_INT 69
8563: PUSH
8564: LD_INT 39
8566: PUSH
8567: LD_INT 34
8569: PUSH
8570: LD_INT 40
8572: PUSH
8573: LD_INT 53
8575: PUSH
8576: LD_INT 71
8578: PUSH
8579: LD_INT 57
8581: PUSH
8582: LD_INT 58
8584: PUSH
8585: LD_INT 44
8587: PUSH
8588: LD_INT 32
8590: PUSH
8591: LD_INT 27
8593: PUSH
8594: LD_INT 23
8596: PUSH
8597: LD_INT 33
8599: PUSH
8600: LD_INT 59
8602: PUSH
8603: LD_INT 54
8605: PUSH
8606: LD_INT 55
8608: PUSH
8609: LD_INT 56
8611: PUSH
8612: LD_INT 63
8614: PUSH
8615: LD_INT 64
8617: PUSH
8618: LD_INT 65
8620: PUSH
8621: LD_INT 30
8623: PUSH
8624: LD_INT 31
8626: PUSH
8627: LD_INT 21
8629: PUSH
8630: LD_INT 22
8632: PUSH
8633: LD_INT 25
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8670: LD_ADDR_VAR 0 5
8674: PUSH
8675: DOUBLE
8676: LD_INT 1
8678: DEC
8679: ST_TO_ADDR
8680: LD_VAR 0 8
8684: PUSH
8685: FOR_TO
8686: IFFALSE 8762
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8688: LD_VAR 0 8
8692: PUSH
8693: LD_VAR 0 5
8697: ARRAY
8698: PPUSH
8699: LD_VAR 0 1
8703: PPUSH
8704: CALL_OW 321
8708: PUSH
8709: LD_INT 1
8711: EQUAL
8712: PUSH
8713: LD_VAR 0 8
8717: PUSH
8718: LD_VAR 0 5
8722: ARRAY
8723: PPUSH
8724: LD_VAR 0 3
8728: PPUSH
8729: CALL_OW 482
8733: PUSH
8734: LD_INT 1
8736: EQUAL
8737: AND
8738: IFFALSE 8760
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8740: LD_VAR 0 2
8744: PPUSH
8745: LD_VAR 0 8
8749: PUSH
8750: LD_VAR 0 5
8754: ARRAY
8755: PPUSH
8756: CALL_OW 184
8760: GO 8685
8762: POP
8763: POP
// end ;
8764: LD_VAR 0 4
8768: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8769: LD_INT 0
8771: PPUSH
8772: PPUSH
8773: PPUSH
8774: PPUSH
8775: PPUSH
8776: PPUSH
8777: PPUSH
8778: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8779: LD_ADDR_VAR 0 6
8783: PUSH
8784: LD_VAR 0 2
8788: PPUSH
8789: LD_INT 22
8791: PUSH
8792: LD_VAR 0 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 56
8803: PUSH
8804: EMPTY
8805: LIST
8806: PUSH
8807: LD_INT 24
8809: PUSH
8810: LD_INT 700
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: LD_INT 60
8822: PUSH
8823: EMPTY
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 2
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 25
8845: PUSH
8846: LD_INT 5
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 25
8855: PUSH
8856: LD_INT 8
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 25
8865: PUSH
8866: LD_INT 9
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 70
8891: PUSH
8892: LD_EXP 24
8896: PUSH
8897: EMPTY
8898: LIST
8899: DIFF
8900: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8901: LD_ADDR_VAR 0 7
8905: PUSH
8906: LD_VAR 0 2
8910: PPUSH
8911: LD_INT 22
8913: PUSH
8914: LD_VAR 0 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 30
8925: PUSH
8926: LD_INT 32
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 58
8935: PUSH
8936: EMPTY
8937: LIST
8938: PUSH
8939: LD_INT 24
8941: PUSH
8942: LD_INT 251
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: PPUSH
8955: CALL_OW 70
8959: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8960: LD_ADDR_VAR 0 9
8964: PUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_INT 22
8972: PUSH
8973: LD_VAR 0 1
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: LD_INT 30
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 30
8997: PUSH
8998: LD_INT 5
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 24
9012: PUSH
9013: LD_INT 251
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 70
9029: ST_TO_ADDR
// if barrackList > 0 then
9030: LD_VAR 0 9
9034: PUSH
9035: LD_INT 0
9037: GREATER
9038: IFFALSE 9186
// begin if turretList = 0 then
9040: LD_VAR 0 7
9044: PUSH
9045: LD_INT 0
9047: EQUAL
9048: IFFALSE 9090
// begin if soldiers_list > 0 then
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 0
9057: GREATER
9058: IFFALSE 9088
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9060: LD_VAR 0 6
9064: PPUSH
9065: LD_VAR 0 9
9069: PUSH
9070: LD_INT 1
9072: PPUSH
9073: LD_VAR 0 9
9077: PPUSH
9078: CALL_OW 12
9082: ARRAY
9083: PPUSH
9084: CALL_OW 120
// end else
9088: GO 9186
// begin for i in barrackList do
9090: LD_ADDR_VAR 0 4
9094: PUSH
9095: LD_VAR 0 9
9099: PUSH
9100: FOR_IN
9101: IFFALSE 9184
// begin insideUnits = UnitsInside ( i ) ;
9103: LD_ADDR_VAR 0 10
9107: PUSH
9108: LD_VAR 0 4
9112: PPUSH
9113: CALL_OW 313
9117: ST_TO_ADDR
// if insideUnits > 0 then
9118: LD_VAR 0 10
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: IFFALSE 9150
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9128: LD_VAR 0 10
9132: PUSH
9133: LD_INT 1
9135: ARRAY
9136: PPUSH
9137: LD_VAR 0 7
9141: PUSH
9142: LD_INT 1
9144: ARRAY
9145: PPUSH
9146: CALL_OW 120
// if soldiers_list > 0 then
9150: LD_VAR 0 6
9154: PUSH
9155: LD_INT 0
9157: GREATER
9158: IFFALSE 9182
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9160: LD_VAR 0 6
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: LD_VAR 0 7
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: CALL_OW 120
// end ;
9182: GO 9100
9184: POP
9185: POP
// end ; end ; end ;
9186: LD_VAR 0 3
9190: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9191: LD_INT 0
9193: PPUSH
9194: PPUSH
9195: PPUSH
9196: PPUSH
9197: PPUSH
9198: PPUSH
// for i = 1 to vehCount do
9199: LD_ADDR_VAR 0 8
9203: PUSH
9204: DOUBLE
9205: LD_INT 1
9207: DEC
9208: ST_TO_ADDR
9209: LD_VAR 0 6
9213: PUSH
9214: FOR_TO
9215: IFFALSE 9422
// begin uc_side = side ;
9217: LD_ADDR_OWVAR 20
9221: PUSH
9222: LD_VAR 0 1
9226: ST_TO_ADDR
// uc_nation = nation ;
9227: LD_ADDR_OWVAR 21
9231: PUSH
9232: LD_VAR 0 3
9236: ST_TO_ADDR
// vc_Chassis = 22 ;
9237: LD_ADDR_OWVAR 37
9241: PUSH
9242: LD_INT 22
9244: ST_TO_ADDR
// vc_engine = 1 ;
9245: LD_ADDR_OWVAR 39
9249: PUSH
9250: LD_INT 1
9252: ST_TO_ADDR
// vc_control = 1 ;
9253: LD_ADDR_OWVAR 38
9257: PUSH
9258: LD_INT 1
9260: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9261: LD_ADDR_OWVAR 40
9265: PUSH
9266: LD_INT 43
9268: PUSH
9269: LD_INT 44
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 1
9278: PPUSH
9279: LD_INT 2
9281: PPUSH
9282: CALL_OW 12
9286: ARRAY
9287: ST_TO_ADDR
// veh = CreateVehicle ;
9288: LD_ADDR_VAR 0 12
9292: PUSH
9293: CALL_OW 45
9297: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9298: LD_VAR 0 12
9302: PPUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: LD_INT 0
9310: PPUSH
9311: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9315: LD_ADDR_EXP 32
9319: PUSH
9320: LD_EXP 32
9324: PUSH
9325: LD_VAR 0 12
9329: ADD
9330: ST_TO_ADDR
// hc_class = 3 ;
9331: LD_ADDR_OWVAR 28
9335: PUSH
9336: LD_INT 3
9338: ST_TO_ADDR
// hc_name =  ;
9339: LD_ADDR_OWVAR 26
9343: PUSH
9344: LD_STRING 
9346: ST_TO_ADDR
// hc_gallery =  ;
9347: LD_ADDR_OWVAR 33
9351: PUSH
9352: LD_STRING 
9354: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9355: LD_INT 0
9357: PPUSH
9358: LD_INT 3
9360: PPUSH
9361: LD_EXP 25
9365: PPUSH
9366: LD_EXP 26
9370: PPUSH
9371: CALL_OW 12
9375: PPUSH
9376: CALL_OW 380
// un = CreateHuman ;
9380: LD_ADDR_VAR 0 10
9384: PUSH
9385: CALL_OW 44
9389: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9390: LD_VAR 0 10
9394: PPUSH
9395: LD_VAR 0 12
9399: PPUSH
9400: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9404: LD_ADDR_EXP 32
9408: PUSH
9409: LD_EXP 32
9413: PUSH
9414: LD_VAR 0 10
9418: ADD
9419: ST_TO_ADDR
// end ;
9420: GO 9214
9422: POP
9423: POP
// end ;
9424: LD_VAR 0 7
9428: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9429: LD_INT 0
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9437: LD_VAR 0 2
9441: PPUSH
9442: LD_INT 22
9444: PUSH
9445: LD_VAR 0 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: EMPTY
9455: LIST
9456: PPUSH
9457: CALL_OW 70
9461: PUSH
9462: LD_INT 0
9464: EQUAL
9465: PUSH
9466: LD_EXP 32
9470: AND
9471: IFFALSE 9758
// begin for i in defenders_list do
9473: LD_ADDR_VAR 0 4
9477: PUSH
9478: LD_EXP 32
9482: PUSH
9483: FOR_IN
9484: IFFALSE 9756
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9486: LD_VAR 0 4
9490: PPUSH
9491: LD_INT 63
9493: PPUSH
9494: LD_INT 75
9496: PPUSH
9497: CALL_OW 297
9501: PUSH
9502: LD_INT 8
9504: GREATER
9505: PUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 314
9515: NOT
9516: AND
9517: IFFALSE 9536
// ComMoveXY ( i , 63 , 75 ) else
9519: LD_VAR 0 4
9523: PPUSH
9524: LD_INT 63
9526: PPUSH
9527: LD_INT 75
9529: PPUSH
9530: CALL_OW 111
9534: GO 9754
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9536: LD_VAR 0 4
9540: PPUSH
9541: CALL_OW 257
9545: PUSH
9546: LD_INT 3
9548: EQUAL
9549: PUSH
9550: LD_VAR 0 4
9554: PPUSH
9555: CALL_OW 310
9559: NOT
9560: AND
9561: PUSH
9562: LD_VAR 0 4
9566: PPUSH
9567: CALL_OW 314
9571: NOT
9572: AND
9573: IFFALSE 9626
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9575: LD_VAR 0 4
9579: PPUSH
9580: LD_EXP 32
9584: PPUSH
9585: LD_INT 58
9587: PUSH
9588: EMPTY
9589: LIST
9590: PUSH
9591: LD_INT 24
9593: PUSH
9594: LD_INT 1000
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 72
9609: PPUSH
9610: LD_VAR 0 4
9614: PPUSH
9615: CALL_OW 74
9619: PPUSH
9620: CALL_OW 120
9624: GO 9754
// if GetFuel ( i ) < 100 then
9626: LD_VAR 0 4
9630: PPUSH
9631: CALL_OW 261
9635: PUSH
9636: LD_INT 100
9638: LESS
9639: IFFALSE 9655
// SetFuel ( defenders_list , 100 ) else
9641: LD_EXP 32
9645: PPUSH
9646: LD_INT 100
9648: PPUSH
9649: CALL_OW 240
9653: GO 9754
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9655: LD_VAR 0 4
9659: PPUSH
9660: CALL_OW 263
9664: PUSH
9665: LD_INT 1
9667: EQUAL
9668: PUSH
9669: LD_VAR 0 4
9673: PPUSH
9674: CALL_OW 256
9678: PUSH
9679: LD_INT 990
9681: LESS
9682: AND
9683: IFFALSE 9754
// begin veh := i ;
9685: LD_ADDR_VAR 0 7
9689: PUSH
9690: LD_VAR 0 4
9694: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9695: LD_ADDR_VAR 0 8
9699: PUSH
9700: LD_VAR 0 4
9704: PPUSH
9705: CALL_OW 311
9709: ST_TO_ADDR
// if veh then
9710: LD_VAR 0 7
9714: IFFALSE 9754
// begin ComMoveXY ( i , 63 , 75 ) ;
9716: LD_VAR 0 4
9720: PPUSH
9721: LD_INT 63
9723: PPUSH
9724: LD_INT 75
9726: PPUSH
9727: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9731: LD_VAR 0 7
9735: PPUSH
9736: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9740: LD_VAR 0 8
9744: PPUSH
9745: LD_VAR 0 7
9749: PPUSH
9750: CALL_OW 189
// end ; end ; end ;
9754: GO 9483
9756: POP
9757: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9758: LD_ADDR_VAR 0 6
9762: PUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: LD_INT 22
9770: PUSH
9771: LD_VAR 0 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: PPUSH
9783: CALL_OW 70
9787: ST_TO_ADDR
// if tmp and defenders_list then
9788: LD_VAR 0 6
9792: PUSH
9793: LD_EXP 32
9797: AND
9798: IFFALSE 9967
// for i in defenders_list do
9800: LD_ADDR_VAR 0 4
9804: PUSH
9805: LD_EXP 32
9809: PUSH
9810: FOR_IN
9811: IFFALSE 9965
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9813: LD_VAR 0 4
9817: PPUSH
9818: CALL_OW 257
9822: PUSH
9823: LD_INT 3
9825: EQUAL
9826: PUSH
9827: LD_VAR 0 4
9831: PPUSH
9832: CALL_OW 310
9836: NOT
9837: AND
9838: IFFALSE 9877
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9840: LD_VAR 0 4
9844: PPUSH
9845: LD_EXP 32
9849: PPUSH
9850: LD_INT 58
9852: PUSH
9853: EMPTY
9854: LIST
9855: PPUSH
9856: CALL_OW 72
9860: PPUSH
9861: LD_VAR 0 4
9865: PPUSH
9866: CALL_OW 74
9870: PPUSH
9871: CALL_OW 120
9875: GO 9963
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9877: LD_VAR 0 4
9881: PPUSH
9882: CALL_OW 314
9886: NOT
9887: PUSH
9888: LD_VAR 0 4
9892: PPUSH
9893: LD_VAR 0 2
9897: PPUSH
9898: CALL_OW 308
9902: AND
9903: IFFALSE 9931
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9905: LD_VAR 0 4
9909: PPUSH
9910: LD_VAR 0 6
9914: PPUSH
9915: LD_VAR 0 4
9919: PPUSH
9920: CALL_OW 74
9924: PPUSH
9925: CALL_OW 115
9929: GO 9963
// if not IsInArea ( i , defenseArea ) then
9931: LD_VAR 0 4
9935: PPUSH
9936: LD_VAR 0 2
9940: PPUSH
9941: CALL_OW 308
9945: NOT
9946: IFFALSE 9963
// ComMoveXY ( i , 63 , 75 ) ;
9948: LD_VAR 0 4
9952: PPUSH
9953: LD_INT 63
9955: PPUSH
9956: LD_INT 75
9958: PPUSH
9959: CALL_OW 111
// end ;
9963: GO 9810
9965: POP
9966: POP
// end ;
9967: LD_VAR 0 3
9971: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9972: LD_INT 0
9974: PPUSH
9975: PPUSH
9976: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9977: LD_INT 22
9979: PUSH
9980: LD_VAR 0 1
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 21
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_VAR 0 3
10012: LESSEQUAL
10013: IFFALSE 10121
// begin for i = 1 to vehCount do
10015: LD_ADDR_VAR 0 9
10019: PUSH
10020: DOUBLE
10021: LD_INT 1
10023: DEC
10024: ST_TO_ADDR
10025: LD_VAR 0 3
10029: PUSH
10030: FOR_TO
10031: IFFALSE 10119
// begin weapon = weaponTab [ i ] ;
10033: LD_ADDR_VAR 0 10
10037: PUSH
10038: LD_VAR 0 4
10042: PUSH
10043: LD_VAR 0 9
10047: ARRAY
10048: ST_TO_ADDR
// if weapon = 46 then
10049: LD_VAR 0 10
10053: PUSH
10054: LD_INT 46
10056: EQUAL
10057: IFFALSE 10088
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
10059: LD_VAR 0 2
10063: PPUSH
10064: LD_INT 24
10066: PPUSH
10067: LD_VAR 0 5
10071: PPUSH
10072: LD_VAR 0 6
10076: PPUSH
10077: LD_VAR 0 10
10081: PPUSH
10082: CALL_OW 185
// end else
10086: GO 10117
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_VAR 0 7
10097: PPUSH
10098: LD_VAR 0 5
10102: PPUSH
10103: LD_VAR 0 6
10107: PPUSH
10108: LD_VAR 0 10
10112: PPUSH
10113: CALL_OW 185
// end ; end ;
10117: GO 10030
10119: POP
10120: POP
// end ; end ;
10121: LD_VAR 0 8
10125: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
10126: LD_INT 0
10128: PPUSH
10129: PPUSH
10130: PPUSH
10131: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
10132: LD_ADDR_VAR 0 8
10136: PUSH
10137: LD_INT 22
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 21
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 3
10161: PUSH
10162: LD_INT 24
10164: PUSH
10165: LD_INT 650
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: ST_TO_ADDR
// if damageVehicles > 0 then
10186: LD_VAR 0 8
10190: PUSH
10191: LD_INT 0
10193: GREATER
10194: IFFALSE 10215
// ComMoveXY ( damageVehicles , repX , repY ) ;
10196: LD_VAR 0 8
10200: PPUSH
10201: LD_VAR 0 3
10205: PPUSH
10206: LD_VAR 0 4
10210: PPUSH
10211: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10215: LD_VAR 0 8
10219: PPUSH
10220: LD_INT 95
10222: PUSH
10223: LD_VAR 0 2
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 3
10234: PUSH
10235: LD_INT 58
10237: PUSH
10238: EMPTY
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PPUSH
10249: CALL_OW 72
10253: PUSH
10254: LD_INT 0
10256: GREATER
10257: IFFALSE 10324
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10259: LD_ADDR_VAR 0 6
10263: PUSH
10264: LD_VAR 0 8
10268: PPUSH
10269: LD_INT 95
10271: PUSH
10272: LD_VAR 0 2
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 3
10283: PUSH
10284: LD_INT 58
10286: PUSH
10287: EMPTY
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: PUSH
10303: FOR_IN
10304: IFFALSE 10322
// ComExitVehicle ( UnitsInside ( i ) ) ;
10306: LD_VAR 0 6
10310: PPUSH
10311: CALL_OW 313
10315: PPUSH
10316: CALL_OW 121
10320: GO 10303
10322: POP
10323: POP
// end ;
10324: LD_VAR 0 5
10328: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10329: LD_INT 0
10331: PPUSH
10332: PPUSH
10333: PPUSH
10334: PPUSH
10335: PPUSH
10336: PPUSH
10337: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10338: LD_ADDR_VAR 0 8
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_VAR 0 1
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 21
10357: PUSH
10358: LD_INT 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 24
10367: PUSH
10368: LD_INT 250
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 58
10380: PUSH
10381: EMPTY
10382: LIST
10383: PUSH
10384: LD_INT 2
10386: PUSH
10387: LD_INT 34
10389: PUSH
10390: LD_INT 43
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 44
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 34
10409: PUSH
10410: LD_INT 46
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 , 7 ] [ Difficulty ] then
10439: LD_INT 22
10441: PUSH
10442: LD_VAR 0 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 2
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 24
10463: PUSH
10464: LD_INT 1000
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: LD_INT 58
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 34
10485: PUSH
10486: LD_INT 43
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 34
10495: PUSH
10496: LD_INT 44
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 34
10505: PUSH
10506: LD_INT 46
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 69
10534: PUSH
10535: LD_INT 5
10537: PUSH
10538: LD_INT 6
10540: PUSH
10541: LD_INT 7
10543: PUSH
10544: LD_INT 7
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_OWVAR 67
10557: ARRAY
10558: GREATEREQUAL
10559: IFFALSE 11124
// repeat wait ( 0 0$1 ) ;
10561: LD_INT 35
10563: PPUSH
10564: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10568: LD_ADDR_VAR 0 8
10572: PUSH
10573: LD_INT 22
10575: PUSH
10576: LD_VAR 0 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 21
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 24
10597: PUSH
10598: LD_INT 250
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 34
10610: PUSH
10611: LD_INT 43
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 34
10620: PUSH
10621: LD_INT 44
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 34
10630: PUSH
10631: LD_INT 46
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 3
10646: PUSH
10647: LD_INT 58
10649: PUSH
10650: EMPTY
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 69
10668: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10669: LD_INT 22
10671: PUSH
10672: LD_VAR 0 1
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 95
10683: PUSH
10684: LD_VAR 0 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PPUSH
10697: CALL_OW 69
10701: NOT
10702: PUSH
10703: LD_VAR 0 11
10707: PUSH
10708: LD_INT 0
10710: EQUAL
10711: AND
10712: IFFALSE 10767
// for i := 1 to wayX do
10714: LD_ADDR_VAR 0 6
10718: PUSH
10719: DOUBLE
10720: LD_INT 1
10722: DEC
10723: ST_TO_ADDR
10724: LD_VAR 0 3
10728: PUSH
10729: FOR_TO
10730: IFFALSE 10765
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10732: LD_VAR 0 8
10736: PPUSH
10737: LD_VAR 0 3
10741: PUSH
10742: LD_VAR 0 6
10746: ARRAY
10747: PPUSH
10748: LD_VAR 0 4
10752: PUSH
10753: LD_VAR 0 6
10757: ARRAY
10758: PPUSH
10759: CALL_OW 114
10763: GO 10729
10765: POP
10766: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10767: LD_INT 22
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 95
10781: PUSH
10782: LD_VAR 0 2
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PPUSH
10795: CALL_OW 69
10799: IFFALSE 11023
// begin seeEnemy = 1 ;
10801: LD_ADDR_VAR 0 11
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// for j in vehiclesOK do
10809: LD_ADDR_VAR 0 7
10813: PUSH
10814: LD_VAR 0 8
10818: PUSH
10819: FOR_IN
10820: IFFALSE 11021
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10822: LD_ADDR_VAR 0 9
10826: PUSH
10827: LD_INT 81
10829: PUSH
10830: LD_VAR 0 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 101
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: PPUSH
10858: LD_VAR 0 7
10862: PPUSH
10863: CALL_OW 74
10867: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10868: LD_ADDR_VAR 0 10
10872: PUSH
10873: LD_INT 81
10875: PUSH
10876: LD_VAR 0 1
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: LD_INT 101
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: LD_INT 59
10900: PUSH
10901: EMPTY
10902: LIST
10903: PUSH
10904: LD_INT 21
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 21
10916: PUSH
10917: LD_INT 2
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: PPUSH
10938: CALL_OW 69
10942: PPUSH
10943: LD_VAR 0 7
10947: PPUSH
10948: CALL_OW 74
10952: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10953: LD_VAR 0 7
10957: PPUSH
10958: LD_VAR 0 9
10962: PPUSH
10963: CALL_OW 296
10967: PUSH
10968: LD_INT 8
10970: PLUS
10971: PUSH
10972: LD_VAR 0 7
10976: PPUSH
10977: LD_VAR 0 10
10981: PPUSH
10982: CALL_OW 296
10986: LESS
10987: IFFALSE 11005
// ComAttackUnit ( j , target1 ) else
10989: LD_VAR 0 7
10993: PPUSH
10994: LD_VAR 0 9
10998: PPUSH
10999: CALL_OW 115
11003: GO 11019
// ComAttackUnit ( j , target2 ) ;
11005: LD_VAR 0 7
11009: PPUSH
11010: LD_VAR 0 10
11014: PPUSH
11015: CALL_OW 115
// end ;
11019: GO 10819
11021: POP
11022: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11023: LD_INT 22
11025: PUSH
11026: LD_VAR 0 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 2
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 24
11047: PUSH
11048: LD_INT 250
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: LD_INT 34
11060: PUSH
11061: LD_INT 43
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 34
11070: PUSH
11071: LD_INT 44
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 34
11080: PUSH
11081: LD_INT 46
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: LD_INT 58
11099: PUSH
11100: EMPTY
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 69
11118: PUSH
11119: LD_INT 0
11121: EQUAL
11122: IFFALSE 10561
// seeEnemy = 0 ;
11124: LD_ADDR_VAR 0 11
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// end ;
11132: LD_VAR 0 5
11136: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
11137: LD_INT 0
11139: PPUSH
11140: PPUSH
11141: PPUSH
11142: PPUSH
11143: PPUSH
11144: PPUSH
// repeat wait ( 0 0$1 ) ;
11145: LD_INT 35
11147: PPUSH
11148: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
11152: LD_ADDR_VAR 0 7
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_VAR 0 1
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 21
11171: PUSH
11172: LD_INT 2
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 24
11181: PUSH
11182: LD_INT 651
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: ST_TO_ADDR
// for j in vehiclesOK do
11199: LD_ADDR_VAR 0 4
11203: PUSH
11204: LD_VAR 0 7
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11411
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11212: LD_ADDR_VAR 0 5
11216: PUSH
11217: LD_INT 81
11219: PUSH
11220: LD_VAR 0 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 101
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 69
11247: PPUSH
11248: LD_VAR 0 4
11252: PPUSH
11253: CALL_OW 74
11257: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11258: LD_ADDR_VAR 0 6
11262: PUSH
11263: LD_INT 81
11265: PUSH
11266: LD_VAR 0 1
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 101
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: LD_INT 59
11290: PUSH
11291: EMPTY
11292: LIST
11293: PUSH
11294: LD_INT 21
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 21
11306: PUSH
11307: LD_INT 2
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: PPUSH
11333: LD_VAR 0 4
11337: PPUSH
11338: CALL_OW 74
11342: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11343: LD_VAR 0 4
11347: PPUSH
11348: LD_VAR 0 5
11352: PPUSH
11353: CALL_OW 296
11357: PUSH
11358: LD_INT 8
11360: PLUS
11361: PUSH
11362: LD_VAR 0 4
11366: PPUSH
11367: LD_VAR 0 6
11371: PPUSH
11372: CALL_OW 296
11376: LESS
11377: IFFALSE 11395
// ComAttackUnit ( j , target1 ) else
11379: LD_VAR 0 4
11383: PPUSH
11384: LD_VAR 0 5
11388: PPUSH
11389: CALL_OW 115
11393: GO 11409
// ComAttackUnit ( j , target2 ) ;
11395: LD_VAR 0 4
11399: PPUSH
11400: LD_VAR 0 6
11404: PPUSH
11405: CALL_OW 115
// end ;
11409: GO 11209
11411: POP
11412: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11413: LD_INT 22
11415: PUSH
11416: LD_VAR 0 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 2
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 24
11437: PUSH
11438: LD_INT 250
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: LD_INT 0
11457: EQUAL
11458: IFFALSE 11145
// end ;
11460: LD_VAR 0 2
11464: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11465: LD_INT 0
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
11472: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11473: LD_ADDR_VAR 0 8
11477: PUSH
11478: LD_VAR 0 2
11482: PPUSH
11483: CALL_OW 313
11487: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11488: LD_ADDR_VAR 0 9
11492: PUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 22
11500: PUSH
11501: LD_VAR 0 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 25
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 24
11522: PUSH
11523: LD_INT 750
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 3
11532: PUSH
11533: LD_INT 54
11535: PUSH
11536: EMPTY
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 70
11553: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11554: LD_ADDR_VAR 0 6
11558: PUSH
11559: LD_VAR 0 3
11563: PPUSH
11564: LD_INT 22
11566: PUSH
11567: LD_VAR 0 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 21
11578: PUSH
11579: LD_INT 3
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 3
11588: PUSH
11589: LD_INT 24
11591: PUSH
11592: LD_INT 1000
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: PPUSH
11611: CALL_OW 70
11615: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11616: LD_VAR 0 6
11620: NOT
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: LD_VAR 0 1
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: LD_INT 25
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 24
11646: PUSH
11647: LD_INT 250
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 69
11663: NOT
11664: AND
11665: IFFALSE 11669
// exit ;
11667: GO 11866
// if buildings_list > 0 and engineerOkInside then
11669: LD_VAR 0 6
11673: PUSH
11674: LD_INT 0
11676: GREATER
11677: PUSH
11678: LD_VAR 0 8
11682: AND
11683: IFFALSE 11709
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11685: LD_VAR 0 8
11689: PPUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 72
11704: PPUSH
11705: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11709: LD_VAR 0 6
11713: PUSH
11714: LD_INT 0
11716: GREATER
11717: PUSH
11718: LD_VAR 0 9
11722: PUSH
11723: LD_INT 0
11725: GREATER
11726: AND
11727: IFFALSE 11747
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11729: LD_VAR 0 9
11733: PPUSH
11734: LD_VAR 0 6
11738: PUSH
11739: LD_INT 1
11741: ARRAY
11742: PPUSH
11743: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11747: LD_VAR 0 6
11751: PUSH
11752: LD_INT 0
11754: EQUAL
11755: PUSH
11756: LD_VAR 0 4
11760: PUSH
11761: LD_INT 0
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_VAR 0 9
11770: PUSH
11771: LD_INT 0
11773: GREATER
11774: AND
11775: IFFALSE 11791
// ComEnterUnit ( engineerOkOutside , building ) ;
11777: LD_VAR 0 9
11781: PPUSH
11782: LD_VAR 0 2
11786: PPUSH
11787: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11791: LD_VAR 0 9
11795: PUSH
11796: LD_INT 0
11798: GREATER
11799: PUSH
11800: LD_VAR 0 6
11804: PUSH
11805: LD_INT 0
11807: EQUAL
11808: AND
11809: PUSH
11810: LD_VAR 0 4
11814: PUSH
11815: LD_INT 0
11817: GREATER
11818: AND
11819: IFFALSE 11866
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11821: LD_VAR 0 9
11825: PPUSH
11826: LD_VAR 0 4
11830: PUSH
11831: LD_INT 1
11833: ARRAY
11834: PPUSH
11835: LD_VAR 0 4
11839: PUSH
11840: LD_INT 2
11842: ARRAY
11843: PPUSH
11844: LD_VAR 0 4
11848: PUSH
11849: LD_INT 3
11851: ARRAY
11852: PPUSH
11853: LD_VAR 0 4
11857: PUSH
11858: LD_INT 4
11860: ARRAY
11861: PPUSH
11862: CALL_OW 145
// end ;
11866: LD_VAR 0 5
11870: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11871: LD_INT 0
11873: PPUSH
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
11881: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11882: LD_ADDR_VAR 0 6
11886: PUSH
11887: LD_INT 22
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 25
11901: PUSH
11902: LD_INT 4
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 23
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 24
11921: PUSH
11922: LD_INT 251
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11940: LD_ADDR_VAR 0 7
11944: PUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: LD_INT 22
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 23
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 25
11974: PUSH
11975: LD_INT 4
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 50
11984: PUSH
11985: EMPTY
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PPUSH
11994: CALL_OW 70
11998: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11999: LD_ADDR_VAR 0 10
12003: PUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 22
12011: PUSH
12012: LD_VAR 0 1
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 3
12033: PUSH
12034: LD_INT 25
12036: PUSH
12037: LD_INT 3
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 3
12050: PUSH
12051: LD_INT 24
12053: PUSH
12054: LD_INT 750
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 70
12075: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12076: LD_ADDR_VAR 0 11
12080: PUSH
12081: LD_VAR 0 2
12085: PPUSH
12086: LD_INT 22
12088: PUSH
12089: LD_VAR 0 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 21
12100: PUSH
12101: LD_INT 1
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 3
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 3
12127: PUSH
12128: LD_INT 24
12130: PUSH
12131: LD_INT 1000
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PPUSH
12148: CALL_OW 70
12152: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
12153: LD_VAR 0 10
12157: NOT
12158: PUSH
12159: LD_VAR 0 11
12163: NOT
12164: AND
12165: PUSH
12166: LD_VAR 0 6
12170: NOT
12171: AND
12172: IFFALSE 12176
// exit ;
12174: GO 12410
// if damageUnits > 0 and sci_list > 0 then
12176: LD_VAR 0 10
12180: PUSH
12181: LD_INT 0
12183: GREATER
12184: PUSH
12185: LD_VAR 0 6
12189: PUSH
12190: LD_INT 0
12192: GREATER
12193: AND
12194: IFFALSE 12210
// ComMoveToArea ( damageUnits , healArea ) ;
12196: LD_VAR 0 10
12200: PPUSH
12201: LD_VAR 0 2
12205: PPUSH
12206: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12210: LD_VAR 0 11
12214: PUSH
12215: LD_INT 0
12217: GREATER
12218: PUSH
12219: LD_VAR 0 6
12223: PUSH
12224: LD_INT 0
12226: GREATER
12227: AND
12228: IFFALSE 12239
// ComExitBuilding ( sci_list ) ;
12230: LD_VAR 0 6
12234: PPUSH
12235: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12239: LD_VAR 0 11
12243: PUSH
12244: LD_INT 0
12246: GREATER
12247: PUSH
12248: LD_VAR 0 7
12252: PUSH
12253: LD_INT 0
12255: GREATER
12256: AND
12257: IFFALSE 12277
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12259: LD_VAR 0 7
12263: PPUSH
12264: LD_VAR 0 11
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12277: LD_VAR 0 10
12281: PUSH
12282: LD_INT 0
12284: EQUAL
12285: PUSH
12286: LD_VAR 0 11
12290: PUSH
12291: LD_INT 0
12293: EQUAL
12294: AND
12295: PUSH
12296: LD_VAR 0 7
12300: PUSH
12301: LD_INT 0
12303: GREATER
12304: AND
12305: IFFALSE 12410
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12307: LD_ADDR_VAR 0 12
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_VAR 0 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 3
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 30
12336: PUSH
12337: LD_INT 8
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12354: LD_ADDR_VAR 0 13
12358: PUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_VAR 0 12
12366: PPUSH
12367: CALL_OW 12
12371: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12372: LD_VAR 0 7
12376: PPUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 60
12382: PUSH
12383: EMPTY
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 72
12394: PPUSH
12395: LD_VAR 0 12
12399: PUSH
12400: LD_VAR 0 13
12404: ARRAY
12405: PPUSH
12406: CALL_OW 120
// end ; end ;
12410: LD_VAR 0 5
12414: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12415: LD_INT 0
12417: PPUSH
12418: PPUSH
12419: PPUSH
12420: PPUSH
12421: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12422: LD_ADDR_VAR 0 6
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_VAR 0 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: LD_INT 30
12444: PUSH
12445: LD_INT 31
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 30
12454: PUSH
12455: LD_INT 32
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 33
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 30
12484: PUSH
12485: LD_INT 5
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 69
12508: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12509: LD_ADDR_VAR 0 7
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_VAR 0 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 3
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 58
12538: PUSH
12539: EMPTY
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12552: LD_VAR 0 6
12556: PUSH
12557: LD_INT 0
12559: GREATER
12560: PUSH
12561: LD_VAR 0 7
12565: PUSH
12566: LD_INT 0
12568: GREATER
12569: AND
12570: IFFALSE 12640
// begin for i in turretsList do
12572: LD_ADDR_VAR 0 4
12576: PUSH
12577: LD_VAR 0 6
12581: PUSH
12582: FOR_IN
12583: IFFALSE 12638
// begin for j in enemyBuildings do
12585: LD_ADDR_VAR 0 5
12589: PUSH
12590: LD_VAR 0 7
12594: PUSH
12595: FOR_IN
12596: IFFALSE 12634
// begin if GetDistUnits ( i , j ) < 20 then
12598: LD_VAR 0 4
12602: PPUSH
12603: LD_VAR 0 5
12607: PPUSH
12608: CALL_OW 296
12612: PUSH
12613: LD_INT 20
12615: LESS
12616: IFFALSE 12632
// begin ComAttackUnit ( i , j ) ;
12618: LD_VAR 0 4
12622: PPUSH
12623: LD_VAR 0 5
12627: PPUSH
12628: CALL_OW 115
// end ; end ;
12632: GO 12595
12634: POP
12635: POP
// end ;
12636: GO 12582
12638: POP
12639: POP
// end ; end ;
12640: LD_VAR 0 3
12644: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12645: LD_INT 0
12647: PPUSH
12648: PPUSH
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
// for i = 1 to medicCount do
12658: LD_ADDR_VAR 0 14
12662: PUSH
12663: DOUBLE
12664: LD_INT 1
12666: DEC
12667: ST_TO_ADDR
12668: LD_VAR 0 7
12672: PUSH
12673: FOR_TO
12674: IFFALSE 12756
// begin uc_side = side ;
12676: LD_ADDR_OWVAR 20
12680: PUSH
12681: LD_VAR 0 1
12685: ST_TO_ADDR
// uc_nation = nation ;
12686: LD_ADDR_OWVAR 21
12690: PUSH
12691: LD_VAR 0 2
12695: ST_TO_ADDR
// hc_name =  ;
12696: LD_ADDR_OWVAR 26
12700: PUSH
12701: LD_STRING 
12703: ST_TO_ADDR
// hc_gallery =  ;
12704: LD_ADDR_OWVAR 33
12708: PUSH
12709: LD_STRING 
12711: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12712: LD_INT 0
12714: PPUSH
12715: LD_INT 4
12717: PPUSH
12718: LD_VAR 0 8
12722: PPUSH
12723: CALL_OW 380
// un = CreateHuman ;
12727: LD_ADDR_VAR 0 16
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12737: LD_VAR 0 16
12741: PPUSH
12742: LD_VAR 0 9
12746: PPUSH
12747: LD_INT 0
12749: PPUSH
12750: CALL_OW 49
// end ;
12754: GO 12673
12756: POP
12757: POP
// for i = 1 to soldierCount do
12758: LD_ADDR_VAR 0 14
12762: PUSH
12763: DOUBLE
12764: LD_INT 1
12766: DEC
12767: ST_TO_ADDR
12768: LD_VAR 0 3
12772: PUSH
12773: FOR_TO
12774: IFFALSE 12856
// begin uc_side = side ;
12776: LD_ADDR_OWVAR 20
12780: PUSH
12781: LD_VAR 0 1
12785: ST_TO_ADDR
// uc_nation = nation ;
12786: LD_ADDR_OWVAR 21
12790: PUSH
12791: LD_VAR 0 2
12795: ST_TO_ADDR
// hc_name =  ;
12796: LD_ADDR_OWVAR 26
12800: PUSH
12801: LD_STRING 
12803: ST_TO_ADDR
// hc_gallery =  ;
12804: LD_ADDR_OWVAR 33
12808: PUSH
12809: LD_STRING 
12811: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12812: LD_INT 0
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: LD_VAR 0 8
12822: PPUSH
12823: CALL_OW 380
// un = CreateHuman ;
12827: LD_ADDR_VAR 0 16
12831: PUSH
12832: CALL_OW 44
12836: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12837: LD_VAR 0 16
12841: PPUSH
12842: LD_VAR 0 9
12846: PPUSH
12847: LD_INT 0
12849: PPUSH
12850: CALL_OW 49
// end ;
12854: GO 12773
12856: POP
12857: POP
// for i = 1 to sniperCount do
12858: LD_ADDR_VAR 0 14
12862: PUSH
12863: DOUBLE
12864: LD_INT 1
12866: DEC
12867: ST_TO_ADDR
12868: LD_VAR 0 4
12872: PUSH
12873: FOR_TO
12874: IFFALSE 12956
// begin uc_side = side ;
12876: LD_ADDR_OWVAR 20
12880: PUSH
12881: LD_VAR 0 1
12885: ST_TO_ADDR
// uc_nation = nation ;
12886: LD_ADDR_OWVAR 21
12890: PUSH
12891: LD_VAR 0 2
12895: ST_TO_ADDR
// hc_name =  ;
12896: LD_ADDR_OWVAR 26
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// hc_gallery =  ;
12904: LD_ADDR_OWVAR 33
12908: PUSH
12909: LD_STRING 
12911: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12912: LD_INT 0
12914: PPUSH
12915: LD_INT 5
12917: PPUSH
12918: LD_VAR 0 8
12922: PPUSH
12923: CALL_OW 380
// un = CreateHuman ;
12927: LD_ADDR_VAR 0 16
12931: PUSH
12932: CALL_OW 44
12936: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12937: LD_VAR 0 16
12941: PPUSH
12942: LD_VAR 0 9
12946: PPUSH
12947: LD_INT 0
12949: PPUSH
12950: CALL_OW 49
// end ;
12954: GO 12873
12956: POP
12957: POP
// for i = 1 to bazookCount do
12958: LD_ADDR_VAR 0 14
12962: PUSH
12963: DOUBLE
12964: LD_INT 1
12966: DEC
12967: ST_TO_ADDR
12968: LD_VAR 0 5
12972: PUSH
12973: FOR_TO
12974: IFFALSE 13056
// begin uc_side = side ;
12976: LD_ADDR_OWVAR 20
12980: PUSH
12981: LD_VAR 0 1
12985: ST_TO_ADDR
// uc_nation = nation ;
12986: LD_ADDR_OWVAR 21
12990: PUSH
12991: LD_VAR 0 2
12995: ST_TO_ADDR
// hc_name =  ;
12996: LD_ADDR_OWVAR 26
13000: PUSH
13001: LD_STRING 
13003: ST_TO_ADDR
// hc_gallery =  ;
13004: LD_ADDR_OWVAR 33
13008: PUSH
13009: LD_STRING 
13011: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
13012: LD_INT 0
13014: PPUSH
13015: LD_INT 9
13017: PPUSH
13018: LD_VAR 0 8
13022: PPUSH
13023: CALL_OW 380
// un = CreateHuman ;
13027: LD_ADDR_VAR 0 16
13031: PUSH
13032: CALL_OW 44
13036: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13037: LD_VAR 0 16
13041: PPUSH
13042: LD_VAR 0 9
13046: PPUSH
13047: LD_INT 0
13049: PPUSH
13050: CALL_OW 49
// end ;
13054: GO 12973
13056: POP
13057: POP
// for i = 1 to mortalCount do
13058: LD_ADDR_VAR 0 14
13062: PUSH
13063: DOUBLE
13064: LD_INT 1
13066: DEC
13067: ST_TO_ADDR
13068: LD_VAR 0 6
13072: PUSH
13073: FOR_TO
13074: IFFALSE 13156
// begin uc_side = side ;
13076: LD_ADDR_OWVAR 20
13080: PUSH
13081: LD_VAR 0 1
13085: ST_TO_ADDR
// uc_nation = nation ;
13086: LD_ADDR_OWVAR 21
13090: PUSH
13091: LD_VAR 0 2
13095: ST_TO_ADDR
// hc_name =  ;
13096: LD_ADDR_OWVAR 26
13100: PUSH
13101: LD_STRING 
13103: ST_TO_ADDR
// hc_gallery =  ;
13104: LD_ADDR_OWVAR 33
13108: PUSH
13109: LD_STRING 
13111: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
13112: LD_INT 0
13114: PPUSH
13115: LD_INT 8
13117: PPUSH
13118: LD_VAR 0 8
13122: PPUSH
13123: CALL_OW 380
// un = CreateHuman ;
13127: LD_ADDR_VAR 0 16
13131: PUSH
13132: CALL_OW 44
13136: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13137: LD_VAR 0 16
13141: PPUSH
13142: LD_VAR 0 9
13146: PPUSH
13147: LD_INT 0
13149: PPUSH
13150: CALL_OW 49
// end ;
13154: GO 13073
13156: POP
13157: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13158: LD_ADDR_VAR 0 19
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_VAR 0 1
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 25
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 25
13190: PUSH
13191: LD_INT 5
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 25
13200: PUSH
13201: LD_INT 8
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 25
13210: PUSH
13211: LD_INT 9
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13234: LD_ADDR_VAR 0 18
13238: PUSH
13239: LD_INT 22
13241: PUSH
13242: LD_VAR 0 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 4
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// for i in medic_list do
13270: LD_ADDR_VAR 0 14
13274: PUSH
13275: LD_VAR 0 18
13279: PUSH
13280: FOR_IN
13281: IFFALSE 13299
// ComMoveToArea ( i , healArea ) ;
13283: LD_VAR 0 14
13287: PPUSH
13288: LD_VAR 0 10
13292: PPUSH
13293: CALL_OW 113
13297: GO 13280
13299: POP
13300: POP
// if strategy = 1 then
13301: LD_VAR 0 12
13305: PUSH
13306: LD_INT 1
13308: EQUAL
13309: IFFALSE 13855
// begin repeat wait ( 0 0$3 ) ;
13311: LD_INT 105
13313: PPUSH
13314: CALL_OW 67
// for i in soldiersOK_list do
13318: LD_ADDR_VAR 0 14
13322: PUSH
13323: LD_VAR 0 19
13327: PUSH
13328: FOR_IN
13329: IFFALSE 13393
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13331: LD_VAR 0 14
13335: PPUSH
13336: LD_INT 91
13338: PPUSH
13339: LD_INT 63
13341: PPUSH
13342: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13346: LD_VAR 0 14
13350: PPUSH
13351: LD_INT 101
13353: PPUSH
13354: LD_INT 53
13356: PPUSH
13357: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13361: LD_VAR 0 14
13365: PPUSH
13366: LD_INT 75
13368: PPUSH
13369: LD_INT 23
13371: PPUSH
13372: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13376: LD_VAR 0 14
13380: PPUSH
13381: LD_INT 78
13383: PPUSH
13384: LD_INT 8
13386: PPUSH
13387: CALL_OW 174
// end ;
13391: GO 13328
13393: POP
13394: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13395: LD_INT 12
13397: PPUSH
13398: LD_INT 22
13400: PUSH
13401: LD_VAR 0 1
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: PUSH
13415: LD_INT 2
13417: GREATER
13418: IFFALSE 13311
// repeat wait ( 0 0$1 ) ;
13420: LD_INT 35
13422: PPUSH
13423: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13427: LD_ADDR_VAR 0 17
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_VAR 0 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 1
13446: PUSH
13447: LD_INT 3
13449: PUSH
13450: LD_INT 24
13452: PUSH
13453: LD_INT 550
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 24
13466: PUSH
13467: LD_INT 250
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 69
13487: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13488: LD_ADDR_VAR 0 19
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_VAR 0 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 25
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 25
13520: PUSH
13521: LD_INT 5
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 25
13530: PUSH
13531: LD_INT 8
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 9
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 24
13557: PUSH
13558: LD_INT 1000
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: ST_TO_ADDR
// if medicCount > 0 then
13575: LD_VAR 0 7
13579: PUSH
13580: LD_INT 0
13582: GREATER
13583: IFFALSE 13657
// begin if damageUnit_list > 0 then
13585: LD_VAR 0 17
13589: PUSH
13590: LD_INT 0
13592: GREATER
13593: IFFALSE 13657
// begin for i in damageUnit_list do
13595: LD_ADDR_VAR 0 14
13599: PUSH
13600: LD_VAR 0 17
13604: PUSH
13605: FOR_IN
13606: IFFALSE 13655
// begin ComMoveToArea ( i , healArea ) ;
13608: LD_VAR 0 14
13612: PPUSH
13613: LD_VAR 0 10
13617: PPUSH
13618: CALL_OW 113
// for j in medic_list do
13622: LD_ADDR_VAR 0 15
13626: PUSH
13627: LD_VAR 0 18
13631: PUSH
13632: FOR_IN
13633: IFFALSE 13651
// AddComHeal ( j , i ) ;
13635: LD_VAR 0 15
13639: PPUSH
13640: LD_VAR 0 14
13644: PPUSH
13645: CALL_OW 188
13649: GO 13632
13651: POP
13652: POP
// end ;
13653: GO 13605
13655: POP
13656: POP
// end ; end ; for i in soldiersOK_list do
13657: LD_ADDR_VAR 0 14
13661: PUSH
13662: LD_VAR 0 19
13666: PUSH
13667: FOR_IN
13668: IFFALSE 13844
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13670: LD_ADDR_VAR 0 22
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_VAR 0 11
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PPUSH
13692: LD_VAR 0 14
13696: PPUSH
13697: CALL_OW 74
13701: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13702: LD_ADDR_VAR 0 23
13706: PUSH
13707: LD_INT 22
13709: PUSH
13710: LD_VAR 0 11
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: LD_INT 59
13724: PUSH
13725: EMPTY
13726: LIST
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 1
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 21
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: EMPTY
13759: LIST
13760: PPUSH
13761: CALL_OW 69
13765: PPUSH
13766: LD_VAR 0 14
13770: PPUSH
13771: CALL_OW 74
13775: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13776: LD_VAR 0 14
13780: PPUSH
13781: LD_VAR 0 22
13785: PPUSH
13786: CALL_OW 296
13790: PUSH
13791: LD_INT 6
13793: PLUS
13794: PUSH
13795: LD_VAR 0 14
13799: PPUSH
13800: LD_VAR 0 23
13804: PPUSH
13805: CALL_OW 296
13809: LESS
13810: IFFALSE 13828
// begin ComAttackUnit ( i , target1 ) ;
13812: LD_VAR 0 14
13816: PPUSH
13817: LD_VAR 0 22
13821: PPUSH
13822: CALL_OW 115
// end else
13826: GO 13842
// begin ComAttackUnit ( i , target2 ) ;
13828: LD_VAR 0 14
13832: PPUSH
13833: LD_VAR 0 23
13837: PPUSH
13838: CALL_OW 115
// end ; end ;
13842: GO 13667
13844: POP
13845: POP
// until soldiersOK_list = [ ] ;
13846: LD_VAR 0 19
13850: PUSH
13851: EMPTY
13852: EQUAL
13853: IFFALSE 13420
// end ; if strategy = 2 then
13855: LD_VAR 0 12
13859: PUSH
13860: LD_INT 2
13862: EQUAL
13863: IFFALSE 14379
// begin repeat wait ( 0 0$1 ) ;
13865: LD_INT 35
13867: PPUSH
13868: CALL_OW 67
// for i in soldiersOK_list do
13872: LD_ADDR_VAR 0 14
13876: PUSH
13877: LD_VAR 0 19
13881: PUSH
13882: FOR_IN
13883: IFFALSE 13917
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13885: LD_VAR 0 14
13889: PPUSH
13890: LD_INT 91
13892: PPUSH
13893: LD_INT 63
13895: PPUSH
13896: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13900: LD_VAR 0 14
13904: PPUSH
13905: LD_INT 75
13907: PPUSH
13908: LD_INT 33
13910: PPUSH
13911: CALL_OW 174
// end ;
13915: GO 13882
13917: POP
13918: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13919: LD_INT 13
13921: PPUSH
13922: LD_INT 22
13924: PUSH
13925: LD_VAR 0 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 70
13938: PUSH
13939: LD_INT 2
13941: GREATER
13942: IFFALSE 13865
// repeat wait ( 0 0$3 ) ;
13944: LD_INT 105
13946: PPUSH
13947: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13951: LD_ADDR_VAR 0 17
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_VAR 0 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 1
13970: PUSH
13971: LD_INT 3
13973: PUSH
13974: LD_INT 24
13976: PUSH
13977: LD_INT 550
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 24
13990: PUSH
13991: LD_INT 250
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 69
14011: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14012: LD_ADDR_VAR 0 19
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_VAR 0 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: LD_INT 25
14034: PUSH
14035: LD_INT 1
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 25
14044: PUSH
14045: LD_INT 5
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 8
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 25
14064: PUSH
14065: LD_INT 9
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 24
14081: PUSH
14082: LD_INT 1000
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: ST_TO_ADDR
// if medicCount > 0 then
14099: LD_VAR 0 7
14103: PUSH
14104: LD_INT 0
14106: GREATER
14107: IFFALSE 14181
// begin if damageUnit_list > 0 then
14109: LD_VAR 0 17
14113: PUSH
14114: LD_INT 0
14116: GREATER
14117: IFFALSE 14181
// begin for i in damageUnit_list do
14119: LD_ADDR_VAR 0 14
14123: PUSH
14124: LD_VAR 0 17
14128: PUSH
14129: FOR_IN
14130: IFFALSE 14179
// begin ComMoveToArea ( i , healArea ) ;
14132: LD_VAR 0 14
14136: PPUSH
14137: LD_VAR 0 10
14141: PPUSH
14142: CALL_OW 113
// for j in medic_list do
14146: LD_ADDR_VAR 0 15
14150: PUSH
14151: LD_VAR 0 18
14155: PUSH
14156: FOR_IN
14157: IFFALSE 14175
// AddComHeal ( j , i ) ;
14159: LD_VAR 0 15
14163: PPUSH
14164: LD_VAR 0 14
14168: PPUSH
14169: CALL_OW 188
14173: GO 14156
14175: POP
14176: POP
// end ;
14177: GO 14129
14179: POP
14180: POP
// end ; end ; for i in soldiersOK_list do
14181: LD_ADDR_VAR 0 14
14185: PUSH
14186: LD_VAR 0 19
14190: PUSH
14191: FOR_IN
14192: IFFALSE 14368
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14194: LD_ADDR_VAR 0 22
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_VAR 0 11
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PPUSH
14211: CALL_OW 69
14215: PPUSH
14216: LD_VAR 0 14
14220: PPUSH
14221: CALL_OW 74
14225: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14226: LD_ADDR_VAR 0 23
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_VAR 0 11
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: LD_INT 59
14248: PUSH
14249: EMPTY
14250: LIST
14251: PUSH
14252: LD_INT 21
14254: PUSH
14255: LD_INT 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 21
14264: PUSH
14265: LD_INT 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: PPUSH
14290: LD_VAR 0 14
14294: PPUSH
14295: CALL_OW 74
14299: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14300: LD_VAR 0 14
14304: PPUSH
14305: LD_VAR 0 22
14309: PPUSH
14310: CALL_OW 296
14314: PUSH
14315: LD_INT 6
14317: PLUS
14318: PUSH
14319: LD_VAR 0 14
14323: PPUSH
14324: LD_VAR 0 23
14328: PPUSH
14329: CALL_OW 296
14333: LESS
14334: IFFALSE 14352
// begin ComAttackUnit ( i , target1 ) ;
14336: LD_VAR 0 14
14340: PPUSH
14341: LD_VAR 0 22
14345: PPUSH
14346: CALL_OW 115
// end else
14350: GO 14366
// begin ComAttackUnit ( i , target2 ) ;
14352: LD_VAR 0 14
14356: PPUSH
14357: LD_VAR 0 23
14361: PPUSH
14362: CALL_OW 115
// end ; end ;
14366: GO 14191
14368: POP
14369: POP
// until soldiersOK_list = [ ] ;
14370: LD_VAR 0 19
14374: PUSH
14375: EMPTY
14376: EQUAL
14377: IFFALSE 13944
// end ; if strategy = 3 then
14379: LD_VAR 0 12
14383: PUSH
14384: LD_INT 3
14386: EQUAL
14387: IFFALSE 14933
// begin repeat wait ( 0 0$3 ) ;
14389: LD_INT 105
14391: PPUSH
14392: CALL_OW 67
// for i in soldiersOK_list do
14396: LD_ADDR_VAR 0 14
14400: PUSH
14401: LD_VAR 0 19
14405: PUSH
14406: FOR_IN
14407: IFFALSE 14471
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14409: LD_VAR 0 14
14413: PPUSH
14414: LD_INT 63
14416: PPUSH
14417: LD_INT 71
14419: PPUSH
14420: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14424: LD_VAR 0 14
14428: PPUSH
14429: LD_INT 35
14431: PPUSH
14432: LD_INT 44
14434: PPUSH
14435: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14439: LD_VAR 0 14
14443: PPUSH
14444: LD_INT 23
14446: PPUSH
14447: LD_INT 18
14449: PPUSH
14450: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14454: LD_VAR 0 14
14458: PPUSH
14459: LD_INT 26
14461: PPUSH
14462: LD_INT 12
14464: PPUSH
14465: CALL_OW 174
// end ;
14469: GO 14406
14471: POP
14472: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14473: LD_INT 14
14475: PPUSH
14476: LD_INT 22
14478: PUSH
14479: LD_VAR 0 1
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 70
14492: PUSH
14493: LD_INT 2
14495: GREATER
14496: IFFALSE 14389
// repeat wait ( 0 0$1 ) ;
14498: LD_INT 35
14500: PPUSH
14501: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14505: LD_ADDR_VAR 0 17
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_VAR 0 1
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: LD_INT 3
14527: PUSH
14528: LD_INT 24
14530: PUSH
14531: LD_INT 550
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 24
14544: PUSH
14545: LD_INT 250
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 69
14565: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14566: LD_ADDR_VAR 0 19
14570: PUSH
14571: LD_INT 22
14573: PUSH
14574: LD_VAR 0 1
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 25
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 25
14598: PUSH
14599: LD_INT 5
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 25
14608: PUSH
14609: LD_INT 8
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 25
14618: PUSH
14619: LD_INT 9
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 24
14635: PUSH
14636: LD_INT 1000
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: PPUSH
14648: CALL_OW 69
14652: ST_TO_ADDR
// if medicCount > 0 then
14653: LD_VAR 0 7
14657: PUSH
14658: LD_INT 0
14660: GREATER
14661: IFFALSE 14735
// begin if damageUnit_list > 0 then
14663: LD_VAR 0 17
14667: PUSH
14668: LD_INT 0
14670: GREATER
14671: IFFALSE 14735
// begin for i in damageUnit_list do
14673: LD_ADDR_VAR 0 14
14677: PUSH
14678: LD_VAR 0 17
14682: PUSH
14683: FOR_IN
14684: IFFALSE 14733
// begin ComMoveToArea ( i , healArea ) ;
14686: LD_VAR 0 14
14690: PPUSH
14691: LD_VAR 0 10
14695: PPUSH
14696: CALL_OW 113
// for j in medic_list do
14700: LD_ADDR_VAR 0 15
14704: PUSH
14705: LD_VAR 0 18
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14729
// AddComHeal ( j , i ) ;
14713: LD_VAR 0 15
14717: PPUSH
14718: LD_VAR 0 14
14722: PPUSH
14723: CALL_OW 188
14727: GO 14710
14729: POP
14730: POP
// end ;
14731: GO 14683
14733: POP
14734: POP
// end ; end ; for i in soldiersOK_list do
14735: LD_ADDR_VAR 0 14
14739: PUSH
14740: LD_VAR 0 19
14744: PUSH
14745: FOR_IN
14746: IFFALSE 14922
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14748: LD_ADDR_VAR 0 22
14752: PUSH
14753: LD_INT 22
14755: PUSH
14756: LD_VAR 0 11
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: PPUSH
14770: LD_VAR 0 14
14774: PPUSH
14775: CALL_OW 74
14779: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14780: LD_ADDR_VAR 0 23
14784: PUSH
14785: LD_INT 22
14787: PUSH
14788: LD_VAR 0 11
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: LD_INT 59
14802: PUSH
14803: EMPTY
14804: LIST
14805: PUSH
14806: LD_INT 21
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 21
14818: PUSH
14819: LD_INT 2
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: PPUSH
14844: LD_VAR 0 14
14848: PPUSH
14849: CALL_OW 74
14853: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14854: LD_VAR 0 14
14858: PPUSH
14859: LD_VAR 0 22
14863: PPUSH
14864: CALL_OW 296
14868: PUSH
14869: LD_INT 6
14871: PLUS
14872: PUSH
14873: LD_VAR 0 14
14877: PPUSH
14878: LD_VAR 0 23
14882: PPUSH
14883: CALL_OW 296
14887: LESS
14888: IFFALSE 14906
// begin ComAttackUnit ( i , target1 ) ;
14890: LD_VAR 0 14
14894: PPUSH
14895: LD_VAR 0 22
14899: PPUSH
14900: CALL_OW 115
// end else
14904: GO 14920
// begin ComAttackUnit ( i , target2 ) ;
14906: LD_VAR 0 14
14910: PPUSH
14911: LD_VAR 0 23
14915: PPUSH
14916: CALL_OW 115
// end ; end ;
14920: GO 14745
14922: POP
14923: POP
// until soldiersOK_list = [ ] ;
14924: LD_VAR 0 19
14928: PUSH
14929: EMPTY
14930: EQUAL
14931: IFFALSE 14498
// end ; end ;
14933: LD_VAR 0 13
14937: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
14948: PPUSH
14949: PPUSH
14950: PPUSH
// amChassisTab = [ ] ;
14951: LD_ADDR_VAR 0 19
14955: PUSH
14956: EMPTY
14957: ST_TO_ADDR
// arChassisTab = [ ] ;
14958: LD_ADDR_VAR 0 18
14962: PUSH
14963: EMPTY
14964: ST_TO_ADDR
// ruChassisTab = [ ] ;
14965: LD_ADDR_VAR 0 17
14969: PUSH
14970: EMPTY
14971: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14972: LD_INT 35
14974: PPUSH
14975: CALL_OW 67
// if nation = 1 then
14979: LD_VAR 0 5
14983: PUSH
14984: LD_INT 1
14986: EQUAL
14987: IFFALSE 15478
// begin uc_side = side ;
14989: LD_ADDR_OWVAR 20
14993: PUSH
14994: LD_VAR 0 2
14998: ST_TO_ADDR
// uc_nation = nation ;
14999: LD_ADDR_OWVAR 21
15003: PUSH
15004: LD_VAR 0 5
15008: ST_TO_ADDR
// vc_engine = vehengine ;
15009: LD_ADDR_OWVAR 39
15013: PUSH
15014: LD_VAR 0 6
15018: ST_TO_ADDR
// vc_control = vehcontrol ;
15019: LD_ADDR_OWVAR 38
15023: PUSH
15024: LD_VAR 0 7
15028: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15029: LD_ADDR_OWVAR 40
15033: PUSH
15034: LD_VAR 0 10
15038: PUSH
15039: LD_INT 1
15041: PPUSH
15042: LD_VAR 0 10
15046: PPUSH
15047: CALL_OW 12
15051: ARRAY
15052: ST_TO_ADDR
// for j = 1 to AMWeapon do
15053: LD_ADDR_VAR 0 14
15057: PUSH
15058: DOUBLE
15059: LD_INT 1
15061: DEC
15062: ST_TO_ADDR
15063: LD_VAR 0 10
15067: PUSH
15068: FOR_TO
15069: IFFALSE 15370
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15071: LD_VAR 0 10
15075: PUSH
15076: LD_VAR 0 14
15080: ARRAY
15081: PUSH
15082: LD_INT 2
15084: EQUAL
15085: PUSH
15086: LD_VAR 0 10
15090: PUSH
15091: LD_VAR 0 14
15095: ARRAY
15096: PUSH
15097: LD_INT 3
15099: EQUAL
15100: OR
15101: IFFALSE 15154
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15103: LD_ADDR_VAR 0 19
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: LD_INT 4
15119: PUSH
15120: LD_INT 5
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15130: LD_ADDR_OWVAR 37
15134: PUSH
15135: LD_VAR 0 19
15139: PUSH
15140: LD_INT 1
15142: PPUSH
15143: LD_VAR 0 19
15147: PPUSH
15148: CALL_OW 12
15152: ARRAY
15153: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15154: LD_VAR 0 10
15158: PUSH
15159: LD_VAR 0 14
15163: ARRAY
15164: PUSH
15165: LD_INT 4
15167: EQUAL
15168: PUSH
15169: LD_VAR 0 10
15173: PUSH
15174: LD_VAR 0 14
15178: ARRAY
15179: PUSH
15180: LD_INT 5
15182: EQUAL
15183: OR
15184: PUSH
15185: LD_VAR 0 10
15189: PUSH
15190: LD_VAR 0 14
15194: ARRAY
15195: PUSH
15196: LD_INT 9
15198: EQUAL
15199: OR
15200: PUSH
15201: LD_VAR 0 10
15205: PUSH
15206: LD_VAR 0 14
15210: ARRAY
15211: PUSH
15212: LD_INT 11
15214: EQUAL
15215: OR
15216: PUSH
15217: LD_VAR 0 10
15221: PUSH
15222: LD_VAR 0 14
15226: ARRAY
15227: PUSH
15228: LD_INT 7
15230: EQUAL
15231: OR
15232: IFFALSE 15281
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15234: LD_ADDR_VAR 0 19
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: LD_INT 3
15244: PUSH
15245: LD_INT 4
15247: PUSH
15248: LD_INT 5
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15257: LD_ADDR_OWVAR 37
15261: PUSH
15262: LD_VAR 0 19
15266: PUSH
15267: LD_INT 1
15269: PPUSH
15270: LD_VAR 0 19
15274: PPUSH
15275: CALL_OW 12
15279: ARRAY
15280: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15281: LD_VAR 0 10
15285: PUSH
15286: LD_VAR 0 14
15290: ARRAY
15291: PUSH
15292: LD_INT 8
15294: EQUAL
15295: PUSH
15296: LD_VAR 0 10
15300: PUSH
15301: LD_VAR 0 14
15305: ARRAY
15306: PUSH
15307: LD_INT 6
15309: EQUAL
15310: OR
15311: PUSH
15312: LD_VAR 0 10
15316: PUSH
15317: LD_VAR 0 14
15321: ARRAY
15322: PUSH
15323: LD_INT 10
15325: EQUAL
15326: OR
15327: IFFALSE 15368
// begin amChassisTab = [ 4 , 5 ] ;
15329: LD_ADDR_VAR 0 19
15333: PUSH
15334: LD_INT 4
15336: PUSH
15337: LD_INT 5
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15344: LD_ADDR_OWVAR 37
15348: PUSH
15349: LD_VAR 0 19
15353: PUSH
15354: LD_INT 1
15356: PPUSH
15357: LD_VAR 0 19
15361: PPUSH
15362: CALL_OW 12
15366: ARRAY
15367: ST_TO_ADDR
// end ; end ;
15368: GO 15068
15370: POP
15371: POP
// veh = CreateVehicle ;
15372: LD_ADDR_VAR 0 16
15376: PUSH
15377: CALL_OW 45
15381: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15382: LD_VAR 0 16
15386: PPUSH
15387: LD_VAR 0 1
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL_OW 49
// if vehControl = 1 then
15399: LD_VAR 0 7
15403: PUSH
15404: LD_INT 1
15406: EQUAL
15407: IFFALSE 15464
// begin hc_gallery =  ;
15409: LD_ADDR_OWVAR 33
15413: PUSH
15414: LD_STRING 
15416: ST_TO_ADDR
// hc_name =  ;
15417: LD_ADDR_OWVAR 26
15421: PUSH
15422: LD_STRING 
15424: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15425: LD_INT 0
15427: PPUSH
15428: LD_INT 3
15430: PPUSH
15431: LD_VAR 0 4
15435: PPUSH
15436: CALL_OW 380
// un = CreateHuman ;
15440: LD_ADDR_VAR 0 15
15444: PUSH
15445: CALL_OW 44
15449: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15450: LD_VAR 0 15
15454: PPUSH
15455: LD_VAR 0 16
15459: PPUSH
15460: CALL_OW 52
// end ; i = i + 1 ;
15464: LD_ADDR_VAR 0 13
15468: PUSH
15469: LD_VAR 0 13
15473: PUSH
15474: LD_INT 1
15476: PLUS
15477: ST_TO_ADDR
// end ; if nation = 2 then
15478: LD_VAR 0 5
15482: PUSH
15483: LD_INT 2
15485: EQUAL
15486: IFFALSE 15910
// begin uc_side = side ;
15488: LD_ADDR_OWVAR 20
15492: PUSH
15493: LD_VAR 0 2
15497: ST_TO_ADDR
// uc_nation = nation ;
15498: LD_ADDR_OWVAR 21
15502: PUSH
15503: LD_VAR 0 5
15507: ST_TO_ADDR
// vc_engine = vehengine ;
15508: LD_ADDR_OWVAR 39
15512: PUSH
15513: LD_VAR 0 6
15517: ST_TO_ADDR
// vc_control = vehcontrol ;
15518: LD_ADDR_OWVAR 38
15522: PUSH
15523: LD_VAR 0 7
15527: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15528: LD_ADDR_OWVAR 40
15532: PUSH
15533: LD_VAR 0 9
15537: PUSH
15538: LD_INT 1
15540: PPUSH
15541: LD_VAR 0 9
15545: PPUSH
15546: CALL_OW 12
15550: ARRAY
15551: ST_TO_ADDR
// for j = 1 to ARWeapons do
15552: LD_ADDR_VAR 0 14
15556: PUSH
15557: DOUBLE
15558: LD_INT 1
15560: DEC
15561: ST_TO_ADDR
15562: LD_VAR 0 9
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15802
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15570: LD_VAR 0 9
15574: PUSH
15575: LD_VAR 0 14
15579: ARRAY
15580: PUSH
15581: LD_INT 24
15583: EQUAL
15584: PUSH
15585: LD_VAR 0 9
15589: PUSH
15590: LD_VAR 0 14
15594: ARRAY
15595: PUSH
15596: LD_INT 22
15598: EQUAL
15599: OR
15600: PUSH
15601: LD_VAR 0 9
15605: PUSH
15606: LD_VAR 0 14
15610: ARRAY
15611: PUSH
15612: LD_INT 23
15614: EQUAL
15615: OR
15616: PUSH
15617: LD_VAR 0 9
15621: PUSH
15622: LD_VAR 0 14
15626: ARRAY
15627: PUSH
15628: LD_INT 30
15630: EQUAL
15631: OR
15632: IFFALSE 15681
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15634: LD_ADDR_VAR 0 18
15638: PUSH
15639: LD_INT 11
15641: PUSH
15642: LD_INT 12
15644: PUSH
15645: LD_INT 13
15647: PUSH
15648: LD_INT 14
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15657: LD_ADDR_OWVAR 37
15661: PUSH
15662: LD_VAR 0 18
15666: PUSH
15667: LD_INT 1
15669: PPUSH
15670: LD_VAR 0 18
15674: PPUSH
15675: CALL_OW 12
15679: ARRAY
15680: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15681: LD_VAR 0 9
15685: PUSH
15686: LD_VAR 0 14
15690: ARRAY
15691: PUSH
15692: LD_INT 29
15694: EQUAL
15695: PUSH
15696: LD_VAR 0 9
15700: PUSH
15701: LD_VAR 0 14
15705: ARRAY
15706: PUSH
15707: LD_INT 28
15709: EQUAL
15710: OR
15711: PUSH
15712: LD_VAR 0 9
15716: PUSH
15717: LD_VAR 0 14
15721: ARRAY
15722: PUSH
15723: LD_INT 27
15725: EQUAL
15726: OR
15727: PUSH
15728: LD_VAR 0 9
15732: PUSH
15733: LD_VAR 0 14
15737: ARRAY
15738: PUSH
15739: LD_INT 26
15741: EQUAL
15742: OR
15743: PUSH
15744: LD_VAR 0 9
15748: PUSH
15749: LD_VAR 0 14
15753: ARRAY
15754: PUSH
15755: LD_INT 25
15757: EQUAL
15758: OR
15759: IFFALSE 15800
// begin arChassisTab = [ 13 , 14 ] ;
15761: LD_ADDR_VAR 0 18
15765: PUSH
15766: LD_INT 13
15768: PUSH
15769: LD_INT 14
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15776: LD_ADDR_OWVAR 37
15780: PUSH
15781: LD_VAR 0 18
15785: PUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_VAR 0 18
15793: PPUSH
15794: CALL_OW 12
15798: ARRAY
15799: ST_TO_ADDR
// end ; end ;
15800: GO 15567
15802: POP
15803: POP
// veh = CreateVehicle ;
15804: LD_ADDR_VAR 0 16
15808: PUSH
15809: CALL_OW 45
15813: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15814: LD_VAR 0 16
15818: PPUSH
15819: LD_VAR 0 1
15823: PPUSH
15824: LD_INT 0
15826: PPUSH
15827: CALL_OW 49
// if vehcontrol = 1 then
15831: LD_VAR 0 7
15835: PUSH
15836: LD_INT 1
15838: EQUAL
15839: IFFALSE 15896
// begin hc_gallery =  ;
15841: LD_ADDR_OWVAR 33
15845: PUSH
15846: LD_STRING 
15848: ST_TO_ADDR
// hc_name =  ;
15849: LD_ADDR_OWVAR 26
15853: PUSH
15854: LD_STRING 
15856: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 3
15862: PPUSH
15863: LD_VAR 0 4
15867: PPUSH
15868: CALL_OW 380
// un = CreateHuman ;
15872: LD_ADDR_VAR 0 15
15876: PUSH
15877: CALL_OW 44
15881: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15882: LD_VAR 0 15
15886: PPUSH
15887: LD_VAR 0 16
15891: PPUSH
15892: CALL_OW 52
// end ; i = i + 1 ;
15896: LD_ADDR_VAR 0 13
15900: PUSH
15901: LD_VAR 0 13
15905: PUSH
15906: LD_INT 1
15908: PLUS
15909: ST_TO_ADDR
// end ; if nation = 3 then
15910: LD_VAR 0 5
15914: PUSH
15915: LD_INT 3
15917: EQUAL
15918: IFFALSE 16310
// begin uc_side = side ;
15920: LD_ADDR_OWVAR 20
15924: PUSH
15925: LD_VAR 0 2
15929: ST_TO_ADDR
// uc_nation = nation ;
15930: LD_ADDR_OWVAR 21
15934: PUSH
15935: LD_VAR 0 5
15939: ST_TO_ADDR
// vc_engine = vehengine ;
15940: LD_ADDR_OWVAR 39
15944: PUSH
15945: LD_VAR 0 6
15949: ST_TO_ADDR
// vc_control = vehcontrol ;
15950: LD_ADDR_OWVAR 38
15954: PUSH
15955: LD_VAR 0 7
15959: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15960: LD_ADDR_OWVAR 40
15964: PUSH
15965: LD_VAR 0 8
15969: PUSH
15970: LD_INT 1
15972: PPUSH
15973: LD_VAR 0 8
15977: PPUSH
15978: CALL_OW 12
15982: ARRAY
15983: ST_TO_ADDR
// for j = 1 to RuWeapons do
15984: LD_ADDR_VAR 0 14
15988: PUSH
15989: DOUBLE
15990: LD_INT 1
15992: DEC
15993: ST_TO_ADDR
15994: LD_VAR 0 8
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16202
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16002: LD_VAR 0 8
16006: PUSH
16007: LD_VAR 0 14
16011: ARRAY
16012: PUSH
16013: LD_INT 42
16015: EQUAL
16016: PUSH
16017: LD_VAR 0 8
16021: PUSH
16022: LD_VAR 0 14
16026: ARRAY
16027: PUSH
16028: LD_INT 43
16030: EQUAL
16031: OR
16032: PUSH
16033: LD_VAR 0 8
16037: PUSH
16038: LD_VAR 0 14
16042: ARRAY
16043: PUSH
16044: LD_INT 44
16046: EQUAL
16047: OR
16048: PUSH
16049: LD_VAR 0 8
16053: PUSH
16054: LD_VAR 0 14
16058: ARRAY
16059: PUSH
16060: LD_INT 45
16062: EQUAL
16063: OR
16064: PUSH
16065: LD_VAR 0 8
16069: PUSH
16070: LD_VAR 0 14
16074: ARRAY
16075: PUSH
16076: LD_INT 49
16078: EQUAL
16079: OR
16080: IFFALSE 16129
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16082: LD_ADDR_VAR 0 17
16086: PUSH
16087: LD_INT 21
16089: PUSH
16090: LD_INT 22
16092: PUSH
16093: LD_INT 23
16095: PUSH
16096: LD_INT 24
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16105: LD_ADDR_OWVAR 37
16109: PUSH
16110: LD_VAR 0 17
16114: PUSH
16115: LD_INT 1
16117: PPUSH
16118: LD_VAR 0 17
16122: PPUSH
16123: CALL_OW 12
16127: ARRAY
16128: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16129: LD_VAR 0 8
16133: PUSH
16134: LD_VAR 0 14
16138: ARRAY
16139: PUSH
16140: LD_INT 46
16142: EQUAL
16143: PUSH
16144: LD_VAR 0 8
16148: PUSH
16149: LD_VAR 0 14
16153: ARRAY
16154: PUSH
16155: LD_INT 47
16157: EQUAL
16158: OR
16159: IFFALSE 16200
// begin ruChassisTab = [ 23 , 24 ] ;
16161: LD_ADDR_VAR 0 17
16165: PUSH
16166: LD_INT 23
16168: PUSH
16169: LD_INT 24
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16176: LD_ADDR_OWVAR 37
16180: PUSH
16181: LD_VAR 0 17
16185: PUSH
16186: LD_INT 1
16188: PPUSH
16189: LD_VAR 0 17
16193: PPUSH
16194: CALL_OW 12
16198: ARRAY
16199: ST_TO_ADDR
// end ; end ;
16200: GO 15999
16202: POP
16203: POP
// veh = CreateVehicle ;
16204: LD_ADDR_VAR 0 16
16208: PUSH
16209: CALL_OW 45
16213: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16214: LD_VAR 0 16
16218: PPUSH
16219: LD_VAR 0 1
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// if vehcontrol = 1 then
16231: LD_VAR 0 7
16235: PUSH
16236: LD_INT 1
16238: EQUAL
16239: IFFALSE 16296
// begin hc_gallery =  ;
16241: LD_ADDR_OWVAR 33
16245: PUSH
16246: LD_STRING 
16248: ST_TO_ADDR
// hc_name =  ;
16249: LD_ADDR_OWVAR 26
16253: PUSH
16254: LD_STRING 
16256: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16257: LD_INT 0
16259: PPUSH
16260: LD_INT 3
16262: PPUSH
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 380
// un = CreateHuman ;
16272: LD_ADDR_VAR 0 15
16276: PUSH
16277: CALL_OW 44
16281: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16282: LD_VAR 0 15
16286: PPUSH
16287: LD_VAR 0 16
16291: PPUSH
16292: CALL_OW 52
// end ; i = i + 1 ;
16296: LD_ADDR_VAR 0 13
16300: PUSH
16301: LD_VAR 0 13
16305: PUSH
16306: LD_INT 1
16308: PLUS
16309: ST_TO_ADDR
// end ; until i = vehCount ;
16310: LD_VAR 0 13
16314: PUSH
16315: LD_VAR 0 3
16319: EQUAL
16320: IFFALSE 14972
// repeat wait ( 0 0$1 ) ;
16322: LD_INT 35
16324: PPUSH
16325: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16329: LD_ADDR_VAR 0 20
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_VAR 0 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 21
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 24
16358: PUSH
16359: LD_INT 250
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: PPUSH
16371: CALL_OW 69
16375: ST_TO_ADDR
// if vehicleOK_list > 0 then
16376: LD_VAR 0 20
16380: PUSH
16381: LD_INT 0
16383: GREATER
16384: IFFALSE 16575
// begin for i in vehicleOK_list do
16386: LD_ADDR_VAR 0 13
16390: PUSH
16391: LD_VAR 0 20
16395: PUSH
16396: FOR_IN
16397: IFFALSE 16573
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16399: LD_ADDR_VAR 0 21
16403: PUSH
16404: LD_INT 22
16406: PUSH
16407: LD_VAR 0 11
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: PPUSH
16421: LD_VAR 0 13
16425: PPUSH
16426: CALL_OW 74
16430: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16431: LD_ADDR_VAR 0 22
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_VAR 0 11
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 59
16453: PUSH
16454: EMPTY
16455: LIST
16456: PUSH
16457: LD_INT 21
16459: PUSH
16460: LD_INT 1
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 21
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: PPUSH
16495: LD_VAR 0 13
16499: PPUSH
16500: CALL_OW 74
16504: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16505: LD_VAR 0 13
16509: PPUSH
16510: LD_VAR 0 21
16514: PPUSH
16515: CALL_OW 296
16519: PUSH
16520: LD_INT 6
16522: PLUS
16523: PUSH
16524: LD_VAR 0 13
16528: PPUSH
16529: LD_VAR 0 22
16533: PPUSH
16534: CALL_OW 296
16538: LESS
16539: IFFALSE 16557
// begin ComAttackUnit ( i , target1 ) ;
16541: LD_VAR 0 13
16545: PPUSH
16546: LD_VAR 0 21
16550: PPUSH
16551: CALL_OW 115
// end else
16555: GO 16571
// begin ComAttackUnit ( i , target2 ) ;
16557: LD_VAR 0 13
16561: PPUSH
16562: LD_VAR 0 22
16566: PPUSH
16567: CALL_OW 115
// end ; end ;
16571: GO 16396
16573: POP
16574: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16575: LD_INT 22
16577: PUSH
16578: LD_VAR 0 2
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 21
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 24
16599: PUSH
16600: LD_INT 250
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: PUSH
16617: LD_INT 0
16619: EQUAL
16620: IFFALSE 16322
// end ;
16622: LD_VAR 0 12
16626: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16627: LD_INT 0
16629: PPUSH
16630: PPUSH
16631: PPUSH
16632: PPUSH
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16637: LD_ADDR_VAR 0 7
16641: PUSH
16642: LD_INT 22
16644: PUSH
16645: LD_VAR 0 1
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: LD_INT 3
16659: PUSH
16660: LD_INT 24
16662: PUSH
16663: LD_INT 550
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 24
16676: PUSH
16677: LD_INT 250
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16698: LD_ADDR_VAR 0 8
16702: PUSH
16703: LD_INT 22
16705: PUSH
16706: LD_VAR 0 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: LD_INT 25
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 25
16730: PUSH
16731: LD_INT 5
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 25
16740: PUSH
16741: LD_INT 8
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 25
16750: PUSH
16751: LD_INT 9
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 24
16767: PUSH
16768: LD_INT 1000
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: PPUSH
16780: CALL_OW 69
16784: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16785: LD_ADDR_VAR 0 9
16789: PUSH
16790: LD_INT 22
16792: PUSH
16793: LD_VAR 0 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 25
16804: PUSH
16805: LD_INT 4
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PPUSH
16816: CALL_OW 69
16820: ST_TO_ADDR
// if medicCount > 0 then
16821: LD_VAR 0 9
16825: PUSH
16826: LD_INT 0
16828: GREATER
16829: IFFALSE 16903
// begin if damageUnit_list > 0 then
16831: LD_VAR 0 7
16835: PUSH
16836: LD_INT 0
16838: GREATER
16839: IFFALSE 16903
// begin for i in damageUnit_list do
16841: LD_ADDR_VAR 0 5
16845: PUSH
16846: LD_VAR 0 7
16850: PUSH
16851: FOR_IN
16852: IFFALSE 16901
// begin ComMoveToArea ( i , healArea ) ;
16854: LD_VAR 0 5
16858: PPUSH
16859: LD_VAR 0 2
16863: PPUSH
16864: CALL_OW 113
// for j in medicCount do
16868: LD_ADDR_VAR 0 6
16872: PUSH
16873: LD_VAR 0 9
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16897
// AddComHeal ( j , i ) ;
16881: LD_VAR 0 6
16885: PPUSH
16886: LD_VAR 0 5
16890: PPUSH
16891: CALL_OW 188
16895: GO 16878
16897: POP
16898: POP
// end ;
16899: GO 16851
16901: POP
16902: POP
// end ; end ; if soldiersOK_list > 0 then
16903: LD_VAR 0 8
16907: PUSH
16908: LD_INT 0
16910: GREATER
16911: IFFALSE 17102
// begin for i in soldiersOK_list do
16913: LD_ADDR_VAR 0 5
16917: PUSH
16918: LD_VAR 0 8
16922: PUSH
16923: FOR_IN
16924: IFFALSE 17100
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16926: LD_ADDR_VAR 0 10
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_VAR 0 3
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PPUSH
16943: CALL_OW 69
16947: PPUSH
16948: LD_VAR 0 5
16952: PPUSH
16953: CALL_OW 74
16957: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16958: LD_ADDR_VAR 0 11
16962: PUSH
16963: LD_INT 22
16965: PUSH
16966: LD_VAR 0 3
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: LD_INT 59
16980: PUSH
16981: EMPTY
16982: LIST
16983: PUSH
16984: LD_INT 21
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: PPUSH
17017: CALL_OW 69
17021: PPUSH
17022: LD_VAR 0 5
17026: PPUSH
17027: CALL_OW 74
17031: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17032: LD_VAR 0 5
17036: PPUSH
17037: LD_VAR 0 10
17041: PPUSH
17042: CALL_OW 296
17046: PUSH
17047: LD_INT 8
17049: PLUS
17050: PUSH
17051: LD_VAR 0 5
17055: PPUSH
17056: LD_VAR 0 11
17060: PPUSH
17061: CALL_OW 296
17065: LESS
17066: IFFALSE 17084
// begin ComAttackUnit ( i , target1 ) ;
17068: LD_VAR 0 5
17072: PPUSH
17073: LD_VAR 0 10
17077: PPUSH
17078: CALL_OW 115
// end else
17082: GO 17098
// begin ComAttackUnit ( i , target2 ) ;
17084: LD_VAR 0 5
17088: PPUSH
17089: LD_VAR 0 11
17093: PPUSH
17094: CALL_OW 115
// end ; end ;
17098: GO 16923
17100: POP
17101: POP
// end ; end ;
17102: LD_VAR 0 4
17106: RET
// export function GetDriverVehicle ( unit ) ; begin
17107: LD_INT 0
17109: PPUSH
// if not unit then
17110: LD_VAR 0 1
17114: NOT
17115: IFFALSE 17119
// exit ;
17117: GO 17157
// result := IsInUnit ( unit ) ;
17119: LD_ADDR_VAR 0 2
17123: PUSH
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 310
17133: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
17134: LD_VAR 0 2
17138: PPUSH
17139: CALL_OW 247
17143: PUSH
17144: LD_INT 2
17146: NONEQUAL
17147: IFFALSE 17157
// result := 0 ;
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: LD_INT 0
17156: ST_TO_ADDR
// end ;
17157: LD_VAR 0 2
17161: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17162: LD_INT 0
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
// result := false ;
17173: LD_ADDR_VAR 0 7
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17181: LD_VAR 0 1
17185: NOT
17186: PUSH
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 266
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: IN
17207: NOT
17208: OR
17209: PUSH
17210: LD_VAR 0 2
17214: NOT
17215: OR
17216: PUSH
17217: LD_VAR 0 5
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: LD_INT 3
17233: PUSH
17234: LD_INT 4
17236: PUSH
17237: LD_INT 5
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: IN
17248: NOT
17249: OR
17250: PUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_VAR 0 4
17260: PPUSH
17261: CALL_OW 488
17265: NOT
17266: OR
17267: IFFALSE 17271
// exit ;
17269: GO 17952
// pom := GetBase ( bdepot ) ;
17271: LD_ADDR_VAR 0 10
17275: PUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 274
17285: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17286: LD_ADDR_VAR 0 11
17290: PUSH
17291: LD_VAR 0 2
17295: PPUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 248
17305: PPUSH
17306: CALL_OW 450
17310: ST_TO_ADDR
// if check_cost then
17311: LD_VAR 0 6
17315: IFFALSE 17392
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17317: LD_VAR 0 10
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 275
17329: PUSH
17330: LD_VAR 0 11
17334: PUSH
17335: LD_INT 1
17337: ARRAY
17338: GREATEREQUAL
17339: PUSH
17340: LD_VAR 0 10
17344: PPUSH
17345: LD_INT 2
17347: PPUSH
17348: CALL_OW 275
17352: PUSH
17353: LD_VAR 0 11
17357: PUSH
17358: LD_INT 2
17360: ARRAY
17361: GREATEREQUAL
17362: AND
17363: PUSH
17364: LD_VAR 0 10
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: CALL_OW 275
17376: PUSH
17377: LD_VAR 0 11
17381: PUSH
17382: LD_INT 3
17384: ARRAY
17385: GREATEREQUAL
17386: AND
17387: NOT
17388: IFFALSE 17392
// exit ;
17390: GO 17952
// if GetBType ( bdepot ) = b_depot then
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 266
17401: PUSH
17402: LD_INT 0
17404: EQUAL
17405: IFFALSE 17417
// dist := 28 else
17407: LD_ADDR_VAR 0 14
17411: PUSH
17412: LD_INT 28
17414: ST_TO_ADDR
17415: GO 17425
// dist := 36 ;
17417: LD_ADDR_VAR 0 14
17421: PUSH
17422: LD_INT 36
17424: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17425: LD_VAR 0 1
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: CALL_OW 297
17444: PUSH
17445: LD_VAR 0 14
17449: GREATER
17450: IFFALSE 17454
// exit ;
17452: GO 17952
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17454: LD_ADDR_VAR 0 12
17458: PUSH
17459: LD_VAR 0 2
17463: PPUSH
17464: LD_VAR 0 3
17468: PPUSH
17469: LD_VAR 0 4
17473: PPUSH
17474: LD_VAR 0 5
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 248
17488: PPUSH
17489: LD_INT 0
17491: PPUSH
17492: CALL 60150 0 6
17496: ST_TO_ADDR
// if not hexes then
17497: LD_VAR 0 12
17501: NOT
17502: IFFALSE 17506
// exit ;
17504: GO 17952
// hex := GetHexInfo ( x , y ) ;
17506: LD_ADDR_VAR 0 15
17510: PUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: LD_VAR 0 4
17520: PPUSH
17521: CALL_OW 546
17525: ST_TO_ADDR
// if hex [ 1 ] then
17526: LD_VAR 0 15
17530: PUSH
17531: LD_INT 1
17533: ARRAY
17534: IFFALSE 17538
// exit ;
17536: GO 17952
// height := hex [ 2 ] ;
17538: LD_ADDR_VAR 0 13
17542: PUSH
17543: LD_VAR 0 15
17547: PUSH
17548: LD_INT 2
17550: ARRAY
17551: ST_TO_ADDR
// for i = 1 to hexes do
17552: LD_ADDR_VAR 0 8
17556: PUSH
17557: DOUBLE
17558: LD_INT 1
17560: DEC
17561: ST_TO_ADDR
17562: LD_VAR 0 12
17566: PUSH
17567: FOR_TO
17568: IFFALSE 17896
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17570: LD_VAR 0 12
17574: PUSH
17575: LD_VAR 0 8
17579: ARRAY
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: LD_VAR 0 12
17589: PUSH
17590: LD_VAR 0 8
17594: ARRAY
17595: PUSH
17596: LD_INT 2
17598: ARRAY
17599: PPUSH
17600: CALL_OW 488
17604: NOT
17605: IFFALSE 17609
// continue ;
17607: GO 17567
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17609: LD_ADDR_VAR 0 9
17613: PUSH
17614: LD_VAR 0 12
17618: PUSH
17619: LD_VAR 0 8
17623: ARRAY
17624: PUSH
17625: LD_INT 1
17627: ARRAY
17628: PPUSH
17629: LD_VAR 0 12
17633: PUSH
17634: LD_VAR 0 8
17638: ARRAY
17639: PUSH
17640: LD_INT 2
17642: ARRAY
17643: PPUSH
17644: CALL_OW 546
17648: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17649: LD_VAR 0 9
17653: PUSH
17654: LD_INT 1
17656: ARRAY
17657: PUSH
17658: LD_VAR 0 9
17662: PUSH
17663: LD_INT 2
17665: ARRAY
17666: PUSH
17667: LD_VAR 0 13
17671: PUSH
17672: LD_INT 2
17674: PLUS
17675: GREATER
17676: OR
17677: PUSH
17678: LD_VAR 0 9
17682: PUSH
17683: LD_INT 2
17685: ARRAY
17686: PUSH
17687: LD_VAR 0 13
17691: PUSH
17692: LD_INT 2
17694: MINUS
17695: LESS
17696: OR
17697: PUSH
17698: LD_VAR 0 9
17702: PUSH
17703: LD_INT 3
17705: ARRAY
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: LD_INT 8
17712: PUSH
17713: LD_INT 9
17715: PUSH
17716: LD_INT 10
17718: PUSH
17719: LD_INT 11
17721: PUSH
17722: LD_INT 12
17724: PUSH
17725: LD_INT 13
17727: PUSH
17728: LD_INT 16
17730: PUSH
17731: LD_INT 17
17733: PUSH
17734: LD_INT 18
17736: PUSH
17737: LD_INT 19
17739: PUSH
17740: LD_INT 20
17742: PUSH
17743: LD_INT 21
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: IN
17761: NOT
17762: OR
17763: PUSH
17764: LD_VAR 0 9
17768: PUSH
17769: LD_INT 5
17771: ARRAY
17772: NOT
17773: OR
17774: PUSH
17775: LD_VAR 0 9
17779: PUSH
17780: LD_INT 6
17782: ARRAY
17783: PUSH
17784: LD_INT 1
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 7
17792: PUSH
17793: LD_INT 9
17795: PUSH
17796: LD_INT 10
17798: PUSH
17799: LD_INT 11
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: IN
17810: NOT
17811: OR
17812: PUSH
17813: LD_VAR 0 12
17817: PUSH
17818: LD_VAR 0 8
17822: ARRAY
17823: PUSH
17824: LD_INT 1
17826: ARRAY
17827: PPUSH
17828: LD_VAR 0 12
17832: PUSH
17833: LD_VAR 0 8
17837: ARRAY
17838: PUSH
17839: LD_INT 2
17841: ARRAY
17842: PPUSH
17843: CALL_OW 428
17847: PUSH
17848: LD_INT 0
17850: GREATER
17851: OR
17852: PUSH
17853: LD_VAR 0 12
17857: PUSH
17858: LD_VAR 0 8
17862: ARRAY
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PPUSH
17868: LD_VAR 0 12
17872: PUSH
17873: LD_VAR 0 8
17877: ARRAY
17878: PUSH
17879: LD_INT 2
17881: ARRAY
17882: PPUSH
17883: CALL_OW 351
17887: OR
17888: IFFALSE 17894
// exit ;
17890: POP
17891: POP
17892: GO 17952
// end ;
17894: GO 17567
17896: POP
17897: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17898: LD_VAR 0 2
17902: PUSH
17903: LD_INT 29
17905: PUSH
17906: LD_INT 30
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: IN
17913: PUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_VAR 0 1
17928: PPUSH
17929: CALL_OW 255
17933: PPUSH
17934: CALL_OW 440
17938: NOT
17939: AND
17940: IFFALSE 17944
// exit ;
17942: GO 17952
// result := true ;
17944: LD_ADDR_VAR 0 7
17948: PUSH
17949: LD_INT 1
17951: ST_TO_ADDR
// end ; end_of_file
17952: LD_VAR 0 7
17956: RET
// every 1 do var i ;
17957: GO 17959
17959: DISABLE
17960: LD_INT 0
17962: PPUSH
// begin Video ( true ) ;
17963: LD_INT 1
17965: PPUSH
17966: CALL 82918 0 1
// CenterOnXY ( 53 , 40 ) ;
17970: LD_INT 53
17972: PPUSH
17973: LD_INT 40
17975: PPUSH
17976: CALL_OW 84
// wait ( 0 0$5 ) ;
17980: LD_INT 175
17982: PPUSH
17983: CALL_OW 67
// if gammaCommander = 1 then
17987: LD_EXP 12
17991: PUSH
17992: LD_INT 1
17994: EQUAL
17995: IFFALSE 18009
// Say ( Donaldson , D1-Don-1 ) ;
17997: LD_EXP 3
18001: PPUSH
18002: LD_STRING D1-Don-1
18004: PPUSH
18005: CALL_OW 88
// if gammaCommander = 2 then
18009: LD_EXP 12
18013: PUSH
18014: LD_INT 2
18016: EQUAL
18017: IFFALSE 18031
// Say ( Brown , D1-Brown-1 ) ;
18019: LD_EXP 2
18023: PPUSH
18024: LD_STRING D1-Brown-1
18026: PPUSH
18027: CALL_OW 88
// if gammaCommander = 3 then
18031: LD_EXP 12
18035: PUSH
18036: LD_INT 3
18038: EQUAL
18039: IFFALSE 18053
// Say ( Houten , D1-VanH-1 ) ;
18041: LD_EXP 13
18045: PPUSH
18046: LD_STRING D1-VanH-1
18048: PPUSH
18049: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
18053: LD_EXP 22
18057: PPUSH
18058: LD_STRING D1-Har-1
18060: PPUSH
18061: CALL_OW 94
// if gammaCommander = 1 then
18065: LD_EXP 12
18069: PUSH
18070: LD_INT 1
18072: EQUAL
18073: IFFALSE 18087
// Say ( Donaldson , D1-Don-2 ) ;
18075: LD_EXP 3
18079: PPUSH
18080: LD_STRING D1-Don-2
18082: PPUSH
18083: CALL_OW 88
// if gammaCommander = 2 then
18087: LD_EXP 12
18091: PUSH
18092: LD_INT 2
18094: EQUAL
18095: IFFALSE 18109
// Say ( Brown , D1-Brown-2 ) ;
18097: LD_EXP 2
18101: PPUSH
18102: LD_STRING D1-Brown-2
18104: PPUSH
18105: CALL_OW 88
// if gammaCommander = 3 then
18109: LD_EXP 12
18113: PUSH
18114: LD_INT 3
18116: EQUAL
18117: IFFALSE 18131
// Say ( Houten , D1-VanH-2 ) ;
18119: LD_EXP 13
18123: PPUSH
18124: LD_STRING D1-VanH-2
18126: PPUSH
18127: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
18131: LD_EXP 22
18135: PPUSH
18136: LD_STRING D1-Har-2
18138: PPUSH
18139: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
18143: LD_INT 22
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 33
18155: PUSH
18156: LD_INT 2
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 61
18165: PUSH
18166: EMPTY
18167: LIST
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: PPUSH
18174: CALL_OW 69
18178: IFFALSE 18243
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
18180: LD_ADDR_VAR 0 1
18184: PUSH
18185: LD_INT 22
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 33
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 61
18207: PUSH
18208: EMPTY
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18241
// ComAgressiveMove ( i , 70 , 41 ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_INT 70
18231: PPUSH
18232: LD_INT 41
18234: PPUSH
18235: CALL_OW 114
18239: GO 18221
18241: POP
18242: POP
// repeat wait ( 0 0$1 ) ;
18243: LD_INT 35
18245: PPUSH
18246: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18250: LD_ADDR_VAR 0 1
18254: PUSH
18255: LD_INT 22
18257: PUSH
18258: LD_INT 6
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: PUSH
18273: FOR_IN
18274: IFFALSE 18293
// ComAgressiveMove ( i , 54 , 20 ) ;
18276: LD_VAR 0 1
18280: PPUSH
18281: LD_INT 54
18283: PPUSH
18284: LD_INT 20
18286: PPUSH
18287: CALL_OW 114
18291: GO 18273
18293: POP
18294: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18295: LD_ADDR_VAR 0 1
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 25
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 3
18322: PUSH
18323: LD_INT 54
18325: PUSH
18326: EMPTY
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: PPUSH
18338: CALL_OW 69
18342: PUSH
18343: FOR_IN
18344: IFFALSE 18378
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18346: LD_VAR 0 1
18350: PPUSH
18351: LD_INT 70
18353: PPUSH
18354: LD_INT 41
18356: PPUSH
18357: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18361: LD_VAR 0 1
18365: PPUSH
18366: LD_INT 46
18368: PPUSH
18369: LD_INT 39
18371: PPUSH
18372: CALL_OW 174
// end ;
18376: GO 18343
18378: POP
18379: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18380: LD_ADDR_VAR 0 1
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 21
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 3
18407: PUSH
18408: LD_INT 24
18410: PUSH
18411: LD_INT 500
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 69
18431: PUSH
18432: FOR_IN
18433: IFFALSE 18466
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18435: LD_VAR 0 1
18439: PPUSH
18440: LD_EXP 37
18444: PPUSH
18445: CALL_OW 250
18449: PPUSH
18450: LD_EXP 37
18454: PPUSH
18455: CALL_OW 251
18459: PPUSH
18460: CALL_OW 111
18464: GO 18432
18466: POP
18467: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18468: LD_INT 22
18470: PUSH
18471: LD_INT 6
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 24
18490: PUSH
18491: LD_INT 250
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: PUSH
18508: LD_INT 5
18510: LESS
18511: IFFALSE 18243
// Video ( false ) ;
18513: LD_INT 0
18515: PPUSH
18516: CALL 82918 0 1
// ChangeMissionObjectives ( M1 ) ;
18520: LD_STRING M1
18522: PPUSH
18523: CALL_OW 337
// wait ( 0 0$2 ) ;
18527: LD_INT 70
18529: PPUSH
18530: CALL_OW 67
// SaveForQuickRestart ;
18534: CALL_OW 22
// startCutscene = 0 ;
18538: LD_ADDR_EXP 38
18542: PUSH
18543: LD_INT 0
18545: ST_TO_ADDR
// end ;
18546: PPOPN 1
18548: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18549: LD_EXP 38
18553: IFFALSE 18644
18555: GO 18557
18557: DISABLE
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
// begin enable ;
18562: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18563: LD_ADDR_VAR 0 1
18567: PUSH
18568: LD_INT 22
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 21
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: LD_INT 24
18593: PUSH
18594: LD_INT 700
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ST_TO_ADDR
// for i in tmp do
18615: LD_ADDR_VAR 0 2
18619: PUSH
18620: LD_VAR 0 1
18624: PUSH
18625: FOR_IN
18626: IFFALSE 18642
// SetLives ( i , 700 ) ;
18628: LD_VAR 0 2
18632: PPUSH
18633: LD_INT 700
18635: PPUSH
18636: CALL_OW 234
18640: GO 18625
18642: POP
18643: POP
// end ;
18644: PPOPN 2
18646: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18647: LD_INT 22
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 101
18659: PUSH
18660: LD_INT 6
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: PUSH
18676: LD_INT 0
18678: EQUAL
18679: PUSH
18680: LD_OWVAR 1
18684: PUSH
18685: LD_INT 6300
18687: GREATER
18688: OR
18689: IFFALSE 18938
18691: GO 18693
18693: DISABLE
// begin PrepareSupportFromDelta ;
18694: CALL 3916 0 0
// firstAttack = 1 ;
18698: LD_ADDR_EXP 33
18702: PUSH
18703: LD_INT 1
18705: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18706: LD_EXP 8
18710: PPUSH
18711: CALL_OW 302
18715: IFFALSE 18731
// Say ( Gladstone , D2-Glad-1 ) else
18717: LD_EXP 8
18721: PPUSH
18722: LD_STRING D2-Glad-1
18724: PPUSH
18725: CALL_OW 88
18729: GO 18839
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18731: LD_INT 4
18733: PPUSH
18734: LD_INT 22
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 21
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 25
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 25
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 25
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 25
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 70
18813: PUSH
18814: LD_EXP 15
18818: PUSH
18819: LD_EXP 14
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: DIFF
18828: PPUSH
18829: LD_STRING D2-Sol1-1
18831: PPUSH
18832: LD_STRING D2-FSol1-1
18834: PPUSH
18835: CALL 7358 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18839: LD_EXP 3
18843: PPUSH
18844: CALL_OW 302
18848: PUSH
18849: LD_EXP 12
18853: PUSH
18854: LD_INT 1
18856: EQUAL
18857: AND
18858: IFFALSE 18872
// Say ( Donaldson , D2-Don-1 ) ;
18860: LD_EXP 3
18864: PPUSH
18865: LD_STRING D2-Don-1
18867: PPUSH
18868: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18872: LD_EXP 2
18876: PPUSH
18877: CALL_OW 302
18881: PUSH
18882: LD_EXP 12
18886: PUSH
18887: LD_INT 2
18889: EQUAL
18890: AND
18891: IFFALSE 18905
// Say ( Brown , D2-Brown-1 ) ;
18893: LD_EXP 2
18897: PPUSH
18898: LD_STRING D2-Brown-1
18900: PPUSH
18901: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18905: LD_EXP 13
18909: PPUSH
18910: CALL_OW 302
18914: PUSH
18915: LD_EXP 12
18919: PUSH
18920: LD_INT 3
18922: EQUAL
18923: AND
18924: IFFALSE 18938
// Say ( Houten , D2-VanH-1 ) ;
18926: LD_EXP 13
18930: PPUSH
18931: LD_STRING D2-VanH-1
18933: PPUSH
18934: CALL_OW 88
// end ;
18938: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18939: LD_OWVAR 1
18943: PUSH
18944: LD_INT 6300
18946: GREATER
18947: IFFALSE 20001
18949: GO 18951
18951: DISABLE
18952: LD_INT 0
18954: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18955: LD_STRING 07_time
18957: PPUSH
18958: LD_INT 12600
18960: PPUSH
18961: CALL_OW 30
18965: PUSH
18966: LD_INT 3
18968: DIV
18969: PPUSH
18970: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18974: LD_INT 34
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 321
18984: PUSH
18985: LD_INT 2
18987: EQUAL
18988: IFFALSE 18997
// SetAchievement ( ACH_HEAVYGUN ) ;
18990: LD_STRING ACH_HEAVYGUN
18992: PPUSH
18993: CALL_OW 543
// PrepareMacmillanSquad ;
18997: CALL 4613 0 0
// CenterNowOnUnits ( JMM ) ;
19001: LD_EXP 1
19005: PPUSH
19006: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
19010: LD_EXP 1
19014: PPUSH
19015: LD_STRING D3-JMM-1
19017: PPUSH
19018: CALL_OW 88
// JMMArrive = 1 ;
19022: LD_ADDR_EXP 39
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
19030: LD_EXP 3
19034: PPUSH
19035: CALL_OW 302
19039: PUSH
19040: LD_EXP 12
19044: PUSH
19045: LD_INT 1
19047: EQUAL
19048: AND
19049: IFFALSE 19065
// begin Say ( Donaldson , D3-Don-1 ) ;
19051: LD_EXP 3
19055: PPUSH
19056: LD_STRING D3-Don-1
19058: PPUSH
19059: CALL_OW 88
// end else
19063: GO 19117
// begin if gammaCommander = 1 then
19065: LD_EXP 12
19069: PUSH
19070: LD_INT 1
19072: EQUAL
19073: IFFALSE 19117
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
19075: LD_EXP 11
19079: PPUSH
19080: LD_INT 26
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 72
19094: PPUSH
19095: LD_STRING D3-Sol1-1
19097: PPUSH
19098: LD_STRING D3-Sol1-1
19100: PPUSH
19101: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19105: LD_EXP 1
19109: PPUSH
19110: LD_STRING D3-JMM-2
19112: PPUSH
19113: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
19117: LD_EXP 2
19121: PPUSH
19122: CALL_OW 302
19126: PUSH
19127: LD_EXP 12
19131: PUSH
19132: LD_INT 2
19134: EQUAL
19135: AND
19136: IFFALSE 19152
// begin Say ( Brown , D3-Brown-1 ) ;
19138: LD_EXP 2
19142: PPUSH
19143: LD_STRING D3-Brown-1
19145: PPUSH
19146: CALL_OW 88
// end else
19150: GO 19204
// begin if gammaCommander = 2 then
19152: LD_EXP 12
19156: PUSH
19157: LD_INT 2
19159: EQUAL
19160: IFFALSE 19204
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
19162: LD_EXP 11
19166: PPUSH
19167: LD_INT 26
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 72
19181: PPUSH
19182: LD_STRING D3-Sol1-1a
19184: PPUSH
19185: LD_STRING D3-Sol1-1a
19187: PPUSH
19188: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19192: LD_EXP 1
19196: PPUSH
19197: LD_STRING D3-JMM-2
19199: PPUSH
19200: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19204: LD_EXP 13
19208: PPUSH
19209: CALL_OW 302
19213: PUSH
19214: LD_EXP 12
19218: PUSH
19219: LD_INT 3
19221: EQUAL
19222: AND
19223: IFFALSE 19239
// begin Say ( Houten , D3-VanH-1 ) ;
19225: LD_EXP 13
19229: PPUSH
19230: LD_STRING D3-VanH-1
19232: PPUSH
19233: CALL_OW 88
// end else
19237: GO 19291
// begin if gammaCommander = 3 then
19239: LD_EXP 12
19243: PUSH
19244: LD_INT 3
19246: EQUAL
19247: IFFALSE 19291
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19249: LD_EXP 11
19253: PPUSH
19254: LD_INT 26
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL_OW 72
19268: PPUSH
19269: LD_STRING D3-Sol1-1b
19271: PPUSH
19272: LD_STRING D3-Sol1-1b
19274: PPUSH
19275: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19279: LD_EXP 1
19283: PPUSH
19284: LD_STRING D3-JMM-2
19286: PPUSH
19287: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19291: LD_EXP 15
19295: PPUSH
19296: CALL_OW 302
19300: IFFALSE 19328
// begin Say ( Joan , D3a-Joan-1 ) ;
19302: LD_EXP 15
19306: PPUSH
19307: LD_STRING D3a-Joan-1
19309: PPUSH
19310: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19314: LD_EXP 1
19318: PPUSH
19319: LD_STRING D3a-JMM-1
19321: PPUSH
19322: CALL_OW 88
// end else
19326: GO 19670
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19328: LD_STRING 06_JoanStatus_1
19330: PPUSH
19331: LD_INT 0
19333: PPUSH
19334: CALL_OW 30
19338: PUSH
19339: LD_INT 1
19341: EQUAL
19342: IFFALSE 19670
// begin Say ( JMM , D3b-JMM-1 ) ;
19344: LD_EXP 1
19348: PPUSH
19349: LD_STRING D3b-JMM-1
19351: PPUSH
19352: CALL_OW 88
// if gammaCommander = 1 then
19356: LD_EXP 12
19360: PUSH
19361: LD_INT 1
19363: EQUAL
19364: IFFALSE 19421
// if IsOK ( Donaldson ) then
19366: LD_EXP 3
19370: PPUSH
19371: CALL_OW 302
19375: IFFALSE 19391
// Say ( Donaldson , D3b-Don-1 ) else
19377: LD_EXP 3
19381: PPUSH
19382: LD_STRING D3b-Don-1
19384: PPUSH
19385: CALL_OW 88
19389: GO 19421
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19391: LD_EXP 11
19395: PPUSH
19396: LD_INT 26
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 72
19410: PPUSH
19411: LD_STRING D3b-Sol1-1
19413: PPUSH
19414: LD_STRING D3b-Sol1-1
19416: PPUSH
19417: CALL 7358 0 3
// if gammaCommander = 2 then
19421: LD_EXP 12
19425: PUSH
19426: LD_INT 2
19428: EQUAL
19429: IFFALSE 19486
// if IsOk ( Brown ) then
19431: LD_EXP 2
19435: PPUSH
19436: CALL_OW 302
19440: IFFALSE 19456
// Say ( Brown , D3b-Brown-1 ) else
19442: LD_EXP 2
19446: PPUSH
19447: LD_STRING D3b-Brown-1
19449: PPUSH
19450: CALL_OW 88
19454: GO 19486
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19456: LD_EXP 11
19460: PPUSH
19461: LD_INT 26
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PPUSH
19471: CALL_OW 72
19475: PPUSH
19476: LD_STRING D3b-Sol1-1
19478: PPUSH
19479: LD_STRING D3b-Sol1-1
19481: PPUSH
19482: CALL 7358 0 3
// if gammaCommander = 3 then
19486: LD_EXP 12
19490: PUSH
19491: LD_INT 3
19493: EQUAL
19494: IFFALSE 19551
// if IsOk ( Houten ) then
19496: LD_EXP 13
19500: PPUSH
19501: CALL_OW 302
19505: IFFALSE 19521
// Say ( Houten , D3b-VanH-1 ) else
19507: LD_EXP 13
19511: PPUSH
19512: LD_STRING D3b-VanH-1
19514: PPUSH
19515: CALL_OW 88
19519: GO 19551
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19521: LD_EXP 11
19525: PPUSH
19526: LD_INT 26
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PPUSH
19536: CALL_OW 72
19540: PPUSH
19541: LD_STRING D3b-Sol1-1
19543: PPUSH
19544: LD_STRING D3b-Sol1-1
19546: PPUSH
19547: CALL 7358 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19551: LD_EXP 11
19555: PPUSH
19556: LD_INT 26
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 72
19570: PUSH
19571: LD_EXP 12
19575: PUSH
19576: LD_INT 1
19578: EQUAL
19579: PUSH
19580: LD_EXP 3
19584: PPUSH
19585: CALL_OW 302
19589: AND
19590: OR
19591: PUSH
19592: LD_EXP 12
19596: PUSH
19597: LD_INT 2
19599: EQUAL
19600: PUSH
19601: LD_EXP 2
19605: PPUSH
19606: CALL_OW 302
19610: AND
19611: OR
19612: PUSH
19613: LD_EXP 12
19617: PUSH
19618: LD_INT 3
19620: EQUAL
19621: PUSH
19622: LD_EXP 13
19626: PPUSH
19627: CALL_OW 302
19631: AND
19632: OR
19633: IFFALSE 19647
// Say ( JMM , D3b-JMM-2 ) ;
19635: LD_EXP 1
19639: PPUSH
19640: LD_STRING D3b-JMM-2
19642: PPUSH
19643: CALL_OW 88
// if IsOK ( Lisa ) then
19647: LD_EXP 6
19651: PPUSH
19652: CALL_OW 302
19656: IFFALSE 19670
// Say ( Lisa , D3b-Lisa-2 ) ;
19658: LD_EXP 6
19662: PPUSH
19663: LD_STRING D3b-Lisa-2
19665: PPUSH
19666: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19670: LD_ADDR_VAR 0 1
19674: PUSH
19675: LD_EXP 1
19679: PUSH
19680: LD_EXP 2
19684: PUSH
19685: LD_EXP 3
19689: PUSH
19690: LD_EXP 4
19694: PUSH
19695: LD_EXP 5
19699: PUSH
19700: LD_EXP 6
19704: PUSH
19705: LD_EXP 7
19709: PUSH
19710: LD_EXP 8
19714: PUSH
19715: LD_EXP 9
19719: PUSH
19720: LD_EXP 10
19724: PUSH
19725: LD_EXP 15
19729: PUSH
19730: LD_EXP 14
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: LD_EXP 42
19753: ADD
19754: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19755: LD_INT 22
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 21
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 26
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 25
19790: PUSH
19791: LD_INT 1
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 25
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 25
19810: PUSH
19811: LD_INT 3
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 25
19820: PUSH
19821: LD_INT 4
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: PPUSH
19841: CALL_OW 69
19845: PUSH
19846: LD_VAR 0 1
19850: DIFF
19851: PPUSH
19852: LD_STRING DCa-Sol1-1
19854: PPUSH
19855: LD_STRING DCa-Sol1-1
19857: PPUSH
19858: CALL 7358 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19862: LD_EXP 1
19866: PPUSH
19867: LD_STRING DCb-JMM-1
19869: PPUSH
19870: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19874: LD_INT 22
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 21
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 26
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 25
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 25
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 25
19939: PUSH
19940: LD_INT 4
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: PPUSH
19960: CALL_OW 69
19964: PUSH
19965: LD_VAR 0 1
19969: DIFF
19970: PPUSH
19971: LD_STRING DCb-Sol1-1
19973: PPUSH
19974: LD_STRING DCb-Sol1-1
19976: PPUSH
19977: CALL 7358 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19981: LD_EXP 1
19985: PPUSH
19986: LD_STRING DCb-JMM-2
19988: PPUSH
19989: CALL_OW 88
// secondAttack = 1 ;
19993: LD_ADDR_EXP 34
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// end ;
20001: PPOPN 1
20003: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
20004: LD_EXP 39
20008: PUSH
20009: LD_INT 1
20011: EQUAL
20012: PUSH
20013: LD_OWVAR 1
20017: PUSH
20018: LD_INT 37800
20020: GREATEREQUAL
20021: AND
20022: IFFALSE 20095
20024: GO 20026
20026: DISABLE
// begin DialogueOn ;
20027: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
20031: LD_EXP 23
20035: PPUSH
20036: LD_STRING D4-Pow-1
20038: PPUSH
20039: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
20043: LD_EXP 1
20047: PPUSH
20048: LD_STRING D4-JMM-1
20050: PPUSH
20051: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
20055: LD_EXP 23
20059: PPUSH
20060: LD_STRING D4-Pow-2
20062: PPUSH
20063: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
20067: LD_EXP 1
20071: PPUSH
20072: LD_STRING D4-JMM-2
20074: PPUSH
20075: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
20079: LD_EXP 23
20083: PPUSH
20084: LD_STRING D4-Pow-3
20086: PPUSH
20087: CALL_OW 94
// DialogueOff ;
20091: CALL_OW 7
// end ;
20095: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
20096: LD_EXP 39
20100: PUSH
20101: LD_INT 1
20103: EQUAL
20104: PUSH
20105: LD_OWVAR 1
20109: PUSH
20110: LD_INT 50400
20112: GREATEREQUAL
20113: AND
20114: IFFALSE 20139
20116: GO 20118
20118: DISABLE
// begin DialogueOn ;
20119: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
20123: LD_EXP 23
20127: PPUSH
20128: LD_STRING D4a-Pow-1
20130: PPUSH
20131: CALL_OW 94
// DialogueOff ;
20135: CALL_OW 7
// end ;
20139: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
20140: LD_EXP 39
20144: PUSH
20145: LD_INT 1
20147: EQUAL
20148: PUSH
20149: LD_OWVAR 1
20153: PUSH
20154: LD_INT 73500
20156: GREATEREQUAL
20157: AND
20158: IFFALSE 20179
20160: GO 20162
20162: DISABLE
// begin PrepareSikorsky ;
20163: CALL 5871 0 0
// SikorskyArrive = 1 ;
20167: LD_ADDR_EXP 18
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// PrepareSikorskyArmy ;
20175: CALL 6051 0 0
// end ;
20179: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
20180: LD_EXP 17
20184: PPUSH
20185: LD_INT 5
20187: PPUSH
20188: CALL_OW 308
20192: IFFALSE 20384
20194: GO 20196
20196: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
20197: LD_EXP 17
20201: PPUSH
20202: CALL_OW 87
// DialogueOn ;
20206: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20210: LD_EXP 16
20214: PPUSH
20215: LD_STRING D5-Sik-1
20217: PPUSH
20218: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20222: LD_EXP 1
20226: PPUSH
20227: LD_STRING D5-JMM-1a
20229: PPUSH
20230: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20234: LD_EXP 16
20238: PPUSH
20239: LD_STRING D5-Sik-2
20241: PPUSH
20242: CALL_OW 88
// case query ( QSikorski ) of 1 :
20246: LD_STRING QSikorski
20248: PPUSH
20249: CALL_OW 97
20253: PUSH
20254: LD_INT 1
20256: DOUBLE
20257: EQUAL
20258: IFTRUE 20262
20260: GO 20285
20262: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20263: LD_EXP 16
20267: PPUSH
20268: LD_STRING D5a-Sik-1
20270: PPUSH
20271: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20275: LD_ADDR_EXP 19
20279: PUSH
20280: LD_INT 2100
20282: ST_TO_ADDR
// end ; 2 :
20283: GO 20372
20285: LD_INT 2
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20316
20293: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20294: LD_EXP 16
20298: PPUSH
20299: LD_STRING D5b-Sik-1
20301: PPUSH
20302: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20306: LD_ADDR_EXP 19
20310: PUSH
20311: LD_INT 10500
20313: ST_TO_ADDR
// end ; 3 :
20314: GO 20372
20316: LD_INT 3
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20371
20324: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20325: LD_EXP 16
20329: PPUSH
20330: LD_STRING D5c-Sik-1
20332: PPUSH
20333: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20337: LD_EXP 1
20341: PPUSH
20342: LD_STRING D5c-JMM-1
20344: PPUSH
20345: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20349: LD_EXP 16
20353: PPUSH
20354: LD_STRING D5c-Sik-2
20356: PPUSH
20357: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20361: LD_ADDR_EXP 19
20365: PUSH
20366: LD_INT 10500
20368: ST_TO_ADDR
// end ; end ;
20369: GO 20372
20371: POP
// DialogueOff ;
20372: CALL_OW 7
// timerStatus = 1 ;
20376: LD_ADDR_EXP 35
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// end ;
20384: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20385: LD_EXP 19
20389: PUSH
20390: LD_INT 35
20392: LESS
20393: IFFALSE 20441
20395: GO 20397
20397: DISABLE
// begin timerStatus = 0 ;
20398: LD_ADDR_EXP 35
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// DialogueOn ;
20406: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20410: LD_EXP 16
20414: PPUSH
20415: LD_STRING D6-Sik-1
20417: PPUSH
20418: CALL_OW 88
// DialogueOff ;
20422: CALL_OW 7
// SikorskyAI = 1 ;
20426: LD_ADDR_EXP 20
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20434: LD_STRING M2
20436: PPUSH
20437: CALL_OW 337
// end ;
20441: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20442: LD_EXP 17
20446: PPUSH
20447: LD_INT 18
20449: PPUSH
20450: CALL_OW 308
20454: IFFALSE 20564
20456: GO 20458
20458: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20459: LD_EXP 16
20463: PPUSH
20464: LD_STRING D7-Sik-1
20466: PPUSH
20467: CALL_OW 88
// wait ( 0 0$10 ) ;
20471: LD_INT 350
20473: PPUSH
20474: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20478: LD_EXP 1
20482: PPUSH
20483: LD_INT 24
20485: PPUSH
20486: CALL_OW 308
20490: PUSH
20491: LD_EXP 1
20495: PPUSH
20496: CALL 17107 0 1
20500: PUSH
20501: LD_EXP 1
20505: PPUSH
20506: CALL 17107 0 1
20510: PPUSH
20511: LD_INT 24
20513: PPUSH
20514: CALL_OW 308
20518: AND
20519: OR
20520: IFFALSE 20544
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20522: LD_EXP 16
20526: PPUSH
20527: LD_STRING D7a-Sik-1
20529: PPUSH
20530: CALL_OW 88
// SikorskyStatus = 1 ;
20534: LD_ADDR_EXP 21
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// end else
20542: GO 20564
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20544: LD_EXP 16
20548: PPUSH
20549: LD_STRING D7b-Sik-1
20551: PPUSH
20552: CALL_OW 88
// SikorskyStatus = 2 ;
20556: LD_ADDR_EXP 21
20560: PUSH
20561: LD_INT 2
20563: ST_TO_ADDR
// end ; end ; end_of_file
20564: END
// on BuildingComplete ( building ) do var tmp , un ;
20565: LD_INT 0
20567: PPUSH
20568: PPUSH
// begin if GetSide ( building ) = 3 then
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 255
20578: PUSH
20579: LD_INT 3
20581: EQUAL
20582: IFFALSE 21119
// begin if GetBType ( building ) = b_depot then
20584: LD_VAR 0 1
20588: PPUSH
20589: CALL_OW 266
20593: PUSH
20594: LD_INT 0
20596: EQUAL
20597: IFFALSE 20665
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 274
20608: PPUSH
20609: LD_INT 1
20611: PPUSH
20612: LD_INT 5000
20614: PPUSH
20615: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 274
20628: PPUSH
20629: LD_INT 2
20631: PPUSH
20632: LD_INT 5000
20634: PPUSH
20635: CALL_OW 277
// SetBName ( building , konev ) ;
20639: LD_VAR 0 1
20643: PPUSH
20644: LD_STRING konev
20646: PPUSH
20647: CALL_OW 500
// ruDepot = building ;
20651: LD_ADDR_EXP 28
20655: PUSH
20656: LD_VAR 0 1
20660: ST_TO_ADDR
// BuildRussianBase ;
20661: CALL 7984 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL_OW 266
20674: PUSH
20675: LD_INT 0
20677: EQUAL
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: CALL_OW 266
20688: PUSH
20689: LD_INT 2
20691: EQUAL
20692: OR
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 266
20703: PUSH
20704: LD_INT 4
20706: EQUAL
20707: OR
20708: IFFALSE 20719
// ComUpgrade ( building ) ;
20710: LD_VAR 0 1
20714: PPUSH
20715: CALL_OW 146
// if GetBType ( building ) = b_lab then
20719: LD_VAR 0 1
20723: PPUSH
20724: CALL_OW 266
20728: PUSH
20729: LD_INT 6
20731: EQUAL
20732: IFFALSE 20783
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20734: LD_VAR 0 1
20738: PPUSH
20739: LD_INT 10
20741: PPUSH
20742: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20746: LD_VAR 0 1
20750: PPUSH
20751: LD_INT 12
20753: PPUSH
20754: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20758: LD_INT 3
20760: PPUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: LD_INT 3
20768: PPUSH
20769: CALL 8528 0 3
// ruLab = building ;
20773: LD_ADDR_EXP 29
20777: PUSH
20778: LD_VAR 0 1
20782: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 266
20792: PUSH
20793: LD_INT 32
20795: EQUAL
20796: IFFALSE 20914
// begin uc_side = 3 ;
20798: LD_ADDR_OWVAR 20
20802: PUSH
20803: LD_INT 3
20805: ST_TO_ADDR
// uc_nation = 3 ;
20806: LD_ADDR_OWVAR 21
20810: PUSH
20811: LD_INT 3
20813: ST_TO_ADDR
// hc_gallery =  ;
20814: LD_ADDR_OWVAR 33
20818: PUSH
20819: LD_STRING 
20821: ST_TO_ADDR
// hc_name =  ;
20822: LD_ADDR_OWVAR 26
20826: PUSH
20827: LD_STRING 
20829: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20830: LD_INT 0
20832: PPUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_EXP 25
20840: PPUSH
20841: LD_EXP 26
20845: PPUSH
20846: CALL_OW 12
20850: PPUSH
20851: CALL_OW 380
// un = CreateHuman ;
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: CALL_OW 44
20864: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20865: LD_VAR 0 3
20869: PPUSH
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20879: LD_VAR 0 1
20883: PPUSH
20884: LD_INT 43
20886: PUSH
20887: LD_INT 44
20889: PUSH
20890: LD_INT 46
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PPUSH
20901: LD_INT 3
20903: PPUSH
20904: CALL_OW 12
20908: ARRAY
20909: PPUSH
20910: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20914: LD_VAR 0 1
20918: PPUSH
20919: CALL_OW 266
20923: PUSH
20924: LD_INT 33
20926: EQUAL
20927: IFFALSE 20964
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20929: LD_VAR 0 1
20933: PPUSH
20934: LD_INT 43
20936: PUSH
20937: LD_INT 44
20939: PUSH
20940: LD_INT 46
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: PPUSH
20951: LD_INT 3
20953: PPUSH
20954: CALL_OW 12
20958: ARRAY
20959: PPUSH
20960: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20964: LD_VAR 0 1
20968: PPUSH
20969: CALL_OW 266
20973: PUSH
20974: LD_INT 32
20976: EQUAL
20977: IFFALSE 21014
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20979: LD_VAR 0 1
20983: PPUSH
20984: LD_INT 43
20986: PUSH
20987: LD_INT 44
20989: PUSH
20990: LD_INT 46
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: PPUSH
21001: LD_INT 3
21003: PPUSH
21004: CALL_OW 12
21008: ARRAY
21009: PPUSH
21010: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21014: LD_VAR 0 1
21018: PPUSH
21019: CALL_OW 266
21023: PUSH
21024: LD_INT 24
21026: EQUAL
21027: IFFALSE 21037
// russianAI = 1 ;
21029: LD_ADDR_EXP 27
21033: PUSH
21034: LD_INT 1
21036: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
21037: LD_EXP 31
21041: PUSH
21042: LD_INT 0
21044: GREATER
21045: IFFALSE 21119
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21047: LD_ADDR_EXP 31
21051: PUSH
21052: LD_EXP 31
21056: PPUSH
21057: LD_INT 1
21059: PPUSH
21060: CALL_OW 3
21064: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21065: LD_ADDR_EXP 31
21069: PUSH
21070: LD_EXP 31
21074: PPUSH
21075: LD_INT 1
21077: PPUSH
21078: CALL_OW 3
21082: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21083: LD_ADDR_EXP 31
21087: PUSH
21088: LD_EXP 31
21092: PPUSH
21093: LD_INT 1
21095: PPUSH
21096: CALL_OW 3
21100: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21101: LD_ADDR_EXP 31
21105: PUSH
21106: LD_EXP 31
21110: PPUSH
21111: LD_INT 1
21113: PPUSH
21114: CALL_OW 3
21118: ST_TO_ADDR
// end ; end ; end ;
21119: PPOPN 3
21121: END
// on UpgradeComplete ( building ) do var i ;
21122: LD_INT 0
21124: PPUSH
// begin if GetSide ( building ) = 3 then
21125: LD_VAR 0 1
21129: PPUSH
21130: CALL_OW 255
21134: PUSH
21135: LD_INT 3
21137: EQUAL
21138: IFFALSE 21319
// begin if GetBType ( building ) = b_factory then
21140: LD_VAR 0 1
21144: PPUSH
21145: CALL_OW 266
21149: PUSH
21150: LD_INT 3
21152: EQUAL
21153: IFFALSE 21220
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
21155: LD_ADDR_VAR 0 2
21159: PUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 25
21172: PUSH
21173: LD_INT 3
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: PUSH
21189: FOR_IN
21190: IFFALSE 21208
// ComEnterUnit ( i , building ) ;
21192: LD_VAR 0 2
21196: PPUSH
21197: LD_VAR 0 1
21201: PPUSH
21202: CALL_OW 120
21206: GO 21189
21208: POP
21209: POP
// ruFab = building ;
21210: LD_ADDR_EXP 30
21214: PUSH
21215: LD_VAR 0 1
21219: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21220: LD_VAR 0 1
21224: PPUSH
21225: CALL_OW 266
21229: PUSH
21230: LD_INT 8
21232: EQUAL
21233: IFFALSE 21290
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21235: LD_ADDR_VAR 0 2
21239: PUSH
21240: LD_INT 22
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 25
21252: PUSH
21253: LD_INT 4
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PPUSH
21264: CALL_OW 69
21268: PUSH
21269: FOR_IN
21270: IFFALSE 21288
// ComEnterUnit ( i , building ) ;
21272: LD_VAR 0 2
21276: PPUSH
21277: LD_VAR 0 1
21281: PPUSH
21282: CALL_OW 120
21286: GO 21269
21288: POP
21289: POP
// if GetBType ( building ) = b_warehouse then
21290: LD_VAR 0 1
21294: PPUSH
21295: CALL_OW 266
21299: PUSH
21300: LD_INT 1
21302: EQUAL
21303: IFFALSE 21319
// begin ComEnterUnit ( Borodin , building ) ;
21305: LD_EXP 24
21309: PPUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL_OW 120
// end ; end ; end ;
21319: PPOPN 2
21321: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 247
21331: PUSH
21332: LD_INT 2
21334: EQUAL
21335: PUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 263
21345: PUSH
21346: LD_INT 3
21348: EQUAL
21349: AND
21350: PUSH
21351: LD_EXP 41
21355: PUSH
21356: LD_INT 0
21358: EQUAL
21359: AND
21360: IFFALSE 21478
// begin varEvent1 = 1 ;
21362: LD_ADDR_EXP 41
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21370: LD_VAR 0 1
21374: PPUSH
21375: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21379: LD_INT 22
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 21
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 25
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 25
21414: PUSH
21415: LD_INT 2
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 25
21424: PUSH
21425: LD_INT 3
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 25
21434: PUSH
21435: LD_INT 4
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: PPUSH
21454: CALL_OW 69
21458: PUSH
21459: LD_EXP 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: DIFF
21467: PPUSH
21468: LD_STRING DC-Sol1-1
21470: PPUSH
21471: LD_STRING DC-FSol1-1
21473: PPUSH
21474: CALL 7358 0 3
// end ; end ;
21478: PPOPN 1
21480: END
// on UnitDestroyed ( unit ) do var i ;
21481: LD_INT 0
21483: PPUSH
// begin if unit = Joan then
21484: LD_VAR 0 1
21488: PUSH
21489: LD_EXP 15
21493: EQUAL
21494: IFFALSE 21503
// DeleteCharacters ( Joan ) ;
21496: LD_STRING Joan
21498: PPUSH
21499: CALL_OW 40
// if GetSide ( unit ) = 3 then
21503: LD_VAR 0 1
21507: PPUSH
21508: CALL_OW 255
21512: PUSH
21513: LD_INT 3
21515: EQUAL
21516: IFFALSE 22286
// begin if GetType ( unit ) = unit_building then
21518: LD_VAR 0 1
21522: PPUSH
21523: CALL_OW 247
21527: PUSH
21528: LD_INT 3
21530: EQUAL
21531: IFFALSE 22223
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21533: LD_VAR 0 1
21537: PPUSH
21538: CALL_OW 266
21542: PUSH
21543: LD_INT 31
21545: EQUAL
21546: PUSH
21547: LD_VAR 0 1
21551: PPUSH
21552: CALL_OW 266
21556: PUSH
21557: LD_INT 32
21559: EQUAL
21560: OR
21561: PUSH
21562: LD_VAR 0 1
21566: PPUSH
21567: CALL_OW 266
21571: PUSH
21572: LD_INT 36
21574: EQUAL
21575: OR
21576: PUSH
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 266
21586: PUSH
21587: LD_INT 0
21589: EQUAL
21590: OR
21591: PUSH
21592: LD_VAR 0 1
21596: PPUSH
21597: CALL_OW 266
21601: PUSH
21602: LD_INT 24
21604: EQUAL
21605: OR
21606: PUSH
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL_OW 266
21616: PUSH
21617: LD_INT 17
21619: EQUAL
21620: OR
21621: PUSH
21622: LD_VAR 0 1
21626: PPUSH
21627: CALL_OW 266
21631: PUSH
21632: LD_INT 25
21634: EQUAL
21635: OR
21636: PUSH
21637: LD_VAR 0 1
21641: PPUSH
21642: CALL_OW 266
21646: PUSH
21647: LD_INT 19
21649: EQUAL
21650: OR
21651: PUSH
21652: LD_VAR 0 1
21656: PPUSH
21657: CALL_OW 266
21661: PUSH
21662: LD_INT 20
21664: EQUAL
21665: OR
21666: PUSH
21667: LD_VAR 0 1
21671: PPUSH
21672: CALL_OW 266
21676: PUSH
21677: LD_INT 18
21679: EQUAL
21680: OR
21681: PUSH
21682: LD_VAR 0 1
21686: PPUSH
21687: CALL_OW 266
21691: PUSH
21692: LD_INT 21
21694: EQUAL
21695: OR
21696: PUSH
21697: LD_VAR 0 1
21701: PPUSH
21702: CALL_OW 266
21706: PUSH
21707: LD_INT 23
21709: EQUAL
21710: OR
21711: PUSH
21712: LD_VAR 0 1
21716: PPUSH
21717: CALL_OW 266
21721: PUSH
21722: LD_INT 16
21724: EQUAL
21725: OR
21726: PUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 266
21736: PUSH
21737: LD_INT 6
21739: EQUAL
21740: OR
21741: PUSH
21742: LD_VAR 0 1
21746: PPUSH
21747: CALL_OW 266
21751: PUSH
21752: LD_INT 29
21754: EQUAL
21755: OR
21756: PUSH
21757: LD_VAR 0 1
21761: PPUSH
21762: CALL_OW 266
21766: PUSH
21767: LD_INT 26
21769: EQUAL
21770: OR
21771: PUSH
21772: LD_VAR 0 1
21776: PPUSH
21777: CALL_OW 266
21781: PUSH
21782: LD_INT 30
21784: EQUAL
21785: OR
21786: PUSH
21787: LD_VAR 0 1
21791: PPUSH
21792: CALL_OW 266
21796: PUSH
21797: LD_INT 28
21799: EQUAL
21800: OR
21801: PUSH
21802: LD_VAR 0 1
21806: PPUSH
21807: CALL_OW 266
21811: PUSH
21812: LD_INT 27
21814: EQUAL
21815: OR
21816: PUSH
21817: LD_VAR 0 1
21821: PPUSH
21822: CALL_OW 266
21826: PUSH
21827: LD_INT 33
21829: EQUAL
21830: OR
21831: PUSH
21832: LD_VAR 0 1
21836: PPUSH
21837: CALL_OW 266
21841: PUSH
21842: LD_INT 2
21844: EQUAL
21845: OR
21846: PUSH
21847: LD_VAR 0 1
21851: PPUSH
21852: CALL_OW 266
21856: PUSH
21857: LD_INT 4
21859: EQUAL
21860: OR
21861: IFFALSE 21947
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21863: LD_ADDR_EXP 31
21867: PUSH
21868: LD_EXP 31
21872: PUSH
21873: LD_VAR 0 1
21877: PPUSH
21878: CALL_OW 266
21882: ADD
21883: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21884: LD_ADDR_EXP 31
21888: PUSH
21889: LD_EXP 31
21893: PUSH
21894: LD_VAR 0 1
21898: PPUSH
21899: CALL_OW 250
21903: ADD
21904: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21905: LD_ADDR_EXP 31
21909: PUSH
21910: LD_EXP 31
21914: PUSH
21915: LD_VAR 0 1
21919: PPUSH
21920: CALL_OW 251
21924: ADD
21925: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21926: LD_ADDR_EXP 31
21930: PUSH
21931: LD_EXP 31
21935: PUSH
21936: LD_VAR 0 1
21940: PPUSH
21941: CALL_OW 254
21945: ADD
21946: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21947: LD_VAR 0 1
21951: PPUSH
21952: CALL_OW 266
21956: PUSH
21957: LD_INT 1
21959: EQUAL
21960: IFFALSE 22039
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21962: LD_ADDR_EXP 31
21966: PUSH
21967: LD_EXP 31
21971: PUSH
21972: LD_INT 0
21974: ADD
21975: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21976: LD_ADDR_EXP 31
21980: PUSH
21981: LD_EXP 31
21985: PUSH
21986: LD_VAR 0 1
21990: PPUSH
21991: CALL_OW 250
21995: ADD
21996: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21997: LD_ADDR_EXP 31
22001: PUSH
22002: LD_EXP 31
22006: PUSH
22007: LD_VAR 0 1
22011: PPUSH
22012: CALL_OW 251
22016: ADD
22017: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22018: LD_ADDR_EXP 31
22022: PUSH
22023: LD_EXP 31
22027: PUSH
22028: LD_VAR 0 1
22032: PPUSH
22033: CALL_OW 254
22037: ADD
22038: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
22039: LD_VAR 0 1
22043: PPUSH
22044: CALL_OW 266
22048: PUSH
22049: LD_INT 3
22051: EQUAL
22052: IFFALSE 22131
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
22054: LD_ADDR_EXP 31
22058: PUSH
22059: LD_EXP 31
22063: PUSH
22064: LD_INT 2
22066: ADD
22067: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22068: LD_ADDR_EXP 31
22072: PUSH
22073: LD_EXP 31
22077: PUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: CALL_OW 250
22087: ADD
22088: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22089: LD_ADDR_EXP 31
22093: PUSH
22094: LD_EXP 31
22098: PUSH
22099: LD_VAR 0 1
22103: PPUSH
22104: CALL_OW 251
22108: ADD
22109: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22110: LD_ADDR_EXP 31
22114: PUSH
22115: LD_EXP 31
22119: PUSH
22120: LD_VAR 0 1
22124: PPUSH
22125: CALL_OW 254
22129: ADD
22130: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
22131: LD_VAR 0 1
22135: PPUSH
22136: CALL_OW 266
22140: PUSH
22141: LD_INT 5
22143: EQUAL
22144: IFFALSE 22223
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
22146: LD_ADDR_EXP 31
22150: PUSH
22151: LD_EXP 31
22155: PUSH
22156: LD_INT 4
22158: ADD
22159: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22160: LD_ADDR_EXP 31
22164: PUSH
22165: LD_EXP 31
22169: PUSH
22170: LD_VAR 0 1
22174: PPUSH
22175: CALL_OW 250
22179: ADD
22180: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22181: LD_ADDR_EXP 31
22185: PUSH
22186: LD_EXP 31
22190: PUSH
22191: LD_VAR 0 1
22195: PPUSH
22196: CALL_OW 251
22200: ADD
22201: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22202: LD_ADDR_EXP 31
22206: PUSH
22207: LD_EXP 31
22211: PUSH
22212: LD_VAR 0 1
22216: PPUSH
22217: CALL_OW 254
22221: ADD
22222: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22223: LD_VAR 0 1
22227: PPUSH
22228: CALL_OW 247
22232: PUSH
22233: LD_INT 1
22235: EQUAL
22236: IFFALSE 22286
// begin for i in defenders_list do
22238: LD_ADDR_VAR 0 2
22242: PUSH
22243: LD_EXP 32
22247: PUSH
22248: FOR_IN
22249: IFFALSE 22284
// if i = unit then
22251: LD_VAR 0 2
22255: PUSH
22256: LD_VAR 0 1
22260: EQUAL
22261: IFFALSE 22282
// defenders_list = defenders_list diff [ unit ] ;
22263: LD_ADDR_EXP 32
22267: PUSH
22268: LD_EXP 32
22272: PUSH
22273: LD_VAR 0 1
22277: PUSH
22278: EMPTY
22279: LIST
22280: DIFF
22281: ST_TO_ADDR
22282: GO 22248
22284: POP
22285: POP
// end ; end ; end ;
22286: PPOPN 2
22288: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22289: LD_VAR 0 1
22293: PPUSH
22294: CALL 41675 0 1
// end ; end_of_file
22298: PPOPN 1
22300: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22301: GO 22303
22303: DISABLE
22304: LD_INT 0
22306: PPUSH
// begin enemyWayX = [ ] ;
22307: LD_ADDR_EXP 46
22311: PUSH
22312: EMPTY
22313: ST_TO_ADDR
// enemyWayY = [ ] ;
22314: LD_ADDR_EXP 47
22318: PUSH
22319: EMPTY
22320: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22321: LD_ADDR_VAR 0 1
22325: PUSH
22326: LD_INT 1
22328: PPUSH
22329: LD_INT 3
22331: PPUSH
22332: CALL_OW 12
22336: ST_TO_ADDR
// if rnd = 1 then
22337: LD_VAR 0 1
22341: PUSH
22342: LD_INT 1
22344: EQUAL
22345: IFFALSE 22385
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22347: LD_ADDR_EXP 46
22351: PUSH
22352: LD_INT 73
22354: PUSH
22355: LD_INT 46
22357: PUSH
22358: LD_INT 29
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: LIST
22365: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22366: LD_ADDR_EXP 47
22370: PUSH
22371: LD_INT 71
22373: PUSH
22374: LD_INT 43
22376: PUSH
22377: LD_INT 29
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: LIST
22384: ST_TO_ADDR
// end ; if rnd = 2 then
22385: LD_VAR 0 1
22389: PUSH
22390: LD_INT 2
22392: EQUAL
22393: IFFALSE 22417
// begin enemyWayX = [ 64 ] ;
22395: LD_ADDR_EXP 46
22399: PUSH
22400: LD_INT 64
22402: PUSH
22403: EMPTY
22404: LIST
22405: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22406: LD_ADDR_EXP 47
22410: PUSH
22411: LD_INT 43
22413: PUSH
22414: EMPTY
22415: LIST
22416: ST_TO_ADDR
// end ; if rnd = 3 then
22417: LD_VAR 0 1
22421: PUSH
22422: LD_INT 3
22424: EQUAL
22425: IFFALSE 22449
// begin enemyWayX = [ 80 ] ;
22427: LD_ADDR_EXP 46
22431: PUSH
22432: LD_INT 80
22434: PUSH
22435: EMPTY
22436: LIST
22437: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22438: LD_ADDR_EXP 47
22442: PUSH
22443: LD_INT 28
22445: PUSH
22446: EMPTY
22447: LIST
22448: ST_TO_ADDR
// end ; enable ;
22449: ENABLE
// end ;
22450: PPOPN 1
22452: END
// every 0 0$1 do
22453: GO 22455
22455: DISABLE
// begin enable ;
22456: ENABLE
// if escapeAvalaible = 0 then
22457: LD_EXP 36
22461: PUSH
22462: LD_INT 0
22464: EQUAL
22465: IFFALSE 22477
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22467: LD_INT 3
22469: PPUSH
22470: LD_INT 6
22472: PPUSH
22473: CALL 8769 0 2
// if escapeAvalaible = 0 then
22477: LD_EXP 36
22481: PUSH
22482: LD_INT 0
22484: EQUAL
22485: IFFALSE 22497
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22487: LD_INT 1
22489: PPUSH
22490: LD_INT 24
22492: PPUSH
22493: CALL 9429 0 2
// if russianAI = 1 then
22497: LD_EXP 27
22501: PUSH
22502: LD_INT 1
22504: EQUAL
22505: IFFALSE 22575
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22507: LD_INT 3
22509: PPUSH
22510: LD_INT 7
22512: PPUSH
22513: LD_INT 6
22515: PPUSH
22516: LD_EXP 29
22520: PPUSH
22521: CALL 11871 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22525: LD_INT 3
22527: PPUSH
22528: LD_EXP 28
22532: PPUSH
22533: LD_INT 6
22535: PPUSH
22536: LD_EXP 31
22540: PPUSH
22541: CALL 11465 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22545: LD_INT 3
22547: PPUSH
22548: LD_INT 26
22550: PPUSH
22551: LD_EXP 46
22555: PPUSH
22556: LD_EXP 47
22560: PPUSH
22561: CALL 10329 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22565: LD_INT 3
22567: PPUSH
22568: LD_INT 1
22570: PPUSH
22571: CALL 12415 0 2
// end ; if SikorskyArrive = 1 then
22575: LD_EXP 18
22579: PUSH
22580: LD_INT 1
22582: EQUAL
22583: IFFALSE 22601
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22585: LD_INT 3
22587: PPUSH
22588: LD_INT 10
22590: PPUSH
22591: LD_INT 53
22593: PPUSH
22594: LD_INT 59
22596: PPUSH
22597: CALL 10126 0 4
// end ;
22601: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22602: LD_EXP 27
22606: PUSH
22607: LD_INT 1
22609: EQUAL
22610: IFFALSE 22886
22612: GO 22614
22614: DISABLE
22615: LD_INT 0
22617: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22618: LD_ADDR_VAR 0 1
22622: PUSH
22623: LD_INT 22
22625: PUSH
22626: LD_INT 3
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 21
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 30
22645: PUSH
22646: LD_INT 32
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 3
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: LD_INT 35
22661: PUSH
22662: LD_INT 43
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 35
22671: PUSH
22672: LD_INT 44
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 35
22681: PUSH
22682: LD_INT 46
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: PPUSH
22705: CALL_OW 69
22709: PUSH
22710: FOR_IN
22711: IFFALSE 22750
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22713: LD_VAR 0 1
22717: PPUSH
22718: LD_INT 43
22720: PUSH
22721: LD_INT 44
22723: PUSH
22724: LD_INT 46
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 1
22734: PPUSH
22735: LD_INT 3
22737: PPUSH
22738: CALL_OW 12
22742: ARRAY
22743: PPUSH
22744: CALL_OW 431
22748: GO 22710
22750: POP
22751: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22752: LD_ADDR_VAR 0 1
22756: PUSH
22757: LD_INT 22
22759: PUSH
22760: LD_INT 3
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 21
22769: PUSH
22770: LD_INT 3
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 30
22779: PUSH
22780: LD_INT 33
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 3
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: LD_INT 35
22795: PUSH
22796: LD_INT 43
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 35
22805: PUSH
22806: LD_INT 44
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 35
22815: PUSH
22816: LD_INT 46
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: PPUSH
22839: CALL_OW 69
22843: PUSH
22844: FOR_IN
22845: IFFALSE 22884
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22847: LD_VAR 0 1
22851: PPUSH
22852: LD_INT 43
22854: PUSH
22855: LD_INT 44
22857: PUSH
22858: LD_INT 46
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: PPUSH
22869: LD_INT 3
22871: PPUSH
22872: CALL_OW 12
22876: ARRAY
22877: PPUSH
22878: CALL_OW 431
22882: GO 22844
22884: POP
22885: POP
// end ;
22886: PPOPN 1
22888: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22889: LD_EXP 24
22893: PPUSH
22894: CALL_OW 310
22898: NOT
22899: PUSH
22900: LD_EXP 28
22904: PPUSH
22905: CALL_OW 302
22909: AND
22910: PUSH
22911: LD_EXP 28
22915: PPUSH
22916: CALL_OW 255
22920: PUSH
22921: LD_INT 3
22923: EQUAL
22924: AND
22925: IFFALSE 22945
22927: GO 22929
22929: DISABLE
// begin enable ;
22930: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22931: LD_EXP 24
22935: PPUSH
22936: LD_EXP 28
22940: PPUSH
22941: CALL_OW 120
// end ;
22945: END
// every 0 0$1 trigger SikorskyAI = 1 do
22946: LD_EXP 20
22950: PUSH
22951: LD_INT 1
22953: EQUAL
22954: IFFALSE 22989
22956: GO 22958
22958: DISABLE
// begin enable ;
22959: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22960: LD_INT 4
22962: PPUSH
22963: LD_INT 10
22965: PPUSH
22966: LD_INT 93
22968: PPUSH
22969: LD_INT 93
22971: PPUSH
22972: CALL 10126 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
22976: LD_INT 4
22978: PPUSH
22979: LD_INT 11
22981: PPUSH
22982: LD_INT 3
22984: PPUSH
22985: CALL 16627 0 3
// end ;
22989: END
// every 0 0$1 trigger SikorskyAI = 1 do
22990: LD_EXP 20
22994: PUSH
22995: LD_INT 1
22997: EQUAL
22998: IFFALSE 23010
23000: GO 23002
23002: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
23003: LD_INT 4
23005: PPUSH
23006: CALL 11137 0 1
23010: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
23011: LD_EXP 27
23015: PUSH
23016: LD_INT 1
23018: EQUAL
23019: PUSH
23020: LD_EXP 30
23024: PPUSH
23025: CALL_OW 302
23029: AND
23030: PUSH
23031: LD_EXP 30
23035: PPUSH
23036: CALL_OW 255
23040: PUSH
23041: LD_INT 3
23043: EQUAL
23044: AND
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_INT 3
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 21
23058: PUSH
23059: LD_INT 2
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 33
23068: PUSH
23069: LD_INT 3
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: PPUSH
23081: CALL_OW 69
23085: PUSH
23086: LD_INT 0
23088: EQUAL
23089: AND
23090: IFFALSE 23324
23092: GO 23094
23094: DISABLE
// begin enable ;
23095: ENABLE
// if Difficulty = 1 then
23096: LD_OWVAR 67
23100: PUSH
23101: LD_INT 1
23103: EQUAL
23104: IFFALSE 23172
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
23106: LD_INT 3
23108: PPUSH
23109: LD_EXP 30
23113: PPUSH
23114: LD_INT 5
23116: PPUSH
23117: LD_INT 8
23119: PPUSH
23120: CALL_OW 12
23124: PPUSH
23125: LD_INT 43
23127: PUSH
23128: LD_INT 43
23130: PUSH
23131: LD_INT 43
23133: PUSH
23134: LD_INT 43
23136: PUSH
23137: LD_INT 44
23139: PUSH
23140: LD_INT 44
23142: PUSH
23143: LD_INT 44
23145: PUSH
23146: LD_INT 46
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: PPUSH
23159: LD_INT 1
23161: PPUSH
23162: LD_INT 3
23164: PPUSH
23165: LD_INT 24
23167: PPUSH
23168: CALL 9972 0 7
// if Difficulty = 2 then
23172: LD_OWVAR 67
23176: PUSH
23177: LD_INT 2
23179: EQUAL
23180: IFFALSE 23248
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
23182: LD_INT 3
23184: PPUSH
23185: LD_EXP 30
23189: PPUSH
23190: LD_INT 6
23192: PPUSH
23193: LD_INT 8
23195: PPUSH
23196: CALL_OW 12
23200: PPUSH
23201: LD_INT 43
23203: PUSH
23204: LD_INT 43
23206: PUSH
23207: LD_INT 44
23209: PUSH
23210: LD_INT 44
23212: PUSH
23213: LD_INT 44
23215: PUSH
23216: LD_INT 44
23218: PUSH
23219: LD_INT 46
23221: PUSH
23222: LD_INT 46
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: PPUSH
23235: LD_INT 1
23237: PPUSH
23238: LD_INT 3
23240: PPUSH
23241: LD_INT 24
23243: PPUSH
23244: CALL 9972 0 7
// if Difficulty >= 3 then
23248: LD_OWVAR 67
23252: PUSH
23253: LD_INT 3
23255: GREATEREQUAL
23256: IFFALSE 23324
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23258: LD_INT 3
23260: PPUSH
23261: LD_EXP 30
23265: PPUSH
23266: LD_INT 7
23268: PPUSH
23269: LD_INT 8
23271: PPUSH
23272: CALL_OW 12
23276: PPUSH
23277: LD_INT 43
23279: PUSH
23280: LD_INT 43
23282: PUSH
23283: LD_INT 44
23285: PUSH
23286: LD_INT 44
23288: PUSH
23289: LD_INT 44
23291: PUSH
23292: LD_INT 46
23294: PUSH
23295: LD_INT 46
23297: PUSH
23298: LD_INT 46
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: PPUSH
23311: LD_INT 1
23313: PPUSH
23314: LD_INT 3
23316: PPUSH
23317: LD_INT 24
23319: PPUSH
23320: CALL 9972 0 7
// end ;
23324: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23325: LD_EXP 38
23329: PUSH
23330: LD_INT 1
23332: EQUAL
23333: IFFALSE 23415
23335: GO 23337
23337: DISABLE
23338: LD_INT 0
23340: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23341: LD_ADDR_VAR 0 1
23345: PUSH
23346: LD_INT 22
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 21
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 3
23368: PUSH
23369: LD_INT 24
23371: PUSH
23372: LD_INT 650
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: LIST
23387: PPUSH
23388: CALL_OW 69
23392: PUSH
23393: FOR_IN
23394: IFFALSE 23413
// ComMoveXY ( i , 51 , 12 ) ;
23396: LD_VAR 0 1
23400: PPUSH
23401: LD_INT 51
23403: PPUSH
23404: LD_INT 12
23406: PPUSH
23407: CALL_OW 111
23411: GO 23393
23413: POP
23414: POP
// end ; end_of_file
23415: PPOPN 1
23417: END
// every 1 1$20 trigger firstAttack = 1 do
23418: LD_EXP 33
23422: PUSH
23423: LD_INT 1
23425: EQUAL
23426: IFFALSE 23536
23428: GO 23430
23430: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23431: LD_INT 6
23433: PPUSH
23434: LD_INT 3
23436: PPUSH
23437: LD_INT 3
23439: PPUSH
23440: LD_INT 4
23442: PPUSH
23443: CALL_OW 12
23447: PUSH
23448: LD_INT 4
23450: PPUSH
23451: LD_INT 6
23453: PPUSH
23454: CALL_OW 12
23458: PUSH
23459: LD_INT 5
23461: PPUSH
23462: LD_INT 6
23464: PPUSH
23465: CALL_OW 12
23469: PUSH
23470: LD_INT 6
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: PUSH
23479: LD_OWVAR 67
23483: ARRAY
23484: PPUSH
23485: LD_INT 0
23487: PPUSH
23488: LD_INT 0
23490: PPUSH
23491: LD_INT 0
23493: PPUSH
23494: LD_INT 0
23496: PPUSH
23497: LD_EXP 25
23501: PPUSH
23502: LD_EXP 26
23506: PPUSH
23507: CALL_OW 12
23511: PPUSH
23512: LD_INT 16
23514: PPUSH
23515: LD_INT 7
23517: PPUSH
23518: LD_INT 1
23520: PPUSH
23521: LD_INT 1
23523: PPUSH
23524: LD_INT 3
23526: PPUSH
23527: CALL_OW 12
23531: PPUSH
23532: CALL 12645 0 12
23536: END
// every 1 1$40 trigger firstAttack = 1 do
23537: LD_EXP 33
23541: PUSH
23542: LD_INT 1
23544: EQUAL
23545: IFFALSE 23641
23547: GO 23549
23549: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23550: LD_INT 16
23552: PPUSH
23553: LD_INT 6
23555: PPUSH
23556: LD_INT 3
23558: PPUSH
23559: LD_INT 4
23561: PPUSH
23562: CALL_OW 12
23566: PUSH
23567: LD_INT 4
23569: PPUSH
23570: LD_INT 5
23572: PPUSH
23573: CALL_OW 12
23577: PUSH
23578: LD_INT 5
23580: PUSH
23581: LD_INT 6
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: PUSH
23590: LD_OWVAR 67
23594: ARRAY
23595: PPUSH
23596: LD_EXP 25
23600: PPUSH
23601: LD_EXP 26
23605: PPUSH
23606: CALL_OW 12
23610: PPUSH
23611: LD_INT 3
23613: PPUSH
23614: LD_INT 1
23616: PPUSH
23617: LD_INT 3
23619: PPUSH
23620: LD_INT 44
23622: PUSH
23623: LD_INT 46
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PPUSH
23630: EMPTY
23631: PPUSH
23632: EMPTY
23633: PPUSH
23634: LD_INT 1
23636: PPUSH
23637: CALL 14938 0 11
23641: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23642: LD_EXP 33
23646: PUSH
23647: LD_INT 1
23649: EQUAL
23650: PUSH
23651: LD_EXP 39
23655: PUSH
23656: LD_INT 0
23658: EQUAL
23659: AND
23660: IFFALSE 23770
23662: GO 23664
23664: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23665: LD_INT 6
23667: PPUSH
23668: LD_INT 3
23670: PPUSH
23671: LD_INT 4
23673: PPUSH
23674: LD_INT 5
23676: PPUSH
23677: CALL_OW 12
23681: PUSH
23682: LD_INT 5
23684: PPUSH
23685: LD_INT 6
23687: PPUSH
23688: CALL_OW 12
23692: PUSH
23693: LD_INT 5
23695: PPUSH
23696: LD_INT 6
23698: PPUSH
23699: CALL_OW 12
23703: PUSH
23704: LD_INT 6
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: PUSH
23713: LD_OWVAR 67
23717: ARRAY
23718: PPUSH
23719: LD_INT 0
23721: PPUSH
23722: LD_INT 0
23724: PPUSH
23725: LD_INT 0
23727: PPUSH
23728: LD_INT 0
23730: PPUSH
23731: LD_EXP 25
23735: PPUSH
23736: LD_EXP 26
23740: PPUSH
23741: CALL_OW 12
23745: PPUSH
23746: LD_INT 16
23748: PPUSH
23749: LD_INT 7
23751: PPUSH
23752: LD_INT 1
23754: PPUSH
23755: LD_INT 1
23757: PPUSH
23758: LD_INT 3
23760: PPUSH
23761: CALL_OW 12
23765: PPUSH
23766: CALL 12645 0 12
23770: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23771: LD_EXP 33
23775: PUSH
23776: LD_INT 1
23778: EQUAL
23779: PUSH
23780: LD_EXP 39
23784: PUSH
23785: LD_INT 0
23787: EQUAL
23788: AND
23789: IFFALSE 23889
23791: GO 23793
23793: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23794: LD_INT 16
23796: PPUSH
23797: LD_INT 6
23799: PPUSH
23800: LD_INT 4
23802: PPUSH
23803: LD_INT 5
23805: PPUSH
23806: CALL_OW 12
23810: PUSH
23811: LD_INT 6
23813: PPUSH
23814: LD_INT 7
23816: PPUSH
23817: CALL_OW 12
23821: PUSH
23822: LD_INT 7
23824: PUSH
23825: LD_INT 7
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: PUSH
23834: LD_OWVAR 67
23838: ARRAY
23839: PPUSH
23840: LD_EXP 25
23844: PPUSH
23845: LD_EXP 26
23849: PPUSH
23850: CALL_OW 12
23854: PPUSH
23855: LD_INT 3
23857: PPUSH
23858: LD_INT 1
23860: PPUSH
23861: LD_INT 3
23863: PPUSH
23864: LD_INT 43
23866: PUSH
23867: LD_INT 44
23869: PUSH
23870: LD_INT 46
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: PPUSH
23878: EMPTY
23879: PPUSH
23880: EMPTY
23881: PPUSH
23882: LD_INT 1
23884: PPUSH
23885: CALL 14938 0 11
23889: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23890: LD_EXP 33
23894: PUSH
23895: LD_INT 1
23897: EQUAL
23898: PUSH
23899: LD_EXP 39
23903: PUSH
23904: LD_INT 0
23906: EQUAL
23907: AND
23908: IFFALSE 24008
23910: GO 23912
23912: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23913: LD_INT 16
23915: PPUSH
23916: LD_INT 6
23918: PPUSH
23919: LD_INT 4
23921: PPUSH
23922: LD_INT 5
23924: PPUSH
23925: CALL_OW 12
23929: PUSH
23930: LD_INT 6
23932: PPUSH
23933: LD_INT 7
23935: PPUSH
23936: CALL_OW 12
23940: PUSH
23941: LD_INT 7
23943: PUSH
23944: LD_INT 8
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: PUSH
23953: LD_OWVAR 67
23957: ARRAY
23958: PPUSH
23959: LD_EXP 25
23963: PPUSH
23964: LD_EXP 26
23968: PPUSH
23969: CALL_OW 12
23973: PPUSH
23974: LD_INT 3
23976: PPUSH
23977: LD_INT 1
23979: PPUSH
23980: LD_INT 3
23982: PPUSH
23983: LD_INT 43
23985: PUSH
23986: LD_INT 44
23988: PUSH
23989: LD_INT 46
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: PPUSH
23997: EMPTY
23998: PPUSH
23999: EMPTY
24000: PPUSH
24001: LD_INT 1
24003: PPUSH
24004: CALL 14938 0 11
24008: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
24009: LD_EXP 33
24013: PUSH
24014: LD_INT 1
24016: EQUAL
24017: PUSH
24018: LD_EXP 39
24022: PUSH
24023: LD_INT 0
24025: EQUAL
24026: AND
24027: IFFALSE 24107
24029: GO 24031
24031: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24032: LD_INT 16
24034: PPUSH
24035: LD_INT 6
24037: PPUSH
24038: LD_INT 4
24040: PUSH
24041: LD_INT 6
24043: PUSH
24044: LD_INT 7
24046: PUSH
24047: LD_INT 8
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: PUSH
24056: LD_OWVAR 67
24060: ARRAY
24061: PPUSH
24062: LD_EXP 25
24066: PPUSH
24067: LD_EXP 26
24071: PPUSH
24072: CALL_OW 12
24076: PPUSH
24077: LD_INT 3
24079: PPUSH
24080: LD_INT 1
24082: PPUSH
24083: LD_INT 3
24085: PPUSH
24086: LD_INT 44
24088: PUSH
24089: LD_INT 46
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PPUSH
24096: EMPTY
24097: PPUSH
24098: EMPTY
24099: PPUSH
24100: LD_INT 1
24102: PPUSH
24103: CALL 14938 0 11
24107: END
// every 1 1$00 trigger secondAttack = 1 do
24108: LD_EXP 34
24112: PUSH
24113: LD_INT 1
24115: EQUAL
24116: IFFALSE 24202
24118: GO 24120
24120: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24121: LD_INT 6
24123: PPUSH
24124: LD_INT 3
24126: PPUSH
24127: LD_INT 3
24129: PUSH
24130: LD_INT 4
24132: PUSH
24133: LD_INT 5
24135: PUSH
24136: LD_INT 6
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: PUSH
24145: LD_OWVAR 67
24149: ARRAY
24150: PPUSH
24151: LD_INT 0
24153: PPUSH
24154: LD_INT 0
24156: PPUSH
24157: LD_INT 0
24159: PPUSH
24160: LD_INT 0
24162: PPUSH
24163: LD_EXP 25
24167: PPUSH
24168: LD_EXP 26
24172: PPUSH
24173: CALL_OW 12
24177: PPUSH
24178: LD_INT 16
24180: PPUSH
24181: LD_INT 7
24183: PPUSH
24184: LD_INT 1
24186: PPUSH
24187: LD_INT 1
24189: PPUSH
24190: LD_INT 3
24192: PPUSH
24193: CALL_OW 12
24197: PPUSH
24198: CALL 12645 0 12
24202: END
// every 1 1$00 trigger secondAttack = 1 do
24203: LD_EXP 34
24207: PUSH
24208: LD_INT 1
24210: EQUAL
24211: IFFALSE 24319
24213: GO 24215
24215: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
24216: LD_INT 16
24218: PPUSH
24219: LD_INT 6
24221: PPUSH
24222: LD_INT 5
24224: PPUSH
24225: LD_INT 6
24227: PPUSH
24228: CALL_OW 12
24232: PUSH
24233: LD_INT 6
24235: PPUSH
24236: LD_INT 9
24238: PPUSH
24239: CALL_OW 12
24243: PUSH
24244: LD_INT 7
24246: PPUSH
24247: LD_INT 9
24249: PPUSH
24250: CALL_OW 12
24254: PUSH
24255: LD_INT 9
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: PUSH
24264: LD_OWVAR 67
24268: ARRAY
24269: PPUSH
24270: LD_EXP 25
24274: PPUSH
24275: LD_EXP 26
24279: PPUSH
24280: CALL_OW 12
24284: PPUSH
24285: LD_INT 3
24287: PPUSH
24288: LD_INT 1
24290: PPUSH
24291: LD_INT 3
24293: PPUSH
24294: LD_INT 43
24296: PUSH
24297: LD_INT 44
24299: PUSH
24300: LD_INT 46
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: PPUSH
24308: EMPTY
24309: PPUSH
24310: EMPTY
24311: PPUSH
24312: LD_INT 1
24314: PPUSH
24315: CALL 14938 0 11
24319: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24320: LD_EXP 18
24324: PUSH
24325: LD_INT 0
24327: EQUAL
24328: IFFALSE 24410
24330: GO 24332
24332: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24333: LD_INT 6
24335: PPUSH
24336: LD_INT 3
24338: PPUSH
24339: LD_INT 3
24341: PUSH
24342: LD_INT 4
24344: PUSH
24345: LD_INT 5
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: LIST
24352: PUSH
24353: LD_OWVAR 67
24357: ARRAY
24358: PPUSH
24359: LD_INT 0
24361: PPUSH
24362: LD_INT 0
24364: PPUSH
24365: LD_INT 0
24367: PPUSH
24368: LD_INT 0
24370: PPUSH
24371: LD_EXP 25
24375: PPUSH
24376: LD_EXP 26
24380: PPUSH
24381: CALL_OW 12
24385: PPUSH
24386: LD_INT 16
24388: PPUSH
24389: LD_INT 7
24391: PPUSH
24392: LD_INT 1
24394: PPUSH
24395: LD_INT 1
24397: PPUSH
24398: LD_INT 3
24400: PPUSH
24401: CALL_OW 12
24405: PPUSH
24406: CALL 12645 0 12
24410: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24411: LD_EXP 18
24415: PUSH
24416: LD_INT 0
24418: EQUAL
24419: IFFALSE 24523
24421: GO 24423
24423: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24424: LD_INT 16
24426: PPUSH
24427: LD_INT 6
24429: PPUSH
24430: LD_INT 5
24432: PPUSH
24433: LD_INT 6
24435: PPUSH
24436: CALL_OW 12
24440: PUSH
24441: LD_INT 6
24443: PPUSH
24444: LD_INT 9
24446: PPUSH
24447: CALL_OW 12
24451: PUSH
24452: LD_INT 7
24454: PPUSH
24455: LD_INT 9
24457: PPUSH
24458: CALL_OW 12
24462: PUSH
24463: LD_INT 9
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: PUSH
24472: LD_OWVAR 67
24476: ARRAY
24477: PPUSH
24478: LD_EXP 25
24482: PPUSH
24483: LD_EXP 26
24487: PPUSH
24488: CALL_OW 12
24492: PPUSH
24493: LD_INT 3
24495: PPUSH
24496: LD_INT 1
24498: PPUSH
24499: LD_INT 3
24501: PPUSH
24502: LD_INT 44
24504: PUSH
24505: LD_INT 46
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PPUSH
24512: EMPTY
24513: PPUSH
24514: EMPTY
24515: PPUSH
24516: LD_INT 1
24518: PPUSH
24519: CALL 14938 0 11
24523: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24524: LD_EXP 18
24528: PUSH
24529: LD_INT 0
24531: EQUAL
24532: IFFALSE 24614
24534: GO 24536
24536: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24537: LD_INT 6
24539: PPUSH
24540: LD_INT 3
24542: PPUSH
24543: LD_INT 3
24545: PUSH
24546: LD_INT 4
24548: PUSH
24549: LD_INT 5
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: PUSH
24557: LD_OWVAR 67
24561: ARRAY
24562: PPUSH
24563: LD_INT 0
24565: PPUSH
24566: LD_INT 0
24568: PPUSH
24569: LD_INT 0
24571: PPUSH
24572: LD_INT 0
24574: PPUSH
24575: LD_EXP 25
24579: PPUSH
24580: LD_EXP 26
24584: PPUSH
24585: CALL_OW 12
24589: PPUSH
24590: LD_INT 16
24592: PPUSH
24593: LD_INT 7
24595: PPUSH
24596: LD_INT 1
24598: PPUSH
24599: LD_INT 1
24601: PPUSH
24602: LD_INT 3
24604: PPUSH
24605: CALL_OW 12
24609: PPUSH
24610: CALL 12645 0 12
24614: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24615: LD_EXP 18
24619: PUSH
24620: LD_INT 0
24622: EQUAL
24623: IFFALSE 24727
24625: GO 24627
24627: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24628: LD_INT 16
24630: PPUSH
24631: LD_INT 6
24633: PPUSH
24634: LD_INT 5
24636: PPUSH
24637: LD_INT 6
24639: PPUSH
24640: CALL_OW 12
24644: PUSH
24645: LD_INT 6
24647: PPUSH
24648: LD_INT 9
24650: PPUSH
24651: CALL_OW 12
24655: PUSH
24656: LD_INT 7
24658: PPUSH
24659: LD_INT 9
24661: PPUSH
24662: CALL_OW 12
24666: PUSH
24667: LD_INT 9
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: PUSH
24676: LD_OWVAR 67
24680: ARRAY
24681: PPUSH
24682: LD_EXP 25
24686: PPUSH
24687: LD_EXP 26
24691: PPUSH
24692: CALL_OW 12
24696: PPUSH
24697: LD_INT 3
24699: PPUSH
24700: LD_INT 1
24702: PPUSH
24703: LD_INT 3
24705: PPUSH
24706: LD_INT 44
24708: PUSH
24709: LD_INT 46
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PPUSH
24716: EMPTY
24717: PPUSH
24718: EMPTY
24719: PPUSH
24720: LD_INT 1
24722: PPUSH
24723: CALL 14938 0 11
24727: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24728: LD_EXP 18
24732: PUSH
24733: LD_INT 0
24735: EQUAL
24736: IFFALSE 24822
24738: GO 24740
24740: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24741: LD_INT 6
24743: PPUSH
24744: LD_INT 3
24746: PPUSH
24747: LD_INT 3
24749: PUSH
24750: LD_INT 4
24752: PUSH
24753: LD_INT 5
24755: PUSH
24756: LD_INT 6
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: PUSH
24765: LD_OWVAR 67
24769: ARRAY
24770: PPUSH
24771: LD_INT 0
24773: PPUSH
24774: LD_INT 0
24776: PPUSH
24777: LD_INT 0
24779: PPUSH
24780: LD_INT 0
24782: PPUSH
24783: LD_EXP 25
24787: PPUSH
24788: LD_EXP 26
24792: PPUSH
24793: CALL_OW 12
24797: PPUSH
24798: LD_INT 16
24800: PPUSH
24801: LD_INT 7
24803: PPUSH
24804: LD_INT 1
24806: PPUSH
24807: LD_INT 1
24809: PPUSH
24810: LD_INT 3
24812: PPUSH
24813: CALL_OW 12
24817: PPUSH
24818: CALL 12645 0 12
24822: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24823: LD_EXP 18
24827: PUSH
24828: LD_INT 0
24830: EQUAL
24831: IFFALSE 24911
24833: GO 24835
24835: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24836: LD_INT 16
24838: PPUSH
24839: LD_INT 6
24841: PPUSH
24842: LD_INT 7
24844: PUSH
24845: LD_INT 8
24847: PUSH
24848: LD_INT 9
24850: PUSH
24851: LD_INT 10
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: PUSH
24860: LD_OWVAR 67
24864: ARRAY
24865: PPUSH
24866: LD_EXP 25
24870: PPUSH
24871: LD_EXP 26
24875: PPUSH
24876: CALL_OW 12
24880: PPUSH
24881: LD_INT 3
24883: PPUSH
24884: LD_INT 1
24886: PPUSH
24887: LD_INT 3
24889: PPUSH
24890: LD_INT 44
24892: PUSH
24893: LD_INT 46
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PPUSH
24900: EMPTY
24901: PPUSH
24902: EMPTY
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: CALL 14938 0 11
24911: END
// every 0 0$1 trigger timerStatus = 1 do
24912: LD_EXP 35
24916: PUSH
24917: LD_INT 1
24919: EQUAL
24920: IFFALSE 24980
24922: GO 24924
24924: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24925: LD_INT 35
24927: PPUSH
24928: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24932: LD_ADDR_OWVAR 47
24936: PUSH
24937: LD_STRING #Am08-1
24939: PUSH
24940: LD_EXP 19
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24949: LD_ADDR_EXP 19
24953: PUSH
24954: LD_EXP 19
24958: PUSH
24959: LD_INT 35
24961: MINUS
24962: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
24963: LD_EXP 19
24967: PUSH
24968: LD_INT 0
24970: EQUAL
24971: IFFALSE 24925
// display_strings := [ ] ;
24973: LD_ADDR_OWVAR 47
24977: PUSH
24978: EMPTY
24979: ST_TO_ADDR
// end ; end_of_file
24980: END
// every 1 1$0 do
24981: GO 24983
24983: DISABLE
// begin if supply <= 13 and supply > 7 then
24984: LD_EXP 40
24988: PUSH
24989: LD_INT 13
24991: LESSEQUAL
24992: PUSH
24993: LD_EXP 40
24997: PUSH
24998: LD_INT 7
25000: GREATER
25001: AND
25002: IFFALSE 25025
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
25004: LD_INT 3
25006: PPUSH
25007: LD_INT 5
25009: PPUSH
25010: CALL_OW 12
25014: PPUSH
25015: LD_INT 5
25017: PPUSH
25018: LD_INT 1
25020: PPUSH
25021: CALL_OW 55
// if supply <= 7 and supply > 4 then
25025: LD_EXP 40
25029: PUSH
25030: LD_INT 7
25032: LESSEQUAL
25033: PUSH
25034: LD_EXP 40
25038: PUSH
25039: LD_INT 4
25041: GREATER
25042: AND
25043: IFFALSE 25066
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
25045: LD_INT 3
25047: PPUSH
25048: LD_INT 5
25050: PPUSH
25051: CALL_OW 12
25055: PPUSH
25056: LD_INT 20
25058: PPUSH
25059: LD_INT 1
25061: PPUSH
25062: CALL_OW 55
// if supply <= 4 and supply > 0 then
25066: LD_EXP 40
25070: PUSH
25071: LD_INT 4
25073: LESSEQUAL
25074: PUSH
25075: LD_EXP 40
25079: PUSH
25080: LD_INT 0
25082: GREATER
25083: AND
25084: IFFALSE 25107
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
25086: LD_INT 3
25088: PPUSH
25089: LD_INT 5
25091: PPUSH
25092: CALL_OW 12
25096: PPUSH
25097: LD_INT 21
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: CALL_OW 55
// if supply > 0 then
25107: LD_EXP 40
25111: PUSH
25112: LD_INT 0
25114: GREATER
25115: IFFALSE 25132
// begin supply = supply - 1 ;
25117: LD_ADDR_EXP 40
25121: PUSH
25122: LD_EXP 40
25126: PUSH
25127: LD_INT 1
25129: MINUS
25130: ST_TO_ADDR
// enable ;
25131: ENABLE
// end ; end ; end_of_file
25132: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
25133: LD_EXP 39
25137: PUSH
25138: LD_INT 1
25140: EQUAL
25141: PUSH
25142: LD_EXP 1
25146: PPUSH
25147: CALL_OW 301
25151: AND
25152: IFFALSE 25164
25154: GO 25156
25156: DISABLE
// YouLost ( JMM ) ;
25157: LD_STRING JMM
25159: PPUSH
25160: CALL_OW 104
25164: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
25165: LD_EXP 18
25169: PUSH
25170: LD_INT 1
25172: EQUAL
25173: PUSH
25174: LD_EXP 16
25178: PPUSH
25179: CALL_OW 301
25183: AND
25184: IFFALSE 25216
25186: GO 25188
25188: DISABLE
// begin DialogueOn ;
25189: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
25193: LD_EXP 23
25197: PPUSH
25198: LD_STRING D8a-Pow-1
25200: PPUSH
25201: CALL_OW 94
// DialogueOff ;
25205: CALL_OW 7
// YouLost ( Dismissed ) ;
25209: LD_STRING Dismissed
25211: PPUSH
25212: CALL_OW 104
// end ;
25216: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
25217: LD_INT 22
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: LD_INT 30
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 30
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: LIST
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PPUSH
25259: CALL_OW 69
25263: PUSH
25264: LD_INT 0
25266: EQUAL
25267: IFFALSE 25279
25269: GO 25271
25271: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25272: LD_STRING Destroyed
25274: PPUSH
25275: CALL_OW 104
25279: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25280: LD_EXP 24
25284: PPUSH
25285: CALL_OW 301
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_INT 3
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 21
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: PUSH
25319: LD_INT 7
25321: PUSH
25322: LD_INT 6
25324: PUSH
25325: LD_INT 5
25327: PUSH
25328: LD_INT 5
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: PUSH
25337: LD_OWVAR 67
25341: ARRAY
25342: LESS
25343: AND
25344: PUSH
25345: LD_EXP 1
25349: PPUSH
25350: CALL_OW 305
25354: AND
25355: IFFALSE 25911
25357: GO 25359
25359: DISABLE
25360: LD_INT 0
25362: PPUSH
25363: PPUSH
25364: PPUSH
// begin russianAI = 0 ;
25365: LD_ADDR_EXP 27
25369: PUSH
25370: LD_INT 0
25372: ST_TO_ADDR
// escapeAvalaible = 1 ;
25373: LD_ADDR_EXP 36
25377: PUSH
25378: LD_INT 1
25380: ST_TO_ADDR
// Video ( true ) ;
25381: LD_INT 1
25383: PPUSH
25384: CALL 82918 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25388: LD_INT 3
25390: PPUSH
25391: LD_INT 1
25393: PPUSH
25394: LD_INT 1
25396: PPUSH
25397: LD_INT 0
25399: PPUSH
25400: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25404: LD_INT 6
25406: PPUSH
25407: LD_INT 1
25409: PPUSH
25410: LD_INT 1
25412: PPUSH
25413: LD_INT 0
25415: PPUSH
25416: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25420: LD_INT 3
25422: PPUSH
25423: LD_INT 1
25425: PPUSH
25426: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25430: LD_INT 97
25432: PPUSH
25433: LD_INT 91
25435: PPUSH
25436: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25440: LD_INT 22
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 21
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PPUSH
25464: CALL_OW 69
25468: PPUSH
25469: CALL_OW 121
// wait ( 0 0$01 ) ;
25473: LD_INT 35
25475: PPUSH
25476: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25480: LD_INT 22
25482: PUSH
25483: LD_INT 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 21
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PPUSH
25504: CALL_OW 69
25508: PPUSH
25509: LD_INT 124
25511: PPUSH
25512: LD_INT 98
25514: PPUSH
25515: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25519: LD_INT 22
25521: PUSH
25522: LD_INT 6
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 21
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PPUSH
25543: CALL_OW 69
25547: PPUSH
25548: CALL_OW 121
// wait ( 0 0$01 ) ;
25552: LD_INT 35
25554: PPUSH
25555: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25559: LD_INT 22
25561: PUSH
25562: LD_INT 6
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 21
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PPUSH
25583: CALL_OW 69
25587: PPUSH
25588: LD_INT 124
25590: PPUSH
25591: LD_INT 98
25593: PPUSH
25594: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25598: LD_INT 22
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 21
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 3
25620: PUSH
25621: LD_INT 54
25623: PUSH
25624: EMPTY
25625: LIST
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: PPUSH
25636: CALL_OW 69
25640: PPUSH
25641: LD_INT 124
25643: PPUSH
25644: LD_INT 98
25646: PPUSH
25647: CALL_OW 114
// wait ( 0 0$4 ) ;
25651: LD_INT 140
25653: PPUSH
25654: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25658: LD_INT 124
25660: PPUSH
25661: LD_INT 98
25663: PPUSH
25664: CALL_OW 84
// if SikorskyStatus = 1 then
25668: LD_EXP 21
25672: PUSH
25673: LD_INT 1
25675: EQUAL
25676: IFFALSE 25690
// Say ( Sikorski , D9-Sik-1 ) ;
25678: LD_EXP 16
25682: PPUSH
25683: LD_STRING D9-Sik-1
25685: PPUSH
25686: CALL_OW 88
// if SikorskyStatus = 2 then
25690: LD_EXP 21
25694: PUSH
25695: LD_INT 2
25697: EQUAL
25698: IFFALSE 25719
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25700: LD_EXP 23
25704: PPUSH
25705: LD_STRING D8b-Pow-1
25707: PPUSH
25708: CALL_OW 94
// YouLost ( Dismissed ) ;
25712: LD_STRING Dismissed
25714: PPUSH
25715: CALL_OW 104
// end ; p := 0 0$0 ;
25719: LD_ADDR_VAR 0 3
25723: PUSH
25724: LD_INT 0
25726: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25727: LD_ADDR_VAR 0 2
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: LD_INT 22
25737: PUSH
25738: LD_INT 3
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 22
25747: PUSH
25748: LD_INT 6
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 21
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PPUSH
25774: CALL_OW 69
25778: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25779: LD_INT 35
25781: PPUSH
25782: CALL_OW 67
// p := p + 0 0$1 ;
25786: LD_ADDR_VAR 0 3
25790: PUSH
25791: LD_VAR 0 3
25795: PUSH
25796: LD_INT 35
25798: PLUS
25799: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25800: LD_VAR 0 2
25804: PPUSH
25805: LD_INT 22
25807: PPUSH
25808: CALL_OW 113
// for i in tmp do
25812: LD_ADDR_VAR 0 1
25816: PUSH
25817: LD_VAR 0 2
25821: PUSH
25822: FOR_IN
25823: IFFALSE 25850
// if IsInArea ( i , RussianEscape ) then
25825: LD_VAR 0 1
25829: PPUSH
25830: LD_INT 22
25832: PPUSH
25833: CALL_OW 308
25837: IFFALSE 25848
// RemoveUnit ( i ) ;
25839: LD_VAR 0 1
25843: PPUSH
25844: CALL_OW 64
25848: GO 25822
25850: POP
25851: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25852: LD_INT 23
25854: PUSH
25855: LD_INT 3
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 21
25864: PUSH
25865: LD_INT 1
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 24
25874: PUSH
25875: LD_INT 250
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: PPUSH
25887: CALL_OW 69
25891: PUSH
25892: LD_INT 0
25894: EQUAL
25895: PUSH
25896: LD_VAR 0 3
25900: PUSH
25901: LD_INT 245
25903: GREATEREQUAL
25904: OR
25905: IFFALSE 25779
// FinishMission ;
25907: CALL 25914 0 0
// end ;
25911: PPOPN 3
25913: END
// export function FinishMission ; var tmp ; begin
25914: LD_INT 0
25916: PPUSH
25917: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25918: LD_INT 22
25920: PUSH
25921: LD_INT 4
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PPUSH
25928: CALL_OW 69
25932: PUSH
25933: LD_INT 0
25935: EQUAL
25936: IFFALSE 25945
// SetAchievement ( ACH_BLITZKRIEG ) ;
25938: LD_STRING ACH_BLITZKRIEG
25940: PPUSH
25941: CALL_OW 543
// if tick <= 25 25$00 then
25945: LD_OWVAR 1
25949: PUSH
25950: LD_INT 52500
25952: LESSEQUAL
25953: IFFALSE 25969
// begin wait ( 3 ) ;
25955: LD_INT 3
25957: PPUSH
25958: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
25962: LD_STRING ACH_ASPEED_8
25964: PPUSH
25965: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
25969: LD_STRING med1
25971: PPUSH
25972: LD_INT 1
25974: PPUSH
25975: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
25979: LD_STRING med2
25981: PPUSH
25982: LD_INT 1
25984: PPUSH
25985: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
25989: LD_STRING perfect
25991: PPUSH
25992: LD_INT 1
25994: PPUSH
25995: CALL_OW 101
// if Difficulty >= 3 then
25999: LD_OWVAR 67
26003: PUSH
26004: LD_INT 3
26006: GREATEREQUAL
26007: IFFALSE 26019
// SetAchievementEX ( ACH_AMER , 8 ) ;
26009: LD_STRING ACH_AMER
26011: PPUSH
26012: LD_INT 8
26014: PPUSH
26015: CALL_OW 564
// GiveMedals ( Main ) ;
26019: LD_STRING Main
26021: PPUSH
26022: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
26026: LD_INT 22
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 23
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 21
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: LD_INT 25
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 25
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 25
26081: PUSH
26082: LD_INT 3
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 25
26091: PUSH
26092: LD_INT 4
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: PPUSH
26112: CALL_OW 69
26116: PPUSH
26117: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26121: LD_EXP 1
26125: PPUSH
26126: LD_EXP 43
26130: PUSH
26131: LD_STRING JMM
26133: STR
26134: PPUSH
26135: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26139: LD_EXP 2
26143: PPUSH
26144: LD_EXP 43
26148: PUSH
26149: LD_STRING Brown
26151: STR
26152: PPUSH
26153: CALL 8488 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26157: LD_EXP 3
26161: PPUSH
26162: LD_EXP 43
26166: PUSH
26167: LD_STRING Donaldson
26169: STR
26170: PPUSH
26171: CALL 8488 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26175: LD_EXP 4
26179: PPUSH
26180: LD_EXP 43
26184: PUSH
26185: LD_STRING Bobby
26187: STR
26188: PPUSH
26189: CALL 8488 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26193: LD_EXP 5
26197: PPUSH
26198: LD_EXP 43
26202: PUSH
26203: LD_STRING Cyrus
26205: STR
26206: PPUSH
26207: CALL 8488 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26211: LD_EXP 6
26215: PPUSH
26216: LD_EXP 43
26220: PUSH
26221: LD_STRING Lisa
26223: STR
26224: PPUSH
26225: CALL 8488 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26229: LD_EXP 7
26233: PPUSH
26234: LD_EXP 43
26238: PUSH
26239: LD_STRING Frank
26241: STR
26242: PPUSH
26243: CALL 8488 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26247: LD_EXP 8
26251: PPUSH
26252: LD_EXP 43
26256: PUSH
26257: LD_STRING Gladstone
26259: STR
26260: PPUSH
26261: CALL 8488 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26265: LD_EXP 9
26269: PPUSH
26270: LD_EXP 43
26274: PUSH
26275: LD_STRING Kikuchi
26277: STR
26278: PPUSH
26279: CALL 8488 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26283: LD_EXP 14
26287: PPUSH
26288: LD_EXP 43
26292: PUSH
26293: LD_STRING Denis
26295: STR
26296: PPUSH
26297: CALL 8488 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26301: LD_EXP 15
26305: PPUSH
26306: LD_EXP 43
26310: PUSH
26311: LD_STRING Joan
26313: STR
26314: PPUSH
26315: CALL 8488 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26319: LD_EXP 10
26323: PPUSH
26324: LD_EXP 43
26328: PUSH
26329: LD_STRING Khatam
26331: STR
26332: PPUSH
26333: CALL 8488 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26337: LD_EXP 13
26341: PPUSH
26342: LD_EXP 43
26346: PUSH
26347: LD_STRING Houten
26349: STR
26350: PPUSH
26351: CALL 8488 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26355: LD_INT 50
26357: PUSH
26358: EMPTY
26359: LIST
26360: PUSH
26361: LD_INT 22
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 21
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 25
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 25
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 25
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 25
26416: PUSH
26417: LD_INT 4
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: PPUSH
26437: CALL_OW 69
26441: PUSH
26442: LD_EXP 1
26446: PUSH
26447: LD_EXP 2
26451: PUSH
26452: LD_EXP 3
26456: PUSH
26457: LD_EXP 4
26461: PUSH
26462: LD_EXP 5
26466: PUSH
26467: LD_EXP 6
26471: PUSH
26472: LD_EXP 7
26476: PUSH
26477: LD_EXP 8
26481: PUSH
26482: LD_EXP 9
26486: PUSH
26487: LD_EXP 14
26491: PUSH
26492: LD_EXP 15
26496: PUSH
26497: LD_EXP 13
26501: PUSH
26502: LD_EXP 10
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: DIFF
26522: PPUSH
26523: LD_STRING 08_other_survivors
26525: PPUSH
26526: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26530: LD_INT 23
26532: PPUSH
26533: CALL 26546 0 1
// YouWin ;
26537: CALL_OW 103
// end ;
26541: LD_VAR 0 1
26545: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26546: LD_INT 0
26548: PPUSH
26549: PPUSH
26550: PPUSH
26551: PPUSH
// gammaBase = [ ] ;
26552: LD_ADDR_VAR 0 4
26556: PUSH
26557: EMPTY
26558: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26559: LD_ADDR_VAR 0 5
26563: PUSH
26564: LD_VAR 0 1
26568: PPUSH
26569: LD_INT 22
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 21
26581: PUSH
26582: LD_INT 3
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 50
26591: PUSH
26592: EMPTY
26593: LIST
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: LIST
26599: PPUSH
26600: CALL_OW 70
26604: ST_TO_ADDR
// for i in buildings do
26605: LD_ADDR_VAR 0 3
26609: PUSH
26610: LD_VAR 0 5
26614: PUSH
26615: FOR_IN
26616: IFFALSE 27053
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26618: LD_VAR 0 3
26622: PPUSH
26623: CALL_OW 266
26627: PUSH
26628: LD_INT 6
26630: PUSH
26631: LD_INT 7
26633: PUSH
26634: LD_INT 8
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: IN
26642: IFFALSE 26756
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26644: LD_ADDR_VAR 0 4
26648: PUSH
26649: LD_VAR 0 4
26653: PUSH
26654: LD_VAR 0 3
26658: PPUSH
26659: CALL_OW 266
26663: PUSH
26664: LD_VAR 0 3
26668: PPUSH
26669: CALL_OW 250
26673: PUSH
26674: LD_VAR 0 3
26678: PPUSH
26679: CALL_OW 251
26683: PUSH
26684: LD_VAR 0 3
26688: PPUSH
26689: CALL_OW 254
26693: PUSH
26694: LD_VAR 0 3
26698: PPUSH
26699: CALL_OW 267
26703: PUSH
26704: LD_VAR 0 3
26708: PPUSH
26709: CALL_OW 248
26713: PUSH
26714: LD_VAR 0 3
26718: PPUSH
26719: LD_INT 1
26721: PPUSH
26722: CALL_OW 268
26726: PUSH
26727: LD_VAR 0 3
26731: PPUSH
26732: LD_INT 2
26734: PPUSH
26735: CALL_OW 268
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: ADD
26753: ST_TO_ADDR
26754: GO 27051
// if GetBType ( i ) = b_bunker then
26756: LD_VAR 0 3
26760: PPUSH
26761: CALL_OW 266
26765: PUSH
26766: LD_INT 32
26768: EQUAL
26769: IFFALSE 26866
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26771: LD_ADDR_VAR 0 4
26775: PUSH
26776: LD_VAR 0 4
26780: PUSH
26781: LD_VAR 0 3
26785: PPUSH
26786: CALL_OW 266
26790: PUSH
26791: LD_VAR 0 3
26795: PPUSH
26796: CALL_OW 250
26800: PUSH
26801: LD_VAR 0 3
26805: PPUSH
26806: CALL_OW 251
26810: PUSH
26811: LD_VAR 0 3
26815: PPUSH
26816: CALL_OW 254
26820: PUSH
26821: LD_VAR 0 3
26825: PPUSH
26826: CALL_OW 267
26830: PUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: CALL_OW 248
26840: PUSH
26841: LD_VAR 0 3
26845: PPUSH
26846: CALL_OW 269
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: PUSH
26860: EMPTY
26861: LIST
26862: ADD
26863: ST_TO_ADDR
26864: GO 27051
// if GetBType ( i ) = b_factory then
26866: LD_VAR 0 3
26870: PPUSH
26871: CALL_OW 266
26875: PUSH
26876: LD_INT 3
26878: EQUAL
26879: IFFALSE 26969
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26881: LD_ADDR_VAR 0 4
26885: PUSH
26886: LD_VAR 0 4
26890: PPUSH
26891: LD_INT 1
26893: PPUSH
26894: LD_VAR 0 3
26898: PPUSH
26899: CALL_OW 266
26903: PUSH
26904: LD_VAR 0 3
26908: PPUSH
26909: CALL_OW 250
26913: PUSH
26914: LD_VAR 0 3
26918: PPUSH
26919: CALL_OW 251
26923: PUSH
26924: LD_VAR 0 3
26928: PPUSH
26929: CALL_OW 254
26933: PUSH
26934: LD_VAR 0 3
26938: PPUSH
26939: CALL_OW 267
26943: PUSH
26944: LD_VAR 0 3
26948: PPUSH
26949: CALL_OW 248
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: PPUSH
26962: CALL_OW 2
26966: ST_TO_ADDR
26967: GO 27051
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26969: LD_ADDR_VAR 0 4
26973: PUSH
26974: LD_VAR 0 4
26978: PUSH
26979: LD_VAR 0 3
26983: PPUSH
26984: CALL_OW 266
26988: PUSH
26989: LD_VAR 0 3
26993: PPUSH
26994: CALL_OW 250
26998: PUSH
26999: LD_VAR 0 3
27003: PPUSH
27004: CALL_OW 251
27008: PUSH
27009: LD_VAR 0 3
27013: PPUSH
27014: CALL_OW 254
27018: PUSH
27019: LD_VAR 0 3
27023: PPUSH
27024: CALL_OW 267
27028: PUSH
27029: LD_VAR 0 3
27033: PPUSH
27034: CALL_OW 248
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: PUSH
27047: EMPTY
27048: LIST
27049: ADD
27050: ST_TO_ADDR
// end ;
27051: GO 26615
27053: POP
27054: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
27055: LD_VAR 0 4
27059: PPUSH
27060: LD_STRING 08_GammaBase
27062: PPUSH
27063: CALL_OW 39
// end ; end_of_file
27067: LD_VAR 0 2
27071: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27072: LD_INT 0
27074: PPUSH
// ar_miner := 81 ;
27075: LD_ADDR_EXP 55
27079: PUSH
27080: LD_INT 81
27082: ST_TO_ADDR
// ar_crane := 88 ;
27083: LD_ADDR_EXP 54
27087: PUSH
27088: LD_INT 88
27090: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27091: LD_ADDR_EXP 49
27095: PUSH
27096: LD_INT 89
27098: ST_TO_ADDR
// us_hack := 99 ;
27099: LD_ADDR_EXP 50
27103: PUSH
27104: LD_INT 99
27106: ST_TO_ADDR
// us_artillery := 97 ;
27107: LD_ADDR_EXP 51
27111: PUSH
27112: LD_INT 97
27114: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27115: LD_ADDR_EXP 52
27119: PUSH
27120: LD_INT 91
27122: ST_TO_ADDR
// ar_mortar := 92 ;
27123: LD_ADDR_EXP 53
27127: PUSH
27128: LD_INT 92
27130: ST_TO_ADDR
// ru_radar := 98 ;
27131: LD_ADDR_EXP 48
27135: PUSH
27136: LD_INT 98
27138: ST_TO_ADDR
// tech_Artillery := 80 ;
27139: LD_ADDR_EXP 56
27143: PUSH
27144: LD_INT 80
27146: ST_TO_ADDR
// tech_RadMat := 81 ;
27147: LD_ADDR_EXP 57
27151: PUSH
27152: LD_INT 81
27154: ST_TO_ADDR
// tech_BasicTools := 82 ;
27155: LD_ADDR_EXP 58
27159: PUSH
27160: LD_INT 82
27162: ST_TO_ADDR
// tech_Cargo := 83 ;
27163: LD_ADDR_EXP 59
27167: PUSH
27168: LD_INT 83
27170: ST_TO_ADDR
// tech_Track := 84 ;
27171: LD_ADDR_EXP 60
27175: PUSH
27176: LD_INT 84
27178: ST_TO_ADDR
// tech_Crane := 85 ;
27179: LD_ADDR_EXP 61
27183: PUSH
27184: LD_INT 85
27186: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27187: LD_ADDR_EXP 62
27191: PUSH
27192: LD_INT 86
27194: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27195: LD_ADDR_EXP 63
27199: PUSH
27200: LD_INT 87
27202: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27203: LD_ADDR_EXP 64
27207: PUSH
27208: LD_INT 88
27210: ST_TO_ADDR
// class_mastodont := 31 ;
27211: LD_ADDR_EXP 65
27215: PUSH
27216: LD_INT 31
27218: ST_TO_ADDR
// class_horse := 21 ;
27219: LD_ADDR_EXP 66
27223: PUSH
27224: LD_INT 21
27226: ST_TO_ADDR
// end ;
27227: LD_VAR 0 1
27231: RET
// every 1 do
27232: GO 27234
27234: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
27235: CALL 27072 0 0
27239: END
// every 0 0$1 do
27240: GO 27242
27242: DISABLE
// begin enable ;
27243: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
27244: LD_STRING updateTimer(
27246: PUSH
27247: LD_OWVAR 1
27251: STR
27252: PUSH
27253: LD_STRING );
27255: STR
27256: PPUSH
27257: CALL_OW 559
// end ;
27261: END
// on MapStart ( p ) do begin if streamModeActive then
27262: LD_EXP 67
27266: IFFALSE 27275
// DefineStreamItems ( true ) ;
27268: LD_INT 1
27270: PPUSH
27271: CALL 28923 0 1
// UpdateFactoryWaypoints ( ) ;
27275: CALL 42507 0 0
// end ;
27279: PPOPN 1
27281: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27282: LD_INT 0
27284: PPUSH
// if p2 = 100 then
27285: LD_VAR 0 2
27289: PUSH
27290: LD_INT 100
27292: EQUAL
27293: IFFALSE 28296
// begin if not StreamModeActive then
27295: LD_EXP 67
27299: NOT
27300: IFFALSE 27310
// StreamModeActive := true ;
27302: LD_ADDR_EXP 67
27306: PUSH
27307: LD_INT 1
27309: ST_TO_ADDR
// if p3 = 0 then
27310: LD_VAR 0 3
27314: PUSH
27315: LD_INT 0
27317: EQUAL
27318: IFFALSE 27324
// InitStreamMode ;
27320: CALL 28459 0 0
// if p3 = 1 then
27324: LD_VAR 0 3
27328: PUSH
27329: LD_INT 1
27331: EQUAL
27332: IFFALSE 27342
// sRocket := true ;
27334: LD_ADDR_EXP 72
27338: PUSH
27339: LD_INT 1
27341: ST_TO_ADDR
// if p3 = 2 then
27342: LD_VAR 0 3
27346: PUSH
27347: LD_INT 2
27349: EQUAL
27350: IFFALSE 27360
// sSpeed := true ;
27352: LD_ADDR_EXP 71
27356: PUSH
27357: LD_INT 1
27359: ST_TO_ADDR
// if p3 = 3 then
27360: LD_VAR 0 3
27364: PUSH
27365: LD_INT 3
27367: EQUAL
27368: IFFALSE 27378
// sEngine := true ;
27370: LD_ADDR_EXP 73
27374: PUSH
27375: LD_INT 1
27377: ST_TO_ADDR
// if p3 = 4 then
27378: LD_VAR 0 3
27382: PUSH
27383: LD_INT 4
27385: EQUAL
27386: IFFALSE 27396
// sSpec := true ;
27388: LD_ADDR_EXP 70
27392: PUSH
27393: LD_INT 1
27395: ST_TO_ADDR
// if p3 = 5 then
27396: LD_VAR 0 3
27400: PUSH
27401: LD_INT 5
27403: EQUAL
27404: IFFALSE 27414
// sLevel := true ;
27406: LD_ADDR_EXP 74
27410: PUSH
27411: LD_INT 1
27413: ST_TO_ADDR
// if p3 = 6 then
27414: LD_VAR 0 3
27418: PUSH
27419: LD_INT 6
27421: EQUAL
27422: IFFALSE 27432
// sArmoury := true ;
27424: LD_ADDR_EXP 75
27428: PUSH
27429: LD_INT 1
27431: ST_TO_ADDR
// if p3 = 7 then
27432: LD_VAR 0 3
27436: PUSH
27437: LD_INT 7
27439: EQUAL
27440: IFFALSE 27450
// sRadar := true ;
27442: LD_ADDR_EXP 76
27446: PUSH
27447: LD_INT 1
27449: ST_TO_ADDR
// if p3 = 8 then
27450: LD_VAR 0 3
27454: PUSH
27455: LD_INT 8
27457: EQUAL
27458: IFFALSE 27468
// sBunker := true ;
27460: LD_ADDR_EXP 77
27464: PUSH
27465: LD_INT 1
27467: ST_TO_ADDR
// if p3 = 9 then
27468: LD_VAR 0 3
27472: PUSH
27473: LD_INT 9
27475: EQUAL
27476: IFFALSE 27486
// sHack := true ;
27478: LD_ADDR_EXP 78
27482: PUSH
27483: LD_INT 1
27485: ST_TO_ADDR
// if p3 = 10 then
27486: LD_VAR 0 3
27490: PUSH
27491: LD_INT 10
27493: EQUAL
27494: IFFALSE 27504
// sFire := true ;
27496: LD_ADDR_EXP 79
27500: PUSH
27501: LD_INT 1
27503: ST_TO_ADDR
// if p3 = 11 then
27504: LD_VAR 0 3
27508: PUSH
27509: LD_INT 11
27511: EQUAL
27512: IFFALSE 27522
// sRefresh := true ;
27514: LD_ADDR_EXP 80
27518: PUSH
27519: LD_INT 1
27521: ST_TO_ADDR
// if p3 = 12 then
27522: LD_VAR 0 3
27526: PUSH
27527: LD_INT 12
27529: EQUAL
27530: IFFALSE 27540
// sExp := true ;
27532: LD_ADDR_EXP 81
27536: PUSH
27537: LD_INT 1
27539: ST_TO_ADDR
// if p3 = 13 then
27540: LD_VAR 0 3
27544: PUSH
27545: LD_INT 13
27547: EQUAL
27548: IFFALSE 27558
// sDepot := true ;
27550: LD_ADDR_EXP 82
27554: PUSH
27555: LD_INT 1
27557: ST_TO_ADDR
// if p3 = 14 then
27558: LD_VAR 0 3
27562: PUSH
27563: LD_INT 14
27565: EQUAL
27566: IFFALSE 27576
// sFlag := true ;
27568: LD_ADDR_EXP 83
27572: PUSH
27573: LD_INT 1
27575: ST_TO_ADDR
// if p3 = 15 then
27576: LD_VAR 0 3
27580: PUSH
27581: LD_INT 15
27583: EQUAL
27584: IFFALSE 27594
// sKamikadze := true ;
27586: LD_ADDR_EXP 91
27590: PUSH
27591: LD_INT 1
27593: ST_TO_ADDR
// if p3 = 16 then
27594: LD_VAR 0 3
27598: PUSH
27599: LD_INT 16
27601: EQUAL
27602: IFFALSE 27612
// sTroll := true ;
27604: LD_ADDR_EXP 92
27608: PUSH
27609: LD_INT 1
27611: ST_TO_ADDR
// if p3 = 17 then
27612: LD_VAR 0 3
27616: PUSH
27617: LD_INT 17
27619: EQUAL
27620: IFFALSE 27630
// sSlow := true ;
27622: LD_ADDR_EXP 93
27626: PUSH
27627: LD_INT 1
27629: ST_TO_ADDR
// if p3 = 18 then
27630: LD_VAR 0 3
27634: PUSH
27635: LD_INT 18
27637: EQUAL
27638: IFFALSE 27648
// sLack := true ;
27640: LD_ADDR_EXP 94
27644: PUSH
27645: LD_INT 1
27647: ST_TO_ADDR
// if p3 = 19 then
27648: LD_VAR 0 3
27652: PUSH
27653: LD_INT 19
27655: EQUAL
27656: IFFALSE 27666
// sTank := true ;
27658: LD_ADDR_EXP 96
27662: PUSH
27663: LD_INT 1
27665: ST_TO_ADDR
// if p3 = 20 then
27666: LD_VAR 0 3
27670: PUSH
27671: LD_INT 20
27673: EQUAL
27674: IFFALSE 27684
// sRemote := true ;
27676: LD_ADDR_EXP 97
27680: PUSH
27681: LD_INT 1
27683: ST_TO_ADDR
// if p3 = 21 then
27684: LD_VAR 0 3
27688: PUSH
27689: LD_INT 21
27691: EQUAL
27692: IFFALSE 27702
// sPowell := true ;
27694: LD_ADDR_EXP 98
27698: PUSH
27699: LD_INT 1
27701: ST_TO_ADDR
// if p3 = 22 then
27702: LD_VAR 0 3
27706: PUSH
27707: LD_INT 22
27709: EQUAL
27710: IFFALSE 27720
// sTeleport := true ;
27712: LD_ADDR_EXP 101
27716: PUSH
27717: LD_INT 1
27719: ST_TO_ADDR
// if p3 = 23 then
27720: LD_VAR 0 3
27724: PUSH
27725: LD_INT 23
27727: EQUAL
27728: IFFALSE 27738
// sOilTower := true ;
27730: LD_ADDR_EXP 103
27734: PUSH
27735: LD_INT 1
27737: ST_TO_ADDR
// if p3 = 24 then
27738: LD_VAR 0 3
27742: PUSH
27743: LD_INT 24
27745: EQUAL
27746: IFFALSE 27756
// sShovel := true ;
27748: LD_ADDR_EXP 104
27752: PUSH
27753: LD_INT 1
27755: ST_TO_ADDR
// if p3 = 25 then
27756: LD_VAR 0 3
27760: PUSH
27761: LD_INT 25
27763: EQUAL
27764: IFFALSE 27774
// sSheik := true ;
27766: LD_ADDR_EXP 105
27770: PUSH
27771: LD_INT 1
27773: ST_TO_ADDR
// if p3 = 26 then
27774: LD_VAR 0 3
27778: PUSH
27779: LD_INT 26
27781: EQUAL
27782: IFFALSE 27792
// sEarthquake := true ;
27784: LD_ADDR_EXP 107
27788: PUSH
27789: LD_INT 1
27791: ST_TO_ADDR
// if p3 = 27 then
27792: LD_VAR 0 3
27796: PUSH
27797: LD_INT 27
27799: EQUAL
27800: IFFALSE 27810
// sAI := true ;
27802: LD_ADDR_EXP 108
27806: PUSH
27807: LD_INT 1
27809: ST_TO_ADDR
// if p3 = 28 then
27810: LD_VAR 0 3
27814: PUSH
27815: LD_INT 28
27817: EQUAL
27818: IFFALSE 27828
// sCargo := true ;
27820: LD_ADDR_EXP 111
27824: PUSH
27825: LD_INT 1
27827: ST_TO_ADDR
// if p3 = 29 then
27828: LD_VAR 0 3
27832: PUSH
27833: LD_INT 29
27835: EQUAL
27836: IFFALSE 27846
// sDLaser := true ;
27838: LD_ADDR_EXP 112
27842: PUSH
27843: LD_INT 1
27845: ST_TO_ADDR
// if p3 = 30 then
27846: LD_VAR 0 3
27850: PUSH
27851: LD_INT 30
27853: EQUAL
27854: IFFALSE 27864
// sExchange := true ;
27856: LD_ADDR_EXP 113
27860: PUSH
27861: LD_INT 1
27863: ST_TO_ADDR
// if p3 = 31 then
27864: LD_VAR 0 3
27868: PUSH
27869: LD_INT 31
27871: EQUAL
27872: IFFALSE 27882
// sFac := true ;
27874: LD_ADDR_EXP 114
27878: PUSH
27879: LD_INT 1
27881: ST_TO_ADDR
// if p3 = 32 then
27882: LD_VAR 0 3
27886: PUSH
27887: LD_INT 32
27889: EQUAL
27890: IFFALSE 27900
// sPower := true ;
27892: LD_ADDR_EXP 115
27896: PUSH
27897: LD_INT 1
27899: ST_TO_ADDR
// if p3 = 33 then
27900: LD_VAR 0 3
27904: PUSH
27905: LD_INT 33
27907: EQUAL
27908: IFFALSE 27918
// sRandom := true ;
27910: LD_ADDR_EXP 116
27914: PUSH
27915: LD_INT 1
27917: ST_TO_ADDR
// if p3 = 34 then
27918: LD_VAR 0 3
27922: PUSH
27923: LD_INT 34
27925: EQUAL
27926: IFFALSE 27936
// sShield := true ;
27928: LD_ADDR_EXP 117
27932: PUSH
27933: LD_INT 1
27935: ST_TO_ADDR
// if p3 = 35 then
27936: LD_VAR 0 3
27940: PUSH
27941: LD_INT 35
27943: EQUAL
27944: IFFALSE 27954
// sTime := true ;
27946: LD_ADDR_EXP 118
27950: PUSH
27951: LD_INT 1
27953: ST_TO_ADDR
// if p3 = 36 then
27954: LD_VAR 0 3
27958: PUSH
27959: LD_INT 36
27961: EQUAL
27962: IFFALSE 27972
// sTools := true ;
27964: LD_ADDR_EXP 119
27968: PUSH
27969: LD_INT 1
27971: ST_TO_ADDR
// if p3 = 101 then
27972: LD_VAR 0 3
27976: PUSH
27977: LD_INT 101
27979: EQUAL
27980: IFFALSE 27990
// sSold := true ;
27982: LD_ADDR_EXP 84
27986: PUSH
27987: LD_INT 1
27989: ST_TO_ADDR
// if p3 = 102 then
27990: LD_VAR 0 3
27994: PUSH
27995: LD_INT 102
27997: EQUAL
27998: IFFALSE 28008
// sDiff := true ;
28000: LD_ADDR_EXP 85
28004: PUSH
28005: LD_INT 1
28007: ST_TO_ADDR
// if p3 = 103 then
28008: LD_VAR 0 3
28012: PUSH
28013: LD_INT 103
28015: EQUAL
28016: IFFALSE 28026
// sFog := true ;
28018: LD_ADDR_EXP 88
28022: PUSH
28023: LD_INT 1
28025: ST_TO_ADDR
// if p3 = 104 then
28026: LD_VAR 0 3
28030: PUSH
28031: LD_INT 104
28033: EQUAL
28034: IFFALSE 28044
// sReset := true ;
28036: LD_ADDR_EXP 89
28040: PUSH
28041: LD_INT 1
28043: ST_TO_ADDR
// if p3 = 105 then
28044: LD_VAR 0 3
28048: PUSH
28049: LD_INT 105
28051: EQUAL
28052: IFFALSE 28062
// sSun := true ;
28054: LD_ADDR_EXP 90
28058: PUSH
28059: LD_INT 1
28061: ST_TO_ADDR
// if p3 = 106 then
28062: LD_VAR 0 3
28066: PUSH
28067: LD_INT 106
28069: EQUAL
28070: IFFALSE 28080
// sTiger := true ;
28072: LD_ADDR_EXP 86
28076: PUSH
28077: LD_INT 1
28079: ST_TO_ADDR
// if p3 = 107 then
28080: LD_VAR 0 3
28084: PUSH
28085: LD_INT 107
28087: EQUAL
28088: IFFALSE 28098
// sBomb := true ;
28090: LD_ADDR_EXP 87
28094: PUSH
28095: LD_INT 1
28097: ST_TO_ADDR
// if p3 = 108 then
28098: LD_VAR 0 3
28102: PUSH
28103: LD_INT 108
28105: EQUAL
28106: IFFALSE 28116
// sWound := true ;
28108: LD_ADDR_EXP 95
28112: PUSH
28113: LD_INT 1
28115: ST_TO_ADDR
// if p3 = 109 then
28116: LD_VAR 0 3
28120: PUSH
28121: LD_INT 109
28123: EQUAL
28124: IFFALSE 28134
// sBetray := true ;
28126: LD_ADDR_EXP 99
28130: PUSH
28131: LD_INT 1
28133: ST_TO_ADDR
// if p3 = 110 then
28134: LD_VAR 0 3
28138: PUSH
28139: LD_INT 110
28141: EQUAL
28142: IFFALSE 28152
// sContamin := true ;
28144: LD_ADDR_EXP 100
28148: PUSH
28149: LD_INT 1
28151: ST_TO_ADDR
// if p3 = 111 then
28152: LD_VAR 0 3
28156: PUSH
28157: LD_INT 111
28159: EQUAL
28160: IFFALSE 28170
// sOil := true ;
28162: LD_ADDR_EXP 102
28166: PUSH
28167: LD_INT 1
28169: ST_TO_ADDR
// if p3 = 112 then
28170: LD_VAR 0 3
28174: PUSH
28175: LD_INT 112
28177: EQUAL
28178: IFFALSE 28188
// sStu := true ;
28180: LD_ADDR_EXP 106
28184: PUSH
28185: LD_INT 1
28187: ST_TO_ADDR
// if p3 = 113 then
28188: LD_VAR 0 3
28192: PUSH
28193: LD_INT 113
28195: EQUAL
28196: IFFALSE 28206
// sBazooka := true ;
28198: LD_ADDR_EXP 109
28202: PUSH
28203: LD_INT 1
28205: ST_TO_ADDR
// if p3 = 114 then
28206: LD_VAR 0 3
28210: PUSH
28211: LD_INT 114
28213: EQUAL
28214: IFFALSE 28224
// sMortar := true ;
28216: LD_ADDR_EXP 110
28220: PUSH
28221: LD_INT 1
28223: ST_TO_ADDR
// if p3 = 115 then
28224: LD_VAR 0 3
28228: PUSH
28229: LD_INT 115
28231: EQUAL
28232: IFFALSE 28242
// sRanger := true ;
28234: LD_ADDR_EXP 120
28238: PUSH
28239: LD_INT 1
28241: ST_TO_ADDR
// if p3 = 116 then
28242: LD_VAR 0 3
28246: PUSH
28247: LD_INT 116
28249: EQUAL
28250: IFFALSE 28260
// sComputer := true ;
28252: LD_ADDR_EXP 121
28256: PUSH
28257: LD_INT 1
28259: ST_TO_ADDR
// if p3 = 117 then
28260: LD_VAR 0 3
28264: PUSH
28265: LD_INT 117
28267: EQUAL
28268: IFFALSE 28278
// s30 := true ;
28270: LD_ADDR_EXP 122
28274: PUSH
28275: LD_INT 1
28277: ST_TO_ADDR
// if p3 = 118 then
28278: LD_VAR 0 3
28282: PUSH
28283: LD_INT 118
28285: EQUAL
28286: IFFALSE 28296
// s60 := true ;
28288: LD_ADDR_EXP 123
28292: PUSH
28293: LD_INT 1
28295: ST_TO_ADDR
// end ; if p2 = 101 then
28296: LD_VAR 0 2
28300: PUSH
28301: LD_INT 101
28303: EQUAL
28304: IFFALSE 28432
// begin case p3 of 1 :
28306: LD_VAR 0 3
28310: PUSH
28311: LD_INT 1
28313: DOUBLE
28314: EQUAL
28315: IFTRUE 28319
28317: GO 28326
28319: POP
// hHackUnlimitedResources ; 2 :
28320: CALL 40530 0 0
28324: GO 28432
28326: LD_INT 2
28328: DOUBLE
28329: EQUAL
28330: IFTRUE 28334
28332: GO 28341
28334: POP
// hHackSetLevel10 ; 3 :
28335: CALL 40663 0 0
28339: GO 28432
28341: LD_INT 3
28343: DOUBLE
28344: EQUAL
28345: IFTRUE 28349
28347: GO 28356
28349: POP
// hHackSetLevel10YourUnits ; 4 :
28350: CALL 40748 0 0
28354: GO 28432
28356: LD_INT 4
28358: DOUBLE
28359: EQUAL
28360: IFTRUE 28364
28362: GO 28371
28364: POP
// hHackInvincible ; 5 :
28365: CALL 41196 0 0
28369: GO 28432
28371: LD_INT 5
28373: DOUBLE
28374: EQUAL
28375: IFTRUE 28379
28377: GO 28386
28379: POP
// hHackInvisible ; 6 :
28380: CALL 41307 0 0
28384: GO 28432
28386: LD_INT 6
28388: DOUBLE
28389: EQUAL
28390: IFTRUE 28394
28392: GO 28401
28394: POP
// hHackChangeYourSide ; 7 :
28395: CALL 41364 0 0
28399: GO 28432
28401: LD_INT 7
28403: DOUBLE
28404: EQUAL
28405: IFTRUE 28409
28407: GO 28416
28409: POP
// hHackChangeUnitSide ; 8 :
28410: CALL 41406 0 0
28414: GO 28432
28416: LD_INT 8
28418: DOUBLE
28419: EQUAL
28420: IFTRUE 28424
28422: GO 28431
28424: POP
// hHackFog ; end ;
28425: CALL 41507 0 0
28429: GO 28432
28431: POP
// end ; end ;
28432: LD_VAR 0 7
28436: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
28437: GO 28439
28439: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28440: LD_STRING initStreamRollete();
28442: PPUSH
28443: CALL_OW 559
// InitStreamMode ;
28447: CALL 28459 0 0
// DefineStreamItems ( false ) ;
28451: LD_INT 0
28453: PPUSH
28454: CALL 28923 0 1
// end ;
28458: END
// function InitStreamMode ; begin
28459: LD_INT 0
28461: PPUSH
// streamModeActive := false ;
28462: LD_ADDR_EXP 67
28466: PUSH
28467: LD_INT 0
28469: ST_TO_ADDR
// normalCounter := 36 ;
28470: LD_ADDR_EXP 68
28474: PUSH
28475: LD_INT 36
28477: ST_TO_ADDR
// hardcoreCounter := 18 ;
28478: LD_ADDR_EXP 69
28482: PUSH
28483: LD_INT 18
28485: ST_TO_ADDR
// sRocket := false ;
28486: LD_ADDR_EXP 72
28490: PUSH
28491: LD_INT 0
28493: ST_TO_ADDR
// sSpeed := false ;
28494: LD_ADDR_EXP 71
28498: PUSH
28499: LD_INT 0
28501: ST_TO_ADDR
// sEngine := false ;
28502: LD_ADDR_EXP 73
28506: PUSH
28507: LD_INT 0
28509: ST_TO_ADDR
// sSpec := false ;
28510: LD_ADDR_EXP 70
28514: PUSH
28515: LD_INT 0
28517: ST_TO_ADDR
// sLevel := false ;
28518: LD_ADDR_EXP 74
28522: PUSH
28523: LD_INT 0
28525: ST_TO_ADDR
// sArmoury := false ;
28526: LD_ADDR_EXP 75
28530: PUSH
28531: LD_INT 0
28533: ST_TO_ADDR
// sRadar := false ;
28534: LD_ADDR_EXP 76
28538: PUSH
28539: LD_INT 0
28541: ST_TO_ADDR
// sBunker := false ;
28542: LD_ADDR_EXP 77
28546: PUSH
28547: LD_INT 0
28549: ST_TO_ADDR
// sHack := false ;
28550: LD_ADDR_EXP 78
28554: PUSH
28555: LD_INT 0
28557: ST_TO_ADDR
// sFire := false ;
28558: LD_ADDR_EXP 79
28562: PUSH
28563: LD_INT 0
28565: ST_TO_ADDR
// sRefresh := false ;
28566: LD_ADDR_EXP 80
28570: PUSH
28571: LD_INT 0
28573: ST_TO_ADDR
// sExp := false ;
28574: LD_ADDR_EXP 81
28578: PUSH
28579: LD_INT 0
28581: ST_TO_ADDR
// sDepot := false ;
28582: LD_ADDR_EXP 82
28586: PUSH
28587: LD_INT 0
28589: ST_TO_ADDR
// sFlag := false ;
28590: LD_ADDR_EXP 83
28594: PUSH
28595: LD_INT 0
28597: ST_TO_ADDR
// sKamikadze := false ;
28598: LD_ADDR_EXP 91
28602: PUSH
28603: LD_INT 0
28605: ST_TO_ADDR
// sTroll := false ;
28606: LD_ADDR_EXP 92
28610: PUSH
28611: LD_INT 0
28613: ST_TO_ADDR
// sSlow := false ;
28614: LD_ADDR_EXP 93
28618: PUSH
28619: LD_INT 0
28621: ST_TO_ADDR
// sLack := false ;
28622: LD_ADDR_EXP 94
28626: PUSH
28627: LD_INT 0
28629: ST_TO_ADDR
// sTank := false ;
28630: LD_ADDR_EXP 96
28634: PUSH
28635: LD_INT 0
28637: ST_TO_ADDR
// sRemote := false ;
28638: LD_ADDR_EXP 97
28642: PUSH
28643: LD_INT 0
28645: ST_TO_ADDR
// sPowell := false ;
28646: LD_ADDR_EXP 98
28650: PUSH
28651: LD_INT 0
28653: ST_TO_ADDR
// sTeleport := false ;
28654: LD_ADDR_EXP 101
28658: PUSH
28659: LD_INT 0
28661: ST_TO_ADDR
// sOilTower := false ;
28662: LD_ADDR_EXP 103
28666: PUSH
28667: LD_INT 0
28669: ST_TO_ADDR
// sShovel := false ;
28670: LD_ADDR_EXP 104
28674: PUSH
28675: LD_INT 0
28677: ST_TO_ADDR
// sSheik := false ;
28678: LD_ADDR_EXP 105
28682: PUSH
28683: LD_INT 0
28685: ST_TO_ADDR
// sEarthquake := false ;
28686: LD_ADDR_EXP 107
28690: PUSH
28691: LD_INT 0
28693: ST_TO_ADDR
// sAI := false ;
28694: LD_ADDR_EXP 108
28698: PUSH
28699: LD_INT 0
28701: ST_TO_ADDR
// sCargo := false ;
28702: LD_ADDR_EXP 111
28706: PUSH
28707: LD_INT 0
28709: ST_TO_ADDR
// sDLaser := false ;
28710: LD_ADDR_EXP 112
28714: PUSH
28715: LD_INT 0
28717: ST_TO_ADDR
// sExchange := false ;
28718: LD_ADDR_EXP 113
28722: PUSH
28723: LD_INT 0
28725: ST_TO_ADDR
// sFac := false ;
28726: LD_ADDR_EXP 114
28730: PUSH
28731: LD_INT 0
28733: ST_TO_ADDR
// sPower := false ;
28734: LD_ADDR_EXP 115
28738: PUSH
28739: LD_INT 0
28741: ST_TO_ADDR
// sRandom := false ;
28742: LD_ADDR_EXP 116
28746: PUSH
28747: LD_INT 0
28749: ST_TO_ADDR
// sShield := false ;
28750: LD_ADDR_EXP 117
28754: PUSH
28755: LD_INT 0
28757: ST_TO_ADDR
// sTime := false ;
28758: LD_ADDR_EXP 118
28762: PUSH
28763: LD_INT 0
28765: ST_TO_ADDR
// sTools := false ;
28766: LD_ADDR_EXP 119
28770: PUSH
28771: LD_INT 0
28773: ST_TO_ADDR
// sSold := false ;
28774: LD_ADDR_EXP 84
28778: PUSH
28779: LD_INT 0
28781: ST_TO_ADDR
// sDiff := false ;
28782: LD_ADDR_EXP 85
28786: PUSH
28787: LD_INT 0
28789: ST_TO_ADDR
// sFog := false ;
28790: LD_ADDR_EXP 88
28794: PUSH
28795: LD_INT 0
28797: ST_TO_ADDR
// sReset := false ;
28798: LD_ADDR_EXP 89
28802: PUSH
28803: LD_INT 0
28805: ST_TO_ADDR
// sSun := false ;
28806: LD_ADDR_EXP 90
28810: PUSH
28811: LD_INT 0
28813: ST_TO_ADDR
// sTiger := false ;
28814: LD_ADDR_EXP 86
28818: PUSH
28819: LD_INT 0
28821: ST_TO_ADDR
// sBomb := false ;
28822: LD_ADDR_EXP 87
28826: PUSH
28827: LD_INT 0
28829: ST_TO_ADDR
// sWound := false ;
28830: LD_ADDR_EXP 95
28834: PUSH
28835: LD_INT 0
28837: ST_TO_ADDR
// sBetray := false ;
28838: LD_ADDR_EXP 99
28842: PUSH
28843: LD_INT 0
28845: ST_TO_ADDR
// sContamin := false ;
28846: LD_ADDR_EXP 100
28850: PUSH
28851: LD_INT 0
28853: ST_TO_ADDR
// sOil := false ;
28854: LD_ADDR_EXP 102
28858: PUSH
28859: LD_INT 0
28861: ST_TO_ADDR
// sStu := false ;
28862: LD_ADDR_EXP 106
28866: PUSH
28867: LD_INT 0
28869: ST_TO_ADDR
// sBazooka := false ;
28870: LD_ADDR_EXP 109
28874: PUSH
28875: LD_INT 0
28877: ST_TO_ADDR
// sMortar := false ;
28878: LD_ADDR_EXP 110
28882: PUSH
28883: LD_INT 0
28885: ST_TO_ADDR
// sRanger := false ;
28886: LD_ADDR_EXP 120
28890: PUSH
28891: LD_INT 0
28893: ST_TO_ADDR
// sComputer := false ;
28894: LD_ADDR_EXP 121
28898: PUSH
28899: LD_INT 0
28901: ST_TO_ADDR
// s30 := false ;
28902: LD_ADDR_EXP 122
28906: PUSH
28907: LD_INT 0
28909: ST_TO_ADDR
// s60 := false ;
28910: LD_ADDR_EXP 123
28914: PUSH
28915: LD_INT 0
28917: ST_TO_ADDR
// end ;
28918: LD_VAR 0 1
28922: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
28923: LD_INT 0
28925: PPUSH
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
28930: PPUSH
28931: PPUSH
// result := [ ] ;
28932: LD_ADDR_VAR 0 2
28936: PUSH
28937: EMPTY
28938: ST_TO_ADDR
// if campaign_id = 1 then
28939: LD_OWVAR 69
28943: PUSH
28944: LD_INT 1
28946: EQUAL
28947: IFFALSE 32113
// begin case mission_number of 1 :
28949: LD_OWVAR 70
28953: PUSH
28954: LD_INT 1
28956: DOUBLE
28957: EQUAL
28958: IFTRUE 28962
28960: GO 29038
28962: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
28963: LD_ADDR_VAR 0 2
28967: PUSH
28968: LD_INT 2
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: LD_INT 11
28976: PUSH
28977: LD_INT 12
28979: PUSH
28980: LD_INT 15
28982: PUSH
28983: LD_INT 16
28985: PUSH
28986: LD_INT 22
28988: PUSH
28989: LD_INT 23
28991: PUSH
28992: LD_INT 26
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 101
29008: PUSH
29009: LD_INT 102
29011: PUSH
29012: LD_INT 106
29014: PUSH
29015: LD_INT 116
29017: PUSH
29018: LD_INT 117
29020: PUSH
29021: LD_INT 118
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: ST_TO_ADDR
29036: GO 32111
29038: LD_INT 2
29040: DOUBLE
29041: EQUAL
29042: IFTRUE 29046
29044: GO 29130
29046: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
29047: LD_ADDR_VAR 0 2
29051: PUSH
29052: LD_INT 2
29054: PUSH
29055: LD_INT 4
29057: PUSH
29058: LD_INT 11
29060: PUSH
29061: LD_INT 12
29063: PUSH
29064: LD_INT 15
29066: PUSH
29067: LD_INT 16
29069: PUSH
29070: LD_INT 22
29072: PUSH
29073: LD_INT 23
29075: PUSH
29076: LD_INT 26
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 101
29092: PUSH
29093: LD_INT 102
29095: PUSH
29096: LD_INT 105
29098: PUSH
29099: LD_INT 106
29101: PUSH
29102: LD_INT 108
29104: PUSH
29105: LD_INT 116
29107: PUSH
29108: LD_INT 117
29110: PUSH
29111: LD_INT 118
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: ST_TO_ADDR
29128: GO 32111
29130: LD_INT 3
29132: DOUBLE
29133: EQUAL
29134: IFTRUE 29138
29136: GO 29226
29138: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
29139: LD_ADDR_VAR 0 2
29143: PUSH
29144: LD_INT 2
29146: PUSH
29147: LD_INT 4
29149: PUSH
29150: LD_INT 5
29152: PUSH
29153: LD_INT 11
29155: PUSH
29156: LD_INT 12
29158: PUSH
29159: LD_INT 15
29161: PUSH
29162: LD_INT 16
29164: PUSH
29165: LD_INT 22
29167: PUSH
29168: LD_INT 26
29170: PUSH
29171: LD_INT 36
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 101
29188: PUSH
29189: LD_INT 102
29191: PUSH
29192: LD_INT 105
29194: PUSH
29195: LD_INT 106
29197: PUSH
29198: LD_INT 108
29200: PUSH
29201: LD_INT 116
29203: PUSH
29204: LD_INT 117
29206: PUSH
29207: LD_INT 118
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: ST_TO_ADDR
29224: GO 32111
29226: LD_INT 4
29228: DOUBLE
29229: EQUAL
29230: IFTRUE 29234
29232: GO 29330
29234: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
29235: LD_ADDR_VAR 0 2
29239: PUSH
29240: LD_INT 2
29242: PUSH
29243: LD_INT 4
29245: PUSH
29246: LD_INT 5
29248: PUSH
29249: LD_INT 8
29251: PUSH
29252: LD_INT 11
29254: PUSH
29255: LD_INT 12
29257: PUSH
29258: LD_INT 15
29260: PUSH
29261: LD_INT 16
29263: PUSH
29264: LD_INT 22
29266: PUSH
29267: LD_INT 23
29269: PUSH
29270: LD_INT 26
29272: PUSH
29273: LD_INT 36
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 101
29292: PUSH
29293: LD_INT 102
29295: PUSH
29296: LD_INT 105
29298: PUSH
29299: LD_INT 106
29301: PUSH
29302: LD_INT 108
29304: PUSH
29305: LD_INT 116
29307: PUSH
29308: LD_INT 117
29310: PUSH
29311: LD_INT 118
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: ST_TO_ADDR
29328: GO 32111
29330: LD_INT 5
29332: DOUBLE
29333: EQUAL
29334: IFTRUE 29338
29336: GO 29450
29338: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
29339: LD_ADDR_VAR 0 2
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: LD_INT 4
29349: PUSH
29350: LD_INT 5
29352: PUSH
29353: LD_INT 6
29355: PUSH
29356: LD_INT 8
29358: PUSH
29359: LD_INT 11
29361: PUSH
29362: LD_INT 12
29364: PUSH
29365: LD_INT 15
29367: PUSH
29368: LD_INT 16
29370: PUSH
29371: LD_INT 22
29373: PUSH
29374: LD_INT 23
29376: PUSH
29377: LD_INT 25
29379: PUSH
29380: LD_INT 26
29382: PUSH
29383: LD_INT 36
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 101
29404: PUSH
29405: LD_INT 102
29407: PUSH
29408: LD_INT 105
29410: PUSH
29411: LD_INT 106
29413: PUSH
29414: LD_INT 108
29416: PUSH
29417: LD_INT 109
29419: PUSH
29420: LD_INT 112
29422: PUSH
29423: LD_INT 116
29425: PUSH
29426: LD_INT 117
29428: PUSH
29429: LD_INT 118
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: ST_TO_ADDR
29448: GO 32111
29450: LD_INT 6
29452: DOUBLE
29453: EQUAL
29454: IFTRUE 29458
29456: GO 29590
29458: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
29459: LD_ADDR_VAR 0 2
29463: PUSH
29464: LD_INT 2
29466: PUSH
29467: LD_INT 4
29469: PUSH
29470: LD_INT 5
29472: PUSH
29473: LD_INT 6
29475: PUSH
29476: LD_INT 8
29478: PUSH
29479: LD_INT 11
29481: PUSH
29482: LD_INT 12
29484: PUSH
29485: LD_INT 15
29487: PUSH
29488: LD_INT 16
29490: PUSH
29491: LD_INT 20
29493: PUSH
29494: LD_INT 21
29496: PUSH
29497: LD_INT 22
29499: PUSH
29500: LD_INT 23
29502: PUSH
29503: LD_INT 25
29505: PUSH
29506: LD_INT 26
29508: PUSH
29509: LD_INT 30
29511: PUSH
29512: LD_INT 31
29514: PUSH
29515: LD_INT 32
29517: PUSH
29518: LD_INT 36
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 101
29544: PUSH
29545: LD_INT 102
29547: PUSH
29548: LD_INT 105
29550: PUSH
29551: LD_INT 106
29553: PUSH
29554: LD_INT 108
29556: PUSH
29557: LD_INT 109
29559: PUSH
29560: LD_INT 112
29562: PUSH
29563: LD_INT 116
29565: PUSH
29566: LD_INT 117
29568: PUSH
29569: LD_INT 118
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: ST_TO_ADDR
29588: GO 32111
29590: LD_INT 7
29592: DOUBLE
29593: EQUAL
29594: IFTRUE 29598
29596: GO 29710
29598: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
29599: LD_ADDR_VAR 0 2
29603: PUSH
29604: LD_INT 2
29606: PUSH
29607: LD_INT 4
29609: PUSH
29610: LD_INT 5
29612: PUSH
29613: LD_INT 7
29615: PUSH
29616: LD_INT 11
29618: PUSH
29619: LD_INT 12
29621: PUSH
29622: LD_INT 15
29624: PUSH
29625: LD_INT 16
29627: PUSH
29628: LD_INT 20
29630: PUSH
29631: LD_INT 21
29633: PUSH
29634: LD_INT 22
29636: PUSH
29637: LD_INT 23
29639: PUSH
29640: LD_INT 25
29642: PUSH
29643: LD_INT 26
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 101
29664: PUSH
29665: LD_INT 102
29667: PUSH
29668: LD_INT 103
29670: PUSH
29671: LD_INT 105
29673: PUSH
29674: LD_INT 106
29676: PUSH
29677: LD_INT 108
29679: PUSH
29680: LD_INT 112
29682: PUSH
29683: LD_INT 116
29685: PUSH
29686: LD_INT 117
29688: PUSH
29689: LD_INT 118
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: ST_TO_ADDR
29708: GO 32111
29710: LD_INT 8
29712: DOUBLE
29713: EQUAL
29714: IFTRUE 29718
29716: GO 29858
29718: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
29719: LD_ADDR_VAR 0 2
29723: PUSH
29724: LD_INT 2
29726: PUSH
29727: LD_INT 4
29729: PUSH
29730: LD_INT 5
29732: PUSH
29733: LD_INT 6
29735: PUSH
29736: LD_INT 7
29738: PUSH
29739: LD_INT 8
29741: PUSH
29742: LD_INT 11
29744: PUSH
29745: LD_INT 12
29747: PUSH
29748: LD_INT 15
29750: PUSH
29751: LD_INT 16
29753: PUSH
29754: LD_INT 20
29756: PUSH
29757: LD_INT 21
29759: PUSH
29760: LD_INT 22
29762: PUSH
29763: LD_INT 23
29765: PUSH
29766: LD_INT 25
29768: PUSH
29769: LD_INT 26
29771: PUSH
29772: LD_INT 30
29774: PUSH
29775: LD_INT 31
29777: PUSH
29778: LD_INT 32
29780: PUSH
29781: LD_INT 36
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 101
29808: PUSH
29809: LD_INT 102
29811: PUSH
29812: LD_INT 103
29814: PUSH
29815: LD_INT 105
29817: PUSH
29818: LD_INT 106
29820: PUSH
29821: LD_INT 108
29823: PUSH
29824: LD_INT 109
29826: PUSH
29827: LD_INT 112
29829: PUSH
29830: LD_INT 116
29832: PUSH
29833: LD_INT 117
29835: PUSH
29836: LD_INT 118
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: ST_TO_ADDR
29856: GO 32111
29858: LD_INT 9
29860: DOUBLE
29861: EQUAL
29862: IFTRUE 29866
29864: GO 30014
29866: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
29867: LD_ADDR_VAR 0 2
29871: PUSH
29872: LD_INT 2
29874: PUSH
29875: LD_INT 4
29877: PUSH
29878: LD_INT 5
29880: PUSH
29881: LD_INT 6
29883: PUSH
29884: LD_INT 7
29886: PUSH
29887: LD_INT 8
29889: PUSH
29890: LD_INT 11
29892: PUSH
29893: LD_INT 12
29895: PUSH
29896: LD_INT 15
29898: PUSH
29899: LD_INT 16
29901: PUSH
29902: LD_INT 20
29904: PUSH
29905: LD_INT 21
29907: PUSH
29908: LD_INT 22
29910: PUSH
29911: LD_INT 23
29913: PUSH
29914: LD_INT 25
29916: PUSH
29917: LD_INT 26
29919: PUSH
29920: LD_INT 28
29922: PUSH
29923: LD_INT 30
29925: PUSH
29926: LD_INT 31
29928: PUSH
29929: LD_INT 32
29931: PUSH
29932: LD_INT 36
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 101
29960: PUSH
29961: LD_INT 102
29963: PUSH
29964: LD_INT 103
29966: PUSH
29967: LD_INT 105
29969: PUSH
29970: LD_INT 106
29972: PUSH
29973: LD_INT 108
29975: PUSH
29976: LD_INT 109
29978: PUSH
29979: LD_INT 112
29981: PUSH
29982: LD_INT 114
29984: PUSH
29985: LD_INT 116
29987: PUSH
29988: LD_INT 117
29990: PUSH
29991: LD_INT 118
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: ST_TO_ADDR
30012: GO 32111
30014: LD_INT 10
30016: DOUBLE
30017: EQUAL
30018: IFTRUE 30022
30020: GO 30218
30022: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
30023: LD_ADDR_VAR 0 2
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: LD_INT 4
30033: PUSH
30034: LD_INT 5
30036: PUSH
30037: LD_INT 6
30039: PUSH
30040: LD_INT 7
30042: PUSH
30043: LD_INT 8
30045: PUSH
30046: LD_INT 9
30048: PUSH
30049: LD_INT 10
30051: PUSH
30052: LD_INT 11
30054: PUSH
30055: LD_INT 12
30057: PUSH
30058: LD_INT 13
30060: PUSH
30061: LD_INT 14
30063: PUSH
30064: LD_INT 15
30066: PUSH
30067: LD_INT 16
30069: PUSH
30070: LD_INT 17
30072: PUSH
30073: LD_INT 18
30075: PUSH
30076: LD_INT 19
30078: PUSH
30079: LD_INT 20
30081: PUSH
30082: LD_INT 21
30084: PUSH
30085: LD_INT 22
30087: PUSH
30088: LD_INT 23
30090: PUSH
30091: LD_INT 24
30093: PUSH
30094: LD_INT 25
30096: PUSH
30097: LD_INT 26
30099: PUSH
30100: LD_INT 28
30102: PUSH
30103: LD_INT 30
30105: PUSH
30106: LD_INT 31
30108: PUSH
30109: LD_INT 32
30111: PUSH
30112: LD_INT 36
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 101
30148: PUSH
30149: LD_INT 102
30151: PUSH
30152: LD_INT 103
30154: PUSH
30155: LD_INT 104
30157: PUSH
30158: LD_INT 105
30160: PUSH
30161: LD_INT 106
30163: PUSH
30164: LD_INT 107
30166: PUSH
30167: LD_INT 108
30169: PUSH
30170: LD_INT 109
30172: PUSH
30173: LD_INT 110
30175: PUSH
30176: LD_INT 111
30178: PUSH
30179: LD_INT 112
30181: PUSH
30182: LD_INT 114
30184: PUSH
30185: LD_INT 116
30187: PUSH
30188: LD_INT 117
30190: PUSH
30191: LD_INT 118
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: ST_TO_ADDR
30216: GO 32111
30218: LD_INT 11
30220: DOUBLE
30221: EQUAL
30222: IFTRUE 30226
30224: GO 30430
30226: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
30227: LD_ADDR_VAR 0 2
30231: PUSH
30232: LD_INT 2
30234: PUSH
30235: LD_INT 3
30237: PUSH
30238: LD_INT 4
30240: PUSH
30241: LD_INT 5
30243: PUSH
30244: LD_INT 6
30246: PUSH
30247: LD_INT 7
30249: PUSH
30250: LD_INT 8
30252: PUSH
30253: LD_INT 9
30255: PUSH
30256: LD_INT 10
30258: PUSH
30259: LD_INT 11
30261: PUSH
30262: LD_INT 12
30264: PUSH
30265: LD_INT 13
30267: PUSH
30268: LD_INT 14
30270: PUSH
30271: LD_INT 15
30273: PUSH
30274: LD_INT 16
30276: PUSH
30277: LD_INT 17
30279: PUSH
30280: LD_INT 18
30282: PUSH
30283: LD_INT 19
30285: PUSH
30286: LD_INT 20
30288: PUSH
30289: LD_INT 21
30291: PUSH
30292: LD_INT 22
30294: PUSH
30295: LD_INT 23
30297: PUSH
30298: LD_INT 24
30300: PUSH
30301: LD_INT 25
30303: PUSH
30304: LD_INT 26
30306: PUSH
30307: LD_INT 28
30309: PUSH
30310: LD_INT 30
30312: PUSH
30313: LD_INT 31
30315: PUSH
30316: LD_INT 32
30318: PUSH
30319: LD_INT 34
30321: PUSH
30322: LD_INT 36
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 101
30360: PUSH
30361: LD_INT 102
30363: PUSH
30364: LD_INT 103
30366: PUSH
30367: LD_INT 104
30369: PUSH
30370: LD_INT 105
30372: PUSH
30373: LD_INT 106
30375: PUSH
30376: LD_INT 107
30378: PUSH
30379: LD_INT 108
30381: PUSH
30382: LD_INT 109
30384: PUSH
30385: LD_INT 110
30387: PUSH
30388: LD_INT 111
30390: PUSH
30391: LD_INT 112
30393: PUSH
30394: LD_INT 114
30396: PUSH
30397: LD_INT 116
30399: PUSH
30400: LD_INT 117
30402: PUSH
30403: LD_INT 118
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: ST_TO_ADDR
30428: GO 32111
30430: LD_INT 12
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30658
30438: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
30439: LD_ADDR_VAR 0 2
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: LD_INT 2
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: LD_INT 4
30455: PUSH
30456: LD_INT 5
30458: PUSH
30459: LD_INT 6
30461: PUSH
30462: LD_INT 7
30464: PUSH
30465: LD_INT 8
30467: PUSH
30468: LD_INT 9
30470: PUSH
30471: LD_INT 10
30473: PUSH
30474: LD_INT 11
30476: PUSH
30477: LD_INT 12
30479: PUSH
30480: LD_INT 13
30482: PUSH
30483: LD_INT 14
30485: PUSH
30486: LD_INT 15
30488: PUSH
30489: LD_INT 16
30491: PUSH
30492: LD_INT 17
30494: PUSH
30495: LD_INT 18
30497: PUSH
30498: LD_INT 19
30500: PUSH
30501: LD_INT 20
30503: PUSH
30504: LD_INT 21
30506: PUSH
30507: LD_INT 22
30509: PUSH
30510: LD_INT 23
30512: PUSH
30513: LD_INT 24
30515: PUSH
30516: LD_INT 25
30518: PUSH
30519: LD_INT 26
30521: PUSH
30522: LD_INT 27
30524: PUSH
30525: LD_INT 28
30527: PUSH
30528: LD_INT 30
30530: PUSH
30531: LD_INT 31
30533: PUSH
30534: LD_INT 32
30536: PUSH
30537: LD_INT 33
30539: PUSH
30540: LD_INT 34
30542: PUSH
30543: LD_INT 36
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 101
30584: PUSH
30585: LD_INT 102
30587: PUSH
30588: LD_INT 103
30590: PUSH
30591: LD_INT 104
30593: PUSH
30594: LD_INT 105
30596: PUSH
30597: LD_INT 106
30599: PUSH
30600: LD_INT 107
30602: PUSH
30603: LD_INT 108
30605: PUSH
30606: LD_INT 109
30608: PUSH
30609: LD_INT 110
30611: PUSH
30612: LD_INT 111
30614: PUSH
30615: LD_INT 112
30617: PUSH
30618: LD_INT 113
30620: PUSH
30621: LD_INT 114
30623: PUSH
30624: LD_INT 116
30626: PUSH
30627: LD_INT 117
30629: PUSH
30630: LD_INT 118
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: ST_TO_ADDR
30656: GO 32111
30658: LD_INT 13
30660: DOUBLE
30661: EQUAL
30662: IFTRUE 30666
30664: GO 30874
30666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
30667: LD_ADDR_VAR 0 2
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: LD_INT 2
30677: PUSH
30678: LD_INT 3
30680: PUSH
30681: LD_INT 4
30683: PUSH
30684: LD_INT 5
30686: PUSH
30687: LD_INT 8
30689: PUSH
30690: LD_INT 9
30692: PUSH
30693: LD_INT 10
30695: PUSH
30696: LD_INT 11
30698: PUSH
30699: LD_INT 12
30701: PUSH
30702: LD_INT 14
30704: PUSH
30705: LD_INT 15
30707: PUSH
30708: LD_INT 16
30710: PUSH
30711: LD_INT 17
30713: PUSH
30714: LD_INT 18
30716: PUSH
30717: LD_INT 19
30719: PUSH
30720: LD_INT 20
30722: PUSH
30723: LD_INT 21
30725: PUSH
30726: LD_INT 22
30728: PUSH
30729: LD_INT 23
30731: PUSH
30732: LD_INT 24
30734: PUSH
30735: LD_INT 25
30737: PUSH
30738: LD_INT 26
30740: PUSH
30741: LD_INT 27
30743: PUSH
30744: LD_INT 28
30746: PUSH
30747: LD_INT 30
30749: PUSH
30750: LD_INT 31
30752: PUSH
30753: LD_INT 32
30755: PUSH
30756: LD_INT 33
30758: PUSH
30759: LD_INT 34
30761: PUSH
30762: LD_INT 36
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 101
30800: PUSH
30801: LD_INT 102
30803: PUSH
30804: LD_INT 103
30806: PUSH
30807: LD_INT 104
30809: PUSH
30810: LD_INT 105
30812: PUSH
30813: LD_INT 106
30815: PUSH
30816: LD_INT 107
30818: PUSH
30819: LD_INT 108
30821: PUSH
30822: LD_INT 109
30824: PUSH
30825: LD_INT 110
30827: PUSH
30828: LD_INT 111
30830: PUSH
30831: LD_INT 112
30833: PUSH
30834: LD_INT 113
30836: PUSH
30837: LD_INT 114
30839: PUSH
30840: LD_INT 116
30842: PUSH
30843: LD_INT 117
30845: PUSH
30846: LD_INT 118
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: ST_TO_ADDR
30872: GO 32111
30874: LD_INT 14
30876: DOUBLE
30877: EQUAL
30878: IFTRUE 30882
30880: GO 31106
30882: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
30883: LD_ADDR_VAR 0 2
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: LD_INT 2
30893: PUSH
30894: LD_INT 3
30896: PUSH
30897: LD_INT 4
30899: PUSH
30900: LD_INT 5
30902: PUSH
30903: LD_INT 6
30905: PUSH
30906: LD_INT 7
30908: PUSH
30909: LD_INT 8
30911: PUSH
30912: LD_INT 9
30914: PUSH
30915: LD_INT 10
30917: PUSH
30918: LD_INT 11
30920: PUSH
30921: LD_INT 12
30923: PUSH
30924: LD_INT 13
30926: PUSH
30927: LD_INT 14
30929: PUSH
30930: LD_INT 15
30932: PUSH
30933: LD_INT 16
30935: PUSH
30936: LD_INT 17
30938: PUSH
30939: LD_INT 18
30941: PUSH
30942: LD_INT 19
30944: PUSH
30945: LD_INT 20
30947: PUSH
30948: LD_INT 21
30950: PUSH
30951: LD_INT 22
30953: PUSH
30954: LD_INT 23
30956: PUSH
30957: LD_INT 24
30959: PUSH
30960: LD_INT 25
30962: PUSH
30963: LD_INT 26
30965: PUSH
30966: LD_INT 27
30968: PUSH
30969: LD_INT 28
30971: PUSH
30972: LD_INT 29
30974: PUSH
30975: LD_INT 30
30977: PUSH
30978: LD_INT 31
30980: PUSH
30981: LD_INT 32
30983: PUSH
30984: LD_INT 33
30986: PUSH
30987: LD_INT 34
30989: PUSH
30990: LD_INT 36
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 101
31032: PUSH
31033: LD_INT 102
31035: PUSH
31036: LD_INT 103
31038: PUSH
31039: LD_INT 104
31041: PUSH
31042: LD_INT 105
31044: PUSH
31045: LD_INT 106
31047: PUSH
31048: LD_INT 107
31050: PUSH
31051: LD_INT 108
31053: PUSH
31054: LD_INT 109
31056: PUSH
31057: LD_INT 110
31059: PUSH
31060: LD_INT 111
31062: PUSH
31063: LD_INT 112
31065: PUSH
31066: LD_INT 113
31068: PUSH
31069: LD_INT 114
31071: PUSH
31072: LD_INT 116
31074: PUSH
31075: LD_INT 117
31077: PUSH
31078: LD_INT 118
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: ST_TO_ADDR
31104: GO 32111
31106: LD_INT 15
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31114
31112: GO 31338
31114: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
31115: LD_ADDR_VAR 0 2
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: LD_INT 2
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: LD_INT 4
31131: PUSH
31132: LD_INT 5
31134: PUSH
31135: LD_INT 6
31137: PUSH
31138: LD_INT 7
31140: PUSH
31141: LD_INT 8
31143: PUSH
31144: LD_INT 9
31146: PUSH
31147: LD_INT 10
31149: PUSH
31150: LD_INT 11
31152: PUSH
31153: LD_INT 12
31155: PUSH
31156: LD_INT 13
31158: PUSH
31159: LD_INT 14
31161: PUSH
31162: LD_INT 15
31164: PUSH
31165: LD_INT 16
31167: PUSH
31168: LD_INT 17
31170: PUSH
31171: LD_INT 18
31173: PUSH
31174: LD_INT 19
31176: PUSH
31177: LD_INT 20
31179: PUSH
31180: LD_INT 21
31182: PUSH
31183: LD_INT 22
31185: PUSH
31186: LD_INT 23
31188: PUSH
31189: LD_INT 24
31191: PUSH
31192: LD_INT 25
31194: PUSH
31195: LD_INT 26
31197: PUSH
31198: LD_INT 27
31200: PUSH
31201: LD_INT 28
31203: PUSH
31204: LD_INT 29
31206: PUSH
31207: LD_INT 30
31209: PUSH
31210: LD_INT 31
31212: PUSH
31213: LD_INT 32
31215: PUSH
31216: LD_INT 33
31218: PUSH
31219: LD_INT 34
31221: PUSH
31222: LD_INT 36
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 101
31264: PUSH
31265: LD_INT 102
31267: PUSH
31268: LD_INT 103
31270: PUSH
31271: LD_INT 104
31273: PUSH
31274: LD_INT 105
31276: PUSH
31277: LD_INT 106
31279: PUSH
31280: LD_INT 107
31282: PUSH
31283: LD_INT 108
31285: PUSH
31286: LD_INT 109
31288: PUSH
31289: LD_INT 110
31291: PUSH
31292: LD_INT 111
31294: PUSH
31295: LD_INT 112
31297: PUSH
31298: LD_INT 113
31300: PUSH
31301: LD_INT 114
31303: PUSH
31304: LD_INT 116
31306: PUSH
31307: LD_INT 117
31309: PUSH
31310: LD_INT 118
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: ST_TO_ADDR
31336: GO 32111
31338: LD_INT 16
31340: DOUBLE
31341: EQUAL
31342: IFTRUE 31346
31344: GO 31482
31346: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
31347: LD_ADDR_VAR 0 2
31351: PUSH
31352: LD_INT 2
31354: PUSH
31355: LD_INT 4
31357: PUSH
31358: LD_INT 5
31360: PUSH
31361: LD_INT 7
31363: PUSH
31364: LD_INT 11
31366: PUSH
31367: LD_INT 12
31369: PUSH
31370: LD_INT 15
31372: PUSH
31373: LD_INT 16
31375: PUSH
31376: LD_INT 20
31378: PUSH
31379: LD_INT 21
31381: PUSH
31382: LD_INT 22
31384: PUSH
31385: LD_INT 23
31387: PUSH
31388: LD_INT 25
31390: PUSH
31391: LD_INT 26
31393: PUSH
31394: LD_INT 30
31396: PUSH
31397: LD_INT 31
31399: PUSH
31400: LD_INT 32
31402: PUSH
31403: LD_INT 33
31405: PUSH
31406: LD_INT 34
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 101
31432: PUSH
31433: LD_INT 102
31435: PUSH
31436: LD_INT 103
31438: PUSH
31439: LD_INT 106
31441: PUSH
31442: LD_INT 108
31444: PUSH
31445: LD_INT 112
31447: PUSH
31448: LD_INT 113
31450: PUSH
31451: LD_INT 114
31453: PUSH
31454: LD_INT 116
31456: PUSH
31457: LD_INT 117
31459: PUSH
31460: LD_INT 118
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: ST_TO_ADDR
31480: GO 32111
31482: LD_INT 17
31484: DOUBLE
31485: EQUAL
31486: IFTRUE 31490
31488: GO 31714
31490: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
31491: LD_ADDR_VAR 0 2
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: LD_INT 2
31501: PUSH
31502: LD_INT 3
31504: PUSH
31505: LD_INT 4
31507: PUSH
31508: LD_INT 5
31510: PUSH
31511: LD_INT 6
31513: PUSH
31514: LD_INT 7
31516: PUSH
31517: LD_INT 8
31519: PUSH
31520: LD_INT 9
31522: PUSH
31523: LD_INT 10
31525: PUSH
31526: LD_INT 11
31528: PUSH
31529: LD_INT 12
31531: PUSH
31532: LD_INT 13
31534: PUSH
31535: LD_INT 14
31537: PUSH
31538: LD_INT 15
31540: PUSH
31541: LD_INT 16
31543: PUSH
31544: LD_INT 17
31546: PUSH
31547: LD_INT 18
31549: PUSH
31550: LD_INT 19
31552: PUSH
31553: LD_INT 20
31555: PUSH
31556: LD_INT 21
31558: PUSH
31559: LD_INT 22
31561: PUSH
31562: LD_INT 23
31564: PUSH
31565: LD_INT 24
31567: PUSH
31568: LD_INT 25
31570: PUSH
31571: LD_INT 26
31573: PUSH
31574: LD_INT 27
31576: PUSH
31577: LD_INT 28
31579: PUSH
31580: LD_INT 29
31582: PUSH
31583: LD_INT 30
31585: PUSH
31586: LD_INT 31
31588: PUSH
31589: LD_INT 32
31591: PUSH
31592: LD_INT 33
31594: PUSH
31595: LD_INT 34
31597: PUSH
31598: LD_INT 36
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 101
31640: PUSH
31641: LD_INT 102
31643: PUSH
31644: LD_INT 103
31646: PUSH
31647: LD_INT 104
31649: PUSH
31650: LD_INT 105
31652: PUSH
31653: LD_INT 106
31655: PUSH
31656: LD_INT 107
31658: PUSH
31659: LD_INT 108
31661: PUSH
31662: LD_INT 109
31664: PUSH
31665: LD_INT 110
31667: PUSH
31668: LD_INT 111
31670: PUSH
31671: LD_INT 112
31673: PUSH
31674: LD_INT 113
31676: PUSH
31677: LD_INT 114
31679: PUSH
31680: LD_INT 116
31682: PUSH
31683: LD_INT 117
31685: PUSH
31686: LD_INT 118
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: ST_TO_ADDR
31712: GO 32111
31714: LD_INT 18
31716: DOUBLE
31717: EQUAL
31718: IFTRUE 31722
31720: GO 31870
31722: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
31723: LD_ADDR_VAR 0 2
31727: PUSH
31728: LD_INT 2
31730: PUSH
31731: LD_INT 4
31733: PUSH
31734: LD_INT 5
31736: PUSH
31737: LD_INT 7
31739: PUSH
31740: LD_INT 11
31742: PUSH
31743: LD_INT 12
31745: PUSH
31746: LD_INT 15
31748: PUSH
31749: LD_INT 16
31751: PUSH
31752: LD_INT 20
31754: PUSH
31755: LD_INT 21
31757: PUSH
31758: LD_INT 22
31760: PUSH
31761: LD_INT 23
31763: PUSH
31764: LD_INT 25
31766: PUSH
31767: LD_INT 26
31769: PUSH
31770: LD_INT 30
31772: PUSH
31773: LD_INT 31
31775: PUSH
31776: LD_INT 32
31778: PUSH
31779: LD_INT 33
31781: PUSH
31782: LD_INT 34
31784: PUSH
31785: LD_INT 35
31787: PUSH
31788: LD_INT 36
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 101
31816: PUSH
31817: LD_INT 102
31819: PUSH
31820: LD_INT 103
31822: PUSH
31823: LD_INT 106
31825: PUSH
31826: LD_INT 108
31828: PUSH
31829: LD_INT 112
31831: PUSH
31832: LD_INT 113
31834: PUSH
31835: LD_INT 114
31837: PUSH
31838: LD_INT 115
31840: PUSH
31841: LD_INT 116
31843: PUSH
31844: LD_INT 117
31846: PUSH
31847: LD_INT 118
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: ST_TO_ADDR
31868: GO 32111
31870: LD_INT 19
31872: DOUBLE
31873: EQUAL
31874: IFTRUE 31878
31876: GO 32110
31878: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
31879: LD_ADDR_VAR 0 2
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: LD_INT 3
31892: PUSH
31893: LD_INT 4
31895: PUSH
31896: LD_INT 5
31898: PUSH
31899: LD_INT 6
31901: PUSH
31902: LD_INT 7
31904: PUSH
31905: LD_INT 8
31907: PUSH
31908: LD_INT 9
31910: PUSH
31911: LD_INT 10
31913: PUSH
31914: LD_INT 11
31916: PUSH
31917: LD_INT 12
31919: PUSH
31920: LD_INT 13
31922: PUSH
31923: LD_INT 14
31925: PUSH
31926: LD_INT 15
31928: PUSH
31929: LD_INT 16
31931: PUSH
31932: LD_INT 17
31934: PUSH
31935: LD_INT 18
31937: PUSH
31938: LD_INT 19
31940: PUSH
31941: LD_INT 20
31943: PUSH
31944: LD_INT 21
31946: PUSH
31947: LD_INT 22
31949: PUSH
31950: LD_INT 23
31952: PUSH
31953: LD_INT 24
31955: PUSH
31956: LD_INT 25
31958: PUSH
31959: LD_INT 26
31961: PUSH
31962: LD_INT 27
31964: PUSH
31965: LD_INT 28
31967: PUSH
31968: LD_INT 29
31970: PUSH
31971: LD_INT 30
31973: PUSH
31974: LD_INT 31
31976: PUSH
31977: LD_INT 32
31979: PUSH
31980: LD_INT 33
31982: PUSH
31983: LD_INT 34
31985: PUSH
31986: LD_INT 35
31988: PUSH
31989: LD_INT 36
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 101
32032: PUSH
32033: LD_INT 102
32035: PUSH
32036: LD_INT 103
32038: PUSH
32039: LD_INT 104
32041: PUSH
32042: LD_INT 105
32044: PUSH
32045: LD_INT 106
32047: PUSH
32048: LD_INT 107
32050: PUSH
32051: LD_INT 108
32053: PUSH
32054: LD_INT 109
32056: PUSH
32057: LD_INT 110
32059: PUSH
32060: LD_INT 111
32062: PUSH
32063: LD_INT 112
32065: PUSH
32066: LD_INT 113
32068: PUSH
32069: LD_INT 114
32071: PUSH
32072: LD_INT 115
32074: PUSH
32075: LD_INT 116
32077: PUSH
32078: LD_INT 117
32080: PUSH
32081: LD_INT 118
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: ST_TO_ADDR
32108: GO 32111
32110: POP
// end else
32111: GO 32342
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
32113: LD_ADDR_VAR 0 2
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: LD_INT 3
32126: PUSH
32127: LD_INT 4
32129: PUSH
32130: LD_INT 5
32132: PUSH
32133: LD_INT 6
32135: PUSH
32136: LD_INT 7
32138: PUSH
32139: LD_INT 8
32141: PUSH
32142: LD_INT 9
32144: PUSH
32145: LD_INT 10
32147: PUSH
32148: LD_INT 11
32150: PUSH
32151: LD_INT 12
32153: PUSH
32154: LD_INT 13
32156: PUSH
32157: LD_INT 14
32159: PUSH
32160: LD_INT 15
32162: PUSH
32163: LD_INT 16
32165: PUSH
32166: LD_INT 17
32168: PUSH
32169: LD_INT 18
32171: PUSH
32172: LD_INT 19
32174: PUSH
32175: LD_INT 20
32177: PUSH
32178: LD_INT 21
32180: PUSH
32181: LD_INT 22
32183: PUSH
32184: LD_INT 23
32186: PUSH
32187: LD_INT 24
32189: PUSH
32190: LD_INT 25
32192: PUSH
32193: LD_INT 26
32195: PUSH
32196: LD_INT 27
32198: PUSH
32199: LD_INT 28
32201: PUSH
32202: LD_INT 29
32204: PUSH
32205: LD_INT 30
32207: PUSH
32208: LD_INT 31
32210: PUSH
32211: LD_INT 32
32213: PUSH
32214: LD_INT 33
32216: PUSH
32217: LD_INT 34
32219: PUSH
32220: LD_INT 35
32222: PUSH
32223: LD_INT 36
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 101
32266: PUSH
32267: LD_INT 102
32269: PUSH
32270: LD_INT 103
32272: PUSH
32273: LD_INT 104
32275: PUSH
32276: LD_INT 105
32278: PUSH
32279: LD_INT 106
32281: PUSH
32282: LD_INT 107
32284: PUSH
32285: LD_INT 108
32287: PUSH
32288: LD_INT 109
32290: PUSH
32291: LD_INT 110
32293: PUSH
32294: LD_INT 111
32296: PUSH
32297: LD_INT 112
32299: PUSH
32300: LD_INT 113
32302: PUSH
32303: LD_INT 114
32305: PUSH
32306: LD_INT 115
32308: PUSH
32309: LD_INT 116
32311: PUSH
32312: LD_INT 117
32314: PUSH
32315: LD_INT 118
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: ST_TO_ADDR
// if result then
32342: LD_VAR 0 2
32346: IFFALSE 33132
// begin normal :=  ;
32348: LD_ADDR_VAR 0 5
32352: PUSH
32353: LD_STRING 
32355: ST_TO_ADDR
// hardcore :=  ;
32356: LD_ADDR_VAR 0 6
32360: PUSH
32361: LD_STRING 
32363: ST_TO_ADDR
// active :=  ;
32364: LD_ADDR_VAR 0 7
32368: PUSH
32369: LD_STRING 
32371: ST_TO_ADDR
// for i = 1 to normalCounter do
32372: LD_ADDR_VAR 0 8
32376: PUSH
32377: DOUBLE
32378: LD_INT 1
32380: DEC
32381: ST_TO_ADDR
32382: LD_EXP 68
32386: PUSH
32387: FOR_TO
32388: IFFALSE 32489
// begin tmp := 0 ;
32390: LD_ADDR_VAR 0 3
32394: PUSH
32395: LD_STRING 0
32397: ST_TO_ADDR
// if result [ 1 ] then
32398: LD_VAR 0 2
32402: PUSH
32403: LD_INT 1
32405: ARRAY
32406: IFFALSE 32471
// if result [ 1 ] [ 1 ] = i then
32408: LD_VAR 0 2
32412: PUSH
32413: LD_INT 1
32415: ARRAY
32416: PUSH
32417: LD_INT 1
32419: ARRAY
32420: PUSH
32421: LD_VAR 0 8
32425: EQUAL
32426: IFFALSE 32471
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
32428: LD_ADDR_VAR 0 2
32432: PUSH
32433: LD_VAR 0 2
32437: PPUSH
32438: LD_INT 1
32440: PPUSH
32441: LD_VAR 0 2
32445: PUSH
32446: LD_INT 1
32448: ARRAY
32449: PPUSH
32450: LD_INT 1
32452: PPUSH
32453: CALL_OW 3
32457: PPUSH
32458: CALL_OW 1
32462: ST_TO_ADDR
// tmp := 1 ;
32463: LD_ADDR_VAR 0 3
32467: PUSH
32468: LD_STRING 1
32470: ST_TO_ADDR
// end ; normal := normal & tmp ;
32471: LD_ADDR_VAR 0 5
32475: PUSH
32476: LD_VAR 0 5
32480: PUSH
32481: LD_VAR 0 3
32485: STR
32486: ST_TO_ADDR
// end ;
32487: GO 32387
32489: POP
32490: POP
// for i = 1 to hardcoreCounter do
32491: LD_ADDR_VAR 0 8
32495: PUSH
32496: DOUBLE
32497: LD_INT 1
32499: DEC
32500: ST_TO_ADDR
32501: LD_EXP 69
32505: PUSH
32506: FOR_TO
32507: IFFALSE 32612
// begin tmp := 0 ;
32509: LD_ADDR_VAR 0 3
32513: PUSH
32514: LD_STRING 0
32516: ST_TO_ADDR
// if result [ 2 ] then
32517: LD_VAR 0 2
32521: PUSH
32522: LD_INT 2
32524: ARRAY
32525: IFFALSE 32594
// if result [ 2 ] [ 1 ] = 100 + i then
32527: LD_VAR 0 2
32531: PUSH
32532: LD_INT 2
32534: ARRAY
32535: PUSH
32536: LD_INT 1
32538: ARRAY
32539: PUSH
32540: LD_INT 100
32542: PUSH
32543: LD_VAR 0 8
32547: PLUS
32548: EQUAL
32549: IFFALSE 32594
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32551: LD_ADDR_VAR 0 2
32555: PUSH
32556: LD_VAR 0 2
32560: PPUSH
32561: LD_INT 2
32563: PPUSH
32564: LD_VAR 0 2
32568: PUSH
32569: LD_INT 2
32571: ARRAY
32572: PPUSH
32573: LD_INT 1
32575: PPUSH
32576: CALL_OW 3
32580: PPUSH
32581: CALL_OW 1
32585: ST_TO_ADDR
// tmp := 1 ;
32586: LD_ADDR_VAR 0 3
32590: PUSH
32591: LD_STRING 1
32593: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32594: LD_ADDR_VAR 0 6
32598: PUSH
32599: LD_VAR 0 6
32603: PUSH
32604: LD_VAR 0 3
32608: STR
32609: ST_TO_ADDR
// end ;
32610: GO 32506
32612: POP
32613: POP
// if isGameLoad then
32614: LD_VAR 0 1
32618: IFFALSE 33093
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
32620: LD_ADDR_VAR 0 4
32624: PUSH
32625: LD_EXP 72
32629: PUSH
32630: LD_EXP 71
32634: PUSH
32635: LD_EXP 73
32639: PUSH
32640: LD_EXP 70
32644: PUSH
32645: LD_EXP 74
32649: PUSH
32650: LD_EXP 75
32654: PUSH
32655: LD_EXP 76
32659: PUSH
32660: LD_EXP 77
32664: PUSH
32665: LD_EXP 78
32669: PUSH
32670: LD_EXP 79
32674: PUSH
32675: LD_EXP 80
32679: PUSH
32680: LD_EXP 81
32684: PUSH
32685: LD_EXP 82
32689: PUSH
32690: LD_EXP 83
32694: PUSH
32695: LD_EXP 91
32699: PUSH
32700: LD_EXP 92
32704: PUSH
32705: LD_EXP 93
32709: PUSH
32710: LD_EXP 94
32714: PUSH
32715: LD_EXP 96
32719: PUSH
32720: LD_EXP 97
32724: PUSH
32725: LD_EXP 98
32729: PUSH
32730: LD_EXP 101
32734: PUSH
32735: LD_EXP 103
32739: PUSH
32740: LD_EXP 104
32744: PUSH
32745: LD_EXP 105
32749: PUSH
32750: LD_EXP 107
32754: PUSH
32755: LD_EXP 108
32759: PUSH
32760: LD_EXP 111
32764: PUSH
32765: LD_EXP 112
32769: PUSH
32770: LD_EXP 113
32774: PUSH
32775: LD_EXP 114
32779: PUSH
32780: LD_EXP 115
32784: PUSH
32785: LD_EXP 116
32789: PUSH
32790: LD_EXP 117
32794: PUSH
32795: LD_EXP 118
32799: PUSH
32800: LD_EXP 119
32804: PUSH
32805: LD_EXP 84
32809: PUSH
32810: LD_EXP 85
32814: PUSH
32815: LD_EXP 88
32819: PUSH
32820: LD_EXP 89
32824: PUSH
32825: LD_EXP 90
32829: PUSH
32830: LD_EXP 86
32834: PUSH
32835: LD_EXP 87
32839: PUSH
32840: LD_EXP 95
32844: PUSH
32845: LD_EXP 99
32849: PUSH
32850: LD_EXP 100
32854: PUSH
32855: LD_EXP 102
32859: PUSH
32860: LD_EXP 106
32864: PUSH
32865: LD_EXP 109
32869: PUSH
32870: LD_EXP 110
32874: PUSH
32875: LD_EXP 120
32879: PUSH
32880: LD_EXP 121
32884: PUSH
32885: LD_EXP 122
32889: PUSH
32890: LD_EXP 123
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: ST_TO_ADDR
// tmp :=  ;
32951: LD_ADDR_VAR 0 3
32955: PUSH
32956: LD_STRING 
32958: ST_TO_ADDR
// for i = 1 to normalCounter do
32959: LD_ADDR_VAR 0 8
32963: PUSH
32964: DOUBLE
32965: LD_INT 1
32967: DEC
32968: ST_TO_ADDR
32969: LD_EXP 68
32973: PUSH
32974: FOR_TO
32975: IFFALSE 33011
// begin if flags [ i ] then
32977: LD_VAR 0 4
32981: PUSH
32982: LD_VAR 0 8
32986: ARRAY
32987: IFFALSE 33009
// tmp := tmp & i & ; ;
32989: LD_ADDR_VAR 0 3
32993: PUSH
32994: LD_VAR 0 3
32998: PUSH
32999: LD_VAR 0 8
33003: STR
33004: PUSH
33005: LD_STRING ;
33007: STR
33008: ST_TO_ADDR
// end ;
33009: GO 32974
33011: POP
33012: POP
// for i = 1 to hardcoreCounter do
33013: LD_ADDR_VAR 0 8
33017: PUSH
33018: DOUBLE
33019: LD_INT 1
33021: DEC
33022: ST_TO_ADDR
33023: LD_EXP 69
33027: PUSH
33028: FOR_TO
33029: IFFALSE 33075
// begin if flags [ normalCounter + i ] then
33031: LD_VAR 0 4
33035: PUSH
33036: LD_EXP 68
33040: PUSH
33041: LD_VAR 0 8
33045: PLUS
33046: ARRAY
33047: IFFALSE 33073
// tmp := tmp & ( 100 + i ) & ; ;
33049: LD_ADDR_VAR 0 3
33053: PUSH
33054: LD_VAR 0 3
33058: PUSH
33059: LD_INT 100
33061: PUSH
33062: LD_VAR 0 8
33066: PLUS
33067: STR
33068: PUSH
33069: LD_STRING ;
33071: STR
33072: ST_TO_ADDR
// end ;
33073: GO 33028
33075: POP
33076: POP
// if tmp then
33077: LD_VAR 0 3
33081: IFFALSE 33093
// active := tmp ;
33083: LD_ADDR_VAR 0 7
33087: PUSH
33088: LD_VAR 0 3
33092: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
33093: LD_STRING getStreamItemsFromMission("
33095: PUSH
33096: LD_VAR 0 5
33100: STR
33101: PUSH
33102: LD_STRING ","
33104: STR
33105: PUSH
33106: LD_VAR 0 6
33110: STR
33111: PUSH
33112: LD_STRING ","
33114: STR
33115: PUSH
33116: LD_VAR 0 7
33120: STR
33121: PUSH
33122: LD_STRING ")
33124: STR
33125: PPUSH
33126: CALL_OW 559
// end else
33130: GO 33139
// ToLua ( getStreamItemsFromMission("","","") ) ;
33132: LD_STRING getStreamItemsFromMission("","","")
33134: PPUSH
33135: CALL_OW 559
// end ;
33139: LD_VAR 0 2
33143: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
33144: LD_EXP 67
33148: PUSH
33149: LD_EXP 72
33153: AND
33154: IFFALSE 33278
33156: GO 33158
33158: DISABLE
33159: LD_INT 0
33161: PPUSH
33162: PPUSH
// begin enable ;
33163: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
33164: LD_ADDR_VAR 0 2
33168: PUSH
33169: LD_INT 22
33171: PUSH
33172: LD_OWVAR 2
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: LD_INT 34
33186: PUSH
33187: LD_INT 7
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 34
33196: PUSH
33197: LD_INT 45
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 34
33206: PUSH
33207: LD_INT 28
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 34
33216: PUSH
33217: LD_INT 47
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PPUSH
33235: CALL_OW 69
33239: ST_TO_ADDR
// if not tmp then
33240: LD_VAR 0 2
33244: NOT
33245: IFFALSE 33249
// exit ;
33247: GO 33278
// for i in tmp do
33249: LD_ADDR_VAR 0 1
33253: PUSH
33254: LD_VAR 0 2
33258: PUSH
33259: FOR_IN
33260: IFFALSE 33276
// begin SetLives ( i , 0 ) ;
33262: LD_VAR 0 1
33266: PPUSH
33267: LD_INT 0
33269: PPUSH
33270: CALL_OW 234
// end ;
33274: GO 33259
33276: POP
33277: POP
// end ;
33278: PPOPN 2
33280: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
33281: LD_EXP 67
33285: PUSH
33286: LD_EXP 73
33290: AND
33291: IFFALSE 33375
33293: GO 33295
33295: DISABLE
33296: LD_INT 0
33298: PPUSH
33299: PPUSH
// begin enable ;
33300: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
33301: LD_ADDR_VAR 0 2
33305: PUSH
33306: LD_INT 22
33308: PUSH
33309: LD_OWVAR 2
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 32
33320: PUSH
33321: LD_INT 3
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PPUSH
33332: CALL_OW 69
33336: ST_TO_ADDR
// if not tmp then
33337: LD_VAR 0 2
33341: NOT
33342: IFFALSE 33346
// exit ;
33344: GO 33375
// for i in tmp do
33346: LD_ADDR_VAR 0 1
33350: PUSH
33351: LD_VAR 0 2
33355: PUSH
33356: FOR_IN
33357: IFFALSE 33373
// begin SetLives ( i , 0 ) ;
33359: LD_VAR 0 1
33363: PPUSH
33364: LD_INT 0
33366: PPUSH
33367: CALL_OW 234
// end ;
33371: GO 33356
33373: POP
33374: POP
// end ;
33375: PPOPN 2
33377: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
33378: LD_EXP 67
33382: PUSH
33383: LD_EXP 70
33387: AND
33388: IFFALSE 33481
33390: GO 33392
33392: DISABLE
33393: LD_INT 0
33395: PPUSH
// begin enable ;
33396: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
33397: LD_ADDR_VAR 0 1
33401: PUSH
33402: LD_INT 22
33404: PUSH
33405: LD_OWVAR 2
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: LD_INT 25
33419: PUSH
33420: LD_INT 5
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 25
33429: PUSH
33430: LD_INT 9
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 25
33439: PUSH
33440: LD_INT 8
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PPUSH
33457: CALL_OW 69
33461: PUSH
33462: FOR_IN
33463: IFFALSE 33479
// begin SetClass ( i , 1 ) ;
33465: LD_VAR 0 1
33469: PPUSH
33470: LD_INT 1
33472: PPUSH
33473: CALL_OW 336
// end ;
33477: GO 33462
33479: POP
33480: POP
// end ;
33481: PPOPN 1
33483: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
33484: LD_EXP 67
33488: PUSH
33489: LD_EXP 71
33493: AND
33494: PUSH
33495: LD_OWVAR 65
33499: PUSH
33500: LD_INT 7
33502: LESS
33503: AND
33504: IFFALSE 33518
33506: GO 33508
33508: DISABLE
// begin enable ;
33509: ENABLE
// game_speed := 7 ;
33510: LD_ADDR_OWVAR 65
33514: PUSH
33515: LD_INT 7
33517: ST_TO_ADDR
// end ;
33518: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
33519: LD_EXP 67
33523: PUSH
33524: LD_EXP 74
33528: AND
33529: IFFALSE 33731
33531: GO 33533
33533: DISABLE
33534: LD_INT 0
33536: PPUSH
33537: PPUSH
33538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33539: LD_ADDR_VAR 0 3
33543: PUSH
33544: LD_INT 81
33546: PUSH
33547: LD_OWVAR 2
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 21
33558: PUSH
33559: LD_INT 1
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PPUSH
33570: CALL_OW 69
33574: ST_TO_ADDR
// if not tmp then
33575: LD_VAR 0 3
33579: NOT
33580: IFFALSE 33584
// exit ;
33582: GO 33731
// if tmp > 5 then
33584: LD_VAR 0 3
33588: PUSH
33589: LD_INT 5
33591: GREATER
33592: IFFALSE 33604
// k := 5 else
33594: LD_ADDR_VAR 0 2
33598: PUSH
33599: LD_INT 5
33601: ST_TO_ADDR
33602: GO 33614
// k := tmp ;
33604: LD_ADDR_VAR 0 2
33608: PUSH
33609: LD_VAR 0 3
33613: ST_TO_ADDR
// for i := 1 to k do
33614: LD_ADDR_VAR 0 1
33618: PUSH
33619: DOUBLE
33620: LD_INT 1
33622: DEC
33623: ST_TO_ADDR
33624: LD_VAR 0 2
33628: PUSH
33629: FOR_TO
33630: IFFALSE 33729
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
33632: LD_VAR 0 3
33636: PUSH
33637: LD_VAR 0 1
33641: ARRAY
33642: PPUSH
33643: LD_VAR 0 1
33647: PUSH
33648: LD_INT 4
33650: MOD
33651: PUSH
33652: LD_INT 1
33654: PLUS
33655: PPUSH
33656: CALL_OW 259
33660: PUSH
33661: LD_INT 10
33663: LESS
33664: IFFALSE 33727
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
33666: LD_VAR 0 3
33670: PUSH
33671: LD_VAR 0 1
33675: ARRAY
33676: PPUSH
33677: LD_VAR 0 1
33681: PUSH
33682: LD_INT 4
33684: MOD
33685: PUSH
33686: LD_INT 1
33688: PLUS
33689: PPUSH
33690: LD_VAR 0 3
33694: PUSH
33695: LD_VAR 0 1
33699: ARRAY
33700: PPUSH
33701: LD_VAR 0 1
33705: PUSH
33706: LD_INT 4
33708: MOD
33709: PUSH
33710: LD_INT 1
33712: PLUS
33713: PPUSH
33714: CALL_OW 259
33718: PUSH
33719: LD_INT 1
33721: PLUS
33722: PPUSH
33723: CALL_OW 237
33727: GO 33629
33729: POP
33730: POP
// end ;
33731: PPOPN 3
33733: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
33734: LD_EXP 67
33738: PUSH
33739: LD_EXP 75
33743: AND
33744: IFFALSE 33764
33746: GO 33748
33748: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
33749: LD_INT 4
33751: PPUSH
33752: LD_OWVAR 2
33756: PPUSH
33757: LD_INT 0
33759: PPUSH
33760: CALL_OW 324
33764: END
// every 0 0$1 trigger StreamModeActive and sShovel do
33765: LD_EXP 67
33769: PUSH
33770: LD_EXP 104
33774: AND
33775: IFFALSE 33795
33777: GO 33779
33779: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
33780: LD_INT 19
33782: PPUSH
33783: LD_OWVAR 2
33787: PPUSH
33788: LD_INT 0
33790: PPUSH
33791: CALL_OW 324
33795: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
33796: LD_EXP 67
33800: PUSH
33801: LD_EXP 76
33805: AND
33806: IFFALSE 33908
33808: GO 33810
33810: DISABLE
33811: LD_INT 0
33813: PPUSH
33814: PPUSH
// begin enable ;
33815: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
33816: LD_ADDR_VAR 0 2
33820: PUSH
33821: LD_INT 22
33823: PUSH
33824: LD_OWVAR 2
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 2
33835: PUSH
33836: LD_INT 34
33838: PUSH
33839: LD_INT 11
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 34
33848: PUSH
33849: LD_INT 30
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: LIST
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PPUSH
33865: CALL_OW 69
33869: ST_TO_ADDR
// if not tmp then
33870: LD_VAR 0 2
33874: NOT
33875: IFFALSE 33879
// exit ;
33877: GO 33908
// for i in tmp do
33879: LD_ADDR_VAR 0 1
33883: PUSH
33884: LD_VAR 0 2
33888: PUSH
33889: FOR_IN
33890: IFFALSE 33906
// begin SetLives ( i , 0 ) ;
33892: LD_VAR 0 1
33896: PPUSH
33897: LD_INT 0
33899: PPUSH
33900: CALL_OW 234
// end ;
33904: GO 33889
33906: POP
33907: POP
// end ;
33908: PPOPN 2
33910: END
// every 0 0$1 trigger StreamModeActive and sBunker do
33911: LD_EXP 67
33915: PUSH
33916: LD_EXP 77
33920: AND
33921: IFFALSE 33941
33923: GO 33925
33925: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
33926: LD_INT 32
33928: PPUSH
33929: LD_OWVAR 2
33933: PPUSH
33934: LD_INT 0
33936: PPUSH
33937: CALL_OW 324
33941: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
33942: LD_EXP 67
33946: PUSH
33947: LD_EXP 78
33951: AND
33952: IFFALSE 34133
33954: GO 33956
33956: DISABLE
33957: LD_INT 0
33959: PPUSH
33960: PPUSH
33961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
33962: LD_ADDR_VAR 0 2
33966: PUSH
33967: LD_INT 22
33969: PUSH
33970: LD_OWVAR 2
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 33
33981: PUSH
33982: LD_INT 3
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PPUSH
33993: CALL_OW 69
33997: ST_TO_ADDR
// if not tmp then
33998: LD_VAR 0 2
34002: NOT
34003: IFFALSE 34007
// exit ;
34005: GO 34133
// side := 0 ;
34007: LD_ADDR_VAR 0 3
34011: PUSH
34012: LD_INT 0
34014: ST_TO_ADDR
// for i := 1 to 8 do
34015: LD_ADDR_VAR 0 1
34019: PUSH
34020: DOUBLE
34021: LD_INT 1
34023: DEC
34024: ST_TO_ADDR
34025: LD_INT 8
34027: PUSH
34028: FOR_TO
34029: IFFALSE 34077
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
34031: LD_OWVAR 2
34035: PUSH
34036: LD_VAR 0 1
34040: NONEQUAL
34041: PUSH
34042: LD_OWVAR 2
34046: PPUSH
34047: LD_VAR 0 1
34051: PPUSH
34052: CALL_OW 81
34056: PUSH
34057: LD_INT 2
34059: EQUAL
34060: AND
34061: IFFALSE 34075
// begin side := i ;
34063: LD_ADDR_VAR 0 3
34067: PUSH
34068: LD_VAR 0 1
34072: ST_TO_ADDR
// break ;
34073: GO 34077
// end ;
34075: GO 34028
34077: POP
34078: POP
// if not side then
34079: LD_VAR 0 3
34083: NOT
34084: IFFALSE 34088
// exit ;
34086: GO 34133
// for i := 1 to tmp do
34088: LD_ADDR_VAR 0 1
34092: PUSH
34093: DOUBLE
34094: LD_INT 1
34096: DEC
34097: ST_TO_ADDR
34098: LD_VAR 0 2
34102: PUSH
34103: FOR_TO
34104: IFFALSE 34131
// if Prob ( 60 ) then
34106: LD_INT 60
34108: PPUSH
34109: CALL_OW 13
34113: IFFALSE 34129
// SetSide ( i , side ) ;
34115: LD_VAR 0 1
34119: PPUSH
34120: LD_VAR 0 3
34124: PPUSH
34125: CALL_OW 235
34129: GO 34103
34131: POP
34132: POP
// end ;
34133: PPOPN 3
34135: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
34136: LD_EXP 67
34140: PUSH
34141: LD_EXP 80
34145: AND
34146: IFFALSE 34265
34148: GO 34150
34150: DISABLE
34151: LD_INT 0
34153: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
34154: LD_ADDR_VAR 0 1
34158: PUSH
34159: LD_INT 22
34161: PUSH
34162: LD_OWVAR 2
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 21
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: LD_INT 23
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: LIST
34202: PPUSH
34203: CALL_OW 69
34207: PUSH
34208: FOR_IN
34209: IFFALSE 34263
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
34211: LD_VAR 0 1
34215: PPUSH
34216: CALL_OW 257
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: LD_INT 3
34229: PUSH
34230: LD_INT 4
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: IN
34239: IFFALSE 34261
// SetClass ( un , rand ( 1 , 4 ) ) ;
34241: LD_VAR 0 1
34245: PPUSH
34246: LD_INT 1
34248: PPUSH
34249: LD_INT 4
34251: PPUSH
34252: CALL_OW 12
34256: PPUSH
34257: CALL_OW 336
34261: GO 34208
34263: POP
34264: POP
// end ;
34265: PPOPN 1
34267: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
34268: LD_EXP 67
34272: PUSH
34273: LD_EXP 79
34277: AND
34278: IFFALSE 34357
34280: GO 34282
34282: DISABLE
34283: LD_INT 0
34285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34286: LD_ADDR_VAR 0 1
34290: PUSH
34291: LD_INT 22
34293: PUSH
34294: LD_OWVAR 2
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 21
34305: PUSH
34306: LD_INT 3
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PPUSH
34317: CALL_OW 69
34321: ST_TO_ADDR
// if not tmp then
34322: LD_VAR 0 1
34326: NOT
34327: IFFALSE 34331
// exit ;
34329: GO 34357
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
34331: LD_VAR 0 1
34335: PUSH
34336: LD_INT 1
34338: PPUSH
34339: LD_VAR 0 1
34343: PPUSH
34344: CALL_OW 12
34348: ARRAY
34349: PPUSH
34350: LD_INT 100
34352: PPUSH
34353: CALL_OW 234
// end ;
34357: PPOPN 1
34359: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
34360: LD_EXP 67
34364: PUSH
34365: LD_EXP 81
34369: AND
34370: IFFALSE 34468
34372: GO 34374
34374: DISABLE
34375: LD_INT 0
34377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
34378: LD_ADDR_VAR 0 1
34382: PUSH
34383: LD_INT 22
34385: PUSH
34386: LD_OWVAR 2
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 21
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PPUSH
34409: CALL_OW 69
34413: ST_TO_ADDR
// if not tmp then
34414: LD_VAR 0 1
34418: NOT
34419: IFFALSE 34423
// exit ;
34421: GO 34468
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
34423: LD_VAR 0 1
34427: PUSH
34428: LD_INT 1
34430: PPUSH
34431: LD_VAR 0 1
34435: PPUSH
34436: CALL_OW 12
34440: ARRAY
34441: PPUSH
34442: LD_INT 1
34444: PPUSH
34445: LD_INT 4
34447: PPUSH
34448: CALL_OW 12
34452: PPUSH
34453: LD_INT 3000
34455: PPUSH
34456: LD_INT 9000
34458: PPUSH
34459: CALL_OW 12
34463: PPUSH
34464: CALL_OW 492
// end ;
34468: PPOPN 1
34470: END
// every 0 0$1 trigger StreamModeActive and sDepot do
34471: LD_EXP 67
34475: PUSH
34476: LD_EXP 82
34480: AND
34481: IFFALSE 34501
34483: GO 34485
34485: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
34486: LD_INT 1
34488: PPUSH
34489: LD_OWVAR 2
34493: PPUSH
34494: LD_INT 0
34496: PPUSH
34497: CALL_OW 324
34501: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
34502: LD_EXP 67
34506: PUSH
34507: LD_EXP 83
34511: AND
34512: IFFALSE 34595
34514: GO 34516
34516: DISABLE
34517: LD_INT 0
34519: PPUSH
34520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34521: LD_ADDR_VAR 0 2
34525: PUSH
34526: LD_INT 22
34528: PUSH
34529: LD_OWVAR 2
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 21
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PPUSH
34552: CALL_OW 69
34556: ST_TO_ADDR
// if not tmp then
34557: LD_VAR 0 2
34561: NOT
34562: IFFALSE 34566
// exit ;
34564: GO 34595
// for i in tmp do
34566: LD_ADDR_VAR 0 1
34570: PUSH
34571: LD_VAR 0 2
34575: PUSH
34576: FOR_IN
34577: IFFALSE 34593
// SetBLevel ( i , 10 ) ;
34579: LD_VAR 0 1
34583: PPUSH
34584: LD_INT 10
34586: PPUSH
34587: CALL_OW 241
34591: GO 34576
34593: POP
34594: POP
// end ;
34595: PPOPN 2
34597: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
34598: LD_EXP 67
34602: PUSH
34603: LD_EXP 84
34607: AND
34608: IFFALSE 34719
34610: GO 34612
34612: DISABLE
34613: LD_INT 0
34615: PPUSH
34616: PPUSH
34617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34618: LD_ADDR_VAR 0 3
34622: PUSH
34623: LD_INT 22
34625: PUSH
34626: LD_OWVAR 2
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 25
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PPUSH
34649: CALL_OW 69
34653: ST_TO_ADDR
// if not tmp then
34654: LD_VAR 0 3
34658: NOT
34659: IFFALSE 34663
// exit ;
34661: GO 34719
// un := tmp [ rand ( 1 , tmp ) ] ;
34663: LD_ADDR_VAR 0 2
34667: PUSH
34668: LD_VAR 0 3
34672: PUSH
34673: LD_INT 1
34675: PPUSH
34676: LD_VAR 0 3
34680: PPUSH
34681: CALL_OW 12
34685: ARRAY
34686: ST_TO_ADDR
// if Crawls ( un ) then
34687: LD_VAR 0 2
34691: PPUSH
34692: CALL_OW 318
34696: IFFALSE 34707
// ComWalk ( un ) ;
34698: LD_VAR 0 2
34702: PPUSH
34703: CALL_OW 138
// SetClass ( un , class_sniper ) ;
34707: LD_VAR 0 2
34711: PPUSH
34712: LD_INT 5
34714: PPUSH
34715: CALL_OW 336
// end ;
34719: PPOPN 3
34721: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
34722: LD_EXP 67
34726: PUSH
34727: LD_EXP 85
34731: AND
34732: PUSH
34733: LD_OWVAR 67
34737: PUSH
34738: LD_INT 4
34740: LESS
34741: AND
34742: IFFALSE 34761
34744: GO 34746
34746: DISABLE
// begin Difficulty := Difficulty + 1 ;
34747: LD_ADDR_OWVAR 67
34751: PUSH
34752: LD_OWVAR 67
34756: PUSH
34757: LD_INT 1
34759: PLUS
34760: ST_TO_ADDR
// end ;
34761: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
34762: LD_EXP 67
34766: PUSH
34767: LD_EXP 86
34771: AND
34772: IFFALSE 34875
34774: GO 34776
34776: DISABLE
34777: LD_INT 0
34779: PPUSH
// begin for i := 1 to 5 do
34780: LD_ADDR_VAR 0 1
34784: PUSH
34785: DOUBLE
34786: LD_INT 1
34788: DEC
34789: ST_TO_ADDR
34790: LD_INT 5
34792: PUSH
34793: FOR_TO
34794: IFFALSE 34873
// begin uc_nation := nation_nature ;
34796: LD_ADDR_OWVAR 21
34800: PUSH
34801: LD_INT 0
34803: ST_TO_ADDR
// uc_side := 0 ;
34804: LD_ADDR_OWVAR 20
34808: PUSH
34809: LD_INT 0
34811: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34812: LD_ADDR_OWVAR 29
34816: PUSH
34817: LD_INT 12
34819: PUSH
34820: LD_INT 12
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: ST_TO_ADDR
// hc_agressivity := 20 ;
34827: LD_ADDR_OWVAR 35
34831: PUSH
34832: LD_INT 20
34834: ST_TO_ADDR
// hc_class := class_tiger ;
34835: LD_ADDR_OWVAR 28
34839: PUSH
34840: LD_INT 14
34842: ST_TO_ADDR
// hc_gallery :=  ;
34843: LD_ADDR_OWVAR 33
34847: PUSH
34848: LD_STRING 
34850: ST_TO_ADDR
// hc_name :=  ;
34851: LD_ADDR_OWVAR 26
34855: PUSH
34856: LD_STRING 
34858: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
34859: CALL_OW 44
34863: PPUSH
34864: LD_INT 0
34866: PPUSH
34867: CALL_OW 51
// end ;
34871: GO 34793
34873: POP
34874: POP
// end ;
34875: PPOPN 1
34877: END
// every 0 0$1 trigger StreamModeActive and sBomb do
34878: LD_EXP 67
34882: PUSH
34883: LD_EXP 87
34887: AND
34888: IFFALSE 34897
34890: GO 34892
34892: DISABLE
// StreamSibBomb ;
34893: CALL 34898 0 0
34897: END
// export function StreamSibBomb ; var i , x , y ; begin
34898: LD_INT 0
34900: PPUSH
34901: PPUSH
34902: PPUSH
34903: PPUSH
// result := false ;
34904: LD_ADDR_VAR 0 1
34908: PUSH
34909: LD_INT 0
34911: ST_TO_ADDR
// for i := 1 to 16 do
34912: LD_ADDR_VAR 0 2
34916: PUSH
34917: DOUBLE
34918: LD_INT 1
34920: DEC
34921: ST_TO_ADDR
34922: LD_INT 16
34924: PUSH
34925: FOR_TO
34926: IFFALSE 35125
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34928: LD_ADDR_VAR 0 3
34932: PUSH
34933: LD_INT 10
34935: PUSH
34936: LD_INT 20
34938: PUSH
34939: LD_INT 30
34941: PUSH
34942: LD_INT 40
34944: PUSH
34945: LD_INT 50
34947: PUSH
34948: LD_INT 60
34950: PUSH
34951: LD_INT 70
34953: PUSH
34954: LD_INT 80
34956: PUSH
34957: LD_INT 90
34959: PUSH
34960: LD_INT 100
34962: PUSH
34963: LD_INT 110
34965: PUSH
34966: LD_INT 120
34968: PUSH
34969: LD_INT 130
34971: PUSH
34972: LD_INT 140
34974: PUSH
34975: LD_INT 150
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PPUSH
34998: LD_INT 15
35000: PPUSH
35001: CALL_OW 12
35005: ARRAY
35006: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35007: LD_ADDR_VAR 0 4
35011: PUSH
35012: LD_INT 10
35014: PUSH
35015: LD_INT 20
35017: PUSH
35018: LD_INT 30
35020: PUSH
35021: LD_INT 40
35023: PUSH
35024: LD_INT 50
35026: PUSH
35027: LD_INT 60
35029: PUSH
35030: LD_INT 70
35032: PUSH
35033: LD_INT 80
35035: PUSH
35036: LD_INT 90
35038: PUSH
35039: LD_INT 100
35041: PUSH
35042: LD_INT 110
35044: PUSH
35045: LD_INT 120
35047: PUSH
35048: LD_INT 130
35050: PUSH
35051: LD_INT 140
35053: PUSH
35054: LD_INT 150
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: PPUSH
35077: LD_INT 15
35079: PPUSH
35080: CALL_OW 12
35084: ARRAY
35085: ST_TO_ADDR
// if ValidHex ( x , y ) then
35086: LD_VAR 0 3
35090: PPUSH
35091: LD_VAR 0 4
35095: PPUSH
35096: CALL_OW 488
35100: IFFALSE 35123
// begin result := [ x , y ] ;
35102: LD_ADDR_VAR 0 1
35106: PUSH
35107: LD_VAR 0 3
35111: PUSH
35112: LD_VAR 0 4
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: ST_TO_ADDR
// break ;
35121: GO 35125
// end ; end ;
35123: GO 34925
35125: POP
35126: POP
// if result then
35127: LD_VAR 0 1
35131: IFFALSE 35191
// begin ToLua ( playSibBomb() ) ;
35133: LD_STRING playSibBomb()
35135: PPUSH
35136: CALL_OW 559
// wait ( 0 0$14 ) ;
35140: LD_INT 490
35142: PPUSH
35143: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
35147: LD_VAR 0 1
35151: PUSH
35152: LD_INT 1
35154: ARRAY
35155: PPUSH
35156: LD_VAR 0 1
35160: PUSH
35161: LD_INT 2
35163: ARRAY
35164: PPUSH
35165: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
35169: LD_VAR 0 1
35173: PUSH
35174: LD_INT 1
35176: ARRAY
35177: PPUSH
35178: LD_VAR 0 1
35182: PUSH
35183: LD_INT 2
35185: ARRAY
35186: PPUSH
35187: CALL_OW 429
// end ; end ;
35191: LD_VAR 0 1
35195: RET
// every 0 0$1 trigger StreamModeActive and sReset do
35196: LD_EXP 67
35200: PUSH
35201: LD_EXP 89
35205: AND
35206: IFFALSE 35218
35208: GO 35210
35210: DISABLE
// YouLost (  ) ;
35211: LD_STRING 
35213: PPUSH
35214: CALL_OW 104
35218: END
// every 0 0$1 trigger StreamModeActive and sFog do
35219: LD_EXP 67
35223: PUSH
35224: LD_EXP 88
35228: AND
35229: IFFALSE 35243
35231: GO 35233
35233: DISABLE
// FogOff ( your_side ) ;
35234: LD_OWVAR 2
35238: PPUSH
35239: CALL_OW 344
35243: END
// every 0 0$1 trigger StreamModeActive and sSun do
35244: LD_EXP 67
35248: PUSH
35249: LD_EXP 90
35253: AND
35254: IFFALSE 35282
35256: GO 35258
35258: DISABLE
// begin solar_recharge_percent := 0 ;
35259: LD_ADDR_OWVAR 79
35263: PUSH
35264: LD_INT 0
35266: ST_TO_ADDR
// wait ( 5 5$00 ) ;
35267: LD_INT 10500
35269: PPUSH
35270: CALL_OW 67
// solar_recharge_percent := 100 ;
35274: LD_ADDR_OWVAR 79
35278: PUSH
35279: LD_INT 100
35281: ST_TO_ADDR
// end ;
35282: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
35283: LD_EXP 67
35287: PUSH
35288: LD_EXP 91
35292: AND
35293: IFFALSE 35532
35295: GO 35297
35297: DISABLE
35298: LD_INT 0
35300: PPUSH
35301: PPUSH
35302: PPUSH
// begin tmp := [ ] ;
35303: LD_ADDR_VAR 0 3
35307: PUSH
35308: EMPTY
35309: ST_TO_ADDR
// for i := 1 to 6 do
35310: LD_ADDR_VAR 0 1
35314: PUSH
35315: DOUBLE
35316: LD_INT 1
35318: DEC
35319: ST_TO_ADDR
35320: LD_INT 6
35322: PUSH
35323: FOR_TO
35324: IFFALSE 35429
// begin uc_nation := nation_nature ;
35326: LD_ADDR_OWVAR 21
35330: PUSH
35331: LD_INT 0
35333: ST_TO_ADDR
// uc_side := 0 ;
35334: LD_ADDR_OWVAR 20
35338: PUSH
35339: LD_INT 0
35341: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35342: LD_ADDR_OWVAR 29
35346: PUSH
35347: LD_INT 12
35349: PUSH
35350: LD_INT 12
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: ST_TO_ADDR
// hc_agressivity := 20 ;
35357: LD_ADDR_OWVAR 35
35361: PUSH
35362: LD_INT 20
35364: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
35365: LD_ADDR_OWVAR 28
35369: PUSH
35370: LD_INT 17
35372: ST_TO_ADDR
// hc_gallery :=  ;
35373: LD_ADDR_OWVAR 33
35377: PUSH
35378: LD_STRING 
35380: ST_TO_ADDR
// hc_name :=  ;
35381: LD_ADDR_OWVAR 26
35385: PUSH
35386: LD_STRING 
35388: ST_TO_ADDR
// un := CreateHuman ;
35389: LD_ADDR_VAR 0 2
35393: PUSH
35394: CALL_OW 44
35398: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
35399: LD_VAR 0 2
35403: PPUSH
35404: LD_INT 1
35406: PPUSH
35407: CALL_OW 51
// tmp := tmp ^ un ;
35411: LD_ADDR_VAR 0 3
35415: PUSH
35416: LD_VAR 0 3
35420: PUSH
35421: LD_VAR 0 2
35425: ADD
35426: ST_TO_ADDR
// end ;
35427: GO 35323
35429: POP
35430: POP
// repeat wait ( 0 0$1 ) ;
35431: LD_INT 35
35433: PPUSH
35434: CALL_OW 67
// for un in tmp do
35438: LD_ADDR_VAR 0 2
35442: PUSH
35443: LD_VAR 0 3
35447: PUSH
35448: FOR_IN
35449: IFFALSE 35523
// begin if IsDead ( un ) then
35451: LD_VAR 0 2
35455: PPUSH
35456: CALL_OW 301
35460: IFFALSE 35480
// begin tmp := tmp diff un ;
35462: LD_ADDR_VAR 0 3
35466: PUSH
35467: LD_VAR 0 3
35471: PUSH
35472: LD_VAR 0 2
35476: DIFF
35477: ST_TO_ADDR
// continue ;
35478: GO 35448
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
35480: LD_VAR 0 2
35484: PPUSH
35485: LD_INT 3
35487: PUSH
35488: LD_INT 22
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PPUSH
35502: CALL_OW 69
35506: PPUSH
35507: LD_VAR 0 2
35511: PPUSH
35512: CALL_OW 74
35516: PPUSH
35517: CALL_OW 115
// end ;
35521: GO 35448
35523: POP
35524: POP
// until not tmp ;
35525: LD_VAR 0 3
35529: NOT
35530: IFFALSE 35431
// end ;
35532: PPOPN 3
35534: END
// every 0 0$1 trigger StreamModeActive and sTroll do
35535: LD_EXP 67
35539: PUSH
35540: LD_EXP 92
35544: AND
35545: IFFALSE 35599
35547: GO 35549
35549: DISABLE
// begin ToLua ( displayTroll(); ) ;
35550: LD_STRING displayTroll();
35552: PPUSH
35553: CALL_OW 559
// wait ( 3 3$00 ) ;
35557: LD_INT 6300
35559: PPUSH
35560: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35564: LD_STRING hideTroll();
35566: PPUSH
35567: CALL_OW 559
// wait ( 1 1$00 ) ;
35571: LD_INT 2100
35573: PPUSH
35574: CALL_OW 67
// ToLua ( displayTroll(); ) ;
35578: LD_STRING displayTroll();
35580: PPUSH
35581: CALL_OW 559
// wait ( 1 1$00 ) ;
35585: LD_INT 2100
35587: PPUSH
35588: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35592: LD_STRING hideTroll();
35594: PPUSH
35595: CALL_OW 559
// end ;
35599: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
35600: LD_EXP 67
35604: PUSH
35605: LD_EXP 93
35609: AND
35610: IFFALSE 35673
35612: GO 35614
35614: DISABLE
35615: LD_INT 0
35617: PPUSH
// begin p := 0 ;
35618: LD_ADDR_VAR 0 1
35622: PUSH
35623: LD_INT 0
35625: ST_TO_ADDR
// repeat game_speed := 1 ;
35626: LD_ADDR_OWVAR 65
35630: PUSH
35631: LD_INT 1
35633: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35634: LD_INT 35
35636: PPUSH
35637: CALL_OW 67
// p := p + 1 ;
35641: LD_ADDR_VAR 0 1
35645: PUSH
35646: LD_VAR 0 1
35650: PUSH
35651: LD_INT 1
35653: PLUS
35654: ST_TO_ADDR
// until p >= 60 ;
35655: LD_VAR 0 1
35659: PUSH
35660: LD_INT 60
35662: GREATEREQUAL
35663: IFFALSE 35626
// game_speed := 4 ;
35665: LD_ADDR_OWVAR 65
35669: PUSH
35670: LD_INT 4
35672: ST_TO_ADDR
// end ;
35673: PPOPN 1
35675: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
35676: LD_EXP 67
35680: PUSH
35681: LD_EXP 94
35685: AND
35686: IFFALSE 35832
35688: GO 35690
35690: DISABLE
35691: LD_INT 0
35693: PPUSH
35694: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35695: LD_ADDR_VAR 0 1
35699: PUSH
35700: LD_INT 22
35702: PUSH
35703: LD_OWVAR 2
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: LD_INT 30
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 30
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PPUSH
35744: CALL_OW 69
35748: ST_TO_ADDR
// if not depot then
35749: LD_VAR 0 1
35753: NOT
35754: IFFALSE 35758
// exit ;
35756: GO 35832
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
35758: LD_ADDR_VAR 0 2
35762: PUSH
35763: LD_VAR 0 1
35767: PUSH
35768: LD_INT 1
35770: PPUSH
35771: LD_VAR 0 1
35775: PPUSH
35776: CALL_OW 12
35780: ARRAY
35781: PPUSH
35782: CALL_OW 274
35786: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
35787: LD_VAR 0 2
35791: PPUSH
35792: LD_INT 1
35794: PPUSH
35795: LD_INT 0
35797: PPUSH
35798: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
35802: LD_VAR 0 2
35806: PPUSH
35807: LD_INT 2
35809: PPUSH
35810: LD_INT 0
35812: PPUSH
35813: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
35817: LD_VAR 0 2
35821: PPUSH
35822: LD_INT 3
35824: PPUSH
35825: LD_INT 0
35827: PPUSH
35828: CALL_OW 277
// end ;
35832: PPOPN 2
35834: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
35835: LD_EXP 67
35839: PUSH
35840: LD_EXP 95
35844: AND
35845: IFFALSE 35942
35847: GO 35849
35849: DISABLE
35850: LD_INT 0
35852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35853: LD_ADDR_VAR 0 1
35857: PUSH
35858: LD_INT 22
35860: PUSH
35861: LD_OWVAR 2
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 21
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: LD_INT 23
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: PPUSH
35902: CALL_OW 69
35906: ST_TO_ADDR
// if not tmp then
35907: LD_VAR 0 1
35911: NOT
35912: IFFALSE 35916
// exit ;
35914: GO 35942
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
35916: LD_VAR 0 1
35920: PUSH
35921: LD_INT 1
35923: PPUSH
35924: LD_VAR 0 1
35928: PPUSH
35929: CALL_OW 12
35933: ARRAY
35934: PPUSH
35935: LD_INT 200
35937: PPUSH
35938: CALL_OW 234
// end ;
35942: PPOPN 1
35944: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
35945: LD_EXP 67
35949: PUSH
35950: LD_EXP 96
35954: AND
35955: IFFALSE 36034
35957: GO 35959
35959: DISABLE
35960: LD_INT 0
35962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
35963: LD_ADDR_VAR 0 1
35967: PUSH
35968: LD_INT 22
35970: PUSH
35971: LD_OWVAR 2
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 21
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PPUSH
35994: CALL_OW 69
35998: ST_TO_ADDR
// if not tmp then
35999: LD_VAR 0 1
36003: NOT
36004: IFFALSE 36008
// exit ;
36006: GO 36034
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
36008: LD_VAR 0 1
36012: PUSH
36013: LD_INT 1
36015: PPUSH
36016: LD_VAR 0 1
36020: PPUSH
36021: CALL_OW 12
36025: ARRAY
36026: PPUSH
36027: LD_INT 60
36029: PPUSH
36030: CALL_OW 234
// end ;
36034: PPOPN 1
36036: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
36037: LD_EXP 67
36041: PUSH
36042: LD_EXP 97
36046: AND
36047: IFFALSE 36146
36049: GO 36051
36051: DISABLE
36052: LD_INT 0
36054: PPUSH
36055: PPUSH
// begin enable ;
36056: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
36057: LD_ADDR_VAR 0 1
36061: PUSH
36062: LD_INT 22
36064: PUSH
36065: LD_OWVAR 2
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 61
36076: PUSH
36077: EMPTY
36078: LIST
36079: PUSH
36080: LD_INT 33
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: PPUSH
36095: CALL_OW 69
36099: ST_TO_ADDR
// if not tmp then
36100: LD_VAR 0 1
36104: NOT
36105: IFFALSE 36109
// exit ;
36107: GO 36146
// for i in tmp do
36109: LD_ADDR_VAR 0 2
36113: PUSH
36114: LD_VAR 0 1
36118: PUSH
36119: FOR_IN
36120: IFFALSE 36144
// if IsControledBy ( i ) then
36122: LD_VAR 0 2
36126: PPUSH
36127: CALL_OW 312
36131: IFFALSE 36142
// ComUnlink ( i ) ;
36133: LD_VAR 0 2
36137: PPUSH
36138: CALL_OW 136
36142: GO 36119
36144: POP
36145: POP
// end ;
36146: PPOPN 2
36148: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
36149: LD_EXP 67
36153: PUSH
36154: LD_EXP 98
36158: AND
36159: IFFALSE 36299
36161: GO 36163
36163: DISABLE
36164: LD_INT 0
36166: PPUSH
36167: PPUSH
// begin ToLua ( displayPowell(); ) ;
36168: LD_STRING displayPowell();
36170: PPUSH
36171: CALL_OW 559
// uc_side := 0 ;
36175: LD_ADDR_OWVAR 20
36179: PUSH
36180: LD_INT 0
36182: ST_TO_ADDR
// uc_nation := 2 ;
36183: LD_ADDR_OWVAR 21
36187: PUSH
36188: LD_INT 2
36190: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
36191: LD_ADDR_OWVAR 37
36195: PUSH
36196: LD_INT 14
36198: ST_TO_ADDR
// vc_engine := engine_siberite ;
36199: LD_ADDR_OWVAR 39
36203: PUSH
36204: LD_INT 3
36206: ST_TO_ADDR
// vc_control := control_apeman ;
36207: LD_ADDR_OWVAR 38
36211: PUSH
36212: LD_INT 5
36214: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
36215: LD_ADDR_OWVAR 40
36219: PUSH
36220: LD_INT 29
36222: ST_TO_ADDR
// un := CreateVehicle ;
36223: LD_ADDR_VAR 0 2
36227: PUSH
36228: CALL_OW 45
36232: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36233: LD_VAR 0 2
36237: PPUSH
36238: LD_INT 1
36240: PPUSH
36241: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36245: LD_INT 35
36247: PPUSH
36248: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36252: LD_VAR 0 2
36256: PPUSH
36257: LD_INT 22
36259: PUSH
36260: LD_OWVAR 2
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PPUSH
36269: CALL_OW 69
36273: PPUSH
36274: LD_VAR 0 2
36278: PPUSH
36279: CALL_OW 74
36283: PPUSH
36284: CALL_OW 115
// until IsDead ( un ) ;
36288: LD_VAR 0 2
36292: PPUSH
36293: CALL_OW 301
36297: IFFALSE 36245
// end ;
36299: PPOPN 2
36301: END
// every 0 0$1 trigger StreamModeActive and sStu do
36302: LD_EXP 67
36306: PUSH
36307: LD_EXP 106
36311: AND
36312: IFFALSE 36328
36314: GO 36316
36316: DISABLE
// begin ToLua ( displayStucuk(); ) ;
36317: LD_STRING displayStucuk();
36319: PPUSH
36320: CALL_OW 559
// ResetFog ;
36324: CALL_OW 335
// end ;
36328: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
36329: LD_EXP 67
36333: PUSH
36334: LD_EXP 99
36338: AND
36339: IFFALSE 36480
36341: GO 36343
36343: DISABLE
36344: LD_INT 0
36346: PPUSH
36347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36348: LD_ADDR_VAR 0 2
36352: PUSH
36353: LD_INT 22
36355: PUSH
36356: LD_OWVAR 2
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 21
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PPUSH
36379: CALL_OW 69
36383: ST_TO_ADDR
// if not tmp then
36384: LD_VAR 0 2
36388: NOT
36389: IFFALSE 36393
// exit ;
36391: GO 36480
// un := tmp [ rand ( 1 , tmp ) ] ;
36393: LD_ADDR_VAR 0 1
36397: PUSH
36398: LD_VAR 0 2
36402: PUSH
36403: LD_INT 1
36405: PPUSH
36406: LD_VAR 0 2
36410: PPUSH
36411: CALL_OW 12
36415: ARRAY
36416: ST_TO_ADDR
// SetSide ( un , 0 ) ;
36417: LD_VAR 0 1
36421: PPUSH
36422: LD_INT 0
36424: PPUSH
36425: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
36429: LD_VAR 0 1
36433: PPUSH
36434: LD_OWVAR 3
36438: PUSH
36439: LD_VAR 0 1
36443: DIFF
36444: PPUSH
36445: LD_VAR 0 1
36449: PPUSH
36450: CALL_OW 74
36454: PPUSH
36455: CALL_OW 115
// wait ( 0 0$20 ) ;
36459: LD_INT 700
36461: PPUSH
36462: CALL_OW 67
// SetSide ( un , your_side ) ;
36466: LD_VAR 0 1
36470: PPUSH
36471: LD_OWVAR 2
36475: PPUSH
36476: CALL_OW 235
// end ;
36480: PPOPN 2
36482: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
36483: LD_EXP 67
36487: PUSH
36488: LD_EXP 100
36492: AND
36493: IFFALSE 36599
36495: GO 36497
36497: DISABLE
36498: LD_INT 0
36500: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36501: LD_ADDR_VAR 0 1
36505: PUSH
36506: LD_INT 22
36508: PUSH
36509: LD_OWVAR 2
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: LD_INT 30
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 30
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PPUSH
36550: CALL_OW 69
36554: ST_TO_ADDR
// if not depot then
36555: LD_VAR 0 1
36559: NOT
36560: IFFALSE 36564
// exit ;
36562: GO 36599
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
36564: LD_VAR 0 1
36568: PUSH
36569: LD_INT 1
36571: ARRAY
36572: PPUSH
36573: CALL_OW 250
36577: PPUSH
36578: LD_VAR 0 1
36582: PUSH
36583: LD_INT 1
36585: ARRAY
36586: PPUSH
36587: CALL_OW 251
36591: PPUSH
36592: LD_INT 70
36594: PPUSH
36595: CALL_OW 495
// end ;
36599: PPOPN 1
36601: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
36602: LD_EXP 67
36606: PUSH
36607: LD_EXP 101
36611: AND
36612: IFFALSE 36823
36614: GO 36616
36616: DISABLE
36617: LD_INT 0
36619: PPUSH
36620: PPUSH
36621: PPUSH
36622: PPUSH
36623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36624: LD_ADDR_VAR 0 5
36628: PUSH
36629: LD_INT 22
36631: PUSH
36632: LD_OWVAR 2
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 21
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PPUSH
36655: CALL_OW 69
36659: ST_TO_ADDR
// if not tmp then
36660: LD_VAR 0 5
36664: NOT
36665: IFFALSE 36669
// exit ;
36667: GO 36823
// for i in tmp do
36669: LD_ADDR_VAR 0 1
36673: PUSH
36674: LD_VAR 0 5
36678: PUSH
36679: FOR_IN
36680: IFFALSE 36821
// begin d := rand ( 0 , 5 ) ;
36682: LD_ADDR_VAR 0 4
36686: PUSH
36687: LD_INT 0
36689: PPUSH
36690: LD_INT 5
36692: PPUSH
36693: CALL_OW 12
36697: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
36698: LD_ADDR_VAR 0 2
36702: PUSH
36703: LD_VAR 0 1
36707: PPUSH
36708: CALL_OW 250
36712: PPUSH
36713: LD_VAR 0 4
36717: PPUSH
36718: LD_INT 3
36720: PPUSH
36721: LD_INT 12
36723: PPUSH
36724: CALL_OW 12
36728: PPUSH
36729: CALL_OW 272
36733: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
36734: LD_ADDR_VAR 0 3
36738: PUSH
36739: LD_VAR 0 1
36743: PPUSH
36744: CALL_OW 251
36748: PPUSH
36749: LD_VAR 0 4
36753: PPUSH
36754: LD_INT 3
36756: PPUSH
36757: LD_INT 12
36759: PPUSH
36760: CALL_OW 12
36764: PPUSH
36765: CALL_OW 273
36769: ST_TO_ADDR
// if ValidHex ( x , y ) then
36770: LD_VAR 0 2
36774: PPUSH
36775: LD_VAR 0 3
36779: PPUSH
36780: CALL_OW 488
36784: IFFALSE 36819
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
36786: LD_VAR 0 1
36790: PPUSH
36791: LD_VAR 0 2
36795: PPUSH
36796: LD_VAR 0 3
36800: PPUSH
36801: LD_INT 3
36803: PPUSH
36804: LD_INT 6
36806: PPUSH
36807: CALL_OW 12
36811: PPUSH
36812: LD_INT 1
36814: PPUSH
36815: CALL_OW 483
// end ;
36819: GO 36679
36821: POP
36822: POP
// end ;
36823: PPOPN 5
36825: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
36826: LD_EXP 67
36830: PUSH
36831: LD_EXP 102
36835: AND
36836: IFFALSE 36930
36838: GO 36840
36840: DISABLE
36841: LD_INT 0
36843: PPUSH
36844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
36845: LD_ADDR_VAR 0 2
36849: PUSH
36850: LD_INT 22
36852: PUSH
36853: LD_OWVAR 2
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 32
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 21
36874: PUSH
36875: LD_INT 2
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: LIST
36886: PPUSH
36887: CALL_OW 69
36891: ST_TO_ADDR
// if not tmp then
36892: LD_VAR 0 2
36896: NOT
36897: IFFALSE 36901
// exit ;
36899: GO 36930
// for i in tmp do
36901: LD_ADDR_VAR 0 1
36905: PUSH
36906: LD_VAR 0 2
36910: PUSH
36911: FOR_IN
36912: IFFALSE 36928
// SetFuel ( i , 0 ) ;
36914: LD_VAR 0 1
36918: PPUSH
36919: LD_INT 0
36921: PPUSH
36922: CALL_OW 240
36926: GO 36911
36928: POP
36929: POP
// end ;
36930: PPOPN 2
36932: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
36933: LD_EXP 67
36937: PUSH
36938: LD_EXP 103
36942: AND
36943: IFFALSE 37009
36945: GO 36947
36947: DISABLE
36948: LD_INT 0
36950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
36951: LD_ADDR_VAR 0 1
36955: PUSH
36956: LD_INT 22
36958: PUSH
36959: LD_OWVAR 2
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 30
36970: PUSH
36971: LD_INT 29
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PPUSH
36982: CALL_OW 69
36986: ST_TO_ADDR
// if not tmp then
36987: LD_VAR 0 1
36991: NOT
36992: IFFALSE 36996
// exit ;
36994: GO 37009
// DestroyUnit ( tmp [ 1 ] ) ;
36996: LD_VAR 0 1
37000: PUSH
37001: LD_INT 1
37003: ARRAY
37004: PPUSH
37005: CALL_OW 65
// end ;
37009: PPOPN 1
37011: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
37012: LD_EXP 67
37016: PUSH
37017: LD_EXP 105
37021: AND
37022: IFFALSE 37151
37024: GO 37026
37026: DISABLE
37027: LD_INT 0
37029: PPUSH
// begin uc_side := 0 ;
37030: LD_ADDR_OWVAR 20
37034: PUSH
37035: LD_INT 0
37037: ST_TO_ADDR
// uc_nation := nation_arabian ;
37038: LD_ADDR_OWVAR 21
37042: PUSH
37043: LD_INT 2
37045: ST_TO_ADDR
// hc_gallery :=  ;
37046: LD_ADDR_OWVAR 33
37050: PUSH
37051: LD_STRING 
37053: ST_TO_ADDR
// hc_name :=  ;
37054: LD_ADDR_OWVAR 26
37058: PUSH
37059: LD_STRING 
37061: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
37062: LD_INT 1
37064: PPUSH
37065: LD_INT 11
37067: PPUSH
37068: LD_INT 10
37070: PPUSH
37071: CALL_OW 380
// un := CreateHuman ;
37075: LD_ADDR_VAR 0 1
37079: PUSH
37080: CALL_OW 44
37084: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37085: LD_VAR 0 1
37089: PPUSH
37090: LD_INT 1
37092: PPUSH
37093: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37097: LD_INT 35
37099: PPUSH
37100: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37104: LD_VAR 0 1
37108: PPUSH
37109: LD_INT 22
37111: PUSH
37112: LD_OWVAR 2
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PPUSH
37121: CALL_OW 69
37125: PPUSH
37126: LD_VAR 0 1
37130: PPUSH
37131: CALL_OW 74
37135: PPUSH
37136: CALL_OW 115
// until IsDead ( un ) ;
37140: LD_VAR 0 1
37144: PPUSH
37145: CALL_OW 301
37149: IFFALSE 37097
// end ;
37151: PPOPN 1
37153: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
37154: LD_EXP 67
37158: PUSH
37159: LD_EXP 107
37163: AND
37164: IFFALSE 37176
37166: GO 37168
37168: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
37169: LD_STRING earthquake(getX(game), 0, 32)
37171: PPUSH
37172: CALL_OW 559
37176: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
37177: LD_EXP 67
37181: PUSH
37182: LD_EXP 108
37186: AND
37187: IFFALSE 37278
37189: GO 37191
37191: DISABLE
37192: LD_INT 0
37194: PPUSH
// begin enable ;
37195: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
37196: LD_ADDR_VAR 0 1
37200: PUSH
37201: LD_INT 22
37203: PUSH
37204: LD_OWVAR 2
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 21
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 33
37225: PUSH
37226: LD_INT 3
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: LIST
37237: PPUSH
37238: CALL_OW 69
37242: ST_TO_ADDR
// if not tmp then
37243: LD_VAR 0 1
37247: NOT
37248: IFFALSE 37252
// exit ;
37250: GO 37278
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37252: LD_VAR 0 1
37256: PUSH
37257: LD_INT 1
37259: PPUSH
37260: LD_VAR 0 1
37264: PPUSH
37265: CALL_OW 12
37269: ARRAY
37270: PPUSH
37271: LD_INT 1
37273: PPUSH
37274: CALL_OW 234
// end ;
37278: PPOPN 1
37280: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
37281: LD_EXP 67
37285: PUSH
37286: LD_EXP 109
37290: AND
37291: IFFALSE 37432
37293: GO 37295
37295: DISABLE
37296: LD_INT 0
37298: PPUSH
37299: PPUSH
37300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37301: LD_ADDR_VAR 0 3
37305: PUSH
37306: LD_INT 22
37308: PUSH
37309: LD_OWVAR 2
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 25
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PPUSH
37332: CALL_OW 69
37336: ST_TO_ADDR
// if not tmp then
37337: LD_VAR 0 3
37341: NOT
37342: IFFALSE 37346
// exit ;
37344: GO 37432
// un := tmp [ rand ( 1 , tmp ) ] ;
37346: LD_ADDR_VAR 0 2
37350: PUSH
37351: LD_VAR 0 3
37355: PUSH
37356: LD_INT 1
37358: PPUSH
37359: LD_VAR 0 3
37363: PPUSH
37364: CALL_OW 12
37368: ARRAY
37369: ST_TO_ADDR
// if Crawls ( un ) then
37370: LD_VAR 0 2
37374: PPUSH
37375: CALL_OW 318
37379: IFFALSE 37390
// ComWalk ( un ) ;
37381: LD_VAR 0 2
37385: PPUSH
37386: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
37390: LD_VAR 0 2
37394: PPUSH
37395: LD_INT 9
37397: PPUSH
37398: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
37402: LD_INT 28
37404: PPUSH
37405: LD_OWVAR 2
37409: PPUSH
37410: LD_INT 2
37412: PPUSH
37413: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
37417: LD_INT 29
37419: PPUSH
37420: LD_OWVAR 2
37424: PPUSH
37425: LD_INT 2
37427: PPUSH
37428: CALL_OW 322
// end ;
37432: PPOPN 3
37434: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
37435: LD_EXP 67
37439: PUSH
37440: LD_EXP 110
37444: AND
37445: IFFALSE 37556
37447: GO 37449
37449: DISABLE
37450: LD_INT 0
37452: PPUSH
37453: PPUSH
37454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37455: LD_ADDR_VAR 0 3
37459: PUSH
37460: LD_INT 22
37462: PUSH
37463: LD_OWVAR 2
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 25
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PPUSH
37486: CALL_OW 69
37490: ST_TO_ADDR
// if not tmp then
37491: LD_VAR 0 3
37495: NOT
37496: IFFALSE 37500
// exit ;
37498: GO 37556
// un := tmp [ rand ( 1 , tmp ) ] ;
37500: LD_ADDR_VAR 0 2
37504: PUSH
37505: LD_VAR 0 3
37509: PUSH
37510: LD_INT 1
37512: PPUSH
37513: LD_VAR 0 3
37517: PPUSH
37518: CALL_OW 12
37522: ARRAY
37523: ST_TO_ADDR
// if Crawls ( un ) then
37524: LD_VAR 0 2
37528: PPUSH
37529: CALL_OW 318
37533: IFFALSE 37544
// ComWalk ( un ) ;
37535: LD_VAR 0 2
37539: PPUSH
37540: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37544: LD_VAR 0 2
37548: PPUSH
37549: LD_INT 8
37551: PPUSH
37552: CALL_OW 336
// end ;
37556: PPOPN 3
37558: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
37559: LD_EXP 67
37563: PUSH
37564: LD_EXP 111
37568: AND
37569: IFFALSE 37713
37571: GO 37573
37573: DISABLE
37574: LD_INT 0
37576: PPUSH
37577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
37578: LD_ADDR_VAR 0 2
37582: PUSH
37583: LD_INT 22
37585: PUSH
37586: LD_OWVAR 2
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 21
37597: PUSH
37598: LD_INT 2
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: LD_INT 34
37610: PUSH
37611: LD_INT 12
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 34
37620: PUSH
37621: LD_INT 51
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 34
37630: PUSH
37631: LD_INT 32
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: LIST
37648: PPUSH
37649: CALL_OW 69
37653: ST_TO_ADDR
// if not tmp then
37654: LD_VAR 0 2
37658: NOT
37659: IFFALSE 37663
// exit ;
37661: GO 37713
// for i in tmp do
37663: LD_ADDR_VAR 0 1
37667: PUSH
37668: LD_VAR 0 2
37672: PUSH
37673: FOR_IN
37674: IFFALSE 37711
// if GetCargo ( i , mat_artifact ) = 0 then
37676: LD_VAR 0 1
37680: PPUSH
37681: LD_INT 4
37683: PPUSH
37684: CALL_OW 289
37688: PUSH
37689: LD_INT 0
37691: EQUAL
37692: IFFALSE 37709
// SetCargo ( i , mat_siberit , 100 ) ;
37694: LD_VAR 0 1
37698: PPUSH
37699: LD_INT 3
37701: PPUSH
37702: LD_INT 100
37704: PPUSH
37705: CALL_OW 290
37709: GO 37673
37711: POP
37712: POP
// end ;
37713: PPOPN 2
37715: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
37716: LD_EXP 67
37720: PUSH
37721: LD_EXP 112
37725: AND
37726: IFFALSE 37909
37728: GO 37730
37730: DISABLE
37731: LD_INT 0
37733: PPUSH
37734: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
37735: LD_ADDR_VAR 0 2
37739: PUSH
37740: LD_INT 22
37742: PUSH
37743: LD_OWVAR 2
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PPUSH
37752: CALL_OW 69
37756: ST_TO_ADDR
// if not tmp then
37757: LD_VAR 0 2
37761: NOT
37762: IFFALSE 37766
// exit ;
37764: GO 37909
// for i := 1 to 2 do
37766: LD_ADDR_VAR 0 1
37770: PUSH
37771: DOUBLE
37772: LD_INT 1
37774: DEC
37775: ST_TO_ADDR
37776: LD_INT 2
37778: PUSH
37779: FOR_TO
37780: IFFALSE 37907
// begin uc_side := your_side ;
37782: LD_ADDR_OWVAR 20
37786: PUSH
37787: LD_OWVAR 2
37791: ST_TO_ADDR
// uc_nation := nation_american ;
37792: LD_ADDR_OWVAR 21
37796: PUSH
37797: LD_INT 1
37799: ST_TO_ADDR
// vc_chassis := us_morphling ;
37800: LD_ADDR_OWVAR 37
37804: PUSH
37805: LD_INT 5
37807: ST_TO_ADDR
// vc_engine := engine_siberite ;
37808: LD_ADDR_OWVAR 39
37812: PUSH
37813: LD_INT 3
37815: ST_TO_ADDR
// vc_control := control_computer ;
37816: LD_ADDR_OWVAR 38
37820: PUSH
37821: LD_INT 3
37823: ST_TO_ADDR
// vc_weapon := us_double_laser ;
37824: LD_ADDR_OWVAR 40
37828: PUSH
37829: LD_INT 10
37831: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
37832: LD_VAR 0 2
37836: PUSH
37837: LD_INT 1
37839: ARRAY
37840: PPUSH
37841: CALL_OW 310
37845: NOT
37846: IFFALSE 37893
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
37848: CALL_OW 45
37852: PPUSH
37853: LD_VAR 0 2
37857: PUSH
37858: LD_INT 1
37860: ARRAY
37861: PPUSH
37862: CALL_OW 250
37866: PPUSH
37867: LD_VAR 0 2
37871: PUSH
37872: LD_INT 1
37874: ARRAY
37875: PPUSH
37876: CALL_OW 251
37880: PPUSH
37881: LD_INT 12
37883: PPUSH
37884: LD_INT 1
37886: PPUSH
37887: CALL_OW 50
37891: GO 37905
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
37893: CALL_OW 45
37897: PPUSH
37898: LD_INT 1
37900: PPUSH
37901: CALL_OW 51
// end ;
37905: GO 37779
37907: POP
37908: POP
// end ;
37909: PPOPN 2
37911: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
37912: LD_EXP 67
37916: PUSH
37917: LD_EXP 113
37921: AND
37922: IFFALSE 38144
37924: GO 37926
37926: DISABLE
37927: LD_INT 0
37929: PPUSH
37930: PPUSH
37931: PPUSH
37932: PPUSH
37933: PPUSH
37934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37935: LD_ADDR_VAR 0 6
37939: PUSH
37940: LD_INT 22
37942: PUSH
37943: LD_OWVAR 2
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 21
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 3
37964: PUSH
37965: LD_INT 23
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: LIST
37983: PPUSH
37984: CALL_OW 69
37988: ST_TO_ADDR
// if not tmp then
37989: LD_VAR 0 6
37993: NOT
37994: IFFALSE 37998
// exit ;
37996: GO 38144
// s1 := rand ( 1 , 4 ) ;
37998: LD_ADDR_VAR 0 2
38002: PUSH
38003: LD_INT 1
38005: PPUSH
38006: LD_INT 4
38008: PPUSH
38009: CALL_OW 12
38013: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
38014: LD_ADDR_VAR 0 4
38018: PUSH
38019: LD_VAR 0 6
38023: PUSH
38024: LD_INT 1
38026: ARRAY
38027: PPUSH
38028: LD_VAR 0 2
38032: PPUSH
38033: CALL_OW 259
38037: ST_TO_ADDR
// if s1 = 1 then
38038: LD_VAR 0 2
38042: PUSH
38043: LD_INT 1
38045: EQUAL
38046: IFFALSE 38066
// s2 := rand ( 2 , 4 ) else
38048: LD_ADDR_VAR 0 3
38052: PUSH
38053: LD_INT 2
38055: PPUSH
38056: LD_INT 4
38058: PPUSH
38059: CALL_OW 12
38063: ST_TO_ADDR
38064: GO 38074
// s2 := 1 ;
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: LD_INT 1
38073: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
38074: LD_ADDR_VAR 0 5
38078: PUSH
38079: LD_VAR 0 6
38083: PUSH
38084: LD_INT 1
38086: ARRAY
38087: PPUSH
38088: LD_VAR 0 3
38092: PPUSH
38093: CALL_OW 259
38097: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
38098: LD_VAR 0 6
38102: PUSH
38103: LD_INT 1
38105: ARRAY
38106: PPUSH
38107: LD_VAR 0 2
38111: PPUSH
38112: LD_VAR 0 5
38116: PPUSH
38117: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
38121: LD_VAR 0 6
38125: PUSH
38126: LD_INT 1
38128: ARRAY
38129: PPUSH
38130: LD_VAR 0 3
38134: PPUSH
38135: LD_VAR 0 4
38139: PPUSH
38140: CALL_OW 237
// end ;
38144: PPOPN 6
38146: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
38147: LD_EXP 67
38151: PUSH
38152: LD_EXP 114
38156: AND
38157: IFFALSE 38236
38159: GO 38161
38161: DISABLE
38162: LD_INT 0
38164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
38165: LD_ADDR_VAR 0 1
38169: PUSH
38170: LD_INT 22
38172: PUSH
38173: LD_OWVAR 2
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 30
38184: PUSH
38185: LD_INT 3
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PPUSH
38196: CALL_OW 69
38200: ST_TO_ADDR
// if not tmp then
38201: LD_VAR 0 1
38205: NOT
38206: IFFALSE 38210
// exit ;
38208: GO 38236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38210: LD_VAR 0 1
38214: PUSH
38215: LD_INT 1
38217: PPUSH
38218: LD_VAR 0 1
38222: PPUSH
38223: CALL_OW 12
38227: ARRAY
38228: PPUSH
38229: LD_INT 1
38231: PPUSH
38232: CALL_OW 234
// end ;
38236: PPOPN 1
38238: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
38239: LD_EXP 67
38243: PUSH
38244: LD_EXP 115
38248: AND
38249: IFFALSE 38361
38251: GO 38253
38253: DISABLE
38254: LD_INT 0
38256: PPUSH
38257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
38258: LD_ADDR_VAR 0 2
38262: PUSH
38263: LD_INT 22
38265: PUSH
38266: LD_OWVAR 2
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 2
38277: PUSH
38278: LD_INT 30
38280: PUSH
38281: LD_INT 27
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 30
38290: PUSH
38291: LD_INT 26
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 30
38300: PUSH
38301: LD_INT 28
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PPUSH
38318: CALL_OW 69
38322: ST_TO_ADDR
// if not tmp then
38323: LD_VAR 0 2
38327: NOT
38328: IFFALSE 38332
// exit ;
38330: GO 38361
// for i in tmp do
38332: LD_ADDR_VAR 0 1
38336: PUSH
38337: LD_VAR 0 2
38341: PUSH
38342: FOR_IN
38343: IFFALSE 38359
// SetLives ( i , 1 ) ;
38345: LD_VAR 0 1
38349: PPUSH
38350: LD_INT 1
38352: PPUSH
38353: CALL_OW 234
38357: GO 38342
38359: POP
38360: POP
// end ;
38361: PPOPN 2
38363: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
38364: LD_EXP 67
38368: PUSH
38369: LD_EXP 116
38373: AND
38374: IFFALSE 38661
38376: GO 38378
38378: DISABLE
38379: LD_INT 0
38381: PPUSH
38382: PPUSH
38383: PPUSH
// begin i := rand ( 1 , 7 ) ;
38384: LD_ADDR_VAR 0 1
38388: PUSH
38389: LD_INT 1
38391: PPUSH
38392: LD_INT 7
38394: PPUSH
38395: CALL_OW 12
38399: ST_TO_ADDR
// case i of 1 :
38400: LD_VAR 0 1
38404: PUSH
38405: LD_INT 1
38407: DOUBLE
38408: EQUAL
38409: IFTRUE 38413
38411: GO 38423
38413: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
38414: LD_STRING earthquake(getX(game), 0, 32)
38416: PPUSH
38417: CALL_OW 559
38421: GO 38661
38423: LD_INT 2
38425: DOUBLE
38426: EQUAL
38427: IFTRUE 38431
38429: GO 38445
38431: POP
// begin ToLua ( displayStucuk(); ) ;
38432: LD_STRING displayStucuk();
38434: PPUSH
38435: CALL_OW 559
// ResetFog ;
38439: CALL_OW 335
// end ; 3 :
38443: GO 38661
38445: LD_INT 3
38447: DOUBLE
38448: EQUAL
38449: IFTRUE 38453
38451: GO 38557
38453: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38454: LD_ADDR_VAR 0 2
38458: PUSH
38459: LD_INT 22
38461: PUSH
38462: LD_OWVAR 2
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 25
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PPUSH
38485: CALL_OW 69
38489: ST_TO_ADDR
// if not tmp then
38490: LD_VAR 0 2
38494: NOT
38495: IFFALSE 38499
// exit ;
38497: GO 38661
// un := tmp [ rand ( 1 , tmp ) ] ;
38499: LD_ADDR_VAR 0 3
38503: PUSH
38504: LD_VAR 0 2
38508: PUSH
38509: LD_INT 1
38511: PPUSH
38512: LD_VAR 0 2
38516: PPUSH
38517: CALL_OW 12
38521: ARRAY
38522: ST_TO_ADDR
// if Crawls ( un ) then
38523: LD_VAR 0 3
38527: PPUSH
38528: CALL_OW 318
38532: IFFALSE 38543
// ComWalk ( un ) ;
38534: LD_VAR 0 3
38538: PPUSH
38539: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38543: LD_VAR 0 3
38547: PPUSH
38548: LD_INT 8
38550: PPUSH
38551: CALL_OW 336
// end ; 4 :
38555: GO 38661
38557: LD_INT 4
38559: DOUBLE
38560: EQUAL
38561: IFTRUE 38565
38563: GO 38639
38565: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38566: LD_ADDR_VAR 0 2
38570: PUSH
38571: LD_INT 22
38573: PUSH
38574: LD_OWVAR 2
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 30
38585: PUSH
38586: LD_INT 29
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PPUSH
38597: CALL_OW 69
38601: ST_TO_ADDR
// if not tmp then
38602: LD_VAR 0 2
38606: NOT
38607: IFFALSE 38611
// exit ;
38609: GO 38661
// CenterNowOnUnits ( tmp [ 1 ] ) ;
38611: LD_VAR 0 2
38615: PUSH
38616: LD_INT 1
38618: ARRAY
38619: PPUSH
38620: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
38624: LD_VAR 0 2
38628: PUSH
38629: LD_INT 1
38631: ARRAY
38632: PPUSH
38633: CALL_OW 65
// end ; 5 .. 7 :
38637: GO 38661
38639: LD_INT 5
38641: DOUBLE
38642: GREATEREQUAL
38643: IFFALSE 38651
38645: LD_INT 7
38647: DOUBLE
38648: LESSEQUAL
38649: IFTRUE 38653
38651: GO 38660
38653: POP
// StreamSibBomb ; end ;
38654: CALL 34898 0 0
38658: GO 38661
38660: POP
// end ;
38661: PPOPN 3
38663: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
38664: LD_EXP 67
38668: PUSH
38669: LD_EXP 117
38673: AND
38674: IFFALSE 38830
38676: GO 38678
38678: DISABLE
38679: LD_INT 0
38681: PPUSH
38682: PPUSH
38683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
38684: LD_ADDR_VAR 0 2
38688: PUSH
38689: LD_INT 81
38691: PUSH
38692: LD_OWVAR 2
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: LD_INT 21
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 21
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PPUSH
38733: CALL_OW 69
38737: ST_TO_ADDR
// if not tmp then
38738: LD_VAR 0 2
38742: NOT
38743: IFFALSE 38747
// exit ;
38745: GO 38830
// p := 0 ;
38747: LD_ADDR_VAR 0 3
38751: PUSH
38752: LD_INT 0
38754: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38755: LD_INT 35
38757: PPUSH
38758: CALL_OW 67
// p := p + 1 ;
38762: LD_ADDR_VAR 0 3
38766: PUSH
38767: LD_VAR 0 3
38771: PUSH
38772: LD_INT 1
38774: PLUS
38775: ST_TO_ADDR
// for i in tmp do
38776: LD_ADDR_VAR 0 1
38780: PUSH
38781: LD_VAR 0 2
38785: PUSH
38786: FOR_IN
38787: IFFALSE 38818
// if GetLives ( i ) < 1000 then
38789: LD_VAR 0 1
38793: PPUSH
38794: CALL_OW 256
38798: PUSH
38799: LD_INT 1000
38801: LESS
38802: IFFALSE 38816
// SetLives ( i , 1000 ) ;
38804: LD_VAR 0 1
38808: PPUSH
38809: LD_INT 1000
38811: PPUSH
38812: CALL_OW 234
38816: GO 38786
38818: POP
38819: POP
// until p > 20 ;
38820: LD_VAR 0 3
38824: PUSH
38825: LD_INT 20
38827: GREATER
38828: IFFALSE 38755
// end ;
38830: PPOPN 3
38832: END
// every 0 0$1 trigger StreamModeActive and sTime do
38833: LD_EXP 67
38837: PUSH
38838: LD_EXP 118
38842: AND
38843: IFFALSE 38878
38845: GO 38847
38847: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
38848: LD_INT 28
38850: PPUSH
38851: LD_OWVAR 2
38855: PPUSH
38856: LD_INT 2
38858: PPUSH
38859: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
38863: LD_INT 30
38865: PPUSH
38866: LD_OWVAR 2
38870: PPUSH
38871: LD_INT 2
38873: PPUSH
38874: CALL_OW 322
// end ;
38878: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
38879: LD_EXP 67
38883: PUSH
38884: LD_EXP 119
38888: AND
38889: IFFALSE 39010
38891: GO 38893
38893: DISABLE
38894: LD_INT 0
38896: PPUSH
38897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38898: LD_ADDR_VAR 0 2
38902: PUSH
38903: LD_INT 22
38905: PUSH
38906: LD_OWVAR 2
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 21
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 3
38927: PUSH
38928: LD_INT 23
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: PPUSH
38947: CALL_OW 69
38951: ST_TO_ADDR
// if not tmp then
38952: LD_VAR 0 2
38956: NOT
38957: IFFALSE 38961
// exit ;
38959: GO 39010
// for i in tmp do
38961: LD_ADDR_VAR 0 1
38965: PUSH
38966: LD_VAR 0 2
38970: PUSH
38971: FOR_IN
38972: IFFALSE 39008
// begin if Crawls ( i ) then
38974: LD_VAR 0 1
38978: PPUSH
38979: CALL_OW 318
38983: IFFALSE 38994
// ComWalk ( i ) ;
38985: LD_VAR 0 1
38989: PPUSH
38990: CALL_OW 138
// SetClass ( i , 2 ) ;
38994: LD_VAR 0 1
38998: PPUSH
38999: LD_INT 2
39001: PPUSH
39002: CALL_OW 336
// end ;
39006: GO 38971
39008: POP
39009: POP
// end ;
39010: PPOPN 2
39012: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
39013: LD_EXP 67
39017: PUSH
39018: LD_EXP 120
39022: AND
39023: IFFALSE 39311
39025: GO 39027
39027: DISABLE
39028: LD_INT 0
39030: PPUSH
39031: PPUSH
39032: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
39033: LD_OWVAR 2
39037: PPUSH
39038: LD_INT 9
39040: PPUSH
39041: LD_INT 1
39043: PPUSH
39044: LD_INT 1
39046: PPUSH
39047: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
39051: LD_INT 9
39053: PPUSH
39054: LD_OWVAR 2
39058: PPUSH
39059: CALL_OW 343
// uc_side := 9 ;
39063: LD_ADDR_OWVAR 20
39067: PUSH
39068: LD_INT 9
39070: ST_TO_ADDR
// uc_nation := 2 ;
39071: LD_ADDR_OWVAR 21
39075: PUSH
39076: LD_INT 2
39078: ST_TO_ADDR
// hc_name := Dark Warrior ;
39079: LD_ADDR_OWVAR 26
39083: PUSH
39084: LD_STRING Dark Warrior
39086: ST_TO_ADDR
// hc_gallery :=  ;
39087: LD_ADDR_OWVAR 33
39091: PUSH
39092: LD_STRING 
39094: ST_TO_ADDR
// hc_noskilllimit := true ;
39095: LD_ADDR_OWVAR 76
39099: PUSH
39100: LD_INT 1
39102: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
39103: LD_ADDR_OWVAR 31
39107: PUSH
39108: LD_INT 30
39110: PUSH
39111: LD_INT 30
39113: PUSH
39114: LD_INT 30
39116: PUSH
39117: LD_INT 30
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: ST_TO_ADDR
// un := CreateHuman ;
39126: LD_ADDR_VAR 0 3
39130: PUSH
39131: CALL_OW 44
39135: ST_TO_ADDR
// hc_noskilllimit := false ;
39136: LD_ADDR_OWVAR 76
39140: PUSH
39141: LD_INT 0
39143: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39144: LD_VAR 0 3
39148: PPUSH
39149: LD_INT 1
39151: PPUSH
39152: CALL_OW 51
// ToLua ( playRanger() ) ;
39156: LD_STRING playRanger()
39158: PPUSH
39159: CALL_OW 559
// p := 0 ;
39163: LD_ADDR_VAR 0 2
39167: PUSH
39168: LD_INT 0
39170: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
39171: LD_INT 35
39173: PPUSH
39174: CALL_OW 67
// p := p + 1 ;
39178: LD_ADDR_VAR 0 2
39182: PUSH
39183: LD_VAR 0 2
39187: PUSH
39188: LD_INT 1
39190: PLUS
39191: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
39192: LD_VAR 0 3
39196: PPUSH
39197: CALL_OW 256
39201: PUSH
39202: LD_INT 1000
39204: LESS
39205: IFFALSE 39219
// SetLives ( un , 1000 ) ;
39207: LD_VAR 0 3
39211: PPUSH
39212: LD_INT 1000
39214: PPUSH
39215: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
39219: LD_VAR 0 3
39223: PPUSH
39224: LD_INT 81
39226: PUSH
39227: LD_OWVAR 2
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 91
39238: PUSH
39239: LD_VAR 0 3
39243: PUSH
39244: LD_INT 30
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: LIST
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PPUSH
39256: CALL_OW 69
39260: PPUSH
39261: LD_VAR 0 3
39265: PPUSH
39266: CALL_OW 74
39270: PPUSH
39271: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
39275: LD_VAR 0 2
39279: PUSH
39280: LD_INT 80
39282: GREATER
39283: PUSH
39284: LD_VAR 0 3
39288: PPUSH
39289: CALL_OW 301
39293: OR
39294: IFFALSE 39171
// if un then
39296: LD_VAR 0 3
39300: IFFALSE 39311
// RemoveUnit ( un ) ;
39302: LD_VAR 0 3
39306: PPUSH
39307: CALL_OW 64
// end ;
39311: PPOPN 3
39313: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
39314: LD_EXP 121
39318: IFFALSE 39434
39320: GO 39322
39322: DISABLE
39323: LD_INT 0
39325: PPUSH
39326: PPUSH
39327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
39328: LD_ADDR_VAR 0 2
39332: PUSH
39333: LD_INT 81
39335: PUSH
39336: LD_OWVAR 2
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 21
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PPUSH
39359: CALL_OW 69
39363: ST_TO_ADDR
// ToLua ( playComputer() ) ;
39364: LD_STRING playComputer()
39366: PPUSH
39367: CALL_OW 559
// if not tmp then
39371: LD_VAR 0 2
39375: NOT
39376: IFFALSE 39380
// exit ;
39378: GO 39434
// for i in tmp do
39380: LD_ADDR_VAR 0 1
39384: PUSH
39385: LD_VAR 0 2
39389: PUSH
39390: FOR_IN
39391: IFFALSE 39432
// for j := 1 to 4 do
39393: LD_ADDR_VAR 0 3
39397: PUSH
39398: DOUBLE
39399: LD_INT 1
39401: DEC
39402: ST_TO_ADDR
39403: LD_INT 4
39405: PUSH
39406: FOR_TO
39407: IFFALSE 39428
// SetSkill ( i , j , 10 ) ;
39409: LD_VAR 0 1
39413: PPUSH
39414: LD_VAR 0 3
39418: PPUSH
39419: LD_INT 10
39421: PPUSH
39422: CALL_OW 237
39426: GO 39406
39428: POP
39429: POP
39430: GO 39390
39432: POP
39433: POP
// end ;
39434: PPOPN 3
39436: END
// every 0 0$1 trigger s30 do var i , tmp ;
39437: LD_EXP 122
39441: IFFALSE 39510
39443: GO 39445
39445: DISABLE
39446: LD_INT 0
39448: PPUSH
39449: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39450: LD_ADDR_VAR 0 2
39454: PUSH
39455: LD_INT 22
39457: PUSH
39458: LD_OWVAR 2
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PPUSH
39467: CALL_OW 69
39471: ST_TO_ADDR
// if not tmp then
39472: LD_VAR 0 2
39476: NOT
39477: IFFALSE 39481
// exit ;
39479: GO 39510
// for i in tmp do
39481: LD_ADDR_VAR 0 1
39485: PUSH
39486: LD_VAR 0 2
39490: PUSH
39491: FOR_IN
39492: IFFALSE 39508
// SetLives ( i , 300 ) ;
39494: LD_VAR 0 1
39498: PPUSH
39499: LD_INT 300
39501: PPUSH
39502: CALL_OW 234
39506: GO 39491
39508: POP
39509: POP
// end ;
39510: PPOPN 2
39512: END
// every 0 0$1 trigger s60 do var i , tmp ;
39513: LD_EXP 123
39517: IFFALSE 39586
39519: GO 39521
39521: DISABLE
39522: LD_INT 0
39524: PPUSH
39525: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39526: LD_ADDR_VAR 0 2
39530: PUSH
39531: LD_INT 22
39533: PUSH
39534: LD_OWVAR 2
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PPUSH
39543: CALL_OW 69
39547: ST_TO_ADDR
// if not tmp then
39548: LD_VAR 0 2
39552: NOT
39553: IFFALSE 39557
// exit ;
39555: GO 39586
// for i in tmp do
39557: LD_ADDR_VAR 0 1
39561: PUSH
39562: LD_VAR 0 2
39566: PUSH
39567: FOR_IN
39568: IFFALSE 39584
// SetLives ( i , 600 ) ;
39570: LD_VAR 0 1
39574: PPUSH
39575: LD_INT 600
39577: PPUSH
39578: CALL_OW 234
39582: GO 39567
39584: POP
39585: POP
// end ;
39586: PPOPN 2
39588: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
39589: LD_INT 0
39591: PPUSH
// case cmd of 301 :
39592: LD_VAR 0 1
39596: PUSH
39597: LD_INT 301
39599: DOUBLE
39600: EQUAL
39601: IFTRUE 39605
39603: GO 39637
39605: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
39606: LD_VAR 0 6
39610: PPUSH
39611: LD_VAR 0 7
39615: PPUSH
39616: LD_VAR 0 8
39620: PPUSH
39621: LD_VAR 0 4
39625: PPUSH
39626: LD_VAR 0 5
39630: PPUSH
39631: CALL 40838 0 5
39635: GO 39758
39637: LD_INT 302
39639: DOUBLE
39640: EQUAL
39641: IFTRUE 39645
39643: GO 39682
39645: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
39646: LD_VAR 0 6
39650: PPUSH
39651: LD_VAR 0 7
39655: PPUSH
39656: LD_VAR 0 8
39660: PPUSH
39661: LD_VAR 0 9
39665: PPUSH
39666: LD_VAR 0 4
39670: PPUSH
39671: LD_VAR 0 5
39675: PPUSH
39676: CALL 40929 0 6
39680: GO 39758
39682: LD_INT 303
39684: DOUBLE
39685: EQUAL
39686: IFTRUE 39690
39688: GO 39727
39690: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
39691: LD_VAR 0 6
39695: PPUSH
39696: LD_VAR 0 7
39700: PPUSH
39701: LD_VAR 0 8
39705: PPUSH
39706: LD_VAR 0 9
39710: PPUSH
39711: LD_VAR 0 4
39715: PPUSH
39716: LD_VAR 0 5
39720: PPUSH
39721: CALL 39763 0 6
39725: GO 39758
39727: LD_INT 304
39729: DOUBLE
39730: EQUAL
39731: IFTRUE 39735
39733: GO 39757
39735: POP
// hHackTeleport ( unit , x , y ) ; end ;
39736: LD_VAR 0 2
39740: PPUSH
39741: LD_VAR 0 4
39745: PPUSH
39746: LD_VAR 0 5
39750: PPUSH
39751: CALL 41522 0 3
39755: GO 39758
39757: POP
// end ;
39758: LD_VAR 0 12
39762: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
39763: LD_INT 0
39765: PPUSH
39766: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
39767: LD_VAR 0 1
39771: PUSH
39772: LD_INT 1
39774: LESS
39775: PUSH
39776: LD_VAR 0 1
39780: PUSH
39781: LD_INT 3
39783: GREATER
39784: OR
39785: PUSH
39786: LD_VAR 0 5
39790: PPUSH
39791: LD_VAR 0 6
39795: PPUSH
39796: CALL_OW 428
39800: OR
39801: IFFALSE 39805
// exit ;
39803: GO 40525
// uc_side := your_side ;
39805: LD_ADDR_OWVAR 20
39809: PUSH
39810: LD_OWVAR 2
39814: ST_TO_ADDR
// uc_nation := nation ;
39815: LD_ADDR_OWVAR 21
39819: PUSH
39820: LD_VAR 0 1
39824: ST_TO_ADDR
// bc_level = 1 ;
39825: LD_ADDR_OWVAR 43
39829: PUSH
39830: LD_INT 1
39832: ST_TO_ADDR
// case btype of 1 :
39833: LD_VAR 0 2
39837: PUSH
39838: LD_INT 1
39840: DOUBLE
39841: EQUAL
39842: IFTRUE 39846
39844: GO 39857
39846: POP
// bc_type := b_depot ; 2 :
39847: LD_ADDR_OWVAR 42
39851: PUSH
39852: LD_INT 0
39854: ST_TO_ADDR
39855: GO 40469
39857: LD_INT 2
39859: DOUBLE
39860: EQUAL
39861: IFTRUE 39865
39863: GO 39876
39865: POP
// bc_type := b_warehouse ; 3 :
39866: LD_ADDR_OWVAR 42
39870: PUSH
39871: LD_INT 1
39873: ST_TO_ADDR
39874: GO 40469
39876: LD_INT 3
39878: DOUBLE
39879: EQUAL
39880: IFTRUE 39884
39882: GO 39895
39884: POP
// bc_type := b_lab ; 4 .. 9 :
39885: LD_ADDR_OWVAR 42
39889: PUSH
39890: LD_INT 6
39892: ST_TO_ADDR
39893: GO 40469
39895: LD_INT 4
39897: DOUBLE
39898: GREATEREQUAL
39899: IFFALSE 39907
39901: LD_INT 9
39903: DOUBLE
39904: LESSEQUAL
39905: IFTRUE 39909
39907: GO 39961
39909: POP
// begin bc_type := b_lab_half ;
39910: LD_ADDR_OWVAR 42
39914: PUSH
39915: LD_INT 7
39917: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
39918: LD_ADDR_OWVAR 44
39922: PUSH
39923: LD_INT 10
39925: PUSH
39926: LD_INT 11
39928: PUSH
39929: LD_INT 12
39931: PUSH
39932: LD_INT 15
39934: PUSH
39935: LD_INT 14
39937: PUSH
39938: LD_INT 13
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: PUSH
39949: LD_VAR 0 2
39953: PUSH
39954: LD_INT 3
39956: MINUS
39957: ARRAY
39958: ST_TO_ADDR
// end ; 10 .. 13 :
39959: GO 40469
39961: LD_INT 10
39963: DOUBLE
39964: GREATEREQUAL
39965: IFFALSE 39973
39967: LD_INT 13
39969: DOUBLE
39970: LESSEQUAL
39971: IFTRUE 39975
39973: GO 40052
39975: POP
// begin bc_type := b_lab_full ;
39976: LD_ADDR_OWVAR 42
39980: PUSH
39981: LD_INT 8
39983: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
39984: LD_ADDR_OWVAR 44
39988: PUSH
39989: LD_INT 10
39991: PUSH
39992: LD_INT 12
39994: PUSH
39995: LD_INT 14
39997: PUSH
39998: LD_INT 13
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: PUSH
40007: LD_VAR 0 2
40011: PUSH
40012: LD_INT 9
40014: MINUS
40015: ARRAY
40016: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
40017: LD_ADDR_OWVAR 45
40021: PUSH
40022: LD_INT 11
40024: PUSH
40025: LD_INT 15
40027: PUSH
40028: LD_INT 12
40030: PUSH
40031: LD_INT 15
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: PUSH
40040: LD_VAR 0 2
40044: PUSH
40045: LD_INT 9
40047: MINUS
40048: ARRAY
40049: ST_TO_ADDR
// end ; 14 :
40050: GO 40469
40052: LD_INT 14
40054: DOUBLE
40055: EQUAL
40056: IFTRUE 40060
40058: GO 40071
40060: POP
// bc_type := b_workshop ; 15 :
40061: LD_ADDR_OWVAR 42
40065: PUSH
40066: LD_INT 2
40068: ST_TO_ADDR
40069: GO 40469
40071: LD_INT 15
40073: DOUBLE
40074: EQUAL
40075: IFTRUE 40079
40077: GO 40090
40079: POP
// bc_type := b_factory ; 16 :
40080: LD_ADDR_OWVAR 42
40084: PUSH
40085: LD_INT 3
40087: ST_TO_ADDR
40088: GO 40469
40090: LD_INT 16
40092: DOUBLE
40093: EQUAL
40094: IFTRUE 40098
40096: GO 40109
40098: POP
// bc_type := b_ext_gun ; 17 :
40099: LD_ADDR_OWVAR 42
40103: PUSH
40104: LD_INT 17
40106: ST_TO_ADDR
40107: GO 40469
40109: LD_INT 17
40111: DOUBLE
40112: EQUAL
40113: IFTRUE 40117
40115: GO 40145
40117: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
40118: LD_ADDR_OWVAR 42
40122: PUSH
40123: LD_INT 19
40125: PUSH
40126: LD_INT 23
40128: PUSH
40129: LD_INT 19
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: PUSH
40137: LD_VAR 0 1
40141: ARRAY
40142: ST_TO_ADDR
40143: GO 40469
40145: LD_INT 18
40147: DOUBLE
40148: EQUAL
40149: IFTRUE 40153
40151: GO 40164
40153: POP
// bc_type := b_ext_radar ; 19 :
40154: LD_ADDR_OWVAR 42
40158: PUSH
40159: LD_INT 20
40161: ST_TO_ADDR
40162: GO 40469
40164: LD_INT 19
40166: DOUBLE
40167: EQUAL
40168: IFTRUE 40172
40170: GO 40183
40172: POP
// bc_type := b_ext_radio ; 20 :
40173: LD_ADDR_OWVAR 42
40177: PUSH
40178: LD_INT 22
40180: ST_TO_ADDR
40181: GO 40469
40183: LD_INT 20
40185: DOUBLE
40186: EQUAL
40187: IFTRUE 40191
40189: GO 40202
40191: POP
// bc_type := b_ext_siberium ; 21 :
40192: LD_ADDR_OWVAR 42
40196: PUSH
40197: LD_INT 21
40199: ST_TO_ADDR
40200: GO 40469
40202: LD_INT 21
40204: DOUBLE
40205: EQUAL
40206: IFTRUE 40210
40208: GO 40221
40210: POP
// bc_type := b_ext_computer ; 22 :
40211: LD_ADDR_OWVAR 42
40215: PUSH
40216: LD_INT 24
40218: ST_TO_ADDR
40219: GO 40469
40221: LD_INT 22
40223: DOUBLE
40224: EQUAL
40225: IFTRUE 40229
40227: GO 40240
40229: POP
// bc_type := b_ext_track ; 23 :
40230: LD_ADDR_OWVAR 42
40234: PUSH
40235: LD_INT 16
40237: ST_TO_ADDR
40238: GO 40469
40240: LD_INT 23
40242: DOUBLE
40243: EQUAL
40244: IFTRUE 40248
40246: GO 40259
40248: POP
// bc_type := b_ext_laser ; 24 :
40249: LD_ADDR_OWVAR 42
40253: PUSH
40254: LD_INT 25
40256: ST_TO_ADDR
40257: GO 40469
40259: LD_INT 24
40261: DOUBLE
40262: EQUAL
40263: IFTRUE 40267
40265: GO 40278
40267: POP
// bc_type := b_control_tower ; 25 :
40268: LD_ADDR_OWVAR 42
40272: PUSH
40273: LD_INT 36
40275: ST_TO_ADDR
40276: GO 40469
40278: LD_INT 25
40280: DOUBLE
40281: EQUAL
40282: IFTRUE 40286
40284: GO 40297
40286: POP
// bc_type := b_breastwork ; 26 :
40287: LD_ADDR_OWVAR 42
40291: PUSH
40292: LD_INT 31
40294: ST_TO_ADDR
40295: GO 40469
40297: LD_INT 26
40299: DOUBLE
40300: EQUAL
40301: IFTRUE 40305
40303: GO 40316
40305: POP
// bc_type := b_bunker ; 27 :
40306: LD_ADDR_OWVAR 42
40310: PUSH
40311: LD_INT 32
40313: ST_TO_ADDR
40314: GO 40469
40316: LD_INT 27
40318: DOUBLE
40319: EQUAL
40320: IFTRUE 40324
40322: GO 40335
40324: POP
// bc_type := b_turret ; 28 :
40325: LD_ADDR_OWVAR 42
40329: PUSH
40330: LD_INT 33
40332: ST_TO_ADDR
40333: GO 40469
40335: LD_INT 28
40337: DOUBLE
40338: EQUAL
40339: IFTRUE 40343
40341: GO 40354
40343: POP
// bc_type := b_armoury ; 29 :
40344: LD_ADDR_OWVAR 42
40348: PUSH
40349: LD_INT 4
40351: ST_TO_ADDR
40352: GO 40469
40354: LD_INT 29
40356: DOUBLE
40357: EQUAL
40358: IFTRUE 40362
40360: GO 40373
40362: POP
// bc_type := b_barracks ; 30 :
40363: LD_ADDR_OWVAR 42
40367: PUSH
40368: LD_INT 5
40370: ST_TO_ADDR
40371: GO 40469
40373: LD_INT 30
40375: DOUBLE
40376: EQUAL
40377: IFTRUE 40381
40379: GO 40392
40381: POP
// bc_type := b_solar_power ; 31 :
40382: LD_ADDR_OWVAR 42
40386: PUSH
40387: LD_INT 27
40389: ST_TO_ADDR
40390: GO 40469
40392: LD_INT 31
40394: DOUBLE
40395: EQUAL
40396: IFTRUE 40400
40398: GO 40411
40400: POP
// bc_type := b_oil_power ; 32 :
40401: LD_ADDR_OWVAR 42
40405: PUSH
40406: LD_INT 26
40408: ST_TO_ADDR
40409: GO 40469
40411: LD_INT 32
40413: DOUBLE
40414: EQUAL
40415: IFTRUE 40419
40417: GO 40430
40419: POP
// bc_type := b_siberite_power ; 33 :
40420: LD_ADDR_OWVAR 42
40424: PUSH
40425: LD_INT 28
40427: ST_TO_ADDR
40428: GO 40469
40430: LD_INT 33
40432: DOUBLE
40433: EQUAL
40434: IFTRUE 40438
40436: GO 40449
40438: POP
// bc_type := b_oil_mine ; 34 :
40439: LD_ADDR_OWVAR 42
40443: PUSH
40444: LD_INT 29
40446: ST_TO_ADDR
40447: GO 40469
40449: LD_INT 34
40451: DOUBLE
40452: EQUAL
40453: IFTRUE 40457
40455: GO 40468
40457: POP
// bc_type := b_siberite_mine ; end ;
40458: LD_ADDR_OWVAR 42
40462: PUSH
40463: LD_INT 30
40465: ST_TO_ADDR
40466: GO 40469
40468: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
40469: LD_ADDR_VAR 0 8
40473: PUSH
40474: LD_VAR 0 5
40478: PPUSH
40479: LD_VAR 0 6
40483: PPUSH
40484: LD_VAR 0 3
40488: PPUSH
40489: CALL_OW 47
40493: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
40494: LD_OWVAR 42
40498: PUSH
40499: LD_INT 32
40501: PUSH
40502: LD_INT 33
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: IN
40509: IFFALSE 40525
// PlaceWeaponTurret ( b , weapon ) ;
40511: LD_VAR 0 8
40515: PPUSH
40516: LD_VAR 0 4
40520: PPUSH
40521: CALL_OW 431
// end ;
40525: LD_VAR 0 7
40529: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
40530: LD_INT 0
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40536: LD_ADDR_VAR 0 4
40540: PUSH
40541: LD_INT 22
40543: PUSH
40544: LD_OWVAR 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: LD_INT 30
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 30
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: LIST
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PPUSH
40585: CALL_OW 69
40589: ST_TO_ADDR
// if not tmp then
40590: LD_VAR 0 4
40594: NOT
40595: IFFALSE 40599
// exit ;
40597: GO 40658
// for i in tmp do
40599: LD_ADDR_VAR 0 2
40603: PUSH
40604: LD_VAR 0 4
40608: PUSH
40609: FOR_IN
40610: IFFALSE 40656
// for j = 1 to 3 do
40612: LD_ADDR_VAR 0 3
40616: PUSH
40617: DOUBLE
40618: LD_INT 1
40620: DEC
40621: ST_TO_ADDR
40622: LD_INT 3
40624: PUSH
40625: FOR_TO
40626: IFFALSE 40652
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
40628: LD_VAR 0 2
40632: PPUSH
40633: CALL_OW 274
40637: PPUSH
40638: LD_VAR 0 3
40642: PPUSH
40643: LD_INT 99999
40645: PPUSH
40646: CALL_OW 277
40650: GO 40625
40652: POP
40653: POP
40654: GO 40609
40656: POP
40657: POP
// end ;
40658: LD_VAR 0 1
40662: RET
// export function hHackSetLevel10 ; var i , j ; begin
40663: LD_INT 0
40665: PPUSH
40666: PPUSH
40667: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40668: LD_ADDR_VAR 0 2
40672: PUSH
40673: LD_INT 21
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PPUSH
40683: CALL_OW 69
40687: PUSH
40688: FOR_IN
40689: IFFALSE 40741
// if IsSelected ( i ) then
40691: LD_VAR 0 2
40695: PPUSH
40696: CALL_OW 306
40700: IFFALSE 40739
// begin for j := 1 to 4 do
40702: LD_ADDR_VAR 0 3
40706: PUSH
40707: DOUBLE
40708: LD_INT 1
40710: DEC
40711: ST_TO_ADDR
40712: LD_INT 4
40714: PUSH
40715: FOR_TO
40716: IFFALSE 40737
// SetSkill ( i , j , 10 ) ;
40718: LD_VAR 0 2
40722: PPUSH
40723: LD_VAR 0 3
40727: PPUSH
40728: LD_INT 10
40730: PPUSH
40731: CALL_OW 237
40735: GO 40715
40737: POP
40738: POP
// end ;
40739: GO 40688
40741: POP
40742: POP
// end ;
40743: LD_VAR 0 1
40747: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
40748: LD_INT 0
40750: PPUSH
40751: PPUSH
40752: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
40753: LD_ADDR_VAR 0 2
40757: PUSH
40758: LD_INT 22
40760: PUSH
40761: LD_OWVAR 2
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 21
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PPUSH
40784: CALL_OW 69
40788: PUSH
40789: FOR_IN
40790: IFFALSE 40831
// begin for j := 1 to 4 do
40792: LD_ADDR_VAR 0 3
40796: PUSH
40797: DOUBLE
40798: LD_INT 1
40800: DEC
40801: ST_TO_ADDR
40802: LD_INT 4
40804: PUSH
40805: FOR_TO
40806: IFFALSE 40827
// SetSkill ( i , j , 10 ) ;
40808: LD_VAR 0 2
40812: PPUSH
40813: LD_VAR 0 3
40817: PPUSH
40818: LD_INT 10
40820: PPUSH
40821: CALL_OW 237
40825: GO 40805
40827: POP
40828: POP
// end ;
40829: GO 40789
40831: POP
40832: POP
// end ;
40833: LD_VAR 0 1
40837: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
40838: LD_INT 0
40840: PPUSH
// uc_side := your_side ;
40841: LD_ADDR_OWVAR 20
40845: PUSH
40846: LD_OWVAR 2
40850: ST_TO_ADDR
// uc_nation := nation ;
40851: LD_ADDR_OWVAR 21
40855: PUSH
40856: LD_VAR 0 1
40860: ST_TO_ADDR
// InitHc ;
40861: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
40865: LD_INT 0
40867: PPUSH
40868: LD_VAR 0 2
40872: PPUSH
40873: LD_VAR 0 3
40877: PPUSH
40878: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
40882: LD_VAR 0 4
40886: PPUSH
40887: LD_VAR 0 5
40891: PPUSH
40892: CALL_OW 428
40896: PUSH
40897: LD_INT 0
40899: EQUAL
40900: IFFALSE 40924
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
40902: CALL_OW 44
40906: PPUSH
40907: LD_VAR 0 4
40911: PPUSH
40912: LD_VAR 0 5
40916: PPUSH
40917: LD_INT 1
40919: PPUSH
40920: CALL_OW 48
// end ;
40924: LD_VAR 0 6
40928: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
40929: LD_INT 0
40931: PPUSH
40932: PPUSH
// uc_side := your_side ;
40933: LD_ADDR_OWVAR 20
40937: PUSH
40938: LD_OWVAR 2
40942: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
40943: LD_VAR 0 1
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: LD_INT 3
40956: PUSH
40957: LD_INT 4
40959: PUSH
40960: LD_INT 5
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: IN
40970: IFFALSE 40982
// uc_nation := nation_american else
40972: LD_ADDR_OWVAR 21
40976: PUSH
40977: LD_INT 1
40979: ST_TO_ADDR
40980: GO 41025
// if chassis in [ 11 , 12 , 13 , 14 ] then
40982: LD_VAR 0 1
40986: PUSH
40987: LD_INT 11
40989: PUSH
40990: LD_INT 12
40992: PUSH
40993: LD_INT 13
40995: PUSH
40996: LD_INT 14
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: IN
41005: IFFALSE 41017
// uc_nation := nation_arabian else
41007: LD_ADDR_OWVAR 21
41011: PUSH
41012: LD_INT 2
41014: ST_TO_ADDR
41015: GO 41025
// uc_nation := nation_russian ;
41017: LD_ADDR_OWVAR 21
41021: PUSH
41022: LD_INT 3
41024: ST_TO_ADDR
// vc_chassis := chassis ;
41025: LD_ADDR_OWVAR 37
41029: PUSH
41030: LD_VAR 0 1
41034: ST_TO_ADDR
// vc_engine := engine ;
41035: LD_ADDR_OWVAR 39
41039: PUSH
41040: LD_VAR 0 2
41044: ST_TO_ADDR
// vc_control := control ;
41045: LD_ADDR_OWVAR 38
41049: PUSH
41050: LD_VAR 0 3
41054: ST_TO_ADDR
// vc_weapon := weapon ;
41055: LD_ADDR_OWVAR 40
41059: PUSH
41060: LD_VAR 0 4
41064: ST_TO_ADDR
// un := CreateVehicle ;
41065: LD_ADDR_VAR 0 8
41069: PUSH
41070: CALL_OW 45
41074: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
41075: LD_VAR 0 8
41079: PPUSH
41080: LD_INT 0
41082: PPUSH
41083: LD_INT 5
41085: PPUSH
41086: CALL_OW 12
41090: PPUSH
41091: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
41095: LD_VAR 0 8
41099: PPUSH
41100: LD_VAR 0 5
41104: PPUSH
41105: LD_VAR 0 6
41109: PPUSH
41110: LD_INT 1
41112: PPUSH
41113: CALL_OW 48
// end ;
41117: LD_VAR 0 7
41121: RET
// export hInvincible ; every 1 do
41122: GO 41124
41124: DISABLE
// hInvincible := [ ] ;
41125: LD_ADDR_EXP 124
41129: PUSH
41130: EMPTY
41131: ST_TO_ADDR
41132: END
// every 10 do var i ;
41133: GO 41135
41135: DISABLE
41136: LD_INT 0
41138: PPUSH
// begin enable ;
41139: ENABLE
// if not hInvincible then
41140: LD_EXP 124
41144: NOT
41145: IFFALSE 41149
// exit ;
41147: GO 41193
// for i in hInvincible do
41149: LD_ADDR_VAR 0 1
41153: PUSH
41154: LD_EXP 124
41158: PUSH
41159: FOR_IN
41160: IFFALSE 41191
// if GetLives ( i ) < 1000 then
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL_OW 256
41171: PUSH
41172: LD_INT 1000
41174: LESS
41175: IFFALSE 41189
// SetLives ( i , 1000 ) ;
41177: LD_VAR 0 1
41181: PPUSH
41182: LD_INT 1000
41184: PPUSH
41185: CALL_OW 234
41189: GO 41159
41191: POP
41192: POP
// end ;
41193: PPOPN 1
41195: END
// export function hHackInvincible ; var i ; begin
41196: LD_INT 0
41198: PPUSH
41199: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
41200: LD_ADDR_VAR 0 2
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 21
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 21
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: LIST
41232: PPUSH
41233: CALL_OW 69
41237: PUSH
41238: FOR_IN
41239: IFFALSE 41300
// if IsSelected ( i ) then
41241: LD_VAR 0 2
41245: PPUSH
41246: CALL_OW 306
41250: IFFALSE 41298
// begin if i in hInvincible then
41252: LD_VAR 0 2
41256: PUSH
41257: LD_EXP 124
41261: IN
41262: IFFALSE 41282
// hInvincible := hInvincible diff i else
41264: LD_ADDR_EXP 124
41268: PUSH
41269: LD_EXP 124
41273: PUSH
41274: LD_VAR 0 2
41278: DIFF
41279: ST_TO_ADDR
41280: GO 41298
// hInvincible := hInvincible union i ;
41282: LD_ADDR_EXP 124
41286: PUSH
41287: LD_EXP 124
41291: PUSH
41292: LD_VAR 0 2
41296: UNION
41297: ST_TO_ADDR
// end ;
41298: GO 41238
41300: POP
41301: POP
// end ;
41302: LD_VAR 0 1
41306: RET
// export function hHackInvisible ; var i , j ; begin
41307: LD_INT 0
41309: PPUSH
41310: PPUSH
41311: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
41312: LD_ADDR_VAR 0 2
41316: PUSH
41317: LD_INT 21
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PPUSH
41327: CALL_OW 69
41331: PUSH
41332: FOR_IN
41333: IFFALSE 41357
// if IsSelected ( i ) then
41335: LD_VAR 0 2
41339: PPUSH
41340: CALL_OW 306
41344: IFFALSE 41355
// ComForceInvisible ( i ) ;
41346: LD_VAR 0 2
41350: PPUSH
41351: CALL_OW 496
41355: GO 41332
41357: POP
41358: POP
// end ;
41359: LD_VAR 0 1
41363: RET
// export function hHackChangeYourSide ; begin
41364: LD_INT 0
41366: PPUSH
// if your_side = 8 then
41367: LD_OWVAR 2
41371: PUSH
41372: LD_INT 8
41374: EQUAL
41375: IFFALSE 41387
// your_side := 0 else
41377: LD_ADDR_OWVAR 2
41381: PUSH
41382: LD_INT 0
41384: ST_TO_ADDR
41385: GO 41401
// your_side := your_side + 1 ;
41387: LD_ADDR_OWVAR 2
41391: PUSH
41392: LD_OWVAR 2
41396: PUSH
41397: LD_INT 1
41399: PLUS
41400: ST_TO_ADDR
// end ;
41401: LD_VAR 0 1
41405: RET
// export function hHackChangeUnitSide ; var i , j ; begin
41406: LD_INT 0
41408: PPUSH
41409: PPUSH
41410: PPUSH
// for i in all_units do
41411: LD_ADDR_VAR 0 2
41415: PUSH
41416: LD_OWVAR 3
41420: PUSH
41421: FOR_IN
41422: IFFALSE 41500
// if IsSelected ( i ) then
41424: LD_VAR 0 2
41428: PPUSH
41429: CALL_OW 306
41433: IFFALSE 41498
// begin j := GetSide ( i ) ;
41435: LD_ADDR_VAR 0 3
41439: PUSH
41440: LD_VAR 0 2
41444: PPUSH
41445: CALL_OW 255
41449: ST_TO_ADDR
// if j = 8 then
41450: LD_VAR 0 3
41454: PUSH
41455: LD_INT 8
41457: EQUAL
41458: IFFALSE 41470
// j := 0 else
41460: LD_ADDR_VAR 0 3
41464: PUSH
41465: LD_INT 0
41467: ST_TO_ADDR
41468: GO 41484
// j := j + 1 ;
41470: LD_ADDR_VAR 0 3
41474: PUSH
41475: LD_VAR 0 3
41479: PUSH
41480: LD_INT 1
41482: PLUS
41483: ST_TO_ADDR
// SetSide ( i , j ) ;
41484: LD_VAR 0 2
41488: PPUSH
41489: LD_VAR 0 3
41493: PPUSH
41494: CALL_OW 235
// end ;
41498: GO 41421
41500: POP
41501: POP
// end ;
41502: LD_VAR 0 1
41506: RET
// export function hHackFog ; begin
41507: LD_INT 0
41509: PPUSH
// FogOff ( true ) ;
41510: LD_INT 1
41512: PPUSH
41513: CALL_OW 344
// end ;
41517: LD_VAR 0 1
41521: RET
// export function hHackTeleport ( unit , x , y ) ; begin
41522: LD_INT 0
41524: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
41525: LD_VAR 0 1
41529: PPUSH
41530: LD_VAR 0 2
41534: PPUSH
41535: LD_VAR 0 3
41539: PPUSH
41540: LD_INT 1
41542: PPUSH
41543: LD_INT 1
41545: PPUSH
41546: CALL_OW 483
// CenterOnXY ( x , y ) ;
41550: LD_VAR 0 2
41554: PPUSH
41555: LD_VAR 0 3
41559: PPUSH
41560: CALL_OW 84
// end ; end_of_file
41564: LD_VAR 0 4
41568: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
41569: LD_INT 0
41571: PPUSH
41572: PPUSH
41573: PPUSH
41574: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
41575: LD_VAR 0 1
41579: PPUSH
41580: CALL_OW 264
41584: PUSH
41585: LD_EXP 52
41589: EQUAL
41590: IFFALSE 41662
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
41592: LD_INT 68
41594: PPUSH
41595: LD_VAR 0 1
41599: PPUSH
41600: CALL_OW 255
41604: PPUSH
41605: CALL_OW 321
41609: PUSH
41610: LD_INT 2
41612: EQUAL
41613: IFFALSE 41625
// eff := 70 else
41615: LD_ADDR_VAR 0 4
41619: PUSH
41620: LD_INT 70
41622: ST_TO_ADDR
41623: GO 41633
// eff := 30 ;
41625: LD_ADDR_VAR 0 4
41629: PUSH
41630: LD_INT 30
41632: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
41633: LD_VAR 0 1
41637: PPUSH
41638: CALL_OW 250
41642: PPUSH
41643: LD_VAR 0 1
41647: PPUSH
41648: CALL_OW 251
41652: PPUSH
41653: LD_VAR 0 4
41657: PPUSH
41658: CALL_OW 495
// end ; end ;
41662: LD_VAR 0 2
41666: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
41667: LD_INT 0
41669: PPUSH
// end ;
41670: LD_VAR 0 4
41674: RET
// export function SOS_Command ( cmd ) ; begin
41675: LD_INT 0
41677: PPUSH
// end ;
41678: LD_VAR 0 2
41682: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
41683: LD_INT 0
41685: PPUSH
// end ;
41686: LD_VAR 0 6
41690: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
41691: LD_INT 0
41693: PPUSH
41694: PPUSH
// if not vehicle or not factory then
41695: LD_VAR 0 1
41699: NOT
41700: PUSH
41701: LD_VAR 0 2
41705: NOT
41706: OR
41707: IFFALSE 41711
// exit ;
41709: GO 41942
// if factoryWaypoints >= factory then
41711: LD_EXP 125
41715: PUSH
41716: LD_VAR 0 2
41720: GREATEREQUAL
41721: IFFALSE 41942
// if factoryWaypoints [ factory ] then
41723: LD_EXP 125
41727: PUSH
41728: LD_VAR 0 2
41732: ARRAY
41733: IFFALSE 41942
// begin if GetControl ( vehicle ) = control_manual then
41735: LD_VAR 0 1
41739: PPUSH
41740: CALL_OW 263
41744: PUSH
41745: LD_INT 1
41747: EQUAL
41748: IFFALSE 41829
// begin driver := IsDrivenBy ( vehicle ) ;
41750: LD_ADDR_VAR 0 4
41754: PUSH
41755: LD_VAR 0 1
41759: PPUSH
41760: CALL_OW 311
41764: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
41765: LD_VAR 0 4
41769: PPUSH
41770: LD_EXP 125
41774: PUSH
41775: LD_VAR 0 2
41779: ARRAY
41780: PUSH
41781: LD_INT 1
41783: ARRAY
41784: PPUSH
41785: LD_EXP 125
41789: PUSH
41790: LD_VAR 0 2
41794: ARRAY
41795: PUSH
41796: LD_INT 2
41798: ARRAY
41799: PPUSH
41800: CALL_OW 171
// AddComExitVehicle ( driver ) ;
41804: LD_VAR 0 4
41808: PPUSH
41809: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
41813: LD_VAR 0 4
41817: PPUSH
41818: LD_VAR 0 2
41822: PPUSH
41823: CALL_OW 180
// end else
41827: GO 41942
// if GetControl ( vehicle ) = control_remote then
41829: LD_VAR 0 1
41833: PPUSH
41834: CALL_OW 263
41838: PUSH
41839: LD_INT 2
41841: EQUAL
41842: IFFALSE 41903
// begin wait ( 0 0$2 ) ;
41844: LD_INT 70
41846: PPUSH
41847: CALL_OW 67
// if Connect ( vehicle ) then
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL 54166 0 1
41860: IFFALSE 41901
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
41862: LD_VAR 0 1
41866: PPUSH
41867: LD_EXP 125
41871: PUSH
41872: LD_VAR 0 2
41876: ARRAY
41877: PUSH
41878: LD_INT 1
41880: ARRAY
41881: PPUSH
41882: LD_EXP 125
41886: PUSH
41887: LD_VAR 0 2
41891: ARRAY
41892: PUSH
41893: LD_INT 2
41895: ARRAY
41896: PPUSH
41897: CALL_OW 171
// end else
41901: GO 41942
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
41903: LD_VAR 0 1
41907: PPUSH
41908: LD_EXP 125
41912: PUSH
41913: LD_VAR 0 2
41917: ARRAY
41918: PUSH
41919: LD_INT 1
41921: ARRAY
41922: PPUSH
41923: LD_EXP 125
41927: PUSH
41928: LD_VAR 0 2
41932: ARRAY
41933: PUSH
41934: LD_INT 2
41936: ARRAY
41937: PPUSH
41938: CALL_OW 171
// end ; end ;
41942: LD_VAR 0 3
41946: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
41947: LD_INT 0
41949: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
41950: LD_VAR 0 1
41954: PUSH
41955: LD_INT 250
41957: EQUAL
41958: PUSH
41959: LD_VAR 0 2
41963: PPUSH
41964: CALL_OW 264
41968: PUSH
41969: LD_EXP 55
41973: EQUAL
41974: AND
41975: IFFALSE 41996
// MinerPlaceMine ( unit , x , y ) ;
41977: LD_VAR 0 2
41981: PPUSH
41982: LD_VAR 0 4
41986: PPUSH
41987: LD_VAR 0 5
41991: PPUSH
41992: CALL 44724 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
41996: LD_VAR 0 1
42000: PUSH
42001: LD_INT 251
42003: EQUAL
42004: PUSH
42005: LD_VAR 0 2
42009: PPUSH
42010: CALL_OW 264
42014: PUSH
42015: LD_EXP 55
42019: EQUAL
42020: AND
42021: IFFALSE 42042
// MinerDetonateMine ( unit , x , y ) ;
42023: LD_VAR 0 2
42027: PPUSH
42028: LD_VAR 0 4
42032: PPUSH
42033: LD_VAR 0 5
42037: PPUSH
42038: CALL 45001 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
42042: LD_VAR 0 1
42046: PUSH
42047: LD_INT 252
42049: EQUAL
42050: PUSH
42051: LD_VAR 0 2
42055: PPUSH
42056: CALL_OW 264
42060: PUSH
42061: LD_EXP 55
42065: EQUAL
42066: AND
42067: IFFALSE 42088
// MinerCreateMinefield ( unit , x , y ) ;
42069: LD_VAR 0 2
42073: PPUSH
42074: LD_VAR 0 4
42078: PPUSH
42079: LD_VAR 0 5
42083: PPUSH
42084: CALL 45418 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
42088: LD_VAR 0 1
42092: PUSH
42093: LD_INT 253
42095: EQUAL
42096: PUSH
42097: LD_VAR 0 2
42101: PPUSH
42102: CALL_OW 257
42106: PUSH
42107: LD_INT 5
42109: EQUAL
42110: AND
42111: IFFALSE 42132
// ComBinocular ( unit , x , y ) ;
42113: LD_VAR 0 2
42117: PPUSH
42118: LD_VAR 0 4
42122: PPUSH
42123: LD_VAR 0 5
42127: PPUSH
42128: CALL 45789 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
42132: LD_VAR 0 1
42136: PUSH
42137: LD_INT 254
42139: EQUAL
42140: PUSH
42141: LD_VAR 0 2
42145: PPUSH
42146: CALL_OW 264
42150: PUSH
42151: LD_EXP 50
42155: EQUAL
42156: AND
42157: PUSH
42158: LD_VAR 0 3
42162: PPUSH
42163: CALL_OW 263
42167: PUSH
42168: LD_INT 3
42170: EQUAL
42171: AND
42172: IFFALSE 42188
// HackDestroyVehicle ( unit , selectedUnit ) ;
42174: LD_VAR 0 2
42178: PPUSH
42179: LD_VAR 0 3
42183: PPUSH
42184: CALL 44084 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
42188: LD_VAR 0 1
42192: PUSH
42193: LD_INT 255
42195: EQUAL
42196: PUSH
42197: LD_VAR 0 2
42201: PPUSH
42202: CALL_OW 264
42206: PUSH
42207: LD_INT 14
42209: PUSH
42210: LD_INT 53
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: IN
42217: AND
42218: PUSH
42219: LD_VAR 0 4
42223: PPUSH
42224: LD_VAR 0 5
42228: PPUSH
42229: CALL_OW 488
42233: AND
42234: IFFALSE 42258
// CutTreeXYR ( unit , x , y , 12 ) ;
42236: LD_VAR 0 2
42240: PPUSH
42241: LD_VAR 0 4
42245: PPUSH
42246: LD_VAR 0 5
42250: PPUSH
42251: LD_INT 12
42253: PPUSH
42254: CALL 42650 0 4
// if cmd = 256 then
42258: LD_VAR 0 1
42262: PUSH
42263: LD_INT 256
42265: EQUAL
42266: IFFALSE 42287
// SetFactoryWaypoint ( unit , x , y ) ;
42268: LD_VAR 0 2
42272: PPUSH
42273: LD_VAR 0 4
42277: PPUSH
42278: LD_VAR 0 5
42282: PPUSH
42283: CALL 42292 0 3
// end ;
42287: LD_VAR 0 6
42291: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
42292: LD_INT 0
42294: PPUSH
42295: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
42296: LD_VAR 0 1
42300: NOT
42301: PUSH
42302: LD_VAR 0 2
42306: PPUSH
42307: LD_VAR 0 3
42311: PPUSH
42312: CALL_OW 488
42316: NOT
42317: OR
42318: PUSH
42319: LD_VAR 0 1
42323: PPUSH
42324: CALL_OW 266
42328: PUSH
42329: LD_INT 3
42331: NONEQUAL
42332: PUSH
42333: LD_VAR 0 1
42337: PPUSH
42338: CALL_OW 247
42342: PUSH
42343: LD_INT 1
42345: EQUAL
42346: NOT
42347: AND
42348: OR
42349: IFFALSE 42353
// exit ;
42351: GO 42502
// if GetType ( factory ) = unit_human then
42353: LD_VAR 0 1
42357: PPUSH
42358: CALL_OW 247
42362: PUSH
42363: LD_INT 1
42365: EQUAL
42366: IFFALSE 42383
// factory := IsInUnit ( factory ) ;
42368: LD_ADDR_VAR 0 1
42372: PUSH
42373: LD_VAR 0 1
42377: PPUSH
42378: CALL_OW 310
42382: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
42383: LD_VAR 0 1
42387: PPUSH
42388: CALL_OW 266
42392: PUSH
42393: LD_INT 3
42395: NONEQUAL
42396: IFFALSE 42400
// exit ;
42398: GO 42502
// if HexInfo ( x , y ) = factory then
42400: LD_VAR 0 2
42404: PPUSH
42405: LD_VAR 0 3
42409: PPUSH
42410: CALL_OW 428
42414: PUSH
42415: LD_VAR 0 1
42419: EQUAL
42420: IFFALSE 42447
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
42422: LD_ADDR_EXP 125
42426: PUSH
42427: LD_EXP 125
42431: PPUSH
42432: LD_VAR 0 1
42436: PPUSH
42437: LD_INT 0
42439: PPUSH
42440: CALL_OW 1
42444: ST_TO_ADDR
42445: GO 42498
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
42447: LD_ADDR_EXP 125
42451: PUSH
42452: LD_EXP 125
42456: PPUSH
42457: LD_VAR 0 1
42461: PPUSH
42462: LD_VAR 0 1
42466: PPUSH
42467: CALL_OW 255
42471: PUSH
42472: LD_VAR 0 1
42476: PUSH
42477: LD_VAR 0 2
42481: PUSH
42482: LD_VAR 0 3
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: PPUSH
42493: CALL_OW 1
42497: ST_TO_ADDR
// UpdateFactoryWaypoints ;
42498: CALL 42507 0 0
// end ;
42502: LD_VAR 0 4
42506: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
42507: LD_INT 0
42509: PPUSH
42510: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
42511: LD_STRING resetFactoryWaypoint();
42513: PPUSH
42514: CALL_OW 559
// if factoryWaypoints then
42518: LD_EXP 125
42522: IFFALSE 42645
// begin for i := 1 to factoryWaypoints do
42524: LD_ADDR_VAR 0 2
42528: PUSH
42529: DOUBLE
42530: LD_INT 1
42532: DEC
42533: ST_TO_ADDR
42534: LD_EXP 125
42538: PUSH
42539: FOR_TO
42540: IFFALSE 42643
// if factoryWaypoints [ i ] then
42542: LD_EXP 125
42546: PUSH
42547: LD_VAR 0 2
42551: ARRAY
42552: IFFALSE 42641
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
42554: LD_STRING setFactoryWaypointXY(
42556: PUSH
42557: LD_EXP 125
42561: PUSH
42562: LD_VAR 0 2
42566: ARRAY
42567: PUSH
42568: LD_INT 1
42570: ARRAY
42571: STR
42572: PUSH
42573: LD_STRING ,
42575: STR
42576: PUSH
42577: LD_EXP 125
42581: PUSH
42582: LD_VAR 0 2
42586: ARRAY
42587: PUSH
42588: LD_INT 2
42590: ARRAY
42591: STR
42592: PUSH
42593: LD_STRING ,
42595: STR
42596: PUSH
42597: LD_EXP 125
42601: PUSH
42602: LD_VAR 0 2
42606: ARRAY
42607: PUSH
42608: LD_INT 3
42610: ARRAY
42611: STR
42612: PUSH
42613: LD_STRING ,
42615: STR
42616: PUSH
42617: LD_EXP 125
42621: PUSH
42622: LD_VAR 0 2
42626: ARRAY
42627: PUSH
42628: LD_INT 4
42630: ARRAY
42631: STR
42632: PUSH
42633: LD_STRING )
42635: STR
42636: PPUSH
42637: CALL_OW 559
42641: GO 42539
42643: POP
42644: POP
// end ; end ;
42645: LD_VAR 0 1
42649: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
42650: LD_INT 0
42652: PPUSH
42653: PPUSH
42654: PPUSH
42655: PPUSH
42656: PPUSH
42657: PPUSH
42658: PPUSH
42659: PPUSH
42660: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
42661: LD_VAR 0 1
42665: NOT
42666: PUSH
42667: LD_VAR 0 2
42671: PPUSH
42672: LD_VAR 0 3
42676: PPUSH
42677: CALL_OW 488
42681: NOT
42682: OR
42683: PUSH
42684: LD_VAR 0 4
42688: NOT
42689: OR
42690: IFFALSE 42694
// exit ;
42692: GO 43034
// list := [ ] ;
42694: LD_ADDR_VAR 0 13
42698: PUSH
42699: EMPTY
42700: ST_TO_ADDR
// if x - r < 0 then
42701: LD_VAR 0 2
42705: PUSH
42706: LD_VAR 0 4
42710: MINUS
42711: PUSH
42712: LD_INT 0
42714: LESS
42715: IFFALSE 42727
// min_x := 0 else
42717: LD_ADDR_VAR 0 7
42721: PUSH
42722: LD_INT 0
42724: ST_TO_ADDR
42725: GO 42743
// min_x := x - r ;
42727: LD_ADDR_VAR 0 7
42731: PUSH
42732: LD_VAR 0 2
42736: PUSH
42737: LD_VAR 0 4
42741: MINUS
42742: ST_TO_ADDR
// if y - r < 0 then
42743: LD_VAR 0 3
42747: PUSH
42748: LD_VAR 0 4
42752: MINUS
42753: PUSH
42754: LD_INT 0
42756: LESS
42757: IFFALSE 42769
// min_y := 0 else
42759: LD_ADDR_VAR 0 8
42763: PUSH
42764: LD_INT 0
42766: ST_TO_ADDR
42767: GO 42785
// min_y := y - r ;
42769: LD_ADDR_VAR 0 8
42773: PUSH
42774: LD_VAR 0 3
42778: PUSH
42779: LD_VAR 0 4
42783: MINUS
42784: ST_TO_ADDR
// max_x := x + r ;
42785: LD_ADDR_VAR 0 9
42789: PUSH
42790: LD_VAR 0 2
42794: PUSH
42795: LD_VAR 0 4
42799: PLUS
42800: ST_TO_ADDR
// max_y := y + r ;
42801: LD_ADDR_VAR 0 10
42805: PUSH
42806: LD_VAR 0 3
42810: PUSH
42811: LD_VAR 0 4
42815: PLUS
42816: ST_TO_ADDR
// for _x = min_x to max_x do
42817: LD_ADDR_VAR 0 11
42821: PUSH
42822: DOUBLE
42823: LD_VAR 0 7
42827: DEC
42828: ST_TO_ADDR
42829: LD_VAR 0 9
42833: PUSH
42834: FOR_TO
42835: IFFALSE 42952
// for _y = min_y to max_y do
42837: LD_ADDR_VAR 0 12
42841: PUSH
42842: DOUBLE
42843: LD_VAR 0 8
42847: DEC
42848: ST_TO_ADDR
42849: LD_VAR 0 10
42853: PUSH
42854: FOR_TO
42855: IFFALSE 42948
// begin if not ValidHex ( _x , _y ) then
42857: LD_VAR 0 11
42861: PPUSH
42862: LD_VAR 0 12
42866: PPUSH
42867: CALL_OW 488
42871: NOT
42872: IFFALSE 42876
// continue ;
42874: GO 42854
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
42876: LD_VAR 0 11
42880: PPUSH
42881: LD_VAR 0 12
42885: PPUSH
42886: CALL_OW 351
42890: PUSH
42891: LD_VAR 0 11
42895: PPUSH
42896: LD_VAR 0 12
42900: PPUSH
42901: CALL_OW 554
42905: AND
42906: IFFALSE 42946
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
42908: LD_ADDR_VAR 0 13
42912: PUSH
42913: LD_VAR 0 13
42917: PPUSH
42918: LD_VAR 0 13
42922: PUSH
42923: LD_INT 1
42925: PLUS
42926: PPUSH
42927: LD_VAR 0 11
42931: PUSH
42932: LD_VAR 0 12
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PPUSH
42941: CALL_OW 2
42945: ST_TO_ADDR
// end ;
42946: GO 42854
42948: POP
42949: POP
42950: GO 42834
42952: POP
42953: POP
// if not list then
42954: LD_VAR 0 13
42958: NOT
42959: IFFALSE 42963
// exit ;
42961: GO 43034
// for i in list do
42963: LD_ADDR_VAR 0 6
42967: PUSH
42968: LD_VAR 0 13
42972: PUSH
42973: FOR_IN
42974: IFFALSE 43032
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
42976: LD_VAR 0 1
42980: PPUSH
42981: LD_STRING M
42983: PUSH
42984: LD_VAR 0 6
42988: PUSH
42989: LD_INT 1
42991: ARRAY
42992: PUSH
42993: LD_VAR 0 6
42997: PUSH
42998: LD_INT 2
43000: ARRAY
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: PUSH
43023: EMPTY
43024: LIST
43025: PPUSH
43026: CALL_OW 447
43030: GO 42973
43032: POP
43033: POP
// end ;
43034: LD_VAR 0 5
43038: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
43039: LD_EXP 126
43043: NOT
43044: IFFALSE 43094
43046: GO 43048
43048: DISABLE
// begin initHack := true ;
43049: LD_ADDR_EXP 126
43053: PUSH
43054: LD_INT 1
43056: ST_TO_ADDR
// hackTanks := [ ] ;
43057: LD_ADDR_EXP 127
43061: PUSH
43062: EMPTY
43063: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
43064: LD_ADDR_EXP 128
43068: PUSH
43069: EMPTY
43070: ST_TO_ADDR
// hackLimit := 3 ;
43071: LD_ADDR_EXP 129
43075: PUSH
43076: LD_INT 3
43078: ST_TO_ADDR
// hackDist := 12 ;
43079: LD_ADDR_EXP 130
43083: PUSH
43084: LD_INT 12
43086: ST_TO_ADDR
// hackCounter := [ ] ;
43087: LD_ADDR_EXP 131
43091: PUSH
43092: EMPTY
43093: ST_TO_ADDR
// end ;
43094: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
43095: LD_EXP 126
43099: PUSH
43100: LD_INT 34
43102: PUSH
43103: LD_EXP 50
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PPUSH
43112: CALL_OW 69
43116: AND
43117: IFFALSE 43372
43119: GO 43121
43121: DISABLE
43122: LD_INT 0
43124: PPUSH
43125: PPUSH
// begin enable ;
43126: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
43127: LD_ADDR_VAR 0 1
43131: PUSH
43132: LD_INT 34
43134: PUSH
43135: LD_EXP 50
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PPUSH
43144: CALL_OW 69
43148: PUSH
43149: FOR_IN
43150: IFFALSE 43370
// begin if not i in hackTanks then
43152: LD_VAR 0 1
43156: PUSH
43157: LD_EXP 127
43161: IN
43162: NOT
43163: IFFALSE 43246
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
43165: LD_ADDR_EXP 127
43169: PUSH
43170: LD_EXP 127
43174: PPUSH
43175: LD_EXP 127
43179: PUSH
43180: LD_INT 1
43182: PLUS
43183: PPUSH
43184: LD_VAR 0 1
43188: PPUSH
43189: CALL_OW 1
43193: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
43194: LD_ADDR_EXP 128
43198: PUSH
43199: LD_EXP 128
43203: PPUSH
43204: LD_EXP 128
43208: PUSH
43209: LD_INT 1
43211: PLUS
43212: PPUSH
43213: EMPTY
43214: PPUSH
43215: CALL_OW 1
43219: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
43220: LD_ADDR_EXP 131
43224: PUSH
43225: LD_EXP 131
43229: PPUSH
43230: LD_EXP 131
43234: PUSH
43235: LD_INT 1
43237: PLUS
43238: PPUSH
43239: EMPTY
43240: PPUSH
43241: CALL_OW 1
43245: ST_TO_ADDR
// end ; if not IsOk ( i ) then
43246: LD_VAR 0 1
43250: PPUSH
43251: CALL_OW 302
43255: NOT
43256: IFFALSE 43269
// begin HackUnlinkAll ( i ) ;
43258: LD_VAR 0 1
43262: PPUSH
43263: CALL 43375 0 1
// continue ;
43267: GO 43149
// end ; HackCheckCapturedStatus ( i ) ;
43269: LD_VAR 0 1
43273: PPUSH
43274: CALL 43818 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
43278: LD_ADDR_VAR 0 2
43282: PUSH
43283: LD_INT 81
43285: PUSH
43286: LD_VAR 0 1
43290: PPUSH
43291: CALL_OW 255
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 33
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 91
43312: PUSH
43313: LD_VAR 0 1
43317: PUSH
43318: LD_EXP 130
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 50
43330: PUSH
43331: EMPTY
43332: LIST
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: PPUSH
43340: CALL_OW 69
43344: ST_TO_ADDR
// if not tmp then
43345: LD_VAR 0 2
43349: NOT
43350: IFFALSE 43354
// continue ;
43352: GO 43149
// HackLink ( i , tmp ) ;
43354: LD_VAR 0 1
43358: PPUSH
43359: LD_VAR 0 2
43363: PPUSH
43364: CALL 43511 0 2
// end ;
43368: GO 43149
43370: POP
43371: POP
// end ;
43372: PPOPN 2
43374: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
43375: LD_INT 0
43377: PPUSH
43378: PPUSH
43379: PPUSH
// if not hack in hackTanks then
43380: LD_VAR 0 1
43384: PUSH
43385: LD_EXP 127
43389: IN
43390: NOT
43391: IFFALSE 43395
// exit ;
43393: GO 43506
// index := GetElementIndex ( hackTanks , hack ) ;
43395: LD_ADDR_VAR 0 4
43399: PUSH
43400: LD_EXP 127
43404: PPUSH
43405: LD_VAR 0 1
43409: PPUSH
43410: CALL 50980 0 2
43414: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
43415: LD_EXP 128
43419: PUSH
43420: LD_VAR 0 4
43424: ARRAY
43425: IFFALSE 43506
// begin for i in hackTanksCaptured [ index ] do
43427: LD_ADDR_VAR 0 3
43431: PUSH
43432: LD_EXP 128
43436: PUSH
43437: LD_VAR 0 4
43441: ARRAY
43442: PUSH
43443: FOR_IN
43444: IFFALSE 43470
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
43446: LD_VAR 0 3
43450: PUSH
43451: LD_INT 1
43453: ARRAY
43454: PPUSH
43455: LD_VAR 0 3
43459: PUSH
43460: LD_INT 2
43462: ARRAY
43463: PPUSH
43464: CALL_OW 235
43468: GO 43443
43470: POP
43471: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
43472: LD_ADDR_EXP 128
43476: PUSH
43477: LD_EXP 128
43481: PPUSH
43482: LD_VAR 0 4
43486: PPUSH
43487: EMPTY
43488: PPUSH
43489: CALL_OW 1
43493: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
43494: LD_VAR 0 1
43498: PPUSH
43499: LD_INT 0
43501: PPUSH
43502: CALL_OW 505
// end ; end ;
43506: LD_VAR 0 2
43510: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
43511: LD_INT 0
43513: PPUSH
43514: PPUSH
43515: PPUSH
// if not hack in hackTanks or not vehicles then
43516: LD_VAR 0 1
43520: PUSH
43521: LD_EXP 127
43525: IN
43526: NOT
43527: PUSH
43528: LD_VAR 0 2
43532: NOT
43533: OR
43534: IFFALSE 43538
// exit ;
43536: GO 43813
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
43538: LD_ADDR_VAR 0 2
43542: PUSH
43543: LD_VAR 0 1
43547: PPUSH
43548: LD_VAR 0 2
43552: PPUSH
43553: LD_INT 1
43555: PPUSH
43556: LD_INT 1
43558: PPUSH
43559: CALL 51630 0 4
43563: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
43564: LD_ADDR_VAR 0 5
43568: PUSH
43569: LD_EXP 127
43573: PPUSH
43574: LD_VAR 0 1
43578: PPUSH
43579: CALL 50980 0 2
43583: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
43584: LD_EXP 128
43588: PUSH
43589: LD_VAR 0 5
43593: ARRAY
43594: PUSH
43595: LD_EXP 129
43599: LESS
43600: IFFALSE 43789
// begin for i := 1 to vehicles do
43602: LD_ADDR_VAR 0 4
43606: PUSH
43607: DOUBLE
43608: LD_INT 1
43610: DEC
43611: ST_TO_ADDR
43612: LD_VAR 0 2
43616: PUSH
43617: FOR_TO
43618: IFFALSE 43787
// begin if hackTanksCaptured [ index ] = hackLimit then
43620: LD_EXP 128
43624: PUSH
43625: LD_VAR 0 5
43629: ARRAY
43630: PUSH
43631: LD_EXP 129
43635: EQUAL
43636: IFFALSE 43640
// break ;
43638: GO 43787
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
43640: LD_ADDR_EXP 131
43644: PUSH
43645: LD_EXP 131
43649: PPUSH
43650: LD_VAR 0 5
43654: PPUSH
43655: LD_EXP 131
43659: PUSH
43660: LD_VAR 0 5
43664: ARRAY
43665: PUSH
43666: LD_INT 1
43668: PLUS
43669: PPUSH
43670: CALL_OW 1
43674: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
43675: LD_ADDR_EXP 128
43679: PUSH
43680: LD_EXP 128
43684: PPUSH
43685: LD_VAR 0 5
43689: PUSH
43690: LD_EXP 128
43694: PUSH
43695: LD_VAR 0 5
43699: ARRAY
43700: PUSH
43701: LD_INT 1
43703: PLUS
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PPUSH
43709: LD_VAR 0 2
43713: PUSH
43714: LD_VAR 0 4
43718: ARRAY
43719: PUSH
43720: LD_VAR 0 2
43724: PUSH
43725: LD_VAR 0 4
43729: ARRAY
43730: PPUSH
43731: CALL_OW 255
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PPUSH
43740: CALL 51195 0 3
43744: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
43745: LD_VAR 0 2
43749: PUSH
43750: LD_VAR 0 4
43754: ARRAY
43755: PPUSH
43756: LD_VAR 0 1
43760: PPUSH
43761: CALL_OW 255
43765: PPUSH
43766: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
43770: LD_VAR 0 2
43774: PUSH
43775: LD_VAR 0 4
43779: ARRAY
43780: PPUSH
43781: CALL_OW 141
// end ;
43785: GO 43617
43787: POP
43788: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
43789: LD_VAR 0 1
43793: PPUSH
43794: LD_EXP 128
43798: PUSH
43799: LD_VAR 0 5
43803: ARRAY
43804: PUSH
43805: LD_INT 0
43807: PLUS
43808: PPUSH
43809: CALL_OW 505
// end ;
43813: LD_VAR 0 3
43817: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
43818: LD_INT 0
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
// if not hack in hackTanks then
43824: LD_VAR 0 1
43828: PUSH
43829: LD_EXP 127
43833: IN
43834: NOT
43835: IFFALSE 43839
// exit ;
43837: GO 44079
// index := GetElementIndex ( hackTanks , hack ) ;
43839: LD_ADDR_VAR 0 4
43843: PUSH
43844: LD_EXP 127
43848: PPUSH
43849: LD_VAR 0 1
43853: PPUSH
43854: CALL 50980 0 2
43858: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
43859: LD_ADDR_VAR 0 3
43863: PUSH
43864: DOUBLE
43865: LD_EXP 128
43869: PUSH
43870: LD_VAR 0 4
43874: ARRAY
43875: INC
43876: ST_TO_ADDR
43877: LD_INT 1
43879: PUSH
43880: FOR_DOWNTO
43881: IFFALSE 44053
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
43883: LD_ADDR_VAR 0 5
43887: PUSH
43888: LD_EXP 128
43892: PUSH
43893: LD_VAR 0 4
43897: ARRAY
43898: PUSH
43899: LD_VAR 0 3
43903: ARRAY
43904: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
43905: LD_VAR 0 5
43909: PUSH
43910: LD_INT 1
43912: ARRAY
43913: PPUSH
43914: CALL_OW 302
43918: NOT
43919: PUSH
43920: LD_VAR 0 5
43924: PUSH
43925: LD_INT 1
43927: ARRAY
43928: PPUSH
43929: CALL_OW 255
43933: PUSH
43934: LD_VAR 0 1
43938: PPUSH
43939: CALL_OW 255
43943: NONEQUAL
43944: OR
43945: IFFALSE 44051
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
43947: LD_VAR 0 5
43951: PUSH
43952: LD_INT 1
43954: ARRAY
43955: PPUSH
43956: CALL_OW 305
43960: PUSH
43961: LD_VAR 0 5
43965: PUSH
43966: LD_INT 1
43968: ARRAY
43969: PPUSH
43970: CALL_OW 255
43974: PUSH
43975: LD_VAR 0 1
43979: PPUSH
43980: CALL_OW 255
43984: EQUAL
43985: AND
43986: IFFALSE 44010
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
43988: LD_VAR 0 5
43992: PUSH
43993: LD_INT 1
43995: ARRAY
43996: PPUSH
43997: LD_VAR 0 5
44001: PUSH
44002: LD_INT 2
44004: ARRAY
44005: PPUSH
44006: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
44010: LD_ADDR_EXP 128
44014: PUSH
44015: LD_EXP 128
44019: PPUSH
44020: LD_VAR 0 4
44024: PPUSH
44025: LD_EXP 128
44029: PUSH
44030: LD_VAR 0 4
44034: ARRAY
44035: PPUSH
44036: LD_VAR 0 3
44040: PPUSH
44041: CALL_OW 3
44045: PPUSH
44046: CALL_OW 1
44050: ST_TO_ADDR
// end ; end ;
44051: GO 43880
44053: POP
44054: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44055: LD_VAR 0 1
44059: PPUSH
44060: LD_EXP 128
44064: PUSH
44065: LD_VAR 0 4
44069: ARRAY
44070: PUSH
44071: LD_INT 0
44073: PLUS
44074: PPUSH
44075: CALL_OW 505
// end ;
44079: LD_VAR 0 2
44083: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
44084: LD_INT 0
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
// if not hack in hackTanks then
44090: LD_VAR 0 1
44094: PUSH
44095: LD_EXP 127
44099: IN
44100: NOT
44101: IFFALSE 44105
// exit ;
44103: GO 44190
// index := GetElementIndex ( hackTanks , hack ) ;
44105: LD_ADDR_VAR 0 5
44109: PUSH
44110: LD_EXP 127
44114: PPUSH
44115: LD_VAR 0 1
44119: PPUSH
44120: CALL 50980 0 2
44124: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
44125: LD_ADDR_VAR 0 4
44129: PUSH
44130: DOUBLE
44131: LD_INT 1
44133: DEC
44134: ST_TO_ADDR
44135: LD_EXP 128
44139: PUSH
44140: LD_VAR 0 5
44144: ARRAY
44145: PUSH
44146: FOR_TO
44147: IFFALSE 44188
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
44149: LD_EXP 128
44153: PUSH
44154: LD_VAR 0 5
44158: ARRAY
44159: PUSH
44160: LD_VAR 0 4
44164: ARRAY
44165: PUSH
44166: LD_INT 1
44168: ARRAY
44169: PUSH
44170: LD_VAR 0 2
44174: EQUAL
44175: IFFALSE 44186
// KillUnit ( vehicle ) ;
44177: LD_VAR 0 2
44181: PPUSH
44182: CALL_OW 66
44186: GO 44146
44188: POP
44189: POP
// end ;
44190: LD_VAR 0 3
44194: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
44195: LD_EXP 132
44199: NOT
44200: IFFALSE 44235
44202: GO 44204
44204: DISABLE
// begin initMiner := true ;
44205: LD_ADDR_EXP 132
44209: PUSH
44210: LD_INT 1
44212: ST_TO_ADDR
// minersList := [ ] ;
44213: LD_ADDR_EXP 133
44217: PUSH
44218: EMPTY
44219: ST_TO_ADDR
// minerMinesList := [ ] ;
44220: LD_ADDR_EXP 134
44224: PUSH
44225: EMPTY
44226: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
44227: LD_ADDR_EXP 135
44231: PUSH
44232: LD_INT 5
44234: ST_TO_ADDR
// end ;
44235: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
44236: LD_EXP 132
44240: PUSH
44241: LD_INT 34
44243: PUSH
44244: LD_EXP 55
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PPUSH
44253: CALL_OW 69
44257: AND
44258: IFFALSE 44721
44260: GO 44262
44262: DISABLE
44263: LD_INT 0
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
// begin enable ;
44269: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
44270: LD_ADDR_VAR 0 1
44274: PUSH
44275: LD_INT 34
44277: PUSH
44278: LD_EXP 55
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PPUSH
44287: CALL_OW 69
44291: PUSH
44292: FOR_IN
44293: IFFALSE 44365
// begin if not i in minersList then
44295: LD_VAR 0 1
44299: PUSH
44300: LD_EXP 133
44304: IN
44305: NOT
44306: IFFALSE 44363
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
44308: LD_ADDR_EXP 133
44312: PUSH
44313: LD_EXP 133
44317: PPUSH
44318: LD_EXP 133
44322: PUSH
44323: LD_INT 1
44325: PLUS
44326: PPUSH
44327: LD_VAR 0 1
44331: PPUSH
44332: CALL_OW 1
44336: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
44337: LD_ADDR_EXP 134
44341: PUSH
44342: LD_EXP 134
44346: PPUSH
44347: LD_EXP 134
44351: PUSH
44352: LD_INT 1
44354: PLUS
44355: PPUSH
44356: EMPTY
44357: PPUSH
44358: CALL_OW 1
44362: ST_TO_ADDR
// end end ;
44363: GO 44292
44365: POP
44366: POP
// for i := minerMinesList downto 1 do
44367: LD_ADDR_VAR 0 1
44371: PUSH
44372: DOUBLE
44373: LD_EXP 134
44377: INC
44378: ST_TO_ADDR
44379: LD_INT 1
44381: PUSH
44382: FOR_DOWNTO
44383: IFFALSE 44719
// begin if IsLive ( minersList [ i ] ) then
44385: LD_EXP 133
44389: PUSH
44390: LD_VAR 0 1
44394: ARRAY
44395: PPUSH
44396: CALL_OW 300
44400: IFFALSE 44428
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
44402: LD_EXP 133
44406: PUSH
44407: LD_VAR 0 1
44411: ARRAY
44412: PPUSH
44413: LD_EXP 134
44417: PUSH
44418: LD_VAR 0 1
44422: ARRAY
44423: PPUSH
44424: CALL_OW 505
// if not minerMinesList [ i ] then
44428: LD_EXP 134
44432: PUSH
44433: LD_VAR 0 1
44437: ARRAY
44438: NOT
44439: IFFALSE 44443
// continue ;
44441: GO 44382
// for j := minerMinesList [ i ] downto 1 do
44443: LD_ADDR_VAR 0 2
44447: PUSH
44448: DOUBLE
44449: LD_EXP 134
44453: PUSH
44454: LD_VAR 0 1
44458: ARRAY
44459: INC
44460: ST_TO_ADDR
44461: LD_INT 1
44463: PUSH
44464: FOR_DOWNTO
44465: IFFALSE 44715
// begin side := GetSide ( minersList [ i ] ) ;
44467: LD_ADDR_VAR 0 3
44471: PUSH
44472: LD_EXP 133
44476: PUSH
44477: LD_VAR 0 1
44481: ARRAY
44482: PPUSH
44483: CALL_OW 255
44487: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
44488: LD_ADDR_VAR 0 4
44492: PUSH
44493: LD_EXP 134
44497: PUSH
44498: LD_VAR 0 1
44502: ARRAY
44503: PUSH
44504: LD_VAR 0 2
44508: ARRAY
44509: PUSH
44510: LD_INT 1
44512: ARRAY
44513: PPUSH
44514: LD_EXP 134
44518: PUSH
44519: LD_VAR 0 1
44523: ARRAY
44524: PUSH
44525: LD_VAR 0 2
44529: ARRAY
44530: PUSH
44531: LD_INT 2
44533: ARRAY
44534: PPUSH
44535: CALL_OW 428
44539: ST_TO_ADDR
// if not tmp then
44540: LD_VAR 0 4
44544: NOT
44545: IFFALSE 44549
// continue ;
44547: GO 44464
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
44549: LD_VAR 0 4
44553: PUSH
44554: LD_INT 81
44556: PUSH
44557: LD_VAR 0 3
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PPUSH
44566: CALL_OW 69
44570: IN
44571: PUSH
44572: LD_EXP 134
44576: PUSH
44577: LD_VAR 0 1
44581: ARRAY
44582: PUSH
44583: LD_VAR 0 2
44587: ARRAY
44588: PUSH
44589: LD_INT 1
44591: ARRAY
44592: PPUSH
44593: LD_EXP 134
44597: PUSH
44598: LD_VAR 0 1
44602: ARRAY
44603: PUSH
44604: LD_VAR 0 2
44608: ARRAY
44609: PUSH
44610: LD_INT 2
44612: ARRAY
44613: PPUSH
44614: CALL_OW 458
44618: AND
44619: IFFALSE 44713
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
44621: LD_EXP 134
44625: PUSH
44626: LD_VAR 0 1
44630: ARRAY
44631: PUSH
44632: LD_VAR 0 2
44636: ARRAY
44637: PUSH
44638: LD_INT 1
44640: ARRAY
44641: PPUSH
44642: LD_EXP 134
44646: PUSH
44647: LD_VAR 0 1
44651: ARRAY
44652: PUSH
44653: LD_VAR 0 2
44657: ARRAY
44658: PUSH
44659: LD_INT 2
44661: ARRAY
44662: PPUSH
44663: LD_VAR 0 3
44667: PPUSH
44668: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
44672: LD_ADDR_EXP 134
44676: PUSH
44677: LD_EXP 134
44681: PPUSH
44682: LD_VAR 0 1
44686: PPUSH
44687: LD_EXP 134
44691: PUSH
44692: LD_VAR 0 1
44696: ARRAY
44697: PPUSH
44698: LD_VAR 0 2
44702: PPUSH
44703: CALL_OW 3
44707: PPUSH
44708: CALL_OW 1
44712: ST_TO_ADDR
// end ; end ;
44713: GO 44464
44715: POP
44716: POP
// end ;
44717: GO 44382
44719: POP
44720: POP
// end ;
44721: PPOPN 4
44723: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
44724: LD_INT 0
44726: PPUSH
44727: PPUSH
// result := false ;
44728: LD_ADDR_VAR 0 4
44732: PUSH
44733: LD_INT 0
44735: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
44736: LD_VAR 0 1
44740: PPUSH
44741: CALL_OW 264
44745: PUSH
44746: LD_EXP 55
44750: EQUAL
44751: NOT
44752: IFFALSE 44756
// exit ;
44754: GO 44996
// index := GetElementIndex ( minersList , unit ) ;
44756: LD_ADDR_VAR 0 5
44760: PUSH
44761: LD_EXP 133
44765: PPUSH
44766: LD_VAR 0 1
44770: PPUSH
44771: CALL 50980 0 2
44775: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
44776: LD_EXP 134
44780: PUSH
44781: LD_VAR 0 5
44785: ARRAY
44786: PUSH
44787: LD_EXP 135
44791: GREATEREQUAL
44792: IFFALSE 44796
// exit ;
44794: GO 44996
// ComMoveXY ( unit , x , y ) ;
44796: LD_VAR 0 1
44800: PPUSH
44801: LD_VAR 0 2
44805: PPUSH
44806: LD_VAR 0 3
44810: PPUSH
44811: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
44815: LD_INT 35
44817: PPUSH
44818: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
44822: LD_VAR 0 1
44826: PPUSH
44827: LD_VAR 0 2
44831: PPUSH
44832: LD_VAR 0 3
44836: PPUSH
44837: CALL 81752 0 3
44841: NOT
44842: PUSH
44843: LD_VAR 0 1
44847: PPUSH
44848: CALL_OW 314
44852: AND
44853: IFFALSE 44857
// exit ;
44855: GO 44996
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
44857: LD_VAR 0 2
44861: PPUSH
44862: LD_VAR 0 3
44866: PPUSH
44867: CALL_OW 428
44871: PUSH
44872: LD_VAR 0 1
44876: EQUAL
44877: PUSH
44878: LD_VAR 0 1
44882: PPUSH
44883: CALL_OW 314
44887: NOT
44888: AND
44889: IFFALSE 44815
// PlaySoundXY ( x , y , PlantMine ) ;
44891: LD_VAR 0 2
44895: PPUSH
44896: LD_VAR 0 3
44900: PPUSH
44901: LD_STRING PlantMine
44903: PPUSH
44904: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
44908: LD_VAR 0 2
44912: PPUSH
44913: LD_VAR 0 3
44917: PPUSH
44918: LD_VAR 0 1
44922: PPUSH
44923: CALL_OW 255
44927: PPUSH
44928: LD_INT 0
44930: PPUSH
44931: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
44935: LD_ADDR_EXP 134
44939: PUSH
44940: LD_EXP 134
44944: PPUSH
44945: LD_VAR 0 5
44949: PUSH
44950: LD_EXP 134
44954: PUSH
44955: LD_VAR 0 5
44959: ARRAY
44960: PUSH
44961: LD_INT 1
44963: PLUS
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PPUSH
44969: LD_VAR 0 2
44973: PUSH
44974: LD_VAR 0 3
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PPUSH
44983: CALL 51195 0 3
44987: ST_TO_ADDR
// result := true ;
44988: LD_ADDR_VAR 0 4
44992: PUSH
44993: LD_INT 1
44995: ST_TO_ADDR
// end ;
44996: LD_VAR 0 4
45000: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
45001: LD_INT 0
45003: PPUSH
45004: PPUSH
45005: PPUSH
// if not unit in minersList then
45006: LD_VAR 0 1
45010: PUSH
45011: LD_EXP 133
45015: IN
45016: NOT
45017: IFFALSE 45021
// exit ;
45019: GO 45413
// index := GetElementIndex ( minersList , unit ) ;
45021: LD_ADDR_VAR 0 6
45025: PUSH
45026: LD_EXP 133
45030: PPUSH
45031: LD_VAR 0 1
45035: PPUSH
45036: CALL 50980 0 2
45040: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
45041: LD_ADDR_VAR 0 5
45045: PUSH
45046: DOUBLE
45047: LD_EXP 134
45051: PUSH
45052: LD_VAR 0 6
45056: ARRAY
45057: INC
45058: ST_TO_ADDR
45059: LD_INT 1
45061: PUSH
45062: FOR_DOWNTO
45063: IFFALSE 45224
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
45065: LD_EXP 134
45069: PUSH
45070: LD_VAR 0 6
45074: ARRAY
45075: PUSH
45076: LD_VAR 0 5
45080: ARRAY
45081: PUSH
45082: LD_INT 1
45084: ARRAY
45085: PUSH
45086: LD_VAR 0 2
45090: EQUAL
45091: PUSH
45092: LD_EXP 134
45096: PUSH
45097: LD_VAR 0 6
45101: ARRAY
45102: PUSH
45103: LD_VAR 0 5
45107: ARRAY
45108: PUSH
45109: LD_INT 2
45111: ARRAY
45112: PUSH
45113: LD_VAR 0 3
45117: EQUAL
45118: AND
45119: IFFALSE 45222
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45121: LD_EXP 134
45125: PUSH
45126: LD_VAR 0 6
45130: ARRAY
45131: PUSH
45132: LD_VAR 0 5
45136: ARRAY
45137: PUSH
45138: LD_INT 1
45140: ARRAY
45141: PPUSH
45142: LD_EXP 134
45146: PUSH
45147: LD_VAR 0 6
45151: ARRAY
45152: PUSH
45153: LD_VAR 0 5
45157: ARRAY
45158: PUSH
45159: LD_INT 2
45161: ARRAY
45162: PPUSH
45163: LD_VAR 0 1
45167: PPUSH
45168: CALL_OW 255
45172: PPUSH
45173: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45177: LD_ADDR_EXP 134
45181: PUSH
45182: LD_EXP 134
45186: PPUSH
45187: LD_VAR 0 6
45191: PPUSH
45192: LD_EXP 134
45196: PUSH
45197: LD_VAR 0 6
45201: ARRAY
45202: PPUSH
45203: LD_VAR 0 5
45207: PPUSH
45208: CALL_OW 3
45212: PPUSH
45213: CALL_OW 1
45217: ST_TO_ADDR
// exit ;
45218: POP
45219: POP
45220: GO 45413
// end ; end ;
45222: GO 45062
45224: POP
45225: POP
// for i := minerMinesList [ index ] downto 1 do
45226: LD_ADDR_VAR 0 5
45230: PUSH
45231: DOUBLE
45232: LD_EXP 134
45236: PUSH
45237: LD_VAR 0 6
45241: ARRAY
45242: INC
45243: ST_TO_ADDR
45244: LD_INT 1
45246: PUSH
45247: FOR_DOWNTO
45248: IFFALSE 45411
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
45250: LD_EXP 134
45254: PUSH
45255: LD_VAR 0 6
45259: ARRAY
45260: PUSH
45261: LD_VAR 0 5
45265: ARRAY
45266: PUSH
45267: LD_INT 1
45269: ARRAY
45270: PPUSH
45271: LD_EXP 134
45275: PUSH
45276: LD_VAR 0 6
45280: ARRAY
45281: PUSH
45282: LD_VAR 0 5
45286: ARRAY
45287: PUSH
45288: LD_INT 2
45290: ARRAY
45291: PPUSH
45292: LD_VAR 0 2
45296: PPUSH
45297: LD_VAR 0 3
45301: PPUSH
45302: CALL_OW 298
45306: PUSH
45307: LD_INT 6
45309: LESS
45310: IFFALSE 45409
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45312: LD_EXP 134
45316: PUSH
45317: LD_VAR 0 6
45321: ARRAY
45322: PUSH
45323: LD_VAR 0 5
45327: ARRAY
45328: PUSH
45329: LD_INT 1
45331: ARRAY
45332: PPUSH
45333: LD_EXP 134
45337: PUSH
45338: LD_VAR 0 6
45342: ARRAY
45343: PUSH
45344: LD_VAR 0 5
45348: ARRAY
45349: PUSH
45350: LD_INT 2
45352: ARRAY
45353: PPUSH
45354: LD_VAR 0 1
45358: PPUSH
45359: CALL_OW 255
45363: PPUSH
45364: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45368: LD_ADDR_EXP 134
45372: PUSH
45373: LD_EXP 134
45377: PPUSH
45378: LD_VAR 0 6
45382: PPUSH
45383: LD_EXP 134
45387: PUSH
45388: LD_VAR 0 6
45392: ARRAY
45393: PPUSH
45394: LD_VAR 0 5
45398: PPUSH
45399: CALL_OW 3
45403: PPUSH
45404: CALL_OW 1
45408: ST_TO_ADDR
// end ; end ;
45409: GO 45247
45411: POP
45412: POP
// end ;
45413: LD_VAR 0 4
45417: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
45418: LD_INT 0
45420: PPUSH
45421: PPUSH
45422: PPUSH
45423: PPUSH
45424: PPUSH
45425: PPUSH
45426: PPUSH
45427: PPUSH
45428: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
45429: LD_VAR 0 1
45433: PPUSH
45434: CALL_OW 264
45438: PUSH
45439: LD_EXP 55
45443: EQUAL
45444: NOT
45445: PUSH
45446: LD_VAR 0 1
45450: PUSH
45451: LD_EXP 133
45455: IN
45456: NOT
45457: OR
45458: IFFALSE 45462
// exit ;
45460: GO 45784
// index := GetElementIndex ( minersList , unit ) ;
45462: LD_ADDR_VAR 0 6
45466: PUSH
45467: LD_EXP 133
45471: PPUSH
45472: LD_VAR 0 1
45476: PPUSH
45477: CALL 50980 0 2
45481: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
45482: LD_ADDR_VAR 0 8
45486: PUSH
45487: LD_EXP 135
45491: PUSH
45492: LD_EXP 134
45496: PUSH
45497: LD_VAR 0 6
45501: ARRAY
45502: MINUS
45503: ST_TO_ADDR
// if not minesFreeAmount then
45504: LD_VAR 0 8
45508: NOT
45509: IFFALSE 45513
// exit ;
45511: GO 45784
// tmp := [ ] ;
45513: LD_ADDR_VAR 0 7
45517: PUSH
45518: EMPTY
45519: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
45520: LD_ADDR_VAR 0 5
45524: PUSH
45525: DOUBLE
45526: LD_INT 1
45528: DEC
45529: ST_TO_ADDR
45530: LD_VAR 0 8
45534: PUSH
45535: FOR_TO
45536: IFFALSE 45731
// begin _d := rand ( 0 , 5 ) ;
45538: LD_ADDR_VAR 0 11
45542: PUSH
45543: LD_INT 0
45545: PPUSH
45546: LD_INT 5
45548: PPUSH
45549: CALL_OW 12
45553: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
45554: LD_ADDR_VAR 0 12
45558: PUSH
45559: LD_INT 2
45561: PPUSH
45562: LD_INT 6
45564: PPUSH
45565: CALL_OW 12
45569: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
45570: LD_ADDR_VAR 0 9
45574: PUSH
45575: LD_VAR 0 2
45579: PPUSH
45580: LD_VAR 0 11
45584: PPUSH
45585: LD_VAR 0 12
45589: PPUSH
45590: CALL_OW 272
45594: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
45595: LD_ADDR_VAR 0 10
45599: PUSH
45600: LD_VAR 0 3
45604: PPUSH
45605: LD_VAR 0 11
45609: PPUSH
45610: LD_VAR 0 12
45614: PPUSH
45615: CALL_OW 273
45619: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
45620: LD_VAR 0 9
45624: PPUSH
45625: LD_VAR 0 10
45629: PPUSH
45630: CALL_OW 488
45634: PUSH
45635: LD_VAR 0 9
45639: PUSH
45640: LD_VAR 0 10
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_VAR 0 7
45653: IN
45654: NOT
45655: AND
45656: PUSH
45657: LD_VAR 0 9
45661: PPUSH
45662: LD_VAR 0 10
45666: PPUSH
45667: CALL_OW 458
45671: NOT
45672: AND
45673: IFFALSE 45715
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
45675: LD_ADDR_VAR 0 7
45679: PUSH
45680: LD_VAR 0 7
45684: PPUSH
45685: LD_VAR 0 7
45689: PUSH
45690: LD_INT 1
45692: PLUS
45693: PPUSH
45694: LD_VAR 0 9
45698: PUSH
45699: LD_VAR 0 10
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PPUSH
45708: CALL_OW 1
45712: ST_TO_ADDR
45713: GO 45729
// i := i - 1 ;
45715: LD_ADDR_VAR 0 5
45719: PUSH
45720: LD_VAR 0 5
45724: PUSH
45725: LD_INT 1
45727: MINUS
45728: ST_TO_ADDR
// end ;
45729: GO 45535
45731: POP
45732: POP
// for i in tmp do
45733: LD_ADDR_VAR 0 5
45737: PUSH
45738: LD_VAR 0 7
45742: PUSH
45743: FOR_IN
45744: IFFALSE 45782
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
45746: LD_VAR 0 1
45750: PPUSH
45751: LD_VAR 0 5
45755: PUSH
45756: LD_INT 1
45758: ARRAY
45759: PPUSH
45760: LD_VAR 0 5
45764: PUSH
45765: LD_INT 2
45767: ARRAY
45768: PPUSH
45769: CALL 44724 0 3
45773: NOT
45774: IFFALSE 45780
// exit ;
45776: POP
45777: POP
45778: GO 45784
45780: GO 45743
45782: POP
45783: POP
// end ;
45784: LD_VAR 0 4
45788: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
45789: LD_INT 0
45791: PPUSH
45792: PPUSH
45793: PPUSH
45794: PPUSH
45795: PPUSH
45796: PPUSH
45797: PPUSH
// if not GetClass ( unit ) = class_sniper then
45798: LD_VAR 0 1
45802: PPUSH
45803: CALL_OW 257
45807: PUSH
45808: LD_INT 5
45810: EQUAL
45811: NOT
45812: IFFALSE 45816
// exit ;
45814: GO 46204
// dist := 8 ;
45816: LD_ADDR_VAR 0 5
45820: PUSH
45821: LD_INT 8
45823: ST_TO_ADDR
// viewRange := 12 ;
45824: LD_ADDR_VAR 0 7
45828: PUSH
45829: LD_INT 12
45831: ST_TO_ADDR
// side := GetSide ( unit ) ;
45832: LD_ADDR_VAR 0 6
45836: PUSH
45837: LD_VAR 0 1
45841: PPUSH
45842: CALL_OW 255
45846: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
45847: LD_INT 61
45849: PPUSH
45850: LD_VAR 0 6
45854: PPUSH
45855: CALL_OW 321
45859: PUSH
45860: LD_INT 2
45862: EQUAL
45863: IFFALSE 45873
// viewRange := 16 ;
45865: LD_ADDR_VAR 0 7
45869: PUSH
45870: LD_INT 16
45872: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
45873: LD_VAR 0 1
45877: PPUSH
45878: LD_VAR 0 2
45882: PPUSH
45883: LD_VAR 0 3
45887: PPUSH
45888: CALL_OW 297
45892: PUSH
45893: LD_VAR 0 5
45897: GREATER
45898: IFFALSE 45977
// begin ComMoveXY ( unit , x , y ) ;
45900: LD_VAR 0 1
45904: PPUSH
45905: LD_VAR 0 2
45909: PPUSH
45910: LD_VAR 0 3
45914: PPUSH
45915: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
45919: LD_INT 35
45921: PPUSH
45922: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
45926: LD_VAR 0 1
45930: PPUSH
45931: LD_VAR 0 2
45935: PPUSH
45936: LD_VAR 0 3
45940: PPUSH
45941: CALL 81752 0 3
45945: NOT
45946: IFFALSE 45950
// exit ;
45948: GO 46204
// until GetDistUnitXY ( unit , x , y ) < dist ;
45950: LD_VAR 0 1
45954: PPUSH
45955: LD_VAR 0 2
45959: PPUSH
45960: LD_VAR 0 3
45964: PPUSH
45965: CALL_OW 297
45969: PUSH
45970: LD_VAR 0 5
45974: LESS
45975: IFFALSE 45919
// end ; ComTurnXY ( unit , x , y ) ;
45977: LD_VAR 0 1
45981: PPUSH
45982: LD_VAR 0 2
45986: PPUSH
45987: LD_VAR 0 3
45991: PPUSH
45992: CALL_OW 118
// wait ( 5 ) ;
45996: LD_INT 5
45998: PPUSH
45999: CALL_OW 67
// _d := GetDir ( unit ) ;
46003: LD_ADDR_VAR 0 10
46007: PUSH
46008: LD_VAR 0 1
46012: PPUSH
46013: CALL_OW 254
46017: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
46018: LD_ADDR_VAR 0 8
46022: PUSH
46023: LD_VAR 0 1
46027: PPUSH
46028: CALL_OW 250
46032: PPUSH
46033: LD_VAR 0 10
46037: PPUSH
46038: LD_VAR 0 5
46042: PPUSH
46043: CALL_OW 272
46047: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
46048: LD_ADDR_VAR 0 9
46052: PUSH
46053: LD_VAR 0 1
46057: PPUSH
46058: CALL_OW 251
46062: PPUSH
46063: LD_VAR 0 10
46067: PPUSH
46068: LD_VAR 0 5
46072: PPUSH
46073: CALL_OW 273
46077: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46078: LD_VAR 0 8
46082: PPUSH
46083: LD_VAR 0 9
46087: PPUSH
46088: CALL_OW 488
46092: NOT
46093: IFFALSE 46097
// exit ;
46095: GO 46204
// ComAnimCustom ( unit , 1 ) ;
46097: LD_VAR 0 1
46101: PPUSH
46102: LD_INT 1
46104: PPUSH
46105: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
46109: LD_VAR 0 8
46113: PPUSH
46114: LD_VAR 0 9
46118: PPUSH
46119: LD_VAR 0 6
46123: PPUSH
46124: LD_VAR 0 7
46128: PPUSH
46129: CALL_OW 330
// repeat wait ( 1 ) ;
46133: LD_INT 1
46135: PPUSH
46136: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
46140: LD_VAR 0 1
46144: PPUSH
46145: CALL_OW 316
46149: PUSH
46150: LD_VAR 0 1
46154: PPUSH
46155: CALL_OW 314
46159: OR
46160: PUSH
46161: LD_VAR 0 1
46165: PPUSH
46166: CALL_OW 302
46170: NOT
46171: OR
46172: PUSH
46173: LD_VAR 0 1
46177: PPUSH
46178: CALL_OW 301
46182: OR
46183: IFFALSE 46133
// RemoveSeeing ( _x , _y , side ) ;
46185: LD_VAR 0 8
46189: PPUSH
46190: LD_VAR 0 9
46194: PPUSH
46195: LD_VAR 0 6
46199: PPUSH
46200: CALL_OW 331
// end ; end_of_file
46204: LD_VAR 0 4
46208: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
46209: LD_INT 0
46211: PPUSH
46212: PPUSH
// if exist_mode then
46213: LD_VAR 0 2
46217: IFFALSE 46242
// unit := CreateCharacter ( prefix & ident ) else
46219: LD_ADDR_VAR 0 5
46223: PUSH
46224: LD_VAR 0 3
46228: PUSH
46229: LD_VAR 0 1
46233: STR
46234: PPUSH
46235: CALL_OW 34
46239: ST_TO_ADDR
46240: GO 46257
// unit := NewCharacter ( ident ) ;
46242: LD_ADDR_VAR 0 5
46246: PUSH
46247: LD_VAR 0 1
46251: PPUSH
46252: CALL_OW 25
46256: ST_TO_ADDR
// result := unit ;
46257: LD_ADDR_VAR 0 4
46261: PUSH
46262: LD_VAR 0 5
46266: ST_TO_ADDR
// end ;
46267: LD_VAR 0 4
46271: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
46272: LD_INT 0
46274: PPUSH
46275: PPUSH
// if not side or not nation then
46276: LD_VAR 0 1
46280: NOT
46281: PUSH
46282: LD_VAR 0 2
46286: NOT
46287: OR
46288: IFFALSE 46292
// exit ;
46290: GO 47060
// case nation of nation_american :
46292: LD_VAR 0 2
46296: PUSH
46297: LD_INT 1
46299: DOUBLE
46300: EQUAL
46301: IFTRUE 46305
46303: GO 46519
46305: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
46306: LD_ADDR_VAR 0 4
46310: PUSH
46311: LD_INT 35
46313: PUSH
46314: LD_INT 45
46316: PUSH
46317: LD_INT 46
46319: PUSH
46320: LD_INT 47
46322: PUSH
46323: LD_INT 82
46325: PUSH
46326: LD_INT 83
46328: PUSH
46329: LD_INT 84
46331: PUSH
46332: LD_INT 85
46334: PUSH
46335: LD_INT 86
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: LD_INT 6
46346: PUSH
46347: LD_INT 15
46349: PUSH
46350: LD_INT 16
46352: PUSH
46353: LD_INT 7
46355: PUSH
46356: LD_INT 12
46358: PUSH
46359: LD_INT 13
46361: PUSH
46362: LD_INT 10
46364: PUSH
46365: LD_INT 14
46367: PUSH
46368: LD_INT 20
46370: PUSH
46371: LD_INT 21
46373: PUSH
46374: LD_INT 22
46376: PUSH
46377: LD_INT 25
46379: PUSH
46380: LD_INT 32
46382: PUSH
46383: LD_INT 27
46385: PUSH
46386: LD_INT 36
46388: PUSH
46389: LD_INT 69
46391: PUSH
46392: LD_INT 39
46394: PUSH
46395: LD_INT 34
46397: PUSH
46398: LD_INT 40
46400: PUSH
46401: LD_INT 48
46403: PUSH
46404: LD_INT 49
46406: PUSH
46407: LD_INT 50
46409: PUSH
46410: LD_INT 51
46412: PUSH
46413: LD_INT 52
46415: PUSH
46416: LD_INT 53
46418: PUSH
46419: LD_INT 54
46421: PUSH
46422: LD_INT 55
46424: PUSH
46425: LD_INT 56
46427: PUSH
46428: LD_INT 57
46430: PUSH
46431: LD_INT 58
46433: PUSH
46434: LD_INT 59
46436: PUSH
46437: LD_INT 60
46439: PUSH
46440: LD_INT 61
46442: PUSH
46443: LD_INT 62
46445: PUSH
46446: LD_INT 80
46448: PUSH
46449: LD_INT 82
46451: PUSH
46452: LD_INT 83
46454: PUSH
46455: LD_INT 84
46457: PUSH
46458: LD_INT 85
46460: PUSH
46461: LD_INT 86
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: ST_TO_ADDR
46517: GO 46984
46519: LD_INT 2
46521: DOUBLE
46522: EQUAL
46523: IFTRUE 46527
46525: GO 46753
46527: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
46528: LD_ADDR_VAR 0 4
46532: PUSH
46533: LD_INT 35
46535: PUSH
46536: LD_INT 45
46538: PUSH
46539: LD_INT 46
46541: PUSH
46542: LD_INT 47
46544: PUSH
46545: LD_INT 82
46547: PUSH
46548: LD_INT 83
46550: PUSH
46551: LD_INT 84
46553: PUSH
46554: LD_INT 85
46556: PUSH
46557: LD_INT 87
46559: PUSH
46560: LD_INT 70
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 11
46568: PUSH
46569: LD_INT 3
46571: PUSH
46572: LD_INT 4
46574: PUSH
46575: LD_INT 5
46577: PUSH
46578: LD_INT 6
46580: PUSH
46581: LD_INT 15
46583: PUSH
46584: LD_INT 18
46586: PUSH
46587: LD_INT 7
46589: PUSH
46590: LD_INT 17
46592: PUSH
46593: LD_INT 8
46595: PUSH
46596: LD_INT 20
46598: PUSH
46599: LD_INT 21
46601: PUSH
46602: LD_INT 22
46604: PUSH
46605: LD_INT 72
46607: PUSH
46608: LD_INT 26
46610: PUSH
46611: LD_INT 69
46613: PUSH
46614: LD_INT 39
46616: PUSH
46617: LD_INT 40
46619: PUSH
46620: LD_INT 41
46622: PUSH
46623: LD_INT 42
46625: PUSH
46626: LD_INT 43
46628: PUSH
46629: LD_INT 48
46631: PUSH
46632: LD_INT 49
46634: PUSH
46635: LD_INT 50
46637: PUSH
46638: LD_INT 51
46640: PUSH
46641: LD_INT 52
46643: PUSH
46644: LD_INT 53
46646: PUSH
46647: LD_INT 54
46649: PUSH
46650: LD_INT 55
46652: PUSH
46653: LD_INT 56
46655: PUSH
46656: LD_INT 60
46658: PUSH
46659: LD_INT 61
46661: PUSH
46662: LD_INT 62
46664: PUSH
46665: LD_INT 66
46667: PUSH
46668: LD_INT 67
46670: PUSH
46671: LD_INT 68
46673: PUSH
46674: LD_INT 81
46676: PUSH
46677: LD_INT 82
46679: PUSH
46680: LD_INT 83
46682: PUSH
46683: LD_INT 84
46685: PUSH
46686: LD_INT 85
46688: PUSH
46689: LD_INT 87
46691: PUSH
46692: LD_INT 88
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: ST_TO_ADDR
46751: GO 46984
46753: LD_INT 3
46755: DOUBLE
46756: EQUAL
46757: IFTRUE 46761
46759: GO 46983
46761: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
46762: LD_ADDR_VAR 0 4
46766: PUSH
46767: LD_INT 46
46769: PUSH
46770: LD_INT 47
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 82
46781: PUSH
46782: LD_INT 83
46784: PUSH
46785: LD_INT 84
46787: PUSH
46788: LD_INT 85
46790: PUSH
46791: LD_INT 86
46793: PUSH
46794: LD_INT 11
46796: PUSH
46797: LD_INT 9
46799: PUSH
46800: LD_INT 20
46802: PUSH
46803: LD_INT 19
46805: PUSH
46806: LD_INT 21
46808: PUSH
46809: LD_INT 24
46811: PUSH
46812: LD_INT 22
46814: PUSH
46815: LD_INT 25
46817: PUSH
46818: LD_INT 28
46820: PUSH
46821: LD_INT 29
46823: PUSH
46824: LD_INT 30
46826: PUSH
46827: LD_INT 31
46829: PUSH
46830: LD_INT 37
46832: PUSH
46833: LD_INT 38
46835: PUSH
46836: LD_INT 32
46838: PUSH
46839: LD_INT 27
46841: PUSH
46842: LD_INT 33
46844: PUSH
46845: LD_INT 69
46847: PUSH
46848: LD_INT 39
46850: PUSH
46851: LD_INT 34
46853: PUSH
46854: LD_INT 40
46856: PUSH
46857: LD_INT 71
46859: PUSH
46860: LD_INT 23
46862: PUSH
46863: LD_INT 44
46865: PUSH
46866: LD_INT 48
46868: PUSH
46869: LD_INT 49
46871: PUSH
46872: LD_INT 50
46874: PUSH
46875: LD_INT 51
46877: PUSH
46878: LD_INT 52
46880: PUSH
46881: LD_INT 53
46883: PUSH
46884: LD_INT 54
46886: PUSH
46887: LD_INT 55
46889: PUSH
46890: LD_INT 56
46892: PUSH
46893: LD_INT 57
46895: PUSH
46896: LD_INT 58
46898: PUSH
46899: LD_INT 59
46901: PUSH
46902: LD_INT 63
46904: PUSH
46905: LD_INT 64
46907: PUSH
46908: LD_INT 65
46910: PUSH
46911: LD_INT 82
46913: PUSH
46914: LD_INT 83
46916: PUSH
46917: LD_INT 84
46919: PUSH
46920: LD_INT 85
46922: PUSH
46923: LD_INT 86
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: ST_TO_ADDR
46981: GO 46984
46983: POP
// if state > - 1 and state < 3 then
46984: LD_VAR 0 3
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: GREATER
46993: PUSH
46994: LD_VAR 0 3
46998: PUSH
46999: LD_INT 3
47001: LESS
47002: AND
47003: IFFALSE 47060
// for i in result do
47005: LD_ADDR_VAR 0 5
47009: PUSH
47010: LD_VAR 0 4
47014: PUSH
47015: FOR_IN
47016: IFFALSE 47058
// if GetTech ( i , side ) <> state then
47018: LD_VAR 0 5
47022: PPUSH
47023: LD_VAR 0 1
47027: PPUSH
47028: CALL_OW 321
47032: PUSH
47033: LD_VAR 0 3
47037: NONEQUAL
47038: IFFALSE 47056
// result := result diff i ;
47040: LD_ADDR_VAR 0 4
47044: PUSH
47045: LD_VAR 0 4
47049: PUSH
47050: LD_VAR 0 5
47054: DIFF
47055: ST_TO_ADDR
47056: GO 47015
47058: POP
47059: POP
// end ;
47060: LD_VAR 0 4
47064: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
47065: LD_INT 0
47067: PPUSH
47068: PPUSH
47069: PPUSH
// result := true ;
47070: LD_ADDR_VAR 0 3
47074: PUSH
47075: LD_INT 1
47077: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
47078: LD_ADDR_VAR 0 5
47082: PUSH
47083: LD_VAR 0 2
47087: PPUSH
47088: CALL_OW 480
47092: ST_TO_ADDR
// if not tmp then
47093: LD_VAR 0 5
47097: NOT
47098: IFFALSE 47102
// exit ;
47100: GO 47151
// for i in tmp do
47102: LD_ADDR_VAR 0 4
47106: PUSH
47107: LD_VAR 0 5
47111: PUSH
47112: FOR_IN
47113: IFFALSE 47149
// if GetTech ( i , side ) <> state_researched then
47115: LD_VAR 0 4
47119: PPUSH
47120: LD_VAR 0 1
47124: PPUSH
47125: CALL_OW 321
47129: PUSH
47130: LD_INT 2
47132: NONEQUAL
47133: IFFALSE 47147
// begin result := false ;
47135: LD_ADDR_VAR 0 3
47139: PUSH
47140: LD_INT 0
47142: ST_TO_ADDR
// exit ;
47143: POP
47144: POP
47145: GO 47151
// end ;
47147: GO 47112
47149: POP
47150: POP
// end ;
47151: LD_VAR 0 3
47155: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
47156: LD_INT 0
47158: PPUSH
47159: PPUSH
47160: PPUSH
47161: PPUSH
47162: PPUSH
47163: PPUSH
47164: PPUSH
47165: PPUSH
47166: PPUSH
47167: PPUSH
47168: PPUSH
47169: PPUSH
47170: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
47171: LD_VAR 0 1
47175: NOT
47176: PUSH
47177: LD_VAR 0 1
47181: PPUSH
47182: CALL_OW 257
47186: PUSH
47187: LD_INT 9
47189: NONEQUAL
47190: OR
47191: IFFALSE 47195
// exit ;
47193: GO 47768
// side := GetSide ( unit ) ;
47195: LD_ADDR_VAR 0 9
47199: PUSH
47200: LD_VAR 0 1
47204: PPUSH
47205: CALL_OW 255
47209: ST_TO_ADDR
// tech_space := tech_spacanom ;
47210: LD_ADDR_VAR 0 12
47214: PUSH
47215: LD_INT 29
47217: ST_TO_ADDR
// tech_time := tech_taurad ;
47218: LD_ADDR_VAR 0 13
47222: PUSH
47223: LD_INT 28
47225: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
47226: LD_ADDR_VAR 0 11
47230: PUSH
47231: LD_VAR 0 1
47235: PPUSH
47236: CALL_OW 310
47240: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
47241: LD_VAR 0 11
47245: PPUSH
47246: CALL_OW 247
47250: PUSH
47251: LD_INT 2
47253: EQUAL
47254: IFFALSE 47258
// exit ;
47256: GO 47768
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47258: LD_ADDR_VAR 0 8
47262: PUSH
47263: LD_INT 81
47265: PUSH
47266: LD_VAR 0 9
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 3
47277: PUSH
47278: LD_INT 21
47280: PUSH
47281: LD_INT 3
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PPUSH
47296: CALL_OW 69
47300: ST_TO_ADDR
// if not tmp then
47301: LD_VAR 0 8
47305: NOT
47306: IFFALSE 47310
// exit ;
47308: GO 47768
// if in_unit then
47310: LD_VAR 0 11
47314: IFFALSE 47338
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
47316: LD_ADDR_VAR 0 10
47320: PUSH
47321: LD_VAR 0 8
47325: PPUSH
47326: LD_VAR 0 11
47330: PPUSH
47331: CALL_OW 74
47335: ST_TO_ADDR
47336: GO 47358
// enemy := NearestUnitToUnit ( tmp , unit ) ;
47338: LD_ADDR_VAR 0 10
47342: PUSH
47343: LD_VAR 0 8
47347: PPUSH
47348: LD_VAR 0 1
47352: PPUSH
47353: CALL_OW 74
47357: ST_TO_ADDR
// if not enemy then
47358: LD_VAR 0 10
47362: NOT
47363: IFFALSE 47367
// exit ;
47365: GO 47768
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
47367: LD_VAR 0 11
47371: PUSH
47372: LD_VAR 0 11
47376: PPUSH
47377: LD_VAR 0 10
47381: PPUSH
47382: CALL_OW 296
47386: PUSH
47387: LD_INT 13
47389: GREATER
47390: AND
47391: PUSH
47392: LD_VAR 0 1
47396: PPUSH
47397: LD_VAR 0 10
47401: PPUSH
47402: CALL_OW 296
47406: PUSH
47407: LD_INT 12
47409: GREATER
47410: OR
47411: IFFALSE 47415
// exit ;
47413: GO 47768
// missile := [ 1 ] ;
47415: LD_ADDR_VAR 0 14
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: ST_TO_ADDR
// if Researched ( side , tech_space ) then
47426: LD_VAR 0 9
47430: PPUSH
47431: LD_VAR 0 12
47435: PPUSH
47436: CALL_OW 325
47440: IFFALSE 47469
// missile := Insert ( missile , missile + 1 , 2 ) ;
47442: LD_ADDR_VAR 0 14
47446: PUSH
47447: LD_VAR 0 14
47451: PPUSH
47452: LD_VAR 0 14
47456: PUSH
47457: LD_INT 1
47459: PLUS
47460: PPUSH
47461: LD_INT 2
47463: PPUSH
47464: CALL_OW 2
47468: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
47469: LD_VAR 0 9
47473: PPUSH
47474: LD_VAR 0 13
47478: PPUSH
47479: CALL_OW 325
47483: PUSH
47484: LD_VAR 0 10
47488: PPUSH
47489: CALL_OW 255
47493: PPUSH
47494: LD_VAR 0 13
47498: PPUSH
47499: CALL_OW 325
47503: NOT
47504: AND
47505: IFFALSE 47534
// missile := Insert ( missile , missile + 1 , 3 ) ;
47507: LD_ADDR_VAR 0 14
47511: PUSH
47512: LD_VAR 0 14
47516: PPUSH
47517: LD_VAR 0 14
47521: PUSH
47522: LD_INT 1
47524: PLUS
47525: PPUSH
47526: LD_INT 3
47528: PPUSH
47529: CALL_OW 2
47533: ST_TO_ADDR
// if missile < 2 then
47534: LD_VAR 0 14
47538: PUSH
47539: LD_INT 2
47541: LESS
47542: IFFALSE 47546
// exit ;
47544: GO 47768
// x := GetX ( enemy ) ;
47546: LD_ADDR_VAR 0 4
47550: PUSH
47551: LD_VAR 0 10
47555: PPUSH
47556: CALL_OW 250
47560: ST_TO_ADDR
// y := GetY ( enemy ) ;
47561: LD_ADDR_VAR 0 5
47565: PUSH
47566: LD_VAR 0 10
47570: PPUSH
47571: CALL_OW 251
47575: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
47576: LD_ADDR_VAR 0 6
47580: PUSH
47581: LD_VAR 0 4
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PPUSH
47590: LD_INT 1
47592: PPUSH
47593: CALL_OW 12
47597: PLUS
47598: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
47599: LD_ADDR_VAR 0 7
47603: PUSH
47604: LD_VAR 0 5
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PPUSH
47613: LD_INT 1
47615: PPUSH
47616: CALL_OW 12
47620: PLUS
47621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47622: LD_VAR 0 6
47626: PPUSH
47627: LD_VAR 0 7
47631: PPUSH
47632: CALL_OW 488
47636: NOT
47637: IFFALSE 47659
// begin _x := x ;
47639: LD_ADDR_VAR 0 6
47643: PUSH
47644: LD_VAR 0 4
47648: ST_TO_ADDR
// _y := y ;
47649: LD_ADDR_VAR 0 7
47653: PUSH
47654: LD_VAR 0 5
47658: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
47659: LD_ADDR_VAR 0 3
47663: PUSH
47664: LD_INT 1
47666: PPUSH
47667: LD_VAR 0 14
47671: PPUSH
47672: CALL_OW 12
47676: ST_TO_ADDR
// case i of 1 :
47677: LD_VAR 0 3
47681: PUSH
47682: LD_INT 1
47684: DOUBLE
47685: EQUAL
47686: IFTRUE 47690
47688: GO 47707
47690: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
47691: LD_VAR 0 1
47695: PPUSH
47696: LD_VAR 0 10
47700: PPUSH
47701: CALL_OW 115
47705: GO 47768
47707: LD_INT 2
47709: DOUBLE
47710: EQUAL
47711: IFTRUE 47715
47713: GO 47737
47715: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
47716: LD_VAR 0 1
47720: PPUSH
47721: LD_VAR 0 6
47725: PPUSH
47726: LD_VAR 0 7
47730: PPUSH
47731: CALL_OW 153
47735: GO 47768
47737: LD_INT 3
47739: DOUBLE
47740: EQUAL
47741: IFTRUE 47745
47743: GO 47767
47745: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
47746: LD_VAR 0 1
47750: PPUSH
47751: LD_VAR 0 6
47755: PPUSH
47756: LD_VAR 0 7
47760: PPUSH
47761: CALL_OW 154
47765: GO 47768
47767: POP
// end ;
47768: LD_VAR 0 2
47772: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
47773: LD_INT 0
47775: PPUSH
47776: PPUSH
47777: PPUSH
47778: PPUSH
47779: PPUSH
47780: PPUSH
// if not unit or not building then
47781: LD_VAR 0 1
47785: NOT
47786: PUSH
47787: LD_VAR 0 2
47791: NOT
47792: OR
47793: IFFALSE 47797
// exit ;
47795: GO 47955
// x := GetX ( building ) ;
47797: LD_ADDR_VAR 0 5
47801: PUSH
47802: LD_VAR 0 2
47806: PPUSH
47807: CALL_OW 250
47811: ST_TO_ADDR
// y := GetY ( building ) ;
47812: LD_ADDR_VAR 0 6
47816: PUSH
47817: LD_VAR 0 2
47821: PPUSH
47822: CALL_OW 251
47826: ST_TO_ADDR
// for i = 0 to 5 do
47827: LD_ADDR_VAR 0 4
47831: PUSH
47832: DOUBLE
47833: LD_INT 0
47835: DEC
47836: ST_TO_ADDR
47837: LD_INT 5
47839: PUSH
47840: FOR_TO
47841: IFFALSE 47953
// begin _x := ShiftX ( x , i , 3 ) ;
47843: LD_ADDR_VAR 0 7
47847: PUSH
47848: LD_VAR 0 5
47852: PPUSH
47853: LD_VAR 0 4
47857: PPUSH
47858: LD_INT 3
47860: PPUSH
47861: CALL_OW 272
47865: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
47866: LD_ADDR_VAR 0 8
47870: PUSH
47871: LD_VAR 0 6
47875: PPUSH
47876: LD_VAR 0 4
47880: PPUSH
47881: LD_INT 3
47883: PPUSH
47884: CALL_OW 273
47888: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47889: LD_VAR 0 7
47893: PPUSH
47894: LD_VAR 0 8
47898: PPUSH
47899: CALL_OW 488
47903: NOT
47904: IFFALSE 47908
// continue ;
47906: GO 47840
// if HexInfo ( _x , _y ) = 0 then
47908: LD_VAR 0 7
47912: PPUSH
47913: LD_VAR 0 8
47917: PPUSH
47918: CALL_OW 428
47922: PUSH
47923: LD_INT 0
47925: EQUAL
47926: IFFALSE 47951
// begin ComMoveXY ( unit , _x , _y ) ;
47928: LD_VAR 0 1
47932: PPUSH
47933: LD_VAR 0 7
47937: PPUSH
47938: LD_VAR 0 8
47942: PPUSH
47943: CALL_OW 111
// exit ;
47947: POP
47948: POP
47949: GO 47955
// end ; end ;
47951: GO 47840
47953: POP
47954: POP
// end ;
47955: LD_VAR 0 3
47959: RET
// export function ScanBase ( side , base_area ) ; begin
47960: LD_INT 0
47962: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
47963: LD_ADDR_VAR 0 3
47967: PUSH
47968: LD_VAR 0 2
47972: PPUSH
47973: LD_INT 81
47975: PUSH
47976: LD_VAR 0 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PPUSH
47985: CALL_OW 70
47989: ST_TO_ADDR
// end ;
47990: LD_VAR 0 3
47994: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
47995: LD_INT 0
47997: PPUSH
47998: PPUSH
47999: PPUSH
48000: PPUSH
// result := false ;
48001: LD_ADDR_VAR 0 2
48005: PUSH
48006: LD_INT 0
48008: ST_TO_ADDR
// side := GetSide ( unit ) ;
48009: LD_ADDR_VAR 0 3
48013: PUSH
48014: LD_VAR 0 1
48018: PPUSH
48019: CALL_OW 255
48023: ST_TO_ADDR
// nat := GetNation ( unit ) ;
48024: LD_ADDR_VAR 0 4
48028: PUSH
48029: LD_VAR 0 1
48033: PPUSH
48034: CALL_OW 248
48038: ST_TO_ADDR
// case nat of 1 :
48039: LD_VAR 0 4
48043: PUSH
48044: LD_INT 1
48046: DOUBLE
48047: EQUAL
48048: IFTRUE 48052
48050: GO 48063
48052: POP
// tech := tech_lassight ; 2 :
48053: LD_ADDR_VAR 0 5
48057: PUSH
48058: LD_INT 12
48060: ST_TO_ADDR
48061: GO 48102
48063: LD_INT 2
48065: DOUBLE
48066: EQUAL
48067: IFTRUE 48071
48069: GO 48082
48071: POP
// tech := tech_mortar ; 3 :
48072: LD_ADDR_VAR 0 5
48076: PUSH
48077: LD_INT 41
48079: ST_TO_ADDR
48080: GO 48102
48082: LD_INT 3
48084: DOUBLE
48085: EQUAL
48086: IFTRUE 48090
48088: GO 48101
48090: POP
// tech := tech_bazooka ; end ;
48091: LD_ADDR_VAR 0 5
48095: PUSH
48096: LD_INT 44
48098: ST_TO_ADDR
48099: GO 48102
48101: POP
// if Researched ( side , tech ) then
48102: LD_VAR 0 3
48106: PPUSH
48107: LD_VAR 0 5
48111: PPUSH
48112: CALL_OW 325
48116: IFFALSE 48143
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
48118: LD_ADDR_VAR 0 2
48122: PUSH
48123: LD_INT 5
48125: PUSH
48126: LD_INT 8
48128: PUSH
48129: LD_INT 9
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: LIST
48136: PUSH
48137: LD_VAR 0 4
48141: ARRAY
48142: ST_TO_ADDR
// end ;
48143: LD_VAR 0 2
48147: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
48148: LD_INT 0
48150: PPUSH
48151: PPUSH
48152: PPUSH
// if not mines then
48153: LD_VAR 0 2
48157: NOT
48158: IFFALSE 48162
// exit ;
48160: GO 48306
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48162: LD_ADDR_VAR 0 5
48166: PUSH
48167: LD_INT 81
48169: PUSH
48170: LD_VAR 0 1
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 3
48181: PUSH
48182: LD_INT 21
48184: PUSH
48185: LD_INT 3
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PPUSH
48200: CALL_OW 69
48204: ST_TO_ADDR
// for i in mines do
48205: LD_ADDR_VAR 0 4
48209: PUSH
48210: LD_VAR 0 2
48214: PUSH
48215: FOR_IN
48216: IFFALSE 48304
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
48218: LD_VAR 0 4
48222: PUSH
48223: LD_INT 1
48225: ARRAY
48226: PPUSH
48227: LD_VAR 0 4
48231: PUSH
48232: LD_INT 2
48234: ARRAY
48235: PPUSH
48236: CALL_OW 458
48240: NOT
48241: IFFALSE 48245
// continue ;
48243: GO 48215
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
48245: LD_VAR 0 4
48249: PUSH
48250: LD_INT 1
48252: ARRAY
48253: PPUSH
48254: LD_VAR 0 4
48258: PUSH
48259: LD_INT 2
48261: ARRAY
48262: PPUSH
48263: CALL_OW 428
48267: PUSH
48268: LD_VAR 0 5
48272: IN
48273: IFFALSE 48302
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
48275: LD_VAR 0 4
48279: PUSH
48280: LD_INT 1
48282: ARRAY
48283: PPUSH
48284: LD_VAR 0 4
48288: PUSH
48289: LD_INT 2
48291: ARRAY
48292: PPUSH
48293: LD_VAR 0 1
48297: PPUSH
48298: CALL_OW 456
// end ;
48302: GO 48215
48304: POP
48305: POP
// end ;
48306: LD_VAR 0 3
48310: RET
// export function Count ( array ) ; var i ; begin
48311: LD_INT 0
48313: PPUSH
48314: PPUSH
// result := 0 ;
48315: LD_ADDR_VAR 0 2
48319: PUSH
48320: LD_INT 0
48322: ST_TO_ADDR
// for i in array do
48323: LD_ADDR_VAR 0 3
48327: PUSH
48328: LD_VAR 0 1
48332: PUSH
48333: FOR_IN
48334: IFFALSE 48358
// if i then
48336: LD_VAR 0 3
48340: IFFALSE 48356
// result := result + 1 ;
48342: LD_ADDR_VAR 0 2
48346: PUSH
48347: LD_VAR 0 2
48351: PUSH
48352: LD_INT 1
48354: PLUS
48355: ST_TO_ADDR
48356: GO 48333
48358: POP
48359: POP
// end ;
48360: LD_VAR 0 2
48364: RET
// export function IsEmpty ( building ) ; begin
48365: LD_INT 0
48367: PPUSH
// if not building then
48368: LD_VAR 0 1
48372: NOT
48373: IFFALSE 48377
// exit ;
48375: GO 48420
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
48377: LD_ADDR_VAR 0 2
48381: PUSH
48382: LD_VAR 0 1
48386: PUSH
48387: LD_INT 22
48389: PUSH
48390: LD_VAR 0 1
48394: PPUSH
48395: CALL_OW 255
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 58
48406: PUSH
48407: EMPTY
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PPUSH
48414: CALL_OW 69
48418: IN
48419: ST_TO_ADDR
// end ;
48420: LD_VAR 0 2
48424: RET
// export function IsNotFull ( building ) ; begin
48425: LD_INT 0
48427: PPUSH
// if not building then
48428: LD_VAR 0 1
48432: NOT
48433: IFFALSE 48437
// exit ;
48435: GO 48456
// result := UnitsInside ( building ) < 6 ;
48437: LD_ADDR_VAR 0 2
48441: PUSH
48442: LD_VAR 0 1
48446: PPUSH
48447: CALL_OW 313
48451: PUSH
48452: LD_INT 6
48454: LESS
48455: ST_TO_ADDR
// end ;
48456: LD_VAR 0 2
48460: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
48461: LD_INT 0
48463: PPUSH
48464: PPUSH
48465: PPUSH
48466: PPUSH
// tmp := [ ] ;
48467: LD_ADDR_VAR 0 3
48471: PUSH
48472: EMPTY
48473: ST_TO_ADDR
// list := [ ] ;
48474: LD_ADDR_VAR 0 5
48478: PUSH
48479: EMPTY
48480: ST_TO_ADDR
// for i = 16 to 25 do
48481: LD_ADDR_VAR 0 4
48485: PUSH
48486: DOUBLE
48487: LD_INT 16
48489: DEC
48490: ST_TO_ADDR
48491: LD_INT 25
48493: PUSH
48494: FOR_TO
48495: IFFALSE 48568
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
48497: LD_ADDR_VAR 0 3
48501: PUSH
48502: LD_VAR 0 3
48506: PUSH
48507: LD_INT 22
48509: PUSH
48510: LD_VAR 0 1
48514: PPUSH
48515: CALL_OW 255
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 91
48526: PUSH
48527: LD_VAR 0 1
48531: PUSH
48532: LD_INT 6
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 30
48542: PUSH
48543: LD_VAR 0 4
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: LIST
48556: PUSH
48557: EMPTY
48558: LIST
48559: PPUSH
48560: CALL_OW 69
48564: ADD
48565: ST_TO_ADDR
48566: GO 48494
48568: POP
48569: POP
// for i = 1 to tmp do
48570: LD_ADDR_VAR 0 4
48574: PUSH
48575: DOUBLE
48576: LD_INT 1
48578: DEC
48579: ST_TO_ADDR
48580: LD_VAR 0 3
48584: PUSH
48585: FOR_TO
48586: IFFALSE 48674
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
48588: LD_ADDR_VAR 0 5
48592: PUSH
48593: LD_VAR 0 5
48597: PUSH
48598: LD_VAR 0 3
48602: PUSH
48603: LD_VAR 0 4
48607: ARRAY
48608: PPUSH
48609: CALL_OW 266
48613: PUSH
48614: LD_VAR 0 3
48618: PUSH
48619: LD_VAR 0 4
48623: ARRAY
48624: PPUSH
48625: CALL_OW 250
48629: PUSH
48630: LD_VAR 0 3
48634: PUSH
48635: LD_VAR 0 4
48639: ARRAY
48640: PPUSH
48641: CALL_OW 251
48645: PUSH
48646: LD_VAR 0 3
48650: PUSH
48651: LD_VAR 0 4
48655: ARRAY
48656: PPUSH
48657: CALL_OW 254
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: PUSH
48668: EMPTY
48669: LIST
48670: ADD
48671: ST_TO_ADDR
48672: GO 48585
48674: POP
48675: POP
// result := list ;
48676: LD_ADDR_VAR 0 2
48680: PUSH
48681: LD_VAR 0 5
48685: ST_TO_ADDR
// end ;
48686: LD_VAR 0 2
48690: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
48691: LD_INT 0
48693: PPUSH
48694: PPUSH
48695: PPUSH
48696: PPUSH
48697: PPUSH
48698: PPUSH
48699: PPUSH
// if not factory then
48700: LD_VAR 0 1
48704: NOT
48705: IFFALSE 48709
// exit ;
48707: GO 49302
// if control = control_apeman then
48709: LD_VAR 0 4
48713: PUSH
48714: LD_INT 5
48716: EQUAL
48717: IFFALSE 48826
// begin tmp := UnitsInside ( factory ) ;
48719: LD_ADDR_VAR 0 8
48723: PUSH
48724: LD_VAR 0 1
48728: PPUSH
48729: CALL_OW 313
48733: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
48734: LD_VAR 0 8
48738: PPUSH
48739: LD_INT 25
48741: PUSH
48742: LD_INT 12
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PPUSH
48749: CALL_OW 72
48753: NOT
48754: IFFALSE 48764
// control := control_manual ;
48756: LD_ADDR_VAR 0 4
48760: PUSH
48761: LD_INT 1
48763: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
48764: LD_ADDR_VAR 0 8
48768: PUSH
48769: LD_VAR 0 1
48773: PPUSH
48774: CALL 48461 0 1
48778: ST_TO_ADDR
// if tmp then
48779: LD_VAR 0 8
48783: IFFALSE 48826
// begin for i in tmp do
48785: LD_ADDR_VAR 0 7
48789: PUSH
48790: LD_VAR 0 8
48794: PUSH
48795: FOR_IN
48796: IFFALSE 48824
// if i [ 1 ] = b_ext_radio then
48798: LD_VAR 0 7
48802: PUSH
48803: LD_INT 1
48805: ARRAY
48806: PUSH
48807: LD_INT 22
48809: EQUAL
48810: IFFALSE 48822
// begin control := control_remote ;
48812: LD_ADDR_VAR 0 4
48816: PUSH
48817: LD_INT 2
48819: ST_TO_ADDR
// break ;
48820: GO 48824
// end ;
48822: GO 48795
48824: POP
48825: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
48826: LD_VAR 0 1
48830: PPUSH
48831: LD_VAR 0 2
48835: PPUSH
48836: LD_VAR 0 3
48840: PPUSH
48841: LD_VAR 0 4
48845: PPUSH
48846: LD_VAR 0 5
48850: PPUSH
48851: CALL_OW 448
48855: IFFALSE 48890
// begin result := [ chassis , engine , control , weapon ] ;
48857: LD_ADDR_VAR 0 6
48861: PUSH
48862: LD_VAR 0 2
48866: PUSH
48867: LD_VAR 0 3
48871: PUSH
48872: LD_VAR 0 4
48876: PUSH
48877: LD_VAR 0 5
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: ST_TO_ADDR
// exit ;
48888: GO 49302
// end ; _chassis := AvailableChassisList ( factory ) ;
48890: LD_ADDR_VAR 0 9
48894: PUSH
48895: LD_VAR 0 1
48899: PPUSH
48900: CALL_OW 475
48904: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
48905: LD_ADDR_VAR 0 11
48909: PUSH
48910: LD_VAR 0 1
48914: PPUSH
48915: CALL_OW 476
48919: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
48920: LD_ADDR_VAR 0 12
48924: PUSH
48925: LD_VAR 0 1
48929: PPUSH
48930: CALL_OW 477
48934: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
48935: LD_ADDR_VAR 0 10
48939: PUSH
48940: LD_VAR 0 1
48944: PPUSH
48945: CALL_OW 478
48949: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
48950: LD_VAR 0 9
48954: NOT
48955: PUSH
48956: LD_VAR 0 11
48960: NOT
48961: OR
48962: PUSH
48963: LD_VAR 0 12
48967: NOT
48968: OR
48969: PUSH
48970: LD_VAR 0 10
48974: NOT
48975: OR
48976: IFFALSE 49011
// begin result := [ chassis , engine , control , weapon ] ;
48978: LD_ADDR_VAR 0 6
48982: PUSH
48983: LD_VAR 0 2
48987: PUSH
48988: LD_VAR 0 3
48992: PUSH
48993: LD_VAR 0 4
48997: PUSH
48998: LD_VAR 0 5
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: ST_TO_ADDR
// exit ;
49009: GO 49302
// end ; if not chassis in _chassis then
49011: LD_VAR 0 2
49015: PUSH
49016: LD_VAR 0 9
49020: IN
49021: NOT
49022: IFFALSE 49048
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
49024: LD_ADDR_VAR 0 2
49028: PUSH
49029: LD_VAR 0 9
49033: PUSH
49034: LD_INT 1
49036: PPUSH
49037: LD_VAR 0 9
49041: PPUSH
49042: CALL_OW 12
49046: ARRAY
49047: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
49048: LD_VAR 0 2
49052: PPUSH
49053: LD_VAR 0 3
49057: PPUSH
49058: CALL 49307 0 2
49062: NOT
49063: IFFALSE 49122
// repeat engine := _engine [ 1 ] ;
49065: LD_ADDR_VAR 0 3
49069: PUSH
49070: LD_VAR 0 11
49074: PUSH
49075: LD_INT 1
49077: ARRAY
49078: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
49079: LD_ADDR_VAR 0 11
49083: PUSH
49084: LD_VAR 0 11
49088: PPUSH
49089: LD_INT 1
49091: PPUSH
49092: CALL_OW 3
49096: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
49097: LD_VAR 0 2
49101: PPUSH
49102: LD_VAR 0 3
49106: PPUSH
49107: CALL 49307 0 2
49111: PUSH
49112: LD_VAR 0 11
49116: PUSH
49117: EMPTY
49118: EQUAL
49119: OR
49120: IFFALSE 49065
// if not control in _control then
49122: LD_VAR 0 4
49126: PUSH
49127: LD_VAR 0 12
49131: IN
49132: NOT
49133: IFFALSE 49159
// control := _control [ rand ( 1 , _control ) ] ;
49135: LD_ADDR_VAR 0 4
49139: PUSH
49140: LD_VAR 0 12
49144: PUSH
49145: LD_INT 1
49147: PPUSH
49148: LD_VAR 0 12
49152: PPUSH
49153: CALL_OW 12
49157: ARRAY
49158: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
49159: LD_VAR 0 2
49163: PPUSH
49164: LD_VAR 0 5
49168: PPUSH
49169: CALL 49527 0 2
49173: NOT
49174: IFFALSE 49233
// repeat weapon := _weapon [ 1 ] ;
49176: LD_ADDR_VAR 0 5
49180: PUSH
49181: LD_VAR 0 10
49185: PUSH
49186: LD_INT 1
49188: ARRAY
49189: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
49190: LD_ADDR_VAR 0 10
49194: PUSH
49195: LD_VAR 0 10
49199: PPUSH
49200: LD_INT 1
49202: PPUSH
49203: CALL_OW 3
49207: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
49208: LD_VAR 0 2
49212: PPUSH
49213: LD_VAR 0 5
49217: PPUSH
49218: CALL 49527 0 2
49222: PUSH
49223: LD_VAR 0 10
49227: PUSH
49228: EMPTY
49229: EQUAL
49230: OR
49231: IFFALSE 49176
// result := [ ] ;
49233: LD_ADDR_VAR 0 6
49237: PUSH
49238: EMPTY
49239: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49240: LD_VAR 0 1
49244: PPUSH
49245: LD_VAR 0 2
49249: PPUSH
49250: LD_VAR 0 3
49254: PPUSH
49255: LD_VAR 0 4
49259: PPUSH
49260: LD_VAR 0 5
49264: PPUSH
49265: CALL_OW 448
49269: IFFALSE 49302
// result := [ chassis , engine , control , weapon ] ;
49271: LD_ADDR_VAR 0 6
49275: PUSH
49276: LD_VAR 0 2
49280: PUSH
49281: LD_VAR 0 3
49285: PUSH
49286: LD_VAR 0 4
49290: PUSH
49291: LD_VAR 0 5
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: ST_TO_ADDR
// end ;
49302: LD_VAR 0 6
49306: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
49307: LD_INT 0
49309: PPUSH
// if not chassis or not engine then
49310: LD_VAR 0 1
49314: NOT
49315: PUSH
49316: LD_VAR 0 2
49320: NOT
49321: OR
49322: IFFALSE 49326
// exit ;
49324: GO 49522
// case engine of engine_solar :
49326: LD_VAR 0 2
49330: PUSH
49331: LD_INT 2
49333: DOUBLE
49334: EQUAL
49335: IFTRUE 49339
49337: GO 49377
49339: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
49340: LD_ADDR_VAR 0 3
49344: PUSH
49345: LD_INT 11
49347: PUSH
49348: LD_INT 12
49350: PUSH
49351: LD_INT 13
49353: PUSH
49354: LD_INT 14
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 3
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: ST_TO_ADDR
49375: GO 49506
49377: LD_INT 1
49379: DOUBLE
49380: EQUAL
49381: IFTRUE 49385
49383: GO 49447
49385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
49386: LD_ADDR_VAR 0 3
49390: PUSH
49391: LD_INT 11
49393: PUSH
49394: LD_INT 12
49396: PUSH
49397: LD_INT 13
49399: PUSH
49400: LD_INT 14
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: LD_INT 3
49411: PUSH
49412: LD_INT 4
49414: PUSH
49415: LD_INT 5
49417: PUSH
49418: LD_INT 21
49420: PUSH
49421: LD_INT 23
49423: PUSH
49424: LD_INT 22
49426: PUSH
49427: LD_INT 24
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: ST_TO_ADDR
49445: GO 49506
49447: LD_INT 3
49449: DOUBLE
49450: EQUAL
49451: IFTRUE 49455
49453: GO 49505
49455: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49456: LD_ADDR_VAR 0 3
49460: PUSH
49461: LD_INT 13
49463: PUSH
49464: LD_INT 14
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: LD_INT 3
49472: PUSH
49473: LD_INT 4
49475: PUSH
49476: LD_INT 5
49478: PUSH
49479: LD_INT 21
49481: PUSH
49482: LD_INT 22
49484: PUSH
49485: LD_INT 23
49487: PUSH
49488: LD_INT 24
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: ST_TO_ADDR
49503: GO 49506
49505: POP
// result := ( chassis in result ) ;
49506: LD_ADDR_VAR 0 3
49510: PUSH
49511: LD_VAR 0 1
49515: PUSH
49516: LD_VAR 0 3
49520: IN
49521: ST_TO_ADDR
// end ;
49522: LD_VAR 0 3
49526: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
49527: LD_INT 0
49529: PPUSH
// if not chassis or not weapon then
49530: LD_VAR 0 1
49534: NOT
49535: PUSH
49536: LD_VAR 0 2
49540: NOT
49541: OR
49542: IFFALSE 49546
// exit ;
49544: GO 50608
// case weapon of us_machine_gun :
49546: LD_VAR 0 2
49550: PUSH
49551: LD_INT 2
49553: DOUBLE
49554: EQUAL
49555: IFTRUE 49559
49557: GO 49589
49559: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
49560: LD_ADDR_VAR 0 3
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: LD_INT 3
49573: PUSH
49574: LD_INT 4
49576: PUSH
49577: LD_INT 5
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: ST_TO_ADDR
49587: GO 50592
49589: LD_INT 3
49591: DOUBLE
49592: EQUAL
49593: IFTRUE 49597
49595: GO 49627
49597: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
49598: LD_ADDR_VAR 0 3
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: LD_INT 3
49611: PUSH
49612: LD_INT 4
49614: PUSH
49615: LD_INT 5
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: ST_TO_ADDR
49625: GO 50592
49627: LD_INT 11
49629: DOUBLE
49630: EQUAL
49631: IFTRUE 49635
49633: GO 49665
49635: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
49636: LD_ADDR_VAR 0 3
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: LD_INT 4
49652: PUSH
49653: LD_INT 5
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: ST_TO_ADDR
49663: GO 50592
49665: LD_INT 4
49667: DOUBLE
49668: EQUAL
49669: IFTRUE 49673
49671: GO 49699
49673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
49674: LD_ADDR_VAR 0 3
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: LD_INT 3
49684: PUSH
49685: LD_INT 4
49687: PUSH
49688: LD_INT 5
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: ST_TO_ADDR
49697: GO 50592
49699: LD_INT 5
49701: DOUBLE
49702: EQUAL
49703: IFTRUE 49707
49705: GO 49733
49707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
49708: LD_ADDR_VAR 0 3
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: LD_INT 3
49718: PUSH
49719: LD_INT 4
49721: PUSH
49722: LD_INT 5
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: ST_TO_ADDR
49731: GO 50592
49733: LD_INT 9
49735: DOUBLE
49736: EQUAL
49737: IFTRUE 49741
49739: GO 49767
49741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
49742: LD_ADDR_VAR 0 3
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 3
49752: PUSH
49753: LD_INT 4
49755: PUSH
49756: LD_INT 5
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: ST_TO_ADDR
49765: GO 50592
49767: LD_INT 7
49769: DOUBLE
49770: EQUAL
49771: IFTRUE 49775
49773: GO 49801
49775: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
49776: LD_ADDR_VAR 0 3
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 3
49786: PUSH
49787: LD_INT 4
49789: PUSH
49790: LD_INT 5
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: ST_TO_ADDR
49799: GO 50592
49801: LD_INT 12
49803: DOUBLE
49804: EQUAL
49805: IFTRUE 49809
49807: GO 49835
49809: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
49810: LD_ADDR_VAR 0 3
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: LD_INT 4
49823: PUSH
49824: LD_INT 5
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: ST_TO_ADDR
49833: GO 50592
49835: LD_INT 13
49837: DOUBLE
49838: EQUAL
49839: IFTRUE 49843
49841: GO 49869
49843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
49844: LD_ADDR_VAR 0 3
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 3
49854: PUSH
49855: LD_INT 4
49857: PUSH
49858: LD_INT 5
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: ST_TO_ADDR
49867: GO 50592
49869: LD_INT 14
49871: DOUBLE
49872: EQUAL
49873: IFTRUE 49877
49875: GO 49895
49877: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
49878: LD_ADDR_VAR 0 3
49882: PUSH
49883: LD_INT 4
49885: PUSH
49886: LD_INT 5
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: ST_TO_ADDR
49893: GO 50592
49895: LD_INT 6
49897: DOUBLE
49898: EQUAL
49899: IFTRUE 49903
49901: GO 49921
49903: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
49904: LD_ADDR_VAR 0 3
49908: PUSH
49909: LD_INT 4
49911: PUSH
49912: LD_INT 5
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: ST_TO_ADDR
49919: GO 50592
49921: LD_INT 10
49923: DOUBLE
49924: EQUAL
49925: IFTRUE 49929
49927: GO 49947
49929: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
49930: LD_ADDR_VAR 0 3
49934: PUSH
49935: LD_INT 4
49937: PUSH
49938: LD_INT 5
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: ST_TO_ADDR
49945: GO 50592
49947: LD_INT 22
49949: DOUBLE
49950: EQUAL
49951: IFTRUE 49955
49953: GO 49981
49955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
49956: LD_ADDR_VAR 0 3
49960: PUSH
49961: LD_INT 11
49963: PUSH
49964: LD_INT 12
49966: PUSH
49967: LD_INT 13
49969: PUSH
49970: LD_INT 14
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: ST_TO_ADDR
49979: GO 50592
49981: LD_INT 23
49983: DOUBLE
49984: EQUAL
49985: IFTRUE 49989
49987: GO 50015
49989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
49990: LD_ADDR_VAR 0 3
49994: PUSH
49995: LD_INT 11
49997: PUSH
49998: LD_INT 12
50000: PUSH
50001: LD_INT 13
50003: PUSH
50004: LD_INT 14
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: ST_TO_ADDR
50013: GO 50592
50015: LD_INT 24
50017: DOUBLE
50018: EQUAL
50019: IFTRUE 50023
50021: GO 50049
50023: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
50024: LD_ADDR_VAR 0 3
50028: PUSH
50029: LD_INT 11
50031: PUSH
50032: LD_INT 12
50034: PUSH
50035: LD_INT 13
50037: PUSH
50038: LD_INT 14
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: ST_TO_ADDR
50047: GO 50592
50049: LD_INT 30
50051: DOUBLE
50052: EQUAL
50053: IFTRUE 50057
50055: GO 50083
50057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
50058: LD_ADDR_VAR 0 3
50062: PUSH
50063: LD_INT 11
50065: PUSH
50066: LD_INT 12
50068: PUSH
50069: LD_INT 13
50071: PUSH
50072: LD_INT 14
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: ST_TO_ADDR
50081: GO 50592
50083: LD_INT 25
50085: DOUBLE
50086: EQUAL
50087: IFTRUE 50091
50089: GO 50109
50091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
50092: LD_ADDR_VAR 0 3
50096: PUSH
50097: LD_INT 13
50099: PUSH
50100: LD_INT 14
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: ST_TO_ADDR
50107: GO 50592
50109: LD_INT 27
50111: DOUBLE
50112: EQUAL
50113: IFTRUE 50117
50115: GO 50135
50117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
50118: LD_ADDR_VAR 0 3
50122: PUSH
50123: LD_INT 13
50125: PUSH
50126: LD_INT 14
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: ST_TO_ADDR
50133: GO 50592
50135: LD_EXP 53
50139: DOUBLE
50140: EQUAL
50141: IFTRUE 50145
50143: GO 50171
50145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
50146: LD_ADDR_VAR 0 3
50150: PUSH
50151: LD_INT 11
50153: PUSH
50154: LD_INT 12
50156: PUSH
50157: LD_INT 13
50159: PUSH
50160: LD_INT 14
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: ST_TO_ADDR
50169: GO 50592
50171: LD_INT 28
50173: DOUBLE
50174: EQUAL
50175: IFTRUE 50179
50177: GO 50197
50179: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
50180: LD_ADDR_VAR 0 3
50184: PUSH
50185: LD_INT 13
50187: PUSH
50188: LD_INT 14
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: ST_TO_ADDR
50195: GO 50592
50197: LD_INT 29
50199: DOUBLE
50200: EQUAL
50201: IFTRUE 50205
50203: GO 50223
50205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
50206: LD_ADDR_VAR 0 3
50210: PUSH
50211: LD_INT 13
50213: PUSH
50214: LD_INT 14
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: ST_TO_ADDR
50221: GO 50592
50223: LD_INT 31
50225: DOUBLE
50226: EQUAL
50227: IFTRUE 50231
50229: GO 50249
50231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
50232: LD_ADDR_VAR 0 3
50236: PUSH
50237: LD_INT 13
50239: PUSH
50240: LD_INT 14
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: ST_TO_ADDR
50247: GO 50592
50249: LD_INT 26
50251: DOUBLE
50252: EQUAL
50253: IFTRUE 50257
50255: GO 50275
50257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
50258: LD_ADDR_VAR 0 3
50262: PUSH
50263: LD_INT 13
50265: PUSH
50266: LD_INT 14
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: ST_TO_ADDR
50273: GO 50592
50275: LD_INT 42
50277: DOUBLE
50278: EQUAL
50279: IFTRUE 50283
50281: GO 50309
50283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
50284: LD_ADDR_VAR 0 3
50288: PUSH
50289: LD_INT 21
50291: PUSH
50292: LD_INT 22
50294: PUSH
50295: LD_INT 23
50297: PUSH
50298: LD_INT 24
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: ST_TO_ADDR
50307: GO 50592
50309: LD_INT 43
50311: DOUBLE
50312: EQUAL
50313: IFTRUE 50317
50315: GO 50343
50317: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
50318: LD_ADDR_VAR 0 3
50322: PUSH
50323: LD_INT 21
50325: PUSH
50326: LD_INT 22
50328: PUSH
50329: LD_INT 23
50331: PUSH
50332: LD_INT 24
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: ST_TO_ADDR
50341: GO 50592
50343: LD_INT 44
50345: DOUBLE
50346: EQUAL
50347: IFTRUE 50351
50349: GO 50377
50351: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
50352: LD_ADDR_VAR 0 3
50356: PUSH
50357: LD_INT 21
50359: PUSH
50360: LD_INT 22
50362: PUSH
50363: LD_INT 23
50365: PUSH
50366: LD_INT 24
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: ST_TO_ADDR
50375: GO 50592
50377: LD_INT 45
50379: DOUBLE
50380: EQUAL
50381: IFTRUE 50385
50383: GO 50411
50385: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
50386: LD_ADDR_VAR 0 3
50390: PUSH
50391: LD_INT 21
50393: PUSH
50394: LD_INT 22
50396: PUSH
50397: LD_INT 23
50399: PUSH
50400: LD_INT 24
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: ST_TO_ADDR
50409: GO 50592
50411: LD_INT 49
50413: DOUBLE
50414: EQUAL
50415: IFTRUE 50419
50417: GO 50445
50419: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
50420: LD_ADDR_VAR 0 3
50424: PUSH
50425: LD_INT 21
50427: PUSH
50428: LD_INT 22
50430: PUSH
50431: LD_INT 23
50433: PUSH
50434: LD_INT 24
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: ST_TO_ADDR
50443: GO 50592
50445: LD_INT 51
50447: DOUBLE
50448: EQUAL
50449: IFTRUE 50453
50451: GO 50479
50453: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
50454: LD_ADDR_VAR 0 3
50458: PUSH
50459: LD_INT 21
50461: PUSH
50462: LD_INT 22
50464: PUSH
50465: LD_INT 23
50467: PUSH
50468: LD_INT 24
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
50477: GO 50592
50479: LD_INT 52
50481: DOUBLE
50482: EQUAL
50483: IFTRUE 50487
50485: GO 50513
50487: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
50488: LD_ADDR_VAR 0 3
50492: PUSH
50493: LD_INT 21
50495: PUSH
50496: LD_INT 22
50498: PUSH
50499: LD_INT 23
50501: PUSH
50502: LD_INT 24
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: ST_TO_ADDR
50511: GO 50592
50513: LD_INT 53
50515: DOUBLE
50516: EQUAL
50517: IFTRUE 50521
50519: GO 50539
50521: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
50522: LD_ADDR_VAR 0 3
50526: PUSH
50527: LD_INT 23
50529: PUSH
50530: LD_INT 24
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: ST_TO_ADDR
50537: GO 50592
50539: LD_INT 46
50541: DOUBLE
50542: EQUAL
50543: IFTRUE 50547
50545: GO 50565
50547: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
50548: LD_ADDR_VAR 0 3
50552: PUSH
50553: LD_INT 23
50555: PUSH
50556: LD_INT 24
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: ST_TO_ADDR
50563: GO 50592
50565: LD_INT 47
50567: DOUBLE
50568: EQUAL
50569: IFTRUE 50573
50571: GO 50591
50573: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50574: LD_ADDR_VAR 0 3
50578: PUSH
50579: LD_INT 23
50581: PUSH
50582: LD_INT 24
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: ST_TO_ADDR
50589: GO 50592
50591: POP
// result := ( chassis in result ) ;
50592: LD_ADDR_VAR 0 3
50596: PUSH
50597: LD_VAR 0 1
50601: PUSH
50602: LD_VAR 0 3
50606: IN
50607: ST_TO_ADDR
// end ;
50608: LD_VAR 0 3
50612: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
50613: LD_INT 0
50615: PPUSH
50616: PPUSH
50617: PPUSH
50618: PPUSH
50619: PPUSH
50620: PPUSH
50621: PPUSH
// result := array ;
50622: LD_ADDR_VAR 0 5
50626: PUSH
50627: LD_VAR 0 1
50631: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
50632: LD_VAR 0 1
50636: NOT
50637: PUSH
50638: LD_VAR 0 2
50642: NOT
50643: OR
50644: PUSH
50645: LD_VAR 0 3
50649: NOT
50650: OR
50651: PUSH
50652: LD_VAR 0 2
50656: PUSH
50657: LD_VAR 0 1
50661: GREATER
50662: OR
50663: PUSH
50664: LD_VAR 0 3
50668: PUSH
50669: LD_VAR 0 1
50673: GREATER
50674: OR
50675: IFFALSE 50679
// exit ;
50677: GO 50975
// if direction then
50679: LD_VAR 0 4
50683: IFFALSE 50747
// begin d := 1 ;
50685: LD_ADDR_VAR 0 9
50689: PUSH
50690: LD_INT 1
50692: ST_TO_ADDR
// if i_from > i_to then
50693: LD_VAR 0 2
50697: PUSH
50698: LD_VAR 0 3
50702: GREATER
50703: IFFALSE 50729
// length := ( array - i_from ) + i_to else
50705: LD_ADDR_VAR 0 11
50709: PUSH
50710: LD_VAR 0 1
50714: PUSH
50715: LD_VAR 0 2
50719: MINUS
50720: PUSH
50721: LD_VAR 0 3
50725: PLUS
50726: ST_TO_ADDR
50727: GO 50745
// length := i_to - i_from ;
50729: LD_ADDR_VAR 0 11
50733: PUSH
50734: LD_VAR 0 3
50738: PUSH
50739: LD_VAR 0 2
50743: MINUS
50744: ST_TO_ADDR
// end else
50745: GO 50808
// begin d := - 1 ;
50747: LD_ADDR_VAR 0 9
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: ST_TO_ADDR
// if i_from > i_to then
50756: LD_VAR 0 2
50760: PUSH
50761: LD_VAR 0 3
50765: GREATER
50766: IFFALSE 50786
// length := i_from - i_to else
50768: LD_ADDR_VAR 0 11
50772: PUSH
50773: LD_VAR 0 2
50777: PUSH
50778: LD_VAR 0 3
50782: MINUS
50783: ST_TO_ADDR
50784: GO 50808
// length := ( array - i_to ) + i_from ;
50786: LD_ADDR_VAR 0 11
50790: PUSH
50791: LD_VAR 0 1
50795: PUSH
50796: LD_VAR 0 3
50800: MINUS
50801: PUSH
50802: LD_VAR 0 2
50806: PLUS
50807: ST_TO_ADDR
// end ; if not length then
50808: LD_VAR 0 11
50812: NOT
50813: IFFALSE 50817
// exit ;
50815: GO 50975
// tmp := array ;
50817: LD_ADDR_VAR 0 10
50821: PUSH
50822: LD_VAR 0 1
50826: ST_TO_ADDR
// for i = 1 to length do
50827: LD_ADDR_VAR 0 6
50831: PUSH
50832: DOUBLE
50833: LD_INT 1
50835: DEC
50836: ST_TO_ADDR
50837: LD_VAR 0 11
50841: PUSH
50842: FOR_TO
50843: IFFALSE 50963
// begin for j = 1 to array do
50845: LD_ADDR_VAR 0 7
50849: PUSH
50850: DOUBLE
50851: LD_INT 1
50853: DEC
50854: ST_TO_ADDR
50855: LD_VAR 0 1
50859: PUSH
50860: FOR_TO
50861: IFFALSE 50949
// begin k := j + d ;
50863: LD_ADDR_VAR 0 8
50867: PUSH
50868: LD_VAR 0 7
50872: PUSH
50873: LD_VAR 0 9
50877: PLUS
50878: ST_TO_ADDR
// if k > array then
50879: LD_VAR 0 8
50883: PUSH
50884: LD_VAR 0 1
50888: GREATER
50889: IFFALSE 50899
// k := 1 ;
50891: LD_ADDR_VAR 0 8
50895: PUSH
50896: LD_INT 1
50898: ST_TO_ADDR
// if not k then
50899: LD_VAR 0 8
50903: NOT
50904: IFFALSE 50916
// k := array ;
50906: LD_ADDR_VAR 0 8
50910: PUSH
50911: LD_VAR 0 1
50915: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
50916: LD_ADDR_VAR 0 10
50920: PUSH
50921: LD_VAR 0 10
50925: PPUSH
50926: LD_VAR 0 8
50930: PPUSH
50931: LD_VAR 0 1
50935: PUSH
50936: LD_VAR 0 7
50940: ARRAY
50941: PPUSH
50942: CALL_OW 1
50946: ST_TO_ADDR
// end ;
50947: GO 50860
50949: POP
50950: POP
// array := tmp ;
50951: LD_ADDR_VAR 0 1
50955: PUSH
50956: LD_VAR 0 10
50960: ST_TO_ADDR
// end ;
50961: GO 50842
50963: POP
50964: POP
// result := array ;
50965: LD_ADDR_VAR 0 5
50969: PUSH
50970: LD_VAR 0 1
50974: ST_TO_ADDR
// end ;
50975: LD_VAR 0 5
50979: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
50980: LD_INT 0
50982: PPUSH
50983: PPUSH
// result := 0 ;
50984: LD_ADDR_VAR 0 3
50988: PUSH
50989: LD_INT 0
50991: ST_TO_ADDR
// if not array or not value in array then
50992: LD_VAR 0 1
50996: NOT
50997: PUSH
50998: LD_VAR 0 2
51002: PUSH
51003: LD_VAR 0 1
51007: IN
51008: NOT
51009: OR
51010: IFFALSE 51014
// exit ;
51012: GO 51068
// for i = 1 to array do
51014: LD_ADDR_VAR 0 4
51018: PUSH
51019: DOUBLE
51020: LD_INT 1
51022: DEC
51023: ST_TO_ADDR
51024: LD_VAR 0 1
51028: PUSH
51029: FOR_TO
51030: IFFALSE 51066
// if value = array [ i ] then
51032: LD_VAR 0 2
51036: PUSH
51037: LD_VAR 0 1
51041: PUSH
51042: LD_VAR 0 4
51046: ARRAY
51047: EQUAL
51048: IFFALSE 51064
// begin result := i ;
51050: LD_ADDR_VAR 0 3
51054: PUSH
51055: LD_VAR 0 4
51059: ST_TO_ADDR
// exit ;
51060: POP
51061: POP
51062: GO 51068
// end ;
51064: GO 51029
51066: POP
51067: POP
// end ;
51068: LD_VAR 0 3
51072: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
51073: LD_INT 0
51075: PPUSH
// vc_chassis := chassis ;
51076: LD_ADDR_OWVAR 37
51080: PUSH
51081: LD_VAR 0 1
51085: ST_TO_ADDR
// vc_engine := engine ;
51086: LD_ADDR_OWVAR 39
51090: PUSH
51091: LD_VAR 0 2
51095: ST_TO_ADDR
// vc_control := control ;
51096: LD_ADDR_OWVAR 38
51100: PUSH
51101: LD_VAR 0 3
51105: ST_TO_ADDR
// vc_weapon := weapon ;
51106: LD_ADDR_OWVAR 40
51110: PUSH
51111: LD_VAR 0 4
51115: ST_TO_ADDR
// vc_fuel_battery := fuel ;
51116: LD_ADDR_OWVAR 41
51120: PUSH
51121: LD_VAR 0 5
51125: ST_TO_ADDR
// end ;
51126: LD_VAR 0 6
51130: RET
// export function WantPlant ( unit ) ; var task ; begin
51131: LD_INT 0
51133: PPUSH
51134: PPUSH
// result := false ;
51135: LD_ADDR_VAR 0 2
51139: PUSH
51140: LD_INT 0
51142: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
51143: LD_ADDR_VAR 0 3
51147: PUSH
51148: LD_VAR 0 1
51152: PPUSH
51153: CALL_OW 437
51157: ST_TO_ADDR
// if task then
51158: LD_VAR 0 3
51162: IFFALSE 51190
// if task [ 1 ] [ 1 ] = p then
51164: LD_VAR 0 3
51168: PUSH
51169: LD_INT 1
51171: ARRAY
51172: PUSH
51173: LD_INT 1
51175: ARRAY
51176: PUSH
51177: LD_STRING p
51179: EQUAL
51180: IFFALSE 51190
// result := true ;
51182: LD_ADDR_VAR 0 2
51186: PUSH
51187: LD_INT 1
51189: ST_TO_ADDR
// end ;
51190: LD_VAR 0 2
51194: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
51195: LD_INT 0
51197: PPUSH
51198: PPUSH
51199: PPUSH
51200: PPUSH
// if pos < 1 then
51201: LD_VAR 0 2
51205: PUSH
51206: LD_INT 1
51208: LESS
51209: IFFALSE 51213
// exit ;
51211: GO 51516
// if pos = 1 then
51213: LD_VAR 0 2
51217: PUSH
51218: LD_INT 1
51220: EQUAL
51221: IFFALSE 51254
// result := Replace ( arr , pos [ 1 ] , value ) else
51223: LD_ADDR_VAR 0 4
51227: PUSH
51228: LD_VAR 0 1
51232: PPUSH
51233: LD_VAR 0 2
51237: PUSH
51238: LD_INT 1
51240: ARRAY
51241: PPUSH
51242: LD_VAR 0 3
51246: PPUSH
51247: CALL_OW 1
51251: ST_TO_ADDR
51252: GO 51516
// begin tmp := arr ;
51254: LD_ADDR_VAR 0 6
51258: PUSH
51259: LD_VAR 0 1
51263: ST_TO_ADDR
// s_arr := [ tmp ] ;
51264: LD_ADDR_VAR 0 7
51268: PUSH
51269: LD_VAR 0 6
51273: PUSH
51274: EMPTY
51275: LIST
51276: ST_TO_ADDR
// for i = 1 to pos - 1 do
51277: LD_ADDR_VAR 0 5
51281: PUSH
51282: DOUBLE
51283: LD_INT 1
51285: DEC
51286: ST_TO_ADDR
51287: LD_VAR 0 2
51291: PUSH
51292: LD_INT 1
51294: MINUS
51295: PUSH
51296: FOR_TO
51297: IFFALSE 51342
// begin tmp := tmp [ pos [ i ] ] ;
51299: LD_ADDR_VAR 0 6
51303: PUSH
51304: LD_VAR 0 6
51308: PUSH
51309: LD_VAR 0 2
51313: PUSH
51314: LD_VAR 0 5
51318: ARRAY
51319: ARRAY
51320: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
51321: LD_ADDR_VAR 0 7
51325: PUSH
51326: LD_VAR 0 7
51330: PUSH
51331: LD_VAR 0 6
51335: PUSH
51336: EMPTY
51337: LIST
51338: ADD
51339: ST_TO_ADDR
// end ;
51340: GO 51296
51342: POP
51343: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
51344: LD_ADDR_VAR 0 6
51348: PUSH
51349: LD_VAR 0 6
51353: PPUSH
51354: LD_VAR 0 2
51358: PUSH
51359: LD_VAR 0 2
51363: ARRAY
51364: PPUSH
51365: LD_VAR 0 3
51369: PPUSH
51370: CALL_OW 1
51374: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
51375: LD_ADDR_VAR 0 7
51379: PUSH
51380: LD_VAR 0 7
51384: PPUSH
51385: LD_VAR 0 7
51389: PPUSH
51390: LD_VAR 0 6
51394: PPUSH
51395: CALL_OW 1
51399: ST_TO_ADDR
// for i = s_arr downto 2 do
51400: LD_ADDR_VAR 0 5
51404: PUSH
51405: DOUBLE
51406: LD_VAR 0 7
51410: INC
51411: ST_TO_ADDR
51412: LD_INT 2
51414: PUSH
51415: FOR_DOWNTO
51416: IFFALSE 51500
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
51418: LD_ADDR_VAR 0 6
51422: PUSH
51423: LD_VAR 0 7
51427: PUSH
51428: LD_VAR 0 5
51432: PUSH
51433: LD_INT 1
51435: MINUS
51436: ARRAY
51437: PPUSH
51438: LD_VAR 0 2
51442: PUSH
51443: LD_VAR 0 5
51447: PUSH
51448: LD_INT 1
51450: MINUS
51451: ARRAY
51452: PPUSH
51453: LD_VAR 0 7
51457: PUSH
51458: LD_VAR 0 5
51462: ARRAY
51463: PPUSH
51464: CALL_OW 1
51468: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
51469: LD_ADDR_VAR 0 7
51473: PUSH
51474: LD_VAR 0 7
51478: PPUSH
51479: LD_VAR 0 5
51483: PUSH
51484: LD_INT 1
51486: MINUS
51487: PPUSH
51488: LD_VAR 0 6
51492: PPUSH
51493: CALL_OW 1
51497: ST_TO_ADDR
// end ;
51498: GO 51415
51500: POP
51501: POP
// result := s_arr [ 1 ] ;
51502: LD_ADDR_VAR 0 4
51506: PUSH
51507: LD_VAR 0 7
51511: PUSH
51512: LD_INT 1
51514: ARRAY
51515: ST_TO_ADDR
// end ; end ;
51516: LD_VAR 0 4
51520: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
51521: LD_INT 0
51523: PPUSH
51524: PPUSH
// if not list then
51525: LD_VAR 0 1
51529: NOT
51530: IFFALSE 51534
// exit ;
51532: GO 51625
// i := list [ pos1 ] ;
51534: LD_ADDR_VAR 0 5
51538: PUSH
51539: LD_VAR 0 1
51543: PUSH
51544: LD_VAR 0 2
51548: ARRAY
51549: ST_TO_ADDR
// if not i then
51550: LD_VAR 0 5
51554: NOT
51555: IFFALSE 51559
// exit ;
51557: GO 51625
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
51559: LD_ADDR_VAR 0 1
51563: PUSH
51564: LD_VAR 0 1
51568: PPUSH
51569: LD_VAR 0 2
51573: PPUSH
51574: LD_VAR 0 1
51578: PUSH
51579: LD_VAR 0 3
51583: ARRAY
51584: PPUSH
51585: CALL_OW 1
51589: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
51590: LD_ADDR_VAR 0 1
51594: PUSH
51595: LD_VAR 0 1
51599: PPUSH
51600: LD_VAR 0 3
51604: PPUSH
51605: LD_VAR 0 5
51609: PPUSH
51610: CALL_OW 1
51614: ST_TO_ADDR
// result := list ;
51615: LD_ADDR_VAR 0 4
51619: PUSH
51620: LD_VAR 0 1
51624: ST_TO_ADDR
// end ;
51625: LD_VAR 0 4
51629: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
51630: LD_INT 0
51632: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
51633: LD_ADDR_VAR 0 5
51637: PUSH
51638: LD_VAR 0 1
51642: PPUSH
51643: CALL_OW 250
51647: PPUSH
51648: LD_VAR 0 1
51652: PPUSH
51653: CALL_OW 251
51657: PPUSH
51658: LD_VAR 0 2
51662: PPUSH
51663: LD_VAR 0 3
51667: PPUSH
51668: LD_VAR 0 4
51672: PPUSH
51673: CALL 51683 0 5
51677: ST_TO_ADDR
// end ;
51678: LD_VAR 0 5
51682: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
51683: LD_INT 0
51685: PPUSH
51686: PPUSH
51687: PPUSH
51688: PPUSH
// if not list then
51689: LD_VAR 0 3
51693: NOT
51694: IFFALSE 51698
// exit ;
51696: GO 52086
// result := [ ] ;
51698: LD_ADDR_VAR 0 6
51702: PUSH
51703: EMPTY
51704: ST_TO_ADDR
// for i in list do
51705: LD_ADDR_VAR 0 7
51709: PUSH
51710: LD_VAR 0 3
51714: PUSH
51715: FOR_IN
51716: IFFALSE 51918
// begin tmp := GetDistUnitXY ( i , x , y ) ;
51718: LD_ADDR_VAR 0 9
51722: PUSH
51723: LD_VAR 0 7
51727: PPUSH
51728: LD_VAR 0 1
51732: PPUSH
51733: LD_VAR 0 2
51737: PPUSH
51738: CALL_OW 297
51742: ST_TO_ADDR
// if not result then
51743: LD_VAR 0 6
51747: NOT
51748: IFFALSE 51774
// result := [ [ i , tmp ] ] else
51750: LD_ADDR_VAR 0 6
51754: PUSH
51755: LD_VAR 0 7
51759: PUSH
51760: LD_VAR 0 9
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: ST_TO_ADDR
51772: GO 51916
// begin if result [ result ] [ 2 ] < tmp then
51774: LD_VAR 0 6
51778: PUSH
51779: LD_VAR 0 6
51783: ARRAY
51784: PUSH
51785: LD_INT 2
51787: ARRAY
51788: PUSH
51789: LD_VAR 0 9
51793: LESS
51794: IFFALSE 51836
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
51796: LD_ADDR_VAR 0 6
51800: PUSH
51801: LD_VAR 0 6
51805: PPUSH
51806: LD_VAR 0 6
51810: PUSH
51811: LD_INT 1
51813: PLUS
51814: PPUSH
51815: LD_VAR 0 7
51819: PUSH
51820: LD_VAR 0 9
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PPUSH
51829: CALL_OW 2
51833: ST_TO_ADDR
51834: GO 51916
// for j = 1 to result do
51836: LD_ADDR_VAR 0 8
51840: PUSH
51841: DOUBLE
51842: LD_INT 1
51844: DEC
51845: ST_TO_ADDR
51846: LD_VAR 0 6
51850: PUSH
51851: FOR_TO
51852: IFFALSE 51914
// begin if tmp < result [ j ] [ 2 ] then
51854: LD_VAR 0 9
51858: PUSH
51859: LD_VAR 0 6
51863: PUSH
51864: LD_VAR 0 8
51868: ARRAY
51869: PUSH
51870: LD_INT 2
51872: ARRAY
51873: LESS
51874: IFFALSE 51912
// begin result := Insert ( result , j , [ i , tmp ] ) ;
51876: LD_ADDR_VAR 0 6
51880: PUSH
51881: LD_VAR 0 6
51885: PPUSH
51886: LD_VAR 0 8
51890: PPUSH
51891: LD_VAR 0 7
51895: PUSH
51896: LD_VAR 0 9
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PPUSH
51905: CALL_OW 2
51909: ST_TO_ADDR
// break ;
51910: GO 51914
// end ; end ;
51912: GO 51851
51914: POP
51915: POP
// end ; end ;
51916: GO 51715
51918: POP
51919: POP
// if result and not asc then
51920: LD_VAR 0 6
51924: PUSH
51925: LD_VAR 0 4
51929: NOT
51930: AND
51931: IFFALSE 52006
// begin tmp := result ;
51933: LD_ADDR_VAR 0 9
51937: PUSH
51938: LD_VAR 0 6
51942: ST_TO_ADDR
// for i = tmp downto 1 do
51943: LD_ADDR_VAR 0 7
51947: PUSH
51948: DOUBLE
51949: LD_VAR 0 9
51953: INC
51954: ST_TO_ADDR
51955: LD_INT 1
51957: PUSH
51958: FOR_DOWNTO
51959: IFFALSE 52004
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
51961: LD_ADDR_VAR 0 6
51965: PUSH
51966: LD_VAR 0 6
51970: PPUSH
51971: LD_VAR 0 9
51975: PUSH
51976: LD_VAR 0 7
51980: MINUS
51981: PUSH
51982: LD_INT 1
51984: PLUS
51985: PPUSH
51986: LD_VAR 0 9
51990: PUSH
51991: LD_VAR 0 7
51995: ARRAY
51996: PPUSH
51997: CALL_OW 1
52001: ST_TO_ADDR
52002: GO 51958
52004: POP
52005: POP
// end ; tmp := [ ] ;
52006: LD_ADDR_VAR 0 9
52010: PUSH
52011: EMPTY
52012: ST_TO_ADDR
// if mode then
52013: LD_VAR 0 5
52017: IFFALSE 52086
// begin for i = 1 to result do
52019: LD_ADDR_VAR 0 7
52023: PUSH
52024: DOUBLE
52025: LD_INT 1
52027: DEC
52028: ST_TO_ADDR
52029: LD_VAR 0 6
52033: PUSH
52034: FOR_TO
52035: IFFALSE 52074
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
52037: LD_ADDR_VAR 0 9
52041: PUSH
52042: LD_VAR 0 9
52046: PPUSH
52047: LD_VAR 0 7
52051: PPUSH
52052: LD_VAR 0 6
52056: PUSH
52057: LD_VAR 0 7
52061: ARRAY
52062: PUSH
52063: LD_INT 1
52065: ARRAY
52066: PPUSH
52067: CALL_OW 1
52071: ST_TO_ADDR
52072: GO 52034
52074: POP
52075: POP
// result := tmp ;
52076: LD_ADDR_VAR 0 6
52080: PUSH
52081: LD_VAR 0 9
52085: ST_TO_ADDR
// end ; end ;
52086: LD_VAR 0 6
52090: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
52091: LD_INT 0
52093: PPUSH
52094: PPUSH
52095: PPUSH
52096: PPUSH
52097: PPUSH
52098: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
52099: LD_ADDR_VAR 0 5
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: ST_TO_ADDR
// if not x or not y then
52121: LD_VAR 0 2
52125: NOT
52126: PUSH
52127: LD_VAR 0 3
52131: NOT
52132: OR
52133: IFFALSE 52137
// exit ;
52135: GO 53789
// if not range then
52137: LD_VAR 0 4
52141: NOT
52142: IFFALSE 52152
// range := 10 ;
52144: LD_ADDR_VAR 0 4
52148: PUSH
52149: LD_INT 10
52151: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52152: LD_ADDR_VAR 0 8
52156: PUSH
52157: LD_INT 81
52159: PUSH
52160: LD_VAR 0 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 92
52171: PUSH
52172: LD_VAR 0 2
52176: PUSH
52177: LD_VAR 0 3
52181: PUSH
52182: LD_VAR 0 4
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: LD_INT 21
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: PPUSH
52215: CALL_OW 69
52219: ST_TO_ADDR
// if not tmp then
52220: LD_VAR 0 8
52224: NOT
52225: IFFALSE 52229
// exit ;
52227: GO 53789
// for i in tmp do
52229: LD_ADDR_VAR 0 6
52233: PUSH
52234: LD_VAR 0 8
52238: PUSH
52239: FOR_IN
52240: IFFALSE 53764
// begin points := [ 0 , 0 , 0 ] ;
52242: LD_ADDR_VAR 0 9
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: ST_TO_ADDR
// bpoints := 1 ;
52261: LD_ADDR_VAR 0 10
52265: PUSH
52266: LD_INT 1
52268: ST_TO_ADDR
// case GetType ( i ) of unit_human :
52269: LD_VAR 0 6
52273: PPUSH
52274: CALL_OW 247
52278: PUSH
52279: LD_INT 1
52281: DOUBLE
52282: EQUAL
52283: IFTRUE 52287
52285: GO 52865
52287: POP
// begin if GetClass ( i ) = 1 then
52288: LD_VAR 0 6
52292: PPUSH
52293: CALL_OW 257
52297: PUSH
52298: LD_INT 1
52300: EQUAL
52301: IFFALSE 52322
// points := [ 10 , 5 , 3 ] ;
52303: LD_ADDR_VAR 0 9
52307: PUSH
52308: LD_INT 10
52310: PUSH
52311: LD_INT 5
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: LIST
52321: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
52322: LD_VAR 0 6
52326: PPUSH
52327: CALL_OW 257
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 3
52337: PUSH
52338: LD_INT 4
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: IN
52346: IFFALSE 52367
// points := [ 3 , 2 , 1 ] ;
52348: LD_ADDR_VAR 0 9
52352: PUSH
52353: LD_INT 3
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: ST_TO_ADDR
// if GetClass ( i ) = 5 then
52367: LD_VAR 0 6
52371: PPUSH
52372: CALL_OW 257
52376: PUSH
52377: LD_INT 5
52379: EQUAL
52380: IFFALSE 52401
// points := [ 130 , 5 , 2 ] ;
52382: LD_ADDR_VAR 0 9
52386: PUSH
52387: LD_INT 130
52389: PUSH
52390: LD_INT 5
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: LIST
52400: ST_TO_ADDR
// if GetClass ( i ) = 8 then
52401: LD_VAR 0 6
52405: PPUSH
52406: CALL_OW 257
52410: PUSH
52411: LD_INT 8
52413: EQUAL
52414: IFFALSE 52435
// points := [ 35 , 35 , 30 ] ;
52416: LD_ADDR_VAR 0 9
52420: PUSH
52421: LD_INT 35
52423: PUSH
52424: LD_INT 35
52426: PUSH
52427: LD_INT 30
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: ST_TO_ADDR
// if GetClass ( i ) = 9 then
52435: LD_VAR 0 6
52439: PPUSH
52440: CALL_OW 257
52444: PUSH
52445: LD_INT 9
52447: EQUAL
52448: IFFALSE 52469
// points := [ 20 , 55 , 40 ] ;
52450: LD_ADDR_VAR 0 9
52454: PUSH
52455: LD_INT 20
52457: PUSH
52458: LD_INT 55
52460: PUSH
52461: LD_INT 40
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
52469: LD_VAR 0 6
52473: PPUSH
52474: CALL_OW 257
52478: PUSH
52479: LD_INT 12
52481: PUSH
52482: LD_INT 16
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: IN
52489: IFFALSE 52510
// points := [ 5 , 3 , 2 ] ;
52491: LD_ADDR_VAR 0 9
52495: PUSH
52496: LD_INT 5
52498: PUSH
52499: LD_INT 3
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: LIST
52509: ST_TO_ADDR
// if GetClass ( i ) = 17 then
52510: LD_VAR 0 6
52514: PPUSH
52515: CALL_OW 257
52519: PUSH
52520: LD_INT 17
52522: EQUAL
52523: IFFALSE 52544
// points := [ 100 , 50 , 75 ] ;
52525: LD_ADDR_VAR 0 9
52529: PUSH
52530: LD_INT 100
52532: PUSH
52533: LD_INT 50
52535: PUSH
52536: LD_INT 75
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: LIST
52543: ST_TO_ADDR
// if GetClass ( i ) = 15 then
52544: LD_VAR 0 6
52548: PPUSH
52549: CALL_OW 257
52553: PUSH
52554: LD_INT 15
52556: EQUAL
52557: IFFALSE 52578
// points := [ 10 , 5 , 3 ] ;
52559: LD_ADDR_VAR 0 9
52563: PUSH
52564: LD_INT 10
52566: PUSH
52567: LD_INT 5
52569: PUSH
52570: LD_INT 3
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: LIST
52577: ST_TO_ADDR
// if GetClass ( i ) = 14 then
52578: LD_VAR 0 6
52582: PPUSH
52583: CALL_OW 257
52587: PUSH
52588: LD_INT 14
52590: EQUAL
52591: IFFALSE 52612
// points := [ 10 , 0 , 0 ] ;
52593: LD_ADDR_VAR 0 9
52597: PUSH
52598: LD_INT 10
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: ST_TO_ADDR
// if GetClass ( i ) = 11 then
52612: LD_VAR 0 6
52616: PPUSH
52617: CALL_OW 257
52621: PUSH
52622: LD_INT 11
52624: EQUAL
52625: IFFALSE 52646
// points := [ 30 , 10 , 5 ] ;
52627: LD_ADDR_VAR 0 9
52631: PUSH
52632: LD_INT 30
52634: PUSH
52635: LD_INT 10
52637: PUSH
52638: LD_INT 5
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
52646: LD_VAR 0 1
52650: PPUSH
52651: LD_INT 5
52653: PPUSH
52654: CALL_OW 321
52658: PUSH
52659: LD_INT 2
52661: EQUAL
52662: IFFALSE 52679
// bpoints := bpoints * 1.8 ;
52664: LD_ADDR_VAR 0 10
52668: PUSH
52669: LD_VAR 0 10
52673: PUSH
52674: LD_REAL  1.80000000000000E+0000
52677: MUL
52678: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
52679: LD_VAR 0 6
52683: PPUSH
52684: CALL_OW 257
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: LD_INT 4
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: IN
52707: PUSH
52708: LD_VAR 0 1
52712: PPUSH
52713: LD_INT 51
52715: PPUSH
52716: CALL_OW 321
52720: PUSH
52721: LD_INT 2
52723: EQUAL
52724: AND
52725: IFFALSE 52742
// bpoints := bpoints * 1.2 ;
52727: LD_ADDR_VAR 0 10
52731: PUSH
52732: LD_VAR 0 10
52736: PUSH
52737: LD_REAL  1.20000000000000E+0000
52740: MUL
52741: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
52742: LD_VAR 0 6
52746: PPUSH
52747: CALL_OW 257
52751: PUSH
52752: LD_INT 5
52754: PUSH
52755: LD_INT 7
52757: PUSH
52758: LD_INT 9
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: IN
52766: PUSH
52767: LD_VAR 0 1
52771: PPUSH
52772: LD_INT 52
52774: PPUSH
52775: CALL_OW 321
52779: PUSH
52780: LD_INT 2
52782: EQUAL
52783: AND
52784: IFFALSE 52801
// bpoints := bpoints * 1.5 ;
52786: LD_ADDR_VAR 0 10
52790: PUSH
52791: LD_VAR 0 10
52795: PUSH
52796: LD_REAL  1.50000000000000E+0000
52799: MUL
52800: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
52801: LD_VAR 0 1
52805: PPUSH
52806: LD_INT 66
52808: PPUSH
52809: CALL_OW 321
52813: PUSH
52814: LD_INT 2
52816: EQUAL
52817: IFFALSE 52834
// bpoints := bpoints * 1.1 ;
52819: LD_ADDR_VAR 0 10
52823: PUSH
52824: LD_VAR 0 10
52828: PUSH
52829: LD_REAL  1.10000000000000E+0000
52832: MUL
52833: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
52834: LD_ADDR_VAR 0 10
52838: PUSH
52839: LD_VAR 0 10
52843: PUSH
52844: LD_VAR 0 6
52848: PPUSH
52849: LD_INT 1
52851: PPUSH
52852: CALL_OW 259
52856: PUSH
52857: LD_REAL  1.15000000000000E+0000
52860: MUL
52861: MUL
52862: ST_TO_ADDR
// end ; unit_vehicle :
52863: GO 53693
52865: LD_INT 2
52867: DOUBLE
52868: EQUAL
52869: IFTRUE 52873
52871: GO 53681
52873: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
52874: LD_VAR 0 6
52878: PPUSH
52879: CALL_OW 264
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 42
52889: PUSH
52890: LD_INT 24
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: LIST
52897: IN
52898: IFFALSE 52919
// points := [ 25 , 5 , 3 ] ;
52900: LD_ADDR_VAR 0 9
52904: PUSH
52905: LD_INT 25
52907: PUSH
52908: LD_INT 5
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
52919: LD_VAR 0 6
52923: PPUSH
52924: CALL_OW 264
52928: PUSH
52929: LD_INT 4
52931: PUSH
52932: LD_INT 43
52934: PUSH
52935: LD_INT 25
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: IN
52943: IFFALSE 52964
// points := [ 40 , 15 , 5 ] ;
52945: LD_ADDR_VAR 0 9
52949: PUSH
52950: LD_INT 40
52952: PUSH
52953: LD_INT 15
52955: PUSH
52956: LD_INT 5
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: LIST
52963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
52964: LD_VAR 0 6
52968: PPUSH
52969: CALL_OW 264
52973: PUSH
52974: LD_INT 3
52976: PUSH
52977: LD_INT 23
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: IN
52984: IFFALSE 53005
// points := [ 7 , 25 , 8 ] ;
52986: LD_ADDR_VAR 0 9
52990: PUSH
52991: LD_INT 7
52993: PUSH
52994: LD_INT 25
52996: PUSH
52997: LD_INT 8
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: LIST
53004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
53005: LD_VAR 0 6
53009: PPUSH
53010: CALL_OW 264
53014: PUSH
53015: LD_INT 5
53017: PUSH
53018: LD_INT 27
53020: PUSH
53021: LD_INT 44
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: IN
53029: IFFALSE 53050
// points := [ 14 , 50 , 16 ] ;
53031: LD_ADDR_VAR 0 9
53035: PUSH
53036: LD_INT 14
53038: PUSH
53039: LD_INT 50
53041: PUSH
53042: LD_INT 16
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
53050: LD_VAR 0 6
53054: PPUSH
53055: CALL_OW 264
53059: PUSH
53060: LD_INT 6
53062: PUSH
53063: LD_INT 46
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: IN
53070: IFFALSE 53091
// points := [ 32 , 120 , 70 ] ;
53072: LD_ADDR_VAR 0 9
53076: PUSH
53077: LD_INT 32
53079: PUSH
53080: LD_INT 120
53082: PUSH
53083: LD_INT 70
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: LIST
53090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
53091: LD_VAR 0 6
53095: PPUSH
53096: CALL_OW 264
53100: PUSH
53101: LD_INT 7
53103: PUSH
53104: LD_INT 28
53106: PUSH
53107: LD_INT 45
53109: PUSH
53110: LD_EXP 53
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: IN
53121: IFFALSE 53142
// points := [ 35 , 20 , 45 ] ;
53123: LD_ADDR_VAR 0 9
53127: PUSH
53128: LD_INT 35
53130: PUSH
53131: LD_INT 20
53133: PUSH
53134: LD_INT 45
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
53142: LD_VAR 0 6
53146: PPUSH
53147: CALL_OW 264
53151: PUSH
53152: LD_INT 47
53154: PUSH
53155: EMPTY
53156: LIST
53157: IN
53158: IFFALSE 53179
// points := [ 67 , 45 , 75 ] ;
53160: LD_ADDR_VAR 0 9
53164: PUSH
53165: LD_INT 67
53167: PUSH
53168: LD_INT 45
53170: PUSH
53171: LD_INT 75
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
53179: LD_VAR 0 6
53183: PPUSH
53184: CALL_OW 264
53188: PUSH
53189: LD_INT 26
53191: PUSH
53192: EMPTY
53193: LIST
53194: IN
53195: IFFALSE 53216
// points := [ 120 , 30 , 80 ] ;
53197: LD_ADDR_VAR 0 9
53201: PUSH
53202: LD_INT 120
53204: PUSH
53205: LD_INT 30
53207: PUSH
53208: LD_INT 80
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
53216: LD_VAR 0 6
53220: PPUSH
53221: CALL_OW 264
53225: PUSH
53226: LD_INT 22
53228: PUSH
53229: EMPTY
53230: LIST
53231: IN
53232: IFFALSE 53253
// points := [ 40 , 1 , 1 ] ;
53234: LD_ADDR_VAR 0 9
53238: PUSH
53239: LD_INT 40
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
53253: LD_VAR 0 6
53257: PPUSH
53258: CALL_OW 264
53262: PUSH
53263: LD_INT 29
53265: PUSH
53266: EMPTY
53267: LIST
53268: IN
53269: IFFALSE 53290
// points := [ 70 , 200 , 400 ] ;
53271: LD_ADDR_VAR 0 9
53275: PUSH
53276: LD_INT 70
53278: PUSH
53279: LD_INT 200
53281: PUSH
53282: LD_INT 400
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: LIST
53289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
53290: LD_VAR 0 6
53294: PPUSH
53295: CALL_OW 264
53299: PUSH
53300: LD_INT 14
53302: PUSH
53303: LD_INT 53
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: IN
53310: IFFALSE 53331
// points := [ 40 , 10 , 20 ] ;
53312: LD_ADDR_VAR 0 9
53316: PUSH
53317: LD_INT 40
53319: PUSH
53320: LD_INT 10
53322: PUSH
53323: LD_INT 20
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: LIST
53330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
53331: LD_VAR 0 6
53335: PPUSH
53336: CALL_OW 264
53340: PUSH
53341: LD_INT 9
53343: PUSH
53344: EMPTY
53345: LIST
53346: IN
53347: IFFALSE 53368
// points := [ 5 , 70 , 20 ] ;
53349: LD_ADDR_VAR 0 9
53353: PUSH
53354: LD_INT 5
53356: PUSH
53357: LD_INT 70
53359: PUSH
53360: LD_INT 20
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: LIST
53367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
53368: LD_VAR 0 6
53372: PPUSH
53373: CALL_OW 264
53377: PUSH
53378: LD_INT 10
53380: PUSH
53381: EMPTY
53382: LIST
53383: IN
53384: IFFALSE 53405
// points := [ 35 , 110 , 70 ] ;
53386: LD_ADDR_VAR 0 9
53390: PUSH
53391: LD_INT 35
53393: PUSH
53394: LD_INT 110
53396: PUSH
53397: LD_INT 70
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
53405: LD_VAR 0 6
53409: PPUSH
53410: CALL_OW 265
53414: PUSH
53415: LD_INT 25
53417: EQUAL
53418: IFFALSE 53439
// points := [ 80 , 65 , 100 ] ;
53420: LD_ADDR_VAR 0 9
53424: PUSH
53425: LD_INT 80
53427: PUSH
53428: LD_INT 65
53430: PUSH
53431: LD_INT 100
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: LIST
53438: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
53439: LD_VAR 0 6
53443: PPUSH
53444: CALL_OW 263
53448: PUSH
53449: LD_INT 1
53451: EQUAL
53452: IFFALSE 53487
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
53454: LD_ADDR_VAR 0 10
53458: PUSH
53459: LD_VAR 0 10
53463: PUSH
53464: LD_VAR 0 6
53468: PPUSH
53469: CALL_OW 311
53473: PPUSH
53474: LD_INT 3
53476: PPUSH
53477: CALL_OW 259
53481: PUSH
53482: LD_INT 4
53484: MUL
53485: MUL
53486: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
53487: LD_VAR 0 6
53491: PPUSH
53492: CALL_OW 263
53496: PUSH
53497: LD_INT 2
53499: EQUAL
53500: IFFALSE 53551
// begin j := IsControledBy ( i ) ;
53502: LD_ADDR_VAR 0 7
53506: PUSH
53507: LD_VAR 0 6
53511: PPUSH
53512: CALL_OW 312
53516: ST_TO_ADDR
// if j then
53517: LD_VAR 0 7
53521: IFFALSE 53551
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
53523: LD_ADDR_VAR 0 10
53527: PUSH
53528: LD_VAR 0 10
53532: PUSH
53533: LD_VAR 0 7
53537: PPUSH
53538: LD_INT 3
53540: PPUSH
53541: CALL_OW 259
53545: PUSH
53546: LD_INT 3
53548: MUL
53549: MUL
53550: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
53551: LD_VAR 0 6
53555: PPUSH
53556: CALL_OW 264
53560: PUSH
53561: LD_INT 5
53563: PUSH
53564: LD_INT 6
53566: PUSH
53567: LD_INT 46
53569: PUSH
53570: LD_INT 44
53572: PUSH
53573: LD_INT 47
53575: PUSH
53576: LD_INT 45
53578: PUSH
53579: LD_INT 28
53581: PUSH
53582: LD_INT 7
53584: PUSH
53585: LD_INT 27
53587: PUSH
53588: LD_INT 29
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: IN
53603: PUSH
53604: LD_VAR 0 1
53608: PPUSH
53609: LD_INT 52
53611: PPUSH
53612: CALL_OW 321
53616: PUSH
53617: LD_INT 2
53619: EQUAL
53620: AND
53621: IFFALSE 53638
// bpoints := bpoints * 1.2 ;
53623: LD_ADDR_VAR 0 10
53627: PUSH
53628: LD_VAR 0 10
53632: PUSH
53633: LD_REAL  1.20000000000000E+0000
53636: MUL
53637: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
53638: LD_VAR 0 6
53642: PPUSH
53643: CALL_OW 264
53647: PUSH
53648: LD_INT 6
53650: PUSH
53651: LD_INT 46
53653: PUSH
53654: LD_INT 47
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: IN
53662: IFFALSE 53679
// bpoints := bpoints * 1.2 ;
53664: LD_ADDR_VAR 0 10
53668: PUSH
53669: LD_VAR 0 10
53673: PUSH
53674: LD_REAL  1.20000000000000E+0000
53677: MUL
53678: ST_TO_ADDR
// end ; unit_building :
53679: GO 53693
53681: LD_INT 3
53683: DOUBLE
53684: EQUAL
53685: IFTRUE 53689
53687: GO 53692
53689: POP
// ; end ;
53690: GO 53693
53692: POP
// for j = 1 to 3 do
53693: LD_ADDR_VAR 0 7
53697: PUSH
53698: DOUBLE
53699: LD_INT 1
53701: DEC
53702: ST_TO_ADDR
53703: LD_INT 3
53705: PUSH
53706: FOR_TO
53707: IFFALSE 53760
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
53709: LD_ADDR_VAR 0 5
53713: PUSH
53714: LD_VAR 0 5
53718: PPUSH
53719: LD_VAR 0 7
53723: PPUSH
53724: LD_VAR 0 5
53728: PUSH
53729: LD_VAR 0 7
53733: ARRAY
53734: PUSH
53735: LD_VAR 0 9
53739: PUSH
53740: LD_VAR 0 7
53744: ARRAY
53745: PUSH
53746: LD_VAR 0 10
53750: MUL
53751: PLUS
53752: PPUSH
53753: CALL_OW 1
53757: ST_TO_ADDR
53758: GO 53706
53760: POP
53761: POP
// end ;
53762: GO 52239
53764: POP
53765: POP
// result := Replace ( result , 4 , tmp ) ;
53766: LD_ADDR_VAR 0 5
53770: PUSH
53771: LD_VAR 0 5
53775: PPUSH
53776: LD_INT 4
53778: PPUSH
53779: LD_VAR 0 8
53783: PPUSH
53784: CALL_OW 1
53788: ST_TO_ADDR
// end ;
53789: LD_VAR 0 5
53793: RET
// export function DangerAtRange ( unit , range ) ; begin
53794: LD_INT 0
53796: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
53797: LD_ADDR_VAR 0 3
53801: PUSH
53802: LD_VAR 0 1
53806: PPUSH
53807: CALL_OW 255
53811: PPUSH
53812: LD_VAR 0 1
53816: PPUSH
53817: CALL_OW 250
53821: PPUSH
53822: LD_VAR 0 1
53826: PPUSH
53827: CALL_OW 251
53831: PPUSH
53832: LD_VAR 0 2
53836: PPUSH
53837: CALL 52091 0 4
53841: ST_TO_ADDR
// end ;
53842: LD_VAR 0 3
53846: RET
// export function DangerInArea ( side , area ) ; begin
53847: LD_INT 0
53849: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
53850: LD_ADDR_VAR 0 3
53854: PUSH
53855: LD_VAR 0 2
53859: PPUSH
53860: LD_INT 81
53862: PUSH
53863: LD_VAR 0 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PPUSH
53872: CALL_OW 70
53876: ST_TO_ADDR
// end ;
53877: LD_VAR 0 3
53881: RET
// export function IsExtension ( b ) ; begin
53882: LD_INT 0
53884: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
53885: LD_ADDR_VAR 0 2
53889: PUSH
53890: LD_VAR 0 1
53894: PUSH
53895: LD_INT 23
53897: PUSH
53898: LD_INT 20
53900: PUSH
53901: LD_INT 22
53903: PUSH
53904: LD_INT 17
53906: PUSH
53907: LD_INT 24
53909: PUSH
53910: LD_INT 21
53912: PUSH
53913: LD_INT 19
53915: PUSH
53916: LD_INT 16
53918: PUSH
53919: LD_INT 25
53921: PUSH
53922: LD_INT 18
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: IN
53937: ST_TO_ADDR
// end ;
53938: LD_VAR 0 2
53942: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
53943: LD_INT 0
53945: PPUSH
53946: PPUSH
53947: PPUSH
// result := [ ] ;
53948: LD_ADDR_VAR 0 4
53952: PUSH
53953: EMPTY
53954: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
53955: LD_ADDR_VAR 0 5
53959: PUSH
53960: LD_VAR 0 2
53964: PPUSH
53965: LD_INT 21
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PPUSH
53975: CALL_OW 70
53979: ST_TO_ADDR
// if not tmp then
53980: LD_VAR 0 5
53984: NOT
53985: IFFALSE 53989
// exit ;
53987: GO 54053
// if checkLink then
53989: LD_VAR 0 3
53993: IFFALSE 54043
// begin for i in tmp do
53995: LD_ADDR_VAR 0 6
53999: PUSH
54000: LD_VAR 0 5
54004: PUSH
54005: FOR_IN
54006: IFFALSE 54041
// if GetBase ( i ) <> base then
54008: LD_VAR 0 6
54012: PPUSH
54013: CALL_OW 274
54017: PUSH
54018: LD_VAR 0 1
54022: NONEQUAL
54023: IFFALSE 54039
// ComLinkToBase ( base , i ) ;
54025: LD_VAR 0 1
54029: PPUSH
54030: LD_VAR 0 6
54034: PPUSH
54035: CALL_OW 169
54039: GO 54005
54041: POP
54042: POP
// end ; result := tmp ;
54043: LD_ADDR_VAR 0 4
54047: PUSH
54048: LD_VAR 0 5
54052: ST_TO_ADDR
// end ;
54053: LD_VAR 0 4
54057: RET
// export function ComComplete ( units , b ) ; var i ; begin
54058: LD_INT 0
54060: PPUSH
54061: PPUSH
// if not units then
54062: LD_VAR 0 1
54066: NOT
54067: IFFALSE 54071
// exit ;
54069: GO 54161
// for i in units do
54071: LD_ADDR_VAR 0 4
54075: PUSH
54076: LD_VAR 0 1
54080: PUSH
54081: FOR_IN
54082: IFFALSE 54159
// if BuildingStatus ( b ) = bs_build then
54084: LD_VAR 0 2
54088: PPUSH
54089: CALL_OW 461
54093: PUSH
54094: LD_INT 1
54096: EQUAL
54097: IFFALSE 54157
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
54099: LD_VAR 0 4
54103: PPUSH
54104: LD_STRING h
54106: PUSH
54107: LD_VAR 0 2
54111: PPUSH
54112: CALL_OW 250
54116: PUSH
54117: LD_VAR 0 2
54121: PPUSH
54122: CALL_OW 251
54126: PUSH
54127: LD_VAR 0 2
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: PUSH
54150: EMPTY
54151: LIST
54152: PPUSH
54153: CALL_OW 446
54157: GO 54081
54159: POP
54160: POP
// end ;
54161: LD_VAR 0 3
54165: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
54166: LD_INT 0
54168: PPUSH
54169: PPUSH
54170: PPUSH
54171: PPUSH
54172: PPUSH
54173: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
54174: LD_VAR 0 1
54178: NOT
54179: PUSH
54180: LD_VAR 0 1
54184: PPUSH
54185: CALL_OW 263
54189: PUSH
54190: LD_INT 2
54192: NONEQUAL
54193: OR
54194: IFFALSE 54198
// exit ;
54196: GO 54514
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
54198: LD_ADDR_VAR 0 6
54202: PUSH
54203: LD_INT 22
54205: PUSH
54206: LD_VAR 0 1
54210: PPUSH
54211: CALL_OW 255
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: LD_INT 30
54225: PUSH
54226: LD_INT 36
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 34
54235: PUSH
54236: LD_INT 31
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: LIST
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PPUSH
54252: CALL_OW 69
54256: ST_TO_ADDR
// if not tmp then
54257: LD_VAR 0 6
54261: NOT
54262: IFFALSE 54266
// exit ;
54264: GO 54514
// result := [ ] ;
54266: LD_ADDR_VAR 0 2
54270: PUSH
54271: EMPTY
54272: ST_TO_ADDR
// for i in tmp do
54273: LD_ADDR_VAR 0 3
54277: PUSH
54278: LD_VAR 0 6
54282: PUSH
54283: FOR_IN
54284: IFFALSE 54355
// begin t := UnitsInside ( i ) ;
54286: LD_ADDR_VAR 0 4
54290: PUSH
54291: LD_VAR 0 3
54295: PPUSH
54296: CALL_OW 313
54300: ST_TO_ADDR
// if t then
54301: LD_VAR 0 4
54305: IFFALSE 54353
// for j in t do
54307: LD_ADDR_VAR 0 7
54311: PUSH
54312: LD_VAR 0 4
54316: PUSH
54317: FOR_IN
54318: IFFALSE 54351
// result := Replace ( result , result + 1 , j ) ;
54320: LD_ADDR_VAR 0 2
54324: PUSH
54325: LD_VAR 0 2
54329: PPUSH
54330: LD_VAR 0 2
54334: PUSH
54335: LD_INT 1
54337: PLUS
54338: PPUSH
54339: LD_VAR 0 7
54343: PPUSH
54344: CALL_OW 1
54348: ST_TO_ADDR
54349: GO 54317
54351: POP
54352: POP
// end ;
54353: GO 54283
54355: POP
54356: POP
// if not result then
54357: LD_VAR 0 2
54361: NOT
54362: IFFALSE 54366
// exit ;
54364: GO 54514
// mech := result [ 1 ] ;
54366: LD_ADDR_VAR 0 5
54370: PUSH
54371: LD_VAR 0 2
54375: PUSH
54376: LD_INT 1
54378: ARRAY
54379: ST_TO_ADDR
// if result > 1 then
54380: LD_VAR 0 2
54384: PUSH
54385: LD_INT 1
54387: GREATER
54388: IFFALSE 54500
// begin for i = 2 to result do
54390: LD_ADDR_VAR 0 3
54394: PUSH
54395: DOUBLE
54396: LD_INT 2
54398: DEC
54399: ST_TO_ADDR
54400: LD_VAR 0 2
54404: PUSH
54405: FOR_TO
54406: IFFALSE 54498
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
54408: LD_ADDR_VAR 0 4
54412: PUSH
54413: LD_VAR 0 2
54417: PUSH
54418: LD_VAR 0 3
54422: ARRAY
54423: PPUSH
54424: LD_INT 3
54426: PPUSH
54427: CALL_OW 259
54431: PUSH
54432: LD_VAR 0 2
54436: PUSH
54437: LD_VAR 0 3
54441: ARRAY
54442: PPUSH
54443: CALL_OW 432
54447: MINUS
54448: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
54449: LD_VAR 0 4
54453: PUSH
54454: LD_VAR 0 5
54458: PPUSH
54459: LD_INT 3
54461: PPUSH
54462: CALL_OW 259
54466: PUSH
54467: LD_VAR 0 5
54471: PPUSH
54472: CALL_OW 432
54476: MINUS
54477: GREATEREQUAL
54478: IFFALSE 54496
// mech := result [ i ] ;
54480: LD_ADDR_VAR 0 5
54484: PUSH
54485: LD_VAR 0 2
54489: PUSH
54490: LD_VAR 0 3
54494: ARRAY
54495: ST_TO_ADDR
// end ;
54496: GO 54405
54498: POP
54499: POP
// end ; ComLinkTo ( vehicle , mech ) ;
54500: LD_VAR 0 1
54504: PPUSH
54505: LD_VAR 0 5
54509: PPUSH
54510: CALL_OW 135
// end ;
54514: LD_VAR 0 2
54518: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
54519: LD_INT 0
54521: PPUSH
54522: PPUSH
54523: PPUSH
54524: PPUSH
54525: PPUSH
54526: PPUSH
54527: PPUSH
54528: PPUSH
54529: PPUSH
54530: PPUSH
54531: PPUSH
54532: PPUSH
54533: PPUSH
// result := [ ] ;
54534: LD_ADDR_VAR 0 7
54538: PUSH
54539: EMPTY
54540: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
54541: LD_VAR 0 1
54545: PPUSH
54546: CALL_OW 266
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: IN
54561: NOT
54562: IFFALSE 54566
// exit ;
54564: GO 56200
// if name then
54566: LD_VAR 0 3
54570: IFFALSE 54586
// SetBName ( base_dep , name ) ;
54572: LD_VAR 0 1
54576: PPUSH
54577: LD_VAR 0 3
54581: PPUSH
54582: CALL_OW 500
// base := GetBase ( base_dep ) ;
54586: LD_ADDR_VAR 0 15
54590: PUSH
54591: LD_VAR 0 1
54595: PPUSH
54596: CALL_OW 274
54600: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
54601: LD_ADDR_VAR 0 16
54605: PUSH
54606: LD_VAR 0 1
54610: PPUSH
54611: CALL_OW 255
54615: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
54616: LD_ADDR_VAR 0 17
54620: PUSH
54621: LD_VAR 0 1
54625: PPUSH
54626: CALL_OW 248
54630: ST_TO_ADDR
// if sources then
54631: LD_VAR 0 5
54635: IFFALSE 54682
// for i = 1 to 3 do
54637: LD_ADDR_VAR 0 8
54641: PUSH
54642: DOUBLE
54643: LD_INT 1
54645: DEC
54646: ST_TO_ADDR
54647: LD_INT 3
54649: PUSH
54650: FOR_TO
54651: IFFALSE 54680
// AddResourceType ( base , i , sources [ i ] ) ;
54653: LD_VAR 0 15
54657: PPUSH
54658: LD_VAR 0 8
54662: PPUSH
54663: LD_VAR 0 5
54667: PUSH
54668: LD_VAR 0 8
54672: ARRAY
54673: PPUSH
54674: CALL_OW 276
54678: GO 54650
54680: POP
54681: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
54682: LD_ADDR_VAR 0 18
54686: PUSH
54687: LD_VAR 0 15
54691: PPUSH
54692: LD_VAR 0 2
54696: PPUSH
54697: LD_INT 1
54699: PPUSH
54700: CALL 53943 0 3
54704: ST_TO_ADDR
// InitHc ;
54705: CALL_OW 19
// InitUc ;
54709: CALL_OW 18
// uc_side := side ;
54713: LD_ADDR_OWVAR 20
54717: PUSH
54718: LD_VAR 0 16
54722: ST_TO_ADDR
// uc_nation := nation ;
54723: LD_ADDR_OWVAR 21
54727: PUSH
54728: LD_VAR 0 17
54732: ST_TO_ADDR
// if buildings then
54733: LD_VAR 0 18
54737: IFFALSE 56059
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
54739: LD_ADDR_VAR 0 19
54743: PUSH
54744: LD_VAR 0 18
54748: PPUSH
54749: LD_INT 2
54751: PUSH
54752: LD_INT 30
54754: PUSH
54755: LD_INT 29
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 30
54764: PUSH
54765: LD_INT 30
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: LIST
54776: PPUSH
54777: CALL_OW 72
54781: ST_TO_ADDR
// if tmp then
54782: LD_VAR 0 19
54786: IFFALSE 54834
// for i in tmp do
54788: LD_ADDR_VAR 0 8
54792: PUSH
54793: LD_VAR 0 19
54797: PUSH
54798: FOR_IN
54799: IFFALSE 54832
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
54801: LD_VAR 0 8
54805: PPUSH
54806: CALL_OW 250
54810: PPUSH
54811: LD_VAR 0 8
54815: PPUSH
54816: CALL_OW 251
54820: PPUSH
54821: LD_VAR 0 16
54825: PPUSH
54826: CALL_OW 441
54830: GO 54798
54832: POP
54833: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
54834: LD_VAR 0 18
54838: PPUSH
54839: LD_INT 2
54841: PUSH
54842: LD_INT 30
54844: PUSH
54845: LD_INT 32
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 30
54854: PUSH
54855: LD_INT 33
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: LIST
54866: PPUSH
54867: CALL_OW 72
54871: IFFALSE 54959
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
54873: LD_ADDR_VAR 0 8
54877: PUSH
54878: LD_VAR 0 18
54882: PPUSH
54883: LD_INT 2
54885: PUSH
54886: LD_INT 30
54888: PUSH
54889: LD_INT 32
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 30
54898: PUSH
54899: LD_INT 33
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: PPUSH
54911: CALL_OW 72
54915: PUSH
54916: FOR_IN
54917: IFFALSE 54957
// begin if not GetBWeapon ( i ) then
54919: LD_VAR 0 8
54923: PPUSH
54924: CALL_OW 269
54928: NOT
54929: IFFALSE 54955
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
54931: LD_VAR 0 8
54935: PPUSH
54936: LD_VAR 0 8
54940: PPUSH
54941: LD_VAR 0 2
54945: PPUSH
54946: CALL 56205 0 2
54950: PPUSH
54951: CALL_OW 431
// end ;
54955: GO 54916
54957: POP
54958: POP
// end ; for i = 1 to personel do
54959: LD_ADDR_VAR 0 8
54963: PUSH
54964: DOUBLE
54965: LD_INT 1
54967: DEC
54968: ST_TO_ADDR
54969: LD_VAR 0 6
54973: PUSH
54974: FOR_TO
54975: IFFALSE 56039
// begin if i > 4 then
54977: LD_VAR 0 8
54981: PUSH
54982: LD_INT 4
54984: GREATER
54985: IFFALSE 54989
// break ;
54987: GO 56039
// case i of 1 :
54989: LD_VAR 0 8
54993: PUSH
54994: LD_INT 1
54996: DOUBLE
54997: EQUAL
54998: IFTRUE 55002
55000: GO 55082
55002: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
55003: LD_ADDR_VAR 0 12
55007: PUSH
55008: LD_VAR 0 18
55012: PPUSH
55013: LD_INT 22
55015: PUSH
55016: LD_VAR 0 16
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 58
55027: PUSH
55028: EMPTY
55029: LIST
55030: PUSH
55031: LD_INT 2
55033: PUSH
55034: LD_INT 30
55036: PUSH
55037: LD_INT 32
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 30
55046: PUSH
55047: LD_INT 4
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 30
55056: PUSH
55057: LD_INT 5
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: LIST
55074: PPUSH
55075: CALL_OW 72
55079: ST_TO_ADDR
55080: GO 55304
55082: LD_INT 2
55084: DOUBLE
55085: EQUAL
55086: IFTRUE 55090
55088: GO 55152
55090: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
55091: LD_ADDR_VAR 0 12
55095: PUSH
55096: LD_VAR 0 18
55100: PPUSH
55101: LD_INT 22
55103: PUSH
55104: LD_VAR 0 16
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: LD_INT 30
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 30
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: LIST
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PPUSH
55145: CALL_OW 72
55149: ST_TO_ADDR
55150: GO 55304
55152: LD_INT 3
55154: DOUBLE
55155: EQUAL
55156: IFTRUE 55160
55158: GO 55222
55160: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
55161: LD_ADDR_VAR 0 12
55165: PUSH
55166: LD_VAR 0 18
55170: PPUSH
55171: LD_INT 22
55173: PUSH
55174: LD_VAR 0 16
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: LD_INT 30
55188: PUSH
55189: LD_INT 2
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 30
55198: PUSH
55199: LD_INT 3
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: LIST
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PPUSH
55215: CALL_OW 72
55219: ST_TO_ADDR
55220: GO 55304
55222: LD_INT 4
55224: DOUBLE
55225: EQUAL
55226: IFTRUE 55230
55228: GO 55303
55230: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
55231: LD_ADDR_VAR 0 12
55235: PUSH
55236: LD_VAR 0 18
55240: PPUSH
55241: LD_INT 22
55243: PUSH
55244: LD_VAR 0 16
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 30
55258: PUSH
55259: LD_INT 6
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 30
55268: PUSH
55269: LD_INT 7
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 30
55278: PUSH
55279: LD_INT 8
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PPUSH
55296: CALL_OW 72
55300: ST_TO_ADDR
55301: GO 55304
55303: POP
// if i = 1 then
55304: LD_VAR 0 8
55308: PUSH
55309: LD_INT 1
55311: EQUAL
55312: IFFALSE 55423
// begin tmp := [ ] ;
55314: LD_ADDR_VAR 0 19
55318: PUSH
55319: EMPTY
55320: ST_TO_ADDR
// for j in f do
55321: LD_ADDR_VAR 0 9
55325: PUSH
55326: LD_VAR 0 12
55330: PUSH
55331: FOR_IN
55332: IFFALSE 55405
// if GetBType ( j ) = b_bunker then
55334: LD_VAR 0 9
55338: PPUSH
55339: CALL_OW 266
55343: PUSH
55344: LD_INT 32
55346: EQUAL
55347: IFFALSE 55374
// tmp := Insert ( tmp , 1 , j ) else
55349: LD_ADDR_VAR 0 19
55353: PUSH
55354: LD_VAR 0 19
55358: PPUSH
55359: LD_INT 1
55361: PPUSH
55362: LD_VAR 0 9
55366: PPUSH
55367: CALL_OW 2
55371: ST_TO_ADDR
55372: GO 55403
// tmp := Insert ( tmp , tmp + 1 , j ) ;
55374: LD_ADDR_VAR 0 19
55378: PUSH
55379: LD_VAR 0 19
55383: PPUSH
55384: LD_VAR 0 19
55388: PUSH
55389: LD_INT 1
55391: PLUS
55392: PPUSH
55393: LD_VAR 0 9
55397: PPUSH
55398: CALL_OW 2
55402: ST_TO_ADDR
55403: GO 55331
55405: POP
55406: POP
// if tmp then
55407: LD_VAR 0 19
55411: IFFALSE 55423
// f := tmp ;
55413: LD_ADDR_VAR 0 12
55417: PUSH
55418: LD_VAR 0 19
55422: ST_TO_ADDR
// end ; x := personel [ i ] ;
55423: LD_ADDR_VAR 0 13
55427: PUSH
55428: LD_VAR 0 6
55432: PUSH
55433: LD_VAR 0 8
55437: ARRAY
55438: ST_TO_ADDR
// if x = - 1 then
55439: LD_VAR 0 13
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: EQUAL
55448: IFFALSE 55657
// begin for j in f do
55450: LD_ADDR_VAR 0 9
55454: PUSH
55455: LD_VAR 0 12
55459: PUSH
55460: FOR_IN
55461: IFFALSE 55653
// repeat InitHc ;
55463: CALL_OW 19
// if GetBType ( j ) = b_barracks then
55467: LD_VAR 0 9
55471: PPUSH
55472: CALL_OW 266
55476: PUSH
55477: LD_INT 5
55479: EQUAL
55480: IFFALSE 55550
// begin if UnitsInside ( j ) < 3 then
55482: LD_VAR 0 9
55486: PPUSH
55487: CALL_OW 313
55491: PUSH
55492: LD_INT 3
55494: LESS
55495: IFFALSE 55531
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55497: LD_INT 0
55499: PPUSH
55500: LD_INT 5
55502: PUSH
55503: LD_INT 8
55505: PUSH
55506: LD_INT 9
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: LIST
55513: PUSH
55514: LD_VAR 0 17
55518: ARRAY
55519: PPUSH
55520: LD_VAR 0 4
55524: PPUSH
55525: CALL_OW 380
55529: GO 55548
// PrepareHuman ( false , i , skill ) ;
55531: LD_INT 0
55533: PPUSH
55534: LD_VAR 0 8
55538: PPUSH
55539: LD_VAR 0 4
55543: PPUSH
55544: CALL_OW 380
// end else
55548: GO 55567
// PrepareHuman ( false , i , skill ) ;
55550: LD_INT 0
55552: PPUSH
55553: LD_VAR 0 8
55557: PPUSH
55558: LD_VAR 0 4
55562: PPUSH
55563: CALL_OW 380
// un := CreateHuman ;
55567: LD_ADDR_VAR 0 14
55571: PUSH
55572: CALL_OW 44
55576: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55577: LD_ADDR_VAR 0 7
55581: PUSH
55582: LD_VAR 0 7
55586: PPUSH
55587: LD_INT 1
55589: PPUSH
55590: LD_VAR 0 14
55594: PPUSH
55595: CALL_OW 2
55599: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
55600: LD_VAR 0 14
55604: PPUSH
55605: LD_VAR 0 9
55609: PPUSH
55610: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
55614: LD_VAR 0 9
55618: PPUSH
55619: CALL_OW 313
55623: PUSH
55624: LD_INT 6
55626: EQUAL
55627: PUSH
55628: LD_VAR 0 9
55632: PPUSH
55633: CALL_OW 266
55637: PUSH
55638: LD_INT 32
55640: PUSH
55641: LD_INT 31
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: IN
55648: OR
55649: IFFALSE 55463
55651: GO 55460
55653: POP
55654: POP
// end else
55655: GO 56037
// for j = 1 to x do
55657: LD_ADDR_VAR 0 9
55661: PUSH
55662: DOUBLE
55663: LD_INT 1
55665: DEC
55666: ST_TO_ADDR
55667: LD_VAR 0 13
55671: PUSH
55672: FOR_TO
55673: IFFALSE 56035
// begin InitHc ;
55675: CALL_OW 19
// if not f then
55679: LD_VAR 0 12
55683: NOT
55684: IFFALSE 55773
// begin PrepareHuman ( false , i , skill ) ;
55686: LD_INT 0
55688: PPUSH
55689: LD_VAR 0 8
55693: PPUSH
55694: LD_VAR 0 4
55698: PPUSH
55699: CALL_OW 380
// un := CreateHuman ;
55703: LD_ADDR_VAR 0 14
55707: PUSH
55708: CALL_OW 44
55712: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55713: LD_ADDR_VAR 0 7
55717: PUSH
55718: LD_VAR 0 7
55722: PPUSH
55723: LD_INT 1
55725: PPUSH
55726: LD_VAR 0 14
55730: PPUSH
55731: CALL_OW 2
55735: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55736: LD_VAR 0 14
55740: PPUSH
55741: LD_VAR 0 1
55745: PPUSH
55746: CALL_OW 250
55750: PPUSH
55751: LD_VAR 0 1
55755: PPUSH
55756: CALL_OW 251
55760: PPUSH
55761: LD_INT 10
55763: PPUSH
55764: LD_INT 0
55766: PPUSH
55767: CALL_OW 50
// continue ;
55771: GO 55672
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
55773: LD_VAR 0 12
55777: PUSH
55778: LD_INT 1
55780: ARRAY
55781: PPUSH
55782: CALL_OW 313
55786: PUSH
55787: LD_VAR 0 12
55791: PUSH
55792: LD_INT 1
55794: ARRAY
55795: PPUSH
55796: CALL_OW 266
55800: PUSH
55801: LD_INT 32
55803: PUSH
55804: LD_INT 31
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: IN
55811: AND
55812: PUSH
55813: LD_VAR 0 12
55817: PUSH
55818: LD_INT 1
55820: ARRAY
55821: PPUSH
55822: CALL_OW 313
55826: PUSH
55827: LD_INT 6
55829: EQUAL
55830: OR
55831: IFFALSE 55851
// f := Delete ( f , 1 ) ;
55833: LD_ADDR_VAR 0 12
55837: PUSH
55838: LD_VAR 0 12
55842: PPUSH
55843: LD_INT 1
55845: PPUSH
55846: CALL_OW 3
55850: ST_TO_ADDR
// if not f then
55851: LD_VAR 0 12
55855: NOT
55856: IFFALSE 55874
// begin x := x + 2 ;
55858: LD_ADDR_VAR 0 13
55862: PUSH
55863: LD_VAR 0 13
55867: PUSH
55868: LD_INT 2
55870: PLUS
55871: ST_TO_ADDR
// continue ;
55872: GO 55672
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
55874: LD_VAR 0 12
55878: PUSH
55879: LD_INT 1
55881: ARRAY
55882: PPUSH
55883: CALL_OW 266
55887: PUSH
55888: LD_INT 5
55890: EQUAL
55891: IFFALSE 55965
// begin if UnitsInside ( f [ 1 ] ) < 3 then
55893: LD_VAR 0 12
55897: PUSH
55898: LD_INT 1
55900: ARRAY
55901: PPUSH
55902: CALL_OW 313
55906: PUSH
55907: LD_INT 3
55909: LESS
55910: IFFALSE 55946
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55912: LD_INT 0
55914: PPUSH
55915: LD_INT 5
55917: PUSH
55918: LD_INT 8
55920: PUSH
55921: LD_INT 9
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: LIST
55928: PUSH
55929: LD_VAR 0 17
55933: ARRAY
55934: PPUSH
55935: LD_VAR 0 4
55939: PPUSH
55940: CALL_OW 380
55944: GO 55963
// PrepareHuman ( false , i , skill ) ;
55946: LD_INT 0
55948: PPUSH
55949: LD_VAR 0 8
55953: PPUSH
55954: LD_VAR 0 4
55958: PPUSH
55959: CALL_OW 380
// end else
55963: GO 55982
// PrepareHuman ( false , i , skill ) ;
55965: LD_INT 0
55967: PPUSH
55968: LD_VAR 0 8
55972: PPUSH
55973: LD_VAR 0 4
55977: PPUSH
55978: CALL_OW 380
// un := CreateHuman ;
55982: LD_ADDR_VAR 0 14
55986: PUSH
55987: CALL_OW 44
55991: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55992: LD_ADDR_VAR 0 7
55996: PUSH
55997: LD_VAR 0 7
56001: PPUSH
56002: LD_INT 1
56004: PPUSH
56005: LD_VAR 0 14
56009: PPUSH
56010: CALL_OW 2
56014: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
56015: LD_VAR 0 14
56019: PPUSH
56020: LD_VAR 0 12
56024: PUSH
56025: LD_INT 1
56027: ARRAY
56028: PPUSH
56029: CALL_OW 52
// end ;
56033: GO 55672
56035: POP
56036: POP
// end ;
56037: GO 54974
56039: POP
56040: POP
// result := result ^ buildings ;
56041: LD_ADDR_VAR 0 7
56045: PUSH
56046: LD_VAR 0 7
56050: PUSH
56051: LD_VAR 0 18
56055: ADD
56056: ST_TO_ADDR
// end else
56057: GO 56200
// begin for i = 1 to personel do
56059: LD_ADDR_VAR 0 8
56063: PUSH
56064: DOUBLE
56065: LD_INT 1
56067: DEC
56068: ST_TO_ADDR
56069: LD_VAR 0 6
56073: PUSH
56074: FOR_TO
56075: IFFALSE 56198
// begin if i > 4 then
56077: LD_VAR 0 8
56081: PUSH
56082: LD_INT 4
56084: GREATER
56085: IFFALSE 56089
// break ;
56087: GO 56198
// x := personel [ i ] ;
56089: LD_ADDR_VAR 0 13
56093: PUSH
56094: LD_VAR 0 6
56098: PUSH
56099: LD_VAR 0 8
56103: ARRAY
56104: ST_TO_ADDR
// if x = - 1 then
56105: LD_VAR 0 13
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: EQUAL
56114: IFFALSE 56118
// continue ;
56116: GO 56074
// PrepareHuman ( false , i , skill ) ;
56118: LD_INT 0
56120: PPUSH
56121: LD_VAR 0 8
56125: PPUSH
56126: LD_VAR 0 4
56130: PPUSH
56131: CALL_OW 380
// un := CreateHuman ;
56135: LD_ADDR_VAR 0 14
56139: PUSH
56140: CALL_OW 44
56144: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56145: LD_VAR 0 14
56149: PPUSH
56150: LD_VAR 0 1
56154: PPUSH
56155: CALL_OW 250
56159: PPUSH
56160: LD_VAR 0 1
56164: PPUSH
56165: CALL_OW 251
56169: PPUSH
56170: LD_INT 10
56172: PPUSH
56173: LD_INT 0
56175: PPUSH
56176: CALL_OW 50
// result := result ^ un ;
56180: LD_ADDR_VAR 0 7
56184: PUSH
56185: LD_VAR 0 7
56189: PUSH
56190: LD_VAR 0 14
56194: ADD
56195: ST_TO_ADDR
// end ;
56196: GO 56074
56198: POP
56199: POP
// end ; end ;
56200: LD_VAR 0 7
56204: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
56205: LD_INT 0
56207: PPUSH
56208: PPUSH
56209: PPUSH
56210: PPUSH
56211: PPUSH
56212: PPUSH
56213: PPUSH
56214: PPUSH
56215: PPUSH
56216: PPUSH
56217: PPUSH
56218: PPUSH
56219: PPUSH
56220: PPUSH
56221: PPUSH
56222: PPUSH
// result := false ;
56223: LD_ADDR_VAR 0 3
56227: PUSH
56228: LD_INT 0
56230: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
56231: LD_VAR 0 1
56235: NOT
56236: PUSH
56237: LD_VAR 0 1
56241: PPUSH
56242: CALL_OW 266
56246: PUSH
56247: LD_INT 32
56249: PUSH
56250: LD_INT 33
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: IN
56257: NOT
56258: OR
56259: IFFALSE 56263
// exit ;
56261: GO 57372
// nat := GetNation ( tower ) ;
56263: LD_ADDR_VAR 0 12
56267: PUSH
56268: LD_VAR 0 1
56272: PPUSH
56273: CALL_OW 248
56277: ST_TO_ADDR
// side := GetSide ( tower ) ;
56278: LD_ADDR_VAR 0 16
56282: PUSH
56283: LD_VAR 0 1
56287: PPUSH
56288: CALL_OW 255
56292: ST_TO_ADDR
// x := GetX ( tower ) ;
56293: LD_ADDR_VAR 0 10
56297: PUSH
56298: LD_VAR 0 1
56302: PPUSH
56303: CALL_OW 250
56307: ST_TO_ADDR
// y := GetY ( tower ) ;
56308: LD_ADDR_VAR 0 11
56312: PUSH
56313: LD_VAR 0 1
56317: PPUSH
56318: CALL_OW 251
56322: ST_TO_ADDR
// if not x or not y then
56323: LD_VAR 0 10
56327: NOT
56328: PUSH
56329: LD_VAR 0 11
56333: NOT
56334: OR
56335: IFFALSE 56339
// exit ;
56337: GO 57372
// weapon := 0 ;
56339: LD_ADDR_VAR 0 18
56343: PUSH
56344: LD_INT 0
56346: ST_TO_ADDR
// fac_list := [ ] ;
56347: LD_ADDR_VAR 0 17
56351: PUSH
56352: EMPTY
56353: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
56354: LD_ADDR_VAR 0 6
56358: PUSH
56359: LD_VAR 0 1
56363: PPUSH
56364: CALL_OW 274
56368: PPUSH
56369: LD_VAR 0 2
56373: PPUSH
56374: LD_INT 0
56376: PPUSH
56377: CALL 53943 0 3
56381: PPUSH
56382: LD_INT 30
56384: PUSH
56385: LD_INT 3
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PPUSH
56392: CALL_OW 72
56396: ST_TO_ADDR
// if not factories then
56397: LD_VAR 0 6
56401: NOT
56402: IFFALSE 56406
// exit ;
56404: GO 57372
// for i in factories do
56406: LD_ADDR_VAR 0 8
56410: PUSH
56411: LD_VAR 0 6
56415: PUSH
56416: FOR_IN
56417: IFFALSE 56442
// fac_list := fac_list union AvailableWeaponList ( i ) ;
56419: LD_ADDR_VAR 0 17
56423: PUSH
56424: LD_VAR 0 17
56428: PUSH
56429: LD_VAR 0 8
56433: PPUSH
56434: CALL_OW 478
56438: UNION
56439: ST_TO_ADDR
56440: GO 56416
56442: POP
56443: POP
// if not fac_list then
56444: LD_VAR 0 17
56448: NOT
56449: IFFALSE 56453
// exit ;
56451: GO 57372
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
56453: LD_ADDR_VAR 0 5
56457: PUSH
56458: LD_INT 4
56460: PUSH
56461: LD_INT 5
56463: PUSH
56464: LD_INT 9
56466: PUSH
56467: LD_INT 10
56469: PUSH
56470: LD_INT 6
56472: PUSH
56473: LD_INT 7
56475: PUSH
56476: LD_INT 11
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 27
56490: PUSH
56491: LD_INT 28
56493: PUSH
56494: LD_INT 26
56496: PUSH
56497: LD_INT 30
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 43
56508: PUSH
56509: LD_INT 44
56511: PUSH
56512: LD_INT 46
56514: PUSH
56515: LD_INT 45
56517: PUSH
56518: LD_INT 47
56520: PUSH
56521: LD_INT 49
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: PUSH
56537: LD_VAR 0 12
56541: ARRAY
56542: ST_TO_ADDR
// list := list isect fac_list ;
56543: LD_ADDR_VAR 0 5
56547: PUSH
56548: LD_VAR 0 5
56552: PUSH
56553: LD_VAR 0 17
56557: ISECT
56558: ST_TO_ADDR
// if not list then
56559: LD_VAR 0 5
56563: NOT
56564: IFFALSE 56568
// exit ;
56566: GO 57372
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
56568: LD_VAR 0 12
56572: PUSH
56573: LD_INT 3
56575: EQUAL
56576: PUSH
56577: LD_INT 49
56579: PUSH
56580: LD_VAR 0 5
56584: IN
56585: AND
56586: PUSH
56587: LD_INT 31
56589: PPUSH
56590: LD_VAR 0 16
56594: PPUSH
56595: CALL_OW 321
56599: PUSH
56600: LD_INT 2
56602: EQUAL
56603: AND
56604: IFFALSE 56664
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
56606: LD_INT 22
56608: PUSH
56609: LD_VAR 0 16
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 35
56620: PUSH
56621: LD_INT 49
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 91
56630: PUSH
56631: LD_VAR 0 1
56635: PUSH
56636: LD_INT 10
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: LIST
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: LIST
56648: PPUSH
56649: CALL_OW 69
56653: NOT
56654: IFFALSE 56664
// weapon := ru_time_lapser ;
56656: LD_ADDR_VAR 0 18
56660: PUSH
56661: LD_INT 49
56663: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
56664: LD_VAR 0 12
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: IN
56679: PUSH
56680: LD_INT 11
56682: PUSH
56683: LD_VAR 0 5
56687: IN
56688: PUSH
56689: LD_INT 30
56691: PUSH
56692: LD_VAR 0 5
56696: IN
56697: OR
56698: AND
56699: PUSH
56700: LD_INT 6
56702: PPUSH
56703: LD_VAR 0 16
56707: PPUSH
56708: CALL_OW 321
56712: PUSH
56713: LD_INT 2
56715: EQUAL
56716: AND
56717: IFFALSE 56882
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
56719: LD_INT 22
56721: PUSH
56722: LD_VAR 0 16
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: LD_INT 35
56736: PUSH
56737: LD_INT 11
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 35
56746: PUSH
56747: LD_INT 30
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 91
56761: PUSH
56762: LD_VAR 0 1
56766: PUSH
56767: LD_INT 18
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: LIST
56779: PPUSH
56780: CALL_OW 69
56784: NOT
56785: PUSH
56786: LD_INT 22
56788: PUSH
56789: LD_VAR 0 16
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: LD_INT 30
56803: PUSH
56804: LD_INT 32
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 30
56813: PUSH
56814: LD_INT 33
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 91
56828: PUSH
56829: LD_VAR 0 1
56833: PUSH
56834: LD_INT 12
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: LIST
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: PUSH
56847: EMPTY
56848: LIST
56849: PPUSH
56850: CALL_OW 69
56854: PUSH
56855: LD_INT 2
56857: GREATER
56858: AND
56859: IFFALSE 56882
// weapon := [ us_radar , ar_radar ] [ nat ] ;
56861: LD_ADDR_VAR 0 18
56865: PUSH
56866: LD_INT 11
56868: PUSH
56869: LD_INT 30
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_VAR 0 12
56880: ARRAY
56881: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
56882: LD_VAR 0 18
56886: NOT
56887: PUSH
56888: LD_INT 40
56890: PPUSH
56891: LD_VAR 0 16
56895: PPUSH
56896: CALL_OW 321
56900: PUSH
56901: LD_INT 2
56903: EQUAL
56904: AND
56905: PUSH
56906: LD_INT 7
56908: PUSH
56909: LD_VAR 0 5
56913: IN
56914: PUSH
56915: LD_INT 28
56917: PUSH
56918: LD_VAR 0 5
56922: IN
56923: OR
56924: PUSH
56925: LD_INT 45
56927: PUSH
56928: LD_VAR 0 5
56932: IN
56933: OR
56934: AND
56935: IFFALSE 57189
// begin hex := GetHexInfo ( x , y ) ;
56937: LD_ADDR_VAR 0 4
56941: PUSH
56942: LD_VAR 0 10
56946: PPUSH
56947: LD_VAR 0 11
56951: PPUSH
56952: CALL_OW 546
56956: ST_TO_ADDR
// if hex [ 1 ] then
56957: LD_VAR 0 4
56961: PUSH
56962: LD_INT 1
56964: ARRAY
56965: IFFALSE 56969
// exit ;
56967: GO 57372
// height := hex [ 2 ] ;
56969: LD_ADDR_VAR 0 15
56973: PUSH
56974: LD_VAR 0 4
56978: PUSH
56979: LD_INT 2
56981: ARRAY
56982: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
56983: LD_ADDR_VAR 0 14
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: LD_INT 3
56996: PUSH
56997: LD_INT 5
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: ST_TO_ADDR
// for i in tmp do
57006: LD_ADDR_VAR 0 8
57010: PUSH
57011: LD_VAR 0 14
57015: PUSH
57016: FOR_IN
57017: IFFALSE 57187
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
57019: LD_ADDR_VAR 0 9
57023: PUSH
57024: LD_VAR 0 10
57028: PPUSH
57029: LD_VAR 0 8
57033: PPUSH
57034: LD_INT 5
57036: PPUSH
57037: CALL_OW 272
57041: PUSH
57042: LD_VAR 0 11
57046: PPUSH
57047: LD_VAR 0 8
57051: PPUSH
57052: LD_INT 5
57054: PPUSH
57055: CALL_OW 273
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57064: LD_VAR 0 9
57068: PUSH
57069: LD_INT 1
57071: ARRAY
57072: PPUSH
57073: LD_VAR 0 9
57077: PUSH
57078: LD_INT 2
57080: ARRAY
57081: PPUSH
57082: CALL_OW 488
57086: IFFALSE 57185
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
57088: LD_ADDR_VAR 0 4
57092: PUSH
57093: LD_VAR 0 9
57097: PUSH
57098: LD_INT 1
57100: ARRAY
57101: PPUSH
57102: LD_VAR 0 9
57106: PUSH
57107: LD_INT 2
57109: ARRAY
57110: PPUSH
57111: CALL_OW 546
57115: ST_TO_ADDR
// if hex [ 1 ] then
57116: LD_VAR 0 4
57120: PUSH
57121: LD_INT 1
57123: ARRAY
57124: IFFALSE 57128
// continue ;
57126: GO 57016
// h := hex [ 2 ] ;
57128: LD_ADDR_VAR 0 13
57132: PUSH
57133: LD_VAR 0 4
57137: PUSH
57138: LD_INT 2
57140: ARRAY
57141: ST_TO_ADDR
// if h + 7 < height then
57142: LD_VAR 0 13
57146: PUSH
57147: LD_INT 7
57149: PLUS
57150: PUSH
57151: LD_VAR 0 15
57155: LESS
57156: IFFALSE 57185
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
57158: LD_ADDR_VAR 0 18
57162: PUSH
57163: LD_INT 7
57165: PUSH
57166: LD_INT 28
57168: PUSH
57169: LD_INT 45
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: LIST
57176: PUSH
57177: LD_VAR 0 12
57181: ARRAY
57182: ST_TO_ADDR
// break ;
57183: GO 57187
// end ; end ; end ;
57185: GO 57016
57187: POP
57188: POP
// end ; if not weapon then
57189: LD_VAR 0 18
57193: NOT
57194: IFFALSE 57254
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
57196: LD_ADDR_VAR 0 5
57200: PUSH
57201: LD_VAR 0 5
57205: PUSH
57206: LD_INT 11
57208: PUSH
57209: LD_INT 30
57211: PUSH
57212: LD_INT 49
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: LIST
57219: DIFF
57220: ST_TO_ADDR
// if not list then
57221: LD_VAR 0 5
57225: NOT
57226: IFFALSE 57230
// exit ;
57228: GO 57372
// weapon := list [ rand ( 1 , list ) ] ;
57230: LD_ADDR_VAR 0 18
57234: PUSH
57235: LD_VAR 0 5
57239: PUSH
57240: LD_INT 1
57242: PPUSH
57243: LD_VAR 0 5
57247: PPUSH
57248: CALL_OW 12
57252: ARRAY
57253: ST_TO_ADDR
// end ; if weapon then
57254: LD_VAR 0 18
57258: IFFALSE 57372
// begin tmp := CostOfWeapon ( weapon ) ;
57260: LD_ADDR_VAR 0 14
57264: PUSH
57265: LD_VAR 0 18
57269: PPUSH
57270: CALL_OW 451
57274: ST_TO_ADDR
// j := GetBase ( tower ) ;
57275: LD_ADDR_VAR 0 9
57279: PUSH
57280: LD_VAR 0 1
57284: PPUSH
57285: CALL_OW 274
57289: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
57290: LD_VAR 0 9
57294: PPUSH
57295: LD_INT 1
57297: PPUSH
57298: CALL_OW 275
57302: PUSH
57303: LD_VAR 0 14
57307: PUSH
57308: LD_INT 1
57310: ARRAY
57311: GREATEREQUAL
57312: PUSH
57313: LD_VAR 0 9
57317: PPUSH
57318: LD_INT 2
57320: PPUSH
57321: CALL_OW 275
57325: PUSH
57326: LD_VAR 0 14
57330: PUSH
57331: LD_INT 2
57333: ARRAY
57334: GREATEREQUAL
57335: AND
57336: PUSH
57337: LD_VAR 0 9
57341: PPUSH
57342: LD_INT 3
57344: PPUSH
57345: CALL_OW 275
57349: PUSH
57350: LD_VAR 0 14
57354: PUSH
57355: LD_INT 3
57357: ARRAY
57358: GREATEREQUAL
57359: AND
57360: IFFALSE 57372
// result := weapon ;
57362: LD_ADDR_VAR 0 3
57366: PUSH
57367: LD_VAR 0 18
57371: ST_TO_ADDR
// end ; end ;
57372: LD_VAR 0 3
57376: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
57377: LD_INT 0
57379: PPUSH
57380: PPUSH
// result := true ;
57381: LD_ADDR_VAR 0 3
57385: PUSH
57386: LD_INT 1
57388: ST_TO_ADDR
// if array1 = array2 then
57389: LD_VAR 0 1
57393: PUSH
57394: LD_VAR 0 2
57398: EQUAL
57399: IFFALSE 57459
// begin for i = 1 to array1 do
57401: LD_ADDR_VAR 0 4
57405: PUSH
57406: DOUBLE
57407: LD_INT 1
57409: DEC
57410: ST_TO_ADDR
57411: LD_VAR 0 1
57415: PUSH
57416: FOR_TO
57417: IFFALSE 57455
// if array1 [ i ] <> array2 [ i ] then
57419: LD_VAR 0 1
57423: PUSH
57424: LD_VAR 0 4
57428: ARRAY
57429: PUSH
57430: LD_VAR 0 2
57434: PUSH
57435: LD_VAR 0 4
57439: ARRAY
57440: NONEQUAL
57441: IFFALSE 57453
// begin result := false ;
57443: LD_ADDR_VAR 0 3
57447: PUSH
57448: LD_INT 0
57450: ST_TO_ADDR
// break ;
57451: GO 57455
// end ;
57453: GO 57416
57455: POP
57456: POP
// end else
57457: GO 57467
// result := false ;
57459: LD_ADDR_VAR 0 3
57463: PUSH
57464: LD_INT 0
57466: ST_TO_ADDR
// end ;
57467: LD_VAR 0 3
57471: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
57472: LD_INT 0
57474: PPUSH
57475: PPUSH
// if not array1 or not array2 then
57476: LD_VAR 0 1
57480: NOT
57481: PUSH
57482: LD_VAR 0 2
57486: NOT
57487: OR
57488: IFFALSE 57492
// exit ;
57490: GO 57556
// result := true ;
57492: LD_ADDR_VAR 0 3
57496: PUSH
57497: LD_INT 1
57499: ST_TO_ADDR
// for i = 1 to array1 do
57500: LD_ADDR_VAR 0 4
57504: PUSH
57505: DOUBLE
57506: LD_INT 1
57508: DEC
57509: ST_TO_ADDR
57510: LD_VAR 0 1
57514: PUSH
57515: FOR_TO
57516: IFFALSE 57554
// if array1 [ i ] <> array2 [ i ] then
57518: LD_VAR 0 1
57522: PUSH
57523: LD_VAR 0 4
57527: ARRAY
57528: PUSH
57529: LD_VAR 0 2
57533: PUSH
57534: LD_VAR 0 4
57538: ARRAY
57539: NONEQUAL
57540: IFFALSE 57552
// begin result := false ;
57542: LD_ADDR_VAR 0 3
57546: PUSH
57547: LD_INT 0
57549: ST_TO_ADDR
// break ;
57550: GO 57554
// end ;
57552: GO 57515
57554: POP
57555: POP
// end ;
57556: LD_VAR 0 3
57560: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
57561: LD_INT 0
57563: PPUSH
57564: PPUSH
57565: PPUSH
// pom := GetBase ( fac ) ;
57566: LD_ADDR_VAR 0 5
57570: PUSH
57571: LD_VAR 0 1
57575: PPUSH
57576: CALL_OW 274
57580: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
57581: LD_ADDR_VAR 0 4
57585: PUSH
57586: LD_VAR 0 2
57590: PUSH
57591: LD_INT 1
57593: ARRAY
57594: PPUSH
57595: LD_VAR 0 2
57599: PUSH
57600: LD_INT 2
57602: ARRAY
57603: PPUSH
57604: LD_VAR 0 2
57608: PUSH
57609: LD_INT 3
57611: ARRAY
57612: PPUSH
57613: LD_VAR 0 2
57617: PUSH
57618: LD_INT 4
57620: ARRAY
57621: PPUSH
57622: CALL_OW 449
57626: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57627: LD_ADDR_VAR 0 3
57631: PUSH
57632: LD_VAR 0 5
57636: PPUSH
57637: LD_INT 1
57639: PPUSH
57640: CALL_OW 275
57644: PUSH
57645: LD_VAR 0 4
57649: PUSH
57650: LD_INT 1
57652: ARRAY
57653: GREATEREQUAL
57654: PUSH
57655: LD_VAR 0 5
57659: PPUSH
57660: LD_INT 2
57662: PPUSH
57663: CALL_OW 275
57667: PUSH
57668: LD_VAR 0 4
57672: PUSH
57673: LD_INT 2
57675: ARRAY
57676: GREATEREQUAL
57677: AND
57678: PUSH
57679: LD_VAR 0 5
57683: PPUSH
57684: LD_INT 3
57686: PPUSH
57687: CALL_OW 275
57691: PUSH
57692: LD_VAR 0 4
57696: PUSH
57697: LD_INT 3
57699: ARRAY
57700: GREATEREQUAL
57701: AND
57702: ST_TO_ADDR
// end ;
57703: LD_VAR 0 3
57707: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
57708: LD_INT 0
57710: PPUSH
57711: PPUSH
57712: PPUSH
57713: PPUSH
// pom := GetBase ( building ) ;
57714: LD_ADDR_VAR 0 3
57718: PUSH
57719: LD_VAR 0 1
57723: PPUSH
57724: CALL_OW 274
57728: ST_TO_ADDR
// if not pom then
57729: LD_VAR 0 3
57733: NOT
57734: IFFALSE 57738
// exit ;
57736: GO 57908
// btype := GetBType ( building ) ;
57738: LD_ADDR_VAR 0 5
57742: PUSH
57743: LD_VAR 0 1
57747: PPUSH
57748: CALL_OW 266
57752: ST_TO_ADDR
// if btype = b_armoury then
57753: LD_VAR 0 5
57757: PUSH
57758: LD_INT 4
57760: EQUAL
57761: IFFALSE 57771
// btype := b_barracks ;
57763: LD_ADDR_VAR 0 5
57767: PUSH
57768: LD_INT 5
57770: ST_TO_ADDR
// if btype = b_depot then
57771: LD_VAR 0 5
57775: PUSH
57776: LD_INT 0
57778: EQUAL
57779: IFFALSE 57789
// btype := b_warehouse ;
57781: LD_ADDR_VAR 0 5
57785: PUSH
57786: LD_INT 1
57788: ST_TO_ADDR
// if btype = b_workshop then
57789: LD_VAR 0 5
57793: PUSH
57794: LD_INT 2
57796: EQUAL
57797: IFFALSE 57807
// btype := b_factory ;
57799: LD_ADDR_VAR 0 5
57803: PUSH
57804: LD_INT 3
57806: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57807: LD_ADDR_VAR 0 4
57811: PUSH
57812: LD_VAR 0 5
57816: PPUSH
57817: LD_VAR 0 1
57821: PPUSH
57822: CALL_OW 248
57826: PPUSH
57827: CALL_OW 450
57831: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57832: LD_ADDR_VAR 0 2
57836: PUSH
57837: LD_VAR 0 3
57841: PPUSH
57842: LD_INT 1
57844: PPUSH
57845: CALL_OW 275
57849: PUSH
57850: LD_VAR 0 4
57854: PUSH
57855: LD_INT 1
57857: ARRAY
57858: GREATEREQUAL
57859: PUSH
57860: LD_VAR 0 3
57864: PPUSH
57865: LD_INT 2
57867: PPUSH
57868: CALL_OW 275
57872: PUSH
57873: LD_VAR 0 4
57877: PUSH
57878: LD_INT 2
57880: ARRAY
57881: GREATEREQUAL
57882: AND
57883: PUSH
57884: LD_VAR 0 3
57888: PPUSH
57889: LD_INT 3
57891: PPUSH
57892: CALL_OW 275
57896: PUSH
57897: LD_VAR 0 4
57901: PUSH
57902: LD_INT 3
57904: ARRAY
57905: GREATEREQUAL
57906: AND
57907: ST_TO_ADDR
// end ;
57908: LD_VAR 0 2
57912: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
57913: LD_INT 0
57915: PPUSH
57916: PPUSH
57917: PPUSH
// pom := GetBase ( building ) ;
57918: LD_ADDR_VAR 0 4
57922: PUSH
57923: LD_VAR 0 1
57927: PPUSH
57928: CALL_OW 274
57932: ST_TO_ADDR
// if not pom then
57933: LD_VAR 0 4
57937: NOT
57938: IFFALSE 57942
// exit ;
57940: GO 58043
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57942: LD_ADDR_VAR 0 5
57946: PUSH
57947: LD_VAR 0 2
57951: PPUSH
57952: LD_VAR 0 1
57956: PPUSH
57957: CALL_OW 248
57961: PPUSH
57962: CALL_OW 450
57966: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57967: LD_ADDR_VAR 0 3
57971: PUSH
57972: LD_VAR 0 4
57976: PPUSH
57977: LD_INT 1
57979: PPUSH
57980: CALL_OW 275
57984: PUSH
57985: LD_VAR 0 5
57989: PUSH
57990: LD_INT 1
57992: ARRAY
57993: GREATEREQUAL
57994: PUSH
57995: LD_VAR 0 4
57999: PPUSH
58000: LD_INT 2
58002: PPUSH
58003: CALL_OW 275
58007: PUSH
58008: LD_VAR 0 5
58012: PUSH
58013: LD_INT 2
58015: ARRAY
58016: GREATEREQUAL
58017: AND
58018: PUSH
58019: LD_VAR 0 4
58023: PPUSH
58024: LD_INT 3
58026: PPUSH
58027: CALL_OW 275
58031: PUSH
58032: LD_VAR 0 5
58036: PUSH
58037: LD_INT 3
58039: ARRAY
58040: GREATEREQUAL
58041: AND
58042: ST_TO_ADDR
// end ;
58043: LD_VAR 0 3
58047: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
58048: LD_INT 0
58050: PPUSH
58051: PPUSH
58052: PPUSH
58053: PPUSH
58054: PPUSH
58055: PPUSH
58056: PPUSH
58057: PPUSH
58058: PPUSH
58059: PPUSH
58060: PPUSH
// result := false ;
58061: LD_ADDR_VAR 0 8
58065: PUSH
58066: LD_INT 0
58068: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
58069: LD_VAR 0 5
58073: NOT
58074: PUSH
58075: LD_VAR 0 1
58079: NOT
58080: OR
58081: PUSH
58082: LD_VAR 0 2
58086: NOT
58087: OR
58088: PUSH
58089: LD_VAR 0 3
58093: NOT
58094: OR
58095: IFFALSE 58099
// exit ;
58097: GO 58913
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
58099: LD_ADDR_VAR 0 14
58103: PUSH
58104: LD_VAR 0 1
58108: PPUSH
58109: LD_VAR 0 2
58113: PPUSH
58114: LD_VAR 0 3
58118: PPUSH
58119: LD_VAR 0 4
58123: PPUSH
58124: LD_VAR 0 5
58128: PUSH
58129: LD_INT 1
58131: ARRAY
58132: PPUSH
58133: CALL_OW 248
58137: PPUSH
58138: LD_INT 0
58140: PPUSH
58141: CALL 60150 0 6
58145: ST_TO_ADDR
// if not hexes then
58146: LD_VAR 0 14
58150: NOT
58151: IFFALSE 58155
// exit ;
58153: GO 58913
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58155: LD_ADDR_VAR 0 17
58159: PUSH
58160: LD_VAR 0 5
58164: PPUSH
58165: LD_INT 22
58167: PUSH
58168: LD_VAR 0 13
58172: PPUSH
58173: CALL_OW 255
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 2
58184: PUSH
58185: LD_INT 30
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 30
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PPUSH
58214: CALL_OW 72
58218: ST_TO_ADDR
// for i = 1 to hexes do
58219: LD_ADDR_VAR 0 9
58223: PUSH
58224: DOUBLE
58225: LD_INT 1
58227: DEC
58228: ST_TO_ADDR
58229: LD_VAR 0 14
58233: PUSH
58234: FOR_TO
58235: IFFALSE 58911
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58237: LD_ADDR_VAR 0 13
58241: PUSH
58242: LD_VAR 0 14
58246: PUSH
58247: LD_VAR 0 9
58251: ARRAY
58252: PUSH
58253: LD_INT 1
58255: ARRAY
58256: PPUSH
58257: LD_VAR 0 14
58261: PUSH
58262: LD_VAR 0 9
58266: ARRAY
58267: PUSH
58268: LD_INT 2
58270: ARRAY
58271: PPUSH
58272: CALL_OW 428
58276: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
58277: LD_VAR 0 14
58281: PUSH
58282: LD_VAR 0 9
58286: ARRAY
58287: PUSH
58288: LD_INT 1
58290: ARRAY
58291: PPUSH
58292: LD_VAR 0 14
58296: PUSH
58297: LD_VAR 0 9
58301: ARRAY
58302: PUSH
58303: LD_INT 2
58305: ARRAY
58306: PPUSH
58307: CALL_OW 351
58311: PUSH
58312: LD_VAR 0 14
58316: PUSH
58317: LD_VAR 0 9
58321: ARRAY
58322: PUSH
58323: LD_INT 1
58325: ARRAY
58326: PPUSH
58327: LD_VAR 0 14
58331: PUSH
58332: LD_VAR 0 9
58336: ARRAY
58337: PUSH
58338: LD_INT 2
58340: ARRAY
58341: PPUSH
58342: CALL_OW 488
58346: NOT
58347: OR
58348: PUSH
58349: LD_VAR 0 13
58353: PPUSH
58354: CALL_OW 247
58358: PUSH
58359: LD_INT 3
58361: EQUAL
58362: OR
58363: IFFALSE 58369
// exit ;
58365: POP
58366: POP
58367: GO 58913
// if not tmp then
58369: LD_VAR 0 13
58373: NOT
58374: IFFALSE 58378
// continue ;
58376: GO 58234
// result := true ;
58378: LD_ADDR_VAR 0 8
58382: PUSH
58383: LD_INT 1
58385: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
58386: LD_VAR 0 6
58390: PUSH
58391: LD_VAR 0 13
58395: PPUSH
58396: CALL_OW 247
58400: PUSH
58401: LD_INT 2
58403: EQUAL
58404: AND
58405: PUSH
58406: LD_VAR 0 13
58410: PPUSH
58411: CALL_OW 263
58415: PUSH
58416: LD_INT 1
58418: EQUAL
58419: AND
58420: IFFALSE 58584
// begin if IsDrivenBy ( tmp ) then
58422: LD_VAR 0 13
58426: PPUSH
58427: CALL_OW 311
58431: IFFALSE 58435
// continue ;
58433: GO 58234
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
58435: LD_VAR 0 6
58439: PPUSH
58440: LD_INT 3
58442: PUSH
58443: LD_INT 60
58445: PUSH
58446: EMPTY
58447: LIST
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: PUSH
58456: LD_INT 55
58458: PUSH
58459: EMPTY
58460: LIST
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PPUSH
58470: CALL_OW 72
58474: IFFALSE 58582
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
58476: LD_ADDR_VAR 0 18
58480: PUSH
58481: LD_VAR 0 6
58485: PPUSH
58486: LD_INT 3
58488: PUSH
58489: LD_INT 60
58491: PUSH
58492: EMPTY
58493: LIST
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 3
58501: PUSH
58502: LD_INT 55
58504: PUSH
58505: EMPTY
58506: LIST
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PPUSH
58516: CALL_OW 72
58520: PUSH
58521: LD_INT 1
58523: ARRAY
58524: ST_TO_ADDR
// if IsInUnit ( driver ) then
58525: LD_VAR 0 18
58529: PPUSH
58530: CALL_OW 310
58534: IFFALSE 58545
// ComExit ( driver ) ;
58536: LD_VAR 0 18
58540: PPUSH
58541: CALL 83334 0 1
// AddComEnterUnit ( driver , tmp ) ;
58545: LD_VAR 0 18
58549: PPUSH
58550: LD_VAR 0 13
58554: PPUSH
58555: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
58559: LD_VAR 0 18
58563: PPUSH
58564: LD_VAR 0 7
58568: PPUSH
58569: CALL_OW 173
// AddComExitVehicle ( driver ) ;
58573: LD_VAR 0 18
58577: PPUSH
58578: CALL_OW 181
// end ; continue ;
58582: GO 58234
// end ; if not cleaners or not tmp in cleaners then
58584: LD_VAR 0 6
58588: NOT
58589: PUSH
58590: LD_VAR 0 13
58594: PUSH
58595: LD_VAR 0 6
58599: IN
58600: NOT
58601: OR
58602: IFFALSE 58909
// begin if dep then
58604: LD_VAR 0 17
58608: IFFALSE 58744
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
58610: LD_ADDR_VAR 0 16
58614: PUSH
58615: LD_VAR 0 17
58619: PUSH
58620: LD_INT 1
58622: ARRAY
58623: PPUSH
58624: CALL_OW 250
58628: PPUSH
58629: LD_VAR 0 17
58633: PUSH
58634: LD_INT 1
58636: ARRAY
58637: PPUSH
58638: CALL_OW 254
58642: PPUSH
58643: LD_INT 5
58645: PPUSH
58646: CALL_OW 272
58650: PUSH
58651: LD_VAR 0 17
58655: PUSH
58656: LD_INT 1
58658: ARRAY
58659: PPUSH
58660: CALL_OW 251
58664: PPUSH
58665: LD_VAR 0 17
58669: PUSH
58670: LD_INT 1
58672: ARRAY
58673: PPUSH
58674: CALL_OW 254
58678: PPUSH
58679: LD_INT 5
58681: PPUSH
58682: CALL_OW 273
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
58691: LD_VAR 0 16
58695: PUSH
58696: LD_INT 1
58698: ARRAY
58699: PPUSH
58700: LD_VAR 0 16
58704: PUSH
58705: LD_INT 2
58707: ARRAY
58708: PPUSH
58709: CALL_OW 488
58713: IFFALSE 58744
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
58715: LD_VAR 0 13
58719: PPUSH
58720: LD_VAR 0 16
58724: PUSH
58725: LD_INT 1
58727: ARRAY
58728: PPUSH
58729: LD_VAR 0 16
58733: PUSH
58734: LD_INT 2
58736: ARRAY
58737: PPUSH
58738: CALL_OW 111
// continue ;
58742: GO 58234
// end ; end ; r := GetDir ( tmp ) ;
58744: LD_ADDR_VAR 0 15
58748: PUSH
58749: LD_VAR 0 13
58753: PPUSH
58754: CALL_OW 254
58758: ST_TO_ADDR
// if r = 5 then
58759: LD_VAR 0 15
58763: PUSH
58764: LD_INT 5
58766: EQUAL
58767: IFFALSE 58777
// r := 0 ;
58769: LD_ADDR_VAR 0 15
58773: PUSH
58774: LD_INT 0
58776: ST_TO_ADDR
// for j = r to 5 do
58777: LD_ADDR_VAR 0 10
58781: PUSH
58782: DOUBLE
58783: LD_VAR 0 15
58787: DEC
58788: ST_TO_ADDR
58789: LD_INT 5
58791: PUSH
58792: FOR_TO
58793: IFFALSE 58907
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
58795: LD_ADDR_VAR 0 11
58799: PUSH
58800: LD_VAR 0 13
58804: PPUSH
58805: CALL_OW 250
58809: PPUSH
58810: LD_VAR 0 10
58814: PPUSH
58815: LD_INT 2
58817: PPUSH
58818: CALL_OW 272
58822: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
58823: LD_ADDR_VAR 0 12
58827: PUSH
58828: LD_VAR 0 13
58832: PPUSH
58833: CALL_OW 251
58837: PPUSH
58838: LD_VAR 0 10
58842: PPUSH
58843: LD_INT 2
58845: PPUSH
58846: CALL_OW 273
58850: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
58851: LD_VAR 0 11
58855: PPUSH
58856: LD_VAR 0 12
58860: PPUSH
58861: CALL_OW 488
58865: PUSH
58866: LD_VAR 0 11
58870: PPUSH
58871: LD_VAR 0 12
58875: PPUSH
58876: CALL_OW 428
58880: NOT
58881: AND
58882: IFFALSE 58905
// begin ComMoveXY ( tmp , _x , _y ) ;
58884: LD_VAR 0 13
58888: PPUSH
58889: LD_VAR 0 11
58893: PPUSH
58894: LD_VAR 0 12
58898: PPUSH
58899: CALL_OW 111
// break ;
58903: GO 58907
// end ; end ;
58905: GO 58792
58907: POP
58908: POP
// end ; end ;
58909: GO 58234
58911: POP
58912: POP
// end ;
58913: LD_VAR 0 8
58917: RET
// export function BuildingTechInvented ( side , btype ) ; begin
58918: LD_INT 0
58920: PPUSH
// result := true ;
58921: LD_ADDR_VAR 0 3
58925: PUSH
58926: LD_INT 1
58928: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
58929: LD_VAR 0 2
58933: PUSH
58934: LD_INT 24
58936: DOUBLE
58937: EQUAL
58938: IFTRUE 58948
58940: LD_INT 33
58942: DOUBLE
58943: EQUAL
58944: IFTRUE 58948
58946: GO 58973
58948: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
58949: LD_ADDR_VAR 0 3
58953: PUSH
58954: LD_INT 32
58956: PPUSH
58957: LD_VAR 0 1
58961: PPUSH
58962: CALL_OW 321
58966: PUSH
58967: LD_INT 2
58969: EQUAL
58970: ST_TO_ADDR
58971: GO 59293
58973: LD_INT 20
58975: DOUBLE
58976: EQUAL
58977: IFTRUE 58981
58979: GO 59006
58981: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
58982: LD_ADDR_VAR 0 3
58986: PUSH
58987: LD_INT 6
58989: PPUSH
58990: LD_VAR 0 1
58994: PPUSH
58995: CALL_OW 321
58999: PUSH
59000: LD_INT 2
59002: EQUAL
59003: ST_TO_ADDR
59004: GO 59293
59006: LD_INT 22
59008: DOUBLE
59009: EQUAL
59010: IFTRUE 59020
59012: LD_INT 36
59014: DOUBLE
59015: EQUAL
59016: IFTRUE 59020
59018: GO 59045
59020: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
59021: LD_ADDR_VAR 0 3
59025: PUSH
59026: LD_INT 15
59028: PPUSH
59029: LD_VAR 0 1
59033: PPUSH
59034: CALL_OW 321
59038: PUSH
59039: LD_INT 2
59041: EQUAL
59042: ST_TO_ADDR
59043: GO 59293
59045: LD_INT 30
59047: DOUBLE
59048: EQUAL
59049: IFTRUE 59053
59051: GO 59078
59053: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
59054: LD_ADDR_VAR 0 3
59058: PUSH
59059: LD_INT 20
59061: PPUSH
59062: LD_VAR 0 1
59066: PPUSH
59067: CALL_OW 321
59071: PUSH
59072: LD_INT 2
59074: EQUAL
59075: ST_TO_ADDR
59076: GO 59293
59078: LD_INT 28
59080: DOUBLE
59081: EQUAL
59082: IFTRUE 59092
59084: LD_INT 21
59086: DOUBLE
59087: EQUAL
59088: IFTRUE 59092
59090: GO 59117
59092: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
59093: LD_ADDR_VAR 0 3
59097: PUSH
59098: LD_INT 21
59100: PPUSH
59101: LD_VAR 0 1
59105: PPUSH
59106: CALL_OW 321
59110: PUSH
59111: LD_INT 2
59113: EQUAL
59114: ST_TO_ADDR
59115: GO 59293
59117: LD_INT 16
59119: DOUBLE
59120: EQUAL
59121: IFTRUE 59125
59123: GO 59152
59125: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
59126: LD_ADDR_VAR 0 3
59130: PUSH
59131: LD_EXP 60
59135: PPUSH
59136: LD_VAR 0 1
59140: PPUSH
59141: CALL_OW 321
59145: PUSH
59146: LD_INT 2
59148: EQUAL
59149: ST_TO_ADDR
59150: GO 59293
59152: LD_INT 19
59154: DOUBLE
59155: EQUAL
59156: IFTRUE 59166
59158: LD_INT 23
59160: DOUBLE
59161: EQUAL
59162: IFTRUE 59166
59164: GO 59193
59166: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
59167: LD_ADDR_VAR 0 3
59171: PUSH
59172: LD_EXP 59
59176: PPUSH
59177: LD_VAR 0 1
59181: PPUSH
59182: CALL_OW 321
59186: PUSH
59187: LD_INT 2
59189: EQUAL
59190: ST_TO_ADDR
59191: GO 59293
59193: LD_INT 17
59195: DOUBLE
59196: EQUAL
59197: IFTRUE 59201
59199: GO 59226
59201: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
59202: LD_ADDR_VAR 0 3
59206: PUSH
59207: LD_INT 39
59209: PPUSH
59210: LD_VAR 0 1
59214: PPUSH
59215: CALL_OW 321
59219: PUSH
59220: LD_INT 2
59222: EQUAL
59223: ST_TO_ADDR
59224: GO 59293
59226: LD_INT 18
59228: DOUBLE
59229: EQUAL
59230: IFTRUE 59234
59232: GO 59259
59234: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
59235: LD_ADDR_VAR 0 3
59239: PUSH
59240: LD_INT 40
59242: PPUSH
59243: LD_VAR 0 1
59247: PPUSH
59248: CALL_OW 321
59252: PUSH
59253: LD_INT 2
59255: EQUAL
59256: ST_TO_ADDR
59257: GO 59293
59259: LD_INT 27
59261: DOUBLE
59262: EQUAL
59263: IFTRUE 59267
59265: GO 59292
59267: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
59268: LD_ADDR_VAR 0 3
59272: PUSH
59273: LD_INT 35
59275: PPUSH
59276: LD_VAR 0 1
59280: PPUSH
59281: CALL_OW 321
59285: PUSH
59286: LD_INT 2
59288: EQUAL
59289: ST_TO_ADDR
59290: GO 59293
59292: POP
// end ;
59293: LD_VAR 0 3
59297: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
59298: LD_INT 0
59300: PPUSH
59301: PPUSH
59302: PPUSH
59303: PPUSH
59304: PPUSH
59305: PPUSH
59306: PPUSH
59307: PPUSH
59308: PPUSH
59309: PPUSH
59310: PPUSH
// result := false ;
59311: LD_ADDR_VAR 0 6
59315: PUSH
59316: LD_INT 0
59318: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
59319: LD_VAR 0 1
59323: NOT
59324: PUSH
59325: LD_VAR 0 1
59329: PPUSH
59330: CALL_OW 266
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: IN
59345: NOT
59346: OR
59347: PUSH
59348: LD_VAR 0 2
59352: NOT
59353: OR
59354: PUSH
59355: LD_VAR 0 5
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: LD_INT 3
59371: PUSH
59372: LD_INT 4
59374: PUSH
59375: LD_INT 5
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: IN
59386: NOT
59387: OR
59388: PUSH
59389: LD_VAR 0 3
59393: PPUSH
59394: LD_VAR 0 4
59398: PPUSH
59399: CALL_OW 488
59403: NOT
59404: OR
59405: IFFALSE 59409
// exit ;
59407: GO 60145
// side := GetSide ( depot ) ;
59409: LD_ADDR_VAR 0 9
59413: PUSH
59414: LD_VAR 0 1
59418: PPUSH
59419: CALL_OW 255
59423: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
59424: LD_VAR 0 9
59428: PPUSH
59429: LD_VAR 0 2
59433: PPUSH
59434: CALL 58918 0 2
59438: NOT
59439: IFFALSE 59443
// exit ;
59441: GO 60145
// pom := GetBase ( depot ) ;
59443: LD_ADDR_VAR 0 10
59447: PUSH
59448: LD_VAR 0 1
59452: PPUSH
59453: CALL_OW 274
59457: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59458: LD_ADDR_VAR 0 11
59462: PUSH
59463: LD_VAR 0 2
59467: PPUSH
59468: LD_VAR 0 1
59472: PPUSH
59473: CALL_OW 248
59477: PPUSH
59478: CALL_OW 450
59482: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
59483: LD_VAR 0 10
59487: PPUSH
59488: LD_INT 1
59490: PPUSH
59491: CALL_OW 275
59495: PUSH
59496: LD_VAR 0 11
59500: PUSH
59501: LD_INT 1
59503: ARRAY
59504: GREATEREQUAL
59505: PUSH
59506: LD_VAR 0 10
59510: PPUSH
59511: LD_INT 2
59513: PPUSH
59514: CALL_OW 275
59518: PUSH
59519: LD_VAR 0 11
59523: PUSH
59524: LD_INT 2
59526: ARRAY
59527: GREATEREQUAL
59528: AND
59529: PUSH
59530: LD_VAR 0 10
59534: PPUSH
59535: LD_INT 3
59537: PPUSH
59538: CALL_OW 275
59542: PUSH
59543: LD_VAR 0 11
59547: PUSH
59548: LD_INT 3
59550: ARRAY
59551: GREATEREQUAL
59552: AND
59553: NOT
59554: IFFALSE 59558
// exit ;
59556: GO 60145
// if GetBType ( depot ) = b_depot then
59558: LD_VAR 0 1
59562: PPUSH
59563: CALL_OW 266
59567: PUSH
59568: LD_INT 0
59570: EQUAL
59571: IFFALSE 59583
// dist := 28 else
59573: LD_ADDR_VAR 0 14
59577: PUSH
59578: LD_INT 28
59580: ST_TO_ADDR
59581: GO 59591
// dist := 36 ;
59583: LD_ADDR_VAR 0 14
59587: PUSH
59588: LD_INT 36
59590: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
59591: LD_VAR 0 1
59595: PPUSH
59596: LD_VAR 0 3
59600: PPUSH
59601: LD_VAR 0 4
59605: PPUSH
59606: CALL_OW 297
59610: PUSH
59611: LD_VAR 0 14
59615: GREATER
59616: IFFALSE 59620
// exit ;
59618: GO 60145
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
59620: LD_ADDR_VAR 0 12
59624: PUSH
59625: LD_VAR 0 2
59629: PPUSH
59630: LD_VAR 0 3
59634: PPUSH
59635: LD_VAR 0 4
59639: PPUSH
59640: LD_VAR 0 5
59644: PPUSH
59645: LD_VAR 0 1
59649: PPUSH
59650: CALL_OW 248
59654: PPUSH
59655: LD_INT 0
59657: PPUSH
59658: CALL 60150 0 6
59662: ST_TO_ADDR
// if not hexes then
59663: LD_VAR 0 12
59667: NOT
59668: IFFALSE 59672
// exit ;
59670: GO 60145
// hex := GetHexInfo ( x , y ) ;
59672: LD_ADDR_VAR 0 15
59676: PUSH
59677: LD_VAR 0 3
59681: PPUSH
59682: LD_VAR 0 4
59686: PPUSH
59687: CALL_OW 546
59691: ST_TO_ADDR
// if hex [ 1 ] then
59692: LD_VAR 0 15
59696: PUSH
59697: LD_INT 1
59699: ARRAY
59700: IFFALSE 59704
// exit ;
59702: GO 60145
// height := hex [ 2 ] ;
59704: LD_ADDR_VAR 0 13
59708: PUSH
59709: LD_VAR 0 15
59713: PUSH
59714: LD_INT 2
59716: ARRAY
59717: ST_TO_ADDR
// for i = 1 to hexes do
59718: LD_ADDR_VAR 0 7
59722: PUSH
59723: DOUBLE
59724: LD_INT 1
59726: DEC
59727: ST_TO_ADDR
59728: LD_VAR 0 12
59732: PUSH
59733: FOR_TO
59734: IFFALSE 60064
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
59736: LD_VAR 0 12
59740: PUSH
59741: LD_VAR 0 7
59745: ARRAY
59746: PUSH
59747: LD_INT 1
59749: ARRAY
59750: PPUSH
59751: LD_VAR 0 12
59755: PUSH
59756: LD_VAR 0 7
59760: ARRAY
59761: PUSH
59762: LD_INT 2
59764: ARRAY
59765: PPUSH
59766: CALL_OW 488
59770: NOT
59771: PUSH
59772: LD_VAR 0 12
59776: PUSH
59777: LD_VAR 0 7
59781: ARRAY
59782: PUSH
59783: LD_INT 1
59785: ARRAY
59786: PPUSH
59787: LD_VAR 0 12
59791: PUSH
59792: LD_VAR 0 7
59796: ARRAY
59797: PUSH
59798: LD_INT 2
59800: ARRAY
59801: PPUSH
59802: CALL_OW 428
59806: PUSH
59807: LD_INT 0
59809: GREATER
59810: OR
59811: PUSH
59812: LD_VAR 0 12
59816: PUSH
59817: LD_VAR 0 7
59821: ARRAY
59822: PUSH
59823: LD_INT 1
59825: ARRAY
59826: PPUSH
59827: LD_VAR 0 12
59831: PUSH
59832: LD_VAR 0 7
59836: ARRAY
59837: PUSH
59838: LD_INT 2
59840: ARRAY
59841: PPUSH
59842: CALL_OW 351
59846: OR
59847: IFFALSE 59853
// exit ;
59849: POP
59850: POP
59851: GO 60145
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59853: LD_ADDR_VAR 0 8
59857: PUSH
59858: LD_VAR 0 12
59862: PUSH
59863: LD_VAR 0 7
59867: ARRAY
59868: PUSH
59869: LD_INT 1
59871: ARRAY
59872: PPUSH
59873: LD_VAR 0 12
59877: PUSH
59878: LD_VAR 0 7
59882: ARRAY
59883: PUSH
59884: LD_INT 2
59886: ARRAY
59887: PPUSH
59888: CALL_OW 546
59892: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
59893: LD_VAR 0 8
59897: PUSH
59898: LD_INT 1
59900: ARRAY
59901: PUSH
59902: LD_VAR 0 8
59906: PUSH
59907: LD_INT 2
59909: ARRAY
59910: PUSH
59911: LD_VAR 0 13
59915: PUSH
59916: LD_INT 2
59918: PLUS
59919: GREATER
59920: OR
59921: PUSH
59922: LD_VAR 0 8
59926: PUSH
59927: LD_INT 2
59929: ARRAY
59930: PUSH
59931: LD_VAR 0 13
59935: PUSH
59936: LD_INT 2
59938: MINUS
59939: LESS
59940: OR
59941: PUSH
59942: LD_VAR 0 8
59946: PUSH
59947: LD_INT 3
59949: ARRAY
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 8
59956: PUSH
59957: LD_INT 9
59959: PUSH
59960: LD_INT 10
59962: PUSH
59963: LD_INT 11
59965: PUSH
59966: LD_INT 12
59968: PUSH
59969: LD_INT 13
59971: PUSH
59972: LD_INT 16
59974: PUSH
59975: LD_INT 17
59977: PUSH
59978: LD_INT 18
59980: PUSH
59981: LD_INT 19
59983: PUSH
59984: LD_INT 20
59986: PUSH
59987: LD_INT 21
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: IN
60005: NOT
60006: OR
60007: PUSH
60008: LD_VAR 0 8
60012: PUSH
60013: LD_INT 5
60015: ARRAY
60016: NOT
60017: OR
60018: PUSH
60019: LD_VAR 0 8
60023: PUSH
60024: LD_INT 6
60026: ARRAY
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: LD_INT 7
60036: PUSH
60037: LD_INT 9
60039: PUSH
60040: LD_INT 10
60042: PUSH
60043: LD_INT 11
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: IN
60054: NOT
60055: OR
60056: IFFALSE 60062
// exit ;
60058: POP
60059: POP
60060: GO 60145
// end ;
60062: GO 59733
60064: POP
60065: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
60066: LD_VAR 0 9
60070: PPUSH
60071: LD_VAR 0 3
60075: PPUSH
60076: LD_VAR 0 4
60080: PPUSH
60081: LD_INT 20
60083: PPUSH
60084: CALL 52091 0 4
60088: PUSH
60089: LD_INT 4
60091: ARRAY
60092: IFFALSE 60096
// exit ;
60094: GO 60145
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
60096: LD_VAR 0 2
60100: PUSH
60101: LD_INT 29
60103: PUSH
60104: LD_INT 30
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: IN
60111: PUSH
60112: LD_VAR 0 3
60116: PPUSH
60117: LD_VAR 0 4
60121: PPUSH
60122: LD_VAR 0 9
60126: PPUSH
60127: CALL_OW 440
60131: NOT
60132: AND
60133: IFFALSE 60137
// exit ;
60135: GO 60145
// result := true ;
60137: LD_ADDR_VAR 0 6
60141: PUSH
60142: LD_INT 1
60144: ST_TO_ADDR
// end ;
60145: LD_VAR 0 6
60149: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
60150: LD_INT 0
60152: PPUSH
60153: PPUSH
60154: PPUSH
60155: PPUSH
60156: PPUSH
60157: PPUSH
60158: PPUSH
60159: PPUSH
60160: PPUSH
60161: PPUSH
60162: PPUSH
60163: PPUSH
60164: PPUSH
60165: PPUSH
60166: PPUSH
60167: PPUSH
60168: PPUSH
60169: PPUSH
60170: PPUSH
60171: PPUSH
60172: PPUSH
60173: PPUSH
60174: PPUSH
60175: PPUSH
60176: PPUSH
60177: PPUSH
60178: PPUSH
60179: PPUSH
60180: PPUSH
60181: PPUSH
60182: PPUSH
60183: PPUSH
60184: PPUSH
60185: PPUSH
60186: PPUSH
60187: PPUSH
60188: PPUSH
60189: PPUSH
60190: PPUSH
60191: PPUSH
60192: PPUSH
60193: PPUSH
60194: PPUSH
60195: PPUSH
60196: PPUSH
60197: PPUSH
60198: PPUSH
60199: PPUSH
60200: PPUSH
60201: PPUSH
60202: PPUSH
60203: PPUSH
60204: PPUSH
60205: PPUSH
60206: PPUSH
60207: PPUSH
60208: PPUSH
60209: PPUSH
// result = [ ] ;
60210: LD_ADDR_VAR 0 7
60214: PUSH
60215: EMPTY
60216: ST_TO_ADDR
// temp_list = [ ] ;
60217: LD_ADDR_VAR 0 9
60221: PUSH
60222: EMPTY
60223: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
60224: LD_VAR 0 4
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: LD_INT 4
60243: PUSH
60244: LD_INT 5
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: IN
60255: NOT
60256: PUSH
60257: LD_VAR 0 1
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: IN
60272: PUSH
60273: LD_VAR 0 5
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: LIST
60291: IN
60292: NOT
60293: AND
60294: OR
60295: IFFALSE 60299
// exit ;
60297: GO 78690
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
60299: LD_VAR 0 1
60303: PUSH
60304: LD_INT 6
60306: PUSH
60307: LD_INT 7
60309: PUSH
60310: LD_INT 8
60312: PUSH
60313: LD_INT 13
60315: PUSH
60316: LD_INT 12
60318: PUSH
60319: LD_INT 15
60321: PUSH
60322: LD_INT 11
60324: PUSH
60325: LD_INT 14
60327: PUSH
60328: LD_INT 10
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: IN
60342: IFFALSE 60352
// btype = b_lab ;
60344: LD_ADDR_VAR 0 1
60348: PUSH
60349: LD_INT 6
60351: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
60352: LD_VAR 0 6
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: LIST
60370: IN
60371: NOT
60372: PUSH
60373: LD_VAR 0 1
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: LD_INT 2
60386: PUSH
60387: LD_INT 3
60389: PUSH
60390: LD_INT 6
60392: PUSH
60393: LD_INT 36
60395: PUSH
60396: LD_INT 4
60398: PUSH
60399: LD_INT 5
60401: PUSH
60402: LD_INT 31
60404: PUSH
60405: LD_INT 32
60407: PUSH
60408: LD_INT 33
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: IN
60424: NOT
60425: PUSH
60426: LD_VAR 0 6
60430: PUSH
60431: LD_INT 1
60433: EQUAL
60434: AND
60435: OR
60436: PUSH
60437: LD_VAR 0 1
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: LD_INT 3
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: IN
60452: NOT
60453: PUSH
60454: LD_VAR 0 6
60458: PUSH
60459: LD_INT 2
60461: EQUAL
60462: AND
60463: OR
60464: IFFALSE 60474
// mode = 0 ;
60466: LD_ADDR_VAR 0 6
60470: PUSH
60471: LD_INT 0
60473: ST_TO_ADDR
// case mode of 0 :
60474: LD_VAR 0 6
60478: PUSH
60479: LD_INT 0
60481: DOUBLE
60482: EQUAL
60483: IFTRUE 60487
60485: GO 71940
60487: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60488: LD_ADDR_VAR 0 11
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 1
60569: NEG
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: LD_INT 2
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 3
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60681: LD_ADDR_VAR 0 12
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 2
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 2
60815: NEG
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 2
60827: NEG
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 3
60849: NEG
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60877: LD_ADDR_VAR 0 13
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: LD_INT 2
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 2
61000: NEG
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: LD_INT 3
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 3
61036: NEG
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 3
61048: NEG
61049: PUSH
61050: LD_INT 3
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61076: LD_ADDR_VAR 0 14
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: LD_INT 1
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: LD_INT 3
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: LD_INT 2
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61272: LD_ADDR_VAR 0 15
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 1
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 1
61330: NEG
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 2
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: NEG
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 2
61406: NEG
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 3
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61465: LD_ADDR_VAR 0 16
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: LD_INT 2
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: LD_INT 2
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 3
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 3
61622: PUSH
61623: LD_INT 3
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: LD_INT 3
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61658: LD_ADDR_VAR 0 17
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: LD_INT 2
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 1
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 2
61834: NEG
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: LD_INT 1
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61888: LD_ADDR_VAR 0 18
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 2
62023: PUSH
62024: LD_INT 2
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: LD_INT 2
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: LD_INT 2
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 2
62064: NEG
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: NEG
62088: PUSH
62089: LD_INT 2
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62118: LD_ADDR_VAR 0 19
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 0
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: LD_INT 1
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: LD_INT 2
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 2
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 2
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 2
62253: PUSH
62254: LD_INT 2
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: LD_INT 2
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: NEG
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: NEG
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62348: LD_ADDR_VAR 0 20
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: LD_INT 2
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 2
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 2
62473: PUSH
62474: LD_INT 1
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: LD_INT 2
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: LD_INT 2
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: LD_INT 2
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: NEG
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 2
62524: NEG
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 2
62535: NEG
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 2
62547: NEG
62548: PUSH
62549: LD_INT 2
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62578: LD_ADDR_VAR 0 21
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: LD_INT 1
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: LD_INT 2
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 2
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: PUSH
62714: LD_INT 2
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: LD_INT 2
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: LD_INT 1
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 2
62754: NEG
62755: PUSH
62756: LD_INT 0
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: NEG
62778: PUSH
62779: LD_INT 2
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62808: LD_ADDR_VAR 0 22
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 1
62889: NEG
62890: PUSH
62891: LD_INT 2
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: LD_INT 2
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: LD_INT 1
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 2
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 2
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: LD_INT 2
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 2
62984: NEG
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: LD_INT 1
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: LD_INT 2
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63038: LD_ADDR_VAR 0 23
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: LD_INT 1
63058: NEG
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 1
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: NEG
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: LD_INT 2
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: LD_INT 2
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 2
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: LD_INT 2
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 2
63214: NEG
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 2
63225: NEG
63226: PUSH
63227: LD_INT 1
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: LD_INT 2
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: LD_INT 3
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: LD_INT 3
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: LD_INT 2
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: LD_INT 1
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
63318: LD_ADDR_VAR 0 24
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: LD_INT 2
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: LD_INT 2
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 2
63443: PUSH
63444: LD_INT 1
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: LD_INT 2
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: LD_INT 2
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: LD_INT 2
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 2
63494: NEG
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 2
63505: NEG
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 2
63517: NEG
63518: PUSH
63519: LD_INT 2
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 2
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 3
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 3
63561: PUSH
63562: LD_INT 2
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
63594: LD_ADDR_VAR 0 25
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: LD_INT 1
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 1
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: LD_INT 2
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 2
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: LD_INT 1
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: LD_INT 2
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: LD_INT 2
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: LD_INT 2
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: NEG
63760: PUSH
63761: LD_INT 1
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 2
63770: NEG
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 2
63781: NEG
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: LD_INT 2
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 3
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 3
63815: PUSH
63816: LD_INT 2
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 2
63825: PUSH
63826: LD_INT 3
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 1
63835: PUSH
63836: LD_INT 3
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63868: LD_ADDR_VAR 0 26
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: LD_INT 1
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: LD_INT 2
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: LD_INT 2
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 2
64003: PUSH
64004: LD_INT 2
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: LD_INT 2
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 0
64023: PUSH
64024: LD_INT 2
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 2
64044: NEG
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 2
64055: NEG
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: LD_INT 2
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 2
64079: PUSH
64080: LD_INT 3
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: LD_INT 3
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 1
64099: NEG
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 2
64110: NEG
64111: PUSH
64112: LD_INT 1
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64144: LD_ADDR_VAR 0 27
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: LD_INT 1
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: LD_INT 1
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: LD_INT 2
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: LD_INT 2
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 2
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 2
64279: PUSH
64280: LD_INT 2
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: PUSH
64290: LD_INT 2
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: LD_INT 2
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 1
64309: NEG
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 2
64320: NEG
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 2
64331: NEG
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 2
64343: NEG
64344: PUSH
64345: LD_INT 2
64347: NEG
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: NEG
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 2
64366: NEG
64367: PUSH
64368: LD_INT 1
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 3
64377: NEG
64378: PUSH
64379: LD_INT 1
64381: NEG
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 3
64389: NEG
64390: PUSH
64391: LD_INT 2
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64424: LD_ADDR_VAR 0 28
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 1
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: LD_INT 2
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: LD_INT 2
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: LD_INT 1
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: LD_INT 0
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 2
64549: PUSH
64550: LD_INT 1
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 2
64559: PUSH
64560: LD_INT 2
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: LD_INT 2
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 2
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: NEG
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 2
64600: NEG
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 2
64611: NEG
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 2
64623: NEG
64624: PUSH
64625: LD_INT 2
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 2
64635: NEG
64636: PUSH
64637: LD_INT 3
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 1
64647: NEG
64648: PUSH
64649: LD_INT 3
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 3
64659: NEG
64660: PUSH
64661: LD_INT 1
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 3
64671: NEG
64672: PUSH
64673: LD_INT 2
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64706: LD_ADDR_VAR 0 29
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: LD_INT 0
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: LD_INT 1
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 1
64775: NEG
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: LD_INT 2
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: LD_INT 2
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 2
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: PUSH
64842: LD_INT 2
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: LD_INT 2
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: NEG
64862: PUSH
64863: LD_INT 1
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 2
64872: NEG
64873: PUSH
64874: LD_INT 1
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 2
64884: NEG
64885: PUSH
64886: LD_INT 2
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 2
64896: NEG
64897: PUSH
64898: LD_INT 3
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 2
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 3
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: LD_INT 2
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 3
64950: NEG
64951: PUSH
64952: LD_INT 2
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64985: LD_ADDR_VAR 0 30
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 1
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 1
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 1
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: NEG
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: LD_INT 2
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 2
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: LD_INT 1
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 2
65120: PUSH
65121: LD_INT 2
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: LD_INT 2
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 2
65162: NEG
65163: PUSH
65164: LD_INT 1
65166: NEG
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 1
65174: NEG
65175: PUSH
65176: LD_INT 3
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: LD_INT 2
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 3
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 2
65207: PUSH
65208: LD_INT 3
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 2
65217: NEG
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 3
65228: NEG
65229: PUSH
65230: LD_INT 1
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65263: LD_ADDR_VAR 0 31
65267: PUSH
65268: LD_INT 0
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 0
65280: PUSH
65281: LD_INT 1
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 1
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: LD_INT 1
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: LD_INT 1
65336: NEG
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 1
65344: NEG
65345: PUSH
65346: LD_INT 2
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 2
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 2
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 2
65387: PUSH
65388: LD_INT 2
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: LD_INT 2
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 1
65417: NEG
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 2
65428: NEG
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 2
65440: NEG
65441: PUSH
65442: LD_INT 2
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 2
65452: NEG
65453: PUSH
65454: LD_INT 3
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 2
65464: PUSH
65465: LD_INT 1
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 3
65475: PUSH
65476: LD_INT 1
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: LD_INT 3
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: LD_INT 2
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 3
65506: NEG
65507: PUSH
65508: LD_INT 2
65510: NEG
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65541: LD_ADDR_VAR 0 32
65545: PUSH
65546: LD_INT 0
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: LD_INT 1
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 1
65599: NEG
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 1
65610: NEG
65611: PUSH
65612: LD_INT 1
65614: NEG
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: LD_INT 2
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: LD_INT 2
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: PUSH
65657: LD_INT 1
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 2
65666: PUSH
65667: LD_INT 2
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 1
65676: PUSH
65677: LD_INT 2
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: LD_INT 2
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 2
65707: NEG
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 2
65718: NEG
65719: PUSH
65720: LD_INT 1
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 1
65730: NEG
65731: PUSH
65732: LD_INT 3
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: LD_INT 2
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 3
65753: PUSH
65754: LD_INT 2
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 2
65763: PUSH
65764: LD_INT 3
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 2
65773: NEG
65774: PUSH
65775: LD_INT 1
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 3
65784: NEG
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65819: LD_ADDR_VAR 0 33
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: LD_INT 1
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: LD_INT 1
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 1
65888: NEG
65889: PUSH
65890: LD_INT 1
65892: NEG
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: LD_INT 2
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 2
65923: PUSH
65924: LD_INT 0
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: LD_INT 2
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: LD_INT 2
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: LD_INT 1
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 2
65974: NEG
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 2
65985: NEG
65986: PUSH
65987: LD_INT 1
65989: NEG
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 2
65997: NEG
65998: PUSH
65999: LD_INT 2
66001: NEG
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 2
66009: NEG
66010: PUSH
66011: LD_INT 3
66013: NEG
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 2
66021: PUSH
66022: LD_INT 1
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 3
66032: PUSH
66033: LD_INT 1
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: LD_INT 3
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 1
66052: NEG
66053: PUSH
66054: LD_INT 2
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 3
66063: NEG
66064: PUSH
66065: LD_INT 2
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66098: LD_ADDR_VAR 0 34
66102: PUSH
66103: LD_INT 0
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: LD_INT 1
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 1
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 1
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 1
66167: NEG
66168: PUSH
66169: LD_INT 1
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 1
66179: NEG
66180: PUSH
66181: LD_INT 2
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: LD_INT 2
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 1
66202: PUSH
66203: LD_INT 1
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 2
66213: PUSH
66214: LD_INT 1
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 2
66223: PUSH
66224: LD_INT 2
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: PUSH
66234: LD_INT 2
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 1
66243: NEG
66244: PUSH
66245: LD_INT 1
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 2
66254: NEG
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 2
66265: NEG
66266: PUSH
66267: LD_INT 1
66269: NEG
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 2
66277: NEG
66278: PUSH
66279: LD_INT 2
66281: NEG
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 1
66289: NEG
66290: PUSH
66291: LD_INT 3
66293: NEG
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: PUSH
66302: LD_INT 2
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 3
66312: PUSH
66313: LD_INT 2
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 2
66322: PUSH
66323: LD_INT 3
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 3
66343: NEG
66344: PUSH
66345: LD_INT 1
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66378: LD_ADDR_VAR 0 35
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: LD_INT 1
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: LD_INT 0
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: LD_INT 1
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 2
66459: PUSH
66460: LD_INT 1
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 2
66469: NEG
66470: PUSH
66471: LD_INT 1
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66490: LD_ADDR_VAR 0 36
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: LD_INT 0
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: LD_INT 1
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 1
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: LD_INT 1
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 0
66538: PUSH
66539: LD_INT 1
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: NEG
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 1
66559: NEG
66560: PUSH
66561: LD_INT 1
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 1
66571: NEG
66572: PUSH
66573: LD_INT 2
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66602: LD_ADDR_VAR 0 37
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 1
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 1
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: LD_INT 1
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 1
66660: NEG
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: NEG
66672: PUSH
66673: LD_INT 1
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 1
66683: PUSH
66684: LD_INT 1
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 1
66694: NEG
66695: PUSH
66696: LD_INT 1
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66714: LD_ADDR_VAR 0 38
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: LD_INT 1
66734: NEG
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 1
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 1
66752: PUSH
66753: LD_INT 1
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: LD_INT 1
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 1
66772: NEG
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 1
66783: NEG
66784: PUSH
66785: LD_INT 1
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 2
66795: PUSH
66796: LD_INT 1
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 2
66805: NEG
66806: PUSH
66807: LD_INT 1
66809: NEG
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66826: LD_ADDR_VAR 0 39
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: LD_INT 1
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 1
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 1
66864: PUSH
66865: LD_INT 1
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: LD_INT 1
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 1
66884: NEG
66885: PUSH
66886: LD_INT 0
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: PUSH
66897: LD_INT 1
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: NEG
66908: PUSH
66909: LD_INT 2
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 1
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66938: LD_ADDR_VAR 0 40
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: LD_INT 0
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 0
66955: PUSH
66956: LD_INT 1
66958: NEG
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 1
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: LD_INT 1
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 1
66996: NEG
66997: PUSH
66998: LD_INT 0
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 1
67007: NEG
67008: PUSH
67009: LD_INT 1
67011: NEG
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 1
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: NEG
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67050: LD_ADDR_VAR 0 41
67054: PUSH
67055: LD_INT 0
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 1
67088: PUSH
67089: LD_INT 1
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: LD_INT 1
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 1
67108: NEG
67109: PUSH
67110: LD_INT 0
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 1
67119: NEG
67120: PUSH
67121: LD_INT 1
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 1
67131: NEG
67132: PUSH
67133: LD_INT 2
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: LD_INT 1
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 2
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 2
67164: PUSH
67165: LD_INT 1
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 2
67174: PUSH
67175: LD_INT 2
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 1
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 1
67194: NEG
67195: PUSH
67196: LD_INT 1
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 2
67205: NEG
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 2
67216: NEG
67217: PUSH
67218: LD_INT 1
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 2
67228: NEG
67229: PUSH
67230: LD_INT 2
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 2
67240: NEG
67241: PUSH
67242: LD_INT 3
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 2
67252: PUSH
67253: LD_INT 1
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 3
67263: PUSH
67264: LD_INT 0
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 3
67273: PUSH
67274: LD_INT 1
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 3
67283: PUSH
67284: LD_INT 2
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 3
67293: PUSH
67294: LD_INT 3
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 2
67303: PUSH
67304: LD_INT 3
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 2
67313: NEG
67314: PUSH
67315: LD_INT 1
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 3
67324: NEG
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 3
67335: NEG
67336: PUSH
67337: LD_INT 1
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 3
67347: NEG
67348: PUSH
67349: LD_INT 2
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 3
67359: NEG
67360: PUSH
67361: LD_INT 3
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67400: LD_ADDR_VAR 0 42
67404: PUSH
67405: LD_INT 0
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 0
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 1
67428: PUSH
67429: LD_INT 0
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 1
67438: PUSH
67439: LD_INT 1
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: LD_INT 1
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 1
67458: NEG
67459: PUSH
67460: LD_INT 0
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 1
67469: NEG
67470: PUSH
67471: LD_INT 1
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 1
67481: NEG
67482: PUSH
67483: LD_INT 2
67485: NEG
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: LD_INT 2
67496: NEG
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: LD_INT 1
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 2
67515: PUSH
67516: LD_INT 1
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: LD_INT 2
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 1
67535: PUSH
67536: LD_INT 2
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 0
67545: PUSH
67546: LD_INT 2
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 1
67555: NEG
67556: PUSH
67557: LD_INT 1
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 2
67566: NEG
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 2
67578: NEG
67579: PUSH
67580: LD_INT 2
67582: NEG
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 2
67590: NEG
67591: PUSH
67592: LD_INT 3
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 1
67602: NEG
67603: PUSH
67604: LD_INT 3
67606: NEG
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: LD_INT 3
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 1
67625: PUSH
67626: LD_INT 2
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 3
67636: PUSH
67637: LD_INT 2
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 3
67646: PUSH
67647: LD_INT 3
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 2
67656: PUSH
67657: LD_INT 3
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: PUSH
67667: LD_INT 3
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 0
67676: PUSH
67677: LD_INT 3
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 1
67686: NEG
67687: PUSH
67688: LD_INT 2
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 3
67697: NEG
67698: PUSH
67699: LD_INT 2
67701: NEG
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 3
67709: NEG
67710: PUSH
67711: LD_INT 3
67713: NEG
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67750: LD_ADDR_VAR 0 43
67754: PUSH
67755: LD_INT 0
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 0
67767: PUSH
67768: LD_INT 1
67770: NEG
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 1
67778: PUSH
67779: LD_INT 0
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 1
67788: PUSH
67789: LD_INT 1
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: LD_INT 1
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 1
67808: NEG
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 1
67819: NEG
67820: PUSH
67821: LD_INT 1
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 1
67831: NEG
67832: PUSH
67833: LD_INT 2
67835: NEG
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: LD_INT 2
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 1
67854: PUSH
67855: LD_INT 1
67857: NEG
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 2
67865: PUSH
67866: LD_INT 0
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 2
67875: PUSH
67876: LD_INT 1
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 1
67885: PUSH
67886: LD_INT 2
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: LD_INT 2
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 1
67905: NEG
67906: PUSH
67907: LD_INT 1
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 2
67916: NEG
67917: PUSH
67918: LD_INT 0
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 2
67927: NEG
67928: PUSH
67929: LD_INT 1
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 1
67939: NEG
67940: PUSH
67941: LD_INT 3
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: LD_INT 3
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 1
67962: PUSH
67963: LD_INT 2
67965: NEG
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 2
67973: PUSH
67974: LD_INT 1
67976: NEG
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 3
67984: PUSH
67985: LD_INT 0
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 3
67994: PUSH
67995: LD_INT 1
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 1
68004: PUSH
68005: LD_INT 3
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: LD_INT 3
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 1
68024: NEG
68025: PUSH
68026: LD_INT 2
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 2
68035: NEG
68036: PUSH
68037: LD_INT 1
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 3
68046: NEG
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 3
68057: NEG
68058: PUSH
68059: LD_INT 1
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68098: LD_ADDR_VAR 0 44
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: LD_INT 0
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 0
68115: PUSH
68116: LD_INT 1
68118: NEG
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 1
68126: PUSH
68127: LD_INT 0
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 1
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: LD_INT 1
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 1
68156: NEG
68157: PUSH
68158: LD_INT 0
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 1
68167: NEG
68168: PUSH
68169: LD_INT 1
68171: NEG
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 1
68179: NEG
68180: PUSH
68181: LD_INT 2
68183: NEG
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 1
68191: PUSH
68192: LD_INT 1
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 2
68202: PUSH
68203: LD_INT 0
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 2
68212: PUSH
68213: LD_INT 1
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 2
68222: PUSH
68223: LD_INT 2
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 1
68232: PUSH
68233: LD_INT 2
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 1
68242: NEG
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 2
68253: NEG
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 2
68264: NEG
68265: PUSH
68266: LD_INT 1
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 2
68276: NEG
68277: PUSH
68278: LD_INT 2
68280: NEG
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 2
68288: NEG
68289: PUSH
68290: LD_INT 3
68292: NEG
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 2
68300: PUSH
68301: LD_INT 1
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 3
68311: PUSH
68312: LD_INT 0
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 3
68321: PUSH
68322: LD_INT 1
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 3
68331: PUSH
68332: LD_INT 2
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 3
68341: PUSH
68342: LD_INT 3
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 2
68351: PUSH
68352: LD_INT 3
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 2
68361: NEG
68362: PUSH
68363: LD_INT 1
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 3
68372: NEG
68373: PUSH
68374: LD_INT 0
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 3
68383: NEG
68384: PUSH
68385: LD_INT 1
68387: NEG
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 3
68395: NEG
68396: PUSH
68397: LD_INT 2
68399: NEG
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 3
68407: NEG
68408: PUSH
68409: LD_INT 3
68411: NEG
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68448: LD_ADDR_VAR 0 45
68452: PUSH
68453: LD_INT 0
68455: PUSH
68456: LD_INT 0
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 0
68465: PUSH
68466: LD_INT 1
68468: NEG
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 1
68476: PUSH
68477: LD_INT 0
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 1
68486: PUSH
68487: LD_INT 1
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 0
68496: PUSH
68497: LD_INT 1
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 1
68506: NEG
68507: PUSH
68508: LD_INT 0
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 1
68517: NEG
68518: PUSH
68519: LD_INT 1
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 1
68529: NEG
68530: PUSH
68531: LD_INT 2
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: LD_INT 2
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 1
68552: PUSH
68553: LD_INT 1
68555: NEG
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 2
68563: PUSH
68564: LD_INT 1
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 2
68573: PUSH
68574: LD_INT 2
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 1
68583: PUSH
68584: LD_INT 2
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 0
68593: PUSH
68594: LD_INT 2
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 1
68603: NEG
68604: PUSH
68605: LD_INT 1
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 2
68614: NEG
68615: PUSH
68616: LD_INT 1
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 2
68626: NEG
68627: PUSH
68628: LD_INT 2
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 2
68638: NEG
68639: PUSH
68640: LD_INT 3
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 1
68650: NEG
68651: PUSH
68652: LD_INT 3
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: LD_INT 3
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 1
68673: PUSH
68674: LD_INT 2
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 3
68684: PUSH
68685: LD_INT 2
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 3
68694: PUSH
68695: LD_INT 3
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 2
68704: PUSH
68705: LD_INT 3
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 1
68714: PUSH
68715: LD_INT 3
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: LD_INT 3
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 1
68734: NEG
68735: PUSH
68736: LD_INT 2
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 3
68745: NEG
68746: PUSH
68747: LD_INT 2
68749: NEG
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 3
68757: NEG
68758: PUSH
68759: LD_INT 3
68761: NEG
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68798: LD_ADDR_VAR 0 46
68802: PUSH
68803: LD_INT 0
68805: PUSH
68806: LD_INT 0
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: LD_INT 1
68818: NEG
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 1
68826: PUSH
68827: LD_INT 0
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 1
68836: PUSH
68837: LD_INT 1
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: LD_INT 1
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 1
68856: NEG
68857: PUSH
68858: LD_INT 0
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 1
68867: NEG
68868: PUSH
68869: LD_INT 1
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 1
68879: NEG
68880: PUSH
68881: LD_INT 2
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 0
68891: PUSH
68892: LD_INT 2
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 1
68902: PUSH
68903: LD_INT 1
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 2
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 2
68923: PUSH
68924: LD_INT 1
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 1
68933: PUSH
68934: LD_INT 2
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 0
68943: PUSH
68944: LD_INT 2
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 1
68953: NEG
68954: PUSH
68955: LD_INT 1
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 2
68964: NEG
68965: PUSH
68966: LD_INT 0
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 2
68975: NEG
68976: PUSH
68977: LD_INT 1
68979: NEG
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 1
68987: NEG
68988: PUSH
68989: LD_INT 3
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: LD_INT 3
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 1
69010: PUSH
69011: LD_INT 2
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 2
69021: PUSH
69022: LD_INT 1
69024: NEG
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 3
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 3
69042: PUSH
69043: LD_INT 1
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 1
69052: PUSH
69053: LD_INT 3
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: LD_INT 3
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 1
69072: NEG
69073: PUSH
69074: LD_INT 2
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 2
69083: NEG
69084: PUSH
69085: LD_INT 1
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 3
69094: NEG
69095: PUSH
69096: LD_INT 0
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 3
69105: NEG
69106: PUSH
69107: LD_INT 1
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69146: LD_ADDR_VAR 0 47
69150: PUSH
69151: LD_INT 0
69153: PUSH
69154: LD_INT 0
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 0
69163: PUSH
69164: LD_INT 1
69166: NEG
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 1
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 1
69184: PUSH
69185: LD_INT 1
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: LD_INT 1
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 1
69204: NEG
69205: PUSH
69206: LD_INT 0
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 1
69215: NEG
69216: PUSH
69217: LD_INT 1
69219: NEG
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 1
69227: NEG
69228: PUSH
69229: LD_INT 2
69231: NEG
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 0
69239: PUSH
69240: LD_INT 2
69242: NEG
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 1
69250: PUSH
69251: LD_INT 1
69253: NEG
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 2
69261: NEG
69262: PUSH
69263: LD_INT 1
69265: NEG
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 2
69273: NEG
69274: PUSH
69275: LD_INT 2
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69297: LD_ADDR_VAR 0 48
69301: PUSH
69302: LD_INT 0
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: LD_INT 1
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 1
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 1
69335: PUSH
69336: LD_INT 1
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: LD_INT 1
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 1
69355: NEG
69356: PUSH
69357: LD_INT 0
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 1
69366: NEG
69367: PUSH
69368: LD_INT 1
69370: NEG
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 1
69378: NEG
69379: PUSH
69380: LD_INT 2
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 0
69390: PUSH
69391: LD_INT 2
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 1
69401: PUSH
69402: LD_INT 1
69404: NEG
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 2
69412: PUSH
69413: LD_INT 0
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 2
69422: PUSH
69423: LD_INT 1
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69444: LD_ADDR_VAR 0 49
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: LD_INT 0
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 0
69461: PUSH
69462: LD_INT 1
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 1
69472: PUSH
69473: LD_INT 0
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 1
69482: PUSH
69483: LD_INT 1
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: LD_INT 1
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 1
69502: NEG
69503: PUSH
69504: LD_INT 0
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 1
69513: NEG
69514: PUSH
69515: LD_INT 1
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 1
69525: PUSH
69526: LD_INT 1
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 2
69536: PUSH
69537: LD_INT 0
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 2
69546: PUSH
69547: LD_INT 1
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 2
69556: PUSH
69557: LD_INT 2
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 1
69566: PUSH
69567: LD_INT 2
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69588: LD_ADDR_VAR 0 50
69592: PUSH
69593: LD_INT 0
69595: PUSH
69596: LD_INT 0
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 0
69605: PUSH
69606: LD_INT 1
69608: NEG
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 1
69616: PUSH
69617: LD_INT 0
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 1
69626: PUSH
69627: LD_INT 1
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 0
69636: PUSH
69637: LD_INT 1
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 1
69646: NEG
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 1
69657: NEG
69658: PUSH
69659: LD_INT 1
69661: NEG
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 2
69669: PUSH
69670: LD_INT 1
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 2
69679: PUSH
69680: LD_INT 2
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 1
69689: PUSH
69690: LD_INT 2
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 0
69699: PUSH
69700: LD_INT 2
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 1
69709: NEG
69710: PUSH
69711: LD_INT 1
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69732: LD_ADDR_VAR 0 51
69736: PUSH
69737: LD_INT 0
69739: PUSH
69740: LD_INT 0
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 0
69749: PUSH
69750: LD_INT 1
69752: NEG
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 1
69760: PUSH
69761: LD_INT 0
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 1
69770: PUSH
69771: LD_INT 1
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 0
69780: PUSH
69781: LD_INT 1
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 1
69790: NEG
69791: PUSH
69792: LD_INT 0
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 1
69801: NEG
69802: PUSH
69803: LD_INT 1
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 1
69813: PUSH
69814: LD_INT 2
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 0
69823: PUSH
69824: LD_INT 2
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 1
69833: NEG
69834: PUSH
69835: LD_INT 1
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 2
69844: NEG
69845: PUSH
69846: LD_INT 0
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 2
69855: NEG
69856: PUSH
69857: LD_INT 1
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69879: LD_ADDR_VAR 0 52
69883: PUSH
69884: LD_INT 0
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 0
69896: PUSH
69897: LD_INT 1
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 1
69907: PUSH
69908: LD_INT 0
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 1
69917: PUSH
69918: LD_INT 1
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 0
69927: PUSH
69928: LD_INT 1
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 1
69937: NEG
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 1
69948: NEG
69949: PUSH
69950: LD_INT 1
69952: NEG
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 1
69960: NEG
69961: PUSH
69962: LD_INT 2
69964: NEG
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 1
69972: NEG
69973: PUSH
69974: LD_INT 1
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 2
69983: NEG
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 2
69994: NEG
69995: PUSH
69996: LD_INT 1
69998: NEG
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 2
70006: NEG
70007: PUSH
70008: LD_INT 2
70010: NEG
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70030: LD_ADDR_VAR 0 53
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: LD_INT 0
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 0
70047: PUSH
70048: LD_INT 1
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 1
70058: PUSH
70059: LD_INT 0
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 1
70068: PUSH
70069: LD_INT 1
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 0
70078: PUSH
70079: LD_INT 1
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 1
70088: NEG
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 1
70099: NEG
70100: PUSH
70101: LD_INT 1
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 1
70111: NEG
70112: PUSH
70113: LD_INT 2
70115: NEG
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 0
70123: PUSH
70124: LD_INT 2
70126: NEG
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 1
70134: PUSH
70135: LD_INT 1
70137: NEG
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: LD_INT 0
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 2
70155: PUSH
70156: LD_INT 1
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 2
70165: PUSH
70166: LD_INT 2
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 1
70175: PUSH
70176: LD_INT 2
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 0
70185: PUSH
70186: LD_INT 2
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 1
70195: NEG
70196: PUSH
70197: LD_INT 1
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 2
70206: NEG
70207: PUSH
70208: LD_INT 0
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 2
70217: NEG
70218: PUSH
70219: LD_INT 1
70221: NEG
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 2
70229: NEG
70230: PUSH
70231: LD_INT 2
70233: NEG
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70260: LD_ADDR_VAR 0 54
70264: PUSH
70265: LD_INT 0
70267: PUSH
70268: LD_INT 0
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 0
70277: PUSH
70278: LD_INT 1
70280: NEG
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: LD_INT 1
70288: PUSH
70289: LD_INT 0
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 1
70298: PUSH
70299: LD_INT 1
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: LD_INT 1
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 1
70318: NEG
70319: PUSH
70320: LD_INT 0
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 1
70329: NEG
70330: PUSH
70331: LD_INT 1
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 1
70341: NEG
70342: PUSH
70343: LD_INT 2
70345: NEG
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 0
70353: PUSH
70354: LD_INT 2
70356: NEG
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 1
70364: PUSH
70365: LD_INT 1
70367: NEG
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 2
70375: PUSH
70376: LD_INT 0
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 2
70385: PUSH
70386: LD_INT 1
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 2
70395: PUSH
70396: LD_INT 2
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 1
70405: PUSH
70406: LD_INT 2
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 0
70415: PUSH
70416: LD_INT 2
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 1
70425: NEG
70426: PUSH
70427: LD_INT 1
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 2
70436: NEG
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 2
70447: NEG
70448: PUSH
70449: LD_INT 1
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 2
70459: NEG
70460: PUSH
70461: LD_INT 2
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70490: LD_ADDR_VAR 0 55
70494: PUSH
70495: LD_INT 0
70497: PUSH
70498: LD_INT 0
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 0
70507: PUSH
70508: LD_INT 1
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 1
70518: PUSH
70519: LD_INT 0
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 1
70528: PUSH
70529: LD_INT 1
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: LD_INT 1
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 1
70548: NEG
70549: PUSH
70550: LD_INT 0
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 1
70559: NEG
70560: PUSH
70561: LD_INT 1
70563: NEG
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 1
70571: NEG
70572: PUSH
70573: LD_INT 2
70575: NEG
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 0
70583: PUSH
70584: LD_INT 2
70586: NEG
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 1
70594: PUSH
70595: LD_INT 1
70597: NEG
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 2
70605: PUSH
70606: LD_INT 0
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 2
70615: PUSH
70616: LD_INT 1
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 2
70625: PUSH
70626: LD_INT 2
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 1
70635: PUSH
70636: LD_INT 2
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 0
70645: PUSH
70646: LD_INT 2
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 1
70655: NEG
70656: PUSH
70657: LD_INT 1
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 2
70666: NEG
70667: PUSH
70668: LD_INT 0
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 2
70677: NEG
70678: PUSH
70679: LD_INT 1
70681: NEG
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 2
70689: NEG
70690: PUSH
70691: LD_INT 2
70693: NEG
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70720: LD_ADDR_VAR 0 56
70724: PUSH
70725: LD_INT 0
70727: PUSH
70728: LD_INT 0
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 0
70737: PUSH
70738: LD_INT 1
70740: NEG
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 1
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 1
70758: PUSH
70759: LD_INT 1
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: LD_INT 1
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 1
70778: NEG
70779: PUSH
70780: LD_INT 0
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 1
70789: NEG
70790: PUSH
70791: LD_INT 1
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 1
70801: NEG
70802: PUSH
70803: LD_INT 2
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 0
70813: PUSH
70814: LD_INT 2
70816: NEG
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 1
70824: PUSH
70825: LD_INT 1
70827: NEG
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 2
70835: PUSH
70836: LD_INT 0
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 2
70845: PUSH
70846: LD_INT 1
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 2
70855: PUSH
70856: LD_INT 2
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 1
70865: PUSH
70866: LD_INT 2
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 0
70875: PUSH
70876: LD_INT 2
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 1
70885: NEG
70886: PUSH
70887: LD_INT 1
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 2
70896: NEG
70897: PUSH
70898: LD_INT 0
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: LD_INT 2
70907: NEG
70908: PUSH
70909: LD_INT 1
70911: NEG
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 2
70919: NEG
70920: PUSH
70921: LD_INT 2
70923: NEG
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70950: LD_ADDR_VAR 0 57
70954: PUSH
70955: LD_INT 0
70957: PUSH
70958: LD_INT 0
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 0
70967: PUSH
70968: LD_INT 1
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 1
70978: PUSH
70979: LD_INT 0
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 1
70988: PUSH
70989: LD_INT 1
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 0
70998: PUSH
70999: LD_INT 1
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 1
71008: NEG
71009: PUSH
71010: LD_INT 0
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 1
71019: NEG
71020: PUSH
71021: LD_INT 1
71023: NEG
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 1
71031: NEG
71032: PUSH
71033: LD_INT 2
71035: NEG
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 0
71043: PUSH
71044: LD_INT 2
71046: NEG
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 1
71054: PUSH
71055: LD_INT 1
71057: NEG
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 2
71065: PUSH
71066: LD_INT 0
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: LD_INT 2
71075: PUSH
71076: LD_INT 1
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 2
71085: PUSH
71086: LD_INT 2
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 1
71095: PUSH
71096: LD_INT 2
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 0
71105: PUSH
71106: LD_INT 2
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 1
71115: NEG
71116: PUSH
71117: LD_INT 1
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 2
71126: NEG
71127: PUSH
71128: LD_INT 0
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 2
71137: NEG
71138: PUSH
71139: LD_INT 1
71141: NEG
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 2
71149: NEG
71150: PUSH
71151: LD_INT 2
71153: NEG
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71180: LD_ADDR_VAR 0 58
71184: PUSH
71185: LD_INT 0
71187: PUSH
71188: LD_INT 0
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: LD_INT 1
71200: NEG
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 1
71208: PUSH
71209: LD_INT 0
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 1
71218: PUSH
71219: LD_INT 1
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 0
71228: PUSH
71229: LD_INT 1
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 1
71238: NEG
71239: PUSH
71240: LD_INT 0
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 1
71249: NEG
71250: PUSH
71251: LD_INT 1
71253: NEG
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 1
71261: NEG
71262: PUSH
71263: LD_INT 2
71265: NEG
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 0
71273: PUSH
71274: LD_INT 2
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 1
71284: PUSH
71285: LD_INT 1
71287: NEG
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 2
71295: PUSH
71296: LD_INT 0
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 2
71305: PUSH
71306: LD_INT 1
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 2
71315: PUSH
71316: LD_INT 2
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 1
71325: PUSH
71326: LD_INT 2
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 0
71335: PUSH
71336: LD_INT 2
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 1
71345: NEG
71346: PUSH
71347: LD_INT 1
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 2
71356: NEG
71357: PUSH
71358: LD_INT 0
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 2
71367: NEG
71368: PUSH
71369: LD_INT 1
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 2
71379: NEG
71380: PUSH
71381: LD_INT 2
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71410: LD_ADDR_VAR 0 59
71414: PUSH
71415: LD_INT 0
71417: PUSH
71418: LD_INT 0
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 0
71427: PUSH
71428: LD_INT 1
71430: NEG
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 1
71438: PUSH
71439: LD_INT 0
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 1
71448: PUSH
71449: LD_INT 1
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 0
71458: PUSH
71459: LD_INT 1
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 1
71468: NEG
71469: PUSH
71470: LD_INT 0
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: LD_INT 1
71479: NEG
71480: PUSH
71481: LD_INT 1
71483: NEG
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71498: LD_ADDR_VAR 0 60
71502: PUSH
71503: LD_INT 0
71505: PUSH
71506: LD_INT 0
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PUSH
71513: LD_INT 0
71515: PUSH
71516: LD_INT 1
71518: NEG
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: LD_INT 1
71526: PUSH
71527: LD_INT 0
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: PUSH
71534: LD_INT 1
71536: PUSH
71537: LD_INT 1
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: LD_INT 0
71546: PUSH
71547: LD_INT 1
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 1
71556: NEG
71557: PUSH
71558: LD_INT 0
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 1
71567: NEG
71568: PUSH
71569: LD_INT 1
71571: NEG
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71586: LD_ADDR_VAR 0 61
71590: PUSH
71591: LD_INT 0
71593: PUSH
71594: LD_INT 0
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 0
71603: PUSH
71604: LD_INT 1
71606: NEG
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 1
71614: PUSH
71615: LD_INT 0
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 1
71624: PUSH
71625: LD_INT 1
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PUSH
71632: LD_INT 0
71634: PUSH
71635: LD_INT 1
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 1
71644: NEG
71645: PUSH
71646: LD_INT 0
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 1
71655: NEG
71656: PUSH
71657: LD_INT 1
71659: NEG
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71674: LD_ADDR_VAR 0 62
71678: PUSH
71679: LD_INT 0
71681: PUSH
71682: LD_INT 0
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 0
71691: PUSH
71692: LD_INT 1
71694: NEG
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: LD_INT 1
71702: PUSH
71703: LD_INT 0
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 1
71712: PUSH
71713: LD_INT 1
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 0
71722: PUSH
71723: LD_INT 1
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 1
71732: NEG
71733: PUSH
71734: LD_INT 0
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 1
71743: NEG
71744: PUSH
71745: LD_INT 1
71747: NEG
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71762: LD_ADDR_VAR 0 63
71766: PUSH
71767: LD_INT 0
71769: PUSH
71770: LD_INT 0
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 0
71779: PUSH
71780: LD_INT 1
71782: NEG
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 1
71790: PUSH
71791: LD_INT 0
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 1
71800: PUSH
71801: LD_INT 1
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: PUSH
71808: LD_INT 0
71810: PUSH
71811: LD_INT 1
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 1
71820: NEG
71821: PUSH
71822: LD_INT 0
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 1
71831: NEG
71832: PUSH
71833: LD_INT 1
71835: NEG
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71850: LD_ADDR_VAR 0 64
71854: PUSH
71855: LD_INT 0
71857: PUSH
71858: LD_INT 0
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 0
71867: PUSH
71868: LD_INT 1
71870: NEG
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 1
71878: PUSH
71879: LD_INT 0
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 1
71888: PUSH
71889: LD_INT 1
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 0
71898: PUSH
71899: LD_INT 1
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 1
71908: NEG
71909: PUSH
71910: LD_INT 0
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 1
71919: NEG
71920: PUSH
71921: LD_INT 1
71923: NEG
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: ST_TO_ADDR
// end ; 1 :
71938: GO 77835
71940: LD_INT 1
71942: DOUBLE
71943: EQUAL
71944: IFTRUE 71948
71946: GO 74571
71948: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71949: LD_ADDR_VAR 0 11
71953: PUSH
71954: LD_INT 1
71956: NEG
71957: PUSH
71958: LD_INT 3
71960: NEG
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 0
71968: PUSH
71969: LD_INT 3
71971: NEG
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 1
71979: PUSH
71980: LD_INT 2
71982: NEG
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: LIST
71992: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71993: LD_ADDR_VAR 0 12
71997: PUSH
71998: LD_INT 2
72000: PUSH
72001: LD_INT 1
72003: NEG
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 3
72011: PUSH
72012: LD_INT 0
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 3
72021: PUSH
72022: LD_INT 1
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: LIST
72033: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72034: LD_ADDR_VAR 0 13
72038: PUSH
72039: LD_INT 3
72041: PUSH
72042: LD_INT 2
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 3
72051: PUSH
72052: LD_INT 3
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 2
72061: PUSH
72062: LD_INT 3
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: LIST
72073: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72074: LD_ADDR_VAR 0 14
72078: PUSH
72079: LD_INT 1
72081: PUSH
72082: LD_INT 3
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 0
72091: PUSH
72092: LD_INT 3
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 1
72101: NEG
72102: PUSH
72103: LD_INT 2
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: LIST
72114: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72115: LD_ADDR_VAR 0 15
72119: PUSH
72120: LD_INT 2
72122: NEG
72123: PUSH
72124: LD_INT 1
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 3
72133: NEG
72134: PUSH
72135: LD_INT 0
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 3
72144: NEG
72145: PUSH
72146: LD_INT 1
72148: NEG
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: LIST
72158: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72159: LD_ADDR_VAR 0 16
72163: PUSH
72164: LD_INT 2
72166: NEG
72167: PUSH
72168: LD_INT 3
72170: NEG
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 3
72178: NEG
72179: PUSH
72180: LD_INT 2
72182: NEG
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: LD_INT 3
72190: NEG
72191: PUSH
72192: LD_INT 3
72194: NEG
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: LIST
72204: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72205: LD_ADDR_VAR 0 17
72209: PUSH
72210: LD_INT 1
72212: NEG
72213: PUSH
72214: LD_INT 3
72216: NEG
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 0
72224: PUSH
72225: LD_INT 3
72227: NEG
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 1
72235: PUSH
72236: LD_INT 2
72238: NEG
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: LIST
72248: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72249: LD_ADDR_VAR 0 18
72253: PUSH
72254: LD_INT 2
72256: PUSH
72257: LD_INT 1
72259: NEG
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 3
72267: PUSH
72268: LD_INT 0
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 3
72277: PUSH
72278: LD_INT 1
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: LIST
72289: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72290: LD_ADDR_VAR 0 19
72294: PUSH
72295: LD_INT 3
72297: PUSH
72298: LD_INT 2
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 3
72307: PUSH
72308: LD_INT 3
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 2
72317: PUSH
72318: LD_INT 3
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: LIST
72329: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72330: LD_ADDR_VAR 0 20
72334: PUSH
72335: LD_INT 1
72337: PUSH
72338: LD_INT 3
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 0
72347: PUSH
72348: LD_INT 3
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 1
72357: NEG
72358: PUSH
72359: LD_INT 2
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: LIST
72370: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72371: LD_ADDR_VAR 0 21
72375: PUSH
72376: LD_INT 2
72378: NEG
72379: PUSH
72380: LD_INT 1
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 3
72389: NEG
72390: PUSH
72391: LD_INT 0
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 3
72400: NEG
72401: PUSH
72402: LD_INT 1
72404: NEG
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: LIST
72414: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72415: LD_ADDR_VAR 0 22
72419: PUSH
72420: LD_INT 2
72422: NEG
72423: PUSH
72424: LD_INT 3
72426: NEG
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 3
72434: NEG
72435: PUSH
72436: LD_INT 2
72438: NEG
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 3
72446: NEG
72447: PUSH
72448: LD_INT 3
72450: NEG
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: LIST
72460: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
72461: LD_ADDR_VAR 0 23
72465: PUSH
72466: LD_INT 0
72468: PUSH
72469: LD_INT 3
72471: NEG
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 1
72479: NEG
72480: PUSH
72481: LD_INT 4
72483: NEG
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PUSH
72489: LD_INT 1
72491: PUSH
72492: LD_INT 3
72494: NEG
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: LIST
72504: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
72505: LD_ADDR_VAR 0 24
72509: PUSH
72510: LD_INT 3
72512: PUSH
72513: LD_INT 0
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 3
72522: PUSH
72523: LD_INT 1
72525: NEG
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: LD_INT 4
72533: PUSH
72534: LD_INT 1
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: LIST
72545: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
72546: LD_ADDR_VAR 0 25
72550: PUSH
72551: LD_INT 3
72553: PUSH
72554: LD_INT 3
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 4
72563: PUSH
72564: LD_INT 3
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 3
72573: PUSH
72574: LD_INT 4
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: LIST
72585: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
72586: LD_ADDR_VAR 0 26
72590: PUSH
72591: LD_INT 0
72593: PUSH
72594: LD_INT 3
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 1
72603: PUSH
72604: LD_INT 4
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PUSH
72611: LD_INT 1
72613: NEG
72614: PUSH
72615: LD_INT 3
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: LIST
72626: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
72627: LD_ADDR_VAR 0 27
72631: PUSH
72632: LD_INT 3
72634: NEG
72635: PUSH
72636: LD_INT 0
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 3
72645: NEG
72646: PUSH
72647: LD_INT 1
72649: PUSH
72650: EMPTY
72651: LIST
72652: LIST
72653: PUSH
72654: LD_INT 4
72656: NEG
72657: PUSH
72658: LD_INT 1
72660: NEG
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: LIST
72670: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
72671: LD_ADDR_VAR 0 28
72675: PUSH
72676: LD_INT 3
72678: NEG
72679: PUSH
72680: LD_INT 3
72682: NEG
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 3
72690: NEG
72691: PUSH
72692: LD_INT 4
72694: NEG
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 4
72702: NEG
72703: PUSH
72704: LD_INT 3
72706: NEG
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: EMPTY
72713: LIST
72714: LIST
72715: LIST
72716: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
72717: LD_ADDR_VAR 0 29
72721: PUSH
72722: LD_INT 1
72724: NEG
72725: PUSH
72726: LD_INT 3
72728: NEG
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 0
72736: PUSH
72737: LD_INT 3
72739: NEG
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 1
72747: PUSH
72748: LD_INT 2
72750: NEG
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 1
72758: NEG
72759: PUSH
72760: LD_INT 4
72762: NEG
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: LD_INT 0
72770: PUSH
72771: LD_INT 4
72773: NEG
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 1
72781: PUSH
72782: LD_INT 3
72784: NEG
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 1
72792: NEG
72793: PUSH
72794: LD_INT 5
72796: NEG
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 0
72804: PUSH
72805: LD_INT 5
72807: NEG
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 1
72815: PUSH
72816: LD_INT 4
72818: NEG
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 1
72826: NEG
72827: PUSH
72828: LD_INT 6
72830: NEG
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 0
72838: PUSH
72839: LD_INT 6
72841: NEG
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 1
72849: PUSH
72850: LD_INT 5
72852: NEG
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
72872: LD_ADDR_VAR 0 30
72876: PUSH
72877: LD_INT 2
72879: PUSH
72880: LD_INT 1
72882: NEG
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: PUSH
72888: LD_INT 3
72890: PUSH
72891: LD_INT 0
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: PUSH
72898: LD_INT 3
72900: PUSH
72901: LD_INT 1
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: LD_INT 3
72910: PUSH
72911: LD_INT 1
72913: NEG
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: LD_INT 4
72921: PUSH
72922: LD_INT 0
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: PUSH
72929: LD_INT 4
72931: PUSH
72932: LD_INT 1
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: LD_INT 4
72941: PUSH
72942: LD_INT 1
72944: NEG
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PUSH
72950: LD_INT 5
72952: PUSH
72953: LD_INT 0
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 5
72962: PUSH
72963: LD_INT 1
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 5
72972: PUSH
72973: LD_INT 1
72975: NEG
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 6
72983: PUSH
72984: LD_INT 0
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: LD_INT 6
72993: PUSH
72994: LD_INT 1
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
73015: LD_ADDR_VAR 0 31
73019: PUSH
73020: LD_INT 3
73022: PUSH
73023: LD_INT 2
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 3
73032: PUSH
73033: LD_INT 3
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 2
73042: PUSH
73043: LD_INT 3
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 4
73052: PUSH
73053: LD_INT 3
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 4
73062: PUSH
73063: LD_INT 4
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: LD_INT 3
73072: PUSH
73073: LD_INT 4
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 5
73082: PUSH
73083: LD_INT 4
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 5
73092: PUSH
73093: LD_INT 5
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 4
73102: PUSH
73103: LD_INT 5
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: LD_INT 6
73112: PUSH
73113: LD_INT 5
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: LD_INT 6
73122: PUSH
73123: LD_INT 6
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: PUSH
73130: LD_INT 5
73132: PUSH
73133: LD_INT 6
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
73154: LD_ADDR_VAR 0 32
73158: PUSH
73159: LD_INT 1
73161: PUSH
73162: LD_INT 3
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PUSH
73169: LD_INT 0
73171: PUSH
73172: LD_INT 3
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: PUSH
73179: LD_INT 1
73181: NEG
73182: PUSH
73183: LD_INT 2
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PUSH
73190: LD_INT 1
73192: PUSH
73193: LD_INT 4
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_INT 0
73202: PUSH
73203: LD_INT 4
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 1
73212: NEG
73213: PUSH
73214: LD_INT 3
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 1
73223: PUSH
73224: LD_INT 5
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 0
73233: PUSH
73234: LD_INT 5
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 1
73243: NEG
73244: PUSH
73245: LD_INT 4
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: LD_INT 1
73254: PUSH
73255: LD_INT 6
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 0
73264: PUSH
73265: LD_INT 6
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: PUSH
73272: LD_INT 1
73274: NEG
73275: PUSH
73276: LD_INT 5
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
73297: LD_ADDR_VAR 0 33
73301: PUSH
73302: LD_INT 2
73304: NEG
73305: PUSH
73306: LD_INT 1
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: LD_INT 3
73315: NEG
73316: PUSH
73317: LD_INT 0
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: PUSH
73324: LD_INT 3
73326: NEG
73327: PUSH
73328: LD_INT 1
73330: NEG
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: PUSH
73336: LD_INT 3
73338: NEG
73339: PUSH
73340: LD_INT 1
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PUSH
73347: LD_INT 4
73349: NEG
73350: PUSH
73351: LD_INT 0
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 4
73360: NEG
73361: PUSH
73362: LD_INT 1
73364: NEG
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PUSH
73370: LD_INT 4
73372: NEG
73373: PUSH
73374: LD_INT 1
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 5
73383: NEG
73384: PUSH
73385: LD_INT 0
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: LD_INT 5
73394: NEG
73395: PUSH
73396: LD_INT 1
73398: NEG
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 5
73406: NEG
73407: PUSH
73408: LD_INT 1
73410: PUSH
73411: EMPTY
73412: LIST
73413: LIST
73414: PUSH
73415: LD_INT 6
73417: NEG
73418: PUSH
73419: LD_INT 0
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: PUSH
73426: LD_INT 6
73428: NEG
73429: PUSH
73430: LD_INT 1
73432: NEG
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
73452: LD_ADDR_VAR 0 34
73456: PUSH
73457: LD_INT 2
73459: NEG
73460: PUSH
73461: LD_INT 3
73463: NEG
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: LD_INT 3
73471: NEG
73472: PUSH
73473: LD_INT 2
73475: NEG
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 3
73483: NEG
73484: PUSH
73485: LD_INT 3
73487: NEG
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 3
73495: NEG
73496: PUSH
73497: LD_INT 4
73499: NEG
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PUSH
73505: LD_INT 4
73507: NEG
73508: PUSH
73509: LD_INT 3
73511: NEG
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: PUSH
73517: LD_INT 4
73519: NEG
73520: PUSH
73521: LD_INT 4
73523: NEG
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PUSH
73529: LD_INT 4
73531: NEG
73532: PUSH
73533: LD_INT 5
73535: NEG
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: PUSH
73541: LD_INT 5
73543: NEG
73544: PUSH
73545: LD_INT 4
73547: NEG
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: PUSH
73553: LD_INT 5
73555: NEG
73556: PUSH
73557: LD_INT 5
73559: NEG
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: PUSH
73565: LD_INT 5
73567: NEG
73568: PUSH
73569: LD_INT 6
73571: NEG
73572: PUSH
73573: EMPTY
73574: LIST
73575: LIST
73576: PUSH
73577: LD_INT 6
73579: NEG
73580: PUSH
73581: LD_INT 5
73583: NEG
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: PUSH
73589: LD_INT 6
73591: NEG
73592: PUSH
73593: LD_INT 6
73595: NEG
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: LIST
73613: LIST
73614: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
73615: LD_ADDR_VAR 0 41
73619: PUSH
73620: LD_INT 0
73622: PUSH
73623: LD_INT 2
73625: NEG
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: PUSH
73631: LD_INT 1
73633: NEG
73634: PUSH
73635: LD_INT 3
73637: NEG
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: LD_INT 1
73645: PUSH
73646: LD_INT 2
73648: NEG
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: LIST
73658: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
73659: LD_ADDR_VAR 0 42
73663: PUSH
73664: LD_INT 2
73666: PUSH
73667: LD_INT 0
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 2
73676: PUSH
73677: LD_INT 1
73679: NEG
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 3
73687: PUSH
73688: LD_INT 1
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: LIST
73699: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
73700: LD_ADDR_VAR 0 43
73704: PUSH
73705: LD_INT 2
73707: PUSH
73708: LD_INT 2
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: PUSH
73715: LD_INT 3
73717: PUSH
73718: LD_INT 2
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: PUSH
73725: LD_INT 2
73727: PUSH
73728: LD_INT 3
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: LIST
73739: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
73740: LD_ADDR_VAR 0 44
73744: PUSH
73745: LD_INT 0
73747: PUSH
73748: LD_INT 2
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 1
73757: PUSH
73758: LD_INT 3
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: LD_INT 1
73767: NEG
73768: PUSH
73769: LD_INT 2
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: LIST
73780: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73781: LD_ADDR_VAR 0 45
73785: PUSH
73786: LD_INT 2
73788: NEG
73789: PUSH
73790: LD_INT 0
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PUSH
73797: LD_INT 2
73799: NEG
73800: PUSH
73801: LD_INT 1
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: PUSH
73808: LD_INT 3
73810: NEG
73811: PUSH
73812: LD_INT 1
73814: NEG
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: LIST
73824: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
73825: LD_ADDR_VAR 0 46
73829: PUSH
73830: LD_INT 2
73832: NEG
73833: PUSH
73834: LD_INT 2
73836: NEG
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: PUSH
73842: LD_INT 2
73844: NEG
73845: PUSH
73846: LD_INT 3
73848: NEG
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 3
73856: NEG
73857: PUSH
73858: LD_INT 2
73860: NEG
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: LIST
73870: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
73871: LD_ADDR_VAR 0 47
73875: PUSH
73876: LD_INT 2
73878: NEG
73879: PUSH
73880: LD_INT 3
73882: NEG
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: PUSH
73888: LD_INT 1
73890: NEG
73891: PUSH
73892: LD_INT 3
73894: NEG
73895: PUSH
73896: EMPTY
73897: LIST
73898: LIST
73899: PUSH
73900: EMPTY
73901: LIST
73902: LIST
73903: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73904: LD_ADDR_VAR 0 48
73908: PUSH
73909: LD_INT 1
73911: PUSH
73912: LD_INT 2
73914: NEG
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 2
73922: PUSH
73923: LD_INT 1
73925: NEG
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
73935: LD_ADDR_VAR 0 49
73939: PUSH
73940: LD_INT 3
73942: PUSH
73943: LD_INT 1
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: LD_INT 3
73952: PUSH
73953: LD_INT 2
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
73964: LD_ADDR_VAR 0 50
73968: PUSH
73969: LD_INT 2
73971: PUSH
73972: LD_INT 3
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: LD_INT 1
73981: PUSH
73982: LD_INT 3
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73993: LD_ADDR_VAR 0 51
73997: PUSH
73998: LD_INT 1
74000: NEG
74001: PUSH
74002: LD_INT 2
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PUSH
74009: LD_INT 2
74011: NEG
74012: PUSH
74013: LD_INT 1
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74024: LD_ADDR_VAR 0 52
74028: PUSH
74029: LD_INT 3
74031: NEG
74032: PUSH
74033: LD_INT 1
74035: NEG
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: PUSH
74041: LD_INT 3
74043: NEG
74044: PUSH
74045: LD_INT 2
74047: NEG
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: EMPTY
74054: LIST
74055: LIST
74056: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74057: LD_ADDR_VAR 0 53
74061: PUSH
74062: LD_INT 1
74064: NEG
74065: PUSH
74066: LD_INT 3
74068: NEG
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: LD_INT 0
74076: PUSH
74077: LD_INT 3
74079: NEG
74080: PUSH
74081: EMPTY
74082: LIST
74083: LIST
74084: PUSH
74085: LD_INT 1
74087: PUSH
74088: LD_INT 2
74090: NEG
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: LIST
74100: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74101: LD_ADDR_VAR 0 54
74105: PUSH
74106: LD_INT 2
74108: PUSH
74109: LD_INT 1
74111: NEG
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 3
74119: PUSH
74120: LD_INT 0
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 3
74129: PUSH
74130: LD_INT 1
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: LIST
74141: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74142: LD_ADDR_VAR 0 55
74146: PUSH
74147: LD_INT 3
74149: PUSH
74150: LD_INT 2
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 3
74159: PUSH
74160: LD_INT 3
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: LD_INT 2
74169: PUSH
74170: LD_INT 3
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: LIST
74181: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74182: LD_ADDR_VAR 0 56
74186: PUSH
74187: LD_INT 1
74189: PUSH
74190: LD_INT 3
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PUSH
74197: LD_INT 0
74199: PUSH
74200: LD_INT 3
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PUSH
74207: LD_INT 1
74209: NEG
74210: PUSH
74211: LD_INT 2
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: LIST
74222: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74223: LD_ADDR_VAR 0 57
74227: PUSH
74228: LD_INT 2
74230: NEG
74231: PUSH
74232: LD_INT 1
74234: PUSH
74235: EMPTY
74236: LIST
74237: LIST
74238: PUSH
74239: LD_INT 3
74241: NEG
74242: PUSH
74243: LD_INT 0
74245: PUSH
74246: EMPTY
74247: LIST
74248: LIST
74249: PUSH
74250: LD_INT 3
74252: NEG
74253: PUSH
74254: LD_INT 1
74256: NEG
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: LIST
74266: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74267: LD_ADDR_VAR 0 58
74271: PUSH
74272: LD_INT 2
74274: NEG
74275: PUSH
74276: LD_INT 3
74278: NEG
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: PUSH
74284: LD_INT 3
74286: NEG
74287: PUSH
74288: LD_INT 2
74290: NEG
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: PUSH
74296: LD_INT 3
74298: NEG
74299: PUSH
74300: LD_INT 3
74302: NEG
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: LIST
74312: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
74313: LD_ADDR_VAR 0 59
74317: PUSH
74318: LD_INT 1
74320: NEG
74321: PUSH
74322: LD_INT 2
74324: NEG
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: PUSH
74330: LD_INT 0
74332: PUSH
74333: LD_INT 2
74335: NEG
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: LD_INT 1
74343: PUSH
74344: LD_INT 1
74346: NEG
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
74357: LD_ADDR_VAR 0 60
74361: PUSH
74362: LD_INT 1
74364: PUSH
74365: LD_INT 1
74367: NEG
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: PUSH
74373: LD_INT 2
74375: PUSH
74376: LD_INT 0
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: PUSH
74383: LD_INT 2
74385: PUSH
74386: LD_INT 1
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: LIST
74397: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
74398: LD_ADDR_VAR 0 61
74402: PUSH
74403: LD_INT 2
74405: PUSH
74406: LD_INT 1
74408: PUSH
74409: EMPTY
74410: LIST
74411: LIST
74412: PUSH
74413: LD_INT 2
74415: PUSH
74416: LD_INT 2
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: PUSH
74423: LD_INT 1
74425: PUSH
74426: LD_INT 2
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: PUSH
74433: EMPTY
74434: LIST
74435: LIST
74436: LIST
74437: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
74438: LD_ADDR_VAR 0 62
74442: PUSH
74443: LD_INT 1
74445: PUSH
74446: LD_INT 2
74448: PUSH
74449: EMPTY
74450: LIST
74451: LIST
74452: PUSH
74453: LD_INT 0
74455: PUSH
74456: LD_INT 2
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: PUSH
74463: LD_INT 1
74465: NEG
74466: PUSH
74467: LD_INT 1
74469: PUSH
74470: EMPTY
74471: LIST
74472: LIST
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: LIST
74478: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
74479: LD_ADDR_VAR 0 63
74483: PUSH
74484: LD_INT 1
74486: NEG
74487: PUSH
74488: LD_INT 1
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: LD_INT 2
74497: NEG
74498: PUSH
74499: LD_INT 0
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: LD_INT 2
74508: NEG
74509: PUSH
74510: LD_INT 1
74512: NEG
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: LIST
74522: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74523: LD_ADDR_VAR 0 64
74527: PUSH
74528: LD_INT 1
74530: NEG
74531: PUSH
74532: LD_INT 2
74534: NEG
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: LD_INT 2
74542: NEG
74543: PUSH
74544: LD_INT 1
74546: NEG
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: PUSH
74552: LD_INT 2
74554: NEG
74555: PUSH
74556: LD_INT 2
74558: NEG
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: LIST
74568: ST_TO_ADDR
// end ; 2 :
74569: GO 77835
74571: LD_INT 2
74573: DOUBLE
74574: EQUAL
74575: IFTRUE 74579
74577: GO 77834
74579: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
74580: LD_ADDR_VAR 0 29
74584: PUSH
74585: LD_INT 4
74587: PUSH
74588: LD_INT 0
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: LD_INT 4
74597: PUSH
74598: LD_INT 1
74600: NEG
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PUSH
74606: LD_INT 5
74608: PUSH
74609: LD_INT 0
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: PUSH
74616: LD_INT 5
74618: PUSH
74619: LD_INT 1
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: PUSH
74626: LD_INT 4
74628: PUSH
74629: LD_INT 1
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: PUSH
74636: LD_INT 3
74638: PUSH
74639: LD_INT 0
74641: PUSH
74642: EMPTY
74643: LIST
74644: LIST
74645: PUSH
74646: LD_INT 3
74648: PUSH
74649: LD_INT 1
74651: NEG
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: PUSH
74657: LD_INT 3
74659: PUSH
74660: LD_INT 2
74662: NEG
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: PUSH
74668: LD_INT 5
74670: PUSH
74671: LD_INT 2
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: PUSH
74678: LD_INT 3
74680: PUSH
74681: LD_INT 3
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: PUSH
74688: LD_INT 3
74690: PUSH
74691: LD_INT 2
74693: PUSH
74694: EMPTY
74695: LIST
74696: LIST
74697: PUSH
74698: LD_INT 4
74700: PUSH
74701: LD_INT 3
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: PUSH
74708: LD_INT 4
74710: PUSH
74711: LD_INT 4
74713: PUSH
74714: EMPTY
74715: LIST
74716: LIST
74717: PUSH
74718: LD_INT 3
74720: PUSH
74721: LD_INT 4
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: PUSH
74728: LD_INT 2
74730: PUSH
74731: LD_INT 3
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: LD_INT 2
74740: PUSH
74741: LD_INT 2
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: LD_INT 4
74750: PUSH
74751: LD_INT 2
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: PUSH
74758: LD_INT 2
74760: PUSH
74761: LD_INT 4
74763: PUSH
74764: EMPTY
74765: LIST
74766: LIST
74767: PUSH
74768: LD_INT 0
74770: PUSH
74771: LD_INT 4
74773: PUSH
74774: EMPTY
74775: LIST
74776: LIST
74777: PUSH
74778: LD_INT 0
74780: PUSH
74781: LD_INT 3
74783: PUSH
74784: EMPTY
74785: LIST
74786: LIST
74787: PUSH
74788: LD_INT 1
74790: PUSH
74791: LD_INT 4
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: PUSH
74798: LD_INT 1
74800: PUSH
74801: LD_INT 5
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: PUSH
74808: LD_INT 0
74810: PUSH
74811: LD_INT 5
74813: PUSH
74814: EMPTY
74815: LIST
74816: LIST
74817: PUSH
74818: LD_INT 1
74820: NEG
74821: PUSH
74822: LD_INT 4
74824: PUSH
74825: EMPTY
74826: LIST
74827: LIST
74828: PUSH
74829: LD_INT 1
74831: NEG
74832: PUSH
74833: LD_INT 3
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: PUSH
74840: LD_INT 2
74842: PUSH
74843: LD_INT 5
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: LD_INT 2
74852: NEG
74853: PUSH
74854: LD_INT 3
74856: PUSH
74857: EMPTY
74858: LIST
74859: LIST
74860: PUSH
74861: LD_INT 3
74863: NEG
74864: PUSH
74865: LD_INT 0
74867: PUSH
74868: EMPTY
74869: LIST
74870: LIST
74871: PUSH
74872: LD_INT 3
74874: NEG
74875: PUSH
74876: LD_INT 1
74878: NEG
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: PUSH
74884: LD_INT 2
74886: NEG
74887: PUSH
74888: LD_INT 0
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: PUSH
74895: LD_INT 2
74897: NEG
74898: PUSH
74899: LD_INT 1
74901: PUSH
74902: EMPTY
74903: LIST
74904: LIST
74905: PUSH
74906: LD_INT 3
74908: NEG
74909: PUSH
74910: LD_INT 1
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: PUSH
74917: LD_INT 4
74919: NEG
74920: PUSH
74921: LD_INT 0
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: PUSH
74928: LD_INT 4
74930: NEG
74931: PUSH
74932: LD_INT 1
74934: NEG
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: PUSH
74940: LD_INT 4
74942: NEG
74943: PUSH
74944: LD_INT 2
74946: NEG
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: PUSH
74952: LD_INT 2
74954: NEG
74955: PUSH
74956: LD_INT 2
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: PUSH
74963: LD_INT 4
74965: NEG
74966: PUSH
74967: LD_INT 4
74969: NEG
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 4
74977: NEG
74978: PUSH
74979: LD_INT 5
74981: NEG
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: LD_INT 3
74989: NEG
74990: PUSH
74991: LD_INT 4
74993: NEG
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: PUSH
74999: LD_INT 3
75001: NEG
75002: PUSH
75003: LD_INT 3
75005: NEG
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PUSH
75011: LD_INT 4
75013: NEG
75014: PUSH
75015: LD_INT 3
75017: NEG
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: PUSH
75023: LD_INT 5
75025: NEG
75026: PUSH
75027: LD_INT 4
75029: NEG
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: PUSH
75035: LD_INT 5
75037: NEG
75038: PUSH
75039: LD_INT 5
75041: NEG
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: PUSH
75047: LD_INT 3
75049: NEG
75050: PUSH
75051: LD_INT 5
75053: NEG
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: PUSH
75059: LD_INT 5
75061: NEG
75062: PUSH
75063: LD_INT 3
75065: NEG
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: LIST
75084: LIST
75085: LIST
75086: LIST
75087: LIST
75088: LIST
75089: LIST
75090: LIST
75091: LIST
75092: LIST
75093: LIST
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: LIST
75102: LIST
75103: LIST
75104: LIST
75105: LIST
75106: LIST
75107: LIST
75108: LIST
75109: LIST
75110: LIST
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
75118: LD_ADDR_VAR 0 30
75122: PUSH
75123: LD_INT 4
75125: PUSH
75126: LD_INT 4
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: PUSH
75133: LD_INT 4
75135: PUSH
75136: LD_INT 3
75138: PUSH
75139: EMPTY
75140: LIST
75141: LIST
75142: PUSH
75143: LD_INT 5
75145: PUSH
75146: LD_INT 4
75148: PUSH
75149: EMPTY
75150: LIST
75151: LIST
75152: PUSH
75153: LD_INT 5
75155: PUSH
75156: LD_INT 5
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: PUSH
75163: LD_INT 4
75165: PUSH
75166: LD_INT 5
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: PUSH
75173: LD_INT 3
75175: PUSH
75176: LD_INT 4
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: PUSH
75183: LD_INT 3
75185: PUSH
75186: LD_INT 3
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: PUSH
75193: LD_INT 5
75195: PUSH
75196: LD_INT 3
75198: PUSH
75199: EMPTY
75200: LIST
75201: LIST
75202: PUSH
75203: LD_INT 3
75205: PUSH
75206: LD_INT 5
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: PUSH
75213: LD_INT 0
75215: PUSH
75216: LD_INT 3
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: PUSH
75223: LD_INT 0
75225: PUSH
75226: LD_INT 2
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_INT 1
75235: PUSH
75236: LD_INT 3
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: LD_INT 1
75245: PUSH
75246: LD_INT 4
75248: PUSH
75249: EMPTY
75250: LIST
75251: LIST
75252: PUSH
75253: LD_INT 0
75255: PUSH
75256: LD_INT 4
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: PUSH
75263: LD_INT 1
75265: NEG
75266: PUSH
75267: LD_INT 3
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: PUSH
75274: LD_INT 1
75276: NEG
75277: PUSH
75278: LD_INT 2
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: PUSH
75285: LD_INT 2
75287: PUSH
75288: LD_INT 4
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 2
75297: NEG
75298: PUSH
75299: LD_INT 2
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: PUSH
75306: LD_INT 4
75308: NEG
75309: PUSH
75310: LD_INT 0
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: PUSH
75317: LD_INT 4
75319: NEG
75320: PUSH
75321: LD_INT 1
75323: NEG
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: PUSH
75329: LD_INT 3
75331: NEG
75332: PUSH
75333: LD_INT 0
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: PUSH
75340: LD_INT 3
75342: NEG
75343: PUSH
75344: LD_INT 1
75346: PUSH
75347: EMPTY
75348: LIST
75349: LIST
75350: PUSH
75351: LD_INT 4
75353: NEG
75354: PUSH
75355: LD_INT 1
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: PUSH
75362: LD_INT 5
75364: NEG
75365: PUSH
75366: LD_INT 0
75368: PUSH
75369: EMPTY
75370: LIST
75371: LIST
75372: PUSH
75373: LD_INT 5
75375: NEG
75376: PUSH
75377: LD_INT 1
75379: NEG
75380: PUSH
75381: EMPTY
75382: LIST
75383: LIST
75384: PUSH
75385: LD_INT 5
75387: NEG
75388: PUSH
75389: LD_INT 2
75391: NEG
75392: PUSH
75393: EMPTY
75394: LIST
75395: LIST
75396: PUSH
75397: LD_INT 3
75399: NEG
75400: PUSH
75401: LD_INT 2
75403: PUSH
75404: EMPTY
75405: LIST
75406: LIST
75407: PUSH
75408: LD_INT 3
75410: NEG
75411: PUSH
75412: LD_INT 3
75414: NEG
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: PUSH
75420: LD_INT 3
75422: NEG
75423: PUSH
75424: LD_INT 4
75426: NEG
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: PUSH
75432: LD_INT 2
75434: NEG
75435: PUSH
75436: LD_INT 3
75438: NEG
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PUSH
75444: LD_INT 2
75446: NEG
75447: PUSH
75448: LD_INT 2
75450: NEG
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: PUSH
75456: LD_INT 3
75458: NEG
75459: PUSH
75460: LD_INT 2
75462: NEG
75463: PUSH
75464: EMPTY
75465: LIST
75466: LIST
75467: PUSH
75468: LD_INT 4
75470: NEG
75471: PUSH
75472: LD_INT 3
75474: NEG
75475: PUSH
75476: EMPTY
75477: LIST
75478: LIST
75479: PUSH
75480: LD_INT 4
75482: NEG
75483: PUSH
75484: LD_INT 4
75486: NEG
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: PUSH
75492: LD_INT 2
75494: NEG
75495: PUSH
75496: LD_INT 4
75498: NEG
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: PUSH
75504: LD_INT 4
75506: NEG
75507: PUSH
75508: LD_INT 2
75510: NEG
75511: PUSH
75512: EMPTY
75513: LIST
75514: LIST
75515: PUSH
75516: LD_INT 0
75518: PUSH
75519: LD_INT 4
75521: NEG
75522: PUSH
75523: EMPTY
75524: LIST
75525: LIST
75526: PUSH
75527: LD_INT 0
75529: PUSH
75530: LD_INT 5
75532: NEG
75533: PUSH
75534: EMPTY
75535: LIST
75536: LIST
75537: PUSH
75538: LD_INT 1
75540: PUSH
75541: LD_INT 4
75543: NEG
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: PUSH
75549: LD_INT 1
75551: PUSH
75552: LD_INT 3
75554: NEG
75555: PUSH
75556: EMPTY
75557: LIST
75558: LIST
75559: PUSH
75560: LD_INT 0
75562: PUSH
75563: LD_INT 3
75565: NEG
75566: PUSH
75567: EMPTY
75568: LIST
75569: LIST
75570: PUSH
75571: LD_INT 1
75573: NEG
75574: PUSH
75575: LD_INT 4
75577: NEG
75578: PUSH
75579: EMPTY
75580: LIST
75581: LIST
75582: PUSH
75583: LD_INT 1
75585: NEG
75586: PUSH
75587: LD_INT 5
75589: NEG
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: LD_INT 2
75597: PUSH
75598: LD_INT 3
75600: NEG
75601: PUSH
75602: EMPTY
75603: LIST
75604: LIST
75605: PUSH
75606: LD_INT 2
75608: NEG
75609: PUSH
75610: LD_INT 5
75612: NEG
75613: PUSH
75614: EMPTY
75615: LIST
75616: LIST
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: LIST
75622: LIST
75623: LIST
75624: LIST
75625: LIST
75626: LIST
75627: LIST
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: LIST
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: LIST
75652: LIST
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: LIST
75662: LIST
75663: LIST
75664: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
75665: LD_ADDR_VAR 0 31
75669: PUSH
75670: LD_INT 0
75672: PUSH
75673: LD_INT 4
75675: PUSH
75676: EMPTY
75677: LIST
75678: LIST
75679: PUSH
75680: LD_INT 0
75682: PUSH
75683: LD_INT 3
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: PUSH
75690: LD_INT 1
75692: PUSH
75693: LD_INT 4
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PUSH
75700: LD_INT 1
75702: PUSH
75703: LD_INT 5
75705: PUSH
75706: EMPTY
75707: LIST
75708: LIST
75709: PUSH
75710: LD_INT 0
75712: PUSH
75713: LD_INT 5
75715: PUSH
75716: EMPTY
75717: LIST
75718: LIST
75719: PUSH
75720: LD_INT 1
75722: NEG
75723: PUSH
75724: LD_INT 4
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: PUSH
75731: LD_INT 1
75733: NEG
75734: PUSH
75735: LD_INT 3
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: PUSH
75742: LD_INT 2
75744: PUSH
75745: LD_INT 5
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: PUSH
75752: LD_INT 2
75754: NEG
75755: PUSH
75756: LD_INT 3
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: LD_INT 3
75765: NEG
75766: PUSH
75767: LD_INT 0
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: PUSH
75774: LD_INT 3
75776: NEG
75777: PUSH
75778: LD_INT 1
75780: NEG
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: PUSH
75786: LD_INT 2
75788: NEG
75789: PUSH
75790: LD_INT 0
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: PUSH
75797: LD_INT 2
75799: NEG
75800: PUSH
75801: LD_INT 1
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: PUSH
75808: LD_INT 3
75810: NEG
75811: PUSH
75812: LD_INT 1
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: PUSH
75819: LD_INT 4
75821: NEG
75822: PUSH
75823: LD_INT 0
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: PUSH
75830: LD_INT 4
75832: NEG
75833: PUSH
75834: LD_INT 1
75836: NEG
75837: PUSH
75838: EMPTY
75839: LIST
75840: LIST
75841: PUSH
75842: LD_INT 4
75844: NEG
75845: PUSH
75846: LD_INT 2
75848: NEG
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: PUSH
75854: LD_INT 2
75856: NEG
75857: PUSH
75858: LD_INT 2
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: PUSH
75865: LD_INT 4
75867: NEG
75868: PUSH
75869: LD_INT 4
75871: NEG
75872: PUSH
75873: EMPTY
75874: LIST
75875: LIST
75876: PUSH
75877: LD_INT 4
75879: NEG
75880: PUSH
75881: LD_INT 5
75883: NEG
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: PUSH
75889: LD_INT 3
75891: NEG
75892: PUSH
75893: LD_INT 4
75895: NEG
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: LD_INT 3
75903: NEG
75904: PUSH
75905: LD_INT 3
75907: NEG
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PUSH
75913: LD_INT 4
75915: NEG
75916: PUSH
75917: LD_INT 3
75919: NEG
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: PUSH
75925: LD_INT 5
75927: NEG
75928: PUSH
75929: LD_INT 4
75931: NEG
75932: PUSH
75933: EMPTY
75934: LIST
75935: LIST
75936: PUSH
75937: LD_INT 5
75939: NEG
75940: PUSH
75941: LD_INT 5
75943: NEG
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: PUSH
75949: LD_INT 3
75951: NEG
75952: PUSH
75953: LD_INT 5
75955: NEG
75956: PUSH
75957: EMPTY
75958: LIST
75959: LIST
75960: PUSH
75961: LD_INT 5
75963: NEG
75964: PUSH
75965: LD_INT 3
75967: NEG
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: PUSH
75973: LD_INT 0
75975: PUSH
75976: LD_INT 3
75978: NEG
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: PUSH
75984: LD_INT 0
75986: PUSH
75987: LD_INT 4
75989: NEG
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: PUSH
75995: LD_INT 1
75997: PUSH
75998: LD_INT 3
76000: NEG
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: PUSH
76006: LD_INT 1
76008: PUSH
76009: LD_INT 2
76011: NEG
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: PUSH
76017: LD_INT 0
76019: PUSH
76020: LD_INT 2
76022: NEG
76023: PUSH
76024: EMPTY
76025: LIST
76026: LIST
76027: PUSH
76028: LD_INT 1
76030: NEG
76031: PUSH
76032: LD_INT 3
76034: NEG
76035: PUSH
76036: EMPTY
76037: LIST
76038: LIST
76039: PUSH
76040: LD_INT 1
76042: NEG
76043: PUSH
76044: LD_INT 4
76046: NEG
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: PUSH
76052: LD_INT 2
76054: PUSH
76055: LD_INT 2
76057: NEG
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: PUSH
76063: LD_INT 2
76065: NEG
76066: PUSH
76067: LD_INT 4
76069: NEG
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: PUSH
76075: LD_INT 4
76077: PUSH
76078: LD_INT 0
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: LD_INT 4
76087: PUSH
76088: LD_INT 1
76090: NEG
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: PUSH
76096: LD_INT 5
76098: PUSH
76099: LD_INT 0
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: LD_INT 5
76108: PUSH
76109: LD_INT 1
76111: PUSH
76112: EMPTY
76113: LIST
76114: LIST
76115: PUSH
76116: LD_INT 4
76118: PUSH
76119: LD_INT 1
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PUSH
76126: LD_INT 3
76128: PUSH
76129: LD_INT 0
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: PUSH
76136: LD_INT 3
76138: PUSH
76139: LD_INT 1
76141: NEG
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PUSH
76147: LD_INT 3
76149: PUSH
76150: LD_INT 2
76152: NEG
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: PUSH
76158: LD_INT 5
76160: PUSH
76161: LD_INT 2
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: EMPTY
76169: LIST
76170: LIST
76171: LIST
76172: LIST
76173: LIST
76174: LIST
76175: LIST
76176: LIST
76177: LIST
76178: LIST
76179: LIST
76180: LIST
76181: LIST
76182: LIST
76183: LIST
76184: LIST
76185: LIST
76186: LIST
76187: LIST
76188: LIST
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: LIST
76205: LIST
76206: LIST
76207: LIST
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
76215: LD_ADDR_VAR 0 32
76219: PUSH
76220: LD_INT 4
76222: NEG
76223: PUSH
76224: LD_INT 0
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: PUSH
76231: LD_INT 4
76233: NEG
76234: PUSH
76235: LD_INT 1
76237: NEG
76238: PUSH
76239: EMPTY
76240: LIST
76241: LIST
76242: PUSH
76243: LD_INT 3
76245: NEG
76246: PUSH
76247: LD_INT 0
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: PUSH
76254: LD_INT 3
76256: NEG
76257: PUSH
76258: LD_INT 1
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: PUSH
76265: LD_INT 4
76267: NEG
76268: PUSH
76269: LD_INT 1
76271: PUSH
76272: EMPTY
76273: LIST
76274: LIST
76275: PUSH
76276: LD_INT 5
76278: NEG
76279: PUSH
76280: LD_INT 0
76282: PUSH
76283: EMPTY
76284: LIST
76285: LIST
76286: PUSH
76287: LD_INT 5
76289: NEG
76290: PUSH
76291: LD_INT 1
76293: NEG
76294: PUSH
76295: EMPTY
76296: LIST
76297: LIST
76298: PUSH
76299: LD_INT 5
76301: NEG
76302: PUSH
76303: LD_INT 2
76305: NEG
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: PUSH
76311: LD_INT 3
76313: NEG
76314: PUSH
76315: LD_INT 2
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: PUSH
76322: LD_INT 3
76324: NEG
76325: PUSH
76326: LD_INT 3
76328: NEG
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: PUSH
76334: LD_INT 3
76336: NEG
76337: PUSH
76338: LD_INT 4
76340: NEG
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PUSH
76346: LD_INT 2
76348: NEG
76349: PUSH
76350: LD_INT 3
76352: NEG
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: PUSH
76358: LD_INT 2
76360: NEG
76361: PUSH
76362: LD_INT 2
76364: NEG
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: PUSH
76370: LD_INT 3
76372: NEG
76373: PUSH
76374: LD_INT 2
76376: NEG
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: PUSH
76382: LD_INT 4
76384: NEG
76385: PUSH
76386: LD_INT 3
76388: NEG
76389: PUSH
76390: EMPTY
76391: LIST
76392: LIST
76393: PUSH
76394: LD_INT 4
76396: NEG
76397: PUSH
76398: LD_INT 4
76400: NEG
76401: PUSH
76402: EMPTY
76403: LIST
76404: LIST
76405: PUSH
76406: LD_INT 2
76408: NEG
76409: PUSH
76410: LD_INT 4
76412: NEG
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: PUSH
76418: LD_INT 4
76420: NEG
76421: PUSH
76422: LD_INT 2
76424: NEG
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PUSH
76430: LD_INT 0
76432: PUSH
76433: LD_INT 4
76435: NEG
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PUSH
76441: LD_INT 0
76443: PUSH
76444: LD_INT 5
76446: NEG
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: PUSH
76452: LD_INT 1
76454: PUSH
76455: LD_INT 4
76457: NEG
76458: PUSH
76459: EMPTY
76460: LIST
76461: LIST
76462: PUSH
76463: LD_INT 1
76465: PUSH
76466: LD_INT 3
76468: NEG
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: PUSH
76474: LD_INT 0
76476: PUSH
76477: LD_INT 3
76479: NEG
76480: PUSH
76481: EMPTY
76482: LIST
76483: LIST
76484: PUSH
76485: LD_INT 1
76487: NEG
76488: PUSH
76489: LD_INT 4
76491: NEG
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: PUSH
76497: LD_INT 1
76499: NEG
76500: PUSH
76501: LD_INT 5
76503: NEG
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: PUSH
76509: LD_INT 2
76511: PUSH
76512: LD_INT 3
76514: NEG
76515: PUSH
76516: EMPTY
76517: LIST
76518: LIST
76519: PUSH
76520: LD_INT 2
76522: NEG
76523: PUSH
76524: LD_INT 5
76526: NEG
76527: PUSH
76528: EMPTY
76529: LIST
76530: LIST
76531: PUSH
76532: LD_INT 3
76534: PUSH
76535: LD_INT 0
76537: PUSH
76538: EMPTY
76539: LIST
76540: LIST
76541: PUSH
76542: LD_INT 3
76544: PUSH
76545: LD_INT 1
76547: NEG
76548: PUSH
76549: EMPTY
76550: LIST
76551: LIST
76552: PUSH
76553: LD_INT 4
76555: PUSH
76556: LD_INT 0
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: PUSH
76563: LD_INT 4
76565: PUSH
76566: LD_INT 1
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: PUSH
76573: LD_INT 3
76575: PUSH
76576: LD_INT 1
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: PUSH
76583: LD_INT 2
76585: PUSH
76586: LD_INT 0
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PUSH
76593: LD_INT 2
76595: PUSH
76596: LD_INT 1
76598: NEG
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: PUSH
76604: LD_INT 2
76606: PUSH
76607: LD_INT 2
76609: NEG
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: PUSH
76615: LD_INT 4
76617: PUSH
76618: LD_INT 2
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 4
76627: PUSH
76628: LD_INT 4
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: PUSH
76635: LD_INT 4
76637: PUSH
76638: LD_INT 3
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: PUSH
76645: LD_INT 5
76647: PUSH
76648: LD_INT 4
76650: PUSH
76651: EMPTY
76652: LIST
76653: LIST
76654: PUSH
76655: LD_INT 5
76657: PUSH
76658: LD_INT 5
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: PUSH
76665: LD_INT 4
76667: PUSH
76668: LD_INT 5
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: PUSH
76675: LD_INT 3
76677: PUSH
76678: LD_INT 4
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: PUSH
76685: LD_INT 3
76687: PUSH
76688: LD_INT 3
76690: PUSH
76691: EMPTY
76692: LIST
76693: LIST
76694: PUSH
76695: LD_INT 5
76697: PUSH
76698: LD_INT 3
76700: PUSH
76701: EMPTY
76702: LIST
76703: LIST
76704: PUSH
76705: LD_INT 3
76707: PUSH
76708: LD_INT 5
76710: PUSH
76711: EMPTY
76712: LIST
76713: LIST
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: LIST
76719: LIST
76720: LIST
76721: LIST
76722: LIST
76723: LIST
76724: LIST
76725: LIST
76726: LIST
76727: LIST
76728: LIST
76729: LIST
76730: LIST
76731: LIST
76732: LIST
76733: LIST
76734: LIST
76735: LIST
76736: LIST
76737: LIST
76738: LIST
76739: LIST
76740: LIST
76741: LIST
76742: LIST
76743: LIST
76744: LIST
76745: LIST
76746: LIST
76747: LIST
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: LIST
76760: LIST
76761: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
76762: LD_ADDR_VAR 0 33
76766: PUSH
76767: LD_INT 4
76769: NEG
76770: PUSH
76771: LD_INT 4
76773: NEG
76774: PUSH
76775: EMPTY
76776: LIST
76777: LIST
76778: PUSH
76779: LD_INT 4
76781: NEG
76782: PUSH
76783: LD_INT 5
76785: NEG
76786: PUSH
76787: EMPTY
76788: LIST
76789: LIST
76790: PUSH
76791: LD_INT 3
76793: NEG
76794: PUSH
76795: LD_INT 4
76797: NEG
76798: PUSH
76799: EMPTY
76800: LIST
76801: LIST
76802: PUSH
76803: LD_INT 3
76805: NEG
76806: PUSH
76807: LD_INT 3
76809: NEG
76810: PUSH
76811: EMPTY
76812: LIST
76813: LIST
76814: PUSH
76815: LD_INT 4
76817: NEG
76818: PUSH
76819: LD_INT 3
76821: NEG
76822: PUSH
76823: EMPTY
76824: LIST
76825: LIST
76826: PUSH
76827: LD_INT 5
76829: NEG
76830: PUSH
76831: LD_INT 4
76833: NEG
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: PUSH
76839: LD_INT 5
76841: NEG
76842: PUSH
76843: LD_INT 5
76845: NEG
76846: PUSH
76847: EMPTY
76848: LIST
76849: LIST
76850: PUSH
76851: LD_INT 3
76853: NEG
76854: PUSH
76855: LD_INT 5
76857: NEG
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PUSH
76863: LD_INT 5
76865: NEG
76866: PUSH
76867: LD_INT 3
76869: NEG
76870: PUSH
76871: EMPTY
76872: LIST
76873: LIST
76874: PUSH
76875: LD_INT 0
76877: PUSH
76878: LD_INT 3
76880: NEG
76881: PUSH
76882: EMPTY
76883: LIST
76884: LIST
76885: PUSH
76886: LD_INT 0
76888: PUSH
76889: LD_INT 4
76891: NEG
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 1
76899: PUSH
76900: LD_INT 3
76902: NEG
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PUSH
76908: LD_INT 1
76910: PUSH
76911: LD_INT 2
76913: NEG
76914: PUSH
76915: EMPTY
76916: LIST
76917: LIST
76918: PUSH
76919: LD_INT 0
76921: PUSH
76922: LD_INT 2
76924: NEG
76925: PUSH
76926: EMPTY
76927: LIST
76928: LIST
76929: PUSH
76930: LD_INT 1
76932: NEG
76933: PUSH
76934: LD_INT 3
76936: NEG
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: PUSH
76942: LD_INT 1
76944: NEG
76945: PUSH
76946: LD_INT 4
76948: NEG
76949: PUSH
76950: EMPTY
76951: LIST
76952: LIST
76953: PUSH
76954: LD_INT 2
76956: PUSH
76957: LD_INT 2
76959: NEG
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: PUSH
76965: LD_INT 2
76967: NEG
76968: PUSH
76969: LD_INT 4
76971: NEG
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: PUSH
76977: LD_INT 4
76979: PUSH
76980: LD_INT 0
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: PUSH
76987: LD_INT 4
76989: PUSH
76990: LD_INT 1
76992: NEG
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: PUSH
76998: LD_INT 5
77000: PUSH
77001: LD_INT 0
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: PUSH
77008: LD_INT 5
77010: PUSH
77011: LD_INT 1
77013: PUSH
77014: EMPTY
77015: LIST
77016: LIST
77017: PUSH
77018: LD_INT 4
77020: PUSH
77021: LD_INT 1
77023: PUSH
77024: EMPTY
77025: LIST
77026: LIST
77027: PUSH
77028: LD_INT 3
77030: PUSH
77031: LD_INT 0
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: PUSH
77038: LD_INT 3
77040: PUSH
77041: LD_INT 1
77043: NEG
77044: PUSH
77045: EMPTY
77046: LIST
77047: LIST
77048: PUSH
77049: LD_INT 3
77051: PUSH
77052: LD_INT 2
77054: NEG
77055: PUSH
77056: EMPTY
77057: LIST
77058: LIST
77059: PUSH
77060: LD_INT 5
77062: PUSH
77063: LD_INT 2
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: PUSH
77070: LD_INT 3
77072: PUSH
77073: LD_INT 3
77075: PUSH
77076: EMPTY
77077: LIST
77078: LIST
77079: PUSH
77080: LD_INT 3
77082: PUSH
77083: LD_INT 2
77085: PUSH
77086: EMPTY
77087: LIST
77088: LIST
77089: PUSH
77090: LD_INT 4
77092: PUSH
77093: LD_INT 3
77095: PUSH
77096: EMPTY
77097: LIST
77098: LIST
77099: PUSH
77100: LD_INT 4
77102: PUSH
77103: LD_INT 4
77105: PUSH
77106: EMPTY
77107: LIST
77108: LIST
77109: PUSH
77110: LD_INT 3
77112: PUSH
77113: LD_INT 4
77115: PUSH
77116: EMPTY
77117: LIST
77118: LIST
77119: PUSH
77120: LD_INT 2
77122: PUSH
77123: LD_INT 3
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PUSH
77130: LD_INT 2
77132: PUSH
77133: LD_INT 2
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: PUSH
77140: LD_INT 4
77142: PUSH
77143: LD_INT 2
77145: PUSH
77146: EMPTY
77147: LIST
77148: LIST
77149: PUSH
77150: LD_INT 2
77152: PUSH
77153: LD_INT 4
77155: PUSH
77156: EMPTY
77157: LIST
77158: LIST
77159: PUSH
77160: LD_INT 0
77162: PUSH
77163: LD_INT 4
77165: PUSH
77166: EMPTY
77167: LIST
77168: LIST
77169: PUSH
77170: LD_INT 0
77172: PUSH
77173: LD_INT 3
77175: PUSH
77176: EMPTY
77177: LIST
77178: LIST
77179: PUSH
77180: LD_INT 1
77182: PUSH
77183: LD_INT 4
77185: PUSH
77186: EMPTY
77187: LIST
77188: LIST
77189: PUSH
77190: LD_INT 1
77192: PUSH
77193: LD_INT 5
77195: PUSH
77196: EMPTY
77197: LIST
77198: LIST
77199: PUSH
77200: LD_INT 0
77202: PUSH
77203: LD_INT 5
77205: PUSH
77206: EMPTY
77207: LIST
77208: LIST
77209: PUSH
77210: LD_INT 1
77212: NEG
77213: PUSH
77214: LD_INT 4
77216: PUSH
77217: EMPTY
77218: LIST
77219: LIST
77220: PUSH
77221: LD_INT 1
77223: NEG
77224: PUSH
77225: LD_INT 3
77227: PUSH
77228: EMPTY
77229: LIST
77230: LIST
77231: PUSH
77232: LD_INT 2
77234: PUSH
77235: LD_INT 5
77237: PUSH
77238: EMPTY
77239: LIST
77240: LIST
77241: PUSH
77242: LD_INT 2
77244: NEG
77245: PUSH
77246: LD_INT 3
77248: PUSH
77249: EMPTY
77250: LIST
77251: LIST
77252: PUSH
77253: EMPTY
77254: LIST
77255: LIST
77256: LIST
77257: LIST
77258: LIST
77259: LIST
77260: LIST
77261: LIST
77262: LIST
77263: LIST
77264: LIST
77265: LIST
77266: LIST
77267: LIST
77268: LIST
77269: LIST
77270: LIST
77271: LIST
77272: LIST
77273: LIST
77274: LIST
77275: LIST
77276: LIST
77277: LIST
77278: LIST
77279: LIST
77280: LIST
77281: LIST
77282: LIST
77283: LIST
77284: LIST
77285: LIST
77286: LIST
77287: LIST
77288: LIST
77289: LIST
77290: LIST
77291: LIST
77292: LIST
77293: LIST
77294: LIST
77295: LIST
77296: LIST
77297: LIST
77298: LIST
77299: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
77300: LD_ADDR_VAR 0 34
77304: PUSH
77305: LD_INT 0
77307: PUSH
77308: LD_INT 4
77310: NEG
77311: PUSH
77312: EMPTY
77313: LIST
77314: LIST
77315: PUSH
77316: LD_INT 0
77318: PUSH
77319: LD_INT 5
77321: NEG
77322: PUSH
77323: EMPTY
77324: LIST
77325: LIST
77326: PUSH
77327: LD_INT 1
77329: PUSH
77330: LD_INT 4
77332: NEG
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: PUSH
77338: LD_INT 1
77340: PUSH
77341: LD_INT 3
77343: NEG
77344: PUSH
77345: EMPTY
77346: LIST
77347: LIST
77348: PUSH
77349: LD_INT 0
77351: PUSH
77352: LD_INT 3
77354: NEG
77355: PUSH
77356: EMPTY
77357: LIST
77358: LIST
77359: PUSH
77360: LD_INT 1
77362: NEG
77363: PUSH
77364: LD_INT 4
77366: NEG
77367: PUSH
77368: EMPTY
77369: LIST
77370: LIST
77371: PUSH
77372: LD_INT 1
77374: NEG
77375: PUSH
77376: LD_INT 5
77378: NEG
77379: PUSH
77380: EMPTY
77381: LIST
77382: LIST
77383: PUSH
77384: LD_INT 2
77386: PUSH
77387: LD_INT 3
77389: NEG
77390: PUSH
77391: EMPTY
77392: LIST
77393: LIST
77394: PUSH
77395: LD_INT 2
77397: NEG
77398: PUSH
77399: LD_INT 5
77401: NEG
77402: PUSH
77403: EMPTY
77404: LIST
77405: LIST
77406: PUSH
77407: LD_INT 3
77409: PUSH
77410: LD_INT 0
77412: PUSH
77413: EMPTY
77414: LIST
77415: LIST
77416: PUSH
77417: LD_INT 3
77419: PUSH
77420: LD_INT 1
77422: NEG
77423: PUSH
77424: EMPTY
77425: LIST
77426: LIST
77427: PUSH
77428: LD_INT 4
77430: PUSH
77431: LD_INT 0
77433: PUSH
77434: EMPTY
77435: LIST
77436: LIST
77437: PUSH
77438: LD_INT 4
77440: PUSH
77441: LD_INT 1
77443: PUSH
77444: EMPTY
77445: LIST
77446: LIST
77447: PUSH
77448: LD_INT 3
77450: PUSH
77451: LD_INT 1
77453: PUSH
77454: EMPTY
77455: LIST
77456: LIST
77457: PUSH
77458: LD_INT 2
77460: PUSH
77461: LD_INT 0
77463: PUSH
77464: EMPTY
77465: LIST
77466: LIST
77467: PUSH
77468: LD_INT 2
77470: PUSH
77471: LD_INT 1
77473: NEG
77474: PUSH
77475: EMPTY
77476: LIST
77477: LIST
77478: PUSH
77479: LD_INT 2
77481: PUSH
77482: LD_INT 2
77484: NEG
77485: PUSH
77486: EMPTY
77487: LIST
77488: LIST
77489: PUSH
77490: LD_INT 4
77492: PUSH
77493: LD_INT 2
77495: PUSH
77496: EMPTY
77497: LIST
77498: LIST
77499: PUSH
77500: LD_INT 4
77502: PUSH
77503: LD_INT 4
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: PUSH
77510: LD_INT 4
77512: PUSH
77513: LD_INT 3
77515: PUSH
77516: EMPTY
77517: LIST
77518: LIST
77519: PUSH
77520: LD_INT 5
77522: PUSH
77523: LD_INT 4
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: PUSH
77530: LD_INT 5
77532: PUSH
77533: LD_INT 5
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: PUSH
77540: LD_INT 4
77542: PUSH
77543: LD_INT 5
77545: PUSH
77546: EMPTY
77547: LIST
77548: LIST
77549: PUSH
77550: LD_INT 3
77552: PUSH
77553: LD_INT 4
77555: PUSH
77556: EMPTY
77557: LIST
77558: LIST
77559: PUSH
77560: LD_INT 3
77562: PUSH
77563: LD_INT 3
77565: PUSH
77566: EMPTY
77567: LIST
77568: LIST
77569: PUSH
77570: LD_INT 5
77572: PUSH
77573: LD_INT 3
77575: PUSH
77576: EMPTY
77577: LIST
77578: LIST
77579: PUSH
77580: LD_INT 3
77582: PUSH
77583: LD_INT 5
77585: PUSH
77586: EMPTY
77587: LIST
77588: LIST
77589: PUSH
77590: LD_INT 0
77592: PUSH
77593: LD_INT 3
77595: PUSH
77596: EMPTY
77597: LIST
77598: LIST
77599: PUSH
77600: LD_INT 0
77602: PUSH
77603: LD_INT 2
77605: PUSH
77606: EMPTY
77607: LIST
77608: LIST
77609: PUSH
77610: LD_INT 1
77612: PUSH
77613: LD_INT 3
77615: PUSH
77616: EMPTY
77617: LIST
77618: LIST
77619: PUSH
77620: LD_INT 1
77622: PUSH
77623: LD_INT 4
77625: PUSH
77626: EMPTY
77627: LIST
77628: LIST
77629: PUSH
77630: LD_INT 0
77632: PUSH
77633: LD_INT 4
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: PUSH
77640: LD_INT 1
77642: NEG
77643: PUSH
77644: LD_INT 3
77646: PUSH
77647: EMPTY
77648: LIST
77649: LIST
77650: PUSH
77651: LD_INT 1
77653: NEG
77654: PUSH
77655: LD_INT 2
77657: PUSH
77658: EMPTY
77659: LIST
77660: LIST
77661: PUSH
77662: LD_INT 2
77664: PUSH
77665: LD_INT 4
77667: PUSH
77668: EMPTY
77669: LIST
77670: LIST
77671: PUSH
77672: LD_INT 2
77674: NEG
77675: PUSH
77676: LD_INT 2
77678: PUSH
77679: EMPTY
77680: LIST
77681: LIST
77682: PUSH
77683: LD_INT 4
77685: NEG
77686: PUSH
77687: LD_INT 0
77689: PUSH
77690: EMPTY
77691: LIST
77692: LIST
77693: PUSH
77694: LD_INT 4
77696: NEG
77697: PUSH
77698: LD_INT 1
77700: NEG
77701: PUSH
77702: EMPTY
77703: LIST
77704: LIST
77705: PUSH
77706: LD_INT 3
77708: NEG
77709: PUSH
77710: LD_INT 0
77712: PUSH
77713: EMPTY
77714: LIST
77715: LIST
77716: PUSH
77717: LD_INT 3
77719: NEG
77720: PUSH
77721: LD_INT 1
77723: PUSH
77724: EMPTY
77725: LIST
77726: LIST
77727: PUSH
77728: LD_INT 4
77730: NEG
77731: PUSH
77732: LD_INT 1
77734: PUSH
77735: EMPTY
77736: LIST
77737: LIST
77738: PUSH
77739: LD_INT 5
77741: NEG
77742: PUSH
77743: LD_INT 0
77745: PUSH
77746: EMPTY
77747: LIST
77748: LIST
77749: PUSH
77750: LD_INT 5
77752: NEG
77753: PUSH
77754: LD_INT 1
77756: NEG
77757: PUSH
77758: EMPTY
77759: LIST
77760: LIST
77761: PUSH
77762: LD_INT 5
77764: NEG
77765: PUSH
77766: LD_INT 2
77768: NEG
77769: PUSH
77770: EMPTY
77771: LIST
77772: LIST
77773: PUSH
77774: LD_INT 3
77776: NEG
77777: PUSH
77778: LD_INT 2
77780: PUSH
77781: EMPTY
77782: LIST
77783: LIST
77784: PUSH
77785: EMPTY
77786: LIST
77787: LIST
77788: LIST
77789: LIST
77790: LIST
77791: LIST
77792: LIST
77793: LIST
77794: LIST
77795: LIST
77796: LIST
77797: LIST
77798: LIST
77799: LIST
77800: LIST
77801: LIST
77802: LIST
77803: LIST
77804: LIST
77805: LIST
77806: LIST
77807: LIST
77808: LIST
77809: LIST
77810: LIST
77811: LIST
77812: LIST
77813: LIST
77814: LIST
77815: LIST
77816: LIST
77817: LIST
77818: LIST
77819: LIST
77820: LIST
77821: LIST
77822: LIST
77823: LIST
77824: LIST
77825: LIST
77826: LIST
77827: LIST
77828: LIST
77829: LIST
77830: LIST
77831: ST_TO_ADDR
// end ; end ;
77832: GO 77835
77834: POP
// case btype of b_depot , b_warehouse :
77835: LD_VAR 0 1
77839: PUSH
77840: LD_INT 0
77842: DOUBLE
77843: EQUAL
77844: IFTRUE 77854
77846: LD_INT 1
77848: DOUBLE
77849: EQUAL
77850: IFTRUE 77854
77852: GO 78055
77854: POP
// case nation of nation_american :
77855: LD_VAR 0 5
77859: PUSH
77860: LD_INT 1
77862: DOUBLE
77863: EQUAL
77864: IFTRUE 77868
77866: GO 77924
77868: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
77869: LD_ADDR_VAR 0 9
77873: PUSH
77874: LD_VAR 0 11
77878: PUSH
77879: LD_VAR 0 12
77883: PUSH
77884: LD_VAR 0 13
77888: PUSH
77889: LD_VAR 0 14
77893: PUSH
77894: LD_VAR 0 15
77898: PUSH
77899: LD_VAR 0 16
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: LIST
77908: LIST
77909: LIST
77910: LIST
77911: PUSH
77912: LD_VAR 0 4
77916: PUSH
77917: LD_INT 1
77919: PLUS
77920: ARRAY
77921: ST_TO_ADDR
77922: GO 78053
77924: LD_INT 2
77926: DOUBLE
77927: EQUAL
77928: IFTRUE 77932
77930: GO 77988
77932: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
77933: LD_ADDR_VAR 0 9
77937: PUSH
77938: LD_VAR 0 17
77942: PUSH
77943: LD_VAR 0 18
77947: PUSH
77948: LD_VAR 0 19
77952: PUSH
77953: LD_VAR 0 20
77957: PUSH
77958: LD_VAR 0 21
77962: PUSH
77963: LD_VAR 0 22
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: LIST
77972: LIST
77973: LIST
77974: LIST
77975: PUSH
77976: LD_VAR 0 4
77980: PUSH
77981: LD_INT 1
77983: PLUS
77984: ARRAY
77985: ST_TO_ADDR
77986: GO 78053
77988: LD_INT 3
77990: DOUBLE
77991: EQUAL
77992: IFTRUE 77996
77994: GO 78052
77996: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
77997: LD_ADDR_VAR 0 9
78001: PUSH
78002: LD_VAR 0 23
78006: PUSH
78007: LD_VAR 0 24
78011: PUSH
78012: LD_VAR 0 25
78016: PUSH
78017: LD_VAR 0 26
78021: PUSH
78022: LD_VAR 0 27
78026: PUSH
78027: LD_VAR 0 28
78031: PUSH
78032: EMPTY
78033: LIST
78034: LIST
78035: LIST
78036: LIST
78037: LIST
78038: LIST
78039: PUSH
78040: LD_VAR 0 4
78044: PUSH
78045: LD_INT 1
78047: PLUS
78048: ARRAY
78049: ST_TO_ADDR
78050: GO 78053
78052: POP
78053: GO 78608
78055: LD_INT 2
78057: DOUBLE
78058: EQUAL
78059: IFTRUE 78069
78061: LD_INT 3
78063: DOUBLE
78064: EQUAL
78065: IFTRUE 78069
78067: GO 78125
78069: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
78070: LD_ADDR_VAR 0 9
78074: PUSH
78075: LD_VAR 0 29
78079: PUSH
78080: LD_VAR 0 30
78084: PUSH
78085: LD_VAR 0 31
78089: PUSH
78090: LD_VAR 0 32
78094: PUSH
78095: LD_VAR 0 33
78099: PUSH
78100: LD_VAR 0 34
78104: PUSH
78105: EMPTY
78106: LIST
78107: LIST
78108: LIST
78109: LIST
78110: LIST
78111: LIST
78112: PUSH
78113: LD_VAR 0 4
78117: PUSH
78118: LD_INT 1
78120: PLUS
78121: ARRAY
78122: ST_TO_ADDR
78123: GO 78608
78125: LD_INT 16
78127: DOUBLE
78128: EQUAL
78129: IFTRUE 78187
78131: LD_INT 17
78133: DOUBLE
78134: EQUAL
78135: IFTRUE 78187
78137: LD_INT 18
78139: DOUBLE
78140: EQUAL
78141: IFTRUE 78187
78143: LD_INT 19
78145: DOUBLE
78146: EQUAL
78147: IFTRUE 78187
78149: LD_INT 22
78151: DOUBLE
78152: EQUAL
78153: IFTRUE 78187
78155: LD_INT 20
78157: DOUBLE
78158: EQUAL
78159: IFTRUE 78187
78161: LD_INT 21
78163: DOUBLE
78164: EQUAL
78165: IFTRUE 78187
78167: LD_INT 23
78169: DOUBLE
78170: EQUAL
78171: IFTRUE 78187
78173: LD_INT 24
78175: DOUBLE
78176: EQUAL
78177: IFTRUE 78187
78179: LD_INT 25
78181: DOUBLE
78182: EQUAL
78183: IFTRUE 78187
78185: GO 78243
78187: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
78188: LD_ADDR_VAR 0 9
78192: PUSH
78193: LD_VAR 0 35
78197: PUSH
78198: LD_VAR 0 36
78202: PUSH
78203: LD_VAR 0 37
78207: PUSH
78208: LD_VAR 0 38
78212: PUSH
78213: LD_VAR 0 39
78217: PUSH
78218: LD_VAR 0 40
78222: PUSH
78223: EMPTY
78224: LIST
78225: LIST
78226: LIST
78227: LIST
78228: LIST
78229: LIST
78230: PUSH
78231: LD_VAR 0 4
78235: PUSH
78236: LD_INT 1
78238: PLUS
78239: ARRAY
78240: ST_TO_ADDR
78241: GO 78608
78243: LD_INT 6
78245: DOUBLE
78246: EQUAL
78247: IFTRUE 78299
78249: LD_INT 7
78251: DOUBLE
78252: EQUAL
78253: IFTRUE 78299
78255: LD_INT 8
78257: DOUBLE
78258: EQUAL
78259: IFTRUE 78299
78261: LD_INT 13
78263: DOUBLE
78264: EQUAL
78265: IFTRUE 78299
78267: LD_INT 12
78269: DOUBLE
78270: EQUAL
78271: IFTRUE 78299
78273: LD_INT 15
78275: DOUBLE
78276: EQUAL
78277: IFTRUE 78299
78279: LD_INT 11
78281: DOUBLE
78282: EQUAL
78283: IFTRUE 78299
78285: LD_INT 14
78287: DOUBLE
78288: EQUAL
78289: IFTRUE 78299
78291: LD_INT 10
78293: DOUBLE
78294: EQUAL
78295: IFTRUE 78299
78297: GO 78355
78299: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
78300: LD_ADDR_VAR 0 9
78304: PUSH
78305: LD_VAR 0 41
78309: PUSH
78310: LD_VAR 0 42
78314: PUSH
78315: LD_VAR 0 43
78319: PUSH
78320: LD_VAR 0 44
78324: PUSH
78325: LD_VAR 0 45
78329: PUSH
78330: LD_VAR 0 46
78334: PUSH
78335: EMPTY
78336: LIST
78337: LIST
78338: LIST
78339: LIST
78340: LIST
78341: LIST
78342: PUSH
78343: LD_VAR 0 4
78347: PUSH
78348: LD_INT 1
78350: PLUS
78351: ARRAY
78352: ST_TO_ADDR
78353: GO 78608
78355: LD_INT 36
78357: DOUBLE
78358: EQUAL
78359: IFTRUE 78363
78361: GO 78419
78363: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
78364: LD_ADDR_VAR 0 9
78368: PUSH
78369: LD_VAR 0 47
78373: PUSH
78374: LD_VAR 0 48
78378: PUSH
78379: LD_VAR 0 49
78383: PUSH
78384: LD_VAR 0 50
78388: PUSH
78389: LD_VAR 0 51
78393: PUSH
78394: LD_VAR 0 52
78398: PUSH
78399: EMPTY
78400: LIST
78401: LIST
78402: LIST
78403: LIST
78404: LIST
78405: LIST
78406: PUSH
78407: LD_VAR 0 4
78411: PUSH
78412: LD_INT 1
78414: PLUS
78415: ARRAY
78416: ST_TO_ADDR
78417: GO 78608
78419: LD_INT 4
78421: DOUBLE
78422: EQUAL
78423: IFTRUE 78445
78425: LD_INT 5
78427: DOUBLE
78428: EQUAL
78429: IFTRUE 78445
78431: LD_INT 34
78433: DOUBLE
78434: EQUAL
78435: IFTRUE 78445
78437: LD_INT 37
78439: DOUBLE
78440: EQUAL
78441: IFTRUE 78445
78443: GO 78501
78445: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
78446: LD_ADDR_VAR 0 9
78450: PUSH
78451: LD_VAR 0 53
78455: PUSH
78456: LD_VAR 0 54
78460: PUSH
78461: LD_VAR 0 55
78465: PUSH
78466: LD_VAR 0 56
78470: PUSH
78471: LD_VAR 0 57
78475: PUSH
78476: LD_VAR 0 58
78480: PUSH
78481: EMPTY
78482: LIST
78483: LIST
78484: LIST
78485: LIST
78486: LIST
78487: LIST
78488: PUSH
78489: LD_VAR 0 4
78493: PUSH
78494: LD_INT 1
78496: PLUS
78497: ARRAY
78498: ST_TO_ADDR
78499: GO 78608
78501: LD_INT 31
78503: DOUBLE
78504: EQUAL
78505: IFTRUE 78551
78507: LD_INT 32
78509: DOUBLE
78510: EQUAL
78511: IFTRUE 78551
78513: LD_INT 33
78515: DOUBLE
78516: EQUAL
78517: IFTRUE 78551
78519: LD_INT 27
78521: DOUBLE
78522: EQUAL
78523: IFTRUE 78551
78525: LD_INT 26
78527: DOUBLE
78528: EQUAL
78529: IFTRUE 78551
78531: LD_INT 28
78533: DOUBLE
78534: EQUAL
78535: IFTRUE 78551
78537: LD_INT 29
78539: DOUBLE
78540: EQUAL
78541: IFTRUE 78551
78543: LD_INT 30
78545: DOUBLE
78546: EQUAL
78547: IFTRUE 78551
78549: GO 78607
78551: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
78552: LD_ADDR_VAR 0 9
78556: PUSH
78557: LD_VAR 0 59
78561: PUSH
78562: LD_VAR 0 60
78566: PUSH
78567: LD_VAR 0 61
78571: PUSH
78572: LD_VAR 0 62
78576: PUSH
78577: LD_VAR 0 63
78581: PUSH
78582: LD_VAR 0 64
78586: PUSH
78587: EMPTY
78588: LIST
78589: LIST
78590: LIST
78591: LIST
78592: LIST
78593: LIST
78594: PUSH
78595: LD_VAR 0 4
78599: PUSH
78600: LD_INT 1
78602: PLUS
78603: ARRAY
78604: ST_TO_ADDR
78605: GO 78608
78607: POP
// temp_list2 = [ ] ;
78608: LD_ADDR_VAR 0 10
78612: PUSH
78613: EMPTY
78614: ST_TO_ADDR
// for i in temp_list do
78615: LD_ADDR_VAR 0 8
78619: PUSH
78620: LD_VAR 0 9
78624: PUSH
78625: FOR_IN
78626: IFFALSE 78678
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
78628: LD_ADDR_VAR 0 10
78632: PUSH
78633: LD_VAR 0 10
78637: PUSH
78638: LD_VAR 0 8
78642: PUSH
78643: LD_INT 1
78645: ARRAY
78646: PUSH
78647: LD_VAR 0 2
78651: PLUS
78652: PUSH
78653: LD_VAR 0 8
78657: PUSH
78658: LD_INT 2
78660: ARRAY
78661: PUSH
78662: LD_VAR 0 3
78666: PLUS
78667: PUSH
78668: EMPTY
78669: LIST
78670: LIST
78671: PUSH
78672: EMPTY
78673: LIST
78674: ADD
78675: ST_TO_ADDR
78676: GO 78625
78678: POP
78679: POP
// result = temp_list2 ;
78680: LD_ADDR_VAR 0 7
78684: PUSH
78685: LD_VAR 0 10
78689: ST_TO_ADDR
// end ;
78690: LD_VAR 0 7
78694: RET
// export function EnemyInRange ( unit , dist ) ; begin
78695: LD_INT 0
78697: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
78698: LD_ADDR_VAR 0 3
78702: PUSH
78703: LD_VAR 0 1
78707: PPUSH
78708: CALL_OW 255
78712: PPUSH
78713: LD_VAR 0 1
78717: PPUSH
78718: CALL_OW 250
78722: PPUSH
78723: LD_VAR 0 1
78727: PPUSH
78728: CALL_OW 251
78732: PPUSH
78733: LD_VAR 0 2
78737: PPUSH
78738: CALL 52091 0 4
78742: PUSH
78743: LD_INT 4
78745: ARRAY
78746: ST_TO_ADDR
// end ;
78747: LD_VAR 0 3
78751: RET
// export function PlayerSeeMe ( unit ) ; begin
78752: LD_INT 0
78754: PPUSH
// result := See ( your_side , unit ) ;
78755: LD_ADDR_VAR 0 2
78759: PUSH
78760: LD_OWVAR 2
78764: PPUSH
78765: LD_VAR 0 1
78769: PPUSH
78770: CALL_OW 292
78774: ST_TO_ADDR
// end ;
78775: LD_VAR 0 2
78779: RET
// export function ReverseDir ( unit ) ; begin
78780: LD_INT 0
78782: PPUSH
// if not unit then
78783: LD_VAR 0 1
78787: NOT
78788: IFFALSE 78792
// exit ;
78790: GO 78815
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
78792: LD_ADDR_VAR 0 2
78796: PUSH
78797: LD_VAR 0 1
78801: PPUSH
78802: CALL_OW 254
78806: PUSH
78807: LD_INT 3
78809: PLUS
78810: PUSH
78811: LD_INT 6
78813: MOD
78814: ST_TO_ADDR
// end ;
78815: LD_VAR 0 2
78819: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
78820: LD_INT 0
78822: PPUSH
78823: PPUSH
78824: PPUSH
78825: PPUSH
78826: PPUSH
// if not hexes then
78827: LD_VAR 0 2
78831: NOT
78832: IFFALSE 78836
// exit ;
78834: GO 78984
// dist := 9999 ;
78836: LD_ADDR_VAR 0 5
78840: PUSH
78841: LD_INT 9999
78843: ST_TO_ADDR
// for i = 1 to hexes do
78844: LD_ADDR_VAR 0 4
78848: PUSH
78849: DOUBLE
78850: LD_INT 1
78852: DEC
78853: ST_TO_ADDR
78854: LD_VAR 0 2
78858: PUSH
78859: FOR_TO
78860: IFFALSE 78972
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
78862: LD_VAR 0 1
78866: PPUSH
78867: LD_VAR 0 2
78871: PUSH
78872: LD_VAR 0 4
78876: ARRAY
78877: PUSH
78878: LD_INT 1
78880: ARRAY
78881: PPUSH
78882: LD_VAR 0 2
78886: PUSH
78887: LD_VAR 0 4
78891: ARRAY
78892: PUSH
78893: LD_INT 2
78895: ARRAY
78896: PPUSH
78897: CALL_OW 297
78901: PUSH
78902: LD_VAR 0 5
78906: LESS
78907: IFFALSE 78970
// begin hex := hexes [ i ] ;
78909: LD_ADDR_VAR 0 7
78913: PUSH
78914: LD_VAR 0 2
78918: PUSH
78919: LD_VAR 0 4
78923: ARRAY
78924: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
78925: LD_ADDR_VAR 0 5
78929: PUSH
78930: LD_VAR 0 1
78934: PPUSH
78935: LD_VAR 0 2
78939: PUSH
78940: LD_VAR 0 4
78944: ARRAY
78945: PUSH
78946: LD_INT 1
78948: ARRAY
78949: PPUSH
78950: LD_VAR 0 2
78954: PUSH
78955: LD_VAR 0 4
78959: ARRAY
78960: PUSH
78961: LD_INT 2
78963: ARRAY
78964: PPUSH
78965: CALL_OW 297
78969: ST_TO_ADDR
// end ; end ;
78970: GO 78859
78972: POP
78973: POP
// result := hex ;
78974: LD_ADDR_VAR 0 3
78978: PUSH
78979: LD_VAR 0 7
78983: ST_TO_ADDR
// end ;
78984: LD_VAR 0 3
78988: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
78989: LD_INT 0
78991: PPUSH
78992: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
78993: LD_VAR 0 1
78997: NOT
78998: PUSH
78999: LD_VAR 0 1
79003: PUSH
79004: LD_INT 21
79006: PUSH
79007: LD_INT 2
79009: PUSH
79010: EMPTY
79011: LIST
79012: LIST
79013: PUSH
79014: LD_INT 23
79016: PUSH
79017: LD_INT 2
79019: PUSH
79020: EMPTY
79021: LIST
79022: LIST
79023: PUSH
79024: EMPTY
79025: LIST
79026: LIST
79027: PPUSH
79028: CALL_OW 69
79032: IN
79033: NOT
79034: OR
79035: IFFALSE 79039
// exit ;
79037: GO 79086
// for i = 1 to 3 do
79039: LD_ADDR_VAR 0 3
79043: PUSH
79044: DOUBLE
79045: LD_INT 1
79047: DEC
79048: ST_TO_ADDR
79049: LD_INT 3
79051: PUSH
79052: FOR_TO
79053: IFFALSE 79084
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
79055: LD_VAR 0 1
79059: PPUSH
79060: CALL_OW 250
79064: PPUSH
79065: LD_VAR 0 1
79069: PPUSH
79070: CALL_OW 251
79074: PPUSH
79075: LD_INT 1
79077: PPUSH
79078: CALL_OW 453
79082: GO 79052
79084: POP
79085: POP
// end ;
79086: LD_VAR 0 2
79090: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
79091: LD_INT 0
79093: PPUSH
79094: PPUSH
79095: PPUSH
79096: PPUSH
79097: PPUSH
79098: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
79099: LD_VAR 0 1
79103: NOT
79104: PUSH
79105: LD_VAR 0 2
79109: NOT
79110: OR
79111: PUSH
79112: LD_VAR 0 1
79116: PPUSH
79117: CALL_OW 314
79121: OR
79122: IFFALSE 79126
// exit ;
79124: GO 79567
// x := GetX ( enemy_unit ) ;
79126: LD_ADDR_VAR 0 7
79130: PUSH
79131: LD_VAR 0 2
79135: PPUSH
79136: CALL_OW 250
79140: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
79141: LD_ADDR_VAR 0 8
79145: PUSH
79146: LD_VAR 0 2
79150: PPUSH
79151: CALL_OW 251
79155: ST_TO_ADDR
// if not x or not y then
79156: LD_VAR 0 7
79160: NOT
79161: PUSH
79162: LD_VAR 0 8
79166: NOT
79167: OR
79168: IFFALSE 79172
// exit ;
79170: GO 79567
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
79172: LD_ADDR_VAR 0 6
79176: PUSH
79177: LD_VAR 0 7
79181: PPUSH
79182: LD_INT 0
79184: PPUSH
79185: LD_INT 4
79187: PPUSH
79188: CALL_OW 272
79192: PUSH
79193: LD_VAR 0 8
79197: PPUSH
79198: LD_INT 0
79200: PPUSH
79201: LD_INT 4
79203: PPUSH
79204: CALL_OW 273
79208: PUSH
79209: EMPTY
79210: LIST
79211: LIST
79212: PUSH
79213: LD_VAR 0 7
79217: PPUSH
79218: LD_INT 1
79220: PPUSH
79221: LD_INT 4
79223: PPUSH
79224: CALL_OW 272
79228: PUSH
79229: LD_VAR 0 8
79233: PPUSH
79234: LD_INT 1
79236: PPUSH
79237: LD_INT 4
79239: PPUSH
79240: CALL_OW 273
79244: PUSH
79245: EMPTY
79246: LIST
79247: LIST
79248: PUSH
79249: LD_VAR 0 7
79253: PPUSH
79254: LD_INT 2
79256: PPUSH
79257: LD_INT 4
79259: PPUSH
79260: CALL_OW 272
79264: PUSH
79265: LD_VAR 0 8
79269: PPUSH
79270: LD_INT 2
79272: PPUSH
79273: LD_INT 4
79275: PPUSH
79276: CALL_OW 273
79280: PUSH
79281: EMPTY
79282: LIST
79283: LIST
79284: PUSH
79285: LD_VAR 0 7
79289: PPUSH
79290: LD_INT 3
79292: PPUSH
79293: LD_INT 4
79295: PPUSH
79296: CALL_OW 272
79300: PUSH
79301: LD_VAR 0 8
79305: PPUSH
79306: LD_INT 3
79308: PPUSH
79309: LD_INT 4
79311: PPUSH
79312: CALL_OW 273
79316: PUSH
79317: EMPTY
79318: LIST
79319: LIST
79320: PUSH
79321: LD_VAR 0 7
79325: PPUSH
79326: LD_INT 4
79328: PPUSH
79329: LD_INT 4
79331: PPUSH
79332: CALL_OW 272
79336: PUSH
79337: LD_VAR 0 8
79341: PPUSH
79342: LD_INT 4
79344: PPUSH
79345: LD_INT 4
79347: PPUSH
79348: CALL_OW 273
79352: PUSH
79353: EMPTY
79354: LIST
79355: LIST
79356: PUSH
79357: LD_VAR 0 7
79361: PPUSH
79362: LD_INT 5
79364: PPUSH
79365: LD_INT 4
79367: PPUSH
79368: CALL_OW 272
79372: PUSH
79373: LD_VAR 0 8
79377: PPUSH
79378: LD_INT 5
79380: PPUSH
79381: LD_INT 4
79383: PPUSH
79384: CALL_OW 273
79388: PUSH
79389: EMPTY
79390: LIST
79391: LIST
79392: PUSH
79393: EMPTY
79394: LIST
79395: LIST
79396: LIST
79397: LIST
79398: LIST
79399: LIST
79400: ST_TO_ADDR
// for i = tmp downto 1 do
79401: LD_ADDR_VAR 0 4
79405: PUSH
79406: DOUBLE
79407: LD_VAR 0 6
79411: INC
79412: ST_TO_ADDR
79413: LD_INT 1
79415: PUSH
79416: FOR_DOWNTO
79417: IFFALSE 79518
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
79419: LD_VAR 0 6
79423: PUSH
79424: LD_VAR 0 4
79428: ARRAY
79429: PUSH
79430: LD_INT 1
79432: ARRAY
79433: PPUSH
79434: LD_VAR 0 6
79438: PUSH
79439: LD_VAR 0 4
79443: ARRAY
79444: PUSH
79445: LD_INT 2
79447: ARRAY
79448: PPUSH
79449: CALL_OW 488
79453: NOT
79454: PUSH
79455: LD_VAR 0 6
79459: PUSH
79460: LD_VAR 0 4
79464: ARRAY
79465: PUSH
79466: LD_INT 1
79468: ARRAY
79469: PPUSH
79470: LD_VAR 0 6
79474: PUSH
79475: LD_VAR 0 4
79479: ARRAY
79480: PUSH
79481: LD_INT 2
79483: ARRAY
79484: PPUSH
79485: CALL_OW 428
79489: PUSH
79490: LD_INT 0
79492: NONEQUAL
79493: OR
79494: IFFALSE 79516
// tmp := Delete ( tmp , i ) ;
79496: LD_ADDR_VAR 0 6
79500: PUSH
79501: LD_VAR 0 6
79505: PPUSH
79506: LD_VAR 0 4
79510: PPUSH
79511: CALL_OW 3
79515: ST_TO_ADDR
79516: GO 79416
79518: POP
79519: POP
// j := GetClosestHex ( unit , tmp ) ;
79520: LD_ADDR_VAR 0 5
79524: PUSH
79525: LD_VAR 0 1
79529: PPUSH
79530: LD_VAR 0 6
79534: PPUSH
79535: CALL 78820 0 2
79539: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
79540: LD_VAR 0 1
79544: PPUSH
79545: LD_VAR 0 5
79549: PUSH
79550: LD_INT 1
79552: ARRAY
79553: PPUSH
79554: LD_VAR 0 5
79558: PUSH
79559: LD_INT 2
79561: ARRAY
79562: PPUSH
79563: CALL_OW 111
// end ;
79567: LD_VAR 0 3
79571: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
79572: LD_INT 0
79574: PPUSH
79575: PPUSH
79576: PPUSH
// uc_side = 0 ;
79577: LD_ADDR_OWVAR 20
79581: PUSH
79582: LD_INT 0
79584: ST_TO_ADDR
// uc_nation = 0 ;
79585: LD_ADDR_OWVAR 21
79589: PUSH
79590: LD_INT 0
79592: ST_TO_ADDR
// InitHc_All ( ) ;
79593: CALL_OW 584
// InitVc ;
79597: CALL_OW 20
// if mastodonts then
79601: LD_VAR 0 6
79605: IFFALSE 79672
// for i = 1 to mastodonts do
79607: LD_ADDR_VAR 0 11
79611: PUSH
79612: DOUBLE
79613: LD_INT 1
79615: DEC
79616: ST_TO_ADDR
79617: LD_VAR 0 6
79621: PUSH
79622: FOR_TO
79623: IFFALSE 79670
// begin vc_chassis := 31 ;
79625: LD_ADDR_OWVAR 37
79629: PUSH
79630: LD_INT 31
79632: ST_TO_ADDR
// vc_control := control_rider ;
79633: LD_ADDR_OWVAR 38
79637: PUSH
79638: LD_INT 4
79640: ST_TO_ADDR
// animal := CreateVehicle ;
79641: LD_ADDR_VAR 0 12
79645: PUSH
79646: CALL_OW 45
79650: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79651: LD_VAR 0 12
79655: PPUSH
79656: LD_VAR 0 8
79660: PPUSH
79661: LD_INT 0
79663: PPUSH
79664: CALL 81860 0 3
// end ;
79668: GO 79622
79670: POP
79671: POP
// if horses then
79672: LD_VAR 0 5
79676: IFFALSE 79743
// for i = 1 to horses do
79678: LD_ADDR_VAR 0 11
79682: PUSH
79683: DOUBLE
79684: LD_INT 1
79686: DEC
79687: ST_TO_ADDR
79688: LD_VAR 0 5
79692: PUSH
79693: FOR_TO
79694: IFFALSE 79741
// begin hc_class := 21 ;
79696: LD_ADDR_OWVAR 28
79700: PUSH
79701: LD_INT 21
79703: ST_TO_ADDR
// hc_gallery :=  ;
79704: LD_ADDR_OWVAR 33
79708: PUSH
79709: LD_STRING 
79711: ST_TO_ADDR
// animal := CreateHuman ;
79712: LD_ADDR_VAR 0 12
79716: PUSH
79717: CALL_OW 44
79721: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79722: LD_VAR 0 12
79726: PPUSH
79727: LD_VAR 0 8
79731: PPUSH
79732: LD_INT 0
79734: PPUSH
79735: CALL 81860 0 3
// end ;
79739: GO 79693
79741: POP
79742: POP
// if birds then
79743: LD_VAR 0 1
79747: IFFALSE 79814
// for i = 1 to birds do
79749: LD_ADDR_VAR 0 11
79753: PUSH
79754: DOUBLE
79755: LD_INT 1
79757: DEC
79758: ST_TO_ADDR
79759: LD_VAR 0 1
79763: PUSH
79764: FOR_TO
79765: IFFALSE 79812
// begin hc_class = 18 ;
79767: LD_ADDR_OWVAR 28
79771: PUSH
79772: LD_INT 18
79774: ST_TO_ADDR
// hc_gallery =  ;
79775: LD_ADDR_OWVAR 33
79779: PUSH
79780: LD_STRING 
79782: ST_TO_ADDR
// animal := CreateHuman ;
79783: LD_ADDR_VAR 0 12
79787: PUSH
79788: CALL_OW 44
79792: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79793: LD_VAR 0 12
79797: PPUSH
79798: LD_VAR 0 8
79802: PPUSH
79803: LD_INT 0
79805: PPUSH
79806: CALL 81860 0 3
// end ;
79810: GO 79764
79812: POP
79813: POP
// if tigers then
79814: LD_VAR 0 2
79818: IFFALSE 79902
// for i = 1 to tigers do
79820: LD_ADDR_VAR 0 11
79824: PUSH
79825: DOUBLE
79826: LD_INT 1
79828: DEC
79829: ST_TO_ADDR
79830: LD_VAR 0 2
79834: PUSH
79835: FOR_TO
79836: IFFALSE 79900
// begin hc_class = class_tiger ;
79838: LD_ADDR_OWVAR 28
79842: PUSH
79843: LD_INT 14
79845: ST_TO_ADDR
// hc_gallery =  ;
79846: LD_ADDR_OWVAR 33
79850: PUSH
79851: LD_STRING 
79853: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
79854: LD_ADDR_OWVAR 35
79858: PUSH
79859: LD_INT 7
79861: NEG
79862: PPUSH
79863: LD_INT 7
79865: PPUSH
79866: CALL_OW 12
79870: ST_TO_ADDR
// animal := CreateHuman ;
79871: LD_ADDR_VAR 0 12
79875: PUSH
79876: CALL_OW 44
79880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79881: LD_VAR 0 12
79885: PPUSH
79886: LD_VAR 0 8
79890: PPUSH
79891: LD_INT 0
79893: PPUSH
79894: CALL 81860 0 3
// end ;
79898: GO 79835
79900: POP
79901: POP
// if apemans then
79902: LD_VAR 0 3
79906: IFFALSE 80029
// for i = 1 to apemans do
79908: LD_ADDR_VAR 0 11
79912: PUSH
79913: DOUBLE
79914: LD_INT 1
79916: DEC
79917: ST_TO_ADDR
79918: LD_VAR 0 3
79922: PUSH
79923: FOR_TO
79924: IFFALSE 80027
// begin hc_class = class_apeman ;
79926: LD_ADDR_OWVAR 28
79930: PUSH
79931: LD_INT 12
79933: ST_TO_ADDR
// hc_gallery =  ;
79934: LD_ADDR_OWVAR 33
79938: PUSH
79939: LD_STRING 
79941: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
79942: LD_ADDR_OWVAR 35
79946: PUSH
79947: LD_INT 2
79949: NEG
79950: PPUSH
79951: LD_INT 2
79953: PPUSH
79954: CALL_OW 12
79958: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
79959: LD_ADDR_OWVAR 31
79963: PUSH
79964: LD_INT 1
79966: PPUSH
79967: LD_INT 3
79969: PPUSH
79970: CALL_OW 12
79974: PUSH
79975: LD_INT 1
79977: PPUSH
79978: LD_INT 3
79980: PPUSH
79981: CALL_OW 12
79985: PUSH
79986: LD_INT 0
79988: PUSH
79989: LD_INT 0
79991: PUSH
79992: EMPTY
79993: LIST
79994: LIST
79995: LIST
79996: LIST
79997: ST_TO_ADDR
// animal := CreateHuman ;
79998: LD_ADDR_VAR 0 12
80002: PUSH
80003: CALL_OW 44
80007: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80008: LD_VAR 0 12
80012: PPUSH
80013: LD_VAR 0 8
80017: PPUSH
80018: LD_INT 0
80020: PPUSH
80021: CALL 81860 0 3
// end ;
80025: GO 79923
80027: POP
80028: POP
// if enchidnas then
80029: LD_VAR 0 4
80033: IFFALSE 80100
// for i = 1 to enchidnas do
80035: LD_ADDR_VAR 0 11
80039: PUSH
80040: DOUBLE
80041: LD_INT 1
80043: DEC
80044: ST_TO_ADDR
80045: LD_VAR 0 4
80049: PUSH
80050: FOR_TO
80051: IFFALSE 80098
// begin hc_class = 13 ;
80053: LD_ADDR_OWVAR 28
80057: PUSH
80058: LD_INT 13
80060: ST_TO_ADDR
// hc_gallery =  ;
80061: LD_ADDR_OWVAR 33
80065: PUSH
80066: LD_STRING 
80068: ST_TO_ADDR
// animal := CreateHuman ;
80069: LD_ADDR_VAR 0 12
80073: PUSH
80074: CALL_OW 44
80078: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80079: LD_VAR 0 12
80083: PPUSH
80084: LD_VAR 0 8
80088: PPUSH
80089: LD_INT 0
80091: PPUSH
80092: CALL 81860 0 3
// end ;
80096: GO 80050
80098: POP
80099: POP
// if fishes then
80100: LD_VAR 0 7
80104: IFFALSE 80171
// for i = 1 to fishes do
80106: LD_ADDR_VAR 0 11
80110: PUSH
80111: DOUBLE
80112: LD_INT 1
80114: DEC
80115: ST_TO_ADDR
80116: LD_VAR 0 7
80120: PUSH
80121: FOR_TO
80122: IFFALSE 80169
// begin hc_class = 20 ;
80124: LD_ADDR_OWVAR 28
80128: PUSH
80129: LD_INT 20
80131: ST_TO_ADDR
// hc_gallery =  ;
80132: LD_ADDR_OWVAR 33
80136: PUSH
80137: LD_STRING 
80139: ST_TO_ADDR
// animal := CreateHuman ;
80140: LD_ADDR_VAR 0 12
80144: PUSH
80145: CALL_OW 44
80149: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
80150: LD_VAR 0 12
80154: PPUSH
80155: LD_VAR 0 9
80159: PPUSH
80160: LD_INT 0
80162: PPUSH
80163: CALL 81860 0 3
// end ;
80167: GO 80121
80169: POP
80170: POP
// end ;
80171: LD_VAR 0 10
80175: RET
// export function WantHeal ( sci , unit ) ; begin
80176: LD_INT 0
80178: PPUSH
// if GetTaskList ( sci ) > 0 then
80179: LD_VAR 0 1
80183: PPUSH
80184: CALL_OW 437
80188: PUSH
80189: LD_INT 0
80191: GREATER
80192: IFFALSE 80262
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
80194: LD_VAR 0 1
80198: PPUSH
80199: CALL_OW 437
80203: PUSH
80204: LD_INT 1
80206: ARRAY
80207: PUSH
80208: LD_INT 1
80210: ARRAY
80211: PUSH
80212: LD_STRING l
80214: EQUAL
80215: PUSH
80216: LD_VAR 0 1
80220: PPUSH
80221: CALL_OW 437
80225: PUSH
80226: LD_INT 1
80228: ARRAY
80229: PUSH
80230: LD_INT 4
80232: ARRAY
80233: PUSH
80234: LD_VAR 0 2
80238: EQUAL
80239: AND
80240: IFFALSE 80252
// result := true else
80242: LD_ADDR_VAR 0 3
80246: PUSH
80247: LD_INT 1
80249: ST_TO_ADDR
80250: GO 80260
// result := false ;
80252: LD_ADDR_VAR 0 3
80256: PUSH
80257: LD_INT 0
80259: ST_TO_ADDR
// end else
80260: GO 80270
// result := false ;
80262: LD_ADDR_VAR 0 3
80266: PUSH
80267: LD_INT 0
80269: ST_TO_ADDR
// end ;
80270: LD_VAR 0 3
80274: RET
// export function HealTarget ( sci ) ; begin
80275: LD_INT 0
80277: PPUSH
// if not sci then
80278: LD_VAR 0 1
80282: NOT
80283: IFFALSE 80287
// exit ;
80285: GO 80352
// result := 0 ;
80287: LD_ADDR_VAR 0 2
80291: PUSH
80292: LD_INT 0
80294: ST_TO_ADDR
// if GetTaskList ( sci ) then
80295: LD_VAR 0 1
80299: PPUSH
80300: CALL_OW 437
80304: IFFALSE 80352
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
80306: LD_VAR 0 1
80310: PPUSH
80311: CALL_OW 437
80315: PUSH
80316: LD_INT 1
80318: ARRAY
80319: PUSH
80320: LD_INT 1
80322: ARRAY
80323: PUSH
80324: LD_STRING l
80326: EQUAL
80327: IFFALSE 80352
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
80329: LD_ADDR_VAR 0 2
80333: PUSH
80334: LD_VAR 0 1
80338: PPUSH
80339: CALL_OW 437
80343: PUSH
80344: LD_INT 1
80346: ARRAY
80347: PUSH
80348: LD_INT 4
80350: ARRAY
80351: ST_TO_ADDR
// end ;
80352: LD_VAR 0 2
80356: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
80357: LD_INT 0
80359: PPUSH
80360: PPUSH
80361: PPUSH
80362: PPUSH
// if not base_units then
80363: LD_VAR 0 1
80367: NOT
80368: IFFALSE 80372
// exit ;
80370: GO 80459
// result := false ;
80372: LD_ADDR_VAR 0 2
80376: PUSH
80377: LD_INT 0
80379: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
80380: LD_ADDR_VAR 0 5
80384: PUSH
80385: LD_VAR 0 1
80389: PPUSH
80390: LD_INT 21
80392: PUSH
80393: LD_INT 3
80395: PUSH
80396: EMPTY
80397: LIST
80398: LIST
80399: PPUSH
80400: CALL_OW 72
80404: ST_TO_ADDR
// if not tmp then
80405: LD_VAR 0 5
80409: NOT
80410: IFFALSE 80414
// exit ;
80412: GO 80459
// for i in tmp do
80414: LD_ADDR_VAR 0 3
80418: PUSH
80419: LD_VAR 0 5
80423: PUSH
80424: FOR_IN
80425: IFFALSE 80457
// begin result := EnemyInRange ( i , 22 ) ;
80427: LD_ADDR_VAR 0 2
80431: PUSH
80432: LD_VAR 0 3
80436: PPUSH
80437: LD_INT 22
80439: PPUSH
80440: CALL 78695 0 2
80444: ST_TO_ADDR
// if result then
80445: LD_VAR 0 2
80449: IFFALSE 80455
// exit ;
80451: POP
80452: POP
80453: GO 80459
// end ;
80455: GO 80424
80457: POP
80458: POP
// end ;
80459: LD_VAR 0 2
80463: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
80464: LD_INT 0
80466: PPUSH
80467: PPUSH
// if not units then
80468: LD_VAR 0 1
80472: NOT
80473: IFFALSE 80477
// exit ;
80475: GO 80547
// result := [ ] ;
80477: LD_ADDR_VAR 0 3
80481: PUSH
80482: EMPTY
80483: ST_TO_ADDR
// for i in units do
80484: LD_ADDR_VAR 0 4
80488: PUSH
80489: LD_VAR 0 1
80493: PUSH
80494: FOR_IN
80495: IFFALSE 80545
// if GetTag ( i ) = tag then
80497: LD_VAR 0 4
80501: PPUSH
80502: CALL_OW 110
80506: PUSH
80507: LD_VAR 0 2
80511: EQUAL
80512: IFFALSE 80543
// result := Replace ( result , result + 1 , i ) ;
80514: LD_ADDR_VAR 0 3
80518: PUSH
80519: LD_VAR 0 3
80523: PPUSH
80524: LD_VAR 0 3
80528: PUSH
80529: LD_INT 1
80531: PLUS
80532: PPUSH
80533: LD_VAR 0 4
80537: PPUSH
80538: CALL_OW 1
80542: ST_TO_ADDR
80543: GO 80494
80545: POP
80546: POP
// end ;
80547: LD_VAR 0 3
80551: RET
// export function IsDriver ( un ) ; begin
80552: LD_INT 0
80554: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
80555: LD_ADDR_VAR 0 2
80559: PUSH
80560: LD_VAR 0 1
80564: PUSH
80565: LD_INT 55
80567: PUSH
80568: EMPTY
80569: LIST
80570: PPUSH
80571: CALL_OW 69
80575: IN
80576: ST_TO_ADDR
// end ;
80577: LD_VAR 0 2
80581: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
80582: LD_INT 0
80584: PPUSH
80585: PPUSH
// list := [ ] ;
80586: LD_ADDR_VAR 0 5
80590: PUSH
80591: EMPTY
80592: ST_TO_ADDR
// case d of 0 :
80593: LD_VAR 0 3
80597: PUSH
80598: LD_INT 0
80600: DOUBLE
80601: EQUAL
80602: IFTRUE 80606
80604: GO 80739
80606: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
80607: LD_ADDR_VAR 0 5
80611: PUSH
80612: LD_VAR 0 1
80616: PUSH
80617: LD_INT 4
80619: MINUS
80620: PUSH
80621: LD_VAR 0 2
80625: PUSH
80626: LD_INT 4
80628: MINUS
80629: PUSH
80630: LD_INT 2
80632: PUSH
80633: EMPTY
80634: LIST
80635: LIST
80636: LIST
80637: PUSH
80638: LD_VAR 0 1
80642: PUSH
80643: LD_INT 3
80645: MINUS
80646: PUSH
80647: LD_VAR 0 2
80651: PUSH
80652: LD_INT 1
80654: PUSH
80655: EMPTY
80656: LIST
80657: LIST
80658: LIST
80659: PUSH
80660: LD_VAR 0 1
80664: PUSH
80665: LD_INT 4
80667: PLUS
80668: PUSH
80669: LD_VAR 0 2
80673: PUSH
80674: LD_INT 4
80676: PUSH
80677: EMPTY
80678: LIST
80679: LIST
80680: LIST
80681: PUSH
80682: LD_VAR 0 1
80686: PUSH
80687: LD_INT 3
80689: PLUS
80690: PUSH
80691: LD_VAR 0 2
80695: PUSH
80696: LD_INT 3
80698: PLUS
80699: PUSH
80700: LD_INT 5
80702: PUSH
80703: EMPTY
80704: LIST
80705: LIST
80706: LIST
80707: PUSH
80708: LD_VAR 0 1
80712: PUSH
80713: LD_VAR 0 2
80717: PUSH
80718: LD_INT 4
80720: PLUS
80721: PUSH
80722: LD_INT 0
80724: PUSH
80725: EMPTY
80726: LIST
80727: LIST
80728: LIST
80729: PUSH
80730: EMPTY
80731: LIST
80732: LIST
80733: LIST
80734: LIST
80735: LIST
80736: ST_TO_ADDR
// end ; 1 :
80737: GO 81437
80739: LD_INT 1
80741: DOUBLE
80742: EQUAL
80743: IFTRUE 80747
80745: GO 80880
80747: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
80748: LD_ADDR_VAR 0 5
80752: PUSH
80753: LD_VAR 0 1
80757: PUSH
80758: LD_VAR 0 2
80762: PUSH
80763: LD_INT 4
80765: MINUS
80766: PUSH
80767: LD_INT 3
80769: PUSH
80770: EMPTY
80771: LIST
80772: LIST
80773: LIST
80774: PUSH
80775: LD_VAR 0 1
80779: PUSH
80780: LD_INT 3
80782: MINUS
80783: PUSH
80784: LD_VAR 0 2
80788: PUSH
80789: LD_INT 3
80791: MINUS
80792: PUSH
80793: LD_INT 2
80795: PUSH
80796: EMPTY
80797: LIST
80798: LIST
80799: LIST
80800: PUSH
80801: LD_VAR 0 1
80805: PUSH
80806: LD_INT 4
80808: MINUS
80809: PUSH
80810: LD_VAR 0 2
80814: PUSH
80815: LD_INT 1
80817: PUSH
80818: EMPTY
80819: LIST
80820: LIST
80821: LIST
80822: PUSH
80823: LD_VAR 0 1
80827: PUSH
80828: LD_VAR 0 2
80832: PUSH
80833: LD_INT 3
80835: PLUS
80836: PUSH
80837: LD_INT 0
80839: PUSH
80840: EMPTY
80841: LIST
80842: LIST
80843: LIST
80844: PUSH
80845: LD_VAR 0 1
80849: PUSH
80850: LD_INT 4
80852: PLUS
80853: PUSH
80854: LD_VAR 0 2
80858: PUSH
80859: LD_INT 4
80861: PLUS
80862: PUSH
80863: LD_INT 5
80865: PUSH
80866: EMPTY
80867: LIST
80868: LIST
80869: LIST
80870: PUSH
80871: EMPTY
80872: LIST
80873: LIST
80874: LIST
80875: LIST
80876: LIST
80877: ST_TO_ADDR
// end ; 2 :
80878: GO 81437
80880: LD_INT 2
80882: DOUBLE
80883: EQUAL
80884: IFTRUE 80888
80886: GO 81017
80888: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
80889: LD_ADDR_VAR 0 5
80893: PUSH
80894: LD_VAR 0 1
80898: PUSH
80899: LD_VAR 0 2
80903: PUSH
80904: LD_INT 3
80906: MINUS
80907: PUSH
80908: LD_INT 3
80910: PUSH
80911: EMPTY
80912: LIST
80913: LIST
80914: LIST
80915: PUSH
80916: LD_VAR 0 1
80920: PUSH
80921: LD_INT 4
80923: PLUS
80924: PUSH
80925: LD_VAR 0 2
80929: PUSH
80930: LD_INT 4
80932: PUSH
80933: EMPTY
80934: LIST
80935: LIST
80936: LIST
80937: PUSH
80938: LD_VAR 0 1
80942: PUSH
80943: LD_VAR 0 2
80947: PUSH
80948: LD_INT 4
80950: PLUS
80951: PUSH
80952: LD_INT 0
80954: PUSH
80955: EMPTY
80956: LIST
80957: LIST
80958: LIST
80959: PUSH
80960: LD_VAR 0 1
80964: PUSH
80965: LD_INT 3
80967: MINUS
80968: PUSH
80969: LD_VAR 0 2
80973: PUSH
80974: LD_INT 1
80976: PUSH
80977: EMPTY
80978: LIST
80979: LIST
80980: LIST
80981: PUSH
80982: LD_VAR 0 1
80986: PUSH
80987: LD_INT 4
80989: MINUS
80990: PUSH
80991: LD_VAR 0 2
80995: PUSH
80996: LD_INT 4
80998: MINUS
80999: PUSH
81000: LD_INT 2
81002: PUSH
81003: EMPTY
81004: LIST
81005: LIST
81006: LIST
81007: PUSH
81008: EMPTY
81009: LIST
81010: LIST
81011: LIST
81012: LIST
81013: LIST
81014: ST_TO_ADDR
// end ; 3 :
81015: GO 81437
81017: LD_INT 3
81019: DOUBLE
81020: EQUAL
81021: IFTRUE 81025
81023: GO 81158
81025: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
81026: LD_ADDR_VAR 0 5
81030: PUSH
81031: LD_VAR 0 1
81035: PUSH
81036: LD_INT 3
81038: PLUS
81039: PUSH
81040: LD_VAR 0 2
81044: PUSH
81045: LD_INT 4
81047: PUSH
81048: EMPTY
81049: LIST
81050: LIST
81051: LIST
81052: PUSH
81053: LD_VAR 0 1
81057: PUSH
81058: LD_INT 4
81060: PLUS
81061: PUSH
81062: LD_VAR 0 2
81066: PUSH
81067: LD_INT 4
81069: PLUS
81070: PUSH
81071: LD_INT 5
81073: PUSH
81074: EMPTY
81075: LIST
81076: LIST
81077: LIST
81078: PUSH
81079: LD_VAR 0 1
81083: PUSH
81084: LD_INT 4
81086: MINUS
81087: PUSH
81088: LD_VAR 0 2
81092: PUSH
81093: LD_INT 1
81095: PUSH
81096: EMPTY
81097: LIST
81098: LIST
81099: LIST
81100: PUSH
81101: LD_VAR 0 1
81105: PUSH
81106: LD_VAR 0 2
81110: PUSH
81111: LD_INT 4
81113: MINUS
81114: PUSH
81115: LD_INT 3
81117: PUSH
81118: EMPTY
81119: LIST
81120: LIST
81121: LIST
81122: PUSH
81123: LD_VAR 0 1
81127: PUSH
81128: LD_INT 3
81130: MINUS
81131: PUSH
81132: LD_VAR 0 2
81136: PUSH
81137: LD_INT 3
81139: MINUS
81140: PUSH
81141: LD_INT 2
81143: PUSH
81144: EMPTY
81145: LIST
81146: LIST
81147: LIST
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: LIST
81153: LIST
81154: LIST
81155: ST_TO_ADDR
// end ; 4 :
81156: GO 81437
81158: LD_INT 4
81160: DOUBLE
81161: EQUAL
81162: IFTRUE 81166
81164: GO 81299
81166: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
81167: LD_ADDR_VAR 0 5
81171: PUSH
81172: LD_VAR 0 1
81176: PUSH
81177: LD_VAR 0 2
81181: PUSH
81182: LD_INT 4
81184: PLUS
81185: PUSH
81186: LD_INT 0
81188: PUSH
81189: EMPTY
81190: LIST
81191: LIST
81192: LIST
81193: PUSH
81194: LD_VAR 0 1
81198: PUSH
81199: LD_INT 3
81201: PLUS
81202: PUSH
81203: LD_VAR 0 2
81207: PUSH
81208: LD_INT 3
81210: PLUS
81211: PUSH
81212: LD_INT 5
81214: PUSH
81215: EMPTY
81216: LIST
81217: LIST
81218: LIST
81219: PUSH
81220: LD_VAR 0 1
81224: PUSH
81225: LD_INT 4
81227: PLUS
81228: PUSH
81229: LD_VAR 0 2
81233: PUSH
81234: LD_INT 4
81236: PUSH
81237: EMPTY
81238: LIST
81239: LIST
81240: LIST
81241: PUSH
81242: LD_VAR 0 1
81246: PUSH
81247: LD_VAR 0 2
81251: PUSH
81252: LD_INT 3
81254: MINUS
81255: PUSH
81256: LD_INT 3
81258: PUSH
81259: EMPTY
81260: LIST
81261: LIST
81262: LIST
81263: PUSH
81264: LD_VAR 0 1
81268: PUSH
81269: LD_INT 4
81271: MINUS
81272: PUSH
81273: LD_VAR 0 2
81277: PUSH
81278: LD_INT 4
81280: MINUS
81281: PUSH
81282: LD_INT 2
81284: PUSH
81285: EMPTY
81286: LIST
81287: LIST
81288: LIST
81289: PUSH
81290: EMPTY
81291: LIST
81292: LIST
81293: LIST
81294: LIST
81295: LIST
81296: ST_TO_ADDR
// end ; 5 :
81297: GO 81437
81299: LD_INT 5
81301: DOUBLE
81302: EQUAL
81303: IFTRUE 81307
81305: GO 81436
81307: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
81308: LD_ADDR_VAR 0 5
81312: PUSH
81313: LD_VAR 0 1
81317: PUSH
81318: LD_INT 4
81320: MINUS
81321: PUSH
81322: LD_VAR 0 2
81326: PUSH
81327: LD_INT 1
81329: PUSH
81330: EMPTY
81331: LIST
81332: LIST
81333: LIST
81334: PUSH
81335: LD_VAR 0 1
81339: PUSH
81340: LD_VAR 0 2
81344: PUSH
81345: LD_INT 4
81347: MINUS
81348: PUSH
81349: LD_INT 3
81351: PUSH
81352: EMPTY
81353: LIST
81354: LIST
81355: LIST
81356: PUSH
81357: LD_VAR 0 1
81361: PUSH
81362: LD_INT 4
81364: PLUS
81365: PUSH
81366: LD_VAR 0 2
81370: PUSH
81371: LD_INT 4
81373: PLUS
81374: PUSH
81375: LD_INT 5
81377: PUSH
81378: EMPTY
81379: LIST
81380: LIST
81381: LIST
81382: PUSH
81383: LD_VAR 0 1
81387: PUSH
81388: LD_INT 3
81390: PLUS
81391: PUSH
81392: LD_VAR 0 2
81396: PUSH
81397: LD_INT 4
81399: PUSH
81400: EMPTY
81401: LIST
81402: LIST
81403: LIST
81404: PUSH
81405: LD_VAR 0 1
81409: PUSH
81410: LD_VAR 0 2
81414: PUSH
81415: LD_INT 3
81417: PLUS
81418: PUSH
81419: LD_INT 0
81421: PUSH
81422: EMPTY
81423: LIST
81424: LIST
81425: LIST
81426: PUSH
81427: EMPTY
81428: LIST
81429: LIST
81430: LIST
81431: LIST
81432: LIST
81433: ST_TO_ADDR
// end ; end ;
81434: GO 81437
81436: POP
// result := list ;
81437: LD_ADDR_VAR 0 4
81441: PUSH
81442: LD_VAR 0 5
81446: ST_TO_ADDR
// end ;
81447: LD_VAR 0 4
81451: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
81452: LD_INT 0
81454: PPUSH
81455: PPUSH
81456: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
81457: LD_VAR 0 1
81461: NOT
81462: PUSH
81463: LD_VAR 0 2
81467: PUSH
81468: LD_INT 1
81470: PUSH
81471: LD_INT 2
81473: PUSH
81474: LD_INT 3
81476: PUSH
81477: LD_INT 4
81479: PUSH
81480: EMPTY
81481: LIST
81482: LIST
81483: LIST
81484: LIST
81485: IN
81486: NOT
81487: OR
81488: IFFALSE 81492
// exit ;
81490: GO 81584
// tmp := [ ] ;
81492: LD_ADDR_VAR 0 5
81496: PUSH
81497: EMPTY
81498: ST_TO_ADDR
// for i in units do
81499: LD_ADDR_VAR 0 4
81503: PUSH
81504: LD_VAR 0 1
81508: PUSH
81509: FOR_IN
81510: IFFALSE 81553
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
81512: LD_ADDR_VAR 0 5
81516: PUSH
81517: LD_VAR 0 5
81521: PPUSH
81522: LD_VAR 0 5
81526: PUSH
81527: LD_INT 1
81529: PLUS
81530: PPUSH
81531: LD_VAR 0 4
81535: PPUSH
81536: LD_VAR 0 2
81540: PPUSH
81541: CALL_OW 259
81545: PPUSH
81546: CALL_OW 2
81550: ST_TO_ADDR
81551: GO 81509
81553: POP
81554: POP
// if not tmp then
81555: LD_VAR 0 5
81559: NOT
81560: IFFALSE 81564
// exit ;
81562: GO 81584
// result := SortListByListDesc ( units , tmp ) ;
81564: LD_ADDR_VAR 0 3
81568: PUSH
81569: LD_VAR 0 1
81573: PPUSH
81574: LD_VAR 0 5
81578: PPUSH
81579: CALL_OW 77
81583: ST_TO_ADDR
// end ;
81584: LD_VAR 0 3
81588: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
81589: LD_INT 0
81591: PPUSH
81592: PPUSH
81593: PPUSH
// result := false ;
81594: LD_ADDR_VAR 0 3
81598: PUSH
81599: LD_INT 0
81601: ST_TO_ADDR
// x := GetX ( building ) ;
81602: LD_ADDR_VAR 0 4
81606: PUSH
81607: LD_VAR 0 2
81611: PPUSH
81612: CALL_OW 250
81616: ST_TO_ADDR
// y := GetY ( building ) ;
81617: LD_ADDR_VAR 0 5
81621: PUSH
81622: LD_VAR 0 2
81626: PPUSH
81627: CALL_OW 251
81631: ST_TO_ADDR
// if not building or not x or not y then
81632: LD_VAR 0 2
81636: NOT
81637: PUSH
81638: LD_VAR 0 4
81642: NOT
81643: OR
81644: PUSH
81645: LD_VAR 0 5
81649: NOT
81650: OR
81651: IFFALSE 81655
// exit ;
81653: GO 81747
// if GetTaskList ( unit ) then
81655: LD_VAR 0 1
81659: PPUSH
81660: CALL_OW 437
81664: IFFALSE 81747
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81666: LD_STRING e
81668: PUSH
81669: LD_VAR 0 1
81673: PPUSH
81674: CALL_OW 437
81678: PUSH
81679: LD_INT 1
81681: ARRAY
81682: PUSH
81683: LD_INT 1
81685: ARRAY
81686: EQUAL
81687: PUSH
81688: LD_VAR 0 4
81692: PUSH
81693: LD_VAR 0 1
81697: PPUSH
81698: CALL_OW 437
81702: PUSH
81703: LD_INT 1
81705: ARRAY
81706: PUSH
81707: LD_INT 2
81709: ARRAY
81710: EQUAL
81711: AND
81712: PUSH
81713: LD_VAR 0 5
81717: PUSH
81718: LD_VAR 0 1
81722: PPUSH
81723: CALL_OW 437
81727: PUSH
81728: LD_INT 1
81730: ARRAY
81731: PUSH
81732: LD_INT 3
81734: ARRAY
81735: EQUAL
81736: AND
81737: IFFALSE 81747
// result := true end ;
81739: LD_ADDR_VAR 0 3
81743: PUSH
81744: LD_INT 1
81746: ST_TO_ADDR
// end ;
81747: LD_VAR 0 3
81751: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
81752: LD_INT 0
81754: PPUSH
// result := false ;
81755: LD_ADDR_VAR 0 4
81759: PUSH
81760: LD_INT 0
81762: ST_TO_ADDR
// if GetTaskList ( unit ) then
81763: LD_VAR 0 1
81767: PPUSH
81768: CALL_OW 437
81772: IFFALSE 81855
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81774: LD_STRING M
81776: PUSH
81777: LD_VAR 0 1
81781: PPUSH
81782: CALL_OW 437
81786: PUSH
81787: LD_INT 1
81789: ARRAY
81790: PUSH
81791: LD_INT 1
81793: ARRAY
81794: EQUAL
81795: PUSH
81796: LD_VAR 0 2
81800: PUSH
81801: LD_VAR 0 1
81805: PPUSH
81806: CALL_OW 437
81810: PUSH
81811: LD_INT 1
81813: ARRAY
81814: PUSH
81815: LD_INT 2
81817: ARRAY
81818: EQUAL
81819: AND
81820: PUSH
81821: LD_VAR 0 3
81825: PUSH
81826: LD_VAR 0 1
81830: PPUSH
81831: CALL_OW 437
81835: PUSH
81836: LD_INT 1
81838: ARRAY
81839: PUSH
81840: LD_INT 3
81842: ARRAY
81843: EQUAL
81844: AND
81845: IFFALSE 81855
// result := true ;
81847: LD_ADDR_VAR 0 4
81851: PUSH
81852: LD_INT 1
81854: ST_TO_ADDR
// end ; end ;
81855: LD_VAR 0 4
81859: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
81860: LD_INT 0
81862: PPUSH
81863: PPUSH
81864: PPUSH
81865: PPUSH
// if not unit or not area then
81866: LD_VAR 0 1
81870: NOT
81871: PUSH
81872: LD_VAR 0 2
81876: NOT
81877: OR
81878: IFFALSE 81882
// exit ;
81880: GO 82046
// tmp := AreaToList ( area , i ) ;
81882: LD_ADDR_VAR 0 6
81886: PUSH
81887: LD_VAR 0 2
81891: PPUSH
81892: LD_VAR 0 5
81896: PPUSH
81897: CALL_OW 517
81901: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
81902: LD_ADDR_VAR 0 5
81906: PUSH
81907: DOUBLE
81908: LD_INT 1
81910: DEC
81911: ST_TO_ADDR
81912: LD_VAR 0 6
81916: PUSH
81917: LD_INT 1
81919: ARRAY
81920: PUSH
81921: FOR_TO
81922: IFFALSE 82044
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
81924: LD_ADDR_VAR 0 7
81928: PUSH
81929: LD_VAR 0 6
81933: PUSH
81934: LD_INT 1
81936: ARRAY
81937: PUSH
81938: LD_VAR 0 5
81942: ARRAY
81943: PUSH
81944: LD_VAR 0 6
81948: PUSH
81949: LD_INT 2
81951: ARRAY
81952: PUSH
81953: LD_VAR 0 5
81957: ARRAY
81958: PUSH
81959: EMPTY
81960: LIST
81961: LIST
81962: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
81963: LD_VAR 0 7
81967: PUSH
81968: LD_INT 1
81970: ARRAY
81971: PPUSH
81972: LD_VAR 0 7
81976: PUSH
81977: LD_INT 2
81979: ARRAY
81980: PPUSH
81981: CALL_OW 428
81985: PUSH
81986: LD_INT 0
81988: EQUAL
81989: IFFALSE 82042
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
81991: LD_VAR 0 1
81995: PPUSH
81996: LD_VAR 0 7
82000: PUSH
82001: LD_INT 1
82003: ARRAY
82004: PPUSH
82005: LD_VAR 0 7
82009: PUSH
82010: LD_INT 2
82012: ARRAY
82013: PPUSH
82014: LD_VAR 0 3
82018: PPUSH
82019: CALL_OW 48
// result := IsPlaced ( unit ) ;
82023: LD_ADDR_VAR 0 4
82027: PUSH
82028: LD_VAR 0 1
82032: PPUSH
82033: CALL_OW 305
82037: ST_TO_ADDR
// exit ;
82038: POP
82039: POP
82040: GO 82046
// end ; end ;
82042: GO 81921
82044: POP
82045: POP
// end ;
82046: LD_VAR 0 4
82050: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
82051: LD_INT 0
82053: PPUSH
82054: PPUSH
82055: PPUSH
// if not side or side > 8 then
82056: LD_VAR 0 1
82060: NOT
82061: PUSH
82062: LD_VAR 0 1
82066: PUSH
82067: LD_INT 8
82069: GREATER
82070: OR
82071: IFFALSE 82075
// exit ;
82073: GO 82262
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
82075: LD_ADDR_VAR 0 4
82079: PUSH
82080: LD_INT 22
82082: PUSH
82083: LD_VAR 0 1
82087: PUSH
82088: EMPTY
82089: LIST
82090: LIST
82091: PUSH
82092: LD_INT 21
82094: PUSH
82095: LD_INT 3
82097: PUSH
82098: EMPTY
82099: LIST
82100: LIST
82101: PUSH
82102: EMPTY
82103: LIST
82104: LIST
82105: PPUSH
82106: CALL_OW 69
82110: ST_TO_ADDR
// if not tmp then
82111: LD_VAR 0 4
82115: NOT
82116: IFFALSE 82120
// exit ;
82118: GO 82262
// enable_addtolog := true ;
82120: LD_ADDR_OWVAR 81
82124: PUSH
82125: LD_INT 1
82127: ST_TO_ADDR
// AddToLog ( [ ) ;
82128: LD_STRING [
82130: PPUSH
82131: CALL_OW 561
// for i in tmp do
82135: LD_ADDR_VAR 0 3
82139: PUSH
82140: LD_VAR 0 4
82144: PUSH
82145: FOR_IN
82146: IFFALSE 82253
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
82148: LD_STRING [
82150: PUSH
82151: LD_VAR 0 3
82155: PPUSH
82156: CALL_OW 266
82160: STR
82161: PUSH
82162: LD_STRING , 
82164: STR
82165: PUSH
82166: LD_VAR 0 3
82170: PPUSH
82171: CALL_OW 250
82175: STR
82176: PUSH
82177: LD_STRING , 
82179: STR
82180: PUSH
82181: LD_VAR 0 3
82185: PPUSH
82186: CALL_OW 251
82190: STR
82191: PUSH
82192: LD_STRING , 
82194: STR
82195: PUSH
82196: LD_VAR 0 3
82200: PPUSH
82201: CALL_OW 254
82205: STR
82206: PUSH
82207: LD_STRING , 
82209: STR
82210: PUSH
82211: LD_VAR 0 3
82215: PPUSH
82216: LD_INT 1
82218: PPUSH
82219: CALL_OW 268
82223: STR
82224: PUSH
82225: LD_STRING , 
82227: STR
82228: PUSH
82229: LD_VAR 0 3
82233: PPUSH
82234: LD_INT 2
82236: PPUSH
82237: CALL_OW 268
82241: STR
82242: PUSH
82243: LD_STRING ],
82245: STR
82246: PPUSH
82247: CALL_OW 561
// end ;
82251: GO 82145
82253: POP
82254: POP
// AddToLog ( ]; ) ;
82255: LD_STRING ];
82257: PPUSH
82258: CALL_OW 561
// end ;
82262: LD_VAR 0 2
82266: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
82267: LD_INT 0
82269: PPUSH
82270: PPUSH
82271: PPUSH
82272: PPUSH
82273: PPUSH
// if not area or not rate or not max then
82274: LD_VAR 0 1
82278: NOT
82279: PUSH
82280: LD_VAR 0 2
82284: NOT
82285: OR
82286: PUSH
82287: LD_VAR 0 4
82291: NOT
82292: OR
82293: IFFALSE 82297
// exit ;
82295: GO 82489
// while 1 do
82297: LD_INT 1
82299: IFFALSE 82489
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
82301: LD_ADDR_VAR 0 9
82305: PUSH
82306: LD_VAR 0 1
82310: PPUSH
82311: LD_INT 1
82313: PPUSH
82314: CALL_OW 287
82318: PUSH
82319: LD_INT 10
82321: MUL
82322: ST_TO_ADDR
// r := rate / 10 ;
82323: LD_ADDR_VAR 0 7
82327: PUSH
82328: LD_VAR 0 2
82332: PUSH
82333: LD_INT 10
82335: DIVREAL
82336: ST_TO_ADDR
// time := 1 1$00 ;
82337: LD_ADDR_VAR 0 8
82341: PUSH
82342: LD_INT 2100
82344: ST_TO_ADDR
// if amount < min then
82345: LD_VAR 0 9
82349: PUSH
82350: LD_VAR 0 3
82354: LESS
82355: IFFALSE 82373
// r := r * 2 else
82357: LD_ADDR_VAR 0 7
82361: PUSH
82362: LD_VAR 0 7
82366: PUSH
82367: LD_INT 2
82369: MUL
82370: ST_TO_ADDR
82371: GO 82399
// if amount > max then
82373: LD_VAR 0 9
82377: PUSH
82378: LD_VAR 0 4
82382: GREATER
82383: IFFALSE 82399
// r := r / 2 ;
82385: LD_ADDR_VAR 0 7
82389: PUSH
82390: LD_VAR 0 7
82394: PUSH
82395: LD_INT 2
82397: DIVREAL
82398: ST_TO_ADDR
// time := time / r ;
82399: LD_ADDR_VAR 0 8
82403: PUSH
82404: LD_VAR 0 8
82408: PUSH
82409: LD_VAR 0 7
82413: DIVREAL
82414: ST_TO_ADDR
// if time < 0 then
82415: LD_VAR 0 8
82419: PUSH
82420: LD_INT 0
82422: LESS
82423: IFFALSE 82440
// time := time * - 1 ;
82425: LD_ADDR_VAR 0 8
82429: PUSH
82430: LD_VAR 0 8
82434: PUSH
82435: LD_INT 1
82437: NEG
82438: MUL
82439: ST_TO_ADDR
// wait ( time ) ;
82440: LD_VAR 0 8
82444: PPUSH
82445: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
82449: LD_INT 35
82451: PPUSH
82452: LD_INT 875
82454: PPUSH
82455: CALL_OW 12
82459: PPUSH
82460: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
82464: LD_INT 1
82466: PPUSH
82467: LD_INT 5
82469: PPUSH
82470: CALL_OW 12
82474: PPUSH
82475: LD_VAR 0 1
82479: PPUSH
82480: LD_INT 1
82482: PPUSH
82483: CALL_OW 55
// end ;
82487: GO 82297
// end ;
82489: LD_VAR 0 5
82493: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
82494: LD_INT 0
82496: PPUSH
82497: PPUSH
82498: PPUSH
82499: PPUSH
82500: PPUSH
82501: PPUSH
82502: PPUSH
82503: PPUSH
// if not turrets or not factories then
82504: LD_VAR 0 1
82508: NOT
82509: PUSH
82510: LD_VAR 0 2
82514: NOT
82515: OR
82516: IFFALSE 82520
// exit ;
82518: GO 82827
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
82520: LD_ADDR_VAR 0 10
82524: PUSH
82525: LD_INT 5
82527: PUSH
82528: LD_INT 6
82530: PUSH
82531: EMPTY
82532: LIST
82533: LIST
82534: PUSH
82535: LD_INT 2
82537: PUSH
82538: LD_INT 4
82540: PUSH
82541: EMPTY
82542: LIST
82543: LIST
82544: PUSH
82545: LD_INT 3
82547: PUSH
82548: LD_INT 5
82550: PUSH
82551: EMPTY
82552: LIST
82553: LIST
82554: PUSH
82555: EMPTY
82556: LIST
82557: LIST
82558: LIST
82559: PUSH
82560: LD_INT 24
82562: PUSH
82563: LD_INT 25
82565: PUSH
82566: EMPTY
82567: LIST
82568: LIST
82569: PUSH
82570: LD_INT 23
82572: PUSH
82573: LD_INT 27
82575: PUSH
82576: EMPTY
82577: LIST
82578: LIST
82579: PUSH
82580: EMPTY
82581: LIST
82582: LIST
82583: PUSH
82584: LD_INT 42
82586: PUSH
82587: LD_INT 43
82589: PUSH
82590: EMPTY
82591: LIST
82592: LIST
82593: PUSH
82594: LD_INT 44
82596: PUSH
82597: LD_INT 46
82599: PUSH
82600: EMPTY
82601: LIST
82602: LIST
82603: PUSH
82604: LD_INT 45
82606: PUSH
82607: LD_INT 47
82609: PUSH
82610: EMPTY
82611: LIST
82612: LIST
82613: PUSH
82614: EMPTY
82615: LIST
82616: LIST
82617: LIST
82618: PUSH
82619: EMPTY
82620: LIST
82621: LIST
82622: LIST
82623: ST_TO_ADDR
// result := [ ] ;
82624: LD_ADDR_VAR 0 3
82628: PUSH
82629: EMPTY
82630: ST_TO_ADDR
// for i in turrets do
82631: LD_ADDR_VAR 0 4
82635: PUSH
82636: LD_VAR 0 1
82640: PUSH
82641: FOR_IN
82642: IFFALSE 82825
// begin nat := GetNation ( i ) ;
82644: LD_ADDR_VAR 0 7
82648: PUSH
82649: LD_VAR 0 4
82653: PPUSH
82654: CALL_OW 248
82658: ST_TO_ADDR
// weapon := 0 ;
82659: LD_ADDR_VAR 0 8
82663: PUSH
82664: LD_INT 0
82666: ST_TO_ADDR
// if not nat then
82667: LD_VAR 0 7
82671: NOT
82672: IFFALSE 82676
// continue ;
82674: GO 82641
// for j in list [ nat ] do
82676: LD_ADDR_VAR 0 5
82680: PUSH
82681: LD_VAR 0 10
82685: PUSH
82686: LD_VAR 0 7
82690: ARRAY
82691: PUSH
82692: FOR_IN
82693: IFFALSE 82734
// if GetBWeapon ( i ) = j [ 1 ] then
82695: LD_VAR 0 4
82699: PPUSH
82700: CALL_OW 269
82704: PUSH
82705: LD_VAR 0 5
82709: PUSH
82710: LD_INT 1
82712: ARRAY
82713: EQUAL
82714: IFFALSE 82732
// begin weapon := j [ 2 ] ;
82716: LD_ADDR_VAR 0 8
82720: PUSH
82721: LD_VAR 0 5
82725: PUSH
82726: LD_INT 2
82728: ARRAY
82729: ST_TO_ADDR
// break ;
82730: GO 82734
// end ;
82732: GO 82692
82734: POP
82735: POP
// if not weapon then
82736: LD_VAR 0 8
82740: NOT
82741: IFFALSE 82745
// continue ;
82743: GO 82641
// for k in factories do
82745: LD_ADDR_VAR 0 6
82749: PUSH
82750: LD_VAR 0 2
82754: PUSH
82755: FOR_IN
82756: IFFALSE 82821
// begin weapons := AvailableWeaponList ( k ) ;
82758: LD_ADDR_VAR 0 9
82762: PUSH
82763: LD_VAR 0 6
82767: PPUSH
82768: CALL_OW 478
82772: ST_TO_ADDR
// if not weapons then
82773: LD_VAR 0 9
82777: NOT
82778: IFFALSE 82782
// continue ;
82780: GO 82755
// if weapon in weapons then
82782: LD_VAR 0 8
82786: PUSH
82787: LD_VAR 0 9
82791: IN
82792: IFFALSE 82819
// begin result := [ i , weapon ] ;
82794: LD_ADDR_VAR 0 3
82798: PUSH
82799: LD_VAR 0 4
82803: PUSH
82804: LD_VAR 0 8
82808: PUSH
82809: EMPTY
82810: LIST
82811: LIST
82812: ST_TO_ADDR
// exit ;
82813: POP
82814: POP
82815: POP
82816: POP
82817: GO 82827
// end ; end ;
82819: GO 82755
82821: POP
82822: POP
// end ;
82823: GO 82641
82825: POP
82826: POP
// end ;
82827: LD_VAR 0 3
82831: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
82832: LD_INT 0
82834: PPUSH
// if not side or side > 8 then
82835: LD_VAR 0 3
82839: NOT
82840: PUSH
82841: LD_VAR 0 3
82845: PUSH
82846: LD_INT 8
82848: GREATER
82849: OR
82850: IFFALSE 82854
// exit ;
82852: GO 82913
// if not range then
82854: LD_VAR 0 4
82858: NOT
82859: IFFALSE 82870
// range := - 12 ;
82861: LD_ADDR_VAR 0 4
82865: PUSH
82866: LD_INT 12
82868: NEG
82869: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
82870: LD_VAR 0 1
82874: PPUSH
82875: LD_VAR 0 2
82879: PPUSH
82880: LD_VAR 0 3
82884: PPUSH
82885: LD_VAR 0 4
82889: PPUSH
82890: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
82894: LD_VAR 0 1
82898: PPUSH
82899: LD_VAR 0 2
82903: PPUSH
82904: LD_VAR 0 3
82908: PPUSH
82909: CALL_OW 331
// end ;
82913: LD_VAR 0 5
82917: RET
// export function Video ( mode ) ; begin
82918: LD_INT 0
82920: PPUSH
// ingame_video = mode ;
82921: LD_ADDR_OWVAR 52
82925: PUSH
82926: LD_VAR 0 1
82930: ST_TO_ADDR
// interface_hidden = mode ;
82931: LD_ADDR_OWVAR 54
82935: PUSH
82936: LD_VAR 0 1
82940: ST_TO_ADDR
// end ;
82941: LD_VAR 0 2
82945: RET
// export function Join ( array , element ) ; begin
82946: LD_INT 0
82948: PPUSH
// result := Replace ( array , array + 1 , element ) ;
82949: LD_ADDR_VAR 0 3
82953: PUSH
82954: LD_VAR 0 1
82958: PPUSH
82959: LD_VAR 0 1
82963: PUSH
82964: LD_INT 1
82966: PLUS
82967: PPUSH
82968: LD_VAR 0 2
82972: PPUSH
82973: CALL_OW 1
82977: ST_TO_ADDR
// end ;
82978: LD_VAR 0 3
82982: RET
// export function JoinUnion ( array , element ) ; begin
82983: LD_INT 0
82985: PPUSH
// result := array union element ;
82986: LD_ADDR_VAR 0 3
82990: PUSH
82991: LD_VAR 0 1
82995: PUSH
82996: LD_VAR 0 2
83000: UNION
83001: ST_TO_ADDR
// end ;
83002: LD_VAR 0 3
83006: RET
// export function GetBehemoths ( side ) ; begin
83007: LD_INT 0
83009: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
83010: LD_ADDR_VAR 0 2
83014: PUSH
83015: LD_INT 22
83017: PUSH
83018: LD_VAR 0 1
83022: PUSH
83023: EMPTY
83024: LIST
83025: LIST
83026: PUSH
83027: LD_INT 31
83029: PUSH
83030: LD_INT 25
83032: PUSH
83033: EMPTY
83034: LIST
83035: LIST
83036: PUSH
83037: EMPTY
83038: LIST
83039: LIST
83040: PPUSH
83041: CALL_OW 69
83045: ST_TO_ADDR
// end ;
83046: LD_VAR 0 2
83050: RET
// export function Shuffle ( array ) ; var i , index ; begin
83051: LD_INT 0
83053: PPUSH
83054: PPUSH
83055: PPUSH
// result := [ ] ;
83056: LD_ADDR_VAR 0 2
83060: PUSH
83061: EMPTY
83062: ST_TO_ADDR
// if not array then
83063: LD_VAR 0 1
83067: NOT
83068: IFFALSE 83072
// exit ;
83070: GO 83171
// Randomize ;
83072: CALL_OW 10
// for i = array downto 1 do
83076: LD_ADDR_VAR 0 3
83080: PUSH
83081: DOUBLE
83082: LD_VAR 0 1
83086: INC
83087: ST_TO_ADDR
83088: LD_INT 1
83090: PUSH
83091: FOR_DOWNTO
83092: IFFALSE 83169
// begin index := rand ( 1 , array ) ;
83094: LD_ADDR_VAR 0 4
83098: PUSH
83099: LD_INT 1
83101: PPUSH
83102: LD_VAR 0 1
83106: PPUSH
83107: CALL_OW 12
83111: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
83112: LD_ADDR_VAR 0 2
83116: PUSH
83117: LD_VAR 0 2
83121: PPUSH
83122: LD_VAR 0 2
83126: PUSH
83127: LD_INT 1
83129: PLUS
83130: PPUSH
83131: LD_VAR 0 1
83135: PUSH
83136: LD_VAR 0 4
83140: ARRAY
83141: PPUSH
83142: CALL_OW 2
83146: ST_TO_ADDR
// array := Delete ( array , index ) ;
83147: LD_ADDR_VAR 0 1
83151: PUSH
83152: LD_VAR 0 1
83156: PPUSH
83157: LD_VAR 0 4
83161: PPUSH
83162: CALL_OW 3
83166: ST_TO_ADDR
// end ;
83167: GO 83091
83169: POP
83170: POP
// end ;
83171: LD_VAR 0 2
83175: RET
// export function GetBaseMaterials ( base ) ; begin
83176: LD_INT 0
83178: PPUSH
// result := [ 0 , 0 , 0 ] ;
83179: LD_ADDR_VAR 0 2
83183: PUSH
83184: LD_INT 0
83186: PUSH
83187: LD_INT 0
83189: PUSH
83190: LD_INT 0
83192: PUSH
83193: EMPTY
83194: LIST
83195: LIST
83196: LIST
83197: ST_TO_ADDR
// if not base then
83198: LD_VAR 0 1
83202: NOT
83203: IFFALSE 83207
// exit ;
83205: GO 83256
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
83207: LD_ADDR_VAR 0 2
83211: PUSH
83212: LD_VAR 0 1
83216: PPUSH
83217: LD_INT 1
83219: PPUSH
83220: CALL_OW 275
83224: PUSH
83225: LD_VAR 0 1
83229: PPUSH
83230: LD_INT 2
83232: PPUSH
83233: CALL_OW 275
83237: PUSH
83238: LD_VAR 0 1
83242: PPUSH
83243: LD_INT 3
83245: PPUSH
83246: CALL_OW 275
83250: PUSH
83251: EMPTY
83252: LIST
83253: LIST
83254: LIST
83255: ST_TO_ADDR
// end ;
83256: LD_VAR 0 2
83260: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
83261: LD_INT 0
83263: PPUSH
83264: PPUSH
// result := array ;
83265: LD_ADDR_VAR 0 3
83269: PUSH
83270: LD_VAR 0 1
83274: ST_TO_ADDR
// if size > 0 then
83275: LD_VAR 0 2
83279: PUSH
83280: LD_INT 0
83282: GREATER
83283: IFFALSE 83329
// for i := array downto size do
83285: LD_ADDR_VAR 0 4
83289: PUSH
83290: DOUBLE
83291: LD_VAR 0 1
83295: INC
83296: ST_TO_ADDR
83297: LD_VAR 0 2
83301: PUSH
83302: FOR_DOWNTO
83303: IFFALSE 83327
// result := Delete ( result , result ) ;
83305: LD_ADDR_VAR 0 3
83309: PUSH
83310: LD_VAR 0 3
83314: PPUSH
83315: LD_VAR 0 3
83319: PPUSH
83320: CALL_OW 3
83324: ST_TO_ADDR
83325: GO 83302
83327: POP
83328: POP
// end ;
83329: LD_VAR 0 3
83333: RET
// export function ComExit ( unit ) ; var tmp ; begin
83334: LD_INT 0
83336: PPUSH
83337: PPUSH
// if not IsInUnit ( unit ) then
83338: LD_VAR 0 1
83342: PPUSH
83343: CALL_OW 310
83347: NOT
83348: IFFALSE 83352
// exit ;
83350: GO 83412
// tmp := IsInUnit ( unit ) ;
83352: LD_ADDR_VAR 0 3
83356: PUSH
83357: LD_VAR 0 1
83361: PPUSH
83362: CALL_OW 310
83366: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
83367: LD_VAR 0 3
83371: PPUSH
83372: CALL_OW 247
83376: PUSH
83377: LD_INT 2
83379: EQUAL
83380: IFFALSE 83393
// ComExitVehicle ( unit ) else
83382: LD_VAR 0 1
83386: PPUSH
83387: CALL_OW 121
83391: GO 83402
// ComExitBuilding ( unit ) ;
83393: LD_VAR 0 1
83397: PPUSH
83398: CALL_OW 122
// result := tmp ;
83402: LD_ADDR_VAR 0 2
83406: PUSH
83407: LD_VAR 0 3
83411: ST_TO_ADDR
// end ;
83412: LD_VAR 0 2
83416: RET
// export function ComExitAll ( units ) ; var i ; begin
83417: LD_INT 0
83419: PPUSH
83420: PPUSH
// if not units then
83421: LD_VAR 0 1
83425: NOT
83426: IFFALSE 83430
// exit ;
83428: GO 83456
// for i in units do
83430: LD_ADDR_VAR 0 3
83434: PUSH
83435: LD_VAR 0 1
83439: PUSH
83440: FOR_IN
83441: IFFALSE 83454
// ComExit ( i ) ;
83443: LD_VAR 0 3
83447: PPUSH
83448: CALL 83334 0 1
83452: GO 83440
83454: POP
83455: POP
// end ;
83456: LD_VAR 0 2
83460: RET
// export function ResetHc ; begin
83461: LD_INT 0
83463: PPUSH
// InitHc ;
83464: CALL_OW 19
// hc_importance := 0 ;
83468: LD_ADDR_OWVAR 32
83472: PUSH
83473: LD_INT 0
83475: ST_TO_ADDR
// end ;
83476: LD_VAR 0 1
83480: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
83481: LD_INT 0
83483: PPUSH
83484: PPUSH
83485: PPUSH
// _x := ( x1 + x2 ) div 2 ;
83486: LD_ADDR_VAR 0 6
83490: PUSH
83491: LD_VAR 0 1
83495: PUSH
83496: LD_VAR 0 3
83500: PLUS
83501: PUSH
83502: LD_INT 2
83504: DIV
83505: ST_TO_ADDR
// if _x < 0 then
83506: LD_VAR 0 6
83510: PUSH
83511: LD_INT 0
83513: LESS
83514: IFFALSE 83531
// _x := _x * - 1 ;
83516: LD_ADDR_VAR 0 6
83520: PUSH
83521: LD_VAR 0 6
83525: PUSH
83526: LD_INT 1
83528: NEG
83529: MUL
83530: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
83531: LD_ADDR_VAR 0 7
83535: PUSH
83536: LD_VAR 0 2
83540: PUSH
83541: LD_VAR 0 4
83545: PLUS
83546: PUSH
83547: LD_INT 2
83549: DIV
83550: ST_TO_ADDR
// if _y < 0 then
83551: LD_VAR 0 7
83555: PUSH
83556: LD_INT 0
83558: LESS
83559: IFFALSE 83576
// _y := _y * - 1 ;
83561: LD_ADDR_VAR 0 7
83565: PUSH
83566: LD_VAR 0 7
83570: PUSH
83571: LD_INT 1
83573: NEG
83574: MUL
83575: ST_TO_ADDR
// result := [ _x , _y ] ;
83576: LD_ADDR_VAR 0 5
83580: PUSH
83581: LD_VAR 0 6
83585: PUSH
83586: LD_VAR 0 7
83590: PUSH
83591: EMPTY
83592: LIST
83593: LIST
83594: ST_TO_ADDR
// end ;
83595: LD_VAR 0 5
83599: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
83600: LD_INT 0
83602: PPUSH
83603: PPUSH
83604: PPUSH
83605: PPUSH
// task := GetTaskList ( unit ) ;
83606: LD_ADDR_VAR 0 7
83610: PUSH
83611: LD_VAR 0 1
83615: PPUSH
83616: CALL_OW 437
83620: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
83621: LD_VAR 0 7
83625: NOT
83626: PUSH
83627: LD_VAR 0 1
83631: PPUSH
83632: LD_VAR 0 2
83636: PPUSH
83637: CALL_OW 308
83641: NOT
83642: AND
83643: IFFALSE 83647
// exit ;
83645: GO 83765
// if IsInArea ( unit , area ) then
83647: LD_VAR 0 1
83651: PPUSH
83652: LD_VAR 0 2
83656: PPUSH
83657: CALL_OW 308
83661: IFFALSE 83679
// begin ComMoveToArea ( unit , goAway ) ;
83663: LD_VAR 0 1
83667: PPUSH
83668: LD_VAR 0 3
83672: PPUSH
83673: CALL_OW 113
// exit ;
83677: GO 83765
// end ; if task [ 1 ] [ 1 ] <> M then
83679: LD_VAR 0 7
83683: PUSH
83684: LD_INT 1
83686: ARRAY
83687: PUSH
83688: LD_INT 1
83690: ARRAY
83691: PUSH
83692: LD_STRING M
83694: NONEQUAL
83695: IFFALSE 83699
// exit ;
83697: GO 83765
// x := task [ 1 ] [ 2 ] ;
83699: LD_ADDR_VAR 0 5
83703: PUSH
83704: LD_VAR 0 7
83708: PUSH
83709: LD_INT 1
83711: ARRAY
83712: PUSH
83713: LD_INT 2
83715: ARRAY
83716: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
83717: LD_ADDR_VAR 0 6
83721: PUSH
83722: LD_VAR 0 7
83726: PUSH
83727: LD_INT 1
83729: ARRAY
83730: PUSH
83731: LD_INT 3
83733: ARRAY
83734: ST_TO_ADDR
// if InArea ( x , y , area ) then
83735: LD_VAR 0 5
83739: PPUSH
83740: LD_VAR 0 6
83744: PPUSH
83745: LD_VAR 0 2
83749: PPUSH
83750: CALL_OW 309
83754: IFFALSE 83765
// ComStop ( unit ) ;
83756: LD_VAR 0 1
83760: PPUSH
83761: CALL_OW 141
// end ;
83765: LD_VAR 0 4
83769: RET
// export function Abs ( value ) ; begin
83770: LD_INT 0
83772: PPUSH
// result := value ;
83773: LD_ADDR_VAR 0 2
83777: PUSH
83778: LD_VAR 0 1
83782: ST_TO_ADDR
// if value < 0 then
83783: LD_VAR 0 1
83787: PUSH
83788: LD_INT 0
83790: LESS
83791: IFFALSE 83808
// result := value * - 1 ;
83793: LD_ADDR_VAR 0 2
83797: PUSH
83798: LD_VAR 0 1
83802: PUSH
83803: LD_INT 1
83805: NEG
83806: MUL
83807: ST_TO_ADDR
// end ;
83808: LD_VAR 0 2
83812: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
83813: LD_INT 0
83815: PPUSH
83816: PPUSH
83817: PPUSH
83818: PPUSH
83819: PPUSH
83820: PPUSH
83821: PPUSH
83822: PPUSH
// if not unit or not building then
83823: LD_VAR 0 1
83827: NOT
83828: PUSH
83829: LD_VAR 0 2
83833: NOT
83834: OR
83835: IFFALSE 83839
// exit ;
83837: GO 84065
// x := GetX ( building ) ;
83839: LD_ADDR_VAR 0 4
83843: PUSH
83844: LD_VAR 0 2
83848: PPUSH
83849: CALL_OW 250
83853: ST_TO_ADDR
// y := GetY ( building ) ;
83854: LD_ADDR_VAR 0 6
83858: PUSH
83859: LD_VAR 0 2
83863: PPUSH
83864: CALL_OW 251
83868: ST_TO_ADDR
// d := GetDir ( building ) ;
83869: LD_ADDR_VAR 0 8
83873: PUSH
83874: LD_VAR 0 2
83878: PPUSH
83879: CALL_OW 254
83883: ST_TO_ADDR
// r := 4 ;
83884: LD_ADDR_VAR 0 9
83888: PUSH
83889: LD_INT 4
83891: ST_TO_ADDR
// for i := 1 to 5 do
83892: LD_ADDR_VAR 0 10
83896: PUSH
83897: DOUBLE
83898: LD_INT 1
83900: DEC
83901: ST_TO_ADDR
83902: LD_INT 5
83904: PUSH
83905: FOR_TO
83906: IFFALSE 84063
// begin _x := ShiftX ( x , d , r + i ) ;
83908: LD_ADDR_VAR 0 5
83912: PUSH
83913: LD_VAR 0 4
83917: PPUSH
83918: LD_VAR 0 8
83922: PPUSH
83923: LD_VAR 0 9
83927: PUSH
83928: LD_VAR 0 10
83932: PLUS
83933: PPUSH
83934: CALL_OW 272
83938: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
83939: LD_ADDR_VAR 0 7
83943: PUSH
83944: LD_VAR 0 6
83948: PPUSH
83949: LD_VAR 0 8
83953: PPUSH
83954: LD_VAR 0 9
83958: PUSH
83959: LD_VAR 0 10
83963: PLUS
83964: PPUSH
83965: CALL_OW 273
83969: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
83970: LD_VAR 0 5
83974: PPUSH
83975: LD_VAR 0 7
83979: PPUSH
83980: CALL_OW 488
83984: PUSH
83985: LD_VAR 0 5
83989: PPUSH
83990: LD_VAR 0 7
83994: PPUSH
83995: CALL_OW 428
83999: PPUSH
84000: CALL_OW 247
84004: PUSH
84005: LD_INT 3
84007: PUSH
84008: LD_INT 2
84010: PUSH
84011: EMPTY
84012: LIST
84013: LIST
84014: IN
84015: NOT
84016: AND
84017: IFFALSE 84061
// begin ComMoveXY ( unit , _x , _y ) ;
84019: LD_VAR 0 1
84023: PPUSH
84024: LD_VAR 0 5
84028: PPUSH
84029: LD_VAR 0 7
84033: PPUSH
84034: CALL_OW 111
// result := [ _x , _y ] ;
84038: LD_ADDR_VAR 0 3
84042: PUSH
84043: LD_VAR 0 5
84047: PUSH
84048: LD_VAR 0 7
84052: PUSH
84053: EMPTY
84054: LIST
84055: LIST
84056: ST_TO_ADDR
// exit ;
84057: POP
84058: POP
84059: GO 84065
// end ; end ;
84061: GO 83905
84063: POP
84064: POP
// end ;
84065: LD_VAR 0 3
84069: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
84070: LD_INT 0
84072: PPUSH
84073: PPUSH
84074: PPUSH
// result := 0 ;
84075: LD_ADDR_VAR 0 3
84079: PUSH
84080: LD_INT 0
84082: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
84083: LD_VAR 0 1
84087: PUSH
84088: LD_INT 0
84090: LESS
84091: PUSH
84092: LD_VAR 0 1
84096: PUSH
84097: LD_INT 8
84099: GREATER
84100: OR
84101: PUSH
84102: LD_VAR 0 2
84106: PUSH
84107: LD_INT 0
84109: LESS
84110: OR
84111: PUSH
84112: LD_VAR 0 2
84116: PUSH
84117: LD_INT 8
84119: GREATER
84120: OR
84121: IFFALSE 84125
// exit ;
84123: GO 84200
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
84125: LD_ADDR_VAR 0 4
84129: PUSH
84130: LD_INT 22
84132: PUSH
84133: LD_VAR 0 2
84137: PUSH
84138: EMPTY
84139: LIST
84140: LIST
84141: PPUSH
84142: CALL_OW 69
84146: PUSH
84147: FOR_IN
84148: IFFALSE 84198
// begin un := UnitShoot ( i ) ;
84150: LD_ADDR_VAR 0 5
84154: PUSH
84155: LD_VAR 0 4
84159: PPUSH
84160: CALL_OW 504
84164: ST_TO_ADDR
// if GetSide ( un ) = side1 then
84165: LD_VAR 0 5
84169: PPUSH
84170: CALL_OW 255
84174: PUSH
84175: LD_VAR 0 1
84179: EQUAL
84180: IFFALSE 84196
// begin result := un ;
84182: LD_ADDR_VAR 0 3
84186: PUSH
84187: LD_VAR 0 5
84191: ST_TO_ADDR
// exit ;
84192: POP
84193: POP
84194: GO 84200
// end ; end ;
84196: GO 84147
84198: POP
84199: POP
// end ;
84200: LD_VAR 0 3
84204: RET
// export function GetCargoBay ( units ) ; begin
84205: LD_INT 0
84207: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
84208: LD_ADDR_VAR 0 2
84212: PUSH
84213: LD_VAR 0 1
84217: PPUSH
84218: LD_INT 2
84220: PUSH
84221: LD_INT 34
84223: PUSH
84224: LD_INT 12
84226: PUSH
84227: EMPTY
84228: LIST
84229: LIST
84230: PUSH
84231: LD_INT 34
84233: PUSH
84234: LD_INT 51
84236: PUSH
84237: EMPTY
84238: LIST
84239: LIST
84240: PUSH
84241: LD_INT 34
84243: PUSH
84244: LD_INT 32
84246: PUSH
84247: EMPTY
84248: LIST
84249: LIST
84250: PUSH
84251: LD_INT 34
84253: PUSH
84254: LD_EXP 49
84258: PUSH
84259: EMPTY
84260: LIST
84261: LIST
84262: PUSH
84263: EMPTY
84264: LIST
84265: LIST
84266: LIST
84267: LIST
84268: LIST
84269: PPUSH
84270: CALL_OW 72
84274: ST_TO_ADDR
// end ;
84275: LD_VAR 0 2
84279: RET
// export function Negate ( value ) ; begin
84280: LD_INT 0
84282: PPUSH
// result := not value ;
84283: LD_ADDR_VAR 0 2
84287: PUSH
84288: LD_VAR 0 1
84292: NOT
84293: ST_TO_ADDR
// end ;
84294: LD_VAR 0 2
84298: RET
// export function Inc ( value ) ; begin
84299: LD_INT 0
84301: PPUSH
// result := value + 1 ;
84302: LD_ADDR_VAR 0 2
84306: PUSH
84307: LD_VAR 0 1
84311: PUSH
84312: LD_INT 1
84314: PLUS
84315: ST_TO_ADDR
// end ;
84316: LD_VAR 0 2
84320: RET
// export function Dec ( value ) ; begin
84321: LD_INT 0
84323: PPUSH
// result := value - 1 ;
84324: LD_ADDR_VAR 0 2
84328: PUSH
84329: LD_VAR 0 1
84333: PUSH
84334: LD_INT 1
84336: MINUS
84337: ST_TO_ADDR
// end ;
84338: LD_VAR 0 2
84342: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
84343: LD_INT 0
84345: PPUSH
84346: PPUSH
84347: PPUSH
84348: PPUSH
84349: PPUSH
84350: PPUSH
84351: PPUSH
84352: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
84353: LD_VAR 0 1
84357: PPUSH
84358: LD_VAR 0 2
84362: PPUSH
84363: CALL_OW 488
84367: NOT
84368: PUSH
84369: LD_VAR 0 3
84373: PPUSH
84374: LD_VAR 0 4
84378: PPUSH
84379: CALL_OW 488
84383: NOT
84384: OR
84385: IFFALSE 84398
// begin result := - 1 ;
84387: LD_ADDR_VAR 0 5
84391: PUSH
84392: LD_INT 1
84394: NEG
84395: ST_TO_ADDR
// exit ;
84396: GO 84633
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
84398: LD_ADDR_VAR 0 12
84402: PUSH
84403: LD_VAR 0 1
84407: PPUSH
84408: LD_VAR 0 2
84412: PPUSH
84413: LD_VAR 0 3
84417: PPUSH
84418: LD_VAR 0 4
84422: PPUSH
84423: CALL 83481 0 4
84427: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
84428: LD_ADDR_VAR 0 11
84432: PUSH
84433: LD_VAR 0 1
84437: PPUSH
84438: LD_VAR 0 2
84442: PPUSH
84443: LD_VAR 0 12
84447: PUSH
84448: LD_INT 1
84450: ARRAY
84451: PPUSH
84452: LD_VAR 0 12
84456: PUSH
84457: LD_INT 2
84459: ARRAY
84460: PPUSH
84461: CALL_OW 298
84465: ST_TO_ADDR
// distance := 9999 ;
84466: LD_ADDR_VAR 0 10
84470: PUSH
84471: LD_INT 9999
84473: ST_TO_ADDR
// for i := 0 to 5 do
84474: LD_ADDR_VAR 0 6
84478: PUSH
84479: DOUBLE
84480: LD_INT 0
84482: DEC
84483: ST_TO_ADDR
84484: LD_INT 5
84486: PUSH
84487: FOR_TO
84488: IFFALSE 84631
// begin _x := ShiftX ( x1 , i , centerDist ) ;
84490: LD_ADDR_VAR 0 7
84494: PUSH
84495: LD_VAR 0 1
84499: PPUSH
84500: LD_VAR 0 6
84504: PPUSH
84505: LD_VAR 0 11
84509: PPUSH
84510: CALL_OW 272
84514: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
84515: LD_ADDR_VAR 0 8
84519: PUSH
84520: LD_VAR 0 2
84524: PPUSH
84525: LD_VAR 0 6
84529: PPUSH
84530: LD_VAR 0 11
84534: PPUSH
84535: CALL_OW 273
84539: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
84540: LD_VAR 0 7
84544: PPUSH
84545: LD_VAR 0 8
84549: PPUSH
84550: CALL_OW 488
84554: NOT
84555: IFFALSE 84559
// continue ;
84557: GO 84487
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
84559: LD_ADDR_VAR 0 9
84563: PUSH
84564: LD_VAR 0 12
84568: PUSH
84569: LD_INT 1
84571: ARRAY
84572: PPUSH
84573: LD_VAR 0 12
84577: PUSH
84578: LD_INT 2
84580: ARRAY
84581: PPUSH
84582: LD_VAR 0 7
84586: PPUSH
84587: LD_VAR 0 8
84591: PPUSH
84592: CALL_OW 298
84596: ST_TO_ADDR
// if tmp < distance then
84597: LD_VAR 0 9
84601: PUSH
84602: LD_VAR 0 10
84606: LESS
84607: IFFALSE 84629
// begin result := i ;
84609: LD_ADDR_VAR 0 5
84613: PUSH
84614: LD_VAR 0 6
84618: ST_TO_ADDR
// distance := tmp ;
84619: LD_ADDR_VAR 0 10
84623: PUSH
84624: LD_VAR 0 9
84628: ST_TO_ADDR
// end ; end ;
84629: GO 84487
84631: POP
84632: POP
// end ;
84633: LD_VAR 0 5
84637: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
84638: LD_INT 0
84640: PPUSH
84641: PPUSH
// if not driver or not IsInUnit ( driver ) then
84642: LD_VAR 0 1
84646: NOT
84647: PUSH
84648: LD_VAR 0 1
84652: PPUSH
84653: CALL_OW 310
84657: NOT
84658: OR
84659: IFFALSE 84663
// exit ;
84661: GO 84753
// vehicle := IsInUnit ( driver ) ;
84663: LD_ADDR_VAR 0 3
84667: PUSH
84668: LD_VAR 0 1
84672: PPUSH
84673: CALL_OW 310
84677: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
84678: LD_VAR 0 1
84682: PPUSH
84683: LD_STRING \
84685: PUSH
84686: LD_INT 0
84688: PUSH
84689: LD_INT 0
84691: PUSH
84692: LD_INT 0
84694: PUSH
84695: LD_INT 0
84697: PUSH
84698: LD_INT 0
84700: PUSH
84701: LD_INT 0
84703: PUSH
84704: EMPTY
84705: LIST
84706: LIST
84707: LIST
84708: LIST
84709: LIST
84710: LIST
84711: LIST
84712: PUSH
84713: LD_STRING E
84715: PUSH
84716: LD_INT 0
84718: PUSH
84719: LD_INT 0
84721: PUSH
84722: LD_VAR 0 3
84726: PUSH
84727: LD_INT 0
84729: PUSH
84730: LD_INT 0
84732: PUSH
84733: LD_INT 0
84735: PUSH
84736: EMPTY
84737: LIST
84738: LIST
84739: LIST
84740: LIST
84741: LIST
84742: LIST
84743: LIST
84744: PUSH
84745: EMPTY
84746: LIST
84747: LIST
84748: PPUSH
84749: CALL_OW 446
// end ;
84753: LD_VAR 0 2
84757: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
84758: LD_INT 0
84760: PPUSH
84761: PPUSH
// if not driver or not IsInUnit ( driver ) then
84762: LD_VAR 0 1
84766: NOT
84767: PUSH
84768: LD_VAR 0 1
84772: PPUSH
84773: CALL_OW 310
84777: NOT
84778: OR
84779: IFFALSE 84783
// exit ;
84781: GO 84873
// vehicle := IsInUnit ( driver ) ;
84783: LD_ADDR_VAR 0 3
84787: PUSH
84788: LD_VAR 0 1
84792: PPUSH
84793: CALL_OW 310
84797: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
84798: LD_VAR 0 1
84802: PPUSH
84803: LD_STRING \
84805: PUSH
84806: LD_INT 0
84808: PUSH
84809: LD_INT 0
84811: PUSH
84812: LD_INT 0
84814: PUSH
84815: LD_INT 0
84817: PUSH
84818: LD_INT 0
84820: PUSH
84821: LD_INT 0
84823: PUSH
84824: EMPTY
84825: LIST
84826: LIST
84827: LIST
84828: LIST
84829: LIST
84830: LIST
84831: LIST
84832: PUSH
84833: LD_STRING E
84835: PUSH
84836: LD_INT 0
84838: PUSH
84839: LD_INT 0
84841: PUSH
84842: LD_VAR 0 3
84846: PUSH
84847: LD_INT 0
84849: PUSH
84850: LD_INT 0
84852: PUSH
84853: LD_INT 0
84855: PUSH
84856: EMPTY
84857: LIST
84858: LIST
84859: LIST
84860: LIST
84861: LIST
84862: LIST
84863: LIST
84864: PUSH
84865: EMPTY
84866: LIST
84867: LIST
84868: PPUSH
84869: CALL_OW 447
// end ;
84873: LD_VAR 0 2
84877: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
84878: LD_INT 0
84880: PPUSH
84881: PPUSH
84882: PPUSH
// tmp := [ ] ;
84883: LD_ADDR_VAR 0 5
84887: PUSH
84888: EMPTY
84889: ST_TO_ADDR
// for i in units do
84890: LD_ADDR_VAR 0 4
84894: PUSH
84895: LD_VAR 0 1
84899: PUSH
84900: FOR_IN
84901: IFFALSE 84939
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
84903: LD_ADDR_VAR 0 5
84907: PUSH
84908: LD_VAR 0 5
84912: PPUSH
84913: LD_VAR 0 5
84917: PUSH
84918: LD_INT 1
84920: PLUS
84921: PPUSH
84922: LD_VAR 0 4
84926: PPUSH
84927: CALL_OW 256
84931: PPUSH
84932: CALL_OW 2
84936: ST_TO_ADDR
84937: GO 84900
84939: POP
84940: POP
// if not tmp then
84941: LD_VAR 0 5
84945: NOT
84946: IFFALSE 84950
// exit ;
84948: GO 84998
// if asc then
84950: LD_VAR 0 2
84954: IFFALSE 84978
// result := SortListByListAsc ( units , tmp ) else
84956: LD_ADDR_VAR 0 3
84960: PUSH
84961: LD_VAR 0 1
84965: PPUSH
84966: LD_VAR 0 5
84970: PPUSH
84971: CALL_OW 76
84975: ST_TO_ADDR
84976: GO 84998
// result := SortListByListDesc ( units , tmp ) ;
84978: LD_ADDR_VAR 0 3
84982: PUSH
84983: LD_VAR 0 1
84987: PPUSH
84988: LD_VAR 0 5
84992: PPUSH
84993: CALL_OW 77
84997: ST_TO_ADDR
// end ;
84998: LD_VAR 0 3
85002: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
85003: LD_INT 0
85005: PPUSH
85006: PPUSH
// task := GetTaskList ( mech ) ;
85007: LD_ADDR_VAR 0 4
85011: PUSH
85012: LD_VAR 0 1
85016: PPUSH
85017: CALL_OW 437
85021: ST_TO_ADDR
// if not task then
85022: LD_VAR 0 4
85026: NOT
85027: IFFALSE 85031
// exit ;
85029: GO 85073
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
85031: LD_ADDR_VAR 0 3
85035: PUSH
85036: LD_VAR 0 4
85040: PUSH
85041: LD_INT 1
85043: ARRAY
85044: PUSH
85045: LD_INT 1
85047: ARRAY
85048: PUSH
85049: LD_STRING r
85051: EQUAL
85052: PUSH
85053: LD_VAR 0 4
85057: PUSH
85058: LD_INT 1
85060: ARRAY
85061: PUSH
85062: LD_INT 4
85064: ARRAY
85065: PUSH
85066: LD_VAR 0 2
85070: EQUAL
85071: AND
85072: ST_TO_ADDR
// end ;
85073: LD_VAR 0 3
85077: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
85078: LD_INT 0
85080: PPUSH
// SetDir ( unit , d ) ;
85081: LD_VAR 0 1
85085: PPUSH
85086: LD_VAR 0 4
85090: PPUSH
85091: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
85095: LD_VAR 0 1
85099: PPUSH
85100: LD_VAR 0 2
85104: PPUSH
85105: LD_VAR 0 3
85109: PPUSH
85110: LD_VAR 0 5
85114: PPUSH
85115: CALL_OW 48
// end ;
85119: LD_VAR 0 6
85123: RET
// export function ToNaturalNumber ( number ) ; begin
85124: LD_INT 0
85126: PPUSH
// result := number div 1 ;
85127: LD_ADDR_VAR 0 2
85131: PUSH
85132: LD_VAR 0 1
85136: PUSH
85137: LD_INT 1
85139: DIV
85140: ST_TO_ADDR
// if number < 0 then
85141: LD_VAR 0 1
85145: PUSH
85146: LD_INT 0
85148: LESS
85149: IFFALSE 85159
// result := 0 ;
85151: LD_ADDR_VAR 0 2
85155: PUSH
85156: LD_INT 0
85158: ST_TO_ADDR
// end ;
85159: LD_VAR 0 2
85163: RET
// export function SortByClass ( units , class ) ; var un ; begin
85164: LD_INT 0
85166: PPUSH
85167: PPUSH
// if not units or not class then
85168: LD_VAR 0 1
85172: NOT
85173: PUSH
85174: LD_VAR 0 2
85178: NOT
85179: OR
85180: IFFALSE 85184
// exit ;
85182: GO 85279
// result := [ ] ;
85184: LD_ADDR_VAR 0 3
85188: PUSH
85189: EMPTY
85190: ST_TO_ADDR
// for un in units do
85191: LD_ADDR_VAR 0 4
85195: PUSH
85196: LD_VAR 0 1
85200: PUSH
85201: FOR_IN
85202: IFFALSE 85277
// if GetClass ( un ) = class then
85204: LD_VAR 0 4
85208: PPUSH
85209: CALL_OW 257
85213: PUSH
85214: LD_VAR 0 2
85218: EQUAL
85219: IFFALSE 85246
// result := Insert ( result , 1 , un ) else
85221: LD_ADDR_VAR 0 3
85225: PUSH
85226: LD_VAR 0 3
85230: PPUSH
85231: LD_INT 1
85233: PPUSH
85234: LD_VAR 0 4
85238: PPUSH
85239: CALL_OW 2
85243: ST_TO_ADDR
85244: GO 85275
// result := Replace ( result , result + 1 , un ) ;
85246: LD_ADDR_VAR 0 3
85250: PUSH
85251: LD_VAR 0 3
85255: PPUSH
85256: LD_VAR 0 3
85260: PUSH
85261: LD_INT 1
85263: PLUS
85264: PPUSH
85265: LD_VAR 0 4
85269: PPUSH
85270: CALL_OW 1
85274: ST_TO_ADDR
85275: GO 85201
85277: POP
85278: POP
// end ;
85279: LD_VAR 0 3
85283: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
85284: LD_INT 0
85286: PPUSH
85287: PPUSH
85288: PPUSH
85289: PPUSH
85290: PPUSH
85291: PPUSH
85292: PPUSH
// result := [ ] ;
85293: LD_ADDR_VAR 0 4
85297: PUSH
85298: EMPTY
85299: ST_TO_ADDR
// if x - r < 0 then
85300: LD_VAR 0 1
85304: PUSH
85305: LD_VAR 0 3
85309: MINUS
85310: PUSH
85311: LD_INT 0
85313: LESS
85314: IFFALSE 85326
// min_x := 0 else
85316: LD_ADDR_VAR 0 8
85320: PUSH
85321: LD_INT 0
85323: ST_TO_ADDR
85324: GO 85342
// min_x := x - r ;
85326: LD_ADDR_VAR 0 8
85330: PUSH
85331: LD_VAR 0 1
85335: PUSH
85336: LD_VAR 0 3
85340: MINUS
85341: ST_TO_ADDR
// if y - r < 0 then
85342: LD_VAR 0 2
85346: PUSH
85347: LD_VAR 0 3
85351: MINUS
85352: PUSH
85353: LD_INT 0
85355: LESS
85356: IFFALSE 85368
// min_y := 0 else
85358: LD_ADDR_VAR 0 7
85362: PUSH
85363: LD_INT 0
85365: ST_TO_ADDR
85366: GO 85384
// min_y := y - r ;
85368: LD_ADDR_VAR 0 7
85372: PUSH
85373: LD_VAR 0 2
85377: PUSH
85378: LD_VAR 0 3
85382: MINUS
85383: ST_TO_ADDR
// max_x := x + r ;
85384: LD_ADDR_VAR 0 9
85388: PUSH
85389: LD_VAR 0 1
85393: PUSH
85394: LD_VAR 0 3
85398: PLUS
85399: ST_TO_ADDR
// max_y := y + r ;
85400: LD_ADDR_VAR 0 10
85404: PUSH
85405: LD_VAR 0 2
85409: PUSH
85410: LD_VAR 0 3
85414: PLUS
85415: ST_TO_ADDR
// for _x = min_x to max_x do
85416: LD_ADDR_VAR 0 5
85420: PUSH
85421: DOUBLE
85422: LD_VAR 0 8
85426: DEC
85427: ST_TO_ADDR
85428: LD_VAR 0 9
85432: PUSH
85433: FOR_TO
85434: IFFALSE 85535
// for _y = min_y to max_y do
85436: LD_ADDR_VAR 0 6
85440: PUSH
85441: DOUBLE
85442: LD_VAR 0 7
85446: DEC
85447: ST_TO_ADDR
85448: LD_VAR 0 10
85452: PUSH
85453: FOR_TO
85454: IFFALSE 85531
// begin if not ValidHex ( _x , _y ) then
85456: LD_VAR 0 5
85460: PPUSH
85461: LD_VAR 0 6
85465: PPUSH
85466: CALL_OW 488
85470: NOT
85471: IFFALSE 85475
// continue ;
85473: GO 85453
// if GetResourceTypeXY ( _x , _y ) then
85475: LD_VAR 0 5
85479: PPUSH
85480: LD_VAR 0 6
85484: PPUSH
85485: CALL_OW 283
85489: IFFALSE 85529
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
85491: LD_ADDR_VAR 0 4
85495: PUSH
85496: LD_VAR 0 4
85500: PPUSH
85501: LD_VAR 0 4
85505: PUSH
85506: LD_INT 1
85508: PLUS
85509: PPUSH
85510: LD_VAR 0 5
85514: PUSH
85515: LD_VAR 0 6
85519: PUSH
85520: EMPTY
85521: LIST
85522: LIST
85523: PPUSH
85524: CALL_OW 1
85528: ST_TO_ADDR
// end ;
85529: GO 85453
85531: POP
85532: POP
85533: GO 85433
85535: POP
85536: POP
// end ;
85537: LD_VAR 0 4
85541: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
85542: LD_INT 0
85544: PPUSH
85545: PPUSH
85546: PPUSH
85547: PPUSH
85548: PPUSH
85549: PPUSH
85550: PPUSH
85551: PPUSH
// if not units then
85552: LD_VAR 0 1
85556: NOT
85557: IFFALSE 85561
// exit ;
85559: GO 85986
// result := UnitFilter ( units , [ f_ok ] ) ;
85561: LD_ADDR_VAR 0 3
85565: PUSH
85566: LD_VAR 0 1
85570: PPUSH
85571: LD_INT 50
85573: PUSH
85574: EMPTY
85575: LIST
85576: PPUSH
85577: CALL_OW 72
85581: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
85582: LD_ADDR_VAR 0 8
85586: PUSH
85587: LD_VAR 0 1
85591: PUSH
85592: LD_INT 1
85594: ARRAY
85595: PPUSH
85596: CALL_OW 255
85600: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
85601: LD_ADDR_VAR 0 10
85605: PUSH
85606: LD_INT 29
85608: PUSH
85609: LD_EXP 52
85613: PUSH
85614: EMPTY
85615: LIST
85616: LIST
85617: ST_TO_ADDR
// if not result then
85618: LD_VAR 0 3
85622: NOT
85623: IFFALSE 85627
// exit ;
85625: GO 85986
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
85627: LD_ADDR_VAR 0 5
85631: PUSH
85632: LD_INT 81
85634: PUSH
85635: LD_VAR 0 8
85639: PUSH
85640: EMPTY
85641: LIST
85642: LIST
85643: PPUSH
85644: CALL_OW 69
85648: ST_TO_ADDR
// for i in result do
85649: LD_ADDR_VAR 0 4
85653: PUSH
85654: LD_VAR 0 3
85658: PUSH
85659: FOR_IN
85660: IFFALSE 85984
// begin tag := GetTag ( i ) + 1 ;
85662: LD_ADDR_VAR 0 9
85666: PUSH
85667: LD_VAR 0 4
85671: PPUSH
85672: CALL_OW 110
85676: PUSH
85677: LD_INT 1
85679: PLUS
85680: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
85681: LD_ADDR_VAR 0 7
85685: PUSH
85686: LD_VAR 0 4
85690: PPUSH
85691: CALL_OW 250
85695: PPUSH
85696: LD_VAR 0 4
85700: PPUSH
85701: CALL_OW 251
85705: PPUSH
85706: LD_INT 6
85708: PPUSH
85709: CALL 85284 0 3
85713: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
85714: LD_VAR 0 7
85718: PUSH
85719: LD_VAR 0 4
85723: PPUSH
85724: CALL_OW 264
85728: PUSH
85729: LD_VAR 0 10
85733: IN
85734: NOT
85735: AND
85736: IFFALSE 85775
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
85738: LD_VAR 0 4
85742: PPUSH
85743: LD_VAR 0 7
85747: PUSH
85748: LD_INT 1
85750: ARRAY
85751: PUSH
85752: LD_INT 1
85754: ARRAY
85755: PPUSH
85756: LD_VAR 0 7
85760: PUSH
85761: LD_INT 1
85763: ARRAY
85764: PUSH
85765: LD_INT 2
85767: ARRAY
85768: PPUSH
85769: CALL_OW 116
85773: GO 85982
// if path > tag then
85775: LD_VAR 0 2
85779: PUSH
85780: LD_VAR 0 9
85784: GREATER
85785: IFFALSE 85952
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
85787: LD_ADDR_VAR 0 6
85791: PUSH
85792: LD_VAR 0 5
85796: PPUSH
85797: LD_INT 91
85799: PUSH
85800: LD_VAR 0 4
85804: PUSH
85805: LD_INT 12
85807: PUSH
85808: EMPTY
85809: LIST
85810: LIST
85811: LIST
85812: PPUSH
85813: CALL_OW 72
85817: ST_TO_ADDR
// if nearEnemy then
85818: LD_VAR 0 6
85822: IFFALSE 85850
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
85824: LD_VAR 0 4
85828: PPUSH
85829: LD_VAR 0 6
85833: PPUSH
85834: LD_VAR 0 4
85838: PPUSH
85839: CALL_OW 74
85843: PPUSH
85844: CALL_OW 115
85848: GO 85950
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
85850: LD_VAR 0 4
85854: PPUSH
85855: LD_VAR 0 2
85859: PUSH
85860: LD_VAR 0 9
85864: ARRAY
85865: PUSH
85866: LD_INT 1
85868: ARRAY
85869: PPUSH
85870: LD_VAR 0 2
85874: PUSH
85875: LD_VAR 0 9
85879: ARRAY
85880: PUSH
85881: LD_INT 2
85883: ARRAY
85884: PPUSH
85885: CALL_OW 297
85889: PUSH
85890: LD_INT 6
85892: GREATER
85893: IFFALSE 85936
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
85895: LD_VAR 0 4
85899: PPUSH
85900: LD_VAR 0 2
85904: PUSH
85905: LD_VAR 0 9
85909: ARRAY
85910: PUSH
85911: LD_INT 1
85913: ARRAY
85914: PPUSH
85915: LD_VAR 0 2
85919: PUSH
85920: LD_VAR 0 9
85924: ARRAY
85925: PUSH
85926: LD_INT 2
85928: ARRAY
85929: PPUSH
85930: CALL_OW 114
85934: GO 85950
// SetTag ( i , tag ) ;
85936: LD_VAR 0 4
85940: PPUSH
85941: LD_VAR 0 9
85945: PPUSH
85946: CALL_OW 109
// end else
85950: GO 85982
// if enemy then
85952: LD_VAR 0 5
85956: IFFALSE 85982
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
85958: LD_VAR 0 4
85962: PPUSH
85963: LD_VAR 0 5
85967: PPUSH
85968: LD_VAR 0 4
85972: PPUSH
85973: CALL_OW 74
85977: PPUSH
85978: CALL_OW 115
// end ;
85982: GO 85659
85984: POP
85985: POP
// end ;
85986: LD_VAR 0 3
85990: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
85991: LD_INT 0
85993: PPUSH
85994: PPUSH
85995: PPUSH
// if not unit or IsInUnit ( unit ) then
85996: LD_VAR 0 1
86000: NOT
86001: PUSH
86002: LD_VAR 0 1
86006: PPUSH
86007: CALL_OW 310
86011: OR
86012: IFFALSE 86016
// exit ;
86014: GO 86107
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
86016: LD_ADDR_VAR 0 4
86020: PUSH
86021: LD_VAR 0 1
86025: PPUSH
86026: CALL_OW 250
86030: PPUSH
86031: LD_VAR 0 2
86035: PPUSH
86036: LD_INT 1
86038: PPUSH
86039: CALL_OW 272
86043: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
86044: LD_ADDR_VAR 0 5
86048: PUSH
86049: LD_VAR 0 1
86053: PPUSH
86054: CALL_OW 251
86058: PPUSH
86059: LD_VAR 0 2
86063: PPUSH
86064: LD_INT 1
86066: PPUSH
86067: CALL_OW 273
86071: ST_TO_ADDR
// if ValidHex ( x , y ) then
86072: LD_VAR 0 4
86076: PPUSH
86077: LD_VAR 0 5
86081: PPUSH
86082: CALL_OW 488
86086: IFFALSE 86107
// ComTurnXY ( unit , x , y ) ;
86088: LD_VAR 0 1
86092: PPUSH
86093: LD_VAR 0 4
86097: PPUSH
86098: LD_VAR 0 5
86102: PPUSH
86103: CALL_OW 118
// end ;
86107: LD_VAR 0 3
86111: RET
// export function SeeUnits ( side , units ) ; var i ; begin
86112: LD_INT 0
86114: PPUSH
86115: PPUSH
// result := false ;
86116: LD_ADDR_VAR 0 3
86120: PUSH
86121: LD_INT 0
86123: ST_TO_ADDR
// if not units then
86124: LD_VAR 0 2
86128: NOT
86129: IFFALSE 86133
// exit ;
86131: GO 86178
// for i in units do
86133: LD_ADDR_VAR 0 4
86137: PUSH
86138: LD_VAR 0 2
86142: PUSH
86143: FOR_IN
86144: IFFALSE 86176
// if See ( side , i ) then
86146: LD_VAR 0 1
86150: PPUSH
86151: LD_VAR 0 4
86155: PPUSH
86156: CALL_OW 292
86160: IFFALSE 86174
// begin result := true ;
86162: LD_ADDR_VAR 0 3
86166: PUSH
86167: LD_INT 1
86169: ST_TO_ADDR
// exit ;
86170: POP
86171: POP
86172: GO 86178
// end ;
86174: GO 86143
86176: POP
86177: POP
// end ;
86178: LD_VAR 0 3
86182: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
86183: LD_INT 0
86185: PPUSH
86186: PPUSH
86187: PPUSH
86188: PPUSH
// if not unit or not points then
86189: LD_VAR 0 1
86193: NOT
86194: PUSH
86195: LD_VAR 0 2
86199: NOT
86200: OR
86201: IFFALSE 86205
// exit ;
86203: GO 86295
// dist := 99999 ;
86205: LD_ADDR_VAR 0 5
86209: PUSH
86210: LD_INT 99999
86212: ST_TO_ADDR
// for i in points do
86213: LD_ADDR_VAR 0 4
86217: PUSH
86218: LD_VAR 0 2
86222: PUSH
86223: FOR_IN
86224: IFFALSE 86293
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
86226: LD_ADDR_VAR 0 6
86230: PUSH
86231: LD_VAR 0 1
86235: PPUSH
86236: LD_VAR 0 4
86240: PUSH
86241: LD_INT 1
86243: ARRAY
86244: PPUSH
86245: LD_VAR 0 4
86249: PUSH
86250: LD_INT 2
86252: ARRAY
86253: PPUSH
86254: CALL_OW 297
86258: ST_TO_ADDR
// if tmpDist < dist then
86259: LD_VAR 0 6
86263: PUSH
86264: LD_VAR 0 5
86268: LESS
86269: IFFALSE 86291
// begin result := i ;
86271: LD_ADDR_VAR 0 3
86275: PUSH
86276: LD_VAR 0 4
86280: ST_TO_ADDR
// dist := tmpDist ;
86281: LD_ADDR_VAR 0 5
86285: PUSH
86286: LD_VAR 0 6
86290: ST_TO_ADDR
// end ; end ;
86291: GO 86223
86293: POP
86294: POP
// end ; end_of_file
86295: LD_VAR 0 3
86299: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86300: LD_VAR 0 1
86304: PUSH
86305: LD_INT 200
86307: DOUBLE
86308: GREATEREQUAL
86309: IFFALSE 86317
86311: LD_INT 299
86313: DOUBLE
86314: LESSEQUAL
86315: IFTRUE 86319
86317: GO 86351
86319: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86320: LD_VAR 0 1
86324: PPUSH
86325: LD_VAR 0 2
86329: PPUSH
86330: LD_VAR 0 3
86334: PPUSH
86335: LD_VAR 0 4
86339: PPUSH
86340: LD_VAR 0 5
86344: PPUSH
86345: CALL 41947 0 5
86349: GO 86428
86351: LD_INT 300
86353: DOUBLE
86354: GREATEREQUAL
86355: IFFALSE 86363
86357: LD_INT 399
86359: DOUBLE
86360: LESSEQUAL
86361: IFTRUE 86365
86363: GO 86427
86365: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86366: LD_VAR 0 1
86370: PPUSH
86371: LD_VAR 0 2
86375: PPUSH
86376: LD_VAR 0 3
86380: PPUSH
86381: LD_VAR 0 4
86385: PPUSH
86386: LD_VAR 0 5
86390: PPUSH
86391: LD_VAR 0 6
86395: PPUSH
86396: LD_VAR 0 7
86400: PPUSH
86401: LD_VAR 0 8
86405: PPUSH
86406: LD_VAR 0 9
86410: PPUSH
86411: LD_VAR 0 10
86415: PPUSH
86416: LD_VAR 0 11
86420: PPUSH
86421: CALL 39589 0 11
86425: GO 86428
86427: POP
// end ;
86428: PPOPN 11
86430: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86431: LD_VAR 0 1
86435: PPUSH
86436: LD_VAR 0 2
86440: PPUSH
86441: LD_VAR 0 3
86445: PPUSH
86446: LD_VAR 0 4
86450: PPUSH
86451: LD_VAR 0 5
86455: PPUSH
86456: CALL 41683 0 5
// end ; end_of_file
86460: PPOPN 5
86462: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86463: LD_VAR 0 1
86467: PPUSH
86468: LD_VAR 0 2
86472: PPUSH
86473: LD_VAR 0 3
86477: PPUSH
86478: LD_VAR 0 4
86482: PPUSH
86483: LD_VAR 0 5
86487: PPUSH
86488: LD_VAR 0 6
86492: PPUSH
86493: CALL 27282 0 6
// end ;
86497: PPOPN 6
86499: END
