// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 , 14 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: LD_INT 14
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: ST_TO_ADDR
// debugMode = 0 ;
 186: LD_ADDR_EXP 45
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// PrepareDifficulty ;
 194: CALL 7766 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 198: LD_INT 43
 200: PPUSH
 201: LD_INT 22
 203: PPUSH
 204: LD_INT 1
 206: PPUSH
 207: LD_INT 333
 209: NEG
 210: PPUSH
 211: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 215: LD_INT 43
 217: PPUSH
 218: LD_INT 22
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 331
// PrepareGammaBase ;
 228: CALL 2639 0 0
// PrepareHeroes ;
 232: CALL 575 0 0
// PrepareRussianCommander ;
 236: CALL 6622 0 0
// PrepareRussians ;
 240: CALL 6940 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 244: LD_INT 22
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: PUSH
 254: LD_INT 25
 256: PUSH
 257: LD_INT 2
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PPUSH
 268: CALL_OW 69
 272: PPUSH
 273: LD_INT 0
 275: PPUSH
 276: LD_INT 90
 278: PPUSH
 279: LD_INT 86
 281: PPUSH
 282: LD_INT 3
 284: PPUSH
 285: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 289: LD_INT 3
 291: PPUSH
 292: LD_INT 24
 294: PPUSH
 295: LD_INT 3
 297: PPUSH
 298: LD_EXP 25
 302: PPUSH
 303: LD_EXP 26
 307: PPUSH
 308: CALL_OW 12
 312: PPUSH
 313: LD_INT 6
 315: PPUSH
 316: LD_INT 4
 318: PPUSH
 319: CALL 9191 0 6
// PrepareCutsceneAttack ;
 323: CALL 6674 0 0
// end ;
 327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 328: LD_INT 22
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 34
 340: PUSH
 341: LD_INT 6
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PPUSH
 352: CALL_OW 69
 356: PUSH
 357: LD_INT 6
 359: GREATEREQUAL
 360: IFFALSE 372
 362: GO 364
 364: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 365: LD_STRING ACH_ARMOR
 367: PPUSH
 368: CALL_OW 543
 372: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 373: LD_EXP 45
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 572
 383: GO 385
 385: DISABLE
 386: LD_INT 0
 388: PPUSH
// begin enable ;
 389: ENABLE
// fogoff ( true ) ;
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 397: LD_ADDR_VAR 0 1
 401: PUSH
 402: LD_INT 22
 404: PUSH
 405: LD_INT 1
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: PUSH
 412: LD_INT 21
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: FOR_IN
 432: IFFALSE 448
// SetLives ( i , 1000 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: LD_INT 1000
 441: PPUSH
 442: CALL_OW 234
 446: GO 431
 448: POP
 449: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 450: LD_ADDR_VAR 0 1
 454: PUSH
 455: LD_INT 22
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: FOR_IN
 485: IFFALSE 509
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 274
 496: PPUSH
 497: LD_INT 1
 499: PPUSH
 500: LD_INT 9999
 502: PPUSH
 503: CALL_OW 277
 507: GO 484
 509: POP
 510: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 511: LD_ADDR_VAR 0 1
 515: PUSH
 516: LD_INT 22
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 30
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PPUSH
 540: CALL_OW 69
 544: PUSH
 545: FOR_IN
 546: IFFALSE 570
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: CALL_OW 274
 557: PPUSH
 558: LD_INT 2
 560: PPUSH
 561: LD_INT 9999
 563: PPUSH
 564: CALL_OW 277
 568: GO 545
 570: POP
 571: POP
// end ; end_of_file
 572: PPOPN 1
 574: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 575: LD_INT 0
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
 588: PPUSH
 589: PPUSH
 590: PPUSH
 591: PPUSH
// uc_side = 1 ;
 592: LD_ADDR_OWVAR 20
 596: PUSH
 597: LD_INT 1
 599: ST_TO_ADDR
// uc_nation = 1 ;
 600: LD_ADDR_OWVAR 21
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// if gammaCommander = 1 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 1
 615: EQUAL
 616: IFFALSE 667
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 618: LD_ADDR_EXP 3
 622: PUSH
 623: LD_STRING Donaldson
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: LD_STRING 04_
 631: PPUSH
 632: CALL 46248 0 3
 636: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 637: LD_EXP 3
 641: PPUSH
 642: LD_INT 54
 644: PPUSH
 645: LD_INT 25
 647: PPUSH
 648: LD_INT 8
 650: PPUSH
 651: LD_INT 0
 653: PPUSH
 654: CALL_OW 50
// ComHold ( Donaldson ) ;
 658: LD_EXP 3
 662: PPUSH
 663: CALL_OW 140
// end ; if gammaCommander = 2 then
 667: LD_EXP 12
 671: PUSH
 672: LD_INT 2
 674: EQUAL
 675: IFFALSE 726
// begin Brown = PrepareUnit ( Brown , true , 04_ ) ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_STRING Brown
 684: PPUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_STRING 04_
 690: PPUSH
 691: CALL 46248 0 3
 695: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 696: LD_EXP 2
 700: PPUSH
 701: LD_INT 54
 703: PPUSH
 704: LD_INT 25
 706: PPUSH
 707: LD_INT 8
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 50
// ComHold ( Brown ) ;
 717: LD_EXP 2
 721: PPUSH
 722: CALL_OW 140
// end ; if gammaCommander = 3 then
 726: LD_EXP 12
 730: PUSH
 731: LD_INT 3
 733: EQUAL
 734: IFFALSE 785
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 736: LD_ADDR_EXP 13
 740: PUSH
 741: LD_STRING VanHouten
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: LD_STRING 
 749: PPUSH
 750: CALL 46248 0 3
 754: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 755: LD_EXP 13
 759: PPUSH
 760: LD_INT 54
 762: PPUSH
 763: LD_INT 25
 765: PPUSH
 766: LD_INT 8
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 50
// ComHold ( Houten ) ;
 776: LD_EXP 13
 780: PPUSH
 781: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 785: LD_ADDR_EXP 22
 789: PUSH
 790: LD_STRING Harisson
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: LD_STRING 
 798: PPUSH
 799: CALL 46248 0 3
 803: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 804: LD_ADDR_EXP 23
 808: PUSH
 809: LD_STRING Powell
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: LD_STRING 
 817: PPUSH
 818: CALL 46248 0 3
 822: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 823: LD_STRING 04_Lisa
 825: PUSH
 826: EMPTY
 827: LIST
 828: PPUSH
 829: CALL_OW 28
 833: PUSH
 834: LD_STRING LisaInDelta
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 30
 844: NOT
 845: AND
 846: PUSH
 847: LD_STRING 07_Lisa
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: NOT
 858: AND
 859: IFFALSE 898
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 861: LD_ADDR_EXP 6
 865: PUSH
 866: LD_STRING Lisa
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_STRING 04_
 874: PPUSH
 875: CALL 46248 0 3
 879: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 880: LD_ADDR_VAR 0 15
 884: PUSH
 885: LD_VAR 0 15
 889: PUSH
 890: LD_EXP 6
 894: ADD
 895: ST_TO_ADDR
// end else
 896: GO 953
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 898: LD_EXP 6
 902: NOT
 903: PUSH
 904: LD_STRING LisaIn07
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 30
 914: NOT
 915: AND
 916: IFFALSE 953
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 918: LD_ADDR_EXP 6
 922: PUSH
 923: LD_STRING Lisa
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: LD_STRING 07_
 931: PPUSH
 932: CALL 46248 0 3
 936: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 937: LD_ADDR_VAR 0 15
 941: PUSH
 942: LD_VAR 0 15
 946: PUSH
 947: LD_EXP 6
 951: ADD
 952: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 953: LD_STRING 04_Bobby
 955: PUSH
 956: EMPTY
 957: LIST
 958: PPUSH
 959: CALL_OW 28
 963: PUSH
 964: LD_STRING BobbyInDelta
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 30
 974: NOT
 975: AND
 976: PUSH
 977: LD_STRING 07_Bobby
 979: PUSH
 980: EMPTY
 981: LIST
 982: PPUSH
 983: CALL_OW 28
 987: NOT
 988: AND
 989: IFFALSE 1028
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 991: LD_ADDR_EXP 4
 995: PUSH
 996: LD_STRING Bobby
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: LD_STRING 04_
1004: PPUSH
1005: CALL 46248 0 3
1009: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1010: LD_ADDR_VAR 0 15
1014: PUSH
1015: LD_VAR 0 15
1019: PUSH
1020: LD_EXP 4
1024: ADD
1025: ST_TO_ADDR
// end else
1026: GO 1083
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1028: LD_EXP 4
1032: NOT
1033: PUSH
1034: LD_STRING BobbyIn07
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 30
1044: NOT
1045: AND
1046: IFFALSE 1083
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1048: LD_ADDR_EXP 4
1052: PUSH
1053: LD_STRING Bobby
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: LD_STRING 07_
1061: PPUSH
1062: CALL 46248 0 3
1066: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1067: LD_ADDR_VAR 0 15
1071: PUSH
1072: LD_VAR 0 15
1076: PUSH
1077: LD_EXP 4
1081: ADD
1082: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1083: LD_STRING 04_Cyrus
1085: PUSH
1086: EMPTY
1087: LIST
1088: PPUSH
1089: CALL_OW 28
1093: PUSH
1094: LD_STRING CyrusInDelta
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 30
1104: NOT
1105: AND
1106: PUSH
1107: LD_STRING 07_Cyrus
1109: PUSH
1110: EMPTY
1111: LIST
1112: PPUSH
1113: CALL_OW 28
1117: NOT
1118: AND
1119: IFFALSE 1158
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1121: LD_ADDR_EXP 5
1125: PUSH
1126: LD_STRING Cyrus
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: LD_STRING 04_
1134: PPUSH
1135: CALL 46248 0 3
1139: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1140: LD_ADDR_VAR 0 15
1144: PUSH
1145: LD_VAR 0 15
1149: PUSH
1150: LD_EXP 5
1154: ADD
1155: ST_TO_ADDR
// end else
1156: GO 1213
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1158: LD_EXP 5
1162: NOT
1163: PUSH
1164: LD_STRING CyrusIn07
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 30
1174: NOT
1175: AND
1176: IFFALSE 1213
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1178: LD_ADDR_EXP 5
1182: PUSH
1183: LD_STRING Cyrus
1185: PPUSH
1186: LD_INT 1
1188: PPUSH
1189: LD_STRING 07_
1191: PPUSH
1192: CALL 46248 0 3
1196: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1197: LD_ADDR_VAR 0 15
1201: PUSH
1202: LD_VAR 0 15
1206: PUSH
1207: LD_EXP 5
1211: ADD
1212: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1213: LD_STRING 04_Brown
1215: PUSH
1216: EMPTY
1217: LIST
1218: PPUSH
1219: CALL_OW 28
1223: PUSH
1224: LD_STRING BrownInDelta
1226: PPUSH
1227: LD_INT 0
1229: PPUSH
1230: CALL_OW 30
1234: NOT
1235: AND
1236: PUSH
1237: LD_STRING 07_Brown
1239: PUSH
1240: EMPTY
1241: LIST
1242: PPUSH
1243: CALL_OW 28
1247: NOT
1248: AND
1249: PUSH
1250: LD_EXP 12
1254: PUSH
1255: LD_INT 2
1257: NONEQUAL
1258: AND
1259: IFFALSE 1298
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1261: LD_ADDR_EXP 2
1265: PUSH
1266: LD_STRING Brown
1268: PPUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_STRING 04_
1274: PPUSH
1275: CALL 46248 0 3
1279: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1280: LD_ADDR_VAR 0 15
1284: PUSH
1285: LD_VAR 0 15
1289: PUSH
1290: LD_EXP 2
1294: ADD
1295: ST_TO_ADDR
// end else
1296: GO 1363
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1298: LD_EXP 2
1302: NOT
1303: PUSH
1304: LD_STRING BrownIn07
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 30
1314: NOT
1315: AND
1316: PUSH
1317: LD_EXP 12
1321: PUSH
1322: LD_INT 2
1324: NONEQUAL
1325: AND
1326: IFFALSE 1363
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1328: LD_ADDR_EXP 2
1332: PUSH
1333: LD_STRING Brown
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_STRING 07_
1341: PPUSH
1342: CALL 46248 0 3
1346: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1347: LD_ADDR_VAR 0 15
1351: PUSH
1352: LD_VAR 0 15
1356: PUSH
1357: LD_EXP 2
1361: ADD
1362: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1363: LD_STRING 04_Donaldson
1365: PUSH
1366: EMPTY
1367: LIST
1368: PPUSH
1369: CALL_OW 28
1373: PUSH
1374: LD_STRING DonaldsonInDelta
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL_OW 30
1384: NOT
1385: AND
1386: PUSH
1387: LD_STRING 07_Donaldson
1389: PUSH
1390: EMPTY
1391: LIST
1392: PPUSH
1393: CALL_OW 28
1397: NOT
1398: AND
1399: PUSH
1400: LD_EXP 12
1404: PUSH
1405: LD_INT 1
1407: NONEQUAL
1408: AND
1409: IFFALSE 1448
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1411: LD_ADDR_EXP 3
1415: PUSH
1416: LD_STRING Donaldson
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: LD_STRING 04_
1424: PPUSH
1425: CALL 46248 0 3
1429: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1430: LD_ADDR_VAR 0 15
1434: PUSH
1435: LD_VAR 0 15
1439: PUSH
1440: LD_EXP 3
1444: ADD
1445: ST_TO_ADDR
// end else
1446: GO 1513
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1448: LD_EXP 3
1452: NOT
1453: PUSH
1454: LD_STRING DonaldsonIn07
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 30
1464: NOT
1465: AND
1466: PUSH
1467: LD_EXP 12
1471: PUSH
1472: LD_INT 1
1474: NONEQUAL
1475: AND
1476: IFFALSE 1513
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1478: LD_ADDR_EXP 3
1482: PUSH
1483: LD_STRING Donaldson
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_STRING 07_
1491: PPUSH
1492: CALL 46248 0 3
1496: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1497: LD_ADDR_VAR 0 15
1501: PUSH
1502: LD_VAR 0 15
1506: PUSH
1507: LD_EXP 3
1511: ADD
1512: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1513: LD_STRING KhatamIn07
1515: PPUSH
1516: LD_INT 0
1518: PPUSH
1519: CALL_OW 30
1523: NOT
1524: IFFALSE 1561
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1526: LD_ADDR_EXP 10
1530: PUSH
1531: LD_STRING Khatam
1533: PPUSH
1534: LD_INT 1
1536: PPUSH
1537: LD_STRING 07_
1539: PPUSH
1540: CALL 46248 0 3
1544: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1545: LD_ADDR_VAR 0 15
1549: PUSH
1550: LD_VAR 0 15
1554: PUSH
1555: LD_EXP 10
1559: ADD
1560: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1561: LD_ADDR_EXP 11
1565: PUSH
1566: LD_STRING 07_othersGamma
1568: PPUSH
1569: CALL_OW 31
1573: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1574: LD_ADDR_VAR 0 14
1578: PUSH
1579: LD_INT 8
1581: PUSH
1582: LD_EXP 11
1586: MINUS
1587: ST_TO_ADDR
// if tmp then
1588: LD_VAR 0 14
1592: IFFALSE 1645
// for i = 1 to tmp do
1594: LD_ADDR_VAR 0 2
1598: PUSH
1599: DOUBLE
1600: LD_INT 1
1602: DEC
1603: ST_TO_ADDR
1604: LD_VAR 0 14
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1643
// begin PrepareHuman ( false , 1 , 5 ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 5
1620: PPUSH
1621: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1625: LD_ADDR_EXP 11
1629: PUSH
1630: LD_EXP 11
1634: PUSH
1635: CALL_OW 44
1639: ADD
1640: ST_TO_ADDR
// end ;
1641: GO 1609
1643: POP
1644: POP
// if HexInfo ( 61 , 29 ) = 0 then
1645: LD_INT 61
1647: PPUSH
1648: LD_INT 29
1650: PPUSH
1651: CALL_OW 428
1655: PUSH
1656: LD_INT 0
1658: EQUAL
1659: IFFALSE 1690
// begin bc_type := b_barracks ;
1661: LD_ADDR_OWVAR 42
1665: PUSH
1666: LD_INT 5
1668: ST_TO_ADDR
// bc_level := 6 ;
1669: LD_ADDR_OWVAR 43
1673: PUSH
1674: LD_INT 6
1676: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1677: LD_INT 61
1679: PPUSH
1680: LD_INT 29
1682: PPUSH
1683: LD_INT 5
1685: PPUSH
1686: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1690: LD_ADDR_VAR 0 13
1694: PUSH
1695: LD_INT 22
1697: PUSH
1698: LD_INT 1
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 31
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PPUSH
1719: CALL_OW 69
1723: ST_TO_ADDR
// for i in bun do
1724: LD_ADDR_VAR 0 2
1728: PUSH
1729: LD_VAR 0 13
1733: PUSH
1734: FOR_IN
1735: IFFALSE 1867
// begin x := GetX ( i ) ;
1737: LD_ADDR_VAR 0 3
1741: PUSH
1742: LD_VAR 0 2
1746: PPUSH
1747: CALL_OW 250
1751: ST_TO_ADDR
// y := GetY ( i ) ;
1752: LD_ADDR_VAR 0 4
1756: PUSH
1757: LD_VAR 0 2
1761: PPUSH
1762: CALL_OW 251
1766: ST_TO_ADDR
// d := GetDir ( i ) ;
1767: LD_ADDR_VAR 0 5
1771: PUSH
1772: LD_VAR 0 2
1776: PPUSH
1777: CALL_OW 254
1781: ST_TO_ADDR
// RemoveUnit ( i ) ;
1782: LD_VAR 0 2
1786: PPUSH
1787: CALL_OW 64
// bc_type := b_bunker ;
1791: LD_ADDR_OWVAR 42
1795: PUSH
1796: LD_INT 32
1798: ST_TO_ADDR
// bc_level := 6 ;
1799: LD_ADDR_OWVAR 43
1803: PUSH
1804: LD_INT 6
1806: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1807: LD_ADDR_VAR 0 6
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: LD_VAR 0 5
1826: PPUSH
1827: CALL_OW 47
1831: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1832: LD_VAR 0 6
1836: PPUSH
1837: LD_INT 5
1839: PUSH
1840: LD_INT 4
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: LD_VAR 0 2
1851: PUSH
1852: LD_INT 2
1854: MOD
1855: PUSH
1856: LD_INT 1
1858: PLUS
1859: ARRAY
1860: PPUSH
1861: CALL_OW 431
// end ;
1865: GO 1734
1867: POP
1868: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1869: LD_ADDR_VAR 0 9
1873: PUSH
1874: LD_INT 22
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 30
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PPUSH
1898: CALL_OW 69
1902: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1903: LD_ADDR_VAR 0 8
1907: PUSH
1908: LD_INT 22
1910: PUSH
1911: LD_INT 1
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: LD_INT 30
1923: PUSH
1924: LD_INT 6
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 30
1933: PUSH
1934: LD_INT 7
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 30
1943: PUSH
1944: LD_INT 8
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PPUSH
1961: CALL_OW 69
1965: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1966: LD_ADDR_VAR 0 7
1970: PUSH
1971: LD_INT 22
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PUSH
1981: LD_INT 30
1983: PUSH
1984: LD_INT 3
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 30
2017: PUSH
2018: LD_INT 36
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2034: LD_ADDR_VAR 0 13
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 2
2051: PUSH
2052: LD_INT 30
2054: PUSH
2055: LD_INT 31
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 30
2064: PUSH
2065: LD_INT 32
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: LD_EXP 11
2095: PUSH
2096: LD_VAR 0 15
2100: ADD
2101: PUSH
2102: FOR_IN
2103: IFFALSE 2524
// begin placed := false ;
2105: LD_ADDR_VAR 0 11
2109: PUSH
2110: LD_INT 0
2112: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2113: LD_VAR 0 2
2117: PPUSH
2118: CALL_OW 257
2122: PUSH
2123: LD_INT 1
2125: EQUAL
2126: IFFALSE 2251
// begin if UnitFilter ( bun , [ f_empty ] ) then
2128: LD_VAR 0 13
2132: PPUSH
2133: LD_INT 58
2135: PUSH
2136: EMPTY
2137: LIST
2138: PPUSH
2139: CALL_OW 72
2143: IFFALSE 2182
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2145: LD_VAR 0 2
2149: PPUSH
2150: LD_VAR 0 13
2154: PPUSH
2155: LD_INT 58
2157: PUSH
2158: EMPTY
2159: LIST
2160: PPUSH
2161: CALL_OW 72
2165: PUSH
2166: LD_INT 1
2168: ARRAY
2169: PPUSH
2170: CALL_OW 52
// placed := true ;
2174: LD_ADDR_VAR 0 11
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// end ; if arm and not placed then
2182: LD_VAR 0 9
2186: PUSH
2187: LD_VAR 0 11
2191: NOT
2192: AND
2193: IFFALSE 2251
// begin for j in arm do
2195: LD_ADDR_VAR 0 10
2199: PUSH
2200: LD_VAR 0 9
2204: PUSH
2205: FOR_IN
2206: IFFALSE 2249
// if UnitsInside ( j ) < 6 then
2208: LD_VAR 0 10
2212: PPUSH
2213: CALL_OW 313
2217: PUSH
2218: LD_INT 6
2220: LESS
2221: IFFALSE 2247
// begin PlaceHumanInUnit ( i , j ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_VAR 0 10
2232: PPUSH
2233: CALL_OW 52
// placed := true ;
2237: LD_ADDR_VAR 0 11
2241: PUSH
2242: LD_INT 1
2244: ST_TO_ADDR
// break ;
2245: GO 2249
// end ;
2247: GO 2205
2249: POP
2250: POP
// end ; end ; if GetClass ( i ) = 2 then
2251: LD_VAR 0 2
2255: PPUSH
2256: CALL_OW 257
2260: PUSH
2261: LD_INT 2
2263: EQUAL
2264: IFFALSE 2297
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2266: LD_VAR 0 2
2270: PPUSH
2271: LD_INT 52
2273: PPUSH
2274: LD_INT 20
2276: PPUSH
2277: LD_INT 6
2279: PPUSH
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 50
// placed := true ;
2287: LD_ADDR_VAR 0 11
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// continue ;
2295: GO 2102
// end ; if GetClass ( i ) = 3 then
2297: LD_VAR 0 2
2301: PPUSH
2302: CALL_OW 257
2306: PUSH
2307: LD_INT 3
2309: EQUAL
2310: IFFALSE 2414
// if fac then
2312: LD_VAR 0 7
2316: IFFALSE 2414
// begin if ct then
2318: LD_VAR 0 12
2322: IFFALSE 2350
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_VAR 0 12
2333: PUSH
2334: LD_INT 1
2336: ARRAY
2337: PPUSH
2338: CALL_OW 52
// placed := true ;
2342: LD_ADDR_VAR 0 11
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// end ; if placed then
2350: LD_VAR 0 11
2354: IFFALSE 2358
// continue ;
2356: GO 2102
// for j in fac do
2358: LD_ADDR_VAR 0 10
2362: PUSH
2363: LD_VAR 0 7
2367: PUSH
2368: FOR_IN
2369: IFFALSE 2412
// if UnitsInside ( j ) < 6 then
2371: LD_VAR 0 10
2375: PPUSH
2376: CALL_OW 313
2380: PUSH
2381: LD_INT 6
2383: LESS
2384: IFFALSE 2410
// begin PlaceHumanInUnit ( i , j ) ;
2386: LD_VAR 0 2
2390: PPUSH
2391: LD_VAR 0 10
2395: PPUSH
2396: CALL_OW 52
// placed := true ;
2400: LD_ADDR_VAR 0 11
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// break ;
2408: GO 2412
// end ;
2410: GO 2368
2412: POP
2413: POP
// end ; if GetClass ( i ) = 4 then
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL_OW 257
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2491
// if lab then
2429: LD_VAR 0 8
2433: IFFALSE 2491
// begin for j in lab do
2435: LD_ADDR_VAR 0 10
2439: PUSH
2440: LD_VAR 0 8
2444: PUSH
2445: FOR_IN
2446: IFFALSE 2489
// if UnitsInside ( j ) < 6 then
2448: LD_VAR 0 10
2452: PPUSH
2453: CALL_OW 313
2457: PUSH
2458: LD_INT 6
2460: LESS
2461: IFFALSE 2487
// begin PlaceHumanInUnit ( i , j ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 10
2472: PPUSH
2473: CALL_OW 52
// placed := true ;
2477: LD_ADDR_VAR 0 11
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// break ;
2485: GO 2489
// end ;
2487: GO 2445
2489: POP
2490: POP
// end ; if not placed then
2491: LD_VAR 0 11
2495: NOT
2496: IFFALSE 2522
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 5
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: CALL_OW 49
// ComHold ( i ) ;
2513: LD_VAR 0 2
2517: PPUSH
2518: CALL_OW 140
// end ; end ;
2522: GO 2102
2524: POP
2525: POP
// if ct then
2526: LD_VAR 0 12
2530: IFFALSE 2634
// if UnitsInside ( ct [ 1 ] ) then
2532: LD_VAR 0 12
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 313
2545: IFFALSE 2634
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2547: LD_ADDR_VAR 0 2
2551: PUSH
2552: LD_INT 22
2554: PUSH
2555: LD_INT 1
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 33
2564: PUSH
2565: LD_INT 2
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PUSH
2581: FOR_IN
2582: IFFALSE 2632
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_VAR 0 12
2593: PUSH
2594: LD_INT 1
2596: ARRAY
2597: PPUSH
2598: CALL_OW 313
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_VAR 0 12
2610: PUSH
2611: LD_INT 1
2613: ARRAY
2614: PPUSH
2615: CALL_OW 313
2619: PPUSH
2620: CALL_OW 12
2624: ARRAY
2625: PPUSH
2626: CALL_OW 135
2630: GO 2581
2632: POP
2633: POP
// end ; end ;
2634: LD_VAR 0 1
2638: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2639: LD_INT 0
2641: PPUSH
2642: PPUSH
2643: PPUSH
2644: PPUSH
2645: PPUSH
2646: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2647: LD_INT 71
2649: PPUSH
2650: LD_INT 5
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: LD_STRING GammaBase
2667: PPUSH
2668: EMPTY
2669: PPUSH
2670: CALL_OW 30
2674: ST_TO_ADDR
// if not blist then
2675: LD_VAR 0 2
2679: NOT
2680: IFFALSE 2720
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2682: LD_ADDR_VAR 0 2
2686: PUSH
2687: LD_INT 1
2689: PUSH
2690: LD_INT 52
2692: PUSH
2693: LD_INT 12
2695: PUSH
2696: LD_INT 3
2698: PUSH
2699: LD_INT 3
2701: PUSH
2702: LD_INT 0
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: ST_TO_ADDR
// uc_side := 1 ;
2720: LD_ADDR_OWVAR 20
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// uc_nation := 1 ;
2728: LD_ADDR_OWVAR 21
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// bc_kind1 := - 1 ;
2736: LD_ADDR_OWVAR 44
2740: PUSH
2741: LD_INT 1
2743: NEG
2744: ST_TO_ADDR
// bc_kind2 := - 1 ;
2745: LD_ADDR_OWVAR 45
2749: PUSH
2750: LD_INT 1
2752: NEG
2753: ST_TO_ADDR
// for i in blist do
2754: LD_ADDR_VAR 0 3
2758: PUSH
2759: LD_VAR 0 2
2763: PUSH
2764: FOR_IN
2765: IFFALSE 3041
// begin bc_type := i [ 1 ] ;
2767: LD_ADDR_OWVAR 42
2771: PUSH
2772: LD_VAR 0 3
2776: PUSH
2777: LD_INT 1
2779: ARRAY
2780: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2781: LD_ADDR_OWVAR 43
2785: PUSH
2786: LD_VAR 0 3
2790: PUSH
2791: LD_INT 5
2793: ARRAY
2794: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2795: LD_OWVAR 42
2799: PUSH
2800: LD_INT 6
2802: PUSH
2803: LD_INT 7
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: IN
2810: IFFALSE 2876
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2812: LD_STRING 06_remoteVehs_1
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 30
2822: NOT
2823: IFFALSE 2851
// begin bc_type := b_lab_full ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 8
2832: ST_TO_ADDR
// bc_kind1 := 10 ;
2833: LD_ADDR_OWVAR 44
2837: PUSH
2838: LD_INT 10
2840: ST_TO_ADDR
// bc_kind2 := 15 ;
2841: LD_ADDR_OWVAR 45
2845: PUSH
2846: LD_INT 15
2848: ST_TO_ADDR
// end else
2849: GO 2876
// begin bc_type := b_lab_half ;
2851: LD_ADDR_OWVAR 42
2855: PUSH
2856: LD_INT 7
2858: ST_TO_ADDR
// bc_kind1 := 10 ;
2859: LD_ADDR_OWVAR 44
2863: PUSH
2864: LD_INT 10
2866: ST_TO_ADDR
// bc_kind2 := - 1 ;
2867: LD_ADDR_OWVAR 45
2871: PUSH
2872: LD_INT 1
2874: NEG
2875: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2876: LD_OWVAR 42
2880: PUSH
2881: LD_INT 2
2883: EQUAL
2884: IFFALSE 2894
// bc_type := b_factory ;
2886: LD_ADDR_OWVAR 42
2890: PUSH
2891: LD_INT 3
2893: ST_TO_ADDR
// if bc_type = b_depot then
2894: LD_OWVAR 42
2898: PUSH
2899: LD_INT 0
2901: EQUAL
2902: IFFALSE 2951
// begin bc_type := b_warehouse ;
2904: LD_ADDR_OWVAR 42
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2912: LD_ADDR_EXP 37
2916: PUSH
2917: LD_VAR 0 3
2921: PUSH
2922: LD_INT 2
2924: ARRAY
2925: PPUSH
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 3
2933: ARRAY
2934: PPUSH
2935: LD_VAR 0 3
2939: PUSH
2940: LD_INT 4
2942: ARRAY
2943: PPUSH
2944: CALL_OW 47
2948: ST_TO_ADDR
// continue ;
2949: GO 2764
// end ; if bc_type = b_armoury then
2951: LD_OWVAR 42
2955: PUSH
2956: LD_INT 4
2958: EQUAL
2959: IFFALSE 2969
// bc_type = b_barracks ;
2961: LD_ADDR_OWVAR 42
2965: PUSH
2966: LD_INT 5
2968: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2969: LD_ADDR_VAR 0 4
2973: PUSH
2974: LD_VAR 0 3
2978: PUSH
2979: LD_INT 2
2981: ARRAY
2982: PPUSH
2983: LD_VAR 0 3
2987: PUSH
2988: LD_INT 3
2990: ARRAY
2991: PPUSH
2992: LD_VAR 0 3
2996: PUSH
2997: LD_INT 4
2999: ARRAY
3000: PPUSH
3001: CALL_OW 47
3005: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3006: LD_VAR 0 4
3010: PPUSH
3011: CALL_OW 266
3015: PUSH
3016: LD_INT 32
3018: EQUAL
3019: IFFALSE 3039
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 7
3033: ARRAY
3034: PPUSH
3035: CALL_OW 431
// end ;
3039: GO 2764
3041: POP
3042: POP
// if not amDepot then
3043: LD_EXP 37
3047: NOT
3048: IFFALSE 3085
// begin bc_type := b_warehouse ;
3050: LD_ADDR_OWVAR 42
3054: PUSH
3055: LD_INT 1
3057: ST_TO_ADDR
// bc_level := 6 ;
3058: LD_ADDR_OWVAR 43
3062: PUSH
3063: LD_INT 6
3065: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3066: LD_ADDR_EXP 37
3070: PUSH
3071: LD_INT 52
3073: PPUSH
3074: LD_INT 12
3076: PPUSH
3077: LD_INT 3
3079: PPUSH
3080: CALL_OW 47
3084: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3085: LD_EXP 37
3089: PPUSH
3090: LD_STRING gamma
3092: PPUSH
3093: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 , 280 ] [ Difficulty ] ) ;
3097: LD_EXP 37
3101: PPUSH
3102: CALL_OW 274
3106: PPUSH
3107: LD_INT 1
3109: PPUSH
3110: LD_INT 500
3112: PUSH
3113: LD_INT 420
3115: PUSH
3116: LD_INT 350
3118: PUSH
3119: LD_INT 280
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_OWVAR 67
3132: ARRAY
3133: PPUSH
3134: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3138: LD_EXP 37
3142: PPUSH
3143: CALL_OW 274
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 200
3153: PPUSH
3154: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3158: LD_INT 22
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 30
3170: PUSH
3171: LD_INT 3
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: IFFALSE 3434
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3188: LD_ADDR_VAR 0 4
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 30
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PPUSH
3217: CALL_OW 69
3221: PUSH
3222: LD_INT 1
3224: ARRAY
3225: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3226: LD_ADDR_VAR 0 6
3230: PUSH
3231: LD_VAR 0 4
3235: PPUSH
3236: CALL_OW 250
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: CALL_OW 251
3250: PPUSH
3251: LD_VAR 0 4
3255: PPUSH
3256: CALL_OW 254
3260: PPUSH
3261: CALL 80568 0 3
3265: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3266: LD_ADDR_VAR 0 2
3270: PUSH
3271: LD_INT 19
3273: PUSH
3274: LD_INT 17
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3281: LD_STRING 06_remoteVehs_1
3283: PPUSH
3284: LD_INT 0
3286: PPUSH
3287: CALL_OW 30
3291: IFFALSE 3314
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3293: LD_ADDR_VAR 0 2
3297: PUSH
3298: LD_VAR 0 2
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 22
3308: PPUSH
3309: CALL_OW 2
3313: ST_TO_ADDR
// for i in tmp do
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: LD_VAR 0 6
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3432
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3327: LD_VAR 0 3
3331: PUSH
3332: LD_INT 1
3334: ARRAY
3335: PPUSH
3336: LD_VAR 0 3
3340: PUSH
3341: LD_INT 2
3343: ARRAY
3344: PPUSH
3345: CALL_OW 428
3349: PUSH
3350: LD_INT 0
3352: EQUAL
3353: IFFALSE 3430
// begin bc_type := blist [ 1 ] ;
3355: LD_ADDR_OWVAR 42
3359: PUSH
3360: LD_VAR 0 2
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_VAR 0 3
3382: PUSH
3383: LD_INT 2
3385: ARRAY
3386: PPUSH
3387: LD_VAR 0 3
3391: PUSH
3392: LD_INT 3
3394: ARRAY
3395: PPUSH
3396: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: LD_VAR 0 2
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: CALL_OW 3
3417: ST_TO_ADDR
// if blist = 0 then
3418: LD_VAR 0 2
3422: PUSH
3423: LD_INT 0
3425: EQUAL
3426: IFFALSE 3430
// break ;
3428: GO 3432
// end ;
3430: GO 3324
3432: POP
3433: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3434: LD_STRING 06_remoteVehs_1
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 30
3444: IFFALSE 3911
// begin bc_type = 36 ;
3446: LD_ADDR_OWVAR 42
3450: PUSH
3451: LD_INT 36
3453: ST_TO_ADDR
// bc_level = 4 ;
3454: LD_ADDR_OWVAR 43
3458: PUSH
3459: LD_INT 4
3461: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3462: LD_EXP 37
3466: PPUSH
3467: LD_INT 36
3469: PPUSH
3470: LD_INT 62
3472: PPUSH
3473: LD_INT 12
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL 17162 0 6
3486: PUSH
3487: LD_INT 92
3489: PUSH
3490: LD_INT 62
3492: PUSH
3493: LD_INT 12
3495: PUSH
3496: LD_INT 3
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: NOT
3510: AND
3511: IFFALSE 3528
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3513: LD_INT 62
3515: PPUSH
3516: LD_INT 12
3518: PPUSH
3519: LD_INT 3
3521: PPUSH
3522: CALL_OW 47
3526: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3528: LD_EXP 37
3532: PPUSH
3533: LD_INT 36
3535: PPUSH
3536: LD_INT 37
3538: PPUSH
3539: LD_INT 18
3541: PPUSH
3542: LD_INT 2
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL 17162 0 6
3552: PUSH
3553: LD_INT 92
3555: PUSH
3556: LD_INT 37
3558: PUSH
3559: LD_INT 18
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: PPUSH
3571: CALL_OW 69
3575: NOT
3576: AND
3577: IFFALSE 3594
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3579: LD_INT 37
3581: PPUSH
3582: LD_INT 18
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: CALL_OW 47
3592: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3594: LD_EXP 37
3598: PPUSH
3599: LD_INT 36
3601: PPUSH
3602: LD_INT 66
3604: PPUSH
3605: LD_INT 14
3607: PPUSH
3608: LD_INT 4
3610: PPUSH
3611: LD_INT 0
3613: PPUSH
3614: CALL 17162 0 6
3618: PUSH
3619: LD_INT 92
3621: PUSH
3622: LD_INT 66
3624: PUSH
3625: LD_INT 14
3627: PUSH
3628: LD_INT 3
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 69
3641: NOT
3642: AND
3643: IFFALSE 3660
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3645: LD_INT 66
3647: PPUSH
3648: LD_INT 14
3650: PPUSH
3651: LD_INT 4
3653: PPUSH
3654: CALL_OW 47
3658: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3660: LD_EXP 37
3664: PPUSH
3665: LD_INT 36
3667: PPUSH
3668: LD_INT 74
3670: PPUSH
3671: LD_INT 26
3673: PPUSH
3674: LD_INT 4
3676: PPUSH
3677: LD_INT 0
3679: PPUSH
3680: CALL 17162 0 6
3684: IFFALSE 3699
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3686: LD_INT 74
3688: PPUSH
3689: LD_INT 26
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3699: LD_INT 22
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: LD_INT 30
3711: PUSH
3712: LD_INT 36
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PPUSH
3723: CALL_OW 69
3727: NOT
3728: IFFALSE 3732
// exit ;
3730: GO 3911
// for i := 1 to [ 3 , 2 , 2 , 1 ] [ Difficulty ] do
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: DOUBLE
3738: LD_INT 1
3740: DEC
3741: ST_TO_ADDR
3742: LD_INT 3
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: LD_INT 2
3750: PUSH
3751: LD_INT 1
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: PUSH
3760: LD_OWVAR 67
3764: ARRAY
3765: PUSH
3766: FOR_TO
3767: IFFALSE 3909
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 , 2 ] [ Difficulty ] ;
3769: LD_ADDR_OWVAR 37
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: LD_INT 3
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 1
3789: PPUSH
3790: LD_INT 2
3792: PPUSH
3793: CALL_OW 12
3797: ARRAY
3798: PUSH
3799: LD_INT 2
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: PUSH
3811: LD_OWVAR 67
3815: ARRAY
3816: ST_TO_ADDR
// vc_engine = 1 ;
3817: LD_ADDR_OWVAR 39
3821: PUSH
3822: LD_INT 1
3824: ST_TO_ADDR
// vc_control = 2 ;
3825: LD_ADDR_OWVAR 38
3829: PUSH
3830: LD_INT 2
3832: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3833: LD_ADDR_OWVAR 40
3837: PUSH
3838: LD_INT 3
3840: PUSH
3841: LD_INT 4
3843: PUSH
3844: LD_INT 5
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_INT 3
3857: PPUSH
3858: CALL_OW 12
3862: ARRAY
3863: ST_TO_ADDR
// veh = CreateVehicle ;
3864: LD_ADDR_VAR 0 5
3868: PUSH
3869: CALL_OW 45
3873: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3874: LD_VAR 0 5
3878: PPUSH
3879: LD_INT 4
3881: PPUSH
3882: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3886: LD_VAR 0 5
3890: PPUSH
3891: LD_INT 56
3893: PPUSH
3894: LD_INT 17
3896: PPUSH
3897: LD_INT 9
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 50
// end ;
3907: GO 3766
3909: POP
3910: POP
// end ; end ;
3911: LD_VAR 0 1
3915: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
3921: PPUSH
// uc_side = 1 ;
3922: LD_ADDR_OWVAR 20
3926: PUSH
3927: LD_INT 1
3929: ST_TO_ADDR
// uc_nation = 1 ;
3930: LD_ADDR_OWVAR 21
3934: PUSH
3935: LD_INT 1
3937: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3938: LD_ADDR_EXP 14
3942: PUSH
3943: LD_STRING Denis
3945: PPUSH
3946: LD_INT 1
3948: PPUSH
3949: LD_STRING 06c_
3951: PPUSH
3952: CALL 46248 0 3
3956: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3957: LD_EXP 14
3961: PPUSH
3962: LD_INT 4
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3972: LD_ADDR_EXP 15
3976: PUSH
3977: LD_STRING Joan
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_STRING 06c_
3985: PPUSH
3986: CALL 46248 0 3
3990: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3991: LD_EXP 15
3995: PPUSH
3996: LD_INT 4
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4006: LD_STRING GladstoneIn07
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 30
4016: NOT
4017: IFFALSE 4091
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4019: LD_ADDR_EXP 8
4023: PUSH
4024: LD_STRING Gladstone
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_STRING 06c_
4032: PPUSH
4033: CALL 46248 0 3
4037: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4038: LD_EXP 8
4042: NOT
4043: PUSH
4044: LD_STRING GladstoneStayInDelta
4046: PPUSH
4047: LD_INT 0
4049: PPUSH
4050: CALL_OW 30
4054: AND
4055: IFFALSE 4076
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4057: LD_ADDR_EXP 8
4061: PUSH
4062: LD_STRING Gladstone
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: LD_STRING 05_
4070: PPUSH
4071: CALL 46248 0 3
4075: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4076: LD_EXP 8
4080: PPUSH
4081: LD_INT 4
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4091: LD_STRING LisaStayInDelta
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 30
4101: IFFALSE 4137
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4103: LD_ADDR_EXP 6
4107: PUSH
4108: LD_STRING Lisa
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_STRING 05_
4116: PPUSH
4117: CALL 46248 0 3
4121: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4122: LD_EXP 6
4126: PPUSH
4127: LD_INT 4
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4137: LD_STRING BobbyStayInDelta
4139: PPUSH
4140: LD_INT 0
4142: PPUSH
4143: CALL_OW 30
4147: IFFALSE 4183
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4149: LD_ADDR_EXP 4
4153: PUSH
4154: LD_STRING Bobby
4156: PPUSH
4157: LD_INT 1
4159: PPUSH
4160: LD_STRING 05_
4162: PPUSH
4163: CALL 46248 0 3
4167: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4168: LD_EXP 4
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4183: LD_STRING CyrusStayInDelta
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 30
4193: IFFALSE 4229
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4195: LD_ADDR_EXP 5
4199: PUSH
4200: LD_STRING Cyrus
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: LD_STRING 05_
4208: PPUSH
4209: CALL 46248 0 3
4213: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4214: LD_EXP 5
4218: PPUSH
4219: LD_INT 4
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4229: LD_STRING BrownStayInDelta
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 30
4239: IFFALSE 4275
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4241: LD_ADDR_EXP 2
4245: PUSH
4246: LD_STRING Brown
4248: PPUSH
4249: LD_INT 1
4251: PPUSH
4252: LD_STRING 05_
4254: PPUSH
4255: CALL 46248 0 3
4259: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4260: LD_EXP 2
4264: PPUSH
4265: LD_INT 4
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4275: LD_STRING DonaldsonStayInDelta
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 30
4285: IFFALSE 4321
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4287: LD_ADDR_EXP 3
4291: PUSH
4292: LD_STRING Donaldson
4294: PPUSH
4295: LD_INT 1
4297: PPUSH
4298: LD_STRING 05_
4300: PPUSH
4301: CALL 46248 0 3
4305: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4306: LD_EXP 3
4310: PPUSH
4311: LD_INT 4
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: LD_STRING OthersStayInDelta
4328: PPUSH
4329: CALL_OW 31
4333: ST_TO_ADDR
// if other > 2 then
4334: LD_VAR 0 4
4338: PUSH
4339: LD_INT 2
4341: GREATER
4342: IFFALSE 4387
// begin for j = 1 to 2 do
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: DOUBLE
4350: LD_INT 1
4352: DEC
4353: ST_TO_ADDR
4354: LD_INT 2
4356: PUSH
4357: FOR_TO
4358: IFFALSE 4383
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4360: LD_VAR 0 4
4364: PUSH
4365: LD_VAR 0 3
4369: ARRAY
4370: PPUSH
4371: LD_INT 4
4373: PPUSH
4374: LD_INT 0
4376: PPUSH
4377: CALL_OW 49
4381: GO 4357
4383: POP
4384: POP
// end else
4385: GO 4430
// begin for j = 1 to other do
4387: LD_ADDR_VAR 0 3
4391: PUSH
4392: DOUBLE
4393: LD_INT 1
4395: DEC
4396: ST_TO_ADDR
4397: LD_VAR 0 4
4401: PUSH
4402: FOR_TO
4403: IFFALSE 4428
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4405: LD_VAR 0 4
4409: PUSH
4410: LD_VAR 0 3
4414: ARRAY
4415: PPUSH
4416: LD_INT 4
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL_OW 49
4426: GO 4402
4428: POP
4429: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4430: LD_ADDR_VAR 0 4
4434: PUSH
4435: LD_STRING 06_other_apemans
4437: PPUSH
4438: CALL_OW 31
4442: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
4443: LD_VAR 0 4
4447: PUSH
4448: LD_INT 5
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: LD_INT 3
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PUSH
4466: LD_OWVAR 67
4470: ARRAY
4471: GREATEREQUAL
4472: IFFALSE 4505
// j := [ 5 , 4 , 3 , 3 ] [ Difficulty ] else
4474: LD_ADDR_VAR 0 3
4478: PUSH
4479: LD_INT 5
4481: PUSH
4482: LD_INT 4
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 3
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_OWVAR 67
4501: ARRAY
4502: ST_TO_ADDR
4503: GO 4515
// j := other ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: LD_VAR 0 4
4514: ST_TO_ADDR
// for i = 1 to j do
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_VAR 0 3
4529: PUSH
4530: FOR_TO
4531: IFFALSE 4556
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4533: LD_VAR 0 4
4537: PUSH
4538: LD_VAR 0 2
4542: ARRAY
4543: PPUSH
4544: LD_INT 4
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
4554: GO 4530
4556: POP
4557: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4558: LD_INT 4
4560: PPUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 70
4589: PPUSH
4590: LD_INT 53
4592: PPUSH
4593: LD_INT 19
4595: PPUSH
4596: CALL_OW 111
// firstAttack = 1 ;
4600: LD_ADDR_EXP 33
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// end ;
4608: LD_VAR 0 1
4612: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4613: LD_INT 0
4615: PPUSH
4616: PPUSH
4617: PPUSH
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4624: LD_ADDR_VAR 0 8
4628: PUSH
4629: LD_STRING 07_vehicles
4631: PPUSH
4632: EMPTY
4633: PPUSH
4634: CALL_OW 30
4638: ST_TO_ADDR
// macmilan_squad := [ ] ;
4639: LD_ADDR_EXP 42
4643: PUSH
4644: EMPTY
4645: ST_TO_ADDR
// tmp := [ ] ;
4646: LD_ADDR_VAR 0 6
4650: PUSH
4651: EMPTY
4652: ST_TO_ADDR
// tmp_vehs := [ ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: EMPTY
4659: ST_TO_ADDR
// uc_side := 1 ;
4660: LD_ADDR_OWVAR 20
4664: PUSH
4665: LD_INT 1
4667: ST_TO_ADDR
// uc_nation := 1 ;
4668: LD_ADDR_OWVAR 21
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// if vehicles then
4676: LD_VAR 0 8
4680: IFFALSE 4839
// begin k := 1 ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_VAR 0 8
4704: PUSH
4705: LD_INT 4
4707: DIV
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4837
// begin vc_chassis = vehicles [ k ] ;
4712: LD_ADDR_OWVAR 37
4716: PUSH
4717: LD_VAR 0 8
4721: PUSH
4722: LD_VAR 0 3
4726: ARRAY
4727: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4728: LD_ADDR_OWVAR 39
4732: PUSH
4733: LD_VAR 0 8
4737: PUSH
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 1
4745: PLUS
4746: ARRAY
4747: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4748: LD_ADDR_OWVAR 38
4752: PUSH
4753: LD_VAR 0 8
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_INT 2
4765: PLUS
4766: ARRAY
4767: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4768: LD_ADDR_OWVAR 40
4772: PUSH
4773: LD_VAR 0 8
4777: PUSH
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 3
4785: PLUS
4786: ARRAY
4787: ST_TO_ADDR
// k := k + 4 ;
4788: LD_ADDR_VAR 0 3
4792: PUSH
4793: LD_VAR 0 3
4797: PUSH
4798: LD_INT 4
4800: PLUS
4801: ST_TO_ADDR
// veh := CreateVehicle ;
4802: LD_ADDR_VAR 0 9
4806: PUSH
4807: CALL_OW 45
4811: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4812: LD_ADDR_VAR 0 7
4816: PUSH
4817: LD_VAR 0 7
4821: PPUSH
4822: LD_INT 1
4824: PPUSH
4825: LD_VAR 0 9
4829: PPUSH
4830: CALL_OW 2
4834: ST_TO_ADDR
// end ;
4835: GO 4709
4837: POP
4838: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4839: LD_ADDR_EXP 1
4843: PUSH
4844: LD_STRING JMM
4846: PPUSH
4847: LD_INT 1
4849: PPUSH
4850: LD_EXP 44
4854: PPUSH
4855: CALL 46248 0 3
4859: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4860: LD_EXP 12
4864: PUSH
4865: LD_INT 1
4867: EQUAL
4868: PUSH
4869: LD_EXP 12
4873: PUSH
4874: LD_INT 3
4876: EQUAL
4877: OR
4878: PUSH
4879: LD_EXP 2
4883: NOT
4884: AND
4885: IFFALSE 4943
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4887: LD_ADDR_EXP 2
4891: PUSH
4892: LD_STRING Brown
4894: PPUSH
4895: LD_INT 1
4897: PPUSH
4898: LD_EXP 44
4902: PPUSH
4903: CALL 46248 0 3
4907: ST_TO_ADDR
// if Brown then
4908: LD_EXP 2
4912: IFFALSE 4943
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_VAR 0 6
4923: PPUSH
4924: LD_VAR 0 6
4928: PUSH
4929: LD_INT 1
4931: PLUS
4932: PPUSH
4933: LD_EXP 2
4937: PPUSH
4938: CALL_OW 1
4942: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4943: LD_EXP 12
4947: PUSH
4948: LD_INT 2
4950: EQUAL
4951: PUSH
4952: LD_EXP 12
4956: PUSH
4957: LD_INT 3
4959: EQUAL
4960: OR
4961: PUSH
4962: LD_EXP 3
4966: NOT
4967: AND
4968: IFFALSE 5026
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4970: LD_ADDR_EXP 3
4974: PUSH
4975: LD_STRING Donaldson
4977: PPUSH
4978: LD_INT 1
4980: PPUSH
4981: LD_EXP 44
4985: PPUSH
4986: CALL 46248 0 3
4990: ST_TO_ADDR
// if Donaldson then
4991: LD_EXP 3
4995: IFFALSE 5026
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
4997: LD_ADDR_VAR 0 6
5001: PUSH
5002: LD_VAR 0 6
5006: PPUSH
5007: LD_VAR 0 6
5011: PUSH
5012: LD_INT 1
5014: PLUS
5015: PPUSH
5016: LD_EXP 3
5020: PPUSH
5021: CALL_OW 1
5025: ST_TO_ADDR
// end ; if not Bobby then
5026: LD_EXP 4
5030: NOT
5031: IFFALSE 5089
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
5033: LD_ADDR_EXP 4
5037: PUSH
5038: LD_STRING Bobby
5040: PPUSH
5041: LD_INT 1
5043: PPUSH
5044: LD_EXP 44
5048: PPUSH
5049: CALL 46248 0 3
5053: ST_TO_ADDR
// if Bobby then
5054: LD_EXP 4
5058: IFFALSE 5089
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5060: LD_ADDR_VAR 0 6
5064: PUSH
5065: LD_VAR 0 6
5069: PPUSH
5070: LD_VAR 0 6
5074: PUSH
5075: LD_INT 1
5077: PLUS
5078: PPUSH
5079: LD_EXP 4
5083: PPUSH
5084: CALL_OW 1
5088: ST_TO_ADDR
// end ; if not Cyrus then
5089: LD_EXP 5
5093: NOT
5094: IFFALSE 5152
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5096: LD_ADDR_EXP 5
5100: PUSH
5101: LD_STRING Cyrus
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_EXP 44
5111: PPUSH
5112: CALL 46248 0 3
5116: ST_TO_ADDR
// if Cyrus then
5117: LD_EXP 5
5121: IFFALSE 5152
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5123: LD_ADDR_VAR 0 6
5127: PUSH
5128: LD_VAR 0 6
5132: PPUSH
5133: LD_VAR 0 6
5137: PUSH
5138: LD_INT 1
5140: PLUS
5141: PPUSH
5142: LD_EXP 5
5146: PPUSH
5147: CALL_OW 1
5151: ST_TO_ADDR
// end ; if not Lisa then
5152: LD_EXP 6
5156: NOT
5157: IFFALSE 5215
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5159: LD_ADDR_EXP 6
5163: PUSH
5164: LD_STRING Lisa
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: LD_EXP 44
5174: PPUSH
5175: CALL 46248 0 3
5179: ST_TO_ADDR
// if Lisa then
5180: LD_EXP 6
5184: IFFALSE 5215
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5186: LD_ADDR_VAR 0 6
5190: PUSH
5191: LD_VAR 0 6
5195: PPUSH
5196: LD_VAR 0 6
5200: PUSH
5201: LD_INT 1
5203: PLUS
5204: PPUSH
5205: LD_EXP 6
5209: PPUSH
5210: CALL_OW 1
5214: ST_TO_ADDR
// end ; if not Frank then
5215: LD_EXP 7
5219: NOT
5220: IFFALSE 5278
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5222: LD_ADDR_EXP 7
5226: PUSH
5227: LD_STRING Frank
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: LD_EXP 44
5237: PPUSH
5238: CALL 46248 0 3
5242: ST_TO_ADDR
// if Frank then
5243: LD_EXP 7
5247: IFFALSE 5278
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5249: LD_ADDR_VAR 0 6
5253: PUSH
5254: LD_VAR 0 6
5258: PPUSH
5259: LD_VAR 0 6
5263: PUSH
5264: LD_INT 1
5266: PLUS
5267: PPUSH
5268: LD_EXP 7
5272: PPUSH
5273: CALL_OW 1
5277: ST_TO_ADDR
// end ; if not Kikuchi then
5278: LD_EXP 9
5282: NOT
5283: IFFALSE 5341
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5285: LD_ADDR_EXP 9
5289: PUSH
5290: LD_STRING Kikuchi
5292: PPUSH
5293: LD_INT 1
5295: PPUSH
5296: LD_EXP 44
5300: PPUSH
5301: CALL 46248 0 3
5305: ST_TO_ADDR
// if Kikuchi then
5306: LD_EXP 9
5310: IFFALSE 5341
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5312: LD_ADDR_VAR 0 6
5316: PUSH
5317: LD_VAR 0 6
5321: PPUSH
5322: LD_VAR 0 6
5326: PUSH
5327: LD_INT 1
5329: PLUS
5330: PPUSH
5331: LD_EXP 9
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// end ; if not Gladstone then
5341: LD_EXP 8
5345: NOT
5346: IFFALSE 5404
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5348: LD_ADDR_EXP 8
5352: PUSH
5353: LD_STRING Gladstone
5355: PPUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_EXP 44
5363: PPUSH
5364: CALL 46248 0 3
5368: ST_TO_ADDR
// if Gladstone then
5369: LD_EXP 8
5373: IFFALSE 5404
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5375: LD_ADDR_VAR 0 6
5379: PUSH
5380: LD_VAR 0 6
5384: PPUSH
5385: LD_VAR 0 6
5389: PUSH
5390: LD_INT 1
5392: PLUS
5393: PPUSH
5394: LD_EXP 8
5398: PPUSH
5399: CALL_OW 1
5403: ST_TO_ADDR
// end ; if not Khatam then
5404: LD_EXP 10
5408: NOT
5409: IFFALSE 5467
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5411: LD_ADDR_EXP 10
5415: PUSH
5416: LD_STRING Khatam
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: LD_EXP 44
5426: PPUSH
5427: CALL 46248 0 3
5431: ST_TO_ADDR
// if Khatam then
5432: LD_EXP 10
5436: IFFALSE 5467
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5438: LD_ADDR_VAR 0 6
5442: PUSH
5443: LD_VAR 0 6
5447: PPUSH
5448: LD_VAR 0 6
5452: PUSH
5453: LD_INT 1
5455: PLUS
5456: PPUSH
5457: LD_EXP 10
5461: PPUSH
5462: CALL_OW 1
5466: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5467: LD_ADDR_VAR 0 5
5471: PUSH
5472: LD_STRING 07c_others
5474: PPUSH
5475: CALL_OW 31
5479: ST_TO_ADDR
// macmilan_squad := others ;
5480: LD_ADDR_EXP 42
5484: PUSH
5485: LD_VAR 0 5
5489: ST_TO_ADDR
// if others then
5490: LD_VAR 0 5
5494: IFFALSE 5582
// for i in others do
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_VAR 0 5
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5580
// if GetClass ( i ) = 3 then
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 257
5518: PUSH
5519: LD_INT 3
5521: EQUAL
5522: IFFALSE 5549
// tmp := Insert ( tmp , 1 , i ) else
5524: LD_ADDR_VAR 0 6
5528: PUSH
5529: LD_VAR 0 6
5533: PPUSH
5534: LD_INT 1
5536: PPUSH
5537: LD_VAR 0 2
5541: PPUSH
5542: CALL_OW 2
5546: ST_TO_ADDR
5547: GO 5578
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5549: LD_ADDR_VAR 0 6
5553: PUSH
5554: LD_VAR 0 6
5558: PPUSH
5559: LD_VAR 0 6
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: PPUSH
5568: LD_VAR 0 2
5572: PPUSH
5573: CALL_OW 1
5577: ST_TO_ADDR
5578: GO 5506
5580: POP
5581: POP
// if FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) then
5582: LD_INT 4
5584: PPUSH
5585: LD_INT 21
5587: PUSH
5588: LD_INT 3
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 70
5599: IFFALSE 5640
// for i in FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) do
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 21
5611: PUSH
5612: LD_INT 3
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 70
5623: PUSH
5624: FOR_IN
5625: IFFALSE 5638
// RemoveUnit ( i ) ;
5627: LD_VAR 0 2
5631: PPUSH
5632: CALL_OW 64
5636: GO 5624
5638: POP
5639: POP
// wait ( 0 0$1 ) ;
5640: LD_INT 35
5642: PPUSH
5643: CALL_OW 67
// if tmp then
5647: LD_VAR 0 6
5651: IFFALSE 5836
// begin for i in tmp do
5653: LD_ADDR_VAR 0 2
5657: PUSH
5658: LD_VAR 0 6
5662: PUSH
5663: FOR_IN
5664: IFFALSE 5834
// begin SetDir ( i , 3 ) ;
5666: LD_VAR 0 2
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 233
// if tmp_vehs then
5678: LD_VAR 0 7
5682: IFFALSE 5760
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5684: LD_VAR 0 7
5688: PUSH
5689: LD_INT 1
5691: ARRAY
5692: PPUSH
5693: LD_INT 3
5695: PPUSH
5696: CALL_OW 233
// PlaceUnitXY ( tmp_vehs [ 1 ] , 78 , 5 , false ) ;
5700: LD_VAR 0 7
5704: PUSH
5705: LD_INT 1
5707: ARRAY
5708: PPUSH
5709: LD_INT 78
5711: PPUSH
5712: LD_INT 5
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 48
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5722: LD_VAR 0 2
5726: PPUSH
5727: LD_VAR 0 7
5731: PUSH
5732: LD_INT 1
5734: ARRAY
5735: PPUSH
5736: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5740: LD_ADDR_VAR 0 7
5744: PUSH
5745: LD_VAR 0 7
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 3
5757: ST_TO_ADDR
// end else
5758: GO 5775
// PlaceUnitArea ( i , GammaSupport , false ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: LD_INT 4
5767: PPUSH
5768: LD_INT 0
5770: PPUSH
5771: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5775: LD_VAR 0 2
5779: PPUSH
5780: LD_INT 77
5782: PPUSH
5783: LD_INT 16
5785: PPUSH
5786: CALL_OW 111
// AddComMoveXY ( i , 65 , 24 ) ;
5790: LD_VAR 0 2
5794: PPUSH
5795: LD_INT 65
5797: PPUSH
5798: LD_INT 24
5800: PPUSH
5801: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5805: LD_INT 35
5807: PPUSH
5808: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5812: LD_INT 4
5814: PPUSH
5815: LD_INT 22
5817: PUSH
5818: LD_INT 1
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 70
5829: NOT
5830: IFFALSE 5805
// end ;
5832: GO 5663
5834: POP
5835: POP
// end ; PlaceUnitArea ( JMM , GammaSupport , false ) ;
5836: LD_EXP 1
5840: PPUSH
5841: LD_INT 4
5843: PPUSH
5844: LD_INT 0
5846: PPUSH
5847: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_INT 77
5858: PPUSH
5859: LD_INT 16
5861: PPUSH
5862: CALL_OW 111
// end ;
5866: LD_VAR 0 1
5870: RET
// export function PrepareSikorsky ; begin
5871: LD_INT 0
5873: PPUSH
// uc_side = 4 ;
5874: LD_ADDR_OWVAR 20
5878: PUSH
5879: LD_INT 4
5881: ST_TO_ADDR
// uc_nation = 1 ;
5882: LD_ADDR_OWVAR 21
5886: PUSH
5887: LD_INT 1
5889: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5890: LD_ADDR_EXP 16
5894: PUSH
5895: LD_STRING Sikorski
5897: PPUSH
5898: LD_INT 0
5900: PPUSH
5901: LD_STRING 
5903: PPUSH
5904: CALL 46248 0 3
5908: ST_TO_ADDR
// vc_engine = 1 ;
5909: LD_ADDR_OWVAR 39
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_control = 1 ;
5917: LD_ADDR_OWVAR 38
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 , 4 ] [ Difficulty ] ;
5925: LD_ADDR_OWVAR 40
5929: PUSH
5930: LD_INT 5
5932: PUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: LD_OWVAR 67
5952: ARRAY
5953: ST_TO_ADDR
// vc_chassis = 4 ;
5954: LD_ADDR_OWVAR 37
5958: PUSH
5959: LD_INT 4
5961: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5962: LD_ADDR_EXP 17
5966: PUSH
5967: CALL_OW 45
5971: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5972: LD_EXP 17
5976: PPUSH
5977: LD_INT 3
5979: PPUSH
5980: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5984: LD_INT 35
5986: PPUSH
5987: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5991: LD_EXP 17
5995: PPUSH
5996: LD_INT 18
5998: PPUSH
5999: LD_INT 5
6001: PPUSH
6002: LD_INT 0
6004: PPUSH
6005: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
6009: LD_EXP 17
6013: PPUSH
6014: CALL_OW 305
6018: IFFALSE 5984
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
6020: LD_EXP 16
6024: PPUSH
6025: LD_EXP 17
6029: PPUSH
6030: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
6034: LD_EXP 17
6038: PPUSH
6039: LD_INT 5
6041: PPUSH
6042: CALL_OW 113
// end ;
6046: LD_VAR 0 1
6050: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
6051: LD_INT 0
6053: PPUSH
6054: PPUSH
6055: PPUSH
6056: PPUSH
// InitHc ;
6057: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 , 3 ] [ Difficulty ] do
6061: LD_ADDR_VAR 0 2
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_INT 5
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: LD_INT 4
6079: PUSH
6080: LD_INT 3
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_OWVAR 67
6093: ARRAY
6094: PUSH
6095: FOR_TO
6096: IFFALSE 6212
// begin uc_side = 4 ;
6098: LD_ADDR_OWVAR 20
6102: PUSH
6103: LD_INT 4
6105: ST_TO_ADDR
// uc_nation = 1 ;
6106: LD_ADDR_OWVAR 21
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// hc_name =  ;
6114: LD_ADDR_OWVAR 26
6118: PUSH
6119: LD_STRING 
6121: ST_TO_ADDR
// hc_gallery =  ;
6122: LD_ADDR_OWVAR 33
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6130: LD_INT 0
6132: PPUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_INT 5
6138: PPUSH
6139: LD_INT 8
6141: PPUSH
6142: CALL_OW 12
6146: PPUSH
6147: CALL_OW 380
// un = CreateHuman ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: CALL_OW 44
6160: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6161: LD_VAR 0 3
6165: PPUSH
6166: LD_INT 3
6168: PPUSH
6169: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_INT 9
6180: PPUSH
6181: LD_INT 0
6183: PPUSH
6184: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6188: LD_VAR 0 3
6192: PPUSH
6193: LD_INT 53
6195: PPUSH
6196: LD_INT 23
6198: PPUSH
6199: CALL_OW 111
// wait ( 0 0$1 ) ;
6203: LD_INT 35
6205: PPUSH
6206: CALL_OW 67
// end ;
6210: GO 6095
6212: POP
6213: POP
// for i = 1 to 2 do
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: DOUBLE
6220: LD_INT 1
6222: DEC
6223: ST_TO_ADDR
6224: LD_INT 2
6226: PUSH
6227: FOR_TO
6228: IFFALSE 6344
// begin uc_side = 4 ;
6230: LD_ADDR_OWVAR 20
6234: PUSH
6235: LD_INT 4
6237: ST_TO_ADDR
// uc_nation = 1 ;
6238: LD_ADDR_OWVAR 21
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// hc_name =  ;
6246: LD_ADDR_OWVAR 26
6250: PUSH
6251: LD_STRING 
6253: ST_TO_ADDR
// hc_gallery =  ;
6254: LD_ADDR_OWVAR 33
6258: PUSH
6259: LD_STRING 
6261: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 4
6267: PPUSH
6268: LD_INT 5
6270: PPUSH
6271: LD_INT 8
6273: PPUSH
6274: CALL_OW 12
6278: PPUSH
6279: CALL_OW 380
// un = CreateHuman ;
6283: LD_ADDR_VAR 0 3
6287: PUSH
6288: CALL_OW 44
6292: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6293: LD_VAR 0 3
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6305: LD_VAR 0 3
6309: PPUSH
6310: LD_INT 9
6312: PPUSH
6313: LD_INT 0
6315: PPUSH
6316: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6320: LD_VAR 0 3
6324: PPUSH
6325: LD_INT 53
6327: PPUSH
6328: LD_INT 23
6330: PPUSH
6331: CALL_OW 111
// wait ( 0 0$1 ) ;
6335: LD_INT 35
6337: PPUSH
6338: CALL_OW 67
// end ;
6342: GO 6227
6344: POP
6345: POP
// for i = 1 to [ 5 , 5 , 4 , 3 ] [ Difficulty ] do
6346: LD_ADDR_VAR 0 2
6350: PUSH
6351: DOUBLE
6352: LD_INT 1
6354: DEC
6355: ST_TO_ADDR
6356: LD_INT 5
6358: PUSH
6359: LD_INT 5
6361: PUSH
6362: LD_INT 4
6364: PUSH
6365: LD_INT 3
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: LD_OWVAR 67
6378: ARRAY
6379: PUSH
6380: FOR_TO
6381: IFFALSE 6615
// begin uc_side = 4 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 4
6390: ST_TO_ADDR
// uc_nation = 1 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// vc_engine = 1 ;
6399: LD_ADDR_OWVAR 39
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// vc_control = 1 ;
6407: LD_ADDR_OWVAR 38
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6415: LD_ADDR_OWVAR 40
6419: PUSH
6420: LD_INT 7
6422: PUSH
6423: LD_INT 4
6425: PUSH
6426: LD_INT 5
6428: PUSH
6429: LD_INT 6
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_VAR 0 2
6442: PUSH
6443: LD_INT 4
6445: MOD
6446: PUSH
6447: LD_INT 1
6449: PLUS
6450: ARRAY
6451: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6452: LD_ADDR_OWVAR 37
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 3
6462: PUSH
6463: LD_INT 4
6465: PUSH
6466: LD_INT 4
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_VAR 0 2
6479: PUSH
6480: LD_INT 4
6482: MOD
6483: PUSH
6484: LD_INT 1
6486: PLUS
6487: ARRAY
6488: ST_TO_ADDR
// veh = CreateVehicle ;
6489: LD_ADDR_VAR 0 4
6493: PUSH
6494: CALL_OW 45
6498: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 3
6506: PPUSH
6507: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 9
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// InitHc ;
6526: CALL_OW 19
// hc_name =  ;
6530: LD_ADDR_OWVAR 26
6534: PUSH
6535: LD_STRING 
6537: ST_TO_ADDR
// hc_gallery =  ;
6538: LD_ADDR_OWVAR 33
6542: PUSH
6543: LD_STRING 
6545: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6546: LD_INT 0
6548: PPUSH
6549: LD_INT 3
6551: PPUSH
6552: LD_INT 5
6554: PPUSH
6555: LD_INT 8
6557: PPUSH
6558: CALL_OW 12
6562: PPUSH
6563: CALL_OW 380
// un = CreateHuman ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: CALL_OW 44
6576: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6577: LD_VAR 0 3
6581: PPUSH
6582: LD_VAR 0 4
6586: PPUSH
6587: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6591: LD_VAR 0 3
6595: PPUSH
6596: LD_INT 53
6598: PPUSH
6599: LD_INT 23
6601: PPUSH
6602: CALL_OW 111
// wait ( 0 0$5 ) ;
6606: LD_INT 175
6608: PPUSH
6609: CALL_OW 67
// end ;
6613: GO 6380
6615: POP
6616: POP
// end ; end_of_file
6617: LD_VAR 0 1
6621: RET
// export function PrepareRussianCommander ; begin
6622: LD_INT 0
6624: PPUSH
// uc_side = 3 ;
6625: LD_ADDR_OWVAR 20
6629: PUSH
6630: LD_INT 3
6632: ST_TO_ADDR
// uc_nation = 3 ;
6633: LD_ADDR_OWVAR 21
6637: PUSH
6638: LD_INT 3
6640: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6641: LD_ADDR_EXP 24
6645: PUSH
6646: LD_STRING Borodin
6648: PPUSH
6649: CALL_OW 25
6653: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6654: LD_EXP 24
6658: PPUSH
6659: LD_INT 25
6661: PPUSH
6662: LD_INT 0
6664: PPUSH
6665: CALL_OW 49
// end ;
6669: LD_VAR 0 1
6673: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6674: LD_INT 0
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
// for i = 1 to 10 do
6680: LD_ADDR_VAR 0 2
6684: PUSH
6685: DOUBLE
6686: LD_INT 1
6688: DEC
6689: ST_TO_ADDR
6690: LD_INT 10
6692: PUSH
6693: FOR_TO
6694: IFFALSE 6768
// begin uc_side = 6 ;
6696: LD_ADDR_OWVAR 20
6700: PUSH
6701: LD_INT 6
6703: ST_TO_ADDR
// uc_nation = 3 ;
6704: LD_ADDR_OWVAR 21
6708: PUSH
6709: LD_INT 3
6711: ST_TO_ADDR
// hc_gallery =  ;
6712: LD_ADDR_OWVAR 33
6716: PUSH
6717: LD_STRING 
6719: ST_TO_ADDR
// hc_name =  ;
6720: LD_ADDR_OWVAR 26
6724: PUSH
6725: LD_STRING 
6727: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6728: LD_INT 0
6730: PPUSH
6731: LD_INT 1
6733: PPUSH
6734: LD_INT 3
6736: PPUSH
6737: CALL_OW 380
// un = CreateHuman ;
6741: LD_ADDR_VAR 0 3
6745: PUSH
6746: CALL_OW 44
6750: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6751: LD_VAR 0 3
6755: PPUSH
6756: LD_INT 1
6758: PPUSH
6759: LD_INT 0
6761: PPUSH
6762: CALL_OW 49
// end ;
6766: GO 6693
6768: POP
6769: POP
// for i = 1 to 3 do
6770: LD_ADDR_VAR 0 2
6774: PUSH
6775: DOUBLE
6776: LD_INT 1
6778: DEC
6779: ST_TO_ADDR
6780: LD_INT 3
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6933
// begin uc_side = 6 ;
6786: LD_ADDR_OWVAR 20
6790: PUSH
6791: LD_INT 6
6793: ST_TO_ADDR
// uc_nation = 3 ;
6794: LD_ADDR_OWVAR 21
6798: PUSH
6799: LD_INT 3
6801: ST_TO_ADDR
// vc_engine = 1 ;
6802: LD_ADDR_OWVAR 39
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// vc_control = 1 ;
6810: LD_ADDR_OWVAR 38
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6818: LD_ADDR_OWVAR 40
6822: PUSH
6823: LD_INT 43
6825: PUSH
6826: LD_INT 44
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 1
6835: PPUSH
6836: LD_INT 2
6838: PPUSH
6839: CALL_OW 12
6843: ARRAY
6844: ST_TO_ADDR
// vc_chassis = 22 ;
6845: LD_ADDR_OWVAR 37
6849: PUSH
6850: LD_INT 22
6852: ST_TO_ADDR
// veh = CreateVehicle ;
6853: LD_ADDR_VAR 0 4
6857: PUSH
6858: CALL_OW 45
6862: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6863: LD_VAR 0 4
6867: PPUSH
6868: LD_INT 2
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: CALL_OW 49
// hc_gallery =  ;
6878: LD_ADDR_OWVAR 33
6882: PUSH
6883: LD_STRING 
6885: ST_TO_ADDR
// hc_name =  ;
6886: LD_ADDR_OWVAR 26
6890: PUSH
6891: LD_STRING 
6893: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6894: LD_INT 0
6896: PPUSH
6897: LD_INT 3
6899: PPUSH
6900: LD_INT 4
6902: PPUSH
6903: CALL_OW 380
// un = CreateHuman ;
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: CALL_OW 44
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_VAR 0 4
6926: PPUSH
6927: CALL_OW 52
// end ;
6931: GO 6783
6933: POP
6934: POP
// end ;
6935: LD_VAR 0 1
6939: RET
// export function PrepareRussians ; var i , un ; begin
6940: LD_INT 0
6942: PPUSH
6943: PPUSH
6944: PPUSH
// for i = 1 to 8 do
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_INT 8
6957: PUSH
6958: FOR_TO
6959: IFFALSE 7045
// begin uc_side = 3 ;
6961: LD_ADDR_OWVAR 20
6965: PUSH
6966: LD_INT 3
6968: ST_TO_ADDR
// uc_nation = 3 ;
6969: LD_ADDR_OWVAR 21
6973: PUSH
6974: LD_INT 3
6976: ST_TO_ADDR
// hc_gallery =  ;
6977: LD_ADDR_OWVAR 33
6981: PUSH
6982: LD_STRING 
6984: ST_TO_ADDR
// hc_name =  ;
6985: LD_ADDR_OWVAR 26
6989: PUSH
6990: LD_STRING 
6992: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6993: LD_INT 0
6995: PPUSH
6996: LD_INT 1
6998: PPUSH
6999: LD_EXP 25
7003: PPUSH
7004: LD_EXP 26
7008: PPUSH
7009: CALL_OW 12
7013: PPUSH
7014: CALL_OW 380
// un = CreateHuman ;
7018: LD_ADDR_VAR 0 3
7022: PUSH
7023: CALL_OW 44
7027: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7028: LD_VAR 0 3
7032: PPUSH
7033: LD_INT 3
7035: PPUSH
7036: LD_INT 0
7038: PPUSH
7039: CALL_OW 49
// end ;
7043: GO 6958
7045: POP
7046: POP
// for i = 1 to 4 do
7047: LD_ADDR_VAR 0 2
7051: PUSH
7052: DOUBLE
7053: LD_INT 1
7055: DEC
7056: ST_TO_ADDR
7057: LD_INT 4
7059: PUSH
7060: FOR_TO
7061: IFFALSE 7147
// begin uc_side = 3 ;
7063: LD_ADDR_OWVAR 20
7067: PUSH
7068: LD_INT 3
7070: ST_TO_ADDR
// uc_nation = 3 ;
7071: LD_ADDR_OWVAR 21
7075: PUSH
7076: LD_INT 3
7078: ST_TO_ADDR
// hc_gallery =  ;
7079: LD_ADDR_OWVAR 33
7083: PUSH
7084: LD_STRING 
7086: ST_TO_ADDR
// hc_name =  ;
7087: LD_ADDR_OWVAR 26
7091: PUSH
7092: LD_STRING 
7094: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7095: LD_INT 0
7097: PPUSH
7098: LD_INT 2
7100: PPUSH
7101: LD_EXP 25
7105: PPUSH
7106: LD_EXP 26
7110: PPUSH
7111: CALL_OW 12
7115: PPUSH
7116: CALL_OW 380
// un = CreateHuman ;
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: CALL_OW 44
7129: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7130: LD_VAR 0 3
7134: PPUSH
7135: LD_INT 3
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7060
7147: POP
7148: POP
// for i = 1 to 3 do
7149: LD_ADDR_VAR 0 2
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_INT 3
7161: PUSH
7162: FOR_TO
7163: IFFALSE 7249
// begin uc_side = 3 ;
7165: LD_ADDR_OWVAR 20
7169: PUSH
7170: LD_INT 3
7172: ST_TO_ADDR
// uc_nation = 3 ;
7173: LD_ADDR_OWVAR 21
7177: PUSH
7178: LD_INT 3
7180: ST_TO_ADDR
// hc_gallery =  ;
7181: LD_ADDR_OWVAR 33
7185: PUSH
7186: LD_STRING 
7188: ST_TO_ADDR
// hc_name =  ;
7189: LD_ADDR_OWVAR 26
7193: PUSH
7194: LD_STRING 
7196: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7197: LD_INT 0
7199: PPUSH
7200: LD_INT 3
7202: PPUSH
7203: LD_EXP 25
7207: PPUSH
7208: LD_EXP 26
7212: PPUSH
7213: CALL_OW 12
7217: PPUSH
7218: CALL_OW 380
// un = CreateHuman ;
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: CALL_OW 44
7231: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7232: LD_VAR 0 3
7236: PPUSH
7237: LD_INT 3
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: CALL_OW 49
// end ;
7247: GO 7162
7249: POP
7250: POP
// for i = 1 to 2 do
7251: LD_ADDR_VAR 0 2
7255: PUSH
7256: DOUBLE
7257: LD_INT 1
7259: DEC
7260: ST_TO_ADDR
7261: LD_INT 2
7263: PUSH
7264: FOR_TO
7265: IFFALSE 7351
// begin uc_side = 3 ;
7267: LD_ADDR_OWVAR 20
7271: PUSH
7272: LD_INT 3
7274: ST_TO_ADDR
// uc_nation = 3 ;
7275: LD_ADDR_OWVAR 21
7279: PUSH
7280: LD_INT 3
7282: ST_TO_ADDR
// hc_gallery =  ;
7283: LD_ADDR_OWVAR 33
7287: PUSH
7288: LD_STRING 
7290: ST_TO_ADDR
// hc_name =  ;
7291: LD_ADDR_OWVAR 26
7295: PUSH
7296: LD_STRING 
7298: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7299: LD_INT 0
7301: PPUSH
7302: LD_INT 4
7304: PPUSH
7305: LD_EXP 25
7309: PPUSH
7310: LD_EXP 26
7314: PPUSH
7315: CALL_OW 12
7319: PPUSH
7320: CALL_OW 380
// un = CreateHuman ;
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: CALL_OW 44
7333: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7334: LD_VAR 0 3
7338: PPUSH
7339: LD_INT 3
7341: PPUSH
7342: LD_INT 0
7344: PPUSH
7345: CALL_OW 49
// end ;
7349: GO 7264
7351: POP
7352: POP
// end ; end_of_file
7353: LD_VAR 0 1
7357: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7358: LD_INT 0
7360: PPUSH
7361: PPUSH
7362: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7363: LD_ADDR_VAR 0 1
7367: PUSH
7368: LD_VAR 0 1
7372: PUSH
7373: LD_EXP 1
7377: PUSH
7378: LD_EXP 2
7382: PUSH
7383: LD_EXP 3
7387: PUSH
7388: LD_EXP 4
7392: PUSH
7393: LD_EXP 5
7397: PUSH
7398: LD_EXP 6
7402: PUSH
7403: LD_EXP 7
7407: PUSH
7408: LD_EXP 8
7412: PUSH
7413: LD_EXP 9
7417: PUSH
7418: LD_EXP 10
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: DIFF
7435: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_VAR 0 1
7453: PPUSH
7454: CALL_OW 12
7458: ARRAY
7459: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7460: LD_VAR 0 6
7464: PPUSH
7465: CALL_OW 258
7469: PUSH
7470: LD_INT 1
7472: EQUAL
7473: IFFALSE 7491
// Say ( speaker , dialogMID ) else
7475: LD_VAR 0 6
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL_OW 88
7489: GO 7505
// Say ( speaker , dialogFID ) ;
7491: LD_VAR 0 6
7495: PPUSH
7496: LD_VAR 0 3
7500: PPUSH
7501: CALL_OW 88
// result := speaker ;
7505: LD_ADDR_VAR 0 4
7509: PUSH
7510: LD_VAR 0 6
7514: ST_TO_ADDR
// end ;
7515: LD_VAR 0 4
7519: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7520: LD_INT 0
7522: PPUSH
7523: PPUSH
7524: PPUSH
// uc_side := GetSide ( b ) ;
7525: LD_ADDR_OWVAR 20
7529: PUSH
7530: LD_VAR 0 2
7534: PPUSH
7535: CALL_OW 255
7539: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7540: LD_ADDR_OWVAR 21
7544: PUSH
7545: LD_VAR 0 2
7549: PPUSH
7550: CALL_OW 248
7554: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7555: LD_INT 0
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: LD_VAR 0 1
7565: PPUSH
7566: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7570: LD_ADDR_VAR 0 5
7574: PUSH
7575: LD_VAR 0 2
7579: PPUSH
7580: CALL_OW 254
7584: PUSH
7585: LD_INT 3
7587: MINUS
7588: ST_TO_ADDR
// if dir < 0 then
7589: LD_VAR 0 5
7593: PUSH
7594: LD_INT 0
7596: LESS
7597: IFFALSE 7613
// dir := 6 + dir ;
7599: LD_ADDR_VAR 0 5
7603: PUSH
7604: LD_INT 6
7606: PUSH
7607: LD_VAR 0 5
7611: PLUS
7612: ST_TO_ADDR
// un := CreateHuman ;
7613: LD_ADDR_VAR 0 4
7617: PUSH
7618: CALL_OW 44
7622: ST_TO_ADDR
// SetDir ( un , dir ) ;
7623: LD_VAR 0 4
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7637: LD_VAR 0 4
7641: PPUSH
7642: LD_VAR 0 2
7646: PPUSH
7647: CALL_OW 52
// end ;
7651: LD_VAR 0 3
7655: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7656: LD_INT 0
7658: PPUSH
7659: PPUSH
7660: PPUSH
7661: PPUSH
// for i = 1 to count do
7662: LD_ADDR_VAR 0 8
7666: PUSH
7667: DOUBLE
7668: LD_INT 1
7670: DEC
7671: ST_TO_ADDR
7672: LD_VAR 0 6
7676: PUSH
7677: FOR_TO
7678: IFFALSE 7759
// begin uc_side = side ;
7680: LD_ADDR_OWVAR 20
7684: PUSH
7685: LD_VAR 0 1
7689: ST_TO_ADDR
// uc_nation = nation ;
7690: LD_ADDR_OWVAR 21
7694: PUSH
7695: LD_VAR 0 2
7699: ST_TO_ADDR
// hc_gallery =  ;
7700: LD_ADDR_OWVAR 33
7704: PUSH
7705: LD_STRING 
7707: ST_TO_ADDR
// hc_name =  ;
7708: LD_ADDR_OWVAR 26
7712: PUSH
7713: LD_STRING 
7715: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7716: LD_INT 0
7718: PPUSH
7719: LD_VAR 0 5
7723: PPUSH
7724: LD_VAR 0 4
7728: PPUSH
7729: CALL_OW 380
// un = CreateHuman ;
7733: LD_ADDR_VAR 0 10
7737: PUSH
7738: CALL_OW 44
7742: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7743: LD_VAR 0 10
7747: PPUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: CALL_OW 52
// end ;
7757: GO 7677
7759: POP
7760: POP
// end ;
7761: LD_VAR 0 7
7765: RET
// export function PrepareDifficulty ; begin
7766: LD_INT 0
7768: PPUSH
// case Difficulty of 1 :
7769: LD_OWVAR 67
7773: PUSH
7774: LD_INT 1
7776: DOUBLE
7777: EQUAL
7778: IFTRUE 7782
7780: GO 7801
7782: POP
// begin RuSolMinLevel = 3 ;
7783: LD_ADDR_EXP 25
7787: PUSH
7788: LD_INT 3
7790: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7791: LD_ADDR_EXP 26
7795: PUSH
7796: LD_INT 5
7798: ST_TO_ADDR
// end ; 2 :
7799: GO 7979
7801: LD_INT 2
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7880
7809: POP
// begin RuSolMinLevel = 5 ;
7810: LD_ADDR_EXP 25
7814: PUSH
7815: LD_INT 5
7817: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7818: LD_ADDR_EXP 26
7822: PUSH
7823: LD_INT 6
7825: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7826: LD_INT 51
7828: PPUSH
7829: LD_INT 3
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7839: LD_INT 57
7841: PPUSH
7842: LD_INT 3
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7852: LD_INT 57
7854: PPUSH
7855: LD_INT 6
7857: PPUSH
7858: LD_INT 2
7860: PPUSH
7861: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7865: LD_INT 51
7867: PPUSH
7868: LD_INT 6
7870: PPUSH
7871: LD_INT 2
7873: PPUSH
7874: CALL_OW 322
// end ; 3 .. 4 :
7878: GO 7979
7880: LD_INT 3
7882: DOUBLE
7883: GREATEREQUAL
7884: IFFALSE 7892
7886: LD_INT 4
7888: DOUBLE
7889: LESSEQUAL
7890: IFTRUE 7894
7892: GO 7978
7894: POP
// begin RuSolMinLevel = 5 ;
7895: LD_ADDR_EXP 25
7899: PUSH
7900: LD_INT 5
7902: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7903: LD_ADDR_EXP 26
7907: PUSH
7908: LD_INT 6
7910: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7911: LD_INT 57
7913: PPUSH
7914: LD_INT 3
7916: PPUSH
7917: LD_INT 1
7919: PPUSH
7920: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7924: LD_INT 51
7926: PPUSH
7927: LD_INT 3
7929: PPUSH
7930: LD_INT 1
7932: PPUSH
7933: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7937: LD_INT 52
7939: PPUSH
7940: LD_INT 3
7942: PPUSH
7943: LD_INT 1
7945: PPUSH
7946: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7950: LD_INT 57
7952: PPUSH
7953: LD_INT 6
7955: PPUSH
7956: LD_INT 2
7958: PPUSH
7959: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7963: LD_INT 52
7965: PPUSH
7966: LD_INT 6
7968: PPUSH
7969: LD_INT 2
7971: PPUSH
7972: CALL_OW 322
// end ; end ;
7976: GO 7979
7978: POP
// end ;
7979: LD_VAR 0 1
7983: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7984: LD_INT 0
7986: PPUSH
7987: PPUSH
7988: PPUSH
7989: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7990: LD_ADDR_VAR 0 3
7994: PUSH
7995: LD_INT 22
7997: PUSH
7998: LD_INT 3
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 25
8007: PUSH
8008: LD_INT 2
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 69
8023: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
8024: LD_ADDR_VAR 0 4
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: LD_INT 75
8034: PUSH
8035: LD_INT 79
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: LD_INT 113
8052: PUSH
8053: LD_INT 94
8055: PUSH
8056: LD_INT 4
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 29
8067: PUSH
8068: LD_INT 106
8070: PUSH
8071: LD_INT 97
8073: PUSH
8074: LD_INT 3
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 26
8085: PUSH
8086: LD_INT 93
8088: PUSH
8089: LD_INT 97
8091: PUSH
8092: LD_INT 5
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 100
8106: PUSH
8107: LD_INT 89
8109: PUSH
8110: LD_INT 3
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 17
8121: PUSH
8122: LD_INT 96
8124: PUSH
8125: LD_INT 89
8127: PUSH
8128: LD_INT 1
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 32
8139: PUSH
8140: LD_INT 78
8142: PUSH
8143: LD_INT 94
8145: PUSH
8146: LD_INT 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 32
8157: PUSH
8158: LD_INT 95
8160: PUSH
8161: LD_INT 82
8163: PUSH
8164: LD_INT 3
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 32
8175: PUSH
8176: LD_INT 104
8178: PUSH
8179: LD_INT 85
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 32
8193: PUSH
8194: LD_INT 81
8196: PUSH
8197: LD_INT 78
8199: PUSH
8200: LD_INT 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 33
8211: PUSH
8212: LD_INT 109
8214: PUSH
8215: LD_INT 90
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 33
8229: PUSH
8230: LD_INT 88
8232: PUSH
8233: LD_INT 79
8235: PUSH
8236: LD_INT 3
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 33
8247: PUSH
8248: LD_INT 76
8250: PUSH
8251: LD_INT 87
8253: PUSH
8254: LD_INT 1
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 26
8265: PUSH
8266: LD_INT 96
8268: PUSH
8269: LD_INT 97
8271: PUSH
8272: LD_INT 5
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 26
8283: PUSH
8284: LD_INT 85
8286: PUSH
8287: LD_INT 84
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 6
8301: PUSH
8302: LD_INT 88
8304: PUSH
8305: LD_INT 95
8307: PUSH
8308: LD_INT 0
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 19
8319: PUSH
8320: LD_INT 103
8322: PUSH
8323: LD_INT 89
8325: PUSH
8326: LD_INT 4
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 16
8337: PUSH
8338: LD_INT 97
8340: PUSH
8341: LD_INT 86
8343: PUSH
8344: LD_INT 2
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 24
8355: PUSH
8356: LD_INT 100
8358: PUSH
8359: LD_INT 85
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: ST_TO_ADDR
// for i := 1 to buildingsTab do
8392: LD_ADDR_VAR 0 2
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_VAR 0 4
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8481
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8410: LD_VAR 0 3
8414: PPUSH
8415: LD_VAR 0 4
8419: PUSH
8420: LD_VAR 0 2
8424: ARRAY
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 4
8434: PUSH
8435: LD_VAR 0 2
8439: ARRAY
8440: PUSH
8441: LD_INT 2
8443: ARRAY
8444: PPUSH
8445: LD_VAR 0 4
8449: PUSH
8450: LD_VAR 0 2
8454: ARRAY
8455: PUSH
8456: LD_INT 3
8458: ARRAY
8459: PPUSH
8460: LD_VAR 0 4
8464: PUSH
8465: LD_VAR 0 2
8469: ARRAY
8470: PUSH
8471: LD_INT 4
8473: ARRAY
8474: PPUSH
8475: CALL_OW 205
8479: GO 8407
8481: POP
8482: POP
// end ;
8483: LD_VAR 0 1
8487: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8488: LD_INT 0
8490: PPUSH
8491: PPUSH
// for i in charactersList do
8492: LD_ADDR_VAR 0 4
8496: PUSH
8497: LD_VAR 0 1
8501: PUSH
8502: FOR_IN
8503: IFFALSE 8521
// SaveCharacters ( i , ident ) ;
8505: LD_VAR 0 4
8509: PPUSH
8510: LD_VAR 0 2
8514: PPUSH
8515: CALL_OW 38
8519: GO 8502
8521: POP
8522: POP
// end ;
8523: LD_VAR 0 3
8527: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8528: LD_INT 0
8530: PPUSH
8531: PPUSH
8532: PPUSH
8533: PPUSH
8534: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8535: LD_ADDR_VAR 0 8
8539: PUSH
8540: LD_INT 48
8542: PUSH
8543: LD_INT 49
8545: PUSH
8546: LD_INT 50
8548: PUSH
8549: LD_INT 20
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: LD_INT 51
8557: PUSH
8558: LD_INT 52
8560: PUSH
8561: LD_INT 69
8563: PUSH
8564: LD_INT 39
8566: PUSH
8567: LD_INT 34
8569: PUSH
8570: LD_INT 40
8572: PUSH
8573: LD_INT 53
8575: PUSH
8576: LD_INT 71
8578: PUSH
8579: LD_INT 57
8581: PUSH
8582: LD_INT 58
8584: PUSH
8585: LD_INT 44
8587: PUSH
8588: LD_INT 32
8590: PUSH
8591: LD_INT 27
8593: PUSH
8594: LD_INT 23
8596: PUSH
8597: LD_INT 33
8599: PUSH
8600: LD_INT 59
8602: PUSH
8603: LD_INT 54
8605: PUSH
8606: LD_INT 55
8608: PUSH
8609: LD_INT 56
8611: PUSH
8612: LD_INT 63
8614: PUSH
8615: LD_INT 64
8617: PUSH
8618: LD_INT 65
8620: PUSH
8621: LD_INT 30
8623: PUSH
8624: LD_INT 31
8626: PUSH
8627: LD_INT 21
8629: PUSH
8630: LD_INT 22
8632: PUSH
8633: LD_INT 25
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8670: LD_ADDR_VAR 0 5
8674: PUSH
8675: DOUBLE
8676: LD_INT 1
8678: DEC
8679: ST_TO_ADDR
8680: LD_VAR 0 8
8684: PUSH
8685: FOR_TO
8686: IFFALSE 8762
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8688: LD_VAR 0 8
8692: PUSH
8693: LD_VAR 0 5
8697: ARRAY
8698: PPUSH
8699: LD_VAR 0 1
8703: PPUSH
8704: CALL_OW 321
8708: PUSH
8709: LD_INT 1
8711: EQUAL
8712: PUSH
8713: LD_VAR 0 8
8717: PUSH
8718: LD_VAR 0 5
8722: ARRAY
8723: PPUSH
8724: LD_VAR 0 3
8728: PPUSH
8729: CALL_OW 482
8733: PUSH
8734: LD_INT 1
8736: EQUAL
8737: AND
8738: IFFALSE 8760
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8740: LD_VAR 0 2
8744: PPUSH
8745: LD_VAR 0 8
8749: PUSH
8750: LD_VAR 0 5
8754: ARRAY
8755: PPUSH
8756: CALL_OW 184
8760: GO 8685
8762: POP
8763: POP
// end ;
8764: LD_VAR 0 4
8768: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8769: LD_INT 0
8771: PPUSH
8772: PPUSH
8773: PPUSH
8774: PPUSH
8775: PPUSH
8776: PPUSH
8777: PPUSH
8778: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8779: LD_ADDR_VAR 0 6
8783: PUSH
8784: LD_VAR 0 2
8788: PPUSH
8789: LD_INT 22
8791: PUSH
8792: LD_VAR 0 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 56
8803: PUSH
8804: EMPTY
8805: LIST
8806: PUSH
8807: LD_INT 24
8809: PUSH
8810: LD_INT 700
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: LD_INT 60
8822: PUSH
8823: EMPTY
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 2
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 25
8845: PUSH
8846: LD_INT 5
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 25
8855: PUSH
8856: LD_INT 8
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 25
8865: PUSH
8866: LD_INT 9
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 70
8891: PUSH
8892: LD_EXP 24
8896: PUSH
8897: EMPTY
8898: LIST
8899: DIFF
8900: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8901: LD_ADDR_VAR 0 7
8905: PUSH
8906: LD_VAR 0 2
8910: PPUSH
8911: LD_INT 22
8913: PUSH
8914: LD_VAR 0 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 30
8925: PUSH
8926: LD_INT 32
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 58
8935: PUSH
8936: EMPTY
8937: LIST
8938: PUSH
8939: LD_INT 24
8941: PUSH
8942: LD_INT 251
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: PPUSH
8955: CALL_OW 70
8959: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8960: LD_ADDR_VAR 0 9
8964: PUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_INT 22
8972: PUSH
8973: LD_VAR 0 1
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: LD_INT 30
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 30
8997: PUSH
8998: LD_INT 5
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 24
9012: PUSH
9013: LD_INT 251
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 70
9029: ST_TO_ADDR
// if barrackList > 0 then
9030: LD_VAR 0 9
9034: PUSH
9035: LD_INT 0
9037: GREATER
9038: IFFALSE 9186
// begin if turretList = 0 then
9040: LD_VAR 0 7
9044: PUSH
9045: LD_INT 0
9047: EQUAL
9048: IFFALSE 9090
// begin if soldiers_list > 0 then
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 0
9057: GREATER
9058: IFFALSE 9088
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9060: LD_VAR 0 6
9064: PPUSH
9065: LD_VAR 0 9
9069: PUSH
9070: LD_INT 1
9072: PPUSH
9073: LD_VAR 0 9
9077: PPUSH
9078: CALL_OW 12
9082: ARRAY
9083: PPUSH
9084: CALL_OW 120
// end else
9088: GO 9186
// begin for i in barrackList do
9090: LD_ADDR_VAR 0 4
9094: PUSH
9095: LD_VAR 0 9
9099: PUSH
9100: FOR_IN
9101: IFFALSE 9184
// begin insideUnits = UnitsInside ( i ) ;
9103: LD_ADDR_VAR 0 10
9107: PUSH
9108: LD_VAR 0 4
9112: PPUSH
9113: CALL_OW 313
9117: ST_TO_ADDR
// if insideUnits > 0 then
9118: LD_VAR 0 10
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: IFFALSE 9150
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9128: LD_VAR 0 10
9132: PUSH
9133: LD_INT 1
9135: ARRAY
9136: PPUSH
9137: LD_VAR 0 7
9141: PUSH
9142: LD_INT 1
9144: ARRAY
9145: PPUSH
9146: CALL_OW 120
// if soldiers_list > 0 then
9150: LD_VAR 0 6
9154: PUSH
9155: LD_INT 0
9157: GREATER
9158: IFFALSE 9182
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9160: LD_VAR 0 6
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: LD_VAR 0 7
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: CALL_OW 120
// end ;
9182: GO 9100
9184: POP
9185: POP
// end ; end ; end ;
9186: LD_VAR 0 3
9190: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9191: LD_INT 0
9193: PPUSH
9194: PPUSH
9195: PPUSH
9196: PPUSH
9197: PPUSH
9198: PPUSH
// for i = 1 to vehCount do
9199: LD_ADDR_VAR 0 8
9203: PUSH
9204: DOUBLE
9205: LD_INT 1
9207: DEC
9208: ST_TO_ADDR
9209: LD_VAR 0 6
9213: PUSH
9214: FOR_TO
9215: IFFALSE 9422
// begin uc_side = side ;
9217: LD_ADDR_OWVAR 20
9221: PUSH
9222: LD_VAR 0 1
9226: ST_TO_ADDR
// uc_nation = nation ;
9227: LD_ADDR_OWVAR 21
9231: PUSH
9232: LD_VAR 0 3
9236: ST_TO_ADDR
// vc_Chassis = 22 ;
9237: LD_ADDR_OWVAR 37
9241: PUSH
9242: LD_INT 22
9244: ST_TO_ADDR
// vc_engine = 1 ;
9245: LD_ADDR_OWVAR 39
9249: PUSH
9250: LD_INT 1
9252: ST_TO_ADDR
// vc_control = 1 ;
9253: LD_ADDR_OWVAR 38
9257: PUSH
9258: LD_INT 1
9260: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9261: LD_ADDR_OWVAR 40
9265: PUSH
9266: LD_INT 43
9268: PUSH
9269: LD_INT 44
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 1
9278: PPUSH
9279: LD_INT 2
9281: PPUSH
9282: CALL_OW 12
9286: ARRAY
9287: ST_TO_ADDR
// veh = CreateVehicle ;
9288: LD_ADDR_VAR 0 12
9292: PUSH
9293: CALL_OW 45
9297: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9298: LD_VAR 0 12
9302: PPUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: LD_INT 0
9310: PPUSH
9311: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9315: LD_ADDR_EXP 32
9319: PUSH
9320: LD_EXP 32
9324: PUSH
9325: LD_VAR 0 12
9329: ADD
9330: ST_TO_ADDR
// hc_class = 3 ;
9331: LD_ADDR_OWVAR 28
9335: PUSH
9336: LD_INT 3
9338: ST_TO_ADDR
// hc_name =  ;
9339: LD_ADDR_OWVAR 26
9343: PUSH
9344: LD_STRING 
9346: ST_TO_ADDR
// hc_gallery =  ;
9347: LD_ADDR_OWVAR 33
9351: PUSH
9352: LD_STRING 
9354: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9355: LD_INT 0
9357: PPUSH
9358: LD_INT 3
9360: PPUSH
9361: LD_EXP 25
9365: PPUSH
9366: LD_EXP 26
9370: PPUSH
9371: CALL_OW 12
9375: PPUSH
9376: CALL_OW 380
// un = CreateHuman ;
9380: LD_ADDR_VAR 0 10
9384: PUSH
9385: CALL_OW 44
9389: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9390: LD_VAR 0 10
9394: PPUSH
9395: LD_VAR 0 12
9399: PPUSH
9400: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9404: LD_ADDR_EXP 32
9408: PUSH
9409: LD_EXP 32
9413: PUSH
9414: LD_VAR 0 10
9418: ADD
9419: ST_TO_ADDR
// end ;
9420: GO 9214
9422: POP
9423: POP
// end ;
9424: LD_VAR 0 7
9428: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9429: LD_INT 0
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9437: LD_VAR 0 2
9441: PPUSH
9442: LD_INT 22
9444: PUSH
9445: LD_VAR 0 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: EMPTY
9455: LIST
9456: PPUSH
9457: CALL_OW 70
9461: PUSH
9462: LD_INT 0
9464: EQUAL
9465: PUSH
9466: LD_EXP 32
9470: AND
9471: IFFALSE 9758
// begin for i in defenders_list do
9473: LD_ADDR_VAR 0 4
9477: PUSH
9478: LD_EXP 32
9482: PUSH
9483: FOR_IN
9484: IFFALSE 9756
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9486: LD_VAR 0 4
9490: PPUSH
9491: LD_INT 63
9493: PPUSH
9494: LD_INT 75
9496: PPUSH
9497: CALL_OW 297
9501: PUSH
9502: LD_INT 8
9504: GREATER
9505: PUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 314
9515: NOT
9516: AND
9517: IFFALSE 9536
// ComMoveXY ( i , 63 , 75 ) else
9519: LD_VAR 0 4
9523: PPUSH
9524: LD_INT 63
9526: PPUSH
9527: LD_INT 75
9529: PPUSH
9530: CALL_OW 111
9534: GO 9754
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9536: LD_VAR 0 4
9540: PPUSH
9541: CALL_OW 257
9545: PUSH
9546: LD_INT 3
9548: EQUAL
9549: PUSH
9550: LD_VAR 0 4
9554: PPUSH
9555: CALL_OW 310
9559: NOT
9560: AND
9561: PUSH
9562: LD_VAR 0 4
9566: PPUSH
9567: CALL_OW 314
9571: NOT
9572: AND
9573: IFFALSE 9626
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9575: LD_VAR 0 4
9579: PPUSH
9580: LD_EXP 32
9584: PPUSH
9585: LD_INT 58
9587: PUSH
9588: EMPTY
9589: LIST
9590: PUSH
9591: LD_INT 24
9593: PUSH
9594: LD_INT 1000
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 72
9609: PPUSH
9610: LD_VAR 0 4
9614: PPUSH
9615: CALL_OW 74
9619: PPUSH
9620: CALL_OW 120
9624: GO 9754
// if GetFuel ( i ) < 100 then
9626: LD_VAR 0 4
9630: PPUSH
9631: CALL_OW 261
9635: PUSH
9636: LD_INT 100
9638: LESS
9639: IFFALSE 9655
// SetFuel ( defenders_list , 100 ) else
9641: LD_EXP 32
9645: PPUSH
9646: LD_INT 100
9648: PPUSH
9649: CALL_OW 240
9653: GO 9754
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9655: LD_VAR 0 4
9659: PPUSH
9660: CALL_OW 263
9664: PUSH
9665: LD_INT 1
9667: EQUAL
9668: PUSH
9669: LD_VAR 0 4
9673: PPUSH
9674: CALL_OW 256
9678: PUSH
9679: LD_INT 990
9681: LESS
9682: AND
9683: IFFALSE 9754
// begin veh := i ;
9685: LD_ADDR_VAR 0 7
9689: PUSH
9690: LD_VAR 0 4
9694: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9695: LD_ADDR_VAR 0 8
9699: PUSH
9700: LD_VAR 0 4
9704: PPUSH
9705: CALL_OW 311
9709: ST_TO_ADDR
// if veh then
9710: LD_VAR 0 7
9714: IFFALSE 9754
// begin ComMoveXY ( i , 63 , 75 ) ;
9716: LD_VAR 0 4
9720: PPUSH
9721: LD_INT 63
9723: PPUSH
9724: LD_INT 75
9726: PPUSH
9727: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9731: LD_VAR 0 7
9735: PPUSH
9736: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9740: LD_VAR 0 8
9744: PPUSH
9745: LD_VAR 0 7
9749: PPUSH
9750: CALL_OW 189
// end ; end ; end ;
9754: GO 9483
9756: POP
9757: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9758: LD_ADDR_VAR 0 6
9762: PUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: LD_INT 22
9770: PUSH
9771: LD_VAR 0 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: PPUSH
9783: CALL_OW 70
9787: ST_TO_ADDR
// if tmp and defenders_list then
9788: LD_VAR 0 6
9792: PUSH
9793: LD_EXP 32
9797: AND
9798: IFFALSE 9967
// for i in defenders_list do
9800: LD_ADDR_VAR 0 4
9804: PUSH
9805: LD_EXP 32
9809: PUSH
9810: FOR_IN
9811: IFFALSE 9965
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9813: LD_VAR 0 4
9817: PPUSH
9818: CALL_OW 257
9822: PUSH
9823: LD_INT 3
9825: EQUAL
9826: PUSH
9827: LD_VAR 0 4
9831: PPUSH
9832: CALL_OW 310
9836: NOT
9837: AND
9838: IFFALSE 9877
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9840: LD_VAR 0 4
9844: PPUSH
9845: LD_EXP 32
9849: PPUSH
9850: LD_INT 58
9852: PUSH
9853: EMPTY
9854: LIST
9855: PPUSH
9856: CALL_OW 72
9860: PPUSH
9861: LD_VAR 0 4
9865: PPUSH
9866: CALL_OW 74
9870: PPUSH
9871: CALL_OW 120
9875: GO 9963
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9877: LD_VAR 0 4
9881: PPUSH
9882: CALL_OW 314
9886: NOT
9887: PUSH
9888: LD_VAR 0 4
9892: PPUSH
9893: LD_VAR 0 2
9897: PPUSH
9898: CALL_OW 308
9902: AND
9903: IFFALSE 9931
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9905: LD_VAR 0 4
9909: PPUSH
9910: LD_VAR 0 6
9914: PPUSH
9915: LD_VAR 0 4
9919: PPUSH
9920: CALL_OW 74
9924: PPUSH
9925: CALL_OW 115
9929: GO 9963
// if not IsInArea ( i , defenseArea ) then
9931: LD_VAR 0 4
9935: PPUSH
9936: LD_VAR 0 2
9940: PPUSH
9941: CALL_OW 308
9945: NOT
9946: IFFALSE 9963
// ComMoveXY ( i , 63 , 75 ) ;
9948: LD_VAR 0 4
9952: PPUSH
9953: LD_INT 63
9955: PPUSH
9956: LD_INT 75
9958: PPUSH
9959: CALL_OW 111
// end ;
9963: GO 9810
9965: POP
9966: POP
// end ;
9967: LD_VAR 0 3
9971: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9972: LD_INT 0
9974: PPUSH
9975: PPUSH
9976: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9977: LD_INT 22
9979: PUSH
9980: LD_VAR 0 1
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 21
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_VAR 0 3
10012: LESSEQUAL
10013: IFFALSE 10121
// begin for i = 1 to vehCount do
10015: LD_ADDR_VAR 0 9
10019: PUSH
10020: DOUBLE
10021: LD_INT 1
10023: DEC
10024: ST_TO_ADDR
10025: LD_VAR 0 3
10029: PUSH
10030: FOR_TO
10031: IFFALSE 10119
// begin weapon = weaponTab [ i ] ;
10033: LD_ADDR_VAR 0 10
10037: PUSH
10038: LD_VAR 0 4
10042: PUSH
10043: LD_VAR 0 9
10047: ARRAY
10048: ST_TO_ADDR
// if weapon = 46 then
10049: LD_VAR 0 10
10053: PUSH
10054: LD_INT 46
10056: EQUAL
10057: IFFALSE 10088
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
10059: LD_VAR 0 2
10063: PPUSH
10064: LD_INT 24
10066: PPUSH
10067: LD_VAR 0 5
10071: PPUSH
10072: LD_VAR 0 6
10076: PPUSH
10077: LD_VAR 0 10
10081: PPUSH
10082: CALL_OW 185
// end else
10086: GO 10117
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_VAR 0 7
10097: PPUSH
10098: LD_VAR 0 5
10102: PPUSH
10103: LD_VAR 0 6
10107: PPUSH
10108: LD_VAR 0 10
10112: PPUSH
10113: CALL_OW 185
// end ; end ;
10117: GO 10030
10119: POP
10120: POP
// end ; end ;
10121: LD_VAR 0 8
10125: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
10126: LD_INT 0
10128: PPUSH
10129: PPUSH
10130: PPUSH
10131: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
10132: LD_ADDR_VAR 0 8
10136: PUSH
10137: LD_INT 22
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 21
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 3
10161: PUSH
10162: LD_INT 24
10164: PUSH
10165: LD_INT 650
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: ST_TO_ADDR
// if damageVehicles > 0 then
10186: LD_VAR 0 8
10190: PUSH
10191: LD_INT 0
10193: GREATER
10194: IFFALSE 10215
// ComMoveXY ( damageVehicles , repX , repY ) ;
10196: LD_VAR 0 8
10200: PPUSH
10201: LD_VAR 0 3
10205: PPUSH
10206: LD_VAR 0 4
10210: PPUSH
10211: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10215: LD_VAR 0 8
10219: PPUSH
10220: LD_INT 95
10222: PUSH
10223: LD_VAR 0 2
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 3
10234: PUSH
10235: LD_INT 58
10237: PUSH
10238: EMPTY
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PPUSH
10249: CALL_OW 72
10253: PUSH
10254: LD_INT 0
10256: GREATER
10257: IFFALSE 10324
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10259: LD_ADDR_VAR 0 6
10263: PUSH
10264: LD_VAR 0 8
10268: PPUSH
10269: LD_INT 95
10271: PUSH
10272: LD_VAR 0 2
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 3
10283: PUSH
10284: LD_INT 58
10286: PUSH
10287: EMPTY
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: PUSH
10303: FOR_IN
10304: IFFALSE 10322
// ComExitVehicle ( UnitsInside ( i ) ) ;
10306: LD_VAR 0 6
10310: PPUSH
10311: CALL_OW 313
10315: PPUSH
10316: CALL_OW 121
10320: GO 10303
10322: POP
10323: POP
// end ;
10324: LD_VAR 0 5
10328: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10329: LD_INT 0
10331: PPUSH
10332: PPUSH
10333: PPUSH
10334: PPUSH
10335: PPUSH
10336: PPUSH
10337: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10338: LD_ADDR_VAR 0 8
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_VAR 0 1
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 21
10357: PUSH
10358: LD_INT 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 24
10367: PUSH
10368: LD_INT 250
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 58
10380: PUSH
10381: EMPTY
10382: LIST
10383: PUSH
10384: LD_INT 2
10386: PUSH
10387: LD_INT 34
10389: PUSH
10390: LD_INT 43
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 44
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 34
10409: PUSH
10410: LD_INT 46
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 , 7 ] [ Difficulty ] then
10439: LD_INT 22
10441: PUSH
10442: LD_VAR 0 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 2
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 24
10463: PUSH
10464: LD_INT 1000
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: LD_INT 58
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 34
10485: PUSH
10486: LD_INT 43
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 34
10495: PUSH
10496: LD_INT 44
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 34
10505: PUSH
10506: LD_INT 46
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 69
10534: PUSH
10535: LD_INT 5
10537: PUSH
10538: LD_INT 6
10540: PUSH
10541: LD_INT 7
10543: PUSH
10544: LD_INT 7
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_OWVAR 67
10557: ARRAY
10558: GREATEREQUAL
10559: IFFALSE 11124
// repeat wait ( 0 0$1 ) ;
10561: LD_INT 35
10563: PPUSH
10564: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10568: LD_ADDR_VAR 0 8
10572: PUSH
10573: LD_INT 22
10575: PUSH
10576: LD_VAR 0 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 21
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 24
10597: PUSH
10598: LD_INT 250
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 34
10610: PUSH
10611: LD_INT 43
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 34
10620: PUSH
10621: LD_INT 44
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 34
10630: PUSH
10631: LD_INT 46
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 3
10646: PUSH
10647: LD_INT 58
10649: PUSH
10650: EMPTY
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 69
10668: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10669: LD_INT 22
10671: PUSH
10672: LD_VAR 0 1
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 95
10683: PUSH
10684: LD_VAR 0 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PPUSH
10697: CALL_OW 69
10701: NOT
10702: PUSH
10703: LD_VAR 0 11
10707: PUSH
10708: LD_INT 0
10710: EQUAL
10711: AND
10712: IFFALSE 10767
// for i := 1 to wayX do
10714: LD_ADDR_VAR 0 6
10718: PUSH
10719: DOUBLE
10720: LD_INT 1
10722: DEC
10723: ST_TO_ADDR
10724: LD_VAR 0 3
10728: PUSH
10729: FOR_TO
10730: IFFALSE 10765
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10732: LD_VAR 0 8
10736: PPUSH
10737: LD_VAR 0 3
10741: PUSH
10742: LD_VAR 0 6
10746: ARRAY
10747: PPUSH
10748: LD_VAR 0 4
10752: PUSH
10753: LD_VAR 0 6
10757: ARRAY
10758: PPUSH
10759: CALL_OW 114
10763: GO 10729
10765: POP
10766: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10767: LD_INT 22
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 95
10781: PUSH
10782: LD_VAR 0 2
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PPUSH
10795: CALL_OW 69
10799: IFFALSE 11023
// begin seeEnemy = 1 ;
10801: LD_ADDR_VAR 0 11
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// for j in vehiclesOK do
10809: LD_ADDR_VAR 0 7
10813: PUSH
10814: LD_VAR 0 8
10818: PUSH
10819: FOR_IN
10820: IFFALSE 11021
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10822: LD_ADDR_VAR 0 9
10826: PUSH
10827: LD_INT 81
10829: PUSH
10830: LD_VAR 0 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 101
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: PPUSH
10858: LD_VAR 0 7
10862: PPUSH
10863: CALL_OW 74
10867: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10868: LD_ADDR_VAR 0 10
10872: PUSH
10873: LD_INT 81
10875: PUSH
10876: LD_VAR 0 1
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: LD_INT 101
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: LD_INT 59
10900: PUSH
10901: EMPTY
10902: LIST
10903: PUSH
10904: LD_INT 21
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 21
10916: PUSH
10917: LD_INT 2
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: PPUSH
10938: CALL_OW 69
10942: PPUSH
10943: LD_VAR 0 7
10947: PPUSH
10948: CALL_OW 74
10952: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10953: LD_VAR 0 7
10957: PPUSH
10958: LD_VAR 0 9
10962: PPUSH
10963: CALL_OW 296
10967: PUSH
10968: LD_INT 8
10970: PLUS
10971: PUSH
10972: LD_VAR 0 7
10976: PPUSH
10977: LD_VAR 0 10
10981: PPUSH
10982: CALL_OW 296
10986: LESS
10987: IFFALSE 11005
// ComAttackUnit ( j , target1 ) else
10989: LD_VAR 0 7
10993: PPUSH
10994: LD_VAR 0 9
10998: PPUSH
10999: CALL_OW 115
11003: GO 11019
// ComAttackUnit ( j , target2 ) ;
11005: LD_VAR 0 7
11009: PPUSH
11010: LD_VAR 0 10
11014: PPUSH
11015: CALL_OW 115
// end ;
11019: GO 10819
11021: POP
11022: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11023: LD_INT 22
11025: PUSH
11026: LD_VAR 0 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 2
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 24
11047: PUSH
11048: LD_INT 250
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: LD_INT 34
11060: PUSH
11061: LD_INT 43
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 34
11070: PUSH
11071: LD_INT 44
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 34
11080: PUSH
11081: LD_INT 46
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: LD_INT 58
11099: PUSH
11100: EMPTY
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 69
11118: PUSH
11119: LD_INT 0
11121: EQUAL
11122: IFFALSE 10561
// seeEnemy = 0 ;
11124: LD_ADDR_VAR 0 11
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// end ;
11132: LD_VAR 0 5
11136: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
11137: LD_INT 0
11139: PPUSH
11140: PPUSH
11141: PPUSH
11142: PPUSH
11143: PPUSH
11144: PPUSH
// repeat wait ( 0 0$1 ) ;
11145: LD_INT 35
11147: PPUSH
11148: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
11152: LD_ADDR_VAR 0 7
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_VAR 0 1
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 21
11171: PUSH
11172: LD_INT 2
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 24
11181: PUSH
11182: LD_INT 651
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: ST_TO_ADDR
// for j in vehiclesOK do
11199: LD_ADDR_VAR 0 4
11203: PUSH
11204: LD_VAR 0 7
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11411
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11212: LD_ADDR_VAR 0 5
11216: PUSH
11217: LD_INT 81
11219: PUSH
11220: LD_VAR 0 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 101
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 69
11247: PPUSH
11248: LD_VAR 0 4
11252: PPUSH
11253: CALL_OW 74
11257: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11258: LD_ADDR_VAR 0 6
11262: PUSH
11263: LD_INT 81
11265: PUSH
11266: LD_VAR 0 1
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 101
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: LD_INT 59
11290: PUSH
11291: EMPTY
11292: LIST
11293: PUSH
11294: LD_INT 21
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 21
11306: PUSH
11307: LD_INT 2
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: PPUSH
11333: LD_VAR 0 4
11337: PPUSH
11338: CALL_OW 74
11342: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11343: LD_VAR 0 4
11347: PPUSH
11348: LD_VAR 0 5
11352: PPUSH
11353: CALL_OW 296
11357: PUSH
11358: LD_INT 8
11360: PLUS
11361: PUSH
11362: LD_VAR 0 4
11366: PPUSH
11367: LD_VAR 0 6
11371: PPUSH
11372: CALL_OW 296
11376: LESS
11377: IFFALSE 11395
// ComAttackUnit ( j , target1 ) else
11379: LD_VAR 0 4
11383: PPUSH
11384: LD_VAR 0 5
11388: PPUSH
11389: CALL_OW 115
11393: GO 11409
// ComAttackUnit ( j , target2 ) ;
11395: LD_VAR 0 4
11399: PPUSH
11400: LD_VAR 0 6
11404: PPUSH
11405: CALL_OW 115
// end ;
11409: GO 11209
11411: POP
11412: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11413: LD_INT 22
11415: PUSH
11416: LD_VAR 0 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 2
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 24
11437: PUSH
11438: LD_INT 250
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: LD_INT 0
11457: EQUAL
11458: IFFALSE 11145
// end ;
11460: LD_VAR 0 2
11464: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11465: LD_INT 0
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
11472: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11473: LD_ADDR_VAR 0 8
11477: PUSH
11478: LD_VAR 0 2
11482: PPUSH
11483: CALL_OW 313
11487: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11488: LD_ADDR_VAR 0 9
11492: PUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 22
11500: PUSH
11501: LD_VAR 0 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 25
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 24
11522: PUSH
11523: LD_INT 750
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 3
11532: PUSH
11533: LD_INT 54
11535: PUSH
11536: EMPTY
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 70
11553: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11554: LD_ADDR_VAR 0 6
11558: PUSH
11559: LD_VAR 0 3
11563: PPUSH
11564: LD_INT 22
11566: PUSH
11567: LD_VAR 0 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 21
11578: PUSH
11579: LD_INT 3
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 3
11588: PUSH
11589: LD_INT 24
11591: PUSH
11592: LD_INT 1000
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: PPUSH
11611: CALL_OW 70
11615: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11616: LD_VAR 0 6
11620: NOT
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: LD_VAR 0 1
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: LD_INT 25
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 24
11646: PUSH
11647: LD_INT 250
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 69
11663: NOT
11664: AND
11665: IFFALSE 11669
// exit ;
11667: GO 11866
// if buildings_list > 0 and engineerOkInside then
11669: LD_VAR 0 6
11673: PUSH
11674: LD_INT 0
11676: GREATER
11677: PUSH
11678: LD_VAR 0 8
11682: AND
11683: IFFALSE 11709
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11685: LD_VAR 0 8
11689: PPUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 72
11704: PPUSH
11705: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11709: LD_VAR 0 6
11713: PUSH
11714: LD_INT 0
11716: GREATER
11717: PUSH
11718: LD_VAR 0 9
11722: PUSH
11723: LD_INT 0
11725: GREATER
11726: AND
11727: IFFALSE 11747
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11729: LD_VAR 0 9
11733: PPUSH
11734: LD_VAR 0 6
11738: PUSH
11739: LD_INT 1
11741: ARRAY
11742: PPUSH
11743: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11747: LD_VAR 0 6
11751: PUSH
11752: LD_INT 0
11754: EQUAL
11755: PUSH
11756: LD_VAR 0 4
11760: PUSH
11761: LD_INT 0
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_VAR 0 9
11770: PUSH
11771: LD_INT 0
11773: GREATER
11774: AND
11775: IFFALSE 11791
// ComEnterUnit ( engineerOkOutside , building ) ;
11777: LD_VAR 0 9
11781: PPUSH
11782: LD_VAR 0 2
11786: PPUSH
11787: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11791: LD_VAR 0 9
11795: PUSH
11796: LD_INT 0
11798: GREATER
11799: PUSH
11800: LD_VAR 0 6
11804: PUSH
11805: LD_INT 0
11807: EQUAL
11808: AND
11809: PUSH
11810: LD_VAR 0 4
11814: PUSH
11815: LD_INT 0
11817: GREATER
11818: AND
11819: IFFALSE 11866
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11821: LD_VAR 0 9
11825: PPUSH
11826: LD_VAR 0 4
11830: PUSH
11831: LD_INT 1
11833: ARRAY
11834: PPUSH
11835: LD_VAR 0 4
11839: PUSH
11840: LD_INT 2
11842: ARRAY
11843: PPUSH
11844: LD_VAR 0 4
11848: PUSH
11849: LD_INT 3
11851: ARRAY
11852: PPUSH
11853: LD_VAR 0 4
11857: PUSH
11858: LD_INT 4
11860: ARRAY
11861: PPUSH
11862: CALL_OW 145
// end ;
11866: LD_VAR 0 5
11870: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11871: LD_INT 0
11873: PPUSH
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
11881: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11882: LD_ADDR_VAR 0 6
11886: PUSH
11887: LD_INT 22
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 25
11901: PUSH
11902: LD_INT 4
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 23
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 24
11921: PUSH
11922: LD_INT 251
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11940: LD_ADDR_VAR 0 7
11944: PUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: LD_INT 22
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 23
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 25
11974: PUSH
11975: LD_INT 4
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 50
11984: PUSH
11985: EMPTY
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PPUSH
11994: CALL_OW 70
11998: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11999: LD_ADDR_VAR 0 10
12003: PUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 22
12011: PUSH
12012: LD_VAR 0 1
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 3
12033: PUSH
12034: LD_INT 25
12036: PUSH
12037: LD_INT 3
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 3
12050: PUSH
12051: LD_INT 24
12053: PUSH
12054: LD_INT 750
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 70
12075: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12076: LD_ADDR_VAR 0 11
12080: PUSH
12081: LD_VAR 0 2
12085: PPUSH
12086: LD_INT 22
12088: PUSH
12089: LD_VAR 0 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 21
12100: PUSH
12101: LD_INT 1
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 3
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 3
12127: PUSH
12128: LD_INT 24
12130: PUSH
12131: LD_INT 1000
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PPUSH
12148: CALL_OW 70
12152: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
12153: LD_VAR 0 10
12157: NOT
12158: PUSH
12159: LD_VAR 0 11
12163: NOT
12164: AND
12165: PUSH
12166: LD_VAR 0 6
12170: NOT
12171: AND
12172: IFFALSE 12176
// exit ;
12174: GO 12410
// if damageUnits > 0 and sci_list > 0 then
12176: LD_VAR 0 10
12180: PUSH
12181: LD_INT 0
12183: GREATER
12184: PUSH
12185: LD_VAR 0 6
12189: PUSH
12190: LD_INT 0
12192: GREATER
12193: AND
12194: IFFALSE 12210
// ComMoveToArea ( damageUnits , healArea ) ;
12196: LD_VAR 0 10
12200: PPUSH
12201: LD_VAR 0 2
12205: PPUSH
12206: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12210: LD_VAR 0 11
12214: PUSH
12215: LD_INT 0
12217: GREATER
12218: PUSH
12219: LD_VAR 0 6
12223: PUSH
12224: LD_INT 0
12226: GREATER
12227: AND
12228: IFFALSE 12239
// ComExitBuilding ( sci_list ) ;
12230: LD_VAR 0 6
12234: PPUSH
12235: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12239: LD_VAR 0 11
12243: PUSH
12244: LD_INT 0
12246: GREATER
12247: PUSH
12248: LD_VAR 0 7
12252: PUSH
12253: LD_INT 0
12255: GREATER
12256: AND
12257: IFFALSE 12277
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12259: LD_VAR 0 7
12263: PPUSH
12264: LD_VAR 0 11
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12277: LD_VAR 0 10
12281: PUSH
12282: LD_INT 0
12284: EQUAL
12285: PUSH
12286: LD_VAR 0 11
12290: PUSH
12291: LD_INT 0
12293: EQUAL
12294: AND
12295: PUSH
12296: LD_VAR 0 7
12300: PUSH
12301: LD_INT 0
12303: GREATER
12304: AND
12305: IFFALSE 12410
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12307: LD_ADDR_VAR 0 12
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_VAR 0 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 3
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 30
12336: PUSH
12337: LD_INT 8
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12354: LD_ADDR_VAR 0 13
12358: PUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_VAR 0 12
12366: PPUSH
12367: CALL_OW 12
12371: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12372: LD_VAR 0 7
12376: PPUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 60
12382: PUSH
12383: EMPTY
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 72
12394: PPUSH
12395: LD_VAR 0 12
12399: PUSH
12400: LD_VAR 0 13
12404: ARRAY
12405: PPUSH
12406: CALL_OW 120
// end ; end ;
12410: LD_VAR 0 5
12414: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12415: LD_INT 0
12417: PPUSH
12418: PPUSH
12419: PPUSH
12420: PPUSH
12421: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12422: LD_ADDR_VAR 0 6
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_VAR 0 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: LD_INT 30
12444: PUSH
12445: LD_INT 31
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 30
12454: PUSH
12455: LD_INT 32
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 33
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 30
12484: PUSH
12485: LD_INT 5
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 69
12508: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12509: LD_ADDR_VAR 0 7
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_VAR 0 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 3
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 58
12538: PUSH
12539: EMPTY
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12552: LD_VAR 0 6
12556: PUSH
12557: LD_INT 0
12559: GREATER
12560: PUSH
12561: LD_VAR 0 7
12565: PUSH
12566: LD_INT 0
12568: GREATER
12569: AND
12570: IFFALSE 12640
// begin for i in turretsList do
12572: LD_ADDR_VAR 0 4
12576: PUSH
12577: LD_VAR 0 6
12581: PUSH
12582: FOR_IN
12583: IFFALSE 12638
// begin for j in enemyBuildings do
12585: LD_ADDR_VAR 0 5
12589: PUSH
12590: LD_VAR 0 7
12594: PUSH
12595: FOR_IN
12596: IFFALSE 12634
// begin if GetDistUnits ( i , j ) < 20 then
12598: LD_VAR 0 4
12602: PPUSH
12603: LD_VAR 0 5
12607: PPUSH
12608: CALL_OW 296
12612: PUSH
12613: LD_INT 20
12615: LESS
12616: IFFALSE 12632
// begin ComAttackUnit ( i , j ) ;
12618: LD_VAR 0 4
12622: PPUSH
12623: LD_VAR 0 5
12627: PPUSH
12628: CALL_OW 115
// end ; end ;
12632: GO 12595
12634: POP
12635: POP
// end ;
12636: GO 12582
12638: POP
12639: POP
// end ; end ;
12640: LD_VAR 0 3
12644: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12645: LD_INT 0
12647: PPUSH
12648: PPUSH
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
// for i = 1 to medicCount do
12658: LD_ADDR_VAR 0 14
12662: PUSH
12663: DOUBLE
12664: LD_INT 1
12666: DEC
12667: ST_TO_ADDR
12668: LD_VAR 0 7
12672: PUSH
12673: FOR_TO
12674: IFFALSE 12756
// begin uc_side = side ;
12676: LD_ADDR_OWVAR 20
12680: PUSH
12681: LD_VAR 0 1
12685: ST_TO_ADDR
// uc_nation = nation ;
12686: LD_ADDR_OWVAR 21
12690: PUSH
12691: LD_VAR 0 2
12695: ST_TO_ADDR
// hc_name =  ;
12696: LD_ADDR_OWVAR 26
12700: PUSH
12701: LD_STRING 
12703: ST_TO_ADDR
// hc_gallery =  ;
12704: LD_ADDR_OWVAR 33
12708: PUSH
12709: LD_STRING 
12711: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12712: LD_INT 0
12714: PPUSH
12715: LD_INT 4
12717: PPUSH
12718: LD_VAR 0 8
12722: PPUSH
12723: CALL_OW 380
// un = CreateHuman ;
12727: LD_ADDR_VAR 0 16
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12737: LD_VAR 0 16
12741: PPUSH
12742: LD_VAR 0 9
12746: PPUSH
12747: LD_INT 0
12749: PPUSH
12750: CALL_OW 49
// end ;
12754: GO 12673
12756: POP
12757: POP
// for i = 1 to soldierCount do
12758: LD_ADDR_VAR 0 14
12762: PUSH
12763: DOUBLE
12764: LD_INT 1
12766: DEC
12767: ST_TO_ADDR
12768: LD_VAR 0 3
12772: PUSH
12773: FOR_TO
12774: IFFALSE 12856
// begin uc_side = side ;
12776: LD_ADDR_OWVAR 20
12780: PUSH
12781: LD_VAR 0 1
12785: ST_TO_ADDR
// uc_nation = nation ;
12786: LD_ADDR_OWVAR 21
12790: PUSH
12791: LD_VAR 0 2
12795: ST_TO_ADDR
// hc_name =  ;
12796: LD_ADDR_OWVAR 26
12800: PUSH
12801: LD_STRING 
12803: ST_TO_ADDR
// hc_gallery =  ;
12804: LD_ADDR_OWVAR 33
12808: PUSH
12809: LD_STRING 
12811: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12812: LD_INT 0
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: LD_VAR 0 8
12822: PPUSH
12823: CALL_OW 380
// un = CreateHuman ;
12827: LD_ADDR_VAR 0 16
12831: PUSH
12832: CALL_OW 44
12836: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12837: LD_VAR 0 16
12841: PPUSH
12842: LD_VAR 0 9
12846: PPUSH
12847: LD_INT 0
12849: PPUSH
12850: CALL_OW 49
// end ;
12854: GO 12773
12856: POP
12857: POP
// for i = 1 to sniperCount do
12858: LD_ADDR_VAR 0 14
12862: PUSH
12863: DOUBLE
12864: LD_INT 1
12866: DEC
12867: ST_TO_ADDR
12868: LD_VAR 0 4
12872: PUSH
12873: FOR_TO
12874: IFFALSE 12956
// begin uc_side = side ;
12876: LD_ADDR_OWVAR 20
12880: PUSH
12881: LD_VAR 0 1
12885: ST_TO_ADDR
// uc_nation = nation ;
12886: LD_ADDR_OWVAR 21
12890: PUSH
12891: LD_VAR 0 2
12895: ST_TO_ADDR
// hc_name =  ;
12896: LD_ADDR_OWVAR 26
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// hc_gallery =  ;
12904: LD_ADDR_OWVAR 33
12908: PUSH
12909: LD_STRING 
12911: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12912: LD_INT 0
12914: PPUSH
12915: LD_INT 5
12917: PPUSH
12918: LD_VAR 0 8
12922: PPUSH
12923: CALL_OW 380
// un = CreateHuman ;
12927: LD_ADDR_VAR 0 16
12931: PUSH
12932: CALL_OW 44
12936: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12937: LD_VAR 0 16
12941: PPUSH
12942: LD_VAR 0 9
12946: PPUSH
12947: LD_INT 0
12949: PPUSH
12950: CALL_OW 49
// end ;
12954: GO 12873
12956: POP
12957: POP
// for i = 1 to bazookCount do
12958: LD_ADDR_VAR 0 14
12962: PUSH
12963: DOUBLE
12964: LD_INT 1
12966: DEC
12967: ST_TO_ADDR
12968: LD_VAR 0 5
12972: PUSH
12973: FOR_TO
12974: IFFALSE 13056
// begin uc_side = side ;
12976: LD_ADDR_OWVAR 20
12980: PUSH
12981: LD_VAR 0 1
12985: ST_TO_ADDR
// uc_nation = nation ;
12986: LD_ADDR_OWVAR 21
12990: PUSH
12991: LD_VAR 0 2
12995: ST_TO_ADDR
// hc_name =  ;
12996: LD_ADDR_OWVAR 26
13000: PUSH
13001: LD_STRING 
13003: ST_TO_ADDR
// hc_gallery =  ;
13004: LD_ADDR_OWVAR 33
13008: PUSH
13009: LD_STRING 
13011: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
13012: LD_INT 0
13014: PPUSH
13015: LD_INT 9
13017: PPUSH
13018: LD_VAR 0 8
13022: PPUSH
13023: CALL_OW 380
// un = CreateHuman ;
13027: LD_ADDR_VAR 0 16
13031: PUSH
13032: CALL_OW 44
13036: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13037: LD_VAR 0 16
13041: PPUSH
13042: LD_VAR 0 9
13046: PPUSH
13047: LD_INT 0
13049: PPUSH
13050: CALL_OW 49
// end ;
13054: GO 12973
13056: POP
13057: POP
// for i = 1 to mortalCount do
13058: LD_ADDR_VAR 0 14
13062: PUSH
13063: DOUBLE
13064: LD_INT 1
13066: DEC
13067: ST_TO_ADDR
13068: LD_VAR 0 6
13072: PUSH
13073: FOR_TO
13074: IFFALSE 13156
// begin uc_side = side ;
13076: LD_ADDR_OWVAR 20
13080: PUSH
13081: LD_VAR 0 1
13085: ST_TO_ADDR
// uc_nation = nation ;
13086: LD_ADDR_OWVAR 21
13090: PUSH
13091: LD_VAR 0 2
13095: ST_TO_ADDR
// hc_name =  ;
13096: LD_ADDR_OWVAR 26
13100: PUSH
13101: LD_STRING 
13103: ST_TO_ADDR
// hc_gallery =  ;
13104: LD_ADDR_OWVAR 33
13108: PUSH
13109: LD_STRING 
13111: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
13112: LD_INT 0
13114: PPUSH
13115: LD_INT 8
13117: PPUSH
13118: LD_VAR 0 8
13122: PPUSH
13123: CALL_OW 380
// un = CreateHuman ;
13127: LD_ADDR_VAR 0 16
13131: PUSH
13132: CALL_OW 44
13136: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13137: LD_VAR 0 16
13141: PPUSH
13142: LD_VAR 0 9
13146: PPUSH
13147: LD_INT 0
13149: PPUSH
13150: CALL_OW 49
// end ;
13154: GO 13073
13156: POP
13157: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13158: LD_ADDR_VAR 0 19
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_VAR 0 1
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 25
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 25
13190: PUSH
13191: LD_INT 5
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 25
13200: PUSH
13201: LD_INT 8
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 25
13210: PUSH
13211: LD_INT 9
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13234: LD_ADDR_VAR 0 18
13238: PUSH
13239: LD_INT 22
13241: PUSH
13242: LD_VAR 0 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 4
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// for i in medic_list do
13270: LD_ADDR_VAR 0 14
13274: PUSH
13275: LD_VAR 0 18
13279: PUSH
13280: FOR_IN
13281: IFFALSE 13299
// ComMoveToArea ( i , healArea ) ;
13283: LD_VAR 0 14
13287: PPUSH
13288: LD_VAR 0 10
13292: PPUSH
13293: CALL_OW 113
13297: GO 13280
13299: POP
13300: POP
// if strategy = 1 then
13301: LD_VAR 0 12
13305: PUSH
13306: LD_INT 1
13308: EQUAL
13309: IFFALSE 13855
// begin repeat wait ( 0 0$3 ) ;
13311: LD_INT 105
13313: PPUSH
13314: CALL_OW 67
// for i in soldiersOK_list do
13318: LD_ADDR_VAR 0 14
13322: PUSH
13323: LD_VAR 0 19
13327: PUSH
13328: FOR_IN
13329: IFFALSE 13393
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13331: LD_VAR 0 14
13335: PPUSH
13336: LD_INT 91
13338: PPUSH
13339: LD_INT 63
13341: PPUSH
13342: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13346: LD_VAR 0 14
13350: PPUSH
13351: LD_INT 101
13353: PPUSH
13354: LD_INT 53
13356: PPUSH
13357: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13361: LD_VAR 0 14
13365: PPUSH
13366: LD_INT 75
13368: PPUSH
13369: LD_INT 23
13371: PPUSH
13372: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13376: LD_VAR 0 14
13380: PPUSH
13381: LD_INT 78
13383: PPUSH
13384: LD_INT 8
13386: PPUSH
13387: CALL_OW 174
// end ;
13391: GO 13328
13393: POP
13394: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13395: LD_INT 12
13397: PPUSH
13398: LD_INT 22
13400: PUSH
13401: LD_VAR 0 1
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: PUSH
13415: LD_INT 2
13417: GREATER
13418: IFFALSE 13311
// repeat wait ( 0 0$1 ) ;
13420: LD_INT 35
13422: PPUSH
13423: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13427: LD_ADDR_VAR 0 17
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_VAR 0 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 1
13446: PUSH
13447: LD_INT 3
13449: PUSH
13450: LD_INT 24
13452: PUSH
13453: LD_INT 550
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 24
13466: PUSH
13467: LD_INT 250
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 69
13487: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13488: LD_ADDR_VAR 0 19
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_VAR 0 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 25
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 25
13520: PUSH
13521: LD_INT 5
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 25
13530: PUSH
13531: LD_INT 8
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 9
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 24
13557: PUSH
13558: LD_INT 1000
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: ST_TO_ADDR
// if medicCount > 0 then
13575: LD_VAR 0 7
13579: PUSH
13580: LD_INT 0
13582: GREATER
13583: IFFALSE 13657
// begin if damageUnit_list > 0 then
13585: LD_VAR 0 17
13589: PUSH
13590: LD_INT 0
13592: GREATER
13593: IFFALSE 13657
// begin for i in damageUnit_list do
13595: LD_ADDR_VAR 0 14
13599: PUSH
13600: LD_VAR 0 17
13604: PUSH
13605: FOR_IN
13606: IFFALSE 13655
// begin ComMoveToArea ( i , healArea ) ;
13608: LD_VAR 0 14
13612: PPUSH
13613: LD_VAR 0 10
13617: PPUSH
13618: CALL_OW 113
// for j in medic_list do
13622: LD_ADDR_VAR 0 15
13626: PUSH
13627: LD_VAR 0 18
13631: PUSH
13632: FOR_IN
13633: IFFALSE 13651
// AddComHeal ( j , i ) ;
13635: LD_VAR 0 15
13639: PPUSH
13640: LD_VAR 0 14
13644: PPUSH
13645: CALL_OW 188
13649: GO 13632
13651: POP
13652: POP
// end ;
13653: GO 13605
13655: POP
13656: POP
// end ; end ; for i in soldiersOK_list do
13657: LD_ADDR_VAR 0 14
13661: PUSH
13662: LD_VAR 0 19
13666: PUSH
13667: FOR_IN
13668: IFFALSE 13844
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13670: LD_ADDR_VAR 0 22
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_VAR 0 11
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PPUSH
13692: LD_VAR 0 14
13696: PPUSH
13697: CALL_OW 74
13701: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13702: LD_ADDR_VAR 0 23
13706: PUSH
13707: LD_INT 22
13709: PUSH
13710: LD_VAR 0 11
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: LD_INT 59
13724: PUSH
13725: EMPTY
13726: LIST
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 1
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 21
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: EMPTY
13759: LIST
13760: PPUSH
13761: CALL_OW 69
13765: PPUSH
13766: LD_VAR 0 14
13770: PPUSH
13771: CALL_OW 74
13775: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13776: LD_VAR 0 14
13780: PPUSH
13781: LD_VAR 0 22
13785: PPUSH
13786: CALL_OW 296
13790: PUSH
13791: LD_INT 6
13793: PLUS
13794: PUSH
13795: LD_VAR 0 14
13799: PPUSH
13800: LD_VAR 0 23
13804: PPUSH
13805: CALL_OW 296
13809: LESS
13810: IFFALSE 13828
// begin ComAttackUnit ( i , target1 ) ;
13812: LD_VAR 0 14
13816: PPUSH
13817: LD_VAR 0 22
13821: PPUSH
13822: CALL_OW 115
// end else
13826: GO 13842
// begin ComAttackUnit ( i , target2 ) ;
13828: LD_VAR 0 14
13832: PPUSH
13833: LD_VAR 0 23
13837: PPUSH
13838: CALL_OW 115
// end ; end ;
13842: GO 13667
13844: POP
13845: POP
// until soldiersOK_list = [ ] ;
13846: LD_VAR 0 19
13850: PUSH
13851: EMPTY
13852: EQUAL
13853: IFFALSE 13420
// end ; if strategy = 2 then
13855: LD_VAR 0 12
13859: PUSH
13860: LD_INT 2
13862: EQUAL
13863: IFFALSE 14379
// begin repeat wait ( 0 0$1 ) ;
13865: LD_INT 35
13867: PPUSH
13868: CALL_OW 67
// for i in soldiersOK_list do
13872: LD_ADDR_VAR 0 14
13876: PUSH
13877: LD_VAR 0 19
13881: PUSH
13882: FOR_IN
13883: IFFALSE 13917
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13885: LD_VAR 0 14
13889: PPUSH
13890: LD_INT 91
13892: PPUSH
13893: LD_INT 63
13895: PPUSH
13896: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13900: LD_VAR 0 14
13904: PPUSH
13905: LD_INT 75
13907: PPUSH
13908: LD_INT 33
13910: PPUSH
13911: CALL_OW 174
// end ;
13915: GO 13882
13917: POP
13918: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13919: LD_INT 13
13921: PPUSH
13922: LD_INT 22
13924: PUSH
13925: LD_VAR 0 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 70
13938: PUSH
13939: LD_INT 2
13941: GREATER
13942: IFFALSE 13865
// repeat wait ( 0 0$3 ) ;
13944: LD_INT 105
13946: PPUSH
13947: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13951: LD_ADDR_VAR 0 17
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_VAR 0 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 1
13970: PUSH
13971: LD_INT 3
13973: PUSH
13974: LD_INT 24
13976: PUSH
13977: LD_INT 550
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 24
13990: PUSH
13991: LD_INT 250
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 69
14011: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14012: LD_ADDR_VAR 0 19
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_VAR 0 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: LD_INT 25
14034: PUSH
14035: LD_INT 1
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 25
14044: PUSH
14045: LD_INT 5
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 8
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 25
14064: PUSH
14065: LD_INT 9
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 24
14081: PUSH
14082: LD_INT 1000
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: ST_TO_ADDR
// if medicCount > 0 then
14099: LD_VAR 0 7
14103: PUSH
14104: LD_INT 0
14106: GREATER
14107: IFFALSE 14181
// begin if damageUnit_list > 0 then
14109: LD_VAR 0 17
14113: PUSH
14114: LD_INT 0
14116: GREATER
14117: IFFALSE 14181
// begin for i in damageUnit_list do
14119: LD_ADDR_VAR 0 14
14123: PUSH
14124: LD_VAR 0 17
14128: PUSH
14129: FOR_IN
14130: IFFALSE 14179
// begin ComMoveToArea ( i , healArea ) ;
14132: LD_VAR 0 14
14136: PPUSH
14137: LD_VAR 0 10
14141: PPUSH
14142: CALL_OW 113
// for j in medic_list do
14146: LD_ADDR_VAR 0 15
14150: PUSH
14151: LD_VAR 0 18
14155: PUSH
14156: FOR_IN
14157: IFFALSE 14175
// AddComHeal ( j , i ) ;
14159: LD_VAR 0 15
14163: PPUSH
14164: LD_VAR 0 14
14168: PPUSH
14169: CALL_OW 188
14173: GO 14156
14175: POP
14176: POP
// end ;
14177: GO 14129
14179: POP
14180: POP
// end ; end ; for i in soldiersOK_list do
14181: LD_ADDR_VAR 0 14
14185: PUSH
14186: LD_VAR 0 19
14190: PUSH
14191: FOR_IN
14192: IFFALSE 14368
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14194: LD_ADDR_VAR 0 22
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_VAR 0 11
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PPUSH
14211: CALL_OW 69
14215: PPUSH
14216: LD_VAR 0 14
14220: PPUSH
14221: CALL_OW 74
14225: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14226: LD_ADDR_VAR 0 23
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_VAR 0 11
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: LD_INT 59
14248: PUSH
14249: EMPTY
14250: LIST
14251: PUSH
14252: LD_INT 21
14254: PUSH
14255: LD_INT 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 21
14264: PUSH
14265: LD_INT 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: PPUSH
14290: LD_VAR 0 14
14294: PPUSH
14295: CALL_OW 74
14299: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14300: LD_VAR 0 14
14304: PPUSH
14305: LD_VAR 0 22
14309: PPUSH
14310: CALL_OW 296
14314: PUSH
14315: LD_INT 6
14317: PLUS
14318: PUSH
14319: LD_VAR 0 14
14323: PPUSH
14324: LD_VAR 0 23
14328: PPUSH
14329: CALL_OW 296
14333: LESS
14334: IFFALSE 14352
// begin ComAttackUnit ( i , target1 ) ;
14336: LD_VAR 0 14
14340: PPUSH
14341: LD_VAR 0 22
14345: PPUSH
14346: CALL_OW 115
// end else
14350: GO 14366
// begin ComAttackUnit ( i , target2 ) ;
14352: LD_VAR 0 14
14356: PPUSH
14357: LD_VAR 0 23
14361: PPUSH
14362: CALL_OW 115
// end ; end ;
14366: GO 14191
14368: POP
14369: POP
// until soldiersOK_list = [ ] ;
14370: LD_VAR 0 19
14374: PUSH
14375: EMPTY
14376: EQUAL
14377: IFFALSE 13944
// end ; if strategy = 3 then
14379: LD_VAR 0 12
14383: PUSH
14384: LD_INT 3
14386: EQUAL
14387: IFFALSE 14933
// begin repeat wait ( 0 0$3 ) ;
14389: LD_INT 105
14391: PPUSH
14392: CALL_OW 67
// for i in soldiersOK_list do
14396: LD_ADDR_VAR 0 14
14400: PUSH
14401: LD_VAR 0 19
14405: PUSH
14406: FOR_IN
14407: IFFALSE 14471
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14409: LD_VAR 0 14
14413: PPUSH
14414: LD_INT 63
14416: PPUSH
14417: LD_INT 71
14419: PPUSH
14420: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14424: LD_VAR 0 14
14428: PPUSH
14429: LD_INT 35
14431: PPUSH
14432: LD_INT 44
14434: PPUSH
14435: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14439: LD_VAR 0 14
14443: PPUSH
14444: LD_INT 23
14446: PPUSH
14447: LD_INT 18
14449: PPUSH
14450: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14454: LD_VAR 0 14
14458: PPUSH
14459: LD_INT 26
14461: PPUSH
14462: LD_INT 12
14464: PPUSH
14465: CALL_OW 174
// end ;
14469: GO 14406
14471: POP
14472: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14473: LD_INT 14
14475: PPUSH
14476: LD_INT 22
14478: PUSH
14479: LD_VAR 0 1
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 70
14492: PUSH
14493: LD_INT 2
14495: GREATER
14496: IFFALSE 14389
// repeat wait ( 0 0$1 ) ;
14498: LD_INT 35
14500: PPUSH
14501: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14505: LD_ADDR_VAR 0 17
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_VAR 0 1
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: LD_INT 3
14527: PUSH
14528: LD_INT 24
14530: PUSH
14531: LD_INT 550
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 24
14544: PUSH
14545: LD_INT 250
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 69
14565: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14566: LD_ADDR_VAR 0 19
14570: PUSH
14571: LD_INT 22
14573: PUSH
14574: LD_VAR 0 1
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 25
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 25
14598: PUSH
14599: LD_INT 5
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 25
14608: PUSH
14609: LD_INT 8
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 25
14618: PUSH
14619: LD_INT 9
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 24
14635: PUSH
14636: LD_INT 1000
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: PPUSH
14648: CALL_OW 69
14652: ST_TO_ADDR
// if medicCount > 0 then
14653: LD_VAR 0 7
14657: PUSH
14658: LD_INT 0
14660: GREATER
14661: IFFALSE 14735
// begin if damageUnit_list > 0 then
14663: LD_VAR 0 17
14667: PUSH
14668: LD_INT 0
14670: GREATER
14671: IFFALSE 14735
// begin for i in damageUnit_list do
14673: LD_ADDR_VAR 0 14
14677: PUSH
14678: LD_VAR 0 17
14682: PUSH
14683: FOR_IN
14684: IFFALSE 14733
// begin ComMoveToArea ( i , healArea ) ;
14686: LD_VAR 0 14
14690: PPUSH
14691: LD_VAR 0 10
14695: PPUSH
14696: CALL_OW 113
// for j in medic_list do
14700: LD_ADDR_VAR 0 15
14704: PUSH
14705: LD_VAR 0 18
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14729
// AddComHeal ( j , i ) ;
14713: LD_VAR 0 15
14717: PPUSH
14718: LD_VAR 0 14
14722: PPUSH
14723: CALL_OW 188
14727: GO 14710
14729: POP
14730: POP
// end ;
14731: GO 14683
14733: POP
14734: POP
// end ; end ; for i in soldiersOK_list do
14735: LD_ADDR_VAR 0 14
14739: PUSH
14740: LD_VAR 0 19
14744: PUSH
14745: FOR_IN
14746: IFFALSE 14922
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14748: LD_ADDR_VAR 0 22
14752: PUSH
14753: LD_INT 22
14755: PUSH
14756: LD_VAR 0 11
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: PPUSH
14770: LD_VAR 0 14
14774: PPUSH
14775: CALL_OW 74
14779: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14780: LD_ADDR_VAR 0 23
14784: PUSH
14785: LD_INT 22
14787: PUSH
14788: LD_VAR 0 11
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: LD_INT 59
14802: PUSH
14803: EMPTY
14804: LIST
14805: PUSH
14806: LD_INT 21
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 21
14818: PUSH
14819: LD_INT 2
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: PPUSH
14844: LD_VAR 0 14
14848: PPUSH
14849: CALL_OW 74
14853: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14854: LD_VAR 0 14
14858: PPUSH
14859: LD_VAR 0 22
14863: PPUSH
14864: CALL_OW 296
14868: PUSH
14869: LD_INT 6
14871: PLUS
14872: PUSH
14873: LD_VAR 0 14
14877: PPUSH
14878: LD_VAR 0 23
14882: PPUSH
14883: CALL_OW 296
14887: LESS
14888: IFFALSE 14906
// begin ComAttackUnit ( i , target1 ) ;
14890: LD_VAR 0 14
14894: PPUSH
14895: LD_VAR 0 22
14899: PPUSH
14900: CALL_OW 115
// end else
14904: GO 14920
// begin ComAttackUnit ( i , target2 ) ;
14906: LD_VAR 0 14
14910: PPUSH
14911: LD_VAR 0 23
14915: PPUSH
14916: CALL_OW 115
// end ; end ;
14920: GO 14745
14922: POP
14923: POP
// until soldiersOK_list = [ ] ;
14924: LD_VAR 0 19
14928: PUSH
14929: EMPTY
14930: EQUAL
14931: IFFALSE 14498
// end ; end ;
14933: LD_VAR 0 13
14937: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
14948: PPUSH
14949: PPUSH
14950: PPUSH
// amChassisTab = [ ] ;
14951: LD_ADDR_VAR 0 19
14955: PUSH
14956: EMPTY
14957: ST_TO_ADDR
// arChassisTab = [ ] ;
14958: LD_ADDR_VAR 0 18
14962: PUSH
14963: EMPTY
14964: ST_TO_ADDR
// ruChassisTab = [ ] ;
14965: LD_ADDR_VAR 0 17
14969: PUSH
14970: EMPTY
14971: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14972: LD_INT 35
14974: PPUSH
14975: CALL_OW 67
// if nation = 1 then
14979: LD_VAR 0 5
14983: PUSH
14984: LD_INT 1
14986: EQUAL
14987: IFFALSE 15478
// begin uc_side = side ;
14989: LD_ADDR_OWVAR 20
14993: PUSH
14994: LD_VAR 0 2
14998: ST_TO_ADDR
// uc_nation = nation ;
14999: LD_ADDR_OWVAR 21
15003: PUSH
15004: LD_VAR 0 5
15008: ST_TO_ADDR
// vc_engine = vehengine ;
15009: LD_ADDR_OWVAR 39
15013: PUSH
15014: LD_VAR 0 6
15018: ST_TO_ADDR
// vc_control = vehcontrol ;
15019: LD_ADDR_OWVAR 38
15023: PUSH
15024: LD_VAR 0 7
15028: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15029: LD_ADDR_OWVAR 40
15033: PUSH
15034: LD_VAR 0 10
15038: PUSH
15039: LD_INT 1
15041: PPUSH
15042: LD_VAR 0 10
15046: PPUSH
15047: CALL_OW 12
15051: ARRAY
15052: ST_TO_ADDR
// for j = 1 to AMWeapon do
15053: LD_ADDR_VAR 0 14
15057: PUSH
15058: DOUBLE
15059: LD_INT 1
15061: DEC
15062: ST_TO_ADDR
15063: LD_VAR 0 10
15067: PUSH
15068: FOR_TO
15069: IFFALSE 15370
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15071: LD_VAR 0 10
15075: PUSH
15076: LD_VAR 0 14
15080: ARRAY
15081: PUSH
15082: LD_INT 2
15084: EQUAL
15085: PUSH
15086: LD_VAR 0 10
15090: PUSH
15091: LD_VAR 0 14
15095: ARRAY
15096: PUSH
15097: LD_INT 3
15099: EQUAL
15100: OR
15101: IFFALSE 15154
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15103: LD_ADDR_VAR 0 19
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: LD_INT 4
15119: PUSH
15120: LD_INT 5
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15130: LD_ADDR_OWVAR 37
15134: PUSH
15135: LD_VAR 0 19
15139: PUSH
15140: LD_INT 1
15142: PPUSH
15143: LD_VAR 0 19
15147: PPUSH
15148: CALL_OW 12
15152: ARRAY
15153: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15154: LD_VAR 0 10
15158: PUSH
15159: LD_VAR 0 14
15163: ARRAY
15164: PUSH
15165: LD_INT 4
15167: EQUAL
15168: PUSH
15169: LD_VAR 0 10
15173: PUSH
15174: LD_VAR 0 14
15178: ARRAY
15179: PUSH
15180: LD_INT 5
15182: EQUAL
15183: OR
15184: PUSH
15185: LD_VAR 0 10
15189: PUSH
15190: LD_VAR 0 14
15194: ARRAY
15195: PUSH
15196: LD_INT 9
15198: EQUAL
15199: OR
15200: PUSH
15201: LD_VAR 0 10
15205: PUSH
15206: LD_VAR 0 14
15210: ARRAY
15211: PUSH
15212: LD_INT 11
15214: EQUAL
15215: OR
15216: PUSH
15217: LD_VAR 0 10
15221: PUSH
15222: LD_VAR 0 14
15226: ARRAY
15227: PUSH
15228: LD_INT 7
15230: EQUAL
15231: OR
15232: IFFALSE 15281
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15234: LD_ADDR_VAR 0 19
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: LD_INT 3
15244: PUSH
15245: LD_INT 4
15247: PUSH
15248: LD_INT 5
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15257: LD_ADDR_OWVAR 37
15261: PUSH
15262: LD_VAR 0 19
15266: PUSH
15267: LD_INT 1
15269: PPUSH
15270: LD_VAR 0 19
15274: PPUSH
15275: CALL_OW 12
15279: ARRAY
15280: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15281: LD_VAR 0 10
15285: PUSH
15286: LD_VAR 0 14
15290: ARRAY
15291: PUSH
15292: LD_INT 8
15294: EQUAL
15295: PUSH
15296: LD_VAR 0 10
15300: PUSH
15301: LD_VAR 0 14
15305: ARRAY
15306: PUSH
15307: LD_INT 6
15309: EQUAL
15310: OR
15311: PUSH
15312: LD_VAR 0 10
15316: PUSH
15317: LD_VAR 0 14
15321: ARRAY
15322: PUSH
15323: LD_INT 10
15325: EQUAL
15326: OR
15327: IFFALSE 15368
// begin amChassisTab = [ 4 , 5 ] ;
15329: LD_ADDR_VAR 0 19
15333: PUSH
15334: LD_INT 4
15336: PUSH
15337: LD_INT 5
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15344: LD_ADDR_OWVAR 37
15348: PUSH
15349: LD_VAR 0 19
15353: PUSH
15354: LD_INT 1
15356: PPUSH
15357: LD_VAR 0 19
15361: PPUSH
15362: CALL_OW 12
15366: ARRAY
15367: ST_TO_ADDR
// end ; end ;
15368: GO 15068
15370: POP
15371: POP
// veh = CreateVehicle ;
15372: LD_ADDR_VAR 0 16
15376: PUSH
15377: CALL_OW 45
15381: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15382: LD_VAR 0 16
15386: PPUSH
15387: LD_VAR 0 1
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL_OW 49
// if vehControl = 1 then
15399: LD_VAR 0 7
15403: PUSH
15404: LD_INT 1
15406: EQUAL
15407: IFFALSE 15464
// begin hc_gallery =  ;
15409: LD_ADDR_OWVAR 33
15413: PUSH
15414: LD_STRING 
15416: ST_TO_ADDR
// hc_name =  ;
15417: LD_ADDR_OWVAR 26
15421: PUSH
15422: LD_STRING 
15424: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15425: LD_INT 0
15427: PPUSH
15428: LD_INT 3
15430: PPUSH
15431: LD_VAR 0 4
15435: PPUSH
15436: CALL_OW 380
// un = CreateHuman ;
15440: LD_ADDR_VAR 0 15
15444: PUSH
15445: CALL_OW 44
15449: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15450: LD_VAR 0 15
15454: PPUSH
15455: LD_VAR 0 16
15459: PPUSH
15460: CALL_OW 52
// end ; i = i + 1 ;
15464: LD_ADDR_VAR 0 13
15468: PUSH
15469: LD_VAR 0 13
15473: PUSH
15474: LD_INT 1
15476: PLUS
15477: ST_TO_ADDR
// end ; if nation = 2 then
15478: LD_VAR 0 5
15482: PUSH
15483: LD_INT 2
15485: EQUAL
15486: IFFALSE 15910
// begin uc_side = side ;
15488: LD_ADDR_OWVAR 20
15492: PUSH
15493: LD_VAR 0 2
15497: ST_TO_ADDR
// uc_nation = nation ;
15498: LD_ADDR_OWVAR 21
15502: PUSH
15503: LD_VAR 0 5
15507: ST_TO_ADDR
// vc_engine = vehengine ;
15508: LD_ADDR_OWVAR 39
15512: PUSH
15513: LD_VAR 0 6
15517: ST_TO_ADDR
// vc_control = vehcontrol ;
15518: LD_ADDR_OWVAR 38
15522: PUSH
15523: LD_VAR 0 7
15527: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15528: LD_ADDR_OWVAR 40
15532: PUSH
15533: LD_VAR 0 9
15537: PUSH
15538: LD_INT 1
15540: PPUSH
15541: LD_VAR 0 9
15545: PPUSH
15546: CALL_OW 12
15550: ARRAY
15551: ST_TO_ADDR
// for j = 1 to ARWeapons do
15552: LD_ADDR_VAR 0 14
15556: PUSH
15557: DOUBLE
15558: LD_INT 1
15560: DEC
15561: ST_TO_ADDR
15562: LD_VAR 0 9
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15802
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15570: LD_VAR 0 9
15574: PUSH
15575: LD_VAR 0 14
15579: ARRAY
15580: PUSH
15581: LD_INT 24
15583: EQUAL
15584: PUSH
15585: LD_VAR 0 9
15589: PUSH
15590: LD_VAR 0 14
15594: ARRAY
15595: PUSH
15596: LD_INT 22
15598: EQUAL
15599: OR
15600: PUSH
15601: LD_VAR 0 9
15605: PUSH
15606: LD_VAR 0 14
15610: ARRAY
15611: PUSH
15612: LD_INT 23
15614: EQUAL
15615: OR
15616: PUSH
15617: LD_VAR 0 9
15621: PUSH
15622: LD_VAR 0 14
15626: ARRAY
15627: PUSH
15628: LD_INT 30
15630: EQUAL
15631: OR
15632: IFFALSE 15681
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15634: LD_ADDR_VAR 0 18
15638: PUSH
15639: LD_INT 11
15641: PUSH
15642: LD_INT 12
15644: PUSH
15645: LD_INT 13
15647: PUSH
15648: LD_INT 14
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15657: LD_ADDR_OWVAR 37
15661: PUSH
15662: LD_VAR 0 18
15666: PUSH
15667: LD_INT 1
15669: PPUSH
15670: LD_VAR 0 18
15674: PPUSH
15675: CALL_OW 12
15679: ARRAY
15680: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15681: LD_VAR 0 9
15685: PUSH
15686: LD_VAR 0 14
15690: ARRAY
15691: PUSH
15692: LD_INT 29
15694: EQUAL
15695: PUSH
15696: LD_VAR 0 9
15700: PUSH
15701: LD_VAR 0 14
15705: ARRAY
15706: PUSH
15707: LD_INT 28
15709: EQUAL
15710: OR
15711: PUSH
15712: LD_VAR 0 9
15716: PUSH
15717: LD_VAR 0 14
15721: ARRAY
15722: PUSH
15723: LD_INT 27
15725: EQUAL
15726: OR
15727: PUSH
15728: LD_VAR 0 9
15732: PUSH
15733: LD_VAR 0 14
15737: ARRAY
15738: PUSH
15739: LD_INT 26
15741: EQUAL
15742: OR
15743: PUSH
15744: LD_VAR 0 9
15748: PUSH
15749: LD_VAR 0 14
15753: ARRAY
15754: PUSH
15755: LD_INT 25
15757: EQUAL
15758: OR
15759: IFFALSE 15800
// begin arChassisTab = [ 13 , 14 ] ;
15761: LD_ADDR_VAR 0 18
15765: PUSH
15766: LD_INT 13
15768: PUSH
15769: LD_INT 14
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15776: LD_ADDR_OWVAR 37
15780: PUSH
15781: LD_VAR 0 18
15785: PUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_VAR 0 18
15793: PPUSH
15794: CALL_OW 12
15798: ARRAY
15799: ST_TO_ADDR
// end ; end ;
15800: GO 15567
15802: POP
15803: POP
// veh = CreateVehicle ;
15804: LD_ADDR_VAR 0 16
15808: PUSH
15809: CALL_OW 45
15813: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15814: LD_VAR 0 16
15818: PPUSH
15819: LD_VAR 0 1
15823: PPUSH
15824: LD_INT 0
15826: PPUSH
15827: CALL_OW 49
// if vehcontrol = 1 then
15831: LD_VAR 0 7
15835: PUSH
15836: LD_INT 1
15838: EQUAL
15839: IFFALSE 15896
// begin hc_gallery =  ;
15841: LD_ADDR_OWVAR 33
15845: PUSH
15846: LD_STRING 
15848: ST_TO_ADDR
// hc_name =  ;
15849: LD_ADDR_OWVAR 26
15853: PUSH
15854: LD_STRING 
15856: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 3
15862: PPUSH
15863: LD_VAR 0 4
15867: PPUSH
15868: CALL_OW 380
// un = CreateHuman ;
15872: LD_ADDR_VAR 0 15
15876: PUSH
15877: CALL_OW 44
15881: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15882: LD_VAR 0 15
15886: PPUSH
15887: LD_VAR 0 16
15891: PPUSH
15892: CALL_OW 52
// end ; i = i + 1 ;
15896: LD_ADDR_VAR 0 13
15900: PUSH
15901: LD_VAR 0 13
15905: PUSH
15906: LD_INT 1
15908: PLUS
15909: ST_TO_ADDR
// end ; if nation = 3 then
15910: LD_VAR 0 5
15914: PUSH
15915: LD_INT 3
15917: EQUAL
15918: IFFALSE 16310
// begin uc_side = side ;
15920: LD_ADDR_OWVAR 20
15924: PUSH
15925: LD_VAR 0 2
15929: ST_TO_ADDR
// uc_nation = nation ;
15930: LD_ADDR_OWVAR 21
15934: PUSH
15935: LD_VAR 0 5
15939: ST_TO_ADDR
// vc_engine = vehengine ;
15940: LD_ADDR_OWVAR 39
15944: PUSH
15945: LD_VAR 0 6
15949: ST_TO_ADDR
// vc_control = vehcontrol ;
15950: LD_ADDR_OWVAR 38
15954: PUSH
15955: LD_VAR 0 7
15959: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15960: LD_ADDR_OWVAR 40
15964: PUSH
15965: LD_VAR 0 8
15969: PUSH
15970: LD_INT 1
15972: PPUSH
15973: LD_VAR 0 8
15977: PPUSH
15978: CALL_OW 12
15982: ARRAY
15983: ST_TO_ADDR
// for j = 1 to RuWeapons do
15984: LD_ADDR_VAR 0 14
15988: PUSH
15989: DOUBLE
15990: LD_INT 1
15992: DEC
15993: ST_TO_ADDR
15994: LD_VAR 0 8
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16202
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16002: LD_VAR 0 8
16006: PUSH
16007: LD_VAR 0 14
16011: ARRAY
16012: PUSH
16013: LD_INT 42
16015: EQUAL
16016: PUSH
16017: LD_VAR 0 8
16021: PUSH
16022: LD_VAR 0 14
16026: ARRAY
16027: PUSH
16028: LD_INT 43
16030: EQUAL
16031: OR
16032: PUSH
16033: LD_VAR 0 8
16037: PUSH
16038: LD_VAR 0 14
16042: ARRAY
16043: PUSH
16044: LD_INT 44
16046: EQUAL
16047: OR
16048: PUSH
16049: LD_VAR 0 8
16053: PUSH
16054: LD_VAR 0 14
16058: ARRAY
16059: PUSH
16060: LD_INT 45
16062: EQUAL
16063: OR
16064: PUSH
16065: LD_VAR 0 8
16069: PUSH
16070: LD_VAR 0 14
16074: ARRAY
16075: PUSH
16076: LD_INT 49
16078: EQUAL
16079: OR
16080: IFFALSE 16129
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16082: LD_ADDR_VAR 0 17
16086: PUSH
16087: LD_INT 21
16089: PUSH
16090: LD_INT 22
16092: PUSH
16093: LD_INT 23
16095: PUSH
16096: LD_INT 24
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16105: LD_ADDR_OWVAR 37
16109: PUSH
16110: LD_VAR 0 17
16114: PUSH
16115: LD_INT 1
16117: PPUSH
16118: LD_VAR 0 17
16122: PPUSH
16123: CALL_OW 12
16127: ARRAY
16128: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16129: LD_VAR 0 8
16133: PUSH
16134: LD_VAR 0 14
16138: ARRAY
16139: PUSH
16140: LD_INT 46
16142: EQUAL
16143: PUSH
16144: LD_VAR 0 8
16148: PUSH
16149: LD_VAR 0 14
16153: ARRAY
16154: PUSH
16155: LD_INT 47
16157: EQUAL
16158: OR
16159: IFFALSE 16200
// begin ruChassisTab = [ 23 , 24 ] ;
16161: LD_ADDR_VAR 0 17
16165: PUSH
16166: LD_INT 23
16168: PUSH
16169: LD_INT 24
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16176: LD_ADDR_OWVAR 37
16180: PUSH
16181: LD_VAR 0 17
16185: PUSH
16186: LD_INT 1
16188: PPUSH
16189: LD_VAR 0 17
16193: PPUSH
16194: CALL_OW 12
16198: ARRAY
16199: ST_TO_ADDR
// end ; end ;
16200: GO 15999
16202: POP
16203: POP
// veh = CreateVehicle ;
16204: LD_ADDR_VAR 0 16
16208: PUSH
16209: CALL_OW 45
16213: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16214: LD_VAR 0 16
16218: PPUSH
16219: LD_VAR 0 1
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// if vehcontrol = 1 then
16231: LD_VAR 0 7
16235: PUSH
16236: LD_INT 1
16238: EQUAL
16239: IFFALSE 16296
// begin hc_gallery =  ;
16241: LD_ADDR_OWVAR 33
16245: PUSH
16246: LD_STRING 
16248: ST_TO_ADDR
// hc_name =  ;
16249: LD_ADDR_OWVAR 26
16253: PUSH
16254: LD_STRING 
16256: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16257: LD_INT 0
16259: PPUSH
16260: LD_INT 3
16262: PPUSH
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 380
// un = CreateHuman ;
16272: LD_ADDR_VAR 0 15
16276: PUSH
16277: CALL_OW 44
16281: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16282: LD_VAR 0 15
16286: PPUSH
16287: LD_VAR 0 16
16291: PPUSH
16292: CALL_OW 52
// end ; i = i + 1 ;
16296: LD_ADDR_VAR 0 13
16300: PUSH
16301: LD_VAR 0 13
16305: PUSH
16306: LD_INT 1
16308: PLUS
16309: ST_TO_ADDR
// end ; until i = vehCount ;
16310: LD_VAR 0 13
16314: PUSH
16315: LD_VAR 0 3
16319: EQUAL
16320: IFFALSE 14972
// repeat wait ( 0 0$1 ) ;
16322: LD_INT 35
16324: PPUSH
16325: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16329: LD_ADDR_VAR 0 20
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_VAR 0 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 21
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 24
16358: PUSH
16359: LD_INT 250
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: PPUSH
16371: CALL_OW 69
16375: ST_TO_ADDR
// if vehicleOK_list > 0 then
16376: LD_VAR 0 20
16380: PUSH
16381: LD_INT 0
16383: GREATER
16384: IFFALSE 16575
// begin for i in vehicleOK_list do
16386: LD_ADDR_VAR 0 13
16390: PUSH
16391: LD_VAR 0 20
16395: PUSH
16396: FOR_IN
16397: IFFALSE 16573
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16399: LD_ADDR_VAR 0 21
16403: PUSH
16404: LD_INT 22
16406: PUSH
16407: LD_VAR 0 11
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: PPUSH
16421: LD_VAR 0 13
16425: PPUSH
16426: CALL_OW 74
16430: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16431: LD_ADDR_VAR 0 22
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_VAR 0 11
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 59
16453: PUSH
16454: EMPTY
16455: LIST
16456: PUSH
16457: LD_INT 21
16459: PUSH
16460: LD_INT 1
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 21
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: PPUSH
16495: LD_VAR 0 13
16499: PPUSH
16500: CALL_OW 74
16504: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16505: LD_VAR 0 13
16509: PPUSH
16510: LD_VAR 0 21
16514: PPUSH
16515: CALL_OW 296
16519: PUSH
16520: LD_INT 6
16522: PLUS
16523: PUSH
16524: LD_VAR 0 13
16528: PPUSH
16529: LD_VAR 0 22
16533: PPUSH
16534: CALL_OW 296
16538: LESS
16539: IFFALSE 16557
// begin ComAttackUnit ( i , target1 ) ;
16541: LD_VAR 0 13
16545: PPUSH
16546: LD_VAR 0 21
16550: PPUSH
16551: CALL_OW 115
// end else
16555: GO 16571
// begin ComAttackUnit ( i , target2 ) ;
16557: LD_VAR 0 13
16561: PPUSH
16562: LD_VAR 0 22
16566: PPUSH
16567: CALL_OW 115
// end ; end ;
16571: GO 16396
16573: POP
16574: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16575: LD_INT 22
16577: PUSH
16578: LD_VAR 0 2
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 21
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 24
16599: PUSH
16600: LD_INT 250
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: PUSH
16617: LD_INT 0
16619: EQUAL
16620: IFFALSE 16322
// end ;
16622: LD_VAR 0 12
16626: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16627: LD_INT 0
16629: PPUSH
16630: PPUSH
16631: PPUSH
16632: PPUSH
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16637: LD_ADDR_VAR 0 7
16641: PUSH
16642: LD_INT 22
16644: PUSH
16645: LD_VAR 0 1
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: LD_INT 3
16659: PUSH
16660: LD_INT 24
16662: PUSH
16663: LD_INT 550
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 24
16676: PUSH
16677: LD_INT 250
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16698: LD_ADDR_VAR 0 8
16702: PUSH
16703: LD_INT 22
16705: PUSH
16706: LD_VAR 0 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: LD_INT 25
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 25
16730: PUSH
16731: LD_INT 5
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 25
16740: PUSH
16741: LD_INT 8
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 25
16750: PUSH
16751: LD_INT 9
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 24
16767: PUSH
16768: LD_INT 1000
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: PPUSH
16780: CALL_OW 69
16784: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16785: LD_ADDR_VAR 0 9
16789: PUSH
16790: LD_INT 22
16792: PUSH
16793: LD_VAR 0 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 25
16804: PUSH
16805: LD_INT 4
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PPUSH
16816: CALL_OW 69
16820: ST_TO_ADDR
// if medicCount > 0 then
16821: LD_VAR 0 9
16825: PUSH
16826: LD_INT 0
16828: GREATER
16829: IFFALSE 16903
// begin if damageUnit_list > 0 then
16831: LD_VAR 0 7
16835: PUSH
16836: LD_INT 0
16838: GREATER
16839: IFFALSE 16903
// begin for i in damageUnit_list do
16841: LD_ADDR_VAR 0 5
16845: PUSH
16846: LD_VAR 0 7
16850: PUSH
16851: FOR_IN
16852: IFFALSE 16901
// begin ComMoveToArea ( i , healArea ) ;
16854: LD_VAR 0 5
16858: PPUSH
16859: LD_VAR 0 2
16863: PPUSH
16864: CALL_OW 113
// for j in medicCount do
16868: LD_ADDR_VAR 0 6
16872: PUSH
16873: LD_VAR 0 9
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16897
// AddComHeal ( j , i ) ;
16881: LD_VAR 0 6
16885: PPUSH
16886: LD_VAR 0 5
16890: PPUSH
16891: CALL_OW 188
16895: GO 16878
16897: POP
16898: POP
// end ;
16899: GO 16851
16901: POP
16902: POP
// end ; end ; if soldiersOK_list > 0 then
16903: LD_VAR 0 8
16907: PUSH
16908: LD_INT 0
16910: GREATER
16911: IFFALSE 17102
// begin for i in soldiersOK_list do
16913: LD_ADDR_VAR 0 5
16917: PUSH
16918: LD_VAR 0 8
16922: PUSH
16923: FOR_IN
16924: IFFALSE 17100
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16926: LD_ADDR_VAR 0 10
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_VAR 0 3
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PPUSH
16943: CALL_OW 69
16947: PPUSH
16948: LD_VAR 0 5
16952: PPUSH
16953: CALL_OW 74
16957: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16958: LD_ADDR_VAR 0 11
16962: PUSH
16963: LD_INT 22
16965: PUSH
16966: LD_VAR 0 3
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: LD_INT 59
16980: PUSH
16981: EMPTY
16982: LIST
16983: PUSH
16984: LD_INT 21
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: PPUSH
17017: CALL_OW 69
17021: PPUSH
17022: LD_VAR 0 5
17026: PPUSH
17027: CALL_OW 74
17031: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17032: LD_VAR 0 5
17036: PPUSH
17037: LD_VAR 0 10
17041: PPUSH
17042: CALL_OW 296
17046: PUSH
17047: LD_INT 8
17049: PLUS
17050: PUSH
17051: LD_VAR 0 5
17055: PPUSH
17056: LD_VAR 0 11
17060: PPUSH
17061: CALL_OW 296
17065: LESS
17066: IFFALSE 17084
// begin ComAttackUnit ( i , target1 ) ;
17068: LD_VAR 0 5
17072: PPUSH
17073: LD_VAR 0 10
17077: PPUSH
17078: CALL_OW 115
// end else
17082: GO 17098
// begin ComAttackUnit ( i , target2 ) ;
17084: LD_VAR 0 5
17088: PPUSH
17089: LD_VAR 0 11
17093: PPUSH
17094: CALL_OW 115
// end ; end ;
17098: GO 16923
17100: POP
17101: POP
// end ; end ;
17102: LD_VAR 0 4
17106: RET
// export function GetDriverVehicle ( unit ) ; begin
17107: LD_INT 0
17109: PPUSH
// if not unit then
17110: LD_VAR 0 1
17114: NOT
17115: IFFALSE 17119
// exit ;
17117: GO 17157
// result := IsInUnit ( unit ) ;
17119: LD_ADDR_VAR 0 2
17123: PUSH
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 310
17133: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
17134: LD_VAR 0 2
17138: PPUSH
17139: CALL_OW 247
17143: PUSH
17144: LD_INT 2
17146: NONEQUAL
17147: IFFALSE 17157
// result := 0 ;
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: LD_INT 0
17156: ST_TO_ADDR
// end ;
17157: LD_VAR 0 2
17161: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17162: LD_INT 0
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
// result := false ;
17173: LD_ADDR_VAR 0 7
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17181: LD_VAR 0 1
17185: NOT
17186: PUSH
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 266
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: IN
17207: NOT
17208: OR
17209: PUSH
17210: LD_VAR 0 2
17214: NOT
17215: OR
17216: PUSH
17217: LD_VAR 0 5
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: LD_INT 3
17233: PUSH
17234: LD_INT 4
17236: PUSH
17237: LD_INT 5
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: IN
17248: NOT
17249: OR
17250: PUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_VAR 0 4
17260: PPUSH
17261: CALL_OW 488
17265: NOT
17266: OR
17267: IFFALSE 17271
// exit ;
17269: GO 17952
// pom := GetBase ( bdepot ) ;
17271: LD_ADDR_VAR 0 10
17275: PUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 274
17285: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17286: LD_ADDR_VAR 0 11
17290: PUSH
17291: LD_VAR 0 2
17295: PPUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 248
17305: PPUSH
17306: CALL_OW 450
17310: ST_TO_ADDR
// if check_cost then
17311: LD_VAR 0 6
17315: IFFALSE 17392
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17317: LD_VAR 0 10
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 275
17329: PUSH
17330: LD_VAR 0 11
17334: PUSH
17335: LD_INT 1
17337: ARRAY
17338: GREATEREQUAL
17339: PUSH
17340: LD_VAR 0 10
17344: PPUSH
17345: LD_INT 2
17347: PPUSH
17348: CALL_OW 275
17352: PUSH
17353: LD_VAR 0 11
17357: PUSH
17358: LD_INT 2
17360: ARRAY
17361: GREATEREQUAL
17362: AND
17363: PUSH
17364: LD_VAR 0 10
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: CALL_OW 275
17376: PUSH
17377: LD_VAR 0 11
17381: PUSH
17382: LD_INT 3
17384: ARRAY
17385: GREATEREQUAL
17386: AND
17387: NOT
17388: IFFALSE 17392
// exit ;
17390: GO 17952
// if GetBType ( bdepot ) = b_depot then
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 266
17401: PUSH
17402: LD_INT 0
17404: EQUAL
17405: IFFALSE 17417
// dist := 28 else
17407: LD_ADDR_VAR 0 14
17411: PUSH
17412: LD_INT 28
17414: ST_TO_ADDR
17415: GO 17425
// dist := 36 ;
17417: LD_ADDR_VAR 0 14
17421: PUSH
17422: LD_INT 36
17424: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17425: LD_VAR 0 1
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: CALL_OW 297
17444: PUSH
17445: LD_VAR 0 14
17449: GREATER
17450: IFFALSE 17454
// exit ;
17452: GO 17952
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17454: LD_ADDR_VAR 0 12
17458: PUSH
17459: LD_VAR 0 2
17463: PPUSH
17464: LD_VAR 0 3
17468: PPUSH
17469: LD_VAR 0 4
17473: PPUSH
17474: LD_VAR 0 5
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 248
17488: PPUSH
17489: LD_INT 0
17491: PPUSH
17492: CALL 60189 0 6
17496: ST_TO_ADDR
// if not hexes then
17497: LD_VAR 0 12
17501: NOT
17502: IFFALSE 17506
// exit ;
17504: GO 17952
// hex := GetHexInfo ( x , y ) ;
17506: LD_ADDR_VAR 0 15
17510: PUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: LD_VAR 0 4
17520: PPUSH
17521: CALL_OW 546
17525: ST_TO_ADDR
// if hex [ 1 ] then
17526: LD_VAR 0 15
17530: PUSH
17531: LD_INT 1
17533: ARRAY
17534: IFFALSE 17538
// exit ;
17536: GO 17952
// height := hex [ 2 ] ;
17538: LD_ADDR_VAR 0 13
17542: PUSH
17543: LD_VAR 0 15
17547: PUSH
17548: LD_INT 2
17550: ARRAY
17551: ST_TO_ADDR
// for i = 1 to hexes do
17552: LD_ADDR_VAR 0 8
17556: PUSH
17557: DOUBLE
17558: LD_INT 1
17560: DEC
17561: ST_TO_ADDR
17562: LD_VAR 0 12
17566: PUSH
17567: FOR_TO
17568: IFFALSE 17896
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17570: LD_VAR 0 12
17574: PUSH
17575: LD_VAR 0 8
17579: ARRAY
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: LD_VAR 0 12
17589: PUSH
17590: LD_VAR 0 8
17594: ARRAY
17595: PUSH
17596: LD_INT 2
17598: ARRAY
17599: PPUSH
17600: CALL_OW 488
17604: NOT
17605: IFFALSE 17609
// continue ;
17607: GO 17567
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17609: LD_ADDR_VAR 0 9
17613: PUSH
17614: LD_VAR 0 12
17618: PUSH
17619: LD_VAR 0 8
17623: ARRAY
17624: PUSH
17625: LD_INT 1
17627: ARRAY
17628: PPUSH
17629: LD_VAR 0 12
17633: PUSH
17634: LD_VAR 0 8
17638: ARRAY
17639: PUSH
17640: LD_INT 2
17642: ARRAY
17643: PPUSH
17644: CALL_OW 546
17648: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17649: LD_VAR 0 9
17653: PUSH
17654: LD_INT 1
17656: ARRAY
17657: PUSH
17658: LD_VAR 0 9
17662: PUSH
17663: LD_INT 2
17665: ARRAY
17666: PUSH
17667: LD_VAR 0 13
17671: PUSH
17672: LD_INT 2
17674: PLUS
17675: GREATER
17676: OR
17677: PUSH
17678: LD_VAR 0 9
17682: PUSH
17683: LD_INT 2
17685: ARRAY
17686: PUSH
17687: LD_VAR 0 13
17691: PUSH
17692: LD_INT 2
17694: MINUS
17695: LESS
17696: OR
17697: PUSH
17698: LD_VAR 0 9
17702: PUSH
17703: LD_INT 3
17705: ARRAY
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: LD_INT 8
17712: PUSH
17713: LD_INT 9
17715: PUSH
17716: LD_INT 10
17718: PUSH
17719: LD_INT 11
17721: PUSH
17722: LD_INT 12
17724: PUSH
17725: LD_INT 13
17727: PUSH
17728: LD_INT 16
17730: PUSH
17731: LD_INT 17
17733: PUSH
17734: LD_INT 18
17736: PUSH
17737: LD_INT 19
17739: PUSH
17740: LD_INT 20
17742: PUSH
17743: LD_INT 21
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: IN
17761: NOT
17762: OR
17763: PUSH
17764: LD_VAR 0 9
17768: PUSH
17769: LD_INT 5
17771: ARRAY
17772: NOT
17773: OR
17774: PUSH
17775: LD_VAR 0 9
17779: PUSH
17780: LD_INT 6
17782: ARRAY
17783: PUSH
17784: LD_INT 1
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 7
17792: PUSH
17793: LD_INT 9
17795: PUSH
17796: LD_INT 10
17798: PUSH
17799: LD_INT 11
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: IN
17810: NOT
17811: OR
17812: PUSH
17813: LD_VAR 0 12
17817: PUSH
17818: LD_VAR 0 8
17822: ARRAY
17823: PUSH
17824: LD_INT 1
17826: ARRAY
17827: PPUSH
17828: LD_VAR 0 12
17832: PUSH
17833: LD_VAR 0 8
17837: ARRAY
17838: PUSH
17839: LD_INT 2
17841: ARRAY
17842: PPUSH
17843: CALL_OW 428
17847: PUSH
17848: LD_INT 0
17850: GREATER
17851: OR
17852: PUSH
17853: LD_VAR 0 12
17857: PUSH
17858: LD_VAR 0 8
17862: ARRAY
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PPUSH
17868: LD_VAR 0 12
17872: PUSH
17873: LD_VAR 0 8
17877: ARRAY
17878: PUSH
17879: LD_INT 2
17881: ARRAY
17882: PPUSH
17883: CALL_OW 351
17887: OR
17888: IFFALSE 17894
// exit ;
17890: POP
17891: POP
17892: GO 17952
// end ;
17894: GO 17567
17896: POP
17897: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17898: LD_VAR 0 2
17902: PUSH
17903: LD_INT 29
17905: PUSH
17906: LD_INT 30
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: IN
17913: PUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_VAR 0 1
17928: PPUSH
17929: CALL_OW 255
17933: PPUSH
17934: CALL_OW 440
17938: NOT
17939: AND
17940: IFFALSE 17944
// exit ;
17942: GO 17952
// result := true ;
17944: LD_ADDR_VAR 0 7
17948: PUSH
17949: LD_INT 1
17951: ST_TO_ADDR
// end ; end_of_file
17952: LD_VAR 0 7
17956: RET
// every 1 do var i ;
17957: GO 17959
17959: DISABLE
17960: LD_INT 0
17962: PPUSH
// begin Video ( true ) ;
17963: LD_INT 1
17965: PPUSH
17966: CALL 82901 0 1
// CenterOnXY ( 53 , 40 ) ;
17970: LD_INT 53
17972: PPUSH
17973: LD_INT 40
17975: PPUSH
17976: CALL_OW 84
// wait ( 0 0$5 ) ;
17980: LD_INT 175
17982: PPUSH
17983: CALL_OW 67
// if gammaCommander = 1 then
17987: LD_EXP 12
17991: PUSH
17992: LD_INT 1
17994: EQUAL
17995: IFFALSE 18009
// Say ( Donaldson , D1-Don-1 ) ;
17997: LD_EXP 3
18001: PPUSH
18002: LD_STRING D1-Don-1
18004: PPUSH
18005: CALL_OW 88
// if gammaCommander = 2 then
18009: LD_EXP 12
18013: PUSH
18014: LD_INT 2
18016: EQUAL
18017: IFFALSE 18031
// Say ( Brown , D1-Brown-1 ) ;
18019: LD_EXP 2
18023: PPUSH
18024: LD_STRING D1-Brown-1
18026: PPUSH
18027: CALL_OW 88
// if gammaCommander = 3 then
18031: LD_EXP 12
18035: PUSH
18036: LD_INT 3
18038: EQUAL
18039: IFFALSE 18053
// Say ( Houten , D1-VanH-1 ) ;
18041: LD_EXP 13
18045: PPUSH
18046: LD_STRING D1-VanH-1
18048: PPUSH
18049: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
18053: LD_EXP 22
18057: PPUSH
18058: LD_STRING D1-Har-1
18060: PPUSH
18061: CALL_OW 94
// if gammaCommander = 1 then
18065: LD_EXP 12
18069: PUSH
18070: LD_INT 1
18072: EQUAL
18073: IFFALSE 18087
// Say ( Donaldson , D1-Don-2 ) ;
18075: LD_EXP 3
18079: PPUSH
18080: LD_STRING D1-Don-2
18082: PPUSH
18083: CALL_OW 88
// if gammaCommander = 2 then
18087: LD_EXP 12
18091: PUSH
18092: LD_INT 2
18094: EQUAL
18095: IFFALSE 18109
// Say ( Brown , D1-Brown-2 ) ;
18097: LD_EXP 2
18101: PPUSH
18102: LD_STRING D1-Brown-2
18104: PPUSH
18105: CALL_OW 88
// if gammaCommander = 3 then
18109: LD_EXP 12
18113: PUSH
18114: LD_INT 3
18116: EQUAL
18117: IFFALSE 18131
// Say ( Houten , D1-VanH-2 ) ;
18119: LD_EXP 13
18123: PPUSH
18124: LD_STRING D1-VanH-2
18126: PPUSH
18127: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
18131: LD_EXP 22
18135: PPUSH
18136: LD_STRING D1-Har-2
18138: PPUSH
18139: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
18143: LD_INT 22
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 33
18155: PUSH
18156: LD_INT 2
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 61
18165: PUSH
18166: EMPTY
18167: LIST
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: PPUSH
18174: CALL_OW 69
18178: IFFALSE 18243
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
18180: LD_ADDR_VAR 0 1
18184: PUSH
18185: LD_INT 22
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 33
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 61
18207: PUSH
18208: EMPTY
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18241
// ComAgressiveMove ( i , 70 , 41 ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_INT 70
18231: PPUSH
18232: LD_INT 41
18234: PPUSH
18235: CALL_OW 114
18239: GO 18221
18241: POP
18242: POP
// repeat wait ( 0 0$1 ) ;
18243: LD_INT 35
18245: PPUSH
18246: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18250: LD_ADDR_VAR 0 1
18254: PUSH
18255: LD_INT 22
18257: PUSH
18258: LD_INT 6
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: PUSH
18273: FOR_IN
18274: IFFALSE 18293
// ComAgressiveMove ( i , 54 , 20 ) ;
18276: LD_VAR 0 1
18280: PPUSH
18281: LD_INT 54
18283: PPUSH
18284: LD_INT 20
18286: PPUSH
18287: CALL_OW 114
18291: GO 18273
18293: POP
18294: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18295: LD_ADDR_VAR 0 1
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 25
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 3
18322: PUSH
18323: LD_INT 54
18325: PUSH
18326: EMPTY
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: PPUSH
18338: CALL_OW 69
18342: PUSH
18343: FOR_IN
18344: IFFALSE 18378
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18346: LD_VAR 0 1
18350: PPUSH
18351: LD_INT 70
18353: PPUSH
18354: LD_INT 41
18356: PPUSH
18357: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18361: LD_VAR 0 1
18365: PPUSH
18366: LD_INT 46
18368: PPUSH
18369: LD_INT 39
18371: PPUSH
18372: CALL_OW 174
// end ;
18376: GO 18343
18378: POP
18379: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18380: LD_ADDR_VAR 0 1
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 21
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 3
18407: PUSH
18408: LD_INT 24
18410: PUSH
18411: LD_INT 500
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 69
18431: PUSH
18432: FOR_IN
18433: IFFALSE 18466
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18435: LD_VAR 0 1
18439: PPUSH
18440: LD_EXP 37
18444: PPUSH
18445: CALL_OW 250
18449: PPUSH
18450: LD_EXP 37
18454: PPUSH
18455: CALL_OW 251
18459: PPUSH
18460: CALL_OW 111
18464: GO 18432
18466: POP
18467: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18468: LD_INT 22
18470: PUSH
18471: LD_INT 6
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 24
18490: PUSH
18491: LD_INT 250
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: PUSH
18508: LD_INT 5
18510: LESS
18511: IFFALSE 18243
// Video ( false ) ;
18513: LD_INT 0
18515: PPUSH
18516: CALL 82901 0 1
// ChangeMissionObjectives ( M1 ) ;
18520: LD_STRING M1
18522: PPUSH
18523: CALL_OW 337
// wait ( 0 0$2 ) ;
18527: LD_INT 70
18529: PPUSH
18530: CALL_OW 67
// SaveForQuickRestart ;
18534: CALL_OW 22
// startCutscene = 0 ;
18538: LD_ADDR_EXP 38
18542: PUSH
18543: LD_INT 0
18545: ST_TO_ADDR
// end ;
18546: PPOPN 1
18548: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18549: LD_EXP 38
18553: IFFALSE 18644
18555: GO 18557
18557: DISABLE
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
// begin enable ;
18562: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18563: LD_ADDR_VAR 0 1
18567: PUSH
18568: LD_INT 22
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 21
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: LD_INT 24
18593: PUSH
18594: LD_INT 700
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ST_TO_ADDR
// for i in tmp do
18615: LD_ADDR_VAR 0 2
18619: PUSH
18620: LD_VAR 0 1
18624: PUSH
18625: FOR_IN
18626: IFFALSE 18642
// SetLives ( i , 700 ) ;
18628: LD_VAR 0 2
18632: PPUSH
18633: LD_INT 700
18635: PPUSH
18636: CALL_OW 234
18640: GO 18625
18642: POP
18643: POP
// end ;
18644: PPOPN 2
18646: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18647: LD_INT 22
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 101
18659: PUSH
18660: LD_INT 6
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: PUSH
18676: LD_INT 0
18678: EQUAL
18679: PUSH
18680: LD_OWVAR 1
18684: PUSH
18685: LD_INT 6300
18687: GREATER
18688: OR
18689: IFFALSE 18938
18691: GO 18693
18693: DISABLE
// begin PrepareSupportFromDelta ;
18694: CALL 3916 0 0
// firstAttack = 1 ;
18698: LD_ADDR_EXP 33
18702: PUSH
18703: LD_INT 1
18705: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18706: LD_EXP 8
18710: PPUSH
18711: CALL_OW 302
18715: IFFALSE 18731
// Say ( Gladstone , D2-Glad-1 ) else
18717: LD_EXP 8
18721: PPUSH
18722: LD_STRING D2-Glad-1
18724: PPUSH
18725: CALL_OW 88
18729: GO 18839
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18731: LD_INT 4
18733: PPUSH
18734: LD_INT 22
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 21
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 25
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 25
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 25
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 25
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 70
18813: PUSH
18814: LD_EXP 15
18818: PUSH
18819: LD_EXP 14
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: DIFF
18828: PPUSH
18829: LD_STRING D2-Sol1-1
18831: PPUSH
18832: LD_STRING D2-FSol1-1
18834: PPUSH
18835: CALL 7358 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18839: LD_EXP 3
18843: PPUSH
18844: CALL_OW 302
18848: PUSH
18849: LD_EXP 12
18853: PUSH
18854: LD_INT 1
18856: EQUAL
18857: AND
18858: IFFALSE 18872
// Say ( Donaldson , D2-Don-1 ) ;
18860: LD_EXP 3
18864: PPUSH
18865: LD_STRING D2-Don-1
18867: PPUSH
18868: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18872: LD_EXP 2
18876: PPUSH
18877: CALL_OW 302
18881: PUSH
18882: LD_EXP 12
18886: PUSH
18887: LD_INT 2
18889: EQUAL
18890: AND
18891: IFFALSE 18905
// Say ( Brown , D2-Brown-1 ) ;
18893: LD_EXP 2
18897: PPUSH
18898: LD_STRING D2-Brown-1
18900: PPUSH
18901: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18905: LD_EXP 13
18909: PPUSH
18910: CALL_OW 302
18914: PUSH
18915: LD_EXP 12
18919: PUSH
18920: LD_INT 3
18922: EQUAL
18923: AND
18924: IFFALSE 18938
// Say ( Houten , D2-VanH-1 ) ;
18926: LD_EXP 13
18930: PPUSH
18931: LD_STRING D2-VanH-1
18933: PPUSH
18934: CALL_OW 88
// end ;
18938: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18939: LD_OWVAR 1
18943: PUSH
18944: LD_INT 6300
18946: GREATER
18947: IFFALSE 20001
18949: GO 18951
18951: DISABLE
18952: LD_INT 0
18954: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18955: LD_STRING 07_time
18957: PPUSH
18958: LD_INT 12600
18960: PPUSH
18961: CALL_OW 30
18965: PUSH
18966: LD_INT 3
18968: DIV
18969: PPUSH
18970: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18974: LD_INT 34
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 321
18984: PUSH
18985: LD_INT 2
18987: EQUAL
18988: IFFALSE 18997
// SetAchievement ( ACH_HEAVYGUN ) ;
18990: LD_STRING ACH_HEAVYGUN
18992: PPUSH
18993: CALL_OW 543
// PrepareMacmillanSquad ;
18997: CALL 4613 0 0
// CenterNowOnUnits ( JMM ) ;
19001: LD_EXP 1
19005: PPUSH
19006: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
19010: LD_EXP 1
19014: PPUSH
19015: LD_STRING D3-JMM-1
19017: PPUSH
19018: CALL_OW 88
// JMMArrive = 1 ;
19022: LD_ADDR_EXP 39
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
19030: LD_EXP 3
19034: PPUSH
19035: CALL_OW 302
19039: PUSH
19040: LD_EXP 12
19044: PUSH
19045: LD_INT 1
19047: EQUAL
19048: AND
19049: IFFALSE 19065
// begin Say ( Donaldson , D3-Don-1 ) ;
19051: LD_EXP 3
19055: PPUSH
19056: LD_STRING D3-Don-1
19058: PPUSH
19059: CALL_OW 88
// end else
19063: GO 19117
// begin if gammaCommander = 1 then
19065: LD_EXP 12
19069: PUSH
19070: LD_INT 1
19072: EQUAL
19073: IFFALSE 19117
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
19075: LD_EXP 11
19079: PPUSH
19080: LD_INT 26
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 72
19094: PPUSH
19095: LD_STRING D3-Sol1-1
19097: PPUSH
19098: LD_STRING D3-Sol1-1
19100: PPUSH
19101: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19105: LD_EXP 1
19109: PPUSH
19110: LD_STRING D3-JMM-2
19112: PPUSH
19113: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
19117: LD_EXP 2
19121: PPUSH
19122: CALL_OW 302
19126: PUSH
19127: LD_EXP 12
19131: PUSH
19132: LD_INT 2
19134: EQUAL
19135: AND
19136: IFFALSE 19152
// begin Say ( Brown , D3-Brown-1 ) ;
19138: LD_EXP 2
19142: PPUSH
19143: LD_STRING D3-Brown-1
19145: PPUSH
19146: CALL_OW 88
// end else
19150: GO 19204
// begin if gammaCommander = 2 then
19152: LD_EXP 12
19156: PUSH
19157: LD_INT 2
19159: EQUAL
19160: IFFALSE 19204
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
19162: LD_EXP 11
19166: PPUSH
19167: LD_INT 26
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 72
19181: PPUSH
19182: LD_STRING D3-Sol1-1a
19184: PPUSH
19185: LD_STRING D3-Sol1-1a
19187: PPUSH
19188: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19192: LD_EXP 1
19196: PPUSH
19197: LD_STRING D3-JMM-2
19199: PPUSH
19200: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19204: LD_EXP 13
19208: PPUSH
19209: CALL_OW 302
19213: PUSH
19214: LD_EXP 12
19218: PUSH
19219: LD_INT 3
19221: EQUAL
19222: AND
19223: IFFALSE 19239
// begin Say ( Houten , D3-VanH-1 ) ;
19225: LD_EXP 13
19229: PPUSH
19230: LD_STRING D3-VanH-1
19232: PPUSH
19233: CALL_OW 88
// end else
19237: GO 19291
// begin if gammaCommander = 3 then
19239: LD_EXP 12
19243: PUSH
19244: LD_INT 3
19246: EQUAL
19247: IFFALSE 19291
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19249: LD_EXP 11
19253: PPUSH
19254: LD_INT 26
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL_OW 72
19268: PPUSH
19269: LD_STRING D3-Sol1-1b
19271: PPUSH
19272: LD_STRING D3-Sol1-1b
19274: PPUSH
19275: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19279: LD_EXP 1
19283: PPUSH
19284: LD_STRING D3-JMM-2
19286: PPUSH
19287: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19291: LD_EXP 15
19295: PPUSH
19296: CALL_OW 302
19300: IFFALSE 19328
// begin Say ( Joan , D3a-Joan-1 ) ;
19302: LD_EXP 15
19306: PPUSH
19307: LD_STRING D3a-Joan-1
19309: PPUSH
19310: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19314: LD_EXP 1
19318: PPUSH
19319: LD_STRING D3a-JMM-1
19321: PPUSH
19322: CALL_OW 88
// end else
19326: GO 19670
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19328: LD_STRING 06_JoanStatus_1
19330: PPUSH
19331: LD_INT 0
19333: PPUSH
19334: CALL_OW 30
19338: PUSH
19339: LD_INT 1
19341: EQUAL
19342: IFFALSE 19670
// begin Say ( JMM , D3b-JMM-1 ) ;
19344: LD_EXP 1
19348: PPUSH
19349: LD_STRING D3b-JMM-1
19351: PPUSH
19352: CALL_OW 88
// if gammaCommander = 1 then
19356: LD_EXP 12
19360: PUSH
19361: LD_INT 1
19363: EQUAL
19364: IFFALSE 19421
// if IsOK ( Donaldson ) then
19366: LD_EXP 3
19370: PPUSH
19371: CALL_OW 302
19375: IFFALSE 19391
// Say ( Donaldson , D3b-Don-1 ) else
19377: LD_EXP 3
19381: PPUSH
19382: LD_STRING D3b-Don-1
19384: PPUSH
19385: CALL_OW 88
19389: GO 19421
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19391: LD_EXP 11
19395: PPUSH
19396: LD_INT 26
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 72
19410: PPUSH
19411: LD_STRING D3b-Sol1-1
19413: PPUSH
19414: LD_STRING D3b-Sol1-1
19416: PPUSH
19417: CALL 7358 0 3
// if gammaCommander = 2 then
19421: LD_EXP 12
19425: PUSH
19426: LD_INT 2
19428: EQUAL
19429: IFFALSE 19486
// if IsOk ( Brown ) then
19431: LD_EXP 2
19435: PPUSH
19436: CALL_OW 302
19440: IFFALSE 19456
// Say ( Brown , D3b-Brown-1 ) else
19442: LD_EXP 2
19446: PPUSH
19447: LD_STRING D3b-Brown-1
19449: PPUSH
19450: CALL_OW 88
19454: GO 19486
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19456: LD_EXP 11
19460: PPUSH
19461: LD_INT 26
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PPUSH
19471: CALL_OW 72
19475: PPUSH
19476: LD_STRING D3b-Sol1-1
19478: PPUSH
19479: LD_STRING D3b-Sol1-1
19481: PPUSH
19482: CALL 7358 0 3
// if gammaCommander = 3 then
19486: LD_EXP 12
19490: PUSH
19491: LD_INT 3
19493: EQUAL
19494: IFFALSE 19551
// if IsOk ( Houten ) then
19496: LD_EXP 13
19500: PPUSH
19501: CALL_OW 302
19505: IFFALSE 19521
// Say ( Houten , D3b-VanH-1 ) else
19507: LD_EXP 13
19511: PPUSH
19512: LD_STRING D3b-VanH-1
19514: PPUSH
19515: CALL_OW 88
19519: GO 19551
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19521: LD_EXP 11
19525: PPUSH
19526: LD_INT 26
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PPUSH
19536: CALL_OW 72
19540: PPUSH
19541: LD_STRING D3b-Sol1-1
19543: PPUSH
19544: LD_STRING D3b-Sol1-1
19546: PPUSH
19547: CALL 7358 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19551: LD_EXP 11
19555: PPUSH
19556: LD_INT 26
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 72
19570: PUSH
19571: LD_EXP 12
19575: PUSH
19576: LD_INT 1
19578: EQUAL
19579: PUSH
19580: LD_EXP 3
19584: PPUSH
19585: CALL_OW 302
19589: AND
19590: OR
19591: PUSH
19592: LD_EXP 12
19596: PUSH
19597: LD_INT 2
19599: EQUAL
19600: PUSH
19601: LD_EXP 2
19605: PPUSH
19606: CALL_OW 302
19610: AND
19611: OR
19612: PUSH
19613: LD_EXP 12
19617: PUSH
19618: LD_INT 3
19620: EQUAL
19621: PUSH
19622: LD_EXP 13
19626: PPUSH
19627: CALL_OW 302
19631: AND
19632: OR
19633: IFFALSE 19647
// Say ( JMM , D3b-JMM-2 ) ;
19635: LD_EXP 1
19639: PPUSH
19640: LD_STRING D3b-JMM-2
19642: PPUSH
19643: CALL_OW 88
// if IsOK ( Lisa ) then
19647: LD_EXP 6
19651: PPUSH
19652: CALL_OW 302
19656: IFFALSE 19670
// Say ( Lisa , D3b-Lisa-2 ) ;
19658: LD_EXP 6
19662: PPUSH
19663: LD_STRING D3b-Lisa-2
19665: PPUSH
19666: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19670: LD_ADDR_VAR 0 1
19674: PUSH
19675: LD_EXP 1
19679: PUSH
19680: LD_EXP 2
19684: PUSH
19685: LD_EXP 3
19689: PUSH
19690: LD_EXP 4
19694: PUSH
19695: LD_EXP 5
19699: PUSH
19700: LD_EXP 6
19704: PUSH
19705: LD_EXP 7
19709: PUSH
19710: LD_EXP 8
19714: PUSH
19715: LD_EXP 9
19719: PUSH
19720: LD_EXP 10
19724: PUSH
19725: LD_EXP 15
19729: PUSH
19730: LD_EXP 14
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: LD_EXP 42
19753: ADD
19754: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19755: LD_INT 22
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 21
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 26
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 25
19790: PUSH
19791: LD_INT 1
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 25
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 25
19810: PUSH
19811: LD_INT 3
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 25
19820: PUSH
19821: LD_INT 4
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: PPUSH
19841: CALL_OW 69
19845: PUSH
19846: LD_VAR 0 1
19850: DIFF
19851: PPUSH
19852: LD_STRING DCa-Sol1-1
19854: PPUSH
19855: LD_STRING DCa-Sol1-1
19857: PPUSH
19858: CALL 7358 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19862: LD_EXP 1
19866: PPUSH
19867: LD_STRING DCb-JMM-1
19869: PPUSH
19870: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19874: LD_INT 22
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 21
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 26
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 25
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 25
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 25
19939: PUSH
19940: LD_INT 4
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: PPUSH
19960: CALL_OW 69
19964: PUSH
19965: LD_VAR 0 1
19969: DIFF
19970: PPUSH
19971: LD_STRING DCb-Sol1-1
19973: PPUSH
19974: LD_STRING DCb-Sol1-1
19976: PPUSH
19977: CALL 7358 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19981: LD_EXP 1
19985: PPUSH
19986: LD_STRING DCb-JMM-2
19988: PPUSH
19989: CALL_OW 88
// secondAttack = 1 ;
19993: LD_ADDR_EXP 34
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// end ;
20001: PPOPN 1
20003: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
20004: LD_EXP 39
20008: PUSH
20009: LD_INT 1
20011: EQUAL
20012: PUSH
20013: LD_OWVAR 1
20017: PUSH
20018: LD_INT 37800
20020: GREATEREQUAL
20021: AND
20022: IFFALSE 20095
20024: GO 20026
20026: DISABLE
// begin DialogueOn ;
20027: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
20031: LD_EXP 23
20035: PPUSH
20036: LD_STRING D4-Pow-1
20038: PPUSH
20039: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
20043: LD_EXP 1
20047: PPUSH
20048: LD_STRING D4-JMM-1
20050: PPUSH
20051: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
20055: LD_EXP 23
20059: PPUSH
20060: LD_STRING D4-Pow-2
20062: PPUSH
20063: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
20067: LD_EXP 1
20071: PPUSH
20072: LD_STRING D4-JMM-2
20074: PPUSH
20075: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
20079: LD_EXP 23
20083: PPUSH
20084: LD_STRING D4-Pow-3
20086: PPUSH
20087: CALL_OW 94
// DialogueOff ;
20091: CALL_OW 7
// end ;
20095: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
20096: LD_EXP 39
20100: PUSH
20101: LD_INT 1
20103: EQUAL
20104: PUSH
20105: LD_OWVAR 1
20109: PUSH
20110: LD_INT 50400
20112: GREATEREQUAL
20113: AND
20114: IFFALSE 20139
20116: GO 20118
20118: DISABLE
// begin DialogueOn ;
20119: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
20123: LD_EXP 23
20127: PPUSH
20128: LD_STRING D4a-Pow-1
20130: PPUSH
20131: CALL_OW 94
// DialogueOff ;
20135: CALL_OW 7
// end ;
20139: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
20140: LD_EXP 39
20144: PUSH
20145: LD_INT 1
20147: EQUAL
20148: PUSH
20149: LD_OWVAR 1
20153: PUSH
20154: LD_INT 73500
20156: GREATEREQUAL
20157: AND
20158: IFFALSE 20179
20160: GO 20162
20162: DISABLE
// begin PrepareSikorsky ;
20163: CALL 5871 0 0
// SikorskyArrive = 1 ;
20167: LD_ADDR_EXP 18
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// PrepareSikorskyArmy ;
20175: CALL 6051 0 0
// end ;
20179: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
20180: LD_EXP 17
20184: PPUSH
20185: LD_INT 5
20187: PPUSH
20188: CALL_OW 308
20192: IFFALSE 20384
20194: GO 20196
20196: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
20197: LD_EXP 17
20201: PPUSH
20202: CALL_OW 87
// DialogueOn ;
20206: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20210: LD_EXP 16
20214: PPUSH
20215: LD_STRING D5-Sik-1
20217: PPUSH
20218: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20222: LD_EXP 1
20226: PPUSH
20227: LD_STRING D5-JMM-1a
20229: PPUSH
20230: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20234: LD_EXP 16
20238: PPUSH
20239: LD_STRING D5-Sik-2
20241: PPUSH
20242: CALL_OW 88
// case query ( QSikorski ) of 1 :
20246: LD_STRING QSikorski
20248: PPUSH
20249: CALL_OW 97
20253: PUSH
20254: LD_INT 1
20256: DOUBLE
20257: EQUAL
20258: IFTRUE 20262
20260: GO 20285
20262: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20263: LD_EXP 16
20267: PPUSH
20268: LD_STRING D5a-Sik-1
20270: PPUSH
20271: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20275: LD_ADDR_EXP 19
20279: PUSH
20280: LD_INT 2100
20282: ST_TO_ADDR
// end ; 2 :
20283: GO 20372
20285: LD_INT 2
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20316
20293: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20294: LD_EXP 16
20298: PPUSH
20299: LD_STRING D5b-Sik-1
20301: PPUSH
20302: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20306: LD_ADDR_EXP 19
20310: PUSH
20311: LD_INT 10500
20313: ST_TO_ADDR
// end ; 3 :
20314: GO 20372
20316: LD_INT 3
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20371
20324: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20325: LD_EXP 16
20329: PPUSH
20330: LD_STRING D5c-Sik-1
20332: PPUSH
20333: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20337: LD_EXP 1
20341: PPUSH
20342: LD_STRING D5c-JMM-1
20344: PPUSH
20345: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20349: LD_EXP 16
20353: PPUSH
20354: LD_STRING D5c-Sik-2
20356: PPUSH
20357: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20361: LD_ADDR_EXP 19
20365: PUSH
20366: LD_INT 10500
20368: ST_TO_ADDR
// end ; end ;
20369: GO 20372
20371: POP
// DialogueOff ;
20372: CALL_OW 7
// timerStatus = 1 ;
20376: LD_ADDR_EXP 35
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// end ;
20384: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20385: LD_EXP 19
20389: PUSH
20390: LD_INT 35
20392: LESS
20393: IFFALSE 20441
20395: GO 20397
20397: DISABLE
// begin timerStatus = 0 ;
20398: LD_ADDR_EXP 35
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// DialogueOn ;
20406: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20410: LD_EXP 16
20414: PPUSH
20415: LD_STRING D6-Sik-1
20417: PPUSH
20418: CALL_OW 88
// DialogueOff ;
20422: CALL_OW 7
// SikorskyAI = 1 ;
20426: LD_ADDR_EXP 20
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20434: LD_STRING M2
20436: PPUSH
20437: CALL_OW 337
// end ;
20441: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20442: LD_EXP 17
20446: PPUSH
20447: LD_INT 18
20449: PPUSH
20450: CALL_OW 308
20454: IFFALSE 20564
20456: GO 20458
20458: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20459: LD_EXP 16
20463: PPUSH
20464: LD_STRING D7-Sik-1
20466: PPUSH
20467: CALL_OW 88
// wait ( 0 0$10 ) ;
20471: LD_INT 350
20473: PPUSH
20474: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20478: LD_EXP 1
20482: PPUSH
20483: LD_INT 24
20485: PPUSH
20486: CALL_OW 308
20490: PUSH
20491: LD_EXP 1
20495: PPUSH
20496: CALL 17107 0 1
20500: PUSH
20501: LD_EXP 1
20505: PPUSH
20506: CALL 17107 0 1
20510: PPUSH
20511: LD_INT 24
20513: PPUSH
20514: CALL_OW 308
20518: AND
20519: OR
20520: IFFALSE 20544
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20522: LD_EXP 16
20526: PPUSH
20527: LD_STRING D7a-Sik-1
20529: PPUSH
20530: CALL_OW 88
// SikorskyStatus = 1 ;
20534: LD_ADDR_EXP 21
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// end else
20542: GO 20564
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20544: LD_EXP 16
20548: PPUSH
20549: LD_STRING D7b-Sik-1
20551: PPUSH
20552: CALL_OW 88
// SikorskyStatus = 2 ;
20556: LD_ADDR_EXP 21
20560: PUSH
20561: LD_INT 2
20563: ST_TO_ADDR
// end ; end ; end_of_file
20564: END
// on BuildingComplete ( building ) do var tmp , un ;
20565: LD_INT 0
20567: PPUSH
20568: PPUSH
// begin if GetSide ( building ) = 3 then
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 255
20578: PUSH
20579: LD_INT 3
20581: EQUAL
20582: IFFALSE 21119
// begin if GetBType ( building ) = b_depot then
20584: LD_VAR 0 1
20588: PPUSH
20589: CALL_OW 266
20593: PUSH
20594: LD_INT 0
20596: EQUAL
20597: IFFALSE 20665
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 274
20608: PPUSH
20609: LD_INT 1
20611: PPUSH
20612: LD_INT 5000
20614: PPUSH
20615: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 274
20628: PPUSH
20629: LD_INT 2
20631: PPUSH
20632: LD_INT 5000
20634: PPUSH
20635: CALL_OW 277
// SetBName ( building , konev ) ;
20639: LD_VAR 0 1
20643: PPUSH
20644: LD_STRING konev
20646: PPUSH
20647: CALL_OW 500
// ruDepot = building ;
20651: LD_ADDR_EXP 28
20655: PUSH
20656: LD_VAR 0 1
20660: ST_TO_ADDR
// BuildRussianBase ;
20661: CALL 7984 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL_OW 266
20674: PUSH
20675: LD_INT 0
20677: EQUAL
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: CALL_OW 266
20688: PUSH
20689: LD_INT 2
20691: EQUAL
20692: OR
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 266
20703: PUSH
20704: LD_INT 4
20706: EQUAL
20707: OR
20708: IFFALSE 20719
// ComUpgrade ( building ) ;
20710: LD_VAR 0 1
20714: PPUSH
20715: CALL_OW 146
// if GetBType ( building ) = b_lab then
20719: LD_VAR 0 1
20723: PPUSH
20724: CALL_OW 266
20728: PUSH
20729: LD_INT 6
20731: EQUAL
20732: IFFALSE 20783
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20734: LD_VAR 0 1
20738: PPUSH
20739: LD_INT 10
20741: PPUSH
20742: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20746: LD_VAR 0 1
20750: PPUSH
20751: LD_INT 12
20753: PPUSH
20754: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20758: LD_INT 3
20760: PPUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: LD_INT 3
20768: PPUSH
20769: CALL 8528 0 3
// ruLab = building ;
20773: LD_ADDR_EXP 29
20777: PUSH
20778: LD_VAR 0 1
20782: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 266
20792: PUSH
20793: LD_INT 32
20795: EQUAL
20796: IFFALSE 20914
// begin uc_side = 3 ;
20798: LD_ADDR_OWVAR 20
20802: PUSH
20803: LD_INT 3
20805: ST_TO_ADDR
// uc_nation = 3 ;
20806: LD_ADDR_OWVAR 21
20810: PUSH
20811: LD_INT 3
20813: ST_TO_ADDR
// hc_gallery =  ;
20814: LD_ADDR_OWVAR 33
20818: PUSH
20819: LD_STRING 
20821: ST_TO_ADDR
// hc_name =  ;
20822: LD_ADDR_OWVAR 26
20826: PUSH
20827: LD_STRING 
20829: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20830: LD_INT 0
20832: PPUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_EXP 25
20840: PPUSH
20841: LD_EXP 26
20845: PPUSH
20846: CALL_OW 12
20850: PPUSH
20851: CALL_OW 380
// un = CreateHuman ;
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: CALL_OW 44
20864: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20865: LD_VAR 0 3
20869: PPUSH
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20879: LD_VAR 0 1
20883: PPUSH
20884: LD_INT 43
20886: PUSH
20887: LD_INT 44
20889: PUSH
20890: LD_INT 46
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PPUSH
20901: LD_INT 3
20903: PPUSH
20904: CALL_OW 12
20908: ARRAY
20909: PPUSH
20910: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20914: LD_VAR 0 1
20918: PPUSH
20919: CALL_OW 266
20923: PUSH
20924: LD_INT 33
20926: EQUAL
20927: IFFALSE 20964
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20929: LD_VAR 0 1
20933: PPUSH
20934: LD_INT 43
20936: PUSH
20937: LD_INT 44
20939: PUSH
20940: LD_INT 46
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: PPUSH
20951: LD_INT 3
20953: PPUSH
20954: CALL_OW 12
20958: ARRAY
20959: PPUSH
20960: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20964: LD_VAR 0 1
20968: PPUSH
20969: CALL_OW 266
20973: PUSH
20974: LD_INT 32
20976: EQUAL
20977: IFFALSE 21014
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20979: LD_VAR 0 1
20983: PPUSH
20984: LD_INT 43
20986: PUSH
20987: LD_INT 44
20989: PUSH
20990: LD_INT 46
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: PPUSH
21001: LD_INT 3
21003: PPUSH
21004: CALL_OW 12
21008: ARRAY
21009: PPUSH
21010: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21014: LD_VAR 0 1
21018: PPUSH
21019: CALL_OW 266
21023: PUSH
21024: LD_INT 24
21026: EQUAL
21027: IFFALSE 21037
// russianAI = 1 ;
21029: LD_ADDR_EXP 27
21033: PUSH
21034: LD_INT 1
21036: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
21037: LD_EXP 31
21041: PUSH
21042: LD_INT 0
21044: GREATER
21045: IFFALSE 21119
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21047: LD_ADDR_EXP 31
21051: PUSH
21052: LD_EXP 31
21056: PPUSH
21057: LD_INT 1
21059: PPUSH
21060: CALL_OW 3
21064: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21065: LD_ADDR_EXP 31
21069: PUSH
21070: LD_EXP 31
21074: PPUSH
21075: LD_INT 1
21077: PPUSH
21078: CALL_OW 3
21082: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21083: LD_ADDR_EXP 31
21087: PUSH
21088: LD_EXP 31
21092: PPUSH
21093: LD_INT 1
21095: PPUSH
21096: CALL_OW 3
21100: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21101: LD_ADDR_EXP 31
21105: PUSH
21106: LD_EXP 31
21110: PPUSH
21111: LD_INT 1
21113: PPUSH
21114: CALL_OW 3
21118: ST_TO_ADDR
// end ; end ; end ;
21119: PPOPN 3
21121: END
// on UpgradeComplete ( building ) do var i ;
21122: LD_INT 0
21124: PPUSH
// begin if GetSide ( building ) = 3 then
21125: LD_VAR 0 1
21129: PPUSH
21130: CALL_OW 255
21134: PUSH
21135: LD_INT 3
21137: EQUAL
21138: IFFALSE 21319
// begin if GetBType ( building ) = b_factory then
21140: LD_VAR 0 1
21144: PPUSH
21145: CALL_OW 266
21149: PUSH
21150: LD_INT 3
21152: EQUAL
21153: IFFALSE 21220
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
21155: LD_ADDR_VAR 0 2
21159: PUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 25
21172: PUSH
21173: LD_INT 3
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: PUSH
21189: FOR_IN
21190: IFFALSE 21208
// ComEnterUnit ( i , building ) ;
21192: LD_VAR 0 2
21196: PPUSH
21197: LD_VAR 0 1
21201: PPUSH
21202: CALL_OW 120
21206: GO 21189
21208: POP
21209: POP
// ruFab = building ;
21210: LD_ADDR_EXP 30
21214: PUSH
21215: LD_VAR 0 1
21219: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21220: LD_VAR 0 1
21224: PPUSH
21225: CALL_OW 266
21229: PUSH
21230: LD_INT 8
21232: EQUAL
21233: IFFALSE 21290
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21235: LD_ADDR_VAR 0 2
21239: PUSH
21240: LD_INT 22
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 25
21252: PUSH
21253: LD_INT 4
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PPUSH
21264: CALL_OW 69
21268: PUSH
21269: FOR_IN
21270: IFFALSE 21288
// ComEnterUnit ( i , building ) ;
21272: LD_VAR 0 2
21276: PPUSH
21277: LD_VAR 0 1
21281: PPUSH
21282: CALL_OW 120
21286: GO 21269
21288: POP
21289: POP
// if GetBType ( building ) = b_warehouse then
21290: LD_VAR 0 1
21294: PPUSH
21295: CALL_OW 266
21299: PUSH
21300: LD_INT 1
21302: EQUAL
21303: IFFALSE 21319
// begin ComEnterUnit ( Borodin , building ) ;
21305: LD_EXP 24
21309: PPUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL_OW 120
// end ; end ; end ;
21319: PPOPN 2
21321: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 247
21331: PUSH
21332: LD_INT 2
21334: EQUAL
21335: PUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 263
21345: PUSH
21346: LD_INT 3
21348: EQUAL
21349: AND
21350: PUSH
21351: LD_EXP 41
21355: PUSH
21356: LD_INT 0
21358: EQUAL
21359: AND
21360: IFFALSE 21478
// begin varEvent1 = 1 ;
21362: LD_ADDR_EXP 41
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21370: LD_VAR 0 1
21374: PPUSH
21375: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21379: LD_INT 22
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 21
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 25
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 25
21414: PUSH
21415: LD_INT 2
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 25
21424: PUSH
21425: LD_INT 3
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 25
21434: PUSH
21435: LD_INT 4
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: PPUSH
21454: CALL_OW 69
21458: PUSH
21459: LD_EXP 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: DIFF
21467: PPUSH
21468: LD_STRING DC-Sol1-1
21470: PPUSH
21471: LD_STRING DC-FSol1-1
21473: PPUSH
21474: CALL 7358 0 3
// end ; end ;
21478: PPOPN 1
21480: END
// on UnitDestroyed ( unit ) do var i ;
21481: LD_INT 0
21483: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL 41608 0 1
// if unit = Joan then
21493: LD_VAR 0 1
21497: PUSH
21498: LD_EXP 15
21502: EQUAL
21503: IFFALSE 21512
// DeleteCharacters ( Joan ) ;
21505: LD_STRING Joan
21507: PPUSH
21508: CALL_OW 40
// if GetSide ( unit ) = 3 then
21512: LD_VAR 0 1
21516: PPUSH
21517: CALL_OW 255
21521: PUSH
21522: LD_INT 3
21524: EQUAL
21525: IFFALSE 22295
// begin if GetType ( unit ) = unit_building then
21527: LD_VAR 0 1
21531: PPUSH
21532: CALL_OW 247
21536: PUSH
21537: LD_INT 3
21539: EQUAL
21540: IFFALSE 22232
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21542: LD_VAR 0 1
21546: PPUSH
21547: CALL_OW 266
21551: PUSH
21552: LD_INT 31
21554: EQUAL
21555: PUSH
21556: LD_VAR 0 1
21560: PPUSH
21561: CALL_OW 266
21565: PUSH
21566: LD_INT 32
21568: EQUAL
21569: OR
21570: PUSH
21571: LD_VAR 0 1
21575: PPUSH
21576: CALL_OW 266
21580: PUSH
21581: LD_INT 36
21583: EQUAL
21584: OR
21585: PUSH
21586: LD_VAR 0 1
21590: PPUSH
21591: CALL_OW 266
21595: PUSH
21596: LD_INT 0
21598: EQUAL
21599: OR
21600: PUSH
21601: LD_VAR 0 1
21605: PPUSH
21606: CALL_OW 266
21610: PUSH
21611: LD_INT 24
21613: EQUAL
21614: OR
21615: PUSH
21616: LD_VAR 0 1
21620: PPUSH
21621: CALL_OW 266
21625: PUSH
21626: LD_INT 17
21628: EQUAL
21629: OR
21630: PUSH
21631: LD_VAR 0 1
21635: PPUSH
21636: CALL_OW 266
21640: PUSH
21641: LD_INT 25
21643: EQUAL
21644: OR
21645: PUSH
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 266
21655: PUSH
21656: LD_INT 19
21658: EQUAL
21659: OR
21660: PUSH
21661: LD_VAR 0 1
21665: PPUSH
21666: CALL_OW 266
21670: PUSH
21671: LD_INT 20
21673: EQUAL
21674: OR
21675: PUSH
21676: LD_VAR 0 1
21680: PPUSH
21681: CALL_OW 266
21685: PUSH
21686: LD_INT 18
21688: EQUAL
21689: OR
21690: PUSH
21691: LD_VAR 0 1
21695: PPUSH
21696: CALL_OW 266
21700: PUSH
21701: LD_INT 21
21703: EQUAL
21704: OR
21705: PUSH
21706: LD_VAR 0 1
21710: PPUSH
21711: CALL_OW 266
21715: PUSH
21716: LD_INT 23
21718: EQUAL
21719: OR
21720: PUSH
21721: LD_VAR 0 1
21725: PPUSH
21726: CALL_OW 266
21730: PUSH
21731: LD_INT 16
21733: EQUAL
21734: OR
21735: PUSH
21736: LD_VAR 0 1
21740: PPUSH
21741: CALL_OW 266
21745: PUSH
21746: LD_INT 6
21748: EQUAL
21749: OR
21750: PUSH
21751: LD_VAR 0 1
21755: PPUSH
21756: CALL_OW 266
21760: PUSH
21761: LD_INT 29
21763: EQUAL
21764: OR
21765: PUSH
21766: LD_VAR 0 1
21770: PPUSH
21771: CALL_OW 266
21775: PUSH
21776: LD_INT 26
21778: EQUAL
21779: OR
21780: PUSH
21781: LD_VAR 0 1
21785: PPUSH
21786: CALL_OW 266
21790: PUSH
21791: LD_INT 30
21793: EQUAL
21794: OR
21795: PUSH
21796: LD_VAR 0 1
21800: PPUSH
21801: CALL_OW 266
21805: PUSH
21806: LD_INT 28
21808: EQUAL
21809: OR
21810: PUSH
21811: LD_VAR 0 1
21815: PPUSH
21816: CALL_OW 266
21820: PUSH
21821: LD_INT 27
21823: EQUAL
21824: OR
21825: PUSH
21826: LD_VAR 0 1
21830: PPUSH
21831: CALL_OW 266
21835: PUSH
21836: LD_INT 33
21838: EQUAL
21839: OR
21840: PUSH
21841: LD_VAR 0 1
21845: PPUSH
21846: CALL_OW 266
21850: PUSH
21851: LD_INT 2
21853: EQUAL
21854: OR
21855: PUSH
21856: LD_VAR 0 1
21860: PPUSH
21861: CALL_OW 266
21865: PUSH
21866: LD_INT 4
21868: EQUAL
21869: OR
21870: IFFALSE 21956
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21872: LD_ADDR_EXP 31
21876: PUSH
21877: LD_EXP 31
21881: PUSH
21882: LD_VAR 0 1
21886: PPUSH
21887: CALL_OW 266
21891: ADD
21892: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21893: LD_ADDR_EXP 31
21897: PUSH
21898: LD_EXP 31
21902: PUSH
21903: LD_VAR 0 1
21907: PPUSH
21908: CALL_OW 250
21912: ADD
21913: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21914: LD_ADDR_EXP 31
21918: PUSH
21919: LD_EXP 31
21923: PUSH
21924: LD_VAR 0 1
21928: PPUSH
21929: CALL_OW 251
21933: ADD
21934: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21935: LD_ADDR_EXP 31
21939: PUSH
21940: LD_EXP 31
21944: PUSH
21945: LD_VAR 0 1
21949: PPUSH
21950: CALL_OW 254
21954: ADD
21955: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL_OW 266
21965: PUSH
21966: LD_INT 1
21968: EQUAL
21969: IFFALSE 22048
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21971: LD_ADDR_EXP 31
21975: PUSH
21976: LD_EXP 31
21980: PUSH
21981: LD_INT 0
21983: ADD
21984: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21985: LD_ADDR_EXP 31
21989: PUSH
21990: LD_EXP 31
21994: PUSH
21995: LD_VAR 0 1
21999: PPUSH
22000: CALL_OW 250
22004: ADD
22005: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22006: LD_ADDR_EXP 31
22010: PUSH
22011: LD_EXP 31
22015: PUSH
22016: LD_VAR 0 1
22020: PPUSH
22021: CALL_OW 251
22025: ADD
22026: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22027: LD_ADDR_EXP 31
22031: PUSH
22032: LD_EXP 31
22036: PUSH
22037: LD_VAR 0 1
22041: PPUSH
22042: CALL_OW 254
22046: ADD
22047: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
22048: LD_VAR 0 1
22052: PPUSH
22053: CALL_OW 266
22057: PUSH
22058: LD_INT 3
22060: EQUAL
22061: IFFALSE 22140
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
22063: LD_ADDR_EXP 31
22067: PUSH
22068: LD_EXP 31
22072: PUSH
22073: LD_INT 2
22075: ADD
22076: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22077: LD_ADDR_EXP 31
22081: PUSH
22082: LD_EXP 31
22086: PUSH
22087: LD_VAR 0 1
22091: PPUSH
22092: CALL_OW 250
22096: ADD
22097: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22098: LD_ADDR_EXP 31
22102: PUSH
22103: LD_EXP 31
22107: PUSH
22108: LD_VAR 0 1
22112: PPUSH
22113: CALL_OW 251
22117: ADD
22118: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22119: LD_ADDR_EXP 31
22123: PUSH
22124: LD_EXP 31
22128: PUSH
22129: LD_VAR 0 1
22133: PPUSH
22134: CALL_OW 254
22138: ADD
22139: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
22140: LD_VAR 0 1
22144: PPUSH
22145: CALL_OW 266
22149: PUSH
22150: LD_INT 5
22152: EQUAL
22153: IFFALSE 22232
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
22155: LD_ADDR_EXP 31
22159: PUSH
22160: LD_EXP 31
22164: PUSH
22165: LD_INT 4
22167: ADD
22168: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22169: LD_ADDR_EXP 31
22173: PUSH
22174: LD_EXP 31
22178: PUSH
22179: LD_VAR 0 1
22183: PPUSH
22184: CALL_OW 250
22188: ADD
22189: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22190: LD_ADDR_EXP 31
22194: PUSH
22195: LD_EXP 31
22199: PUSH
22200: LD_VAR 0 1
22204: PPUSH
22205: CALL_OW 251
22209: ADD
22210: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22211: LD_ADDR_EXP 31
22215: PUSH
22216: LD_EXP 31
22220: PUSH
22221: LD_VAR 0 1
22225: PPUSH
22226: CALL_OW 254
22230: ADD
22231: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 247
22241: PUSH
22242: LD_INT 1
22244: EQUAL
22245: IFFALSE 22295
// begin for i in defenders_list do
22247: LD_ADDR_VAR 0 2
22251: PUSH
22252: LD_EXP 32
22256: PUSH
22257: FOR_IN
22258: IFFALSE 22293
// if i = unit then
22260: LD_VAR 0 2
22264: PUSH
22265: LD_VAR 0 1
22269: EQUAL
22270: IFFALSE 22291
// defenders_list = defenders_list diff [ unit ] ;
22272: LD_ADDR_EXP 32
22276: PUSH
22277: LD_EXP 32
22281: PUSH
22282: LD_VAR 0 1
22286: PUSH
22287: EMPTY
22288: LIST
22289: DIFF
22290: ST_TO_ADDR
22291: GO 22257
22293: POP
22294: POP
// end ; end ; end ;
22295: PPOPN 2
22297: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
22298: LD_VAR 0 1
22302: PPUSH
22303: LD_VAR 0 2
22307: PPUSH
22308: CALL 41730 0 2
// end ;
22312: PPOPN 2
22314: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22315: LD_VAR 0 1
22319: PPUSH
22320: CALL 41714 0 1
// end ; end_of_file
22324: PPOPN 1
22326: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22327: GO 22329
22329: DISABLE
22330: LD_INT 0
22332: PPUSH
// begin enemyWayX = [ ] ;
22333: LD_ADDR_EXP 46
22337: PUSH
22338: EMPTY
22339: ST_TO_ADDR
// enemyWayY = [ ] ;
22340: LD_ADDR_EXP 47
22344: PUSH
22345: EMPTY
22346: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22347: LD_ADDR_VAR 0 1
22351: PUSH
22352: LD_INT 1
22354: PPUSH
22355: LD_INT 3
22357: PPUSH
22358: CALL_OW 12
22362: ST_TO_ADDR
// if rnd = 1 then
22363: LD_VAR 0 1
22367: PUSH
22368: LD_INT 1
22370: EQUAL
22371: IFFALSE 22411
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22373: LD_ADDR_EXP 46
22377: PUSH
22378: LD_INT 73
22380: PUSH
22381: LD_INT 46
22383: PUSH
22384: LD_INT 29
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: LIST
22391: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22392: LD_ADDR_EXP 47
22396: PUSH
22397: LD_INT 71
22399: PUSH
22400: LD_INT 43
22402: PUSH
22403: LD_INT 29
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: LIST
22410: ST_TO_ADDR
// end ; if rnd = 2 then
22411: LD_VAR 0 1
22415: PUSH
22416: LD_INT 2
22418: EQUAL
22419: IFFALSE 22443
// begin enemyWayX = [ 64 ] ;
22421: LD_ADDR_EXP 46
22425: PUSH
22426: LD_INT 64
22428: PUSH
22429: EMPTY
22430: LIST
22431: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22432: LD_ADDR_EXP 47
22436: PUSH
22437: LD_INT 43
22439: PUSH
22440: EMPTY
22441: LIST
22442: ST_TO_ADDR
// end ; if rnd = 3 then
22443: LD_VAR 0 1
22447: PUSH
22448: LD_INT 3
22450: EQUAL
22451: IFFALSE 22475
// begin enemyWayX = [ 80 ] ;
22453: LD_ADDR_EXP 46
22457: PUSH
22458: LD_INT 80
22460: PUSH
22461: EMPTY
22462: LIST
22463: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22464: LD_ADDR_EXP 47
22468: PUSH
22469: LD_INT 28
22471: PUSH
22472: EMPTY
22473: LIST
22474: ST_TO_ADDR
// end ; enable ;
22475: ENABLE
// end ;
22476: PPOPN 1
22478: END
// every 0 0$1 do
22479: GO 22481
22481: DISABLE
// begin enable ;
22482: ENABLE
// if escapeAvalaible = 0 then
22483: LD_EXP 36
22487: PUSH
22488: LD_INT 0
22490: EQUAL
22491: IFFALSE 22503
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22493: LD_INT 3
22495: PPUSH
22496: LD_INT 6
22498: PPUSH
22499: CALL 8769 0 2
// if escapeAvalaible = 0 then
22503: LD_EXP 36
22507: PUSH
22508: LD_INT 0
22510: EQUAL
22511: IFFALSE 22523
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22513: LD_INT 1
22515: PPUSH
22516: LD_INT 24
22518: PPUSH
22519: CALL 9429 0 2
// if russianAI = 1 then
22523: LD_EXP 27
22527: PUSH
22528: LD_INT 1
22530: EQUAL
22531: IFFALSE 22601
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22533: LD_INT 3
22535: PPUSH
22536: LD_INT 7
22538: PPUSH
22539: LD_INT 6
22541: PPUSH
22542: LD_EXP 29
22546: PPUSH
22547: CALL 11871 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22551: LD_INT 3
22553: PPUSH
22554: LD_EXP 28
22558: PPUSH
22559: LD_INT 6
22561: PPUSH
22562: LD_EXP 31
22566: PPUSH
22567: CALL 11465 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22571: LD_INT 3
22573: PPUSH
22574: LD_INT 26
22576: PPUSH
22577: LD_EXP 46
22581: PPUSH
22582: LD_EXP 47
22586: PPUSH
22587: CALL 10329 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22591: LD_INT 3
22593: PPUSH
22594: LD_INT 1
22596: PPUSH
22597: CALL 12415 0 2
// end ; if SikorskyArrive = 1 then
22601: LD_EXP 18
22605: PUSH
22606: LD_INT 1
22608: EQUAL
22609: IFFALSE 22627
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22611: LD_INT 3
22613: PPUSH
22614: LD_INT 10
22616: PPUSH
22617: LD_INT 53
22619: PPUSH
22620: LD_INT 59
22622: PPUSH
22623: CALL 10126 0 4
// end ;
22627: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22628: LD_EXP 27
22632: PUSH
22633: LD_INT 1
22635: EQUAL
22636: IFFALSE 22912
22638: GO 22640
22640: DISABLE
22641: LD_INT 0
22643: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22644: LD_ADDR_VAR 0 1
22648: PUSH
22649: LD_INT 22
22651: PUSH
22652: LD_INT 3
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 21
22661: PUSH
22662: LD_INT 3
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 30
22671: PUSH
22672: LD_INT 32
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 3
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: LD_INT 35
22687: PUSH
22688: LD_INT 43
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 35
22697: PUSH
22698: LD_INT 44
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 35
22707: PUSH
22708: LD_INT 46
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: PPUSH
22731: CALL_OW 69
22735: PUSH
22736: FOR_IN
22737: IFFALSE 22776
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22739: LD_VAR 0 1
22743: PPUSH
22744: LD_INT 43
22746: PUSH
22747: LD_INT 44
22749: PUSH
22750: LD_INT 46
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: PPUSH
22761: LD_INT 3
22763: PPUSH
22764: CALL_OW 12
22768: ARRAY
22769: PPUSH
22770: CALL_OW 431
22774: GO 22736
22776: POP
22777: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22778: LD_ADDR_VAR 0 1
22782: PUSH
22783: LD_INT 22
22785: PUSH
22786: LD_INT 3
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 21
22795: PUSH
22796: LD_INT 3
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 30
22805: PUSH
22806: LD_INT 33
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 3
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: LD_INT 35
22821: PUSH
22822: LD_INT 43
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 35
22831: PUSH
22832: LD_INT 44
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 35
22841: PUSH
22842: LD_INT 46
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: PPUSH
22865: CALL_OW 69
22869: PUSH
22870: FOR_IN
22871: IFFALSE 22910
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22873: LD_VAR 0 1
22877: PPUSH
22878: LD_INT 43
22880: PUSH
22881: LD_INT 44
22883: PUSH
22884: LD_INT 46
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 1
22894: PPUSH
22895: LD_INT 3
22897: PPUSH
22898: CALL_OW 12
22902: ARRAY
22903: PPUSH
22904: CALL_OW 431
22908: GO 22870
22910: POP
22911: POP
// end ;
22912: PPOPN 1
22914: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22915: LD_EXP 24
22919: PPUSH
22920: CALL_OW 310
22924: NOT
22925: PUSH
22926: LD_EXP 28
22930: PPUSH
22931: CALL_OW 302
22935: AND
22936: PUSH
22937: LD_EXP 28
22941: PPUSH
22942: CALL_OW 255
22946: PUSH
22947: LD_INT 3
22949: EQUAL
22950: AND
22951: IFFALSE 22971
22953: GO 22955
22955: DISABLE
// begin enable ;
22956: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22957: LD_EXP 24
22961: PPUSH
22962: LD_EXP 28
22966: PPUSH
22967: CALL_OW 120
// end ;
22971: END
// every 0 0$1 trigger SikorskyAI = 1 do
22972: LD_EXP 20
22976: PUSH
22977: LD_INT 1
22979: EQUAL
22980: IFFALSE 23015
22982: GO 22984
22984: DISABLE
// begin enable ;
22985: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22986: LD_INT 4
22988: PPUSH
22989: LD_INT 10
22991: PPUSH
22992: LD_INT 93
22994: PPUSH
22995: LD_INT 93
22997: PPUSH
22998: CALL 10126 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
23002: LD_INT 4
23004: PPUSH
23005: LD_INT 11
23007: PPUSH
23008: LD_INT 3
23010: PPUSH
23011: CALL 16627 0 3
// end ;
23015: END
// every 0 0$1 trigger SikorskyAI = 1 do
23016: LD_EXP 20
23020: PUSH
23021: LD_INT 1
23023: EQUAL
23024: IFFALSE 23036
23026: GO 23028
23028: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
23029: LD_INT 4
23031: PPUSH
23032: CALL 11137 0 1
23036: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
23037: LD_EXP 27
23041: PUSH
23042: LD_INT 1
23044: EQUAL
23045: PUSH
23046: LD_EXP 30
23050: PPUSH
23051: CALL_OW 302
23055: AND
23056: PUSH
23057: LD_EXP 30
23061: PPUSH
23062: CALL_OW 255
23066: PUSH
23067: LD_INT 3
23069: EQUAL
23070: AND
23071: PUSH
23072: LD_INT 22
23074: PUSH
23075: LD_INT 3
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 21
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 33
23094: PUSH
23095: LD_INT 3
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: LIST
23106: PPUSH
23107: CALL_OW 69
23111: PUSH
23112: LD_INT 0
23114: EQUAL
23115: AND
23116: IFFALSE 23350
23118: GO 23120
23120: DISABLE
// begin enable ;
23121: ENABLE
// if Difficulty = 1 then
23122: LD_OWVAR 67
23126: PUSH
23127: LD_INT 1
23129: EQUAL
23130: IFFALSE 23198
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
23132: LD_INT 3
23134: PPUSH
23135: LD_EXP 30
23139: PPUSH
23140: LD_INT 5
23142: PPUSH
23143: LD_INT 8
23145: PPUSH
23146: CALL_OW 12
23150: PPUSH
23151: LD_INT 43
23153: PUSH
23154: LD_INT 43
23156: PUSH
23157: LD_INT 43
23159: PUSH
23160: LD_INT 43
23162: PUSH
23163: LD_INT 44
23165: PUSH
23166: LD_INT 44
23168: PUSH
23169: LD_INT 44
23171: PUSH
23172: LD_INT 46
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: PPUSH
23185: LD_INT 1
23187: PPUSH
23188: LD_INT 3
23190: PPUSH
23191: LD_INT 24
23193: PPUSH
23194: CALL 9972 0 7
// if Difficulty = 2 then
23198: LD_OWVAR 67
23202: PUSH
23203: LD_INT 2
23205: EQUAL
23206: IFFALSE 23274
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
23208: LD_INT 3
23210: PPUSH
23211: LD_EXP 30
23215: PPUSH
23216: LD_INT 6
23218: PPUSH
23219: LD_INT 8
23221: PPUSH
23222: CALL_OW 12
23226: PPUSH
23227: LD_INT 43
23229: PUSH
23230: LD_INT 43
23232: PUSH
23233: LD_INT 44
23235: PUSH
23236: LD_INT 44
23238: PUSH
23239: LD_INT 44
23241: PUSH
23242: LD_INT 44
23244: PUSH
23245: LD_INT 46
23247: PUSH
23248: LD_INT 46
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: PPUSH
23261: LD_INT 1
23263: PPUSH
23264: LD_INT 3
23266: PPUSH
23267: LD_INT 24
23269: PPUSH
23270: CALL 9972 0 7
// if Difficulty >= 3 then
23274: LD_OWVAR 67
23278: PUSH
23279: LD_INT 3
23281: GREATEREQUAL
23282: IFFALSE 23350
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23284: LD_INT 3
23286: PPUSH
23287: LD_EXP 30
23291: PPUSH
23292: LD_INT 7
23294: PPUSH
23295: LD_INT 8
23297: PPUSH
23298: CALL_OW 12
23302: PPUSH
23303: LD_INT 43
23305: PUSH
23306: LD_INT 43
23308: PUSH
23309: LD_INT 44
23311: PUSH
23312: LD_INT 44
23314: PUSH
23315: LD_INT 44
23317: PUSH
23318: LD_INT 46
23320: PUSH
23321: LD_INT 46
23323: PUSH
23324: LD_INT 46
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: PPUSH
23337: LD_INT 1
23339: PPUSH
23340: LD_INT 3
23342: PPUSH
23343: LD_INT 24
23345: PPUSH
23346: CALL 9972 0 7
// end ;
23350: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23351: LD_EXP 38
23355: PUSH
23356: LD_INT 1
23358: EQUAL
23359: IFFALSE 23441
23361: GO 23363
23363: DISABLE
23364: LD_INT 0
23366: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23367: LD_ADDR_VAR 0 1
23371: PUSH
23372: LD_INT 22
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 21
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 3
23394: PUSH
23395: LD_INT 24
23397: PUSH
23398: LD_INT 650
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: LIST
23413: PPUSH
23414: CALL_OW 69
23418: PUSH
23419: FOR_IN
23420: IFFALSE 23439
// ComMoveXY ( i , 51 , 12 ) ;
23422: LD_VAR 0 1
23426: PPUSH
23427: LD_INT 51
23429: PPUSH
23430: LD_INT 12
23432: PPUSH
23433: CALL_OW 111
23437: GO 23419
23439: POP
23440: POP
// end ; end_of_file
23441: PPOPN 1
23443: END
// every 1 1$00 trigger firstAttack = 1 do
23444: LD_EXP 33
23448: PUSH
23449: LD_INT 1
23451: EQUAL
23452: IFFALSE 23562
23454: GO 23456
23456: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23457: LD_INT 6
23459: PPUSH
23460: LD_INT 3
23462: PPUSH
23463: LD_INT 3
23465: PPUSH
23466: LD_INT 4
23468: PPUSH
23469: CALL_OW 12
23473: PUSH
23474: LD_INT 4
23476: PPUSH
23477: LD_INT 6
23479: PPUSH
23480: CALL_OW 12
23484: PUSH
23485: LD_INT 5
23487: PPUSH
23488: LD_INT 6
23490: PPUSH
23491: CALL_OW 12
23495: PUSH
23496: LD_INT 6
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: PUSH
23505: LD_OWVAR 67
23509: ARRAY
23510: PPUSH
23511: LD_INT 0
23513: PPUSH
23514: LD_INT 0
23516: PPUSH
23517: LD_INT 0
23519: PPUSH
23520: LD_INT 0
23522: PPUSH
23523: LD_EXP 25
23527: PPUSH
23528: LD_EXP 26
23532: PPUSH
23533: CALL_OW 12
23537: PPUSH
23538: LD_INT 16
23540: PPUSH
23541: LD_INT 7
23543: PPUSH
23544: LD_INT 1
23546: PPUSH
23547: LD_INT 1
23549: PPUSH
23550: LD_INT 3
23552: PPUSH
23553: CALL_OW 12
23557: PPUSH
23558: CALL 12645 0 12
23562: END
// every 1 1$10 trigger firstAttack = 1 do
23563: LD_EXP 33
23567: PUSH
23568: LD_INT 1
23570: EQUAL
23571: IFFALSE 23667
23573: GO 23575
23575: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23576: LD_INT 16
23578: PPUSH
23579: LD_INT 6
23581: PPUSH
23582: LD_INT 3
23584: PPUSH
23585: LD_INT 4
23587: PPUSH
23588: CALL_OW 12
23592: PUSH
23593: LD_INT 4
23595: PPUSH
23596: LD_INT 5
23598: PPUSH
23599: CALL_OW 12
23603: PUSH
23604: LD_INT 5
23606: PUSH
23607: LD_INT 6
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: LD_OWVAR 67
23620: ARRAY
23621: PPUSH
23622: LD_EXP 25
23626: PPUSH
23627: LD_EXP 26
23631: PPUSH
23632: CALL_OW 12
23636: PPUSH
23637: LD_INT 3
23639: PPUSH
23640: LD_INT 1
23642: PPUSH
23643: LD_INT 3
23645: PPUSH
23646: LD_INT 44
23648: PUSH
23649: LD_INT 46
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PPUSH
23656: EMPTY
23657: PPUSH
23658: EMPTY
23659: PPUSH
23660: LD_INT 1
23662: PPUSH
23663: CALL 14938 0 11
23667: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23668: LD_EXP 33
23672: PUSH
23673: LD_INT 1
23675: EQUAL
23676: PUSH
23677: LD_EXP 39
23681: PUSH
23682: LD_INT 0
23684: EQUAL
23685: AND
23686: IFFALSE 23796
23688: GO 23690
23690: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23691: LD_INT 6
23693: PPUSH
23694: LD_INT 3
23696: PPUSH
23697: LD_INT 4
23699: PPUSH
23700: LD_INT 5
23702: PPUSH
23703: CALL_OW 12
23707: PUSH
23708: LD_INT 5
23710: PPUSH
23711: LD_INT 6
23713: PPUSH
23714: CALL_OW 12
23718: PUSH
23719: LD_INT 5
23721: PPUSH
23722: LD_INT 6
23724: PPUSH
23725: CALL_OW 12
23729: PUSH
23730: LD_INT 6
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: PUSH
23739: LD_OWVAR 67
23743: ARRAY
23744: PPUSH
23745: LD_INT 0
23747: PPUSH
23748: LD_INT 0
23750: PPUSH
23751: LD_INT 0
23753: PPUSH
23754: LD_INT 0
23756: PPUSH
23757: LD_EXP 25
23761: PPUSH
23762: LD_EXP 26
23766: PPUSH
23767: CALL_OW 12
23771: PPUSH
23772: LD_INT 16
23774: PPUSH
23775: LD_INT 7
23777: PPUSH
23778: LD_INT 1
23780: PPUSH
23781: LD_INT 1
23783: PPUSH
23784: LD_INT 3
23786: PPUSH
23787: CALL_OW 12
23791: PPUSH
23792: CALL 12645 0 12
23796: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23797: LD_EXP 33
23801: PUSH
23802: LD_INT 1
23804: EQUAL
23805: PUSH
23806: LD_EXP 39
23810: PUSH
23811: LD_INT 0
23813: EQUAL
23814: AND
23815: IFFALSE 23915
23817: GO 23819
23819: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23820: LD_INT 16
23822: PPUSH
23823: LD_INT 6
23825: PPUSH
23826: LD_INT 4
23828: PPUSH
23829: LD_INT 5
23831: PPUSH
23832: CALL_OW 12
23836: PUSH
23837: LD_INT 6
23839: PPUSH
23840: LD_INT 7
23842: PPUSH
23843: CALL_OW 12
23847: PUSH
23848: LD_INT 7
23850: PUSH
23851: LD_INT 7
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: PUSH
23860: LD_OWVAR 67
23864: ARRAY
23865: PPUSH
23866: LD_EXP 25
23870: PPUSH
23871: LD_EXP 26
23875: PPUSH
23876: CALL_OW 12
23880: PPUSH
23881: LD_INT 3
23883: PPUSH
23884: LD_INT 1
23886: PPUSH
23887: LD_INT 3
23889: PPUSH
23890: LD_INT 43
23892: PUSH
23893: LD_INT 44
23895: PUSH
23896: LD_INT 46
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: PPUSH
23904: EMPTY
23905: PPUSH
23906: EMPTY
23907: PPUSH
23908: LD_INT 1
23910: PPUSH
23911: CALL 14938 0 11
23915: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23916: LD_EXP 33
23920: PUSH
23921: LD_INT 1
23923: EQUAL
23924: PUSH
23925: LD_EXP 39
23929: PUSH
23930: LD_INT 0
23932: EQUAL
23933: AND
23934: IFFALSE 24034
23936: GO 23938
23938: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23939: LD_INT 16
23941: PPUSH
23942: LD_INT 6
23944: PPUSH
23945: LD_INT 4
23947: PPUSH
23948: LD_INT 5
23950: PPUSH
23951: CALL_OW 12
23955: PUSH
23956: LD_INT 6
23958: PPUSH
23959: LD_INT 7
23961: PPUSH
23962: CALL_OW 12
23966: PUSH
23967: LD_INT 7
23969: PUSH
23970: LD_INT 8
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: PUSH
23979: LD_OWVAR 67
23983: ARRAY
23984: PPUSH
23985: LD_EXP 25
23989: PPUSH
23990: LD_EXP 26
23994: PPUSH
23995: CALL_OW 12
23999: PPUSH
24000: LD_INT 3
24002: PPUSH
24003: LD_INT 1
24005: PPUSH
24006: LD_INT 3
24008: PPUSH
24009: LD_INT 43
24011: PUSH
24012: LD_INT 44
24014: PUSH
24015: LD_INT 46
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: LIST
24022: PPUSH
24023: EMPTY
24024: PPUSH
24025: EMPTY
24026: PPUSH
24027: LD_INT 1
24029: PPUSH
24030: CALL 14938 0 11
24034: END
// every 11 11$00 trigger firstAttack = 1 and JMMArrive = 0 do
24035: LD_EXP 33
24039: PUSH
24040: LD_INT 1
24042: EQUAL
24043: PUSH
24044: LD_EXP 39
24048: PUSH
24049: LD_INT 0
24051: EQUAL
24052: AND
24053: IFFALSE 24133
24055: GO 24057
24057: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24058: LD_INT 16
24060: PPUSH
24061: LD_INT 6
24063: PPUSH
24064: LD_INT 4
24066: PUSH
24067: LD_INT 6
24069: PUSH
24070: LD_INT 7
24072: PUSH
24073: LD_INT 8
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: PUSH
24082: LD_OWVAR 67
24086: ARRAY
24087: PPUSH
24088: LD_EXP 25
24092: PPUSH
24093: LD_EXP 26
24097: PPUSH
24098: CALL_OW 12
24102: PPUSH
24103: LD_INT 3
24105: PPUSH
24106: LD_INT 1
24108: PPUSH
24109: LD_INT 3
24111: PPUSH
24112: LD_INT 44
24114: PUSH
24115: LD_INT 46
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PPUSH
24122: EMPTY
24123: PPUSH
24124: EMPTY
24125: PPUSH
24126: LD_INT 1
24128: PPUSH
24129: CALL 14938 0 11
24133: END
// every 1 1$00 trigger secondAttack = 1 do
24134: LD_EXP 34
24138: PUSH
24139: LD_INT 1
24141: EQUAL
24142: IFFALSE 24228
24144: GO 24146
24146: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24147: LD_INT 6
24149: PPUSH
24150: LD_INT 3
24152: PPUSH
24153: LD_INT 3
24155: PUSH
24156: LD_INT 4
24158: PUSH
24159: LD_INT 5
24161: PUSH
24162: LD_INT 6
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: PUSH
24171: LD_OWVAR 67
24175: ARRAY
24176: PPUSH
24177: LD_INT 0
24179: PPUSH
24180: LD_INT 0
24182: PPUSH
24183: LD_INT 0
24185: PPUSH
24186: LD_INT 0
24188: PPUSH
24189: LD_EXP 25
24193: PPUSH
24194: LD_EXP 26
24198: PPUSH
24199: CALL_OW 12
24203: PPUSH
24204: LD_INT 16
24206: PPUSH
24207: LD_INT 7
24209: PPUSH
24210: LD_INT 1
24212: PPUSH
24213: LD_INT 1
24215: PPUSH
24216: LD_INT 3
24218: PPUSH
24219: CALL_OW 12
24223: PPUSH
24224: CALL 12645 0 12
24228: END
// every 1 1$00 trigger secondAttack = 1 do
24229: LD_EXP 34
24233: PUSH
24234: LD_INT 1
24236: EQUAL
24237: IFFALSE 24345
24239: GO 24241
24241: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
24242: LD_INT 16
24244: PPUSH
24245: LD_INT 6
24247: PPUSH
24248: LD_INT 5
24250: PPUSH
24251: LD_INT 6
24253: PPUSH
24254: CALL_OW 12
24258: PUSH
24259: LD_INT 6
24261: PPUSH
24262: LD_INT 9
24264: PPUSH
24265: CALL_OW 12
24269: PUSH
24270: LD_INT 7
24272: PPUSH
24273: LD_INT 9
24275: PPUSH
24276: CALL_OW 12
24280: PUSH
24281: LD_INT 9
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: PUSH
24290: LD_OWVAR 67
24294: ARRAY
24295: PPUSH
24296: LD_EXP 25
24300: PPUSH
24301: LD_EXP 26
24305: PPUSH
24306: CALL_OW 12
24310: PPUSH
24311: LD_INT 3
24313: PPUSH
24314: LD_INT 1
24316: PPUSH
24317: LD_INT 3
24319: PPUSH
24320: LD_INT 43
24322: PUSH
24323: LD_INT 44
24325: PUSH
24326: LD_INT 46
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: PPUSH
24334: EMPTY
24335: PPUSH
24336: EMPTY
24337: PPUSH
24338: LD_INT 1
24340: PPUSH
24341: CALL 14938 0 11
24345: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24346: LD_EXP 18
24350: PUSH
24351: LD_INT 0
24353: EQUAL
24354: IFFALSE 24436
24356: GO 24358
24358: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24359: LD_INT 6
24361: PPUSH
24362: LD_INT 3
24364: PPUSH
24365: LD_INT 3
24367: PUSH
24368: LD_INT 4
24370: PUSH
24371: LD_INT 5
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: PUSH
24379: LD_OWVAR 67
24383: ARRAY
24384: PPUSH
24385: LD_INT 0
24387: PPUSH
24388: LD_INT 0
24390: PPUSH
24391: LD_INT 0
24393: PPUSH
24394: LD_INT 0
24396: PPUSH
24397: LD_EXP 25
24401: PPUSH
24402: LD_EXP 26
24406: PPUSH
24407: CALL_OW 12
24411: PPUSH
24412: LD_INT 16
24414: PPUSH
24415: LD_INT 7
24417: PPUSH
24418: LD_INT 1
24420: PPUSH
24421: LD_INT 1
24423: PPUSH
24424: LD_INT 3
24426: PPUSH
24427: CALL_OW 12
24431: PPUSH
24432: CALL 12645 0 12
24436: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24437: LD_EXP 18
24441: PUSH
24442: LD_INT 0
24444: EQUAL
24445: IFFALSE 24549
24447: GO 24449
24449: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24450: LD_INT 16
24452: PPUSH
24453: LD_INT 6
24455: PPUSH
24456: LD_INT 5
24458: PPUSH
24459: LD_INT 6
24461: PPUSH
24462: CALL_OW 12
24466: PUSH
24467: LD_INT 6
24469: PPUSH
24470: LD_INT 9
24472: PPUSH
24473: CALL_OW 12
24477: PUSH
24478: LD_INT 7
24480: PPUSH
24481: LD_INT 9
24483: PPUSH
24484: CALL_OW 12
24488: PUSH
24489: LD_INT 9
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: PUSH
24498: LD_OWVAR 67
24502: ARRAY
24503: PPUSH
24504: LD_EXP 25
24508: PPUSH
24509: LD_EXP 26
24513: PPUSH
24514: CALL_OW 12
24518: PPUSH
24519: LD_INT 3
24521: PPUSH
24522: LD_INT 1
24524: PPUSH
24525: LD_INT 3
24527: PPUSH
24528: LD_INT 44
24530: PUSH
24531: LD_INT 46
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PPUSH
24538: EMPTY
24539: PPUSH
24540: EMPTY
24541: PPUSH
24542: LD_INT 1
24544: PPUSH
24545: CALL 14938 0 11
24549: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24550: LD_EXP 18
24554: PUSH
24555: LD_INT 0
24557: EQUAL
24558: IFFALSE 24640
24560: GO 24562
24562: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24563: LD_INT 6
24565: PPUSH
24566: LD_INT 3
24568: PPUSH
24569: LD_INT 3
24571: PUSH
24572: LD_INT 4
24574: PUSH
24575: LD_INT 5
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: LIST
24582: PUSH
24583: LD_OWVAR 67
24587: ARRAY
24588: PPUSH
24589: LD_INT 0
24591: PPUSH
24592: LD_INT 0
24594: PPUSH
24595: LD_INT 0
24597: PPUSH
24598: LD_INT 0
24600: PPUSH
24601: LD_EXP 25
24605: PPUSH
24606: LD_EXP 26
24610: PPUSH
24611: CALL_OW 12
24615: PPUSH
24616: LD_INT 16
24618: PPUSH
24619: LD_INT 7
24621: PPUSH
24622: LD_INT 1
24624: PPUSH
24625: LD_INT 1
24627: PPUSH
24628: LD_INT 3
24630: PPUSH
24631: CALL_OW 12
24635: PPUSH
24636: CALL 12645 0 12
24640: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24641: LD_EXP 18
24645: PUSH
24646: LD_INT 0
24648: EQUAL
24649: IFFALSE 24753
24651: GO 24653
24653: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24654: LD_INT 16
24656: PPUSH
24657: LD_INT 6
24659: PPUSH
24660: LD_INT 5
24662: PPUSH
24663: LD_INT 6
24665: PPUSH
24666: CALL_OW 12
24670: PUSH
24671: LD_INT 6
24673: PPUSH
24674: LD_INT 9
24676: PPUSH
24677: CALL_OW 12
24681: PUSH
24682: LD_INT 7
24684: PPUSH
24685: LD_INT 9
24687: PPUSH
24688: CALL_OW 12
24692: PUSH
24693: LD_INT 9
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: PUSH
24702: LD_OWVAR 67
24706: ARRAY
24707: PPUSH
24708: LD_EXP 25
24712: PPUSH
24713: LD_EXP 26
24717: PPUSH
24718: CALL_OW 12
24722: PPUSH
24723: LD_INT 3
24725: PPUSH
24726: LD_INT 1
24728: PPUSH
24729: LD_INT 3
24731: PPUSH
24732: LD_INT 44
24734: PUSH
24735: LD_INT 46
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PPUSH
24742: EMPTY
24743: PPUSH
24744: EMPTY
24745: PPUSH
24746: LD_INT 1
24748: PPUSH
24749: CALL 14938 0 11
24753: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24754: LD_EXP 18
24758: PUSH
24759: LD_INT 0
24761: EQUAL
24762: IFFALSE 24848
24764: GO 24766
24766: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24767: LD_INT 6
24769: PPUSH
24770: LD_INT 3
24772: PPUSH
24773: LD_INT 3
24775: PUSH
24776: LD_INT 4
24778: PUSH
24779: LD_INT 5
24781: PUSH
24782: LD_INT 6
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: PUSH
24791: LD_OWVAR 67
24795: ARRAY
24796: PPUSH
24797: LD_INT 0
24799: PPUSH
24800: LD_INT 0
24802: PPUSH
24803: LD_INT 0
24805: PPUSH
24806: LD_INT 0
24808: PPUSH
24809: LD_EXP 25
24813: PPUSH
24814: LD_EXP 26
24818: PPUSH
24819: CALL_OW 12
24823: PPUSH
24824: LD_INT 16
24826: PPUSH
24827: LD_INT 7
24829: PPUSH
24830: LD_INT 1
24832: PPUSH
24833: LD_INT 1
24835: PPUSH
24836: LD_INT 3
24838: PPUSH
24839: CALL_OW 12
24843: PPUSH
24844: CALL 12645 0 12
24848: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24849: LD_EXP 18
24853: PUSH
24854: LD_INT 0
24856: EQUAL
24857: IFFALSE 24937
24859: GO 24861
24861: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24862: LD_INT 16
24864: PPUSH
24865: LD_INT 6
24867: PPUSH
24868: LD_INT 7
24870: PUSH
24871: LD_INT 8
24873: PUSH
24874: LD_INT 9
24876: PUSH
24877: LD_INT 10
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: PUSH
24886: LD_OWVAR 67
24890: ARRAY
24891: PPUSH
24892: LD_EXP 25
24896: PPUSH
24897: LD_EXP 26
24901: PPUSH
24902: CALL_OW 12
24906: PPUSH
24907: LD_INT 3
24909: PPUSH
24910: LD_INT 1
24912: PPUSH
24913: LD_INT 3
24915: PPUSH
24916: LD_INT 44
24918: PUSH
24919: LD_INT 46
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PPUSH
24926: EMPTY
24927: PPUSH
24928: EMPTY
24929: PPUSH
24930: LD_INT 1
24932: PPUSH
24933: CALL 14938 0 11
24937: END
// every 0 0$1 trigger timerStatus = 1 do
24938: LD_EXP 35
24942: PUSH
24943: LD_INT 1
24945: EQUAL
24946: IFFALSE 25006
24948: GO 24950
24950: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24951: LD_INT 35
24953: PPUSH
24954: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24958: LD_ADDR_OWVAR 47
24962: PUSH
24963: LD_STRING #Am08-1
24965: PUSH
24966: LD_EXP 19
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24975: LD_ADDR_EXP 19
24979: PUSH
24980: LD_EXP 19
24984: PUSH
24985: LD_INT 35
24987: MINUS
24988: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
24989: LD_EXP 19
24993: PUSH
24994: LD_INT 0
24996: EQUAL
24997: IFFALSE 24951
// display_strings := [ ] ;
24999: LD_ADDR_OWVAR 47
25003: PUSH
25004: EMPTY
25005: ST_TO_ADDR
// end ; end_of_file
25006: END
// every 1 1$0 do
25007: GO 25009
25009: DISABLE
// begin if supply <= 13 and supply > 7 then
25010: LD_EXP 40
25014: PUSH
25015: LD_INT 13
25017: LESSEQUAL
25018: PUSH
25019: LD_EXP 40
25023: PUSH
25024: LD_INT 7
25026: GREATER
25027: AND
25028: IFFALSE 25051
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
25030: LD_INT 3
25032: PPUSH
25033: LD_INT 5
25035: PPUSH
25036: CALL_OW 12
25040: PPUSH
25041: LD_INT 5
25043: PPUSH
25044: LD_INT 1
25046: PPUSH
25047: CALL_OW 55
// if supply <= 7 and supply > 4 then
25051: LD_EXP 40
25055: PUSH
25056: LD_INT 7
25058: LESSEQUAL
25059: PUSH
25060: LD_EXP 40
25064: PUSH
25065: LD_INT 4
25067: GREATER
25068: AND
25069: IFFALSE 25092
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
25071: LD_INT 3
25073: PPUSH
25074: LD_INT 5
25076: PPUSH
25077: CALL_OW 12
25081: PPUSH
25082: LD_INT 20
25084: PPUSH
25085: LD_INT 1
25087: PPUSH
25088: CALL_OW 55
// if supply <= 4 and supply > 0 then
25092: LD_EXP 40
25096: PUSH
25097: LD_INT 4
25099: LESSEQUAL
25100: PUSH
25101: LD_EXP 40
25105: PUSH
25106: LD_INT 0
25108: GREATER
25109: AND
25110: IFFALSE 25133
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
25112: LD_INT 3
25114: PPUSH
25115: LD_INT 5
25117: PPUSH
25118: CALL_OW 12
25122: PPUSH
25123: LD_INT 21
25125: PPUSH
25126: LD_INT 1
25128: PPUSH
25129: CALL_OW 55
// if supply > 0 then
25133: LD_EXP 40
25137: PUSH
25138: LD_INT 0
25140: GREATER
25141: IFFALSE 25158
// begin supply = supply - 1 ;
25143: LD_ADDR_EXP 40
25147: PUSH
25148: LD_EXP 40
25152: PUSH
25153: LD_INT 1
25155: MINUS
25156: ST_TO_ADDR
// enable ;
25157: ENABLE
// end ; end ; end_of_file
25158: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
25159: LD_EXP 39
25163: PUSH
25164: LD_INT 1
25166: EQUAL
25167: PUSH
25168: LD_EXP 1
25172: PPUSH
25173: CALL_OW 301
25177: AND
25178: IFFALSE 25190
25180: GO 25182
25182: DISABLE
// YouLost ( JMM ) ;
25183: LD_STRING JMM
25185: PPUSH
25186: CALL_OW 104
25190: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
25191: LD_EXP 18
25195: PUSH
25196: LD_INT 1
25198: EQUAL
25199: PUSH
25200: LD_EXP 16
25204: PPUSH
25205: CALL_OW 301
25209: AND
25210: IFFALSE 25242
25212: GO 25214
25214: DISABLE
// begin DialogueOn ;
25215: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
25219: LD_EXP 23
25223: PPUSH
25224: LD_STRING D8a-Pow-1
25226: PPUSH
25227: CALL_OW 94
// DialogueOff ;
25231: CALL_OW 7
// YouLost ( Dismissed ) ;
25235: LD_STRING Dismissed
25237: PPUSH
25238: CALL_OW 104
// end ;
25242: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
25243: LD_INT 22
25245: PUSH
25246: LD_INT 1
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 2
25255: PUSH
25256: LD_INT 30
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 30
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PPUSH
25285: CALL_OW 69
25289: PUSH
25290: LD_INT 0
25292: EQUAL
25293: IFFALSE 25305
25295: GO 25297
25297: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25298: LD_STRING Destroyed
25300: PPUSH
25301: CALL_OW 104
25305: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25306: LD_EXP 24
25310: PPUSH
25311: CALL_OW 301
25315: PUSH
25316: LD_INT 22
25318: PUSH
25319: LD_INT 3
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 21
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PPUSH
25340: CALL_OW 69
25344: PUSH
25345: LD_INT 7
25347: PUSH
25348: LD_INT 6
25350: PUSH
25351: LD_INT 5
25353: PUSH
25354: LD_INT 5
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: PUSH
25363: LD_OWVAR 67
25367: ARRAY
25368: LESS
25369: AND
25370: PUSH
25371: LD_EXP 1
25375: PPUSH
25376: CALL_OW 305
25380: AND
25381: IFFALSE 25937
25383: GO 25385
25385: DISABLE
25386: LD_INT 0
25388: PPUSH
25389: PPUSH
25390: PPUSH
// begin russianAI = 0 ;
25391: LD_ADDR_EXP 27
25395: PUSH
25396: LD_INT 0
25398: ST_TO_ADDR
// escapeAvalaible = 1 ;
25399: LD_ADDR_EXP 36
25403: PUSH
25404: LD_INT 1
25406: ST_TO_ADDR
// Video ( true ) ;
25407: LD_INT 1
25409: PPUSH
25410: CALL 82901 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25414: LD_INT 3
25416: PPUSH
25417: LD_INT 1
25419: PPUSH
25420: LD_INT 1
25422: PPUSH
25423: LD_INT 0
25425: PPUSH
25426: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25430: LD_INT 6
25432: PPUSH
25433: LD_INT 1
25435: PPUSH
25436: LD_INT 1
25438: PPUSH
25439: LD_INT 0
25441: PPUSH
25442: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25446: LD_INT 3
25448: PPUSH
25449: LD_INT 1
25451: PPUSH
25452: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25456: LD_INT 97
25458: PPUSH
25459: LD_INT 91
25461: PPUSH
25462: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25466: LD_INT 22
25468: PUSH
25469: LD_INT 3
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 21
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PPUSH
25490: CALL_OW 69
25494: PPUSH
25495: CALL_OW 121
// wait ( 0 0$01 ) ;
25499: LD_INT 35
25501: PPUSH
25502: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25506: LD_INT 22
25508: PUSH
25509: LD_INT 3
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 21
25518: PUSH
25519: LD_INT 1
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PPUSH
25530: CALL_OW 69
25534: PPUSH
25535: LD_INT 124
25537: PPUSH
25538: LD_INT 98
25540: PPUSH
25541: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25545: LD_INT 22
25547: PUSH
25548: LD_INT 6
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 21
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PPUSH
25569: CALL_OW 69
25573: PPUSH
25574: CALL_OW 121
// wait ( 0 0$01 ) ;
25578: LD_INT 35
25580: PPUSH
25581: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25585: LD_INT 22
25587: PUSH
25588: LD_INT 6
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 21
25597: PUSH
25598: LD_INT 1
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PPUSH
25609: CALL_OW 69
25613: PPUSH
25614: LD_INT 124
25616: PPUSH
25617: LD_INT 98
25619: PPUSH
25620: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25624: LD_INT 22
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 21
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: LD_INT 54
25649: PUSH
25650: EMPTY
25651: LIST
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: PPUSH
25662: CALL_OW 69
25666: PPUSH
25667: LD_INT 124
25669: PPUSH
25670: LD_INT 98
25672: PPUSH
25673: CALL_OW 114
// wait ( 0 0$4 ) ;
25677: LD_INT 140
25679: PPUSH
25680: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25684: LD_INT 124
25686: PPUSH
25687: LD_INT 98
25689: PPUSH
25690: CALL_OW 84
// if SikorskyStatus = 1 then
25694: LD_EXP 21
25698: PUSH
25699: LD_INT 1
25701: EQUAL
25702: IFFALSE 25716
// Say ( Sikorski , D9-Sik-1 ) ;
25704: LD_EXP 16
25708: PPUSH
25709: LD_STRING D9-Sik-1
25711: PPUSH
25712: CALL_OW 88
// if SikorskyStatus = 2 then
25716: LD_EXP 21
25720: PUSH
25721: LD_INT 2
25723: EQUAL
25724: IFFALSE 25745
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25726: LD_EXP 23
25730: PPUSH
25731: LD_STRING D8b-Pow-1
25733: PPUSH
25734: CALL_OW 94
// YouLost ( Dismissed ) ;
25738: LD_STRING Dismissed
25740: PPUSH
25741: CALL_OW 104
// end ; p := 0 0$0 ;
25745: LD_ADDR_VAR 0 3
25749: PUSH
25750: LD_INT 0
25752: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25753: LD_ADDR_VAR 0 2
25757: PUSH
25758: LD_INT 2
25760: PUSH
25761: LD_INT 22
25763: PUSH
25764: LD_INT 3
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 22
25773: PUSH
25774: LD_INT 6
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 21
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PPUSH
25800: CALL_OW 69
25804: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25805: LD_INT 35
25807: PPUSH
25808: CALL_OW 67
// p := p + 0 0$1 ;
25812: LD_ADDR_VAR 0 3
25816: PUSH
25817: LD_VAR 0 3
25821: PUSH
25822: LD_INT 35
25824: PLUS
25825: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25826: LD_VAR 0 2
25830: PPUSH
25831: LD_INT 22
25833: PPUSH
25834: CALL_OW 113
// for i in tmp do
25838: LD_ADDR_VAR 0 1
25842: PUSH
25843: LD_VAR 0 2
25847: PUSH
25848: FOR_IN
25849: IFFALSE 25876
// if IsInArea ( i , RussianEscape ) then
25851: LD_VAR 0 1
25855: PPUSH
25856: LD_INT 22
25858: PPUSH
25859: CALL_OW 308
25863: IFFALSE 25874
// RemoveUnit ( i ) ;
25865: LD_VAR 0 1
25869: PPUSH
25870: CALL_OW 64
25874: GO 25848
25876: POP
25877: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25878: LD_INT 23
25880: PUSH
25881: LD_INT 3
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 21
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 24
25900: PUSH
25901: LD_INT 250
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: PPUSH
25913: CALL_OW 69
25917: PUSH
25918: LD_INT 0
25920: EQUAL
25921: PUSH
25922: LD_VAR 0 3
25926: PUSH
25927: LD_INT 245
25929: GREATEREQUAL
25930: OR
25931: IFFALSE 25805
// FinishMission ;
25933: CALL 25940 0 0
// end ;
25937: PPOPN 3
25939: END
// export function FinishMission ; var tmp ; begin
25940: LD_INT 0
25942: PPUSH
25943: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25944: LD_INT 22
25946: PUSH
25947: LD_INT 4
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PPUSH
25954: CALL_OW 69
25958: PUSH
25959: LD_INT 0
25961: EQUAL
25962: IFFALSE 25971
// SetAchievement ( ACH_BLITZKRIEG ) ;
25964: LD_STRING ACH_BLITZKRIEG
25966: PPUSH
25967: CALL_OW 543
// if tick <= 25 25$00 then
25971: LD_OWVAR 1
25975: PUSH
25976: LD_INT 52500
25978: LESSEQUAL
25979: IFFALSE 25995
// begin wait ( 3 ) ;
25981: LD_INT 3
25983: PPUSH
25984: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
25988: LD_STRING ACH_ASPEED_8
25990: PPUSH
25991: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
25995: LD_STRING med1
25997: PPUSH
25998: LD_INT 1
26000: PPUSH
26001: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
26005: LD_STRING med2
26007: PPUSH
26008: LD_INT 1
26010: PPUSH
26011: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
26015: LD_STRING perfect
26017: PPUSH
26018: LD_INT 1
26020: PPUSH
26021: CALL_OW 101
// if Difficulty >= 3 then
26025: LD_OWVAR 67
26029: PUSH
26030: LD_INT 3
26032: GREATEREQUAL
26033: IFFALSE 26045
// SetAchievementEX ( ACH_AMER , 8 ) ;
26035: LD_STRING ACH_AMER
26037: PPUSH
26038: LD_INT 8
26040: PPUSH
26041: CALL_OW 564
// GiveMedals ( Main ) ;
26045: LD_STRING Main
26047: PPUSH
26048: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
26052: LD_INT 22
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 23
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 21
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 25
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 25
26097: PUSH
26098: LD_INT 2
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 25
26107: PUSH
26108: LD_INT 3
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 25
26117: PUSH
26118: LD_INT 4
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: PPUSH
26138: CALL_OW 69
26142: PPUSH
26143: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26147: LD_EXP 1
26151: PPUSH
26152: LD_EXP 43
26156: PUSH
26157: LD_STRING JMM
26159: STR
26160: PPUSH
26161: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26165: LD_EXP 2
26169: PPUSH
26170: LD_EXP 43
26174: PUSH
26175: LD_STRING Brown
26177: STR
26178: PPUSH
26179: CALL 8488 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26183: LD_EXP 3
26187: PPUSH
26188: LD_EXP 43
26192: PUSH
26193: LD_STRING Donaldson
26195: STR
26196: PPUSH
26197: CALL 8488 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26201: LD_EXP 4
26205: PPUSH
26206: LD_EXP 43
26210: PUSH
26211: LD_STRING Bobby
26213: STR
26214: PPUSH
26215: CALL 8488 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26219: LD_EXP 5
26223: PPUSH
26224: LD_EXP 43
26228: PUSH
26229: LD_STRING Cyrus
26231: STR
26232: PPUSH
26233: CALL 8488 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26237: LD_EXP 6
26241: PPUSH
26242: LD_EXP 43
26246: PUSH
26247: LD_STRING Lisa
26249: STR
26250: PPUSH
26251: CALL 8488 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26255: LD_EXP 7
26259: PPUSH
26260: LD_EXP 43
26264: PUSH
26265: LD_STRING Frank
26267: STR
26268: PPUSH
26269: CALL 8488 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26273: LD_EXP 8
26277: PPUSH
26278: LD_EXP 43
26282: PUSH
26283: LD_STRING Gladstone
26285: STR
26286: PPUSH
26287: CALL 8488 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26291: LD_EXP 9
26295: PPUSH
26296: LD_EXP 43
26300: PUSH
26301: LD_STRING Kikuchi
26303: STR
26304: PPUSH
26305: CALL 8488 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26309: LD_EXP 14
26313: PPUSH
26314: LD_EXP 43
26318: PUSH
26319: LD_STRING Denis
26321: STR
26322: PPUSH
26323: CALL 8488 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26327: LD_EXP 15
26331: PPUSH
26332: LD_EXP 43
26336: PUSH
26337: LD_STRING Joan
26339: STR
26340: PPUSH
26341: CALL 8488 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26345: LD_EXP 10
26349: PPUSH
26350: LD_EXP 43
26354: PUSH
26355: LD_STRING Khatam
26357: STR
26358: PPUSH
26359: CALL 8488 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26363: LD_EXP 13
26367: PPUSH
26368: LD_EXP 43
26372: PUSH
26373: LD_STRING Houten
26375: STR
26376: PPUSH
26377: CALL 8488 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26381: LD_INT 50
26383: PUSH
26384: EMPTY
26385: LIST
26386: PUSH
26387: LD_INT 22
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 21
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: LD_INT 25
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 25
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 25
26432: PUSH
26433: LD_INT 3
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 25
26442: PUSH
26443: LD_INT 4
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 69
26467: PUSH
26468: LD_EXP 1
26472: PUSH
26473: LD_EXP 2
26477: PUSH
26478: LD_EXP 3
26482: PUSH
26483: LD_EXP 4
26487: PUSH
26488: LD_EXP 5
26492: PUSH
26493: LD_EXP 6
26497: PUSH
26498: LD_EXP 7
26502: PUSH
26503: LD_EXP 8
26507: PUSH
26508: LD_EXP 9
26512: PUSH
26513: LD_EXP 14
26517: PUSH
26518: LD_EXP 15
26522: PUSH
26523: LD_EXP 13
26527: PUSH
26528: LD_EXP 10
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: DIFF
26548: PPUSH
26549: LD_STRING 08_other_survivors
26551: PPUSH
26552: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26556: LD_INT 23
26558: PPUSH
26559: CALL 26572 0 1
// YouWin ;
26563: CALL_OW 103
// end ;
26567: LD_VAR 0 1
26571: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26572: LD_INT 0
26574: PPUSH
26575: PPUSH
26576: PPUSH
26577: PPUSH
// gammaBase = [ ] ;
26578: LD_ADDR_VAR 0 4
26582: PUSH
26583: EMPTY
26584: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26585: LD_ADDR_VAR 0 5
26589: PUSH
26590: LD_VAR 0 1
26594: PPUSH
26595: LD_INT 22
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 21
26607: PUSH
26608: LD_INT 3
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 50
26617: PUSH
26618: EMPTY
26619: LIST
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: LIST
26625: PPUSH
26626: CALL_OW 70
26630: ST_TO_ADDR
// for i in buildings do
26631: LD_ADDR_VAR 0 3
26635: PUSH
26636: LD_VAR 0 5
26640: PUSH
26641: FOR_IN
26642: IFFALSE 27079
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26644: LD_VAR 0 3
26648: PPUSH
26649: CALL_OW 266
26653: PUSH
26654: LD_INT 6
26656: PUSH
26657: LD_INT 7
26659: PUSH
26660: LD_INT 8
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: LIST
26667: IN
26668: IFFALSE 26782
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26670: LD_ADDR_VAR 0 4
26674: PUSH
26675: LD_VAR 0 4
26679: PUSH
26680: LD_VAR 0 3
26684: PPUSH
26685: CALL_OW 266
26689: PUSH
26690: LD_VAR 0 3
26694: PPUSH
26695: CALL_OW 250
26699: PUSH
26700: LD_VAR 0 3
26704: PPUSH
26705: CALL_OW 251
26709: PUSH
26710: LD_VAR 0 3
26714: PPUSH
26715: CALL_OW 254
26719: PUSH
26720: LD_VAR 0 3
26724: PPUSH
26725: CALL_OW 267
26729: PUSH
26730: LD_VAR 0 3
26734: PPUSH
26735: CALL_OW 248
26739: PUSH
26740: LD_VAR 0 3
26744: PPUSH
26745: LD_INT 1
26747: PPUSH
26748: CALL_OW 268
26752: PUSH
26753: LD_VAR 0 3
26757: PPUSH
26758: LD_INT 2
26760: PPUSH
26761: CALL_OW 268
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: PUSH
26776: EMPTY
26777: LIST
26778: ADD
26779: ST_TO_ADDR
26780: GO 27077
// if GetBType ( i ) = b_bunker then
26782: LD_VAR 0 3
26786: PPUSH
26787: CALL_OW 266
26791: PUSH
26792: LD_INT 32
26794: EQUAL
26795: IFFALSE 26892
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26797: LD_ADDR_VAR 0 4
26801: PUSH
26802: LD_VAR 0 4
26806: PUSH
26807: LD_VAR 0 3
26811: PPUSH
26812: CALL_OW 266
26816: PUSH
26817: LD_VAR 0 3
26821: PPUSH
26822: CALL_OW 250
26826: PUSH
26827: LD_VAR 0 3
26831: PPUSH
26832: CALL_OW 251
26836: PUSH
26837: LD_VAR 0 3
26841: PPUSH
26842: CALL_OW 254
26846: PUSH
26847: LD_VAR 0 3
26851: PPUSH
26852: CALL_OW 267
26856: PUSH
26857: LD_VAR 0 3
26861: PPUSH
26862: CALL_OW 248
26866: PUSH
26867: LD_VAR 0 3
26871: PPUSH
26872: CALL_OW 269
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: PUSH
26886: EMPTY
26887: LIST
26888: ADD
26889: ST_TO_ADDR
26890: GO 27077
// if GetBType ( i ) = b_factory then
26892: LD_VAR 0 3
26896: PPUSH
26897: CALL_OW 266
26901: PUSH
26902: LD_INT 3
26904: EQUAL
26905: IFFALSE 26995
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26907: LD_ADDR_VAR 0 4
26911: PUSH
26912: LD_VAR 0 4
26916: PPUSH
26917: LD_INT 1
26919: PPUSH
26920: LD_VAR 0 3
26924: PPUSH
26925: CALL_OW 266
26929: PUSH
26930: LD_VAR 0 3
26934: PPUSH
26935: CALL_OW 250
26939: PUSH
26940: LD_VAR 0 3
26944: PPUSH
26945: CALL_OW 251
26949: PUSH
26950: LD_VAR 0 3
26954: PPUSH
26955: CALL_OW 254
26959: PUSH
26960: LD_VAR 0 3
26964: PPUSH
26965: CALL_OW 267
26969: PUSH
26970: LD_VAR 0 3
26974: PPUSH
26975: CALL_OW 248
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: PPUSH
26988: CALL_OW 2
26992: ST_TO_ADDR
26993: GO 27077
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26995: LD_ADDR_VAR 0 4
26999: PUSH
27000: LD_VAR 0 4
27004: PUSH
27005: LD_VAR 0 3
27009: PPUSH
27010: CALL_OW 266
27014: PUSH
27015: LD_VAR 0 3
27019: PPUSH
27020: CALL_OW 250
27024: PUSH
27025: LD_VAR 0 3
27029: PPUSH
27030: CALL_OW 251
27034: PUSH
27035: LD_VAR 0 3
27039: PPUSH
27040: CALL_OW 254
27044: PUSH
27045: LD_VAR 0 3
27049: PPUSH
27050: CALL_OW 267
27054: PUSH
27055: LD_VAR 0 3
27059: PPUSH
27060: CALL_OW 248
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: PUSH
27073: EMPTY
27074: LIST
27075: ADD
27076: ST_TO_ADDR
// end ;
27077: GO 26641
27079: POP
27080: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
27081: LD_VAR 0 4
27085: PPUSH
27086: LD_STRING 08_GammaBase
27088: PPUSH
27089: CALL_OW 39
// end ; end_of_file
27093: LD_VAR 0 2
27097: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27098: LD_INT 0
27100: PPUSH
// ar_miner := 81 ;
27101: LD_ADDR_EXP 55
27105: PUSH
27106: LD_INT 81
27108: ST_TO_ADDR
// ar_crane := 88 ;
27109: LD_ADDR_EXP 54
27113: PUSH
27114: LD_INT 88
27116: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27117: LD_ADDR_EXP 49
27121: PUSH
27122: LD_INT 89
27124: ST_TO_ADDR
// us_hack := 99 ;
27125: LD_ADDR_EXP 50
27129: PUSH
27130: LD_INT 99
27132: ST_TO_ADDR
// us_artillery := 97 ;
27133: LD_ADDR_EXP 51
27137: PUSH
27138: LD_INT 97
27140: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27141: LD_ADDR_EXP 52
27145: PUSH
27146: LD_INT 91
27148: ST_TO_ADDR
// ar_mortar := 92 ;
27149: LD_ADDR_EXP 53
27153: PUSH
27154: LD_INT 92
27156: ST_TO_ADDR
// ru_flamethrower := 93 ;
27157: LD_ADDR_EXP 56
27161: PUSH
27162: LD_INT 93
27164: ST_TO_ADDR
// ru_radar := 98 ;
27165: LD_ADDR_EXP 48
27169: PUSH
27170: LD_INT 98
27172: ST_TO_ADDR
// tech_Artillery := 80 ;
27173: LD_ADDR_EXP 57
27177: PUSH
27178: LD_INT 80
27180: ST_TO_ADDR
// tech_RadMat := 81 ;
27181: LD_ADDR_EXP 58
27185: PUSH
27186: LD_INT 81
27188: ST_TO_ADDR
// tech_BasicTools := 82 ;
27189: LD_ADDR_EXP 59
27193: PUSH
27194: LD_INT 82
27196: ST_TO_ADDR
// tech_Cargo := 83 ;
27197: LD_ADDR_EXP 60
27201: PUSH
27202: LD_INT 83
27204: ST_TO_ADDR
// tech_Track := 84 ;
27205: LD_ADDR_EXP 61
27209: PUSH
27210: LD_INT 84
27212: ST_TO_ADDR
// tech_Crane := 85 ;
27213: LD_ADDR_EXP 62
27217: PUSH
27218: LD_INT 85
27220: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27221: LD_ADDR_EXP 63
27225: PUSH
27226: LD_INT 86
27228: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27229: LD_ADDR_EXP 64
27233: PUSH
27234: LD_INT 87
27236: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27237: LD_ADDR_EXP 65
27241: PUSH
27242: LD_INT 88
27244: ST_TO_ADDR
// class_mastodont := 31 ;
27245: LD_ADDR_EXP 66
27249: PUSH
27250: LD_INT 31
27252: ST_TO_ADDR
// class_horse := 21 ;
27253: LD_ADDR_EXP 67
27257: PUSH
27258: LD_INT 21
27260: ST_TO_ADDR
// end ;
27261: LD_VAR 0 1
27265: RET
// every 1 do
27266: GO 27268
27268: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
27269: CALL 27098 0 0
27273: END
// every 0 0$1 do
27274: GO 27276
27276: DISABLE
// begin enable ;
27277: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
27278: LD_STRING updateTimer(
27280: PUSH
27281: LD_OWVAR 1
27285: STR
27286: PUSH
27287: LD_STRING );
27289: STR
27290: PPUSH
27291: CALL_OW 559
// end ;
27295: END
// export function SOS_MapStart ( ) ; begin
27296: LD_INT 0
27298: PPUSH
// if streamModeActive then
27299: LD_EXP 68
27303: IFFALSE 27312
// DefineStreamItems ( true ) ;
27305: LD_INT 1
27307: PPUSH
27308: CALL 28962 0 1
// UpdateFactoryWaypoints ( ) ;
27312: CALL 42546 0 0
// end ;
27316: LD_VAR 0 1
27320: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27321: LD_INT 0
27323: PPUSH
// if p2 = 100 then
27324: LD_VAR 0 2
27328: PUSH
27329: LD_INT 100
27331: EQUAL
27332: IFFALSE 28335
// begin if not StreamModeActive then
27334: LD_EXP 68
27338: NOT
27339: IFFALSE 27349
// StreamModeActive := true ;
27341: LD_ADDR_EXP 68
27345: PUSH
27346: LD_INT 1
27348: ST_TO_ADDR
// if p3 = 0 then
27349: LD_VAR 0 3
27353: PUSH
27354: LD_INT 0
27356: EQUAL
27357: IFFALSE 27363
// InitStreamMode ;
27359: CALL 28498 0 0
// if p3 = 1 then
27363: LD_VAR 0 3
27367: PUSH
27368: LD_INT 1
27370: EQUAL
27371: IFFALSE 27381
// sRocket := true ;
27373: LD_ADDR_EXP 73
27377: PUSH
27378: LD_INT 1
27380: ST_TO_ADDR
// if p3 = 2 then
27381: LD_VAR 0 3
27385: PUSH
27386: LD_INT 2
27388: EQUAL
27389: IFFALSE 27399
// sSpeed := true ;
27391: LD_ADDR_EXP 72
27395: PUSH
27396: LD_INT 1
27398: ST_TO_ADDR
// if p3 = 3 then
27399: LD_VAR 0 3
27403: PUSH
27404: LD_INT 3
27406: EQUAL
27407: IFFALSE 27417
// sEngine := true ;
27409: LD_ADDR_EXP 74
27413: PUSH
27414: LD_INT 1
27416: ST_TO_ADDR
// if p3 = 4 then
27417: LD_VAR 0 3
27421: PUSH
27422: LD_INT 4
27424: EQUAL
27425: IFFALSE 27435
// sSpec := true ;
27427: LD_ADDR_EXP 71
27431: PUSH
27432: LD_INT 1
27434: ST_TO_ADDR
// if p3 = 5 then
27435: LD_VAR 0 3
27439: PUSH
27440: LD_INT 5
27442: EQUAL
27443: IFFALSE 27453
// sLevel := true ;
27445: LD_ADDR_EXP 75
27449: PUSH
27450: LD_INT 1
27452: ST_TO_ADDR
// if p3 = 6 then
27453: LD_VAR 0 3
27457: PUSH
27458: LD_INT 6
27460: EQUAL
27461: IFFALSE 27471
// sArmoury := true ;
27463: LD_ADDR_EXP 76
27467: PUSH
27468: LD_INT 1
27470: ST_TO_ADDR
// if p3 = 7 then
27471: LD_VAR 0 3
27475: PUSH
27476: LD_INT 7
27478: EQUAL
27479: IFFALSE 27489
// sRadar := true ;
27481: LD_ADDR_EXP 77
27485: PUSH
27486: LD_INT 1
27488: ST_TO_ADDR
// if p3 = 8 then
27489: LD_VAR 0 3
27493: PUSH
27494: LD_INT 8
27496: EQUAL
27497: IFFALSE 27507
// sBunker := true ;
27499: LD_ADDR_EXP 78
27503: PUSH
27504: LD_INT 1
27506: ST_TO_ADDR
// if p3 = 9 then
27507: LD_VAR 0 3
27511: PUSH
27512: LD_INT 9
27514: EQUAL
27515: IFFALSE 27525
// sHack := true ;
27517: LD_ADDR_EXP 79
27521: PUSH
27522: LD_INT 1
27524: ST_TO_ADDR
// if p3 = 10 then
27525: LD_VAR 0 3
27529: PUSH
27530: LD_INT 10
27532: EQUAL
27533: IFFALSE 27543
// sFire := true ;
27535: LD_ADDR_EXP 80
27539: PUSH
27540: LD_INT 1
27542: ST_TO_ADDR
// if p3 = 11 then
27543: LD_VAR 0 3
27547: PUSH
27548: LD_INT 11
27550: EQUAL
27551: IFFALSE 27561
// sRefresh := true ;
27553: LD_ADDR_EXP 81
27557: PUSH
27558: LD_INT 1
27560: ST_TO_ADDR
// if p3 = 12 then
27561: LD_VAR 0 3
27565: PUSH
27566: LD_INT 12
27568: EQUAL
27569: IFFALSE 27579
// sExp := true ;
27571: LD_ADDR_EXP 82
27575: PUSH
27576: LD_INT 1
27578: ST_TO_ADDR
// if p3 = 13 then
27579: LD_VAR 0 3
27583: PUSH
27584: LD_INT 13
27586: EQUAL
27587: IFFALSE 27597
// sDepot := true ;
27589: LD_ADDR_EXP 83
27593: PUSH
27594: LD_INT 1
27596: ST_TO_ADDR
// if p3 = 14 then
27597: LD_VAR 0 3
27601: PUSH
27602: LD_INT 14
27604: EQUAL
27605: IFFALSE 27615
// sFlag := true ;
27607: LD_ADDR_EXP 84
27611: PUSH
27612: LD_INT 1
27614: ST_TO_ADDR
// if p3 = 15 then
27615: LD_VAR 0 3
27619: PUSH
27620: LD_INT 15
27622: EQUAL
27623: IFFALSE 27633
// sKamikadze := true ;
27625: LD_ADDR_EXP 92
27629: PUSH
27630: LD_INT 1
27632: ST_TO_ADDR
// if p3 = 16 then
27633: LD_VAR 0 3
27637: PUSH
27638: LD_INT 16
27640: EQUAL
27641: IFFALSE 27651
// sTroll := true ;
27643: LD_ADDR_EXP 93
27647: PUSH
27648: LD_INT 1
27650: ST_TO_ADDR
// if p3 = 17 then
27651: LD_VAR 0 3
27655: PUSH
27656: LD_INT 17
27658: EQUAL
27659: IFFALSE 27669
// sSlow := true ;
27661: LD_ADDR_EXP 94
27665: PUSH
27666: LD_INT 1
27668: ST_TO_ADDR
// if p3 = 18 then
27669: LD_VAR 0 3
27673: PUSH
27674: LD_INT 18
27676: EQUAL
27677: IFFALSE 27687
// sLack := true ;
27679: LD_ADDR_EXP 95
27683: PUSH
27684: LD_INT 1
27686: ST_TO_ADDR
// if p3 = 19 then
27687: LD_VAR 0 3
27691: PUSH
27692: LD_INT 19
27694: EQUAL
27695: IFFALSE 27705
// sTank := true ;
27697: LD_ADDR_EXP 97
27701: PUSH
27702: LD_INT 1
27704: ST_TO_ADDR
// if p3 = 20 then
27705: LD_VAR 0 3
27709: PUSH
27710: LD_INT 20
27712: EQUAL
27713: IFFALSE 27723
// sRemote := true ;
27715: LD_ADDR_EXP 98
27719: PUSH
27720: LD_INT 1
27722: ST_TO_ADDR
// if p3 = 21 then
27723: LD_VAR 0 3
27727: PUSH
27728: LD_INT 21
27730: EQUAL
27731: IFFALSE 27741
// sPowell := true ;
27733: LD_ADDR_EXP 99
27737: PUSH
27738: LD_INT 1
27740: ST_TO_ADDR
// if p3 = 22 then
27741: LD_VAR 0 3
27745: PUSH
27746: LD_INT 22
27748: EQUAL
27749: IFFALSE 27759
// sTeleport := true ;
27751: LD_ADDR_EXP 102
27755: PUSH
27756: LD_INT 1
27758: ST_TO_ADDR
// if p3 = 23 then
27759: LD_VAR 0 3
27763: PUSH
27764: LD_INT 23
27766: EQUAL
27767: IFFALSE 27777
// sOilTower := true ;
27769: LD_ADDR_EXP 104
27773: PUSH
27774: LD_INT 1
27776: ST_TO_ADDR
// if p3 = 24 then
27777: LD_VAR 0 3
27781: PUSH
27782: LD_INT 24
27784: EQUAL
27785: IFFALSE 27795
// sShovel := true ;
27787: LD_ADDR_EXP 105
27791: PUSH
27792: LD_INT 1
27794: ST_TO_ADDR
// if p3 = 25 then
27795: LD_VAR 0 3
27799: PUSH
27800: LD_INT 25
27802: EQUAL
27803: IFFALSE 27813
// sSheik := true ;
27805: LD_ADDR_EXP 106
27809: PUSH
27810: LD_INT 1
27812: ST_TO_ADDR
// if p3 = 26 then
27813: LD_VAR 0 3
27817: PUSH
27818: LD_INT 26
27820: EQUAL
27821: IFFALSE 27831
// sEarthquake := true ;
27823: LD_ADDR_EXP 108
27827: PUSH
27828: LD_INT 1
27830: ST_TO_ADDR
// if p3 = 27 then
27831: LD_VAR 0 3
27835: PUSH
27836: LD_INT 27
27838: EQUAL
27839: IFFALSE 27849
// sAI := true ;
27841: LD_ADDR_EXP 109
27845: PUSH
27846: LD_INT 1
27848: ST_TO_ADDR
// if p3 = 28 then
27849: LD_VAR 0 3
27853: PUSH
27854: LD_INT 28
27856: EQUAL
27857: IFFALSE 27867
// sCargo := true ;
27859: LD_ADDR_EXP 112
27863: PUSH
27864: LD_INT 1
27866: ST_TO_ADDR
// if p3 = 29 then
27867: LD_VAR 0 3
27871: PUSH
27872: LD_INT 29
27874: EQUAL
27875: IFFALSE 27885
// sDLaser := true ;
27877: LD_ADDR_EXP 113
27881: PUSH
27882: LD_INT 1
27884: ST_TO_ADDR
// if p3 = 30 then
27885: LD_VAR 0 3
27889: PUSH
27890: LD_INT 30
27892: EQUAL
27893: IFFALSE 27903
// sExchange := true ;
27895: LD_ADDR_EXP 114
27899: PUSH
27900: LD_INT 1
27902: ST_TO_ADDR
// if p3 = 31 then
27903: LD_VAR 0 3
27907: PUSH
27908: LD_INT 31
27910: EQUAL
27911: IFFALSE 27921
// sFac := true ;
27913: LD_ADDR_EXP 115
27917: PUSH
27918: LD_INT 1
27920: ST_TO_ADDR
// if p3 = 32 then
27921: LD_VAR 0 3
27925: PUSH
27926: LD_INT 32
27928: EQUAL
27929: IFFALSE 27939
// sPower := true ;
27931: LD_ADDR_EXP 116
27935: PUSH
27936: LD_INT 1
27938: ST_TO_ADDR
// if p3 = 33 then
27939: LD_VAR 0 3
27943: PUSH
27944: LD_INT 33
27946: EQUAL
27947: IFFALSE 27957
// sRandom := true ;
27949: LD_ADDR_EXP 117
27953: PUSH
27954: LD_INT 1
27956: ST_TO_ADDR
// if p3 = 34 then
27957: LD_VAR 0 3
27961: PUSH
27962: LD_INT 34
27964: EQUAL
27965: IFFALSE 27975
// sShield := true ;
27967: LD_ADDR_EXP 118
27971: PUSH
27972: LD_INT 1
27974: ST_TO_ADDR
// if p3 = 35 then
27975: LD_VAR 0 3
27979: PUSH
27980: LD_INT 35
27982: EQUAL
27983: IFFALSE 27993
// sTime := true ;
27985: LD_ADDR_EXP 119
27989: PUSH
27990: LD_INT 1
27992: ST_TO_ADDR
// if p3 = 36 then
27993: LD_VAR 0 3
27997: PUSH
27998: LD_INT 36
28000: EQUAL
28001: IFFALSE 28011
// sTools := true ;
28003: LD_ADDR_EXP 120
28007: PUSH
28008: LD_INT 1
28010: ST_TO_ADDR
// if p3 = 101 then
28011: LD_VAR 0 3
28015: PUSH
28016: LD_INT 101
28018: EQUAL
28019: IFFALSE 28029
// sSold := true ;
28021: LD_ADDR_EXP 85
28025: PUSH
28026: LD_INT 1
28028: ST_TO_ADDR
// if p3 = 102 then
28029: LD_VAR 0 3
28033: PUSH
28034: LD_INT 102
28036: EQUAL
28037: IFFALSE 28047
// sDiff := true ;
28039: LD_ADDR_EXP 86
28043: PUSH
28044: LD_INT 1
28046: ST_TO_ADDR
// if p3 = 103 then
28047: LD_VAR 0 3
28051: PUSH
28052: LD_INT 103
28054: EQUAL
28055: IFFALSE 28065
// sFog := true ;
28057: LD_ADDR_EXP 89
28061: PUSH
28062: LD_INT 1
28064: ST_TO_ADDR
// if p3 = 104 then
28065: LD_VAR 0 3
28069: PUSH
28070: LD_INT 104
28072: EQUAL
28073: IFFALSE 28083
// sReset := true ;
28075: LD_ADDR_EXP 90
28079: PUSH
28080: LD_INT 1
28082: ST_TO_ADDR
// if p3 = 105 then
28083: LD_VAR 0 3
28087: PUSH
28088: LD_INT 105
28090: EQUAL
28091: IFFALSE 28101
// sSun := true ;
28093: LD_ADDR_EXP 91
28097: PUSH
28098: LD_INT 1
28100: ST_TO_ADDR
// if p3 = 106 then
28101: LD_VAR 0 3
28105: PUSH
28106: LD_INT 106
28108: EQUAL
28109: IFFALSE 28119
// sTiger := true ;
28111: LD_ADDR_EXP 87
28115: PUSH
28116: LD_INT 1
28118: ST_TO_ADDR
// if p3 = 107 then
28119: LD_VAR 0 3
28123: PUSH
28124: LD_INT 107
28126: EQUAL
28127: IFFALSE 28137
// sBomb := true ;
28129: LD_ADDR_EXP 88
28133: PUSH
28134: LD_INT 1
28136: ST_TO_ADDR
// if p3 = 108 then
28137: LD_VAR 0 3
28141: PUSH
28142: LD_INT 108
28144: EQUAL
28145: IFFALSE 28155
// sWound := true ;
28147: LD_ADDR_EXP 96
28151: PUSH
28152: LD_INT 1
28154: ST_TO_ADDR
// if p3 = 109 then
28155: LD_VAR 0 3
28159: PUSH
28160: LD_INT 109
28162: EQUAL
28163: IFFALSE 28173
// sBetray := true ;
28165: LD_ADDR_EXP 100
28169: PUSH
28170: LD_INT 1
28172: ST_TO_ADDR
// if p3 = 110 then
28173: LD_VAR 0 3
28177: PUSH
28178: LD_INT 110
28180: EQUAL
28181: IFFALSE 28191
// sContamin := true ;
28183: LD_ADDR_EXP 101
28187: PUSH
28188: LD_INT 1
28190: ST_TO_ADDR
// if p3 = 111 then
28191: LD_VAR 0 3
28195: PUSH
28196: LD_INT 111
28198: EQUAL
28199: IFFALSE 28209
// sOil := true ;
28201: LD_ADDR_EXP 103
28205: PUSH
28206: LD_INT 1
28208: ST_TO_ADDR
// if p3 = 112 then
28209: LD_VAR 0 3
28213: PUSH
28214: LD_INT 112
28216: EQUAL
28217: IFFALSE 28227
// sStu := true ;
28219: LD_ADDR_EXP 107
28223: PUSH
28224: LD_INT 1
28226: ST_TO_ADDR
// if p3 = 113 then
28227: LD_VAR 0 3
28231: PUSH
28232: LD_INT 113
28234: EQUAL
28235: IFFALSE 28245
// sBazooka := true ;
28237: LD_ADDR_EXP 110
28241: PUSH
28242: LD_INT 1
28244: ST_TO_ADDR
// if p3 = 114 then
28245: LD_VAR 0 3
28249: PUSH
28250: LD_INT 114
28252: EQUAL
28253: IFFALSE 28263
// sMortar := true ;
28255: LD_ADDR_EXP 111
28259: PUSH
28260: LD_INT 1
28262: ST_TO_ADDR
// if p3 = 115 then
28263: LD_VAR 0 3
28267: PUSH
28268: LD_INT 115
28270: EQUAL
28271: IFFALSE 28281
// sRanger := true ;
28273: LD_ADDR_EXP 121
28277: PUSH
28278: LD_INT 1
28280: ST_TO_ADDR
// if p3 = 116 then
28281: LD_VAR 0 3
28285: PUSH
28286: LD_INT 116
28288: EQUAL
28289: IFFALSE 28299
// sComputer := true ;
28291: LD_ADDR_EXP 122
28295: PUSH
28296: LD_INT 1
28298: ST_TO_ADDR
// if p3 = 117 then
28299: LD_VAR 0 3
28303: PUSH
28304: LD_INT 117
28306: EQUAL
28307: IFFALSE 28317
// s30 := true ;
28309: LD_ADDR_EXP 123
28313: PUSH
28314: LD_INT 1
28316: ST_TO_ADDR
// if p3 = 118 then
28317: LD_VAR 0 3
28321: PUSH
28322: LD_INT 118
28324: EQUAL
28325: IFFALSE 28335
// s60 := true ;
28327: LD_ADDR_EXP 124
28331: PUSH
28332: LD_INT 1
28334: ST_TO_ADDR
// end ; if p2 = 101 then
28335: LD_VAR 0 2
28339: PUSH
28340: LD_INT 101
28342: EQUAL
28343: IFFALSE 28471
// begin case p3 of 1 :
28345: LD_VAR 0 3
28349: PUSH
28350: LD_INT 1
28352: DOUBLE
28353: EQUAL
28354: IFTRUE 28358
28356: GO 28365
28358: POP
// hHackUnlimitedResources ; 2 :
28359: CALL 40569 0 0
28363: GO 28471
28365: LD_INT 2
28367: DOUBLE
28368: EQUAL
28369: IFTRUE 28373
28371: GO 28380
28373: POP
// hHackSetLevel10 ; 3 :
28374: CALL 40702 0 0
28378: GO 28471
28380: LD_INT 3
28382: DOUBLE
28383: EQUAL
28384: IFTRUE 28388
28386: GO 28395
28388: POP
// hHackSetLevel10YourUnits ; 4 :
28389: CALL 40787 0 0
28393: GO 28471
28395: LD_INT 4
28397: DOUBLE
28398: EQUAL
28399: IFTRUE 28403
28401: GO 28410
28403: POP
// hHackInvincible ; 5 :
28404: CALL 41235 0 0
28408: GO 28471
28410: LD_INT 5
28412: DOUBLE
28413: EQUAL
28414: IFTRUE 28418
28416: GO 28425
28418: POP
// hHackInvisible ; 6 :
28419: CALL 41346 0 0
28423: GO 28471
28425: LD_INT 6
28427: DOUBLE
28428: EQUAL
28429: IFTRUE 28433
28431: GO 28440
28433: POP
// hHackChangeYourSide ; 7 :
28434: CALL 41403 0 0
28438: GO 28471
28440: LD_INT 7
28442: DOUBLE
28443: EQUAL
28444: IFTRUE 28448
28446: GO 28455
28448: POP
// hHackChangeUnitSide ; 8 :
28449: CALL 41445 0 0
28453: GO 28471
28455: LD_INT 8
28457: DOUBLE
28458: EQUAL
28459: IFTRUE 28463
28461: GO 28470
28463: POP
// hHackFog ; end ;
28464: CALL 41546 0 0
28468: GO 28471
28470: POP
// end ; end ;
28471: LD_VAR 0 7
28475: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
28476: GO 28478
28478: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28479: LD_STRING initStreamRollete();
28481: PPUSH
28482: CALL_OW 559
// InitStreamMode ;
28486: CALL 28498 0 0
// DefineStreamItems ( false ) ;
28490: LD_INT 0
28492: PPUSH
28493: CALL 28962 0 1
// end ;
28497: END
// function InitStreamMode ; begin
28498: LD_INT 0
28500: PPUSH
// streamModeActive := false ;
28501: LD_ADDR_EXP 68
28505: PUSH
28506: LD_INT 0
28508: ST_TO_ADDR
// normalCounter := 36 ;
28509: LD_ADDR_EXP 69
28513: PUSH
28514: LD_INT 36
28516: ST_TO_ADDR
// hardcoreCounter := 18 ;
28517: LD_ADDR_EXP 70
28521: PUSH
28522: LD_INT 18
28524: ST_TO_ADDR
// sRocket := false ;
28525: LD_ADDR_EXP 73
28529: PUSH
28530: LD_INT 0
28532: ST_TO_ADDR
// sSpeed := false ;
28533: LD_ADDR_EXP 72
28537: PUSH
28538: LD_INT 0
28540: ST_TO_ADDR
// sEngine := false ;
28541: LD_ADDR_EXP 74
28545: PUSH
28546: LD_INT 0
28548: ST_TO_ADDR
// sSpec := false ;
28549: LD_ADDR_EXP 71
28553: PUSH
28554: LD_INT 0
28556: ST_TO_ADDR
// sLevel := false ;
28557: LD_ADDR_EXP 75
28561: PUSH
28562: LD_INT 0
28564: ST_TO_ADDR
// sArmoury := false ;
28565: LD_ADDR_EXP 76
28569: PUSH
28570: LD_INT 0
28572: ST_TO_ADDR
// sRadar := false ;
28573: LD_ADDR_EXP 77
28577: PUSH
28578: LD_INT 0
28580: ST_TO_ADDR
// sBunker := false ;
28581: LD_ADDR_EXP 78
28585: PUSH
28586: LD_INT 0
28588: ST_TO_ADDR
// sHack := false ;
28589: LD_ADDR_EXP 79
28593: PUSH
28594: LD_INT 0
28596: ST_TO_ADDR
// sFire := false ;
28597: LD_ADDR_EXP 80
28601: PUSH
28602: LD_INT 0
28604: ST_TO_ADDR
// sRefresh := false ;
28605: LD_ADDR_EXP 81
28609: PUSH
28610: LD_INT 0
28612: ST_TO_ADDR
// sExp := false ;
28613: LD_ADDR_EXP 82
28617: PUSH
28618: LD_INT 0
28620: ST_TO_ADDR
// sDepot := false ;
28621: LD_ADDR_EXP 83
28625: PUSH
28626: LD_INT 0
28628: ST_TO_ADDR
// sFlag := false ;
28629: LD_ADDR_EXP 84
28633: PUSH
28634: LD_INT 0
28636: ST_TO_ADDR
// sKamikadze := false ;
28637: LD_ADDR_EXP 92
28641: PUSH
28642: LD_INT 0
28644: ST_TO_ADDR
// sTroll := false ;
28645: LD_ADDR_EXP 93
28649: PUSH
28650: LD_INT 0
28652: ST_TO_ADDR
// sSlow := false ;
28653: LD_ADDR_EXP 94
28657: PUSH
28658: LD_INT 0
28660: ST_TO_ADDR
// sLack := false ;
28661: LD_ADDR_EXP 95
28665: PUSH
28666: LD_INT 0
28668: ST_TO_ADDR
// sTank := false ;
28669: LD_ADDR_EXP 97
28673: PUSH
28674: LD_INT 0
28676: ST_TO_ADDR
// sRemote := false ;
28677: LD_ADDR_EXP 98
28681: PUSH
28682: LD_INT 0
28684: ST_TO_ADDR
// sPowell := false ;
28685: LD_ADDR_EXP 99
28689: PUSH
28690: LD_INT 0
28692: ST_TO_ADDR
// sTeleport := false ;
28693: LD_ADDR_EXP 102
28697: PUSH
28698: LD_INT 0
28700: ST_TO_ADDR
// sOilTower := false ;
28701: LD_ADDR_EXP 104
28705: PUSH
28706: LD_INT 0
28708: ST_TO_ADDR
// sShovel := false ;
28709: LD_ADDR_EXP 105
28713: PUSH
28714: LD_INT 0
28716: ST_TO_ADDR
// sSheik := false ;
28717: LD_ADDR_EXP 106
28721: PUSH
28722: LD_INT 0
28724: ST_TO_ADDR
// sEarthquake := false ;
28725: LD_ADDR_EXP 108
28729: PUSH
28730: LD_INT 0
28732: ST_TO_ADDR
// sAI := false ;
28733: LD_ADDR_EXP 109
28737: PUSH
28738: LD_INT 0
28740: ST_TO_ADDR
// sCargo := false ;
28741: LD_ADDR_EXP 112
28745: PUSH
28746: LD_INT 0
28748: ST_TO_ADDR
// sDLaser := false ;
28749: LD_ADDR_EXP 113
28753: PUSH
28754: LD_INT 0
28756: ST_TO_ADDR
// sExchange := false ;
28757: LD_ADDR_EXP 114
28761: PUSH
28762: LD_INT 0
28764: ST_TO_ADDR
// sFac := false ;
28765: LD_ADDR_EXP 115
28769: PUSH
28770: LD_INT 0
28772: ST_TO_ADDR
// sPower := false ;
28773: LD_ADDR_EXP 116
28777: PUSH
28778: LD_INT 0
28780: ST_TO_ADDR
// sRandom := false ;
28781: LD_ADDR_EXP 117
28785: PUSH
28786: LD_INT 0
28788: ST_TO_ADDR
// sShield := false ;
28789: LD_ADDR_EXP 118
28793: PUSH
28794: LD_INT 0
28796: ST_TO_ADDR
// sTime := false ;
28797: LD_ADDR_EXP 119
28801: PUSH
28802: LD_INT 0
28804: ST_TO_ADDR
// sTools := false ;
28805: LD_ADDR_EXP 120
28809: PUSH
28810: LD_INT 0
28812: ST_TO_ADDR
// sSold := false ;
28813: LD_ADDR_EXP 85
28817: PUSH
28818: LD_INT 0
28820: ST_TO_ADDR
// sDiff := false ;
28821: LD_ADDR_EXP 86
28825: PUSH
28826: LD_INT 0
28828: ST_TO_ADDR
// sFog := false ;
28829: LD_ADDR_EXP 89
28833: PUSH
28834: LD_INT 0
28836: ST_TO_ADDR
// sReset := false ;
28837: LD_ADDR_EXP 90
28841: PUSH
28842: LD_INT 0
28844: ST_TO_ADDR
// sSun := false ;
28845: LD_ADDR_EXP 91
28849: PUSH
28850: LD_INT 0
28852: ST_TO_ADDR
// sTiger := false ;
28853: LD_ADDR_EXP 87
28857: PUSH
28858: LD_INT 0
28860: ST_TO_ADDR
// sBomb := false ;
28861: LD_ADDR_EXP 88
28865: PUSH
28866: LD_INT 0
28868: ST_TO_ADDR
// sWound := false ;
28869: LD_ADDR_EXP 96
28873: PUSH
28874: LD_INT 0
28876: ST_TO_ADDR
// sBetray := false ;
28877: LD_ADDR_EXP 100
28881: PUSH
28882: LD_INT 0
28884: ST_TO_ADDR
// sContamin := false ;
28885: LD_ADDR_EXP 101
28889: PUSH
28890: LD_INT 0
28892: ST_TO_ADDR
// sOil := false ;
28893: LD_ADDR_EXP 103
28897: PUSH
28898: LD_INT 0
28900: ST_TO_ADDR
// sStu := false ;
28901: LD_ADDR_EXP 107
28905: PUSH
28906: LD_INT 0
28908: ST_TO_ADDR
// sBazooka := false ;
28909: LD_ADDR_EXP 110
28913: PUSH
28914: LD_INT 0
28916: ST_TO_ADDR
// sMortar := false ;
28917: LD_ADDR_EXP 111
28921: PUSH
28922: LD_INT 0
28924: ST_TO_ADDR
// sRanger := false ;
28925: LD_ADDR_EXP 121
28929: PUSH
28930: LD_INT 0
28932: ST_TO_ADDR
// sComputer := false ;
28933: LD_ADDR_EXP 122
28937: PUSH
28938: LD_INT 0
28940: ST_TO_ADDR
// s30 := false ;
28941: LD_ADDR_EXP 123
28945: PUSH
28946: LD_INT 0
28948: ST_TO_ADDR
// s60 := false ;
28949: LD_ADDR_EXP 124
28953: PUSH
28954: LD_INT 0
28956: ST_TO_ADDR
// end ;
28957: LD_VAR 0 1
28961: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
28962: LD_INT 0
28964: PPUSH
28965: PPUSH
28966: PPUSH
28967: PPUSH
28968: PPUSH
28969: PPUSH
28970: PPUSH
// result := [ ] ;
28971: LD_ADDR_VAR 0 2
28975: PUSH
28976: EMPTY
28977: ST_TO_ADDR
// if campaign_id = 1 then
28978: LD_OWVAR 69
28982: PUSH
28983: LD_INT 1
28985: EQUAL
28986: IFFALSE 32152
// begin case mission_number of 1 :
28988: LD_OWVAR 70
28992: PUSH
28993: LD_INT 1
28995: DOUBLE
28996: EQUAL
28997: IFTRUE 29001
28999: GO 29077
29001: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
29002: LD_ADDR_VAR 0 2
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: LD_INT 4
29012: PUSH
29013: LD_INT 11
29015: PUSH
29016: LD_INT 12
29018: PUSH
29019: LD_INT 15
29021: PUSH
29022: LD_INT 16
29024: PUSH
29025: LD_INT 22
29027: PUSH
29028: LD_INT 23
29030: PUSH
29031: LD_INT 26
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 101
29047: PUSH
29048: LD_INT 102
29050: PUSH
29051: LD_INT 106
29053: PUSH
29054: LD_INT 116
29056: PUSH
29057: LD_INT 117
29059: PUSH
29060: LD_INT 118
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: ST_TO_ADDR
29075: GO 32150
29077: LD_INT 2
29079: DOUBLE
29080: EQUAL
29081: IFTRUE 29085
29083: GO 29169
29085: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
29086: LD_ADDR_VAR 0 2
29090: PUSH
29091: LD_INT 2
29093: PUSH
29094: LD_INT 4
29096: PUSH
29097: LD_INT 11
29099: PUSH
29100: LD_INT 12
29102: PUSH
29103: LD_INT 15
29105: PUSH
29106: LD_INT 16
29108: PUSH
29109: LD_INT 22
29111: PUSH
29112: LD_INT 23
29114: PUSH
29115: LD_INT 26
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 101
29131: PUSH
29132: LD_INT 102
29134: PUSH
29135: LD_INT 105
29137: PUSH
29138: LD_INT 106
29140: PUSH
29141: LD_INT 108
29143: PUSH
29144: LD_INT 116
29146: PUSH
29147: LD_INT 117
29149: PUSH
29150: LD_INT 118
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: ST_TO_ADDR
29167: GO 32150
29169: LD_INT 3
29171: DOUBLE
29172: EQUAL
29173: IFTRUE 29177
29175: GO 29265
29177: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
29178: LD_ADDR_VAR 0 2
29182: PUSH
29183: LD_INT 2
29185: PUSH
29186: LD_INT 4
29188: PUSH
29189: LD_INT 5
29191: PUSH
29192: LD_INT 11
29194: PUSH
29195: LD_INT 12
29197: PUSH
29198: LD_INT 15
29200: PUSH
29201: LD_INT 16
29203: PUSH
29204: LD_INT 22
29206: PUSH
29207: LD_INT 26
29209: PUSH
29210: LD_INT 36
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 101
29227: PUSH
29228: LD_INT 102
29230: PUSH
29231: LD_INT 105
29233: PUSH
29234: LD_INT 106
29236: PUSH
29237: LD_INT 108
29239: PUSH
29240: LD_INT 116
29242: PUSH
29243: LD_INT 117
29245: PUSH
29246: LD_INT 118
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: ST_TO_ADDR
29263: GO 32150
29265: LD_INT 4
29267: DOUBLE
29268: EQUAL
29269: IFTRUE 29273
29271: GO 29369
29273: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
29274: LD_ADDR_VAR 0 2
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 4
29284: PUSH
29285: LD_INT 5
29287: PUSH
29288: LD_INT 8
29290: PUSH
29291: LD_INT 11
29293: PUSH
29294: LD_INT 12
29296: PUSH
29297: LD_INT 15
29299: PUSH
29300: LD_INT 16
29302: PUSH
29303: LD_INT 22
29305: PUSH
29306: LD_INT 23
29308: PUSH
29309: LD_INT 26
29311: PUSH
29312: LD_INT 36
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 101
29331: PUSH
29332: LD_INT 102
29334: PUSH
29335: LD_INT 105
29337: PUSH
29338: LD_INT 106
29340: PUSH
29341: LD_INT 108
29343: PUSH
29344: LD_INT 116
29346: PUSH
29347: LD_INT 117
29349: PUSH
29350: LD_INT 118
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: ST_TO_ADDR
29367: GO 32150
29369: LD_INT 5
29371: DOUBLE
29372: EQUAL
29373: IFTRUE 29377
29375: GO 29489
29377: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
29378: LD_ADDR_VAR 0 2
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 4
29388: PUSH
29389: LD_INT 5
29391: PUSH
29392: LD_INT 6
29394: PUSH
29395: LD_INT 8
29397: PUSH
29398: LD_INT 11
29400: PUSH
29401: LD_INT 12
29403: PUSH
29404: LD_INT 15
29406: PUSH
29407: LD_INT 16
29409: PUSH
29410: LD_INT 22
29412: PUSH
29413: LD_INT 23
29415: PUSH
29416: LD_INT 25
29418: PUSH
29419: LD_INT 26
29421: PUSH
29422: LD_INT 36
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 101
29443: PUSH
29444: LD_INT 102
29446: PUSH
29447: LD_INT 105
29449: PUSH
29450: LD_INT 106
29452: PUSH
29453: LD_INT 108
29455: PUSH
29456: LD_INT 109
29458: PUSH
29459: LD_INT 112
29461: PUSH
29462: LD_INT 116
29464: PUSH
29465: LD_INT 117
29467: PUSH
29468: LD_INT 118
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: ST_TO_ADDR
29487: GO 32150
29489: LD_INT 6
29491: DOUBLE
29492: EQUAL
29493: IFTRUE 29497
29495: GO 29629
29497: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
29498: LD_ADDR_VAR 0 2
29502: PUSH
29503: LD_INT 2
29505: PUSH
29506: LD_INT 4
29508: PUSH
29509: LD_INT 5
29511: PUSH
29512: LD_INT 6
29514: PUSH
29515: LD_INT 8
29517: PUSH
29518: LD_INT 11
29520: PUSH
29521: LD_INT 12
29523: PUSH
29524: LD_INT 15
29526: PUSH
29527: LD_INT 16
29529: PUSH
29530: LD_INT 20
29532: PUSH
29533: LD_INT 21
29535: PUSH
29536: LD_INT 22
29538: PUSH
29539: LD_INT 23
29541: PUSH
29542: LD_INT 25
29544: PUSH
29545: LD_INT 26
29547: PUSH
29548: LD_INT 30
29550: PUSH
29551: LD_INT 31
29553: PUSH
29554: LD_INT 32
29556: PUSH
29557: LD_INT 36
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 101
29583: PUSH
29584: LD_INT 102
29586: PUSH
29587: LD_INT 105
29589: PUSH
29590: LD_INT 106
29592: PUSH
29593: LD_INT 108
29595: PUSH
29596: LD_INT 109
29598: PUSH
29599: LD_INT 112
29601: PUSH
29602: LD_INT 116
29604: PUSH
29605: LD_INT 117
29607: PUSH
29608: LD_INT 118
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: ST_TO_ADDR
29627: GO 32150
29629: LD_INT 7
29631: DOUBLE
29632: EQUAL
29633: IFTRUE 29637
29635: GO 29749
29637: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
29638: LD_ADDR_VAR 0 2
29642: PUSH
29643: LD_INT 2
29645: PUSH
29646: LD_INT 4
29648: PUSH
29649: LD_INT 5
29651: PUSH
29652: LD_INT 7
29654: PUSH
29655: LD_INT 11
29657: PUSH
29658: LD_INT 12
29660: PUSH
29661: LD_INT 15
29663: PUSH
29664: LD_INT 16
29666: PUSH
29667: LD_INT 20
29669: PUSH
29670: LD_INT 21
29672: PUSH
29673: LD_INT 22
29675: PUSH
29676: LD_INT 23
29678: PUSH
29679: LD_INT 25
29681: PUSH
29682: LD_INT 26
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 101
29703: PUSH
29704: LD_INT 102
29706: PUSH
29707: LD_INT 103
29709: PUSH
29710: LD_INT 105
29712: PUSH
29713: LD_INT 106
29715: PUSH
29716: LD_INT 108
29718: PUSH
29719: LD_INT 112
29721: PUSH
29722: LD_INT 116
29724: PUSH
29725: LD_INT 117
29727: PUSH
29728: LD_INT 118
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: ST_TO_ADDR
29747: GO 32150
29749: LD_INT 8
29751: DOUBLE
29752: EQUAL
29753: IFTRUE 29757
29755: GO 29897
29757: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
29758: LD_ADDR_VAR 0 2
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: LD_INT 4
29768: PUSH
29769: LD_INT 5
29771: PUSH
29772: LD_INT 6
29774: PUSH
29775: LD_INT 7
29777: PUSH
29778: LD_INT 8
29780: PUSH
29781: LD_INT 11
29783: PUSH
29784: LD_INT 12
29786: PUSH
29787: LD_INT 15
29789: PUSH
29790: LD_INT 16
29792: PUSH
29793: LD_INT 20
29795: PUSH
29796: LD_INT 21
29798: PUSH
29799: LD_INT 22
29801: PUSH
29802: LD_INT 23
29804: PUSH
29805: LD_INT 25
29807: PUSH
29808: LD_INT 26
29810: PUSH
29811: LD_INT 30
29813: PUSH
29814: LD_INT 31
29816: PUSH
29817: LD_INT 32
29819: PUSH
29820: LD_INT 36
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 101
29847: PUSH
29848: LD_INT 102
29850: PUSH
29851: LD_INT 103
29853: PUSH
29854: LD_INT 105
29856: PUSH
29857: LD_INT 106
29859: PUSH
29860: LD_INT 108
29862: PUSH
29863: LD_INT 109
29865: PUSH
29866: LD_INT 112
29868: PUSH
29869: LD_INT 116
29871: PUSH
29872: LD_INT 117
29874: PUSH
29875: LD_INT 118
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: ST_TO_ADDR
29895: GO 32150
29897: LD_INT 9
29899: DOUBLE
29900: EQUAL
29901: IFTRUE 29905
29903: GO 30053
29905: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
29906: LD_ADDR_VAR 0 2
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: LD_INT 4
29916: PUSH
29917: LD_INT 5
29919: PUSH
29920: LD_INT 6
29922: PUSH
29923: LD_INT 7
29925: PUSH
29926: LD_INT 8
29928: PUSH
29929: LD_INT 11
29931: PUSH
29932: LD_INT 12
29934: PUSH
29935: LD_INT 15
29937: PUSH
29938: LD_INT 16
29940: PUSH
29941: LD_INT 20
29943: PUSH
29944: LD_INT 21
29946: PUSH
29947: LD_INT 22
29949: PUSH
29950: LD_INT 23
29952: PUSH
29953: LD_INT 25
29955: PUSH
29956: LD_INT 26
29958: PUSH
29959: LD_INT 28
29961: PUSH
29962: LD_INT 30
29964: PUSH
29965: LD_INT 31
29967: PUSH
29968: LD_INT 32
29970: PUSH
29971: LD_INT 36
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 101
29999: PUSH
30000: LD_INT 102
30002: PUSH
30003: LD_INT 103
30005: PUSH
30006: LD_INT 105
30008: PUSH
30009: LD_INT 106
30011: PUSH
30012: LD_INT 108
30014: PUSH
30015: LD_INT 109
30017: PUSH
30018: LD_INT 112
30020: PUSH
30021: LD_INT 114
30023: PUSH
30024: LD_INT 116
30026: PUSH
30027: LD_INT 117
30029: PUSH
30030: LD_INT 118
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: ST_TO_ADDR
30051: GO 32150
30053: LD_INT 10
30055: DOUBLE
30056: EQUAL
30057: IFTRUE 30061
30059: GO 30257
30061: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
30062: LD_ADDR_VAR 0 2
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: LD_INT 4
30072: PUSH
30073: LD_INT 5
30075: PUSH
30076: LD_INT 6
30078: PUSH
30079: LD_INT 7
30081: PUSH
30082: LD_INT 8
30084: PUSH
30085: LD_INT 9
30087: PUSH
30088: LD_INT 10
30090: PUSH
30091: LD_INT 11
30093: PUSH
30094: LD_INT 12
30096: PUSH
30097: LD_INT 13
30099: PUSH
30100: LD_INT 14
30102: PUSH
30103: LD_INT 15
30105: PUSH
30106: LD_INT 16
30108: PUSH
30109: LD_INT 17
30111: PUSH
30112: LD_INT 18
30114: PUSH
30115: LD_INT 19
30117: PUSH
30118: LD_INT 20
30120: PUSH
30121: LD_INT 21
30123: PUSH
30124: LD_INT 22
30126: PUSH
30127: LD_INT 23
30129: PUSH
30130: LD_INT 24
30132: PUSH
30133: LD_INT 25
30135: PUSH
30136: LD_INT 26
30138: PUSH
30139: LD_INT 28
30141: PUSH
30142: LD_INT 30
30144: PUSH
30145: LD_INT 31
30147: PUSH
30148: LD_INT 32
30150: PUSH
30151: LD_INT 36
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 101
30187: PUSH
30188: LD_INT 102
30190: PUSH
30191: LD_INT 103
30193: PUSH
30194: LD_INT 104
30196: PUSH
30197: LD_INT 105
30199: PUSH
30200: LD_INT 106
30202: PUSH
30203: LD_INT 107
30205: PUSH
30206: LD_INT 108
30208: PUSH
30209: LD_INT 109
30211: PUSH
30212: LD_INT 110
30214: PUSH
30215: LD_INT 111
30217: PUSH
30218: LD_INT 112
30220: PUSH
30221: LD_INT 114
30223: PUSH
30224: LD_INT 116
30226: PUSH
30227: LD_INT 117
30229: PUSH
30230: LD_INT 118
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: ST_TO_ADDR
30255: GO 32150
30257: LD_INT 11
30259: DOUBLE
30260: EQUAL
30261: IFTRUE 30265
30263: GO 30469
30265: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
30266: LD_ADDR_VAR 0 2
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: LD_INT 3
30276: PUSH
30277: LD_INT 4
30279: PUSH
30280: LD_INT 5
30282: PUSH
30283: LD_INT 6
30285: PUSH
30286: LD_INT 7
30288: PUSH
30289: LD_INT 8
30291: PUSH
30292: LD_INT 9
30294: PUSH
30295: LD_INT 10
30297: PUSH
30298: LD_INT 11
30300: PUSH
30301: LD_INT 12
30303: PUSH
30304: LD_INT 13
30306: PUSH
30307: LD_INT 14
30309: PUSH
30310: LD_INT 15
30312: PUSH
30313: LD_INT 16
30315: PUSH
30316: LD_INT 17
30318: PUSH
30319: LD_INT 18
30321: PUSH
30322: LD_INT 19
30324: PUSH
30325: LD_INT 20
30327: PUSH
30328: LD_INT 21
30330: PUSH
30331: LD_INT 22
30333: PUSH
30334: LD_INT 23
30336: PUSH
30337: LD_INT 24
30339: PUSH
30340: LD_INT 25
30342: PUSH
30343: LD_INT 26
30345: PUSH
30346: LD_INT 28
30348: PUSH
30349: LD_INT 30
30351: PUSH
30352: LD_INT 31
30354: PUSH
30355: LD_INT 32
30357: PUSH
30358: LD_INT 34
30360: PUSH
30361: LD_INT 36
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 101
30399: PUSH
30400: LD_INT 102
30402: PUSH
30403: LD_INT 103
30405: PUSH
30406: LD_INT 104
30408: PUSH
30409: LD_INT 105
30411: PUSH
30412: LD_INT 106
30414: PUSH
30415: LD_INT 107
30417: PUSH
30418: LD_INT 108
30420: PUSH
30421: LD_INT 109
30423: PUSH
30424: LD_INT 110
30426: PUSH
30427: LD_INT 111
30429: PUSH
30430: LD_INT 112
30432: PUSH
30433: LD_INT 114
30435: PUSH
30436: LD_INT 116
30438: PUSH
30439: LD_INT 117
30441: PUSH
30442: LD_INT 118
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: ST_TO_ADDR
30467: GO 32150
30469: LD_INT 12
30471: DOUBLE
30472: EQUAL
30473: IFTRUE 30477
30475: GO 30697
30477: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
30478: LD_ADDR_VAR 0 2
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: LD_INT 2
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: LD_INT 4
30494: PUSH
30495: LD_INT 5
30497: PUSH
30498: LD_INT 6
30500: PUSH
30501: LD_INT 7
30503: PUSH
30504: LD_INT 8
30506: PUSH
30507: LD_INT 9
30509: PUSH
30510: LD_INT 10
30512: PUSH
30513: LD_INT 11
30515: PUSH
30516: LD_INT 12
30518: PUSH
30519: LD_INT 13
30521: PUSH
30522: LD_INT 14
30524: PUSH
30525: LD_INT 15
30527: PUSH
30528: LD_INT 16
30530: PUSH
30531: LD_INT 17
30533: PUSH
30534: LD_INT 18
30536: PUSH
30537: LD_INT 19
30539: PUSH
30540: LD_INT 20
30542: PUSH
30543: LD_INT 21
30545: PUSH
30546: LD_INT 22
30548: PUSH
30549: LD_INT 23
30551: PUSH
30552: LD_INT 24
30554: PUSH
30555: LD_INT 25
30557: PUSH
30558: LD_INT 26
30560: PUSH
30561: LD_INT 27
30563: PUSH
30564: LD_INT 28
30566: PUSH
30567: LD_INT 30
30569: PUSH
30570: LD_INT 31
30572: PUSH
30573: LD_INT 32
30575: PUSH
30576: LD_INT 33
30578: PUSH
30579: LD_INT 34
30581: PUSH
30582: LD_INT 36
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 101
30623: PUSH
30624: LD_INT 102
30626: PUSH
30627: LD_INT 103
30629: PUSH
30630: LD_INT 104
30632: PUSH
30633: LD_INT 105
30635: PUSH
30636: LD_INT 106
30638: PUSH
30639: LD_INT 107
30641: PUSH
30642: LD_INT 108
30644: PUSH
30645: LD_INT 109
30647: PUSH
30648: LD_INT 110
30650: PUSH
30651: LD_INT 111
30653: PUSH
30654: LD_INT 112
30656: PUSH
30657: LD_INT 113
30659: PUSH
30660: LD_INT 114
30662: PUSH
30663: LD_INT 116
30665: PUSH
30666: LD_INT 117
30668: PUSH
30669: LD_INT 118
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: ST_TO_ADDR
30695: GO 32150
30697: LD_INT 13
30699: DOUBLE
30700: EQUAL
30701: IFTRUE 30705
30703: GO 30913
30705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
30706: LD_ADDR_VAR 0 2
30710: PUSH
30711: LD_INT 1
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: LD_INT 4
30722: PUSH
30723: LD_INT 5
30725: PUSH
30726: LD_INT 8
30728: PUSH
30729: LD_INT 9
30731: PUSH
30732: LD_INT 10
30734: PUSH
30735: LD_INT 11
30737: PUSH
30738: LD_INT 12
30740: PUSH
30741: LD_INT 14
30743: PUSH
30744: LD_INT 15
30746: PUSH
30747: LD_INT 16
30749: PUSH
30750: LD_INT 17
30752: PUSH
30753: LD_INT 18
30755: PUSH
30756: LD_INT 19
30758: PUSH
30759: LD_INT 20
30761: PUSH
30762: LD_INT 21
30764: PUSH
30765: LD_INT 22
30767: PUSH
30768: LD_INT 23
30770: PUSH
30771: LD_INT 24
30773: PUSH
30774: LD_INT 25
30776: PUSH
30777: LD_INT 26
30779: PUSH
30780: LD_INT 27
30782: PUSH
30783: LD_INT 28
30785: PUSH
30786: LD_INT 30
30788: PUSH
30789: LD_INT 31
30791: PUSH
30792: LD_INT 32
30794: PUSH
30795: LD_INT 33
30797: PUSH
30798: LD_INT 34
30800: PUSH
30801: LD_INT 36
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 101
30839: PUSH
30840: LD_INT 102
30842: PUSH
30843: LD_INT 103
30845: PUSH
30846: LD_INT 104
30848: PUSH
30849: LD_INT 105
30851: PUSH
30852: LD_INT 106
30854: PUSH
30855: LD_INT 107
30857: PUSH
30858: LD_INT 108
30860: PUSH
30861: LD_INT 109
30863: PUSH
30864: LD_INT 110
30866: PUSH
30867: LD_INT 111
30869: PUSH
30870: LD_INT 112
30872: PUSH
30873: LD_INT 113
30875: PUSH
30876: LD_INT 114
30878: PUSH
30879: LD_INT 116
30881: PUSH
30882: LD_INT 117
30884: PUSH
30885: LD_INT 118
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: ST_TO_ADDR
30911: GO 32150
30913: LD_INT 14
30915: DOUBLE
30916: EQUAL
30917: IFTRUE 30921
30919: GO 31145
30921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
30922: LD_ADDR_VAR 0 2
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: LD_INT 3
30935: PUSH
30936: LD_INT 4
30938: PUSH
30939: LD_INT 5
30941: PUSH
30942: LD_INT 6
30944: PUSH
30945: LD_INT 7
30947: PUSH
30948: LD_INT 8
30950: PUSH
30951: LD_INT 9
30953: PUSH
30954: LD_INT 10
30956: PUSH
30957: LD_INT 11
30959: PUSH
30960: LD_INT 12
30962: PUSH
30963: LD_INT 13
30965: PUSH
30966: LD_INT 14
30968: PUSH
30969: LD_INT 15
30971: PUSH
30972: LD_INT 16
30974: PUSH
30975: LD_INT 17
30977: PUSH
30978: LD_INT 18
30980: PUSH
30981: LD_INT 19
30983: PUSH
30984: LD_INT 20
30986: PUSH
30987: LD_INT 21
30989: PUSH
30990: LD_INT 22
30992: PUSH
30993: LD_INT 23
30995: PUSH
30996: LD_INT 24
30998: PUSH
30999: LD_INT 25
31001: PUSH
31002: LD_INT 26
31004: PUSH
31005: LD_INT 27
31007: PUSH
31008: LD_INT 28
31010: PUSH
31011: LD_INT 29
31013: PUSH
31014: LD_INT 30
31016: PUSH
31017: LD_INT 31
31019: PUSH
31020: LD_INT 32
31022: PUSH
31023: LD_INT 33
31025: PUSH
31026: LD_INT 34
31028: PUSH
31029: LD_INT 36
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 101
31071: PUSH
31072: LD_INT 102
31074: PUSH
31075: LD_INT 103
31077: PUSH
31078: LD_INT 104
31080: PUSH
31081: LD_INT 105
31083: PUSH
31084: LD_INT 106
31086: PUSH
31087: LD_INT 107
31089: PUSH
31090: LD_INT 108
31092: PUSH
31093: LD_INT 109
31095: PUSH
31096: LD_INT 110
31098: PUSH
31099: LD_INT 111
31101: PUSH
31102: LD_INT 112
31104: PUSH
31105: LD_INT 113
31107: PUSH
31108: LD_INT 114
31110: PUSH
31111: LD_INT 116
31113: PUSH
31114: LD_INT 117
31116: PUSH
31117: LD_INT 118
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: ST_TO_ADDR
31143: GO 32150
31145: LD_INT 15
31147: DOUBLE
31148: EQUAL
31149: IFTRUE 31153
31151: GO 31377
31153: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
31154: LD_ADDR_VAR 0 2
31158: PUSH
31159: LD_INT 1
31161: PUSH
31162: LD_INT 2
31164: PUSH
31165: LD_INT 3
31167: PUSH
31168: LD_INT 4
31170: PUSH
31171: LD_INT 5
31173: PUSH
31174: LD_INT 6
31176: PUSH
31177: LD_INT 7
31179: PUSH
31180: LD_INT 8
31182: PUSH
31183: LD_INT 9
31185: PUSH
31186: LD_INT 10
31188: PUSH
31189: LD_INT 11
31191: PUSH
31192: LD_INT 12
31194: PUSH
31195: LD_INT 13
31197: PUSH
31198: LD_INT 14
31200: PUSH
31201: LD_INT 15
31203: PUSH
31204: LD_INT 16
31206: PUSH
31207: LD_INT 17
31209: PUSH
31210: LD_INT 18
31212: PUSH
31213: LD_INT 19
31215: PUSH
31216: LD_INT 20
31218: PUSH
31219: LD_INT 21
31221: PUSH
31222: LD_INT 22
31224: PUSH
31225: LD_INT 23
31227: PUSH
31228: LD_INT 24
31230: PUSH
31231: LD_INT 25
31233: PUSH
31234: LD_INT 26
31236: PUSH
31237: LD_INT 27
31239: PUSH
31240: LD_INT 28
31242: PUSH
31243: LD_INT 29
31245: PUSH
31246: LD_INT 30
31248: PUSH
31249: LD_INT 31
31251: PUSH
31252: LD_INT 32
31254: PUSH
31255: LD_INT 33
31257: PUSH
31258: LD_INT 34
31260: PUSH
31261: LD_INT 36
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 101
31303: PUSH
31304: LD_INT 102
31306: PUSH
31307: LD_INT 103
31309: PUSH
31310: LD_INT 104
31312: PUSH
31313: LD_INT 105
31315: PUSH
31316: LD_INT 106
31318: PUSH
31319: LD_INT 107
31321: PUSH
31322: LD_INT 108
31324: PUSH
31325: LD_INT 109
31327: PUSH
31328: LD_INT 110
31330: PUSH
31331: LD_INT 111
31333: PUSH
31334: LD_INT 112
31336: PUSH
31337: LD_INT 113
31339: PUSH
31340: LD_INT 114
31342: PUSH
31343: LD_INT 116
31345: PUSH
31346: LD_INT 117
31348: PUSH
31349: LD_INT 118
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: ST_TO_ADDR
31375: GO 32150
31377: LD_INT 16
31379: DOUBLE
31380: EQUAL
31381: IFTRUE 31385
31383: GO 31521
31385: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
31386: LD_ADDR_VAR 0 2
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: LD_INT 4
31396: PUSH
31397: LD_INT 5
31399: PUSH
31400: LD_INT 7
31402: PUSH
31403: LD_INT 11
31405: PUSH
31406: LD_INT 12
31408: PUSH
31409: LD_INT 15
31411: PUSH
31412: LD_INT 16
31414: PUSH
31415: LD_INT 20
31417: PUSH
31418: LD_INT 21
31420: PUSH
31421: LD_INT 22
31423: PUSH
31424: LD_INT 23
31426: PUSH
31427: LD_INT 25
31429: PUSH
31430: LD_INT 26
31432: PUSH
31433: LD_INT 30
31435: PUSH
31436: LD_INT 31
31438: PUSH
31439: LD_INT 32
31441: PUSH
31442: LD_INT 33
31444: PUSH
31445: LD_INT 34
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 101
31471: PUSH
31472: LD_INT 102
31474: PUSH
31475: LD_INT 103
31477: PUSH
31478: LD_INT 106
31480: PUSH
31481: LD_INT 108
31483: PUSH
31484: LD_INT 112
31486: PUSH
31487: LD_INT 113
31489: PUSH
31490: LD_INT 114
31492: PUSH
31493: LD_INT 116
31495: PUSH
31496: LD_INT 117
31498: PUSH
31499: LD_INT 118
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: ST_TO_ADDR
31519: GO 32150
31521: LD_INT 17
31523: DOUBLE
31524: EQUAL
31525: IFTRUE 31529
31527: GO 31753
31529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
31530: LD_ADDR_VAR 0 2
31534: PUSH
31535: LD_INT 1
31537: PUSH
31538: LD_INT 2
31540: PUSH
31541: LD_INT 3
31543: PUSH
31544: LD_INT 4
31546: PUSH
31547: LD_INT 5
31549: PUSH
31550: LD_INT 6
31552: PUSH
31553: LD_INT 7
31555: PUSH
31556: LD_INT 8
31558: PUSH
31559: LD_INT 9
31561: PUSH
31562: LD_INT 10
31564: PUSH
31565: LD_INT 11
31567: PUSH
31568: LD_INT 12
31570: PUSH
31571: LD_INT 13
31573: PUSH
31574: LD_INT 14
31576: PUSH
31577: LD_INT 15
31579: PUSH
31580: LD_INT 16
31582: PUSH
31583: LD_INT 17
31585: PUSH
31586: LD_INT 18
31588: PUSH
31589: LD_INT 19
31591: PUSH
31592: LD_INT 20
31594: PUSH
31595: LD_INT 21
31597: PUSH
31598: LD_INT 22
31600: PUSH
31601: LD_INT 23
31603: PUSH
31604: LD_INT 24
31606: PUSH
31607: LD_INT 25
31609: PUSH
31610: LD_INT 26
31612: PUSH
31613: LD_INT 27
31615: PUSH
31616: LD_INT 28
31618: PUSH
31619: LD_INT 29
31621: PUSH
31622: LD_INT 30
31624: PUSH
31625: LD_INT 31
31627: PUSH
31628: LD_INT 32
31630: PUSH
31631: LD_INT 33
31633: PUSH
31634: LD_INT 34
31636: PUSH
31637: LD_INT 36
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 101
31679: PUSH
31680: LD_INT 102
31682: PUSH
31683: LD_INT 103
31685: PUSH
31686: LD_INT 104
31688: PUSH
31689: LD_INT 105
31691: PUSH
31692: LD_INT 106
31694: PUSH
31695: LD_INT 107
31697: PUSH
31698: LD_INT 108
31700: PUSH
31701: LD_INT 109
31703: PUSH
31704: LD_INT 110
31706: PUSH
31707: LD_INT 111
31709: PUSH
31710: LD_INT 112
31712: PUSH
31713: LD_INT 113
31715: PUSH
31716: LD_INT 114
31718: PUSH
31719: LD_INT 116
31721: PUSH
31722: LD_INT 117
31724: PUSH
31725: LD_INT 118
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: ST_TO_ADDR
31751: GO 32150
31753: LD_INT 18
31755: DOUBLE
31756: EQUAL
31757: IFTRUE 31761
31759: GO 31909
31761: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
31762: LD_ADDR_VAR 0 2
31766: PUSH
31767: LD_INT 2
31769: PUSH
31770: LD_INT 4
31772: PUSH
31773: LD_INT 5
31775: PUSH
31776: LD_INT 7
31778: PUSH
31779: LD_INT 11
31781: PUSH
31782: LD_INT 12
31784: PUSH
31785: LD_INT 15
31787: PUSH
31788: LD_INT 16
31790: PUSH
31791: LD_INT 20
31793: PUSH
31794: LD_INT 21
31796: PUSH
31797: LD_INT 22
31799: PUSH
31800: LD_INT 23
31802: PUSH
31803: LD_INT 25
31805: PUSH
31806: LD_INT 26
31808: PUSH
31809: LD_INT 30
31811: PUSH
31812: LD_INT 31
31814: PUSH
31815: LD_INT 32
31817: PUSH
31818: LD_INT 33
31820: PUSH
31821: LD_INT 34
31823: PUSH
31824: LD_INT 35
31826: PUSH
31827: LD_INT 36
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 101
31855: PUSH
31856: LD_INT 102
31858: PUSH
31859: LD_INT 103
31861: PUSH
31862: LD_INT 106
31864: PUSH
31865: LD_INT 108
31867: PUSH
31868: LD_INT 112
31870: PUSH
31871: LD_INT 113
31873: PUSH
31874: LD_INT 114
31876: PUSH
31877: LD_INT 115
31879: PUSH
31880: LD_INT 116
31882: PUSH
31883: LD_INT 117
31885: PUSH
31886: LD_INT 118
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: ST_TO_ADDR
31907: GO 32150
31909: LD_INT 19
31911: DOUBLE
31912: EQUAL
31913: IFTRUE 31917
31915: GO 32149
31917: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
31918: LD_ADDR_VAR 0 2
31922: PUSH
31923: LD_INT 1
31925: PUSH
31926: LD_INT 2
31928: PUSH
31929: LD_INT 3
31931: PUSH
31932: LD_INT 4
31934: PUSH
31935: LD_INT 5
31937: PUSH
31938: LD_INT 6
31940: PUSH
31941: LD_INT 7
31943: PUSH
31944: LD_INT 8
31946: PUSH
31947: LD_INT 9
31949: PUSH
31950: LD_INT 10
31952: PUSH
31953: LD_INT 11
31955: PUSH
31956: LD_INT 12
31958: PUSH
31959: LD_INT 13
31961: PUSH
31962: LD_INT 14
31964: PUSH
31965: LD_INT 15
31967: PUSH
31968: LD_INT 16
31970: PUSH
31971: LD_INT 17
31973: PUSH
31974: LD_INT 18
31976: PUSH
31977: LD_INT 19
31979: PUSH
31980: LD_INT 20
31982: PUSH
31983: LD_INT 21
31985: PUSH
31986: LD_INT 22
31988: PUSH
31989: LD_INT 23
31991: PUSH
31992: LD_INT 24
31994: PUSH
31995: LD_INT 25
31997: PUSH
31998: LD_INT 26
32000: PUSH
32001: LD_INT 27
32003: PUSH
32004: LD_INT 28
32006: PUSH
32007: LD_INT 29
32009: PUSH
32010: LD_INT 30
32012: PUSH
32013: LD_INT 31
32015: PUSH
32016: LD_INT 32
32018: PUSH
32019: LD_INT 33
32021: PUSH
32022: LD_INT 34
32024: PUSH
32025: LD_INT 35
32027: PUSH
32028: LD_INT 36
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 101
32071: PUSH
32072: LD_INT 102
32074: PUSH
32075: LD_INT 103
32077: PUSH
32078: LD_INT 104
32080: PUSH
32081: LD_INT 105
32083: PUSH
32084: LD_INT 106
32086: PUSH
32087: LD_INT 107
32089: PUSH
32090: LD_INT 108
32092: PUSH
32093: LD_INT 109
32095: PUSH
32096: LD_INT 110
32098: PUSH
32099: LD_INT 111
32101: PUSH
32102: LD_INT 112
32104: PUSH
32105: LD_INT 113
32107: PUSH
32108: LD_INT 114
32110: PUSH
32111: LD_INT 115
32113: PUSH
32114: LD_INT 116
32116: PUSH
32117: LD_INT 117
32119: PUSH
32120: LD_INT 118
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: ST_TO_ADDR
32147: GO 32150
32149: POP
// end else
32150: GO 32381
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
32152: LD_ADDR_VAR 0 2
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: LD_INT 2
32162: PUSH
32163: LD_INT 3
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: LD_INT 5
32171: PUSH
32172: LD_INT 6
32174: PUSH
32175: LD_INT 7
32177: PUSH
32178: LD_INT 8
32180: PUSH
32181: LD_INT 9
32183: PUSH
32184: LD_INT 10
32186: PUSH
32187: LD_INT 11
32189: PUSH
32190: LD_INT 12
32192: PUSH
32193: LD_INT 13
32195: PUSH
32196: LD_INT 14
32198: PUSH
32199: LD_INT 15
32201: PUSH
32202: LD_INT 16
32204: PUSH
32205: LD_INT 17
32207: PUSH
32208: LD_INT 18
32210: PUSH
32211: LD_INT 19
32213: PUSH
32214: LD_INT 20
32216: PUSH
32217: LD_INT 21
32219: PUSH
32220: LD_INT 22
32222: PUSH
32223: LD_INT 23
32225: PUSH
32226: LD_INT 24
32228: PUSH
32229: LD_INT 25
32231: PUSH
32232: LD_INT 26
32234: PUSH
32235: LD_INT 27
32237: PUSH
32238: LD_INT 28
32240: PUSH
32241: LD_INT 29
32243: PUSH
32244: LD_INT 30
32246: PUSH
32247: LD_INT 31
32249: PUSH
32250: LD_INT 32
32252: PUSH
32253: LD_INT 33
32255: PUSH
32256: LD_INT 34
32258: PUSH
32259: LD_INT 35
32261: PUSH
32262: LD_INT 36
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 101
32305: PUSH
32306: LD_INT 102
32308: PUSH
32309: LD_INT 103
32311: PUSH
32312: LD_INT 104
32314: PUSH
32315: LD_INT 105
32317: PUSH
32318: LD_INT 106
32320: PUSH
32321: LD_INT 107
32323: PUSH
32324: LD_INT 108
32326: PUSH
32327: LD_INT 109
32329: PUSH
32330: LD_INT 110
32332: PUSH
32333: LD_INT 111
32335: PUSH
32336: LD_INT 112
32338: PUSH
32339: LD_INT 113
32341: PUSH
32342: LD_INT 114
32344: PUSH
32345: LD_INT 115
32347: PUSH
32348: LD_INT 116
32350: PUSH
32351: LD_INT 117
32353: PUSH
32354: LD_INT 118
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: ST_TO_ADDR
// if result then
32381: LD_VAR 0 2
32385: IFFALSE 33171
// begin normal :=  ;
32387: LD_ADDR_VAR 0 5
32391: PUSH
32392: LD_STRING 
32394: ST_TO_ADDR
// hardcore :=  ;
32395: LD_ADDR_VAR 0 6
32399: PUSH
32400: LD_STRING 
32402: ST_TO_ADDR
// active :=  ;
32403: LD_ADDR_VAR 0 7
32407: PUSH
32408: LD_STRING 
32410: ST_TO_ADDR
// for i = 1 to normalCounter do
32411: LD_ADDR_VAR 0 8
32415: PUSH
32416: DOUBLE
32417: LD_INT 1
32419: DEC
32420: ST_TO_ADDR
32421: LD_EXP 69
32425: PUSH
32426: FOR_TO
32427: IFFALSE 32528
// begin tmp := 0 ;
32429: LD_ADDR_VAR 0 3
32433: PUSH
32434: LD_STRING 0
32436: ST_TO_ADDR
// if result [ 1 ] then
32437: LD_VAR 0 2
32441: PUSH
32442: LD_INT 1
32444: ARRAY
32445: IFFALSE 32510
// if result [ 1 ] [ 1 ] = i then
32447: LD_VAR 0 2
32451: PUSH
32452: LD_INT 1
32454: ARRAY
32455: PUSH
32456: LD_INT 1
32458: ARRAY
32459: PUSH
32460: LD_VAR 0 8
32464: EQUAL
32465: IFFALSE 32510
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
32467: LD_ADDR_VAR 0 2
32471: PUSH
32472: LD_VAR 0 2
32476: PPUSH
32477: LD_INT 1
32479: PPUSH
32480: LD_VAR 0 2
32484: PUSH
32485: LD_INT 1
32487: ARRAY
32488: PPUSH
32489: LD_INT 1
32491: PPUSH
32492: CALL_OW 3
32496: PPUSH
32497: CALL_OW 1
32501: ST_TO_ADDR
// tmp := 1 ;
32502: LD_ADDR_VAR 0 3
32506: PUSH
32507: LD_STRING 1
32509: ST_TO_ADDR
// end ; normal := normal & tmp ;
32510: LD_ADDR_VAR 0 5
32514: PUSH
32515: LD_VAR 0 5
32519: PUSH
32520: LD_VAR 0 3
32524: STR
32525: ST_TO_ADDR
// end ;
32526: GO 32426
32528: POP
32529: POP
// for i = 1 to hardcoreCounter do
32530: LD_ADDR_VAR 0 8
32534: PUSH
32535: DOUBLE
32536: LD_INT 1
32538: DEC
32539: ST_TO_ADDR
32540: LD_EXP 70
32544: PUSH
32545: FOR_TO
32546: IFFALSE 32651
// begin tmp := 0 ;
32548: LD_ADDR_VAR 0 3
32552: PUSH
32553: LD_STRING 0
32555: ST_TO_ADDR
// if result [ 2 ] then
32556: LD_VAR 0 2
32560: PUSH
32561: LD_INT 2
32563: ARRAY
32564: IFFALSE 32633
// if result [ 2 ] [ 1 ] = 100 + i then
32566: LD_VAR 0 2
32570: PUSH
32571: LD_INT 2
32573: ARRAY
32574: PUSH
32575: LD_INT 1
32577: ARRAY
32578: PUSH
32579: LD_INT 100
32581: PUSH
32582: LD_VAR 0 8
32586: PLUS
32587: EQUAL
32588: IFFALSE 32633
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32590: LD_ADDR_VAR 0 2
32594: PUSH
32595: LD_VAR 0 2
32599: PPUSH
32600: LD_INT 2
32602: PPUSH
32603: LD_VAR 0 2
32607: PUSH
32608: LD_INT 2
32610: ARRAY
32611: PPUSH
32612: LD_INT 1
32614: PPUSH
32615: CALL_OW 3
32619: PPUSH
32620: CALL_OW 1
32624: ST_TO_ADDR
// tmp := 1 ;
32625: LD_ADDR_VAR 0 3
32629: PUSH
32630: LD_STRING 1
32632: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32633: LD_ADDR_VAR 0 6
32637: PUSH
32638: LD_VAR 0 6
32642: PUSH
32643: LD_VAR 0 3
32647: STR
32648: ST_TO_ADDR
// end ;
32649: GO 32545
32651: POP
32652: POP
// if isGameLoad then
32653: LD_VAR 0 1
32657: IFFALSE 33132
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
32659: LD_ADDR_VAR 0 4
32663: PUSH
32664: LD_EXP 73
32668: PUSH
32669: LD_EXP 72
32673: PUSH
32674: LD_EXP 74
32678: PUSH
32679: LD_EXP 71
32683: PUSH
32684: LD_EXP 75
32688: PUSH
32689: LD_EXP 76
32693: PUSH
32694: LD_EXP 77
32698: PUSH
32699: LD_EXP 78
32703: PUSH
32704: LD_EXP 79
32708: PUSH
32709: LD_EXP 80
32713: PUSH
32714: LD_EXP 81
32718: PUSH
32719: LD_EXP 82
32723: PUSH
32724: LD_EXP 83
32728: PUSH
32729: LD_EXP 84
32733: PUSH
32734: LD_EXP 92
32738: PUSH
32739: LD_EXP 93
32743: PUSH
32744: LD_EXP 94
32748: PUSH
32749: LD_EXP 95
32753: PUSH
32754: LD_EXP 97
32758: PUSH
32759: LD_EXP 98
32763: PUSH
32764: LD_EXP 99
32768: PUSH
32769: LD_EXP 102
32773: PUSH
32774: LD_EXP 104
32778: PUSH
32779: LD_EXP 105
32783: PUSH
32784: LD_EXP 106
32788: PUSH
32789: LD_EXP 108
32793: PUSH
32794: LD_EXP 109
32798: PUSH
32799: LD_EXP 112
32803: PUSH
32804: LD_EXP 113
32808: PUSH
32809: LD_EXP 114
32813: PUSH
32814: LD_EXP 115
32818: PUSH
32819: LD_EXP 116
32823: PUSH
32824: LD_EXP 117
32828: PUSH
32829: LD_EXP 118
32833: PUSH
32834: LD_EXP 119
32838: PUSH
32839: LD_EXP 120
32843: PUSH
32844: LD_EXP 85
32848: PUSH
32849: LD_EXP 86
32853: PUSH
32854: LD_EXP 89
32858: PUSH
32859: LD_EXP 90
32863: PUSH
32864: LD_EXP 91
32868: PUSH
32869: LD_EXP 87
32873: PUSH
32874: LD_EXP 88
32878: PUSH
32879: LD_EXP 96
32883: PUSH
32884: LD_EXP 100
32888: PUSH
32889: LD_EXP 101
32893: PUSH
32894: LD_EXP 103
32898: PUSH
32899: LD_EXP 107
32903: PUSH
32904: LD_EXP 110
32908: PUSH
32909: LD_EXP 111
32913: PUSH
32914: LD_EXP 121
32918: PUSH
32919: LD_EXP 122
32923: PUSH
32924: LD_EXP 123
32928: PUSH
32929: LD_EXP 124
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: ST_TO_ADDR
// tmp :=  ;
32990: LD_ADDR_VAR 0 3
32994: PUSH
32995: LD_STRING 
32997: ST_TO_ADDR
// for i = 1 to normalCounter do
32998: LD_ADDR_VAR 0 8
33002: PUSH
33003: DOUBLE
33004: LD_INT 1
33006: DEC
33007: ST_TO_ADDR
33008: LD_EXP 69
33012: PUSH
33013: FOR_TO
33014: IFFALSE 33050
// begin if flags [ i ] then
33016: LD_VAR 0 4
33020: PUSH
33021: LD_VAR 0 8
33025: ARRAY
33026: IFFALSE 33048
// tmp := tmp & i & ; ;
33028: LD_ADDR_VAR 0 3
33032: PUSH
33033: LD_VAR 0 3
33037: PUSH
33038: LD_VAR 0 8
33042: STR
33043: PUSH
33044: LD_STRING ;
33046: STR
33047: ST_TO_ADDR
// end ;
33048: GO 33013
33050: POP
33051: POP
// for i = 1 to hardcoreCounter do
33052: LD_ADDR_VAR 0 8
33056: PUSH
33057: DOUBLE
33058: LD_INT 1
33060: DEC
33061: ST_TO_ADDR
33062: LD_EXP 70
33066: PUSH
33067: FOR_TO
33068: IFFALSE 33114
// begin if flags [ normalCounter + i ] then
33070: LD_VAR 0 4
33074: PUSH
33075: LD_EXP 69
33079: PUSH
33080: LD_VAR 0 8
33084: PLUS
33085: ARRAY
33086: IFFALSE 33112
// tmp := tmp & ( 100 + i ) & ; ;
33088: LD_ADDR_VAR 0 3
33092: PUSH
33093: LD_VAR 0 3
33097: PUSH
33098: LD_INT 100
33100: PUSH
33101: LD_VAR 0 8
33105: PLUS
33106: STR
33107: PUSH
33108: LD_STRING ;
33110: STR
33111: ST_TO_ADDR
// end ;
33112: GO 33067
33114: POP
33115: POP
// if tmp then
33116: LD_VAR 0 3
33120: IFFALSE 33132
// active := tmp ;
33122: LD_ADDR_VAR 0 7
33126: PUSH
33127: LD_VAR 0 3
33131: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
33132: LD_STRING getStreamItemsFromMission("
33134: PUSH
33135: LD_VAR 0 5
33139: STR
33140: PUSH
33141: LD_STRING ","
33143: STR
33144: PUSH
33145: LD_VAR 0 6
33149: STR
33150: PUSH
33151: LD_STRING ","
33153: STR
33154: PUSH
33155: LD_VAR 0 7
33159: STR
33160: PUSH
33161: LD_STRING ")
33163: STR
33164: PPUSH
33165: CALL_OW 559
// end else
33169: GO 33178
// ToLua ( getStreamItemsFromMission("","","") ) ;
33171: LD_STRING getStreamItemsFromMission("","","")
33173: PPUSH
33174: CALL_OW 559
// end ;
33178: LD_VAR 0 2
33182: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
33183: LD_EXP 68
33187: PUSH
33188: LD_EXP 73
33192: AND
33193: IFFALSE 33317
33195: GO 33197
33197: DISABLE
33198: LD_INT 0
33200: PPUSH
33201: PPUSH
// begin enable ;
33202: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
33203: LD_ADDR_VAR 0 2
33207: PUSH
33208: LD_INT 22
33210: PUSH
33211: LD_OWVAR 2
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 2
33222: PUSH
33223: LD_INT 34
33225: PUSH
33226: LD_INT 7
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 34
33235: PUSH
33236: LD_INT 45
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 34
33245: PUSH
33246: LD_INT 28
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 34
33255: PUSH
33256: LD_INT 47
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PPUSH
33274: CALL_OW 69
33278: ST_TO_ADDR
// if not tmp then
33279: LD_VAR 0 2
33283: NOT
33284: IFFALSE 33288
// exit ;
33286: GO 33317
// for i in tmp do
33288: LD_ADDR_VAR 0 1
33292: PUSH
33293: LD_VAR 0 2
33297: PUSH
33298: FOR_IN
33299: IFFALSE 33315
// begin SetLives ( i , 0 ) ;
33301: LD_VAR 0 1
33305: PPUSH
33306: LD_INT 0
33308: PPUSH
33309: CALL_OW 234
// end ;
33313: GO 33298
33315: POP
33316: POP
// end ;
33317: PPOPN 2
33319: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
33320: LD_EXP 68
33324: PUSH
33325: LD_EXP 74
33329: AND
33330: IFFALSE 33414
33332: GO 33334
33334: DISABLE
33335: LD_INT 0
33337: PPUSH
33338: PPUSH
// begin enable ;
33339: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
33340: LD_ADDR_VAR 0 2
33344: PUSH
33345: LD_INT 22
33347: PUSH
33348: LD_OWVAR 2
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 32
33359: PUSH
33360: LD_INT 3
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PPUSH
33371: CALL_OW 69
33375: ST_TO_ADDR
// if not tmp then
33376: LD_VAR 0 2
33380: NOT
33381: IFFALSE 33385
// exit ;
33383: GO 33414
// for i in tmp do
33385: LD_ADDR_VAR 0 1
33389: PUSH
33390: LD_VAR 0 2
33394: PUSH
33395: FOR_IN
33396: IFFALSE 33412
// begin SetLives ( i , 0 ) ;
33398: LD_VAR 0 1
33402: PPUSH
33403: LD_INT 0
33405: PPUSH
33406: CALL_OW 234
// end ;
33410: GO 33395
33412: POP
33413: POP
// end ;
33414: PPOPN 2
33416: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
33417: LD_EXP 68
33421: PUSH
33422: LD_EXP 71
33426: AND
33427: IFFALSE 33520
33429: GO 33431
33431: DISABLE
33432: LD_INT 0
33434: PPUSH
// begin enable ;
33435: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
33436: LD_ADDR_VAR 0 1
33440: PUSH
33441: LD_INT 22
33443: PUSH
33444: LD_OWVAR 2
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: LD_INT 25
33458: PUSH
33459: LD_INT 5
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 25
33468: PUSH
33469: LD_INT 9
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 25
33478: PUSH
33479: LD_INT 8
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PPUSH
33496: CALL_OW 69
33500: PUSH
33501: FOR_IN
33502: IFFALSE 33518
// begin SetClass ( i , 1 ) ;
33504: LD_VAR 0 1
33508: PPUSH
33509: LD_INT 1
33511: PPUSH
33512: CALL_OW 336
// end ;
33516: GO 33501
33518: POP
33519: POP
// end ;
33520: PPOPN 1
33522: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
33523: LD_EXP 68
33527: PUSH
33528: LD_EXP 72
33532: AND
33533: PUSH
33534: LD_OWVAR 65
33538: PUSH
33539: LD_INT 7
33541: LESS
33542: AND
33543: IFFALSE 33557
33545: GO 33547
33547: DISABLE
// begin enable ;
33548: ENABLE
// game_speed := 7 ;
33549: LD_ADDR_OWVAR 65
33553: PUSH
33554: LD_INT 7
33556: ST_TO_ADDR
// end ;
33557: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
33558: LD_EXP 68
33562: PUSH
33563: LD_EXP 75
33567: AND
33568: IFFALSE 33770
33570: GO 33572
33572: DISABLE
33573: LD_INT 0
33575: PPUSH
33576: PPUSH
33577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33578: LD_ADDR_VAR 0 3
33582: PUSH
33583: LD_INT 81
33585: PUSH
33586: LD_OWVAR 2
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 21
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PPUSH
33609: CALL_OW 69
33613: ST_TO_ADDR
// if not tmp then
33614: LD_VAR 0 3
33618: NOT
33619: IFFALSE 33623
// exit ;
33621: GO 33770
// if tmp > 5 then
33623: LD_VAR 0 3
33627: PUSH
33628: LD_INT 5
33630: GREATER
33631: IFFALSE 33643
// k := 5 else
33633: LD_ADDR_VAR 0 2
33637: PUSH
33638: LD_INT 5
33640: ST_TO_ADDR
33641: GO 33653
// k := tmp ;
33643: LD_ADDR_VAR 0 2
33647: PUSH
33648: LD_VAR 0 3
33652: ST_TO_ADDR
// for i := 1 to k do
33653: LD_ADDR_VAR 0 1
33657: PUSH
33658: DOUBLE
33659: LD_INT 1
33661: DEC
33662: ST_TO_ADDR
33663: LD_VAR 0 2
33667: PUSH
33668: FOR_TO
33669: IFFALSE 33768
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
33671: LD_VAR 0 3
33675: PUSH
33676: LD_VAR 0 1
33680: ARRAY
33681: PPUSH
33682: LD_VAR 0 1
33686: PUSH
33687: LD_INT 4
33689: MOD
33690: PUSH
33691: LD_INT 1
33693: PLUS
33694: PPUSH
33695: CALL_OW 259
33699: PUSH
33700: LD_INT 10
33702: LESS
33703: IFFALSE 33766
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
33705: LD_VAR 0 3
33709: PUSH
33710: LD_VAR 0 1
33714: ARRAY
33715: PPUSH
33716: LD_VAR 0 1
33720: PUSH
33721: LD_INT 4
33723: MOD
33724: PUSH
33725: LD_INT 1
33727: PLUS
33728: PPUSH
33729: LD_VAR 0 3
33733: PUSH
33734: LD_VAR 0 1
33738: ARRAY
33739: PPUSH
33740: LD_VAR 0 1
33744: PUSH
33745: LD_INT 4
33747: MOD
33748: PUSH
33749: LD_INT 1
33751: PLUS
33752: PPUSH
33753: CALL_OW 259
33757: PUSH
33758: LD_INT 1
33760: PLUS
33761: PPUSH
33762: CALL_OW 237
33766: GO 33668
33768: POP
33769: POP
// end ;
33770: PPOPN 3
33772: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
33773: LD_EXP 68
33777: PUSH
33778: LD_EXP 76
33782: AND
33783: IFFALSE 33803
33785: GO 33787
33787: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
33788: LD_INT 4
33790: PPUSH
33791: LD_OWVAR 2
33795: PPUSH
33796: LD_INT 0
33798: PPUSH
33799: CALL_OW 324
33803: END
// every 0 0$1 trigger StreamModeActive and sShovel do
33804: LD_EXP 68
33808: PUSH
33809: LD_EXP 105
33813: AND
33814: IFFALSE 33834
33816: GO 33818
33818: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
33819: LD_INT 19
33821: PPUSH
33822: LD_OWVAR 2
33826: PPUSH
33827: LD_INT 0
33829: PPUSH
33830: CALL_OW 324
33834: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
33835: LD_EXP 68
33839: PUSH
33840: LD_EXP 77
33844: AND
33845: IFFALSE 33947
33847: GO 33849
33849: DISABLE
33850: LD_INT 0
33852: PPUSH
33853: PPUSH
// begin enable ;
33854: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
33855: LD_ADDR_VAR 0 2
33859: PUSH
33860: LD_INT 22
33862: PUSH
33863: LD_OWVAR 2
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: LD_INT 34
33877: PUSH
33878: LD_INT 11
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 34
33887: PUSH
33888: LD_INT 30
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: LIST
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PPUSH
33904: CALL_OW 69
33908: ST_TO_ADDR
// if not tmp then
33909: LD_VAR 0 2
33913: NOT
33914: IFFALSE 33918
// exit ;
33916: GO 33947
// for i in tmp do
33918: LD_ADDR_VAR 0 1
33922: PUSH
33923: LD_VAR 0 2
33927: PUSH
33928: FOR_IN
33929: IFFALSE 33945
// begin SetLives ( i , 0 ) ;
33931: LD_VAR 0 1
33935: PPUSH
33936: LD_INT 0
33938: PPUSH
33939: CALL_OW 234
// end ;
33943: GO 33928
33945: POP
33946: POP
// end ;
33947: PPOPN 2
33949: END
// every 0 0$1 trigger StreamModeActive and sBunker do
33950: LD_EXP 68
33954: PUSH
33955: LD_EXP 78
33959: AND
33960: IFFALSE 33980
33962: GO 33964
33964: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
33965: LD_INT 32
33967: PPUSH
33968: LD_OWVAR 2
33972: PPUSH
33973: LD_INT 0
33975: PPUSH
33976: CALL_OW 324
33980: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
33981: LD_EXP 68
33985: PUSH
33986: LD_EXP 79
33990: AND
33991: IFFALSE 34172
33993: GO 33995
33995: DISABLE
33996: LD_INT 0
33998: PPUSH
33999: PPUSH
34000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
34001: LD_ADDR_VAR 0 2
34005: PUSH
34006: LD_INT 22
34008: PUSH
34009: LD_OWVAR 2
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 33
34020: PUSH
34021: LD_INT 3
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PPUSH
34032: CALL_OW 69
34036: ST_TO_ADDR
// if not tmp then
34037: LD_VAR 0 2
34041: NOT
34042: IFFALSE 34046
// exit ;
34044: GO 34172
// side := 0 ;
34046: LD_ADDR_VAR 0 3
34050: PUSH
34051: LD_INT 0
34053: ST_TO_ADDR
// for i := 1 to 8 do
34054: LD_ADDR_VAR 0 1
34058: PUSH
34059: DOUBLE
34060: LD_INT 1
34062: DEC
34063: ST_TO_ADDR
34064: LD_INT 8
34066: PUSH
34067: FOR_TO
34068: IFFALSE 34116
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
34070: LD_OWVAR 2
34074: PUSH
34075: LD_VAR 0 1
34079: NONEQUAL
34080: PUSH
34081: LD_OWVAR 2
34085: PPUSH
34086: LD_VAR 0 1
34090: PPUSH
34091: CALL_OW 81
34095: PUSH
34096: LD_INT 2
34098: EQUAL
34099: AND
34100: IFFALSE 34114
// begin side := i ;
34102: LD_ADDR_VAR 0 3
34106: PUSH
34107: LD_VAR 0 1
34111: ST_TO_ADDR
// break ;
34112: GO 34116
// end ;
34114: GO 34067
34116: POP
34117: POP
// if not side then
34118: LD_VAR 0 3
34122: NOT
34123: IFFALSE 34127
// exit ;
34125: GO 34172
// for i := 1 to tmp do
34127: LD_ADDR_VAR 0 1
34131: PUSH
34132: DOUBLE
34133: LD_INT 1
34135: DEC
34136: ST_TO_ADDR
34137: LD_VAR 0 2
34141: PUSH
34142: FOR_TO
34143: IFFALSE 34170
// if Prob ( 60 ) then
34145: LD_INT 60
34147: PPUSH
34148: CALL_OW 13
34152: IFFALSE 34168
// SetSide ( i , side ) ;
34154: LD_VAR 0 1
34158: PPUSH
34159: LD_VAR 0 3
34163: PPUSH
34164: CALL_OW 235
34168: GO 34142
34170: POP
34171: POP
// end ;
34172: PPOPN 3
34174: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
34175: LD_EXP 68
34179: PUSH
34180: LD_EXP 81
34184: AND
34185: IFFALSE 34304
34187: GO 34189
34189: DISABLE
34190: LD_INT 0
34192: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
34193: LD_ADDR_VAR 0 1
34197: PUSH
34198: LD_INT 22
34200: PUSH
34201: LD_OWVAR 2
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 21
34212: PUSH
34213: LD_INT 1
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 3
34222: PUSH
34223: LD_INT 23
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: PPUSH
34242: CALL_OW 69
34246: PUSH
34247: FOR_IN
34248: IFFALSE 34302
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
34250: LD_VAR 0 1
34254: PPUSH
34255: CALL_OW 257
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: LD_INT 3
34268: PUSH
34269: LD_INT 4
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: IN
34278: IFFALSE 34300
// SetClass ( un , rand ( 1 , 4 ) ) ;
34280: LD_VAR 0 1
34284: PPUSH
34285: LD_INT 1
34287: PPUSH
34288: LD_INT 4
34290: PPUSH
34291: CALL_OW 12
34295: PPUSH
34296: CALL_OW 336
34300: GO 34247
34302: POP
34303: POP
// end ;
34304: PPOPN 1
34306: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
34307: LD_EXP 68
34311: PUSH
34312: LD_EXP 80
34316: AND
34317: IFFALSE 34396
34319: GO 34321
34321: DISABLE
34322: LD_INT 0
34324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34325: LD_ADDR_VAR 0 1
34329: PUSH
34330: LD_INT 22
34332: PUSH
34333: LD_OWVAR 2
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 21
34344: PUSH
34345: LD_INT 3
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PPUSH
34356: CALL_OW 69
34360: ST_TO_ADDR
// if not tmp then
34361: LD_VAR 0 1
34365: NOT
34366: IFFALSE 34370
// exit ;
34368: GO 34396
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
34370: LD_VAR 0 1
34374: PUSH
34375: LD_INT 1
34377: PPUSH
34378: LD_VAR 0 1
34382: PPUSH
34383: CALL_OW 12
34387: ARRAY
34388: PPUSH
34389: LD_INT 100
34391: PPUSH
34392: CALL_OW 234
// end ;
34396: PPOPN 1
34398: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
34399: LD_EXP 68
34403: PUSH
34404: LD_EXP 82
34408: AND
34409: IFFALSE 34507
34411: GO 34413
34413: DISABLE
34414: LD_INT 0
34416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
34417: LD_ADDR_VAR 0 1
34421: PUSH
34422: LD_INT 22
34424: PUSH
34425: LD_OWVAR 2
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 21
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PPUSH
34448: CALL_OW 69
34452: ST_TO_ADDR
// if not tmp then
34453: LD_VAR 0 1
34457: NOT
34458: IFFALSE 34462
// exit ;
34460: GO 34507
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
34462: LD_VAR 0 1
34466: PUSH
34467: LD_INT 1
34469: PPUSH
34470: LD_VAR 0 1
34474: PPUSH
34475: CALL_OW 12
34479: ARRAY
34480: PPUSH
34481: LD_INT 1
34483: PPUSH
34484: LD_INT 4
34486: PPUSH
34487: CALL_OW 12
34491: PPUSH
34492: LD_INT 3000
34494: PPUSH
34495: LD_INT 9000
34497: PPUSH
34498: CALL_OW 12
34502: PPUSH
34503: CALL_OW 492
// end ;
34507: PPOPN 1
34509: END
// every 0 0$1 trigger StreamModeActive and sDepot do
34510: LD_EXP 68
34514: PUSH
34515: LD_EXP 83
34519: AND
34520: IFFALSE 34540
34522: GO 34524
34524: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
34525: LD_INT 1
34527: PPUSH
34528: LD_OWVAR 2
34532: PPUSH
34533: LD_INT 0
34535: PPUSH
34536: CALL_OW 324
34540: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
34541: LD_EXP 68
34545: PUSH
34546: LD_EXP 84
34550: AND
34551: IFFALSE 34634
34553: GO 34555
34555: DISABLE
34556: LD_INT 0
34558: PPUSH
34559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34560: LD_ADDR_VAR 0 2
34564: PUSH
34565: LD_INT 22
34567: PUSH
34568: LD_OWVAR 2
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 21
34579: PUSH
34580: LD_INT 3
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PPUSH
34591: CALL_OW 69
34595: ST_TO_ADDR
// if not tmp then
34596: LD_VAR 0 2
34600: NOT
34601: IFFALSE 34605
// exit ;
34603: GO 34634
// for i in tmp do
34605: LD_ADDR_VAR 0 1
34609: PUSH
34610: LD_VAR 0 2
34614: PUSH
34615: FOR_IN
34616: IFFALSE 34632
// SetBLevel ( i , 10 ) ;
34618: LD_VAR 0 1
34622: PPUSH
34623: LD_INT 10
34625: PPUSH
34626: CALL_OW 241
34630: GO 34615
34632: POP
34633: POP
// end ;
34634: PPOPN 2
34636: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
34637: LD_EXP 68
34641: PUSH
34642: LD_EXP 85
34646: AND
34647: IFFALSE 34758
34649: GO 34651
34651: DISABLE
34652: LD_INT 0
34654: PPUSH
34655: PPUSH
34656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34657: LD_ADDR_VAR 0 3
34661: PUSH
34662: LD_INT 22
34664: PUSH
34665: LD_OWVAR 2
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 25
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PPUSH
34688: CALL_OW 69
34692: ST_TO_ADDR
// if not tmp then
34693: LD_VAR 0 3
34697: NOT
34698: IFFALSE 34702
// exit ;
34700: GO 34758
// un := tmp [ rand ( 1 , tmp ) ] ;
34702: LD_ADDR_VAR 0 2
34706: PUSH
34707: LD_VAR 0 3
34711: PUSH
34712: LD_INT 1
34714: PPUSH
34715: LD_VAR 0 3
34719: PPUSH
34720: CALL_OW 12
34724: ARRAY
34725: ST_TO_ADDR
// if Crawls ( un ) then
34726: LD_VAR 0 2
34730: PPUSH
34731: CALL_OW 318
34735: IFFALSE 34746
// ComWalk ( un ) ;
34737: LD_VAR 0 2
34741: PPUSH
34742: CALL_OW 138
// SetClass ( un , class_sniper ) ;
34746: LD_VAR 0 2
34750: PPUSH
34751: LD_INT 5
34753: PPUSH
34754: CALL_OW 336
// end ;
34758: PPOPN 3
34760: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
34761: LD_EXP 68
34765: PUSH
34766: LD_EXP 86
34770: AND
34771: PUSH
34772: LD_OWVAR 67
34776: PUSH
34777: LD_INT 4
34779: LESS
34780: AND
34781: IFFALSE 34800
34783: GO 34785
34785: DISABLE
// begin Difficulty := Difficulty + 1 ;
34786: LD_ADDR_OWVAR 67
34790: PUSH
34791: LD_OWVAR 67
34795: PUSH
34796: LD_INT 1
34798: PLUS
34799: ST_TO_ADDR
// end ;
34800: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
34801: LD_EXP 68
34805: PUSH
34806: LD_EXP 87
34810: AND
34811: IFFALSE 34914
34813: GO 34815
34815: DISABLE
34816: LD_INT 0
34818: PPUSH
// begin for i := 1 to 5 do
34819: LD_ADDR_VAR 0 1
34823: PUSH
34824: DOUBLE
34825: LD_INT 1
34827: DEC
34828: ST_TO_ADDR
34829: LD_INT 5
34831: PUSH
34832: FOR_TO
34833: IFFALSE 34912
// begin uc_nation := nation_nature ;
34835: LD_ADDR_OWVAR 21
34839: PUSH
34840: LD_INT 0
34842: ST_TO_ADDR
// uc_side := 0 ;
34843: LD_ADDR_OWVAR 20
34847: PUSH
34848: LD_INT 0
34850: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34851: LD_ADDR_OWVAR 29
34855: PUSH
34856: LD_INT 12
34858: PUSH
34859: LD_INT 12
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: ST_TO_ADDR
// hc_agressivity := 20 ;
34866: LD_ADDR_OWVAR 35
34870: PUSH
34871: LD_INT 20
34873: ST_TO_ADDR
// hc_class := class_tiger ;
34874: LD_ADDR_OWVAR 28
34878: PUSH
34879: LD_INT 14
34881: ST_TO_ADDR
// hc_gallery :=  ;
34882: LD_ADDR_OWVAR 33
34886: PUSH
34887: LD_STRING 
34889: ST_TO_ADDR
// hc_name :=  ;
34890: LD_ADDR_OWVAR 26
34894: PUSH
34895: LD_STRING 
34897: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
34898: CALL_OW 44
34902: PPUSH
34903: LD_INT 0
34905: PPUSH
34906: CALL_OW 51
// end ;
34910: GO 34832
34912: POP
34913: POP
// end ;
34914: PPOPN 1
34916: END
// every 0 0$1 trigger StreamModeActive and sBomb do
34917: LD_EXP 68
34921: PUSH
34922: LD_EXP 88
34926: AND
34927: IFFALSE 34936
34929: GO 34931
34931: DISABLE
// StreamSibBomb ;
34932: CALL 34937 0 0
34936: END
// export function StreamSibBomb ; var i , x , y ; begin
34937: LD_INT 0
34939: PPUSH
34940: PPUSH
34941: PPUSH
34942: PPUSH
// result := false ;
34943: LD_ADDR_VAR 0 1
34947: PUSH
34948: LD_INT 0
34950: ST_TO_ADDR
// for i := 1 to 16 do
34951: LD_ADDR_VAR 0 2
34955: PUSH
34956: DOUBLE
34957: LD_INT 1
34959: DEC
34960: ST_TO_ADDR
34961: LD_INT 16
34963: PUSH
34964: FOR_TO
34965: IFFALSE 35164
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34967: LD_ADDR_VAR 0 3
34971: PUSH
34972: LD_INT 10
34974: PUSH
34975: LD_INT 20
34977: PUSH
34978: LD_INT 30
34980: PUSH
34981: LD_INT 40
34983: PUSH
34984: LD_INT 50
34986: PUSH
34987: LD_INT 60
34989: PUSH
34990: LD_INT 70
34992: PUSH
34993: LD_INT 80
34995: PUSH
34996: LD_INT 90
34998: PUSH
34999: LD_INT 100
35001: PUSH
35002: LD_INT 110
35004: PUSH
35005: LD_INT 120
35007: PUSH
35008: LD_INT 130
35010: PUSH
35011: LD_INT 140
35013: PUSH
35014: LD_INT 150
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: PPUSH
35037: LD_INT 15
35039: PPUSH
35040: CALL_OW 12
35044: ARRAY
35045: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35046: LD_ADDR_VAR 0 4
35050: PUSH
35051: LD_INT 10
35053: PUSH
35054: LD_INT 20
35056: PUSH
35057: LD_INT 30
35059: PUSH
35060: LD_INT 40
35062: PUSH
35063: LD_INT 50
35065: PUSH
35066: LD_INT 60
35068: PUSH
35069: LD_INT 70
35071: PUSH
35072: LD_INT 80
35074: PUSH
35075: LD_INT 90
35077: PUSH
35078: LD_INT 100
35080: PUSH
35081: LD_INT 110
35083: PUSH
35084: LD_INT 120
35086: PUSH
35087: LD_INT 130
35089: PUSH
35090: LD_INT 140
35092: PUSH
35093: LD_INT 150
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PPUSH
35116: LD_INT 15
35118: PPUSH
35119: CALL_OW 12
35123: ARRAY
35124: ST_TO_ADDR
// if ValidHex ( x , y ) then
35125: LD_VAR 0 3
35129: PPUSH
35130: LD_VAR 0 4
35134: PPUSH
35135: CALL_OW 488
35139: IFFALSE 35162
// begin result := [ x , y ] ;
35141: LD_ADDR_VAR 0 1
35145: PUSH
35146: LD_VAR 0 3
35150: PUSH
35151: LD_VAR 0 4
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: ST_TO_ADDR
// break ;
35160: GO 35164
// end ; end ;
35162: GO 34964
35164: POP
35165: POP
// if result then
35166: LD_VAR 0 1
35170: IFFALSE 35230
// begin ToLua ( playSibBomb() ) ;
35172: LD_STRING playSibBomb()
35174: PPUSH
35175: CALL_OW 559
// wait ( 0 0$14 ) ;
35179: LD_INT 490
35181: PPUSH
35182: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
35186: LD_VAR 0 1
35190: PUSH
35191: LD_INT 1
35193: ARRAY
35194: PPUSH
35195: LD_VAR 0 1
35199: PUSH
35200: LD_INT 2
35202: ARRAY
35203: PPUSH
35204: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
35208: LD_VAR 0 1
35212: PUSH
35213: LD_INT 1
35215: ARRAY
35216: PPUSH
35217: LD_VAR 0 1
35221: PUSH
35222: LD_INT 2
35224: ARRAY
35225: PPUSH
35226: CALL_OW 429
// end ; end ;
35230: LD_VAR 0 1
35234: RET
// every 0 0$1 trigger StreamModeActive and sReset do
35235: LD_EXP 68
35239: PUSH
35240: LD_EXP 90
35244: AND
35245: IFFALSE 35257
35247: GO 35249
35249: DISABLE
// YouLost (  ) ;
35250: LD_STRING 
35252: PPUSH
35253: CALL_OW 104
35257: END
// every 0 0$1 trigger StreamModeActive and sFog do
35258: LD_EXP 68
35262: PUSH
35263: LD_EXP 89
35267: AND
35268: IFFALSE 35282
35270: GO 35272
35272: DISABLE
// FogOff ( your_side ) ;
35273: LD_OWVAR 2
35277: PPUSH
35278: CALL_OW 344
35282: END
// every 0 0$1 trigger StreamModeActive and sSun do
35283: LD_EXP 68
35287: PUSH
35288: LD_EXP 91
35292: AND
35293: IFFALSE 35321
35295: GO 35297
35297: DISABLE
// begin solar_recharge_percent := 0 ;
35298: LD_ADDR_OWVAR 79
35302: PUSH
35303: LD_INT 0
35305: ST_TO_ADDR
// wait ( 5 5$00 ) ;
35306: LD_INT 10500
35308: PPUSH
35309: CALL_OW 67
// solar_recharge_percent := 100 ;
35313: LD_ADDR_OWVAR 79
35317: PUSH
35318: LD_INT 100
35320: ST_TO_ADDR
// end ;
35321: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
35322: LD_EXP 68
35326: PUSH
35327: LD_EXP 92
35331: AND
35332: IFFALSE 35571
35334: GO 35336
35336: DISABLE
35337: LD_INT 0
35339: PPUSH
35340: PPUSH
35341: PPUSH
// begin tmp := [ ] ;
35342: LD_ADDR_VAR 0 3
35346: PUSH
35347: EMPTY
35348: ST_TO_ADDR
// for i := 1 to 6 do
35349: LD_ADDR_VAR 0 1
35353: PUSH
35354: DOUBLE
35355: LD_INT 1
35357: DEC
35358: ST_TO_ADDR
35359: LD_INT 6
35361: PUSH
35362: FOR_TO
35363: IFFALSE 35468
// begin uc_nation := nation_nature ;
35365: LD_ADDR_OWVAR 21
35369: PUSH
35370: LD_INT 0
35372: ST_TO_ADDR
// uc_side := 0 ;
35373: LD_ADDR_OWVAR 20
35377: PUSH
35378: LD_INT 0
35380: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35381: LD_ADDR_OWVAR 29
35385: PUSH
35386: LD_INT 12
35388: PUSH
35389: LD_INT 12
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: ST_TO_ADDR
// hc_agressivity := 20 ;
35396: LD_ADDR_OWVAR 35
35400: PUSH
35401: LD_INT 20
35403: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
35404: LD_ADDR_OWVAR 28
35408: PUSH
35409: LD_INT 17
35411: ST_TO_ADDR
// hc_gallery :=  ;
35412: LD_ADDR_OWVAR 33
35416: PUSH
35417: LD_STRING 
35419: ST_TO_ADDR
// hc_name :=  ;
35420: LD_ADDR_OWVAR 26
35424: PUSH
35425: LD_STRING 
35427: ST_TO_ADDR
// un := CreateHuman ;
35428: LD_ADDR_VAR 0 2
35432: PUSH
35433: CALL_OW 44
35437: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
35438: LD_VAR 0 2
35442: PPUSH
35443: LD_INT 1
35445: PPUSH
35446: CALL_OW 51
// tmp := tmp ^ un ;
35450: LD_ADDR_VAR 0 3
35454: PUSH
35455: LD_VAR 0 3
35459: PUSH
35460: LD_VAR 0 2
35464: ADD
35465: ST_TO_ADDR
// end ;
35466: GO 35362
35468: POP
35469: POP
// repeat wait ( 0 0$1 ) ;
35470: LD_INT 35
35472: PPUSH
35473: CALL_OW 67
// for un in tmp do
35477: LD_ADDR_VAR 0 2
35481: PUSH
35482: LD_VAR 0 3
35486: PUSH
35487: FOR_IN
35488: IFFALSE 35562
// begin if IsDead ( un ) then
35490: LD_VAR 0 2
35494: PPUSH
35495: CALL_OW 301
35499: IFFALSE 35519
// begin tmp := tmp diff un ;
35501: LD_ADDR_VAR 0 3
35505: PUSH
35506: LD_VAR 0 3
35510: PUSH
35511: LD_VAR 0 2
35515: DIFF
35516: ST_TO_ADDR
// continue ;
35517: GO 35487
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
35519: LD_VAR 0 2
35523: PPUSH
35524: LD_INT 3
35526: PUSH
35527: LD_INT 22
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PPUSH
35541: CALL_OW 69
35545: PPUSH
35546: LD_VAR 0 2
35550: PPUSH
35551: CALL_OW 74
35555: PPUSH
35556: CALL_OW 115
// end ;
35560: GO 35487
35562: POP
35563: POP
// until not tmp ;
35564: LD_VAR 0 3
35568: NOT
35569: IFFALSE 35470
// end ;
35571: PPOPN 3
35573: END
// every 0 0$1 trigger StreamModeActive and sTroll do
35574: LD_EXP 68
35578: PUSH
35579: LD_EXP 93
35583: AND
35584: IFFALSE 35638
35586: GO 35588
35588: DISABLE
// begin ToLua ( displayTroll(); ) ;
35589: LD_STRING displayTroll();
35591: PPUSH
35592: CALL_OW 559
// wait ( 3 3$00 ) ;
35596: LD_INT 6300
35598: PPUSH
35599: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35603: LD_STRING hideTroll();
35605: PPUSH
35606: CALL_OW 559
// wait ( 1 1$00 ) ;
35610: LD_INT 2100
35612: PPUSH
35613: CALL_OW 67
// ToLua ( displayTroll(); ) ;
35617: LD_STRING displayTroll();
35619: PPUSH
35620: CALL_OW 559
// wait ( 1 1$00 ) ;
35624: LD_INT 2100
35626: PPUSH
35627: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35631: LD_STRING hideTroll();
35633: PPUSH
35634: CALL_OW 559
// end ;
35638: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
35639: LD_EXP 68
35643: PUSH
35644: LD_EXP 94
35648: AND
35649: IFFALSE 35712
35651: GO 35653
35653: DISABLE
35654: LD_INT 0
35656: PPUSH
// begin p := 0 ;
35657: LD_ADDR_VAR 0 1
35661: PUSH
35662: LD_INT 0
35664: ST_TO_ADDR
// repeat game_speed := 1 ;
35665: LD_ADDR_OWVAR 65
35669: PUSH
35670: LD_INT 1
35672: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35673: LD_INT 35
35675: PPUSH
35676: CALL_OW 67
// p := p + 1 ;
35680: LD_ADDR_VAR 0 1
35684: PUSH
35685: LD_VAR 0 1
35689: PUSH
35690: LD_INT 1
35692: PLUS
35693: ST_TO_ADDR
// until p >= 60 ;
35694: LD_VAR 0 1
35698: PUSH
35699: LD_INT 60
35701: GREATEREQUAL
35702: IFFALSE 35665
// game_speed := 4 ;
35704: LD_ADDR_OWVAR 65
35708: PUSH
35709: LD_INT 4
35711: ST_TO_ADDR
// end ;
35712: PPOPN 1
35714: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
35715: LD_EXP 68
35719: PUSH
35720: LD_EXP 95
35724: AND
35725: IFFALSE 35871
35727: GO 35729
35729: DISABLE
35730: LD_INT 0
35732: PPUSH
35733: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35734: LD_ADDR_VAR 0 1
35738: PUSH
35739: LD_INT 22
35741: PUSH
35742: LD_OWVAR 2
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: LD_INT 30
35756: PUSH
35757: LD_INT 0
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 30
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PPUSH
35783: CALL_OW 69
35787: ST_TO_ADDR
// if not depot then
35788: LD_VAR 0 1
35792: NOT
35793: IFFALSE 35797
// exit ;
35795: GO 35871
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
35797: LD_ADDR_VAR 0 2
35801: PUSH
35802: LD_VAR 0 1
35806: PUSH
35807: LD_INT 1
35809: PPUSH
35810: LD_VAR 0 1
35814: PPUSH
35815: CALL_OW 12
35819: ARRAY
35820: PPUSH
35821: CALL_OW 274
35825: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
35826: LD_VAR 0 2
35830: PPUSH
35831: LD_INT 1
35833: PPUSH
35834: LD_INT 0
35836: PPUSH
35837: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
35841: LD_VAR 0 2
35845: PPUSH
35846: LD_INT 2
35848: PPUSH
35849: LD_INT 0
35851: PPUSH
35852: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
35856: LD_VAR 0 2
35860: PPUSH
35861: LD_INT 3
35863: PPUSH
35864: LD_INT 0
35866: PPUSH
35867: CALL_OW 277
// end ;
35871: PPOPN 2
35873: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
35874: LD_EXP 68
35878: PUSH
35879: LD_EXP 96
35883: AND
35884: IFFALSE 35981
35886: GO 35888
35888: DISABLE
35889: LD_INT 0
35891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35892: LD_ADDR_VAR 0 1
35896: PUSH
35897: LD_INT 22
35899: PUSH
35900: LD_OWVAR 2
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 21
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: LD_INT 23
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: PPUSH
35941: CALL_OW 69
35945: ST_TO_ADDR
// if not tmp then
35946: LD_VAR 0 1
35950: NOT
35951: IFFALSE 35955
// exit ;
35953: GO 35981
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
35955: LD_VAR 0 1
35959: PUSH
35960: LD_INT 1
35962: PPUSH
35963: LD_VAR 0 1
35967: PPUSH
35968: CALL_OW 12
35972: ARRAY
35973: PPUSH
35974: LD_INT 200
35976: PPUSH
35977: CALL_OW 234
// end ;
35981: PPOPN 1
35983: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
35984: LD_EXP 68
35988: PUSH
35989: LD_EXP 97
35993: AND
35994: IFFALSE 36073
35996: GO 35998
35998: DISABLE
35999: LD_INT 0
36001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
36002: LD_ADDR_VAR 0 1
36006: PUSH
36007: LD_INT 22
36009: PUSH
36010: LD_OWVAR 2
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 21
36021: PUSH
36022: LD_INT 2
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PPUSH
36033: CALL_OW 69
36037: ST_TO_ADDR
// if not tmp then
36038: LD_VAR 0 1
36042: NOT
36043: IFFALSE 36047
// exit ;
36045: GO 36073
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
36047: LD_VAR 0 1
36051: PUSH
36052: LD_INT 1
36054: PPUSH
36055: LD_VAR 0 1
36059: PPUSH
36060: CALL_OW 12
36064: ARRAY
36065: PPUSH
36066: LD_INT 60
36068: PPUSH
36069: CALL_OW 234
// end ;
36073: PPOPN 1
36075: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
36076: LD_EXP 68
36080: PUSH
36081: LD_EXP 98
36085: AND
36086: IFFALSE 36185
36088: GO 36090
36090: DISABLE
36091: LD_INT 0
36093: PPUSH
36094: PPUSH
// begin enable ;
36095: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
36096: LD_ADDR_VAR 0 1
36100: PUSH
36101: LD_INT 22
36103: PUSH
36104: LD_OWVAR 2
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 61
36115: PUSH
36116: EMPTY
36117: LIST
36118: PUSH
36119: LD_INT 33
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: LIST
36133: PPUSH
36134: CALL_OW 69
36138: ST_TO_ADDR
// if not tmp then
36139: LD_VAR 0 1
36143: NOT
36144: IFFALSE 36148
// exit ;
36146: GO 36185
// for i in tmp do
36148: LD_ADDR_VAR 0 2
36152: PUSH
36153: LD_VAR 0 1
36157: PUSH
36158: FOR_IN
36159: IFFALSE 36183
// if IsControledBy ( i ) then
36161: LD_VAR 0 2
36165: PPUSH
36166: CALL_OW 312
36170: IFFALSE 36181
// ComUnlink ( i ) ;
36172: LD_VAR 0 2
36176: PPUSH
36177: CALL_OW 136
36181: GO 36158
36183: POP
36184: POP
// end ;
36185: PPOPN 2
36187: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
36188: LD_EXP 68
36192: PUSH
36193: LD_EXP 99
36197: AND
36198: IFFALSE 36338
36200: GO 36202
36202: DISABLE
36203: LD_INT 0
36205: PPUSH
36206: PPUSH
// begin ToLua ( displayPowell(); ) ;
36207: LD_STRING displayPowell();
36209: PPUSH
36210: CALL_OW 559
// uc_side := 0 ;
36214: LD_ADDR_OWVAR 20
36218: PUSH
36219: LD_INT 0
36221: ST_TO_ADDR
// uc_nation := 2 ;
36222: LD_ADDR_OWVAR 21
36226: PUSH
36227: LD_INT 2
36229: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
36230: LD_ADDR_OWVAR 37
36234: PUSH
36235: LD_INT 14
36237: ST_TO_ADDR
// vc_engine := engine_siberite ;
36238: LD_ADDR_OWVAR 39
36242: PUSH
36243: LD_INT 3
36245: ST_TO_ADDR
// vc_control := control_apeman ;
36246: LD_ADDR_OWVAR 38
36250: PUSH
36251: LD_INT 5
36253: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
36254: LD_ADDR_OWVAR 40
36258: PUSH
36259: LD_INT 29
36261: ST_TO_ADDR
// un := CreateVehicle ;
36262: LD_ADDR_VAR 0 2
36266: PUSH
36267: CALL_OW 45
36271: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36272: LD_VAR 0 2
36276: PPUSH
36277: LD_INT 1
36279: PPUSH
36280: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36284: LD_INT 35
36286: PPUSH
36287: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36291: LD_VAR 0 2
36295: PPUSH
36296: LD_INT 22
36298: PUSH
36299: LD_OWVAR 2
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PPUSH
36308: CALL_OW 69
36312: PPUSH
36313: LD_VAR 0 2
36317: PPUSH
36318: CALL_OW 74
36322: PPUSH
36323: CALL_OW 115
// until IsDead ( un ) ;
36327: LD_VAR 0 2
36331: PPUSH
36332: CALL_OW 301
36336: IFFALSE 36284
// end ;
36338: PPOPN 2
36340: END
// every 0 0$1 trigger StreamModeActive and sStu do
36341: LD_EXP 68
36345: PUSH
36346: LD_EXP 107
36350: AND
36351: IFFALSE 36367
36353: GO 36355
36355: DISABLE
// begin ToLua ( displayStucuk(); ) ;
36356: LD_STRING displayStucuk();
36358: PPUSH
36359: CALL_OW 559
// ResetFog ;
36363: CALL_OW 335
// end ;
36367: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
36368: LD_EXP 68
36372: PUSH
36373: LD_EXP 100
36377: AND
36378: IFFALSE 36519
36380: GO 36382
36382: DISABLE
36383: LD_INT 0
36385: PPUSH
36386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36387: LD_ADDR_VAR 0 2
36391: PUSH
36392: LD_INT 22
36394: PUSH
36395: LD_OWVAR 2
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 21
36406: PUSH
36407: LD_INT 1
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PPUSH
36418: CALL_OW 69
36422: ST_TO_ADDR
// if not tmp then
36423: LD_VAR 0 2
36427: NOT
36428: IFFALSE 36432
// exit ;
36430: GO 36519
// un := tmp [ rand ( 1 , tmp ) ] ;
36432: LD_ADDR_VAR 0 1
36436: PUSH
36437: LD_VAR 0 2
36441: PUSH
36442: LD_INT 1
36444: PPUSH
36445: LD_VAR 0 2
36449: PPUSH
36450: CALL_OW 12
36454: ARRAY
36455: ST_TO_ADDR
// SetSide ( un , 0 ) ;
36456: LD_VAR 0 1
36460: PPUSH
36461: LD_INT 0
36463: PPUSH
36464: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
36468: LD_VAR 0 1
36472: PPUSH
36473: LD_OWVAR 3
36477: PUSH
36478: LD_VAR 0 1
36482: DIFF
36483: PPUSH
36484: LD_VAR 0 1
36488: PPUSH
36489: CALL_OW 74
36493: PPUSH
36494: CALL_OW 115
// wait ( 0 0$20 ) ;
36498: LD_INT 700
36500: PPUSH
36501: CALL_OW 67
// SetSide ( un , your_side ) ;
36505: LD_VAR 0 1
36509: PPUSH
36510: LD_OWVAR 2
36514: PPUSH
36515: CALL_OW 235
// end ;
36519: PPOPN 2
36521: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
36522: LD_EXP 68
36526: PUSH
36527: LD_EXP 101
36531: AND
36532: IFFALSE 36638
36534: GO 36536
36536: DISABLE
36537: LD_INT 0
36539: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36540: LD_ADDR_VAR 0 1
36544: PUSH
36545: LD_INT 22
36547: PUSH
36548: LD_OWVAR 2
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 30
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 30
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PPUSH
36589: CALL_OW 69
36593: ST_TO_ADDR
// if not depot then
36594: LD_VAR 0 1
36598: NOT
36599: IFFALSE 36603
// exit ;
36601: GO 36638
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
36603: LD_VAR 0 1
36607: PUSH
36608: LD_INT 1
36610: ARRAY
36611: PPUSH
36612: CALL_OW 250
36616: PPUSH
36617: LD_VAR 0 1
36621: PUSH
36622: LD_INT 1
36624: ARRAY
36625: PPUSH
36626: CALL_OW 251
36630: PPUSH
36631: LD_INT 70
36633: PPUSH
36634: CALL_OW 495
// end ;
36638: PPOPN 1
36640: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
36641: LD_EXP 68
36645: PUSH
36646: LD_EXP 102
36650: AND
36651: IFFALSE 36862
36653: GO 36655
36655: DISABLE
36656: LD_INT 0
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36663: LD_ADDR_VAR 0 5
36667: PUSH
36668: LD_INT 22
36670: PUSH
36671: LD_OWVAR 2
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 21
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PPUSH
36694: CALL_OW 69
36698: ST_TO_ADDR
// if not tmp then
36699: LD_VAR 0 5
36703: NOT
36704: IFFALSE 36708
// exit ;
36706: GO 36862
// for i in tmp do
36708: LD_ADDR_VAR 0 1
36712: PUSH
36713: LD_VAR 0 5
36717: PUSH
36718: FOR_IN
36719: IFFALSE 36860
// begin d := rand ( 0 , 5 ) ;
36721: LD_ADDR_VAR 0 4
36725: PUSH
36726: LD_INT 0
36728: PPUSH
36729: LD_INT 5
36731: PPUSH
36732: CALL_OW 12
36736: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
36737: LD_ADDR_VAR 0 2
36741: PUSH
36742: LD_VAR 0 1
36746: PPUSH
36747: CALL_OW 250
36751: PPUSH
36752: LD_VAR 0 4
36756: PPUSH
36757: LD_INT 3
36759: PPUSH
36760: LD_INT 12
36762: PPUSH
36763: CALL_OW 12
36767: PPUSH
36768: CALL_OW 272
36772: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
36773: LD_ADDR_VAR 0 3
36777: PUSH
36778: LD_VAR 0 1
36782: PPUSH
36783: CALL_OW 251
36787: PPUSH
36788: LD_VAR 0 4
36792: PPUSH
36793: LD_INT 3
36795: PPUSH
36796: LD_INT 12
36798: PPUSH
36799: CALL_OW 12
36803: PPUSH
36804: CALL_OW 273
36808: ST_TO_ADDR
// if ValidHex ( x , y ) then
36809: LD_VAR 0 2
36813: PPUSH
36814: LD_VAR 0 3
36818: PPUSH
36819: CALL_OW 488
36823: IFFALSE 36858
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
36825: LD_VAR 0 1
36829: PPUSH
36830: LD_VAR 0 2
36834: PPUSH
36835: LD_VAR 0 3
36839: PPUSH
36840: LD_INT 3
36842: PPUSH
36843: LD_INT 6
36845: PPUSH
36846: CALL_OW 12
36850: PPUSH
36851: LD_INT 1
36853: PPUSH
36854: CALL_OW 483
// end ;
36858: GO 36718
36860: POP
36861: POP
// end ;
36862: PPOPN 5
36864: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
36865: LD_EXP 68
36869: PUSH
36870: LD_EXP 103
36874: AND
36875: IFFALSE 36969
36877: GO 36879
36879: DISABLE
36880: LD_INT 0
36882: PPUSH
36883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
36884: LD_ADDR_VAR 0 2
36888: PUSH
36889: LD_INT 22
36891: PUSH
36892: LD_OWVAR 2
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 32
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 21
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: LIST
36925: PPUSH
36926: CALL_OW 69
36930: ST_TO_ADDR
// if not tmp then
36931: LD_VAR 0 2
36935: NOT
36936: IFFALSE 36940
// exit ;
36938: GO 36969
// for i in tmp do
36940: LD_ADDR_VAR 0 1
36944: PUSH
36945: LD_VAR 0 2
36949: PUSH
36950: FOR_IN
36951: IFFALSE 36967
// SetFuel ( i , 0 ) ;
36953: LD_VAR 0 1
36957: PPUSH
36958: LD_INT 0
36960: PPUSH
36961: CALL_OW 240
36965: GO 36950
36967: POP
36968: POP
// end ;
36969: PPOPN 2
36971: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
36972: LD_EXP 68
36976: PUSH
36977: LD_EXP 104
36981: AND
36982: IFFALSE 37048
36984: GO 36986
36986: DISABLE
36987: LD_INT 0
36989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
36990: LD_ADDR_VAR 0 1
36994: PUSH
36995: LD_INT 22
36997: PUSH
36998: LD_OWVAR 2
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 30
37009: PUSH
37010: LD_INT 29
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PPUSH
37021: CALL_OW 69
37025: ST_TO_ADDR
// if not tmp then
37026: LD_VAR 0 1
37030: NOT
37031: IFFALSE 37035
// exit ;
37033: GO 37048
// DestroyUnit ( tmp [ 1 ] ) ;
37035: LD_VAR 0 1
37039: PUSH
37040: LD_INT 1
37042: ARRAY
37043: PPUSH
37044: CALL_OW 65
// end ;
37048: PPOPN 1
37050: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
37051: LD_EXP 68
37055: PUSH
37056: LD_EXP 106
37060: AND
37061: IFFALSE 37190
37063: GO 37065
37065: DISABLE
37066: LD_INT 0
37068: PPUSH
// begin uc_side := 0 ;
37069: LD_ADDR_OWVAR 20
37073: PUSH
37074: LD_INT 0
37076: ST_TO_ADDR
// uc_nation := nation_arabian ;
37077: LD_ADDR_OWVAR 21
37081: PUSH
37082: LD_INT 2
37084: ST_TO_ADDR
// hc_gallery :=  ;
37085: LD_ADDR_OWVAR 33
37089: PUSH
37090: LD_STRING 
37092: ST_TO_ADDR
// hc_name :=  ;
37093: LD_ADDR_OWVAR 26
37097: PUSH
37098: LD_STRING 
37100: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
37101: LD_INT 1
37103: PPUSH
37104: LD_INT 11
37106: PPUSH
37107: LD_INT 10
37109: PPUSH
37110: CALL_OW 380
// un := CreateHuman ;
37114: LD_ADDR_VAR 0 1
37118: PUSH
37119: CALL_OW 44
37123: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37124: LD_VAR 0 1
37128: PPUSH
37129: LD_INT 1
37131: PPUSH
37132: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37136: LD_INT 35
37138: PPUSH
37139: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37143: LD_VAR 0 1
37147: PPUSH
37148: LD_INT 22
37150: PUSH
37151: LD_OWVAR 2
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PPUSH
37160: CALL_OW 69
37164: PPUSH
37165: LD_VAR 0 1
37169: PPUSH
37170: CALL_OW 74
37174: PPUSH
37175: CALL_OW 115
// until IsDead ( un ) ;
37179: LD_VAR 0 1
37183: PPUSH
37184: CALL_OW 301
37188: IFFALSE 37136
// end ;
37190: PPOPN 1
37192: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
37193: LD_EXP 68
37197: PUSH
37198: LD_EXP 108
37202: AND
37203: IFFALSE 37215
37205: GO 37207
37207: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
37208: LD_STRING earthquake(getX(game), 0, 32)
37210: PPUSH
37211: CALL_OW 559
37215: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
37216: LD_EXP 68
37220: PUSH
37221: LD_EXP 109
37225: AND
37226: IFFALSE 37317
37228: GO 37230
37230: DISABLE
37231: LD_INT 0
37233: PPUSH
// begin enable ;
37234: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
37235: LD_ADDR_VAR 0 1
37239: PUSH
37240: LD_INT 22
37242: PUSH
37243: LD_OWVAR 2
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 21
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 33
37264: PUSH
37265: LD_INT 3
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: PPUSH
37277: CALL_OW 69
37281: ST_TO_ADDR
// if not tmp then
37282: LD_VAR 0 1
37286: NOT
37287: IFFALSE 37291
// exit ;
37289: GO 37317
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37291: LD_VAR 0 1
37295: PUSH
37296: LD_INT 1
37298: PPUSH
37299: LD_VAR 0 1
37303: PPUSH
37304: CALL_OW 12
37308: ARRAY
37309: PPUSH
37310: LD_INT 1
37312: PPUSH
37313: CALL_OW 234
// end ;
37317: PPOPN 1
37319: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
37320: LD_EXP 68
37324: PUSH
37325: LD_EXP 110
37329: AND
37330: IFFALSE 37471
37332: GO 37334
37334: DISABLE
37335: LD_INT 0
37337: PPUSH
37338: PPUSH
37339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37340: LD_ADDR_VAR 0 3
37344: PUSH
37345: LD_INT 22
37347: PUSH
37348: LD_OWVAR 2
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 25
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PPUSH
37371: CALL_OW 69
37375: ST_TO_ADDR
// if not tmp then
37376: LD_VAR 0 3
37380: NOT
37381: IFFALSE 37385
// exit ;
37383: GO 37471
// un := tmp [ rand ( 1 , tmp ) ] ;
37385: LD_ADDR_VAR 0 2
37389: PUSH
37390: LD_VAR 0 3
37394: PUSH
37395: LD_INT 1
37397: PPUSH
37398: LD_VAR 0 3
37402: PPUSH
37403: CALL_OW 12
37407: ARRAY
37408: ST_TO_ADDR
// if Crawls ( un ) then
37409: LD_VAR 0 2
37413: PPUSH
37414: CALL_OW 318
37418: IFFALSE 37429
// ComWalk ( un ) ;
37420: LD_VAR 0 2
37424: PPUSH
37425: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
37429: LD_VAR 0 2
37433: PPUSH
37434: LD_INT 9
37436: PPUSH
37437: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
37441: LD_INT 28
37443: PPUSH
37444: LD_OWVAR 2
37448: PPUSH
37449: LD_INT 2
37451: PPUSH
37452: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
37456: LD_INT 29
37458: PPUSH
37459: LD_OWVAR 2
37463: PPUSH
37464: LD_INT 2
37466: PPUSH
37467: CALL_OW 322
// end ;
37471: PPOPN 3
37473: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
37474: LD_EXP 68
37478: PUSH
37479: LD_EXP 111
37483: AND
37484: IFFALSE 37595
37486: GO 37488
37488: DISABLE
37489: LD_INT 0
37491: PPUSH
37492: PPUSH
37493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37494: LD_ADDR_VAR 0 3
37498: PUSH
37499: LD_INT 22
37501: PUSH
37502: LD_OWVAR 2
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 25
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PPUSH
37525: CALL_OW 69
37529: ST_TO_ADDR
// if not tmp then
37530: LD_VAR 0 3
37534: NOT
37535: IFFALSE 37539
// exit ;
37537: GO 37595
// un := tmp [ rand ( 1 , tmp ) ] ;
37539: LD_ADDR_VAR 0 2
37543: PUSH
37544: LD_VAR 0 3
37548: PUSH
37549: LD_INT 1
37551: PPUSH
37552: LD_VAR 0 3
37556: PPUSH
37557: CALL_OW 12
37561: ARRAY
37562: ST_TO_ADDR
// if Crawls ( un ) then
37563: LD_VAR 0 2
37567: PPUSH
37568: CALL_OW 318
37572: IFFALSE 37583
// ComWalk ( un ) ;
37574: LD_VAR 0 2
37578: PPUSH
37579: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37583: LD_VAR 0 2
37587: PPUSH
37588: LD_INT 8
37590: PPUSH
37591: CALL_OW 336
// end ;
37595: PPOPN 3
37597: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
37598: LD_EXP 68
37602: PUSH
37603: LD_EXP 112
37607: AND
37608: IFFALSE 37752
37610: GO 37612
37612: DISABLE
37613: LD_INT 0
37615: PPUSH
37616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
37617: LD_ADDR_VAR 0 2
37621: PUSH
37622: LD_INT 22
37624: PUSH
37625: LD_OWVAR 2
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 21
37636: PUSH
37637: LD_INT 2
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 34
37649: PUSH
37650: LD_INT 12
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 34
37659: PUSH
37660: LD_INT 51
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 34
37669: PUSH
37670: LD_INT 32
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: PPUSH
37688: CALL_OW 69
37692: ST_TO_ADDR
// if not tmp then
37693: LD_VAR 0 2
37697: NOT
37698: IFFALSE 37702
// exit ;
37700: GO 37752
// for i in tmp do
37702: LD_ADDR_VAR 0 1
37706: PUSH
37707: LD_VAR 0 2
37711: PUSH
37712: FOR_IN
37713: IFFALSE 37750
// if GetCargo ( i , mat_artifact ) = 0 then
37715: LD_VAR 0 1
37719: PPUSH
37720: LD_INT 4
37722: PPUSH
37723: CALL_OW 289
37727: PUSH
37728: LD_INT 0
37730: EQUAL
37731: IFFALSE 37748
// SetCargo ( i , mat_siberit , 100 ) ;
37733: LD_VAR 0 1
37737: PPUSH
37738: LD_INT 3
37740: PPUSH
37741: LD_INT 100
37743: PPUSH
37744: CALL_OW 290
37748: GO 37712
37750: POP
37751: POP
// end ;
37752: PPOPN 2
37754: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
37755: LD_EXP 68
37759: PUSH
37760: LD_EXP 113
37764: AND
37765: IFFALSE 37948
37767: GO 37769
37769: DISABLE
37770: LD_INT 0
37772: PPUSH
37773: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
37774: LD_ADDR_VAR 0 2
37778: PUSH
37779: LD_INT 22
37781: PUSH
37782: LD_OWVAR 2
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PPUSH
37791: CALL_OW 69
37795: ST_TO_ADDR
// if not tmp then
37796: LD_VAR 0 2
37800: NOT
37801: IFFALSE 37805
// exit ;
37803: GO 37948
// for i := 1 to 2 do
37805: LD_ADDR_VAR 0 1
37809: PUSH
37810: DOUBLE
37811: LD_INT 1
37813: DEC
37814: ST_TO_ADDR
37815: LD_INT 2
37817: PUSH
37818: FOR_TO
37819: IFFALSE 37946
// begin uc_side := your_side ;
37821: LD_ADDR_OWVAR 20
37825: PUSH
37826: LD_OWVAR 2
37830: ST_TO_ADDR
// uc_nation := nation_american ;
37831: LD_ADDR_OWVAR 21
37835: PUSH
37836: LD_INT 1
37838: ST_TO_ADDR
// vc_chassis := us_morphling ;
37839: LD_ADDR_OWVAR 37
37843: PUSH
37844: LD_INT 5
37846: ST_TO_ADDR
// vc_engine := engine_siberite ;
37847: LD_ADDR_OWVAR 39
37851: PUSH
37852: LD_INT 3
37854: ST_TO_ADDR
// vc_control := control_computer ;
37855: LD_ADDR_OWVAR 38
37859: PUSH
37860: LD_INT 3
37862: ST_TO_ADDR
// vc_weapon := us_double_laser ;
37863: LD_ADDR_OWVAR 40
37867: PUSH
37868: LD_INT 10
37870: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
37871: LD_VAR 0 2
37875: PUSH
37876: LD_INT 1
37878: ARRAY
37879: PPUSH
37880: CALL_OW 310
37884: NOT
37885: IFFALSE 37932
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
37887: CALL_OW 45
37891: PPUSH
37892: LD_VAR 0 2
37896: PUSH
37897: LD_INT 1
37899: ARRAY
37900: PPUSH
37901: CALL_OW 250
37905: PPUSH
37906: LD_VAR 0 2
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: PPUSH
37915: CALL_OW 251
37919: PPUSH
37920: LD_INT 12
37922: PPUSH
37923: LD_INT 1
37925: PPUSH
37926: CALL_OW 50
37930: GO 37944
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
37932: CALL_OW 45
37936: PPUSH
37937: LD_INT 1
37939: PPUSH
37940: CALL_OW 51
// end ;
37944: GO 37818
37946: POP
37947: POP
// end ;
37948: PPOPN 2
37950: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
37951: LD_EXP 68
37955: PUSH
37956: LD_EXP 114
37960: AND
37961: IFFALSE 38183
37963: GO 37965
37965: DISABLE
37966: LD_INT 0
37968: PPUSH
37969: PPUSH
37970: PPUSH
37971: PPUSH
37972: PPUSH
37973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37974: LD_ADDR_VAR 0 6
37978: PUSH
37979: LD_INT 22
37981: PUSH
37982: LD_OWVAR 2
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 21
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 3
38003: PUSH
38004: LD_INT 23
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: LIST
38022: PPUSH
38023: CALL_OW 69
38027: ST_TO_ADDR
// if not tmp then
38028: LD_VAR 0 6
38032: NOT
38033: IFFALSE 38037
// exit ;
38035: GO 38183
// s1 := rand ( 1 , 4 ) ;
38037: LD_ADDR_VAR 0 2
38041: PUSH
38042: LD_INT 1
38044: PPUSH
38045: LD_INT 4
38047: PPUSH
38048: CALL_OW 12
38052: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
38053: LD_ADDR_VAR 0 4
38057: PUSH
38058: LD_VAR 0 6
38062: PUSH
38063: LD_INT 1
38065: ARRAY
38066: PPUSH
38067: LD_VAR 0 2
38071: PPUSH
38072: CALL_OW 259
38076: ST_TO_ADDR
// if s1 = 1 then
38077: LD_VAR 0 2
38081: PUSH
38082: LD_INT 1
38084: EQUAL
38085: IFFALSE 38105
// s2 := rand ( 2 , 4 ) else
38087: LD_ADDR_VAR 0 3
38091: PUSH
38092: LD_INT 2
38094: PPUSH
38095: LD_INT 4
38097: PPUSH
38098: CALL_OW 12
38102: ST_TO_ADDR
38103: GO 38113
// s2 := 1 ;
38105: LD_ADDR_VAR 0 3
38109: PUSH
38110: LD_INT 1
38112: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
38113: LD_ADDR_VAR 0 5
38117: PUSH
38118: LD_VAR 0 6
38122: PUSH
38123: LD_INT 1
38125: ARRAY
38126: PPUSH
38127: LD_VAR 0 3
38131: PPUSH
38132: CALL_OW 259
38136: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
38137: LD_VAR 0 6
38141: PUSH
38142: LD_INT 1
38144: ARRAY
38145: PPUSH
38146: LD_VAR 0 2
38150: PPUSH
38151: LD_VAR 0 5
38155: PPUSH
38156: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
38160: LD_VAR 0 6
38164: PUSH
38165: LD_INT 1
38167: ARRAY
38168: PPUSH
38169: LD_VAR 0 3
38173: PPUSH
38174: LD_VAR 0 4
38178: PPUSH
38179: CALL_OW 237
// end ;
38183: PPOPN 6
38185: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
38186: LD_EXP 68
38190: PUSH
38191: LD_EXP 115
38195: AND
38196: IFFALSE 38275
38198: GO 38200
38200: DISABLE
38201: LD_INT 0
38203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
38204: LD_ADDR_VAR 0 1
38208: PUSH
38209: LD_INT 22
38211: PUSH
38212: LD_OWVAR 2
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 30
38223: PUSH
38224: LD_INT 3
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PPUSH
38235: CALL_OW 69
38239: ST_TO_ADDR
// if not tmp then
38240: LD_VAR 0 1
38244: NOT
38245: IFFALSE 38249
// exit ;
38247: GO 38275
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38249: LD_VAR 0 1
38253: PUSH
38254: LD_INT 1
38256: PPUSH
38257: LD_VAR 0 1
38261: PPUSH
38262: CALL_OW 12
38266: ARRAY
38267: PPUSH
38268: LD_INT 1
38270: PPUSH
38271: CALL_OW 234
// end ;
38275: PPOPN 1
38277: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
38278: LD_EXP 68
38282: PUSH
38283: LD_EXP 116
38287: AND
38288: IFFALSE 38400
38290: GO 38292
38292: DISABLE
38293: LD_INT 0
38295: PPUSH
38296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
38297: LD_ADDR_VAR 0 2
38301: PUSH
38302: LD_INT 22
38304: PUSH
38305: LD_OWVAR 2
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: LD_INT 30
38319: PUSH
38320: LD_INT 27
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 30
38329: PUSH
38330: LD_INT 26
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 30
38339: PUSH
38340: LD_INT 28
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PPUSH
38357: CALL_OW 69
38361: ST_TO_ADDR
// if not tmp then
38362: LD_VAR 0 2
38366: NOT
38367: IFFALSE 38371
// exit ;
38369: GO 38400
// for i in tmp do
38371: LD_ADDR_VAR 0 1
38375: PUSH
38376: LD_VAR 0 2
38380: PUSH
38381: FOR_IN
38382: IFFALSE 38398
// SetLives ( i , 1 ) ;
38384: LD_VAR 0 1
38388: PPUSH
38389: LD_INT 1
38391: PPUSH
38392: CALL_OW 234
38396: GO 38381
38398: POP
38399: POP
// end ;
38400: PPOPN 2
38402: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
38403: LD_EXP 68
38407: PUSH
38408: LD_EXP 117
38412: AND
38413: IFFALSE 38700
38415: GO 38417
38417: DISABLE
38418: LD_INT 0
38420: PPUSH
38421: PPUSH
38422: PPUSH
// begin i := rand ( 1 , 7 ) ;
38423: LD_ADDR_VAR 0 1
38427: PUSH
38428: LD_INT 1
38430: PPUSH
38431: LD_INT 7
38433: PPUSH
38434: CALL_OW 12
38438: ST_TO_ADDR
// case i of 1 :
38439: LD_VAR 0 1
38443: PUSH
38444: LD_INT 1
38446: DOUBLE
38447: EQUAL
38448: IFTRUE 38452
38450: GO 38462
38452: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
38453: LD_STRING earthquake(getX(game), 0, 32)
38455: PPUSH
38456: CALL_OW 559
38460: GO 38700
38462: LD_INT 2
38464: DOUBLE
38465: EQUAL
38466: IFTRUE 38470
38468: GO 38484
38470: POP
// begin ToLua ( displayStucuk(); ) ;
38471: LD_STRING displayStucuk();
38473: PPUSH
38474: CALL_OW 559
// ResetFog ;
38478: CALL_OW 335
// end ; 3 :
38482: GO 38700
38484: LD_INT 3
38486: DOUBLE
38487: EQUAL
38488: IFTRUE 38492
38490: GO 38596
38492: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38493: LD_ADDR_VAR 0 2
38497: PUSH
38498: LD_INT 22
38500: PUSH
38501: LD_OWVAR 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 25
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PPUSH
38524: CALL_OW 69
38528: ST_TO_ADDR
// if not tmp then
38529: LD_VAR 0 2
38533: NOT
38534: IFFALSE 38538
// exit ;
38536: GO 38700
// un := tmp [ rand ( 1 , tmp ) ] ;
38538: LD_ADDR_VAR 0 3
38542: PUSH
38543: LD_VAR 0 2
38547: PUSH
38548: LD_INT 1
38550: PPUSH
38551: LD_VAR 0 2
38555: PPUSH
38556: CALL_OW 12
38560: ARRAY
38561: ST_TO_ADDR
// if Crawls ( un ) then
38562: LD_VAR 0 3
38566: PPUSH
38567: CALL_OW 318
38571: IFFALSE 38582
// ComWalk ( un ) ;
38573: LD_VAR 0 3
38577: PPUSH
38578: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38582: LD_VAR 0 3
38586: PPUSH
38587: LD_INT 8
38589: PPUSH
38590: CALL_OW 336
// end ; 4 :
38594: GO 38700
38596: LD_INT 4
38598: DOUBLE
38599: EQUAL
38600: IFTRUE 38604
38602: GO 38678
38604: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38605: LD_ADDR_VAR 0 2
38609: PUSH
38610: LD_INT 22
38612: PUSH
38613: LD_OWVAR 2
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 30
38624: PUSH
38625: LD_INT 29
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PPUSH
38636: CALL_OW 69
38640: ST_TO_ADDR
// if not tmp then
38641: LD_VAR 0 2
38645: NOT
38646: IFFALSE 38650
// exit ;
38648: GO 38700
// CenterNowOnUnits ( tmp [ 1 ] ) ;
38650: LD_VAR 0 2
38654: PUSH
38655: LD_INT 1
38657: ARRAY
38658: PPUSH
38659: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
38663: LD_VAR 0 2
38667: PUSH
38668: LD_INT 1
38670: ARRAY
38671: PPUSH
38672: CALL_OW 65
// end ; 5 .. 7 :
38676: GO 38700
38678: LD_INT 5
38680: DOUBLE
38681: GREATEREQUAL
38682: IFFALSE 38690
38684: LD_INT 7
38686: DOUBLE
38687: LESSEQUAL
38688: IFTRUE 38692
38690: GO 38699
38692: POP
// StreamSibBomb ; end ;
38693: CALL 34937 0 0
38697: GO 38700
38699: POP
// end ;
38700: PPOPN 3
38702: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
38703: LD_EXP 68
38707: PUSH
38708: LD_EXP 118
38712: AND
38713: IFFALSE 38869
38715: GO 38717
38717: DISABLE
38718: LD_INT 0
38720: PPUSH
38721: PPUSH
38722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
38723: LD_ADDR_VAR 0 2
38727: PUSH
38728: LD_INT 81
38730: PUSH
38731: LD_OWVAR 2
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: LD_INT 21
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 21
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PPUSH
38772: CALL_OW 69
38776: ST_TO_ADDR
// if not tmp then
38777: LD_VAR 0 2
38781: NOT
38782: IFFALSE 38786
// exit ;
38784: GO 38869
// p := 0 ;
38786: LD_ADDR_VAR 0 3
38790: PUSH
38791: LD_INT 0
38793: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38794: LD_INT 35
38796: PPUSH
38797: CALL_OW 67
// p := p + 1 ;
38801: LD_ADDR_VAR 0 3
38805: PUSH
38806: LD_VAR 0 3
38810: PUSH
38811: LD_INT 1
38813: PLUS
38814: ST_TO_ADDR
// for i in tmp do
38815: LD_ADDR_VAR 0 1
38819: PUSH
38820: LD_VAR 0 2
38824: PUSH
38825: FOR_IN
38826: IFFALSE 38857
// if GetLives ( i ) < 1000 then
38828: LD_VAR 0 1
38832: PPUSH
38833: CALL_OW 256
38837: PUSH
38838: LD_INT 1000
38840: LESS
38841: IFFALSE 38855
// SetLives ( i , 1000 ) ;
38843: LD_VAR 0 1
38847: PPUSH
38848: LD_INT 1000
38850: PPUSH
38851: CALL_OW 234
38855: GO 38825
38857: POP
38858: POP
// until p > 20 ;
38859: LD_VAR 0 3
38863: PUSH
38864: LD_INT 20
38866: GREATER
38867: IFFALSE 38794
// end ;
38869: PPOPN 3
38871: END
// every 0 0$1 trigger StreamModeActive and sTime do
38872: LD_EXP 68
38876: PUSH
38877: LD_EXP 119
38881: AND
38882: IFFALSE 38917
38884: GO 38886
38886: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
38887: LD_INT 28
38889: PPUSH
38890: LD_OWVAR 2
38894: PPUSH
38895: LD_INT 2
38897: PPUSH
38898: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
38902: LD_INT 30
38904: PPUSH
38905: LD_OWVAR 2
38909: PPUSH
38910: LD_INT 2
38912: PPUSH
38913: CALL_OW 322
// end ;
38917: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
38918: LD_EXP 68
38922: PUSH
38923: LD_EXP 120
38927: AND
38928: IFFALSE 39049
38930: GO 38932
38932: DISABLE
38933: LD_INT 0
38935: PPUSH
38936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38937: LD_ADDR_VAR 0 2
38941: PUSH
38942: LD_INT 22
38944: PUSH
38945: LD_OWVAR 2
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 21
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 3
38966: PUSH
38967: LD_INT 23
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: LIST
38985: PPUSH
38986: CALL_OW 69
38990: ST_TO_ADDR
// if not tmp then
38991: LD_VAR 0 2
38995: NOT
38996: IFFALSE 39000
// exit ;
38998: GO 39049
// for i in tmp do
39000: LD_ADDR_VAR 0 1
39004: PUSH
39005: LD_VAR 0 2
39009: PUSH
39010: FOR_IN
39011: IFFALSE 39047
// begin if Crawls ( i ) then
39013: LD_VAR 0 1
39017: PPUSH
39018: CALL_OW 318
39022: IFFALSE 39033
// ComWalk ( i ) ;
39024: LD_VAR 0 1
39028: PPUSH
39029: CALL_OW 138
// SetClass ( i , 2 ) ;
39033: LD_VAR 0 1
39037: PPUSH
39038: LD_INT 2
39040: PPUSH
39041: CALL_OW 336
// end ;
39045: GO 39010
39047: POP
39048: POP
// end ;
39049: PPOPN 2
39051: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
39052: LD_EXP 68
39056: PUSH
39057: LD_EXP 121
39061: AND
39062: IFFALSE 39350
39064: GO 39066
39066: DISABLE
39067: LD_INT 0
39069: PPUSH
39070: PPUSH
39071: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
39072: LD_OWVAR 2
39076: PPUSH
39077: LD_INT 9
39079: PPUSH
39080: LD_INT 1
39082: PPUSH
39083: LD_INT 1
39085: PPUSH
39086: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
39090: LD_INT 9
39092: PPUSH
39093: LD_OWVAR 2
39097: PPUSH
39098: CALL_OW 343
// uc_side := 9 ;
39102: LD_ADDR_OWVAR 20
39106: PUSH
39107: LD_INT 9
39109: ST_TO_ADDR
// uc_nation := 2 ;
39110: LD_ADDR_OWVAR 21
39114: PUSH
39115: LD_INT 2
39117: ST_TO_ADDR
// hc_name := Dark Warrior ;
39118: LD_ADDR_OWVAR 26
39122: PUSH
39123: LD_STRING Dark Warrior
39125: ST_TO_ADDR
// hc_gallery :=  ;
39126: LD_ADDR_OWVAR 33
39130: PUSH
39131: LD_STRING 
39133: ST_TO_ADDR
// hc_noskilllimit := true ;
39134: LD_ADDR_OWVAR 76
39138: PUSH
39139: LD_INT 1
39141: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
39142: LD_ADDR_OWVAR 31
39146: PUSH
39147: LD_INT 30
39149: PUSH
39150: LD_INT 30
39152: PUSH
39153: LD_INT 30
39155: PUSH
39156: LD_INT 30
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: ST_TO_ADDR
// un := CreateHuman ;
39165: LD_ADDR_VAR 0 3
39169: PUSH
39170: CALL_OW 44
39174: ST_TO_ADDR
// hc_noskilllimit := false ;
39175: LD_ADDR_OWVAR 76
39179: PUSH
39180: LD_INT 0
39182: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39183: LD_VAR 0 3
39187: PPUSH
39188: LD_INT 1
39190: PPUSH
39191: CALL_OW 51
// ToLua ( playRanger() ) ;
39195: LD_STRING playRanger()
39197: PPUSH
39198: CALL_OW 559
// p := 0 ;
39202: LD_ADDR_VAR 0 2
39206: PUSH
39207: LD_INT 0
39209: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
39210: LD_INT 35
39212: PPUSH
39213: CALL_OW 67
// p := p + 1 ;
39217: LD_ADDR_VAR 0 2
39221: PUSH
39222: LD_VAR 0 2
39226: PUSH
39227: LD_INT 1
39229: PLUS
39230: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
39231: LD_VAR 0 3
39235: PPUSH
39236: CALL_OW 256
39240: PUSH
39241: LD_INT 1000
39243: LESS
39244: IFFALSE 39258
// SetLives ( un , 1000 ) ;
39246: LD_VAR 0 3
39250: PPUSH
39251: LD_INT 1000
39253: PPUSH
39254: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
39258: LD_VAR 0 3
39262: PPUSH
39263: LD_INT 81
39265: PUSH
39266: LD_OWVAR 2
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 91
39277: PUSH
39278: LD_VAR 0 3
39282: PUSH
39283: LD_INT 30
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PPUSH
39295: CALL_OW 69
39299: PPUSH
39300: LD_VAR 0 3
39304: PPUSH
39305: CALL_OW 74
39309: PPUSH
39310: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
39314: LD_VAR 0 2
39318: PUSH
39319: LD_INT 80
39321: GREATER
39322: PUSH
39323: LD_VAR 0 3
39327: PPUSH
39328: CALL_OW 301
39332: OR
39333: IFFALSE 39210
// if un then
39335: LD_VAR 0 3
39339: IFFALSE 39350
// RemoveUnit ( un ) ;
39341: LD_VAR 0 3
39345: PPUSH
39346: CALL_OW 64
// end ;
39350: PPOPN 3
39352: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
39353: LD_EXP 122
39357: IFFALSE 39473
39359: GO 39361
39361: DISABLE
39362: LD_INT 0
39364: PPUSH
39365: PPUSH
39366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
39367: LD_ADDR_VAR 0 2
39371: PUSH
39372: LD_INT 81
39374: PUSH
39375: LD_OWVAR 2
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 21
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PPUSH
39398: CALL_OW 69
39402: ST_TO_ADDR
// ToLua ( playComputer() ) ;
39403: LD_STRING playComputer()
39405: PPUSH
39406: CALL_OW 559
// if not tmp then
39410: LD_VAR 0 2
39414: NOT
39415: IFFALSE 39419
// exit ;
39417: GO 39473
// for i in tmp do
39419: LD_ADDR_VAR 0 1
39423: PUSH
39424: LD_VAR 0 2
39428: PUSH
39429: FOR_IN
39430: IFFALSE 39471
// for j := 1 to 4 do
39432: LD_ADDR_VAR 0 3
39436: PUSH
39437: DOUBLE
39438: LD_INT 1
39440: DEC
39441: ST_TO_ADDR
39442: LD_INT 4
39444: PUSH
39445: FOR_TO
39446: IFFALSE 39467
// SetSkill ( i , j , 10 ) ;
39448: LD_VAR 0 1
39452: PPUSH
39453: LD_VAR 0 3
39457: PPUSH
39458: LD_INT 10
39460: PPUSH
39461: CALL_OW 237
39465: GO 39445
39467: POP
39468: POP
39469: GO 39429
39471: POP
39472: POP
// end ;
39473: PPOPN 3
39475: END
// every 0 0$1 trigger s30 do var i , tmp ;
39476: LD_EXP 123
39480: IFFALSE 39549
39482: GO 39484
39484: DISABLE
39485: LD_INT 0
39487: PPUSH
39488: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39489: LD_ADDR_VAR 0 2
39493: PUSH
39494: LD_INT 22
39496: PUSH
39497: LD_OWVAR 2
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PPUSH
39506: CALL_OW 69
39510: ST_TO_ADDR
// if not tmp then
39511: LD_VAR 0 2
39515: NOT
39516: IFFALSE 39520
// exit ;
39518: GO 39549
// for i in tmp do
39520: LD_ADDR_VAR 0 1
39524: PUSH
39525: LD_VAR 0 2
39529: PUSH
39530: FOR_IN
39531: IFFALSE 39547
// SetLives ( i , 300 ) ;
39533: LD_VAR 0 1
39537: PPUSH
39538: LD_INT 300
39540: PPUSH
39541: CALL_OW 234
39545: GO 39530
39547: POP
39548: POP
// end ;
39549: PPOPN 2
39551: END
// every 0 0$1 trigger s60 do var i , tmp ;
39552: LD_EXP 124
39556: IFFALSE 39625
39558: GO 39560
39560: DISABLE
39561: LD_INT 0
39563: PPUSH
39564: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39565: LD_ADDR_VAR 0 2
39569: PUSH
39570: LD_INT 22
39572: PUSH
39573: LD_OWVAR 2
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PPUSH
39582: CALL_OW 69
39586: ST_TO_ADDR
// if not tmp then
39587: LD_VAR 0 2
39591: NOT
39592: IFFALSE 39596
// exit ;
39594: GO 39625
// for i in tmp do
39596: LD_ADDR_VAR 0 1
39600: PUSH
39601: LD_VAR 0 2
39605: PUSH
39606: FOR_IN
39607: IFFALSE 39623
// SetLives ( i , 600 ) ;
39609: LD_VAR 0 1
39613: PPUSH
39614: LD_INT 600
39616: PPUSH
39617: CALL_OW 234
39621: GO 39606
39623: POP
39624: POP
// end ;
39625: PPOPN 2
39627: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
39628: LD_INT 0
39630: PPUSH
// case cmd of 301 :
39631: LD_VAR 0 1
39635: PUSH
39636: LD_INT 301
39638: DOUBLE
39639: EQUAL
39640: IFTRUE 39644
39642: GO 39676
39644: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
39645: LD_VAR 0 6
39649: PPUSH
39650: LD_VAR 0 7
39654: PPUSH
39655: LD_VAR 0 8
39659: PPUSH
39660: LD_VAR 0 4
39664: PPUSH
39665: LD_VAR 0 5
39669: PPUSH
39670: CALL 40877 0 5
39674: GO 39797
39676: LD_INT 302
39678: DOUBLE
39679: EQUAL
39680: IFTRUE 39684
39682: GO 39721
39684: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
39685: LD_VAR 0 6
39689: PPUSH
39690: LD_VAR 0 7
39694: PPUSH
39695: LD_VAR 0 8
39699: PPUSH
39700: LD_VAR 0 9
39704: PPUSH
39705: LD_VAR 0 4
39709: PPUSH
39710: LD_VAR 0 5
39714: PPUSH
39715: CALL 40968 0 6
39719: GO 39797
39721: LD_INT 303
39723: DOUBLE
39724: EQUAL
39725: IFTRUE 39729
39727: GO 39766
39729: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
39730: LD_VAR 0 6
39734: PPUSH
39735: LD_VAR 0 7
39739: PPUSH
39740: LD_VAR 0 8
39744: PPUSH
39745: LD_VAR 0 9
39749: PPUSH
39750: LD_VAR 0 4
39754: PPUSH
39755: LD_VAR 0 5
39759: PPUSH
39760: CALL 39802 0 6
39764: GO 39797
39766: LD_INT 304
39768: DOUBLE
39769: EQUAL
39770: IFTRUE 39774
39772: GO 39796
39774: POP
// hHackTeleport ( unit , x , y ) ; end ;
39775: LD_VAR 0 2
39779: PPUSH
39780: LD_VAR 0 4
39784: PPUSH
39785: LD_VAR 0 5
39789: PPUSH
39790: CALL 41561 0 3
39794: GO 39797
39796: POP
// end ;
39797: LD_VAR 0 12
39801: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
39802: LD_INT 0
39804: PPUSH
39805: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
39806: LD_VAR 0 1
39810: PUSH
39811: LD_INT 1
39813: LESS
39814: PUSH
39815: LD_VAR 0 1
39819: PUSH
39820: LD_INT 3
39822: GREATER
39823: OR
39824: PUSH
39825: LD_VAR 0 5
39829: PPUSH
39830: LD_VAR 0 6
39834: PPUSH
39835: CALL_OW 428
39839: OR
39840: IFFALSE 39844
// exit ;
39842: GO 40564
// uc_side := your_side ;
39844: LD_ADDR_OWVAR 20
39848: PUSH
39849: LD_OWVAR 2
39853: ST_TO_ADDR
// uc_nation := nation ;
39854: LD_ADDR_OWVAR 21
39858: PUSH
39859: LD_VAR 0 1
39863: ST_TO_ADDR
// bc_level = 1 ;
39864: LD_ADDR_OWVAR 43
39868: PUSH
39869: LD_INT 1
39871: ST_TO_ADDR
// case btype of 1 :
39872: LD_VAR 0 2
39876: PUSH
39877: LD_INT 1
39879: DOUBLE
39880: EQUAL
39881: IFTRUE 39885
39883: GO 39896
39885: POP
// bc_type := b_depot ; 2 :
39886: LD_ADDR_OWVAR 42
39890: PUSH
39891: LD_INT 0
39893: ST_TO_ADDR
39894: GO 40508
39896: LD_INT 2
39898: DOUBLE
39899: EQUAL
39900: IFTRUE 39904
39902: GO 39915
39904: POP
// bc_type := b_warehouse ; 3 :
39905: LD_ADDR_OWVAR 42
39909: PUSH
39910: LD_INT 1
39912: ST_TO_ADDR
39913: GO 40508
39915: LD_INT 3
39917: DOUBLE
39918: EQUAL
39919: IFTRUE 39923
39921: GO 39934
39923: POP
// bc_type := b_lab ; 4 .. 9 :
39924: LD_ADDR_OWVAR 42
39928: PUSH
39929: LD_INT 6
39931: ST_TO_ADDR
39932: GO 40508
39934: LD_INT 4
39936: DOUBLE
39937: GREATEREQUAL
39938: IFFALSE 39946
39940: LD_INT 9
39942: DOUBLE
39943: LESSEQUAL
39944: IFTRUE 39948
39946: GO 40000
39948: POP
// begin bc_type := b_lab_half ;
39949: LD_ADDR_OWVAR 42
39953: PUSH
39954: LD_INT 7
39956: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
39957: LD_ADDR_OWVAR 44
39961: PUSH
39962: LD_INT 10
39964: PUSH
39965: LD_INT 11
39967: PUSH
39968: LD_INT 12
39970: PUSH
39971: LD_INT 15
39973: PUSH
39974: LD_INT 14
39976: PUSH
39977: LD_INT 13
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: PUSH
39988: LD_VAR 0 2
39992: PUSH
39993: LD_INT 3
39995: MINUS
39996: ARRAY
39997: ST_TO_ADDR
// end ; 10 .. 13 :
39998: GO 40508
40000: LD_INT 10
40002: DOUBLE
40003: GREATEREQUAL
40004: IFFALSE 40012
40006: LD_INT 13
40008: DOUBLE
40009: LESSEQUAL
40010: IFTRUE 40014
40012: GO 40091
40014: POP
// begin bc_type := b_lab_full ;
40015: LD_ADDR_OWVAR 42
40019: PUSH
40020: LD_INT 8
40022: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
40023: LD_ADDR_OWVAR 44
40027: PUSH
40028: LD_INT 10
40030: PUSH
40031: LD_INT 12
40033: PUSH
40034: LD_INT 14
40036: PUSH
40037: LD_INT 13
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: PUSH
40046: LD_VAR 0 2
40050: PUSH
40051: LD_INT 9
40053: MINUS
40054: ARRAY
40055: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
40056: LD_ADDR_OWVAR 45
40060: PUSH
40061: LD_INT 11
40063: PUSH
40064: LD_INT 15
40066: PUSH
40067: LD_INT 12
40069: PUSH
40070: LD_INT 15
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: PUSH
40079: LD_VAR 0 2
40083: PUSH
40084: LD_INT 9
40086: MINUS
40087: ARRAY
40088: ST_TO_ADDR
// end ; 14 :
40089: GO 40508
40091: LD_INT 14
40093: DOUBLE
40094: EQUAL
40095: IFTRUE 40099
40097: GO 40110
40099: POP
// bc_type := b_workshop ; 15 :
40100: LD_ADDR_OWVAR 42
40104: PUSH
40105: LD_INT 2
40107: ST_TO_ADDR
40108: GO 40508
40110: LD_INT 15
40112: DOUBLE
40113: EQUAL
40114: IFTRUE 40118
40116: GO 40129
40118: POP
// bc_type := b_factory ; 16 :
40119: LD_ADDR_OWVAR 42
40123: PUSH
40124: LD_INT 3
40126: ST_TO_ADDR
40127: GO 40508
40129: LD_INT 16
40131: DOUBLE
40132: EQUAL
40133: IFTRUE 40137
40135: GO 40148
40137: POP
// bc_type := b_ext_gun ; 17 :
40138: LD_ADDR_OWVAR 42
40142: PUSH
40143: LD_INT 17
40145: ST_TO_ADDR
40146: GO 40508
40148: LD_INT 17
40150: DOUBLE
40151: EQUAL
40152: IFTRUE 40156
40154: GO 40184
40156: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
40157: LD_ADDR_OWVAR 42
40161: PUSH
40162: LD_INT 19
40164: PUSH
40165: LD_INT 23
40167: PUSH
40168: LD_INT 19
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: LIST
40175: PUSH
40176: LD_VAR 0 1
40180: ARRAY
40181: ST_TO_ADDR
40182: GO 40508
40184: LD_INT 18
40186: DOUBLE
40187: EQUAL
40188: IFTRUE 40192
40190: GO 40203
40192: POP
// bc_type := b_ext_radar ; 19 :
40193: LD_ADDR_OWVAR 42
40197: PUSH
40198: LD_INT 20
40200: ST_TO_ADDR
40201: GO 40508
40203: LD_INT 19
40205: DOUBLE
40206: EQUAL
40207: IFTRUE 40211
40209: GO 40222
40211: POP
// bc_type := b_ext_radio ; 20 :
40212: LD_ADDR_OWVAR 42
40216: PUSH
40217: LD_INT 22
40219: ST_TO_ADDR
40220: GO 40508
40222: LD_INT 20
40224: DOUBLE
40225: EQUAL
40226: IFTRUE 40230
40228: GO 40241
40230: POP
// bc_type := b_ext_siberium ; 21 :
40231: LD_ADDR_OWVAR 42
40235: PUSH
40236: LD_INT 21
40238: ST_TO_ADDR
40239: GO 40508
40241: LD_INT 21
40243: DOUBLE
40244: EQUAL
40245: IFTRUE 40249
40247: GO 40260
40249: POP
// bc_type := b_ext_computer ; 22 :
40250: LD_ADDR_OWVAR 42
40254: PUSH
40255: LD_INT 24
40257: ST_TO_ADDR
40258: GO 40508
40260: LD_INT 22
40262: DOUBLE
40263: EQUAL
40264: IFTRUE 40268
40266: GO 40279
40268: POP
// bc_type := b_ext_track ; 23 :
40269: LD_ADDR_OWVAR 42
40273: PUSH
40274: LD_INT 16
40276: ST_TO_ADDR
40277: GO 40508
40279: LD_INT 23
40281: DOUBLE
40282: EQUAL
40283: IFTRUE 40287
40285: GO 40298
40287: POP
// bc_type := b_ext_laser ; 24 :
40288: LD_ADDR_OWVAR 42
40292: PUSH
40293: LD_INT 25
40295: ST_TO_ADDR
40296: GO 40508
40298: LD_INT 24
40300: DOUBLE
40301: EQUAL
40302: IFTRUE 40306
40304: GO 40317
40306: POP
// bc_type := b_control_tower ; 25 :
40307: LD_ADDR_OWVAR 42
40311: PUSH
40312: LD_INT 36
40314: ST_TO_ADDR
40315: GO 40508
40317: LD_INT 25
40319: DOUBLE
40320: EQUAL
40321: IFTRUE 40325
40323: GO 40336
40325: POP
// bc_type := b_breastwork ; 26 :
40326: LD_ADDR_OWVAR 42
40330: PUSH
40331: LD_INT 31
40333: ST_TO_ADDR
40334: GO 40508
40336: LD_INT 26
40338: DOUBLE
40339: EQUAL
40340: IFTRUE 40344
40342: GO 40355
40344: POP
// bc_type := b_bunker ; 27 :
40345: LD_ADDR_OWVAR 42
40349: PUSH
40350: LD_INT 32
40352: ST_TO_ADDR
40353: GO 40508
40355: LD_INT 27
40357: DOUBLE
40358: EQUAL
40359: IFTRUE 40363
40361: GO 40374
40363: POP
// bc_type := b_turret ; 28 :
40364: LD_ADDR_OWVAR 42
40368: PUSH
40369: LD_INT 33
40371: ST_TO_ADDR
40372: GO 40508
40374: LD_INT 28
40376: DOUBLE
40377: EQUAL
40378: IFTRUE 40382
40380: GO 40393
40382: POP
// bc_type := b_armoury ; 29 :
40383: LD_ADDR_OWVAR 42
40387: PUSH
40388: LD_INT 4
40390: ST_TO_ADDR
40391: GO 40508
40393: LD_INT 29
40395: DOUBLE
40396: EQUAL
40397: IFTRUE 40401
40399: GO 40412
40401: POP
// bc_type := b_barracks ; 30 :
40402: LD_ADDR_OWVAR 42
40406: PUSH
40407: LD_INT 5
40409: ST_TO_ADDR
40410: GO 40508
40412: LD_INT 30
40414: DOUBLE
40415: EQUAL
40416: IFTRUE 40420
40418: GO 40431
40420: POP
// bc_type := b_solar_power ; 31 :
40421: LD_ADDR_OWVAR 42
40425: PUSH
40426: LD_INT 27
40428: ST_TO_ADDR
40429: GO 40508
40431: LD_INT 31
40433: DOUBLE
40434: EQUAL
40435: IFTRUE 40439
40437: GO 40450
40439: POP
// bc_type := b_oil_power ; 32 :
40440: LD_ADDR_OWVAR 42
40444: PUSH
40445: LD_INT 26
40447: ST_TO_ADDR
40448: GO 40508
40450: LD_INT 32
40452: DOUBLE
40453: EQUAL
40454: IFTRUE 40458
40456: GO 40469
40458: POP
// bc_type := b_siberite_power ; 33 :
40459: LD_ADDR_OWVAR 42
40463: PUSH
40464: LD_INT 28
40466: ST_TO_ADDR
40467: GO 40508
40469: LD_INT 33
40471: DOUBLE
40472: EQUAL
40473: IFTRUE 40477
40475: GO 40488
40477: POP
// bc_type := b_oil_mine ; 34 :
40478: LD_ADDR_OWVAR 42
40482: PUSH
40483: LD_INT 29
40485: ST_TO_ADDR
40486: GO 40508
40488: LD_INT 34
40490: DOUBLE
40491: EQUAL
40492: IFTRUE 40496
40494: GO 40507
40496: POP
// bc_type := b_siberite_mine ; end ;
40497: LD_ADDR_OWVAR 42
40501: PUSH
40502: LD_INT 30
40504: ST_TO_ADDR
40505: GO 40508
40507: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
40508: LD_ADDR_VAR 0 8
40512: PUSH
40513: LD_VAR 0 5
40517: PPUSH
40518: LD_VAR 0 6
40522: PPUSH
40523: LD_VAR 0 3
40527: PPUSH
40528: CALL_OW 47
40532: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
40533: LD_OWVAR 42
40537: PUSH
40538: LD_INT 32
40540: PUSH
40541: LD_INT 33
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: IN
40548: IFFALSE 40564
// PlaceWeaponTurret ( b , weapon ) ;
40550: LD_VAR 0 8
40554: PPUSH
40555: LD_VAR 0 4
40559: PPUSH
40560: CALL_OW 431
// end ;
40564: LD_VAR 0 7
40568: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
40569: LD_INT 0
40571: PPUSH
40572: PPUSH
40573: PPUSH
40574: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40575: LD_ADDR_VAR 0 4
40579: PUSH
40580: LD_INT 22
40582: PUSH
40583: LD_OWVAR 2
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: LD_INT 30
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 30
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PPUSH
40624: CALL_OW 69
40628: ST_TO_ADDR
// if not tmp then
40629: LD_VAR 0 4
40633: NOT
40634: IFFALSE 40638
// exit ;
40636: GO 40697
// for i in tmp do
40638: LD_ADDR_VAR 0 2
40642: PUSH
40643: LD_VAR 0 4
40647: PUSH
40648: FOR_IN
40649: IFFALSE 40695
// for j = 1 to 3 do
40651: LD_ADDR_VAR 0 3
40655: PUSH
40656: DOUBLE
40657: LD_INT 1
40659: DEC
40660: ST_TO_ADDR
40661: LD_INT 3
40663: PUSH
40664: FOR_TO
40665: IFFALSE 40691
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
40667: LD_VAR 0 2
40671: PPUSH
40672: CALL_OW 274
40676: PPUSH
40677: LD_VAR 0 3
40681: PPUSH
40682: LD_INT 99999
40684: PPUSH
40685: CALL_OW 277
40689: GO 40664
40691: POP
40692: POP
40693: GO 40648
40695: POP
40696: POP
// end ;
40697: LD_VAR 0 1
40701: RET
// export function hHackSetLevel10 ; var i , j ; begin
40702: LD_INT 0
40704: PPUSH
40705: PPUSH
40706: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40707: LD_ADDR_VAR 0 2
40711: PUSH
40712: LD_INT 21
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PPUSH
40722: CALL_OW 69
40726: PUSH
40727: FOR_IN
40728: IFFALSE 40780
// if IsSelected ( i ) then
40730: LD_VAR 0 2
40734: PPUSH
40735: CALL_OW 306
40739: IFFALSE 40778
// begin for j := 1 to 4 do
40741: LD_ADDR_VAR 0 3
40745: PUSH
40746: DOUBLE
40747: LD_INT 1
40749: DEC
40750: ST_TO_ADDR
40751: LD_INT 4
40753: PUSH
40754: FOR_TO
40755: IFFALSE 40776
// SetSkill ( i , j , 10 ) ;
40757: LD_VAR 0 2
40761: PPUSH
40762: LD_VAR 0 3
40766: PPUSH
40767: LD_INT 10
40769: PPUSH
40770: CALL_OW 237
40774: GO 40754
40776: POP
40777: POP
// end ;
40778: GO 40727
40780: POP
40781: POP
// end ;
40782: LD_VAR 0 1
40786: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
40787: LD_INT 0
40789: PPUSH
40790: PPUSH
40791: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
40792: LD_ADDR_VAR 0 2
40796: PUSH
40797: LD_INT 22
40799: PUSH
40800: LD_OWVAR 2
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 21
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PPUSH
40823: CALL_OW 69
40827: PUSH
40828: FOR_IN
40829: IFFALSE 40870
// begin for j := 1 to 4 do
40831: LD_ADDR_VAR 0 3
40835: PUSH
40836: DOUBLE
40837: LD_INT 1
40839: DEC
40840: ST_TO_ADDR
40841: LD_INT 4
40843: PUSH
40844: FOR_TO
40845: IFFALSE 40866
// SetSkill ( i , j , 10 ) ;
40847: LD_VAR 0 2
40851: PPUSH
40852: LD_VAR 0 3
40856: PPUSH
40857: LD_INT 10
40859: PPUSH
40860: CALL_OW 237
40864: GO 40844
40866: POP
40867: POP
// end ;
40868: GO 40828
40870: POP
40871: POP
// end ;
40872: LD_VAR 0 1
40876: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
40877: LD_INT 0
40879: PPUSH
// uc_side := your_side ;
40880: LD_ADDR_OWVAR 20
40884: PUSH
40885: LD_OWVAR 2
40889: ST_TO_ADDR
// uc_nation := nation ;
40890: LD_ADDR_OWVAR 21
40894: PUSH
40895: LD_VAR 0 1
40899: ST_TO_ADDR
// InitHc ;
40900: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
40904: LD_INT 0
40906: PPUSH
40907: LD_VAR 0 2
40911: PPUSH
40912: LD_VAR 0 3
40916: PPUSH
40917: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
40921: LD_VAR 0 4
40925: PPUSH
40926: LD_VAR 0 5
40930: PPUSH
40931: CALL_OW 428
40935: PUSH
40936: LD_INT 0
40938: EQUAL
40939: IFFALSE 40963
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
40941: CALL_OW 44
40945: PPUSH
40946: LD_VAR 0 4
40950: PPUSH
40951: LD_VAR 0 5
40955: PPUSH
40956: LD_INT 1
40958: PPUSH
40959: CALL_OW 48
// end ;
40963: LD_VAR 0 6
40967: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
40968: LD_INT 0
40970: PPUSH
40971: PPUSH
// uc_side := your_side ;
40972: LD_ADDR_OWVAR 20
40976: PUSH
40977: LD_OWVAR 2
40981: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
40982: LD_VAR 0 1
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 3
40995: PUSH
40996: LD_INT 4
40998: PUSH
40999: LD_INT 5
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: IN
41009: IFFALSE 41021
// uc_nation := nation_american else
41011: LD_ADDR_OWVAR 21
41015: PUSH
41016: LD_INT 1
41018: ST_TO_ADDR
41019: GO 41064
// if chassis in [ 11 , 12 , 13 , 14 ] then
41021: LD_VAR 0 1
41025: PUSH
41026: LD_INT 11
41028: PUSH
41029: LD_INT 12
41031: PUSH
41032: LD_INT 13
41034: PUSH
41035: LD_INT 14
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: IN
41044: IFFALSE 41056
// uc_nation := nation_arabian else
41046: LD_ADDR_OWVAR 21
41050: PUSH
41051: LD_INT 2
41053: ST_TO_ADDR
41054: GO 41064
// uc_nation := nation_russian ;
41056: LD_ADDR_OWVAR 21
41060: PUSH
41061: LD_INT 3
41063: ST_TO_ADDR
// vc_chassis := chassis ;
41064: LD_ADDR_OWVAR 37
41068: PUSH
41069: LD_VAR 0 1
41073: ST_TO_ADDR
// vc_engine := engine ;
41074: LD_ADDR_OWVAR 39
41078: PUSH
41079: LD_VAR 0 2
41083: ST_TO_ADDR
// vc_control := control ;
41084: LD_ADDR_OWVAR 38
41088: PUSH
41089: LD_VAR 0 3
41093: ST_TO_ADDR
// vc_weapon := weapon ;
41094: LD_ADDR_OWVAR 40
41098: PUSH
41099: LD_VAR 0 4
41103: ST_TO_ADDR
// un := CreateVehicle ;
41104: LD_ADDR_VAR 0 8
41108: PUSH
41109: CALL_OW 45
41113: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
41114: LD_VAR 0 8
41118: PPUSH
41119: LD_INT 0
41121: PPUSH
41122: LD_INT 5
41124: PPUSH
41125: CALL_OW 12
41129: PPUSH
41130: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
41134: LD_VAR 0 8
41138: PPUSH
41139: LD_VAR 0 5
41143: PPUSH
41144: LD_VAR 0 6
41148: PPUSH
41149: LD_INT 1
41151: PPUSH
41152: CALL_OW 48
// end ;
41156: LD_VAR 0 7
41160: RET
// export hInvincible ; every 1 do
41161: GO 41163
41163: DISABLE
// hInvincible := [ ] ;
41164: LD_ADDR_EXP 125
41168: PUSH
41169: EMPTY
41170: ST_TO_ADDR
41171: END
// every 10 do var i ;
41172: GO 41174
41174: DISABLE
41175: LD_INT 0
41177: PPUSH
// begin enable ;
41178: ENABLE
// if not hInvincible then
41179: LD_EXP 125
41183: NOT
41184: IFFALSE 41188
// exit ;
41186: GO 41232
// for i in hInvincible do
41188: LD_ADDR_VAR 0 1
41192: PUSH
41193: LD_EXP 125
41197: PUSH
41198: FOR_IN
41199: IFFALSE 41230
// if GetLives ( i ) < 1000 then
41201: LD_VAR 0 1
41205: PPUSH
41206: CALL_OW 256
41210: PUSH
41211: LD_INT 1000
41213: LESS
41214: IFFALSE 41228
// SetLives ( i , 1000 ) ;
41216: LD_VAR 0 1
41220: PPUSH
41221: LD_INT 1000
41223: PPUSH
41224: CALL_OW 234
41228: GO 41198
41230: POP
41231: POP
// end ;
41232: PPOPN 1
41234: END
// export function hHackInvincible ; var i ; begin
41235: LD_INT 0
41237: PPUSH
41238: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
41239: LD_ADDR_VAR 0 2
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: LD_INT 21
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 21
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: LIST
41271: PPUSH
41272: CALL_OW 69
41276: PUSH
41277: FOR_IN
41278: IFFALSE 41339
// if IsSelected ( i ) then
41280: LD_VAR 0 2
41284: PPUSH
41285: CALL_OW 306
41289: IFFALSE 41337
// begin if i in hInvincible then
41291: LD_VAR 0 2
41295: PUSH
41296: LD_EXP 125
41300: IN
41301: IFFALSE 41321
// hInvincible := hInvincible diff i else
41303: LD_ADDR_EXP 125
41307: PUSH
41308: LD_EXP 125
41312: PUSH
41313: LD_VAR 0 2
41317: DIFF
41318: ST_TO_ADDR
41319: GO 41337
// hInvincible := hInvincible union i ;
41321: LD_ADDR_EXP 125
41325: PUSH
41326: LD_EXP 125
41330: PUSH
41331: LD_VAR 0 2
41335: UNION
41336: ST_TO_ADDR
// end ;
41337: GO 41277
41339: POP
41340: POP
// end ;
41341: LD_VAR 0 1
41345: RET
// export function hHackInvisible ; var i , j ; begin
41346: LD_INT 0
41348: PPUSH
41349: PPUSH
41350: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
41351: LD_ADDR_VAR 0 2
41355: PUSH
41356: LD_INT 21
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PPUSH
41366: CALL_OW 69
41370: PUSH
41371: FOR_IN
41372: IFFALSE 41396
// if IsSelected ( i ) then
41374: LD_VAR 0 2
41378: PPUSH
41379: CALL_OW 306
41383: IFFALSE 41394
// ComForceInvisible ( i ) ;
41385: LD_VAR 0 2
41389: PPUSH
41390: CALL_OW 496
41394: GO 41371
41396: POP
41397: POP
// end ;
41398: LD_VAR 0 1
41402: RET
// export function hHackChangeYourSide ; begin
41403: LD_INT 0
41405: PPUSH
// if your_side = 8 then
41406: LD_OWVAR 2
41410: PUSH
41411: LD_INT 8
41413: EQUAL
41414: IFFALSE 41426
// your_side := 0 else
41416: LD_ADDR_OWVAR 2
41420: PUSH
41421: LD_INT 0
41423: ST_TO_ADDR
41424: GO 41440
// your_side := your_side + 1 ;
41426: LD_ADDR_OWVAR 2
41430: PUSH
41431: LD_OWVAR 2
41435: PUSH
41436: LD_INT 1
41438: PLUS
41439: ST_TO_ADDR
// end ;
41440: LD_VAR 0 1
41444: RET
// export function hHackChangeUnitSide ; var i , j ; begin
41445: LD_INT 0
41447: PPUSH
41448: PPUSH
41449: PPUSH
// for i in all_units do
41450: LD_ADDR_VAR 0 2
41454: PUSH
41455: LD_OWVAR 3
41459: PUSH
41460: FOR_IN
41461: IFFALSE 41539
// if IsSelected ( i ) then
41463: LD_VAR 0 2
41467: PPUSH
41468: CALL_OW 306
41472: IFFALSE 41537
// begin j := GetSide ( i ) ;
41474: LD_ADDR_VAR 0 3
41478: PUSH
41479: LD_VAR 0 2
41483: PPUSH
41484: CALL_OW 255
41488: ST_TO_ADDR
// if j = 8 then
41489: LD_VAR 0 3
41493: PUSH
41494: LD_INT 8
41496: EQUAL
41497: IFFALSE 41509
// j := 0 else
41499: LD_ADDR_VAR 0 3
41503: PUSH
41504: LD_INT 0
41506: ST_TO_ADDR
41507: GO 41523
// j := j + 1 ;
41509: LD_ADDR_VAR 0 3
41513: PUSH
41514: LD_VAR 0 3
41518: PUSH
41519: LD_INT 1
41521: PLUS
41522: ST_TO_ADDR
// SetSide ( i , j ) ;
41523: LD_VAR 0 2
41527: PPUSH
41528: LD_VAR 0 3
41532: PPUSH
41533: CALL_OW 235
// end ;
41537: GO 41460
41539: POP
41540: POP
// end ;
41541: LD_VAR 0 1
41545: RET
// export function hHackFog ; begin
41546: LD_INT 0
41548: PPUSH
// FogOff ( true ) ;
41549: LD_INT 1
41551: PPUSH
41552: CALL_OW 344
// end ;
41556: LD_VAR 0 1
41560: RET
// export function hHackTeleport ( unit , x , y ) ; begin
41561: LD_INT 0
41563: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
41564: LD_VAR 0 1
41568: PPUSH
41569: LD_VAR 0 2
41573: PPUSH
41574: LD_VAR 0 3
41578: PPUSH
41579: LD_INT 1
41581: PPUSH
41582: LD_INT 1
41584: PPUSH
41585: CALL_OW 483
// CenterOnXY ( x , y ) ;
41589: LD_VAR 0 2
41593: PPUSH
41594: LD_VAR 0 3
41598: PPUSH
41599: CALL_OW 84
// end ; end_of_file
41603: LD_VAR 0 4
41607: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
41608: LD_INT 0
41610: PPUSH
41611: PPUSH
41612: PPUSH
41613: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
41614: LD_VAR 0 1
41618: PPUSH
41619: CALL_OW 264
41623: PUSH
41624: LD_EXP 52
41628: EQUAL
41629: IFFALSE 41701
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
41631: LD_INT 68
41633: PPUSH
41634: LD_VAR 0 1
41638: PPUSH
41639: CALL_OW 255
41643: PPUSH
41644: CALL_OW 321
41648: PUSH
41649: LD_INT 2
41651: EQUAL
41652: IFFALSE 41664
// eff := 70 else
41654: LD_ADDR_VAR 0 4
41658: PUSH
41659: LD_INT 70
41661: ST_TO_ADDR
41662: GO 41672
// eff := 30 ;
41664: LD_ADDR_VAR 0 4
41668: PUSH
41669: LD_INT 30
41671: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
41672: LD_VAR 0 1
41676: PPUSH
41677: CALL_OW 250
41681: PPUSH
41682: LD_VAR 0 1
41686: PPUSH
41687: CALL_OW 251
41691: PPUSH
41692: LD_VAR 0 4
41696: PPUSH
41697: CALL_OW 495
// end ; end ;
41701: LD_VAR 0 2
41705: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
41706: LD_INT 0
41708: PPUSH
// end ;
41709: LD_VAR 0 4
41713: RET
// export function SOS_Command ( cmd ) ; begin
41714: LD_INT 0
41716: PPUSH
// end ;
41717: LD_VAR 0 2
41721: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
41722: LD_INT 0
41724: PPUSH
// end ;
41725: LD_VAR 0 6
41729: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
41730: LD_INT 0
41732: PPUSH
41733: PPUSH
// if not vehicle or not factory then
41734: LD_VAR 0 1
41738: NOT
41739: PUSH
41740: LD_VAR 0 2
41744: NOT
41745: OR
41746: IFFALSE 41750
// exit ;
41748: GO 41981
// if factoryWaypoints >= factory then
41750: LD_EXP 126
41754: PUSH
41755: LD_VAR 0 2
41759: GREATEREQUAL
41760: IFFALSE 41981
// if factoryWaypoints [ factory ] then
41762: LD_EXP 126
41766: PUSH
41767: LD_VAR 0 2
41771: ARRAY
41772: IFFALSE 41981
// begin if GetControl ( vehicle ) = control_manual then
41774: LD_VAR 0 1
41778: PPUSH
41779: CALL_OW 263
41783: PUSH
41784: LD_INT 1
41786: EQUAL
41787: IFFALSE 41868
// begin driver := IsDrivenBy ( vehicle ) ;
41789: LD_ADDR_VAR 0 4
41793: PUSH
41794: LD_VAR 0 1
41798: PPUSH
41799: CALL_OW 311
41803: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
41804: LD_VAR 0 4
41808: PPUSH
41809: LD_EXP 126
41813: PUSH
41814: LD_VAR 0 2
41818: ARRAY
41819: PUSH
41820: LD_INT 3
41822: ARRAY
41823: PPUSH
41824: LD_EXP 126
41828: PUSH
41829: LD_VAR 0 2
41833: ARRAY
41834: PUSH
41835: LD_INT 4
41837: ARRAY
41838: PPUSH
41839: CALL_OW 171
// AddComExitVehicle ( driver ) ;
41843: LD_VAR 0 4
41847: PPUSH
41848: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
41852: LD_VAR 0 4
41856: PPUSH
41857: LD_VAR 0 2
41861: PPUSH
41862: CALL_OW 180
// end else
41866: GO 41981
// if GetControl ( vehicle ) = control_remote then
41868: LD_VAR 0 1
41872: PPUSH
41873: CALL_OW 263
41877: PUSH
41878: LD_INT 2
41880: EQUAL
41881: IFFALSE 41942
// begin wait ( 0 0$2 ) ;
41883: LD_INT 70
41885: PPUSH
41886: CALL_OW 67
// if Connect ( vehicle ) then
41890: LD_VAR 0 1
41894: PPUSH
41895: CALL 54205 0 1
41899: IFFALSE 41940
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
41901: LD_VAR 0 1
41905: PPUSH
41906: LD_EXP 126
41910: PUSH
41911: LD_VAR 0 2
41915: ARRAY
41916: PUSH
41917: LD_INT 3
41919: ARRAY
41920: PPUSH
41921: LD_EXP 126
41925: PUSH
41926: LD_VAR 0 2
41930: ARRAY
41931: PUSH
41932: LD_INT 4
41934: ARRAY
41935: PPUSH
41936: CALL_OW 171
// end else
41940: GO 41981
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
41942: LD_VAR 0 1
41946: PPUSH
41947: LD_EXP 126
41951: PUSH
41952: LD_VAR 0 2
41956: ARRAY
41957: PUSH
41958: LD_INT 3
41960: ARRAY
41961: PPUSH
41962: LD_EXP 126
41966: PUSH
41967: LD_VAR 0 2
41971: ARRAY
41972: PUSH
41973: LD_INT 4
41975: ARRAY
41976: PPUSH
41977: CALL_OW 171
// end ; end ;
41981: LD_VAR 0 3
41985: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
41986: LD_INT 0
41988: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
41989: LD_VAR 0 1
41993: PUSH
41994: LD_INT 250
41996: EQUAL
41997: PUSH
41998: LD_VAR 0 2
42002: PPUSH
42003: CALL_OW 264
42007: PUSH
42008: LD_EXP 55
42012: EQUAL
42013: AND
42014: IFFALSE 42035
// MinerPlaceMine ( unit , x , y ) ;
42016: LD_VAR 0 2
42020: PPUSH
42021: LD_VAR 0 4
42025: PPUSH
42026: LD_VAR 0 5
42030: PPUSH
42031: CALL 44763 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
42035: LD_VAR 0 1
42039: PUSH
42040: LD_INT 251
42042: EQUAL
42043: PUSH
42044: LD_VAR 0 2
42048: PPUSH
42049: CALL_OW 264
42053: PUSH
42054: LD_EXP 55
42058: EQUAL
42059: AND
42060: IFFALSE 42081
// MinerDetonateMine ( unit , x , y ) ;
42062: LD_VAR 0 2
42066: PPUSH
42067: LD_VAR 0 4
42071: PPUSH
42072: LD_VAR 0 5
42076: PPUSH
42077: CALL 45040 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
42081: LD_VAR 0 1
42085: PUSH
42086: LD_INT 252
42088: EQUAL
42089: PUSH
42090: LD_VAR 0 2
42094: PPUSH
42095: CALL_OW 264
42099: PUSH
42100: LD_EXP 55
42104: EQUAL
42105: AND
42106: IFFALSE 42127
// MinerCreateMinefield ( unit , x , y ) ;
42108: LD_VAR 0 2
42112: PPUSH
42113: LD_VAR 0 4
42117: PPUSH
42118: LD_VAR 0 5
42122: PPUSH
42123: CALL 45457 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
42127: LD_VAR 0 1
42131: PUSH
42132: LD_INT 253
42134: EQUAL
42135: PUSH
42136: LD_VAR 0 2
42140: PPUSH
42141: CALL_OW 257
42145: PUSH
42146: LD_INT 5
42148: EQUAL
42149: AND
42150: IFFALSE 42171
// ComBinocular ( unit , x , y ) ;
42152: LD_VAR 0 2
42156: PPUSH
42157: LD_VAR 0 4
42161: PPUSH
42162: LD_VAR 0 5
42166: PPUSH
42167: CALL 45828 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
42171: LD_VAR 0 1
42175: PUSH
42176: LD_INT 254
42178: EQUAL
42179: PUSH
42180: LD_VAR 0 2
42184: PPUSH
42185: CALL_OW 264
42189: PUSH
42190: LD_EXP 50
42194: EQUAL
42195: AND
42196: PUSH
42197: LD_VAR 0 3
42201: PPUSH
42202: CALL_OW 263
42206: PUSH
42207: LD_INT 3
42209: EQUAL
42210: AND
42211: IFFALSE 42227
// HackDestroyVehicle ( unit , selectedUnit ) ;
42213: LD_VAR 0 2
42217: PPUSH
42218: LD_VAR 0 3
42222: PPUSH
42223: CALL 44123 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
42227: LD_VAR 0 1
42231: PUSH
42232: LD_INT 255
42234: EQUAL
42235: PUSH
42236: LD_VAR 0 2
42240: PPUSH
42241: CALL_OW 264
42245: PUSH
42246: LD_INT 14
42248: PUSH
42249: LD_INT 53
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: IN
42256: AND
42257: PUSH
42258: LD_VAR 0 4
42262: PPUSH
42263: LD_VAR 0 5
42267: PPUSH
42268: CALL_OW 488
42272: AND
42273: IFFALSE 42297
// CutTreeXYR ( unit , x , y , 12 ) ;
42275: LD_VAR 0 2
42279: PPUSH
42280: LD_VAR 0 4
42284: PPUSH
42285: LD_VAR 0 5
42289: PPUSH
42290: LD_INT 12
42292: PPUSH
42293: CALL 42689 0 4
// if cmd = 256 then
42297: LD_VAR 0 1
42301: PUSH
42302: LD_INT 256
42304: EQUAL
42305: IFFALSE 42326
// SetFactoryWaypoint ( unit , x , y ) ;
42307: LD_VAR 0 2
42311: PPUSH
42312: LD_VAR 0 4
42316: PPUSH
42317: LD_VAR 0 5
42321: PPUSH
42322: CALL 42331 0 3
// end ;
42326: LD_VAR 0 6
42330: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
42331: LD_INT 0
42333: PPUSH
42334: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
42335: LD_VAR 0 1
42339: NOT
42340: PUSH
42341: LD_VAR 0 2
42345: PPUSH
42346: LD_VAR 0 3
42350: PPUSH
42351: CALL_OW 488
42355: NOT
42356: OR
42357: PUSH
42358: LD_VAR 0 1
42362: PPUSH
42363: CALL_OW 266
42367: PUSH
42368: LD_INT 3
42370: NONEQUAL
42371: PUSH
42372: LD_VAR 0 1
42376: PPUSH
42377: CALL_OW 247
42381: PUSH
42382: LD_INT 1
42384: EQUAL
42385: NOT
42386: AND
42387: OR
42388: IFFALSE 42392
// exit ;
42390: GO 42541
// if GetType ( factory ) = unit_human then
42392: LD_VAR 0 1
42396: PPUSH
42397: CALL_OW 247
42401: PUSH
42402: LD_INT 1
42404: EQUAL
42405: IFFALSE 42422
// factory := IsInUnit ( factory ) ;
42407: LD_ADDR_VAR 0 1
42411: PUSH
42412: LD_VAR 0 1
42416: PPUSH
42417: CALL_OW 310
42421: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
42422: LD_VAR 0 1
42426: PPUSH
42427: CALL_OW 266
42431: PUSH
42432: LD_INT 3
42434: NONEQUAL
42435: IFFALSE 42439
// exit ;
42437: GO 42541
// if HexInfo ( x , y ) = factory then
42439: LD_VAR 0 2
42443: PPUSH
42444: LD_VAR 0 3
42448: PPUSH
42449: CALL_OW 428
42453: PUSH
42454: LD_VAR 0 1
42458: EQUAL
42459: IFFALSE 42486
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
42461: LD_ADDR_EXP 126
42465: PUSH
42466: LD_EXP 126
42470: PPUSH
42471: LD_VAR 0 1
42475: PPUSH
42476: LD_INT 0
42478: PPUSH
42479: CALL_OW 1
42483: ST_TO_ADDR
42484: GO 42537
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
42486: LD_ADDR_EXP 126
42490: PUSH
42491: LD_EXP 126
42495: PPUSH
42496: LD_VAR 0 1
42500: PPUSH
42501: LD_VAR 0 1
42505: PPUSH
42506: CALL_OW 255
42510: PUSH
42511: LD_VAR 0 1
42515: PUSH
42516: LD_VAR 0 2
42520: PUSH
42521: LD_VAR 0 3
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: PPUSH
42532: CALL_OW 1
42536: ST_TO_ADDR
// UpdateFactoryWaypoints ;
42537: CALL 42546 0 0
// end ;
42541: LD_VAR 0 4
42545: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
42546: LD_INT 0
42548: PPUSH
42549: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
42550: LD_STRING resetFactoryWaypoint();
42552: PPUSH
42553: CALL_OW 559
// if factoryWaypoints then
42557: LD_EXP 126
42561: IFFALSE 42684
// begin for i := 1 to factoryWaypoints do
42563: LD_ADDR_VAR 0 2
42567: PUSH
42568: DOUBLE
42569: LD_INT 1
42571: DEC
42572: ST_TO_ADDR
42573: LD_EXP 126
42577: PUSH
42578: FOR_TO
42579: IFFALSE 42682
// if factoryWaypoints [ i ] then
42581: LD_EXP 126
42585: PUSH
42586: LD_VAR 0 2
42590: ARRAY
42591: IFFALSE 42680
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
42593: LD_STRING setFactoryWaypointXY(
42595: PUSH
42596: LD_EXP 126
42600: PUSH
42601: LD_VAR 0 2
42605: ARRAY
42606: PUSH
42607: LD_INT 1
42609: ARRAY
42610: STR
42611: PUSH
42612: LD_STRING ,
42614: STR
42615: PUSH
42616: LD_EXP 126
42620: PUSH
42621: LD_VAR 0 2
42625: ARRAY
42626: PUSH
42627: LD_INT 2
42629: ARRAY
42630: STR
42631: PUSH
42632: LD_STRING ,
42634: STR
42635: PUSH
42636: LD_EXP 126
42640: PUSH
42641: LD_VAR 0 2
42645: ARRAY
42646: PUSH
42647: LD_INT 3
42649: ARRAY
42650: STR
42651: PUSH
42652: LD_STRING ,
42654: STR
42655: PUSH
42656: LD_EXP 126
42660: PUSH
42661: LD_VAR 0 2
42665: ARRAY
42666: PUSH
42667: LD_INT 4
42669: ARRAY
42670: STR
42671: PUSH
42672: LD_STRING )
42674: STR
42675: PPUSH
42676: CALL_OW 559
42680: GO 42578
42682: POP
42683: POP
// end ; end ;
42684: LD_VAR 0 1
42688: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
42689: LD_INT 0
42691: PPUSH
42692: PPUSH
42693: PPUSH
42694: PPUSH
42695: PPUSH
42696: PPUSH
42697: PPUSH
42698: PPUSH
42699: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
42700: LD_VAR 0 1
42704: NOT
42705: PUSH
42706: LD_VAR 0 2
42710: PPUSH
42711: LD_VAR 0 3
42715: PPUSH
42716: CALL_OW 488
42720: NOT
42721: OR
42722: PUSH
42723: LD_VAR 0 4
42727: NOT
42728: OR
42729: IFFALSE 42733
// exit ;
42731: GO 43073
// list := [ ] ;
42733: LD_ADDR_VAR 0 13
42737: PUSH
42738: EMPTY
42739: ST_TO_ADDR
// if x - r < 0 then
42740: LD_VAR 0 2
42744: PUSH
42745: LD_VAR 0 4
42749: MINUS
42750: PUSH
42751: LD_INT 0
42753: LESS
42754: IFFALSE 42766
// min_x := 0 else
42756: LD_ADDR_VAR 0 7
42760: PUSH
42761: LD_INT 0
42763: ST_TO_ADDR
42764: GO 42782
// min_x := x - r ;
42766: LD_ADDR_VAR 0 7
42770: PUSH
42771: LD_VAR 0 2
42775: PUSH
42776: LD_VAR 0 4
42780: MINUS
42781: ST_TO_ADDR
// if y - r < 0 then
42782: LD_VAR 0 3
42786: PUSH
42787: LD_VAR 0 4
42791: MINUS
42792: PUSH
42793: LD_INT 0
42795: LESS
42796: IFFALSE 42808
// min_y := 0 else
42798: LD_ADDR_VAR 0 8
42802: PUSH
42803: LD_INT 0
42805: ST_TO_ADDR
42806: GO 42824
// min_y := y - r ;
42808: LD_ADDR_VAR 0 8
42812: PUSH
42813: LD_VAR 0 3
42817: PUSH
42818: LD_VAR 0 4
42822: MINUS
42823: ST_TO_ADDR
// max_x := x + r ;
42824: LD_ADDR_VAR 0 9
42828: PUSH
42829: LD_VAR 0 2
42833: PUSH
42834: LD_VAR 0 4
42838: PLUS
42839: ST_TO_ADDR
// max_y := y + r ;
42840: LD_ADDR_VAR 0 10
42844: PUSH
42845: LD_VAR 0 3
42849: PUSH
42850: LD_VAR 0 4
42854: PLUS
42855: ST_TO_ADDR
// for _x = min_x to max_x do
42856: LD_ADDR_VAR 0 11
42860: PUSH
42861: DOUBLE
42862: LD_VAR 0 7
42866: DEC
42867: ST_TO_ADDR
42868: LD_VAR 0 9
42872: PUSH
42873: FOR_TO
42874: IFFALSE 42991
// for _y = min_y to max_y do
42876: LD_ADDR_VAR 0 12
42880: PUSH
42881: DOUBLE
42882: LD_VAR 0 8
42886: DEC
42887: ST_TO_ADDR
42888: LD_VAR 0 10
42892: PUSH
42893: FOR_TO
42894: IFFALSE 42987
// begin if not ValidHex ( _x , _y ) then
42896: LD_VAR 0 11
42900: PPUSH
42901: LD_VAR 0 12
42905: PPUSH
42906: CALL_OW 488
42910: NOT
42911: IFFALSE 42915
// continue ;
42913: GO 42893
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
42915: LD_VAR 0 11
42919: PPUSH
42920: LD_VAR 0 12
42924: PPUSH
42925: CALL_OW 351
42929: PUSH
42930: LD_VAR 0 11
42934: PPUSH
42935: LD_VAR 0 12
42939: PPUSH
42940: CALL_OW 554
42944: AND
42945: IFFALSE 42985
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
42947: LD_ADDR_VAR 0 13
42951: PUSH
42952: LD_VAR 0 13
42956: PPUSH
42957: LD_VAR 0 13
42961: PUSH
42962: LD_INT 1
42964: PLUS
42965: PPUSH
42966: LD_VAR 0 11
42970: PUSH
42971: LD_VAR 0 12
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PPUSH
42980: CALL_OW 2
42984: ST_TO_ADDR
// end ;
42985: GO 42893
42987: POP
42988: POP
42989: GO 42873
42991: POP
42992: POP
// if not list then
42993: LD_VAR 0 13
42997: NOT
42998: IFFALSE 43002
// exit ;
43000: GO 43073
// for i in list do
43002: LD_ADDR_VAR 0 6
43006: PUSH
43007: LD_VAR 0 13
43011: PUSH
43012: FOR_IN
43013: IFFALSE 43071
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
43015: LD_VAR 0 1
43019: PPUSH
43020: LD_STRING M
43022: PUSH
43023: LD_VAR 0 6
43027: PUSH
43028: LD_INT 1
43030: ARRAY
43031: PUSH
43032: LD_VAR 0 6
43036: PUSH
43037: LD_INT 2
43039: ARRAY
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: PUSH
43062: EMPTY
43063: LIST
43064: PPUSH
43065: CALL_OW 447
43069: GO 43012
43071: POP
43072: POP
// end ;
43073: LD_VAR 0 5
43077: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
43078: LD_EXP 127
43082: NOT
43083: IFFALSE 43133
43085: GO 43087
43087: DISABLE
// begin initHack := true ;
43088: LD_ADDR_EXP 127
43092: PUSH
43093: LD_INT 1
43095: ST_TO_ADDR
// hackTanks := [ ] ;
43096: LD_ADDR_EXP 128
43100: PUSH
43101: EMPTY
43102: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
43103: LD_ADDR_EXP 129
43107: PUSH
43108: EMPTY
43109: ST_TO_ADDR
// hackLimit := 3 ;
43110: LD_ADDR_EXP 130
43114: PUSH
43115: LD_INT 3
43117: ST_TO_ADDR
// hackDist := 12 ;
43118: LD_ADDR_EXP 131
43122: PUSH
43123: LD_INT 12
43125: ST_TO_ADDR
// hackCounter := [ ] ;
43126: LD_ADDR_EXP 132
43130: PUSH
43131: EMPTY
43132: ST_TO_ADDR
// end ;
43133: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
43134: LD_EXP 127
43138: PUSH
43139: LD_INT 34
43141: PUSH
43142: LD_EXP 50
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PPUSH
43151: CALL_OW 69
43155: AND
43156: IFFALSE 43411
43158: GO 43160
43160: DISABLE
43161: LD_INT 0
43163: PPUSH
43164: PPUSH
// begin enable ;
43165: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
43166: LD_ADDR_VAR 0 1
43170: PUSH
43171: LD_INT 34
43173: PUSH
43174: LD_EXP 50
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PPUSH
43183: CALL_OW 69
43187: PUSH
43188: FOR_IN
43189: IFFALSE 43409
// begin if not i in hackTanks then
43191: LD_VAR 0 1
43195: PUSH
43196: LD_EXP 128
43200: IN
43201: NOT
43202: IFFALSE 43285
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
43204: LD_ADDR_EXP 128
43208: PUSH
43209: LD_EXP 128
43213: PPUSH
43214: LD_EXP 128
43218: PUSH
43219: LD_INT 1
43221: PLUS
43222: PPUSH
43223: LD_VAR 0 1
43227: PPUSH
43228: CALL_OW 1
43232: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
43233: LD_ADDR_EXP 129
43237: PUSH
43238: LD_EXP 129
43242: PPUSH
43243: LD_EXP 129
43247: PUSH
43248: LD_INT 1
43250: PLUS
43251: PPUSH
43252: EMPTY
43253: PPUSH
43254: CALL_OW 1
43258: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
43259: LD_ADDR_EXP 132
43263: PUSH
43264: LD_EXP 132
43268: PPUSH
43269: LD_EXP 132
43273: PUSH
43274: LD_INT 1
43276: PLUS
43277: PPUSH
43278: EMPTY
43279: PPUSH
43280: CALL_OW 1
43284: ST_TO_ADDR
// end ; if not IsOk ( i ) then
43285: LD_VAR 0 1
43289: PPUSH
43290: CALL_OW 302
43294: NOT
43295: IFFALSE 43308
// begin HackUnlinkAll ( i ) ;
43297: LD_VAR 0 1
43301: PPUSH
43302: CALL 43414 0 1
// continue ;
43306: GO 43188
// end ; HackCheckCapturedStatus ( i ) ;
43308: LD_VAR 0 1
43312: PPUSH
43313: CALL 43857 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
43317: LD_ADDR_VAR 0 2
43321: PUSH
43322: LD_INT 81
43324: PUSH
43325: LD_VAR 0 1
43329: PPUSH
43330: CALL_OW 255
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 33
43341: PUSH
43342: LD_INT 3
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 91
43351: PUSH
43352: LD_VAR 0 1
43356: PUSH
43357: LD_EXP 131
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 50
43369: PUSH
43370: EMPTY
43371: LIST
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: PPUSH
43379: CALL_OW 69
43383: ST_TO_ADDR
// if not tmp then
43384: LD_VAR 0 2
43388: NOT
43389: IFFALSE 43393
// continue ;
43391: GO 43188
// HackLink ( i , tmp ) ;
43393: LD_VAR 0 1
43397: PPUSH
43398: LD_VAR 0 2
43402: PPUSH
43403: CALL 43550 0 2
// end ;
43407: GO 43188
43409: POP
43410: POP
// end ;
43411: PPOPN 2
43413: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
43414: LD_INT 0
43416: PPUSH
43417: PPUSH
43418: PPUSH
// if not hack in hackTanks then
43419: LD_VAR 0 1
43423: PUSH
43424: LD_EXP 128
43428: IN
43429: NOT
43430: IFFALSE 43434
// exit ;
43432: GO 43545
// index := GetElementIndex ( hackTanks , hack ) ;
43434: LD_ADDR_VAR 0 4
43438: PUSH
43439: LD_EXP 128
43443: PPUSH
43444: LD_VAR 0 1
43448: PPUSH
43449: CALL 51019 0 2
43453: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
43454: LD_EXP 129
43458: PUSH
43459: LD_VAR 0 4
43463: ARRAY
43464: IFFALSE 43545
// begin for i in hackTanksCaptured [ index ] do
43466: LD_ADDR_VAR 0 3
43470: PUSH
43471: LD_EXP 129
43475: PUSH
43476: LD_VAR 0 4
43480: ARRAY
43481: PUSH
43482: FOR_IN
43483: IFFALSE 43509
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
43485: LD_VAR 0 3
43489: PUSH
43490: LD_INT 1
43492: ARRAY
43493: PPUSH
43494: LD_VAR 0 3
43498: PUSH
43499: LD_INT 2
43501: ARRAY
43502: PPUSH
43503: CALL_OW 235
43507: GO 43482
43509: POP
43510: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
43511: LD_ADDR_EXP 129
43515: PUSH
43516: LD_EXP 129
43520: PPUSH
43521: LD_VAR 0 4
43525: PPUSH
43526: EMPTY
43527: PPUSH
43528: CALL_OW 1
43532: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
43533: LD_VAR 0 1
43537: PPUSH
43538: LD_INT 0
43540: PPUSH
43541: CALL_OW 505
// end ; end ;
43545: LD_VAR 0 2
43549: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
43550: LD_INT 0
43552: PPUSH
43553: PPUSH
43554: PPUSH
// if not hack in hackTanks or not vehicles then
43555: LD_VAR 0 1
43559: PUSH
43560: LD_EXP 128
43564: IN
43565: NOT
43566: PUSH
43567: LD_VAR 0 2
43571: NOT
43572: OR
43573: IFFALSE 43577
// exit ;
43575: GO 43852
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
43577: LD_ADDR_VAR 0 2
43581: PUSH
43582: LD_VAR 0 1
43586: PPUSH
43587: LD_VAR 0 2
43591: PPUSH
43592: LD_INT 1
43594: PPUSH
43595: LD_INT 1
43597: PPUSH
43598: CALL 51669 0 4
43602: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
43603: LD_ADDR_VAR 0 5
43607: PUSH
43608: LD_EXP 128
43612: PPUSH
43613: LD_VAR 0 1
43617: PPUSH
43618: CALL 51019 0 2
43622: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
43623: LD_EXP 129
43627: PUSH
43628: LD_VAR 0 5
43632: ARRAY
43633: PUSH
43634: LD_EXP 130
43638: LESS
43639: IFFALSE 43828
// begin for i := 1 to vehicles do
43641: LD_ADDR_VAR 0 4
43645: PUSH
43646: DOUBLE
43647: LD_INT 1
43649: DEC
43650: ST_TO_ADDR
43651: LD_VAR 0 2
43655: PUSH
43656: FOR_TO
43657: IFFALSE 43826
// begin if hackTanksCaptured [ index ] = hackLimit then
43659: LD_EXP 129
43663: PUSH
43664: LD_VAR 0 5
43668: ARRAY
43669: PUSH
43670: LD_EXP 130
43674: EQUAL
43675: IFFALSE 43679
// break ;
43677: GO 43826
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
43679: LD_ADDR_EXP 132
43683: PUSH
43684: LD_EXP 132
43688: PPUSH
43689: LD_VAR 0 5
43693: PPUSH
43694: LD_EXP 132
43698: PUSH
43699: LD_VAR 0 5
43703: ARRAY
43704: PUSH
43705: LD_INT 1
43707: PLUS
43708: PPUSH
43709: CALL_OW 1
43713: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
43714: LD_ADDR_EXP 129
43718: PUSH
43719: LD_EXP 129
43723: PPUSH
43724: LD_VAR 0 5
43728: PUSH
43729: LD_EXP 129
43733: PUSH
43734: LD_VAR 0 5
43738: ARRAY
43739: PUSH
43740: LD_INT 1
43742: PLUS
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PPUSH
43748: LD_VAR 0 2
43752: PUSH
43753: LD_VAR 0 4
43757: ARRAY
43758: PUSH
43759: LD_VAR 0 2
43763: PUSH
43764: LD_VAR 0 4
43768: ARRAY
43769: PPUSH
43770: CALL_OW 255
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PPUSH
43779: CALL 51234 0 3
43783: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
43784: LD_VAR 0 2
43788: PUSH
43789: LD_VAR 0 4
43793: ARRAY
43794: PPUSH
43795: LD_VAR 0 1
43799: PPUSH
43800: CALL_OW 255
43804: PPUSH
43805: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
43809: LD_VAR 0 2
43813: PUSH
43814: LD_VAR 0 4
43818: ARRAY
43819: PPUSH
43820: CALL_OW 141
// end ;
43824: GO 43656
43826: POP
43827: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
43828: LD_VAR 0 1
43832: PPUSH
43833: LD_EXP 129
43837: PUSH
43838: LD_VAR 0 5
43842: ARRAY
43843: PUSH
43844: LD_INT 0
43846: PLUS
43847: PPUSH
43848: CALL_OW 505
// end ;
43852: LD_VAR 0 3
43856: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
43857: LD_INT 0
43859: PPUSH
43860: PPUSH
43861: PPUSH
43862: PPUSH
// if not hack in hackTanks then
43863: LD_VAR 0 1
43867: PUSH
43868: LD_EXP 128
43872: IN
43873: NOT
43874: IFFALSE 43878
// exit ;
43876: GO 44118
// index := GetElementIndex ( hackTanks , hack ) ;
43878: LD_ADDR_VAR 0 4
43882: PUSH
43883: LD_EXP 128
43887: PPUSH
43888: LD_VAR 0 1
43892: PPUSH
43893: CALL 51019 0 2
43897: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
43898: LD_ADDR_VAR 0 3
43902: PUSH
43903: DOUBLE
43904: LD_EXP 129
43908: PUSH
43909: LD_VAR 0 4
43913: ARRAY
43914: INC
43915: ST_TO_ADDR
43916: LD_INT 1
43918: PUSH
43919: FOR_DOWNTO
43920: IFFALSE 44092
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
43922: LD_ADDR_VAR 0 5
43926: PUSH
43927: LD_EXP 129
43931: PUSH
43932: LD_VAR 0 4
43936: ARRAY
43937: PUSH
43938: LD_VAR 0 3
43942: ARRAY
43943: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
43944: LD_VAR 0 5
43948: PUSH
43949: LD_INT 1
43951: ARRAY
43952: PPUSH
43953: CALL_OW 302
43957: NOT
43958: PUSH
43959: LD_VAR 0 5
43963: PUSH
43964: LD_INT 1
43966: ARRAY
43967: PPUSH
43968: CALL_OW 255
43972: PUSH
43973: LD_VAR 0 1
43977: PPUSH
43978: CALL_OW 255
43982: NONEQUAL
43983: OR
43984: IFFALSE 44090
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
43986: LD_VAR 0 5
43990: PUSH
43991: LD_INT 1
43993: ARRAY
43994: PPUSH
43995: CALL_OW 305
43999: PUSH
44000: LD_VAR 0 5
44004: PUSH
44005: LD_INT 1
44007: ARRAY
44008: PPUSH
44009: CALL_OW 255
44013: PUSH
44014: LD_VAR 0 1
44018: PPUSH
44019: CALL_OW 255
44023: EQUAL
44024: AND
44025: IFFALSE 44049
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
44027: LD_VAR 0 5
44031: PUSH
44032: LD_INT 1
44034: ARRAY
44035: PPUSH
44036: LD_VAR 0 5
44040: PUSH
44041: LD_INT 2
44043: ARRAY
44044: PPUSH
44045: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
44049: LD_ADDR_EXP 129
44053: PUSH
44054: LD_EXP 129
44058: PPUSH
44059: LD_VAR 0 4
44063: PPUSH
44064: LD_EXP 129
44068: PUSH
44069: LD_VAR 0 4
44073: ARRAY
44074: PPUSH
44075: LD_VAR 0 3
44079: PPUSH
44080: CALL_OW 3
44084: PPUSH
44085: CALL_OW 1
44089: ST_TO_ADDR
// end ; end ;
44090: GO 43919
44092: POP
44093: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44094: LD_VAR 0 1
44098: PPUSH
44099: LD_EXP 129
44103: PUSH
44104: LD_VAR 0 4
44108: ARRAY
44109: PUSH
44110: LD_INT 0
44112: PLUS
44113: PPUSH
44114: CALL_OW 505
// end ;
44118: LD_VAR 0 2
44122: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
44123: LD_INT 0
44125: PPUSH
44126: PPUSH
44127: PPUSH
44128: PPUSH
// if not hack in hackTanks then
44129: LD_VAR 0 1
44133: PUSH
44134: LD_EXP 128
44138: IN
44139: NOT
44140: IFFALSE 44144
// exit ;
44142: GO 44229
// index := GetElementIndex ( hackTanks , hack ) ;
44144: LD_ADDR_VAR 0 5
44148: PUSH
44149: LD_EXP 128
44153: PPUSH
44154: LD_VAR 0 1
44158: PPUSH
44159: CALL 51019 0 2
44163: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
44164: LD_ADDR_VAR 0 4
44168: PUSH
44169: DOUBLE
44170: LD_INT 1
44172: DEC
44173: ST_TO_ADDR
44174: LD_EXP 129
44178: PUSH
44179: LD_VAR 0 5
44183: ARRAY
44184: PUSH
44185: FOR_TO
44186: IFFALSE 44227
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
44188: LD_EXP 129
44192: PUSH
44193: LD_VAR 0 5
44197: ARRAY
44198: PUSH
44199: LD_VAR 0 4
44203: ARRAY
44204: PUSH
44205: LD_INT 1
44207: ARRAY
44208: PUSH
44209: LD_VAR 0 2
44213: EQUAL
44214: IFFALSE 44225
// KillUnit ( vehicle ) ;
44216: LD_VAR 0 2
44220: PPUSH
44221: CALL_OW 66
44225: GO 44185
44227: POP
44228: POP
// end ;
44229: LD_VAR 0 3
44233: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
44234: LD_EXP 133
44238: NOT
44239: IFFALSE 44274
44241: GO 44243
44243: DISABLE
// begin initMiner := true ;
44244: LD_ADDR_EXP 133
44248: PUSH
44249: LD_INT 1
44251: ST_TO_ADDR
// minersList := [ ] ;
44252: LD_ADDR_EXP 134
44256: PUSH
44257: EMPTY
44258: ST_TO_ADDR
// minerMinesList := [ ] ;
44259: LD_ADDR_EXP 135
44263: PUSH
44264: EMPTY
44265: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
44266: LD_ADDR_EXP 136
44270: PUSH
44271: LD_INT 5
44273: ST_TO_ADDR
// end ;
44274: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
44275: LD_EXP 133
44279: PUSH
44280: LD_INT 34
44282: PUSH
44283: LD_EXP 55
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PPUSH
44292: CALL_OW 69
44296: AND
44297: IFFALSE 44760
44299: GO 44301
44301: DISABLE
44302: LD_INT 0
44304: PPUSH
44305: PPUSH
44306: PPUSH
44307: PPUSH
// begin enable ;
44308: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
44309: LD_ADDR_VAR 0 1
44313: PUSH
44314: LD_INT 34
44316: PUSH
44317: LD_EXP 55
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PPUSH
44326: CALL_OW 69
44330: PUSH
44331: FOR_IN
44332: IFFALSE 44404
// begin if not i in minersList then
44334: LD_VAR 0 1
44338: PUSH
44339: LD_EXP 134
44343: IN
44344: NOT
44345: IFFALSE 44402
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
44347: LD_ADDR_EXP 134
44351: PUSH
44352: LD_EXP 134
44356: PPUSH
44357: LD_EXP 134
44361: PUSH
44362: LD_INT 1
44364: PLUS
44365: PPUSH
44366: LD_VAR 0 1
44370: PPUSH
44371: CALL_OW 1
44375: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
44376: LD_ADDR_EXP 135
44380: PUSH
44381: LD_EXP 135
44385: PPUSH
44386: LD_EXP 135
44390: PUSH
44391: LD_INT 1
44393: PLUS
44394: PPUSH
44395: EMPTY
44396: PPUSH
44397: CALL_OW 1
44401: ST_TO_ADDR
// end end ;
44402: GO 44331
44404: POP
44405: POP
// for i := minerMinesList downto 1 do
44406: LD_ADDR_VAR 0 1
44410: PUSH
44411: DOUBLE
44412: LD_EXP 135
44416: INC
44417: ST_TO_ADDR
44418: LD_INT 1
44420: PUSH
44421: FOR_DOWNTO
44422: IFFALSE 44758
// begin if IsLive ( minersList [ i ] ) then
44424: LD_EXP 134
44428: PUSH
44429: LD_VAR 0 1
44433: ARRAY
44434: PPUSH
44435: CALL_OW 300
44439: IFFALSE 44467
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
44441: LD_EXP 134
44445: PUSH
44446: LD_VAR 0 1
44450: ARRAY
44451: PPUSH
44452: LD_EXP 135
44456: PUSH
44457: LD_VAR 0 1
44461: ARRAY
44462: PPUSH
44463: CALL_OW 505
// if not minerMinesList [ i ] then
44467: LD_EXP 135
44471: PUSH
44472: LD_VAR 0 1
44476: ARRAY
44477: NOT
44478: IFFALSE 44482
// continue ;
44480: GO 44421
// for j := minerMinesList [ i ] downto 1 do
44482: LD_ADDR_VAR 0 2
44486: PUSH
44487: DOUBLE
44488: LD_EXP 135
44492: PUSH
44493: LD_VAR 0 1
44497: ARRAY
44498: INC
44499: ST_TO_ADDR
44500: LD_INT 1
44502: PUSH
44503: FOR_DOWNTO
44504: IFFALSE 44754
// begin side := GetSide ( minersList [ i ] ) ;
44506: LD_ADDR_VAR 0 3
44510: PUSH
44511: LD_EXP 134
44515: PUSH
44516: LD_VAR 0 1
44520: ARRAY
44521: PPUSH
44522: CALL_OW 255
44526: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
44527: LD_ADDR_VAR 0 4
44531: PUSH
44532: LD_EXP 135
44536: PUSH
44537: LD_VAR 0 1
44541: ARRAY
44542: PUSH
44543: LD_VAR 0 2
44547: ARRAY
44548: PUSH
44549: LD_INT 1
44551: ARRAY
44552: PPUSH
44553: LD_EXP 135
44557: PUSH
44558: LD_VAR 0 1
44562: ARRAY
44563: PUSH
44564: LD_VAR 0 2
44568: ARRAY
44569: PUSH
44570: LD_INT 2
44572: ARRAY
44573: PPUSH
44574: CALL_OW 428
44578: ST_TO_ADDR
// if not tmp then
44579: LD_VAR 0 4
44583: NOT
44584: IFFALSE 44588
// continue ;
44586: GO 44503
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
44588: LD_VAR 0 4
44592: PUSH
44593: LD_INT 81
44595: PUSH
44596: LD_VAR 0 3
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PPUSH
44605: CALL_OW 69
44609: IN
44610: PUSH
44611: LD_EXP 135
44615: PUSH
44616: LD_VAR 0 1
44620: ARRAY
44621: PUSH
44622: LD_VAR 0 2
44626: ARRAY
44627: PUSH
44628: LD_INT 1
44630: ARRAY
44631: PPUSH
44632: LD_EXP 135
44636: PUSH
44637: LD_VAR 0 1
44641: ARRAY
44642: PUSH
44643: LD_VAR 0 2
44647: ARRAY
44648: PUSH
44649: LD_INT 2
44651: ARRAY
44652: PPUSH
44653: CALL_OW 458
44657: AND
44658: IFFALSE 44752
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
44660: LD_EXP 135
44664: PUSH
44665: LD_VAR 0 1
44669: ARRAY
44670: PUSH
44671: LD_VAR 0 2
44675: ARRAY
44676: PUSH
44677: LD_INT 1
44679: ARRAY
44680: PPUSH
44681: LD_EXP 135
44685: PUSH
44686: LD_VAR 0 1
44690: ARRAY
44691: PUSH
44692: LD_VAR 0 2
44696: ARRAY
44697: PUSH
44698: LD_INT 2
44700: ARRAY
44701: PPUSH
44702: LD_VAR 0 3
44706: PPUSH
44707: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
44711: LD_ADDR_EXP 135
44715: PUSH
44716: LD_EXP 135
44720: PPUSH
44721: LD_VAR 0 1
44725: PPUSH
44726: LD_EXP 135
44730: PUSH
44731: LD_VAR 0 1
44735: ARRAY
44736: PPUSH
44737: LD_VAR 0 2
44741: PPUSH
44742: CALL_OW 3
44746: PPUSH
44747: CALL_OW 1
44751: ST_TO_ADDR
// end ; end ;
44752: GO 44503
44754: POP
44755: POP
// end ;
44756: GO 44421
44758: POP
44759: POP
// end ;
44760: PPOPN 4
44762: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
44763: LD_INT 0
44765: PPUSH
44766: PPUSH
// result := false ;
44767: LD_ADDR_VAR 0 4
44771: PUSH
44772: LD_INT 0
44774: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
44775: LD_VAR 0 1
44779: PPUSH
44780: CALL_OW 264
44784: PUSH
44785: LD_EXP 55
44789: EQUAL
44790: NOT
44791: IFFALSE 44795
// exit ;
44793: GO 45035
// index := GetElementIndex ( minersList , unit ) ;
44795: LD_ADDR_VAR 0 5
44799: PUSH
44800: LD_EXP 134
44804: PPUSH
44805: LD_VAR 0 1
44809: PPUSH
44810: CALL 51019 0 2
44814: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
44815: LD_EXP 135
44819: PUSH
44820: LD_VAR 0 5
44824: ARRAY
44825: PUSH
44826: LD_EXP 136
44830: GREATEREQUAL
44831: IFFALSE 44835
// exit ;
44833: GO 45035
// ComMoveXY ( unit , x , y ) ;
44835: LD_VAR 0 1
44839: PPUSH
44840: LD_VAR 0 2
44844: PPUSH
44845: LD_VAR 0 3
44849: PPUSH
44850: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
44854: LD_INT 35
44856: PPUSH
44857: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
44861: LD_VAR 0 1
44865: PPUSH
44866: LD_VAR 0 2
44870: PPUSH
44871: LD_VAR 0 3
44875: PPUSH
44876: CALL 81738 0 3
44880: NOT
44881: PUSH
44882: LD_VAR 0 1
44886: PPUSH
44887: CALL_OW 314
44891: AND
44892: IFFALSE 44896
// exit ;
44894: GO 45035
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
44896: LD_VAR 0 2
44900: PPUSH
44901: LD_VAR 0 3
44905: PPUSH
44906: CALL_OW 428
44910: PUSH
44911: LD_VAR 0 1
44915: EQUAL
44916: PUSH
44917: LD_VAR 0 1
44921: PPUSH
44922: CALL_OW 314
44926: NOT
44927: AND
44928: IFFALSE 44854
// PlaySoundXY ( x , y , PlantMine ) ;
44930: LD_VAR 0 2
44934: PPUSH
44935: LD_VAR 0 3
44939: PPUSH
44940: LD_STRING PlantMine
44942: PPUSH
44943: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
44947: LD_VAR 0 2
44951: PPUSH
44952: LD_VAR 0 3
44956: PPUSH
44957: LD_VAR 0 1
44961: PPUSH
44962: CALL_OW 255
44966: PPUSH
44967: LD_INT 0
44969: PPUSH
44970: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
44974: LD_ADDR_EXP 135
44978: PUSH
44979: LD_EXP 135
44983: PPUSH
44984: LD_VAR 0 5
44988: PUSH
44989: LD_EXP 135
44993: PUSH
44994: LD_VAR 0 5
44998: ARRAY
44999: PUSH
45000: LD_INT 1
45002: PLUS
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PPUSH
45008: LD_VAR 0 2
45012: PUSH
45013: LD_VAR 0 3
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PPUSH
45022: CALL 51234 0 3
45026: ST_TO_ADDR
// result := true ;
45027: LD_ADDR_VAR 0 4
45031: PUSH
45032: LD_INT 1
45034: ST_TO_ADDR
// end ;
45035: LD_VAR 0 4
45039: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
45040: LD_INT 0
45042: PPUSH
45043: PPUSH
45044: PPUSH
// if not unit in minersList then
45045: LD_VAR 0 1
45049: PUSH
45050: LD_EXP 134
45054: IN
45055: NOT
45056: IFFALSE 45060
// exit ;
45058: GO 45452
// index := GetElementIndex ( minersList , unit ) ;
45060: LD_ADDR_VAR 0 6
45064: PUSH
45065: LD_EXP 134
45069: PPUSH
45070: LD_VAR 0 1
45074: PPUSH
45075: CALL 51019 0 2
45079: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
45080: LD_ADDR_VAR 0 5
45084: PUSH
45085: DOUBLE
45086: LD_EXP 135
45090: PUSH
45091: LD_VAR 0 6
45095: ARRAY
45096: INC
45097: ST_TO_ADDR
45098: LD_INT 1
45100: PUSH
45101: FOR_DOWNTO
45102: IFFALSE 45263
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
45104: LD_EXP 135
45108: PUSH
45109: LD_VAR 0 6
45113: ARRAY
45114: PUSH
45115: LD_VAR 0 5
45119: ARRAY
45120: PUSH
45121: LD_INT 1
45123: ARRAY
45124: PUSH
45125: LD_VAR 0 2
45129: EQUAL
45130: PUSH
45131: LD_EXP 135
45135: PUSH
45136: LD_VAR 0 6
45140: ARRAY
45141: PUSH
45142: LD_VAR 0 5
45146: ARRAY
45147: PUSH
45148: LD_INT 2
45150: ARRAY
45151: PUSH
45152: LD_VAR 0 3
45156: EQUAL
45157: AND
45158: IFFALSE 45261
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45160: LD_EXP 135
45164: PUSH
45165: LD_VAR 0 6
45169: ARRAY
45170: PUSH
45171: LD_VAR 0 5
45175: ARRAY
45176: PUSH
45177: LD_INT 1
45179: ARRAY
45180: PPUSH
45181: LD_EXP 135
45185: PUSH
45186: LD_VAR 0 6
45190: ARRAY
45191: PUSH
45192: LD_VAR 0 5
45196: ARRAY
45197: PUSH
45198: LD_INT 2
45200: ARRAY
45201: PPUSH
45202: LD_VAR 0 1
45206: PPUSH
45207: CALL_OW 255
45211: PPUSH
45212: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45216: LD_ADDR_EXP 135
45220: PUSH
45221: LD_EXP 135
45225: PPUSH
45226: LD_VAR 0 6
45230: PPUSH
45231: LD_EXP 135
45235: PUSH
45236: LD_VAR 0 6
45240: ARRAY
45241: PPUSH
45242: LD_VAR 0 5
45246: PPUSH
45247: CALL_OW 3
45251: PPUSH
45252: CALL_OW 1
45256: ST_TO_ADDR
// exit ;
45257: POP
45258: POP
45259: GO 45452
// end ; end ;
45261: GO 45101
45263: POP
45264: POP
// for i := minerMinesList [ index ] downto 1 do
45265: LD_ADDR_VAR 0 5
45269: PUSH
45270: DOUBLE
45271: LD_EXP 135
45275: PUSH
45276: LD_VAR 0 6
45280: ARRAY
45281: INC
45282: ST_TO_ADDR
45283: LD_INT 1
45285: PUSH
45286: FOR_DOWNTO
45287: IFFALSE 45450
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
45289: LD_EXP 135
45293: PUSH
45294: LD_VAR 0 6
45298: ARRAY
45299: PUSH
45300: LD_VAR 0 5
45304: ARRAY
45305: PUSH
45306: LD_INT 1
45308: ARRAY
45309: PPUSH
45310: LD_EXP 135
45314: PUSH
45315: LD_VAR 0 6
45319: ARRAY
45320: PUSH
45321: LD_VAR 0 5
45325: ARRAY
45326: PUSH
45327: LD_INT 2
45329: ARRAY
45330: PPUSH
45331: LD_VAR 0 2
45335: PPUSH
45336: LD_VAR 0 3
45340: PPUSH
45341: CALL_OW 298
45345: PUSH
45346: LD_INT 6
45348: LESS
45349: IFFALSE 45448
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45351: LD_EXP 135
45355: PUSH
45356: LD_VAR 0 6
45360: ARRAY
45361: PUSH
45362: LD_VAR 0 5
45366: ARRAY
45367: PUSH
45368: LD_INT 1
45370: ARRAY
45371: PPUSH
45372: LD_EXP 135
45376: PUSH
45377: LD_VAR 0 6
45381: ARRAY
45382: PUSH
45383: LD_VAR 0 5
45387: ARRAY
45388: PUSH
45389: LD_INT 2
45391: ARRAY
45392: PPUSH
45393: LD_VAR 0 1
45397: PPUSH
45398: CALL_OW 255
45402: PPUSH
45403: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45407: LD_ADDR_EXP 135
45411: PUSH
45412: LD_EXP 135
45416: PPUSH
45417: LD_VAR 0 6
45421: PPUSH
45422: LD_EXP 135
45426: PUSH
45427: LD_VAR 0 6
45431: ARRAY
45432: PPUSH
45433: LD_VAR 0 5
45437: PPUSH
45438: CALL_OW 3
45442: PPUSH
45443: CALL_OW 1
45447: ST_TO_ADDR
// end ; end ;
45448: GO 45286
45450: POP
45451: POP
// end ;
45452: LD_VAR 0 4
45456: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
45457: LD_INT 0
45459: PPUSH
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
45464: PPUSH
45465: PPUSH
45466: PPUSH
45467: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
45468: LD_VAR 0 1
45472: PPUSH
45473: CALL_OW 264
45477: PUSH
45478: LD_EXP 55
45482: EQUAL
45483: NOT
45484: PUSH
45485: LD_VAR 0 1
45489: PUSH
45490: LD_EXP 134
45494: IN
45495: NOT
45496: OR
45497: IFFALSE 45501
// exit ;
45499: GO 45823
// index := GetElementIndex ( minersList , unit ) ;
45501: LD_ADDR_VAR 0 6
45505: PUSH
45506: LD_EXP 134
45510: PPUSH
45511: LD_VAR 0 1
45515: PPUSH
45516: CALL 51019 0 2
45520: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
45521: LD_ADDR_VAR 0 8
45525: PUSH
45526: LD_EXP 136
45530: PUSH
45531: LD_EXP 135
45535: PUSH
45536: LD_VAR 0 6
45540: ARRAY
45541: MINUS
45542: ST_TO_ADDR
// if not minesFreeAmount then
45543: LD_VAR 0 8
45547: NOT
45548: IFFALSE 45552
// exit ;
45550: GO 45823
// tmp := [ ] ;
45552: LD_ADDR_VAR 0 7
45556: PUSH
45557: EMPTY
45558: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
45559: LD_ADDR_VAR 0 5
45563: PUSH
45564: DOUBLE
45565: LD_INT 1
45567: DEC
45568: ST_TO_ADDR
45569: LD_VAR 0 8
45573: PUSH
45574: FOR_TO
45575: IFFALSE 45770
// begin _d := rand ( 0 , 5 ) ;
45577: LD_ADDR_VAR 0 11
45581: PUSH
45582: LD_INT 0
45584: PPUSH
45585: LD_INT 5
45587: PPUSH
45588: CALL_OW 12
45592: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
45593: LD_ADDR_VAR 0 12
45597: PUSH
45598: LD_INT 2
45600: PPUSH
45601: LD_INT 6
45603: PPUSH
45604: CALL_OW 12
45608: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
45609: LD_ADDR_VAR 0 9
45613: PUSH
45614: LD_VAR 0 2
45618: PPUSH
45619: LD_VAR 0 11
45623: PPUSH
45624: LD_VAR 0 12
45628: PPUSH
45629: CALL_OW 272
45633: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
45634: LD_ADDR_VAR 0 10
45638: PUSH
45639: LD_VAR 0 3
45643: PPUSH
45644: LD_VAR 0 11
45648: PPUSH
45649: LD_VAR 0 12
45653: PPUSH
45654: CALL_OW 273
45658: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
45659: LD_VAR 0 9
45663: PPUSH
45664: LD_VAR 0 10
45668: PPUSH
45669: CALL_OW 488
45673: PUSH
45674: LD_VAR 0 9
45678: PUSH
45679: LD_VAR 0 10
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_VAR 0 7
45692: IN
45693: NOT
45694: AND
45695: PUSH
45696: LD_VAR 0 9
45700: PPUSH
45701: LD_VAR 0 10
45705: PPUSH
45706: CALL_OW 458
45710: NOT
45711: AND
45712: IFFALSE 45754
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
45714: LD_ADDR_VAR 0 7
45718: PUSH
45719: LD_VAR 0 7
45723: PPUSH
45724: LD_VAR 0 7
45728: PUSH
45729: LD_INT 1
45731: PLUS
45732: PPUSH
45733: LD_VAR 0 9
45737: PUSH
45738: LD_VAR 0 10
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PPUSH
45747: CALL_OW 1
45751: ST_TO_ADDR
45752: GO 45768
// i := i - 1 ;
45754: LD_ADDR_VAR 0 5
45758: PUSH
45759: LD_VAR 0 5
45763: PUSH
45764: LD_INT 1
45766: MINUS
45767: ST_TO_ADDR
// end ;
45768: GO 45574
45770: POP
45771: POP
// for i in tmp do
45772: LD_ADDR_VAR 0 5
45776: PUSH
45777: LD_VAR 0 7
45781: PUSH
45782: FOR_IN
45783: IFFALSE 45821
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
45785: LD_VAR 0 1
45789: PPUSH
45790: LD_VAR 0 5
45794: PUSH
45795: LD_INT 1
45797: ARRAY
45798: PPUSH
45799: LD_VAR 0 5
45803: PUSH
45804: LD_INT 2
45806: ARRAY
45807: PPUSH
45808: CALL 44763 0 3
45812: NOT
45813: IFFALSE 45819
// exit ;
45815: POP
45816: POP
45817: GO 45823
45819: GO 45782
45821: POP
45822: POP
// end ;
45823: LD_VAR 0 4
45827: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
45828: LD_INT 0
45830: PPUSH
45831: PPUSH
45832: PPUSH
45833: PPUSH
45834: PPUSH
45835: PPUSH
45836: PPUSH
// if not GetClass ( unit ) = class_sniper then
45837: LD_VAR 0 1
45841: PPUSH
45842: CALL_OW 257
45846: PUSH
45847: LD_INT 5
45849: EQUAL
45850: NOT
45851: IFFALSE 45855
// exit ;
45853: GO 46243
// dist := 8 ;
45855: LD_ADDR_VAR 0 5
45859: PUSH
45860: LD_INT 8
45862: ST_TO_ADDR
// viewRange := 12 ;
45863: LD_ADDR_VAR 0 7
45867: PUSH
45868: LD_INT 12
45870: ST_TO_ADDR
// side := GetSide ( unit ) ;
45871: LD_ADDR_VAR 0 6
45875: PUSH
45876: LD_VAR 0 1
45880: PPUSH
45881: CALL_OW 255
45885: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
45886: LD_INT 61
45888: PPUSH
45889: LD_VAR 0 6
45893: PPUSH
45894: CALL_OW 321
45898: PUSH
45899: LD_INT 2
45901: EQUAL
45902: IFFALSE 45912
// viewRange := 16 ;
45904: LD_ADDR_VAR 0 7
45908: PUSH
45909: LD_INT 16
45911: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
45912: LD_VAR 0 1
45916: PPUSH
45917: LD_VAR 0 2
45921: PPUSH
45922: LD_VAR 0 3
45926: PPUSH
45927: CALL_OW 297
45931: PUSH
45932: LD_VAR 0 5
45936: GREATER
45937: IFFALSE 46016
// begin ComMoveXY ( unit , x , y ) ;
45939: LD_VAR 0 1
45943: PPUSH
45944: LD_VAR 0 2
45948: PPUSH
45949: LD_VAR 0 3
45953: PPUSH
45954: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
45958: LD_INT 35
45960: PPUSH
45961: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
45965: LD_VAR 0 1
45969: PPUSH
45970: LD_VAR 0 2
45974: PPUSH
45975: LD_VAR 0 3
45979: PPUSH
45980: CALL 81738 0 3
45984: NOT
45985: IFFALSE 45989
// exit ;
45987: GO 46243
// until GetDistUnitXY ( unit , x , y ) < dist ;
45989: LD_VAR 0 1
45993: PPUSH
45994: LD_VAR 0 2
45998: PPUSH
45999: LD_VAR 0 3
46003: PPUSH
46004: CALL_OW 297
46008: PUSH
46009: LD_VAR 0 5
46013: LESS
46014: IFFALSE 45958
// end ; ComTurnXY ( unit , x , y ) ;
46016: LD_VAR 0 1
46020: PPUSH
46021: LD_VAR 0 2
46025: PPUSH
46026: LD_VAR 0 3
46030: PPUSH
46031: CALL_OW 118
// wait ( 5 ) ;
46035: LD_INT 5
46037: PPUSH
46038: CALL_OW 67
// _d := GetDir ( unit ) ;
46042: LD_ADDR_VAR 0 10
46046: PUSH
46047: LD_VAR 0 1
46051: PPUSH
46052: CALL_OW 254
46056: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
46057: LD_ADDR_VAR 0 8
46061: PUSH
46062: LD_VAR 0 1
46066: PPUSH
46067: CALL_OW 250
46071: PPUSH
46072: LD_VAR 0 10
46076: PPUSH
46077: LD_VAR 0 5
46081: PPUSH
46082: CALL_OW 272
46086: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
46087: LD_ADDR_VAR 0 9
46091: PUSH
46092: LD_VAR 0 1
46096: PPUSH
46097: CALL_OW 251
46101: PPUSH
46102: LD_VAR 0 10
46106: PPUSH
46107: LD_VAR 0 5
46111: PPUSH
46112: CALL_OW 273
46116: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46117: LD_VAR 0 8
46121: PPUSH
46122: LD_VAR 0 9
46126: PPUSH
46127: CALL_OW 488
46131: NOT
46132: IFFALSE 46136
// exit ;
46134: GO 46243
// ComAnimCustom ( unit , 1 ) ;
46136: LD_VAR 0 1
46140: PPUSH
46141: LD_INT 1
46143: PPUSH
46144: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
46148: LD_VAR 0 8
46152: PPUSH
46153: LD_VAR 0 9
46157: PPUSH
46158: LD_VAR 0 6
46162: PPUSH
46163: LD_VAR 0 7
46167: PPUSH
46168: CALL_OW 330
// repeat wait ( 1 ) ;
46172: LD_INT 1
46174: PPUSH
46175: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
46179: LD_VAR 0 1
46183: PPUSH
46184: CALL_OW 316
46188: PUSH
46189: LD_VAR 0 1
46193: PPUSH
46194: CALL_OW 314
46198: OR
46199: PUSH
46200: LD_VAR 0 1
46204: PPUSH
46205: CALL_OW 302
46209: NOT
46210: OR
46211: PUSH
46212: LD_VAR 0 1
46216: PPUSH
46217: CALL_OW 301
46221: OR
46222: IFFALSE 46172
// RemoveSeeing ( _x , _y , side ) ;
46224: LD_VAR 0 8
46228: PPUSH
46229: LD_VAR 0 9
46233: PPUSH
46234: LD_VAR 0 6
46238: PPUSH
46239: CALL_OW 331
// end ; end_of_file
46243: LD_VAR 0 4
46247: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
46248: LD_INT 0
46250: PPUSH
46251: PPUSH
// if exist_mode then
46252: LD_VAR 0 2
46256: IFFALSE 46281
// unit := CreateCharacter ( prefix & ident ) else
46258: LD_ADDR_VAR 0 5
46262: PUSH
46263: LD_VAR 0 3
46267: PUSH
46268: LD_VAR 0 1
46272: STR
46273: PPUSH
46274: CALL_OW 34
46278: ST_TO_ADDR
46279: GO 46296
// unit := NewCharacter ( ident ) ;
46281: LD_ADDR_VAR 0 5
46285: PUSH
46286: LD_VAR 0 1
46290: PPUSH
46291: CALL_OW 25
46295: ST_TO_ADDR
// result := unit ;
46296: LD_ADDR_VAR 0 4
46300: PUSH
46301: LD_VAR 0 5
46305: ST_TO_ADDR
// end ;
46306: LD_VAR 0 4
46310: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
46311: LD_INT 0
46313: PPUSH
46314: PPUSH
// if not side or not nation then
46315: LD_VAR 0 1
46319: NOT
46320: PUSH
46321: LD_VAR 0 2
46325: NOT
46326: OR
46327: IFFALSE 46331
// exit ;
46329: GO 47099
// case nation of nation_american :
46331: LD_VAR 0 2
46335: PUSH
46336: LD_INT 1
46338: DOUBLE
46339: EQUAL
46340: IFTRUE 46344
46342: GO 46558
46344: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
46345: LD_ADDR_VAR 0 4
46349: PUSH
46350: LD_INT 35
46352: PUSH
46353: LD_INT 45
46355: PUSH
46356: LD_INT 46
46358: PUSH
46359: LD_INT 47
46361: PUSH
46362: LD_INT 82
46364: PUSH
46365: LD_INT 83
46367: PUSH
46368: LD_INT 84
46370: PUSH
46371: LD_INT 85
46373: PUSH
46374: LD_INT 86
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: LD_INT 6
46385: PUSH
46386: LD_INT 15
46388: PUSH
46389: LD_INT 16
46391: PUSH
46392: LD_INT 7
46394: PUSH
46395: LD_INT 12
46397: PUSH
46398: LD_INT 13
46400: PUSH
46401: LD_INT 10
46403: PUSH
46404: LD_INT 14
46406: PUSH
46407: LD_INT 20
46409: PUSH
46410: LD_INT 21
46412: PUSH
46413: LD_INT 22
46415: PUSH
46416: LD_INT 25
46418: PUSH
46419: LD_INT 32
46421: PUSH
46422: LD_INT 27
46424: PUSH
46425: LD_INT 36
46427: PUSH
46428: LD_INT 69
46430: PUSH
46431: LD_INT 39
46433: PUSH
46434: LD_INT 34
46436: PUSH
46437: LD_INT 40
46439: PUSH
46440: LD_INT 48
46442: PUSH
46443: LD_INT 49
46445: PUSH
46446: LD_INT 50
46448: PUSH
46449: LD_INT 51
46451: PUSH
46452: LD_INT 52
46454: PUSH
46455: LD_INT 53
46457: PUSH
46458: LD_INT 54
46460: PUSH
46461: LD_INT 55
46463: PUSH
46464: LD_INT 56
46466: PUSH
46467: LD_INT 57
46469: PUSH
46470: LD_INT 58
46472: PUSH
46473: LD_INT 59
46475: PUSH
46476: LD_INT 60
46478: PUSH
46479: LD_INT 61
46481: PUSH
46482: LD_INT 62
46484: PUSH
46485: LD_INT 80
46487: PUSH
46488: LD_INT 82
46490: PUSH
46491: LD_INT 83
46493: PUSH
46494: LD_INT 84
46496: PUSH
46497: LD_INT 85
46499: PUSH
46500: LD_INT 86
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: ST_TO_ADDR
46556: GO 47023
46558: LD_INT 2
46560: DOUBLE
46561: EQUAL
46562: IFTRUE 46566
46564: GO 46792
46566: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
46567: LD_ADDR_VAR 0 4
46571: PUSH
46572: LD_INT 35
46574: PUSH
46575: LD_INT 45
46577: PUSH
46578: LD_INT 46
46580: PUSH
46581: LD_INT 47
46583: PUSH
46584: LD_INT 82
46586: PUSH
46587: LD_INT 83
46589: PUSH
46590: LD_INT 84
46592: PUSH
46593: LD_INT 85
46595: PUSH
46596: LD_INT 87
46598: PUSH
46599: LD_INT 70
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 11
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: LD_INT 4
46613: PUSH
46614: LD_INT 5
46616: PUSH
46617: LD_INT 6
46619: PUSH
46620: LD_INT 15
46622: PUSH
46623: LD_INT 18
46625: PUSH
46626: LD_INT 7
46628: PUSH
46629: LD_INT 17
46631: PUSH
46632: LD_INT 8
46634: PUSH
46635: LD_INT 20
46637: PUSH
46638: LD_INT 21
46640: PUSH
46641: LD_INT 22
46643: PUSH
46644: LD_INT 72
46646: PUSH
46647: LD_INT 26
46649: PUSH
46650: LD_INT 69
46652: PUSH
46653: LD_INT 39
46655: PUSH
46656: LD_INT 40
46658: PUSH
46659: LD_INT 41
46661: PUSH
46662: LD_INT 42
46664: PUSH
46665: LD_INT 43
46667: PUSH
46668: LD_INT 48
46670: PUSH
46671: LD_INT 49
46673: PUSH
46674: LD_INT 50
46676: PUSH
46677: LD_INT 51
46679: PUSH
46680: LD_INT 52
46682: PUSH
46683: LD_INT 53
46685: PUSH
46686: LD_INT 54
46688: PUSH
46689: LD_INT 55
46691: PUSH
46692: LD_INT 56
46694: PUSH
46695: LD_INT 60
46697: PUSH
46698: LD_INT 61
46700: PUSH
46701: LD_INT 62
46703: PUSH
46704: LD_INT 66
46706: PUSH
46707: LD_INT 67
46709: PUSH
46710: LD_INT 68
46712: PUSH
46713: LD_INT 81
46715: PUSH
46716: LD_INT 82
46718: PUSH
46719: LD_INT 83
46721: PUSH
46722: LD_INT 84
46724: PUSH
46725: LD_INT 85
46727: PUSH
46728: LD_INT 87
46730: PUSH
46731: LD_INT 88
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: ST_TO_ADDR
46790: GO 47023
46792: LD_INT 3
46794: DOUBLE
46795: EQUAL
46796: IFTRUE 46800
46798: GO 47022
46800: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
46801: LD_ADDR_VAR 0 4
46805: PUSH
46806: LD_INT 46
46808: PUSH
46809: LD_INT 47
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 82
46820: PUSH
46821: LD_INT 83
46823: PUSH
46824: LD_INT 84
46826: PUSH
46827: LD_INT 85
46829: PUSH
46830: LD_INT 86
46832: PUSH
46833: LD_INT 11
46835: PUSH
46836: LD_INT 9
46838: PUSH
46839: LD_INT 20
46841: PUSH
46842: LD_INT 19
46844: PUSH
46845: LD_INT 21
46847: PUSH
46848: LD_INT 24
46850: PUSH
46851: LD_INT 22
46853: PUSH
46854: LD_INT 25
46856: PUSH
46857: LD_INT 28
46859: PUSH
46860: LD_INT 29
46862: PUSH
46863: LD_INT 30
46865: PUSH
46866: LD_INT 31
46868: PUSH
46869: LD_INT 37
46871: PUSH
46872: LD_INT 38
46874: PUSH
46875: LD_INT 32
46877: PUSH
46878: LD_INT 27
46880: PUSH
46881: LD_INT 33
46883: PUSH
46884: LD_INT 69
46886: PUSH
46887: LD_INT 39
46889: PUSH
46890: LD_INT 34
46892: PUSH
46893: LD_INT 40
46895: PUSH
46896: LD_INT 71
46898: PUSH
46899: LD_INT 23
46901: PUSH
46902: LD_INT 44
46904: PUSH
46905: LD_INT 48
46907: PUSH
46908: LD_INT 49
46910: PUSH
46911: LD_INT 50
46913: PUSH
46914: LD_INT 51
46916: PUSH
46917: LD_INT 52
46919: PUSH
46920: LD_INT 53
46922: PUSH
46923: LD_INT 54
46925: PUSH
46926: LD_INT 55
46928: PUSH
46929: LD_INT 56
46931: PUSH
46932: LD_INT 57
46934: PUSH
46935: LD_INT 58
46937: PUSH
46938: LD_INT 59
46940: PUSH
46941: LD_INT 63
46943: PUSH
46944: LD_INT 64
46946: PUSH
46947: LD_INT 65
46949: PUSH
46950: LD_INT 82
46952: PUSH
46953: LD_INT 83
46955: PUSH
46956: LD_INT 84
46958: PUSH
46959: LD_INT 85
46961: PUSH
46962: LD_INT 86
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: ST_TO_ADDR
47020: GO 47023
47022: POP
// if state > - 1 and state < 3 then
47023: LD_VAR 0 3
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: GREATER
47032: PUSH
47033: LD_VAR 0 3
47037: PUSH
47038: LD_INT 3
47040: LESS
47041: AND
47042: IFFALSE 47099
// for i in result do
47044: LD_ADDR_VAR 0 5
47048: PUSH
47049: LD_VAR 0 4
47053: PUSH
47054: FOR_IN
47055: IFFALSE 47097
// if GetTech ( i , side ) <> state then
47057: LD_VAR 0 5
47061: PPUSH
47062: LD_VAR 0 1
47066: PPUSH
47067: CALL_OW 321
47071: PUSH
47072: LD_VAR 0 3
47076: NONEQUAL
47077: IFFALSE 47095
// result := result diff i ;
47079: LD_ADDR_VAR 0 4
47083: PUSH
47084: LD_VAR 0 4
47088: PUSH
47089: LD_VAR 0 5
47093: DIFF
47094: ST_TO_ADDR
47095: GO 47054
47097: POP
47098: POP
// end ;
47099: LD_VAR 0 4
47103: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
47104: LD_INT 0
47106: PPUSH
47107: PPUSH
47108: PPUSH
// result := true ;
47109: LD_ADDR_VAR 0 3
47113: PUSH
47114: LD_INT 1
47116: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
47117: LD_ADDR_VAR 0 5
47121: PUSH
47122: LD_VAR 0 2
47126: PPUSH
47127: CALL_OW 480
47131: ST_TO_ADDR
// if not tmp then
47132: LD_VAR 0 5
47136: NOT
47137: IFFALSE 47141
// exit ;
47139: GO 47190
// for i in tmp do
47141: LD_ADDR_VAR 0 4
47145: PUSH
47146: LD_VAR 0 5
47150: PUSH
47151: FOR_IN
47152: IFFALSE 47188
// if GetTech ( i , side ) <> state_researched then
47154: LD_VAR 0 4
47158: PPUSH
47159: LD_VAR 0 1
47163: PPUSH
47164: CALL_OW 321
47168: PUSH
47169: LD_INT 2
47171: NONEQUAL
47172: IFFALSE 47186
// begin result := false ;
47174: LD_ADDR_VAR 0 3
47178: PUSH
47179: LD_INT 0
47181: ST_TO_ADDR
// exit ;
47182: POP
47183: POP
47184: GO 47190
// end ;
47186: GO 47151
47188: POP
47189: POP
// end ;
47190: LD_VAR 0 3
47194: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
47195: LD_INT 0
47197: PPUSH
47198: PPUSH
47199: PPUSH
47200: PPUSH
47201: PPUSH
47202: PPUSH
47203: PPUSH
47204: PPUSH
47205: PPUSH
47206: PPUSH
47207: PPUSH
47208: PPUSH
47209: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
47210: LD_VAR 0 1
47214: NOT
47215: PUSH
47216: LD_VAR 0 1
47220: PPUSH
47221: CALL_OW 257
47225: PUSH
47226: LD_INT 9
47228: NONEQUAL
47229: OR
47230: IFFALSE 47234
// exit ;
47232: GO 47807
// side := GetSide ( unit ) ;
47234: LD_ADDR_VAR 0 9
47238: PUSH
47239: LD_VAR 0 1
47243: PPUSH
47244: CALL_OW 255
47248: ST_TO_ADDR
// tech_space := tech_spacanom ;
47249: LD_ADDR_VAR 0 12
47253: PUSH
47254: LD_INT 29
47256: ST_TO_ADDR
// tech_time := tech_taurad ;
47257: LD_ADDR_VAR 0 13
47261: PUSH
47262: LD_INT 28
47264: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
47265: LD_ADDR_VAR 0 11
47269: PUSH
47270: LD_VAR 0 1
47274: PPUSH
47275: CALL_OW 310
47279: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
47280: LD_VAR 0 11
47284: PPUSH
47285: CALL_OW 247
47289: PUSH
47290: LD_INT 2
47292: EQUAL
47293: IFFALSE 47297
// exit ;
47295: GO 47807
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47297: LD_ADDR_VAR 0 8
47301: PUSH
47302: LD_INT 81
47304: PUSH
47305: LD_VAR 0 9
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: LD_INT 21
47319: PUSH
47320: LD_INT 3
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PPUSH
47335: CALL_OW 69
47339: ST_TO_ADDR
// if not tmp then
47340: LD_VAR 0 8
47344: NOT
47345: IFFALSE 47349
// exit ;
47347: GO 47807
// if in_unit then
47349: LD_VAR 0 11
47353: IFFALSE 47377
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
47355: LD_ADDR_VAR 0 10
47359: PUSH
47360: LD_VAR 0 8
47364: PPUSH
47365: LD_VAR 0 11
47369: PPUSH
47370: CALL_OW 74
47374: ST_TO_ADDR
47375: GO 47397
// enemy := NearestUnitToUnit ( tmp , unit ) ;
47377: LD_ADDR_VAR 0 10
47381: PUSH
47382: LD_VAR 0 8
47386: PPUSH
47387: LD_VAR 0 1
47391: PPUSH
47392: CALL_OW 74
47396: ST_TO_ADDR
// if not enemy then
47397: LD_VAR 0 10
47401: NOT
47402: IFFALSE 47406
// exit ;
47404: GO 47807
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
47406: LD_VAR 0 11
47410: PUSH
47411: LD_VAR 0 11
47415: PPUSH
47416: LD_VAR 0 10
47420: PPUSH
47421: CALL_OW 296
47425: PUSH
47426: LD_INT 13
47428: GREATER
47429: AND
47430: PUSH
47431: LD_VAR 0 1
47435: PPUSH
47436: LD_VAR 0 10
47440: PPUSH
47441: CALL_OW 296
47445: PUSH
47446: LD_INT 12
47448: GREATER
47449: OR
47450: IFFALSE 47454
// exit ;
47452: GO 47807
// missile := [ 1 ] ;
47454: LD_ADDR_VAR 0 14
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: EMPTY
47463: LIST
47464: ST_TO_ADDR
// if Researched ( side , tech_space ) then
47465: LD_VAR 0 9
47469: PPUSH
47470: LD_VAR 0 12
47474: PPUSH
47475: CALL_OW 325
47479: IFFALSE 47508
// missile := Replace ( missile , missile + 1 , 2 ) ;
47481: LD_ADDR_VAR 0 14
47485: PUSH
47486: LD_VAR 0 14
47490: PPUSH
47491: LD_VAR 0 14
47495: PUSH
47496: LD_INT 1
47498: PLUS
47499: PPUSH
47500: LD_INT 2
47502: PPUSH
47503: CALL_OW 1
47507: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
47508: LD_VAR 0 9
47512: PPUSH
47513: LD_VAR 0 13
47517: PPUSH
47518: CALL_OW 325
47522: PUSH
47523: LD_VAR 0 10
47527: PPUSH
47528: CALL_OW 255
47532: PPUSH
47533: LD_VAR 0 13
47537: PPUSH
47538: CALL_OW 325
47542: NOT
47543: AND
47544: IFFALSE 47573
// missile := Replace ( missile , missile + 1 , 3 ) ;
47546: LD_ADDR_VAR 0 14
47550: PUSH
47551: LD_VAR 0 14
47555: PPUSH
47556: LD_VAR 0 14
47560: PUSH
47561: LD_INT 1
47563: PLUS
47564: PPUSH
47565: LD_INT 3
47567: PPUSH
47568: CALL_OW 1
47572: ST_TO_ADDR
// if missile < 2 then
47573: LD_VAR 0 14
47577: PUSH
47578: LD_INT 2
47580: LESS
47581: IFFALSE 47585
// exit ;
47583: GO 47807
// x := GetX ( enemy ) ;
47585: LD_ADDR_VAR 0 4
47589: PUSH
47590: LD_VAR 0 10
47594: PPUSH
47595: CALL_OW 250
47599: ST_TO_ADDR
// y := GetY ( enemy ) ;
47600: LD_ADDR_VAR 0 5
47604: PUSH
47605: LD_VAR 0 10
47609: PPUSH
47610: CALL_OW 251
47614: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
47615: LD_ADDR_VAR 0 6
47619: PUSH
47620: LD_VAR 0 4
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PPUSH
47629: LD_INT 1
47631: PPUSH
47632: CALL_OW 12
47636: PLUS
47637: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
47638: LD_ADDR_VAR 0 7
47642: PUSH
47643: LD_VAR 0 5
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PPUSH
47652: LD_INT 1
47654: PPUSH
47655: CALL_OW 12
47659: PLUS
47660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47661: LD_VAR 0 6
47665: PPUSH
47666: LD_VAR 0 7
47670: PPUSH
47671: CALL_OW 488
47675: NOT
47676: IFFALSE 47698
// begin _x := x ;
47678: LD_ADDR_VAR 0 6
47682: PUSH
47683: LD_VAR 0 4
47687: ST_TO_ADDR
// _y := y ;
47688: LD_ADDR_VAR 0 7
47692: PUSH
47693: LD_VAR 0 5
47697: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
47698: LD_ADDR_VAR 0 3
47702: PUSH
47703: LD_INT 1
47705: PPUSH
47706: LD_VAR 0 14
47710: PPUSH
47711: CALL_OW 12
47715: ST_TO_ADDR
// case i of 1 :
47716: LD_VAR 0 3
47720: PUSH
47721: LD_INT 1
47723: DOUBLE
47724: EQUAL
47725: IFTRUE 47729
47727: GO 47746
47729: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
47730: LD_VAR 0 1
47734: PPUSH
47735: LD_VAR 0 10
47739: PPUSH
47740: CALL_OW 115
47744: GO 47807
47746: LD_INT 2
47748: DOUBLE
47749: EQUAL
47750: IFTRUE 47754
47752: GO 47776
47754: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
47755: LD_VAR 0 1
47759: PPUSH
47760: LD_VAR 0 6
47764: PPUSH
47765: LD_VAR 0 7
47769: PPUSH
47770: CALL_OW 153
47774: GO 47807
47776: LD_INT 3
47778: DOUBLE
47779: EQUAL
47780: IFTRUE 47784
47782: GO 47806
47784: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
47785: LD_VAR 0 1
47789: PPUSH
47790: LD_VAR 0 6
47794: PPUSH
47795: LD_VAR 0 7
47799: PPUSH
47800: CALL_OW 154
47804: GO 47807
47806: POP
// end ;
47807: LD_VAR 0 2
47811: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
47812: LD_INT 0
47814: PPUSH
47815: PPUSH
47816: PPUSH
47817: PPUSH
47818: PPUSH
47819: PPUSH
// if not unit or not building then
47820: LD_VAR 0 1
47824: NOT
47825: PUSH
47826: LD_VAR 0 2
47830: NOT
47831: OR
47832: IFFALSE 47836
// exit ;
47834: GO 47994
// x := GetX ( building ) ;
47836: LD_ADDR_VAR 0 5
47840: PUSH
47841: LD_VAR 0 2
47845: PPUSH
47846: CALL_OW 250
47850: ST_TO_ADDR
// y := GetY ( building ) ;
47851: LD_ADDR_VAR 0 6
47855: PUSH
47856: LD_VAR 0 2
47860: PPUSH
47861: CALL_OW 251
47865: ST_TO_ADDR
// for i = 0 to 5 do
47866: LD_ADDR_VAR 0 4
47870: PUSH
47871: DOUBLE
47872: LD_INT 0
47874: DEC
47875: ST_TO_ADDR
47876: LD_INT 5
47878: PUSH
47879: FOR_TO
47880: IFFALSE 47992
// begin _x := ShiftX ( x , i , 3 ) ;
47882: LD_ADDR_VAR 0 7
47886: PUSH
47887: LD_VAR 0 5
47891: PPUSH
47892: LD_VAR 0 4
47896: PPUSH
47897: LD_INT 3
47899: PPUSH
47900: CALL_OW 272
47904: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
47905: LD_ADDR_VAR 0 8
47909: PUSH
47910: LD_VAR 0 6
47914: PPUSH
47915: LD_VAR 0 4
47919: PPUSH
47920: LD_INT 3
47922: PPUSH
47923: CALL_OW 273
47927: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47928: LD_VAR 0 7
47932: PPUSH
47933: LD_VAR 0 8
47937: PPUSH
47938: CALL_OW 488
47942: NOT
47943: IFFALSE 47947
// continue ;
47945: GO 47879
// if HexInfo ( _x , _y ) = 0 then
47947: LD_VAR 0 7
47951: PPUSH
47952: LD_VAR 0 8
47956: PPUSH
47957: CALL_OW 428
47961: PUSH
47962: LD_INT 0
47964: EQUAL
47965: IFFALSE 47990
// begin ComMoveXY ( unit , _x , _y ) ;
47967: LD_VAR 0 1
47971: PPUSH
47972: LD_VAR 0 7
47976: PPUSH
47977: LD_VAR 0 8
47981: PPUSH
47982: CALL_OW 111
// exit ;
47986: POP
47987: POP
47988: GO 47994
// end ; end ;
47990: GO 47879
47992: POP
47993: POP
// end ;
47994: LD_VAR 0 3
47998: RET
// export function ScanBase ( side , base_area ) ; begin
47999: LD_INT 0
48001: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
48002: LD_ADDR_VAR 0 3
48006: PUSH
48007: LD_VAR 0 2
48011: PPUSH
48012: LD_INT 81
48014: PUSH
48015: LD_VAR 0 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PPUSH
48024: CALL_OW 70
48028: ST_TO_ADDR
// end ;
48029: LD_VAR 0 3
48033: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
48034: LD_INT 0
48036: PPUSH
48037: PPUSH
48038: PPUSH
48039: PPUSH
// result := false ;
48040: LD_ADDR_VAR 0 2
48044: PUSH
48045: LD_INT 0
48047: ST_TO_ADDR
// side := GetSide ( unit ) ;
48048: LD_ADDR_VAR 0 3
48052: PUSH
48053: LD_VAR 0 1
48057: PPUSH
48058: CALL_OW 255
48062: ST_TO_ADDR
// nat := GetNation ( unit ) ;
48063: LD_ADDR_VAR 0 4
48067: PUSH
48068: LD_VAR 0 1
48072: PPUSH
48073: CALL_OW 248
48077: ST_TO_ADDR
// case nat of 1 :
48078: LD_VAR 0 4
48082: PUSH
48083: LD_INT 1
48085: DOUBLE
48086: EQUAL
48087: IFTRUE 48091
48089: GO 48102
48091: POP
// tech := tech_lassight ; 2 :
48092: LD_ADDR_VAR 0 5
48096: PUSH
48097: LD_INT 12
48099: ST_TO_ADDR
48100: GO 48141
48102: LD_INT 2
48104: DOUBLE
48105: EQUAL
48106: IFTRUE 48110
48108: GO 48121
48110: POP
// tech := tech_mortar ; 3 :
48111: LD_ADDR_VAR 0 5
48115: PUSH
48116: LD_INT 41
48118: ST_TO_ADDR
48119: GO 48141
48121: LD_INT 3
48123: DOUBLE
48124: EQUAL
48125: IFTRUE 48129
48127: GO 48140
48129: POP
// tech := tech_bazooka ; end ;
48130: LD_ADDR_VAR 0 5
48134: PUSH
48135: LD_INT 44
48137: ST_TO_ADDR
48138: GO 48141
48140: POP
// if Researched ( side , tech ) then
48141: LD_VAR 0 3
48145: PPUSH
48146: LD_VAR 0 5
48150: PPUSH
48151: CALL_OW 325
48155: IFFALSE 48182
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
48157: LD_ADDR_VAR 0 2
48161: PUSH
48162: LD_INT 5
48164: PUSH
48165: LD_INT 8
48167: PUSH
48168: LD_INT 9
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: LIST
48175: PUSH
48176: LD_VAR 0 4
48180: ARRAY
48181: ST_TO_ADDR
// end ;
48182: LD_VAR 0 2
48186: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
48187: LD_INT 0
48189: PPUSH
48190: PPUSH
48191: PPUSH
// if not mines then
48192: LD_VAR 0 2
48196: NOT
48197: IFFALSE 48201
// exit ;
48199: GO 48345
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48201: LD_ADDR_VAR 0 5
48205: PUSH
48206: LD_INT 81
48208: PUSH
48209: LD_VAR 0 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 3
48220: PUSH
48221: LD_INT 21
48223: PUSH
48224: LD_INT 3
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PPUSH
48239: CALL_OW 69
48243: ST_TO_ADDR
// for i in mines do
48244: LD_ADDR_VAR 0 4
48248: PUSH
48249: LD_VAR 0 2
48253: PUSH
48254: FOR_IN
48255: IFFALSE 48343
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
48257: LD_VAR 0 4
48261: PUSH
48262: LD_INT 1
48264: ARRAY
48265: PPUSH
48266: LD_VAR 0 4
48270: PUSH
48271: LD_INT 2
48273: ARRAY
48274: PPUSH
48275: CALL_OW 458
48279: NOT
48280: IFFALSE 48284
// continue ;
48282: GO 48254
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
48284: LD_VAR 0 4
48288: PUSH
48289: LD_INT 1
48291: ARRAY
48292: PPUSH
48293: LD_VAR 0 4
48297: PUSH
48298: LD_INT 2
48300: ARRAY
48301: PPUSH
48302: CALL_OW 428
48306: PUSH
48307: LD_VAR 0 5
48311: IN
48312: IFFALSE 48341
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
48314: LD_VAR 0 4
48318: PUSH
48319: LD_INT 1
48321: ARRAY
48322: PPUSH
48323: LD_VAR 0 4
48327: PUSH
48328: LD_INT 2
48330: ARRAY
48331: PPUSH
48332: LD_VAR 0 1
48336: PPUSH
48337: CALL_OW 456
// end ;
48341: GO 48254
48343: POP
48344: POP
// end ;
48345: LD_VAR 0 3
48349: RET
// export function Count ( array ) ; var i ; begin
48350: LD_INT 0
48352: PPUSH
48353: PPUSH
// result := 0 ;
48354: LD_ADDR_VAR 0 2
48358: PUSH
48359: LD_INT 0
48361: ST_TO_ADDR
// for i in array do
48362: LD_ADDR_VAR 0 3
48366: PUSH
48367: LD_VAR 0 1
48371: PUSH
48372: FOR_IN
48373: IFFALSE 48397
// if i then
48375: LD_VAR 0 3
48379: IFFALSE 48395
// result := result + 1 ;
48381: LD_ADDR_VAR 0 2
48385: PUSH
48386: LD_VAR 0 2
48390: PUSH
48391: LD_INT 1
48393: PLUS
48394: ST_TO_ADDR
48395: GO 48372
48397: POP
48398: POP
// end ;
48399: LD_VAR 0 2
48403: RET
// export function IsEmpty ( building ) ; begin
48404: LD_INT 0
48406: PPUSH
// if not building then
48407: LD_VAR 0 1
48411: NOT
48412: IFFALSE 48416
// exit ;
48414: GO 48459
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
48416: LD_ADDR_VAR 0 2
48420: PUSH
48421: LD_VAR 0 1
48425: PUSH
48426: LD_INT 22
48428: PUSH
48429: LD_VAR 0 1
48433: PPUSH
48434: CALL_OW 255
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 58
48445: PUSH
48446: EMPTY
48447: LIST
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PPUSH
48453: CALL_OW 69
48457: IN
48458: ST_TO_ADDR
// end ;
48459: LD_VAR 0 2
48463: RET
// export function IsNotFull ( building ) ; begin
48464: LD_INT 0
48466: PPUSH
// if not building then
48467: LD_VAR 0 1
48471: NOT
48472: IFFALSE 48476
// exit ;
48474: GO 48495
// result := UnitsInside ( building ) < 6 ;
48476: LD_ADDR_VAR 0 2
48480: PUSH
48481: LD_VAR 0 1
48485: PPUSH
48486: CALL_OW 313
48490: PUSH
48491: LD_INT 6
48493: LESS
48494: ST_TO_ADDR
// end ;
48495: LD_VAR 0 2
48499: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
48500: LD_INT 0
48502: PPUSH
48503: PPUSH
48504: PPUSH
48505: PPUSH
// tmp := [ ] ;
48506: LD_ADDR_VAR 0 3
48510: PUSH
48511: EMPTY
48512: ST_TO_ADDR
// list := [ ] ;
48513: LD_ADDR_VAR 0 5
48517: PUSH
48518: EMPTY
48519: ST_TO_ADDR
// for i = 16 to 25 do
48520: LD_ADDR_VAR 0 4
48524: PUSH
48525: DOUBLE
48526: LD_INT 16
48528: DEC
48529: ST_TO_ADDR
48530: LD_INT 25
48532: PUSH
48533: FOR_TO
48534: IFFALSE 48607
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
48536: LD_ADDR_VAR 0 3
48540: PUSH
48541: LD_VAR 0 3
48545: PUSH
48546: LD_INT 22
48548: PUSH
48549: LD_VAR 0 1
48553: PPUSH
48554: CALL_OW 255
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 91
48565: PUSH
48566: LD_VAR 0 1
48570: PUSH
48571: LD_INT 6
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 30
48581: PUSH
48582: LD_VAR 0 4
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: LIST
48595: PUSH
48596: EMPTY
48597: LIST
48598: PPUSH
48599: CALL_OW 69
48603: ADD
48604: ST_TO_ADDR
48605: GO 48533
48607: POP
48608: POP
// for i = 1 to tmp do
48609: LD_ADDR_VAR 0 4
48613: PUSH
48614: DOUBLE
48615: LD_INT 1
48617: DEC
48618: ST_TO_ADDR
48619: LD_VAR 0 3
48623: PUSH
48624: FOR_TO
48625: IFFALSE 48713
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
48627: LD_ADDR_VAR 0 5
48631: PUSH
48632: LD_VAR 0 5
48636: PUSH
48637: LD_VAR 0 3
48641: PUSH
48642: LD_VAR 0 4
48646: ARRAY
48647: PPUSH
48648: CALL_OW 266
48652: PUSH
48653: LD_VAR 0 3
48657: PUSH
48658: LD_VAR 0 4
48662: ARRAY
48663: PPUSH
48664: CALL_OW 250
48668: PUSH
48669: LD_VAR 0 3
48673: PUSH
48674: LD_VAR 0 4
48678: ARRAY
48679: PPUSH
48680: CALL_OW 251
48684: PUSH
48685: LD_VAR 0 3
48689: PUSH
48690: LD_VAR 0 4
48694: ARRAY
48695: PPUSH
48696: CALL_OW 254
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: PUSH
48707: EMPTY
48708: LIST
48709: ADD
48710: ST_TO_ADDR
48711: GO 48624
48713: POP
48714: POP
// result := list ;
48715: LD_ADDR_VAR 0 2
48719: PUSH
48720: LD_VAR 0 5
48724: ST_TO_ADDR
// end ;
48725: LD_VAR 0 2
48729: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
48730: LD_INT 0
48732: PPUSH
48733: PPUSH
48734: PPUSH
48735: PPUSH
48736: PPUSH
48737: PPUSH
48738: PPUSH
// if not factory then
48739: LD_VAR 0 1
48743: NOT
48744: IFFALSE 48748
// exit ;
48746: GO 49341
// if control = control_apeman then
48748: LD_VAR 0 4
48752: PUSH
48753: LD_INT 5
48755: EQUAL
48756: IFFALSE 48865
// begin tmp := UnitsInside ( factory ) ;
48758: LD_ADDR_VAR 0 8
48762: PUSH
48763: LD_VAR 0 1
48767: PPUSH
48768: CALL_OW 313
48772: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
48773: LD_VAR 0 8
48777: PPUSH
48778: LD_INT 25
48780: PUSH
48781: LD_INT 12
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PPUSH
48788: CALL_OW 72
48792: NOT
48793: IFFALSE 48803
// control := control_manual ;
48795: LD_ADDR_VAR 0 4
48799: PUSH
48800: LD_INT 1
48802: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
48803: LD_ADDR_VAR 0 8
48807: PUSH
48808: LD_VAR 0 1
48812: PPUSH
48813: CALL 48500 0 1
48817: ST_TO_ADDR
// if tmp then
48818: LD_VAR 0 8
48822: IFFALSE 48865
// begin for i in tmp do
48824: LD_ADDR_VAR 0 7
48828: PUSH
48829: LD_VAR 0 8
48833: PUSH
48834: FOR_IN
48835: IFFALSE 48863
// if i [ 1 ] = b_ext_radio then
48837: LD_VAR 0 7
48841: PUSH
48842: LD_INT 1
48844: ARRAY
48845: PUSH
48846: LD_INT 22
48848: EQUAL
48849: IFFALSE 48861
// begin control := control_remote ;
48851: LD_ADDR_VAR 0 4
48855: PUSH
48856: LD_INT 2
48858: ST_TO_ADDR
// break ;
48859: GO 48863
// end ;
48861: GO 48834
48863: POP
48864: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
48865: LD_VAR 0 1
48869: PPUSH
48870: LD_VAR 0 2
48874: PPUSH
48875: LD_VAR 0 3
48879: PPUSH
48880: LD_VAR 0 4
48884: PPUSH
48885: LD_VAR 0 5
48889: PPUSH
48890: CALL_OW 448
48894: IFFALSE 48929
// begin result := [ chassis , engine , control , weapon ] ;
48896: LD_ADDR_VAR 0 6
48900: PUSH
48901: LD_VAR 0 2
48905: PUSH
48906: LD_VAR 0 3
48910: PUSH
48911: LD_VAR 0 4
48915: PUSH
48916: LD_VAR 0 5
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: ST_TO_ADDR
// exit ;
48927: GO 49341
// end ; _chassis := AvailableChassisList ( factory ) ;
48929: LD_ADDR_VAR 0 9
48933: PUSH
48934: LD_VAR 0 1
48938: PPUSH
48939: CALL_OW 475
48943: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
48944: LD_ADDR_VAR 0 11
48948: PUSH
48949: LD_VAR 0 1
48953: PPUSH
48954: CALL_OW 476
48958: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
48959: LD_ADDR_VAR 0 12
48963: PUSH
48964: LD_VAR 0 1
48968: PPUSH
48969: CALL_OW 477
48973: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
48974: LD_ADDR_VAR 0 10
48978: PUSH
48979: LD_VAR 0 1
48983: PPUSH
48984: CALL_OW 478
48988: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
48989: LD_VAR 0 9
48993: NOT
48994: PUSH
48995: LD_VAR 0 11
48999: NOT
49000: OR
49001: PUSH
49002: LD_VAR 0 12
49006: NOT
49007: OR
49008: PUSH
49009: LD_VAR 0 10
49013: NOT
49014: OR
49015: IFFALSE 49050
// begin result := [ chassis , engine , control , weapon ] ;
49017: LD_ADDR_VAR 0 6
49021: PUSH
49022: LD_VAR 0 2
49026: PUSH
49027: LD_VAR 0 3
49031: PUSH
49032: LD_VAR 0 4
49036: PUSH
49037: LD_VAR 0 5
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: ST_TO_ADDR
// exit ;
49048: GO 49341
// end ; if not chassis in _chassis then
49050: LD_VAR 0 2
49054: PUSH
49055: LD_VAR 0 9
49059: IN
49060: NOT
49061: IFFALSE 49087
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
49063: LD_ADDR_VAR 0 2
49067: PUSH
49068: LD_VAR 0 9
49072: PUSH
49073: LD_INT 1
49075: PPUSH
49076: LD_VAR 0 9
49080: PPUSH
49081: CALL_OW 12
49085: ARRAY
49086: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
49087: LD_VAR 0 2
49091: PPUSH
49092: LD_VAR 0 3
49096: PPUSH
49097: CALL 49346 0 2
49101: NOT
49102: IFFALSE 49161
// repeat engine := _engine [ 1 ] ;
49104: LD_ADDR_VAR 0 3
49108: PUSH
49109: LD_VAR 0 11
49113: PUSH
49114: LD_INT 1
49116: ARRAY
49117: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
49118: LD_ADDR_VAR 0 11
49122: PUSH
49123: LD_VAR 0 11
49127: PPUSH
49128: LD_INT 1
49130: PPUSH
49131: CALL_OW 3
49135: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
49136: LD_VAR 0 2
49140: PPUSH
49141: LD_VAR 0 3
49145: PPUSH
49146: CALL 49346 0 2
49150: PUSH
49151: LD_VAR 0 11
49155: PUSH
49156: EMPTY
49157: EQUAL
49158: OR
49159: IFFALSE 49104
// if not control in _control then
49161: LD_VAR 0 4
49165: PUSH
49166: LD_VAR 0 12
49170: IN
49171: NOT
49172: IFFALSE 49198
// control := _control [ rand ( 1 , _control ) ] ;
49174: LD_ADDR_VAR 0 4
49178: PUSH
49179: LD_VAR 0 12
49183: PUSH
49184: LD_INT 1
49186: PPUSH
49187: LD_VAR 0 12
49191: PPUSH
49192: CALL_OW 12
49196: ARRAY
49197: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
49198: LD_VAR 0 2
49202: PPUSH
49203: LD_VAR 0 5
49207: PPUSH
49208: CALL 49566 0 2
49212: NOT
49213: IFFALSE 49272
// repeat weapon := _weapon [ 1 ] ;
49215: LD_ADDR_VAR 0 5
49219: PUSH
49220: LD_VAR 0 10
49224: PUSH
49225: LD_INT 1
49227: ARRAY
49228: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
49229: LD_ADDR_VAR 0 10
49233: PUSH
49234: LD_VAR 0 10
49238: PPUSH
49239: LD_INT 1
49241: PPUSH
49242: CALL_OW 3
49246: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
49247: LD_VAR 0 2
49251: PPUSH
49252: LD_VAR 0 5
49256: PPUSH
49257: CALL 49566 0 2
49261: PUSH
49262: LD_VAR 0 10
49266: PUSH
49267: EMPTY
49268: EQUAL
49269: OR
49270: IFFALSE 49215
// result := [ ] ;
49272: LD_ADDR_VAR 0 6
49276: PUSH
49277: EMPTY
49278: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49279: LD_VAR 0 1
49283: PPUSH
49284: LD_VAR 0 2
49288: PPUSH
49289: LD_VAR 0 3
49293: PPUSH
49294: LD_VAR 0 4
49298: PPUSH
49299: LD_VAR 0 5
49303: PPUSH
49304: CALL_OW 448
49308: IFFALSE 49341
// result := [ chassis , engine , control , weapon ] ;
49310: LD_ADDR_VAR 0 6
49314: PUSH
49315: LD_VAR 0 2
49319: PUSH
49320: LD_VAR 0 3
49324: PUSH
49325: LD_VAR 0 4
49329: PUSH
49330: LD_VAR 0 5
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: ST_TO_ADDR
// end ;
49341: LD_VAR 0 6
49345: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
49346: LD_INT 0
49348: PPUSH
// if not chassis or not engine then
49349: LD_VAR 0 1
49353: NOT
49354: PUSH
49355: LD_VAR 0 2
49359: NOT
49360: OR
49361: IFFALSE 49365
// exit ;
49363: GO 49561
// case engine of engine_solar :
49365: LD_VAR 0 2
49369: PUSH
49370: LD_INT 2
49372: DOUBLE
49373: EQUAL
49374: IFTRUE 49378
49376: GO 49416
49378: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
49379: LD_ADDR_VAR 0 3
49383: PUSH
49384: LD_INT 11
49386: PUSH
49387: LD_INT 12
49389: PUSH
49390: LD_INT 13
49392: PUSH
49393: LD_INT 14
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: LD_INT 3
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: ST_TO_ADDR
49414: GO 49545
49416: LD_INT 1
49418: DOUBLE
49419: EQUAL
49420: IFTRUE 49424
49422: GO 49486
49424: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
49425: LD_ADDR_VAR 0 3
49429: PUSH
49430: LD_INT 11
49432: PUSH
49433: LD_INT 12
49435: PUSH
49436: LD_INT 13
49438: PUSH
49439: LD_INT 14
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 3
49450: PUSH
49451: LD_INT 4
49453: PUSH
49454: LD_INT 5
49456: PUSH
49457: LD_INT 21
49459: PUSH
49460: LD_INT 23
49462: PUSH
49463: LD_INT 22
49465: PUSH
49466: LD_INT 24
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: ST_TO_ADDR
49484: GO 49545
49486: LD_INT 3
49488: DOUBLE
49489: EQUAL
49490: IFTRUE 49494
49492: GO 49544
49494: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49495: LD_ADDR_VAR 0 3
49499: PUSH
49500: LD_INT 13
49502: PUSH
49503: LD_INT 14
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: LD_INT 3
49511: PUSH
49512: LD_INT 4
49514: PUSH
49515: LD_INT 5
49517: PUSH
49518: LD_INT 21
49520: PUSH
49521: LD_INT 22
49523: PUSH
49524: LD_INT 23
49526: PUSH
49527: LD_INT 24
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: ST_TO_ADDR
49542: GO 49545
49544: POP
// result := ( chassis in result ) ;
49545: LD_ADDR_VAR 0 3
49549: PUSH
49550: LD_VAR 0 1
49554: PUSH
49555: LD_VAR 0 3
49559: IN
49560: ST_TO_ADDR
// end ;
49561: LD_VAR 0 3
49565: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
49566: LD_INT 0
49568: PPUSH
// if not chassis or not weapon then
49569: LD_VAR 0 1
49573: NOT
49574: PUSH
49575: LD_VAR 0 2
49579: NOT
49580: OR
49581: IFFALSE 49585
// exit ;
49583: GO 50647
// case weapon of us_machine_gun :
49585: LD_VAR 0 2
49589: PUSH
49590: LD_INT 2
49592: DOUBLE
49593: EQUAL
49594: IFTRUE 49598
49596: GO 49628
49598: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
49599: LD_ADDR_VAR 0 3
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: LD_INT 3
49612: PUSH
49613: LD_INT 4
49615: PUSH
49616: LD_INT 5
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: ST_TO_ADDR
49626: GO 50631
49628: LD_INT 3
49630: DOUBLE
49631: EQUAL
49632: IFTRUE 49636
49634: GO 49666
49636: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
49637: LD_ADDR_VAR 0 3
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: LD_INT 3
49650: PUSH
49651: LD_INT 4
49653: PUSH
49654: LD_INT 5
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: ST_TO_ADDR
49664: GO 50631
49666: LD_INT 11
49668: DOUBLE
49669: EQUAL
49670: IFTRUE 49674
49672: GO 49704
49674: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
49675: LD_ADDR_VAR 0 3
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: LD_INT 3
49688: PUSH
49689: LD_INT 4
49691: PUSH
49692: LD_INT 5
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: ST_TO_ADDR
49702: GO 50631
49704: LD_INT 4
49706: DOUBLE
49707: EQUAL
49708: IFTRUE 49712
49710: GO 49738
49712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
49713: LD_ADDR_VAR 0 3
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: LD_INT 3
49723: PUSH
49724: LD_INT 4
49726: PUSH
49727: LD_INT 5
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: ST_TO_ADDR
49736: GO 50631
49738: LD_INT 5
49740: DOUBLE
49741: EQUAL
49742: IFTRUE 49746
49744: GO 49772
49746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
49747: LD_ADDR_VAR 0 3
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 3
49757: PUSH
49758: LD_INT 4
49760: PUSH
49761: LD_INT 5
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: ST_TO_ADDR
49770: GO 50631
49772: LD_INT 9
49774: DOUBLE
49775: EQUAL
49776: IFTRUE 49780
49778: GO 49806
49780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
49781: LD_ADDR_VAR 0 3
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: LD_INT 4
49794: PUSH
49795: LD_INT 5
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: ST_TO_ADDR
49804: GO 50631
49806: LD_INT 7
49808: DOUBLE
49809: EQUAL
49810: IFTRUE 49814
49812: GO 49840
49814: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
49815: LD_ADDR_VAR 0 3
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: LD_INT 3
49825: PUSH
49826: LD_INT 4
49828: PUSH
49829: LD_INT 5
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: ST_TO_ADDR
49838: GO 50631
49840: LD_INT 12
49842: DOUBLE
49843: EQUAL
49844: IFTRUE 49848
49846: GO 49874
49848: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
49849: LD_ADDR_VAR 0 3
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: LD_INT 3
49859: PUSH
49860: LD_INT 4
49862: PUSH
49863: LD_INT 5
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: ST_TO_ADDR
49872: GO 50631
49874: LD_INT 13
49876: DOUBLE
49877: EQUAL
49878: IFTRUE 49882
49880: GO 49908
49882: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
49883: LD_ADDR_VAR 0 3
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: LD_INT 3
49893: PUSH
49894: LD_INT 4
49896: PUSH
49897: LD_INT 5
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: ST_TO_ADDR
49906: GO 50631
49908: LD_INT 14
49910: DOUBLE
49911: EQUAL
49912: IFTRUE 49916
49914: GO 49934
49916: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
49917: LD_ADDR_VAR 0 3
49921: PUSH
49922: LD_INT 4
49924: PUSH
49925: LD_INT 5
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: ST_TO_ADDR
49932: GO 50631
49934: LD_INT 6
49936: DOUBLE
49937: EQUAL
49938: IFTRUE 49942
49940: GO 49960
49942: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
49943: LD_ADDR_VAR 0 3
49947: PUSH
49948: LD_INT 4
49950: PUSH
49951: LD_INT 5
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: ST_TO_ADDR
49958: GO 50631
49960: LD_INT 10
49962: DOUBLE
49963: EQUAL
49964: IFTRUE 49968
49966: GO 49986
49968: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
49969: LD_ADDR_VAR 0 3
49973: PUSH
49974: LD_INT 4
49976: PUSH
49977: LD_INT 5
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: ST_TO_ADDR
49984: GO 50631
49986: LD_INT 22
49988: DOUBLE
49989: EQUAL
49990: IFTRUE 49994
49992: GO 50020
49994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
49995: LD_ADDR_VAR 0 3
49999: PUSH
50000: LD_INT 11
50002: PUSH
50003: LD_INT 12
50005: PUSH
50006: LD_INT 13
50008: PUSH
50009: LD_INT 14
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: ST_TO_ADDR
50018: GO 50631
50020: LD_INT 23
50022: DOUBLE
50023: EQUAL
50024: IFTRUE 50028
50026: GO 50054
50028: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
50029: LD_ADDR_VAR 0 3
50033: PUSH
50034: LD_INT 11
50036: PUSH
50037: LD_INT 12
50039: PUSH
50040: LD_INT 13
50042: PUSH
50043: LD_INT 14
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: ST_TO_ADDR
50052: GO 50631
50054: LD_INT 24
50056: DOUBLE
50057: EQUAL
50058: IFTRUE 50062
50060: GO 50088
50062: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
50063: LD_ADDR_VAR 0 3
50067: PUSH
50068: LD_INT 11
50070: PUSH
50071: LD_INT 12
50073: PUSH
50074: LD_INT 13
50076: PUSH
50077: LD_INT 14
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: ST_TO_ADDR
50086: GO 50631
50088: LD_INT 30
50090: DOUBLE
50091: EQUAL
50092: IFTRUE 50096
50094: GO 50122
50096: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
50097: LD_ADDR_VAR 0 3
50101: PUSH
50102: LD_INT 11
50104: PUSH
50105: LD_INT 12
50107: PUSH
50108: LD_INT 13
50110: PUSH
50111: LD_INT 14
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: ST_TO_ADDR
50120: GO 50631
50122: LD_INT 25
50124: DOUBLE
50125: EQUAL
50126: IFTRUE 50130
50128: GO 50148
50130: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
50131: LD_ADDR_VAR 0 3
50135: PUSH
50136: LD_INT 13
50138: PUSH
50139: LD_INT 14
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: ST_TO_ADDR
50146: GO 50631
50148: LD_INT 27
50150: DOUBLE
50151: EQUAL
50152: IFTRUE 50156
50154: GO 50174
50156: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
50157: LD_ADDR_VAR 0 3
50161: PUSH
50162: LD_INT 13
50164: PUSH
50165: LD_INT 14
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: ST_TO_ADDR
50172: GO 50631
50174: LD_EXP 53
50178: DOUBLE
50179: EQUAL
50180: IFTRUE 50184
50182: GO 50210
50184: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
50185: LD_ADDR_VAR 0 3
50189: PUSH
50190: LD_INT 11
50192: PUSH
50193: LD_INT 12
50195: PUSH
50196: LD_INT 13
50198: PUSH
50199: LD_INT 14
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: ST_TO_ADDR
50208: GO 50631
50210: LD_INT 28
50212: DOUBLE
50213: EQUAL
50214: IFTRUE 50218
50216: GO 50236
50218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
50219: LD_ADDR_VAR 0 3
50223: PUSH
50224: LD_INT 13
50226: PUSH
50227: LD_INT 14
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: ST_TO_ADDR
50234: GO 50631
50236: LD_INT 29
50238: DOUBLE
50239: EQUAL
50240: IFTRUE 50244
50242: GO 50262
50244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
50245: LD_ADDR_VAR 0 3
50249: PUSH
50250: LD_INT 13
50252: PUSH
50253: LD_INT 14
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: ST_TO_ADDR
50260: GO 50631
50262: LD_INT 31
50264: DOUBLE
50265: EQUAL
50266: IFTRUE 50270
50268: GO 50288
50270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
50271: LD_ADDR_VAR 0 3
50275: PUSH
50276: LD_INT 13
50278: PUSH
50279: LD_INT 14
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: ST_TO_ADDR
50286: GO 50631
50288: LD_INT 26
50290: DOUBLE
50291: EQUAL
50292: IFTRUE 50296
50294: GO 50314
50296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
50297: LD_ADDR_VAR 0 3
50301: PUSH
50302: LD_INT 13
50304: PUSH
50305: LD_INT 14
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: ST_TO_ADDR
50312: GO 50631
50314: LD_INT 42
50316: DOUBLE
50317: EQUAL
50318: IFTRUE 50322
50320: GO 50348
50322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
50323: LD_ADDR_VAR 0 3
50327: PUSH
50328: LD_INT 21
50330: PUSH
50331: LD_INT 22
50333: PUSH
50334: LD_INT 23
50336: PUSH
50337: LD_INT 24
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: ST_TO_ADDR
50346: GO 50631
50348: LD_INT 43
50350: DOUBLE
50351: EQUAL
50352: IFTRUE 50356
50354: GO 50382
50356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
50357: LD_ADDR_VAR 0 3
50361: PUSH
50362: LD_INT 21
50364: PUSH
50365: LD_INT 22
50367: PUSH
50368: LD_INT 23
50370: PUSH
50371: LD_INT 24
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: ST_TO_ADDR
50380: GO 50631
50382: LD_INT 44
50384: DOUBLE
50385: EQUAL
50386: IFTRUE 50390
50388: GO 50416
50390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
50391: LD_ADDR_VAR 0 3
50395: PUSH
50396: LD_INT 21
50398: PUSH
50399: LD_INT 22
50401: PUSH
50402: LD_INT 23
50404: PUSH
50405: LD_INT 24
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: ST_TO_ADDR
50414: GO 50631
50416: LD_INT 45
50418: DOUBLE
50419: EQUAL
50420: IFTRUE 50424
50422: GO 50450
50424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
50425: LD_ADDR_VAR 0 3
50429: PUSH
50430: LD_INT 21
50432: PUSH
50433: LD_INT 22
50435: PUSH
50436: LD_INT 23
50438: PUSH
50439: LD_INT 24
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: ST_TO_ADDR
50448: GO 50631
50450: LD_INT 49
50452: DOUBLE
50453: EQUAL
50454: IFTRUE 50458
50456: GO 50484
50458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
50459: LD_ADDR_VAR 0 3
50463: PUSH
50464: LD_INT 21
50466: PUSH
50467: LD_INT 22
50469: PUSH
50470: LD_INT 23
50472: PUSH
50473: LD_INT 24
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: ST_TO_ADDR
50482: GO 50631
50484: LD_INT 51
50486: DOUBLE
50487: EQUAL
50488: IFTRUE 50492
50490: GO 50518
50492: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
50493: LD_ADDR_VAR 0 3
50497: PUSH
50498: LD_INT 21
50500: PUSH
50501: LD_INT 22
50503: PUSH
50504: LD_INT 23
50506: PUSH
50507: LD_INT 24
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: ST_TO_ADDR
50516: GO 50631
50518: LD_INT 52
50520: DOUBLE
50521: EQUAL
50522: IFTRUE 50526
50524: GO 50552
50526: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
50527: LD_ADDR_VAR 0 3
50531: PUSH
50532: LD_INT 21
50534: PUSH
50535: LD_INT 22
50537: PUSH
50538: LD_INT 23
50540: PUSH
50541: LD_INT 24
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: ST_TO_ADDR
50550: GO 50631
50552: LD_INT 53
50554: DOUBLE
50555: EQUAL
50556: IFTRUE 50560
50558: GO 50578
50560: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
50561: LD_ADDR_VAR 0 3
50565: PUSH
50566: LD_INT 23
50568: PUSH
50569: LD_INT 24
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: ST_TO_ADDR
50576: GO 50631
50578: LD_INT 46
50580: DOUBLE
50581: EQUAL
50582: IFTRUE 50586
50584: GO 50604
50586: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
50587: LD_ADDR_VAR 0 3
50591: PUSH
50592: LD_INT 23
50594: PUSH
50595: LD_INT 24
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: ST_TO_ADDR
50602: GO 50631
50604: LD_INT 47
50606: DOUBLE
50607: EQUAL
50608: IFTRUE 50612
50610: GO 50630
50612: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50613: LD_ADDR_VAR 0 3
50617: PUSH
50618: LD_INT 23
50620: PUSH
50621: LD_INT 24
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: ST_TO_ADDR
50628: GO 50631
50630: POP
// result := ( chassis in result ) ;
50631: LD_ADDR_VAR 0 3
50635: PUSH
50636: LD_VAR 0 1
50640: PUSH
50641: LD_VAR 0 3
50645: IN
50646: ST_TO_ADDR
// end ;
50647: LD_VAR 0 3
50651: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
50652: LD_INT 0
50654: PPUSH
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
// result := array ;
50661: LD_ADDR_VAR 0 5
50665: PUSH
50666: LD_VAR 0 1
50670: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
50671: LD_VAR 0 1
50675: NOT
50676: PUSH
50677: LD_VAR 0 2
50681: NOT
50682: OR
50683: PUSH
50684: LD_VAR 0 3
50688: NOT
50689: OR
50690: PUSH
50691: LD_VAR 0 2
50695: PUSH
50696: LD_VAR 0 1
50700: GREATER
50701: OR
50702: PUSH
50703: LD_VAR 0 3
50707: PUSH
50708: LD_VAR 0 1
50712: GREATER
50713: OR
50714: IFFALSE 50718
// exit ;
50716: GO 51014
// if direction then
50718: LD_VAR 0 4
50722: IFFALSE 50786
// begin d := 1 ;
50724: LD_ADDR_VAR 0 9
50728: PUSH
50729: LD_INT 1
50731: ST_TO_ADDR
// if i_from > i_to then
50732: LD_VAR 0 2
50736: PUSH
50737: LD_VAR 0 3
50741: GREATER
50742: IFFALSE 50768
// length := ( array - i_from ) + i_to else
50744: LD_ADDR_VAR 0 11
50748: PUSH
50749: LD_VAR 0 1
50753: PUSH
50754: LD_VAR 0 2
50758: MINUS
50759: PUSH
50760: LD_VAR 0 3
50764: PLUS
50765: ST_TO_ADDR
50766: GO 50784
// length := i_to - i_from ;
50768: LD_ADDR_VAR 0 11
50772: PUSH
50773: LD_VAR 0 3
50777: PUSH
50778: LD_VAR 0 2
50782: MINUS
50783: ST_TO_ADDR
// end else
50784: GO 50847
// begin d := - 1 ;
50786: LD_ADDR_VAR 0 9
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: ST_TO_ADDR
// if i_from > i_to then
50795: LD_VAR 0 2
50799: PUSH
50800: LD_VAR 0 3
50804: GREATER
50805: IFFALSE 50825
// length := i_from - i_to else
50807: LD_ADDR_VAR 0 11
50811: PUSH
50812: LD_VAR 0 2
50816: PUSH
50817: LD_VAR 0 3
50821: MINUS
50822: ST_TO_ADDR
50823: GO 50847
// length := ( array - i_to ) + i_from ;
50825: LD_ADDR_VAR 0 11
50829: PUSH
50830: LD_VAR 0 1
50834: PUSH
50835: LD_VAR 0 3
50839: MINUS
50840: PUSH
50841: LD_VAR 0 2
50845: PLUS
50846: ST_TO_ADDR
// end ; if not length then
50847: LD_VAR 0 11
50851: NOT
50852: IFFALSE 50856
// exit ;
50854: GO 51014
// tmp := array ;
50856: LD_ADDR_VAR 0 10
50860: PUSH
50861: LD_VAR 0 1
50865: ST_TO_ADDR
// for i = 1 to length do
50866: LD_ADDR_VAR 0 6
50870: PUSH
50871: DOUBLE
50872: LD_INT 1
50874: DEC
50875: ST_TO_ADDR
50876: LD_VAR 0 11
50880: PUSH
50881: FOR_TO
50882: IFFALSE 51002
// begin for j = 1 to array do
50884: LD_ADDR_VAR 0 7
50888: PUSH
50889: DOUBLE
50890: LD_INT 1
50892: DEC
50893: ST_TO_ADDR
50894: LD_VAR 0 1
50898: PUSH
50899: FOR_TO
50900: IFFALSE 50988
// begin k := j + d ;
50902: LD_ADDR_VAR 0 8
50906: PUSH
50907: LD_VAR 0 7
50911: PUSH
50912: LD_VAR 0 9
50916: PLUS
50917: ST_TO_ADDR
// if k > array then
50918: LD_VAR 0 8
50922: PUSH
50923: LD_VAR 0 1
50927: GREATER
50928: IFFALSE 50938
// k := 1 ;
50930: LD_ADDR_VAR 0 8
50934: PUSH
50935: LD_INT 1
50937: ST_TO_ADDR
// if not k then
50938: LD_VAR 0 8
50942: NOT
50943: IFFALSE 50955
// k := array ;
50945: LD_ADDR_VAR 0 8
50949: PUSH
50950: LD_VAR 0 1
50954: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
50955: LD_ADDR_VAR 0 10
50959: PUSH
50960: LD_VAR 0 10
50964: PPUSH
50965: LD_VAR 0 8
50969: PPUSH
50970: LD_VAR 0 1
50974: PUSH
50975: LD_VAR 0 7
50979: ARRAY
50980: PPUSH
50981: CALL_OW 1
50985: ST_TO_ADDR
// end ;
50986: GO 50899
50988: POP
50989: POP
// array := tmp ;
50990: LD_ADDR_VAR 0 1
50994: PUSH
50995: LD_VAR 0 10
50999: ST_TO_ADDR
// end ;
51000: GO 50881
51002: POP
51003: POP
// result := array ;
51004: LD_ADDR_VAR 0 5
51008: PUSH
51009: LD_VAR 0 1
51013: ST_TO_ADDR
// end ;
51014: LD_VAR 0 5
51018: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
51019: LD_INT 0
51021: PPUSH
51022: PPUSH
// result := 0 ;
51023: LD_ADDR_VAR 0 3
51027: PUSH
51028: LD_INT 0
51030: ST_TO_ADDR
// if not array or not value in array then
51031: LD_VAR 0 1
51035: NOT
51036: PUSH
51037: LD_VAR 0 2
51041: PUSH
51042: LD_VAR 0 1
51046: IN
51047: NOT
51048: OR
51049: IFFALSE 51053
// exit ;
51051: GO 51107
// for i = 1 to array do
51053: LD_ADDR_VAR 0 4
51057: PUSH
51058: DOUBLE
51059: LD_INT 1
51061: DEC
51062: ST_TO_ADDR
51063: LD_VAR 0 1
51067: PUSH
51068: FOR_TO
51069: IFFALSE 51105
// if value = array [ i ] then
51071: LD_VAR 0 2
51075: PUSH
51076: LD_VAR 0 1
51080: PUSH
51081: LD_VAR 0 4
51085: ARRAY
51086: EQUAL
51087: IFFALSE 51103
// begin result := i ;
51089: LD_ADDR_VAR 0 3
51093: PUSH
51094: LD_VAR 0 4
51098: ST_TO_ADDR
// exit ;
51099: POP
51100: POP
51101: GO 51107
// end ;
51103: GO 51068
51105: POP
51106: POP
// end ;
51107: LD_VAR 0 3
51111: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
51112: LD_INT 0
51114: PPUSH
// vc_chassis := chassis ;
51115: LD_ADDR_OWVAR 37
51119: PUSH
51120: LD_VAR 0 1
51124: ST_TO_ADDR
// vc_engine := engine ;
51125: LD_ADDR_OWVAR 39
51129: PUSH
51130: LD_VAR 0 2
51134: ST_TO_ADDR
// vc_control := control ;
51135: LD_ADDR_OWVAR 38
51139: PUSH
51140: LD_VAR 0 3
51144: ST_TO_ADDR
// vc_weapon := weapon ;
51145: LD_ADDR_OWVAR 40
51149: PUSH
51150: LD_VAR 0 4
51154: ST_TO_ADDR
// vc_fuel_battery := fuel ;
51155: LD_ADDR_OWVAR 41
51159: PUSH
51160: LD_VAR 0 5
51164: ST_TO_ADDR
// end ;
51165: LD_VAR 0 6
51169: RET
// export function WantPlant ( unit ) ; var task ; begin
51170: LD_INT 0
51172: PPUSH
51173: PPUSH
// result := false ;
51174: LD_ADDR_VAR 0 2
51178: PUSH
51179: LD_INT 0
51181: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
51182: LD_ADDR_VAR 0 3
51186: PUSH
51187: LD_VAR 0 1
51191: PPUSH
51192: CALL_OW 437
51196: ST_TO_ADDR
// if task then
51197: LD_VAR 0 3
51201: IFFALSE 51229
// if task [ 1 ] [ 1 ] = p then
51203: LD_VAR 0 3
51207: PUSH
51208: LD_INT 1
51210: ARRAY
51211: PUSH
51212: LD_INT 1
51214: ARRAY
51215: PUSH
51216: LD_STRING p
51218: EQUAL
51219: IFFALSE 51229
// result := true ;
51221: LD_ADDR_VAR 0 2
51225: PUSH
51226: LD_INT 1
51228: ST_TO_ADDR
// end ;
51229: LD_VAR 0 2
51233: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
51234: LD_INT 0
51236: PPUSH
51237: PPUSH
51238: PPUSH
51239: PPUSH
// if pos < 1 then
51240: LD_VAR 0 2
51244: PUSH
51245: LD_INT 1
51247: LESS
51248: IFFALSE 51252
// exit ;
51250: GO 51555
// if pos = 1 then
51252: LD_VAR 0 2
51256: PUSH
51257: LD_INT 1
51259: EQUAL
51260: IFFALSE 51293
// result := Replace ( arr , pos [ 1 ] , value ) else
51262: LD_ADDR_VAR 0 4
51266: PUSH
51267: LD_VAR 0 1
51271: PPUSH
51272: LD_VAR 0 2
51276: PUSH
51277: LD_INT 1
51279: ARRAY
51280: PPUSH
51281: LD_VAR 0 3
51285: PPUSH
51286: CALL_OW 1
51290: ST_TO_ADDR
51291: GO 51555
// begin tmp := arr ;
51293: LD_ADDR_VAR 0 6
51297: PUSH
51298: LD_VAR 0 1
51302: ST_TO_ADDR
// s_arr := [ tmp ] ;
51303: LD_ADDR_VAR 0 7
51307: PUSH
51308: LD_VAR 0 6
51312: PUSH
51313: EMPTY
51314: LIST
51315: ST_TO_ADDR
// for i = 1 to pos - 1 do
51316: LD_ADDR_VAR 0 5
51320: PUSH
51321: DOUBLE
51322: LD_INT 1
51324: DEC
51325: ST_TO_ADDR
51326: LD_VAR 0 2
51330: PUSH
51331: LD_INT 1
51333: MINUS
51334: PUSH
51335: FOR_TO
51336: IFFALSE 51381
// begin tmp := tmp [ pos [ i ] ] ;
51338: LD_ADDR_VAR 0 6
51342: PUSH
51343: LD_VAR 0 6
51347: PUSH
51348: LD_VAR 0 2
51352: PUSH
51353: LD_VAR 0 5
51357: ARRAY
51358: ARRAY
51359: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
51360: LD_ADDR_VAR 0 7
51364: PUSH
51365: LD_VAR 0 7
51369: PUSH
51370: LD_VAR 0 6
51374: PUSH
51375: EMPTY
51376: LIST
51377: ADD
51378: ST_TO_ADDR
// end ;
51379: GO 51335
51381: POP
51382: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
51383: LD_ADDR_VAR 0 6
51387: PUSH
51388: LD_VAR 0 6
51392: PPUSH
51393: LD_VAR 0 2
51397: PUSH
51398: LD_VAR 0 2
51402: ARRAY
51403: PPUSH
51404: LD_VAR 0 3
51408: PPUSH
51409: CALL_OW 1
51413: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
51414: LD_ADDR_VAR 0 7
51418: PUSH
51419: LD_VAR 0 7
51423: PPUSH
51424: LD_VAR 0 7
51428: PPUSH
51429: LD_VAR 0 6
51433: PPUSH
51434: CALL_OW 1
51438: ST_TO_ADDR
// for i = s_arr downto 2 do
51439: LD_ADDR_VAR 0 5
51443: PUSH
51444: DOUBLE
51445: LD_VAR 0 7
51449: INC
51450: ST_TO_ADDR
51451: LD_INT 2
51453: PUSH
51454: FOR_DOWNTO
51455: IFFALSE 51539
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
51457: LD_ADDR_VAR 0 6
51461: PUSH
51462: LD_VAR 0 7
51466: PUSH
51467: LD_VAR 0 5
51471: PUSH
51472: LD_INT 1
51474: MINUS
51475: ARRAY
51476: PPUSH
51477: LD_VAR 0 2
51481: PUSH
51482: LD_VAR 0 5
51486: PUSH
51487: LD_INT 1
51489: MINUS
51490: ARRAY
51491: PPUSH
51492: LD_VAR 0 7
51496: PUSH
51497: LD_VAR 0 5
51501: ARRAY
51502: PPUSH
51503: CALL_OW 1
51507: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
51508: LD_ADDR_VAR 0 7
51512: PUSH
51513: LD_VAR 0 7
51517: PPUSH
51518: LD_VAR 0 5
51522: PUSH
51523: LD_INT 1
51525: MINUS
51526: PPUSH
51527: LD_VAR 0 6
51531: PPUSH
51532: CALL_OW 1
51536: ST_TO_ADDR
// end ;
51537: GO 51454
51539: POP
51540: POP
// result := s_arr [ 1 ] ;
51541: LD_ADDR_VAR 0 4
51545: PUSH
51546: LD_VAR 0 7
51550: PUSH
51551: LD_INT 1
51553: ARRAY
51554: ST_TO_ADDR
// end ; end ;
51555: LD_VAR 0 4
51559: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
51560: LD_INT 0
51562: PPUSH
51563: PPUSH
// if not list then
51564: LD_VAR 0 1
51568: NOT
51569: IFFALSE 51573
// exit ;
51571: GO 51664
// i := list [ pos1 ] ;
51573: LD_ADDR_VAR 0 5
51577: PUSH
51578: LD_VAR 0 1
51582: PUSH
51583: LD_VAR 0 2
51587: ARRAY
51588: ST_TO_ADDR
// if not i then
51589: LD_VAR 0 5
51593: NOT
51594: IFFALSE 51598
// exit ;
51596: GO 51664
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
51598: LD_ADDR_VAR 0 1
51602: PUSH
51603: LD_VAR 0 1
51607: PPUSH
51608: LD_VAR 0 2
51612: PPUSH
51613: LD_VAR 0 1
51617: PUSH
51618: LD_VAR 0 3
51622: ARRAY
51623: PPUSH
51624: CALL_OW 1
51628: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
51629: LD_ADDR_VAR 0 1
51633: PUSH
51634: LD_VAR 0 1
51638: PPUSH
51639: LD_VAR 0 3
51643: PPUSH
51644: LD_VAR 0 5
51648: PPUSH
51649: CALL_OW 1
51653: ST_TO_ADDR
// result := list ;
51654: LD_ADDR_VAR 0 4
51658: PUSH
51659: LD_VAR 0 1
51663: ST_TO_ADDR
// end ;
51664: LD_VAR 0 4
51668: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
51669: LD_INT 0
51671: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
51672: LD_ADDR_VAR 0 5
51676: PUSH
51677: LD_VAR 0 1
51681: PPUSH
51682: CALL_OW 250
51686: PPUSH
51687: LD_VAR 0 1
51691: PPUSH
51692: CALL_OW 251
51696: PPUSH
51697: LD_VAR 0 2
51701: PPUSH
51702: LD_VAR 0 3
51706: PPUSH
51707: LD_VAR 0 4
51711: PPUSH
51712: CALL 51722 0 5
51716: ST_TO_ADDR
// end ;
51717: LD_VAR 0 5
51721: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
51722: LD_INT 0
51724: PPUSH
51725: PPUSH
51726: PPUSH
51727: PPUSH
// if not list then
51728: LD_VAR 0 3
51732: NOT
51733: IFFALSE 51737
// exit ;
51735: GO 52125
// result := [ ] ;
51737: LD_ADDR_VAR 0 6
51741: PUSH
51742: EMPTY
51743: ST_TO_ADDR
// for i in list do
51744: LD_ADDR_VAR 0 7
51748: PUSH
51749: LD_VAR 0 3
51753: PUSH
51754: FOR_IN
51755: IFFALSE 51957
// begin tmp := GetDistUnitXY ( i , x , y ) ;
51757: LD_ADDR_VAR 0 9
51761: PUSH
51762: LD_VAR 0 7
51766: PPUSH
51767: LD_VAR 0 1
51771: PPUSH
51772: LD_VAR 0 2
51776: PPUSH
51777: CALL_OW 297
51781: ST_TO_ADDR
// if not result then
51782: LD_VAR 0 6
51786: NOT
51787: IFFALSE 51813
// result := [ [ i , tmp ] ] else
51789: LD_ADDR_VAR 0 6
51793: PUSH
51794: LD_VAR 0 7
51798: PUSH
51799: LD_VAR 0 9
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: EMPTY
51809: LIST
51810: ST_TO_ADDR
51811: GO 51955
// begin if result [ result ] [ 2 ] < tmp then
51813: LD_VAR 0 6
51817: PUSH
51818: LD_VAR 0 6
51822: ARRAY
51823: PUSH
51824: LD_INT 2
51826: ARRAY
51827: PUSH
51828: LD_VAR 0 9
51832: LESS
51833: IFFALSE 51875
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
51835: LD_ADDR_VAR 0 6
51839: PUSH
51840: LD_VAR 0 6
51844: PPUSH
51845: LD_VAR 0 6
51849: PUSH
51850: LD_INT 1
51852: PLUS
51853: PPUSH
51854: LD_VAR 0 7
51858: PUSH
51859: LD_VAR 0 9
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PPUSH
51868: CALL_OW 2
51872: ST_TO_ADDR
51873: GO 51955
// for j = 1 to result do
51875: LD_ADDR_VAR 0 8
51879: PUSH
51880: DOUBLE
51881: LD_INT 1
51883: DEC
51884: ST_TO_ADDR
51885: LD_VAR 0 6
51889: PUSH
51890: FOR_TO
51891: IFFALSE 51953
// begin if tmp < result [ j ] [ 2 ] then
51893: LD_VAR 0 9
51897: PUSH
51898: LD_VAR 0 6
51902: PUSH
51903: LD_VAR 0 8
51907: ARRAY
51908: PUSH
51909: LD_INT 2
51911: ARRAY
51912: LESS
51913: IFFALSE 51951
// begin result := Insert ( result , j , [ i , tmp ] ) ;
51915: LD_ADDR_VAR 0 6
51919: PUSH
51920: LD_VAR 0 6
51924: PPUSH
51925: LD_VAR 0 8
51929: PPUSH
51930: LD_VAR 0 7
51934: PUSH
51935: LD_VAR 0 9
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PPUSH
51944: CALL_OW 2
51948: ST_TO_ADDR
// break ;
51949: GO 51953
// end ; end ;
51951: GO 51890
51953: POP
51954: POP
// end ; end ;
51955: GO 51754
51957: POP
51958: POP
// if result and not asc then
51959: LD_VAR 0 6
51963: PUSH
51964: LD_VAR 0 4
51968: NOT
51969: AND
51970: IFFALSE 52045
// begin tmp := result ;
51972: LD_ADDR_VAR 0 9
51976: PUSH
51977: LD_VAR 0 6
51981: ST_TO_ADDR
// for i = tmp downto 1 do
51982: LD_ADDR_VAR 0 7
51986: PUSH
51987: DOUBLE
51988: LD_VAR 0 9
51992: INC
51993: ST_TO_ADDR
51994: LD_INT 1
51996: PUSH
51997: FOR_DOWNTO
51998: IFFALSE 52043
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
52000: LD_ADDR_VAR 0 6
52004: PUSH
52005: LD_VAR 0 6
52009: PPUSH
52010: LD_VAR 0 9
52014: PUSH
52015: LD_VAR 0 7
52019: MINUS
52020: PUSH
52021: LD_INT 1
52023: PLUS
52024: PPUSH
52025: LD_VAR 0 9
52029: PUSH
52030: LD_VAR 0 7
52034: ARRAY
52035: PPUSH
52036: CALL_OW 1
52040: ST_TO_ADDR
52041: GO 51997
52043: POP
52044: POP
// end ; tmp := [ ] ;
52045: LD_ADDR_VAR 0 9
52049: PUSH
52050: EMPTY
52051: ST_TO_ADDR
// if mode then
52052: LD_VAR 0 5
52056: IFFALSE 52125
// begin for i = 1 to result do
52058: LD_ADDR_VAR 0 7
52062: PUSH
52063: DOUBLE
52064: LD_INT 1
52066: DEC
52067: ST_TO_ADDR
52068: LD_VAR 0 6
52072: PUSH
52073: FOR_TO
52074: IFFALSE 52113
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
52076: LD_ADDR_VAR 0 9
52080: PUSH
52081: LD_VAR 0 9
52085: PPUSH
52086: LD_VAR 0 7
52090: PPUSH
52091: LD_VAR 0 6
52095: PUSH
52096: LD_VAR 0 7
52100: ARRAY
52101: PUSH
52102: LD_INT 1
52104: ARRAY
52105: PPUSH
52106: CALL_OW 1
52110: ST_TO_ADDR
52111: GO 52073
52113: POP
52114: POP
// result := tmp ;
52115: LD_ADDR_VAR 0 6
52119: PUSH
52120: LD_VAR 0 9
52124: ST_TO_ADDR
// end ; end ;
52125: LD_VAR 0 6
52129: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
52130: LD_INT 0
52132: PPUSH
52133: PPUSH
52134: PPUSH
52135: PPUSH
52136: PPUSH
52137: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
52138: LD_ADDR_VAR 0 5
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: ST_TO_ADDR
// if not x or not y then
52160: LD_VAR 0 2
52164: NOT
52165: PUSH
52166: LD_VAR 0 3
52170: NOT
52171: OR
52172: IFFALSE 52176
// exit ;
52174: GO 53828
// if not range then
52176: LD_VAR 0 4
52180: NOT
52181: IFFALSE 52191
// range := 10 ;
52183: LD_ADDR_VAR 0 4
52187: PUSH
52188: LD_INT 10
52190: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52191: LD_ADDR_VAR 0 8
52195: PUSH
52196: LD_INT 81
52198: PUSH
52199: LD_VAR 0 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 92
52210: PUSH
52211: LD_VAR 0 2
52215: PUSH
52216: LD_VAR 0 3
52220: PUSH
52221: LD_VAR 0 4
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 3
52234: PUSH
52235: LD_INT 21
52237: PUSH
52238: LD_INT 3
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: LIST
52253: PPUSH
52254: CALL_OW 69
52258: ST_TO_ADDR
// if not tmp then
52259: LD_VAR 0 8
52263: NOT
52264: IFFALSE 52268
// exit ;
52266: GO 53828
// for i in tmp do
52268: LD_ADDR_VAR 0 6
52272: PUSH
52273: LD_VAR 0 8
52277: PUSH
52278: FOR_IN
52279: IFFALSE 53803
// begin points := [ 0 , 0 , 0 ] ;
52281: LD_ADDR_VAR 0 9
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: LIST
52299: ST_TO_ADDR
// bpoints := 1 ;
52300: LD_ADDR_VAR 0 10
52304: PUSH
52305: LD_INT 1
52307: ST_TO_ADDR
// case GetType ( i ) of unit_human :
52308: LD_VAR 0 6
52312: PPUSH
52313: CALL_OW 247
52317: PUSH
52318: LD_INT 1
52320: DOUBLE
52321: EQUAL
52322: IFTRUE 52326
52324: GO 52904
52326: POP
// begin if GetClass ( i ) = 1 then
52327: LD_VAR 0 6
52331: PPUSH
52332: CALL_OW 257
52336: PUSH
52337: LD_INT 1
52339: EQUAL
52340: IFFALSE 52361
// points := [ 10 , 5 , 3 ] ;
52342: LD_ADDR_VAR 0 9
52346: PUSH
52347: LD_INT 10
52349: PUSH
52350: LD_INT 5
52352: PUSH
52353: LD_INT 3
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: LIST
52360: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
52361: LD_VAR 0 6
52365: PPUSH
52366: CALL_OW 257
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: LD_INT 4
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: LIST
52384: IN
52385: IFFALSE 52406
// points := [ 3 , 2 , 1 ] ;
52387: LD_ADDR_VAR 0 9
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: ST_TO_ADDR
// if GetClass ( i ) = 5 then
52406: LD_VAR 0 6
52410: PPUSH
52411: CALL_OW 257
52415: PUSH
52416: LD_INT 5
52418: EQUAL
52419: IFFALSE 52440
// points := [ 130 , 5 , 2 ] ;
52421: LD_ADDR_VAR 0 9
52425: PUSH
52426: LD_INT 130
52428: PUSH
52429: LD_INT 5
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: LIST
52439: ST_TO_ADDR
// if GetClass ( i ) = 8 then
52440: LD_VAR 0 6
52444: PPUSH
52445: CALL_OW 257
52449: PUSH
52450: LD_INT 8
52452: EQUAL
52453: IFFALSE 52474
// points := [ 35 , 35 , 30 ] ;
52455: LD_ADDR_VAR 0 9
52459: PUSH
52460: LD_INT 35
52462: PUSH
52463: LD_INT 35
52465: PUSH
52466: LD_INT 30
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: ST_TO_ADDR
// if GetClass ( i ) = 9 then
52474: LD_VAR 0 6
52478: PPUSH
52479: CALL_OW 257
52483: PUSH
52484: LD_INT 9
52486: EQUAL
52487: IFFALSE 52508
// points := [ 20 , 55 , 40 ] ;
52489: LD_ADDR_VAR 0 9
52493: PUSH
52494: LD_INT 20
52496: PUSH
52497: LD_INT 55
52499: PUSH
52500: LD_INT 40
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: LIST
52507: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
52508: LD_VAR 0 6
52512: PPUSH
52513: CALL_OW 257
52517: PUSH
52518: LD_INT 12
52520: PUSH
52521: LD_INT 16
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: IN
52528: IFFALSE 52549
// points := [ 5 , 3 , 2 ] ;
52530: LD_ADDR_VAR 0 9
52534: PUSH
52535: LD_INT 5
52537: PUSH
52538: LD_INT 3
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: ST_TO_ADDR
// if GetClass ( i ) = 17 then
52549: LD_VAR 0 6
52553: PPUSH
52554: CALL_OW 257
52558: PUSH
52559: LD_INT 17
52561: EQUAL
52562: IFFALSE 52583
// points := [ 100 , 50 , 75 ] ;
52564: LD_ADDR_VAR 0 9
52568: PUSH
52569: LD_INT 100
52571: PUSH
52572: LD_INT 50
52574: PUSH
52575: LD_INT 75
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: ST_TO_ADDR
// if GetClass ( i ) = 15 then
52583: LD_VAR 0 6
52587: PPUSH
52588: CALL_OW 257
52592: PUSH
52593: LD_INT 15
52595: EQUAL
52596: IFFALSE 52617
// points := [ 10 , 5 , 3 ] ;
52598: LD_ADDR_VAR 0 9
52602: PUSH
52603: LD_INT 10
52605: PUSH
52606: LD_INT 5
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: LIST
52616: ST_TO_ADDR
// if GetClass ( i ) = 14 then
52617: LD_VAR 0 6
52621: PPUSH
52622: CALL_OW 257
52626: PUSH
52627: LD_INT 14
52629: EQUAL
52630: IFFALSE 52651
// points := [ 10 , 0 , 0 ] ;
52632: LD_ADDR_VAR 0 9
52636: PUSH
52637: LD_INT 10
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: LIST
52650: ST_TO_ADDR
// if GetClass ( i ) = 11 then
52651: LD_VAR 0 6
52655: PPUSH
52656: CALL_OW 257
52660: PUSH
52661: LD_INT 11
52663: EQUAL
52664: IFFALSE 52685
// points := [ 30 , 10 , 5 ] ;
52666: LD_ADDR_VAR 0 9
52670: PUSH
52671: LD_INT 30
52673: PUSH
52674: LD_INT 10
52676: PUSH
52677: LD_INT 5
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
52685: LD_VAR 0 1
52689: PPUSH
52690: LD_INT 5
52692: PPUSH
52693: CALL_OW 321
52697: PUSH
52698: LD_INT 2
52700: EQUAL
52701: IFFALSE 52718
// bpoints := bpoints * 1.8 ;
52703: LD_ADDR_VAR 0 10
52707: PUSH
52708: LD_VAR 0 10
52712: PUSH
52713: LD_REAL  1.80000000000000E+0000
52716: MUL
52717: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
52718: LD_VAR 0 6
52722: PPUSH
52723: CALL_OW 257
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: LD_INT 4
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: IN
52746: PUSH
52747: LD_VAR 0 1
52751: PPUSH
52752: LD_INT 51
52754: PPUSH
52755: CALL_OW 321
52759: PUSH
52760: LD_INT 2
52762: EQUAL
52763: AND
52764: IFFALSE 52781
// bpoints := bpoints * 1.2 ;
52766: LD_ADDR_VAR 0 10
52770: PUSH
52771: LD_VAR 0 10
52775: PUSH
52776: LD_REAL  1.20000000000000E+0000
52779: MUL
52780: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
52781: LD_VAR 0 6
52785: PPUSH
52786: CALL_OW 257
52790: PUSH
52791: LD_INT 5
52793: PUSH
52794: LD_INT 7
52796: PUSH
52797: LD_INT 9
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: LIST
52804: IN
52805: PUSH
52806: LD_VAR 0 1
52810: PPUSH
52811: LD_INT 52
52813: PPUSH
52814: CALL_OW 321
52818: PUSH
52819: LD_INT 2
52821: EQUAL
52822: AND
52823: IFFALSE 52840
// bpoints := bpoints * 1.5 ;
52825: LD_ADDR_VAR 0 10
52829: PUSH
52830: LD_VAR 0 10
52834: PUSH
52835: LD_REAL  1.50000000000000E+0000
52838: MUL
52839: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
52840: LD_VAR 0 1
52844: PPUSH
52845: LD_INT 66
52847: PPUSH
52848: CALL_OW 321
52852: PUSH
52853: LD_INT 2
52855: EQUAL
52856: IFFALSE 52873
// bpoints := bpoints * 1.1 ;
52858: LD_ADDR_VAR 0 10
52862: PUSH
52863: LD_VAR 0 10
52867: PUSH
52868: LD_REAL  1.10000000000000E+0000
52871: MUL
52872: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
52873: LD_ADDR_VAR 0 10
52877: PUSH
52878: LD_VAR 0 10
52882: PUSH
52883: LD_VAR 0 6
52887: PPUSH
52888: LD_INT 1
52890: PPUSH
52891: CALL_OW 259
52895: PUSH
52896: LD_REAL  1.15000000000000E+0000
52899: MUL
52900: MUL
52901: ST_TO_ADDR
// end ; unit_vehicle :
52902: GO 53732
52904: LD_INT 2
52906: DOUBLE
52907: EQUAL
52908: IFTRUE 52912
52910: GO 53720
52912: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
52913: LD_VAR 0 6
52917: PPUSH
52918: CALL_OW 264
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 42
52928: PUSH
52929: LD_INT 24
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: LIST
52936: IN
52937: IFFALSE 52958
// points := [ 25 , 5 , 3 ] ;
52939: LD_ADDR_VAR 0 9
52943: PUSH
52944: LD_INT 25
52946: PUSH
52947: LD_INT 5
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
52958: LD_VAR 0 6
52962: PPUSH
52963: CALL_OW 264
52967: PUSH
52968: LD_INT 4
52970: PUSH
52971: LD_INT 43
52973: PUSH
52974: LD_INT 25
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: LIST
52981: IN
52982: IFFALSE 53003
// points := [ 40 , 15 , 5 ] ;
52984: LD_ADDR_VAR 0 9
52988: PUSH
52989: LD_INT 40
52991: PUSH
52992: LD_INT 15
52994: PUSH
52995: LD_INT 5
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: LIST
53002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
53003: LD_VAR 0 6
53007: PPUSH
53008: CALL_OW 264
53012: PUSH
53013: LD_INT 3
53015: PUSH
53016: LD_INT 23
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: IN
53023: IFFALSE 53044
// points := [ 7 , 25 , 8 ] ;
53025: LD_ADDR_VAR 0 9
53029: PUSH
53030: LD_INT 7
53032: PUSH
53033: LD_INT 25
53035: PUSH
53036: LD_INT 8
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: LIST
53043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
53044: LD_VAR 0 6
53048: PPUSH
53049: CALL_OW 264
53053: PUSH
53054: LD_INT 5
53056: PUSH
53057: LD_INT 27
53059: PUSH
53060: LD_INT 44
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: IN
53068: IFFALSE 53089
// points := [ 14 , 50 , 16 ] ;
53070: LD_ADDR_VAR 0 9
53074: PUSH
53075: LD_INT 14
53077: PUSH
53078: LD_INT 50
53080: PUSH
53081: LD_INT 16
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: LIST
53088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
53089: LD_VAR 0 6
53093: PPUSH
53094: CALL_OW 264
53098: PUSH
53099: LD_INT 6
53101: PUSH
53102: LD_INT 46
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: IN
53109: IFFALSE 53130
// points := [ 32 , 120 , 70 ] ;
53111: LD_ADDR_VAR 0 9
53115: PUSH
53116: LD_INT 32
53118: PUSH
53119: LD_INT 120
53121: PUSH
53122: LD_INT 70
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: LIST
53129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
53130: LD_VAR 0 6
53134: PPUSH
53135: CALL_OW 264
53139: PUSH
53140: LD_INT 7
53142: PUSH
53143: LD_INT 28
53145: PUSH
53146: LD_INT 45
53148: PUSH
53149: LD_EXP 53
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: IN
53160: IFFALSE 53181
// points := [ 35 , 20 , 45 ] ;
53162: LD_ADDR_VAR 0 9
53166: PUSH
53167: LD_INT 35
53169: PUSH
53170: LD_INT 20
53172: PUSH
53173: LD_INT 45
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: LIST
53180: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
53181: LD_VAR 0 6
53185: PPUSH
53186: CALL_OW 264
53190: PUSH
53191: LD_INT 47
53193: PUSH
53194: EMPTY
53195: LIST
53196: IN
53197: IFFALSE 53218
// points := [ 67 , 45 , 75 ] ;
53199: LD_ADDR_VAR 0 9
53203: PUSH
53204: LD_INT 67
53206: PUSH
53207: LD_INT 45
53209: PUSH
53210: LD_INT 75
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
53218: LD_VAR 0 6
53222: PPUSH
53223: CALL_OW 264
53227: PUSH
53228: LD_INT 26
53230: PUSH
53231: EMPTY
53232: LIST
53233: IN
53234: IFFALSE 53255
// points := [ 120 , 30 , 80 ] ;
53236: LD_ADDR_VAR 0 9
53240: PUSH
53241: LD_INT 120
53243: PUSH
53244: LD_INT 30
53246: PUSH
53247: LD_INT 80
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
53255: LD_VAR 0 6
53259: PPUSH
53260: CALL_OW 264
53264: PUSH
53265: LD_INT 22
53267: PUSH
53268: EMPTY
53269: LIST
53270: IN
53271: IFFALSE 53292
// points := [ 40 , 1 , 1 ] ;
53273: LD_ADDR_VAR 0 9
53277: PUSH
53278: LD_INT 40
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: LIST
53291: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
53292: LD_VAR 0 6
53296: PPUSH
53297: CALL_OW 264
53301: PUSH
53302: LD_INT 29
53304: PUSH
53305: EMPTY
53306: LIST
53307: IN
53308: IFFALSE 53329
// points := [ 70 , 200 , 400 ] ;
53310: LD_ADDR_VAR 0 9
53314: PUSH
53315: LD_INT 70
53317: PUSH
53318: LD_INT 200
53320: PUSH
53321: LD_INT 400
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
53329: LD_VAR 0 6
53333: PPUSH
53334: CALL_OW 264
53338: PUSH
53339: LD_INT 14
53341: PUSH
53342: LD_INT 53
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: IN
53349: IFFALSE 53370
// points := [ 40 , 10 , 20 ] ;
53351: LD_ADDR_VAR 0 9
53355: PUSH
53356: LD_INT 40
53358: PUSH
53359: LD_INT 10
53361: PUSH
53362: LD_INT 20
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: LIST
53369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
53370: LD_VAR 0 6
53374: PPUSH
53375: CALL_OW 264
53379: PUSH
53380: LD_INT 9
53382: PUSH
53383: EMPTY
53384: LIST
53385: IN
53386: IFFALSE 53407
// points := [ 5 , 70 , 20 ] ;
53388: LD_ADDR_VAR 0 9
53392: PUSH
53393: LD_INT 5
53395: PUSH
53396: LD_INT 70
53398: PUSH
53399: LD_INT 20
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: LIST
53406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
53407: LD_VAR 0 6
53411: PPUSH
53412: CALL_OW 264
53416: PUSH
53417: LD_INT 10
53419: PUSH
53420: EMPTY
53421: LIST
53422: IN
53423: IFFALSE 53444
// points := [ 35 , 110 , 70 ] ;
53425: LD_ADDR_VAR 0 9
53429: PUSH
53430: LD_INT 35
53432: PUSH
53433: LD_INT 110
53435: PUSH
53436: LD_INT 70
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
53444: LD_VAR 0 6
53448: PPUSH
53449: CALL_OW 265
53453: PUSH
53454: LD_INT 25
53456: EQUAL
53457: IFFALSE 53478
// points := [ 80 , 65 , 100 ] ;
53459: LD_ADDR_VAR 0 9
53463: PUSH
53464: LD_INT 80
53466: PUSH
53467: LD_INT 65
53469: PUSH
53470: LD_INT 100
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
53478: LD_VAR 0 6
53482: PPUSH
53483: CALL_OW 263
53487: PUSH
53488: LD_INT 1
53490: EQUAL
53491: IFFALSE 53526
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
53493: LD_ADDR_VAR 0 10
53497: PUSH
53498: LD_VAR 0 10
53502: PUSH
53503: LD_VAR 0 6
53507: PPUSH
53508: CALL_OW 311
53512: PPUSH
53513: LD_INT 3
53515: PPUSH
53516: CALL_OW 259
53520: PUSH
53521: LD_INT 4
53523: MUL
53524: MUL
53525: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
53526: LD_VAR 0 6
53530: PPUSH
53531: CALL_OW 263
53535: PUSH
53536: LD_INT 2
53538: EQUAL
53539: IFFALSE 53590
// begin j := IsControledBy ( i ) ;
53541: LD_ADDR_VAR 0 7
53545: PUSH
53546: LD_VAR 0 6
53550: PPUSH
53551: CALL_OW 312
53555: ST_TO_ADDR
// if j then
53556: LD_VAR 0 7
53560: IFFALSE 53590
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
53562: LD_ADDR_VAR 0 10
53566: PUSH
53567: LD_VAR 0 10
53571: PUSH
53572: LD_VAR 0 7
53576: PPUSH
53577: LD_INT 3
53579: PPUSH
53580: CALL_OW 259
53584: PUSH
53585: LD_INT 3
53587: MUL
53588: MUL
53589: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
53590: LD_VAR 0 6
53594: PPUSH
53595: CALL_OW 264
53599: PUSH
53600: LD_INT 5
53602: PUSH
53603: LD_INT 6
53605: PUSH
53606: LD_INT 46
53608: PUSH
53609: LD_INT 44
53611: PUSH
53612: LD_INT 47
53614: PUSH
53615: LD_INT 45
53617: PUSH
53618: LD_INT 28
53620: PUSH
53621: LD_INT 7
53623: PUSH
53624: LD_INT 27
53626: PUSH
53627: LD_INT 29
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: IN
53642: PUSH
53643: LD_VAR 0 1
53647: PPUSH
53648: LD_INT 52
53650: PPUSH
53651: CALL_OW 321
53655: PUSH
53656: LD_INT 2
53658: EQUAL
53659: AND
53660: IFFALSE 53677
// bpoints := bpoints * 1.2 ;
53662: LD_ADDR_VAR 0 10
53666: PUSH
53667: LD_VAR 0 10
53671: PUSH
53672: LD_REAL  1.20000000000000E+0000
53675: MUL
53676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
53677: LD_VAR 0 6
53681: PPUSH
53682: CALL_OW 264
53686: PUSH
53687: LD_INT 6
53689: PUSH
53690: LD_INT 46
53692: PUSH
53693: LD_INT 47
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: LIST
53700: IN
53701: IFFALSE 53718
// bpoints := bpoints * 1.2 ;
53703: LD_ADDR_VAR 0 10
53707: PUSH
53708: LD_VAR 0 10
53712: PUSH
53713: LD_REAL  1.20000000000000E+0000
53716: MUL
53717: ST_TO_ADDR
// end ; unit_building :
53718: GO 53732
53720: LD_INT 3
53722: DOUBLE
53723: EQUAL
53724: IFTRUE 53728
53726: GO 53731
53728: POP
// ; end ;
53729: GO 53732
53731: POP
// for j = 1 to 3 do
53732: LD_ADDR_VAR 0 7
53736: PUSH
53737: DOUBLE
53738: LD_INT 1
53740: DEC
53741: ST_TO_ADDR
53742: LD_INT 3
53744: PUSH
53745: FOR_TO
53746: IFFALSE 53799
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
53748: LD_ADDR_VAR 0 5
53752: PUSH
53753: LD_VAR 0 5
53757: PPUSH
53758: LD_VAR 0 7
53762: PPUSH
53763: LD_VAR 0 5
53767: PUSH
53768: LD_VAR 0 7
53772: ARRAY
53773: PUSH
53774: LD_VAR 0 9
53778: PUSH
53779: LD_VAR 0 7
53783: ARRAY
53784: PUSH
53785: LD_VAR 0 10
53789: MUL
53790: PLUS
53791: PPUSH
53792: CALL_OW 1
53796: ST_TO_ADDR
53797: GO 53745
53799: POP
53800: POP
// end ;
53801: GO 52278
53803: POP
53804: POP
// result := Replace ( result , 4 , tmp ) ;
53805: LD_ADDR_VAR 0 5
53809: PUSH
53810: LD_VAR 0 5
53814: PPUSH
53815: LD_INT 4
53817: PPUSH
53818: LD_VAR 0 8
53822: PPUSH
53823: CALL_OW 1
53827: ST_TO_ADDR
// end ;
53828: LD_VAR 0 5
53832: RET
// export function DangerAtRange ( unit , range ) ; begin
53833: LD_INT 0
53835: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
53836: LD_ADDR_VAR 0 3
53840: PUSH
53841: LD_VAR 0 1
53845: PPUSH
53846: CALL_OW 255
53850: PPUSH
53851: LD_VAR 0 1
53855: PPUSH
53856: CALL_OW 250
53860: PPUSH
53861: LD_VAR 0 1
53865: PPUSH
53866: CALL_OW 251
53870: PPUSH
53871: LD_VAR 0 2
53875: PPUSH
53876: CALL 52130 0 4
53880: ST_TO_ADDR
// end ;
53881: LD_VAR 0 3
53885: RET
// export function DangerInArea ( side , area ) ; begin
53886: LD_INT 0
53888: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
53889: LD_ADDR_VAR 0 3
53893: PUSH
53894: LD_VAR 0 2
53898: PPUSH
53899: LD_INT 81
53901: PUSH
53902: LD_VAR 0 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PPUSH
53911: CALL_OW 70
53915: ST_TO_ADDR
// end ;
53916: LD_VAR 0 3
53920: RET
// export function IsExtension ( b ) ; begin
53921: LD_INT 0
53923: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
53924: LD_ADDR_VAR 0 2
53928: PUSH
53929: LD_VAR 0 1
53933: PUSH
53934: LD_INT 23
53936: PUSH
53937: LD_INT 20
53939: PUSH
53940: LD_INT 22
53942: PUSH
53943: LD_INT 17
53945: PUSH
53946: LD_INT 24
53948: PUSH
53949: LD_INT 21
53951: PUSH
53952: LD_INT 19
53954: PUSH
53955: LD_INT 16
53957: PUSH
53958: LD_INT 25
53960: PUSH
53961: LD_INT 18
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: IN
53976: ST_TO_ADDR
// end ;
53977: LD_VAR 0 2
53981: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
53982: LD_INT 0
53984: PPUSH
53985: PPUSH
53986: PPUSH
// result := [ ] ;
53987: LD_ADDR_VAR 0 4
53991: PUSH
53992: EMPTY
53993: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
53994: LD_ADDR_VAR 0 5
53998: PUSH
53999: LD_VAR 0 2
54003: PPUSH
54004: LD_INT 21
54006: PUSH
54007: LD_INT 3
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PPUSH
54014: CALL_OW 70
54018: ST_TO_ADDR
// if not tmp then
54019: LD_VAR 0 5
54023: NOT
54024: IFFALSE 54028
// exit ;
54026: GO 54092
// if checkLink then
54028: LD_VAR 0 3
54032: IFFALSE 54082
// begin for i in tmp do
54034: LD_ADDR_VAR 0 6
54038: PUSH
54039: LD_VAR 0 5
54043: PUSH
54044: FOR_IN
54045: IFFALSE 54080
// if GetBase ( i ) <> base then
54047: LD_VAR 0 6
54051: PPUSH
54052: CALL_OW 274
54056: PUSH
54057: LD_VAR 0 1
54061: NONEQUAL
54062: IFFALSE 54078
// ComLinkToBase ( base , i ) ;
54064: LD_VAR 0 1
54068: PPUSH
54069: LD_VAR 0 6
54073: PPUSH
54074: CALL_OW 169
54078: GO 54044
54080: POP
54081: POP
// end ; result := tmp ;
54082: LD_ADDR_VAR 0 4
54086: PUSH
54087: LD_VAR 0 5
54091: ST_TO_ADDR
// end ;
54092: LD_VAR 0 4
54096: RET
// export function ComComplete ( units , b ) ; var i ; begin
54097: LD_INT 0
54099: PPUSH
54100: PPUSH
// if not units then
54101: LD_VAR 0 1
54105: NOT
54106: IFFALSE 54110
// exit ;
54108: GO 54200
// for i in units do
54110: LD_ADDR_VAR 0 4
54114: PUSH
54115: LD_VAR 0 1
54119: PUSH
54120: FOR_IN
54121: IFFALSE 54198
// if BuildingStatus ( b ) = bs_build then
54123: LD_VAR 0 2
54127: PPUSH
54128: CALL_OW 461
54132: PUSH
54133: LD_INT 1
54135: EQUAL
54136: IFFALSE 54196
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
54138: LD_VAR 0 4
54142: PPUSH
54143: LD_STRING h
54145: PUSH
54146: LD_VAR 0 2
54150: PPUSH
54151: CALL_OW 250
54155: PUSH
54156: LD_VAR 0 2
54160: PPUSH
54161: CALL_OW 251
54165: PUSH
54166: LD_VAR 0 2
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: PUSH
54189: EMPTY
54190: LIST
54191: PPUSH
54192: CALL_OW 446
54196: GO 54120
54198: POP
54199: POP
// end ;
54200: LD_VAR 0 3
54204: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
54205: LD_INT 0
54207: PPUSH
54208: PPUSH
54209: PPUSH
54210: PPUSH
54211: PPUSH
54212: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
54213: LD_VAR 0 1
54217: NOT
54218: PUSH
54219: LD_VAR 0 1
54223: PPUSH
54224: CALL_OW 263
54228: PUSH
54229: LD_INT 2
54231: NONEQUAL
54232: OR
54233: IFFALSE 54237
// exit ;
54235: GO 54553
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
54237: LD_ADDR_VAR 0 6
54241: PUSH
54242: LD_INT 22
54244: PUSH
54245: LD_VAR 0 1
54249: PPUSH
54250: CALL_OW 255
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 30
54264: PUSH
54265: LD_INT 36
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 34
54274: PUSH
54275: LD_INT 31
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: LIST
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PPUSH
54291: CALL_OW 69
54295: ST_TO_ADDR
// if not tmp then
54296: LD_VAR 0 6
54300: NOT
54301: IFFALSE 54305
// exit ;
54303: GO 54553
// result := [ ] ;
54305: LD_ADDR_VAR 0 2
54309: PUSH
54310: EMPTY
54311: ST_TO_ADDR
// for i in tmp do
54312: LD_ADDR_VAR 0 3
54316: PUSH
54317: LD_VAR 0 6
54321: PUSH
54322: FOR_IN
54323: IFFALSE 54394
// begin t := UnitsInside ( i ) ;
54325: LD_ADDR_VAR 0 4
54329: PUSH
54330: LD_VAR 0 3
54334: PPUSH
54335: CALL_OW 313
54339: ST_TO_ADDR
// if t then
54340: LD_VAR 0 4
54344: IFFALSE 54392
// for j in t do
54346: LD_ADDR_VAR 0 7
54350: PUSH
54351: LD_VAR 0 4
54355: PUSH
54356: FOR_IN
54357: IFFALSE 54390
// result := Replace ( result , result + 1 , j ) ;
54359: LD_ADDR_VAR 0 2
54363: PUSH
54364: LD_VAR 0 2
54368: PPUSH
54369: LD_VAR 0 2
54373: PUSH
54374: LD_INT 1
54376: PLUS
54377: PPUSH
54378: LD_VAR 0 7
54382: PPUSH
54383: CALL_OW 1
54387: ST_TO_ADDR
54388: GO 54356
54390: POP
54391: POP
// end ;
54392: GO 54322
54394: POP
54395: POP
// if not result then
54396: LD_VAR 0 2
54400: NOT
54401: IFFALSE 54405
// exit ;
54403: GO 54553
// mech := result [ 1 ] ;
54405: LD_ADDR_VAR 0 5
54409: PUSH
54410: LD_VAR 0 2
54414: PUSH
54415: LD_INT 1
54417: ARRAY
54418: ST_TO_ADDR
// if result > 1 then
54419: LD_VAR 0 2
54423: PUSH
54424: LD_INT 1
54426: GREATER
54427: IFFALSE 54539
// begin for i = 2 to result do
54429: LD_ADDR_VAR 0 3
54433: PUSH
54434: DOUBLE
54435: LD_INT 2
54437: DEC
54438: ST_TO_ADDR
54439: LD_VAR 0 2
54443: PUSH
54444: FOR_TO
54445: IFFALSE 54537
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
54447: LD_ADDR_VAR 0 4
54451: PUSH
54452: LD_VAR 0 2
54456: PUSH
54457: LD_VAR 0 3
54461: ARRAY
54462: PPUSH
54463: LD_INT 3
54465: PPUSH
54466: CALL_OW 259
54470: PUSH
54471: LD_VAR 0 2
54475: PUSH
54476: LD_VAR 0 3
54480: ARRAY
54481: PPUSH
54482: CALL_OW 432
54486: MINUS
54487: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
54488: LD_VAR 0 4
54492: PUSH
54493: LD_VAR 0 5
54497: PPUSH
54498: LD_INT 3
54500: PPUSH
54501: CALL_OW 259
54505: PUSH
54506: LD_VAR 0 5
54510: PPUSH
54511: CALL_OW 432
54515: MINUS
54516: GREATEREQUAL
54517: IFFALSE 54535
// mech := result [ i ] ;
54519: LD_ADDR_VAR 0 5
54523: PUSH
54524: LD_VAR 0 2
54528: PUSH
54529: LD_VAR 0 3
54533: ARRAY
54534: ST_TO_ADDR
// end ;
54535: GO 54444
54537: POP
54538: POP
// end ; ComLinkTo ( vehicle , mech ) ;
54539: LD_VAR 0 1
54543: PPUSH
54544: LD_VAR 0 5
54548: PPUSH
54549: CALL_OW 135
// end ;
54553: LD_VAR 0 2
54557: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
54558: LD_INT 0
54560: PPUSH
54561: PPUSH
54562: PPUSH
54563: PPUSH
54564: PPUSH
54565: PPUSH
54566: PPUSH
54567: PPUSH
54568: PPUSH
54569: PPUSH
54570: PPUSH
54571: PPUSH
54572: PPUSH
// result := [ ] ;
54573: LD_ADDR_VAR 0 7
54577: PUSH
54578: EMPTY
54579: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
54580: LD_VAR 0 1
54584: PPUSH
54585: CALL_OW 266
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: IN
54600: NOT
54601: IFFALSE 54605
// exit ;
54603: GO 56239
// if name then
54605: LD_VAR 0 3
54609: IFFALSE 54625
// SetBName ( base_dep , name ) ;
54611: LD_VAR 0 1
54615: PPUSH
54616: LD_VAR 0 3
54620: PPUSH
54621: CALL_OW 500
// base := GetBase ( base_dep ) ;
54625: LD_ADDR_VAR 0 15
54629: PUSH
54630: LD_VAR 0 1
54634: PPUSH
54635: CALL_OW 274
54639: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
54640: LD_ADDR_VAR 0 16
54644: PUSH
54645: LD_VAR 0 1
54649: PPUSH
54650: CALL_OW 255
54654: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
54655: LD_ADDR_VAR 0 17
54659: PUSH
54660: LD_VAR 0 1
54664: PPUSH
54665: CALL_OW 248
54669: ST_TO_ADDR
// if sources then
54670: LD_VAR 0 5
54674: IFFALSE 54721
// for i = 1 to 3 do
54676: LD_ADDR_VAR 0 8
54680: PUSH
54681: DOUBLE
54682: LD_INT 1
54684: DEC
54685: ST_TO_ADDR
54686: LD_INT 3
54688: PUSH
54689: FOR_TO
54690: IFFALSE 54719
// AddResourceType ( base , i , sources [ i ] ) ;
54692: LD_VAR 0 15
54696: PPUSH
54697: LD_VAR 0 8
54701: PPUSH
54702: LD_VAR 0 5
54706: PUSH
54707: LD_VAR 0 8
54711: ARRAY
54712: PPUSH
54713: CALL_OW 276
54717: GO 54689
54719: POP
54720: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
54721: LD_ADDR_VAR 0 18
54725: PUSH
54726: LD_VAR 0 15
54730: PPUSH
54731: LD_VAR 0 2
54735: PPUSH
54736: LD_INT 1
54738: PPUSH
54739: CALL 53982 0 3
54743: ST_TO_ADDR
// InitHc ;
54744: CALL_OW 19
// InitUc ;
54748: CALL_OW 18
// uc_side := side ;
54752: LD_ADDR_OWVAR 20
54756: PUSH
54757: LD_VAR 0 16
54761: ST_TO_ADDR
// uc_nation := nation ;
54762: LD_ADDR_OWVAR 21
54766: PUSH
54767: LD_VAR 0 17
54771: ST_TO_ADDR
// if buildings then
54772: LD_VAR 0 18
54776: IFFALSE 56098
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
54778: LD_ADDR_VAR 0 19
54782: PUSH
54783: LD_VAR 0 18
54787: PPUSH
54788: LD_INT 2
54790: PUSH
54791: LD_INT 30
54793: PUSH
54794: LD_INT 29
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 30
54803: PUSH
54804: LD_INT 30
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: PPUSH
54816: CALL_OW 72
54820: ST_TO_ADDR
// if tmp then
54821: LD_VAR 0 19
54825: IFFALSE 54873
// for i in tmp do
54827: LD_ADDR_VAR 0 8
54831: PUSH
54832: LD_VAR 0 19
54836: PUSH
54837: FOR_IN
54838: IFFALSE 54871
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
54840: LD_VAR 0 8
54844: PPUSH
54845: CALL_OW 250
54849: PPUSH
54850: LD_VAR 0 8
54854: PPUSH
54855: CALL_OW 251
54859: PPUSH
54860: LD_VAR 0 16
54864: PPUSH
54865: CALL_OW 441
54869: GO 54837
54871: POP
54872: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
54873: LD_VAR 0 18
54877: PPUSH
54878: LD_INT 2
54880: PUSH
54881: LD_INT 30
54883: PUSH
54884: LD_INT 32
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 30
54893: PUSH
54894: LD_INT 33
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: PPUSH
54906: CALL_OW 72
54910: IFFALSE 54998
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
54912: LD_ADDR_VAR 0 8
54916: PUSH
54917: LD_VAR 0 18
54921: PPUSH
54922: LD_INT 2
54924: PUSH
54925: LD_INT 30
54927: PUSH
54928: LD_INT 32
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 30
54937: PUSH
54938: LD_INT 33
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: LIST
54949: PPUSH
54950: CALL_OW 72
54954: PUSH
54955: FOR_IN
54956: IFFALSE 54996
// begin if not GetBWeapon ( i ) then
54958: LD_VAR 0 8
54962: PPUSH
54963: CALL_OW 269
54967: NOT
54968: IFFALSE 54994
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
54970: LD_VAR 0 8
54974: PPUSH
54975: LD_VAR 0 8
54979: PPUSH
54980: LD_VAR 0 2
54984: PPUSH
54985: CALL 56244 0 2
54989: PPUSH
54990: CALL_OW 431
// end ;
54994: GO 54955
54996: POP
54997: POP
// end ; for i = 1 to personel do
54998: LD_ADDR_VAR 0 8
55002: PUSH
55003: DOUBLE
55004: LD_INT 1
55006: DEC
55007: ST_TO_ADDR
55008: LD_VAR 0 6
55012: PUSH
55013: FOR_TO
55014: IFFALSE 56078
// begin if i > 4 then
55016: LD_VAR 0 8
55020: PUSH
55021: LD_INT 4
55023: GREATER
55024: IFFALSE 55028
// break ;
55026: GO 56078
// case i of 1 :
55028: LD_VAR 0 8
55032: PUSH
55033: LD_INT 1
55035: DOUBLE
55036: EQUAL
55037: IFTRUE 55041
55039: GO 55121
55041: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
55042: LD_ADDR_VAR 0 12
55046: PUSH
55047: LD_VAR 0 18
55051: PPUSH
55052: LD_INT 22
55054: PUSH
55055: LD_VAR 0 16
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 58
55066: PUSH
55067: EMPTY
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: LD_INT 30
55075: PUSH
55076: LD_INT 32
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 30
55085: PUSH
55086: LD_INT 4
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 30
55095: PUSH
55096: LD_INT 5
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: LIST
55113: PPUSH
55114: CALL_OW 72
55118: ST_TO_ADDR
55119: GO 55343
55121: LD_INT 2
55123: DOUBLE
55124: EQUAL
55125: IFTRUE 55129
55127: GO 55191
55129: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
55130: LD_ADDR_VAR 0 12
55134: PUSH
55135: LD_VAR 0 18
55139: PPUSH
55140: LD_INT 22
55142: PUSH
55143: LD_VAR 0 16
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: LD_INT 30
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 30
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PPUSH
55184: CALL_OW 72
55188: ST_TO_ADDR
55189: GO 55343
55191: LD_INT 3
55193: DOUBLE
55194: EQUAL
55195: IFTRUE 55199
55197: GO 55261
55199: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
55200: LD_ADDR_VAR 0 12
55204: PUSH
55205: LD_VAR 0 18
55209: PPUSH
55210: LD_INT 22
55212: PUSH
55213: LD_VAR 0 16
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: LD_INT 30
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 30
55237: PUSH
55238: LD_INT 3
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PPUSH
55254: CALL_OW 72
55258: ST_TO_ADDR
55259: GO 55343
55261: LD_INT 4
55263: DOUBLE
55264: EQUAL
55265: IFTRUE 55269
55267: GO 55342
55269: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
55270: LD_ADDR_VAR 0 12
55274: PUSH
55275: LD_VAR 0 18
55279: PPUSH
55280: LD_INT 22
55282: PUSH
55283: LD_VAR 0 16
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: LD_INT 30
55297: PUSH
55298: LD_INT 6
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 30
55307: PUSH
55308: LD_INT 7
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 30
55317: PUSH
55318: LD_INT 8
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PPUSH
55335: CALL_OW 72
55339: ST_TO_ADDR
55340: GO 55343
55342: POP
// if i = 1 then
55343: LD_VAR 0 8
55347: PUSH
55348: LD_INT 1
55350: EQUAL
55351: IFFALSE 55462
// begin tmp := [ ] ;
55353: LD_ADDR_VAR 0 19
55357: PUSH
55358: EMPTY
55359: ST_TO_ADDR
// for j in f do
55360: LD_ADDR_VAR 0 9
55364: PUSH
55365: LD_VAR 0 12
55369: PUSH
55370: FOR_IN
55371: IFFALSE 55444
// if GetBType ( j ) = b_bunker then
55373: LD_VAR 0 9
55377: PPUSH
55378: CALL_OW 266
55382: PUSH
55383: LD_INT 32
55385: EQUAL
55386: IFFALSE 55413
// tmp := Insert ( tmp , 1 , j ) else
55388: LD_ADDR_VAR 0 19
55392: PUSH
55393: LD_VAR 0 19
55397: PPUSH
55398: LD_INT 1
55400: PPUSH
55401: LD_VAR 0 9
55405: PPUSH
55406: CALL_OW 2
55410: ST_TO_ADDR
55411: GO 55442
// tmp := Insert ( tmp , tmp + 1 , j ) ;
55413: LD_ADDR_VAR 0 19
55417: PUSH
55418: LD_VAR 0 19
55422: PPUSH
55423: LD_VAR 0 19
55427: PUSH
55428: LD_INT 1
55430: PLUS
55431: PPUSH
55432: LD_VAR 0 9
55436: PPUSH
55437: CALL_OW 2
55441: ST_TO_ADDR
55442: GO 55370
55444: POP
55445: POP
// if tmp then
55446: LD_VAR 0 19
55450: IFFALSE 55462
// f := tmp ;
55452: LD_ADDR_VAR 0 12
55456: PUSH
55457: LD_VAR 0 19
55461: ST_TO_ADDR
// end ; x := personel [ i ] ;
55462: LD_ADDR_VAR 0 13
55466: PUSH
55467: LD_VAR 0 6
55471: PUSH
55472: LD_VAR 0 8
55476: ARRAY
55477: ST_TO_ADDR
// if x = - 1 then
55478: LD_VAR 0 13
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: EQUAL
55487: IFFALSE 55696
// begin for j in f do
55489: LD_ADDR_VAR 0 9
55493: PUSH
55494: LD_VAR 0 12
55498: PUSH
55499: FOR_IN
55500: IFFALSE 55692
// repeat InitHc ;
55502: CALL_OW 19
// if GetBType ( j ) = b_barracks then
55506: LD_VAR 0 9
55510: PPUSH
55511: CALL_OW 266
55515: PUSH
55516: LD_INT 5
55518: EQUAL
55519: IFFALSE 55589
// begin if UnitsInside ( j ) < 3 then
55521: LD_VAR 0 9
55525: PPUSH
55526: CALL_OW 313
55530: PUSH
55531: LD_INT 3
55533: LESS
55534: IFFALSE 55570
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55536: LD_INT 0
55538: PPUSH
55539: LD_INT 5
55541: PUSH
55542: LD_INT 8
55544: PUSH
55545: LD_INT 9
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: LIST
55552: PUSH
55553: LD_VAR 0 17
55557: ARRAY
55558: PPUSH
55559: LD_VAR 0 4
55563: PPUSH
55564: CALL_OW 380
55568: GO 55587
// PrepareHuman ( false , i , skill ) ;
55570: LD_INT 0
55572: PPUSH
55573: LD_VAR 0 8
55577: PPUSH
55578: LD_VAR 0 4
55582: PPUSH
55583: CALL_OW 380
// end else
55587: GO 55606
// PrepareHuman ( false , i , skill ) ;
55589: LD_INT 0
55591: PPUSH
55592: LD_VAR 0 8
55596: PPUSH
55597: LD_VAR 0 4
55601: PPUSH
55602: CALL_OW 380
// un := CreateHuman ;
55606: LD_ADDR_VAR 0 14
55610: PUSH
55611: CALL_OW 44
55615: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55616: LD_ADDR_VAR 0 7
55620: PUSH
55621: LD_VAR 0 7
55625: PPUSH
55626: LD_INT 1
55628: PPUSH
55629: LD_VAR 0 14
55633: PPUSH
55634: CALL_OW 2
55638: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
55639: LD_VAR 0 14
55643: PPUSH
55644: LD_VAR 0 9
55648: PPUSH
55649: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
55653: LD_VAR 0 9
55657: PPUSH
55658: CALL_OW 313
55662: PUSH
55663: LD_INT 6
55665: EQUAL
55666: PUSH
55667: LD_VAR 0 9
55671: PPUSH
55672: CALL_OW 266
55676: PUSH
55677: LD_INT 32
55679: PUSH
55680: LD_INT 31
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: IN
55687: OR
55688: IFFALSE 55502
55690: GO 55499
55692: POP
55693: POP
// end else
55694: GO 56076
// for j = 1 to x do
55696: LD_ADDR_VAR 0 9
55700: PUSH
55701: DOUBLE
55702: LD_INT 1
55704: DEC
55705: ST_TO_ADDR
55706: LD_VAR 0 13
55710: PUSH
55711: FOR_TO
55712: IFFALSE 56074
// begin InitHc ;
55714: CALL_OW 19
// if not f then
55718: LD_VAR 0 12
55722: NOT
55723: IFFALSE 55812
// begin PrepareHuman ( false , i , skill ) ;
55725: LD_INT 0
55727: PPUSH
55728: LD_VAR 0 8
55732: PPUSH
55733: LD_VAR 0 4
55737: PPUSH
55738: CALL_OW 380
// un := CreateHuman ;
55742: LD_ADDR_VAR 0 14
55746: PUSH
55747: CALL_OW 44
55751: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55752: LD_ADDR_VAR 0 7
55756: PUSH
55757: LD_VAR 0 7
55761: PPUSH
55762: LD_INT 1
55764: PPUSH
55765: LD_VAR 0 14
55769: PPUSH
55770: CALL_OW 2
55774: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55775: LD_VAR 0 14
55779: PPUSH
55780: LD_VAR 0 1
55784: PPUSH
55785: CALL_OW 250
55789: PPUSH
55790: LD_VAR 0 1
55794: PPUSH
55795: CALL_OW 251
55799: PPUSH
55800: LD_INT 10
55802: PPUSH
55803: LD_INT 0
55805: PPUSH
55806: CALL_OW 50
// continue ;
55810: GO 55711
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
55812: LD_VAR 0 12
55816: PUSH
55817: LD_INT 1
55819: ARRAY
55820: PPUSH
55821: CALL_OW 313
55825: PUSH
55826: LD_VAR 0 12
55830: PUSH
55831: LD_INT 1
55833: ARRAY
55834: PPUSH
55835: CALL_OW 266
55839: PUSH
55840: LD_INT 32
55842: PUSH
55843: LD_INT 31
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: IN
55850: AND
55851: PUSH
55852: LD_VAR 0 12
55856: PUSH
55857: LD_INT 1
55859: ARRAY
55860: PPUSH
55861: CALL_OW 313
55865: PUSH
55866: LD_INT 6
55868: EQUAL
55869: OR
55870: IFFALSE 55890
// f := Delete ( f , 1 ) ;
55872: LD_ADDR_VAR 0 12
55876: PUSH
55877: LD_VAR 0 12
55881: PPUSH
55882: LD_INT 1
55884: PPUSH
55885: CALL_OW 3
55889: ST_TO_ADDR
// if not f then
55890: LD_VAR 0 12
55894: NOT
55895: IFFALSE 55913
// begin x := x + 2 ;
55897: LD_ADDR_VAR 0 13
55901: PUSH
55902: LD_VAR 0 13
55906: PUSH
55907: LD_INT 2
55909: PLUS
55910: ST_TO_ADDR
// continue ;
55911: GO 55711
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
55913: LD_VAR 0 12
55917: PUSH
55918: LD_INT 1
55920: ARRAY
55921: PPUSH
55922: CALL_OW 266
55926: PUSH
55927: LD_INT 5
55929: EQUAL
55930: IFFALSE 56004
// begin if UnitsInside ( f [ 1 ] ) < 3 then
55932: LD_VAR 0 12
55936: PUSH
55937: LD_INT 1
55939: ARRAY
55940: PPUSH
55941: CALL_OW 313
55945: PUSH
55946: LD_INT 3
55948: LESS
55949: IFFALSE 55985
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55951: LD_INT 0
55953: PPUSH
55954: LD_INT 5
55956: PUSH
55957: LD_INT 8
55959: PUSH
55960: LD_INT 9
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: LIST
55967: PUSH
55968: LD_VAR 0 17
55972: ARRAY
55973: PPUSH
55974: LD_VAR 0 4
55978: PPUSH
55979: CALL_OW 380
55983: GO 56002
// PrepareHuman ( false , i , skill ) ;
55985: LD_INT 0
55987: PPUSH
55988: LD_VAR 0 8
55992: PPUSH
55993: LD_VAR 0 4
55997: PPUSH
55998: CALL_OW 380
// end else
56002: GO 56021
// PrepareHuman ( false , i , skill ) ;
56004: LD_INT 0
56006: PPUSH
56007: LD_VAR 0 8
56011: PPUSH
56012: LD_VAR 0 4
56016: PPUSH
56017: CALL_OW 380
// un := CreateHuman ;
56021: LD_ADDR_VAR 0 14
56025: PUSH
56026: CALL_OW 44
56030: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56031: LD_ADDR_VAR 0 7
56035: PUSH
56036: LD_VAR 0 7
56040: PPUSH
56041: LD_INT 1
56043: PPUSH
56044: LD_VAR 0 14
56048: PPUSH
56049: CALL_OW 2
56053: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
56054: LD_VAR 0 14
56058: PPUSH
56059: LD_VAR 0 12
56063: PUSH
56064: LD_INT 1
56066: ARRAY
56067: PPUSH
56068: CALL_OW 52
// end ;
56072: GO 55711
56074: POP
56075: POP
// end ;
56076: GO 55013
56078: POP
56079: POP
// result := result ^ buildings ;
56080: LD_ADDR_VAR 0 7
56084: PUSH
56085: LD_VAR 0 7
56089: PUSH
56090: LD_VAR 0 18
56094: ADD
56095: ST_TO_ADDR
// end else
56096: GO 56239
// begin for i = 1 to personel do
56098: LD_ADDR_VAR 0 8
56102: PUSH
56103: DOUBLE
56104: LD_INT 1
56106: DEC
56107: ST_TO_ADDR
56108: LD_VAR 0 6
56112: PUSH
56113: FOR_TO
56114: IFFALSE 56237
// begin if i > 4 then
56116: LD_VAR 0 8
56120: PUSH
56121: LD_INT 4
56123: GREATER
56124: IFFALSE 56128
// break ;
56126: GO 56237
// x := personel [ i ] ;
56128: LD_ADDR_VAR 0 13
56132: PUSH
56133: LD_VAR 0 6
56137: PUSH
56138: LD_VAR 0 8
56142: ARRAY
56143: ST_TO_ADDR
// if x = - 1 then
56144: LD_VAR 0 13
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: EQUAL
56153: IFFALSE 56157
// continue ;
56155: GO 56113
// PrepareHuman ( false , i , skill ) ;
56157: LD_INT 0
56159: PPUSH
56160: LD_VAR 0 8
56164: PPUSH
56165: LD_VAR 0 4
56169: PPUSH
56170: CALL_OW 380
// un := CreateHuman ;
56174: LD_ADDR_VAR 0 14
56178: PUSH
56179: CALL_OW 44
56183: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56184: LD_VAR 0 14
56188: PPUSH
56189: LD_VAR 0 1
56193: PPUSH
56194: CALL_OW 250
56198: PPUSH
56199: LD_VAR 0 1
56203: PPUSH
56204: CALL_OW 251
56208: PPUSH
56209: LD_INT 10
56211: PPUSH
56212: LD_INT 0
56214: PPUSH
56215: CALL_OW 50
// result := result ^ un ;
56219: LD_ADDR_VAR 0 7
56223: PUSH
56224: LD_VAR 0 7
56228: PUSH
56229: LD_VAR 0 14
56233: ADD
56234: ST_TO_ADDR
// end ;
56235: GO 56113
56237: POP
56238: POP
// end ; end ;
56239: LD_VAR 0 7
56243: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
56244: LD_INT 0
56246: PPUSH
56247: PPUSH
56248: PPUSH
56249: PPUSH
56250: PPUSH
56251: PPUSH
56252: PPUSH
56253: PPUSH
56254: PPUSH
56255: PPUSH
56256: PPUSH
56257: PPUSH
56258: PPUSH
56259: PPUSH
56260: PPUSH
56261: PPUSH
// result := false ;
56262: LD_ADDR_VAR 0 3
56266: PUSH
56267: LD_INT 0
56269: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
56270: LD_VAR 0 1
56274: NOT
56275: PUSH
56276: LD_VAR 0 1
56280: PPUSH
56281: CALL_OW 266
56285: PUSH
56286: LD_INT 32
56288: PUSH
56289: LD_INT 33
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: IN
56296: NOT
56297: OR
56298: IFFALSE 56302
// exit ;
56300: GO 57411
// nat := GetNation ( tower ) ;
56302: LD_ADDR_VAR 0 12
56306: PUSH
56307: LD_VAR 0 1
56311: PPUSH
56312: CALL_OW 248
56316: ST_TO_ADDR
// side := GetSide ( tower ) ;
56317: LD_ADDR_VAR 0 16
56321: PUSH
56322: LD_VAR 0 1
56326: PPUSH
56327: CALL_OW 255
56331: ST_TO_ADDR
// x := GetX ( tower ) ;
56332: LD_ADDR_VAR 0 10
56336: PUSH
56337: LD_VAR 0 1
56341: PPUSH
56342: CALL_OW 250
56346: ST_TO_ADDR
// y := GetY ( tower ) ;
56347: LD_ADDR_VAR 0 11
56351: PUSH
56352: LD_VAR 0 1
56356: PPUSH
56357: CALL_OW 251
56361: ST_TO_ADDR
// if not x or not y then
56362: LD_VAR 0 10
56366: NOT
56367: PUSH
56368: LD_VAR 0 11
56372: NOT
56373: OR
56374: IFFALSE 56378
// exit ;
56376: GO 57411
// weapon := 0 ;
56378: LD_ADDR_VAR 0 18
56382: PUSH
56383: LD_INT 0
56385: ST_TO_ADDR
// fac_list := [ ] ;
56386: LD_ADDR_VAR 0 17
56390: PUSH
56391: EMPTY
56392: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
56393: LD_ADDR_VAR 0 6
56397: PUSH
56398: LD_VAR 0 1
56402: PPUSH
56403: CALL_OW 274
56407: PPUSH
56408: LD_VAR 0 2
56412: PPUSH
56413: LD_INT 0
56415: PPUSH
56416: CALL 53982 0 3
56420: PPUSH
56421: LD_INT 30
56423: PUSH
56424: LD_INT 3
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PPUSH
56431: CALL_OW 72
56435: ST_TO_ADDR
// if not factories then
56436: LD_VAR 0 6
56440: NOT
56441: IFFALSE 56445
// exit ;
56443: GO 57411
// for i in factories do
56445: LD_ADDR_VAR 0 8
56449: PUSH
56450: LD_VAR 0 6
56454: PUSH
56455: FOR_IN
56456: IFFALSE 56481
// fac_list := fac_list union AvailableWeaponList ( i ) ;
56458: LD_ADDR_VAR 0 17
56462: PUSH
56463: LD_VAR 0 17
56467: PUSH
56468: LD_VAR 0 8
56472: PPUSH
56473: CALL_OW 478
56477: UNION
56478: ST_TO_ADDR
56479: GO 56455
56481: POP
56482: POP
// if not fac_list then
56483: LD_VAR 0 17
56487: NOT
56488: IFFALSE 56492
// exit ;
56490: GO 57411
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
56492: LD_ADDR_VAR 0 5
56496: PUSH
56497: LD_INT 4
56499: PUSH
56500: LD_INT 5
56502: PUSH
56503: LD_INT 9
56505: PUSH
56506: LD_INT 10
56508: PUSH
56509: LD_INT 6
56511: PUSH
56512: LD_INT 7
56514: PUSH
56515: LD_INT 11
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 27
56529: PUSH
56530: LD_INT 28
56532: PUSH
56533: LD_INT 26
56535: PUSH
56536: LD_INT 30
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 43
56547: PUSH
56548: LD_INT 44
56550: PUSH
56551: LD_INT 46
56553: PUSH
56554: LD_INT 45
56556: PUSH
56557: LD_INT 47
56559: PUSH
56560: LD_INT 49
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: LIST
56575: PUSH
56576: LD_VAR 0 12
56580: ARRAY
56581: ST_TO_ADDR
// list := list isect fac_list ;
56582: LD_ADDR_VAR 0 5
56586: PUSH
56587: LD_VAR 0 5
56591: PUSH
56592: LD_VAR 0 17
56596: ISECT
56597: ST_TO_ADDR
// if not list then
56598: LD_VAR 0 5
56602: NOT
56603: IFFALSE 56607
// exit ;
56605: GO 57411
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
56607: LD_VAR 0 12
56611: PUSH
56612: LD_INT 3
56614: EQUAL
56615: PUSH
56616: LD_INT 49
56618: PUSH
56619: LD_VAR 0 5
56623: IN
56624: AND
56625: PUSH
56626: LD_INT 31
56628: PPUSH
56629: LD_VAR 0 16
56633: PPUSH
56634: CALL_OW 321
56638: PUSH
56639: LD_INT 2
56641: EQUAL
56642: AND
56643: IFFALSE 56703
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
56645: LD_INT 22
56647: PUSH
56648: LD_VAR 0 16
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 35
56659: PUSH
56660: LD_INT 49
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 91
56669: PUSH
56670: LD_VAR 0 1
56674: PUSH
56675: LD_INT 10
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: LIST
56687: PPUSH
56688: CALL_OW 69
56692: NOT
56693: IFFALSE 56703
// weapon := ru_time_lapser ;
56695: LD_ADDR_VAR 0 18
56699: PUSH
56700: LD_INT 49
56702: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
56703: LD_VAR 0 12
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: IN
56718: PUSH
56719: LD_INT 11
56721: PUSH
56722: LD_VAR 0 5
56726: IN
56727: PUSH
56728: LD_INT 30
56730: PUSH
56731: LD_VAR 0 5
56735: IN
56736: OR
56737: AND
56738: PUSH
56739: LD_INT 6
56741: PPUSH
56742: LD_VAR 0 16
56746: PPUSH
56747: CALL_OW 321
56751: PUSH
56752: LD_INT 2
56754: EQUAL
56755: AND
56756: IFFALSE 56921
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
56758: LD_INT 22
56760: PUSH
56761: LD_VAR 0 16
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: LD_INT 35
56775: PUSH
56776: LD_INT 11
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 35
56785: PUSH
56786: LD_INT 30
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 91
56800: PUSH
56801: LD_VAR 0 1
56805: PUSH
56806: LD_INT 18
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: LIST
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: PPUSH
56819: CALL_OW 69
56823: NOT
56824: PUSH
56825: LD_INT 22
56827: PUSH
56828: LD_VAR 0 16
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 30
56842: PUSH
56843: LD_INT 32
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 30
56852: PUSH
56853: LD_INT 33
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 91
56867: PUSH
56868: LD_VAR 0 1
56872: PUSH
56873: LD_INT 12
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: PUSH
56886: EMPTY
56887: LIST
56888: PPUSH
56889: CALL_OW 69
56893: PUSH
56894: LD_INT 2
56896: GREATER
56897: AND
56898: IFFALSE 56921
// weapon := [ us_radar , ar_radar ] [ nat ] ;
56900: LD_ADDR_VAR 0 18
56904: PUSH
56905: LD_INT 11
56907: PUSH
56908: LD_INT 30
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_VAR 0 12
56919: ARRAY
56920: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
56921: LD_VAR 0 18
56925: NOT
56926: PUSH
56927: LD_INT 40
56929: PPUSH
56930: LD_VAR 0 16
56934: PPUSH
56935: CALL_OW 321
56939: PUSH
56940: LD_INT 2
56942: EQUAL
56943: AND
56944: PUSH
56945: LD_INT 7
56947: PUSH
56948: LD_VAR 0 5
56952: IN
56953: PUSH
56954: LD_INT 28
56956: PUSH
56957: LD_VAR 0 5
56961: IN
56962: OR
56963: PUSH
56964: LD_INT 45
56966: PUSH
56967: LD_VAR 0 5
56971: IN
56972: OR
56973: AND
56974: IFFALSE 57228
// begin hex := GetHexInfo ( x , y ) ;
56976: LD_ADDR_VAR 0 4
56980: PUSH
56981: LD_VAR 0 10
56985: PPUSH
56986: LD_VAR 0 11
56990: PPUSH
56991: CALL_OW 546
56995: ST_TO_ADDR
// if hex [ 1 ] then
56996: LD_VAR 0 4
57000: PUSH
57001: LD_INT 1
57003: ARRAY
57004: IFFALSE 57008
// exit ;
57006: GO 57411
// height := hex [ 2 ] ;
57008: LD_ADDR_VAR 0 15
57012: PUSH
57013: LD_VAR 0 4
57017: PUSH
57018: LD_INT 2
57020: ARRAY
57021: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
57022: LD_ADDR_VAR 0 14
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: LD_INT 3
57035: PUSH
57036: LD_INT 5
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: ST_TO_ADDR
// for i in tmp do
57045: LD_ADDR_VAR 0 8
57049: PUSH
57050: LD_VAR 0 14
57054: PUSH
57055: FOR_IN
57056: IFFALSE 57226
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
57058: LD_ADDR_VAR 0 9
57062: PUSH
57063: LD_VAR 0 10
57067: PPUSH
57068: LD_VAR 0 8
57072: PPUSH
57073: LD_INT 5
57075: PPUSH
57076: CALL_OW 272
57080: PUSH
57081: LD_VAR 0 11
57085: PPUSH
57086: LD_VAR 0 8
57090: PPUSH
57091: LD_INT 5
57093: PPUSH
57094: CALL_OW 273
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57103: LD_VAR 0 9
57107: PUSH
57108: LD_INT 1
57110: ARRAY
57111: PPUSH
57112: LD_VAR 0 9
57116: PUSH
57117: LD_INT 2
57119: ARRAY
57120: PPUSH
57121: CALL_OW 488
57125: IFFALSE 57224
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
57127: LD_ADDR_VAR 0 4
57131: PUSH
57132: LD_VAR 0 9
57136: PUSH
57137: LD_INT 1
57139: ARRAY
57140: PPUSH
57141: LD_VAR 0 9
57145: PUSH
57146: LD_INT 2
57148: ARRAY
57149: PPUSH
57150: CALL_OW 546
57154: ST_TO_ADDR
// if hex [ 1 ] then
57155: LD_VAR 0 4
57159: PUSH
57160: LD_INT 1
57162: ARRAY
57163: IFFALSE 57167
// continue ;
57165: GO 57055
// h := hex [ 2 ] ;
57167: LD_ADDR_VAR 0 13
57171: PUSH
57172: LD_VAR 0 4
57176: PUSH
57177: LD_INT 2
57179: ARRAY
57180: ST_TO_ADDR
// if h + 7 < height then
57181: LD_VAR 0 13
57185: PUSH
57186: LD_INT 7
57188: PLUS
57189: PUSH
57190: LD_VAR 0 15
57194: LESS
57195: IFFALSE 57224
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
57197: LD_ADDR_VAR 0 18
57201: PUSH
57202: LD_INT 7
57204: PUSH
57205: LD_INT 28
57207: PUSH
57208: LD_INT 45
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: LIST
57215: PUSH
57216: LD_VAR 0 12
57220: ARRAY
57221: ST_TO_ADDR
// break ;
57222: GO 57226
// end ; end ; end ;
57224: GO 57055
57226: POP
57227: POP
// end ; if not weapon then
57228: LD_VAR 0 18
57232: NOT
57233: IFFALSE 57293
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
57235: LD_ADDR_VAR 0 5
57239: PUSH
57240: LD_VAR 0 5
57244: PUSH
57245: LD_INT 11
57247: PUSH
57248: LD_INT 30
57250: PUSH
57251: LD_INT 49
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: LIST
57258: DIFF
57259: ST_TO_ADDR
// if not list then
57260: LD_VAR 0 5
57264: NOT
57265: IFFALSE 57269
// exit ;
57267: GO 57411
// weapon := list [ rand ( 1 , list ) ] ;
57269: LD_ADDR_VAR 0 18
57273: PUSH
57274: LD_VAR 0 5
57278: PUSH
57279: LD_INT 1
57281: PPUSH
57282: LD_VAR 0 5
57286: PPUSH
57287: CALL_OW 12
57291: ARRAY
57292: ST_TO_ADDR
// end ; if weapon then
57293: LD_VAR 0 18
57297: IFFALSE 57411
// begin tmp := CostOfWeapon ( weapon ) ;
57299: LD_ADDR_VAR 0 14
57303: PUSH
57304: LD_VAR 0 18
57308: PPUSH
57309: CALL_OW 451
57313: ST_TO_ADDR
// j := GetBase ( tower ) ;
57314: LD_ADDR_VAR 0 9
57318: PUSH
57319: LD_VAR 0 1
57323: PPUSH
57324: CALL_OW 274
57328: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
57329: LD_VAR 0 9
57333: PPUSH
57334: LD_INT 1
57336: PPUSH
57337: CALL_OW 275
57341: PUSH
57342: LD_VAR 0 14
57346: PUSH
57347: LD_INT 1
57349: ARRAY
57350: GREATEREQUAL
57351: PUSH
57352: LD_VAR 0 9
57356: PPUSH
57357: LD_INT 2
57359: PPUSH
57360: CALL_OW 275
57364: PUSH
57365: LD_VAR 0 14
57369: PUSH
57370: LD_INT 2
57372: ARRAY
57373: GREATEREQUAL
57374: AND
57375: PUSH
57376: LD_VAR 0 9
57380: PPUSH
57381: LD_INT 3
57383: PPUSH
57384: CALL_OW 275
57388: PUSH
57389: LD_VAR 0 14
57393: PUSH
57394: LD_INT 3
57396: ARRAY
57397: GREATEREQUAL
57398: AND
57399: IFFALSE 57411
// result := weapon ;
57401: LD_ADDR_VAR 0 3
57405: PUSH
57406: LD_VAR 0 18
57410: ST_TO_ADDR
// end ; end ;
57411: LD_VAR 0 3
57415: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
57416: LD_INT 0
57418: PPUSH
57419: PPUSH
// result := true ;
57420: LD_ADDR_VAR 0 3
57424: PUSH
57425: LD_INT 1
57427: ST_TO_ADDR
// if array1 = array2 then
57428: LD_VAR 0 1
57432: PUSH
57433: LD_VAR 0 2
57437: EQUAL
57438: IFFALSE 57498
// begin for i = 1 to array1 do
57440: LD_ADDR_VAR 0 4
57444: PUSH
57445: DOUBLE
57446: LD_INT 1
57448: DEC
57449: ST_TO_ADDR
57450: LD_VAR 0 1
57454: PUSH
57455: FOR_TO
57456: IFFALSE 57494
// if array1 [ i ] <> array2 [ i ] then
57458: LD_VAR 0 1
57462: PUSH
57463: LD_VAR 0 4
57467: ARRAY
57468: PUSH
57469: LD_VAR 0 2
57473: PUSH
57474: LD_VAR 0 4
57478: ARRAY
57479: NONEQUAL
57480: IFFALSE 57492
// begin result := false ;
57482: LD_ADDR_VAR 0 3
57486: PUSH
57487: LD_INT 0
57489: ST_TO_ADDR
// break ;
57490: GO 57494
// end ;
57492: GO 57455
57494: POP
57495: POP
// end else
57496: GO 57506
// result := false ;
57498: LD_ADDR_VAR 0 3
57502: PUSH
57503: LD_INT 0
57505: ST_TO_ADDR
// end ;
57506: LD_VAR 0 3
57510: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
57511: LD_INT 0
57513: PPUSH
57514: PPUSH
// if not array1 or not array2 then
57515: LD_VAR 0 1
57519: NOT
57520: PUSH
57521: LD_VAR 0 2
57525: NOT
57526: OR
57527: IFFALSE 57531
// exit ;
57529: GO 57595
// result := true ;
57531: LD_ADDR_VAR 0 3
57535: PUSH
57536: LD_INT 1
57538: ST_TO_ADDR
// for i = 1 to array1 do
57539: LD_ADDR_VAR 0 4
57543: PUSH
57544: DOUBLE
57545: LD_INT 1
57547: DEC
57548: ST_TO_ADDR
57549: LD_VAR 0 1
57553: PUSH
57554: FOR_TO
57555: IFFALSE 57593
// if array1 [ i ] <> array2 [ i ] then
57557: LD_VAR 0 1
57561: PUSH
57562: LD_VAR 0 4
57566: ARRAY
57567: PUSH
57568: LD_VAR 0 2
57572: PUSH
57573: LD_VAR 0 4
57577: ARRAY
57578: NONEQUAL
57579: IFFALSE 57591
// begin result := false ;
57581: LD_ADDR_VAR 0 3
57585: PUSH
57586: LD_INT 0
57588: ST_TO_ADDR
// break ;
57589: GO 57593
// end ;
57591: GO 57554
57593: POP
57594: POP
// end ;
57595: LD_VAR 0 3
57599: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
57600: LD_INT 0
57602: PPUSH
57603: PPUSH
57604: PPUSH
// pom := GetBase ( fac ) ;
57605: LD_ADDR_VAR 0 5
57609: PUSH
57610: LD_VAR 0 1
57614: PPUSH
57615: CALL_OW 274
57619: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
57620: LD_ADDR_VAR 0 4
57624: PUSH
57625: LD_VAR 0 2
57629: PUSH
57630: LD_INT 1
57632: ARRAY
57633: PPUSH
57634: LD_VAR 0 2
57638: PUSH
57639: LD_INT 2
57641: ARRAY
57642: PPUSH
57643: LD_VAR 0 2
57647: PUSH
57648: LD_INT 3
57650: ARRAY
57651: PPUSH
57652: LD_VAR 0 2
57656: PUSH
57657: LD_INT 4
57659: ARRAY
57660: PPUSH
57661: CALL_OW 449
57665: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57666: LD_ADDR_VAR 0 3
57670: PUSH
57671: LD_VAR 0 5
57675: PPUSH
57676: LD_INT 1
57678: PPUSH
57679: CALL_OW 275
57683: PUSH
57684: LD_VAR 0 4
57688: PUSH
57689: LD_INT 1
57691: ARRAY
57692: GREATEREQUAL
57693: PUSH
57694: LD_VAR 0 5
57698: PPUSH
57699: LD_INT 2
57701: PPUSH
57702: CALL_OW 275
57706: PUSH
57707: LD_VAR 0 4
57711: PUSH
57712: LD_INT 2
57714: ARRAY
57715: GREATEREQUAL
57716: AND
57717: PUSH
57718: LD_VAR 0 5
57722: PPUSH
57723: LD_INT 3
57725: PPUSH
57726: CALL_OW 275
57730: PUSH
57731: LD_VAR 0 4
57735: PUSH
57736: LD_INT 3
57738: ARRAY
57739: GREATEREQUAL
57740: AND
57741: ST_TO_ADDR
// end ;
57742: LD_VAR 0 3
57746: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
57747: LD_INT 0
57749: PPUSH
57750: PPUSH
57751: PPUSH
57752: PPUSH
// pom := GetBase ( building ) ;
57753: LD_ADDR_VAR 0 3
57757: PUSH
57758: LD_VAR 0 1
57762: PPUSH
57763: CALL_OW 274
57767: ST_TO_ADDR
// if not pom then
57768: LD_VAR 0 3
57772: NOT
57773: IFFALSE 57777
// exit ;
57775: GO 57947
// btype := GetBType ( building ) ;
57777: LD_ADDR_VAR 0 5
57781: PUSH
57782: LD_VAR 0 1
57786: PPUSH
57787: CALL_OW 266
57791: ST_TO_ADDR
// if btype = b_armoury then
57792: LD_VAR 0 5
57796: PUSH
57797: LD_INT 4
57799: EQUAL
57800: IFFALSE 57810
// btype := b_barracks ;
57802: LD_ADDR_VAR 0 5
57806: PUSH
57807: LD_INT 5
57809: ST_TO_ADDR
// if btype = b_depot then
57810: LD_VAR 0 5
57814: PUSH
57815: LD_INT 0
57817: EQUAL
57818: IFFALSE 57828
// btype := b_warehouse ;
57820: LD_ADDR_VAR 0 5
57824: PUSH
57825: LD_INT 1
57827: ST_TO_ADDR
// if btype = b_workshop then
57828: LD_VAR 0 5
57832: PUSH
57833: LD_INT 2
57835: EQUAL
57836: IFFALSE 57846
// btype := b_factory ;
57838: LD_ADDR_VAR 0 5
57842: PUSH
57843: LD_INT 3
57845: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57846: LD_ADDR_VAR 0 4
57850: PUSH
57851: LD_VAR 0 5
57855: PPUSH
57856: LD_VAR 0 1
57860: PPUSH
57861: CALL_OW 248
57865: PPUSH
57866: CALL_OW 450
57870: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57871: LD_ADDR_VAR 0 2
57875: PUSH
57876: LD_VAR 0 3
57880: PPUSH
57881: LD_INT 1
57883: PPUSH
57884: CALL_OW 275
57888: PUSH
57889: LD_VAR 0 4
57893: PUSH
57894: LD_INT 1
57896: ARRAY
57897: GREATEREQUAL
57898: PUSH
57899: LD_VAR 0 3
57903: PPUSH
57904: LD_INT 2
57906: PPUSH
57907: CALL_OW 275
57911: PUSH
57912: LD_VAR 0 4
57916: PUSH
57917: LD_INT 2
57919: ARRAY
57920: GREATEREQUAL
57921: AND
57922: PUSH
57923: LD_VAR 0 3
57927: PPUSH
57928: LD_INT 3
57930: PPUSH
57931: CALL_OW 275
57935: PUSH
57936: LD_VAR 0 4
57940: PUSH
57941: LD_INT 3
57943: ARRAY
57944: GREATEREQUAL
57945: AND
57946: ST_TO_ADDR
// end ;
57947: LD_VAR 0 2
57951: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
57952: LD_INT 0
57954: PPUSH
57955: PPUSH
57956: PPUSH
// pom := GetBase ( building ) ;
57957: LD_ADDR_VAR 0 4
57961: PUSH
57962: LD_VAR 0 1
57966: PPUSH
57967: CALL_OW 274
57971: ST_TO_ADDR
// if not pom then
57972: LD_VAR 0 4
57976: NOT
57977: IFFALSE 57981
// exit ;
57979: GO 58082
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57981: LD_ADDR_VAR 0 5
57985: PUSH
57986: LD_VAR 0 2
57990: PPUSH
57991: LD_VAR 0 1
57995: PPUSH
57996: CALL_OW 248
58000: PPUSH
58001: CALL_OW 450
58005: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58006: LD_ADDR_VAR 0 3
58010: PUSH
58011: LD_VAR 0 4
58015: PPUSH
58016: LD_INT 1
58018: PPUSH
58019: CALL_OW 275
58023: PUSH
58024: LD_VAR 0 5
58028: PUSH
58029: LD_INT 1
58031: ARRAY
58032: GREATEREQUAL
58033: PUSH
58034: LD_VAR 0 4
58038: PPUSH
58039: LD_INT 2
58041: PPUSH
58042: CALL_OW 275
58046: PUSH
58047: LD_VAR 0 5
58051: PUSH
58052: LD_INT 2
58054: ARRAY
58055: GREATEREQUAL
58056: AND
58057: PUSH
58058: LD_VAR 0 4
58062: PPUSH
58063: LD_INT 3
58065: PPUSH
58066: CALL_OW 275
58070: PUSH
58071: LD_VAR 0 5
58075: PUSH
58076: LD_INT 3
58078: ARRAY
58079: GREATEREQUAL
58080: AND
58081: ST_TO_ADDR
// end ;
58082: LD_VAR 0 3
58086: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
58087: LD_INT 0
58089: PPUSH
58090: PPUSH
58091: PPUSH
58092: PPUSH
58093: PPUSH
58094: PPUSH
58095: PPUSH
58096: PPUSH
58097: PPUSH
58098: PPUSH
58099: PPUSH
// result := false ;
58100: LD_ADDR_VAR 0 8
58104: PUSH
58105: LD_INT 0
58107: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
58108: LD_VAR 0 5
58112: NOT
58113: PUSH
58114: LD_VAR 0 1
58118: NOT
58119: OR
58120: PUSH
58121: LD_VAR 0 2
58125: NOT
58126: OR
58127: PUSH
58128: LD_VAR 0 3
58132: NOT
58133: OR
58134: IFFALSE 58138
// exit ;
58136: GO 58952
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
58138: LD_ADDR_VAR 0 14
58142: PUSH
58143: LD_VAR 0 1
58147: PPUSH
58148: LD_VAR 0 2
58152: PPUSH
58153: LD_VAR 0 3
58157: PPUSH
58158: LD_VAR 0 4
58162: PPUSH
58163: LD_VAR 0 5
58167: PUSH
58168: LD_INT 1
58170: ARRAY
58171: PPUSH
58172: CALL_OW 248
58176: PPUSH
58177: LD_INT 0
58179: PPUSH
58180: CALL 60189 0 6
58184: ST_TO_ADDR
// if not hexes then
58185: LD_VAR 0 14
58189: NOT
58190: IFFALSE 58194
// exit ;
58192: GO 58952
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58194: LD_ADDR_VAR 0 17
58198: PUSH
58199: LD_VAR 0 5
58203: PPUSH
58204: LD_INT 22
58206: PUSH
58207: LD_VAR 0 13
58211: PPUSH
58212: CALL_OW 255
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: LD_INT 30
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 30
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PPUSH
58253: CALL_OW 72
58257: ST_TO_ADDR
// for i = 1 to hexes do
58258: LD_ADDR_VAR 0 9
58262: PUSH
58263: DOUBLE
58264: LD_INT 1
58266: DEC
58267: ST_TO_ADDR
58268: LD_VAR 0 14
58272: PUSH
58273: FOR_TO
58274: IFFALSE 58950
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58276: LD_ADDR_VAR 0 13
58280: PUSH
58281: LD_VAR 0 14
58285: PUSH
58286: LD_VAR 0 9
58290: ARRAY
58291: PUSH
58292: LD_INT 1
58294: ARRAY
58295: PPUSH
58296: LD_VAR 0 14
58300: PUSH
58301: LD_VAR 0 9
58305: ARRAY
58306: PUSH
58307: LD_INT 2
58309: ARRAY
58310: PPUSH
58311: CALL_OW 428
58315: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
58316: LD_VAR 0 14
58320: PUSH
58321: LD_VAR 0 9
58325: ARRAY
58326: PUSH
58327: LD_INT 1
58329: ARRAY
58330: PPUSH
58331: LD_VAR 0 14
58335: PUSH
58336: LD_VAR 0 9
58340: ARRAY
58341: PUSH
58342: LD_INT 2
58344: ARRAY
58345: PPUSH
58346: CALL_OW 351
58350: PUSH
58351: LD_VAR 0 14
58355: PUSH
58356: LD_VAR 0 9
58360: ARRAY
58361: PUSH
58362: LD_INT 1
58364: ARRAY
58365: PPUSH
58366: LD_VAR 0 14
58370: PUSH
58371: LD_VAR 0 9
58375: ARRAY
58376: PUSH
58377: LD_INT 2
58379: ARRAY
58380: PPUSH
58381: CALL_OW 488
58385: NOT
58386: OR
58387: PUSH
58388: LD_VAR 0 13
58392: PPUSH
58393: CALL_OW 247
58397: PUSH
58398: LD_INT 3
58400: EQUAL
58401: OR
58402: IFFALSE 58408
// exit ;
58404: POP
58405: POP
58406: GO 58952
// if not tmp then
58408: LD_VAR 0 13
58412: NOT
58413: IFFALSE 58417
// continue ;
58415: GO 58273
// result := true ;
58417: LD_ADDR_VAR 0 8
58421: PUSH
58422: LD_INT 1
58424: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
58425: LD_VAR 0 6
58429: PUSH
58430: LD_VAR 0 13
58434: PPUSH
58435: CALL_OW 247
58439: PUSH
58440: LD_INT 2
58442: EQUAL
58443: AND
58444: PUSH
58445: LD_VAR 0 13
58449: PPUSH
58450: CALL_OW 263
58454: PUSH
58455: LD_INT 1
58457: EQUAL
58458: AND
58459: IFFALSE 58623
// begin if IsDrivenBy ( tmp ) then
58461: LD_VAR 0 13
58465: PPUSH
58466: CALL_OW 311
58470: IFFALSE 58474
// continue ;
58472: GO 58273
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
58474: LD_VAR 0 6
58478: PPUSH
58479: LD_INT 3
58481: PUSH
58482: LD_INT 60
58484: PUSH
58485: EMPTY
58486: LIST
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 3
58494: PUSH
58495: LD_INT 55
58497: PUSH
58498: EMPTY
58499: LIST
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PPUSH
58509: CALL_OW 72
58513: IFFALSE 58621
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
58515: LD_ADDR_VAR 0 18
58519: PUSH
58520: LD_VAR 0 6
58524: PPUSH
58525: LD_INT 3
58527: PUSH
58528: LD_INT 60
58530: PUSH
58531: EMPTY
58532: LIST
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 3
58540: PUSH
58541: LD_INT 55
58543: PUSH
58544: EMPTY
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PPUSH
58555: CALL_OW 72
58559: PUSH
58560: LD_INT 1
58562: ARRAY
58563: ST_TO_ADDR
// if IsInUnit ( driver ) then
58564: LD_VAR 0 18
58568: PPUSH
58569: CALL_OW 310
58573: IFFALSE 58584
// ComExit ( driver ) ;
58575: LD_VAR 0 18
58579: PPUSH
58580: CALL 83317 0 1
// AddComEnterUnit ( driver , tmp ) ;
58584: LD_VAR 0 18
58588: PPUSH
58589: LD_VAR 0 13
58593: PPUSH
58594: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
58598: LD_VAR 0 18
58602: PPUSH
58603: LD_VAR 0 7
58607: PPUSH
58608: CALL_OW 173
// AddComExitVehicle ( driver ) ;
58612: LD_VAR 0 18
58616: PPUSH
58617: CALL_OW 181
// end ; continue ;
58621: GO 58273
// end ; if not cleaners or not tmp in cleaners then
58623: LD_VAR 0 6
58627: NOT
58628: PUSH
58629: LD_VAR 0 13
58633: PUSH
58634: LD_VAR 0 6
58638: IN
58639: NOT
58640: OR
58641: IFFALSE 58948
// begin if dep then
58643: LD_VAR 0 17
58647: IFFALSE 58783
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
58649: LD_ADDR_VAR 0 16
58653: PUSH
58654: LD_VAR 0 17
58658: PUSH
58659: LD_INT 1
58661: ARRAY
58662: PPUSH
58663: CALL_OW 250
58667: PPUSH
58668: LD_VAR 0 17
58672: PUSH
58673: LD_INT 1
58675: ARRAY
58676: PPUSH
58677: CALL_OW 254
58681: PPUSH
58682: LD_INT 5
58684: PPUSH
58685: CALL_OW 272
58689: PUSH
58690: LD_VAR 0 17
58694: PUSH
58695: LD_INT 1
58697: ARRAY
58698: PPUSH
58699: CALL_OW 251
58703: PPUSH
58704: LD_VAR 0 17
58708: PUSH
58709: LD_INT 1
58711: ARRAY
58712: PPUSH
58713: CALL_OW 254
58717: PPUSH
58718: LD_INT 5
58720: PPUSH
58721: CALL_OW 273
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
58730: LD_VAR 0 16
58734: PUSH
58735: LD_INT 1
58737: ARRAY
58738: PPUSH
58739: LD_VAR 0 16
58743: PUSH
58744: LD_INT 2
58746: ARRAY
58747: PPUSH
58748: CALL_OW 488
58752: IFFALSE 58783
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
58754: LD_VAR 0 13
58758: PPUSH
58759: LD_VAR 0 16
58763: PUSH
58764: LD_INT 1
58766: ARRAY
58767: PPUSH
58768: LD_VAR 0 16
58772: PUSH
58773: LD_INT 2
58775: ARRAY
58776: PPUSH
58777: CALL_OW 111
// continue ;
58781: GO 58273
// end ; end ; r := GetDir ( tmp ) ;
58783: LD_ADDR_VAR 0 15
58787: PUSH
58788: LD_VAR 0 13
58792: PPUSH
58793: CALL_OW 254
58797: ST_TO_ADDR
// if r = 5 then
58798: LD_VAR 0 15
58802: PUSH
58803: LD_INT 5
58805: EQUAL
58806: IFFALSE 58816
// r := 0 ;
58808: LD_ADDR_VAR 0 15
58812: PUSH
58813: LD_INT 0
58815: ST_TO_ADDR
// for j = r to 5 do
58816: LD_ADDR_VAR 0 10
58820: PUSH
58821: DOUBLE
58822: LD_VAR 0 15
58826: DEC
58827: ST_TO_ADDR
58828: LD_INT 5
58830: PUSH
58831: FOR_TO
58832: IFFALSE 58946
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
58834: LD_ADDR_VAR 0 11
58838: PUSH
58839: LD_VAR 0 13
58843: PPUSH
58844: CALL_OW 250
58848: PPUSH
58849: LD_VAR 0 10
58853: PPUSH
58854: LD_INT 2
58856: PPUSH
58857: CALL_OW 272
58861: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
58862: LD_ADDR_VAR 0 12
58866: PUSH
58867: LD_VAR 0 13
58871: PPUSH
58872: CALL_OW 251
58876: PPUSH
58877: LD_VAR 0 10
58881: PPUSH
58882: LD_INT 2
58884: PPUSH
58885: CALL_OW 273
58889: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
58890: LD_VAR 0 11
58894: PPUSH
58895: LD_VAR 0 12
58899: PPUSH
58900: CALL_OW 488
58904: PUSH
58905: LD_VAR 0 11
58909: PPUSH
58910: LD_VAR 0 12
58914: PPUSH
58915: CALL_OW 428
58919: NOT
58920: AND
58921: IFFALSE 58944
// begin ComMoveXY ( tmp , _x , _y ) ;
58923: LD_VAR 0 13
58927: PPUSH
58928: LD_VAR 0 11
58932: PPUSH
58933: LD_VAR 0 12
58937: PPUSH
58938: CALL_OW 111
// break ;
58942: GO 58946
// end ; end ;
58944: GO 58831
58946: POP
58947: POP
// end ; end ;
58948: GO 58273
58950: POP
58951: POP
// end ;
58952: LD_VAR 0 8
58956: RET
// export function BuildingTechInvented ( side , btype ) ; begin
58957: LD_INT 0
58959: PPUSH
// result := true ;
58960: LD_ADDR_VAR 0 3
58964: PUSH
58965: LD_INT 1
58967: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
58968: LD_VAR 0 2
58972: PUSH
58973: LD_INT 24
58975: DOUBLE
58976: EQUAL
58977: IFTRUE 58987
58979: LD_INT 33
58981: DOUBLE
58982: EQUAL
58983: IFTRUE 58987
58985: GO 59012
58987: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
58988: LD_ADDR_VAR 0 3
58992: PUSH
58993: LD_INT 32
58995: PPUSH
58996: LD_VAR 0 1
59000: PPUSH
59001: CALL_OW 321
59005: PUSH
59006: LD_INT 2
59008: EQUAL
59009: ST_TO_ADDR
59010: GO 59332
59012: LD_INT 20
59014: DOUBLE
59015: EQUAL
59016: IFTRUE 59020
59018: GO 59045
59020: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
59021: LD_ADDR_VAR 0 3
59025: PUSH
59026: LD_INT 6
59028: PPUSH
59029: LD_VAR 0 1
59033: PPUSH
59034: CALL_OW 321
59038: PUSH
59039: LD_INT 2
59041: EQUAL
59042: ST_TO_ADDR
59043: GO 59332
59045: LD_INT 22
59047: DOUBLE
59048: EQUAL
59049: IFTRUE 59059
59051: LD_INT 36
59053: DOUBLE
59054: EQUAL
59055: IFTRUE 59059
59057: GO 59084
59059: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
59060: LD_ADDR_VAR 0 3
59064: PUSH
59065: LD_INT 15
59067: PPUSH
59068: LD_VAR 0 1
59072: PPUSH
59073: CALL_OW 321
59077: PUSH
59078: LD_INT 2
59080: EQUAL
59081: ST_TO_ADDR
59082: GO 59332
59084: LD_INT 30
59086: DOUBLE
59087: EQUAL
59088: IFTRUE 59092
59090: GO 59117
59092: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
59093: LD_ADDR_VAR 0 3
59097: PUSH
59098: LD_INT 20
59100: PPUSH
59101: LD_VAR 0 1
59105: PPUSH
59106: CALL_OW 321
59110: PUSH
59111: LD_INT 2
59113: EQUAL
59114: ST_TO_ADDR
59115: GO 59332
59117: LD_INT 28
59119: DOUBLE
59120: EQUAL
59121: IFTRUE 59131
59123: LD_INT 21
59125: DOUBLE
59126: EQUAL
59127: IFTRUE 59131
59129: GO 59156
59131: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
59132: LD_ADDR_VAR 0 3
59136: PUSH
59137: LD_INT 21
59139: PPUSH
59140: LD_VAR 0 1
59144: PPUSH
59145: CALL_OW 321
59149: PUSH
59150: LD_INT 2
59152: EQUAL
59153: ST_TO_ADDR
59154: GO 59332
59156: LD_INT 16
59158: DOUBLE
59159: EQUAL
59160: IFTRUE 59164
59162: GO 59191
59164: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
59165: LD_ADDR_VAR 0 3
59169: PUSH
59170: LD_EXP 61
59174: PPUSH
59175: LD_VAR 0 1
59179: PPUSH
59180: CALL_OW 321
59184: PUSH
59185: LD_INT 2
59187: EQUAL
59188: ST_TO_ADDR
59189: GO 59332
59191: LD_INT 19
59193: DOUBLE
59194: EQUAL
59195: IFTRUE 59205
59197: LD_INT 23
59199: DOUBLE
59200: EQUAL
59201: IFTRUE 59205
59203: GO 59232
59205: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
59206: LD_ADDR_VAR 0 3
59210: PUSH
59211: LD_EXP 60
59215: PPUSH
59216: LD_VAR 0 1
59220: PPUSH
59221: CALL_OW 321
59225: PUSH
59226: LD_INT 2
59228: EQUAL
59229: ST_TO_ADDR
59230: GO 59332
59232: LD_INT 17
59234: DOUBLE
59235: EQUAL
59236: IFTRUE 59240
59238: GO 59265
59240: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
59241: LD_ADDR_VAR 0 3
59245: PUSH
59246: LD_INT 39
59248: PPUSH
59249: LD_VAR 0 1
59253: PPUSH
59254: CALL_OW 321
59258: PUSH
59259: LD_INT 2
59261: EQUAL
59262: ST_TO_ADDR
59263: GO 59332
59265: LD_INT 18
59267: DOUBLE
59268: EQUAL
59269: IFTRUE 59273
59271: GO 59298
59273: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
59274: LD_ADDR_VAR 0 3
59278: PUSH
59279: LD_INT 40
59281: PPUSH
59282: LD_VAR 0 1
59286: PPUSH
59287: CALL_OW 321
59291: PUSH
59292: LD_INT 2
59294: EQUAL
59295: ST_TO_ADDR
59296: GO 59332
59298: LD_INT 27
59300: DOUBLE
59301: EQUAL
59302: IFTRUE 59306
59304: GO 59331
59306: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
59307: LD_ADDR_VAR 0 3
59311: PUSH
59312: LD_INT 35
59314: PPUSH
59315: LD_VAR 0 1
59319: PPUSH
59320: CALL_OW 321
59324: PUSH
59325: LD_INT 2
59327: EQUAL
59328: ST_TO_ADDR
59329: GO 59332
59331: POP
// end ;
59332: LD_VAR 0 3
59336: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
59337: LD_INT 0
59339: PPUSH
59340: PPUSH
59341: PPUSH
59342: PPUSH
59343: PPUSH
59344: PPUSH
59345: PPUSH
59346: PPUSH
59347: PPUSH
59348: PPUSH
59349: PPUSH
// result := false ;
59350: LD_ADDR_VAR 0 6
59354: PUSH
59355: LD_INT 0
59357: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
59358: LD_VAR 0 1
59362: NOT
59363: PUSH
59364: LD_VAR 0 1
59368: PPUSH
59369: CALL_OW 266
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: IN
59384: NOT
59385: OR
59386: PUSH
59387: LD_VAR 0 2
59391: NOT
59392: OR
59393: PUSH
59394: LD_VAR 0 5
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 2
59407: PUSH
59408: LD_INT 3
59410: PUSH
59411: LD_INT 4
59413: PUSH
59414: LD_INT 5
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: IN
59425: NOT
59426: OR
59427: PUSH
59428: LD_VAR 0 3
59432: PPUSH
59433: LD_VAR 0 4
59437: PPUSH
59438: CALL_OW 488
59442: NOT
59443: OR
59444: IFFALSE 59448
// exit ;
59446: GO 60184
// side := GetSide ( depot ) ;
59448: LD_ADDR_VAR 0 9
59452: PUSH
59453: LD_VAR 0 1
59457: PPUSH
59458: CALL_OW 255
59462: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
59463: LD_VAR 0 9
59467: PPUSH
59468: LD_VAR 0 2
59472: PPUSH
59473: CALL 58957 0 2
59477: NOT
59478: IFFALSE 59482
// exit ;
59480: GO 60184
// pom := GetBase ( depot ) ;
59482: LD_ADDR_VAR 0 10
59486: PUSH
59487: LD_VAR 0 1
59491: PPUSH
59492: CALL_OW 274
59496: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59497: LD_ADDR_VAR 0 11
59501: PUSH
59502: LD_VAR 0 2
59506: PPUSH
59507: LD_VAR 0 1
59511: PPUSH
59512: CALL_OW 248
59516: PPUSH
59517: CALL_OW 450
59521: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
59522: LD_VAR 0 10
59526: PPUSH
59527: LD_INT 1
59529: PPUSH
59530: CALL_OW 275
59534: PUSH
59535: LD_VAR 0 11
59539: PUSH
59540: LD_INT 1
59542: ARRAY
59543: GREATEREQUAL
59544: PUSH
59545: LD_VAR 0 10
59549: PPUSH
59550: LD_INT 2
59552: PPUSH
59553: CALL_OW 275
59557: PUSH
59558: LD_VAR 0 11
59562: PUSH
59563: LD_INT 2
59565: ARRAY
59566: GREATEREQUAL
59567: AND
59568: PUSH
59569: LD_VAR 0 10
59573: PPUSH
59574: LD_INT 3
59576: PPUSH
59577: CALL_OW 275
59581: PUSH
59582: LD_VAR 0 11
59586: PUSH
59587: LD_INT 3
59589: ARRAY
59590: GREATEREQUAL
59591: AND
59592: NOT
59593: IFFALSE 59597
// exit ;
59595: GO 60184
// if GetBType ( depot ) = b_depot then
59597: LD_VAR 0 1
59601: PPUSH
59602: CALL_OW 266
59606: PUSH
59607: LD_INT 0
59609: EQUAL
59610: IFFALSE 59622
// dist := 28 else
59612: LD_ADDR_VAR 0 14
59616: PUSH
59617: LD_INT 28
59619: ST_TO_ADDR
59620: GO 59630
// dist := 36 ;
59622: LD_ADDR_VAR 0 14
59626: PUSH
59627: LD_INT 36
59629: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
59630: LD_VAR 0 1
59634: PPUSH
59635: LD_VAR 0 3
59639: PPUSH
59640: LD_VAR 0 4
59644: PPUSH
59645: CALL_OW 297
59649: PUSH
59650: LD_VAR 0 14
59654: GREATER
59655: IFFALSE 59659
// exit ;
59657: GO 60184
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
59659: LD_ADDR_VAR 0 12
59663: PUSH
59664: LD_VAR 0 2
59668: PPUSH
59669: LD_VAR 0 3
59673: PPUSH
59674: LD_VAR 0 4
59678: PPUSH
59679: LD_VAR 0 5
59683: PPUSH
59684: LD_VAR 0 1
59688: PPUSH
59689: CALL_OW 248
59693: PPUSH
59694: LD_INT 0
59696: PPUSH
59697: CALL 60189 0 6
59701: ST_TO_ADDR
// if not hexes then
59702: LD_VAR 0 12
59706: NOT
59707: IFFALSE 59711
// exit ;
59709: GO 60184
// hex := GetHexInfo ( x , y ) ;
59711: LD_ADDR_VAR 0 15
59715: PUSH
59716: LD_VAR 0 3
59720: PPUSH
59721: LD_VAR 0 4
59725: PPUSH
59726: CALL_OW 546
59730: ST_TO_ADDR
// if hex [ 1 ] then
59731: LD_VAR 0 15
59735: PUSH
59736: LD_INT 1
59738: ARRAY
59739: IFFALSE 59743
// exit ;
59741: GO 60184
// height := hex [ 2 ] ;
59743: LD_ADDR_VAR 0 13
59747: PUSH
59748: LD_VAR 0 15
59752: PUSH
59753: LD_INT 2
59755: ARRAY
59756: ST_TO_ADDR
// for i = 1 to hexes do
59757: LD_ADDR_VAR 0 7
59761: PUSH
59762: DOUBLE
59763: LD_INT 1
59765: DEC
59766: ST_TO_ADDR
59767: LD_VAR 0 12
59771: PUSH
59772: FOR_TO
59773: IFFALSE 60103
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
59775: LD_VAR 0 12
59779: PUSH
59780: LD_VAR 0 7
59784: ARRAY
59785: PUSH
59786: LD_INT 1
59788: ARRAY
59789: PPUSH
59790: LD_VAR 0 12
59794: PUSH
59795: LD_VAR 0 7
59799: ARRAY
59800: PUSH
59801: LD_INT 2
59803: ARRAY
59804: PPUSH
59805: CALL_OW 488
59809: NOT
59810: PUSH
59811: LD_VAR 0 12
59815: PUSH
59816: LD_VAR 0 7
59820: ARRAY
59821: PUSH
59822: LD_INT 1
59824: ARRAY
59825: PPUSH
59826: LD_VAR 0 12
59830: PUSH
59831: LD_VAR 0 7
59835: ARRAY
59836: PUSH
59837: LD_INT 2
59839: ARRAY
59840: PPUSH
59841: CALL_OW 428
59845: PUSH
59846: LD_INT 0
59848: GREATER
59849: OR
59850: PUSH
59851: LD_VAR 0 12
59855: PUSH
59856: LD_VAR 0 7
59860: ARRAY
59861: PUSH
59862: LD_INT 1
59864: ARRAY
59865: PPUSH
59866: LD_VAR 0 12
59870: PUSH
59871: LD_VAR 0 7
59875: ARRAY
59876: PUSH
59877: LD_INT 2
59879: ARRAY
59880: PPUSH
59881: CALL_OW 351
59885: OR
59886: IFFALSE 59892
// exit ;
59888: POP
59889: POP
59890: GO 60184
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59892: LD_ADDR_VAR 0 8
59896: PUSH
59897: LD_VAR 0 12
59901: PUSH
59902: LD_VAR 0 7
59906: ARRAY
59907: PUSH
59908: LD_INT 1
59910: ARRAY
59911: PPUSH
59912: LD_VAR 0 12
59916: PUSH
59917: LD_VAR 0 7
59921: ARRAY
59922: PUSH
59923: LD_INT 2
59925: ARRAY
59926: PPUSH
59927: CALL_OW 546
59931: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
59932: LD_VAR 0 8
59936: PUSH
59937: LD_INT 1
59939: ARRAY
59940: PUSH
59941: LD_VAR 0 8
59945: PUSH
59946: LD_INT 2
59948: ARRAY
59949: PUSH
59950: LD_VAR 0 13
59954: PUSH
59955: LD_INT 2
59957: PLUS
59958: GREATER
59959: OR
59960: PUSH
59961: LD_VAR 0 8
59965: PUSH
59966: LD_INT 2
59968: ARRAY
59969: PUSH
59970: LD_VAR 0 13
59974: PUSH
59975: LD_INT 2
59977: MINUS
59978: LESS
59979: OR
59980: PUSH
59981: LD_VAR 0 8
59985: PUSH
59986: LD_INT 3
59988: ARRAY
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 8
59995: PUSH
59996: LD_INT 9
59998: PUSH
59999: LD_INT 10
60001: PUSH
60002: LD_INT 11
60004: PUSH
60005: LD_INT 12
60007: PUSH
60008: LD_INT 13
60010: PUSH
60011: LD_INT 16
60013: PUSH
60014: LD_INT 17
60016: PUSH
60017: LD_INT 18
60019: PUSH
60020: LD_INT 19
60022: PUSH
60023: LD_INT 20
60025: PUSH
60026: LD_INT 21
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: IN
60044: NOT
60045: OR
60046: PUSH
60047: LD_VAR 0 8
60051: PUSH
60052: LD_INT 5
60054: ARRAY
60055: NOT
60056: OR
60057: PUSH
60058: LD_VAR 0 8
60062: PUSH
60063: LD_INT 6
60065: ARRAY
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: LD_INT 7
60075: PUSH
60076: LD_INT 9
60078: PUSH
60079: LD_INT 10
60081: PUSH
60082: LD_INT 11
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: IN
60093: NOT
60094: OR
60095: IFFALSE 60101
// exit ;
60097: POP
60098: POP
60099: GO 60184
// end ;
60101: GO 59772
60103: POP
60104: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
60105: LD_VAR 0 9
60109: PPUSH
60110: LD_VAR 0 3
60114: PPUSH
60115: LD_VAR 0 4
60119: PPUSH
60120: LD_INT 20
60122: PPUSH
60123: CALL 52130 0 4
60127: PUSH
60128: LD_INT 4
60130: ARRAY
60131: IFFALSE 60135
// exit ;
60133: GO 60184
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
60135: LD_VAR 0 2
60139: PUSH
60140: LD_INT 29
60142: PUSH
60143: LD_INT 30
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: IN
60150: PUSH
60151: LD_VAR 0 3
60155: PPUSH
60156: LD_VAR 0 4
60160: PPUSH
60161: LD_VAR 0 9
60165: PPUSH
60166: CALL_OW 440
60170: NOT
60171: AND
60172: IFFALSE 60176
// exit ;
60174: GO 60184
// result := true ;
60176: LD_ADDR_VAR 0 6
60180: PUSH
60181: LD_INT 1
60183: ST_TO_ADDR
// end ;
60184: LD_VAR 0 6
60188: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
60189: LD_INT 0
60191: PPUSH
60192: PPUSH
60193: PPUSH
60194: PPUSH
60195: PPUSH
60196: PPUSH
60197: PPUSH
60198: PPUSH
60199: PPUSH
60200: PPUSH
60201: PPUSH
60202: PPUSH
60203: PPUSH
60204: PPUSH
60205: PPUSH
60206: PPUSH
60207: PPUSH
60208: PPUSH
60209: PPUSH
60210: PPUSH
60211: PPUSH
60212: PPUSH
60213: PPUSH
60214: PPUSH
60215: PPUSH
60216: PPUSH
60217: PPUSH
60218: PPUSH
60219: PPUSH
60220: PPUSH
60221: PPUSH
60222: PPUSH
60223: PPUSH
60224: PPUSH
60225: PPUSH
60226: PPUSH
60227: PPUSH
60228: PPUSH
60229: PPUSH
60230: PPUSH
60231: PPUSH
60232: PPUSH
60233: PPUSH
60234: PPUSH
60235: PPUSH
60236: PPUSH
60237: PPUSH
60238: PPUSH
60239: PPUSH
60240: PPUSH
60241: PPUSH
60242: PPUSH
60243: PPUSH
60244: PPUSH
60245: PPUSH
60246: PPUSH
60247: PPUSH
60248: PPUSH
// result = [ ] ;
60249: LD_ADDR_VAR 0 7
60253: PUSH
60254: EMPTY
60255: ST_TO_ADDR
// temp_list = [ ] ;
60256: LD_ADDR_VAR 0 9
60260: PUSH
60261: EMPTY
60262: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
60263: LD_VAR 0 4
60267: PUSH
60268: LD_INT 0
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: LD_INT 3
60279: PUSH
60280: LD_INT 4
60282: PUSH
60283: LD_INT 5
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: IN
60294: NOT
60295: PUSH
60296: LD_VAR 0 1
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: IN
60311: PUSH
60312: LD_VAR 0 5
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: LD_INT 3
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: LIST
60330: IN
60331: NOT
60332: AND
60333: OR
60334: IFFALSE 60338
// exit ;
60336: GO 78729
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
60338: LD_VAR 0 1
60342: PUSH
60343: LD_INT 6
60345: PUSH
60346: LD_INT 7
60348: PUSH
60349: LD_INT 8
60351: PUSH
60352: LD_INT 13
60354: PUSH
60355: LD_INT 12
60357: PUSH
60358: LD_INT 15
60360: PUSH
60361: LD_INT 11
60363: PUSH
60364: LD_INT 14
60366: PUSH
60367: LD_INT 10
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: IN
60381: IFFALSE 60391
// btype = b_lab ;
60383: LD_ADDR_VAR 0 1
60387: PUSH
60388: LD_INT 6
60390: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
60391: LD_VAR 0 6
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: LIST
60409: IN
60410: NOT
60411: PUSH
60412: LD_VAR 0 1
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: LD_INT 3
60428: PUSH
60429: LD_INT 6
60431: PUSH
60432: LD_INT 36
60434: PUSH
60435: LD_INT 4
60437: PUSH
60438: LD_INT 5
60440: PUSH
60441: LD_INT 31
60443: PUSH
60444: LD_INT 32
60446: PUSH
60447: LD_INT 33
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: IN
60463: NOT
60464: PUSH
60465: LD_VAR 0 6
60469: PUSH
60470: LD_INT 1
60472: EQUAL
60473: AND
60474: OR
60475: PUSH
60476: LD_VAR 0 1
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 3
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: IN
60491: NOT
60492: PUSH
60493: LD_VAR 0 6
60497: PUSH
60498: LD_INT 2
60500: EQUAL
60501: AND
60502: OR
60503: IFFALSE 60513
// mode = 0 ;
60505: LD_ADDR_VAR 0 6
60509: PUSH
60510: LD_INT 0
60512: ST_TO_ADDR
// case mode of 0 :
60513: LD_VAR 0 6
60517: PUSH
60518: LD_INT 0
60520: DOUBLE
60521: EQUAL
60522: IFTRUE 60526
60524: GO 71979
60526: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60527: LD_ADDR_VAR 0 11
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: LD_INT 1
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: LD_INT 2
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: LD_INT 2
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 3
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60720: LD_ADDR_VAR 0 12
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: LD_INT 1
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: NEG
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 2
60854: NEG
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 2
60866: NEG
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: NEG
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 3
60888: NEG
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60916: LD_ADDR_VAR 0 13
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: LD_INT 2
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: LD_INT 2
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: NEG
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 2
61051: NEG
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 2
61063: NEG
61064: PUSH
61065: LD_INT 3
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 3
61087: NEG
61088: PUSH
61089: LD_INT 3
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61115: LD_ADDR_VAR 0 14
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 2
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: LD_INT 3
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61311: LD_ADDR_VAR 0 15
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 1
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: NEG
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 2
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: NEG
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 3
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 3
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61504: LD_ADDR_VAR 0 16
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: LD_INT 2
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: LD_INT 2
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: LD_INT 2
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 2
61627: NEG
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: LD_INT 2
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 3
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 3
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: LD_INT 3
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61697: LD_ADDR_VAR 0 17
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: LD_INT 1
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: LD_INT 2
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 2
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 2
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: LD_INT 2
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 2
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 2
61873: NEG
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 2
61884: NEG
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: LD_INT 2
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61927: LD_ADDR_VAR 0 18
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 2
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: LD_INT 2
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 2
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: LD_INT 2
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: LD_INT 2
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 2
62103: NEG
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 2
62114: NEG
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 2
62126: NEG
62127: PUSH
62128: LD_INT 2
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62157: LD_ADDR_VAR 0 19
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: LD_INT 1
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: LD_INT 2
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 2
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 2
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 2
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 1
62322: NEG
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 2
62333: NEG
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: NEG
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: LD_INT 2
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62387: LD_ADDR_VAR 0 20
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: LD_INT 2
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: LD_INT 2
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 1
62491: PUSH
62492: LD_INT 1
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 2
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 2
62512: PUSH
62513: LD_INT 1
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 2
62522: PUSH
62523: LD_INT 2
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 1
62532: PUSH
62533: LD_INT 2
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 2
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 2
62563: NEG
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 2
62574: NEG
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 2
62586: NEG
62587: PUSH
62588: LD_INT 2
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62617: LD_ADDR_VAR 0 21
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: LD_INT 1
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: LD_INT 2
62702: NEG
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: PUSH
62763: LD_INT 2
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 2
62793: NEG
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 2
62816: NEG
62817: PUSH
62818: LD_INT 2
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62847: LD_ADDR_VAR 0 22
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: LD_INT 1
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: NEG
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: LD_INT 2
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: LD_INT 1
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 2
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 2
62982: PUSH
62983: LD_INT 2
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: LD_INT 2
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: LD_INT 2
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 2
63023: NEG
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 2
63046: NEG
63047: PUSH
63048: LD_INT 2
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63077: LD_ADDR_VAR 0 23
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 1
63146: NEG
63147: PUSH
63148: LD_INT 1
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 2
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 2
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 2
63212: PUSH
63213: LD_INT 2
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: LD_INT 2
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: LD_INT 2
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 2
63253: NEG
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 2
63264: NEG
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 2
63276: NEG
63277: PUSH
63278: LD_INT 2
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: LD_INT 3
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: LD_INT 3
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: LD_INT 2
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 2
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
63357: LD_ADDR_VAR 0 24
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: LD_INT 1
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: NEG
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 1
63426: NEG
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: NEG
63439: PUSH
63440: LD_INT 2
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 2
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 2
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 2
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 2
63492: PUSH
63493: LD_INT 2
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: LD_INT 2
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: LD_INT 2
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 1
63522: NEG
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 2
63533: NEG
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 2
63544: NEG
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 2
63556: NEG
63557: PUSH
63558: LD_INT 2
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: LD_INT 2
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 2
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 3
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 3
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
63633: LD_ADDR_VAR 0 25
63637: PUSH
63638: LD_INT 0
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: LD_INT 1
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: LD_INT 1
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: NEG
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: NEG
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: LD_INT 2
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 2
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 2
63758: PUSH
63759: LD_INT 1
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 1
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: LD_INT 2
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: NEG
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 2
63809: NEG
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 2
63820: NEG
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 2
63832: NEG
63833: PUSH
63834: LD_INT 2
63836: NEG
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 3
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 3
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 2
63864: PUSH
63865: LD_INT 3
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 1
63874: PUSH
63875: LD_INT 3
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63907: LD_ADDR_VAR 0 26
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 1
63945: PUSH
63946: LD_INT 1
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: NEG
63989: PUSH
63990: LD_INT 2
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: LD_INT 2
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 2
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 2
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 2
64042: PUSH
64043: LD_INT 2
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 1
64052: PUSH
64053: LD_INT 2
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: LD_INT 2
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 2
64083: NEG
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 2
64094: NEG
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 2
64106: NEG
64107: PUSH
64108: LD_INT 2
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 2
64118: PUSH
64119: LD_INT 3
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: LD_INT 3
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 2
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64183: LD_ADDR_VAR 0 27
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 0
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: LD_INT 0
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: PUSH
64222: LD_INT 1
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: LD_INT 1
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: LD_INT 1
64256: NEG
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 1
64264: NEG
64265: PUSH
64266: LD_INT 2
64268: NEG
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: LD_INT 2
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 1
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 2
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 2
64308: PUSH
64309: LD_INT 1
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 2
64318: PUSH
64319: LD_INT 2
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: LD_INT 2
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: LD_INT 2
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: NEG
64349: PUSH
64350: LD_INT 1
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 2
64359: NEG
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 2
64370: NEG
64371: PUSH
64372: LD_INT 1
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 2
64382: NEG
64383: PUSH
64384: LD_INT 2
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: LD_INT 2
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 2
64405: NEG
64406: PUSH
64407: LD_INT 1
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 3
64416: NEG
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 3
64428: NEG
64429: PUSH
64430: LD_INT 2
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64463: LD_ADDR_VAR 0 28
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: LD_INT 1
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: NEG
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: LD_INT 2
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: LD_INT 2
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 1
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 2
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: LD_INT 2
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: LD_INT 2
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 2
64639: NEG
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 2
64650: NEG
64651: PUSH
64652: LD_INT 1
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 2
64662: NEG
64663: PUSH
64664: LD_INT 2
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 2
64674: NEG
64675: PUSH
64676: LD_INT 3
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 1
64686: NEG
64687: PUSH
64688: LD_INT 3
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 3
64698: NEG
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 3
64710: NEG
64711: PUSH
64712: LD_INT 2
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64745: LD_ADDR_VAR 0 29
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: LD_INT 1
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: LD_INT 1
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: LD_INT 1
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: LD_INT 0
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: LD_INT 1
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: LD_INT 2
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: LD_INT 2
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 1
64849: PUSH
64850: LD_INT 1
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 2
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 2
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: LD_INT 2
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: LD_INT 2
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 1
64900: NEG
64901: PUSH
64902: LD_INT 1
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 2
64911: NEG
64912: PUSH
64913: LD_INT 1
64915: NEG
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 2
64923: NEG
64924: PUSH
64925: LD_INT 2
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 2
64935: NEG
64936: PUSH
64937: LD_INT 3
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: LD_INT 1
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 3
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: LD_INT 3
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: LD_INT 2
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 3
64989: NEG
64990: PUSH
64991: LD_INT 2
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65024: LD_ADDR_VAR 0 30
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: LD_INT 1
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 1
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: LD_INT 1
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 1
65093: NEG
65094: PUSH
65095: LD_INT 1
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: LD_INT 2
65120: NEG
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 1
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 2
65139: PUSH
65140: LD_INT 0
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 2
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 2
65159: PUSH
65160: LD_INT 2
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: LD_INT 2
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 1
65179: NEG
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PUSH
65192: LD_INT 0
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 2
65201: NEG
65202: PUSH
65203: LD_INT 1
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 1
65213: NEG
65214: PUSH
65215: LD_INT 3
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 1
65225: PUSH
65226: LD_INT 2
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 3
65236: PUSH
65237: LD_INT 2
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 2
65246: PUSH
65247: LD_INT 3
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 2
65256: NEG
65257: PUSH
65258: LD_INT 1
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 3
65267: NEG
65268: PUSH
65269: LD_INT 1
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65302: LD_ADDR_VAR 0 31
65306: PUSH
65307: LD_INT 0
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: LD_INT 1
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 1
65330: PUSH
65331: LD_INT 0
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 1
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: LD_INT 1
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: NEG
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 1
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: LD_INT 2
65387: NEG
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 1
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 2
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 2
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: LD_INT 2
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 1
65436: PUSH
65437: LD_INT 2
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: LD_INT 2
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: LD_INT 1
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 2
65467: NEG
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 2
65479: NEG
65480: PUSH
65481: LD_INT 2
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 2
65491: NEG
65492: PUSH
65493: LD_INT 3
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: LD_INT 1
65506: NEG
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 3
65514: PUSH
65515: LD_INT 1
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 1
65524: PUSH
65525: LD_INT 3
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: LD_INT 2
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 3
65545: NEG
65546: PUSH
65547: LD_INT 2
65549: NEG
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65580: LD_ADDR_VAR 0 32
65584: PUSH
65585: LD_INT 0
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: LD_INT 0
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: LD_INT 1
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: LD_INT 1
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: LD_INT 0
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: LD_INT 1
65653: NEG
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 1
65661: NEG
65662: PUSH
65663: LD_INT 2
65665: NEG
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 0
65673: PUSH
65674: LD_INT 2
65676: NEG
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: LD_INT 1
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 2
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 2
65705: PUSH
65706: LD_INT 2
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 2
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: LD_INT 2
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: NEG
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 2
65746: NEG
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 2
65757: NEG
65758: PUSH
65759: LD_INT 1
65761: NEG
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 1
65769: NEG
65770: PUSH
65771: LD_INT 3
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: LD_INT 2
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 3
65792: PUSH
65793: LD_INT 2
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: LD_INT 3
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 2
65812: NEG
65813: PUSH
65814: LD_INT 1
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 3
65823: NEG
65824: PUSH
65825: LD_INT 1
65827: NEG
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65858: LD_ADDR_VAR 0 33
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: LD_INT 1
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 1
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 0
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 1
65916: NEG
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 1
65927: NEG
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 1
65939: NEG
65940: PUSH
65941: LD_INT 2
65943: NEG
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 1
65951: PUSH
65952: LD_INT 1
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 2
65972: PUSH
65973: LD_INT 1
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 1
65982: PUSH
65983: LD_INT 2
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 1
66002: NEG
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 2
66013: NEG
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 2
66024: NEG
66025: PUSH
66026: LD_INT 1
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 2
66036: NEG
66037: PUSH
66038: LD_INT 2
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 2
66048: NEG
66049: PUSH
66050: LD_INT 3
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 2
66060: PUSH
66061: LD_INT 1
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 3
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 1
66081: PUSH
66082: LD_INT 3
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 1
66091: NEG
66092: PUSH
66093: LD_INT 2
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 3
66102: NEG
66103: PUSH
66104: LD_INT 2
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66137: LD_ADDR_VAR 0 34
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 0
66185: PUSH
66186: LD_INT 1
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 1
66195: NEG
66196: PUSH
66197: LD_INT 0
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: LD_INT 2
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: LD_INT 2
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: LD_INT 1
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: LD_INT 1
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: LD_INT 2
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 1
66282: NEG
66283: PUSH
66284: LD_INT 1
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 2
66293: NEG
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 2
66304: NEG
66305: PUSH
66306: LD_INT 1
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 2
66316: NEG
66317: PUSH
66318: LD_INT 2
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: LD_INT 3
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 1
66340: PUSH
66341: LD_INT 2
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 3
66351: PUSH
66352: LD_INT 2
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 2
66361: PUSH
66362: LD_INT 3
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 2
66371: NEG
66372: PUSH
66373: LD_INT 1
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 3
66382: NEG
66383: PUSH
66384: LD_INT 1
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66417: LD_ADDR_VAR 0 35
66421: PUSH
66422: LD_INT 0
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: LD_INT 1
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 1
66445: PUSH
66446: LD_INT 0
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: LD_INT 1
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: LD_INT 1
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 1
66475: NEG
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 1
66486: NEG
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: LD_INT 1
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 2
66508: NEG
66509: PUSH
66510: LD_INT 1
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66529: LD_ADDR_VAR 0 36
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_INT 1
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 1
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 1
66567: PUSH
66568: LD_INT 1
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: LD_INT 1
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 1
66587: NEG
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 1
66598: NEG
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 1
66610: NEG
66611: PUSH
66612: LD_INT 2
66614: NEG
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: LD_INT 2
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66641: LD_ADDR_VAR 0 37
66645: PUSH
66646: LD_INT 0
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: LD_INT 1
66661: NEG
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 1
66669: PUSH
66670: LD_INT 0
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 1
66679: PUSH
66680: LD_INT 1
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: LD_INT 1
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 1
66699: NEG
66700: PUSH
66701: LD_INT 0
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 1
66710: NEG
66711: PUSH
66712: LD_INT 1
66714: NEG
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 1
66722: PUSH
66723: LD_INT 1
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 1
66733: NEG
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66753: LD_ADDR_VAR 0 38
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: LD_INT 1
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: LD_INT 1
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: NEG
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 1
66822: NEG
66823: PUSH
66824: LD_INT 1
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 2
66834: PUSH
66835: LD_INT 1
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 2
66844: NEG
66845: PUSH
66846: LD_INT 1
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66865: LD_ADDR_VAR 0 39
66869: PUSH
66870: LD_INT 0
66872: PUSH
66873: LD_INT 0
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 0
66882: PUSH
66883: LD_INT 1
66885: NEG
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 1
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 1
66903: PUSH
66904: LD_INT 1
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 0
66913: PUSH
66914: LD_INT 1
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 1
66923: NEG
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 1
66934: NEG
66935: PUSH
66936: LD_INT 1
66938: NEG
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: LD_INT 2
66950: NEG
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 1
66958: PUSH
66959: LD_INT 2
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66977: LD_ADDR_VAR 0 40
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 0
66994: PUSH
66995: LD_INT 1
66997: NEG
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: LD_INT 0
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 1
67015: PUSH
67016: LD_INT 1
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 0
67025: PUSH
67026: LD_INT 1
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 1
67035: NEG
67036: PUSH
67037: LD_INT 0
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 1
67046: NEG
67047: PUSH
67048: LD_INT 1
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 1
67069: NEG
67070: PUSH
67071: LD_INT 1
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67089: LD_ADDR_VAR 0 41
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: LD_INT 1
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 1
67127: PUSH
67128: LD_INT 1
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 1
67147: NEG
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 1
67158: NEG
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 1
67170: NEG
67171: PUSH
67172: LD_INT 2
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: PUSH
67183: LD_INT 1
67185: NEG
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 2
67203: PUSH
67204: LD_INT 1
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 2
67213: PUSH
67214: LD_INT 2
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 1
67223: PUSH
67224: LD_INT 2
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 1
67233: NEG
67234: PUSH
67235: LD_INT 1
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 2
67244: NEG
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 2
67255: NEG
67256: PUSH
67257: LD_INT 1
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 2
67267: NEG
67268: PUSH
67269: LD_INT 2
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 2
67279: NEG
67280: PUSH
67281: LD_INT 3
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 2
67291: PUSH
67292: LD_INT 1
67294: NEG
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 3
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 3
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 3
67322: PUSH
67323: LD_INT 2
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 3
67332: PUSH
67333: LD_INT 3
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: LD_INT 3
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 2
67352: NEG
67353: PUSH
67354: LD_INT 1
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 3
67363: NEG
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 3
67374: NEG
67375: PUSH
67376: LD_INT 1
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 3
67386: NEG
67387: PUSH
67388: LD_INT 2
67390: NEG
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 3
67398: NEG
67399: PUSH
67400: LD_INT 3
67402: NEG
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67439: LD_ADDR_VAR 0 42
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: LD_INT 0
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 0
67456: PUSH
67457: LD_INT 1
67459: NEG
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 1
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 0
67487: PUSH
67488: LD_INT 1
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 1
67497: NEG
67498: PUSH
67499: LD_INT 0
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 1
67508: NEG
67509: PUSH
67510: LD_INT 1
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: NEG
67521: PUSH
67522: LD_INT 2
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 0
67532: PUSH
67533: LD_INT 2
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 1
67543: PUSH
67544: LD_INT 1
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 2
67554: PUSH
67555: LD_INT 1
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 2
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 1
67574: PUSH
67575: LD_INT 2
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: LD_INT 2
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: LD_INT 1
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 2
67605: NEG
67606: PUSH
67607: LD_INT 1
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 2
67617: NEG
67618: PUSH
67619: LD_INT 2
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 2
67629: NEG
67630: PUSH
67631: LD_INT 3
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 1
67641: NEG
67642: PUSH
67643: LD_INT 3
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 1
67664: PUSH
67665: LD_INT 2
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 3
67675: PUSH
67676: LD_INT 2
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 3
67685: PUSH
67686: LD_INT 3
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 2
67695: PUSH
67696: LD_INT 3
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 1
67705: PUSH
67706: LD_INT 3
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: LD_INT 3
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 1
67725: NEG
67726: PUSH
67727: LD_INT 2
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 3
67736: NEG
67737: PUSH
67738: LD_INT 2
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 3
67748: NEG
67749: PUSH
67750: LD_INT 3
67752: NEG
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67789: LD_ADDR_VAR 0 43
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 0
67806: PUSH
67807: LD_INT 1
67809: NEG
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 1
67817: PUSH
67818: LD_INT 0
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 0
67837: PUSH
67838: LD_INT 1
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 1
67847: NEG
67848: PUSH
67849: LD_INT 0
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 1
67870: NEG
67871: PUSH
67872: LD_INT 2
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 0
67882: PUSH
67883: LD_INT 2
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 1
67893: PUSH
67894: LD_INT 1
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 2
67904: PUSH
67905: LD_INT 0
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 2
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: LD_INT 2
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: LD_INT 2
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 1
67944: NEG
67945: PUSH
67946: LD_INT 1
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 2
67955: NEG
67956: PUSH
67957: LD_INT 0
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 2
67966: NEG
67967: PUSH
67968: LD_INT 1
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 1
67978: NEG
67979: PUSH
67980: LD_INT 3
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 0
67990: PUSH
67991: LD_INT 3
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 1
68001: PUSH
68002: LD_INT 2
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 2
68012: PUSH
68013: LD_INT 1
68015: NEG
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 3
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: LD_INT 1
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 1
68043: PUSH
68044: LD_INT 3
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 0
68053: PUSH
68054: LD_INT 3
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 1
68063: NEG
68064: PUSH
68065: LD_INT 2
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 2
68074: NEG
68075: PUSH
68076: LD_INT 1
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 3
68085: NEG
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 3
68096: NEG
68097: PUSH
68098: LD_INT 1
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68137: LD_ADDR_VAR 0 44
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: LD_INT 0
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 0
68154: PUSH
68155: LD_INT 1
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 1
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 1
68175: PUSH
68176: LD_INT 1
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: LD_INT 1
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 1
68195: NEG
68196: PUSH
68197: LD_INT 0
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 1
68206: NEG
68207: PUSH
68208: LD_INT 1
68210: NEG
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: LD_INT 2
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 1
68230: PUSH
68231: LD_INT 1
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 2
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 2
68251: PUSH
68252: LD_INT 1
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 2
68261: PUSH
68262: LD_INT 2
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 1
68271: PUSH
68272: LD_INT 2
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 1
68281: NEG
68282: PUSH
68283: LD_INT 1
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 2
68292: NEG
68293: PUSH
68294: LD_INT 0
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 2
68303: NEG
68304: PUSH
68305: LD_INT 1
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 2
68315: NEG
68316: PUSH
68317: LD_INT 2
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 2
68327: NEG
68328: PUSH
68329: LD_INT 3
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 2
68339: PUSH
68340: LD_INT 1
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 3
68350: PUSH
68351: LD_INT 0
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 3
68360: PUSH
68361: LD_INT 1
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 3
68370: PUSH
68371: LD_INT 2
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 3
68380: PUSH
68381: LD_INT 3
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 2
68390: PUSH
68391: LD_INT 3
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 2
68400: NEG
68401: PUSH
68402: LD_INT 1
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 3
68411: NEG
68412: PUSH
68413: LD_INT 0
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 3
68422: NEG
68423: PUSH
68424: LD_INT 1
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 3
68434: NEG
68435: PUSH
68436: LD_INT 2
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 3
68446: NEG
68447: PUSH
68448: LD_INT 3
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68487: LD_ADDR_VAR 0 45
68491: PUSH
68492: LD_INT 0
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 0
68504: PUSH
68505: LD_INT 1
68507: NEG
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 1
68515: PUSH
68516: LD_INT 0
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 1
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 0
68535: PUSH
68536: LD_INT 1
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 1
68545: NEG
68546: PUSH
68547: LD_INT 0
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 1
68556: NEG
68557: PUSH
68558: LD_INT 1
68560: NEG
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 1
68568: NEG
68569: PUSH
68570: LD_INT 2
68572: NEG
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: LD_INT 2
68583: NEG
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 1
68591: PUSH
68592: LD_INT 1
68594: NEG
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 2
68602: PUSH
68603: LD_INT 1
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 2
68612: PUSH
68613: LD_INT 2
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 1
68622: PUSH
68623: LD_INT 2
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 1
68642: NEG
68643: PUSH
68644: LD_INT 1
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 2
68653: NEG
68654: PUSH
68655: LD_INT 1
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 2
68665: NEG
68666: PUSH
68667: LD_INT 2
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 2
68677: NEG
68678: PUSH
68679: LD_INT 3
68681: NEG
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 1
68689: NEG
68690: PUSH
68691: LD_INT 3
68693: NEG
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 0
68701: PUSH
68702: LD_INT 3
68704: NEG
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 1
68712: PUSH
68713: LD_INT 2
68715: NEG
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 3
68723: PUSH
68724: LD_INT 2
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 3
68733: PUSH
68734: LD_INT 3
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 2
68743: PUSH
68744: LD_INT 3
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 1
68753: PUSH
68754: LD_INT 3
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 0
68763: PUSH
68764: LD_INT 3
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 1
68773: NEG
68774: PUSH
68775: LD_INT 2
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 3
68784: NEG
68785: PUSH
68786: LD_INT 2
68788: NEG
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 3
68796: NEG
68797: PUSH
68798: LD_INT 3
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68837: LD_ADDR_VAR 0 46
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: LD_INT 0
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 0
68854: PUSH
68855: LD_INT 1
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 1
68865: PUSH
68866: LD_INT 0
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 1
68875: PUSH
68876: LD_INT 1
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 0
68885: PUSH
68886: LD_INT 1
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 1
68895: NEG
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 1
68906: NEG
68907: PUSH
68908: LD_INT 1
68910: NEG
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 1
68918: NEG
68919: PUSH
68920: LD_INT 2
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 0
68930: PUSH
68931: LD_INT 2
68933: NEG
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 1
68941: PUSH
68942: LD_INT 1
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 2
68952: PUSH
68953: LD_INT 0
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 2
68962: PUSH
68963: LD_INT 1
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 1
68972: PUSH
68973: LD_INT 2
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 0
68982: PUSH
68983: LD_INT 2
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 1
68992: NEG
68993: PUSH
68994: LD_INT 1
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 2
69003: NEG
69004: PUSH
69005: LD_INT 0
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 2
69014: NEG
69015: PUSH
69016: LD_INT 1
69018: NEG
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 1
69026: NEG
69027: PUSH
69028: LD_INT 3
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 0
69038: PUSH
69039: LD_INT 3
69041: NEG
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 1
69049: PUSH
69050: LD_INT 2
69052: NEG
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 2
69060: PUSH
69061: LD_INT 1
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 3
69071: PUSH
69072: LD_INT 0
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 3
69081: PUSH
69082: LD_INT 1
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 1
69091: PUSH
69092: LD_INT 3
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: LD_INT 3
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 1
69111: NEG
69112: PUSH
69113: LD_INT 2
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 2
69122: NEG
69123: PUSH
69124: LD_INT 1
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 3
69133: NEG
69134: PUSH
69135: LD_INT 0
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 3
69144: NEG
69145: PUSH
69146: LD_INT 1
69148: NEG
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69185: LD_ADDR_VAR 0 47
69189: PUSH
69190: LD_INT 0
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: LD_INT 1
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 1
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 1
69223: PUSH
69224: LD_INT 1
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 0
69233: PUSH
69234: LD_INT 1
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 1
69243: NEG
69244: PUSH
69245: LD_INT 0
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 1
69254: NEG
69255: PUSH
69256: LD_INT 1
69258: NEG
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 1
69266: NEG
69267: PUSH
69268: LD_INT 2
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 0
69278: PUSH
69279: LD_INT 2
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 1
69289: PUSH
69290: LD_INT 1
69292: NEG
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 2
69300: NEG
69301: PUSH
69302: LD_INT 1
69304: NEG
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 2
69312: NEG
69313: PUSH
69314: LD_INT 2
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69336: LD_ADDR_VAR 0 48
69340: PUSH
69341: LD_INT 0
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 0
69353: PUSH
69354: LD_INT 1
69356: NEG
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 1
69364: PUSH
69365: LD_INT 0
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 1
69374: PUSH
69375: LD_INT 1
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: LD_INT 1
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 1
69394: NEG
69395: PUSH
69396: LD_INT 0
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 1
69405: NEG
69406: PUSH
69407: LD_INT 1
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 1
69417: NEG
69418: PUSH
69419: LD_INT 2
69421: NEG
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 0
69429: PUSH
69430: LD_INT 2
69432: NEG
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 1
69440: PUSH
69441: LD_INT 1
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 2
69451: PUSH
69452: LD_INT 0
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 2
69461: PUSH
69462: LD_INT 1
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69483: LD_ADDR_VAR 0 49
69487: PUSH
69488: LD_INT 0
69490: PUSH
69491: LD_INT 0
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 0
69500: PUSH
69501: LD_INT 1
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 1
69511: PUSH
69512: LD_INT 0
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 1
69521: PUSH
69522: LD_INT 1
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 0
69531: PUSH
69532: LD_INT 1
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 1
69541: NEG
69542: PUSH
69543: LD_INT 0
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 1
69552: NEG
69553: PUSH
69554: LD_INT 1
69556: NEG
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 1
69564: PUSH
69565: LD_INT 1
69567: NEG
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 2
69575: PUSH
69576: LD_INT 0
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 2
69585: PUSH
69586: LD_INT 1
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: LD_INT 2
69595: PUSH
69596: LD_INT 2
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 1
69605: PUSH
69606: LD_INT 2
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69627: LD_ADDR_VAR 0 50
69631: PUSH
69632: LD_INT 0
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 0
69644: PUSH
69645: LD_INT 1
69647: NEG
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 1
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 1
69665: PUSH
69666: LD_INT 1
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 0
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 1
69685: NEG
69686: PUSH
69687: LD_INT 0
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 1
69696: NEG
69697: PUSH
69698: LD_INT 1
69700: NEG
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 2
69708: PUSH
69709: LD_INT 1
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 2
69718: PUSH
69719: LD_INT 2
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 1
69728: PUSH
69729: LD_INT 2
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 0
69738: PUSH
69739: LD_INT 2
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 1
69748: NEG
69749: PUSH
69750: LD_INT 1
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69771: LD_ADDR_VAR 0 51
69775: PUSH
69776: LD_INT 0
69778: PUSH
69779: LD_INT 0
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 0
69788: PUSH
69789: LD_INT 1
69791: NEG
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 1
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 1
69809: PUSH
69810: LD_INT 1
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 0
69819: PUSH
69820: LD_INT 1
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 1
69829: NEG
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 1
69840: NEG
69841: PUSH
69842: LD_INT 1
69844: NEG
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 1
69852: PUSH
69853: LD_INT 2
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 0
69862: PUSH
69863: LD_INT 2
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 1
69872: NEG
69873: PUSH
69874: LD_INT 1
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 2
69883: NEG
69884: PUSH
69885: LD_INT 0
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 2
69894: NEG
69895: PUSH
69896: LD_INT 1
69898: NEG
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69918: LD_ADDR_VAR 0 52
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: LD_INT 0
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 0
69935: PUSH
69936: LD_INT 1
69938: NEG
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 1
69946: PUSH
69947: LD_INT 0
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 1
69956: PUSH
69957: LD_INT 1
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: LD_INT 1
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 1
69976: NEG
69977: PUSH
69978: LD_INT 0
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 1
69987: NEG
69988: PUSH
69989: LD_INT 1
69991: NEG
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 1
69999: NEG
70000: PUSH
70001: LD_INT 2
70003: NEG
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 1
70011: NEG
70012: PUSH
70013: LD_INT 1
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 2
70022: NEG
70023: PUSH
70024: LD_INT 0
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 2
70033: NEG
70034: PUSH
70035: LD_INT 1
70037: NEG
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 2
70045: NEG
70046: PUSH
70047: LD_INT 2
70049: NEG
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70069: LD_ADDR_VAR 0 53
70073: PUSH
70074: LD_INT 0
70076: PUSH
70077: LD_INT 0
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 0
70086: PUSH
70087: LD_INT 1
70089: NEG
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 1
70097: PUSH
70098: LD_INT 0
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 1
70107: PUSH
70108: LD_INT 1
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 0
70117: PUSH
70118: LD_INT 1
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 1
70127: NEG
70128: PUSH
70129: LD_INT 0
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 1
70138: NEG
70139: PUSH
70140: LD_INT 1
70142: NEG
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 1
70150: NEG
70151: PUSH
70152: LD_INT 2
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 0
70162: PUSH
70163: LD_INT 2
70165: NEG
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 1
70173: PUSH
70174: LD_INT 1
70176: NEG
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 2
70184: PUSH
70185: LD_INT 0
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 2
70194: PUSH
70195: LD_INT 1
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 2
70204: PUSH
70205: LD_INT 2
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 1
70214: PUSH
70215: LD_INT 2
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 0
70224: PUSH
70225: LD_INT 2
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 1
70234: NEG
70235: PUSH
70236: LD_INT 1
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 2
70245: NEG
70246: PUSH
70247: LD_INT 0
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 2
70256: NEG
70257: PUSH
70258: LD_INT 1
70260: NEG
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 2
70268: NEG
70269: PUSH
70270: LD_INT 2
70272: NEG
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70299: LD_ADDR_VAR 0 54
70303: PUSH
70304: LD_INT 0
70306: PUSH
70307: LD_INT 0
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 0
70316: PUSH
70317: LD_INT 1
70319: NEG
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 1
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 1
70337: PUSH
70338: LD_INT 1
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 0
70347: PUSH
70348: LD_INT 1
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 1
70357: NEG
70358: PUSH
70359: LD_INT 0
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 1
70368: NEG
70369: PUSH
70370: LD_INT 1
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 1
70380: NEG
70381: PUSH
70382: LD_INT 2
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 0
70392: PUSH
70393: LD_INT 2
70395: NEG
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 1
70403: PUSH
70404: LD_INT 1
70406: NEG
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 2
70414: PUSH
70415: LD_INT 0
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 2
70424: PUSH
70425: LD_INT 1
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 2
70434: PUSH
70435: LD_INT 2
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 1
70444: PUSH
70445: LD_INT 2
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 0
70454: PUSH
70455: LD_INT 2
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 1
70464: NEG
70465: PUSH
70466: LD_INT 1
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 2
70475: NEG
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 2
70486: NEG
70487: PUSH
70488: LD_INT 1
70490: NEG
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: LD_INT 2
70498: NEG
70499: PUSH
70500: LD_INT 2
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70529: LD_ADDR_VAR 0 55
70533: PUSH
70534: LD_INT 0
70536: PUSH
70537: LD_INT 0
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 0
70546: PUSH
70547: LD_INT 1
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 1
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 1
70567: PUSH
70568: LD_INT 1
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 0
70577: PUSH
70578: LD_INT 1
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 1
70587: NEG
70588: PUSH
70589: LD_INT 0
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 1
70598: NEG
70599: PUSH
70600: LD_INT 1
70602: NEG
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 1
70610: NEG
70611: PUSH
70612: LD_INT 2
70614: NEG
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 2
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 1
70633: PUSH
70634: LD_INT 1
70636: NEG
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 2
70644: PUSH
70645: LD_INT 0
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 2
70654: PUSH
70655: LD_INT 1
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 2
70664: PUSH
70665: LD_INT 2
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 1
70674: PUSH
70675: LD_INT 2
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 0
70684: PUSH
70685: LD_INT 2
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 1
70694: NEG
70695: PUSH
70696: LD_INT 1
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 2
70705: NEG
70706: PUSH
70707: LD_INT 0
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 2
70716: NEG
70717: PUSH
70718: LD_INT 1
70720: NEG
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 2
70728: NEG
70729: PUSH
70730: LD_INT 2
70732: NEG
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70759: LD_ADDR_VAR 0 56
70763: PUSH
70764: LD_INT 0
70766: PUSH
70767: LD_INT 0
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 0
70776: PUSH
70777: LD_INT 1
70779: NEG
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 1
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 1
70797: PUSH
70798: LD_INT 1
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 0
70807: PUSH
70808: LD_INT 1
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 1
70817: NEG
70818: PUSH
70819: LD_INT 0
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 1
70828: NEG
70829: PUSH
70830: LD_INT 1
70832: NEG
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 1
70840: NEG
70841: PUSH
70842: LD_INT 2
70844: NEG
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 0
70852: PUSH
70853: LD_INT 2
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 1
70863: PUSH
70864: LD_INT 1
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 2
70874: PUSH
70875: LD_INT 0
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 2
70884: PUSH
70885: LD_INT 1
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 2
70894: PUSH
70895: LD_INT 2
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 1
70904: PUSH
70905: LD_INT 2
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 0
70914: PUSH
70915: LD_INT 2
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 1
70924: NEG
70925: PUSH
70926: LD_INT 1
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 2
70935: NEG
70936: PUSH
70937: LD_INT 0
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 2
70946: NEG
70947: PUSH
70948: LD_INT 1
70950: NEG
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 2
70958: NEG
70959: PUSH
70960: LD_INT 2
70962: NEG
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70989: LD_ADDR_VAR 0 57
70993: PUSH
70994: LD_INT 0
70996: PUSH
70997: LD_INT 0
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 0
71006: PUSH
71007: LD_INT 1
71009: NEG
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 1
71017: PUSH
71018: LD_INT 0
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 1
71027: PUSH
71028: LD_INT 1
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 0
71037: PUSH
71038: LD_INT 1
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 1
71047: NEG
71048: PUSH
71049: LD_INT 0
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 1
71058: NEG
71059: PUSH
71060: LD_INT 1
71062: NEG
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 1
71070: NEG
71071: PUSH
71072: LD_INT 2
71074: NEG
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 0
71082: PUSH
71083: LD_INT 2
71085: NEG
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 1
71093: PUSH
71094: LD_INT 1
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 2
71104: PUSH
71105: LD_INT 0
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 2
71114: PUSH
71115: LD_INT 1
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 2
71124: PUSH
71125: LD_INT 2
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 1
71134: PUSH
71135: LD_INT 2
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 0
71144: PUSH
71145: LD_INT 2
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: LD_INT 1
71154: NEG
71155: PUSH
71156: LD_INT 1
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 2
71165: NEG
71166: PUSH
71167: LD_INT 0
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 2
71176: NEG
71177: PUSH
71178: LD_INT 1
71180: NEG
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 2
71188: NEG
71189: PUSH
71190: LD_INT 2
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71219: LD_ADDR_VAR 0 58
71223: PUSH
71224: LD_INT 0
71226: PUSH
71227: LD_INT 0
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 0
71236: PUSH
71237: LD_INT 1
71239: NEG
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 1
71247: PUSH
71248: LD_INT 0
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 1
71257: PUSH
71258: LD_INT 1
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 0
71267: PUSH
71268: LD_INT 1
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 1
71277: NEG
71278: PUSH
71279: LD_INT 0
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 1
71288: NEG
71289: PUSH
71290: LD_INT 1
71292: NEG
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 1
71300: NEG
71301: PUSH
71302: LD_INT 2
71304: NEG
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 0
71312: PUSH
71313: LD_INT 2
71315: NEG
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 1
71323: PUSH
71324: LD_INT 1
71326: NEG
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 2
71334: PUSH
71335: LD_INT 0
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 2
71344: PUSH
71345: LD_INT 1
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 2
71354: PUSH
71355: LD_INT 2
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 1
71364: PUSH
71365: LD_INT 2
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 0
71374: PUSH
71375: LD_INT 2
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 1
71384: NEG
71385: PUSH
71386: LD_INT 1
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PUSH
71393: LD_INT 2
71395: NEG
71396: PUSH
71397: LD_INT 0
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 2
71406: NEG
71407: PUSH
71408: LD_INT 1
71410: NEG
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 2
71418: NEG
71419: PUSH
71420: LD_INT 2
71422: NEG
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71449: LD_ADDR_VAR 0 59
71453: PUSH
71454: LD_INT 0
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 0
71466: PUSH
71467: LD_INT 1
71469: NEG
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 1
71477: PUSH
71478: LD_INT 0
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 1
71487: PUSH
71488: LD_INT 1
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 0
71497: PUSH
71498: LD_INT 1
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 1
71507: NEG
71508: PUSH
71509: LD_INT 0
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 1
71518: NEG
71519: PUSH
71520: LD_INT 1
71522: NEG
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71537: LD_ADDR_VAR 0 60
71541: PUSH
71542: LD_INT 0
71544: PUSH
71545: LD_INT 0
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 0
71554: PUSH
71555: LD_INT 1
71557: NEG
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 1
71565: PUSH
71566: LD_INT 0
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 1
71575: PUSH
71576: LD_INT 1
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 0
71585: PUSH
71586: LD_INT 1
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 1
71595: NEG
71596: PUSH
71597: LD_INT 0
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 1
71606: NEG
71607: PUSH
71608: LD_INT 1
71610: NEG
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71625: LD_ADDR_VAR 0 61
71629: PUSH
71630: LD_INT 0
71632: PUSH
71633: LD_INT 0
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 0
71642: PUSH
71643: LD_INT 1
71645: NEG
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PUSH
71651: LD_INT 1
71653: PUSH
71654: LD_INT 0
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 1
71663: PUSH
71664: LD_INT 1
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 0
71673: PUSH
71674: LD_INT 1
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 1
71683: NEG
71684: PUSH
71685: LD_INT 0
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 1
71694: NEG
71695: PUSH
71696: LD_INT 1
71698: NEG
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71713: LD_ADDR_VAR 0 62
71717: PUSH
71718: LD_INT 0
71720: PUSH
71721: LD_INT 0
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 0
71730: PUSH
71731: LD_INT 1
71733: NEG
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 1
71741: PUSH
71742: LD_INT 0
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PUSH
71749: LD_INT 1
71751: PUSH
71752: LD_INT 1
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 0
71761: PUSH
71762: LD_INT 1
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: PUSH
71769: LD_INT 1
71771: NEG
71772: PUSH
71773: LD_INT 0
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 1
71782: NEG
71783: PUSH
71784: LD_INT 1
71786: NEG
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71801: LD_ADDR_VAR 0 63
71805: PUSH
71806: LD_INT 0
71808: PUSH
71809: LD_INT 0
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 0
71818: PUSH
71819: LD_INT 1
71821: NEG
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 1
71829: PUSH
71830: LD_INT 0
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 1
71839: PUSH
71840: LD_INT 1
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 0
71849: PUSH
71850: LD_INT 1
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 1
71859: NEG
71860: PUSH
71861: LD_INT 0
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 1
71870: NEG
71871: PUSH
71872: LD_INT 1
71874: NEG
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71889: LD_ADDR_VAR 0 64
71893: PUSH
71894: LD_INT 0
71896: PUSH
71897: LD_INT 0
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 0
71906: PUSH
71907: LD_INT 1
71909: NEG
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 1
71917: PUSH
71918: LD_INT 0
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 1
71927: PUSH
71928: LD_INT 1
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 0
71937: PUSH
71938: LD_INT 1
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: LD_INT 1
71947: NEG
71948: PUSH
71949: LD_INT 0
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 1
71958: NEG
71959: PUSH
71960: LD_INT 1
71962: NEG
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: ST_TO_ADDR
// end ; 1 :
71977: GO 77874
71979: LD_INT 1
71981: DOUBLE
71982: EQUAL
71983: IFTRUE 71987
71985: GO 74610
71987: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71988: LD_ADDR_VAR 0 11
71992: PUSH
71993: LD_INT 1
71995: NEG
71996: PUSH
71997: LD_INT 3
71999: NEG
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 0
72007: PUSH
72008: LD_INT 3
72010: NEG
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 1
72018: PUSH
72019: LD_INT 2
72021: NEG
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: LIST
72031: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72032: LD_ADDR_VAR 0 12
72036: PUSH
72037: LD_INT 2
72039: PUSH
72040: LD_INT 1
72042: NEG
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PUSH
72048: LD_INT 3
72050: PUSH
72051: LD_INT 0
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: PUSH
72058: LD_INT 3
72060: PUSH
72061: LD_INT 1
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: LIST
72072: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72073: LD_ADDR_VAR 0 13
72077: PUSH
72078: LD_INT 3
72080: PUSH
72081: LD_INT 2
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_INT 3
72090: PUSH
72091: LD_INT 3
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 2
72100: PUSH
72101: LD_INT 3
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: LIST
72112: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72113: LD_ADDR_VAR 0 14
72117: PUSH
72118: LD_INT 1
72120: PUSH
72121: LD_INT 3
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 0
72130: PUSH
72131: LD_INT 3
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 1
72140: NEG
72141: PUSH
72142: LD_INT 2
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: LIST
72153: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72154: LD_ADDR_VAR 0 15
72158: PUSH
72159: LD_INT 2
72161: NEG
72162: PUSH
72163: LD_INT 1
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 3
72172: NEG
72173: PUSH
72174: LD_INT 0
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_INT 3
72183: NEG
72184: PUSH
72185: LD_INT 1
72187: NEG
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: LIST
72197: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72198: LD_ADDR_VAR 0 16
72202: PUSH
72203: LD_INT 2
72205: NEG
72206: PUSH
72207: LD_INT 3
72209: NEG
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 3
72217: NEG
72218: PUSH
72219: LD_INT 2
72221: NEG
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 3
72229: NEG
72230: PUSH
72231: LD_INT 3
72233: NEG
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: LIST
72243: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72244: LD_ADDR_VAR 0 17
72248: PUSH
72249: LD_INT 1
72251: NEG
72252: PUSH
72253: LD_INT 3
72255: NEG
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: LD_INT 0
72263: PUSH
72264: LD_INT 3
72266: NEG
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 1
72274: PUSH
72275: LD_INT 2
72277: NEG
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: LIST
72287: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72288: LD_ADDR_VAR 0 18
72292: PUSH
72293: LD_INT 2
72295: PUSH
72296: LD_INT 1
72298: NEG
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 3
72306: PUSH
72307: LD_INT 0
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 3
72316: PUSH
72317: LD_INT 1
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: LIST
72328: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72329: LD_ADDR_VAR 0 19
72333: PUSH
72334: LD_INT 3
72336: PUSH
72337: LD_INT 2
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 3
72346: PUSH
72347: LD_INT 3
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 2
72356: PUSH
72357: LD_INT 3
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: LIST
72368: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72369: LD_ADDR_VAR 0 20
72373: PUSH
72374: LD_INT 1
72376: PUSH
72377: LD_INT 3
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 0
72386: PUSH
72387: LD_INT 3
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_INT 1
72396: NEG
72397: PUSH
72398: LD_INT 2
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: LIST
72409: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72410: LD_ADDR_VAR 0 21
72414: PUSH
72415: LD_INT 2
72417: NEG
72418: PUSH
72419: LD_INT 1
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: PUSH
72426: LD_INT 3
72428: NEG
72429: PUSH
72430: LD_INT 0
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 3
72439: NEG
72440: PUSH
72441: LD_INT 1
72443: NEG
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: LIST
72453: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72454: LD_ADDR_VAR 0 22
72458: PUSH
72459: LD_INT 2
72461: NEG
72462: PUSH
72463: LD_INT 3
72465: NEG
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 3
72473: NEG
72474: PUSH
72475: LD_INT 2
72477: NEG
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: PUSH
72483: LD_INT 3
72485: NEG
72486: PUSH
72487: LD_INT 3
72489: NEG
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: LIST
72499: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
72500: LD_ADDR_VAR 0 23
72504: PUSH
72505: LD_INT 0
72507: PUSH
72508: LD_INT 3
72510: NEG
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PUSH
72516: LD_INT 1
72518: NEG
72519: PUSH
72520: LD_INT 4
72522: NEG
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 1
72530: PUSH
72531: LD_INT 3
72533: NEG
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: LIST
72543: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
72544: LD_ADDR_VAR 0 24
72548: PUSH
72549: LD_INT 3
72551: PUSH
72552: LD_INT 0
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 3
72561: PUSH
72562: LD_INT 1
72564: NEG
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: PUSH
72570: LD_INT 4
72572: PUSH
72573: LD_INT 1
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: LIST
72584: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
72585: LD_ADDR_VAR 0 25
72589: PUSH
72590: LD_INT 3
72592: PUSH
72593: LD_INT 3
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: LD_INT 4
72602: PUSH
72603: LD_INT 3
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 3
72612: PUSH
72613: LD_INT 4
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: LIST
72624: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
72625: LD_ADDR_VAR 0 26
72629: PUSH
72630: LD_INT 0
72632: PUSH
72633: LD_INT 3
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 1
72642: PUSH
72643: LD_INT 4
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 1
72652: NEG
72653: PUSH
72654: LD_INT 3
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: LIST
72665: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
72666: LD_ADDR_VAR 0 27
72670: PUSH
72671: LD_INT 3
72673: NEG
72674: PUSH
72675: LD_INT 0
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PUSH
72682: LD_INT 3
72684: NEG
72685: PUSH
72686: LD_INT 1
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 4
72695: NEG
72696: PUSH
72697: LD_INT 1
72699: NEG
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: LIST
72709: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
72710: LD_ADDR_VAR 0 28
72714: PUSH
72715: LD_INT 3
72717: NEG
72718: PUSH
72719: LD_INT 3
72721: NEG
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 3
72729: NEG
72730: PUSH
72731: LD_INT 4
72733: NEG
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: LD_INT 4
72741: NEG
72742: PUSH
72743: LD_INT 3
72745: NEG
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: LIST
72755: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
72756: LD_ADDR_VAR 0 29
72760: PUSH
72761: LD_INT 1
72763: NEG
72764: PUSH
72765: LD_INT 3
72767: NEG
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 0
72775: PUSH
72776: LD_INT 3
72778: NEG
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 1
72786: PUSH
72787: LD_INT 2
72789: NEG
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 1
72797: NEG
72798: PUSH
72799: LD_INT 4
72801: NEG
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 0
72809: PUSH
72810: LD_INT 4
72812: NEG
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 1
72820: PUSH
72821: LD_INT 3
72823: NEG
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 1
72831: NEG
72832: PUSH
72833: LD_INT 5
72835: NEG
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 0
72843: PUSH
72844: LD_INT 5
72846: NEG
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 1
72854: PUSH
72855: LD_INT 4
72857: NEG
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 1
72865: NEG
72866: PUSH
72867: LD_INT 6
72869: NEG
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 0
72877: PUSH
72878: LD_INT 6
72880: NEG
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 1
72888: PUSH
72889: LD_INT 5
72891: NEG
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
72911: LD_ADDR_VAR 0 30
72915: PUSH
72916: LD_INT 2
72918: PUSH
72919: LD_INT 1
72921: NEG
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: LD_INT 3
72929: PUSH
72930: LD_INT 0
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 3
72939: PUSH
72940: LD_INT 1
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 3
72949: PUSH
72950: LD_INT 1
72952: NEG
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 4
72960: PUSH
72961: LD_INT 0
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 4
72970: PUSH
72971: LD_INT 1
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 4
72980: PUSH
72981: LD_INT 1
72983: NEG
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: LD_INT 5
72991: PUSH
72992: LD_INT 0
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: LD_INT 5
73001: PUSH
73002: LD_INT 1
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: PUSH
73009: LD_INT 5
73011: PUSH
73012: LD_INT 1
73014: NEG
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: PUSH
73020: LD_INT 6
73022: PUSH
73023: LD_INT 0
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 6
73032: PUSH
73033: LD_INT 1
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
73054: LD_ADDR_VAR 0 31
73058: PUSH
73059: LD_INT 3
73061: PUSH
73062: LD_INT 2
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 3
73071: PUSH
73072: LD_INT 3
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 2
73081: PUSH
73082: LD_INT 3
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 4
73091: PUSH
73092: LD_INT 3
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 4
73101: PUSH
73102: LD_INT 4
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 3
73111: PUSH
73112: LD_INT 4
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 5
73121: PUSH
73122: LD_INT 4
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 5
73131: PUSH
73132: LD_INT 5
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: PUSH
73139: LD_INT 4
73141: PUSH
73142: LD_INT 5
73144: PUSH
73145: EMPTY
73146: LIST
73147: LIST
73148: PUSH
73149: LD_INT 6
73151: PUSH
73152: LD_INT 5
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: LD_INT 6
73161: PUSH
73162: LD_INT 6
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PUSH
73169: LD_INT 5
73171: PUSH
73172: LD_INT 6
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
73193: LD_ADDR_VAR 0 32
73197: PUSH
73198: LD_INT 1
73200: PUSH
73201: LD_INT 3
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 0
73210: PUSH
73211: LD_INT 3
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PUSH
73218: LD_INT 1
73220: NEG
73221: PUSH
73222: LD_INT 2
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 1
73231: PUSH
73232: LD_INT 4
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: LD_INT 0
73241: PUSH
73242: LD_INT 4
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: PUSH
73249: LD_INT 1
73251: NEG
73252: PUSH
73253: LD_INT 3
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 1
73262: PUSH
73263: LD_INT 5
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: LD_INT 0
73272: PUSH
73273: LD_INT 5
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: LD_INT 1
73282: NEG
73283: PUSH
73284: LD_INT 4
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 1
73293: PUSH
73294: LD_INT 6
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 0
73303: PUSH
73304: LD_INT 6
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: LD_INT 1
73313: NEG
73314: PUSH
73315: LD_INT 5
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
73336: LD_ADDR_VAR 0 33
73340: PUSH
73341: LD_INT 2
73343: NEG
73344: PUSH
73345: LD_INT 1
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_INT 3
73354: NEG
73355: PUSH
73356: LD_INT 0
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: PUSH
73363: LD_INT 3
73365: NEG
73366: PUSH
73367: LD_INT 1
73369: NEG
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 3
73377: NEG
73378: PUSH
73379: LD_INT 1
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 4
73388: NEG
73389: PUSH
73390: LD_INT 0
73392: PUSH
73393: EMPTY
73394: LIST
73395: LIST
73396: PUSH
73397: LD_INT 4
73399: NEG
73400: PUSH
73401: LD_INT 1
73403: NEG
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: PUSH
73409: LD_INT 4
73411: NEG
73412: PUSH
73413: LD_INT 1
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PUSH
73420: LD_INT 5
73422: NEG
73423: PUSH
73424: LD_INT 0
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 5
73433: NEG
73434: PUSH
73435: LD_INT 1
73437: NEG
73438: PUSH
73439: EMPTY
73440: LIST
73441: LIST
73442: PUSH
73443: LD_INT 5
73445: NEG
73446: PUSH
73447: LD_INT 1
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PUSH
73454: LD_INT 6
73456: NEG
73457: PUSH
73458: LD_INT 0
73460: PUSH
73461: EMPTY
73462: LIST
73463: LIST
73464: PUSH
73465: LD_INT 6
73467: NEG
73468: PUSH
73469: LD_INT 1
73471: NEG
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: LIST
73481: LIST
73482: LIST
73483: LIST
73484: LIST
73485: LIST
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
73491: LD_ADDR_VAR 0 34
73495: PUSH
73496: LD_INT 2
73498: NEG
73499: PUSH
73500: LD_INT 3
73502: NEG
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: LD_INT 3
73510: NEG
73511: PUSH
73512: LD_INT 2
73514: NEG
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PUSH
73520: LD_INT 3
73522: NEG
73523: PUSH
73524: LD_INT 3
73526: NEG
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: LD_INT 3
73534: NEG
73535: PUSH
73536: LD_INT 4
73538: NEG
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 4
73546: NEG
73547: PUSH
73548: LD_INT 3
73550: NEG
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 4
73558: NEG
73559: PUSH
73560: LD_INT 4
73562: NEG
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 4
73570: NEG
73571: PUSH
73572: LD_INT 5
73574: NEG
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PUSH
73580: LD_INT 5
73582: NEG
73583: PUSH
73584: LD_INT 4
73586: NEG
73587: PUSH
73588: EMPTY
73589: LIST
73590: LIST
73591: PUSH
73592: LD_INT 5
73594: NEG
73595: PUSH
73596: LD_INT 5
73598: NEG
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PUSH
73604: LD_INT 5
73606: NEG
73607: PUSH
73608: LD_INT 6
73610: NEG
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: LD_INT 6
73618: NEG
73619: PUSH
73620: LD_INT 5
73622: NEG
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 6
73630: NEG
73631: PUSH
73632: LD_INT 6
73634: NEG
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: LIST
73653: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
73654: LD_ADDR_VAR 0 41
73658: PUSH
73659: LD_INT 0
73661: PUSH
73662: LD_INT 2
73664: NEG
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PUSH
73670: LD_INT 1
73672: NEG
73673: PUSH
73674: LD_INT 3
73676: NEG
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: PUSH
73682: LD_INT 1
73684: PUSH
73685: LD_INT 2
73687: NEG
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: LIST
73697: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
73698: LD_ADDR_VAR 0 42
73702: PUSH
73703: LD_INT 2
73705: PUSH
73706: LD_INT 0
73708: PUSH
73709: EMPTY
73710: LIST
73711: LIST
73712: PUSH
73713: LD_INT 2
73715: PUSH
73716: LD_INT 1
73718: NEG
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: PUSH
73724: LD_INT 3
73726: PUSH
73727: LD_INT 1
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: LIST
73738: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
73739: LD_ADDR_VAR 0 43
73743: PUSH
73744: LD_INT 2
73746: PUSH
73747: LD_INT 2
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: PUSH
73754: LD_INT 3
73756: PUSH
73757: LD_INT 2
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PUSH
73764: LD_INT 2
73766: PUSH
73767: LD_INT 3
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: LIST
73778: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
73779: LD_ADDR_VAR 0 44
73783: PUSH
73784: LD_INT 0
73786: PUSH
73787: LD_INT 2
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: PUSH
73794: LD_INT 1
73796: PUSH
73797: LD_INT 3
73799: PUSH
73800: EMPTY
73801: LIST
73802: LIST
73803: PUSH
73804: LD_INT 1
73806: NEG
73807: PUSH
73808: LD_INT 2
73810: PUSH
73811: EMPTY
73812: LIST
73813: LIST
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: LIST
73819: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73820: LD_ADDR_VAR 0 45
73824: PUSH
73825: LD_INT 2
73827: NEG
73828: PUSH
73829: LD_INT 0
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: LD_INT 2
73838: NEG
73839: PUSH
73840: LD_INT 1
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: LD_INT 3
73849: NEG
73850: PUSH
73851: LD_INT 1
73853: NEG
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: PUSH
73859: EMPTY
73860: LIST
73861: LIST
73862: LIST
73863: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
73864: LD_ADDR_VAR 0 46
73868: PUSH
73869: LD_INT 2
73871: NEG
73872: PUSH
73873: LD_INT 2
73875: NEG
73876: PUSH
73877: EMPTY
73878: LIST
73879: LIST
73880: PUSH
73881: LD_INT 2
73883: NEG
73884: PUSH
73885: LD_INT 3
73887: NEG
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: PUSH
73893: LD_INT 3
73895: NEG
73896: PUSH
73897: LD_INT 2
73899: NEG
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: LIST
73909: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
73910: LD_ADDR_VAR 0 47
73914: PUSH
73915: LD_INT 2
73917: NEG
73918: PUSH
73919: LD_INT 3
73921: NEG
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: LD_INT 1
73929: NEG
73930: PUSH
73931: LD_INT 3
73933: NEG
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73943: LD_ADDR_VAR 0 48
73947: PUSH
73948: LD_INT 1
73950: PUSH
73951: LD_INT 2
73953: NEG
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PUSH
73959: LD_INT 2
73961: PUSH
73962: LD_INT 1
73964: NEG
73965: PUSH
73966: EMPTY
73967: LIST
73968: LIST
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
73974: LD_ADDR_VAR 0 49
73978: PUSH
73979: LD_INT 3
73981: PUSH
73982: LD_INT 1
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: LD_INT 3
73991: PUSH
73992: LD_INT 2
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: EMPTY
74000: LIST
74001: LIST
74002: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
74003: LD_ADDR_VAR 0 50
74007: PUSH
74008: LD_INT 2
74010: PUSH
74011: LD_INT 3
74013: PUSH
74014: EMPTY
74015: LIST
74016: LIST
74017: PUSH
74018: LD_INT 1
74020: PUSH
74021: LD_INT 3
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
74032: LD_ADDR_VAR 0 51
74036: PUSH
74037: LD_INT 1
74039: NEG
74040: PUSH
74041: LD_INT 2
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: LD_INT 2
74050: NEG
74051: PUSH
74052: LD_INT 1
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74063: LD_ADDR_VAR 0 52
74067: PUSH
74068: LD_INT 3
74070: NEG
74071: PUSH
74072: LD_INT 1
74074: NEG
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: PUSH
74080: LD_INT 3
74082: NEG
74083: PUSH
74084: LD_INT 2
74086: NEG
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74096: LD_ADDR_VAR 0 53
74100: PUSH
74101: LD_INT 1
74103: NEG
74104: PUSH
74105: LD_INT 3
74107: NEG
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: PUSH
74113: LD_INT 0
74115: PUSH
74116: LD_INT 3
74118: NEG
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PUSH
74124: LD_INT 1
74126: PUSH
74127: LD_INT 2
74129: NEG
74130: PUSH
74131: EMPTY
74132: LIST
74133: LIST
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: LIST
74139: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74140: LD_ADDR_VAR 0 54
74144: PUSH
74145: LD_INT 2
74147: PUSH
74148: LD_INT 1
74150: NEG
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 3
74158: PUSH
74159: LD_INT 0
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 3
74168: PUSH
74169: LD_INT 1
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: LIST
74180: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74181: LD_ADDR_VAR 0 55
74185: PUSH
74186: LD_INT 3
74188: PUSH
74189: LD_INT 2
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 3
74198: PUSH
74199: LD_INT 3
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 2
74208: PUSH
74209: LD_INT 3
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: LIST
74220: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74221: LD_ADDR_VAR 0 56
74225: PUSH
74226: LD_INT 1
74228: PUSH
74229: LD_INT 3
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: LD_INT 0
74238: PUSH
74239: LD_INT 3
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 1
74248: NEG
74249: PUSH
74250: LD_INT 2
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: PUSH
74257: EMPTY
74258: LIST
74259: LIST
74260: LIST
74261: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74262: LD_ADDR_VAR 0 57
74266: PUSH
74267: LD_INT 2
74269: NEG
74270: PUSH
74271: LD_INT 1
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PUSH
74278: LD_INT 3
74280: NEG
74281: PUSH
74282: LD_INT 0
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PUSH
74289: LD_INT 3
74291: NEG
74292: PUSH
74293: LD_INT 1
74295: NEG
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: LIST
74305: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74306: LD_ADDR_VAR 0 58
74310: PUSH
74311: LD_INT 2
74313: NEG
74314: PUSH
74315: LD_INT 3
74317: NEG
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: PUSH
74323: LD_INT 3
74325: NEG
74326: PUSH
74327: LD_INT 2
74329: NEG
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: PUSH
74335: LD_INT 3
74337: NEG
74338: PUSH
74339: LD_INT 3
74341: NEG
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: PUSH
74347: EMPTY
74348: LIST
74349: LIST
74350: LIST
74351: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
74352: LD_ADDR_VAR 0 59
74356: PUSH
74357: LD_INT 1
74359: NEG
74360: PUSH
74361: LD_INT 2
74363: NEG
74364: PUSH
74365: EMPTY
74366: LIST
74367: LIST
74368: PUSH
74369: LD_INT 0
74371: PUSH
74372: LD_INT 2
74374: NEG
74375: PUSH
74376: EMPTY
74377: LIST
74378: LIST
74379: PUSH
74380: LD_INT 1
74382: PUSH
74383: LD_INT 1
74385: NEG
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: LIST
74395: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
74396: LD_ADDR_VAR 0 60
74400: PUSH
74401: LD_INT 1
74403: PUSH
74404: LD_INT 1
74406: NEG
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: PUSH
74412: LD_INT 2
74414: PUSH
74415: LD_INT 0
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: PUSH
74422: LD_INT 2
74424: PUSH
74425: LD_INT 1
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: LIST
74436: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
74437: LD_ADDR_VAR 0 61
74441: PUSH
74442: LD_INT 2
74444: PUSH
74445: LD_INT 1
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: PUSH
74452: LD_INT 2
74454: PUSH
74455: LD_INT 2
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: PUSH
74462: LD_INT 1
74464: PUSH
74465: LD_INT 2
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: LIST
74476: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
74477: LD_ADDR_VAR 0 62
74481: PUSH
74482: LD_INT 1
74484: PUSH
74485: LD_INT 2
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 0
74494: PUSH
74495: LD_INT 2
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: PUSH
74502: LD_INT 1
74504: NEG
74505: PUSH
74506: LD_INT 1
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: LIST
74517: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
74518: LD_ADDR_VAR 0 63
74522: PUSH
74523: LD_INT 1
74525: NEG
74526: PUSH
74527: LD_INT 1
74529: PUSH
74530: EMPTY
74531: LIST
74532: LIST
74533: PUSH
74534: LD_INT 2
74536: NEG
74537: PUSH
74538: LD_INT 0
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 2
74547: NEG
74548: PUSH
74549: LD_INT 1
74551: NEG
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: LIST
74561: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74562: LD_ADDR_VAR 0 64
74566: PUSH
74567: LD_INT 1
74569: NEG
74570: PUSH
74571: LD_INT 2
74573: NEG
74574: PUSH
74575: EMPTY
74576: LIST
74577: LIST
74578: PUSH
74579: LD_INT 2
74581: NEG
74582: PUSH
74583: LD_INT 1
74585: NEG
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: PUSH
74591: LD_INT 2
74593: NEG
74594: PUSH
74595: LD_INT 2
74597: NEG
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: LIST
74607: ST_TO_ADDR
// end ; 2 :
74608: GO 77874
74610: LD_INT 2
74612: DOUBLE
74613: EQUAL
74614: IFTRUE 74618
74616: GO 77873
74618: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
74619: LD_ADDR_VAR 0 29
74623: PUSH
74624: LD_INT 4
74626: PUSH
74627: LD_INT 0
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: PUSH
74634: LD_INT 4
74636: PUSH
74637: LD_INT 1
74639: NEG
74640: PUSH
74641: EMPTY
74642: LIST
74643: LIST
74644: PUSH
74645: LD_INT 5
74647: PUSH
74648: LD_INT 0
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: PUSH
74655: LD_INT 5
74657: PUSH
74658: LD_INT 1
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: PUSH
74665: LD_INT 4
74667: PUSH
74668: LD_INT 1
74670: PUSH
74671: EMPTY
74672: LIST
74673: LIST
74674: PUSH
74675: LD_INT 3
74677: PUSH
74678: LD_INT 0
74680: PUSH
74681: EMPTY
74682: LIST
74683: LIST
74684: PUSH
74685: LD_INT 3
74687: PUSH
74688: LD_INT 1
74690: NEG
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: PUSH
74696: LD_INT 3
74698: PUSH
74699: LD_INT 2
74701: NEG
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: LD_INT 5
74709: PUSH
74710: LD_INT 2
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PUSH
74717: LD_INT 3
74719: PUSH
74720: LD_INT 3
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: PUSH
74727: LD_INT 3
74729: PUSH
74730: LD_INT 2
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: PUSH
74737: LD_INT 4
74739: PUSH
74740: LD_INT 3
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: PUSH
74747: LD_INT 4
74749: PUSH
74750: LD_INT 4
74752: PUSH
74753: EMPTY
74754: LIST
74755: LIST
74756: PUSH
74757: LD_INT 3
74759: PUSH
74760: LD_INT 4
74762: PUSH
74763: EMPTY
74764: LIST
74765: LIST
74766: PUSH
74767: LD_INT 2
74769: PUSH
74770: LD_INT 3
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: PUSH
74777: LD_INT 2
74779: PUSH
74780: LD_INT 2
74782: PUSH
74783: EMPTY
74784: LIST
74785: LIST
74786: PUSH
74787: LD_INT 4
74789: PUSH
74790: LD_INT 2
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: PUSH
74797: LD_INT 2
74799: PUSH
74800: LD_INT 4
74802: PUSH
74803: EMPTY
74804: LIST
74805: LIST
74806: PUSH
74807: LD_INT 0
74809: PUSH
74810: LD_INT 4
74812: PUSH
74813: EMPTY
74814: LIST
74815: LIST
74816: PUSH
74817: LD_INT 0
74819: PUSH
74820: LD_INT 3
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PUSH
74827: LD_INT 1
74829: PUSH
74830: LD_INT 4
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: PUSH
74837: LD_INT 1
74839: PUSH
74840: LD_INT 5
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: PUSH
74847: LD_INT 0
74849: PUSH
74850: LD_INT 5
74852: PUSH
74853: EMPTY
74854: LIST
74855: LIST
74856: PUSH
74857: LD_INT 1
74859: NEG
74860: PUSH
74861: LD_INT 4
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: PUSH
74868: LD_INT 1
74870: NEG
74871: PUSH
74872: LD_INT 3
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: PUSH
74879: LD_INT 2
74881: PUSH
74882: LD_INT 5
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: PUSH
74889: LD_INT 2
74891: NEG
74892: PUSH
74893: LD_INT 3
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: PUSH
74900: LD_INT 3
74902: NEG
74903: PUSH
74904: LD_INT 0
74906: PUSH
74907: EMPTY
74908: LIST
74909: LIST
74910: PUSH
74911: LD_INT 3
74913: NEG
74914: PUSH
74915: LD_INT 1
74917: NEG
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: PUSH
74923: LD_INT 2
74925: NEG
74926: PUSH
74927: LD_INT 0
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: PUSH
74934: LD_INT 2
74936: NEG
74937: PUSH
74938: LD_INT 1
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: PUSH
74945: LD_INT 3
74947: NEG
74948: PUSH
74949: LD_INT 1
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: LD_INT 4
74958: NEG
74959: PUSH
74960: LD_INT 0
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: LD_INT 4
74969: NEG
74970: PUSH
74971: LD_INT 1
74973: NEG
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: PUSH
74979: LD_INT 4
74981: NEG
74982: PUSH
74983: LD_INT 2
74985: NEG
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: PUSH
74991: LD_INT 2
74993: NEG
74994: PUSH
74995: LD_INT 2
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: PUSH
75002: LD_INT 4
75004: NEG
75005: PUSH
75006: LD_INT 4
75008: NEG
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: LD_INT 4
75016: NEG
75017: PUSH
75018: LD_INT 5
75020: NEG
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: PUSH
75026: LD_INT 3
75028: NEG
75029: PUSH
75030: LD_INT 4
75032: NEG
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: PUSH
75038: LD_INT 3
75040: NEG
75041: PUSH
75042: LD_INT 3
75044: NEG
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: PUSH
75050: LD_INT 4
75052: NEG
75053: PUSH
75054: LD_INT 3
75056: NEG
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: LD_INT 5
75064: NEG
75065: PUSH
75066: LD_INT 4
75068: NEG
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: PUSH
75074: LD_INT 5
75076: NEG
75077: PUSH
75078: LD_INT 5
75080: NEG
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: PUSH
75086: LD_INT 3
75088: NEG
75089: PUSH
75090: LD_INT 5
75092: NEG
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PUSH
75098: LD_INT 5
75100: NEG
75101: PUSH
75102: LD_INT 3
75104: NEG
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: LIST
75155: LIST
75156: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
75157: LD_ADDR_VAR 0 30
75161: PUSH
75162: LD_INT 4
75164: PUSH
75165: LD_INT 4
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: PUSH
75172: LD_INT 4
75174: PUSH
75175: LD_INT 3
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: PUSH
75182: LD_INT 5
75184: PUSH
75185: LD_INT 4
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: PUSH
75192: LD_INT 5
75194: PUSH
75195: LD_INT 5
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PUSH
75202: LD_INT 4
75204: PUSH
75205: LD_INT 5
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: PUSH
75212: LD_INT 3
75214: PUSH
75215: LD_INT 4
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: LD_INT 3
75224: PUSH
75225: LD_INT 3
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: PUSH
75232: LD_INT 5
75234: PUSH
75235: LD_INT 3
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: PUSH
75242: LD_INT 3
75244: PUSH
75245: LD_INT 5
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: PUSH
75252: LD_INT 0
75254: PUSH
75255: LD_INT 3
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: PUSH
75262: LD_INT 0
75264: PUSH
75265: LD_INT 2
75267: PUSH
75268: EMPTY
75269: LIST
75270: LIST
75271: PUSH
75272: LD_INT 1
75274: PUSH
75275: LD_INT 3
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: PUSH
75282: LD_INT 1
75284: PUSH
75285: LD_INT 4
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 0
75294: PUSH
75295: LD_INT 4
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: LD_INT 1
75304: NEG
75305: PUSH
75306: LD_INT 3
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PUSH
75313: LD_INT 1
75315: NEG
75316: PUSH
75317: LD_INT 2
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: PUSH
75324: LD_INT 2
75326: PUSH
75327: LD_INT 4
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: PUSH
75334: LD_INT 2
75336: NEG
75337: PUSH
75338: LD_INT 2
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: PUSH
75345: LD_INT 4
75347: NEG
75348: PUSH
75349: LD_INT 0
75351: PUSH
75352: EMPTY
75353: LIST
75354: LIST
75355: PUSH
75356: LD_INT 4
75358: NEG
75359: PUSH
75360: LD_INT 1
75362: NEG
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: PUSH
75368: LD_INT 3
75370: NEG
75371: PUSH
75372: LD_INT 0
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: PUSH
75379: LD_INT 3
75381: NEG
75382: PUSH
75383: LD_INT 1
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: LD_INT 4
75392: NEG
75393: PUSH
75394: LD_INT 1
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: PUSH
75401: LD_INT 5
75403: NEG
75404: PUSH
75405: LD_INT 0
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: PUSH
75412: LD_INT 5
75414: NEG
75415: PUSH
75416: LD_INT 1
75418: NEG
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: PUSH
75424: LD_INT 5
75426: NEG
75427: PUSH
75428: LD_INT 2
75430: NEG
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 3
75438: NEG
75439: PUSH
75440: LD_INT 2
75442: PUSH
75443: EMPTY
75444: LIST
75445: LIST
75446: PUSH
75447: LD_INT 3
75449: NEG
75450: PUSH
75451: LD_INT 3
75453: NEG
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: PUSH
75459: LD_INT 3
75461: NEG
75462: PUSH
75463: LD_INT 4
75465: NEG
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: PUSH
75471: LD_INT 2
75473: NEG
75474: PUSH
75475: LD_INT 3
75477: NEG
75478: PUSH
75479: EMPTY
75480: LIST
75481: LIST
75482: PUSH
75483: LD_INT 2
75485: NEG
75486: PUSH
75487: LD_INT 2
75489: NEG
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 3
75497: NEG
75498: PUSH
75499: LD_INT 2
75501: NEG
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: PUSH
75507: LD_INT 4
75509: NEG
75510: PUSH
75511: LD_INT 3
75513: NEG
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: PUSH
75519: LD_INT 4
75521: NEG
75522: PUSH
75523: LD_INT 4
75525: NEG
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: PUSH
75531: LD_INT 2
75533: NEG
75534: PUSH
75535: LD_INT 4
75537: NEG
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PUSH
75543: LD_INT 4
75545: NEG
75546: PUSH
75547: LD_INT 2
75549: NEG
75550: PUSH
75551: EMPTY
75552: LIST
75553: LIST
75554: PUSH
75555: LD_INT 0
75557: PUSH
75558: LD_INT 4
75560: NEG
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PUSH
75566: LD_INT 0
75568: PUSH
75569: LD_INT 5
75571: NEG
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: LD_INT 1
75579: PUSH
75580: LD_INT 4
75582: NEG
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: PUSH
75588: LD_INT 1
75590: PUSH
75591: LD_INT 3
75593: NEG
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: PUSH
75599: LD_INT 0
75601: PUSH
75602: LD_INT 3
75604: NEG
75605: PUSH
75606: EMPTY
75607: LIST
75608: LIST
75609: PUSH
75610: LD_INT 1
75612: NEG
75613: PUSH
75614: LD_INT 4
75616: NEG
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PUSH
75622: LD_INT 1
75624: NEG
75625: PUSH
75626: LD_INT 5
75628: NEG
75629: PUSH
75630: EMPTY
75631: LIST
75632: LIST
75633: PUSH
75634: LD_INT 2
75636: PUSH
75637: LD_INT 3
75639: NEG
75640: PUSH
75641: EMPTY
75642: LIST
75643: LIST
75644: PUSH
75645: LD_INT 2
75647: NEG
75648: PUSH
75649: LD_INT 5
75651: NEG
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: LIST
75661: LIST
75662: LIST
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: LIST
75668: LIST
75669: LIST
75670: LIST
75671: LIST
75672: LIST
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: LIST
75688: LIST
75689: LIST
75690: LIST
75691: LIST
75692: LIST
75693: LIST
75694: LIST
75695: LIST
75696: LIST
75697: LIST
75698: LIST
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
75704: LD_ADDR_VAR 0 31
75708: PUSH
75709: LD_INT 0
75711: PUSH
75712: LD_INT 4
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: LD_INT 0
75721: PUSH
75722: LD_INT 3
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: PUSH
75729: LD_INT 1
75731: PUSH
75732: LD_INT 4
75734: PUSH
75735: EMPTY
75736: LIST
75737: LIST
75738: PUSH
75739: LD_INT 1
75741: PUSH
75742: LD_INT 5
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: LD_INT 0
75751: PUSH
75752: LD_INT 5
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: PUSH
75759: LD_INT 1
75761: NEG
75762: PUSH
75763: LD_INT 4
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: PUSH
75770: LD_INT 1
75772: NEG
75773: PUSH
75774: LD_INT 3
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: PUSH
75781: LD_INT 2
75783: PUSH
75784: LD_INT 5
75786: PUSH
75787: EMPTY
75788: LIST
75789: LIST
75790: PUSH
75791: LD_INT 2
75793: NEG
75794: PUSH
75795: LD_INT 3
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: PUSH
75802: LD_INT 3
75804: NEG
75805: PUSH
75806: LD_INT 0
75808: PUSH
75809: EMPTY
75810: LIST
75811: LIST
75812: PUSH
75813: LD_INT 3
75815: NEG
75816: PUSH
75817: LD_INT 1
75819: NEG
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: PUSH
75825: LD_INT 2
75827: NEG
75828: PUSH
75829: LD_INT 0
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: PUSH
75836: LD_INT 2
75838: NEG
75839: PUSH
75840: LD_INT 1
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: PUSH
75847: LD_INT 3
75849: NEG
75850: PUSH
75851: LD_INT 1
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: PUSH
75858: LD_INT 4
75860: NEG
75861: PUSH
75862: LD_INT 0
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: PUSH
75869: LD_INT 4
75871: NEG
75872: PUSH
75873: LD_INT 1
75875: NEG
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: PUSH
75881: LD_INT 4
75883: NEG
75884: PUSH
75885: LD_INT 2
75887: NEG
75888: PUSH
75889: EMPTY
75890: LIST
75891: LIST
75892: PUSH
75893: LD_INT 2
75895: NEG
75896: PUSH
75897: LD_INT 2
75899: PUSH
75900: EMPTY
75901: LIST
75902: LIST
75903: PUSH
75904: LD_INT 4
75906: NEG
75907: PUSH
75908: LD_INT 4
75910: NEG
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: PUSH
75916: LD_INT 4
75918: NEG
75919: PUSH
75920: LD_INT 5
75922: NEG
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: LD_INT 3
75930: NEG
75931: PUSH
75932: LD_INT 4
75934: NEG
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: PUSH
75940: LD_INT 3
75942: NEG
75943: PUSH
75944: LD_INT 3
75946: NEG
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 4
75954: NEG
75955: PUSH
75956: LD_INT 3
75958: NEG
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: PUSH
75964: LD_INT 5
75966: NEG
75967: PUSH
75968: LD_INT 4
75970: NEG
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PUSH
75976: LD_INT 5
75978: NEG
75979: PUSH
75980: LD_INT 5
75982: NEG
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: PUSH
75988: LD_INT 3
75990: NEG
75991: PUSH
75992: LD_INT 5
75994: NEG
75995: PUSH
75996: EMPTY
75997: LIST
75998: LIST
75999: PUSH
76000: LD_INT 5
76002: NEG
76003: PUSH
76004: LD_INT 3
76006: NEG
76007: PUSH
76008: EMPTY
76009: LIST
76010: LIST
76011: PUSH
76012: LD_INT 0
76014: PUSH
76015: LD_INT 3
76017: NEG
76018: PUSH
76019: EMPTY
76020: LIST
76021: LIST
76022: PUSH
76023: LD_INT 0
76025: PUSH
76026: LD_INT 4
76028: NEG
76029: PUSH
76030: EMPTY
76031: LIST
76032: LIST
76033: PUSH
76034: LD_INT 1
76036: PUSH
76037: LD_INT 3
76039: NEG
76040: PUSH
76041: EMPTY
76042: LIST
76043: LIST
76044: PUSH
76045: LD_INT 1
76047: PUSH
76048: LD_INT 2
76050: NEG
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: PUSH
76056: LD_INT 0
76058: PUSH
76059: LD_INT 2
76061: NEG
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: PUSH
76067: LD_INT 1
76069: NEG
76070: PUSH
76071: LD_INT 3
76073: NEG
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: PUSH
76079: LD_INT 1
76081: NEG
76082: PUSH
76083: LD_INT 4
76085: NEG
76086: PUSH
76087: EMPTY
76088: LIST
76089: LIST
76090: PUSH
76091: LD_INT 2
76093: PUSH
76094: LD_INT 2
76096: NEG
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: PUSH
76102: LD_INT 2
76104: NEG
76105: PUSH
76106: LD_INT 4
76108: NEG
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: LD_INT 4
76116: PUSH
76117: LD_INT 0
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PUSH
76124: LD_INT 4
76126: PUSH
76127: LD_INT 1
76129: NEG
76130: PUSH
76131: EMPTY
76132: LIST
76133: LIST
76134: PUSH
76135: LD_INT 5
76137: PUSH
76138: LD_INT 0
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: PUSH
76145: LD_INT 5
76147: PUSH
76148: LD_INT 1
76150: PUSH
76151: EMPTY
76152: LIST
76153: LIST
76154: PUSH
76155: LD_INT 4
76157: PUSH
76158: LD_INT 1
76160: PUSH
76161: EMPTY
76162: LIST
76163: LIST
76164: PUSH
76165: LD_INT 3
76167: PUSH
76168: LD_INT 0
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: PUSH
76175: LD_INT 3
76177: PUSH
76178: LD_INT 1
76180: NEG
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: PUSH
76186: LD_INT 3
76188: PUSH
76189: LD_INT 2
76191: NEG
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: PUSH
76197: LD_INT 5
76199: PUSH
76200: LD_INT 2
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: LIST
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: LIST
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: LIST
76246: LIST
76247: LIST
76248: LIST
76249: LIST
76250: LIST
76251: LIST
76252: LIST
76253: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
76254: LD_ADDR_VAR 0 32
76258: PUSH
76259: LD_INT 4
76261: NEG
76262: PUSH
76263: LD_INT 0
76265: PUSH
76266: EMPTY
76267: LIST
76268: LIST
76269: PUSH
76270: LD_INT 4
76272: NEG
76273: PUSH
76274: LD_INT 1
76276: NEG
76277: PUSH
76278: EMPTY
76279: LIST
76280: LIST
76281: PUSH
76282: LD_INT 3
76284: NEG
76285: PUSH
76286: LD_INT 0
76288: PUSH
76289: EMPTY
76290: LIST
76291: LIST
76292: PUSH
76293: LD_INT 3
76295: NEG
76296: PUSH
76297: LD_INT 1
76299: PUSH
76300: EMPTY
76301: LIST
76302: LIST
76303: PUSH
76304: LD_INT 4
76306: NEG
76307: PUSH
76308: LD_INT 1
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: PUSH
76315: LD_INT 5
76317: NEG
76318: PUSH
76319: LD_INT 0
76321: PUSH
76322: EMPTY
76323: LIST
76324: LIST
76325: PUSH
76326: LD_INT 5
76328: NEG
76329: PUSH
76330: LD_INT 1
76332: NEG
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: PUSH
76338: LD_INT 5
76340: NEG
76341: PUSH
76342: LD_INT 2
76344: NEG
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: PUSH
76350: LD_INT 3
76352: NEG
76353: PUSH
76354: LD_INT 2
76356: PUSH
76357: EMPTY
76358: LIST
76359: LIST
76360: PUSH
76361: LD_INT 3
76363: NEG
76364: PUSH
76365: LD_INT 3
76367: NEG
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: LD_INT 3
76375: NEG
76376: PUSH
76377: LD_INT 4
76379: NEG
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PUSH
76385: LD_INT 2
76387: NEG
76388: PUSH
76389: LD_INT 3
76391: NEG
76392: PUSH
76393: EMPTY
76394: LIST
76395: LIST
76396: PUSH
76397: LD_INT 2
76399: NEG
76400: PUSH
76401: LD_INT 2
76403: NEG
76404: PUSH
76405: EMPTY
76406: LIST
76407: LIST
76408: PUSH
76409: LD_INT 3
76411: NEG
76412: PUSH
76413: LD_INT 2
76415: NEG
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: PUSH
76421: LD_INT 4
76423: NEG
76424: PUSH
76425: LD_INT 3
76427: NEG
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: PUSH
76433: LD_INT 4
76435: NEG
76436: PUSH
76437: LD_INT 4
76439: NEG
76440: PUSH
76441: EMPTY
76442: LIST
76443: LIST
76444: PUSH
76445: LD_INT 2
76447: NEG
76448: PUSH
76449: LD_INT 4
76451: NEG
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: PUSH
76457: LD_INT 4
76459: NEG
76460: PUSH
76461: LD_INT 2
76463: NEG
76464: PUSH
76465: EMPTY
76466: LIST
76467: LIST
76468: PUSH
76469: LD_INT 0
76471: PUSH
76472: LD_INT 4
76474: NEG
76475: PUSH
76476: EMPTY
76477: LIST
76478: LIST
76479: PUSH
76480: LD_INT 0
76482: PUSH
76483: LD_INT 5
76485: NEG
76486: PUSH
76487: EMPTY
76488: LIST
76489: LIST
76490: PUSH
76491: LD_INT 1
76493: PUSH
76494: LD_INT 4
76496: NEG
76497: PUSH
76498: EMPTY
76499: LIST
76500: LIST
76501: PUSH
76502: LD_INT 1
76504: PUSH
76505: LD_INT 3
76507: NEG
76508: PUSH
76509: EMPTY
76510: LIST
76511: LIST
76512: PUSH
76513: LD_INT 0
76515: PUSH
76516: LD_INT 3
76518: NEG
76519: PUSH
76520: EMPTY
76521: LIST
76522: LIST
76523: PUSH
76524: LD_INT 1
76526: NEG
76527: PUSH
76528: LD_INT 4
76530: NEG
76531: PUSH
76532: EMPTY
76533: LIST
76534: LIST
76535: PUSH
76536: LD_INT 1
76538: NEG
76539: PUSH
76540: LD_INT 5
76542: NEG
76543: PUSH
76544: EMPTY
76545: LIST
76546: LIST
76547: PUSH
76548: LD_INT 2
76550: PUSH
76551: LD_INT 3
76553: NEG
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: PUSH
76559: LD_INT 2
76561: NEG
76562: PUSH
76563: LD_INT 5
76565: NEG
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: PUSH
76571: LD_INT 3
76573: PUSH
76574: LD_INT 0
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: LD_INT 3
76583: PUSH
76584: LD_INT 1
76586: NEG
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: LD_INT 4
76594: PUSH
76595: LD_INT 0
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PUSH
76602: LD_INT 4
76604: PUSH
76605: LD_INT 1
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: PUSH
76612: LD_INT 3
76614: PUSH
76615: LD_INT 1
76617: PUSH
76618: EMPTY
76619: LIST
76620: LIST
76621: PUSH
76622: LD_INT 2
76624: PUSH
76625: LD_INT 0
76627: PUSH
76628: EMPTY
76629: LIST
76630: LIST
76631: PUSH
76632: LD_INT 2
76634: PUSH
76635: LD_INT 1
76637: NEG
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: LD_INT 2
76645: PUSH
76646: LD_INT 2
76648: NEG
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: PUSH
76654: LD_INT 4
76656: PUSH
76657: LD_INT 2
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PUSH
76664: LD_INT 4
76666: PUSH
76667: LD_INT 4
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PUSH
76674: LD_INT 4
76676: PUSH
76677: LD_INT 3
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: PUSH
76684: LD_INT 5
76686: PUSH
76687: LD_INT 4
76689: PUSH
76690: EMPTY
76691: LIST
76692: LIST
76693: PUSH
76694: LD_INT 5
76696: PUSH
76697: LD_INT 5
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: PUSH
76704: LD_INT 4
76706: PUSH
76707: LD_INT 5
76709: PUSH
76710: EMPTY
76711: LIST
76712: LIST
76713: PUSH
76714: LD_INT 3
76716: PUSH
76717: LD_INT 4
76719: PUSH
76720: EMPTY
76721: LIST
76722: LIST
76723: PUSH
76724: LD_INT 3
76726: PUSH
76727: LD_INT 3
76729: PUSH
76730: EMPTY
76731: LIST
76732: LIST
76733: PUSH
76734: LD_INT 5
76736: PUSH
76737: LD_INT 3
76739: PUSH
76740: EMPTY
76741: LIST
76742: LIST
76743: PUSH
76744: LD_INT 3
76746: PUSH
76747: LD_INT 5
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: PUSH
76754: EMPTY
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: LIST
76764: LIST
76765: LIST
76766: LIST
76767: LIST
76768: LIST
76769: LIST
76770: LIST
76771: LIST
76772: LIST
76773: LIST
76774: LIST
76775: LIST
76776: LIST
76777: LIST
76778: LIST
76779: LIST
76780: LIST
76781: LIST
76782: LIST
76783: LIST
76784: LIST
76785: LIST
76786: LIST
76787: LIST
76788: LIST
76789: LIST
76790: LIST
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: LIST
76796: LIST
76797: LIST
76798: LIST
76799: LIST
76800: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
76801: LD_ADDR_VAR 0 33
76805: PUSH
76806: LD_INT 4
76808: NEG
76809: PUSH
76810: LD_INT 4
76812: NEG
76813: PUSH
76814: EMPTY
76815: LIST
76816: LIST
76817: PUSH
76818: LD_INT 4
76820: NEG
76821: PUSH
76822: LD_INT 5
76824: NEG
76825: PUSH
76826: EMPTY
76827: LIST
76828: LIST
76829: PUSH
76830: LD_INT 3
76832: NEG
76833: PUSH
76834: LD_INT 4
76836: NEG
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_INT 3
76844: NEG
76845: PUSH
76846: LD_INT 3
76848: NEG
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: PUSH
76854: LD_INT 4
76856: NEG
76857: PUSH
76858: LD_INT 3
76860: NEG
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: PUSH
76866: LD_INT 5
76868: NEG
76869: PUSH
76870: LD_INT 4
76872: NEG
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: LD_INT 5
76880: NEG
76881: PUSH
76882: LD_INT 5
76884: NEG
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: PUSH
76890: LD_INT 3
76892: NEG
76893: PUSH
76894: LD_INT 5
76896: NEG
76897: PUSH
76898: EMPTY
76899: LIST
76900: LIST
76901: PUSH
76902: LD_INT 5
76904: NEG
76905: PUSH
76906: LD_INT 3
76908: NEG
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: PUSH
76914: LD_INT 0
76916: PUSH
76917: LD_INT 3
76919: NEG
76920: PUSH
76921: EMPTY
76922: LIST
76923: LIST
76924: PUSH
76925: LD_INT 0
76927: PUSH
76928: LD_INT 4
76930: NEG
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: PUSH
76936: LD_INT 1
76938: PUSH
76939: LD_INT 3
76941: NEG
76942: PUSH
76943: EMPTY
76944: LIST
76945: LIST
76946: PUSH
76947: LD_INT 1
76949: PUSH
76950: LD_INT 2
76952: NEG
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: PUSH
76958: LD_INT 0
76960: PUSH
76961: LD_INT 2
76963: NEG
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: PUSH
76969: LD_INT 1
76971: NEG
76972: PUSH
76973: LD_INT 3
76975: NEG
76976: PUSH
76977: EMPTY
76978: LIST
76979: LIST
76980: PUSH
76981: LD_INT 1
76983: NEG
76984: PUSH
76985: LD_INT 4
76987: NEG
76988: PUSH
76989: EMPTY
76990: LIST
76991: LIST
76992: PUSH
76993: LD_INT 2
76995: PUSH
76996: LD_INT 2
76998: NEG
76999: PUSH
77000: EMPTY
77001: LIST
77002: LIST
77003: PUSH
77004: LD_INT 2
77006: NEG
77007: PUSH
77008: LD_INT 4
77010: NEG
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: PUSH
77016: LD_INT 4
77018: PUSH
77019: LD_INT 0
77021: PUSH
77022: EMPTY
77023: LIST
77024: LIST
77025: PUSH
77026: LD_INT 4
77028: PUSH
77029: LD_INT 1
77031: NEG
77032: PUSH
77033: EMPTY
77034: LIST
77035: LIST
77036: PUSH
77037: LD_INT 5
77039: PUSH
77040: LD_INT 0
77042: PUSH
77043: EMPTY
77044: LIST
77045: LIST
77046: PUSH
77047: LD_INT 5
77049: PUSH
77050: LD_INT 1
77052: PUSH
77053: EMPTY
77054: LIST
77055: LIST
77056: PUSH
77057: LD_INT 4
77059: PUSH
77060: LD_INT 1
77062: PUSH
77063: EMPTY
77064: LIST
77065: LIST
77066: PUSH
77067: LD_INT 3
77069: PUSH
77070: LD_INT 0
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: PUSH
77077: LD_INT 3
77079: PUSH
77080: LD_INT 1
77082: NEG
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: PUSH
77088: LD_INT 3
77090: PUSH
77091: LD_INT 2
77093: NEG
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: PUSH
77099: LD_INT 5
77101: PUSH
77102: LD_INT 2
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: PUSH
77109: LD_INT 3
77111: PUSH
77112: LD_INT 3
77114: PUSH
77115: EMPTY
77116: LIST
77117: LIST
77118: PUSH
77119: LD_INT 3
77121: PUSH
77122: LD_INT 2
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: PUSH
77129: LD_INT 4
77131: PUSH
77132: LD_INT 3
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PUSH
77139: LD_INT 4
77141: PUSH
77142: LD_INT 4
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: PUSH
77149: LD_INT 3
77151: PUSH
77152: LD_INT 4
77154: PUSH
77155: EMPTY
77156: LIST
77157: LIST
77158: PUSH
77159: LD_INT 2
77161: PUSH
77162: LD_INT 3
77164: PUSH
77165: EMPTY
77166: LIST
77167: LIST
77168: PUSH
77169: LD_INT 2
77171: PUSH
77172: LD_INT 2
77174: PUSH
77175: EMPTY
77176: LIST
77177: LIST
77178: PUSH
77179: LD_INT 4
77181: PUSH
77182: LD_INT 2
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: PUSH
77189: LD_INT 2
77191: PUSH
77192: LD_INT 4
77194: PUSH
77195: EMPTY
77196: LIST
77197: LIST
77198: PUSH
77199: LD_INT 0
77201: PUSH
77202: LD_INT 4
77204: PUSH
77205: EMPTY
77206: LIST
77207: LIST
77208: PUSH
77209: LD_INT 0
77211: PUSH
77212: LD_INT 3
77214: PUSH
77215: EMPTY
77216: LIST
77217: LIST
77218: PUSH
77219: LD_INT 1
77221: PUSH
77222: LD_INT 4
77224: PUSH
77225: EMPTY
77226: LIST
77227: LIST
77228: PUSH
77229: LD_INT 1
77231: PUSH
77232: LD_INT 5
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: PUSH
77239: LD_INT 0
77241: PUSH
77242: LD_INT 5
77244: PUSH
77245: EMPTY
77246: LIST
77247: LIST
77248: PUSH
77249: LD_INT 1
77251: NEG
77252: PUSH
77253: LD_INT 4
77255: PUSH
77256: EMPTY
77257: LIST
77258: LIST
77259: PUSH
77260: LD_INT 1
77262: NEG
77263: PUSH
77264: LD_INT 3
77266: PUSH
77267: EMPTY
77268: LIST
77269: LIST
77270: PUSH
77271: LD_INT 2
77273: PUSH
77274: LD_INT 5
77276: PUSH
77277: EMPTY
77278: LIST
77279: LIST
77280: PUSH
77281: LD_INT 2
77283: NEG
77284: PUSH
77285: LD_INT 3
77287: PUSH
77288: EMPTY
77289: LIST
77290: LIST
77291: PUSH
77292: EMPTY
77293: LIST
77294: LIST
77295: LIST
77296: LIST
77297: LIST
77298: LIST
77299: LIST
77300: LIST
77301: LIST
77302: LIST
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: LIST
77318: LIST
77319: LIST
77320: LIST
77321: LIST
77322: LIST
77323: LIST
77324: LIST
77325: LIST
77326: LIST
77327: LIST
77328: LIST
77329: LIST
77330: LIST
77331: LIST
77332: LIST
77333: LIST
77334: LIST
77335: LIST
77336: LIST
77337: LIST
77338: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
77339: LD_ADDR_VAR 0 34
77343: PUSH
77344: LD_INT 0
77346: PUSH
77347: LD_INT 4
77349: NEG
77350: PUSH
77351: EMPTY
77352: LIST
77353: LIST
77354: PUSH
77355: LD_INT 0
77357: PUSH
77358: LD_INT 5
77360: NEG
77361: PUSH
77362: EMPTY
77363: LIST
77364: LIST
77365: PUSH
77366: LD_INT 1
77368: PUSH
77369: LD_INT 4
77371: NEG
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: PUSH
77377: LD_INT 1
77379: PUSH
77380: LD_INT 3
77382: NEG
77383: PUSH
77384: EMPTY
77385: LIST
77386: LIST
77387: PUSH
77388: LD_INT 0
77390: PUSH
77391: LD_INT 3
77393: NEG
77394: PUSH
77395: EMPTY
77396: LIST
77397: LIST
77398: PUSH
77399: LD_INT 1
77401: NEG
77402: PUSH
77403: LD_INT 4
77405: NEG
77406: PUSH
77407: EMPTY
77408: LIST
77409: LIST
77410: PUSH
77411: LD_INT 1
77413: NEG
77414: PUSH
77415: LD_INT 5
77417: NEG
77418: PUSH
77419: EMPTY
77420: LIST
77421: LIST
77422: PUSH
77423: LD_INT 2
77425: PUSH
77426: LD_INT 3
77428: NEG
77429: PUSH
77430: EMPTY
77431: LIST
77432: LIST
77433: PUSH
77434: LD_INT 2
77436: NEG
77437: PUSH
77438: LD_INT 5
77440: NEG
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: PUSH
77446: LD_INT 3
77448: PUSH
77449: LD_INT 0
77451: PUSH
77452: EMPTY
77453: LIST
77454: LIST
77455: PUSH
77456: LD_INT 3
77458: PUSH
77459: LD_INT 1
77461: NEG
77462: PUSH
77463: EMPTY
77464: LIST
77465: LIST
77466: PUSH
77467: LD_INT 4
77469: PUSH
77470: LD_INT 0
77472: PUSH
77473: EMPTY
77474: LIST
77475: LIST
77476: PUSH
77477: LD_INT 4
77479: PUSH
77480: LD_INT 1
77482: PUSH
77483: EMPTY
77484: LIST
77485: LIST
77486: PUSH
77487: LD_INT 3
77489: PUSH
77490: LD_INT 1
77492: PUSH
77493: EMPTY
77494: LIST
77495: LIST
77496: PUSH
77497: LD_INT 2
77499: PUSH
77500: LD_INT 0
77502: PUSH
77503: EMPTY
77504: LIST
77505: LIST
77506: PUSH
77507: LD_INT 2
77509: PUSH
77510: LD_INT 1
77512: NEG
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: PUSH
77518: LD_INT 2
77520: PUSH
77521: LD_INT 2
77523: NEG
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: PUSH
77529: LD_INT 4
77531: PUSH
77532: LD_INT 2
77534: PUSH
77535: EMPTY
77536: LIST
77537: LIST
77538: PUSH
77539: LD_INT 4
77541: PUSH
77542: LD_INT 4
77544: PUSH
77545: EMPTY
77546: LIST
77547: LIST
77548: PUSH
77549: LD_INT 4
77551: PUSH
77552: LD_INT 3
77554: PUSH
77555: EMPTY
77556: LIST
77557: LIST
77558: PUSH
77559: LD_INT 5
77561: PUSH
77562: LD_INT 4
77564: PUSH
77565: EMPTY
77566: LIST
77567: LIST
77568: PUSH
77569: LD_INT 5
77571: PUSH
77572: LD_INT 5
77574: PUSH
77575: EMPTY
77576: LIST
77577: LIST
77578: PUSH
77579: LD_INT 4
77581: PUSH
77582: LD_INT 5
77584: PUSH
77585: EMPTY
77586: LIST
77587: LIST
77588: PUSH
77589: LD_INT 3
77591: PUSH
77592: LD_INT 4
77594: PUSH
77595: EMPTY
77596: LIST
77597: LIST
77598: PUSH
77599: LD_INT 3
77601: PUSH
77602: LD_INT 3
77604: PUSH
77605: EMPTY
77606: LIST
77607: LIST
77608: PUSH
77609: LD_INT 5
77611: PUSH
77612: LD_INT 3
77614: PUSH
77615: EMPTY
77616: LIST
77617: LIST
77618: PUSH
77619: LD_INT 3
77621: PUSH
77622: LD_INT 5
77624: PUSH
77625: EMPTY
77626: LIST
77627: LIST
77628: PUSH
77629: LD_INT 0
77631: PUSH
77632: LD_INT 3
77634: PUSH
77635: EMPTY
77636: LIST
77637: LIST
77638: PUSH
77639: LD_INT 0
77641: PUSH
77642: LD_INT 2
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: PUSH
77649: LD_INT 1
77651: PUSH
77652: LD_INT 3
77654: PUSH
77655: EMPTY
77656: LIST
77657: LIST
77658: PUSH
77659: LD_INT 1
77661: PUSH
77662: LD_INT 4
77664: PUSH
77665: EMPTY
77666: LIST
77667: LIST
77668: PUSH
77669: LD_INT 0
77671: PUSH
77672: LD_INT 4
77674: PUSH
77675: EMPTY
77676: LIST
77677: LIST
77678: PUSH
77679: LD_INT 1
77681: NEG
77682: PUSH
77683: LD_INT 3
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: PUSH
77690: LD_INT 1
77692: NEG
77693: PUSH
77694: LD_INT 2
77696: PUSH
77697: EMPTY
77698: LIST
77699: LIST
77700: PUSH
77701: LD_INT 2
77703: PUSH
77704: LD_INT 4
77706: PUSH
77707: EMPTY
77708: LIST
77709: LIST
77710: PUSH
77711: LD_INT 2
77713: NEG
77714: PUSH
77715: LD_INT 2
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PUSH
77722: LD_INT 4
77724: NEG
77725: PUSH
77726: LD_INT 0
77728: PUSH
77729: EMPTY
77730: LIST
77731: LIST
77732: PUSH
77733: LD_INT 4
77735: NEG
77736: PUSH
77737: LD_INT 1
77739: NEG
77740: PUSH
77741: EMPTY
77742: LIST
77743: LIST
77744: PUSH
77745: LD_INT 3
77747: NEG
77748: PUSH
77749: LD_INT 0
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: PUSH
77756: LD_INT 3
77758: NEG
77759: PUSH
77760: LD_INT 1
77762: PUSH
77763: EMPTY
77764: LIST
77765: LIST
77766: PUSH
77767: LD_INT 4
77769: NEG
77770: PUSH
77771: LD_INT 1
77773: PUSH
77774: EMPTY
77775: LIST
77776: LIST
77777: PUSH
77778: LD_INT 5
77780: NEG
77781: PUSH
77782: LD_INT 0
77784: PUSH
77785: EMPTY
77786: LIST
77787: LIST
77788: PUSH
77789: LD_INT 5
77791: NEG
77792: PUSH
77793: LD_INT 1
77795: NEG
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: PUSH
77801: LD_INT 5
77803: NEG
77804: PUSH
77805: LD_INT 2
77807: NEG
77808: PUSH
77809: EMPTY
77810: LIST
77811: LIST
77812: PUSH
77813: LD_INT 3
77815: NEG
77816: PUSH
77817: LD_INT 2
77819: PUSH
77820: EMPTY
77821: LIST
77822: LIST
77823: PUSH
77824: EMPTY
77825: LIST
77826: LIST
77827: LIST
77828: LIST
77829: LIST
77830: LIST
77831: LIST
77832: LIST
77833: LIST
77834: LIST
77835: LIST
77836: LIST
77837: LIST
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: LIST
77848: LIST
77849: LIST
77850: LIST
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: LIST
77856: LIST
77857: LIST
77858: LIST
77859: LIST
77860: LIST
77861: LIST
77862: LIST
77863: LIST
77864: LIST
77865: LIST
77866: LIST
77867: LIST
77868: LIST
77869: LIST
77870: ST_TO_ADDR
// end ; end ;
77871: GO 77874
77873: POP
// case btype of b_depot , b_warehouse :
77874: LD_VAR 0 1
77878: PUSH
77879: LD_INT 0
77881: DOUBLE
77882: EQUAL
77883: IFTRUE 77893
77885: LD_INT 1
77887: DOUBLE
77888: EQUAL
77889: IFTRUE 77893
77891: GO 78094
77893: POP
// case nation of nation_american :
77894: LD_VAR 0 5
77898: PUSH
77899: LD_INT 1
77901: DOUBLE
77902: EQUAL
77903: IFTRUE 77907
77905: GO 77963
77907: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
77908: LD_ADDR_VAR 0 9
77912: PUSH
77913: LD_VAR 0 11
77917: PUSH
77918: LD_VAR 0 12
77922: PUSH
77923: LD_VAR 0 13
77927: PUSH
77928: LD_VAR 0 14
77932: PUSH
77933: LD_VAR 0 15
77937: PUSH
77938: LD_VAR 0 16
77942: PUSH
77943: EMPTY
77944: LIST
77945: LIST
77946: LIST
77947: LIST
77948: LIST
77949: LIST
77950: PUSH
77951: LD_VAR 0 4
77955: PUSH
77956: LD_INT 1
77958: PLUS
77959: ARRAY
77960: ST_TO_ADDR
77961: GO 78092
77963: LD_INT 2
77965: DOUBLE
77966: EQUAL
77967: IFTRUE 77971
77969: GO 78027
77971: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
77972: LD_ADDR_VAR 0 9
77976: PUSH
77977: LD_VAR 0 17
77981: PUSH
77982: LD_VAR 0 18
77986: PUSH
77987: LD_VAR 0 19
77991: PUSH
77992: LD_VAR 0 20
77996: PUSH
77997: LD_VAR 0 21
78001: PUSH
78002: LD_VAR 0 22
78006: PUSH
78007: EMPTY
78008: LIST
78009: LIST
78010: LIST
78011: LIST
78012: LIST
78013: LIST
78014: PUSH
78015: LD_VAR 0 4
78019: PUSH
78020: LD_INT 1
78022: PLUS
78023: ARRAY
78024: ST_TO_ADDR
78025: GO 78092
78027: LD_INT 3
78029: DOUBLE
78030: EQUAL
78031: IFTRUE 78035
78033: GO 78091
78035: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
78036: LD_ADDR_VAR 0 9
78040: PUSH
78041: LD_VAR 0 23
78045: PUSH
78046: LD_VAR 0 24
78050: PUSH
78051: LD_VAR 0 25
78055: PUSH
78056: LD_VAR 0 26
78060: PUSH
78061: LD_VAR 0 27
78065: PUSH
78066: LD_VAR 0 28
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: LIST
78075: LIST
78076: LIST
78077: LIST
78078: PUSH
78079: LD_VAR 0 4
78083: PUSH
78084: LD_INT 1
78086: PLUS
78087: ARRAY
78088: ST_TO_ADDR
78089: GO 78092
78091: POP
78092: GO 78647
78094: LD_INT 2
78096: DOUBLE
78097: EQUAL
78098: IFTRUE 78108
78100: LD_INT 3
78102: DOUBLE
78103: EQUAL
78104: IFTRUE 78108
78106: GO 78164
78108: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
78109: LD_ADDR_VAR 0 9
78113: PUSH
78114: LD_VAR 0 29
78118: PUSH
78119: LD_VAR 0 30
78123: PUSH
78124: LD_VAR 0 31
78128: PUSH
78129: LD_VAR 0 32
78133: PUSH
78134: LD_VAR 0 33
78138: PUSH
78139: LD_VAR 0 34
78143: PUSH
78144: EMPTY
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: PUSH
78152: LD_VAR 0 4
78156: PUSH
78157: LD_INT 1
78159: PLUS
78160: ARRAY
78161: ST_TO_ADDR
78162: GO 78647
78164: LD_INT 16
78166: DOUBLE
78167: EQUAL
78168: IFTRUE 78226
78170: LD_INT 17
78172: DOUBLE
78173: EQUAL
78174: IFTRUE 78226
78176: LD_INT 18
78178: DOUBLE
78179: EQUAL
78180: IFTRUE 78226
78182: LD_INT 19
78184: DOUBLE
78185: EQUAL
78186: IFTRUE 78226
78188: LD_INT 22
78190: DOUBLE
78191: EQUAL
78192: IFTRUE 78226
78194: LD_INT 20
78196: DOUBLE
78197: EQUAL
78198: IFTRUE 78226
78200: LD_INT 21
78202: DOUBLE
78203: EQUAL
78204: IFTRUE 78226
78206: LD_INT 23
78208: DOUBLE
78209: EQUAL
78210: IFTRUE 78226
78212: LD_INT 24
78214: DOUBLE
78215: EQUAL
78216: IFTRUE 78226
78218: LD_INT 25
78220: DOUBLE
78221: EQUAL
78222: IFTRUE 78226
78224: GO 78282
78226: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
78227: LD_ADDR_VAR 0 9
78231: PUSH
78232: LD_VAR 0 35
78236: PUSH
78237: LD_VAR 0 36
78241: PUSH
78242: LD_VAR 0 37
78246: PUSH
78247: LD_VAR 0 38
78251: PUSH
78252: LD_VAR 0 39
78256: PUSH
78257: LD_VAR 0 40
78261: PUSH
78262: EMPTY
78263: LIST
78264: LIST
78265: LIST
78266: LIST
78267: LIST
78268: LIST
78269: PUSH
78270: LD_VAR 0 4
78274: PUSH
78275: LD_INT 1
78277: PLUS
78278: ARRAY
78279: ST_TO_ADDR
78280: GO 78647
78282: LD_INT 6
78284: DOUBLE
78285: EQUAL
78286: IFTRUE 78338
78288: LD_INT 7
78290: DOUBLE
78291: EQUAL
78292: IFTRUE 78338
78294: LD_INT 8
78296: DOUBLE
78297: EQUAL
78298: IFTRUE 78338
78300: LD_INT 13
78302: DOUBLE
78303: EQUAL
78304: IFTRUE 78338
78306: LD_INT 12
78308: DOUBLE
78309: EQUAL
78310: IFTRUE 78338
78312: LD_INT 15
78314: DOUBLE
78315: EQUAL
78316: IFTRUE 78338
78318: LD_INT 11
78320: DOUBLE
78321: EQUAL
78322: IFTRUE 78338
78324: LD_INT 14
78326: DOUBLE
78327: EQUAL
78328: IFTRUE 78338
78330: LD_INT 10
78332: DOUBLE
78333: EQUAL
78334: IFTRUE 78338
78336: GO 78394
78338: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
78339: LD_ADDR_VAR 0 9
78343: PUSH
78344: LD_VAR 0 41
78348: PUSH
78349: LD_VAR 0 42
78353: PUSH
78354: LD_VAR 0 43
78358: PUSH
78359: LD_VAR 0 44
78363: PUSH
78364: LD_VAR 0 45
78368: PUSH
78369: LD_VAR 0 46
78373: PUSH
78374: EMPTY
78375: LIST
78376: LIST
78377: LIST
78378: LIST
78379: LIST
78380: LIST
78381: PUSH
78382: LD_VAR 0 4
78386: PUSH
78387: LD_INT 1
78389: PLUS
78390: ARRAY
78391: ST_TO_ADDR
78392: GO 78647
78394: LD_INT 36
78396: DOUBLE
78397: EQUAL
78398: IFTRUE 78402
78400: GO 78458
78402: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
78403: LD_ADDR_VAR 0 9
78407: PUSH
78408: LD_VAR 0 47
78412: PUSH
78413: LD_VAR 0 48
78417: PUSH
78418: LD_VAR 0 49
78422: PUSH
78423: LD_VAR 0 50
78427: PUSH
78428: LD_VAR 0 51
78432: PUSH
78433: LD_VAR 0 52
78437: PUSH
78438: EMPTY
78439: LIST
78440: LIST
78441: LIST
78442: LIST
78443: LIST
78444: LIST
78445: PUSH
78446: LD_VAR 0 4
78450: PUSH
78451: LD_INT 1
78453: PLUS
78454: ARRAY
78455: ST_TO_ADDR
78456: GO 78647
78458: LD_INT 4
78460: DOUBLE
78461: EQUAL
78462: IFTRUE 78484
78464: LD_INT 5
78466: DOUBLE
78467: EQUAL
78468: IFTRUE 78484
78470: LD_INT 34
78472: DOUBLE
78473: EQUAL
78474: IFTRUE 78484
78476: LD_INT 37
78478: DOUBLE
78479: EQUAL
78480: IFTRUE 78484
78482: GO 78540
78484: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
78485: LD_ADDR_VAR 0 9
78489: PUSH
78490: LD_VAR 0 53
78494: PUSH
78495: LD_VAR 0 54
78499: PUSH
78500: LD_VAR 0 55
78504: PUSH
78505: LD_VAR 0 56
78509: PUSH
78510: LD_VAR 0 57
78514: PUSH
78515: LD_VAR 0 58
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: LIST
78524: LIST
78525: LIST
78526: LIST
78527: PUSH
78528: LD_VAR 0 4
78532: PUSH
78533: LD_INT 1
78535: PLUS
78536: ARRAY
78537: ST_TO_ADDR
78538: GO 78647
78540: LD_INT 31
78542: DOUBLE
78543: EQUAL
78544: IFTRUE 78590
78546: LD_INT 32
78548: DOUBLE
78549: EQUAL
78550: IFTRUE 78590
78552: LD_INT 33
78554: DOUBLE
78555: EQUAL
78556: IFTRUE 78590
78558: LD_INT 27
78560: DOUBLE
78561: EQUAL
78562: IFTRUE 78590
78564: LD_INT 26
78566: DOUBLE
78567: EQUAL
78568: IFTRUE 78590
78570: LD_INT 28
78572: DOUBLE
78573: EQUAL
78574: IFTRUE 78590
78576: LD_INT 29
78578: DOUBLE
78579: EQUAL
78580: IFTRUE 78590
78582: LD_INT 30
78584: DOUBLE
78585: EQUAL
78586: IFTRUE 78590
78588: GO 78646
78590: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
78591: LD_ADDR_VAR 0 9
78595: PUSH
78596: LD_VAR 0 59
78600: PUSH
78601: LD_VAR 0 60
78605: PUSH
78606: LD_VAR 0 61
78610: PUSH
78611: LD_VAR 0 62
78615: PUSH
78616: LD_VAR 0 63
78620: PUSH
78621: LD_VAR 0 64
78625: PUSH
78626: EMPTY
78627: LIST
78628: LIST
78629: LIST
78630: LIST
78631: LIST
78632: LIST
78633: PUSH
78634: LD_VAR 0 4
78638: PUSH
78639: LD_INT 1
78641: PLUS
78642: ARRAY
78643: ST_TO_ADDR
78644: GO 78647
78646: POP
// temp_list2 = [ ] ;
78647: LD_ADDR_VAR 0 10
78651: PUSH
78652: EMPTY
78653: ST_TO_ADDR
// for i in temp_list do
78654: LD_ADDR_VAR 0 8
78658: PUSH
78659: LD_VAR 0 9
78663: PUSH
78664: FOR_IN
78665: IFFALSE 78717
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
78667: LD_ADDR_VAR 0 10
78671: PUSH
78672: LD_VAR 0 10
78676: PUSH
78677: LD_VAR 0 8
78681: PUSH
78682: LD_INT 1
78684: ARRAY
78685: PUSH
78686: LD_VAR 0 2
78690: PLUS
78691: PUSH
78692: LD_VAR 0 8
78696: PUSH
78697: LD_INT 2
78699: ARRAY
78700: PUSH
78701: LD_VAR 0 3
78705: PLUS
78706: PUSH
78707: EMPTY
78708: LIST
78709: LIST
78710: PUSH
78711: EMPTY
78712: LIST
78713: ADD
78714: ST_TO_ADDR
78715: GO 78664
78717: POP
78718: POP
// result = temp_list2 ;
78719: LD_ADDR_VAR 0 7
78723: PUSH
78724: LD_VAR 0 10
78728: ST_TO_ADDR
// end ;
78729: LD_VAR 0 7
78733: RET
// export function EnemyInRange ( unit , dist ) ; begin
78734: LD_INT 0
78736: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
78737: LD_ADDR_VAR 0 3
78741: PUSH
78742: LD_VAR 0 1
78746: PPUSH
78747: CALL_OW 255
78751: PPUSH
78752: LD_VAR 0 1
78756: PPUSH
78757: CALL_OW 250
78761: PPUSH
78762: LD_VAR 0 1
78766: PPUSH
78767: CALL_OW 251
78771: PPUSH
78772: LD_VAR 0 2
78776: PPUSH
78777: CALL 52130 0 4
78781: PUSH
78782: LD_INT 4
78784: ARRAY
78785: ST_TO_ADDR
// end ;
78786: LD_VAR 0 3
78790: RET
// export function PlayerSeeMe ( unit ) ; begin
78791: LD_INT 0
78793: PPUSH
// result := See ( your_side , unit ) ;
78794: LD_ADDR_VAR 0 2
78798: PUSH
78799: LD_OWVAR 2
78803: PPUSH
78804: LD_VAR 0 1
78808: PPUSH
78809: CALL_OW 292
78813: ST_TO_ADDR
// end ;
78814: LD_VAR 0 2
78818: RET
// export function ReverseDir ( unit ) ; begin
78819: LD_INT 0
78821: PPUSH
// if not unit then
78822: LD_VAR 0 1
78826: NOT
78827: IFFALSE 78831
// exit ;
78829: GO 78854
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
78831: LD_ADDR_VAR 0 2
78835: PUSH
78836: LD_VAR 0 1
78840: PPUSH
78841: CALL_OW 254
78845: PUSH
78846: LD_INT 3
78848: PLUS
78849: PUSH
78850: LD_INT 6
78852: MOD
78853: ST_TO_ADDR
// end ;
78854: LD_VAR 0 2
78858: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
78859: LD_INT 0
78861: PPUSH
78862: PPUSH
78863: PPUSH
78864: PPUSH
78865: PPUSH
// if not hexes then
78866: LD_VAR 0 2
78870: NOT
78871: IFFALSE 78875
// exit ;
78873: GO 79023
// dist := 9999 ;
78875: LD_ADDR_VAR 0 5
78879: PUSH
78880: LD_INT 9999
78882: ST_TO_ADDR
// for i = 1 to hexes do
78883: LD_ADDR_VAR 0 4
78887: PUSH
78888: DOUBLE
78889: LD_INT 1
78891: DEC
78892: ST_TO_ADDR
78893: LD_VAR 0 2
78897: PUSH
78898: FOR_TO
78899: IFFALSE 79011
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
78901: LD_VAR 0 1
78905: PPUSH
78906: LD_VAR 0 2
78910: PUSH
78911: LD_VAR 0 4
78915: ARRAY
78916: PUSH
78917: LD_INT 1
78919: ARRAY
78920: PPUSH
78921: LD_VAR 0 2
78925: PUSH
78926: LD_VAR 0 4
78930: ARRAY
78931: PUSH
78932: LD_INT 2
78934: ARRAY
78935: PPUSH
78936: CALL_OW 297
78940: PUSH
78941: LD_VAR 0 5
78945: LESS
78946: IFFALSE 79009
// begin hex := hexes [ i ] ;
78948: LD_ADDR_VAR 0 7
78952: PUSH
78953: LD_VAR 0 2
78957: PUSH
78958: LD_VAR 0 4
78962: ARRAY
78963: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
78964: LD_ADDR_VAR 0 5
78968: PUSH
78969: LD_VAR 0 1
78973: PPUSH
78974: LD_VAR 0 2
78978: PUSH
78979: LD_VAR 0 4
78983: ARRAY
78984: PUSH
78985: LD_INT 1
78987: ARRAY
78988: PPUSH
78989: LD_VAR 0 2
78993: PUSH
78994: LD_VAR 0 4
78998: ARRAY
78999: PUSH
79000: LD_INT 2
79002: ARRAY
79003: PPUSH
79004: CALL_OW 297
79008: ST_TO_ADDR
// end ; end ;
79009: GO 78898
79011: POP
79012: POP
// result := hex ;
79013: LD_ADDR_VAR 0 3
79017: PUSH
79018: LD_VAR 0 7
79022: ST_TO_ADDR
// end ;
79023: LD_VAR 0 3
79027: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
79028: LD_INT 0
79030: PPUSH
79031: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
79032: LD_VAR 0 1
79036: NOT
79037: PUSH
79038: LD_VAR 0 1
79042: PUSH
79043: LD_INT 21
79045: PUSH
79046: LD_INT 2
79048: PUSH
79049: EMPTY
79050: LIST
79051: LIST
79052: PUSH
79053: LD_INT 23
79055: PUSH
79056: LD_INT 2
79058: PUSH
79059: EMPTY
79060: LIST
79061: LIST
79062: PUSH
79063: EMPTY
79064: LIST
79065: LIST
79066: PPUSH
79067: CALL_OW 69
79071: IN
79072: NOT
79073: OR
79074: IFFALSE 79078
// exit ;
79076: GO 79125
// for i = 1 to 3 do
79078: LD_ADDR_VAR 0 3
79082: PUSH
79083: DOUBLE
79084: LD_INT 1
79086: DEC
79087: ST_TO_ADDR
79088: LD_INT 3
79090: PUSH
79091: FOR_TO
79092: IFFALSE 79123
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
79094: LD_VAR 0 1
79098: PPUSH
79099: CALL_OW 250
79103: PPUSH
79104: LD_VAR 0 1
79108: PPUSH
79109: CALL_OW 251
79113: PPUSH
79114: LD_INT 1
79116: PPUSH
79117: CALL_OW 453
79121: GO 79091
79123: POP
79124: POP
// end ;
79125: LD_VAR 0 2
79129: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
79130: LD_INT 0
79132: PPUSH
79133: PPUSH
79134: PPUSH
79135: PPUSH
79136: PPUSH
79137: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
79138: LD_VAR 0 1
79142: NOT
79143: PUSH
79144: LD_VAR 0 2
79148: NOT
79149: OR
79150: PUSH
79151: LD_VAR 0 1
79155: PPUSH
79156: CALL_OW 314
79160: OR
79161: IFFALSE 79165
// exit ;
79163: GO 79606
// x := GetX ( enemy_unit ) ;
79165: LD_ADDR_VAR 0 7
79169: PUSH
79170: LD_VAR 0 2
79174: PPUSH
79175: CALL_OW 250
79179: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
79180: LD_ADDR_VAR 0 8
79184: PUSH
79185: LD_VAR 0 2
79189: PPUSH
79190: CALL_OW 251
79194: ST_TO_ADDR
// if not x or not y then
79195: LD_VAR 0 7
79199: NOT
79200: PUSH
79201: LD_VAR 0 8
79205: NOT
79206: OR
79207: IFFALSE 79211
// exit ;
79209: GO 79606
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
79211: LD_ADDR_VAR 0 6
79215: PUSH
79216: LD_VAR 0 7
79220: PPUSH
79221: LD_INT 0
79223: PPUSH
79224: LD_INT 4
79226: PPUSH
79227: CALL_OW 272
79231: PUSH
79232: LD_VAR 0 8
79236: PPUSH
79237: LD_INT 0
79239: PPUSH
79240: LD_INT 4
79242: PPUSH
79243: CALL_OW 273
79247: PUSH
79248: EMPTY
79249: LIST
79250: LIST
79251: PUSH
79252: LD_VAR 0 7
79256: PPUSH
79257: LD_INT 1
79259: PPUSH
79260: LD_INT 4
79262: PPUSH
79263: CALL_OW 272
79267: PUSH
79268: LD_VAR 0 8
79272: PPUSH
79273: LD_INT 1
79275: PPUSH
79276: LD_INT 4
79278: PPUSH
79279: CALL_OW 273
79283: PUSH
79284: EMPTY
79285: LIST
79286: LIST
79287: PUSH
79288: LD_VAR 0 7
79292: PPUSH
79293: LD_INT 2
79295: PPUSH
79296: LD_INT 4
79298: PPUSH
79299: CALL_OW 272
79303: PUSH
79304: LD_VAR 0 8
79308: PPUSH
79309: LD_INT 2
79311: PPUSH
79312: LD_INT 4
79314: PPUSH
79315: CALL_OW 273
79319: PUSH
79320: EMPTY
79321: LIST
79322: LIST
79323: PUSH
79324: LD_VAR 0 7
79328: PPUSH
79329: LD_INT 3
79331: PPUSH
79332: LD_INT 4
79334: PPUSH
79335: CALL_OW 272
79339: PUSH
79340: LD_VAR 0 8
79344: PPUSH
79345: LD_INT 3
79347: PPUSH
79348: LD_INT 4
79350: PPUSH
79351: CALL_OW 273
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: PUSH
79360: LD_VAR 0 7
79364: PPUSH
79365: LD_INT 4
79367: PPUSH
79368: LD_INT 4
79370: PPUSH
79371: CALL_OW 272
79375: PUSH
79376: LD_VAR 0 8
79380: PPUSH
79381: LD_INT 4
79383: PPUSH
79384: LD_INT 4
79386: PPUSH
79387: CALL_OW 273
79391: PUSH
79392: EMPTY
79393: LIST
79394: LIST
79395: PUSH
79396: LD_VAR 0 7
79400: PPUSH
79401: LD_INT 5
79403: PPUSH
79404: LD_INT 4
79406: PPUSH
79407: CALL_OW 272
79411: PUSH
79412: LD_VAR 0 8
79416: PPUSH
79417: LD_INT 5
79419: PPUSH
79420: LD_INT 4
79422: PPUSH
79423: CALL_OW 273
79427: PUSH
79428: EMPTY
79429: LIST
79430: LIST
79431: PUSH
79432: EMPTY
79433: LIST
79434: LIST
79435: LIST
79436: LIST
79437: LIST
79438: LIST
79439: ST_TO_ADDR
// for i = tmp downto 1 do
79440: LD_ADDR_VAR 0 4
79444: PUSH
79445: DOUBLE
79446: LD_VAR 0 6
79450: INC
79451: ST_TO_ADDR
79452: LD_INT 1
79454: PUSH
79455: FOR_DOWNTO
79456: IFFALSE 79557
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
79458: LD_VAR 0 6
79462: PUSH
79463: LD_VAR 0 4
79467: ARRAY
79468: PUSH
79469: LD_INT 1
79471: ARRAY
79472: PPUSH
79473: LD_VAR 0 6
79477: PUSH
79478: LD_VAR 0 4
79482: ARRAY
79483: PUSH
79484: LD_INT 2
79486: ARRAY
79487: PPUSH
79488: CALL_OW 488
79492: NOT
79493: PUSH
79494: LD_VAR 0 6
79498: PUSH
79499: LD_VAR 0 4
79503: ARRAY
79504: PUSH
79505: LD_INT 1
79507: ARRAY
79508: PPUSH
79509: LD_VAR 0 6
79513: PUSH
79514: LD_VAR 0 4
79518: ARRAY
79519: PUSH
79520: LD_INT 2
79522: ARRAY
79523: PPUSH
79524: CALL_OW 428
79528: PUSH
79529: LD_INT 0
79531: NONEQUAL
79532: OR
79533: IFFALSE 79555
// tmp := Delete ( tmp , i ) ;
79535: LD_ADDR_VAR 0 6
79539: PUSH
79540: LD_VAR 0 6
79544: PPUSH
79545: LD_VAR 0 4
79549: PPUSH
79550: CALL_OW 3
79554: ST_TO_ADDR
79555: GO 79455
79557: POP
79558: POP
// j := GetClosestHex ( unit , tmp ) ;
79559: LD_ADDR_VAR 0 5
79563: PUSH
79564: LD_VAR 0 1
79568: PPUSH
79569: LD_VAR 0 6
79573: PPUSH
79574: CALL 78859 0 2
79578: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
79579: LD_VAR 0 1
79583: PPUSH
79584: LD_VAR 0 5
79588: PUSH
79589: LD_INT 1
79591: ARRAY
79592: PPUSH
79593: LD_VAR 0 5
79597: PUSH
79598: LD_INT 2
79600: ARRAY
79601: PPUSH
79602: CALL_OW 111
// end ;
79606: LD_VAR 0 3
79610: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
79611: LD_INT 0
79613: PPUSH
79614: PPUSH
79615: PPUSH
// uc_side = 0 ;
79616: LD_ADDR_OWVAR 20
79620: PUSH
79621: LD_INT 0
79623: ST_TO_ADDR
// uc_nation = 0 ;
79624: LD_ADDR_OWVAR 21
79628: PUSH
79629: LD_INT 0
79631: ST_TO_ADDR
// InitHc_All ( ) ;
79632: CALL_OW 584
// InitVc ;
79636: CALL_OW 20
// if mastodonts then
79640: LD_VAR 0 6
79644: IFFALSE 79711
// for i = 1 to mastodonts do
79646: LD_ADDR_VAR 0 11
79650: PUSH
79651: DOUBLE
79652: LD_INT 1
79654: DEC
79655: ST_TO_ADDR
79656: LD_VAR 0 6
79660: PUSH
79661: FOR_TO
79662: IFFALSE 79709
// begin vc_chassis := 31 ;
79664: LD_ADDR_OWVAR 37
79668: PUSH
79669: LD_INT 31
79671: ST_TO_ADDR
// vc_control := control_rider ;
79672: LD_ADDR_OWVAR 38
79676: PUSH
79677: LD_INT 4
79679: ST_TO_ADDR
// animal := CreateVehicle ;
79680: LD_ADDR_VAR 0 12
79684: PUSH
79685: CALL_OW 45
79689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79690: LD_VAR 0 12
79694: PPUSH
79695: LD_VAR 0 8
79699: PPUSH
79700: LD_INT 0
79702: PPUSH
79703: CALL 81846 0 3
// end ;
79707: GO 79661
79709: POP
79710: POP
// if horses then
79711: LD_VAR 0 5
79715: IFFALSE 79782
// for i = 1 to horses do
79717: LD_ADDR_VAR 0 11
79721: PUSH
79722: DOUBLE
79723: LD_INT 1
79725: DEC
79726: ST_TO_ADDR
79727: LD_VAR 0 5
79731: PUSH
79732: FOR_TO
79733: IFFALSE 79780
// begin hc_class := 21 ;
79735: LD_ADDR_OWVAR 28
79739: PUSH
79740: LD_INT 21
79742: ST_TO_ADDR
// hc_gallery :=  ;
79743: LD_ADDR_OWVAR 33
79747: PUSH
79748: LD_STRING 
79750: ST_TO_ADDR
// animal := CreateHuman ;
79751: LD_ADDR_VAR 0 12
79755: PUSH
79756: CALL_OW 44
79760: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79761: LD_VAR 0 12
79765: PPUSH
79766: LD_VAR 0 8
79770: PPUSH
79771: LD_INT 0
79773: PPUSH
79774: CALL 81846 0 3
// end ;
79778: GO 79732
79780: POP
79781: POP
// if birds then
79782: LD_VAR 0 1
79786: IFFALSE 79853
// for i = 1 to birds do
79788: LD_ADDR_VAR 0 11
79792: PUSH
79793: DOUBLE
79794: LD_INT 1
79796: DEC
79797: ST_TO_ADDR
79798: LD_VAR 0 1
79802: PUSH
79803: FOR_TO
79804: IFFALSE 79851
// begin hc_class = 18 ;
79806: LD_ADDR_OWVAR 28
79810: PUSH
79811: LD_INT 18
79813: ST_TO_ADDR
// hc_gallery =  ;
79814: LD_ADDR_OWVAR 33
79818: PUSH
79819: LD_STRING 
79821: ST_TO_ADDR
// animal := CreateHuman ;
79822: LD_ADDR_VAR 0 12
79826: PUSH
79827: CALL_OW 44
79831: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79832: LD_VAR 0 12
79836: PPUSH
79837: LD_VAR 0 8
79841: PPUSH
79842: LD_INT 0
79844: PPUSH
79845: CALL 81846 0 3
// end ;
79849: GO 79803
79851: POP
79852: POP
// if tigers then
79853: LD_VAR 0 2
79857: IFFALSE 79941
// for i = 1 to tigers do
79859: LD_ADDR_VAR 0 11
79863: PUSH
79864: DOUBLE
79865: LD_INT 1
79867: DEC
79868: ST_TO_ADDR
79869: LD_VAR 0 2
79873: PUSH
79874: FOR_TO
79875: IFFALSE 79939
// begin hc_class = class_tiger ;
79877: LD_ADDR_OWVAR 28
79881: PUSH
79882: LD_INT 14
79884: ST_TO_ADDR
// hc_gallery =  ;
79885: LD_ADDR_OWVAR 33
79889: PUSH
79890: LD_STRING 
79892: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
79893: LD_ADDR_OWVAR 35
79897: PUSH
79898: LD_INT 7
79900: NEG
79901: PPUSH
79902: LD_INT 7
79904: PPUSH
79905: CALL_OW 12
79909: ST_TO_ADDR
// animal := CreateHuman ;
79910: LD_ADDR_VAR 0 12
79914: PUSH
79915: CALL_OW 44
79919: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79920: LD_VAR 0 12
79924: PPUSH
79925: LD_VAR 0 8
79929: PPUSH
79930: LD_INT 0
79932: PPUSH
79933: CALL 81846 0 3
// end ;
79937: GO 79874
79939: POP
79940: POP
// if apemans then
79941: LD_VAR 0 3
79945: IFFALSE 80068
// for i = 1 to apemans do
79947: LD_ADDR_VAR 0 11
79951: PUSH
79952: DOUBLE
79953: LD_INT 1
79955: DEC
79956: ST_TO_ADDR
79957: LD_VAR 0 3
79961: PUSH
79962: FOR_TO
79963: IFFALSE 80066
// begin hc_class = class_apeman ;
79965: LD_ADDR_OWVAR 28
79969: PUSH
79970: LD_INT 12
79972: ST_TO_ADDR
// hc_gallery =  ;
79973: LD_ADDR_OWVAR 33
79977: PUSH
79978: LD_STRING 
79980: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
79981: LD_ADDR_OWVAR 35
79985: PUSH
79986: LD_INT 2
79988: NEG
79989: PPUSH
79990: LD_INT 2
79992: PPUSH
79993: CALL_OW 12
79997: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
79998: LD_ADDR_OWVAR 31
80002: PUSH
80003: LD_INT 1
80005: PPUSH
80006: LD_INT 3
80008: PPUSH
80009: CALL_OW 12
80013: PUSH
80014: LD_INT 1
80016: PPUSH
80017: LD_INT 3
80019: PPUSH
80020: CALL_OW 12
80024: PUSH
80025: LD_INT 0
80027: PUSH
80028: LD_INT 0
80030: PUSH
80031: EMPTY
80032: LIST
80033: LIST
80034: LIST
80035: LIST
80036: ST_TO_ADDR
// animal := CreateHuman ;
80037: LD_ADDR_VAR 0 12
80041: PUSH
80042: CALL_OW 44
80046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80047: LD_VAR 0 12
80051: PPUSH
80052: LD_VAR 0 8
80056: PPUSH
80057: LD_INT 0
80059: PPUSH
80060: CALL 81846 0 3
// end ;
80064: GO 79962
80066: POP
80067: POP
// if enchidnas then
80068: LD_VAR 0 4
80072: IFFALSE 80139
// for i = 1 to enchidnas do
80074: LD_ADDR_VAR 0 11
80078: PUSH
80079: DOUBLE
80080: LD_INT 1
80082: DEC
80083: ST_TO_ADDR
80084: LD_VAR 0 4
80088: PUSH
80089: FOR_TO
80090: IFFALSE 80137
// begin hc_class = 13 ;
80092: LD_ADDR_OWVAR 28
80096: PUSH
80097: LD_INT 13
80099: ST_TO_ADDR
// hc_gallery =  ;
80100: LD_ADDR_OWVAR 33
80104: PUSH
80105: LD_STRING 
80107: ST_TO_ADDR
// animal := CreateHuman ;
80108: LD_ADDR_VAR 0 12
80112: PUSH
80113: CALL_OW 44
80117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80118: LD_VAR 0 12
80122: PPUSH
80123: LD_VAR 0 8
80127: PPUSH
80128: LD_INT 0
80130: PPUSH
80131: CALL 81846 0 3
// end ;
80135: GO 80089
80137: POP
80138: POP
// if fishes then
80139: LD_VAR 0 7
80143: IFFALSE 80210
// for i = 1 to fishes do
80145: LD_ADDR_VAR 0 11
80149: PUSH
80150: DOUBLE
80151: LD_INT 1
80153: DEC
80154: ST_TO_ADDR
80155: LD_VAR 0 7
80159: PUSH
80160: FOR_TO
80161: IFFALSE 80208
// begin hc_class = 20 ;
80163: LD_ADDR_OWVAR 28
80167: PUSH
80168: LD_INT 20
80170: ST_TO_ADDR
// hc_gallery =  ;
80171: LD_ADDR_OWVAR 33
80175: PUSH
80176: LD_STRING 
80178: ST_TO_ADDR
// animal := CreateHuman ;
80179: LD_ADDR_VAR 0 12
80183: PUSH
80184: CALL_OW 44
80188: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
80189: LD_VAR 0 12
80193: PPUSH
80194: LD_VAR 0 9
80198: PPUSH
80199: LD_INT 0
80201: PPUSH
80202: CALL 81846 0 3
// end ;
80206: GO 80160
80208: POP
80209: POP
// end ;
80210: LD_VAR 0 10
80214: RET
// export function WantHeal ( sci , unit ) ; begin
80215: LD_INT 0
80217: PPUSH
// if GetTaskList ( sci ) > 0 then
80218: LD_VAR 0 1
80222: PPUSH
80223: CALL_OW 437
80227: PUSH
80228: LD_INT 0
80230: GREATER
80231: IFFALSE 80301
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
80233: LD_VAR 0 1
80237: PPUSH
80238: CALL_OW 437
80242: PUSH
80243: LD_INT 1
80245: ARRAY
80246: PUSH
80247: LD_INT 1
80249: ARRAY
80250: PUSH
80251: LD_STRING l
80253: EQUAL
80254: PUSH
80255: LD_VAR 0 1
80259: PPUSH
80260: CALL_OW 437
80264: PUSH
80265: LD_INT 1
80267: ARRAY
80268: PUSH
80269: LD_INT 4
80271: ARRAY
80272: PUSH
80273: LD_VAR 0 2
80277: EQUAL
80278: AND
80279: IFFALSE 80291
// result := true else
80281: LD_ADDR_VAR 0 3
80285: PUSH
80286: LD_INT 1
80288: ST_TO_ADDR
80289: GO 80299
// result := false ;
80291: LD_ADDR_VAR 0 3
80295: PUSH
80296: LD_INT 0
80298: ST_TO_ADDR
// end else
80299: GO 80309
// result := false ;
80301: LD_ADDR_VAR 0 3
80305: PUSH
80306: LD_INT 0
80308: ST_TO_ADDR
// end ;
80309: LD_VAR 0 3
80313: RET
// export function HealTarget ( sci ) ; begin
80314: LD_INT 0
80316: PPUSH
// if not sci then
80317: LD_VAR 0 1
80321: NOT
80322: IFFALSE 80326
// exit ;
80324: GO 80391
// result := 0 ;
80326: LD_ADDR_VAR 0 2
80330: PUSH
80331: LD_INT 0
80333: ST_TO_ADDR
// if GetTaskList ( sci ) then
80334: LD_VAR 0 1
80338: PPUSH
80339: CALL_OW 437
80343: IFFALSE 80391
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
80345: LD_VAR 0 1
80349: PPUSH
80350: CALL_OW 437
80354: PUSH
80355: LD_INT 1
80357: ARRAY
80358: PUSH
80359: LD_INT 1
80361: ARRAY
80362: PUSH
80363: LD_STRING l
80365: EQUAL
80366: IFFALSE 80391
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
80368: LD_ADDR_VAR 0 2
80372: PUSH
80373: LD_VAR 0 1
80377: PPUSH
80378: CALL_OW 437
80382: PUSH
80383: LD_INT 1
80385: ARRAY
80386: PUSH
80387: LD_INT 4
80389: ARRAY
80390: ST_TO_ADDR
// end ;
80391: LD_VAR 0 2
80395: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
80396: LD_INT 0
80398: PPUSH
80399: PPUSH
80400: PPUSH
80401: PPUSH
// if not base_units then
80402: LD_VAR 0 1
80406: NOT
80407: IFFALSE 80411
// exit ;
80409: GO 80498
// result := false ;
80411: LD_ADDR_VAR 0 2
80415: PUSH
80416: LD_INT 0
80418: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
80419: LD_ADDR_VAR 0 5
80423: PUSH
80424: LD_VAR 0 1
80428: PPUSH
80429: LD_INT 21
80431: PUSH
80432: LD_INT 3
80434: PUSH
80435: EMPTY
80436: LIST
80437: LIST
80438: PPUSH
80439: CALL_OW 72
80443: ST_TO_ADDR
// if not tmp then
80444: LD_VAR 0 5
80448: NOT
80449: IFFALSE 80453
// exit ;
80451: GO 80498
// for i in tmp do
80453: LD_ADDR_VAR 0 3
80457: PUSH
80458: LD_VAR 0 5
80462: PUSH
80463: FOR_IN
80464: IFFALSE 80496
// begin result := EnemyInRange ( i , 22 ) ;
80466: LD_ADDR_VAR 0 2
80470: PUSH
80471: LD_VAR 0 3
80475: PPUSH
80476: LD_INT 22
80478: PPUSH
80479: CALL 78734 0 2
80483: ST_TO_ADDR
// if result then
80484: LD_VAR 0 2
80488: IFFALSE 80494
// exit ;
80490: POP
80491: POP
80492: GO 80498
// end ;
80494: GO 80463
80496: POP
80497: POP
// end ;
80498: LD_VAR 0 2
80502: RET
// export function FilterByTag ( units , tag ) ; begin
80503: LD_INT 0
80505: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
80506: LD_ADDR_VAR 0 3
80510: PUSH
80511: LD_VAR 0 1
80515: PPUSH
80516: LD_INT 120
80518: PUSH
80519: LD_VAR 0 2
80523: PUSH
80524: EMPTY
80525: LIST
80526: LIST
80527: PPUSH
80528: CALL_OW 72
80532: ST_TO_ADDR
// end ;
80533: LD_VAR 0 3
80537: RET
// export function IsDriver ( un ) ; begin
80538: LD_INT 0
80540: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
80541: LD_ADDR_VAR 0 2
80545: PUSH
80546: LD_VAR 0 1
80550: PUSH
80551: LD_INT 55
80553: PUSH
80554: EMPTY
80555: LIST
80556: PPUSH
80557: CALL_OW 69
80561: IN
80562: ST_TO_ADDR
// end ;
80563: LD_VAR 0 2
80567: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
80568: LD_INT 0
80570: PPUSH
80571: PPUSH
// list := [ ] ;
80572: LD_ADDR_VAR 0 5
80576: PUSH
80577: EMPTY
80578: ST_TO_ADDR
// case d of 0 :
80579: LD_VAR 0 3
80583: PUSH
80584: LD_INT 0
80586: DOUBLE
80587: EQUAL
80588: IFTRUE 80592
80590: GO 80725
80592: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
80593: LD_ADDR_VAR 0 5
80597: PUSH
80598: LD_VAR 0 1
80602: PUSH
80603: LD_INT 4
80605: MINUS
80606: PUSH
80607: LD_VAR 0 2
80611: PUSH
80612: LD_INT 4
80614: MINUS
80615: PUSH
80616: LD_INT 2
80618: PUSH
80619: EMPTY
80620: LIST
80621: LIST
80622: LIST
80623: PUSH
80624: LD_VAR 0 1
80628: PUSH
80629: LD_INT 3
80631: MINUS
80632: PUSH
80633: LD_VAR 0 2
80637: PUSH
80638: LD_INT 1
80640: PUSH
80641: EMPTY
80642: LIST
80643: LIST
80644: LIST
80645: PUSH
80646: LD_VAR 0 1
80650: PUSH
80651: LD_INT 4
80653: PLUS
80654: PUSH
80655: LD_VAR 0 2
80659: PUSH
80660: LD_INT 4
80662: PUSH
80663: EMPTY
80664: LIST
80665: LIST
80666: LIST
80667: PUSH
80668: LD_VAR 0 1
80672: PUSH
80673: LD_INT 3
80675: PLUS
80676: PUSH
80677: LD_VAR 0 2
80681: PUSH
80682: LD_INT 3
80684: PLUS
80685: PUSH
80686: LD_INT 5
80688: PUSH
80689: EMPTY
80690: LIST
80691: LIST
80692: LIST
80693: PUSH
80694: LD_VAR 0 1
80698: PUSH
80699: LD_VAR 0 2
80703: PUSH
80704: LD_INT 4
80706: PLUS
80707: PUSH
80708: LD_INT 0
80710: PUSH
80711: EMPTY
80712: LIST
80713: LIST
80714: LIST
80715: PUSH
80716: EMPTY
80717: LIST
80718: LIST
80719: LIST
80720: LIST
80721: LIST
80722: ST_TO_ADDR
// end ; 1 :
80723: GO 81423
80725: LD_INT 1
80727: DOUBLE
80728: EQUAL
80729: IFTRUE 80733
80731: GO 80866
80733: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
80734: LD_ADDR_VAR 0 5
80738: PUSH
80739: LD_VAR 0 1
80743: PUSH
80744: LD_VAR 0 2
80748: PUSH
80749: LD_INT 4
80751: MINUS
80752: PUSH
80753: LD_INT 3
80755: PUSH
80756: EMPTY
80757: LIST
80758: LIST
80759: LIST
80760: PUSH
80761: LD_VAR 0 1
80765: PUSH
80766: LD_INT 3
80768: MINUS
80769: PUSH
80770: LD_VAR 0 2
80774: PUSH
80775: LD_INT 3
80777: MINUS
80778: PUSH
80779: LD_INT 2
80781: PUSH
80782: EMPTY
80783: LIST
80784: LIST
80785: LIST
80786: PUSH
80787: LD_VAR 0 1
80791: PUSH
80792: LD_INT 4
80794: MINUS
80795: PUSH
80796: LD_VAR 0 2
80800: PUSH
80801: LD_INT 1
80803: PUSH
80804: EMPTY
80805: LIST
80806: LIST
80807: LIST
80808: PUSH
80809: LD_VAR 0 1
80813: PUSH
80814: LD_VAR 0 2
80818: PUSH
80819: LD_INT 3
80821: PLUS
80822: PUSH
80823: LD_INT 0
80825: PUSH
80826: EMPTY
80827: LIST
80828: LIST
80829: LIST
80830: PUSH
80831: LD_VAR 0 1
80835: PUSH
80836: LD_INT 4
80838: PLUS
80839: PUSH
80840: LD_VAR 0 2
80844: PUSH
80845: LD_INT 4
80847: PLUS
80848: PUSH
80849: LD_INT 5
80851: PUSH
80852: EMPTY
80853: LIST
80854: LIST
80855: LIST
80856: PUSH
80857: EMPTY
80858: LIST
80859: LIST
80860: LIST
80861: LIST
80862: LIST
80863: ST_TO_ADDR
// end ; 2 :
80864: GO 81423
80866: LD_INT 2
80868: DOUBLE
80869: EQUAL
80870: IFTRUE 80874
80872: GO 81003
80874: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
80875: LD_ADDR_VAR 0 5
80879: PUSH
80880: LD_VAR 0 1
80884: PUSH
80885: LD_VAR 0 2
80889: PUSH
80890: LD_INT 3
80892: MINUS
80893: PUSH
80894: LD_INT 3
80896: PUSH
80897: EMPTY
80898: LIST
80899: LIST
80900: LIST
80901: PUSH
80902: LD_VAR 0 1
80906: PUSH
80907: LD_INT 4
80909: PLUS
80910: PUSH
80911: LD_VAR 0 2
80915: PUSH
80916: LD_INT 4
80918: PUSH
80919: EMPTY
80920: LIST
80921: LIST
80922: LIST
80923: PUSH
80924: LD_VAR 0 1
80928: PUSH
80929: LD_VAR 0 2
80933: PUSH
80934: LD_INT 4
80936: PLUS
80937: PUSH
80938: LD_INT 0
80940: PUSH
80941: EMPTY
80942: LIST
80943: LIST
80944: LIST
80945: PUSH
80946: LD_VAR 0 1
80950: PUSH
80951: LD_INT 3
80953: MINUS
80954: PUSH
80955: LD_VAR 0 2
80959: PUSH
80960: LD_INT 1
80962: PUSH
80963: EMPTY
80964: LIST
80965: LIST
80966: LIST
80967: PUSH
80968: LD_VAR 0 1
80972: PUSH
80973: LD_INT 4
80975: MINUS
80976: PUSH
80977: LD_VAR 0 2
80981: PUSH
80982: LD_INT 4
80984: MINUS
80985: PUSH
80986: LD_INT 2
80988: PUSH
80989: EMPTY
80990: LIST
80991: LIST
80992: LIST
80993: PUSH
80994: EMPTY
80995: LIST
80996: LIST
80997: LIST
80998: LIST
80999: LIST
81000: ST_TO_ADDR
// end ; 3 :
81001: GO 81423
81003: LD_INT 3
81005: DOUBLE
81006: EQUAL
81007: IFTRUE 81011
81009: GO 81144
81011: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
81012: LD_ADDR_VAR 0 5
81016: PUSH
81017: LD_VAR 0 1
81021: PUSH
81022: LD_INT 3
81024: PLUS
81025: PUSH
81026: LD_VAR 0 2
81030: PUSH
81031: LD_INT 4
81033: PUSH
81034: EMPTY
81035: LIST
81036: LIST
81037: LIST
81038: PUSH
81039: LD_VAR 0 1
81043: PUSH
81044: LD_INT 4
81046: PLUS
81047: PUSH
81048: LD_VAR 0 2
81052: PUSH
81053: LD_INT 4
81055: PLUS
81056: PUSH
81057: LD_INT 5
81059: PUSH
81060: EMPTY
81061: LIST
81062: LIST
81063: LIST
81064: PUSH
81065: LD_VAR 0 1
81069: PUSH
81070: LD_INT 4
81072: MINUS
81073: PUSH
81074: LD_VAR 0 2
81078: PUSH
81079: LD_INT 1
81081: PUSH
81082: EMPTY
81083: LIST
81084: LIST
81085: LIST
81086: PUSH
81087: LD_VAR 0 1
81091: PUSH
81092: LD_VAR 0 2
81096: PUSH
81097: LD_INT 4
81099: MINUS
81100: PUSH
81101: LD_INT 3
81103: PUSH
81104: EMPTY
81105: LIST
81106: LIST
81107: LIST
81108: PUSH
81109: LD_VAR 0 1
81113: PUSH
81114: LD_INT 3
81116: MINUS
81117: PUSH
81118: LD_VAR 0 2
81122: PUSH
81123: LD_INT 3
81125: MINUS
81126: PUSH
81127: LD_INT 2
81129: PUSH
81130: EMPTY
81131: LIST
81132: LIST
81133: LIST
81134: PUSH
81135: EMPTY
81136: LIST
81137: LIST
81138: LIST
81139: LIST
81140: LIST
81141: ST_TO_ADDR
// end ; 4 :
81142: GO 81423
81144: LD_INT 4
81146: DOUBLE
81147: EQUAL
81148: IFTRUE 81152
81150: GO 81285
81152: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
81153: LD_ADDR_VAR 0 5
81157: PUSH
81158: LD_VAR 0 1
81162: PUSH
81163: LD_VAR 0 2
81167: PUSH
81168: LD_INT 4
81170: PLUS
81171: PUSH
81172: LD_INT 0
81174: PUSH
81175: EMPTY
81176: LIST
81177: LIST
81178: LIST
81179: PUSH
81180: LD_VAR 0 1
81184: PUSH
81185: LD_INT 3
81187: PLUS
81188: PUSH
81189: LD_VAR 0 2
81193: PUSH
81194: LD_INT 3
81196: PLUS
81197: PUSH
81198: LD_INT 5
81200: PUSH
81201: EMPTY
81202: LIST
81203: LIST
81204: LIST
81205: PUSH
81206: LD_VAR 0 1
81210: PUSH
81211: LD_INT 4
81213: PLUS
81214: PUSH
81215: LD_VAR 0 2
81219: PUSH
81220: LD_INT 4
81222: PUSH
81223: EMPTY
81224: LIST
81225: LIST
81226: LIST
81227: PUSH
81228: LD_VAR 0 1
81232: PUSH
81233: LD_VAR 0 2
81237: PUSH
81238: LD_INT 3
81240: MINUS
81241: PUSH
81242: LD_INT 3
81244: PUSH
81245: EMPTY
81246: LIST
81247: LIST
81248: LIST
81249: PUSH
81250: LD_VAR 0 1
81254: PUSH
81255: LD_INT 4
81257: MINUS
81258: PUSH
81259: LD_VAR 0 2
81263: PUSH
81264: LD_INT 4
81266: MINUS
81267: PUSH
81268: LD_INT 2
81270: PUSH
81271: EMPTY
81272: LIST
81273: LIST
81274: LIST
81275: PUSH
81276: EMPTY
81277: LIST
81278: LIST
81279: LIST
81280: LIST
81281: LIST
81282: ST_TO_ADDR
// end ; 5 :
81283: GO 81423
81285: LD_INT 5
81287: DOUBLE
81288: EQUAL
81289: IFTRUE 81293
81291: GO 81422
81293: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
81294: LD_ADDR_VAR 0 5
81298: PUSH
81299: LD_VAR 0 1
81303: PUSH
81304: LD_INT 4
81306: MINUS
81307: PUSH
81308: LD_VAR 0 2
81312: PUSH
81313: LD_INT 1
81315: PUSH
81316: EMPTY
81317: LIST
81318: LIST
81319: LIST
81320: PUSH
81321: LD_VAR 0 1
81325: PUSH
81326: LD_VAR 0 2
81330: PUSH
81331: LD_INT 4
81333: MINUS
81334: PUSH
81335: LD_INT 3
81337: PUSH
81338: EMPTY
81339: LIST
81340: LIST
81341: LIST
81342: PUSH
81343: LD_VAR 0 1
81347: PUSH
81348: LD_INT 4
81350: PLUS
81351: PUSH
81352: LD_VAR 0 2
81356: PUSH
81357: LD_INT 4
81359: PLUS
81360: PUSH
81361: LD_INT 5
81363: PUSH
81364: EMPTY
81365: LIST
81366: LIST
81367: LIST
81368: PUSH
81369: LD_VAR 0 1
81373: PUSH
81374: LD_INT 3
81376: PLUS
81377: PUSH
81378: LD_VAR 0 2
81382: PUSH
81383: LD_INT 4
81385: PUSH
81386: EMPTY
81387: LIST
81388: LIST
81389: LIST
81390: PUSH
81391: LD_VAR 0 1
81395: PUSH
81396: LD_VAR 0 2
81400: PUSH
81401: LD_INT 3
81403: PLUS
81404: PUSH
81405: LD_INT 0
81407: PUSH
81408: EMPTY
81409: LIST
81410: LIST
81411: LIST
81412: PUSH
81413: EMPTY
81414: LIST
81415: LIST
81416: LIST
81417: LIST
81418: LIST
81419: ST_TO_ADDR
// end ; end ;
81420: GO 81423
81422: POP
// result := list ;
81423: LD_ADDR_VAR 0 4
81427: PUSH
81428: LD_VAR 0 5
81432: ST_TO_ADDR
// end ;
81433: LD_VAR 0 4
81437: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
81438: LD_INT 0
81440: PPUSH
81441: PPUSH
81442: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
81443: LD_VAR 0 1
81447: NOT
81448: PUSH
81449: LD_VAR 0 2
81453: PUSH
81454: LD_INT 1
81456: PUSH
81457: LD_INT 2
81459: PUSH
81460: LD_INT 3
81462: PUSH
81463: LD_INT 4
81465: PUSH
81466: EMPTY
81467: LIST
81468: LIST
81469: LIST
81470: LIST
81471: IN
81472: NOT
81473: OR
81474: IFFALSE 81478
// exit ;
81476: GO 81570
// tmp := [ ] ;
81478: LD_ADDR_VAR 0 5
81482: PUSH
81483: EMPTY
81484: ST_TO_ADDR
// for i in units do
81485: LD_ADDR_VAR 0 4
81489: PUSH
81490: LD_VAR 0 1
81494: PUSH
81495: FOR_IN
81496: IFFALSE 81539
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
81498: LD_ADDR_VAR 0 5
81502: PUSH
81503: LD_VAR 0 5
81507: PPUSH
81508: LD_VAR 0 5
81512: PUSH
81513: LD_INT 1
81515: PLUS
81516: PPUSH
81517: LD_VAR 0 4
81521: PPUSH
81522: LD_VAR 0 2
81526: PPUSH
81527: CALL_OW 259
81531: PPUSH
81532: CALL_OW 2
81536: ST_TO_ADDR
81537: GO 81495
81539: POP
81540: POP
// if not tmp then
81541: LD_VAR 0 5
81545: NOT
81546: IFFALSE 81550
// exit ;
81548: GO 81570
// result := SortListByListDesc ( units , tmp ) ;
81550: LD_ADDR_VAR 0 3
81554: PUSH
81555: LD_VAR 0 1
81559: PPUSH
81560: LD_VAR 0 5
81564: PPUSH
81565: CALL_OW 77
81569: ST_TO_ADDR
// end ;
81570: LD_VAR 0 3
81574: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
81575: LD_INT 0
81577: PPUSH
81578: PPUSH
81579: PPUSH
// result := false ;
81580: LD_ADDR_VAR 0 3
81584: PUSH
81585: LD_INT 0
81587: ST_TO_ADDR
// x := GetX ( building ) ;
81588: LD_ADDR_VAR 0 4
81592: PUSH
81593: LD_VAR 0 2
81597: PPUSH
81598: CALL_OW 250
81602: ST_TO_ADDR
// y := GetY ( building ) ;
81603: LD_ADDR_VAR 0 5
81607: PUSH
81608: LD_VAR 0 2
81612: PPUSH
81613: CALL_OW 251
81617: ST_TO_ADDR
// if not building or not x or not y then
81618: LD_VAR 0 2
81622: NOT
81623: PUSH
81624: LD_VAR 0 4
81628: NOT
81629: OR
81630: PUSH
81631: LD_VAR 0 5
81635: NOT
81636: OR
81637: IFFALSE 81641
// exit ;
81639: GO 81733
// if GetTaskList ( unit ) then
81641: LD_VAR 0 1
81645: PPUSH
81646: CALL_OW 437
81650: IFFALSE 81733
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81652: LD_STRING e
81654: PUSH
81655: LD_VAR 0 1
81659: PPUSH
81660: CALL_OW 437
81664: PUSH
81665: LD_INT 1
81667: ARRAY
81668: PUSH
81669: LD_INT 1
81671: ARRAY
81672: EQUAL
81673: PUSH
81674: LD_VAR 0 4
81678: PUSH
81679: LD_VAR 0 1
81683: PPUSH
81684: CALL_OW 437
81688: PUSH
81689: LD_INT 1
81691: ARRAY
81692: PUSH
81693: LD_INT 2
81695: ARRAY
81696: EQUAL
81697: AND
81698: PUSH
81699: LD_VAR 0 5
81703: PUSH
81704: LD_VAR 0 1
81708: PPUSH
81709: CALL_OW 437
81713: PUSH
81714: LD_INT 1
81716: ARRAY
81717: PUSH
81718: LD_INT 3
81720: ARRAY
81721: EQUAL
81722: AND
81723: IFFALSE 81733
// result := true end ;
81725: LD_ADDR_VAR 0 3
81729: PUSH
81730: LD_INT 1
81732: ST_TO_ADDR
// end ;
81733: LD_VAR 0 3
81737: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
81738: LD_INT 0
81740: PPUSH
// result := false ;
81741: LD_ADDR_VAR 0 4
81745: PUSH
81746: LD_INT 0
81748: ST_TO_ADDR
// if GetTaskList ( unit ) then
81749: LD_VAR 0 1
81753: PPUSH
81754: CALL_OW 437
81758: IFFALSE 81841
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81760: LD_STRING M
81762: PUSH
81763: LD_VAR 0 1
81767: PPUSH
81768: CALL_OW 437
81772: PUSH
81773: LD_INT 1
81775: ARRAY
81776: PUSH
81777: LD_INT 1
81779: ARRAY
81780: EQUAL
81781: PUSH
81782: LD_VAR 0 2
81786: PUSH
81787: LD_VAR 0 1
81791: PPUSH
81792: CALL_OW 437
81796: PUSH
81797: LD_INT 1
81799: ARRAY
81800: PUSH
81801: LD_INT 2
81803: ARRAY
81804: EQUAL
81805: AND
81806: PUSH
81807: LD_VAR 0 3
81811: PUSH
81812: LD_VAR 0 1
81816: PPUSH
81817: CALL_OW 437
81821: PUSH
81822: LD_INT 1
81824: ARRAY
81825: PUSH
81826: LD_INT 3
81828: ARRAY
81829: EQUAL
81830: AND
81831: IFFALSE 81841
// result := true ;
81833: LD_ADDR_VAR 0 4
81837: PUSH
81838: LD_INT 1
81840: ST_TO_ADDR
// end ; end ;
81841: LD_VAR 0 4
81845: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
81846: LD_INT 0
81848: PPUSH
81849: PPUSH
81850: PPUSH
81851: PPUSH
// if not unit or not area then
81852: LD_VAR 0 1
81856: NOT
81857: PUSH
81858: LD_VAR 0 2
81862: NOT
81863: OR
81864: IFFALSE 81868
// exit ;
81866: GO 82032
// tmp := AreaToList ( area , i ) ;
81868: LD_ADDR_VAR 0 6
81872: PUSH
81873: LD_VAR 0 2
81877: PPUSH
81878: LD_VAR 0 5
81882: PPUSH
81883: CALL_OW 517
81887: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
81888: LD_ADDR_VAR 0 5
81892: PUSH
81893: DOUBLE
81894: LD_INT 1
81896: DEC
81897: ST_TO_ADDR
81898: LD_VAR 0 6
81902: PUSH
81903: LD_INT 1
81905: ARRAY
81906: PUSH
81907: FOR_TO
81908: IFFALSE 82030
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
81910: LD_ADDR_VAR 0 7
81914: PUSH
81915: LD_VAR 0 6
81919: PUSH
81920: LD_INT 1
81922: ARRAY
81923: PUSH
81924: LD_VAR 0 5
81928: ARRAY
81929: PUSH
81930: LD_VAR 0 6
81934: PUSH
81935: LD_INT 2
81937: ARRAY
81938: PUSH
81939: LD_VAR 0 5
81943: ARRAY
81944: PUSH
81945: EMPTY
81946: LIST
81947: LIST
81948: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
81949: LD_VAR 0 7
81953: PUSH
81954: LD_INT 1
81956: ARRAY
81957: PPUSH
81958: LD_VAR 0 7
81962: PUSH
81963: LD_INT 2
81965: ARRAY
81966: PPUSH
81967: CALL_OW 428
81971: PUSH
81972: LD_INT 0
81974: EQUAL
81975: IFFALSE 82028
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
81977: LD_VAR 0 1
81981: PPUSH
81982: LD_VAR 0 7
81986: PUSH
81987: LD_INT 1
81989: ARRAY
81990: PPUSH
81991: LD_VAR 0 7
81995: PUSH
81996: LD_INT 2
81998: ARRAY
81999: PPUSH
82000: LD_VAR 0 3
82004: PPUSH
82005: CALL_OW 48
// result := IsPlaced ( unit ) ;
82009: LD_ADDR_VAR 0 4
82013: PUSH
82014: LD_VAR 0 1
82018: PPUSH
82019: CALL_OW 305
82023: ST_TO_ADDR
// exit ;
82024: POP
82025: POP
82026: GO 82032
// end ; end ;
82028: GO 81907
82030: POP
82031: POP
// end ;
82032: LD_VAR 0 4
82036: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
82037: LD_INT 0
82039: PPUSH
82040: PPUSH
82041: PPUSH
// if not side or side > 8 then
82042: LD_VAR 0 1
82046: NOT
82047: PUSH
82048: LD_VAR 0 1
82052: PUSH
82053: LD_INT 8
82055: GREATER
82056: OR
82057: IFFALSE 82061
// exit ;
82059: GO 82248
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
82061: LD_ADDR_VAR 0 4
82065: PUSH
82066: LD_INT 22
82068: PUSH
82069: LD_VAR 0 1
82073: PUSH
82074: EMPTY
82075: LIST
82076: LIST
82077: PUSH
82078: LD_INT 21
82080: PUSH
82081: LD_INT 3
82083: PUSH
82084: EMPTY
82085: LIST
82086: LIST
82087: PUSH
82088: EMPTY
82089: LIST
82090: LIST
82091: PPUSH
82092: CALL_OW 69
82096: ST_TO_ADDR
// if not tmp then
82097: LD_VAR 0 4
82101: NOT
82102: IFFALSE 82106
// exit ;
82104: GO 82248
// enable_addtolog := true ;
82106: LD_ADDR_OWVAR 81
82110: PUSH
82111: LD_INT 1
82113: ST_TO_ADDR
// AddToLog ( [ ) ;
82114: LD_STRING [
82116: PPUSH
82117: CALL_OW 561
// for i in tmp do
82121: LD_ADDR_VAR 0 3
82125: PUSH
82126: LD_VAR 0 4
82130: PUSH
82131: FOR_IN
82132: IFFALSE 82239
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
82134: LD_STRING [
82136: PUSH
82137: LD_VAR 0 3
82141: PPUSH
82142: CALL_OW 266
82146: STR
82147: PUSH
82148: LD_STRING , 
82150: STR
82151: PUSH
82152: LD_VAR 0 3
82156: PPUSH
82157: CALL_OW 250
82161: STR
82162: PUSH
82163: LD_STRING , 
82165: STR
82166: PUSH
82167: LD_VAR 0 3
82171: PPUSH
82172: CALL_OW 251
82176: STR
82177: PUSH
82178: LD_STRING , 
82180: STR
82181: PUSH
82182: LD_VAR 0 3
82186: PPUSH
82187: CALL_OW 254
82191: STR
82192: PUSH
82193: LD_STRING , 
82195: STR
82196: PUSH
82197: LD_VAR 0 3
82201: PPUSH
82202: LD_INT 1
82204: PPUSH
82205: CALL_OW 268
82209: STR
82210: PUSH
82211: LD_STRING , 
82213: STR
82214: PUSH
82215: LD_VAR 0 3
82219: PPUSH
82220: LD_INT 2
82222: PPUSH
82223: CALL_OW 268
82227: STR
82228: PUSH
82229: LD_STRING ],
82231: STR
82232: PPUSH
82233: CALL_OW 561
// end ;
82237: GO 82131
82239: POP
82240: POP
// AddToLog ( ]; ) ;
82241: LD_STRING ];
82243: PPUSH
82244: CALL_OW 561
// end ;
82248: LD_VAR 0 2
82252: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
82253: LD_INT 0
82255: PPUSH
82256: PPUSH
82257: PPUSH
82258: PPUSH
82259: PPUSH
// if not area or not rate or not max then
82260: LD_VAR 0 1
82264: NOT
82265: PUSH
82266: LD_VAR 0 2
82270: NOT
82271: OR
82272: PUSH
82273: LD_VAR 0 4
82277: NOT
82278: OR
82279: IFFALSE 82283
// exit ;
82281: GO 82472
// while 1 do
82283: LD_INT 1
82285: IFFALSE 82472
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
82287: LD_ADDR_VAR 0 9
82291: PUSH
82292: LD_VAR 0 1
82296: PPUSH
82297: LD_INT 1
82299: PPUSH
82300: CALL_OW 287
82304: PUSH
82305: LD_INT 10
82307: MUL
82308: ST_TO_ADDR
// r := rate / 10 ;
82309: LD_ADDR_VAR 0 7
82313: PUSH
82314: LD_VAR 0 2
82318: PUSH
82319: LD_INT 10
82321: DIVREAL
82322: ST_TO_ADDR
// time := 1 1$00 ;
82323: LD_ADDR_VAR 0 8
82327: PUSH
82328: LD_INT 2100
82330: ST_TO_ADDR
// if amount < min then
82331: LD_VAR 0 9
82335: PUSH
82336: LD_VAR 0 3
82340: LESS
82341: IFFALSE 82359
// r := r * 2 else
82343: LD_ADDR_VAR 0 7
82347: PUSH
82348: LD_VAR 0 7
82352: PUSH
82353: LD_INT 2
82355: MUL
82356: ST_TO_ADDR
82357: GO 82385
// if amount > max then
82359: LD_VAR 0 9
82363: PUSH
82364: LD_VAR 0 4
82368: GREATER
82369: IFFALSE 82385
// r := r / 2 ;
82371: LD_ADDR_VAR 0 7
82375: PUSH
82376: LD_VAR 0 7
82380: PUSH
82381: LD_INT 2
82383: DIVREAL
82384: ST_TO_ADDR
// time := time / r ;
82385: LD_ADDR_VAR 0 8
82389: PUSH
82390: LD_VAR 0 8
82394: PUSH
82395: LD_VAR 0 7
82399: DIVREAL
82400: ST_TO_ADDR
// if time < 0 then
82401: LD_VAR 0 8
82405: PUSH
82406: LD_INT 0
82408: LESS
82409: IFFALSE 82426
// time := time * - 1 ;
82411: LD_ADDR_VAR 0 8
82415: PUSH
82416: LD_VAR 0 8
82420: PUSH
82421: LD_INT 1
82423: NEG
82424: MUL
82425: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
82426: LD_VAR 0 8
82430: PUSH
82431: LD_INT 35
82433: PPUSH
82434: LD_INT 875
82436: PPUSH
82437: CALL_OW 12
82441: PLUS
82442: PPUSH
82443: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
82447: LD_INT 1
82449: PPUSH
82450: LD_INT 5
82452: PPUSH
82453: CALL_OW 12
82457: PPUSH
82458: LD_VAR 0 1
82462: PPUSH
82463: LD_INT 1
82465: PPUSH
82466: CALL_OW 55
// end ;
82470: GO 82283
// end ;
82472: LD_VAR 0 5
82476: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
82477: LD_INT 0
82479: PPUSH
82480: PPUSH
82481: PPUSH
82482: PPUSH
82483: PPUSH
82484: PPUSH
82485: PPUSH
82486: PPUSH
// if not turrets or not factories then
82487: LD_VAR 0 1
82491: NOT
82492: PUSH
82493: LD_VAR 0 2
82497: NOT
82498: OR
82499: IFFALSE 82503
// exit ;
82501: GO 82810
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
82503: LD_ADDR_VAR 0 10
82507: PUSH
82508: LD_INT 5
82510: PUSH
82511: LD_INT 6
82513: PUSH
82514: EMPTY
82515: LIST
82516: LIST
82517: PUSH
82518: LD_INT 2
82520: PUSH
82521: LD_INT 4
82523: PUSH
82524: EMPTY
82525: LIST
82526: LIST
82527: PUSH
82528: LD_INT 3
82530: PUSH
82531: LD_INT 5
82533: PUSH
82534: EMPTY
82535: LIST
82536: LIST
82537: PUSH
82538: EMPTY
82539: LIST
82540: LIST
82541: LIST
82542: PUSH
82543: LD_INT 24
82545: PUSH
82546: LD_INT 25
82548: PUSH
82549: EMPTY
82550: LIST
82551: LIST
82552: PUSH
82553: LD_INT 23
82555: PUSH
82556: LD_INT 27
82558: PUSH
82559: EMPTY
82560: LIST
82561: LIST
82562: PUSH
82563: EMPTY
82564: LIST
82565: LIST
82566: PUSH
82567: LD_INT 42
82569: PUSH
82570: LD_INT 43
82572: PUSH
82573: EMPTY
82574: LIST
82575: LIST
82576: PUSH
82577: LD_INT 44
82579: PUSH
82580: LD_INT 46
82582: PUSH
82583: EMPTY
82584: LIST
82585: LIST
82586: PUSH
82587: LD_INT 45
82589: PUSH
82590: LD_INT 47
82592: PUSH
82593: EMPTY
82594: LIST
82595: LIST
82596: PUSH
82597: EMPTY
82598: LIST
82599: LIST
82600: LIST
82601: PUSH
82602: EMPTY
82603: LIST
82604: LIST
82605: LIST
82606: ST_TO_ADDR
// result := [ ] ;
82607: LD_ADDR_VAR 0 3
82611: PUSH
82612: EMPTY
82613: ST_TO_ADDR
// for i in turrets do
82614: LD_ADDR_VAR 0 4
82618: PUSH
82619: LD_VAR 0 1
82623: PUSH
82624: FOR_IN
82625: IFFALSE 82808
// begin nat := GetNation ( i ) ;
82627: LD_ADDR_VAR 0 7
82631: PUSH
82632: LD_VAR 0 4
82636: PPUSH
82637: CALL_OW 248
82641: ST_TO_ADDR
// weapon := 0 ;
82642: LD_ADDR_VAR 0 8
82646: PUSH
82647: LD_INT 0
82649: ST_TO_ADDR
// if not nat then
82650: LD_VAR 0 7
82654: NOT
82655: IFFALSE 82659
// continue ;
82657: GO 82624
// for j in list [ nat ] do
82659: LD_ADDR_VAR 0 5
82663: PUSH
82664: LD_VAR 0 10
82668: PUSH
82669: LD_VAR 0 7
82673: ARRAY
82674: PUSH
82675: FOR_IN
82676: IFFALSE 82717
// if GetBWeapon ( i ) = j [ 1 ] then
82678: LD_VAR 0 4
82682: PPUSH
82683: CALL_OW 269
82687: PUSH
82688: LD_VAR 0 5
82692: PUSH
82693: LD_INT 1
82695: ARRAY
82696: EQUAL
82697: IFFALSE 82715
// begin weapon := j [ 2 ] ;
82699: LD_ADDR_VAR 0 8
82703: PUSH
82704: LD_VAR 0 5
82708: PUSH
82709: LD_INT 2
82711: ARRAY
82712: ST_TO_ADDR
// break ;
82713: GO 82717
// end ;
82715: GO 82675
82717: POP
82718: POP
// if not weapon then
82719: LD_VAR 0 8
82723: NOT
82724: IFFALSE 82728
// continue ;
82726: GO 82624
// for k in factories do
82728: LD_ADDR_VAR 0 6
82732: PUSH
82733: LD_VAR 0 2
82737: PUSH
82738: FOR_IN
82739: IFFALSE 82804
// begin weapons := AvailableWeaponList ( k ) ;
82741: LD_ADDR_VAR 0 9
82745: PUSH
82746: LD_VAR 0 6
82750: PPUSH
82751: CALL_OW 478
82755: ST_TO_ADDR
// if not weapons then
82756: LD_VAR 0 9
82760: NOT
82761: IFFALSE 82765
// continue ;
82763: GO 82738
// if weapon in weapons then
82765: LD_VAR 0 8
82769: PUSH
82770: LD_VAR 0 9
82774: IN
82775: IFFALSE 82802
// begin result := [ i , weapon ] ;
82777: LD_ADDR_VAR 0 3
82781: PUSH
82782: LD_VAR 0 4
82786: PUSH
82787: LD_VAR 0 8
82791: PUSH
82792: EMPTY
82793: LIST
82794: LIST
82795: ST_TO_ADDR
// exit ;
82796: POP
82797: POP
82798: POP
82799: POP
82800: GO 82810
// end ; end ;
82802: GO 82738
82804: POP
82805: POP
// end ;
82806: GO 82624
82808: POP
82809: POP
// end ;
82810: LD_VAR 0 3
82814: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
82815: LD_INT 0
82817: PPUSH
// if not side or side > 8 then
82818: LD_VAR 0 3
82822: NOT
82823: PUSH
82824: LD_VAR 0 3
82828: PUSH
82829: LD_INT 8
82831: GREATER
82832: OR
82833: IFFALSE 82837
// exit ;
82835: GO 82896
// if not range then
82837: LD_VAR 0 4
82841: NOT
82842: IFFALSE 82853
// range := - 12 ;
82844: LD_ADDR_VAR 0 4
82848: PUSH
82849: LD_INT 12
82851: NEG
82852: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
82853: LD_VAR 0 1
82857: PPUSH
82858: LD_VAR 0 2
82862: PPUSH
82863: LD_VAR 0 3
82867: PPUSH
82868: LD_VAR 0 4
82872: PPUSH
82873: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
82877: LD_VAR 0 1
82881: PPUSH
82882: LD_VAR 0 2
82886: PPUSH
82887: LD_VAR 0 3
82891: PPUSH
82892: CALL_OW 331
// end ;
82896: LD_VAR 0 5
82900: RET
// export function Video ( mode ) ; begin
82901: LD_INT 0
82903: PPUSH
// ingame_video = mode ;
82904: LD_ADDR_OWVAR 52
82908: PUSH
82909: LD_VAR 0 1
82913: ST_TO_ADDR
// interface_hidden = mode ;
82914: LD_ADDR_OWVAR 54
82918: PUSH
82919: LD_VAR 0 1
82923: ST_TO_ADDR
// end ;
82924: LD_VAR 0 2
82928: RET
// export function Join ( array , element ) ; begin
82929: LD_INT 0
82931: PPUSH
// result := Replace ( array , array + 1 , element ) ;
82932: LD_ADDR_VAR 0 3
82936: PUSH
82937: LD_VAR 0 1
82941: PPUSH
82942: LD_VAR 0 1
82946: PUSH
82947: LD_INT 1
82949: PLUS
82950: PPUSH
82951: LD_VAR 0 2
82955: PPUSH
82956: CALL_OW 1
82960: ST_TO_ADDR
// end ;
82961: LD_VAR 0 3
82965: RET
// export function JoinUnion ( array , element ) ; begin
82966: LD_INT 0
82968: PPUSH
// result := array union element ;
82969: LD_ADDR_VAR 0 3
82973: PUSH
82974: LD_VAR 0 1
82978: PUSH
82979: LD_VAR 0 2
82983: UNION
82984: ST_TO_ADDR
// end ;
82985: LD_VAR 0 3
82989: RET
// export function GetBehemoths ( side ) ; begin
82990: LD_INT 0
82992: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
82993: LD_ADDR_VAR 0 2
82997: PUSH
82998: LD_INT 22
83000: PUSH
83001: LD_VAR 0 1
83005: PUSH
83006: EMPTY
83007: LIST
83008: LIST
83009: PUSH
83010: LD_INT 31
83012: PUSH
83013: LD_INT 25
83015: PUSH
83016: EMPTY
83017: LIST
83018: LIST
83019: PUSH
83020: EMPTY
83021: LIST
83022: LIST
83023: PPUSH
83024: CALL_OW 69
83028: ST_TO_ADDR
// end ;
83029: LD_VAR 0 2
83033: RET
// export function Shuffle ( array ) ; var i , index ; begin
83034: LD_INT 0
83036: PPUSH
83037: PPUSH
83038: PPUSH
// result := [ ] ;
83039: LD_ADDR_VAR 0 2
83043: PUSH
83044: EMPTY
83045: ST_TO_ADDR
// if not array then
83046: LD_VAR 0 1
83050: NOT
83051: IFFALSE 83055
// exit ;
83053: GO 83154
// Randomize ;
83055: CALL_OW 10
// for i = array downto 1 do
83059: LD_ADDR_VAR 0 3
83063: PUSH
83064: DOUBLE
83065: LD_VAR 0 1
83069: INC
83070: ST_TO_ADDR
83071: LD_INT 1
83073: PUSH
83074: FOR_DOWNTO
83075: IFFALSE 83152
// begin index := rand ( 1 , array ) ;
83077: LD_ADDR_VAR 0 4
83081: PUSH
83082: LD_INT 1
83084: PPUSH
83085: LD_VAR 0 1
83089: PPUSH
83090: CALL_OW 12
83094: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
83095: LD_ADDR_VAR 0 2
83099: PUSH
83100: LD_VAR 0 2
83104: PPUSH
83105: LD_VAR 0 2
83109: PUSH
83110: LD_INT 1
83112: PLUS
83113: PPUSH
83114: LD_VAR 0 1
83118: PUSH
83119: LD_VAR 0 4
83123: ARRAY
83124: PPUSH
83125: CALL_OW 2
83129: ST_TO_ADDR
// array := Delete ( array , index ) ;
83130: LD_ADDR_VAR 0 1
83134: PUSH
83135: LD_VAR 0 1
83139: PPUSH
83140: LD_VAR 0 4
83144: PPUSH
83145: CALL_OW 3
83149: ST_TO_ADDR
// end ;
83150: GO 83074
83152: POP
83153: POP
// end ;
83154: LD_VAR 0 2
83158: RET
// export function GetBaseMaterials ( base ) ; begin
83159: LD_INT 0
83161: PPUSH
// result := [ 0 , 0 , 0 ] ;
83162: LD_ADDR_VAR 0 2
83166: PUSH
83167: LD_INT 0
83169: PUSH
83170: LD_INT 0
83172: PUSH
83173: LD_INT 0
83175: PUSH
83176: EMPTY
83177: LIST
83178: LIST
83179: LIST
83180: ST_TO_ADDR
// if not base then
83181: LD_VAR 0 1
83185: NOT
83186: IFFALSE 83190
// exit ;
83188: GO 83239
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
83190: LD_ADDR_VAR 0 2
83194: PUSH
83195: LD_VAR 0 1
83199: PPUSH
83200: LD_INT 1
83202: PPUSH
83203: CALL_OW 275
83207: PUSH
83208: LD_VAR 0 1
83212: PPUSH
83213: LD_INT 2
83215: PPUSH
83216: CALL_OW 275
83220: PUSH
83221: LD_VAR 0 1
83225: PPUSH
83226: LD_INT 3
83228: PPUSH
83229: CALL_OW 275
83233: PUSH
83234: EMPTY
83235: LIST
83236: LIST
83237: LIST
83238: ST_TO_ADDR
// end ;
83239: LD_VAR 0 2
83243: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
83244: LD_INT 0
83246: PPUSH
83247: PPUSH
// result := array ;
83248: LD_ADDR_VAR 0 3
83252: PUSH
83253: LD_VAR 0 1
83257: ST_TO_ADDR
// if size > 0 then
83258: LD_VAR 0 2
83262: PUSH
83263: LD_INT 0
83265: GREATER
83266: IFFALSE 83312
// for i := array downto size do
83268: LD_ADDR_VAR 0 4
83272: PUSH
83273: DOUBLE
83274: LD_VAR 0 1
83278: INC
83279: ST_TO_ADDR
83280: LD_VAR 0 2
83284: PUSH
83285: FOR_DOWNTO
83286: IFFALSE 83310
// result := Delete ( result , result ) ;
83288: LD_ADDR_VAR 0 3
83292: PUSH
83293: LD_VAR 0 3
83297: PPUSH
83298: LD_VAR 0 3
83302: PPUSH
83303: CALL_OW 3
83307: ST_TO_ADDR
83308: GO 83285
83310: POP
83311: POP
// end ;
83312: LD_VAR 0 3
83316: RET
// export function ComExit ( unit ) ; var tmp ; begin
83317: LD_INT 0
83319: PPUSH
83320: PPUSH
// if not IsInUnit ( unit ) then
83321: LD_VAR 0 1
83325: PPUSH
83326: CALL_OW 310
83330: NOT
83331: IFFALSE 83335
// exit ;
83333: GO 83395
// tmp := IsInUnit ( unit ) ;
83335: LD_ADDR_VAR 0 3
83339: PUSH
83340: LD_VAR 0 1
83344: PPUSH
83345: CALL_OW 310
83349: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
83350: LD_VAR 0 3
83354: PPUSH
83355: CALL_OW 247
83359: PUSH
83360: LD_INT 2
83362: EQUAL
83363: IFFALSE 83376
// ComExitVehicle ( unit ) else
83365: LD_VAR 0 1
83369: PPUSH
83370: CALL_OW 121
83374: GO 83385
// ComExitBuilding ( unit ) ;
83376: LD_VAR 0 1
83380: PPUSH
83381: CALL_OW 122
// result := tmp ;
83385: LD_ADDR_VAR 0 2
83389: PUSH
83390: LD_VAR 0 3
83394: ST_TO_ADDR
// end ;
83395: LD_VAR 0 2
83399: RET
// export function ComExitAll ( units ) ; var i ; begin
83400: LD_INT 0
83402: PPUSH
83403: PPUSH
// if not units then
83404: LD_VAR 0 1
83408: NOT
83409: IFFALSE 83413
// exit ;
83411: GO 83439
// for i in units do
83413: LD_ADDR_VAR 0 3
83417: PUSH
83418: LD_VAR 0 1
83422: PUSH
83423: FOR_IN
83424: IFFALSE 83437
// ComExit ( i ) ;
83426: LD_VAR 0 3
83430: PPUSH
83431: CALL 83317 0 1
83435: GO 83423
83437: POP
83438: POP
// end ;
83439: LD_VAR 0 2
83443: RET
// export function ResetHc ; begin
83444: LD_INT 0
83446: PPUSH
// InitHc ;
83447: CALL_OW 19
// hc_importance := 0 ;
83451: LD_ADDR_OWVAR 32
83455: PUSH
83456: LD_INT 0
83458: ST_TO_ADDR
// end ;
83459: LD_VAR 0 1
83463: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
83464: LD_INT 0
83466: PPUSH
83467: PPUSH
83468: PPUSH
// _x := ( x1 + x2 ) div 2 ;
83469: LD_ADDR_VAR 0 6
83473: PUSH
83474: LD_VAR 0 1
83478: PUSH
83479: LD_VAR 0 3
83483: PLUS
83484: PUSH
83485: LD_INT 2
83487: DIV
83488: ST_TO_ADDR
// if _x < 0 then
83489: LD_VAR 0 6
83493: PUSH
83494: LD_INT 0
83496: LESS
83497: IFFALSE 83514
// _x := _x * - 1 ;
83499: LD_ADDR_VAR 0 6
83503: PUSH
83504: LD_VAR 0 6
83508: PUSH
83509: LD_INT 1
83511: NEG
83512: MUL
83513: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
83514: LD_ADDR_VAR 0 7
83518: PUSH
83519: LD_VAR 0 2
83523: PUSH
83524: LD_VAR 0 4
83528: PLUS
83529: PUSH
83530: LD_INT 2
83532: DIV
83533: ST_TO_ADDR
// if _y < 0 then
83534: LD_VAR 0 7
83538: PUSH
83539: LD_INT 0
83541: LESS
83542: IFFALSE 83559
// _y := _y * - 1 ;
83544: LD_ADDR_VAR 0 7
83548: PUSH
83549: LD_VAR 0 7
83553: PUSH
83554: LD_INT 1
83556: NEG
83557: MUL
83558: ST_TO_ADDR
// result := [ _x , _y ] ;
83559: LD_ADDR_VAR 0 5
83563: PUSH
83564: LD_VAR 0 6
83568: PUSH
83569: LD_VAR 0 7
83573: PUSH
83574: EMPTY
83575: LIST
83576: LIST
83577: ST_TO_ADDR
// end ;
83578: LD_VAR 0 5
83582: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
83583: LD_INT 0
83585: PPUSH
83586: PPUSH
83587: PPUSH
83588: PPUSH
// task := GetTaskList ( unit ) ;
83589: LD_ADDR_VAR 0 7
83593: PUSH
83594: LD_VAR 0 1
83598: PPUSH
83599: CALL_OW 437
83603: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
83604: LD_VAR 0 7
83608: NOT
83609: PUSH
83610: LD_VAR 0 1
83614: PPUSH
83615: LD_VAR 0 2
83619: PPUSH
83620: CALL_OW 308
83624: NOT
83625: AND
83626: IFFALSE 83630
// exit ;
83628: GO 83748
// if IsInArea ( unit , area ) then
83630: LD_VAR 0 1
83634: PPUSH
83635: LD_VAR 0 2
83639: PPUSH
83640: CALL_OW 308
83644: IFFALSE 83662
// begin ComMoveToArea ( unit , goAway ) ;
83646: LD_VAR 0 1
83650: PPUSH
83651: LD_VAR 0 3
83655: PPUSH
83656: CALL_OW 113
// exit ;
83660: GO 83748
// end ; if task [ 1 ] [ 1 ] <> M then
83662: LD_VAR 0 7
83666: PUSH
83667: LD_INT 1
83669: ARRAY
83670: PUSH
83671: LD_INT 1
83673: ARRAY
83674: PUSH
83675: LD_STRING M
83677: NONEQUAL
83678: IFFALSE 83682
// exit ;
83680: GO 83748
// x := task [ 1 ] [ 2 ] ;
83682: LD_ADDR_VAR 0 5
83686: PUSH
83687: LD_VAR 0 7
83691: PUSH
83692: LD_INT 1
83694: ARRAY
83695: PUSH
83696: LD_INT 2
83698: ARRAY
83699: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
83700: LD_ADDR_VAR 0 6
83704: PUSH
83705: LD_VAR 0 7
83709: PUSH
83710: LD_INT 1
83712: ARRAY
83713: PUSH
83714: LD_INT 3
83716: ARRAY
83717: ST_TO_ADDR
// if InArea ( x , y , area ) then
83718: LD_VAR 0 5
83722: PPUSH
83723: LD_VAR 0 6
83727: PPUSH
83728: LD_VAR 0 2
83732: PPUSH
83733: CALL_OW 309
83737: IFFALSE 83748
// ComStop ( unit ) ;
83739: LD_VAR 0 1
83743: PPUSH
83744: CALL_OW 141
// end ;
83748: LD_VAR 0 4
83752: RET
// export function Abs ( value ) ; begin
83753: LD_INT 0
83755: PPUSH
// result := value ;
83756: LD_ADDR_VAR 0 2
83760: PUSH
83761: LD_VAR 0 1
83765: ST_TO_ADDR
// if value < 0 then
83766: LD_VAR 0 1
83770: PUSH
83771: LD_INT 0
83773: LESS
83774: IFFALSE 83791
// result := value * - 1 ;
83776: LD_ADDR_VAR 0 2
83780: PUSH
83781: LD_VAR 0 1
83785: PUSH
83786: LD_INT 1
83788: NEG
83789: MUL
83790: ST_TO_ADDR
// end ;
83791: LD_VAR 0 2
83795: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
83796: LD_INT 0
83798: PPUSH
83799: PPUSH
83800: PPUSH
83801: PPUSH
83802: PPUSH
83803: PPUSH
83804: PPUSH
83805: PPUSH
// if not unit or not building then
83806: LD_VAR 0 1
83810: NOT
83811: PUSH
83812: LD_VAR 0 2
83816: NOT
83817: OR
83818: IFFALSE 83822
// exit ;
83820: GO 84048
// x := GetX ( building ) ;
83822: LD_ADDR_VAR 0 4
83826: PUSH
83827: LD_VAR 0 2
83831: PPUSH
83832: CALL_OW 250
83836: ST_TO_ADDR
// y := GetY ( building ) ;
83837: LD_ADDR_VAR 0 6
83841: PUSH
83842: LD_VAR 0 2
83846: PPUSH
83847: CALL_OW 251
83851: ST_TO_ADDR
// d := GetDir ( building ) ;
83852: LD_ADDR_VAR 0 8
83856: PUSH
83857: LD_VAR 0 2
83861: PPUSH
83862: CALL_OW 254
83866: ST_TO_ADDR
// r := 4 ;
83867: LD_ADDR_VAR 0 9
83871: PUSH
83872: LD_INT 4
83874: ST_TO_ADDR
// for i := 1 to 5 do
83875: LD_ADDR_VAR 0 10
83879: PUSH
83880: DOUBLE
83881: LD_INT 1
83883: DEC
83884: ST_TO_ADDR
83885: LD_INT 5
83887: PUSH
83888: FOR_TO
83889: IFFALSE 84046
// begin _x := ShiftX ( x , d , r + i ) ;
83891: LD_ADDR_VAR 0 5
83895: PUSH
83896: LD_VAR 0 4
83900: PPUSH
83901: LD_VAR 0 8
83905: PPUSH
83906: LD_VAR 0 9
83910: PUSH
83911: LD_VAR 0 10
83915: PLUS
83916: PPUSH
83917: CALL_OW 272
83921: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
83922: LD_ADDR_VAR 0 7
83926: PUSH
83927: LD_VAR 0 6
83931: PPUSH
83932: LD_VAR 0 8
83936: PPUSH
83937: LD_VAR 0 9
83941: PUSH
83942: LD_VAR 0 10
83946: PLUS
83947: PPUSH
83948: CALL_OW 273
83952: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
83953: LD_VAR 0 5
83957: PPUSH
83958: LD_VAR 0 7
83962: PPUSH
83963: CALL_OW 488
83967: PUSH
83968: LD_VAR 0 5
83972: PPUSH
83973: LD_VAR 0 7
83977: PPUSH
83978: CALL_OW 428
83982: PPUSH
83983: CALL_OW 247
83987: PUSH
83988: LD_INT 3
83990: PUSH
83991: LD_INT 2
83993: PUSH
83994: EMPTY
83995: LIST
83996: LIST
83997: IN
83998: NOT
83999: AND
84000: IFFALSE 84044
// begin ComMoveXY ( unit , _x , _y ) ;
84002: LD_VAR 0 1
84006: PPUSH
84007: LD_VAR 0 5
84011: PPUSH
84012: LD_VAR 0 7
84016: PPUSH
84017: CALL_OW 111
// result := [ _x , _y ] ;
84021: LD_ADDR_VAR 0 3
84025: PUSH
84026: LD_VAR 0 5
84030: PUSH
84031: LD_VAR 0 7
84035: PUSH
84036: EMPTY
84037: LIST
84038: LIST
84039: ST_TO_ADDR
// exit ;
84040: POP
84041: POP
84042: GO 84048
// end ; end ;
84044: GO 83888
84046: POP
84047: POP
// end ;
84048: LD_VAR 0 3
84052: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
84053: LD_INT 0
84055: PPUSH
84056: PPUSH
84057: PPUSH
// result := 0 ;
84058: LD_ADDR_VAR 0 3
84062: PUSH
84063: LD_INT 0
84065: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
84066: LD_VAR 0 1
84070: PUSH
84071: LD_INT 0
84073: LESS
84074: PUSH
84075: LD_VAR 0 1
84079: PUSH
84080: LD_INT 8
84082: GREATER
84083: OR
84084: PUSH
84085: LD_VAR 0 2
84089: PUSH
84090: LD_INT 0
84092: LESS
84093: OR
84094: PUSH
84095: LD_VAR 0 2
84099: PUSH
84100: LD_INT 8
84102: GREATER
84103: OR
84104: IFFALSE 84108
// exit ;
84106: GO 84183
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
84108: LD_ADDR_VAR 0 4
84112: PUSH
84113: LD_INT 22
84115: PUSH
84116: LD_VAR 0 2
84120: PUSH
84121: EMPTY
84122: LIST
84123: LIST
84124: PPUSH
84125: CALL_OW 69
84129: PUSH
84130: FOR_IN
84131: IFFALSE 84181
// begin un := UnitShoot ( i ) ;
84133: LD_ADDR_VAR 0 5
84137: PUSH
84138: LD_VAR 0 4
84142: PPUSH
84143: CALL_OW 504
84147: ST_TO_ADDR
// if GetSide ( un ) = side1 then
84148: LD_VAR 0 5
84152: PPUSH
84153: CALL_OW 255
84157: PUSH
84158: LD_VAR 0 1
84162: EQUAL
84163: IFFALSE 84179
// begin result := un ;
84165: LD_ADDR_VAR 0 3
84169: PUSH
84170: LD_VAR 0 5
84174: ST_TO_ADDR
// exit ;
84175: POP
84176: POP
84177: GO 84183
// end ; end ;
84179: GO 84130
84181: POP
84182: POP
// end ;
84183: LD_VAR 0 3
84187: RET
// export function GetCargoBay ( units ) ; begin
84188: LD_INT 0
84190: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
84191: LD_ADDR_VAR 0 2
84195: PUSH
84196: LD_VAR 0 1
84200: PPUSH
84201: LD_INT 2
84203: PUSH
84204: LD_INT 34
84206: PUSH
84207: LD_INT 12
84209: PUSH
84210: EMPTY
84211: LIST
84212: LIST
84213: PUSH
84214: LD_INT 34
84216: PUSH
84217: LD_INT 51
84219: PUSH
84220: EMPTY
84221: LIST
84222: LIST
84223: PUSH
84224: LD_INT 34
84226: PUSH
84227: LD_INT 32
84229: PUSH
84230: EMPTY
84231: LIST
84232: LIST
84233: PUSH
84234: LD_INT 34
84236: PUSH
84237: LD_EXP 49
84241: PUSH
84242: EMPTY
84243: LIST
84244: LIST
84245: PUSH
84246: EMPTY
84247: LIST
84248: LIST
84249: LIST
84250: LIST
84251: LIST
84252: PPUSH
84253: CALL_OW 72
84257: ST_TO_ADDR
// end ;
84258: LD_VAR 0 2
84262: RET
// export function Negate ( value ) ; begin
84263: LD_INT 0
84265: PPUSH
// result := not value ;
84266: LD_ADDR_VAR 0 2
84270: PUSH
84271: LD_VAR 0 1
84275: NOT
84276: ST_TO_ADDR
// end ;
84277: LD_VAR 0 2
84281: RET
// export function Inc ( value ) ; begin
84282: LD_INT 0
84284: PPUSH
// result := value + 1 ;
84285: LD_ADDR_VAR 0 2
84289: PUSH
84290: LD_VAR 0 1
84294: PUSH
84295: LD_INT 1
84297: PLUS
84298: ST_TO_ADDR
// end ;
84299: LD_VAR 0 2
84303: RET
// export function Dec ( value ) ; begin
84304: LD_INT 0
84306: PPUSH
// result := value - 1 ;
84307: LD_ADDR_VAR 0 2
84311: PUSH
84312: LD_VAR 0 1
84316: PUSH
84317: LD_INT 1
84319: MINUS
84320: ST_TO_ADDR
// end ;
84321: LD_VAR 0 2
84325: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
84326: LD_INT 0
84328: PPUSH
84329: PPUSH
84330: PPUSH
84331: PPUSH
84332: PPUSH
84333: PPUSH
84334: PPUSH
84335: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
84336: LD_VAR 0 1
84340: PPUSH
84341: LD_VAR 0 2
84345: PPUSH
84346: CALL_OW 488
84350: NOT
84351: PUSH
84352: LD_VAR 0 3
84356: PPUSH
84357: LD_VAR 0 4
84361: PPUSH
84362: CALL_OW 488
84366: NOT
84367: OR
84368: IFFALSE 84381
// begin result := - 1 ;
84370: LD_ADDR_VAR 0 5
84374: PUSH
84375: LD_INT 1
84377: NEG
84378: ST_TO_ADDR
// exit ;
84379: GO 84616
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
84381: LD_ADDR_VAR 0 12
84385: PUSH
84386: LD_VAR 0 1
84390: PPUSH
84391: LD_VAR 0 2
84395: PPUSH
84396: LD_VAR 0 3
84400: PPUSH
84401: LD_VAR 0 4
84405: PPUSH
84406: CALL 83464 0 4
84410: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
84411: LD_ADDR_VAR 0 11
84415: PUSH
84416: LD_VAR 0 1
84420: PPUSH
84421: LD_VAR 0 2
84425: PPUSH
84426: LD_VAR 0 12
84430: PUSH
84431: LD_INT 1
84433: ARRAY
84434: PPUSH
84435: LD_VAR 0 12
84439: PUSH
84440: LD_INT 2
84442: ARRAY
84443: PPUSH
84444: CALL_OW 298
84448: ST_TO_ADDR
// distance := 9999 ;
84449: LD_ADDR_VAR 0 10
84453: PUSH
84454: LD_INT 9999
84456: ST_TO_ADDR
// for i := 0 to 5 do
84457: LD_ADDR_VAR 0 6
84461: PUSH
84462: DOUBLE
84463: LD_INT 0
84465: DEC
84466: ST_TO_ADDR
84467: LD_INT 5
84469: PUSH
84470: FOR_TO
84471: IFFALSE 84614
// begin _x := ShiftX ( x1 , i , centerDist ) ;
84473: LD_ADDR_VAR 0 7
84477: PUSH
84478: LD_VAR 0 1
84482: PPUSH
84483: LD_VAR 0 6
84487: PPUSH
84488: LD_VAR 0 11
84492: PPUSH
84493: CALL_OW 272
84497: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
84498: LD_ADDR_VAR 0 8
84502: PUSH
84503: LD_VAR 0 2
84507: PPUSH
84508: LD_VAR 0 6
84512: PPUSH
84513: LD_VAR 0 11
84517: PPUSH
84518: CALL_OW 273
84522: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
84523: LD_VAR 0 7
84527: PPUSH
84528: LD_VAR 0 8
84532: PPUSH
84533: CALL_OW 488
84537: NOT
84538: IFFALSE 84542
// continue ;
84540: GO 84470
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
84542: LD_ADDR_VAR 0 9
84546: PUSH
84547: LD_VAR 0 12
84551: PUSH
84552: LD_INT 1
84554: ARRAY
84555: PPUSH
84556: LD_VAR 0 12
84560: PUSH
84561: LD_INT 2
84563: ARRAY
84564: PPUSH
84565: LD_VAR 0 7
84569: PPUSH
84570: LD_VAR 0 8
84574: PPUSH
84575: CALL_OW 298
84579: ST_TO_ADDR
// if tmp < distance then
84580: LD_VAR 0 9
84584: PUSH
84585: LD_VAR 0 10
84589: LESS
84590: IFFALSE 84612
// begin result := i ;
84592: LD_ADDR_VAR 0 5
84596: PUSH
84597: LD_VAR 0 6
84601: ST_TO_ADDR
// distance := tmp ;
84602: LD_ADDR_VAR 0 10
84606: PUSH
84607: LD_VAR 0 9
84611: ST_TO_ADDR
// end ; end ;
84612: GO 84470
84614: POP
84615: POP
// end ;
84616: LD_VAR 0 5
84620: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
84621: LD_INT 0
84623: PPUSH
84624: PPUSH
// if not driver or not IsInUnit ( driver ) then
84625: LD_VAR 0 1
84629: NOT
84630: PUSH
84631: LD_VAR 0 1
84635: PPUSH
84636: CALL_OW 310
84640: NOT
84641: OR
84642: IFFALSE 84646
// exit ;
84644: GO 84736
// vehicle := IsInUnit ( driver ) ;
84646: LD_ADDR_VAR 0 3
84650: PUSH
84651: LD_VAR 0 1
84655: PPUSH
84656: CALL_OW 310
84660: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
84661: LD_VAR 0 1
84665: PPUSH
84666: LD_STRING \
84668: PUSH
84669: LD_INT 0
84671: PUSH
84672: LD_INT 0
84674: PUSH
84675: LD_INT 0
84677: PUSH
84678: LD_INT 0
84680: PUSH
84681: LD_INT 0
84683: PUSH
84684: LD_INT 0
84686: PUSH
84687: EMPTY
84688: LIST
84689: LIST
84690: LIST
84691: LIST
84692: LIST
84693: LIST
84694: LIST
84695: PUSH
84696: LD_STRING E
84698: PUSH
84699: LD_INT 0
84701: PUSH
84702: LD_INT 0
84704: PUSH
84705: LD_VAR 0 3
84709: PUSH
84710: LD_INT 0
84712: PUSH
84713: LD_INT 0
84715: PUSH
84716: LD_INT 0
84718: PUSH
84719: EMPTY
84720: LIST
84721: LIST
84722: LIST
84723: LIST
84724: LIST
84725: LIST
84726: LIST
84727: PUSH
84728: EMPTY
84729: LIST
84730: LIST
84731: PPUSH
84732: CALL_OW 446
// end ;
84736: LD_VAR 0 2
84740: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
84741: LD_INT 0
84743: PPUSH
84744: PPUSH
// if not driver or not IsInUnit ( driver ) then
84745: LD_VAR 0 1
84749: NOT
84750: PUSH
84751: LD_VAR 0 1
84755: PPUSH
84756: CALL_OW 310
84760: NOT
84761: OR
84762: IFFALSE 84766
// exit ;
84764: GO 84856
// vehicle := IsInUnit ( driver ) ;
84766: LD_ADDR_VAR 0 3
84770: PUSH
84771: LD_VAR 0 1
84775: PPUSH
84776: CALL_OW 310
84780: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
84781: LD_VAR 0 1
84785: PPUSH
84786: LD_STRING \
84788: PUSH
84789: LD_INT 0
84791: PUSH
84792: LD_INT 0
84794: PUSH
84795: LD_INT 0
84797: PUSH
84798: LD_INT 0
84800: PUSH
84801: LD_INT 0
84803: PUSH
84804: LD_INT 0
84806: PUSH
84807: EMPTY
84808: LIST
84809: LIST
84810: LIST
84811: LIST
84812: LIST
84813: LIST
84814: LIST
84815: PUSH
84816: LD_STRING E
84818: PUSH
84819: LD_INT 0
84821: PUSH
84822: LD_INT 0
84824: PUSH
84825: LD_VAR 0 3
84829: PUSH
84830: LD_INT 0
84832: PUSH
84833: LD_INT 0
84835: PUSH
84836: LD_INT 0
84838: PUSH
84839: EMPTY
84840: LIST
84841: LIST
84842: LIST
84843: LIST
84844: LIST
84845: LIST
84846: LIST
84847: PUSH
84848: EMPTY
84849: LIST
84850: LIST
84851: PPUSH
84852: CALL_OW 447
// end ;
84856: LD_VAR 0 2
84860: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
84861: LD_INT 0
84863: PPUSH
84864: PPUSH
84865: PPUSH
// tmp := [ ] ;
84866: LD_ADDR_VAR 0 5
84870: PUSH
84871: EMPTY
84872: ST_TO_ADDR
// for i in units do
84873: LD_ADDR_VAR 0 4
84877: PUSH
84878: LD_VAR 0 1
84882: PUSH
84883: FOR_IN
84884: IFFALSE 84922
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
84886: LD_ADDR_VAR 0 5
84890: PUSH
84891: LD_VAR 0 5
84895: PPUSH
84896: LD_VAR 0 5
84900: PUSH
84901: LD_INT 1
84903: PLUS
84904: PPUSH
84905: LD_VAR 0 4
84909: PPUSH
84910: CALL_OW 256
84914: PPUSH
84915: CALL_OW 2
84919: ST_TO_ADDR
84920: GO 84883
84922: POP
84923: POP
// if not tmp then
84924: LD_VAR 0 5
84928: NOT
84929: IFFALSE 84933
// exit ;
84931: GO 84981
// if asc then
84933: LD_VAR 0 2
84937: IFFALSE 84961
// result := SortListByListAsc ( units , tmp ) else
84939: LD_ADDR_VAR 0 3
84943: PUSH
84944: LD_VAR 0 1
84948: PPUSH
84949: LD_VAR 0 5
84953: PPUSH
84954: CALL_OW 76
84958: ST_TO_ADDR
84959: GO 84981
// result := SortListByListDesc ( units , tmp ) ;
84961: LD_ADDR_VAR 0 3
84965: PUSH
84966: LD_VAR 0 1
84970: PPUSH
84971: LD_VAR 0 5
84975: PPUSH
84976: CALL_OW 77
84980: ST_TO_ADDR
// end ;
84981: LD_VAR 0 3
84985: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
84986: LD_INT 0
84988: PPUSH
84989: PPUSH
// task := GetTaskList ( mech ) ;
84990: LD_ADDR_VAR 0 4
84994: PUSH
84995: LD_VAR 0 1
84999: PPUSH
85000: CALL_OW 437
85004: ST_TO_ADDR
// if not task then
85005: LD_VAR 0 4
85009: NOT
85010: IFFALSE 85014
// exit ;
85012: GO 85056
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
85014: LD_ADDR_VAR 0 3
85018: PUSH
85019: LD_VAR 0 4
85023: PUSH
85024: LD_INT 1
85026: ARRAY
85027: PUSH
85028: LD_INT 1
85030: ARRAY
85031: PUSH
85032: LD_STRING r
85034: EQUAL
85035: PUSH
85036: LD_VAR 0 4
85040: PUSH
85041: LD_INT 1
85043: ARRAY
85044: PUSH
85045: LD_INT 4
85047: ARRAY
85048: PUSH
85049: LD_VAR 0 2
85053: EQUAL
85054: AND
85055: ST_TO_ADDR
// end ;
85056: LD_VAR 0 3
85060: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
85061: LD_INT 0
85063: PPUSH
// SetDir ( unit , d ) ;
85064: LD_VAR 0 1
85068: PPUSH
85069: LD_VAR 0 4
85073: PPUSH
85074: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
85078: LD_VAR 0 1
85082: PPUSH
85083: LD_VAR 0 2
85087: PPUSH
85088: LD_VAR 0 3
85092: PPUSH
85093: LD_VAR 0 5
85097: PPUSH
85098: CALL_OW 48
// end ;
85102: LD_VAR 0 6
85106: RET
// export function ToNaturalNumber ( number ) ; begin
85107: LD_INT 0
85109: PPUSH
// result := number div 1 ;
85110: LD_ADDR_VAR 0 2
85114: PUSH
85115: LD_VAR 0 1
85119: PUSH
85120: LD_INT 1
85122: DIV
85123: ST_TO_ADDR
// if number < 0 then
85124: LD_VAR 0 1
85128: PUSH
85129: LD_INT 0
85131: LESS
85132: IFFALSE 85142
// result := 0 ;
85134: LD_ADDR_VAR 0 2
85138: PUSH
85139: LD_INT 0
85141: ST_TO_ADDR
// end ;
85142: LD_VAR 0 2
85146: RET
// export function SortByClass ( units , class ) ; var un ; begin
85147: LD_INT 0
85149: PPUSH
85150: PPUSH
// if not units or not class then
85151: LD_VAR 0 1
85155: NOT
85156: PUSH
85157: LD_VAR 0 2
85161: NOT
85162: OR
85163: IFFALSE 85167
// exit ;
85165: GO 85262
// result := [ ] ;
85167: LD_ADDR_VAR 0 3
85171: PUSH
85172: EMPTY
85173: ST_TO_ADDR
// for un in units do
85174: LD_ADDR_VAR 0 4
85178: PUSH
85179: LD_VAR 0 1
85183: PUSH
85184: FOR_IN
85185: IFFALSE 85260
// if GetClass ( un ) = class then
85187: LD_VAR 0 4
85191: PPUSH
85192: CALL_OW 257
85196: PUSH
85197: LD_VAR 0 2
85201: EQUAL
85202: IFFALSE 85229
// result := Insert ( result , 1 , un ) else
85204: LD_ADDR_VAR 0 3
85208: PUSH
85209: LD_VAR 0 3
85213: PPUSH
85214: LD_INT 1
85216: PPUSH
85217: LD_VAR 0 4
85221: PPUSH
85222: CALL_OW 2
85226: ST_TO_ADDR
85227: GO 85258
// result := Replace ( result , result + 1 , un ) ;
85229: LD_ADDR_VAR 0 3
85233: PUSH
85234: LD_VAR 0 3
85238: PPUSH
85239: LD_VAR 0 3
85243: PUSH
85244: LD_INT 1
85246: PLUS
85247: PPUSH
85248: LD_VAR 0 4
85252: PPUSH
85253: CALL_OW 1
85257: ST_TO_ADDR
85258: GO 85184
85260: POP
85261: POP
// end ;
85262: LD_VAR 0 3
85266: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
85267: LD_INT 0
85269: PPUSH
85270: PPUSH
85271: PPUSH
85272: PPUSH
85273: PPUSH
85274: PPUSH
85275: PPUSH
// result := [ ] ;
85276: LD_ADDR_VAR 0 4
85280: PUSH
85281: EMPTY
85282: ST_TO_ADDR
// if x - r < 0 then
85283: LD_VAR 0 1
85287: PUSH
85288: LD_VAR 0 3
85292: MINUS
85293: PUSH
85294: LD_INT 0
85296: LESS
85297: IFFALSE 85309
// min_x := 0 else
85299: LD_ADDR_VAR 0 8
85303: PUSH
85304: LD_INT 0
85306: ST_TO_ADDR
85307: GO 85325
// min_x := x - r ;
85309: LD_ADDR_VAR 0 8
85313: PUSH
85314: LD_VAR 0 1
85318: PUSH
85319: LD_VAR 0 3
85323: MINUS
85324: ST_TO_ADDR
// if y - r < 0 then
85325: LD_VAR 0 2
85329: PUSH
85330: LD_VAR 0 3
85334: MINUS
85335: PUSH
85336: LD_INT 0
85338: LESS
85339: IFFALSE 85351
// min_y := 0 else
85341: LD_ADDR_VAR 0 7
85345: PUSH
85346: LD_INT 0
85348: ST_TO_ADDR
85349: GO 85367
// min_y := y - r ;
85351: LD_ADDR_VAR 0 7
85355: PUSH
85356: LD_VAR 0 2
85360: PUSH
85361: LD_VAR 0 3
85365: MINUS
85366: ST_TO_ADDR
// max_x := x + r ;
85367: LD_ADDR_VAR 0 9
85371: PUSH
85372: LD_VAR 0 1
85376: PUSH
85377: LD_VAR 0 3
85381: PLUS
85382: ST_TO_ADDR
// max_y := y + r ;
85383: LD_ADDR_VAR 0 10
85387: PUSH
85388: LD_VAR 0 2
85392: PUSH
85393: LD_VAR 0 3
85397: PLUS
85398: ST_TO_ADDR
// for _x = min_x to max_x do
85399: LD_ADDR_VAR 0 5
85403: PUSH
85404: DOUBLE
85405: LD_VAR 0 8
85409: DEC
85410: ST_TO_ADDR
85411: LD_VAR 0 9
85415: PUSH
85416: FOR_TO
85417: IFFALSE 85518
// for _y = min_y to max_y do
85419: LD_ADDR_VAR 0 6
85423: PUSH
85424: DOUBLE
85425: LD_VAR 0 7
85429: DEC
85430: ST_TO_ADDR
85431: LD_VAR 0 10
85435: PUSH
85436: FOR_TO
85437: IFFALSE 85514
// begin if not ValidHex ( _x , _y ) then
85439: LD_VAR 0 5
85443: PPUSH
85444: LD_VAR 0 6
85448: PPUSH
85449: CALL_OW 488
85453: NOT
85454: IFFALSE 85458
// continue ;
85456: GO 85436
// if GetResourceTypeXY ( _x , _y ) then
85458: LD_VAR 0 5
85462: PPUSH
85463: LD_VAR 0 6
85467: PPUSH
85468: CALL_OW 283
85472: IFFALSE 85512
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
85474: LD_ADDR_VAR 0 4
85478: PUSH
85479: LD_VAR 0 4
85483: PPUSH
85484: LD_VAR 0 4
85488: PUSH
85489: LD_INT 1
85491: PLUS
85492: PPUSH
85493: LD_VAR 0 5
85497: PUSH
85498: LD_VAR 0 6
85502: PUSH
85503: EMPTY
85504: LIST
85505: LIST
85506: PPUSH
85507: CALL_OW 1
85511: ST_TO_ADDR
// end ;
85512: GO 85436
85514: POP
85515: POP
85516: GO 85416
85518: POP
85519: POP
// end ;
85520: LD_VAR 0 4
85524: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
85525: LD_INT 0
85527: PPUSH
85528: PPUSH
85529: PPUSH
85530: PPUSH
85531: PPUSH
85532: PPUSH
85533: PPUSH
85534: PPUSH
// if not units then
85535: LD_VAR 0 1
85539: NOT
85540: IFFALSE 85544
// exit ;
85542: GO 86055
// result := UnitFilter ( units , [ f_ok ] ) ;
85544: LD_ADDR_VAR 0 3
85548: PUSH
85549: LD_VAR 0 1
85553: PPUSH
85554: LD_INT 50
85556: PUSH
85557: EMPTY
85558: LIST
85559: PPUSH
85560: CALL_OW 72
85564: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
85565: LD_ADDR_VAR 0 8
85569: PUSH
85570: LD_VAR 0 1
85574: PUSH
85575: LD_INT 1
85577: ARRAY
85578: PPUSH
85579: CALL_OW 255
85583: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
85584: LD_ADDR_VAR 0 10
85588: PUSH
85589: LD_INT 29
85591: PUSH
85592: LD_EXP 52
85596: PUSH
85597: LD_INT 49
85599: PUSH
85600: EMPTY
85601: LIST
85602: LIST
85603: LIST
85604: ST_TO_ADDR
// if not result then
85605: LD_VAR 0 3
85609: NOT
85610: IFFALSE 85614
// exit ;
85612: GO 86055
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
85614: LD_ADDR_VAR 0 5
85618: PUSH
85619: LD_INT 81
85621: PUSH
85622: LD_VAR 0 8
85626: PUSH
85627: EMPTY
85628: LIST
85629: LIST
85630: PPUSH
85631: CALL_OW 69
85635: ST_TO_ADDR
// for i in result do
85636: LD_ADDR_VAR 0 4
85640: PUSH
85641: LD_VAR 0 3
85645: PUSH
85646: FOR_IN
85647: IFFALSE 86053
// begin tag := GetTag ( i ) + 1 ;
85649: LD_ADDR_VAR 0 9
85653: PUSH
85654: LD_VAR 0 4
85658: PPUSH
85659: CALL_OW 110
85663: PUSH
85664: LD_INT 1
85666: PLUS
85667: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
85668: LD_ADDR_VAR 0 7
85672: PUSH
85673: LD_VAR 0 4
85677: PPUSH
85678: CALL_OW 250
85682: PPUSH
85683: LD_VAR 0 4
85687: PPUSH
85688: CALL_OW 251
85692: PPUSH
85693: LD_INT 6
85695: PPUSH
85696: CALL 85267 0 3
85700: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
85701: LD_VAR 0 7
85705: PUSH
85706: LD_VAR 0 4
85710: PPUSH
85711: CALL_OW 264
85715: PUSH
85716: LD_VAR 0 10
85720: IN
85721: NOT
85722: AND
85723: IFFALSE 85762
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
85725: LD_VAR 0 4
85729: PPUSH
85730: LD_VAR 0 7
85734: PUSH
85735: LD_INT 1
85737: ARRAY
85738: PUSH
85739: LD_INT 1
85741: ARRAY
85742: PPUSH
85743: LD_VAR 0 7
85747: PUSH
85748: LD_INT 1
85750: ARRAY
85751: PUSH
85752: LD_INT 2
85754: ARRAY
85755: PPUSH
85756: CALL_OW 116
85760: GO 86051
// if path > tag then
85762: LD_VAR 0 2
85766: PUSH
85767: LD_VAR 0 9
85771: GREATER
85772: IFFALSE 85980
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
85774: LD_ADDR_VAR 0 6
85778: PUSH
85779: LD_VAR 0 5
85783: PPUSH
85784: LD_INT 91
85786: PUSH
85787: LD_VAR 0 4
85791: PUSH
85792: LD_INT 12
85794: PUSH
85795: EMPTY
85796: LIST
85797: LIST
85798: LIST
85799: PPUSH
85800: CALL_OW 72
85804: ST_TO_ADDR
// if nearEnemy then
85805: LD_VAR 0 6
85809: IFFALSE 85878
// begin if GetWeapon ( i ) = ru_time_lapser then
85811: LD_VAR 0 4
85815: PPUSH
85816: CALL_OW 264
85820: PUSH
85821: LD_INT 49
85823: EQUAL
85824: IFFALSE 85852
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
85826: LD_VAR 0 4
85830: PPUSH
85831: LD_VAR 0 6
85835: PPUSH
85836: LD_VAR 0 4
85840: PPUSH
85841: CALL_OW 74
85845: PPUSH
85846: CALL_OW 112
85850: GO 85876
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
85852: LD_VAR 0 4
85856: PPUSH
85857: LD_VAR 0 6
85861: PPUSH
85862: LD_VAR 0 4
85866: PPUSH
85867: CALL_OW 74
85871: PPUSH
85872: CALL_OW 115
// end else
85876: GO 85978
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
85878: LD_VAR 0 4
85882: PPUSH
85883: LD_VAR 0 2
85887: PUSH
85888: LD_VAR 0 9
85892: ARRAY
85893: PUSH
85894: LD_INT 1
85896: ARRAY
85897: PPUSH
85898: LD_VAR 0 2
85902: PUSH
85903: LD_VAR 0 9
85907: ARRAY
85908: PUSH
85909: LD_INT 2
85911: ARRAY
85912: PPUSH
85913: CALL_OW 297
85917: PUSH
85918: LD_INT 6
85920: GREATER
85921: IFFALSE 85964
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
85923: LD_VAR 0 4
85927: PPUSH
85928: LD_VAR 0 2
85932: PUSH
85933: LD_VAR 0 9
85937: ARRAY
85938: PUSH
85939: LD_INT 1
85941: ARRAY
85942: PPUSH
85943: LD_VAR 0 2
85947: PUSH
85948: LD_VAR 0 9
85952: ARRAY
85953: PUSH
85954: LD_INT 2
85956: ARRAY
85957: PPUSH
85958: CALL_OW 114
85962: GO 85978
// SetTag ( i , tag ) ;
85964: LD_VAR 0 4
85968: PPUSH
85969: LD_VAR 0 9
85973: PPUSH
85974: CALL_OW 109
// end else
85978: GO 86051
// if enemy then
85980: LD_VAR 0 5
85984: IFFALSE 86051
// begin if GetWeapon ( i ) = ru_time_lapser then
85986: LD_VAR 0 4
85990: PPUSH
85991: CALL_OW 264
85995: PUSH
85996: LD_INT 49
85998: EQUAL
85999: IFFALSE 86027
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
86001: LD_VAR 0 4
86005: PPUSH
86006: LD_VAR 0 5
86010: PPUSH
86011: LD_VAR 0 4
86015: PPUSH
86016: CALL_OW 74
86020: PPUSH
86021: CALL_OW 112
86025: GO 86051
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
86027: LD_VAR 0 4
86031: PPUSH
86032: LD_VAR 0 5
86036: PPUSH
86037: LD_VAR 0 4
86041: PPUSH
86042: CALL_OW 74
86046: PPUSH
86047: CALL_OW 115
// end ; end ;
86051: GO 85646
86053: POP
86054: POP
// end ;
86055: LD_VAR 0 3
86059: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
86060: LD_INT 0
86062: PPUSH
86063: PPUSH
86064: PPUSH
// if not unit or IsInUnit ( unit ) then
86065: LD_VAR 0 1
86069: NOT
86070: PUSH
86071: LD_VAR 0 1
86075: PPUSH
86076: CALL_OW 310
86080: OR
86081: IFFALSE 86085
// exit ;
86083: GO 86176
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
86085: LD_ADDR_VAR 0 4
86089: PUSH
86090: LD_VAR 0 1
86094: PPUSH
86095: CALL_OW 250
86099: PPUSH
86100: LD_VAR 0 2
86104: PPUSH
86105: LD_INT 1
86107: PPUSH
86108: CALL_OW 272
86112: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
86113: LD_ADDR_VAR 0 5
86117: PUSH
86118: LD_VAR 0 1
86122: PPUSH
86123: CALL_OW 251
86127: PPUSH
86128: LD_VAR 0 2
86132: PPUSH
86133: LD_INT 1
86135: PPUSH
86136: CALL_OW 273
86140: ST_TO_ADDR
// if ValidHex ( x , y ) then
86141: LD_VAR 0 4
86145: PPUSH
86146: LD_VAR 0 5
86150: PPUSH
86151: CALL_OW 488
86155: IFFALSE 86176
// ComTurnXY ( unit , x , y ) ;
86157: LD_VAR 0 1
86161: PPUSH
86162: LD_VAR 0 4
86166: PPUSH
86167: LD_VAR 0 5
86171: PPUSH
86172: CALL_OW 118
// end ;
86176: LD_VAR 0 3
86180: RET
// export function SeeUnits ( side , units ) ; var i ; begin
86181: LD_INT 0
86183: PPUSH
86184: PPUSH
// result := false ;
86185: LD_ADDR_VAR 0 3
86189: PUSH
86190: LD_INT 0
86192: ST_TO_ADDR
// if not units then
86193: LD_VAR 0 2
86197: NOT
86198: IFFALSE 86202
// exit ;
86200: GO 86247
// for i in units do
86202: LD_ADDR_VAR 0 4
86206: PUSH
86207: LD_VAR 0 2
86211: PUSH
86212: FOR_IN
86213: IFFALSE 86245
// if See ( side , i ) then
86215: LD_VAR 0 1
86219: PPUSH
86220: LD_VAR 0 4
86224: PPUSH
86225: CALL_OW 292
86229: IFFALSE 86243
// begin result := true ;
86231: LD_ADDR_VAR 0 3
86235: PUSH
86236: LD_INT 1
86238: ST_TO_ADDR
// exit ;
86239: POP
86240: POP
86241: GO 86247
// end ;
86243: GO 86212
86245: POP
86246: POP
// end ;
86247: LD_VAR 0 3
86251: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
86252: LD_INT 0
86254: PPUSH
86255: PPUSH
86256: PPUSH
86257: PPUSH
// if not unit or not points then
86258: LD_VAR 0 1
86262: NOT
86263: PUSH
86264: LD_VAR 0 2
86268: NOT
86269: OR
86270: IFFALSE 86274
// exit ;
86272: GO 86364
// dist := 99999 ;
86274: LD_ADDR_VAR 0 5
86278: PUSH
86279: LD_INT 99999
86281: ST_TO_ADDR
// for i in points do
86282: LD_ADDR_VAR 0 4
86286: PUSH
86287: LD_VAR 0 2
86291: PUSH
86292: FOR_IN
86293: IFFALSE 86362
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
86295: LD_ADDR_VAR 0 6
86299: PUSH
86300: LD_VAR 0 1
86304: PPUSH
86305: LD_VAR 0 4
86309: PUSH
86310: LD_INT 1
86312: ARRAY
86313: PPUSH
86314: LD_VAR 0 4
86318: PUSH
86319: LD_INT 2
86321: ARRAY
86322: PPUSH
86323: CALL_OW 297
86327: ST_TO_ADDR
// if tmpDist < dist then
86328: LD_VAR 0 6
86332: PUSH
86333: LD_VAR 0 5
86337: LESS
86338: IFFALSE 86360
// begin result := i ;
86340: LD_ADDR_VAR 0 3
86344: PUSH
86345: LD_VAR 0 4
86349: ST_TO_ADDR
// dist := tmpDist ;
86350: LD_ADDR_VAR 0 5
86354: PUSH
86355: LD_VAR 0 6
86359: ST_TO_ADDR
// end ; end ;
86360: GO 86292
86362: POP
86363: POP
// end ;
86364: LD_VAR 0 3
86368: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
86369: LD_INT 0
86371: PPUSH
// uc_side := side ;
86372: LD_ADDR_OWVAR 20
86376: PUSH
86377: LD_VAR 0 1
86381: ST_TO_ADDR
// uc_nation := 3 ;
86382: LD_ADDR_OWVAR 21
86386: PUSH
86387: LD_INT 3
86389: ST_TO_ADDR
// vc_chassis := 25 ;
86390: LD_ADDR_OWVAR 37
86394: PUSH
86395: LD_INT 25
86397: ST_TO_ADDR
// vc_engine := engine_siberite ;
86398: LD_ADDR_OWVAR 39
86402: PUSH
86403: LD_INT 3
86405: ST_TO_ADDR
// vc_control := control_computer ;
86406: LD_ADDR_OWVAR 38
86410: PUSH
86411: LD_INT 3
86413: ST_TO_ADDR
// vc_weapon := 59 ;
86414: LD_ADDR_OWVAR 40
86418: PUSH
86419: LD_INT 59
86421: ST_TO_ADDR
// result := CreateVehicle ;
86422: LD_ADDR_VAR 0 5
86426: PUSH
86427: CALL_OW 45
86431: ST_TO_ADDR
// SetDir ( result , d ) ;
86432: LD_VAR 0 5
86436: PPUSH
86437: LD_VAR 0 4
86441: PPUSH
86442: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
86446: LD_VAR 0 5
86450: PPUSH
86451: LD_VAR 0 2
86455: PPUSH
86456: LD_VAR 0 3
86460: PPUSH
86461: LD_INT 0
86463: PPUSH
86464: CALL_OW 48
// end ;
86468: LD_VAR 0 5
86472: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
86473: LD_INT 0
86475: PPUSH
86476: PPUSH
86477: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
86478: LD_ADDR_VAR 0 2
86482: PUSH
86483: LD_INT 0
86485: PUSH
86486: LD_INT 0
86488: PUSH
86489: LD_INT 0
86491: PUSH
86492: LD_INT 0
86494: PUSH
86495: EMPTY
86496: LIST
86497: LIST
86498: LIST
86499: LIST
86500: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
86501: LD_VAR 0 1
86505: NOT
86506: PUSH
86507: LD_VAR 0 1
86511: PPUSH
86512: CALL_OW 264
86516: PUSH
86517: LD_INT 12
86519: PUSH
86520: LD_INT 51
86522: PUSH
86523: LD_INT 32
86525: PUSH
86526: LD_EXP 49
86530: PUSH
86531: EMPTY
86532: LIST
86533: LIST
86534: LIST
86535: LIST
86536: IN
86537: NOT
86538: OR
86539: IFFALSE 86543
// exit ;
86541: GO 86641
// for i := 1 to 3 do
86543: LD_ADDR_VAR 0 3
86547: PUSH
86548: DOUBLE
86549: LD_INT 1
86551: DEC
86552: ST_TO_ADDR
86553: LD_INT 3
86555: PUSH
86556: FOR_TO
86557: IFFALSE 86639
// begin tmp := GetCargo ( cargo , i ) ;
86559: LD_ADDR_VAR 0 4
86563: PUSH
86564: LD_VAR 0 1
86568: PPUSH
86569: LD_VAR 0 3
86573: PPUSH
86574: CALL_OW 289
86578: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
86579: LD_ADDR_VAR 0 2
86583: PUSH
86584: LD_VAR 0 2
86588: PPUSH
86589: LD_VAR 0 3
86593: PPUSH
86594: LD_VAR 0 4
86598: PPUSH
86599: CALL_OW 1
86603: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
86604: LD_ADDR_VAR 0 2
86608: PUSH
86609: LD_VAR 0 2
86613: PPUSH
86614: LD_INT 4
86616: PPUSH
86617: LD_VAR 0 2
86621: PUSH
86622: LD_INT 4
86624: ARRAY
86625: PUSH
86626: LD_VAR 0 4
86630: PLUS
86631: PPUSH
86632: CALL_OW 1
86636: ST_TO_ADDR
// end ;
86637: GO 86556
86639: POP
86640: POP
// end ; end_of_file
86641: LD_VAR 0 2
86645: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86646: LD_VAR 0 1
86650: PUSH
86651: LD_INT 200
86653: DOUBLE
86654: GREATEREQUAL
86655: IFFALSE 86663
86657: LD_INT 299
86659: DOUBLE
86660: LESSEQUAL
86661: IFTRUE 86665
86663: GO 86697
86665: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86666: LD_VAR 0 1
86670: PPUSH
86671: LD_VAR 0 2
86675: PPUSH
86676: LD_VAR 0 3
86680: PPUSH
86681: LD_VAR 0 4
86685: PPUSH
86686: LD_VAR 0 5
86690: PPUSH
86691: CALL 41986 0 5
86695: GO 86774
86697: LD_INT 300
86699: DOUBLE
86700: GREATEREQUAL
86701: IFFALSE 86709
86703: LD_INT 399
86705: DOUBLE
86706: LESSEQUAL
86707: IFTRUE 86711
86709: GO 86773
86711: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86712: LD_VAR 0 1
86716: PPUSH
86717: LD_VAR 0 2
86721: PPUSH
86722: LD_VAR 0 3
86726: PPUSH
86727: LD_VAR 0 4
86731: PPUSH
86732: LD_VAR 0 5
86736: PPUSH
86737: LD_VAR 0 6
86741: PPUSH
86742: LD_VAR 0 7
86746: PPUSH
86747: LD_VAR 0 8
86751: PPUSH
86752: LD_VAR 0 9
86756: PPUSH
86757: LD_VAR 0 10
86761: PPUSH
86762: LD_VAR 0 11
86766: PPUSH
86767: CALL 39628 0 11
86771: GO 86774
86773: POP
// end ;
86774: PPOPN 11
86776: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86777: LD_VAR 0 1
86781: PPUSH
86782: LD_VAR 0 2
86786: PPUSH
86787: LD_VAR 0 3
86791: PPUSH
86792: LD_VAR 0 4
86796: PPUSH
86797: LD_VAR 0 5
86801: PPUSH
86802: CALL 41722 0 5
// end ; end_of_file
86806: PPOPN 5
86808: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86809: LD_VAR 0 1
86813: PPUSH
86814: LD_VAR 0 2
86818: PPUSH
86819: LD_VAR 0 3
86823: PPUSH
86824: LD_VAR 0 4
86828: PPUSH
86829: LD_VAR 0 5
86833: PPUSH
86834: LD_VAR 0 6
86838: PPUSH
86839: CALL 27321 0 6
// end ;
86843: PPOPN 6
86845: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86846: CALL 27296 0 0
// end ;
86850: PPOPN 1
86852: END
