// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 9054 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 75432 0 9
// Action ;
  79: CALL 15422 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 41064 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 41064 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 41064 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 41064 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 41064 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 41064 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 41064 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 78755 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 41064 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 41064 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 78755 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 41064 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 41064 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 78755 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 41064 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 78755 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 41064 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 78755 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 41064 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 78755 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 41064 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 78755 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 41064 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 78755 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 78755 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 49372 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2814
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2649
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: IFFALSE 2625
// begin bc_type := b_lab_full ;
2599: LD_ADDR_OWVAR 42
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2607: LD_ADDR_OWVAR 44
2611: PUSH
2612: LD_INT 10
2614: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_INT 15
2622: ST_TO_ADDR
// end else
2623: GO 2649
// begin bc_type := b_lab_half ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 7
2632: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2633: LD_ADDR_OWVAR 44
2637: PUSH
2638: LD_INT 10
2640: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 9
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2535
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2535
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 31
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 31
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 31
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 31
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 31
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 76389 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 31
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 54500 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 31
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 54500 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 31
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 54500 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 31
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 54500 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 13
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 13
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 41064 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 26
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 27
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 41064 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 27
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 24
4152: PUSH
4153: LD_STRING Mike
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 41064 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4170: LD_EXP 24
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4185: LD_STRING GladstoneIn07
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 30
4195: NOT
4196: IFFALSE 4276
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4198: LD_ADDR_EXP 21
4202: PUSH
4203: LD_STRING Gladstone
4205: PPUSH
4206: LD_EXP 1
4210: NOT
4211: PPUSH
4212: LD_STRING 06c_
4214: PPUSH
4215: CALL 41064 0 3
4219: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4220: LD_EXP 21
4224: NOT
4225: PUSH
4226: LD_STRING GladstoneStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: AND
4237: IFFALSE 4261
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4239: LD_ADDR_EXP 21
4243: PUSH
4244: LD_STRING Gladstone
4246: PPUSH
4247: LD_EXP 1
4251: NOT
4252: PPUSH
4253: LD_STRING 05_
4255: PPUSH
4256: CALL 41064 0 3
4260: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4261: LD_EXP 21
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4276: LD_STRING LisaStayInDelta
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 30
4286: IFFALSE 4322
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4288: LD_ADDR_EXP 19
4292: PUSH
4293: LD_STRING Lisa
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_STRING 05_
4301: PPUSH
4302: CALL 41064 0 3
4306: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4307: LD_EXP 19
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4322: LD_STRING BobbyStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: IFFALSE 4368
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4334: LD_ADDR_EXP 17
4338: PUSH
4339: LD_STRING Bobby
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_STRING 05_
4347: PPUSH
4348: CALL 41064 0 3
4352: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4353: LD_EXP 17
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4368: LD_STRING CyrusStayInDelta
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL_OW 30
4378: IFFALSE 4414
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4380: LD_ADDR_EXP 18
4384: PUSH
4385: LD_STRING Cyrus
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING 05_
4393: PPUSH
4394: CALL 41064 0 3
4398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4399: LD_EXP 18
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4414: LD_STRING BrownStayInDelta
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 30
4424: IFFALSE 4460
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4426: LD_ADDR_EXP 15
4430: PUSH
4431: LD_STRING Brown
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_STRING 05_
4439: PPUSH
4440: CALL 41064 0 3
4444: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4445: LD_EXP 15
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4460: LD_STRING DonaldsonStayInDelta
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 30
4470: IFFALSE 4506
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4472: LD_ADDR_EXP 16
4476: PUSH
4477: LD_STRING Donaldson
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING 05_
4485: PPUSH
4486: CALL 41064 0 3
4490: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4491: LD_EXP 16
4495: PPUSH
4496: LD_INT 4
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_STRING OthersStayInDelta
4513: PPUSH
4514: CALL_OW 31
4518: ST_TO_ADDR
// if others > 2 then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_INT 2
4526: GREATER
4527: IFFALSE 4590
// begin for j := 1 to 2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4586
// begin SetTag ( others [ j ] , 107 ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 3
4554: ARRAY
4555: PPUSH
4556: LD_INT 107
4558: PPUSH
4559: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PPUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// end ;
4584: GO 4542
4586: POP
4587: POP
// end else
4588: GO 4651
// begin for j := 1 to others do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_VAR 0 4
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4649
// begin SetTag ( others [ i ] , 107 ) ;
4608: LD_VAR 0 4
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: LD_INT 107
4621: PPUSH
4622: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4626: LD_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: ARRAY
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 49
// end ;
4647: GO 4605
4649: POP
4650: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4651: LD_ADDR_VAR 0 4
4655: PUSH
4656: LD_STRING 06_other_apemans
4658: PPUSH
4659: CALL_OW 31
4663: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PUSH
4687: LD_OWVAR 67
4691: ARRAY
4692: GREATEREQUAL
4693: IFFALSE 4726
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 2
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: ST_TO_ADDR
4724: GO 4736
// j := others ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 4
4735: ST_TO_ADDR
// for i := 1 to j do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 3
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4777
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: LD_INT 4
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
4775: GO 4751
4777: POP
4778: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PPUSH
4811: LD_INT 53
4813: PPUSH
4814: LD_INT 19
4816: PPUSH
4817: CALL_OW 111
// end ;
4821: LD_VAR 0 1
4825: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
// prefix := 07c_ ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_STRING 07c_
4849: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4850: LD_ADDR_VAR 0 8
4854: PUSH
4855: LD_STRING 07_vehicles
4857: PPUSH
4858: EMPTY
4859: PPUSH
4860: CALL_OW 30
4864: ST_TO_ADDR
// if not vehicles and debug then
4865: LD_VAR 0 8
4869: NOT
4870: PUSH
4871: LD_EXP 1
4875: AND
4876: IFFALSE 4904
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4878: LD_ADDR_VAR 0 8
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 4
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: ST_TO_ADDR
// if not vehicles then
4904: LD_VAR 0 8
4908: NOT
4909: IFFALSE 4966
// begin area := westGammaSupportArea ;
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_INT 16
4918: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4919: LD_ADDR_VAR 0 14
4923: PUSH
4924: LD_INT 37
4926: PUSH
4927: LD_INT 70
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4934: LD_ADDR_VAR 0 13
4938: PUSH
4939: LD_INT 43
4941: PUSH
4942: LD_INT 67
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// dir := 1 ;
4949: LD_ADDR_VAR 0 12
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4957: LD_INT 4200
4959: PPUSH
4960: CALL_OW 67
// end else
4964: GO 5012
// begin area := southGammaSupportArea ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_INT 5
4973: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4974: LD_ADDR_VAR 0 14
4978: PUSH
4979: LD_INT 87
4981: PUSH
4982: LD_INT 147
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4989: LD_ADDR_VAR 0 13
4993: PUSH
4994: LD_INT 74
4996: PUSH
4997: LD_INT 129
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
// dir := 0 ;
5004: LD_ADDR_VAR 0 12
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// end ; squad := [ ] ;
5012: LD_ADDR_VAR 0 5
5016: PUSH
5017: EMPTY
5018: ST_TO_ADDR
// tmp := [ ] ;
5019: LD_ADDR_VAR 0 6
5023: PUSH
5024: EMPTY
5025: ST_TO_ADDR
// tmpVehs := [ ] ;
5026: LD_ADDR_VAR 0 7
5030: PUSH
5031: EMPTY
5032: ST_TO_ADDR
// uc_side := 1 ;
5033: LD_ADDR_OWVAR 20
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// uc_nation := 1 ;
5041: LD_ADDR_OWVAR 21
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if vehicles then
5049: LD_VAR 0 8
5053: IFFALSE 5187
// begin for i := 1 to vehicles do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_VAR 0 8
5069: PUSH
5070: FOR_TO
5071: IFFALSE 5185
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
5073: LD_ADDR_OWVAR 37
5077: PUSH
5078: LD_VAR 0 8
5082: PUSH
5083: LD_VAR 0 2
5087: ARRAY
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5093: LD_ADDR_OWVAR 39
5097: PUSH
5098: LD_VAR 0 8
5102: PUSH
5103: LD_VAR 0 2
5107: ARRAY
5108: PUSH
5109: LD_INT 2
5111: ARRAY
5112: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5113: LD_ADDR_OWVAR 38
5117: PUSH
5118: LD_VAR 0 8
5122: PUSH
5123: LD_VAR 0 2
5127: ARRAY
5128: PUSH
5129: LD_INT 3
5131: ARRAY
5132: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5133: LD_ADDR_OWVAR 40
5137: PUSH
5138: LD_VAR 0 8
5142: PUSH
5143: LD_VAR 0 2
5147: ARRAY
5148: PUSH
5149: LD_INT 4
5151: ARRAY
5152: ST_TO_ADDR
// veh := CreateVehicle ;
5153: LD_ADDR_VAR 0 9
5157: PUSH
5158: CALL_OW 45
5162: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5163: LD_ADDR_VAR 0 7
5167: PUSH
5168: LD_VAR 0 7
5172: PPUSH
5173: LD_VAR 0 9
5177: PPUSH
5178: CALL 78755 0 2
5182: ST_TO_ADDR
// end ;
5183: GO 5070
5185: POP
5186: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5187: LD_ADDR_EXP 14
5191: PUSH
5192: LD_STRING JMM
5194: PPUSH
5195: LD_EXP 1
5199: NOT
5200: PPUSH
5201: LD_VAR 0 10
5205: PPUSH
5206: CALL 41064 0 3
5210: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5211: LD_EXP 13
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: IN
5226: PUSH
5227: LD_EXP 15
5231: NOT
5232: AND
5233: IFFALSE 5294
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5235: LD_ADDR_EXP 15
5239: PUSH
5240: LD_STRING Brown
5242: PPUSH
5243: LD_EXP 1
5247: NOT
5248: PPUSH
5249: LD_VAR 0 10
5253: PPUSH
5254: CALL 41064 0 3
5258: ST_TO_ADDR
// if Brown then
5259: LD_EXP 15
5263: IFFALSE 5294
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_VAR 0 6
5274: PPUSH
5275: LD_VAR 0 6
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: PPUSH
5284: LD_EXP 15
5288: PPUSH
5289: CALL_OW 1
5293: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5294: LD_EXP 13
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 3
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: IN
5309: PUSH
5310: LD_EXP 16
5314: NOT
5315: AND
5316: IFFALSE 5377
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5318: LD_ADDR_EXP 16
5322: PUSH
5323: LD_STRING Donaldson
5325: PPUSH
5326: LD_EXP 1
5330: NOT
5331: PPUSH
5332: LD_VAR 0 10
5336: PPUSH
5337: CALL 41064 0 3
5341: ST_TO_ADDR
// if Donaldson then
5342: LD_EXP 16
5346: IFFALSE 5377
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_VAR 0 6
5357: PPUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 1
5365: PLUS
5366: PPUSH
5367: LD_EXP 16
5371: PPUSH
5372: CALL_OW 1
5376: ST_TO_ADDR
// end ; if not Bobby then
5377: LD_EXP 17
5381: NOT
5382: IFFALSE 5440
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5384: LD_ADDR_EXP 17
5388: PUSH
5389: LD_STRING Bobby
5391: PPUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_VAR 0 10
5399: PPUSH
5400: CALL 41064 0 3
5404: ST_TO_ADDR
// if Bobby then
5405: LD_EXP 17
5409: IFFALSE 5440
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5411: LD_ADDR_VAR 0 6
5415: PUSH
5416: LD_VAR 0 6
5420: PPUSH
5421: LD_VAR 0 6
5425: PUSH
5426: LD_INT 1
5428: PLUS
5429: PPUSH
5430: LD_EXP 17
5434: PPUSH
5435: CALL_OW 1
5439: ST_TO_ADDR
// end ; if not Cyrus then
5440: LD_EXP 18
5444: NOT
5445: IFFALSE 5503
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5447: LD_ADDR_EXP 18
5451: PUSH
5452: LD_STRING Cyrus
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: LD_VAR 0 10
5462: PPUSH
5463: CALL 41064 0 3
5467: ST_TO_ADDR
// if Cyrus then
5468: LD_EXP 18
5472: IFFALSE 5503
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5474: LD_ADDR_VAR 0 6
5478: PUSH
5479: LD_VAR 0 6
5483: PPUSH
5484: LD_VAR 0 6
5488: PUSH
5489: LD_INT 1
5491: PLUS
5492: PPUSH
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 1
5502: ST_TO_ADDR
// end ; if not Lisa then
5503: LD_EXP 19
5507: NOT
5508: IFFALSE 5569
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5510: LD_ADDR_EXP 19
5514: PUSH
5515: LD_STRING Lisa
5517: PPUSH
5518: LD_EXP 1
5522: NOT
5523: PPUSH
5524: LD_VAR 0 10
5528: PPUSH
5529: CALL 41064 0 3
5533: ST_TO_ADDR
// if Lisa then
5534: LD_EXP 19
5538: IFFALSE 5569
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5540: LD_ADDR_VAR 0 6
5544: PUSH
5545: LD_VAR 0 6
5549: PPUSH
5550: LD_VAR 0 6
5554: PUSH
5555: LD_INT 1
5557: PLUS
5558: PPUSH
5559: LD_EXP 19
5563: PPUSH
5564: CALL_OW 1
5568: ST_TO_ADDR
// end ; if not Frank then
5569: LD_EXP 20
5573: NOT
5574: IFFALSE 5635
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5576: LD_ADDR_EXP 20
5580: PUSH
5581: LD_STRING Frank
5583: PPUSH
5584: LD_EXP 1
5588: NOT
5589: PPUSH
5590: LD_VAR 0 10
5594: PPUSH
5595: CALL 41064 0 3
5599: ST_TO_ADDR
// if Frank then
5600: LD_EXP 20
5604: IFFALSE 5635
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_VAR 0 6
5615: PPUSH
5616: LD_VAR 0 6
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PPUSH
5625: LD_EXP 20
5629: PPUSH
5630: CALL_OW 1
5634: ST_TO_ADDR
// end ; if not Kikuchi then
5635: LD_EXP 22
5639: NOT
5640: IFFALSE 5698
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5642: LD_ADDR_EXP 22
5646: PUSH
5647: LD_STRING Kikuchi
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: LD_VAR 0 10
5657: PPUSH
5658: CALL 41064 0 3
5662: ST_TO_ADDR
// if Kikuchi then
5663: LD_EXP 22
5667: IFFALSE 5698
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: LD_VAR 0 6
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 1
5686: PLUS
5687: PPUSH
5688: LD_EXP 22
5692: PPUSH
5693: CALL_OW 1
5697: ST_TO_ADDR
// end ; if not Gladstone then
5698: LD_EXP 21
5702: NOT
5703: IFFALSE 5764
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5705: LD_ADDR_EXP 21
5709: PUSH
5710: LD_STRING Gladstone
5712: PPUSH
5713: LD_EXP 1
5717: NOT
5718: PPUSH
5719: LD_VAR 0 10
5723: PPUSH
5724: CALL 41064 0 3
5728: ST_TO_ADDR
// if Gladstone then
5729: LD_EXP 21
5733: IFFALSE 5764
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5735: LD_ADDR_VAR 0 6
5739: PUSH
5740: LD_VAR 0 6
5744: PPUSH
5745: LD_VAR 0 6
5749: PUSH
5750: LD_INT 1
5752: PLUS
5753: PPUSH
5754: LD_EXP 21
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// end ; if not Khatam then
5764: LD_EXP 23
5768: NOT
5769: IFFALSE 5827
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5771: LD_ADDR_EXP 23
5775: PUSH
5776: LD_STRING Khatam
5778: PPUSH
5779: LD_INT 1
5781: PPUSH
5782: LD_VAR 0 10
5786: PPUSH
5787: CALL 41064 0 3
5791: ST_TO_ADDR
// if Khatam then
5792: LD_EXP 23
5796: IFFALSE 5827
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5798: LD_ADDR_VAR 0 6
5802: PUSH
5803: LD_VAR 0 6
5807: PPUSH
5808: LD_VAR 0 6
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_EXP 23
5821: PPUSH
5822: CALL_OW 1
5826: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5827: LD_ADDR_VAR 0 4
5831: PUSH
5832: LD_STRING 07c_others
5834: PPUSH
5835: CALL_OW 31
5839: ST_TO_ADDR
// squad := others ;
5840: LD_ADDR_VAR 0 5
5844: PUSH
5845: LD_VAR 0 4
5849: ST_TO_ADDR
// if others then
5850: LD_VAR 0 4
5854: IFFALSE 5905
// for i in others do
5856: LD_ADDR_VAR 0 2
5860: PUSH
5861: LD_VAR 0 4
5865: PUSH
5866: FOR_IN
5867: IFFALSE 5903
// begin SetTag ( i , 108 ) ;
5869: LD_VAR 0 2
5873: PPUSH
5874: LD_INT 108
5876: PPUSH
5877: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5881: LD_ADDR_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: PPUSH
5891: LD_VAR 0 2
5895: PPUSH
5896: CALL 78755 0 2
5900: ST_TO_ADDR
// end ;
5901: GO 5866
5903: POP
5904: POP
// if tmp then
5905: LD_VAR 0 6
5909: IFFALSE 6144
// begin tmp := Join ( tmp , JMM ) ;
5911: LD_ADDR_VAR 0 6
5915: PUSH
5916: LD_VAR 0 6
5920: PPUSH
5921: LD_EXP 14
5925: PPUSH
5926: CALL 78755 0 2
5930: ST_TO_ADDR
// for i in tmp do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: LD_VAR 0 6
5940: PUSH
5941: FOR_IN
5942: IFFALSE 6142
// begin SetDir ( i , dir ) ;
5944: LD_VAR 0 2
5948: PPUSH
5949: LD_VAR 0 12
5953: PPUSH
5954: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
5958: LD_VAR 0 2
5962: PPUSH
5963: CALL_OW 257
5967: PUSH
5968: LD_INT 3
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 7
5976: AND
5977: IFFALSE 6067
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5979: LD_VAR 0 7
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PPUSH
5988: LD_INT 0
5990: PPUSH
5991: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5995: LD_VAR 0 7
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: PPUSH
6004: LD_VAR 0 14
6008: PUSH
6009: LD_INT 1
6011: ARRAY
6012: PPUSH
6013: LD_VAR 0 14
6017: PUSH
6018: LD_INT 2
6020: ARRAY
6021: PPUSH
6022: LD_INT 0
6024: PPUSH
6025: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_VAR 0 7
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PPUSH
6043: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6047: LD_ADDR_VAR 0 7
6051: PUSH
6052: LD_VAR 0 7
6056: PPUSH
6057: LD_INT 1
6059: PPUSH
6060: CALL_OW 3
6064: ST_TO_ADDR
// end else
6065: GO 6084
// PlaceUnitArea ( i , area , false ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 11
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6084: LD_VAR 0 2
6088: PPUSH
6089: LD_VAR 0 13
6093: PUSH
6094: LD_INT 1
6096: ARRAY
6097: PPUSH
6098: LD_VAR 0 13
6102: PUSH
6103: LD_INT 2
6105: ARRAY
6106: PPUSH
6107: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6118: LD_VAR 0 11
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: NOT
6138: IFFALSE 6111
// end ;
6140: GO 5941
6142: POP
6143: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6144: LD_EXP 14
6148: PPUSH
6149: CALL_OW 305
6153: NOT
6154: PUSH
6155: LD_EXP 14
6159: PPUSH
6160: CALL_OW 310
6164: NOT
6165: OR
6166: IFFALSE 6198
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6168: LD_EXP 14
6172: PPUSH
6173: LD_VAR 0 14
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 14
6186: PUSH
6187: LD_INT 2
6189: ARRAY
6190: PPUSH
6191: LD_INT 0
6193: PPUSH
6194: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6198: LD_EXP 14
6202: PPUSH
6203: LD_VAR 0 13
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: PPUSH
6212: LD_VAR 0 13
6216: PUSH
6217: LD_INT 2
6219: ARRAY
6220: PPUSH
6221: CALL_OW 111
// jmmArrival := true ;
6225: LD_ADDR_EXP 8
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 1
6237: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6245: LD_INT 1
6247: PPUSH
6248: LD_INT 17
6250: PPUSH
6251: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6255: LD_INT 2
6257: PPUSH
6258: LD_INT 17
6260: PPUSH
6261: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6265: LD_ADDR_VAR 0 5
6269: PUSH
6270: LD_INT 6
6272: PPUSH
6273: LD_INT 58
6275: PUSH
6276: EMPTY
6277: LIST
6278: PPUSH
6279: CALL_OW 70
6283: ST_TO_ADDR
// if tmp then
6284: LD_VAR 0 5
6288: IFFALSE 6316
// for i in tmp do
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_VAR 0 5
6299: PUSH
6300: FOR_IN
6301: IFFALSE 6314
// RemoveUnit ( i ) ;
6303: LD_VAR 0 2
6307: PPUSH
6308: CALL_OW 64
6312: GO 6300
6314: POP
6315: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6316: LD_ADDR_VAR 0 5
6320: PUSH
6321: LD_INT 6
6323: PPUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 3
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 70
6345: ST_TO_ADDR
// if tmp then
6346: LD_VAR 0 5
6350: IFFALSE 6374
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6352: LD_VAR 0 5
6356: PPUSH
6357: LD_INT 33
6359: PPUSH
6360: LD_INT 39
6362: PPUSH
6363: CALL_OW 111
// wait ( 0 0$3 ) ;
6367: LD_INT 105
6369: PPUSH
6370: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6374: LD_INT 70
6376: PPUSH
6377: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6381: LD_INT 6
6383: PPUSH
6384: LD_INT 50
6386: PUSH
6387: EMPTY
6388: LIST
6389: PPUSH
6390: CALL_OW 70
6394: NOT
6395: IFFALSE 6374
// uc_side := 4 ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_INT 4
6404: ST_TO_ADDR
// uc_nation := 1 ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6413: LD_ADDR_EXP 28
6417: PUSH
6418: LD_STRING Sikorski
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: LD_STRING 
6426: PPUSH
6427: CALL 41064 0 3
6431: ST_TO_ADDR
// vc_engine := engine_combustion ;
6432: LD_ADDR_OWVAR 39
6436: PUSH
6437: LD_INT 1
6439: ST_TO_ADDR
// vc_control := control_manual ;
6440: LD_ADDR_OWVAR 38
6444: PUSH
6445: LD_INT 1
6447: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6448: LD_ADDR_OWVAR 40
6452: PUSH
6453: LD_INT 6
6455: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6456: LD_ADDR_OWVAR 37
6460: PUSH
6461: LD_INT 4
6463: ST_TO_ADDR
// veh := CreateVehicle ;
6464: LD_ADDR_VAR 0 4
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6474: LD_VAR 0 4
6478: PPUSH
6479: LD_INT 3
6481: PPUSH
6482: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6486: LD_VAR 0 4
6490: PPUSH
6491: LD_INT 4
6493: NEG
6494: PPUSH
6495: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 70
6506: PPUSH
6507: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 6
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6526: LD_EXP 28
6530: PPUSH
6531: LD_VAR 0 4
6535: PPUSH
6536: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6540: LD_EXP 28
6544: PPUSH
6545: LD_INT 37
6547: PPUSH
6548: LD_INT 30
6550: PPUSH
6551: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6555: LD_INT 10
6557: PPUSH
6558: CALL_OW 67
// InitHc_All ( ) ;
6562: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 3
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_OWVAR 67
6598: ARRAY
6599: PUSH
6600: FOR_TO
6601: IFFALSE 6736
// begin repeat wait ( 0 0$2 ) ;
6603: LD_INT 70
6605: PPUSH
6606: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6610: LD_INT 6
6612: PPUSH
6613: LD_INT 50
6615: PUSH
6616: EMPTY
6617: LIST
6618: PPUSH
6619: CALL_OW 70
6623: NOT
6624: IFFALSE 6603
// uc_side := 4 ;
6626: LD_ADDR_OWVAR 20
6630: PUSH
6631: LD_INT 4
6633: ST_TO_ADDR
// uc_nation := 1 ;
6634: LD_ADDR_OWVAR 21
6638: PUSH
6639: LD_INT 1
6641: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6642: LD_INT 0
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_INT 4
6650: PPUSH
6651: LD_INT 7
6653: PPUSH
6654: CALL_OW 12
6658: PPUSH
6659: CALL_OW 380
// un := CreateHuman ;
6663: LD_ADDR_VAR 0 3
6667: PUSH
6668: CALL_OW 44
6672: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6673: LD_VAR 0 3
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 233
// SetTag ( un , 101 ) ;
6685: LD_VAR 0 3
6689: PPUSH
6690: LD_INT 101
6692: PPUSH
6693: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6697: LD_VAR 0 3
6701: PPUSH
6702: LD_INT 6
6704: PPUSH
6705: LD_INT 0
6707: PPUSH
6708: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6712: LD_VAR 0 3
6716: PPUSH
6717: LD_INT 25
6719: PPUSH
6720: LD_INT 27
6722: PPUSH
6723: CALL_OW 111
// wait ( 0 0$1 ) ;
6727: LD_INT 35
6729: PPUSH
6730: CALL_OW 67
// end ;
6734: GO 6600
6736: POP
6737: POP
// repeat wait ( 0 0$2 ) ;
6738: LD_INT 70
6740: PPUSH
6741: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 4
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 25
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: PUSH
6779: FOR_IN
6780: IFFALSE 6843
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_INT 17
6789: PPUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: LD_INT 58
6805: PUSH
6806: EMPTY
6807: LIST
6808: PUSH
6809: LD_INT 33
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 70
6832: PUSH
6833: LD_INT 1
6835: ARRAY
6836: PPUSH
6837: CALL_OW 115
6841: GO 6779
6843: POP
6844: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6845: LD_INT 17
6847: PPUSH
6848: LD_INT 22
6850: PUSH
6851: LD_INT 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: LD_INT 58
6863: PUSH
6864: EMPTY
6865: LIST
6866: PUSH
6867: LD_INT 33
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 70
6890: NOT
6891: IFFALSE 6738
// for i := 1 to 2 do
6893: LD_ADDR_VAR 0 2
6897: PUSH
6898: DOUBLE
6899: LD_INT 1
6901: DEC
6902: ST_TO_ADDR
6903: LD_INT 2
6905: PUSH
6906: FOR_TO
6907: IFFALSE 7019
// begin uc_side := 4 ;
6909: LD_ADDR_OWVAR 20
6913: PUSH
6914: LD_INT 4
6916: ST_TO_ADDR
// uc_nation := 1 ;
6917: LD_ADDR_OWVAR 21
6921: PUSH
6922: LD_INT 1
6924: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6925: LD_INT 0
6927: PPUSH
6928: LD_INT 4
6930: PPUSH
6931: LD_INT 3
6933: PPUSH
6934: LD_INT 5
6936: PPUSH
6937: CALL_OW 12
6941: PPUSH
6942: CALL_OW 380
// un := CreateHuman ;
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: CALL_OW 44
6955: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6956: LD_VAR 0 3
6960: PPUSH
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 233
// SetTag ( un , 101 ) ;
6968: LD_VAR 0 3
6972: PPUSH
6973: LD_INT 101
6975: PPUSH
6976: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_INT 6
6987: PPUSH
6988: LD_INT 0
6990: PPUSH
6991: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6995: LD_VAR 0 3
6999: PPUSH
7000: LD_INT 25
7002: PPUSH
7003: LD_INT 27
7005: PPUSH
7006: CALL_OW 111
// wait ( 0 0$1 ) ;
7010: LD_INT 35
7012: PPUSH
7013: CALL_OW 67
// end ;
7017: GO 6906
7019: POP
7020: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7021: LD_ADDR_VAR 0 2
7025: PUSH
7026: DOUBLE
7027: LD_INT 1
7029: DEC
7030: ST_TO_ADDR
7031: LD_INT 5
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7321
// begin repeat wait ( 0 0$2 ) ;
7058: LD_INT 70
7060: PPUSH
7061: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7065: LD_INT 6
7067: PPUSH
7068: LD_INT 50
7070: PUSH
7071: EMPTY
7072: LIST
7073: PPUSH
7074: CALL_OW 70
7078: NOT
7079: IFFALSE 7058
// uc_side := 4 ;
7081: LD_ADDR_OWVAR 20
7085: PUSH
7086: LD_INT 4
7088: ST_TO_ADDR
// uc_nation := 1 ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// vc_engine := engine_combustion ;
7097: LD_ADDR_OWVAR 39
7101: PUSH
7102: LD_INT 1
7104: ST_TO_ADDR
// vc_control := control_manual ;
7105: LD_ADDR_OWVAR 38
7109: PUSH
7110: LD_INT 1
7112: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7113: LD_ADDR_OWVAR 40
7117: PUSH
7118: LD_INT 5
7120: PUSH
7121: LD_INT 7
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 4
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_VAR 0 2
7140: PUSH
7141: LD_INT 4
7143: MOD
7144: PUSH
7145: LD_INT 1
7147: PLUS
7148: ARRAY
7149: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7150: LD_ADDR_OWVAR 37
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: LD_INT 4
7163: PUSH
7164: LD_INT 4
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_VAR 0 2
7177: PUSH
7178: LD_INT 4
7180: MOD
7181: PUSH
7182: LD_INT 1
7184: PLUS
7185: ARRAY
7186: ST_TO_ADDR
// veh := CreateVehicle ;
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: CALL_OW 45
7196: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7197: LD_VAR 0 4
7201: PPUSH
7202: LD_INT 3
7204: PPUSH
7205: CALL_OW 233
// SetTag ( veh , 0 ) ;
7209: LD_VAR 0 4
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7221: LD_VAR 0 4
7225: PPUSH
7226: LD_INT 70
7228: PPUSH
7229: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7233: LD_VAR 0 4
7237: PPUSH
7238: LD_INT 6
7240: PPUSH
7241: LD_INT 0
7243: PPUSH
7244: CALL_OW 49
// InitHc ;
7248: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7252: LD_INT 0
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 4
7260: PPUSH
7261: LD_INT 7
7263: PPUSH
7264: CALL_OW 12
7268: PPUSH
7269: CALL_OW 380
// un := CreateHuman ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: CALL_OW 44
7282: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7283: LD_VAR 0 3
7287: PPUSH
7288: LD_VAR 0 4
7292: PPUSH
7293: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7297: LD_VAR 0 3
7301: PPUSH
7302: LD_INT 30
7304: PPUSH
7305: LD_INT 22
7307: PPUSH
7308: CALL_OW 111
// wait ( 0 0$3 ) ;
7312: LD_INT 105
7314: PPUSH
7315: CALL_OW 67
// end ;
7319: GO 7055
7321: POP
7322: POP
// wait ( 0 0$10 ) ;
7323: LD_INT 350
7325: PPUSH
7326: CALL_OW 67
// end ;
7330: LD_VAR 0 1
7334: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
// gammaBase := [ ] ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: EMPTY
7347: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT 22
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 21
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 50
7380: PUSH
7381: EMPTY
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 70
7393: ST_TO_ADDR
// for i in buildings do
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 5
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7842
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 266
7416: PUSH
7417: LD_INT 6
7419: PUSH
7420: LD_INT 7
7422: PUSH
7423: LD_INT 8
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: IN
7431: IFFALSE 7545
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7433: LD_ADDR_VAR 0 4
7437: PUSH
7438: LD_VAR 0 4
7442: PUSH
7443: LD_VAR 0 3
7447: PPUSH
7448: CALL_OW 266
7452: PUSH
7453: LD_VAR 0 3
7457: PPUSH
7458: CALL_OW 250
7462: PUSH
7463: LD_VAR 0 3
7467: PPUSH
7468: CALL_OW 251
7472: PUSH
7473: LD_VAR 0 3
7477: PPUSH
7478: CALL_OW 254
7482: PUSH
7483: LD_VAR 0 3
7487: PPUSH
7488: CALL_OW 267
7492: PUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 248
7502: PUSH
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 268
7515: PUSH
7516: LD_VAR 0 3
7520: PPUSH
7521: LD_INT 2
7523: PPUSH
7524: CALL_OW 268
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: ADD
7542: ST_TO_ADDR
7543: GO 7840
// if GetBType ( i ) = b_bunker then
7545: LD_VAR 0 3
7549: PPUSH
7550: CALL_OW 266
7554: PUSH
7555: LD_INT 32
7557: EQUAL
7558: IFFALSE 7655
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7560: LD_ADDR_VAR 0 4
7564: PUSH
7565: LD_VAR 0 4
7569: PUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: CALL_OW 266
7579: PUSH
7580: LD_VAR 0 3
7584: PPUSH
7585: CALL_OW 250
7589: PUSH
7590: LD_VAR 0 3
7594: PPUSH
7595: CALL_OW 251
7599: PUSH
7600: LD_VAR 0 3
7604: PPUSH
7605: CALL_OW 254
7609: PUSH
7610: LD_VAR 0 3
7614: PPUSH
7615: CALL_OW 267
7619: PUSH
7620: LD_VAR 0 3
7624: PPUSH
7625: CALL_OW 248
7629: PUSH
7630: LD_VAR 0 3
7634: PPUSH
7635: CALL_OW 269
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: ADD
7652: ST_TO_ADDR
7653: GO 7840
// if GetBType ( i ) = b_factory then
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 266
7664: PUSH
7665: LD_INT 3
7667: EQUAL
7668: IFFALSE 7758
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PPUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 266
7692: PUSH
7693: LD_VAR 0 3
7697: PPUSH
7698: CALL_OW 250
7702: PUSH
7703: LD_VAR 0 3
7707: PPUSH
7708: CALL_OW 251
7712: PUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: CALL_OW 254
7722: PUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 267
7732: PUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 248
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 2
7755: ST_TO_ADDR
7756: GO 7840
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7758: LD_ADDR_VAR 0 4
7762: PUSH
7763: LD_VAR 0 4
7767: PUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 266
7777: PUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 250
7787: PUSH
7788: LD_VAR 0 3
7792: PPUSH
7793: CALL_OW 251
7797: PUSH
7798: LD_VAR 0 3
7802: PPUSH
7803: CALL_OW 254
7807: PUSH
7808: LD_VAR 0 3
7812: PPUSH
7813: CALL_OW 267
7817: PUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 248
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: ADD
7839: ST_TO_ADDR
// end ;
7840: GO 7404
7842: POP
7843: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7844: LD_VAR 0 4
7848: PPUSH
7849: LD_STRING 08_GammaBase
7851: PPUSH
7852: CALL_OW 39
// end ;
7856: LD_VAR 0 2
7860: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_INT 17
7877: PPUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 3
7890: PUSH
7891: LD_INT 21
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 3
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 70
7931: ST_TO_ADDR
// if tmp then
7932: LD_VAR 0 3
7936: IFFALSE 8055
// begin for i in tmp do
7938: LD_ADDR_VAR 0 2
7942: PUSH
7943: LD_VAR 0 3
7947: PUSH
7948: FOR_IN
7949: IFFALSE 7980
// begin SetSide ( i , 4 ) ;
7951: LD_VAR 0 2
7955: PPUSH
7956: LD_INT 4
7958: PPUSH
7959: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7963: LD_VAR 0 2
7967: PPUSH
7968: LD_INT 42
7970: PPUSH
7971: LD_INT 22
7973: PPUSH
7974: CALL_OW 111
// end ;
7978: GO 7948
7980: POP
7981: POP
// repeat wait ( 0 0$3 ) ;
7982: LD_INT 105
7984: PPUSH
7985: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_INT 51
7996: PPUSH
7997: LD_INT 16
7999: PPUSH
8000: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8004: LD_VAR 0 3
8008: PPUSH
8009: LD_INT 95
8011: PUSH
8012: LD_INT 17
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 72
8023: NOT
8024: IFFALSE 7982
// for i in tmp do
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 3
8035: PUSH
8036: FOR_IN
8037: IFFALSE 8053
// SetSide ( i , 1 ) ;
8039: LD_VAR 0 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 235
8051: GO 8036
8053: POP
8054: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8055: LD_ADDR_VAR 0 3
8059: PUSH
8060: LD_INT 17
8062: PPUSH
8063: LD_INT 22
8065: PUSH
8066: LD_INT 1
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 70
8091: ST_TO_ADDR
// if tmp then
8092: LD_VAR 0 3
8096: IFFALSE 8120
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8098: LD_VAR 0 3
8102: PPUSH
8103: LD_INT 40
8105: PPUSH
8106: LD_INT 32
8108: PPUSH
8109: CALL_OW 111
// wait ( 0 0$3 ) ;
8113: LD_INT 105
8115: PPUSH
8116: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8120: LD_ADDR_VAR 0 3
8124: PUSH
8125: LD_INT 17
8127: PPUSH
8128: LD_INT 22
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 2
8140: PUSH
8141: LD_INT 21
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 21
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// if tmp then
8175: LD_VAR 0 3
8179: IFFALSE 8327
// begin repeat wait ( 0 0$1 ) ;
8181: LD_INT 35
8183: PPUSH
8184: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 17
8195: PPUSH
8196: LD_INT 22
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 2
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 21
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 70
8242: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: LD_INT 25
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 2
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: FOR_IN
8296: IFFALSE 8318
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: CALL_OW 115
8316: GO 8295
8318: POP
8319: POP
// until not tmp ;
8320: LD_VAR 0 3
8324: NOT
8325: IFFALSE 8181
// end ; wait ( 0 0$2 ) ;
8327: LD_INT 70
8329: PPUSH
8330: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8334: LD_ADDR_VAR 0 3
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 4
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8354: LD_VAR 0 3
8358: PPUSH
8359: LD_INT 52
8361: PPUSH
8362: LD_INT 54
8364: PPUSH
8365: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8369: LD_VAR 0 3
8373: PPUSH
8374: LD_INT 175
8376: PPUSH
8377: CALL_OW 202
// wait ( 0 0$5 ) ;
8381: LD_INT 175
8383: PPUSH
8384: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_INT 120
8395: PUSH
8396: LD_INT 101
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 72
8407: PPUSH
8408: LD_INT 42
8410: PPUSH
8411: LD_INT 52
8413: PPUSH
8414: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8418: LD_VAR 0 3
8422: PPUSH
8423: LD_INT 120
8425: PUSH
8426: LD_INT 101
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 72
8437: PPUSH
8438: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_INT 120
8449: PUSH
8450: LD_INT 101
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 25
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 72
8475: PPUSH
8476: LD_INT 34
8478: PPUSH
8479: LD_INT 47
8481: PPUSH
8482: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8486: LD_VAR 0 3
8490: PPUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 101
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 4
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PPUSH
8515: CALL_OW 72
8519: PPUSH
8520: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8524: LD_ADDR_VAR 0 7
8528: PUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8549: LD_ADDR_VAR 0 4
8553: PUSH
8554: LD_INT 81
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8569: LD_ADDR_VAR 0 5
8573: PUSH
8574: LD_INT 57
8576: PUSH
8577: LD_INT 66
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 62
8586: PUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8598: LD_INT 35
8600: PPUSH
8601: CALL_OW 67
// for i in filter do
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: LD_VAR 0 7
8614: PUSH
8615: FOR_IN
8616: IFFALSE 9040
// begin if IsDead ( i ) then
8618: LD_VAR 0 2
8622: PPUSH
8623: CALL_OW 301
8627: IFFALSE 8647
// begin filter := filter diff i ;
8629: LD_ADDR_VAR 0 7
8633: PUSH
8634: LD_VAR 0 7
8638: PUSH
8639: LD_VAR 0 2
8643: DIFF
8644: ST_TO_ADDR
// continue ;
8645: GO 8615
// end ; tmp := IsDrivenBy ( i ) ;
8647: LD_ADDR_VAR 0 3
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 311
8661: ST_TO_ADDR
// if not tmp then
8662: LD_VAR 0 3
8666: NOT
8667: IFFALSE 8671
// continue ;
8669: GO 8615
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL_OW 261
8680: PUSH
8681: LD_INT 30
8683: GREATER
8684: PUSH
8685: LD_VAR 0 2
8689: PPUSH
8690: CALL_OW 110
8694: PUSH
8695: LD_INT 2
8697: EQUAL
8698: AND
8699: IFFALSE 8715
// SetTag ( i , 0 ) else
8701: LD_VAR 0 2
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 109
8713: GO 8744
// if GetTag ( i ) = 2 then
8715: LD_VAR 0 2
8719: PPUSH
8720: CALL_OW 110
8724: PUSH
8725: LD_INT 2
8727: EQUAL
8728: IFFALSE 8744
// begin ComMoveUnit ( i , amDepot ) ;
8730: LD_VAR 0 2
8734: PPUSH
8735: LD_EXP 31
8739: PPUSH
8740: CALL_OW 112
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8744: LD_VAR 0 2
8748: PPUSH
8749: CALL_OW 256
8753: PUSH
8754: LD_INT 600
8756: GREATEREQUAL
8757: PUSH
8758: LD_VAR 0 2
8762: PPUSH
8763: CALL_OW 110
8767: NOT
8768: AND
8769: IFFALSE 8795
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8771: LD_VAR 0 2
8775: PPUSH
8776: LD_VAR 0 4
8780: PPUSH
8781: LD_VAR 0 2
8785: PPUSH
8786: CALL_OW 74
8790: PPUSH
8791: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8795: LD_VAR 0 2
8799: PPUSH
8800: CALL_OW 256
8804: PUSH
8805: LD_INT 600
8807: LESS
8808: PUSH
8809: LD_VAR 0 2
8813: PPUSH
8814: CALL_OW 110
8818: NOT
8819: AND
8820: IFFALSE 8896
// begin SetTag ( i , 1 ) ;
8822: LD_VAR 0 2
8826: PPUSH
8827: LD_INT 1
8829: PPUSH
8830: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8834: LD_ADDR_VAR 0 6
8838: PUSH
8839: LD_VAR 0 2
8843: PPUSH
8844: LD_VAR 0 5
8848: PPUSH
8849: CALL 82099 0 2
8853: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8854: LD_VAR 0 2
8858: PPUSH
8859: LD_VAR 0 6
8863: PUSH
8864: LD_INT 1
8866: ARRAY
8867: PPUSH
8868: LD_VAR 0 6
8872: PUSH
8873: LD_INT 2
8875: ARRAY
8876: PPUSH
8877: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8881: LD_VAR 0 2
8885: PPUSH
8886: LD_INT 40
8888: PPUSH
8889: LD_INT 49
8891: PPUSH
8892: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8896: LD_VAR 0 2
8900: PPUSH
8901: CALL_OW 110
8905: PUSH
8906: LD_INT 1
8908: EQUAL
8909: PUSH
8910: LD_VAR 0 2
8914: PPUSH
8915: LD_INT 40
8917: PPUSH
8918: LD_INT 49
8920: PPUSH
8921: CALL_OW 297
8925: PUSH
8926: LD_INT 9
8928: LESS
8929: AND
8930: PUSH
8931: LD_VAR 0 3
8935: AND
8936: IFFALSE 9038
// begin ComExitVehicle ( tmp ) ;
8938: LD_VAR 0 3
8942: PPUSH
8943: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_VAR 0 2
8956: PPUSH
8957: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8961: LD_INT 35
8963: PPUSH
8964: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL_OW 256
8977: PUSH
8978: LD_INT 1000
8980: EQUAL
8981: IFFALSE 8961
// ComEnterUnit ( tmp , i ) ;
8983: LD_VAR 0 3
8987: PPUSH
8988: LD_VAR 0 2
8992: PPUSH
8993: CALL_OW 120
// if GetFuel ( i ) <= 30 then
8997: LD_VAR 0 2
9001: PPUSH
9002: CALL_OW 261
9006: PUSH
9007: LD_INT 30
9009: LESSEQUAL
9010: IFFALSE 9026
// SetTag ( i , 2 ) else
9012: LD_VAR 0 2
9016: PPUSH
9017: LD_INT 2
9019: PPUSH
9020: CALL_OW 109
9024: GO 9038
// SetTag ( i , 0 ) ;
9026: LD_VAR 0 2
9030: PPUSH
9031: LD_INT 0
9033: PPUSH
9034: CALL_OW 109
// end ; end ;
9038: GO 8615
9040: POP
9041: POP
// until not filter ;
9042: LD_VAR 0 7
9046: NOT
9047: IFFALSE 8598
// end ; end_of_file
9049: LD_VAR 0 1
9053: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9054: LD_INT 0
9056: PPUSH
9057: PPUSH
9058: PPUSH
9059: PPUSH
9060: PPUSH
// uc_side := 3 ;
9061: LD_ADDR_OWVAR 20
9065: PUSH
9066: LD_INT 3
9068: ST_TO_ADDR
// uc_nation := 3 ;
9069: LD_ADDR_OWVAR 21
9073: PUSH
9074: LD_INT 3
9076: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9077: LD_ADDR_EXP 33
9081: PUSH
9082: LD_INT 8
9084: PUSH
9085: LD_INT 11
9087: PUSH
9088: LD_INT 14
9090: PUSH
9091: LD_INT 17
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: PUSH
9100: LD_OWVAR 67
9104: ARRAY
9105: ST_TO_ADDR
// ruMobile := [ ] ;
9106: LD_ADDR_EXP 34
9110: PUSH
9111: EMPTY
9112: ST_TO_ADDR
// ruBuildList := [ ] ;
9113: LD_ADDR_EXP 35
9117: PUSH
9118: EMPTY
9119: ST_TO_ADDR
// russianAttackers := [ ] ;
9120: LD_ADDR_EXP 36
9124: PUSH
9125: EMPTY
9126: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9127: LD_ADDR_VAR 0 5
9131: PUSH
9132: LD_INT 43
9134: PUSH
9135: LD_INT 44
9137: PUSH
9138: LD_INT 46
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: ST_TO_ADDR
// if Difficulty > 2 then
9146: LD_OWVAR 67
9150: PUSH
9151: LD_INT 2
9153: GREATER
9154: IFFALSE 9177
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9156: LD_ADDR_VAR 0 5
9160: PUSH
9161: LD_VAR 0 5
9165: PUSH
9166: LD_INT 45
9168: PUSH
9169: LD_INT 46
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: ADD
9176: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9177: LD_ADDR_EXP 32
9181: PUSH
9182: LD_STRING Borodin
9184: PPUSH
9185: CALL_OW 25
9189: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9190: LD_EXP 32
9194: PPUSH
9195: LD_INT 28
9197: PPUSH
9198: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9202: LD_INT 28
9204: PPUSH
9205: CALL_OW 274
9209: PPUSH
9210: LD_INT 1
9212: PPUSH
9213: LD_INT 3000
9215: PUSH
9216: LD_INT 4000
9218: PUSH
9219: LD_INT 5000
9221: PUSH
9222: LD_INT 6000
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: PUSH
9231: LD_OWVAR 67
9235: ARRAY
9236: PPUSH
9237: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9241: LD_INT 28
9243: PPUSH
9244: CALL_OW 274
9248: PPUSH
9249: LD_INT 2
9251: PPUSH
9252: LD_INT 1000
9254: PPUSH
9255: CALL_OW 277
// if Difficulty > 2 then
9259: LD_OWVAR 67
9263: PUSH
9264: LD_INT 2
9266: GREATER
9267: IFFALSE 9391
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9269: LD_ADDR_VAR 0 4
9273: PUSH
9274: LD_INT 99
9276: PUSH
9277: LD_INT 130
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 121
9290: PUSH
9291: LD_INT 127
9293: PUSH
9294: LD_INT 4
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 117
9304: PUSH
9305: LD_INT 121
9307: PUSH
9308: LD_INT 4
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: ST_TO_ADDR
// for i in tmp do
9321: LD_ADDR_VAR 0 2
9325: PUSH
9326: LD_VAR 0 4
9330: PUSH
9331: FOR_IN
9332: IFFALSE 9389
// begin bc_type := b_turret ;
9334: LD_ADDR_OWVAR 42
9338: PUSH
9339: LD_INT 33
9341: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9342: LD_ADDR_OWVAR 43
9346: PUSH
9347: LD_INT 2
9349: PUSH
9350: LD_OWVAR 67
9354: PLUS
9355: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9356: LD_VAR 0 2
9360: PUSH
9361: LD_INT 1
9363: ARRAY
9364: PPUSH
9365: LD_VAR 0 2
9369: PUSH
9370: LD_INT 2
9372: ARRAY
9373: PPUSH
9374: LD_VAR 0 2
9378: PUSH
9379: LD_INT 3
9381: ARRAY
9382: PPUSH
9383: CALL_OW 47
// end ;
9387: GO 9331
9389: POP
9390: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9391: LD_ADDR_VAR 0 2
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_INT 3
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 21
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 69
9424: PUSH
9425: FOR_IN
9426: IFFALSE 9448
// SetBLevel ( i , 2 + Difficulty ) ;
9428: LD_VAR 0 2
9432: PPUSH
9433: LD_INT 2
9435: PUSH
9436: LD_OWVAR 67
9440: PLUS
9441: PPUSH
9442: CALL_OW 241
9446: GO 9425
9448: POP
9449: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9450: LD_ADDR_VAR 0 4
9454: PUSH
9455: LD_INT 22
9457: PUSH
9458: LD_INT 3
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 2
9467: PUSH
9468: LD_INT 30
9470: PUSH
9471: LD_INT 32
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 30
9480: PUSH
9481: LD_INT 33
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PPUSH
9497: CALL_OW 69
9501: ST_TO_ADDR
// for i in tmp do
9502: LD_ADDR_VAR 0 2
9506: PUSH
9507: LD_VAR 0 4
9511: PUSH
9512: FOR_IN
9513: IFFALSE 9545
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9515: LD_VAR 0 2
9519: PPUSH
9520: LD_VAR 0 5
9524: PUSH
9525: LD_INT 1
9527: PPUSH
9528: LD_VAR 0 5
9532: PPUSH
9533: CALL_OW 12
9537: ARRAY
9538: PPUSH
9539: CALL_OW 431
9543: GO 9512
9545: POP
9546: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9547: LD_ADDR_VAR 0 2
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 30
9564: PUSH
9565: LD_INT 32
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PPUSH
9576: CALL_OW 69
9580: PUSH
9581: FOR_IN
9582: IFFALSE 9631
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9584: LD_INT 0
9586: PPUSH
9587: LD_INT 5
9589: PUSH
9590: LD_INT 6
9592: PUSH
9593: LD_INT 7
9595: PUSH
9596: LD_INT 8
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: PUSH
9605: LD_OWVAR 67
9609: ARRAY
9610: PPUSH
9611: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9615: CALL_OW 44
9619: PPUSH
9620: LD_VAR 0 2
9624: PPUSH
9625: CALL_OW 52
// end ;
9629: GO 9581
9631: POP
9632: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9633: LD_ADDR_VAR 0 2
9637: PUSH
9638: LD_INT 22
9640: PUSH
9641: LD_INT 3
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 30
9650: PUSH
9651: LD_INT 5
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 69
9666: PUSH
9667: FOR_IN
9668: IFFALSE 9758
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9670: LD_ADDR_VAR 0 3
9674: PUSH
9675: DOUBLE
9676: LD_INT 1
9678: DEC
9679: ST_TO_ADDR
9680: LD_INT 2
9682: PUSH
9683: LD_INT 3
9685: PUSH
9686: LD_INT 4
9688: PUSH
9689: LD_INT 5
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: LD_OWVAR 67
9702: ARRAY
9703: PUSH
9704: FOR_TO
9705: IFFALSE 9754
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9707: LD_INT 0
9709: PPUSH
9710: LD_INT 5
9712: PUSH
9713: LD_INT 6
9715: PUSH
9716: LD_INT 7
9718: PUSH
9719: LD_INT 8
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: LD_OWVAR 67
9732: ARRAY
9733: PPUSH
9734: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9738: CALL_OW 44
9742: PPUSH
9743: LD_VAR 0 2
9747: PPUSH
9748: CALL_OW 52
// end ;
9752: GO 9704
9754: POP
9755: POP
// end ;
9756: GO 9667
9758: POP
9759: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9760: LD_ADDR_VAR 0 2
9764: PUSH
9765: DOUBLE
9766: LD_INT 1
9768: DEC
9769: ST_TO_ADDR
9770: LD_INT 3
9772: PUSH
9773: LD_INT 4
9775: PUSH
9776: LD_INT 5
9778: PUSH
9779: LD_INT 5
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_OWVAR 67
9792: ARRAY
9793: PUSH
9794: FOR_TO
9795: IFFALSE 9842
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9797: LD_INT 0
9799: PPUSH
9800: LD_INT 4
9802: PUSH
9803: LD_INT 5
9805: PUSH
9806: LD_INT 5
9808: PUSH
9809: LD_INT 6
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: PUSH
9818: LD_OWVAR 67
9822: ARRAY
9823: PPUSH
9824: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9828: CALL_OW 44
9832: PPUSH
9833: LD_INT 28
9835: PPUSH
9836: CALL_OW 52
// end ;
9840: GO 9794
9842: POP
9843: POP
// for i := 1 to 2 do
9844: LD_ADDR_VAR 0 2
9848: PUSH
9849: DOUBLE
9850: LD_INT 1
9852: DEC
9853: ST_TO_ADDR
9854: LD_INT 2
9856: PUSH
9857: FOR_TO
9858: IFFALSE 9892
// begin PrepareScientist ( false , 6 ) ;
9860: LD_INT 0
9862: PPUSH
9863: LD_INT 6
9865: PPUSH
9866: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9870: CALL_OW 44
9874: PPUSH
9875: LD_INT 81
9877: PPUSH
9878: LD_INT 93
9880: PPUSH
9881: CALL_OW 428
9885: PPUSH
9886: CALL_OW 52
// end ;
9890: GO 9857
9892: POP
9893: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9894: LD_INT 22
9896: PPUSH
9897: LD_INT 1
9899: PPUSH
9900: LD_INT 3
9902: PPUSH
9903: LD_INT 51
9905: PPUSH
9906: LD_INT 100
9908: PPUSH
9909: CALL 45904 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9913: CALL_OW 45
9917: PPUSH
9918: LD_INT 91
9920: PPUSH
9921: LD_INT 94
9923: PPUSH
9924: LD_INT 3
9926: PPUSH
9927: LD_INT 0
9929: PPUSH
9930: CALL_OW 50
// for i := 1 to 2 do
9934: LD_ADDR_VAR 0 2
9938: PUSH
9939: DOUBLE
9940: LD_INT 1
9942: DEC
9943: ST_TO_ADDR
9944: LD_INT 2
9946: PUSH
9947: FOR_TO
9948: IFFALSE 9992
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9950: LD_INT 22
9952: PPUSH
9953: LD_INT 1
9955: PPUSH
9956: LD_INT 3
9958: PPUSH
9959: LD_INT 52
9961: PPUSH
9962: LD_INT 100
9964: PPUSH
9965: CALL 45904 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9969: CALL_OW 45
9973: PPUSH
9974: LD_INT 91
9976: PPUSH
9977: LD_INT 94
9979: PPUSH
9980: LD_INT 4
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: CALL_OW 50
// end ;
9990: GO 9947
9992: POP
9993: POP
// end ;
9994: LD_VAR 0 1
9998: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9999: LD_INT 0
10001: PPUSH
10002: PPUSH
10003: PPUSH
10004: PPUSH
10005: PPUSH
// uc_side := 3 ;
10006: LD_ADDR_OWVAR 20
10010: PUSH
10011: LD_INT 3
10013: ST_TO_ADDR
// uc_nation := 3 ;
10014: LD_ADDR_OWVAR 21
10018: PUSH
10019: LD_INT 3
10021: ST_TO_ADDR
// for i := 1 to 4 do
10022: LD_ADDR_VAR 0 2
10026: PUSH
10027: DOUBLE
10028: LD_INT 1
10030: DEC
10031: ST_TO_ADDR
10032: LD_INT 4
10034: PUSH
10035: FOR_TO
10036: IFFALSE 10163
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10038: LD_INT 22
10040: PPUSH
10041: LD_INT 1
10043: PPUSH
10044: LD_INT 1
10046: PPUSH
10047: LD_INT 42
10049: PUSH
10050: LD_INT 43
10052: PUSH
10053: LD_INT 44
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: PUSH
10061: LD_INT 1
10063: PPUSH
10064: LD_INT 3
10066: PPUSH
10067: CALL_OW 12
10071: ARRAY
10072: PPUSH
10073: LD_INT 40
10075: PPUSH
10076: CALL 45904 0 5
// veh := CreateVehicle ;
10080: LD_ADDR_VAR 0 4
10084: PUSH
10085: CALL_OW 45
10089: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10090: LD_VAR 0 4
10094: PPUSH
10095: LD_INT 5
10097: PPUSH
10098: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10102: LD_VAR 0 4
10106: PPUSH
10107: LD_INT 7
10109: PPUSH
10110: LD_INT 0
10112: PPUSH
10113: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10117: LD_INT 0
10119: PPUSH
10120: LD_INT 5
10122: PPUSH
10123: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10127: CALL_OW 44
10131: PPUSH
10132: LD_VAR 0 4
10136: PPUSH
10137: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10141: LD_ADDR_VAR 0 5
10145: PUSH
10146: LD_VAR 0 5
10150: PPUSH
10151: LD_VAR 0 4
10155: PPUSH
10156: CALL 78755 0 2
10160: ST_TO_ADDR
// end ;
10161: GO 10035
10163: POP
10164: POP
// for i := 1 to 3 do
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: DOUBLE
10171: LD_INT 1
10173: DEC
10174: ST_TO_ADDR
10175: LD_INT 3
10177: PUSH
10178: FOR_TO
10179: IFFALSE 10306
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10181: LD_INT 22
10183: PPUSH
10184: LD_INT 1
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: LD_INT 42
10192: PUSH
10193: LD_INT 43
10195: PUSH
10196: LD_INT 44
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 1
10206: PPUSH
10207: LD_INT 3
10209: PPUSH
10210: CALL_OW 12
10214: ARRAY
10215: PPUSH
10216: LD_INT 40
10218: PPUSH
10219: CALL 45904 0 5
// veh := CreateVehicle ;
10223: LD_ADDR_VAR 0 4
10227: PUSH
10228: CALL_OW 45
10232: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10233: LD_VAR 0 4
10237: PPUSH
10238: LD_INT 5
10240: PPUSH
10241: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10245: LD_VAR 0 4
10249: PPUSH
10250: LD_INT 8
10252: PPUSH
10253: LD_INT 0
10255: PPUSH
10256: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10260: LD_INT 0
10262: PPUSH
10263: LD_INT 5
10265: PPUSH
10266: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10270: CALL_OW 44
10274: PPUSH
10275: LD_VAR 0 4
10279: PPUSH
10280: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10284: LD_ADDR_VAR 0 5
10288: PUSH
10289: LD_VAR 0 5
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: CALL 78755 0 2
10303: ST_TO_ADDR
// end ;
10304: GO 10178
10306: POP
10307: POP
// for i := 1 to 2 do
10308: LD_ADDR_VAR 0 2
10312: PUSH
10313: DOUBLE
10314: LD_INT 1
10316: DEC
10317: ST_TO_ADDR
10318: LD_INT 2
10320: PUSH
10321: FOR_TO
10322: IFFALSE 10381
// begin PrepareSoldier ( false , 5 ) ;
10324: LD_INT 0
10326: PPUSH
10327: LD_INT 5
10329: PPUSH
10330: CALL_OW 381
// un := CreateHuman ;
10334: LD_ADDR_VAR 0 3
10338: PUSH
10339: CALL_OW 44
10343: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10344: LD_VAR 0 3
10348: PPUSH
10349: LD_INT 8
10351: PPUSH
10352: LD_INT 0
10354: PPUSH
10355: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10359: LD_ADDR_VAR 0 5
10363: PUSH
10364: LD_VAR 0 5
10368: PPUSH
10369: LD_VAR 0 3
10373: PPUSH
10374: CALL 78755 0 2
10378: ST_TO_ADDR
// end ;
10379: GO 10321
10381: POP
10382: POP
// for i in tmp do
10383: LD_ADDR_VAR 0 2
10387: PUSH
10388: LD_VAR 0 5
10392: PUSH
10393: FOR_IN
10394: IFFALSE 10413
// ComAgressiveMove ( i , 51 , 16 ) ;
10396: LD_VAR 0 2
10400: PPUSH
10401: LD_INT 51
10403: PPUSH
10404: LD_INT 16
10406: PPUSH
10407: CALL_OW 114
10411: GO 10393
10413: POP
10414: POP
// end ;
10415: LD_VAR 0 1
10419: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10420: LD_EXP 34
10424: IFFALSE 10999
10426: GO 10428
10428: DISABLE
10429: LD_INT 0
10431: PPUSH
10432: PPUSH
10433: PPUSH
// begin enable ;
10434: ENABLE
// if not ruMobile then
10435: LD_EXP 34
10439: NOT
10440: IFFALSE 10444
// exit ;
10442: GO 10999
// for i in ruMobile do
10444: LD_ADDR_VAR 0 1
10448: PUSH
10449: LD_EXP 34
10453: PUSH
10454: FOR_IN
10455: IFFALSE 10997
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10457: LD_VAR 0 1
10461: PPUSH
10462: CALL_OW 302
10466: NOT
10467: PUSH
10468: LD_VAR 0 1
10472: PPUSH
10473: CALL_OW 255
10477: PUSH
10478: LD_INT 3
10480: NONEQUAL
10481: OR
10482: IFFALSE 10502
// begin ruMobile := ruMobile diff i ;
10484: LD_ADDR_EXP 34
10488: PUSH
10489: LD_EXP 34
10493: PUSH
10494: LD_VAR 0 1
10498: DIFF
10499: ST_TO_ADDR
// continue ;
10500: GO 10454
// end ; if GetTag ( i ) = 300 then
10502: LD_VAR 0 1
10506: PPUSH
10507: CALL_OW 110
10511: PUSH
10512: LD_INT 300
10514: EQUAL
10515: IFFALSE 10630
// begin if GetFuel ( i ) < 50 then
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 261
10526: PUSH
10527: LD_INT 50
10529: LESS
10530: IFFALSE 10589
// begin ComMoveXY ( i , 93 , 100 ) ;
10532: LD_VAR 0 1
10536: PPUSH
10537: LD_INT 93
10539: PPUSH
10540: LD_INT 100
10542: PPUSH
10543: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10547: LD_INT 35
10549: PPUSH
10550: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10554: LD_VAR 0 1
10558: PPUSH
10559: LD_INT 93
10561: PPUSH
10562: LD_INT 100
10564: PPUSH
10565: CALL_OW 297
10569: PUSH
10570: LD_INT 4
10572: LESS
10573: IFFALSE 10547
// SetFuel ( i , 100 ) ;
10575: LD_VAR 0 1
10579: PPUSH
10580: LD_INT 100
10582: PPUSH
10583: CALL_OW 240
// end else
10587: GO 10630
// if not IsInArea ( i , ruParkingArea ) then
10589: LD_VAR 0 1
10593: PPUSH
10594: LD_INT 10
10596: PPUSH
10597: CALL_OW 308
10601: NOT
10602: IFFALSE 10618
// ComMoveToArea ( i , ruParkingArea ) else
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 10
10611: PPUSH
10612: CALL_OW 113
10616: GO 10630
// SetTag ( i , 301 ) ;
10618: LD_VAR 0 1
10622: PPUSH
10623: LD_INT 301
10625: PPUSH
10626: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 110
10639: PUSH
10640: LD_INT 301
10642: EQUAL
10643: IFFALSE 10773
// begin if GetLives ( i ) < 1000 then
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 256
10654: PUSH
10655: LD_INT 1000
10657: LESS
10658: IFFALSE 10750
// begin if not IsDrivenBy ( i ) then
10660: LD_VAR 0 1
10664: PPUSH
10665: CALL_OW 311
10669: NOT
10670: IFFALSE 10674
// continue ;
10672: GO 10454
// mech := IsDrivenBy ( i ) ;
10674: LD_ADDR_VAR 0 2
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: CALL_OW 311
10688: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10689: LD_VAR 0 2
10693: PPUSH
10694: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10698: LD_VAR 0 2
10702: PPUSH
10703: LD_VAR 0 1
10707: PPUSH
10708: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10712: LD_INT 35
10714: PPUSH
10715: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10719: LD_VAR 0 1
10723: PPUSH
10724: CALL_OW 256
10728: PUSH
10729: LD_INT 1000
10731: EQUAL
10732: IFFALSE 10712
// ComEnterUnit ( mech , i ) ;
10734: LD_VAR 0 2
10738: PPUSH
10739: LD_VAR 0 1
10743: PPUSH
10744: CALL_OW 120
// end else
10748: GO 10773
// if IsDrivenBy ( i ) then
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 311
10759: IFFALSE 10773
// SetTag ( i , 0 ) ;
10761: LD_VAR 0 1
10765: PPUSH
10766: LD_INT 0
10768: PPUSH
10769: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 110
10782: PUSH
10783: LD_INT 300
10785: LESS
10786: IFFALSE 10995
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10788: LD_ADDR_VAR 0 3
10792: PUSH
10793: LD_INT 11
10795: PPUSH
10796: LD_INT 81
10798: PUSH
10799: LD_INT 3
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PPUSH
10806: CALL_OW 70
10810: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 256
10820: PUSH
10821: LD_INT 650
10823: LESS
10824: IFFALSE 10849
// begin ComStop ( i ) ;
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 141
// SetTag ( i , 300 ) ;
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 300
10842: PPUSH
10843: CALL_OW 109
// continue ;
10847: GO 10454
// end ; if enemy then
10849: LD_VAR 0 3
10853: IFFALSE 10893
// begin if not HasTask ( i ) then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 314
10864: NOT
10865: IFFALSE 10891
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10867: LD_VAR 0 1
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: LD_VAR 0 1
10881: PPUSH
10882: CALL_OW 74
10886: PPUSH
10887: CALL_OW 115
// end else
10891: GO 10995
// if ruMobile > 1 then
10893: LD_EXP 34
10897: PUSH
10898: LD_INT 1
10900: GREATER
10901: IFFALSE 10995
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10903: LD_ADDR_VAR 0 3
10907: PUSH
10908: LD_INT 81
10910: PUSH
10911: LD_INT 3
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 69
10922: ST_TO_ADDR
// if enemy then
10923: LD_VAR 0 3
10927: IFFALSE 10995
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10929: LD_VAR 0 1
10933: PPUSH
10934: LD_INT 116
10936: PUSH
10937: LD_INT 95
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 84
10946: PUSH
10947: LD_INT 68
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 58
10956: PUSH
10957: LD_INT 53
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 44
10966: PUSH
10967: LD_INT 35
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 45
10976: PUSH
10977: LD_INT 23
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: PPUSH
10991: CALL 81359 0 2
// end ; end ; end ;
10995: GO 10454
10997: POP
10998: POP
// end ;
10999: PPOPN 3
11001: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11002: LD_INT 3
11004: PUSH
11005: LD_INT 22
11007: PUSH
11008: LD_INT 1
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 32
11021: PUSH
11022: LD_INT 1
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PPUSH
11033: CALL_OW 69
11037: IFFALSE 11121
11039: GO 11041
11041: DISABLE
11042: LD_INT 0
11044: PPUSH
// begin enable ;
11045: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11046: LD_ADDR_VAR 0 1
11050: PUSH
11051: LD_INT 3
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 1
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 32
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PPUSH
11082: CALL_OW 69
11086: PUSH
11087: FOR_IN
11088: IFFALSE 11119
// if GetFuel ( i ) < 3 then
11090: LD_VAR 0 1
11094: PPUSH
11095: CALL_OW 261
11099: PUSH
11100: LD_INT 3
11102: LESS
11103: IFFALSE 11117
// SetFuel ( i , 3 ) ;
11105: LD_VAR 0 1
11109: PPUSH
11110: LD_INT 3
11112: PPUSH
11113: CALL_OW 240
11117: GO 11087
11119: POP
11120: POP
// end ;
11121: PPOPN 1
11123: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11124: LD_INT 29
11126: PPUSH
11127: CALL_OW 302
11131: PUSH
11132: LD_INT 29
11134: PPUSH
11135: CALL_OW 461
11139: PUSH
11140: LD_INT 2
11142: EQUAL
11143: AND
11144: IFFALSE 11377
11146: GO 11148
11148: DISABLE
11149: LD_INT 0
11151: PPUSH
11152: PPUSH
// begin enable ;
11153: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11154: LD_ADDR_VAR 0 1
11158: PUSH
11159: LD_INT 21
11161: PUSH
11162: LD_INT 22
11164: PUSH
11165: LD_INT 23
11167: PUSH
11168: LD_INT 24
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 1
11179: PPUSH
11180: LD_INT 4
11182: PPUSH
11183: CALL_OW 12
11187: ARRAY
11188: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11189: LD_ADDR_VAR 0 2
11193: PUSH
11194: LD_INT 42
11196: PUSH
11197: LD_INT 44
11199: PUSH
11200: LD_INT 43
11202: PUSH
11203: LD_INT 46
11205: PUSH
11206: LD_INT 45
11208: PUSH
11209: LD_INT 46
11211: PUSH
11212: LD_INT 45
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: PUSH
11224: LD_OWVAR 67
11228: PUSH
11229: LD_INT 0
11231: PPUSH
11232: LD_INT 3
11234: PPUSH
11235: CALL_OW 12
11239: PLUS
11240: ARRAY
11241: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11242: LD_VAR 0 1
11246: PUSH
11247: LD_INT 21
11249: PUSH
11250: LD_INT 22
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: IN
11257: PUSH
11258: LD_VAR 0 2
11262: PUSH
11263: LD_INT 46
11265: EQUAL
11266: AND
11267: IFFALSE 11296
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11269: LD_ADDR_VAR 0 2
11273: PUSH
11274: LD_INT 44
11276: PUSH
11277: LD_INT 45
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_INT 2
11289: PPUSH
11290: CALL_OW 12
11294: ARRAY
11295: ST_TO_ADDR
// if tick < [ 15 15$00 , 12 12$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11296: LD_OWVAR 1
11300: PUSH
11301: LD_INT 31500
11303: PUSH
11304: LD_INT 25200
11306: PUSH
11307: LD_INT 21000
11309: PUSH
11310: LD_INT 18900
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: PUSH
11319: LD_OWVAR 67
11323: ARRAY
11324: LESS
11325: IFFALSE 11354
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_INT 44
11334: PUSH
11335: LD_INT 43
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 1
11344: PPUSH
11345: LD_INT 2
11347: PPUSH
11348: CALL_OW 12
11352: ARRAY
11353: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11354: LD_INT 29
11356: PPUSH
11357: LD_VAR 0 1
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: LD_VAR 0 2
11372: PPUSH
11373: CALL_OW 185
// end ;
11377: PPOPN 2
11379: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11380: LD_INT 28
11382: PPUSH
11383: CALL_OW 302
11387: IFFALSE 12979
11389: GO 11391
11391: DISABLE
11392: LD_INT 0
11394: PPUSH
11395: PPUSH
11396: PPUSH
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
11405: PPUSH
11406: PPUSH
// begin enable ;
11407: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11408: LD_ADDR_VAR 0 4
11412: PUSH
11413: LD_INT 12
11415: PPUSH
11416: LD_INT 3
11418: PUSH
11419: LD_INT 24
11421: PUSH
11422: LD_INT 1000
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 21
11435: PUSH
11436: LD_INT 3
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PPUSH
11447: CALL_OW 70
11451: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11452: LD_ADDR_VAR 0 5
11456: PUSH
11457: LD_INT 22
11459: PUSH
11460: LD_INT 3
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 25
11469: PUSH
11470: LD_INT 2
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PPUSH
11481: CALL_OW 69
11485: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11486: LD_ADDR_VAR 0 6
11490: PUSH
11491: LD_INT 22
11493: PUSH
11494: LD_INT 3
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 34
11503: PUSH
11504: LD_INT 52
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11520: LD_ADDR_VAR 0 8
11524: PUSH
11525: LD_INT 22
11527: PUSH
11528: LD_INT 3
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 25
11537: PUSH
11538: LD_INT 4
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 69
11553: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11554: LD_ADDR_VAR 0 9
11558: PUSH
11559: LD_INT 81
11561: PPUSH
11562: LD_INT 93
11564: PPUSH
11565: CALL_OW 428
11569: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11570: LD_ADDR_VAR 0 10
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_INT 3
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_INT 32
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: LD_INT 50
11597: PUSH
11598: EMPTY
11599: LIST
11600: PUSH
11601: LD_INT 58
11603: PUSH
11604: EMPTY
11605: LIST
11606: PUSH
11607: LD_INT 3
11609: PUSH
11610: LD_INT 120
11612: PUSH
11613: LD_INT 701
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: PPUSH
11631: CALL_OW 69
11635: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11636: LD_ADDR_VAR 0 12
11640: PUSH
11641: LD_INT 22
11643: PUSH
11644: LD_INT 3
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 30
11653: PUSH
11654: LD_INT 5
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 50
11663: PUSH
11664: EMPTY
11665: LIST
11666: PUSH
11667: LD_INT 3
11669: PUSH
11670: LD_INT 62
11672: PUSH
11673: EMPTY
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 69
11690: ST_TO_ADDR
// if emptyTowers then
11691: LD_VAR 0 10
11695: IFFALSE 11956
// begin for i in emptyTowers do
11697: LD_ADDR_VAR 0 1
11701: PUSH
11702: LD_VAR 0 10
11706: PUSH
11707: FOR_IN
11708: IFFALSE 11952
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11710: LD_ADDR_VAR 0 11
11714: PUSH
11715: LD_INT 22
11717: PUSH
11718: LD_INT 3
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: LD_INT 2
11727: PUSH
11728: LD_INT 54
11730: PUSH
11731: EMPTY
11732: LIST
11733: PUSH
11734: LD_INT 95
11736: PUSH
11737: LD_INT 12
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 1
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 50
11761: PUSH
11762: EMPTY
11763: LIST
11764: PUSH
11765: LD_INT 3
11767: PUSH
11768: LD_INT 120
11770: PUSH
11771: LD_INT 701
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: ST_TO_ADDR
// if not sol then
11794: LD_VAR 0 11
11798: NOT
11799: IFFALSE 11803
// break ;
11801: GO 11952
// for j in sol do
11803: LD_ADDR_VAR 0 2
11807: PUSH
11808: LD_VAR 0 11
11812: PUSH
11813: FOR_IN
11814: IFFALSE 11865
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11816: LD_VAR 0 2
11820: PPUSH
11821: CALL_OW 310
11825: PUSH
11826: LD_VAR 0 2
11830: PPUSH
11831: CALL_OW 310
11835: PPUSH
11836: CALL_OW 266
11840: PUSH
11841: LD_INT 32
11843: EQUAL
11844: AND
11845: IFFALSE 11863
// sol := sol diff j ;
11847: LD_ADDR_VAR 0 11
11851: PUSH
11852: LD_VAR 0 11
11856: PUSH
11857: LD_VAR 0 2
11861: DIFF
11862: ST_TO_ADDR
11863: GO 11813
11865: POP
11866: POP
// if not sol then
11867: LD_VAR 0 11
11871: NOT
11872: IFFALSE 11876
// break ;
11874: GO 11952
// if IsInUnit ( sol [ 1 ] ) then
11876: LD_VAR 0 11
11880: PUSH
11881: LD_INT 1
11883: ARRAY
11884: PPUSH
11885: CALL_OW 310
11889: IFFALSE 11904
// ComExit ( sol [ 1 ] ) ;
11891: LD_VAR 0 11
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: CALL 79153 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
11904: LD_VAR 0 11
11908: PUSH
11909: LD_INT 1
11911: ARRAY
11912: PPUSH
11913: LD_INT 701
11915: PPUSH
11916: CALL_OW 109
// SetTag ( i , 701 ) ;
11920: LD_VAR 0 1
11924: PPUSH
11925: LD_INT 701
11927: PPUSH
11928: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
11932: LD_VAR 0 11
11936: PUSH
11937: LD_INT 1
11939: ARRAY
11940: PPUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 180
// end ;
11950: GO 11707
11952: POP
11953: POP
// end else
11954: GO 12202
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
11956: LD_VAR 0 11
11960: PPUSH
11961: LD_INT 3
11963: PUSH
11964: LD_INT 54
11966: PUSH
11967: EMPTY
11968: LIST
11969: PUSH
11970: LD_INT 95
11972: PUSH
11973: LD_INT 12
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: PPUSH
11985: CALL_OW 72
11989: IFFALSE 12202
// begin if barracks then
11991: LD_VAR 0 12
11995: IFFALSE 12063
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
11997: LD_ADDR_VAR 0 1
12001: PUSH
12002: LD_VAR 0 11
12006: PPUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 54
12012: PUSH
12013: EMPTY
12014: LIST
12015: PUSH
12016: LD_INT 95
12018: PUSH
12019: LD_INT 12
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: LIST
12030: PPUSH
12031: CALL_OW 72
12035: PUSH
12036: FOR_IN
12037: IFFALSE 12059
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12039: LD_VAR 0 1
12043: PPUSH
12044: LD_VAR 0 12
12048: PUSH
12049: LD_INT 1
12051: ARRAY
12052: PPUSH
12053: CALL_OW 120
12057: GO 12036
12059: POP
12060: POP
// end else
12061: GO 12202
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12063: LD_INT 12
12065: PPUSH
12066: LD_INT 81
12068: PUSH
12069: LD_INT 3
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PPUSH
12076: CALL_OW 70
12080: IFFALSE 12202
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12082: LD_ADDR_VAR 0 1
12086: PUSH
12087: LD_VAR 0 11
12091: PPUSH
12092: LD_INT 3
12094: PUSH
12095: LD_INT 54
12097: PUSH
12098: EMPTY
12099: LIST
12100: PUSH
12101: LD_INT 95
12103: PUSH
12104: LD_INT 12
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 72
12120: PUSH
12121: FOR_IN
12122: IFFALSE 12200
// begin SetTag ( i , 702 ) ;
12124: LD_VAR 0 1
12128: PPUSH
12129: LD_INT 702
12131: PPUSH
12132: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12136: LD_ADDR_VAR 0 13
12140: PUSH
12141: LD_INT 12
12143: PPUSH
12144: LD_INT 81
12146: PUSH
12147: LD_INT 3
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 70
12158: PPUSH
12159: LD_VAR 0 1
12163: PPUSH
12164: CALL_OW 74
12168: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12169: LD_VAR 0 1
12173: PPUSH
12174: LD_VAR 0 13
12178: PPUSH
12179: CALL_OW 250
12183: PPUSH
12184: LD_VAR 0 13
12188: PPUSH
12189: CALL_OW 251
12193: PPUSH
12194: CALL_OW 114
// end ;
12198: GO 12121
12200: POP
12201: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12202: LD_ADDR_VAR 0 3
12206: PUSH
12207: LD_INT 22
12209: PUSH
12210: LD_INT 3
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 95
12219: PUSH
12220: LD_INT 11
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 50
12229: PUSH
12230: EMPTY
12231: LIST
12232: PUSH
12233: LD_INT 25
12235: PUSH
12236: LD_INT 1
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 120
12245: PUSH
12246: LD_INT 702
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: ST_TO_ADDR
// if tmp then
12265: LD_VAR 0 3
12269: IFFALSE 12315
// for i in tmp do
12271: LD_ADDR_VAR 0 1
12275: PUSH
12276: LD_VAR 0 3
12280: PUSH
12281: FOR_IN
12282: IFFALSE 12313
// begin ComMoveXY ( i , 90 , 94 ) ;
12284: LD_VAR 0 1
12288: PPUSH
12289: LD_INT 90
12291: PPUSH
12292: LD_INT 94
12294: PPUSH
12295: CALL_OW 111
// SetTag ( i , 0 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 0
12306: PPUSH
12307: CALL_OW 109
// end ;
12311: GO 12281
12313: POP
12314: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12315: LD_VAR 0 8
12319: PUSH
12320: LD_VAR 0 5
12324: PPUSH
12325: LD_INT 120
12327: PUSH
12328: LD_INT 2
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 72
12339: AND
12340: IFFALSE 12353
// ComExitAll ( sci ) else
12342: LD_VAR 0 8
12346: PPUSH
12347: CALL 79236 0 1
12351: GO 12426
// if sci then
12353: LD_VAR 0 8
12357: IFFALSE 12426
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12359: LD_VAR 0 8
12363: PPUSH
12364: LD_INT 3
12366: PUSH
12367: LD_INT 54
12369: PUSH
12370: EMPTY
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 72
12381: PUSH
12382: LD_VAR 0 9
12386: PPUSH
12387: CALL_OW 302
12391: AND
12392: IFFALSE 12426
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12394: LD_VAR 0 8
12398: PPUSH
12399: LD_INT 3
12401: PUSH
12402: LD_INT 54
12404: PUSH
12405: EMPTY
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 72
12416: PPUSH
12417: LD_VAR 0 9
12421: PPUSH
12422: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12426: LD_VAR 0 6
12430: PPUSH
12431: LD_INT 50
12433: PUSH
12434: EMPTY
12435: LIST
12436: PPUSH
12437: CALL_OW 72
12441: PUSH
12442: LD_VAR 0 4
12446: AND
12447: IFFALSE 12478
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12449: LD_VAR 0 6
12453: PPUSH
12454: LD_INT 50
12456: PUSH
12457: EMPTY
12458: LIST
12459: PPUSH
12460: CALL_OW 72
12464: PPUSH
12465: LD_VAR 0 4
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: CALL_OW 130
// if eng then
12478: LD_VAR 0 5
12482: IFFALSE 12979
// begin for i in eng do
12484: LD_ADDR_VAR 0 1
12488: PUSH
12489: LD_VAR 0 5
12493: PUSH
12494: FOR_IN
12495: IFFALSE 12977
// begin tag := GetTag ( i ) ;
12497: LD_ADDR_VAR 0 7
12501: PUSH
12502: LD_VAR 0 1
12506: PPUSH
12507: CALL_OW 110
12511: ST_TO_ADDR
// case tag of 0 :
12512: LD_VAR 0 7
12516: PUSH
12517: LD_INT 0
12519: DOUBLE
12520: EQUAL
12521: IFTRUE 12525
12523: GO 12736
12525: POP
// begin if b then
12526: LD_VAR 0 4
12530: IFFALSE 12546
// begin SetTag ( i , 1 ) ;
12532: LD_VAR 0 1
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: CALL_OW 109
// continue ;
12544: GO 12494
// end ; if not ruBuildList then
12546: LD_EXP 35
12550: NOT
12551: IFFALSE 12567
// ComEnterUnit ( i , ruDep ) else
12553: LD_VAR 0 1
12557: PPUSH
12558: LD_INT 28
12560: PPUSH
12561: CALL_OW 120
12565: GO 12734
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12567: LD_INT 11
12569: PPUSH
12570: LD_INT 81
12572: PUSH
12573: LD_INT 3
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 70
12584: PUSH
12585: LD_INT 0
12587: EQUAL
12588: PUSH
12589: LD_INT 28
12591: PPUSH
12592: LD_EXP 35
12596: PUSH
12597: LD_INT 1
12599: ARRAY
12600: PUSH
12601: LD_INT 1
12603: ARRAY
12604: PPUSH
12605: LD_EXP 35
12609: PUSH
12610: LD_INT 1
12612: ARRAY
12613: PUSH
12614: LD_INT 2
12616: ARRAY
12617: PPUSH
12618: LD_EXP 35
12622: PUSH
12623: LD_INT 1
12625: ARRAY
12626: PUSH
12627: LD_INT 3
12629: ARRAY
12630: PPUSH
12631: LD_EXP 35
12635: PUSH
12636: LD_INT 1
12638: ARRAY
12639: PUSH
12640: LD_INT 4
12642: ARRAY
12643: PPUSH
12644: CALL 54500 0 5
12648: AND
12649: IFFALSE 12734
// begin if IsInUnit ( i ) then
12651: LD_VAR 0 1
12655: PPUSH
12656: CALL_OW 310
12660: IFFALSE 12673
// ComExitBuilding ( i ) else
12662: LD_VAR 0 1
12666: PPUSH
12667: CALL_OW 122
12671: GO 12734
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12673: LD_VAR 0 1
12677: PPUSH
12678: LD_EXP 35
12682: PUSH
12683: LD_INT 1
12685: ARRAY
12686: PUSH
12687: LD_INT 1
12689: ARRAY
12690: PPUSH
12691: LD_EXP 35
12695: PUSH
12696: LD_INT 1
12698: ARRAY
12699: PUSH
12700: LD_INT 2
12702: ARRAY
12703: PPUSH
12704: LD_EXP 35
12708: PUSH
12709: LD_INT 1
12711: ARRAY
12712: PUSH
12713: LD_INT 3
12715: ARRAY
12716: PPUSH
12717: LD_EXP 35
12721: PUSH
12722: LD_INT 1
12724: ARRAY
12725: PUSH
12726: LD_INT 4
12728: ARRAY
12729: PPUSH
12730: CALL_OW 145
// end ; end ; 1 :
12734: GO 12933
12736: LD_INT 1
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12847
12744: POP
// begin if not b then
12745: LD_VAR 0 4
12749: NOT
12750: IFFALSE 12766
// begin SetTag ( i , 0 ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_INT 0
12759: PPUSH
12760: CALL_OW 109
// continue ;
12764: GO 12494
// end ; if IsInUnit ( i ) then
12766: LD_VAR 0 1
12770: PPUSH
12771: CALL_OW 310
12775: IFFALSE 12786
// ComExitBuilding ( i ) ;
12777: LD_VAR 0 1
12781: PPUSH
12782: CALL_OW 122
// if GetLives ( i ) < 650 then
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 256
12795: PUSH
12796: LD_INT 650
12798: LESS
12799: IFFALSE 12815
// begin SetTag ( i , 2 ) ;
12801: LD_VAR 0 1
12805: PPUSH
12806: LD_INT 2
12808: PPUSH
12809: CALL_OW 109
// continue ;
12813: GO 12494
// end ; if b then
12815: LD_VAR 0 4
12819: IFFALSE 12845
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: LD_VAR 0 1
12835: PPUSH
12836: CALL_OW 74
12840: PPUSH
12841: CALL_OW 130
// end ; 2 :
12845: GO 12933
12847: LD_INT 2
12849: DOUBLE
12850: EQUAL
12851: IFTRUE 12855
12853: GO 12932
12855: POP
// begin if GetLives ( i ) = 1000 then
12856: LD_VAR 0 1
12860: PPUSH
12861: CALL_OW 256
12865: PUSH
12866: LD_INT 1000
12868: EQUAL
12869: IFFALSE 12885
// begin SetTag ( i , 1 ) ;
12871: LD_VAR 0 1
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: CALL_OW 109
// continue ;
12883: GO 12494
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
12885: LD_VAR 0 1
12889: PPUSH
12890: LD_INT 84
12892: PPUSH
12893: LD_INT 93
12895: PPUSH
12896: CALL_OW 297
12900: PUSH
12901: LD_INT 6
12903: GREATER
12904: IFFALSE 12930
// begin ComMoveXY ( i , 84 , 93 ) ;
12906: LD_VAR 0 1
12910: PPUSH
12911: LD_INT 84
12913: PPUSH
12914: LD_INT 93
12916: PPUSH
12917: CALL_OW 111
// AddComHold ( i ) ;
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL_OW 200
// end ; end ; end ;
12930: GO 12933
12932: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
12933: LD_VAR 0 1
12937: PPUSH
12938: LD_INT 12
12940: PPUSH
12941: CALL_OW 308
12945: NOT
12946: PUSH
12947: LD_VAR 0 1
12951: PPUSH
12952: CALL_OW 310
12956: NOT
12957: AND
12958: IFFALSE 12975
// ComMoveXY ( i , 91 , 95 ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: LD_INT 91
12967: PPUSH
12968: LD_INT 95
12970: PPUSH
12971: CALL_OW 111
// end ;
12975: GO 12494
12977: POP
12978: POP
// end ; end ;
12979: PPOPN 13
12981: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12982: LD_INT 0
12984: PPUSH
12985: PPUSH
12986: PPUSH
12987: PPUSH
12988: PPUSH
12989: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
12990: LD_ADDR_VAR 0 3
12994: PUSH
12995: DOUBLE
12996: LD_INT 1
12998: DEC
12999: ST_TO_ADDR
13000: LD_INT 3
13002: PUSH
13003: LD_INT 4
13005: PUSH
13006: LD_INT 5
13008: PUSH
13009: LD_INT 6
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: LD_OWVAR 67
13022: ARRAY
13023: PUSH
13024: LD_VAR 0 1
13028: PLUS
13029: PUSH
13030: FOR_TO
13031: IFFALSE 13348
// begin uc_side := 6 ;
13033: LD_ADDR_OWVAR 20
13037: PUSH
13038: LD_INT 6
13040: ST_TO_ADDR
// uc_nation := 3 ;
13041: LD_ADDR_OWVAR 21
13045: PUSH
13046: LD_INT 3
13048: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13049: LD_ADDR_VAR 0 6
13053: PUSH
13054: LD_INT 21
13056: PUSH
13057: LD_INT 22
13059: PUSH
13060: LD_INT 23
13062: PUSH
13063: LD_INT 24
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 1
13074: PPUSH
13075: LD_INT 4
13077: PPUSH
13078: CALL_OW 12
13082: ARRAY
13083: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13084: LD_ADDR_VAR 0 7
13088: PUSH
13089: LD_INT 42
13091: PUSH
13092: LD_INT 44
13094: PUSH
13095: LD_INT 43
13097: PUSH
13098: LD_INT 46
13100: PUSH
13101: LD_INT 45
13103: PUSH
13104: LD_INT 46
13106: PUSH
13107: LD_INT 45
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: LD_OWVAR 67
13123: PUSH
13124: LD_INT 0
13126: PPUSH
13127: LD_INT 3
13129: PPUSH
13130: CALL_OW 12
13134: PLUS
13135: ARRAY
13136: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13137: LD_VAR 0 6
13141: PUSH
13142: LD_INT 21
13144: PUSH
13145: LD_INT 22
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: IN
13152: PUSH
13153: LD_VAR 0 7
13157: PUSH
13158: LD_INT 46
13160: EQUAL
13161: AND
13162: IFFALSE 13191
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13164: LD_ADDR_VAR 0 7
13168: PUSH
13169: LD_INT 44
13171: PUSH
13172: LD_INT 45
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 1
13181: PPUSH
13182: LD_INT 2
13184: PPUSH
13185: CALL_OW 12
13189: ARRAY
13190: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13191: LD_OWVAR 1
13195: PUSH
13196: LD_INT 31500
13198: PUSH
13199: LD_INT 27300
13201: PUSH
13202: LD_INT 23100
13204: PUSH
13205: LD_INT 18900
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_OWVAR 67
13218: ARRAY
13219: LESS
13220: IFFALSE 13253
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13222: LD_ADDR_VAR 0 7
13226: PUSH
13227: LD_INT 44
13229: PUSH
13230: LD_INT 43
13232: PUSH
13233: LD_INT 42
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 1
13243: PPUSH
13244: LD_INT 3
13246: PPUSH
13247: CALL_OW 12
13251: ARRAY
13252: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13253: LD_VAR 0 6
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: LD_INT 3
13263: PPUSH
13264: LD_VAR 0 7
13268: PPUSH
13269: LD_INT 90
13271: PPUSH
13272: CALL 45904 0 5
// un := CreateVehicle ;
13276: LD_ADDR_VAR 0 4
13280: PUSH
13281: CALL_OW 45
13285: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13286: LD_VAR 0 4
13290: PPUSH
13291: LD_INT 140
13293: PPUSH
13294: LD_INT 146
13296: PPUSH
13297: LD_INT 0
13299: PPUSH
13300: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13304: LD_VAR 0 4
13308: PPUSH
13309: LD_INT 131
13311: PPUSH
13312: LD_INT 128
13314: PPUSH
13315: CALL_OW 111
// wait ( 0 0$3 ) ;
13319: LD_INT 105
13321: PPUSH
13322: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13326: LD_ADDR_VAR 0 5
13330: PUSH
13331: LD_VAR 0 5
13335: PPUSH
13336: LD_VAR 0 4
13340: PPUSH
13341: CALL 78755 0 2
13345: ST_TO_ADDR
// end ;
13346: GO 13030
13348: POP
13349: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13350: LD_ADDR_EXP 36
13354: PUSH
13355: LD_EXP 36
13359: PPUSH
13360: LD_VAR 0 5
13364: PPUSH
13365: CALL 78792 0 2
13369: ST_TO_ADDR
// end ;
13370: LD_VAR 0 2
13374: RET
// every 0 0$3 trigger russianAttackers do
13375: LD_EXP 36
13379: IFFALSE 13462
13381: GO 13383
13383: DISABLE
// begin enable ;
13384: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13385: LD_EXP 36
13389: PPUSH
13390: LD_INT 126
13392: PUSH
13393: LD_INT 108
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 107
13402: PUSH
13403: LD_INT 85
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 82
13412: PUSH
13413: LD_INT 62
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 73
13422: PUSH
13423: LD_INT 46
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 62
13432: PUSH
13433: LD_INT 31
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 52
13442: PUSH
13443: LD_INT 17
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL 81359 0 2
// end ;
13462: END
// every 20 20$0 trigger Difficulty > 2 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
13463: LD_OWVAR 67
13467: PUSH
13468: LD_INT 2
13470: GREATER
13471: PUSH
13472: LD_INT 22
13474: PUSH
13475: LD_INT 6
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 21
13484: PUSH
13485: LD_INT 2
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 50
13494: PUSH
13495: EMPTY
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: PUSH
13508: LD_INT 0
13510: EQUAL
13511: AND
13512: IFFALSE 13566
13514: GO 13516
13516: DISABLE
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
13517: LD_INT 51
13519: PPUSH
13520: LD_INT 6
13522: PPUSH
13523: LD_INT 2
13525: PPUSH
13526: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
13530: LD_INT 57
13532: PPUSH
13533: LD_INT 6
13535: PPUSH
13536: LD_INT 2
13538: PPUSH
13539: CALL_OW 322
// if Difficulty > 3 then
13543: LD_OWVAR 67
13547: PUSH
13548: LD_INT 3
13550: GREATER
13551: IFFALSE 13566
// SetTech ( tech_weap2 , 6 , state_researched ) ;
13553: LD_INT 52
13555: PPUSH
13556: LD_INT 6
13558: PPUSH
13559: LD_INT 2
13561: PPUSH
13562: CALL_OW 322
// end ; end_of_file
13566: END
// on SailEvent ( event ) do begin if event = 1 then
13567: LD_VAR 0 1
13571: PUSH
13572: LD_INT 1
13574: EQUAL
13575: IFFALSE 13605
// PrepareRussianAttack ( [ 2 , 4 , 6 , 8 ] [ Difficulty ] ) ;
13577: LD_INT 2
13579: PUSH
13580: LD_INT 4
13582: PUSH
13583: LD_INT 6
13585: PUSH
13586: LD_INT 8
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: LD_OWVAR 67
13599: ARRAY
13600: PPUSH
13601: CALL 12982 0 1
// end ;
13605: PPOPN 1
13607: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13608: LD_VAR 0 1
13612: PUSH
13613: LD_EXP 28
13617: EQUAL
13618: PUSH
13619: LD_VAR 0 2
13623: PUSH
13624: LD_INT 1
13626: EQUAL
13627: AND
13628: IFFALSE 13634
// SikorskiKilledInAction ;
13630: CALL 18751 0 0
// end ;
13634: PPOPN 3
13636: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13637: LD_INT 0
13639: PPUSH
13640: PPUSH
13641: PPUSH
13642: PPUSH
13643: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13644: LD_VAR 0 1
13648: PPUSH
13649: CALL 36170 0 1
// if un = JMM then
13653: LD_VAR 0 1
13657: PUSH
13658: LD_EXP 14
13662: EQUAL
13663: IFFALSE 13672
// YouLost ( JMM ) ;
13665: LD_STRING JMM
13667: PPUSH
13668: CALL_OW 104
// if un = Sikorski then
13672: LD_VAR 0 1
13676: PUSH
13677: LD_EXP 28
13681: EQUAL
13682: IFFALSE 13708
// if sikorskiStatus = 0 then
13684: LD_EXP 9
13688: PUSH
13689: LD_INT 0
13691: EQUAL
13692: IFFALSE 13700
// SikorskiKilledInAction else
13694: CALL 18751 0 0
13698: GO 13708
// sikorskiIsKilled := true ;
13700: LD_ADDR_EXP 10
13704: PUSH
13705: LD_INT 1
13707: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13708: LD_VAR 0 1
13712: PPUSH
13713: CALL_OW 255
13717: PUSH
13718: LD_INT 1
13720: EQUAL
13721: PUSH
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 248
13731: PUSH
13732: LD_INT 1
13734: EQUAL
13735: AND
13736: PUSH
13737: LD_VAR 0 1
13741: PPUSH
13742: CALL_OW 266
13746: PUSH
13747: LD_INT 0
13749: PUSH
13750: LD_INT 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: IN
13757: AND
13758: IFFALSE 13767
// YouLost ( Destroyed ) ;
13760: LD_STRING Destroyed
13762: PPUSH
13763: CALL_OW 104
// if un = ruDep then
13767: LD_VAR 0 1
13771: PUSH
13772: LD_INT 28
13774: EQUAL
13775: IFFALSE 13909
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13777: LD_ADDR_VAR 0 2
13781: PUSH
13782: LD_INT 22
13784: PUSH
13785: LD_INT 3
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 25
13794: PUSH
13795: LD_INT 1
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 69
13810: PUSH
13811: FOR_IN
13812: IFFALSE 13907
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13814: LD_ADDR_VAR 0 3
13818: PUSH
13819: LD_INT 11
13821: PPUSH
13822: LD_INT 81
13824: PUSH
13825: LD_INT 3
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PPUSH
13832: CALL_OW 70
13836: PPUSH
13837: LD_VAR 0 2
13841: PPUSH
13842: CALL_OW 74
13846: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13847: LD_VAR 0 2
13851: PPUSH
13852: CALL_OW 310
13856: PPUSH
13857: CALL_OW 266
13861: PUSH
13862: LD_INT 32
13864: EQUAL
13865: IFFALSE 13905
// begin ComExitBuilding ( i ) ;
13867: LD_VAR 0 2
13871: PPUSH
13872: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13876: LD_VAR 0 2
13880: PPUSH
13881: LD_VAR 0 3
13885: PPUSH
13886: CALL_OW 250
13890: PPUSH
13891: LD_VAR 0 3
13895: PPUSH
13896: CALL_OW 251
13900: PPUSH
13901: CALL_OW 174
// end ; end ;
13905: GO 13811
13907: POP
13908: POP
// end ; if un in ruMobile then
13909: LD_VAR 0 1
13913: PUSH
13914: LD_EXP 34
13918: IN
13919: IFFALSE 13937
// ruMobile := ruMobile diff un ;
13921: LD_ADDR_EXP 34
13925: PUSH
13926: LD_EXP 34
13930: PUSH
13931: LD_VAR 0 1
13935: DIFF
13936: ST_TO_ADDR
// if GetSide ( un ) = 3 then
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 255
13946: PUSH
13947: LD_INT 3
13949: EQUAL
13950: IFFALSE 14585
// begin if GetType ( un ) = unit_building then
13952: LD_VAR 0 1
13956: PPUSH
13957: CALL_OW 247
13961: PUSH
13962: LD_INT 3
13964: EQUAL
13965: IFFALSE 14101
// begin btype := GetBType ( un ) ;
13967: LD_ADDR_VAR 0 6
13971: PUSH
13972: LD_VAR 0 1
13976: PPUSH
13977: CALL_OW 266
13981: ST_TO_ADDR
// if btype = b_warehouse then
13982: LD_VAR 0 6
13986: PUSH
13987: LD_INT 1
13989: EQUAL
13990: IFFALSE 14000
// btype := b_depot ;
13992: LD_ADDR_VAR 0 6
13996: PUSH
13997: LD_INT 0
13999: ST_TO_ADDR
// if btype = b_barracks then
14000: LD_VAR 0 6
14004: PUSH
14005: LD_INT 5
14007: EQUAL
14008: IFFALSE 14018
// btype := b_armoury ;
14010: LD_ADDR_VAR 0 6
14014: PUSH
14015: LD_INT 4
14017: ST_TO_ADDR
// if btype = b_lab_full then
14018: LD_VAR 0 6
14022: PUSH
14023: LD_INT 8
14025: EQUAL
14026: IFFALSE 14036
// btype := b_lab ;
14028: LD_ADDR_VAR 0 6
14032: PUSH
14033: LD_INT 6
14035: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
14036: LD_ADDR_EXP 35
14040: PUSH
14041: LD_EXP 35
14045: PPUSH
14046: LD_EXP 35
14050: PUSH
14051: LD_INT 1
14053: PLUS
14054: PPUSH
14055: LD_VAR 0 6
14059: PUSH
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 250
14069: PUSH
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 251
14079: PUSH
14080: LD_VAR 0 1
14084: PPUSH
14085: CALL_OW 254
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: PPUSH
14096: CALL_OW 1
14100: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 247
14110: PUSH
14111: LD_INT 2
14113: EQUAL
14114: IFFALSE 14389
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 264
14125: PUSH
14126: LD_INT 52
14128: PUSH
14129: LD_INT 51
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: IN
14136: IFFALSE 14166
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14138: LD_INT 29
14140: PPUSH
14141: LD_INT 22
14143: PPUSH
14144: LD_INT 1
14146: PPUSH
14147: LD_INT 3
14149: PPUSH
14150: LD_VAR 0 1
14154: PPUSH
14155: CALL_OW 264
14159: PPUSH
14160: CALL_OW 185
// end else
14164: GO 14389
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14166: LD_ADDR_VAR 0 4
14170: PUSH
14171: LD_INT 21
14173: PUSH
14174: LD_INT 22
14176: PUSH
14177: LD_INT 23
14179: PUSH
14180: LD_INT 24
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 1
14191: PPUSH
14192: LD_INT 4
14194: PPUSH
14195: CALL_OW 12
14199: ARRAY
14200: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14201: LD_ADDR_VAR 0 5
14205: PUSH
14206: LD_INT 42
14208: PUSH
14209: LD_INT 44
14211: PUSH
14212: LD_INT 43
14214: PUSH
14215: LD_INT 46
14217: PUSH
14218: LD_INT 45
14220: PUSH
14221: LD_INT 46
14223: PUSH
14224: LD_INT 45
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: PUSH
14236: LD_OWVAR 67
14240: PUSH
14241: LD_INT 0
14243: PPUSH
14244: LD_INT 3
14246: PPUSH
14247: CALL_OW 12
14251: PLUS
14252: ARRAY
14253: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14254: LD_VAR 0 4
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 22
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: IN
14269: PUSH
14270: LD_VAR 0 5
14274: PUSH
14275: LD_INT 46
14277: EQUAL
14278: AND
14279: IFFALSE 14308
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
14281: LD_ADDR_VAR 0 5
14285: PUSH
14286: LD_INT 44
14288: PUSH
14289: LD_INT 45
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 1
14298: PPUSH
14299: LD_INT 2
14301: PPUSH
14302: CALL_OW 12
14306: ARRAY
14307: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14308: LD_OWVAR 1
14312: PUSH
14313: LD_INT 31500
14315: PUSH
14316: LD_INT 27300
14318: PUSH
14319: LD_INT 23100
14321: PUSH
14322: LD_INT 21000
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: PUSH
14331: LD_OWVAR 67
14335: ARRAY
14336: LESS
14337: IFFALSE 14366
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14339: LD_ADDR_VAR 0 5
14343: PUSH
14344: LD_INT 44
14346: PUSH
14347: LD_INT 43
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 1
14356: PPUSH
14357: LD_INT 2
14359: PPUSH
14360: CALL_OW 12
14364: ARRAY
14365: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14366: LD_INT 29
14368: PPUSH
14369: LD_VAR 0 4
14373: PPUSH
14374: LD_INT 1
14376: PPUSH
14377: LD_INT 1
14379: PPUSH
14380: LD_VAR 0 5
14384: PPUSH
14385: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14389: LD_VAR 0 1
14393: PPUSH
14394: CALL_OW 257
14398: PUSH
14399: LD_INT 3
14401: EQUAL
14402: IFFALSE 14585
// begin killMechCounter := Inc ( killMechCounter ) ;
14404: LD_ADDR_EXP 12
14408: PUSH
14409: LD_EXP 12
14413: PPUSH
14414: CALL 80116 0 1
14418: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14419: LD_EXP 33
14423: PUSH
14424: LD_INT 0
14426: EQUAL
14427: PUSH
14428: LD_INT 29
14430: PPUSH
14431: CALL_OW 302
14435: NOT
14436: OR
14437: IFFALSE 14441
// exit ;
14439: GO 14585
// ruMechCounter := Dec ( ruMechCounter ) ;
14441: LD_ADDR_EXP 33
14445: PUSH
14446: LD_EXP 33
14450: PPUSH
14451: CALL 80138 0 1
14455: ST_TO_ADDR
// uc_side := 3 ;
14456: LD_ADDR_OWVAR 20
14460: PUSH
14461: LD_INT 3
14463: ST_TO_ADDR
// uc_nation := 3 ;
14464: LD_ADDR_OWVAR 21
14468: PUSH
14469: LD_INT 3
14471: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14472: LD_INT 0
14474: PPUSH
14475: LD_INT 5
14477: PUSH
14478: LD_INT 6
14480: PUSH
14481: LD_INT 7
14483: PUSH
14484: LD_INT 8
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: PUSH
14493: LD_OWVAR 67
14497: ARRAY
14498: PPUSH
14499: CALL_OW 383
// tmp := CreateHuman ;
14503: LD_ADDR_VAR 0 3
14507: PUSH
14508: CALL_OW 44
14512: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14513: LD_VAR 0 3
14517: PPUSH
14518: LD_INT 145
14520: PPUSH
14521: LD_INT 133
14523: PPUSH
14524: LD_INT 0
14526: PPUSH
14527: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14531: LD_VAR 0 3
14535: PPUSH
14536: LD_INT 29
14538: PPUSH
14539: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14543: LD_INT 35
14545: PPUSH
14546: CALL_OW 67
// if not HasTask ( tmp ) then
14550: LD_VAR 0 3
14554: PPUSH
14555: CALL_OW 314
14559: NOT
14560: IFFALSE 14574
// ComEnterUnit ( tmp , ruFac ) ;
14562: LD_VAR 0 3
14566: PPUSH
14567: LD_INT 29
14569: PPUSH
14570: CALL_OW 120
// until IsInUnit ( tmp ) ;
14574: LD_VAR 0 3
14578: PPUSH
14579: CALL_OW 310
14583: IFFALSE 14543
// end ; end ; end ;
14585: PPOPN 6
14587: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 255
14597: PUSH
14598: LD_INT 4
14600: EQUAL
14601: IFFALSE 14618
// ComMoveXY ( driver , 40 , 47 ) ;
14603: LD_VAR 0 1
14607: PPUSH
14608: LD_INT 40
14610: PPUSH
14611: LD_INT 47
14613: PPUSH
14614: CALL_OW 111
// if GetSide ( driver ) = 3 then
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 255
14627: PUSH
14628: LD_INT 3
14630: EQUAL
14631: IFFALSE 14845
// begin ComMoveXY ( driver , 90 , 97 ) ;
14633: LD_VAR 0 1
14637: PPUSH
14638: LD_INT 90
14640: PPUSH
14641: LD_INT 97
14643: PPUSH
14644: CALL_OW 111
// if IsOk ( ruFac ) then
14648: LD_INT 29
14650: PPUSH
14651: CALL_OW 302
14655: IFFALSE 14769
// begin repeat wait ( 0 0$1 ) ;
14657: LD_INT 35
14659: PPUSH
14660: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14664: LD_INT 29
14666: PPUSH
14667: CALL_OW 313
14671: PUSH
14672: LD_INT 6
14674: LESS
14675: PUSH
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 301
14685: OR
14686: IFFALSE 14657
// if IsDead ( driver ) then
14688: LD_VAR 0 1
14692: PPUSH
14693: CALL_OW 301
14697: IFFALSE 14701
// exit ;
14699: GO 14845
// repeat wait ( 0 0$10 ) ;
14701: LD_INT 350
14703: PPUSH
14704: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14708: LD_VAR 0 1
14712: PPUSH
14713: CALL_OW 314
14717: NOT
14718: PUSH
14719: LD_INT 29
14721: PPUSH
14722: CALL_OW 313
14726: PUSH
14727: LD_INT 6
14729: LESS
14730: AND
14731: IFFALSE 14745
// ComEnterUnit ( driver , ruFac ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: LD_INT 29
14740: PPUSH
14741: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14745: LD_VAR 0 1
14749: PPUSH
14750: CALL_OW 301
14754: PUSH
14755: LD_VAR 0 1
14759: PPUSH
14760: CALL_OW 310
14764: OR
14765: IFFALSE 14701
// end else
14767: GO 14845
// begin ComMoveXY ( driver , 142 , 148 ) ;
14769: LD_VAR 0 1
14773: PPUSH
14774: LD_INT 142
14776: PPUSH
14777: LD_INT 148
14779: PPUSH
14780: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14784: LD_INT 35
14786: PPUSH
14787: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14791: LD_VAR 0 1
14795: PPUSH
14796: CALL_OW 301
14800: PUSH
14801: LD_VAR 0 1
14805: PPUSH
14806: LD_INT 142
14808: PPUSH
14809: LD_INT 148
14811: PPUSH
14812: CALL_OW 307
14816: OR
14817: IFFALSE 14784
// if IsAt ( driver , 142 , 148 ) then
14819: LD_VAR 0 1
14823: PPUSH
14824: LD_INT 142
14826: PPUSH
14827: LD_INT 148
14829: PPUSH
14830: CALL_OW 307
14834: IFFALSE 14845
// RemoveUnit ( driver ) ;
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 64
// end ; end ; end ;
14845: PPOPN 4
14847: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14848: LD_VAR 0 2
14852: PPUSH
14853: CALL_OW 257
14857: PUSH
14858: LD_INT 3
14860: EQUAL
14861: PUSH
14862: LD_VAR 0 1
14866: PPUSH
14867: CALL_OW 255
14871: PUSH
14872: LD_INT 3
14874: EQUAL
14875: AND
14876: PUSH
14877: LD_VAR 0 1
14881: PUSH
14882: LD_INT 29
14884: EQUAL
14885: AND
14886: IFFALSE 14900
// SetLives ( un , 1000 ) ;
14888: LD_VAR 0 2
14892: PPUSH
14893: LD_INT 1000
14895: PPUSH
14896: CALL_OW 234
// if GetTag ( b ) = 701 then
14900: LD_VAR 0 1
14904: PPUSH
14905: CALL_OW 110
14909: PUSH
14910: LD_INT 701
14912: EQUAL
14913: IFFALSE 14939
// begin SetTag ( b , 0 ) ;
14915: LD_VAR 0 1
14919: PPUSH
14920: LD_INT 0
14922: PPUSH
14923: CALL_OW 109
// SetTag ( un , 0 ) ;
14927: LD_VAR 0 2
14931: PPUSH
14932: LD_INT 0
14934: PPUSH
14935: CALL_OW 109
// end ; end ;
14939: PPOPN 2
14941: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14942: LD_VAR 0 1
14946: PPUSH
14947: CALL_OW 255
14951: PUSH
14952: LD_INT 3
14954: PUSH
14955: LD_INT 6
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: IN
14962: PUSH
14963: LD_VAR 0 1
14967: PPUSH
14968: CALL_OW 263
14972: PUSH
14973: LD_INT 3
14975: EQUAL
14976: AND
14977: PUSH
14978: LD_EXP 7
14982: NOT
14983: AND
14984: IFFALSE 15003
// begin seenComputer := true ;
14986: LD_ADDR_EXP 7
14990: PUSH
14991: LD_INT 1
14993: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14994: LD_VAR 0 1
14998: PPUSH
14999: CALL 17942 0 1
// end ; end ;
15003: PPOPN 1
15005: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15006: LD_INT 0
15008: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15009: LD_VAR 0 1
15013: PPUSH
15014: LD_VAR 0 2
15018: PPUSH
15019: CALL 36290 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL_OW 255
15032: PUSH
15033: LD_INT 3
15035: EQUAL
15036: PUSH
15037: LD_VAR 0 1
15041: PPUSH
15042: CALL_OW 263
15046: PUSH
15047: LD_INT 1
15049: EQUAL
15050: AND
15051: PUSH
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 264
15061: PUSH
15062: LD_INT 42
15064: PUSH
15065: LD_INT 43
15067: PUSH
15068: LD_INT 44
15070: PUSH
15071: LD_INT 46
15073: PUSH
15074: LD_INT 45
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: IN
15084: AND
15085: IFFALSE 15115
// begin SetTag ( vehicle , 300 ) ;
15087: LD_VAR 0 1
15091: PPUSH
15092: LD_INT 300
15094: PPUSH
15095: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
15099: LD_ADDR_EXP 34
15103: PUSH
15104: LD_EXP 34
15108: PUSH
15109: LD_VAR 0 1
15113: UNION
15114: ST_TO_ADDR
// end ; end ;
15115: PPOPN 3
15117: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15118: LD_INT 0
15120: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15121: LD_VAR 0 2
15125: PPUSH
15126: LD_VAR 0 3
15130: PPUSH
15131: LD_INT 13
15133: PPUSH
15134: CALL_OW 309
15138: IFFALSE 15269
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15140: LD_ADDR_VAR 0 6
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_INT 3
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 50
15157: PUSH
15158: EMPTY
15159: LIST
15160: PUSH
15161: LD_INT 34
15163: PUSH
15164: LD_INT 51
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: ST_TO_ADDR
// if not cargo then
15181: LD_VAR 0 6
15185: NOT
15186: IFFALSE 15190
// exit ;
15188: GO 15269
// wait ( 0 0$5 ) ;
15190: LD_INT 175
15192: PPUSH
15193: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15197: LD_VAR 0 6
15201: PUSH
15202: LD_INT 1
15204: ARRAY
15205: PPUSH
15206: LD_INT 28
15208: PPUSH
15209: CALL_OW 296
15213: PUSH
15214: LD_INT 6
15216: LESS
15217: PUSH
15218: LD_VAR 0 6
15222: PUSH
15223: LD_INT 1
15225: ARRAY
15226: PPUSH
15227: CALL_OW 261
15231: PUSH
15232: LD_INT 50
15234: LESS
15235: AND
15236: IFFALSE 15250
// ComMoveUnit ( cargo , ruDep ) ;
15238: LD_VAR 0 6
15242: PPUSH
15243: LD_INT 28
15245: PPUSH
15246: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15250: LD_VAR 0 6
15254: PPUSH
15255: LD_VAR 0 2
15259: PPUSH
15260: LD_VAR 0 3
15264: PPUSH
15265: CALL_OW 177
// end ; end ;
15269: PPOPN 6
15271: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL_OW 264
15281: PUSH
15282: LD_INT 45
15284: EQUAL
15285: IFFALSE 15302
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15287: LD_ADDR_EXP 11
15291: PUSH
15292: LD_EXP 11
15296: PPUSH
15297: CALL 80116 0 1
15301: ST_TO_ADDR
// end ;
15302: PPOPN 4
15304: END
// on BuildingComplete ( b ) do var i , tmp ;
15305: LD_INT 0
15307: PPUSH
15308: PPUSH
// begin if GetSide ( b ) = 3 then
15309: LD_VAR 0 1
15313: PPUSH
15314: CALL_OW 255
15318: PUSH
15319: LD_INT 3
15321: EQUAL
15322: IFFALSE 15419
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15324: LD_ADDR_EXP 35
15328: PUSH
15329: LD_EXP 35
15333: PPUSH
15334: LD_INT 1
15336: PPUSH
15337: CALL_OW 3
15341: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15342: LD_VAR 0 1
15346: PPUSH
15347: CALL_OW 266
15351: PUSH
15352: LD_INT 4
15354: EQUAL
15355: IFFALSE 15366
// ComUpgrade ( b ) ;
15357: LD_VAR 0 1
15361: PPUSH
15362: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15366: LD_VAR 0 1
15370: PPUSH
15371: CALL_OW 266
15375: PUSH
15376: LD_INT 32
15378: PUSH
15379: LD_INT 33
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: IN
15386: IFFALSE 15419
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15388: LD_VAR 0 1
15392: PPUSH
15393: LD_INT 46
15395: PUSH
15396: LD_INT 45
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 1
15405: PPUSH
15406: LD_INT 2
15408: PPUSH
15409: CALL_OW 12
15413: ARRAY
15414: PPUSH
15415: CALL_OW 208
// end ; end ; end_of_file
15419: PPOPN 3
15421: END
// export function Action ; var i , tmp , un , inUnit ; begin
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
15426: PPUSH
15427: PPUSH
15428: PPUSH
// Video ( true ) ;
15429: LD_INT 1
15431: PPUSH
15432: CALL 78727 0 1
// invincibleMode := true ;
15436: LD_ADDR_EXP 5
15440: PUSH
15441: LD_INT 1
15443: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15444: LD_INT 50
15446: PPUSH
15447: LD_INT 12
15449: PPUSH
15450: LD_INT 1
15452: PPUSH
15453: LD_INT 56
15455: NEG
15456: PPUSH
15457: CALL 78641 0 4
// CenterOnXY ( 50 , 12 ) ;
15461: LD_INT 50
15463: PPUSH
15464: LD_INT 12
15466: PPUSH
15467: CALL_OW 84
// wait ( 0 0$3 ) ;
15471: LD_INT 105
15473: PPUSH
15474: CALL_OW 67
// PrepareStartRussianAttack ;
15478: CALL 9999 0 0
// CenterOnXY ( 66 , 47 ) ;
15482: LD_INT 66
15484: PPUSH
15485: LD_INT 47
15487: PPUSH
15488: CALL_OW 84
// wait ( 0 0$5 ) ;
15492: LD_INT 175
15494: PPUSH
15495: CALL_OW 67
// case gammaCommander of 1 :
15499: LD_EXP 13
15503: PUSH
15504: LD_INT 1
15506: DOUBLE
15507: EQUAL
15508: IFTRUE 15512
15510: GO 15527
15512: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15513: LD_EXP 16
15517: PPUSH
15518: LD_STRING D1-Don-1
15520: PPUSH
15521: CALL_OW 88
15525: GO 15574
15527: LD_INT 2
15529: DOUBLE
15530: EQUAL
15531: IFTRUE 15535
15533: GO 15550
15535: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15536: LD_EXP 15
15540: PPUSH
15541: LD_STRING D1-Brown-1
15543: PPUSH
15544: CALL_OW 88
15548: GO 15574
15550: LD_INT 3
15552: DOUBLE
15553: EQUAL
15554: IFTRUE 15558
15556: GO 15573
15558: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15559: LD_EXP 25
15563: PPUSH
15564: LD_STRING D1-VanH-1
15566: PPUSH
15567: CALL_OW 88
15571: GO 15574
15573: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15574: LD_ADDR_VAR 0 3
15578: PUSH
15579: LD_INT 22
15581: PUSH
15582: LD_INT 1
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 33
15591: PUSH
15592: LD_INT 2
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 61
15601: PUSH
15602: EMPTY
15603: LIST
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: PPUSH
15610: CALL_OW 69
15614: ST_TO_ADDR
// if tmp then
15615: LD_VAR 0 3
15619: IFFALSE 15636
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15621: LD_VAR 0 3
15625: PPUSH
15626: LD_INT 74
15628: PPUSH
15629: LD_INT 44
15631: PPUSH
15632: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15636: LD_ADDR_VAR 0 3
15640: PUSH
15641: LD_INT 22
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 25
15653: PUSH
15654: LD_INT 1
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: PUSH
15670: LD_EXP 16
15674: PUSH
15675: LD_EXP 15
15679: PUSH
15680: LD_EXP 25
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: DIFF
15690: ST_TO_ADDR
// if tmp then
15691: LD_VAR 0 3
15695: IFFALSE 15773
// for i in tmp do
15697: LD_ADDR_VAR 0 2
15701: PUSH
15702: LD_VAR 0 3
15706: PUSH
15707: FOR_IN
15708: IFFALSE 15771
// begin inUnit := IsInUnit ( i ) ;
15710: LD_ADDR_VAR 0 5
15714: PUSH
15715: LD_VAR 0 2
15719: PPUSH
15720: CALL_OW 310
15724: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15725: LD_VAR 0 5
15729: PUSH
15730: LD_VAR 0 5
15734: PPUSH
15735: CALL_OW 266
15739: PUSH
15740: LD_INT 32
15742: PUSH
15743: LD_INT 31
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: IN
15750: AND
15751: IFFALSE 15769
// tmp := tmp diff i ;
15753: LD_ADDR_VAR 0 3
15757: PUSH
15758: LD_VAR 0 3
15762: PUSH
15763: LD_VAR 0 2
15767: DIFF
15768: ST_TO_ADDR
// end ;
15769: GO 15707
15771: POP
15772: POP
// if tmp then
15773: LD_VAR 0 3
15777: IFFALSE 15867
// begin ComExitAll ( tmp ) ;
15779: LD_VAR 0 3
15783: PPUSH
15784: CALL 79236 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15788: LD_VAR 0 3
15792: PPUSH
15793: LD_INT 74
15795: PPUSH
15796: LD_INT 44
15798: PPUSH
15799: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15803: LD_ADDR_VAR 0 3
15807: PUSH
15808: LD_INT 22
15810: PUSH
15811: LD_INT 1
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 25
15820: PUSH
15821: LD_INT 4
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PPUSH
15832: CALL_OW 69
15836: ST_TO_ADDR
// if tmp then
15837: LD_VAR 0 3
15841: IFFALSE 15867
// begin ComExitAll ( tmp ) ;
15843: LD_VAR 0 3
15847: PPUSH
15848: CALL 79236 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 66
15859: PPUSH
15860: LD_INT 28
15862: PPUSH
15863: CALL_OW 171
// end ; end ; game_speed := 4 ;
15867: LD_ADDR_OWVAR 65
15871: PUSH
15872: LD_INT 4
15874: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15875: LD_INT 70
15877: PPUSH
15878: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15882: LD_EXP 29
15886: PPUSH
15887: LD_STRING D1-Har-1
15889: PPUSH
15890: CALL_OW 94
// case gammaCommander of 1 :
15894: LD_EXP 13
15898: PUSH
15899: LD_INT 1
15901: DOUBLE
15902: EQUAL
15903: IFTRUE 15907
15905: GO 15922
15907: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15908: LD_EXP 16
15912: PPUSH
15913: LD_STRING D1-Don-2
15915: PPUSH
15916: CALL_OW 88
15920: GO 15969
15922: LD_INT 2
15924: DOUBLE
15925: EQUAL
15926: IFTRUE 15930
15928: GO 15945
15930: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15931: LD_EXP 15
15935: PPUSH
15936: LD_STRING D1-Brown-2
15938: PPUSH
15939: CALL_OW 88
15943: GO 15969
15945: LD_INT 3
15947: DOUBLE
15948: EQUAL
15949: IFTRUE 15953
15951: GO 15968
15953: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15954: LD_EXP 25
15958: PPUSH
15959: LD_STRING D1-VanH-2
15961: PPUSH
15962: CALL_OW 88
15966: GO 15969
15968: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15969: LD_EXP 29
15973: PPUSH
15974: LD_STRING D1-Har-2
15976: PPUSH
15977: CALL_OW 94
// invincibleMode := false ;
15981: LD_ADDR_EXP 5
15985: PUSH
15986: LD_INT 0
15988: ST_TO_ADDR
// Video ( false ) ;
15989: LD_INT 0
15991: PPUSH
15992: CALL 78727 0 1
// ChangeMissionObjectives ( M1 ) ;
15996: LD_STRING M1
15998: PPUSH
15999: CALL_OW 337
// SaveForQuickRestart ;
16003: CALL_OW 22
// wait ( 2 2$30 ) ;
16007: LD_INT 5250
16009: PPUSH
16010: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
16014: LD_INT 1
16016: PPUSH
16017: CALL 12982 0 1
// wait ( 4 4$30 ) ;
16021: LD_INT 9450
16023: PPUSH
16024: CALL_OW 67
// if Difficulty > 1 then
16028: LD_OWVAR 67
16032: PUSH
16033: LD_INT 1
16035: GREATER
16036: IFFALSE 16045
// PrepareRussianAttack ( 2 ) ;
16038: LD_INT 2
16040: PPUSH
16041: CALL 12982 0 1
// if Difficulty > 2 then
16045: LD_OWVAR 67
16049: PUSH
16050: LD_INT 2
16052: GREATER
16053: IFFALSE 16212
// begin for i := 1 to 4 do
16055: LD_ADDR_VAR 0 2
16059: PUSH
16060: DOUBLE
16061: LD_INT 1
16063: DEC
16064: ST_TO_ADDR
16065: LD_INT 4
16067: PUSH
16068: FOR_TO
16069: IFFALSE 16154
// begin uc_side := 6 ;
16071: LD_ADDR_OWVAR 20
16075: PUSH
16076: LD_INT 6
16078: ST_TO_ADDR
// uc_nation := 3 ;
16079: LD_ADDR_OWVAR 21
16083: PUSH
16084: LD_INT 3
16086: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
16087: LD_INT 0
16089: PPUSH
16090: LD_INT 7
16092: PPUSH
16093: CALL_OW 381
// un := CreateHuman ;
16097: LD_ADDR_VAR 0 4
16101: PUSH
16102: CALL_OW 44
16106: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16107: LD_VAR 0 4
16111: PPUSH
16112: LD_INT 122
16114: PPUSH
16115: LD_INT 89
16117: PPUSH
16118: LD_INT 3
16120: PPUSH
16121: LD_INT 0
16123: PPUSH
16124: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16128: LD_VAR 0 4
16132: PPUSH
16133: LD_INT 88
16135: PPUSH
16136: LD_INT 42
16138: PPUSH
16139: CALL_OW 114
// AddComHold ( un ) ;
16143: LD_VAR 0 4
16147: PPUSH
16148: CALL_OW 200
// end ;
16152: GO 16068
16154: POP
16155: POP
// PrepareScientist ( false , 6 ) ;
16156: LD_INT 0
16158: PPUSH
16159: LD_INT 6
16161: PPUSH
16162: CALL_OW 384
// un := CreateHuman ;
16166: LD_ADDR_VAR 0 4
16170: PUSH
16171: CALL_OW 44
16175: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16176: LD_VAR 0 4
16180: PPUSH
16181: LD_INT 122
16183: PPUSH
16184: LD_INT 89
16186: PPUSH
16187: LD_INT 3
16189: PPUSH
16190: LD_INT 0
16192: PPUSH
16193: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16197: LD_VAR 0 4
16201: PPUSH
16202: LD_INT 91
16204: PPUSH
16205: LD_INT 48
16207: PPUSH
16208: CALL_OW 111
// end ; end ;
16212: LD_VAR 0 1
16216: RET
// every 0 0$1 trigger invincibleMode do var i ;
16217: LD_EXP 5
16221: IFFALSE 16318
16223: GO 16225
16225: DISABLE
16226: LD_INT 0
16228: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16229: LD_ADDR_VAR 0 1
16233: PUSH
16234: LD_INT 22
16236: PUSH
16237: LD_INT 1
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 2
16246: PUSH
16247: LD_INT 21
16249: PUSH
16250: LD_INT 3
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 3
16274: PUSH
16275: LD_INT 24
16277: PUSH
16278: LD_INT 900
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: LIST
16293: PPUSH
16294: CALL_OW 69
16298: PUSH
16299: FOR_IN
16300: IFFALSE 16316
// SetLives ( i , 900 ) ;
16302: LD_VAR 0 1
16306: PPUSH
16307: LD_INT 900
16309: PPUSH
16310: CALL_OW 234
16314: GO 16299
16316: POP
16317: POP
// end ;
16318: PPOPN 1
16320: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16321: LD_OWVAR 1
16325: PUSH
16326: LD_INT 14700
16328: GREATER
16329: IFFALSE 17939
16331: GO 16333
16333: DISABLE
16334: LD_INT 0
16336: PPUSH
16337: PPUSH
// begin PrepareSupportFromDelta ;
16338: CALL 4052 0 0
// deltaSupport := true ;
16342: LD_ADDR_EXP 6
16346: PUSH
16347: LD_INT 1
16349: ST_TO_ADDR
// dialog := false ;
16350: LD_ADDR_VAR 0 1
16354: PUSH
16355: LD_INT 0
16357: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16358: LD_EXP 21
16362: PPUSH
16363: CALL_OW 302
16367: IFFALSE 16389
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16369: LD_ADDR_VAR 0 1
16373: PUSH
16374: LD_EXP 21
16378: PPUSH
16379: LD_STRING D2-Glad-1
16381: PPUSH
16382: CALL_OW 88
16386: ST_TO_ADDR
16387: GO 16471
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16389: LD_ADDR_VAR 0 1
16393: PUSH
16394: LD_INT 22
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 120
16406: PUSH
16407: LD_INT 107
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 21
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 23
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PPUSH
16440: CALL_OW 69
16444: PUSH
16445: LD_EXP 27
16449: PUSH
16450: LD_EXP 26
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: DIFF
16459: PPUSH
16460: LD_STRING D2-Sol1-1
16462: PPUSH
16463: LD_STRING D2-FSol1-1
16465: PPUSH
16466: CALL 20208 0 3
16470: ST_TO_ADDR
// if dialog then
16471: LD_VAR 0 1
16475: IFFALSE 16576
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16477: LD_EXP 16
16481: PPUSH
16482: CALL_OW 302
16486: PUSH
16487: LD_EXP 13
16491: PUSH
16492: LD_INT 1
16494: EQUAL
16495: AND
16496: IFFALSE 16510
// Say ( Donaldson , D2-Don-1 ) ;
16498: LD_EXP 16
16502: PPUSH
16503: LD_STRING D2-Don-1
16505: PPUSH
16506: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16510: LD_EXP 15
16514: PPUSH
16515: CALL_OW 302
16519: PUSH
16520: LD_EXP 13
16524: PUSH
16525: LD_INT 2
16527: EQUAL
16528: AND
16529: IFFALSE 16543
// Say ( Brown , D2-Brown-1 ) ;
16531: LD_EXP 15
16535: PPUSH
16536: LD_STRING D2-Brown-1
16538: PPUSH
16539: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16543: LD_EXP 25
16547: PPUSH
16548: CALL_OW 302
16552: PUSH
16553: LD_EXP 13
16557: PUSH
16558: LD_INT 3
16560: EQUAL
16561: AND
16562: IFFALSE 16576
// Say ( Houten , D2-VanH-1 ) ;
16564: LD_EXP 25
16568: PPUSH
16569: LD_STRING D2-VanH-1
16571: PPUSH
16572: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16576: LD_INT 3
16578: PPUSH
16579: CALL 12982 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16583: LD_STRING 07_time
16585: PPUSH
16586: LD_INT 18900
16588: PPUSH
16589: CALL_OW 30
16593: PUSH
16594: LD_INT 3
16596: DIV
16597: PPUSH
16598: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16602: LD_INT 34
16604: PPUSH
16605: LD_INT 1
16607: PPUSH
16608: CALL_OW 321
16612: PUSH
16613: LD_INT 2
16615: EQUAL
16616: IFFALSE 16625
// SetAchievement ( ACH_HEAVYGUN ) ;
16618: LD_STRING ACH_HEAVYGUN
16620: PPUSH
16621: CALL_OW 543
// PrepareMacmillanSquad ;
16625: CALL 4826 0 0
// wait ( 0 0$1 ) ;
16629: LD_INT 35
16631: PPUSH
16632: CALL_OW 67
// DialogueOn ;
16636: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16640: LD_EXP 14
16644: PPUSH
16645: CALL_OW 87
// dwait ( 0 0$2 ) ;
16649: LD_INT 70
16651: PPUSH
16652: CALL_OW 68
// DialogueOff ;
16656: CALL_OW 7
// wait ( 0 0$10 ) ;
16660: LD_INT 350
16662: PPUSH
16663: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16667: LD_INT 1
16669: PPUSH
16670: CALL_OW 427
// p := 0 ;
16674: LD_ADDR_VAR 0 2
16678: PUSH
16679: LD_INT 0
16681: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16682: LD_INT 35
16684: PPUSH
16685: CALL_OW 67
// p := Inc ( p ) ;
16689: LD_ADDR_VAR 0 2
16693: PUSH
16694: LD_VAR 0 2
16698: PPUSH
16699: CALL 80116 0 1
16703: ST_TO_ADDR
// if p > 300 then
16704: LD_VAR 0 2
16708: PUSH
16709: LD_INT 300
16711: GREATER
16712: IFFALSE 16716
// exit ;
16714: GO 17939
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16716: LD_EXP 14
16720: PPUSH
16721: LD_INT 15
16723: PPUSH
16724: CALL_OW 308
16728: PUSH
16729: LD_EXP 14
16733: PPUSH
16734: CALL_OW 310
16738: PPUSH
16739: LD_INT 15
16741: PPUSH
16742: CALL_OW 308
16746: OR
16747: PUSH
16748: LD_EXP 14
16752: PPUSH
16753: LD_EXP 27
16757: PPUSH
16758: CALL_OW 296
16762: PUSH
16763: LD_INT 10
16765: LESS
16766: OR
16767: PUSH
16768: LD_INT 22
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 120
16783: PUSH
16784: LD_INT 106
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 120
16793: PUSH
16794: LD_INT 107
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 91
16808: PUSH
16809: LD_EXP 14
16813: PUSH
16814: LD_INT 12
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: LIST
16826: PPUSH
16827: CALL_OW 69
16831: OR
16832: IFFALSE 16682
// DialogueOn ;
16834: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16838: LD_EXP 14
16842: PPUSH
16843: LD_STRING D3-JMM-1
16845: PPUSH
16846: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16850: LD_EXP 16
16854: PPUSH
16855: CALL_OW 302
16859: PUSH
16860: LD_EXP 13
16864: PUSH
16865: LD_INT 1
16867: EQUAL
16868: AND
16869: IFFALSE 16885
// Say ( Donaldson , D3-Don-1 ) else
16871: LD_EXP 16
16875: PPUSH
16876: LD_STRING D3-Don-1
16878: PPUSH
16879: CALL_OW 88
16883: GO 16981
// begin if gammaCommander = 1 then
16885: LD_EXP 13
16889: PUSH
16890: LD_INT 1
16892: EQUAL
16893: IFFALSE 16981
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16895: LD_INT 22
16897: PUSH
16898: LD_INT 1
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 21
16907: PUSH
16908: LD_INT 1
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 23
16917: PUSH
16918: LD_INT 1
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 120
16927: PUSH
16928: LD_INT 106
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 26
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: PPUSH
16952: CALL_OW 69
16956: PPUSH
16957: LD_STRING D3-Sol1-1
16959: PPUSH
16960: LD_STRING 
16962: PPUSH
16963: CALL 20208 0 3
16967: IFFALSE 16981
// Say ( JMM , D3-JMM-2 ) ;
16969: LD_EXP 14
16973: PPUSH
16974: LD_STRING D3-JMM-2
16976: PPUSH
16977: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16981: LD_EXP 15
16985: PPUSH
16986: CALL_OW 302
16990: PUSH
16991: LD_EXP 13
16995: PUSH
16996: LD_INT 2
16998: EQUAL
16999: AND
17000: IFFALSE 17016
// Say ( Brown , D3-Brown-1 ) else
17002: LD_EXP 15
17006: PPUSH
17007: LD_STRING D3-Brown-1
17009: PPUSH
17010: CALL_OW 88
17014: GO 17112
// begin if gammaCommander = 2 then
17016: LD_EXP 13
17020: PUSH
17021: LD_INT 2
17023: EQUAL
17024: IFFALSE 17112
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
17026: LD_INT 22
17028: PUSH
17029: LD_INT 1
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 21
17038: PUSH
17039: LD_INT 1
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 23
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 120
17058: PUSH
17059: LD_INT 106
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 26
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: PPUSH
17083: CALL_OW 69
17087: PPUSH
17088: LD_STRING D3-Sol1-1a
17090: PPUSH
17091: LD_STRING 
17093: PPUSH
17094: CALL 20208 0 3
17098: IFFALSE 17112
// Say ( JMM , D3-JMM-2 ) ;
17100: LD_EXP 14
17104: PPUSH
17105: LD_STRING D3-JMM-2
17107: PPUSH
17108: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17112: LD_EXP 25
17116: PPUSH
17117: CALL_OW 302
17121: PUSH
17122: LD_EXP 13
17126: PUSH
17127: LD_INT 3
17129: EQUAL
17130: AND
17131: IFFALSE 17147
// Say ( Houten , D3-VanH-1 ) else
17133: LD_EXP 25
17137: PPUSH
17138: LD_STRING D3-VanH-1
17140: PPUSH
17141: CALL_OW 88
17145: GO 17243
// begin if gammaCommander = 3 then
17147: LD_EXP 13
17151: PUSH
17152: LD_INT 3
17154: EQUAL
17155: IFFALSE 17243
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17157: LD_INT 22
17159: PUSH
17160: LD_INT 1
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 21
17169: PUSH
17170: LD_INT 1
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 23
17179: PUSH
17180: LD_INT 1
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 120
17189: PUSH
17190: LD_INT 106
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 26
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PPUSH
17214: CALL_OW 69
17218: PPUSH
17219: LD_STRING D3-Sol1-1b
17221: PPUSH
17222: LD_STRING 
17224: PPUSH
17225: CALL 20208 0 3
17229: IFFALSE 17243
// Say ( JMM , D3-JMM-2 ) ;
17231: LD_EXP 14
17235: PPUSH
17236: LD_STRING D3-JMM-2
17238: PPUSH
17239: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17243: LD_EXP 27
17247: PPUSH
17248: CALL_OW 302
17252: IFFALSE 17280
// begin Say ( Joan , D3a-Joan-1 ) ;
17254: LD_EXP 27
17258: PPUSH
17259: LD_STRING D3a-Joan-1
17261: PPUSH
17262: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17266: LD_EXP 14
17270: PPUSH
17271: LD_STRING D3a-JMM-1
17273: PPUSH
17274: CALL_OW 88
// end else
17278: GO 17714
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17280: LD_STRING 06_JoanStatus_1
17282: PPUSH
17283: LD_INT 0
17285: PPUSH
17286: CALL_OW 30
17290: PUSH
17291: LD_INT 1
17293: EQUAL
17294: IFFALSE 17714
// begin Say ( JMM , D3b-JMM-1 ) ;
17296: LD_EXP 14
17300: PPUSH
17301: LD_STRING D3b-JMM-1
17303: PPUSH
17304: CALL_OW 88
// dialog := false ;
17308: LD_ADDR_VAR 0 1
17312: PUSH
17313: LD_INT 0
17315: ST_TO_ADDR
// if gammaCommander = 1 then
17316: LD_EXP 13
17320: PUSH
17321: LD_INT 1
17323: EQUAL
17324: IFFALSE 17435
// if IsOK ( Donaldson ) then
17326: LD_EXP 16
17330: PPUSH
17331: CALL_OW 302
17335: IFFALSE 17357
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17337: LD_ADDR_VAR 0 1
17341: PUSH
17342: LD_EXP 16
17346: PPUSH
17347: LD_STRING D3b-Don-1
17349: PPUSH
17350: CALL_OW 88
17354: ST_TO_ADDR
17355: GO 17435
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17357: LD_ADDR_VAR 0 1
17361: PUSH
17362: LD_INT 22
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 21
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 23
17384: PUSH
17385: LD_INT 1
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 120
17394: PUSH
17395: LD_INT 106
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 26
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: PPUSH
17419: CALL_OW 69
17423: PPUSH
17424: LD_STRING D3b-Sol1-1
17426: PPUSH
17427: LD_STRING 
17429: PPUSH
17430: CALL 20208 0 3
17434: ST_TO_ADDR
// if gammaCommander = 2 then
17435: LD_EXP 13
17439: PUSH
17440: LD_INT 2
17442: EQUAL
17443: IFFALSE 17554
// if IsOk ( Brown ) then
17445: LD_EXP 15
17449: PPUSH
17450: CALL_OW 302
17454: IFFALSE 17476
// dialog := Say ( Brown , D3b-Brown-1 ) else
17456: LD_ADDR_VAR 0 1
17460: PUSH
17461: LD_EXP 15
17465: PPUSH
17466: LD_STRING D3b-Brown-1
17468: PPUSH
17469: CALL_OW 88
17473: ST_TO_ADDR
17474: GO 17554
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17476: LD_ADDR_VAR 0 1
17480: PUSH
17481: LD_INT 22
17483: PUSH
17484: LD_INT 1
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 21
17493: PUSH
17494: LD_INT 1
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 23
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 120
17513: PUSH
17514: LD_INT 106
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: PPUSH
17538: CALL_OW 69
17542: PPUSH
17543: LD_STRING D3b-Sol1-1
17545: PPUSH
17546: LD_STRING 
17548: PPUSH
17549: CALL 20208 0 3
17553: ST_TO_ADDR
// if gammaCommander = 3 then
17554: LD_EXP 13
17558: PUSH
17559: LD_INT 3
17561: EQUAL
17562: IFFALSE 17673
// if IsOk ( Houten ) then
17564: LD_EXP 25
17568: PPUSH
17569: CALL_OW 302
17573: IFFALSE 17595
// dialog := Say ( Houten , D3b-VanH-1 ) else
17575: LD_ADDR_VAR 0 1
17579: PUSH
17580: LD_EXP 25
17584: PPUSH
17585: LD_STRING D3b-VanH-1
17587: PPUSH
17588: CALL_OW 88
17592: ST_TO_ADDR
17593: GO 17673
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17595: LD_ADDR_VAR 0 1
17599: PUSH
17600: LD_INT 22
17602: PUSH
17603: LD_INT 1
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 21
17612: PUSH
17613: LD_INT 1
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 23
17622: PUSH
17623: LD_INT 1
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 120
17632: PUSH
17633: LD_INT 106
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 26
17642: PUSH
17643: LD_INT 1
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: PPUSH
17657: CALL_OW 69
17661: PPUSH
17662: LD_STRING D3b-Sol1-1
17664: PPUSH
17665: LD_STRING 
17667: PPUSH
17668: CALL 20208 0 3
17672: ST_TO_ADDR
// if dialog then
17673: LD_VAR 0 1
17677: IFFALSE 17714
// begin Say ( JMM , D3b-JMM-2 ) ;
17679: LD_EXP 14
17683: PPUSH
17684: LD_STRING D3b-JMM-2
17686: PPUSH
17687: CALL_OW 88
// if IsOK ( Lisa ) then
17691: LD_EXP 19
17695: PPUSH
17696: CALL_OW 302
17700: IFFALSE 17714
// Say ( Lisa , D3b-Lisa-2 ) ;
17702: LD_EXP 19
17706: PPUSH
17707: LD_STRING D3b-Lisa-2
17709: PPUSH
17710: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17714: LD_EXP 7
17718: NOT
17719: IFFALSE 17727
// begin DialogueOff ;
17721: CALL_OW 7
// exit ;
17725: GO 17939
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17727: LD_INT 22
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 21
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 23
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 2
17759: PUSH
17760: LD_INT 120
17762: PUSH
17763: LD_INT 106
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 120
17772: PUSH
17773: LD_INT 107
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 26
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: PPUSH
17807: LD_STRING DCa-Sol1-1
17809: PPUSH
17810: LD_STRING 
17812: PPUSH
17813: CALL 20208 0 3
17817: IFFALSE 17831
// Say ( JMM , DCb-JMM-1 ) ;
17819: LD_EXP 14
17823: PPUSH
17824: LD_STRING DCb-JMM-1
17826: PPUSH
17827: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17831: LD_INT 22
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 21
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 23
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 2
17863: PUSH
17864: LD_INT 120
17866: PUSH
17867: LD_INT 106
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 120
17876: PUSH
17877: LD_INT 107
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 26
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: PPUSH
17906: CALL_OW 69
17910: PPUSH
17911: LD_STRING DCb-Sol1-1
17913: PPUSH
17914: LD_STRING 
17916: PPUSH
17917: CALL 20208 0 3
17921: IFFALSE 17935
// Say ( JMM , DCb-JMM-2 ) ;
17923: LD_EXP 14
17927: PPUSH
17928: LD_STRING DCb-JMM-2
17930: PPUSH
17931: CALL_OW 88
// DialogueOff ;
17935: CALL_OW 7
// end ;
17939: PPOPN 2
17941: END
// export function DialogSeenComputer ( un ) ; begin
17942: LD_INT 0
17944: PPUSH
// if jmmArrival then
17945: LD_EXP 8
17949: IFFALSE 17953
// exit ;
17951: GO 18019
// CenterOnUnits ( un ) ;
17953: LD_VAR 0 1
17957: PPUSH
17958: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17962: LD_INT 22
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: LD_INT 120
17977: PUSH
17978: LD_INT 106
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 120
17987: PUSH
17988: LD_INT 107
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PPUSH
18004: CALL_OW 69
18008: PPUSH
18009: LD_STRING DC-Sol1-1
18011: PPUSH
18012: LD_STRING DC-FSol1-1
18014: PPUSH
18015: CALL 20208 0 3
// end ;
18019: LD_VAR 0 2
18023: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
18024: LD_EXP 8
18028: PUSH
18029: LD_OWVAR 1
18033: PUSH
18034: LD_INT 48300
18036: GREATEREQUAL
18037: AND
18038: PUSH
18039: LD_EXP 14
18043: PPUSH
18044: CALL_OW 302
18048: AND
18049: IFFALSE 18535
18051: GO 18053
18053: DISABLE
// begin wait ( 2 2$00 ) ;
18054: LD_INT 4200
18056: PPUSH
18057: CALL_OW 67
// DialogueOn ;
18061: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18065: LD_EXP 30
18069: PPUSH
18070: LD_STRING D4-Pow-1
18072: PPUSH
18073: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18077: LD_EXP 14
18081: PPUSH
18082: LD_STRING D4-JMM-1
18084: PPUSH
18085: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18089: LD_EXP 30
18093: PPUSH
18094: LD_STRING D4-Pow-2
18096: PPUSH
18097: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18101: LD_EXP 14
18105: PPUSH
18106: LD_STRING D4-JMM-2
18108: PPUSH
18109: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18113: LD_EXP 30
18117: PPUSH
18118: LD_STRING D4-Pow-3
18120: PPUSH
18121: CALL_OW 94
// DialogueOff ;
18125: CALL_OW 7
// wait ( 1 1$00 ) ;
18129: LD_INT 2100
18131: PPUSH
18132: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18136: LD_INT 1
18138: PPUSH
18139: CALL_OW 427
// wait ( 7 7$30 ) ;
18143: LD_INT 15750
18145: PPUSH
18146: CALL_OW 67
// DialogueOn ;
18150: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18154: LD_EXP 30
18158: PPUSH
18159: LD_STRING D4a-Pow-1
18161: PPUSH
18162: CALL_OW 94
// DialogueOff ;
18166: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18170: LD_INT 1
18172: PPUSH
18173: CALL_OW 427
// SikorskiCounter ;
18177: CALL 19992 0 0
// PrepareSikorsky ;
18181: CALL 6238 0 0
// CenterNowOnUnits ( Sikorski ) ;
18185: LD_EXP 28
18189: PPUSH
18190: CALL_OW 87
// DialogueOn ;
18194: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18198: LD_EXP 28
18202: PPUSH
18203: LD_STRING D5-Sik-1
18205: PPUSH
18206: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18210: LD_INT 11
18212: PPUSH
18213: LD_INT 22
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PPUSH
18223: CALL_OW 70
18227: PUSH
18228: LD_INT 1
18230: GREATER
18231: PUSH
18232: LD_INT 28
18234: PPUSH
18235: CALL_OW 302
18239: NOT
18240: OR
18241: PUSH
18242: LD_INT 28
18244: PPUSH
18245: CALL_OW 255
18249: PUSH
18250: LD_INT 1
18252: EQUAL
18253: OR
18254: IFFALSE 18306
// begin Say ( JMM , D5-JMM-1 ) ;
18256: LD_EXP 14
18260: PPUSH
18261: LD_STRING D5-JMM-1
18263: PPUSH
18264: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18268: LD_EXP 28
18272: PPUSH
18273: LD_STRING D7a-Sik-1
18275: PPUSH
18276: CALL_OW 88
// DialogueOff ;
18280: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18284: LD_STRING M2
18286: PPUSH
18287: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18291: LD_INT 1
18293: PPUSH
18294: CALL_OW 427
// SikorskiAttack ;
18298: CALL 7861 0 0
// exit ;
18302: GO 18535
// end else
18304: GO 18351
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18306: LD_INT 15
18308: PPUSH
18309: LD_INT 81
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PPUSH
18319: CALL_OW 70
18323: IFFALSE 18339
// Say ( JMM , D5-JMM-1b ) else
18325: LD_EXP 14
18329: PPUSH
18330: LD_STRING D5-JMM-1b
18332: PPUSH
18333: CALL_OW 88
18337: GO 18351
// Say ( JMM , D5-JMM-1a ) ;
18339: LD_EXP 14
18343: PPUSH
18344: LD_STRING D5-JMM-1a
18346: PPUSH
18347: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18351: LD_EXP 28
18355: PPUSH
18356: LD_STRING D5-Sik-2
18358: PPUSH
18359: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18363: LD_STRING QSikorski
18365: PPUSH
18366: CALL_OW 97
18370: PUSH
18371: LD_INT 1
18373: DOUBLE
18374: EQUAL
18375: IFTRUE 18379
18377: GO 18402
18379: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18380: LD_EXP 28
18384: PPUSH
18385: LD_STRING D5a-Sik-1
18387: PPUSH
18388: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18392: LD_ADDR_EXP 4
18396: PUSH
18397: LD_INT 2100
18399: ST_TO_ADDR
// end ; 2 :
18400: GO 18489
18402: LD_INT 2
18404: DOUBLE
18405: EQUAL
18406: IFTRUE 18410
18408: GO 18433
18410: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18411: LD_EXP 28
18415: PPUSH
18416: LD_STRING D5b-Sik-1
18418: PPUSH
18419: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18423: LD_ADDR_EXP 4
18427: PUSH
18428: LD_INT 10500
18430: ST_TO_ADDR
// end ; 3 :
18431: GO 18489
18433: LD_INT 3
18435: DOUBLE
18436: EQUAL
18437: IFTRUE 18441
18439: GO 18488
18441: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18442: LD_EXP 28
18446: PPUSH
18447: LD_STRING D5c-Sik-1
18449: PPUSH
18450: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18454: LD_EXP 14
18458: PPUSH
18459: LD_STRING D5c-JMM-1
18461: PPUSH
18462: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18466: LD_EXP 28
18470: PPUSH
18471: LD_STRING D5c-Sik-2
18473: PPUSH
18474: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18478: LD_ADDR_EXP 4
18482: PUSH
18483: LD_INT 10500
18485: ST_TO_ADDR
// end ; end ;
18486: GO 18489
18488: POP
// DialogueOff ;
18489: CALL_OW 7
// SikorskiWaitCounter ;
18493: CALL 20055 0 0
// DialogueOn ;
18497: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18501: LD_EXP 28
18505: PPUSH
18506: LD_STRING D6-Sik-1
18508: PPUSH
18509: CALL_OW 88
// DialogueOff ;
18513: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18517: LD_STRING M2
18519: PPUSH
18520: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18524: LD_INT 1
18526: PPUSH
18527: CALL_OW 427
// SikorskiAttack ;
18531: CALL 7861 0 0
// end ;
18535: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18536: LD_INT 11
18538: PPUSH
18539: LD_INT 22
18541: PUSH
18542: LD_INT 4
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 70
18553: PUSH
18554: LD_INT 2
18556: GREATER
18557: IFFALSE 18750
18559: GO 18561
18561: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18562: LD_EXP 28
18566: PPUSH
18567: LD_STRING D7-Sik-1
18569: PPUSH
18570: CALL_OW 88
// wait ( 0 0$10 ) ;
18574: LD_INT 350
18576: PPUSH
18577: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18581: LD_EXP 14
18585: PPUSH
18586: LD_INT 11
18588: PPUSH
18589: CALL_OW 308
18593: PUSH
18594: LD_EXP 14
18598: PPUSH
18599: CALL_OW 310
18603: PPUSH
18604: LD_INT 11
18606: PPUSH
18607: CALL_OW 308
18611: OR
18612: IFFALSE 18636
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18614: LD_EXP 28
18618: PPUSH
18619: LD_STRING D7a-Sik-1
18621: PPUSH
18622: CALL_OW 88
// sikorskiStatus := 1 ;
18626: LD_ADDR_EXP 9
18630: PUSH
18631: LD_INT 1
18633: ST_TO_ADDR
// end else
18634: GO 18656
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18636: LD_EXP 28
18640: PPUSH
18641: LD_STRING D7b-Sik-1
18643: PPUSH
18644: CALL_OW 88
// sikorskiStatus := 0 ;
18648: LD_ADDR_EXP 9
18652: PUSH
18653: LD_INT 0
18655: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18656: LD_INT 1575
18658: PPUSH
18659: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18663: LD_EXP 14
18667: PPUSH
18668: LD_INT 11
18670: PPUSH
18671: CALL_OW 308
18675: PUSH
18676: LD_EXP 14
18680: PPUSH
18681: CALL_OW 310
18685: PPUSH
18686: LD_INT 11
18688: PPUSH
18689: CALL_OW 308
18693: OR
18694: PUSH
18695: LD_EXP 14
18699: PPUSH
18700: CALL_OW 302
18704: NOT
18705: OR
18706: IFFALSE 18730
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18708: LD_EXP 28
18712: PPUSH
18713: LD_STRING D7a-Sik-1
18715: PPUSH
18716: CALL_OW 88
// sikorskiStatus := 1 ;
18720: LD_ADDR_EXP 9
18724: PUSH
18725: LD_INT 1
18727: ST_TO_ADDR
// end else
18728: GO 18750
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18730: LD_EXP 28
18734: PPUSH
18735: LD_STRING D7b-Sik-1
18737: PPUSH
18738: CALL_OW 88
// sikorskiStatus := 0 ;
18742: LD_ADDR_EXP 9
18746: PUSH
18747: LD_INT 0
18749: ST_TO_ADDR
// end ; end ;
18750: END
// export function SikorskiKilledInAction ; begin
18751: LD_INT 0
18753: PPUSH
// wait ( 0 0$2 ) ;
18754: LD_INT 70
18756: PPUSH
18757: CALL_OW 67
// DialogueOn ;
18761: CALL_OW 6
// dwait ( 0 0$1 ) ;
18765: LD_INT 35
18767: PPUSH
18768: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18772: LD_EXP 30
18776: PPUSH
18777: LD_STRING D8b-Pow-1
18779: PPUSH
18780: CALL_OW 94
// YouLost ( Dismissed ) ;
18784: LD_STRING Dismissed
18786: PPUSH
18787: CALL_OW 104
// DialogueOff ;
18791: CALL_OW 7
// end ;
18795: LD_VAR 0 1
18799: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18800: LD_EXP 8
18804: PUSH
18805: LD_INT 28
18807: PPUSH
18808: CALL_OW 301
18812: AND
18813: PUSH
18814: LD_EXP 32
18818: PPUSH
18819: CALL_OW 301
18823: AND
18824: PUSH
18825: LD_INT 22
18827: PUSH
18828: LD_INT 3
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 50
18837: PUSH
18838: EMPTY
18839: LIST
18840: PUSH
18841: LD_INT 30
18843: PUSH
18844: LD_INT 5
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: LIST
18855: PPUSH
18856: CALL_OW 69
18860: PUSH
18861: LD_INT 0
18863: EQUAL
18864: AND
18865: IFFALSE 19989
18867: GO 18869
18869: DISABLE
18870: LD_INT 0
18872: PPUSH
18873: PPUSH
18874: PPUSH
// begin Video ( true ) ;
18875: LD_INT 1
18877: PPUSH
18878: CALL 78727 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18882: LD_INT 104
18884: PPUSH
18885: LD_INT 108
18887: PPUSH
18888: LD_INT 1
18890: PPUSH
18891: LD_INT 36
18893: NEG
18894: PPUSH
18895: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18899: LD_INT 104
18901: PPUSH
18902: LD_INT 108
18904: PPUSH
18905: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18909: LD_ADDR_VAR 0 2
18913: PUSH
18914: LD_INT 22
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 21
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 3
18936: PUSH
18937: LD_INT 24
18939: PUSH
18940: LD_INT 249
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: PPUSH
18956: CALL_OW 69
18960: ST_TO_ADDR
// if tmp then
18961: LD_VAR 0 2
18965: IFFALSE 18996
// for i in tmp do
18967: LD_ADDR_VAR 0 1
18971: PUSH
18972: LD_VAR 0 2
18976: PUSH
18977: FOR_IN
18978: IFFALSE 18994
// SetLives ( i , 249 ) ;
18980: LD_VAR 0 1
18984: PPUSH
18985: LD_INT 249
18987: PPUSH
18988: CALL_OW 234
18992: GO 18977
18994: POP
18995: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18996: LD_ADDR_VAR 0 1
19000: PUSH
19001: LD_INT 22
19003: PUSH
19004: LD_INT 3
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 21
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PPUSH
19025: CALL_OW 69
19029: PUSH
19030: FOR_IN
19031: IFFALSE 19074
// begin ComExit ( i ) ;
19033: LD_VAR 0 1
19037: PPUSH
19038: CALL 79153 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
19042: LD_VAR 0 1
19046: PPUSH
19047: LD_INT 131
19049: PPUSH
19050: LD_INT 127
19052: PPUSH
19053: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
19057: LD_VAR 0 1
19061: PPUSH
19062: LD_INT 141
19064: PPUSH
19065: LD_INT 147
19067: PPUSH
19068: CALL_OW 171
// end ;
19072: GO 19030
19074: POP
19075: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
19076: LD_INT 81
19078: PUSH
19079: LD_INT 3
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 3
19088: PUSH
19089: LD_INT 21
19091: PUSH
19092: LD_INT 3
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PPUSH
19107: CALL_OW 69
19111: PPUSH
19112: LD_INT 131
19114: PPUSH
19115: LD_INT 127
19117: PPUSH
19118: CALL_OW 174
// wait ( 0 0$08 ) ;
19122: LD_INT 280
19124: PPUSH
19125: CALL_OW 67
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 7 then
19129: LD_INT 22
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 21
19141: PUSH
19142: LD_INT 1
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 23
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 50
19161: PUSH
19162: EMPTY
19163: LIST
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: PPUSH
19171: CALL_OW 69
19175: PPUSH
19176: CALL 43166 0 1
19180: PUSH
19181: LD_INT 7
19183: LESS
19184: IFFALSE 19193
// YouLost ( LostVictory ) ;
19186: LD_STRING LostVictory
19188: PPUSH
19189: CALL_OW 104
// DialogueOn ;
19193: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19197: LD_EXP 9
19201: PUSH
19202: LD_INT 1
19204: EQUAL
19205: PUSH
19206: LD_EXP 28
19210: PPUSH
19211: CALL_OW 302
19215: AND
19216: IFFALSE 19230
// Say ( Sikorski , D9-Sik-1 ) ;
19218: LD_EXP 28
19222: PPUSH
19223: LD_STRING D9-Sik-1
19225: PPUSH
19226: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19230: LD_INT 22
19232: PUSH
19233: LD_INT 4
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PPUSH
19240: CALL_OW 69
19244: PUSH
19245: LD_INT 0
19247: EQUAL
19248: PUSH
19249: LD_EXP 3
19253: AND
19254: IFFALSE 19263
// SetAchievement ( ACH_BLITZKRIEG ) ;
19256: LD_STRING ACH_BLITZKRIEG
19258: PPUSH
19259: CALL_OW 543
// if tick <= 45 45$10 then
19263: LD_OWVAR 1
19267: PUSH
19268: LD_INT 94850
19270: LESSEQUAL
19271: IFFALSE 19287
// begin wait ( 3 ) ;
19273: LD_INT 3
19275: PPUSH
19276: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19280: LD_STRING ACH_ASPEED_8
19282: PPUSH
19283: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19287: LD_STRING med1
19289: PPUSH
19290: LD_INT 1
19292: PPUSH
19293: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19297: LD_STRING med2
19299: PPUSH
19300: LD_INT 1
19302: PPUSH
19303: CALL_OW 101
// if sikorskiStatus = 1 then
19307: LD_EXP 9
19311: PUSH
19312: LD_INT 1
19314: EQUAL
19315: IFFALSE 19329
// AddMedal ( perfect , 1 ) else
19317: LD_STRING perfect
19319: PPUSH
19320: LD_INT 1
19322: PPUSH
19323: CALL_OW 101
19327: GO 19340
// AddMedal ( perfect , - 1 ) ;
19329: LD_STRING perfect
19331: PPUSH
19332: LD_INT 1
19334: NEG
19335: PPUSH
19336: CALL_OW 101
// if Difficulty >= 3 then
19340: LD_OWVAR 67
19344: PUSH
19345: LD_INT 3
19347: GREATEREQUAL
19348: IFFALSE 19360
// SetAchievementEX ( ACH_AMER , 8 ) ;
19350: LD_STRING ACH_AMER
19352: PPUSH
19353: LD_INT 8
19355: PPUSH
19356: CALL_OW 564
// GiveMedals ( Main ) ;
19360: LD_STRING Main
19362: PPUSH
19363: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19367: LD_INT 22
19369: PUSH
19370: LD_INT 1
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 23
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 21
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: PPUSH
19402: CALL_OW 69
19406: PPUSH
19407: CALL_OW 43
// prefix := 08_ ;
19411: LD_ADDR_VAR 0 3
19415: PUSH
19416: LD_STRING 08_
19418: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19419: LD_EXP 14
19423: PPUSH
19424: LD_VAR 0 3
19428: PUSH
19429: LD_STRING JMM
19431: STR
19432: PPUSH
19433: CALL_OW 38
// if IsLive ( Brown ) then
19437: LD_EXP 15
19441: PPUSH
19442: CALL_OW 300
19446: IFFALSE 19466
// SaveCharacters ( Brown , prefix & Brown ) ;
19448: LD_EXP 15
19452: PPUSH
19453: LD_VAR 0 3
19457: PUSH
19458: LD_STRING Brown
19460: STR
19461: PPUSH
19462: CALL_OW 38
// if IsLive ( Donaldson ) then
19466: LD_EXP 16
19470: PPUSH
19471: CALL_OW 300
19475: IFFALSE 19495
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19477: LD_EXP 16
19481: PPUSH
19482: LD_VAR 0 3
19486: PUSH
19487: LD_STRING Donaldson
19489: STR
19490: PPUSH
19491: CALL_OW 38
// if IsLive ( Bobby ) then
19495: LD_EXP 17
19499: PPUSH
19500: CALL_OW 300
19504: IFFALSE 19524
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19506: LD_EXP 17
19510: PPUSH
19511: LD_VAR 0 3
19515: PUSH
19516: LD_STRING Bobby
19518: STR
19519: PPUSH
19520: CALL_OW 38
// if IsLive ( Cyrus ) then
19524: LD_EXP 18
19528: PPUSH
19529: CALL_OW 300
19533: IFFALSE 19553
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19535: LD_EXP 18
19539: PPUSH
19540: LD_VAR 0 3
19544: PUSH
19545: LD_STRING Cyrus
19547: STR
19548: PPUSH
19549: CALL_OW 38
// if IsLive ( Lisa ) then
19553: LD_EXP 19
19557: PPUSH
19558: CALL_OW 300
19562: IFFALSE 19582
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19564: LD_EXP 19
19568: PPUSH
19569: LD_VAR 0 3
19573: PUSH
19574: LD_STRING Lisa
19576: STR
19577: PPUSH
19578: CALL_OW 38
// if IsLive ( Frank ) then
19582: LD_EXP 20
19586: PPUSH
19587: CALL_OW 300
19591: IFFALSE 19611
// SaveCharacters ( Frank , prefix & Frank ) ;
19593: LD_EXP 20
19597: PPUSH
19598: LD_VAR 0 3
19602: PUSH
19603: LD_STRING Frank
19605: STR
19606: PPUSH
19607: CALL_OW 38
// if IsLive ( Gladstone ) then
19611: LD_EXP 21
19615: PPUSH
19616: CALL_OW 300
19620: IFFALSE 19640
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19622: LD_EXP 21
19626: PPUSH
19627: LD_VAR 0 3
19631: PUSH
19632: LD_STRING Gladstone
19634: STR
19635: PPUSH
19636: CALL_OW 38
// if IsLive ( Kikuchi ) then
19640: LD_EXP 22
19644: PPUSH
19645: CALL_OW 300
19649: IFFALSE 19669
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19651: LD_EXP 22
19655: PPUSH
19656: LD_VAR 0 3
19660: PUSH
19661: LD_STRING Kikuchi
19663: STR
19664: PPUSH
19665: CALL_OW 38
// if IsLive ( Denis ) then
19669: LD_EXP 26
19673: PPUSH
19674: CALL_OW 300
19678: IFFALSE 19698
// SaveCharacters ( Denis , prefix & Denis ) ;
19680: LD_EXP 26
19684: PPUSH
19685: LD_VAR 0 3
19689: PUSH
19690: LD_STRING Denis
19692: STR
19693: PPUSH
19694: CALL_OW 38
// if IsLive ( Joan ) then
19698: LD_EXP 27
19702: PPUSH
19703: CALL_OW 300
19707: IFFALSE 19729
// SaveCharacters ( Joan , prefix & Joan ) else
19709: LD_EXP 27
19713: PPUSH
19714: LD_VAR 0 3
19718: PUSH
19719: LD_STRING Joan
19721: STR
19722: PPUSH
19723: CALL_OW 38
19727: GO 19736
// DeleteCharacters ( Joan ) ;
19729: LD_STRING Joan
19731: PPUSH
19732: CALL_OW 40
// if IsLive ( Khatam ) then
19736: LD_EXP 23
19740: PPUSH
19741: CALL_OW 300
19745: IFFALSE 19765
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19747: LD_EXP 23
19751: PPUSH
19752: LD_VAR 0 3
19756: PUSH
19757: LD_STRING Khatam
19759: STR
19760: PPUSH
19761: CALL_OW 38
// if IsLive ( Houten ) then
19765: LD_EXP 25
19769: PPUSH
19770: CALL_OW 300
19774: IFFALSE 19801
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
19776: LD_STRING enableBioCharacter(BIO_HOUT)
19778: PPUSH
19779: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
19783: LD_EXP 25
19787: PPUSH
19788: LD_VAR 0 3
19792: PUSH
19793: LD_STRING Houten
19795: STR
19796: PPUSH
19797: CALL_OW 38
// end ; if IsLive ( Mike ) then
19801: LD_EXP 24
19805: PPUSH
19806: CALL_OW 300
19810: IFFALSE 19830
// SaveCharacters ( Mike , prefix & Mike ) ;
19812: LD_EXP 24
19816: PPUSH
19817: LD_VAR 0 3
19821: PUSH
19822: LD_STRING Mike
19824: STR
19825: PPUSH
19826: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19830: LD_INT 22
19832: PUSH
19833: LD_INT 1
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 21
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 23
19852: PUSH
19853: LD_INT 1
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: PPUSH
19865: CALL_OW 69
19869: PUSH
19870: LD_EXP 14
19874: PUSH
19875: LD_EXP 15
19879: PUSH
19880: LD_EXP 16
19884: PUSH
19885: LD_EXP 17
19889: PUSH
19890: LD_EXP 18
19894: PUSH
19895: LD_EXP 19
19899: PUSH
19900: LD_EXP 20
19904: PUSH
19905: LD_EXP 21
19909: PUSH
19910: LD_EXP 22
19914: PUSH
19915: LD_EXP 26
19919: PUSH
19920: LD_EXP 27
19924: PUSH
19925: LD_EXP 25
19929: PUSH
19930: LD_EXP 23
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: DIFF
19950: PPUSH
19951: LD_STRING 08_other_survivors
19953: PPUSH
19954: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19958: LD_INT 15
19960: PPUSH
19961: CALL 7335 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19965: LD_EXP 10
19969: NOT
19970: PPUSH
19971: LD_STRING 08_SikorskiStatus
19973: PPUSH
19974: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
19978: LD_STRING enableBioCharacter(BIO_SIK)
19980: PPUSH
19981: CALL_OW 559
// YouWin ;
19985: CALL_OW 103
// end ; end_of_file
19989: PPOPN 3
19991: END
// export function SikorskiCounter ; begin
19992: LD_INT 0
19994: PPUSH
// repeat wait ( 0 0$1 ) ;
19995: LD_INT 35
19997: PPUSH
19998: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
20002: LD_ADDR_OWVAR 47
20006: PUSH
20007: LD_STRING #Am08-2
20009: PUSH
20010: LD_EXP 3
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
20019: LD_ADDR_EXP 3
20023: PUSH
20024: LD_EXP 3
20028: PUSH
20029: LD_INT 35
20031: MINUS
20032: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
20033: LD_EXP 3
20037: PUSH
20038: LD_INT 0
20040: EQUAL
20041: IFFALSE 19995
// display_strings := [ ] ;
20043: LD_ADDR_OWVAR 47
20047: PUSH
20048: EMPTY
20049: ST_TO_ADDR
// end ;
20050: LD_VAR 0 1
20054: RET
// export function SikorskiWaitCounter ; begin
20055: LD_INT 0
20057: PPUSH
// repeat wait ( 0 0$1 ) ;
20058: LD_INT 35
20060: PPUSH
20061: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
20065: LD_ADDR_OWVAR 47
20069: PUSH
20070: LD_STRING #Am08-1
20072: PUSH
20073: LD_EXP 4
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
20082: LD_ADDR_EXP 4
20086: PUSH
20087: LD_EXP 4
20091: PUSH
20092: LD_INT 35
20094: MINUS
20095: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
20096: LD_EXP 4
20100: PUSH
20101: LD_INT 0
20103: EQUAL
20104: IFFALSE 20058
// display_strings := [ ] ;
20106: LD_ADDR_OWVAR 47
20110: PUSH
20111: EMPTY
20112: ST_TO_ADDR
// end ; end_of_file
20113: LD_VAR 0 1
20117: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
20118: LD_EXP 3
20122: IFFALSE 20162
20124: GO 20126
20126: DISABLE
// begin enable ;
20127: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
20128: LD_INT 14
20130: PPUSH
20131: CALL_OW 435
20135: PUSH
20136: LD_INT 10
20138: LESS
20139: IFFALSE 20162
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
20141: LD_INT 1
20143: PPUSH
20144: LD_INT 5
20146: PPUSH
20147: CALL_OW 12
20151: PPUSH
20152: LD_INT 14
20154: PPUSH
20155: LD_INT 1
20157: PPUSH
20158: CALL_OW 55
// end ;
20162: END
// every 0 0$55 trigger sikorskiArriveCounter do
20163: LD_EXP 3
20167: IFFALSE 20207
20169: GO 20171
20171: DISABLE
// begin enable ;
20172: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20173: LD_INT 13
20175: PPUSH
20176: CALL_OW 435
20180: PUSH
20181: LD_INT 10
20183: LESS
20184: IFFALSE 20207
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20186: LD_INT 1
20188: PPUSH
20189: LD_INT 5
20191: PPUSH
20192: CALL_OW 12
20196: PPUSH
20197: LD_INT 13
20199: PPUSH
20200: LD_INT 1
20202: PPUSH
20203: CALL_OW 55
// end ; end_of_file
20207: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20208: LD_INT 0
20210: PPUSH
20211: PPUSH
// if not units then
20212: LD_VAR 0 1
20216: NOT
20217: IFFALSE 20221
// exit ;
20219: GO 20346
// result := false ;
20221: LD_ADDR_VAR 0 4
20225: PUSH
20226: LD_INT 0
20228: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20229: LD_ADDR_VAR 0 5
20233: PUSH
20234: LD_VAR 0 1
20238: PPUSH
20239: LD_INT 26
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PPUSH
20249: CALL_OW 72
20253: ST_TO_ADDR
// if tmp then
20254: LD_VAR 0 5
20258: IFFALSE 20284
// result := Say ( tmp [ 1 ] , menDialog ) ;
20260: LD_ADDR_VAR 0 4
20264: PUSH
20265: LD_VAR 0 5
20269: PUSH
20270: LD_INT 1
20272: ARRAY
20273: PPUSH
20274: LD_VAR 0 2
20278: PPUSH
20279: CALL_OW 88
20283: ST_TO_ADDR
// if not result then
20284: LD_VAR 0 4
20288: NOT
20289: IFFALSE 20346
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20291: LD_ADDR_VAR 0 5
20295: PUSH
20296: LD_VAR 0 1
20300: PPUSH
20301: LD_INT 26
20303: PUSH
20304: LD_INT 2
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PPUSH
20311: CALL_OW 72
20315: ST_TO_ADDR
// if tmp then
20316: LD_VAR 0 5
20320: IFFALSE 20346
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20322: LD_ADDR_VAR 0 4
20326: PUSH
20327: LD_VAR 0 5
20331: PUSH
20332: LD_INT 1
20334: ARRAY
20335: PPUSH
20336: LD_VAR 0 3
20340: PPUSH
20341: CALL_OW 88
20345: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20346: LD_VAR 0 4
20350: RET
// export globalGameSaveCounter ; every 0 0$1 do
20351: GO 20353
20353: DISABLE
// begin enable ;
20354: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20355: LD_STRING updateTimer(
20357: PUSH
20358: LD_OWVAR 1
20362: STR
20363: PUSH
20364: LD_STRING );
20366: STR
20367: PPUSH
20368: CALL_OW 559
// end ;
20372: END
// every 0 0$1 do
20373: GO 20375
20375: DISABLE
// begin globalGameSaveCounter := 0 ;
20376: LD_ADDR_EXP 37
20380: PUSH
20381: LD_INT 0
20383: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20384: LD_STRING setGameSaveCounter(0)
20386: PPUSH
20387: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20391: LD_STRING initStreamRollete();
20393: PPUSH
20394: CALL_OW 559
// InitStreamMode ;
20398: CALL 21741 0 0
// DefineStreamItems ( false ) ;
20402: LD_INT 0
20404: PPUSH
20405: CALL 22205 0 1
// end ;
20409: END
// export function SOS_MapStart ( ) ; begin
20410: LD_INT 0
20412: PPUSH
// if streamModeActive then
20413: LD_EXP 38
20417: IFFALSE 20426
// DefineStreamItems ( true ) ;
20419: LD_INT 1
20421: PPUSH
20422: CALL 22205 0 1
// UpdateLuaVariables ( ) ;
20426: CALL 20443 0 0
// UpdateFactoryWaypoints ( ) ;
20430: CALL 35074 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20434: CALL 35331 0 0
// end ;
20438: LD_VAR 0 1
20442: RET
// function UpdateLuaVariables ( ) ; begin
20443: LD_INT 0
20445: PPUSH
// if globalGameSaveCounter then
20446: LD_EXP 37
20450: IFFALSE 20484
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20452: LD_ADDR_EXP 37
20456: PUSH
20457: LD_EXP 37
20461: PPUSH
20462: CALL 80116 0 1
20466: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20467: LD_STRING setGameSaveCounter(
20469: PUSH
20470: LD_EXP 37
20474: STR
20475: PUSH
20476: LD_STRING )
20478: STR
20479: PPUSH
20480: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20484: LD_STRING setGameDifficulty(
20486: PUSH
20487: LD_OWVAR 67
20491: STR
20492: PUSH
20493: LD_STRING )
20495: STR
20496: PPUSH
20497: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20501: LD_STRING displayDifficulty(
20503: PUSH
20504: LD_OWVAR 67
20508: STR
20509: PUSH
20510: LD_STRING )
20512: STR
20513: PPUSH
20514: CALL_OW 559
// end ;
20518: LD_VAR 0 1
20522: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20523: LD_INT 0
20525: PPUSH
// if p2 = stream_mode then
20526: LD_VAR 0 2
20530: PUSH
20531: LD_INT 100
20533: EQUAL
20534: IFFALSE 21537
// begin if not StreamModeActive then
20536: LD_EXP 38
20540: NOT
20541: IFFALSE 20551
// StreamModeActive := true ;
20543: LD_ADDR_EXP 38
20547: PUSH
20548: LD_INT 1
20550: ST_TO_ADDR
// if p3 = 0 then
20551: LD_VAR 0 3
20555: PUSH
20556: LD_INT 0
20558: EQUAL
20559: IFFALSE 20565
// InitStreamMode ;
20561: CALL 21741 0 0
// if p3 = 1 then
20565: LD_VAR 0 3
20569: PUSH
20570: LD_INT 1
20572: EQUAL
20573: IFFALSE 20583
// sRocket := true ;
20575: LD_ADDR_EXP 43
20579: PUSH
20580: LD_INT 1
20582: ST_TO_ADDR
// if p3 = 2 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 2
20590: EQUAL
20591: IFFALSE 20601
// sSpeed := true ;
20593: LD_ADDR_EXP 42
20597: PUSH
20598: LD_INT 1
20600: ST_TO_ADDR
// if p3 = 3 then
20601: LD_VAR 0 3
20605: PUSH
20606: LD_INT 3
20608: EQUAL
20609: IFFALSE 20619
// sEngine := true ;
20611: LD_ADDR_EXP 44
20615: PUSH
20616: LD_INT 1
20618: ST_TO_ADDR
// if p3 = 4 then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 4
20626: EQUAL
20627: IFFALSE 20637
// sSpec := true ;
20629: LD_ADDR_EXP 41
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// if p3 = 5 then
20637: LD_VAR 0 3
20641: PUSH
20642: LD_INT 5
20644: EQUAL
20645: IFFALSE 20655
// sLevel := true ;
20647: LD_ADDR_EXP 45
20651: PUSH
20652: LD_INT 1
20654: ST_TO_ADDR
// if p3 = 6 then
20655: LD_VAR 0 3
20659: PUSH
20660: LD_INT 6
20662: EQUAL
20663: IFFALSE 20673
// sArmoury := true ;
20665: LD_ADDR_EXP 46
20669: PUSH
20670: LD_INT 1
20672: ST_TO_ADDR
// if p3 = 7 then
20673: LD_VAR 0 3
20677: PUSH
20678: LD_INT 7
20680: EQUAL
20681: IFFALSE 20691
// sRadar := true ;
20683: LD_ADDR_EXP 47
20687: PUSH
20688: LD_INT 1
20690: ST_TO_ADDR
// if p3 = 8 then
20691: LD_VAR 0 3
20695: PUSH
20696: LD_INT 8
20698: EQUAL
20699: IFFALSE 20709
// sBunker := true ;
20701: LD_ADDR_EXP 48
20705: PUSH
20706: LD_INT 1
20708: ST_TO_ADDR
// if p3 = 9 then
20709: LD_VAR 0 3
20713: PUSH
20714: LD_INT 9
20716: EQUAL
20717: IFFALSE 20727
// sHack := true ;
20719: LD_ADDR_EXP 49
20723: PUSH
20724: LD_INT 1
20726: ST_TO_ADDR
// if p3 = 10 then
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 10
20734: EQUAL
20735: IFFALSE 20745
// sFire := true ;
20737: LD_ADDR_EXP 50
20741: PUSH
20742: LD_INT 1
20744: ST_TO_ADDR
// if p3 = 11 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_INT 11
20752: EQUAL
20753: IFFALSE 20763
// sRefresh := true ;
20755: LD_ADDR_EXP 51
20759: PUSH
20760: LD_INT 1
20762: ST_TO_ADDR
// if p3 = 12 then
20763: LD_VAR 0 3
20767: PUSH
20768: LD_INT 12
20770: EQUAL
20771: IFFALSE 20781
// sExp := true ;
20773: LD_ADDR_EXP 52
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// if p3 = 13 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_INT 13
20788: EQUAL
20789: IFFALSE 20799
// sDepot := true ;
20791: LD_ADDR_EXP 53
20795: PUSH
20796: LD_INT 1
20798: ST_TO_ADDR
// if p3 = 14 then
20799: LD_VAR 0 3
20803: PUSH
20804: LD_INT 14
20806: EQUAL
20807: IFFALSE 20817
// sFlag := true ;
20809: LD_ADDR_EXP 54
20813: PUSH
20814: LD_INT 1
20816: ST_TO_ADDR
// if p3 = 15 then
20817: LD_VAR 0 3
20821: PUSH
20822: LD_INT 15
20824: EQUAL
20825: IFFALSE 20835
// sKamikadze := true ;
20827: LD_ADDR_EXP 62
20831: PUSH
20832: LD_INT 1
20834: ST_TO_ADDR
// if p3 = 16 then
20835: LD_VAR 0 3
20839: PUSH
20840: LD_INT 16
20842: EQUAL
20843: IFFALSE 20853
// sTroll := true ;
20845: LD_ADDR_EXP 63
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// if p3 = 17 then
20853: LD_VAR 0 3
20857: PUSH
20858: LD_INT 17
20860: EQUAL
20861: IFFALSE 20871
// sSlow := true ;
20863: LD_ADDR_EXP 64
20867: PUSH
20868: LD_INT 1
20870: ST_TO_ADDR
// if p3 = 18 then
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 18
20878: EQUAL
20879: IFFALSE 20889
// sLack := true ;
20881: LD_ADDR_EXP 65
20885: PUSH
20886: LD_INT 1
20888: ST_TO_ADDR
// if p3 = 19 then
20889: LD_VAR 0 3
20893: PUSH
20894: LD_INT 19
20896: EQUAL
20897: IFFALSE 20907
// sTank := true ;
20899: LD_ADDR_EXP 67
20903: PUSH
20904: LD_INT 1
20906: ST_TO_ADDR
// if p3 = 20 then
20907: LD_VAR 0 3
20911: PUSH
20912: LD_INT 20
20914: EQUAL
20915: IFFALSE 20925
// sRemote := true ;
20917: LD_ADDR_EXP 68
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// if p3 = 21 then
20925: LD_VAR 0 3
20929: PUSH
20930: LD_INT 21
20932: EQUAL
20933: IFFALSE 20943
// sPowell := true ;
20935: LD_ADDR_EXP 69
20939: PUSH
20940: LD_INT 1
20942: ST_TO_ADDR
// if p3 = 22 then
20943: LD_VAR 0 3
20947: PUSH
20948: LD_INT 22
20950: EQUAL
20951: IFFALSE 20961
// sTeleport := true ;
20953: LD_ADDR_EXP 72
20957: PUSH
20958: LD_INT 1
20960: ST_TO_ADDR
// if p3 = 23 then
20961: LD_VAR 0 3
20965: PUSH
20966: LD_INT 23
20968: EQUAL
20969: IFFALSE 20979
// sOilTower := true ;
20971: LD_ADDR_EXP 74
20975: PUSH
20976: LD_INT 1
20978: ST_TO_ADDR
// if p3 = 24 then
20979: LD_VAR 0 3
20983: PUSH
20984: LD_INT 24
20986: EQUAL
20987: IFFALSE 20997
// sShovel := true ;
20989: LD_ADDR_EXP 75
20993: PUSH
20994: LD_INT 1
20996: ST_TO_ADDR
// if p3 = 25 then
20997: LD_VAR 0 3
21001: PUSH
21002: LD_INT 25
21004: EQUAL
21005: IFFALSE 21015
// sSheik := true ;
21007: LD_ADDR_EXP 76
21011: PUSH
21012: LD_INT 1
21014: ST_TO_ADDR
// if p3 = 26 then
21015: LD_VAR 0 3
21019: PUSH
21020: LD_INT 26
21022: EQUAL
21023: IFFALSE 21033
// sEarthquake := true ;
21025: LD_ADDR_EXP 78
21029: PUSH
21030: LD_INT 1
21032: ST_TO_ADDR
// if p3 = 27 then
21033: LD_VAR 0 3
21037: PUSH
21038: LD_INT 27
21040: EQUAL
21041: IFFALSE 21051
// sAI := true ;
21043: LD_ADDR_EXP 79
21047: PUSH
21048: LD_INT 1
21050: ST_TO_ADDR
// if p3 = 28 then
21051: LD_VAR 0 3
21055: PUSH
21056: LD_INT 28
21058: EQUAL
21059: IFFALSE 21069
// sCargo := true ;
21061: LD_ADDR_EXP 82
21065: PUSH
21066: LD_INT 1
21068: ST_TO_ADDR
// if p3 = 29 then
21069: LD_VAR 0 3
21073: PUSH
21074: LD_INT 29
21076: EQUAL
21077: IFFALSE 21087
// sDLaser := true ;
21079: LD_ADDR_EXP 83
21083: PUSH
21084: LD_INT 1
21086: ST_TO_ADDR
// if p3 = 30 then
21087: LD_VAR 0 3
21091: PUSH
21092: LD_INT 30
21094: EQUAL
21095: IFFALSE 21105
// sExchange := true ;
21097: LD_ADDR_EXP 84
21101: PUSH
21102: LD_INT 1
21104: ST_TO_ADDR
// if p3 = 31 then
21105: LD_VAR 0 3
21109: PUSH
21110: LD_INT 31
21112: EQUAL
21113: IFFALSE 21123
// sFac := true ;
21115: LD_ADDR_EXP 85
21119: PUSH
21120: LD_INT 1
21122: ST_TO_ADDR
// if p3 = 32 then
21123: LD_VAR 0 3
21127: PUSH
21128: LD_INT 32
21130: EQUAL
21131: IFFALSE 21141
// sPower := true ;
21133: LD_ADDR_EXP 86
21137: PUSH
21138: LD_INT 1
21140: ST_TO_ADDR
// if p3 = 33 then
21141: LD_VAR 0 3
21145: PUSH
21146: LD_INT 33
21148: EQUAL
21149: IFFALSE 21159
// sRandom := true ;
21151: LD_ADDR_EXP 87
21155: PUSH
21156: LD_INT 1
21158: ST_TO_ADDR
// if p3 = 34 then
21159: LD_VAR 0 3
21163: PUSH
21164: LD_INT 34
21166: EQUAL
21167: IFFALSE 21177
// sShield := true ;
21169: LD_ADDR_EXP 88
21173: PUSH
21174: LD_INT 1
21176: ST_TO_ADDR
// if p3 = 35 then
21177: LD_VAR 0 3
21181: PUSH
21182: LD_INT 35
21184: EQUAL
21185: IFFALSE 21195
// sTime := true ;
21187: LD_ADDR_EXP 89
21191: PUSH
21192: LD_INT 1
21194: ST_TO_ADDR
// if p3 = 36 then
21195: LD_VAR 0 3
21199: PUSH
21200: LD_INT 36
21202: EQUAL
21203: IFFALSE 21213
// sTools := true ;
21205: LD_ADDR_EXP 90
21209: PUSH
21210: LD_INT 1
21212: ST_TO_ADDR
// if p3 = 101 then
21213: LD_VAR 0 3
21217: PUSH
21218: LD_INT 101
21220: EQUAL
21221: IFFALSE 21231
// sSold := true ;
21223: LD_ADDR_EXP 55
21227: PUSH
21228: LD_INT 1
21230: ST_TO_ADDR
// if p3 = 102 then
21231: LD_VAR 0 3
21235: PUSH
21236: LD_INT 102
21238: EQUAL
21239: IFFALSE 21249
// sDiff := true ;
21241: LD_ADDR_EXP 56
21245: PUSH
21246: LD_INT 1
21248: ST_TO_ADDR
// if p3 = 103 then
21249: LD_VAR 0 3
21253: PUSH
21254: LD_INT 103
21256: EQUAL
21257: IFFALSE 21267
// sFog := true ;
21259: LD_ADDR_EXP 59
21263: PUSH
21264: LD_INT 1
21266: ST_TO_ADDR
// if p3 = 104 then
21267: LD_VAR 0 3
21271: PUSH
21272: LD_INT 104
21274: EQUAL
21275: IFFALSE 21285
// sReset := true ;
21277: LD_ADDR_EXP 60
21281: PUSH
21282: LD_INT 1
21284: ST_TO_ADDR
// if p3 = 105 then
21285: LD_VAR 0 3
21289: PUSH
21290: LD_INT 105
21292: EQUAL
21293: IFFALSE 21303
// sSun := true ;
21295: LD_ADDR_EXP 61
21299: PUSH
21300: LD_INT 1
21302: ST_TO_ADDR
// if p3 = 106 then
21303: LD_VAR 0 3
21307: PUSH
21308: LD_INT 106
21310: EQUAL
21311: IFFALSE 21321
// sTiger := true ;
21313: LD_ADDR_EXP 57
21317: PUSH
21318: LD_INT 1
21320: ST_TO_ADDR
// if p3 = 107 then
21321: LD_VAR 0 3
21325: PUSH
21326: LD_INT 107
21328: EQUAL
21329: IFFALSE 21339
// sBomb := true ;
21331: LD_ADDR_EXP 58
21335: PUSH
21336: LD_INT 1
21338: ST_TO_ADDR
// if p3 = 108 then
21339: LD_VAR 0 3
21343: PUSH
21344: LD_INT 108
21346: EQUAL
21347: IFFALSE 21357
// sWound := true ;
21349: LD_ADDR_EXP 66
21353: PUSH
21354: LD_INT 1
21356: ST_TO_ADDR
// if p3 = 109 then
21357: LD_VAR 0 3
21361: PUSH
21362: LD_INT 109
21364: EQUAL
21365: IFFALSE 21375
// sBetray := true ;
21367: LD_ADDR_EXP 70
21371: PUSH
21372: LD_INT 1
21374: ST_TO_ADDR
// if p3 = 110 then
21375: LD_VAR 0 3
21379: PUSH
21380: LD_INT 110
21382: EQUAL
21383: IFFALSE 21393
// sContamin := true ;
21385: LD_ADDR_EXP 71
21389: PUSH
21390: LD_INT 1
21392: ST_TO_ADDR
// if p3 = 111 then
21393: LD_VAR 0 3
21397: PUSH
21398: LD_INT 111
21400: EQUAL
21401: IFFALSE 21411
// sOil := true ;
21403: LD_ADDR_EXP 73
21407: PUSH
21408: LD_INT 1
21410: ST_TO_ADDR
// if p3 = 112 then
21411: LD_VAR 0 3
21415: PUSH
21416: LD_INT 112
21418: EQUAL
21419: IFFALSE 21429
// sStu := true ;
21421: LD_ADDR_EXP 77
21425: PUSH
21426: LD_INT 1
21428: ST_TO_ADDR
// if p3 = 113 then
21429: LD_VAR 0 3
21433: PUSH
21434: LD_INT 113
21436: EQUAL
21437: IFFALSE 21447
// sBazooka := true ;
21439: LD_ADDR_EXP 80
21443: PUSH
21444: LD_INT 1
21446: ST_TO_ADDR
// if p3 = 114 then
21447: LD_VAR 0 3
21451: PUSH
21452: LD_INT 114
21454: EQUAL
21455: IFFALSE 21465
// sMortar := true ;
21457: LD_ADDR_EXP 81
21461: PUSH
21462: LD_INT 1
21464: ST_TO_ADDR
// if p3 = 115 then
21465: LD_VAR 0 3
21469: PUSH
21470: LD_INT 115
21472: EQUAL
21473: IFFALSE 21483
// sRanger := true ;
21475: LD_ADDR_EXP 91
21479: PUSH
21480: LD_INT 1
21482: ST_TO_ADDR
// if p3 = 116 then
21483: LD_VAR 0 3
21487: PUSH
21488: LD_INT 116
21490: EQUAL
21491: IFFALSE 21501
// sComputer := true ;
21493: LD_ADDR_EXP 92
21497: PUSH
21498: LD_INT 1
21500: ST_TO_ADDR
// if p3 = 117 then
21501: LD_VAR 0 3
21505: PUSH
21506: LD_INT 117
21508: EQUAL
21509: IFFALSE 21519
// s30 := true ;
21511: LD_ADDR_EXP 93
21515: PUSH
21516: LD_INT 1
21518: ST_TO_ADDR
// if p3 = 118 then
21519: LD_VAR 0 3
21523: PUSH
21524: LD_INT 118
21526: EQUAL
21527: IFFALSE 21537
// s60 := true ;
21529: LD_ADDR_EXP 94
21533: PUSH
21534: LD_INT 1
21536: ST_TO_ADDR
// end ; if p2 = hack_mode then
21537: LD_VAR 0 2
21541: PUSH
21542: LD_INT 101
21544: EQUAL
21545: IFFALSE 21673
// begin case p3 of 1 :
21547: LD_VAR 0 3
21551: PUSH
21552: LD_INT 1
21554: DOUBLE
21555: EQUAL
21556: IFTRUE 21560
21558: GO 21567
21560: POP
// hHackUnlimitedResources ; 2 :
21561: CALL 33820 0 0
21565: GO 21673
21567: LD_INT 2
21569: DOUBLE
21570: EQUAL
21571: IFTRUE 21575
21573: GO 21582
21575: POP
// hHackSetLevel10 ; 3 :
21576: CALL 33953 0 0
21580: GO 21673
21582: LD_INT 3
21584: DOUBLE
21585: EQUAL
21586: IFTRUE 21590
21588: GO 21597
21590: POP
// hHackSetLevel10YourUnits ; 4 :
21591: CALL 34038 0 0
21595: GO 21673
21597: LD_INT 4
21599: DOUBLE
21600: EQUAL
21601: IFTRUE 21605
21603: GO 21612
21605: POP
// hHackInvincible ; 5 :
21606: CALL 34486 0 0
21610: GO 21673
21612: LD_INT 5
21614: DOUBLE
21615: EQUAL
21616: IFTRUE 21620
21618: GO 21627
21620: POP
// hHackInvisible ; 6 :
21621: CALL 34597 0 0
21625: GO 21673
21627: LD_INT 6
21629: DOUBLE
21630: EQUAL
21631: IFTRUE 21635
21633: GO 21642
21635: POP
// hHackChangeYourSide ; 7 :
21636: CALL 34654 0 0
21640: GO 21673
21642: LD_INT 7
21644: DOUBLE
21645: EQUAL
21646: IFTRUE 21650
21648: GO 21657
21650: POP
// hHackChangeUnitSide ; 8 :
21651: CALL 34696 0 0
21655: GO 21673
21657: LD_INT 8
21659: DOUBLE
21660: EQUAL
21661: IFTRUE 21665
21663: GO 21672
21665: POP
// hHackFog ; end ;
21666: CALL 34797 0 0
21670: GO 21673
21672: POP
// end ; if p2 = game_save_mode then
21673: LD_VAR 0 2
21677: PUSH
21678: LD_INT 102
21680: EQUAL
21681: IFFALSE 21736
// begin if p3 = 1 then
21683: LD_VAR 0 3
21687: PUSH
21688: LD_INT 1
21690: EQUAL
21691: IFFALSE 21703
// globalGameSaveCounter := p4 ;
21693: LD_ADDR_EXP 37
21697: PUSH
21698: LD_VAR 0 4
21702: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21703: LD_VAR 0 3
21707: PUSH
21708: LD_INT 2
21710: EQUAL
21711: PUSH
21712: LD_EXP 37
21716: AND
21717: IFFALSE 21736
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21719: LD_STRING setGameSaveCounter(
21721: PUSH
21722: LD_EXP 37
21726: STR
21727: PUSH
21728: LD_STRING )
21730: STR
21731: PPUSH
21732: CALL_OW 559
// end ; end ;
21736: LD_VAR 0 7
21740: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21741: LD_INT 0
21743: PPUSH
// streamModeActive := false ;
21744: LD_ADDR_EXP 38
21748: PUSH
21749: LD_INT 0
21751: ST_TO_ADDR
// normalCounter := 36 ;
21752: LD_ADDR_EXP 39
21756: PUSH
21757: LD_INT 36
21759: ST_TO_ADDR
// hardcoreCounter := 18 ;
21760: LD_ADDR_EXP 40
21764: PUSH
21765: LD_INT 18
21767: ST_TO_ADDR
// sRocket := false ;
21768: LD_ADDR_EXP 43
21772: PUSH
21773: LD_INT 0
21775: ST_TO_ADDR
// sSpeed := false ;
21776: LD_ADDR_EXP 42
21780: PUSH
21781: LD_INT 0
21783: ST_TO_ADDR
// sEngine := false ;
21784: LD_ADDR_EXP 44
21788: PUSH
21789: LD_INT 0
21791: ST_TO_ADDR
// sSpec := false ;
21792: LD_ADDR_EXP 41
21796: PUSH
21797: LD_INT 0
21799: ST_TO_ADDR
// sLevel := false ;
21800: LD_ADDR_EXP 45
21804: PUSH
21805: LD_INT 0
21807: ST_TO_ADDR
// sArmoury := false ;
21808: LD_ADDR_EXP 46
21812: PUSH
21813: LD_INT 0
21815: ST_TO_ADDR
// sRadar := false ;
21816: LD_ADDR_EXP 47
21820: PUSH
21821: LD_INT 0
21823: ST_TO_ADDR
// sBunker := false ;
21824: LD_ADDR_EXP 48
21828: PUSH
21829: LD_INT 0
21831: ST_TO_ADDR
// sHack := false ;
21832: LD_ADDR_EXP 49
21836: PUSH
21837: LD_INT 0
21839: ST_TO_ADDR
// sFire := false ;
21840: LD_ADDR_EXP 50
21844: PUSH
21845: LD_INT 0
21847: ST_TO_ADDR
// sRefresh := false ;
21848: LD_ADDR_EXP 51
21852: PUSH
21853: LD_INT 0
21855: ST_TO_ADDR
// sExp := false ;
21856: LD_ADDR_EXP 52
21860: PUSH
21861: LD_INT 0
21863: ST_TO_ADDR
// sDepot := false ;
21864: LD_ADDR_EXP 53
21868: PUSH
21869: LD_INT 0
21871: ST_TO_ADDR
// sFlag := false ;
21872: LD_ADDR_EXP 54
21876: PUSH
21877: LD_INT 0
21879: ST_TO_ADDR
// sKamikadze := false ;
21880: LD_ADDR_EXP 62
21884: PUSH
21885: LD_INT 0
21887: ST_TO_ADDR
// sTroll := false ;
21888: LD_ADDR_EXP 63
21892: PUSH
21893: LD_INT 0
21895: ST_TO_ADDR
// sSlow := false ;
21896: LD_ADDR_EXP 64
21900: PUSH
21901: LD_INT 0
21903: ST_TO_ADDR
// sLack := false ;
21904: LD_ADDR_EXP 65
21908: PUSH
21909: LD_INT 0
21911: ST_TO_ADDR
// sTank := false ;
21912: LD_ADDR_EXP 67
21916: PUSH
21917: LD_INT 0
21919: ST_TO_ADDR
// sRemote := false ;
21920: LD_ADDR_EXP 68
21924: PUSH
21925: LD_INT 0
21927: ST_TO_ADDR
// sPowell := false ;
21928: LD_ADDR_EXP 69
21932: PUSH
21933: LD_INT 0
21935: ST_TO_ADDR
// sTeleport := false ;
21936: LD_ADDR_EXP 72
21940: PUSH
21941: LD_INT 0
21943: ST_TO_ADDR
// sOilTower := false ;
21944: LD_ADDR_EXP 74
21948: PUSH
21949: LD_INT 0
21951: ST_TO_ADDR
// sShovel := false ;
21952: LD_ADDR_EXP 75
21956: PUSH
21957: LD_INT 0
21959: ST_TO_ADDR
// sSheik := false ;
21960: LD_ADDR_EXP 76
21964: PUSH
21965: LD_INT 0
21967: ST_TO_ADDR
// sEarthquake := false ;
21968: LD_ADDR_EXP 78
21972: PUSH
21973: LD_INT 0
21975: ST_TO_ADDR
// sAI := false ;
21976: LD_ADDR_EXP 79
21980: PUSH
21981: LD_INT 0
21983: ST_TO_ADDR
// sCargo := false ;
21984: LD_ADDR_EXP 82
21988: PUSH
21989: LD_INT 0
21991: ST_TO_ADDR
// sDLaser := false ;
21992: LD_ADDR_EXP 83
21996: PUSH
21997: LD_INT 0
21999: ST_TO_ADDR
// sExchange := false ;
22000: LD_ADDR_EXP 84
22004: PUSH
22005: LD_INT 0
22007: ST_TO_ADDR
// sFac := false ;
22008: LD_ADDR_EXP 85
22012: PUSH
22013: LD_INT 0
22015: ST_TO_ADDR
// sPower := false ;
22016: LD_ADDR_EXP 86
22020: PUSH
22021: LD_INT 0
22023: ST_TO_ADDR
// sRandom := false ;
22024: LD_ADDR_EXP 87
22028: PUSH
22029: LD_INT 0
22031: ST_TO_ADDR
// sShield := false ;
22032: LD_ADDR_EXP 88
22036: PUSH
22037: LD_INT 0
22039: ST_TO_ADDR
// sTime := false ;
22040: LD_ADDR_EXP 89
22044: PUSH
22045: LD_INT 0
22047: ST_TO_ADDR
// sTools := false ;
22048: LD_ADDR_EXP 90
22052: PUSH
22053: LD_INT 0
22055: ST_TO_ADDR
// sSold := false ;
22056: LD_ADDR_EXP 55
22060: PUSH
22061: LD_INT 0
22063: ST_TO_ADDR
// sDiff := false ;
22064: LD_ADDR_EXP 56
22068: PUSH
22069: LD_INT 0
22071: ST_TO_ADDR
// sFog := false ;
22072: LD_ADDR_EXP 59
22076: PUSH
22077: LD_INT 0
22079: ST_TO_ADDR
// sReset := false ;
22080: LD_ADDR_EXP 60
22084: PUSH
22085: LD_INT 0
22087: ST_TO_ADDR
// sSun := false ;
22088: LD_ADDR_EXP 61
22092: PUSH
22093: LD_INT 0
22095: ST_TO_ADDR
// sTiger := false ;
22096: LD_ADDR_EXP 57
22100: PUSH
22101: LD_INT 0
22103: ST_TO_ADDR
// sBomb := false ;
22104: LD_ADDR_EXP 58
22108: PUSH
22109: LD_INT 0
22111: ST_TO_ADDR
// sWound := false ;
22112: LD_ADDR_EXP 66
22116: PUSH
22117: LD_INT 0
22119: ST_TO_ADDR
// sBetray := false ;
22120: LD_ADDR_EXP 70
22124: PUSH
22125: LD_INT 0
22127: ST_TO_ADDR
// sContamin := false ;
22128: LD_ADDR_EXP 71
22132: PUSH
22133: LD_INT 0
22135: ST_TO_ADDR
// sOil := false ;
22136: LD_ADDR_EXP 73
22140: PUSH
22141: LD_INT 0
22143: ST_TO_ADDR
// sStu := false ;
22144: LD_ADDR_EXP 77
22148: PUSH
22149: LD_INT 0
22151: ST_TO_ADDR
// sBazooka := false ;
22152: LD_ADDR_EXP 80
22156: PUSH
22157: LD_INT 0
22159: ST_TO_ADDR
// sMortar := false ;
22160: LD_ADDR_EXP 81
22164: PUSH
22165: LD_INT 0
22167: ST_TO_ADDR
// sRanger := false ;
22168: LD_ADDR_EXP 91
22172: PUSH
22173: LD_INT 0
22175: ST_TO_ADDR
// sComputer := false ;
22176: LD_ADDR_EXP 92
22180: PUSH
22181: LD_INT 0
22183: ST_TO_ADDR
// s30 := false ;
22184: LD_ADDR_EXP 93
22188: PUSH
22189: LD_INT 0
22191: ST_TO_ADDR
// s60 := false ;
22192: LD_ADDR_EXP 94
22196: PUSH
22197: LD_INT 0
22199: ST_TO_ADDR
// end ;
22200: LD_VAR 0 1
22204: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22205: LD_INT 0
22207: PPUSH
22208: PPUSH
22209: PPUSH
22210: PPUSH
22211: PPUSH
22212: PPUSH
22213: PPUSH
// result := [ ] ;
22214: LD_ADDR_VAR 0 2
22218: PUSH
22219: EMPTY
22220: ST_TO_ADDR
// if campaign_id = 1 then
22221: LD_OWVAR 69
22225: PUSH
22226: LD_INT 1
22228: EQUAL
22229: IFFALSE 25395
// begin case mission_number of 1 :
22231: LD_OWVAR 70
22235: PUSH
22236: LD_INT 1
22238: DOUBLE
22239: EQUAL
22240: IFTRUE 22244
22242: GO 22320
22244: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22245: LD_ADDR_VAR 0 2
22249: PUSH
22250: LD_INT 2
22252: PUSH
22253: LD_INT 4
22255: PUSH
22256: LD_INT 11
22258: PUSH
22259: LD_INT 12
22261: PUSH
22262: LD_INT 15
22264: PUSH
22265: LD_INT 16
22267: PUSH
22268: LD_INT 22
22270: PUSH
22271: LD_INT 23
22273: PUSH
22274: LD_INT 26
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 101
22290: PUSH
22291: LD_INT 102
22293: PUSH
22294: LD_INT 106
22296: PUSH
22297: LD_INT 116
22299: PUSH
22300: LD_INT 117
22302: PUSH
22303: LD_INT 118
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: ST_TO_ADDR
22318: GO 25393
22320: LD_INT 2
22322: DOUBLE
22323: EQUAL
22324: IFTRUE 22328
22326: GO 22412
22328: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22329: LD_ADDR_VAR 0 2
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: LD_INT 4
22339: PUSH
22340: LD_INT 11
22342: PUSH
22343: LD_INT 12
22345: PUSH
22346: LD_INT 15
22348: PUSH
22349: LD_INT 16
22351: PUSH
22352: LD_INT 22
22354: PUSH
22355: LD_INT 23
22357: PUSH
22358: LD_INT 26
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 101
22374: PUSH
22375: LD_INT 102
22377: PUSH
22378: LD_INT 105
22380: PUSH
22381: LD_INT 106
22383: PUSH
22384: LD_INT 108
22386: PUSH
22387: LD_INT 116
22389: PUSH
22390: LD_INT 117
22392: PUSH
22393: LD_INT 118
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: ST_TO_ADDR
22410: GO 25393
22412: LD_INT 3
22414: DOUBLE
22415: EQUAL
22416: IFTRUE 22420
22418: GO 22508
22420: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22421: LD_ADDR_VAR 0 2
22425: PUSH
22426: LD_INT 2
22428: PUSH
22429: LD_INT 4
22431: PUSH
22432: LD_INT 5
22434: PUSH
22435: LD_INT 11
22437: PUSH
22438: LD_INT 12
22440: PUSH
22441: LD_INT 15
22443: PUSH
22444: LD_INT 16
22446: PUSH
22447: LD_INT 22
22449: PUSH
22450: LD_INT 26
22452: PUSH
22453: LD_INT 36
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 101
22470: PUSH
22471: LD_INT 102
22473: PUSH
22474: LD_INT 105
22476: PUSH
22477: LD_INT 106
22479: PUSH
22480: LD_INT 108
22482: PUSH
22483: LD_INT 116
22485: PUSH
22486: LD_INT 117
22488: PUSH
22489: LD_INT 118
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: ST_TO_ADDR
22506: GO 25393
22508: LD_INT 4
22510: DOUBLE
22511: EQUAL
22512: IFTRUE 22516
22514: GO 22612
22516: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22517: LD_ADDR_VAR 0 2
22521: PUSH
22522: LD_INT 2
22524: PUSH
22525: LD_INT 4
22527: PUSH
22528: LD_INT 5
22530: PUSH
22531: LD_INT 8
22533: PUSH
22534: LD_INT 11
22536: PUSH
22537: LD_INT 12
22539: PUSH
22540: LD_INT 15
22542: PUSH
22543: LD_INT 16
22545: PUSH
22546: LD_INT 22
22548: PUSH
22549: LD_INT 23
22551: PUSH
22552: LD_INT 26
22554: PUSH
22555: LD_INT 36
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 101
22574: PUSH
22575: LD_INT 102
22577: PUSH
22578: LD_INT 105
22580: PUSH
22581: LD_INT 106
22583: PUSH
22584: LD_INT 108
22586: PUSH
22587: LD_INT 116
22589: PUSH
22590: LD_INT 117
22592: PUSH
22593: LD_INT 118
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: ST_TO_ADDR
22610: GO 25393
22612: LD_INT 5
22614: DOUBLE
22615: EQUAL
22616: IFTRUE 22620
22618: GO 22732
22620: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22621: LD_ADDR_VAR 0 2
22625: PUSH
22626: LD_INT 2
22628: PUSH
22629: LD_INT 4
22631: PUSH
22632: LD_INT 5
22634: PUSH
22635: LD_INT 6
22637: PUSH
22638: LD_INT 8
22640: PUSH
22641: LD_INT 11
22643: PUSH
22644: LD_INT 12
22646: PUSH
22647: LD_INT 15
22649: PUSH
22650: LD_INT 16
22652: PUSH
22653: LD_INT 22
22655: PUSH
22656: LD_INT 23
22658: PUSH
22659: LD_INT 25
22661: PUSH
22662: LD_INT 26
22664: PUSH
22665: LD_INT 36
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 101
22686: PUSH
22687: LD_INT 102
22689: PUSH
22690: LD_INT 105
22692: PUSH
22693: LD_INT 106
22695: PUSH
22696: LD_INT 108
22698: PUSH
22699: LD_INT 109
22701: PUSH
22702: LD_INT 112
22704: PUSH
22705: LD_INT 116
22707: PUSH
22708: LD_INT 117
22710: PUSH
22711: LD_INT 118
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: ST_TO_ADDR
22730: GO 25393
22732: LD_INT 6
22734: DOUBLE
22735: EQUAL
22736: IFTRUE 22740
22738: GO 22872
22740: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22741: LD_ADDR_VAR 0 2
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 4
22751: PUSH
22752: LD_INT 5
22754: PUSH
22755: LD_INT 6
22757: PUSH
22758: LD_INT 8
22760: PUSH
22761: LD_INT 11
22763: PUSH
22764: LD_INT 12
22766: PUSH
22767: LD_INT 15
22769: PUSH
22770: LD_INT 16
22772: PUSH
22773: LD_INT 20
22775: PUSH
22776: LD_INT 21
22778: PUSH
22779: LD_INT 22
22781: PUSH
22782: LD_INT 23
22784: PUSH
22785: LD_INT 25
22787: PUSH
22788: LD_INT 26
22790: PUSH
22791: LD_INT 30
22793: PUSH
22794: LD_INT 31
22796: PUSH
22797: LD_INT 32
22799: PUSH
22800: LD_INT 36
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 101
22826: PUSH
22827: LD_INT 102
22829: PUSH
22830: LD_INT 105
22832: PUSH
22833: LD_INT 106
22835: PUSH
22836: LD_INT 108
22838: PUSH
22839: LD_INT 109
22841: PUSH
22842: LD_INT 112
22844: PUSH
22845: LD_INT 116
22847: PUSH
22848: LD_INT 117
22850: PUSH
22851: LD_INT 118
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: ST_TO_ADDR
22870: GO 25393
22872: LD_INT 7
22874: DOUBLE
22875: EQUAL
22876: IFTRUE 22880
22878: GO 22992
22880: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22881: LD_ADDR_VAR 0 2
22885: PUSH
22886: LD_INT 2
22888: PUSH
22889: LD_INT 4
22891: PUSH
22892: LD_INT 5
22894: PUSH
22895: LD_INT 7
22897: PUSH
22898: LD_INT 11
22900: PUSH
22901: LD_INT 12
22903: PUSH
22904: LD_INT 15
22906: PUSH
22907: LD_INT 16
22909: PUSH
22910: LD_INT 20
22912: PUSH
22913: LD_INT 21
22915: PUSH
22916: LD_INT 22
22918: PUSH
22919: LD_INT 23
22921: PUSH
22922: LD_INT 25
22924: PUSH
22925: LD_INT 26
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 101
22946: PUSH
22947: LD_INT 102
22949: PUSH
22950: LD_INT 103
22952: PUSH
22953: LD_INT 105
22955: PUSH
22956: LD_INT 106
22958: PUSH
22959: LD_INT 108
22961: PUSH
22962: LD_INT 112
22964: PUSH
22965: LD_INT 116
22967: PUSH
22968: LD_INT 117
22970: PUSH
22971: LD_INT 118
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: ST_TO_ADDR
22990: GO 25393
22992: LD_INT 8
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23140
23000: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23001: LD_ADDR_VAR 0 2
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: LD_INT 4
23011: PUSH
23012: LD_INT 5
23014: PUSH
23015: LD_INT 6
23017: PUSH
23018: LD_INT 7
23020: PUSH
23021: LD_INT 8
23023: PUSH
23024: LD_INT 11
23026: PUSH
23027: LD_INT 12
23029: PUSH
23030: LD_INT 15
23032: PUSH
23033: LD_INT 16
23035: PUSH
23036: LD_INT 20
23038: PUSH
23039: LD_INT 21
23041: PUSH
23042: LD_INT 22
23044: PUSH
23045: LD_INT 23
23047: PUSH
23048: LD_INT 25
23050: PUSH
23051: LD_INT 26
23053: PUSH
23054: LD_INT 30
23056: PUSH
23057: LD_INT 31
23059: PUSH
23060: LD_INT 32
23062: PUSH
23063: LD_INT 36
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 101
23090: PUSH
23091: LD_INT 102
23093: PUSH
23094: LD_INT 103
23096: PUSH
23097: LD_INT 105
23099: PUSH
23100: LD_INT 106
23102: PUSH
23103: LD_INT 108
23105: PUSH
23106: LD_INT 109
23108: PUSH
23109: LD_INT 112
23111: PUSH
23112: LD_INT 116
23114: PUSH
23115: LD_INT 117
23117: PUSH
23118: LD_INT 118
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: ST_TO_ADDR
23138: GO 25393
23140: LD_INT 9
23142: DOUBLE
23143: EQUAL
23144: IFTRUE 23148
23146: GO 23296
23148: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23149: LD_ADDR_VAR 0 2
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: LD_INT 4
23159: PUSH
23160: LD_INT 5
23162: PUSH
23163: LD_INT 6
23165: PUSH
23166: LD_INT 7
23168: PUSH
23169: LD_INT 8
23171: PUSH
23172: LD_INT 11
23174: PUSH
23175: LD_INT 12
23177: PUSH
23178: LD_INT 15
23180: PUSH
23181: LD_INT 16
23183: PUSH
23184: LD_INT 20
23186: PUSH
23187: LD_INT 21
23189: PUSH
23190: LD_INT 22
23192: PUSH
23193: LD_INT 23
23195: PUSH
23196: LD_INT 25
23198: PUSH
23199: LD_INT 26
23201: PUSH
23202: LD_INT 28
23204: PUSH
23205: LD_INT 30
23207: PUSH
23208: LD_INT 31
23210: PUSH
23211: LD_INT 32
23213: PUSH
23214: LD_INT 36
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 101
23242: PUSH
23243: LD_INT 102
23245: PUSH
23246: LD_INT 103
23248: PUSH
23249: LD_INT 105
23251: PUSH
23252: LD_INT 106
23254: PUSH
23255: LD_INT 108
23257: PUSH
23258: LD_INT 109
23260: PUSH
23261: LD_INT 112
23263: PUSH
23264: LD_INT 114
23266: PUSH
23267: LD_INT 116
23269: PUSH
23270: LD_INT 117
23272: PUSH
23273: LD_INT 118
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: ST_TO_ADDR
23294: GO 25393
23296: LD_INT 10
23298: DOUBLE
23299: EQUAL
23300: IFTRUE 23304
23302: GO 23500
23304: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23305: LD_ADDR_VAR 0 2
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: LD_INT 4
23315: PUSH
23316: LD_INT 5
23318: PUSH
23319: LD_INT 6
23321: PUSH
23322: LD_INT 7
23324: PUSH
23325: LD_INT 8
23327: PUSH
23328: LD_INT 9
23330: PUSH
23331: LD_INT 10
23333: PUSH
23334: LD_INT 11
23336: PUSH
23337: LD_INT 12
23339: PUSH
23340: LD_INT 13
23342: PUSH
23343: LD_INT 14
23345: PUSH
23346: LD_INT 15
23348: PUSH
23349: LD_INT 16
23351: PUSH
23352: LD_INT 17
23354: PUSH
23355: LD_INT 18
23357: PUSH
23358: LD_INT 19
23360: PUSH
23361: LD_INT 20
23363: PUSH
23364: LD_INT 21
23366: PUSH
23367: LD_INT 22
23369: PUSH
23370: LD_INT 23
23372: PUSH
23373: LD_INT 24
23375: PUSH
23376: LD_INT 25
23378: PUSH
23379: LD_INT 26
23381: PUSH
23382: LD_INT 28
23384: PUSH
23385: LD_INT 30
23387: PUSH
23388: LD_INT 31
23390: PUSH
23391: LD_INT 32
23393: PUSH
23394: LD_INT 36
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 101
23430: PUSH
23431: LD_INT 102
23433: PUSH
23434: LD_INT 103
23436: PUSH
23437: LD_INT 104
23439: PUSH
23440: LD_INT 105
23442: PUSH
23443: LD_INT 106
23445: PUSH
23446: LD_INT 107
23448: PUSH
23449: LD_INT 108
23451: PUSH
23452: LD_INT 109
23454: PUSH
23455: LD_INT 110
23457: PUSH
23458: LD_INT 111
23460: PUSH
23461: LD_INT 112
23463: PUSH
23464: LD_INT 114
23466: PUSH
23467: LD_INT 116
23469: PUSH
23470: LD_INT 117
23472: PUSH
23473: LD_INT 118
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: ST_TO_ADDR
23498: GO 25393
23500: LD_INT 11
23502: DOUBLE
23503: EQUAL
23504: IFTRUE 23508
23506: GO 23712
23508: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23509: LD_ADDR_VAR 0 2
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: LD_INT 3
23519: PUSH
23520: LD_INT 4
23522: PUSH
23523: LD_INT 5
23525: PUSH
23526: LD_INT 6
23528: PUSH
23529: LD_INT 7
23531: PUSH
23532: LD_INT 8
23534: PUSH
23535: LD_INT 9
23537: PUSH
23538: LD_INT 10
23540: PUSH
23541: LD_INT 11
23543: PUSH
23544: LD_INT 12
23546: PUSH
23547: LD_INT 13
23549: PUSH
23550: LD_INT 14
23552: PUSH
23553: LD_INT 15
23555: PUSH
23556: LD_INT 16
23558: PUSH
23559: LD_INT 17
23561: PUSH
23562: LD_INT 18
23564: PUSH
23565: LD_INT 19
23567: PUSH
23568: LD_INT 20
23570: PUSH
23571: LD_INT 21
23573: PUSH
23574: LD_INT 22
23576: PUSH
23577: LD_INT 23
23579: PUSH
23580: LD_INT 24
23582: PUSH
23583: LD_INT 25
23585: PUSH
23586: LD_INT 26
23588: PUSH
23589: LD_INT 28
23591: PUSH
23592: LD_INT 30
23594: PUSH
23595: LD_INT 31
23597: PUSH
23598: LD_INT 32
23600: PUSH
23601: LD_INT 34
23603: PUSH
23604: LD_INT 36
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 101
23642: PUSH
23643: LD_INT 102
23645: PUSH
23646: LD_INT 103
23648: PUSH
23649: LD_INT 104
23651: PUSH
23652: LD_INT 105
23654: PUSH
23655: LD_INT 106
23657: PUSH
23658: LD_INT 107
23660: PUSH
23661: LD_INT 108
23663: PUSH
23664: LD_INT 109
23666: PUSH
23667: LD_INT 110
23669: PUSH
23670: LD_INT 111
23672: PUSH
23673: LD_INT 112
23675: PUSH
23676: LD_INT 114
23678: PUSH
23679: LD_INT 116
23681: PUSH
23682: LD_INT 117
23684: PUSH
23685: LD_INT 118
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: ST_TO_ADDR
23710: GO 25393
23712: LD_INT 12
23714: DOUBLE
23715: EQUAL
23716: IFTRUE 23720
23718: GO 23940
23720: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23721: LD_ADDR_VAR 0 2
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: LD_INT 2
23731: PUSH
23732: LD_INT 3
23734: PUSH
23735: LD_INT 4
23737: PUSH
23738: LD_INT 5
23740: PUSH
23741: LD_INT 6
23743: PUSH
23744: LD_INT 7
23746: PUSH
23747: LD_INT 8
23749: PUSH
23750: LD_INT 9
23752: PUSH
23753: LD_INT 10
23755: PUSH
23756: LD_INT 11
23758: PUSH
23759: LD_INT 12
23761: PUSH
23762: LD_INT 13
23764: PUSH
23765: LD_INT 14
23767: PUSH
23768: LD_INT 15
23770: PUSH
23771: LD_INT 16
23773: PUSH
23774: LD_INT 17
23776: PUSH
23777: LD_INT 18
23779: PUSH
23780: LD_INT 19
23782: PUSH
23783: LD_INT 20
23785: PUSH
23786: LD_INT 21
23788: PUSH
23789: LD_INT 22
23791: PUSH
23792: LD_INT 23
23794: PUSH
23795: LD_INT 24
23797: PUSH
23798: LD_INT 25
23800: PUSH
23801: LD_INT 26
23803: PUSH
23804: LD_INT 27
23806: PUSH
23807: LD_INT 28
23809: PUSH
23810: LD_INT 30
23812: PUSH
23813: LD_INT 31
23815: PUSH
23816: LD_INT 32
23818: PUSH
23819: LD_INT 33
23821: PUSH
23822: LD_INT 34
23824: PUSH
23825: LD_INT 36
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 101
23866: PUSH
23867: LD_INT 102
23869: PUSH
23870: LD_INT 103
23872: PUSH
23873: LD_INT 104
23875: PUSH
23876: LD_INT 105
23878: PUSH
23879: LD_INT 106
23881: PUSH
23882: LD_INT 107
23884: PUSH
23885: LD_INT 108
23887: PUSH
23888: LD_INT 109
23890: PUSH
23891: LD_INT 110
23893: PUSH
23894: LD_INT 111
23896: PUSH
23897: LD_INT 112
23899: PUSH
23900: LD_INT 113
23902: PUSH
23903: LD_INT 114
23905: PUSH
23906: LD_INT 116
23908: PUSH
23909: LD_INT 117
23911: PUSH
23912: LD_INT 118
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: ST_TO_ADDR
23938: GO 25393
23940: LD_INT 13
23942: DOUBLE
23943: EQUAL
23944: IFTRUE 23948
23946: GO 24156
23948: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23949: LD_ADDR_VAR 0 2
23953: PUSH
23954: LD_INT 1
23956: PUSH
23957: LD_INT 2
23959: PUSH
23960: LD_INT 3
23962: PUSH
23963: LD_INT 4
23965: PUSH
23966: LD_INT 5
23968: PUSH
23969: LD_INT 8
23971: PUSH
23972: LD_INT 9
23974: PUSH
23975: LD_INT 10
23977: PUSH
23978: LD_INT 11
23980: PUSH
23981: LD_INT 12
23983: PUSH
23984: LD_INT 14
23986: PUSH
23987: LD_INT 15
23989: PUSH
23990: LD_INT 16
23992: PUSH
23993: LD_INT 17
23995: PUSH
23996: LD_INT 18
23998: PUSH
23999: LD_INT 19
24001: PUSH
24002: LD_INT 20
24004: PUSH
24005: LD_INT 21
24007: PUSH
24008: LD_INT 22
24010: PUSH
24011: LD_INT 23
24013: PUSH
24014: LD_INT 24
24016: PUSH
24017: LD_INT 25
24019: PUSH
24020: LD_INT 26
24022: PUSH
24023: LD_INT 27
24025: PUSH
24026: LD_INT 28
24028: PUSH
24029: LD_INT 30
24031: PUSH
24032: LD_INT 31
24034: PUSH
24035: LD_INT 32
24037: PUSH
24038: LD_INT 33
24040: PUSH
24041: LD_INT 34
24043: PUSH
24044: LD_INT 36
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 101
24082: PUSH
24083: LD_INT 102
24085: PUSH
24086: LD_INT 103
24088: PUSH
24089: LD_INT 104
24091: PUSH
24092: LD_INT 105
24094: PUSH
24095: LD_INT 106
24097: PUSH
24098: LD_INT 107
24100: PUSH
24101: LD_INT 108
24103: PUSH
24104: LD_INT 109
24106: PUSH
24107: LD_INT 110
24109: PUSH
24110: LD_INT 111
24112: PUSH
24113: LD_INT 112
24115: PUSH
24116: LD_INT 113
24118: PUSH
24119: LD_INT 114
24121: PUSH
24122: LD_INT 116
24124: PUSH
24125: LD_INT 117
24127: PUSH
24128: LD_INT 118
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: ST_TO_ADDR
24154: GO 25393
24156: LD_INT 14
24158: DOUBLE
24159: EQUAL
24160: IFTRUE 24164
24162: GO 24388
24164: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24165: LD_ADDR_VAR 0 2
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: LD_INT 2
24175: PUSH
24176: LD_INT 3
24178: PUSH
24179: LD_INT 4
24181: PUSH
24182: LD_INT 5
24184: PUSH
24185: LD_INT 6
24187: PUSH
24188: LD_INT 7
24190: PUSH
24191: LD_INT 8
24193: PUSH
24194: LD_INT 9
24196: PUSH
24197: LD_INT 10
24199: PUSH
24200: LD_INT 11
24202: PUSH
24203: LD_INT 12
24205: PUSH
24206: LD_INT 13
24208: PUSH
24209: LD_INT 14
24211: PUSH
24212: LD_INT 15
24214: PUSH
24215: LD_INT 16
24217: PUSH
24218: LD_INT 17
24220: PUSH
24221: LD_INT 18
24223: PUSH
24224: LD_INT 19
24226: PUSH
24227: LD_INT 20
24229: PUSH
24230: LD_INT 21
24232: PUSH
24233: LD_INT 22
24235: PUSH
24236: LD_INT 23
24238: PUSH
24239: LD_INT 24
24241: PUSH
24242: LD_INT 25
24244: PUSH
24245: LD_INT 26
24247: PUSH
24248: LD_INT 27
24250: PUSH
24251: LD_INT 28
24253: PUSH
24254: LD_INT 29
24256: PUSH
24257: LD_INT 30
24259: PUSH
24260: LD_INT 31
24262: PUSH
24263: LD_INT 32
24265: PUSH
24266: LD_INT 33
24268: PUSH
24269: LD_INT 34
24271: PUSH
24272: LD_INT 36
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 101
24314: PUSH
24315: LD_INT 102
24317: PUSH
24318: LD_INT 103
24320: PUSH
24321: LD_INT 104
24323: PUSH
24324: LD_INT 105
24326: PUSH
24327: LD_INT 106
24329: PUSH
24330: LD_INT 107
24332: PUSH
24333: LD_INT 108
24335: PUSH
24336: LD_INT 109
24338: PUSH
24339: LD_INT 110
24341: PUSH
24342: LD_INT 111
24344: PUSH
24345: LD_INT 112
24347: PUSH
24348: LD_INT 113
24350: PUSH
24351: LD_INT 114
24353: PUSH
24354: LD_INT 116
24356: PUSH
24357: LD_INT 117
24359: PUSH
24360: LD_INT 118
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: ST_TO_ADDR
24386: GO 25393
24388: LD_INT 15
24390: DOUBLE
24391: EQUAL
24392: IFTRUE 24396
24394: GO 24620
24396: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24397: LD_ADDR_VAR 0 2
24401: PUSH
24402: LD_INT 1
24404: PUSH
24405: LD_INT 2
24407: PUSH
24408: LD_INT 3
24410: PUSH
24411: LD_INT 4
24413: PUSH
24414: LD_INT 5
24416: PUSH
24417: LD_INT 6
24419: PUSH
24420: LD_INT 7
24422: PUSH
24423: LD_INT 8
24425: PUSH
24426: LD_INT 9
24428: PUSH
24429: LD_INT 10
24431: PUSH
24432: LD_INT 11
24434: PUSH
24435: LD_INT 12
24437: PUSH
24438: LD_INT 13
24440: PUSH
24441: LD_INT 14
24443: PUSH
24444: LD_INT 15
24446: PUSH
24447: LD_INT 16
24449: PUSH
24450: LD_INT 17
24452: PUSH
24453: LD_INT 18
24455: PUSH
24456: LD_INT 19
24458: PUSH
24459: LD_INT 20
24461: PUSH
24462: LD_INT 21
24464: PUSH
24465: LD_INT 22
24467: PUSH
24468: LD_INT 23
24470: PUSH
24471: LD_INT 24
24473: PUSH
24474: LD_INT 25
24476: PUSH
24477: LD_INT 26
24479: PUSH
24480: LD_INT 27
24482: PUSH
24483: LD_INT 28
24485: PUSH
24486: LD_INT 29
24488: PUSH
24489: LD_INT 30
24491: PUSH
24492: LD_INT 31
24494: PUSH
24495: LD_INT 32
24497: PUSH
24498: LD_INT 33
24500: PUSH
24501: LD_INT 34
24503: PUSH
24504: LD_INT 36
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 101
24546: PUSH
24547: LD_INT 102
24549: PUSH
24550: LD_INT 103
24552: PUSH
24553: LD_INT 104
24555: PUSH
24556: LD_INT 105
24558: PUSH
24559: LD_INT 106
24561: PUSH
24562: LD_INT 107
24564: PUSH
24565: LD_INT 108
24567: PUSH
24568: LD_INT 109
24570: PUSH
24571: LD_INT 110
24573: PUSH
24574: LD_INT 111
24576: PUSH
24577: LD_INT 112
24579: PUSH
24580: LD_INT 113
24582: PUSH
24583: LD_INT 114
24585: PUSH
24586: LD_INT 116
24588: PUSH
24589: LD_INT 117
24591: PUSH
24592: LD_INT 118
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: ST_TO_ADDR
24618: GO 25393
24620: LD_INT 16
24622: DOUBLE
24623: EQUAL
24624: IFTRUE 24628
24626: GO 24764
24628: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24629: LD_ADDR_VAR 0 2
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: LD_INT 4
24639: PUSH
24640: LD_INT 5
24642: PUSH
24643: LD_INT 7
24645: PUSH
24646: LD_INT 11
24648: PUSH
24649: LD_INT 12
24651: PUSH
24652: LD_INT 15
24654: PUSH
24655: LD_INT 16
24657: PUSH
24658: LD_INT 20
24660: PUSH
24661: LD_INT 21
24663: PUSH
24664: LD_INT 22
24666: PUSH
24667: LD_INT 23
24669: PUSH
24670: LD_INT 25
24672: PUSH
24673: LD_INT 26
24675: PUSH
24676: LD_INT 30
24678: PUSH
24679: LD_INT 31
24681: PUSH
24682: LD_INT 32
24684: PUSH
24685: LD_INT 33
24687: PUSH
24688: LD_INT 34
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 101
24714: PUSH
24715: LD_INT 102
24717: PUSH
24718: LD_INT 103
24720: PUSH
24721: LD_INT 106
24723: PUSH
24724: LD_INT 108
24726: PUSH
24727: LD_INT 112
24729: PUSH
24730: LD_INT 113
24732: PUSH
24733: LD_INT 114
24735: PUSH
24736: LD_INT 116
24738: PUSH
24739: LD_INT 117
24741: PUSH
24742: LD_INT 118
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: ST_TO_ADDR
24762: GO 25393
24764: LD_INT 17
24766: DOUBLE
24767: EQUAL
24768: IFTRUE 24772
24770: GO 24996
24772: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24773: LD_ADDR_VAR 0 2
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 2
24783: PUSH
24784: LD_INT 3
24786: PUSH
24787: LD_INT 4
24789: PUSH
24790: LD_INT 5
24792: PUSH
24793: LD_INT 6
24795: PUSH
24796: LD_INT 7
24798: PUSH
24799: LD_INT 8
24801: PUSH
24802: LD_INT 9
24804: PUSH
24805: LD_INT 10
24807: PUSH
24808: LD_INT 11
24810: PUSH
24811: LD_INT 12
24813: PUSH
24814: LD_INT 13
24816: PUSH
24817: LD_INT 14
24819: PUSH
24820: LD_INT 15
24822: PUSH
24823: LD_INT 16
24825: PUSH
24826: LD_INT 17
24828: PUSH
24829: LD_INT 18
24831: PUSH
24832: LD_INT 19
24834: PUSH
24835: LD_INT 20
24837: PUSH
24838: LD_INT 21
24840: PUSH
24841: LD_INT 22
24843: PUSH
24844: LD_INT 23
24846: PUSH
24847: LD_INT 24
24849: PUSH
24850: LD_INT 25
24852: PUSH
24853: LD_INT 26
24855: PUSH
24856: LD_INT 27
24858: PUSH
24859: LD_INT 28
24861: PUSH
24862: LD_INT 29
24864: PUSH
24865: LD_INT 30
24867: PUSH
24868: LD_INT 31
24870: PUSH
24871: LD_INT 32
24873: PUSH
24874: LD_INT 33
24876: PUSH
24877: LD_INT 34
24879: PUSH
24880: LD_INT 36
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 101
24922: PUSH
24923: LD_INT 102
24925: PUSH
24926: LD_INT 103
24928: PUSH
24929: LD_INT 104
24931: PUSH
24932: LD_INT 105
24934: PUSH
24935: LD_INT 106
24937: PUSH
24938: LD_INT 107
24940: PUSH
24941: LD_INT 108
24943: PUSH
24944: LD_INT 109
24946: PUSH
24947: LD_INT 110
24949: PUSH
24950: LD_INT 111
24952: PUSH
24953: LD_INT 112
24955: PUSH
24956: LD_INT 113
24958: PUSH
24959: LD_INT 114
24961: PUSH
24962: LD_INT 116
24964: PUSH
24965: LD_INT 117
24967: PUSH
24968: LD_INT 118
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: ST_TO_ADDR
24994: GO 25393
24996: LD_INT 18
24998: DOUBLE
24999: EQUAL
25000: IFTRUE 25004
25002: GO 25152
25004: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25005: LD_ADDR_VAR 0 2
25009: PUSH
25010: LD_INT 2
25012: PUSH
25013: LD_INT 4
25015: PUSH
25016: LD_INT 5
25018: PUSH
25019: LD_INT 7
25021: PUSH
25022: LD_INT 11
25024: PUSH
25025: LD_INT 12
25027: PUSH
25028: LD_INT 15
25030: PUSH
25031: LD_INT 16
25033: PUSH
25034: LD_INT 20
25036: PUSH
25037: LD_INT 21
25039: PUSH
25040: LD_INT 22
25042: PUSH
25043: LD_INT 23
25045: PUSH
25046: LD_INT 25
25048: PUSH
25049: LD_INT 26
25051: PUSH
25052: LD_INT 30
25054: PUSH
25055: LD_INT 31
25057: PUSH
25058: LD_INT 32
25060: PUSH
25061: LD_INT 33
25063: PUSH
25064: LD_INT 34
25066: PUSH
25067: LD_INT 35
25069: PUSH
25070: LD_INT 36
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 101
25098: PUSH
25099: LD_INT 102
25101: PUSH
25102: LD_INT 103
25104: PUSH
25105: LD_INT 106
25107: PUSH
25108: LD_INT 108
25110: PUSH
25111: LD_INT 112
25113: PUSH
25114: LD_INT 113
25116: PUSH
25117: LD_INT 114
25119: PUSH
25120: LD_INT 115
25122: PUSH
25123: LD_INT 116
25125: PUSH
25126: LD_INT 117
25128: PUSH
25129: LD_INT 118
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: ST_TO_ADDR
25150: GO 25393
25152: LD_INT 19
25154: DOUBLE
25155: EQUAL
25156: IFTRUE 25160
25158: GO 25392
25160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25161: LD_ADDR_VAR 0 2
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: LD_INT 2
25171: PUSH
25172: LD_INT 3
25174: PUSH
25175: LD_INT 4
25177: PUSH
25178: LD_INT 5
25180: PUSH
25181: LD_INT 6
25183: PUSH
25184: LD_INT 7
25186: PUSH
25187: LD_INT 8
25189: PUSH
25190: LD_INT 9
25192: PUSH
25193: LD_INT 10
25195: PUSH
25196: LD_INT 11
25198: PUSH
25199: LD_INT 12
25201: PUSH
25202: LD_INT 13
25204: PUSH
25205: LD_INT 14
25207: PUSH
25208: LD_INT 15
25210: PUSH
25211: LD_INT 16
25213: PUSH
25214: LD_INT 17
25216: PUSH
25217: LD_INT 18
25219: PUSH
25220: LD_INT 19
25222: PUSH
25223: LD_INT 20
25225: PUSH
25226: LD_INT 21
25228: PUSH
25229: LD_INT 22
25231: PUSH
25232: LD_INT 23
25234: PUSH
25235: LD_INT 24
25237: PUSH
25238: LD_INT 25
25240: PUSH
25241: LD_INT 26
25243: PUSH
25244: LD_INT 27
25246: PUSH
25247: LD_INT 28
25249: PUSH
25250: LD_INT 29
25252: PUSH
25253: LD_INT 30
25255: PUSH
25256: LD_INT 31
25258: PUSH
25259: LD_INT 32
25261: PUSH
25262: LD_INT 33
25264: PUSH
25265: LD_INT 34
25267: PUSH
25268: LD_INT 35
25270: PUSH
25271: LD_INT 36
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 101
25314: PUSH
25315: LD_INT 102
25317: PUSH
25318: LD_INT 103
25320: PUSH
25321: LD_INT 104
25323: PUSH
25324: LD_INT 105
25326: PUSH
25327: LD_INT 106
25329: PUSH
25330: LD_INT 107
25332: PUSH
25333: LD_INT 108
25335: PUSH
25336: LD_INT 109
25338: PUSH
25339: LD_INT 110
25341: PUSH
25342: LD_INT 111
25344: PUSH
25345: LD_INT 112
25347: PUSH
25348: LD_INT 113
25350: PUSH
25351: LD_INT 114
25353: PUSH
25354: LD_INT 115
25356: PUSH
25357: LD_INT 116
25359: PUSH
25360: LD_INT 117
25362: PUSH
25363: LD_INT 118
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: ST_TO_ADDR
25390: GO 25393
25392: POP
// end else
25393: GO 25624
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25395: LD_ADDR_VAR 0 2
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: LD_INT 2
25405: PUSH
25406: LD_INT 3
25408: PUSH
25409: LD_INT 4
25411: PUSH
25412: LD_INT 5
25414: PUSH
25415: LD_INT 6
25417: PUSH
25418: LD_INT 7
25420: PUSH
25421: LD_INT 8
25423: PUSH
25424: LD_INT 9
25426: PUSH
25427: LD_INT 10
25429: PUSH
25430: LD_INT 11
25432: PUSH
25433: LD_INT 12
25435: PUSH
25436: LD_INT 13
25438: PUSH
25439: LD_INT 14
25441: PUSH
25442: LD_INT 15
25444: PUSH
25445: LD_INT 16
25447: PUSH
25448: LD_INT 17
25450: PUSH
25451: LD_INT 18
25453: PUSH
25454: LD_INT 19
25456: PUSH
25457: LD_INT 20
25459: PUSH
25460: LD_INT 21
25462: PUSH
25463: LD_INT 22
25465: PUSH
25466: LD_INT 23
25468: PUSH
25469: LD_INT 24
25471: PUSH
25472: LD_INT 25
25474: PUSH
25475: LD_INT 26
25477: PUSH
25478: LD_INT 27
25480: PUSH
25481: LD_INT 28
25483: PUSH
25484: LD_INT 29
25486: PUSH
25487: LD_INT 30
25489: PUSH
25490: LD_INT 31
25492: PUSH
25493: LD_INT 32
25495: PUSH
25496: LD_INT 33
25498: PUSH
25499: LD_INT 34
25501: PUSH
25502: LD_INT 35
25504: PUSH
25505: LD_INT 36
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 101
25548: PUSH
25549: LD_INT 102
25551: PUSH
25552: LD_INT 103
25554: PUSH
25555: LD_INT 104
25557: PUSH
25558: LD_INT 105
25560: PUSH
25561: LD_INT 106
25563: PUSH
25564: LD_INT 107
25566: PUSH
25567: LD_INT 108
25569: PUSH
25570: LD_INT 109
25572: PUSH
25573: LD_INT 110
25575: PUSH
25576: LD_INT 111
25578: PUSH
25579: LD_INT 112
25581: PUSH
25582: LD_INT 113
25584: PUSH
25585: LD_INT 114
25587: PUSH
25588: LD_INT 115
25590: PUSH
25591: LD_INT 116
25593: PUSH
25594: LD_INT 117
25596: PUSH
25597: LD_INT 118
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: ST_TO_ADDR
// if result then
25624: LD_VAR 0 2
25628: IFFALSE 26414
// begin normal :=  ;
25630: LD_ADDR_VAR 0 5
25634: PUSH
25635: LD_STRING 
25637: ST_TO_ADDR
// hardcore :=  ;
25638: LD_ADDR_VAR 0 6
25642: PUSH
25643: LD_STRING 
25645: ST_TO_ADDR
// active :=  ;
25646: LD_ADDR_VAR 0 7
25650: PUSH
25651: LD_STRING 
25653: ST_TO_ADDR
// for i = 1 to normalCounter do
25654: LD_ADDR_VAR 0 8
25658: PUSH
25659: DOUBLE
25660: LD_INT 1
25662: DEC
25663: ST_TO_ADDR
25664: LD_EXP 39
25668: PUSH
25669: FOR_TO
25670: IFFALSE 25771
// begin tmp := 0 ;
25672: LD_ADDR_VAR 0 3
25676: PUSH
25677: LD_STRING 0
25679: ST_TO_ADDR
// if result [ 1 ] then
25680: LD_VAR 0 2
25684: PUSH
25685: LD_INT 1
25687: ARRAY
25688: IFFALSE 25753
// if result [ 1 ] [ 1 ] = i then
25690: LD_VAR 0 2
25694: PUSH
25695: LD_INT 1
25697: ARRAY
25698: PUSH
25699: LD_INT 1
25701: ARRAY
25702: PUSH
25703: LD_VAR 0 8
25707: EQUAL
25708: IFFALSE 25753
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25710: LD_ADDR_VAR 0 2
25714: PUSH
25715: LD_VAR 0 2
25719: PPUSH
25720: LD_INT 1
25722: PPUSH
25723: LD_VAR 0 2
25727: PUSH
25728: LD_INT 1
25730: ARRAY
25731: PPUSH
25732: LD_INT 1
25734: PPUSH
25735: CALL_OW 3
25739: PPUSH
25740: CALL_OW 1
25744: ST_TO_ADDR
// tmp := 1 ;
25745: LD_ADDR_VAR 0 3
25749: PUSH
25750: LD_STRING 1
25752: ST_TO_ADDR
// end ; normal := normal & tmp ;
25753: LD_ADDR_VAR 0 5
25757: PUSH
25758: LD_VAR 0 5
25762: PUSH
25763: LD_VAR 0 3
25767: STR
25768: ST_TO_ADDR
// end ;
25769: GO 25669
25771: POP
25772: POP
// for i = 1 to hardcoreCounter do
25773: LD_ADDR_VAR 0 8
25777: PUSH
25778: DOUBLE
25779: LD_INT 1
25781: DEC
25782: ST_TO_ADDR
25783: LD_EXP 40
25787: PUSH
25788: FOR_TO
25789: IFFALSE 25894
// begin tmp := 0 ;
25791: LD_ADDR_VAR 0 3
25795: PUSH
25796: LD_STRING 0
25798: ST_TO_ADDR
// if result [ 2 ] then
25799: LD_VAR 0 2
25803: PUSH
25804: LD_INT 2
25806: ARRAY
25807: IFFALSE 25876
// if result [ 2 ] [ 1 ] = 100 + i then
25809: LD_VAR 0 2
25813: PUSH
25814: LD_INT 2
25816: ARRAY
25817: PUSH
25818: LD_INT 1
25820: ARRAY
25821: PUSH
25822: LD_INT 100
25824: PUSH
25825: LD_VAR 0 8
25829: PLUS
25830: EQUAL
25831: IFFALSE 25876
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25833: LD_ADDR_VAR 0 2
25837: PUSH
25838: LD_VAR 0 2
25842: PPUSH
25843: LD_INT 2
25845: PPUSH
25846: LD_VAR 0 2
25850: PUSH
25851: LD_INT 2
25853: ARRAY
25854: PPUSH
25855: LD_INT 1
25857: PPUSH
25858: CALL_OW 3
25862: PPUSH
25863: CALL_OW 1
25867: ST_TO_ADDR
// tmp := 1 ;
25868: LD_ADDR_VAR 0 3
25872: PUSH
25873: LD_STRING 1
25875: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25876: LD_ADDR_VAR 0 6
25880: PUSH
25881: LD_VAR 0 6
25885: PUSH
25886: LD_VAR 0 3
25890: STR
25891: ST_TO_ADDR
// end ;
25892: GO 25788
25894: POP
25895: POP
// if isGameLoad then
25896: LD_VAR 0 1
25900: IFFALSE 26375
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25902: LD_ADDR_VAR 0 4
25906: PUSH
25907: LD_EXP 43
25911: PUSH
25912: LD_EXP 42
25916: PUSH
25917: LD_EXP 44
25921: PUSH
25922: LD_EXP 41
25926: PUSH
25927: LD_EXP 45
25931: PUSH
25932: LD_EXP 46
25936: PUSH
25937: LD_EXP 47
25941: PUSH
25942: LD_EXP 48
25946: PUSH
25947: LD_EXP 49
25951: PUSH
25952: LD_EXP 50
25956: PUSH
25957: LD_EXP 51
25961: PUSH
25962: LD_EXP 52
25966: PUSH
25967: LD_EXP 53
25971: PUSH
25972: LD_EXP 54
25976: PUSH
25977: LD_EXP 62
25981: PUSH
25982: LD_EXP 63
25986: PUSH
25987: LD_EXP 64
25991: PUSH
25992: LD_EXP 65
25996: PUSH
25997: LD_EXP 67
26001: PUSH
26002: LD_EXP 68
26006: PUSH
26007: LD_EXP 69
26011: PUSH
26012: LD_EXP 72
26016: PUSH
26017: LD_EXP 74
26021: PUSH
26022: LD_EXP 75
26026: PUSH
26027: LD_EXP 76
26031: PUSH
26032: LD_EXP 78
26036: PUSH
26037: LD_EXP 79
26041: PUSH
26042: LD_EXP 82
26046: PUSH
26047: LD_EXP 83
26051: PUSH
26052: LD_EXP 84
26056: PUSH
26057: LD_EXP 85
26061: PUSH
26062: LD_EXP 86
26066: PUSH
26067: LD_EXP 87
26071: PUSH
26072: LD_EXP 88
26076: PUSH
26077: LD_EXP 89
26081: PUSH
26082: LD_EXP 90
26086: PUSH
26087: LD_EXP 55
26091: PUSH
26092: LD_EXP 56
26096: PUSH
26097: LD_EXP 59
26101: PUSH
26102: LD_EXP 60
26106: PUSH
26107: LD_EXP 61
26111: PUSH
26112: LD_EXP 57
26116: PUSH
26117: LD_EXP 58
26121: PUSH
26122: LD_EXP 66
26126: PUSH
26127: LD_EXP 70
26131: PUSH
26132: LD_EXP 71
26136: PUSH
26137: LD_EXP 73
26141: PUSH
26142: LD_EXP 77
26146: PUSH
26147: LD_EXP 80
26151: PUSH
26152: LD_EXP 81
26156: PUSH
26157: LD_EXP 91
26161: PUSH
26162: LD_EXP 92
26166: PUSH
26167: LD_EXP 93
26171: PUSH
26172: LD_EXP 94
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: ST_TO_ADDR
// tmp :=  ;
26233: LD_ADDR_VAR 0 3
26237: PUSH
26238: LD_STRING 
26240: ST_TO_ADDR
// for i = 1 to normalCounter do
26241: LD_ADDR_VAR 0 8
26245: PUSH
26246: DOUBLE
26247: LD_INT 1
26249: DEC
26250: ST_TO_ADDR
26251: LD_EXP 39
26255: PUSH
26256: FOR_TO
26257: IFFALSE 26293
// begin if flags [ i ] then
26259: LD_VAR 0 4
26263: PUSH
26264: LD_VAR 0 8
26268: ARRAY
26269: IFFALSE 26291
// tmp := tmp & i & ; ;
26271: LD_ADDR_VAR 0 3
26275: PUSH
26276: LD_VAR 0 3
26280: PUSH
26281: LD_VAR 0 8
26285: STR
26286: PUSH
26287: LD_STRING ;
26289: STR
26290: ST_TO_ADDR
// end ;
26291: GO 26256
26293: POP
26294: POP
// for i = 1 to hardcoreCounter do
26295: LD_ADDR_VAR 0 8
26299: PUSH
26300: DOUBLE
26301: LD_INT 1
26303: DEC
26304: ST_TO_ADDR
26305: LD_EXP 40
26309: PUSH
26310: FOR_TO
26311: IFFALSE 26357
// begin if flags [ normalCounter + i ] then
26313: LD_VAR 0 4
26317: PUSH
26318: LD_EXP 39
26322: PUSH
26323: LD_VAR 0 8
26327: PLUS
26328: ARRAY
26329: IFFALSE 26355
// tmp := tmp & ( 100 + i ) & ; ;
26331: LD_ADDR_VAR 0 3
26335: PUSH
26336: LD_VAR 0 3
26340: PUSH
26341: LD_INT 100
26343: PUSH
26344: LD_VAR 0 8
26348: PLUS
26349: STR
26350: PUSH
26351: LD_STRING ;
26353: STR
26354: ST_TO_ADDR
// end ;
26355: GO 26310
26357: POP
26358: POP
// if tmp then
26359: LD_VAR 0 3
26363: IFFALSE 26375
// active := tmp ;
26365: LD_ADDR_VAR 0 7
26369: PUSH
26370: LD_VAR 0 3
26374: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26375: LD_STRING getStreamItemsFromMission("
26377: PUSH
26378: LD_VAR 0 5
26382: STR
26383: PUSH
26384: LD_STRING ","
26386: STR
26387: PUSH
26388: LD_VAR 0 6
26392: STR
26393: PUSH
26394: LD_STRING ","
26396: STR
26397: PUSH
26398: LD_VAR 0 7
26402: STR
26403: PUSH
26404: LD_STRING ")
26406: STR
26407: PPUSH
26408: CALL_OW 559
// end else
26412: GO 26421
// ToLua ( getStreamItemsFromMission("","","") ) ;
26414: LD_STRING getStreamItemsFromMission("","","")
26416: PPUSH
26417: CALL_OW 559
// end ;
26421: LD_VAR 0 2
26425: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26426: LD_EXP 38
26430: PUSH
26431: LD_EXP 43
26435: AND
26436: IFFALSE 26560
26438: GO 26440
26440: DISABLE
26441: LD_INT 0
26443: PPUSH
26444: PPUSH
// begin enable ;
26445: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26446: LD_ADDR_VAR 0 2
26450: PUSH
26451: LD_INT 22
26453: PUSH
26454: LD_OWVAR 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: LD_INT 34
26468: PUSH
26469: LD_INT 7
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 34
26478: PUSH
26479: LD_INT 45
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 34
26488: PUSH
26489: LD_INT 28
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 34
26498: PUSH
26499: LD_INT 47
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PPUSH
26517: CALL_OW 69
26521: ST_TO_ADDR
// if not tmp then
26522: LD_VAR 0 2
26526: NOT
26527: IFFALSE 26531
// exit ;
26529: GO 26560
// for i in tmp do
26531: LD_ADDR_VAR 0 1
26535: PUSH
26536: LD_VAR 0 2
26540: PUSH
26541: FOR_IN
26542: IFFALSE 26558
// begin SetLives ( i , 0 ) ;
26544: LD_VAR 0 1
26548: PPUSH
26549: LD_INT 0
26551: PPUSH
26552: CALL_OW 234
// end ;
26556: GO 26541
26558: POP
26559: POP
// end ;
26560: PPOPN 2
26562: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26563: LD_EXP 38
26567: PUSH
26568: LD_EXP 44
26572: AND
26573: IFFALSE 26657
26575: GO 26577
26577: DISABLE
26578: LD_INT 0
26580: PPUSH
26581: PPUSH
// begin enable ;
26582: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26583: LD_ADDR_VAR 0 2
26587: PUSH
26588: LD_INT 22
26590: PUSH
26591: LD_OWVAR 2
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 32
26602: PUSH
26603: LD_INT 3
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PPUSH
26614: CALL_OW 69
26618: ST_TO_ADDR
// if not tmp then
26619: LD_VAR 0 2
26623: NOT
26624: IFFALSE 26628
// exit ;
26626: GO 26657
// for i in tmp do
26628: LD_ADDR_VAR 0 1
26632: PUSH
26633: LD_VAR 0 2
26637: PUSH
26638: FOR_IN
26639: IFFALSE 26655
// begin SetLives ( i , 0 ) ;
26641: LD_VAR 0 1
26645: PPUSH
26646: LD_INT 0
26648: PPUSH
26649: CALL_OW 234
// end ;
26653: GO 26638
26655: POP
26656: POP
// end ;
26657: PPOPN 2
26659: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26660: LD_EXP 38
26664: PUSH
26665: LD_EXP 41
26669: AND
26670: IFFALSE 26763
26672: GO 26674
26674: DISABLE
26675: LD_INT 0
26677: PPUSH
// begin enable ;
26678: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26679: LD_ADDR_VAR 0 1
26683: PUSH
26684: LD_INT 22
26686: PUSH
26687: LD_OWVAR 2
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: LD_INT 25
26701: PUSH
26702: LD_INT 5
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 25
26711: PUSH
26712: LD_INT 9
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 25
26721: PUSH
26722: LD_INT 8
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PPUSH
26739: CALL_OW 69
26743: PUSH
26744: FOR_IN
26745: IFFALSE 26761
// begin SetClass ( i , 1 ) ;
26747: LD_VAR 0 1
26751: PPUSH
26752: LD_INT 1
26754: PPUSH
26755: CALL_OW 336
// end ;
26759: GO 26744
26761: POP
26762: POP
// end ;
26763: PPOPN 1
26765: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26766: LD_EXP 38
26770: PUSH
26771: LD_EXP 42
26775: AND
26776: PUSH
26777: LD_OWVAR 65
26781: PUSH
26782: LD_INT 7
26784: LESS
26785: AND
26786: IFFALSE 26800
26788: GO 26790
26790: DISABLE
// begin enable ;
26791: ENABLE
// game_speed := 7 ;
26792: LD_ADDR_OWVAR 65
26796: PUSH
26797: LD_INT 7
26799: ST_TO_ADDR
// end ;
26800: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26801: LD_EXP 38
26805: PUSH
26806: LD_EXP 45
26810: AND
26811: IFFALSE 27013
26813: GO 26815
26815: DISABLE
26816: LD_INT 0
26818: PPUSH
26819: PPUSH
26820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26821: LD_ADDR_VAR 0 3
26825: PUSH
26826: LD_INT 81
26828: PUSH
26829: LD_OWVAR 2
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 21
26840: PUSH
26841: LD_INT 1
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PPUSH
26852: CALL_OW 69
26856: ST_TO_ADDR
// if not tmp then
26857: LD_VAR 0 3
26861: NOT
26862: IFFALSE 26866
// exit ;
26864: GO 27013
// if tmp > 5 then
26866: LD_VAR 0 3
26870: PUSH
26871: LD_INT 5
26873: GREATER
26874: IFFALSE 26886
// k := 5 else
26876: LD_ADDR_VAR 0 2
26880: PUSH
26881: LD_INT 5
26883: ST_TO_ADDR
26884: GO 26896
// k := tmp ;
26886: LD_ADDR_VAR 0 2
26890: PUSH
26891: LD_VAR 0 3
26895: ST_TO_ADDR
// for i := 1 to k do
26896: LD_ADDR_VAR 0 1
26900: PUSH
26901: DOUBLE
26902: LD_INT 1
26904: DEC
26905: ST_TO_ADDR
26906: LD_VAR 0 2
26910: PUSH
26911: FOR_TO
26912: IFFALSE 27011
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26914: LD_VAR 0 3
26918: PUSH
26919: LD_VAR 0 1
26923: ARRAY
26924: PPUSH
26925: LD_VAR 0 1
26929: PUSH
26930: LD_INT 4
26932: MOD
26933: PUSH
26934: LD_INT 1
26936: PLUS
26937: PPUSH
26938: CALL_OW 259
26942: PUSH
26943: LD_INT 10
26945: LESS
26946: IFFALSE 27009
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26948: LD_VAR 0 3
26952: PUSH
26953: LD_VAR 0 1
26957: ARRAY
26958: PPUSH
26959: LD_VAR 0 1
26963: PUSH
26964: LD_INT 4
26966: MOD
26967: PUSH
26968: LD_INT 1
26970: PLUS
26971: PPUSH
26972: LD_VAR 0 3
26976: PUSH
26977: LD_VAR 0 1
26981: ARRAY
26982: PPUSH
26983: LD_VAR 0 1
26987: PUSH
26988: LD_INT 4
26990: MOD
26991: PUSH
26992: LD_INT 1
26994: PLUS
26995: PPUSH
26996: CALL_OW 259
27000: PUSH
27001: LD_INT 1
27003: PLUS
27004: PPUSH
27005: CALL_OW 237
27009: GO 26911
27011: POP
27012: POP
// end ;
27013: PPOPN 3
27015: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27016: LD_EXP 38
27020: PUSH
27021: LD_EXP 46
27025: AND
27026: IFFALSE 27046
27028: GO 27030
27030: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27031: LD_INT 4
27033: PPUSH
27034: LD_OWVAR 2
27038: PPUSH
27039: LD_INT 0
27041: PPUSH
27042: CALL_OW 324
27046: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27047: LD_EXP 38
27051: PUSH
27052: LD_EXP 75
27056: AND
27057: IFFALSE 27077
27059: GO 27061
27061: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27062: LD_INT 19
27064: PPUSH
27065: LD_OWVAR 2
27069: PPUSH
27070: LD_INT 0
27072: PPUSH
27073: CALL_OW 324
27077: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27078: LD_EXP 38
27082: PUSH
27083: LD_EXP 47
27087: AND
27088: IFFALSE 27190
27090: GO 27092
27092: DISABLE
27093: LD_INT 0
27095: PPUSH
27096: PPUSH
// begin enable ;
27097: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27098: LD_ADDR_VAR 0 2
27102: PUSH
27103: LD_INT 22
27105: PUSH
27106: LD_OWVAR 2
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 2
27117: PUSH
27118: LD_INT 34
27120: PUSH
27121: LD_INT 11
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 34
27130: PUSH
27131: LD_INT 30
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: LIST
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PPUSH
27147: CALL_OW 69
27151: ST_TO_ADDR
// if not tmp then
27152: LD_VAR 0 2
27156: NOT
27157: IFFALSE 27161
// exit ;
27159: GO 27190
// for i in tmp do
27161: LD_ADDR_VAR 0 1
27165: PUSH
27166: LD_VAR 0 2
27170: PUSH
27171: FOR_IN
27172: IFFALSE 27188
// begin SetLives ( i , 0 ) ;
27174: LD_VAR 0 1
27178: PPUSH
27179: LD_INT 0
27181: PPUSH
27182: CALL_OW 234
// end ;
27186: GO 27171
27188: POP
27189: POP
// end ;
27190: PPOPN 2
27192: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27193: LD_EXP 38
27197: PUSH
27198: LD_EXP 48
27202: AND
27203: IFFALSE 27223
27205: GO 27207
27207: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27208: LD_INT 32
27210: PPUSH
27211: LD_OWVAR 2
27215: PPUSH
27216: LD_INT 0
27218: PPUSH
27219: CALL_OW 324
27223: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27224: LD_EXP 38
27228: PUSH
27229: LD_EXP 49
27233: AND
27234: IFFALSE 27415
27236: GO 27238
27238: DISABLE
27239: LD_INT 0
27241: PPUSH
27242: PPUSH
27243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27244: LD_ADDR_VAR 0 2
27248: PUSH
27249: LD_INT 22
27251: PUSH
27252: LD_OWVAR 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 33
27263: PUSH
27264: LD_INT 3
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PPUSH
27275: CALL_OW 69
27279: ST_TO_ADDR
// if not tmp then
27280: LD_VAR 0 2
27284: NOT
27285: IFFALSE 27289
// exit ;
27287: GO 27415
// side := 0 ;
27289: LD_ADDR_VAR 0 3
27293: PUSH
27294: LD_INT 0
27296: ST_TO_ADDR
// for i := 1 to 8 do
27297: LD_ADDR_VAR 0 1
27301: PUSH
27302: DOUBLE
27303: LD_INT 1
27305: DEC
27306: ST_TO_ADDR
27307: LD_INT 8
27309: PUSH
27310: FOR_TO
27311: IFFALSE 27359
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27313: LD_OWVAR 2
27317: PUSH
27318: LD_VAR 0 1
27322: NONEQUAL
27323: PUSH
27324: LD_OWVAR 2
27328: PPUSH
27329: LD_VAR 0 1
27333: PPUSH
27334: CALL_OW 81
27338: PUSH
27339: LD_INT 2
27341: EQUAL
27342: AND
27343: IFFALSE 27357
// begin side := i ;
27345: LD_ADDR_VAR 0 3
27349: PUSH
27350: LD_VAR 0 1
27354: ST_TO_ADDR
// break ;
27355: GO 27359
// end ;
27357: GO 27310
27359: POP
27360: POP
// if not side then
27361: LD_VAR 0 3
27365: NOT
27366: IFFALSE 27370
// exit ;
27368: GO 27415
// for i := 1 to tmp do
27370: LD_ADDR_VAR 0 1
27374: PUSH
27375: DOUBLE
27376: LD_INT 1
27378: DEC
27379: ST_TO_ADDR
27380: LD_VAR 0 2
27384: PUSH
27385: FOR_TO
27386: IFFALSE 27413
// if Prob ( 60 ) then
27388: LD_INT 60
27390: PPUSH
27391: CALL_OW 13
27395: IFFALSE 27411
// SetSide ( i , side ) ;
27397: LD_VAR 0 1
27401: PPUSH
27402: LD_VAR 0 3
27406: PPUSH
27407: CALL_OW 235
27411: GO 27385
27413: POP
27414: POP
// end ;
27415: PPOPN 3
27417: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27418: LD_EXP 38
27422: PUSH
27423: LD_EXP 51
27427: AND
27428: IFFALSE 27547
27430: GO 27432
27432: DISABLE
27433: LD_INT 0
27435: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27436: LD_ADDR_VAR 0 1
27440: PUSH
27441: LD_INT 22
27443: PUSH
27444: LD_OWVAR 2
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 21
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 3
27465: PUSH
27466: LD_INT 23
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: PPUSH
27485: CALL_OW 69
27489: PUSH
27490: FOR_IN
27491: IFFALSE 27545
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27493: LD_VAR 0 1
27497: PPUSH
27498: CALL_OW 257
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: LD_INT 3
27511: PUSH
27512: LD_INT 4
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: IN
27521: IFFALSE 27543
// SetClass ( un , rand ( 1 , 4 ) ) ;
27523: LD_VAR 0 1
27527: PPUSH
27528: LD_INT 1
27530: PPUSH
27531: LD_INT 4
27533: PPUSH
27534: CALL_OW 12
27538: PPUSH
27539: CALL_OW 336
27543: GO 27490
27545: POP
27546: POP
// end ;
27547: PPOPN 1
27549: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27550: LD_EXP 38
27554: PUSH
27555: LD_EXP 50
27559: AND
27560: IFFALSE 27639
27562: GO 27564
27564: DISABLE
27565: LD_INT 0
27567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27568: LD_ADDR_VAR 0 1
27572: PUSH
27573: LD_INT 22
27575: PUSH
27576: LD_OWVAR 2
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 21
27587: PUSH
27588: LD_INT 3
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PPUSH
27599: CALL_OW 69
27603: ST_TO_ADDR
// if not tmp then
27604: LD_VAR 0 1
27608: NOT
27609: IFFALSE 27613
// exit ;
27611: GO 27639
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27613: LD_VAR 0 1
27617: PUSH
27618: LD_INT 1
27620: PPUSH
27621: LD_VAR 0 1
27625: PPUSH
27626: CALL_OW 12
27630: ARRAY
27631: PPUSH
27632: LD_INT 100
27634: PPUSH
27635: CALL_OW 234
// end ;
27639: PPOPN 1
27641: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27642: LD_EXP 38
27646: PUSH
27647: LD_EXP 52
27651: AND
27652: IFFALSE 27750
27654: GO 27656
27656: DISABLE
27657: LD_INT 0
27659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27660: LD_ADDR_VAR 0 1
27664: PUSH
27665: LD_INT 22
27667: PUSH
27668: LD_OWVAR 2
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 21
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PPUSH
27691: CALL_OW 69
27695: ST_TO_ADDR
// if not tmp then
27696: LD_VAR 0 1
27700: NOT
27701: IFFALSE 27705
// exit ;
27703: GO 27750
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27705: LD_VAR 0 1
27709: PUSH
27710: LD_INT 1
27712: PPUSH
27713: LD_VAR 0 1
27717: PPUSH
27718: CALL_OW 12
27722: ARRAY
27723: PPUSH
27724: LD_INT 1
27726: PPUSH
27727: LD_INT 4
27729: PPUSH
27730: CALL_OW 12
27734: PPUSH
27735: LD_INT 3000
27737: PPUSH
27738: LD_INT 9000
27740: PPUSH
27741: CALL_OW 12
27745: PPUSH
27746: CALL_OW 492
// end ;
27750: PPOPN 1
27752: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27753: LD_EXP 38
27757: PUSH
27758: LD_EXP 53
27762: AND
27763: IFFALSE 27783
27765: GO 27767
27767: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27768: LD_INT 1
27770: PPUSH
27771: LD_OWVAR 2
27775: PPUSH
27776: LD_INT 0
27778: PPUSH
27779: CALL_OW 324
27783: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27784: LD_EXP 38
27788: PUSH
27789: LD_EXP 54
27793: AND
27794: IFFALSE 27877
27796: GO 27798
27798: DISABLE
27799: LD_INT 0
27801: PPUSH
27802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27803: LD_ADDR_VAR 0 2
27807: PUSH
27808: LD_INT 22
27810: PUSH
27811: LD_OWVAR 2
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 21
27822: PUSH
27823: LD_INT 3
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PPUSH
27834: CALL_OW 69
27838: ST_TO_ADDR
// if not tmp then
27839: LD_VAR 0 2
27843: NOT
27844: IFFALSE 27848
// exit ;
27846: GO 27877
// for i in tmp do
27848: LD_ADDR_VAR 0 1
27852: PUSH
27853: LD_VAR 0 2
27857: PUSH
27858: FOR_IN
27859: IFFALSE 27875
// SetBLevel ( i , 10 ) ;
27861: LD_VAR 0 1
27865: PPUSH
27866: LD_INT 10
27868: PPUSH
27869: CALL_OW 241
27873: GO 27858
27875: POP
27876: POP
// end ;
27877: PPOPN 2
27879: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27880: LD_EXP 38
27884: PUSH
27885: LD_EXP 55
27889: AND
27890: IFFALSE 28001
27892: GO 27894
27894: DISABLE
27895: LD_INT 0
27897: PPUSH
27898: PPUSH
27899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27900: LD_ADDR_VAR 0 3
27904: PUSH
27905: LD_INT 22
27907: PUSH
27908: LD_OWVAR 2
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 25
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PPUSH
27931: CALL_OW 69
27935: ST_TO_ADDR
// if not tmp then
27936: LD_VAR 0 3
27940: NOT
27941: IFFALSE 27945
// exit ;
27943: GO 28001
// un := tmp [ rand ( 1 , tmp ) ] ;
27945: LD_ADDR_VAR 0 2
27949: PUSH
27950: LD_VAR 0 3
27954: PUSH
27955: LD_INT 1
27957: PPUSH
27958: LD_VAR 0 3
27962: PPUSH
27963: CALL_OW 12
27967: ARRAY
27968: ST_TO_ADDR
// if Crawls ( un ) then
27969: LD_VAR 0 2
27973: PPUSH
27974: CALL_OW 318
27978: IFFALSE 27989
// ComWalk ( un ) ;
27980: LD_VAR 0 2
27984: PPUSH
27985: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27989: LD_VAR 0 2
27993: PPUSH
27994: LD_INT 5
27996: PPUSH
27997: CALL_OW 336
// end ;
28001: PPOPN 3
28003: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28004: LD_EXP 38
28008: PUSH
28009: LD_EXP 56
28013: AND
28014: PUSH
28015: LD_OWVAR 67
28019: PUSH
28020: LD_INT 4
28022: LESS
28023: AND
28024: IFFALSE 28043
28026: GO 28028
28028: DISABLE
// begin Difficulty := Difficulty + 1 ;
28029: LD_ADDR_OWVAR 67
28033: PUSH
28034: LD_OWVAR 67
28038: PUSH
28039: LD_INT 1
28041: PLUS
28042: ST_TO_ADDR
// end ;
28043: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28044: LD_EXP 38
28048: PUSH
28049: LD_EXP 57
28053: AND
28054: IFFALSE 28157
28056: GO 28058
28058: DISABLE
28059: LD_INT 0
28061: PPUSH
// begin for i := 1 to 5 do
28062: LD_ADDR_VAR 0 1
28066: PUSH
28067: DOUBLE
28068: LD_INT 1
28070: DEC
28071: ST_TO_ADDR
28072: LD_INT 5
28074: PUSH
28075: FOR_TO
28076: IFFALSE 28155
// begin uc_nation := nation_nature ;
28078: LD_ADDR_OWVAR 21
28082: PUSH
28083: LD_INT 0
28085: ST_TO_ADDR
// uc_side := 0 ;
28086: LD_ADDR_OWVAR 20
28090: PUSH
28091: LD_INT 0
28093: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28094: LD_ADDR_OWVAR 29
28098: PUSH
28099: LD_INT 12
28101: PUSH
28102: LD_INT 12
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: ST_TO_ADDR
// hc_agressivity := 20 ;
28109: LD_ADDR_OWVAR 35
28113: PUSH
28114: LD_INT 20
28116: ST_TO_ADDR
// hc_class := class_tiger ;
28117: LD_ADDR_OWVAR 28
28121: PUSH
28122: LD_INT 14
28124: ST_TO_ADDR
// hc_gallery :=  ;
28125: LD_ADDR_OWVAR 33
28129: PUSH
28130: LD_STRING 
28132: ST_TO_ADDR
// hc_name :=  ;
28133: LD_ADDR_OWVAR 26
28137: PUSH
28138: LD_STRING 
28140: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28141: CALL_OW 44
28145: PPUSH
28146: LD_INT 0
28148: PPUSH
28149: CALL_OW 51
// end ;
28153: GO 28075
28155: POP
28156: POP
// end ;
28157: PPOPN 1
28159: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28160: LD_EXP 38
28164: PUSH
28165: LD_EXP 58
28169: AND
28170: IFFALSE 28179
28172: GO 28174
28174: DISABLE
// StreamSibBomb ;
28175: CALL 28180 0 0
28179: END
// export function StreamSibBomb ; var i , x , y ; begin
28180: LD_INT 0
28182: PPUSH
28183: PPUSH
28184: PPUSH
28185: PPUSH
// result := false ;
28186: LD_ADDR_VAR 0 1
28190: PUSH
28191: LD_INT 0
28193: ST_TO_ADDR
// for i := 1 to 16 do
28194: LD_ADDR_VAR 0 2
28198: PUSH
28199: DOUBLE
28200: LD_INT 1
28202: DEC
28203: ST_TO_ADDR
28204: LD_INT 16
28206: PUSH
28207: FOR_TO
28208: IFFALSE 28407
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28210: LD_ADDR_VAR 0 3
28214: PUSH
28215: LD_INT 10
28217: PUSH
28218: LD_INT 20
28220: PUSH
28221: LD_INT 30
28223: PUSH
28224: LD_INT 40
28226: PUSH
28227: LD_INT 50
28229: PUSH
28230: LD_INT 60
28232: PUSH
28233: LD_INT 70
28235: PUSH
28236: LD_INT 80
28238: PUSH
28239: LD_INT 90
28241: PUSH
28242: LD_INT 100
28244: PUSH
28245: LD_INT 110
28247: PUSH
28248: LD_INT 120
28250: PUSH
28251: LD_INT 130
28253: PUSH
28254: LD_INT 140
28256: PUSH
28257: LD_INT 150
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PPUSH
28280: LD_INT 15
28282: PPUSH
28283: CALL_OW 12
28287: ARRAY
28288: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28289: LD_ADDR_VAR 0 4
28293: PUSH
28294: LD_INT 10
28296: PUSH
28297: LD_INT 20
28299: PUSH
28300: LD_INT 30
28302: PUSH
28303: LD_INT 40
28305: PUSH
28306: LD_INT 50
28308: PUSH
28309: LD_INT 60
28311: PUSH
28312: LD_INT 70
28314: PUSH
28315: LD_INT 80
28317: PUSH
28318: LD_INT 90
28320: PUSH
28321: LD_INT 100
28323: PUSH
28324: LD_INT 110
28326: PUSH
28327: LD_INT 120
28329: PUSH
28330: LD_INT 130
28332: PUSH
28333: LD_INT 140
28335: PUSH
28336: LD_INT 150
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: PPUSH
28359: LD_INT 15
28361: PPUSH
28362: CALL_OW 12
28366: ARRAY
28367: ST_TO_ADDR
// if ValidHex ( x , y ) then
28368: LD_VAR 0 3
28372: PPUSH
28373: LD_VAR 0 4
28377: PPUSH
28378: CALL_OW 488
28382: IFFALSE 28405
// begin result := [ x , y ] ;
28384: LD_ADDR_VAR 0 1
28388: PUSH
28389: LD_VAR 0 3
28393: PUSH
28394: LD_VAR 0 4
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: ST_TO_ADDR
// break ;
28403: GO 28407
// end ; end ;
28405: GO 28207
28407: POP
28408: POP
// if result then
28409: LD_VAR 0 1
28413: IFFALSE 28473
// begin ToLua ( playSibBomb() ) ;
28415: LD_STRING playSibBomb()
28417: PPUSH
28418: CALL_OW 559
// wait ( 0 0$14 ) ;
28422: LD_INT 490
28424: PPUSH
28425: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28429: LD_VAR 0 1
28433: PUSH
28434: LD_INT 1
28436: ARRAY
28437: PPUSH
28438: LD_VAR 0 1
28442: PUSH
28443: LD_INT 2
28445: ARRAY
28446: PPUSH
28447: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28451: LD_VAR 0 1
28455: PUSH
28456: LD_INT 1
28458: ARRAY
28459: PPUSH
28460: LD_VAR 0 1
28464: PUSH
28465: LD_INT 2
28467: ARRAY
28468: PPUSH
28469: CALL_OW 429
// end ; end ;
28473: LD_VAR 0 1
28477: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28478: LD_EXP 38
28482: PUSH
28483: LD_EXP 60
28487: AND
28488: IFFALSE 28500
28490: GO 28492
28492: DISABLE
// YouLost (  ) ;
28493: LD_STRING 
28495: PPUSH
28496: CALL_OW 104
28500: END
// every 0 0$1 trigger StreamModeActive and sFog do
28501: LD_EXP 38
28505: PUSH
28506: LD_EXP 59
28510: AND
28511: IFFALSE 28525
28513: GO 28515
28515: DISABLE
// FogOff ( your_side ) ;
28516: LD_OWVAR 2
28520: PPUSH
28521: CALL_OW 344
28525: END
// every 0 0$1 trigger StreamModeActive and sSun do
28526: LD_EXP 38
28530: PUSH
28531: LD_EXP 61
28535: AND
28536: IFFALSE 28564
28538: GO 28540
28540: DISABLE
// begin solar_recharge_percent := 0 ;
28541: LD_ADDR_OWVAR 79
28545: PUSH
28546: LD_INT 0
28548: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28549: LD_INT 10500
28551: PPUSH
28552: CALL_OW 67
// solar_recharge_percent := 100 ;
28556: LD_ADDR_OWVAR 79
28560: PUSH
28561: LD_INT 100
28563: ST_TO_ADDR
// end ;
28564: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28565: LD_EXP 38
28569: PUSH
28570: LD_EXP 62
28574: AND
28575: IFFALSE 28814
28577: GO 28579
28579: DISABLE
28580: LD_INT 0
28582: PPUSH
28583: PPUSH
28584: PPUSH
// begin tmp := [ ] ;
28585: LD_ADDR_VAR 0 3
28589: PUSH
28590: EMPTY
28591: ST_TO_ADDR
// for i := 1 to 6 do
28592: LD_ADDR_VAR 0 1
28596: PUSH
28597: DOUBLE
28598: LD_INT 1
28600: DEC
28601: ST_TO_ADDR
28602: LD_INT 6
28604: PUSH
28605: FOR_TO
28606: IFFALSE 28711
// begin uc_nation := nation_nature ;
28608: LD_ADDR_OWVAR 21
28612: PUSH
28613: LD_INT 0
28615: ST_TO_ADDR
// uc_side := 0 ;
28616: LD_ADDR_OWVAR 20
28620: PUSH
28621: LD_INT 0
28623: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28624: LD_ADDR_OWVAR 29
28628: PUSH
28629: LD_INT 12
28631: PUSH
28632: LD_INT 12
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: ST_TO_ADDR
// hc_agressivity := 20 ;
28639: LD_ADDR_OWVAR 35
28643: PUSH
28644: LD_INT 20
28646: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28647: LD_ADDR_OWVAR 28
28651: PUSH
28652: LD_INT 17
28654: ST_TO_ADDR
// hc_gallery :=  ;
28655: LD_ADDR_OWVAR 33
28659: PUSH
28660: LD_STRING 
28662: ST_TO_ADDR
// hc_name :=  ;
28663: LD_ADDR_OWVAR 26
28667: PUSH
28668: LD_STRING 
28670: ST_TO_ADDR
// un := CreateHuman ;
28671: LD_ADDR_VAR 0 2
28675: PUSH
28676: CALL_OW 44
28680: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28681: LD_VAR 0 2
28685: PPUSH
28686: LD_INT 1
28688: PPUSH
28689: CALL_OW 51
// tmp := tmp ^ un ;
28693: LD_ADDR_VAR 0 3
28697: PUSH
28698: LD_VAR 0 3
28702: PUSH
28703: LD_VAR 0 2
28707: ADD
28708: ST_TO_ADDR
// end ;
28709: GO 28605
28711: POP
28712: POP
// repeat wait ( 0 0$1 ) ;
28713: LD_INT 35
28715: PPUSH
28716: CALL_OW 67
// for un in tmp do
28720: LD_ADDR_VAR 0 2
28724: PUSH
28725: LD_VAR 0 3
28729: PUSH
28730: FOR_IN
28731: IFFALSE 28805
// begin if IsDead ( un ) then
28733: LD_VAR 0 2
28737: PPUSH
28738: CALL_OW 301
28742: IFFALSE 28762
// begin tmp := tmp diff un ;
28744: LD_ADDR_VAR 0 3
28748: PUSH
28749: LD_VAR 0 3
28753: PUSH
28754: LD_VAR 0 2
28758: DIFF
28759: ST_TO_ADDR
// continue ;
28760: GO 28730
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28762: LD_VAR 0 2
28766: PPUSH
28767: LD_INT 3
28769: PUSH
28770: LD_INT 22
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PPUSH
28784: CALL_OW 69
28788: PPUSH
28789: LD_VAR 0 2
28793: PPUSH
28794: CALL_OW 74
28798: PPUSH
28799: CALL_OW 115
// end ;
28803: GO 28730
28805: POP
28806: POP
// until not tmp ;
28807: LD_VAR 0 3
28811: NOT
28812: IFFALSE 28713
// end ;
28814: PPOPN 3
28816: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28817: LD_EXP 38
28821: PUSH
28822: LD_EXP 63
28826: AND
28827: IFFALSE 28881
28829: GO 28831
28831: DISABLE
// begin ToLua ( displayTroll(); ) ;
28832: LD_STRING displayTroll();
28834: PPUSH
28835: CALL_OW 559
// wait ( 3 3$00 ) ;
28839: LD_INT 6300
28841: PPUSH
28842: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28846: LD_STRING hideTroll();
28848: PPUSH
28849: CALL_OW 559
// wait ( 1 1$00 ) ;
28853: LD_INT 2100
28855: PPUSH
28856: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28860: LD_STRING displayTroll();
28862: PPUSH
28863: CALL_OW 559
// wait ( 1 1$00 ) ;
28867: LD_INT 2100
28869: PPUSH
28870: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28874: LD_STRING hideTroll();
28876: PPUSH
28877: CALL_OW 559
// end ;
28881: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28882: LD_EXP 38
28886: PUSH
28887: LD_EXP 64
28891: AND
28892: IFFALSE 28955
28894: GO 28896
28896: DISABLE
28897: LD_INT 0
28899: PPUSH
// begin p := 0 ;
28900: LD_ADDR_VAR 0 1
28904: PUSH
28905: LD_INT 0
28907: ST_TO_ADDR
// repeat game_speed := 1 ;
28908: LD_ADDR_OWVAR 65
28912: PUSH
28913: LD_INT 1
28915: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28916: LD_INT 35
28918: PPUSH
28919: CALL_OW 67
// p := p + 1 ;
28923: LD_ADDR_VAR 0 1
28927: PUSH
28928: LD_VAR 0 1
28932: PUSH
28933: LD_INT 1
28935: PLUS
28936: ST_TO_ADDR
// until p >= 60 ;
28937: LD_VAR 0 1
28941: PUSH
28942: LD_INT 60
28944: GREATEREQUAL
28945: IFFALSE 28908
// game_speed := 4 ;
28947: LD_ADDR_OWVAR 65
28951: PUSH
28952: LD_INT 4
28954: ST_TO_ADDR
// end ;
28955: PPOPN 1
28957: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28958: LD_EXP 38
28962: PUSH
28963: LD_EXP 65
28967: AND
28968: IFFALSE 29114
28970: GO 28972
28972: DISABLE
28973: LD_INT 0
28975: PPUSH
28976: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28977: LD_ADDR_VAR 0 1
28981: PUSH
28982: LD_INT 22
28984: PUSH
28985: LD_OWVAR 2
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 2
28996: PUSH
28997: LD_INT 30
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 30
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PPUSH
29026: CALL_OW 69
29030: ST_TO_ADDR
// if not depot then
29031: LD_VAR 0 1
29035: NOT
29036: IFFALSE 29040
// exit ;
29038: GO 29114
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29040: LD_ADDR_VAR 0 2
29044: PUSH
29045: LD_VAR 0 1
29049: PUSH
29050: LD_INT 1
29052: PPUSH
29053: LD_VAR 0 1
29057: PPUSH
29058: CALL_OW 12
29062: ARRAY
29063: PPUSH
29064: CALL_OW 274
29068: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29069: LD_VAR 0 2
29073: PPUSH
29074: LD_INT 1
29076: PPUSH
29077: LD_INT 0
29079: PPUSH
29080: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29084: LD_VAR 0 2
29088: PPUSH
29089: LD_INT 2
29091: PPUSH
29092: LD_INT 0
29094: PPUSH
29095: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29099: LD_VAR 0 2
29103: PPUSH
29104: LD_INT 3
29106: PPUSH
29107: LD_INT 0
29109: PPUSH
29110: CALL_OW 277
// end ;
29114: PPOPN 2
29116: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29117: LD_EXP 38
29121: PUSH
29122: LD_EXP 66
29126: AND
29127: IFFALSE 29224
29129: GO 29131
29131: DISABLE
29132: LD_INT 0
29134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29135: LD_ADDR_VAR 0 1
29139: PUSH
29140: LD_INT 22
29142: PUSH
29143: LD_OWVAR 2
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 21
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 3
29164: PUSH
29165: LD_INT 23
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: LIST
29183: PPUSH
29184: CALL_OW 69
29188: ST_TO_ADDR
// if not tmp then
29189: LD_VAR 0 1
29193: NOT
29194: IFFALSE 29198
// exit ;
29196: GO 29224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29198: LD_VAR 0 1
29202: PUSH
29203: LD_INT 1
29205: PPUSH
29206: LD_VAR 0 1
29210: PPUSH
29211: CALL_OW 12
29215: ARRAY
29216: PPUSH
29217: LD_INT 200
29219: PPUSH
29220: CALL_OW 234
// end ;
29224: PPOPN 1
29226: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29227: LD_EXP 38
29231: PUSH
29232: LD_EXP 67
29236: AND
29237: IFFALSE 29316
29239: GO 29241
29241: DISABLE
29242: LD_INT 0
29244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29245: LD_ADDR_VAR 0 1
29249: PUSH
29250: LD_INT 22
29252: PUSH
29253: LD_OWVAR 2
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 21
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PPUSH
29276: CALL_OW 69
29280: ST_TO_ADDR
// if not tmp then
29281: LD_VAR 0 1
29285: NOT
29286: IFFALSE 29290
// exit ;
29288: GO 29316
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29290: LD_VAR 0 1
29294: PUSH
29295: LD_INT 1
29297: PPUSH
29298: LD_VAR 0 1
29302: PPUSH
29303: CALL_OW 12
29307: ARRAY
29308: PPUSH
29309: LD_INT 60
29311: PPUSH
29312: CALL_OW 234
// end ;
29316: PPOPN 1
29318: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29319: LD_EXP 38
29323: PUSH
29324: LD_EXP 68
29328: AND
29329: IFFALSE 29428
29331: GO 29333
29333: DISABLE
29334: LD_INT 0
29336: PPUSH
29337: PPUSH
// begin enable ;
29338: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29339: LD_ADDR_VAR 0 1
29343: PUSH
29344: LD_INT 22
29346: PUSH
29347: LD_OWVAR 2
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 61
29358: PUSH
29359: EMPTY
29360: LIST
29361: PUSH
29362: LD_INT 33
29364: PUSH
29365: LD_INT 2
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: PPUSH
29377: CALL_OW 69
29381: ST_TO_ADDR
// if not tmp then
29382: LD_VAR 0 1
29386: NOT
29387: IFFALSE 29391
// exit ;
29389: GO 29428
// for i in tmp do
29391: LD_ADDR_VAR 0 2
29395: PUSH
29396: LD_VAR 0 1
29400: PUSH
29401: FOR_IN
29402: IFFALSE 29426
// if IsControledBy ( i ) then
29404: LD_VAR 0 2
29408: PPUSH
29409: CALL_OW 312
29413: IFFALSE 29424
// ComUnlink ( i ) ;
29415: LD_VAR 0 2
29419: PPUSH
29420: CALL_OW 136
29424: GO 29401
29426: POP
29427: POP
// end ;
29428: PPOPN 2
29430: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29431: LD_EXP 38
29435: PUSH
29436: LD_EXP 69
29440: AND
29441: IFFALSE 29581
29443: GO 29445
29445: DISABLE
29446: LD_INT 0
29448: PPUSH
29449: PPUSH
// begin ToLua ( displayPowell(); ) ;
29450: LD_STRING displayPowell();
29452: PPUSH
29453: CALL_OW 559
// uc_side := 0 ;
29457: LD_ADDR_OWVAR 20
29461: PUSH
29462: LD_INT 0
29464: ST_TO_ADDR
// uc_nation := 2 ;
29465: LD_ADDR_OWVAR 21
29469: PUSH
29470: LD_INT 2
29472: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29473: LD_ADDR_OWVAR 37
29477: PUSH
29478: LD_INT 14
29480: ST_TO_ADDR
// vc_engine := engine_siberite ;
29481: LD_ADDR_OWVAR 39
29485: PUSH
29486: LD_INT 3
29488: ST_TO_ADDR
// vc_control := control_apeman ;
29489: LD_ADDR_OWVAR 38
29493: PUSH
29494: LD_INT 5
29496: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29497: LD_ADDR_OWVAR 40
29501: PUSH
29502: LD_INT 29
29504: ST_TO_ADDR
// un := CreateVehicle ;
29505: LD_ADDR_VAR 0 2
29509: PUSH
29510: CALL_OW 45
29514: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29515: LD_VAR 0 2
29519: PPUSH
29520: LD_INT 1
29522: PPUSH
29523: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29527: LD_INT 35
29529: PPUSH
29530: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29534: LD_VAR 0 2
29538: PPUSH
29539: LD_INT 22
29541: PUSH
29542: LD_OWVAR 2
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PPUSH
29551: CALL_OW 69
29555: PPUSH
29556: LD_VAR 0 2
29560: PPUSH
29561: CALL_OW 74
29565: PPUSH
29566: CALL_OW 115
// until IsDead ( un ) ;
29570: LD_VAR 0 2
29574: PPUSH
29575: CALL_OW 301
29579: IFFALSE 29527
// end ;
29581: PPOPN 2
29583: END
// every 0 0$1 trigger StreamModeActive and sStu do
29584: LD_EXP 38
29588: PUSH
29589: LD_EXP 77
29593: AND
29594: IFFALSE 29610
29596: GO 29598
29598: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29599: LD_STRING displayStucuk();
29601: PPUSH
29602: CALL_OW 559
// ResetFog ;
29606: CALL_OW 335
// end ;
29610: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29611: LD_EXP 38
29615: PUSH
29616: LD_EXP 70
29620: AND
29621: IFFALSE 29762
29623: GO 29625
29625: DISABLE
29626: LD_INT 0
29628: PPUSH
29629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29630: LD_ADDR_VAR 0 2
29634: PUSH
29635: LD_INT 22
29637: PUSH
29638: LD_OWVAR 2
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 21
29649: PUSH
29650: LD_INT 1
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PPUSH
29661: CALL_OW 69
29665: ST_TO_ADDR
// if not tmp then
29666: LD_VAR 0 2
29670: NOT
29671: IFFALSE 29675
// exit ;
29673: GO 29762
// un := tmp [ rand ( 1 , tmp ) ] ;
29675: LD_ADDR_VAR 0 1
29679: PUSH
29680: LD_VAR 0 2
29684: PUSH
29685: LD_INT 1
29687: PPUSH
29688: LD_VAR 0 2
29692: PPUSH
29693: CALL_OW 12
29697: ARRAY
29698: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29699: LD_VAR 0 1
29703: PPUSH
29704: LD_INT 0
29706: PPUSH
29707: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29711: LD_VAR 0 1
29715: PPUSH
29716: LD_OWVAR 3
29720: PUSH
29721: LD_VAR 0 1
29725: DIFF
29726: PPUSH
29727: LD_VAR 0 1
29731: PPUSH
29732: CALL_OW 74
29736: PPUSH
29737: CALL_OW 115
// wait ( 0 0$20 ) ;
29741: LD_INT 700
29743: PPUSH
29744: CALL_OW 67
// SetSide ( un , your_side ) ;
29748: LD_VAR 0 1
29752: PPUSH
29753: LD_OWVAR 2
29757: PPUSH
29758: CALL_OW 235
// end ;
29762: PPOPN 2
29764: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29765: LD_EXP 38
29769: PUSH
29770: LD_EXP 71
29774: AND
29775: IFFALSE 29881
29777: GO 29779
29779: DISABLE
29780: LD_INT 0
29782: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29783: LD_ADDR_VAR 0 1
29787: PUSH
29788: LD_INT 22
29790: PUSH
29791: LD_OWVAR 2
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 2
29802: PUSH
29803: LD_INT 30
29805: PUSH
29806: LD_INT 0
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 30
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PPUSH
29832: CALL_OW 69
29836: ST_TO_ADDR
// if not depot then
29837: LD_VAR 0 1
29841: NOT
29842: IFFALSE 29846
// exit ;
29844: GO 29881
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29846: LD_VAR 0 1
29850: PUSH
29851: LD_INT 1
29853: ARRAY
29854: PPUSH
29855: CALL_OW 250
29859: PPUSH
29860: LD_VAR 0 1
29864: PUSH
29865: LD_INT 1
29867: ARRAY
29868: PPUSH
29869: CALL_OW 251
29873: PPUSH
29874: LD_INT 70
29876: PPUSH
29877: CALL_OW 495
// end ;
29881: PPOPN 1
29883: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29884: LD_EXP 38
29888: PUSH
29889: LD_EXP 72
29893: AND
29894: IFFALSE 30105
29896: GO 29898
29898: DISABLE
29899: LD_INT 0
29901: PPUSH
29902: PPUSH
29903: PPUSH
29904: PPUSH
29905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29906: LD_ADDR_VAR 0 5
29910: PUSH
29911: LD_INT 22
29913: PUSH
29914: LD_OWVAR 2
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 21
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PPUSH
29937: CALL_OW 69
29941: ST_TO_ADDR
// if not tmp then
29942: LD_VAR 0 5
29946: NOT
29947: IFFALSE 29951
// exit ;
29949: GO 30105
// for i in tmp do
29951: LD_ADDR_VAR 0 1
29955: PUSH
29956: LD_VAR 0 5
29960: PUSH
29961: FOR_IN
29962: IFFALSE 30103
// begin d := rand ( 0 , 5 ) ;
29964: LD_ADDR_VAR 0 4
29968: PUSH
29969: LD_INT 0
29971: PPUSH
29972: LD_INT 5
29974: PPUSH
29975: CALL_OW 12
29979: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29980: LD_ADDR_VAR 0 2
29984: PUSH
29985: LD_VAR 0 1
29989: PPUSH
29990: CALL_OW 250
29994: PPUSH
29995: LD_VAR 0 4
29999: PPUSH
30000: LD_INT 3
30002: PPUSH
30003: LD_INT 12
30005: PPUSH
30006: CALL_OW 12
30010: PPUSH
30011: CALL_OW 272
30015: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30016: LD_ADDR_VAR 0 3
30020: PUSH
30021: LD_VAR 0 1
30025: PPUSH
30026: CALL_OW 251
30030: PPUSH
30031: LD_VAR 0 4
30035: PPUSH
30036: LD_INT 3
30038: PPUSH
30039: LD_INT 12
30041: PPUSH
30042: CALL_OW 12
30046: PPUSH
30047: CALL_OW 273
30051: ST_TO_ADDR
// if ValidHex ( x , y ) then
30052: LD_VAR 0 2
30056: PPUSH
30057: LD_VAR 0 3
30061: PPUSH
30062: CALL_OW 488
30066: IFFALSE 30101
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30068: LD_VAR 0 1
30072: PPUSH
30073: LD_VAR 0 2
30077: PPUSH
30078: LD_VAR 0 3
30082: PPUSH
30083: LD_INT 3
30085: PPUSH
30086: LD_INT 6
30088: PPUSH
30089: CALL_OW 12
30093: PPUSH
30094: LD_INT 1
30096: PPUSH
30097: CALL_OW 483
// end ;
30101: GO 29961
30103: POP
30104: POP
// end ;
30105: PPOPN 5
30107: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30108: LD_EXP 38
30112: PUSH
30113: LD_EXP 73
30117: AND
30118: IFFALSE 30212
30120: GO 30122
30122: DISABLE
30123: LD_INT 0
30125: PPUSH
30126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30127: LD_ADDR_VAR 0 2
30131: PUSH
30132: LD_INT 22
30134: PUSH
30135: LD_OWVAR 2
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 32
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 21
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: LIST
30168: PPUSH
30169: CALL_OW 69
30173: ST_TO_ADDR
// if not tmp then
30174: LD_VAR 0 2
30178: NOT
30179: IFFALSE 30183
// exit ;
30181: GO 30212
// for i in tmp do
30183: LD_ADDR_VAR 0 1
30187: PUSH
30188: LD_VAR 0 2
30192: PUSH
30193: FOR_IN
30194: IFFALSE 30210
// SetFuel ( i , 0 ) ;
30196: LD_VAR 0 1
30200: PPUSH
30201: LD_INT 0
30203: PPUSH
30204: CALL_OW 240
30208: GO 30193
30210: POP
30211: POP
// end ;
30212: PPOPN 2
30214: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30215: LD_EXP 38
30219: PUSH
30220: LD_EXP 74
30224: AND
30225: IFFALSE 30291
30227: GO 30229
30229: DISABLE
30230: LD_INT 0
30232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30233: LD_ADDR_VAR 0 1
30237: PUSH
30238: LD_INT 22
30240: PUSH
30241: LD_OWVAR 2
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 30
30252: PUSH
30253: LD_INT 29
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PPUSH
30264: CALL_OW 69
30268: ST_TO_ADDR
// if not tmp then
30269: LD_VAR 0 1
30273: NOT
30274: IFFALSE 30278
// exit ;
30276: GO 30291
// DestroyUnit ( tmp [ 1 ] ) ;
30278: LD_VAR 0 1
30282: PUSH
30283: LD_INT 1
30285: ARRAY
30286: PPUSH
30287: CALL_OW 65
// end ;
30291: PPOPN 1
30293: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30294: LD_EXP 38
30298: PUSH
30299: LD_EXP 76
30303: AND
30304: IFFALSE 30433
30306: GO 30308
30308: DISABLE
30309: LD_INT 0
30311: PPUSH
// begin uc_side := 0 ;
30312: LD_ADDR_OWVAR 20
30316: PUSH
30317: LD_INT 0
30319: ST_TO_ADDR
// uc_nation := nation_arabian ;
30320: LD_ADDR_OWVAR 21
30324: PUSH
30325: LD_INT 2
30327: ST_TO_ADDR
// hc_gallery :=  ;
30328: LD_ADDR_OWVAR 33
30332: PUSH
30333: LD_STRING 
30335: ST_TO_ADDR
// hc_name :=  ;
30336: LD_ADDR_OWVAR 26
30340: PUSH
30341: LD_STRING 
30343: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30344: LD_INT 1
30346: PPUSH
30347: LD_INT 11
30349: PPUSH
30350: LD_INT 10
30352: PPUSH
30353: CALL_OW 380
// un := CreateHuman ;
30357: LD_ADDR_VAR 0 1
30361: PUSH
30362: CALL_OW 44
30366: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30367: LD_VAR 0 1
30371: PPUSH
30372: LD_INT 1
30374: PPUSH
30375: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30379: LD_INT 35
30381: PPUSH
30382: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30386: LD_VAR 0 1
30390: PPUSH
30391: LD_INT 22
30393: PUSH
30394: LD_OWVAR 2
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PPUSH
30403: CALL_OW 69
30407: PPUSH
30408: LD_VAR 0 1
30412: PPUSH
30413: CALL_OW 74
30417: PPUSH
30418: CALL_OW 115
// until IsDead ( un ) ;
30422: LD_VAR 0 1
30426: PPUSH
30427: CALL_OW 301
30431: IFFALSE 30379
// end ;
30433: PPOPN 1
30435: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30436: LD_EXP 38
30440: PUSH
30441: LD_EXP 78
30445: AND
30446: IFFALSE 30458
30448: GO 30450
30450: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30451: LD_STRING earthquake(getX(game), 0, 32)
30453: PPUSH
30454: CALL_OW 559
30458: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30459: LD_EXP 38
30463: PUSH
30464: LD_EXP 79
30468: AND
30469: IFFALSE 30560
30471: GO 30473
30473: DISABLE
30474: LD_INT 0
30476: PPUSH
// begin enable ;
30477: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30478: LD_ADDR_VAR 0 1
30482: PUSH
30483: LD_INT 22
30485: PUSH
30486: LD_OWVAR 2
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 21
30497: PUSH
30498: LD_INT 2
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 33
30507: PUSH
30508: LD_INT 3
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: PPUSH
30520: CALL_OW 69
30524: ST_TO_ADDR
// if not tmp then
30525: LD_VAR 0 1
30529: NOT
30530: IFFALSE 30534
// exit ;
30532: GO 30560
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30534: LD_VAR 0 1
30538: PUSH
30539: LD_INT 1
30541: PPUSH
30542: LD_VAR 0 1
30546: PPUSH
30547: CALL_OW 12
30551: ARRAY
30552: PPUSH
30553: LD_INT 1
30555: PPUSH
30556: CALL_OW 234
// end ;
30560: PPOPN 1
30562: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30563: LD_EXP 38
30567: PUSH
30568: LD_EXP 80
30572: AND
30573: IFFALSE 30714
30575: GO 30577
30577: DISABLE
30578: LD_INT 0
30580: PPUSH
30581: PPUSH
30582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30583: LD_ADDR_VAR 0 3
30587: PUSH
30588: LD_INT 22
30590: PUSH
30591: LD_OWVAR 2
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 25
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PPUSH
30614: CALL_OW 69
30618: ST_TO_ADDR
// if not tmp then
30619: LD_VAR 0 3
30623: NOT
30624: IFFALSE 30628
// exit ;
30626: GO 30714
// un := tmp [ rand ( 1 , tmp ) ] ;
30628: LD_ADDR_VAR 0 2
30632: PUSH
30633: LD_VAR 0 3
30637: PUSH
30638: LD_INT 1
30640: PPUSH
30641: LD_VAR 0 3
30645: PPUSH
30646: CALL_OW 12
30650: ARRAY
30651: ST_TO_ADDR
// if Crawls ( un ) then
30652: LD_VAR 0 2
30656: PPUSH
30657: CALL_OW 318
30661: IFFALSE 30672
// ComWalk ( un ) ;
30663: LD_VAR 0 2
30667: PPUSH
30668: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30672: LD_VAR 0 2
30676: PPUSH
30677: LD_INT 9
30679: PPUSH
30680: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30684: LD_INT 28
30686: PPUSH
30687: LD_OWVAR 2
30691: PPUSH
30692: LD_INT 2
30694: PPUSH
30695: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30699: LD_INT 29
30701: PPUSH
30702: LD_OWVAR 2
30706: PPUSH
30707: LD_INT 2
30709: PPUSH
30710: CALL_OW 322
// end ;
30714: PPOPN 3
30716: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30717: LD_EXP 38
30721: PUSH
30722: LD_EXP 81
30726: AND
30727: IFFALSE 30838
30729: GO 30731
30731: DISABLE
30732: LD_INT 0
30734: PPUSH
30735: PPUSH
30736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30737: LD_ADDR_VAR 0 3
30741: PUSH
30742: LD_INT 22
30744: PUSH
30745: LD_OWVAR 2
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 25
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PPUSH
30768: CALL_OW 69
30772: ST_TO_ADDR
// if not tmp then
30773: LD_VAR 0 3
30777: NOT
30778: IFFALSE 30782
// exit ;
30780: GO 30838
// un := tmp [ rand ( 1 , tmp ) ] ;
30782: LD_ADDR_VAR 0 2
30786: PUSH
30787: LD_VAR 0 3
30791: PUSH
30792: LD_INT 1
30794: PPUSH
30795: LD_VAR 0 3
30799: PPUSH
30800: CALL_OW 12
30804: ARRAY
30805: ST_TO_ADDR
// if Crawls ( un ) then
30806: LD_VAR 0 2
30810: PPUSH
30811: CALL_OW 318
30815: IFFALSE 30826
// ComWalk ( un ) ;
30817: LD_VAR 0 2
30821: PPUSH
30822: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30826: LD_VAR 0 2
30830: PPUSH
30831: LD_INT 8
30833: PPUSH
30834: CALL_OW 336
// end ;
30838: PPOPN 3
30840: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30841: LD_EXP 38
30845: PUSH
30846: LD_EXP 82
30850: AND
30851: IFFALSE 30995
30853: GO 30855
30855: DISABLE
30856: LD_INT 0
30858: PPUSH
30859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30860: LD_ADDR_VAR 0 2
30864: PUSH
30865: LD_INT 22
30867: PUSH
30868: LD_OWVAR 2
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 21
30879: PUSH
30880: LD_INT 2
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: LD_INT 34
30892: PUSH
30893: LD_INT 12
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 34
30902: PUSH
30903: LD_INT 51
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 34
30912: PUSH
30913: LD_INT 32
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: LIST
30930: PPUSH
30931: CALL_OW 69
30935: ST_TO_ADDR
// if not tmp then
30936: LD_VAR 0 2
30940: NOT
30941: IFFALSE 30945
// exit ;
30943: GO 30995
// for i in tmp do
30945: LD_ADDR_VAR 0 1
30949: PUSH
30950: LD_VAR 0 2
30954: PUSH
30955: FOR_IN
30956: IFFALSE 30993
// if GetCargo ( i , mat_artifact ) = 0 then
30958: LD_VAR 0 1
30962: PPUSH
30963: LD_INT 4
30965: PPUSH
30966: CALL_OW 289
30970: PUSH
30971: LD_INT 0
30973: EQUAL
30974: IFFALSE 30991
// SetCargo ( i , mat_siberit , 100 ) ;
30976: LD_VAR 0 1
30980: PPUSH
30981: LD_INT 3
30983: PPUSH
30984: LD_INT 100
30986: PPUSH
30987: CALL_OW 290
30991: GO 30955
30993: POP
30994: POP
// end ;
30995: PPOPN 2
30997: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30998: LD_EXP 38
31002: PUSH
31003: LD_EXP 83
31007: AND
31008: IFFALSE 31191
31010: GO 31012
31012: DISABLE
31013: LD_INT 0
31015: PPUSH
31016: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31017: LD_ADDR_VAR 0 2
31021: PUSH
31022: LD_INT 22
31024: PUSH
31025: LD_OWVAR 2
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PPUSH
31034: CALL_OW 69
31038: ST_TO_ADDR
// if not tmp then
31039: LD_VAR 0 2
31043: NOT
31044: IFFALSE 31048
// exit ;
31046: GO 31191
// for i := 1 to 2 do
31048: LD_ADDR_VAR 0 1
31052: PUSH
31053: DOUBLE
31054: LD_INT 1
31056: DEC
31057: ST_TO_ADDR
31058: LD_INT 2
31060: PUSH
31061: FOR_TO
31062: IFFALSE 31189
// begin uc_side := your_side ;
31064: LD_ADDR_OWVAR 20
31068: PUSH
31069: LD_OWVAR 2
31073: ST_TO_ADDR
// uc_nation := nation_american ;
31074: LD_ADDR_OWVAR 21
31078: PUSH
31079: LD_INT 1
31081: ST_TO_ADDR
// vc_chassis := us_morphling ;
31082: LD_ADDR_OWVAR 37
31086: PUSH
31087: LD_INT 5
31089: ST_TO_ADDR
// vc_engine := engine_siberite ;
31090: LD_ADDR_OWVAR 39
31094: PUSH
31095: LD_INT 3
31097: ST_TO_ADDR
// vc_control := control_computer ;
31098: LD_ADDR_OWVAR 38
31102: PUSH
31103: LD_INT 3
31105: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31106: LD_ADDR_OWVAR 40
31110: PUSH
31111: LD_INT 10
31113: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31114: LD_VAR 0 2
31118: PUSH
31119: LD_INT 1
31121: ARRAY
31122: PPUSH
31123: CALL_OW 310
31127: NOT
31128: IFFALSE 31175
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31130: CALL_OW 45
31134: PPUSH
31135: LD_VAR 0 2
31139: PUSH
31140: LD_INT 1
31142: ARRAY
31143: PPUSH
31144: CALL_OW 250
31148: PPUSH
31149: LD_VAR 0 2
31153: PUSH
31154: LD_INT 1
31156: ARRAY
31157: PPUSH
31158: CALL_OW 251
31162: PPUSH
31163: LD_INT 12
31165: PPUSH
31166: LD_INT 1
31168: PPUSH
31169: CALL_OW 50
31173: GO 31187
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31175: CALL_OW 45
31179: PPUSH
31180: LD_INT 1
31182: PPUSH
31183: CALL_OW 51
// end ;
31187: GO 31061
31189: POP
31190: POP
// end ;
31191: PPOPN 2
31193: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31194: LD_EXP 38
31198: PUSH
31199: LD_EXP 84
31203: AND
31204: IFFALSE 31426
31206: GO 31208
31208: DISABLE
31209: LD_INT 0
31211: PPUSH
31212: PPUSH
31213: PPUSH
31214: PPUSH
31215: PPUSH
31216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31217: LD_ADDR_VAR 0 6
31221: PUSH
31222: LD_INT 22
31224: PUSH
31225: LD_OWVAR 2
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 21
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 3
31246: PUSH
31247: LD_INT 23
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: LIST
31265: PPUSH
31266: CALL_OW 69
31270: ST_TO_ADDR
// if not tmp then
31271: LD_VAR 0 6
31275: NOT
31276: IFFALSE 31280
// exit ;
31278: GO 31426
// s1 := rand ( 1 , 4 ) ;
31280: LD_ADDR_VAR 0 2
31284: PUSH
31285: LD_INT 1
31287: PPUSH
31288: LD_INT 4
31290: PPUSH
31291: CALL_OW 12
31295: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31296: LD_ADDR_VAR 0 4
31300: PUSH
31301: LD_VAR 0 6
31305: PUSH
31306: LD_INT 1
31308: ARRAY
31309: PPUSH
31310: LD_VAR 0 2
31314: PPUSH
31315: CALL_OW 259
31319: ST_TO_ADDR
// if s1 = 1 then
31320: LD_VAR 0 2
31324: PUSH
31325: LD_INT 1
31327: EQUAL
31328: IFFALSE 31348
// s2 := rand ( 2 , 4 ) else
31330: LD_ADDR_VAR 0 3
31334: PUSH
31335: LD_INT 2
31337: PPUSH
31338: LD_INT 4
31340: PPUSH
31341: CALL_OW 12
31345: ST_TO_ADDR
31346: GO 31356
// s2 := 1 ;
31348: LD_ADDR_VAR 0 3
31352: PUSH
31353: LD_INT 1
31355: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31356: LD_ADDR_VAR 0 5
31360: PUSH
31361: LD_VAR 0 6
31365: PUSH
31366: LD_INT 1
31368: ARRAY
31369: PPUSH
31370: LD_VAR 0 3
31374: PPUSH
31375: CALL_OW 259
31379: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31380: LD_VAR 0 6
31384: PUSH
31385: LD_INT 1
31387: ARRAY
31388: PPUSH
31389: LD_VAR 0 2
31393: PPUSH
31394: LD_VAR 0 5
31398: PPUSH
31399: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31403: LD_VAR 0 6
31407: PUSH
31408: LD_INT 1
31410: ARRAY
31411: PPUSH
31412: LD_VAR 0 3
31416: PPUSH
31417: LD_VAR 0 4
31421: PPUSH
31422: CALL_OW 237
// end ;
31426: PPOPN 6
31428: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31429: LD_EXP 38
31433: PUSH
31434: LD_EXP 85
31438: AND
31439: IFFALSE 31518
31441: GO 31443
31443: DISABLE
31444: LD_INT 0
31446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31447: LD_ADDR_VAR 0 1
31451: PUSH
31452: LD_INT 22
31454: PUSH
31455: LD_OWVAR 2
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 30
31466: PUSH
31467: LD_INT 3
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PPUSH
31478: CALL_OW 69
31482: ST_TO_ADDR
// if not tmp then
31483: LD_VAR 0 1
31487: NOT
31488: IFFALSE 31492
// exit ;
31490: GO 31518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31492: LD_VAR 0 1
31496: PUSH
31497: LD_INT 1
31499: PPUSH
31500: LD_VAR 0 1
31504: PPUSH
31505: CALL_OW 12
31509: ARRAY
31510: PPUSH
31511: LD_INT 1
31513: PPUSH
31514: CALL_OW 234
// end ;
31518: PPOPN 1
31520: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31521: LD_EXP 38
31525: PUSH
31526: LD_EXP 86
31530: AND
31531: IFFALSE 31643
31533: GO 31535
31535: DISABLE
31536: LD_INT 0
31538: PPUSH
31539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31540: LD_ADDR_VAR 0 2
31544: PUSH
31545: LD_INT 22
31547: PUSH
31548: LD_OWVAR 2
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: PUSH
31560: LD_INT 30
31562: PUSH
31563: LD_INT 27
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 30
31572: PUSH
31573: LD_INT 26
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 30
31582: PUSH
31583: LD_INT 28
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PPUSH
31600: CALL_OW 69
31604: ST_TO_ADDR
// if not tmp then
31605: LD_VAR 0 2
31609: NOT
31610: IFFALSE 31614
// exit ;
31612: GO 31643
// for i in tmp do
31614: LD_ADDR_VAR 0 1
31618: PUSH
31619: LD_VAR 0 2
31623: PUSH
31624: FOR_IN
31625: IFFALSE 31641
// SetLives ( i , 1 ) ;
31627: LD_VAR 0 1
31631: PPUSH
31632: LD_INT 1
31634: PPUSH
31635: CALL_OW 234
31639: GO 31624
31641: POP
31642: POP
// end ;
31643: PPOPN 2
31645: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31646: LD_EXP 38
31650: PUSH
31651: LD_EXP 87
31655: AND
31656: IFFALSE 31943
31658: GO 31660
31660: DISABLE
31661: LD_INT 0
31663: PPUSH
31664: PPUSH
31665: PPUSH
// begin i := rand ( 1 , 7 ) ;
31666: LD_ADDR_VAR 0 1
31670: PUSH
31671: LD_INT 1
31673: PPUSH
31674: LD_INT 7
31676: PPUSH
31677: CALL_OW 12
31681: ST_TO_ADDR
// case i of 1 :
31682: LD_VAR 0 1
31686: PUSH
31687: LD_INT 1
31689: DOUBLE
31690: EQUAL
31691: IFTRUE 31695
31693: GO 31705
31695: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31696: LD_STRING earthquake(getX(game), 0, 32)
31698: PPUSH
31699: CALL_OW 559
31703: GO 31943
31705: LD_INT 2
31707: DOUBLE
31708: EQUAL
31709: IFTRUE 31713
31711: GO 31727
31713: POP
// begin ToLua ( displayStucuk(); ) ;
31714: LD_STRING displayStucuk();
31716: PPUSH
31717: CALL_OW 559
// ResetFog ;
31721: CALL_OW 335
// end ; 3 :
31725: GO 31943
31727: LD_INT 3
31729: DOUBLE
31730: EQUAL
31731: IFTRUE 31735
31733: GO 31839
31735: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31736: LD_ADDR_VAR 0 2
31740: PUSH
31741: LD_INT 22
31743: PUSH
31744: LD_OWVAR 2
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 25
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PPUSH
31767: CALL_OW 69
31771: ST_TO_ADDR
// if not tmp then
31772: LD_VAR 0 2
31776: NOT
31777: IFFALSE 31781
// exit ;
31779: GO 31943
// un := tmp [ rand ( 1 , tmp ) ] ;
31781: LD_ADDR_VAR 0 3
31785: PUSH
31786: LD_VAR 0 2
31790: PUSH
31791: LD_INT 1
31793: PPUSH
31794: LD_VAR 0 2
31798: PPUSH
31799: CALL_OW 12
31803: ARRAY
31804: ST_TO_ADDR
// if Crawls ( un ) then
31805: LD_VAR 0 3
31809: PPUSH
31810: CALL_OW 318
31814: IFFALSE 31825
// ComWalk ( un ) ;
31816: LD_VAR 0 3
31820: PPUSH
31821: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31825: LD_VAR 0 3
31829: PPUSH
31830: LD_INT 8
31832: PPUSH
31833: CALL_OW 336
// end ; 4 :
31837: GO 31943
31839: LD_INT 4
31841: DOUBLE
31842: EQUAL
31843: IFTRUE 31847
31845: GO 31921
31847: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31848: LD_ADDR_VAR 0 2
31852: PUSH
31853: LD_INT 22
31855: PUSH
31856: LD_OWVAR 2
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 30
31867: PUSH
31868: LD_INT 29
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PPUSH
31879: CALL_OW 69
31883: ST_TO_ADDR
// if not tmp then
31884: LD_VAR 0 2
31888: NOT
31889: IFFALSE 31893
// exit ;
31891: GO 31943
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31893: LD_VAR 0 2
31897: PUSH
31898: LD_INT 1
31900: ARRAY
31901: PPUSH
31902: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31906: LD_VAR 0 2
31910: PUSH
31911: LD_INT 1
31913: ARRAY
31914: PPUSH
31915: CALL_OW 65
// end ; 5 .. 7 :
31919: GO 31943
31921: LD_INT 5
31923: DOUBLE
31924: GREATEREQUAL
31925: IFFALSE 31933
31927: LD_INT 7
31929: DOUBLE
31930: LESSEQUAL
31931: IFTRUE 31935
31933: GO 31942
31935: POP
// StreamSibBomb ; end ;
31936: CALL 28180 0 0
31940: GO 31943
31942: POP
// end ;
31943: PPOPN 3
31945: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31946: LD_EXP 38
31950: PUSH
31951: LD_EXP 88
31955: AND
31956: IFFALSE 32112
31958: GO 31960
31960: DISABLE
31961: LD_INT 0
31963: PPUSH
31964: PPUSH
31965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31966: LD_ADDR_VAR 0 2
31970: PUSH
31971: LD_INT 81
31973: PUSH
31974: LD_OWVAR 2
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: LD_INT 21
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 21
31998: PUSH
31999: LD_INT 2
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PPUSH
32015: CALL_OW 69
32019: ST_TO_ADDR
// if not tmp then
32020: LD_VAR 0 2
32024: NOT
32025: IFFALSE 32029
// exit ;
32027: GO 32112
// p := 0 ;
32029: LD_ADDR_VAR 0 3
32033: PUSH
32034: LD_INT 0
32036: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32037: LD_INT 35
32039: PPUSH
32040: CALL_OW 67
// p := p + 1 ;
32044: LD_ADDR_VAR 0 3
32048: PUSH
32049: LD_VAR 0 3
32053: PUSH
32054: LD_INT 1
32056: PLUS
32057: ST_TO_ADDR
// for i in tmp do
32058: LD_ADDR_VAR 0 1
32062: PUSH
32063: LD_VAR 0 2
32067: PUSH
32068: FOR_IN
32069: IFFALSE 32100
// if GetLives ( i ) < 1000 then
32071: LD_VAR 0 1
32075: PPUSH
32076: CALL_OW 256
32080: PUSH
32081: LD_INT 1000
32083: LESS
32084: IFFALSE 32098
// SetLives ( i , 1000 ) ;
32086: LD_VAR 0 1
32090: PPUSH
32091: LD_INT 1000
32093: PPUSH
32094: CALL_OW 234
32098: GO 32068
32100: POP
32101: POP
// until p > 20 ;
32102: LD_VAR 0 3
32106: PUSH
32107: LD_INT 20
32109: GREATER
32110: IFFALSE 32037
// end ;
32112: PPOPN 3
32114: END
// every 0 0$1 trigger StreamModeActive and sTime do
32115: LD_EXP 38
32119: PUSH
32120: LD_EXP 89
32124: AND
32125: IFFALSE 32160
32127: GO 32129
32129: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32130: LD_INT 28
32132: PPUSH
32133: LD_OWVAR 2
32137: PPUSH
32138: LD_INT 2
32140: PPUSH
32141: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32145: LD_INT 30
32147: PPUSH
32148: LD_OWVAR 2
32152: PPUSH
32153: LD_INT 2
32155: PPUSH
32156: CALL_OW 322
// end ;
32160: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32161: LD_EXP 38
32165: PUSH
32166: LD_EXP 90
32170: AND
32171: IFFALSE 32292
32173: GO 32175
32175: DISABLE
32176: LD_INT 0
32178: PPUSH
32179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32180: LD_ADDR_VAR 0 2
32184: PUSH
32185: LD_INT 22
32187: PUSH
32188: LD_OWVAR 2
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 21
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 3
32209: PUSH
32210: LD_INT 23
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: LIST
32228: PPUSH
32229: CALL_OW 69
32233: ST_TO_ADDR
// if not tmp then
32234: LD_VAR 0 2
32238: NOT
32239: IFFALSE 32243
// exit ;
32241: GO 32292
// for i in tmp do
32243: LD_ADDR_VAR 0 1
32247: PUSH
32248: LD_VAR 0 2
32252: PUSH
32253: FOR_IN
32254: IFFALSE 32290
// begin if Crawls ( i ) then
32256: LD_VAR 0 1
32260: PPUSH
32261: CALL_OW 318
32265: IFFALSE 32276
// ComWalk ( i ) ;
32267: LD_VAR 0 1
32271: PPUSH
32272: CALL_OW 138
// SetClass ( i , 2 ) ;
32276: LD_VAR 0 1
32280: PPUSH
32281: LD_INT 2
32283: PPUSH
32284: CALL_OW 336
// end ;
32288: GO 32253
32290: POP
32291: POP
// end ;
32292: PPOPN 2
32294: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32295: LD_EXP 38
32299: PUSH
32300: LD_EXP 91
32304: AND
32305: IFFALSE 32593
32307: GO 32309
32309: DISABLE
32310: LD_INT 0
32312: PPUSH
32313: PPUSH
32314: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32315: LD_OWVAR 2
32319: PPUSH
32320: LD_INT 9
32322: PPUSH
32323: LD_INT 1
32325: PPUSH
32326: LD_INT 1
32328: PPUSH
32329: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32333: LD_INT 9
32335: PPUSH
32336: LD_OWVAR 2
32340: PPUSH
32341: CALL_OW 343
// uc_side := 9 ;
32345: LD_ADDR_OWVAR 20
32349: PUSH
32350: LD_INT 9
32352: ST_TO_ADDR
// uc_nation := 2 ;
32353: LD_ADDR_OWVAR 21
32357: PUSH
32358: LD_INT 2
32360: ST_TO_ADDR
// hc_name := Dark Warrior ;
32361: LD_ADDR_OWVAR 26
32365: PUSH
32366: LD_STRING Dark Warrior
32368: ST_TO_ADDR
// hc_gallery :=  ;
32369: LD_ADDR_OWVAR 33
32373: PUSH
32374: LD_STRING 
32376: ST_TO_ADDR
// hc_noskilllimit := true ;
32377: LD_ADDR_OWVAR 76
32381: PUSH
32382: LD_INT 1
32384: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32385: LD_ADDR_OWVAR 31
32389: PUSH
32390: LD_INT 30
32392: PUSH
32393: LD_INT 30
32395: PUSH
32396: LD_INT 30
32398: PUSH
32399: LD_INT 30
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: ST_TO_ADDR
// un := CreateHuman ;
32408: LD_ADDR_VAR 0 3
32412: PUSH
32413: CALL_OW 44
32417: ST_TO_ADDR
// hc_noskilllimit := false ;
32418: LD_ADDR_OWVAR 76
32422: PUSH
32423: LD_INT 0
32425: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32426: LD_VAR 0 3
32430: PPUSH
32431: LD_INT 1
32433: PPUSH
32434: CALL_OW 51
// ToLua ( playRanger() ) ;
32438: LD_STRING playRanger()
32440: PPUSH
32441: CALL_OW 559
// p := 0 ;
32445: LD_ADDR_VAR 0 2
32449: PUSH
32450: LD_INT 0
32452: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32453: LD_INT 35
32455: PPUSH
32456: CALL_OW 67
// p := p + 1 ;
32460: LD_ADDR_VAR 0 2
32464: PUSH
32465: LD_VAR 0 2
32469: PUSH
32470: LD_INT 1
32472: PLUS
32473: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32474: LD_VAR 0 3
32478: PPUSH
32479: CALL_OW 256
32483: PUSH
32484: LD_INT 1000
32486: LESS
32487: IFFALSE 32501
// SetLives ( un , 1000 ) ;
32489: LD_VAR 0 3
32493: PPUSH
32494: LD_INT 1000
32496: PPUSH
32497: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32501: LD_VAR 0 3
32505: PPUSH
32506: LD_INT 81
32508: PUSH
32509: LD_OWVAR 2
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 91
32520: PUSH
32521: LD_VAR 0 3
32525: PUSH
32526: LD_INT 30
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: LIST
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PPUSH
32538: CALL_OW 69
32542: PPUSH
32543: LD_VAR 0 3
32547: PPUSH
32548: CALL_OW 74
32552: PPUSH
32553: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32557: LD_VAR 0 2
32561: PUSH
32562: LD_INT 80
32564: GREATER
32565: PUSH
32566: LD_VAR 0 3
32570: PPUSH
32571: CALL_OW 301
32575: OR
32576: IFFALSE 32453
// if un then
32578: LD_VAR 0 3
32582: IFFALSE 32593
// RemoveUnit ( un ) ;
32584: LD_VAR 0 3
32588: PPUSH
32589: CALL_OW 64
// end ;
32593: PPOPN 3
32595: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32596: LD_EXP 92
32600: IFFALSE 32716
32602: GO 32604
32604: DISABLE
32605: LD_INT 0
32607: PPUSH
32608: PPUSH
32609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32610: LD_ADDR_VAR 0 2
32614: PUSH
32615: LD_INT 81
32617: PUSH
32618: LD_OWVAR 2
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 21
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PPUSH
32641: CALL_OW 69
32645: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32646: LD_STRING playComputer()
32648: PPUSH
32649: CALL_OW 559
// if not tmp then
32653: LD_VAR 0 2
32657: NOT
32658: IFFALSE 32662
// exit ;
32660: GO 32716
// for i in tmp do
32662: LD_ADDR_VAR 0 1
32666: PUSH
32667: LD_VAR 0 2
32671: PUSH
32672: FOR_IN
32673: IFFALSE 32714
// for j := 1 to 4 do
32675: LD_ADDR_VAR 0 3
32679: PUSH
32680: DOUBLE
32681: LD_INT 1
32683: DEC
32684: ST_TO_ADDR
32685: LD_INT 4
32687: PUSH
32688: FOR_TO
32689: IFFALSE 32710
// SetSkill ( i , j , 10 ) ;
32691: LD_VAR 0 1
32695: PPUSH
32696: LD_VAR 0 3
32700: PPUSH
32701: LD_INT 10
32703: PPUSH
32704: CALL_OW 237
32708: GO 32688
32710: POP
32711: POP
32712: GO 32672
32714: POP
32715: POP
// end ;
32716: PPOPN 3
32718: END
// every 0 0$1 trigger s30 do var i , tmp ;
32719: LD_EXP 93
32723: IFFALSE 32792
32725: GO 32727
32727: DISABLE
32728: LD_INT 0
32730: PPUSH
32731: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32732: LD_ADDR_VAR 0 2
32736: PUSH
32737: LD_INT 22
32739: PUSH
32740: LD_OWVAR 2
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PPUSH
32749: CALL_OW 69
32753: ST_TO_ADDR
// if not tmp then
32754: LD_VAR 0 2
32758: NOT
32759: IFFALSE 32763
// exit ;
32761: GO 32792
// for i in tmp do
32763: LD_ADDR_VAR 0 1
32767: PUSH
32768: LD_VAR 0 2
32772: PUSH
32773: FOR_IN
32774: IFFALSE 32790
// SetLives ( i , 300 ) ;
32776: LD_VAR 0 1
32780: PPUSH
32781: LD_INT 300
32783: PPUSH
32784: CALL_OW 234
32788: GO 32773
32790: POP
32791: POP
// end ;
32792: PPOPN 2
32794: END
// every 0 0$1 trigger s60 do var i , tmp ;
32795: LD_EXP 94
32799: IFFALSE 32868
32801: GO 32803
32803: DISABLE
32804: LD_INT 0
32806: PPUSH
32807: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32808: LD_ADDR_VAR 0 2
32812: PUSH
32813: LD_INT 22
32815: PUSH
32816: LD_OWVAR 2
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PPUSH
32825: CALL_OW 69
32829: ST_TO_ADDR
// if not tmp then
32830: LD_VAR 0 2
32834: NOT
32835: IFFALSE 32839
// exit ;
32837: GO 32868
// for i in tmp do
32839: LD_ADDR_VAR 0 1
32843: PUSH
32844: LD_VAR 0 2
32848: PUSH
32849: FOR_IN
32850: IFFALSE 32866
// SetLives ( i , 600 ) ;
32852: LD_VAR 0 1
32856: PPUSH
32857: LD_INT 600
32859: PPUSH
32860: CALL_OW 234
32864: GO 32849
32866: POP
32867: POP
// end ;
32868: PPOPN 2
32870: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32871: LD_INT 0
32873: PPUSH
// case cmd of 301 :
32874: LD_VAR 0 1
32878: PUSH
32879: LD_INT 301
32881: DOUBLE
32882: EQUAL
32883: IFTRUE 32887
32885: GO 32919
32887: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32888: LD_VAR 0 6
32892: PPUSH
32893: LD_VAR 0 7
32897: PPUSH
32898: LD_VAR 0 8
32902: PPUSH
32903: LD_VAR 0 4
32907: PPUSH
32908: LD_VAR 0 5
32912: PPUSH
32913: CALL 34128 0 5
32917: GO 33040
32919: LD_INT 302
32921: DOUBLE
32922: EQUAL
32923: IFTRUE 32927
32925: GO 32964
32927: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32928: LD_VAR 0 6
32932: PPUSH
32933: LD_VAR 0 7
32937: PPUSH
32938: LD_VAR 0 8
32942: PPUSH
32943: LD_VAR 0 9
32947: PPUSH
32948: LD_VAR 0 4
32952: PPUSH
32953: LD_VAR 0 5
32957: PPUSH
32958: CALL 34219 0 6
32962: GO 33040
32964: LD_INT 303
32966: DOUBLE
32967: EQUAL
32968: IFTRUE 32972
32970: GO 33009
32972: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32973: LD_VAR 0 6
32977: PPUSH
32978: LD_VAR 0 7
32982: PPUSH
32983: LD_VAR 0 8
32987: PPUSH
32988: LD_VAR 0 9
32992: PPUSH
32993: LD_VAR 0 4
32997: PPUSH
32998: LD_VAR 0 5
33002: PPUSH
33003: CALL 33045 0 6
33007: GO 33040
33009: LD_INT 304
33011: DOUBLE
33012: EQUAL
33013: IFTRUE 33017
33015: GO 33039
33017: POP
// hHackTeleport ( unit , x , y ) ; end ;
33018: LD_VAR 0 2
33022: PPUSH
33023: LD_VAR 0 4
33027: PPUSH
33028: LD_VAR 0 5
33032: PPUSH
33033: CALL 34812 0 3
33037: GO 33040
33039: POP
// end ;
33040: LD_VAR 0 12
33044: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33045: LD_INT 0
33047: PPUSH
33048: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33049: LD_VAR 0 1
33053: PUSH
33054: LD_INT 1
33056: LESS
33057: PUSH
33058: LD_VAR 0 1
33062: PUSH
33063: LD_INT 3
33065: GREATER
33066: OR
33067: PUSH
33068: LD_VAR 0 5
33072: PPUSH
33073: LD_VAR 0 6
33077: PPUSH
33078: CALL_OW 428
33082: OR
33083: IFFALSE 33087
// exit ;
33085: GO 33815
// uc_side := your_side ;
33087: LD_ADDR_OWVAR 20
33091: PUSH
33092: LD_OWVAR 2
33096: ST_TO_ADDR
// uc_nation := nation ;
33097: LD_ADDR_OWVAR 21
33101: PUSH
33102: LD_VAR 0 1
33106: ST_TO_ADDR
// bc_level = 1 ;
33107: LD_ADDR_OWVAR 43
33111: PUSH
33112: LD_INT 1
33114: ST_TO_ADDR
// case btype of 1 :
33115: LD_VAR 0 2
33119: PUSH
33120: LD_INT 1
33122: DOUBLE
33123: EQUAL
33124: IFTRUE 33128
33126: GO 33139
33128: POP
// bc_type := b_depot ; 2 :
33129: LD_ADDR_OWVAR 42
33133: PUSH
33134: LD_INT 0
33136: ST_TO_ADDR
33137: GO 33759
33139: LD_INT 2
33141: DOUBLE
33142: EQUAL
33143: IFTRUE 33147
33145: GO 33158
33147: POP
// bc_type := b_warehouse ; 3 :
33148: LD_ADDR_OWVAR 42
33152: PUSH
33153: LD_INT 1
33155: ST_TO_ADDR
33156: GO 33759
33158: LD_INT 3
33160: DOUBLE
33161: EQUAL
33162: IFTRUE 33166
33164: GO 33177
33166: POP
// bc_type := b_lab ; 4 .. 9 :
33167: LD_ADDR_OWVAR 42
33171: PUSH
33172: LD_INT 6
33174: ST_TO_ADDR
33175: GO 33759
33177: LD_INT 4
33179: DOUBLE
33180: GREATEREQUAL
33181: IFFALSE 33189
33183: LD_INT 9
33185: DOUBLE
33186: LESSEQUAL
33187: IFTRUE 33191
33189: GO 33251
33191: POP
// begin bc_type := b_lab_half ;
33192: LD_ADDR_OWVAR 42
33196: PUSH
33197: LD_INT 7
33199: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33200: LD_ADDR_OWVAR 44
33204: PUSH
33205: LD_INT 10
33207: PUSH
33208: LD_INT 11
33210: PUSH
33211: LD_INT 12
33213: PUSH
33214: LD_INT 15
33216: PUSH
33217: LD_INT 14
33219: PUSH
33220: LD_INT 13
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: PUSH
33231: LD_VAR 0 2
33235: PUSH
33236: LD_INT 3
33238: MINUS
33239: ARRAY
33240: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33241: LD_ADDR_OWVAR 45
33245: PUSH
33246: LD_INT 9
33248: ST_TO_ADDR
// end ; 10 .. 13 :
33249: GO 33759
33251: LD_INT 10
33253: DOUBLE
33254: GREATEREQUAL
33255: IFFALSE 33263
33257: LD_INT 13
33259: DOUBLE
33260: LESSEQUAL
33261: IFTRUE 33265
33263: GO 33342
33265: POP
// begin bc_type := b_lab_full ;
33266: LD_ADDR_OWVAR 42
33270: PUSH
33271: LD_INT 8
33273: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33274: LD_ADDR_OWVAR 44
33278: PUSH
33279: LD_INT 10
33281: PUSH
33282: LD_INT 12
33284: PUSH
33285: LD_INT 14
33287: PUSH
33288: LD_INT 13
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: PUSH
33297: LD_VAR 0 2
33301: PUSH
33302: LD_INT 9
33304: MINUS
33305: ARRAY
33306: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33307: LD_ADDR_OWVAR 45
33311: PUSH
33312: LD_INT 11
33314: PUSH
33315: LD_INT 15
33317: PUSH
33318: LD_INT 12
33320: PUSH
33321: LD_INT 15
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: PUSH
33330: LD_VAR 0 2
33334: PUSH
33335: LD_INT 9
33337: MINUS
33338: ARRAY
33339: ST_TO_ADDR
// end ; 14 :
33340: GO 33759
33342: LD_INT 14
33344: DOUBLE
33345: EQUAL
33346: IFTRUE 33350
33348: GO 33361
33350: POP
// bc_type := b_workshop ; 15 :
33351: LD_ADDR_OWVAR 42
33355: PUSH
33356: LD_INT 2
33358: ST_TO_ADDR
33359: GO 33759
33361: LD_INT 15
33363: DOUBLE
33364: EQUAL
33365: IFTRUE 33369
33367: GO 33380
33369: POP
// bc_type := b_factory ; 16 :
33370: LD_ADDR_OWVAR 42
33374: PUSH
33375: LD_INT 3
33377: ST_TO_ADDR
33378: GO 33759
33380: LD_INT 16
33382: DOUBLE
33383: EQUAL
33384: IFTRUE 33388
33386: GO 33399
33388: POP
// bc_type := b_ext_gun ; 17 :
33389: LD_ADDR_OWVAR 42
33393: PUSH
33394: LD_INT 17
33396: ST_TO_ADDR
33397: GO 33759
33399: LD_INT 17
33401: DOUBLE
33402: EQUAL
33403: IFTRUE 33407
33405: GO 33435
33407: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33408: LD_ADDR_OWVAR 42
33412: PUSH
33413: LD_INT 19
33415: PUSH
33416: LD_INT 23
33418: PUSH
33419: LD_INT 19
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: LIST
33426: PUSH
33427: LD_VAR 0 1
33431: ARRAY
33432: ST_TO_ADDR
33433: GO 33759
33435: LD_INT 18
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33443
33441: GO 33454
33443: POP
// bc_type := b_ext_radar ; 19 :
33444: LD_ADDR_OWVAR 42
33448: PUSH
33449: LD_INT 20
33451: ST_TO_ADDR
33452: GO 33759
33454: LD_INT 19
33456: DOUBLE
33457: EQUAL
33458: IFTRUE 33462
33460: GO 33473
33462: POP
// bc_type := b_ext_radio ; 20 :
33463: LD_ADDR_OWVAR 42
33467: PUSH
33468: LD_INT 22
33470: ST_TO_ADDR
33471: GO 33759
33473: LD_INT 20
33475: DOUBLE
33476: EQUAL
33477: IFTRUE 33481
33479: GO 33492
33481: POP
// bc_type := b_ext_siberium ; 21 :
33482: LD_ADDR_OWVAR 42
33486: PUSH
33487: LD_INT 21
33489: ST_TO_ADDR
33490: GO 33759
33492: LD_INT 21
33494: DOUBLE
33495: EQUAL
33496: IFTRUE 33500
33498: GO 33511
33500: POP
// bc_type := b_ext_computer ; 22 :
33501: LD_ADDR_OWVAR 42
33505: PUSH
33506: LD_INT 24
33508: ST_TO_ADDR
33509: GO 33759
33511: LD_INT 22
33513: DOUBLE
33514: EQUAL
33515: IFTRUE 33519
33517: GO 33530
33519: POP
// bc_type := b_ext_track ; 23 :
33520: LD_ADDR_OWVAR 42
33524: PUSH
33525: LD_INT 16
33527: ST_TO_ADDR
33528: GO 33759
33530: LD_INT 23
33532: DOUBLE
33533: EQUAL
33534: IFTRUE 33538
33536: GO 33549
33538: POP
// bc_type := b_ext_laser ; 24 :
33539: LD_ADDR_OWVAR 42
33543: PUSH
33544: LD_INT 25
33546: ST_TO_ADDR
33547: GO 33759
33549: LD_INT 24
33551: DOUBLE
33552: EQUAL
33553: IFTRUE 33557
33555: GO 33568
33557: POP
// bc_type := b_control_tower ; 25 :
33558: LD_ADDR_OWVAR 42
33562: PUSH
33563: LD_INT 36
33565: ST_TO_ADDR
33566: GO 33759
33568: LD_INT 25
33570: DOUBLE
33571: EQUAL
33572: IFTRUE 33576
33574: GO 33587
33576: POP
// bc_type := b_breastwork ; 26 :
33577: LD_ADDR_OWVAR 42
33581: PUSH
33582: LD_INT 31
33584: ST_TO_ADDR
33585: GO 33759
33587: LD_INT 26
33589: DOUBLE
33590: EQUAL
33591: IFTRUE 33595
33593: GO 33606
33595: POP
// bc_type := b_bunker ; 27 :
33596: LD_ADDR_OWVAR 42
33600: PUSH
33601: LD_INT 32
33603: ST_TO_ADDR
33604: GO 33759
33606: LD_INT 27
33608: DOUBLE
33609: EQUAL
33610: IFTRUE 33614
33612: GO 33625
33614: POP
// bc_type := b_turret ; 28 :
33615: LD_ADDR_OWVAR 42
33619: PUSH
33620: LD_INT 33
33622: ST_TO_ADDR
33623: GO 33759
33625: LD_INT 28
33627: DOUBLE
33628: EQUAL
33629: IFTRUE 33633
33631: GO 33644
33633: POP
// bc_type := b_armoury ; 29 :
33634: LD_ADDR_OWVAR 42
33638: PUSH
33639: LD_INT 4
33641: ST_TO_ADDR
33642: GO 33759
33644: LD_INT 29
33646: DOUBLE
33647: EQUAL
33648: IFTRUE 33652
33650: GO 33663
33652: POP
// bc_type := b_barracks ; 30 :
33653: LD_ADDR_OWVAR 42
33657: PUSH
33658: LD_INT 5
33660: ST_TO_ADDR
33661: GO 33759
33663: LD_INT 30
33665: DOUBLE
33666: EQUAL
33667: IFTRUE 33671
33669: GO 33682
33671: POP
// bc_type := b_solar_power ; 31 :
33672: LD_ADDR_OWVAR 42
33676: PUSH
33677: LD_INT 27
33679: ST_TO_ADDR
33680: GO 33759
33682: LD_INT 31
33684: DOUBLE
33685: EQUAL
33686: IFTRUE 33690
33688: GO 33701
33690: POP
// bc_type := b_oil_power ; 32 :
33691: LD_ADDR_OWVAR 42
33695: PUSH
33696: LD_INT 26
33698: ST_TO_ADDR
33699: GO 33759
33701: LD_INT 32
33703: DOUBLE
33704: EQUAL
33705: IFTRUE 33709
33707: GO 33720
33709: POP
// bc_type := b_siberite_power ; 33 :
33710: LD_ADDR_OWVAR 42
33714: PUSH
33715: LD_INT 28
33717: ST_TO_ADDR
33718: GO 33759
33720: LD_INT 33
33722: DOUBLE
33723: EQUAL
33724: IFTRUE 33728
33726: GO 33739
33728: POP
// bc_type := b_oil_mine ; 34 :
33729: LD_ADDR_OWVAR 42
33733: PUSH
33734: LD_INT 29
33736: ST_TO_ADDR
33737: GO 33759
33739: LD_INT 34
33741: DOUBLE
33742: EQUAL
33743: IFTRUE 33747
33745: GO 33758
33747: POP
// bc_type := b_siberite_mine ; end ;
33748: LD_ADDR_OWVAR 42
33752: PUSH
33753: LD_INT 30
33755: ST_TO_ADDR
33756: GO 33759
33758: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33759: LD_ADDR_VAR 0 8
33763: PUSH
33764: LD_VAR 0 5
33768: PPUSH
33769: LD_VAR 0 6
33773: PPUSH
33774: LD_VAR 0 3
33778: PPUSH
33779: CALL_OW 47
33783: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33784: LD_OWVAR 42
33788: PUSH
33789: LD_INT 32
33791: PUSH
33792: LD_INT 33
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: IN
33799: IFFALSE 33815
// PlaceWeaponTurret ( b , weapon ) ;
33801: LD_VAR 0 8
33805: PPUSH
33806: LD_VAR 0 4
33810: PPUSH
33811: CALL_OW 431
// end ;
33815: LD_VAR 0 7
33819: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33820: LD_INT 0
33822: PPUSH
33823: PPUSH
33824: PPUSH
33825: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33826: LD_ADDR_VAR 0 4
33830: PUSH
33831: LD_INT 22
33833: PUSH
33834: LD_OWVAR 2
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: LD_INT 30
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 30
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: LIST
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PPUSH
33875: CALL_OW 69
33879: ST_TO_ADDR
// if not tmp then
33880: LD_VAR 0 4
33884: NOT
33885: IFFALSE 33889
// exit ;
33887: GO 33948
// for i in tmp do
33889: LD_ADDR_VAR 0 2
33893: PUSH
33894: LD_VAR 0 4
33898: PUSH
33899: FOR_IN
33900: IFFALSE 33946
// for j = 1 to 3 do
33902: LD_ADDR_VAR 0 3
33906: PUSH
33907: DOUBLE
33908: LD_INT 1
33910: DEC
33911: ST_TO_ADDR
33912: LD_INT 3
33914: PUSH
33915: FOR_TO
33916: IFFALSE 33942
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33918: LD_VAR 0 2
33922: PPUSH
33923: CALL_OW 274
33927: PPUSH
33928: LD_VAR 0 3
33932: PPUSH
33933: LD_INT 99999
33935: PPUSH
33936: CALL_OW 277
33940: GO 33915
33942: POP
33943: POP
33944: GO 33899
33946: POP
33947: POP
// end ;
33948: LD_VAR 0 1
33952: RET
// export function hHackSetLevel10 ; var i , j ; begin
33953: LD_INT 0
33955: PPUSH
33956: PPUSH
33957: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33958: LD_ADDR_VAR 0 2
33962: PUSH
33963: LD_INT 21
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PPUSH
33973: CALL_OW 69
33977: PUSH
33978: FOR_IN
33979: IFFALSE 34031
// if IsSelected ( i ) then
33981: LD_VAR 0 2
33985: PPUSH
33986: CALL_OW 306
33990: IFFALSE 34029
// begin for j := 1 to 4 do
33992: LD_ADDR_VAR 0 3
33996: PUSH
33997: DOUBLE
33998: LD_INT 1
34000: DEC
34001: ST_TO_ADDR
34002: LD_INT 4
34004: PUSH
34005: FOR_TO
34006: IFFALSE 34027
// SetSkill ( i , j , 10 ) ;
34008: LD_VAR 0 2
34012: PPUSH
34013: LD_VAR 0 3
34017: PPUSH
34018: LD_INT 10
34020: PPUSH
34021: CALL_OW 237
34025: GO 34005
34027: POP
34028: POP
// end ;
34029: GO 33978
34031: POP
34032: POP
// end ;
34033: LD_VAR 0 1
34037: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34038: LD_INT 0
34040: PPUSH
34041: PPUSH
34042: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34043: LD_ADDR_VAR 0 2
34047: PUSH
34048: LD_INT 22
34050: PUSH
34051: LD_OWVAR 2
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 21
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PPUSH
34074: CALL_OW 69
34078: PUSH
34079: FOR_IN
34080: IFFALSE 34121
// begin for j := 1 to 4 do
34082: LD_ADDR_VAR 0 3
34086: PUSH
34087: DOUBLE
34088: LD_INT 1
34090: DEC
34091: ST_TO_ADDR
34092: LD_INT 4
34094: PUSH
34095: FOR_TO
34096: IFFALSE 34117
// SetSkill ( i , j , 10 ) ;
34098: LD_VAR 0 2
34102: PPUSH
34103: LD_VAR 0 3
34107: PPUSH
34108: LD_INT 10
34110: PPUSH
34111: CALL_OW 237
34115: GO 34095
34117: POP
34118: POP
// end ;
34119: GO 34079
34121: POP
34122: POP
// end ;
34123: LD_VAR 0 1
34127: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34128: LD_INT 0
34130: PPUSH
// uc_side := your_side ;
34131: LD_ADDR_OWVAR 20
34135: PUSH
34136: LD_OWVAR 2
34140: ST_TO_ADDR
// uc_nation := nation ;
34141: LD_ADDR_OWVAR 21
34145: PUSH
34146: LD_VAR 0 1
34150: ST_TO_ADDR
// InitHc ;
34151: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34155: LD_INT 0
34157: PPUSH
34158: LD_VAR 0 2
34162: PPUSH
34163: LD_VAR 0 3
34167: PPUSH
34168: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34172: LD_VAR 0 4
34176: PPUSH
34177: LD_VAR 0 5
34181: PPUSH
34182: CALL_OW 428
34186: PUSH
34187: LD_INT 0
34189: EQUAL
34190: IFFALSE 34214
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34192: CALL_OW 44
34196: PPUSH
34197: LD_VAR 0 4
34201: PPUSH
34202: LD_VAR 0 5
34206: PPUSH
34207: LD_INT 1
34209: PPUSH
34210: CALL_OW 48
// end ;
34214: LD_VAR 0 6
34218: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34219: LD_INT 0
34221: PPUSH
34222: PPUSH
// uc_side := your_side ;
34223: LD_ADDR_OWVAR 20
34227: PUSH
34228: LD_OWVAR 2
34232: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34233: LD_VAR 0 1
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: LD_INT 2
34243: PUSH
34244: LD_INT 3
34246: PUSH
34247: LD_INT 4
34249: PUSH
34250: LD_INT 5
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: IN
34260: IFFALSE 34272
// uc_nation := nation_american else
34262: LD_ADDR_OWVAR 21
34266: PUSH
34267: LD_INT 1
34269: ST_TO_ADDR
34270: GO 34315
// if chassis in [ 11 , 12 , 13 , 14 ] then
34272: LD_VAR 0 1
34276: PUSH
34277: LD_INT 11
34279: PUSH
34280: LD_INT 12
34282: PUSH
34283: LD_INT 13
34285: PUSH
34286: LD_INT 14
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: IN
34295: IFFALSE 34307
// uc_nation := nation_arabian else
34297: LD_ADDR_OWVAR 21
34301: PUSH
34302: LD_INT 2
34304: ST_TO_ADDR
34305: GO 34315
// uc_nation := nation_russian ;
34307: LD_ADDR_OWVAR 21
34311: PUSH
34312: LD_INT 3
34314: ST_TO_ADDR
// vc_chassis := chassis ;
34315: LD_ADDR_OWVAR 37
34319: PUSH
34320: LD_VAR 0 1
34324: ST_TO_ADDR
// vc_engine := engine ;
34325: LD_ADDR_OWVAR 39
34329: PUSH
34330: LD_VAR 0 2
34334: ST_TO_ADDR
// vc_control := control ;
34335: LD_ADDR_OWVAR 38
34339: PUSH
34340: LD_VAR 0 3
34344: ST_TO_ADDR
// vc_weapon := weapon ;
34345: LD_ADDR_OWVAR 40
34349: PUSH
34350: LD_VAR 0 4
34354: ST_TO_ADDR
// un := CreateVehicle ;
34355: LD_ADDR_VAR 0 8
34359: PUSH
34360: CALL_OW 45
34364: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34365: LD_VAR 0 8
34369: PPUSH
34370: LD_INT 0
34372: PPUSH
34373: LD_INT 5
34375: PPUSH
34376: CALL_OW 12
34380: PPUSH
34381: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34385: LD_VAR 0 8
34389: PPUSH
34390: LD_VAR 0 5
34394: PPUSH
34395: LD_VAR 0 6
34399: PPUSH
34400: LD_INT 1
34402: PPUSH
34403: CALL_OW 48
// end ;
34407: LD_VAR 0 7
34411: RET
// export hInvincible ; every 1 do
34412: GO 34414
34414: DISABLE
// hInvincible := [ ] ;
34415: LD_ADDR_EXP 95
34419: PUSH
34420: EMPTY
34421: ST_TO_ADDR
34422: END
// every 10 do var i ;
34423: GO 34425
34425: DISABLE
34426: LD_INT 0
34428: PPUSH
// begin enable ;
34429: ENABLE
// if not hInvincible then
34430: LD_EXP 95
34434: NOT
34435: IFFALSE 34439
// exit ;
34437: GO 34483
// for i in hInvincible do
34439: LD_ADDR_VAR 0 1
34443: PUSH
34444: LD_EXP 95
34448: PUSH
34449: FOR_IN
34450: IFFALSE 34481
// if GetLives ( i ) < 1000 then
34452: LD_VAR 0 1
34456: PPUSH
34457: CALL_OW 256
34461: PUSH
34462: LD_INT 1000
34464: LESS
34465: IFFALSE 34479
// SetLives ( i , 1000 ) ;
34467: LD_VAR 0 1
34471: PPUSH
34472: LD_INT 1000
34474: PPUSH
34475: CALL_OW 234
34479: GO 34449
34481: POP
34482: POP
// end ;
34483: PPOPN 1
34485: END
// export function hHackInvincible ; var i ; begin
34486: LD_INT 0
34488: PPUSH
34489: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34490: LD_ADDR_VAR 0 2
34494: PUSH
34495: LD_INT 2
34497: PUSH
34498: LD_INT 21
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 21
34510: PUSH
34511: LD_INT 2
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: LIST
34522: PPUSH
34523: CALL_OW 69
34527: PUSH
34528: FOR_IN
34529: IFFALSE 34590
// if IsSelected ( i ) then
34531: LD_VAR 0 2
34535: PPUSH
34536: CALL_OW 306
34540: IFFALSE 34588
// begin if i in hInvincible then
34542: LD_VAR 0 2
34546: PUSH
34547: LD_EXP 95
34551: IN
34552: IFFALSE 34572
// hInvincible := hInvincible diff i else
34554: LD_ADDR_EXP 95
34558: PUSH
34559: LD_EXP 95
34563: PUSH
34564: LD_VAR 0 2
34568: DIFF
34569: ST_TO_ADDR
34570: GO 34588
// hInvincible := hInvincible union i ;
34572: LD_ADDR_EXP 95
34576: PUSH
34577: LD_EXP 95
34581: PUSH
34582: LD_VAR 0 2
34586: UNION
34587: ST_TO_ADDR
// end ;
34588: GO 34528
34590: POP
34591: POP
// end ;
34592: LD_VAR 0 1
34596: RET
// export function hHackInvisible ; var i , j ; begin
34597: LD_INT 0
34599: PPUSH
34600: PPUSH
34601: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34602: LD_ADDR_VAR 0 2
34606: PUSH
34607: LD_INT 21
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PPUSH
34617: CALL_OW 69
34621: PUSH
34622: FOR_IN
34623: IFFALSE 34647
// if IsSelected ( i ) then
34625: LD_VAR 0 2
34629: PPUSH
34630: CALL_OW 306
34634: IFFALSE 34645
// ComForceInvisible ( i ) ;
34636: LD_VAR 0 2
34640: PPUSH
34641: CALL_OW 496
34645: GO 34622
34647: POP
34648: POP
// end ;
34649: LD_VAR 0 1
34653: RET
// export function hHackChangeYourSide ; begin
34654: LD_INT 0
34656: PPUSH
// if your_side = 8 then
34657: LD_OWVAR 2
34661: PUSH
34662: LD_INT 8
34664: EQUAL
34665: IFFALSE 34677
// your_side := 0 else
34667: LD_ADDR_OWVAR 2
34671: PUSH
34672: LD_INT 0
34674: ST_TO_ADDR
34675: GO 34691
// your_side := your_side + 1 ;
34677: LD_ADDR_OWVAR 2
34681: PUSH
34682: LD_OWVAR 2
34686: PUSH
34687: LD_INT 1
34689: PLUS
34690: ST_TO_ADDR
// end ;
34691: LD_VAR 0 1
34695: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34696: LD_INT 0
34698: PPUSH
34699: PPUSH
34700: PPUSH
// for i in all_units do
34701: LD_ADDR_VAR 0 2
34705: PUSH
34706: LD_OWVAR 3
34710: PUSH
34711: FOR_IN
34712: IFFALSE 34790
// if IsSelected ( i ) then
34714: LD_VAR 0 2
34718: PPUSH
34719: CALL_OW 306
34723: IFFALSE 34788
// begin j := GetSide ( i ) ;
34725: LD_ADDR_VAR 0 3
34729: PUSH
34730: LD_VAR 0 2
34734: PPUSH
34735: CALL_OW 255
34739: ST_TO_ADDR
// if j = 8 then
34740: LD_VAR 0 3
34744: PUSH
34745: LD_INT 8
34747: EQUAL
34748: IFFALSE 34760
// j := 0 else
34750: LD_ADDR_VAR 0 3
34754: PUSH
34755: LD_INT 0
34757: ST_TO_ADDR
34758: GO 34774
// j := j + 1 ;
34760: LD_ADDR_VAR 0 3
34764: PUSH
34765: LD_VAR 0 3
34769: PUSH
34770: LD_INT 1
34772: PLUS
34773: ST_TO_ADDR
// SetSide ( i , j ) ;
34774: LD_VAR 0 2
34778: PPUSH
34779: LD_VAR 0 3
34783: PPUSH
34784: CALL_OW 235
// end ;
34788: GO 34711
34790: POP
34791: POP
// end ;
34792: LD_VAR 0 1
34796: RET
// export function hHackFog ; begin
34797: LD_INT 0
34799: PPUSH
// FogOff ( true ) ;
34800: LD_INT 1
34802: PPUSH
34803: CALL_OW 344
// end ;
34807: LD_VAR 0 1
34811: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34812: LD_INT 0
34814: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34815: LD_VAR 0 1
34819: PPUSH
34820: LD_VAR 0 2
34824: PPUSH
34825: LD_VAR 0 3
34829: PPUSH
34830: LD_INT 1
34832: PPUSH
34833: LD_INT 1
34835: PPUSH
34836: CALL_OW 483
// CenterOnXY ( x , y ) ;
34840: LD_VAR 0 2
34844: PPUSH
34845: LD_VAR 0 3
34849: PPUSH
34850: CALL_OW 84
// end ;
34854: LD_VAR 0 4
34858: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34859: LD_INT 0
34861: PPUSH
34862: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34863: LD_VAR 0 1
34867: NOT
34868: PUSH
34869: LD_VAR 0 2
34873: PPUSH
34874: LD_VAR 0 3
34878: PPUSH
34879: CALL_OW 488
34883: NOT
34884: OR
34885: PUSH
34886: LD_VAR 0 1
34890: PPUSH
34891: CALL_OW 266
34895: PUSH
34896: LD_INT 3
34898: NONEQUAL
34899: PUSH
34900: LD_VAR 0 1
34904: PPUSH
34905: CALL_OW 247
34909: PUSH
34910: LD_INT 1
34912: EQUAL
34913: NOT
34914: AND
34915: OR
34916: IFFALSE 34920
// exit ;
34918: GO 35069
// if GetType ( factory ) = unit_human then
34920: LD_VAR 0 1
34924: PPUSH
34925: CALL_OW 247
34929: PUSH
34930: LD_INT 1
34932: EQUAL
34933: IFFALSE 34950
// factory := IsInUnit ( factory ) ;
34935: LD_ADDR_VAR 0 1
34939: PUSH
34940: LD_VAR 0 1
34944: PPUSH
34945: CALL_OW 310
34949: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34950: LD_VAR 0 1
34954: PPUSH
34955: CALL_OW 266
34959: PUSH
34960: LD_INT 3
34962: NONEQUAL
34963: IFFALSE 34967
// exit ;
34965: GO 35069
// if HexInfo ( x , y ) = factory then
34967: LD_VAR 0 2
34971: PPUSH
34972: LD_VAR 0 3
34976: PPUSH
34977: CALL_OW 428
34981: PUSH
34982: LD_VAR 0 1
34986: EQUAL
34987: IFFALSE 35014
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34989: LD_ADDR_EXP 96
34993: PUSH
34994: LD_EXP 96
34998: PPUSH
34999: LD_VAR 0 1
35003: PPUSH
35004: LD_INT 0
35006: PPUSH
35007: CALL_OW 1
35011: ST_TO_ADDR
35012: GO 35065
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35014: LD_ADDR_EXP 96
35018: PUSH
35019: LD_EXP 96
35023: PPUSH
35024: LD_VAR 0 1
35028: PPUSH
35029: LD_VAR 0 1
35033: PPUSH
35034: CALL_OW 255
35038: PUSH
35039: LD_VAR 0 1
35043: PUSH
35044: LD_VAR 0 2
35048: PUSH
35049: LD_VAR 0 3
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: PPUSH
35060: CALL_OW 1
35064: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35065: CALL 35074 0 0
// end ;
35069: LD_VAR 0 4
35073: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35074: LD_INT 0
35076: PPUSH
35077: PPUSH
35078: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35079: LD_STRING resetFactoryWaypoint();
35081: PPUSH
35082: CALL_OW 559
// if factoryWaypoints then
35086: LD_EXP 96
35090: IFFALSE 35216
// begin list := PrepareArray ( factoryWaypoints ) ;
35092: LD_ADDR_VAR 0 3
35096: PUSH
35097: LD_EXP 96
35101: PPUSH
35102: CALL 82513 0 1
35106: ST_TO_ADDR
// for i := 1 to list do
35107: LD_ADDR_VAR 0 2
35111: PUSH
35112: DOUBLE
35113: LD_INT 1
35115: DEC
35116: ST_TO_ADDR
35117: LD_VAR 0 3
35121: PUSH
35122: FOR_TO
35123: IFFALSE 35214
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35125: LD_STRING setFactoryWaypointXY(
35127: PUSH
35128: LD_VAR 0 3
35132: PUSH
35133: LD_VAR 0 2
35137: ARRAY
35138: PUSH
35139: LD_INT 1
35141: ARRAY
35142: STR
35143: PUSH
35144: LD_STRING ,
35146: STR
35147: PUSH
35148: LD_VAR 0 3
35152: PUSH
35153: LD_VAR 0 2
35157: ARRAY
35158: PUSH
35159: LD_INT 2
35161: ARRAY
35162: STR
35163: PUSH
35164: LD_STRING ,
35166: STR
35167: PUSH
35168: LD_VAR 0 3
35172: PUSH
35173: LD_VAR 0 2
35177: ARRAY
35178: PUSH
35179: LD_INT 3
35181: ARRAY
35182: STR
35183: PUSH
35184: LD_STRING ,
35186: STR
35187: PUSH
35188: LD_VAR 0 3
35192: PUSH
35193: LD_VAR 0 2
35197: ARRAY
35198: PUSH
35199: LD_INT 4
35201: ARRAY
35202: STR
35203: PUSH
35204: LD_STRING )
35206: STR
35207: PPUSH
35208: CALL_OW 559
35212: GO 35122
35214: POP
35215: POP
// end ; end ;
35216: LD_VAR 0 1
35220: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35221: LD_INT 0
35223: PPUSH
// if HexInfo ( x , y ) = warehouse then
35224: LD_VAR 0 2
35228: PPUSH
35229: LD_VAR 0 3
35233: PPUSH
35234: CALL_OW 428
35238: PUSH
35239: LD_VAR 0 1
35243: EQUAL
35244: IFFALSE 35271
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35246: LD_ADDR_EXP 97
35250: PUSH
35251: LD_EXP 97
35255: PPUSH
35256: LD_VAR 0 1
35260: PPUSH
35261: LD_INT 0
35263: PPUSH
35264: CALL_OW 1
35268: ST_TO_ADDR
35269: GO 35322
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35271: LD_ADDR_EXP 97
35275: PUSH
35276: LD_EXP 97
35280: PPUSH
35281: LD_VAR 0 1
35285: PPUSH
35286: LD_VAR 0 1
35290: PPUSH
35291: CALL_OW 255
35295: PUSH
35296: LD_VAR 0 1
35300: PUSH
35301: LD_VAR 0 2
35305: PUSH
35306: LD_VAR 0 3
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: PPUSH
35317: CALL_OW 1
35321: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35322: CALL 35331 0 0
// end ;
35326: LD_VAR 0 4
35330: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35331: LD_INT 0
35333: PPUSH
35334: PPUSH
35335: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35336: LD_STRING resetWarehouseGatheringPoints();
35338: PPUSH
35339: CALL_OW 559
// if warehouseGatheringPoints then
35343: LD_EXP 97
35347: IFFALSE 35473
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35349: LD_ADDR_VAR 0 3
35353: PUSH
35354: LD_EXP 97
35358: PPUSH
35359: CALL 82513 0 1
35363: ST_TO_ADDR
// for i := 1 to list do
35364: LD_ADDR_VAR 0 2
35368: PUSH
35369: DOUBLE
35370: LD_INT 1
35372: DEC
35373: ST_TO_ADDR
35374: LD_VAR 0 3
35378: PUSH
35379: FOR_TO
35380: IFFALSE 35471
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35382: LD_STRING setWarehouseGatheringPointXY(
35384: PUSH
35385: LD_VAR 0 3
35389: PUSH
35390: LD_VAR 0 2
35394: ARRAY
35395: PUSH
35396: LD_INT 1
35398: ARRAY
35399: STR
35400: PUSH
35401: LD_STRING ,
35403: STR
35404: PUSH
35405: LD_VAR 0 3
35409: PUSH
35410: LD_VAR 0 2
35414: ARRAY
35415: PUSH
35416: LD_INT 2
35418: ARRAY
35419: STR
35420: PUSH
35421: LD_STRING ,
35423: STR
35424: PUSH
35425: LD_VAR 0 3
35429: PUSH
35430: LD_VAR 0 2
35434: ARRAY
35435: PUSH
35436: LD_INT 3
35438: ARRAY
35439: STR
35440: PUSH
35441: LD_STRING ,
35443: STR
35444: PUSH
35445: LD_VAR 0 3
35449: PUSH
35450: LD_VAR 0 2
35454: ARRAY
35455: PUSH
35456: LD_INT 4
35458: ARRAY
35459: STR
35460: PUSH
35461: LD_STRING )
35463: STR
35464: PPUSH
35465: CALL_OW 559
35469: GO 35379
35471: POP
35472: POP
// end ; end ;
35473: LD_VAR 0 1
35477: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35478: LD_EXP 97
35482: IFFALSE 36167
35484: GO 35486
35486: DISABLE
35487: LD_INT 0
35489: PPUSH
35490: PPUSH
35491: PPUSH
35492: PPUSH
35493: PPUSH
35494: PPUSH
35495: PPUSH
35496: PPUSH
35497: PPUSH
// begin enable ;
35498: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35499: LD_ADDR_VAR 0 3
35503: PUSH
35504: LD_EXP 97
35508: PPUSH
35509: CALL 82513 0 1
35513: ST_TO_ADDR
// if not list then
35514: LD_VAR 0 3
35518: NOT
35519: IFFALSE 35523
// exit ;
35521: GO 36167
// for i := 1 to list do
35523: LD_ADDR_VAR 0 1
35527: PUSH
35528: DOUBLE
35529: LD_INT 1
35531: DEC
35532: ST_TO_ADDR
35533: LD_VAR 0 3
35537: PUSH
35538: FOR_TO
35539: IFFALSE 36165
// begin depot := list [ i ] [ 2 ] ;
35541: LD_ADDR_VAR 0 8
35545: PUSH
35546: LD_VAR 0 3
35550: PUSH
35551: LD_VAR 0 1
35555: ARRAY
35556: PUSH
35557: LD_INT 2
35559: ARRAY
35560: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35561: LD_ADDR_VAR 0 5
35565: PUSH
35566: LD_VAR 0 3
35570: PUSH
35571: LD_VAR 0 1
35575: ARRAY
35576: PUSH
35577: LD_INT 1
35579: ARRAY
35580: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35581: LD_VAR 0 8
35585: PPUSH
35586: CALL_OW 301
35590: PUSH
35591: LD_VAR 0 5
35595: PUSH
35596: LD_VAR 0 8
35600: PPUSH
35601: CALL_OW 255
35605: NONEQUAL
35606: OR
35607: IFFALSE 35636
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35609: LD_ADDR_EXP 97
35613: PUSH
35614: LD_EXP 97
35618: PPUSH
35619: LD_VAR 0 8
35623: PPUSH
35624: LD_INT 0
35626: PPUSH
35627: CALL_OW 1
35631: ST_TO_ADDR
// exit ;
35632: POP
35633: POP
35634: GO 36167
// end ; x := list [ i ] [ 3 ] ;
35636: LD_ADDR_VAR 0 6
35640: PUSH
35641: LD_VAR 0 3
35645: PUSH
35646: LD_VAR 0 1
35650: ARRAY
35651: PUSH
35652: LD_INT 3
35654: ARRAY
35655: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35656: LD_ADDR_VAR 0 7
35660: PUSH
35661: LD_VAR 0 3
35665: PUSH
35666: LD_VAR 0 1
35670: ARRAY
35671: PUSH
35672: LD_INT 4
35674: ARRAY
35675: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35676: LD_ADDR_VAR 0 9
35680: PUSH
35681: LD_VAR 0 6
35685: PPUSH
35686: LD_VAR 0 7
35690: PPUSH
35691: LD_INT 16
35693: PPUSH
35694: CALL 81101 0 3
35698: ST_TO_ADDR
// if not cratesNearbyPoint then
35699: LD_VAR 0 9
35703: NOT
35704: IFFALSE 35710
// exit ;
35706: POP
35707: POP
35708: GO 36167
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35710: LD_ADDR_VAR 0 4
35714: PUSH
35715: LD_INT 22
35717: PUSH
35718: LD_VAR 0 5
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 3
35729: PUSH
35730: LD_INT 60
35732: PUSH
35733: EMPTY
35734: LIST
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 91
35742: PUSH
35743: LD_VAR 0 8
35747: PUSH
35748: LD_INT 6
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 2
35758: PUSH
35759: LD_INT 25
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 25
35771: PUSH
35772: LD_INT 16
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: PPUSH
35790: CALL_OW 69
35794: PUSH
35795: LD_VAR 0 8
35799: PPUSH
35800: CALL_OW 313
35804: PPUSH
35805: LD_INT 3
35807: PUSH
35808: LD_INT 60
35810: PUSH
35811: EMPTY
35812: LIST
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 2
35820: PUSH
35821: LD_INT 25
35823: PUSH
35824: LD_INT 2
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 25
35833: PUSH
35834: LD_INT 16
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PPUSH
35850: CALL_OW 72
35854: UNION
35855: ST_TO_ADDR
// if tmp then
35856: LD_VAR 0 4
35860: IFFALSE 35940
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35862: LD_ADDR_VAR 0 4
35866: PUSH
35867: LD_VAR 0 4
35871: PPUSH
35872: LD_INT 3
35874: PPUSH
35875: CALL 79070 0 2
35879: ST_TO_ADDR
// for j in tmp do
35880: LD_ADDR_VAR 0 2
35884: PUSH
35885: LD_VAR 0 4
35889: PUSH
35890: FOR_IN
35891: IFFALSE 35934
// begin if IsInUnit ( j ) then
35893: LD_VAR 0 2
35897: PPUSH
35898: CALL_OW 310
35902: IFFALSE 35913
// ComExit ( j ) ;
35904: LD_VAR 0 2
35908: PPUSH
35909: CALL 79153 0 1
// AddComCollect ( j , x , y ) ;
35913: LD_VAR 0 2
35917: PPUSH
35918: LD_VAR 0 6
35922: PPUSH
35923: LD_VAR 0 7
35927: PPUSH
35928: CALL_OW 177
// end ;
35932: GO 35890
35934: POP
35935: POP
// exit ;
35936: POP
35937: POP
35938: GO 36167
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35940: LD_ADDR_VAR 0 4
35944: PUSH
35945: LD_INT 22
35947: PUSH
35948: LD_VAR 0 5
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 91
35959: PUSH
35960: LD_VAR 0 8
35964: PUSH
35965: LD_INT 8
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: LD_INT 34
35978: PUSH
35979: LD_INT 12
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 34
35988: PUSH
35989: LD_INT 51
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 34
35998: PUSH
35999: LD_INT 32
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 34
36008: PUSH
36009: LD_INT 89
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: LIST
36027: PPUSH
36028: CALL_OW 69
36032: ST_TO_ADDR
// if tmp then
36033: LD_VAR 0 4
36037: IFFALSE 36163
// begin for j in tmp do
36039: LD_ADDR_VAR 0 2
36043: PUSH
36044: LD_VAR 0 4
36048: PUSH
36049: FOR_IN
36050: IFFALSE 36161
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36052: LD_VAR 0 2
36056: PPUSH
36057: CALL_OW 262
36061: PUSH
36062: LD_INT 3
36064: EQUAL
36065: PUSH
36066: LD_VAR 0 2
36070: PPUSH
36071: CALL_OW 261
36075: PUSH
36076: LD_INT 20
36078: GREATER
36079: OR
36080: PUSH
36081: LD_VAR 0 2
36085: PPUSH
36086: CALL_OW 314
36090: NOT
36091: AND
36092: PUSH
36093: LD_VAR 0 2
36097: PPUSH
36098: CALL_OW 263
36102: PUSH
36103: LD_INT 1
36105: NONEQUAL
36106: PUSH
36107: LD_VAR 0 2
36111: PPUSH
36112: CALL_OW 311
36116: OR
36117: AND
36118: IFFALSE 36159
// begin ComCollect ( j , x , y ) ;
36120: LD_VAR 0 2
36124: PPUSH
36125: LD_VAR 0 6
36129: PPUSH
36130: LD_VAR 0 7
36134: PPUSH
36135: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36139: LD_VAR 0 2
36143: PPUSH
36144: LD_VAR 0 8
36148: PPUSH
36149: CALL_OW 172
// exit ;
36153: POP
36154: POP
36155: POP
36156: POP
36157: GO 36167
// end ;
36159: GO 36049
36161: POP
36162: POP
// end ; end ;
36163: GO 35538
36165: POP
36166: POP
// end ; end_of_file
36167: PPOPN 9
36169: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36170: LD_INT 0
36172: PPUSH
36173: PPUSH
36174: PPUSH
36175: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36176: LD_VAR 0 1
36180: PPUSH
36181: CALL_OW 264
36185: PUSH
36186: LD_INT 91
36188: EQUAL
36189: IFFALSE 36261
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36191: LD_INT 68
36193: PPUSH
36194: LD_VAR 0 1
36198: PPUSH
36199: CALL_OW 255
36203: PPUSH
36204: CALL_OW 321
36208: PUSH
36209: LD_INT 2
36211: EQUAL
36212: IFFALSE 36224
// eff := 70 else
36214: LD_ADDR_VAR 0 4
36218: PUSH
36219: LD_INT 70
36221: ST_TO_ADDR
36222: GO 36232
// eff := 30 ;
36224: LD_ADDR_VAR 0 4
36228: PUSH
36229: LD_INT 30
36231: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36232: LD_VAR 0 1
36236: PPUSH
36237: CALL_OW 250
36241: PPUSH
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL_OW 251
36251: PPUSH
36252: LD_VAR 0 4
36256: PPUSH
36257: CALL_OW 495
// end ; end ;
36261: LD_VAR 0 2
36265: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36266: LD_INT 0
36268: PPUSH
// end ;
36269: LD_VAR 0 4
36273: RET
// export function SOS_Command ( cmd ) ; begin
36274: LD_INT 0
36276: PPUSH
// end ;
36277: LD_VAR 0 2
36281: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36282: LD_INT 0
36284: PPUSH
// end ;
36285: LD_VAR 0 6
36289: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36290: LD_INT 0
36292: PPUSH
36293: PPUSH
// if not vehicle or not factory then
36294: LD_VAR 0 1
36298: NOT
36299: PUSH
36300: LD_VAR 0 2
36304: NOT
36305: OR
36306: IFFALSE 36310
// exit ;
36308: GO 36541
// if factoryWaypoints >= factory then
36310: LD_EXP 96
36314: PUSH
36315: LD_VAR 0 2
36319: GREATEREQUAL
36320: IFFALSE 36541
// if factoryWaypoints [ factory ] then
36322: LD_EXP 96
36326: PUSH
36327: LD_VAR 0 2
36331: ARRAY
36332: IFFALSE 36541
// begin if GetControl ( vehicle ) = control_manual then
36334: LD_VAR 0 1
36338: PPUSH
36339: CALL_OW 263
36343: PUSH
36344: LD_INT 1
36346: EQUAL
36347: IFFALSE 36428
// begin driver := IsDrivenBy ( vehicle ) ;
36349: LD_ADDR_VAR 0 4
36353: PUSH
36354: LD_VAR 0 1
36358: PPUSH
36359: CALL_OW 311
36363: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36364: LD_VAR 0 4
36368: PPUSH
36369: LD_EXP 96
36373: PUSH
36374: LD_VAR 0 2
36378: ARRAY
36379: PUSH
36380: LD_INT 3
36382: ARRAY
36383: PPUSH
36384: LD_EXP 96
36388: PUSH
36389: LD_VAR 0 2
36393: ARRAY
36394: PUSH
36395: LD_INT 4
36397: ARRAY
36398: PPUSH
36399: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36403: LD_VAR 0 4
36407: PPUSH
36408: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36412: LD_VAR 0 4
36416: PPUSH
36417: LD_VAR 0 2
36421: PPUSH
36422: CALL_OW 180
// end else
36426: GO 36541
// if GetControl ( vehicle ) = control_remote then
36428: LD_VAR 0 1
36432: PPUSH
36433: CALL_OW 263
36437: PUSH
36438: LD_INT 2
36440: EQUAL
36441: IFFALSE 36502
// begin wait ( 0 0$2 ) ;
36443: LD_INT 70
36445: PPUSH
36446: CALL_OW 67
// if Connect ( vehicle ) then
36450: LD_VAR 0 1
36454: PPUSH
36455: CALL 49372 0 1
36459: IFFALSE 36500
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36461: LD_VAR 0 1
36465: PPUSH
36466: LD_EXP 96
36470: PUSH
36471: LD_VAR 0 2
36475: ARRAY
36476: PUSH
36477: LD_INT 3
36479: ARRAY
36480: PPUSH
36481: LD_EXP 96
36485: PUSH
36486: LD_VAR 0 2
36490: ARRAY
36491: PUSH
36492: LD_INT 4
36494: ARRAY
36495: PPUSH
36496: CALL_OW 171
// end else
36500: GO 36541
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36502: LD_VAR 0 1
36506: PPUSH
36507: LD_EXP 96
36511: PUSH
36512: LD_VAR 0 2
36516: ARRAY
36517: PUSH
36518: LD_INT 3
36520: ARRAY
36521: PPUSH
36522: LD_EXP 96
36526: PUSH
36527: LD_VAR 0 2
36531: ARRAY
36532: PUSH
36533: LD_INT 4
36535: ARRAY
36536: PPUSH
36537: CALL_OW 171
// end ; end ;
36541: LD_VAR 0 3
36545: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36546: LD_INT 0
36548: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36549: LD_VAR 0 1
36553: PUSH
36554: LD_INT 250
36556: EQUAL
36557: PUSH
36558: LD_VAR 0 2
36562: PPUSH
36563: CALL_OW 264
36567: PUSH
36568: LD_INT 81
36570: EQUAL
36571: AND
36572: IFFALSE 36593
// MinerPlaceMine ( unit , x , y ) ;
36574: LD_VAR 0 2
36578: PPUSH
36579: LD_VAR 0 4
36583: PPUSH
36584: LD_VAR 0 5
36588: PPUSH
36589: CALL 39583 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36593: LD_VAR 0 1
36597: PUSH
36598: LD_INT 251
36600: EQUAL
36601: PUSH
36602: LD_VAR 0 2
36606: PPUSH
36607: CALL_OW 264
36611: PUSH
36612: LD_INT 81
36614: EQUAL
36615: AND
36616: IFFALSE 36637
// MinerDetonateMine ( unit , x , y ) ;
36618: LD_VAR 0 2
36622: PPUSH
36623: LD_VAR 0 4
36627: PPUSH
36628: LD_VAR 0 5
36632: PPUSH
36633: CALL 39858 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36637: LD_VAR 0 1
36641: PUSH
36642: LD_INT 252
36644: EQUAL
36645: PUSH
36646: LD_VAR 0 2
36650: PPUSH
36651: CALL_OW 264
36655: PUSH
36656: LD_INT 81
36658: EQUAL
36659: AND
36660: IFFALSE 36681
// MinerCreateMinefield ( unit , x , y ) ;
36662: LD_VAR 0 2
36666: PPUSH
36667: LD_VAR 0 4
36671: PPUSH
36672: LD_VAR 0 5
36676: PPUSH
36677: CALL 40275 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36681: LD_VAR 0 1
36685: PUSH
36686: LD_INT 253
36688: EQUAL
36689: PUSH
36690: LD_VAR 0 2
36694: PPUSH
36695: CALL_OW 257
36699: PUSH
36700: LD_INT 5
36702: EQUAL
36703: AND
36704: IFFALSE 36725
// ComBinocular ( unit , x , y ) ;
36706: LD_VAR 0 2
36710: PPUSH
36711: LD_VAR 0 4
36715: PPUSH
36716: LD_VAR 0 5
36720: PPUSH
36721: CALL 40644 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36725: LD_VAR 0 1
36729: PUSH
36730: LD_INT 254
36732: EQUAL
36733: PUSH
36734: LD_VAR 0 2
36738: PPUSH
36739: CALL_OW 264
36743: PUSH
36744: LD_INT 99
36746: EQUAL
36747: AND
36748: PUSH
36749: LD_VAR 0 3
36753: PPUSH
36754: CALL_OW 263
36758: PUSH
36759: LD_INT 3
36761: EQUAL
36762: AND
36763: IFFALSE 36779
// HackDestroyVehicle ( unit , selectedUnit ) ;
36765: LD_VAR 0 2
36769: PPUSH
36770: LD_VAR 0 3
36774: PPUSH
36775: CALL 38947 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36779: LD_VAR 0 1
36783: PUSH
36784: LD_INT 255
36786: EQUAL
36787: PUSH
36788: LD_VAR 0 2
36792: PPUSH
36793: CALL_OW 264
36797: PUSH
36798: LD_INT 14
36800: PUSH
36801: LD_INT 53
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: IN
36808: AND
36809: PUSH
36810: LD_VAR 0 4
36814: PPUSH
36815: LD_VAR 0 5
36819: PPUSH
36820: CALL_OW 488
36824: AND
36825: IFFALSE 36849
// CutTreeXYR ( unit , x , y , 12 ) ;
36827: LD_VAR 0 2
36831: PPUSH
36832: LD_VAR 0 4
36836: PPUSH
36837: LD_VAR 0 5
36841: PPUSH
36842: LD_INT 12
36844: PPUSH
36845: CALL 36944 0 4
// if cmd = 256 then
36849: LD_VAR 0 1
36853: PUSH
36854: LD_INT 256
36856: EQUAL
36857: IFFALSE 36878
// SetFactoryWaypoint ( unit , x , y ) ;
36859: LD_VAR 0 2
36863: PPUSH
36864: LD_VAR 0 4
36868: PPUSH
36869: LD_VAR 0 5
36873: PPUSH
36874: CALL 34859 0 3
// if cmd = 257 then
36878: LD_VAR 0 1
36882: PUSH
36883: LD_INT 257
36885: EQUAL
36886: IFFALSE 36907
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36888: LD_VAR 0 2
36892: PPUSH
36893: LD_VAR 0 4
36897: PPUSH
36898: LD_VAR 0 5
36902: PPUSH
36903: CALL 35221 0 3
// if cmd = 258 then
36907: LD_VAR 0 1
36911: PUSH
36912: LD_INT 258
36914: EQUAL
36915: IFFALSE 36939
// BurnTreeXYR ( unit , x , y , 8 ) ;
36917: LD_VAR 0 2
36921: PPUSH
36922: LD_VAR 0 4
36926: PPUSH
36927: LD_VAR 0 5
36931: PPUSH
36932: LD_INT 8
36934: PPUSH
36935: CALL 37338 0 4
// end ;
36939: LD_VAR 0 6
36943: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36944: LD_INT 0
36946: PPUSH
36947: PPUSH
36948: PPUSH
36949: PPUSH
36950: PPUSH
36951: PPUSH
36952: PPUSH
36953: PPUSH
36954: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36955: LD_VAR 0 1
36959: PPUSH
36960: CALL_OW 302
36964: NOT
36965: PUSH
36966: LD_VAR 0 2
36970: PPUSH
36971: LD_VAR 0 3
36975: PPUSH
36976: CALL_OW 488
36980: NOT
36981: OR
36982: PUSH
36983: LD_VAR 0 4
36987: NOT
36988: OR
36989: IFFALSE 36993
// exit ;
36991: GO 37333
// list := [ ] ;
36993: LD_ADDR_VAR 0 13
36997: PUSH
36998: EMPTY
36999: ST_TO_ADDR
// if x - r < 0 then
37000: LD_VAR 0 2
37004: PUSH
37005: LD_VAR 0 4
37009: MINUS
37010: PUSH
37011: LD_INT 0
37013: LESS
37014: IFFALSE 37026
// min_x := 0 else
37016: LD_ADDR_VAR 0 7
37020: PUSH
37021: LD_INT 0
37023: ST_TO_ADDR
37024: GO 37042
// min_x := x - r ;
37026: LD_ADDR_VAR 0 7
37030: PUSH
37031: LD_VAR 0 2
37035: PUSH
37036: LD_VAR 0 4
37040: MINUS
37041: ST_TO_ADDR
// if y - r < 0 then
37042: LD_VAR 0 3
37046: PUSH
37047: LD_VAR 0 4
37051: MINUS
37052: PUSH
37053: LD_INT 0
37055: LESS
37056: IFFALSE 37068
// min_y := 0 else
37058: LD_ADDR_VAR 0 8
37062: PUSH
37063: LD_INT 0
37065: ST_TO_ADDR
37066: GO 37084
// min_y := y - r ;
37068: LD_ADDR_VAR 0 8
37072: PUSH
37073: LD_VAR 0 3
37077: PUSH
37078: LD_VAR 0 4
37082: MINUS
37083: ST_TO_ADDR
// max_x := x + r ;
37084: LD_ADDR_VAR 0 9
37088: PUSH
37089: LD_VAR 0 2
37093: PUSH
37094: LD_VAR 0 4
37098: PLUS
37099: ST_TO_ADDR
// max_y := y + r ;
37100: LD_ADDR_VAR 0 10
37104: PUSH
37105: LD_VAR 0 3
37109: PUSH
37110: LD_VAR 0 4
37114: PLUS
37115: ST_TO_ADDR
// for _x = min_x to max_x do
37116: LD_ADDR_VAR 0 11
37120: PUSH
37121: DOUBLE
37122: LD_VAR 0 7
37126: DEC
37127: ST_TO_ADDR
37128: LD_VAR 0 9
37132: PUSH
37133: FOR_TO
37134: IFFALSE 37251
// for _y = min_y to max_y do
37136: LD_ADDR_VAR 0 12
37140: PUSH
37141: DOUBLE
37142: LD_VAR 0 8
37146: DEC
37147: ST_TO_ADDR
37148: LD_VAR 0 10
37152: PUSH
37153: FOR_TO
37154: IFFALSE 37247
// begin if not ValidHex ( _x , _y ) then
37156: LD_VAR 0 11
37160: PPUSH
37161: LD_VAR 0 12
37165: PPUSH
37166: CALL_OW 488
37170: NOT
37171: IFFALSE 37175
// continue ;
37173: GO 37153
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37175: LD_VAR 0 11
37179: PPUSH
37180: LD_VAR 0 12
37184: PPUSH
37185: CALL_OW 351
37189: PUSH
37190: LD_VAR 0 11
37194: PPUSH
37195: LD_VAR 0 12
37199: PPUSH
37200: CALL_OW 554
37204: AND
37205: IFFALSE 37245
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37207: LD_ADDR_VAR 0 13
37211: PUSH
37212: LD_VAR 0 13
37216: PPUSH
37217: LD_VAR 0 13
37221: PUSH
37222: LD_INT 1
37224: PLUS
37225: PPUSH
37226: LD_VAR 0 11
37230: PUSH
37231: LD_VAR 0 12
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PPUSH
37240: CALL_OW 2
37244: ST_TO_ADDR
// end ;
37245: GO 37153
37247: POP
37248: POP
37249: GO 37133
37251: POP
37252: POP
// if not list then
37253: LD_VAR 0 13
37257: NOT
37258: IFFALSE 37262
// exit ;
37260: GO 37333
// for i in list do
37262: LD_ADDR_VAR 0 6
37266: PUSH
37267: LD_VAR 0 13
37271: PUSH
37272: FOR_IN
37273: IFFALSE 37331
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37275: LD_VAR 0 1
37279: PPUSH
37280: LD_STRING M
37282: PUSH
37283: LD_VAR 0 6
37287: PUSH
37288: LD_INT 1
37290: ARRAY
37291: PUSH
37292: LD_VAR 0 6
37296: PUSH
37297: LD_INT 2
37299: ARRAY
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: PUSH
37322: EMPTY
37323: LIST
37324: PPUSH
37325: CALL_OW 447
37329: GO 37272
37331: POP
37332: POP
// end ;
37333: LD_VAR 0 5
37337: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37338: LD_INT 0
37340: PPUSH
37341: PPUSH
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
37346: PPUSH
37347: PPUSH
37348: PPUSH
37349: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 302
37359: NOT
37360: PUSH
37361: LD_VAR 0 2
37365: PPUSH
37366: LD_VAR 0 3
37370: PPUSH
37371: CALL_OW 488
37375: NOT
37376: OR
37377: PUSH
37378: LD_VAR 0 4
37382: NOT
37383: OR
37384: IFFALSE 37388
// exit ;
37386: GO 37901
// list := [ ] ;
37388: LD_ADDR_VAR 0 13
37392: PUSH
37393: EMPTY
37394: ST_TO_ADDR
// if x - r < 0 then
37395: LD_VAR 0 2
37399: PUSH
37400: LD_VAR 0 4
37404: MINUS
37405: PUSH
37406: LD_INT 0
37408: LESS
37409: IFFALSE 37421
// min_x := 0 else
37411: LD_ADDR_VAR 0 7
37415: PUSH
37416: LD_INT 0
37418: ST_TO_ADDR
37419: GO 37437
// min_x := x - r ;
37421: LD_ADDR_VAR 0 7
37425: PUSH
37426: LD_VAR 0 2
37430: PUSH
37431: LD_VAR 0 4
37435: MINUS
37436: ST_TO_ADDR
// if y - r < 0 then
37437: LD_VAR 0 3
37441: PUSH
37442: LD_VAR 0 4
37446: MINUS
37447: PUSH
37448: LD_INT 0
37450: LESS
37451: IFFALSE 37463
// min_y := 0 else
37453: LD_ADDR_VAR 0 8
37457: PUSH
37458: LD_INT 0
37460: ST_TO_ADDR
37461: GO 37479
// min_y := y - r ;
37463: LD_ADDR_VAR 0 8
37467: PUSH
37468: LD_VAR 0 3
37472: PUSH
37473: LD_VAR 0 4
37477: MINUS
37478: ST_TO_ADDR
// max_x := x + r ;
37479: LD_ADDR_VAR 0 9
37483: PUSH
37484: LD_VAR 0 2
37488: PUSH
37489: LD_VAR 0 4
37493: PLUS
37494: ST_TO_ADDR
// max_y := y + r ;
37495: LD_ADDR_VAR 0 10
37499: PUSH
37500: LD_VAR 0 3
37504: PUSH
37505: LD_VAR 0 4
37509: PLUS
37510: ST_TO_ADDR
// for _x = min_x to max_x do
37511: LD_ADDR_VAR 0 11
37515: PUSH
37516: DOUBLE
37517: LD_VAR 0 7
37521: DEC
37522: ST_TO_ADDR
37523: LD_VAR 0 9
37527: PUSH
37528: FOR_TO
37529: IFFALSE 37646
// for _y = min_y to max_y do
37531: LD_ADDR_VAR 0 12
37535: PUSH
37536: DOUBLE
37537: LD_VAR 0 8
37541: DEC
37542: ST_TO_ADDR
37543: LD_VAR 0 10
37547: PUSH
37548: FOR_TO
37549: IFFALSE 37642
// begin if not ValidHex ( _x , _y ) then
37551: LD_VAR 0 11
37555: PPUSH
37556: LD_VAR 0 12
37560: PPUSH
37561: CALL_OW 488
37565: NOT
37566: IFFALSE 37570
// continue ;
37568: GO 37548
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37570: LD_VAR 0 11
37574: PPUSH
37575: LD_VAR 0 12
37579: PPUSH
37580: CALL_OW 351
37584: PUSH
37585: LD_VAR 0 11
37589: PPUSH
37590: LD_VAR 0 12
37594: PPUSH
37595: CALL_OW 554
37599: AND
37600: IFFALSE 37640
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37602: LD_ADDR_VAR 0 13
37606: PUSH
37607: LD_VAR 0 13
37611: PPUSH
37612: LD_VAR 0 13
37616: PUSH
37617: LD_INT 1
37619: PLUS
37620: PPUSH
37621: LD_VAR 0 11
37625: PUSH
37626: LD_VAR 0 12
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PPUSH
37635: CALL_OW 2
37639: ST_TO_ADDR
// end ;
37640: GO 37548
37642: POP
37643: POP
37644: GO 37528
37646: POP
37647: POP
// if not list then
37648: LD_VAR 0 13
37652: NOT
37653: IFFALSE 37657
// exit ;
37655: GO 37901
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37657: LD_ADDR_VAR 0 13
37661: PUSH
37662: LD_VAR 0 1
37666: PPUSH
37667: LD_VAR 0 13
37671: PPUSH
37672: LD_INT 1
37674: PPUSH
37675: LD_INT 1
37677: PPUSH
37678: CALL 46514 0 4
37682: ST_TO_ADDR
// ComStop ( flame ) ;
37683: LD_VAR 0 1
37687: PPUSH
37688: CALL_OW 141
// for i in list do
37692: LD_ADDR_VAR 0 6
37696: PUSH
37697: LD_VAR 0 13
37701: PUSH
37702: FOR_IN
37703: IFFALSE 37734
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37705: LD_VAR 0 1
37709: PPUSH
37710: LD_VAR 0 6
37714: PUSH
37715: LD_INT 1
37717: ARRAY
37718: PPUSH
37719: LD_VAR 0 6
37723: PUSH
37724: LD_INT 2
37726: ARRAY
37727: PPUSH
37728: CALL_OW 176
37732: GO 37702
37734: POP
37735: POP
// repeat wait ( 0 0$1 ) ;
37736: LD_INT 35
37738: PPUSH
37739: CALL_OW 67
// task := GetTaskList ( flame ) ;
37743: LD_ADDR_VAR 0 14
37747: PUSH
37748: LD_VAR 0 1
37752: PPUSH
37753: CALL_OW 437
37757: ST_TO_ADDR
// if not task then
37758: LD_VAR 0 14
37762: NOT
37763: IFFALSE 37767
// exit ;
37765: GO 37901
// if task [ 1 ] [ 1 ] <> | then
37767: LD_VAR 0 14
37771: PUSH
37772: LD_INT 1
37774: ARRAY
37775: PUSH
37776: LD_INT 1
37778: ARRAY
37779: PUSH
37780: LD_STRING |
37782: NONEQUAL
37783: IFFALSE 37787
// exit ;
37785: GO 37901
// _x := task [ 1 ] [ 2 ] ;
37787: LD_ADDR_VAR 0 11
37791: PUSH
37792: LD_VAR 0 14
37796: PUSH
37797: LD_INT 1
37799: ARRAY
37800: PUSH
37801: LD_INT 2
37803: ARRAY
37804: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37805: LD_ADDR_VAR 0 12
37809: PUSH
37810: LD_VAR 0 14
37814: PUSH
37815: LD_INT 1
37817: ARRAY
37818: PUSH
37819: LD_INT 3
37821: ARRAY
37822: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37823: LD_VAR 0 11
37827: PPUSH
37828: LD_VAR 0 12
37832: PPUSH
37833: CALL_OW 351
37837: NOT
37838: PUSH
37839: LD_VAR 0 11
37843: PPUSH
37844: LD_VAR 0 12
37848: PPUSH
37849: CALL_OW 554
37853: NOT
37854: OR
37855: IFFALSE 37889
// begin task := Delete ( task , 1 ) ;
37857: LD_ADDR_VAR 0 14
37861: PUSH
37862: LD_VAR 0 14
37866: PPUSH
37867: LD_INT 1
37869: PPUSH
37870: CALL_OW 3
37874: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37875: LD_VAR 0 1
37879: PPUSH
37880: LD_VAR 0 14
37884: PPUSH
37885: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37889: LD_VAR 0 1
37893: PPUSH
37894: CALL_OW 314
37898: NOT
37899: IFFALSE 37736
// end ;
37901: LD_VAR 0 5
37905: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37906: LD_EXP 99
37910: NOT
37911: IFFALSE 37961
37913: GO 37915
37915: DISABLE
// begin initHack := true ;
37916: LD_ADDR_EXP 99
37920: PUSH
37921: LD_INT 1
37923: ST_TO_ADDR
// hackTanks := [ ] ;
37924: LD_ADDR_EXP 100
37928: PUSH
37929: EMPTY
37930: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37931: LD_ADDR_EXP 101
37935: PUSH
37936: EMPTY
37937: ST_TO_ADDR
// hackLimit := 3 ;
37938: LD_ADDR_EXP 102
37942: PUSH
37943: LD_INT 3
37945: ST_TO_ADDR
// hackDist := 12 ;
37946: LD_ADDR_EXP 103
37950: PUSH
37951: LD_INT 12
37953: ST_TO_ADDR
// hackCounter := [ ] ;
37954: LD_ADDR_EXP 104
37958: PUSH
37959: EMPTY
37960: ST_TO_ADDR
// end ;
37961: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37962: LD_EXP 99
37966: PUSH
37967: LD_INT 34
37969: PUSH
37970: LD_INT 99
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PPUSH
37977: CALL_OW 69
37981: AND
37982: IFFALSE 38235
37984: GO 37986
37986: DISABLE
37987: LD_INT 0
37989: PPUSH
37990: PPUSH
// begin enable ;
37991: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37992: LD_ADDR_VAR 0 1
37996: PUSH
37997: LD_INT 34
37999: PUSH
38000: LD_INT 99
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PPUSH
38007: CALL_OW 69
38011: PUSH
38012: FOR_IN
38013: IFFALSE 38233
// begin if not i in hackTanks then
38015: LD_VAR 0 1
38019: PUSH
38020: LD_EXP 100
38024: IN
38025: NOT
38026: IFFALSE 38109
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38028: LD_ADDR_EXP 100
38032: PUSH
38033: LD_EXP 100
38037: PPUSH
38038: LD_EXP 100
38042: PUSH
38043: LD_INT 1
38045: PLUS
38046: PPUSH
38047: LD_VAR 0 1
38051: PPUSH
38052: CALL_OW 1
38056: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38057: LD_ADDR_EXP 101
38061: PUSH
38062: LD_EXP 101
38066: PPUSH
38067: LD_EXP 101
38071: PUSH
38072: LD_INT 1
38074: PLUS
38075: PPUSH
38076: EMPTY
38077: PPUSH
38078: CALL_OW 1
38082: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38083: LD_ADDR_EXP 104
38087: PUSH
38088: LD_EXP 104
38092: PPUSH
38093: LD_EXP 104
38097: PUSH
38098: LD_INT 1
38100: PLUS
38101: PPUSH
38102: EMPTY
38103: PPUSH
38104: CALL_OW 1
38108: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38109: LD_VAR 0 1
38113: PPUSH
38114: CALL_OW 302
38118: NOT
38119: IFFALSE 38132
// begin HackUnlinkAll ( i ) ;
38121: LD_VAR 0 1
38125: PPUSH
38126: CALL 38238 0 1
// continue ;
38130: GO 38012
// end ; HackCheckCapturedStatus ( i ) ;
38132: LD_VAR 0 1
38136: PPUSH
38137: CALL 38681 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38141: LD_ADDR_VAR 0 2
38145: PUSH
38146: LD_INT 81
38148: PUSH
38149: LD_VAR 0 1
38153: PPUSH
38154: CALL_OW 255
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 33
38165: PUSH
38166: LD_INT 3
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 91
38175: PUSH
38176: LD_VAR 0 1
38180: PUSH
38181: LD_EXP 103
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 50
38193: PUSH
38194: EMPTY
38195: LIST
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: PPUSH
38203: CALL_OW 69
38207: ST_TO_ADDR
// if not tmp then
38208: LD_VAR 0 2
38212: NOT
38213: IFFALSE 38217
// continue ;
38215: GO 38012
// HackLink ( i , tmp ) ;
38217: LD_VAR 0 1
38221: PPUSH
38222: LD_VAR 0 2
38226: PPUSH
38227: CALL 38374 0 2
// end ;
38231: GO 38012
38233: POP
38234: POP
// end ;
38235: PPOPN 2
38237: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38238: LD_INT 0
38240: PPUSH
38241: PPUSH
38242: PPUSH
// if not hack in hackTanks then
38243: LD_VAR 0 1
38247: PUSH
38248: LD_EXP 100
38252: IN
38253: NOT
38254: IFFALSE 38258
// exit ;
38256: GO 38369
// index := GetElementIndex ( hackTanks , hack ) ;
38258: LD_ADDR_VAR 0 4
38262: PUSH
38263: LD_EXP 100
38267: PPUSH
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL 45811 0 2
38277: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38278: LD_EXP 101
38282: PUSH
38283: LD_VAR 0 4
38287: ARRAY
38288: IFFALSE 38369
// begin for i in hackTanksCaptured [ index ] do
38290: LD_ADDR_VAR 0 3
38294: PUSH
38295: LD_EXP 101
38299: PUSH
38300: LD_VAR 0 4
38304: ARRAY
38305: PUSH
38306: FOR_IN
38307: IFFALSE 38333
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38309: LD_VAR 0 3
38313: PUSH
38314: LD_INT 1
38316: ARRAY
38317: PPUSH
38318: LD_VAR 0 3
38322: PUSH
38323: LD_INT 2
38325: ARRAY
38326: PPUSH
38327: CALL_OW 235
38331: GO 38306
38333: POP
38334: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38335: LD_ADDR_EXP 101
38339: PUSH
38340: LD_EXP 101
38344: PPUSH
38345: LD_VAR 0 4
38349: PPUSH
38350: EMPTY
38351: PPUSH
38352: CALL_OW 1
38356: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38357: LD_VAR 0 1
38361: PPUSH
38362: LD_INT 0
38364: PPUSH
38365: CALL_OW 505
// end ; end ;
38369: LD_VAR 0 2
38373: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38374: LD_INT 0
38376: PPUSH
38377: PPUSH
38378: PPUSH
// if not hack in hackTanks or not vehicles then
38379: LD_VAR 0 1
38383: PUSH
38384: LD_EXP 100
38388: IN
38389: NOT
38390: PUSH
38391: LD_VAR 0 2
38395: NOT
38396: OR
38397: IFFALSE 38401
// exit ;
38399: GO 38676
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38401: LD_ADDR_VAR 0 2
38405: PUSH
38406: LD_VAR 0 1
38410: PPUSH
38411: LD_VAR 0 2
38415: PPUSH
38416: LD_INT 1
38418: PPUSH
38419: LD_INT 1
38421: PPUSH
38422: CALL 46461 0 4
38426: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38427: LD_ADDR_VAR 0 5
38431: PUSH
38432: LD_EXP 100
38436: PPUSH
38437: LD_VAR 0 1
38441: PPUSH
38442: CALL 45811 0 2
38446: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38447: LD_EXP 101
38451: PUSH
38452: LD_VAR 0 5
38456: ARRAY
38457: PUSH
38458: LD_EXP 102
38462: LESS
38463: IFFALSE 38652
// begin for i := 1 to vehicles do
38465: LD_ADDR_VAR 0 4
38469: PUSH
38470: DOUBLE
38471: LD_INT 1
38473: DEC
38474: ST_TO_ADDR
38475: LD_VAR 0 2
38479: PUSH
38480: FOR_TO
38481: IFFALSE 38650
// begin if hackTanksCaptured [ index ] = hackLimit then
38483: LD_EXP 101
38487: PUSH
38488: LD_VAR 0 5
38492: ARRAY
38493: PUSH
38494: LD_EXP 102
38498: EQUAL
38499: IFFALSE 38503
// break ;
38501: GO 38650
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38503: LD_ADDR_EXP 104
38507: PUSH
38508: LD_EXP 104
38512: PPUSH
38513: LD_VAR 0 5
38517: PPUSH
38518: LD_EXP 104
38522: PUSH
38523: LD_VAR 0 5
38527: ARRAY
38528: PUSH
38529: LD_INT 1
38531: PLUS
38532: PPUSH
38533: CALL_OW 1
38537: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38538: LD_ADDR_EXP 101
38542: PUSH
38543: LD_EXP 101
38547: PPUSH
38548: LD_VAR 0 5
38552: PUSH
38553: LD_EXP 101
38557: PUSH
38558: LD_VAR 0 5
38562: ARRAY
38563: PUSH
38564: LD_INT 1
38566: PLUS
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PPUSH
38572: LD_VAR 0 2
38576: PUSH
38577: LD_VAR 0 4
38581: ARRAY
38582: PUSH
38583: LD_VAR 0 2
38587: PUSH
38588: LD_VAR 0 4
38592: ARRAY
38593: PPUSH
38594: CALL_OW 255
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PPUSH
38603: CALL 46026 0 3
38607: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38608: LD_VAR 0 2
38612: PUSH
38613: LD_VAR 0 4
38617: ARRAY
38618: PPUSH
38619: LD_VAR 0 1
38623: PPUSH
38624: CALL_OW 255
38628: PPUSH
38629: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38633: LD_VAR 0 2
38637: PUSH
38638: LD_VAR 0 4
38642: ARRAY
38643: PPUSH
38644: CALL_OW 141
// end ;
38648: GO 38480
38650: POP
38651: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38652: LD_VAR 0 1
38656: PPUSH
38657: LD_EXP 101
38661: PUSH
38662: LD_VAR 0 5
38666: ARRAY
38667: PUSH
38668: LD_INT 0
38670: PLUS
38671: PPUSH
38672: CALL_OW 505
// end ;
38676: LD_VAR 0 3
38680: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38681: LD_INT 0
38683: PPUSH
38684: PPUSH
38685: PPUSH
38686: PPUSH
// if not hack in hackTanks then
38687: LD_VAR 0 1
38691: PUSH
38692: LD_EXP 100
38696: IN
38697: NOT
38698: IFFALSE 38702
// exit ;
38700: GO 38942
// index := GetElementIndex ( hackTanks , hack ) ;
38702: LD_ADDR_VAR 0 4
38706: PUSH
38707: LD_EXP 100
38711: PPUSH
38712: LD_VAR 0 1
38716: PPUSH
38717: CALL 45811 0 2
38721: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38722: LD_ADDR_VAR 0 3
38726: PUSH
38727: DOUBLE
38728: LD_EXP 101
38732: PUSH
38733: LD_VAR 0 4
38737: ARRAY
38738: INC
38739: ST_TO_ADDR
38740: LD_INT 1
38742: PUSH
38743: FOR_DOWNTO
38744: IFFALSE 38916
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38746: LD_ADDR_VAR 0 5
38750: PUSH
38751: LD_EXP 101
38755: PUSH
38756: LD_VAR 0 4
38760: ARRAY
38761: PUSH
38762: LD_VAR 0 3
38766: ARRAY
38767: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38768: LD_VAR 0 5
38772: PUSH
38773: LD_INT 1
38775: ARRAY
38776: PPUSH
38777: CALL_OW 302
38781: NOT
38782: PUSH
38783: LD_VAR 0 5
38787: PUSH
38788: LD_INT 1
38790: ARRAY
38791: PPUSH
38792: CALL_OW 255
38796: PUSH
38797: LD_VAR 0 1
38801: PPUSH
38802: CALL_OW 255
38806: NONEQUAL
38807: OR
38808: IFFALSE 38914
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38810: LD_VAR 0 5
38814: PUSH
38815: LD_INT 1
38817: ARRAY
38818: PPUSH
38819: CALL_OW 305
38823: PUSH
38824: LD_VAR 0 5
38828: PUSH
38829: LD_INT 1
38831: ARRAY
38832: PPUSH
38833: CALL_OW 255
38837: PUSH
38838: LD_VAR 0 1
38842: PPUSH
38843: CALL_OW 255
38847: EQUAL
38848: AND
38849: IFFALSE 38873
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38851: LD_VAR 0 5
38855: PUSH
38856: LD_INT 1
38858: ARRAY
38859: PPUSH
38860: LD_VAR 0 5
38864: PUSH
38865: LD_INT 2
38867: ARRAY
38868: PPUSH
38869: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38873: LD_ADDR_EXP 101
38877: PUSH
38878: LD_EXP 101
38882: PPUSH
38883: LD_VAR 0 4
38887: PPUSH
38888: LD_EXP 101
38892: PUSH
38893: LD_VAR 0 4
38897: ARRAY
38898: PPUSH
38899: LD_VAR 0 3
38903: PPUSH
38904: CALL_OW 3
38908: PPUSH
38909: CALL_OW 1
38913: ST_TO_ADDR
// end ; end ;
38914: GO 38743
38916: POP
38917: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38918: LD_VAR 0 1
38922: PPUSH
38923: LD_EXP 101
38927: PUSH
38928: LD_VAR 0 4
38932: ARRAY
38933: PUSH
38934: LD_INT 0
38936: PLUS
38937: PPUSH
38938: CALL_OW 505
// end ;
38942: LD_VAR 0 2
38946: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38947: LD_INT 0
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
// if not hack in hackTanks then
38953: LD_VAR 0 1
38957: PUSH
38958: LD_EXP 100
38962: IN
38963: NOT
38964: IFFALSE 38968
// exit ;
38966: GO 39053
// index := GetElementIndex ( hackTanks , hack ) ;
38968: LD_ADDR_VAR 0 5
38972: PUSH
38973: LD_EXP 100
38977: PPUSH
38978: LD_VAR 0 1
38982: PPUSH
38983: CALL 45811 0 2
38987: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38988: LD_ADDR_VAR 0 4
38992: PUSH
38993: DOUBLE
38994: LD_INT 1
38996: DEC
38997: ST_TO_ADDR
38998: LD_EXP 101
39002: PUSH
39003: LD_VAR 0 5
39007: ARRAY
39008: PUSH
39009: FOR_TO
39010: IFFALSE 39051
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39012: LD_EXP 101
39016: PUSH
39017: LD_VAR 0 5
39021: ARRAY
39022: PUSH
39023: LD_VAR 0 4
39027: ARRAY
39028: PUSH
39029: LD_INT 1
39031: ARRAY
39032: PUSH
39033: LD_VAR 0 2
39037: EQUAL
39038: IFFALSE 39049
// KillUnit ( vehicle ) ;
39040: LD_VAR 0 2
39044: PPUSH
39045: CALL_OW 66
39049: GO 39009
39051: POP
39052: POP
// end ;
39053: LD_VAR 0 3
39057: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39058: LD_EXP 105
39062: NOT
39063: IFFALSE 39098
39065: GO 39067
39067: DISABLE
// begin initMiner := true ;
39068: LD_ADDR_EXP 105
39072: PUSH
39073: LD_INT 1
39075: ST_TO_ADDR
// minersList := [ ] ;
39076: LD_ADDR_EXP 106
39080: PUSH
39081: EMPTY
39082: ST_TO_ADDR
// minerMinesList := [ ] ;
39083: LD_ADDR_EXP 107
39087: PUSH
39088: EMPTY
39089: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39090: LD_ADDR_EXP 108
39094: PUSH
39095: LD_INT 5
39097: ST_TO_ADDR
// end ;
39098: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39099: LD_EXP 105
39103: PUSH
39104: LD_INT 34
39106: PUSH
39107: LD_INT 81
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PPUSH
39114: CALL_OW 69
39118: AND
39119: IFFALSE 39580
39121: GO 39123
39123: DISABLE
39124: LD_INT 0
39126: PPUSH
39127: PPUSH
39128: PPUSH
39129: PPUSH
// begin enable ;
39130: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39131: LD_ADDR_VAR 0 1
39135: PUSH
39136: LD_INT 34
39138: PUSH
39139: LD_INT 81
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PPUSH
39146: CALL_OW 69
39150: PUSH
39151: FOR_IN
39152: IFFALSE 39224
// begin if not i in minersList then
39154: LD_VAR 0 1
39158: PUSH
39159: LD_EXP 106
39163: IN
39164: NOT
39165: IFFALSE 39222
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39167: LD_ADDR_EXP 106
39171: PUSH
39172: LD_EXP 106
39176: PPUSH
39177: LD_EXP 106
39181: PUSH
39182: LD_INT 1
39184: PLUS
39185: PPUSH
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 1
39195: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39196: LD_ADDR_EXP 107
39200: PUSH
39201: LD_EXP 107
39205: PPUSH
39206: LD_EXP 107
39210: PUSH
39211: LD_INT 1
39213: PLUS
39214: PPUSH
39215: EMPTY
39216: PPUSH
39217: CALL_OW 1
39221: ST_TO_ADDR
// end end ;
39222: GO 39151
39224: POP
39225: POP
// for i := minerMinesList downto 1 do
39226: LD_ADDR_VAR 0 1
39230: PUSH
39231: DOUBLE
39232: LD_EXP 107
39236: INC
39237: ST_TO_ADDR
39238: LD_INT 1
39240: PUSH
39241: FOR_DOWNTO
39242: IFFALSE 39578
// begin if IsLive ( minersList [ i ] ) then
39244: LD_EXP 106
39248: PUSH
39249: LD_VAR 0 1
39253: ARRAY
39254: PPUSH
39255: CALL_OW 300
39259: IFFALSE 39287
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39261: LD_EXP 106
39265: PUSH
39266: LD_VAR 0 1
39270: ARRAY
39271: PPUSH
39272: LD_EXP 107
39276: PUSH
39277: LD_VAR 0 1
39281: ARRAY
39282: PPUSH
39283: CALL_OW 505
// if not minerMinesList [ i ] then
39287: LD_EXP 107
39291: PUSH
39292: LD_VAR 0 1
39296: ARRAY
39297: NOT
39298: IFFALSE 39302
// continue ;
39300: GO 39241
// for j := minerMinesList [ i ] downto 1 do
39302: LD_ADDR_VAR 0 2
39306: PUSH
39307: DOUBLE
39308: LD_EXP 107
39312: PUSH
39313: LD_VAR 0 1
39317: ARRAY
39318: INC
39319: ST_TO_ADDR
39320: LD_INT 1
39322: PUSH
39323: FOR_DOWNTO
39324: IFFALSE 39574
// begin side := GetSide ( minersList [ i ] ) ;
39326: LD_ADDR_VAR 0 3
39330: PUSH
39331: LD_EXP 106
39335: PUSH
39336: LD_VAR 0 1
39340: ARRAY
39341: PPUSH
39342: CALL_OW 255
39346: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39347: LD_ADDR_VAR 0 4
39351: PUSH
39352: LD_EXP 107
39356: PUSH
39357: LD_VAR 0 1
39361: ARRAY
39362: PUSH
39363: LD_VAR 0 2
39367: ARRAY
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PPUSH
39373: LD_EXP 107
39377: PUSH
39378: LD_VAR 0 1
39382: ARRAY
39383: PUSH
39384: LD_VAR 0 2
39388: ARRAY
39389: PUSH
39390: LD_INT 2
39392: ARRAY
39393: PPUSH
39394: CALL_OW 428
39398: ST_TO_ADDR
// if not tmp then
39399: LD_VAR 0 4
39403: NOT
39404: IFFALSE 39408
// continue ;
39406: GO 39323
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39408: LD_VAR 0 4
39412: PUSH
39413: LD_INT 81
39415: PUSH
39416: LD_VAR 0 3
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PPUSH
39425: CALL_OW 69
39429: IN
39430: PUSH
39431: LD_EXP 107
39435: PUSH
39436: LD_VAR 0 1
39440: ARRAY
39441: PUSH
39442: LD_VAR 0 2
39446: ARRAY
39447: PUSH
39448: LD_INT 1
39450: ARRAY
39451: PPUSH
39452: LD_EXP 107
39456: PUSH
39457: LD_VAR 0 1
39461: ARRAY
39462: PUSH
39463: LD_VAR 0 2
39467: ARRAY
39468: PUSH
39469: LD_INT 2
39471: ARRAY
39472: PPUSH
39473: CALL_OW 458
39477: AND
39478: IFFALSE 39572
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39480: LD_EXP 107
39484: PUSH
39485: LD_VAR 0 1
39489: ARRAY
39490: PUSH
39491: LD_VAR 0 2
39495: ARRAY
39496: PUSH
39497: LD_INT 1
39499: ARRAY
39500: PPUSH
39501: LD_EXP 107
39505: PUSH
39506: LD_VAR 0 1
39510: ARRAY
39511: PUSH
39512: LD_VAR 0 2
39516: ARRAY
39517: PUSH
39518: LD_INT 2
39520: ARRAY
39521: PPUSH
39522: LD_VAR 0 3
39526: PPUSH
39527: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39531: LD_ADDR_EXP 107
39535: PUSH
39536: LD_EXP 107
39540: PPUSH
39541: LD_VAR 0 1
39545: PPUSH
39546: LD_EXP 107
39550: PUSH
39551: LD_VAR 0 1
39555: ARRAY
39556: PPUSH
39557: LD_VAR 0 2
39561: PPUSH
39562: CALL_OW 3
39566: PPUSH
39567: CALL_OW 1
39571: ST_TO_ADDR
// end ; end ;
39572: GO 39323
39574: POP
39575: POP
// end ;
39576: GO 39241
39578: POP
39579: POP
// end ;
39580: PPOPN 4
39582: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39583: LD_INT 0
39585: PPUSH
39586: PPUSH
// result := false ;
39587: LD_ADDR_VAR 0 4
39591: PUSH
39592: LD_INT 0
39594: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39595: LD_VAR 0 1
39599: PPUSH
39600: CALL_OW 264
39604: PUSH
39605: LD_INT 81
39607: EQUAL
39608: NOT
39609: IFFALSE 39613
// exit ;
39611: GO 39853
// index := GetElementIndex ( minersList , unit ) ;
39613: LD_ADDR_VAR 0 5
39617: PUSH
39618: LD_EXP 106
39622: PPUSH
39623: LD_VAR 0 1
39627: PPUSH
39628: CALL 45811 0 2
39632: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39633: LD_EXP 107
39637: PUSH
39638: LD_VAR 0 5
39642: ARRAY
39643: PUSH
39644: LD_EXP 108
39648: GREATEREQUAL
39649: IFFALSE 39653
// exit ;
39651: GO 39853
// ComMoveXY ( unit , x , y ) ;
39653: LD_VAR 0 1
39657: PPUSH
39658: LD_VAR 0 2
39662: PPUSH
39663: LD_VAR 0 3
39667: PPUSH
39668: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39672: LD_INT 35
39674: PPUSH
39675: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39679: LD_VAR 0 1
39683: PPUSH
39684: LD_VAR 0 2
39688: PPUSH
39689: LD_VAR 0 3
39693: PPUSH
39694: CALL 77552 0 3
39698: NOT
39699: PUSH
39700: LD_VAR 0 1
39704: PPUSH
39705: CALL_OW 314
39709: AND
39710: IFFALSE 39714
// exit ;
39712: GO 39853
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39714: LD_VAR 0 2
39718: PPUSH
39719: LD_VAR 0 3
39723: PPUSH
39724: CALL_OW 428
39728: PUSH
39729: LD_VAR 0 1
39733: EQUAL
39734: PUSH
39735: LD_VAR 0 1
39739: PPUSH
39740: CALL_OW 314
39744: NOT
39745: AND
39746: IFFALSE 39672
// PlaySoundXY ( x , y , PlantMine ) ;
39748: LD_VAR 0 2
39752: PPUSH
39753: LD_VAR 0 3
39757: PPUSH
39758: LD_STRING PlantMine
39760: PPUSH
39761: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39765: LD_VAR 0 2
39769: PPUSH
39770: LD_VAR 0 3
39774: PPUSH
39775: LD_VAR 0 1
39779: PPUSH
39780: CALL_OW 255
39784: PPUSH
39785: LD_INT 0
39787: PPUSH
39788: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39792: LD_ADDR_EXP 107
39796: PUSH
39797: LD_EXP 107
39801: PPUSH
39802: LD_VAR 0 5
39806: PUSH
39807: LD_EXP 107
39811: PUSH
39812: LD_VAR 0 5
39816: ARRAY
39817: PUSH
39818: LD_INT 1
39820: PLUS
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PPUSH
39826: LD_VAR 0 2
39830: PUSH
39831: LD_VAR 0 3
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PPUSH
39840: CALL 46026 0 3
39844: ST_TO_ADDR
// result := true ;
39845: LD_ADDR_VAR 0 4
39849: PUSH
39850: LD_INT 1
39852: ST_TO_ADDR
// end ;
39853: LD_VAR 0 4
39857: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39858: LD_INT 0
39860: PPUSH
39861: PPUSH
39862: PPUSH
// if not unit in minersList then
39863: LD_VAR 0 1
39867: PUSH
39868: LD_EXP 106
39872: IN
39873: NOT
39874: IFFALSE 39878
// exit ;
39876: GO 40270
// index := GetElementIndex ( minersList , unit ) ;
39878: LD_ADDR_VAR 0 6
39882: PUSH
39883: LD_EXP 106
39887: PPUSH
39888: LD_VAR 0 1
39892: PPUSH
39893: CALL 45811 0 2
39897: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39898: LD_ADDR_VAR 0 5
39902: PUSH
39903: DOUBLE
39904: LD_EXP 107
39908: PUSH
39909: LD_VAR 0 6
39913: ARRAY
39914: INC
39915: ST_TO_ADDR
39916: LD_INT 1
39918: PUSH
39919: FOR_DOWNTO
39920: IFFALSE 40081
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39922: LD_EXP 107
39926: PUSH
39927: LD_VAR 0 6
39931: ARRAY
39932: PUSH
39933: LD_VAR 0 5
39937: ARRAY
39938: PUSH
39939: LD_INT 1
39941: ARRAY
39942: PUSH
39943: LD_VAR 0 2
39947: EQUAL
39948: PUSH
39949: LD_EXP 107
39953: PUSH
39954: LD_VAR 0 6
39958: ARRAY
39959: PUSH
39960: LD_VAR 0 5
39964: ARRAY
39965: PUSH
39966: LD_INT 2
39968: ARRAY
39969: PUSH
39970: LD_VAR 0 3
39974: EQUAL
39975: AND
39976: IFFALSE 40079
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39978: LD_EXP 107
39982: PUSH
39983: LD_VAR 0 6
39987: ARRAY
39988: PUSH
39989: LD_VAR 0 5
39993: ARRAY
39994: PUSH
39995: LD_INT 1
39997: ARRAY
39998: PPUSH
39999: LD_EXP 107
40003: PUSH
40004: LD_VAR 0 6
40008: ARRAY
40009: PUSH
40010: LD_VAR 0 5
40014: ARRAY
40015: PUSH
40016: LD_INT 2
40018: ARRAY
40019: PPUSH
40020: LD_VAR 0 1
40024: PPUSH
40025: CALL_OW 255
40029: PPUSH
40030: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40034: LD_ADDR_EXP 107
40038: PUSH
40039: LD_EXP 107
40043: PPUSH
40044: LD_VAR 0 6
40048: PPUSH
40049: LD_EXP 107
40053: PUSH
40054: LD_VAR 0 6
40058: ARRAY
40059: PPUSH
40060: LD_VAR 0 5
40064: PPUSH
40065: CALL_OW 3
40069: PPUSH
40070: CALL_OW 1
40074: ST_TO_ADDR
// exit ;
40075: POP
40076: POP
40077: GO 40270
// end ; end ;
40079: GO 39919
40081: POP
40082: POP
// for i := minerMinesList [ index ] downto 1 do
40083: LD_ADDR_VAR 0 5
40087: PUSH
40088: DOUBLE
40089: LD_EXP 107
40093: PUSH
40094: LD_VAR 0 6
40098: ARRAY
40099: INC
40100: ST_TO_ADDR
40101: LD_INT 1
40103: PUSH
40104: FOR_DOWNTO
40105: IFFALSE 40268
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40107: LD_EXP 107
40111: PUSH
40112: LD_VAR 0 6
40116: ARRAY
40117: PUSH
40118: LD_VAR 0 5
40122: ARRAY
40123: PUSH
40124: LD_INT 1
40126: ARRAY
40127: PPUSH
40128: LD_EXP 107
40132: PUSH
40133: LD_VAR 0 6
40137: ARRAY
40138: PUSH
40139: LD_VAR 0 5
40143: ARRAY
40144: PUSH
40145: LD_INT 2
40147: ARRAY
40148: PPUSH
40149: LD_VAR 0 2
40153: PPUSH
40154: LD_VAR 0 3
40158: PPUSH
40159: CALL_OW 298
40163: PUSH
40164: LD_INT 6
40166: LESS
40167: IFFALSE 40266
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40169: LD_EXP 107
40173: PUSH
40174: LD_VAR 0 6
40178: ARRAY
40179: PUSH
40180: LD_VAR 0 5
40184: ARRAY
40185: PUSH
40186: LD_INT 1
40188: ARRAY
40189: PPUSH
40190: LD_EXP 107
40194: PUSH
40195: LD_VAR 0 6
40199: ARRAY
40200: PUSH
40201: LD_VAR 0 5
40205: ARRAY
40206: PUSH
40207: LD_INT 2
40209: ARRAY
40210: PPUSH
40211: LD_VAR 0 1
40215: PPUSH
40216: CALL_OW 255
40220: PPUSH
40221: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40225: LD_ADDR_EXP 107
40229: PUSH
40230: LD_EXP 107
40234: PPUSH
40235: LD_VAR 0 6
40239: PPUSH
40240: LD_EXP 107
40244: PUSH
40245: LD_VAR 0 6
40249: ARRAY
40250: PPUSH
40251: LD_VAR 0 5
40255: PPUSH
40256: CALL_OW 3
40260: PPUSH
40261: CALL_OW 1
40265: ST_TO_ADDR
// end ; end ;
40266: GO 40104
40268: POP
40269: POP
// end ;
40270: LD_VAR 0 4
40274: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40275: LD_INT 0
40277: PPUSH
40278: PPUSH
40279: PPUSH
40280: PPUSH
40281: PPUSH
40282: PPUSH
40283: PPUSH
40284: PPUSH
40285: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40286: LD_VAR 0 1
40290: PPUSH
40291: CALL_OW 264
40295: PUSH
40296: LD_INT 81
40298: EQUAL
40299: NOT
40300: PUSH
40301: LD_VAR 0 1
40305: PUSH
40306: LD_EXP 106
40310: IN
40311: NOT
40312: OR
40313: IFFALSE 40317
// exit ;
40315: GO 40639
// index := GetElementIndex ( minersList , unit ) ;
40317: LD_ADDR_VAR 0 6
40321: PUSH
40322: LD_EXP 106
40326: PPUSH
40327: LD_VAR 0 1
40331: PPUSH
40332: CALL 45811 0 2
40336: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40337: LD_ADDR_VAR 0 8
40341: PUSH
40342: LD_EXP 108
40346: PUSH
40347: LD_EXP 107
40351: PUSH
40352: LD_VAR 0 6
40356: ARRAY
40357: MINUS
40358: ST_TO_ADDR
// if not minesFreeAmount then
40359: LD_VAR 0 8
40363: NOT
40364: IFFALSE 40368
// exit ;
40366: GO 40639
// tmp := [ ] ;
40368: LD_ADDR_VAR 0 7
40372: PUSH
40373: EMPTY
40374: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40375: LD_ADDR_VAR 0 5
40379: PUSH
40380: DOUBLE
40381: LD_INT 1
40383: DEC
40384: ST_TO_ADDR
40385: LD_VAR 0 8
40389: PUSH
40390: FOR_TO
40391: IFFALSE 40586
// begin _d := rand ( 0 , 5 ) ;
40393: LD_ADDR_VAR 0 11
40397: PUSH
40398: LD_INT 0
40400: PPUSH
40401: LD_INT 5
40403: PPUSH
40404: CALL_OW 12
40408: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40409: LD_ADDR_VAR 0 12
40413: PUSH
40414: LD_INT 2
40416: PPUSH
40417: LD_INT 6
40419: PPUSH
40420: CALL_OW 12
40424: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40425: LD_ADDR_VAR 0 9
40429: PUSH
40430: LD_VAR 0 2
40434: PPUSH
40435: LD_VAR 0 11
40439: PPUSH
40440: LD_VAR 0 12
40444: PPUSH
40445: CALL_OW 272
40449: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40450: LD_ADDR_VAR 0 10
40454: PUSH
40455: LD_VAR 0 3
40459: PPUSH
40460: LD_VAR 0 11
40464: PPUSH
40465: LD_VAR 0 12
40469: PPUSH
40470: CALL_OW 273
40474: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40475: LD_VAR 0 9
40479: PPUSH
40480: LD_VAR 0 10
40484: PPUSH
40485: CALL_OW 488
40489: PUSH
40490: LD_VAR 0 9
40494: PUSH
40495: LD_VAR 0 10
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_VAR 0 7
40508: IN
40509: NOT
40510: AND
40511: PUSH
40512: LD_VAR 0 9
40516: PPUSH
40517: LD_VAR 0 10
40521: PPUSH
40522: CALL_OW 458
40526: NOT
40527: AND
40528: IFFALSE 40570
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40530: LD_ADDR_VAR 0 7
40534: PUSH
40535: LD_VAR 0 7
40539: PPUSH
40540: LD_VAR 0 7
40544: PUSH
40545: LD_INT 1
40547: PLUS
40548: PPUSH
40549: LD_VAR 0 9
40553: PUSH
40554: LD_VAR 0 10
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PPUSH
40563: CALL_OW 1
40567: ST_TO_ADDR
40568: GO 40584
// i := i - 1 ;
40570: LD_ADDR_VAR 0 5
40574: PUSH
40575: LD_VAR 0 5
40579: PUSH
40580: LD_INT 1
40582: MINUS
40583: ST_TO_ADDR
// end ;
40584: GO 40390
40586: POP
40587: POP
// for i in tmp do
40588: LD_ADDR_VAR 0 5
40592: PUSH
40593: LD_VAR 0 7
40597: PUSH
40598: FOR_IN
40599: IFFALSE 40637
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40601: LD_VAR 0 1
40605: PPUSH
40606: LD_VAR 0 5
40610: PUSH
40611: LD_INT 1
40613: ARRAY
40614: PPUSH
40615: LD_VAR 0 5
40619: PUSH
40620: LD_INT 2
40622: ARRAY
40623: PPUSH
40624: CALL 39583 0 3
40628: NOT
40629: IFFALSE 40635
// exit ;
40631: POP
40632: POP
40633: GO 40639
40635: GO 40598
40637: POP
40638: POP
// end ;
40639: LD_VAR 0 4
40643: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40644: LD_INT 0
40646: PPUSH
40647: PPUSH
40648: PPUSH
40649: PPUSH
40650: PPUSH
40651: PPUSH
40652: PPUSH
// if not GetClass ( unit ) = class_sniper then
40653: LD_VAR 0 1
40657: PPUSH
40658: CALL_OW 257
40662: PUSH
40663: LD_INT 5
40665: EQUAL
40666: NOT
40667: IFFALSE 40671
// exit ;
40669: GO 41059
// dist := 8 ;
40671: LD_ADDR_VAR 0 5
40675: PUSH
40676: LD_INT 8
40678: ST_TO_ADDR
// viewRange := 12 ;
40679: LD_ADDR_VAR 0 7
40683: PUSH
40684: LD_INT 12
40686: ST_TO_ADDR
// side := GetSide ( unit ) ;
40687: LD_ADDR_VAR 0 6
40691: PUSH
40692: LD_VAR 0 1
40696: PPUSH
40697: CALL_OW 255
40701: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40702: LD_INT 61
40704: PPUSH
40705: LD_VAR 0 6
40709: PPUSH
40710: CALL_OW 321
40714: PUSH
40715: LD_INT 2
40717: EQUAL
40718: IFFALSE 40728
// viewRange := 16 ;
40720: LD_ADDR_VAR 0 7
40724: PUSH
40725: LD_INT 16
40727: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40728: LD_VAR 0 1
40732: PPUSH
40733: LD_VAR 0 2
40737: PPUSH
40738: LD_VAR 0 3
40742: PPUSH
40743: CALL_OW 297
40747: PUSH
40748: LD_VAR 0 5
40752: GREATER
40753: IFFALSE 40832
// begin ComMoveXY ( unit , x , y ) ;
40755: LD_VAR 0 1
40759: PPUSH
40760: LD_VAR 0 2
40764: PPUSH
40765: LD_VAR 0 3
40769: PPUSH
40770: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40774: LD_INT 35
40776: PPUSH
40777: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40781: LD_VAR 0 1
40785: PPUSH
40786: LD_VAR 0 2
40790: PPUSH
40791: LD_VAR 0 3
40795: PPUSH
40796: CALL 77552 0 3
40800: NOT
40801: IFFALSE 40805
// exit ;
40803: GO 41059
// until GetDistUnitXY ( unit , x , y ) < dist ;
40805: LD_VAR 0 1
40809: PPUSH
40810: LD_VAR 0 2
40814: PPUSH
40815: LD_VAR 0 3
40819: PPUSH
40820: CALL_OW 297
40824: PUSH
40825: LD_VAR 0 5
40829: LESS
40830: IFFALSE 40774
// end ; ComTurnXY ( unit , x , y ) ;
40832: LD_VAR 0 1
40836: PPUSH
40837: LD_VAR 0 2
40841: PPUSH
40842: LD_VAR 0 3
40846: PPUSH
40847: CALL_OW 118
// wait ( 5 ) ;
40851: LD_INT 5
40853: PPUSH
40854: CALL_OW 67
// _d := GetDir ( unit ) ;
40858: LD_ADDR_VAR 0 10
40862: PUSH
40863: LD_VAR 0 1
40867: PPUSH
40868: CALL_OW 254
40872: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40873: LD_ADDR_VAR 0 8
40877: PUSH
40878: LD_VAR 0 1
40882: PPUSH
40883: CALL_OW 250
40887: PPUSH
40888: LD_VAR 0 10
40892: PPUSH
40893: LD_VAR 0 5
40897: PPUSH
40898: CALL_OW 272
40902: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40903: LD_ADDR_VAR 0 9
40907: PUSH
40908: LD_VAR 0 1
40912: PPUSH
40913: CALL_OW 251
40917: PPUSH
40918: LD_VAR 0 10
40922: PPUSH
40923: LD_VAR 0 5
40927: PPUSH
40928: CALL_OW 273
40932: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40933: LD_VAR 0 8
40937: PPUSH
40938: LD_VAR 0 9
40942: PPUSH
40943: CALL_OW 488
40947: NOT
40948: IFFALSE 40952
// exit ;
40950: GO 41059
// ComAnimCustom ( unit , 1 ) ;
40952: LD_VAR 0 1
40956: PPUSH
40957: LD_INT 1
40959: PPUSH
40960: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40964: LD_VAR 0 8
40968: PPUSH
40969: LD_VAR 0 9
40973: PPUSH
40974: LD_VAR 0 6
40978: PPUSH
40979: LD_VAR 0 7
40983: PPUSH
40984: CALL_OW 330
// repeat wait ( 1 ) ;
40988: LD_INT 1
40990: PPUSH
40991: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40995: LD_VAR 0 1
40999: PPUSH
41000: CALL_OW 316
41004: PUSH
41005: LD_VAR 0 1
41009: PPUSH
41010: CALL_OW 314
41014: OR
41015: PUSH
41016: LD_VAR 0 1
41020: PPUSH
41021: CALL_OW 302
41025: NOT
41026: OR
41027: PUSH
41028: LD_VAR 0 1
41032: PPUSH
41033: CALL_OW 301
41037: OR
41038: IFFALSE 40988
// RemoveSeeing ( _x , _y , side ) ;
41040: LD_VAR 0 8
41044: PPUSH
41045: LD_VAR 0 9
41049: PPUSH
41050: LD_VAR 0 6
41054: PPUSH
41055: CALL_OW 331
// end ; end_of_file
41059: LD_VAR 0 4
41063: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41064: LD_INT 0
41066: PPUSH
41067: PPUSH
// if exist_mode then
41068: LD_VAR 0 2
41072: IFFALSE 41097
// unit := CreateCharacter ( prefix & ident ) else
41074: LD_ADDR_VAR 0 5
41078: PUSH
41079: LD_VAR 0 3
41083: PUSH
41084: LD_VAR 0 1
41088: STR
41089: PPUSH
41090: CALL_OW 34
41094: ST_TO_ADDR
41095: GO 41112
// unit := NewCharacter ( ident ) ;
41097: LD_ADDR_VAR 0 5
41101: PUSH
41102: LD_VAR 0 1
41106: PPUSH
41107: CALL_OW 25
41111: ST_TO_ADDR
// result := unit ;
41112: LD_ADDR_VAR 0 4
41116: PUSH
41117: LD_VAR 0 5
41121: ST_TO_ADDR
// end ;
41122: LD_VAR 0 4
41126: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41127: LD_INT 0
41129: PPUSH
41130: PPUSH
// if not side or not nation then
41131: LD_VAR 0 1
41135: NOT
41136: PUSH
41137: LD_VAR 0 2
41141: NOT
41142: OR
41143: IFFALSE 41147
// exit ;
41145: GO 41915
// case nation of nation_american :
41147: LD_VAR 0 2
41151: PUSH
41152: LD_INT 1
41154: DOUBLE
41155: EQUAL
41156: IFTRUE 41160
41158: GO 41374
41160: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41161: LD_ADDR_VAR 0 4
41165: PUSH
41166: LD_INT 35
41168: PUSH
41169: LD_INT 45
41171: PUSH
41172: LD_INT 46
41174: PUSH
41175: LD_INT 47
41177: PUSH
41178: LD_INT 82
41180: PUSH
41181: LD_INT 83
41183: PUSH
41184: LD_INT 84
41186: PUSH
41187: LD_INT 85
41189: PUSH
41190: LD_INT 86
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: LD_INT 6
41201: PUSH
41202: LD_INT 15
41204: PUSH
41205: LD_INT 16
41207: PUSH
41208: LD_INT 7
41210: PUSH
41211: LD_INT 12
41213: PUSH
41214: LD_INT 13
41216: PUSH
41217: LD_INT 10
41219: PUSH
41220: LD_INT 14
41222: PUSH
41223: LD_INT 20
41225: PUSH
41226: LD_INT 21
41228: PUSH
41229: LD_INT 22
41231: PUSH
41232: LD_INT 25
41234: PUSH
41235: LD_INT 32
41237: PUSH
41238: LD_INT 27
41240: PUSH
41241: LD_INT 36
41243: PUSH
41244: LD_INT 69
41246: PUSH
41247: LD_INT 39
41249: PUSH
41250: LD_INT 34
41252: PUSH
41253: LD_INT 40
41255: PUSH
41256: LD_INT 48
41258: PUSH
41259: LD_INT 49
41261: PUSH
41262: LD_INT 50
41264: PUSH
41265: LD_INT 51
41267: PUSH
41268: LD_INT 52
41270: PUSH
41271: LD_INT 53
41273: PUSH
41274: LD_INT 54
41276: PUSH
41277: LD_INT 55
41279: PUSH
41280: LD_INT 56
41282: PUSH
41283: LD_INT 57
41285: PUSH
41286: LD_INT 58
41288: PUSH
41289: LD_INT 59
41291: PUSH
41292: LD_INT 60
41294: PUSH
41295: LD_INT 61
41297: PUSH
41298: LD_INT 62
41300: PUSH
41301: LD_INT 80
41303: PUSH
41304: LD_INT 82
41306: PUSH
41307: LD_INT 83
41309: PUSH
41310: LD_INT 84
41312: PUSH
41313: LD_INT 85
41315: PUSH
41316: LD_INT 86
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: ST_TO_ADDR
41372: GO 41839
41374: LD_INT 2
41376: DOUBLE
41377: EQUAL
41378: IFTRUE 41382
41380: GO 41608
41382: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41383: LD_ADDR_VAR 0 4
41387: PUSH
41388: LD_INT 35
41390: PUSH
41391: LD_INT 45
41393: PUSH
41394: LD_INT 46
41396: PUSH
41397: LD_INT 47
41399: PUSH
41400: LD_INT 82
41402: PUSH
41403: LD_INT 83
41405: PUSH
41406: LD_INT 84
41408: PUSH
41409: LD_INT 85
41411: PUSH
41412: LD_INT 87
41414: PUSH
41415: LD_INT 70
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 11
41423: PUSH
41424: LD_INT 3
41426: PUSH
41427: LD_INT 4
41429: PUSH
41430: LD_INT 5
41432: PUSH
41433: LD_INT 6
41435: PUSH
41436: LD_INT 15
41438: PUSH
41439: LD_INT 18
41441: PUSH
41442: LD_INT 7
41444: PUSH
41445: LD_INT 17
41447: PUSH
41448: LD_INT 8
41450: PUSH
41451: LD_INT 20
41453: PUSH
41454: LD_INT 21
41456: PUSH
41457: LD_INT 22
41459: PUSH
41460: LD_INT 72
41462: PUSH
41463: LD_INT 26
41465: PUSH
41466: LD_INT 69
41468: PUSH
41469: LD_INT 39
41471: PUSH
41472: LD_INT 40
41474: PUSH
41475: LD_INT 41
41477: PUSH
41478: LD_INT 42
41480: PUSH
41481: LD_INT 43
41483: PUSH
41484: LD_INT 48
41486: PUSH
41487: LD_INT 49
41489: PUSH
41490: LD_INT 50
41492: PUSH
41493: LD_INT 51
41495: PUSH
41496: LD_INT 52
41498: PUSH
41499: LD_INT 53
41501: PUSH
41502: LD_INT 54
41504: PUSH
41505: LD_INT 55
41507: PUSH
41508: LD_INT 56
41510: PUSH
41511: LD_INT 60
41513: PUSH
41514: LD_INT 61
41516: PUSH
41517: LD_INT 62
41519: PUSH
41520: LD_INT 66
41522: PUSH
41523: LD_INT 67
41525: PUSH
41526: LD_INT 68
41528: PUSH
41529: LD_INT 81
41531: PUSH
41532: LD_INT 82
41534: PUSH
41535: LD_INT 83
41537: PUSH
41538: LD_INT 84
41540: PUSH
41541: LD_INT 85
41543: PUSH
41544: LD_INT 87
41546: PUSH
41547: LD_INT 88
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: ST_TO_ADDR
41606: GO 41839
41608: LD_INT 3
41610: DOUBLE
41611: EQUAL
41612: IFTRUE 41616
41614: GO 41838
41616: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41617: LD_ADDR_VAR 0 4
41621: PUSH
41622: LD_INT 46
41624: PUSH
41625: LD_INT 47
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: LD_INT 82
41636: PUSH
41637: LD_INT 83
41639: PUSH
41640: LD_INT 84
41642: PUSH
41643: LD_INT 85
41645: PUSH
41646: LD_INT 86
41648: PUSH
41649: LD_INT 11
41651: PUSH
41652: LD_INT 9
41654: PUSH
41655: LD_INT 20
41657: PUSH
41658: LD_INT 19
41660: PUSH
41661: LD_INT 21
41663: PUSH
41664: LD_INT 24
41666: PUSH
41667: LD_INT 22
41669: PUSH
41670: LD_INT 25
41672: PUSH
41673: LD_INT 28
41675: PUSH
41676: LD_INT 29
41678: PUSH
41679: LD_INT 30
41681: PUSH
41682: LD_INT 31
41684: PUSH
41685: LD_INT 37
41687: PUSH
41688: LD_INT 38
41690: PUSH
41691: LD_INT 32
41693: PUSH
41694: LD_INT 27
41696: PUSH
41697: LD_INT 33
41699: PUSH
41700: LD_INT 69
41702: PUSH
41703: LD_INT 39
41705: PUSH
41706: LD_INT 34
41708: PUSH
41709: LD_INT 40
41711: PUSH
41712: LD_INT 71
41714: PUSH
41715: LD_INT 23
41717: PUSH
41718: LD_INT 44
41720: PUSH
41721: LD_INT 48
41723: PUSH
41724: LD_INT 49
41726: PUSH
41727: LD_INT 50
41729: PUSH
41730: LD_INT 51
41732: PUSH
41733: LD_INT 52
41735: PUSH
41736: LD_INT 53
41738: PUSH
41739: LD_INT 54
41741: PUSH
41742: LD_INT 55
41744: PUSH
41745: LD_INT 56
41747: PUSH
41748: LD_INT 57
41750: PUSH
41751: LD_INT 58
41753: PUSH
41754: LD_INT 59
41756: PUSH
41757: LD_INT 63
41759: PUSH
41760: LD_INT 64
41762: PUSH
41763: LD_INT 65
41765: PUSH
41766: LD_INT 82
41768: PUSH
41769: LD_INT 83
41771: PUSH
41772: LD_INT 84
41774: PUSH
41775: LD_INT 85
41777: PUSH
41778: LD_INT 86
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: ST_TO_ADDR
41836: GO 41839
41838: POP
// if state > - 1 and state < 3 then
41839: LD_VAR 0 3
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: GREATER
41848: PUSH
41849: LD_VAR 0 3
41853: PUSH
41854: LD_INT 3
41856: LESS
41857: AND
41858: IFFALSE 41915
// for i in result do
41860: LD_ADDR_VAR 0 5
41864: PUSH
41865: LD_VAR 0 4
41869: PUSH
41870: FOR_IN
41871: IFFALSE 41913
// if GetTech ( i , side ) <> state then
41873: LD_VAR 0 5
41877: PPUSH
41878: LD_VAR 0 1
41882: PPUSH
41883: CALL_OW 321
41887: PUSH
41888: LD_VAR 0 3
41892: NONEQUAL
41893: IFFALSE 41911
// result := result diff i ;
41895: LD_ADDR_VAR 0 4
41899: PUSH
41900: LD_VAR 0 4
41904: PUSH
41905: LD_VAR 0 5
41909: DIFF
41910: ST_TO_ADDR
41911: GO 41870
41913: POP
41914: POP
// end ;
41915: LD_VAR 0 4
41919: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41920: LD_INT 0
41922: PPUSH
41923: PPUSH
41924: PPUSH
// result := true ;
41925: LD_ADDR_VAR 0 3
41929: PUSH
41930: LD_INT 1
41932: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41933: LD_ADDR_VAR 0 5
41937: PUSH
41938: LD_VAR 0 2
41942: PPUSH
41943: CALL_OW 480
41947: ST_TO_ADDR
// if not tmp then
41948: LD_VAR 0 5
41952: NOT
41953: IFFALSE 41957
// exit ;
41955: GO 42006
// for i in tmp do
41957: LD_ADDR_VAR 0 4
41961: PUSH
41962: LD_VAR 0 5
41966: PUSH
41967: FOR_IN
41968: IFFALSE 42004
// if GetTech ( i , side ) <> state_researched then
41970: LD_VAR 0 4
41974: PPUSH
41975: LD_VAR 0 1
41979: PPUSH
41980: CALL_OW 321
41984: PUSH
41985: LD_INT 2
41987: NONEQUAL
41988: IFFALSE 42002
// begin result := false ;
41990: LD_ADDR_VAR 0 3
41994: PUSH
41995: LD_INT 0
41997: ST_TO_ADDR
// exit ;
41998: POP
41999: POP
42000: GO 42006
// end ;
42002: GO 41967
42004: POP
42005: POP
// end ;
42006: LD_VAR 0 3
42010: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42011: LD_INT 0
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
42019: PPUSH
42020: PPUSH
42021: PPUSH
42022: PPUSH
42023: PPUSH
42024: PPUSH
42025: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42026: LD_VAR 0 1
42030: NOT
42031: PUSH
42032: LD_VAR 0 1
42036: PPUSH
42037: CALL_OW 257
42041: PUSH
42042: LD_INT 9
42044: NONEQUAL
42045: OR
42046: IFFALSE 42050
// exit ;
42048: GO 42623
// side := GetSide ( unit ) ;
42050: LD_ADDR_VAR 0 9
42054: PUSH
42055: LD_VAR 0 1
42059: PPUSH
42060: CALL_OW 255
42064: ST_TO_ADDR
// tech_space := tech_spacanom ;
42065: LD_ADDR_VAR 0 12
42069: PUSH
42070: LD_INT 29
42072: ST_TO_ADDR
// tech_time := tech_taurad ;
42073: LD_ADDR_VAR 0 13
42077: PUSH
42078: LD_INT 28
42080: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42081: LD_ADDR_VAR 0 11
42085: PUSH
42086: LD_VAR 0 1
42090: PPUSH
42091: CALL_OW 310
42095: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42096: LD_VAR 0 11
42100: PPUSH
42101: CALL_OW 247
42105: PUSH
42106: LD_INT 2
42108: EQUAL
42109: IFFALSE 42113
// exit ;
42111: GO 42623
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42113: LD_ADDR_VAR 0 8
42117: PUSH
42118: LD_INT 81
42120: PUSH
42121: LD_VAR 0 9
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 3
42132: PUSH
42133: LD_INT 21
42135: PUSH
42136: LD_INT 3
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PPUSH
42151: CALL_OW 69
42155: ST_TO_ADDR
// if not tmp then
42156: LD_VAR 0 8
42160: NOT
42161: IFFALSE 42165
// exit ;
42163: GO 42623
// if in_unit then
42165: LD_VAR 0 11
42169: IFFALSE 42193
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42171: LD_ADDR_VAR 0 10
42175: PUSH
42176: LD_VAR 0 8
42180: PPUSH
42181: LD_VAR 0 11
42185: PPUSH
42186: CALL_OW 74
42190: ST_TO_ADDR
42191: GO 42213
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42193: LD_ADDR_VAR 0 10
42197: PUSH
42198: LD_VAR 0 8
42202: PPUSH
42203: LD_VAR 0 1
42207: PPUSH
42208: CALL_OW 74
42212: ST_TO_ADDR
// if not enemy then
42213: LD_VAR 0 10
42217: NOT
42218: IFFALSE 42222
// exit ;
42220: GO 42623
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42222: LD_VAR 0 11
42226: PUSH
42227: LD_VAR 0 11
42231: PPUSH
42232: LD_VAR 0 10
42236: PPUSH
42237: CALL_OW 296
42241: PUSH
42242: LD_INT 13
42244: GREATER
42245: AND
42246: PUSH
42247: LD_VAR 0 1
42251: PPUSH
42252: LD_VAR 0 10
42256: PPUSH
42257: CALL_OW 296
42261: PUSH
42262: LD_INT 12
42264: GREATER
42265: OR
42266: IFFALSE 42270
// exit ;
42268: GO 42623
// missile := [ 1 ] ;
42270: LD_ADDR_VAR 0 14
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: EMPTY
42279: LIST
42280: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42281: LD_VAR 0 9
42285: PPUSH
42286: LD_VAR 0 12
42290: PPUSH
42291: CALL_OW 325
42295: IFFALSE 42324
// missile := Replace ( missile , missile + 1 , 2 ) ;
42297: LD_ADDR_VAR 0 14
42301: PUSH
42302: LD_VAR 0 14
42306: PPUSH
42307: LD_VAR 0 14
42311: PUSH
42312: LD_INT 1
42314: PLUS
42315: PPUSH
42316: LD_INT 2
42318: PPUSH
42319: CALL_OW 1
42323: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42324: LD_VAR 0 9
42328: PPUSH
42329: LD_VAR 0 13
42333: PPUSH
42334: CALL_OW 325
42338: PUSH
42339: LD_VAR 0 10
42343: PPUSH
42344: CALL_OW 255
42348: PPUSH
42349: LD_VAR 0 13
42353: PPUSH
42354: CALL_OW 325
42358: NOT
42359: AND
42360: IFFALSE 42389
// missile := Replace ( missile , missile + 1 , 3 ) ;
42362: LD_ADDR_VAR 0 14
42366: PUSH
42367: LD_VAR 0 14
42371: PPUSH
42372: LD_VAR 0 14
42376: PUSH
42377: LD_INT 1
42379: PLUS
42380: PPUSH
42381: LD_INT 3
42383: PPUSH
42384: CALL_OW 1
42388: ST_TO_ADDR
// if missile < 2 then
42389: LD_VAR 0 14
42393: PUSH
42394: LD_INT 2
42396: LESS
42397: IFFALSE 42401
// exit ;
42399: GO 42623
// x := GetX ( enemy ) ;
42401: LD_ADDR_VAR 0 4
42405: PUSH
42406: LD_VAR 0 10
42410: PPUSH
42411: CALL_OW 250
42415: ST_TO_ADDR
// y := GetY ( enemy ) ;
42416: LD_ADDR_VAR 0 5
42420: PUSH
42421: LD_VAR 0 10
42425: PPUSH
42426: CALL_OW 251
42430: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42431: LD_ADDR_VAR 0 6
42435: PUSH
42436: LD_VAR 0 4
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PPUSH
42445: LD_INT 1
42447: PPUSH
42448: CALL_OW 12
42452: PLUS
42453: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42454: LD_ADDR_VAR 0 7
42458: PUSH
42459: LD_VAR 0 5
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PPUSH
42468: LD_INT 1
42470: PPUSH
42471: CALL_OW 12
42475: PLUS
42476: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42477: LD_VAR 0 6
42481: PPUSH
42482: LD_VAR 0 7
42486: PPUSH
42487: CALL_OW 488
42491: NOT
42492: IFFALSE 42514
// begin _x := x ;
42494: LD_ADDR_VAR 0 6
42498: PUSH
42499: LD_VAR 0 4
42503: ST_TO_ADDR
// _y := y ;
42504: LD_ADDR_VAR 0 7
42508: PUSH
42509: LD_VAR 0 5
42513: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42514: LD_ADDR_VAR 0 3
42518: PUSH
42519: LD_INT 1
42521: PPUSH
42522: LD_VAR 0 14
42526: PPUSH
42527: CALL_OW 12
42531: ST_TO_ADDR
// case i of 1 :
42532: LD_VAR 0 3
42536: PUSH
42537: LD_INT 1
42539: DOUBLE
42540: EQUAL
42541: IFTRUE 42545
42543: GO 42562
42545: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42546: LD_VAR 0 1
42550: PPUSH
42551: LD_VAR 0 10
42555: PPUSH
42556: CALL_OW 115
42560: GO 42623
42562: LD_INT 2
42564: DOUBLE
42565: EQUAL
42566: IFTRUE 42570
42568: GO 42592
42570: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42571: LD_VAR 0 1
42575: PPUSH
42576: LD_VAR 0 6
42580: PPUSH
42581: LD_VAR 0 7
42585: PPUSH
42586: CALL_OW 153
42590: GO 42623
42592: LD_INT 3
42594: DOUBLE
42595: EQUAL
42596: IFTRUE 42600
42598: GO 42622
42600: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42601: LD_VAR 0 1
42605: PPUSH
42606: LD_VAR 0 6
42610: PPUSH
42611: LD_VAR 0 7
42615: PPUSH
42616: CALL_OW 154
42620: GO 42623
42622: POP
// end ;
42623: LD_VAR 0 2
42627: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42628: LD_INT 0
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
// if not unit or not building then
42636: LD_VAR 0 1
42640: NOT
42641: PUSH
42642: LD_VAR 0 2
42646: NOT
42647: OR
42648: IFFALSE 42652
// exit ;
42650: GO 42810
// x := GetX ( building ) ;
42652: LD_ADDR_VAR 0 5
42656: PUSH
42657: LD_VAR 0 2
42661: PPUSH
42662: CALL_OW 250
42666: ST_TO_ADDR
// y := GetY ( building ) ;
42667: LD_ADDR_VAR 0 6
42671: PUSH
42672: LD_VAR 0 2
42676: PPUSH
42677: CALL_OW 251
42681: ST_TO_ADDR
// for i = 0 to 5 do
42682: LD_ADDR_VAR 0 4
42686: PUSH
42687: DOUBLE
42688: LD_INT 0
42690: DEC
42691: ST_TO_ADDR
42692: LD_INT 5
42694: PUSH
42695: FOR_TO
42696: IFFALSE 42808
// begin _x := ShiftX ( x , i , 3 ) ;
42698: LD_ADDR_VAR 0 7
42702: PUSH
42703: LD_VAR 0 5
42707: PPUSH
42708: LD_VAR 0 4
42712: PPUSH
42713: LD_INT 3
42715: PPUSH
42716: CALL_OW 272
42720: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42721: LD_ADDR_VAR 0 8
42725: PUSH
42726: LD_VAR 0 6
42730: PPUSH
42731: LD_VAR 0 4
42735: PPUSH
42736: LD_INT 3
42738: PPUSH
42739: CALL_OW 273
42743: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42744: LD_VAR 0 7
42748: PPUSH
42749: LD_VAR 0 8
42753: PPUSH
42754: CALL_OW 488
42758: NOT
42759: IFFALSE 42763
// continue ;
42761: GO 42695
// if HexInfo ( _x , _y ) = 0 then
42763: LD_VAR 0 7
42767: PPUSH
42768: LD_VAR 0 8
42772: PPUSH
42773: CALL_OW 428
42777: PUSH
42778: LD_INT 0
42780: EQUAL
42781: IFFALSE 42806
// begin ComMoveXY ( unit , _x , _y ) ;
42783: LD_VAR 0 1
42787: PPUSH
42788: LD_VAR 0 7
42792: PPUSH
42793: LD_VAR 0 8
42797: PPUSH
42798: CALL_OW 111
// exit ;
42802: POP
42803: POP
42804: GO 42810
// end ; end ;
42806: GO 42695
42808: POP
42809: POP
// end ;
42810: LD_VAR 0 3
42814: RET
// export function ScanBase ( side , base_area ) ; begin
42815: LD_INT 0
42817: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42818: LD_ADDR_VAR 0 3
42822: PUSH
42823: LD_VAR 0 2
42827: PPUSH
42828: LD_INT 81
42830: PUSH
42831: LD_VAR 0 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PPUSH
42840: CALL_OW 70
42844: ST_TO_ADDR
// end ;
42845: LD_VAR 0 3
42849: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42850: LD_INT 0
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
// result := false ;
42856: LD_ADDR_VAR 0 2
42860: PUSH
42861: LD_INT 0
42863: ST_TO_ADDR
// side := GetSide ( unit ) ;
42864: LD_ADDR_VAR 0 3
42868: PUSH
42869: LD_VAR 0 1
42873: PPUSH
42874: CALL_OW 255
42878: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42879: LD_ADDR_VAR 0 4
42883: PUSH
42884: LD_VAR 0 1
42888: PPUSH
42889: CALL_OW 248
42893: ST_TO_ADDR
// case nat of 1 :
42894: LD_VAR 0 4
42898: PUSH
42899: LD_INT 1
42901: DOUBLE
42902: EQUAL
42903: IFTRUE 42907
42905: GO 42918
42907: POP
// tech := tech_lassight ; 2 :
42908: LD_ADDR_VAR 0 5
42912: PUSH
42913: LD_INT 12
42915: ST_TO_ADDR
42916: GO 42957
42918: LD_INT 2
42920: DOUBLE
42921: EQUAL
42922: IFTRUE 42926
42924: GO 42937
42926: POP
// tech := tech_mortar ; 3 :
42927: LD_ADDR_VAR 0 5
42931: PUSH
42932: LD_INT 41
42934: ST_TO_ADDR
42935: GO 42957
42937: LD_INT 3
42939: DOUBLE
42940: EQUAL
42941: IFTRUE 42945
42943: GO 42956
42945: POP
// tech := tech_bazooka ; end ;
42946: LD_ADDR_VAR 0 5
42950: PUSH
42951: LD_INT 44
42953: ST_TO_ADDR
42954: GO 42957
42956: POP
// if Researched ( side , tech ) then
42957: LD_VAR 0 3
42961: PPUSH
42962: LD_VAR 0 5
42966: PPUSH
42967: CALL_OW 325
42971: IFFALSE 42998
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42973: LD_ADDR_VAR 0 2
42977: PUSH
42978: LD_INT 5
42980: PUSH
42981: LD_INT 8
42983: PUSH
42984: LD_INT 9
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: PUSH
42992: LD_VAR 0 4
42996: ARRAY
42997: ST_TO_ADDR
// end ;
42998: LD_VAR 0 2
43002: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43003: LD_INT 0
43005: PPUSH
43006: PPUSH
43007: PPUSH
// if not mines then
43008: LD_VAR 0 2
43012: NOT
43013: IFFALSE 43017
// exit ;
43015: GO 43161
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43017: LD_ADDR_VAR 0 5
43021: PUSH
43022: LD_INT 81
43024: PUSH
43025: LD_VAR 0 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 3
43036: PUSH
43037: LD_INT 21
43039: PUSH
43040: LD_INT 3
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PPUSH
43055: CALL_OW 69
43059: ST_TO_ADDR
// for i in mines do
43060: LD_ADDR_VAR 0 4
43064: PUSH
43065: LD_VAR 0 2
43069: PUSH
43070: FOR_IN
43071: IFFALSE 43159
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43073: LD_VAR 0 4
43077: PUSH
43078: LD_INT 1
43080: ARRAY
43081: PPUSH
43082: LD_VAR 0 4
43086: PUSH
43087: LD_INT 2
43089: ARRAY
43090: PPUSH
43091: CALL_OW 458
43095: NOT
43096: IFFALSE 43100
// continue ;
43098: GO 43070
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43100: LD_VAR 0 4
43104: PUSH
43105: LD_INT 1
43107: ARRAY
43108: PPUSH
43109: LD_VAR 0 4
43113: PUSH
43114: LD_INT 2
43116: ARRAY
43117: PPUSH
43118: CALL_OW 428
43122: PUSH
43123: LD_VAR 0 5
43127: IN
43128: IFFALSE 43157
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43130: LD_VAR 0 4
43134: PUSH
43135: LD_INT 1
43137: ARRAY
43138: PPUSH
43139: LD_VAR 0 4
43143: PUSH
43144: LD_INT 2
43146: ARRAY
43147: PPUSH
43148: LD_VAR 0 1
43152: PPUSH
43153: CALL_OW 456
// end ;
43157: GO 43070
43159: POP
43160: POP
// end ;
43161: LD_VAR 0 3
43165: RET
// export function Count ( array ) ; begin
43166: LD_INT 0
43168: PPUSH
// result := array + 0 ;
43169: LD_ADDR_VAR 0 2
43173: PUSH
43174: LD_VAR 0 1
43178: PUSH
43179: LD_INT 0
43181: PLUS
43182: ST_TO_ADDR
// end ;
43183: LD_VAR 0 2
43187: RET
// export function IsEmpty ( building ) ; begin
43188: LD_INT 0
43190: PPUSH
// if not building then
43191: LD_VAR 0 1
43195: NOT
43196: IFFALSE 43200
// exit ;
43198: GO 43243
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43200: LD_ADDR_VAR 0 2
43204: PUSH
43205: LD_VAR 0 1
43209: PUSH
43210: LD_INT 22
43212: PUSH
43213: LD_VAR 0 1
43217: PPUSH
43218: CALL_OW 255
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 58
43229: PUSH
43230: EMPTY
43231: LIST
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PPUSH
43237: CALL_OW 69
43241: IN
43242: ST_TO_ADDR
// end ;
43243: LD_VAR 0 2
43247: RET
// export function IsNotFull ( building ) ; var places ; begin
43248: LD_INT 0
43250: PPUSH
43251: PPUSH
// if not building then
43252: LD_VAR 0 1
43256: NOT
43257: IFFALSE 43261
// exit ;
43259: GO 43289
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43261: LD_ADDR_VAR 0 2
43265: PUSH
43266: LD_VAR 0 1
43270: PPUSH
43271: LD_INT 3
43273: PUSH
43274: LD_INT 62
43276: PUSH
43277: EMPTY
43278: LIST
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PPUSH
43284: CALL_OW 72
43288: ST_TO_ADDR
// end ;
43289: LD_VAR 0 2
43293: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43294: LD_INT 0
43296: PPUSH
43297: PPUSH
43298: PPUSH
43299: PPUSH
// tmp := [ ] ;
43300: LD_ADDR_VAR 0 3
43304: PUSH
43305: EMPTY
43306: ST_TO_ADDR
// list := [ ] ;
43307: LD_ADDR_VAR 0 5
43311: PUSH
43312: EMPTY
43313: ST_TO_ADDR
// for i = 16 to 25 do
43314: LD_ADDR_VAR 0 4
43318: PUSH
43319: DOUBLE
43320: LD_INT 16
43322: DEC
43323: ST_TO_ADDR
43324: LD_INT 25
43326: PUSH
43327: FOR_TO
43328: IFFALSE 43401
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43330: LD_ADDR_VAR 0 3
43334: PUSH
43335: LD_VAR 0 3
43339: PUSH
43340: LD_INT 22
43342: PUSH
43343: LD_VAR 0 1
43347: PPUSH
43348: CALL_OW 255
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 91
43359: PUSH
43360: LD_VAR 0 1
43364: PUSH
43365: LD_INT 6
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 30
43375: PUSH
43376: LD_VAR 0 4
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: LIST
43389: PUSH
43390: EMPTY
43391: LIST
43392: PPUSH
43393: CALL_OW 69
43397: ADD
43398: ST_TO_ADDR
43399: GO 43327
43401: POP
43402: POP
// for i = 1 to tmp do
43403: LD_ADDR_VAR 0 4
43407: PUSH
43408: DOUBLE
43409: LD_INT 1
43411: DEC
43412: ST_TO_ADDR
43413: LD_VAR 0 3
43417: PUSH
43418: FOR_TO
43419: IFFALSE 43507
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43421: LD_ADDR_VAR 0 5
43425: PUSH
43426: LD_VAR 0 5
43430: PUSH
43431: LD_VAR 0 3
43435: PUSH
43436: LD_VAR 0 4
43440: ARRAY
43441: PPUSH
43442: CALL_OW 266
43446: PUSH
43447: LD_VAR 0 3
43451: PUSH
43452: LD_VAR 0 4
43456: ARRAY
43457: PPUSH
43458: CALL_OW 250
43462: PUSH
43463: LD_VAR 0 3
43467: PUSH
43468: LD_VAR 0 4
43472: ARRAY
43473: PPUSH
43474: CALL_OW 251
43478: PUSH
43479: LD_VAR 0 3
43483: PUSH
43484: LD_VAR 0 4
43488: ARRAY
43489: PPUSH
43490: CALL_OW 254
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: PUSH
43501: EMPTY
43502: LIST
43503: ADD
43504: ST_TO_ADDR
43505: GO 43418
43507: POP
43508: POP
// result := list ;
43509: LD_ADDR_VAR 0 2
43513: PUSH
43514: LD_VAR 0 5
43518: ST_TO_ADDR
// end ;
43519: LD_VAR 0 2
43523: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43524: LD_INT 0
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
// if not factory then
43533: LD_VAR 0 1
43537: NOT
43538: IFFALSE 43542
// exit ;
43540: GO 44135
// if control = control_apeman then
43542: LD_VAR 0 4
43546: PUSH
43547: LD_INT 5
43549: EQUAL
43550: IFFALSE 43659
// begin tmp := UnitsInside ( factory ) ;
43552: LD_ADDR_VAR 0 8
43556: PUSH
43557: LD_VAR 0 1
43561: PPUSH
43562: CALL_OW 313
43566: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43567: LD_VAR 0 8
43571: PPUSH
43572: LD_INT 25
43574: PUSH
43575: LD_INT 12
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PPUSH
43582: CALL_OW 72
43586: NOT
43587: IFFALSE 43597
// control := control_manual ;
43589: LD_ADDR_VAR 0 4
43593: PUSH
43594: LD_INT 1
43596: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43597: LD_ADDR_VAR 0 8
43601: PUSH
43602: LD_VAR 0 1
43606: PPUSH
43607: CALL 43294 0 1
43611: ST_TO_ADDR
// if tmp then
43612: LD_VAR 0 8
43616: IFFALSE 43659
// begin for i in tmp do
43618: LD_ADDR_VAR 0 7
43622: PUSH
43623: LD_VAR 0 8
43627: PUSH
43628: FOR_IN
43629: IFFALSE 43657
// if i [ 1 ] = b_ext_radio then
43631: LD_VAR 0 7
43635: PUSH
43636: LD_INT 1
43638: ARRAY
43639: PUSH
43640: LD_INT 22
43642: EQUAL
43643: IFFALSE 43655
// begin control := control_remote ;
43645: LD_ADDR_VAR 0 4
43649: PUSH
43650: LD_INT 2
43652: ST_TO_ADDR
// break ;
43653: GO 43657
// end ;
43655: GO 43628
43657: POP
43658: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43659: LD_VAR 0 1
43663: PPUSH
43664: LD_VAR 0 2
43668: PPUSH
43669: LD_VAR 0 3
43673: PPUSH
43674: LD_VAR 0 4
43678: PPUSH
43679: LD_VAR 0 5
43683: PPUSH
43684: CALL_OW 448
43688: IFFALSE 43723
// begin result := [ chassis , engine , control , weapon ] ;
43690: LD_ADDR_VAR 0 6
43694: PUSH
43695: LD_VAR 0 2
43699: PUSH
43700: LD_VAR 0 3
43704: PUSH
43705: LD_VAR 0 4
43709: PUSH
43710: LD_VAR 0 5
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: ST_TO_ADDR
// exit ;
43721: GO 44135
// end ; _chassis := AvailableChassisList ( factory ) ;
43723: LD_ADDR_VAR 0 9
43727: PUSH
43728: LD_VAR 0 1
43732: PPUSH
43733: CALL_OW 475
43737: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43738: LD_ADDR_VAR 0 11
43742: PUSH
43743: LD_VAR 0 1
43747: PPUSH
43748: CALL_OW 476
43752: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43753: LD_ADDR_VAR 0 12
43757: PUSH
43758: LD_VAR 0 1
43762: PPUSH
43763: CALL_OW 477
43767: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43768: LD_ADDR_VAR 0 10
43772: PUSH
43773: LD_VAR 0 1
43777: PPUSH
43778: CALL_OW 478
43782: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43783: LD_VAR 0 9
43787: NOT
43788: PUSH
43789: LD_VAR 0 11
43793: NOT
43794: OR
43795: PUSH
43796: LD_VAR 0 12
43800: NOT
43801: OR
43802: PUSH
43803: LD_VAR 0 10
43807: NOT
43808: OR
43809: IFFALSE 43844
// begin result := [ chassis , engine , control , weapon ] ;
43811: LD_ADDR_VAR 0 6
43815: PUSH
43816: LD_VAR 0 2
43820: PUSH
43821: LD_VAR 0 3
43825: PUSH
43826: LD_VAR 0 4
43830: PUSH
43831: LD_VAR 0 5
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: ST_TO_ADDR
// exit ;
43842: GO 44135
// end ; if not chassis in _chassis then
43844: LD_VAR 0 2
43848: PUSH
43849: LD_VAR 0 9
43853: IN
43854: NOT
43855: IFFALSE 43881
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43857: LD_ADDR_VAR 0 2
43861: PUSH
43862: LD_VAR 0 9
43866: PUSH
43867: LD_INT 1
43869: PPUSH
43870: LD_VAR 0 9
43874: PPUSH
43875: CALL_OW 12
43879: ARRAY
43880: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43881: LD_VAR 0 2
43885: PPUSH
43886: LD_VAR 0 3
43890: PPUSH
43891: CALL 44140 0 2
43895: NOT
43896: IFFALSE 43955
// repeat engine := _engine [ 1 ] ;
43898: LD_ADDR_VAR 0 3
43902: PUSH
43903: LD_VAR 0 11
43907: PUSH
43908: LD_INT 1
43910: ARRAY
43911: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43912: LD_ADDR_VAR 0 11
43916: PUSH
43917: LD_VAR 0 11
43921: PPUSH
43922: LD_INT 1
43924: PPUSH
43925: CALL_OW 3
43929: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43930: LD_VAR 0 2
43934: PPUSH
43935: LD_VAR 0 3
43939: PPUSH
43940: CALL 44140 0 2
43944: PUSH
43945: LD_VAR 0 11
43949: PUSH
43950: EMPTY
43951: EQUAL
43952: OR
43953: IFFALSE 43898
// if not control in _control then
43955: LD_VAR 0 4
43959: PUSH
43960: LD_VAR 0 12
43964: IN
43965: NOT
43966: IFFALSE 43992
// control := _control [ rand ( 1 , _control ) ] ;
43968: LD_ADDR_VAR 0 4
43972: PUSH
43973: LD_VAR 0 12
43977: PUSH
43978: LD_INT 1
43980: PPUSH
43981: LD_VAR 0 12
43985: PPUSH
43986: CALL_OW 12
43990: ARRAY
43991: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43992: LD_VAR 0 2
43996: PPUSH
43997: LD_VAR 0 5
44001: PPUSH
44002: CALL 44360 0 2
44006: NOT
44007: IFFALSE 44066
// repeat weapon := _weapon [ 1 ] ;
44009: LD_ADDR_VAR 0 5
44013: PUSH
44014: LD_VAR 0 10
44018: PUSH
44019: LD_INT 1
44021: ARRAY
44022: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44023: LD_ADDR_VAR 0 10
44027: PUSH
44028: LD_VAR 0 10
44032: PPUSH
44033: LD_INT 1
44035: PPUSH
44036: CALL_OW 3
44040: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44041: LD_VAR 0 2
44045: PPUSH
44046: LD_VAR 0 5
44050: PPUSH
44051: CALL 44360 0 2
44055: PUSH
44056: LD_VAR 0 10
44060: PUSH
44061: EMPTY
44062: EQUAL
44063: OR
44064: IFFALSE 44009
// result := [ ] ;
44066: LD_ADDR_VAR 0 6
44070: PUSH
44071: EMPTY
44072: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44073: LD_VAR 0 1
44077: PPUSH
44078: LD_VAR 0 2
44082: PPUSH
44083: LD_VAR 0 3
44087: PPUSH
44088: LD_VAR 0 4
44092: PPUSH
44093: LD_VAR 0 5
44097: PPUSH
44098: CALL_OW 448
44102: IFFALSE 44135
// result := [ chassis , engine , control , weapon ] ;
44104: LD_ADDR_VAR 0 6
44108: PUSH
44109: LD_VAR 0 2
44113: PUSH
44114: LD_VAR 0 3
44118: PUSH
44119: LD_VAR 0 4
44123: PUSH
44124: LD_VAR 0 5
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: ST_TO_ADDR
// end ;
44135: LD_VAR 0 6
44139: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44140: LD_INT 0
44142: PPUSH
// if not chassis or not engine then
44143: LD_VAR 0 1
44147: NOT
44148: PUSH
44149: LD_VAR 0 2
44153: NOT
44154: OR
44155: IFFALSE 44159
// exit ;
44157: GO 44355
// case engine of engine_solar :
44159: LD_VAR 0 2
44163: PUSH
44164: LD_INT 2
44166: DOUBLE
44167: EQUAL
44168: IFTRUE 44172
44170: GO 44210
44172: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44173: LD_ADDR_VAR 0 3
44177: PUSH
44178: LD_INT 11
44180: PUSH
44181: LD_INT 12
44183: PUSH
44184: LD_INT 13
44186: PUSH
44187: LD_INT 14
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 3
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: ST_TO_ADDR
44208: GO 44339
44210: LD_INT 1
44212: DOUBLE
44213: EQUAL
44214: IFTRUE 44218
44216: GO 44280
44218: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_INT 11
44226: PUSH
44227: LD_INT 12
44229: PUSH
44230: LD_INT 13
44232: PUSH
44233: LD_INT 14
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: LD_INT 3
44244: PUSH
44245: LD_INT 4
44247: PUSH
44248: LD_INT 5
44250: PUSH
44251: LD_INT 21
44253: PUSH
44254: LD_INT 23
44256: PUSH
44257: LD_INT 22
44259: PUSH
44260: LD_INT 24
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: ST_TO_ADDR
44278: GO 44339
44280: LD_INT 3
44282: DOUBLE
44283: EQUAL
44284: IFTRUE 44288
44286: GO 44338
44288: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44289: LD_ADDR_VAR 0 3
44293: PUSH
44294: LD_INT 13
44296: PUSH
44297: LD_INT 14
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: LD_INT 4
44308: PUSH
44309: LD_INT 5
44311: PUSH
44312: LD_INT 21
44314: PUSH
44315: LD_INT 22
44317: PUSH
44318: LD_INT 23
44320: PUSH
44321: LD_INT 24
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: ST_TO_ADDR
44336: GO 44339
44338: POP
// result := ( chassis in result ) ;
44339: LD_ADDR_VAR 0 3
44343: PUSH
44344: LD_VAR 0 1
44348: PUSH
44349: LD_VAR 0 3
44353: IN
44354: ST_TO_ADDR
// end ;
44355: LD_VAR 0 3
44359: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44360: LD_INT 0
44362: PPUSH
// if not chassis or not weapon then
44363: LD_VAR 0 1
44367: NOT
44368: PUSH
44369: LD_VAR 0 2
44373: NOT
44374: OR
44375: IFFALSE 44379
// exit ;
44377: GO 45439
// case weapon of us_machine_gun :
44379: LD_VAR 0 2
44383: PUSH
44384: LD_INT 2
44386: DOUBLE
44387: EQUAL
44388: IFTRUE 44392
44390: GO 44422
44392: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44393: LD_ADDR_VAR 0 3
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: LD_INT 3
44406: PUSH
44407: LD_INT 4
44409: PUSH
44410: LD_INT 5
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: ST_TO_ADDR
44420: GO 45423
44422: LD_INT 3
44424: DOUBLE
44425: EQUAL
44426: IFTRUE 44430
44428: GO 44460
44430: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44431: LD_ADDR_VAR 0 3
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: LD_INT 4
44447: PUSH
44448: LD_INT 5
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: ST_TO_ADDR
44458: GO 45423
44460: LD_INT 11
44462: DOUBLE
44463: EQUAL
44464: IFTRUE 44468
44466: GO 44498
44468: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44469: LD_ADDR_VAR 0 3
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: LD_INT 3
44482: PUSH
44483: LD_INT 4
44485: PUSH
44486: LD_INT 5
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: ST_TO_ADDR
44496: GO 45423
44498: LD_INT 4
44500: DOUBLE
44501: EQUAL
44502: IFTRUE 44506
44504: GO 44532
44506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44507: LD_ADDR_VAR 0 3
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: LD_INT 3
44517: PUSH
44518: LD_INT 4
44520: PUSH
44521: LD_INT 5
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
44530: GO 45423
44532: LD_INT 5
44534: DOUBLE
44535: EQUAL
44536: IFTRUE 44540
44538: GO 44566
44540: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44541: LD_ADDR_VAR 0 3
44545: PUSH
44546: LD_INT 2
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: LD_INT 4
44554: PUSH
44555: LD_INT 5
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: ST_TO_ADDR
44564: GO 45423
44566: LD_INT 9
44568: DOUBLE
44569: EQUAL
44570: IFTRUE 44574
44572: GO 44600
44574: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44575: LD_ADDR_VAR 0 3
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: LD_INT 3
44585: PUSH
44586: LD_INT 4
44588: PUSH
44589: LD_INT 5
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: ST_TO_ADDR
44598: GO 45423
44600: LD_INT 7
44602: DOUBLE
44603: EQUAL
44604: IFTRUE 44608
44606: GO 44634
44608: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44609: LD_ADDR_VAR 0 3
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: LD_INT 3
44619: PUSH
44620: LD_INT 4
44622: PUSH
44623: LD_INT 5
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: ST_TO_ADDR
44632: GO 45423
44634: LD_INT 12
44636: DOUBLE
44637: EQUAL
44638: IFTRUE 44642
44640: GO 44668
44642: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44643: LD_ADDR_VAR 0 3
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: LD_INT 3
44653: PUSH
44654: LD_INT 4
44656: PUSH
44657: LD_INT 5
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: ST_TO_ADDR
44666: GO 45423
44668: LD_INT 13
44670: DOUBLE
44671: EQUAL
44672: IFTRUE 44676
44674: GO 44702
44676: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44677: LD_ADDR_VAR 0 3
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: LD_INT 3
44687: PUSH
44688: LD_INT 4
44690: PUSH
44691: LD_INT 5
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: ST_TO_ADDR
44700: GO 45423
44702: LD_INT 14
44704: DOUBLE
44705: EQUAL
44706: IFTRUE 44710
44708: GO 44728
44710: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44711: LD_ADDR_VAR 0 3
44715: PUSH
44716: LD_INT 4
44718: PUSH
44719: LD_INT 5
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: ST_TO_ADDR
44726: GO 45423
44728: LD_INT 6
44730: DOUBLE
44731: EQUAL
44732: IFTRUE 44736
44734: GO 44754
44736: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44737: LD_ADDR_VAR 0 3
44741: PUSH
44742: LD_INT 4
44744: PUSH
44745: LD_INT 5
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: ST_TO_ADDR
44752: GO 45423
44754: LD_INT 10
44756: DOUBLE
44757: EQUAL
44758: IFTRUE 44762
44760: GO 44780
44762: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44763: LD_ADDR_VAR 0 3
44767: PUSH
44768: LD_INT 4
44770: PUSH
44771: LD_INT 5
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: ST_TO_ADDR
44778: GO 45423
44780: LD_INT 22
44782: DOUBLE
44783: EQUAL
44784: IFTRUE 44788
44786: GO 44814
44788: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44789: LD_ADDR_VAR 0 3
44793: PUSH
44794: LD_INT 11
44796: PUSH
44797: LD_INT 12
44799: PUSH
44800: LD_INT 13
44802: PUSH
44803: LD_INT 14
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: ST_TO_ADDR
44812: GO 45423
44814: LD_INT 23
44816: DOUBLE
44817: EQUAL
44818: IFTRUE 44822
44820: GO 44848
44822: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44823: LD_ADDR_VAR 0 3
44827: PUSH
44828: LD_INT 11
44830: PUSH
44831: LD_INT 12
44833: PUSH
44834: LD_INT 13
44836: PUSH
44837: LD_INT 14
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: ST_TO_ADDR
44846: GO 45423
44848: LD_INT 24
44850: DOUBLE
44851: EQUAL
44852: IFTRUE 44856
44854: GO 44882
44856: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44857: LD_ADDR_VAR 0 3
44861: PUSH
44862: LD_INT 11
44864: PUSH
44865: LD_INT 12
44867: PUSH
44868: LD_INT 13
44870: PUSH
44871: LD_INT 14
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: ST_TO_ADDR
44880: GO 45423
44882: LD_INT 30
44884: DOUBLE
44885: EQUAL
44886: IFTRUE 44890
44888: GO 44916
44890: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44891: LD_ADDR_VAR 0 3
44895: PUSH
44896: LD_INT 11
44898: PUSH
44899: LD_INT 12
44901: PUSH
44902: LD_INT 13
44904: PUSH
44905: LD_INT 14
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: ST_TO_ADDR
44914: GO 45423
44916: LD_INT 25
44918: DOUBLE
44919: EQUAL
44920: IFTRUE 44924
44922: GO 44942
44924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44925: LD_ADDR_VAR 0 3
44929: PUSH
44930: LD_INT 13
44932: PUSH
44933: LD_INT 14
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: ST_TO_ADDR
44940: GO 45423
44942: LD_INT 27
44944: DOUBLE
44945: EQUAL
44946: IFTRUE 44950
44948: GO 44968
44950: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44951: LD_ADDR_VAR 0 3
44955: PUSH
44956: LD_INT 13
44958: PUSH
44959: LD_INT 14
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: ST_TO_ADDR
44966: GO 45423
44968: LD_INT 92
44970: DOUBLE
44971: EQUAL
44972: IFTRUE 44976
44974: GO 45002
44976: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44977: LD_ADDR_VAR 0 3
44981: PUSH
44982: LD_INT 11
44984: PUSH
44985: LD_INT 12
44987: PUSH
44988: LD_INT 13
44990: PUSH
44991: LD_INT 14
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: ST_TO_ADDR
45000: GO 45423
45002: LD_INT 28
45004: DOUBLE
45005: EQUAL
45006: IFTRUE 45010
45008: GO 45028
45010: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45011: LD_ADDR_VAR 0 3
45015: PUSH
45016: LD_INT 13
45018: PUSH
45019: LD_INT 14
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: ST_TO_ADDR
45026: GO 45423
45028: LD_INT 29
45030: DOUBLE
45031: EQUAL
45032: IFTRUE 45036
45034: GO 45054
45036: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45037: LD_ADDR_VAR 0 3
45041: PUSH
45042: LD_INT 13
45044: PUSH
45045: LD_INT 14
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: ST_TO_ADDR
45052: GO 45423
45054: LD_INT 31
45056: DOUBLE
45057: EQUAL
45058: IFTRUE 45062
45060: GO 45080
45062: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45063: LD_ADDR_VAR 0 3
45067: PUSH
45068: LD_INT 13
45070: PUSH
45071: LD_INT 14
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: ST_TO_ADDR
45078: GO 45423
45080: LD_INT 26
45082: DOUBLE
45083: EQUAL
45084: IFTRUE 45088
45086: GO 45106
45088: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45089: LD_ADDR_VAR 0 3
45093: PUSH
45094: LD_INT 13
45096: PUSH
45097: LD_INT 14
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: ST_TO_ADDR
45104: GO 45423
45106: LD_INT 42
45108: DOUBLE
45109: EQUAL
45110: IFTRUE 45114
45112: GO 45140
45114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45115: LD_ADDR_VAR 0 3
45119: PUSH
45120: LD_INT 21
45122: PUSH
45123: LD_INT 22
45125: PUSH
45126: LD_INT 23
45128: PUSH
45129: LD_INT 24
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
45138: GO 45423
45140: LD_INT 43
45142: DOUBLE
45143: EQUAL
45144: IFTRUE 45148
45146: GO 45174
45148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45149: LD_ADDR_VAR 0 3
45153: PUSH
45154: LD_INT 21
45156: PUSH
45157: LD_INT 22
45159: PUSH
45160: LD_INT 23
45162: PUSH
45163: LD_INT 24
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: ST_TO_ADDR
45172: GO 45423
45174: LD_INT 44
45176: DOUBLE
45177: EQUAL
45178: IFTRUE 45182
45180: GO 45208
45182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45183: LD_ADDR_VAR 0 3
45187: PUSH
45188: LD_INT 21
45190: PUSH
45191: LD_INT 22
45193: PUSH
45194: LD_INT 23
45196: PUSH
45197: LD_INT 24
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: ST_TO_ADDR
45206: GO 45423
45208: LD_INT 45
45210: DOUBLE
45211: EQUAL
45212: IFTRUE 45216
45214: GO 45242
45216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45217: LD_ADDR_VAR 0 3
45221: PUSH
45222: LD_INT 21
45224: PUSH
45225: LD_INT 22
45227: PUSH
45228: LD_INT 23
45230: PUSH
45231: LD_INT 24
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: ST_TO_ADDR
45240: GO 45423
45242: LD_INT 49
45244: DOUBLE
45245: EQUAL
45246: IFTRUE 45250
45248: GO 45276
45250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45251: LD_ADDR_VAR 0 3
45255: PUSH
45256: LD_INT 21
45258: PUSH
45259: LD_INT 22
45261: PUSH
45262: LD_INT 23
45264: PUSH
45265: LD_INT 24
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: ST_TO_ADDR
45274: GO 45423
45276: LD_INT 51
45278: DOUBLE
45279: EQUAL
45280: IFTRUE 45284
45282: GO 45310
45284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45285: LD_ADDR_VAR 0 3
45289: PUSH
45290: LD_INT 21
45292: PUSH
45293: LD_INT 22
45295: PUSH
45296: LD_INT 23
45298: PUSH
45299: LD_INT 24
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: ST_TO_ADDR
45308: GO 45423
45310: LD_INT 52
45312: DOUBLE
45313: EQUAL
45314: IFTRUE 45318
45316: GO 45344
45318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45319: LD_ADDR_VAR 0 3
45323: PUSH
45324: LD_INT 21
45326: PUSH
45327: LD_INT 22
45329: PUSH
45330: LD_INT 23
45332: PUSH
45333: LD_INT 24
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
45342: GO 45423
45344: LD_INT 53
45346: DOUBLE
45347: EQUAL
45348: IFTRUE 45352
45350: GO 45370
45352: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45353: LD_ADDR_VAR 0 3
45357: PUSH
45358: LD_INT 23
45360: PUSH
45361: LD_INT 24
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: ST_TO_ADDR
45368: GO 45423
45370: LD_INT 46
45372: DOUBLE
45373: EQUAL
45374: IFTRUE 45378
45376: GO 45396
45378: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45379: LD_ADDR_VAR 0 3
45383: PUSH
45384: LD_INT 23
45386: PUSH
45387: LD_INT 24
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: ST_TO_ADDR
45394: GO 45423
45396: LD_INT 47
45398: DOUBLE
45399: EQUAL
45400: IFTRUE 45404
45402: GO 45422
45404: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45405: LD_ADDR_VAR 0 3
45409: PUSH
45410: LD_INT 23
45412: PUSH
45413: LD_INT 24
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: ST_TO_ADDR
45420: GO 45423
45422: POP
// result := ( chassis in result ) ;
45423: LD_ADDR_VAR 0 3
45427: PUSH
45428: LD_VAR 0 1
45432: PUSH
45433: LD_VAR 0 3
45437: IN
45438: ST_TO_ADDR
// end ;
45439: LD_VAR 0 3
45443: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45444: LD_INT 0
45446: PPUSH
45447: PPUSH
45448: PPUSH
45449: PPUSH
45450: PPUSH
45451: PPUSH
45452: PPUSH
// result := array ;
45453: LD_ADDR_VAR 0 5
45457: PUSH
45458: LD_VAR 0 1
45462: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45463: LD_VAR 0 1
45467: NOT
45468: PUSH
45469: LD_VAR 0 2
45473: NOT
45474: OR
45475: PUSH
45476: LD_VAR 0 3
45480: NOT
45481: OR
45482: PUSH
45483: LD_VAR 0 2
45487: PUSH
45488: LD_VAR 0 1
45492: GREATER
45493: OR
45494: PUSH
45495: LD_VAR 0 3
45499: PUSH
45500: LD_VAR 0 1
45504: GREATER
45505: OR
45506: IFFALSE 45510
// exit ;
45508: GO 45806
// if direction then
45510: LD_VAR 0 4
45514: IFFALSE 45578
// begin d := 1 ;
45516: LD_ADDR_VAR 0 9
45520: PUSH
45521: LD_INT 1
45523: ST_TO_ADDR
// if i_from > i_to then
45524: LD_VAR 0 2
45528: PUSH
45529: LD_VAR 0 3
45533: GREATER
45534: IFFALSE 45560
// length := ( array - i_from ) + i_to else
45536: LD_ADDR_VAR 0 11
45540: PUSH
45541: LD_VAR 0 1
45545: PUSH
45546: LD_VAR 0 2
45550: MINUS
45551: PUSH
45552: LD_VAR 0 3
45556: PLUS
45557: ST_TO_ADDR
45558: GO 45576
// length := i_to - i_from ;
45560: LD_ADDR_VAR 0 11
45564: PUSH
45565: LD_VAR 0 3
45569: PUSH
45570: LD_VAR 0 2
45574: MINUS
45575: ST_TO_ADDR
// end else
45576: GO 45639
// begin d := - 1 ;
45578: LD_ADDR_VAR 0 9
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: ST_TO_ADDR
// if i_from > i_to then
45587: LD_VAR 0 2
45591: PUSH
45592: LD_VAR 0 3
45596: GREATER
45597: IFFALSE 45617
// length := i_from - i_to else
45599: LD_ADDR_VAR 0 11
45603: PUSH
45604: LD_VAR 0 2
45608: PUSH
45609: LD_VAR 0 3
45613: MINUS
45614: ST_TO_ADDR
45615: GO 45639
// length := ( array - i_to ) + i_from ;
45617: LD_ADDR_VAR 0 11
45621: PUSH
45622: LD_VAR 0 1
45626: PUSH
45627: LD_VAR 0 3
45631: MINUS
45632: PUSH
45633: LD_VAR 0 2
45637: PLUS
45638: ST_TO_ADDR
// end ; if not length then
45639: LD_VAR 0 11
45643: NOT
45644: IFFALSE 45648
// exit ;
45646: GO 45806
// tmp := array ;
45648: LD_ADDR_VAR 0 10
45652: PUSH
45653: LD_VAR 0 1
45657: ST_TO_ADDR
// for i = 1 to length do
45658: LD_ADDR_VAR 0 6
45662: PUSH
45663: DOUBLE
45664: LD_INT 1
45666: DEC
45667: ST_TO_ADDR
45668: LD_VAR 0 11
45672: PUSH
45673: FOR_TO
45674: IFFALSE 45794
// begin for j = 1 to array do
45676: LD_ADDR_VAR 0 7
45680: PUSH
45681: DOUBLE
45682: LD_INT 1
45684: DEC
45685: ST_TO_ADDR
45686: LD_VAR 0 1
45690: PUSH
45691: FOR_TO
45692: IFFALSE 45780
// begin k := j + d ;
45694: LD_ADDR_VAR 0 8
45698: PUSH
45699: LD_VAR 0 7
45703: PUSH
45704: LD_VAR 0 9
45708: PLUS
45709: ST_TO_ADDR
// if k > array then
45710: LD_VAR 0 8
45714: PUSH
45715: LD_VAR 0 1
45719: GREATER
45720: IFFALSE 45730
// k := 1 ;
45722: LD_ADDR_VAR 0 8
45726: PUSH
45727: LD_INT 1
45729: ST_TO_ADDR
// if not k then
45730: LD_VAR 0 8
45734: NOT
45735: IFFALSE 45747
// k := array ;
45737: LD_ADDR_VAR 0 8
45741: PUSH
45742: LD_VAR 0 1
45746: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45747: LD_ADDR_VAR 0 10
45751: PUSH
45752: LD_VAR 0 10
45756: PPUSH
45757: LD_VAR 0 8
45761: PPUSH
45762: LD_VAR 0 1
45766: PUSH
45767: LD_VAR 0 7
45771: ARRAY
45772: PPUSH
45773: CALL_OW 1
45777: ST_TO_ADDR
// end ;
45778: GO 45691
45780: POP
45781: POP
// array := tmp ;
45782: LD_ADDR_VAR 0 1
45786: PUSH
45787: LD_VAR 0 10
45791: ST_TO_ADDR
// end ;
45792: GO 45673
45794: POP
45795: POP
// result := array ;
45796: LD_ADDR_VAR 0 5
45800: PUSH
45801: LD_VAR 0 1
45805: ST_TO_ADDR
// end ;
45806: LD_VAR 0 5
45810: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45811: LD_INT 0
45813: PPUSH
45814: PPUSH
// result := 0 ;
45815: LD_ADDR_VAR 0 3
45819: PUSH
45820: LD_INT 0
45822: ST_TO_ADDR
// if not array or not value in array then
45823: LD_VAR 0 1
45827: NOT
45828: PUSH
45829: LD_VAR 0 2
45833: PUSH
45834: LD_VAR 0 1
45838: IN
45839: NOT
45840: OR
45841: IFFALSE 45845
// exit ;
45843: GO 45899
// for i = 1 to array do
45845: LD_ADDR_VAR 0 4
45849: PUSH
45850: DOUBLE
45851: LD_INT 1
45853: DEC
45854: ST_TO_ADDR
45855: LD_VAR 0 1
45859: PUSH
45860: FOR_TO
45861: IFFALSE 45897
// if value = array [ i ] then
45863: LD_VAR 0 2
45867: PUSH
45868: LD_VAR 0 1
45872: PUSH
45873: LD_VAR 0 4
45877: ARRAY
45878: EQUAL
45879: IFFALSE 45895
// begin result := i ;
45881: LD_ADDR_VAR 0 3
45885: PUSH
45886: LD_VAR 0 4
45890: ST_TO_ADDR
// exit ;
45891: POP
45892: POP
45893: GO 45899
// end ;
45895: GO 45860
45897: POP
45898: POP
// end ;
45899: LD_VAR 0 3
45903: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45904: LD_INT 0
45906: PPUSH
// vc_chassis := chassis ;
45907: LD_ADDR_OWVAR 37
45911: PUSH
45912: LD_VAR 0 1
45916: ST_TO_ADDR
// vc_engine := engine ;
45917: LD_ADDR_OWVAR 39
45921: PUSH
45922: LD_VAR 0 2
45926: ST_TO_ADDR
// vc_control := control ;
45927: LD_ADDR_OWVAR 38
45931: PUSH
45932: LD_VAR 0 3
45936: ST_TO_ADDR
// vc_weapon := weapon ;
45937: LD_ADDR_OWVAR 40
45941: PUSH
45942: LD_VAR 0 4
45946: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45947: LD_ADDR_OWVAR 41
45951: PUSH
45952: LD_VAR 0 5
45956: ST_TO_ADDR
// end ;
45957: LD_VAR 0 6
45961: RET
// export function WantPlant ( unit ) ; var task ; begin
45962: LD_INT 0
45964: PPUSH
45965: PPUSH
// result := false ;
45966: LD_ADDR_VAR 0 2
45970: PUSH
45971: LD_INT 0
45973: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45974: LD_ADDR_VAR 0 3
45978: PUSH
45979: LD_VAR 0 1
45983: PPUSH
45984: CALL_OW 437
45988: ST_TO_ADDR
// if task then
45989: LD_VAR 0 3
45993: IFFALSE 46021
// if task [ 1 ] [ 1 ] = p then
45995: LD_VAR 0 3
45999: PUSH
46000: LD_INT 1
46002: ARRAY
46003: PUSH
46004: LD_INT 1
46006: ARRAY
46007: PUSH
46008: LD_STRING p
46010: EQUAL
46011: IFFALSE 46021
// result := true ;
46013: LD_ADDR_VAR 0 2
46017: PUSH
46018: LD_INT 1
46020: ST_TO_ADDR
// end ;
46021: LD_VAR 0 2
46025: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46026: LD_INT 0
46028: PPUSH
46029: PPUSH
46030: PPUSH
46031: PPUSH
// if pos < 1 then
46032: LD_VAR 0 2
46036: PUSH
46037: LD_INT 1
46039: LESS
46040: IFFALSE 46044
// exit ;
46042: GO 46347
// if pos = 1 then
46044: LD_VAR 0 2
46048: PUSH
46049: LD_INT 1
46051: EQUAL
46052: IFFALSE 46085
// result := Replace ( arr , pos [ 1 ] , value ) else
46054: LD_ADDR_VAR 0 4
46058: PUSH
46059: LD_VAR 0 1
46063: PPUSH
46064: LD_VAR 0 2
46068: PUSH
46069: LD_INT 1
46071: ARRAY
46072: PPUSH
46073: LD_VAR 0 3
46077: PPUSH
46078: CALL_OW 1
46082: ST_TO_ADDR
46083: GO 46347
// begin tmp := arr ;
46085: LD_ADDR_VAR 0 6
46089: PUSH
46090: LD_VAR 0 1
46094: ST_TO_ADDR
// s_arr := [ tmp ] ;
46095: LD_ADDR_VAR 0 7
46099: PUSH
46100: LD_VAR 0 6
46104: PUSH
46105: EMPTY
46106: LIST
46107: ST_TO_ADDR
// for i = 1 to pos - 1 do
46108: LD_ADDR_VAR 0 5
46112: PUSH
46113: DOUBLE
46114: LD_INT 1
46116: DEC
46117: ST_TO_ADDR
46118: LD_VAR 0 2
46122: PUSH
46123: LD_INT 1
46125: MINUS
46126: PUSH
46127: FOR_TO
46128: IFFALSE 46173
// begin tmp := tmp [ pos [ i ] ] ;
46130: LD_ADDR_VAR 0 6
46134: PUSH
46135: LD_VAR 0 6
46139: PUSH
46140: LD_VAR 0 2
46144: PUSH
46145: LD_VAR 0 5
46149: ARRAY
46150: ARRAY
46151: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46152: LD_ADDR_VAR 0 7
46156: PUSH
46157: LD_VAR 0 7
46161: PUSH
46162: LD_VAR 0 6
46166: PUSH
46167: EMPTY
46168: LIST
46169: ADD
46170: ST_TO_ADDR
// end ;
46171: GO 46127
46173: POP
46174: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46175: LD_ADDR_VAR 0 6
46179: PUSH
46180: LD_VAR 0 6
46184: PPUSH
46185: LD_VAR 0 2
46189: PUSH
46190: LD_VAR 0 2
46194: ARRAY
46195: PPUSH
46196: LD_VAR 0 3
46200: PPUSH
46201: CALL_OW 1
46205: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46206: LD_ADDR_VAR 0 7
46210: PUSH
46211: LD_VAR 0 7
46215: PPUSH
46216: LD_VAR 0 7
46220: PPUSH
46221: LD_VAR 0 6
46225: PPUSH
46226: CALL_OW 1
46230: ST_TO_ADDR
// for i = s_arr downto 2 do
46231: LD_ADDR_VAR 0 5
46235: PUSH
46236: DOUBLE
46237: LD_VAR 0 7
46241: INC
46242: ST_TO_ADDR
46243: LD_INT 2
46245: PUSH
46246: FOR_DOWNTO
46247: IFFALSE 46331
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46249: LD_ADDR_VAR 0 6
46253: PUSH
46254: LD_VAR 0 7
46258: PUSH
46259: LD_VAR 0 5
46263: PUSH
46264: LD_INT 1
46266: MINUS
46267: ARRAY
46268: PPUSH
46269: LD_VAR 0 2
46273: PUSH
46274: LD_VAR 0 5
46278: PUSH
46279: LD_INT 1
46281: MINUS
46282: ARRAY
46283: PPUSH
46284: LD_VAR 0 7
46288: PUSH
46289: LD_VAR 0 5
46293: ARRAY
46294: PPUSH
46295: CALL_OW 1
46299: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46300: LD_ADDR_VAR 0 7
46304: PUSH
46305: LD_VAR 0 7
46309: PPUSH
46310: LD_VAR 0 5
46314: PUSH
46315: LD_INT 1
46317: MINUS
46318: PPUSH
46319: LD_VAR 0 6
46323: PPUSH
46324: CALL_OW 1
46328: ST_TO_ADDR
// end ;
46329: GO 46246
46331: POP
46332: POP
// result := s_arr [ 1 ] ;
46333: LD_ADDR_VAR 0 4
46337: PUSH
46338: LD_VAR 0 7
46342: PUSH
46343: LD_INT 1
46345: ARRAY
46346: ST_TO_ADDR
// end ; end ;
46347: LD_VAR 0 4
46351: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46352: LD_INT 0
46354: PPUSH
46355: PPUSH
// if not list then
46356: LD_VAR 0 1
46360: NOT
46361: IFFALSE 46365
// exit ;
46363: GO 46456
// i := list [ pos1 ] ;
46365: LD_ADDR_VAR 0 5
46369: PUSH
46370: LD_VAR 0 1
46374: PUSH
46375: LD_VAR 0 2
46379: ARRAY
46380: ST_TO_ADDR
// if not i then
46381: LD_VAR 0 5
46385: NOT
46386: IFFALSE 46390
// exit ;
46388: GO 46456
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46390: LD_ADDR_VAR 0 1
46394: PUSH
46395: LD_VAR 0 1
46399: PPUSH
46400: LD_VAR 0 2
46404: PPUSH
46405: LD_VAR 0 1
46409: PUSH
46410: LD_VAR 0 3
46414: ARRAY
46415: PPUSH
46416: CALL_OW 1
46420: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46421: LD_ADDR_VAR 0 1
46425: PUSH
46426: LD_VAR 0 1
46430: PPUSH
46431: LD_VAR 0 3
46435: PPUSH
46436: LD_VAR 0 5
46440: PPUSH
46441: CALL_OW 1
46445: ST_TO_ADDR
// result := list ;
46446: LD_ADDR_VAR 0 4
46450: PUSH
46451: LD_VAR 0 1
46455: ST_TO_ADDR
// end ;
46456: LD_VAR 0 4
46460: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46461: LD_INT 0
46463: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46464: LD_ADDR_VAR 0 5
46468: PUSH
46469: LD_VAR 0 1
46473: PPUSH
46474: CALL_OW 250
46478: PPUSH
46479: LD_VAR 0 1
46483: PPUSH
46484: CALL_OW 251
46488: PPUSH
46489: LD_VAR 0 2
46493: PPUSH
46494: LD_VAR 0 3
46498: PPUSH
46499: LD_VAR 0 4
46503: PPUSH
46504: CALL 46882 0 5
46508: ST_TO_ADDR
// end ;
46509: LD_VAR 0 5
46513: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46514: LD_INT 0
46516: PPUSH
46517: PPUSH
46518: PPUSH
46519: PPUSH
// if not list or not unit then
46520: LD_VAR 0 2
46524: NOT
46525: PUSH
46526: LD_VAR 0 1
46530: NOT
46531: OR
46532: IFFALSE 46536
// exit ;
46534: GO 46877
// result := [ ] ;
46536: LD_ADDR_VAR 0 5
46540: PUSH
46541: EMPTY
46542: ST_TO_ADDR
// for i in list do
46543: LD_ADDR_VAR 0 6
46547: PUSH
46548: LD_VAR 0 2
46552: PUSH
46553: FOR_IN
46554: IFFALSE 46772
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46556: LD_ADDR_VAR 0 8
46560: PUSH
46561: LD_VAR 0 1
46565: PPUSH
46566: LD_VAR 0 6
46570: PUSH
46571: LD_INT 1
46573: ARRAY
46574: PPUSH
46575: LD_VAR 0 6
46579: PUSH
46580: LD_INT 2
46582: ARRAY
46583: PPUSH
46584: CALL_OW 297
46588: ST_TO_ADDR
// if not Count ( result ) then
46589: LD_VAR 0 5
46593: PPUSH
46594: CALL 43166 0 1
46598: NOT
46599: IFFALSE 46632
// begin result := Join ( result , [ i , tmp ] ) ;
46601: LD_ADDR_VAR 0 5
46605: PUSH
46606: LD_VAR 0 5
46610: PPUSH
46611: LD_VAR 0 6
46615: PUSH
46616: LD_VAR 0 8
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PPUSH
46625: CALL 78755 0 2
46629: ST_TO_ADDR
// continue ;
46630: GO 46553
// end ; if result [ result ] [ 2 ] <= tmp then
46632: LD_VAR 0 5
46636: PUSH
46637: LD_VAR 0 5
46641: ARRAY
46642: PUSH
46643: LD_INT 2
46645: ARRAY
46646: PUSH
46647: LD_VAR 0 8
46651: LESSEQUAL
46652: IFFALSE 46685
// result := Join ( result , [ i , tmp ] ) else
46654: LD_ADDR_VAR 0 5
46658: PUSH
46659: LD_VAR 0 5
46663: PPUSH
46664: LD_VAR 0 6
46668: PUSH
46669: LD_VAR 0 8
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PPUSH
46678: CALL 78755 0 2
46682: ST_TO_ADDR
46683: GO 46770
// begin for j := 1 to Count ( result ) do
46685: LD_ADDR_VAR 0 7
46689: PUSH
46690: DOUBLE
46691: LD_INT 1
46693: DEC
46694: ST_TO_ADDR
46695: LD_VAR 0 5
46699: PPUSH
46700: CALL 43166 0 1
46704: PUSH
46705: FOR_TO
46706: IFFALSE 46768
// begin if tmp < result [ j ] [ 2 ] then
46708: LD_VAR 0 8
46712: PUSH
46713: LD_VAR 0 5
46717: PUSH
46718: LD_VAR 0 7
46722: ARRAY
46723: PUSH
46724: LD_INT 2
46726: ARRAY
46727: LESS
46728: IFFALSE 46766
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46730: LD_ADDR_VAR 0 5
46734: PUSH
46735: LD_VAR 0 5
46739: PPUSH
46740: LD_VAR 0 7
46744: PPUSH
46745: LD_VAR 0 6
46749: PUSH
46750: LD_VAR 0 8
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PPUSH
46759: CALL_OW 2
46763: ST_TO_ADDR
// break ;
46764: GO 46768
// end ; end ;
46766: GO 46705
46768: POP
46769: POP
// end ; end ;
46770: GO 46553
46772: POP
46773: POP
// if result and not asc then
46774: LD_VAR 0 5
46778: PUSH
46779: LD_VAR 0 3
46783: NOT
46784: AND
46785: IFFALSE 46802
// result := ReverseArray ( result ) ;
46787: LD_ADDR_VAR 0 5
46791: PUSH
46792: LD_VAR 0 5
46796: PPUSH
46797: CALL 74042 0 1
46801: ST_TO_ADDR
// tmp := [ ] ;
46802: LD_ADDR_VAR 0 8
46806: PUSH
46807: EMPTY
46808: ST_TO_ADDR
// if mode then
46809: LD_VAR 0 4
46813: IFFALSE 46877
// begin for i := 1 to result do
46815: LD_ADDR_VAR 0 6
46819: PUSH
46820: DOUBLE
46821: LD_INT 1
46823: DEC
46824: ST_TO_ADDR
46825: LD_VAR 0 5
46829: PUSH
46830: FOR_TO
46831: IFFALSE 46865
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46833: LD_ADDR_VAR 0 8
46837: PUSH
46838: LD_VAR 0 8
46842: PPUSH
46843: LD_VAR 0 5
46847: PUSH
46848: LD_VAR 0 6
46852: ARRAY
46853: PUSH
46854: LD_INT 1
46856: ARRAY
46857: PPUSH
46858: CALL 78755 0 2
46862: ST_TO_ADDR
46863: GO 46830
46865: POP
46866: POP
// result := tmp ;
46867: LD_ADDR_VAR 0 5
46871: PUSH
46872: LD_VAR 0 8
46876: ST_TO_ADDR
// end ; end ;
46877: LD_VAR 0 5
46881: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46882: LD_INT 0
46884: PPUSH
46885: PPUSH
46886: PPUSH
46887: PPUSH
// if not list then
46888: LD_VAR 0 3
46892: NOT
46893: IFFALSE 46897
// exit ;
46895: GO 47285
// result := [ ] ;
46897: LD_ADDR_VAR 0 6
46901: PUSH
46902: EMPTY
46903: ST_TO_ADDR
// for i in list do
46904: LD_ADDR_VAR 0 7
46908: PUSH
46909: LD_VAR 0 3
46913: PUSH
46914: FOR_IN
46915: IFFALSE 47117
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46917: LD_ADDR_VAR 0 9
46921: PUSH
46922: LD_VAR 0 7
46926: PPUSH
46927: LD_VAR 0 1
46931: PPUSH
46932: LD_VAR 0 2
46936: PPUSH
46937: CALL_OW 297
46941: ST_TO_ADDR
// if not result then
46942: LD_VAR 0 6
46946: NOT
46947: IFFALSE 46973
// result := [ [ i , tmp ] ] else
46949: LD_ADDR_VAR 0 6
46953: PUSH
46954: LD_VAR 0 7
46958: PUSH
46959: LD_VAR 0 9
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: EMPTY
46969: LIST
46970: ST_TO_ADDR
46971: GO 47115
// begin if result [ result ] [ 2 ] < tmp then
46973: LD_VAR 0 6
46977: PUSH
46978: LD_VAR 0 6
46982: ARRAY
46983: PUSH
46984: LD_INT 2
46986: ARRAY
46987: PUSH
46988: LD_VAR 0 9
46992: LESS
46993: IFFALSE 47035
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46995: LD_ADDR_VAR 0 6
46999: PUSH
47000: LD_VAR 0 6
47004: PPUSH
47005: LD_VAR 0 6
47009: PUSH
47010: LD_INT 1
47012: PLUS
47013: PPUSH
47014: LD_VAR 0 7
47018: PUSH
47019: LD_VAR 0 9
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PPUSH
47028: CALL_OW 2
47032: ST_TO_ADDR
47033: GO 47115
// for j = 1 to result do
47035: LD_ADDR_VAR 0 8
47039: PUSH
47040: DOUBLE
47041: LD_INT 1
47043: DEC
47044: ST_TO_ADDR
47045: LD_VAR 0 6
47049: PUSH
47050: FOR_TO
47051: IFFALSE 47113
// begin if tmp < result [ j ] [ 2 ] then
47053: LD_VAR 0 9
47057: PUSH
47058: LD_VAR 0 6
47062: PUSH
47063: LD_VAR 0 8
47067: ARRAY
47068: PUSH
47069: LD_INT 2
47071: ARRAY
47072: LESS
47073: IFFALSE 47111
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47075: LD_ADDR_VAR 0 6
47079: PUSH
47080: LD_VAR 0 6
47084: PPUSH
47085: LD_VAR 0 8
47089: PPUSH
47090: LD_VAR 0 7
47094: PUSH
47095: LD_VAR 0 9
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PPUSH
47104: CALL_OW 2
47108: ST_TO_ADDR
// break ;
47109: GO 47113
// end ; end ;
47111: GO 47050
47113: POP
47114: POP
// end ; end ;
47115: GO 46914
47117: POP
47118: POP
// if result and not asc then
47119: LD_VAR 0 6
47123: PUSH
47124: LD_VAR 0 4
47128: NOT
47129: AND
47130: IFFALSE 47205
// begin tmp := result ;
47132: LD_ADDR_VAR 0 9
47136: PUSH
47137: LD_VAR 0 6
47141: ST_TO_ADDR
// for i = tmp downto 1 do
47142: LD_ADDR_VAR 0 7
47146: PUSH
47147: DOUBLE
47148: LD_VAR 0 9
47152: INC
47153: ST_TO_ADDR
47154: LD_INT 1
47156: PUSH
47157: FOR_DOWNTO
47158: IFFALSE 47203
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47160: LD_ADDR_VAR 0 6
47164: PUSH
47165: LD_VAR 0 6
47169: PPUSH
47170: LD_VAR 0 9
47174: PUSH
47175: LD_VAR 0 7
47179: MINUS
47180: PUSH
47181: LD_INT 1
47183: PLUS
47184: PPUSH
47185: LD_VAR 0 9
47189: PUSH
47190: LD_VAR 0 7
47194: ARRAY
47195: PPUSH
47196: CALL_OW 1
47200: ST_TO_ADDR
47201: GO 47157
47203: POP
47204: POP
// end ; tmp := [ ] ;
47205: LD_ADDR_VAR 0 9
47209: PUSH
47210: EMPTY
47211: ST_TO_ADDR
// if mode then
47212: LD_VAR 0 5
47216: IFFALSE 47285
// begin for i = 1 to result do
47218: LD_ADDR_VAR 0 7
47222: PUSH
47223: DOUBLE
47224: LD_INT 1
47226: DEC
47227: ST_TO_ADDR
47228: LD_VAR 0 6
47232: PUSH
47233: FOR_TO
47234: IFFALSE 47273
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47236: LD_ADDR_VAR 0 9
47240: PUSH
47241: LD_VAR 0 9
47245: PPUSH
47246: LD_VAR 0 7
47250: PPUSH
47251: LD_VAR 0 6
47255: PUSH
47256: LD_VAR 0 7
47260: ARRAY
47261: PUSH
47262: LD_INT 1
47264: ARRAY
47265: PPUSH
47266: CALL_OW 1
47270: ST_TO_ADDR
47271: GO 47233
47273: POP
47274: POP
// result := tmp ;
47275: LD_ADDR_VAR 0 6
47279: PUSH
47280: LD_VAR 0 9
47284: ST_TO_ADDR
// end ; end ;
47285: LD_VAR 0 6
47289: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47290: LD_INT 0
47292: PPUSH
47293: PPUSH
47294: PPUSH
47295: PPUSH
47296: PPUSH
47297: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47298: LD_ADDR_VAR 0 5
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: ST_TO_ADDR
// if not x or not y then
47320: LD_VAR 0 2
47324: NOT
47325: PUSH
47326: LD_VAR 0 3
47330: NOT
47331: OR
47332: IFFALSE 47336
// exit ;
47334: GO 48986
// if not range then
47336: LD_VAR 0 4
47340: NOT
47341: IFFALSE 47351
// range := 10 ;
47343: LD_ADDR_VAR 0 4
47347: PUSH
47348: LD_INT 10
47350: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47351: LD_ADDR_VAR 0 8
47355: PUSH
47356: LD_INT 81
47358: PUSH
47359: LD_VAR 0 1
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 92
47370: PUSH
47371: LD_VAR 0 2
47375: PUSH
47376: LD_VAR 0 3
47380: PUSH
47381: LD_VAR 0 4
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: LD_INT 21
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: PPUSH
47414: CALL_OW 69
47418: ST_TO_ADDR
// if not tmp then
47419: LD_VAR 0 8
47423: NOT
47424: IFFALSE 47428
// exit ;
47426: GO 48986
// for i in tmp do
47428: LD_ADDR_VAR 0 6
47432: PUSH
47433: LD_VAR 0 8
47437: PUSH
47438: FOR_IN
47439: IFFALSE 48961
// begin points := [ 0 , 0 , 0 ] ;
47441: LD_ADDR_VAR 0 9
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: LIST
47459: ST_TO_ADDR
// bpoints := 1 ;
47460: LD_ADDR_VAR 0 10
47464: PUSH
47465: LD_INT 1
47467: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47468: LD_VAR 0 6
47472: PPUSH
47473: CALL_OW 247
47477: PUSH
47478: LD_INT 1
47480: DOUBLE
47481: EQUAL
47482: IFTRUE 47486
47484: GO 48064
47486: POP
// begin if GetClass ( i ) = 1 then
47487: LD_VAR 0 6
47491: PPUSH
47492: CALL_OW 257
47496: PUSH
47497: LD_INT 1
47499: EQUAL
47500: IFFALSE 47521
// points := [ 10 , 5 , 3 ] ;
47502: LD_ADDR_VAR 0 9
47506: PUSH
47507: LD_INT 10
47509: PUSH
47510: LD_INT 5
47512: PUSH
47513: LD_INT 3
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: LIST
47520: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47521: LD_VAR 0 6
47525: PPUSH
47526: CALL_OW 257
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 3
47536: PUSH
47537: LD_INT 4
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: IN
47545: IFFALSE 47566
// points := [ 3 , 2 , 1 ] ;
47547: LD_ADDR_VAR 0 9
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: LIST
47565: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47566: LD_VAR 0 6
47570: PPUSH
47571: CALL_OW 257
47575: PUSH
47576: LD_INT 5
47578: EQUAL
47579: IFFALSE 47600
// points := [ 130 , 5 , 2 ] ;
47581: LD_ADDR_VAR 0 9
47585: PUSH
47586: LD_INT 130
47588: PUSH
47589: LD_INT 5
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47600: LD_VAR 0 6
47604: PPUSH
47605: CALL_OW 257
47609: PUSH
47610: LD_INT 8
47612: EQUAL
47613: IFFALSE 47634
// points := [ 35 , 35 , 30 ] ;
47615: LD_ADDR_VAR 0 9
47619: PUSH
47620: LD_INT 35
47622: PUSH
47623: LD_INT 35
47625: PUSH
47626: LD_INT 30
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: LIST
47633: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47634: LD_VAR 0 6
47638: PPUSH
47639: CALL_OW 257
47643: PUSH
47644: LD_INT 9
47646: EQUAL
47647: IFFALSE 47668
// points := [ 20 , 55 , 40 ] ;
47649: LD_ADDR_VAR 0 9
47653: PUSH
47654: LD_INT 20
47656: PUSH
47657: LD_INT 55
47659: PUSH
47660: LD_INT 40
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: LIST
47667: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47668: LD_VAR 0 6
47672: PPUSH
47673: CALL_OW 257
47677: PUSH
47678: LD_INT 12
47680: PUSH
47681: LD_INT 16
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: IN
47688: IFFALSE 47709
// points := [ 5 , 3 , 2 ] ;
47690: LD_ADDR_VAR 0 9
47694: PUSH
47695: LD_INT 5
47697: PUSH
47698: LD_INT 3
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47709: LD_VAR 0 6
47713: PPUSH
47714: CALL_OW 257
47718: PUSH
47719: LD_INT 17
47721: EQUAL
47722: IFFALSE 47743
// points := [ 100 , 50 , 75 ] ;
47724: LD_ADDR_VAR 0 9
47728: PUSH
47729: LD_INT 100
47731: PUSH
47732: LD_INT 50
47734: PUSH
47735: LD_INT 75
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: LIST
47742: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47743: LD_VAR 0 6
47747: PPUSH
47748: CALL_OW 257
47752: PUSH
47753: LD_INT 15
47755: EQUAL
47756: IFFALSE 47777
// points := [ 10 , 5 , 3 ] ;
47758: LD_ADDR_VAR 0 9
47762: PUSH
47763: LD_INT 10
47765: PUSH
47766: LD_INT 5
47768: PUSH
47769: LD_INT 3
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47777: LD_VAR 0 6
47781: PPUSH
47782: CALL_OW 257
47786: PUSH
47787: LD_INT 14
47789: EQUAL
47790: IFFALSE 47811
// points := [ 10 , 0 , 0 ] ;
47792: LD_ADDR_VAR 0 9
47796: PUSH
47797: LD_INT 10
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: LIST
47810: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47811: LD_VAR 0 6
47815: PPUSH
47816: CALL_OW 257
47820: PUSH
47821: LD_INT 11
47823: EQUAL
47824: IFFALSE 47845
// points := [ 30 , 10 , 5 ] ;
47826: LD_ADDR_VAR 0 9
47830: PUSH
47831: LD_INT 30
47833: PUSH
47834: LD_INT 10
47836: PUSH
47837: LD_INT 5
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47845: LD_VAR 0 1
47849: PPUSH
47850: LD_INT 5
47852: PPUSH
47853: CALL_OW 321
47857: PUSH
47858: LD_INT 2
47860: EQUAL
47861: IFFALSE 47878
// bpoints := bpoints * 1.8 ;
47863: LD_ADDR_VAR 0 10
47867: PUSH
47868: LD_VAR 0 10
47872: PUSH
47873: LD_REAL  1.80000000000000E+0000
47876: MUL
47877: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47878: LD_VAR 0 6
47882: PPUSH
47883: CALL_OW 257
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: LD_INT 4
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: IN
47906: PUSH
47907: LD_VAR 0 1
47911: PPUSH
47912: LD_INT 51
47914: PPUSH
47915: CALL_OW 321
47919: PUSH
47920: LD_INT 2
47922: EQUAL
47923: AND
47924: IFFALSE 47941
// bpoints := bpoints * 1.2 ;
47926: LD_ADDR_VAR 0 10
47930: PUSH
47931: LD_VAR 0 10
47935: PUSH
47936: LD_REAL  1.20000000000000E+0000
47939: MUL
47940: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47941: LD_VAR 0 6
47945: PPUSH
47946: CALL_OW 257
47950: PUSH
47951: LD_INT 5
47953: PUSH
47954: LD_INT 7
47956: PUSH
47957: LD_INT 9
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: LIST
47964: IN
47965: PUSH
47966: LD_VAR 0 1
47970: PPUSH
47971: LD_INT 52
47973: PPUSH
47974: CALL_OW 321
47978: PUSH
47979: LD_INT 2
47981: EQUAL
47982: AND
47983: IFFALSE 48000
// bpoints := bpoints * 1.5 ;
47985: LD_ADDR_VAR 0 10
47989: PUSH
47990: LD_VAR 0 10
47994: PUSH
47995: LD_REAL  1.50000000000000E+0000
47998: MUL
47999: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48000: LD_VAR 0 1
48004: PPUSH
48005: LD_INT 66
48007: PPUSH
48008: CALL_OW 321
48012: PUSH
48013: LD_INT 2
48015: EQUAL
48016: IFFALSE 48033
// bpoints := bpoints * 1.1 ;
48018: LD_ADDR_VAR 0 10
48022: PUSH
48023: LD_VAR 0 10
48027: PUSH
48028: LD_REAL  1.10000000000000E+0000
48031: MUL
48032: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48033: LD_ADDR_VAR 0 10
48037: PUSH
48038: LD_VAR 0 10
48042: PUSH
48043: LD_VAR 0 6
48047: PPUSH
48048: LD_INT 1
48050: PPUSH
48051: CALL_OW 259
48055: PUSH
48056: LD_REAL  1.15000000000000E+0000
48059: MUL
48060: MUL
48061: ST_TO_ADDR
// end ; unit_vehicle :
48062: GO 48890
48064: LD_INT 2
48066: DOUBLE
48067: EQUAL
48068: IFTRUE 48072
48070: GO 48878
48072: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48073: LD_VAR 0 6
48077: PPUSH
48078: CALL_OW 264
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 42
48088: PUSH
48089: LD_INT 24
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: IN
48097: IFFALSE 48118
// points := [ 25 , 5 , 3 ] ;
48099: LD_ADDR_VAR 0 9
48103: PUSH
48104: LD_INT 25
48106: PUSH
48107: LD_INT 5
48109: PUSH
48110: LD_INT 3
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48118: LD_VAR 0 6
48122: PPUSH
48123: CALL_OW 264
48127: PUSH
48128: LD_INT 4
48130: PUSH
48131: LD_INT 43
48133: PUSH
48134: LD_INT 25
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: LIST
48141: IN
48142: IFFALSE 48163
// points := [ 40 , 15 , 5 ] ;
48144: LD_ADDR_VAR 0 9
48148: PUSH
48149: LD_INT 40
48151: PUSH
48152: LD_INT 15
48154: PUSH
48155: LD_INT 5
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: LIST
48162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48163: LD_VAR 0 6
48167: PPUSH
48168: CALL_OW 264
48172: PUSH
48173: LD_INT 3
48175: PUSH
48176: LD_INT 23
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: IN
48183: IFFALSE 48204
// points := [ 7 , 25 , 8 ] ;
48185: LD_ADDR_VAR 0 9
48189: PUSH
48190: LD_INT 7
48192: PUSH
48193: LD_INT 25
48195: PUSH
48196: LD_INT 8
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48204: LD_VAR 0 6
48208: PPUSH
48209: CALL_OW 264
48213: PUSH
48214: LD_INT 5
48216: PUSH
48217: LD_INT 27
48219: PUSH
48220: LD_INT 44
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: LIST
48227: IN
48228: IFFALSE 48249
// points := [ 14 , 50 , 16 ] ;
48230: LD_ADDR_VAR 0 9
48234: PUSH
48235: LD_INT 14
48237: PUSH
48238: LD_INT 50
48240: PUSH
48241: LD_INT 16
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48249: LD_VAR 0 6
48253: PPUSH
48254: CALL_OW 264
48258: PUSH
48259: LD_INT 6
48261: PUSH
48262: LD_INT 46
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: IN
48269: IFFALSE 48290
// points := [ 32 , 120 , 70 ] ;
48271: LD_ADDR_VAR 0 9
48275: PUSH
48276: LD_INT 32
48278: PUSH
48279: LD_INT 120
48281: PUSH
48282: LD_INT 70
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48290: LD_VAR 0 6
48294: PPUSH
48295: CALL_OW 264
48299: PUSH
48300: LD_INT 7
48302: PUSH
48303: LD_INT 28
48305: PUSH
48306: LD_INT 45
48308: PUSH
48309: LD_INT 92
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: IN
48318: IFFALSE 48339
// points := [ 35 , 20 , 45 ] ;
48320: LD_ADDR_VAR 0 9
48324: PUSH
48325: LD_INT 35
48327: PUSH
48328: LD_INT 20
48330: PUSH
48331: LD_INT 45
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48339: LD_VAR 0 6
48343: PPUSH
48344: CALL_OW 264
48348: PUSH
48349: LD_INT 47
48351: PUSH
48352: EMPTY
48353: LIST
48354: IN
48355: IFFALSE 48376
// points := [ 67 , 45 , 75 ] ;
48357: LD_ADDR_VAR 0 9
48361: PUSH
48362: LD_INT 67
48364: PUSH
48365: LD_INT 45
48367: PUSH
48368: LD_INT 75
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: LIST
48375: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48376: LD_VAR 0 6
48380: PPUSH
48381: CALL_OW 264
48385: PUSH
48386: LD_INT 26
48388: PUSH
48389: EMPTY
48390: LIST
48391: IN
48392: IFFALSE 48413
// points := [ 120 , 30 , 80 ] ;
48394: LD_ADDR_VAR 0 9
48398: PUSH
48399: LD_INT 120
48401: PUSH
48402: LD_INT 30
48404: PUSH
48405: LD_INT 80
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: LIST
48412: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48413: LD_VAR 0 6
48417: PPUSH
48418: CALL_OW 264
48422: PUSH
48423: LD_INT 22
48425: PUSH
48426: EMPTY
48427: LIST
48428: IN
48429: IFFALSE 48450
// points := [ 40 , 1 , 1 ] ;
48431: LD_ADDR_VAR 0 9
48435: PUSH
48436: LD_INT 40
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: LIST
48449: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48450: LD_VAR 0 6
48454: PPUSH
48455: CALL_OW 264
48459: PUSH
48460: LD_INT 29
48462: PUSH
48463: EMPTY
48464: LIST
48465: IN
48466: IFFALSE 48487
// points := [ 70 , 200 , 400 ] ;
48468: LD_ADDR_VAR 0 9
48472: PUSH
48473: LD_INT 70
48475: PUSH
48476: LD_INT 200
48478: PUSH
48479: LD_INT 400
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: LIST
48486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48487: LD_VAR 0 6
48491: PPUSH
48492: CALL_OW 264
48496: PUSH
48497: LD_INT 14
48499: PUSH
48500: LD_INT 53
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: IN
48507: IFFALSE 48528
// points := [ 40 , 10 , 20 ] ;
48509: LD_ADDR_VAR 0 9
48513: PUSH
48514: LD_INT 40
48516: PUSH
48517: LD_INT 10
48519: PUSH
48520: LD_INT 20
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48528: LD_VAR 0 6
48532: PPUSH
48533: CALL_OW 264
48537: PUSH
48538: LD_INT 9
48540: PUSH
48541: EMPTY
48542: LIST
48543: IN
48544: IFFALSE 48565
// points := [ 5 , 70 , 20 ] ;
48546: LD_ADDR_VAR 0 9
48550: PUSH
48551: LD_INT 5
48553: PUSH
48554: LD_INT 70
48556: PUSH
48557: LD_INT 20
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: LIST
48564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48565: LD_VAR 0 6
48569: PPUSH
48570: CALL_OW 264
48574: PUSH
48575: LD_INT 10
48577: PUSH
48578: EMPTY
48579: LIST
48580: IN
48581: IFFALSE 48602
// points := [ 35 , 110 , 70 ] ;
48583: LD_ADDR_VAR 0 9
48587: PUSH
48588: LD_INT 35
48590: PUSH
48591: LD_INT 110
48593: PUSH
48594: LD_INT 70
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: LIST
48601: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48602: LD_VAR 0 6
48606: PPUSH
48607: CALL_OW 265
48611: PUSH
48612: LD_INT 25
48614: EQUAL
48615: IFFALSE 48636
// points := [ 80 , 65 , 100 ] ;
48617: LD_ADDR_VAR 0 9
48621: PUSH
48622: LD_INT 80
48624: PUSH
48625: LD_INT 65
48627: PUSH
48628: LD_INT 100
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48636: LD_VAR 0 6
48640: PPUSH
48641: CALL_OW 263
48645: PUSH
48646: LD_INT 1
48648: EQUAL
48649: IFFALSE 48684
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48651: LD_ADDR_VAR 0 10
48655: PUSH
48656: LD_VAR 0 10
48660: PUSH
48661: LD_VAR 0 6
48665: PPUSH
48666: CALL_OW 311
48670: PPUSH
48671: LD_INT 3
48673: PPUSH
48674: CALL_OW 259
48678: PUSH
48679: LD_INT 4
48681: MUL
48682: MUL
48683: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48684: LD_VAR 0 6
48688: PPUSH
48689: CALL_OW 263
48693: PUSH
48694: LD_INT 2
48696: EQUAL
48697: IFFALSE 48748
// begin j := IsControledBy ( i ) ;
48699: LD_ADDR_VAR 0 7
48703: PUSH
48704: LD_VAR 0 6
48708: PPUSH
48709: CALL_OW 312
48713: ST_TO_ADDR
// if j then
48714: LD_VAR 0 7
48718: IFFALSE 48748
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48720: LD_ADDR_VAR 0 10
48724: PUSH
48725: LD_VAR 0 10
48729: PUSH
48730: LD_VAR 0 7
48734: PPUSH
48735: LD_INT 3
48737: PPUSH
48738: CALL_OW 259
48742: PUSH
48743: LD_INT 3
48745: MUL
48746: MUL
48747: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48748: LD_VAR 0 6
48752: PPUSH
48753: CALL_OW 264
48757: PUSH
48758: LD_INT 5
48760: PUSH
48761: LD_INT 6
48763: PUSH
48764: LD_INT 46
48766: PUSH
48767: LD_INT 44
48769: PUSH
48770: LD_INT 47
48772: PUSH
48773: LD_INT 45
48775: PUSH
48776: LD_INT 28
48778: PUSH
48779: LD_INT 7
48781: PUSH
48782: LD_INT 27
48784: PUSH
48785: LD_INT 29
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: IN
48800: PUSH
48801: LD_VAR 0 1
48805: PPUSH
48806: LD_INT 52
48808: PPUSH
48809: CALL_OW 321
48813: PUSH
48814: LD_INT 2
48816: EQUAL
48817: AND
48818: IFFALSE 48835
// bpoints := bpoints * 1.2 ;
48820: LD_ADDR_VAR 0 10
48824: PUSH
48825: LD_VAR 0 10
48829: PUSH
48830: LD_REAL  1.20000000000000E+0000
48833: MUL
48834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48835: LD_VAR 0 6
48839: PPUSH
48840: CALL_OW 264
48844: PUSH
48845: LD_INT 6
48847: PUSH
48848: LD_INT 46
48850: PUSH
48851: LD_INT 47
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: LIST
48858: IN
48859: IFFALSE 48876
// bpoints := bpoints * 1.2 ;
48861: LD_ADDR_VAR 0 10
48865: PUSH
48866: LD_VAR 0 10
48870: PUSH
48871: LD_REAL  1.20000000000000E+0000
48874: MUL
48875: ST_TO_ADDR
// end ; unit_building :
48876: GO 48890
48878: LD_INT 3
48880: DOUBLE
48881: EQUAL
48882: IFTRUE 48886
48884: GO 48889
48886: POP
// ; end ;
48887: GO 48890
48889: POP
// for j = 1 to 3 do
48890: LD_ADDR_VAR 0 7
48894: PUSH
48895: DOUBLE
48896: LD_INT 1
48898: DEC
48899: ST_TO_ADDR
48900: LD_INT 3
48902: PUSH
48903: FOR_TO
48904: IFFALSE 48957
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48906: LD_ADDR_VAR 0 5
48910: PUSH
48911: LD_VAR 0 5
48915: PPUSH
48916: LD_VAR 0 7
48920: PPUSH
48921: LD_VAR 0 5
48925: PUSH
48926: LD_VAR 0 7
48930: ARRAY
48931: PUSH
48932: LD_VAR 0 9
48936: PUSH
48937: LD_VAR 0 7
48941: ARRAY
48942: PUSH
48943: LD_VAR 0 10
48947: MUL
48948: PLUS
48949: PPUSH
48950: CALL_OW 1
48954: ST_TO_ADDR
48955: GO 48903
48957: POP
48958: POP
// end ;
48959: GO 47438
48961: POP
48962: POP
// result := Replace ( result , 4 , tmp ) ;
48963: LD_ADDR_VAR 0 5
48967: PUSH
48968: LD_VAR 0 5
48972: PPUSH
48973: LD_INT 4
48975: PPUSH
48976: LD_VAR 0 8
48980: PPUSH
48981: CALL_OW 1
48985: ST_TO_ADDR
// end ;
48986: LD_VAR 0 5
48990: RET
// export function DangerAtRange ( unit , range ) ; begin
48991: LD_INT 0
48993: PPUSH
// if not unit then
48994: LD_VAR 0 1
48998: NOT
48999: IFFALSE 49003
// exit ;
49001: GO 49048
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49003: LD_ADDR_VAR 0 3
49007: PUSH
49008: LD_VAR 0 1
49012: PPUSH
49013: CALL_OW 255
49017: PPUSH
49018: LD_VAR 0 1
49022: PPUSH
49023: CALL_OW 250
49027: PPUSH
49028: LD_VAR 0 1
49032: PPUSH
49033: CALL_OW 251
49037: PPUSH
49038: LD_VAR 0 2
49042: PPUSH
49043: CALL 47290 0 4
49047: ST_TO_ADDR
// end ;
49048: LD_VAR 0 3
49052: RET
// export function DangerInArea ( side , area ) ; begin
49053: LD_INT 0
49055: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49056: LD_ADDR_VAR 0 3
49060: PUSH
49061: LD_VAR 0 2
49065: PPUSH
49066: LD_INT 81
49068: PUSH
49069: LD_VAR 0 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PPUSH
49078: CALL_OW 70
49082: ST_TO_ADDR
// end ;
49083: LD_VAR 0 3
49087: RET
// export function IsExtension ( b ) ; begin
49088: LD_INT 0
49090: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49091: LD_ADDR_VAR 0 2
49095: PUSH
49096: LD_VAR 0 1
49100: PUSH
49101: LD_INT 23
49103: PUSH
49104: LD_INT 20
49106: PUSH
49107: LD_INT 22
49109: PUSH
49110: LD_INT 17
49112: PUSH
49113: LD_INT 24
49115: PUSH
49116: LD_INT 21
49118: PUSH
49119: LD_INT 19
49121: PUSH
49122: LD_INT 16
49124: PUSH
49125: LD_INT 25
49127: PUSH
49128: LD_INT 18
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: IN
49143: ST_TO_ADDR
// end ;
49144: LD_VAR 0 2
49148: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49149: LD_INT 0
49151: PPUSH
49152: PPUSH
49153: PPUSH
// result := [ ] ;
49154: LD_ADDR_VAR 0 4
49158: PUSH
49159: EMPTY
49160: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49161: LD_ADDR_VAR 0 5
49165: PUSH
49166: LD_VAR 0 2
49170: PPUSH
49171: LD_INT 21
49173: PUSH
49174: LD_INT 3
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PPUSH
49181: CALL_OW 70
49185: ST_TO_ADDR
// if not tmp then
49186: LD_VAR 0 5
49190: NOT
49191: IFFALSE 49195
// exit ;
49193: GO 49259
// if checkLink then
49195: LD_VAR 0 3
49199: IFFALSE 49249
// begin for i in tmp do
49201: LD_ADDR_VAR 0 6
49205: PUSH
49206: LD_VAR 0 5
49210: PUSH
49211: FOR_IN
49212: IFFALSE 49247
// if GetBase ( i ) <> base then
49214: LD_VAR 0 6
49218: PPUSH
49219: CALL_OW 274
49223: PUSH
49224: LD_VAR 0 1
49228: NONEQUAL
49229: IFFALSE 49245
// ComLinkToBase ( base , i ) ;
49231: LD_VAR 0 1
49235: PPUSH
49236: LD_VAR 0 6
49240: PPUSH
49241: CALL_OW 169
49245: GO 49211
49247: POP
49248: POP
// end ; result := tmp ;
49249: LD_ADDR_VAR 0 4
49253: PUSH
49254: LD_VAR 0 5
49258: ST_TO_ADDR
// end ;
49259: LD_VAR 0 4
49263: RET
// export function ComComplete ( units , b ) ; var i ; begin
49264: LD_INT 0
49266: PPUSH
49267: PPUSH
// if not units then
49268: LD_VAR 0 1
49272: NOT
49273: IFFALSE 49277
// exit ;
49275: GO 49367
// for i in units do
49277: LD_ADDR_VAR 0 4
49281: PUSH
49282: LD_VAR 0 1
49286: PUSH
49287: FOR_IN
49288: IFFALSE 49365
// if BuildingStatus ( b ) = bs_build then
49290: LD_VAR 0 2
49294: PPUSH
49295: CALL_OW 461
49299: PUSH
49300: LD_INT 1
49302: EQUAL
49303: IFFALSE 49363
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49305: LD_VAR 0 4
49309: PPUSH
49310: LD_STRING h
49312: PUSH
49313: LD_VAR 0 2
49317: PPUSH
49318: CALL_OW 250
49322: PUSH
49323: LD_VAR 0 2
49327: PPUSH
49328: CALL_OW 251
49332: PUSH
49333: LD_VAR 0 2
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: PUSH
49356: EMPTY
49357: LIST
49358: PPUSH
49359: CALL_OW 446
49363: GO 49287
49365: POP
49366: POP
// end ;
49367: LD_VAR 0 3
49371: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49372: LD_INT 0
49374: PPUSH
49375: PPUSH
49376: PPUSH
49377: PPUSH
49378: PPUSH
49379: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49380: LD_VAR 0 1
49384: NOT
49385: PUSH
49386: LD_VAR 0 1
49390: PPUSH
49391: CALL_OW 263
49395: PUSH
49396: LD_INT 2
49398: NONEQUAL
49399: OR
49400: IFFALSE 49404
// exit ;
49402: GO 49720
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49404: LD_ADDR_VAR 0 6
49408: PUSH
49409: LD_INT 22
49411: PUSH
49412: LD_VAR 0 1
49416: PPUSH
49417: CALL_OW 255
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: LD_INT 30
49431: PUSH
49432: LD_INT 36
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 34
49441: PUSH
49442: LD_INT 31
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: LIST
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PPUSH
49458: CALL_OW 69
49462: ST_TO_ADDR
// if not tmp then
49463: LD_VAR 0 6
49467: NOT
49468: IFFALSE 49472
// exit ;
49470: GO 49720
// result := [ ] ;
49472: LD_ADDR_VAR 0 2
49476: PUSH
49477: EMPTY
49478: ST_TO_ADDR
// for i in tmp do
49479: LD_ADDR_VAR 0 3
49483: PUSH
49484: LD_VAR 0 6
49488: PUSH
49489: FOR_IN
49490: IFFALSE 49561
// begin t := UnitsInside ( i ) ;
49492: LD_ADDR_VAR 0 4
49496: PUSH
49497: LD_VAR 0 3
49501: PPUSH
49502: CALL_OW 313
49506: ST_TO_ADDR
// if t then
49507: LD_VAR 0 4
49511: IFFALSE 49559
// for j in t do
49513: LD_ADDR_VAR 0 7
49517: PUSH
49518: LD_VAR 0 4
49522: PUSH
49523: FOR_IN
49524: IFFALSE 49557
// result := Replace ( result , result + 1 , j ) ;
49526: LD_ADDR_VAR 0 2
49530: PUSH
49531: LD_VAR 0 2
49535: PPUSH
49536: LD_VAR 0 2
49540: PUSH
49541: LD_INT 1
49543: PLUS
49544: PPUSH
49545: LD_VAR 0 7
49549: PPUSH
49550: CALL_OW 1
49554: ST_TO_ADDR
49555: GO 49523
49557: POP
49558: POP
// end ;
49559: GO 49489
49561: POP
49562: POP
// if not result then
49563: LD_VAR 0 2
49567: NOT
49568: IFFALSE 49572
// exit ;
49570: GO 49720
// mech := result [ 1 ] ;
49572: LD_ADDR_VAR 0 5
49576: PUSH
49577: LD_VAR 0 2
49581: PUSH
49582: LD_INT 1
49584: ARRAY
49585: ST_TO_ADDR
// if result > 1 then
49586: LD_VAR 0 2
49590: PUSH
49591: LD_INT 1
49593: GREATER
49594: IFFALSE 49706
// begin for i = 2 to result do
49596: LD_ADDR_VAR 0 3
49600: PUSH
49601: DOUBLE
49602: LD_INT 2
49604: DEC
49605: ST_TO_ADDR
49606: LD_VAR 0 2
49610: PUSH
49611: FOR_TO
49612: IFFALSE 49704
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49614: LD_ADDR_VAR 0 4
49618: PUSH
49619: LD_VAR 0 2
49623: PUSH
49624: LD_VAR 0 3
49628: ARRAY
49629: PPUSH
49630: LD_INT 3
49632: PPUSH
49633: CALL_OW 259
49637: PUSH
49638: LD_VAR 0 2
49642: PUSH
49643: LD_VAR 0 3
49647: ARRAY
49648: PPUSH
49649: CALL_OW 432
49653: MINUS
49654: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49655: LD_VAR 0 4
49659: PUSH
49660: LD_VAR 0 5
49664: PPUSH
49665: LD_INT 3
49667: PPUSH
49668: CALL_OW 259
49672: PUSH
49673: LD_VAR 0 5
49677: PPUSH
49678: CALL_OW 432
49682: MINUS
49683: GREATEREQUAL
49684: IFFALSE 49702
// mech := result [ i ] ;
49686: LD_ADDR_VAR 0 5
49690: PUSH
49691: LD_VAR 0 2
49695: PUSH
49696: LD_VAR 0 3
49700: ARRAY
49701: ST_TO_ADDR
// end ;
49702: GO 49611
49704: POP
49705: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49706: LD_VAR 0 1
49710: PPUSH
49711: LD_VAR 0 5
49715: PPUSH
49716: CALL_OW 135
// end ;
49720: LD_VAR 0 2
49724: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49725: LD_INT 0
49727: PPUSH
49728: PPUSH
49729: PPUSH
49730: PPUSH
49731: PPUSH
49732: PPUSH
49733: PPUSH
49734: PPUSH
49735: PPUSH
49736: PPUSH
49737: PPUSH
49738: PPUSH
49739: PPUSH
// result := [ ] ;
49740: LD_ADDR_VAR 0 7
49744: PUSH
49745: EMPTY
49746: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49747: LD_VAR 0 1
49751: PPUSH
49752: CALL_OW 266
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: IN
49767: NOT
49768: IFFALSE 49772
// exit ;
49770: GO 51406
// if name then
49772: LD_VAR 0 3
49776: IFFALSE 49792
// SetBName ( base_dep , name ) ;
49778: LD_VAR 0 1
49782: PPUSH
49783: LD_VAR 0 3
49787: PPUSH
49788: CALL_OW 500
// base := GetBase ( base_dep ) ;
49792: LD_ADDR_VAR 0 15
49796: PUSH
49797: LD_VAR 0 1
49801: PPUSH
49802: CALL_OW 274
49806: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49807: LD_ADDR_VAR 0 16
49811: PUSH
49812: LD_VAR 0 1
49816: PPUSH
49817: CALL_OW 255
49821: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49822: LD_ADDR_VAR 0 17
49826: PUSH
49827: LD_VAR 0 1
49831: PPUSH
49832: CALL_OW 248
49836: ST_TO_ADDR
// if sources then
49837: LD_VAR 0 5
49841: IFFALSE 49888
// for i = 1 to 3 do
49843: LD_ADDR_VAR 0 8
49847: PUSH
49848: DOUBLE
49849: LD_INT 1
49851: DEC
49852: ST_TO_ADDR
49853: LD_INT 3
49855: PUSH
49856: FOR_TO
49857: IFFALSE 49886
// AddResourceType ( base , i , sources [ i ] ) ;
49859: LD_VAR 0 15
49863: PPUSH
49864: LD_VAR 0 8
49868: PPUSH
49869: LD_VAR 0 5
49873: PUSH
49874: LD_VAR 0 8
49878: ARRAY
49879: PPUSH
49880: CALL_OW 276
49884: GO 49856
49886: POP
49887: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49888: LD_ADDR_VAR 0 18
49892: PUSH
49893: LD_VAR 0 15
49897: PPUSH
49898: LD_VAR 0 2
49902: PPUSH
49903: LD_INT 1
49905: PPUSH
49906: CALL 49149 0 3
49910: ST_TO_ADDR
// InitHc ;
49911: CALL_OW 19
// InitUc ;
49915: CALL_OW 18
// uc_side := side ;
49919: LD_ADDR_OWVAR 20
49923: PUSH
49924: LD_VAR 0 16
49928: ST_TO_ADDR
// uc_nation := nation ;
49929: LD_ADDR_OWVAR 21
49933: PUSH
49934: LD_VAR 0 17
49938: ST_TO_ADDR
// if buildings then
49939: LD_VAR 0 18
49943: IFFALSE 51265
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49945: LD_ADDR_VAR 0 19
49949: PUSH
49950: LD_VAR 0 18
49954: PPUSH
49955: LD_INT 2
49957: PUSH
49958: LD_INT 30
49960: PUSH
49961: LD_INT 29
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 30
49970: PUSH
49971: LD_INT 30
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: LIST
49982: PPUSH
49983: CALL_OW 72
49987: ST_TO_ADDR
// if tmp then
49988: LD_VAR 0 19
49992: IFFALSE 50040
// for i in tmp do
49994: LD_ADDR_VAR 0 8
49998: PUSH
49999: LD_VAR 0 19
50003: PUSH
50004: FOR_IN
50005: IFFALSE 50038
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50007: LD_VAR 0 8
50011: PPUSH
50012: CALL_OW 250
50016: PPUSH
50017: LD_VAR 0 8
50021: PPUSH
50022: CALL_OW 251
50026: PPUSH
50027: LD_VAR 0 16
50031: PPUSH
50032: CALL_OW 441
50036: GO 50004
50038: POP
50039: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50040: LD_VAR 0 18
50044: PPUSH
50045: LD_INT 2
50047: PUSH
50048: LD_INT 30
50050: PUSH
50051: LD_INT 32
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 30
50060: PUSH
50061: LD_INT 33
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: LIST
50072: PPUSH
50073: CALL_OW 72
50077: IFFALSE 50165
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50079: LD_ADDR_VAR 0 8
50083: PUSH
50084: LD_VAR 0 18
50088: PPUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 30
50094: PUSH
50095: LD_INT 32
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 30
50104: PUSH
50105: LD_INT 33
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: LIST
50116: PPUSH
50117: CALL_OW 72
50121: PUSH
50122: FOR_IN
50123: IFFALSE 50163
// begin if not GetBWeapon ( i ) then
50125: LD_VAR 0 8
50129: PPUSH
50130: CALL_OW 269
50134: NOT
50135: IFFALSE 50161
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50137: LD_VAR 0 8
50141: PPUSH
50142: LD_VAR 0 8
50146: PPUSH
50147: LD_VAR 0 2
50151: PPUSH
50152: CALL 51411 0 2
50156: PPUSH
50157: CALL_OW 431
// end ;
50161: GO 50122
50163: POP
50164: POP
// end ; for i = 1 to personel do
50165: LD_ADDR_VAR 0 8
50169: PUSH
50170: DOUBLE
50171: LD_INT 1
50173: DEC
50174: ST_TO_ADDR
50175: LD_VAR 0 6
50179: PUSH
50180: FOR_TO
50181: IFFALSE 51245
// begin if i > 4 then
50183: LD_VAR 0 8
50187: PUSH
50188: LD_INT 4
50190: GREATER
50191: IFFALSE 50195
// break ;
50193: GO 51245
// case i of 1 :
50195: LD_VAR 0 8
50199: PUSH
50200: LD_INT 1
50202: DOUBLE
50203: EQUAL
50204: IFTRUE 50208
50206: GO 50288
50208: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50209: LD_ADDR_VAR 0 12
50213: PUSH
50214: LD_VAR 0 18
50218: PPUSH
50219: LD_INT 22
50221: PUSH
50222: LD_VAR 0 16
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 58
50233: PUSH
50234: EMPTY
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: LD_INT 30
50242: PUSH
50243: LD_INT 32
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 30
50252: PUSH
50253: LD_INT 4
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 30
50262: PUSH
50263: LD_INT 5
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: LIST
50280: PPUSH
50281: CALL_OW 72
50285: ST_TO_ADDR
50286: GO 50510
50288: LD_INT 2
50290: DOUBLE
50291: EQUAL
50292: IFTRUE 50296
50294: GO 50358
50296: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50297: LD_ADDR_VAR 0 12
50301: PUSH
50302: LD_VAR 0 18
50306: PPUSH
50307: LD_INT 22
50309: PUSH
50310: LD_VAR 0 16
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: LD_INT 30
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 30
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: LIST
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PPUSH
50351: CALL_OW 72
50355: ST_TO_ADDR
50356: GO 50510
50358: LD_INT 3
50360: DOUBLE
50361: EQUAL
50362: IFTRUE 50366
50364: GO 50428
50366: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50367: LD_ADDR_VAR 0 12
50371: PUSH
50372: LD_VAR 0 18
50376: PPUSH
50377: LD_INT 22
50379: PUSH
50380: LD_VAR 0 16
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: LD_INT 30
50394: PUSH
50395: LD_INT 2
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 30
50404: PUSH
50405: LD_INT 3
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: LIST
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PPUSH
50421: CALL_OW 72
50425: ST_TO_ADDR
50426: GO 50510
50428: LD_INT 4
50430: DOUBLE
50431: EQUAL
50432: IFTRUE 50436
50434: GO 50509
50436: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50437: LD_ADDR_VAR 0 12
50441: PUSH
50442: LD_VAR 0 18
50446: PPUSH
50447: LD_INT 22
50449: PUSH
50450: LD_VAR 0 16
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: LD_INT 30
50464: PUSH
50465: LD_INT 6
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 30
50474: PUSH
50475: LD_INT 7
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 30
50484: PUSH
50485: LD_INT 8
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PPUSH
50502: CALL_OW 72
50506: ST_TO_ADDR
50507: GO 50510
50509: POP
// if i = 1 then
50510: LD_VAR 0 8
50514: PUSH
50515: LD_INT 1
50517: EQUAL
50518: IFFALSE 50629
// begin tmp := [ ] ;
50520: LD_ADDR_VAR 0 19
50524: PUSH
50525: EMPTY
50526: ST_TO_ADDR
// for j in f do
50527: LD_ADDR_VAR 0 9
50531: PUSH
50532: LD_VAR 0 12
50536: PUSH
50537: FOR_IN
50538: IFFALSE 50611
// if GetBType ( j ) = b_bunker then
50540: LD_VAR 0 9
50544: PPUSH
50545: CALL_OW 266
50549: PUSH
50550: LD_INT 32
50552: EQUAL
50553: IFFALSE 50580
// tmp := Insert ( tmp , 1 , j ) else
50555: LD_ADDR_VAR 0 19
50559: PUSH
50560: LD_VAR 0 19
50564: PPUSH
50565: LD_INT 1
50567: PPUSH
50568: LD_VAR 0 9
50572: PPUSH
50573: CALL_OW 2
50577: ST_TO_ADDR
50578: GO 50609
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50580: LD_ADDR_VAR 0 19
50584: PUSH
50585: LD_VAR 0 19
50589: PPUSH
50590: LD_VAR 0 19
50594: PUSH
50595: LD_INT 1
50597: PLUS
50598: PPUSH
50599: LD_VAR 0 9
50603: PPUSH
50604: CALL_OW 2
50608: ST_TO_ADDR
50609: GO 50537
50611: POP
50612: POP
// if tmp then
50613: LD_VAR 0 19
50617: IFFALSE 50629
// f := tmp ;
50619: LD_ADDR_VAR 0 12
50623: PUSH
50624: LD_VAR 0 19
50628: ST_TO_ADDR
// end ; x := personel [ i ] ;
50629: LD_ADDR_VAR 0 13
50633: PUSH
50634: LD_VAR 0 6
50638: PUSH
50639: LD_VAR 0 8
50643: ARRAY
50644: ST_TO_ADDR
// if x = - 1 then
50645: LD_VAR 0 13
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: EQUAL
50654: IFFALSE 50863
// begin for j in f do
50656: LD_ADDR_VAR 0 9
50660: PUSH
50661: LD_VAR 0 12
50665: PUSH
50666: FOR_IN
50667: IFFALSE 50859
// repeat InitHc ;
50669: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50673: LD_VAR 0 9
50677: PPUSH
50678: CALL_OW 266
50682: PUSH
50683: LD_INT 5
50685: EQUAL
50686: IFFALSE 50756
// begin if UnitsInside ( j ) < 3 then
50688: LD_VAR 0 9
50692: PPUSH
50693: CALL_OW 313
50697: PUSH
50698: LD_INT 3
50700: LESS
50701: IFFALSE 50737
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50703: LD_INT 0
50705: PPUSH
50706: LD_INT 5
50708: PUSH
50709: LD_INT 8
50711: PUSH
50712: LD_INT 9
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: PUSH
50720: LD_VAR 0 17
50724: ARRAY
50725: PPUSH
50726: LD_VAR 0 4
50730: PPUSH
50731: CALL_OW 380
50735: GO 50754
// PrepareHuman ( false , i , skill ) ;
50737: LD_INT 0
50739: PPUSH
50740: LD_VAR 0 8
50744: PPUSH
50745: LD_VAR 0 4
50749: PPUSH
50750: CALL_OW 380
// end else
50754: GO 50773
// PrepareHuman ( false , i , skill ) ;
50756: LD_INT 0
50758: PPUSH
50759: LD_VAR 0 8
50763: PPUSH
50764: LD_VAR 0 4
50768: PPUSH
50769: CALL_OW 380
// un := CreateHuman ;
50773: LD_ADDR_VAR 0 14
50777: PUSH
50778: CALL_OW 44
50782: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50783: LD_ADDR_VAR 0 7
50787: PUSH
50788: LD_VAR 0 7
50792: PPUSH
50793: LD_INT 1
50795: PPUSH
50796: LD_VAR 0 14
50800: PPUSH
50801: CALL_OW 2
50805: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50806: LD_VAR 0 14
50810: PPUSH
50811: LD_VAR 0 9
50815: PPUSH
50816: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50820: LD_VAR 0 9
50824: PPUSH
50825: CALL_OW 313
50829: PUSH
50830: LD_INT 6
50832: EQUAL
50833: PUSH
50834: LD_VAR 0 9
50838: PPUSH
50839: CALL_OW 266
50843: PUSH
50844: LD_INT 32
50846: PUSH
50847: LD_INT 31
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: IN
50854: OR
50855: IFFALSE 50669
50857: GO 50666
50859: POP
50860: POP
// end else
50861: GO 51243
// for j = 1 to x do
50863: LD_ADDR_VAR 0 9
50867: PUSH
50868: DOUBLE
50869: LD_INT 1
50871: DEC
50872: ST_TO_ADDR
50873: LD_VAR 0 13
50877: PUSH
50878: FOR_TO
50879: IFFALSE 51241
// begin InitHc ;
50881: CALL_OW 19
// if not f then
50885: LD_VAR 0 12
50889: NOT
50890: IFFALSE 50979
// begin PrepareHuman ( false , i , skill ) ;
50892: LD_INT 0
50894: PPUSH
50895: LD_VAR 0 8
50899: PPUSH
50900: LD_VAR 0 4
50904: PPUSH
50905: CALL_OW 380
// un := CreateHuman ;
50909: LD_ADDR_VAR 0 14
50913: PUSH
50914: CALL_OW 44
50918: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50919: LD_ADDR_VAR 0 7
50923: PUSH
50924: LD_VAR 0 7
50928: PPUSH
50929: LD_INT 1
50931: PPUSH
50932: LD_VAR 0 14
50936: PPUSH
50937: CALL_OW 2
50941: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50942: LD_VAR 0 14
50946: PPUSH
50947: LD_VAR 0 1
50951: PPUSH
50952: CALL_OW 250
50956: PPUSH
50957: LD_VAR 0 1
50961: PPUSH
50962: CALL_OW 251
50966: PPUSH
50967: LD_INT 10
50969: PPUSH
50970: LD_INT 0
50972: PPUSH
50973: CALL_OW 50
// continue ;
50977: GO 50878
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50979: LD_VAR 0 12
50983: PUSH
50984: LD_INT 1
50986: ARRAY
50987: PPUSH
50988: CALL_OW 313
50992: PUSH
50993: LD_VAR 0 12
50997: PUSH
50998: LD_INT 1
51000: ARRAY
51001: PPUSH
51002: CALL_OW 266
51006: PUSH
51007: LD_INT 32
51009: PUSH
51010: LD_INT 31
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: IN
51017: AND
51018: PUSH
51019: LD_VAR 0 12
51023: PUSH
51024: LD_INT 1
51026: ARRAY
51027: PPUSH
51028: CALL_OW 313
51032: PUSH
51033: LD_INT 6
51035: EQUAL
51036: OR
51037: IFFALSE 51057
// f := Delete ( f , 1 ) ;
51039: LD_ADDR_VAR 0 12
51043: PUSH
51044: LD_VAR 0 12
51048: PPUSH
51049: LD_INT 1
51051: PPUSH
51052: CALL_OW 3
51056: ST_TO_ADDR
// if not f then
51057: LD_VAR 0 12
51061: NOT
51062: IFFALSE 51080
// begin x := x + 2 ;
51064: LD_ADDR_VAR 0 13
51068: PUSH
51069: LD_VAR 0 13
51073: PUSH
51074: LD_INT 2
51076: PLUS
51077: ST_TO_ADDR
// continue ;
51078: GO 50878
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51080: LD_VAR 0 12
51084: PUSH
51085: LD_INT 1
51087: ARRAY
51088: PPUSH
51089: CALL_OW 266
51093: PUSH
51094: LD_INT 5
51096: EQUAL
51097: IFFALSE 51171
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51099: LD_VAR 0 12
51103: PUSH
51104: LD_INT 1
51106: ARRAY
51107: PPUSH
51108: CALL_OW 313
51112: PUSH
51113: LD_INT 3
51115: LESS
51116: IFFALSE 51152
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51118: LD_INT 0
51120: PPUSH
51121: LD_INT 5
51123: PUSH
51124: LD_INT 8
51126: PUSH
51127: LD_INT 9
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: LIST
51134: PUSH
51135: LD_VAR 0 17
51139: ARRAY
51140: PPUSH
51141: LD_VAR 0 4
51145: PPUSH
51146: CALL_OW 380
51150: GO 51169
// PrepareHuman ( false , i , skill ) ;
51152: LD_INT 0
51154: PPUSH
51155: LD_VAR 0 8
51159: PPUSH
51160: LD_VAR 0 4
51164: PPUSH
51165: CALL_OW 380
// end else
51169: GO 51188
// PrepareHuman ( false , i , skill ) ;
51171: LD_INT 0
51173: PPUSH
51174: LD_VAR 0 8
51178: PPUSH
51179: LD_VAR 0 4
51183: PPUSH
51184: CALL_OW 380
// un := CreateHuman ;
51188: LD_ADDR_VAR 0 14
51192: PUSH
51193: CALL_OW 44
51197: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51198: LD_ADDR_VAR 0 7
51202: PUSH
51203: LD_VAR 0 7
51207: PPUSH
51208: LD_INT 1
51210: PPUSH
51211: LD_VAR 0 14
51215: PPUSH
51216: CALL_OW 2
51220: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51221: LD_VAR 0 14
51225: PPUSH
51226: LD_VAR 0 12
51230: PUSH
51231: LD_INT 1
51233: ARRAY
51234: PPUSH
51235: CALL_OW 52
// end ;
51239: GO 50878
51241: POP
51242: POP
// end ;
51243: GO 50180
51245: POP
51246: POP
// result := result ^ buildings ;
51247: LD_ADDR_VAR 0 7
51251: PUSH
51252: LD_VAR 0 7
51256: PUSH
51257: LD_VAR 0 18
51261: ADD
51262: ST_TO_ADDR
// end else
51263: GO 51406
// begin for i = 1 to personel do
51265: LD_ADDR_VAR 0 8
51269: PUSH
51270: DOUBLE
51271: LD_INT 1
51273: DEC
51274: ST_TO_ADDR
51275: LD_VAR 0 6
51279: PUSH
51280: FOR_TO
51281: IFFALSE 51404
// begin if i > 4 then
51283: LD_VAR 0 8
51287: PUSH
51288: LD_INT 4
51290: GREATER
51291: IFFALSE 51295
// break ;
51293: GO 51404
// x := personel [ i ] ;
51295: LD_ADDR_VAR 0 13
51299: PUSH
51300: LD_VAR 0 6
51304: PUSH
51305: LD_VAR 0 8
51309: ARRAY
51310: ST_TO_ADDR
// if x = - 1 then
51311: LD_VAR 0 13
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: EQUAL
51320: IFFALSE 51324
// continue ;
51322: GO 51280
// PrepareHuman ( false , i , skill ) ;
51324: LD_INT 0
51326: PPUSH
51327: LD_VAR 0 8
51331: PPUSH
51332: LD_VAR 0 4
51336: PPUSH
51337: CALL_OW 380
// un := CreateHuman ;
51341: LD_ADDR_VAR 0 14
51345: PUSH
51346: CALL_OW 44
51350: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51351: LD_VAR 0 14
51355: PPUSH
51356: LD_VAR 0 1
51360: PPUSH
51361: CALL_OW 250
51365: PPUSH
51366: LD_VAR 0 1
51370: PPUSH
51371: CALL_OW 251
51375: PPUSH
51376: LD_INT 10
51378: PPUSH
51379: LD_INT 0
51381: PPUSH
51382: CALL_OW 50
// result := result ^ un ;
51386: LD_ADDR_VAR 0 7
51390: PUSH
51391: LD_VAR 0 7
51395: PUSH
51396: LD_VAR 0 14
51400: ADD
51401: ST_TO_ADDR
// end ;
51402: GO 51280
51404: POP
51405: POP
// end ; end ;
51406: LD_VAR 0 7
51410: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51411: LD_INT 0
51413: PPUSH
51414: PPUSH
51415: PPUSH
51416: PPUSH
51417: PPUSH
51418: PPUSH
51419: PPUSH
51420: PPUSH
51421: PPUSH
51422: PPUSH
51423: PPUSH
51424: PPUSH
51425: PPUSH
51426: PPUSH
51427: PPUSH
51428: PPUSH
// result := false ;
51429: LD_ADDR_VAR 0 3
51433: PUSH
51434: LD_INT 0
51436: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51437: LD_VAR 0 1
51441: NOT
51442: PUSH
51443: LD_VAR 0 1
51447: PPUSH
51448: CALL_OW 266
51452: PUSH
51453: LD_INT 32
51455: PUSH
51456: LD_INT 33
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: IN
51463: NOT
51464: OR
51465: IFFALSE 51469
// exit ;
51467: GO 52578
// nat := GetNation ( tower ) ;
51469: LD_ADDR_VAR 0 12
51473: PUSH
51474: LD_VAR 0 1
51478: PPUSH
51479: CALL_OW 248
51483: ST_TO_ADDR
// side := GetSide ( tower ) ;
51484: LD_ADDR_VAR 0 16
51488: PUSH
51489: LD_VAR 0 1
51493: PPUSH
51494: CALL_OW 255
51498: ST_TO_ADDR
// x := GetX ( tower ) ;
51499: LD_ADDR_VAR 0 10
51503: PUSH
51504: LD_VAR 0 1
51508: PPUSH
51509: CALL_OW 250
51513: ST_TO_ADDR
// y := GetY ( tower ) ;
51514: LD_ADDR_VAR 0 11
51518: PUSH
51519: LD_VAR 0 1
51523: PPUSH
51524: CALL_OW 251
51528: ST_TO_ADDR
// if not x or not y then
51529: LD_VAR 0 10
51533: NOT
51534: PUSH
51535: LD_VAR 0 11
51539: NOT
51540: OR
51541: IFFALSE 51545
// exit ;
51543: GO 52578
// weapon := 0 ;
51545: LD_ADDR_VAR 0 18
51549: PUSH
51550: LD_INT 0
51552: ST_TO_ADDR
// fac_list := [ ] ;
51553: LD_ADDR_VAR 0 17
51557: PUSH
51558: EMPTY
51559: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51560: LD_ADDR_VAR 0 6
51564: PUSH
51565: LD_VAR 0 1
51569: PPUSH
51570: CALL_OW 274
51574: PPUSH
51575: LD_VAR 0 2
51579: PPUSH
51580: LD_INT 0
51582: PPUSH
51583: CALL 49149 0 3
51587: PPUSH
51588: LD_INT 30
51590: PUSH
51591: LD_INT 3
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PPUSH
51598: CALL_OW 72
51602: ST_TO_ADDR
// if not factories then
51603: LD_VAR 0 6
51607: NOT
51608: IFFALSE 51612
// exit ;
51610: GO 52578
// for i in factories do
51612: LD_ADDR_VAR 0 8
51616: PUSH
51617: LD_VAR 0 6
51621: PUSH
51622: FOR_IN
51623: IFFALSE 51648
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51625: LD_ADDR_VAR 0 17
51629: PUSH
51630: LD_VAR 0 17
51634: PUSH
51635: LD_VAR 0 8
51639: PPUSH
51640: CALL_OW 478
51644: UNION
51645: ST_TO_ADDR
51646: GO 51622
51648: POP
51649: POP
// if not fac_list then
51650: LD_VAR 0 17
51654: NOT
51655: IFFALSE 51659
// exit ;
51657: GO 52578
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51659: LD_ADDR_VAR 0 5
51663: PUSH
51664: LD_INT 4
51666: PUSH
51667: LD_INT 5
51669: PUSH
51670: LD_INT 9
51672: PUSH
51673: LD_INT 10
51675: PUSH
51676: LD_INT 6
51678: PUSH
51679: LD_INT 7
51681: PUSH
51682: LD_INT 11
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 27
51696: PUSH
51697: LD_INT 28
51699: PUSH
51700: LD_INT 26
51702: PUSH
51703: LD_INT 30
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 43
51714: PUSH
51715: LD_INT 44
51717: PUSH
51718: LD_INT 46
51720: PUSH
51721: LD_INT 45
51723: PUSH
51724: LD_INT 47
51726: PUSH
51727: LD_INT 49
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: LIST
51742: PUSH
51743: LD_VAR 0 12
51747: ARRAY
51748: ST_TO_ADDR
// list := list isect fac_list ;
51749: LD_ADDR_VAR 0 5
51753: PUSH
51754: LD_VAR 0 5
51758: PUSH
51759: LD_VAR 0 17
51763: ISECT
51764: ST_TO_ADDR
// if not list then
51765: LD_VAR 0 5
51769: NOT
51770: IFFALSE 51774
// exit ;
51772: GO 52578
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51774: LD_VAR 0 12
51778: PUSH
51779: LD_INT 3
51781: EQUAL
51782: PUSH
51783: LD_INT 49
51785: PUSH
51786: LD_VAR 0 5
51790: IN
51791: AND
51792: PUSH
51793: LD_INT 31
51795: PPUSH
51796: LD_VAR 0 16
51800: PPUSH
51801: CALL_OW 321
51805: PUSH
51806: LD_INT 2
51808: EQUAL
51809: AND
51810: IFFALSE 51870
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51812: LD_INT 22
51814: PUSH
51815: LD_VAR 0 16
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 35
51826: PUSH
51827: LD_INT 49
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 91
51836: PUSH
51837: LD_VAR 0 1
51841: PUSH
51842: LD_INT 10
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: LIST
51854: PPUSH
51855: CALL_OW 69
51859: NOT
51860: IFFALSE 51870
// weapon := ru_time_lapser ;
51862: LD_ADDR_VAR 0 18
51866: PUSH
51867: LD_INT 49
51869: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51870: LD_VAR 0 12
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: IN
51885: PUSH
51886: LD_INT 11
51888: PUSH
51889: LD_VAR 0 5
51893: IN
51894: PUSH
51895: LD_INT 30
51897: PUSH
51898: LD_VAR 0 5
51902: IN
51903: OR
51904: AND
51905: PUSH
51906: LD_INT 6
51908: PPUSH
51909: LD_VAR 0 16
51913: PPUSH
51914: CALL_OW 321
51918: PUSH
51919: LD_INT 2
51921: EQUAL
51922: AND
51923: IFFALSE 52088
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51925: LD_INT 22
51927: PUSH
51928: LD_VAR 0 16
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: LD_INT 35
51942: PUSH
51943: LD_INT 11
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 35
51952: PUSH
51953: LD_INT 30
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 91
51967: PUSH
51968: LD_VAR 0 1
51972: PUSH
51973: LD_INT 18
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: LIST
51985: PPUSH
51986: CALL_OW 69
51990: NOT
51991: PUSH
51992: LD_INT 22
51994: PUSH
51995: LD_VAR 0 16
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: LD_INT 30
52009: PUSH
52010: LD_INT 32
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 30
52019: PUSH
52020: LD_INT 33
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 91
52034: PUSH
52035: LD_VAR 0 1
52039: PUSH
52040: LD_INT 12
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: PUSH
52053: EMPTY
52054: LIST
52055: PPUSH
52056: CALL_OW 69
52060: PUSH
52061: LD_INT 2
52063: GREATER
52064: AND
52065: IFFALSE 52088
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52067: LD_ADDR_VAR 0 18
52071: PUSH
52072: LD_INT 11
52074: PUSH
52075: LD_INT 30
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_VAR 0 12
52086: ARRAY
52087: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52088: LD_VAR 0 18
52092: NOT
52093: PUSH
52094: LD_INT 40
52096: PPUSH
52097: LD_VAR 0 16
52101: PPUSH
52102: CALL_OW 321
52106: PUSH
52107: LD_INT 2
52109: EQUAL
52110: AND
52111: PUSH
52112: LD_INT 7
52114: PUSH
52115: LD_VAR 0 5
52119: IN
52120: PUSH
52121: LD_INT 28
52123: PUSH
52124: LD_VAR 0 5
52128: IN
52129: OR
52130: PUSH
52131: LD_INT 45
52133: PUSH
52134: LD_VAR 0 5
52138: IN
52139: OR
52140: AND
52141: IFFALSE 52395
// begin hex := GetHexInfo ( x , y ) ;
52143: LD_ADDR_VAR 0 4
52147: PUSH
52148: LD_VAR 0 10
52152: PPUSH
52153: LD_VAR 0 11
52157: PPUSH
52158: CALL_OW 546
52162: ST_TO_ADDR
// if hex [ 1 ] then
52163: LD_VAR 0 4
52167: PUSH
52168: LD_INT 1
52170: ARRAY
52171: IFFALSE 52175
// exit ;
52173: GO 52578
// height := hex [ 2 ] ;
52175: LD_ADDR_VAR 0 15
52179: PUSH
52180: LD_VAR 0 4
52184: PUSH
52185: LD_INT 2
52187: ARRAY
52188: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52189: LD_ADDR_VAR 0 14
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: LD_INT 3
52202: PUSH
52203: LD_INT 5
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: ST_TO_ADDR
// for i in tmp do
52212: LD_ADDR_VAR 0 8
52216: PUSH
52217: LD_VAR 0 14
52221: PUSH
52222: FOR_IN
52223: IFFALSE 52393
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52225: LD_ADDR_VAR 0 9
52229: PUSH
52230: LD_VAR 0 10
52234: PPUSH
52235: LD_VAR 0 8
52239: PPUSH
52240: LD_INT 5
52242: PPUSH
52243: CALL_OW 272
52247: PUSH
52248: LD_VAR 0 11
52252: PPUSH
52253: LD_VAR 0 8
52257: PPUSH
52258: LD_INT 5
52260: PPUSH
52261: CALL_OW 273
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52270: LD_VAR 0 9
52274: PUSH
52275: LD_INT 1
52277: ARRAY
52278: PPUSH
52279: LD_VAR 0 9
52283: PUSH
52284: LD_INT 2
52286: ARRAY
52287: PPUSH
52288: CALL_OW 488
52292: IFFALSE 52391
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52294: LD_ADDR_VAR 0 4
52298: PUSH
52299: LD_VAR 0 9
52303: PUSH
52304: LD_INT 1
52306: ARRAY
52307: PPUSH
52308: LD_VAR 0 9
52312: PUSH
52313: LD_INT 2
52315: ARRAY
52316: PPUSH
52317: CALL_OW 546
52321: ST_TO_ADDR
// if hex [ 1 ] then
52322: LD_VAR 0 4
52326: PUSH
52327: LD_INT 1
52329: ARRAY
52330: IFFALSE 52334
// continue ;
52332: GO 52222
// h := hex [ 2 ] ;
52334: LD_ADDR_VAR 0 13
52338: PUSH
52339: LD_VAR 0 4
52343: PUSH
52344: LD_INT 2
52346: ARRAY
52347: ST_TO_ADDR
// if h + 7 < height then
52348: LD_VAR 0 13
52352: PUSH
52353: LD_INT 7
52355: PLUS
52356: PUSH
52357: LD_VAR 0 15
52361: LESS
52362: IFFALSE 52391
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52364: LD_ADDR_VAR 0 18
52368: PUSH
52369: LD_INT 7
52371: PUSH
52372: LD_INT 28
52374: PUSH
52375: LD_INT 45
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: LIST
52382: PUSH
52383: LD_VAR 0 12
52387: ARRAY
52388: ST_TO_ADDR
// break ;
52389: GO 52393
// end ; end ; end ;
52391: GO 52222
52393: POP
52394: POP
// end ; if not weapon then
52395: LD_VAR 0 18
52399: NOT
52400: IFFALSE 52460
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52402: LD_ADDR_VAR 0 5
52406: PUSH
52407: LD_VAR 0 5
52411: PUSH
52412: LD_INT 11
52414: PUSH
52415: LD_INT 30
52417: PUSH
52418: LD_INT 49
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: DIFF
52426: ST_TO_ADDR
// if not list then
52427: LD_VAR 0 5
52431: NOT
52432: IFFALSE 52436
// exit ;
52434: GO 52578
// weapon := list [ rand ( 1 , list ) ] ;
52436: LD_ADDR_VAR 0 18
52440: PUSH
52441: LD_VAR 0 5
52445: PUSH
52446: LD_INT 1
52448: PPUSH
52449: LD_VAR 0 5
52453: PPUSH
52454: CALL_OW 12
52458: ARRAY
52459: ST_TO_ADDR
// end ; if weapon then
52460: LD_VAR 0 18
52464: IFFALSE 52578
// begin tmp := CostOfWeapon ( weapon ) ;
52466: LD_ADDR_VAR 0 14
52470: PUSH
52471: LD_VAR 0 18
52475: PPUSH
52476: CALL_OW 451
52480: ST_TO_ADDR
// j := GetBase ( tower ) ;
52481: LD_ADDR_VAR 0 9
52485: PUSH
52486: LD_VAR 0 1
52490: PPUSH
52491: CALL_OW 274
52495: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52496: LD_VAR 0 9
52500: PPUSH
52501: LD_INT 1
52503: PPUSH
52504: CALL_OW 275
52508: PUSH
52509: LD_VAR 0 14
52513: PUSH
52514: LD_INT 1
52516: ARRAY
52517: GREATEREQUAL
52518: PUSH
52519: LD_VAR 0 9
52523: PPUSH
52524: LD_INT 2
52526: PPUSH
52527: CALL_OW 275
52531: PUSH
52532: LD_VAR 0 14
52536: PUSH
52537: LD_INT 2
52539: ARRAY
52540: GREATEREQUAL
52541: AND
52542: PUSH
52543: LD_VAR 0 9
52547: PPUSH
52548: LD_INT 3
52550: PPUSH
52551: CALL_OW 275
52555: PUSH
52556: LD_VAR 0 14
52560: PUSH
52561: LD_INT 3
52563: ARRAY
52564: GREATEREQUAL
52565: AND
52566: IFFALSE 52578
// result := weapon ;
52568: LD_ADDR_VAR 0 3
52572: PUSH
52573: LD_VAR 0 18
52577: ST_TO_ADDR
// end ; end ;
52578: LD_VAR 0 3
52582: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52583: LD_INT 0
52585: PPUSH
52586: PPUSH
// result := true ;
52587: LD_ADDR_VAR 0 3
52591: PUSH
52592: LD_INT 1
52594: ST_TO_ADDR
// if array1 = array2 then
52595: LD_VAR 0 1
52599: PUSH
52600: LD_VAR 0 2
52604: EQUAL
52605: IFFALSE 52665
// begin for i = 1 to array1 do
52607: LD_ADDR_VAR 0 4
52611: PUSH
52612: DOUBLE
52613: LD_INT 1
52615: DEC
52616: ST_TO_ADDR
52617: LD_VAR 0 1
52621: PUSH
52622: FOR_TO
52623: IFFALSE 52661
// if array1 [ i ] <> array2 [ i ] then
52625: LD_VAR 0 1
52629: PUSH
52630: LD_VAR 0 4
52634: ARRAY
52635: PUSH
52636: LD_VAR 0 2
52640: PUSH
52641: LD_VAR 0 4
52645: ARRAY
52646: NONEQUAL
52647: IFFALSE 52659
// begin result := false ;
52649: LD_ADDR_VAR 0 3
52653: PUSH
52654: LD_INT 0
52656: ST_TO_ADDR
// break ;
52657: GO 52661
// end ;
52659: GO 52622
52661: POP
52662: POP
// end else
52663: GO 52673
// result := false ;
52665: LD_ADDR_VAR 0 3
52669: PUSH
52670: LD_INT 0
52672: ST_TO_ADDR
// end ;
52673: LD_VAR 0 3
52677: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52678: LD_INT 0
52680: PPUSH
52681: PPUSH
// if not array1 or not array2 then
52682: LD_VAR 0 1
52686: NOT
52687: PUSH
52688: LD_VAR 0 2
52692: NOT
52693: OR
52694: IFFALSE 52698
// exit ;
52696: GO 52762
// result := true ;
52698: LD_ADDR_VAR 0 3
52702: PUSH
52703: LD_INT 1
52705: ST_TO_ADDR
// for i = 1 to array1 do
52706: LD_ADDR_VAR 0 4
52710: PUSH
52711: DOUBLE
52712: LD_INT 1
52714: DEC
52715: ST_TO_ADDR
52716: LD_VAR 0 1
52720: PUSH
52721: FOR_TO
52722: IFFALSE 52760
// if array1 [ i ] <> array2 [ i ] then
52724: LD_VAR 0 1
52728: PUSH
52729: LD_VAR 0 4
52733: ARRAY
52734: PUSH
52735: LD_VAR 0 2
52739: PUSH
52740: LD_VAR 0 4
52744: ARRAY
52745: NONEQUAL
52746: IFFALSE 52758
// begin result := false ;
52748: LD_ADDR_VAR 0 3
52752: PUSH
52753: LD_INT 0
52755: ST_TO_ADDR
// break ;
52756: GO 52760
// end ;
52758: GO 52721
52760: POP
52761: POP
// end ;
52762: LD_VAR 0 3
52766: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52767: LD_INT 0
52769: PPUSH
52770: PPUSH
52771: PPUSH
// pom := GetBase ( fac ) ;
52772: LD_ADDR_VAR 0 5
52776: PUSH
52777: LD_VAR 0 1
52781: PPUSH
52782: CALL_OW 274
52786: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52787: LD_ADDR_VAR 0 4
52791: PUSH
52792: LD_VAR 0 2
52796: PUSH
52797: LD_INT 1
52799: ARRAY
52800: PPUSH
52801: LD_VAR 0 2
52805: PUSH
52806: LD_INT 2
52808: ARRAY
52809: PPUSH
52810: LD_VAR 0 2
52814: PUSH
52815: LD_INT 3
52817: ARRAY
52818: PPUSH
52819: LD_VAR 0 2
52823: PUSH
52824: LD_INT 4
52826: ARRAY
52827: PPUSH
52828: CALL_OW 449
52832: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52833: LD_ADDR_VAR 0 3
52837: PUSH
52838: LD_VAR 0 5
52842: PPUSH
52843: LD_INT 1
52845: PPUSH
52846: CALL_OW 275
52850: PUSH
52851: LD_VAR 0 4
52855: PUSH
52856: LD_INT 1
52858: ARRAY
52859: GREATEREQUAL
52860: PUSH
52861: LD_VAR 0 5
52865: PPUSH
52866: LD_INT 2
52868: PPUSH
52869: CALL_OW 275
52873: PUSH
52874: LD_VAR 0 4
52878: PUSH
52879: LD_INT 2
52881: ARRAY
52882: GREATEREQUAL
52883: AND
52884: PUSH
52885: LD_VAR 0 5
52889: PPUSH
52890: LD_INT 3
52892: PPUSH
52893: CALL_OW 275
52897: PUSH
52898: LD_VAR 0 4
52902: PUSH
52903: LD_INT 3
52905: ARRAY
52906: GREATEREQUAL
52907: AND
52908: ST_TO_ADDR
// end ;
52909: LD_VAR 0 3
52913: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52914: LD_INT 0
52916: PPUSH
52917: PPUSH
52918: PPUSH
52919: PPUSH
// pom := GetBase ( building ) ;
52920: LD_ADDR_VAR 0 3
52924: PUSH
52925: LD_VAR 0 1
52929: PPUSH
52930: CALL_OW 274
52934: ST_TO_ADDR
// if not pom then
52935: LD_VAR 0 3
52939: NOT
52940: IFFALSE 52944
// exit ;
52942: GO 53114
// btype := GetBType ( building ) ;
52944: LD_ADDR_VAR 0 5
52948: PUSH
52949: LD_VAR 0 1
52953: PPUSH
52954: CALL_OW 266
52958: ST_TO_ADDR
// if btype = b_armoury then
52959: LD_VAR 0 5
52963: PUSH
52964: LD_INT 4
52966: EQUAL
52967: IFFALSE 52977
// btype := b_barracks ;
52969: LD_ADDR_VAR 0 5
52973: PUSH
52974: LD_INT 5
52976: ST_TO_ADDR
// if btype = b_depot then
52977: LD_VAR 0 5
52981: PUSH
52982: LD_INT 0
52984: EQUAL
52985: IFFALSE 52995
// btype := b_warehouse ;
52987: LD_ADDR_VAR 0 5
52991: PUSH
52992: LD_INT 1
52994: ST_TO_ADDR
// if btype = b_workshop then
52995: LD_VAR 0 5
52999: PUSH
53000: LD_INT 2
53002: EQUAL
53003: IFFALSE 53013
// btype := b_factory ;
53005: LD_ADDR_VAR 0 5
53009: PUSH
53010: LD_INT 3
53012: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53013: LD_ADDR_VAR 0 4
53017: PUSH
53018: LD_VAR 0 5
53022: PPUSH
53023: LD_VAR 0 1
53027: PPUSH
53028: CALL_OW 248
53032: PPUSH
53033: CALL_OW 450
53037: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53038: LD_ADDR_VAR 0 2
53042: PUSH
53043: LD_VAR 0 3
53047: PPUSH
53048: LD_INT 1
53050: PPUSH
53051: CALL_OW 275
53055: PUSH
53056: LD_VAR 0 4
53060: PUSH
53061: LD_INT 1
53063: ARRAY
53064: GREATEREQUAL
53065: PUSH
53066: LD_VAR 0 3
53070: PPUSH
53071: LD_INT 2
53073: PPUSH
53074: CALL_OW 275
53078: PUSH
53079: LD_VAR 0 4
53083: PUSH
53084: LD_INT 2
53086: ARRAY
53087: GREATEREQUAL
53088: AND
53089: PUSH
53090: LD_VAR 0 3
53094: PPUSH
53095: LD_INT 3
53097: PPUSH
53098: CALL_OW 275
53102: PUSH
53103: LD_VAR 0 4
53107: PUSH
53108: LD_INT 3
53110: ARRAY
53111: GREATEREQUAL
53112: AND
53113: ST_TO_ADDR
// end ;
53114: LD_VAR 0 2
53118: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53119: LD_INT 0
53121: PPUSH
53122: PPUSH
53123: PPUSH
// pom := GetBase ( building ) ;
53124: LD_ADDR_VAR 0 4
53128: PUSH
53129: LD_VAR 0 1
53133: PPUSH
53134: CALL_OW 274
53138: ST_TO_ADDR
// if not pom then
53139: LD_VAR 0 4
53143: NOT
53144: IFFALSE 53148
// exit ;
53146: GO 53249
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53148: LD_ADDR_VAR 0 5
53152: PUSH
53153: LD_VAR 0 2
53157: PPUSH
53158: LD_VAR 0 1
53162: PPUSH
53163: CALL_OW 248
53167: PPUSH
53168: CALL_OW 450
53172: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53173: LD_ADDR_VAR 0 3
53177: PUSH
53178: LD_VAR 0 4
53182: PPUSH
53183: LD_INT 1
53185: PPUSH
53186: CALL_OW 275
53190: PUSH
53191: LD_VAR 0 5
53195: PUSH
53196: LD_INT 1
53198: ARRAY
53199: GREATEREQUAL
53200: PUSH
53201: LD_VAR 0 4
53205: PPUSH
53206: LD_INT 2
53208: PPUSH
53209: CALL_OW 275
53213: PUSH
53214: LD_VAR 0 5
53218: PUSH
53219: LD_INT 2
53221: ARRAY
53222: GREATEREQUAL
53223: AND
53224: PUSH
53225: LD_VAR 0 4
53229: PPUSH
53230: LD_INT 3
53232: PPUSH
53233: CALL_OW 275
53237: PUSH
53238: LD_VAR 0 5
53242: PUSH
53243: LD_INT 3
53245: ARRAY
53246: GREATEREQUAL
53247: AND
53248: ST_TO_ADDR
// end ;
53249: LD_VAR 0 3
53253: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53254: LD_INT 0
53256: PPUSH
53257: PPUSH
53258: PPUSH
53259: PPUSH
53260: PPUSH
53261: PPUSH
53262: PPUSH
53263: PPUSH
53264: PPUSH
53265: PPUSH
53266: PPUSH
// result := false ;
53267: LD_ADDR_VAR 0 8
53271: PUSH
53272: LD_INT 0
53274: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53275: LD_VAR 0 5
53279: NOT
53280: PUSH
53281: LD_VAR 0 1
53285: NOT
53286: OR
53287: PUSH
53288: LD_VAR 0 2
53292: NOT
53293: OR
53294: PUSH
53295: LD_VAR 0 3
53299: NOT
53300: OR
53301: IFFALSE 53305
// exit ;
53303: GO 54119
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53305: LD_ADDR_VAR 0 14
53309: PUSH
53310: LD_VAR 0 1
53314: PPUSH
53315: LD_VAR 0 2
53319: PPUSH
53320: LD_VAR 0 3
53324: PPUSH
53325: LD_VAR 0 4
53329: PPUSH
53330: LD_VAR 0 5
53334: PUSH
53335: LD_INT 1
53337: ARRAY
53338: PPUSH
53339: CALL_OW 248
53343: PPUSH
53344: LD_INT 0
53346: PPUSH
53347: CALL 55372 0 6
53351: ST_TO_ADDR
// if not hexes then
53352: LD_VAR 0 14
53356: NOT
53357: IFFALSE 53361
// exit ;
53359: GO 54119
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53361: LD_ADDR_VAR 0 17
53365: PUSH
53366: LD_VAR 0 5
53370: PPUSH
53371: LD_INT 22
53373: PUSH
53374: LD_VAR 0 13
53378: PPUSH
53379: CALL_OW 255
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: LD_INT 30
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 30
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: LIST
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PPUSH
53420: CALL_OW 72
53424: ST_TO_ADDR
// for i = 1 to hexes do
53425: LD_ADDR_VAR 0 9
53429: PUSH
53430: DOUBLE
53431: LD_INT 1
53433: DEC
53434: ST_TO_ADDR
53435: LD_VAR 0 14
53439: PUSH
53440: FOR_TO
53441: IFFALSE 54117
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53443: LD_ADDR_VAR 0 13
53447: PUSH
53448: LD_VAR 0 14
53452: PUSH
53453: LD_VAR 0 9
53457: ARRAY
53458: PUSH
53459: LD_INT 1
53461: ARRAY
53462: PPUSH
53463: LD_VAR 0 14
53467: PUSH
53468: LD_VAR 0 9
53472: ARRAY
53473: PUSH
53474: LD_INT 2
53476: ARRAY
53477: PPUSH
53478: CALL_OW 428
53482: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53483: LD_VAR 0 14
53487: PUSH
53488: LD_VAR 0 9
53492: ARRAY
53493: PUSH
53494: LD_INT 1
53496: ARRAY
53497: PPUSH
53498: LD_VAR 0 14
53502: PUSH
53503: LD_VAR 0 9
53507: ARRAY
53508: PUSH
53509: LD_INT 2
53511: ARRAY
53512: PPUSH
53513: CALL_OW 351
53517: PUSH
53518: LD_VAR 0 14
53522: PUSH
53523: LD_VAR 0 9
53527: ARRAY
53528: PUSH
53529: LD_INT 1
53531: ARRAY
53532: PPUSH
53533: LD_VAR 0 14
53537: PUSH
53538: LD_VAR 0 9
53542: ARRAY
53543: PUSH
53544: LD_INT 2
53546: ARRAY
53547: PPUSH
53548: CALL_OW 488
53552: NOT
53553: OR
53554: PUSH
53555: LD_VAR 0 13
53559: PPUSH
53560: CALL_OW 247
53564: PUSH
53565: LD_INT 3
53567: EQUAL
53568: OR
53569: IFFALSE 53575
// exit ;
53571: POP
53572: POP
53573: GO 54119
// if not tmp then
53575: LD_VAR 0 13
53579: NOT
53580: IFFALSE 53584
// continue ;
53582: GO 53440
// result := true ;
53584: LD_ADDR_VAR 0 8
53588: PUSH
53589: LD_INT 1
53591: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53592: LD_VAR 0 6
53596: PUSH
53597: LD_VAR 0 13
53601: PPUSH
53602: CALL_OW 247
53606: PUSH
53607: LD_INT 2
53609: EQUAL
53610: AND
53611: PUSH
53612: LD_VAR 0 13
53616: PPUSH
53617: CALL_OW 263
53621: PUSH
53622: LD_INT 1
53624: EQUAL
53625: AND
53626: IFFALSE 53790
// begin if IsDrivenBy ( tmp ) then
53628: LD_VAR 0 13
53632: PPUSH
53633: CALL_OW 311
53637: IFFALSE 53641
// continue ;
53639: GO 53440
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53641: LD_VAR 0 6
53645: PPUSH
53646: LD_INT 3
53648: PUSH
53649: LD_INT 60
53651: PUSH
53652: EMPTY
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 3
53661: PUSH
53662: LD_INT 55
53664: PUSH
53665: EMPTY
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PPUSH
53676: CALL_OW 72
53680: IFFALSE 53788
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53682: LD_ADDR_VAR 0 18
53686: PUSH
53687: LD_VAR 0 6
53691: PPUSH
53692: LD_INT 3
53694: PUSH
53695: LD_INT 60
53697: PUSH
53698: EMPTY
53699: LIST
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: LD_INT 55
53710: PUSH
53711: EMPTY
53712: LIST
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PPUSH
53722: CALL_OW 72
53726: PUSH
53727: LD_INT 1
53729: ARRAY
53730: ST_TO_ADDR
// if IsInUnit ( driver ) then
53731: LD_VAR 0 18
53735: PPUSH
53736: CALL_OW 310
53740: IFFALSE 53751
// ComExit ( driver ) ;
53742: LD_VAR 0 18
53746: PPUSH
53747: CALL 79153 0 1
// AddComEnterUnit ( driver , tmp ) ;
53751: LD_VAR 0 18
53755: PPUSH
53756: LD_VAR 0 13
53760: PPUSH
53761: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53765: LD_VAR 0 18
53769: PPUSH
53770: LD_VAR 0 7
53774: PPUSH
53775: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53779: LD_VAR 0 18
53783: PPUSH
53784: CALL_OW 181
// end ; continue ;
53788: GO 53440
// end ; if not cleaners or not tmp in cleaners then
53790: LD_VAR 0 6
53794: NOT
53795: PUSH
53796: LD_VAR 0 13
53800: PUSH
53801: LD_VAR 0 6
53805: IN
53806: NOT
53807: OR
53808: IFFALSE 54115
// begin if dep then
53810: LD_VAR 0 17
53814: IFFALSE 53950
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53816: LD_ADDR_VAR 0 16
53820: PUSH
53821: LD_VAR 0 17
53825: PUSH
53826: LD_INT 1
53828: ARRAY
53829: PPUSH
53830: CALL_OW 250
53834: PPUSH
53835: LD_VAR 0 17
53839: PUSH
53840: LD_INT 1
53842: ARRAY
53843: PPUSH
53844: CALL_OW 254
53848: PPUSH
53849: LD_INT 5
53851: PPUSH
53852: CALL_OW 272
53856: PUSH
53857: LD_VAR 0 17
53861: PUSH
53862: LD_INT 1
53864: ARRAY
53865: PPUSH
53866: CALL_OW 251
53870: PPUSH
53871: LD_VAR 0 17
53875: PUSH
53876: LD_INT 1
53878: ARRAY
53879: PPUSH
53880: CALL_OW 254
53884: PPUSH
53885: LD_INT 5
53887: PPUSH
53888: CALL_OW 273
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53897: LD_VAR 0 16
53901: PUSH
53902: LD_INT 1
53904: ARRAY
53905: PPUSH
53906: LD_VAR 0 16
53910: PUSH
53911: LD_INT 2
53913: ARRAY
53914: PPUSH
53915: CALL_OW 488
53919: IFFALSE 53950
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53921: LD_VAR 0 13
53925: PPUSH
53926: LD_VAR 0 16
53930: PUSH
53931: LD_INT 1
53933: ARRAY
53934: PPUSH
53935: LD_VAR 0 16
53939: PUSH
53940: LD_INT 2
53942: ARRAY
53943: PPUSH
53944: CALL_OW 111
// continue ;
53948: GO 53440
// end ; end ; r := GetDir ( tmp ) ;
53950: LD_ADDR_VAR 0 15
53954: PUSH
53955: LD_VAR 0 13
53959: PPUSH
53960: CALL_OW 254
53964: ST_TO_ADDR
// if r = 5 then
53965: LD_VAR 0 15
53969: PUSH
53970: LD_INT 5
53972: EQUAL
53973: IFFALSE 53983
// r := 0 ;
53975: LD_ADDR_VAR 0 15
53979: PUSH
53980: LD_INT 0
53982: ST_TO_ADDR
// for j = r to 5 do
53983: LD_ADDR_VAR 0 10
53987: PUSH
53988: DOUBLE
53989: LD_VAR 0 15
53993: DEC
53994: ST_TO_ADDR
53995: LD_INT 5
53997: PUSH
53998: FOR_TO
53999: IFFALSE 54113
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54001: LD_ADDR_VAR 0 11
54005: PUSH
54006: LD_VAR 0 13
54010: PPUSH
54011: CALL_OW 250
54015: PPUSH
54016: LD_VAR 0 10
54020: PPUSH
54021: LD_INT 2
54023: PPUSH
54024: CALL_OW 272
54028: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54029: LD_ADDR_VAR 0 12
54033: PUSH
54034: LD_VAR 0 13
54038: PPUSH
54039: CALL_OW 251
54043: PPUSH
54044: LD_VAR 0 10
54048: PPUSH
54049: LD_INT 2
54051: PPUSH
54052: CALL_OW 273
54056: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54057: LD_VAR 0 11
54061: PPUSH
54062: LD_VAR 0 12
54066: PPUSH
54067: CALL_OW 488
54071: PUSH
54072: LD_VAR 0 11
54076: PPUSH
54077: LD_VAR 0 12
54081: PPUSH
54082: CALL_OW 428
54086: NOT
54087: AND
54088: IFFALSE 54111
// begin ComMoveXY ( tmp , _x , _y ) ;
54090: LD_VAR 0 13
54094: PPUSH
54095: LD_VAR 0 11
54099: PPUSH
54100: LD_VAR 0 12
54104: PPUSH
54105: CALL_OW 111
// break ;
54109: GO 54113
// end ; end ;
54111: GO 53998
54113: POP
54114: POP
// end ; end ;
54115: GO 53440
54117: POP
54118: POP
// end ;
54119: LD_VAR 0 8
54123: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54124: LD_INT 0
54126: PPUSH
// result := true ;
54127: LD_ADDR_VAR 0 3
54131: PUSH
54132: LD_INT 1
54134: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54135: LD_VAR 0 2
54139: PUSH
54140: LD_INT 24
54142: DOUBLE
54143: EQUAL
54144: IFTRUE 54154
54146: LD_INT 33
54148: DOUBLE
54149: EQUAL
54150: IFTRUE 54154
54152: GO 54179
54154: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54155: LD_ADDR_VAR 0 3
54159: PUSH
54160: LD_INT 32
54162: PPUSH
54163: LD_VAR 0 1
54167: PPUSH
54168: CALL_OW 321
54172: PUSH
54173: LD_INT 2
54175: EQUAL
54176: ST_TO_ADDR
54177: GO 54495
54179: LD_INT 20
54181: DOUBLE
54182: EQUAL
54183: IFTRUE 54187
54185: GO 54212
54187: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54188: LD_ADDR_VAR 0 3
54192: PUSH
54193: LD_INT 6
54195: PPUSH
54196: LD_VAR 0 1
54200: PPUSH
54201: CALL_OW 321
54205: PUSH
54206: LD_INT 2
54208: EQUAL
54209: ST_TO_ADDR
54210: GO 54495
54212: LD_INT 22
54214: DOUBLE
54215: EQUAL
54216: IFTRUE 54226
54218: LD_INT 36
54220: DOUBLE
54221: EQUAL
54222: IFTRUE 54226
54224: GO 54251
54226: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54227: LD_ADDR_VAR 0 3
54231: PUSH
54232: LD_INT 15
54234: PPUSH
54235: LD_VAR 0 1
54239: PPUSH
54240: CALL_OW 321
54244: PUSH
54245: LD_INT 2
54247: EQUAL
54248: ST_TO_ADDR
54249: GO 54495
54251: LD_INT 30
54253: DOUBLE
54254: EQUAL
54255: IFTRUE 54259
54257: GO 54284
54259: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54260: LD_ADDR_VAR 0 3
54264: PUSH
54265: LD_INT 20
54267: PPUSH
54268: LD_VAR 0 1
54272: PPUSH
54273: CALL_OW 321
54277: PUSH
54278: LD_INT 2
54280: EQUAL
54281: ST_TO_ADDR
54282: GO 54495
54284: LD_INT 28
54286: DOUBLE
54287: EQUAL
54288: IFTRUE 54298
54290: LD_INT 21
54292: DOUBLE
54293: EQUAL
54294: IFTRUE 54298
54296: GO 54323
54298: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54299: LD_ADDR_VAR 0 3
54303: PUSH
54304: LD_INT 21
54306: PPUSH
54307: LD_VAR 0 1
54311: PPUSH
54312: CALL_OW 321
54316: PUSH
54317: LD_INT 2
54319: EQUAL
54320: ST_TO_ADDR
54321: GO 54495
54323: LD_INT 16
54325: DOUBLE
54326: EQUAL
54327: IFTRUE 54331
54329: GO 54356
54331: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54332: LD_ADDR_VAR 0 3
54336: PUSH
54337: LD_INT 84
54339: PPUSH
54340: LD_VAR 0 1
54344: PPUSH
54345: CALL_OW 321
54349: PUSH
54350: LD_INT 2
54352: EQUAL
54353: ST_TO_ADDR
54354: GO 54495
54356: LD_INT 19
54358: DOUBLE
54359: EQUAL
54360: IFTRUE 54370
54362: LD_INT 23
54364: DOUBLE
54365: EQUAL
54366: IFTRUE 54370
54368: GO 54395
54370: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54371: LD_ADDR_VAR 0 3
54375: PUSH
54376: LD_INT 83
54378: PPUSH
54379: LD_VAR 0 1
54383: PPUSH
54384: CALL_OW 321
54388: PUSH
54389: LD_INT 2
54391: EQUAL
54392: ST_TO_ADDR
54393: GO 54495
54395: LD_INT 17
54397: DOUBLE
54398: EQUAL
54399: IFTRUE 54403
54401: GO 54428
54403: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54404: LD_ADDR_VAR 0 3
54408: PUSH
54409: LD_INT 39
54411: PPUSH
54412: LD_VAR 0 1
54416: PPUSH
54417: CALL_OW 321
54421: PUSH
54422: LD_INT 2
54424: EQUAL
54425: ST_TO_ADDR
54426: GO 54495
54428: LD_INT 18
54430: DOUBLE
54431: EQUAL
54432: IFTRUE 54436
54434: GO 54461
54436: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54437: LD_ADDR_VAR 0 3
54441: PUSH
54442: LD_INT 40
54444: PPUSH
54445: LD_VAR 0 1
54449: PPUSH
54450: CALL_OW 321
54454: PUSH
54455: LD_INT 2
54457: EQUAL
54458: ST_TO_ADDR
54459: GO 54495
54461: LD_INT 27
54463: DOUBLE
54464: EQUAL
54465: IFTRUE 54469
54467: GO 54494
54469: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54470: LD_ADDR_VAR 0 3
54474: PUSH
54475: LD_INT 35
54477: PPUSH
54478: LD_VAR 0 1
54482: PPUSH
54483: CALL_OW 321
54487: PUSH
54488: LD_INT 2
54490: EQUAL
54491: ST_TO_ADDR
54492: GO 54495
54494: POP
// end ;
54495: LD_VAR 0 3
54499: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54500: LD_INT 0
54502: PPUSH
54503: PPUSH
54504: PPUSH
54505: PPUSH
54506: PPUSH
54507: PPUSH
54508: PPUSH
54509: PPUSH
54510: PPUSH
54511: PPUSH
54512: PPUSH
// result := false ;
54513: LD_ADDR_VAR 0 6
54517: PUSH
54518: LD_INT 0
54520: ST_TO_ADDR
// if btype = b_depot then
54521: LD_VAR 0 2
54525: PUSH
54526: LD_INT 0
54528: EQUAL
54529: IFFALSE 54541
// begin result := true ;
54531: LD_ADDR_VAR 0 6
54535: PUSH
54536: LD_INT 1
54538: ST_TO_ADDR
// exit ;
54539: GO 55367
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54541: LD_VAR 0 1
54545: NOT
54546: PUSH
54547: LD_VAR 0 1
54551: PPUSH
54552: CALL_OW 266
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: IN
54567: NOT
54568: OR
54569: PUSH
54570: LD_VAR 0 2
54574: NOT
54575: OR
54576: PUSH
54577: LD_VAR 0 5
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: LD_INT 3
54593: PUSH
54594: LD_INT 4
54596: PUSH
54597: LD_INT 5
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: IN
54608: NOT
54609: OR
54610: PUSH
54611: LD_VAR 0 3
54615: PPUSH
54616: LD_VAR 0 4
54620: PPUSH
54621: CALL_OW 488
54625: NOT
54626: OR
54627: IFFALSE 54631
// exit ;
54629: GO 55367
// side := GetSide ( depot ) ;
54631: LD_ADDR_VAR 0 9
54635: PUSH
54636: LD_VAR 0 1
54640: PPUSH
54641: CALL_OW 255
54645: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54646: LD_VAR 0 9
54650: PPUSH
54651: LD_VAR 0 2
54655: PPUSH
54656: CALL 54124 0 2
54660: NOT
54661: IFFALSE 54665
// exit ;
54663: GO 55367
// pom := GetBase ( depot ) ;
54665: LD_ADDR_VAR 0 10
54669: PUSH
54670: LD_VAR 0 1
54674: PPUSH
54675: CALL_OW 274
54679: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54680: LD_ADDR_VAR 0 11
54684: PUSH
54685: LD_VAR 0 2
54689: PPUSH
54690: LD_VAR 0 1
54694: PPUSH
54695: CALL_OW 248
54699: PPUSH
54700: CALL_OW 450
54704: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54705: LD_VAR 0 10
54709: PPUSH
54710: LD_INT 1
54712: PPUSH
54713: CALL_OW 275
54717: PUSH
54718: LD_VAR 0 11
54722: PUSH
54723: LD_INT 1
54725: ARRAY
54726: GREATEREQUAL
54727: PUSH
54728: LD_VAR 0 10
54732: PPUSH
54733: LD_INT 2
54735: PPUSH
54736: CALL_OW 275
54740: PUSH
54741: LD_VAR 0 11
54745: PUSH
54746: LD_INT 2
54748: ARRAY
54749: GREATEREQUAL
54750: AND
54751: PUSH
54752: LD_VAR 0 10
54756: PPUSH
54757: LD_INT 3
54759: PPUSH
54760: CALL_OW 275
54764: PUSH
54765: LD_VAR 0 11
54769: PUSH
54770: LD_INT 3
54772: ARRAY
54773: GREATEREQUAL
54774: AND
54775: NOT
54776: IFFALSE 54780
// exit ;
54778: GO 55367
// if GetBType ( depot ) = b_depot then
54780: LD_VAR 0 1
54784: PPUSH
54785: CALL_OW 266
54789: PUSH
54790: LD_INT 0
54792: EQUAL
54793: IFFALSE 54805
// dist := 28 else
54795: LD_ADDR_VAR 0 14
54799: PUSH
54800: LD_INT 28
54802: ST_TO_ADDR
54803: GO 54813
// dist := 36 ;
54805: LD_ADDR_VAR 0 14
54809: PUSH
54810: LD_INT 36
54812: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54813: LD_VAR 0 1
54817: PPUSH
54818: LD_VAR 0 3
54822: PPUSH
54823: LD_VAR 0 4
54827: PPUSH
54828: CALL_OW 297
54832: PUSH
54833: LD_VAR 0 14
54837: GREATER
54838: IFFALSE 54842
// exit ;
54840: GO 55367
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54842: LD_ADDR_VAR 0 12
54846: PUSH
54847: LD_VAR 0 2
54851: PPUSH
54852: LD_VAR 0 3
54856: PPUSH
54857: LD_VAR 0 4
54861: PPUSH
54862: LD_VAR 0 5
54866: PPUSH
54867: LD_VAR 0 1
54871: PPUSH
54872: CALL_OW 248
54876: PPUSH
54877: LD_INT 0
54879: PPUSH
54880: CALL 55372 0 6
54884: ST_TO_ADDR
// if not hexes then
54885: LD_VAR 0 12
54889: NOT
54890: IFFALSE 54894
// exit ;
54892: GO 55367
// hex := GetHexInfo ( x , y ) ;
54894: LD_ADDR_VAR 0 15
54898: PUSH
54899: LD_VAR 0 3
54903: PPUSH
54904: LD_VAR 0 4
54908: PPUSH
54909: CALL_OW 546
54913: ST_TO_ADDR
// if hex [ 1 ] then
54914: LD_VAR 0 15
54918: PUSH
54919: LD_INT 1
54921: ARRAY
54922: IFFALSE 54926
// exit ;
54924: GO 55367
// height := hex [ 2 ] ;
54926: LD_ADDR_VAR 0 13
54930: PUSH
54931: LD_VAR 0 15
54935: PUSH
54936: LD_INT 2
54938: ARRAY
54939: ST_TO_ADDR
// for i = 1 to hexes do
54940: LD_ADDR_VAR 0 7
54944: PUSH
54945: DOUBLE
54946: LD_INT 1
54948: DEC
54949: ST_TO_ADDR
54950: LD_VAR 0 12
54954: PUSH
54955: FOR_TO
54956: IFFALSE 55286
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54958: LD_VAR 0 12
54962: PUSH
54963: LD_VAR 0 7
54967: ARRAY
54968: PUSH
54969: LD_INT 1
54971: ARRAY
54972: PPUSH
54973: LD_VAR 0 12
54977: PUSH
54978: LD_VAR 0 7
54982: ARRAY
54983: PUSH
54984: LD_INT 2
54986: ARRAY
54987: PPUSH
54988: CALL_OW 488
54992: NOT
54993: PUSH
54994: LD_VAR 0 12
54998: PUSH
54999: LD_VAR 0 7
55003: ARRAY
55004: PUSH
55005: LD_INT 1
55007: ARRAY
55008: PPUSH
55009: LD_VAR 0 12
55013: PUSH
55014: LD_VAR 0 7
55018: ARRAY
55019: PUSH
55020: LD_INT 2
55022: ARRAY
55023: PPUSH
55024: CALL_OW 428
55028: PUSH
55029: LD_INT 0
55031: GREATER
55032: OR
55033: PUSH
55034: LD_VAR 0 12
55038: PUSH
55039: LD_VAR 0 7
55043: ARRAY
55044: PUSH
55045: LD_INT 1
55047: ARRAY
55048: PPUSH
55049: LD_VAR 0 12
55053: PUSH
55054: LD_VAR 0 7
55058: ARRAY
55059: PUSH
55060: LD_INT 2
55062: ARRAY
55063: PPUSH
55064: CALL_OW 351
55068: OR
55069: IFFALSE 55075
// exit ;
55071: POP
55072: POP
55073: GO 55367
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55075: LD_ADDR_VAR 0 8
55079: PUSH
55080: LD_VAR 0 12
55084: PUSH
55085: LD_VAR 0 7
55089: ARRAY
55090: PUSH
55091: LD_INT 1
55093: ARRAY
55094: PPUSH
55095: LD_VAR 0 12
55099: PUSH
55100: LD_VAR 0 7
55104: ARRAY
55105: PUSH
55106: LD_INT 2
55108: ARRAY
55109: PPUSH
55110: CALL_OW 546
55114: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55115: LD_VAR 0 8
55119: PUSH
55120: LD_INT 1
55122: ARRAY
55123: PUSH
55124: LD_VAR 0 8
55128: PUSH
55129: LD_INT 2
55131: ARRAY
55132: PUSH
55133: LD_VAR 0 13
55137: PUSH
55138: LD_INT 2
55140: PLUS
55141: GREATER
55142: OR
55143: PUSH
55144: LD_VAR 0 8
55148: PUSH
55149: LD_INT 2
55151: ARRAY
55152: PUSH
55153: LD_VAR 0 13
55157: PUSH
55158: LD_INT 2
55160: MINUS
55161: LESS
55162: OR
55163: PUSH
55164: LD_VAR 0 8
55168: PUSH
55169: LD_INT 3
55171: ARRAY
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 8
55178: PUSH
55179: LD_INT 9
55181: PUSH
55182: LD_INT 10
55184: PUSH
55185: LD_INT 11
55187: PUSH
55188: LD_INT 12
55190: PUSH
55191: LD_INT 13
55193: PUSH
55194: LD_INT 16
55196: PUSH
55197: LD_INT 17
55199: PUSH
55200: LD_INT 18
55202: PUSH
55203: LD_INT 19
55205: PUSH
55206: LD_INT 20
55208: PUSH
55209: LD_INT 21
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: IN
55227: NOT
55228: OR
55229: PUSH
55230: LD_VAR 0 8
55234: PUSH
55235: LD_INT 5
55237: ARRAY
55238: NOT
55239: OR
55240: PUSH
55241: LD_VAR 0 8
55245: PUSH
55246: LD_INT 6
55248: ARRAY
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 7
55258: PUSH
55259: LD_INT 9
55261: PUSH
55262: LD_INT 10
55264: PUSH
55265: LD_INT 11
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: IN
55276: NOT
55277: OR
55278: IFFALSE 55284
// exit ;
55280: POP
55281: POP
55282: GO 55367
// end ;
55284: GO 54955
55286: POP
55287: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55288: LD_VAR 0 9
55292: PPUSH
55293: LD_VAR 0 3
55297: PPUSH
55298: LD_VAR 0 4
55302: PPUSH
55303: LD_INT 20
55305: PPUSH
55306: CALL 47290 0 4
55310: PUSH
55311: LD_INT 4
55313: ARRAY
55314: IFFALSE 55318
// exit ;
55316: GO 55367
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55318: LD_VAR 0 2
55322: PUSH
55323: LD_INT 29
55325: PUSH
55326: LD_INT 30
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: IN
55333: PUSH
55334: LD_VAR 0 3
55338: PPUSH
55339: LD_VAR 0 4
55343: PPUSH
55344: LD_VAR 0 9
55348: PPUSH
55349: CALL_OW 440
55353: NOT
55354: AND
55355: IFFALSE 55359
// exit ;
55357: GO 55367
// result := true ;
55359: LD_ADDR_VAR 0 6
55363: PUSH
55364: LD_INT 1
55366: ST_TO_ADDR
// end ;
55367: LD_VAR 0 6
55371: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55372: LD_INT 0
55374: PPUSH
55375: PPUSH
55376: PPUSH
55377: PPUSH
55378: PPUSH
55379: PPUSH
55380: PPUSH
55381: PPUSH
55382: PPUSH
55383: PPUSH
55384: PPUSH
55385: PPUSH
55386: PPUSH
55387: PPUSH
55388: PPUSH
55389: PPUSH
55390: PPUSH
55391: PPUSH
55392: PPUSH
55393: PPUSH
55394: PPUSH
55395: PPUSH
55396: PPUSH
55397: PPUSH
55398: PPUSH
55399: PPUSH
55400: PPUSH
55401: PPUSH
55402: PPUSH
55403: PPUSH
55404: PPUSH
55405: PPUSH
55406: PPUSH
55407: PPUSH
55408: PPUSH
55409: PPUSH
55410: PPUSH
55411: PPUSH
55412: PPUSH
55413: PPUSH
55414: PPUSH
55415: PPUSH
55416: PPUSH
55417: PPUSH
55418: PPUSH
55419: PPUSH
55420: PPUSH
55421: PPUSH
55422: PPUSH
55423: PPUSH
55424: PPUSH
55425: PPUSH
55426: PPUSH
55427: PPUSH
55428: PPUSH
55429: PPUSH
55430: PPUSH
55431: PPUSH
// result = [ ] ;
55432: LD_ADDR_VAR 0 7
55436: PUSH
55437: EMPTY
55438: ST_TO_ADDR
// temp_list = [ ] ;
55439: LD_ADDR_VAR 0 9
55443: PUSH
55444: EMPTY
55445: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55446: LD_VAR 0 4
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 3
55462: PUSH
55463: LD_INT 4
55465: PUSH
55466: LD_INT 5
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: IN
55477: NOT
55478: PUSH
55479: LD_VAR 0 1
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: IN
55494: PUSH
55495: LD_VAR 0 5
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: LD_INT 3
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: LIST
55513: IN
55514: NOT
55515: AND
55516: OR
55517: IFFALSE 55521
// exit ;
55519: GO 73912
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55521: LD_VAR 0 1
55525: PUSH
55526: LD_INT 6
55528: PUSH
55529: LD_INT 7
55531: PUSH
55532: LD_INT 8
55534: PUSH
55535: LD_INT 13
55537: PUSH
55538: LD_INT 12
55540: PUSH
55541: LD_INT 15
55543: PUSH
55544: LD_INT 11
55546: PUSH
55547: LD_INT 14
55549: PUSH
55550: LD_INT 10
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: IN
55564: IFFALSE 55574
// btype = b_lab ;
55566: LD_ADDR_VAR 0 1
55570: PUSH
55571: LD_INT 6
55573: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55574: LD_VAR 0 6
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: LIST
55592: IN
55593: NOT
55594: PUSH
55595: LD_VAR 0 1
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: LD_INT 6
55614: PUSH
55615: LD_INT 36
55617: PUSH
55618: LD_INT 4
55620: PUSH
55621: LD_INT 5
55623: PUSH
55624: LD_INT 31
55626: PUSH
55627: LD_INT 32
55629: PUSH
55630: LD_INT 33
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: IN
55646: NOT
55647: PUSH
55648: LD_VAR 0 6
55652: PUSH
55653: LD_INT 1
55655: EQUAL
55656: AND
55657: OR
55658: PUSH
55659: LD_VAR 0 1
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: IN
55674: NOT
55675: PUSH
55676: LD_VAR 0 6
55680: PUSH
55681: LD_INT 2
55683: EQUAL
55684: AND
55685: OR
55686: IFFALSE 55696
// mode = 0 ;
55688: LD_ADDR_VAR 0 6
55692: PUSH
55693: LD_INT 0
55695: ST_TO_ADDR
// case mode of 0 :
55696: LD_VAR 0 6
55700: PUSH
55701: LD_INT 0
55703: DOUBLE
55704: EQUAL
55705: IFTRUE 55709
55707: GO 67162
55709: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55710: LD_ADDR_VAR 0 11
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 3
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55903: LD_ADDR_VAR 0 12
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56099: LD_ADDR_VAR 0 13
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 1
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 2
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 3
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 3
56258: NEG
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 3
56270: NEG
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56298: LD_ADDR_VAR 0 14
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 3
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: LD_INT 3
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56494: LD_ADDR_VAR 0 15
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56687: LD_ADDR_VAR 0 16
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 3
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 3
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56880: LD_ADDR_VAR 0 17
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 2
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 2
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 2
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 2
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: NEG
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57110: LD_ADDR_VAR 0 18
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 2
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: LD_INT 2
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57340: LD_ADDR_VAR 0 19
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 2
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 2
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57570: LD_ADDR_VAR 0 20
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: LD_INT 2
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: LD_INT 2
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 2
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 2
57746: NEG
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: NEG
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57800: LD_ADDR_VAR 0 21
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 2
57999: NEG
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58030: LD_ADDR_VAR 0 22
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 2
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58260: LD_ADDR_VAR 0 23
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 2
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: LD_INT 3
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: LD_INT 3
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 2
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58540: LD_ADDR_VAR 0 24
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: LD_INT 2
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: LD_INT 2
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: NEG
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: NEG
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 3
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: LD_INT 2
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58816: LD_ADDR_VAR 0 25
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 3
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: LD_INT 3
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59090: LD_ADDR_VAR 0 26
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 2
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 2
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: LD_INT 2
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: NEG
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: LD_INT 3
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59366: LD_ADDR_VAR 0 27
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 3
59611: NEG
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59646: LD_ADDR_VAR 0 28
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 2
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 2
59781: PUSH
59782: LD_INT 2
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 3
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 3
59893: NEG
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59928: LD_ADDR_VAR 0 29
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: NEG
60119: PUSH
60120: LD_INT 3
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: LD_INT 2
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 3
60172: NEG
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60207: LD_ADDR_VAR 0 30
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 2
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 2
60342: PUSH
60343: LD_INT 2
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: LD_INT 2
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 2
60373: NEG
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: LD_INT 3
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 2
60439: NEG
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 3
60450: NEG
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60485: LD_ADDR_VAR 0 31
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: LD_INT 2
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: LD_INT 2
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: NEG
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: LD_INT 2
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: LD_INT 3
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 3
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 3
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 3
60728: NEG
60729: PUSH
60730: LD_INT 2
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60763: LD_ADDR_VAR 0 32
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 2
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: LD_INT 2
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: LD_INT 2
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: NEG
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: LD_INT 3
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 3
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: LD_INT 3
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 3
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61041: LD_ADDR_VAR 0 33
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 2
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 2
61207: NEG
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 2
61219: NEG
61220: PUSH
61221: LD_INT 2
61223: NEG
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 2
61231: NEG
61232: PUSH
61233: LD_INT 3
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 3
61254: PUSH
61255: LD_INT 1
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: LD_INT 3
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 3
61285: NEG
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61320: LD_ADDR_VAR 0 34
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: LD_INT 1
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: LD_INT 0
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: LD_INT 1
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: NEG
61402: PUSH
61403: LD_INT 2
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: LD_INT 2
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 2
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: LD_INT 2
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: LD_INT 2
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 2
61476: NEG
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 2
61499: NEG
61500: PUSH
61501: LD_INT 2
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: LD_INT 3
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 3
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 3
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: NEG
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61600: LD_ADDR_VAR 0 35
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: NEG
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 2
61681: PUSH
61682: LD_INT 1
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61712: LD_ADDR_VAR 0 36
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: LD_INT 2
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: LD_INT 2
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61824: LD_ADDR_VAR 0 37
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61936: LD_ADDR_VAR 0 38
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: LD_INT 1
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 2
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 2
62027: NEG
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62048: LD_ADDR_VAR 0 39
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 1
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: NEG
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: LD_INT 2
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: PUSH
62142: LD_INT 2
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62160: LD_ADDR_VAR 0 40
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: LD_INT 1
62180: NEG
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 1
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62272: LD_ADDR_VAR 0 41
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: LD_INT 1
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: LD_INT 0
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: LD_INT 1
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: LD_INT 2
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 1
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 2
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 2
62396: PUSH
62397: LD_INT 2
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 2
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: NEG
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 2
62450: NEG
62451: PUSH
62452: LD_INT 2
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 2
62462: NEG
62463: PUSH
62464: LD_INT 3
62466: NEG
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 2
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 3
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 3
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 3
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 3
62515: PUSH
62516: LD_INT 3
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 2
62525: PUSH
62526: LD_INT 3
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 2
62535: NEG
62536: PUSH
62537: LD_INT 1
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: NEG
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 3
62557: NEG
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 3
62569: NEG
62570: PUSH
62571: LD_INT 2
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 3
62581: NEG
62582: PUSH
62583: LD_INT 3
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62622: LD_ADDR_VAR 0 42
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: LD_INT 1
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 1
62703: NEG
62704: PUSH
62705: LD_INT 2
62707: NEG
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: LD_INT 2
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 2
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: LD_INT 2
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: LD_INT 2
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 2
62800: NEG
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 2
62812: NEG
62813: PUSH
62814: LD_INT 3
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: LD_INT 3
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: LD_INT 3
62839: NEG
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: LD_INT 2
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 3
62858: PUSH
62859: LD_INT 2
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 3
62868: PUSH
62869: LD_INT 3
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 2
62878: PUSH
62879: LD_INT 3
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: LD_INT 3
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: LD_INT 3
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: LD_INT 2
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 3
62919: NEG
62920: PUSH
62921: LD_INT 2
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 3
62931: NEG
62932: PUSH
62933: LD_INT 3
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62972: LD_ADDR_VAR 0 43
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: LD_INT 2
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 2
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: LD_INT 2
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 2
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 2
63138: NEG
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 3
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 3
63176: NEG
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: LD_INT 2
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 3
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: LD_INT 3
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: LD_INT 3
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: LD_INT 2
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: NEG
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 3
63268: NEG
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 3
63279: NEG
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63320: LD_ADDR_VAR 0 44
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: LD_INT 1
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 1
63401: NEG
63402: PUSH
63403: LD_INT 2
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 2
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 2
63498: NEG
63499: PUSH
63500: LD_INT 2
63502: NEG
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 2
63510: NEG
63511: PUSH
63512: LD_INT 3
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 2
63522: PUSH
63523: LD_INT 1
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 3
63533: PUSH
63534: LD_INT 0
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 3
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 3
63563: PUSH
63564: LD_INT 3
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 2
63573: PUSH
63574: LD_INT 3
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: NEG
63584: PUSH
63585: LD_INT 1
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 3
63594: NEG
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 3
63605: NEG
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 3
63617: NEG
63618: PUSH
63619: LD_INT 2
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 3
63629: NEG
63630: PUSH
63631: LD_INT 3
63633: NEG
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63670: LD_ADDR_VAR 0 45
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 1
63728: NEG
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: LD_INT 1
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: LD_INT 2
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 0
63763: PUSH
63764: LD_INT 2
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 2
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: LD_INT 2
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 2
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 2
63836: NEG
63837: PUSH
63838: LD_INT 1
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 2
63848: NEG
63849: PUSH
63850: LD_INT 2
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: NEG
63861: PUSH
63862: LD_INT 3
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: LD_INT 3
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: LD_INT 3
63887: NEG
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 1
63895: PUSH
63896: LD_INT 2
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 3
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 3
63916: PUSH
63917: LD_INT 3
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 2
63926: PUSH
63927: LD_INT 3
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 1
63936: PUSH
63937: LD_INT 3
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: LD_INT 3
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 1
63956: NEG
63957: PUSH
63958: LD_INT 2
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 3
63967: NEG
63968: PUSH
63969: LD_INT 2
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 3
63979: NEG
63980: PUSH
63981: LD_INT 3
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64020: LD_ADDR_VAR 0 46
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: LD_INT 1
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: LD_INT 1
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: NEG
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: NEG
64102: PUSH
64103: LD_INT 2
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 2
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 2
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: LD_INT 2
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 2
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: LD_INT 1
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 2
64186: NEG
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 2
64197: NEG
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 1
64209: NEG
64210: PUSH
64211: LD_INT 3
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: LD_INT 3
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: LD_INT 2
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 2
64243: PUSH
64244: LD_INT 1
64246: NEG
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 3
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: LD_INT 3
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: LD_INT 2
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: LD_INT 1
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 3
64327: NEG
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64368: LD_ADDR_VAR 0 47
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: LD_INT 0
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: LD_INT 1
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: LD_INT 0
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: LD_INT 1
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: LD_INT 0
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: NEG
64450: PUSH
64451: LD_INT 2
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: LD_INT 2
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 2
64483: NEG
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 2
64495: NEG
64496: PUSH
64497: LD_INT 2
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64519: LD_ADDR_VAR 0 48
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 1
64577: NEG
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: LD_INT 2
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: LD_INT 2
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 1
64623: PUSH
64624: LD_INT 1
64626: NEG
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 2
64634: PUSH
64635: LD_INT 0
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: LD_INT 1
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64666: LD_ADDR_VAR 0 49
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: LD_INT 1
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 1
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 1
64724: NEG
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 2
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 2
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 2
64778: PUSH
64779: LD_INT 2
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: LD_INT 2
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64810: LD_ADDR_VAR 0 50
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: LD_INT 1
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 1
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: NEG
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 1
64879: NEG
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 2
64891: PUSH
64892: LD_INT 1
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 2
64901: PUSH
64902: LD_INT 2
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: LD_INT 2
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 0
64921: PUSH
64922: LD_INT 2
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: LD_INT 1
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64954: LD_ADDR_VAR 0 51
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 1
64974: NEG
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: LD_INT 1
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 1
65012: NEG
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: PUSH
65036: LD_INT 2
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: LD_INT 2
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: LD_INT 1
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 2
65066: NEG
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 2
65077: NEG
65078: PUSH
65079: LD_INT 1
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65101: LD_ADDR_VAR 0 52
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: LD_INT 1
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 1
65170: NEG
65171: PUSH
65172: LD_INT 1
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: LD_INT 2
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 1
65194: NEG
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 2
65205: NEG
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 2
65216: NEG
65217: PUSH
65218: LD_INT 1
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 2
65228: NEG
65229: PUSH
65230: LD_INT 2
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65252: LD_ADDR_VAR 0 53
65256: PUSH
65257: LD_INT 0
65259: PUSH
65260: LD_INT 0
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 1
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 1
65290: PUSH
65291: LD_INT 1
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 1
65310: NEG
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: LD_INT 2
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 2
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 2
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 2
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 2
65387: PUSH
65388: LD_INT 2
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: LD_INT 2
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 1
65417: NEG
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 2
65428: NEG
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 2
65439: NEG
65440: PUSH
65441: LD_INT 1
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 2
65451: NEG
65452: PUSH
65453: LD_INT 2
65455: NEG
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65482: LD_ADDR_VAR 0 54
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: LD_INT 0
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: LD_INT 1
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: LD_INT 1
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: LD_INT 1
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 1
65540: NEG
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: NEG
65552: PUSH
65553: LD_INT 1
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 1
65563: NEG
65564: PUSH
65565: LD_INT 2
65567: NEG
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: LD_INT 2
65578: NEG
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 1
65586: PUSH
65587: LD_INT 1
65589: NEG
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 2
65597: PUSH
65598: LD_INT 0
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 2
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 2
65617: PUSH
65618: LD_INT 2
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: LD_INT 2
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: LD_INT 2
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: NEG
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 2
65658: NEG
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 2
65669: NEG
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 2
65681: NEG
65682: PUSH
65683: LD_INT 2
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65712: LD_ADDR_VAR 0 55
65716: PUSH
65717: LD_INT 0
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: LD_INT 1
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 0
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: NEG
65782: PUSH
65783: LD_INT 1
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 1
65793: NEG
65794: PUSH
65795: LD_INT 2
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: LD_INT 2
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 1
65816: PUSH
65817: LD_INT 1
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 2
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 2
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 2
65847: PUSH
65848: LD_INT 2
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: LD_INT 2
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: LD_INT 2
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: LD_INT 1
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 2
65888: NEG
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 2
65899: NEG
65900: PUSH
65901: LD_INT 1
65903: NEG
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 2
65911: NEG
65912: PUSH
65913: LD_INT 2
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65942: LD_ADDR_VAR 0 56
65946: PUSH
65947: LD_INT 0
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: LD_INT 1
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 1
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 1
65980: PUSH
65981: LD_INT 1
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: LD_INT 1
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 1
66000: NEG
66001: PUSH
66002: LD_INT 0
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: LD_INT 1
66015: NEG
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 1
66023: NEG
66024: PUSH
66025: LD_INT 2
66027: NEG
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 0
66035: PUSH
66036: LD_INT 2
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 1
66046: PUSH
66047: LD_INT 1
66049: NEG
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: LD_INT 0
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 2
66067: PUSH
66068: LD_INT 1
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: LD_INT 2
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 1
66087: PUSH
66088: LD_INT 2
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: LD_INT 2
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 1
66107: NEG
66108: PUSH
66109: LD_INT 1
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 2
66118: NEG
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 2
66129: NEG
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 2
66141: NEG
66142: PUSH
66143: LD_INT 2
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66172: LD_ADDR_VAR 0 57
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: LD_INT 1
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 1
66210: PUSH
66211: LD_INT 1
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_INT 1
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 1
66230: NEG
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: NEG
66242: PUSH
66243: LD_INT 1
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 1
66253: NEG
66254: PUSH
66255: LD_INT 2
66257: NEG
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: LD_INT 2
66268: NEG
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 1
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 2
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 2
66297: PUSH
66298: LD_INT 1
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 2
66307: PUSH
66308: LD_INT 2
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 1
66317: PUSH
66318: LD_INT 2
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: LD_INT 2
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 1
66337: NEG
66338: PUSH
66339: LD_INT 1
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 2
66348: NEG
66349: PUSH
66350: LD_INT 0
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 2
66359: NEG
66360: PUSH
66361: LD_INT 1
66363: NEG
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 2
66371: NEG
66372: PUSH
66373: LD_INT 2
66375: NEG
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66402: LD_ADDR_VAR 0 58
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: LD_INT 0
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 1
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 1
66440: PUSH
66441: LD_INT 1
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 1
66460: NEG
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 1
66471: NEG
66472: PUSH
66473: LD_INT 1
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 1
66483: NEG
66484: PUSH
66485: LD_INT 2
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 0
66495: PUSH
66496: LD_INT 2
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 1
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 2
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 2
66527: PUSH
66528: LD_INT 1
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 2
66537: PUSH
66538: LD_INT 2
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: LD_INT 2
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 0
66557: PUSH
66558: LD_INT 2
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: PUSH
66569: LD_INT 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 2
66578: NEG
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 2
66589: NEG
66590: PUSH
66591: LD_INT 1
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 2
66601: NEG
66602: PUSH
66603: LD_INT 2
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66632: LD_ADDR_VAR 0 59
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 1
66670: PUSH
66671: LD_INT 1
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: LD_INT 1
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 1
66690: NEG
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66720: LD_ADDR_VAR 0 60
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: LD_INT 0
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 1
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: NEG
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 1
66789: NEG
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66808: LD_ADDR_VAR 0 61
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: LD_INT 1
66828: NEG
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 1
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 1
66846: PUSH
66847: LD_INT 1
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 0
66856: PUSH
66857: LD_INT 1
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 1
66866: NEG
66867: PUSH
66868: LD_INT 0
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 1
66877: NEG
66878: PUSH
66879: LD_INT 1
66881: NEG
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66896: LD_ADDR_VAR 0 62
66900: PUSH
66901: LD_INT 0
66903: PUSH
66904: LD_INT 0
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 0
66913: PUSH
66914: LD_INT 1
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 1
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: LD_INT 1
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 0
66944: PUSH
66945: LD_INT 1
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: NEG
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 1
66965: NEG
66966: PUSH
66967: LD_INT 1
66969: NEG
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66984: LD_ADDR_VAR 0 63
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: LD_INT 0
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: LD_INT 1
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 1
67012: PUSH
67013: LD_INT 0
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: LD_INT 1
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 0
67032: PUSH
67033: LD_INT 1
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 1
67042: NEG
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67072: LD_ADDR_VAR 0 64
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: LD_INT 0
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: LD_INT 1
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 1
67100: PUSH
67101: LD_INT 0
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: LD_INT 1
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: LD_INT 1
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 1
67130: NEG
67131: PUSH
67132: LD_INT 0
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 1
67141: NEG
67142: PUSH
67143: LD_INT 1
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: ST_TO_ADDR
// end ; 1 :
67160: GO 73057
67162: LD_INT 1
67164: DOUBLE
67165: EQUAL
67166: IFTRUE 67170
67168: GO 69793
67170: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67171: LD_ADDR_VAR 0 11
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: PUSH
67180: LD_INT 3
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 0
67190: PUSH
67191: LD_INT 3
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: LD_INT 2
67204: NEG
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: LIST
67214: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67215: LD_ADDR_VAR 0 12
67219: PUSH
67220: LD_INT 2
67222: PUSH
67223: LD_INT 1
67225: NEG
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 3
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 3
67243: PUSH
67244: LD_INT 1
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: LIST
67255: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67256: LD_ADDR_VAR 0 13
67260: PUSH
67261: LD_INT 3
67263: PUSH
67264: LD_INT 2
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 3
67273: PUSH
67274: LD_INT 3
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 2
67283: PUSH
67284: LD_INT 3
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: LIST
67295: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67296: LD_ADDR_VAR 0 14
67300: PUSH
67301: LD_INT 1
67303: PUSH
67304: LD_INT 3
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 0
67313: PUSH
67314: LD_INT 3
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 1
67323: NEG
67324: PUSH
67325: LD_INT 2
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: LIST
67336: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67337: LD_ADDR_VAR 0 15
67341: PUSH
67342: LD_INT 2
67344: NEG
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 3
67355: NEG
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 3
67366: NEG
67367: PUSH
67368: LD_INT 1
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: LIST
67380: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67381: LD_ADDR_VAR 0 16
67385: PUSH
67386: LD_INT 2
67388: NEG
67389: PUSH
67390: LD_INT 3
67392: NEG
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 3
67400: NEG
67401: PUSH
67402: LD_INT 2
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 3
67412: NEG
67413: PUSH
67414: LD_INT 3
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: LIST
67426: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67427: LD_ADDR_VAR 0 17
67431: PUSH
67432: LD_INT 1
67434: NEG
67435: PUSH
67436: LD_INT 3
67438: NEG
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: LD_INT 3
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: LD_INT 2
67460: NEG
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: LIST
67470: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67471: LD_ADDR_VAR 0 18
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: LD_INT 1
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 3
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 3
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: LIST
67511: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67512: LD_ADDR_VAR 0 19
67516: PUSH
67517: LD_INT 3
67519: PUSH
67520: LD_INT 2
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 3
67529: PUSH
67530: LD_INT 3
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 2
67539: PUSH
67540: LD_INT 3
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: LIST
67551: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67552: LD_ADDR_VAR 0 20
67556: PUSH
67557: LD_INT 1
67559: PUSH
67560: LD_INT 3
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: LD_INT 3
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: LD_INT 2
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: LIST
67592: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67593: LD_ADDR_VAR 0 21
67597: PUSH
67598: LD_INT 2
67600: NEG
67601: PUSH
67602: LD_INT 1
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 3
67611: NEG
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 3
67622: NEG
67623: PUSH
67624: LD_INT 1
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: LIST
67636: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67637: LD_ADDR_VAR 0 22
67641: PUSH
67642: LD_INT 2
67644: NEG
67645: PUSH
67646: LD_INT 3
67648: NEG
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: LD_INT 2
67660: NEG
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 3
67668: NEG
67669: PUSH
67670: LD_INT 3
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: LIST
67682: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67683: LD_ADDR_VAR 0 23
67687: PUSH
67688: LD_INT 0
67690: PUSH
67691: LD_INT 3
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: NEG
67702: PUSH
67703: LD_INT 4
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 1
67713: PUSH
67714: LD_INT 3
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: LIST
67726: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67727: LD_ADDR_VAR 0 24
67731: PUSH
67732: LD_INT 3
67734: PUSH
67735: LD_INT 0
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: LD_INT 1
67747: NEG
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 4
67755: PUSH
67756: LD_INT 1
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: LIST
67767: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67768: LD_ADDR_VAR 0 25
67772: PUSH
67773: LD_INT 3
67775: PUSH
67776: LD_INT 3
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 4
67785: PUSH
67786: LD_INT 3
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 3
67795: PUSH
67796: LD_INT 4
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: LIST
67807: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67808: LD_ADDR_VAR 0 26
67812: PUSH
67813: LD_INT 0
67815: PUSH
67816: LD_INT 3
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 1
67825: PUSH
67826: LD_INT 4
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 1
67835: NEG
67836: PUSH
67837: LD_INT 3
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: LIST
67848: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67849: LD_ADDR_VAR 0 27
67853: PUSH
67854: LD_INT 3
67856: NEG
67857: PUSH
67858: LD_INT 0
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 3
67867: NEG
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 4
67878: NEG
67879: PUSH
67880: LD_INT 1
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: LIST
67892: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67893: LD_ADDR_VAR 0 28
67897: PUSH
67898: LD_INT 3
67900: NEG
67901: PUSH
67902: LD_INT 3
67904: NEG
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 3
67912: NEG
67913: PUSH
67914: LD_INT 4
67916: NEG
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 4
67924: NEG
67925: PUSH
67926: LD_INT 3
67928: NEG
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: LIST
67938: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67939: LD_ADDR_VAR 0 29
67943: PUSH
67944: LD_INT 1
67946: NEG
67947: PUSH
67948: LD_INT 3
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 0
67958: PUSH
67959: LD_INT 3
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 1
67969: PUSH
67970: LD_INT 2
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 1
67980: NEG
67981: PUSH
67982: LD_INT 4
67984: NEG
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: LD_INT 4
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 1
68003: PUSH
68004: LD_INT 3
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 1
68014: NEG
68015: PUSH
68016: LD_INT 5
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: LD_INT 5
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 1
68037: PUSH
68038: LD_INT 4
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 1
68048: NEG
68049: PUSH
68050: LD_INT 6
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 0
68060: PUSH
68061: LD_INT 6
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 1
68071: PUSH
68072: LD_INT 5
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68094: LD_ADDR_VAR 0 30
68098: PUSH
68099: LD_INT 2
68101: PUSH
68102: LD_INT 1
68104: NEG
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 3
68112: PUSH
68113: LD_INT 0
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 3
68122: PUSH
68123: LD_INT 1
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 3
68132: PUSH
68133: LD_INT 1
68135: NEG
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 4
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 4
68153: PUSH
68154: LD_INT 1
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 4
68163: PUSH
68164: LD_INT 1
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 5
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 5
68184: PUSH
68185: LD_INT 1
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 5
68194: PUSH
68195: LD_INT 1
68197: NEG
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 6
68205: PUSH
68206: LD_INT 0
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 6
68215: PUSH
68216: LD_INT 1
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68237: LD_ADDR_VAR 0 31
68241: PUSH
68242: LD_INT 3
68244: PUSH
68245: LD_INT 2
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 3
68254: PUSH
68255: LD_INT 3
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 2
68264: PUSH
68265: LD_INT 3
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 4
68274: PUSH
68275: LD_INT 3
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 4
68284: PUSH
68285: LD_INT 4
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 3
68294: PUSH
68295: LD_INT 4
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 5
68304: PUSH
68305: LD_INT 4
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 5
68314: PUSH
68315: LD_INT 5
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 4
68324: PUSH
68325: LD_INT 5
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 6
68334: PUSH
68335: LD_INT 5
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 6
68344: PUSH
68345: LD_INT 6
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 5
68354: PUSH
68355: LD_INT 6
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68376: LD_ADDR_VAR 0 32
68380: PUSH
68381: LD_INT 1
68383: PUSH
68384: LD_INT 3
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 0
68393: PUSH
68394: LD_INT 3
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 1
68403: NEG
68404: PUSH
68405: LD_INT 2
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: LD_INT 4
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 0
68424: PUSH
68425: LD_INT 4
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 1
68434: NEG
68435: PUSH
68436: LD_INT 3
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 1
68445: PUSH
68446: LD_INT 5
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 0
68455: PUSH
68456: LD_INT 5
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 1
68465: NEG
68466: PUSH
68467: LD_INT 4
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 1
68476: PUSH
68477: LD_INT 6
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 0
68486: PUSH
68487: LD_INT 6
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 1
68496: NEG
68497: PUSH
68498: LD_INT 5
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68519: LD_ADDR_VAR 0 33
68523: PUSH
68524: LD_INT 2
68526: NEG
68527: PUSH
68528: LD_INT 1
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 3
68537: NEG
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 3
68548: NEG
68549: PUSH
68550: LD_INT 1
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 3
68560: NEG
68561: PUSH
68562: LD_INT 1
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 4
68571: NEG
68572: PUSH
68573: LD_INT 0
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 4
68582: NEG
68583: PUSH
68584: LD_INT 1
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 4
68594: NEG
68595: PUSH
68596: LD_INT 1
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 5
68605: NEG
68606: PUSH
68607: LD_INT 0
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 5
68616: NEG
68617: PUSH
68618: LD_INT 1
68620: NEG
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 5
68628: NEG
68629: PUSH
68630: LD_INT 1
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 6
68639: NEG
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 6
68650: NEG
68651: PUSH
68652: LD_INT 1
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68674: LD_ADDR_VAR 0 34
68678: PUSH
68679: LD_INT 2
68681: NEG
68682: PUSH
68683: LD_INT 3
68685: NEG
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 3
68693: NEG
68694: PUSH
68695: LD_INT 2
68697: NEG
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 3
68705: NEG
68706: PUSH
68707: LD_INT 3
68709: NEG
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 3
68717: NEG
68718: PUSH
68719: LD_INT 4
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 4
68729: NEG
68730: PUSH
68731: LD_INT 3
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 4
68741: NEG
68742: PUSH
68743: LD_INT 4
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 4
68753: NEG
68754: PUSH
68755: LD_INT 5
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 5
68765: NEG
68766: PUSH
68767: LD_INT 4
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 5
68777: NEG
68778: PUSH
68779: LD_INT 5
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 5
68789: NEG
68790: PUSH
68791: LD_INT 6
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 6
68801: NEG
68802: PUSH
68803: LD_INT 5
68805: NEG
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 6
68813: NEG
68814: PUSH
68815: LD_INT 6
68817: NEG
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68837: LD_ADDR_VAR 0 41
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: LD_INT 2
68847: NEG
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 1
68855: NEG
68856: PUSH
68857: LD_INT 3
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 1
68867: PUSH
68868: LD_INT 2
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: LIST
68880: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68881: LD_ADDR_VAR 0 42
68885: PUSH
68886: LD_INT 2
68888: PUSH
68889: LD_INT 0
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 2
68898: PUSH
68899: LD_INT 1
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 3
68909: PUSH
68910: LD_INT 1
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: LIST
68921: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68922: LD_ADDR_VAR 0 43
68926: PUSH
68927: LD_INT 2
68929: PUSH
68930: LD_INT 2
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 3
68939: PUSH
68940: LD_INT 2
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 2
68949: PUSH
68950: LD_INT 3
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: LIST
68961: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68962: LD_ADDR_VAR 0 44
68966: PUSH
68967: LD_INT 0
68969: PUSH
68970: LD_INT 2
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 1
68979: PUSH
68980: LD_INT 3
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 1
68989: NEG
68990: PUSH
68991: LD_INT 2
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: LIST
69002: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69003: LD_ADDR_VAR 0 45
69007: PUSH
69008: LD_INT 2
69010: NEG
69011: PUSH
69012: LD_INT 0
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 2
69021: NEG
69022: PUSH
69023: LD_INT 1
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 3
69032: NEG
69033: PUSH
69034: LD_INT 1
69036: NEG
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: LIST
69046: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69047: LD_ADDR_VAR 0 46
69051: PUSH
69052: LD_INT 2
69054: NEG
69055: PUSH
69056: LD_INT 2
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 2
69066: NEG
69067: PUSH
69068: LD_INT 3
69070: NEG
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 3
69078: NEG
69079: PUSH
69080: LD_INT 2
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: LIST
69092: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69093: LD_ADDR_VAR 0 47
69097: PUSH
69098: LD_INT 2
69100: NEG
69101: PUSH
69102: LD_INT 3
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 1
69112: NEG
69113: PUSH
69114: LD_INT 3
69116: NEG
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69126: LD_ADDR_VAR 0 48
69130: PUSH
69131: LD_INT 1
69133: PUSH
69134: LD_INT 2
69136: NEG
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 2
69144: PUSH
69145: LD_INT 1
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69157: LD_ADDR_VAR 0 49
69161: PUSH
69162: LD_INT 3
69164: PUSH
69165: LD_INT 1
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 3
69174: PUSH
69175: LD_INT 2
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69186: LD_ADDR_VAR 0 50
69190: PUSH
69191: LD_INT 2
69193: PUSH
69194: LD_INT 3
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 1
69203: PUSH
69204: LD_INT 3
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69215: LD_ADDR_VAR 0 51
69219: PUSH
69220: LD_INT 1
69222: NEG
69223: PUSH
69224: LD_INT 2
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 2
69233: NEG
69234: PUSH
69235: LD_INT 1
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69246: LD_ADDR_VAR 0 52
69250: PUSH
69251: LD_INT 3
69253: NEG
69254: PUSH
69255: LD_INT 1
69257: NEG
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 3
69265: NEG
69266: PUSH
69267: LD_INT 2
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69279: LD_ADDR_VAR 0 53
69283: PUSH
69284: LD_INT 1
69286: NEG
69287: PUSH
69288: LD_INT 3
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 0
69298: PUSH
69299: LD_INT 3
69301: NEG
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 1
69309: PUSH
69310: LD_INT 2
69312: NEG
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: LIST
69322: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69323: LD_ADDR_VAR 0 54
69327: PUSH
69328: LD_INT 2
69330: PUSH
69331: LD_INT 1
69333: NEG
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 3
69341: PUSH
69342: LD_INT 0
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 3
69351: PUSH
69352: LD_INT 1
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: LIST
69363: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69364: LD_ADDR_VAR 0 55
69368: PUSH
69369: LD_INT 3
69371: PUSH
69372: LD_INT 2
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 3
69381: PUSH
69382: LD_INT 3
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 2
69391: PUSH
69392: LD_INT 3
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: LIST
69403: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69404: LD_ADDR_VAR 0 56
69408: PUSH
69409: LD_INT 1
69411: PUSH
69412: LD_INT 3
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 0
69421: PUSH
69422: LD_INT 3
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 1
69431: NEG
69432: PUSH
69433: LD_INT 2
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: LIST
69444: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69445: LD_ADDR_VAR 0 57
69449: PUSH
69450: LD_INT 2
69452: NEG
69453: PUSH
69454: LD_INT 1
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 3
69463: NEG
69464: PUSH
69465: LD_INT 0
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 3
69474: NEG
69475: PUSH
69476: LD_INT 1
69478: NEG
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: LIST
69488: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69489: LD_ADDR_VAR 0 58
69493: PUSH
69494: LD_INT 2
69496: NEG
69497: PUSH
69498: LD_INT 3
69500: NEG
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 3
69508: NEG
69509: PUSH
69510: LD_INT 2
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 3
69520: NEG
69521: PUSH
69522: LD_INT 3
69524: NEG
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: LIST
69534: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69535: LD_ADDR_VAR 0 59
69539: PUSH
69540: LD_INT 1
69542: NEG
69543: PUSH
69544: LD_INT 2
69546: NEG
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 0
69554: PUSH
69555: LD_INT 2
69557: NEG
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 1
69565: PUSH
69566: LD_INT 1
69568: NEG
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: LIST
69578: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69579: LD_ADDR_VAR 0 60
69583: PUSH
69584: LD_INT 1
69586: PUSH
69587: LD_INT 1
69589: NEG
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 2
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 2
69607: PUSH
69608: LD_INT 1
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: LIST
69619: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69620: LD_ADDR_VAR 0 61
69624: PUSH
69625: LD_INT 2
69627: PUSH
69628: LD_INT 1
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 2
69637: PUSH
69638: LD_INT 2
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 1
69647: PUSH
69648: LD_INT 2
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: LIST
69659: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69660: LD_ADDR_VAR 0 62
69664: PUSH
69665: LD_INT 1
69667: PUSH
69668: LD_INT 2
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 0
69677: PUSH
69678: LD_INT 2
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 1
69687: NEG
69688: PUSH
69689: LD_INT 1
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: LIST
69700: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69701: LD_ADDR_VAR 0 63
69705: PUSH
69706: LD_INT 1
69708: NEG
69709: PUSH
69710: LD_INT 1
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 2
69719: NEG
69720: PUSH
69721: LD_INT 0
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 2
69730: NEG
69731: PUSH
69732: LD_INT 1
69734: NEG
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: LIST
69744: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69745: LD_ADDR_VAR 0 64
69749: PUSH
69750: LD_INT 1
69752: NEG
69753: PUSH
69754: LD_INT 2
69756: NEG
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 2
69764: NEG
69765: PUSH
69766: LD_INT 1
69768: NEG
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 2
69776: NEG
69777: PUSH
69778: LD_INT 2
69780: NEG
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: LIST
69790: ST_TO_ADDR
// end ; 2 :
69791: GO 73057
69793: LD_INT 2
69795: DOUBLE
69796: EQUAL
69797: IFTRUE 69801
69799: GO 73056
69801: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69802: LD_ADDR_VAR 0 29
69806: PUSH
69807: LD_INT 4
69809: PUSH
69810: LD_INT 0
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 4
69819: PUSH
69820: LD_INT 1
69822: NEG
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 5
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 5
69840: PUSH
69841: LD_INT 1
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 4
69850: PUSH
69851: LD_INT 1
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 3
69860: PUSH
69861: LD_INT 0
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 3
69870: PUSH
69871: LD_INT 1
69873: NEG
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 3
69881: PUSH
69882: LD_INT 2
69884: NEG
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 5
69892: PUSH
69893: LD_INT 2
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 3
69902: PUSH
69903: LD_INT 3
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 3
69912: PUSH
69913: LD_INT 2
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 4
69922: PUSH
69923: LD_INT 3
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 4
69932: PUSH
69933: LD_INT 4
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 3
69942: PUSH
69943: LD_INT 4
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 2
69952: PUSH
69953: LD_INT 3
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 2
69962: PUSH
69963: LD_INT 2
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 4
69972: PUSH
69973: LD_INT 2
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 2
69982: PUSH
69983: LD_INT 4
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 0
69992: PUSH
69993: LD_INT 4
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 0
70002: PUSH
70003: LD_INT 3
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 1
70012: PUSH
70013: LD_INT 4
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 1
70022: PUSH
70023: LD_INT 5
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 0
70032: PUSH
70033: LD_INT 5
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 1
70042: NEG
70043: PUSH
70044: LD_INT 4
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 1
70053: NEG
70054: PUSH
70055: LD_INT 3
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 2
70064: PUSH
70065: LD_INT 5
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 2
70074: NEG
70075: PUSH
70076: LD_INT 3
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 3
70085: NEG
70086: PUSH
70087: LD_INT 0
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 3
70096: NEG
70097: PUSH
70098: LD_INT 1
70100: NEG
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 2
70108: NEG
70109: PUSH
70110: LD_INT 0
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 2
70119: NEG
70120: PUSH
70121: LD_INT 1
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 3
70130: NEG
70131: PUSH
70132: LD_INT 1
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 4
70141: NEG
70142: PUSH
70143: LD_INT 0
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 4
70152: NEG
70153: PUSH
70154: LD_INT 1
70156: NEG
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 4
70164: NEG
70165: PUSH
70166: LD_INT 2
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 2
70176: NEG
70177: PUSH
70178: LD_INT 2
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 4
70187: NEG
70188: PUSH
70189: LD_INT 4
70191: NEG
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 4
70199: NEG
70200: PUSH
70201: LD_INT 5
70203: NEG
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 3
70211: NEG
70212: PUSH
70213: LD_INT 4
70215: NEG
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 3
70223: NEG
70224: PUSH
70225: LD_INT 3
70227: NEG
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 4
70235: NEG
70236: PUSH
70237: LD_INT 3
70239: NEG
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 5
70247: NEG
70248: PUSH
70249: LD_INT 4
70251: NEG
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 5
70259: NEG
70260: PUSH
70261: LD_INT 5
70263: NEG
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 3
70271: NEG
70272: PUSH
70273: LD_INT 5
70275: NEG
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 5
70283: NEG
70284: PUSH
70285: LD_INT 3
70287: NEG
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70340: LD_ADDR_VAR 0 30
70344: PUSH
70345: LD_INT 4
70347: PUSH
70348: LD_INT 4
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 4
70357: PUSH
70358: LD_INT 3
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 5
70367: PUSH
70368: LD_INT 4
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 5
70377: PUSH
70378: LD_INT 5
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 4
70387: PUSH
70388: LD_INT 5
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 3
70397: PUSH
70398: LD_INT 4
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 3
70407: PUSH
70408: LD_INT 3
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 5
70417: PUSH
70418: LD_INT 3
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 3
70427: PUSH
70428: LD_INT 5
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 0
70437: PUSH
70438: LD_INT 3
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 0
70447: PUSH
70448: LD_INT 2
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 1
70457: PUSH
70458: LD_INT 3
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 1
70467: PUSH
70468: LD_INT 4
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 0
70477: PUSH
70478: LD_INT 4
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 1
70487: NEG
70488: PUSH
70489: LD_INT 3
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: LD_INT 1
70498: NEG
70499: PUSH
70500: LD_INT 2
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 2
70509: PUSH
70510: LD_INT 4
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 2
70519: NEG
70520: PUSH
70521: LD_INT 2
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 4
70530: NEG
70531: PUSH
70532: LD_INT 0
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 4
70541: NEG
70542: PUSH
70543: LD_INT 1
70545: NEG
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 3
70553: NEG
70554: PUSH
70555: LD_INT 0
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 3
70564: NEG
70565: PUSH
70566: LD_INT 1
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 4
70575: NEG
70576: PUSH
70577: LD_INT 1
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 5
70586: NEG
70587: PUSH
70588: LD_INT 0
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 5
70597: NEG
70598: PUSH
70599: LD_INT 1
70601: NEG
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 5
70609: NEG
70610: PUSH
70611: LD_INT 2
70613: NEG
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 3
70621: NEG
70622: PUSH
70623: LD_INT 2
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 3
70632: NEG
70633: PUSH
70634: LD_INT 3
70636: NEG
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 3
70644: NEG
70645: PUSH
70646: LD_INT 4
70648: NEG
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 2
70656: NEG
70657: PUSH
70658: LD_INT 3
70660: NEG
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 2
70668: NEG
70669: PUSH
70670: LD_INT 2
70672: NEG
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 3
70680: NEG
70681: PUSH
70682: LD_INT 2
70684: NEG
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 4
70692: NEG
70693: PUSH
70694: LD_INT 3
70696: NEG
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 4
70704: NEG
70705: PUSH
70706: LD_INT 4
70708: NEG
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 2
70716: NEG
70717: PUSH
70718: LD_INT 4
70720: NEG
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 4
70728: NEG
70729: PUSH
70730: LD_INT 2
70732: NEG
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 0
70740: PUSH
70741: LD_INT 4
70743: NEG
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: LD_INT 5
70754: NEG
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 1
70762: PUSH
70763: LD_INT 4
70765: NEG
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: LD_INT 1
70773: PUSH
70774: LD_INT 3
70776: NEG
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: LD_INT 3
70787: NEG
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 1
70795: NEG
70796: PUSH
70797: LD_INT 4
70799: NEG
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 1
70807: NEG
70808: PUSH
70809: LD_INT 5
70811: NEG
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 2
70819: PUSH
70820: LD_INT 3
70822: NEG
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: LD_INT 2
70830: NEG
70831: PUSH
70832: LD_INT 5
70834: NEG
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70887: LD_ADDR_VAR 0 31
70891: PUSH
70892: LD_INT 0
70894: PUSH
70895: LD_INT 4
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 0
70904: PUSH
70905: LD_INT 3
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 1
70914: PUSH
70915: LD_INT 4
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 1
70924: PUSH
70925: LD_INT 5
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: LD_INT 5
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 1
70944: NEG
70945: PUSH
70946: LD_INT 4
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 1
70955: NEG
70956: PUSH
70957: LD_INT 3
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 2
70966: PUSH
70967: LD_INT 5
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 2
70976: NEG
70977: PUSH
70978: LD_INT 3
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 3
70987: NEG
70988: PUSH
70989: LD_INT 0
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 3
70998: NEG
70999: PUSH
71000: LD_INT 1
71002: NEG
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 2
71010: NEG
71011: PUSH
71012: LD_INT 0
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 2
71021: NEG
71022: PUSH
71023: LD_INT 1
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 3
71032: NEG
71033: PUSH
71034: LD_INT 1
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 4
71043: NEG
71044: PUSH
71045: LD_INT 0
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 4
71054: NEG
71055: PUSH
71056: LD_INT 1
71058: NEG
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 4
71066: NEG
71067: PUSH
71068: LD_INT 2
71070: NEG
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 2
71078: NEG
71079: PUSH
71080: LD_INT 2
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 4
71089: NEG
71090: PUSH
71091: LD_INT 4
71093: NEG
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: LD_INT 4
71101: NEG
71102: PUSH
71103: LD_INT 5
71105: NEG
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 3
71113: NEG
71114: PUSH
71115: LD_INT 4
71117: NEG
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: LD_INT 3
71125: NEG
71126: PUSH
71127: LD_INT 3
71129: NEG
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 4
71137: NEG
71138: PUSH
71139: LD_INT 3
71141: NEG
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 5
71149: NEG
71150: PUSH
71151: LD_INT 4
71153: NEG
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 5
71161: NEG
71162: PUSH
71163: LD_INT 5
71165: NEG
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 3
71173: NEG
71174: PUSH
71175: LD_INT 5
71177: NEG
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 5
71185: NEG
71186: PUSH
71187: LD_INT 3
71189: NEG
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: LD_INT 3
71200: NEG
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 0
71208: PUSH
71209: LD_INT 4
71211: NEG
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 1
71219: PUSH
71220: LD_INT 3
71222: NEG
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 1
71230: PUSH
71231: LD_INT 2
71233: NEG
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 0
71241: PUSH
71242: LD_INT 2
71244: NEG
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 1
71252: NEG
71253: PUSH
71254: LD_INT 3
71256: NEG
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 1
71264: NEG
71265: PUSH
71266: LD_INT 4
71268: NEG
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 2
71276: PUSH
71277: LD_INT 2
71279: NEG
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_INT 2
71287: NEG
71288: PUSH
71289: LD_INT 4
71291: NEG
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 4
71299: PUSH
71300: LD_INT 0
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 4
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 5
71320: PUSH
71321: LD_INT 0
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 5
71330: PUSH
71331: LD_INT 1
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 4
71340: PUSH
71341: LD_INT 1
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 3
71350: PUSH
71351: LD_INT 0
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 3
71360: PUSH
71361: LD_INT 1
71363: NEG
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 3
71371: PUSH
71372: LD_INT 2
71374: NEG
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 5
71382: PUSH
71383: LD_INT 2
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71437: LD_ADDR_VAR 0 32
71441: PUSH
71442: LD_INT 4
71444: NEG
71445: PUSH
71446: LD_INT 0
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 4
71455: NEG
71456: PUSH
71457: LD_INT 1
71459: NEG
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 3
71467: NEG
71468: PUSH
71469: LD_INT 0
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 3
71478: NEG
71479: PUSH
71480: LD_INT 1
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 4
71489: NEG
71490: PUSH
71491: LD_INT 1
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 5
71500: NEG
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 5
71511: NEG
71512: PUSH
71513: LD_INT 1
71515: NEG
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 5
71523: NEG
71524: PUSH
71525: LD_INT 2
71527: NEG
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 3
71535: NEG
71536: PUSH
71537: LD_INT 2
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: LD_INT 3
71546: NEG
71547: PUSH
71548: LD_INT 3
71550: NEG
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 3
71558: NEG
71559: PUSH
71560: LD_INT 4
71562: NEG
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: PUSH
71568: LD_INT 2
71570: NEG
71571: PUSH
71572: LD_INT 3
71574: NEG
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: PUSH
71580: LD_INT 2
71582: NEG
71583: PUSH
71584: LD_INT 2
71586: NEG
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: LD_INT 3
71594: NEG
71595: PUSH
71596: LD_INT 2
71598: NEG
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 4
71606: NEG
71607: PUSH
71608: LD_INT 3
71610: NEG
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 4
71618: NEG
71619: PUSH
71620: LD_INT 4
71622: NEG
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 2
71630: NEG
71631: PUSH
71632: LD_INT 4
71634: NEG
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 4
71642: NEG
71643: PUSH
71644: LD_INT 2
71646: NEG
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: PUSH
71652: LD_INT 0
71654: PUSH
71655: LD_INT 4
71657: NEG
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: PUSH
71663: LD_INT 0
71665: PUSH
71666: LD_INT 5
71668: NEG
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 1
71676: PUSH
71677: LD_INT 4
71679: NEG
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 1
71687: PUSH
71688: LD_INT 3
71690: NEG
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 0
71698: PUSH
71699: LD_INT 3
71701: NEG
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 1
71709: NEG
71710: PUSH
71711: LD_INT 4
71713: NEG
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 1
71721: NEG
71722: PUSH
71723: LD_INT 5
71725: NEG
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 2
71733: PUSH
71734: LD_INT 3
71736: NEG
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 2
71744: NEG
71745: PUSH
71746: LD_INT 5
71748: NEG
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 3
71756: PUSH
71757: LD_INT 0
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 3
71766: PUSH
71767: LD_INT 1
71769: NEG
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 4
71777: PUSH
71778: LD_INT 0
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 4
71787: PUSH
71788: LD_INT 1
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 3
71797: PUSH
71798: LD_INT 1
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 2
71807: PUSH
71808: LD_INT 0
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_INT 2
71817: PUSH
71818: LD_INT 1
71820: NEG
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 2
71828: PUSH
71829: LD_INT 2
71831: NEG
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 4
71839: PUSH
71840: LD_INT 2
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 4
71849: PUSH
71850: LD_INT 4
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 4
71859: PUSH
71860: LD_INT 3
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 5
71869: PUSH
71870: LD_INT 4
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 5
71879: PUSH
71880: LD_INT 5
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 4
71889: PUSH
71890: LD_INT 5
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 3
71899: PUSH
71900: LD_INT 4
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PUSH
71907: LD_INT 3
71909: PUSH
71910: LD_INT 3
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 5
71919: PUSH
71920: LD_INT 3
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 3
71929: PUSH
71930: LD_INT 5
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71984: LD_ADDR_VAR 0 33
71988: PUSH
71989: LD_INT 4
71991: NEG
71992: PUSH
71993: LD_INT 4
71995: NEG
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 4
72003: NEG
72004: PUSH
72005: LD_INT 5
72007: NEG
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 3
72015: NEG
72016: PUSH
72017: LD_INT 4
72019: NEG
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 3
72027: NEG
72028: PUSH
72029: LD_INT 3
72031: NEG
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 4
72039: NEG
72040: PUSH
72041: LD_INT 3
72043: NEG
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 5
72051: NEG
72052: PUSH
72053: LD_INT 4
72055: NEG
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 5
72063: NEG
72064: PUSH
72065: LD_INT 5
72067: NEG
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 3
72075: NEG
72076: PUSH
72077: LD_INT 5
72079: NEG
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: LD_INT 5
72087: NEG
72088: PUSH
72089: LD_INT 3
72091: NEG
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 0
72099: PUSH
72100: LD_INT 3
72102: NEG
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: LD_INT 0
72110: PUSH
72111: LD_INT 4
72113: NEG
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 1
72121: PUSH
72122: LD_INT 3
72124: NEG
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 1
72132: PUSH
72133: LD_INT 2
72135: NEG
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 0
72143: PUSH
72144: LD_INT 2
72146: NEG
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 1
72154: NEG
72155: PUSH
72156: LD_INT 3
72158: NEG
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 1
72166: NEG
72167: PUSH
72168: LD_INT 4
72170: NEG
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 2
72178: PUSH
72179: LD_INT 2
72181: NEG
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 2
72189: NEG
72190: PUSH
72191: LD_INT 4
72193: NEG
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: PUSH
72199: LD_INT 4
72201: PUSH
72202: LD_INT 0
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 4
72211: PUSH
72212: LD_INT 1
72214: NEG
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 5
72222: PUSH
72223: LD_INT 0
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 5
72232: PUSH
72233: LD_INT 1
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: PUSH
72240: LD_INT 4
72242: PUSH
72243: LD_INT 1
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 3
72252: PUSH
72253: LD_INT 0
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 3
72262: PUSH
72263: LD_INT 1
72265: NEG
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PUSH
72271: LD_INT 3
72273: PUSH
72274: LD_INT 2
72276: NEG
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: LD_INT 5
72284: PUSH
72285: LD_INT 2
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 3
72294: PUSH
72295: LD_INT 3
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 3
72304: PUSH
72305: LD_INT 2
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PUSH
72312: LD_INT 4
72314: PUSH
72315: LD_INT 3
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 4
72324: PUSH
72325: LD_INT 4
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 3
72334: PUSH
72335: LD_INT 4
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: PUSH
72342: LD_INT 2
72344: PUSH
72345: LD_INT 3
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: PUSH
72352: LD_INT 2
72354: PUSH
72355: LD_INT 2
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 4
72364: PUSH
72365: LD_INT 2
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 2
72374: PUSH
72375: LD_INT 4
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 0
72384: PUSH
72385: LD_INT 4
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: PUSH
72392: LD_INT 0
72394: PUSH
72395: LD_INT 3
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 1
72404: PUSH
72405: LD_INT 4
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 1
72414: PUSH
72415: LD_INT 5
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 0
72424: PUSH
72425: LD_INT 5
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 1
72434: NEG
72435: PUSH
72436: LD_INT 4
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: PUSH
72443: LD_INT 1
72445: NEG
72446: PUSH
72447: LD_INT 3
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 2
72456: PUSH
72457: LD_INT 5
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 2
72466: NEG
72467: PUSH
72468: LD_INT 3
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72522: LD_ADDR_VAR 0 34
72526: PUSH
72527: LD_INT 0
72529: PUSH
72530: LD_INT 4
72532: NEG
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 0
72540: PUSH
72541: LD_INT 5
72543: NEG
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 1
72551: PUSH
72552: LD_INT 4
72554: NEG
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 1
72562: PUSH
72563: LD_INT 3
72565: NEG
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 0
72573: PUSH
72574: LD_INT 3
72576: NEG
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: PUSH
72582: LD_INT 1
72584: NEG
72585: PUSH
72586: LD_INT 4
72588: NEG
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 1
72596: NEG
72597: PUSH
72598: LD_INT 5
72600: NEG
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 2
72608: PUSH
72609: LD_INT 3
72611: NEG
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 2
72619: NEG
72620: PUSH
72621: LD_INT 5
72623: NEG
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 3
72631: PUSH
72632: LD_INT 0
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 3
72641: PUSH
72642: LD_INT 1
72644: NEG
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 4
72652: PUSH
72653: LD_INT 0
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 4
72662: PUSH
72663: LD_INT 1
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: LD_INT 3
72672: PUSH
72673: LD_INT 1
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: LD_INT 2
72682: PUSH
72683: LD_INT 0
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 2
72692: PUSH
72693: LD_INT 1
72695: NEG
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 2
72703: PUSH
72704: LD_INT 2
72706: NEG
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: LD_INT 4
72714: PUSH
72715: LD_INT 2
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: PUSH
72722: LD_INT 4
72724: PUSH
72725: LD_INT 4
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 4
72734: PUSH
72735: LD_INT 3
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: PUSH
72742: LD_INT 5
72744: PUSH
72745: LD_INT 4
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 5
72754: PUSH
72755: LD_INT 5
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 4
72764: PUSH
72765: LD_INT 5
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 3
72774: PUSH
72775: LD_INT 4
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: PUSH
72782: LD_INT 3
72784: PUSH
72785: LD_INT 3
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 5
72794: PUSH
72795: LD_INT 3
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 3
72804: PUSH
72805: LD_INT 5
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_INT 0
72814: PUSH
72815: LD_INT 3
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 0
72824: PUSH
72825: LD_INT 2
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PUSH
72832: LD_INT 1
72834: PUSH
72835: LD_INT 3
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: LD_INT 1
72844: PUSH
72845: LD_INT 4
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 0
72854: PUSH
72855: LD_INT 4
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: LD_INT 1
72864: NEG
72865: PUSH
72866: LD_INT 3
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PUSH
72873: LD_INT 1
72875: NEG
72876: PUSH
72877: LD_INT 2
72879: PUSH
72880: EMPTY
72881: LIST
72882: LIST
72883: PUSH
72884: LD_INT 2
72886: PUSH
72887: LD_INT 4
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: PUSH
72894: LD_INT 2
72896: NEG
72897: PUSH
72898: LD_INT 2
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 4
72907: NEG
72908: PUSH
72909: LD_INT 0
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PUSH
72916: LD_INT 4
72918: NEG
72919: PUSH
72920: LD_INT 1
72922: NEG
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 3
72930: NEG
72931: PUSH
72932: LD_INT 0
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: LD_INT 3
72941: NEG
72942: PUSH
72943: LD_INT 1
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PUSH
72950: LD_INT 4
72952: NEG
72953: PUSH
72954: LD_INT 1
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 5
72963: NEG
72964: PUSH
72965: LD_INT 0
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 5
72974: NEG
72975: PUSH
72976: LD_INT 1
72978: NEG
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 5
72986: NEG
72987: PUSH
72988: LD_INT 2
72990: NEG
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_INT 3
72998: NEG
72999: PUSH
73000: LD_INT 2
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: ST_TO_ADDR
// end ; end ;
73054: GO 73057
73056: POP
// case btype of b_depot , b_warehouse :
73057: LD_VAR 0 1
73061: PUSH
73062: LD_INT 0
73064: DOUBLE
73065: EQUAL
73066: IFTRUE 73076
73068: LD_INT 1
73070: DOUBLE
73071: EQUAL
73072: IFTRUE 73076
73074: GO 73277
73076: POP
// case nation of nation_american :
73077: LD_VAR 0 5
73081: PUSH
73082: LD_INT 1
73084: DOUBLE
73085: EQUAL
73086: IFTRUE 73090
73088: GO 73146
73090: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73091: LD_ADDR_VAR 0 9
73095: PUSH
73096: LD_VAR 0 11
73100: PUSH
73101: LD_VAR 0 12
73105: PUSH
73106: LD_VAR 0 13
73110: PUSH
73111: LD_VAR 0 14
73115: PUSH
73116: LD_VAR 0 15
73120: PUSH
73121: LD_VAR 0 16
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: PUSH
73134: LD_VAR 0 4
73138: PUSH
73139: LD_INT 1
73141: PLUS
73142: ARRAY
73143: ST_TO_ADDR
73144: GO 73275
73146: LD_INT 2
73148: DOUBLE
73149: EQUAL
73150: IFTRUE 73154
73152: GO 73210
73154: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73155: LD_ADDR_VAR 0 9
73159: PUSH
73160: LD_VAR 0 17
73164: PUSH
73165: LD_VAR 0 18
73169: PUSH
73170: LD_VAR 0 19
73174: PUSH
73175: LD_VAR 0 20
73179: PUSH
73180: LD_VAR 0 21
73184: PUSH
73185: LD_VAR 0 22
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: PUSH
73198: LD_VAR 0 4
73202: PUSH
73203: LD_INT 1
73205: PLUS
73206: ARRAY
73207: ST_TO_ADDR
73208: GO 73275
73210: LD_INT 3
73212: DOUBLE
73213: EQUAL
73214: IFTRUE 73218
73216: GO 73274
73218: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73219: LD_ADDR_VAR 0 9
73223: PUSH
73224: LD_VAR 0 23
73228: PUSH
73229: LD_VAR 0 24
73233: PUSH
73234: LD_VAR 0 25
73238: PUSH
73239: LD_VAR 0 26
73243: PUSH
73244: LD_VAR 0 27
73248: PUSH
73249: LD_VAR 0 28
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: PUSH
73262: LD_VAR 0 4
73266: PUSH
73267: LD_INT 1
73269: PLUS
73270: ARRAY
73271: ST_TO_ADDR
73272: GO 73275
73274: POP
73275: GO 73830
73277: LD_INT 2
73279: DOUBLE
73280: EQUAL
73281: IFTRUE 73291
73283: LD_INT 3
73285: DOUBLE
73286: EQUAL
73287: IFTRUE 73291
73289: GO 73347
73291: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73292: LD_ADDR_VAR 0 9
73296: PUSH
73297: LD_VAR 0 29
73301: PUSH
73302: LD_VAR 0 30
73306: PUSH
73307: LD_VAR 0 31
73311: PUSH
73312: LD_VAR 0 32
73316: PUSH
73317: LD_VAR 0 33
73321: PUSH
73322: LD_VAR 0 34
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: PUSH
73335: LD_VAR 0 4
73339: PUSH
73340: LD_INT 1
73342: PLUS
73343: ARRAY
73344: ST_TO_ADDR
73345: GO 73830
73347: LD_INT 16
73349: DOUBLE
73350: EQUAL
73351: IFTRUE 73409
73353: LD_INT 17
73355: DOUBLE
73356: EQUAL
73357: IFTRUE 73409
73359: LD_INT 18
73361: DOUBLE
73362: EQUAL
73363: IFTRUE 73409
73365: LD_INT 19
73367: DOUBLE
73368: EQUAL
73369: IFTRUE 73409
73371: LD_INT 22
73373: DOUBLE
73374: EQUAL
73375: IFTRUE 73409
73377: LD_INT 20
73379: DOUBLE
73380: EQUAL
73381: IFTRUE 73409
73383: LD_INT 21
73385: DOUBLE
73386: EQUAL
73387: IFTRUE 73409
73389: LD_INT 23
73391: DOUBLE
73392: EQUAL
73393: IFTRUE 73409
73395: LD_INT 24
73397: DOUBLE
73398: EQUAL
73399: IFTRUE 73409
73401: LD_INT 25
73403: DOUBLE
73404: EQUAL
73405: IFTRUE 73409
73407: GO 73465
73409: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73410: LD_ADDR_VAR 0 9
73414: PUSH
73415: LD_VAR 0 35
73419: PUSH
73420: LD_VAR 0 36
73424: PUSH
73425: LD_VAR 0 37
73429: PUSH
73430: LD_VAR 0 38
73434: PUSH
73435: LD_VAR 0 39
73439: PUSH
73440: LD_VAR 0 40
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: PUSH
73453: LD_VAR 0 4
73457: PUSH
73458: LD_INT 1
73460: PLUS
73461: ARRAY
73462: ST_TO_ADDR
73463: GO 73830
73465: LD_INT 6
73467: DOUBLE
73468: EQUAL
73469: IFTRUE 73521
73471: LD_INT 7
73473: DOUBLE
73474: EQUAL
73475: IFTRUE 73521
73477: LD_INT 8
73479: DOUBLE
73480: EQUAL
73481: IFTRUE 73521
73483: LD_INT 13
73485: DOUBLE
73486: EQUAL
73487: IFTRUE 73521
73489: LD_INT 12
73491: DOUBLE
73492: EQUAL
73493: IFTRUE 73521
73495: LD_INT 15
73497: DOUBLE
73498: EQUAL
73499: IFTRUE 73521
73501: LD_INT 11
73503: DOUBLE
73504: EQUAL
73505: IFTRUE 73521
73507: LD_INT 14
73509: DOUBLE
73510: EQUAL
73511: IFTRUE 73521
73513: LD_INT 10
73515: DOUBLE
73516: EQUAL
73517: IFTRUE 73521
73519: GO 73577
73521: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73522: LD_ADDR_VAR 0 9
73526: PUSH
73527: LD_VAR 0 41
73531: PUSH
73532: LD_VAR 0 42
73536: PUSH
73537: LD_VAR 0 43
73541: PUSH
73542: LD_VAR 0 44
73546: PUSH
73547: LD_VAR 0 45
73551: PUSH
73552: LD_VAR 0 46
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: PUSH
73565: LD_VAR 0 4
73569: PUSH
73570: LD_INT 1
73572: PLUS
73573: ARRAY
73574: ST_TO_ADDR
73575: GO 73830
73577: LD_INT 36
73579: DOUBLE
73580: EQUAL
73581: IFTRUE 73585
73583: GO 73641
73585: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73586: LD_ADDR_VAR 0 9
73590: PUSH
73591: LD_VAR 0 47
73595: PUSH
73596: LD_VAR 0 48
73600: PUSH
73601: LD_VAR 0 49
73605: PUSH
73606: LD_VAR 0 50
73610: PUSH
73611: LD_VAR 0 51
73615: PUSH
73616: LD_VAR 0 52
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: LIST
73625: LIST
73626: LIST
73627: LIST
73628: PUSH
73629: LD_VAR 0 4
73633: PUSH
73634: LD_INT 1
73636: PLUS
73637: ARRAY
73638: ST_TO_ADDR
73639: GO 73830
73641: LD_INT 4
73643: DOUBLE
73644: EQUAL
73645: IFTRUE 73667
73647: LD_INT 5
73649: DOUBLE
73650: EQUAL
73651: IFTRUE 73667
73653: LD_INT 34
73655: DOUBLE
73656: EQUAL
73657: IFTRUE 73667
73659: LD_INT 37
73661: DOUBLE
73662: EQUAL
73663: IFTRUE 73667
73665: GO 73723
73667: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73668: LD_ADDR_VAR 0 9
73672: PUSH
73673: LD_VAR 0 53
73677: PUSH
73678: LD_VAR 0 54
73682: PUSH
73683: LD_VAR 0 55
73687: PUSH
73688: LD_VAR 0 56
73692: PUSH
73693: LD_VAR 0 57
73697: PUSH
73698: LD_VAR 0 58
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: PUSH
73711: LD_VAR 0 4
73715: PUSH
73716: LD_INT 1
73718: PLUS
73719: ARRAY
73720: ST_TO_ADDR
73721: GO 73830
73723: LD_INT 31
73725: DOUBLE
73726: EQUAL
73727: IFTRUE 73773
73729: LD_INT 32
73731: DOUBLE
73732: EQUAL
73733: IFTRUE 73773
73735: LD_INT 33
73737: DOUBLE
73738: EQUAL
73739: IFTRUE 73773
73741: LD_INT 27
73743: DOUBLE
73744: EQUAL
73745: IFTRUE 73773
73747: LD_INT 26
73749: DOUBLE
73750: EQUAL
73751: IFTRUE 73773
73753: LD_INT 28
73755: DOUBLE
73756: EQUAL
73757: IFTRUE 73773
73759: LD_INT 29
73761: DOUBLE
73762: EQUAL
73763: IFTRUE 73773
73765: LD_INT 30
73767: DOUBLE
73768: EQUAL
73769: IFTRUE 73773
73771: GO 73829
73773: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73774: LD_ADDR_VAR 0 9
73778: PUSH
73779: LD_VAR 0 59
73783: PUSH
73784: LD_VAR 0 60
73788: PUSH
73789: LD_VAR 0 61
73793: PUSH
73794: LD_VAR 0 62
73798: PUSH
73799: LD_VAR 0 63
73803: PUSH
73804: LD_VAR 0 64
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: PUSH
73817: LD_VAR 0 4
73821: PUSH
73822: LD_INT 1
73824: PLUS
73825: ARRAY
73826: ST_TO_ADDR
73827: GO 73830
73829: POP
// temp_list2 = [ ] ;
73830: LD_ADDR_VAR 0 10
73834: PUSH
73835: EMPTY
73836: ST_TO_ADDR
// for i in temp_list do
73837: LD_ADDR_VAR 0 8
73841: PUSH
73842: LD_VAR 0 9
73846: PUSH
73847: FOR_IN
73848: IFFALSE 73900
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73850: LD_ADDR_VAR 0 10
73854: PUSH
73855: LD_VAR 0 10
73859: PUSH
73860: LD_VAR 0 8
73864: PUSH
73865: LD_INT 1
73867: ARRAY
73868: PUSH
73869: LD_VAR 0 2
73873: PLUS
73874: PUSH
73875: LD_VAR 0 8
73879: PUSH
73880: LD_INT 2
73882: ARRAY
73883: PUSH
73884: LD_VAR 0 3
73888: PLUS
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: EMPTY
73895: LIST
73896: ADD
73897: ST_TO_ADDR
73898: GO 73847
73900: POP
73901: POP
// result = temp_list2 ;
73902: LD_ADDR_VAR 0 7
73906: PUSH
73907: LD_VAR 0 10
73911: ST_TO_ADDR
// end ;
73912: LD_VAR 0 7
73916: RET
// export function EnemyInRange ( unit , dist ) ; begin
73917: LD_INT 0
73919: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73920: LD_ADDR_VAR 0 3
73924: PUSH
73925: LD_VAR 0 1
73929: PPUSH
73930: CALL_OW 255
73934: PPUSH
73935: LD_VAR 0 1
73939: PPUSH
73940: CALL_OW 250
73944: PPUSH
73945: LD_VAR 0 1
73949: PPUSH
73950: CALL_OW 251
73954: PPUSH
73955: LD_VAR 0 2
73959: PPUSH
73960: CALL 47290 0 4
73964: PUSH
73965: LD_INT 4
73967: ARRAY
73968: ST_TO_ADDR
// end ;
73969: LD_VAR 0 3
73973: RET
// export function PlayerSeeMe ( unit ) ; begin
73974: LD_INT 0
73976: PPUSH
// result := See ( your_side , unit ) ;
73977: LD_ADDR_VAR 0 2
73981: PUSH
73982: LD_OWVAR 2
73986: PPUSH
73987: LD_VAR 0 1
73991: PPUSH
73992: CALL_OW 292
73996: ST_TO_ADDR
// end ;
73997: LD_VAR 0 2
74001: RET
// export function ReverseDir ( unit ) ; begin
74002: LD_INT 0
74004: PPUSH
// if not unit then
74005: LD_VAR 0 1
74009: NOT
74010: IFFALSE 74014
// exit ;
74012: GO 74037
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74014: LD_ADDR_VAR 0 2
74018: PUSH
74019: LD_VAR 0 1
74023: PPUSH
74024: CALL_OW 254
74028: PUSH
74029: LD_INT 3
74031: PLUS
74032: PUSH
74033: LD_INT 6
74035: MOD
74036: ST_TO_ADDR
// end ;
74037: LD_VAR 0 2
74041: RET
// export function ReverseArray ( array ) ; var i ; begin
74042: LD_INT 0
74044: PPUSH
74045: PPUSH
// if not array then
74046: LD_VAR 0 1
74050: NOT
74051: IFFALSE 74055
// exit ;
74053: GO 74110
// result := [ ] ;
74055: LD_ADDR_VAR 0 2
74059: PUSH
74060: EMPTY
74061: ST_TO_ADDR
// for i := array downto 1 do
74062: LD_ADDR_VAR 0 3
74066: PUSH
74067: DOUBLE
74068: LD_VAR 0 1
74072: INC
74073: ST_TO_ADDR
74074: LD_INT 1
74076: PUSH
74077: FOR_DOWNTO
74078: IFFALSE 74108
// result := Join ( result , array [ i ] ) ;
74080: LD_ADDR_VAR 0 2
74084: PUSH
74085: LD_VAR 0 2
74089: PPUSH
74090: LD_VAR 0 1
74094: PUSH
74095: LD_VAR 0 3
74099: ARRAY
74100: PPUSH
74101: CALL 78755 0 2
74105: ST_TO_ADDR
74106: GO 74077
74108: POP
74109: POP
// end ;
74110: LD_VAR 0 2
74114: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74115: LD_INT 0
74117: PPUSH
74118: PPUSH
74119: PPUSH
74120: PPUSH
74121: PPUSH
74122: PPUSH
// if not unit or not hexes then
74123: LD_VAR 0 1
74127: NOT
74128: PUSH
74129: LD_VAR 0 2
74133: NOT
74134: OR
74135: IFFALSE 74139
// exit ;
74137: GO 74262
// dist := 9999 ;
74139: LD_ADDR_VAR 0 5
74143: PUSH
74144: LD_INT 9999
74146: ST_TO_ADDR
// for i = 1 to hexes do
74147: LD_ADDR_VAR 0 4
74151: PUSH
74152: DOUBLE
74153: LD_INT 1
74155: DEC
74156: ST_TO_ADDR
74157: LD_VAR 0 2
74161: PUSH
74162: FOR_TO
74163: IFFALSE 74250
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74165: LD_ADDR_VAR 0 6
74169: PUSH
74170: LD_VAR 0 1
74174: PPUSH
74175: LD_VAR 0 2
74179: PUSH
74180: LD_VAR 0 4
74184: ARRAY
74185: PUSH
74186: LD_INT 1
74188: ARRAY
74189: PPUSH
74190: LD_VAR 0 2
74194: PUSH
74195: LD_VAR 0 4
74199: ARRAY
74200: PUSH
74201: LD_INT 2
74203: ARRAY
74204: PPUSH
74205: CALL_OW 297
74209: ST_TO_ADDR
// if tdist < dist then
74210: LD_VAR 0 6
74214: PUSH
74215: LD_VAR 0 5
74219: LESS
74220: IFFALSE 74248
// begin hex := hexes [ i ] ;
74222: LD_ADDR_VAR 0 8
74226: PUSH
74227: LD_VAR 0 2
74231: PUSH
74232: LD_VAR 0 4
74236: ARRAY
74237: ST_TO_ADDR
// dist := tdist ;
74238: LD_ADDR_VAR 0 5
74242: PUSH
74243: LD_VAR 0 6
74247: ST_TO_ADDR
// end ; end ;
74248: GO 74162
74250: POP
74251: POP
// result := hex ;
74252: LD_ADDR_VAR 0 3
74256: PUSH
74257: LD_VAR 0 8
74261: ST_TO_ADDR
// end ;
74262: LD_VAR 0 3
74266: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74267: LD_INT 0
74269: PPUSH
74270: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74271: LD_VAR 0 1
74275: NOT
74276: PUSH
74277: LD_VAR 0 1
74281: PUSH
74282: LD_INT 21
74284: PUSH
74285: LD_INT 2
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_INT 23
74294: PUSH
74295: LD_INT 2
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: PPUSH
74306: CALL_OW 69
74310: IN
74311: NOT
74312: OR
74313: IFFALSE 74317
// exit ;
74315: GO 74364
// for i = 1 to 3 do
74317: LD_ADDR_VAR 0 3
74321: PUSH
74322: DOUBLE
74323: LD_INT 1
74325: DEC
74326: ST_TO_ADDR
74327: LD_INT 3
74329: PUSH
74330: FOR_TO
74331: IFFALSE 74362
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74333: LD_VAR 0 1
74337: PPUSH
74338: CALL_OW 250
74342: PPUSH
74343: LD_VAR 0 1
74347: PPUSH
74348: CALL_OW 251
74352: PPUSH
74353: LD_INT 1
74355: PPUSH
74356: CALL_OW 453
74360: GO 74330
74362: POP
74363: POP
// end ;
74364: LD_VAR 0 2
74368: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74369: LD_INT 0
74371: PPUSH
74372: PPUSH
74373: PPUSH
74374: PPUSH
74375: PPUSH
74376: PPUSH
// if not unit or not enemy_unit then
74377: LD_VAR 0 1
74381: NOT
74382: PUSH
74383: LD_VAR 0 2
74387: NOT
74388: OR
74389: IFFALSE 74393
// exit ;
74391: GO 74860
// if GetLives ( i ) < 250 then
74393: LD_VAR 0 4
74397: PPUSH
74398: CALL_OW 256
74402: PUSH
74403: LD_INT 250
74405: LESS
74406: IFFALSE 74419
// begin ComAutodestruct ( i ) ;
74408: LD_VAR 0 4
74412: PPUSH
74413: CALL 74267 0 1
// exit ;
74417: GO 74860
// end ; x := GetX ( enemy_unit ) ;
74419: LD_ADDR_VAR 0 7
74423: PUSH
74424: LD_VAR 0 2
74428: PPUSH
74429: CALL_OW 250
74433: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74434: LD_ADDR_VAR 0 8
74438: PUSH
74439: LD_VAR 0 2
74443: PPUSH
74444: CALL_OW 251
74448: ST_TO_ADDR
// if not x or not y then
74449: LD_VAR 0 7
74453: NOT
74454: PUSH
74455: LD_VAR 0 8
74459: NOT
74460: OR
74461: IFFALSE 74465
// exit ;
74463: GO 74860
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74465: LD_ADDR_VAR 0 6
74469: PUSH
74470: LD_VAR 0 7
74474: PPUSH
74475: LD_INT 0
74477: PPUSH
74478: LD_INT 4
74480: PPUSH
74481: CALL_OW 272
74485: PUSH
74486: LD_VAR 0 8
74490: PPUSH
74491: LD_INT 0
74493: PPUSH
74494: LD_INT 4
74496: PPUSH
74497: CALL_OW 273
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: LD_VAR 0 7
74510: PPUSH
74511: LD_INT 1
74513: PPUSH
74514: LD_INT 4
74516: PPUSH
74517: CALL_OW 272
74521: PUSH
74522: LD_VAR 0 8
74526: PPUSH
74527: LD_INT 1
74529: PPUSH
74530: LD_INT 4
74532: PPUSH
74533: CALL_OW 273
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: PUSH
74542: LD_VAR 0 7
74546: PPUSH
74547: LD_INT 2
74549: PPUSH
74550: LD_INT 4
74552: PPUSH
74553: CALL_OW 272
74557: PUSH
74558: LD_VAR 0 8
74562: PPUSH
74563: LD_INT 2
74565: PPUSH
74566: LD_INT 4
74568: PPUSH
74569: CALL_OW 273
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: PUSH
74578: LD_VAR 0 7
74582: PPUSH
74583: LD_INT 3
74585: PPUSH
74586: LD_INT 4
74588: PPUSH
74589: CALL_OW 272
74593: PUSH
74594: LD_VAR 0 8
74598: PPUSH
74599: LD_INT 3
74601: PPUSH
74602: LD_INT 4
74604: PPUSH
74605: CALL_OW 273
74609: PUSH
74610: EMPTY
74611: LIST
74612: LIST
74613: PUSH
74614: LD_VAR 0 7
74618: PPUSH
74619: LD_INT 4
74621: PPUSH
74622: LD_INT 4
74624: PPUSH
74625: CALL_OW 272
74629: PUSH
74630: LD_VAR 0 8
74634: PPUSH
74635: LD_INT 4
74637: PPUSH
74638: LD_INT 4
74640: PPUSH
74641: CALL_OW 273
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: PUSH
74650: LD_VAR 0 7
74654: PPUSH
74655: LD_INT 5
74657: PPUSH
74658: LD_INT 4
74660: PPUSH
74661: CALL_OW 272
74665: PUSH
74666: LD_VAR 0 8
74670: PPUSH
74671: LD_INT 5
74673: PPUSH
74674: LD_INT 4
74676: PPUSH
74677: CALL_OW 273
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PUSH
74686: EMPTY
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: ST_TO_ADDR
// for i = tmp downto 1 do
74694: LD_ADDR_VAR 0 4
74698: PUSH
74699: DOUBLE
74700: LD_VAR 0 6
74704: INC
74705: ST_TO_ADDR
74706: LD_INT 1
74708: PUSH
74709: FOR_DOWNTO
74710: IFFALSE 74811
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74712: LD_VAR 0 6
74716: PUSH
74717: LD_VAR 0 4
74721: ARRAY
74722: PUSH
74723: LD_INT 1
74725: ARRAY
74726: PPUSH
74727: LD_VAR 0 6
74731: PUSH
74732: LD_VAR 0 4
74736: ARRAY
74737: PUSH
74738: LD_INT 2
74740: ARRAY
74741: PPUSH
74742: CALL_OW 488
74746: NOT
74747: PUSH
74748: LD_VAR 0 6
74752: PUSH
74753: LD_VAR 0 4
74757: ARRAY
74758: PUSH
74759: LD_INT 1
74761: ARRAY
74762: PPUSH
74763: LD_VAR 0 6
74767: PUSH
74768: LD_VAR 0 4
74772: ARRAY
74773: PUSH
74774: LD_INT 2
74776: ARRAY
74777: PPUSH
74778: CALL_OW 428
74782: PUSH
74783: LD_INT 0
74785: NONEQUAL
74786: OR
74787: IFFALSE 74809
// tmp := Delete ( tmp , i ) ;
74789: LD_ADDR_VAR 0 6
74793: PUSH
74794: LD_VAR 0 6
74798: PPUSH
74799: LD_VAR 0 4
74803: PPUSH
74804: CALL_OW 3
74808: ST_TO_ADDR
74809: GO 74709
74811: POP
74812: POP
// j := GetClosestHex ( unit , tmp ) ;
74813: LD_ADDR_VAR 0 5
74817: PUSH
74818: LD_VAR 0 1
74822: PPUSH
74823: LD_VAR 0 6
74827: PPUSH
74828: CALL 74115 0 2
74832: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74833: LD_VAR 0 1
74837: PPUSH
74838: LD_VAR 0 5
74842: PUSH
74843: LD_INT 1
74845: ARRAY
74846: PPUSH
74847: LD_VAR 0 5
74851: PUSH
74852: LD_INT 2
74854: ARRAY
74855: PPUSH
74856: CALL_OW 111
// end ;
74860: LD_VAR 0 3
74864: RET
// export function PrepareApemanSoldier ( ) ; begin
74865: LD_INT 0
74867: PPUSH
// uc_nation := 0 ;
74868: LD_ADDR_OWVAR 21
74872: PUSH
74873: LD_INT 0
74875: ST_TO_ADDR
// hc_sex := sex_male ;
74876: LD_ADDR_OWVAR 27
74880: PUSH
74881: LD_INT 1
74883: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74884: LD_ADDR_OWVAR 28
74888: PUSH
74889: LD_INT 15
74891: ST_TO_ADDR
// hc_gallery :=  ;
74892: LD_ADDR_OWVAR 33
74896: PUSH
74897: LD_STRING 
74899: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74900: LD_ADDR_OWVAR 31
74904: PUSH
74905: LD_INT 0
74907: PPUSH
74908: LD_INT 3
74910: PPUSH
74911: CALL_OW 12
74915: PUSH
74916: LD_INT 0
74918: PPUSH
74919: LD_INT 3
74921: PPUSH
74922: CALL_OW 12
74926: PUSH
74927: LD_INT 0
74929: PUSH
74930: LD_INT 0
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: ST_TO_ADDR
// end ;
74939: LD_VAR 0 1
74943: RET
// export function PrepareApemanEngineer ( ) ; begin
74944: LD_INT 0
74946: PPUSH
// uc_nation := 0 ;
74947: LD_ADDR_OWVAR 21
74951: PUSH
74952: LD_INT 0
74954: ST_TO_ADDR
// hc_sex := sex_male ;
74955: LD_ADDR_OWVAR 27
74959: PUSH
74960: LD_INT 1
74962: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74963: LD_ADDR_OWVAR 28
74967: PUSH
74968: LD_INT 16
74970: ST_TO_ADDR
// hc_gallery :=  ;
74971: LD_ADDR_OWVAR 33
74975: PUSH
74976: LD_STRING 
74978: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74979: LD_ADDR_OWVAR 31
74983: PUSH
74984: LD_INT 0
74986: PPUSH
74987: LD_INT 3
74989: PPUSH
74990: CALL_OW 12
74994: PUSH
74995: LD_INT 0
74997: PPUSH
74998: LD_INT 3
75000: PPUSH
75001: CALL_OW 12
75005: PUSH
75006: LD_INT 0
75008: PUSH
75009: LD_INT 0
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: ST_TO_ADDR
// end ;
75018: LD_VAR 0 1
75022: RET
// export function PrepareApeman ( agressivity ) ; begin
75023: LD_INT 0
75025: PPUSH
// uc_side := 0 ;
75026: LD_ADDR_OWVAR 20
75030: PUSH
75031: LD_INT 0
75033: ST_TO_ADDR
// uc_nation := 0 ;
75034: LD_ADDR_OWVAR 21
75038: PUSH
75039: LD_INT 0
75041: ST_TO_ADDR
// hc_sex := sex_male ;
75042: LD_ADDR_OWVAR 27
75046: PUSH
75047: LD_INT 1
75049: ST_TO_ADDR
// hc_class := class_apeman ;
75050: LD_ADDR_OWVAR 28
75054: PUSH
75055: LD_INT 12
75057: ST_TO_ADDR
// hc_gallery :=  ;
75058: LD_ADDR_OWVAR 33
75062: PUSH
75063: LD_STRING 
75065: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75066: LD_ADDR_OWVAR 35
75070: PUSH
75071: LD_VAR 0 1
75075: NEG
75076: PPUSH
75077: LD_VAR 0 1
75081: PPUSH
75082: CALL_OW 12
75086: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75087: LD_ADDR_OWVAR 31
75091: PUSH
75092: LD_INT 0
75094: PPUSH
75095: LD_INT 3
75097: PPUSH
75098: CALL_OW 12
75102: PUSH
75103: LD_INT 0
75105: PPUSH
75106: LD_INT 3
75108: PPUSH
75109: CALL_OW 12
75113: PUSH
75114: LD_INT 0
75116: PUSH
75117: LD_INT 0
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: ST_TO_ADDR
// end ;
75126: LD_VAR 0 2
75130: RET
// export function PrepareTiger ( agressivity ) ; begin
75131: LD_INT 0
75133: PPUSH
// uc_side := 0 ;
75134: LD_ADDR_OWVAR 20
75138: PUSH
75139: LD_INT 0
75141: ST_TO_ADDR
// uc_nation := 0 ;
75142: LD_ADDR_OWVAR 21
75146: PUSH
75147: LD_INT 0
75149: ST_TO_ADDR
// hc_class := class_tiger ;
75150: LD_ADDR_OWVAR 28
75154: PUSH
75155: LD_INT 14
75157: ST_TO_ADDR
// hc_gallery :=  ;
75158: LD_ADDR_OWVAR 33
75162: PUSH
75163: LD_STRING 
75165: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75166: LD_ADDR_OWVAR 35
75170: PUSH
75171: LD_VAR 0 1
75175: NEG
75176: PPUSH
75177: LD_VAR 0 1
75181: PPUSH
75182: CALL_OW 12
75186: ST_TO_ADDR
// end ;
75187: LD_VAR 0 2
75191: RET
// export function PrepareEnchidna ( ) ; begin
75192: LD_INT 0
75194: PPUSH
// uc_side := 0 ;
75195: LD_ADDR_OWVAR 20
75199: PUSH
75200: LD_INT 0
75202: ST_TO_ADDR
// uc_nation := 0 ;
75203: LD_ADDR_OWVAR 21
75207: PUSH
75208: LD_INT 0
75210: ST_TO_ADDR
// hc_class := class_baggie ;
75211: LD_ADDR_OWVAR 28
75215: PUSH
75216: LD_INT 13
75218: ST_TO_ADDR
// hc_gallery :=  ;
75219: LD_ADDR_OWVAR 33
75223: PUSH
75224: LD_STRING 
75226: ST_TO_ADDR
// end ;
75227: LD_VAR 0 1
75231: RET
// export function PrepareFrog ( ) ; begin
75232: LD_INT 0
75234: PPUSH
// uc_side := 0 ;
75235: LD_ADDR_OWVAR 20
75239: PUSH
75240: LD_INT 0
75242: ST_TO_ADDR
// uc_nation := 0 ;
75243: LD_ADDR_OWVAR 21
75247: PUSH
75248: LD_INT 0
75250: ST_TO_ADDR
// hc_class := class_frog ;
75251: LD_ADDR_OWVAR 28
75255: PUSH
75256: LD_INT 19
75258: ST_TO_ADDR
// hc_gallery :=  ;
75259: LD_ADDR_OWVAR 33
75263: PUSH
75264: LD_STRING 
75266: ST_TO_ADDR
// end ;
75267: LD_VAR 0 1
75271: RET
// export function PrepareFish ( ) ; begin
75272: LD_INT 0
75274: PPUSH
// uc_side := 0 ;
75275: LD_ADDR_OWVAR 20
75279: PUSH
75280: LD_INT 0
75282: ST_TO_ADDR
// uc_nation := 0 ;
75283: LD_ADDR_OWVAR 21
75287: PUSH
75288: LD_INT 0
75290: ST_TO_ADDR
// hc_class := class_fish ;
75291: LD_ADDR_OWVAR 28
75295: PUSH
75296: LD_INT 20
75298: ST_TO_ADDR
// hc_gallery :=  ;
75299: LD_ADDR_OWVAR 33
75303: PUSH
75304: LD_STRING 
75306: ST_TO_ADDR
// end ;
75307: LD_VAR 0 1
75311: RET
// export function PrepareBird ( ) ; begin
75312: LD_INT 0
75314: PPUSH
// uc_side := 0 ;
75315: LD_ADDR_OWVAR 20
75319: PUSH
75320: LD_INT 0
75322: ST_TO_ADDR
// uc_nation := 0 ;
75323: LD_ADDR_OWVAR 21
75327: PUSH
75328: LD_INT 0
75330: ST_TO_ADDR
// hc_class := class_phororhacos ;
75331: LD_ADDR_OWVAR 28
75335: PUSH
75336: LD_INT 18
75338: ST_TO_ADDR
// hc_gallery :=  ;
75339: LD_ADDR_OWVAR 33
75343: PUSH
75344: LD_STRING 
75346: ST_TO_ADDR
// end ;
75347: LD_VAR 0 1
75351: RET
// export function PrepareHorse ( ) ; begin
75352: LD_INT 0
75354: PPUSH
// uc_side := 0 ;
75355: LD_ADDR_OWVAR 20
75359: PUSH
75360: LD_INT 0
75362: ST_TO_ADDR
// uc_nation := 0 ;
75363: LD_ADDR_OWVAR 21
75367: PUSH
75368: LD_INT 0
75370: ST_TO_ADDR
// hc_class := class_horse ;
75371: LD_ADDR_OWVAR 28
75375: PUSH
75376: LD_INT 21
75378: ST_TO_ADDR
// hc_gallery :=  ;
75379: LD_ADDR_OWVAR 33
75383: PUSH
75384: LD_STRING 
75386: ST_TO_ADDR
// end ;
75387: LD_VAR 0 1
75391: RET
// export function PrepareMastodont ( ) ; begin
75392: LD_INT 0
75394: PPUSH
// uc_side := 0 ;
75395: LD_ADDR_OWVAR 20
75399: PUSH
75400: LD_INT 0
75402: ST_TO_ADDR
// uc_nation := 0 ;
75403: LD_ADDR_OWVAR 21
75407: PUSH
75408: LD_INT 0
75410: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75411: LD_ADDR_OWVAR 37
75415: PUSH
75416: LD_INT 31
75418: ST_TO_ADDR
// vc_control := control_rider ;
75419: LD_ADDR_OWVAR 38
75423: PUSH
75424: LD_INT 4
75426: ST_TO_ADDR
// end ;
75427: LD_VAR 0 1
75431: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75432: LD_INT 0
75434: PPUSH
75435: PPUSH
75436: PPUSH
// uc_side = 0 ;
75437: LD_ADDR_OWVAR 20
75441: PUSH
75442: LD_INT 0
75444: ST_TO_ADDR
// uc_nation = 0 ;
75445: LD_ADDR_OWVAR 21
75449: PUSH
75450: LD_INT 0
75452: ST_TO_ADDR
// InitHc_All ( ) ;
75453: CALL_OW 584
// InitVc ;
75457: CALL_OW 20
// if mastodonts then
75461: LD_VAR 0 6
75465: IFFALSE 75532
// for i = 1 to mastodonts do
75467: LD_ADDR_VAR 0 11
75471: PUSH
75472: DOUBLE
75473: LD_INT 1
75475: DEC
75476: ST_TO_ADDR
75477: LD_VAR 0 6
75481: PUSH
75482: FOR_TO
75483: IFFALSE 75530
// begin vc_chassis := 31 ;
75485: LD_ADDR_OWVAR 37
75489: PUSH
75490: LD_INT 31
75492: ST_TO_ADDR
// vc_control := control_rider ;
75493: LD_ADDR_OWVAR 38
75497: PUSH
75498: LD_INT 4
75500: ST_TO_ADDR
// animal := CreateVehicle ;
75501: LD_ADDR_VAR 0 12
75505: PUSH
75506: CALL_OW 45
75510: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75511: LD_VAR 0 12
75515: PPUSH
75516: LD_VAR 0 8
75520: PPUSH
75521: LD_INT 0
75523: PPUSH
75524: CALL 77660 0 3
// end ;
75528: GO 75482
75530: POP
75531: POP
// if horses then
75532: LD_VAR 0 5
75536: IFFALSE 75603
// for i = 1 to horses do
75538: LD_ADDR_VAR 0 11
75542: PUSH
75543: DOUBLE
75544: LD_INT 1
75546: DEC
75547: ST_TO_ADDR
75548: LD_VAR 0 5
75552: PUSH
75553: FOR_TO
75554: IFFALSE 75601
// begin hc_class := 21 ;
75556: LD_ADDR_OWVAR 28
75560: PUSH
75561: LD_INT 21
75563: ST_TO_ADDR
// hc_gallery :=  ;
75564: LD_ADDR_OWVAR 33
75568: PUSH
75569: LD_STRING 
75571: ST_TO_ADDR
// animal := CreateHuman ;
75572: LD_ADDR_VAR 0 12
75576: PUSH
75577: CALL_OW 44
75581: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75582: LD_VAR 0 12
75586: PPUSH
75587: LD_VAR 0 8
75591: PPUSH
75592: LD_INT 0
75594: PPUSH
75595: CALL 77660 0 3
// end ;
75599: GO 75553
75601: POP
75602: POP
// if birds then
75603: LD_VAR 0 1
75607: IFFALSE 75674
// for i = 1 to birds do
75609: LD_ADDR_VAR 0 11
75613: PUSH
75614: DOUBLE
75615: LD_INT 1
75617: DEC
75618: ST_TO_ADDR
75619: LD_VAR 0 1
75623: PUSH
75624: FOR_TO
75625: IFFALSE 75672
// begin hc_class := 18 ;
75627: LD_ADDR_OWVAR 28
75631: PUSH
75632: LD_INT 18
75634: ST_TO_ADDR
// hc_gallery =  ;
75635: LD_ADDR_OWVAR 33
75639: PUSH
75640: LD_STRING 
75642: ST_TO_ADDR
// animal := CreateHuman ;
75643: LD_ADDR_VAR 0 12
75647: PUSH
75648: CALL_OW 44
75652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75653: LD_VAR 0 12
75657: PPUSH
75658: LD_VAR 0 8
75662: PPUSH
75663: LD_INT 0
75665: PPUSH
75666: CALL 77660 0 3
// end ;
75670: GO 75624
75672: POP
75673: POP
// if tigers then
75674: LD_VAR 0 2
75678: IFFALSE 75762
// for i = 1 to tigers do
75680: LD_ADDR_VAR 0 11
75684: PUSH
75685: DOUBLE
75686: LD_INT 1
75688: DEC
75689: ST_TO_ADDR
75690: LD_VAR 0 2
75694: PUSH
75695: FOR_TO
75696: IFFALSE 75760
// begin hc_class = class_tiger ;
75698: LD_ADDR_OWVAR 28
75702: PUSH
75703: LD_INT 14
75705: ST_TO_ADDR
// hc_gallery =  ;
75706: LD_ADDR_OWVAR 33
75710: PUSH
75711: LD_STRING 
75713: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75714: LD_ADDR_OWVAR 35
75718: PUSH
75719: LD_INT 7
75721: NEG
75722: PPUSH
75723: LD_INT 7
75725: PPUSH
75726: CALL_OW 12
75730: ST_TO_ADDR
// animal := CreateHuman ;
75731: LD_ADDR_VAR 0 12
75735: PUSH
75736: CALL_OW 44
75740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75741: LD_VAR 0 12
75745: PPUSH
75746: LD_VAR 0 8
75750: PPUSH
75751: LD_INT 0
75753: PPUSH
75754: CALL 77660 0 3
// end ;
75758: GO 75695
75760: POP
75761: POP
// if apemans then
75762: LD_VAR 0 3
75766: IFFALSE 75889
// for i = 1 to apemans do
75768: LD_ADDR_VAR 0 11
75772: PUSH
75773: DOUBLE
75774: LD_INT 1
75776: DEC
75777: ST_TO_ADDR
75778: LD_VAR 0 3
75782: PUSH
75783: FOR_TO
75784: IFFALSE 75887
// begin hc_class = class_apeman ;
75786: LD_ADDR_OWVAR 28
75790: PUSH
75791: LD_INT 12
75793: ST_TO_ADDR
// hc_gallery =  ;
75794: LD_ADDR_OWVAR 33
75798: PUSH
75799: LD_STRING 
75801: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75802: LD_ADDR_OWVAR 35
75806: PUSH
75807: LD_INT 2
75809: NEG
75810: PPUSH
75811: LD_INT 2
75813: PPUSH
75814: CALL_OW 12
75818: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75819: LD_ADDR_OWVAR 31
75823: PUSH
75824: LD_INT 1
75826: PPUSH
75827: LD_INT 3
75829: PPUSH
75830: CALL_OW 12
75834: PUSH
75835: LD_INT 1
75837: PPUSH
75838: LD_INT 3
75840: PPUSH
75841: CALL_OW 12
75845: PUSH
75846: LD_INT 0
75848: PUSH
75849: LD_INT 0
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: LIST
75856: LIST
75857: ST_TO_ADDR
// animal := CreateHuman ;
75858: LD_ADDR_VAR 0 12
75862: PUSH
75863: CALL_OW 44
75867: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75868: LD_VAR 0 12
75872: PPUSH
75873: LD_VAR 0 8
75877: PPUSH
75878: LD_INT 0
75880: PPUSH
75881: CALL 77660 0 3
// end ;
75885: GO 75783
75887: POP
75888: POP
// if enchidnas then
75889: LD_VAR 0 4
75893: IFFALSE 75960
// for i = 1 to enchidnas do
75895: LD_ADDR_VAR 0 11
75899: PUSH
75900: DOUBLE
75901: LD_INT 1
75903: DEC
75904: ST_TO_ADDR
75905: LD_VAR 0 4
75909: PUSH
75910: FOR_TO
75911: IFFALSE 75958
// begin hc_class = 13 ;
75913: LD_ADDR_OWVAR 28
75917: PUSH
75918: LD_INT 13
75920: ST_TO_ADDR
// hc_gallery =  ;
75921: LD_ADDR_OWVAR 33
75925: PUSH
75926: LD_STRING 
75928: ST_TO_ADDR
// animal := CreateHuman ;
75929: LD_ADDR_VAR 0 12
75933: PUSH
75934: CALL_OW 44
75938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75939: LD_VAR 0 12
75943: PPUSH
75944: LD_VAR 0 8
75948: PPUSH
75949: LD_INT 0
75951: PPUSH
75952: CALL 77660 0 3
// end ;
75956: GO 75910
75958: POP
75959: POP
// if fishes then
75960: LD_VAR 0 7
75964: IFFALSE 76031
// for i = 1 to fishes do
75966: LD_ADDR_VAR 0 11
75970: PUSH
75971: DOUBLE
75972: LD_INT 1
75974: DEC
75975: ST_TO_ADDR
75976: LD_VAR 0 7
75980: PUSH
75981: FOR_TO
75982: IFFALSE 76029
// begin hc_class = 20 ;
75984: LD_ADDR_OWVAR 28
75988: PUSH
75989: LD_INT 20
75991: ST_TO_ADDR
// hc_gallery =  ;
75992: LD_ADDR_OWVAR 33
75996: PUSH
75997: LD_STRING 
75999: ST_TO_ADDR
// animal := CreateHuman ;
76000: LD_ADDR_VAR 0 12
76004: PUSH
76005: CALL_OW 44
76009: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76010: LD_VAR 0 12
76014: PPUSH
76015: LD_VAR 0 9
76019: PPUSH
76020: LD_INT 0
76022: PPUSH
76023: CALL 77660 0 3
// end ;
76027: GO 75981
76029: POP
76030: POP
// end ;
76031: LD_VAR 0 10
76035: RET
// export function WantHeal ( sci , unit ) ; begin
76036: LD_INT 0
76038: PPUSH
// if GetTaskList ( sci ) > 0 then
76039: LD_VAR 0 1
76043: PPUSH
76044: CALL_OW 437
76048: PUSH
76049: LD_INT 0
76051: GREATER
76052: IFFALSE 76122
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76054: LD_VAR 0 1
76058: PPUSH
76059: CALL_OW 437
76063: PUSH
76064: LD_INT 1
76066: ARRAY
76067: PUSH
76068: LD_INT 1
76070: ARRAY
76071: PUSH
76072: LD_STRING l
76074: EQUAL
76075: PUSH
76076: LD_VAR 0 1
76080: PPUSH
76081: CALL_OW 437
76085: PUSH
76086: LD_INT 1
76088: ARRAY
76089: PUSH
76090: LD_INT 4
76092: ARRAY
76093: PUSH
76094: LD_VAR 0 2
76098: EQUAL
76099: AND
76100: IFFALSE 76112
// result := true else
76102: LD_ADDR_VAR 0 3
76106: PUSH
76107: LD_INT 1
76109: ST_TO_ADDR
76110: GO 76120
// result := false ;
76112: LD_ADDR_VAR 0 3
76116: PUSH
76117: LD_INT 0
76119: ST_TO_ADDR
// end else
76120: GO 76130
// result := false ;
76122: LD_ADDR_VAR 0 3
76126: PUSH
76127: LD_INT 0
76129: ST_TO_ADDR
// end ;
76130: LD_VAR 0 3
76134: RET
// export function HealTarget ( sci ) ; begin
76135: LD_INT 0
76137: PPUSH
// if not sci then
76138: LD_VAR 0 1
76142: NOT
76143: IFFALSE 76147
// exit ;
76145: GO 76212
// result := 0 ;
76147: LD_ADDR_VAR 0 2
76151: PUSH
76152: LD_INT 0
76154: ST_TO_ADDR
// if GetTaskList ( sci ) then
76155: LD_VAR 0 1
76159: PPUSH
76160: CALL_OW 437
76164: IFFALSE 76212
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76166: LD_VAR 0 1
76170: PPUSH
76171: CALL_OW 437
76175: PUSH
76176: LD_INT 1
76178: ARRAY
76179: PUSH
76180: LD_INT 1
76182: ARRAY
76183: PUSH
76184: LD_STRING l
76186: EQUAL
76187: IFFALSE 76212
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76189: LD_ADDR_VAR 0 2
76193: PUSH
76194: LD_VAR 0 1
76198: PPUSH
76199: CALL_OW 437
76203: PUSH
76204: LD_INT 1
76206: ARRAY
76207: PUSH
76208: LD_INT 4
76210: ARRAY
76211: ST_TO_ADDR
// end ;
76212: LD_VAR 0 2
76216: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76217: LD_INT 0
76219: PPUSH
76220: PPUSH
76221: PPUSH
76222: PPUSH
// if not base_units then
76223: LD_VAR 0 1
76227: NOT
76228: IFFALSE 76232
// exit ;
76230: GO 76319
// result := false ;
76232: LD_ADDR_VAR 0 2
76236: PUSH
76237: LD_INT 0
76239: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76240: LD_ADDR_VAR 0 5
76244: PUSH
76245: LD_VAR 0 1
76249: PPUSH
76250: LD_INT 21
76252: PUSH
76253: LD_INT 3
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: PPUSH
76260: CALL_OW 72
76264: ST_TO_ADDR
// if not tmp then
76265: LD_VAR 0 5
76269: NOT
76270: IFFALSE 76274
// exit ;
76272: GO 76319
// for i in tmp do
76274: LD_ADDR_VAR 0 3
76278: PUSH
76279: LD_VAR 0 5
76283: PUSH
76284: FOR_IN
76285: IFFALSE 76317
// begin result := EnemyInRange ( i , 22 ) ;
76287: LD_ADDR_VAR 0 2
76291: PUSH
76292: LD_VAR 0 3
76296: PPUSH
76297: LD_INT 22
76299: PPUSH
76300: CALL 73917 0 2
76304: ST_TO_ADDR
// if result then
76305: LD_VAR 0 2
76309: IFFALSE 76315
// exit ;
76311: POP
76312: POP
76313: GO 76319
// end ;
76315: GO 76284
76317: POP
76318: POP
// end ;
76319: LD_VAR 0 2
76323: RET
// export function FilterByTag ( units , tag ) ; begin
76324: LD_INT 0
76326: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76327: LD_ADDR_VAR 0 3
76331: PUSH
76332: LD_VAR 0 1
76336: PPUSH
76337: LD_INT 120
76339: PUSH
76340: LD_VAR 0 2
76344: PUSH
76345: EMPTY
76346: LIST
76347: LIST
76348: PPUSH
76349: CALL_OW 72
76353: ST_TO_ADDR
// end ;
76354: LD_VAR 0 3
76358: RET
// export function IsDriver ( un ) ; begin
76359: LD_INT 0
76361: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76362: LD_ADDR_VAR 0 2
76366: PUSH
76367: LD_VAR 0 1
76371: PUSH
76372: LD_INT 55
76374: PUSH
76375: EMPTY
76376: LIST
76377: PPUSH
76378: CALL_OW 69
76382: IN
76383: ST_TO_ADDR
// end ;
76384: LD_VAR 0 2
76388: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76389: LD_INT 0
76391: PPUSH
76392: PPUSH
// list := [ ] ;
76393: LD_ADDR_VAR 0 5
76397: PUSH
76398: EMPTY
76399: ST_TO_ADDR
// case d of 0 :
76400: LD_VAR 0 3
76404: PUSH
76405: LD_INT 0
76407: DOUBLE
76408: EQUAL
76409: IFTRUE 76413
76411: GO 76546
76413: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76414: LD_ADDR_VAR 0 5
76418: PUSH
76419: LD_VAR 0 1
76423: PUSH
76424: LD_INT 4
76426: MINUS
76427: PUSH
76428: LD_VAR 0 2
76432: PUSH
76433: LD_INT 4
76435: MINUS
76436: PUSH
76437: LD_INT 2
76439: PUSH
76440: EMPTY
76441: LIST
76442: LIST
76443: LIST
76444: PUSH
76445: LD_VAR 0 1
76449: PUSH
76450: LD_INT 3
76452: MINUS
76453: PUSH
76454: LD_VAR 0 2
76458: PUSH
76459: LD_INT 1
76461: PUSH
76462: EMPTY
76463: LIST
76464: LIST
76465: LIST
76466: PUSH
76467: LD_VAR 0 1
76471: PUSH
76472: LD_INT 4
76474: PLUS
76475: PUSH
76476: LD_VAR 0 2
76480: PUSH
76481: LD_INT 4
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: LIST
76488: PUSH
76489: LD_VAR 0 1
76493: PUSH
76494: LD_INT 3
76496: PLUS
76497: PUSH
76498: LD_VAR 0 2
76502: PUSH
76503: LD_INT 3
76505: PLUS
76506: PUSH
76507: LD_INT 5
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: LIST
76514: PUSH
76515: LD_VAR 0 1
76519: PUSH
76520: LD_VAR 0 2
76524: PUSH
76525: LD_INT 4
76527: PLUS
76528: PUSH
76529: LD_INT 0
76531: PUSH
76532: EMPTY
76533: LIST
76534: LIST
76535: LIST
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: LIST
76541: LIST
76542: LIST
76543: ST_TO_ADDR
// end ; 1 :
76544: GO 77244
76546: LD_INT 1
76548: DOUBLE
76549: EQUAL
76550: IFTRUE 76554
76552: GO 76687
76554: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76555: LD_ADDR_VAR 0 5
76559: PUSH
76560: LD_VAR 0 1
76564: PUSH
76565: LD_VAR 0 2
76569: PUSH
76570: LD_INT 4
76572: MINUS
76573: PUSH
76574: LD_INT 3
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: LIST
76581: PUSH
76582: LD_VAR 0 1
76586: PUSH
76587: LD_INT 3
76589: MINUS
76590: PUSH
76591: LD_VAR 0 2
76595: PUSH
76596: LD_INT 3
76598: MINUS
76599: PUSH
76600: LD_INT 2
76602: PUSH
76603: EMPTY
76604: LIST
76605: LIST
76606: LIST
76607: PUSH
76608: LD_VAR 0 1
76612: PUSH
76613: LD_INT 4
76615: MINUS
76616: PUSH
76617: LD_VAR 0 2
76621: PUSH
76622: LD_INT 1
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: LIST
76629: PUSH
76630: LD_VAR 0 1
76634: PUSH
76635: LD_VAR 0 2
76639: PUSH
76640: LD_INT 3
76642: PLUS
76643: PUSH
76644: LD_INT 0
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: LIST
76651: PUSH
76652: LD_VAR 0 1
76656: PUSH
76657: LD_INT 4
76659: PLUS
76660: PUSH
76661: LD_VAR 0 2
76665: PUSH
76666: LD_INT 4
76668: PLUS
76669: PUSH
76670: LD_INT 5
76672: PUSH
76673: EMPTY
76674: LIST
76675: LIST
76676: LIST
76677: PUSH
76678: EMPTY
76679: LIST
76680: LIST
76681: LIST
76682: LIST
76683: LIST
76684: ST_TO_ADDR
// end ; 2 :
76685: GO 77244
76687: LD_INT 2
76689: DOUBLE
76690: EQUAL
76691: IFTRUE 76695
76693: GO 76824
76695: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76696: LD_ADDR_VAR 0 5
76700: PUSH
76701: LD_VAR 0 1
76705: PUSH
76706: LD_VAR 0 2
76710: PUSH
76711: LD_INT 3
76713: MINUS
76714: PUSH
76715: LD_INT 3
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: LIST
76722: PUSH
76723: LD_VAR 0 1
76727: PUSH
76728: LD_INT 4
76730: PLUS
76731: PUSH
76732: LD_VAR 0 2
76736: PUSH
76737: LD_INT 4
76739: PUSH
76740: EMPTY
76741: LIST
76742: LIST
76743: LIST
76744: PUSH
76745: LD_VAR 0 1
76749: PUSH
76750: LD_VAR 0 2
76754: PUSH
76755: LD_INT 4
76757: PLUS
76758: PUSH
76759: LD_INT 0
76761: PUSH
76762: EMPTY
76763: LIST
76764: LIST
76765: LIST
76766: PUSH
76767: LD_VAR 0 1
76771: PUSH
76772: LD_INT 3
76774: MINUS
76775: PUSH
76776: LD_VAR 0 2
76780: PUSH
76781: LD_INT 1
76783: PUSH
76784: EMPTY
76785: LIST
76786: LIST
76787: LIST
76788: PUSH
76789: LD_VAR 0 1
76793: PUSH
76794: LD_INT 4
76796: MINUS
76797: PUSH
76798: LD_VAR 0 2
76802: PUSH
76803: LD_INT 4
76805: MINUS
76806: PUSH
76807: LD_INT 2
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: LIST
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: LIST
76819: LIST
76820: LIST
76821: ST_TO_ADDR
// end ; 3 :
76822: GO 77244
76824: LD_INT 3
76826: DOUBLE
76827: EQUAL
76828: IFTRUE 76832
76830: GO 76965
76832: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76833: LD_ADDR_VAR 0 5
76837: PUSH
76838: LD_VAR 0 1
76842: PUSH
76843: LD_INT 3
76845: PLUS
76846: PUSH
76847: LD_VAR 0 2
76851: PUSH
76852: LD_INT 4
76854: PUSH
76855: EMPTY
76856: LIST
76857: LIST
76858: LIST
76859: PUSH
76860: LD_VAR 0 1
76864: PUSH
76865: LD_INT 4
76867: PLUS
76868: PUSH
76869: LD_VAR 0 2
76873: PUSH
76874: LD_INT 4
76876: PLUS
76877: PUSH
76878: LD_INT 5
76880: PUSH
76881: EMPTY
76882: LIST
76883: LIST
76884: LIST
76885: PUSH
76886: LD_VAR 0 1
76890: PUSH
76891: LD_INT 4
76893: MINUS
76894: PUSH
76895: LD_VAR 0 2
76899: PUSH
76900: LD_INT 1
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: LIST
76907: PUSH
76908: LD_VAR 0 1
76912: PUSH
76913: LD_VAR 0 2
76917: PUSH
76918: LD_INT 4
76920: MINUS
76921: PUSH
76922: LD_INT 3
76924: PUSH
76925: EMPTY
76926: LIST
76927: LIST
76928: LIST
76929: PUSH
76930: LD_VAR 0 1
76934: PUSH
76935: LD_INT 3
76937: MINUS
76938: PUSH
76939: LD_VAR 0 2
76943: PUSH
76944: LD_INT 3
76946: MINUS
76947: PUSH
76948: LD_INT 2
76950: PUSH
76951: EMPTY
76952: LIST
76953: LIST
76954: LIST
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: LIST
76960: LIST
76961: LIST
76962: ST_TO_ADDR
// end ; 4 :
76963: GO 77244
76965: LD_INT 4
76967: DOUBLE
76968: EQUAL
76969: IFTRUE 76973
76971: GO 77106
76973: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76974: LD_ADDR_VAR 0 5
76978: PUSH
76979: LD_VAR 0 1
76983: PUSH
76984: LD_VAR 0 2
76988: PUSH
76989: LD_INT 4
76991: PLUS
76992: PUSH
76993: LD_INT 0
76995: PUSH
76996: EMPTY
76997: LIST
76998: LIST
76999: LIST
77000: PUSH
77001: LD_VAR 0 1
77005: PUSH
77006: LD_INT 3
77008: PLUS
77009: PUSH
77010: LD_VAR 0 2
77014: PUSH
77015: LD_INT 3
77017: PLUS
77018: PUSH
77019: LD_INT 5
77021: PUSH
77022: EMPTY
77023: LIST
77024: LIST
77025: LIST
77026: PUSH
77027: LD_VAR 0 1
77031: PUSH
77032: LD_INT 4
77034: PLUS
77035: PUSH
77036: LD_VAR 0 2
77040: PUSH
77041: LD_INT 4
77043: PUSH
77044: EMPTY
77045: LIST
77046: LIST
77047: LIST
77048: PUSH
77049: LD_VAR 0 1
77053: PUSH
77054: LD_VAR 0 2
77058: PUSH
77059: LD_INT 3
77061: MINUS
77062: PUSH
77063: LD_INT 3
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: LIST
77070: PUSH
77071: LD_VAR 0 1
77075: PUSH
77076: LD_INT 4
77078: MINUS
77079: PUSH
77080: LD_VAR 0 2
77084: PUSH
77085: LD_INT 4
77087: MINUS
77088: PUSH
77089: LD_INT 2
77091: PUSH
77092: EMPTY
77093: LIST
77094: LIST
77095: LIST
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: ST_TO_ADDR
// end ; 5 :
77104: GO 77244
77106: LD_INT 5
77108: DOUBLE
77109: EQUAL
77110: IFTRUE 77114
77112: GO 77243
77114: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77115: LD_ADDR_VAR 0 5
77119: PUSH
77120: LD_VAR 0 1
77124: PUSH
77125: LD_INT 4
77127: MINUS
77128: PUSH
77129: LD_VAR 0 2
77133: PUSH
77134: LD_INT 1
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: LIST
77141: PUSH
77142: LD_VAR 0 1
77146: PUSH
77147: LD_VAR 0 2
77151: PUSH
77152: LD_INT 4
77154: MINUS
77155: PUSH
77156: LD_INT 3
77158: PUSH
77159: EMPTY
77160: LIST
77161: LIST
77162: LIST
77163: PUSH
77164: LD_VAR 0 1
77168: PUSH
77169: LD_INT 4
77171: PLUS
77172: PUSH
77173: LD_VAR 0 2
77177: PUSH
77178: LD_INT 4
77180: PLUS
77181: PUSH
77182: LD_INT 5
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: LIST
77189: PUSH
77190: LD_VAR 0 1
77194: PUSH
77195: LD_INT 3
77197: PLUS
77198: PUSH
77199: LD_VAR 0 2
77203: PUSH
77204: LD_INT 4
77206: PUSH
77207: EMPTY
77208: LIST
77209: LIST
77210: LIST
77211: PUSH
77212: LD_VAR 0 1
77216: PUSH
77217: LD_VAR 0 2
77221: PUSH
77222: LD_INT 3
77224: PLUS
77225: PUSH
77226: LD_INT 0
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: LIST
77233: PUSH
77234: EMPTY
77235: LIST
77236: LIST
77237: LIST
77238: LIST
77239: LIST
77240: ST_TO_ADDR
// end ; end ;
77241: GO 77244
77243: POP
// result := list ;
77244: LD_ADDR_VAR 0 4
77248: PUSH
77249: LD_VAR 0 5
77253: ST_TO_ADDR
// end ;
77254: LD_VAR 0 4
77258: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77259: LD_INT 0
77261: PPUSH
77262: PPUSH
77263: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77264: LD_VAR 0 1
77268: NOT
77269: PUSH
77270: LD_VAR 0 2
77274: PUSH
77275: LD_INT 1
77277: PUSH
77278: LD_INT 2
77280: PUSH
77281: LD_INT 3
77283: PUSH
77284: LD_INT 4
77286: PUSH
77287: EMPTY
77288: LIST
77289: LIST
77290: LIST
77291: LIST
77292: IN
77293: NOT
77294: OR
77295: IFFALSE 77299
// exit ;
77297: GO 77382
// tmp := [ ] ;
77299: LD_ADDR_VAR 0 5
77303: PUSH
77304: EMPTY
77305: ST_TO_ADDR
// for i in units do
77306: LD_ADDR_VAR 0 4
77310: PUSH
77311: LD_VAR 0 1
77315: PUSH
77316: FOR_IN
77317: IFFALSE 77351
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77319: LD_ADDR_VAR 0 5
77323: PUSH
77324: LD_VAR 0 5
77328: PPUSH
77329: LD_VAR 0 4
77333: PPUSH
77334: LD_VAR 0 2
77338: PPUSH
77339: CALL_OW 259
77343: PPUSH
77344: CALL 78755 0 2
77348: ST_TO_ADDR
77349: GO 77316
77351: POP
77352: POP
// if not tmp then
77353: LD_VAR 0 5
77357: NOT
77358: IFFALSE 77362
// exit ;
77360: GO 77382
// result := SortListByListDesc ( units , tmp ) ;
77362: LD_ADDR_VAR 0 3
77366: PUSH
77367: LD_VAR 0 1
77371: PPUSH
77372: LD_VAR 0 5
77376: PPUSH
77377: CALL_OW 77
77381: ST_TO_ADDR
// end ;
77382: LD_VAR 0 3
77386: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77387: LD_INT 0
77389: PPUSH
77390: PPUSH
77391: PPUSH
// result := false ;
77392: LD_ADDR_VAR 0 3
77396: PUSH
77397: LD_INT 0
77399: ST_TO_ADDR
// if not building then
77400: LD_VAR 0 2
77404: NOT
77405: IFFALSE 77409
// exit ;
77407: GO 77547
// x := GetX ( building ) ;
77409: LD_ADDR_VAR 0 4
77413: PUSH
77414: LD_VAR 0 2
77418: PPUSH
77419: CALL_OW 250
77423: ST_TO_ADDR
// y := GetY ( building ) ;
77424: LD_ADDR_VAR 0 5
77428: PUSH
77429: LD_VAR 0 2
77433: PPUSH
77434: CALL_OW 251
77438: ST_TO_ADDR
// if not x or not y then
77439: LD_VAR 0 4
77443: NOT
77444: PUSH
77445: LD_VAR 0 5
77449: NOT
77450: OR
77451: IFFALSE 77455
// exit ;
77453: GO 77547
// if GetTaskList ( unit ) then
77455: LD_VAR 0 1
77459: PPUSH
77460: CALL_OW 437
77464: IFFALSE 77547
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77466: LD_STRING e
77468: PUSH
77469: LD_VAR 0 1
77473: PPUSH
77474: CALL_OW 437
77478: PUSH
77479: LD_INT 1
77481: ARRAY
77482: PUSH
77483: LD_INT 1
77485: ARRAY
77486: EQUAL
77487: PUSH
77488: LD_VAR 0 4
77492: PUSH
77493: LD_VAR 0 1
77497: PPUSH
77498: CALL_OW 437
77502: PUSH
77503: LD_INT 1
77505: ARRAY
77506: PUSH
77507: LD_INT 2
77509: ARRAY
77510: EQUAL
77511: AND
77512: PUSH
77513: LD_VAR 0 5
77517: PUSH
77518: LD_VAR 0 1
77522: PPUSH
77523: CALL_OW 437
77527: PUSH
77528: LD_INT 1
77530: ARRAY
77531: PUSH
77532: LD_INT 3
77534: ARRAY
77535: EQUAL
77536: AND
77537: IFFALSE 77547
// result := true end ;
77539: LD_ADDR_VAR 0 3
77543: PUSH
77544: LD_INT 1
77546: ST_TO_ADDR
// end ;
77547: LD_VAR 0 3
77551: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77552: LD_INT 0
77554: PPUSH
// result := false ;
77555: LD_ADDR_VAR 0 4
77559: PUSH
77560: LD_INT 0
77562: ST_TO_ADDR
// if GetTaskList ( unit ) then
77563: LD_VAR 0 1
77567: PPUSH
77568: CALL_OW 437
77572: IFFALSE 77655
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77574: LD_STRING M
77576: PUSH
77577: LD_VAR 0 1
77581: PPUSH
77582: CALL_OW 437
77586: PUSH
77587: LD_INT 1
77589: ARRAY
77590: PUSH
77591: LD_INT 1
77593: ARRAY
77594: EQUAL
77595: PUSH
77596: LD_VAR 0 2
77600: PUSH
77601: LD_VAR 0 1
77605: PPUSH
77606: CALL_OW 437
77610: PUSH
77611: LD_INT 1
77613: ARRAY
77614: PUSH
77615: LD_INT 2
77617: ARRAY
77618: EQUAL
77619: AND
77620: PUSH
77621: LD_VAR 0 3
77625: PUSH
77626: LD_VAR 0 1
77630: PPUSH
77631: CALL_OW 437
77635: PUSH
77636: LD_INT 1
77638: ARRAY
77639: PUSH
77640: LD_INT 3
77642: ARRAY
77643: EQUAL
77644: AND
77645: IFFALSE 77655
// result := true ;
77647: LD_ADDR_VAR 0 4
77651: PUSH
77652: LD_INT 1
77654: ST_TO_ADDR
// end ; end ;
77655: LD_VAR 0 4
77659: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77660: LD_INT 0
77662: PPUSH
77663: PPUSH
77664: PPUSH
77665: PPUSH
// if not unit or not area then
77666: LD_VAR 0 1
77670: NOT
77671: PUSH
77672: LD_VAR 0 2
77676: NOT
77677: OR
77678: IFFALSE 77682
// exit ;
77680: GO 77858
// tmp := AreaToList ( area , i ) ;
77682: LD_ADDR_VAR 0 6
77686: PUSH
77687: LD_VAR 0 2
77691: PPUSH
77692: LD_VAR 0 5
77696: PPUSH
77697: CALL_OW 517
77701: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77702: LD_ADDR_VAR 0 5
77706: PUSH
77707: DOUBLE
77708: LD_INT 1
77710: DEC
77711: ST_TO_ADDR
77712: LD_VAR 0 6
77716: PUSH
77717: LD_INT 1
77719: ARRAY
77720: PUSH
77721: FOR_TO
77722: IFFALSE 77856
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77724: LD_ADDR_VAR 0 7
77728: PUSH
77729: LD_VAR 0 6
77733: PUSH
77734: LD_INT 1
77736: ARRAY
77737: PUSH
77738: LD_VAR 0 5
77742: ARRAY
77743: PUSH
77744: LD_VAR 0 6
77748: PUSH
77749: LD_INT 2
77751: ARRAY
77752: PUSH
77753: LD_VAR 0 5
77757: ARRAY
77758: PUSH
77759: EMPTY
77760: LIST
77761: LIST
77762: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77763: LD_INT 92
77765: PUSH
77766: LD_VAR 0 7
77770: PUSH
77771: LD_INT 1
77773: ARRAY
77774: PUSH
77775: LD_VAR 0 7
77779: PUSH
77780: LD_INT 2
77782: ARRAY
77783: PUSH
77784: LD_INT 2
77786: PUSH
77787: EMPTY
77788: LIST
77789: LIST
77790: LIST
77791: LIST
77792: PPUSH
77793: CALL_OW 69
77797: PUSH
77798: LD_INT 0
77800: EQUAL
77801: IFFALSE 77854
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77803: LD_VAR 0 1
77807: PPUSH
77808: LD_VAR 0 7
77812: PUSH
77813: LD_INT 1
77815: ARRAY
77816: PPUSH
77817: LD_VAR 0 7
77821: PUSH
77822: LD_INT 2
77824: ARRAY
77825: PPUSH
77826: LD_VAR 0 3
77830: PPUSH
77831: CALL_OW 48
// result := IsPlaced ( unit ) ;
77835: LD_ADDR_VAR 0 4
77839: PUSH
77840: LD_VAR 0 1
77844: PPUSH
77845: CALL_OW 305
77849: ST_TO_ADDR
// exit ;
77850: POP
77851: POP
77852: GO 77858
// end ; end ;
77854: GO 77721
77856: POP
77857: POP
// end ;
77858: LD_VAR 0 4
77862: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77863: LD_INT 0
77865: PPUSH
77866: PPUSH
77867: PPUSH
// if not side or side > 8 then
77868: LD_VAR 0 1
77872: NOT
77873: PUSH
77874: LD_VAR 0 1
77878: PUSH
77879: LD_INT 8
77881: GREATER
77882: OR
77883: IFFALSE 77887
// exit ;
77885: GO 78074
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77887: LD_ADDR_VAR 0 4
77891: PUSH
77892: LD_INT 22
77894: PUSH
77895: LD_VAR 0 1
77899: PUSH
77900: EMPTY
77901: LIST
77902: LIST
77903: PUSH
77904: LD_INT 21
77906: PUSH
77907: LD_INT 3
77909: PUSH
77910: EMPTY
77911: LIST
77912: LIST
77913: PUSH
77914: EMPTY
77915: LIST
77916: LIST
77917: PPUSH
77918: CALL_OW 69
77922: ST_TO_ADDR
// if not tmp then
77923: LD_VAR 0 4
77927: NOT
77928: IFFALSE 77932
// exit ;
77930: GO 78074
// enable_addtolog := true ;
77932: LD_ADDR_OWVAR 81
77936: PUSH
77937: LD_INT 1
77939: ST_TO_ADDR
// AddToLog ( [ ) ;
77940: LD_STRING [
77942: PPUSH
77943: CALL_OW 561
// for i in tmp do
77947: LD_ADDR_VAR 0 3
77951: PUSH
77952: LD_VAR 0 4
77956: PUSH
77957: FOR_IN
77958: IFFALSE 78065
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77960: LD_STRING [
77962: PUSH
77963: LD_VAR 0 3
77967: PPUSH
77968: CALL_OW 266
77972: STR
77973: PUSH
77974: LD_STRING , 
77976: STR
77977: PUSH
77978: LD_VAR 0 3
77982: PPUSH
77983: CALL_OW 250
77987: STR
77988: PUSH
77989: LD_STRING , 
77991: STR
77992: PUSH
77993: LD_VAR 0 3
77997: PPUSH
77998: CALL_OW 251
78002: STR
78003: PUSH
78004: LD_STRING , 
78006: STR
78007: PUSH
78008: LD_VAR 0 3
78012: PPUSH
78013: CALL_OW 254
78017: STR
78018: PUSH
78019: LD_STRING , 
78021: STR
78022: PUSH
78023: LD_VAR 0 3
78027: PPUSH
78028: LD_INT 1
78030: PPUSH
78031: CALL_OW 268
78035: STR
78036: PUSH
78037: LD_STRING , 
78039: STR
78040: PUSH
78041: LD_VAR 0 3
78045: PPUSH
78046: LD_INT 2
78048: PPUSH
78049: CALL_OW 268
78053: STR
78054: PUSH
78055: LD_STRING ],
78057: STR
78058: PPUSH
78059: CALL_OW 561
// end ;
78063: GO 77957
78065: POP
78066: POP
// AddToLog ( ]; ) ;
78067: LD_STRING ];
78069: PPUSH
78070: CALL_OW 561
// end ;
78074: LD_VAR 0 2
78078: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78079: LD_INT 0
78081: PPUSH
78082: PPUSH
78083: PPUSH
78084: PPUSH
78085: PPUSH
// if not area or not rate or not max then
78086: LD_VAR 0 1
78090: NOT
78091: PUSH
78092: LD_VAR 0 2
78096: NOT
78097: OR
78098: PUSH
78099: LD_VAR 0 4
78103: NOT
78104: OR
78105: IFFALSE 78109
// exit ;
78107: GO 78298
// while 1 do
78109: LD_INT 1
78111: IFFALSE 78298
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78113: LD_ADDR_VAR 0 9
78117: PUSH
78118: LD_VAR 0 1
78122: PPUSH
78123: LD_INT 1
78125: PPUSH
78126: CALL_OW 287
78130: PUSH
78131: LD_INT 10
78133: MUL
78134: ST_TO_ADDR
// r := rate / 10 ;
78135: LD_ADDR_VAR 0 7
78139: PUSH
78140: LD_VAR 0 2
78144: PUSH
78145: LD_INT 10
78147: DIVREAL
78148: ST_TO_ADDR
// time := 1 1$00 ;
78149: LD_ADDR_VAR 0 8
78153: PUSH
78154: LD_INT 2100
78156: ST_TO_ADDR
// if amount < min then
78157: LD_VAR 0 9
78161: PUSH
78162: LD_VAR 0 3
78166: LESS
78167: IFFALSE 78185
// r := r * 2 else
78169: LD_ADDR_VAR 0 7
78173: PUSH
78174: LD_VAR 0 7
78178: PUSH
78179: LD_INT 2
78181: MUL
78182: ST_TO_ADDR
78183: GO 78211
// if amount > max then
78185: LD_VAR 0 9
78189: PUSH
78190: LD_VAR 0 4
78194: GREATER
78195: IFFALSE 78211
// r := r / 2 ;
78197: LD_ADDR_VAR 0 7
78201: PUSH
78202: LD_VAR 0 7
78206: PUSH
78207: LD_INT 2
78209: DIVREAL
78210: ST_TO_ADDR
// time := time / r ;
78211: LD_ADDR_VAR 0 8
78215: PUSH
78216: LD_VAR 0 8
78220: PUSH
78221: LD_VAR 0 7
78225: DIVREAL
78226: ST_TO_ADDR
// if time < 0 then
78227: LD_VAR 0 8
78231: PUSH
78232: LD_INT 0
78234: LESS
78235: IFFALSE 78252
// time := time * - 1 ;
78237: LD_ADDR_VAR 0 8
78241: PUSH
78242: LD_VAR 0 8
78246: PUSH
78247: LD_INT 1
78249: NEG
78250: MUL
78251: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78252: LD_VAR 0 8
78256: PUSH
78257: LD_INT 35
78259: PPUSH
78260: LD_INT 875
78262: PPUSH
78263: CALL_OW 12
78267: PLUS
78268: PPUSH
78269: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78273: LD_INT 1
78275: PPUSH
78276: LD_INT 5
78278: PPUSH
78279: CALL_OW 12
78283: PPUSH
78284: LD_VAR 0 1
78288: PPUSH
78289: LD_INT 1
78291: PPUSH
78292: CALL_OW 55
// end ;
78296: GO 78109
// end ;
78298: LD_VAR 0 5
78302: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78303: LD_INT 0
78305: PPUSH
78306: PPUSH
78307: PPUSH
78308: PPUSH
78309: PPUSH
78310: PPUSH
78311: PPUSH
78312: PPUSH
// if not turrets or not factories then
78313: LD_VAR 0 1
78317: NOT
78318: PUSH
78319: LD_VAR 0 2
78323: NOT
78324: OR
78325: IFFALSE 78329
// exit ;
78327: GO 78636
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78329: LD_ADDR_VAR 0 10
78333: PUSH
78334: LD_INT 5
78336: PUSH
78337: LD_INT 6
78339: PUSH
78340: EMPTY
78341: LIST
78342: LIST
78343: PUSH
78344: LD_INT 2
78346: PUSH
78347: LD_INT 4
78349: PUSH
78350: EMPTY
78351: LIST
78352: LIST
78353: PUSH
78354: LD_INT 3
78356: PUSH
78357: LD_INT 5
78359: PUSH
78360: EMPTY
78361: LIST
78362: LIST
78363: PUSH
78364: EMPTY
78365: LIST
78366: LIST
78367: LIST
78368: PUSH
78369: LD_INT 24
78371: PUSH
78372: LD_INT 25
78374: PUSH
78375: EMPTY
78376: LIST
78377: LIST
78378: PUSH
78379: LD_INT 23
78381: PUSH
78382: LD_INT 27
78384: PUSH
78385: EMPTY
78386: LIST
78387: LIST
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: PUSH
78393: LD_INT 42
78395: PUSH
78396: LD_INT 43
78398: PUSH
78399: EMPTY
78400: LIST
78401: LIST
78402: PUSH
78403: LD_INT 44
78405: PUSH
78406: LD_INT 46
78408: PUSH
78409: EMPTY
78410: LIST
78411: LIST
78412: PUSH
78413: LD_INT 45
78415: PUSH
78416: LD_INT 47
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: PUSH
78423: EMPTY
78424: LIST
78425: LIST
78426: LIST
78427: PUSH
78428: EMPTY
78429: LIST
78430: LIST
78431: LIST
78432: ST_TO_ADDR
// result := [ ] ;
78433: LD_ADDR_VAR 0 3
78437: PUSH
78438: EMPTY
78439: ST_TO_ADDR
// for i in turrets do
78440: LD_ADDR_VAR 0 4
78444: PUSH
78445: LD_VAR 0 1
78449: PUSH
78450: FOR_IN
78451: IFFALSE 78634
// begin nat := GetNation ( i ) ;
78453: LD_ADDR_VAR 0 7
78457: PUSH
78458: LD_VAR 0 4
78462: PPUSH
78463: CALL_OW 248
78467: ST_TO_ADDR
// weapon := 0 ;
78468: LD_ADDR_VAR 0 8
78472: PUSH
78473: LD_INT 0
78475: ST_TO_ADDR
// if not nat then
78476: LD_VAR 0 7
78480: NOT
78481: IFFALSE 78485
// continue ;
78483: GO 78450
// for j in list [ nat ] do
78485: LD_ADDR_VAR 0 5
78489: PUSH
78490: LD_VAR 0 10
78494: PUSH
78495: LD_VAR 0 7
78499: ARRAY
78500: PUSH
78501: FOR_IN
78502: IFFALSE 78543
// if GetBWeapon ( i ) = j [ 1 ] then
78504: LD_VAR 0 4
78508: PPUSH
78509: CALL_OW 269
78513: PUSH
78514: LD_VAR 0 5
78518: PUSH
78519: LD_INT 1
78521: ARRAY
78522: EQUAL
78523: IFFALSE 78541
// begin weapon := j [ 2 ] ;
78525: LD_ADDR_VAR 0 8
78529: PUSH
78530: LD_VAR 0 5
78534: PUSH
78535: LD_INT 2
78537: ARRAY
78538: ST_TO_ADDR
// break ;
78539: GO 78543
// end ;
78541: GO 78501
78543: POP
78544: POP
// if not weapon then
78545: LD_VAR 0 8
78549: NOT
78550: IFFALSE 78554
// continue ;
78552: GO 78450
// for k in factories do
78554: LD_ADDR_VAR 0 6
78558: PUSH
78559: LD_VAR 0 2
78563: PUSH
78564: FOR_IN
78565: IFFALSE 78630
// begin weapons := AvailableWeaponList ( k ) ;
78567: LD_ADDR_VAR 0 9
78571: PUSH
78572: LD_VAR 0 6
78576: PPUSH
78577: CALL_OW 478
78581: ST_TO_ADDR
// if not weapons then
78582: LD_VAR 0 9
78586: NOT
78587: IFFALSE 78591
// continue ;
78589: GO 78564
// if weapon in weapons then
78591: LD_VAR 0 8
78595: PUSH
78596: LD_VAR 0 9
78600: IN
78601: IFFALSE 78628
// begin result := [ i , weapon ] ;
78603: LD_ADDR_VAR 0 3
78607: PUSH
78608: LD_VAR 0 4
78612: PUSH
78613: LD_VAR 0 8
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: ST_TO_ADDR
// exit ;
78622: POP
78623: POP
78624: POP
78625: POP
78626: GO 78636
// end ; end ;
78628: GO 78564
78630: POP
78631: POP
// end ;
78632: GO 78450
78634: POP
78635: POP
// end ;
78636: LD_VAR 0 3
78640: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78641: LD_INT 0
78643: PPUSH
// if not side or side > 8 then
78644: LD_VAR 0 3
78648: NOT
78649: PUSH
78650: LD_VAR 0 3
78654: PUSH
78655: LD_INT 8
78657: GREATER
78658: OR
78659: IFFALSE 78663
// exit ;
78661: GO 78722
// if not range then
78663: LD_VAR 0 4
78667: NOT
78668: IFFALSE 78679
// range := - 12 ;
78670: LD_ADDR_VAR 0 4
78674: PUSH
78675: LD_INT 12
78677: NEG
78678: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78679: LD_VAR 0 1
78683: PPUSH
78684: LD_VAR 0 2
78688: PPUSH
78689: LD_VAR 0 3
78693: PPUSH
78694: LD_VAR 0 4
78698: PPUSH
78699: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78703: LD_VAR 0 1
78707: PPUSH
78708: LD_VAR 0 2
78712: PPUSH
78713: LD_VAR 0 3
78717: PPUSH
78718: CALL_OW 331
// end ;
78722: LD_VAR 0 5
78726: RET
// export function Video ( mode ) ; begin
78727: LD_INT 0
78729: PPUSH
// ingame_video = mode ;
78730: LD_ADDR_OWVAR 52
78734: PUSH
78735: LD_VAR 0 1
78739: ST_TO_ADDR
// interface_hidden = mode ;
78740: LD_ADDR_OWVAR 54
78744: PUSH
78745: LD_VAR 0 1
78749: ST_TO_ADDR
// end ;
78750: LD_VAR 0 2
78754: RET
// export function Join ( array , element ) ; begin
78755: LD_INT 0
78757: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78758: LD_ADDR_VAR 0 3
78762: PUSH
78763: LD_VAR 0 1
78767: PPUSH
78768: LD_VAR 0 1
78772: PUSH
78773: LD_INT 1
78775: PLUS
78776: PPUSH
78777: LD_VAR 0 2
78781: PPUSH
78782: CALL_OW 1
78786: ST_TO_ADDR
// end ;
78787: LD_VAR 0 3
78791: RET
// export function JoinUnion ( array , element ) ; begin
78792: LD_INT 0
78794: PPUSH
// result := array union element ;
78795: LD_ADDR_VAR 0 3
78799: PUSH
78800: LD_VAR 0 1
78804: PUSH
78805: LD_VAR 0 2
78809: UNION
78810: ST_TO_ADDR
// end ;
78811: LD_VAR 0 3
78815: RET
// export function GetBehemoths ( side ) ; begin
78816: LD_INT 0
78818: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78819: LD_ADDR_VAR 0 2
78823: PUSH
78824: LD_INT 22
78826: PUSH
78827: LD_VAR 0 1
78831: PUSH
78832: EMPTY
78833: LIST
78834: LIST
78835: PUSH
78836: LD_INT 31
78838: PUSH
78839: LD_INT 25
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: PUSH
78846: EMPTY
78847: LIST
78848: LIST
78849: PPUSH
78850: CALL_OW 69
78854: ST_TO_ADDR
// end ;
78855: LD_VAR 0 2
78859: RET
// export function Shuffle ( array ) ; var i , index ; begin
78860: LD_INT 0
78862: PPUSH
78863: PPUSH
78864: PPUSH
// result := [ ] ;
78865: LD_ADDR_VAR 0 2
78869: PUSH
78870: EMPTY
78871: ST_TO_ADDR
// if not array then
78872: LD_VAR 0 1
78876: NOT
78877: IFFALSE 78881
// exit ;
78879: GO 78980
// Randomize ;
78881: CALL_OW 10
// for i = array downto 1 do
78885: LD_ADDR_VAR 0 3
78889: PUSH
78890: DOUBLE
78891: LD_VAR 0 1
78895: INC
78896: ST_TO_ADDR
78897: LD_INT 1
78899: PUSH
78900: FOR_DOWNTO
78901: IFFALSE 78978
// begin index := rand ( 1 , array ) ;
78903: LD_ADDR_VAR 0 4
78907: PUSH
78908: LD_INT 1
78910: PPUSH
78911: LD_VAR 0 1
78915: PPUSH
78916: CALL_OW 12
78920: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78921: LD_ADDR_VAR 0 2
78925: PUSH
78926: LD_VAR 0 2
78930: PPUSH
78931: LD_VAR 0 2
78935: PUSH
78936: LD_INT 1
78938: PLUS
78939: PPUSH
78940: LD_VAR 0 1
78944: PUSH
78945: LD_VAR 0 4
78949: ARRAY
78950: PPUSH
78951: CALL_OW 2
78955: ST_TO_ADDR
// array := Delete ( array , index ) ;
78956: LD_ADDR_VAR 0 1
78960: PUSH
78961: LD_VAR 0 1
78965: PPUSH
78966: LD_VAR 0 4
78970: PPUSH
78971: CALL_OW 3
78975: ST_TO_ADDR
// end ;
78976: GO 78900
78978: POP
78979: POP
// end ;
78980: LD_VAR 0 2
78984: RET
// export function GetBaseMaterials ( base ) ; begin
78985: LD_INT 0
78987: PPUSH
// result := [ 0 , 0 , 0 ] ;
78988: LD_ADDR_VAR 0 2
78992: PUSH
78993: LD_INT 0
78995: PUSH
78996: LD_INT 0
78998: PUSH
78999: LD_INT 0
79001: PUSH
79002: EMPTY
79003: LIST
79004: LIST
79005: LIST
79006: ST_TO_ADDR
// if not base then
79007: LD_VAR 0 1
79011: NOT
79012: IFFALSE 79016
// exit ;
79014: GO 79065
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79016: LD_ADDR_VAR 0 2
79020: PUSH
79021: LD_VAR 0 1
79025: PPUSH
79026: LD_INT 1
79028: PPUSH
79029: CALL_OW 275
79033: PUSH
79034: LD_VAR 0 1
79038: PPUSH
79039: LD_INT 2
79041: PPUSH
79042: CALL_OW 275
79046: PUSH
79047: LD_VAR 0 1
79051: PPUSH
79052: LD_INT 3
79054: PPUSH
79055: CALL_OW 275
79059: PUSH
79060: EMPTY
79061: LIST
79062: LIST
79063: LIST
79064: ST_TO_ADDR
// end ;
79065: LD_VAR 0 2
79069: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79070: LD_INT 0
79072: PPUSH
79073: PPUSH
// result := array ;
79074: LD_ADDR_VAR 0 3
79078: PUSH
79079: LD_VAR 0 1
79083: ST_TO_ADDR
// if size >= result then
79084: LD_VAR 0 2
79088: PUSH
79089: LD_VAR 0 3
79093: GREATEREQUAL
79094: IFFALSE 79098
// exit ;
79096: GO 79148
// if size then
79098: LD_VAR 0 2
79102: IFFALSE 79148
// for i := array downto size do
79104: LD_ADDR_VAR 0 4
79108: PUSH
79109: DOUBLE
79110: LD_VAR 0 1
79114: INC
79115: ST_TO_ADDR
79116: LD_VAR 0 2
79120: PUSH
79121: FOR_DOWNTO
79122: IFFALSE 79146
// result := Delete ( result , result ) ;
79124: LD_ADDR_VAR 0 3
79128: PUSH
79129: LD_VAR 0 3
79133: PPUSH
79134: LD_VAR 0 3
79138: PPUSH
79139: CALL_OW 3
79143: ST_TO_ADDR
79144: GO 79121
79146: POP
79147: POP
// end ;
79148: LD_VAR 0 3
79152: RET
// export function ComExit ( unit ) ; var tmp ; begin
79153: LD_INT 0
79155: PPUSH
79156: PPUSH
// if not IsInUnit ( unit ) then
79157: LD_VAR 0 1
79161: PPUSH
79162: CALL_OW 310
79166: NOT
79167: IFFALSE 79171
// exit ;
79169: GO 79231
// tmp := IsInUnit ( unit ) ;
79171: LD_ADDR_VAR 0 3
79175: PUSH
79176: LD_VAR 0 1
79180: PPUSH
79181: CALL_OW 310
79185: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79186: LD_VAR 0 3
79190: PPUSH
79191: CALL_OW 247
79195: PUSH
79196: LD_INT 2
79198: EQUAL
79199: IFFALSE 79212
// ComExitVehicle ( unit ) else
79201: LD_VAR 0 1
79205: PPUSH
79206: CALL_OW 121
79210: GO 79221
// ComExitBuilding ( unit ) ;
79212: LD_VAR 0 1
79216: PPUSH
79217: CALL_OW 122
// result := tmp ;
79221: LD_ADDR_VAR 0 2
79225: PUSH
79226: LD_VAR 0 3
79230: ST_TO_ADDR
// end ;
79231: LD_VAR 0 2
79235: RET
// export function ComExitAll ( units ) ; var i ; begin
79236: LD_INT 0
79238: PPUSH
79239: PPUSH
// if not units then
79240: LD_VAR 0 1
79244: NOT
79245: IFFALSE 79249
// exit ;
79247: GO 79275
// for i in units do
79249: LD_ADDR_VAR 0 3
79253: PUSH
79254: LD_VAR 0 1
79258: PUSH
79259: FOR_IN
79260: IFFALSE 79273
// ComExit ( i ) ;
79262: LD_VAR 0 3
79266: PPUSH
79267: CALL 79153 0 1
79271: GO 79259
79273: POP
79274: POP
// end ;
79275: LD_VAR 0 2
79279: RET
// export function ResetHc ; begin
79280: LD_INT 0
79282: PPUSH
// InitHc ;
79283: CALL_OW 19
// hc_importance := 0 ;
79287: LD_ADDR_OWVAR 32
79291: PUSH
79292: LD_INT 0
79294: ST_TO_ADDR
// end ;
79295: LD_VAR 0 1
79299: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79300: LD_INT 0
79302: PPUSH
79303: PPUSH
79304: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79305: LD_ADDR_VAR 0 6
79309: PUSH
79310: LD_VAR 0 1
79314: PUSH
79315: LD_VAR 0 3
79319: PLUS
79320: PUSH
79321: LD_INT 2
79323: DIV
79324: ST_TO_ADDR
// if _x < 0 then
79325: LD_VAR 0 6
79329: PUSH
79330: LD_INT 0
79332: LESS
79333: IFFALSE 79350
// _x := _x * - 1 ;
79335: LD_ADDR_VAR 0 6
79339: PUSH
79340: LD_VAR 0 6
79344: PUSH
79345: LD_INT 1
79347: NEG
79348: MUL
79349: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79350: LD_ADDR_VAR 0 7
79354: PUSH
79355: LD_VAR 0 2
79359: PUSH
79360: LD_VAR 0 4
79364: PLUS
79365: PUSH
79366: LD_INT 2
79368: DIV
79369: ST_TO_ADDR
// if _y < 0 then
79370: LD_VAR 0 7
79374: PUSH
79375: LD_INT 0
79377: LESS
79378: IFFALSE 79395
// _y := _y * - 1 ;
79380: LD_ADDR_VAR 0 7
79384: PUSH
79385: LD_VAR 0 7
79389: PUSH
79390: LD_INT 1
79392: NEG
79393: MUL
79394: ST_TO_ADDR
// result := [ _x , _y ] ;
79395: LD_ADDR_VAR 0 5
79399: PUSH
79400: LD_VAR 0 6
79404: PUSH
79405: LD_VAR 0 7
79409: PUSH
79410: EMPTY
79411: LIST
79412: LIST
79413: ST_TO_ADDR
// end ;
79414: LD_VAR 0 5
79418: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79419: LD_INT 0
79421: PPUSH
79422: PPUSH
79423: PPUSH
79424: PPUSH
// task := GetTaskList ( unit ) ;
79425: LD_ADDR_VAR 0 7
79429: PUSH
79430: LD_VAR 0 1
79434: PPUSH
79435: CALL_OW 437
79439: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79440: LD_VAR 0 7
79444: NOT
79445: PUSH
79446: LD_VAR 0 1
79450: PPUSH
79451: LD_VAR 0 2
79455: PPUSH
79456: CALL_OW 308
79460: NOT
79461: AND
79462: IFFALSE 79466
// exit ;
79464: GO 79584
// if IsInArea ( unit , area ) then
79466: LD_VAR 0 1
79470: PPUSH
79471: LD_VAR 0 2
79475: PPUSH
79476: CALL_OW 308
79480: IFFALSE 79498
// begin ComMoveToArea ( unit , goAway ) ;
79482: LD_VAR 0 1
79486: PPUSH
79487: LD_VAR 0 3
79491: PPUSH
79492: CALL_OW 113
// exit ;
79496: GO 79584
// end ; if task [ 1 ] [ 1 ] <> M then
79498: LD_VAR 0 7
79502: PUSH
79503: LD_INT 1
79505: ARRAY
79506: PUSH
79507: LD_INT 1
79509: ARRAY
79510: PUSH
79511: LD_STRING M
79513: NONEQUAL
79514: IFFALSE 79518
// exit ;
79516: GO 79584
// x := task [ 1 ] [ 2 ] ;
79518: LD_ADDR_VAR 0 5
79522: PUSH
79523: LD_VAR 0 7
79527: PUSH
79528: LD_INT 1
79530: ARRAY
79531: PUSH
79532: LD_INT 2
79534: ARRAY
79535: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79536: LD_ADDR_VAR 0 6
79540: PUSH
79541: LD_VAR 0 7
79545: PUSH
79546: LD_INT 1
79548: ARRAY
79549: PUSH
79550: LD_INT 3
79552: ARRAY
79553: ST_TO_ADDR
// if InArea ( x , y , area ) then
79554: LD_VAR 0 5
79558: PPUSH
79559: LD_VAR 0 6
79563: PPUSH
79564: LD_VAR 0 2
79568: PPUSH
79569: CALL_OW 309
79573: IFFALSE 79584
// ComStop ( unit ) ;
79575: LD_VAR 0 1
79579: PPUSH
79580: CALL_OW 141
// end ;
79584: LD_VAR 0 4
79588: RET
// export function Abs ( value ) ; begin
79589: LD_INT 0
79591: PPUSH
// result := value ;
79592: LD_ADDR_VAR 0 2
79596: PUSH
79597: LD_VAR 0 1
79601: ST_TO_ADDR
// if value < 0 then
79602: LD_VAR 0 1
79606: PUSH
79607: LD_INT 0
79609: LESS
79610: IFFALSE 79627
// result := value * - 1 ;
79612: LD_ADDR_VAR 0 2
79616: PUSH
79617: LD_VAR 0 1
79621: PUSH
79622: LD_INT 1
79624: NEG
79625: MUL
79626: ST_TO_ADDR
// end ;
79627: LD_VAR 0 2
79631: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79632: LD_INT 0
79634: PPUSH
79635: PPUSH
79636: PPUSH
79637: PPUSH
79638: PPUSH
79639: PPUSH
79640: PPUSH
79641: PPUSH
// if not unit or not building then
79642: LD_VAR 0 1
79646: NOT
79647: PUSH
79648: LD_VAR 0 2
79652: NOT
79653: OR
79654: IFFALSE 79658
// exit ;
79656: GO 79884
// x := GetX ( building ) ;
79658: LD_ADDR_VAR 0 4
79662: PUSH
79663: LD_VAR 0 2
79667: PPUSH
79668: CALL_OW 250
79672: ST_TO_ADDR
// y := GetY ( building ) ;
79673: LD_ADDR_VAR 0 6
79677: PUSH
79678: LD_VAR 0 2
79682: PPUSH
79683: CALL_OW 251
79687: ST_TO_ADDR
// d := GetDir ( building ) ;
79688: LD_ADDR_VAR 0 8
79692: PUSH
79693: LD_VAR 0 2
79697: PPUSH
79698: CALL_OW 254
79702: ST_TO_ADDR
// r := 4 ;
79703: LD_ADDR_VAR 0 9
79707: PUSH
79708: LD_INT 4
79710: ST_TO_ADDR
// for i := 1 to 5 do
79711: LD_ADDR_VAR 0 10
79715: PUSH
79716: DOUBLE
79717: LD_INT 1
79719: DEC
79720: ST_TO_ADDR
79721: LD_INT 5
79723: PUSH
79724: FOR_TO
79725: IFFALSE 79882
// begin _x := ShiftX ( x , d , r + i ) ;
79727: LD_ADDR_VAR 0 5
79731: PUSH
79732: LD_VAR 0 4
79736: PPUSH
79737: LD_VAR 0 8
79741: PPUSH
79742: LD_VAR 0 9
79746: PUSH
79747: LD_VAR 0 10
79751: PLUS
79752: PPUSH
79753: CALL_OW 272
79757: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79758: LD_ADDR_VAR 0 7
79762: PUSH
79763: LD_VAR 0 6
79767: PPUSH
79768: LD_VAR 0 8
79772: PPUSH
79773: LD_VAR 0 9
79777: PUSH
79778: LD_VAR 0 10
79782: PLUS
79783: PPUSH
79784: CALL_OW 273
79788: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79789: LD_VAR 0 5
79793: PPUSH
79794: LD_VAR 0 7
79798: PPUSH
79799: CALL_OW 488
79803: PUSH
79804: LD_VAR 0 5
79808: PPUSH
79809: LD_VAR 0 7
79813: PPUSH
79814: CALL_OW 428
79818: PPUSH
79819: CALL_OW 247
79823: PUSH
79824: LD_INT 3
79826: PUSH
79827: LD_INT 2
79829: PUSH
79830: EMPTY
79831: LIST
79832: LIST
79833: IN
79834: NOT
79835: AND
79836: IFFALSE 79880
// begin ComMoveXY ( unit , _x , _y ) ;
79838: LD_VAR 0 1
79842: PPUSH
79843: LD_VAR 0 5
79847: PPUSH
79848: LD_VAR 0 7
79852: PPUSH
79853: CALL_OW 111
// result := [ _x , _y ] ;
79857: LD_ADDR_VAR 0 3
79861: PUSH
79862: LD_VAR 0 5
79866: PUSH
79867: LD_VAR 0 7
79871: PUSH
79872: EMPTY
79873: LIST
79874: LIST
79875: ST_TO_ADDR
// exit ;
79876: POP
79877: POP
79878: GO 79884
// end ; end ;
79880: GO 79724
79882: POP
79883: POP
// end ;
79884: LD_VAR 0 3
79888: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79889: LD_INT 0
79891: PPUSH
79892: PPUSH
79893: PPUSH
// result := 0 ;
79894: LD_ADDR_VAR 0 3
79898: PUSH
79899: LD_INT 0
79901: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79902: LD_VAR 0 1
79906: PUSH
79907: LD_INT 0
79909: LESS
79910: PUSH
79911: LD_VAR 0 1
79915: PUSH
79916: LD_INT 8
79918: GREATER
79919: OR
79920: PUSH
79921: LD_VAR 0 2
79925: PUSH
79926: LD_INT 0
79928: LESS
79929: OR
79930: PUSH
79931: LD_VAR 0 2
79935: PUSH
79936: LD_INT 8
79938: GREATER
79939: OR
79940: IFFALSE 79944
// exit ;
79942: GO 80019
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79944: LD_ADDR_VAR 0 4
79948: PUSH
79949: LD_INT 22
79951: PUSH
79952: LD_VAR 0 2
79956: PUSH
79957: EMPTY
79958: LIST
79959: LIST
79960: PPUSH
79961: CALL_OW 69
79965: PUSH
79966: FOR_IN
79967: IFFALSE 80017
// begin un := UnitShoot ( i ) ;
79969: LD_ADDR_VAR 0 5
79973: PUSH
79974: LD_VAR 0 4
79978: PPUSH
79979: CALL_OW 504
79983: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79984: LD_VAR 0 5
79988: PPUSH
79989: CALL_OW 255
79993: PUSH
79994: LD_VAR 0 1
79998: EQUAL
79999: IFFALSE 80015
// begin result := un ;
80001: LD_ADDR_VAR 0 3
80005: PUSH
80006: LD_VAR 0 5
80010: ST_TO_ADDR
// exit ;
80011: POP
80012: POP
80013: GO 80019
// end ; end ;
80015: GO 79966
80017: POP
80018: POP
// end ;
80019: LD_VAR 0 3
80023: RET
// export function GetCargoBay ( units ) ; begin
80024: LD_INT 0
80026: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80027: LD_ADDR_VAR 0 2
80031: PUSH
80032: LD_VAR 0 1
80036: PPUSH
80037: LD_INT 2
80039: PUSH
80040: LD_INT 34
80042: PUSH
80043: LD_INT 12
80045: PUSH
80046: EMPTY
80047: LIST
80048: LIST
80049: PUSH
80050: LD_INT 34
80052: PUSH
80053: LD_INT 51
80055: PUSH
80056: EMPTY
80057: LIST
80058: LIST
80059: PUSH
80060: LD_INT 34
80062: PUSH
80063: LD_INT 32
80065: PUSH
80066: EMPTY
80067: LIST
80068: LIST
80069: PUSH
80070: LD_INT 34
80072: PUSH
80073: LD_INT 89
80075: PUSH
80076: EMPTY
80077: LIST
80078: LIST
80079: PUSH
80080: EMPTY
80081: LIST
80082: LIST
80083: LIST
80084: LIST
80085: LIST
80086: PPUSH
80087: CALL_OW 72
80091: ST_TO_ADDR
// end ;
80092: LD_VAR 0 2
80096: RET
// export function Negate ( value ) ; begin
80097: LD_INT 0
80099: PPUSH
// result := not value ;
80100: LD_ADDR_VAR 0 2
80104: PUSH
80105: LD_VAR 0 1
80109: NOT
80110: ST_TO_ADDR
// end ;
80111: LD_VAR 0 2
80115: RET
// export function Inc ( value ) ; begin
80116: LD_INT 0
80118: PPUSH
// result := value + 1 ;
80119: LD_ADDR_VAR 0 2
80123: PUSH
80124: LD_VAR 0 1
80128: PUSH
80129: LD_INT 1
80131: PLUS
80132: ST_TO_ADDR
// end ;
80133: LD_VAR 0 2
80137: RET
// export function Dec ( value ) ; begin
80138: LD_INT 0
80140: PPUSH
// result := value - 1 ;
80141: LD_ADDR_VAR 0 2
80145: PUSH
80146: LD_VAR 0 1
80150: PUSH
80151: LD_INT 1
80153: MINUS
80154: ST_TO_ADDR
// end ;
80155: LD_VAR 0 2
80159: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80160: LD_INT 0
80162: PPUSH
80163: PPUSH
80164: PPUSH
80165: PPUSH
80166: PPUSH
80167: PPUSH
80168: PPUSH
80169: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80170: LD_VAR 0 1
80174: PPUSH
80175: LD_VAR 0 2
80179: PPUSH
80180: CALL_OW 488
80184: NOT
80185: PUSH
80186: LD_VAR 0 3
80190: PPUSH
80191: LD_VAR 0 4
80195: PPUSH
80196: CALL_OW 488
80200: NOT
80201: OR
80202: IFFALSE 80215
// begin result := - 1 ;
80204: LD_ADDR_VAR 0 5
80208: PUSH
80209: LD_INT 1
80211: NEG
80212: ST_TO_ADDR
// exit ;
80213: GO 80450
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80215: LD_ADDR_VAR 0 12
80219: PUSH
80220: LD_VAR 0 1
80224: PPUSH
80225: LD_VAR 0 2
80229: PPUSH
80230: LD_VAR 0 3
80234: PPUSH
80235: LD_VAR 0 4
80239: PPUSH
80240: CALL 79300 0 4
80244: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80245: LD_ADDR_VAR 0 11
80249: PUSH
80250: LD_VAR 0 1
80254: PPUSH
80255: LD_VAR 0 2
80259: PPUSH
80260: LD_VAR 0 12
80264: PUSH
80265: LD_INT 1
80267: ARRAY
80268: PPUSH
80269: LD_VAR 0 12
80273: PUSH
80274: LD_INT 2
80276: ARRAY
80277: PPUSH
80278: CALL_OW 298
80282: ST_TO_ADDR
// distance := 9999 ;
80283: LD_ADDR_VAR 0 10
80287: PUSH
80288: LD_INT 9999
80290: ST_TO_ADDR
// for i := 0 to 5 do
80291: LD_ADDR_VAR 0 6
80295: PUSH
80296: DOUBLE
80297: LD_INT 0
80299: DEC
80300: ST_TO_ADDR
80301: LD_INT 5
80303: PUSH
80304: FOR_TO
80305: IFFALSE 80448
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80307: LD_ADDR_VAR 0 7
80311: PUSH
80312: LD_VAR 0 1
80316: PPUSH
80317: LD_VAR 0 6
80321: PPUSH
80322: LD_VAR 0 11
80326: PPUSH
80327: CALL_OW 272
80331: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80332: LD_ADDR_VAR 0 8
80336: PUSH
80337: LD_VAR 0 2
80341: PPUSH
80342: LD_VAR 0 6
80346: PPUSH
80347: LD_VAR 0 11
80351: PPUSH
80352: CALL_OW 273
80356: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80357: LD_VAR 0 7
80361: PPUSH
80362: LD_VAR 0 8
80366: PPUSH
80367: CALL_OW 488
80371: NOT
80372: IFFALSE 80376
// continue ;
80374: GO 80304
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80376: LD_ADDR_VAR 0 9
80380: PUSH
80381: LD_VAR 0 12
80385: PUSH
80386: LD_INT 1
80388: ARRAY
80389: PPUSH
80390: LD_VAR 0 12
80394: PUSH
80395: LD_INT 2
80397: ARRAY
80398: PPUSH
80399: LD_VAR 0 7
80403: PPUSH
80404: LD_VAR 0 8
80408: PPUSH
80409: CALL_OW 298
80413: ST_TO_ADDR
// if tmp < distance then
80414: LD_VAR 0 9
80418: PUSH
80419: LD_VAR 0 10
80423: LESS
80424: IFFALSE 80446
// begin result := i ;
80426: LD_ADDR_VAR 0 5
80430: PUSH
80431: LD_VAR 0 6
80435: ST_TO_ADDR
// distance := tmp ;
80436: LD_ADDR_VAR 0 10
80440: PUSH
80441: LD_VAR 0 9
80445: ST_TO_ADDR
// end ; end ;
80446: GO 80304
80448: POP
80449: POP
// end ;
80450: LD_VAR 0 5
80454: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80455: LD_INT 0
80457: PPUSH
80458: PPUSH
// if not driver or not IsInUnit ( driver ) then
80459: LD_VAR 0 1
80463: NOT
80464: PUSH
80465: LD_VAR 0 1
80469: PPUSH
80470: CALL_OW 310
80474: NOT
80475: OR
80476: IFFALSE 80480
// exit ;
80478: GO 80570
// vehicle := IsInUnit ( driver ) ;
80480: LD_ADDR_VAR 0 3
80484: PUSH
80485: LD_VAR 0 1
80489: PPUSH
80490: CALL_OW 310
80494: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80495: LD_VAR 0 1
80499: PPUSH
80500: LD_STRING \
80502: PUSH
80503: LD_INT 0
80505: PUSH
80506: LD_INT 0
80508: PUSH
80509: LD_INT 0
80511: PUSH
80512: LD_INT 0
80514: PUSH
80515: LD_INT 0
80517: PUSH
80518: LD_INT 0
80520: PUSH
80521: EMPTY
80522: LIST
80523: LIST
80524: LIST
80525: LIST
80526: LIST
80527: LIST
80528: LIST
80529: PUSH
80530: LD_STRING E
80532: PUSH
80533: LD_INT 0
80535: PUSH
80536: LD_INT 0
80538: PUSH
80539: LD_VAR 0 3
80543: PUSH
80544: LD_INT 0
80546: PUSH
80547: LD_INT 0
80549: PUSH
80550: LD_INT 0
80552: PUSH
80553: EMPTY
80554: LIST
80555: LIST
80556: LIST
80557: LIST
80558: LIST
80559: LIST
80560: LIST
80561: PUSH
80562: EMPTY
80563: LIST
80564: LIST
80565: PPUSH
80566: CALL_OW 446
// end ;
80570: LD_VAR 0 2
80574: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80575: LD_INT 0
80577: PPUSH
80578: PPUSH
// if not driver or not IsInUnit ( driver ) then
80579: LD_VAR 0 1
80583: NOT
80584: PUSH
80585: LD_VAR 0 1
80589: PPUSH
80590: CALL_OW 310
80594: NOT
80595: OR
80596: IFFALSE 80600
// exit ;
80598: GO 80690
// vehicle := IsInUnit ( driver ) ;
80600: LD_ADDR_VAR 0 3
80604: PUSH
80605: LD_VAR 0 1
80609: PPUSH
80610: CALL_OW 310
80614: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80615: LD_VAR 0 1
80619: PPUSH
80620: LD_STRING \
80622: PUSH
80623: LD_INT 0
80625: PUSH
80626: LD_INT 0
80628: PUSH
80629: LD_INT 0
80631: PUSH
80632: LD_INT 0
80634: PUSH
80635: LD_INT 0
80637: PUSH
80638: LD_INT 0
80640: PUSH
80641: EMPTY
80642: LIST
80643: LIST
80644: LIST
80645: LIST
80646: LIST
80647: LIST
80648: LIST
80649: PUSH
80650: LD_STRING E
80652: PUSH
80653: LD_INT 0
80655: PUSH
80656: LD_INT 0
80658: PUSH
80659: LD_VAR 0 3
80663: PUSH
80664: LD_INT 0
80666: PUSH
80667: LD_INT 0
80669: PUSH
80670: LD_INT 0
80672: PUSH
80673: EMPTY
80674: LIST
80675: LIST
80676: LIST
80677: LIST
80678: LIST
80679: LIST
80680: LIST
80681: PUSH
80682: EMPTY
80683: LIST
80684: LIST
80685: PPUSH
80686: CALL_OW 447
// end ;
80690: LD_VAR 0 2
80694: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80695: LD_INT 0
80697: PPUSH
80698: PPUSH
80699: PPUSH
// tmp := [ ] ;
80700: LD_ADDR_VAR 0 5
80704: PUSH
80705: EMPTY
80706: ST_TO_ADDR
// for i in units do
80707: LD_ADDR_VAR 0 4
80711: PUSH
80712: LD_VAR 0 1
80716: PUSH
80717: FOR_IN
80718: IFFALSE 80756
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80720: LD_ADDR_VAR 0 5
80724: PUSH
80725: LD_VAR 0 5
80729: PPUSH
80730: LD_VAR 0 5
80734: PUSH
80735: LD_INT 1
80737: PLUS
80738: PPUSH
80739: LD_VAR 0 4
80743: PPUSH
80744: CALL_OW 256
80748: PPUSH
80749: CALL_OW 2
80753: ST_TO_ADDR
80754: GO 80717
80756: POP
80757: POP
// if not tmp then
80758: LD_VAR 0 5
80762: NOT
80763: IFFALSE 80767
// exit ;
80765: GO 80815
// if asc then
80767: LD_VAR 0 2
80771: IFFALSE 80795
// result := SortListByListAsc ( units , tmp ) else
80773: LD_ADDR_VAR 0 3
80777: PUSH
80778: LD_VAR 0 1
80782: PPUSH
80783: LD_VAR 0 5
80787: PPUSH
80788: CALL_OW 76
80792: ST_TO_ADDR
80793: GO 80815
// result := SortListByListDesc ( units , tmp ) ;
80795: LD_ADDR_VAR 0 3
80799: PUSH
80800: LD_VAR 0 1
80804: PPUSH
80805: LD_VAR 0 5
80809: PPUSH
80810: CALL_OW 77
80814: ST_TO_ADDR
// end ;
80815: LD_VAR 0 3
80819: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80820: LD_INT 0
80822: PPUSH
80823: PPUSH
// task := GetTaskList ( mech ) ;
80824: LD_ADDR_VAR 0 4
80828: PUSH
80829: LD_VAR 0 1
80833: PPUSH
80834: CALL_OW 437
80838: ST_TO_ADDR
// if not task then
80839: LD_VAR 0 4
80843: NOT
80844: IFFALSE 80848
// exit ;
80846: GO 80890
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80848: LD_ADDR_VAR 0 3
80852: PUSH
80853: LD_VAR 0 4
80857: PUSH
80858: LD_INT 1
80860: ARRAY
80861: PUSH
80862: LD_INT 1
80864: ARRAY
80865: PUSH
80866: LD_STRING r
80868: EQUAL
80869: PUSH
80870: LD_VAR 0 4
80874: PUSH
80875: LD_INT 1
80877: ARRAY
80878: PUSH
80879: LD_INT 4
80881: ARRAY
80882: PUSH
80883: LD_VAR 0 2
80887: EQUAL
80888: AND
80889: ST_TO_ADDR
// end ;
80890: LD_VAR 0 3
80894: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80895: LD_INT 0
80897: PPUSH
// SetDir ( unit , d ) ;
80898: LD_VAR 0 1
80902: PPUSH
80903: LD_VAR 0 4
80907: PPUSH
80908: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80912: LD_VAR 0 1
80916: PPUSH
80917: LD_VAR 0 2
80921: PPUSH
80922: LD_VAR 0 3
80926: PPUSH
80927: LD_VAR 0 5
80931: PPUSH
80932: CALL_OW 48
// end ;
80936: LD_VAR 0 6
80940: RET
// export function ToNaturalNumber ( number ) ; begin
80941: LD_INT 0
80943: PPUSH
// result := number div 1 ;
80944: LD_ADDR_VAR 0 2
80948: PUSH
80949: LD_VAR 0 1
80953: PUSH
80954: LD_INT 1
80956: DIV
80957: ST_TO_ADDR
// if number < 0 then
80958: LD_VAR 0 1
80962: PUSH
80963: LD_INT 0
80965: LESS
80966: IFFALSE 80976
// result := 0 ;
80968: LD_ADDR_VAR 0 2
80972: PUSH
80973: LD_INT 0
80975: ST_TO_ADDR
// end ;
80976: LD_VAR 0 2
80980: RET
// export function SortByClass ( units , class ) ; var un ; begin
80981: LD_INT 0
80983: PPUSH
80984: PPUSH
// if not units or not class then
80985: LD_VAR 0 1
80989: NOT
80990: PUSH
80991: LD_VAR 0 2
80995: NOT
80996: OR
80997: IFFALSE 81001
// exit ;
80999: GO 81096
// result := [ ] ;
81001: LD_ADDR_VAR 0 3
81005: PUSH
81006: EMPTY
81007: ST_TO_ADDR
// for un in units do
81008: LD_ADDR_VAR 0 4
81012: PUSH
81013: LD_VAR 0 1
81017: PUSH
81018: FOR_IN
81019: IFFALSE 81094
// if GetClass ( un ) = class then
81021: LD_VAR 0 4
81025: PPUSH
81026: CALL_OW 257
81030: PUSH
81031: LD_VAR 0 2
81035: EQUAL
81036: IFFALSE 81063
// result := Insert ( result , 1 , un ) else
81038: LD_ADDR_VAR 0 3
81042: PUSH
81043: LD_VAR 0 3
81047: PPUSH
81048: LD_INT 1
81050: PPUSH
81051: LD_VAR 0 4
81055: PPUSH
81056: CALL_OW 2
81060: ST_TO_ADDR
81061: GO 81092
// result := Replace ( result , result + 1 , un ) ;
81063: LD_ADDR_VAR 0 3
81067: PUSH
81068: LD_VAR 0 3
81072: PPUSH
81073: LD_VAR 0 3
81077: PUSH
81078: LD_INT 1
81080: PLUS
81081: PPUSH
81082: LD_VAR 0 4
81086: PPUSH
81087: CALL_OW 1
81091: ST_TO_ADDR
81092: GO 81018
81094: POP
81095: POP
// end ;
81096: LD_VAR 0 3
81100: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81101: LD_INT 0
81103: PPUSH
81104: PPUSH
81105: PPUSH
81106: PPUSH
81107: PPUSH
81108: PPUSH
81109: PPUSH
// result := [ ] ;
81110: LD_ADDR_VAR 0 4
81114: PUSH
81115: EMPTY
81116: ST_TO_ADDR
// if x - r < 0 then
81117: LD_VAR 0 1
81121: PUSH
81122: LD_VAR 0 3
81126: MINUS
81127: PUSH
81128: LD_INT 0
81130: LESS
81131: IFFALSE 81143
// min_x := 0 else
81133: LD_ADDR_VAR 0 8
81137: PUSH
81138: LD_INT 0
81140: ST_TO_ADDR
81141: GO 81159
// min_x := x - r ;
81143: LD_ADDR_VAR 0 8
81147: PUSH
81148: LD_VAR 0 1
81152: PUSH
81153: LD_VAR 0 3
81157: MINUS
81158: ST_TO_ADDR
// if y - r < 0 then
81159: LD_VAR 0 2
81163: PUSH
81164: LD_VAR 0 3
81168: MINUS
81169: PUSH
81170: LD_INT 0
81172: LESS
81173: IFFALSE 81185
// min_y := 0 else
81175: LD_ADDR_VAR 0 7
81179: PUSH
81180: LD_INT 0
81182: ST_TO_ADDR
81183: GO 81201
// min_y := y - r ;
81185: LD_ADDR_VAR 0 7
81189: PUSH
81190: LD_VAR 0 2
81194: PUSH
81195: LD_VAR 0 3
81199: MINUS
81200: ST_TO_ADDR
// max_x := x + r ;
81201: LD_ADDR_VAR 0 9
81205: PUSH
81206: LD_VAR 0 1
81210: PUSH
81211: LD_VAR 0 3
81215: PLUS
81216: ST_TO_ADDR
// max_y := y + r ;
81217: LD_ADDR_VAR 0 10
81221: PUSH
81222: LD_VAR 0 2
81226: PUSH
81227: LD_VAR 0 3
81231: PLUS
81232: ST_TO_ADDR
// for _x = min_x to max_x do
81233: LD_ADDR_VAR 0 5
81237: PUSH
81238: DOUBLE
81239: LD_VAR 0 8
81243: DEC
81244: ST_TO_ADDR
81245: LD_VAR 0 9
81249: PUSH
81250: FOR_TO
81251: IFFALSE 81352
// for _y = min_y to max_y do
81253: LD_ADDR_VAR 0 6
81257: PUSH
81258: DOUBLE
81259: LD_VAR 0 7
81263: DEC
81264: ST_TO_ADDR
81265: LD_VAR 0 10
81269: PUSH
81270: FOR_TO
81271: IFFALSE 81348
// begin if not ValidHex ( _x , _y ) then
81273: LD_VAR 0 5
81277: PPUSH
81278: LD_VAR 0 6
81282: PPUSH
81283: CALL_OW 488
81287: NOT
81288: IFFALSE 81292
// continue ;
81290: GO 81270
// if GetResourceTypeXY ( _x , _y ) then
81292: LD_VAR 0 5
81296: PPUSH
81297: LD_VAR 0 6
81301: PPUSH
81302: CALL_OW 283
81306: IFFALSE 81346
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81308: LD_ADDR_VAR 0 4
81312: PUSH
81313: LD_VAR 0 4
81317: PPUSH
81318: LD_VAR 0 4
81322: PUSH
81323: LD_INT 1
81325: PLUS
81326: PPUSH
81327: LD_VAR 0 5
81331: PUSH
81332: LD_VAR 0 6
81336: PUSH
81337: EMPTY
81338: LIST
81339: LIST
81340: PPUSH
81341: CALL_OW 1
81345: ST_TO_ADDR
// end ;
81346: GO 81270
81348: POP
81349: POP
81350: GO 81250
81352: POP
81353: POP
// end ;
81354: LD_VAR 0 4
81358: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81359: LD_INT 0
81361: PPUSH
81362: PPUSH
81363: PPUSH
81364: PPUSH
81365: PPUSH
81366: PPUSH
81367: PPUSH
81368: PPUSH
// if not units then
81369: LD_VAR 0 1
81373: NOT
81374: IFFALSE 81378
// exit ;
81376: GO 81902
// result := UnitFilter ( units , [ f_ok ] ) ;
81378: LD_ADDR_VAR 0 3
81382: PUSH
81383: LD_VAR 0 1
81387: PPUSH
81388: LD_INT 50
81390: PUSH
81391: EMPTY
81392: LIST
81393: PPUSH
81394: CALL_OW 72
81398: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81399: LD_ADDR_VAR 0 8
81403: PUSH
81404: LD_VAR 0 1
81408: PUSH
81409: LD_INT 1
81411: ARRAY
81412: PPUSH
81413: CALL_OW 255
81417: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81418: LD_ADDR_VAR 0 10
81422: PUSH
81423: LD_INT 29
81425: PUSH
81426: LD_INT 91
81428: PUSH
81429: LD_INT 49
81431: PUSH
81432: EMPTY
81433: LIST
81434: LIST
81435: LIST
81436: ST_TO_ADDR
// if not result then
81437: LD_VAR 0 3
81441: NOT
81442: IFFALSE 81446
// exit ;
81444: GO 81902
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81446: LD_ADDR_VAR 0 5
81450: PUSH
81451: LD_INT 81
81453: PUSH
81454: LD_VAR 0 8
81458: PUSH
81459: EMPTY
81460: LIST
81461: LIST
81462: PPUSH
81463: CALL_OW 69
81467: ST_TO_ADDR
// for i in result do
81468: LD_ADDR_VAR 0 4
81472: PUSH
81473: LD_VAR 0 3
81477: PUSH
81478: FOR_IN
81479: IFFALSE 81900
// begin tag := GetTag ( i ) + 1 ;
81481: LD_ADDR_VAR 0 9
81485: PUSH
81486: LD_VAR 0 4
81490: PPUSH
81491: CALL_OW 110
81495: PUSH
81496: LD_INT 1
81498: PLUS
81499: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81500: LD_ADDR_VAR 0 7
81504: PUSH
81505: LD_VAR 0 4
81509: PPUSH
81510: CALL_OW 250
81514: PPUSH
81515: LD_VAR 0 4
81519: PPUSH
81520: CALL_OW 251
81524: PPUSH
81525: LD_INT 6
81527: PPUSH
81528: CALL 81101 0 3
81532: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81533: LD_VAR 0 4
81537: PPUSH
81538: CALL_OW 247
81542: PUSH
81543: LD_INT 2
81545: EQUAL
81546: PUSH
81547: LD_VAR 0 7
81551: AND
81552: PUSH
81553: LD_VAR 0 4
81557: PPUSH
81558: CALL_OW 264
81562: PUSH
81563: LD_VAR 0 10
81567: IN
81568: NOT
81569: AND
81570: IFFALSE 81609
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81572: LD_VAR 0 4
81576: PPUSH
81577: LD_VAR 0 7
81581: PUSH
81582: LD_INT 1
81584: ARRAY
81585: PUSH
81586: LD_INT 1
81588: ARRAY
81589: PPUSH
81590: LD_VAR 0 7
81594: PUSH
81595: LD_INT 1
81597: ARRAY
81598: PUSH
81599: LD_INT 2
81601: ARRAY
81602: PPUSH
81603: CALL_OW 116
81607: GO 81898
// if path > tag then
81609: LD_VAR 0 2
81613: PUSH
81614: LD_VAR 0 9
81618: GREATER
81619: IFFALSE 81827
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81621: LD_ADDR_VAR 0 6
81625: PUSH
81626: LD_VAR 0 5
81630: PPUSH
81631: LD_INT 91
81633: PUSH
81634: LD_VAR 0 4
81638: PUSH
81639: LD_INT 8
81641: PUSH
81642: EMPTY
81643: LIST
81644: LIST
81645: LIST
81646: PPUSH
81647: CALL_OW 72
81651: ST_TO_ADDR
// if nearEnemy then
81652: LD_VAR 0 6
81656: IFFALSE 81725
// begin if GetWeapon ( i ) = ru_time_lapser then
81658: LD_VAR 0 4
81662: PPUSH
81663: CALL_OW 264
81667: PUSH
81668: LD_INT 49
81670: EQUAL
81671: IFFALSE 81699
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81673: LD_VAR 0 4
81677: PPUSH
81678: LD_VAR 0 6
81682: PPUSH
81683: LD_VAR 0 4
81687: PPUSH
81688: CALL_OW 74
81692: PPUSH
81693: CALL_OW 112
81697: GO 81723
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81699: LD_VAR 0 4
81703: PPUSH
81704: LD_VAR 0 6
81708: PPUSH
81709: LD_VAR 0 4
81713: PPUSH
81714: CALL_OW 74
81718: PPUSH
81719: CALL 82827 0 2
// end else
81723: GO 81825
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81725: LD_VAR 0 4
81729: PPUSH
81730: LD_VAR 0 2
81734: PUSH
81735: LD_VAR 0 9
81739: ARRAY
81740: PUSH
81741: LD_INT 1
81743: ARRAY
81744: PPUSH
81745: LD_VAR 0 2
81749: PUSH
81750: LD_VAR 0 9
81754: ARRAY
81755: PUSH
81756: LD_INT 2
81758: ARRAY
81759: PPUSH
81760: CALL_OW 297
81764: PUSH
81765: LD_INT 6
81767: GREATER
81768: IFFALSE 81811
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81770: LD_VAR 0 4
81774: PPUSH
81775: LD_VAR 0 2
81779: PUSH
81780: LD_VAR 0 9
81784: ARRAY
81785: PUSH
81786: LD_INT 1
81788: ARRAY
81789: PPUSH
81790: LD_VAR 0 2
81794: PUSH
81795: LD_VAR 0 9
81799: ARRAY
81800: PUSH
81801: LD_INT 2
81803: ARRAY
81804: PPUSH
81805: CALL_OW 114
81809: GO 81825
// SetTag ( i , tag ) ;
81811: LD_VAR 0 4
81815: PPUSH
81816: LD_VAR 0 9
81820: PPUSH
81821: CALL_OW 109
// end else
81825: GO 81898
// if enemy then
81827: LD_VAR 0 5
81831: IFFALSE 81898
// begin if GetWeapon ( i ) = ru_time_lapser then
81833: LD_VAR 0 4
81837: PPUSH
81838: CALL_OW 264
81842: PUSH
81843: LD_INT 49
81845: EQUAL
81846: IFFALSE 81874
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81848: LD_VAR 0 4
81852: PPUSH
81853: LD_VAR 0 5
81857: PPUSH
81858: LD_VAR 0 4
81862: PPUSH
81863: CALL_OW 74
81867: PPUSH
81868: CALL_OW 112
81872: GO 81898
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81874: LD_VAR 0 4
81878: PPUSH
81879: LD_VAR 0 5
81883: PPUSH
81884: LD_VAR 0 4
81888: PPUSH
81889: CALL_OW 74
81893: PPUSH
81894: CALL 82827 0 2
// end ; end ;
81898: GO 81478
81900: POP
81901: POP
// end ;
81902: LD_VAR 0 3
81906: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81907: LD_INT 0
81909: PPUSH
81910: PPUSH
81911: PPUSH
// if not unit or IsInUnit ( unit ) then
81912: LD_VAR 0 1
81916: NOT
81917: PUSH
81918: LD_VAR 0 1
81922: PPUSH
81923: CALL_OW 310
81927: OR
81928: IFFALSE 81932
// exit ;
81930: GO 82023
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81932: LD_ADDR_VAR 0 4
81936: PUSH
81937: LD_VAR 0 1
81941: PPUSH
81942: CALL_OW 250
81946: PPUSH
81947: LD_VAR 0 2
81951: PPUSH
81952: LD_INT 1
81954: PPUSH
81955: CALL_OW 272
81959: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81960: LD_ADDR_VAR 0 5
81964: PUSH
81965: LD_VAR 0 1
81969: PPUSH
81970: CALL_OW 251
81974: PPUSH
81975: LD_VAR 0 2
81979: PPUSH
81980: LD_INT 1
81982: PPUSH
81983: CALL_OW 273
81987: ST_TO_ADDR
// if ValidHex ( x , y ) then
81988: LD_VAR 0 4
81992: PPUSH
81993: LD_VAR 0 5
81997: PPUSH
81998: CALL_OW 488
82002: IFFALSE 82023
// ComTurnXY ( unit , x , y ) ;
82004: LD_VAR 0 1
82008: PPUSH
82009: LD_VAR 0 4
82013: PPUSH
82014: LD_VAR 0 5
82018: PPUSH
82019: CALL_OW 118
// end ;
82023: LD_VAR 0 3
82027: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82028: LD_INT 0
82030: PPUSH
82031: PPUSH
// result := false ;
82032: LD_ADDR_VAR 0 3
82036: PUSH
82037: LD_INT 0
82039: ST_TO_ADDR
// if not units then
82040: LD_VAR 0 2
82044: NOT
82045: IFFALSE 82049
// exit ;
82047: GO 82094
// for i in units do
82049: LD_ADDR_VAR 0 4
82053: PUSH
82054: LD_VAR 0 2
82058: PUSH
82059: FOR_IN
82060: IFFALSE 82092
// if See ( side , i ) then
82062: LD_VAR 0 1
82066: PPUSH
82067: LD_VAR 0 4
82071: PPUSH
82072: CALL_OW 292
82076: IFFALSE 82090
// begin result := true ;
82078: LD_ADDR_VAR 0 3
82082: PUSH
82083: LD_INT 1
82085: ST_TO_ADDR
// exit ;
82086: POP
82087: POP
82088: GO 82094
// end ;
82090: GO 82059
82092: POP
82093: POP
// end ;
82094: LD_VAR 0 3
82098: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82099: LD_INT 0
82101: PPUSH
82102: PPUSH
82103: PPUSH
82104: PPUSH
// if not unit or not points then
82105: LD_VAR 0 1
82109: NOT
82110: PUSH
82111: LD_VAR 0 2
82115: NOT
82116: OR
82117: IFFALSE 82121
// exit ;
82119: GO 82211
// dist := 99999 ;
82121: LD_ADDR_VAR 0 5
82125: PUSH
82126: LD_INT 99999
82128: ST_TO_ADDR
// for i in points do
82129: LD_ADDR_VAR 0 4
82133: PUSH
82134: LD_VAR 0 2
82138: PUSH
82139: FOR_IN
82140: IFFALSE 82209
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82142: LD_ADDR_VAR 0 6
82146: PUSH
82147: LD_VAR 0 1
82151: PPUSH
82152: LD_VAR 0 4
82156: PUSH
82157: LD_INT 1
82159: ARRAY
82160: PPUSH
82161: LD_VAR 0 4
82165: PUSH
82166: LD_INT 2
82168: ARRAY
82169: PPUSH
82170: CALL_OW 297
82174: ST_TO_ADDR
// if tmpDist < dist then
82175: LD_VAR 0 6
82179: PUSH
82180: LD_VAR 0 5
82184: LESS
82185: IFFALSE 82207
// begin result := i ;
82187: LD_ADDR_VAR 0 3
82191: PUSH
82192: LD_VAR 0 4
82196: ST_TO_ADDR
// dist := tmpDist ;
82197: LD_ADDR_VAR 0 5
82201: PUSH
82202: LD_VAR 0 6
82206: ST_TO_ADDR
// end ; end ;
82207: GO 82139
82209: POP
82210: POP
// end ;
82211: LD_VAR 0 3
82215: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82216: LD_INT 0
82218: PPUSH
// uc_side := side ;
82219: LD_ADDR_OWVAR 20
82223: PUSH
82224: LD_VAR 0 1
82228: ST_TO_ADDR
// uc_nation := 3 ;
82229: LD_ADDR_OWVAR 21
82233: PUSH
82234: LD_INT 3
82236: ST_TO_ADDR
// vc_chassis := 25 ;
82237: LD_ADDR_OWVAR 37
82241: PUSH
82242: LD_INT 25
82244: ST_TO_ADDR
// vc_engine := engine_siberite ;
82245: LD_ADDR_OWVAR 39
82249: PUSH
82250: LD_INT 3
82252: ST_TO_ADDR
// vc_control := control_computer ;
82253: LD_ADDR_OWVAR 38
82257: PUSH
82258: LD_INT 3
82260: ST_TO_ADDR
// vc_weapon := 59 ;
82261: LD_ADDR_OWVAR 40
82265: PUSH
82266: LD_INT 59
82268: ST_TO_ADDR
// result := CreateVehicle ;
82269: LD_ADDR_VAR 0 5
82273: PUSH
82274: CALL_OW 45
82278: ST_TO_ADDR
// SetDir ( result , d ) ;
82279: LD_VAR 0 5
82283: PPUSH
82284: LD_VAR 0 4
82288: PPUSH
82289: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82293: LD_VAR 0 5
82297: PPUSH
82298: LD_VAR 0 2
82302: PPUSH
82303: LD_VAR 0 3
82307: PPUSH
82308: LD_INT 0
82310: PPUSH
82311: CALL_OW 48
// end ;
82315: LD_VAR 0 5
82319: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82320: LD_INT 0
82322: PPUSH
82323: PPUSH
82324: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82325: LD_ADDR_VAR 0 2
82329: PUSH
82330: LD_INT 0
82332: PUSH
82333: LD_INT 0
82335: PUSH
82336: LD_INT 0
82338: PUSH
82339: LD_INT 0
82341: PUSH
82342: EMPTY
82343: LIST
82344: LIST
82345: LIST
82346: LIST
82347: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82348: LD_VAR 0 1
82352: NOT
82353: PUSH
82354: LD_VAR 0 1
82358: PPUSH
82359: CALL_OW 264
82363: PUSH
82364: LD_INT 12
82366: PUSH
82367: LD_INT 51
82369: PUSH
82370: LD_INT 32
82372: PUSH
82373: LD_INT 89
82375: PUSH
82376: EMPTY
82377: LIST
82378: LIST
82379: LIST
82380: LIST
82381: IN
82382: NOT
82383: OR
82384: IFFALSE 82388
// exit ;
82386: GO 82486
// for i := 1 to 3 do
82388: LD_ADDR_VAR 0 3
82392: PUSH
82393: DOUBLE
82394: LD_INT 1
82396: DEC
82397: ST_TO_ADDR
82398: LD_INT 3
82400: PUSH
82401: FOR_TO
82402: IFFALSE 82484
// begin tmp := GetCargo ( cargo , i ) ;
82404: LD_ADDR_VAR 0 4
82408: PUSH
82409: LD_VAR 0 1
82413: PPUSH
82414: LD_VAR 0 3
82418: PPUSH
82419: CALL_OW 289
82423: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82424: LD_ADDR_VAR 0 2
82428: PUSH
82429: LD_VAR 0 2
82433: PPUSH
82434: LD_VAR 0 3
82438: PPUSH
82439: LD_VAR 0 4
82443: PPUSH
82444: CALL_OW 1
82448: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82449: LD_ADDR_VAR 0 2
82453: PUSH
82454: LD_VAR 0 2
82458: PPUSH
82459: LD_INT 4
82461: PPUSH
82462: LD_VAR 0 2
82466: PUSH
82467: LD_INT 4
82469: ARRAY
82470: PUSH
82471: LD_VAR 0 4
82475: PLUS
82476: PPUSH
82477: CALL_OW 1
82481: ST_TO_ADDR
// end ;
82482: GO 82401
82484: POP
82485: POP
// end ;
82486: LD_VAR 0 2
82490: RET
// export function Length ( array ) ; begin
82491: LD_INT 0
82493: PPUSH
// result := array + 0 ;
82494: LD_ADDR_VAR 0 2
82498: PUSH
82499: LD_VAR 0 1
82503: PUSH
82504: LD_INT 0
82506: PLUS
82507: ST_TO_ADDR
// end ;
82508: LD_VAR 0 2
82512: RET
// export function PrepareArray ( array ) ; begin
82513: LD_INT 0
82515: PPUSH
// result := array diff 0 ;
82516: LD_ADDR_VAR 0 2
82520: PUSH
82521: LD_VAR 0 1
82525: PUSH
82526: LD_INT 0
82528: DIFF
82529: ST_TO_ADDR
// if not result [ 1 ] then
82530: LD_VAR 0 2
82534: PUSH
82535: LD_INT 1
82537: ARRAY
82538: NOT
82539: IFFALSE 82559
// result := Delete ( result , 1 ) ;
82541: LD_ADDR_VAR 0 2
82545: PUSH
82546: LD_VAR 0 2
82550: PPUSH
82551: LD_INT 1
82553: PPUSH
82554: CALL_OW 3
82558: ST_TO_ADDR
// end ;
82559: LD_VAR 0 2
82563: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82564: LD_INT 0
82566: PPUSH
82567: PPUSH
82568: PPUSH
82569: PPUSH
// sibRocketRange := 25 ;
82570: LD_ADDR_VAR 0 6
82574: PUSH
82575: LD_INT 25
82577: ST_TO_ADDR
// result := false ;
82578: LD_ADDR_VAR 0 4
82582: PUSH
82583: LD_INT 0
82585: ST_TO_ADDR
// for i := 0 to 5 do
82586: LD_ADDR_VAR 0 5
82590: PUSH
82591: DOUBLE
82592: LD_INT 0
82594: DEC
82595: ST_TO_ADDR
82596: LD_INT 5
82598: PUSH
82599: FOR_TO
82600: IFFALSE 82667
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82602: LD_VAR 0 1
82606: PPUSH
82607: LD_VAR 0 5
82611: PPUSH
82612: LD_VAR 0 6
82616: PPUSH
82617: CALL_OW 272
82621: PPUSH
82622: LD_VAR 0 2
82626: PPUSH
82627: LD_VAR 0 5
82631: PPUSH
82632: LD_VAR 0 6
82636: PPUSH
82637: CALL_OW 273
82641: PPUSH
82642: LD_VAR 0 3
82646: PPUSH
82647: CALL_OW 309
82651: IFFALSE 82665
// begin result := true ;
82653: LD_ADDR_VAR 0 4
82657: PUSH
82658: LD_INT 1
82660: ST_TO_ADDR
// exit ;
82661: POP
82662: POP
82663: GO 82669
// end ;
82665: GO 82599
82667: POP
82668: POP
// end ;
82669: LD_VAR 0 4
82673: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82674: LD_INT 0
82676: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82677: LD_VAR 0 1
82681: PPUSH
82682: LD_VAR 0 2
82686: PPUSH
82687: LD_INT 0
82689: PPUSH
82690: LD_INT 0
82692: PPUSH
82693: LD_INT 1
82695: PPUSH
82696: LD_INT 0
82698: PPUSH
82699: CALL_OW 587
// end ;
82703: LD_VAR 0 3
82707: RET
// export function CenterOnNow ( unit ) ; begin
82708: LD_INT 0
82710: PPUSH
// result := IsInUnit ( unit ) ;
82711: LD_ADDR_VAR 0 2
82715: PUSH
82716: LD_VAR 0 1
82720: PPUSH
82721: CALL_OW 310
82725: ST_TO_ADDR
// if not result then
82726: LD_VAR 0 2
82730: NOT
82731: IFFALSE 82743
// result := unit ;
82733: LD_ADDR_VAR 0 2
82737: PUSH
82738: LD_VAR 0 1
82742: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82743: LD_VAR 0 1
82747: PPUSH
82748: CALL_OW 87
// end ;
82752: LD_VAR 0 2
82756: RET
// export function ComMoveHex ( unit , hex ) ; begin
82757: LD_INT 0
82759: PPUSH
// if not hex then
82760: LD_VAR 0 2
82764: NOT
82765: IFFALSE 82769
// exit ;
82767: GO 82822
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82769: LD_VAR 0 2
82773: PUSH
82774: LD_INT 1
82776: ARRAY
82777: PPUSH
82778: LD_VAR 0 2
82782: PUSH
82783: LD_INT 2
82785: ARRAY
82786: PPUSH
82787: CALL_OW 428
82791: IFFALSE 82795
// exit ;
82793: GO 82822
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82795: LD_VAR 0 1
82799: PPUSH
82800: LD_VAR 0 2
82804: PUSH
82805: LD_INT 1
82807: ARRAY
82808: PPUSH
82809: LD_VAR 0 2
82813: PUSH
82814: LD_INT 2
82816: ARRAY
82817: PPUSH
82818: CALL_OW 111
// end ;
82822: LD_VAR 0 3
82826: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82827: LD_INT 0
82829: PPUSH
82830: PPUSH
82831: PPUSH
// if not unit or not enemy then
82832: LD_VAR 0 1
82836: NOT
82837: PUSH
82838: LD_VAR 0 2
82842: NOT
82843: OR
82844: IFFALSE 82848
// exit ;
82846: GO 82972
// x := GetX ( enemy ) ;
82848: LD_ADDR_VAR 0 4
82852: PUSH
82853: LD_VAR 0 2
82857: PPUSH
82858: CALL_OW 250
82862: ST_TO_ADDR
// y := GetY ( enemy ) ;
82863: LD_ADDR_VAR 0 5
82867: PUSH
82868: LD_VAR 0 2
82872: PPUSH
82873: CALL_OW 251
82877: ST_TO_ADDR
// if ValidHex ( x , y ) then
82878: LD_VAR 0 4
82882: PPUSH
82883: LD_VAR 0 5
82887: PPUSH
82888: CALL_OW 488
82892: IFFALSE 82972
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82894: LD_VAR 0 2
82898: PPUSH
82899: CALL_OW 247
82903: PUSH
82904: LD_INT 3
82906: PUSH
82907: LD_INT 2
82909: PUSH
82910: EMPTY
82911: LIST
82912: LIST
82913: IN
82914: PUSH
82915: LD_VAR 0 1
82919: PPUSH
82920: CALL_OW 255
82924: PPUSH
82925: LD_VAR 0 2
82929: PPUSH
82930: CALL_OW 292
82934: OR
82935: IFFALSE 82953
// ComAttackUnit ( unit , enemy ) else
82937: LD_VAR 0 1
82941: PPUSH
82942: LD_VAR 0 2
82946: PPUSH
82947: CALL_OW 115
82951: GO 82972
// ComAgressiveMove ( unit , x , y ) ;
82953: LD_VAR 0 1
82957: PPUSH
82958: LD_VAR 0 4
82962: PPUSH
82963: LD_VAR 0 5
82967: PPUSH
82968: CALL_OW 114
// end ;
82972: LD_VAR 0 3
82976: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82977: LD_INT 0
82979: PPUSH
82980: PPUSH
82981: PPUSH
// list := AreaToList ( area , 0 ) ;
82982: LD_ADDR_VAR 0 5
82986: PUSH
82987: LD_VAR 0 1
82991: PPUSH
82992: LD_INT 0
82994: PPUSH
82995: CALL_OW 517
82999: ST_TO_ADDR
// if not list then
83000: LD_VAR 0 5
83004: NOT
83005: IFFALSE 83009
// exit ;
83007: GO 83139
// if all then
83009: LD_VAR 0 2
83013: IFFALSE 83101
// begin for i := 1 to list [ 1 ] do
83015: LD_ADDR_VAR 0 4
83019: PUSH
83020: DOUBLE
83021: LD_INT 1
83023: DEC
83024: ST_TO_ADDR
83025: LD_VAR 0 5
83029: PUSH
83030: LD_INT 1
83032: ARRAY
83033: PUSH
83034: FOR_TO
83035: IFFALSE 83097
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83037: LD_ADDR_VAR 0 3
83041: PUSH
83042: LD_VAR 0 3
83046: PPUSH
83047: LD_VAR 0 3
83051: PUSH
83052: LD_INT 1
83054: PLUS
83055: PPUSH
83056: LD_VAR 0 5
83060: PUSH
83061: LD_INT 1
83063: ARRAY
83064: PUSH
83065: LD_VAR 0 4
83069: ARRAY
83070: PUSH
83071: LD_VAR 0 5
83075: PUSH
83076: LD_INT 2
83078: ARRAY
83079: PUSH
83080: LD_VAR 0 4
83084: ARRAY
83085: PUSH
83086: EMPTY
83087: LIST
83088: LIST
83089: PPUSH
83090: CALL_OW 1
83094: ST_TO_ADDR
83095: GO 83034
83097: POP
83098: POP
// exit ;
83099: GO 83139
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83101: LD_ADDR_VAR 0 3
83105: PUSH
83106: LD_VAR 0 5
83110: PUSH
83111: LD_INT 1
83113: ARRAY
83114: PUSH
83115: LD_INT 1
83117: ARRAY
83118: PUSH
83119: LD_VAR 0 5
83123: PUSH
83124: LD_INT 2
83126: ARRAY
83127: PUSH
83128: LD_INT 1
83130: ARRAY
83131: PUSH
83132: EMPTY
83133: LIST
83134: LIST
83135: PUSH
83136: EMPTY
83137: LIST
83138: ST_TO_ADDR
// end ;
83139: LD_VAR 0 3
83143: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83144: LD_INT 0
83146: PPUSH
83147: PPUSH
// list := AreaToList ( area , 0 ) ;
83148: LD_ADDR_VAR 0 4
83152: PUSH
83153: LD_VAR 0 1
83157: PPUSH
83158: LD_INT 0
83160: PPUSH
83161: CALL_OW 517
83165: ST_TO_ADDR
// if not list then
83166: LD_VAR 0 4
83170: NOT
83171: IFFALSE 83175
// exit ;
83173: GO 83216
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83175: LD_ADDR_VAR 0 3
83179: PUSH
83180: LD_VAR 0 4
83184: PUSH
83185: LD_INT 1
83187: ARRAY
83188: PUSH
83189: LD_INT 1
83191: ARRAY
83192: PUSH
83193: LD_VAR 0 4
83197: PUSH
83198: LD_INT 2
83200: ARRAY
83201: PUSH
83202: LD_INT 1
83204: ARRAY
83205: PUSH
83206: LD_VAR 0 2
83210: PUSH
83211: EMPTY
83212: LIST
83213: LIST
83214: LIST
83215: ST_TO_ADDR
// end ;
83216: LD_VAR 0 3
83220: RET
// export function First ( array ) ; begin
83221: LD_INT 0
83223: PPUSH
// if not array then
83224: LD_VAR 0 1
83228: NOT
83229: IFFALSE 83233
// exit ;
83231: GO 83247
// result := array [ 1 ] ;
83233: LD_ADDR_VAR 0 2
83237: PUSH
83238: LD_VAR 0 1
83242: PUSH
83243: LD_INT 1
83245: ARRAY
83246: ST_TO_ADDR
// end ;
83247: LD_VAR 0 2
83251: RET
// export function Last ( array ) ; begin
83252: LD_INT 0
83254: PPUSH
// if not array then
83255: LD_VAR 0 1
83259: NOT
83260: IFFALSE 83264
// exit ;
83262: GO 83280
// result := array [ array ] ;
83264: LD_ADDR_VAR 0 2
83268: PUSH
83269: LD_VAR 0 1
83273: PUSH
83274: LD_VAR 0 1
83278: ARRAY
83279: ST_TO_ADDR
// end ;
83280: LD_VAR 0 2
83284: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83285: LD_INT 0
83287: PPUSH
83288: PPUSH
// result := [ ] ;
83289: LD_ADDR_VAR 0 5
83293: PUSH
83294: EMPTY
83295: ST_TO_ADDR
// if not array then
83296: LD_VAR 0 1
83300: NOT
83301: IFFALSE 83305
// exit ;
83303: GO 83417
// for i := 1 to array do
83305: LD_ADDR_VAR 0 6
83309: PUSH
83310: DOUBLE
83311: LD_INT 1
83313: DEC
83314: ST_TO_ADDR
83315: LD_VAR 0 1
83319: PUSH
83320: FOR_TO
83321: IFFALSE 83415
// if array [ i ] [ index ] = value then
83323: LD_VAR 0 1
83327: PUSH
83328: LD_VAR 0 6
83332: ARRAY
83333: PUSH
83334: LD_VAR 0 2
83338: ARRAY
83339: PUSH
83340: LD_VAR 0 3
83344: EQUAL
83345: IFFALSE 83413
// begin if indexColumn then
83347: LD_VAR 0 4
83351: IFFALSE 83387
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83353: LD_ADDR_VAR 0 5
83357: PUSH
83358: LD_VAR 0 5
83362: PPUSH
83363: LD_VAR 0 1
83367: PUSH
83368: LD_VAR 0 6
83372: ARRAY
83373: PUSH
83374: LD_VAR 0 4
83378: ARRAY
83379: PPUSH
83380: CALL 78755 0 2
83384: ST_TO_ADDR
83385: GO 83413
// result := Join ( result , array [ i ] ) ;
83387: LD_ADDR_VAR 0 5
83391: PUSH
83392: LD_VAR 0 5
83396: PPUSH
83397: LD_VAR 0 1
83401: PUSH
83402: LD_VAR 0 6
83406: ARRAY
83407: PPUSH
83408: CALL 78755 0 2
83412: ST_TO_ADDR
// end ;
83413: GO 83320
83415: POP
83416: POP
// end ;
83417: LD_VAR 0 5
83421: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83422: LD_INT 0
83424: PPUSH
83425: PPUSH
83426: PPUSH
// if btype = b_depot then
83427: LD_VAR 0 2
83431: PUSH
83432: LD_INT 0
83434: EQUAL
83435: IFFALSE 83447
// begin result := true ;
83437: LD_ADDR_VAR 0 3
83441: PUSH
83442: LD_INT 1
83444: ST_TO_ADDR
// exit ;
83445: GO 83563
// end ; pom := GetBase ( depot ) ;
83447: LD_ADDR_VAR 0 4
83451: PUSH
83452: LD_VAR 0 1
83456: PPUSH
83457: CALL_OW 274
83461: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83462: LD_ADDR_VAR 0 5
83466: PUSH
83467: LD_VAR 0 2
83471: PPUSH
83472: LD_VAR 0 1
83476: PPUSH
83477: CALL_OW 248
83481: PPUSH
83482: CALL_OW 450
83486: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83487: LD_ADDR_VAR 0 3
83491: PUSH
83492: LD_VAR 0 4
83496: PPUSH
83497: LD_INT 1
83499: PPUSH
83500: CALL_OW 275
83504: PUSH
83505: LD_VAR 0 5
83509: PUSH
83510: LD_INT 1
83512: ARRAY
83513: GREATEREQUAL
83514: PUSH
83515: LD_VAR 0 4
83519: PPUSH
83520: LD_INT 2
83522: PPUSH
83523: CALL_OW 275
83527: PUSH
83528: LD_VAR 0 5
83532: PUSH
83533: LD_INT 2
83535: ARRAY
83536: GREATEREQUAL
83537: AND
83538: PUSH
83539: LD_VAR 0 4
83543: PPUSH
83544: LD_INT 3
83546: PPUSH
83547: CALL_OW 275
83551: PUSH
83552: LD_VAR 0 5
83556: PUSH
83557: LD_INT 3
83559: ARRAY
83560: GREATEREQUAL
83561: AND
83562: ST_TO_ADDR
// end ;
83563: LD_VAR 0 3
83567: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83568: LD_INT 0
83570: PPUSH
// if not vehicles or not parkingPoint then
83571: LD_VAR 0 1
83575: NOT
83576: PUSH
83577: LD_VAR 0 2
83581: NOT
83582: OR
83583: IFFALSE 83587
// exit ;
83585: GO 83685
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83587: LD_ADDR_VAR 0 1
83591: PUSH
83592: LD_VAR 0 1
83596: PPUSH
83597: LD_INT 50
83599: PUSH
83600: EMPTY
83601: LIST
83602: PUSH
83603: LD_INT 3
83605: PUSH
83606: LD_INT 92
83608: PUSH
83609: LD_VAR 0 2
83613: PUSH
83614: LD_INT 1
83616: ARRAY
83617: PUSH
83618: LD_VAR 0 2
83622: PUSH
83623: LD_INT 2
83625: ARRAY
83626: PUSH
83627: LD_INT 8
83629: PUSH
83630: EMPTY
83631: LIST
83632: LIST
83633: LIST
83634: LIST
83635: PUSH
83636: EMPTY
83637: LIST
83638: LIST
83639: PUSH
83640: EMPTY
83641: LIST
83642: LIST
83643: PPUSH
83644: CALL_OW 72
83648: ST_TO_ADDR
// if not vehicles then
83649: LD_VAR 0 1
83653: NOT
83654: IFFALSE 83658
// exit ;
83656: GO 83685
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83658: LD_VAR 0 1
83662: PPUSH
83663: LD_VAR 0 2
83667: PUSH
83668: LD_INT 1
83670: ARRAY
83671: PPUSH
83672: LD_VAR 0 2
83676: PUSH
83677: LD_INT 2
83679: ARRAY
83680: PPUSH
83681: CALL_OW 111
// end ;
83685: LD_VAR 0 3
83689: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83690: LD_INT 0
83692: PPUSH
83693: PPUSH
83694: PPUSH
// if not side or not area then
83695: LD_VAR 0 1
83699: NOT
83700: PUSH
83701: LD_VAR 0 2
83705: NOT
83706: OR
83707: IFFALSE 83711
// exit ;
83709: GO 83830
// tmp := AreaToList ( area , 0 ) ;
83711: LD_ADDR_VAR 0 5
83715: PUSH
83716: LD_VAR 0 2
83720: PPUSH
83721: LD_INT 0
83723: PPUSH
83724: CALL_OW 517
83728: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83729: LD_ADDR_VAR 0 4
83733: PUSH
83734: DOUBLE
83735: LD_INT 1
83737: DEC
83738: ST_TO_ADDR
83739: LD_VAR 0 5
83743: PUSH
83744: LD_INT 1
83746: ARRAY
83747: PUSH
83748: FOR_TO
83749: IFFALSE 83828
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83751: LD_VAR 0 5
83755: PUSH
83756: LD_INT 1
83758: ARRAY
83759: PUSH
83760: LD_VAR 0 4
83764: ARRAY
83765: PPUSH
83766: LD_VAR 0 5
83770: PUSH
83771: LD_INT 2
83773: ARRAY
83774: PUSH
83775: LD_VAR 0 4
83779: ARRAY
83780: PPUSH
83781: CALL_OW 351
83785: IFFALSE 83826
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83787: LD_VAR 0 5
83791: PUSH
83792: LD_INT 1
83794: ARRAY
83795: PUSH
83796: LD_VAR 0 4
83800: ARRAY
83801: PPUSH
83802: LD_VAR 0 5
83806: PUSH
83807: LD_INT 2
83809: ARRAY
83810: PUSH
83811: LD_VAR 0 4
83815: ARRAY
83816: PPUSH
83817: LD_VAR 0 1
83821: PPUSH
83822: CALL_OW 244
// end ;
83826: GO 83748
83828: POP
83829: POP
// end ; end_of_file
83830: LD_VAR 0 3
83834: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83835: LD_VAR 0 1
83839: PUSH
83840: LD_INT 200
83842: DOUBLE
83843: GREATEREQUAL
83844: IFFALSE 83852
83846: LD_INT 299
83848: DOUBLE
83849: LESSEQUAL
83850: IFTRUE 83854
83852: GO 83886
83854: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83855: LD_VAR 0 1
83859: PPUSH
83860: LD_VAR 0 2
83864: PPUSH
83865: LD_VAR 0 3
83869: PPUSH
83870: LD_VAR 0 4
83874: PPUSH
83875: LD_VAR 0 5
83879: PPUSH
83880: CALL 36546 0 5
83884: GO 83963
83886: LD_INT 300
83888: DOUBLE
83889: GREATEREQUAL
83890: IFFALSE 83898
83892: LD_INT 399
83894: DOUBLE
83895: LESSEQUAL
83896: IFTRUE 83900
83898: GO 83962
83900: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83901: LD_VAR 0 1
83905: PPUSH
83906: LD_VAR 0 2
83910: PPUSH
83911: LD_VAR 0 3
83915: PPUSH
83916: LD_VAR 0 4
83920: PPUSH
83921: LD_VAR 0 5
83925: PPUSH
83926: LD_VAR 0 6
83930: PPUSH
83931: LD_VAR 0 7
83935: PPUSH
83936: LD_VAR 0 8
83940: PPUSH
83941: LD_VAR 0 9
83945: PPUSH
83946: LD_VAR 0 10
83950: PPUSH
83951: LD_VAR 0 11
83955: PPUSH
83956: CALL 32871 0 11
83960: GO 83963
83962: POP
// end ;
83963: PPOPN 11
83965: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83966: LD_VAR 0 1
83970: PPUSH
83971: LD_VAR 0 2
83975: PPUSH
83976: LD_VAR 0 3
83980: PPUSH
83981: LD_VAR 0 4
83985: PPUSH
83986: LD_VAR 0 5
83990: PPUSH
83991: CALL 36282 0 5
// end ; end_of_file
83995: PPOPN 5
83997: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83998: LD_VAR 0 1
84002: PPUSH
84003: LD_VAR 0 2
84007: PPUSH
84008: LD_VAR 0 3
84012: PPUSH
84013: LD_VAR 0 4
84017: PPUSH
84018: LD_VAR 0 5
84022: PPUSH
84023: LD_VAR 0 6
84027: PPUSH
84028: CALL 20523 0 6
// end ;
84032: PPOPN 6
84034: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84035: LD_INT 0
84037: PPUSH
// begin if not units then
84038: LD_VAR 0 1
84042: NOT
84043: IFFALSE 84047
// exit ;
84045: GO 84047
// end ;
84047: PPOPN 7
84049: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84050: CALL 20410 0 0
// end ;
84054: PPOPN 1
84056: END
