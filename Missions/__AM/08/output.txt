// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 9172 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 76254 0 9
// Action ;
  79: CALL 15540 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 41782 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 41782 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 41782 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 41782 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 41782 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 41782 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 41782 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 79577 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 41782 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 41782 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 79577 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 41782 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 41782 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 79577 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 41782 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 79577 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 41782 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 79577 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 41782 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 79577 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 41782 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 79577 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 41782 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 79577 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 79577 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 50174 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2814
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2649
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: IFFALSE 2625
// begin bc_type := b_lab_full ;
2599: LD_ADDR_OWVAR 42
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2607: LD_ADDR_OWVAR 44
2611: PUSH
2612: LD_INT 10
2614: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_INT 15
2622: ST_TO_ADDR
// end else
2623: GO 2649
// begin bc_type := b_lab_half ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 7
2632: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2633: LD_ADDR_OWVAR 44
2637: PUSH
2638: LD_INT 10
2640: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 9
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2535
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2535
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 31
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 31
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 31
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 31
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 31
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 77211 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 31
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 55302 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 31
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 55302 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 31
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 55302 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 31
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 55302 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 13
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 13
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 41782 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 26
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 27
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 41782 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 27
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 24
4152: PUSH
4153: LD_STRING Mike
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 41782 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4170: LD_EXP 24
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4185: LD_STRING GladstoneIn07
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 30
4195: NOT
4196: IFFALSE 4276
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4198: LD_ADDR_EXP 21
4202: PUSH
4203: LD_STRING Gladstone
4205: PPUSH
4206: LD_EXP 1
4210: NOT
4211: PPUSH
4212: LD_STRING 06c_
4214: PPUSH
4215: CALL 41782 0 3
4219: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4220: LD_EXP 21
4224: NOT
4225: PUSH
4226: LD_STRING GladstoneStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: AND
4237: IFFALSE 4261
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4239: LD_ADDR_EXP 21
4243: PUSH
4244: LD_STRING Gladstone
4246: PPUSH
4247: LD_EXP 1
4251: NOT
4252: PPUSH
4253: LD_STRING 05_
4255: PPUSH
4256: CALL 41782 0 3
4260: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4261: LD_EXP 21
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4276: LD_STRING LisaStayInDelta
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 30
4286: IFFALSE 4322
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4288: LD_ADDR_EXP 19
4292: PUSH
4293: LD_STRING Lisa
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_STRING 05_
4301: PPUSH
4302: CALL 41782 0 3
4306: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4307: LD_EXP 19
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4322: LD_STRING BobbyStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: IFFALSE 4368
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4334: LD_ADDR_EXP 17
4338: PUSH
4339: LD_STRING Bobby
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_STRING 05_
4347: PPUSH
4348: CALL 41782 0 3
4352: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4353: LD_EXP 17
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4368: LD_STRING CyrusStayInDelta
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL_OW 30
4378: IFFALSE 4414
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4380: LD_ADDR_EXP 18
4384: PUSH
4385: LD_STRING Cyrus
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING 05_
4393: PPUSH
4394: CALL 41782 0 3
4398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4399: LD_EXP 18
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4414: LD_STRING BrownStayInDelta
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 30
4424: IFFALSE 4460
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4426: LD_ADDR_EXP 15
4430: PUSH
4431: LD_STRING Brown
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_STRING 05_
4439: PPUSH
4440: CALL 41782 0 3
4444: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4445: LD_EXP 15
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4460: LD_STRING DonaldsonStayInDelta
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 30
4470: IFFALSE 4506
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4472: LD_ADDR_EXP 16
4476: PUSH
4477: LD_STRING Donaldson
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING 05_
4485: PPUSH
4486: CALL 41782 0 3
4490: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4491: LD_EXP 16
4495: PPUSH
4496: LD_INT 4
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_STRING OthersStayInDelta
4513: PPUSH
4514: CALL_OW 31
4518: ST_TO_ADDR
// if others > 2 then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_INT 2
4526: GREATER
4527: IFFALSE 4590
// begin for j := 1 to 2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4586
// begin SetTag ( others [ j ] , 107 ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 3
4554: ARRAY
4555: PPUSH
4556: LD_INT 107
4558: PPUSH
4559: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PPUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// end ;
4584: GO 4542
4586: POP
4587: POP
// end else
4588: GO 4651
// begin for j := 1 to others do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_VAR 0 4
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4649
// begin SetTag ( others [ i ] , 107 ) ;
4608: LD_VAR 0 4
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: LD_INT 107
4621: PPUSH
4622: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4626: LD_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: ARRAY
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 49
// end ;
4647: GO 4605
4649: POP
4650: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4651: LD_ADDR_VAR 0 4
4655: PUSH
4656: LD_STRING 06_other_apemans
4658: PPUSH
4659: CALL_OW 31
4663: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PUSH
4687: LD_OWVAR 67
4691: ARRAY
4692: GREATEREQUAL
4693: IFFALSE 4726
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 2
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: ST_TO_ADDR
4724: GO 4736
// j := others ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 4
4735: ST_TO_ADDR
// for i := 1 to j do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 3
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4777
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: LD_INT 4
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
4775: GO 4751
4777: POP
4778: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PPUSH
4811: LD_INT 53
4813: PPUSH
4814: LD_INT 19
4816: PPUSH
4817: CALL_OW 111
// end ;
4821: LD_VAR 0 1
4825: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
// prefix := 07c_ ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_STRING 07c_
4849: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4850: LD_ADDR_VAR 0 8
4854: PUSH
4855: LD_STRING 07_vehicles
4857: PPUSH
4858: EMPTY
4859: PPUSH
4860: CALL_OW 30
4864: ST_TO_ADDR
// if not vehicles and debug then
4865: LD_VAR 0 8
4869: NOT
4870: PUSH
4871: LD_EXP 1
4875: AND
4876: IFFALSE 4904
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4878: LD_ADDR_VAR 0 8
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 4
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: ST_TO_ADDR
// if not vehicles then
4904: LD_VAR 0 8
4908: NOT
4909: IFFALSE 4966
// begin area := westGammaSupportArea ;
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_INT 16
4918: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4919: LD_ADDR_VAR 0 14
4923: PUSH
4924: LD_INT 37
4926: PUSH
4927: LD_INT 70
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4934: LD_ADDR_VAR 0 13
4938: PUSH
4939: LD_INT 43
4941: PUSH
4942: LD_INT 67
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// dir := 1 ;
4949: LD_ADDR_VAR 0 12
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4957: LD_INT 4200
4959: PPUSH
4960: CALL_OW 67
// end else
4964: GO 5012
// begin area := southGammaSupportArea ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_INT 5
4973: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4974: LD_ADDR_VAR 0 14
4978: PUSH
4979: LD_INT 87
4981: PUSH
4982: LD_INT 147
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4989: LD_ADDR_VAR 0 13
4993: PUSH
4994: LD_INT 74
4996: PUSH
4997: LD_INT 129
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
// dir := 0 ;
5004: LD_ADDR_VAR 0 12
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// end ; EraseResourceArea ( mat_cans , area ) ;
5012: LD_INT 1
5014: PPUSH
5015: LD_VAR 0 11
5019: PPUSH
5020: CALL_OW 286
// squad := [ ] ;
5024: LD_ADDR_VAR 0 5
5028: PUSH
5029: EMPTY
5030: ST_TO_ADDR
// tmp := [ ] ;
5031: LD_ADDR_VAR 0 6
5035: PUSH
5036: EMPTY
5037: ST_TO_ADDR
// tmpVehs := [ ] ;
5038: LD_ADDR_VAR 0 7
5042: PUSH
5043: EMPTY
5044: ST_TO_ADDR
// uc_side := 1 ;
5045: LD_ADDR_OWVAR 20
5049: PUSH
5050: LD_INT 1
5052: ST_TO_ADDR
// uc_nation := 1 ;
5053: LD_ADDR_OWVAR 21
5057: PUSH
5058: LD_INT 1
5060: ST_TO_ADDR
// if vehicles then
5061: LD_VAR 0 8
5065: IFFALSE 5287
// begin for i := 1 to vehicles do
5067: LD_ADDR_VAR 0 2
5071: PUSH
5072: DOUBLE
5073: LD_INT 1
5075: DEC
5076: ST_TO_ADDR
5077: LD_VAR 0 8
5081: PUSH
5082: FOR_TO
5083: IFFALSE 5285
// begin if vehicles [ i ] then
5085: LD_VAR 0 8
5089: PUSH
5090: LD_VAR 0 2
5094: ARRAY
5095: IFFALSE 5283
// begin if not vehicles [ i ] [ 1 ] then
5097: LD_VAR 0 8
5101: PUSH
5102: LD_VAR 0 2
5106: ARRAY
5107: PUSH
5108: LD_INT 1
5110: ARRAY
5111: NOT
5112: IFFALSE 5116
// continue ;
5114: GO 5082
// if not vehicles [ i ] [ 2 ] then
5116: LD_VAR 0 8
5120: PUSH
5121: LD_VAR 0 2
5125: ARRAY
5126: PUSH
5127: LD_INT 2
5129: ARRAY
5130: NOT
5131: IFFALSE 5135
// continue ;
5133: GO 5082
// if not vehicles [ i ] [ 3 ] then
5135: LD_VAR 0 8
5139: PUSH
5140: LD_VAR 0 2
5144: ARRAY
5145: PUSH
5146: LD_INT 3
5148: ARRAY
5149: NOT
5150: IFFALSE 5154
// continue ;
5152: GO 5082
// if not vehicles [ i ] [ 4 ] then
5154: LD_VAR 0 8
5158: PUSH
5159: LD_VAR 0 2
5163: ARRAY
5164: PUSH
5165: LD_INT 4
5167: ARRAY
5168: NOT
5169: IFFALSE 5173
// continue ;
5171: GO 5082
// vc_chassis := vehicles [ i ] [ 1 ] ;
5173: LD_ADDR_OWVAR 37
5177: PUSH
5178: LD_VAR 0 8
5182: PUSH
5183: LD_VAR 0 2
5187: ARRAY
5188: PUSH
5189: LD_INT 1
5191: ARRAY
5192: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5193: LD_ADDR_OWVAR 39
5197: PUSH
5198: LD_VAR 0 8
5202: PUSH
5203: LD_VAR 0 2
5207: ARRAY
5208: PUSH
5209: LD_INT 2
5211: ARRAY
5212: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5213: LD_ADDR_OWVAR 38
5217: PUSH
5218: LD_VAR 0 8
5222: PUSH
5223: LD_VAR 0 2
5227: ARRAY
5228: PUSH
5229: LD_INT 3
5231: ARRAY
5232: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5233: LD_ADDR_OWVAR 40
5237: PUSH
5238: LD_VAR 0 8
5242: PUSH
5243: LD_VAR 0 2
5247: ARRAY
5248: PUSH
5249: LD_INT 4
5251: ARRAY
5252: ST_TO_ADDR
// veh := CreateVehicle ;
5253: LD_ADDR_VAR 0 9
5257: PUSH
5258: CALL_OW 45
5262: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5263: LD_ADDR_VAR 0 7
5267: PUSH
5268: LD_VAR 0 7
5272: PPUSH
5273: LD_VAR 0 9
5277: PPUSH
5278: CALL 79577 0 2
5282: ST_TO_ADDR
// end ; end ;
5283: GO 5082
5285: POP
5286: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5287: LD_ADDR_EXP 14
5291: PUSH
5292: LD_STRING JMM
5294: PPUSH
5295: LD_EXP 1
5299: NOT
5300: PPUSH
5301: LD_VAR 0 10
5305: PPUSH
5306: CALL 41782 0 3
5310: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5311: LD_EXP 13
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: LD_INT 3
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: IN
5326: PUSH
5327: LD_EXP 15
5331: NOT
5332: AND
5333: IFFALSE 5394
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5335: LD_ADDR_EXP 15
5339: PUSH
5340: LD_STRING Brown
5342: PPUSH
5343: LD_EXP 1
5347: NOT
5348: PPUSH
5349: LD_VAR 0 10
5353: PPUSH
5354: CALL 41782 0 3
5358: ST_TO_ADDR
// if Brown then
5359: LD_EXP 15
5363: IFFALSE 5394
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5365: LD_ADDR_VAR 0 6
5369: PUSH
5370: LD_VAR 0 6
5374: PPUSH
5375: LD_VAR 0 6
5379: PUSH
5380: LD_INT 1
5382: PLUS
5383: PPUSH
5384: LD_EXP 15
5388: PPUSH
5389: CALL_OW 1
5393: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5394: LD_EXP 13
5398: PUSH
5399: LD_INT 2
5401: PUSH
5402: LD_INT 3
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: IN
5409: PUSH
5410: LD_EXP 16
5414: NOT
5415: AND
5416: IFFALSE 5477
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5418: LD_ADDR_EXP 16
5422: PUSH
5423: LD_STRING Donaldson
5425: PPUSH
5426: LD_EXP 1
5430: NOT
5431: PPUSH
5432: LD_VAR 0 10
5436: PPUSH
5437: CALL 41782 0 3
5441: ST_TO_ADDR
// if Donaldson then
5442: LD_EXP 16
5446: IFFALSE 5477
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5448: LD_ADDR_VAR 0 6
5452: PUSH
5453: LD_VAR 0 6
5457: PPUSH
5458: LD_VAR 0 6
5462: PUSH
5463: LD_INT 1
5465: PLUS
5466: PPUSH
5467: LD_EXP 16
5471: PPUSH
5472: CALL_OW 1
5476: ST_TO_ADDR
// end ; if not Bobby then
5477: LD_EXP 17
5481: NOT
5482: IFFALSE 5540
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5484: LD_ADDR_EXP 17
5488: PUSH
5489: LD_STRING Bobby
5491: PPUSH
5492: LD_INT 1
5494: PPUSH
5495: LD_VAR 0 10
5499: PPUSH
5500: CALL 41782 0 3
5504: ST_TO_ADDR
// if Bobby then
5505: LD_EXP 17
5509: IFFALSE 5540
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5511: LD_ADDR_VAR 0 6
5515: PUSH
5516: LD_VAR 0 6
5520: PPUSH
5521: LD_VAR 0 6
5525: PUSH
5526: LD_INT 1
5528: PLUS
5529: PPUSH
5530: LD_EXP 17
5534: PPUSH
5535: CALL_OW 1
5539: ST_TO_ADDR
// end ; if not Cyrus then
5540: LD_EXP 18
5544: NOT
5545: IFFALSE 5603
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5547: LD_ADDR_EXP 18
5551: PUSH
5552: LD_STRING Cyrus
5554: PPUSH
5555: LD_INT 1
5557: PPUSH
5558: LD_VAR 0 10
5562: PPUSH
5563: CALL 41782 0 3
5567: ST_TO_ADDR
// if Cyrus then
5568: LD_EXP 18
5572: IFFALSE 5603
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5574: LD_ADDR_VAR 0 6
5578: PUSH
5579: LD_VAR 0 6
5583: PPUSH
5584: LD_VAR 0 6
5588: PUSH
5589: LD_INT 1
5591: PLUS
5592: PPUSH
5593: LD_EXP 18
5597: PPUSH
5598: CALL_OW 1
5602: ST_TO_ADDR
// end ; if not Lisa then
5603: LD_EXP 19
5607: NOT
5608: IFFALSE 5669
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5610: LD_ADDR_EXP 19
5614: PUSH
5615: LD_STRING Lisa
5617: PPUSH
5618: LD_EXP 1
5622: NOT
5623: PPUSH
5624: LD_VAR 0 10
5628: PPUSH
5629: CALL 41782 0 3
5633: ST_TO_ADDR
// if Lisa then
5634: LD_EXP 19
5638: IFFALSE 5669
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5640: LD_ADDR_VAR 0 6
5644: PUSH
5645: LD_VAR 0 6
5649: PPUSH
5650: LD_VAR 0 6
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: PPUSH
5659: LD_EXP 19
5663: PPUSH
5664: CALL_OW 1
5668: ST_TO_ADDR
// end ; if not Frank then
5669: LD_EXP 20
5673: NOT
5674: IFFALSE 5735
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5676: LD_ADDR_EXP 20
5680: PUSH
5681: LD_STRING Frank
5683: PPUSH
5684: LD_EXP 1
5688: NOT
5689: PPUSH
5690: LD_VAR 0 10
5694: PPUSH
5695: CALL 41782 0 3
5699: ST_TO_ADDR
// if Frank then
5700: LD_EXP 20
5704: IFFALSE 5735
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5706: LD_ADDR_VAR 0 6
5710: PUSH
5711: LD_VAR 0 6
5715: PPUSH
5716: LD_VAR 0 6
5720: PUSH
5721: LD_INT 1
5723: PLUS
5724: PPUSH
5725: LD_EXP 20
5729: PPUSH
5730: CALL_OW 1
5734: ST_TO_ADDR
// end ; if not Kikuchi then
5735: LD_EXP 22
5739: NOT
5740: IFFALSE 5798
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5742: LD_ADDR_EXP 22
5746: PUSH
5747: LD_STRING Kikuchi
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: LD_VAR 0 10
5757: PPUSH
5758: CALL 41782 0 3
5762: ST_TO_ADDR
// if Kikuchi then
5763: LD_EXP 22
5767: IFFALSE 5798
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5769: LD_ADDR_VAR 0 6
5773: PUSH
5774: LD_VAR 0 6
5778: PPUSH
5779: LD_VAR 0 6
5783: PUSH
5784: LD_INT 1
5786: PLUS
5787: PPUSH
5788: LD_EXP 22
5792: PPUSH
5793: CALL_OW 1
5797: ST_TO_ADDR
// end ; if not Gladstone then
5798: LD_EXP 21
5802: NOT
5803: IFFALSE 5864
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5805: LD_ADDR_EXP 21
5809: PUSH
5810: LD_STRING Gladstone
5812: PPUSH
5813: LD_EXP 1
5817: NOT
5818: PPUSH
5819: LD_VAR 0 10
5823: PPUSH
5824: CALL 41782 0 3
5828: ST_TO_ADDR
// if Gladstone then
5829: LD_EXP 21
5833: IFFALSE 5864
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5835: LD_ADDR_VAR 0 6
5839: PUSH
5840: LD_VAR 0 6
5844: PPUSH
5845: LD_VAR 0 6
5849: PUSH
5850: LD_INT 1
5852: PLUS
5853: PPUSH
5854: LD_EXP 21
5858: PPUSH
5859: CALL_OW 1
5863: ST_TO_ADDR
// end ; if not Khatam then
5864: LD_EXP 23
5868: NOT
5869: IFFALSE 5927
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5871: LD_ADDR_EXP 23
5875: PUSH
5876: LD_STRING Khatam
5878: PPUSH
5879: LD_INT 1
5881: PPUSH
5882: LD_VAR 0 10
5886: PPUSH
5887: CALL 41782 0 3
5891: ST_TO_ADDR
// if Khatam then
5892: LD_EXP 23
5896: IFFALSE 5927
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5898: LD_ADDR_VAR 0 6
5902: PUSH
5903: LD_VAR 0 6
5907: PPUSH
5908: LD_VAR 0 6
5912: PUSH
5913: LD_INT 1
5915: PLUS
5916: PPUSH
5917: LD_EXP 23
5921: PPUSH
5922: CALL_OW 1
5926: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5927: LD_ADDR_VAR 0 4
5931: PUSH
5932: LD_STRING 07c_others
5934: PPUSH
5935: CALL_OW 31
5939: ST_TO_ADDR
// squad := others ;
5940: LD_ADDR_VAR 0 5
5944: PUSH
5945: LD_VAR 0 4
5949: ST_TO_ADDR
// if others then
5950: LD_VAR 0 4
5954: IFFALSE 6005
// for i in others do
5956: LD_ADDR_VAR 0 2
5960: PUSH
5961: LD_VAR 0 4
5965: PUSH
5966: FOR_IN
5967: IFFALSE 6003
// begin SetTag ( i , 108 ) ;
5969: LD_VAR 0 2
5973: PPUSH
5974: LD_INT 108
5976: PPUSH
5977: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5981: LD_ADDR_VAR 0 6
5985: PUSH
5986: LD_VAR 0 6
5990: PPUSH
5991: LD_VAR 0 2
5995: PPUSH
5996: CALL 79577 0 2
6000: ST_TO_ADDR
// end ;
6001: GO 5966
6003: POP
6004: POP
// if tmp then
6005: LD_VAR 0 6
6009: IFFALSE 6262
// begin tmp := Join ( tmp , JMM ) ;
6011: LD_ADDR_VAR 0 6
6015: PUSH
6016: LD_VAR 0 6
6020: PPUSH
6021: LD_EXP 14
6025: PPUSH
6026: CALL 79577 0 2
6030: ST_TO_ADDR
// for i in tmp do
6031: LD_ADDR_VAR 0 2
6035: PUSH
6036: LD_VAR 0 6
6040: PUSH
6041: FOR_IN
6042: IFFALSE 6260
// begin SetDir ( i , dir ) ;
6044: LD_VAR 0 2
6048: PPUSH
6049: LD_VAR 0 12
6053: PPUSH
6054: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
6058: LD_VAR 0 2
6062: PPUSH
6063: CALL_OW 257
6067: PUSH
6068: LD_INT 3
6070: EQUAL
6071: PUSH
6072: LD_VAR 0 7
6076: AND
6077: IFFALSE 6176
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
6079: LD_VAR 0 7
6083: PUSH
6084: LD_INT 1
6086: ARRAY
6087: PPUSH
6088: LD_INT 0
6090: PPUSH
6091: CALL_OW 233
// repeat wait ( 10 ) ;
6095: LD_INT 10
6097: PPUSH
6098: CALL_OW 67
// until PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
6102: LD_VAR 0 7
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: LD_VAR 0 14
6115: PUSH
6116: LD_INT 1
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 14
6124: PUSH
6125: LD_INT 2
6127: ARRAY
6128: PPUSH
6129: LD_INT 0
6131: PPUSH
6132: CALL_OW 48
6136: IFFALSE 6095
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6138: LD_VAR 0 2
6142: PPUSH
6143: LD_VAR 0 7
6147: PUSH
6148: LD_INT 1
6150: ARRAY
6151: PPUSH
6152: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6156: LD_ADDR_VAR 0 7
6160: PUSH
6161: LD_VAR 0 7
6165: PPUSH
6166: LD_INT 1
6168: PPUSH
6169: CALL_OW 3
6173: ST_TO_ADDR
// end else
6174: GO 6202
// begin repeat wait ( 10 ) ;
6176: LD_INT 10
6178: PPUSH
6179: CALL_OW 67
// until PlaceUnitArea ( i , area , false ) ;
6183: LD_VAR 0 2
6187: PPUSH
6188: LD_VAR 0 11
6192: PPUSH
6193: LD_INT 0
6195: PPUSH
6196: CALL_OW 49
6200: IFFALSE 6176
// end ; ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6202: LD_VAR 0 2
6206: PPUSH
6207: LD_VAR 0 13
6211: PUSH
6212: LD_INT 1
6214: ARRAY
6215: PPUSH
6216: LD_VAR 0 13
6220: PUSH
6221: LD_INT 2
6223: ARRAY
6224: PPUSH
6225: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6229: LD_INT 35
6231: PPUSH
6232: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6236: LD_VAR 0 11
6240: PPUSH
6241: LD_INT 22
6243: PUSH
6244: LD_INT 1
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PPUSH
6251: CALL_OW 70
6255: NOT
6256: IFFALSE 6229
// end ;
6258: GO 6041
6260: POP
6261: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6262: LD_EXP 14
6266: PPUSH
6267: CALL_OW 305
6271: NOT
6272: PUSH
6273: LD_EXP 14
6277: PPUSH
6278: CALL_OW 310
6282: NOT
6283: OR
6284: IFFALSE 6316
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6286: LD_EXP 14
6290: PPUSH
6291: LD_VAR 0 14
6295: PUSH
6296: LD_INT 1
6298: ARRAY
6299: PPUSH
6300: LD_VAR 0 14
6304: PUSH
6305: LD_INT 2
6307: ARRAY
6308: PPUSH
6309: LD_INT 0
6311: PPUSH
6312: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6316: LD_EXP 14
6320: PPUSH
6321: LD_VAR 0 13
6325: PUSH
6326: LD_INT 1
6328: ARRAY
6329: PPUSH
6330: LD_VAR 0 13
6334: PUSH
6335: LD_INT 2
6337: ARRAY
6338: PPUSH
6339: CALL_OW 111
// jmmArrival := true ;
6343: LD_ADDR_EXP 8
6347: PUSH
6348: LD_INT 1
6350: ST_TO_ADDR
// end ;
6351: LD_VAR 0 1
6355: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
6360: PPUSH
6361: PPUSH
6362: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6363: LD_INT 1
6365: PPUSH
6366: LD_INT 17
6368: PPUSH
6369: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6373: LD_INT 2
6375: PPUSH
6376: LD_INT 17
6378: PPUSH
6379: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6383: LD_ADDR_VAR 0 5
6387: PUSH
6388: LD_INT 6
6390: PPUSH
6391: LD_INT 58
6393: PUSH
6394: EMPTY
6395: LIST
6396: PPUSH
6397: CALL_OW 70
6401: ST_TO_ADDR
// if tmp then
6402: LD_VAR 0 5
6406: IFFALSE 6434
// for i in tmp do
6408: LD_ADDR_VAR 0 2
6412: PUSH
6413: LD_VAR 0 5
6417: PUSH
6418: FOR_IN
6419: IFFALSE 6432
// RemoveUnit ( i ) ;
6421: LD_VAR 0 2
6425: PPUSH
6426: CALL_OW 64
6430: GO 6418
6432: POP
6433: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6434: LD_ADDR_VAR 0 5
6438: PUSH
6439: LD_INT 6
6441: PPUSH
6442: LD_INT 3
6444: PUSH
6445: LD_INT 21
6447: PUSH
6448: LD_INT 3
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PPUSH
6459: CALL_OW 70
6463: ST_TO_ADDR
// if tmp then
6464: LD_VAR 0 5
6468: IFFALSE 6492
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6470: LD_VAR 0 5
6474: PPUSH
6475: LD_INT 33
6477: PPUSH
6478: LD_INT 39
6480: PPUSH
6481: CALL_OW 111
// wait ( 0 0$3 ) ;
6485: LD_INT 105
6487: PPUSH
6488: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6492: LD_INT 70
6494: PPUSH
6495: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6499: LD_INT 6
6501: PPUSH
6502: LD_INT 50
6504: PUSH
6505: EMPTY
6506: LIST
6507: PPUSH
6508: CALL_OW 70
6512: NOT
6513: IFFALSE 6492
// uc_side := 4 ;
6515: LD_ADDR_OWVAR 20
6519: PUSH
6520: LD_INT 4
6522: ST_TO_ADDR
// uc_nation := 1 ;
6523: LD_ADDR_OWVAR 21
6527: PUSH
6528: LD_INT 1
6530: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6531: LD_ADDR_EXP 28
6535: PUSH
6536: LD_STRING Sikorski
6538: PPUSH
6539: LD_INT 0
6541: PPUSH
6542: LD_STRING 
6544: PPUSH
6545: CALL 41782 0 3
6549: ST_TO_ADDR
// vc_engine := engine_combustion ;
6550: LD_ADDR_OWVAR 39
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// vc_control := control_manual ;
6558: LD_ADDR_OWVAR 38
6562: PUSH
6563: LD_INT 1
6565: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6566: LD_ADDR_OWVAR 40
6570: PUSH
6571: LD_INT 6
6573: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6574: LD_ADDR_OWVAR 37
6578: PUSH
6579: LD_INT 4
6581: ST_TO_ADDR
// veh := CreateVehicle ;
6582: LD_ADDR_VAR 0 4
6586: PUSH
6587: CALL_OW 45
6591: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6592: LD_VAR 0 4
6596: PPUSH
6597: LD_INT 3
6599: PPUSH
6600: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6604: LD_VAR 0 4
6608: PPUSH
6609: LD_INT 4
6611: NEG
6612: PPUSH
6613: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6617: LD_VAR 0 4
6621: PPUSH
6622: LD_INT 70
6624: PPUSH
6625: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6629: LD_VAR 0 4
6633: PPUSH
6634: LD_INT 6
6636: PPUSH
6637: LD_INT 0
6639: PPUSH
6640: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6644: LD_EXP 28
6648: PPUSH
6649: LD_VAR 0 4
6653: PPUSH
6654: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6658: LD_EXP 28
6662: PPUSH
6663: LD_INT 37
6665: PPUSH
6666: LD_INT 30
6668: PPUSH
6669: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6673: LD_INT 10
6675: PPUSH
6676: CALL_OW 67
// InitHc_All ( ) ;
6680: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6684: LD_ADDR_VAR 0 2
6688: PUSH
6689: DOUBLE
6690: LD_INT 1
6692: DEC
6693: ST_TO_ADDR
6694: LD_INT 3
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: LD_INT 2
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: PUSH
6712: LD_OWVAR 67
6716: ARRAY
6717: PUSH
6718: FOR_TO
6719: IFFALSE 6854
// begin repeat wait ( 0 0$2 ) ;
6721: LD_INT 70
6723: PPUSH
6724: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6728: LD_INT 6
6730: PPUSH
6731: LD_INT 50
6733: PUSH
6734: EMPTY
6735: LIST
6736: PPUSH
6737: CALL_OW 70
6741: NOT
6742: IFFALSE 6721
// uc_side := 4 ;
6744: LD_ADDR_OWVAR 20
6748: PUSH
6749: LD_INT 4
6751: ST_TO_ADDR
// uc_nation := 1 ;
6752: LD_ADDR_OWVAR 21
6756: PUSH
6757: LD_INT 1
6759: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6760: LD_INT 0
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: LD_INT 4
6768: PPUSH
6769: LD_INT 7
6771: PPUSH
6772: CALL_OW 12
6776: PPUSH
6777: CALL_OW 380
// un := CreateHuman ;
6781: LD_ADDR_VAR 0 3
6785: PUSH
6786: CALL_OW 44
6790: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6791: LD_VAR 0 3
6795: PPUSH
6796: LD_INT 3
6798: PPUSH
6799: CALL_OW 233
// SetTag ( un , 101 ) ;
6803: LD_VAR 0 3
6807: PPUSH
6808: LD_INT 101
6810: PPUSH
6811: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6815: LD_VAR 0 3
6819: PPUSH
6820: LD_INT 6
6822: PPUSH
6823: LD_INT 0
6825: PPUSH
6826: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6830: LD_VAR 0 3
6834: PPUSH
6835: LD_INT 25
6837: PPUSH
6838: LD_INT 27
6840: PPUSH
6841: CALL_OW 111
// wait ( 0 0$1 ) ;
6845: LD_INT 35
6847: PPUSH
6848: CALL_OW 67
// end ;
6852: GO 6718
6854: POP
6855: POP
// repeat wait ( 0 0$2 ) ;
6856: LD_INT 70
6858: PPUSH
6859: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6863: LD_ADDR_VAR 0 2
6867: PUSH
6868: LD_INT 22
6870: PUSH
6871: LD_INT 4
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: LD_INT 25
6880: PUSH
6881: LD_INT 1
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PPUSH
6892: CALL_OW 69
6896: PUSH
6897: FOR_IN
6898: IFFALSE 6961
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6900: LD_VAR 0 2
6904: PPUSH
6905: LD_INT 17
6907: PPUSH
6908: LD_INT 22
6910: PUSH
6911: LD_INT 1
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 2
6920: PUSH
6921: LD_INT 58
6923: PUSH
6924: EMPTY
6925: LIST
6926: PUSH
6927: LD_INT 33
6929: PUSH
6930: LD_INT 2
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PPUSH
6946: CALL_OW 70
6950: PUSH
6951: LD_INT 1
6953: ARRAY
6954: PPUSH
6955: CALL_OW 115
6959: GO 6897
6961: POP
6962: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6963: LD_INT 17
6965: PPUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 1
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 2
6978: PUSH
6979: LD_INT 58
6981: PUSH
6982: EMPTY
6983: LIST
6984: PUSH
6985: LD_INT 33
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 70
7008: NOT
7009: IFFALSE 6856
// for i := 1 to 2 do
7011: LD_ADDR_VAR 0 2
7015: PUSH
7016: DOUBLE
7017: LD_INT 1
7019: DEC
7020: ST_TO_ADDR
7021: LD_INT 2
7023: PUSH
7024: FOR_TO
7025: IFFALSE 7137
// begin uc_side := 4 ;
7027: LD_ADDR_OWVAR 20
7031: PUSH
7032: LD_INT 4
7034: ST_TO_ADDR
// uc_nation := 1 ;
7035: LD_ADDR_OWVAR 21
7039: PUSH
7040: LD_INT 1
7042: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
7043: LD_INT 0
7045: PPUSH
7046: LD_INT 4
7048: PPUSH
7049: LD_INT 3
7051: PPUSH
7052: LD_INT 5
7054: PPUSH
7055: CALL_OW 12
7059: PPUSH
7060: CALL_OW 380
// un := CreateHuman ;
7064: LD_ADDR_VAR 0 3
7068: PUSH
7069: CALL_OW 44
7073: ST_TO_ADDR
// SetDir ( un , 3 ) ;
7074: LD_VAR 0 3
7078: PPUSH
7079: LD_INT 3
7081: PPUSH
7082: CALL_OW 233
// SetTag ( un , 101 ) ;
7086: LD_VAR 0 3
7090: PPUSH
7091: LD_INT 101
7093: PPUSH
7094: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
7098: LD_VAR 0 3
7102: PPUSH
7103: LD_INT 6
7105: PPUSH
7106: LD_INT 0
7108: PPUSH
7109: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
7113: LD_VAR 0 3
7117: PPUSH
7118: LD_INT 25
7120: PPUSH
7121: LD_INT 27
7123: PPUSH
7124: CALL_OW 111
// wait ( 0 0$1 ) ;
7128: LD_INT 35
7130: PPUSH
7131: CALL_OW 67
// end ;
7135: GO 7024
7137: POP
7138: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7139: LD_ADDR_VAR 0 2
7143: PUSH
7144: DOUBLE
7145: LD_INT 1
7147: DEC
7148: ST_TO_ADDR
7149: LD_INT 5
7151: PUSH
7152: LD_INT 4
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_OWVAR 67
7171: ARRAY
7172: PUSH
7173: FOR_TO
7174: IFFALSE 7439
// begin repeat wait ( 0 0$2 ) ;
7176: LD_INT 70
7178: PPUSH
7179: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7183: LD_INT 6
7185: PPUSH
7186: LD_INT 50
7188: PUSH
7189: EMPTY
7190: LIST
7191: PPUSH
7192: CALL_OW 70
7196: NOT
7197: IFFALSE 7176
// uc_side := 4 ;
7199: LD_ADDR_OWVAR 20
7203: PUSH
7204: LD_INT 4
7206: ST_TO_ADDR
// uc_nation := 1 ;
7207: LD_ADDR_OWVAR 21
7211: PUSH
7212: LD_INT 1
7214: ST_TO_ADDR
// vc_engine := engine_combustion ;
7215: LD_ADDR_OWVAR 39
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// vc_control := control_manual ;
7223: LD_ADDR_OWVAR 38
7227: PUSH
7228: LD_INT 1
7230: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7231: LD_ADDR_OWVAR 40
7235: PUSH
7236: LD_INT 5
7238: PUSH
7239: LD_INT 7
7241: PUSH
7242: LD_INT 5
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: PUSH
7254: LD_VAR 0 2
7258: PUSH
7259: LD_INT 4
7261: MOD
7262: PUSH
7263: LD_INT 1
7265: PLUS
7266: ARRAY
7267: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7268: LD_ADDR_OWVAR 37
7272: PUSH
7273: LD_INT 3
7275: PUSH
7276: LD_INT 3
7278: PUSH
7279: LD_INT 4
7281: PUSH
7282: LD_INT 4
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: PUSH
7291: LD_VAR 0 2
7295: PUSH
7296: LD_INT 4
7298: MOD
7299: PUSH
7300: LD_INT 1
7302: PLUS
7303: ARRAY
7304: ST_TO_ADDR
// veh := CreateVehicle ;
7305: LD_ADDR_VAR 0 4
7309: PUSH
7310: CALL_OW 45
7314: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7315: LD_VAR 0 4
7319: PPUSH
7320: LD_INT 3
7322: PPUSH
7323: CALL_OW 233
// SetTag ( veh , 0 ) ;
7327: LD_VAR 0 4
7331: PPUSH
7332: LD_INT 0
7334: PPUSH
7335: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7339: LD_VAR 0 4
7343: PPUSH
7344: LD_INT 70
7346: PPUSH
7347: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7351: LD_VAR 0 4
7355: PPUSH
7356: LD_INT 6
7358: PPUSH
7359: LD_INT 0
7361: PPUSH
7362: CALL_OW 49
// InitHc ;
7366: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7370: LD_INT 0
7372: PPUSH
7373: LD_INT 3
7375: PPUSH
7376: LD_INT 4
7378: PPUSH
7379: LD_INT 7
7381: PPUSH
7382: CALL_OW 12
7386: PPUSH
7387: CALL_OW 380
// un := CreateHuman ;
7391: LD_ADDR_VAR 0 3
7395: PUSH
7396: CALL_OW 44
7400: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7401: LD_VAR 0 3
7405: PPUSH
7406: LD_VAR 0 4
7410: PPUSH
7411: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7415: LD_VAR 0 3
7419: PPUSH
7420: LD_INT 30
7422: PPUSH
7423: LD_INT 22
7425: PPUSH
7426: CALL_OW 111
// wait ( 0 0$3 ) ;
7430: LD_INT 105
7432: PPUSH
7433: CALL_OW 67
// end ;
7437: GO 7173
7439: POP
7440: POP
// wait ( 0 0$10 ) ;
7441: LD_INT 350
7443: PPUSH
7444: CALL_OW 67
// end ;
7448: LD_VAR 0 1
7452: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7453: LD_INT 0
7455: PPUSH
7456: PPUSH
7457: PPUSH
7458: PPUSH
// gammaBase := [ ] ;
7459: LD_ADDR_VAR 0 4
7463: PUSH
7464: EMPTY
7465: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7466: LD_ADDR_VAR 0 5
7470: PUSH
7471: LD_VAR 0 1
7475: PPUSH
7476: LD_INT 22
7478: PUSH
7479: LD_INT 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 21
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 50
7498: PUSH
7499: EMPTY
7500: LIST
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: LIST
7506: PPUSH
7507: CALL_OW 70
7511: ST_TO_ADDR
// for i in buildings do
7512: LD_ADDR_VAR 0 3
7516: PUSH
7517: LD_VAR 0 5
7521: PUSH
7522: FOR_IN
7523: IFFALSE 7960
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7525: LD_VAR 0 3
7529: PPUSH
7530: CALL_OW 266
7534: PUSH
7535: LD_INT 6
7537: PUSH
7538: LD_INT 7
7540: PUSH
7541: LD_INT 8
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: IN
7549: IFFALSE 7663
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7551: LD_ADDR_VAR 0 4
7555: PUSH
7556: LD_VAR 0 4
7560: PUSH
7561: LD_VAR 0 3
7565: PPUSH
7566: CALL_OW 266
7570: PUSH
7571: LD_VAR 0 3
7575: PPUSH
7576: CALL_OW 250
7580: PUSH
7581: LD_VAR 0 3
7585: PPUSH
7586: CALL_OW 251
7590: PUSH
7591: LD_VAR 0 3
7595: PPUSH
7596: CALL_OW 254
7600: PUSH
7601: LD_VAR 0 3
7605: PPUSH
7606: CALL_OW 267
7610: PUSH
7611: LD_VAR 0 3
7615: PPUSH
7616: CALL_OW 248
7620: PUSH
7621: LD_VAR 0 3
7625: PPUSH
7626: LD_INT 1
7628: PPUSH
7629: CALL_OW 268
7633: PUSH
7634: LD_VAR 0 3
7638: PPUSH
7639: LD_INT 2
7641: PPUSH
7642: CALL_OW 268
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: ADD
7660: ST_TO_ADDR
7661: GO 7958
// if GetBType ( i ) = b_bunker then
7663: LD_VAR 0 3
7667: PPUSH
7668: CALL_OW 266
7672: PUSH
7673: LD_INT 32
7675: EQUAL
7676: IFFALSE 7773
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7678: LD_ADDR_VAR 0 4
7682: PUSH
7683: LD_VAR 0 4
7687: PUSH
7688: LD_VAR 0 3
7692: PPUSH
7693: CALL_OW 266
7697: PUSH
7698: LD_VAR 0 3
7702: PPUSH
7703: CALL_OW 250
7707: PUSH
7708: LD_VAR 0 3
7712: PPUSH
7713: CALL_OW 251
7717: PUSH
7718: LD_VAR 0 3
7722: PPUSH
7723: CALL_OW 254
7727: PUSH
7728: LD_VAR 0 3
7732: PPUSH
7733: CALL_OW 267
7737: PUSH
7738: LD_VAR 0 3
7742: PPUSH
7743: CALL_OW 248
7747: PUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: CALL_OW 269
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: ADD
7770: ST_TO_ADDR
7771: GO 7958
// if GetBType ( i ) = b_factory then
7773: LD_VAR 0 3
7777: PPUSH
7778: CALL_OW 266
7782: PUSH
7783: LD_INT 3
7785: EQUAL
7786: IFFALSE 7876
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7788: LD_ADDR_VAR 0 4
7792: PUSH
7793: LD_VAR 0 4
7797: PPUSH
7798: LD_INT 1
7800: PPUSH
7801: LD_VAR 0 3
7805: PPUSH
7806: CALL_OW 266
7810: PUSH
7811: LD_VAR 0 3
7815: PPUSH
7816: CALL_OW 250
7820: PUSH
7821: LD_VAR 0 3
7825: PPUSH
7826: CALL_OW 251
7830: PUSH
7831: LD_VAR 0 3
7835: PPUSH
7836: CALL_OW 254
7840: PUSH
7841: LD_VAR 0 3
7845: PPUSH
7846: CALL_OW 267
7850: PUSH
7851: LD_VAR 0 3
7855: PPUSH
7856: CALL_OW 248
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 2
7873: ST_TO_ADDR
7874: GO 7958
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7876: LD_ADDR_VAR 0 4
7880: PUSH
7881: LD_VAR 0 4
7885: PUSH
7886: LD_VAR 0 3
7890: PPUSH
7891: CALL_OW 266
7895: PUSH
7896: LD_VAR 0 3
7900: PPUSH
7901: CALL_OW 250
7905: PUSH
7906: LD_VAR 0 3
7910: PPUSH
7911: CALL_OW 251
7915: PUSH
7916: LD_VAR 0 3
7920: PPUSH
7921: CALL_OW 254
7925: PUSH
7926: LD_VAR 0 3
7930: PPUSH
7931: CALL_OW 267
7935: PUSH
7936: LD_VAR 0 3
7940: PPUSH
7941: CALL_OW 248
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: ADD
7957: ST_TO_ADDR
// end ;
7958: GO 7522
7960: POP
7961: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7962: LD_VAR 0 4
7966: PPUSH
7967: LD_STRING 08_GammaBase
7969: PPUSH
7970: CALL_OW 39
// end ;
7974: LD_VAR 0 2
7978: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7979: LD_INT 0
7981: PPUSH
7982: PPUSH
7983: PPUSH
7984: PPUSH
7985: PPUSH
7986: PPUSH
7987: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7988: LD_ADDR_VAR 0 3
7992: PUSH
7993: LD_INT 17
7995: PPUSH
7996: LD_INT 22
7998: PUSH
7999: LD_INT 1
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 3
8008: PUSH
8009: LD_INT 21
8011: PUSH
8012: LD_INT 3
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: LD_INT 33
8028: PUSH
8029: LD_INT 2
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: PPUSH
8045: CALL_OW 70
8049: ST_TO_ADDR
// if tmp then
8050: LD_VAR 0 3
8054: IFFALSE 8173
// begin for i in tmp do
8056: LD_ADDR_VAR 0 2
8060: PUSH
8061: LD_VAR 0 3
8065: PUSH
8066: FOR_IN
8067: IFFALSE 8098
// begin SetSide ( i , 4 ) ;
8069: LD_VAR 0 2
8073: PPUSH
8074: LD_INT 4
8076: PPUSH
8077: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
8081: LD_VAR 0 2
8085: PPUSH
8086: LD_INT 42
8088: PPUSH
8089: LD_INT 22
8091: PPUSH
8092: CALL_OW 111
// end ;
8096: GO 8066
8098: POP
8099: POP
// repeat wait ( 0 0$3 ) ;
8100: LD_INT 105
8102: PPUSH
8103: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
8107: LD_VAR 0 3
8111: PPUSH
8112: LD_INT 51
8114: PPUSH
8115: LD_INT 16
8117: PPUSH
8118: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8122: LD_VAR 0 3
8126: PPUSH
8127: LD_INT 95
8129: PUSH
8130: LD_INT 17
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PPUSH
8137: CALL_OW 72
8141: NOT
8142: IFFALSE 8100
// for i in tmp do
8144: LD_ADDR_VAR 0 2
8148: PUSH
8149: LD_VAR 0 3
8153: PUSH
8154: FOR_IN
8155: IFFALSE 8171
// SetSide ( i , 1 ) ;
8157: LD_VAR 0 2
8161: PPUSH
8162: LD_INT 1
8164: PPUSH
8165: CALL_OW 235
8169: GO 8154
8171: POP
8172: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8173: LD_ADDR_VAR 0 3
8177: PUSH
8178: LD_INT 17
8180: PPUSH
8181: LD_INT 22
8183: PUSH
8184: LD_INT 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 33
8193: PUSH
8194: LD_INT 2
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PPUSH
8205: CALL_OW 70
8209: ST_TO_ADDR
// if tmp then
8210: LD_VAR 0 3
8214: IFFALSE 8238
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8216: LD_VAR 0 3
8220: PPUSH
8221: LD_INT 40
8223: PPUSH
8224: LD_INT 32
8226: PPUSH
8227: CALL_OW 111
// wait ( 0 0$3 ) ;
8231: LD_INT 105
8233: PPUSH
8234: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8238: LD_ADDR_VAR 0 3
8242: PUSH
8243: LD_INT 17
8245: PPUSH
8246: LD_INT 22
8248: PUSH
8249: LD_INT 1
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 2
8258: PUSH
8259: LD_INT 21
8261: PUSH
8262: LD_INT 2
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 21
8271: PUSH
8272: LD_INT 3
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PPUSH
8288: CALL_OW 70
8292: ST_TO_ADDR
// if tmp then
8293: LD_VAR 0 3
8297: IFFALSE 8445
// begin repeat wait ( 0 0$1 ) ;
8299: LD_INT 35
8301: PPUSH
8302: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: LD_INT 17
8313: PPUSH
8314: LD_INT 22
8316: PUSH
8317: LD_INT 1
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: LD_INT 2
8326: PUSH
8327: LD_INT 21
8329: PUSH
8330: LD_INT 2
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PUSH
8337: LD_INT 21
8339: PUSH
8340: LD_INT 3
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PPUSH
8356: CALL_OW 70
8360: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8361: LD_ADDR_VAR 0 2
8365: PUSH
8366: LD_INT 22
8368: PUSH
8369: LD_INT 4
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 2
8378: PUSH
8379: LD_INT 25
8381: PUSH
8382: LD_INT 1
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 21
8391: PUSH
8392: LD_INT 2
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: LIST
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 69
8412: PUSH
8413: FOR_IN
8414: IFFALSE 8436
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8416: LD_VAR 0 2
8420: PPUSH
8421: LD_VAR 0 3
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: CALL_OW 115
8434: GO 8413
8436: POP
8437: POP
// until not tmp ;
8438: LD_VAR 0 3
8442: NOT
8443: IFFALSE 8299
// end ; wait ( 0 0$2 ) ;
8445: LD_INT 70
8447: PPUSH
8448: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8452: LD_ADDR_VAR 0 3
8456: PUSH
8457: LD_INT 22
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PPUSH
8467: CALL_OW 69
8471: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8472: LD_VAR 0 3
8476: PPUSH
8477: LD_INT 52
8479: PPUSH
8480: LD_INT 54
8482: PPUSH
8483: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8487: LD_VAR 0 3
8491: PPUSH
8492: LD_INT 175
8494: PPUSH
8495: CALL_OW 202
// wait ( 0 0$5 ) ;
8499: LD_INT 175
8501: PPUSH
8502: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8506: LD_VAR 0 3
8510: PPUSH
8511: LD_INT 120
8513: PUSH
8514: LD_INT 101
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 72
8525: PPUSH
8526: LD_INT 42
8528: PPUSH
8529: LD_INT 52
8531: PPUSH
8532: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8536: LD_VAR 0 3
8540: PPUSH
8541: LD_INT 120
8543: PUSH
8544: LD_INT 101
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 72
8555: PPUSH
8556: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8560: LD_VAR 0 3
8564: PPUSH
8565: LD_INT 120
8567: PUSH
8568: LD_INT 101
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PUSH
8575: LD_INT 25
8577: PUSH
8578: LD_INT 4
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PPUSH
8589: CALL_OW 72
8593: PPUSH
8594: LD_INT 34
8596: PPUSH
8597: LD_INT 47
8599: PPUSH
8600: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8604: LD_VAR 0 3
8608: PPUSH
8609: LD_INT 120
8611: PUSH
8612: LD_INT 101
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 25
8621: PUSH
8622: LD_INT 4
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PPUSH
8633: CALL_OW 72
8637: PPUSH
8638: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8642: LD_ADDR_VAR 0 7
8646: PUSH
8647: LD_VAR 0 3
8651: PPUSH
8652: LD_INT 21
8654: PUSH
8655: LD_INT 2
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PPUSH
8662: CALL_OW 72
8666: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8667: LD_ADDR_VAR 0 4
8671: PUSH
8672: LD_INT 81
8674: PUSH
8675: LD_INT 1
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 69
8686: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8687: LD_ADDR_VAR 0 5
8691: PUSH
8692: LD_INT 57
8694: PUSH
8695: LD_INT 66
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 62
8704: PUSH
8705: LD_INT 58
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8716: LD_INT 35
8718: PPUSH
8719: CALL_OW 67
// for i in filter do
8723: LD_ADDR_VAR 0 2
8727: PUSH
8728: LD_VAR 0 7
8732: PUSH
8733: FOR_IN
8734: IFFALSE 9158
// begin if IsDead ( i ) then
8736: LD_VAR 0 2
8740: PPUSH
8741: CALL_OW 301
8745: IFFALSE 8765
// begin filter := filter diff i ;
8747: LD_ADDR_VAR 0 7
8751: PUSH
8752: LD_VAR 0 7
8756: PUSH
8757: LD_VAR 0 2
8761: DIFF
8762: ST_TO_ADDR
// continue ;
8763: GO 8733
// end ; tmp := IsDrivenBy ( i ) ;
8765: LD_ADDR_VAR 0 3
8769: PUSH
8770: LD_VAR 0 2
8774: PPUSH
8775: CALL_OW 311
8779: ST_TO_ADDR
// if not tmp then
8780: LD_VAR 0 3
8784: NOT
8785: IFFALSE 8789
// continue ;
8787: GO 8733
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8789: LD_VAR 0 2
8793: PPUSH
8794: CALL_OW 261
8798: PUSH
8799: LD_INT 30
8801: GREATER
8802: PUSH
8803: LD_VAR 0 2
8807: PPUSH
8808: CALL_OW 110
8812: PUSH
8813: LD_INT 2
8815: EQUAL
8816: AND
8817: IFFALSE 8833
// SetTag ( i , 0 ) else
8819: LD_VAR 0 2
8823: PPUSH
8824: LD_INT 0
8826: PPUSH
8827: CALL_OW 109
8831: GO 8862
// if GetTag ( i ) = 2 then
8833: LD_VAR 0 2
8837: PPUSH
8838: CALL_OW 110
8842: PUSH
8843: LD_INT 2
8845: EQUAL
8846: IFFALSE 8862
// begin ComMoveUnit ( i , amDepot ) ;
8848: LD_VAR 0 2
8852: PPUSH
8853: LD_EXP 31
8857: PPUSH
8858: CALL_OW 112
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8862: LD_VAR 0 2
8866: PPUSH
8867: CALL_OW 256
8871: PUSH
8872: LD_INT 600
8874: GREATEREQUAL
8875: PUSH
8876: LD_VAR 0 2
8880: PPUSH
8881: CALL_OW 110
8885: NOT
8886: AND
8887: IFFALSE 8913
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8889: LD_VAR 0 2
8893: PPUSH
8894: LD_VAR 0 4
8898: PPUSH
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 74
8908: PPUSH
8909: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8913: LD_VAR 0 2
8917: PPUSH
8918: CALL_OW 256
8922: PUSH
8923: LD_INT 600
8925: LESS
8926: PUSH
8927: LD_VAR 0 2
8931: PPUSH
8932: CALL_OW 110
8936: NOT
8937: AND
8938: IFFALSE 9014
// begin SetTag ( i , 1 ) ;
8940: LD_VAR 0 2
8944: PPUSH
8945: LD_INT 1
8947: PPUSH
8948: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8952: LD_ADDR_VAR 0 6
8956: PUSH
8957: LD_VAR 0 2
8961: PPUSH
8962: LD_VAR 0 5
8966: PPUSH
8967: CALL 82931 0 2
8971: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8972: LD_VAR 0 2
8976: PPUSH
8977: LD_VAR 0 6
8981: PUSH
8982: LD_INT 1
8984: ARRAY
8985: PPUSH
8986: LD_VAR 0 6
8990: PUSH
8991: LD_INT 2
8993: ARRAY
8994: PPUSH
8995: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8999: LD_VAR 0 2
9003: PPUSH
9004: LD_INT 40
9006: PPUSH
9007: LD_INT 49
9009: PPUSH
9010: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
9014: LD_VAR 0 2
9018: PPUSH
9019: CALL_OW 110
9023: PUSH
9024: LD_INT 1
9026: EQUAL
9027: PUSH
9028: LD_VAR 0 2
9032: PPUSH
9033: LD_INT 40
9035: PPUSH
9036: LD_INT 49
9038: PPUSH
9039: CALL_OW 297
9043: PUSH
9044: LD_INT 9
9046: LESS
9047: AND
9048: PUSH
9049: LD_VAR 0 3
9053: AND
9054: IFFALSE 9156
// begin ComExitVehicle ( tmp ) ;
9056: LD_VAR 0 3
9060: PPUSH
9061: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
9065: LD_VAR 0 3
9069: PPUSH
9070: LD_VAR 0 2
9074: PPUSH
9075: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9079: LD_INT 35
9081: PPUSH
9082: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9086: LD_VAR 0 2
9090: PPUSH
9091: CALL_OW 256
9095: PUSH
9096: LD_INT 1000
9098: EQUAL
9099: IFFALSE 9079
// ComEnterUnit ( tmp , i ) ;
9101: LD_VAR 0 3
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: CALL_OW 120
// if GetFuel ( i ) <= 30 then
9115: LD_VAR 0 2
9119: PPUSH
9120: CALL_OW 261
9124: PUSH
9125: LD_INT 30
9127: LESSEQUAL
9128: IFFALSE 9144
// SetTag ( i , 2 ) else
9130: LD_VAR 0 2
9134: PPUSH
9135: LD_INT 2
9137: PPUSH
9138: CALL_OW 109
9142: GO 9156
// SetTag ( i , 0 ) ;
9144: LD_VAR 0 2
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 109
// end ; end ;
9156: GO 8733
9158: POP
9159: POP
// until not filter ;
9160: LD_VAR 0 7
9164: NOT
9165: IFFALSE 8716
// end ; end_of_file
9167: LD_VAR 0 1
9171: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9172: LD_INT 0
9174: PPUSH
9175: PPUSH
9176: PPUSH
9177: PPUSH
9178: PPUSH
// uc_side := 3 ;
9179: LD_ADDR_OWVAR 20
9183: PUSH
9184: LD_INT 3
9186: ST_TO_ADDR
// uc_nation := 3 ;
9187: LD_ADDR_OWVAR 21
9191: PUSH
9192: LD_INT 3
9194: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9195: LD_ADDR_EXP 33
9199: PUSH
9200: LD_INT 8
9202: PUSH
9203: LD_INT 11
9205: PUSH
9206: LD_INT 14
9208: PUSH
9209: LD_INT 17
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: PUSH
9218: LD_OWVAR 67
9222: ARRAY
9223: ST_TO_ADDR
// ruMobile := [ ] ;
9224: LD_ADDR_EXP 34
9228: PUSH
9229: EMPTY
9230: ST_TO_ADDR
// ruBuildList := [ ] ;
9231: LD_ADDR_EXP 35
9235: PUSH
9236: EMPTY
9237: ST_TO_ADDR
// russianAttackers := [ ] ;
9238: LD_ADDR_EXP 36
9242: PUSH
9243: EMPTY
9244: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9245: LD_ADDR_VAR 0 5
9249: PUSH
9250: LD_INT 43
9252: PUSH
9253: LD_INT 44
9255: PUSH
9256: LD_INT 46
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: ST_TO_ADDR
// if Difficulty > 2 then
9264: LD_OWVAR 67
9268: PUSH
9269: LD_INT 2
9271: GREATER
9272: IFFALSE 9295
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9274: LD_ADDR_VAR 0 5
9278: PUSH
9279: LD_VAR 0 5
9283: PUSH
9284: LD_INT 45
9286: PUSH
9287: LD_INT 46
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: ADD
9294: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9295: LD_ADDR_EXP 32
9299: PUSH
9300: LD_STRING Borodin
9302: PPUSH
9303: CALL_OW 25
9307: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9308: LD_EXP 32
9312: PPUSH
9313: LD_INT 28
9315: PPUSH
9316: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9320: LD_INT 28
9322: PPUSH
9323: CALL_OW 274
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: LD_INT 3000
9333: PUSH
9334: LD_INT 4000
9336: PUSH
9337: LD_INT 5000
9339: PUSH
9340: LD_INT 6000
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: PUSH
9349: LD_OWVAR 67
9353: ARRAY
9354: PPUSH
9355: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9359: LD_INT 28
9361: PPUSH
9362: CALL_OW 274
9366: PPUSH
9367: LD_INT 2
9369: PPUSH
9370: LD_INT 1000
9372: PPUSH
9373: CALL_OW 277
// if Difficulty > 2 then
9377: LD_OWVAR 67
9381: PUSH
9382: LD_INT 2
9384: GREATER
9385: IFFALSE 9509
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9387: LD_ADDR_VAR 0 4
9391: PUSH
9392: LD_INT 99
9394: PUSH
9395: LD_INT 130
9397: PUSH
9398: LD_INT 2
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 121
9408: PUSH
9409: LD_INT 127
9411: PUSH
9412: LD_INT 4
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 117
9422: PUSH
9423: LD_INT 121
9425: PUSH
9426: LD_INT 4
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: ST_TO_ADDR
// for i in tmp do
9439: LD_ADDR_VAR 0 2
9443: PUSH
9444: LD_VAR 0 4
9448: PUSH
9449: FOR_IN
9450: IFFALSE 9507
// begin bc_type := b_turret ;
9452: LD_ADDR_OWVAR 42
9456: PUSH
9457: LD_INT 33
9459: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9460: LD_ADDR_OWVAR 43
9464: PUSH
9465: LD_INT 2
9467: PUSH
9468: LD_OWVAR 67
9472: PLUS
9473: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9474: LD_VAR 0 2
9478: PUSH
9479: LD_INT 1
9481: ARRAY
9482: PPUSH
9483: LD_VAR 0 2
9487: PUSH
9488: LD_INT 2
9490: ARRAY
9491: PPUSH
9492: LD_VAR 0 2
9496: PUSH
9497: LD_INT 3
9499: ARRAY
9500: PPUSH
9501: CALL_OW 47
// end ;
9505: GO 9449
9507: POP
9508: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9509: LD_ADDR_VAR 0 2
9513: PUSH
9514: LD_INT 22
9516: PUSH
9517: LD_INT 3
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: PUSH
9524: LD_INT 21
9526: PUSH
9527: LD_INT 3
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PPUSH
9538: CALL_OW 69
9542: PUSH
9543: FOR_IN
9544: IFFALSE 9566
// SetBLevel ( i , 2 + Difficulty ) ;
9546: LD_VAR 0 2
9550: PPUSH
9551: LD_INT 2
9553: PUSH
9554: LD_OWVAR 67
9558: PLUS
9559: PPUSH
9560: CALL_OW 241
9564: GO 9543
9566: POP
9567: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9568: LD_ADDR_VAR 0 4
9572: PUSH
9573: LD_INT 22
9575: PUSH
9576: LD_INT 3
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 30
9588: PUSH
9589: LD_INT 32
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 30
9598: PUSH
9599: LD_INT 33
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 69
9619: ST_TO_ADDR
// for i in tmp do
9620: LD_ADDR_VAR 0 2
9624: PUSH
9625: LD_VAR 0 4
9629: PUSH
9630: FOR_IN
9631: IFFALSE 9663
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9633: LD_VAR 0 2
9637: PPUSH
9638: LD_VAR 0 5
9642: PUSH
9643: LD_INT 1
9645: PPUSH
9646: LD_VAR 0 5
9650: PPUSH
9651: CALL_OW 12
9655: ARRAY
9656: PPUSH
9657: CALL_OW 431
9661: GO 9630
9663: POP
9664: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9665: LD_ADDR_VAR 0 2
9669: PUSH
9670: LD_INT 22
9672: PUSH
9673: LD_INT 3
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 30
9682: PUSH
9683: LD_INT 32
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PPUSH
9694: CALL_OW 69
9698: PUSH
9699: FOR_IN
9700: IFFALSE 9749
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9702: LD_INT 0
9704: PPUSH
9705: LD_INT 5
9707: PUSH
9708: LD_INT 6
9710: PUSH
9711: LD_INT 7
9713: PUSH
9714: LD_INT 8
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: LD_OWVAR 67
9727: ARRAY
9728: PPUSH
9729: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9733: CALL_OW 44
9737: PPUSH
9738: LD_VAR 0 2
9742: PPUSH
9743: CALL_OW 52
// end ;
9747: GO 9699
9749: POP
9750: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9751: LD_ADDR_VAR 0 2
9755: PUSH
9756: LD_INT 22
9758: PUSH
9759: LD_INT 3
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 30
9768: PUSH
9769: LD_INT 5
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PPUSH
9780: CALL_OW 69
9784: PUSH
9785: FOR_IN
9786: IFFALSE 9876
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9788: LD_ADDR_VAR 0 3
9792: PUSH
9793: DOUBLE
9794: LD_INT 1
9796: DEC
9797: ST_TO_ADDR
9798: LD_INT 2
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: LD_INT 4
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: PUSH
9816: LD_OWVAR 67
9820: ARRAY
9821: PUSH
9822: FOR_TO
9823: IFFALSE 9872
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9825: LD_INT 0
9827: PPUSH
9828: LD_INT 5
9830: PUSH
9831: LD_INT 6
9833: PUSH
9834: LD_INT 7
9836: PUSH
9837: LD_INT 8
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: PUSH
9846: LD_OWVAR 67
9850: ARRAY
9851: PPUSH
9852: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9856: CALL_OW 44
9860: PPUSH
9861: LD_VAR 0 2
9865: PPUSH
9866: CALL_OW 52
// end ;
9870: GO 9822
9872: POP
9873: POP
// end ;
9874: GO 9785
9876: POP
9877: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9878: LD_ADDR_VAR 0 2
9882: PUSH
9883: DOUBLE
9884: LD_INT 1
9886: DEC
9887: ST_TO_ADDR
9888: LD_INT 3
9890: PUSH
9891: LD_INT 4
9893: PUSH
9894: LD_INT 5
9896: PUSH
9897: LD_INT 5
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: LD_OWVAR 67
9910: ARRAY
9911: PUSH
9912: FOR_TO
9913: IFFALSE 9960
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9915: LD_INT 0
9917: PPUSH
9918: LD_INT 4
9920: PUSH
9921: LD_INT 5
9923: PUSH
9924: LD_INT 5
9926: PUSH
9927: LD_INT 6
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: PUSH
9936: LD_OWVAR 67
9940: ARRAY
9941: PPUSH
9942: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9946: CALL_OW 44
9950: PPUSH
9951: LD_INT 28
9953: PPUSH
9954: CALL_OW 52
// end ;
9958: GO 9912
9960: POP
9961: POP
// for i := 1 to 2 do
9962: LD_ADDR_VAR 0 2
9966: PUSH
9967: DOUBLE
9968: LD_INT 1
9970: DEC
9971: ST_TO_ADDR
9972: LD_INT 2
9974: PUSH
9975: FOR_TO
9976: IFFALSE 10010
// begin PrepareScientist ( false , 6 ) ;
9978: LD_INT 0
9980: PPUSH
9981: LD_INT 6
9983: PPUSH
9984: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9988: CALL_OW 44
9992: PPUSH
9993: LD_INT 81
9995: PPUSH
9996: LD_INT 93
9998: PPUSH
9999: CALL_OW 428
10003: PPUSH
10004: CALL_OW 52
// end ;
10008: GO 9975
10010: POP
10011: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
10012: LD_INT 22
10014: PPUSH
10015: LD_INT 1
10017: PPUSH
10018: LD_INT 3
10020: PPUSH
10021: LD_INT 51
10023: PPUSH
10024: LD_INT 100
10026: PPUSH
10027: CALL 46706 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
10031: CALL_OW 45
10035: PPUSH
10036: LD_INT 91
10038: PPUSH
10039: LD_INT 94
10041: PPUSH
10042: LD_INT 3
10044: PPUSH
10045: LD_INT 0
10047: PPUSH
10048: CALL_OW 50
// for i := 1 to 2 do
10052: LD_ADDR_VAR 0 2
10056: PUSH
10057: DOUBLE
10058: LD_INT 1
10060: DEC
10061: ST_TO_ADDR
10062: LD_INT 2
10064: PUSH
10065: FOR_TO
10066: IFFALSE 10110
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
10068: LD_INT 22
10070: PPUSH
10071: LD_INT 1
10073: PPUSH
10074: LD_INT 3
10076: PPUSH
10077: LD_INT 52
10079: PPUSH
10080: LD_INT 100
10082: PPUSH
10083: CALL 46706 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
10087: CALL_OW 45
10091: PPUSH
10092: LD_INT 91
10094: PPUSH
10095: LD_INT 94
10097: PPUSH
10098: LD_INT 4
10100: PPUSH
10101: LD_INT 0
10103: PPUSH
10104: CALL_OW 50
// end ;
10108: GO 10065
10110: POP
10111: POP
// end ;
10112: LD_VAR 0 1
10116: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
10117: LD_INT 0
10119: PPUSH
10120: PPUSH
10121: PPUSH
10122: PPUSH
10123: PPUSH
// uc_side := 3 ;
10124: LD_ADDR_OWVAR 20
10128: PUSH
10129: LD_INT 3
10131: ST_TO_ADDR
// uc_nation := 3 ;
10132: LD_ADDR_OWVAR 21
10136: PUSH
10137: LD_INT 3
10139: ST_TO_ADDR
// for i := 1 to 4 do
10140: LD_ADDR_VAR 0 2
10144: PUSH
10145: DOUBLE
10146: LD_INT 1
10148: DEC
10149: ST_TO_ADDR
10150: LD_INT 4
10152: PUSH
10153: FOR_TO
10154: IFFALSE 10281
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10156: LD_INT 22
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: LD_INT 1
10164: PPUSH
10165: LD_INT 42
10167: PUSH
10168: LD_INT 43
10170: PUSH
10171: LD_INT 44
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 1
10181: PPUSH
10182: LD_INT 3
10184: PPUSH
10185: CALL_OW 12
10189: ARRAY
10190: PPUSH
10191: LD_INT 40
10193: PPUSH
10194: CALL 46706 0 5
// veh := CreateVehicle ;
10198: LD_ADDR_VAR 0 4
10202: PUSH
10203: CALL_OW 45
10207: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10208: LD_VAR 0 4
10212: PPUSH
10213: LD_INT 5
10215: PPUSH
10216: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10220: LD_VAR 0 4
10224: PPUSH
10225: LD_INT 7
10227: PPUSH
10228: LD_INT 0
10230: PPUSH
10231: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10235: LD_INT 0
10237: PPUSH
10238: LD_INT 5
10240: PPUSH
10241: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10245: CALL_OW 44
10249: PPUSH
10250: LD_VAR 0 4
10254: PPUSH
10255: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10259: LD_ADDR_VAR 0 5
10263: PUSH
10264: LD_VAR 0 5
10268: PPUSH
10269: LD_VAR 0 4
10273: PPUSH
10274: CALL 79577 0 2
10278: ST_TO_ADDR
// end ;
10279: GO 10153
10281: POP
10282: POP
// for i := 1 to 3 do
10283: LD_ADDR_VAR 0 2
10287: PUSH
10288: DOUBLE
10289: LD_INT 1
10291: DEC
10292: ST_TO_ADDR
10293: LD_INT 3
10295: PUSH
10296: FOR_TO
10297: IFFALSE 10424
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10299: LD_INT 22
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: LD_INT 1
10307: PPUSH
10308: LD_INT 42
10310: PUSH
10311: LD_INT 43
10313: PUSH
10314: LD_INT 44
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: PUSH
10322: LD_INT 1
10324: PPUSH
10325: LD_INT 3
10327: PPUSH
10328: CALL_OW 12
10332: ARRAY
10333: PPUSH
10334: LD_INT 40
10336: PPUSH
10337: CALL 46706 0 5
// veh := CreateVehicle ;
10341: LD_ADDR_VAR 0 4
10345: PUSH
10346: CALL_OW 45
10350: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10351: LD_VAR 0 4
10355: PPUSH
10356: LD_INT 5
10358: PPUSH
10359: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10363: LD_VAR 0 4
10367: PPUSH
10368: LD_INT 8
10370: PPUSH
10371: LD_INT 0
10373: PPUSH
10374: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10378: LD_INT 0
10380: PPUSH
10381: LD_INT 5
10383: PPUSH
10384: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10388: CALL_OW 44
10392: PPUSH
10393: LD_VAR 0 4
10397: PPUSH
10398: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10402: LD_ADDR_VAR 0 5
10406: PUSH
10407: LD_VAR 0 5
10411: PPUSH
10412: LD_VAR 0 4
10416: PPUSH
10417: CALL 79577 0 2
10421: ST_TO_ADDR
// end ;
10422: GO 10296
10424: POP
10425: POP
// for i := 1 to 2 do
10426: LD_ADDR_VAR 0 2
10430: PUSH
10431: DOUBLE
10432: LD_INT 1
10434: DEC
10435: ST_TO_ADDR
10436: LD_INT 2
10438: PUSH
10439: FOR_TO
10440: IFFALSE 10499
// begin PrepareSoldier ( false , 5 ) ;
10442: LD_INT 0
10444: PPUSH
10445: LD_INT 5
10447: PPUSH
10448: CALL_OW 381
// un := CreateHuman ;
10452: LD_ADDR_VAR 0 3
10456: PUSH
10457: CALL_OW 44
10461: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10462: LD_VAR 0 3
10466: PPUSH
10467: LD_INT 8
10469: PPUSH
10470: LD_INT 0
10472: PPUSH
10473: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 5
10486: PPUSH
10487: LD_VAR 0 3
10491: PPUSH
10492: CALL 79577 0 2
10496: ST_TO_ADDR
// end ;
10497: GO 10439
10499: POP
10500: POP
// for i in tmp do
10501: LD_ADDR_VAR 0 2
10505: PUSH
10506: LD_VAR 0 5
10510: PUSH
10511: FOR_IN
10512: IFFALSE 10531
// ComAgressiveMove ( i , 51 , 16 ) ;
10514: LD_VAR 0 2
10518: PPUSH
10519: LD_INT 51
10521: PPUSH
10522: LD_INT 16
10524: PPUSH
10525: CALL_OW 114
10529: GO 10511
10531: POP
10532: POP
// end ;
10533: LD_VAR 0 1
10537: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10538: LD_EXP 34
10542: IFFALSE 11117
10544: GO 10546
10546: DISABLE
10547: LD_INT 0
10549: PPUSH
10550: PPUSH
10551: PPUSH
// begin enable ;
10552: ENABLE
// if not ruMobile then
10553: LD_EXP 34
10557: NOT
10558: IFFALSE 10562
// exit ;
10560: GO 11117
// for i in ruMobile do
10562: LD_ADDR_VAR 0 1
10566: PUSH
10567: LD_EXP 34
10571: PUSH
10572: FOR_IN
10573: IFFALSE 11115
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10575: LD_VAR 0 1
10579: PPUSH
10580: CALL_OW 302
10584: NOT
10585: PUSH
10586: LD_VAR 0 1
10590: PPUSH
10591: CALL_OW 255
10595: PUSH
10596: LD_INT 3
10598: NONEQUAL
10599: OR
10600: IFFALSE 10620
// begin ruMobile := ruMobile diff i ;
10602: LD_ADDR_EXP 34
10606: PUSH
10607: LD_EXP 34
10611: PUSH
10612: LD_VAR 0 1
10616: DIFF
10617: ST_TO_ADDR
// continue ;
10618: GO 10572
// end ; if GetTag ( i ) = 300 then
10620: LD_VAR 0 1
10624: PPUSH
10625: CALL_OW 110
10629: PUSH
10630: LD_INT 300
10632: EQUAL
10633: IFFALSE 10748
// begin if GetFuel ( i ) < 50 then
10635: LD_VAR 0 1
10639: PPUSH
10640: CALL_OW 261
10644: PUSH
10645: LD_INT 50
10647: LESS
10648: IFFALSE 10707
// begin ComMoveXY ( i , 93 , 100 ) ;
10650: LD_VAR 0 1
10654: PPUSH
10655: LD_INT 93
10657: PPUSH
10658: LD_INT 100
10660: PPUSH
10661: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10665: LD_INT 35
10667: PPUSH
10668: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10672: LD_VAR 0 1
10676: PPUSH
10677: LD_INT 93
10679: PPUSH
10680: LD_INT 100
10682: PPUSH
10683: CALL_OW 297
10687: PUSH
10688: LD_INT 4
10690: LESS
10691: IFFALSE 10665
// SetFuel ( i , 100 ) ;
10693: LD_VAR 0 1
10697: PPUSH
10698: LD_INT 100
10700: PPUSH
10701: CALL_OW 240
// end else
10705: GO 10748
// if not IsInArea ( i , ruParkingArea ) then
10707: LD_VAR 0 1
10711: PPUSH
10712: LD_INT 10
10714: PPUSH
10715: CALL_OW 308
10719: NOT
10720: IFFALSE 10736
// ComMoveToArea ( i , ruParkingArea ) else
10722: LD_VAR 0 1
10726: PPUSH
10727: LD_INT 10
10729: PPUSH
10730: CALL_OW 113
10734: GO 10748
// SetTag ( i , 301 ) ;
10736: LD_VAR 0 1
10740: PPUSH
10741: LD_INT 301
10743: PPUSH
10744: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10748: LD_VAR 0 1
10752: PPUSH
10753: CALL_OW 110
10757: PUSH
10758: LD_INT 301
10760: EQUAL
10761: IFFALSE 10891
// begin if GetLives ( i ) < 1000 then
10763: LD_VAR 0 1
10767: PPUSH
10768: CALL_OW 256
10772: PUSH
10773: LD_INT 1000
10775: LESS
10776: IFFALSE 10868
// begin if not IsDrivenBy ( i ) then
10778: LD_VAR 0 1
10782: PPUSH
10783: CALL_OW 311
10787: NOT
10788: IFFALSE 10792
// continue ;
10790: GO 10572
// mech := IsDrivenBy ( i ) ;
10792: LD_ADDR_VAR 0 2
10796: PUSH
10797: LD_VAR 0 1
10801: PPUSH
10802: CALL_OW 311
10806: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10807: LD_VAR 0 2
10811: PPUSH
10812: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10816: LD_VAR 0 2
10820: PPUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10830: LD_INT 35
10832: PPUSH
10833: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10837: LD_VAR 0 1
10841: PPUSH
10842: CALL_OW 256
10846: PUSH
10847: LD_INT 1000
10849: EQUAL
10850: IFFALSE 10830
// ComEnterUnit ( mech , i ) ;
10852: LD_VAR 0 2
10856: PPUSH
10857: LD_VAR 0 1
10861: PPUSH
10862: CALL_OW 120
// end else
10866: GO 10891
// if IsDrivenBy ( i ) then
10868: LD_VAR 0 1
10872: PPUSH
10873: CALL_OW 311
10877: IFFALSE 10891
// SetTag ( i , 0 ) ;
10879: LD_VAR 0 1
10883: PPUSH
10884: LD_INT 0
10886: PPUSH
10887: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10891: LD_VAR 0 1
10895: PPUSH
10896: CALL_OW 110
10900: PUSH
10901: LD_INT 300
10903: LESS
10904: IFFALSE 11113
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10906: LD_ADDR_VAR 0 3
10910: PUSH
10911: LD_INT 11
10913: PPUSH
10914: LD_INT 81
10916: PUSH
10917: LD_INT 3
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PPUSH
10924: CALL_OW 70
10928: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10929: LD_VAR 0 1
10933: PPUSH
10934: CALL_OW 256
10938: PUSH
10939: LD_INT 650
10941: LESS
10942: IFFALSE 10967
// begin ComStop ( i ) ;
10944: LD_VAR 0 1
10948: PPUSH
10949: CALL_OW 141
// SetTag ( i , 300 ) ;
10953: LD_VAR 0 1
10957: PPUSH
10958: LD_INT 300
10960: PPUSH
10961: CALL_OW 109
// continue ;
10965: GO 10572
// end ; if enemy then
10967: LD_VAR 0 3
10971: IFFALSE 11011
// begin if not HasTask ( i ) then
10973: LD_VAR 0 1
10977: PPUSH
10978: CALL_OW 314
10982: NOT
10983: IFFALSE 11009
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10985: LD_VAR 0 1
10989: PPUSH
10990: LD_VAR 0 3
10994: PPUSH
10995: LD_VAR 0 1
10999: PPUSH
11000: CALL_OW 74
11004: PPUSH
11005: CALL_OW 115
// end else
11009: GO 11113
// if ruMobile > 1 then
11011: LD_EXP 34
11015: PUSH
11016: LD_INT 1
11018: GREATER
11019: IFFALSE 11113
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
11021: LD_ADDR_VAR 0 3
11025: PUSH
11026: LD_INT 81
11028: PUSH
11029: LD_INT 3
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PPUSH
11036: CALL_OW 69
11040: ST_TO_ADDR
// if enemy then
11041: LD_VAR 0 3
11045: IFFALSE 11113
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
11047: LD_VAR 0 1
11051: PPUSH
11052: LD_INT 116
11054: PUSH
11055: LD_INT 95
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: LD_INT 84
11064: PUSH
11065: LD_INT 68
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: LD_INT 58
11074: PUSH
11075: LD_INT 53
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 44
11084: PUSH
11085: LD_INT 35
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 45
11094: PUSH
11095: LD_INT 23
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: PPUSH
11109: CALL 82187 0 2
// end ; end ; end ;
11113: GO 10572
11115: POP
11116: POP
// end ;
11117: PPOPN 3
11119: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11120: LD_INT 3
11122: PUSH
11123: LD_INT 22
11125: PUSH
11126: LD_INT 1
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 32
11139: PUSH
11140: LD_INT 1
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: IFFALSE 11239
11157: GO 11159
11159: DISABLE
11160: LD_INT 0
11162: PPUSH
// begin enable ;
11163: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11164: LD_ADDR_VAR 0 1
11168: PUSH
11169: LD_INT 3
11171: PUSH
11172: LD_INT 22
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 32
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: PUSH
11205: FOR_IN
11206: IFFALSE 11237
// if GetFuel ( i ) < 3 then
11208: LD_VAR 0 1
11212: PPUSH
11213: CALL_OW 261
11217: PUSH
11218: LD_INT 3
11220: LESS
11221: IFFALSE 11235
// SetFuel ( i , 3 ) ;
11223: LD_VAR 0 1
11227: PPUSH
11228: LD_INT 3
11230: PPUSH
11231: CALL_OW 240
11235: GO 11205
11237: POP
11238: POP
// end ;
11239: PPOPN 1
11241: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11242: LD_INT 29
11244: PPUSH
11245: CALL_OW 302
11249: PUSH
11250: LD_INT 29
11252: PPUSH
11253: CALL_OW 461
11257: PUSH
11258: LD_INT 2
11260: EQUAL
11261: AND
11262: IFFALSE 11495
11264: GO 11266
11266: DISABLE
11267: LD_INT 0
11269: PPUSH
11270: PPUSH
// begin enable ;
11271: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11272: LD_ADDR_VAR 0 1
11276: PUSH
11277: LD_INT 21
11279: PUSH
11280: LD_INT 22
11282: PUSH
11283: LD_INT 23
11285: PUSH
11286: LD_INT 24
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 1
11297: PPUSH
11298: LD_INT 4
11300: PPUSH
11301: CALL_OW 12
11305: ARRAY
11306: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11307: LD_ADDR_VAR 0 2
11311: PUSH
11312: LD_INT 42
11314: PUSH
11315: LD_INT 44
11317: PUSH
11318: LD_INT 43
11320: PUSH
11321: LD_INT 46
11323: PUSH
11324: LD_INT 45
11326: PUSH
11327: LD_INT 46
11329: PUSH
11330: LD_INT 45
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_OWVAR 67
11346: PUSH
11347: LD_INT 0
11349: PPUSH
11350: LD_INT 3
11352: PPUSH
11353: CALL_OW 12
11357: PLUS
11358: ARRAY
11359: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11360: LD_VAR 0 1
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 22
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: IN
11375: PUSH
11376: LD_VAR 0 2
11380: PUSH
11381: LD_INT 46
11383: EQUAL
11384: AND
11385: IFFALSE 11414
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11387: LD_ADDR_VAR 0 2
11391: PUSH
11392: LD_INT 44
11394: PUSH
11395: LD_INT 45
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 1
11404: PPUSH
11405: LD_INT 2
11407: PPUSH
11408: CALL_OW 12
11412: ARRAY
11413: ST_TO_ADDR
// if tick < [ 15 15$00 , 12 12$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11414: LD_OWVAR 1
11418: PUSH
11419: LD_INT 31500
11421: PUSH
11422: LD_INT 25200
11424: PUSH
11425: LD_INT 21000
11427: PUSH
11428: LD_INT 18900
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: PUSH
11437: LD_OWVAR 67
11441: ARRAY
11442: LESS
11443: IFFALSE 11472
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11445: LD_ADDR_VAR 0 2
11449: PUSH
11450: LD_INT 44
11452: PUSH
11453: LD_INT 43
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: LD_INT 1
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: CALL_OW 12
11470: ARRAY
11471: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11472: LD_INT 29
11474: PPUSH
11475: LD_VAR 0 1
11479: PPUSH
11480: LD_INT 1
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: LD_VAR 0 2
11490: PPUSH
11491: CALL_OW 185
// end ;
11495: PPOPN 2
11497: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11498: LD_INT 28
11500: PPUSH
11501: CALL_OW 302
11505: IFFALSE 13097
11507: GO 11509
11509: DISABLE
11510: LD_INT 0
11512: PPUSH
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
11518: PPUSH
11519: PPUSH
11520: PPUSH
11521: PPUSH
11522: PPUSH
11523: PPUSH
11524: PPUSH
// begin enable ;
11525: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11526: LD_ADDR_VAR 0 4
11530: PUSH
11531: LD_INT 12
11533: PPUSH
11534: LD_INT 3
11536: PUSH
11537: LD_INT 24
11539: PUSH
11540: LD_INT 1000
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 21
11553: PUSH
11554: LD_INT 3
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PPUSH
11565: CALL_OW 70
11569: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11570: LD_ADDR_VAR 0 5
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_INT 3
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 25
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 69
11603: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11604: LD_ADDR_VAR 0 6
11608: PUSH
11609: LD_INT 22
11611: PUSH
11612: LD_INT 3
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 34
11621: PUSH
11622: LD_INT 52
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PPUSH
11633: CALL_OW 69
11637: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11638: LD_ADDR_VAR 0 8
11642: PUSH
11643: LD_INT 22
11645: PUSH
11646: LD_INT 3
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 25
11655: PUSH
11656: LD_INT 4
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 69
11671: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11672: LD_ADDR_VAR 0 9
11676: PUSH
11677: LD_INT 81
11679: PPUSH
11680: LD_INT 93
11682: PPUSH
11683: CALL_OW 428
11687: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11688: LD_ADDR_VAR 0 10
11692: PUSH
11693: LD_INT 22
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 30
11705: PUSH
11706: LD_INT 32
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 50
11715: PUSH
11716: EMPTY
11717: LIST
11718: PUSH
11719: LD_INT 58
11721: PUSH
11722: EMPTY
11723: LIST
11724: PUSH
11725: LD_INT 3
11727: PUSH
11728: LD_INT 120
11730: PUSH
11731: LD_INT 701
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: PPUSH
11749: CALL_OW 69
11753: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11754: LD_ADDR_VAR 0 12
11758: PUSH
11759: LD_INT 22
11761: PUSH
11762: LD_INT 3
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 30
11771: PUSH
11772: LD_INT 5
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 50
11781: PUSH
11782: EMPTY
11783: LIST
11784: PUSH
11785: LD_INT 3
11787: PUSH
11788: LD_INT 62
11790: PUSH
11791: EMPTY
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 69
11808: ST_TO_ADDR
// if emptyTowers then
11809: LD_VAR 0 10
11813: IFFALSE 12074
// begin for i in emptyTowers do
11815: LD_ADDR_VAR 0 1
11819: PUSH
11820: LD_VAR 0 10
11824: PUSH
11825: FOR_IN
11826: IFFALSE 12070
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11828: LD_ADDR_VAR 0 11
11832: PUSH
11833: LD_INT 22
11835: PUSH
11836: LD_INT 3
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: LD_INT 2
11845: PUSH
11846: LD_INT 54
11848: PUSH
11849: EMPTY
11850: LIST
11851: PUSH
11852: LD_INT 95
11854: PUSH
11855: LD_INT 12
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 25
11869: PUSH
11870: LD_INT 1
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 50
11879: PUSH
11880: EMPTY
11881: LIST
11882: PUSH
11883: LD_INT 3
11885: PUSH
11886: LD_INT 120
11888: PUSH
11889: LD_INT 701
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL_OW 69
11911: ST_TO_ADDR
// if not sol then
11912: LD_VAR 0 11
11916: NOT
11917: IFFALSE 11921
// break ;
11919: GO 12070
// for j in sol do
11921: LD_ADDR_VAR 0 2
11925: PUSH
11926: LD_VAR 0 11
11930: PUSH
11931: FOR_IN
11932: IFFALSE 11983
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11934: LD_VAR 0 2
11938: PPUSH
11939: CALL_OW 310
11943: PUSH
11944: LD_VAR 0 2
11948: PPUSH
11949: CALL_OW 310
11953: PPUSH
11954: CALL_OW 266
11958: PUSH
11959: LD_INT 32
11961: EQUAL
11962: AND
11963: IFFALSE 11981
// sol := sol diff j ;
11965: LD_ADDR_VAR 0 11
11969: PUSH
11970: LD_VAR 0 11
11974: PUSH
11975: LD_VAR 0 2
11979: DIFF
11980: ST_TO_ADDR
11981: GO 11931
11983: POP
11984: POP
// if not sol then
11985: LD_VAR 0 11
11989: NOT
11990: IFFALSE 11994
// break ;
11992: GO 12070
// if IsInUnit ( sol [ 1 ] ) then
11994: LD_VAR 0 11
11998: PUSH
11999: LD_INT 1
12001: ARRAY
12002: PPUSH
12003: CALL_OW 310
12007: IFFALSE 12022
// ComExit ( sol [ 1 ] ) ;
12009: LD_VAR 0 11
12013: PUSH
12014: LD_INT 1
12016: ARRAY
12017: PPUSH
12018: CALL 79975 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
12022: LD_VAR 0 11
12026: PUSH
12027: LD_INT 1
12029: ARRAY
12030: PPUSH
12031: LD_INT 701
12033: PPUSH
12034: CALL_OW 109
// SetTag ( i , 701 ) ;
12038: LD_VAR 0 1
12042: PPUSH
12043: LD_INT 701
12045: PPUSH
12046: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
12050: LD_VAR 0 11
12054: PUSH
12055: LD_INT 1
12057: ARRAY
12058: PPUSH
12059: LD_VAR 0 1
12063: PPUSH
12064: CALL_OW 180
// end ;
12068: GO 11825
12070: POP
12071: POP
// end else
12072: GO 12320
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
12074: LD_VAR 0 11
12078: PPUSH
12079: LD_INT 3
12081: PUSH
12082: LD_INT 54
12084: PUSH
12085: EMPTY
12086: LIST
12087: PUSH
12088: LD_INT 95
12090: PUSH
12091: LD_INT 12
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: LIST
12102: PPUSH
12103: CALL_OW 72
12107: IFFALSE 12320
// begin if barracks then
12109: LD_VAR 0 12
12113: IFFALSE 12181
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12115: LD_ADDR_VAR 0 1
12119: PUSH
12120: LD_VAR 0 11
12124: PPUSH
12125: LD_INT 3
12127: PUSH
12128: LD_INT 54
12130: PUSH
12131: EMPTY
12132: LIST
12133: PUSH
12134: LD_INT 95
12136: PUSH
12137: LD_INT 12
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 72
12153: PUSH
12154: FOR_IN
12155: IFFALSE 12177
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12157: LD_VAR 0 1
12161: PPUSH
12162: LD_VAR 0 12
12166: PUSH
12167: LD_INT 1
12169: ARRAY
12170: PPUSH
12171: CALL_OW 120
12175: GO 12154
12177: POP
12178: POP
// end else
12179: GO 12320
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12181: LD_INT 12
12183: PPUSH
12184: LD_INT 81
12186: PUSH
12187: LD_INT 3
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PPUSH
12194: CALL_OW 70
12198: IFFALSE 12320
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12200: LD_ADDR_VAR 0 1
12204: PUSH
12205: LD_VAR 0 11
12209: PPUSH
12210: LD_INT 3
12212: PUSH
12213: LD_INT 54
12215: PUSH
12216: EMPTY
12217: LIST
12218: PUSH
12219: LD_INT 95
12221: PUSH
12222: LD_INT 12
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: LIST
12233: PPUSH
12234: CALL_OW 72
12238: PUSH
12239: FOR_IN
12240: IFFALSE 12318
// begin SetTag ( i , 702 ) ;
12242: LD_VAR 0 1
12246: PPUSH
12247: LD_INT 702
12249: PPUSH
12250: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12254: LD_ADDR_VAR 0 13
12258: PUSH
12259: LD_INT 12
12261: PPUSH
12262: LD_INT 81
12264: PUSH
12265: LD_INT 3
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PPUSH
12272: CALL_OW 70
12276: PPUSH
12277: LD_VAR 0 1
12281: PPUSH
12282: CALL_OW 74
12286: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12287: LD_VAR 0 1
12291: PPUSH
12292: LD_VAR 0 13
12296: PPUSH
12297: CALL_OW 250
12301: PPUSH
12302: LD_VAR 0 13
12306: PPUSH
12307: CALL_OW 251
12311: PPUSH
12312: CALL_OW 114
// end ;
12316: GO 12239
12318: POP
12319: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12320: LD_ADDR_VAR 0 3
12324: PUSH
12325: LD_INT 22
12327: PUSH
12328: LD_INT 3
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 95
12337: PUSH
12338: LD_INT 11
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 50
12347: PUSH
12348: EMPTY
12349: LIST
12350: PUSH
12351: LD_INT 25
12353: PUSH
12354: LD_INT 1
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 120
12363: PUSH
12364: LD_INT 702
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 69
12382: ST_TO_ADDR
// if tmp then
12383: LD_VAR 0 3
12387: IFFALSE 12433
// for i in tmp do
12389: LD_ADDR_VAR 0 1
12393: PUSH
12394: LD_VAR 0 3
12398: PUSH
12399: FOR_IN
12400: IFFALSE 12431
// begin ComMoveXY ( i , 90 , 94 ) ;
12402: LD_VAR 0 1
12406: PPUSH
12407: LD_INT 90
12409: PPUSH
12410: LD_INT 94
12412: PPUSH
12413: CALL_OW 111
// SetTag ( i , 0 ) ;
12417: LD_VAR 0 1
12421: PPUSH
12422: LD_INT 0
12424: PPUSH
12425: CALL_OW 109
// end ;
12429: GO 12399
12431: POP
12432: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12433: LD_VAR 0 8
12437: PUSH
12438: LD_VAR 0 5
12442: PPUSH
12443: LD_INT 120
12445: PUSH
12446: LD_INT 2
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 72
12457: AND
12458: IFFALSE 12471
// ComExitAll ( sci ) else
12460: LD_VAR 0 8
12464: PPUSH
12465: CALL 80058 0 1
12469: GO 12544
// if sci then
12471: LD_VAR 0 8
12475: IFFALSE 12544
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12477: LD_VAR 0 8
12481: PPUSH
12482: LD_INT 3
12484: PUSH
12485: LD_INT 54
12487: PUSH
12488: EMPTY
12489: LIST
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PPUSH
12495: CALL_OW 72
12499: PUSH
12500: LD_VAR 0 9
12504: PPUSH
12505: CALL_OW 302
12509: AND
12510: IFFALSE 12544
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12512: LD_VAR 0 8
12516: PPUSH
12517: LD_INT 3
12519: PUSH
12520: LD_INT 54
12522: PUSH
12523: EMPTY
12524: LIST
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PPUSH
12530: CALL_OW 72
12534: PPUSH
12535: LD_VAR 0 9
12539: PPUSH
12540: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12544: LD_VAR 0 6
12548: PPUSH
12549: LD_INT 50
12551: PUSH
12552: EMPTY
12553: LIST
12554: PPUSH
12555: CALL_OW 72
12559: PUSH
12560: LD_VAR 0 4
12564: AND
12565: IFFALSE 12596
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12567: LD_VAR 0 6
12571: PPUSH
12572: LD_INT 50
12574: PUSH
12575: EMPTY
12576: LIST
12577: PPUSH
12578: CALL_OW 72
12582: PPUSH
12583: LD_VAR 0 4
12587: PUSH
12588: LD_INT 1
12590: ARRAY
12591: PPUSH
12592: CALL_OW 130
// if eng then
12596: LD_VAR 0 5
12600: IFFALSE 13097
// begin for i in eng do
12602: LD_ADDR_VAR 0 1
12606: PUSH
12607: LD_VAR 0 5
12611: PUSH
12612: FOR_IN
12613: IFFALSE 13095
// begin tag := GetTag ( i ) ;
12615: LD_ADDR_VAR 0 7
12619: PUSH
12620: LD_VAR 0 1
12624: PPUSH
12625: CALL_OW 110
12629: ST_TO_ADDR
// case tag of 0 :
12630: LD_VAR 0 7
12634: PUSH
12635: LD_INT 0
12637: DOUBLE
12638: EQUAL
12639: IFTRUE 12643
12641: GO 12854
12643: POP
// begin if b then
12644: LD_VAR 0 4
12648: IFFALSE 12664
// begin SetTag ( i , 1 ) ;
12650: LD_VAR 0 1
12654: PPUSH
12655: LD_INT 1
12657: PPUSH
12658: CALL_OW 109
// continue ;
12662: GO 12612
// end ; if not ruBuildList then
12664: LD_EXP 35
12668: NOT
12669: IFFALSE 12685
// ComEnterUnit ( i , ruDep ) else
12671: LD_VAR 0 1
12675: PPUSH
12676: LD_INT 28
12678: PPUSH
12679: CALL_OW 120
12683: GO 12852
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12685: LD_INT 11
12687: PPUSH
12688: LD_INT 81
12690: PUSH
12691: LD_INT 3
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PPUSH
12698: CALL_OW 70
12702: PUSH
12703: LD_INT 0
12705: EQUAL
12706: PUSH
12707: LD_INT 28
12709: PPUSH
12710: LD_EXP 35
12714: PUSH
12715: LD_INT 1
12717: ARRAY
12718: PUSH
12719: LD_INT 1
12721: ARRAY
12722: PPUSH
12723: LD_EXP 35
12727: PUSH
12728: LD_INT 1
12730: ARRAY
12731: PUSH
12732: LD_INT 2
12734: ARRAY
12735: PPUSH
12736: LD_EXP 35
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PUSH
12745: LD_INT 3
12747: ARRAY
12748: PPUSH
12749: LD_EXP 35
12753: PUSH
12754: LD_INT 1
12756: ARRAY
12757: PUSH
12758: LD_INT 4
12760: ARRAY
12761: PPUSH
12762: CALL 55302 0 5
12766: AND
12767: IFFALSE 12852
// begin if IsInUnit ( i ) then
12769: LD_VAR 0 1
12773: PPUSH
12774: CALL_OW 310
12778: IFFALSE 12791
// ComExitBuilding ( i ) else
12780: LD_VAR 0 1
12784: PPUSH
12785: CALL_OW 122
12789: GO 12852
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12791: LD_VAR 0 1
12795: PPUSH
12796: LD_EXP 35
12800: PUSH
12801: LD_INT 1
12803: ARRAY
12804: PUSH
12805: LD_INT 1
12807: ARRAY
12808: PPUSH
12809: LD_EXP 35
12813: PUSH
12814: LD_INT 1
12816: ARRAY
12817: PUSH
12818: LD_INT 2
12820: ARRAY
12821: PPUSH
12822: LD_EXP 35
12826: PUSH
12827: LD_INT 1
12829: ARRAY
12830: PUSH
12831: LD_INT 3
12833: ARRAY
12834: PPUSH
12835: LD_EXP 35
12839: PUSH
12840: LD_INT 1
12842: ARRAY
12843: PUSH
12844: LD_INT 4
12846: ARRAY
12847: PPUSH
12848: CALL_OW 145
// end ; end ; 1 :
12852: GO 13051
12854: LD_INT 1
12856: DOUBLE
12857: EQUAL
12858: IFTRUE 12862
12860: GO 12965
12862: POP
// begin if not b then
12863: LD_VAR 0 4
12867: NOT
12868: IFFALSE 12884
// begin SetTag ( i , 0 ) ;
12870: LD_VAR 0 1
12874: PPUSH
12875: LD_INT 0
12877: PPUSH
12878: CALL_OW 109
// continue ;
12882: GO 12612
// end ; if IsInUnit ( i ) then
12884: LD_VAR 0 1
12888: PPUSH
12889: CALL_OW 310
12893: IFFALSE 12904
// ComExitBuilding ( i ) ;
12895: LD_VAR 0 1
12899: PPUSH
12900: CALL_OW 122
// if GetLives ( i ) < 650 then
12904: LD_VAR 0 1
12908: PPUSH
12909: CALL_OW 256
12913: PUSH
12914: LD_INT 650
12916: LESS
12917: IFFALSE 12933
// begin SetTag ( i , 2 ) ;
12919: LD_VAR 0 1
12923: PPUSH
12924: LD_INT 2
12926: PPUSH
12927: CALL_OW 109
// continue ;
12931: GO 12612
// end ; if b then
12933: LD_VAR 0 4
12937: IFFALSE 12963
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12939: LD_VAR 0 1
12943: PPUSH
12944: LD_VAR 0 4
12948: PPUSH
12949: LD_VAR 0 1
12953: PPUSH
12954: CALL_OW 74
12958: PPUSH
12959: CALL_OW 130
// end ; 2 :
12963: GO 13051
12965: LD_INT 2
12967: DOUBLE
12968: EQUAL
12969: IFTRUE 12973
12971: GO 13050
12973: POP
// begin if GetLives ( i ) = 1000 then
12974: LD_VAR 0 1
12978: PPUSH
12979: CALL_OW 256
12983: PUSH
12984: LD_INT 1000
12986: EQUAL
12987: IFFALSE 13003
// begin SetTag ( i , 1 ) ;
12989: LD_VAR 0 1
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 109
// continue ;
13001: GO 12612
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
13003: LD_VAR 0 1
13007: PPUSH
13008: LD_INT 84
13010: PPUSH
13011: LD_INT 93
13013: PPUSH
13014: CALL_OW 297
13018: PUSH
13019: LD_INT 6
13021: GREATER
13022: IFFALSE 13048
// begin ComMoveXY ( i , 84 , 93 ) ;
13024: LD_VAR 0 1
13028: PPUSH
13029: LD_INT 84
13031: PPUSH
13032: LD_INT 93
13034: PPUSH
13035: CALL_OW 111
// AddComHold ( i ) ;
13039: LD_VAR 0 1
13043: PPUSH
13044: CALL_OW 200
// end ; end ; end ;
13048: GO 13051
13050: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
13051: LD_VAR 0 1
13055: PPUSH
13056: LD_INT 12
13058: PPUSH
13059: CALL_OW 308
13063: NOT
13064: PUSH
13065: LD_VAR 0 1
13069: PPUSH
13070: CALL_OW 310
13074: NOT
13075: AND
13076: IFFALSE 13093
// ComMoveXY ( i , 91 , 95 ) ;
13078: LD_VAR 0 1
13082: PPUSH
13083: LD_INT 91
13085: PPUSH
13086: LD_INT 95
13088: PPUSH
13089: CALL_OW 111
// end ;
13093: GO 12612
13095: POP
13096: POP
// end ; end ;
13097: PPOPN 13
13099: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
13100: LD_INT 0
13102: PPUSH
13103: PPUSH
13104: PPUSH
13105: PPUSH
13106: PPUSH
13107: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
13108: LD_ADDR_VAR 0 3
13112: PUSH
13113: DOUBLE
13114: LD_INT 1
13116: DEC
13117: ST_TO_ADDR
13118: LD_INT 3
13120: PUSH
13121: LD_INT 4
13123: PUSH
13124: LD_INT 5
13126: PUSH
13127: LD_INT 6
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: PUSH
13136: LD_OWVAR 67
13140: ARRAY
13141: PUSH
13142: LD_VAR 0 1
13146: PLUS
13147: PUSH
13148: FOR_TO
13149: IFFALSE 13466
// begin uc_side := 6 ;
13151: LD_ADDR_OWVAR 20
13155: PUSH
13156: LD_INT 6
13158: ST_TO_ADDR
// uc_nation := 3 ;
13159: LD_ADDR_OWVAR 21
13163: PUSH
13164: LD_INT 3
13166: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13167: LD_ADDR_VAR 0 6
13171: PUSH
13172: LD_INT 21
13174: PUSH
13175: LD_INT 22
13177: PUSH
13178: LD_INT 23
13180: PUSH
13181: LD_INT 24
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: PUSH
13190: LD_INT 1
13192: PPUSH
13193: LD_INT 4
13195: PPUSH
13196: CALL_OW 12
13200: ARRAY
13201: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13202: LD_ADDR_VAR 0 7
13206: PUSH
13207: LD_INT 42
13209: PUSH
13210: LD_INT 44
13212: PUSH
13213: LD_INT 43
13215: PUSH
13216: LD_INT 46
13218: PUSH
13219: LD_INT 45
13221: PUSH
13222: LD_INT 46
13224: PUSH
13225: LD_INT 45
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: PUSH
13237: LD_OWVAR 67
13241: PUSH
13242: LD_INT 0
13244: PPUSH
13245: LD_INT 3
13247: PPUSH
13248: CALL_OW 12
13252: PLUS
13253: ARRAY
13254: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13255: LD_VAR 0 6
13259: PUSH
13260: LD_INT 21
13262: PUSH
13263: LD_INT 22
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: IN
13270: PUSH
13271: LD_VAR 0 7
13275: PUSH
13276: LD_INT 46
13278: EQUAL
13279: AND
13280: IFFALSE 13309
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13282: LD_ADDR_VAR 0 7
13286: PUSH
13287: LD_INT 44
13289: PUSH
13290: LD_INT 45
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 1
13299: PPUSH
13300: LD_INT 2
13302: PPUSH
13303: CALL_OW 12
13307: ARRAY
13308: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13309: LD_OWVAR 1
13313: PUSH
13314: LD_INT 31500
13316: PUSH
13317: LD_INT 27300
13319: PUSH
13320: LD_INT 23100
13322: PUSH
13323: LD_INT 18900
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: PUSH
13332: LD_OWVAR 67
13336: ARRAY
13337: LESS
13338: IFFALSE 13371
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13340: LD_ADDR_VAR 0 7
13344: PUSH
13345: LD_INT 44
13347: PUSH
13348: LD_INT 43
13350: PUSH
13351: LD_INT 42
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 1
13361: PPUSH
13362: LD_INT 3
13364: PPUSH
13365: CALL_OW 12
13369: ARRAY
13370: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13371: LD_VAR 0 6
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: LD_INT 3
13381: PPUSH
13382: LD_VAR 0 7
13386: PPUSH
13387: LD_INT 90
13389: PPUSH
13390: CALL 46706 0 5
// un := CreateVehicle ;
13394: LD_ADDR_VAR 0 4
13398: PUSH
13399: CALL_OW 45
13403: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13404: LD_VAR 0 4
13408: PPUSH
13409: LD_INT 140
13411: PPUSH
13412: LD_INT 146
13414: PPUSH
13415: LD_INT 0
13417: PPUSH
13418: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13422: LD_VAR 0 4
13426: PPUSH
13427: LD_INT 131
13429: PPUSH
13430: LD_INT 128
13432: PPUSH
13433: CALL_OW 111
// wait ( 0 0$3 ) ;
13437: LD_INT 105
13439: PPUSH
13440: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13444: LD_ADDR_VAR 0 5
13448: PUSH
13449: LD_VAR 0 5
13453: PPUSH
13454: LD_VAR 0 4
13458: PPUSH
13459: CALL 79577 0 2
13463: ST_TO_ADDR
// end ;
13464: GO 13148
13466: POP
13467: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13468: LD_ADDR_EXP 36
13472: PUSH
13473: LD_EXP 36
13477: PPUSH
13478: LD_VAR 0 5
13482: PPUSH
13483: CALL 79614 0 2
13487: ST_TO_ADDR
// end ;
13488: LD_VAR 0 2
13492: RET
// every 0 0$3 trigger russianAttackers do
13493: LD_EXP 36
13497: IFFALSE 13580
13499: GO 13501
13501: DISABLE
// begin enable ;
13502: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13503: LD_EXP 36
13507: PPUSH
13508: LD_INT 126
13510: PUSH
13511: LD_INT 108
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 107
13520: PUSH
13521: LD_INT 85
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 82
13530: PUSH
13531: LD_INT 62
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 73
13540: PUSH
13541: LD_INT 46
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 62
13550: PUSH
13551: LD_INT 31
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 52
13560: PUSH
13561: LD_INT 17
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: PPUSH
13576: CALL 82187 0 2
// end ;
13580: END
// every 20 20$0 trigger Difficulty > 2 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
13581: LD_OWVAR 67
13585: PUSH
13586: LD_INT 2
13588: GREATER
13589: PUSH
13590: LD_INT 22
13592: PUSH
13593: LD_INT 6
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 21
13602: PUSH
13603: LD_INT 2
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 50
13612: PUSH
13613: EMPTY
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: PUSH
13626: LD_INT 0
13628: EQUAL
13629: AND
13630: IFFALSE 13684
13632: GO 13634
13634: DISABLE
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
13635: LD_INT 51
13637: PPUSH
13638: LD_INT 6
13640: PPUSH
13641: LD_INT 2
13643: PPUSH
13644: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
13648: LD_INT 57
13650: PPUSH
13651: LD_INT 6
13653: PPUSH
13654: LD_INT 2
13656: PPUSH
13657: CALL_OW 322
// if Difficulty > 3 then
13661: LD_OWVAR 67
13665: PUSH
13666: LD_INT 3
13668: GREATER
13669: IFFALSE 13684
// SetTech ( tech_weap2 , 6 , state_researched ) ;
13671: LD_INT 52
13673: PPUSH
13674: LD_INT 6
13676: PPUSH
13677: LD_INT 2
13679: PPUSH
13680: CALL_OW 322
// end ; end_of_file
13684: END
// on SailEvent ( event ) do begin if event = 1 then
13685: LD_VAR 0 1
13689: PUSH
13690: LD_INT 1
13692: EQUAL
13693: IFFALSE 13723
// PrepareRussianAttack ( [ 2 , 4 , 6 , 8 ] [ Difficulty ] ) ;
13695: LD_INT 2
13697: PUSH
13698: LD_INT 4
13700: PUSH
13701: LD_INT 6
13703: PUSH
13704: LD_INT 8
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: PUSH
13713: LD_OWVAR 67
13717: ARRAY
13718: PPUSH
13719: CALL 13100 0 1
// end ;
13723: PPOPN 1
13725: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13726: LD_VAR 0 1
13730: PUSH
13731: LD_EXP 28
13735: EQUAL
13736: PUSH
13737: LD_VAR 0 2
13741: PUSH
13742: LD_INT 1
13744: EQUAL
13745: AND
13746: IFFALSE 13752
// SikorskiKilledInAction ;
13748: CALL 18869 0 0
// end ;
13752: PPOPN 3
13754: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13755: LD_INT 0
13757: PPUSH
13758: PPUSH
13759: PPUSH
13760: PPUSH
13761: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13762: LD_VAR 0 1
13766: PPUSH
13767: CALL 36418 0 1
// if un = JMM then
13771: LD_VAR 0 1
13775: PUSH
13776: LD_EXP 14
13780: EQUAL
13781: IFFALSE 13790
// YouLost ( JMM ) ;
13783: LD_STRING JMM
13785: PPUSH
13786: CALL_OW 104
// if un = Sikorski then
13790: LD_VAR 0 1
13794: PUSH
13795: LD_EXP 28
13799: EQUAL
13800: IFFALSE 13826
// if sikorskiStatus = 0 then
13802: LD_EXP 9
13806: PUSH
13807: LD_INT 0
13809: EQUAL
13810: IFFALSE 13818
// SikorskiKilledInAction else
13812: CALL 18869 0 0
13816: GO 13826
// sikorskiIsKilled := true ;
13818: LD_ADDR_EXP 10
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13826: LD_VAR 0 1
13830: PPUSH
13831: CALL_OW 255
13835: PUSH
13836: LD_INT 1
13838: EQUAL
13839: PUSH
13840: LD_VAR 0 1
13844: PPUSH
13845: CALL_OW 248
13849: PUSH
13850: LD_INT 1
13852: EQUAL
13853: AND
13854: PUSH
13855: LD_VAR 0 1
13859: PPUSH
13860: CALL_OW 266
13864: PUSH
13865: LD_INT 0
13867: PUSH
13868: LD_INT 1
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: IN
13875: AND
13876: IFFALSE 13885
// YouLost ( Destroyed ) ;
13878: LD_STRING Destroyed
13880: PPUSH
13881: CALL_OW 104
// if un = ruDep then
13885: LD_VAR 0 1
13889: PUSH
13890: LD_INT 28
13892: EQUAL
13893: IFFALSE 14027
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13895: LD_ADDR_VAR 0 2
13899: PUSH
13900: LD_INT 22
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 25
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PPUSH
13924: CALL_OW 69
13928: PUSH
13929: FOR_IN
13930: IFFALSE 14025
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13932: LD_ADDR_VAR 0 3
13936: PUSH
13937: LD_INT 11
13939: PPUSH
13940: LD_INT 81
13942: PUSH
13943: LD_INT 3
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PPUSH
13950: CALL_OW 70
13954: PPUSH
13955: LD_VAR 0 2
13959: PPUSH
13960: CALL_OW 74
13964: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13965: LD_VAR 0 2
13969: PPUSH
13970: CALL_OW 310
13974: PPUSH
13975: CALL_OW 266
13979: PUSH
13980: LD_INT 32
13982: EQUAL
13983: IFFALSE 14023
// begin ComExitBuilding ( i ) ;
13985: LD_VAR 0 2
13989: PPUSH
13990: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13994: LD_VAR 0 2
13998: PPUSH
13999: LD_VAR 0 3
14003: PPUSH
14004: CALL_OW 250
14008: PPUSH
14009: LD_VAR 0 3
14013: PPUSH
14014: CALL_OW 251
14018: PPUSH
14019: CALL_OW 174
// end ; end ;
14023: GO 13929
14025: POP
14026: POP
// end ; if un in ruMobile then
14027: LD_VAR 0 1
14031: PUSH
14032: LD_EXP 34
14036: IN
14037: IFFALSE 14055
// ruMobile := ruMobile diff un ;
14039: LD_ADDR_EXP 34
14043: PUSH
14044: LD_EXP 34
14048: PUSH
14049: LD_VAR 0 1
14053: DIFF
14054: ST_TO_ADDR
// if GetSide ( un ) = 3 then
14055: LD_VAR 0 1
14059: PPUSH
14060: CALL_OW 255
14064: PUSH
14065: LD_INT 3
14067: EQUAL
14068: IFFALSE 14703
// begin if GetType ( un ) = unit_building then
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 247
14079: PUSH
14080: LD_INT 3
14082: EQUAL
14083: IFFALSE 14219
// begin btype := GetBType ( un ) ;
14085: LD_ADDR_VAR 0 6
14089: PUSH
14090: LD_VAR 0 1
14094: PPUSH
14095: CALL_OW 266
14099: ST_TO_ADDR
// if btype = b_warehouse then
14100: LD_VAR 0 6
14104: PUSH
14105: LD_INT 1
14107: EQUAL
14108: IFFALSE 14118
// btype := b_depot ;
14110: LD_ADDR_VAR 0 6
14114: PUSH
14115: LD_INT 0
14117: ST_TO_ADDR
// if btype = b_barracks then
14118: LD_VAR 0 6
14122: PUSH
14123: LD_INT 5
14125: EQUAL
14126: IFFALSE 14136
// btype := b_armoury ;
14128: LD_ADDR_VAR 0 6
14132: PUSH
14133: LD_INT 4
14135: ST_TO_ADDR
// if btype = b_lab_full then
14136: LD_VAR 0 6
14140: PUSH
14141: LD_INT 8
14143: EQUAL
14144: IFFALSE 14154
// btype := b_lab ;
14146: LD_ADDR_VAR 0 6
14150: PUSH
14151: LD_INT 6
14153: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
14154: LD_ADDR_EXP 35
14158: PUSH
14159: LD_EXP 35
14163: PPUSH
14164: LD_EXP 35
14168: PUSH
14169: LD_INT 1
14171: PLUS
14172: PPUSH
14173: LD_VAR 0 6
14177: PUSH
14178: LD_VAR 0 1
14182: PPUSH
14183: CALL_OW 250
14187: PUSH
14188: LD_VAR 0 1
14192: PPUSH
14193: CALL_OW 251
14197: PUSH
14198: LD_VAR 0 1
14202: PPUSH
14203: CALL_OW 254
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: PPUSH
14214: CALL_OW 1
14218: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
14219: LD_VAR 0 1
14223: PPUSH
14224: CALL_OW 247
14228: PUSH
14229: LD_INT 2
14231: EQUAL
14232: IFFALSE 14507
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14234: LD_VAR 0 1
14238: PPUSH
14239: CALL_OW 264
14243: PUSH
14244: LD_INT 52
14246: PUSH
14247: LD_INT 51
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: IN
14254: IFFALSE 14284
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14256: LD_INT 29
14258: PPUSH
14259: LD_INT 22
14261: PPUSH
14262: LD_INT 1
14264: PPUSH
14265: LD_INT 3
14267: PPUSH
14268: LD_VAR 0 1
14272: PPUSH
14273: CALL_OW 264
14277: PPUSH
14278: CALL_OW 185
// end else
14282: GO 14507
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14284: LD_ADDR_VAR 0 4
14288: PUSH
14289: LD_INT 21
14291: PUSH
14292: LD_INT 22
14294: PUSH
14295: LD_INT 23
14297: PUSH
14298: LD_INT 24
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 1
14309: PPUSH
14310: LD_INT 4
14312: PPUSH
14313: CALL_OW 12
14317: ARRAY
14318: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14319: LD_ADDR_VAR 0 5
14323: PUSH
14324: LD_INT 42
14326: PUSH
14327: LD_INT 44
14329: PUSH
14330: LD_INT 43
14332: PUSH
14333: LD_INT 46
14335: PUSH
14336: LD_INT 45
14338: PUSH
14339: LD_INT 46
14341: PUSH
14342: LD_INT 45
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: PUSH
14354: LD_OWVAR 67
14358: PUSH
14359: LD_INT 0
14361: PPUSH
14362: LD_INT 3
14364: PPUSH
14365: CALL_OW 12
14369: PLUS
14370: ARRAY
14371: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14372: LD_VAR 0 4
14376: PUSH
14377: LD_INT 21
14379: PUSH
14380: LD_INT 22
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: IN
14387: PUSH
14388: LD_VAR 0 5
14392: PUSH
14393: LD_INT 46
14395: EQUAL
14396: AND
14397: IFFALSE 14426
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
14399: LD_ADDR_VAR 0 5
14403: PUSH
14404: LD_INT 44
14406: PUSH
14407: LD_INT 45
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PUSH
14414: LD_INT 1
14416: PPUSH
14417: LD_INT 2
14419: PPUSH
14420: CALL_OW 12
14424: ARRAY
14425: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14426: LD_OWVAR 1
14430: PUSH
14431: LD_INT 31500
14433: PUSH
14434: LD_INT 27300
14436: PUSH
14437: LD_INT 23100
14439: PUSH
14440: LD_INT 21000
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: PUSH
14449: LD_OWVAR 67
14453: ARRAY
14454: LESS
14455: IFFALSE 14484
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14457: LD_ADDR_VAR 0 5
14461: PUSH
14462: LD_INT 44
14464: PUSH
14465: LD_INT 43
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 1
14474: PPUSH
14475: LD_INT 2
14477: PPUSH
14478: CALL_OW 12
14482: ARRAY
14483: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14484: LD_INT 29
14486: PPUSH
14487: LD_VAR 0 4
14491: PPUSH
14492: LD_INT 1
14494: PPUSH
14495: LD_INT 1
14497: PPUSH
14498: LD_VAR 0 5
14502: PPUSH
14503: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14507: LD_VAR 0 1
14511: PPUSH
14512: CALL_OW 257
14516: PUSH
14517: LD_INT 3
14519: EQUAL
14520: IFFALSE 14703
// begin killMechCounter := Inc ( killMechCounter ) ;
14522: LD_ADDR_EXP 12
14526: PUSH
14527: LD_EXP 12
14531: PPUSH
14532: CALL 80938 0 1
14536: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14537: LD_EXP 33
14541: PUSH
14542: LD_INT 0
14544: EQUAL
14545: PUSH
14546: LD_INT 29
14548: PPUSH
14549: CALL_OW 302
14553: NOT
14554: OR
14555: IFFALSE 14559
// exit ;
14557: GO 14703
// ruMechCounter := Dec ( ruMechCounter ) ;
14559: LD_ADDR_EXP 33
14563: PUSH
14564: LD_EXP 33
14568: PPUSH
14569: CALL 80960 0 1
14573: ST_TO_ADDR
// uc_side := 3 ;
14574: LD_ADDR_OWVAR 20
14578: PUSH
14579: LD_INT 3
14581: ST_TO_ADDR
// uc_nation := 3 ;
14582: LD_ADDR_OWVAR 21
14586: PUSH
14587: LD_INT 3
14589: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14590: LD_INT 0
14592: PPUSH
14593: LD_INT 5
14595: PUSH
14596: LD_INT 6
14598: PUSH
14599: LD_INT 7
14601: PUSH
14602: LD_INT 8
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: PUSH
14611: LD_OWVAR 67
14615: ARRAY
14616: PPUSH
14617: CALL_OW 383
// tmp := CreateHuman ;
14621: LD_ADDR_VAR 0 3
14625: PUSH
14626: CALL_OW 44
14630: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14631: LD_VAR 0 3
14635: PPUSH
14636: LD_INT 145
14638: PPUSH
14639: LD_INT 133
14641: PPUSH
14642: LD_INT 0
14644: PPUSH
14645: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14649: LD_VAR 0 3
14653: PPUSH
14654: LD_INT 29
14656: PPUSH
14657: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14661: LD_INT 35
14663: PPUSH
14664: CALL_OW 67
// if not HasTask ( tmp ) then
14668: LD_VAR 0 3
14672: PPUSH
14673: CALL_OW 314
14677: NOT
14678: IFFALSE 14692
// ComEnterUnit ( tmp , ruFac ) ;
14680: LD_VAR 0 3
14684: PPUSH
14685: LD_INT 29
14687: PPUSH
14688: CALL_OW 120
// until IsInUnit ( tmp ) ;
14692: LD_VAR 0 3
14696: PPUSH
14697: CALL_OW 310
14701: IFFALSE 14661
// end ; end ; end ;
14703: PPOPN 6
14705: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14706: LD_VAR 0 1
14710: PPUSH
14711: CALL_OW 255
14715: PUSH
14716: LD_INT 4
14718: EQUAL
14719: IFFALSE 14736
// ComMoveXY ( driver , 40 , 47 ) ;
14721: LD_VAR 0 1
14725: PPUSH
14726: LD_INT 40
14728: PPUSH
14729: LD_INT 47
14731: PPUSH
14732: CALL_OW 111
// if GetSide ( driver ) = 3 then
14736: LD_VAR 0 1
14740: PPUSH
14741: CALL_OW 255
14745: PUSH
14746: LD_INT 3
14748: EQUAL
14749: IFFALSE 14963
// begin ComMoveXY ( driver , 90 , 97 ) ;
14751: LD_VAR 0 1
14755: PPUSH
14756: LD_INT 90
14758: PPUSH
14759: LD_INT 97
14761: PPUSH
14762: CALL_OW 111
// if IsOk ( ruFac ) then
14766: LD_INT 29
14768: PPUSH
14769: CALL_OW 302
14773: IFFALSE 14887
// begin repeat wait ( 0 0$1 ) ;
14775: LD_INT 35
14777: PPUSH
14778: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14782: LD_INT 29
14784: PPUSH
14785: CALL_OW 313
14789: PUSH
14790: LD_INT 6
14792: LESS
14793: PUSH
14794: LD_VAR 0 1
14798: PPUSH
14799: CALL_OW 301
14803: OR
14804: IFFALSE 14775
// if IsDead ( driver ) then
14806: LD_VAR 0 1
14810: PPUSH
14811: CALL_OW 301
14815: IFFALSE 14819
// exit ;
14817: GO 14963
// repeat wait ( 0 0$10 ) ;
14819: LD_INT 350
14821: PPUSH
14822: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 314
14835: NOT
14836: PUSH
14837: LD_INT 29
14839: PPUSH
14840: CALL_OW 313
14844: PUSH
14845: LD_INT 6
14847: LESS
14848: AND
14849: IFFALSE 14863
// ComEnterUnit ( driver , ruFac ) ;
14851: LD_VAR 0 1
14855: PPUSH
14856: LD_INT 29
14858: PPUSH
14859: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14863: LD_VAR 0 1
14867: PPUSH
14868: CALL_OW 301
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 310
14882: OR
14883: IFFALSE 14819
// end else
14885: GO 14963
// begin ComMoveXY ( driver , 142 , 148 ) ;
14887: LD_VAR 0 1
14891: PPUSH
14892: LD_INT 142
14894: PPUSH
14895: LD_INT 148
14897: PPUSH
14898: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14902: LD_INT 35
14904: PPUSH
14905: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 301
14918: PUSH
14919: LD_VAR 0 1
14923: PPUSH
14924: LD_INT 142
14926: PPUSH
14927: LD_INT 148
14929: PPUSH
14930: CALL_OW 307
14934: OR
14935: IFFALSE 14902
// if IsAt ( driver , 142 , 148 ) then
14937: LD_VAR 0 1
14941: PPUSH
14942: LD_INT 142
14944: PPUSH
14945: LD_INT 148
14947: PPUSH
14948: CALL_OW 307
14952: IFFALSE 14963
// RemoveUnit ( driver ) ;
14954: LD_VAR 0 1
14958: PPUSH
14959: CALL_OW 64
// end ; end ; end ;
14963: PPOPN 4
14965: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14966: LD_VAR 0 2
14970: PPUSH
14971: CALL_OW 257
14975: PUSH
14976: LD_INT 3
14978: EQUAL
14979: PUSH
14980: LD_VAR 0 1
14984: PPUSH
14985: CALL_OW 255
14989: PUSH
14990: LD_INT 3
14992: EQUAL
14993: AND
14994: PUSH
14995: LD_VAR 0 1
14999: PUSH
15000: LD_INT 29
15002: EQUAL
15003: AND
15004: IFFALSE 15018
// SetLives ( un , 1000 ) ;
15006: LD_VAR 0 2
15010: PPUSH
15011: LD_INT 1000
15013: PPUSH
15014: CALL_OW 234
// if GetTag ( b ) = 701 then
15018: LD_VAR 0 1
15022: PPUSH
15023: CALL_OW 110
15027: PUSH
15028: LD_INT 701
15030: EQUAL
15031: IFFALSE 15057
// begin SetTag ( b , 0 ) ;
15033: LD_VAR 0 1
15037: PPUSH
15038: LD_INT 0
15040: PPUSH
15041: CALL_OW 109
// SetTag ( un , 0 ) ;
15045: LD_VAR 0 2
15049: PPUSH
15050: LD_INT 0
15052: PPUSH
15053: CALL_OW 109
// end ; end ;
15057: PPOPN 2
15059: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
15060: LD_VAR 0 1
15064: PPUSH
15065: CALL_OW 255
15069: PUSH
15070: LD_INT 3
15072: PUSH
15073: LD_INT 6
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: IN
15080: PUSH
15081: LD_VAR 0 1
15085: PPUSH
15086: CALL_OW 263
15090: PUSH
15091: LD_INT 3
15093: EQUAL
15094: AND
15095: PUSH
15096: LD_EXP 7
15100: NOT
15101: AND
15102: IFFALSE 15121
// begin seenComputer := true ;
15104: LD_ADDR_EXP 7
15108: PUSH
15109: LD_INT 1
15111: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
15112: LD_VAR 0 1
15116: PPUSH
15117: CALL 18060 0 1
// end ; end ;
15121: PPOPN 1
15123: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15124: LD_INT 0
15126: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15127: LD_VAR 0 1
15131: PPUSH
15132: LD_VAR 0 2
15136: PPUSH
15137: CALL 36476 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
15141: LD_VAR 0 1
15145: PPUSH
15146: CALL_OW 255
15150: PUSH
15151: LD_INT 3
15153: EQUAL
15154: PUSH
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 263
15164: PUSH
15165: LD_INT 1
15167: EQUAL
15168: AND
15169: PUSH
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 264
15179: PUSH
15180: LD_INT 42
15182: PUSH
15183: LD_INT 43
15185: PUSH
15186: LD_INT 44
15188: PUSH
15189: LD_INT 46
15191: PUSH
15192: LD_INT 45
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: IN
15202: AND
15203: IFFALSE 15233
// begin SetTag ( vehicle , 300 ) ;
15205: LD_VAR 0 1
15209: PPUSH
15210: LD_INT 300
15212: PPUSH
15213: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
15217: LD_ADDR_EXP 34
15221: PUSH
15222: LD_EXP 34
15226: PUSH
15227: LD_VAR 0 1
15231: UNION
15232: ST_TO_ADDR
// end ; end ;
15233: PPOPN 3
15235: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15236: LD_INT 0
15238: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15239: LD_VAR 0 2
15243: PPUSH
15244: LD_VAR 0 3
15248: PPUSH
15249: LD_INT 13
15251: PPUSH
15252: CALL_OW 309
15256: IFFALSE 15387
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15258: LD_ADDR_VAR 0 6
15262: PUSH
15263: LD_INT 22
15265: PUSH
15266: LD_INT 3
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 50
15275: PUSH
15276: EMPTY
15277: LIST
15278: PUSH
15279: LD_INT 34
15281: PUSH
15282: LD_INT 51
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: LIST
15293: PPUSH
15294: CALL_OW 69
15298: ST_TO_ADDR
// if not cargo then
15299: LD_VAR 0 6
15303: NOT
15304: IFFALSE 15308
// exit ;
15306: GO 15387
// wait ( 0 0$5 ) ;
15308: LD_INT 175
15310: PPUSH
15311: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15315: LD_VAR 0 6
15319: PUSH
15320: LD_INT 1
15322: ARRAY
15323: PPUSH
15324: LD_INT 28
15326: PPUSH
15327: CALL_OW 296
15331: PUSH
15332: LD_INT 6
15334: LESS
15335: PUSH
15336: LD_VAR 0 6
15340: PUSH
15341: LD_INT 1
15343: ARRAY
15344: PPUSH
15345: CALL_OW 261
15349: PUSH
15350: LD_INT 50
15352: LESS
15353: AND
15354: IFFALSE 15368
// ComMoveUnit ( cargo , ruDep ) ;
15356: LD_VAR 0 6
15360: PPUSH
15361: LD_INT 28
15363: PPUSH
15364: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15368: LD_VAR 0 6
15372: PPUSH
15373: LD_VAR 0 2
15377: PPUSH
15378: LD_VAR 0 3
15382: PPUSH
15383: CALL_OW 177
// end ; end ;
15387: PPOPN 6
15389: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15390: LD_VAR 0 1
15394: PPUSH
15395: CALL_OW 264
15399: PUSH
15400: LD_INT 45
15402: EQUAL
15403: IFFALSE 15420
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15405: LD_ADDR_EXP 11
15409: PUSH
15410: LD_EXP 11
15414: PPUSH
15415: CALL 80938 0 1
15419: ST_TO_ADDR
// end ;
15420: PPOPN 4
15422: END
// on BuildingComplete ( b ) do var i , tmp ;
15423: LD_INT 0
15425: PPUSH
15426: PPUSH
// begin if GetSide ( b ) = 3 then
15427: LD_VAR 0 1
15431: PPUSH
15432: CALL_OW 255
15436: PUSH
15437: LD_INT 3
15439: EQUAL
15440: IFFALSE 15537
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15442: LD_ADDR_EXP 35
15446: PUSH
15447: LD_EXP 35
15451: PPUSH
15452: LD_INT 1
15454: PPUSH
15455: CALL_OW 3
15459: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15460: LD_VAR 0 1
15464: PPUSH
15465: CALL_OW 266
15469: PUSH
15470: LD_INT 4
15472: EQUAL
15473: IFFALSE 15484
// ComUpgrade ( b ) ;
15475: LD_VAR 0 1
15479: PPUSH
15480: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15484: LD_VAR 0 1
15488: PPUSH
15489: CALL_OW 266
15493: PUSH
15494: LD_INT 32
15496: PUSH
15497: LD_INT 33
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: IN
15504: IFFALSE 15537
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15506: LD_VAR 0 1
15510: PPUSH
15511: LD_INT 46
15513: PUSH
15514: LD_INT 45
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 1
15523: PPUSH
15524: LD_INT 2
15526: PPUSH
15527: CALL_OW 12
15531: ARRAY
15532: PPUSH
15533: CALL_OW 208
// end ; end ; end_of_file
15537: PPOPN 3
15539: END
// export function Action ; var i , tmp , un , inUnit ; begin
15540: LD_INT 0
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
15546: PPUSH
// Video ( true ) ;
15547: LD_INT 1
15549: PPUSH
15550: CALL 79549 0 1
// invincibleMode := true ;
15554: LD_ADDR_EXP 5
15558: PUSH
15559: LD_INT 1
15561: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15562: LD_INT 50
15564: PPUSH
15565: LD_INT 12
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: LD_INT 56
15573: NEG
15574: PPUSH
15575: CALL 79463 0 4
// CenterOnXY ( 50 , 12 ) ;
15579: LD_INT 50
15581: PPUSH
15582: LD_INT 12
15584: PPUSH
15585: CALL_OW 84
// wait ( 0 0$3 ) ;
15589: LD_INT 105
15591: PPUSH
15592: CALL_OW 67
// PrepareStartRussianAttack ;
15596: CALL 10117 0 0
// CenterOnXY ( 66 , 47 ) ;
15600: LD_INT 66
15602: PPUSH
15603: LD_INT 47
15605: PPUSH
15606: CALL_OW 84
// wait ( 0 0$5 ) ;
15610: LD_INT 175
15612: PPUSH
15613: CALL_OW 67
// case gammaCommander of 1 :
15617: LD_EXP 13
15621: PUSH
15622: LD_INT 1
15624: DOUBLE
15625: EQUAL
15626: IFTRUE 15630
15628: GO 15645
15630: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15631: LD_EXP 16
15635: PPUSH
15636: LD_STRING D1-Don-1
15638: PPUSH
15639: CALL_OW 88
15643: GO 15692
15645: LD_INT 2
15647: DOUBLE
15648: EQUAL
15649: IFTRUE 15653
15651: GO 15668
15653: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15654: LD_EXP 15
15658: PPUSH
15659: LD_STRING D1-Brown-1
15661: PPUSH
15662: CALL_OW 88
15666: GO 15692
15668: LD_INT 3
15670: DOUBLE
15671: EQUAL
15672: IFTRUE 15676
15674: GO 15691
15676: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15677: LD_EXP 25
15681: PPUSH
15682: LD_STRING D1-VanH-1
15684: PPUSH
15685: CALL_OW 88
15689: GO 15692
15691: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15692: LD_ADDR_VAR 0 3
15696: PUSH
15697: LD_INT 22
15699: PUSH
15700: LD_INT 1
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 33
15709: PUSH
15710: LD_INT 2
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 61
15719: PUSH
15720: EMPTY
15721: LIST
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: PPUSH
15728: CALL_OW 69
15732: ST_TO_ADDR
// if tmp then
15733: LD_VAR 0 3
15737: IFFALSE 15754
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15739: LD_VAR 0 3
15743: PPUSH
15744: LD_INT 74
15746: PPUSH
15747: LD_INT 44
15749: PPUSH
15750: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15754: LD_ADDR_VAR 0 3
15758: PUSH
15759: LD_INT 22
15761: PUSH
15762: LD_INT 1
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 25
15771: PUSH
15772: LD_INT 1
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PPUSH
15783: CALL_OW 69
15787: PUSH
15788: LD_EXP 16
15792: PUSH
15793: LD_EXP 15
15797: PUSH
15798: LD_EXP 25
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: DIFF
15808: ST_TO_ADDR
// if tmp then
15809: LD_VAR 0 3
15813: IFFALSE 15891
// for i in tmp do
15815: LD_ADDR_VAR 0 2
15819: PUSH
15820: LD_VAR 0 3
15824: PUSH
15825: FOR_IN
15826: IFFALSE 15889
// begin inUnit := IsInUnit ( i ) ;
15828: LD_ADDR_VAR 0 5
15832: PUSH
15833: LD_VAR 0 2
15837: PPUSH
15838: CALL_OW 310
15842: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15843: LD_VAR 0 5
15847: PUSH
15848: LD_VAR 0 5
15852: PPUSH
15853: CALL_OW 266
15857: PUSH
15858: LD_INT 32
15860: PUSH
15861: LD_INT 31
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: IN
15868: AND
15869: IFFALSE 15887
// tmp := tmp diff i ;
15871: LD_ADDR_VAR 0 3
15875: PUSH
15876: LD_VAR 0 3
15880: PUSH
15881: LD_VAR 0 2
15885: DIFF
15886: ST_TO_ADDR
// end ;
15887: GO 15825
15889: POP
15890: POP
// if tmp then
15891: LD_VAR 0 3
15895: IFFALSE 15985
// begin ComExitAll ( tmp ) ;
15897: LD_VAR 0 3
15901: PPUSH
15902: CALL 80058 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15906: LD_VAR 0 3
15910: PPUSH
15911: LD_INT 74
15913: PPUSH
15914: LD_INT 44
15916: PPUSH
15917: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15921: LD_ADDR_VAR 0 3
15925: PUSH
15926: LD_INT 22
15928: PUSH
15929: LD_INT 1
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 25
15938: PUSH
15939: LD_INT 4
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PPUSH
15950: CALL_OW 69
15954: ST_TO_ADDR
// if tmp then
15955: LD_VAR 0 3
15959: IFFALSE 15985
// begin ComExitAll ( tmp ) ;
15961: LD_VAR 0 3
15965: PPUSH
15966: CALL 80058 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15970: LD_VAR 0 3
15974: PPUSH
15975: LD_INT 66
15977: PPUSH
15978: LD_INT 28
15980: PPUSH
15981: CALL_OW 171
// end ; end ; game_speed := 4 ;
15985: LD_ADDR_OWVAR 65
15989: PUSH
15990: LD_INT 4
15992: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15993: LD_INT 70
15995: PPUSH
15996: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
16000: LD_EXP 29
16004: PPUSH
16005: LD_STRING D1-Har-1
16007: PPUSH
16008: CALL_OW 94
// case gammaCommander of 1 :
16012: LD_EXP 13
16016: PUSH
16017: LD_INT 1
16019: DOUBLE
16020: EQUAL
16021: IFTRUE 16025
16023: GO 16040
16025: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
16026: LD_EXP 16
16030: PPUSH
16031: LD_STRING D1-Don-2
16033: PPUSH
16034: CALL_OW 88
16038: GO 16087
16040: LD_INT 2
16042: DOUBLE
16043: EQUAL
16044: IFTRUE 16048
16046: GO 16063
16048: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
16049: LD_EXP 15
16053: PPUSH
16054: LD_STRING D1-Brown-2
16056: PPUSH
16057: CALL_OW 88
16061: GO 16087
16063: LD_INT 3
16065: DOUBLE
16066: EQUAL
16067: IFTRUE 16071
16069: GO 16086
16071: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
16072: LD_EXP 25
16076: PPUSH
16077: LD_STRING D1-VanH-2
16079: PPUSH
16080: CALL_OW 88
16084: GO 16087
16086: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
16087: LD_EXP 29
16091: PPUSH
16092: LD_STRING D1-Har-2
16094: PPUSH
16095: CALL_OW 94
// invincibleMode := false ;
16099: LD_ADDR_EXP 5
16103: PUSH
16104: LD_INT 0
16106: ST_TO_ADDR
// Video ( false ) ;
16107: LD_INT 0
16109: PPUSH
16110: CALL 79549 0 1
// ChangeMissionObjectives ( M1 ) ;
16114: LD_STRING M1
16116: PPUSH
16117: CALL_OW 337
// SaveForQuickRestart ;
16121: CALL_OW 22
// wait ( 2 2$30 ) ;
16125: LD_INT 5250
16127: PPUSH
16128: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
16132: LD_INT 1
16134: PPUSH
16135: CALL 13100 0 1
// wait ( 4 4$30 ) ;
16139: LD_INT 9450
16141: PPUSH
16142: CALL_OW 67
// if Difficulty > 1 then
16146: LD_OWVAR 67
16150: PUSH
16151: LD_INT 1
16153: GREATER
16154: IFFALSE 16163
// PrepareRussianAttack ( 2 ) ;
16156: LD_INT 2
16158: PPUSH
16159: CALL 13100 0 1
// if Difficulty > 2 then
16163: LD_OWVAR 67
16167: PUSH
16168: LD_INT 2
16170: GREATER
16171: IFFALSE 16330
// begin for i := 1 to 4 do
16173: LD_ADDR_VAR 0 2
16177: PUSH
16178: DOUBLE
16179: LD_INT 1
16181: DEC
16182: ST_TO_ADDR
16183: LD_INT 4
16185: PUSH
16186: FOR_TO
16187: IFFALSE 16272
// begin uc_side := 6 ;
16189: LD_ADDR_OWVAR 20
16193: PUSH
16194: LD_INT 6
16196: ST_TO_ADDR
// uc_nation := 3 ;
16197: LD_ADDR_OWVAR 21
16201: PUSH
16202: LD_INT 3
16204: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
16205: LD_INT 0
16207: PPUSH
16208: LD_INT 7
16210: PPUSH
16211: CALL_OW 381
// un := CreateHuman ;
16215: LD_ADDR_VAR 0 4
16219: PUSH
16220: CALL_OW 44
16224: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16225: LD_VAR 0 4
16229: PPUSH
16230: LD_INT 122
16232: PPUSH
16233: LD_INT 89
16235: PPUSH
16236: LD_INT 3
16238: PPUSH
16239: LD_INT 0
16241: PPUSH
16242: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16246: LD_VAR 0 4
16250: PPUSH
16251: LD_INT 88
16253: PPUSH
16254: LD_INT 42
16256: PPUSH
16257: CALL_OW 114
// AddComHold ( un ) ;
16261: LD_VAR 0 4
16265: PPUSH
16266: CALL_OW 200
// end ;
16270: GO 16186
16272: POP
16273: POP
// PrepareScientist ( false , 6 ) ;
16274: LD_INT 0
16276: PPUSH
16277: LD_INT 6
16279: PPUSH
16280: CALL_OW 384
// un := CreateHuman ;
16284: LD_ADDR_VAR 0 4
16288: PUSH
16289: CALL_OW 44
16293: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16294: LD_VAR 0 4
16298: PPUSH
16299: LD_INT 122
16301: PPUSH
16302: LD_INT 89
16304: PPUSH
16305: LD_INT 3
16307: PPUSH
16308: LD_INT 0
16310: PPUSH
16311: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16315: LD_VAR 0 4
16319: PPUSH
16320: LD_INT 91
16322: PPUSH
16323: LD_INT 48
16325: PPUSH
16326: CALL_OW 111
// end ; end ;
16330: LD_VAR 0 1
16334: RET
// every 0 0$1 trigger invincibleMode do var i ;
16335: LD_EXP 5
16339: IFFALSE 16436
16341: GO 16343
16343: DISABLE
16344: LD_INT 0
16346: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16347: LD_ADDR_VAR 0 1
16351: PUSH
16352: LD_INT 22
16354: PUSH
16355: LD_INT 1
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 2
16364: PUSH
16365: LD_INT 21
16367: PUSH
16368: LD_INT 3
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 21
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 3
16392: PUSH
16393: LD_INT 24
16395: PUSH
16396: LD_INT 900
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: PPUSH
16412: CALL_OW 69
16416: PUSH
16417: FOR_IN
16418: IFFALSE 16434
// SetLives ( i , 900 ) ;
16420: LD_VAR 0 1
16424: PPUSH
16425: LD_INT 900
16427: PPUSH
16428: CALL_OW 234
16432: GO 16417
16434: POP
16435: POP
// end ;
16436: PPOPN 1
16438: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16439: LD_OWVAR 1
16443: PUSH
16444: LD_INT 14700
16446: GREATER
16447: IFFALSE 18057
16449: GO 16451
16451: DISABLE
16452: LD_INT 0
16454: PPUSH
16455: PPUSH
// begin PrepareSupportFromDelta ;
16456: CALL 4052 0 0
// deltaSupport := true ;
16460: LD_ADDR_EXP 6
16464: PUSH
16465: LD_INT 1
16467: ST_TO_ADDR
// dialog := false ;
16468: LD_ADDR_VAR 0 1
16472: PUSH
16473: LD_INT 0
16475: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16476: LD_EXP 21
16480: PPUSH
16481: CALL_OW 302
16485: IFFALSE 16507
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16487: LD_ADDR_VAR 0 1
16491: PUSH
16492: LD_EXP 21
16496: PPUSH
16497: LD_STRING D2-Glad-1
16499: PPUSH
16500: CALL_OW 88
16504: ST_TO_ADDR
16505: GO 16589
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16507: LD_ADDR_VAR 0 1
16511: PUSH
16512: LD_INT 22
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 120
16524: PUSH
16525: LD_INT 107
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 21
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 23
16544: PUSH
16545: LD_INT 1
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: PPUSH
16558: CALL_OW 69
16562: PUSH
16563: LD_EXP 27
16567: PUSH
16568: LD_EXP 26
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: DIFF
16577: PPUSH
16578: LD_STRING D2-Sol1-1
16580: PPUSH
16581: LD_STRING D2-FSol1-1
16583: PPUSH
16584: CALL 20328 0 3
16588: ST_TO_ADDR
// if dialog then
16589: LD_VAR 0 1
16593: IFFALSE 16694
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16595: LD_EXP 16
16599: PPUSH
16600: CALL_OW 302
16604: PUSH
16605: LD_EXP 13
16609: PUSH
16610: LD_INT 1
16612: EQUAL
16613: AND
16614: IFFALSE 16628
// Say ( Donaldson , D2-Don-1 ) ;
16616: LD_EXP 16
16620: PPUSH
16621: LD_STRING D2-Don-1
16623: PPUSH
16624: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16628: LD_EXP 15
16632: PPUSH
16633: CALL_OW 302
16637: PUSH
16638: LD_EXP 13
16642: PUSH
16643: LD_INT 2
16645: EQUAL
16646: AND
16647: IFFALSE 16661
// Say ( Brown , D2-Brown-1 ) ;
16649: LD_EXP 15
16653: PPUSH
16654: LD_STRING D2-Brown-1
16656: PPUSH
16657: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16661: LD_EXP 25
16665: PPUSH
16666: CALL_OW 302
16670: PUSH
16671: LD_EXP 13
16675: PUSH
16676: LD_INT 3
16678: EQUAL
16679: AND
16680: IFFALSE 16694
// Say ( Houten , D2-VanH-1 ) ;
16682: LD_EXP 25
16686: PPUSH
16687: LD_STRING D2-VanH-1
16689: PPUSH
16690: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16694: LD_INT 3
16696: PPUSH
16697: CALL 13100 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16701: LD_STRING 07_time
16703: PPUSH
16704: LD_INT 18900
16706: PPUSH
16707: CALL_OW 30
16711: PUSH
16712: LD_INT 3
16714: DIV
16715: PPUSH
16716: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16720: LD_INT 34
16722: PPUSH
16723: LD_INT 1
16725: PPUSH
16726: CALL_OW 321
16730: PUSH
16731: LD_INT 2
16733: EQUAL
16734: IFFALSE 16743
// SetAchievement ( ACH_HEAVYGUN ) ;
16736: LD_STRING ACH_HEAVYGUN
16738: PPUSH
16739: CALL_OW 543
// PrepareMacmillanSquad ;
16743: CALL 4826 0 0
// wait ( 0 0$1 ) ;
16747: LD_INT 35
16749: PPUSH
16750: CALL_OW 67
// DialogueOn ;
16754: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16758: LD_EXP 14
16762: PPUSH
16763: CALL_OW 87
// dwait ( 0 0$2 ) ;
16767: LD_INT 70
16769: PPUSH
16770: CALL_OW 68
// DialogueOff ;
16774: CALL_OW 7
// wait ( 0 0$10 ) ;
16778: LD_INT 350
16780: PPUSH
16781: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16785: LD_INT 1
16787: PPUSH
16788: CALL_OW 427
// p := 0 ;
16792: LD_ADDR_VAR 0 2
16796: PUSH
16797: LD_INT 0
16799: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16800: LD_INT 35
16802: PPUSH
16803: CALL_OW 67
// p := Inc ( p ) ;
16807: LD_ADDR_VAR 0 2
16811: PUSH
16812: LD_VAR 0 2
16816: PPUSH
16817: CALL 80938 0 1
16821: ST_TO_ADDR
// if p > 300 then
16822: LD_VAR 0 2
16826: PUSH
16827: LD_INT 300
16829: GREATER
16830: IFFALSE 16834
// exit ;
16832: GO 18057
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16834: LD_EXP 14
16838: PPUSH
16839: LD_INT 15
16841: PPUSH
16842: CALL_OW 308
16846: PUSH
16847: LD_EXP 14
16851: PPUSH
16852: CALL_OW 310
16856: PPUSH
16857: LD_INT 15
16859: PPUSH
16860: CALL_OW 308
16864: OR
16865: PUSH
16866: LD_EXP 14
16870: PPUSH
16871: LD_EXP 27
16875: PPUSH
16876: CALL_OW 296
16880: PUSH
16881: LD_INT 10
16883: LESS
16884: OR
16885: PUSH
16886: LD_INT 22
16888: PUSH
16889: LD_INT 1
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: LD_INT 120
16901: PUSH
16902: LD_INT 106
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 120
16911: PUSH
16912: LD_INT 107
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 91
16926: PUSH
16927: LD_EXP 14
16931: PUSH
16932: LD_INT 12
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: LIST
16944: PPUSH
16945: CALL_OW 69
16949: OR
16950: IFFALSE 16800
// DialogueOn ;
16952: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16956: LD_EXP 14
16960: PPUSH
16961: LD_STRING D3-JMM-1
16963: PPUSH
16964: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16968: LD_EXP 16
16972: PPUSH
16973: CALL_OW 302
16977: PUSH
16978: LD_EXP 13
16982: PUSH
16983: LD_INT 1
16985: EQUAL
16986: AND
16987: IFFALSE 17003
// Say ( Donaldson , D3-Don-1 ) else
16989: LD_EXP 16
16993: PPUSH
16994: LD_STRING D3-Don-1
16996: PPUSH
16997: CALL_OW 88
17001: GO 17099
// begin if gammaCommander = 1 then
17003: LD_EXP 13
17007: PUSH
17008: LD_INT 1
17010: EQUAL
17011: IFFALSE 17099
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
17013: LD_INT 22
17015: PUSH
17016: LD_INT 1
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 21
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 23
17035: PUSH
17036: LD_INT 1
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 120
17045: PUSH
17046: LD_INT 106
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 26
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: PPUSH
17070: CALL_OW 69
17074: PPUSH
17075: LD_STRING D3-Sol1-1
17077: PPUSH
17078: LD_STRING 
17080: PPUSH
17081: CALL 20328 0 3
17085: IFFALSE 17099
// Say ( JMM , D3-JMM-2 ) ;
17087: LD_EXP 14
17091: PPUSH
17092: LD_STRING D3-JMM-2
17094: PPUSH
17095: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17099: LD_EXP 15
17103: PPUSH
17104: CALL_OW 302
17108: PUSH
17109: LD_EXP 13
17113: PUSH
17114: LD_INT 2
17116: EQUAL
17117: AND
17118: IFFALSE 17134
// Say ( Brown , D3-Brown-1 ) else
17120: LD_EXP 15
17124: PPUSH
17125: LD_STRING D3-Brown-1
17127: PPUSH
17128: CALL_OW 88
17132: GO 17230
// begin if gammaCommander = 2 then
17134: LD_EXP 13
17138: PUSH
17139: LD_INT 2
17141: EQUAL
17142: IFFALSE 17230
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
17144: LD_INT 22
17146: PUSH
17147: LD_INT 1
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 21
17156: PUSH
17157: LD_INT 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 23
17166: PUSH
17167: LD_INT 1
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 120
17176: PUSH
17177: LD_INT 106
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 26
17186: PUSH
17187: LD_INT 1
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: PPUSH
17201: CALL_OW 69
17205: PPUSH
17206: LD_STRING D3-Sol1-1a
17208: PPUSH
17209: LD_STRING 
17211: PPUSH
17212: CALL 20328 0 3
17216: IFFALSE 17230
// Say ( JMM , D3-JMM-2 ) ;
17218: LD_EXP 14
17222: PPUSH
17223: LD_STRING D3-JMM-2
17225: PPUSH
17226: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17230: LD_EXP 25
17234: PPUSH
17235: CALL_OW 302
17239: PUSH
17240: LD_EXP 13
17244: PUSH
17245: LD_INT 3
17247: EQUAL
17248: AND
17249: IFFALSE 17265
// Say ( Houten , D3-VanH-1 ) else
17251: LD_EXP 25
17255: PPUSH
17256: LD_STRING D3-VanH-1
17258: PPUSH
17259: CALL_OW 88
17263: GO 17361
// begin if gammaCommander = 3 then
17265: LD_EXP 13
17269: PUSH
17270: LD_INT 3
17272: EQUAL
17273: IFFALSE 17361
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17275: LD_INT 22
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 21
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 23
17297: PUSH
17298: LD_INT 1
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 120
17307: PUSH
17308: LD_INT 106
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 26
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: PPUSH
17332: CALL_OW 69
17336: PPUSH
17337: LD_STRING D3-Sol1-1b
17339: PPUSH
17340: LD_STRING 
17342: PPUSH
17343: CALL 20328 0 3
17347: IFFALSE 17361
// Say ( JMM , D3-JMM-2 ) ;
17349: LD_EXP 14
17353: PPUSH
17354: LD_STRING D3-JMM-2
17356: PPUSH
17357: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17361: LD_EXP 27
17365: PPUSH
17366: CALL_OW 302
17370: IFFALSE 17398
// begin Say ( Joan , D3a-Joan-1 ) ;
17372: LD_EXP 27
17376: PPUSH
17377: LD_STRING D3a-Joan-1
17379: PPUSH
17380: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17384: LD_EXP 14
17388: PPUSH
17389: LD_STRING D3a-JMM-1
17391: PPUSH
17392: CALL_OW 88
// end else
17396: GO 17832
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17398: LD_STRING 06_JoanStatus_1
17400: PPUSH
17401: LD_INT 0
17403: PPUSH
17404: CALL_OW 30
17408: PUSH
17409: LD_INT 1
17411: EQUAL
17412: IFFALSE 17832
// begin Say ( JMM , D3b-JMM-1 ) ;
17414: LD_EXP 14
17418: PPUSH
17419: LD_STRING D3b-JMM-1
17421: PPUSH
17422: CALL_OW 88
// dialog := false ;
17426: LD_ADDR_VAR 0 1
17430: PUSH
17431: LD_INT 0
17433: ST_TO_ADDR
// if gammaCommander = 1 then
17434: LD_EXP 13
17438: PUSH
17439: LD_INT 1
17441: EQUAL
17442: IFFALSE 17553
// if IsOK ( Donaldson ) then
17444: LD_EXP 16
17448: PPUSH
17449: CALL_OW 302
17453: IFFALSE 17475
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17455: LD_ADDR_VAR 0 1
17459: PUSH
17460: LD_EXP 16
17464: PPUSH
17465: LD_STRING D3b-Don-1
17467: PPUSH
17468: CALL_OW 88
17472: ST_TO_ADDR
17473: GO 17553
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17475: LD_ADDR_VAR 0 1
17479: PUSH
17480: LD_INT 22
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 21
17492: PUSH
17493: LD_INT 1
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 23
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 120
17512: PUSH
17513: LD_INT 106
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 26
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: PPUSH
17537: CALL_OW 69
17541: PPUSH
17542: LD_STRING D3b-Sol1-1
17544: PPUSH
17545: LD_STRING 
17547: PPUSH
17548: CALL 20328 0 3
17552: ST_TO_ADDR
// if gammaCommander = 2 then
17553: LD_EXP 13
17557: PUSH
17558: LD_INT 2
17560: EQUAL
17561: IFFALSE 17672
// if IsOk ( Brown ) then
17563: LD_EXP 15
17567: PPUSH
17568: CALL_OW 302
17572: IFFALSE 17594
// dialog := Say ( Brown , D3b-Brown-1 ) else
17574: LD_ADDR_VAR 0 1
17578: PUSH
17579: LD_EXP 15
17583: PPUSH
17584: LD_STRING D3b-Brown-1
17586: PPUSH
17587: CALL_OW 88
17591: ST_TO_ADDR
17592: GO 17672
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17594: LD_ADDR_VAR 0 1
17598: PUSH
17599: LD_INT 22
17601: PUSH
17602: LD_INT 1
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 21
17611: PUSH
17612: LD_INT 1
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 23
17621: PUSH
17622: LD_INT 1
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 120
17631: PUSH
17632: LD_INT 106
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 26
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: PPUSH
17656: CALL_OW 69
17660: PPUSH
17661: LD_STRING D3b-Sol1-1
17663: PPUSH
17664: LD_STRING 
17666: PPUSH
17667: CALL 20328 0 3
17671: ST_TO_ADDR
// if gammaCommander = 3 then
17672: LD_EXP 13
17676: PUSH
17677: LD_INT 3
17679: EQUAL
17680: IFFALSE 17791
// if IsOk ( Houten ) then
17682: LD_EXP 25
17686: PPUSH
17687: CALL_OW 302
17691: IFFALSE 17713
// dialog := Say ( Houten , D3b-VanH-1 ) else
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: LD_EXP 25
17702: PPUSH
17703: LD_STRING D3b-VanH-1
17705: PPUSH
17706: CALL_OW 88
17710: ST_TO_ADDR
17711: GO 17791
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17713: LD_ADDR_VAR 0 1
17717: PUSH
17718: LD_INT 22
17720: PUSH
17721: LD_INT 1
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 21
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 23
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 120
17750: PUSH
17751: LD_INT 106
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 26
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: PPUSH
17775: CALL_OW 69
17779: PPUSH
17780: LD_STRING D3b-Sol1-1
17782: PPUSH
17783: LD_STRING 
17785: PPUSH
17786: CALL 20328 0 3
17790: ST_TO_ADDR
// if dialog then
17791: LD_VAR 0 1
17795: IFFALSE 17832
// begin Say ( JMM , D3b-JMM-2 ) ;
17797: LD_EXP 14
17801: PPUSH
17802: LD_STRING D3b-JMM-2
17804: PPUSH
17805: CALL_OW 88
// if IsOK ( Lisa ) then
17809: LD_EXP 19
17813: PPUSH
17814: CALL_OW 302
17818: IFFALSE 17832
// Say ( Lisa , D3b-Lisa-2 ) ;
17820: LD_EXP 19
17824: PPUSH
17825: LD_STRING D3b-Lisa-2
17827: PPUSH
17828: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17832: LD_EXP 7
17836: NOT
17837: IFFALSE 17845
// begin DialogueOff ;
17839: CALL_OW 7
// exit ;
17843: GO 18057
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17845: LD_INT 22
17847: PUSH
17848: LD_INT 1
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 21
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 23
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: LD_INT 120
17880: PUSH
17881: LD_INT 106
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 120
17890: PUSH
17891: LD_INT 107
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 26
17905: PUSH
17906: LD_INT 1
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: PPUSH
17920: CALL_OW 69
17924: PPUSH
17925: LD_STRING DCa-Sol1-1
17927: PPUSH
17928: LD_STRING 
17930: PPUSH
17931: CALL 20328 0 3
17935: IFFALSE 17949
// Say ( JMM , DCb-JMM-1 ) ;
17937: LD_EXP 14
17941: PPUSH
17942: LD_STRING DCb-JMM-1
17944: PPUSH
17945: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17949: LD_INT 22
17951: PUSH
17952: LD_INT 1
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 21
17961: PUSH
17962: LD_INT 1
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 23
17971: PUSH
17972: LD_INT 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 2
17981: PUSH
17982: LD_INT 120
17984: PUSH
17985: LD_INT 106
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 120
17994: PUSH
17995: LD_INT 107
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 26
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: PPUSH
18024: CALL_OW 69
18028: PPUSH
18029: LD_STRING DCb-Sol1-1
18031: PPUSH
18032: LD_STRING 
18034: PPUSH
18035: CALL 20328 0 3
18039: IFFALSE 18053
// Say ( JMM , DCb-JMM-2 ) ;
18041: LD_EXP 14
18045: PPUSH
18046: LD_STRING DCb-JMM-2
18048: PPUSH
18049: CALL_OW 88
// DialogueOff ;
18053: CALL_OW 7
// end ;
18057: PPOPN 2
18059: END
// export function DialogSeenComputer ( un ) ; begin
18060: LD_INT 0
18062: PPUSH
// if jmmArrival then
18063: LD_EXP 8
18067: IFFALSE 18071
// exit ;
18069: GO 18137
// CenterOnUnits ( un ) ;
18071: LD_VAR 0 1
18075: PPUSH
18076: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
18080: LD_INT 22
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 2
18092: PUSH
18093: LD_INT 120
18095: PUSH
18096: LD_INT 106
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 120
18105: PUSH
18106: LD_INT 107
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PPUSH
18122: CALL_OW 69
18126: PPUSH
18127: LD_STRING DC-Sol1-1
18129: PPUSH
18130: LD_STRING DC-FSol1-1
18132: PPUSH
18133: CALL 20328 0 3
// end ;
18137: LD_VAR 0 2
18141: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
18142: LD_EXP 8
18146: PUSH
18147: LD_OWVAR 1
18151: PUSH
18152: LD_INT 48300
18154: GREATEREQUAL
18155: AND
18156: PUSH
18157: LD_EXP 14
18161: PPUSH
18162: CALL_OW 302
18166: AND
18167: IFFALSE 18653
18169: GO 18171
18171: DISABLE
// begin wait ( 2 2$00 ) ;
18172: LD_INT 4200
18174: PPUSH
18175: CALL_OW 67
// DialogueOn ;
18179: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18183: LD_EXP 30
18187: PPUSH
18188: LD_STRING D4-Pow-1
18190: PPUSH
18191: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18195: LD_EXP 14
18199: PPUSH
18200: LD_STRING D4-JMM-1
18202: PPUSH
18203: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18207: LD_EXP 30
18211: PPUSH
18212: LD_STRING D4-Pow-2
18214: PPUSH
18215: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18219: LD_EXP 14
18223: PPUSH
18224: LD_STRING D4-JMM-2
18226: PPUSH
18227: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18231: LD_EXP 30
18235: PPUSH
18236: LD_STRING D4-Pow-3
18238: PPUSH
18239: CALL_OW 94
// DialogueOff ;
18243: CALL_OW 7
// wait ( 1 1$00 ) ;
18247: LD_INT 2100
18249: PPUSH
18250: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18254: LD_INT 1
18256: PPUSH
18257: CALL_OW 427
// wait ( 7 7$30 ) ;
18261: LD_INT 15750
18263: PPUSH
18264: CALL_OW 67
// DialogueOn ;
18268: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18272: LD_EXP 30
18276: PPUSH
18277: LD_STRING D4a-Pow-1
18279: PPUSH
18280: CALL_OW 94
// DialogueOff ;
18284: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18288: LD_INT 1
18290: PPUSH
18291: CALL_OW 427
// SikorskiCounter ;
18295: CALL 20112 0 0
// PrepareSikorsky ;
18299: CALL 6356 0 0
// CenterNowOnUnits ( Sikorski ) ;
18303: LD_EXP 28
18307: PPUSH
18308: CALL_OW 87
// DialogueOn ;
18312: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18316: LD_EXP 28
18320: PPUSH
18321: LD_STRING D5-Sik-1
18323: PPUSH
18324: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18328: LD_INT 11
18330: PPUSH
18331: LD_INT 22
18333: PUSH
18334: LD_INT 1
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PPUSH
18341: CALL_OW 70
18345: PUSH
18346: LD_INT 1
18348: GREATER
18349: PUSH
18350: LD_INT 28
18352: PPUSH
18353: CALL_OW 302
18357: NOT
18358: OR
18359: PUSH
18360: LD_INT 28
18362: PPUSH
18363: CALL_OW 255
18367: PUSH
18368: LD_INT 1
18370: EQUAL
18371: OR
18372: IFFALSE 18424
// begin Say ( JMM , D5-JMM-1 ) ;
18374: LD_EXP 14
18378: PPUSH
18379: LD_STRING D5-JMM-1
18381: PPUSH
18382: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18386: LD_EXP 28
18390: PPUSH
18391: LD_STRING D7a-Sik-1
18393: PPUSH
18394: CALL_OW 88
// DialogueOff ;
18398: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18402: LD_STRING M2
18404: PPUSH
18405: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18409: LD_INT 1
18411: PPUSH
18412: CALL_OW 427
// SikorskiAttack ;
18416: CALL 7979 0 0
// exit ;
18420: GO 18653
// end else
18422: GO 18469
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18424: LD_INT 15
18426: PPUSH
18427: LD_INT 81
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PPUSH
18437: CALL_OW 70
18441: IFFALSE 18457
// Say ( JMM , D5-JMM-1b ) else
18443: LD_EXP 14
18447: PPUSH
18448: LD_STRING D5-JMM-1b
18450: PPUSH
18451: CALL_OW 88
18455: GO 18469
// Say ( JMM , D5-JMM-1a ) ;
18457: LD_EXP 14
18461: PPUSH
18462: LD_STRING D5-JMM-1a
18464: PPUSH
18465: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18469: LD_EXP 28
18473: PPUSH
18474: LD_STRING D5-Sik-2
18476: PPUSH
18477: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18481: LD_STRING QSikorski
18483: PPUSH
18484: CALL_OW 97
18488: PUSH
18489: LD_INT 1
18491: DOUBLE
18492: EQUAL
18493: IFTRUE 18497
18495: GO 18520
18497: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18498: LD_EXP 28
18502: PPUSH
18503: LD_STRING D5a-Sik-1
18505: PPUSH
18506: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18510: LD_ADDR_EXP 4
18514: PUSH
18515: LD_INT 2100
18517: ST_TO_ADDR
// end ; 2 :
18518: GO 18607
18520: LD_INT 2
18522: DOUBLE
18523: EQUAL
18524: IFTRUE 18528
18526: GO 18551
18528: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18529: LD_EXP 28
18533: PPUSH
18534: LD_STRING D5b-Sik-1
18536: PPUSH
18537: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18541: LD_ADDR_EXP 4
18545: PUSH
18546: LD_INT 10500
18548: ST_TO_ADDR
// end ; 3 :
18549: GO 18607
18551: LD_INT 3
18553: DOUBLE
18554: EQUAL
18555: IFTRUE 18559
18557: GO 18606
18559: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18560: LD_EXP 28
18564: PPUSH
18565: LD_STRING D5c-Sik-1
18567: PPUSH
18568: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18572: LD_EXP 14
18576: PPUSH
18577: LD_STRING D5c-JMM-1
18579: PPUSH
18580: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18584: LD_EXP 28
18588: PPUSH
18589: LD_STRING D5c-Sik-2
18591: PPUSH
18592: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18596: LD_ADDR_EXP 4
18600: PUSH
18601: LD_INT 10500
18603: ST_TO_ADDR
// end ; end ;
18604: GO 18607
18606: POP
// DialogueOff ;
18607: CALL_OW 7
// SikorskiWaitCounter ;
18611: CALL 20175 0 0
// DialogueOn ;
18615: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18619: LD_EXP 28
18623: PPUSH
18624: LD_STRING D6-Sik-1
18626: PPUSH
18627: CALL_OW 88
// DialogueOff ;
18631: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18635: LD_STRING M2
18637: PPUSH
18638: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18642: LD_INT 1
18644: PPUSH
18645: CALL_OW 427
// SikorskiAttack ;
18649: CALL 7979 0 0
// end ;
18653: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18654: LD_INT 11
18656: PPUSH
18657: LD_INT 22
18659: PUSH
18660: LD_INT 4
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PPUSH
18667: CALL_OW 70
18671: PUSH
18672: LD_INT 2
18674: GREATER
18675: IFFALSE 18868
18677: GO 18679
18679: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18680: LD_EXP 28
18684: PPUSH
18685: LD_STRING D7-Sik-1
18687: PPUSH
18688: CALL_OW 88
// wait ( 0 0$10 ) ;
18692: LD_INT 350
18694: PPUSH
18695: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18699: LD_EXP 14
18703: PPUSH
18704: LD_INT 11
18706: PPUSH
18707: CALL_OW 308
18711: PUSH
18712: LD_EXP 14
18716: PPUSH
18717: CALL_OW 310
18721: PPUSH
18722: LD_INT 11
18724: PPUSH
18725: CALL_OW 308
18729: OR
18730: IFFALSE 18754
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18732: LD_EXP 28
18736: PPUSH
18737: LD_STRING D7a-Sik-1
18739: PPUSH
18740: CALL_OW 88
// sikorskiStatus := 1 ;
18744: LD_ADDR_EXP 9
18748: PUSH
18749: LD_INT 1
18751: ST_TO_ADDR
// end else
18752: GO 18774
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18754: LD_EXP 28
18758: PPUSH
18759: LD_STRING D7b-Sik-1
18761: PPUSH
18762: CALL_OW 88
// sikorskiStatus := 0 ;
18766: LD_ADDR_EXP 9
18770: PUSH
18771: LD_INT 0
18773: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18774: LD_INT 1575
18776: PPUSH
18777: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18781: LD_EXP 14
18785: PPUSH
18786: LD_INT 11
18788: PPUSH
18789: CALL_OW 308
18793: PUSH
18794: LD_EXP 14
18798: PPUSH
18799: CALL_OW 310
18803: PPUSH
18804: LD_INT 11
18806: PPUSH
18807: CALL_OW 308
18811: OR
18812: PUSH
18813: LD_EXP 14
18817: PPUSH
18818: CALL_OW 302
18822: NOT
18823: OR
18824: IFFALSE 18848
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18826: LD_EXP 28
18830: PPUSH
18831: LD_STRING D7a-Sik-1
18833: PPUSH
18834: CALL_OW 88
// sikorskiStatus := 1 ;
18838: LD_ADDR_EXP 9
18842: PUSH
18843: LD_INT 1
18845: ST_TO_ADDR
// end else
18846: GO 18868
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18848: LD_EXP 28
18852: PPUSH
18853: LD_STRING D7b-Sik-1
18855: PPUSH
18856: CALL_OW 88
// sikorskiStatus := 0 ;
18860: LD_ADDR_EXP 9
18864: PUSH
18865: LD_INT 0
18867: ST_TO_ADDR
// end ; end ;
18868: END
// export function SikorskiKilledInAction ; begin
18869: LD_INT 0
18871: PPUSH
// wait ( 0 0$2 ) ;
18872: LD_INT 70
18874: PPUSH
18875: CALL_OW 67
// DialogueOn ;
18879: CALL_OW 6
// dwait ( 0 0$1 ) ;
18883: LD_INT 35
18885: PPUSH
18886: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18890: LD_EXP 30
18894: PPUSH
18895: LD_STRING D8b-Pow-1
18897: PPUSH
18898: CALL_OW 94
// YouLost ( Dismissed ) ;
18902: LD_STRING Dismissed
18904: PPUSH
18905: CALL_OW 104
// DialogueOff ;
18909: CALL_OW 7
// end ;
18913: LD_VAR 0 1
18917: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18918: LD_EXP 8
18922: PUSH
18923: LD_INT 28
18925: PPUSH
18926: CALL_OW 301
18930: AND
18931: PUSH
18932: LD_EXP 32
18936: PPUSH
18937: CALL_OW 301
18941: AND
18942: PUSH
18943: LD_INT 22
18945: PUSH
18946: LD_INT 3
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 50
18955: PUSH
18956: EMPTY
18957: LIST
18958: PUSH
18959: LD_INT 30
18961: PUSH
18962: LD_INT 5
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: LIST
18973: PPUSH
18974: CALL_OW 69
18978: PUSH
18979: LD_INT 0
18981: EQUAL
18982: AND
18983: IFFALSE 20109
18985: GO 18987
18987: DISABLE
18988: LD_INT 0
18990: PPUSH
18991: PPUSH
18992: PPUSH
// begin Video ( true ) ;
18993: LD_INT 1
18995: PPUSH
18996: CALL 79549 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
19000: LD_INT 104
19002: PPUSH
19003: LD_INT 108
19005: PPUSH
19006: LD_INT 1
19008: PPUSH
19009: LD_INT 36
19011: NEG
19012: PPUSH
19013: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
19017: LD_INT 104
19019: PPUSH
19020: LD_INT 108
19022: PPUSH
19023: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
19027: LD_ADDR_VAR 0 2
19031: PUSH
19032: LD_INT 22
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 21
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 3
19054: PUSH
19055: LD_INT 24
19057: PUSH
19058: LD_INT 249
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: LIST
19073: PPUSH
19074: CALL_OW 69
19078: ST_TO_ADDR
// if tmp then
19079: LD_VAR 0 2
19083: IFFALSE 19114
// for i in tmp do
19085: LD_ADDR_VAR 0 1
19089: PUSH
19090: LD_VAR 0 2
19094: PUSH
19095: FOR_IN
19096: IFFALSE 19112
// SetLives ( i , 249 ) ;
19098: LD_VAR 0 1
19102: PPUSH
19103: LD_INT 249
19105: PPUSH
19106: CALL_OW 234
19110: GO 19095
19112: POP
19113: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
19114: LD_ADDR_VAR 0 1
19118: PUSH
19119: LD_INT 22
19121: PUSH
19122: LD_INT 3
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 21
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PPUSH
19143: CALL_OW 69
19147: PUSH
19148: FOR_IN
19149: IFFALSE 19192
// begin ComExit ( i ) ;
19151: LD_VAR 0 1
19155: PPUSH
19156: CALL 79975 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
19160: LD_VAR 0 1
19164: PPUSH
19165: LD_INT 131
19167: PPUSH
19168: LD_INT 127
19170: PPUSH
19171: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
19175: LD_VAR 0 1
19179: PPUSH
19180: LD_INT 141
19182: PPUSH
19183: LD_INT 147
19185: PPUSH
19186: CALL_OW 171
// end ;
19190: GO 19148
19192: POP
19193: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
19194: LD_INT 81
19196: PUSH
19197: LD_INT 3
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 3
19206: PUSH
19207: LD_INT 21
19209: PUSH
19210: LD_INT 3
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 69
19229: PPUSH
19230: LD_INT 131
19232: PPUSH
19233: LD_INT 127
19235: PPUSH
19236: CALL_OW 174
// wait ( 0 0$08 ) ;
19240: LD_INT 280
19242: PPUSH
19243: CALL_OW 67
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 7 then
19247: LD_INT 22
19249: PUSH
19250: LD_INT 1
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 21
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 23
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 50
19279: PUSH
19280: EMPTY
19281: LIST
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: PPUSH
19294: CALL 43968 0 1
19298: PUSH
19299: LD_INT 7
19301: LESS
19302: IFFALSE 19313
// begin YouLost ( LostVictory ) ;
19304: LD_STRING LostVictory
19306: PPUSH
19307: CALL_OW 104
// exit ;
19311: GO 20109
// end ; DialogueOn ;
19313: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19317: LD_EXP 9
19321: PUSH
19322: LD_INT 1
19324: EQUAL
19325: PUSH
19326: LD_EXP 28
19330: PPUSH
19331: CALL_OW 302
19335: AND
19336: IFFALSE 19350
// Say ( Sikorski , D9-Sik-1 ) ;
19338: LD_EXP 28
19342: PPUSH
19343: LD_STRING D9-Sik-1
19345: PPUSH
19346: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19350: LD_INT 22
19352: PUSH
19353: LD_INT 4
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PPUSH
19360: CALL_OW 69
19364: PUSH
19365: LD_INT 0
19367: EQUAL
19368: PUSH
19369: LD_EXP 3
19373: AND
19374: IFFALSE 19383
// SetAchievement ( ACH_BLITZKRIEG ) ;
19376: LD_STRING ACH_BLITZKRIEG
19378: PPUSH
19379: CALL_OW 543
// if tick <= 45 45$10 then
19383: LD_OWVAR 1
19387: PUSH
19388: LD_INT 94850
19390: LESSEQUAL
19391: IFFALSE 19407
// begin wait ( 3 ) ;
19393: LD_INT 3
19395: PPUSH
19396: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19400: LD_STRING ACH_ASPEED_8
19402: PPUSH
19403: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19407: LD_STRING med1
19409: PPUSH
19410: LD_INT 1
19412: PPUSH
19413: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19417: LD_STRING med2
19419: PPUSH
19420: LD_INT 1
19422: PPUSH
19423: CALL_OW 101
// if sikorskiStatus = 1 then
19427: LD_EXP 9
19431: PUSH
19432: LD_INT 1
19434: EQUAL
19435: IFFALSE 19449
// AddMedal ( perfect , 1 ) else
19437: LD_STRING perfect
19439: PPUSH
19440: LD_INT 1
19442: PPUSH
19443: CALL_OW 101
19447: GO 19460
// AddMedal ( perfect , - 1 ) ;
19449: LD_STRING perfect
19451: PPUSH
19452: LD_INT 1
19454: NEG
19455: PPUSH
19456: CALL_OW 101
// if Difficulty >= 3 then
19460: LD_OWVAR 67
19464: PUSH
19465: LD_INT 3
19467: GREATEREQUAL
19468: IFFALSE 19480
// SetAchievementEX ( ACH_AMER , 8 ) ;
19470: LD_STRING ACH_AMER
19472: PPUSH
19473: LD_INT 8
19475: PPUSH
19476: CALL_OW 564
// GiveMedals ( Main ) ;
19480: LD_STRING Main
19482: PPUSH
19483: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19487: LD_INT 22
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 23
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 21
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 69
19526: PPUSH
19527: CALL_OW 43
// prefix := 08_ ;
19531: LD_ADDR_VAR 0 3
19535: PUSH
19536: LD_STRING 08_
19538: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19539: LD_EXP 14
19543: PPUSH
19544: LD_VAR 0 3
19548: PUSH
19549: LD_STRING JMM
19551: STR
19552: PPUSH
19553: CALL_OW 38
// if IsLive ( Brown ) then
19557: LD_EXP 15
19561: PPUSH
19562: CALL_OW 300
19566: IFFALSE 19586
// SaveCharacters ( Brown , prefix & Brown ) ;
19568: LD_EXP 15
19572: PPUSH
19573: LD_VAR 0 3
19577: PUSH
19578: LD_STRING Brown
19580: STR
19581: PPUSH
19582: CALL_OW 38
// if IsLive ( Donaldson ) then
19586: LD_EXP 16
19590: PPUSH
19591: CALL_OW 300
19595: IFFALSE 19615
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19597: LD_EXP 16
19601: PPUSH
19602: LD_VAR 0 3
19606: PUSH
19607: LD_STRING Donaldson
19609: STR
19610: PPUSH
19611: CALL_OW 38
// if IsLive ( Bobby ) then
19615: LD_EXP 17
19619: PPUSH
19620: CALL_OW 300
19624: IFFALSE 19644
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19626: LD_EXP 17
19630: PPUSH
19631: LD_VAR 0 3
19635: PUSH
19636: LD_STRING Bobby
19638: STR
19639: PPUSH
19640: CALL_OW 38
// if IsLive ( Cyrus ) then
19644: LD_EXP 18
19648: PPUSH
19649: CALL_OW 300
19653: IFFALSE 19673
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19655: LD_EXP 18
19659: PPUSH
19660: LD_VAR 0 3
19664: PUSH
19665: LD_STRING Cyrus
19667: STR
19668: PPUSH
19669: CALL_OW 38
// if IsLive ( Lisa ) then
19673: LD_EXP 19
19677: PPUSH
19678: CALL_OW 300
19682: IFFALSE 19702
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19684: LD_EXP 19
19688: PPUSH
19689: LD_VAR 0 3
19693: PUSH
19694: LD_STRING Lisa
19696: STR
19697: PPUSH
19698: CALL_OW 38
// if IsLive ( Frank ) then
19702: LD_EXP 20
19706: PPUSH
19707: CALL_OW 300
19711: IFFALSE 19731
// SaveCharacters ( Frank , prefix & Frank ) ;
19713: LD_EXP 20
19717: PPUSH
19718: LD_VAR 0 3
19722: PUSH
19723: LD_STRING Frank
19725: STR
19726: PPUSH
19727: CALL_OW 38
// if IsLive ( Gladstone ) then
19731: LD_EXP 21
19735: PPUSH
19736: CALL_OW 300
19740: IFFALSE 19760
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19742: LD_EXP 21
19746: PPUSH
19747: LD_VAR 0 3
19751: PUSH
19752: LD_STRING Gladstone
19754: STR
19755: PPUSH
19756: CALL_OW 38
// if IsLive ( Kikuchi ) then
19760: LD_EXP 22
19764: PPUSH
19765: CALL_OW 300
19769: IFFALSE 19789
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19771: LD_EXP 22
19775: PPUSH
19776: LD_VAR 0 3
19780: PUSH
19781: LD_STRING Kikuchi
19783: STR
19784: PPUSH
19785: CALL_OW 38
// if IsLive ( Denis ) then
19789: LD_EXP 26
19793: PPUSH
19794: CALL_OW 300
19798: IFFALSE 19818
// SaveCharacters ( Denis , prefix & Denis ) ;
19800: LD_EXP 26
19804: PPUSH
19805: LD_VAR 0 3
19809: PUSH
19810: LD_STRING Denis
19812: STR
19813: PPUSH
19814: CALL_OW 38
// if IsLive ( Joan ) then
19818: LD_EXP 27
19822: PPUSH
19823: CALL_OW 300
19827: IFFALSE 19849
// SaveCharacters ( Joan , prefix & Joan ) else
19829: LD_EXP 27
19833: PPUSH
19834: LD_VAR 0 3
19838: PUSH
19839: LD_STRING Joan
19841: STR
19842: PPUSH
19843: CALL_OW 38
19847: GO 19856
// DeleteCharacters ( Joan ) ;
19849: LD_STRING Joan
19851: PPUSH
19852: CALL_OW 40
// if IsLive ( Khatam ) then
19856: LD_EXP 23
19860: PPUSH
19861: CALL_OW 300
19865: IFFALSE 19885
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19867: LD_EXP 23
19871: PPUSH
19872: LD_VAR 0 3
19876: PUSH
19877: LD_STRING Khatam
19879: STR
19880: PPUSH
19881: CALL_OW 38
// if IsLive ( Houten ) then
19885: LD_EXP 25
19889: PPUSH
19890: CALL_OW 300
19894: IFFALSE 19921
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
19896: LD_STRING enableBioCharacter(BIO_HOUT)
19898: PPUSH
19899: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
19903: LD_EXP 25
19907: PPUSH
19908: LD_VAR 0 3
19912: PUSH
19913: LD_STRING Houten
19915: STR
19916: PPUSH
19917: CALL_OW 38
// end ; if IsLive ( Mike ) then
19921: LD_EXP 24
19925: PPUSH
19926: CALL_OW 300
19930: IFFALSE 19950
// SaveCharacters ( Mike , prefix & Mike ) ;
19932: LD_EXP 24
19936: PPUSH
19937: LD_VAR 0 3
19941: PUSH
19942: LD_STRING Mike
19944: STR
19945: PPUSH
19946: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19950: LD_INT 22
19952: PUSH
19953: LD_INT 1
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 21
19962: PUSH
19963: LD_INT 1
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 23
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: LIST
19984: PPUSH
19985: CALL_OW 69
19989: PUSH
19990: LD_EXP 14
19994: PUSH
19995: LD_EXP 15
19999: PUSH
20000: LD_EXP 16
20004: PUSH
20005: LD_EXP 17
20009: PUSH
20010: LD_EXP 18
20014: PUSH
20015: LD_EXP 19
20019: PUSH
20020: LD_EXP 20
20024: PUSH
20025: LD_EXP 21
20029: PUSH
20030: LD_EXP 22
20034: PUSH
20035: LD_EXP 26
20039: PUSH
20040: LD_EXP 27
20044: PUSH
20045: LD_EXP 25
20049: PUSH
20050: LD_EXP 23
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: DIFF
20070: PPUSH
20071: LD_STRING 08_other_survivors
20073: PPUSH
20074: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
20078: LD_INT 15
20080: PPUSH
20081: CALL 7453 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
20085: LD_EXP 10
20089: NOT
20090: PPUSH
20091: LD_STRING 08_SikorskiStatus
20093: PPUSH
20094: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
20098: LD_STRING enableBioCharacter(BIO_SIK)
20100: PPUSH
20101: CALL_OW 559
// YouWin ;
20105: CALL_OW 103
// end ; end_of_file
20109: PPOPN 3
20111: END
// export function SikorskiCounter ; begin
20112: LD_INT 0
20114: PPUSH
// repeat wait ( 0 0$1 ) ;
20115: LD_INT 35
20117: PPUSH
20118: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
20122: LD_ADDR_OWVAR 47
20126: PUSH
20127: LD_STRING #Am08-2
20129: PUSH
20130: LD_EXP 3
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
20139: LD_ADDR_EXP 3
20143: PUSH
20144: LD_EXP 3
20148: PUSH
20149: LD_INT 35
20151: MINUS
20152: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
20153: LD_EXP 3
20157: PUSH
20158: LD_INT 0
20160: EQUAL
20161: IFFALSE 20115
// display_strings := [ ] ;
20163: LD_ADDR_OWVAR 47
20167: PUSH
20168: EMPTY
20169: ST_TO_ADDR
// end ;
20170: LD_VAR 0 1
20174: RET
// export function SikorskiWaitCounter ; begin
20175: LD_INT 0
20177: PPUSH
// repeat wait ( 0 0$1 ) ;
20178: LD_INT 35
20180: PPUSH
20181: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
20185: LD_ADDR_OWVAR 47
20189: PUSH
20190: LD_STRING #Am08-1
20192: PUSH
20193: LD_EXP 4
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
20202: LD_ADDR_EXP 4
20206: PUSH
20207: LD_EXP 4
20211: PUSH
20212: LD_INT 35
20214: MINUS
20215: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
20216: LD_EXP 4
20220: PUSH
20221: LD_INT 0
20223: EQUAL
20224: IFFALSE 20178
// display_strings := [ ] ;
20226: LD_ADDR_OWVAR 47
20230: PUSH
20231: EMPTY
20232: ST_TO_ADDR
// end ; end_of_file
20233: LD_VAR 0 1
20237: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
20238: LD_EXP 3
20242: IFFALSE 20282
20244: GO 20246
20246: DISABLE
// begin enable ;
20247: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
20248: LD_INT 14
20250: PPUSH
20251: CALL_OW 435
20255: PUSH
20256: LD_INT 10
20258: LESS
20259: IFFALSE 20282
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
20261: LD_INT 1
20263: PPUSH
20264: LD_INT 5
20266: PPUSH
20267: CALL_OW 12
20271: PPUSH
20272: LD_INT 14
20274: PPUSH
20275: LD_INT 1
20277: PPUSH
20278: CALL_OW 55
// end ;
20282: END
// every 0 0$55 trigger sikorskiArriveCounter do
20283: LD_EXP 3
20287: IFFALSE 20327
20289: GO 20291
20291: DISABLE
// begin enable ;
20292: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20293: LD_INT 13
20295: PPUSH
20296: CALL_OW 435
20300: PUSH
20301: LD_INT 10
20303: LESS
20304: IFFALSE 20327
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20306: LD_INT 1
20308: PPUSH
20309: LD_INT 5
20311: PPUSH
20312: CALL_OW 12
20316: PPUSH
20317: LD_INT 13
20319: PPUSH
20320: LD_INT 1
20322: PPUSH
20323: CALL_OW 55
// end ; end_of_file
20327: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20328: LD_INT 0
20330: PPUSH
20331: PPUSH
// if not units then
20332: LD_VAR 0 1
20336: NOT
20337: IFFALSE 20341
// exit ;
20339: GO 20466
// result := false ;
20341: LD_ADDR_VAR 0 4
20345: PUSH
20346: LD_INT 0
20348: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20349: LD_ADDR_VAR 0 5
20353: PUSH
20354: LD_VAR 0 1
20358: PPUSH
20359: LD_INT 26
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PPUSH
20369: CALL_OW 72
20373: ST_TO_ADDR
// if tmp then
20374: LD_VAR 0 5
20378: IFFALSE 20404
// result := Say ( tmp [ 1 ] , menDialog ) ;
20380: LD_ADDR_VAR 0 4
20384: PUSH
20385: LD_VAR 0 5
20389: PUSH
20390: LD_INT 1
20392: ARRAY
20393: PPUSH
20394: LD_VAR 0 2
20398: PPUSH
20399: CALL_OW 88
20403: ST_TO_ADDR
// if not result then
20404: LD_VAR 0 4
20408: NOT
20409: IFFALSE 20466
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20411: LD_ADDR_VAR 0 5
20415: PUSH
20416: LD_VAR 0 1
20420: PPUSH
20421: LD_INT 26
20423: PUSH
20424: LD_INT 2
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PPUSH
20431: CALL_OW 72
20435: ST_TO_ADDR
// if tmp then
20436: LD_VAR 0 5
20440: IFFALSE 20466
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20442: LD_ADDR_VAR 0 4
20446: PUSH
20447: LD_VAR 0 5
20451: PUSH
20452: LD_INT 1
20454: ARRAY
20455: PPUSH
20456: LD_VAR 0 3
20460: PPUSH
20461: CALL_OW 88
20465: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20466: LD_VAR 0 4
20470: RET
// export globalGameSaveCounter ; every 0 0$1 do
20471: GO 20473
20473: DISABLE
// begin enable ;
20474: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20475: LD_STRING updateTimer(
20477: PUSH
20478: LD_OWVAR 1
20482: STR
20483: PUSH
20484: LD_STRING );
20486: STR
20487: PPUSH
20488: CALL_OW 559
// end ;
20492: END
// every 0 0$1 do
20493: GO 20495
20495: DISABLE
// begin globalGameSaveCounter := 0 ;
20496: LD_ADDR_EXP 37
20500: PUSH
20501: LD_INT 0
20503: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20504: LD_STRING setGameSaveCounter(0)
20506: PPUSH
20507: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20511: LD_STRING initStreamRollete();
20513: PPUSH
20514: CALL_OW 559
// InitStreamMode ;
20518: CALL 21861 0 0
// DefineStreamItems ( false ) ;
20522: LD_INT 0
20524: PPUSH
20525: CALL 22325 0 1
// end ;
20529: END
// export function SOS_MapStart ( ) ; begin
20530: LD_INT 0
20532: PPUSH
// if streamModeActive then
20533: LD_EXP 38
20537: IFFALSE 20546
// DefineStreamItems ( true ) ;
20539: LD_INT 1
20541: PPUSH
20542: CALL 22325 0 1
// UpdateLuaVariables ( ) ;
20546: CALL 20563 0 0
// UpdateFactoryWaypoints ( ) ;
20550: CALL 35327 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20554: CALL 35579 0 0
// end ;
20558: LD_VAR 0 1
20562: RET
// function UpdateLuaVariables ( ) ; begin
20563: LD_INT 0
20565: PPUSH
// if globalGameSaveCounter then
20566: LD_EXP 37
20570: IFFALSE 20604
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20572: LD_ADDR_EXP 37
20576: PUSH
20577: LD_EXP 37
20581: PPUSH
20582: CALL 80938 0 1
20586: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20587: LD_STRING setGameSaveCounter(
20589: PUSH
20590: LD_EXP 37
20594: STR
20595: PUSH
20596: LD_STRING )
20598: STR
20599: PPUSH
20600: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20604: LD_STRING setGameDifficulty(
20606: PUSH
20607: LD_OWVAR 67
20611: STR
20612: PUSH
20613: LD_STRING )
20615: STR
20616: PPUSH
20617: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20621: LD_STRING displayDifficulty(
20623: PUSH
20624: LD_OWVAR 67
20628: STR
20629: PUSH
20630: LD_STRING )
20632: STR
20633: PPUSH
20634: CALL_OW 559
// end ;
20638: LD_VAR 0 1
20642: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20643: LD_INT 0
20645: PPUSH
// if p2 = stream_mode then
20646: LD_VAR 0 2
20650: PUSH
20651: LD_INT 100
20653: EQUAL
20654: IFFALSE 21657
// begin if not StreamModeActive then
20656: LD_EXP 38
20660: NOT
20661: IFFALSE 20671
// StreamModeActive := true ;
20663: LD_ADDR_EXP 38
20667: PUSH
20668: LD_INT 1
20670: ST_TO_ADDR
// if p3 = 0 then
20671: LD_VAR 0 3
20675: PUSH
20676: LD_INT 0
20678: EQUAL
20679: IFFALSE 20685
// InitStreamMode ;
20681: CALL 21861 0 0
// if p3 = 1 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 1
20692: EQUAL
20693: IFFALSE 20703
// sRocket := true ;
20695: LD_ADDR_EXP 43
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 2 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 2
20710: EQUAL
20711: IFFALSE 20721
// sSpeed := true ;
20713: LD_ADDR_EXP 42
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 3 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 3
20728: EQUAL
20729: IFFALSE 20739
// sEngine := true ;
20731: LD_ADDR_EXP 44
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 4 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 4
20746: EQUAL
20747: IFFALSE 20757
// sSpec := true ;
20749: LD_ADDR_EXP 41
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 5 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 5
20764: EQUAL
20765: IFFALSE 20775
// sLevel := true ;
20767: LD_ADDR_EXP 45
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 6 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 6
20782: EQUAL
20783: IFFALSE 20793
// sArmoury := true ;
20785: LD_ADDR_EXP 46
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 7 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 7
20800: EQUAL
20801: IFFALSE 20811
// sRadar := true ;
20803: LD_ADDR_EXP 47
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 8 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 8
20818: EQUAL
20819: IFFALSE 20829
// sBunker := true ;
20821: LD_ADDR_EXP 48
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 9 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 9
20836: EQUAL
20837: IFFALSE 20847
// sHack := true ;
20839: LD_ADDR_EXP 49
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// if p3 = 10 then
20847: LD_VAR 0 3
20851: PUSH
20852: LD_INT 10
20854: EQUAL
20855: IFFALSE 20865
// sFire := true ;
20857: LD_ADDR_EXP 50
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// if p3 = 11 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 11
20872: EQUAL
20873: IFFALSE 20883
// sRefresh := true ;
20875: LD_ADDR_EXP 51
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 12 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 12
20890: EQUAL
20891: IFFALSE 20901
// sExp := true ;
20893: LD_ADDR_EXP 52
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// if p3 = 13 then
20901: LD_VAR 0 3
20905: PUSH
20906: LD_INT 13
20908: EQUAL
20909: IFFALSE 20919
// sDepot := true ;
20911: LD_ADDR_EXP 53
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// if p3 = 14 then
20919: LD_VAR 0 3
20923: PUSH
20924: LD_INT 14
20926: EQUAL
20927: IFFALSE 20937
// sFlag := true ;
20929: LD_ADDR_EXP 54
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// if p3 = 15 then
20937: LD_VAR 0 3
20941: PUSH
20942: LD_INT 15
20944: EQUAL
20945: IFFALSE 20955
// sKamikadze := true ;
20947: LD_ADDR_EXP 62
20951: PUSH
20952: LD_INT 1
20954: ST_TO_ADDR
// if p3 = 16 then
20955: LD_VAR 0 3
20959: PUSH
20960: LD_INT 16
20962: EQUAL
20963: IFFALSE 20973
// sTroll := true ;
20965: LD_ADDR_EXP 63
20969: PUSH
20970: LD_INT 1
20972: ST_TO_ADDR
// if p3 = 17 then
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 17
20980: EQUAL
20981: IFFALSE 20991
// sSlow := true ;
20983: LD_ADDR_EXP 64
20987: PUSH
20988: LD_INT 1
20990: ST_TO_ADDR
// if p3 = 18 then
20991: LD_VAR 0 3
20995: PUSH
20996: LD_INT 18
20998: EQUAL
20999: IFFALSE 21009
// sLack := true ;
21001: LD_ADDR_EXP 65
21005: PUSH
21006: LD_INT 1
21008: ST_TO_ADDR
// if p3 = 19 then
21009: LD_VAR 0 3
21013: PUSH
21014: LD_INT 19
21016: EQUAL
21017: IFFALSE 21027
// sTank := true ;
21019: LD_ADDR_EXP 67
21023: PUSH
21024: LD_INT 1
21026: ST_TO_ADDR
// if p3 = 20 then
21027: LD_VAR 0 3
21031: PUSH
21032: LD_INT 20
21034: EQUAL
21035: IFFALSE 21045
// sRemote := true ;
21037: LD_ADDR_EXP 68
21041: PUSH
21042: LD_INT 1
21044: ST_TO_ADDR
// if p3 = 21 then
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 21
21052: EQUAL
21053: IFFALSE 21063
// sPowell := true ;
21055: LD_ADDR_EXP 69
21059: PUSH
21060: LD_INT 1
21062: ST_TO_ADDR
// if p3 = 22 then
21063: LD_VAR 0 3
21067: PUSH
21068: LD_INT 22
21070: EQUAL
21071: IFFALSE 21081
// sTeleport := true ;
21073: LD_ADDR_EXP 72
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// if p3 = 23 then
21081: LD_VAR 0 3
21085: PUSH
21086: LD_INT 23
21088: EQUAL
21089: IFFALSE 21099
// sOilTower := true ;
21091: LD_ADDR_EXP 74
21095: PUSH
21096: LD_INT 1
21098: ST_TO_ADDR
// if p3 = 24 then
21099: LD_VAR 0 3
21103: PUSH
21104: LD_INT 24
21106: EQUAL
21107: IFFALSE 21117
// sShovel := true ;
21109: LD_ADDR_EXP 75
21113: PUSH
21114: LD_INT 1
21116: ST_TO_ADDR
// if p3 = 25 then
21117: LD_VAR 0 3
21121: PUSH
21122: LD_INT 25
21124: EQUAL
21125: IFFALSE 21135
// sSheik := true ;
21127: LD_ADDR_EXP 76
21131: PUSH
21132: LD_INT 1
21134: ST_TO_ADDR
// if p3 = 26 then
21135: LD_VAR 0 3
21139: PUSH
21140: LD_INT 26
21142: EQUAL
21143: IFFALSE 21153
// sEarthquake := true ;
21145: LD_ADDR_EXP 78
21149: PUSH
21150: LD_INT 1
21152: ST_TO_ADDR
// if p3 = 27 then
21153: LD_VAR 0 3
21157: PUSH
21158: LD_INT 27
21160: EQUAL
21161: IFFALSE 21171
// sAI := true ;
21163: LD_ADDR_EXP 79
21167: PUSH
21168: LD_INT 1
21170: ST_TO_ADDR
// if p3 = 28 then
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 28
21178: EQUAL
21179: IFFALSE 21189
// sCargo := true ;
21181: LD_ADDR_EXP 82
21185: PUSH
21186: LD_INT 1
21188: ST_TO_ADDR
// if p3 = 29 then
21189: LD_VAR 0 3
21193: PUSH
21194: LD_INT 29
21196: EQUAL
21197: IFFALSE 21207
// sDLaser := true ;
21199: LD_ADDR_EXP 83
21203: PUSH
21204: LD_INT 1
21206: ST_TO_ADDR
// if p3 = 30 then
21207: LD_VAR 0 3
21211: PUSH
21212: LD_INT 30
21214: EQUAL
21215: IFFALSE 21225
// sExchange := true ;
21217: LD_ADDR_EXP 84
21221: PUSH
21222: LD_INT 1
21224: ST_TO_ADDR
// if p3 = 31 then
21225: LD_VAR 0 3
21229: PUSH
21230: LD_INT 31
21232: EQUAL
21233: IFFALSE 21243
// sFac := true ;
21235: LD_ADDR_EXP 85
21239: PUSH
21240: LD_INT 1
21242: ST_TO_ADDR
// if p3 = 32 then
21243: LD_VAR 0 3
21247: PUSH
21248: LD_INT 32
21250: EQUAL
21251: IFFALSE 21261
// sPower := true ;
21253: LD_ADDR_EXP 86
21257: PUSH
21258: LD_INT 1
21260: ST_TO_ADDR
// if p3 = 33 then
21261: LD_VAR 0 3
21265: PUSH
21266: LD_INT 33
21268: EQUAL
21269: IFFALSE 21279
// sRandom := true ;
21271: LD_ADDR_EXP 87
21275: PUSH
21276: LD_INT 1
21278: ST_TO_ADDR
// if p3 = 34 then
21279: LD_VAR 0 3
21283: PUSH
21284: LD_INT 34
21286: EQUAL
21287: IFFALSE 21297
// sShield := true ;
21289: LD_ADDR_EXP 88
21293: PUSH
21294: LD_INT 1
21296: ST_TO_ADDR
// if p3 = 35 then
21297: LD_VAR 0 3
21301: PUSH
21302: LD_INT 35
21304: EQUAL
21305: IFFALSE 21315
// sTime := true ;
21307: LD_ADDR_EXP 89
21311: PUSH
21312: LD_INT 1
21314: ST_TO_ADDR
// if p3 = 36 then
21315: LD_VAR 0 3
21319: PUSH
21320: LD_INT 36
21322: EQUAL
21323: IFFALSE 21333
// sTools := true ;
21325: LD_ADDR_EXP 90
21329: PUSH
21330: LD_INT 1
21332: ST_TO_ADDR
// if p3 = 101 then
21333: LD_VAR 0 3
21337: PUSH
21338: LD_INT 101
21340: EQUAL
21341: IFFALSE 21351
// sSold := true ;
21343: LD_ADDR_EXP 55
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// if p3 = 102 then
21351: LD_VAR 0 3
21355: PUSH
21356: LD_INT 102
21358: EQUAL
21359: IFFALSE 21369
// sDiff := true ;
21361: LD_ADDR_EXP 56
21365: PUSH
21366: LD_INT 1
21368: ST_TO_ADDR
// if p3 = 103 then
21369: LD_VAR 0 3
21373: PUSH
21374: LD_INT 103
21376: EQUAL
21377: IFFALSE 21387
// sFog := true ;
21379: LD_ADDR_EXP 59
21383: PUSH
21384: LD_INT 1
21386: ST_TO_ADDR
// if p3 = 104 then
21387: LD_VAR 0 3
21391: PUSH
21392: LD_INT 104
21394: EQUAL
21395: IFFALSE 21405
// sReset := true ;
21397: LD_ADDR_EXP 60
21401: PUSH
21402: LD_INT 1
21404: ST_TO_ADDR
// if p3 = 105 then
21405: LD_VAR 0 3
21409: PUSH
21410: LD_INT 105
21412: EQUAL
21413: IFFALSE 21423
// sSun := true ;
21415: LD_ADDR_EXP 61
21419: PUSH
21420: LD_INT 1
21422: ST_TO_ADDR
// if p3 = 106 then
21423: LD_VAR 0 3
21427: PUSH
21428: LD_INT 106
21430: EQUAL
21431: IFFALSE 21441
// sTiger := true ;
21433: LD_ADDR_EXP 57
21437: PUSH
21438: LD_INT 1
21440: ST_TO_ADDR
// if p3 = 107 then
21441: LD_VAR 0 3
21445: PUSH
21446: LD_INT 107
21448: EQUAL
21449: IFFALSE 21459
// sBomb := true ;
21451: LD_ADDR_EXP 58
21455: PUSH
21456: LD_INT 1
21458: ST_TO_ADDR
// if p3 = 108 then
21459: LD_VAR 0 3
21463: PUSH
21464: LD_INT 108
21466: EQUAL
21467: IFFALSE 21477
// sWound := true ;
21469: LD_ADDR_EXP 66
21473: PUSH
21474: LD_INT 1
21476: ST_TO_ADDR
// if p3 = 109 then
21477: LD_VAR 0 3
21481: PUSH
21482: LD_INT 109
21484: EQUAL
21485: IFFALSE 21495
// sBetray := true ;
21487: LD_ADDR_EXP 70
21491: PUSH
21492: LD_INT 1
21494: ST_TO_ADDR
// if p3 = 110 then
21495: LD_VAR 0 3
21499: PUSH
21500: LD_INT 110
21502: EQUAL
21503: IFFALSE 21513
// sContamin := true ;
21505: LD_ADDR_EXP 71
21509: PUSH
21510: LD_INT 1
21512: ST_TO_ADDR
// if p3 = 111 then
21513: LD_VAR 0 3
21517: PUSH
21518: LD_INT 111
21520: EQUAL
21521: IFFALSE 21531
// sOil := true ;
21523: LD_ADDR_EXP 73
21527: PUSH
21528: LD_INT 1
21530: ST_TO_ADDR
// if p3 = 112 then
21531: LD_VAR 0 3
21535: PUSH
21536: LD_INT 112
21538: EQUAL
21539: IFFALSE 21549
// sStu := true ;
21541: LD_ADDR_EXP 77
21545: PUSH
21546: LD_INT 1
21548: ST_TO_ADDR
// if p3 = 113 then
21549: LD_VAR 0 3
21553: PUSH
21554: LD_INT 113
21556: EQUAL
21557: IFFALSE 21567
// sBazooka := true ;
21559: LD_ADDR_EXP 80
21563: PUSH
21564: LD_INT 1
21566: ST_TO_ADDR
// if p3 = 114 then
21567: LD_VAR 0 3
21571: PUSH
21572: LD_INT 114
21574: EQUAL
21575: IFFALSE 21585
// sMortar := true ;
21577: LD_ADDR_EXP 81
21581: PUSH
21582: LD_INT 1
21584: ST_TO_ADDR
// if p3 = 115 then
21585: LD_VAR 0 3
21589: PUSH
21590: LD_INT 115
21592: EQUAL
21593: IFFALSE 21603
// sRanger := true ;
21595: LD_ADDR_EXP 91
21599: PUSH
21600: LD_INT 1
21602: ST_TO_ADDR
// if p3 = 116 then
21603: LD_VAR 0 3
21607: PUSH
21608: LD_INT 116
21610: EQUAL
21611: IFFALSE 21621
// sComputer := true ;
21613: LD_ADDR_EXP 92
21617: PUSH
21618: LD_INT 1
21620: ST_TO_ADDR
// if p3 = 117 then
21621: LD_VAR 0 3
21625: PUSH
21626: LD_INT 117
21628: EQUAL
21629: IFFALSE 21639
// s30 := true ;
21631: LD_ADDR_EXP 93
21635: PUSH
21636: LD_INT 1
21638: ST_TO_ADDR
// if p3 = 118 then
21639: LD_VAR 0 3
21643: PUSH
21644: LD_INT 118
21646: EQUAL
21647: IFFALSE 21657
// s60 := true ;
21649: LD_ADDR_EXP 94
21653: PUSH
21654: LD_INT 1
21656: ST_TO_ADDR
// end ; if p2 = hack_mode then
21657: LD_VAR 0 2
21661: PUSH
21662: LD_INT 101
21664: EQUAL
21665: IFFALSE 21793
// begin case p3 of 1 :
21667: LD_VAR 0 3
21671: PUSH
21672: LD_INT 1
21674: DOUBLE
21675: EQUAL
21676: IFTRUE 21680
21678: GO 21687
21680: POP
// hHackUnlimitedResources ; 2 :
21681: CALL 33940 0 0
21685: GO 21793
21687: LD_INT 2
21689: DOUBLE
21690: EQUAL
21691: IFTRUE 21695
21693: GO 21702
21695: POP
// hHackSetLevel10 ; 3 :
21696: CALL 34073 0 0
21700: GO 21793
21702: LD_INT 3
21704: DOUBLE
21705: EQUAL
21706: IFTRUE 21710
21708: GO 21717
21710: POP
// hHackSetLevel10YourUnits ; 4 :
21711: CALL 34158 0 0
21715: GO 21793
21717: LD_INT 4
21719: DOUBLE
21720: EQUAL
21721: IFTRUE 21725
21723: GO 21732
21725: POP
// hHackInvincible ; 5 :
21726: CALL 34606 0 0
21730: GO 21793
21732: LD_INT 5
21734: DOUBLE
21735: EQUAL
21736: IFTRUE 21740
21738: GO 21747
21740: POP
// hHackInvisible ; 6 :
21741: CALL 34717 0 0
21745: GO 21793
21747: LD_INT 6
21749: DOUBLE
21750: EQUAL
21751: IFTRUE 21755
21753: GO 21762
21755: POP
// hHackChangeYourSide ; 7 :
21756: CALL 34774 0 0
21760: GO 21793
21762: LD_INT 7
21764: DOUBLE
21765: EQUAL
21766: IFTRUE 21770
21768: GO 21777
21770: POP
// hHackChangeUnitSide ; 8 :
21771: CALL 34816 0 0
21775: GO 21793
21777: LD_INT 8
21779: DOUBLE
21780: EQUAL
21781: IFTRUE 21785
21783: GO 21792
21785: POP
// hHackFog ; end ;
21786: CALL 34917 0 0
21790: GO 21793
21792: POP
// end ; if p2 = game_save_mode then
21793: LD_VAR 0 2
21797: PUSH
21798: LD_INT 102
21800: EQUAL
21801: IFFALSE 21856
// begin if p3 = 1 then
21803: LD_VAR 0 3
21807: PUSH
21808: LD_INT 1
21810: EQUAL
21811: IFFALSE 21823
// globalGameSaveCounter := p4 ;
21813: LD_ADDR_EXP 37
21817: PUSH
21818: LD_VAR 0 4
21822: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21823: LD_VAR 0 3
21827: PUSH
21828: LD_INT 2
21830: EQUAL
21831: PUSH
21832: LD_EXP 37
21836: AND
21837: IFFALSE 21856
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21839: LD_STRING setGameSaveCounter(
21841: PUSH
21842: LD_EXP 37
21846: STR
21847: PUSH
21848: LD_STRING )
21850: STR
21851: PPUSH
21852: CALL_OW 559
// end ; end ;
21856: LD_VAR 0 7
21860: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21861: LD_INT 0
21863: PPUSH
// streamModeActive := false ;
21864: LD_ADDR_EXP 38
21868: PUSH
21869: LD_INT 0
21871: ST_TO_ADDR
// normalCounter := 36 ;
21872: LD_ADDR_EXP 39
21876: PUSH
21877: LD_INT 36
21879: ST_TO_ADDR
// hardcoreCounter := 18 ;
21880: LD_ADDR_EXP 40
21884: PUSH
21885: LD_INT 18
21887: ST_TO_ADDR
// sRocket := false ;
21888: LD_ADDR_EXP 43
21892: PUSH
21893: LD_INT 0
21895: ST_TO_ADDR
// sSpeed := false ;
21896: LD_ADDR_EXP 42
21900: PUSH
21901: LD_INT 0
21903: ST_TO_ADDR
// sEngine := false ;
21904: LD_ADDR_EXP 44
21908: PUSH
21909: LD_INT 0
21911: ST_TO_ADDR
// sSpec := false ;
21912: LD_ADDR_EXP 41
21916: PUSH
21917: LD_INT 0
21919: ST_TO_ADDR
// sLevel := false ;
21920: LD_ADDR_EXP 45
21924: PUSH
21925: LD_INT 0
21927: ST_TO_ADDR
// sArmoury := false ;
21928: LD_ADDR_EXP 46
21932: PUSH
21933: LD_INT 0
21935: ST_TO_ADDR
// sRadar := false ;
21936: LD_ADDR_EXP 47
21940: PUSH
21941: LD_INT 0
21943: ST_TO_ADDR
// sBunker := false ;
21944: LD_ADDR_EXP 48
21948: PUSH
21949: LD_INT 0
21951: ST_TO_ADDR
// sHack := false ;
21952: LD_ADDR_EXP 49
21956: PUSH
21957: LD_INT 0
21959: ST_TO_ADDR
// sFire := false ;
21960: LD_ADDR_EXP 50
21964: PUSH
21965: LD_INT 0
21967: ST_TO_ADDR
// sRefresh := false ;
21968: LD_ADDR_EXP 51
21972: PUSH
21973: LD_INT 0
21975: ST_TO_ADDR
// sExp := false ;
21976: LD_ADDR_EXP 52
21980: PUSH
21981: LD_INT 0
21983: ST_TO_ADDR
// sDepot := false ;
21984: LD_ADDR_EXP 53
21988: PUSH
21989: LD_INT 0
21991: ST_TO_ADDR
// sFlag := false ;
21992: LD_ADDR_EXP 54
21996: PUSH
21997: LD_INT 0
21999: ST_TO_ADDR
// sKamikadze := false ;
22000: LD_ADDR_EXP 62
22004: PUSH
22005: LD_INT 0
22007: ST_TO_ADDR
// sTroll := false ;
22008: LD_ADDR_EXP 63
22012: PUSH
22013: LD_INT 0
22015: ST_TO_ADDR
// sSlow := false ;
22016: LD_ADDR_EXP 64
22020: PUSH
22021: LD_INT 0
22023: ST_TO_ADDR
// sLack := false ;
22024: LD_ADDR_EXP 65
22028: PUSH
22029: LD_INT 0
22031: ST_TO_ADDR
// sTank := false ;
22032: LD_ADDR_EXP 67
22036: PUSH
22037: LD_INT 0
22039: ST_TO_ADDR
// sRemote := false ;
22040: LD_ADDR_EXP 68
22044: PUSH
22045: LD_INT 0
22047: ST_TO_ADDR
// sPowell := false ;
22048: LD_ADDR_EXP 69
22052: PUSH
22053: LD_INT 0
22055: ST_TO_ADDR
// sTeleport := false ;
22056: LD_ADDR_EXP 72
22060: PUSH
22061: LD_INT 0
22063: ST_TO_ADDR
// sOilTower := false ;
22064: LD_ADDR_EXP 74
22068: PUSH
22069: LD_INT 0
22071: ST_TO_ADDR
// sShovel := false ;
22072: LD_ADDR_EXP 75
22076: PUSH
22077: LD_INT 0
22079: ST_TO_ADDR
// sSheik := false ;
22080: LD_ADDR_EXP 76
22084: PUSH
22085: LD_INT 0
22087: ST_TO_ADDR
// sEarthquake := false ;
22088: LD_ADDR_EXP 78
22092: PUSH
22093: LD_INT 0
22095: ST_TO_ADDR
// sAI := false ;
22096: LD_ADDR_EXP 79
22100: PUSH
22101: LD_INT 0
22103: ST_TO_ADDR
// sCargo := false ;
22104: LD_ADDR_EXP 82
22108: PUSH
22109: LD_INT 0
22111: ST_TO_ADDR
// sDLaser := false ;
22112: LD_ADDR_EXP 83
22116: PUSH
22117: LD_INT 0
22119: ST_TO_ADDR
// sExchange := false ;
22120: LD_ADDR_EXP 84
22124: PUSH
22125: LD_INT 0
22127: ST_TO_ADDR
// sFac := false ;
22128: LD_ADDR_EXP 85
22132: PUSH
22133: LD_INT 0
22135: ST_TO_ADDR
// sPower := false ;
22136: LD_ADDR_EXP 86
22140: PUSH
22141: LD_INT 0
22143: ST_TO_ADDR
// sRandom := false ;
22144: LD_ADDR_EXP 87
22148: PUSH
22149: LD_INT 0
22151: ST_TO_ADDR
// sShield := false ;
22152: LD_ADDR_EXP 88
22156: PUSH
22157: LD_INT 0
22159: ST_TO_ADDR
// sTime := false ;
22160: LD_ADDR_EXP 89
22164: PUSH
22165: LD_INT 0
22167: ST_TO_ADDR
// sTools := false ;
22168: LD_ADDR_EXP 90
22172: PUSH
22173: LD_INT 0
22175: ST_TO_ADDR
// sSold := false ;
22176: LD_ADDR_EXP 55
22180: PUSH
22181: LD_INT 0
22183: ST_TO_ADDR
// sDiff := false ;
22184: LD_ADDR_EXP 56
22188: PUSH
22189: LD_INT 0
22191: ST_TO_ADDR
// sFog := false ;
22192: LD_ADDR_EXP 59
22196: PUSH
22197: LD_INT 0
22199: ST_TO_ADDR
// sReset := false ;
22200: LD_ADDR_EXP 60
22204: PUSH
22205: LD_INT 0
22207: ST_TO_ADDR
// sSun := false ;
22208: LD_ADDR_EXP 61
22212: PUSH
22213: LD_INT 0
22215: ST_TO_ADDR
// sTiger := false ;
22216: LD_ADDR_EXP 57
22220: PUSH
22221: LD_INT 0
22223: ST_TO_ADDR
// sBomb := false ;
22224: LD_ADDR_EXP 58
22228: PUSH
22229: LD_INT 0
22231: ST_TO_ADDR
// sWound := false ;
22232: LD_ADDR_EXP 66
22236: PUSH
22237: LD_INT 0
22239: ST_TO_ADDR
// sBetray := false ;
22240: LD_ADDR_EXP 70
22244: PUSH
22245: LD_INT 0
22247: ST_TO_ADDR
// sContamin := false ;
22248: LD_ADDR_EXP 71
22252: PUSH
22253: LD_INT 0
22255: ST_TO_ADDR
// sOil := false ;
22256: LD_ADDR_EXP 73
22260: PUSH
22261: LD_INT 0
22263: ST_TO_ADDR
// sStu := false ;
22264: LD_ADDR_EXP 77
22268: PUSH
22269: LD_INT 0
22271: ST_TO_ADDR
// sBazooka := false ;
22272: LD_ADDR_EXP 80
22276: PUSH
22277: LD_INT 0
22279: ST_TO_ADDR
// sMortar := false ;
22280: LD_ADDR_EXP 81
22284: PUSH
22285: LD_INT 0
22287: ST_TO_ADDR
// sRanger := false ;
22288: LD_ADDR_EXP 91
22292: PUSH
22293: LD_INT 0
22295: ST_TO_ADDR
// sComputer := false ;
22296: LD_ADDR_EXP 92
22300: PUSH
22301: LD_INT 0
22303: ST_TO_ADDR
// s30 := false ;
22304: LD_ADDR_EXP 93
22308: PUSH
22309: LD_INT 0
22311: ST_TO_ADDR
// s60 := false ;
22312: LD_ADDR_EXP 94
22316: PUSH
22317: LD_INT 0
22319: ST_TO_ADDR
// end ;
22320: LD_VAR 0 1
22324: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22325: LD_INT 0
22327: PPUSH
22328: PPUSH
22329: PPUSH
22330: PPUSH
22331: PPUSH
22332: PPUSH
22333: PPUSH
// result := [ ] ;
22334: LD_ADDR_VAR 0 2
22338: PUSH
22339: EMPTY
22340: ST_TO_ADDR
// if campaign_id = 1 then
22341: LD_OWVAR 69
22345: PUSH
22346: LD_INT 1
22348: EQUAL
22349: IFFALSE 25515
// begin case mission_number of 1 :
22351: LD_OWVAR 70
22355: PUSH
22356: LD_INT 1
22358: DOUBLE
22359: EQUAL
22360: IFTRUE 22364
22362: GO 22440
22364: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22365: LD_ADDR_VAR 0 2
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 4
22375: PUSH
22376: LD_INT 11
22378: PUSH
22379: LD_INT 12
22381: PUSH
22382: LD_INT 15
22384: PUSH
22385: LD_INT 16
22387: PUSH
22388: LD_INT 22
22390: PUSH
22391: LD_INT 23
22393: PUSH
22394: LD_INT 26
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 101
22410: PUSH
22411: LD_INT 102
22413: PUSH
22414: LD_INT 106
22416: PUSH
22417: LD_INT 116
22419: PUSH
22420: LD_INT 117
22422: PUSH
22423: LD_INT 118
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: ST_TO_ADDR
22438: GO 25513
22440: LD_INT 2
22442: DOUBLE
22443: EQUAL
22444: IFTRUE 22448
22446: GO 22532
22448: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22449: LD_ADDR_VAR 0 2
22453: PUSH
22454: LD_INT 2
22456: PUSH
22457: LD_INT 4
22459: PUSH
22460: LD_INT 11
22462: PUSH
22463: LD_INT 12
22465: PUSH
22466: LD_INT 15
22468: PUSH
22469: LD_INT 16
22471: PUSH
22472: LD_INT 22
22474: PUSH
22475: LD_INT 23
22477: PUSH
22478: LD_INT 26
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 101
22494: PUSH
22495: LD_INT 102
22497: PUSH
22498: LD_INT 105
22500: PUSH
22501: LD_INT 106
22503: PUSH
22504: LD_INT 108
22506: PUSH
22507: LD_INT 116
22509: PUSH
22510: LD_INT 117
22512: PUSH
22513: LD_INT 118
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: ST_TO_ADDR
22530: GO 25513
22532: LD_INT 3
22534: DOUBLE
22535: EQUAL
22536: IFTRUE 22540
22538: GO 22628
22540: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22541: LD_ADDR_VAR 0 2
22545: PUSH
22546: LD_INT 2
22548: PUSH
22549: LD_INT 4
22551: PUSH
22552: LD_INT 5
22554: PUSH
22555: LD_INT 11
22557: PUSH
22558: LD_INT 12
22560: PUSH
22561: LD_INT 15
22563: PUSH
22564: LD_INT 16
22566: PUSH
22567: LD_INT 22
22569: PUSH
22570: LD_INT 26
22572: PUSH
22573: LD_INT 36
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 101
22590: PUSH
22591: LD_INT 102
22593: PUSH
22594: LD_INT 105
22596: PUSH
22597: LD_INT 106
22599: PUSH
22600: LD_INT 108
22602: PUSH
22603: LD_INT 116
22605: PUSH
22606: LD_INT 117
22608: PUSH
22609: LD_INT 118
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: ST_TO_ADDR
22626: GO 25513
22628: LD_INT 4
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22732
22636: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 2
22644: PUSH
22645: LD_INT 4
22647: PUSH
22648: LD_INT 5
22650: PUSH
22651: LD_INT 8
22653: PUSH
22654: LD_INT 11
22656: PUSH
22657: LD_INT 12
22659: PUSH
22660: LD_INT 15
22662: PUSH
22663: LD_INT 16
22665: PUSH
22666: LD_INT 22
22668: PUSH
22669: LD_INT 23
22671: PUSH
22672: LD_INT 26
22674: PUSH
22675: LD_INT 36
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 101
22694: PUSH
22695: LD_INT 102
22697: PUSH
22698: LD_INT 105
22700: PUSH
22701: LD_INT 106
22703: PUSH
22704: LD_INT 108
22706: PUSH
22707: LD_INT 116
22709: PUSH
22710: LD_INT 117
22712: PUSH
22713: LD_INT 118
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: ST_TO_ADDR
22730: GO 25513
22732: LD_INT 5
22734: DOUBLE
22735: EQUAL
22736: IFTRUE 22740
22738: GO 22852
22740: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22741: LD_ADDR_VAR 0 2
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 4
22751: PUSH
22752: LD_INT 5
22754: PUSH
22755: LD_INT 6
22757: PUSH
22758: LD_INT 8
22760: PUSH
22761: LD_INT 11
22763: PUSH
22764: LD_INT 12
22766: PUSH
22767: LD_INT 15
22769: PUSH
22770: LD_INT 16
22772: PUSH
22773: LD_INT 22
22775: PUSH
22776: LD_INT 23
22778: PUSH
22779: LD_INT 25
22781: PUSH
22782: LD_INT 26
22784: PUSH
22785: LD_INT 36
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 101
22806: PUSH
22807: LD_INT 102
22809: PUSH
22810: LD_INT 105
22812: PUSH
22813: LD_INT 106
22815: PUSH
22816: LD_INT 108
22818: PUSH
22819: LD_INT 109
22821: PUSH
22822: LD_INT 112
22824: PUSH
22825: LD_INT 116
22827: PUSH
22828: LD_INT 117
22830: PUSH
22831: LD_INT 118
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: ST_TO_ADDR
22850: GO 25513
22852: LD_INT 6
22854: DOUBLE
22855: EQUAL
22856: IFTRUE 22860
22858: GO 22992
22860: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22861: LD_ADDR_VAR 0 2
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: LD_INT 4
22871: PUSH
22872: LD_INT 5
22874: PUSH
22875: LD_INT 6
22877: PUSH
22878: LD_INT 8
22880: PUSH
22881: LD_INT 11
22883: PUSH
22884: LD_INT 12
22886: PUSH
22887: LD_INT 15
22889: PUSH
22890: LD_INT 16
22892: PUSH
22893: LD_INT 20
22895: PUSH
22896: LD_INT 21
22898: PUSH
22899: LD_INT 22
22901: PUSH
22902: LD_INT 23
22904: PUSH
22905: LD_INT 25
22907: PUSH
22908: LD_INT 26
22910: PUSH
22911: LD_INT 30
22913: PUSH
22914: LD_INT 31
22916: PUSH
22917: LD_INT 32
22919: PUSH
22920: LD_INT 36
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 101
22946: PUSH
22947: LD_INT 102
22949: PUSH
22950: LD_INT 105
22952: PUSH
22953: LD_INT 106
22955: PUSH
22956: LD_INT 108
22958: PUSH
22959: LD_INT 109
22961: PUSH
22962: LD_INT 112
22964: PUSH
22965: LD_INT 116
22967: PUSH
22968: LD_INT 117
22970: PUSH
22971: LD_INT 118
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: ST_TO_ADDR
22990: GO 25513
22992: LD_INT 7
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23112
23000: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23001: LD_ADDR_VAR 0 2
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: LD_INT 4
23011: PUSH
23012: LD_INT 5
23014: PUSH
23015: LD_INT 7
23017: PUSH
23018: LD_INT 11
23020: PUSH
23021: LD_INT 12
23023: PUSH
23024: LD_INT 15
23026: PUSH
23027: LD_INT 16
23029: PUSH
23030: LD_INT 20
23032: PUSH
23033: LD_INT 21
23035: PUSH
23036: LD_INT 22
23038: PUSH
23039: LD_INT 23
23041: PUSH
23042: LD_INT 25
23044: PUSH
23045: LD_INT 26
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 101
23066: PUSH
23067: LD_INT 102
23069: PUSH
23070: LD_INT 103
23072: PUSH
23073: LD_INT 105
23075: PUSH
23076: LD_INT 106
23078: PUSH
23079: LD_INT 108
23081: PUSH
23082: LD_INT 112
23084: PUSH
23085: LD_INT 116
23087: PUSH
23088: LD_INT 117
23090: PUSH
23091: LD_INT 118
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: ST_TO_ADDR
23110: GO 25513
23112: LD_INT 8
23114: DOUBLE
23115: EQUAL
23116: IFTRUE 23120
23118: GO 23260
23120: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23121: LD_ADDR_VAR 0 2
23125: PUSH
23126: LD_INT 2
23128: PUSH
23129: LD_INT 4
23131: PUSH
23132: LD_INT 5
23134: PUSH
23135: LD_INT 6
23137: PUSH
23138: LD_INT 7
23140: PUSH
23141: LD_INT 8
23143: PUSH
23144: LD_INT 11
23146: PUSH
23147: LD_INT 12
23149: PUSH
23150: LD_INT 15
23152: PUSH
23153: LD_INT 16
23155: PUSH
23156: LD_INT 20
23158: PUSH
23159: LD_INT 21
23161: PUSH
23162: LD_INT 22
23164: PUSH
23165: LD_INT 23
23167: PUSH
23168: LD_INT 25
23170: PUSH
23171: LD_INT 26
23173: PUSH
23174: LD_INT 30
23176: PUSH
23177: LD_INT 31
23179: PUSH
23180: LD_INT 32
23182: PUSH
23183: LD_INT 36
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 101
23210: PUSH
23211: LD_INT 102
23213: PUSH
23214: LD_INT 103
23216: PUSH
23217: LD_INT 105
23219: PUSH
23220: LD_INT 106
23222: PUSH
23223: LD_INT 108
23225: PUSH
23226: LD_INT 109
23228: PUSH
23229: LD_INT 112
23231: PUSH
23232: LD_INT 116
23234: PUSH
23235: LD_INT 117
23237: PUSH
23238: LD_INT 118
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: ST_TO_ADDR
23258: GO 25513
23260: LD_INT 9
23262: DOUBLE
23263: EQUAL
23264: IFTRUE 23268
23266: GO 23416
23268: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23269: LD_ADDR_VAR 0 2
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: LD_INT 4
23279: PUSH
23280: LD_INT 5
23282: PUSH
23283: LD_INT 6
23285: PUSH
23286: LD_INT 7
23288: PUSH
23289: LD_INT 8
23291: PUSH
23292: LD_INT 11
23294: PUSH
23295: LD_INT 12
23297: PUSH
23298: LD_INT 15
23300: PUSH
23301: LD_INT 16
23303: PUSH
23304: LD_INT 20
23306: PUSH
23307: LD_INT 21
23309: PUSH
23310: LD_INT 22
23312: PUSH
23313: LD_INT 23
23315: PUSH
23316: LD_INT 25
23318: PUSH
23319: LD_INT 26
23321: PUSH
23322: LD_INT 28
23324: PUSH
23325: LD_INT 30
23327: PUSH
23328: LD_INT 31
23330: PUSH
23331: LD_INT 32
23333: PUSH
23334: LD_INT 36
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 101
23362: PUSH
23363: LD_INT 102
23365: PUSH
23366: LD_INT 103
23368: PUSH
23369: LD_INT 105
23371: PUSH
23372: LD_INT 106
23374: PUSH
23375: LD_INT 108
23377: PUSH
23378: LD_INT 109
23380: PUSH
23381: LD_INT 112
23383: PUSH
23384: LD_INT 114
23386: PUSH
23387: LD_INT 116
23389: PUSH
23390: LD_INT 117
23392: PUSH
23393: LD_INT 118
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: ST_TO_ADDR
23414: GO 25513
23416: LD_INT 10
23418: DOUBLE
23419: EQUAL
23420: IFTRUE 23424
23422: GO 23620
23424: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23425: LD_ADDR_VAR 0 2
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: LD_INT 4
23435: PUSH
23436: LD_INT 5
23438: PUSH
23439: LD_INT 6
23441: PUSH
23442: LD_INT 7
23444: PUSH
23445: LD_INT 8
23447: PUSH
23448: LD_INT 9
23450: PUSH
23451: LD_INT 10
23453: PUSH
23454: LD_INT 11
23456: PUSH
23457: LD_INT 12
23459: PUSH
23460: LD_INT 13
23462: PUSH
23463: LD_INT 14
23465: PUSH
23466: LD_INT 15
23468: PUSH
23469: LD_INT 16
23471: PUSH
23472: LD_INT 17
23474: PUSH
23475: LD_INT 18
23477: PUSH
23478: LD_INT 19
23480: PUSH
23481: LD_INT 20
23483: PUSH
23484: LD_INT 21
23486: PUSH
23487: LD_INT 22
23489: PUSH
23490: LD_INT 23
23492: PUSH
23493: LD_INT 24
23495: PUSH
23496: LD_INT 25
23498: PUSH
23499: LD_INT 26
23501: PUSH
23502: LD_INT 28
23504: PUSH
23505: LD_INT 30
23507: PUSH
23508: LD_INT 31
23510: PUSH
23511: LD_INT 32
23513: PUSH
23514: LD_INT 36
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 101
23550: PUSH
23551: LD_INT 102
23553: PUSH
23554: LD_INT 103
23556: PUSH
23557: LD_INT 104
23559: PUSH
23560: LD_INT 105
23562: PUSH
23563: LD_INT 106
23565: PUSH
23566: LD_INT 107
23568: PUSH
23569: LD_INT 108
23571: PUSH
23572: LD_INT 109
23574: PUSH
23575: LD_INT 110
23577: PUSH
23578: LD_INT 111
23580: PUSH
23581: LD_INT 112
23583: PUSH
23584: LD_INT 114
23586: PUSH
23587: LD_INT 116
23589: PUSH
23590: LD_INT 117
23592: PUSH
23593: LD_INT 118
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: ST_TO_ADDR
23618: GO 25513
23620: LD_INT 11
23622: DOUBLE
23623: EQUAL
23624: IFTRUE 23628
23626: GO 23832
23628: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: LD_INT 2
23636: PUSH
23637: LD_INT 3
23639: PUSH
23640: LD_INT 4
23642: PUSH
23643: LD_INT 5
23645: PUSH
23646: LD_INT 6
23648: PUSH
23649: LD_INT 7
23651: PUSH
23652: LD_INT 8
23654: PUSH
23655: LD_INT 9
23657: PUSH
23658: LD_INT 10
23660: PUSH
23661: LD_INT 11
23663: PUSH
23664: LD_INT 12
23666: PUSH
23667: LD_INT 13
23669: PUSH
23670: LD_INT 14
23672: PUSH
23673: LD_INT 15
23675: PUSH
23676: LD_INT 16
23678: PUSH
23679: LD_INT 17
23681: PUSH
23682: LD_INT 18
23684: PUSH
23685: LD_INT 19
23687: PUSH
23688: LD_INT 20
23690: PUSH
23691: LD_INT 21
23693: PUSH
23694: LD_INT 22
23696: PUSH
23697: LD_INT 23
23699: PUSH
23700: LD_INT 24
23702: PUSH
23703: LD_INT 25
23705: PUSH
23706: LD_INT 26
23708: PUSH
23709: LD_INT 28
23711: PUSH
23712: LD_INT 30
23714: PUSH
23715: LD_INT 31
23717: PUSH
23718: LD_INT 32
23720: PUSH
23721: LD_INT 34
23723: PUSH
23724: LD_INT 36
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 101
23762: PUSH
23763: LD_INT 102
23765: PUSH
23766: LD_INT 103
23768: PUSH
23769: LD_INT 104
23771: PUSH
23772: LD_INT 105
23774: PUSH
23775: LD_INT 106
23777: PUSH
23778: LD_INT 107
23780: PUSH
23781: LD_INT 108
23783: PUSH
23784: LD_INT 109
23786: PUSH
23787: LD_INT 110
23789: PUSH
23790: LD_INT 111
23792: PUSH
23793: LD_INT 112
23795: PUSH
23796: LD_INT 114
23798: PUSH
23799: LD_INT 116
23801: PUSH
23802: LD_INT 117
23804: PUSH
23805: LD_INT 118
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: ST_TO_ADDR
23830: GO 25513
23832: LD_INT 12
23834: DOUBLE
23835: EQUAL
23836: IFTRUE 23840
23838: GO 24060
23840: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23841: LD_ADDR_VAR 0 2
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: LD_INT 3
23854: PUSH
23855: LD_INT 4
23857: PUSH
23858: LD_INT 5
23860: PUSH
23861: LD_INT 6
23863: PUSH
23864: LD_INT 7
23866: PUSH
23867: LD_INT 8
23869: PUSH
23870: LD_INT 9
23872: PUSH
23873: LD_INT 10
23875: PUSH
23876: LD_INT 11
23878: PUSH
23879: LD_INT 12
23881: PUSH
23882: LD_INT 13
23884: PUSH
23885: LD_INT 14
23887: PUSH
23888: LD_INT 15
23890: PUSH
23891: LD_INT 16
23893: PUSH
23894: LD_INT 17
23896: PUSH
23897: LD_INT 18
23899: PUSH
23900: LD_INT 19
23902: PUSH
23903: LD_INT 20
23905: PUSH
23906: LD_INT 21
23908: PUSH
23909: LD_INT 22
23911: PUSH
23912: LD_INT 23
23914: PUSH
23915: LD_INT 24
23917: PUSH
23918: LD_INT 25
23920: PUSH
23921: LD_INT 26
23923: PUSH
23924: LD_INT 27
23926: PUSH
23927: LD_INT 28
23929: PUSH
23930: LD_INT 30
23932: PUSH
23933: LD_INT 31
23935: PUSH
23936: LD_INT 32
23938: PUSH
23939: LD_INT 33
23941: PUSH
23942: LD_INT 34
23944: PUSH
23945: LD_INT 36
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 101
23986: PUSH
23987: LD_INT 102
23989: PUSH
23990: LD_INT 103
23992: PUSH
23993: LD_INT 104
23995: PUSH
23996: LD_INT 105
23998: PUSH
23999: LD_INT 106
24001: PUSH
24002: LD_INT 107
24004: PUSH
24005: LD_INT 108
24007: PUSH
24008: LD_INT 109
24010: PUSH
24011: LD_INT 110
24013: PUSH
24014: LD_INT 111
24016: PUSH
24017: LD_INT 112
24019: PUSH
24020: LD_INT 113
24022: PUSH
24023: LD_INT 114
24025: PUSH
24026: LD_INT 116
24028: PUSH
24029: LD_INT 117
24031: PUSH
24032: LD_INT 118
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: ST_TO_ADDR
24058: GO 25513
24060: LD_INT 13
24062: DOUBLE
24063: EQUAL
24064: IFTRUE 24068
24066: GO 24276
24068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24069: LD_ADDR_VAR 0 2
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 2
24079: PUSH
24080: LD_INT 3
24082: PUSH
24083: LD_INT 4
24085: PUSH
24086: LD_INT 5
24088: PUSH
24089: LD_INT 8
24091: PUSH
24092: LD_INT 9
24094: PUSH
24095: LD_INT 10
24097: PUSH
24098: LD_INT 11
24100: PUSH
24101: LD_INT 12
24103: PUSH
24104: LD_INT 14
24106: PUSH
24107: LD_INT 15
24109: PUSH
24110: LD_INT 16
24112: PUSH
24113: LD_INT 17
24115: PUSH
24116: LD_INT 18
24118: PUSH
24119: LD_INT 19
24121: PUSH
24122: LD_INT 20
24124: PUSH
24125: LD_INT 21
24127: PUSH
24128: LD_INT 22
24130: PUSH
24131: LD_INT 23
24133: PUSH
24134: LD_INT 24
24136: PUSH
24137: LD_INT 25
24139: PUSH
24140: LD_INT 26
24142: PUSH
24143: LD_INT 27
24145: PUSH
24146: LD_INT 28
24148: PUSH
24149: LD_INT 30
24151: PUSH
24152: LD_INT 31
24154: PUSH
24155: LD_INT 32
24157: PUSH
24158: LD_INT 33
24160: PUSH
24161: LD_INT 34
24163: PUSH
24164: LD_INT 36
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 101
24202: PUSH
24203: LD_INT 102
24205: PUSH
24206: LD_INT 103
24208: PUSH
24209: LD_INT 104
24211: PUSH
24212: LD_INT 105
24214: PUSH
24215: LD_INT 106
24217: PUSH
24218: LD_INT 107
24220: PUSH
24221: LD_INT 108
24223: PUSH
24224: LD_INT 109
24226: PUSH
24227: LD_INT 110
24229: PUSH
24230: LD_INT 111
24232: PUSH
24233: LD_INT 112
24235: PUSH
24236: LD_INT 113
24238: PUSH
24239: LD_INT 114
24241: PUSH
24242: LD_INT 116
24244: PUSH
24245: LD_INT 117
24247: PUSH
24248: LD_INT 118
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: ST_TO_ADDR
24274: GO 25513
24276: LD_INT 14
24278: DOUBLE
24279: EQUAL
24280: IFTRUE 24284
24282: GO 24508
24284: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24285: LD_ADDR_VAR 0 2
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: LD_INT 3
24298: PUSH
24299: LD_INT 4
24301: PUSH
24302: LD_INT 5
24304: PUSH
24305: LD_INT 6
24307: PUSH
24308: LD_INT 7
24310: PUSH
24311: LD_INT 8
24313: PUSH
24314: LD_INT 9
24316: PUSH
24317: LD_INT 10
24319: PUSH
24320: LD_INT 11
24322: PUSH
24323: LD_INT 12
24325: PUSH
24326: LD_INT 13
24328: PUSH
24329: LD_INT 14
24331: PUSH
24332: LD_INT 15
24334: PUSH
24335: LD_INT 16
24337: PUSH
24338: LD_INT 17
24340: PUSH
24341: LD_INT 18
24343: PUSH
24344: LD_INT 19
24346: PUSH
24347: LD_INT 20
24349: PUSH
24350: LD_INT 21
24352: PUSH
24353: LD_INT 22
24355: PUSH
24356: LD_INT 23
24358: PUSH
24359: LD_INT 24
24361: PUSH
24362: LD_INT 25
24364: PUSH
24365: LD_INT 26
24367: PUSH
24368: LD_INT 27
24370: PUSH
24371: LD_INT 28
24373: PUSH
24374: LD_INT 29
24376: PUSH
24377: LD_INT 30
24379: PUSH
24380: LD_INT 31
24382: PUSH
24383: LD_INT 32
24385: PUSH
24386: LD_INT 33
24388: PUSH
24389: LD_INT 34
24391: PUSH
24392: LD_INT 36
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 101
24434: PUSH
24435: LD_INT 102
24437: PUSH
24438: LD_INT 103
24440: PUSH
24441: LD_INT 104
24443: PUSH
24444: LD_INT 105
24446: PUSH
24447: LD_INT 106
24449: PUSH
24450: LD_INT 107
24452: PUSH
24453: LD_INT 108
24455: PUSH
24456: LD_INT 109
24458: PUSH
24459: LD_INT 110
24461: PUSH
24462: LD_INT 111
24464: PUSH
24465: LD_INT 112
24467: PUSH
24468: LD_INT 113
24470: PUSH
24471: LD_INT 114
24473: PUSH
24474: LD_INT 116
24476: PUSH
24477: LD_INT 117
24479: PUSH
24480: LD_INT 118
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: ST_TO_ADDR
24506: GO 25513
24508: LD_INT 15
24510: DOUBLE
24511: EQUAL
24512: IFTRUE 24516
24514: GO 24740
24516: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24517: LD_ADDR_VAR 0 2
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: LD_INT 2
24527: PUSH
24528: LD_INT 3
24530: PUSH
24531: LD_INT 4
24533: PUSH
24534: LD_INT 5
24536: PUSH
24537: LD_INT 6
24539: PUSH
24540: LD_INT 7
24542: PUSH
24543: LD_INT 8
24545: PUSH
24546: LD_INT 9
24548: PUSH
24549: LD_INT 10
24551: PUSH
24552: LD_INT 11
24554: PUSH
24555: LD_INT 12
24557: PUSH
24558: LD_INT 13
24560: PUSH
24561: LD_INT 14
24563: PUSH
24564: LD_INT 15
24566: PUSH
24567: LD_INT 16
24569: PUSH
24570: LD_INT 17
24572: PUSH
24573: LD_INT 18
24575: PUSH
24576: LD_INT 19
24578: PUSH
24579: LD_INT 20
24581: PUSH
24582: LD_INT 21
24584: PUSH
24585: LD_INT 22
24587: PUSH
24588: LD_INT 23
24590: PUSH
24591: LD_INT 24
24593: PUSH
24594: LD_INT 25
24596: PUSH
24597: LD_INT 26
24599: PUSH
24600: LD_INT 27
24602: PUSH
24603: LD_INT 28
24605: PUSH
24606: LD_INT 29
24608: PUSH
24609: LD_INT 30
24611: PUSH
24612: LD_INT 31
24614: PUSH
24615: LD_INT 32
24617: PUSH
24618: LD_INT 33
24620: PUSH
24621: LD_INT 34
24623: PUSH
24624: LD_INT 36
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 101
24666: PUSH
24667: LD_INT 102
24669: PUSH
24670: LD_INT 103
24672: PUSH
24673: LD_INT 104
24675: PUSH
24676: LD_INT 105
24678: PUSH
24679: LD_INT 106
24681: PUSH
24682: LD_INT 107
24684: PUSH
24685: LD_INT 108
24687: PUSH
24688: LD_INT 109
24690: PUSH
24691: LD_INT 110
24693: PUSH
24694: LD_INT 111
24696: PUSH
24697: LD_INT 112
24699: PUSH
24700: LD_INT 113
24702: PUSH
24703: LD_INT 114
24705: PUSH
24706: LD_INT 116
24708: PUSH
24709: LD_INT 117
24711: PUSH
24712: LD_INT 118
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: ST_TO_ADDR
24738: GO 25513
24740: LD_INT 16
24742: DOUBLE
24743: EQUAL
24744: IFTRUE 24748
24746: GO 24884
24748: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24749: LD_ADDR_VAR 0 2
24753: PUSH
24754: LD_INT 2
24756: PUSH
24757: LD_INT 4
24759: PUSH
24760: LD_INT 5
24762: PUSH
24763: LD_INT 7
24765: PUSH
24766: LD_INT 11
24768: PUSH
24769: LD_INT 12
24771: PUSH
24772: LD_INT 15
24774: PUSH
24775: LD_INT 16
24777: PUSH
24778: LD_INT 20
24780: PUSH
24781: LD_INT 21
24783: PUSH
24784: LD_INT 22
24786: PUSH
24787: LD_INT 23
24789: PUSH
24790: LD_INT 25
24792: PUSH
24793: LD_INT 26
24795: PUSH
24796: LD_INT 30
24798: PUSH
24799: LD_INT 31
24801: PUSH
24802: LD_INT 32
24804: PUSH
24805: LD_INT 33
24807: PUSH
24808: LD_INT 34
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 101
24834: PUSH
24835: LD_INT 102
24837: PUSH
24838: LD_INT 103
24840: PUSH
24841: LD_INT 106
24843: PUSH
24844: LD_INT 108
24846: PUSH
24847: LD_INT 112
24849: PUSH
24850: LD_INT 113
24852: PUSH
24853: LD_INT 114
24855: PUSH
24856: LD_INT 116
24858: PUSH
24859: LD_INT 117
24861: PUSH
24862: LD_INT 118
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: ST_TO_ADDR
24882: GO 25513
24884: LD_INT 17
24886: DOUBLE
24887: EQUAL
24888: IFTRUE 24892
24890: GO 25116
24892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24893: LD_ADDR_VAR 0 2
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: LD_INT 2
24903: PUSH
24904: LD_INT 3
24906: PUSH
24907: LD_INT 4
24909: PUSH
24910: LD_INT 5
24912: PUSH
24913: LD_INT 6
24915: PUSH
24916: LD_INT 7
24918: PUSH
24919: LD_INT 8
24921: PUSH
24922: LD_INT 9
24924: PUSH
24925: LD_INT 10
24927: PUSH
24928: LD_INT 11
24930: PUSH
24931: LD_INT 12
24933: PUSH
24934: LD_INT 13
24936: PUSH
24937: LD_INT 14
24939: PUSH
24940: LD_INT 15
24942: PUSH
24943: LD_INT 16
24945: PUSH
24946: LD_INT 17
24948: PUSH
24949: LD_INT 18
24951: PUSH
24952: LD_INT 19
24954: PUSH
24955: LD_INT 20
24957: PUSH
24958: LD_INT 21
24960: PUSH
24961: LD_INT 22
24963: PUSH
24964: LD_INT 23
24966: PUSH
24967: LD_INT 24
24969: PUSH
24970: LD_INT 25
24972: PUSH
24973: LD_INT 26
24975: PUSH
24976: LD_INT 27
24978: PUSH
24979: LD_INT 28
24981: PUSH
24982: LD_INT 29
24984: PUSH
24985: LD_INT 30
24987: PUSH
24988: LD_INT 31
24990: PUSH
24991: LD_INT 32
24993: PUSH
24994: LD_INT 33
24996: PUSH
24997: LD_INT 34
24999: PUSH
25000: LD_INT 36
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 101
25042: PUSH
25043: LD_INT 102
25045: PUSH
25046: LD_INT 103
25048: PUSH
25049: LD_INT 104
25051: PUSH
25052: LD_INT 105
25054: PUSH
25055: LD_INT 106
25057: PUSH
25058: LD_INT 107
25060: PUSH
25061: LD_INT 108
25063: PUSH
25064: LD_INT 109
25066: PUSH
25067: LD_INT 110
25069: PUSH
25070: LD_INT 111
25072: PUSH
25073: LD_INT 112
25075: PUSH
25076: LD_INT 113
25078: PUSH
25079: LD_INT 114
25081: PUSH
25082: LD_INT 116
25084: PUSH
25085: LD_INT 117
25087: PUSH
25088: LD_INT 118
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: ST_TO_ADDR
25114: GO 25513
25116: LD_INT 18
25118: DOUBLE
25119: EQUAL
25120: IFTRUE 25124
25122: GO 25272
25124: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25125: LD_ADDR_VAR 0 2
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 4
25135: PUSH
25136: LD_INT 5
25138: PUSH
25139: LD_INT 7
25141: PUSH
25142: LD_INT 11
25144: PUSH
25145: LD_INT 12
25147: PUSH
25148: LD_INT 15
25150: PUSH
25151: LD_INT 16
25153: PUSH
25154: LD_INT 20
25156: PUSH
25157: LD_INT 21
25159: PUSH
25160: LD_INT 22
25162: PUSH
25163: LD_INT 23
25165: PUSH
25166: LD_INT 25
25168: PUSH
25169: LD_INT 26
25171: PUSH
25172: LD_INT 30
25174: PUSH
25175: LD_INT 31
25177: PUSH
25178: LD_INT 32
25180: PUSH
25181: LD_INT 33
25183: PUSH
25184: LD_INT 34
25186: PUSH
25187: LD_INT 35
25189: PUSH
25190: LD_INT 36
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 101
25218: PUSH
25219: LD_INT 102
25221: PUSH
25222: LD_INT 103
25224: PUSH
25225: LD_INT 106
25227: PUSH
25228: LD_INT 108
25230: PUSH
25231: LD_INT 112
25233: PUSH
25234: LD_INT 113
25236: PUSH
25237: LD_INT 114
25239: PUSH
25240: LD_INT 115
25242: PUSH
25243: LD_INT 116
25245: PUSH
25246: LD_INT 117
25248: PUSH
25249: LD_INT 118
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: ST_TO_ADDR
25270: GO 25513
25272: LD_INT 19
25274: DOUBLE
25275: EQUAL
25276: IFTRUE 25280
25278: GO 25512
25280: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25281: LD_ADDR_VAR 0 2
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: LD_INT 2
25291: PUSH
25292: LD_INT 3
25294: PUSH
25295: LD_INT 4
25297: PUSH
25298: LD_INT 5
25300: PUSH
25301: LD_INT 6
25303: PUSH
25304: LD_INT 7
25306: PUSH
25307: LD_INT 8
25309: PUSH
25310: LD_INT 9
25312: PUSH
25313: LD_INT 10
25315: PUSH
25316: LD_INT 11
25318: PUSH
25319: LD_INT 12
25321: PUSH
25322: LD_INT 13
25324: PUSH
25325: LD_INT 14
25327: PUSH
25328: LD_INT 15
25330: PUSH
25331: LD_INT 16
25333: PUSH
25334: LD_INT 17
25336: PUSH
25337: LD_INT 18
25339: PUSH
25340: LD_INT 19
25342: PUSH
25343: LD_INT 20
25345: PUSH
25346: LD_INT 21
25348: PUSH
25349: LD_INT 22
25351: PUSH
25352: LD_INT 23
25354: PUSH
25355: LD_INT 24
25357: PUSH
25358: LD_INT 25
25360: PUSH
25361: LD_INT 26
25363: PUSH
25364: LD_INT 27
25366: PUSH
25367: LD_INT 28
25369: PUSH
25370: LD_INT 29
25372: PUSH
25373: LD_INT 30
25375: PUSH
25376: LD_INT 31
25378: PUSH
25379: LD_INT 32
25381: PUSH
25382: LD_INT 33
25384: PUSH
25385: LD_INT 34
25387: PUSH
25388: LD_INT 35
25390: PUSH
25391: LD_INT 36
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 101
25434: PUSH
25435: LD_INT 102
25437: PUSH
25438: LD_INT 103
25440: PUSH
25441: LD_INT 104
25443: PUSH
25444: LD_INT 105
25446: PUSH
25447: LD_INT 106
25449: PUSH
25450: LD_INT 107
25452: PUSH
25453: LD_INT 108
25455: PUSH
25456: LD_INT 109
25458: PUSH
25459: LD_INT 110
25461: PUSH
25462: LD_INT 111
25464: PUSH
25465: LD_INT 112
25467: PUSH
25468: LD_INT 113
25470: PUSH
25471: LD_INT 114
25473: PUSH
25474: LD_INT 115
25476: PUSH
25477: LD_INT 116
25479: PUSH
25480: LD_INT 117
25482: PUSH
25483: LD_INT 118
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: ST_TO_ADDR
25510: GO 25513
25512: POP
// end else
25513: GO 25744
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25515: LD_ADDR_VAR 0 2
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: LD_INT 3
25528: PUSH
25529: LD_INT 4
25531: PUSH
25532: LD_INT 5
25534: PUSH
25535: LD_INT 6
25537: PUSH
25538: LD_INT 7
25540: PUSH
25541: LD_INT 8
25543: PUSH
25544: LD_INT 9
25546: PUSH
25547: LD_INT 10
25549: PUSH
25550: LD_INT 11
25552: PUSH
25553: LD_INT 12
25555: PUSH
25556: LD_INT 13
25558: PUSH
25559: LD_INT 14
25561: PUSH
25562: LD_INT 15
25564: PUSH
25565: LD_INT 16
25567: PUSH
25568: LD_INT 17
25570: PUSH
25571: LD_INT 18
25573: PUSH
25574: LD_INT 19
25576: PUSH
25577: LD_INT 20
25579: PUSH
25580: LD_INT 21
25582: PUSH
25583: LD_INT 22
25585: PUSH
25586: LD_INT 23
25588: PUSH
25589: LD_INT 24
25591: PUSH
25592: LD_INT 25
25594: PUSH
25595: LD_INT 26
25597: PUSH
25598: LD_INT 27
25600: PUSH
25601: LD_INT 28
25603: PUSH
25604: LD_INT 29
25606: PUSH
25607: LD_INT 30
25609: PUSH
25610: LD_INT 31
25612: PUSH
25613: LD_INT 32
25615: PUSH
25616: LD_INT 33
25618: PUSH
25619: LD_INT 34
25621: PUSH
25622: LD_INT 35
25624: PUSH
25625: LD_INT 36
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 101
25668: PUSH
25669: LD_INT 102
25671: PUSH
25672: LD_INT 103
25674: PUSH
25675: LD_INT 104
25677: PUSH
25678: LD_INT 105
25680: PUSH
25681: LD_INT 106
25683: PUSH
25684: LD_INT 107
25686: PUSH
25687: LD_INT 108
25689: PUSH
25690: LD_INT 109
25692: PUSH
25693: LD_INT 110
25695: PUSH
25696: LD_INT 111
25698: PUSH
25699: LD_INT 112
25701: PUSH
25702: LD_INT 113
25704: PUSH
25705: LD_INT 114
25707: PUSH
25708: LD_INT 115
25710: PUSH
25711: LD_INT 116
25713: PUSH
25714: LD_INT 117
25716: PUSH
25717: LD_INT 118
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: ST_TO_ADDR
// if result then
25744: LD_VAR 0 2
25748: IFFALSE 26534
// begin normal :=  ;
25750: LD_ADDR_VAR 0 5
25754: PUSH
25755: LD_STRING 
25757: ST_TO_ADDR
// hardcore :=  ;
25758: LD_ADDR_VAR 0 6
25762: PUSH
25763: LD_STRING 
25765: ST_TO_ADDR
// active :=  ;
25766: LD_ADDR_VAR 0 7
25770: PUSH
25771: LD_STRING 
25773: ST_TO_ADDR
// for i = 1 to normalCounter do
25774: LD_ADDR_VAR 0 8
25778: PUSH
25779: DOUBLE
25780: LD_INT 1
25782: DEC
25783: ST_TO_ADDR
25784: LD_EXP 39
25788: PUSH
25789: FOR_TO
25790: IFFALSE 25891
// begin tmp := 0 ;
25792: LD_ADDR_VAR 0 3
25796: PUSH
25797: LD_STRING 0
25799: ST_TO_ADDR
// if result [ 1 ] then
25800: LD_VAR 0 2
25804: PUSH
25805: LD_INT 1
25807: ARRAY
25808: IFFALSE 25873
// if result [ 1 ] [ 1 ] = i then
25810: LD_VAR 0 2
25814: PUSH
25815: LD_INT 1
25817: ARRAY
25818: PUSH
25819: LD_INT 1
25821: ARRAY
25822: PUSH
25823: LD_VAR 0 8
25827: EQUAL
25828: IFFALSE 25873
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25830: LD_ADDR_VAR 0 2
25834: PUSH
25835: LD_VAR 0 2
25839: PPUSH
25840: LD_INT 1
25842: PPUSH
25843: LD_VAR 0 2
25847: PUSH
25848: LD_INT 1
25850: ARRAY
25851: PPUSH
25852: LD_INT 1
25854: PPUSH
25855: CALL_OW 3
25859: PPUSH
25860: CALL_OW 1
25864: ST_TO_ADDR
// tmp := 1 ;
25865: LD_ADDR_VAR 0 3
25869: PUSH
25870: LD_STRING 1
25872: ST_TO_ADDR
// end ; normal := normal & tmp ;
25873: LD_ADDR_VAR 0 5
25877: PUSH
25878: LD_VAR 0 5
25882: PUSH
25883: LD_VAR 0 3
25887: STR
25888: ST_TO_ADDR
// end ;
25889: GO 25789
25891: POP
25892: POP
// for i = 1 to hardcoreCounter do
25893: LD_ADDR_VAR 0 8
25897: PUSH
25898: DOUBLE
25899: LD_INT 1
25901: DEC
25902: ST_TO_ADDR
25903: LD_EXP 40
25907: PUSH
25908: FOR_TO
25909: IFFALSE 26014
// begin tmp := 0 ;
25911: LD_ADDR_VAR 0 3
25915: PUSH
25916: LD_STRING 0
25918: ST_TO_ADDR
// if result [ 2 ] then
25919: LD_VAR 0 2
25923: PUSH
25924: LD_INT 2
25926: ARRAY
25927: IFFALSE 25996
// if result [ 2 ] [ 1 ] = 100 + i then
25929: LD_VAR 0 2
25933: PUSH
25934: LD_INT 2
25936: ARRAY
25937: PUSH
25938: LD_INT 1
25940: ARRAY
25941: PUSH
25942: LD_INT 100
25944: PUSH
25945: LD_VAR 0 8
25949: PLUS
25950: EQUAL
25951: IFFALSE 25996
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25953: LD_ADDR_VAR 0 2
25957: PUSH
25958: LD_VAR 0 2
25962: PPUSH
25963: LD_INT 2
25965: PPUSH
25966: LD_VAR 0 2
25970: PUSH
25971: LD_INT 2
25973: ARRAY
25974: PPUSH
25975: LD_INT 1
25977: PPUSH
25978: CALL_OW 3
25982: PPUSH
25983: CALL_OW 1
25987: ST_TO_ADDR
// tmp := 1 ;
25988: LD_ADDR_VAR 0 3
25992: PUSH
25993: LD_STRING 1
25995: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25996: LD_ADDR_VAR 0 6
26000: PUSH
26001: LD_VAR 0 6
26005: PUSH
26006: LD_VAR 0 3
26010: STR
26011: ST_TO_ADDR
// end ;
26012: GO 25908
26014: POP
26015: POP
// if isGameLoad then
26016: LD_VAR 0 1
26020: IFFALSE 26495
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26022: LD_ADDR_VAR 0 4
26026: PUSH
26027: LD_EXP 43
26031: PUSH
26032: LD_EXP 42
26036: PUSH
26037: LD_EXP 44
26041: PUSH
26042: LD_EXP 41
26046: PUSH
26047: LD_EXP 45
26051: PUSH
26052: LD_EXP 46
26056: PUSH
26057: LD_EXP 47
26061: PUSH
26062: LD_EXP 48
26066: PUSH
26067: LD_EXP 49
26071: PUSH
26072: LD_EXP 50
26076: PUSH
26077: LD_EXP 51
26081: PUSH
26082: LD_EXP 52
26086: PUSH
26087: LD_EXP 53
26091: PUSH
26092: LD_EXP 54
26096: PUSH
26097: LD_EXP 62
26101: PUSH
26102: LD_EXP 63
26106: PUSH
26107: LD_EXP 64
26111: PUSH
26112: LD_EXP 65
26116: PUSH
26117: LD_EXP 67
26121: PUSH
26122: LD_EXP 68
26126: PUSH
26127: LD_EXP 69
26131: PUSH
26132: LD_EXP 72
26136: PUSH
26137: LD_EXP 74
26141: PUSH
26142: LD_EXP 75
26146: PUSH
26147: LD_EXP 76
26151: PUSH
26152: LD_EXP 78
26156: PUSH
26157: LD_EXP 79
26161: PUSH
26162: LD_EXP 82
26166: PUSH
26167: LD_EXP 83
26171: PUSH
26172: LD_EXP 84
26176: PUSH
26177: LD_EXP 85
26181: PUSH
26182: LD_EXP 86
26186: PUSH
26187: LD_EXP 87
26191: PUSH
26192: LD_EXP 88
26196: PUSH
26197: LD_EXP 89
26201: PUSH
26202: LD_EXP 90
26206: PUSH
26207: LD_EXP 55
26211: PUSH
26212: LD_EXP 56
26216: PUSH
26217: LD_EXP 59
26221: PUSH
26222: LD_EXP 60
26226: PUSH
26227: LD_EXP 61
26231: PUSH
26232: LD_EXP 57
26236: PUSH
26237: LD_EXP 58
26241: PUSH
26242: LD_EXP 66
26246: PUSH
26247: LD_EXP 70
26251: PUSH
26252: LD_EXP 71
26256: PUSH
26257: LD_EXP 73
26261: PUSH
26262: LD_EXP 77
26266: PUSH
26267: LD_EXP 80
26271: PUSH
26272: LD_EXP 81
26276: PUSH
26277: LD_EXP 91
26281: PUSH
26282: LD_EXP 92
26286: PUSH
26287: LD_EXP 93
26291: PUSH
26292: LD_EXP 94
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: ST_TO_ADDR
// tmp :=  ;
26353: LD_ADDR_VAR 0 3
26357: PUSH
26358: LD_STRING 
26360: ST_TO_ADDR
// for i = 1 to normalCounter do
26361: LD_ADDR_VAR 0 8
26365: PUSH
26366: DOUBLE
26367: LD_INT 1
26369: DEC
26370: ST_TO_ADDR
26371: LD_EXP 39
26375: PUSH
26376: FOR_TO
26377: IFFALSE 26413
// begin if flags [ i ] then
26379: LD_VAR 0 4
26383: PUSH
26384: LD_VAR 0 8
26388: ARRAY
26389: IFFALSE 26411
// tmp := tmp & i & ; ;
26391: LD_ADDR_VAR 0 3
26395: PUSH
26396: LD_VAR 0 3
26400: PUSH
26401: LD_VAR 0 8
26405: STR
26406: PUSH
26407: LD_STRING ;
26409: STR
26410: ST_TO_ADDR
// end ;
26411: GO 26376
26413: POP
26414: POP
// for i = 1 to hardcoreCounter do
26415: LD_ADDR_VAR 0 8
26419: PUSH
26420: DOUBLE
26421: LD_INT 1
26423: DEC
26424: ST_TO_ADDR
26425: LD_EXP 40
26429: PUSH
26430: FOR_TO
26431: IFFALSE 26477
// begin if flags [ normalCounter + i ] then
26433: LD_VAR 0 4
26437: PUSH
26438: LD_EXP 39
26442: PUSH
26443: LD_VAR 0 8
26447: PLUS
26448: ARRAY
26449: IFFALSE 26475
// tmp := tmp & ( 100 + i ) & ; ;
26451: LD_ADDR_VAR 0 3
26455: PUSH
26456: LD_VAR 0 3
26460: PUSH
26461: LD_INT 100
26463: PUSH
26464: LD_VAR 0 8
26468: PLUS
26469: STR
26470: PUSH
26471: LD_STRING ;
26473: STR
26474: ST_TO_ADDR
// end ;
26475: GO 26430
26477: POP
26478: POP
// if tmp then
26479: LD_VAR 0 3
26483: IFFALSE 26495
// active := tmp ;
26485: LD_ADDR_VAR 0 7
26489: PUSH
26490: LD_VAR 0 3
26494: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26495: LD_STRING getStreamItemsFromMission("
26497: PUSH
26498: LD_VAR 0 5
26502: STR
26503: PUSH
26504: LD_STRING ","
26506: STR
26507: PUSH
26508: LD_VAR 0 6
26512: STR
26513: PUSH
26514: LD_STRING ","
26516: STR
26517: PUSH
26518: LD_VAR 0 7
26522: STR
26523: PUSH
26524: LD_STRING ")
26526: STR
26527: PPUSH
26528: CALL_OW 559
// end else
26532: GO 26541
// ToLua ( getStreamItemsFromMission("","","") ) ;
26534: LD_STRING getStreamItemsFromMission("","","")
26536: PPUSH
26537: CALL_OW 559
// end ;
26541: LD_VAR 0 2
26545: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26546: LD_EXP 38
26550: PUSH
26551: LD_EXP 43
26555: AND
26556: IFFALSE 26680
26558: GO 26560
26560: DISABLE
26561: LD_INT 0
26563: PPUSH
26564: PPUSH
// begin enable ;
26565: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26566: LD_ADDR_VAR 0 2
26570: PUSH
26571: LD_INT 22
26573: PUSH
26574: LD_OWVAR 2
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: PUSH
26586: LD_INT 34
26588: PUSH
26589: LD_INT 7
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 34
26598: PUSH
26599: LD_INT 45
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 34
26608: PUSH
26609: LD_INT 28
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 34
26618: PUSH
26619: LD_INT 47
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PPUSH
26637: CALL_OW 69
26641: ST_TO_ADDR
// if not tmp then
26642: LD_VAR 0 2
26646: NOT
26647: IFFALSE 26651
// exit ;
26649: GO 26680
// for i in tmp do
26651: LD_ADDR_VAR 0 1
26655: PUSH
26656: LD_VAR 0 2
26660: PUSH
26661: FOR_IN
26662: IFFALSE 26678
// begin SetLives ( i , 0 ) ;
26664: LD_VAR 0 1
26668: PPUSH
26669: LD_INT 0
26671: PPUSH
26672: CALL_OW 234
// end ;
26676: GO 26661
26678: POP
26679: POP
// end ;
26680: PPOPN 2
26682: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26683: LD_EXP 38
26687: PUSH
26688: LD_EXP 44
26692: AND
26693: IFFALSE 26777
26695: GO 26697
26697: DISABLE
26698: LD_INT 0
26700: PPUSH
26701: PPUSH
// begin enable ;
26702: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26703: LD_ADDR_VAR 0 2
26707: PUSH
26708: LD_INT 22
26710: PUSH
26711: LD_OWVAR 2
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 32
26722: PUSH
26723: LD_INT 3
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PPUSH
26734: CALL_OW 69
26738: ST_TO_ADDR
// if not tmp then
26739: LD_VAR 0 2
26743: NOT
26744: IFFALSE 26748
// exit ;
26746: GO 26777
// for i in tmp do
26748: LD_ADDR_VAR 0 1
26752: PUSH
26753: LD_VAR 0 2
26757: PUSH
26758: FOR_IN
26759: IFFALSE 26775
// begin SetLives ( i , 0 ) ;
26761: LD_VAR 0 1
26765: PPUSH
26766: LD_INT 0
26768: PPUSH
26769: CALL_OW 234
// end ;
26773: GO 26758
26775: POP
26776: POP
// end ;
26777: PPOPN 2
26779: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26780: LD_EXP 38
26784: PUSH
26785: LD_EXP 41
26789: AND
26790: IFFALSE 26883
26792: GO 26794
26794: DISABLE
26795: LD_INT 0
26797: PPUSH
// begin enable ;
26798: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26799: LD_ADDR_VAR 0 1
26803: PUSH
26804: LD_INT 22
26806: PUSH
26807: LD_OWVAR 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: LD_INT 25
26821: PUSH
26822: LD_INT 5
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 25
26831: PUSH
26832: LD_INT 9
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 25
26841: PUSH
26842: LD_INT 8
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PPUSH
26859: CALL_OW 69
26863: PUSH
26864: FOR_IN
26865: IFFALSE 26881
// begin SetClass ( i , 1 ) ;
26867: LD_VAR 0 1
26871: PPUSH
26872: LD_INT 1
26874: PPUSH
26875: CALL_OW 336
// end ;
26879: GO 26864
26881: POP
26882: POP
// end ;
26883: PPOPN 1
26885: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26886: LD_EXP 38
26890: PUSH
26891: LD_EXP 42
26895: AND
26896: PUSH
26897: LD_OWVAR 65
26901: PUSH
26902: LD_INT 7
26904: LESS
26905: AND
26906: IFFALSE 26920
26908: GO 26910
26910: DISABLE
// begin enable ;
26911: ENABLE
// game_speed := 7 ;
26912: LD_ADDR_OWVAR 65
26916: PUSH
26917: LD_INT 7
26919: ST_TO_ADDR
// end ;
26920: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26921: LD_EXP 38
26925: PUSH
26926: LD_EXP 45
26930: AND
26931: IFFALSE 27133
26933: GO 26935
26935: DISABLE
26936: LD_INT 0
26938: PPUSH
26939: PPUSH
26940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26941: LD_ADDR_VAR 0 3
26945: PUSH
26946: LD_INT 81
26948: PUSH
26949: LD_OWVAR 2
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 21
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PPUSH
26972: CALL_OW 69
26976: ST_TO_ADDR
// if not tmp then
26977: LD_VAR 0 3
26981: NOT
26982: IFFALSE 26986
// exit ;
26984: GO 27133
// if tmp > 5 then
26986: LD_VAR 0 3
26990: PUSH
26991: LD_INT 5
26993: GREATER
26994: IFFALSE 27006
// k := 5 else
26996: LD_ADDR_VAR 0 2
27000: PUSH
27001: LD_INT 5
27003: ST_TO_ADDR
27004: GO 27016
// k := tmp ;
27006: LD_ADDR_VAR 0 2
27010: PUSH
27011: LD_VAR 0 3
27015: ST_TO_ADDR
// for i := 1 to k do
27016: LD_ADDR_VAR 0 1
27020: PUSH
27021: DOUBLE
27022: LD_INT 1
27024: DEC
27025: ST_TO_ADDR
27026: LD_VAR 0 2
27030: PUSH
27031: FOR_TO
27032: IFFALSE 27131
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27034: LD_VAR 0 3
27038: PUSH
27039: LD_VAR 0 1
27043: ARRAY
27044: PPUSH
27045: LD_VAR 0 1
27049: PUSH
27050: LD_INT 4
27052: MOD
27053: PUSH
27054: LD_INT 1
27056: PLUS
27057: PPUSH
27058: CALL_OW 259
27062: PUSH
27063: LD_INT 10
27065: LESS
27066: IFFALSE 27129
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27068: LD_VAR 0 3
27072: PUSH
27073: LD_VAR 0 1
27077: ARRAY
27078: PPUSH
27079: LD_VAR 0 1
27083: PUSH
27084: LD_INT 4
27086: MOD
27087: PUSH
27088: LD_INT 1
27090: PLUS
27091: PPUSH
27092: LD_VAR 0 3
27096: PUSH
27097: LD_VAR 0 1
27101: ARRAY
27102: PPUSH
27103: LD_VAR 0 1
27107: PUSH
27108: LD_INT 4
27110: MOD
27111: PUSH
27112: LD_INT 1
27114: PLUS
27115: PPUSH
27116: CALL_OW 259
27120: PUSH
27121: LD_INT 1
27123: PLUS
27124: PPUSH
27125: CALL_OW 237
27129: GO 27031
27131: POP
27132: POP
// end ;
27133: PPOPN 3
27135: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27136: LD_EXP 38
27140: PUSH
27141: LD_EXP 46
27145: AND
27146: IFFALSE 27166
27148: GO 27150
27150: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27151: LD_INT 4
27153: PPUSH
27154: LD_OWVAR 2
27158: PPUSH
27159: LD_INT 0
27161: PPUSH
27162: CALL_OW 324
27166: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27167: LD_EXP 38
27171: PUSH
27172: LD_EXP 75
27176: AND
27177: IFFALSE 27197
27179: GO 27181
27181: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27182: LD_INT 19
27184: PPUSH
27185: LD_OWVAR 2
27189: PPUSH
27190: LD_INT 0
27192: PPUSH
27193: CALL_OW 324
27197: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27198: LD_EXP 38
27202: PUSH
27203: LD_EXP 47
27207: AND
27208: IFFALSE 27310
27210: GO 27212
27212: DISABLE
27213: LD_INT 0
27215: PPUSH
27216: PPUSH
// begin enable ;
27217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27218: LD_ADDR_VAR 0 2
27222: PUSH
27223: LD_INT 22
27225: PUSH
27226: LD_OWVAR 2
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: LD_INT 34
27240: PUSH
27241: LD_INT 11
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 34
27250: PUSH
27251: LD_INT 30
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: LIST
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PPUSH
27267: CALL_OW 69
27271: ST_TO_ADDR
// if not tmp then
27272: LD_VAR 0 2
27276: NOT
27277: IFFALSE 27281
// exit ;
27279: GO 27310
// for i in tmp do
27281: LD_ADDR_VAR 0 1
27285: PUSH
27286: LD_VAR 0 2
27290: PUSH
27291: FOR_IN
27292: IFFALSE 27308
// begin SetLives ( i , 0 ) ;
27294: LD_VAR 0 1
27298: PPUSH
27299: LD_INT 0
27301: PPUSH
27302: CALL_OW 234
// end ;
27306: GO 27291
27308: POP
27309: POP
// end ;
27310: PPOPN 2
27312: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27313: LD_EXP 38
27317: PUSH
27318: LD_EXP 48
27322: AND
27323: IFFALSE 27343
27325: GO 27327
27327: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27328: LD_INT 32
27330: PPUSH
27331: LD_OWVAR 2
27335: PPUSH
27336: LD_INT 0
27338: PPUSH
27339: CALL_OW 324
27343: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27344: LD_EXP 38
27348: PUSH
27349: LD_EXP 49
27353: AND
27354: IFFALSE 27535
27356: GO 27358
27358: DISABLE
27359: LD_INT 0
27361: PPUSH
27362: PPUSH
27363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27364: LD_ADDR_VAR 0 2
27368: PUSH
27369: LD_INT 22
27371: PUSH
27372: LD_OWVAR 2
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 33
27383: PUSH
27384: LD_INT 3
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PPUSH
27395: CALL_OW 69
27399: ST_TO_ADDR
// if not tmp then
27400: LD_VAR 0 2
27404: NOT
27405: IFFALSE 27409
// exit ;
27407: GO 27535
// side := 0 ;
27409: LD_ADDR_VAR 0 3
27413: PUSH
27414: LD_INT 0
27416: ST_TO_ADDR
// for i := 1 to 8 do
27417: LD_ADDR_VAR 0 1
27421: PUSH
27422: DOUBLE
27423: LD_INT 1
27425: DEC
27426: ST_TO_ADDR
27427: LD_INT 8
27429: PUSH
27430: FOR_TO
27431: IFFALSE 27479
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27433: LD_OWVAR 2
27437: PUSH
27438: LD_VAR 0 1
27442: NONEQUAL
27443: PUSH
27444: LD_OWVAR 2
27448: PPUSH
27449: LD_VAR 0 1
27453: PPUSH
27454: CALL_OW 81
27458: PUSH
27459: LD_INT 2
27461: EQUAL
27462: AND
27463: IFFALSE 27477
// begin side := i ;
27465: LD_ADDR_VAR 0 3
27469: PUSH
27470: LD_VAR 0 1
27474: ST_TO_ADDR
// break ;
27475: GO 27479
// end ;
27477: GO 27430
27479: POP
27480: POP
// if not side then
27481: LD_VAR 0 3
27485: NOT
27486: IFFALSE 27490
// exit ;
27488: GO 27535
// for i := 1 to tmp do
27490: LD_ADDR_VAR 0 1
27494: PUSH
27495: DOUBLE
27496: LD_INT 1
27498: DEC
27499: ST_TO_ADDR
27500: LD_VAR 0 2
27504: PUSH
27505: FOR_TO
27506: IFFALSE 27533
// if Prob ( 60 ) then
27508: LD_INT 60
27510: PPUSH
27511: CALL_OW 13
27515: IFFALSE 27531
// SetSide ( i , side ) ;
27517: LD_VAR 0 1
27521: PPUSH
27522: LD_VAR 0 3
27526: PPUSH
27527: CALL_OW 235
27531: GO 27505
27533: POP
27534: POP
// end ;
27535: PPOPN 3
27537: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27538: LD_EXP 38
27542: PUSH
27543: LD_EXP 51
27547: AND
27548: IFFALSE 27667
27550: GO 27552
27552: DISABLE
27553: LD_INT 0
27555: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27556: LD_ADDR_VAR 0 1
27560: PUSH
27561: LD_INT 22
27563: PUSH
27564: LD_OWVAR 2
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 21
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 3
27585: PUSH
27586: LD_INT 23
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: LIST
27604: PPUSH
27605: CALL_OW 69
27609: PUSH
27610: FOR_IN
27611: IFFALSE 27665
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27613: LD_VAR 0 1
27617: PPUSH
27618: CALL_OW 257
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: LD_INT 3
27631: PUSH
27632: LD_INT 4
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: IN
27641: IFFALSE 27663
// SetClass ( un , rand ( 1 , 4 ) ) ;
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_INT 1
27650: PPUSH
27651: LD_INT 4
27653: PPUSH
27654: CALL_OW 12
27658: PPUSH
27659: CALL_OW 336
27663: GO 27610
27665: POP
27666: POP
// end ;
27667: PPOPN 1
27669: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27670: LD_EXP 38
27674: PUSH
27675: LD_EXP 50
27679: AND
27680: IFFALSE 27759
27682: GO 27684
27684: DISABLE
27685: LD_INT 0
27687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27688: LD_ADDR_VAR 0 1
27692: PUSH
27693: LD_INT 22
27695: PUSH
27696: LD_OWVAR 2
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 21
27707: PUSH
27708: LD_INT 3
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PPUSH
27719: CALL_OW 69
27723: ST_TO_ADDR
// if not tmp then
27724: LD_VAR 0 1
27728: NOT
27729: IFFALSE 27733
// exit ;
27731: GO 27759
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27733: LD_VAR 0 1
27737: PUSH
27738: LD_INT 1
27740: PPUSH
27741: LD_VAR 0 1
27745: PPUSH
27746: CALL_OW 12
27750: ARRAY
27751: PPUSH
27752: LD_INT 100
27754: PPUSH
27755: CALL_OW 234
// end ;
27759: PPOPN 1
27761: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27762: LD_EXP 38
27766: PUSH
27767: LD_EXP 52
27771: AND
27772: IFFALSE 27870
27774: GO 27776
27776: DISABLE
27777: LD_INT 0
27779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27780: LD_ADDR_VAR 0 1
27784: PUSH
27785: LD_INT 22
27787: PUSH
27788: LD_OWVAR 2
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 21
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PPUSH
27811: CALL_OW 69
27815: ST_TO_ADDR
// if not tmp then
27816: LD_VAR 0 1
27820: NOT
27821: IFFALSE 27825
// exit ;
27823: GO 27870
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27825: LD_VAR 0 1
27829: PUSH
27830: LD_INT 1
27832: PPUSH
27833: LD_VAR 0 1
27837: PPUSH
27838: CALL_OW 12
27842: ARRAY
27843: PPUSH
27844: LD_INT 1
27846: PPUSH
27847: LD_INT 4
27849: PPUSH
27850: CALL_OW 12
27854: PPUSH
27855: LD_INT 3000
27857: PPUSH
27858: LD_INT 9000
27860: PPUSH
27861: CALL_OW 12
27865: PPUSH
27866: CALL_OW 492
// end ;
27870: PPOPN 1
27872: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27873: LD_EXP 38
27877: PUSH
27878: LD_EXP 53
27882: AND
27883: IFFALSE 27903
27885: GO 27887
27887: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27888: LD_INT 1
27890: PPUSH
27891: LD_OWVAR 2
27895: PPUSH
27896: LD_INT 0
27898: PPUSH
27899: CALL_OW 324
27903: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27904: LD_EXP 38
27908: PUSH
27909: LD_EXP 54
27913: AND
27914: IFFALSE 27997
27916: GO 27918
27918: DISABLE
27919: LD_INT 0
27921: PPUSH
27922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27923: LD_ADDR_VAR 0 2
27927: PUSH
27928: LD_INT 22
27930: PUSH
27931: LD_OWVAR 2
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 21
27942: PUSH
27943: LD_INT 3
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PPUSH
27954: CALL_OW 69
27958: ST_TO_ADDR
// if not tmp then
27959: LD_VAR 0 2
27963: NOT
27964: IFFALSE 27968
// exit ;
27966: GO 27997
// for i in tmp do
27968: LD_ADDR_VAR 0 1
27972: PUSH
27973: LD_VAR 0 2
27977: PUSH
27978: FOR_IN
27979: IFFALSE 27995
// SetBLevel ( i , 10 ) ;
27981: LD_VAR 0 1
27985: PPUSH
27986: LD_INT 10
27988: PPUSH
27989: CALL_OW 241
27993: GO 27978
27995: POP
27996: POP
// end ;
27997: PPOPN 2
27999: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28000: LD_EXP 38
28004: PUSH
28005: LD_EXP 55
28009: AND
28010: IFFALSE 28121
28012: GO 28014
28014: DISABLE
28015: LD_INT 0
28017: PPUSH
28018: PPUSH
28019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28020: LD_ADDR_VAR 0 3
28024: PUSH
28025: LD_INT 22
28027: PUSH
28028: LD_OWVAR 2
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 25
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PPUSH
28051: CALL_OW 69
28055: ST_TO_ADDR
// if not tmp then
28056: LD_VAR 0 3
28060: NOT
28061: IFFALSE 28065
// exit ;
28063: GO 28121
// un := tmp [ rand ( 1 , tmp ) ] ;
28065: LD_ADDR_VAR 0 2
28069: PUSH
28070: LD_VAR 0 3
28074: PUSH
28075: LD_INT 1
28077: PPUSH
28078: LD_VAR 0 3
28082: PPUSH
28083: CALL_OW 12
28087: ARRAY
28088: ST_TO_ADDR
// if Crawls ( un ) then
28089: LD_VAR 0 2
28093: PPUSH
28094: CALL_OW 318
28098: IFFALSE 28109
// ComWalk ( un ) ;
28100: LD_VAR 0 2
28104: PPUSH
28105: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28109: LD_VAR 0 2
28113: PPUSH
28114: LD_INT 5
28116: PPUSH
28117: CALL_OW 336
// end ;
28121: PPOPN 3
28123: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28124: LD_EXP 38
28128: PUSH
28129: LD_EXP 56
28133: AND
28134: PUSH
28135: LD_OWVAR 67
28139: PUSH
28140: LD_INT 4
28142: LESS
28143: AND
28144: IFFALSE 28163
28146: GO 28148
28148: DISABLE
// begin Difficulty := Difficulty + 1 ;
28149: LD_ADDR_OWVAR 67
28153: PUSH
28154: LD_OWVAR 67
28158: PUSH
28159: LD_INT 1
28161: PLUS
28162: ST_TO_ADDR
// end ;
28163: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28164: LD_EXP 38
28168: PUSH
28169: LD_EXP 57
28173: AND
28174: IFFALSE 28277
28176: GO 28178
28178: DISABLE
28179: LD_INT 0
28181: PPUSH
// begin for i := 1 to 5 do
28182: LD_ADDR_VAR 0 1
28186: PUSH
28187: DOUBLE
28188: LD_INT 1
28190: DEC
28191: ST_TO_ADDR
28192: LD_INT 5
28194: PUSH
28195: FOR_TO
28196: IFFALSE 28275
// begin uc_nation := nation_nature ;
28198: LD_ADDR_OWVAR 21
28202: PUSH
28203: LD_INT 0
28205: ST_TO_ADDR
// uc_side := 0 ;
28206: LD_ADDR_OWVAR 20
28210: PUSH
28211: LD_INT 0
28213: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28214: LD_ADDR_OWVAR 29
28218: PUSH
28219: LD_INT 12
28221: PUSH
28222: LD_INT 12
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: ST_TO_ADDR
// hc_agressivity := 20 ;
28229: LD_ADDR_OWVAR 35
28233: PUSH
28234: LD_INT 20
28236: ST_TO_ADDR
// hc_class := class_tiger ;
28237: LD_ADDR_OWVAR 28
28241: PUSH
28242: LD_INT 14
28244: ST_TO_ADDR
// hc_gallery :=  ;
28245: LD_ADDR_OWVAR 33
28249: PUSH
28250: LD_STRING 
28252: ST_TO_ADDR
// hc_name :=  ;
28253: LD_ADDR_OWVAR 26
28257: PUSH
28258: LD_STRING 
28260: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28261: CALL_OW 44
28265: PPUSH
28266: LD_INT 0
28268: PPUSH
28269: CALL_OW 51
// end ;
28273: GO 28195
28275: POP
28276: POP
// end ;
28277: PPOPN 1
28279: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28280: LD_EXP 38
28284: PUSH
28285: LD_EXP 58
28289: AND
28290: IFFALSE 28299
28292: GO 28294
28294: DISABLE
// StreamSibBomb ;
28295: CALL 28300 0 0
28299: END
// export function StreamSibBomb ; var i , x , y ; begin
28300: LD_INT 0
28302: PPUSH
28303: PPUSH
28304: PPUSH
28305: PPUSH
// result := false ;
28306: LD_ADDR_VAR 0 1
28310: PUSH
28311: LD_INT 0
28313: ST_TO_ADDR
// for i := 1 to 16 do
28314: LD_ADDR_VAR 0 2
28318: PUSH
28319: DOUBLE
28320: LD_INT 1
28322: DEC
28323: ST_TO_ADDR
28324: LD_INT 16
28326: PUSH
28327: FOR_TO
28328: IFFALSE 28527
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28330: LD_ADDR_VAR 0 3
28334: PUSH
28335: LD_INT 10
28337: PUSH
28338: LD_INT 20
28340: PUSH
28341: LD_INT 30
28343: PUSH
28344: LD_INT 40
28346: PUSH
28347: LD_INT 50
28349: PUSH
28350: LD_INT 60
28352: PUSH
28353: LD_INT 70
28355: PUSH
28356: LD_INT 80
28358: PUSH
28359: LD_INT 90
28361: PUSH
28362: LD_INT 100
28364: PUSH
28365: LD_INT 110
28367: PUSH
28368: LD_INT 120
28370: PUSH
28371: LD_INT 130
28373: PUSH
28374: LD_INT 140
28376: PUSH
28377: LD_INT 150
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: PPUSH
28400: LD_INT 15
28402: PPUSH
28403: CALL_OW 12
28407: ARRAY
28408: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28409: LD_ADDR_VAR 0 4
28413: PUSH
28414: LD_INT 10
28416: PUSH
28417: LD_INT 20
28419: PUSH
28420: LD_INT 30
28422: PUSH
28423: LD_INT 40
28425: PUSH
28426: LD_INT 50
28428: PUSH
28429: LD_INT 60
28431: PUSH
28432: LD_INT 70
28434: PUSH
28435: LD_INT 80
28437: PUSH
28438: LD_INT 90
28440: PUSH
28441: LD_INT 100
28443: PUSH
28444: LD_INT 110
28446: PUSH
28447: LD_INT 120
28449: PUSH
28450: LD_INT 130
28452: PUSH
28453: LD_INT 140
28455: PUSH
28456: LD_INT 150
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: PPUSH
28479: LD_INT 15
28481: PPUSH
28482: CALL_OW 12
28486: ARRAY
28487: ST_TO_ADDR
// if ValidHex ( x , y ) then
28488: LD_VAR 0 3
28492: PPUSH
28493: LD_VAR 0 4
28497: PPUSH
28498: CALL_OW 488
28502: IFFALSE 28525
// begin result := [ x , y ] ;
28504: LD_ADDR_VAR 0 1
28508: PUSH
28509: LD_VAR 0 3
28513: PUSH
28514: LD_VAR 0 4
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: ST_TO_ADDR
// break ;
28523: GO 28527
// end ; end ;
28525: GO 28327
28527: POP
28528: POP
// if result then
28529: LD_VAR 0 1
28533: IFFALSE 28593
// begin ToLua ( playSibBomb() ) ;
28535: LD_STRING playSibBomb()
28537: PPUSH
28538: CALL_OW 559
// wait ( 0 0$14 ) ;
28542: LD_INT 490
28544: PPUSH
28545: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28549: LD_VAR 0 1
28553: PUSH
28554: LD_INT 1
28556: ARRAY
28557: PPUSH
28558: LD_VAR 0 1
28562: PUSH
28563: LD_INT 2
28565: ARRAY
28566: PPUSH
28567: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28571: LD_VAR 0 1
28575: PUSH
28576: LD_INT 1
28578: ARRAY
28579: PPUSH
28580: LD_VAR 0 1
28584: PUSH
28585: LD_INT 2
28587: ARRAY
28588: PPUSH
28589: CALL_OW 429
// end ; end ;
28593: LD_VAR 0 1
28597: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28598: LD_EXP 38
28602: PUSH
28603: LD_EXP 60
28607: AND
28608: IFFALSE 28620
28610: GO 28612
28612: DISABLE
// YouLost (  ) ;
28613: LD_STRING 
28615: PPUSH
28616: CALL_OW 104
28620: END
// every 0 0$1 trigger StreamModeActive and sFog do
28621: LD_EXP 38
28625: PUSH
28626: LD_EXP 59
28630: AND
28631: IFFALSE 28645
28633: GO 28635
28635: DISABLE
// FogOff ( your_side ) ;
28636: LD_OWVAR 2
28640: PPUSH
28641: CALL_OW 344
28645: END
// every 0 0$1 trigger StreamModeActive and sSun do
28646: LD_EXP 38
28650: PUSH
28651: LD_EXP 61
28655: AND
28656: IFFALSE 28684
28658: GO 28660
28660: DISABLE
// begin solar_recharge_percent := 0 ;
28661: LD_ADDR_OWVAR 79
28665: PUSH
28666: LD_INT 0
28668: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28669: LD_INT 10500
28671: PPUSH
28672: CALL_OW 67
// solar_recharge_percent := 100 ;
28676: LD_ADDR_OWVAR 79
28680: PUSH
28681: LD_INT 100
28683: ST_TO_ADDR
// end ;
28684: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28685: LD_EXP 38
28689: PUSH
28690: LD_EXP 62
28694: AND
28695: IFFALSE 28934
28697: GO 28699
28699: DISABLE
28700: LD_INT 0
28702: PPUSH
28703: PPUSH
28704: PPUSH
// begin tmp := [ ] ;
28705: LD_ADDR_VAR 0 3
28709: PUSH
28710: EMPTY
28711: ST_TO_ADDR
// for i := 1 to 6 do
28712: LD_ADDR_VAR 0 1
28716: PUSH
28717: DOUBLE
28718: LD_INT 1
28720: DEC
28721: ST_TO_ADDR
28722: LD_INT 6
28724: PUSH
28725: FOR_TO
28726: IFFALSE 28831
// begin uc_nation := nation_nature ;
28728: LD_ADDR_OWVAR 21
28732: PUSH
28733: LD_INT 0
28735: ST_TO_ADDR
// uc_side := 0 ;
28736: LD_ADDR_OWVAR 20
28740: PUSH
28741: LD_INT 0
28743: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28744: LD_ADDR_OWVAR 29
28748: PUSH
28749: LD_INT 12
28751: PUSH
28752: LD_INT 12
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: ST_TO_ADDR
// hc_agressivity := 20 ;
28759: LD_ADDR_OWVAR 35
28763: PUSH
28764: LD_INT 20
28766: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28767: LD_ADDR_OWVAR 28
28771: PUSH
28772: LD_INT 17
28774: ST_TO_ADDR
// hc_gallery :=  ;
28775: LD_ADDR_OWVAR 33
28779: PUSH
28780: LD_STRING 
28782: ST_TO_ADDR
// hc_name :=  ;
28783: LD_ADDR_OWVAR 26
28787: PUSH
28788: LD_STRING 
28790: ST_TO_ADDR
// un := CreateHuman ;
28791: LD_ADDR_VAR 0 2
28795: PUSH
28796: CALL_OW 44
28800: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28801: LD_VAR 0 2
28805: PPUSH
28806: LD_INT 1
28808: PPUSH
28809: CALL_OW 51
// tmp := tmp ^ un ;
28813: LD_ADDR_VAR 0 3
28817: PUSH
28818: LD_VAR 0 3
28822: PUSH
28823: LD_VAR 0 2
28827: ADD
28828: ST_TO_ADDR
// end ;
28829: GO 28725
28831: POP
28832: POP
// repeat wait ( 0 0$1 ) ;
28833: LD_INT 35
28835: PPUSH
28836: CALL_OW 67
// for un in tmp do
28840: LD_ADDR_VAR 0 2
28844: PUSH
28845: LD_VAR 0 3
28849: PUSH
28850: FOR_IN
28851: IFFALSE 28925
// begin if IsDead ( un ) then
28853: LD_VAR 0 2
28857: PPUSH
28858: CALL_OW 301
28862: IFFALSE 28882
// begin tmp := tmp diff un ;
28864: LD_ADDR_VAR 0 3
28868: PUSH
28869: LD_VAR 0 3
28873: PUSH
28874: LD_VAR 0 2
28878: DIFF
28879: ST_TO_ADDR
// continue ;
28880: GO 28850
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28882: LD_VAR 0 2
28886: PPUSH
28887: LD_INT 3
28889: PUSH
28890: LD_INT 22
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PPUSH
28904: CALL_OW 69
28908: PPUSH
28909: LD_VAR 0 2
28913: PPUSH
28914: CALL_OW 74
28918: PPUSH
28919: CALL_OW 115
// end ;
28923: GO 28850
28925: POP
28926: POP
// until not tmp ;
28927: LD_VAR 0 3
28931: NOT
28932: IFFALSE 28833
// end ;
28934: PPOPN 3
28936: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28937: LD_EXP 38
28941: PUSH
28942: LD_EXP 63
28946: AND
28947: IFFALSE 29001
28949: GO 28951
28951: DISABLE
// begin ToLua ( displayTroll(); ) ;
28952: LD_STRING displayTroll();
28954: PPUSH
28955: CALL_OW 559
// wait ( 3 3$00 ) ;
28959: LD_INT 6300
28961: PPUSH
28962: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28966: LD_STRING hideTroll();
28968: PPUSH
28969: CALL_OW 559
// wait ( 1 1$00 ) ;
28973: LD_INT 2100
28975: PPUSH
28976: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28980: LD_STRING displayTroll();
28982: PPUSH
28983: CALL_OW 559
// wait ( 1 1$00 ) ;
28987: LD_INT 2100
28989: PPUSH
28990: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28994: LD_STRING hideTroll();
28996: PPUSH
28997: CALL_OW 559
// end ;
29001: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29002: LD_EXP 38
29006: PUSH
29007: LD_EXP 64
29011: AND
29012: IFFALSE 29075
29014: GO 29016
29016: DISABLE
29017: LD_INT 0
29019: PPUSH
// begin p := 0 ;
29020: LD_ADDR_VAR 0 1
29024: PUSH
29025: LD_INT 0
29027: ST_TO_ADDR
// repeat game_speed := 1 ;
29028: LD_ADDR_OWVAR 65
29032: PUSH
29033: LD_INT 1
29035: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29036: LD_INT 35
29038: PPUSH
29039: CALL_OW 67
// p := p + 1 ;
29043: LD_ADDR_VAR 0 1
29047: PUSH
29048: LD_VAR 0 1
29052: PUSH
29053: LD_INT 1
29055: PLUS
29056: ST_TO_ADDR
// until p >= 60 ;
29057: LD_VAR 0 1
29061: PUSH
29062: LD_INT 60
29064: GREATEREQUAL
29065: IFFALSE 29028
// game_speed := 4 ;
29067: LD_ADDR_OWVAR 65
29071: PUSH
29072: LD_INT 4
29074: ST_TO_ADDR
// end ;
29075: PPOPN 1
29077: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29078: LD_EXP 38
29082: PUSH
29083: LD_EXP 65
29087: AND
29088: IFFALSE 29234
29090: GO 29092
29092: DISABLE
29093: LD_INT 0
29095: PPUSH
29096: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29097: LD_ADDR_VAR 0 1
29101: PUSH
29102: LD_INT 22
29104: PUSH
29105: LD_OWVAR 2
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: LD_INT 30
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 30
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: LIST
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PPUSH
29146: CALL_OW 69
29150: ST_TO_ADDR
// if not depot then
29151: LD_VAR 0 1
29155: NOT
29156: IFFALSE 29160
// exit ;
29158: GO 29234
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29160: LD_ADDR_VAR 0 2
29164: PUSH
29165: LD_VAR 0 1
29169: PUSH
29170: LD_INT 1
29172: PPUSH
29173: LD_VAR 0 1
29177: PPUSH
29178: CALL_OW 12
29182: ARRAY
29183: PPUSH
29184: CALL_OW 274
29188: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29189: LD_VAR 0 2
29193: PPUSH
29194: LD_INT 1
29196: PPUSH
29197: LD_INT 0
29199: PPUSH
29200: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29204: LD_VAR 0 2
29208: PPUSH
29209: LD_INT 2
29211: PPUSH
29212: LD_INT 0
29214: PPUSH
29215: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29219: LD_VAR 0 2
29223: PPUSH
29224: LD_INT 3
29226: PPUSH
29227: LD_INT 0
29229: PPUSH
29230: CALL_OW 277
// end ;
29234: PPOPN 2
29236: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29237: LD_EXP 38
29241: PUSH
29242: LD_EXP 66
29246: AND
29247: IFFALSE 29344
29249: GO 29251
29251: DISABLE
29252: LD_INT 0
29254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29255: LD_ADDR_VAR 0 1
29259: PUSH
29260: LD_INT 22
29262: PUSH
29263: LD_OWVAR 2
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 21
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 3
29284: PUSH
29285: LD_INT 23
29287: PUSH
29288: LD_INT 0
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: LIST
29303: PPUSH
29304: CALL_OW 69
29308: ST_TO_ADDR
// if not tmp then
29309: LD_VAR 0 1
29313: NOT
29314: IFFALSE 29318
// exit ;
29316: GO 29344
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29318: LD_VAR 0 1
29322: PUSH
29323: LD_INT 1
29325: PPUSH
29326: LD_VAR 0 1
29330: PPUSH
29331: CALL_OW 12
29335: ARRAY
29336: PPUSH
29337: LD_INT 200
29339: PPUSH
29340: CALL_OW 234
// end ;
29344: PPOPN 1
29346: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29347: LD_EXP 38
29351: PUSH
29352: LD_EXP 67
29356: AND
29357: IFFALSE 29436
29359: GO 29361
29361: DISABLE
29362: LD_INT 0
29364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29365: LD_ADDR_VAR 0 1
29369: PUSH
29370: LD_INT 22
29372: PUSH
29373: LD_OWVAR 2
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 21
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PPUSH
29396: CALL_OW 69
29400: ST_TO_ADDR
// if not tmp then
29401: LD_VAR 0 1
29405: NOT
29406: IFFALSE 29410
// exit ;
29408: GO 29436
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29410: LD_VAR 0 1
29414: PUSH
29415: LD_INT 1
29417: PPUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: CALL_OW 12
29427: ARRAY
29428: PPUSH
29429: LD_INT 60
29431: PPUSH
29432: CALL_OW 234
// end ;
29436: PPOPN 1
29438: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29439: LD_EXP 38
29443: PUSH
29444: LD_EXP 68
29448: AND
29449: IFFALSE 29548
29451: GO 29453
29453: DISABLE
29454: LD_INT 0
29456: PPUSH
29457: PPUSH
// begin enable ;
29458: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29459: LD_ADDR_VAR 0 1
29463: PUSH
29464: LD_INT 22
29466: PUSH
29467: LD_OWVAR 2
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 61
29478: PUSH
29479: EMPTY
29480: LIST
29481: PUSH
29482: LD_INT 33
29484: PUSH
29485: LD_INT 2
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: LIST
29496: PPUSH
29497: CALL_OW 69
29501: ST_TO_ADDR
// if not tmp then
29502: LD_VAR 0 1
29506: NOT
29507: IFFALSE 29511
// exit ;
29509: GO 29548
// for i in tmp do
29511: LD_ADDR_VAR 0 2
29515: PUSH
29516: LD_VAR 0 1
29520: PUSH
29521: FOR_IN
29522: IFFALSE 29546
// if IsControledBy ( i ) then
29524: LD_VAR 0 2
29528: PPUSH
29529: CALL_OW 312
29533: IFFALSE 29544
// ComUnlink ( i ) ;
29535: LD_VAR 0 2
29539: PPUSH
29540: CALL_OW 136
29544: GO 29521
29546: POP
29547: POP
// end ;
29548: PPOPN 2
29550: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29551: LD_EXP 38
29555: PUSH
29556: LD_EXP 69
29560: AND
29561: IFFALSE 29701
29563: GO 29565
29565: DISABLE
29566: LD_INT 0
29568: PPUSH
29569: PPUSH
// begin ToLua ( displayPowell(); ) ;
29570: LD_STRING displayPowell();
29572: PPUSH
29573: CALL_OW 559
// uc_side := 0 ;
29577: LD_ADDR_OWVAR 20
29581: PUSH
29582: LD_INT 0
29584: ST_TO_ADDR
// uc_nation := 2 ;
29585: LD_ADDR_OWVAR 21
29589: PUSH
29590: LD_INT 2
29592: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29593: LD_ADDR_OWVAR 37
29597: PUSH
29598: LD_INT 14
29600: ST_TO_ADDR
// vc_engine := engine_siberite ;
29601: LD_ADDR_OWVAR 39
29605: PUSH
29606: LD_INT 3
29608: ST_TO_ADDR
// vc_control := control_apeman ;
29609: LD_ADDR_OWVAR 38
29613: PUSH
29614: LD_INT 5
29616: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29617: LD_ADDR_OWVAR 40
29621: PUSH
29622: LD_INT 29
29624: ST_TO_ADDR
// un := CreateVehicle ;
29625: LD_ADDR_VAR 0 2
29629: PUSH
29630: CALL_OW 45
29634: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29635: LD_VAR 0 2
29639: PPUSH
29640: LD_INT 1
29642: PPUSH
29643: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29647: LD_INT 35
29649: PPUSH
29650: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29654: LD_VAR 0 2
29658: PPUSH
29659: LD_INT 22
29661: PUSH
29662: LD_OWVAR 2
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PPUSH
29671: CALL_OW 69
29675: PPUSH
29676: LD_VAR 0 2
29680: PPUSH
29681: CALL_OW 74
29685: PPUSH
29686: CALL_OW 115
// until IsDead ( un ) ;
29690: LD_VAR 0 2
29694: PPUSH
29695: CALL_OW 301
29699: IFFALSE 29647
// end ;
29701: PPOPN 2
29703: END
// every 0 0$1 trigger StreamModeActive and sStu do
29704: LD_EXP 38
29708: PUSH
29709: LD_EXP 77
29713: AND
29714: IFFALSE 29730
29716: GO 29718
29718: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29719: LD_STRING displayStucuk();
29721: PPUSH
29722: CALL_OW 559
// ResetFog ;
29726: CALL_OW 335
// end ;
29730: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29731: LD_EXP 38
29735: PUSH
29736: LD_EXP 70
29740: AND
29741: IFFALSE 29882
29743: GO 29745
29745: DISABLE
29746: LD_INT 0
29748: PPUSH
29749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29750: LD_ADDR_VAR 0 2
29754: PUSH
29755: LD_INT 22
29757: PUSH
29758: LD_OWVAR 2
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 21
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PPUSH
29781: CALL_OW 69
29785: ST_TO_ADDR
// if not tmp then
29786: LD_VAR 0 2
29790: NOT
29791: IFFALSE 29795
// exit ;
29793: GO 29882
// un := tmp [ rand ( 1 , tmp ) ] ;
29795: LD_ADDR_VAR 0 1
29799: PUSH
29800: LD_VAR 0 2
29804: PUSH
29805: LD_INT 1
29807: PPUSH
29808: LD_VAR 0 2
29812: PPUSH
29813: CALL_OW 12
29817: ARRAY
29818: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29819: LD_VAR 0 1
29823: PPUSH
29824: LD_INT 0
29826: PPUSH
29827: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29831: LD_VAR 0 1
29835: PPUSH
29836: LD_OWVAR 3
29840: PUSH
29841: LD_VAR 0 1
29845: DIFF
29846: PPUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: CALL_OW 74
29856: PPUSH
29857: CALL_OW 115
// wait ( 0 0$20 ) ;
29861: LD_INT 700
29863: PPUSH
29864: CALL_OW 67
// SetSide ( un , your_side ) ;
29868: LD_VAR 0 1
29872: PPUSH
29873: LD_OWVAR 2
29877: PPUSH
29878: CALL_OW 235
// end ;
29882: PPOPN 2
29884: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29885: LD_EXP 38
29889: PUSH
29890: LD_EXP 71
29894: AND
29895: IFFALSE 30001
29897: GO 29899
29899: DISABLE
29900: LD_INT 0
29902: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29903: LD_ADDR_VAR 0 1
29907: PUSH
29908: LD_INT 22
29910: PUSH
29911: LD_OWVAR 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 2
29922: PUSH
29923: LD_INT 30
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 30
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: LIST
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PPUSH
29952: CALL_OW 69
29956: ST_TO_ADDR
// if not depot then
29957: LD_VAR 0 1
29961: NOT
29962: IFFALSE 29966
// exit ;
29964: GO 30001
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29966: LD_VAR 0 1
29970: PUSH
29971: LD_INT 1
29973: ARRAY
29974: PPUSH
29975: CALL_OW 250
29979: PPUSH
29980: LD_VAR 0 1
29984: PUSH
29985: LD_INT 1
29987: ARRAY
29988: PPUSH
29989: CALL_OW 251
29993: PPUSH
29994: LD_INT 70
29996: PPUSH
29997: CALL_OW 495
// end ;
30001: PPOPN 1
30003: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30004: LD_EXP 38
30008: PUSH
30009: LD_EXP 72
30013: AND
30014: IFFALSE 30225
30016: GO 30018
30018: DISABLE
30019: LD_INT 0
30021: PPUSH
30022: PPUSH
30023: PPUSH
30024: PPUSH
30025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30026: LD_ADDR_VAR 0 5
30030: PUSH
30031: LD_INT 22
30033: PUSH
30034: LD_OWVAR 2
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 21
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PPUSH
30057: CALL_OW 69
30061: ST_TO_ADDR
// if not tmp then
30062: LD_VAR 0 5
30066: NOT
30067: IFFALSE 30071
// exit ;
30069: GO 30225
// for i in tmp do
30071: LD_ADDR_VAR 0 1
30075: PUSH
30076: LD_VAR 0 5
30080: PUSH
30081: FOR_IN
30082: IFFALSE 30223
// begin d := rand ( 0 , 5 ) ;
30084: LD_ADDR_VAR 0 4
30088: PUSH
30089: LD_INT 0
30091: PPUSH
30092: LD_INT 5
30094: PPUSH
30095: CALL_OW 12
30099: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30100: LD_ADDR_VAR 0 2
30104: PUSH
30105: LD_VAR 0 1
30109: PPUSH
30110: CALL_OW 250
30114: PPUSH
30115: LD_VAR 0 4
30119: PPUSH
30120: LD_INT 3
30122: PPUSH
30123: LD_INT 12
30125: PPUSH
30126: CALL_OW 12
30130: PPUSH
30131: CALL_OW 272
30135: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30136: LD_ADDR_VAR 0 3
30140: PUSH
30141: LD_VAR 0 1
30145: PPUSH
30146: CALL_OW 251
30150: PPUSH
30151: LD_VAR 0 4
30155: PPUSH
30156: LD_INT 3
30158: PPUSH
30159: LD_INT 12
30161: PPUSH
30162: CALL_OW 12
30166: PPUSH
30167: CALL_OW 273
30171: ST_TO_ADDR
// if ValidHex ( x , y ) then
30172: LD_VAR 0 2
30176: PPUSH
30177: LD_VAR 0 3
30181: PPUSH
30182: CALL_OW 488
30186: IFFALSE 30221
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30188: LD_VAR 0 1
30192: PPUSH
30193: LD_VAR 0 2
30197: PPUSH
30198: LD_VAR 0 3
30202: PPUSH
30203: LD_INT 3
30205: PPUSH
30206: LD_INT 6
30208: PPUSH
30209: CALL_OW 12
30213: PPUSH
30214: LD_INT 1
30216: PPUSH
30217: CALL_OW 483
// end ;
30221: GO 30081
30223: POP
30224: POP
// end ;
30225: PPOPN 5
30227: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30228: LD_EXP 38
30232: PUSH
30233: LD_EXP 73
30237: AND
30238: IFFALSE 30332
30240: GO 30242
30242: DISABLE
30243: LD_INT 0
30245: PPUSH
30246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30247: LD_ADDR_VAR 0 2
30251: PUSH
30252: LD_INT 22
30254: PUSH
30255: LD_OWVAR 2
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 32
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 21
30276: PUSH
30277: LD_INT 2
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: PPUSH
30289: CALL_OW 69
30293: ST_TO_ADDR
// if not tmp then
30294: LD_VAR 0 2
30298: NOT
30299: IFFALSE 30303
// exit ;
30301: GO 30332
// for i in tmp do
30303: LD_ADDR_VAR 0 1
30307: PUSH
30308: LD_VAR 0 2
30312: PUSH
30313: FOR_IN
30314: IFFALSE 30330
// SetFuel ( i , 0 ) ;
30316: LD_VAR 0 1
30320: PPUSH
30321: LD_INT 0
30323: PPUSH
30324: CALL_OW 240
30328: GO 30313
30330: POP
30331: POP
// end ;
30332: PPOPN 2
30334: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30335: LD_EXP 38
30339: PUSH
30340: LD_EXP 74
30344: AND
30345: IFFALSE 30411
30347: GO 30349
30349: DISABLE
30350: LD_INT 0
30352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30353: LD_ADDR_VAR 0 1
30357: PUSH
30358: LD_INT 22
30360: PUSH
30361: LD_OWVAR 2
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 30
30372: PUSH
30373: LD_INT 29
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PPUSH
30384: CALL_OW 69
30388: ST_TO_ADDR
// if not tmp then
30389: LD_VAR 0 1
30393: NOT
30394: IFFALSE 30398
// exit ;
30396: GO 30411
// DestroyUnit ( tmp [ 1 ] ) ;
30398: LD_VAR 0 1
30402: PUSH
30403: LD_INT 1
30405: ARRAY
30406: PPUSH
30407: CALL_OW 65
// end ;
30411: PPOPN 1
30413: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30414: LD_EXP 38
30418: PUSH
30419: LD_EXP 76
30423: AND
30424: IFFALSE 30553
30426: GO 30428
30428: DISABLE
30429: LD_INT 0
30431: PPUSH
// begin uc_side := 0 ;
30432: LD_ADDR_OWVAR 20
30436: PUSH
30437: LD_INT 0
30439: ST_TO_ADDR
// uc_nation := nation_arabian ;
30440: LD_ADDR_OWVAR 21
30444: PUSH
30445: LD_INT 2
30447: ST_TO_ADDR
// hc_gallery :=  ;
30448: LD_ADDR_OWVAR 33
30452: PUSH
30453: LD_STRING 
30455: ST_TO_ADDR
// hc_name :=  ;
30456: LD_ADDR_OWVAR 26
30460: PUSH
30461: LD_STRING 
30463: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30464: LD_INT 1
30466: PPUSH
30467: LD_INT 11
30469: PPUSH
30470: LD_INT 10
30472: PPUSH
30473: CALL_OW 380
// un := CreateHuman ;
30477: LD_ADDR_VAR 0 1
30481: PUSH
30482: CALL_OW 44
30486: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30487: LD_VAR 0 1
30491: PPUSH
30492: LD_INT 1
30494: PPUSH
30495: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30499: LD_INT 35
30501: PPUSH
30502: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30506: LD_VAR 0 1
30510: PPUSH
30511: LD_INT 22
30513: PUSH
30514: LD_OWVAR 2
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PPUSH
30523: CALL_OW 69
30527: PPUSH
30528: LD_VAR 0 1
30532: PPUSH
30533: CALL_OW 74
30537: PPUSH
30538: CALL_OW 115
// until IsDead ( un ) ;
30542: LD_VAR 0 1
30546: PPUSH
30547: CALL_OW 301
30551: IFFALSE 30499
// end ;
30553: PPOPN 1
30555: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30556: LD_EXP 38
30560: PUSH
30561: LD_EXP 78
30565: AND
30566: IFFALSE 30578
30568: GO 30570
30570: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30571: LD_STRING earthquake(getX(game), 0, 32)
30573: PPUSH
30574: CALL_OW 559
30578: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30579: LD_EXP 38
30583: PUSH
30584: LD_EXP 79
30588: AND
30589: IFFALSE 30680
30591: GO 30593
30593: DISABLE
30594: LD_INT 0
30596: PPUSH
// begin enable ;
30597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30598: LD_ADDR_VAR 0 1
30602: PUSH
30603: LD_INT 22
30605: PUSH
30606: LD_OWVAR 2
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 21
30617: PUSH
30618: LD_INT 2
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 33
30627: PUSH
30628: LD_INT 3
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: LIST
30639: PPUSH
30640: CALL_OW 69
30644: ST_TO_ADDR
// if not tmp then
30645: LD_VAR 0 1
30649: NOT
30650: IFFALSE 30654
// exit ;
30652: GO 30680
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30654: LD_VAR 0 1
30658: PUSH
30659: LD_INT 1
30661: PPUSH
30662: LD_VAR 0 1
30666: PPUSH
30667: CALL_OW 12
30671: ARRAY
30672: PPUSH
30673: LD_INT 1
30675: PPUSH
30676: CALL_OW 234
// end ;
30680: PPOPN 1
30682: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30683: LD_EXP 38
30687: PUSH
30688: LD_EXP 80
30692: AND
30693: IFFALSE 30834
30695: GO 30697
30697: DISABLE
30698: LD_INT 0
30700: PPUSH
30701: PPUSH
30702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30703: LD_ADDR_VAR 0 3
30707: PUSH
30708: LD_INT 22
30710: PUSH
30711: LD_OWVAR 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 25
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PPUSH
30734: CALL_OW 69
30738: ST_TO_ADDR
// if not tmp then
30739: LD_VAR 0 3
30743: NOT
30744: IFFALSE 30748
// exit ;
30746: GO 30834
// un := tmp [ rand ( 1 , tmp ) ] ;
30748: LD_ADDR_VAR 0 2
30752: PUSH
30753: LD_VAR 0 3
30757: PUSH
30758: LD_INT 1
30760: PPUSH
30761: LD_VAR 0 3
30765: PPUSH
30766: CALL_OW 12
30770: ARRAY
30771: ST_TO_ADDR
// if Crawls ( un ) then
30772: LD_VAR 0 2
30776: PPUSH
30777: CALL_OW 318
30781: IFFALSE 30792
// ComWalk ( un ) ;
30783: LD_VAR 0 2
30787: PPUSH
30788: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30792: LD_VAR 0 2
30796: PPUSH
30797: LD_INT 9
30799: PPUSH
30800: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30804: LD_INT 28
30806: PPUSH
30807: LD_OWVAR 2
30811: PPUSH
30812: LD_INT 2
30814: PPUSH
30815: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30819: LD_INT 29
30821: PPUSH
30822: LD_OWVAR 2
30826: PPUSH
30827: LD_INT 2
30829: PPUSH
30830: CALL_OW 322
// end ;
30834: PPOPN 3
30836: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30837: LD_EXP 38
30841: PUSH
30842: LD_EXP 81
30846: AND
30847: IFFALSE 30958
30849: GO 30851
30851: DISABLE
30852: LD_INT 0
30854: PPUSH
30855: PPUSH
30856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30857: LD_ADDR_VAR 0 3
30861: PUSH
30862: LD_INT 22
30864: PUSH
30865: LD_OWVAR 2
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 25
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PPUSH
30888: CALL_OW 69
30892: ST_TO_ADDR
// if not tmp then
30893: LD_VAR 0 3
30897: NOT
30898: IFFALSE 30902
// exit ;
30900: GO 30958
// un := tmp [ rand ( 1 , tmp ) ] ;
30902: LD_ADDR_VAR 0 2
30906: PUSH
30907: LD_VAR 0 3
30911: PUSH
30912: LD_INT 1
30914: PPUSH
30915: LD_VAR 0 3
30919: PPUSH
30920: CALL_OW 12
30924: ARRAY
30925: ST_TO_ADDR
// if Crawls ( un ) then
30926: LD_VAR 0 2
30930: PPUSH
30931: CALL_OW 318
30935: IFFALSE 30946
// ComWalk ( un ) ;
30937: LD_VAR 0 2
30941: PPUSH
30942: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30946: LD_VAR 0 2
30950: PPUSH
30951: LD_INT 8
30953: PPUSH
30954: CALL_OW 336
// end ;
30958: PPOPN 3
30960: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30961: LD_EXP 38
30965: PUSH
30966: LD_EXP 82
30970: AND
30971: IFFALSE 31115
30973: GO 30975
30975: DISABLE
30976: LD_INT 0
30978: PPUSH
30979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30980: LD_ADDR_VAR 0 2
30984: PUSH
30985: LD_INT 22
30987: PUSH
30988: LD_OWVAR 2
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 21
30999: PUSH
31000: LD_INT 2
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 34
31012: PUSH
31013: LD_INT 12
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 34
31022: PUSH
31023: LD_INT 51
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 34
31032: PUSH
31033: LD_INT 32
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: PPUSH
31051: CALL_OW 69
31055: ST_TO_ADDR
// if not tmp then
31056: LD_VAR 0 2
31060: NOT
31061: IFFALSE 31065
// exit ;
31063: GO 31115
// for i in tmp do
31065: LD_ADDR_VAR 0 1
31069: PUSH
31070: LD_VAR 0 2
31074: PUSH
31075: FOR_IN
31076: IFFALSE 31113
// if GetCargo ( i , mat_artifact ) = 0 then
31078: LD_VAR 0 1
31082: PPUSH
31083: LD_INT 4
31085: PPUSH
31086: CALL_OW 289
31090: PUSH
31091: LD_INT 0
31093: EQUAL
31094: IFFALSE 31111
// SetCargo ( i , mat_siberit , 100 ) ;
31096: LD_VAR 0 1
31100: PPUSH
31101: LD_INT 3
31103: PPUSH
31104: LD_INT 100
31106: PPUSH
31107: CALL_OW 290
31111: GO 31075
31113: POP
31114: POP
// end ;
31115: PPOPN 2
31117: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31118: LD_EXP 38
31122: PUSH
31123: LD_EXP 83
31127: AND
31128: IFFALSE 31311
31130: GO 31132
31132: DISABLE
31133: LD_INT 0
31135: PPUSH
31136: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31137: LD_ADDR_VAR 0 2
31141: PUSH
31142: LD_INT 22
31144: PUSH
31145: LD_OWVAR 2
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PPUSH
31154: CALL_OW 69
31158: ST_TO_ADDR
// if not tmp then
31159: LD_VAR 0 2
31163: NOT
31164: IFFALSE 31168
// exit ;
31166: GO 31311
// for i := 1 to 2 do
31168: LD_ADDR_VAR 0 1
31172: PUSH
31173: DOUBLE
31174: LD_INT 1
31176: DEC
31177: ST_TO_ADDR
31178: LD_INT 2
31180: PUSH
31181: FOR_TO
31182: IFFALSE 31309
// begin uc_side := your_side ;
31184: LD_ADDR_OWVAR 20
31188: PUSH
31189: LD_OWVAR 2
31193: ST_TO_ADDR
// uc_nation := nation_american ;
31194: LD_ADDR_OWVAR 21
31198: PUSH
31199: LD_INT 1
31201: ST_TO_ADDR
// vc_chassis := us_morphling ;
31202: LD_ADDR_OWVAR 37
31206: PUSH
31207: LD_INT 5
31209: ST_TO_ADDR
// vc_engine := engine_siberite ;
31210: LD_ADDR_OWVAR 39
31214: PUSH
31215: LD_INT 3
31217: ST_TO_ADDR
// vc_control := control_computer ;
31218: LD_ADDR_OWVAR 38
31222: PUSH
31223: LD_INT 3
31225: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31226: LD_ADDR_OWVAR 40
31230: PUSH
31231: LD_INT 10
31233: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31234: LD_VAR 0 2
31238: PUSH
31239: LD_INT 1
31241: ARRAY
31242: PPUSH
31243: CALL_OW 310
31247: NOT
31248: IFFALSE 31295
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31250: CALL_OW 45
31254: PPUSH
31255: LD_VAR 0 2
31259: PUSH
31260: LD_INT 1
31262: ARRAY
31263: PPUSH
31264: CALL_OW 250
31268: PPUSH
31269: LD_VAR 0 2
31273: PUSH
31274: LD_INT 1
31276: ARRAY
31277: PPUSH
31278: CALL_OW 251
31282: PPUSH
31283: LD_INT 12
31285: PPUSH
31286: LD_INT 1
31288: PPUSH
31289: CALL_OW 50
31293: GO 31307
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31295: CALL_OW 45
31299: PPUSH
31300: LD_INT 1
31302: PPUSH
31303: CALL_OW 51
// end ;
31307: GO 31181
31309: POP
31310: POP
// end ;
31311: PPOPN 2
31313: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31314: LD_EXP 38
31318: PUSH
31319: LD_EXP 84
31323: AND
31324: IFFALSE 31546
31326: GO 31328
31328: DISABLE
31329: LD_INT 0
31331: PPUSH
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
31336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31337: LD_ADDR_VAR 0 6
31341: PUSH
31342: LD_INT 22
31344: PUSH
31345: LD_OWVAR 2
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 21
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 3
31366: PUSH
31367: LD_INT 23
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: PPUSH
31386: CALL_OW 69
31390: ST_TO_ADDR
// if not tmp then
31391: LD_VAR 0 6
31395: NOT
31396: IFFALSE 31400
// exit ;
31398: GO 31546
// s1 := rand ( 1 , 4 ) ;
31400: LD_ADDR_VAR 0 2
31404: PUSH
31405: LD_INT 1
31407: PPUSH
31408: LD_INT 4
31410: PPUSH
31411: CALL_OW 12
31415: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31416: LD_ADDR_VAR 0 4
31420: PUSH
31421: LD_VAR 0 6
31425: PUSH
31426: LD_INT 1
31428: ARRAY
31429: PPUSH
31430: LD_VAR 0 2
31434: PPUSH
31435: CALL_OW 259
31439: ST_TO_ADDR
// if s1 = 1 then
31440: LD_VAR 0 2
31444: PUSH
31445: LD_INT 1
31447: EQUAL
31448: IFFALSE 31468
// s2 := rand ( 2 , 4 ) else
31450: LD_ADDR_VAR 0 3
31454: PUSH
31455: LD_INT 2
31457: PPUSH
31458: LD_INT 4
31460: PPUSH
31461: CALL_OW 12
31465: ST_TO_ADDR
31466: GO 31476
// s2 := 1 ;
31468: LD_ADDR_VAR 0 3
31472: PUSH
31473: LD_INT 1
31475: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31476: LD_ADDR_VAR 0 5
31480: PUSH
31481: LD_VAR 0 6
31485: PUSH
31486: LD_INT 1
31488: ARRAY
31489: PPUSH
31490: LD_VAR 0 3
31494: PPUSH
31495: CALL_OW 259
31499: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31500: LD_VAR 0 6
31504: PUSH
31505: LD_INT 1
31507: ARRAY
31508: PPUSH
31509: LD_VAR 0 2
31513: PPUSH
31514: LD_VAR 0 5
31518: PPUSH
31519: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31523: LD_VAR 0 6
31527: PUSH
31528: LD_INT 1
31530: ARRAY
31531: PPUSH
31532: LD_VAR 0 3
31536: PPUSH
31537: LD_VAR 0 4
31541: PPUSH
31542: CALL_OW 237
// end ;
31546: PPOPN 6
31548: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31549: LD_EXP 38
31553: PUSH
31554: LD_EXP 85
31558: AND
31559: IFFALSE 31638
31561: GO 31563
31563: DISABLE
31564: LD_INT 0
31566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31567: LD_ADDR_VAR 0 1
31571: PUSH
31572: LD_INT 22
31574: PUSH
31575: LD_OWVAR 2
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 30
31586: PUSH
31587: LD_INT 3
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PPUSH
31598: CALL_OW 69
31602: ST_TO_ADDR
// if not tmp then
31603: LD_VAR 0 1
31607: NOT
31608: IFFALSE 31612
// exit ;
31610: GO 31638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31612: LD_VAR 0 1
31616: PUSH
31617: LD_INT 1
31619: PPUSH
31620: LD_VAR 0 1
31624: PPUSH
31625: CALL_OW 12
31629: ARRAY
31630: PPUSH
31631: LD_INT 1
31633: PPUSH
31634: CALL_OW 234
// end ;
31638: PPOPN 1
31640: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31641: LD_EXP 38
31645: PUSH
31646: LD_EXP 86
31650: AND
31651: IFFALSE 31763
31653: GO 31655
31655: DISABLE
31656: LD_INT 0
31658: PPUSH
31659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31660: LD_ADDR_VAR 0 2
31664: PUSH
31665: LD_INT 22
31667: PUSH
31668: LD_OWVAR 2
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: LD_INT 30
31682: PUSH
31683: LD_INT 27
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 30
31692: PUSH
31693: LD_INT 26
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 30
31702: PUSH
31703: LD_INT 28
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PPUSH
31720: CALL_OW 69
31724: ST_TO_ADDR
// if not tmp then
31725: LD_VAR 0 2
31729: NOT
31730: IFFALSE 31734
// exit ;
31732: GO 31763
// for i in tmp do
31734: LD_ADDR_VAR 0 1
31738: PUSH
31739: LD_VAR 0 2
31743: PUSH
31744: FOR_IN
31745: IFFALSE 31761
// SetLives ( i , 1 ) ;
31747: LD_VAR 0 1
31751: PPUSH
31752: LD_INT 1
31754: PPUSH
31755: CALL_OW 234
31759: GO 31744
31761: POP
31762: POP
// end ;
31763: PPOPN 2
31765: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31766: LD_EXP 38
31770: PUSH
31771: LD_EXP 87
31775: AND
31776: IFFALSE 32063
31778: GO 31780
31780: DISABLE
31781: LD_INT 0
31783: PPUSH
31784: PPUSH
31785: PPUSH
// begin i := rand ( 1 , 7 ) ;
31786: LD_ADDR_VAR 0 1
31790: PUSH
31791: LD_INT 1
31793: PPUSH
31794: LD_INT 7
31796: PPUSH
31797: CALL_OW 12
31801: ST_TO_ADDR
// case i of 1 :
31802: LD_VAR 0 1
31806: PUSH
31807: LD_INT 1
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31825
31815: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31816: LD_STRING earthquake(getX(game), 0, 32)
31818: PPUSH
31819: CALL_OW 559
31823: GO 32063
31825: LD_INT 2
31827: DOUBLE
31828: EQUAL
31829: IFTRUE 31833
31831: GO 31847
31833: POP
// begin ToLua ( displayStucuk(); ) ;
31834: LD_STRING displayStucuk();
31836: PPUSH
31837: CALL_OW 559
// ResetFog ;
31841: CALL_OW 335
// end ; 3 :
31845: GO 32063
31847: LD_INT 3
31849: DOUBLE
31850: EQUAL
31851: IFTRUE 31855
31853: GO 31959
31855: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31856: LD_ADDR_VAR 0 2
31860: PUSH
31861: LD_INT 22
31863: PUSH
31864: LD_OWVAR 2
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 25
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PPUSH
31887: CALL_OW 69
31891: ST_TO_ADDR
// if not tmp then
31892: LD_VAR 0 2
31896: NOT
31897: IFFALSE 31901
// exit ;
31899: GO 32063
// un := tmp [ rand ( 1 , tmp ) ] ;
31901: LD_ADDR_VAR 0 3
31905: PUSH
31906: LD_VAR 0 2
31910: PUSH
31911: LD_INT 1
31913: PPUSH
31914: LD_VAR 0 2
31918: PPUSH
31919: CALL_OW 12
31923: ARRAY
31924: ST_TO_ADDR
// if Crawls ( un ) then
31925: LD_VAR 0 3
31929: PPUSH
31930: CALL_OW 318
31934: IFFALSE 31945
// ComWalk ( un ) ;
31936: LD_VAR 0 3
31940: PPUSH
31941: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31945: LD_VAR 0 3
31949: PPUSH
31950: LD_INT 8
31952: PPUSH
31953: CALL_OW 336
// end ; 4 :
31957: GO 32063
31959: LD_INT 4
31961: DOUBLE
31962: EQUAL
31963: IFTRUE 31967
31965: GO 32041
31967: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31968: LD_ADDR_VAR 0 2
31972: PUSH
31973: LD_INT 22
31975: PUSH
31976: LD_OWVAR 2
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 30
31987: PUSH
31988: LD_INT 29
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PPUSH
31999: CALL_OW 69
32003: ST_TO_ADDR
// if not tmp then
32004: LD_VAR 0 2
32008: NOT
32009: IFFALSE 32013
// exit ;
32011: GO 32063
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32013: LD_VAR 0 2
32017: PUSH
32018: LD_INT 1
32020: ARRAY
32021: PPUSH
32022: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32026: LD_VAR 0 2
32030: PUSH
32031: LD_INT 1
32033: ARRAY
32034: PPUSH
32035: CALL_OW 65
// end ; 5 .. 7 :
32039: GO 32063
32041: LD_INT 5
32043: DOUBLE
32044: GREATEREQUAL
32045: IFFALSE 32053
32047: LD_INT 7
32049: DOUBLE
32050: LESSEQUAL
32051: IFTRUE 32055
32053: GO 32062
32055: POP
// StreamSibBomb ; end ;
32056: CALL 28300 0 0
32060: GO 32063
32062: POP
// end ;
32063: PPOPN 3
32065: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32066: LD_EXP 38
32070: PUSH
32071: LD_EXP 88
32075: AND
32076: IFFALSE 32232
32078: GO 32080
32080: DISABLE
32081: LD_INT 0
32083: PPUSH
32084: PPUSH
32085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32086: LD_ADDR_VAR 0 2
32090: PUSH
32091: LD_INT 81
32093: PUSH
32094: LD_OWVAR 2
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: LD_INT 21
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 21
32118: PUSH
32119: LD_INT 2
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PPUSH
32135: CALL_OW 69
32139: ST_TO_ADDR
// if not tmp then
32140: LD_VAR 0 2
32144: NOT
32145: IFFALSE 32149
// exit ;
32147: GO 32232
// p := 0 ;
32149: LD_ADDR_VAR 0 3
32153: PUSH
32154: LD_INT 0
32156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32157: LD_INT 35
32159: PPUSH
32160: CALL_OW 67
// p := p + 1 ;
32164: LD_ADDR_VAR 0 3
32168: PUSH
32169: LD_VAR 0 3
32173: PUSH
32174: LD_INT 1
32176: PLUS
32177: ST_TO_ADDR
// for i in tmp do
32178: LD_ADDR_VAR 0 1
32182: PUSH
32183: LD_VAR 0 2
32187: PUSH
32188: FOR_IN
32189: IFFALSE 32220
// if GetLives ( i ) < 1000 then
32191: LD_VAR 0 1
32195: PPUSH
32196: CALL_OW 256
32200: PUSH
32201: LD_INT 1000
32203: LESS
32204: IFFALSE 32218
// SetLives ( i , 1000 ) ;
32206: LD_VAR 0 1
32210: PPUSH
32211: LD_INT 1000
32213: PPUSH
32214: CALL_OW 234
32218: GO 32188
32220: POP
32221: POP
// until p > 20 ;
32222: LD_VAR 0 3
32226: PUSH
32227: LD_INT 20
32229: GREATER
32230: IFFALSE 32157
// end ;
32232: PPOPN 3
32234: END
// every 0 0$1 trigger StreamModeActive and sTime do
32235: LD_EXP 38
32239: PUSH
32240: LD_EXP 89
32244: AND
32245: IFFALSE 32280
32247: GO 32249
32249: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32250: LD_INT 28
32252: PPUSH
32253: LD_OWVAR 2
32257: PPUSH
32258: LD_INT 2
32260: PPUSH
32261: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32265: LD_INT 30
32267: PPUSH
32268: LD_OWVAR 2
32272: PPUSH
32273: LD_INT 2
32275: PPUSH
32276: CALL_OW 322
// end ;
32280: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32281: LD_EXP 38
32285: PUSH
32286: LD_EXP 90
32290: AND
32291: IFFALSE 32412
32293: GO 32295
32295: DISABLE
32296: LD_INT 0
32298: PPUSH
32299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32300: LD_ADDR_VAR 0 2
32304: PUSH
32305: LD_INT 22
32307: PUSH
32308: LD_OWVAR 2
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 21
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 3
32329: PUSH
32330: LD_INT 23
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: PPUSH
32349: CALL_OW 69
32353: ST_TO_ADDR
// if not tmp then
32354: LD_VAR 0 2
32358: NOT
32359: IFFALSE 32363
// exit ;
32361: GO 32412
// for i in tmp do
32363: LD_ADDR_VAR 0 1
32367: PUSH
32368: LD_VAR 0 2
32372: PUSH
32373: FOR_IN
32374: IFFALSE 32410
// begin if Crawls ( i ) then
32376: LD_VAR 0 1
32380: PPUSH
32381: CALL_OW 318
32385: IFFALSE 32396
// ComWalk ( i ) ;
32387: LD_VAR 0 1
32391: PPUSH
32392: CALL_OW 138
// SetClass ( i , 2 ) ;
32396: LD_VAR 0 1
32400: PPUSH
32401: LD_INT 2
32403: PPUSH
32404: CALL_OW 336
// end ;
32408: GO 32373
32410: POP
32411: POP
// end ;
32412: PPOPN 2
32414: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32415: LD_EXP 38
32419: PUSH
32420: LD_EXP 91
32424: AND
32425: IFFALSE 32713
32427: GO 32429
32429: DISABLE
32430: LD_INT 0
32432: PPUSH
32433: PPUSH
32434: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32435: LD_OWVAR 2
32439: PPUSH
32440: LD_INT 9
32442: PPUSH
32443: LD_INT 1
32445: PPUSH
32446: LD_INT 1
32448: PPUSH
32449: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32453: LD_INT 9
32455: PPUSH
32456: LD_OWVAR 2
32460: PPUSH
32461: CALL_OW 343
// uc_side := 9 ;
32465: LD_ADDR_OWVAR 20
32469: PUSH
32470: LD_INT 9
32472: ST_TO_ADDR
// uc_nation := 2 ;
32473: LD_ADDR_OWVAR 21
32477: PUSH
32478: LD_INT 2
32480: ST_TO_ADDR
// hc_name := Dark Warrior ;
32481: LD_ADDR_OWVAR 26
32485: PUSH
32486: LD_STRING Dark Warrior
32488: ST_TO_ADDR
// hc_gallery :=  ;
32489: LD_ADDR_OWVAR 33
32493: PUSH
32494: LD_STRING 
32496: ST_TO_ADDR
// hc_noskilllimit := true ;
32497: LD_ADDR_OWVAR 76
32501: PUSH
32502: LD_INT 1
32504: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32505: LD_ADDR_OWVAR 31
32509: PUSH
32510: LD_INT 30
32512: PUSH
32513: LD_INT 30
32515: PUSH
32516: LD_INT 30
32518: PUSH
32519: LD_INT 30
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: ST_TO_ADDR
// un := CreateHuman ;
32528: LD_ADDR_VAR 0 3
32532: PUSH
32533: CALL_OW 44
32537: ST_TO_ADDR
// hc_noskilllimit := false ;
32538: LD_ADDR_OWVAR 76
32542: PUSH
32543: LD_INT 0
32545: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32546: LD_VAR 0 3
32550: PPUSH
32551: LD_INT 1
32553: PPUSH
32554: CALL_OW 51
// ToLua ( playRanger() ) ;
32558: LD_STRING playRanger()
32560: PPUSH
32561: CALL_OW 559
// p := 0 ;
32565: LD_ADDR_VAR 0 2
32569: PUSH
32570: LD_INT 0
32572: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32573: LD_INT 35
32575: PPUSH
32576: CALL_OW 67
// p := p + 1 ;
32580: LD_ADDR_VAR 0 2
32584: PUSH
32585: LD_VAR 0 2
32589: PUSH
32590: LD_INT 1
32592: PLUS
32593: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32594: LD_VAR 0 3
32598: PPUSH
32599: CALL_OW 256
32603: PUSH
32604: LD_INT 1000
32606: LESS
32607: IFFALSE 32621
// SetLives ( un , 1000 ) ;
32609: LD_VAR 0 3
32613: PPUSH
32614: LD_INT 1000
32616: PPUSH
32617: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32621: LD_VAR 0 3
32625: PPUSH
32626: LD_INT 81
32628: PUSH
32629: LD_OWVAR 2
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 91
32640: PUSH
32641: LD_VAR 0 3
32645: PUSH
32646: LD_INT 30
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: LIST
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PPUSH
32658: CALL_OW 69
32662: PPUSH
32663: LD_VAR 0 3
32667: PPUSH
32668: CALL_OW 74
32672: PPUSH
32673: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32677: LD_VAR 0 2
32681: PUSH
32682: LD_INT 80
32684: GREATER
32685: PUSH
32686: LD_VAR 0 3
32690: PPUSH
32691: CALL_OW 301
32695: OR
32696: IFFALSE 32573
// if un then
32698: LD_VAR 0 3
32702: IFFALSE 32713
// RemoveUnit ( un ) ;
32704: LD_VAR 0 3
32708: PPUSH
32709: CALL_OW 64
// end ;
32713: PPOPN 3
32715: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32716: LD_EXP 92
32720: IFFALSE 32836
32722: GO 32724
32724: DISABLE
32725: LD_INT 0
32727: PPUSH
32728: PPUSH
32729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32730: LD_ADDR_VAR 0 2
32734: PUSH
32735: LD_INT 81
32737: PUSH
32738: LD_OWVAR 2
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 21
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PPUSH
32761: CALL_OW 69
32765: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32766: LD_STRING playComputer()
32768: PPUSH
32769: CALL_OW 559
// if not tmp then
32773: LD_VAR 0 2
32777: NOT
32778: IFFALSE 32782
// exit ;
32780: GO 32836
// for i in tmp do
32782: LD_ADDR_VAR 0 1
32786: PUSH
32787: LD_VAR 0 2
32791: PUSH
32792: FOR_IN
32793: IFFALSE 32834
// for j := 1 to 4 do
32795: LD_ADDR_VAR 0 3
32799: PUSH
32800: DOUBLE
32801: LD_INT 1
32803: DEC
32804: ST_TO_ADDR
32805: LD_INT 4
32807: PUSH
32808: FOR_TO
32809: IFFALSE 32830
// SetSkill ( i , j , 10 ) ;
32811: LD_VAR 0 1
32815: PPUSH
32816: LD_VAR 0 3
32820: PPUSH
32821: LD_INT 10
32823: PPUSH
32824: CALL_OW 237
32828: GO 32808
32830: POP
32831: POP
32832: GO 32792
32834: POP
32835: POP
// end ;
32836: PPOPN 3
32838: END
// every 0 0$1 trigger s30 do var i , tmp ;
32839: LD_EXP 93
32843: IFFALSE 32912
32845: GO 32847
32847: DISABLE
32848: LD_INT 0
32850: PPUSH
32851: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32852: LD_ADDR_VAR 0 2
32856: PUSH
32857: LD_INT 22
32859: PUSH
32860: LD_OWVAR 2
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PPUSH
32869: CALL_OW 69
32873: ST_TO_ADDR
// if not tmp then
32874: LD_VAR 0 2
32878: NOT
32879: IFFALSE 32883
// exit ;
32881: GO 32912
// for i in tmp do
32883: LD_ADDR_VAR 0 1
32887: PUSH
32888: LD_VAR 0 2
32892: PUSH
32893: FOR_IN
32894: IFFALSE 32910
// SetLives ( i , 300 ) ;
32896: LD_VAR 0 1
32900: PPUSH
32901: LD_INT 300
32903: PPUSH
32904: CALL_OW 234
32908: GO 32893
32910: POP
32911: POP
// end ;
32912: PPOPN 2
32914: END
// every 0 0$1 trigger s60 do var i , tmp ;
32915: LD_EXP 94
32919: IFFALSE 32988
32921: GO 32923
32923: DISABLE
32924: LD_INT 0
32926: PPUSH
32927: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32928: LD_ADDR_VAR 0 2
32932: PUSH
32933: LD_INT 22
32935: PUSH
32936: LD_OWVAR 2
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PPUSH
32945: CALL_OW 69
32949: ST_TO_ADDR
// if not tmp then
32950: LD_VAR 0 2
32954: NOT
32955: IFFALSE 32959
// exit ;
32957: GO 32988
// for i in tmp do
32959: LD_ADDR_VAR 0 1
32963: PUSH
32964: LD_VAR 0 2
32968: PUSH
32969: FOR_IN
32970: IFFALSE 32986
// SetLives ( i , 600 ) ;
32972: LD_VAR 0 1
32976: PPUSH
32977: LD_INT 600
32979: PPUSH
32980: CALL_OW 234
32984: GO 32969
32986: POP
32987: POP
// end ;
32988: PPOPN 2
32990: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32991: LD_INT 0
32993: PPUSH
// case cmd of 301 :
32994: LD_VAR 0 1
32998: PUSH
32999: LD_INT 301
33001: DOUBLE
33002: EQUAL
33003: IFTRUE 33007
33005: GO 33039
33007: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33008: LD_VAR 0 6
33012: PPUSH
33013: LD_VAR 0 7
33017: PPUSH
33018: LD_VAR 0 8
33022: PPUSH
33023: LD_VAR 0 4
33027: PPUSH
33028: LD_VAR 0 5
33032: PPUSH
33033: CALL 34248 0 5
33037: GO 33160
33039: LD_INT 302
33041: DOUBLE
33042: EQUAL
33043: IFTRUE 33047
33045: GO 33084
33047: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33048: LD_VAR 0 6
33052: PPUSH
33053: LD_VAR 0 7
33057: PPUSH
33058: LD_VAR 0 8
33062: PPUSH
33063: LD_VAR 0 9
33067: PPUSH
33068: LD_VAR 0 4
33072: PPUSH
33073: LD_VAR 0 5
33077: PPUSH
33078: CALL 34339 0 6
33082: GO 33160
33084: LD_INT 303
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33092
33090: GO 33129
33092: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33093: LD_VAR 0 6
33097: PPUSH
33098: LD_VAR 0 7
33102: PPUSH
33103: LD_VAR 0 8
33107: PPUSH
33108: LD_VAR 0 9
33112: PPUSH
33113: LD_VAR 0 4
33117: PPUSH
33118: LD_VAR 0 5
33122: PPUSH
33123: CALL 33165 0 6
33127: GO 33160
33129: LD_INT 304
33131: DOUBLE
33132: EQUAL
33133: IFTRUE 33137
33135: GO 33159
33137: POP
// hHackTeleport ( unit , x , y ) ; end ;
33138: LD_VAR 0 2
33142: PPUSH
33143: LD_VAR 0 4
33147: PPUSH
33148: LD_VAR 0 5
33152: PPUSH
33153: CALL 34932 0 3
33157: GO 33160
33159: POP
// end ;
33160: LD_VAR 0 12
33164: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33165: LD_INT 0
33167: PPUSH
33168: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33169: LD_VAR 0 1
33173: PUSH
33174: LD_INT 1
33176: LESS
33177: PUSH
33178: LD_VAR 0 1
33182: PUSH
33183: LD_INT 3
33185: GREATER
33186: OR
33187: PUSH
33188: LD_VAR 0 5
33192: PPUSH
33193: LD_VAR 0 6
33197: PPUSH
33198: CALL_OW 428
33202: OR
33203: IFFALSE 33207
// exit ;
33205: GO 33935
// uc_side := your_side ;
33207: LD_ADDR_OWVAR 20
33211: PUSH
33212: LD_OWVAR 2
33216: ST_TO_ADDR
// uc_nation := nation ;
33217: LD_ADDR_OWVAR 21
33221: PUSH
33222: LD_VAR 0 1
33226: ST_TO_ADDR
// bc_level = 1 ;
33227: LD_ADDR_OWVAR 43
33231: PUSH
33232: LD_INT 1
33234: ST_TO_ADDR
// case btype of 1 :
33235: LD_VAR 0 2
33239: PUSH
33240: LD_INT 1
33242: DOUBLE
33243: EQUAL
33244: IFTRUE 33248
33246: GO 33259
33248: POP
// bc_type := b_depot ; 2 :
33249: LD_ADDR_OWVAR 42
33253: PUSH
33254: LD_INT 0
33256: ST_TO_ADDR
33257: GO 33879
33259: LD_INT 2
33261: DOUBLE
33262: EQUAL
33263: IFTRUE 33267
33265: GO 33278
33267: POP
// bc_type := b_warehouse ; 3 :
33268: LD_ADDR_OWVAR 42
33272: PUSH
33273: LD_INT 1
33275: ST_TO_ADDR
33276: GO 33879
33278: LD_INT 3
33280: DOUBLE
33281: EQUAL
33282: IFTRUE 33286
33284: GO 33297
33286: POP
// bc_type := b_lab ; 4 .. 9 :
33287: LD_ADDR_OWVAR 42
33291: PUSH
33292: LD_INT 6
33294: ST_TO_ADDR
33295: GO 33879
33297: LD_INT 4
33299: DOUBLE
33300: GREATEREQUAL
33301: IFFALSE 33309
33303: LD_INT 9
33305: DOUBLE
33306: LESSEQUAL
33307: IFTRUE 33311
33309: GO 33371
33311: POP
// begin bc_type := b_lab_half ;
33312: LD_ADDR_OWVAR 42
33316: PUSH
33317: LD_INT 7
33319: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33320: LD_ADDR_OWVAR 44
33324: PUSH
33325: LD_INT 10
33327: PUSH
33328: LD_INT 11
33330: PUSH
33331: LD_INT 12
33333: PUSH
33334: LD_INT 15
33336: PUSH
33337: LD_INT 14
33339: PUSH
33340: LD_INT 13
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: PUSH
33351: LD_VAR 0 2
33355: PUSH
33356: LD_INT 3
33358: MINUS
33359: ARRAY
33360: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33361: LD_ADDR_OWVAR 45
33365: PUSH
33366: LD_INT 9
33368: ST_TO_ADDR
// end ; 10 .. 13 :
33369: GO 33879
33371: LD_INT 10
33373: DOUBLE
33374: GREATEREQUAL
33375: IFFALSE 33383
33377: LD_INT 13
33379: DOUBLE
33380: LESSEQUAL
33381: IFTRUE 33385
33383: GO 33462
33385: POP
// begin bc_type := b_lab_full ;
33386: LD_ADDR_OWVAR 42
33390: PUSH
33391: LD_INT 8
33393: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33394: LD_ADDR_OWVAR 44
33398: PUSH
33399: LD_INT 10
33401: PUSH
33402: LD_INT 12
33404: PUSH
33405: LD_INT 14
33407: PUSH
33408: LD_INT 13
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: PUSH
33417: LD_VAR 0 2
33421: PUSH
33422: LD_INT 9
33424: MINUS
33425: ARRAY
33426: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33427: LD_ADDR_OWVAR 45
33431: PUSH
33432: LD_INT 11
33434: PUSH
33435: LD_INT 15
33437: PUSH
33438: LD_INT 12
33440: PUSH
33441: LD_INT 15
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: PUSH
33450: LD_VAR 0 2
33454: PUSH
33455: LD_INT 9
33457: MINUS
33458: ARRAY
33459: ST_TO_ADDR
// end ; 14 :
33460: GO 33879
33462: LD_INT 14
33464: DOUBLE
33465: EQUAL
33466: IFTRUE 33470
33468: GO 33481
33470: POP
// bc_type := b_workshop ; 15 :
33471: LD_ADDR_OWVAR 42
33475: PUSH
33476: LD_INT 2
33478: ST_TO_ADDR
33479: GO 33879
33481: LD_INT 15
33483: DOUBLE
33484: EQUAL
33485: IFTRUE 33489
33487: GO 33500
33489: POP
// bc_type := b_factory ; 16 :
33490: LD_ADDR_OWVAR 42
33494: PUSH
33495: LD_INT 3
33497: ST_TO_ADDR
33498: GO 33879
33500: LD_INT 16
33502: DOUBLE
33503: EQUAL
33504: IFTRUE 33508
33506: GO 33519
33508: POP
// bc_type := b_ext_gun ; 17 :
33509: LD_ADDR_OWVAR 42
33513: PUSH
33514: LD_INT 17
33516: ST_TO_ADDR
33517: GO 33879
33519: LD_INT 17
33521: DOUBLE
33522: EQUAL
33523: IFTRUE 33527
33525: GO 33555
33527: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33528: LD_ADDR_OWVAR 42
33532: PUSH
33533: LD_INT 19
33535: PUSH
33536: LD_INT 23
33538: PUSH
33539: LD_INT 19
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: LIST
33546: PUSH
33547: LD_VAR 0 1
33551: ARRAY
33552: ST_TO_ADDR
33553: GO 33879
33555: LD_INT 18
33557: DOUBLE
33558: EQUAL
33559: IFTRUE 33563
33561: GO 33574
33563: POP
// bc_type := b_ext_radar ; 19 :
33564: LD_ADDR_OWVAR 42
33568: PUSH
33569: LD_INT 20
33571: ST_TO_ADDR
33572: GO 33879
33574: LD_INT 19
33576: DOUBLE
33577: EQUAL
33578: IFTRUE 33582
33580: GO 33593
33582: POP
// bc_type := b_ext_radio ; 20 :
33583: LD_ADDR_OWVAR 42
33587: PUSH
33588: LD_INT 22
33590: ST_TO_ADDR
33591: GO 33879
33593: LD_INT 20
33595: DOUBLE
33596: EQUAL
33597: IFTRUE 33601
33599: GO 33612
33601: POP
// bc_type := b_ext_siberium ; 21 :
33602: LD_ADDR_OWVAR 42
33606: PUSH
33607: LD_INT 21
33609: ST_TO_ADDR
33610: GO 33879
33612: LD_INT 21
33614: DOUBLE
33615: EQUAL
33616: IFTRUE 33620
33618: GO 33631
33620: POP
// bc_type := b_ext_computer ; 22 :
33621: LD_ADDR_OWVAR 42
33625: PUSH
33626: LD_INT 24
33628: ST_TO_ADDR
33629: GO 33879
33631: LD_INT 22
33633: DOUBLE
33634: EQUAL
33635: IFTRUE 33639
33637: GO 33650
33639: POP
// bc_type := b_ext_track ; 23 :
33640: LD_ADDR_OWVAR 42
33644: PUSH
33645: LD_INT 16
33647: ST_TO_ADDR
33648: GO 33879
33650: LD_INT 23
33652: DOUBLE
33653: EQUAL
33654: IFTRUE 33658
33656: GO 33669
33658: POP
// bc_type := b_ext_laser ; 24 :
33659: LD_ADDR_OWVAR 42
33663: PUSH
33664: LD_INT 25
33666: ST_TO_ADDR
33667: GO 33879
33669: LD_INT 24
33671: DOUBLE
33672: EQUAL
33673: IFTRUE 33677
33675: GO 33688
33677: POP
// bc_type := b_control_tower ; 25 :
33678: LD_ADDR_OWVAR 42
33682: PUSH
33683: LD_INT 36
33685: ST_TO_ADDR
33686: GO 33879
33688: LD_INT 25
33690: DOUBLE
33691: EQUAL
33692: IFTRUE 33696
33694: GO 33707
33696: POP
// bc_type := b_breastwork ; 26 :
33697: LD_ADDR_OWVAR 42
33701: PUSH
33702: LD_INT 31
33704: ST_TO_ADDR
33705: GO 33879
33707: LD_INT 26
33709: DOUBLE
33710: EQUAL
33711: IFTRUE 33715
33713: GO 33726
33715: POP
// bc_type := b_bunker ; 27 :
33716: LD_ADDR_OWVAR 42
33720: PUSH
33721: LD_INT 32
33723: ST_TO_ADDR
33724: GO 33879
33726: LD_INT 27
33728: DOUBLE
33729: EQUAL
33730: IFTRUE 33734
33732: GO 33745
33734: POP
// bc_type := b_turret ; 28 :
33735: LD_ADDR_OWVAR 42
33739: PUSH
33740: LD_INT 33
33742: ST_TO_ADDR
33743: GO 33879
33745: LD_INT 28
33747: DOUBLE
33748: EQUAL
33749: IFTRUE 33753
33751: GO 33764
33753: POP
// bc_type := b_armoury ; 29 :
33754: LD_ADDR_OWVAR 42
33758: PUSH
33759: LD_INT 4
33761: ST_TO_ADDR
33762: GO 33879
33764: LD_INT 29
33766: DOUBLE
33767: EQUAL
33768: IFTRUE 33772
33770: GO 33783
33772: POP
// bc_type := b_barracks ; 30 :
33773: LD_ADDR_OWVAR 42
33777: PUSH
33778: LD_INT 5
33780: ST_TO_ADDR
33781: GO 33879
33783: LD_INT 30
33785: DOUBLE
33786: EQUAL
33787: IFTRUE 33791
33789: GO 33802
33791: POP
// bc_type := b_solar_power ; 31 :
33792: LD_ADDR_OWVAR 42
33796: PUSH
33797: LD_INT 27
33799: ST_TO_ADDR
33800: GO 33879
33802: LD_INT 31
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33810
33808: GO 33821
33810: POP
// bc_type := b_oil_power ; 32 :
33811: LD_ADDR_OWVAR 42
33815: PUSH
33816: LD_INT 26
33818: ST_TO_ADDR
33819: GO 33879
33821: LD_INT 32
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33829
33827: GO 33840
33829: POP
// bc_type := b_siberite_power ; 33 :
33830: LD_ADDR_OWVAR 42
33834: PUSH
33835: LD_INT 28
33837: ST_TO_ADDR
33838: GO 33879
33840: LD_INT 33
33842: DOUBLE
33843: EQUAL
33844: IFTRUE 33848
33846: GO 33859
33848: POP
// bc_type := b_oil_mine ; 34 :
33849: LD_ADDR_OWVAR 42
33853: PUSH
33854: LD_INT 29
33856: ST_TO_ADDR
33857: GO 33879
33859: LD_INT 34
33861: DOUBLE
33862: EQUAL
33863: IFTRUE 33867
33865: GO 33878
33867: POP
// bc_type := b_siberite_mine ; end ;
33868: LD_ADDR_OWVAR 42
33872: PUSH
33873: LD_INT 30
33875: ST_TO_ADDR
33876: GO 33879
33878: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33879: LD_ADDR_VAR 0 8
33883: PUSH
33884: LD_VAR 0 5
33888: PPUSH
33889: LD_VAR 0 6
33893: PPUSH
33894: LD_VAR 0 3
33898: PPUSH
33899: CALL_OW 47
33903: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33904: LD_OWVAR 42
33908: PUSH
33909: LD_INT 32
33911: PUSH
33912: LD_INT 33
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: IN
33919: IFFALSE 33935
// PlaceWeaponTurret ( b , weapon ) ;
33921: LD_VAR 0 8
33925: PPUSH
33926: LD_VAR 0 4
33930: PPUSH
33931: CALL_OW 431
// end ;
33935: LD_VAR 0 7
33939: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33940: LD_INT 0
33942: PPUSH
33943: PPUSH
33944: PPUSH
33945: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33946: LD_ADDR_VAR 0 4
33950: PUSH
33951: LD_INT 22
33953: PUSH
33954: LD_OWVAR 2
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 2
33965: PUSH
33966: LD_INT 30
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 30
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PPUSH
33995: CALL_OW 69
33999: ST_TO_ADDR
// if not tmp then
34000: LD_VAR 0 4
34004: NOT
34005: IFFALSE 34009
// exit ;
34007: GO 34068
// for i in tmp do
34009: LD_ADDR_VAR 0 2
34013: PUSH
34014: LD_VAR 0 4
34018: PUSH
34019: FOR_IN
34020: IFFALSE 34066
// for j = 1 to 3 do
34022: LD_ADDR_VAR 0 3
34026: PUSH
34027: DOUBLE
34028: LD_INT 1
34030: DEC
34031: ST_TO_ADDR
34032: LD_INT 3
34034: PUSH
34035: FOR_TO
34036: IFFALSE 34062
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34038: LD_VAR 0 2
34042: PPUSH
34043: CALL_OW 274
34047: PPUSH
34048: LD_VAR 0 3
34052: PPUSH
34053: LD_INT 99999
34055: PPUSH
34056: CALL_OW 277
34060: GO 34035
34062: POP
34063: POP
34064: GO 34019
34066: POP
34067: POP
// end ;
34068: LD_VAR 0 1
34072: RET
// export function hHackSetLevel10 ; var i , j ; begin
34073: LD_INT 0
34075: PPUSH
34076: PPUSH
34077: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34078: LD_ADDR_VAR 0 2
34082: PUSH
34083: LD_INT 21
34085: PUSH
34086: LD_INT 1
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PPUSH
34093: CALL_OW 69
34097: PUSH
34098: FOR_IN
34099: IFFALSE 34151
// if IsSelected ( i ) then
34101: LD_VAR 0 2
34105: PPUSH
34106: CALL_OW 306
34110: IFFALSE 34149
// begin for j := 1 to 4 do
34112: LD_ADDR_VAR 0 3
34116: PUSH
34117: DOUBLE
34118: LD_INT 1
34120: DEC
34121: ST_TO_ADDR
34122: LD_INT 4
34124: PUSH
34125: FOR_TO
34126: IFFALSE 34147
// SetSkill ( i , j , 10 ) ;
34128: LD_VAR 0 2
34132: PPUSH
34133: LD_VAR 0 3
34137: PPUSH
34138: LD_INT 10
34140: PPUSH
34141: CALL_OW 237
34145: GO 34125
34147: POP
34148: POP
// end ;
34149: GO 34098
34151: POP
34152: POP
// end ;
34153: LD_VAR 0 1
34157: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34158: LD_INT 0
34160: PPUSH
34161: PPUSH
34162: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34163: LD_ADDR_VAR 0 2
34167: PUSH
34168: LD_INT 22
34170: PUSH
34171: LD_OWVAR 2
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 21
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PPUSH
34194: CALL_OW 69
34198: PUSH
34199: FOR_IN
34200: IFFALSE 34241
// begin for j := 1 to 4 do
34202: LD_ADDR_VAR 0 3
34206: PUSH
34207: DOUBLE
34208: LD_INT 1
34210: DEC
34211: ST_TO_ADDR
34212: LD_INT 4
34214: PUSH
34215: FOR_TO
34216: IFFALSE 34237
// SetSkill ( i , j , 10 ) ;
34218: LD_VAR 0 2
34222: PPUSH
34223: LD_VAR 0 3
34227: PPUSH
34228: LD_INT 10
34230: PPUSH
34231: CALL_OW 237
34235: GO 34215
34237: POP
34238: POP
// end ;
34239: GO 34199
34241: POP
34242: POP
// end ;
34243: LD_VAR 0 1
34247: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34248: LD_INT 0
34250: PPUSH
// uc_side := your_side ;
34251: LD_ADDR_OWVAR 20
34255: PUSH
34256: LD_OWVAR 2
34260: ST_TO_ADDR
// uc_nation := nation ;
34261: LD_ADDR_OWVAR 21
34265: PUSH
34266: LD_VAR 0 1
34270: ST_TO_ADDR
// InitHc ;
34271: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34275: LD_INT 0
34277: PPUSH
34278: LD_VAR 0 2
34282: PPUSH
34283: LD_VAR 0 3
34287: PPUSH
34288: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34292: LD_VAR 0 4
34296: PPUSH
34297: LD_VAR 0 5
34301: PPUSH
34302: CALL_OW 428
34306: PUSH
34307: LD_INT 0
34309: EQUAL
34310: IFFALSE 34334
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34312: CALL_OW 44
34316: PPUSH
34317: LD_VAR 0 4
34321: PPUSH
34322: LD_VAR 0 5
34326: PPUSH
34327: LD_INT 1
34329: PPUSH
34330: CALL_OW 48
// end ;
34334: LD_VAR 0 6
34338: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34339: LD_INT 0
34341: PPUSH
34342: PPUSH
// uc_side := your_side ;
34343: LD_ADDR_OWVAR 20
34347: PUSH
34348: LD_OWVAR 2
34352: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34353: LD_VAR 0 1
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: LD_INT 3
34366: PUSH
34367: LD_INT 4
34369: PUSH
34370: LD_INT 5
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: IN
34380: IFFALSE 34392
// uc_nation := nation_american else
34382: LD_ADDR_OWVAR 21
34386: PUSH
34387: LD_INT 1
34389: ST_TO_ADDR
34390: GO 34435
// if chassis in [ 11 , 12 , 13 , 14 ] then
34392: LD_VAR 0 1
34396: PUSH
34397: LD_INT 11
34399: PUSH
34400: LD_INT 12
34402: PUSH
34403: LD_INT 13
34405: PUSH
34406: LD_INT 14
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: IN
34415: IFFALSE 34427
// uc_nation := nation_arabian else
34417: LD_ADDR_OWVAR 21
34421: PUSH
34422: LD_INT 2
34424: ST_TO_ADDR
34425: GO 34435
// uc_nation := nation_russian ;
34427: LD_ADDR_OWVAR 21
34431: PUSH
34432: LD_INT 3
34434: ST_TO_ADDR
// vc_chassis := chassis ;
34435: LD_ADDR_OWVAR 37
34439: PUSH
34440: LD_VAR 0 1
34444: ST_TO_ADDR
// vc_engine := engine ;
34445: LD_ADDR_OWVAR 39
34449: PUSH
34450: LD_VAR 0 2
34454: ST_TO_ADDR
// vc_control := control ;
34455: LD_ADDR_OWVAR 38
34459: PUSH
34460: LD_VAR 0 3
34464: ST_TO_ADDR
// vc_weapon := weapon ;
34465: LD_ADDR_OWVAR 40
34469: PUSH
34470: LD_VAR 0 4
34474: ST_TO_ADDR
// un := CreateVehicle ;
34475: LD_ADDR_VAR 0 8
34479: PUSH
34480: CALL_OW 45
34484: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34485: LD_VAR 0 8
34489: PPUSH
34490: LD_INT 0
34492: PPUSH
34493: LD_INT 5
34495: PPUSH
34496: CALL_OW 12
34500: PPUSH
34501: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34505: LD_VAR 0 8
34509: PPUSH
34510: LD_VAR 0 5
34514: PPUSH
34515: LD_VAR 0 6
34519: PPUSH
34520: LD_INT 1
34522: PPUSH
34523: CALL_OW 48
// end ;
34527: LD_VAR 0 7
34531: RET
// export hInvincible ; every 1 do
34532: GO 34534
34534: DISABLE
// hInvincible := [ ] ;
34535: LD_ADDR_EXP 95
34539: PUSH
34540: EMPTY
34541: ST_TO_ADDR
34542: END
// every 10 do var i ;
34543: GO 34545
34545: DISABLE
34546: LD_INT 0
34548: PPUSH
// begin enable ;
34549: ENABLE
// if not hInvincible then
34550: LD_EXP 95
34554: NOT
34555: IFFALSE 34559
// exit ;
34557: GO 34603
// for i in hInvincible do
34559: LD_ADDR_VAR 0 1
34563: PUSH
34564: LD_EXP 95
34568: PUSH
34569: FOR_IN
34570: IFFALSE 34601
// if GetLives ( i ) < 1000 then
34572: LD_VAR 0 1
34576: PPUSH
34577: CALL_OW 256
34581: PUSH
34582: LD_INT 1000
34584: LESS
34585: IFFALSE 34599
// SetLives ( i , 1000 ) ;
34587: LD_VAR 0 1
34591: PPUSH
34592: LD_INT 1000
34594: PPUSH
34595: CALL_OW 234
34599: GO 34569
34601: POP
34602: POP
// end ;
34603: PPOPN 1
34605: END
// export function hHackInvincible ; var i ; begin
34606: LD_INT 0
34608: PPUSH
34609: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34610: LD_ADDR_VAR 0 2
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: LD_INT 21
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 21
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: PPUSH
34643: CALL_OW 69
34647: PUSH
34648: FOR_IN
34649: IFFALSE 34710
// if IsSelected ( i ) then
34651: LD_VAR 0 2
34655: PPUSH
34656: CALL_OW 306
34660: IFFALSE 34708
// begin if i in hInvincible then
34662: LD_VAR 0 2
34666: PUSH
34667: LD_EXP 95
34671: IN
34672: IFFALSE 34692
// hInvincible := hInvincible diff i else
34674: LD_ADDR_EXP 95
34678: PUSH
34679: LD_EXP 95
34683: PUSH
34684: LD_VAR 0 2
34688: DIFF
34689: ST_TO_ADDR
34690: GO 34708
// hInvincible := hInvincible union i ;
34692: LD_ADDR_EXP 95
34696: PUSH
34697: LD_EXP 95
34701: PUSH
34702: LD_VAR 0 2
34706: UNION
34707: ST_TO_ADDR
// end ;
34708: GO 34648
34710: POP
34711: POP
// end ;
34712: LD_VAR 0 1
34716: RET
// export function hHackInvisible ; var i , j ; begin
34717: LD_INT 0
34719: PPUSH
34720: PPUSH
34721: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34722: LD_ADDR_VAR 0 2
34726: PUSH
34727: LD_INT 21
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PPUSH
34737: CALL_OW 69
34741: PUSH
34742: FOR_IN
34743: IFFALSE 34767
// if IsSelected ( i ) then
34745: LD_VAR 0 2
34749: PPUSH
34750: CALL_OW 306
34754: IFFALSE 34765
// ComForceInvisible ( i ) ;
34756: LD_VAR 0 2
34760: PPUSH
34761: CALL_OW 496
34765: GO 34742
34767: POP
34768: POP
// end ;
34769: LD_VAR 0 1
34773: RET
// export function hHackChangeYourSide ; begin
34774: LD_INT 0
34776: PPUSH
// if your_side = 8 then
34777: LD_OWVAR 2
34781: PUSH
34782: LD_INT 8
34784: EQUAL
34785: IFFALSE 34797
// your_side := 0 else
34787: LD_ADDR_OWVAR 2
34791: PUSH
34792: LD_INT 0
34794: ST_TO_ADDR
34795: GO 34811
// your_side := your_side + 1 ;
34797: LD_ADDR_OWVAR 2
34801: PUSH
34802: LD_OWVAR 2
34806: PUSH
34807: LD_INT 1
34809: PLUS
34810: ST_TO_ADDR
// end ;
34811: LD_VAR 0 1
34815: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34816: LD_INT 0
34818: PPUSH
34819: PPUSH
34820: PPUSH
// for i in all_units do
34821: LD_ADDR_VAR 0 2
34825: PUSH
34826: LD_OWVAR 3
34830: PUSH
34831: FOR_IN
34832: IFFALSE 34910
// if IsSelected ( i ) then
34834: LD_VAR 0 2
34838: PPUSH
34839: CALL_OW 306
34843: IFFALSE 34908
// begin j := GetSide ( i ) ;
34845: LD_ADDR_VAR 0 3
34849: PUSH
34850: LD_VAR 0 2
34854: PPUSH
34855: CALL_OW 255
34859: ST_TO_ADDR
// if j = 8 then
34860: LD_VAR 0 3
34864: PUSH
34865: LD_INT 8
34867: EQUAL
34868: IFFALSE 34880
// j := 0 else
34870: LD_ADDR_VAR 0 3
34874: PUSH
34875: LD_INT 0
34877: ST_TO_ADDR
34878: GO 34894
// j := j + 1 ;
34880: LD_ADDR_VAR 0 3
34884: PUSH
34885: LD_VAR 0 3
34889: PUSH
34890: LD_INT 1
34892: PLUS
34893: ST_TO_ADDR
// SetSide ( i , j ) ;
34894: LD_VAR 0 2
34898: PPUSH
34899: LD_VAR 0 3
34903: PPUSH
34904: CALL_OW 235
// end ;
34908: GO 34831
34910: POP
34911: POP
// end ;
34912: LD_VAR 0 1
34916: RET
// export function hHackFog ; begin
34917: LD_INT 0
34919: PPUSH
// FogOff ( true ) ;
34920: LD_INT 1
34922: PPUSH
34923: CALL_OW 344
// end ;
34927: LD_VAR 0 1
34931: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34932: LD_INT 0
34934: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34935: LD_VAR 0 1
34939: PPUSH
34940: LD_VAR 0 2
34944: PPUSH
34945: LD_VAR 0 3
34949: PPUSH
34950: LD_INT 1
34952: PPUSH
34953: LD_INT 1
34955: PPUSH
34956: CALL_OW 483
// CenterOnXY ( x , y ) ;
34960: LD_VAR 0 2
34964: PPUSH
34965: LD_VAR 0 3
34969: PPUSH
34970: CALL_OW 84
// end ;
34974: LD_VAR 0 4
34978: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34979: LD_INT 0
34981: PPUSH
34982: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34983: LD_VAR 0 1
34987: NOT
34988: PUSH
34989: LD_VAR 0 2
34993: PPUSH
34994: LD_VAR 0 3
34998: PPUSH
34999: CALL_OW 488
35003: NOT
35004: OR
35005: PUSH
35006: LD_VAR 0 1
35010: PPUSH
35011: CALL_OW 266
35015: PUSH
35016: LD_INT 3
35018: NONEQUAL
35019: PUSH
35020: LD_VAR 0 1
35024: PPUSH
35025: CALL_OW 247
35029: PUSH
35030: LD_INT 1
35032: EQUAL
35033: NOT
35034: AND
35035: OR
35036: IFFALSE 35040
// exit ;
35038: GO 35322
// if GetType ( factory ) = unit_human then
35040: LD_VAR 0 1
35044: PPUSH
35045: CALL_OW 247
35049: PUSH
35050: LD_INT 1
35052: EQUAL
35053: IFFALSE 35070
// factory := IsInUnit ( factory ) ;
35055: LD_ADDR_VAR 0 1
35059: PUSH
35060: LD_VAR 0 1
35064: PPUSH
35065: CALL_OW 310
35069: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35070: LD_VAR 0 1
35074: PPUSH
35075: CALL_OW 266
35079: PUSH
35080: LD_INT 3
35082: NONEQUAL
35083: IFFALSE 35087
// exit ;
35085: GO 35322
// for i := 1 to Count ( factoryWaypoints ) do
35087: LD_ADDR_VAR 0 5
35091: PUSH
35092: DOUBLE
35093: LD_INT 1
35095: DEC
35096: ST_TO_ADDR
35097: LD_EXP 96
35101: PPUSH
35102: CALL 43968 0 1
35106: PUSH
35107: FOR_TO
35108: IFFALSE 35270
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
35110: LD_VAR 0 2
35114: PPUSH
35115: LD_VAR 0 3
35119: PPUSH
35120: CALL_OW 428
35124: PUSH
35125: LD_EXP 96
35129: PUSH
35130: LD_VAR 0 5
35134: ARRAY
35135: PUSH
35136: LD_INT 2
35138: ARRAY
35139: EQUAL
35140: IFFALSE 35172
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35142: LD_ADDR_EXP 96
35146: PUSH
35147: LD_EXP 96
35151: PPUSH
35152: LD_VAR 0 5
35156: PPUSH
35157: CALL_OW 3
35161: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35162: CALL 35327 0 0
// exit ;
35166: POP
35167: POP
35168: GO 35322
// end else
35170: GO 35268
// if factory = factoryWaypoints [ i ] [ 2 ] then
35172: LD_VAR 0 1
35176: PUSH
35177: LD_EXP 96
35181: PUSH
35182: LD_VAR 0 5
35186: ARRAY
35187: PUSH
35188: LD_INT 2
35190: ARRAY
35191: EQUAL
35192: IFFALSE 35268
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35194: LD_ADDR_EXP 96
35198: PUSH
35199: LD_EXP 96
35203: PPUSH
35204: LD_VAR 0 5
35208: PPUSH
35209: CALL_OW 3
35213: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35214: LD_ADDR_EXP 96
35218: PUSH
35219: LD_EXP 96
35223: PPUSH
35224: LD_VAR 0 1
35228: PPUSH
35229: CALL_OW 255
35233: PUSH
35234: LD_VAR 0 1
35238: PUSH
35239: LD_VAR 0 2
35243: PUSH
35244: LD_VAR 0 3
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: PPUSH
35255: CALL 79577 0 2
35259: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35260: CALL 35327 0 0
// exit ;
35264: POP
35265: POP
35266: GO 35322
// end ; end ;
35268: GO 35107
35270: POP
35271: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35272: LD_ADDR_EXP 96
35276: PUSH
35277: LD_EXP 96
35281: PPUSH
35282: LD_VAR 0 1
35286: PPUSH
35287: CALL_OW 255
35291: PUSH
35292: LD_VAR 0 1
35296: PUSH
35297: LD_VAR 0 2
35301: PUSH
35302: LD_VAR 0 3
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: PPUSH
35313: CALL 79577 0 2
35317: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35318: CALL 35327 0 0
// end ;
35322: LD_VAR 0 4
35326: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35327: LD_INT 0
35329: PPUSH
35330: PPUSH
35331: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35332: LD_STRING resetFactoryWaypoint();
35334: PPUSH
35335: CALL_OW 559
// if factoryWaypoints then
35339: LD_EXP 96
35343: IFFALSE 35464
// begin list := factoryWaypoints ;
35345: LD_ADDR_VAR 0 3
35349: PUSH
35350: LD_EXP 96
35354: ST_TO_ADDR
// for i := 1 to list do
35355: LD_ADDR_VAR 0 2
35359: PUSH
35360: DOUBLE
35361: LD_INT 1
35363: DEC
35364: ST_TO_ADDR
35365: LD_VAR 0 3
35369: PUSH
35370: FOR_TO
35371: IFFALSE 35462
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35373: LD_STRING setFactoryWaypointXY(
35375: PUSH
35376: LD_VAR 0 3
35380: PUSH
35381: LD_VAR 0 2
35385: ARRAY
35386: PUSH
35387: LD_INT 1
35389: ARRAY
35390: STR
35391: PUSH
35392: LD_STRING ,
35394: STR
35395: PUSH
35396: LD_VAR 0 3
35400: PUSH
35401: LD_VAR 0 2
35405: ARRAY
35406: PUSH
35407: LD_INT 2
35409: ARRAY
35410: STR
35411: PUSH
35412: LD_STRING ,
35414: STR
35415: PUSH
35416: LD_VAR 0 3
35420: PUSH
35421: LD_VAR 0 2
35425: ARRAY
35426: PUSH
35427: LD_INT 3
35429: ARRAY
35430: STR
35431: PUSH
35432: LD_STRING ,
35434: STR
35435: PUSH
35436: LD_VAR 0 3
35440: PUSH
35441: LD_VAR 0 2
35445: ARRAY
35446: PUSH
35447: LD_INT 4
35449: ARRAY
35450: STR
35451: PUSH
35452: LD_STRING )
35454: STR
35455: PPUSH
35456: CALL_OW 559
35460: GO 35370
35462: POP
35463: POP
// end ; end ;
35464: LD_VAR 0 1
35468: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35469: LD_INT 0
35471: PPUSH
// if HexInfo ( x , y ) = warehouse then
35472: LD_VAR 0 2
35476: PPUSH
35477: LD_VAR 0 3
35481: PPUSH
35482: CALL_OW 428
35486: PUSH
35487: LD_VAR 0 1
35491: EQUAL
35492: IFFALSE 35519
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35494: LD_ADDR_EXP 98
35498: PUSH
35499: LD_EXP 98
35503: PPUSH
35504: LD_VAR 0 1
35508: PPUSH
35509: LD_INT 0
35511: PPUSH
35512: CALL_OW 1
35516: ST_TO_ADDR
35517: GO 35570
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35519: LD_ADDR_EXP 98
35523: PUSH
35524: LD_EXP 98
35528: PPUSH
35529: LD_VAR 0 1
35533: PPUSH
35534: LD_VAR 0 1
35538: PPUSH
35539: CALL_OW 255
35543: PUSH
35544: LD_VAR 0 1
35548: PUSH
35549: LD_VAR 0 2
35553: PUSH
35554: LD_VAR 0 3
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: PPUSH
35565: CALL_OW 1
35569: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35570: CALL 35579 0 0
// end ;
35574: LD_VAR 0 4
35578: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35579: LD_INT 0
35581: PPUSH
35582: PPUSH
35583: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35584: LD_STRING resetWarehouseGatheringPoints();
35586: PPUSH
35587: CALL_OW 559
// if warehouseGatheringPoints then
35591: LD_EXP 98
35595: IFFALSE 35721
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35597: LD_ADDR_VAR 0 3
35601: PUSH
35602: LD_EXP 98
35606: PPUSH
35607: CALL 83345 0 1
35611: ST_TO_ADDR
// for i := 1 to list do
35612: LD_ADDR_VAR 0 2
35616: PUSH
35617: DOUBLE
35618: LD_INT 1
35620: DEC
35621: ST_TO_ADDR
35622: LD_VAR 0 3
35626: PUSH
35627: FOR_TO
35628: IFFALSE 35719
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35630: LD_STRING setWarehouseGatheringPointXY(
35632: PUSH
35633: LD_VAR 0 3
35637: PUSH
35638: LD_VAR 0 2
35642: ARRAY
35643: PUSH
35644: LD_INT 1
35646: ARRAY
35647: STR
35648: PUSH
35649: LD_STRING ,
35651: STR
35652: PUSH
35653: LD_VAR 0 3
35657: PUSH
35658: LD_VAR 0 2
35662: ARRAY
35663: PUSH
35664: LD_INT 2
35666: ARRAY
35667: STR
35668: PUSH
35669: LD_STRING ,
35671: STR
35672: PUSH
35673: LD_VAR 0 3
35677: PUSH
35678: LD_VAR 0 2
35682: ARRAY
35683: PUSH
35684: LD_INT 3
35686: ARRAY
35687: STR
35688: PUSH
35689: LD_STRING ,
35691: STR
35692: PUSH
35693: LD_VAR 0 3
35697: PUSH
35698: LD_VAR 0 2
35702: ARRAY
35703: PUSH
35704: LD_INT 4
35706: ARRAY
35707: STR
35708: PUSH
35709: LD_STRING )
35711: STR
35712: PPUSH
35713: CALL_OW 559
35717: GO 35627
35719: POP
35720: POP
// end ; end ;
35721: LD_VAR 0 1
35725: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35726: LD_EXP 98
35730: IFFALSE 36415
35732: GO 35734
35734: DISABLE
35735: LD_INT 0
35737: PPUSH
35738: PPUSH
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
// begin enable ;
35746: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35747: LD_ADDR_VAR 0 3
35751: PUSH
35752: LD_EXP 98
35756: PPUSH
35757: CALL 83345 0 1
35761: ST_TO_ADDR
// if not list then
35762: LD_VAR 0 3
35766: NOT
35767: IFFALSE 35771
// exit ;
35769: GO 36415
// for i := 1 to list do
35771: LD_ADDR_VAR 0 1
35775: PUSH
35776: DOUBLE
35777: LD_INT 1
35779: DEC
35780: ST_TO_ADDR
35781: LD_VAR 0 3
35785: PUSH
35786: FOR_TO
35787: IFFALSE 36413
// begin depot := list [ i ] [ 2 ] ;
35789: LD_ADDR_VAR 0 8
35793: PUSH
35794: LD_VAR 0 3
35798: PUSH
35799: LD_VAR 0 1
35803: ARRAY
35804: PUSH
35805: LD_INT 2
35807: ARRAY
35808: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35809: LD_ADDR_VAR 0 5
35813: PUSH
35814: LD_VAR 0 3
35818: PUSH
35819: LD_VAR 0 1
35823: ARRAY
35824: PUSH
35825: LD_INT 1
35827: ARRAY
35828: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35829: LD_VAR 0 8
35833: PPUSH
35834: CALL_OW 301
35838: PUSH
35839: LD_VAR 0 5
35843: PUSH
35844: LD_VAR 0 8
35848: PPUSH
35849: CALL_OW 255
35853: NONEQUAL
35854: OR
35855: IFFALSE 35884
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35857: LD_ADDR_EXP 98
35861: PUSH
35862: LD_EXP 98
35866: PPUSH
35867: LD_VAR 0 8
35871: PPUSH
35872: LD_INT 0
35874: PPUSH
35875: CALL_OW 1
35879: ST_TO_ADDR
// exit ;
35880: POP
35881: POP
35882: GO 36415
// end ; x := list [ i ] [ 3 ] ;
35884: LD_ADDR_VAR 0 6
35888: PUSH
35889: LD_VAR 0 3
35893: PUSH
35894: LD_VAR 0 1
35898: ARRAY
35899: PUSH
35900: LD_INT 3
35902: ARRAY
35903: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35904: LD_ADDR_VAR 0 7
35908: PUSH
35909: LD_VAR 0 3
35913: PUSH
35914: LD_VAR 0 1
35918: ARRAY
35919: PUSH
35920: LD_INT 4
35922: ARRAY
35923: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35924: LD_ADDR_VAR 0 9
35928: PUSH
35929: LD_VAR 0 6
35933: PPUSH
35934: LD_VAR 0 7
35938: PPUSH
35939: LD_INT 16
35941: PPUSH
35942: CALL 81929 0 3
35946: ST_TO_ADDR
// if not cratesNearbyPoint then
35947: LD_VAR 0 9
35951: NOT
35952: IFFALSE 35958
// exit ;
35954: POP
35955: POP
35956: GO 36415
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35958: LD_ADDR_VAR 0 4
35962: PUSH
35963: LD_INT 22
35965: PUSH
35966: LD_VAR 0 5
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 3
35977: PUSH
35978: LD_INT 60
35980: PUSH
35981: EMPTY
35982: LIST
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 91
35990: PUSH
35991: LD_VAR 0 8
35995: PUSH
35996: LD_INT 6
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 2
36006: PUSH
36007: LD_INT 25
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 25
36019: PUSH
36020: LD_INT 16
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: PPUSH
36038: CALL_OW 69
36042: PUSH
36043: LD_VAR 0 8
36047: PPUSH
36048: CALL_OW 313
36052: PPUSH
36053: LD_INT 3
36055: PUSH
36056: LD_INT 60
36058: PUSH
36059: EMPTY
36060: LIST
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: LD_INT 25
36071: PUSH
36072: LD_INT 2
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 25
36081: PUSH
36082: LD_INT 16
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PPUSH
36098: CALL_OW 72
36102: UNION
36103: ST_TO_ADDR
// if tmp then
36104: LD_VAR 0 4
36108: IFFALSE 36188
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36110: LD_ADDR_VAR 0 4
36114: PUSH
36115: LD_VAR 0 4
36119: PPUSH
36120: LD_INT 3
36122: PPUSH
36123: CALL 79892 0 2
36127: ST_TO_ADDR
// for j in tmp do
36128: LD_ADDR_VAR 0 2
36132: PUSH
36133: LD_VAR 0 4
36137: PUSH
36138: FOR_IN
36139: IFFALSE 36182
// begin if IsInUnit ( j ) then
36141: LD_VAR 0 2
36145: PPUSH
36146: CALL_OW 310
36150: IFFALSE 36161
// ComExit ( j ) ;
36152: LD_VAR 0 2
36156: PPUSH
36157: CALL 79975 0 1
// AddComCollect ( j , x , y ) ;
36161: LD_VAR 0 2
36165: PPUSH
36166: LD_VAR 0 6
36170: PPUSH
36171: LD_VAR 0 7
36175: PPUSH
36176: CALL_OW 177
// end ;
36180: GO 36138
36182: POP
36183: POP
// exit ;
36184: POP
36185: POP
36186: GO 36415
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36188: LD_ADDR_VAR 0 4
36192: PUSH
36193: LD_INT 22
36195: PUSH
36196: LD_VAR 0 5
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 91
36207: PUSH
36208: LD_VAR 0 8
36212: PUSH
36213: LD_INT 8
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: LD_INT 34
36226: PUSH
36227: LD_INT 12
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 34
36236: PUSH
36237: LD_INT 51
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 34
36246: PUSH
36247: LD_INT 32
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 34
36256: PUSH
36257: LD_INT 89
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: LIST
36275: PPUSH
36276: CALL_OW 69
36280: ST_TO_ADDR
// if tmp then
36281: LD_VAR 0 4
36285: IFFALSE 36411
// begin for j in tmp do
36287: LD_ADDR_VAR 0 2
36291: PUSH
36292: LD_VAR 0 4
36296: PUSH
36297: FOR_IN
36298: IFFALSE 36409
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36300: LD_VAR 0 2
36304: PPUSH
36305: CALL_OW 262
36309: PUSH
36310: LD_INT 3
36312: EQUAL
36313: PUSH
36314: LD_VAR 0 2
36318: PPUSH
36319: CALL_OW 261
36323: PUSH
36324: LD_INT 20
36326: GREATER
36327: OR
36328: PUSH
36329: LD_VAR 0 2
36333: PPUSH
36334: CALL_OW 314
36338: NOT
36339: AND
36340: PUSH
36341: LD_VAR 0 2
36345: PPUSH
36346: CALL_OW 263
36350: PUSH
36351: LD_INT 1
36353: NONEQUAL
36354: PUSH
36355: LD_VAR 0 2
36359: PPUSH
36360: CALL_OW 311
36364: OR
36365: AND
36366: IFFALSE 36407
// begin ComCollect ( j , x , y ) ;
36368: LD_VAR 0 2
36372: PPUSH
36373: LD_VAR 0 6
36377: PPUSH
36378: LD_VAR 0 7
36382: PPUSH
36383: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36387: LD_VAR 0 2
36391: PPUSH
36392: LD_VAR 0 8
36396: PPUSH
36397: CALL_OW 172
// exit ;
36401: POP
36402: POP
36403: POP
36404: POP
36405: GO 36415
// end ;
36407: GO 36297
36409: POP
36410: POP
// end ; end ;
36411: GO 35786
36413: POP
36414: POP
// end ; end_of_file
36415: PPOPN 9
36417: END
// export function SOS_UnitDestroyed ( un ) ; begin
36418: LD_INT 0
36420: PPUSH
// ComRadiation ( un ) ;
36421: LD_VAR 0 1
36425: PPUSH
36426: CALL 37487 0 1
// end ;
36430: LD_VAR 0 2
36434: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36435: LD_INT 0
36437: PPUSH
// ComRadiation ( un ) ;
36438: LD_VAR 0 1
36442: PPUSH
36443: CALL 37487 0 1
// end ;
36447: LD_VAR 0 2
36451: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36452: LD_INT 0
36454: PPUSH
// end ;
36455: LD_VAR 0 4
36459: RET
// export function SOS_Command ( cmd ) ; begin
36460: LD_INT 0
36462: PPUSH
// end ;
36463: LD_VAR 0 2
36467: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36468: LD_INT 0
36470: PPUSH
// end ;
36471: LD_VAR 0 6
36475: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
36476: LD_INT 0
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
// if not vehicle or not factory then
36482: LD_VAR 0 1
36486: NOT
36487: PUSH
36488: LD_VAR 0 2
36492: NOT
36493: OR
36494: IFFALSE 36498
// exit ;
36496: GO 37078
// if not factoryWaypoints then
36498: LD_EXP 96
36502: NOT
36503: IFFALSE 36507
// exit ;
36505: GO 37078
// for i := 1 to Count ( factoryWaypoints ) do
36507: LD_ADDR_VAR 0 4
36511: PUSH
36512: DOUBLE
36513: LD_INT 1
36515: DEC
36516: ST_TO_ADDR
36517: LD_EXP 96
36521: PPUSH
36522: CALL 43968 0 1
36526: PUSH
36527: FOR_TO
36528: IFFALSE 37076
// if factoryWaypoints [ i ] [ 2 ] = factory then
36530: LD_EXP 96
36534: PUSH
36535: LD_VAR 0 4
36539: ARRAY
36540: PUSH
36541: LD_INT 2
36543: ARRAY
36544: PUSH
36545: LD_VAR 0 2
36549: EQUAL
36550: IFFALSE 37074
// begin if GetControl ( vehicle ) = control_manual then
36552: LD_VAR 0 1
36556: PPUSH
36557: CALL_OW 263
36561: PUSH
36562: LD_INT 1
36564: EQUAL
36565: IFFALSE 36927
// begin driver := IsDrivenBy ( vehicle ) ;
36567: LD_ADDR_VAR 0 5
36571: PUSH
36572: LD_VAR 0 1
36576: PPUSH
36577: CALL_OW 311
36581: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36582: LD_VAR 0 5
36586: PUSH
36587: LD_EXP 97
36591: IN
36592: PUSH
36593: LD_VAR 0 1
36597: PUSH
36598: LD_EXP 97
36602: IN
36603: OR
36604: IFFALSE 36610
// exit ;
36606: POP
36607: POP
36608: GO 37078
// if not HasTask ( driver ) then
36610: LD_VAR 0 5
36614: PPUSH
36615: CALL_OW 314
36619: NOT
36620: IFFALSE 36925
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36622: LD_ADDR_EXP 97
36626: PUSH
36627: LD_EXP 97
36631: PPUSH
36632: LD_VAR 0 5
36636: PPUSH
36637: CALL 79577 0 2
36641: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36642: LD_ADDR_EXP 97
36646: PUSH
36647: LD_EXP 97
36651: PPUSH
36652: LD_VAR 0 1
36656: PPUSH
36657: CALL 79577 0 2
36661: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36662: LD_ADDR_VAR 0 6
36666: PUSH
36667: LD_EXP 96
36671: PUSH
36672: LD_VAR 0 4
36676: ARRAY
36677: PUSH
36678: LD_INT 3
36680: ARRAY
36681: PPUSH
36682: LD_EXP 96
36686: PUSH
36687: LD_VAR 0 4
36691: ARRAY
36692: PUSH
36693: LD_INT 4
36695: ARRAY
36696: PPUSH
36697: CALL_OW 428
36701: ST_TO_ADDR
// if hex then
36702: LD_VAR 0 6
36706: IFFALSE 36724
// ComMoveUnit ( driver , hex ) else
36708: LD_VAR 0 5
36712: PPUSH
36713: LD_VAR 0 6
36717: PPUSH
36718: CALL_OW 112
36722: GO 36808
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36724: LD_VAR 0 1
36728: PPUSH
36729: LD_EXP 96
36733: PUSH
36734: LD_VAR 0 4
36738: ARRAY
36739: PUSH
36740: LD_INT 3
36742: ARRAY
36743: PPUSH
36744: LD_EXP 96
36748: PUSH
36749: LD_VAR 0 4
36753: ARRAY
36754: PUSH
36755: LD_INT 4
36757: ARRAY
36758: PPUSH
36759: CALL_OW 297
36763: PUSH
36764: LD_INT 0
36766: GREATER
36767: IFFALSE 36808
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36769: LD_VAR 0 5
36773: PPUSH
36774: LD_EXP 96
36778: PUSH
36779: LD_VAR 0 4
36783: ARRAY
36784: PUSH
36785: LD_INT 3
36787: ARRAY
36788: PPUSH
36789: LD_EXP 96
36793: PUSH
36794: LD_VAR 0 4
36798: ARRAY
36799: PUSH
36800: LD_INT 4
36802: ARRAY
36803: PPUSH
36804: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36808: LD_VAR 0 5
36812: PPUSH
36813: CALL_OW 181
// if Multiplayer then
36817: LD_OWVAR 4
36821: IFFALSE 36870
// begin repeat wait ( 10 ) ;
36823: LD_INT 10
36825: PPUSH
36826: CALL_OW 67
// until not IsInUnit ( driver ) ;
36830: LD_VAR 0 5
36834: PPUSH
36835: CALL_OW 310
36839: NOT
36840: IFFALSE 36823
// if not HasTask ( driver ) then
36842: LD_VAR 0 5
36846: PPUSH
36847: CALL_OW 314
36851: NOT
36852: IFFALSE 36868
// ComEnterUnit ( driver , factory ) ;
36854: LD_VAR 0 5
36858: PPUSH
36859: LD_VAR 0 2
36863: PPUSH
36864: CALL_OW 120
// end else
36868: GO 36884
// AddComEnterUnit ( driver , factory ) ;
36870: LD_VAR 0 5
36874: PPUSH
36875: LD_VAR 0 2
36879: PPUSH
36880: CALL_OW 180
// wait ( 0 0$1 ) ;
36884: LD_INT 35
36886: PPUSH
36887: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36891: LD_ADDR_EXP 97
36895: PUSH
36896: LD_EXP 97
36900: PUSH
36901: LD_VAR 0 5
36905: DIFF
36906: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36907: LD_ADDR_EXP 97
36911: PUSH
36912: LD_EXP 97
36916: PUSH
36917: LD_VAR 0 1
36921: DIFF
36922: ST_TO_ADDR
// break ;
36923: GO 37076
// end ; end else
36925: GO 37074
// if GetControl ( vehicle ) = control_remote then
36927: LD_VAR 0 1
36931: PPUSH
36932: CALL_OW 263
36936: PUSH
36937: LD_INT 2
36939: EQUAL
36940: IFFALSE 37026
// begin wait ( 0 0$2 ) ;
36942: LD_INT 70
36944: PPUSH
36945: CALL_OW 67
// repeat wait ( 10 ) ;
36949: LD_INT 10
36951: PPUSH
36952: CALL_OW 67
// Connect ( vehicle ) ;
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL 50174 0 1
// until IsControledBy ( vehicle ) ;
36965: LD_VAR 0 1
36969: PPUSH
36970: CALL_OW 312
36974: IFFALSE 36949
// wait ( 10 ) ;
36976: LD_INT 10
36978: PPUSH
36979: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36983: LD_VAR 0 1
36987: PPUSH
36988: LD_EXP 96
36992: PUSH
36993: LD_VAR 0 4
36997: ARRAY
36998: PUSH
36999: LD_INT 3
37001: ARRAY
37002: PPUSH
37003: LD_EXP 96
37007: PUSH
37008: LD_VAR 0 4
37012: ARRAY
37013: PUSH
37014: LD_INT 4
37016: ARRAY
37017: PPUSH
37018: CALL_OW 111
// break ;
37022: GO 37076
// end else
37024: GO 37074
// begin wait ( 0 0$3 ) ;
37026: LD_INT 105
37028: PPUSH
37029: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37033: LD_VAR 0 1
37037: PPUSH
37038: LD_EXP 96
37042: PUSH
37043: LD_VAR 0 4
37047: ARRAY
37048: PUSH
37049: LD_INT 3
37051: ARRAY
37052: PPUSH
37053: LD_EXP 96
37057: PUSH
37058: LD_VAR 0 4
37062: ARRAY
37063: PUSH
37064: LD_INT 4
37066: ARRAY
37067: PPUSH
37068: CALL_OW 111
// break ;
37072: GO 37076
// end ; end ;
37074: GO 36527
37076: POP
37077: POP
// end ;
37078: LD_VAR 0 3
37082: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37083: LD_INT 0
37085: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37086: LD_VAR 0 1
37090: PUSH
37091: LD_INT 250
37093: EQUAL
37094: PUSH
37095: LD_VAR 0 2
37099: PPUSH
37100: CALL_OW 264
37104: PUSH
37105: LD_INT 81
37107: EQUAL
37108: AND
37109: IFFALSE 37130
// MinerPlaceMine ( unit , x , y ) ;
37111: LD_VAR 0 2
37115: PPUSH
37116: LD_VAR 0 4
37120: PPUSH
37121: LD_VAR 0 5
37125: PPUSH
37126: CALL 40222 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37130: LD_VAR 0 1
37134: PUSH
37135: LD_INT 251
37137: EQUAL
37138: PUSH
37139: LD_VAR 0 2
37143: PPUSH
37144: CALL_OW 264
37148: PUSH
37149: LD_INT 81
37151: EQUAL
37152: AND
37153: IFFALSE 37174
// MinerDetonateMine ( unit , x , y ) ;
37155: LD_VAR 0 2
37159: PPUSH
37160: LD_VAR 0 4
37164: PPUSH
37165: LD_VAR 0 5
37169: PPUSH
37170: CALL 40497 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37174: LD_VAR 0 1
37178: PUSH
37179: LD_INT 252
37181: EQUAL
37182: PUSH
37183: LD_VAR 0 2
37187: PPUSH
37188: CALL_OW 264
37192: PUSH
37193: LD_INT 81
37195: EQUAL
37196: AND
37197: IFFALSE 37218
// MinerCreateMinefield ( unit , x , y ) ;
37199: LD_VAR 0 2
37203: PPUSH
37204: LD_VAR 0 4
37208: PPUSH
37209: LD_VAR 0 5
37213: PPUSH
37214: CALL 40914 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37218: LD_VAR 0 1
37222: PUSH
37223: LD_INT 253
37225: EQUAL
37226: PUSH
37227: LD_VAR 0 2
37231: PPUSH
37232: CALL_OW 257
37236: PUSH
37237: LD_INT 5
37239: EQUAL
37240: AND
37241: IFFALSE 37262
// ComBinocular ( unit , x , y ) ;
37243: LD_VAR 0 2
37247: PPUSH
37248: LD_VAR 0 4
37252: PPUSH
37253: LD_VAR 0 5
37257: PPUSH
37258: CALL 41283 0 3
// if selectedUnit then
37262: LD_VAR 0 3
37266: IFFALSE 37322
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37268: LD_VAR 0 1
37272: PUSH
37273: LD_INT 254
37275: EQUAL
37276: PUSH
37277: LD_VAR 0 2
37281: PPUSH
37282: CALL_OW 264
37286: PUSH
37287: LD_INT 99
37289: EQUAL
37290: AND
37291: PUSH
37292: LD_VAR 0 3
37296: PPUSH
37297: CALL_OW 263
37301: PUSH
37302: LD_INT 3
37304: EQUAL
37305: AND
37306: IFFALSE 37322
// HackDestroyVehicle ( unit , selectedUnit ) ;
37308: LD_VAR 0 2
37312: PPUSH
37313: LD_VAR 0 3
37317: PPUSH
37318: CALL 39586 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37322: LD_VAR 0 1
37326: PUSH
37327: LD_INT 255
37329: EQUAL
37330: PUSH
37331: LD_VAR 0 2
37335: PPUSH
37336: CALL_OW 264
37340: PUSH
37341: LD_INT 14
37343: PUSH
37344: LD_INT 53
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: IN
37351: AND
37352: PUSH
37353: LD_VAR 0 4
37357: PPUSH
37358: LD_VAR 0 5
37362: PPUSH
37363: CALL_OW 488
37367: AND
37368: IFFALSE 37392
// CutTreeXYR ( unit , x , y , 12 ) ;
37370: LD_VAR 0 2
37374: PPUSH
37375: LD_VAR 0 4
37379: PPUSH
37380: LD_VAR 0 5
37384: PPUSH
37385: LD_INT 12
37387: PPUSH
37388: CALL 37583 0 4
// if cmd = 256 then
37392: LD_VAR 0 1
37396: PUSH
37397: LD_INT 256
37399: EQUAL
37400: IFFALSE 37421
// SetFactoryWaypoint ( unit , x , y ) ;
37402: LD_VAR 0 2
37406: PPUSH
37407: LD_VAR 0 4
37411: PPUSH
37412: LD_VAR 0 5
37416: PPUSH
37417: CALL 34979 0 3
// if cmd = 257 then
37421: LD_VAR 0 1
37425: PUSH
37426: LD_INT 257
37428: EQUAL
37429: IFFALSE 37450
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37431: LD_VAR 0 2
37435: PPUSH
37436: LD_VAR 0 4
37440: PPUSH
37441: LD_VAR 0 5
37445: PPUSH
37446: CALL 35469 0 3
// if cmd = 258 then
37450: LD_VAR 0 1
37454: PUSH
37455: LD_INT 258
37457: EQUAL
37458: IFFALSE 37482
// BurnTreeXYR ( unit , x , y , 8 ) ;
37460: LD_VAR 0 2
37464: PPUSH
37465: LD_VAR 0 4
37469: PPUSH
37470: LD_VAR 0 5
37474: PPUSH
37475: LD_INT 8
37477: PPUSH
37478: CALL 37977 0 4
// end ;
37482: LD_VAR 0 6
37486: RET
// export function ComRadiation ( un ) ; var eff ; begin
37487: LD_INT 0
37489: PPUSH
37490: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37491: LD_VAR 0 1
37495: PPUSH
37496: CALL_OW 264
37500: PUSH
37501: LD_INT 91
37503: NONEQUAL
37504: IFFALSE 37508
// exit ;
37506: GO 37578
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37508: LD_INT 68
37510: PPUSH
37511: LD_VAR 0 1
37515: PPUSH
37516: CALL_OW 255
37520: PPUSH
37521: CALL_OW 321
37525: PUSH
37526: LD_INT 2
37528: EQUAL
37529: IFFALSE 37541
// eff := 50 else
37531: LD_ADDR_VAR 0 3
37535: PUSH
37536: LD_INT 50
37538: ST_TO_ADDR
37539: GO 37549
// eff := 25 ;
37541: LD_ADDR_VAR 0 3
37545: PUSH
37546: LD_INT 25
37548: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 250
37558: PPUSH
37559: LD_VAR 0 1
37563: PPUSH
37564: CALL_OW 251
37568: PPUSH
37569: LD_VAR 0 3
37573: PPUSH
37574: CALL_OW 495
// end ;
37578: LD_VAR 0 2
37582: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37583: LD_INT 0
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
37592: PPUSH
37593: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37594: LD_VAR 0 1
37598: PPUSH
37599: CALL_OW 302
37603: NOT
37604: PUSH
37605: LD_VAR 0 2
37609: PPUSH
37610: LD_VAR 0 3
37614: PPUSH
37615: CALL_OW 488
37619: NOT
37620: OR
37621: PUSH
37622: LD_VAR 0 4
37626: NOT
37627: OR
37628: IFFALSE 37632
// exit ;
37630: GO 37972
// list := [ ] ;
37632: LD_ADDR_VAR 0 13
37636: PUSH
37637: EMPTY
37638: ST_TO_ADDR
// if x - r < 0 then
37639: LD_VAR 0 2
37643: PUSH
37644: LD_VAR 0 4
37648: MINUS
37649: PUSH
37650: LD_INT 0
37652: LESS
37653: IFFALSE 37665
// min_x := 0 else
37655: LD_ADDR_VAR 0 7
37659: PUSH
37660: LD_INT 0
37662: ST_TO_ADDR
37663: GO 37681
// min_x := x - r ;
37665: LD_ADDR_VAR 0 7
37669: PUSH
37670: LD_VAR 0 2
37674: PUSH
37675: LD_VAR 0 4
37679: MINUS
37680: ST_TO_ADDR
// if y - r < 0 then
37681: LD_VAR 0 3
37685: PUSH
37686: LD_VAR 0 4
37690: MINUS
37691: PUSH
37692: LD_INT 0
37694: LESS
37695: IFFALSE 37707
// min_y := 0 else
37697: LD_ADDR_VAR 0 8
37701: PUSH
37702: LD_INT 0
37704: ST_TO_ADDR
37705: GO 37723
// min_y := y - r ;
37707: LD_ADDR_VAR 0 8
37711: PUSH
37712: LD_VAR 0 3
37716: PUSH
37717: LD_VAR 0 4
37721: MINUS
37722: ST_TO_ADDR
// max_x := x + r ;
37723: LD_ADDR_VAR 0 9
37727: PUSH
37728: LD_VAR 0 2
37732: PUSH
37733: LD_VAR 0 4
37737: PLUS
37738: ST_TO_ADDR
// max_y := y + r ;
37739: LD_ADDR_VAR 0 10
37743: PUSH
37744: LD_VAR 0 3
37748: PUSH
37749: LD_VAR 0 4
37753: PLUS
37754: ST_TO_ADDR
// for _x = min_x to max_x do
37755: LD_ADDR_VAR 0 11
37759: PUSH
37760: DOUBLE
37761: LD_VAR 0 7
37765: DEC
37766: ST_TO_ADDR
37767: LD_VAR 0 9
37771: PUSH
37772: FOR_TO
37773: IFFALSE 37890
// for _y = min_y to max_y do
37775: LD_ADDR_VAR 0 12
37779: PUSH
37780: DOUBLE
37781: LD_VAR 0 8
37785: DEC
37786: ST_TO_ADDR
37787: LD_VAR 0 10
37791: PUSH
37792: FOR_TO
37793: IFFALSE 37886
// begin if not ValidHex ( _x , _y ) then
37795: LD_VAR 0 11
37799: PPUSH
37800: LD_VAR 0 12
37804: PPUSH
37805: CALL_OW 488
37809: NOT
37810: IFFALSE 37814
// continue ;
37812: GO 37792
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37814: LD_VAR 0 11
37818: PPUSH
37819: LD_VAR 0 12
37823: PPUSH
37824: CALL_OW 351
37828: PUSH
37829: LD_VAR 0 11
37833: PPUSH
37834: LD_VAR 0 12
37838: PPUSH
37839: CALL_OW 554
37843: AND
37844: IFFALSE 37884
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37846: LD_ADDR_VAR 0 13
37850: PUSH
37851: LD_VAR 0 13
37855: PPUSH
37856: LD_VAR 0 13
37860: PUSH
37861: LD_INT 1
37863: PLUS
37864: PPUSH
37865: LD_VAR 0 11
37869: PUSH
37870: LD_VAR 0 12
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PPUSH
37879: CALL_OW 2
37883: ST_TO_ADDR
// end ;
37884: GO 37792
37886: POP
37887: POP
37888: GO 37772
37890: POP
37891: POP
// if not list then
37892: LD_VAR 0 13
37896: NOT
37897: IFFALSE 37901
// exit ;
37899: GO 37972
// for i in list do
37901: LD_ADDR_VAR 0 6
37905: PUSH
37906: LD_VAR 0 13
37910: PUSH
37911: FOR_IN
37912: IFFALSE 37970
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37914: LD_VAR 0 1
37918: PPUSH
37919: LD_STRING M
37921: PUSH
37922: LD_VAR 0 6
37926: PUSH
37927: LD_INT 1
37929: ARRAY
37930: PUSH
37931: LD_VAR 0 6
37935: PUSH
37936: LD_INT 2
37938: ARRAY
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: PUSH
37961: EMPTY
37962: LIST
37963: PPUSH
37964: CALL_OW 447
37968: GO 37911
37970: POP
37971: POP
// end ;
37972: LD_VAR 0 5
37976: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37977: LD_INT 0
37979: PPUSH
37980: PPUSH
37981: PPUSH
37982: PPUSH
37983: PPUSH
37984: PPUSH
37985: PPUSH
37986: PPUSH
37987: PPUSH
37988: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37989: LD_VAR 0 1
37993: PPUSH
37994: CALL_OW 302
37998: NOT
37999: PUSH
38000: LD_VAR 0 2
38004: PPUSH
38005: LD_VAR 0 3
38009: PPUSH
38010: CALL_OW 488
38014: NOT
38015: OR
38016: PUSH
38017: LD_VAR 0 4
38021: NOT
38022: OR
38023: IFFALSE 38027
// exit ;
38025: GO 38540
// list := [ ] ;
38027: LD_ADDR_VAR 0 13
38031: PUSH
38032: EMPTY
38033: ST_TO_ADDR
// if x - r < 0 then
38034: LD_VAR 0 2
38038: PUSH
38039: LD_VAR 0 4
38043: MINUS
38044: PUSH
38045: LD_INT 0
38047: LESS
38048: IFFALSE 38060
// min_x := 0 else
38050: LD_ADDR_VAR 0 7
38054: PUSH
38055: LD_INT 0
38057: ST_TO_ADDR
38058: GO 38076
// min_x := x - r ;
38060: LD_ADDR_VAR 0 7
38064: PUSH
38065: LD_VAR 0 2
38069: PUSH
38070: LD_VAR 0 4
38074: MINUS
38075: ST_TO_ADDR
// if y - r < 0 then
38076: LD_VAR 0 3
38080: PUSH
38081: LD_VAR 0 4
38085: MINUS
38086: PUSH
38087: LD_INT 0
38089: LESS
38090: IFFALSE 38102
// min_y := 0 else
38092: LD_ADDR_VAR 0 8
38096: PUSH
38097: LD_INT 0
38099: ST_TO_ADDR
38100: GO 38118
// min_y := y - r ;
38102: LD_ADDR_VAR 0 8
38106: PUSH
38107: LD_VAR 0 3
38111: PUSH
38112: LD_VAR 0 4
38116: MINUS
38117: ST_TO_ADDR
// max_x := x + r ;
38118: LD_ADDR_VAR 0 9
38122: PUSH
38123: LD_VAR 0 2
38127: PUSH
38128: LD_VAR 0 4
38132: PLUS
38133: ST_TO_ADDR
// max_y := y + r ;
38134: LD_ADDR_VAR 0 10
38138: PUSH
38139: LD_VAR 0 3
38143: PUSH
38144: LD_VAR 0 4
38148: PLUS
38149: ST_TO_ADDR
// for _x = min_x to max_x do
38150: LD_ADDR_VAR 0 11
38154: PUSH
38155: DOUBLE
38156: LD_VAR 0 7
38160: DEC
38161: ST_TO_ADDR
38162: LD_VAR 0 9
38166: PUSH
38167: FOR_TO
38168: IFFALSE 38285
// for _y = min_y to max_y do
38170: LD_ADDR_VAR 0 12
38174: PUSH
38175: DOUBLE
38176: LD_VAR 0 8
38180: DEC
38181: ST_TO_ADDR
38182: LD_VAR 0 10
38186: PUSH
38187: FOR_TO
38188: IFFALSE 38281
// begin if not ValidHex ( _x , _y ) then
38190: LD_VAR 0 11
38194: PPUSH
38195: LD_VAR 0 12
38199: PPUSH
38200: CALL_OW 488
38204: NOT
38205: IFFALSE 38209
// continue ;
38207: GO 38187
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38209: LD_VAR 0 11
38213: PPUSH
38214: LD_VAR 0 12
38218: PPUSH
38219: CALL_OW 351
38223: PUSH
38224: LD_VAR 0 11
38228: PPUSH
38229: LD_VAR 0 12
38233: PPUSH
38234: CALL_OW 554
38238: AND
38239: IFFALSE 38279
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38241: LD_ADDR_VAR 0 13
38245: PUSH
38246: LD_VAR 0 13
38250: PPUSH
38251: LD_VAR 0 13
38255: PUSH
38256: LD_INT 1
38258: PLUS
38259: PPUSH
38260: LD_VAR 0 11
38264: PUSH
38265: LD_VAR 0 12
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PPUSH
38274: CALL_OW 2
38278: ST_TO_ADDR
// end ;
38279: GO 38187
38281: POP
38282: POP
38283: GO 38167
38285: POP
38286: POP
// if not list then
38287: LD_VAR 0 13
38291: NOT
38292: IFFALSE 38296
// exit ;
38294: GO 38540
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38296: LD_ADDR_VAR 0 13
38300: PUSH
38301: LD_VAR 0 1
38305: PPUSH
38306: LD_VAR 0 13
38310: PPUSH
38311: LD_INT 1
38313: PPUSH
38314: LD_INT 1
38316: PPUSH
38317: CALL 47316 0 4
38321: ST_TO_ADDR
// ComStop ( flame ) ;
38322: LD_VAR 0 1
38326: PPUSH
38327: CALL_OW 141
// for i in list do
38331: LD_ADDR_VAR 0 6
38335: PUSH
38336: LD_VAR 0 13
38340: PUSH
38341: FOR_IN
38342: IFFALSE 38373
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38344: LD_VAR 0 1
38348: PPUSH
38349: LD_VAR 0 6
38353: PUSH
38354: LD_INT 1
38356: ARRAY
38357: PPUSH
38358: LD_VAR 0 6
38362: PUSH
38363: LD_INT 2
38365: ARRAY
38366: PPUSH
38367: CALL_OW 176
38371: GO 38341
38373: POP
38374: POP
// repeat wait ( 0 0$1 ) ;
38375: LD_INT 35
38377: PPUSH
38378: CALL_OW 67
// task := GetTaskList ( flame ) ;
38382: LD_ADDR_VAR 0 14
38386: PUSH
38387: LD_VAR 0 1
38391: PPUSH
38392: CALL_OW 437
38396: ST_TO_ADDR
// if not task then
38397: LD_VAR 0 14
38401: NOT
38402: IFFALSE 38406
// exit ;
38404: GO 38540
// if task [ 1 ] [ 1 ] <> | then
38406: LD_VAR 0 14
38410: PUSH
38411: LD_INT 1
38413: ARRAY
38414: PUSH
38415: LD_INT 1
38417: ARRAY
38418: PUSH
38419: LD_STRING |
38421: NONEQUAL
38422: IFFALSE 38426
// exit ;
38424: GO 38540
// _x := task [ 1 ] [ 2 ] ;
38426: LD_ADDR_VAR 0 11
38430: PUSH
38431: LD_VAR 0 14
38435: PUSH
38436: LD_INT 1
38438: ARRAY
38439: PUSH
38440: LD_INT 2
38442: ARRAY
38443: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38444: LD_ADDR_VAR 0 12
38448: PUSH
38449: LD_VAR 0 14
38453: PUSH
38454: LD_INT 1
38456: ARRAY
38457: PUSH
38458: LD_INT 3
38460: ARRAY
38461: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38462: LD_VAR 0 11
38466: PPUSH
38467: LD_VAR 0 12
38471: PPUSH
38472: CALL_OW 351
38476: NOT
38477: PUSH
38478: LD_VAR 0 11
38482: PPUSH
38483: LD_VAR 0 12
38487: PPUSH
38488: CALL_OW 554
38492: NOT
38493: OR
38494: IFFALSE 38528
// begin task := Delete ( task , 1 ) ;
38496: LD_ADDR_VAR 0 14
38500: PUSH
38501: LD_VAR 0 14
38505: PPUSH
38506: LD_INT 1
38508: PPUSH
38509: CALL_OW 3
38513: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38514: LD_VAR 0 1
38518: PPUSH
38519: LD_VAR 0 14
38523: PPUSH
38524: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38528: LD_VAR 0 1
38532: PPUSH
38533: CALL_OW 314
38537: NOT
38538: IFFALSE 38375
// end ;
38540: LD_VAR 0 5
38544: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38545: LD_EXP 100
38549: NOT
38550: IFFALSE 38600
38552: GO 38554
38554: DISABLE
// begin initHack := true ;
38555: LD_ADDR_EXP 100
38559: PUSH
38560: LD_INT 1
38562: ST_TO_ADDR
// hackTanks := [ ] ;
38563: LD_ADDR_EXP 101
38567: PUSH
38568: EMPTY
38569: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38570: LD_ADDR_EXP 102
38574: PUSH
38575: EMPTY
38576: ST_TO_ADDR
// hackLimit := 3 ;
38577: LD_ADDR_EXP 103
38581: PUSH
38582: LD_INT 3
38584: ST_TO_ADDR
// hackDist := 12 ;
38585: LD_ADDR_EXP 104
38589: PUSH
38590: LD_INT 12
38592: ST_TO_ADDR
// hackCounter := [ ] ;
38593: LD_ADDR_EXP 105
38597: PUSH
38598: EMPTY
38599: ST_TO_ADDR
// end ;
38600: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38601: LD_EXP 100
38605: PUSH
38606: LD_INT 34
38608: PUSH
38609: LD_INT 99
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PPUSH
38616: CALL_OW 69
38620: AND
38621: IFFALSE 38874
38623: GO 38625
38625: DISABLE
38626: LD_INT 0
38628: PPUSH
38629: PPUSH
// begin enable ;
38630: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38631: LD_ADDR_VAR 0 1
38635: PUSH
38636: LD_INT 34
38638: PUSH
38639: LD_INT 99
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PPUSH
38646: CALL_OW 69
38650: PUSH
38651: FOR_IN
38652: IFFALSE 38872
// begin if not i in hackTanks then
38654: LD_VAR 0 1
38658: PUSH
38659: LD_EXP 101
38663: IN
38664: NOT
38665: IFFALSE 38748
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38667: LD_ADDR_EXP 101
38671: PUSH
38672: LD_EXP 101
38676: PPUSH
38677: LD_EXP 101
38681: PUSH
38682: LD_INT 1
38684: PLUS
38685: PPUSH
38686: LD_VAR 0 1
38690: PPUSH
38691: CALL_OW 1
38695: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38696: LD_ADDR_EXP 102
38700: PUSH
38701: LD_EXP 102
38705: PPUSH
38706: LD_EXP 102
38710: PUSH
38711: LD_INT 1
38713: PLUS
38714: PPUSH
38715: EMPTY
38716: PPUSH
38717: CALL_OW 1
38721: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38722: LD_ADDR_EXP 105
38726: PUSH
38727: LD_EXP 105
38731: PPUSH
38732: LD_EXP 105
38736: PUSH
38737: LD_INT 1
38739: PLUS
38740: PPUSH
38741: EMPTY
38742: PPUSH
38743: CALL_OW 1
38747: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38748: LD_VAR 0 1
38752: PPUSH
38753: CALL_OW 302
38757: NOT
38758: IFFALSE 38771
// begin HackUnlinkAll ( i ) ;
38760: LD_VAR 0 1
38764: PPUSH
38765: CALL 38877 0 1
// continue ;
38769: GO 38651
// end ; HackCheckCapturedStatus ( i ) ;
38771: LD_VAR 0 1
38775: PPUSH
38776: CALL 39320 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38780: LD_ADDR_VAR 0 2
38784: PUSH
38785: LD_INT 81
38787: PUSH
38788: LD_VAR 0 1
38792: PPUSH
38793: CALL_OW 255
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 33
38804: PUSH
38805: LD_INT 3
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 91
38814: PUSH
38815: LD_VAR 0 1
38819: PUSH
38820: LD_EXP 104
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 50
38832: PUSH
38833: EMPTY
38834: LIST
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: PPUSH
38842: CALL_OW 69
38846: ST_TO_ADDR
// if not tmp then
38847: LD_VAR 0 2
38851: NOT
38852: IFFALSE 38856
// continue ;
38854: GO 38651
// HackLink ( i , tmp ) ;
38856: LD_VAR 0 1
38860: PPUSH
38861: LD_VAR 0 2
38865: PPUSH
38866: CALL 39013 0 2
// end ;
38870: GO 38651
38872: POP
38873: POP
// end ;
38874: PPOPN 2
38876: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38877: LD_INT 0
38879: PPUSH
38880: PPUSH
38881: PPUSH
// if not hack in hackTanks then
38882: LD_VAR 0 1
38886: PUSH
38887: LD_EXP 101
38891: IN
38892: NOT
38893: IFFALSE 38897
// exit ;
38895: GO 39008
// index := GetElementIndex ( hackTanks , hack ) ;
38897: LD_ADDR_VAR 0 4
38901: PUSH
38902: LD_EXP 101
38906: PPUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: CALL 46613 0 2
38916: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38917: LD_EXP 102
38921: PUSH
38922: LD_VAR 0 4
38926: ARRAY
38927: IFFALSE 39008
// begin for i in hackTanksCaptured [ index ] do
38929: LD_ADDR_VAR 0 3
38933: PUSH
38934: LD_EXP 102
38938: PUSH
38939: LD_VAR 0 4
38943: ARRAY
38944: PUSH
38945: FOR_IN
38946: IFFALSE 38972
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38948: LD_VAR 0 3
38952: PUSH
38953: LD_INT 1
38955: ARRAY
38956: PPUSH
38957: LD_VAR 0 3
38961: PUSH
38962: LD_INT 2
38964: ARRAY
38965: PPUSH
38966: CALL_OW 235
38970: GO 38945
38972: POP
38973: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38974: LD_ADDR_EXP 102
38978: PUSH
38979: LD_EXP 102
38983: PPUSH
38984: LD_VAR 0 4
38988: PPUSH
38989: EMPTY
38990: PPUSH
38991: CALL_OW 1
38995: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38996: LD_VAR 0 1
39000: PPUSH
39001: LD_INT 0
39003: PPUSH
39004: CALL_OW 505
// end ; end ;
39008: LD_VAR 0 2
39012: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39013: LD_INT 0
39015: PPUSH
39016: PPUSH
39017: PPUSH
// if not hack in hackTanks or not vehicles then
39018: LD_VAR 0 1
39022: PUSH
39023: LD_EXP 101
39027: IN
39028: NOT
39029: PUSH
39030: LD_VAR 0 2
39034: NOT
39035: OR
39036: IFFALSE 39040
// exit ;
39038: GO 39315
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39040: LD_ADDR_VAR 0 2
39044: PUSH
39045: LD_VAR 0 1
39049: PPUSH
39050: LD_VAR 0 2
39054: PPUSH
39055: LD_INT 1
39057: PPUSH
39058: LD_INT 1
39060: PPUSH
39061: CALL 47263 0 4
39065: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39066: LD_ADDR_VAR 0 5
39070: PUSH
39071: LD_EXP 101
39075: PPUSH
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL 46613 0 2
39085: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39086: LD_EXP 102
39090: PUSH
39091: LD_VAR 0 5
39095: ARRAY
39096: PUSH
39097: LD_EXP 103
39101: LESS
39102: IFFALSE 39291
// begin for i := 1 to vehicles do
39104: LD_ADDR_VAR 0 4
39108: PUSH
39109: DOUBLE
39110: LD_INT 1
39112: DEC
39113: ST_TO_ADDR
39114: LD_VAR 0 2
39118: PUSH
39119: FOR_TO
39120: IFFALSE 39289
// begin if hackTanksCaptured [ index ] = hackLimit then
39122: LD_EXP 102
39126: PUSH
39127: LD_VAR 0 5
39131: ARRAY
39132: PUSH
39133: LD_EXP 103
39137: EQUAL
39138: IFFALSE 39142
// break ;
39140: GO 39289
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39142: LD_ADDR_EXP 105
39146: PUSH
39147: LD_EXP 105
39151: PPUSH
39152: LD_VAR 0 5
39156: PPUSH
39157: LD_EXP 105
39161: PUSH
39162: LD_VAR 0 5
39166: ARRAY
39167: PUSH
39168: LD_INT 1
39170: PLUS
39171: PPUSH
39172: CALL_OW 1
39176: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39177: LD_ADDR_EXP 102
39181: PUSH
39182: LD_EXP 102
39186: PPUSH
39187: LD_VAR 0 5
39191: PUSH
39192: LD_EXP 102
39196: PUSH
39197: LD_VAR 0 5
39201: ARRAY
39202: PUSH
39203: LD_INT 1
39205: PLUS
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PPUSH
39211: LD_VAR 0 2
39215: PUSH
39216: LD_VAR 0 4
39220: ARRAY
39221: PUSH
39222: LD_VAR 0 2
39226: PUSH
39227: LD_VAR 0 4
39231: ARRAY
39232: PPUSH
39233: CALL_OW 255
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PPUSH
39242: CALL 46828 0 3
39246: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39247: LD_VAR 0 2
39251: PUSH
39252: LD_VAR 0 4
39256: ARRAY
39257: PPUSH
39258: LD_VAR 0 1
39262: PPUSH
39263: CALL_OW 255
39267: PPUSH
39268: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39272: LD_VAR 0 2
39276: PUSH
39277: LD_VAR 0 4
39281: ARRAY
39282: PPUSH
39283: CALL_OW 141
// end ;
39287: GO 39119
39289: POP
39290: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39291: LD_VAR 0 1
39295: PPUSH
39296: LD_EXP 102
39300: PUSH
39301: LD_VAR 0 5
39305: ARRAY
39306: PUSH
39307: LD_INT 0
39309: PLUS
39310: PPUSH
39311: CALL_OW 505
// end ;
39315: LD_VAR 0 3
39319: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39320: LD_INT 0
39322: PPUSH
39323: PPUSH
39324: PPUSH
39325: PPUSH
// if not hack in hackTanks then
39326: LD_VAR 0 1
39330: PUSH
39331: LD_EXP 101
39335: IN
39336: NOT
39337: IFFALSE 39341
// exit ;
39339: GO 39581
// index := GetElementIndex ( hackTanks , hack ) ;
39341: LD_ADDR_VAR 0 4
39345: PUSH
39346: LD_EXP 101
39350: PPUSH
39351: LD_VAR 0 1
39355: PPUSH
39356: CALL 46613 0 2
39360: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39361: LD_ADDR_VAR 0 3
39365: PUSH
39366: DOUBLE
39367: LD_EXP 102
39371: PUSH
39372: LD_VAR 0 4
39376: ARRAY
39377: INC
39378: ST_TO_ADDR
39379: LD_INT 1
39381: PUSH
39382: FOR_DOWNTO
39383: IFFALSE 39555
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39385: LD_ADDR_VAR 0 5
39389: PUSH
39390: LD_EXP 102
39394: PUSH
39395: LD_VAR 0 4
39399: ARRAY
39400: PUSH
39401: LD_VAR 0 3
39405: ARRAY
39406: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39407: LD_VAR 0 5
39411: PUSH
39412: LD_INT 1
39414: ARRAY
39415: PPUSH
39416: CALL_OW 302
39420: NOT
39421: PUSH
39422: LD_VAR 0 5
39426: PUSH
39427: LD_INT 1
39429: ARRAY
39430: PPUSH
39431: CALL_OW 255
39435: PUSH
39436: LD_VAR 0 1
39440: PPUSH
39441: CALL_OW 255
39445: NONEQUAL
39446: OR
39447: IFFALSE 39553
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39449: LD_VAR 0 5
39453: PUSH
39454: LD_INT 1
39456: ARRAY
39457: PPUSH
39458: CALL_OW 305
39462: PUSH
39463: LD_VAR 0 5
39467: PUSH
39468: LD_INT 1
39470: ARRAY
39471: PPUSH
39472: CALL_OW 255
39476: PUSH
39477: LD_VAR 0 1
39481: PPUSH
39482: CALL_OW 255
39486: EQUAL
39487: AND
39488: IFFALSE 39512
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39490: LD_VAR 0 5
39494: PUSH
39495: LD_INT 1
39497: ARRAY
39498: PPUSH
39499: LD_VAR 0 5
39503: PUSH
39504: LD_INT 2
39506: ARRAY
39507: PPUSH
39508: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39512: LD_ADDR_EXP 102
39516: PUSH
39517: LD_EXP 102
39521: PPUSH
39522: LD_VAR 0 4
39526: PPUSH
39527: LD_EXP 102
39531: PUSH
39532: LD_VAR 0 4
39536: ARRAY
39537: PPUSH
39538: LD_VAR 0 3
39542: PPUSH
39543: CALL_OW 3
39547: PPUSH
39548: CALL_OW 1
39552: ST_TO_ADDR
// end ; end ;
39553: GO 39382
39555: POP
39556: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39557: LD_VAR 0 1
39561: PPUSH
39562: LD_EXP 102
39566: PUSH
39567: LD_VAR 0 4
39571: ARRAY
39572: PUSH
39573: LD_INT 0
39575: PLUS
39576: PPUSH
39577: CALL_OW 505
// end ;
39581: LD_VAR 0 2
39585: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39586: LD_INT 0
39588: PPUSH
39589: PPUSH
39590: PPUSH
39591: PPUSH
// if not hack in hackTanks then
39592: LD_VAR 0 1
39596: PUSH
39597: LD_EXP 101
39601: IN
39602: NOT
39603: IFFALSE 39607
// exit ;
39605: GO 39692
// index := GetElementIndex ( hackTanks , hack ) ;
39607: LD_ADDR_VAR 0 5
39611: PUSH
39612: LD_EXP 101
39616: PPUSH
39617: LD_VAR 0 1
39621: PPUSH
39622: CALL 46613 0 2
39626: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39627: LD_ADDR_VAR 0 4
39631: PUSH
39632: DOUBLE
39633: LD_INT 1
39635: DEC
39636: ST_TO_ADDR
39637: LD_EXP 102
39641: PUSH
39642: LD_VAR 0 5
39646: ARRAY
39647: PUSH
39648: FOR_TO
39649: IFFALSE 39690
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39651: LD_EXP 102
39655: PUSH
39656: LD_VAR 0 5
39660: ARRAY
39661: PUSH
39662: LD_VAR 0 4
39666: ARRAY
39667: PUSH
39668: LD_INT 1
39670: ARRAY
39671: PUSH
39672: LD_VAR 0 2
39676: EQUAL
39677: IFFALSE 39688
// KillUnit ( vehicle ) ;
39679: LD_VAR 0 2
39683: PPUSH
39684: CALL_OW 66
39688: GO 39648
39690: POP
39691: POP
// end ;
39692: LD_VAR 0 3
39696: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39697: LD_EXP 106
39701: NOT
39702: IFFALSE 39737
39704: GO 39706
39706: DISABLE
// begin initMiner := true ;
39707: LD_ADDR_EXP 106
39711: PUSH
39712: LD_INT 1
39714: ST_TO_ADDR
// minersList := [ ] ;
39715: LD_ADDR_EXP 107
39719: PUSH
39720: EMPTY
39721: ST_TO_ADDR
// minerMinesList := [ ] ;
39722: LD_ADDR_EXP 108
39726: PUSH
39727: EMPTY
39728: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39729: LD_ADDR_EXP 109
39733: PUSH
39734: LD_INT 5
39736: ST_TO_ADDR
// end ;
39737: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39738: LD_EXP 106
39742: PUSH
39743: LD_INT 34
39745: PUSH
39746: LD_INT 81
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PPUSH
39753: CALL_OW 69
39757: AND
39758: IFFALSE 40219
39760: GO 39762
39762: DISABLE
39763: LD_INT 0
39765: PPUSH
39766: PPUSH
39767: PPUSH
39768: PPUSH
// begin enable ;
39769: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39770: LD_ADDR_VAR 0 1
39774: PUSH
39775: LD_INT 34
39777: PUSH
39778: LD_INT 81
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PPUSH
39785: CALL_OW 69
39789: PUSH
39790: FOR_IN
39791: IFFALSE 39863
// begin if not i in minersList then
39793: LD_VAR 0 1
39797: PUSH
39798: LD_EXP 107
39802: IN
39803: NOT
39804: IFFALSE 39861
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39806: LD_ADDR_EXP 107
39810: PUSH
39811: LD_EXP 107
39815: PPUSH
39816: LD_EXP 107
39820: PUSH
39821: LD_INT 1
39823: PLUS
39824: PPUSH
39825: LD_VAR 0 1
39829: PPUSH
39830: CALL_OW 1
39834: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39835: LD_ADDR_EXP 108
39839: PUSH
39840: LD_EXP 108
39844: PPUSH
39845: LD_EXP 108
39849: PUSH
39850: LD_INT 1
39852: PLUS
39853: PPUSH
39854: EMPTY
39855: PPUSH
39856: CALL_OW 1
39860: ST_TO_ADDR
// end end ;
39861: GO 39790
39863: POP
39864: POP
// for i := minerMinesList downto 1 do
39865: LD_ADDR_VAR 0 1
39869: PUSH
39870: DOUBLE
39871: LD_EXP 108
39875: INC
39876: ST_TO_ADDR
39877: LD_INT 1
39879: PUSH
39880: FOR_DOWNTO
39881: IFFALSE 40217
// begin if IsLive ( minersList [ i ] ) then
39883: LD_EXP 107
39887: PUSH
39888: LD_VAR 0 1
39892: ARRAY
39893: PPUSH
39894: CALL_OW 300
39898: IFFALSE 39926
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39900: LD_EXP 107
39904: PUSH
39905: LD_VAR 0 1
39909: ARRAY
39910: PPUSH
39911: LD_EXP 108
39915: PUSH
39916: LD_VAR 0 1
39920: ARRAY
39921: PPUSH
39922: CALL_OW 505
// if not minerMinesList [ i ] then
39926: LD_EXP 108
39930: PUSH
39931: LD_VAR 0 1
39935: ARRAY
39936: NOT
39937: IFFALSE 39941
// continue ;
39939: GO 39880
// for j := minerMinesList [ i ] downto 1 do
39941: LD_ADDR_VAR 0 2
39945: PUSH
39946: DOUBLE
39947: LD_EXP 108
39951: PUSH
39952: LD_VAR 0 1
39956: ARRAY
39957: INC
39958: ST_TO_ADDR
39959: LD_INT 1
39961: PUSH
39962: FOR_DOWNTO
39963: IFFALSE 40213
// begin side := GetSide ( minersList [ i ] ) ;
39965: LD_ADDR_VAR 0 3
39969: PUSH
39970: LD_EXP 107
39974: PUSH
39975: LD_VAR 0 1
39979: ARRAY
39980: PPUSH
39981: CALL_OW 255
39985: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39986: LD_ADDR_VAR 0 4
39990: PUSH
39991: LD_EXP 108
39995: PUSH
39996: LD_VAR 0 1
40000: ARRAY
40001: PUSH
40002: LD_VAR 0 2
40006: ARRAY
40007: PUSH
40008: LD_INT 1
40010: ARRAY
40011: PPUSH
40012: LD_EXP 108
40016: PUSH
40017: LD_VAR 0 1
40021: ARRAY
40022: PUSH
40023: LD_VAR 0 2
40027: ARRAY
40028: PUSH
40029: LD_INT 2
40031: ARRAY
40032: PPUSH
40033: CALL_OW 428
40037: ST_TO_ADDR
// if not tmp then
40038: LD_VAR 0 4
40042: NOT
40043: IFFALSE 40047
// continue ;
40045: GO 39962
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40047: LD_VAR 0 4
40051: PUSH
40052: LD_INT 81
40054: PUSH
40055: LD_VAR 0 3
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PPUSH
40064: CALL_OW 69
40068: IN
40069: PUSH
40070: LD_EXP 108
40074: PUSH
40075: LD_VAR 0 1
40079: ARRAY
40080: PUSH
40081: LD_VAR 0 2
40085: ARRAY
40086: PUSH
40087: LD_INT 1
40089: ARRAY
40090: PPUSH
40091: LD_EXP 108
40095: PUSH
40096: LD_VAR 0 1
40100: ARRAY
40101: PUSH
40102: LD_VAR 0 2
40106: ARRAY
40107: PUSH
40108: LD_INT 2
40110: ARRAY
40111: PPUSH
40112: CALL_OW 458
40116: AND
40117: IFFALSE 40211
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40119: LD_EXP 108
40123: PUSH
40124: LD_VAR 0 1
40128: ARRAY
40129: PUSH
40130: LD_VAR 0 2
40134: ARRAY
40135: PUSH
40136: LD_INT 1
40138: ARRAY
40139: PPUSH
40140: LD_EXP 108
40144: PUSH
40145: LD_VAR 0 1
40149: ARRAY
40150: PUSH
40151: LD_VAR 0 2
40155: ARRAY
40156: PUSH
40157: LD_INT 2
40159: ARRAY
40160: PPUSH
40161: LD_VAR 0 3
40165: PPUSH
40166: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40170: LD_ADDR_EXP 108
40174: PUSH
40175: LD_EXP 108
40179: PPUSH
40180: LD_VAR 0 1
40184: PPUSH
40185: LD_EXP 108
40189: PUSH
40190: LD_VAR 0 1
40194: ARRAY
40195: PPUSH
40196: LD_VAR 0 2
40200: PPUSH
40201: CALL_OW 3
40205: PPUSH
40206: CALL_OW 1
40210: ST_TO_ADDR
// end ; end ;
40211: GO 39962
40213: POP
40214: POP
// end ;
40215: GO 39880
40217: POP
40218: POP
// end ;
40219: PPOPN 4
40221: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40222: LD_INT 0
40224: PPUSH
40225: PPUSH
// result := false ;
40226: LD_ADDR_VAR 0 4
40230: PUSH
40231: LD_INT 0
40233: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40234: LD_VAR 0 1
40238: PPUSH
40239: CALL_OW 264
40243: PUSH
40244: LD_INT 81
40246: EQUAL
40247: NOT
40248: IFFALSE 40252
// exit ;
40250: GO 40492
// index := GetElementIndex ( minersList , unit ) ;
40252: LD_ADDR_VAR 0 5
40256: PUSH
40257: LD_EXP 107
40261: PPUSH
40262: LD_VAR 0 1
40266: PPUSH
40267: CALL 46613 0 2
40271: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40272: LD_EXP 108
40276: PUSH
40277: LD_VAR 0 5
40281: ARRAY
40282: PUSH
40283: LD_EXP 109
40287: GREATEREQUAL
40288: IFFALSE 40292
// exit ;
40290: GO 40492
// ComMoveXY ( unit , x , y ) ;
40292: LD_VAR 0 1
40296: PPUSH
40297: LD_VAR 0 2
40301: PPUSH
40302: LD_VAR 0 3
40306: PPUSH
40307: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40311: LD_INT 35
40313: PPUSH
40314: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40318: LD_VAR 0 1
40322: PPUSH
40323: LD_VAR 0 2
40327: PPUSH
40328: LD_VAR 0 3
40332: PPUSH
40333: CALL 78374 0 3
40337: NOT
40338: PUSH
40339: LD_VAR 0 1
40343: PPUSH
40344: CALL_OW 314
40348: AND
40349: IFFALSE 40353
// exit ;
40351: GO 40492
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40353: LD_VAR 0 2
40357: PPUSH
40358: LD_VAR 0 3
40362: PPUSH
40363: CALL_OW 428
40367: PUSH
40368: LD_VAR 0 1
40372: EQUAL
40373: PUSH
40374: LD_VAR 0 1
40378: PPUSH
40379: CALL_OW 314
40383: NOT
40384: AND
40385: IFFALSE 40311
// PlaySoundXY ( x , y , PlantMine ) ;
40387: LD_VAR 0 2
40391: PPUSH
40392: LD_VAR 0 3
40396: PPUSH
40397: LD_STRING PlantMine
40399: PPUSH
40400: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40404: LD_VAR 0 2
40408: PPUSH
40409: LD_VAR 0 3
40413: PPUSH
40414: LD_VAR 0 1
40418: PPUSH
40419: CALL_OW 255
40423: PPUSH
40424: LD_INT 0
40426: PPUSH
40427: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40431: LD_ADDR_EXP 108
40435: PUSH
40436: LD_EXP 108
40440: PPUSH
40441: LD_VAR 0 5
40445: PUSH
40446: LD_EXP 108
40450: PUSH
40451: LD_VAR 0 5
40455: ARRAY
40456: PUSH
40457: LD_INT 1
40459: PLUS
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PPUSH
40465: LD_VAR 0 2
40469: PUSH
40470: LD_VAR 0 3
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PPUSH
40479: CALL 46828 0 3
40483: ST_TO_ADDR
// result := true ;
40484: LD_ADDR_VAR 0 4
40488: PUSH
40489: LD_INT 1
40491: ST_TO_ADDR
// end ;
40492: LD_VAR 0 4
40496: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40497: LD_INT 0
40499: PPUSH
40500: PPUSH
40501: PPUSH
// if not unit in minersList then
40502: LD_VAR 0 1
40506: PUSH
40507: LD_EXP 107
40511: IN
40512: NOT
40513: IFFALSE 40517
// exit ;
40515: GO 40909
// index := GetElementIndex ( minersList , unit ) ;
40517: LD_ADDR_VAR 0 6
40521: PUSH
40522: LD_EXP 107
40526: PPUSH
40527: LD_VAR 0 1
40531: PPUSH
40532: CALL 46613 0 2
40536: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40537: LD_ADDR_VAR 0 5
40541: PUSH
40542: DOUBLE
40543: LD_EXP 108
40547: PUSH
40548: LD_VAR 0 6
40552: ARRAY
40553: INC
40554: ST_TO_ADDR
40555: LD_INT 1
40557: PUSH
40558: FOR_DOWNTO
40559: IFFALSE 40720
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40561: LD_EXP 108
40565: PUSH
40566: LD_VAR 0 6
40570: ARRAY
40571: PUSH
40572: LD_VAR 0 5
40576: ARRAY
40577: PUSH
40578: LD_INT 1
40580: ARRAY
40581: PUSH
40582: LD_VAR 0 2
40586: EQUAL
40587: PUSH
40588: LD_EXP 108
40592: PUSH
40593: LD_VAR 0 6
40597: ARRAY
40598: PUSH
40599: LD_VAR 0 5
40603: ARRAY
40604: PUSH
40605: LD_INT 2
40607: ARRAY
40608: PUSH
40609: LD_VAR 0 3
40613: EQUAL
40614: AND
40615: IFFALSE 40718
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40617: LD_EXP 108
40621: PUSH
40622: LD_VAR 0 6
40626: ARRAY
40627: PUSH
40628: LD_VAR 0 5
40632: ARRAY
40633: PUSH
40634: LD_INT 1
40636: ARRAY
40637: PPUSH
40638: LD_EXP 108
40642: PUSH
40643: LD_VAR 0 6
40647: ARRAY
40648: PUSH
40649: LD_VAR 0 5
40653: ARRAY
40654: PUSH
40655: LD_INT 2
40657: ARRAY
40658: PPUSH
40659: LD_VAR 0 1
40663: PPUSH
40664: CALL_OW 255
40668: PPUSH
40669: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40673: LD_ADDR_EXP 108
40677: PUSH
40678: LD_EXP 108
40682: PPUSH
40683: LD_VAR 0 6
40687: PPUSH
40688: LD_EXP 108
40692: PUSH
40693: LD_VAR 0 6
40697: ARRAY
40698: PPUSH
40699: LD_VAR 0 5
40703: PPUSH
40704: CALL_OW 3
40708: PPUSH
40709: CALL_OW 1
40713: ST_TO_ADDR
// exit ;
40714: POP
40715: POP
40716: GO 40909
// end ; end ;
40718: GO 40558
40720: POP
40721: POP
// for i := minerMinesList [ index ] downto 1 do
40722: LD_ADDR_VAR 0 5
40726: PUSH
40727: DOUBLE
40728: LD_EXP 108
40732: PUSH
40733: LD_VAR 0 6
40737: ARRAY
40738: INC
40739: ST_TO_ADDR
40740: LD_INT 1
40742: PUSH
40743: FOR_DOWNTO
40744: IFFALSE 40907
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40746: LD_EXP 108
40750: PUSH
40751: LD_VAR 0 6
40755: ARRAY
40756: PUSH
40757: LD_VAR 0 5
40761: ARRAY
40762: PUSH
40763: LD_INT 1
40765: ARRAY
40766: PPUSH
40767: LD_EXP 108
40771: PUSH
40772: LD_VAR 0 6
40776: ARRAY
40777: PUSH
40778: LD_VAR 0 5
40782: ARRAY
40783: PUSH
40784: LD_INT 2
40786: ARRAY
40787: PPUSH
40788: LD_VAR 0 2
40792: PPUSH
40793: LD_VAR 0 3
40797: PPUSH
40798: CALL_OW 298
40802: PUSH
40803: LD_INT 6
40805: LESS
40806: IFFALSE 40905
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40808: LD_EXP 108
40812: PUSH
40813: LD_VAR 0 6
40817: ARRAY
40818: PUSH
40819: LD_VAR 0 5
40823: ARRAY
40824: PUSH
40825: LD_INT 1
40827: ARRAY
40828: PPUSH
40829: LD_EXP 108
40833: PUSH
40834: LD_VAR 0 6
40838: ARRAY
40839: PUSH
40840: LD_VAR 0 5
40844: ARRAY
40845: PUSH
40846: LD_INT 2
40848: ARRAY
40849: PPUSH
40850: LD_VAR 0 1
40854: PPUSH
40855: CALL_OW 255
40859: PPUSH
40860: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40864: LD_ADDR_EXP 108
40868: PUSH
40869: LD_EXP 108
40873: PPUSH
40874: LD_VAR 0 6
40878: PPUSH
40879: LD_EXP 108
40883: PUSH
40884: LD_VAR 0 6
40888: ARRAY
40889: PPUSH
40890: LD_VAR 0 5
40894: PPUSH
40895: CALL_OW 3
40899: PPUSH
40900: CALL_OW 1
40904: ST_TO_ADDR
// end ; end ;
40905: GO 40743
40907: POP
40908: POP
// end ;
40909: LD_VAR 0 4
40913: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40914: LD_INT 0
40916: PPUSH
40917: PPUSH
40918: PPUSH
40919: PPUSH
40920: PPUSH
40921: PPUSH
40922: PPUSH
40923: PPUSH
40924: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40925: LD_VAR 0 1
40929: PPUSH
40930: CALL_OW 264
40934: PUSH
40935: LD_INT 81
40937: EQUAL
40938: NOT
40939: PUSH
40940: LD_VAR 0 1
40944: PUSH
40945: LD_EXP 107
40949: IN
40950: NOT
40951: OR
40952: IFFALSE 40956
// exit ;
40954: GO 41278
// index := GetElementIndex ( minersList , unit ) ;
40956: LD_ADDR_VAR 0 6
40960: PUSH
40961: LD_EXP 107
40965: PPUSH
40966: LD_VAR 0 1
40970: PPUSH
40971: CALL 46613 0 2
40975: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40976: LD_ADDR_VAR 0 8
40980: PUSH
40981: LD_EXP 109
40985: PUSH
40986: LD_EXP 108
40990: PUSH
40991: LD_VAR 0 6
40995: ARRAY
40996: MINUS
40997: ST_TO_ADDR
// if not minesFreeAmount then
40998: LD_VAR 0 8
41002: NOT
41003: IFFALSE 41007
// exit ;
41005: GO 41278
// tmp := [ ] ;
41007: LD_ADDR_VAR 0 7
41011: PUSH
41012: EMPTY
41013: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41014: LD_ADDR_VAR 0 5
41018: PUSH
41019: DOUBLE
41020: LD_INT 1
41022: DEC
41023: ST_TO_ADDR
41024: LD_VAR 0 8
41028: PUSH
41029: FOR_TO
41030: IFFALSE 41225
// begin _d := rand ( 0 , 5 ) ;
41032: LD_ADDR_VAR 0 11
41036: PUSH
41037: LD_INT 0
41039: PPUSH
41040: LD_INT 5
41042: PPUSH
41043: CALL_OW 12
41047: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41048: LD_ADDR_VAR 0 12
41052: PUSH
41053: LD_INT 2
41055: PPUSH
41056: LD_INT 6
41058: PPUSH
41059: CALL_OW 12
41063: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41064: LD_ADDR_VAR 0 9
41068: PUSH
41069: LD_VAR 0 2
41073: PPUSH
41074: LD_VAR 0 11
41078: PPUSH
41079: LD_VAR 0 12
41083: PPUSH
41084: CALL_OW 272
41088: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41089: LD_ADDR_VAR 0 10
41093: PUSH
41094: LD_VAR 0 3
41098: PPUSH
41099: LD_VAR 0 11
41103: PPUSH
41104: LD_VAR 0 12
41108: PPUSH
41109: CALL_OW 273
41113: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41114: LD_VAR 0 9
41118: PPUSH
41119: LD_VAR 0 10
41123: PPUSH
41124: CALL_OW 488
41128: PUSH
41129: LD_VAR 0 9
41133: PUSH
41134: LD_VAR 0 10
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_VAR 0 7
41147: IN
41148: NOT
41149: AND
41150: PUSH
41151: LD_VAR 0 9
41155: PPUSH
41156: LD_VAR 0 10
41160: PPUSH
41161: CALL_OW 458
41165: NOT
41166: AND
41167: IFFALSE 41209
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41169: LD_ADDR_VAR 0 7
41173: PUSH
41174: LD_VAR 0 7
41178: PPUSH
41179: LD_VAR 0 7
41183: PUSH
41184: LD_INT 1
41186: PLUS
41187: PPUSH
41188: LD_VAR 0 9
41192: PUSH
41193: LD_VAR 0 10
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PPUSH
41202: CALL_OW 1
41206: ST_TO_ADDR
41207: GO 41223
// i := i - 1 ;
41209: LD_ADDR_VAR 0 5
41213: PUSH
41214: LD_VAR 0 5
41218: PUSH
41219: LD_INT 1
41221: MINUS
41222: ST_TO_ADDR
// end ;
41223: GO 41029
41225: POP
41226: POP
// for i in tmp do
41227: LD_ADDR_VAR 0 5
41231: PUSH
41232: LD_VAR 0 7
41236: PUSH
41237: FOR_IN
41238: IFFALSE 41276
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41240: LD_VAR 0 1
41244: PPUSH
41245: LD_VAR 0 5
41249: PUSH
41250: LD_INT 1
41252: ARRAY
41253: PPUSH
41254: LD_VAR 0 5
41258: PUSH
41259: LD_INT 2
41261: ARRAY
41262: PPUSH
41263: CALL 40222 0 3
41267: NOT
41268: IFFALSE 41274
// exit ;
41270: POP
41271: POP
41272: GO 41278
41274: GO 41237
41276: POP
41277: POP
// end ;
41278: LD_VAR 0 4
41282: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
41283: LD_INT 0
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
// if GetClass ( unit ) <> class_sniper then
41294: LD_VAR 0 1
41298: PPUSH
41299: CALL_OW 257
41303: PUSH
41304: LD_INT 5
41306: NONEQUAL
41307: IFFALSE 41311
// exit ;
41309: GO 41777
// dist := 8 ;
41311: LD_ADDR_VAR 0 5
41315: PUSH
41316: LD_INT 8
41318: ST_TO_ADDR
// viewRange := 12 ;
41319: LD_ADDR_VAR 0 8
41323: PUSH
41324: LD_INT 12
41326: ST_TO_ADDR
// side := GetSide ( unit ) ;
41327: LD_ADDR_VAR 0 6
41331: PUSH
41332: LD_VAR 0 1
41336: PPUSH
41337: CALL_OW 255
41341: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41342: LD_INT 61
41344: PPUSH
41345: LD_VAR 0 6
41349: PPUSH
41350: CALL_OW 321
41354: PUSH
41355: LD_INT 2
41357: EQUAL
41358: IFFALSE 41368
// viewRange := 16 ;
41360: LD_ADDR_VAR 0 8
41364: PUSH
41365: LD_INT 16
41367: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41368: LD_VAR 0 1
41372: PPUSH
41373: LD_VAR 0 2
41377: PPUSH
41378: LD_VAR 0 3
41382: PPUSH
41383: CALL_OW 297
41387: PUSH
41388: LD_VAR 0 5
41392: GREATER
41393: IFFALSE 41472
// begin ComMoveXY ( unit , x , y ) ;
41395: LD_VAR 0 1
41399: PPUSH
41400: LD_VAR 0 2
41404: PPUSH
41405: LD_VAR 0 3
41409: PPUSH
41410: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41414: LD_INT 35
41416: PPUSH
41417: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41421: LD_VAR 0 1
41425: PPUSH
41426: LD_VAR 0 2
41430: PPUSH
41431: LD_VAR 0 3
41435: PPUSH
41436: CALL 78374 0 3
41440: NOT
41441: IFFALSE 41445
// exit ;
41443: GO 41777
// until GetDistUnitXY ( unit , x , y ) < dist ;
41445: LD_VAR 0 1
41449: PPUSH
41450: LD_VAR 0 2
41454: PPUSH
41455: LD_VAR 0 3
41459: PPUSH
41460: CALL_OW 297
41464: PUSH
41465: LD_VAR 0 5
41469: LESS
41470: IFFALSE 41414
// end ; ComTurnXY ( unit , x , y ) ;
41472: LD_VAR 0 1
41476: PPUSH
41477: LD_VAR 0 2
41481: PPUSH
41482: LD_VAR 0 3
41486: PPUSH
41487: CALL_OW 118
// repeat if Multiplayer then
41491: LD_OWVAR 4
41495: IFFALSE 41506
// wait ( 35 ) else
41497: LD_INT 35
41499: PPUSH
41500: CALL_OW 67
41504: GO 41513
// wait ( 5 ) ;
41506: LD_INT 5
41508: PPUSH
41509: CALL_OW 67
// _d := GetDir ( unit ) ;
41513: LD_ADDR_VAR 0 11
41517: PUSH
41518: LD_VAR 0 1
41522: PPUSH
41523: CALL_OW 254
41527: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41528: LD_ADDR_VAR 0 7
41532: PUSH
41533: LD_VAR 0 1
41537: PPUSH
41538: CALL_OW 250
41542: PPUSH
41543: LD_VAR 0 1
41547: PPUSH
41548: CALL_OW 251
41552: PPUSH
41553: LD_VAR 0 2
41557: PPUSH
41558: LD_VAR 0 3
41562: PPUSH
41563: CALL 80982 0 4
41567: ST_TO_ADDR
// until dir = _d ;
41568: LD_VAR 0 7
41572: PUSH
41573: LD_VAR 0 11
41577: EQUAL
41578: IFFALSE 41491
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41580: LD_ADDR_VAR 0 9
41584: PUSH
41585: LD_VAR 0 1
41589: PPUSH
41590: CALL_OW 250
41594: PPUSH
41595: LD_VAR 0 7
41599: PPUSH
41600: LD_VAR 0 5
41604: PPUSH
41605: CALL_OW 272
41609: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41610: LD_ADDR_VAR 0 10
41614: PUSH
41615: LD_VAR 0 1
41619: PPUSH
41620: CALL_OW 251
41624: PPUSH
41625: LD_VAR 0 7
41629: PPUSH
41630: LD_VAR 0 5
41634: PPUSH
41635: CALL_OW 273
41639: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41640: LD_VAR 0 9
41644: PPUSH
41645: LD_VAR 0 10
41649: PPUSH
41650: CALL_OW 488
41654: NOT
41655: IFFALSE 41659
// exit ;
41657: GO 41777
// ComAnimCustom ( unit , 1 ) ;
41659: LD_VAR 0 1
41663: PPUSH
41664: LD_INT 1
41666: PPUSH
41667: CALL_OW 592
// p := 0 ;
41671: LD_ADDR_VAR 0 12
41675: PUSH
41676: LD_INT 0
41678: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41679: LD_VAR 0 9
41683: PPUSH
41684: LD_VAR 0 10
41688: PPUSH
41689: LD_VAR 0 6
41693: PPUSH
41694: LD_VAR 0 8
41698: PPUSH
41699: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41703: LD_INT 35
41705: PPUSH
41706: CALL_OW 67
// p := Inc ( p ) ;
41710: LD_ADDR_VAR 0 12
41714: PUSH
41715: LD_VAR 0 12
41719: PPUSH
41720: CALL 80938 0 1
41724: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41725: LD_VAR 0 12
41729: PUSH
41730: LD_INT 3
41732: EQUAL
41733: PUSH
41734: LD_VAR 0 1
41738: PPUSH
41739: CALL_OW 302
41743: NOT
41744: OR
41745: PUSH
41746: LD_VAR 0 1
41750: PPUSH
41751: CALL_OW 301
41755: OR
41756: IFFALSE 41703
// RemoveSeeing ( _x , _y , side ) ;
41758: LD_VAR 0 9
41762: PPUSH
41763: LD_VAR 0 10
41767: PPUSH
41768: LD_VAR 0 6
41772: PPUSH
41773: CALL_OW 331
// end ; end_of_file
41777: LD_VAR 0 4
41781: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41782: LD_INT 0
41784: PPUSH
41785: PPUSH
// if exist_mode then
41786: LD_VAR 0 2
41790: IFFALSE 41836
// begin unit := CreateCharacter ( prefix & ident ) ;
41792: LD_ADDR_VAR 0 5
41796: PUSH
41797: LD_VAR 0 3
41801: PUSH
41802: LD_VAR 0 1
41806: STR
41807: PPUSH
41808: CALL_OW 34
41812: ST_TO_ADDR
// if unit then
41813: LD_VAR 0 5
41817: IFFALSE 41834
// DeleteCharacters ( prefix & ident ) ;
41819: LD_VAR 0 3
41823: PUSH
41824: LD_VAR 0 1
41828: STR
41829: PPUSH
41830: CALL_OW 40
// end else
41834: GO 41851
// unit := NewCharacter ( ident ) ;
41836: LD_ADDR_VAR 0 5
41840: PUSH
41841: LD_VAR 0 1
41845: PPUSH
41846: CALL_OW 25
41850: ST_TO_ADDR
// result := unit ;
41851: LD_ADDR_VAR 0 4
41855: PUSH
41856: LD_VAR 0 5
41860: ST_TO_ADDR
// end ;
41861: LD_VAR 0 4
41865: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
41866: LD_INT 0
41868: PPUSH
41869: PPUSH
// if exist_mode then
41870: LD_VAR 0 2
41874: IFFALSE 41899
// unit := CreateCharacter ( prefix & ident ) else
41876: LD_ADDR_VAR 0 5
41880: PUSH
41881: LD_VAR 0 3
41885: PUSH
41886: LD_VAR 0 1
41890: STR
41891: PPUSH
41892: CALL_OW 34
41896: ST_TO_ADDR
41897: GO 41914
// unit := NewCharacter ( ident ) ;
41899: LD_ADDR_VAR 0 5
41903: PUSH
41904: LD_VAR 0 1
41908: PPUSH
41909: CALL_OW 25
41913: ST_TO_ADDR
// result := unit ;
41914: LD_ADDR_VAR 0 4
41918: PUSH
41919: LD_VAR 0 5
41923: ST_TO_ADDR
// end ;
41924: LD_VAR 0 4
41928: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41929: LD_INT 0
41931: PPUSH
41932: PPUSH
// if not side or not nation then
41933: LD_VAR 0 1
41937: NOT
41938: PUSH
41939: LD_VAR 0 2
41943: NOT
41944: OR
41945: IFFALSE 41949
// exit ;
41947: GO 42717
// case nation of nation_american :
41949: LD_VAR 0 2
41953: PUSH
41954: LD_INT 1
41956: DOUBLE
41957: EQUAL
41958: IFTRUE 41962
41960: GO 42176
41962: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41963: LD_ADDR_VAR 0 4
41967: PUSH
41968: LD_INT 35
41970: PUSH
41971: LD_INT 45
41973: PUSH
41974: LD_INT 46
41976: PUSH
41977: LD_INT 47
41979: PUSH
41980: LD_INT 82
41982: PUSH
41983: LD_INT 83
41985: PUSH
41986: LD_INT 84
41988: PUSH
41989: LD_INT 85
41991: PUSH
41992: LD_INT 86
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: LD_INT 6
42003: PUSH
42004: LD_INT 15
42006: PUSH
42007: LD_INT 16
42009: PUSH
42010: LD_INT 7
42012: PUSH
42013: LD_INT 12
42015: PUSH
42016: LD_INT 13
42018: PUSH
42019: LD_INT 10
42021: PUSH
42022: LD_INT 14
42024: PUSH
42025: LD_INT 20
42027: PUSH
42028: LD_INT 21
42030: PUSH
42031: LD_INT 22
42033: PUSH
42034: LD_INT 25
42036: PUSH
42037: LD_INT 32
42039: PUSH
42040: LD_INT 27
42042: PUSH
42043: LD_INT 36
42045: PUSH
42046: LD_INT 69
42048: PUSH
42049: LD_INT 39
42051: PUSH
42052: LD_INT 34
42054: PUSH
42055: LD_INT 40
42057: PUSH
42058: LD_INT 48
42060: PUSH
42061: LD_INT 49
42063: PUSH
42064: LD_INT 50
42066: PUSH
42067: LD_INT 51
42069: PUSH
42070: LD_INT 52
42072: PUSH
42073: LD_INT 53
42075: PUSH
42076: LD_INT 54
42078: PUSH
42079: LD_INT 55
42081: PUSH
42082: LD_INT 56
42084: PUSH
42085: LD_INT 57
42087: PUSH
42088: LD_INT 58
42090: PUSH
42091: LD_INT 59
42093: PUSH
42094: LD_INT 60
42096: PUSH
42097: LD_INT 61
42099: PUSH
42100: LD_INT 62
42102: PUSH
42103: LD_INT 80
42105: PUSH
42106: LD_INT 82
42108: PUSH
42109: LD_INT 83
42111: PUSH
42112: LD_INT 84
42114: PUSH
42115: LD_INT 85
42117: PUSH
42118: LD_INT 86
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: ST_TO_ADDR
42174: GO 42641
42176: LD_INT 2
42178: DOUBLE
42179: EQUAL
42180: IFTRUE 42184
42182: GO 42410
42184: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42185: LD_ADDR_VAR 0 4
42189: PUSH
42190: LD_INT 35
42192: PUSH
42193: LD_INT 45
42195: PUSH
42196: LD_INT 46
42198: PUSH
42199: LD_INT 47
42201: PUSH
42202: LD_INT 82
42204: PUSH
42205: LD_INT 83
42207: PUSH
42208: LD_INT 84
42210: PUSH
42211: LD_INT 85
42213: PUSH
42214: LD_INT 87
42216: PUSH
42217: LD_INT 70
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: LD_INT 11
42225: PUSH
42226: LD_INT 3
42228: PUSH
42229: LD_INT 4
42231: PUSH
42232: LD_INT 5
42234: PUSH
42235: LD_INT 6
42237: PUSH
42238: LD_INT 15
42240: PUSH
42241: LD_INT 18
42243: PUSH
42244: LD_INT 7
42246: PUSH
42247: LD_INT 17
42249: PUSH
42250: LD_INT 8
42252: PUSH
42253: LD_INT 20
42255: PUSH
42256: LD_INT 21
42258: PUSH
42259: LD_INT 22
42261: PUSH
42262: LD_INT 72
42264: PUSH
42265: LD_INT 26
42267: PUSH
42268: LD_INT 69
42270: PUSH
42271: LD_INT 39
42273: PUSH
42274: LD_INT 40
42276: PUSH
42277: LD_INT 41
42279: PUSH
42280: LD_INT 42
42282: PUSH
42283: LD_INT 43
42285: PUSH
42286: LD_INT 48
42288: PUSH
42289: LD_INT 49
42291: PUSH
42292: LD_INT 50
42294: PUSH
42295: LD_INT 51
42297: PUSH
42298: LD_INT 52
42300: PUSH
42301: LD_INT 53
42303: PUSH
42304: LD_INT 54
42306: PUSH
42307: LD_INT 55
42309: PUSH
42310: LD_INT 56
42312: PUSH
42313: LD_INT 60
42315: PUSH
42316: LD_INT 61
42318: PUSH
42319: LD_INT 62
42321: PUSH
42322: LD_INT 66
42324: PUSH
42325: LD_INT 67
42327: PUSH
42328: LD_INT 68
42330: PUSH
42331: LD_INT 81
42333: PUSH
42334: LD_INT 82
42336: PUSH
42337: LD_INT 83
42339: PUSH
42340: LD_INT 84
42342: PUSH
42343: LD_INT 85
42345: PUSH
42346: LD_INT 87
42348: PUSH
42349: LD_INT 88
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: ST_TO_ADDR
42408: GO 42641
42410: LD_INT 3
42412: DOUBLE
42413: EQUAL
42414: IFTRUE 42418
42416: GO 42640
42418: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42419: LD_ADDR_VAR 0 4
42423: PUSH
42424: LD_INT 46
42426: PUSH
42427: LD_INT 47
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: LD_INT 82
42438: PUSH
42439: LD_INT 83
42441: PUSH
42442: LD_INT 84
42444: PUSH
42445: LD_INT 85
42447: PUSH
42448: LD_INT 86
42450: PUSH
42451: LD_INT 11
42453: PUSH
42454: LD_INT 9
42456: PUSH
42457: LD_INT 20
42459: PUSH
42460: LD_INT 19
42462: PUSH
42463: LD_INT 21
42465: PUSH
42466: LD_INT 24
42468: PUSH
42469: LD_INT 22
42471: PUSH
42472: LD_INT 25
42474: PUSH
42475: LD_INT 28
42477: PUSH
42478: LD_INT 29
42480: PUSH
42481: LD_INT 30
42483: PUSH
42484: LD_INT 31
42486: PUSH
42487: LD_INT 37
42489: PUSH
42490: LD_INT 38
42492: PUSH
42493: LD_INT 32
42495: PUSH
42496: LD_INT 27
42498: PUSH
42499: LD_INT 33
42501: PUSH
42502: LD_INT 69
42504: PUSH
42505: LD_INT 39
42507: PUSH
42508: LD_INT 34
42510: PUSH
42511: LD_INT 40
42513: PUSH
42514: LD_INT 71
42516: PUSH
42517: LD_INT 23
42519: PUSH
42520: LD_INT 44
42522: PUSH
42523: LD_INT 48
42525: PUSH
42526: LD_INT 49
42528: PUSH
42529: LD_INT 50
42531: PUSH
42532: LD_INT 51
42534: PUSH
42535: LD_INT 52
42537: PUSH
42538: LD_INT 53
42540: PUSH
42541: LD_INT 54
42543: PUSH
42544: LD_INT 55
42546: PUSH
42547: LD_INT 56
42549: PUSH
42550: LD_INT 57
42552: PUSH
42553: LD_INT 58
42555: PUSH
42556: LD_INT 59
42558: PUSH
42559: LD_INT 63
42561: PUSH
42562: LD_INT 64
42564: PUSH
42565: LD_INT 65
42567: PUSH
42568: LD_INT 82
42570: PUSH
42571: LD_INT 83
42573: PUSH
42574: LD_INT 84
42576: PUSH
42577: LD_INT 85
42579: PUSH
42580: LD_INT 86
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: ST_TO_ADDR
42638: GO 42641
42640: POP
// if state > - 1 and state < 3 then
42641: LD_VAR 0 3
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: GREATER
42650: PUSH
42651: LD_VAR 0 3
42655: PUSH
42656: LD_INT 3
42658: LESS
42659: AND
42660: IFFALSE 42717
// for i in result do
42662: LD_ADDR_VAR 0 5
42666: PUSH
42667: LD_VAR 0 4
42671: PUSH
42672: FOR_IN
42673: IFFALSE 42715
// if GetTech ( i , side ) <> state then
42675: LD_VAR 0 5
42679: PPUSH
42680: LD_VAR 0 1
42684: PPUSH
42685: CALL_OW 321
42689: PUSH
42690: LD_VAR 0 3
42694: NONEQUAL
42695: IFFALSE 42713
// result := result diff i ;
42697: LD_ADDR_VAR 0 4
42701: PUSH
42702: LD_VAR 0 4
42706: PUSH
42707: LD_VAR 0 5
42711: DIFF
42712: ST_TO_ADDR
42713: GO 42672
42715: POP
42716: POP
// end ;
42717: LD_VAR 0 4
42721: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42722: LD_INT 0
42724: PPUSH
42725: PPUSH
42726: PPUSH
// result := true ;
42727: LD_ADDR_VAR 0 3
42731: PUSH
42732: LD_INT 1
42734: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42735: LD_ADDR_VAR 0 5
42739: PUSH
42740: LD_VAR 0 2
42744: PPUSH
42745: CALL_OW 480
42749: ST_TO_ADDR
// if not tmp then
42750: LD_VAR 0 5
42754: NOT
42755: IFFALSE 42759
// exit ;
42757: GO 42808
// for i in tmp do
42759: LD_ADDR_VAR 0 4
42763: PUSH
42764: LD_VAR 0 5
42768: PUSH
42769: FOR_IN
42770: IFFALSE 42806
// if GetTech ( i , side ) <> state_researched then
42772: LD_VAR 0 4
42776: PPUSH
42777: LD_VAR 0 1
42781: PPUSH
42782: CALL_OW 321
42786: PUSH
42787: LD_INT 2
42789: NONEQUAL
42790: IFFALSE 42804
// begin result := false ;
42792: LD_ADDR_VAR 0 3
42796: PUSH
42797: LD_INT 0
42799: ST_TO_ADDR
// exit ;
42800: POP
42801: POP
42802: GO 42808
// end ;
42804: GO 42769
42806: POP
42807: POP
// end ;
42808: LD_VAR 0 3
42812: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42813: LD_INT 0
42815: PPUSH
42816: PPUSH
42817: PPUSH
42818: PPUSH
42819: PPUSH
42820: PPUSH
42821: PPUSH
42822: PPUSH
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42828: LD_VAR 0 1
42832: NOT
42833: PUSH
42834: LD_VAR 0 1
42838: PPUSH
42839: CALL_OW 257
42843: PUSH
42844: LD_INT 9
42846: NONEQUAL
42847: OR
42848: IFFALSE 42852
// exit ;
42850: GO 43425
// side := GetSide ( unit ) ;
42852: LD_ADDR_VAR 0 9
42856: PUSH
42857: LD_VAR 0 1
42861: PPUSH
42862: CALL_OW 255
42866: ST_TO_ADDR
// tech_space := tech_spacanom ;
42867: LD_ADDR_VAR 0 12
42871: PUSH
42872: LD_INT 29
42874: ST_TO_ADDR
// tech_time := tech_taurad ;
42875: LD_ADDR_VAR 0 13
42879: PUSH
42880: LD_INT 28
42882: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42883: LD_ADDR_VAR 0 11
42887: PUSH
42888: LD_VAR 0 1
42892: PPUSH
42893: CALL_OW 310
42897: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42898: LD_VAR 0 11
42902: PPUSH
42903: CALL_OW 247
42907: PUSH
42908: LD_INT 2
42910: EQUAL
42911: IFFALSE 42915
// exit ;
42913: GO 43425
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42915: LD_ADDR_VAR 0 8
42919: PUSH
42920: LD_INT 81
42922: PUSH
42923: LD_VAR 0 9
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 3
42934: PUSH
42935: LD_INT 21
42937: PUSH
42938: LD_INT 3
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PPUSH
42953: CALL_OW 69
42957: ST_TO_ADDR
// if not tmp then
42958: LD_VAR 0 8
42962: NOT
42963: IFFALSE 42967
// exit ;
42965: GO 43425
// if in_unit then
42967: LD_VAR 0 11
42971: IFFALSE 42995
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42973: LD_ADDR_VAR 0 10
42977: PUSH
42978: LD_VAR 0 8
42982: PPUSH
42983: LD_VAR 0 11
42987: PPUSH
42988: CALL_OW 74
42992: ST_TO_ADDR
42993: GO 43015
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42995: LD_ADDR_VAR 0 10
42999: PUSH
43000: LD_VAR 0 8
43004: PPUSH
43005: LD_VAR 0 1
43009: PPUSH
43010: CALL_OW 74
43014: ST_TO_ADDR
// if not enemy then
43015: LD_VAR 0 10
43019: NOT
43020: IFFALSE 43024
// exit ;
43022: GO 43425
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43024: LD_VAR 0 11
43028: PUSH
43029: LD_VAR 0 11
43033: PPUSH
43034: LD_VAR 0 10
43038: PPUSH
43039: CALL_OW 296
43043: PUSH
43044: LD_INT 13
43046: GREATER
43047: AND
43048: PUSH
43049: LD_VAR 0 1
43053: PPUSH
43054: LD_VAR 0 10
43058: PPUSH
43059: CALL_OW 296
43063: PUSH
43064: LD_INT 12
43066: GREATER
43067: OR
43068: IFFALSE 43072
// exit ;
43070: GO 43425
// missile := [ 1 ] ;
43072: LD_ADDR_VAR 0 14
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43083: LD_VAR 0 9
43087: PPUSH
43088: LD_VAR 0 12
43092: PPUSH
43093: CALL_OW 325
43097: IFFALSE 43126
// missile := Replace ( missile , missile + 1 , 2 ) ;
43099: LD_ADDR_VAR 0 14
43103: PUSH
43104: LD_VAR 0 14
43108: PPUSH
43109: LD_VAR 0 14
43113: PUSH
43114: LD_INT 1
43116: PLUS
43117: PPUSH
43118: LD_INT 2
43120: PPUSH
43121: CALL_OW 1
43125: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43126: LD_VAR 0 9
43130: PPUSH
43131: LD_VAR 0 13
43135: PPUSH
43136: CALL_OW 325
43140: PUSH
43141: LD_VAR 0 10
43145: PPUSH
43146: CALL_OW 255
43150: PPUSH
43151: LD_VAR 0 13
43155: PPUSH
43156: CALL_OW 325
43160: NOT
43161: AND
43162: IFFALSE 43191
// missile := Replace ( missile , missile + 1 , 3 ) ;
43164: LD_ADDR_VAR 0 14
43168: PUSH
43169: LD_VAR 0 14
43173: PPUSH
43174: LD_VAR 0 14
43178: PUSH
43179: LD_INT 1
43181: PLUS
43182: PPUSH
43183: LD_INT 3
43185: PPUSH
43186: CALL_OW 1
43190: ST_TO_ADDR
// if missile < 2 then
43191: LD_VAR 0 14
43195: PUSH
43196: LD_INT 2
43198: LESS
43199: IFFALSE 43203
// exit ;
43201: GO 43425
// x := GetX ( enemy ) ;
43203: LD_ADDR_VAR 0 4
43207: PUSH
43208: LD_VAR 0 10
43212: PPUSH
43213: CALL_OW 250
43217: ST_TO_ADDR
// y := GetY ( enemy ) ;
43218: LD_ADDR_VAR 0 5
43222: PUSH
43223: LD_VAR 0 10
43227: PPUSH
43228: CALL_OW 251
43232: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43233: LD_ADDR_VAR 0 6
43237: PUSH
43238: LD_VAR 0 4
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PPUSH
43247: LD_INT 1
43249: PPUSH
43250: CALL_OW 12
43254: PLUS
43255: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43256: LD_ADDR_VAR 0 7
43260: PUSH
43261: LD_VAR 0 5
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PPUSH
43270: LD_INT 1
43272: PPUSH
43273: CALL_OW 12
43277: PLUS
43278: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43279: LD_VAR 0 6
43283: PPUSH
43284: LD_VAR 0 7
43288: PPUSH
43289: CALL_OW 488
43293: NOT
43294: IFFALSE 43316
// begin _x := x ;
43296: LD_ADDR_VAR 0 6
43300: PUSH
43301: LD_VAR 0 4
43305: ST_TO_ADDR
// _y := y ;
43306: LD_ADDR_VAR 0 7
43310: PUSH
43311: LD_VAR 0 5
43315: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43316: LD_ADDR_VAR 0 3
43320: PUSH
43321: LD_INT 1
43323: PPUSH
43324: LD_VAR 0 14
43328: PPUSH
43329: CALL_OW 12
43333: ST_TO_ADDR
// case i of 1 :
43334: LD_VAR 0 3
43338: PUSH
43339: LD_INT 1
43341: DOUBLE
43342: EQUAL
43343: IFTRUE 43347
43345: GO 43364
43347: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43348: LD_VAR 0 1
43352: PPUSH
43353: LD_VAR 0 10
43357: PPUSH
43358: CALL_OW 115
43362: GO 43425
43364: LD_INT 2
43366: DOUBLE
43367: EQUAL
43368: IFTRUE 43372
43370: GO 43394
43372: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43373: LD_VAR 0 1
43377: PPUSH
43378: LD_VAR 0 6
43382: PPUSH
43383: LD_VAR 0 7
43387: PPUSH
43388: CALL_OW 153
43392: GO 43425
43394: LD_INT 3
43396: DOUBLE
43397: EQUAL
43398: IFTRUE 43402
43400: GO 43424
43402: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43403: LD_VAR 0 1
43407: PPUSH
43408: LD_VAR 0 6
43412: PPUSH
43413: LD_VAR 0 7
43417: PPUSH
43418: CALL_OW 154
43422: GO 43425
43424: POP
// end ;
43425: LD_VAR 0 2
43429: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43430: LD_INT 0
43432: PPUSH
43433: PPUSH
43434: PPUSH
43435: PPUSH
43436: PPUSH
43437: PPUSH
// if not unit or not building then
43438: LD_VAR 0 1
43442: NOT
43443: PUSH
43444: LD_VAR 0 2
43448: NOT
43449: OR
43450: IFFALSE 43454
// exit ;
43452: GO 43612
// x := GetX ( building ) ;
43454: LD_ADDR_VAR 0 5
43458: PUSH
43459: LD_VAR 0 2
43463: PPUSH
43464: CALL_OW 250
43468: ST_TO_ADDR
// y := GetY ( building ) ;
43469: LD_ADDR_VAR 0 6
43473: PUSH
43474: LD_VAR 0 2
43478: PPUSH
43479: CALL_OW 251
43483: ST_TO_ADDR
// for i = 0 to 5 do
43484: LD_ADDR_VAR 0 4
43488: PUSH
43489: DOUBLE
43490: LD_INT 0
43492: DEC
43493: ST_TO_ADDR
43494: LD_INT 5
43496: PUSH
43497: FOR_TO
43498: IFFALSE 43610
// begin _x := ShiftX ( x , i , 3 ) ;
43500: LD_ADDR_VAR 0 7
43504: PUSH
43505: LD_VAR 0 5
43509: PPUSH
43510: LD_VAR 0 4
43514: PPUSH
43515: LD_INT 3
43517: PPUSH
43518: CALL_OW 272
43522: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43523: LD_ADDR_VAR 0 8
43527: PUSH
43528: LD_VAR 0 6
43532: PPUSH
43533: LD_VAR 0 4
43537: PPUSH
43538: LD_INT 3
43540: PPUSH
43541: CALL_OW 273
43545: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43546: LD_VAR 0 7
43550: PPUSH
43551: LD_VAR 0 8
43555: PPUSH
43556: CALL_OW 488
43560: NOT
43561: IFFALSE 43565
// continue ;
43563: GO 43497
// if HexInfo ( _x , _y ) = 0 then
43565: LD_VAR 0 7
43569: PPUSH
43570: LD_VAR 0 8
43574: PPUSH
43575: CALL_OW 428
43579: PUSH
43580: LD_INT 0
43582: EQUAL
43583: IFFALSE 43608
// begin ComMoveXY ( unit , _x , _y ) ;
43585: LD_VAR 0 1
43589: PPUSH
43590: LD_VAR 0 7
43594: PPUSH
43595: LD_VAR 0 8
43599: PPUSH
43600: CALL_OW 111
// exit ;
43604: POP
43605: POP
43606: GO 43612
// end ; end ;
43608: GO 43497
43610: POP
43611: POP
// end ;
43612: LD_VAR 0 3
43616: RET
// export function ScanBase ( side , base_area ) ; begin
43617: LD_INT 0
43619: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43620: LD_ADDR_VAR 0 3
43624: PUSH
43625: LD_VAR 0 2
43629: PPUSH
43630: LD_INT 81
43632: PUSH
43633: LD_VAR 0 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PPUSH
43642: CALL_OW 70
43646: ST_TO_ADDR
// end ;
43647: LD_VAR 0 3
43651: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43652: LD_INT 0
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
// result := false ;
43658: LD_ADDR_VAR 0 2
43662: PUSH
43663: LD_INT 0
43665: ST_TO_ADDR
// side := GetSide ( unit ) ;
43666: LD_ADDR_VAR 0 3
43670: PUSH
43671: LD_VAR 0 1
43675: PPUSH
43676: CALL_OW 255
43680: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43681: LD_ADDR_VAR 0 4
43685: PUSH
43686: LD_VAR 0 1
43690: PPUSH
43691: CALL_OW 248
43695: ST_TO_ADDR
// case nat of 1 :
43696: LD_VAR 0 4
43700: PUSH
43701: LD_INT 1
43703: DOUBLE
43704: EQUAL
43705: IFTRUE 43709
43707: GO 43720
43709: POP
// tech := tech_lassight ; 2 :
43710: LD_ADDR_VAR 0 5
43714: PUSH
43715: LD_INT 12
43717: ST_TO_ADDR
43718: GO 43759
43720: LD_INT 2
43722: DOUBLE
43723: EQUAL
43724: IFTRUE 43728
43726: GO 43739
43728: POP
// tech := tech_mortar ; 3 :
43729: LD_ADDR_VAR 0 5
43733: PUSH
43734: LD_INT 41
43736: ST_TO_ADDR
43737: GO 43759
43739: LD_INT 3
43741: DOUBLE
43742: EQUAL
43743: IFTRUE 43747
43745: GO 43758
43747: POP
// tech := tech_bazooka ; end ;
43748: LD_ADDR_VAR 0 5
43752: PUSH
43753: LD_INT 44
43755: ST_TO_ADDR
43756: GO 43759
43758: POP
// if Researched ( side , tech ) then
43759: LD_VAR 0 3
43763: PPUSH
43764: LD_VAR 0 5
43768: PPUSH
43769: CALL_OW 325
43773: IFFALSE 43800
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43775: LD_ADDR_VAR 0 2
43779: PUSH
43780: LD_INT 5
43782: PUSH
43783: LD_INT 8
43785: PUSH
43786: LD_INT 9
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: LIST
43793: PUSH
43794: LD_VAR 0 4
43798: ARRAY
43799: ST_TO_ADDR
// end ;
43800: LD_VAR 0 2
43804: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43805: LD_INT 0
43807: PPUSH
43808: PPUSH
43809: PPUSH
// if not mines then
43810: LD_VAR 0 2
43814: NOT
43815: IFFALSE 43819
// exit ;
43817: GO 43963
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43819: LD_ADDR_VAR 0 5
43823: PUSH
43824: LD_INT 81
43826: PUSH
43827: LD_VAR 0 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 3
43838: PUSH
43839: LD_INT 21
43841: PUSH
43842: LD_INT 3
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PPUSH
43857: CALL_OW 69
43861: ST_TO_ADDR
// for i in mines do
43862: LD_ADDR_VAR 0 4
43866: PUSH
43867: LD_VAR 0 2
43871: PUSH
43872: FOR_IN
43873: IFFALSE 43961
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43875: LD_VAR 0 4
43879: PUSH
43880: LD_INT 1
43882: ARRAY
43883: PPUSH
43884: LD_VAR 0 4
43888: PUSH
43889: LD_INT 2
43891: ARRAY
43892: PPUSH
43893: CALL_OW 458
43897: NOT
43898: IFFALSE 43902
// continue ;
43900: GO 43872
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43902: LD_VAR 0 4
43906: PUSH
43907: LD_INT 1
43909: ARRAY
43910: PPUSH
43911: LD_VAR 0 4
43915: PUSH
43916: LD_INT 2
43918: ARRAY
43919: PPUSH
43920: CALL_OW 428
43924: PUSH
43925: LD_VAR 0 5
43929: IN
43930: IFFALSE 43959
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43932: LD_VAR 0 4
43936: PUSH
43937: LD_INT 1
43939: ARRAY
43940: PPUSH
43941: LD_VAR 0 4
43945: PUSH
43946: LD_INT 2
43948: ARRAY
43949: PPUSH
43950: LD_VAR 0 1
43954: PPUSH
43955: CALL_OW 456
// end ;
43959: GO 43872
43961: POP
43962: POP
// end ;
43963: LD_VAR 0 3
43967: RET
// export function Count ( array ) ; begin
43968: LD_INT 0
43970: PPUSH
// result := array + 0 ;
43971: LD_ADDR_VAR 0 2
43975: PUSH
43976: LD_VAR 0 1
43980: PUSH
43981: LD_INT 0
43983: PLUS
43984: ST_TO_ADDR
// end ;
43985: LD_VAR 0 2
43989: RET
// export function IsEmpty ( building ) ; begin
43990: LD_INT 0
43992: PPUSH
// if not building then
43993: LD_VAR 0 1
43997: NOT
43998: IFFALSE 44002
// exit ;
44000: GO 44045
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44002: LD_ADDR_VAR 0 2
44006: PUSH
44007: LD_VAR 0 1
44011: PUSH
44012: LD_INT 22
44014: PUSH
44015: LD_VAR 0 1
44019: PPUSH
44020: CALL_OW 255
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 58
44031: PUSH
44032: EMPTY
44033: LIST
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PPUSH
44039: CALL_OW 69
44043: IN
44044: ST_TO_ADDR
// end ;
44045: LD_VAR 0 2
44049: RET
// export function IsNotFull ( building ) ; var places ; begin
44050: LD_INT 0
44052: PPUSH
44053: PPUSH
// if not building then
44054: LD_VAR 0 1
44058: NOT
44059: IFFALSE 44063
// exit ;
44061: GO 44091
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44063: LD_ADDR_VAR 0 2
44067: PUSH
44068: LD_VAR 0 1
44072: PPUSH
44073: LD_INT 3
44075: PUSH
44076: LD_INT 62
44078: PUSH
44079: EMPTY
44080: LIST
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PPUSH
44086: CALL_OW 72
44090: ST_TO_ADDR
// end ;
44091: LD_VAR 0 2
44095: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44096: LD_INT 0
44098: PPUSH
44099: PPUSH
44100: PPUSH
44101: PPUSH
// tmp := [ ] ;
44102: LD_ADDR_VAR 0 3
44106: PUSH
44107: EMPTY
44108: ST_TO_ADDR
// list := [ ] ;
44109: LD_ADDR_VAR 0 5
44113: PUSH
44114: EMPTY
44115: ST_TO_ADDR
// for i = 16 to 25 do
44116: LD_ADDR_VAR 0 4
44120: PUSH
44121: DOUBLE
44122: LD_INT 16
44124: DEC
44125: ST_TO_ADDR
44126: LD_INT 25
44128: PUSH
44129: FOR_TO
44130: IFFALSE 44203
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44132: LD_ADDR_VAR 0 3
44136: PUSH
44137: LD_VAR 0 3
44141: PUSH
44142: LD_INT 22
44144: PUSH
44145: LD_VAR 0 1
44149: PPUSH
44150: CALL_OW 255
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 91
44161: PUSH
44162: LD_VAR 0 1
44166: PUSH
44167: LD_INT 6
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 30
44177: PUSH
44178: LD_VAR 0 4
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: PPUSH
44195: CALL_OW 69
44199: ADD
44200: ST_TO_ADDR
44201: GO 44129
44203: POP
44204: POP
// for i = 1 to tmp do
44205: LD_ADDR_VAR 0 4
44209: PUSH
44210: DOUBLE
44211: LD_INT 1
44213: DEC
44214: ST_TO_ADDR
44215: LD_VAR 0 3
44219: PUSH
44220: FOR_TO
44221: IFFALSE 44309
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44223: LD_ADDR_VAR 0 5
44227: PUSH
44228: LD_VAR 0 5
44232: PUSH
44233: LD_VAR 0 3
44237: PUSH
44238: LD_VAR 0 4
44242: ARRAY
44243: PPUSH
44244: CALL_OW 266
44248: PUSH
44249: LD_VAR 0 3
44253: PUSH
44254: LD_VAR 0 4
44258: ARRAY
44259: PPUSH
44260: CALL_OW 250
44264: PUSH
44265: LD_VAR 0 3
44269: PUSH
44270: LD_VAR 0 4
44274: ARRAY
44275: PPUSH
44276: CALL_OW 251
44280: PUSH
44281: LD_VAR 0 3
44285: PUSH
44286: LD_VAR 0 4
44290: ARRAY
44291: PPUSH
44292: CALL_OW 254
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: PUSH
44303: EMPTY
44304: LIST
44305: ADD
44306: ST_TO_ADDR
44307: GO 44220
44309: POP
44310: POP
// result := list ;
44311: LD_ADDR_VAR 0 2
44315: PUSH
44316: LD_VAR 0 5
44320: ST_TO_ADDR
// end ;
44321: LD_VAR 0 2
44325: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44326: LD_INT 0
44328: PPUSH
44329: PPUSH
44330: PPUSH
44331: PPUSH
44332: PPUSH
44333: PPUSH
44334: PPUSH
// if not factory then
44335: LD_VAR 0 1
44339: NOT
44340: IFFALSE 44344
// exit ;
44342: GO 44937
// if control = control_apeman then
44344: LD_VAR 0 4
44348: PUSH
44349: LD_INT 5
44351: EQUAL
44352: IFFALSE 44461
// begin tmp := UnitsInside ( factory ) ;
44354: LD_ADDR_VAR 0 8
44358: PUSH
44359: LD_VAR 0 1
44363: PPUSH
44364: CALL_OW 313
44368: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44369: LD_VAR 0 8
44373: PPUSH
44374: LD_INT 25
44376: PUSH
44377: LD_INT 12
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PPUSH
44384: CALL_OW 72
44388: NOT
44389: IFFALSE 44399
// control := control_manual ;
44391: LD_ADDR_VAR 0 4
44395: PUSH
44396: LD_INT 1
44398: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44399: LD_ADDR_VAR 0 8
44403: PUSH
44404: LD_VAR 0 1
44408: PPUSH
44409: CALL 44096 0 1
44413: ST_TO_ADDR
// if tmp then
44414: LD_VAR 0 8
44418: IFFALSE 44461
// begin for i in tmp do
44420: LD_ADDR_VAR 0 7
44424: PUSH
44425: LD_VAR 0 8
44429: PUSH
44430: FOR_IN
44431: IFFALSE 44459
// if i [ 1 ] = b_ext_radio then
44433: LD_VAR 0 7
44437: PUSH
44438: LD_INT 1
44440: ARRAY
44441: PUSH
44442: LD_INT 22
44444: EQUAL
44445: IFFALSE 44457
// begin control := control_remote ;
44447: LD_ADDR_VAR 0 4
44451: PUSH
44452: LD_INT 2
44454: ST_TO_ADDR
// break ;
44455: GO 44459
// end ;
44457: GO 44430
44459: POP
44460: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44461: LD_VAR 0 1
44465: PPUSH
44466: LD_VAR 0 2
44470: PPUSH
44471: LD_VAR 0 3
44475: PPUSH
44476: LD_VAR 0 4
44480: PPUSH
44481: LD_VAR 0 5
44485: PPUSH
44486: CALL_OW 448
44490: IFFALSE 44525
// begin result := [ chassis , engine , control , weapon ] ;
44492: LD_ADDR_VAR 0 6
44496: PUSH
44497: LD_VAR 0 2
44501: PUSH
44502: LD_VAR 0 3
44506: PUSH
44507: LD_VAR 0 4
44511: PUSH
44512: LD_VAR 0 5
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: ST_TO_ADDR
// exit ;
44523: GO 44937
// end ; _chassis := AvailableChassisList ( factory ) ;
44525: LD_ADDR_VAR 0 9
44529: PUSH
44530: LD_VAR 0 1
44534: PPUSH
44535: CALL_OW 475
44539: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44540: LD_ADDR_VAR 0 11
44544: PUSH
44545: LD_VAR 0 1
44549: PPUSH
44550: CALL_OW 476
44554: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44555: LD_ADDR_VAR 0 12
44559: PUSH
44560: LD_VAR 0 1
44564: PPUSH
44565: CALL_OW 477
44569: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44570: LD_ADDR_VAR 0 10
44574: PUSH
44575: LD_VAR 0 1
44579: PPUSH
44580: CALL_OW 478
44584: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44585: LD_VAR 0 9
44589: NOT
44590: PUSH
44591: LD_VAR 0 11
44595: NOT
44596: OR
44597: PUSH
44598: LD_VAR 0 12
44602: NOT
44603: OR
44604: PUSH
44605: LD_VAR 0 10
44609: NOT
44610: OR
44611: IFFALSE 44646
// begin result := [ chassis , engine , control , weapon ] ;
44613: LD_ADDR_VAR 0 6
44617: PUSH
44618: LD_VAR 0 2
44622: PUSH
44623: LD_VAR 0 3
44627: PUSH
44628: LD_VAR 0 4
44632: PUSH
44633: LD_VAR 0 5
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: ST_TO_ADDR
// exit ;
44644: GO 44937
// end ; if not chassis in _chassis then
44646: LD_VAR 0 2
44650: PUSH
44651: LD_VAR 0 9
44655: IN
44656: NOT
44657: IFFALSE 44683
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44659: LD_ADDR_VAR 0 2
44663: PUSH
44664: LD_VAR 0 9
44668: PUSH
44669: LD_INT 1
44671: PPUSH
44672: LD_VAR 0 9
44676: PPUSH
44677: CALL_OW 12
44681: ARRAY
44682: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44683: LD_VAR 0 2
44687: PPUSH
44688: LD_VAR 0 3
44692: PPUSH
44693: CALL 44942 0 2
44697: NOT
44698: IFFALSE 44757
// repeat engine := _engine [ 1 ] ;
44700: LD_ADDR_VAR 0 3
44704: PUSH
44705: LD_VAR 0 11
44709: PUSH
44710: LD_INT 1
44712: ARRAY
44713: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44714: LD_ADDR_VAR 0 11
44718: PUSH
44719: LD_VAR 0 11
44723: PPUSH
44724: LD_INT 1
44726: PPUSH
44727: CALL_OW 3
44731: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44732: LD_VAR 0 2
44736: PPUSH
44737: LD_VAR 0 3
44741: PPUSH
44742: CALL 44942 0 2
44746: PUSH
44747: LD_VAR 0 11
44751: PUSH
44752: EMPTY
44753: EQUAL
44754: OR
44755: IFFALSE 44700
// if not control in _control then
44757: LD_VAR 0 4
44761: PUSH
44762: LD_VAR 0 12
44766: IN
44767: NOT
44768: IFFALSE 44794
// control := _control [ rand ( 1 , _control ) ] ;
44770: LD_ADDR_VAR 0 4
44774: PUSH
44775: LD_VAR 0 12
44779: PUSH
44780: LD_INT 1
44782: PPUSH
44783: LD_VAR 0 12
44787: PPUSH
44788: CALL_OW 12
44792: ARRAY
44793: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44794: LD_VAR 0 2
44798: PPUSH
44799: LD_VAR 0 5
44803: PPUSH
44804: CALL 45162 0 2
44808: NOT
44809: IFFALSE 44868
// repeat weapon := _weapon [ 1 ] ;
44811: LD_ADDR_VAR 0 5
44815: PUSH
44816: LD_VAR 0 10
44820: PUSH
44821: LD_INT 1
44823: ARRAY
44824: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44825: LD_ADDR_VAR 0 10
44829: PUSH
44830: LD_VAR 0 10
44834: PPUSH
44835: LD_INT 1
44837: PPUSH
44838: CALL_OW 3
44842: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44843: LD_VAR 0 2
44847: PPUSH
44848: LD_VAR 0 5
44852: PPUSH
44853: CALL 45162 0 2
44857: PUSH
44858: LD_VAR 0 10
44862: PUSH
44863: EMPTY
44864: EQUAL
44865: OR
44866: IFFALSE 44811
// result := [ ] ;
44868: LD_ADDR_VAR 0 6
44872: PUSH
44873: EMPTY
44874: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44875: LD_VAR 0 1
44879: PPUSH
44880: LD_VAR 0 2
44884: PPUSH
44885: LD_VAR 0 3
44889: PPUSH
44890: LD_VAR 0 4
44894: PPUSH
44895: LD_VAR 0 5
44899: PPUSH
44900: CALL_OW 448
44904: IFFALSE 44937
// result := [ chassis , engine , control , weapon ] ;
44906: LD_ADDR_VAR 0 6
44910: PUSH
44911: LD_VAR 0 2
44915: PUSH
44916: LD_VAR 0 3
44920: PUSH
44921: LD_VAR 0 4
44925: PUSH
44926: LD_VAR 0 5
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// end ;
44937: LD_VAR 0 6
44941: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44942: LD_INT 0
44944: PPUSH
// if not chassis or not engine then
44945: LD_VAR 0 1
44949: NOT
44950: PUSH
44951: LD_VAR 0 2
44955: NOT
44956: OR
44957: IFFALSE 44961
// exit ;
44959: GO 45157
// case engine of engine_solar :
44961: LD_VAR 0 2
44965: PUSH
44966: LD_INT 2
44968: DOUBLE
44969: EQUAL
44970: IFTRUE 44974
44972: GO 45012
44974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44975: LD_ADDR_VAR 0 3
44979: PUSH
44980: LD_INT 11
44982: PUSH
44983: LD_INT 12
44985: PUSH
44986: LD_INT 13
44988: PUSH
44989: LD_INT 14
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 3
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: ST_TO_ADDR
45010: GO 45141
45012: LD_INT 1
45014: DOUBLE
45015: EQUAL
45016: IFTRUE 45020
45018: GO 45082
45020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45021: LD_ADDR_VAR 0 3
45025: PUSH
45026: LD_INT 11
45028: PUSH
45029: LD_INT 12
45031: PUSH
45032: LD_INT 13
45034: PUSH
45035: LD_INT 14
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: LD_INT 3
45046: PUSH
45047: LD_INT 4
45049: PUSH
45050: LD_INT 5
45052: PUSH
45053: LD_INT 21
45055: PUSH
45056: LD_INT 23
45058: PUSH
45059: LD_INT 22
45061: PUSH
45062: LD_INT 24
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: ST_TO_ADDR
45080: GO 45141
45082: LD_INT 3
45084: DOUBLE
45085: EQUAL
45086: IFTRUE 45090
45088: GO 45140
45090: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45091: LD_ADDR_VAR 0 3
45095: PUSH
45096: LD_INT 13
45098: PUSH
45099: LD_INT 14
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 3
45107: PUSH
45108: LD_INT 4
45110: PUSH
45111: LD_INT 5
45113: PUSH
45114: LD_INT 21
45116: PUSH
45117: LD_INT 22
45119: PUSH
45120: LD_INT 23
45122: PUSH
45123: LD_INT 24
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
45138: GO 45141
45140: POP
// result := ( chassis in result ) ;
45141: LD_ADDR_VAR 0 3
45145: PUSH
45146: LD_VAR 0 1
45150: PUSH
45151: LD_VAR 0 3
45155: IN
45156: ST_TO_ADDR
// end ;
45157: LD_VAR 0 3
45161: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45162: LD_INT 0
45164: PPUSH
// if not chassis or not weapon then
45165: LD_VAR 0 1
45169: NOT
45170: PUSH
45171: LD_VAR 0 2
45175: NOT
45176: OR
45177: IFFALSE 45181
// exit ;
45179: GO 46241
// case weapon of us_machine_gun :
45181: LD_VAR 0 2
45185: PUSH
45186: LD_INT 2
45188: DOUBLE
45189: EQUAL
45190: IFTRUE 45194
45192: GO 45224
45194: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45195: LD_ADDR_VAR 0 3
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: LD_INT 3
45208: PUSH
45209: LD_INT 4
45211: PUSH
45212: LD_INT 5
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: ST_TO_ADDR
45222: GO 46225
45224: LD_INT 3
45226: DOUBLE
45227: EQUAL
45228: IFTRUE 45232
45230: GO 45262
45232: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45233: LD_ADDR_VAR 0 3
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: LD_INT 3
45246: PUSH
45247: LD_INT 4
45249: PUSH
45250: LD_INT 5
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: ST_TO_ADDR
45260: GO 46225
45262: LD_INT 11
45264: DOUBLE
45265: EQUAL
45266: IFTRUE 45270
45268: GO 45300
45270: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45271: LD_ADDR_VAR 0 3
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: LD_INT 3
45284: PUSH
45285: LD_INT 4
45287: PUSH
45288: LD_INT 5
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: ST_TO_ADDR
45298: GO 46225
45300: LD_INT 4
45302: DOUBLE
45303: EQUAL
45304: IFTRUE 45308
45306: GO 45334
45308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45309: LD_ADDR_VAR 0 3
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: LD_INT 4
45322: PUSH
45323: LD_INT 5
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: ST_TO_ADDR
45332: GO 46225
45334: LD_INT 5
45336: DOUBLE
45337: EQUAL
45338: IFTRUE 45342
45340: GO 45368
45342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45343: LD_ADDR_VAR 0 3
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 3
45353: PUSH
45354: LD_INT 4
45356: PUSH
45357: LD_INT 5
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: ST_TO_ADDR
45366: GO 46225
45368: LD_INT 9
45370: DOUBLE
45371: EQUAL
45372: IFTRUE 45376
45374: GO 45402
45376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45377: LD_ADDR_VAR 0 3
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 3
45387: PUSH
45388: LD_INT 4
45390: PUSH
45391: LD_INT 5
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: ST_TO_ADDR
45400: GO 46225
45402: LD_INT 7
45404: DOUBLE
45405: EQUAL
45406: IFTRUE 45410
45408: GO 45436
45410: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45411: LD_ADDR_VAR 0 3
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: LD_INT 3
45421: PUSH
45422: LD_INT 4
45424: PUSH
45425: LD_INT 5
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: ST_TO_ADDR
45434: GO 46225
45436: LD_INT 12
45438: DOUBLE
45439: EQUAL
45440: IFTRUE 45444
45442: GO 45470
45444: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45445: LD_ADDR_VAR 0 3
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 3
45455: PUSH
45456: LD_INT 4
45458: PUSH
45459: LD_INT 5
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: ST_TO_ADDR
45468: GO 46225
45470: LD_INT 13
45472: DOUBLE
45473: EQUAL
45474: IFTRUE 45478
45476: GO 45504
45478: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45479: LD_ADDR_VAR 0 3
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: LD_INT 3
45489: PUSH
45490: LD_INT 4
45492: PUSH
45493: LD_INT 5
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: ST_TO_ADDR
45502: GO 46225
45504: LD_INT 14
45506: DOUBLE
45507: EQUAL
45508: IFTRUE 45512
45510: GO 45530
45512: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45513: LD_ADDR_VAR 0 3
45517: PUSH
45518: LD_INT 4
45520: PUSH
45521: LD_INT 5
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: ST_TO_ADDR
45528: GO 46225
45530: LD_INT 6
45532: DOUBLE
45533: EQUAL
45534: IFTRUE 45538
45536: GO 45556
45538: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45539: LD_ADDR_VAR 0 3
45543: PUSH
45544: LD_INT 4
45546: PUSH
45547: LD_INT 5
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: ST_TO_ADDR
45554: GO 46225
45556: LD_INT 10
45558: DOUBLE
45559: EQUAL
45560: IFTRUE 45564
45562: GO 45582
45564: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45565: LD_ADDR_VAR 0 3
45569: PUSH
45570: LD_INT 4
45572: PUSH
45573: LD_INT 5
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: ST_TO_ADDR
45580: GO 46225
45582: LD_INT 22
45584: DOUBLE
45585: EQUAL
45586: IFTRUE 45590
45588: GO 45616
45590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45591: LD_ADDR_VAR 0 3
45595: PUSH
45596: LD_INT 11
45598: PUSH
45599: LD_INT 12
45601: PUSH
45602: LD_INT 13
45604: PUSH
45605: LD_INT 14
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: ST_TO_ADDR
45614: GO 46225
45616: LD_INT 23
45618: DOUBLE
45619: EQUAL
45620: IFTRUE 45624
45622: GO 45650
45624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45625: LD_ADDR_VAR 0 3
45629: PUSH
45630: LD_INT 11
45632: PUSH
45633: LD_INT 12
45635: PUSH
45636: LD_INT 13
45638: PUSH
45639: LD_INT 14
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: ST_TO_ADDR
45648: GO 46225
45650: LD_INT 24
45652: DOUBLE
45653: EQUAL
45654: IFTRUE 45658
45656: GO 45684
45658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45659: LD_ADDR_VAR 0 3
45663: PUSH
45664: LD_INT 11
45666: PUSH
45667: LD_INT 12
45669: PUSH
45670: LD_INT 13
45672: PUSH
45673: LD_INT 14
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: ST_TO_ADDR
45682: GO 46225
45684: LD_INT 30
45686: DOUBLE
45687: EQUAL
45688: IFTRUE 45692
45690: GO 45718
45692: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45693: LD_ADDR_VAR 0 3
45697: PUSH
45698: LD_INT 11
45700: PUSH
45701: LD_INT 12
45703: PUSH
45704: LD_INT 13
45706: PUSH
45707: LD_INT 14
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: ST_TO_ADDR
45716: GO 46225
45718: LD_INT 25
45720: DOUBLE
45721: EQUAL
45722: IFTRUE 45726
45724: GO 45744
45726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45727: LD_ADDR_VAR 0 3
45731: PUSH
45732: LD_INT 13
45734: PUSH
45735: LD_INT 14
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: ST_TO_ADDR
45742: GO 46225
45744: LD_INT 27
45746: DOUBLE
45747: EQUAL
45748: IFTRUE 45752
45750: GO 45770
45752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45753: LD_ADDR_VAR 0 3
45757: PUSH
45758: LD_INT 13
45760: PUSH
45761: LD_INT 14
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: ST_TO_ADDR
45768: GO 46225
45770: LD_INT 92
45772: DOUBLE
45773: EQUAL
45774: IFTRUE 45778
45776: GO 45804
45778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45779: LD_ADDR_VAR 0 3
45783: PUSH
45784: LD_INT 11
45786: PUSH
45787: LD_INT 12
45789: PUSH
45790: LD_INT 13
45792: PUSH
45793: LD_INT 14
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: ST_TO_ADDR
45802: GO 46225
45804: LD_INT 28
45806: DOUBLE
45807: EQUAL
45808: IFTRUE 45812
45810: GO 45830
45812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45813: LD_ADDR_VAR 0 3
45817: PUSH
45818: LD_INT 13
45820: PUSH
45821: LD_INT 14
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: ST_TO_ADDR
45828: GO 46225
45830: LD_INT 29
45832: DOUBLE
45833: EQUAL
45834: IFTRUE 45838
45836: GO 45856
45838: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45839: LD_ADDR_VAR 0 3
45843: PUSH
45844: LD_INT 13
45846: PUSH
45847: LD_INT 14
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: ST_TO_ADDR
45854: GO 46225
45856: LD_INT 31
45858: DOUBLE
45859: EQUAL
45860: IFTRUE 45864
45862: GO 45882
45864: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45865: LD_ADDR_VAR 0 3
45869: PUSH
45870: LD_INT 13
45872: PUSH
45873: LD_INT 14
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: ST_TO_ADDR
45880: GO 46225
45882: LD_INT 26
45884: DOUBLE
45885: EQUAL
45886: IFTRUE 45890
45888: GO 45908
45890: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45891: LD_ADDR_VAR 0 3
45895: PUSH
45896: LD_INT 13
45898: PUSH
45899: LD_INT 14
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: ST_TO_ADDR
45906: GO 46225
45908: LD_INT 42
45910: DOUBLE
45911: EQUAL
45912: IFTRUE 45916
45914: GO 45942
45916: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45917: LD_ADDR_VAR 0 3
45921: PUSH
45922: LD_INT 21
45924: PUSH
45925: LD_INT 22
45927: PUSH
45928: LD_INT 23
45930: PUSH
45931: LD_INT 24
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: ST_TO_ADDR
45940: GO 46225
45942: LD_INT 43
45944: DOUBLE
45945: EQUAL
45946: IFTRUE 45950
45948: GO 45976
45950: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45951: LD_ADDR_VAR 0 3
45955: PUSH
45956: LD_INT 21
45958: PUSH
45959: LD_INT 22
45961: PUSH
45962: LD_INT 23
45964: PUSH
45965: LD_INT 24
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: ST_TO_ADDR
45974: GO 46225
45976: LD_INT 44
45978: DOUBLE
45979: EQUAL
45980: IFTRUE 45984
45982: GO 46010
45984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45985: LD_ADDR_VAR 0 3
45989: PUSH
45990: LD_INT 21
45992: PUSH
45993: LD_INT 22
45995: PUSH
45996: LD_INT 23
45998: PUSH
45999: LD_INT 24
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: ST_TO_ADDR
46008: GO 46225
46010: LD_INT 45
46012: DOUBLE
46013: EQUAL
46014: IFTRUE 46018
46016: GO 46044
46018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46019: LD_ADDR_VAR 0 3
46023: PUSH
46024: LD_INT 21
46026: PUSH
46027: LD_INT 22
46029: PUSH
46030: LD_INT 23
46032: PUSH
46033: LD_INT 24
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: ST_TO_ADDR
46042: GO 46225
46044: LD_INT 49
46046: DOUBLE
46047: EQUAL
46048: IFTRUE 46052
46050: GO 46078
46052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46053: LD_ADDR_VAR 0 3
46057: PUSH
46058: LD_INT 21
46060: PUSH
46061: LD_INT 22
46063: PUSH
46064: LD_INT 23
46066: PUSH
46067: LD_INT 24
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: ST_TO_ADDR
46076: GO 46225
46078: LD_INT 51
46080: DOUBLE
46081: EQUAL
46082: IFTRUE 46086
46084: GO 46112
46086: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46087: LD_ADDR_VAR 0 3
46091: PUSH
46092: LD_INT 21
46094: PUSH
46095: LD_INT 22
46097: PUSH
46098: LD_INT 23
46100: PUSH
46101: LD_INT 24
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: ST_TO_ADDR
46110: GO 46225
46112: LD_INT 52
46114: DOUBLE
46115: EQUAL
46116: IFTRUE 46120
46118: GO 46146
46120: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46121: LD_ADDR_VAR 0 3
46125: PUSH
46126: LD_INT 21
46128: PUSH
46129: LD_INT 22
46131: PUSH
46132: LD_INT 23
46134: PUSH
46135: LD_INT 24
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
46144: GO 46225
46146: LD_INT 53
46148: DOUBLE
46149: EQUAL
46150: IFTRUE 46154
46152: GO 46172
46154: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46155: LD_ADDR_VAR 0 3
46159: PUSH
46160: LD_INT 23
46162: PUSH
46163: LD_INT 24
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: ST_TO_ADDR
46170: GO 46225
46172: LD_INT 46
46174: DOUBLE
46175: EQUAL
46176: IFTRUE 46180
46178: GO 46198
46180: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46181: LD_ADDR_VAR 0 3
46185: PUSH
46186: LD_INT 23
46188: PUSH
46189: LD_INT 24
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: ST_TO_ADDR
46196: GO 46225
46198: LD_INT 47
46200: DOUBLE
46201: EQUAL
46202: IFTRUE 46206
46204: GO 46224
46206: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46207: LD_ADDR_VAR 0 3
46211: PUSH
46212: LD_INT 23
46214: PUSH
46215: LD_INT 24
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: ST_TO_ADDR
46222: GO 46225
46224: POP
// result := ( chassis in result ) ;
46225: LD_ADDR_VAR 0 3
46229: PUSH
46230: LD_VAR 0 1
46234: PUSH
46235: LD_VAR 0 3
46239: IN
46240: ST_TO_ADDR
// end ;
46241: LD_VAR 0 3
46245: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46246: LD_INT 0
46248: PPUSH
46249: PPUSH
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
// result := array ;
46255: LD_ADDR_VAR 0 5
46259: PUSH
46260: LD_VAR 0 1
46264: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46265: LD_VAR 0 1
46269: NOT
46270: PUSH
46271: LD_VAR 0 2
46275: NOT
46276: OR
46277: PUSH
46278: LD_VAR 0 3
46282: NOT
46283: OR
46284: PUSH
46285: LD_VAR 0 2
46289: PUSH
46290: LD_VAR 0 1
46294: GREATER
46295: OR
46296: PUSH
46297: LD_VAR 0 3
46301: PUSH
46302: LD_VAR 0 1
46306: GREATER
46307: OR
46308: IFFALSE 46312
// exit ;
46310: GO 46608
// if direction then
46312: LD_VAR 0 4
46316: IFFALSE 46380
// begin d := 1 ;
46318: LD_ADDR_VAR 0 9
46322: PUSH
46323: LD_INT 1
46325: ST_TO_ADDR
// if i_from > i_to then
46326: LD_VAR 0 2
46330: PUSH
46331: LD_VAR 0 3
46335: GREATER
46336: IFFALSE 46362
// length := ( array - i_from ) + i_to else
46338: LD_ADDR_VAR 0 11
46342: PUSH
46343: LD_VAR 0 1
46347: PUSH
46348: LD_VAR 0 2
46352: MINUS
46353: PUSH
46354: LD_VAR 0 3
46358: PLUS
46359: ST_TO_ADDR
46360: GO 46378
// length := i_to - i_from ;
46362: LD_ADDR_VAR 0 11
46366: PUSH
46367: LD_VAR 0 3
46371: PUSH
46372: LD_VAR 0 2
46376: MINUS
46377: ST_TO_ADDR
// end else
46378: GO 46441
// begin d := - 1 ;
46380: LD_ADDR_VAR 0 9
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: ST_TO_ADDR
// if i_from > i_to then
46389: LD_VAR 0 2
46393: PUSH
46394: LD_VAR 0 3
46398: GREATER
46399: IFFALSE 46419
// length := i_from - i_to else
46401: LD_ADDR_VAR 0 11
46405: PUSH
46406: LD_VAR 0 2
46410: PUSH
46411: LD_VAR 0 3
46415: MINUS
46416: ST_TO_ADDR
46417: GO 46441
// length := ( array - i_to ) + i_from ;
46419: LD_ADDR_VAR 0 11
46423: PUSH
46424: LD_VAR 0 1
46428: PUSH
46429: LD_VAR 0 3
46433: MINUS
46434: PUSH
46435: LD_VAR 0 2
46439: PLUS
46440: ST_TO_ADDR
// end ; if not length then
46441: LD_VAR 0 11
46445: NOT
46446: IFFALSE 46450
// exit ;
46448: GO 46608
// tmp := array ;
46450: LD_ADDR_VAR 0 10
46454: PUSH
46455: LD_VAR 0 1
46459: ST_TO_ADDR
// for i = 1 to length do
46460: LD_ADDR_VAR 0 6
46464: PUSH
46465: DOUBLE
46466: LD_INT 1
46468: DEC
46469: ST_TO_ADDR
46470: LD_VAR 0 11
46474: PUSH
46475: FOR_TO
46476: IFFALSE 46596
// begin for j = 1 to array do
46478: LD_ADDR_VAR 0 7
46482: PUSH
46483: DOUBLE
46484: LD_INT 1
46486: DEC
46487: ST_TO_ADDR
46488: LD_VAR 0 1
46492: PUSH
46493: FOR_TO
46494: IFFALSE 46582
// begin k := j + d ;
46496: LD_ADDR_VAR 0 8
46500: PUSH
46501: LD_VAR 0 7
46505: PUSH
46506: LD_VAR 0 9
46510: PLUS
46511: ST_TO_ADDR
// if k > array then
46512: LD_VAR 0 8
46516: PUSH
46517: LD_VAR 0 1
46521: GREATER
46522: IFFALSE 46532
// k := 1 ;
46524: LD_ADDR_VAR 0 8
46528: PUSH
46529: LD_INT 1
46531: ST_TO_ADDR
// if not k then
46532: LD_VAR 0 8
46536: NOT
46537: IFFALSE 46549
// k := array ;
46539: LD_ADDR_VAR 0 8
46543: PUSH
46544: LD_VAR 0 1
46548: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46549: LD_ADDR_VAR 0 10
46553: PUSH
46554: LD_VAR 0 10
46558: PPUSH
46559: LD_VAR 0 8
46563: PPUSH
46564: LD_VAR 0 1
46568: PUSH
46569: LD_VAR 0 7
46573: ARRAY
46574: PPUSH
46575: CALL_OW 1
46579: ST_TO_ADDR
// end ;
46580: GO 46493
46582: POP
46583: POP
// array := tmp ;
46584: LD_ADDR_VAR 0 1
46588: PUSH
46589: LD_VAR 0 10
46593: ST_TO_ADDR
// end ;
46594: GO 46475
46596: POP
46597: POP
// result := array ;
46598: LD_ADDR_VAR 0 5
46602: PUSH
46603: LD_VAR 0 1
46607: ST_TO_ADDR
// end ;
46608: LD_VAR 0 5
46612: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46613: LD_INT 0
46615: PPUSH
46616: PPUSH
// result := 0 ;
46617: LD_ADDR_VAR 0 3
46621: PUSH
46622: LD_INT 0
46624: ST_TO_ADDR
// if not array or not value in array then
46625: LD_VAR 0 1
46629: NOT
46630: PUSH
46631: LD_VAR 0 2
46635: PUSH
46636: LD_VAR 0 1
46640: IN
46641: NOT
46642: OR
46643: IFFALSE 46647
// exit ;
46645: GO 46701
// for i = 1 to array do
46647: LD_ADDR_VAR 0 4
46651: PUSH
46652: DOUBLE
46653: LD_INT 1
46655: DEC
46656: ST_TO_ADDR
46657: LD_VAR 0 1
46661: PUSH
46662: FOR_TO
46663: IFFALSE 46699
// if value = array [ i ] then
46665: LD_VAR 0 2
46669: PUSH
46670: LD_VAR 0 1
46674: PUSH
46675: LD_VAR 0 4
46679: ARRAY
46680: EQUAL
46681: IFFALSE 46697
// begin result := i ;
46683: LD_ADDR_VAR 0 3
46687: PUSH
46688: LD_VAR 0 4
46692: ST_TO_ADDR
// exit ;
46693: POP
46694: POP
46695: GO 46701
// end ;
46697: GO 46662
46699: POP
46700: POP
// end ;
46701: LD_VAR 0 3
46705: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46706: LD_INT 0
46708: PPUSH
// vc_chassis := chassis ;
46709: LD_ADDR_OWVAR 37
46713: PUSH
46714: LD_VAR 0 1
46718: ST_TO_ADDR
// vc_engine := engine ;
46719: LD_ADDR_OWVAR 39
46723: PUSH
46724: LD_VAR 0 2
46728: ST_TO_ADDR
// vc_control := control ;
46729: LD_ADDR_OWVAR 38
46733: PUSH
46734: LD_VAR 0 3
46738: ST_TO_ADDR
// vc_weapon := weapon ;
46739: LD_ADDR_OWVAR 40
46743: PUSH
46744: LD_VAR 0 4
46748: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46749: LD_ADDR_OWVAR 41
46753: PUSH
46754: LD_VAR 0 5
46758: ST_TO_ADDR
// end ;
46759: LD_VAR 0 6
46763: RET
// export function WantPlant ( unit ) ; var task ; begin
46764: LD_INT 0
46766: PPUSH
46767: PPUSH
// result := false ;
46768: LD_ADDR_VAR 0 2
46772: PUSH
46773: LD_INT 0
46775: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46776: LD_ADDR_VAR 0 3
46780: PUSH
46781: LD_VAR 0 1
46785: PPUSH
46786: CALL_OW 437
46790: ST_TO_ADDR
// if task then
46791: LD_VAR 0 3
46795: IFFALSE 46823
// if task [ 1 ] [ 1 ] = p then
46797: LD_VAR 0 3
46801: PUSH
46802: LD_INT 1
46804: ARRAY
46805: PUSH
46806: LD_INT 1
46808: ARRAY
46809: PUSH
46810: LD_STRING p
46812: EQUAL
46813: IFFALSE 46823
// result := true ;
46815: LD_ADDR_VAR 0 2
46819: PUSH
46820: LD_INT 1
46822: ST_TO_ADDR
// end ;
46823: LD_VAR 0 2
46827: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46828: LD_INT 0
46830: PPUSH
46831: PPUSH
46832: PPUSH
46833: PPUSH
// if pos < 1 then
46834: LD_VAR 0 2
46838: PUSH
46839: LD_INT 1
46841: LESS
46842: IFFALSE 46846
// exit ;
46844: GO 47149
// if pos = 1 then
46846: LD_VAR 0 2
46850: PUSH
46851: LD_INT 1
46853: EQUAL
46854: IFFALSE 46887
// result := Replace ( arr , pos [ 1 ] , value ) else
46856: LD_ADDR_VAR 0 4
46860: PUSH
46861: LD_VAR 0 1
46865: PPUSH
46866: LD_VAR 0 2
46870: PUSH
46871: LD_INT 1
46873: ARRAY
46874: PPUSH
46875: LD_VAR 0 3
46879: PPUSH
46880: CALL_OW 1
46884: ST_TO_ADDR
46885: GO 47149
// begin tmp := arr ;
46887: LD_ADDR_VAR 0 6
46891: PUSH
46892: LD_VAR 0 1
46896: ST_TO_ADDR
// s_arr := [ tmp ] ;
46897: LD_ADDR_VAR 0 7
46901: PUSH
46902: LD_VAR 0 6
46906: PUSH
46907: EMPTY
46908: LIST
46909: ST_TO_ADDR
// for i = 1 to pos - 1 do
46910: LD_ADDR_VAR 0 5
46914: PUSH
46915: DOUBLE
46916: LD_INT 1
46918: DEC
46919: ST_TO_ADDR
46920: LD_VAR 0 2
46924: PUSH
46925: LD_INT 1
46927: MINUS
46928: PUSH
46929: FOR_TO
46930: IFFALSE 46975
// begin tmp := tmp [ pos [ i ] ] ;
46932: LD_ADDR_VAR 0 6
46936: PUSH
46937: LD_VAR 0 6
46941: PUSH
46942: LD_VAR 0 2
46946: PUSH
46947: LD_VAR 0 5
46951: ARRAY
46952: ARRAY
46953: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46954: LD_ADDR_VAR 0 7
46958: PUSH
46959: LD_VAR 0 7
46963: PUSH
46964: LD_VAR 0 6
46968: PUSH
46969: EMPTY
46970: LIST
46971: ADD
46972: ST_TO_ADDR
// end ;
46973: GO 46929
46975: POP
46976: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46977: LD_ADDR_VAR 0 6
46981: PUSH
46982: LD_VAR 0 6
46986: PPUSH
46987: LD_VAR 0 2
46991: PUSH
46992: LD_VAR 0 2
46996: ARRAY
46997: PPUSH
46998: LD_VAR 0 3
47002: PPUSH
47003: CALL_OW 1
47007: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47008: LD_ADDR_VAR 0 7
47012: PUSH
47013: LD_VAR 0 7
47017: PPUSH
47018: LD_VAR 0 7
47022: PPUSH
47023: LD_VAR 0 6
47027: PPUSH
47028: CALL_OW 1
47032: ST_TO_ADDR
// for i = s_arr downto 2 do
47033: LD_ADDR_VAR 0 5
47037: PUSH
47038: DOUBLE
47039: LD_VAR 0 7
47043: INC
47044: ST_TO_ADDR
47045: LD_INT 2
47047: PUSH
47048: FOR_DOWNTO
47049: IFFALSE 47133
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47051: LD_ADDR_VAR 0 6
47055: PUSH
47056: LD_VAR 0 7
47060: PUSH
47061: LD_VAR 0 5
47065: PUSH
47066: LD_INT 1
47068: MINUS
47069: ARRAY
47070: PPUSH
47071: LD_VAR 0 2
47075: PUSH
47076: LD_VAR 0 5
47080: PUSH
47081: LD_INT 1
47083: MINUS
47084: ARRAY
47085: PPUSH
47086: LD_VAR 0 7
47090: PUSH
47091: LD_VAR 0 5
47095: ARRAY
47096: PPUSH
47097: CALL_OW 1
47101: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47102: LD_ADDR_VAR 0 7
47106: PUSH
47107: LD_VAR 0 7
47111: PPUSH
47112: LD_VAR 0 5
47116: PUSH
47117: LD_INT 1
47119: MINUS
47120: PPUSH
47121: LD_VAR 0 6
47125: PPUSH
47126: CALL_OW 1
47130: ST_TO_ADDR
// end ;
47131: GO 47048
47133: POP
47134: POP
// result := s_arr [ 1 ] ;
47135: LD_ADDR_VAR 0 4
47139: PUSH
47140: LD_VAR 0 7
47144: PUSH
47145: LD_INT 1
47147: ARRAY
47148: ST_TO_ADDR
// end ; end ;
47149: LD_VAR 0 4
47153: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47154: LD_INT 0
47156: PPUSH
47157: PPUSH
// if not list then
47158: LD_VAR 0 1
47162: NOT
47163: IFFALSE 47167
// exit ;
47165: GO 47258
// i := list [ pos1 ] ;
47167: LD_ADDR_VAR 0 5
47171: PUSH
47172: LD_VAR 0 1
47176: PUSH
47177: LD_VAR 0 2
47181: ARRAY
47182: ST_TO_ADDR
// if not i then
47183: LD_VAR 0 5
47187: NOT
47188: IFFALSE 47192
// exit ;
47190: GO 47258
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47192: LD_ADDR_VAR 0 1
47196: PUSH
47197: LD_VAR 0 1
47201: PPUSH
47202: LD_VAR 0 2
47206: PPUSH
47207: LD_VAR 0 1
47211: PUSH
47212: LD_VAR 0 3
47216: ARRAY
47217: PPUSH
47218: CALL_OW 1
47222: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47223: LD_ADDR_VAR 0 1
47227: PUSH
47228: LD_VAR 0 1
47232: PPUSH
47233: LD_VAR 0 3
47237: PPUSH
47238: LD_VAR 0 5
47242: PPUSH
47243: CALL_OW 1
47247: ST_TO_ADDR
// result := list ;
47248: LD_ADDR_VAR 0 4
47252: PUSH
47253: LD_VAR 0 1
47257: ST_TO_ADDR
// end ;
47258: LD_VAR 0 4
47262: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47263: LD_INT 0
47265: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47266: LD_ADDR_VAR 0 5
47270: PUSH
47271: LD_VAR 0 1
47275: PPUSH
47276: CALL_OW 250
47280: PPUSH
47281: LD_VAR 0 1
47285: PPUSH
47286: CALL_OW 251
47290: PPUSH
47291: LD_VAR 0 2
47295: PPUSH
47296: LD_VAR 0 3
47300: PPUSH
47301: LD_VAR 0 4
47305: PPUSH
47306: CALL 47684 0 5
47310: ST_TO_ADDR
// end ;
47311: LD_VAR 0 5
47315: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47316: LD_INT 0
47318: PPUSH
47319: PPUSH
47320: PPUSH
47321: PPUSH
// if not list or not unit then
47322: LD_VAR 0 2
47326: NOT
47327: PUSH
47328: LD_VAR 0 1
47332: NOT
47333: OR
47334: IFFALSE 47338
// exit ;
47336: GO 47679
// result := [ ] ;
47338: LD_ADDR_VAR 0 5
47342: PUSH
47343: EMPTY
47344: ST_TO_ADDR
// for i in list do
47345: LD_ADDR_VAR 0 6
47349: PUSH
47350: LD_VAR 0 2
47354: PUSH
47355: FOR_IN
47356: IFFALSE 47574
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47358: LD_ADDR_VAR 0 8
47362: PUSH
47363: LD_VAR 0 1
47367: PPUSH
47368: LD_VAR 0 6
47372: PUSH
47373: LD_INT 1
47375: ARRAY
47376: PPUSH
47377: LD_VAR 0 6
47381: PUSH
47382: LD_INT 2
47384: ARRAY
47385: PPUSH
47386: CALL_OW 297
47390: ST_TO_ADDR
// if not Count ( result ) then
47391: LD_VAR 0 5
47395: PPUSH
47396: CALL 43968 0 1
47400: NOT
47401: IFFALSE 47434
// begin result := Join ( result , [ i , tmp ] ) ;
47403: LD_ADDR_VAR 0 5
47407: PUSH
47408: LD_VAR 0 5
47412: PPUSH
47413: LD_VAR 0 6
47417: PUSH
47418: LD_VAR 0 8
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PPUSH
47427: CALL 79577 0 2
47431: ST_TO_ADDR
// continue ;
47432: GO 47355
// end ; if result [ result ] [ 2 ] <= tmp then
47434: LD_VAR 0 5
47438: PUSH
47439: LD_VAR 0 5
47443: ARRAY
47444: PUSH
47445: LD_INT 2
47447: ARRAY
47448: PUSH
47449: LD_VAR 0 8
47453: LESSEQUAL
47454: IFFALSE 47487
// result := Join ( result , [ i , tmp ] ) else
47456: LD_ADDR_VAR 0 5
47460: PUSH
47461: LD_VAR 0 5
47465: PPUSH
47466: LD_VAR 0 6
47470: PUSH
47471: LD_VAR 0 8
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PPUSH
47480: CALL 79577 0 2
47484: ST_TO_ADDR
47485: GO 47572
// begin for j := 1 to Count ( result ) do
47487: LD_ADDR_VAR 0 7
47491: PUSH
47492: DOUBLE
47493: LD_INT 1
47495: DEC
47496: ST_TO_ADDR
47497: LD_VAR 0 5
47501: PPUSH
47502: CALL 43968 0 1
47506: PUSH
47507: FOR_TO
47508: IFFALSE 47570
// begin if tmp < result [ j ] [ 2 ] then
47510: LD_VAR 0 8
47514: PUSH
47515: LD_VAR 0 5
47519: PUSH
47520: LD_VAR 0 7
47524: ARRAY
47525: PUSH
47526: LD_INT 2
47528: ARRAY
47529: LESS
47530: IFFALSE 47568
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47532: LD_ADDR_VAR 0 5
47536: PUSH
47537: LD_VAR 0 5
47541: PPUSH
47542: LD_VAR 0 7
47546: PPUSH
47547: LD_VAR 0 6
47551: PUSH
47552: LD_VAR 0 8
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PPUSH
47561: CALL_OW 2
47565: ST_TO_ADDR
// break ;
47566: GO 47570
// end ; end ;
47568: GO 47507
47570: POP
47571: POP
// end ; end ;
47572: GO 47355
47574: POP
47575: POP
// if result and not asc then
47576: LD_VAR 0 5
47580: PUSH
47581: LD_VAR 0 3
47585: NOT
47586: AND
47587: IFFALSE 47604
// result := ReverseArray ( result ) ;
47589: LD_ADDR_VAR 0 5
47593: PUSH
47594: LD_VAR 0 5
47598: PPUSH
47599: CALL 74844 0 1
47603: ST_TO_ADDR
// tmp := [ ] ;
47604: LD_ADDR_VAR 0 8
47608: PUSH
47609: EMPTY
47610: ST_TO_ADDR
// if mode then
47611: LD_VAR 0 4
47615: IFFALSE 47679
// begin for i := 1 to result do
47617: LD_ADDR_VAR 0 6
47621: PUSH
47622: DOUBLE
47623: LD_INT 1
47625: DEC
47626: ST_TO_ADDR
47627: LD_VAR 0 5
47631: PUSH
47632: FOR_TO
47633: IFFALSE 47667
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47635: LD_ADDR_VAR 0 8
47639: PUSH
47640: LD_VAR 0 8
47644: PPUSH
47645: LD_VAR 0 5
47649: PUSH
47650: LD_VAR 0 6
47654: ARRAY
47655: PUSH
47656: LD_INT 1
47658: ARRAY
47659: PPUSH
47660: CALL 79577 0 2
47664: ST_TO_ADDR
47665: GO 47632
47667: POP
47668: POP
// result := tmp ;
47669: LD_ADDR_VAR 0 5
47673: PUSH
47674: LD_VAR 0 8
47678: ST_TO_ADDR
// end ; end ;
47679: LD_VAR 0 5
47683: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47684: LD_INT 0
47686: PPUSH
47687: PPUSH
47688: PPUSH
47689: PPUSH
// if not list then
47690: LD_VAR 0 3
47694: NOT
47695: IFFALSE 47699
// exit ;
47697: GO 48087
// result := [ ] ;
47699: LD_ADDR_VAR 0 6
47703: PUSH
47704: EMPTY
47705: ST_TO_ADDR
// for i in list do
47706: LD_ADDR_VAR 0 7
47710: PUSH
47711: LD_VAR 0 3
47715: PUSH
47716: FOR_IN
47717: IFFALSE 47919
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47719: LD_ADDR_VAR 0 9
47723: PUSH
47724: LD_VAR 0 7
47728: PPUSH
47729: LD_VAR 0 1
47733: PPUSH
47734: LD_VAR 0 2
47738: PPUSH
47739: CALL_OW 297
47743: ST_TO_ADDR
// if not result then
47744: LD_VAR 0 6
47748: NOT
47749: IFFALSE 47775
// result := [ [ i , tmp ] ] else
47751: LD_ADDR_VAR 0 6
47755: PUSH
47756: LD_VAR 0 7
47760: PUSH
47761: LD_VAR 0 9
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: EMPTY
47771: LIST
47772: ST_TO_ADDR
47773: GO 47917
// begin if result [ result ] [ 2 ] <= tmp then
47775: LD_VAR 0 6
47779: PUSH
47780: LD_VAR 0 6
47784: ARRAY
47785: PUSH
47786: LD_INT 2
47788: ARRAY
47789: PUSH
47790: LD_VAR 0 9
47794: LESSEQUAL
47795: IFFALSE 47837
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47797: LD_ADDR_VAR 0 6
47801: PUSH
47802: LD_VAR 0 6
47806: PPUSH
47807: LD_VAR 0 6
47811: PUSH
47812: LD_INT 1
47814: PLUS
47815: PPUSH
47816: LD_VAR 0 7
47820: PUSH
47821: LD_VAR 0 9
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PPUSH
47830: CALL_OW 2
47834: ST_TO_ADDR
47835: GO 47917
// for j := 1 to result do
47837: LD_ADDR_VAR 0 8
47841: PUSH
47842: DOUBLE
47843: LD_INT 1
47845: DEC
47846: ST_TO_ADDR
47847: LD_VAR 0 6
47851: PUSH
47852: FOR_TO
47853: IFFALSE 47915
// begin if tmp < result [ j ] [ 2 ] then
47855: LD_VAR 0 9
47859: PUSH
47860: LD_VAR 0 6
47864: PUSH
47865: LD_VAR 0 8
47869: ARRAY
47870: PUSH
47871: LD_INT 2
47873: ARRAY
47874: LESS
47875: IFFALSE 47913
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47877: LD_ADDR_VAR 0 6
47881: PUSH
47882: LD_VAR 0 6
47886: PPUSH
47887: LD_VAR 0 8
47891: PPUSH
47892: LD_VAR 0 7
47896: PUSH
47897: LD_VAR 0 9
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PPUSH
47906: CALL_OW 2
47910: ST_TO_ADDR
// break ;
47911: GO 47915
// end ; end ;
47913: GO 47852
47915: POP
47916: POP
// end ; end ;
47917: GO 47716
47919: POP
47920: POP
// if result and not asc then
47921: LD_VAR 0 6
47925: PUSH
47926: LD_VAR 0 4
47930: NOT
47931: AND
47932: IFFALSE 48007
// begin tmp := result ;
47934: LD_ADDR_VAR 0 9
47938: PUSH
47939: LD_VAR 0 6
47943: ST_TO_ADDR
// for i = tmp downto 1 do
47944: LD_ADDR_VAR 0 7
47948: PUSH
47949: DOUBLE
47950: LD_VAR 0 9
47954: INC
47955: ST_TO_ADDR
47956: LD_INT 1
47958: PUSH
47959: FOR_DOWNTO
47960: IFFALSE 48005
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47962: LD_ADDR_VAR 0 6
47966: PUSH
47967: LD_VAR 0 6
47971: PPUSH
47972: LD_VAR 0 9
47976: PUSH
47977: LD_VAR 0 7
47981: MINUS
47982: PUSH
47983: LD_INT 1
47985: PLUS
47986: PPUSH
47987: LD_VAR 0 9
47991: PUSH
47992: LD_VAR 0 7
47996: ARRAY
47997: PPUSH
47998: CALL_OW 1
48002: ST_TO_ADDR
48003: GO 47959
48005: POP
48006: POP
// end ; tmp := [ ] ;
48007: LD_ADDR_VAR 0 9
48011: PUSH
48012: EMPTY
48013: ST_TO_ADDR
// if mode then
48014: LD_VAR 0 5
48018: IFFALSE 48087
// begin for i = 1 to result do
48020: LD_ADDR_VAR 0 7
48024: PUSH
48025: DOUBLE
48026: LD_INT 1
48028: DEC
48029: ST_TO_ADDR
48030: LD_VAR 0 6
48034: PUSH
48035: FOR_TO
48036: IFFALSE 48075
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48038: LD_ADDR_VAR 0 9
48042: PUSH
48043: LD_VAR 0 9
48047: PPUSH
48048: LD_VAR 0 7
48052: PPUSH
48053: LD_VAR 0 6
48057: PUSH
48058: LD_VAR 0 7
48062: ARRAY
48063: PUSH
48064: LD_INT 1
48066: ARRAY
48067: PPUSH
48068: CALL_OW 1
48072: ST_TO_ADDR
48073: GO 48035
48075: POP
48076: POP
// result := tmp ;
48077: LD_ADDR_VAR 0 6
48081: PUSH
48082: LD_VAR 0 9
48086: ST_TO_ADDR
// end ; end ;
48087: LD_VAR 0 6
48091: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48092: LD_INT 0
48094: PPUSH
48095: PPUSH
48096: PPUSH
48097: PPUSH
48098: PPUSH
48099: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48100: LD_ADDR_VAR 0 5
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: ST_TO_ADDR
// if not x or not y then
48122: LD_VAR 0 2
48126: NOT
48127: PUSH
48128: LD_VAR 0 3
48132: NOT
48133: OR
48134: IFFALSE 48138
// exit ;
48136: GO 49788
// if not range then
48138: LD_VAR 0 4
48142: NOT
48143: IFFALSE 48153
// range := 10 ;
48145: LD_ADDR_VAR 0 4
48149: PUSH
48150: LD_INT 10
48152: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48153: LD_ADDR_VAR 0 8
48157: PUSH
48158: LD_INT 81
48160: PUSH
48161: LD_VAR 0 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 92
48172: PUSH
48173: LD_VAR 0 2
48177: PUSH
48178: LD_VAR 0 3
48182: PUSH
48183: LD_VAR 0 4
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 3
48196: PUSH
48197: LD_INT 21
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: PPUSH
48216: CALL_OW 69
48220: ST_TO_ADDR
// if not tmp then
48221: LD_VAR 0 8
48225: NOT
48226: IFFALSE 48230
// exit ;
48228: GO 49788
// for i in tmp do
48230: LD_ADDR_VAR 0 6
48234: PUSH
48235: LD_VAR 0 8
48239: PUSH
48240: FOR_IN
48241: IFFALSE 49763
// begin points := [ 0 , 0 , 0 ] ;
48243: LD_ADDR_VAR 0 9
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: LIST
48261: ST_TO_ADDR
// bpoints := 1 ;
48262: LD_ADDR_VAR 0 10
48266: PUSH
48267: LD_INT 1
48269: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48270: LD_VAR 0 6
48274: PPUSH
48275: CALL_OW 247
48279: PUSH
48280: LD_INT 1
48282: DOUBLE
48283: EQUAL
48284: IFTRUE 48288
48286: GO 48866
48288: POP
// begin if GetClass ( i ) = 1 then
48289: LD_VAR 0 6
48293: PPUSH
48294: CALL_OW 257
48298: PUSH
48299: LD_INT 1
48301: EQUAL
48302: IFFALSE 48323
// points := [ 10 , 5 , 3 ] ;
48304: LD_ADDR_VAR 0 9
48308: PUSH
48309: LD_INT 10
48311: PUSH
48312: LD_INT 5
48314: PUSH
48315: LD_INT 3
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: LIST
48322: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48323: LD_VAR 0 6
48327: PPUSH
48328: CALL_OW 257
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: LD_INT 4
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: LIST
48346: IN
48347: IFFALSE 48368
// points := [ 3 , 2 , 1 ] ;
48349: LD_ADDR_VAR 0 9
48353: PUSH
48354: LD_INT 3
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48368: LD_VAR 0 6
48372: PPUSH
48373: CALL_OW 257
48377: PUSH
48378: LD_INT 5
48380: EQUAL
48381: IFFALSE 48402
// points := [ 130 , 5 , 2 ] ;
48383: LD_ADDR_VAR 0 9
48387: PUSH
48388: LD_INT 130
48390: PUSH
48391: LD_INT 5
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: LIST
48401: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48402: LD_VAR 0 6
48406: PPUSH
48407: CALL_OW 257
48411: PUSH
48412: LD_INT 8
48414: EQUAL
48415: IFFALSE 48436
// points := [ 35 , 35 , 30 ] ;
48417: LD_ADDR_VAR 0 9
48421: PUSH
48422: LD_INT 35
48424: PUSH
48425: LD_INT 35
48427: PUSH
48428: LD_INT 30
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48436: LD_VAR 0 6
48440: PPUSH
48441: CALL_OW 257
48445: PUSH
48446: LD_INT 9
48448: EQUAL
48449: IFFALSE 48470
// points := [ 20 , 55 , 40 ] ;
48451: LD_ADDR_VAR 0 9
48455: PUSH
48456: LD_INT 20
48458: PUSH
48459: LD_INT 55
48461: PUSH
48462: LD_INT 40
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48470: LD_VAR 0 6
48474: PPUSH
48475: CALL_OW 257
48479: PUSH
48480: LD_INT 12
48482: PUSH
48483: LD_INT 16
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: IN
48490: IFFALSE 48511
// points := [ 5 , 3 , 2 ] ;
48492: LD_ADDR_VAR 0 9
48496: PUSH
48497: LD_INT 5
48499: PUSH
48500: LD_INT 3
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: LIST
48510: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48511: LD_VAR 0 6
48515: PPUSH
48516: CALL_OW 257
48520: PUSH
48521: LD_INT 17
48523: EQUAL
48524: IFFALSE 48545
// points := [ 100 , 50 , 75 ] ;
48526: LD_ADDR_VAR 0 9
48530: PUSH
48531: LD_INT 100
48533: PUSH
48534: LD_INT 50
48536: PUSH
48537: LD_INT 75
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: LIST
48544: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48545: LD_VAR 0 6
48549: PPUSH
48550: CALL_OW 257
48554: PUSH
48555: LD_INT 15
48557: EQUAL
48558: IFFALSE 48579
// points := [ 10 , 5 , 3 ] ;
48560: LD_ADDR_VAR 0 9
48564: PUSH
48565: LD_INT 10
48567: PUSH
48568: LD_INT 5
48570: PUSH
48571: LD_INT 3
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48579: LD_VAR 0 6
48583: PPUSH
48584: CALL_OW 257
48588: PUSH
48589: LD_INT 14
48591: EQUAL
48592: IFFALSE 48613
// points := [ 10 , 0 , 0 ] ;
48594: LD_ADDR_VAR 0 9
48598: PUSH
48599: LD_INT 10
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48613: LD_VAR 0 6
48617: PPUSH
48618: CALL_OW 257
48622: PUSH
48623: LD_INT 11
48625: EQUAL
48626: IFFALSE 48647
// points := [ 30 , 10 , 5 ] ;
48628: LD_ADDR_VAR 0 9
48632: PUSH
48633: LD_INT 30
48635: PUSH
48636: LD_INT 10
48638: PUSH
48639: LD_INT 5
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: LIST
48646: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48647: LD_VAR 0 1
48651: PPUSH
48652: LD_INT 5
48654: PPUSH
48655: CALL_OW 321
48659: PUSH
48660: LD_INT 2
48662: EQUAL
48663: IFFALSE 48680
// bpoints := bpoints * 1.8 ;
48665: LD_ADDR_VAR 0 10
48669: PUSH
48670: LD_VAR 0 10
48674: PUSH
48675: LD_REAL  1.80000000000000E+0000
48678: MUL
48679: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48680: LD_VAR 0 6
48684: PPUSH
48685: CALL_OW 257
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: LD_INT 3
48698: PUSH
48699: LD_INT 4
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: IN
48708: PUSH
48709: LD_VAR 0 1
48713: PPUSH
48714: LD_INT 51
48716: PPUSH
48717: CALL_OW 321
48721: PUSH
48722: LD_INT 2
48724: EQUAL
48725: AND
48726: IFFALSE 48743
// bpoints := bpoints * 1.2 ;
48728: LD_ADDR_VAR 0 10
48732: PUSH
48733: LD_VAR 0 10
48737: PUSH
48738: LD_REAL  1.20000000000000E+0000
48741: MUL
48742: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48743: LD_VAR 0 6
48747: PPUSH
48748: CALL_OW 257
48752: PUSH
48753: LD_INT 5
48755: PUSH
48756: LD_INT 7
48758: PUSH
48759: LD_INT 9
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: LIST
48766: IN
48767: PUSH
48768: LD_VAR 0 1
48772: PPUSH
48773: LD_INT 52
48775: PPUSH
48776: CALL_OW 321
48780: PUSH
48781: LD_INT 2
48783: EQUAL
48784: AND
48785: IFFALSE 48802
// bpoints := bpoints * 1.5 ;
48787: LD_ADDR_VAR 0 10
48791: PUSH
48792: LD_VAR 0 10
48796: PUSH
48797: LD_REAL  1.50000000000000E+0000
48800: MUL
48801: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48802: LD_VAR 0 1
48806: PPUSH
48807: LD_INT 66
48809: PPUSH
48810: CALL_OW 321
48814: PUSH
48815: LD_INT 2
48817: EQUAL
48818: IFFALSE 48835
// bpoints := bpoints * 1.1 ;
48820: LD_ADDR_VAR 0 10
48824: PUSH
48825: LD_VAR 0 10
48829: PUSH
48830: LD_REAL  1.10000000000000E+0000
48833: MUL
48834: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48835: LD_ADDR_VAR 0 10
48839: PUSH
48840: LD_VAR 0 10
48844: PUSH
48845: LD_VAR 0 6
48849: PPUSH
48850: LD_INT 1
48852: PPUSH
48853: CALL_OW 259
48857: PUSH
48858: LD_REAL  1.15000000000000E+0000
48861: MUL
48862: MUL
48863: ST_TO_ADDR
// end ; unit_vehicle :
48864: GO 49692
48866: LD_INT 2
48868: DOUBLE
48869: EQUAL
48870: IFTRUE 48874
48872: GO 49680
48874: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48875: LD_VAR 0 6
48879: PPUSH
48880: CALL_OW 264
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 42
48890: PUSH
48891: LD_INT 24
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: LIST
48898: IN
48899: IFFALSE 48920
// points := [ 25 , 5 , 3 ] ;
48901: LD_ADDR_VAR 0 9
48905: PUSH
48906: LD_INT 25
48908: PUSH
48909: LD_INT 5
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: LIST
48919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48920: LD_VAR 0 6
48924: PPUSH
48925: CALL_OW 264
48929: PUSH
48930: LD_INT 4
48932: PUSH
48933: LD_INT 43
48935: PUSH
48936: LD_INT 25
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: IN
48944: IFFALSE 48965
// points := [ 40 , 15 , 5 ] ;
48946: LD_ADDR_VAR 0 9
48950: PUSH
48951: LD_INT 40
48953: PUSH
48954: LD_INT 15
48956: PUSH
48957: LD_INT 5
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: LIST
48964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48965: LD_VAR 0 6
48969: PPUSH
48970: CALL_OW 264
48974: PUSH
48975: LD_INT 3
48977: PUSH
48978: LD_INT 23
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: IN
48985: IFFALSE 49006
// points := [ 7 , 25 , 8 ] ;
48987: LD_ADDR_VAR 0 9
48991: PUSH
48992: LD_INT 7
48994: PUSH
48995: LD_INT 25
48997: PUSH
48998: LD_INT 8
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49006: LD_VAR 0 6
49010: PPUSH
49011: CALL_OW 264
49015: PUSH
49016: LD_INT 5
49018: PUSH
49019: LD_INT 27
49021: PUSH
49022: LD_INT 44
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: LIST
49029: IN
49030: IFFALSE 49051
// points := [ 14 , 50 , 16 ] ;
49032: LD_ADDR_VAR 0 9
49036: PUSH
49037: LD_INT 14
49039: PUSH
49040: LD_INT 50
49042: PUSH
49043: LD_INT 16
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: LIST
49050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49051: LD_VAR 0 6
49055: PPUSH
49056: CALL_OW 264
49060: PUSH
49061: LD_INT 6
49063: PUSH
49064: LD_INT 46
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: IN
49071: IFFALSE 49092
// points := [ 32 , 120 , 70 ] ;
49073: LD_ADDR_VAR 0 9
49077: PUSH
49078: LD_INT 32
49080: PUSH
49081: LD_INT 120
49083: PUSH
49084: LD_INT 70
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49092: LD_VAR 0 6
49096: PPUSH
49097: CALL_OW 264
49101: PUSH
49102: LD_INT 7
49104: PUSH
49105: LD_INT 28
49107: PUSH
49108: LD_INT 45
49110: PUSH
49111: LD_INT 92
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: IN
49120: IFFALSE 49141
// points := [ 35 , 20 , 45 ] ;
49122: LD_ADDR_VAR 0 9
49126: PUSH
49127: LD_INT 35
49129: PUSH
49130: LD_INT 20
49132: PUSH
49133: LD_INT 45
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: LIST
49140: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49141: LD_VAR 0 6
49145: PPUSH
49146: CALL_OW 264
49150: PUSH
49151: LD_INT 47
49153: PUSH
49154: EMPTY
49155: LIST
49156: IN
49157: IFFALSE 49178
// points := [ 67 , 45 , 75 ] ;
49159: LD_ADDR_VAR 0 9
49163: PUSH
49164: LD_INT 67
49166: PUSH
49167: LD_INT 45
49169: PUSH
49170: LD_INT 75
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49178: LD_VAR 0 6
49182: PPUSH
49183: CALL_OW 264
49187: PUSH
49188: LD_INT 26
49190: PUSH
49191: EMPTY
49192: LIST
49193: IN
49194: IFFALSE 49215
// points := [ 120 , 30 , 80 ] ;
49196: LD_ADDR_VAR 0 9
49200: PUSH
49201: LD_INT 120
49203: PUSH
49204: LD_INT 30
49206: PUSH
49207: LD_INT 80
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: LIST
49214: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49215: LD_VAR 0 6
49219: PPUSH
49220: CALL_OW 264
49224: PUSH
49225: LD_INT 22
49227: PUSH
49228: EMPTY
49229: LIST
49230: IN
49231: IFFALSE 49252
// points := [ 40 , 1 , 1 ] ;
49233: LD_ADDR_VAR 0 9
49237: PUSH
49238: LD_INT 40
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49252: LD_VAR 0 6
49256: PPUSH
49257: CALL_OW 264
49261: PUSH
49262: LD_INT 29
49264: PUSH
49265: EMPTY
49266: LIST
49267: IN
49268: IFFALSE 49289
// points := [ 70 , 200 , 400 ] ;
49270: LD_ADDR_VAR 0 9
49274: PUSH
49275: LD_INT 70
49277: PUSH
49278: LD_INT 200
49280: PUSH
49281: LD_INT 400
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49289: LD_VAR 0 6
49293: PPUSH
49294: CALL_OW 264
49298: PUSH
49299: LD_INT 14
49301: PUSH
49302: LD_INT 53
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: IN
49309: IFFALSE 49330
// points := [ 40 , 10 , 20 ] ;
49311: LD_ADDR_VAR 0 9
49315: PUSH
49316: LD_INT 40
49318: PUSH
49319: LD_INT 10
49321: PUSH
49322: LD_INT 20
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49330: LD_VAR 0 6
49334: PPUSH
49335: CALL_OW 264
49339: PUSH
49340: LD_INT 9
49342: PUSH
49343: EMPTY
49344: LIST
49345: IN
49346: IFFALSE 49367
// points := [ 5 , 70 , 20 ] ;
49348: LD_ADDR_VAR 0 9
49352: PUSH
49353: LD_INT 5
49355: PUSH
49356: LD_INT 70
49358: PUSH
49359: LD_INT 20
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: LIST
49366: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49367: LD_VAR 0 6
49371: PPUSH
49372: CALL_OW 264
49376: PUSH
49377: LD_INT 10
49379: PUSH
49380: EMPTY
49381: LIST
49382: IN
49383: IFFALSE 49404
// points := [ 35 , 110 , 70 ] ;
49385: LD_ADDR_VAR 0 9
49389: PUSH
49390: LD_INT 35
49392: PUSH
49393: LD_INT 110
49395: PUSH
49396: LD_INT 70
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: LIST
49403: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49404: LD_VAR 0 6
49408: PPUSH
49409: CALL_OW 265
49413: PUSH
49414: LD_INT 25
49416: EQUAL
49417: IFFALSE 49438
// points := [ 80 , 65 , 100 ] ;
49419: LD_ADDR_VAR 0 9
49423: PUSH
49424: LD_INT 80
49426: PUSH
49427: LD_INT 65
49429: PUSH
49430: LD_INT 100
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: LIST
49437: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49438: LD_VAR 0 6
49442: PPUSH
49443: CALL_OW 263
49447: PUSH
49448: LD_INT 1
49450: EQUAL
49451: IFFALSE 49486
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49453: LD_ADDR_VAR 0 10
49457: PUSH
49458: LD_VAR 0 10
49462: PUSH
49463: LD_VAR 0 6
49467: PPUSH
49468: CALL_OW 311
49472: PPUSH
49473: LD_INT 3
49475: PPUSH
49476: CALL_OW 259
49480: PUSH
49481: LD_INT 4
49483: MUL
49484: MUL
49485: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49486: LD_VAR 0 6
49490: PPUSH
49491: CALL_OW 263
49495: PUSH
49496: LD_INT 2
49498: EQUAL
49499: IFFALSE 49550
// begin j := IsControledBy ( i ) ;
49501: LD_ADDR_VAR 0 7
49505: PUSH
49506: LD_VAR 0 6
49510: PPUSH
49511: CALL_OW 312
49515: ST_TO_ADDR
// if j then
49516: LD_VAR 0 7
49520: IFFALSE 49550
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49522: LD_ADDR_VAR 0 10
49526: PUSH
49527: LD_VAR 0 10
49531: PUSH
49532: LD_VAR 0 7
49536: PPUSH
49537: LD_INT 3
49539: PPUSH
49540: CALL_OW 259
49544: PUSH
49545: LD_INT 3
49547: MUL
49548: MUL
49549: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49550: LD_VAR 0 6
49554: PPUSH
49555: CALL_OW 264
49559: PUSH
49560: LD_INT 5
49562: PUSH
49563: LD_INT 6
49565: PUSH
49566: LD_INT 46
49568: PUSH
49569: LD_INT 44
49571: PUSH
49572: LD_INT 47
49574: PUSH
49575: LD_INT 45
49577: PUSH
49578: LD_INT 28
49580: PUSH
49581: LD_INT 7
49583: PUSH
49584: LD_INT 27
49586: PUSH
49587: LD_INT 29
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: IN
49602: PUSH
49603: LD_VAR 0 1
49607: PPUSH
49608: LD_INT 52
49610: PPUSH
49611: CALL_OW 321
49615: PUSH
49616: LD_INT 2
49618: EQUAL
49619: AND
49620: IFFALSE 49637
// bpoints := bpoints * 1.2 ;
49622: LD_ADDR_VAR 0 10
49626: PUSH
49627: LD_VAR 0 10
49631: PUSH
49632: LD_REAL  1.20000000000000E+0000
49635: MUL
49636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49637: LD_VAR 0 6
49641: PPUSH
49642: CALL_OW 264
49646: PUSH
49647: LD_INT 6
49649: PUSH
49650: LD_INT 46
49652: PUSH
49653: LD_INT 47
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: IN
49661: IFFALSE 49678
// bpoints := bpoints * 1.2 ;
49663: LD_ADDR_VAR 0 10
49667: PUSH
49668: LD_VAR 0 10
49672: PUSH
49673: LD_REAL  1.20000000000000E+0000
49676: MUL
49677: ST_TO_ADDR
// end ; unit_building :
49678: GO 49692
49680: LD_INT 3
49682: DOUBLE
49683: EQUAL
49684: IFTRUE 49688
49686: GO 49691
49688: POP
// ; end ;
49689: GO 49692
49691: POP
// for j = 1 to 3 do
49692: LD_ADDR_VAR 0 7
49696: PUSH
49697: DOUBLE
49698: LD_INT 1
49700: DEC
49701: ST_TO_ADDR
49702: LD_INT 3
49704: PUSH
49705: FOR_TO
49706: IFFALSE 49759
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49708: LD_ADDR_VAR 0 5
49712: PUSH
49713: LD_VAR 0 5
49717: PPUSH
49718: LD_VAR 0 7
49722: PPUSH
49723: LD_VAR 0 5
49727: PUSH
49728: LD_VAR 0 7
49732: ARRAY
49733: PUSH
49734: LD_VAR 0 9
49738: PUSH
49739: LD_VAR 0 7
49743: ARRAY
49744: PUSH
49745: LD_VAR 0 10
49749: MUL
49750: PLUS
49751: PPUSH
49752: CALL_OW 1
49756: ST_TO_ADDR
49757: GO 49705
49759: POP
49760: POP
// end ;
49761: GO 48240
49763: POP
49764: POP
// result := Replace ( result , 4 , tmp ) ;
49765: LD_ADDR_VAR 0 5
49769: PUSH
49770: LD_VAR 0 5
49774: PPUSH
49775: LD_INT 4
49777: PPUSH
49778: LD_VAR 0 8
49782: PPUSH
49783: CALL_OW 1
49787: ST_TO_ADDR
// end ;
49788: LD_VAR 0 5
49792: RET
// export function DangerAtRange ( unit , range ) ; begin
49793: LD_INT 0
49795: PPUSH
// if not unit then
49796: LD_VAR 0 1
49800: NOT
49801: IFFALSE 49805
// exit ;
49803: GO 49850
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49805: LD_ADDR_VAR 0 3
49809: PUSH
49810: LD_VAR 0 1
49814: PPUSH
49815: CALL_OW 255
49819: PPUSH
49820: LD_VAR 0 1
49824: PPUSH
49825: CALL_OW 250
49829: PPUSH
49830: LD_VAR 0 1
49834: PPUSH
49835: CALL_OW 251
49839: PPUSH
49840: LD_VAR 0 2
49844: PPUSH
49845: CALL 48092 0 4
49849: ST_TO_ADDR
// end ;
49850: LD_VAR 0 3
49854: RET
// export function DangerInArea ( side , area ) ; begin
49855: LD_INT 0
49857: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49858: LD_ADDR_VAR 0 3
49862: PUSH
49863: LD_VAR 0 2
49867: PPUSH
49868: LD_INT 81
49870: PUSH
49871: LD_VAR 0 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PPUSH
49880: CALL_OW 70
49884: ST_TO_ADDR
// end ;
49885: LD_VAR 0 3
49889: RET
// export function IsExtension ( b ) ; begin
49890: LD_INT 0
49892: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49893: LD_ADDR_VAR 0 2
49897: PUSH
49898: LD_VAR 0 1
49902: PUSH
49903: LD_INT 23
49905: PUSH
49906: LD_INT 20
49908: PUSH
49909: LD_INT 22
49911: PUSH
49912: LD_INT 17
49914: PUSH
49915: LD_INT 24
49917: PUSH
49918: LD_INT 21
49920: PUSH
49921: LD_INT 19
49923: PUSH
49924: LD_INT 16
49926: PUSH
49927: LD_INT 25
49929: PUSH
49930: LD_INT 18
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: IN
49945: ST_TO_ADDR
// end ;
49946: LD_VAR 0 2
49950: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49951: LD_INT 0
49953: PPUSH
49954: PPUSH
49955: PPUSH
// result := [ ] ;
49956: LD_ADDR_VAR 0 4
49960: PUSH
49961: EMPTY
49962: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49963: LD_ADDR_VAR 0 5
49967: PUSH
49968: LD_VAR 0 2
49972: PPUSH
49973: LD_INT 21
49975: PUSH
49976: LD_INT 3
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PPUSH
49983: CALL_OW 70
49987: ST_TO_ADDR
// if not tmp then
49988: LD_VAR 0 5
49992: NOT
49993: IFFALSE 49997
// exit ;
49995: GO 50061
// if checkLink then
49997: LD_VAR 0 3
50001: IFFALSE 50051
// begin for i in tmp do
50003: LD_ADDR_VAR 0 6
50007: PUSH
50008: LD_VAR 0 5
50012: PUSH
50013: FOR_IN
50014: IFFALSE 50049
// if GetBase ( i ) <> base then
50016: LD_VAR 0 6
50020: PPUSH
50021: CALL_OW 274
50025: PUSH
50026: LD_VAR 0 1
50030: NONEQUAL
50031: IFFALSE 50047
// ComLinkToBase ( base , i ) ;
50033: LD_VAR 0 1
50037: PPUSH
50038: LD_VAR 0 6
50042: PPUSH
50043: CALL_OW 169
50047: GO 50013
50049: POP
50050: POP
// end ; result := tmp ;
50051: LD_ADDR_VAR 0 4
50055: PUSH
50056: LD_VAR 0 5
50060: ST_TO_ADDR
// end ;
50061: LD_VAR 0 4
50065: RET
// export function ComComplete ( units , b ) ; var i ; begin
50066: LD_INT 0
50068: PPUSH
50069: PPUSH
// if not units then
50070: LD_VAR 0 1
50074: NOT
50075: IFFALSE 50079
// exit ;
50077: GO 50169
// for i in units do
50079: LD_ADDR_VAR 0 4
50083: PUSH
50084: LD_VAR 0 1
50088: PUSH
50089: FOR_IN
50090: IFFALSE 50167
// if BuildingStatus ( b ) = bs_build then
50092: LD_VAR 0 2
50096: PPUSH
50097: CALL_OW 461
50101: PUSH
50102: LD_INT 1
50104: EQUAL
50105: IFFALSE 50165
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50107: LD_VAR 0 4
50111: PPUSH
50112: LD_STRING h
50114: PUSH
50115: LD_VAR 0 2
50119: PPUSH
50120: CALL_OW 250
50124: PUSH
50125: LD_VAR 0 2
50129: PPUSH
50130: CALL_OW 251
50134: PUSH
50135: LD_VAR 0 2
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: PUSH
50158: EMPTY
50159: LIST
50160: PPUSH
50161: CALL_OW 446
50165: GO 50089
50167: POP
50168: POP
// end ;
50169: LD_VAR 0 3
50173: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50174: LD_INT 0
50176: PPUSH
50177: PPUSH
50178: PPUSH
50179: PPUSH
50180: PPUSH
50181: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50182: LD_VAR 0 1
50186: NOT
50187: PUSH
50188: LD_VAR 0 1
50192: PPUSH
50193: CALL_OW 263
50197: PUSH
50198: LD_INT 2
50200: NONEQUAL
50201: OR
50202: IFFALSE 50206
// exit ;
50204: GO 50522
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50206: LD_ADDR_VAR 0 6
50210: PUSH
50211: LD_INT 22
50213: PUSH
50214: LD_VAR 0 1
50218: PPUSH
50219: CALL_OW 255
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 30
50233: PUSH
50234: LD_INT 36
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 34
50243: PUSH
50244: LD_INT 31
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: LIST
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PPUSH
50260: CALL_OW 69
50264: ST_TO_ADDR
// if not tmp then
50265: LD_VAR 0 6
50269: NOT
50270: IFFALSE 50274
// exit ;
50272: GO 50522
// result := [ ] ;
50274: LD_ADDR_VAR 0 2
50278: PUSH
50279: EMPTY
50280: ST_TO_ADDR
// for i in tmp do
50281: LD_ADDR_VAR 0 3
50285: PUSH
50286: LD_VAR 0 6
50290: PUSH
50291: FOR_IN
50292: IFFALSE 50363
// begin t := UnitsInside ( i ) ;
50294: LD_ADDR_VAR 0 4
50298: PUSH
50299: LD_VAR 0 3
50303: PPUSH
50304: CALL_OW 313
50308: ST_TO_ADDR
// if t then
50309: LD_VAR 0 4
50313: IFFALSE 50361
// for j in t do
50315: LD_ADDR_VAR 0 7
50319: PUSH
50320: LD_VAR 0 4
50324: PUSH
50325: FOR_IN
50326: IFFALSE 50359
// result := Replace ( result , result + 1 , j ) ;
50328: LD_ADDR_VAR 0 2
50332: PUSH
50333: LD_VAR 0 2
50337: PPUSH
50338: LD_VAR 0 2
50342: PUSH
50343: LD_INT 1
50345: PLUS
50346: PPUSH
50347: LD_VAR 0 7
50351: PPUSH
50352: CALL_OW 1
50356: ST_TO_ADDR
50357: GO 50325
50359: POP
50360: POP
// end ;
50361: GO 50291
50363: POP
50364: POP
// if not result then
50365: LD_VAR 0 2
50369: NOT
50370: IFFALSE 50374
// exit ;
50372: GO 50522
// mech := result [ 1 ] ;
50374: LD_ADDR_VAR 0 5
50378: PUSH
50379: LD_VAR 0 2
50383: PUSH
50384: LD_INT 1
50386: ARRAY
50387: ST_TO_ADDR
// if result > 1 then
50388: LD_VAR 0 2
50392: PUSH
50393: LD_INT 1
50395: GREATER
50396: IFFALSE 50508
// begin for i = 2 to result do
50398: LD_ADDR_VAR 0 3
50402: PUSH
50403: DOUBLE
50404: LD_INT 2
50406: DEC
50407: ST_TO_ADDR
50408: LD_VAR 0 2
50412: PUSH
50413: FOR_TO
50414: IFFALSE 50506
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50416: LD_ADDR_VAR 0 4
50420: PUSH
50421: LD_VAR 0 2
50425: PUSH
50426: LD_VAR 0 3
50430: ARRAY
50431: PPUSH
50432: LD_INT 3
50434: PPUSH
50435: CALL_OW 259
50439: PUSH
50440: LD_VAR 0 2
50444: PUSH
50445: LD_VAR 0 3
50449: ARRAY
50450: PPUSH
50451: CALL_OW 432
50455: MINUS
50456: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50457: LD_VAR 0 4
50461: PUSH
50462: LD_VAR 0 5
50466: PPUSH
50467: LD_INT 3
50469: PPUSH
50470: CALL_OW 259
50474: PUSH
50475: LD_VAR 0 5
50479: PPUSH
50480: CALL_OW 432
50484: MINUS
50485: GREATEREQUAL
50486: IFFALSE 50504
// mech := result [ i ] ;
50488: LD_ADDR_VAR 0 5
50492: PUSH
50493: LD_VAR 0 2
50497: PUSH
50498: LD_VAR 0 3
50502: ARRAY
50503: ST_TO_ADDR
// end ;
50504: GO 50413
50506: POP
50507: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50508: LD_VAR 0 1
50512: PPUSH
50513: LD_VAR 0 5
50517: PPUSH
50518: CALL_OW 135
// end ;
50522: LD_VAR 0 2
50526: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50527: LD_INT 0
50529: PPUSH
50530: PPUSH
50531: PPUSH
50532: PPUSH
50533: PPUSH
50534: PPUSH
50535: PPUSH
50536: PPUSH
50537: PPUSH
50538: PPUSH
50539: PPUSH
50540: PPUSH
50541: PPUSH
// result := [ ] ;
50542: LD_ADDR_VAR 0 7
50546: PUSH
50547: EMPTY
50548: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50549: LD_VAR 0 1
50553: PPUSH
50554: CALL_OW 266
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: IN
50569: NOT
50570: IFFALSE 50574
// exit ;
50572: GO 52208
// if name then
50574: LD_VAR 0 3
50578: IFFALSE 50594
// SetBName ( base_dep , name ) ;
50580: LD_VAR 0 1
50584: PPUSH
50585: LD_VAR 0 3
50589: PPUSH
50590: CALL_OW 500
// base := GetBase ( base_dep ) ;
50594: LD_ADDR_VAR 0 15
50598: PUSH
50599: LD_VAR 0 1
50603: PPUSH
50604: CALL_OW 274
50608: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50609: LD_ADDR_VAR 0 16
50613: PUSH
50614: LD_VAR 0 1
50618: PPUSH
50619: CALL_OW 255
50623: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50624: LD_ADDR_VAR 0 17
50628: PUSH
50629: LD_VAR 0 1
50633: PPUSH
50634: CALL_OW 248
50638: ST_TO_ADDR
// if sources then
50639: LD_VAR 0 5
50643: IFFALSE 50690
// for i = 1 to 3 do
50645: LD_ADDR_VAR 0 8
50649: PUSH
50650: DOUBLE
50651: LD_INT 1
50653: DEC
50654: ST_TO_ADDR
50655: LD_INT 3
50657: PUSH
50658: FOR_TO
50659: IFFALSE 50688
// AddResourceType ( base , i , sources [ i ] ) ;
50661: LD_VAR 0 15
50665: PPUSH
50666: LD_VAR 0 8
50670: PPUSH
50671: LD_VAR 0 5
50675: PUSH
50676: LD_VAR 0 8
50680: ARRAY
50681: PPUSH
50682: CALL_OW 276
50686: GO 50658
50688: POP
50689: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50690: LD_ADDR_VAR 0 18
50694: PUSH
50695: LD_VAR 0 15
50699: PPUSH
50700: LD_VAR 0 2
50704: PPUSH
50705: LD_INT 1
50707: PPUSH
50708: CALL 49951 0 3
50712: ST_TO_ADDR
// InitHc ;
50713: CALL_OW 19
// InitUc ;
50717: CALL_OW 18
// uc_side := side ;
50721: LD_ADDR_OWVAR 20
50725: PUSH
50726: LD_VAR 0 16
50730: ST_TO_ADDR
// uc_nation := nation ;
50731: LD_ADDR_OWVAR 21
50735: PUSH
50736: LD_VAR 0 17
50740: ST_TO_ADDR
// if buildings then
50741: LD_VAR 0 18
50745: IFFALSE 52067
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50747: LD_ADDR_VAR 0 19
50751: PUSH
50752: LD_VAR 0 18
50756: PPUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 30
50762: PUSH
50763: LD_INT 29
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 30
50772: PUSH
50773: LD_INT 30
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: LIST
50784: PPUSH
50785: CALL_OW 72
50789: ST_TO_ADDR
// if tmp then
50790: LD_VAR 0 19
50794: IFFALSE 50842
// for i in tmp do
50796: LD_ADDR_VAR 0 8
50800: PUSH
50801: LD_VAR 0 19
50805: PUSH
50806: FOR_IN
50807: IFFALSE 50840
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50809: LD_VAR 0 8
50813: PPUSH
50814: CALL_OW 250
50818: PPUSH
50819: LD_VAR 0 8
50823: PPUSH
50824: CALL_OW 251
50828: PPUSH
50829: LD_VAR 0 16
50833: PPUSH
50834: CALL_OW 441
50838: GO 50806
50840: POP
50841: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50842: LD_VAR 0 18
50846: PPUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 30
50852: PUSH
50853: LD_INT 32
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 30
50862: PUSH
50863: LD_INT 33
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: LIST
50874: PPUSH
50875: CALL_OW 72
50879: IFFALSE 50967
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50881: LD_ADDR_VAR 0 8
50885: PUSH
50886: LD_VAR 0 18
50890: PPUSH
50891: LD_INT 2
50893: PUSH
50894: LD_INT 30
50896: PUSH
50897: LD_INT 32
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 30
50906: PUSH
50907: LD_INT 33
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: LIST
50918: PPUSH
50919: CALL_OW 72
50923: PUSH
50924: FOR_IN
50925: IFFALSE 50965
// begin if not GetBWeapon ( i ) then
50927: LD_VAR 0 8
50931: PPUSH
50932: CALL_OW 269
50936: NOT
50937: IFFALSE 50963
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50939: LD_VAR 0 8
50943: PPUSH
50944: LD_VAR 0 8
50948: PPUSH
50949: LD_VAR 0 2
50953: PPUSH
50954: CALL 52213 0 2
50958: PPUSH
50959: CALL_OW 431
// end ;
50963: GO 50924
50965: POP
50966: POP
// end ; for i = 1 to personel do
50967: LD_ADDR_VAR 0 8
50971: PUSH
50972: DOUBLE
50973: LD_INT 1
50975: DEC
50976: ST_TO_ADDR
50977: LD_VAR 0 6
50981: PUSH
50982: FOR_TO
50983: IFFALSE 52047
// begin if i > 4 then
50985: LD_VAR 0 8
50989: PUSH
50990: LD_INT 4
50992: GREATER
50993: IFFALSE 50997
// break ;
50995: GO 52047
// case i of 1 :
50997: LD_VAR 0 8
51001: PUSH
51002: LD_INT 1
51004: DOUBLE
51005: EQUAL
51006: IFTRUE 51010
51008: GO 51090
51010: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51011: LD_ADDR_VAR 0 12
51015: PUSH
51016: LD_VAR 0 18
51020: PPUSH
51021: LD_INT 22
51023: PUSH
51024: LD_VAR 0 16
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 58
51035: PUSH
51036: EMPTY
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: LD_INT 30
51044: PUSH
51045: LD_INT 32
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 30
51054: PUSH
51055: LD_INT 4
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 30
51064: PUSH
51065: LD_INT 5
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: PPUSH
51083: CALL_OW 72
51087: ST_TO_ADDR
51088: GO 51312
51090: LD_INT 2
51092: DOUBLE
51093: EQUAL
51094: IFTRUE 51098
51096: GO 51160
51098: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51099: LD_ADDR_VAR 0 12
51103: PUSH
51104: LD_VAR 0 18
51108: PPUSH
51109: LD_INT 22
51111: PUSH
51112: LD_VAR 0 16
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: PUSH
51124: LD_INT 30
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 30
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: LIST
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PPUSH
51153: CALL_OW 72
51157: ST_TO_ADDR
51158: GO 51312
51160: LD_INT 3
51162: DOUBLE
51163: EQUAL
51164: IFTRUE 51168
51166: GO 51230
51168: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51169: LD_ADDR_VAR 0 12
51173: PUSH
51174: LD_VAR 0 18
51178: PPUSH
51179: LD_INT 22
51181: PUSH
51182: LD_VAR 0 16
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: LD_INT 30
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 30
51206: PUSH
51207: LD_INT 3
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PPUSH
51223: CALL_OW 72
51227: ST_TO_ADDR
51228: GO 51312
51230: LD_INT 4
51232: DOUBLE
51233: EQUAL
51234: IFTRUE 51238
51236: GO 51311
51238: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51239: LD_ADDR_VAR 0 12
51243: PUSH
51244: LD_VAR 0 18
51248: PPUSH
51249: LD_INT 22
51251: PUSH
51252: LD_VAR 0 16
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: LD_INT 30
51266: PUSH
51267: LD_INT 6
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 30
51276: PUSH
51277: LD_INT 7
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 30
51286: PUSH
51287: LD_INT 8
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PPUSH
51304: CALL_OW 72
51308: ST_TO_ADDR
51309: GO 51312
51311: POP
// if i = 1 then
51312: LD_VAR 0 8
51316: PUSH
51317: LD_INT 1
51319: EQUAL
51320: IFFALSE 51431
// begin tmp := [ ] ;
51322: LD_ADDR_VAR 0 19
51326: PUSH
51327: EMPTY
51328: ST_TO_ADDR
// for j in f do
51329: LD_ADDR_VAR 0 9
51333: PUSH
51334: LD_VAR 0 12
51338: PUSH
51339: FOR_IN
51340: IFFALSE 51413
// if GetBType ( j ) = b_bunker then
51342: LD_VAR 0 9
51346: PPUSH
51347: CALL_OW 266
51351: PUSH
51352: LD_INT 32
51354: EQUAL
51355: IFFALSE 51382
// tmp := Insert ( tmp , 1 , j ) else
51357: LD_ADDR_VAR 0 19
51361: PUSH
51362: LD_VAR 0 19
51366: PPUSH
51367: LD_INT 1
51369: PPUSH
51370: LD_VAR 0 9
51374: PPUSH
51375: CALL_OW 2
51379: ST_TO_ADDR
51380: GO 51411
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51382: LD_ADDR_VAR 0 19
51386: PUSH
51387: LD_VAR 0 19
51391: PPUSH
51392: LD_VAR 0 19
51396: PUSH
51397: LD_INT 1
51399: PLUS
51400: PPUSH
51401: LD_VAR 0 9
51405: PPUSH
51406: CALL_OW 2
51410: ST_TO_ADDR
51411: GO 51339
51413: POP
51414: POP
// if tmp then
51415: LD_VAR 0 19
51419: IFFALSE 51431
// f := tmp ;
51421: LD_ADDR_VAR 0 12
51425: PUSH
51426: LD_VAR 0 19
51430: ST_TO_ADDR
// end ; x := personel [ i ] ;
51431: LD_ADDR_VAR 0 13
51435: PUSH
51436: LD_VAR 0 6
51440: PUSH
51441: LD_VAR 0 8
51445: ARRAY
51446: ST_TO_ADDR
// if x = - 1 then
51447: LD_VAR 0 13
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: EQUAL
51456: IFFALSE 51665
// begin for j in f do
51458: LD_ADDR_VAR 0 9
51462: PUSH
51463: LD_VAR 0 12
51467: PUSH
51468: FOR_IN
51469: IFFALSE 51661
// repeat InitHc ;
51471: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51475: LD_VAR 0 9
51479: PPUSH
51480: CALL_OW 266
51484: PUSH
51485: LD_INT 5
51487: EQUAL
51488: IFFALSE 51558
// begin if UnitsInside ( j ) < 3 then
51490: LD_VAR 0 9
51494: PPUSH
51495: CALL_OW 313
51499: PUSH
51500: LD_INT 3
51502: LESS
51503: IFFALSE 51539
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51505: LD_INT 0
51507: PPUSH
51508: LD_INT 5
51510: PUSH
51511: LD_INT 8
51513: PUSH
51514: LD_INT 9
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: PUSH
51522: LD_VAR 0 17
51526: ARRAY
51527: PPUSH
51528: LD_VAR 0 4
51532: PPUSH
51533: CALL_OW 380
51537: GO 51556
// PrepareHuman ( false , i , skill ) ;
51539: LD_INT 0
51541: PPUSH
51542: LD_VAR 0 8
51546: PPUSH
51547: LD_VAR 0 4
51551: PPUSH
51552: CALL_OW 380
// end else
51556: GO 51575
// PrepareHuman ( false , i , skill ) ;
51558: LD_INT 0
51560: PPUSH
51561: LD_VAR 0 8
51565: PPUSH
51566: LD_VAR 0 4
51570: PPUSH
51571: CALL_OW 380
// un := CreateHuman ;
51575: LD_ADDR_VAR 0 14
51579: PUSH
51580: CALL_OW 44
51584: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51585: LD_ADDR_VAR 0 7
51589: PUSH
51590: LD_VAR 0 7
51594: PPUSH
51595: LD_INT 1
51597: PPUSH
51598: LD_VAR 0 14
51602: PPUSH
51603: CALL_OW 2
51607: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51608: LD_VAR 0 14
51612: PPUSH
51613: LD_VAR 0 9
51617: PPUSH
51618: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51622: LD_VAR 0 9
51626: PPUSH
51627: CALL_OW 313
51631: PUSH
51632: LD_INT 6
51634: EQUAL
51635: PUSH
51636: LD_VAR 0 9
51640: PPUSH
51641: CALL_OW 266
51645: PUSH
51646: LD_INT 32
51648: PUSH
51649: LD_INT 31
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: IN
51656: OR
51657: IFFALSE 51471
51659: GO 51468
51661: POP
51662: POP
// end else
51663: GO 52045
// for j = 1 to x do
51665: LD_ADDR_VAR 0 9
51669: PUSH
51670: DOUBLE
51671: LD_INT 1
51673: DEC
51674: ST_TO_ADDR
51675: LD_VAR 0 13
51679: PUSH
51680: FOR_TO
51681: IFFALSE 52043
// begin InitHc ;
51683: CALL_OW 19
// if not f then
51687: LD_VAR 0 12
51691: NOT
51692: IFFALSE 51781
// begin PrepareHuman ( false , i , skill ) ;
51694: LD_INT 0
51696: PPUSH
51697: LD_VAR 0 8
51701: PPUSH
51702: LD_VAR 0 4
51706: PPUSH
51707: CALL_OW 380
// un := CreateHuman ;
51711: LD_ADDR_VAR 0 14
51715: PUSH
51716: CALL_OW 44
51720: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51721: LD_ADDR_VAR 0 7
51725: PUSH
51726: LD_VAR 0 7
51730: PPUSH
51731: LD_INT 1
51733: PPUSH
51734: LD_VAR 0 14
51738: PPUSH
51739: CALL_OW 2
51743: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51744: LD_VAR 0 14
51748: PPUSH
51749: LD_VAR 0 1
51753: PPUSH
51754: CALL_OW 250
51758: PPUSH
51759: LD_VAR 0 1
51763: PPUSH
51764: CALL_OW 251
51768: PPUSH
51769: LD_INT 10
51771: PPUSH
51772: LD_INT 0
51774: PPUSH
51775: CALL_OW 50
// continue ;
51779: GO 51680
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51781: LD_VAR 0 12
51785: PUSH
51786: LD_INT 1
51788: ARRAY
51789: PPUSH
51790: CALL_OW 313
51794: PUSH
51795: LD_VAR 0 12
51799: PUSH
51800: LD_INT 1
51802: ARRAY
51803: PPUSH
51804: CALL_OW 266
51808: PUSH
51809: LD_INT 32
51811: PUSH
51812: LD_INT 31
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: IN
51819: AND
51820: PUSH
51821: LD_VAR 0 12
51825: PUSH
51826: LD_INT 1
51828: ARRAY
51829: PPUSH
51830: CALL_OW 313
51834: PUSH
51835: LD_INT 6
51837: EQUAL
51838: OR
51839: IFFALSE 51859
// f := Delete ( f , 1 ) ;
51841: LD_ADDR_VAR 0 12
51845: PUSH
51846: LD_VAR 0 12
51850: PPUSH
51851: LD_INT 1
51853: PPUSH
51854: CALL_OW 3
51858: ST_TO_ADDR
// if not f then
51859: LD_VAR 0 12
51863: NOT
51864: IFFALSE 51882
// begin x := x + 2 ;
51866: LD_ADDR_VAR 0 13
51870: PUSH
51871: LD_VAR 0 13
51875: PUSH
51876: LD_INT 2
51878: PLUS
51879: ST_TO_ADDR
// continue ;
51880: GO 51680
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51882: LD_VAR 0 12
51886: PUSH
51887: LD_INT 1
51889: ARRAY
51890: PPUSH
51891: CALL_OW 266
51895: PUSH
51896: LD_INT 5
51898: EQUAL
51899: IFFALSE 51973
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51901: LD_VAR 0 12
51905: PUSH
51906: LD_INT 1
51908: ARRAY
51909: PPUSH
51910: CALL_OW 313
51914: PUSH
51915: LD_INT 3
51917: LESS
51918: IFFALSE 51954
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51920: LD_INT 0
51922: PPUSH
51923: LD_INT 5
51925: PUSH
51926: LD_INT 8
51928: PUSH
51929: LD_INT 9
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: PUSH
51937: LD_VAR 0 17
51941: ARRAY
51942: PPUSH
51943: LD_VAR 0 4
51947: PPUSH
51948: CALL_OW 380
51952: GO 51971
// PrepareHuman ( false , i , skill ) ;
51954: LD_INT 0
51956: PPUSH
51957: LD_VAR 0 8
51961: PPUSH
51962: LD_VAR 0 4
51966: PPUSH
51967: CALL_OW 380
// end else
51971: GO 51990
// PrepareHuman ( false , i , skill ) ;
51973: LD_INT 0
51975: PPUSH
51976: LD_VAR 0 8
51980: PPUSH
51981: LD_VAR 0 4
51985: PPUSH
51986: CALL_OW 380
// un := CreateHuman ;
51990: LD_ADDR_VAR 0 14
51994: PUSH
51995: CALL_OW 44
51999: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52000: LD_ADDR_VAR 0 7
52004: PUSH
52005: LD_VAR 0 7
52009: PPUSH
52010: LD_INT 1
52012: PPUSH
52013: LD_VAR 0 14
52017: PPUSH
52018: CALL_OW 2
52022: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52023: LD_VAR 0 14
52027: PPUSH
52028: LD_VAR 0 12
52032: PUSH
52033: LD_INT 1
52035: ARRAY
52036: PPUSH
52037: CALL_OW 52
// end ;
52041: GO 51680
52043: POP
52044: POP
// end ;
52045: GO 50982
52047: POP
52048: POP
// result := result ^ buildings ;
52049: LD_ADDR_VAR 0 7
52053: PUSH
52054: LD_VAR 0 7
52058: PUSH
52059: LD_VAR 0 18
52063: ADD
52064: ST_TO_ADDR
// end else
52065: GO 52208
// begin for i = 1 to personel do
52067: LD_ADDR_VAR 0 8
52071: PUSH
52072: DOUBLE
52073: LD_INT 1
52075: DEC
52076: ST_TO_ADDR
52077: LD_VAR 0 6
52081: PUSH
52082: FOR_TO
52083: IFFALSE 52206
// begin if i > 4 then
52085: LD_VAR 0 8
52089: PUSH
52090: LD_INT 4
52092: GREATER
52093: IFFALSE 52097
// break ;
52095: GO 52206
// x := personel [ i ] ;
52097: LD_ADDR_VAR 0 13
52101: PUSH
52102: LD_VAR 0 6
52106: PUSH
52107: LD_VAR 0 8
52111: ARRAY
52112: ST_TO_ADDR
// if x = - 1 then
52113: LD_VAR 0 13
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: EQUAL
52122: IFFALSE 52126
// continue ;
52124: GO 52082
// PrepareHuman ( false , i , skill ) ;
52126: LD_INT 0
52128: PPUSH
52129: LD_VAR 0 8
52133: PPUSH
52134: LD_VAR 0 4
52138: PPUSH
52139: CALL_OW 380
// un := CreateHuman ;
52143: LD_ADDR_VAR 0 14
52147: PUSH
52148: CALL_OW 44
52152: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52153: LD_VAR 0 14
52157: PPUSH
52158: LD_VAR 0 1
52162: PPUSH
52163: CALL_OW 250
52167: PPUSH
52168: LD_VAR 0 1
52172: PPUSH
52173: CALL_OW 251
52177: PPUSH
52178: LD_INT 10
52180: PPUSH
52181: LD_INT 0
52183: PPUSH
52184: CALL_OW 50
// result := result ^ un ;
52188: LD_ADDR_VAR 0 7
52192: PUSH
52193: LD_VAR 0 7
52197: PUSH
52198: LD_VAR 0 14
52202: ADD
52203: ST_TO_ADDR
// end ;
52204: GO 52082
52206: POP
52207: POP
// end ; end ;
52208: LD_VAR 0 7
52212: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52213: LD_INT 0
52215: PPUSH
52216: PPUSH
52217: PPUSH
52218: PPUSH
52219: PPUSH
52220: PPUSH
52221: PPUSH
52222: PPUSH
52223: PPUSH
52224: PPUSH
52225: PPUSH
52226: PPUSH
52227: PPUSH
52228: PPUSH
52229: PPUSH
52230: PPUSH
// result := false ;
52231: LD_ADDR_VAR 0 3
52235: PUSH
52236: LD_INT 0
52238: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52239: LD_VAR 0 1
52243: NOT
52244: PUSH
52245: LD_VAR 0 1
52249: PPUSH
52250: CALL_OW 266
52254: PUSH
52255: LD_INT 32
52257: PUSH
52258: LD_INT 33
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: IN
52265: NOT
52266: OR
52267: IFFALSE 52271
// exit ;
52269: GO 53380
// nat := GetNation ( tower ) ;
52271: LD_ADDR_VAR 0 12
52275: PUSH
52276: LD_VAR 0 1
52280: PPUSH
52281: CALL_OW 248
52285: ST_TO_ADDR
// side := GetSide ( tower ) ;
52286: LD_ADDR_VAR 0 16
52290: PUSH
52291: LD_VAR 0 1
52295: PPUSH
52296: CALL_OW 255
52300: ST_TO_ADDR
// x := GetX ( tower ) ;
52301: LD_ADDR_VAR 0 10
52305: PUSH
52306: LD_VAR 0 1
52310: PPUSH
52311: CALL_OW 250
52315: ST_TO_ADDR
// y := GetY ( tower ) ;
52316: LD_ADDR_VAR 0 11
52320: PUSH
52321: LD_VAR 0 1
52325: PPUSH
52326: CALL_OW 251
52330: ST_TO_ADDR
// if not x or not y then
52331: LD_VAR 0 10
52335: NOT
52336: PUSH
52337: LD_VAR 0 11
52341: NOT
52342: OR
52343: IFFALSE 52347
// exit ;
52345: GO 53380
// weapon := 0 ;
52347: LD_ADDR_VAR 0 18
52351: PUSH
52352: LD_INT 0
52354: ST_TO_ADDR
// fac_list := [ ] ;
52355: LD_ADDR_VAR 0 17
52359: PUSH
52360: EMPTY
52361: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52362: LD_ADDR_VAR 0 6
52366: PUSH
52367: LD_VAR 0 1
52371: PPUSH
52372: CALL_OW 274
52376: PPUSH
52377: LD_VAR 0 2
52381: PPUSH
52382: LD_INT 0
52384: PPUSH
52385: CALL 49951 0 3
52389: PPUSH
52390: LD_INT 30
52392: PUSH
52393: LD_INT 3
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PPUSH
52400: CALL_OW 72
52404: ST_TO_ADDR
// if not factories then
52405: LD_VAR 0 6
52409: NOT
52410: IFFALSE 52414
// exit ;
52412: GO 53380
// for i in factories do
52414: LD_ADDR_VAR 0 8
52418: PUSH
52419: LD_VAR 0 6
52423: PUSH
52424: FOR_IN
52425: IFFALSE 52450
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52427: LD_ADDR_VAR 0 17
52431: PUSH
52432: LD_VAR 0 17
52436: PUSH
52437: LD_VAR 0 8
52441: PPUSH
52442: CALL_OW 478
52446: UNION
52447: ST_TO_ADDR
52448: GO 52424
52450: POP
52451: POP
// if not fac_list then
52452: LD_VAR 0 17
52456: NOT
52457: IFFALSE 52461
// exit ;
52459: GO 53380
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52461: LD_ADDR_VAR 0 5
52465: PUSH
52466: LD_INT 4
52468: PUSH
52469: LD_INT 5
52471: PUSH
52472: LD_INT 9
52474: PUSH
52475: LD_INT 10
52477: PUSH
52478: LD_INT 6
52480: PUSH
52481: LD_INT 7
52483: PUSH
52484: LD_INT 11
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 27
52498: PUSH
52499: LD_INT 28
52501: PUSH
52502: LD_INT 26
52504: PUSH
52505: LD_INT 30
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 43
52516: PUSH
52517: LD_INT 44
52519: PUSH
52520: LD_INT 46
52522: PUSH
52523: LD_INT 45
52525: PUSH
52526: LD_INT 47
52528: PUSH
52529: LD_INT 49
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: LIST
52544: PUSH
52545: LD_VAR 0 12
52549: ARRAY
52550: ST_TO_ADDR
// list := list isect fac_list ;
52551: LD_ADDR_VAR 0 5
52555: PUSH
52556: LD_VAR 0 5
52560: PUSH
52561: LD_VAR 0 17
52565: ISECT
52566: ST_TO_ADDR
// if not list then
52567: LD_VAR 0 5
52571: NOT
52572: IFFALSE 52576
// exit ;
52574: GO 53380
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52576: LD_VAR 0 12
52580: PUSH
52581: LD_INT 3
52583: EQUAL
52584: PUSH
52585: LD_INT 49
52587: PUSH
52588: LD_VAR 0 5
52592: IN
52593: AND
52594: PUSH
52595: LD_INT 31
52597: PPUSH
52598: LD_VAR 0 16
52602: PPUSH
52603: CALL_OW 321
52607: PUSH
52608: LD_INT 2
52610: EQUAL
52611: AND
52612: IFFALSE 52672
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52614: LD_INT 22
52616: PUSH
52617: LD_VAR 0 16
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 35
52628: PUSH
52629: LD_INT 49
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 91
52638: PUSH
52639: LD_VAR 0 1
52643: PUSH
52644: LD_INT 10
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: LIST
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: LIST
52656: PPUSH
52657: CALL_OW 69
52661: NOT
52662: IFFALSE 52672
// weapon := ru_time_lapser ;
52664: LD_ADDR_VAR 0 18
52668: PUSH
52669: LD_INT 49
52671: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52672: LD_VAR 0 12
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: IN
52687: PUSH
52688: LD_INT 11
52690: PUSH
52691: LD_VAR 0 5
52695: IN
52696: PUSH
52697: LD_INT 30
52699: PUSH
52700: LD_VAR 0 5
52704: IN
52705: OR
52706: AND
52707: PUSH
52708: LD_INT 6
52710: PPUSH
52711: LD_VAR 0 16
52715: PPUSH
52716: CALL_OW 321
52720: PUSH
52721: LD_INT 2
52723: EQUAL
52724: AND
52725: IFFALSE 52890
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52727: LD_INT 22
52729: PUSH
52730: LD_VAR 0 16
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: LD_INT 35
52744: PUSH
52745: LD_INT 11
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 35
52754: PUSH
52755: LD_INT 30
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 91
52769: PUSH
52770: LD_VAR 0 1
52774: PUSH
52775: LD_INT 18
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: LIST
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: LIST
52787: PPUSH
52788: CALL_OW 69
52792: NOT
52793: PUSH
52794: LD_INT 22
52796: PUSH
52797: LD_VAR 0 16
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 30
52811: PUSH
52812: LD_INT 32
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 30
52821: PUSH
52822: LD_INT 33
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 91
52836: PUSH
52837: LD_VAR 0 1
52841: PUSH
52842: LD_INT 12
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: LIST
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: LIST
52854: PUSH
52855: EMPTY
52856: LIST
52857: PPUSH
52858: CALL_OW 69
52862: PUSH
52863: LD_INT 2
52865: GREATER
52866: AND
52867: IFFALSE 52890
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52869: LD_ADDR_VAR 0 18
52873: PUSH
52874: LD_INT 11
52876: PUSH
52877: LD_INT 30
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_VAR 0 12
52888: ARRAY
52889: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52890: LD_VAR 0 18
52894: NOT
52895: PUSH
52896: LD_INT 40
52898: PPUSH
52899: LD_VAR 0 16
52903: PPUSH
52904: CALL_OW 321
52908: PUSH
52909: LD_INT 2
52911: EQUAL
52912: AND
52913: PUSH
52914: LD_INT 7
52916: PUSH
52917: LD_VAR 0 5
52921: IN
52922: PUSH
52923: LD_INT 28
52925: PUSH
52926: LD_VAR 0 5
52930: IN
52931: OR
52932: PUSH
52933: LD_INT 45
52935: PUSH
52936: LD_VAR 0 5
52940: IN
52941: OR
52942: AND
52943: IFFALSE 53197
// begin hex := GetHexInfo ( x , y ) ;
52945: LD_ADDR_VAR 0 4
52949: PUSH
52950: LD_VAR 0 10
52954: PPUSH
52955: LD_VAR 0 11
52959: PPUSH
52960: CALL_OW 546
52964: ST_TO_ADDR
// if hex [ 1 ] then
52965: LD_VAR 0 4
52969: PUSH
52970: LD_INT 1
52972: ARRAY
52973: IFFALSE 52977
// exit ;
52975: GO 53380
// height := hex [ 2 ] ;
52977: LD_ADDR_VAR 0 15
52981: PUSH
52982: LD_VAR 0 4
52986: PUSH
52987: LD_INT 2
52989: ARRAY
52990: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52991: LD_ADDR_VAR 0 14
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: LD_INT 3
53004: PUSH
53005: LD_INT 5
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: ST_TO_ADDR
// for i in tmp do
53014: LD_ADDR_VAR 0 8
53018: PUSH
53019: LD_VAR 0 14
53023: PUSH
53024: FOR_IN
53025: IFFALSE 53195
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53027: LD_ADDR_VAR 0 9
53031: PUSH
53032: LD_VAR 0 10
53036: PPUSH
53037: LD_VAR 0 8
53041: PPUSH
53042: LD_INT 5
53044: PPUSH
53045: CALL_OW 272
53049: PUSH
53050: LD_VAR 0 11
53054: PPUSH
53055: LD_VAR 0 8
53059: PPUSH
53060: LD_INT 5
53062: PPUSH
53063: CALL_OW 273
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53072: LD_VAR 0 9
53076: PUSH
53077: LD_INT 1
53079: ARRAY
53080: PPUSH
53081: LD_VAR 0 9
53085: PUSH
53086: LD_INT 2
53088: ARRAY
53089: PPUSH
53090: CALL_OW 488
53094: IFFALSE 53193
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53096: LD_ADDR_VAR 0 4
53100: PUSH
53101: LD_VAR 0 9
53105: PUSH
53106: LD_INT 1
53108: ARRAY
53109: PPUSH
53110: LD_VAR 0 9
53114: PUSH
53115: LD_INT 2
53117: ARRAY
53118: PPUSH
53119: CALL_OW 546
53123: ST_TO_ADDR
// if hex [ 1 ] then
53124: LD_VAR 0 4
53128: PUSH
53129: LD_INT 1
53131: ARRAY
53132: IFFALSE 53136
// continue ;
53134: GO 53024
// h := hex [ 2 ] ;
53136: LD_ADDR_VAR 0 13
53140: PUSH
53141: LD_VAR 0 4
53145: PUSH
53146: LD_INT 2
53148: ARRAY
53149: ST_TO_ADDR
// if h + 7 < height then
53150: LD_VAR 0 13
53154: PUSH
53155: LD_INT 7
53157: PLUS
53158: PUSH
53159: LD_VAR 0 15
53163: LESS
53164: IFFALSE 53193
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53166: LD_ADDR_VAR 0 18
53170: PUSH
53171: LD_INT 7
53173: PUSH
53174: LD_INT 28
53176: PUSH
53177: LD_INT 45
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: PUSH
53185: LD_VAR 0 12
53189: ARRAY
53190: ST_TO_ADDR
// break ;
53191: GO 53195
// end ; end ; end ;
53193: GO 53024
53195: POP
53196: POP
// end ; if not weapon then
53197: LD_VAR 0 18
53201: NOT
53202: IFFALSE 53262
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53204: LD_ADDR_VAR 0 5
53208: PUSH
53209: LD_VAR 0 5
53213: PUSH
53214: LD_INT 11
53216: PUSH
53217: LD_INT 30
53219: PUSH
53220: LD_INT 49
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: LIST
53227: DIFF
53228: ST_TO_ADDR
// if not list then
53229: LD_VAR 0 5
53233: NOT
53234: IFFALSE 53238
// exit ;
53236: GO 53380
// weapon := list [ rand ( 1 , list ) ] ;
53238: LD_ADDR_VAR 0 18
53242: PUSH
53243: LD_VAR 0 5
53247: PUSH
53248: LD_INT 1
53250: PPUSH
53251: LD_VAR 0 5
53255: PPUSH
53256: CALL_OW 12
53260: ARRAY
53261: ST_TO_ADDR
// end ; if weapon then
53262: LD_VAR 0 18
53266: IFFALSE 53380
// begin tmp := CostOfWeapon ( weapon ) ;
53268: LD_ADDR_VAR 0 14
53272: PUSH
53273: LD_VAR 0 18
53277: PPUSH
53278: CALL_OW 451
53282: ST_TO_ADDR
// j := GetBase ( tower ) ;
53283: LD_ADDR_VAR 0 9
53287: PUSH
53288: LD_VAR 0 1
53292: PPUSH
53293: CALL_OW 274
53297: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53298: LD_VAR 0 9
53302: PPUSH
53303: LD_INT 1
53305: PPUSH
53306: CALL_OW 275
53310: PUSH
53311: LD_VAR 0 14
53315: PUSH
53316: LD_INT 1
53318: ARRAY
53319: GREATEREQUAL
53320: PUSH
53321: LD_VAR 0 9
53325: PPUSH
53326: LD_INT 2
53328: PPUSH
53329: CALL_OW 275
53333: PUSH
53334: LD_VAR 0 14
53338: PUSH
53339: LD_INT 2
53341: ARRAY
53342: GREATEREQUAL
53343: AND
53344: PUSH
53345: LD_VAR 0 9
53349: PPUSH
53350: LD_INT 3
53352: PPUSH
53353: CALL_OW 275
53357: PUSH
53358: LD_VAR 0 14
53362: PUSH
53363: LD_INT 3
53365: ARRAY
53366: GREATEREQUAL
53367: AND
53368: IFFALSE 53380
// result := weapon ;
53370: LD_ADDR_VAR 0 3
53374: PUSH
53375: LD_VAR 0 18
53379: ST_TO_ADDR
// end ; end ;
53380: LD_VAR 0 3
53384: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53385: LD_INT 0
53387: PPUSH
53388: PPUSH
// result := true ;
53389: LD_ADDR_VAR 0 3
53393: PUSH
53394: LD_INT 1
53396: ST_TO_ADDR
// if array1 = array2 then
53397: LD_VAR 0 1
53401: PUSH
53402: LD_VAR 0 2
53406: EQUAL
53407: IFFALSE 53467
// begin for i = 1 to array1 do
53409: LD_ADDR_VAR 0 4
53413: PUSH
53414: DOUBLE
53415: LD_INT 1
53417: DEC
53418: ST_TO_ADDR
53419: LD_VAR 0 1
53423: PUSH
53424: FOR_TO
53425: IFFALSE 53463
// if array1 [ i ] <> array2 [ i ] then
53427: LD_VAR 0 1
53431: PUSH
53432: LD_VAR 0 4
53436: ARRAY
53437: PUSH
53438: LD_VAR 0 2
53442: PUSH
53443: LD_VAR 0 4
53447: ARRAY
53448: NONEQUAL
53449: IFFALSE 53461
// begin result := false ;
53451: LD_ADDR_VAR 0 3
53455: PUSH
53456: LD_INT 0
53458: ST_TO_ADDR
// break ;
53459: GO 53463
// end ;
53461: GO 53424
53463: POP
53464: POP
// end else
53465: GO 53475
// result := false ;
53467: LD_ADDR_VAR 0 3
53471: PUSH
53472: LD_INT 0
53474: ST_TO_ADDR
// end ;
53475: LD_VAR 0 3
53479: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53480: LD_INT 0
53482: PPUSH
53483: PPUSH
// if not array1 or not array2 then
53484: LD_VAR 0 1
53488: NOT
53489: PUSH
53490: LD_VAR 0 2
53494: NOT
53495: OR
53496: IFFALSE 53500
// exit ;
53498: GO 53564
// result := true ;
53500: LD_ADDR_VAR 0 3
53504: PUSH
53505: LD_INT 1
53507: ST_TO_ADDR
// for i = 1 to array1 do
53508: LD_ADDR_VAR 0 4
53512: PUSH
53513: DOUBLE
53514: LD_INT 1
53516: DEC
53517: ST_TO_ADDR
53518: LD_VAR 0 1
53522: PUSH
53523: FOR_TO
53524: IFFALSE 53562
// if array1 [ i ] <> array2 [ i ] then
53526: LD_VAR 0 1
53530: PUSH
53531: LD_VAR 0 4
53535: ARRAY
53536: PUSH
53537: LD_VAR 0 2
53541: PUSH
53542: LD_VAR 0 4
53546: ARRAY
53547: NONEQUAL
53548: IFFALSE 53560
// begin result := false ;
53550: LD_ADDR_VAR 0 3
53554: PUSH
53555: LD_INT 0
53557: ST_TO_ADDR
// break ;
53558: GO 53562
// end ;
53560: GO 53523
53562: POP
53563: POP
// end ;
53564: LD_VAR 0 3
53568: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53569: LD_INT 0
53571: PPUSH
53572: PPUSH
53573: PPUSH
// pom := GetBase ( fac ) ;
53574: LD_ADDR_VAR 0 5
53578: PUSH
53579: LD_VAR 0 1
53583: PPUSH
53584: CALL_OW 274
53588: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53589: LD_ADDR_VAR 0 4
53593: PUSH
53594: LD_VAR 0 2
53598: PUSH
53599: LD_INT 1
53601: ARRAY
53602: PPUSH
53603: LD_VAR 0 2
53607: PUSH
53608: LD_INT 2
53610: ARRAY
53611: PPUSH
53612: LD_VAR 0 2
53616: PUSH
53617: LD_INT 3
53619: ARRAY
53620: PPUSH
53621: LD_VAR 0 2
53625: PUSH
53626: LD_INT 4
53628: ARRAY
53629: PPUSH
53630: CALL_OW 449
53634: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53635: LD_ADDR_VAR 0 3
53639: PUSH
53640: LD_VAR 0 5
53644: PPUSH
53645: LD_INT 1
53647: PPUSH
53648: CALL_OW 275
53652: PUSH
53653: LD_VAR 0 4
53657: PUSH
53658: LD_INT 1
53660: ARRAY
53661: GREATEREQUAL
53662: PUSH
53663: LD_VAR 0 5
53667: PPUSH
53668: LD_INT 2
53670: PPUSH
53671: CALL_OW 275
53675: PUSH
53676: LD_VAR 0 4
53680: PUSH
53681: LD_INT 2
53683: ARRAY
53684: GREATEREQUAL
53685: AND
53686: PUSH
53687: LD_VAR 0 5
53691: PPUSH
53692: LD_INT 3
53694: PPUSH
53695: CALL_OW 275
53699: PUSH
53700: LD_VAR 0 4
53704: PUSH
53705: LD_INT 3
53707: ARRAY
53708: GREATEREQUAL
53709: AND
53710: ST_TO_ADDR
// end ;
53711: LD_VAR 0 3
53715: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53716: LD_INT 0
53718: PPUSH
53719: PPUSH
53720: PPUSH
53721: PPUSH
// pom := GetBase ( building ) ;
53722: LD_ADDR_VAR 0 3
53726: PUSH
53727: LD_VAR 0 1
53731: PPUSH
53732: CALL_OW 274
53736: ST_TO_ADDR
// if not pom then
53737: LD_VAR 0 3
53741: NOT
53742: IFFALSE 53746
// exit ;
53744: GO 53916
// btype := GetBType ( building ) ;
53746: LD_ADDR_VAR 0 5
53750: PUSH
53751: LD_VAR 0 1
53755: PPUSH
53756: CALL_OW 266
53760: ST_TO_ADDR
// if btype = b_armoury then
53761: LD_VAR 0 5
53765: PUSH
53766: LD_INT 4
53768: EQUAL
53769: IFFALSE 53779
// btype := b_barracks ;
53771: LD_ADDR_VAR 0 5
53775: PUSH
53776: LD_INT 5
53778: ST_TO_ADDR
// if btype = b_depot then
53779: LD_VAR 0 5
53783: PUSH
53784: LD_INT 0
53786: EQUAL
53787: IFFALSE 53797
// btype := b_warehouse ;
53789: LD_ADDR_VAR 0 5
53793: PUSH
53794: LD_INT 1
53796: ST_TO_ADDR
// if btype = b_workshop then
53797: LD_VAR 0 5
53801: PUSH
53802: LD_INT 2
53804: EQUAL
53805: IFFALSE 53815
// btype := b_factory ;
53807: LD_ADDR_VAR 0 5
53811: PUSH
53812: LD_INT 3
53814: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53815: LD_ADDR_VAR 0 4
53819: PUSH
53820: LD_VAR 0 5
53824: PPUSH
53825: LD_VAR 0 1
53829: PPUSH
53830: CALL_OW 248
53834: PPUSH
53835: CALL_OW 450
53839: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53840: LD_ADDR_VAR 0 2
53844: PUSH
53845: LD_VAR 0 3
53849: PPUSH
53850: LD_INT 1
53852: PPUSH
53853: CALL_OW 275
53857: PUSH
53858: LD_VAR 0 4
53862: PUSH
53863: LD_INT 1
53865: ARRAY
53866: GREATEREQUAL
53867: PUSH
53868: LD_VAR 0 3
53872: PPUSH
53873: LD_INT 2
53875: PPUSH
53876: CALL_OW 275
53880: PUSH
53881: LD_VAR 0 4
53885: PUSH
53886: LD_INT 2
53888: ARRAY
53889: GREATEREQUAL
53890: AND
53891: PUSH
53892: LD_VAR 0 3
53896: PPUSH
53897: LD_INT 3
53899: PPUSH
53900: CALL_OW 275
53904: PUSH
53905: LD_VAR 0 4
53909: PUSH
53910: LD_INT 3
53912: ARRAY
53913: GREATEREQUAL
53914: AND
53915: ST_TO_ADDR
// end ;
53916: LD_VAR 0 2
53920: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53921: LD_INT 0
53923: PPUSH
53924: PPUSH
53925: PPUSH
// pom := GetBase ( building ) ;
53926: LD_ADDR_VAR 0 4
53930: PUSH
53931: LD_VAR 0 1
53935: PPUSH
53936: CALL_OW 274
53940: ST_TO_ADDR
// if not pom then
53941: LD_VAR 0 4
53945: NOT
53946: IFFALSE 53950
// exit ;
53948: GO 54051
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53950: LD_ADDR_VAR 0 5
53954: PUSH
53955: LD_VAR 0 2
53959: PPUSH
53960: LD_VAR 0 1
53964: PPUSH
53965: CALL_OW 248
53969: PPUSH
53970: CALL_OW 450
53974: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53975: LD_ADDR_VAR 0 3
53979: PUSH
53980: LD_VAR 0 4
53984: PPUSH
53985: LD_INT 1
53987: PPUSH
53988: CALL_OW 275
53992: PUSH
53993: LD_VAR 0 5
53997: PUSH
53998: LD_INT 1
54000: ARRAY
54001: GREATEREQUAL
54002: PUSH
54003: LD_VAR 0 4
54007: PPUSH
54008: LD_INT 2
54010: PPUSH
54011: CALL_OW 275
54015: PUSH
54016: LD_VAR 0 5
54020: PUSH
54021: LD_INT 2
54023: ARRAY
54024: GREATEREQUAL
54025: AND
54026: PUSH
54027: LD_VAR 0 4
54031: PPUSH
54032: LD_INT 3
54034: PPUSH
54035: CALL_OW 275
54039: PUSH
54040: LD_VAR 0 5
54044: PUSH
54045: LD_INT 3
54047: ARRAY
54048: GREATEREQUAL
54049: AND
54050: ST_TO_ADDR
// end ;
54051: LD_VAR 0 3
54055: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54056: LD_INT 0
54058: PPUSH
54059: PPUSH
54060: PPUSH
54061: PPUSH
54062: PPUSH
54063: PPUSH
54064: PPUSH
54065: PPUSH
54066: PPUSH
54067: PPUSH
54068: PPUSH
// result := false ;
54069: LD_ADDR_VAR 0 8
54073: PUSH
54074: LD_INT 0
54076: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54077: LD_VAR 0 5
54081: NOT
54082: PUSH
54083: LD_VAR 0 1
54087: NOT
54088: OR
54089: PUSH
54090: LD_VAR 0 2
54094: NOT
54095: OR
54096: PUSH
54097: LD_VAR 0 3
54101: NOT
54102: OR
54103: IFFALSE 54107
// exit ;
54105: GO 54921
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54107: LD_ADDR_VAR 0 14
54111: PUSH
54112: LD_VAR 0 1
54116: PPUSH
54117: LD_VAR 0 2
54121: PPUSH
54122: LD_VAR 0 3
54126: PPUSH
54127: LD_VAR 0 4
54131: PPUSH
54132: LD_VAR 0 5
54136: PUSH
54137: LD_INT 1
54139: ARRAY
54140: PPUSH
54141: CALL_OW 248
54145: PPUSH
54146: LD_INT 0
54148: PPUSH
54149: CALL 56174 0 6
54153: ST_TO_ADDR
// if not hexes then
54154: LD_VAR 0 14
54158: NOT
54159: IFFALSE 54163
// exit ;
54161: GO 54921
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54163: LD_ADDR_VAR 0 17
54167: PUSH
54168: LD_VAR 0 5
54172: PPUSH
54173: LD_INT 22
54175: PUSH
54176: LD_VAR 0 13
54180: PPUSH
54181: CALL_OW 255
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: LD_INT 30
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 30
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PPUSH
54222: CALL_OW 72
54226: ST_TO_ADDR
// for i = 1 to hexes do
54227: LD_ADDR_VAR 0 9
54231: PUSH
54232: DOUBLE
54233: LD_INT 1
54235: DEC
54236: ST_TO_ADDR
54237: LD_VAR 0 14
54241: PUSH
54242: FOR_TO
54243: IFFALSE 54919
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54245: LD_ADDR_VAR 0 13
54249: PUSH
54250: LD_VAR 0 14
54254: PUSH
54255: LD_VAR 0 9
54259: ARRAY
54260: PUSH
54261: LD_INT 1
54263: ARRAY
54264: PPUSH
54265: LD_VAR 0 14
54269: PUSH
54270: LD_VAR 0 9
54274: ARRAY
54275: PUSH
54276: LD_INT 2
54278: ARRAY
54279: PPUSH
54280: CALL_OW 428
54284: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54285: LD_VAR 0 14
54289: PUSH
54290: LD_VAR 0 9
54294: ARRAY
54295: PUSH
54296: LD_INT 1
54298: ARRAY
54299: PPUSH
54300: LD_VAR 0 14
54304: PUSH
54305: LD_VAR 0 9
54309: ARRAY
54310: PUSH
54311: LD_INT 2
54313: ARRAY
54314: PPUSH
54315: CALL_OW 351
54319: PUSH
54320: LD_VAR 0 14
54324: PUSH
54325: LD_VAR 0 9
54329: ARRAY
54330: PUSH
54331: LD_INT 1
54333: ARRAY
54334: PPUSH
54335: LD_VAR 0 14
54339: PUSH
54340: LD_VAR 0 9
54344: ARRAY
54345: PUSH
54346: LD_INT 2
54348: ARRAY
54349: PPUSH
54350: CALL_OW 488
54354: NOT
54355: OR
54356: PUSH
54357: LD_VAR 0 13
54361: PPUSH
54362: CALL_OW 247
54366: PUSH
54367: LD_INT 3
54369: EQUAL
54370: OR
54371: IFFALSE 54377
// exit ;
54373: POP
54374: POP
54375: GO 54921
// if not tmp then
54377: LD_VAR 0 13
54381: NOT
54382: IFFALSE 54386
// continue ;
54384: GO 54242
// result := true ;
54386: LD_ADDR_VAR 0 8
54390: PUSH
54391: LD_INT 1
54393: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54394: LD_VAR 0 6
54398: PUSH
54399: LD_VAR 0 13
54403: PPUSH
54404: CALL_OW 247
54408: PUSH
54409: LD_INT 2
54411: EQUAL
54412: AND
54413: PUSH
54414: LD_VAR 0 13
54418: PPUSH
54419: CALL_OW 263
54423: PUSH
54424: LD_INT 1
54426: EQUAL
54427: AND
54428: IFFALSE 54592
// begin if IsDrivenBy ( tmp ) then
54430: LD_VAR 0 13
54434: PPUSH
54435: CALL_OW 311
54439: IFFALSE 54443
// continue ;
54441: GO 54242
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54443: LD_VAR 0 6
54447: PPUSH
54448: LD_INT 3
54450: PUSH
54451: LD_INT 60
54453: PUSH
54454: EMPTY
54455: LIST
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 3
54463: PUSH
54464: LD_INT 55
54466: PUSH
54467: EMPTY
54468: LIST
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PPUSH
54478: CALL_OW 72
54482: IFFALSE 54590
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54484: LD_ADDR_VAR 0 18
54488: PUSH
54489: LD_VAR 0 6
54493: PPUSH
54494: LD_INT 3
54496: PUSH
54497: LD_INT 60
54499: PUSH
54500: EMPTY
54501: LIST
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 3
54509: PUSH
54510: LD_INT 55
54512: PUSH
54513: EMPTY
54514: LIST
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PPUSH
54524: CALL_OW 72
54528: PUSH
54529: LD_INT 1
54531: ARRAY
54532: ST_TO_ADDR
// if IsInUnit ( driver ) then
54533: LD_VAR 0 18
54537: PPUSH
54538: CALL_OW 310
54542: IFFALSE 54553
// ComExit ( driver ) ;
54544: LD_VAR 0 18
54548: PPUSH
54549: CALL 79975 0 1
// AddComEnterUnit ( driver , tmp ) ;
54553: LD_VAR 0 18
54557: PPUSH
54558: LD_VAR 0 13
54562: PPUSH
54563: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54567: LD_VAR 0 18
54571: PPUSH
54572: LD_VAR 0 7
54576: PPUSH
54577: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54581: LD_VAR 0 18
54585: PPUSH
54586: CALL_OW 181
// end ; continue ;
54590: GO 54242
// end ; if not cleaners or not tmp in cleaners then
54592: LD_VAR 0 6
54596: NOT
54597: PUSH
54598: LD_VAR 0 13
54602: PUSH
54603: LD_VAR 0 6
54607: IN
54608: NOT
54609: OR
54610: IFFALSE 54917
// begin if dep then
54612: LD_VAR 0 17
54616: IFFALSE 54752
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54618: LD_ADDR_VAR 0 16
54622: PUSH
54623: LD_VAR 0 17
54627: PUSH
54628: LD_INT 1
54630: ARRAY
54631: PPUSH
54632: CALL_OW 250
54636: PPUSH
54637: LD_VAR 0 17
54641: PUSH
54642: LD_INT 1
54644: ARRAY
54645: PPUSH
54646: CALL_OW 254
54650: PPUSH
54651: LD_INT 5
54653: PPUSH
54654: CALL_OW 272
54658: PUSH
54659: LD_VAR 0 17
54663: PUSH
54664: LD_INT 1
54666: ARRAY
54667: PPUSH
54668: CALL_OW 251
54672: PPUSH
54673: LD_VAR 0 17
54677: PUSH
54678: LD_INT 1
54680: ARRAY
54681: PPUSH
54682: CALL_OW 254
54686: PPUSH
54687: LD_INT 5
54689: PPUSH
54690: CALL_OW 273
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54699: LD_VAR 0 16
54703: PUSH
54704: LD_INT 1
54706: ARRAY
54707: PPUSH
54708: LD_VAR 0 16
54712: PUSH
54713: LD_INT 2
54715: ARRAY
54716: PPUSH
54717: CALL_OW 488
54721: IFFALSE 54752
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54723: LD_VAR 0 13
54727: PPUSH
54728: LD_VAR 0 16
54732: PUSH
54733: LD_INT 1
54735: ARRAY
54736: PPUSH
54737: LD_VAR 0 16
54741: PUSH
54742: LD_INT 2
54744: ARRAY
54745: PPUSH
54746: CALL_OW 111
// continue ;
54750: GO 54242
// end ; end ; r := GetDir ( tmp ) ;
54752: LD_ADDR_VAR 0 15
54756: PUSH
54757: LD_VAR 0 13
54761: PPUSH
54762: CALL_OW 254
54766: ST_TO_ADDR
// if r = 5 then
54767: LD_VAR 0 15
54771: PUSH
54772: LD_INT 5
54774: EQUAL
54775: IFFALSE 54785
// r := 0 ;
54777: LD_ADDR_VAR 0 15
54781: PUSH
54782: LD_INT 0
54784: ST_TO_ADDR
// for j = r to 5 do
54785: LD_ADDR_VAR 0 10
54789: PUSH
54790: DOUBLE
54791: LD_VAR 0 15
54795: DEC
54796: ST_TO_ADDR
54797: LD_INT 5
54799: PUSH
54800: FOR_TO
54801: IFFALSE 54915
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54803: LD_ADDR_VAR 0 11
54807: PUSH
54808: LD_VAR 0 13
54812: PPUSH
54813: CALL_OW 250
54817: PPUSH
54818: LD_VAR 0 10
54822: PPUSH
54823: LD_INT 2
54825: PPUSH
54826: CALL_OW 272
54830: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54831: LD_ADDR_VAR 0 12
54835: PUSH
54836: LD_VAR 0 13
54840: PPUSH
54841: CALL_OW 251
54845: PPUSH
54846: LD_VAR 0 10
54850: PPUSH
54851: LD_INT 2
54853: PPUSH
54854: CALL_OW 273
54858: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54859: LD_VAR 0 11
54863: PPUSH
54864: LD_VAR 0 12
54868: PPUSH
54869: CALL_OW 488
54873: PUSH
54874: LD_VAR 0 11
54878: PPUSH
54879: LD_VAR 0 12
54883: PPUSH
54884: CALL_OW 428
54888: NOT
54889: AND
54890: IFFALSE 54913
// begin ComMoveXY ( tmp , _x , _y ) ;
54892: LD_VAR 0 13
54896: PPUSH
54897: LD_VAR 0 11
54901: PPUSH
54902: LD_VAR 0 12
54906: PPUSH
54907: CALL_OW 111
// break ;
54911: GO 54915
// end ; end ;
54913: GO 54800
54915: POP
54916: POP
// end ; end ;
54917: GO 54242
54919: POP
54920: POP
// end ;
54921: LD_VAR 0 8
54925: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54926: LD_INT 0
54928: PPUSH
// result := true ;
54929: LD_ADDR_VAR 0 3
54933: PUSH
54934: LD_INT 1
54936: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54937: LD_VAR 0 2
54941: PUSH
54942: LD_INT 24
54944: DOUBLE
54945: EQUAL
54946: IFTRUE 54956
54948: LD_INT 33
54950: DOUBLE
54951: EQUAL
54952: IFTRUE 54956
54954: GO 54981
54956: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54957: LD_ADDR_VAR 0 3
54961: PUSH
54962: LD_INT 32
54964: PPUSH
54965: LD_VAR 0 1
54969: PPUSH
54970: CALL_OW 321
54974: PUSH
54975: LD_INT 2
54977: EQUAL
54978: ST_TO_ADDR
54979: GO 55297
54981: LD_INT 20
54983: DOUBLE
54984: EQUAL
54985: IFTRUE 54989
54987: GO 55014
54989: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54990: LD_ADDR_VAR 0 3
54994: PUSH
54995: LD_INT 6
54997: PPUSH
54998: LD_VAR 0 1
55002: PPUSH
55003: CALL_OW 321
55007: PUSH
55008: LD_INT 2
55010: EQUAL
55011: ST_TO_ADDR
55012: GO 55297
55014: LD_INT 22
55016: DOUBLE
55017: EQUAL
55018: IFTRUE 55028
55020: LD_INT 36
55022: DOUBLE
55023: EQUAL
55024: IFTRUE 55028
55026: GO 55053
55028: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55029: LD_ADDR_VAR 0 3
55033: PUSH
55034: LD_INT 15
55036: PPUSH
55037: LD_VAR 0 1
55041: PPUSH
55042: CALL_OW 321
55046: PUSH
55047: LD_INT 2
55049: EQUAL
55050: ST_TO_ADDR
55051: GO 55297
55053: LD_INT 30
55055: DOUBLE
55056: EQUAL
55057: IFTRUE 55061
55059: GO 55086
55061: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55062: LD_ADDR_VAR 0 3
55066: PUSH
55067: LD_INT 20
55069: PPUSH
55070: LD_VAR 0 1
55074: PPUSH
55075: CALL_OW 321
55079: PUSH
55080: LD_INT 2
55082: EQUAL
55083: ST_TO_ADDR
55084: GO 55297
55086: LD_INT 28
55088: DOUBLE
55089: EQUAL
55090: IFTRUE 55100
55092: LD_INT 21
55094: DOUBLE
55095: EQUAL
55096: IFTRUE 55100
55098: GO 55125
55100: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55101: LD_ADDR_VAR 0 3
55105: PUSH
55106: LD_INT 21
55108: PPUSH
55109: LD_VAR 0 1
55113: PPUSH
55114: CALL_OW 321
55118: PUSH
55119: LD_INT 2
55121: EQUAL
55122: ST_TO_ADDR
55123: GO 55297
55125: LD_INT 16
55127: DOUBLE
55128: EQUAL
55129: IFTRUE 55133
55131: GO 55158
55133: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55134: LD_ADDR_VAR 0 3
55138: PUSH
55139: LD_INT 84
55141: PPUSH
55142: LD_VAR 0 1
55146: PPUSH
55147: CALL_OW 321
55151: PUSH
55152: LD_INT 2
55154: EQUAL
55155: ST_TO_ADDR
55156: GO 55297
55158: LD_INT 19
55160: DOUBLE
55161: EQUAL
55162: IFTRUE 55172
55164: LD_INT 23
55166: DOUBLE
55167: EQUAL
55168: IFTRUE 55172
55170: GO 55197
55172: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55173: LD_ADDR_VAR 0 3
55177: PUSH
55178: LD_INT 83
55180: PPUSH
55181: LD_VAR 0 1
55185: PPUSH
55186: CALL_OW 321
55190: PUSH
55191: LD_INT 2
55193: EQUAL
55194: ST_TO_ADDR
55195: GO 55297
55197: LD_INT 17
55199: DOUBLE
55200: EQUAL
55201: IFTRUE 55205
55203: GO 55230
55205: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55206: LD_ADDR_VAR 0 3
55210: PUSH
55211: LD_INT 39
55213: PPUSH
55214: LD_VAR 0 1
55218: PPUSH
55219: CALL_OW 321
55223: PUSH
55224: LD_INT 2
55226: EQUAL
55227: ST_TO_ADDR
55228: GO 55297
55230: LD_INT 18
55232: DOUBLE
55233: EQUAL
55234: IFTRUE 55238
55236: GO 55263
55238: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55239: LD_ADDR_VAR 0 3
55243: PUSH
55244: LD_INT 40
55246: PPUSH
55247: LD_VAR 0 1
55251: PPUSH
55252: CALL_OW 321
55256: PUSH
55257: LD_INT 2
55259: EQUAL
55260: ST_TO_ADDR
55261: GO 55297
55263: LD_INT 27
55265: DOUBLE
55266: EQUAL
55267: IFTRUE 55271
55269: GO 55296
55271: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55272: LD_ADDR_VAR 0 3
55276: PUSH
55277: LD_INT 35
55279: PPUSH
55280: LD_VAR 0 1
55284: PPUSH
55285: CALL_OW 321
55289: PUSH
55290: LD_INT 2
55292: EQUAL
55293: ST_TO_ADDR
55294: GO 55297
55296: POP
// end ;
55297: LD_VAR 0 3
55301: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55302: LD_INT 0
55304: PPUSH
55305: PPUSH
55306: PPUSH
55307: PPUSH
55308: PPUSH
55309: PPUSH
55310: PPUSH
55311: PPUSH
55312: PPUSH
55313: PPUSH
55314: PPUSH
// result := false ;
55315: LD_ADDR_VAR 0 6
55319: PUSH
55320: LD_INT 0
55322: ST_TO_ADDR
// if btype = b_depot then
55323: LD_VAR 0 2
55327: PUSH
55328: LD_INT 0
55330: EQUAL
55331: IFFALSE 55343
// begin result := true ;
55333: LD_ADDR_VAR 0 6
55337: PUSH
55338: LD_INT 1
55340: ST_TO_ADDR
// exit ;
55341: GO 56169
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55343: LD_VAR 0 1
55347: NOT
55348: PUSH
55349: LD_VAR 0 1
55353: PPUSH
55354: CALL_OW 266
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: IN
55369: NOT
55370: OR
55371: PUSH
55372: LD_VAR 0 2
55376: NOT
55377: OR
55378: PUSH
55379: LD_VAR 0 5
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: LD_INT 3
55395: PUSH
55396: LD_INT 4
55398: PUSH
55399: LD_INT 5
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: IN
55410: NOT
55411: OR
55412: PUSH
55413: LD_VAR 0 3
55417: PPUSH
55418: LD_VAR 0 4
55422: PPUSH
55423: CALL_OW 488
55427: NOT
55428: OR
55429: IFFALSE 55433
// exit ;
55431: GO 56169
// side := GetSide ( depot ) ;
55433: LD_ADDR_VAR 0 9
55437: PUSH
55438: LD_VAR 0 1
55442: PPUSH
55443: CALL_OW 255
55447: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55448: LD_VAR 0 9
55452: PPUSH
55453: LD_VAR 0 2
55457: PPUSH
55458: CALL 54926 0 2
55462: NOT
55463: IFFALSE 55467
// exit ;
55465: GO 56169
// pom := GetBase ( depot ) ;
55467: LD_ADDR_VAR 0 10
55471: PUSH
55472: LD_VAR 0 1
55476: PPUSH
55477: CALL_OW 274
55481: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55482: LD_ADDR_VAR 0 11
55486: PUSH
55487: LD_VAR 0 2
55491: PPUSH
55492: LD_VAR 0 1
55496: PPUSH
55497: CALL_OW 248
55501: PPUSH
55502: CALL_OW 450
55506: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55507: LD_VAR 0 10
55511: PPUSH
55512: LD_INT 1
55514: PPUSH
55515: CALL_OW 275
55519: PUSH
55520: LD_VAR 0 11
55524: PUSH
55525: LD_INT 1
55527: ARRAY
55528: GREATEREQUAL
55529: PUSH
55530: LD_VAR 0 10
55534: PPUSH
55535: LD_INT 2
55537: PPUSH
55538: CALL_OW 275
55542: PUSH
55543: LD_VAR 0 11
55547: PUSH
55548: LD_INT 2
55550: ARRAY
55551: GREATEREQUAL
55552: AND
55553: PUSH
55554: LD_VAR 0 10
55558: PPUSH
55559: LD_INT 3
55561: PPUSH
55562: CALL_OW 275
55566: PUSH
55567: LD_VAR 0 11
55571: PUSH
55572: LD_INT 3
55574: ARRAY
55575: GREATEREQUAL
55576: AND
55577: NOT
55578: IFFALSE 55582
// exit ;
55580: GO 56169
// if GetBType ( depot ) = b_depot then
55582: LD_VAR 0 1
55586: PPUSH
55587: CALL_OW 266
55591: PUSH
55592: LD_INT 0
55594: EQUAL
55595: IFFALSE 55607
// dist := 28 else
55597: LD_ADDR_VAR 0 14
55601: PUSH
55602: LD_INT 28
55604: ST_TO_ADDR
55605: GO 55615
// dist := 36 ;
55607: LD_ADDR_VAR 0 14
55611: PUSH
55612: LD_INT 36
55614: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55615: LD_VAR 0 1
55619: PPUSH
55620: LD_VAR 0 3
55624: PPUSH
55625: LD_VAR 0 4
55629: PPUSH
55630: CALL_OW 297
55634: PUSH
55635: LD_VAR 0 14
55639: GREATER
55640: IFFALSE 55644
// exit ;
55642: GO 56169
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55644: LD_ADDR_VAR 0 12
55648: PUSH
55649: LD_VAR 0 2
55653: PPUSH
55654: LD_VAR 0 3
55658: PPUSH
55659: LD_VAR 0 4
55663: PPUSH
55664: LD_VAR 0 5
55668: PPUSH
55669: LD_VAR 0 1
55673: PPUSH
55674: CALL_OW 248
55678: PPUSH
55679: LD_INT 0
55681: PPUSH
55682: CALL 56174 0 6
55686: ST_TO_ADDR
// if not hexes then
55687: LD_VAR 0 12
55691: NOT
55692: IFFALSE 55696
// exit ;
55694: GO 56169
// hex := GetHexInfo ( x , y ) ;
55696: LD_ADDR_VAR 0 15
55700: PUSH
55701: LD_VAR 0 3
55705: PPUSH
55706: LD_VAR 0 4
55710: PPUSH
55711: CALL_OW 546
55715: ST_TO_ADDR
// if hex [ 1 ] then
55716: LD_VAR 0 15
55720: PUSH
55721: LD_INT 1
55723: ARRAY
55724: IFFALSE 55728
// exit ;
55726: GO 56169
// height := hex [ 2 ] ;
55728: LD_ADDR_VAR 0 13
55732: PUSH
55733: LD_VAR 0 15
55737: PUSH
55738: LD_INT 2
55740: ARRAY
55741: ST_TO_ADDR
// for i = 1 to hexes do
55742: LD_ADDR_VAR 0 7
55746: PUSH
55747: DOUBLE
55748: LD_INT 1
55750: DEC
55751: ST_TO_ADDR
55752: LD_VAR 0 12
55756: PUSH
55757: FOR_TO
55758: IFFALSE 56088
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55760: LD_VAR 0 12
55764: PUSH
55765: LD_VAR 0 7
55769: ARRAY
55770: PUSH
55771: LD_INT 1
55773: ARRAY
55774: PPUSH
55775: LD_VAR 0 12
55779: PUSH
55780: LD_VAR 0 7
55784: ARRAY
55785: PUSH
55786: LD_INT 2
55788: ARRAY
55789: PPUSH
55790: CALL_OW 488
55794: NOT
55795: PUSH
55796: LD_VAR 0 12
55800: PUSH
55801: LD_VAR 0 7
55805: ARRAY
55806: PUSH
55807: LD_INT 1
55809: ARRAY
55810: PPUSH
55811: LD_VAR 0 12
55815: PUSH
55816: LD_VAR 0 7
55820: ARRAY
55821: PUSH
55822: LD_INT 2
55824: ARRAY
55825: PPUSH
55826: CALL_OW 428
55830: PUSH
55831: LD_INT 0
55833: GREATER
55834: OR
55835: PUSH
55836: LD_VAR 0 12
55840: PUSH
55841: LD_VAR 0 7
55845: ARRAY
55846: PUSH
55847: LD_INT 1
55849: ARRAY
55850: PPUSH
55851: LD_VAR 0 12
55855: PUSH
55856: LD_VAR 0 7
55860: ARRAY
55861: PUSH
55862: LD_INT 2
55864: ARRAY
55865: PPUSH
55866: CALL_OW 351
55870: OR
55871: IFFALSE 55877
// exit ;
55873: POP
55874: POP
55875: GO 56169
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55877: LD_ADDR_VAR 0 8
55881: PUSH
55882: LD_VAR 0 12
55886: PUSH
55887: LD_VAR 0 7
55891: ARRAY
55892: PUSH
55893: LD_INT 1
55895: ARRAY
55896: PPUSH
55897: LD_VAR 0 12
55901: PUSH
55902: LD_VAR 0 7
55906: ARRAY
55907: PUSH
55908: LD_INT 2
55910: ARRAY
55911: PPUSH
55912: CALL_OW 546
55916: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55917: LD_VAR 0 8
55921: PUSH
55922: LD_INT 1
55924: ARRAY
55925: PUSH
55926: LD_VAR 0 8
55930: PUSH
55931: LD_INT 2
55933: ARRAY
55934: PUSH
55935: LD_VAR 0 13
55939: PUSH
55940: LD_INT 2
55942: PLUS
55943: GREATER
55944: OR
55945: PUSH
55946: LD_VAR 0 8
55950: PUSH
55951: LD_INT 2
55953: ARRAY
55954: PUSH
55955: LD_VAR 0 13
55959: PUSH
55960: LD_INT 2
55962: MINUS
55963: LESS
55964: OR
55965: PUSH
55966: LD_VAR 0 8
55970: PUSH
55971: LD_INT 3
55973: ARRAY
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 8
55980: PUSH
55981: LD_INT 9
55983: PUSH
55984: LD_INT 10
55986: PUSH
55987: LD_INT 11
55989: PUSH
55990: LD_INT 12
55992: PUSH
55993: LD_INT 13
55995: PUSH
55996: LD_INT 16
55998: PUSH
55999: LD_INT 17
56001: PUSH
56002: LD_INT 18
56004: PUSH
56005: LD_INT 19
56007: PUSH
56008: LD_INT 20
56010: PUSH
56011: LD_INT 21
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: IN
56029: NOT
56030: OR
56031: PUSH
56032: LD_VAR 0 8
56036: PUSH
56037: LD_INT 5
56039: ARRAY
56040: NOT
56041: OR
56042: PUSH
56043: LD_VAR 0 8
56047: PUSH
56048: LD_INT 6
56050: ARRAY
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 2
56057: PUSH
56058: LD_INT 7
56060: PUSH
56061: LD_INT 9
56063: PUSH
56064: LD_INT 10
56066: PUSH
56067: LD_INT 11
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: IN
56078: NOT
56079: OR
56080: IFFALSE 56086
// exit ;
56082: POP
56083: POP
56084: GO 56169
// end ;
56086: GO 55757
56088: POP
56089: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56090: LD_VAR 0 9
56094: PPUSH
56095: LD_VAR 0 3
56099: PPUSH
56100: LD_VAR 0 4
56104: PPUSH
56105: LD_INT 20
56107: PPUSH
56108: CALL 48092 0 4
56112: PUSH
56113: LD_INT 4
56115: ARRAY
56116: IFFALSE 56120
// exit ;
56118: GO 56169
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56120: LD_VAR 0 2
56124: PUSH
56125: LD_INT 29
56127: PUSH
56128: LD_INT 30
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: IN
56135: PUSH
56136: LD_VAR 0 3
56140: PPUSH
56141: LD_VAR 0 4
56145: PPUSH
56146: LD_VAR 0 9
56150: PPUSH
56151: CALL_OW 440
56155: NOT
56156: AND
56157: IFFALSE 56161
// exit ;
56159: GO 56169
// result := true ;
56161: LD_ADDR_VAR 0 6
56165: PUSH
56166: LD_INT 1
56168: ST_TO_ADDR
// end ;
56169: LD_VAR 0 6
56173: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56174: LD_INT 0
56176: PPUSH
56177: PPUSH
56178: PPUSH
56179: PPUSH
56180: PPUSH
56181: PPUSH
56182: PPUSH
56183: PPUSH
56184: PPUSH
56185: PPUSH
56186: PPUSH
56187: PPUSH
56188: PPUSH
56189: PPUSH
56190: PPUSH
56191: PPUSH
56192: PPUSH
56193: PPUSH
56194: PPUSH
56195: PPUSH
56196: PPUSH
56197: PPUSH
56198: PPUSH
56199: PPUSH
56200: PPUSH
56201: PPUSH
56202: PPUSH
56203: PPUSH
56204: PPUSH
56205: PPUSH
56206: PPUSH
56207: PPUSH
56208: PPUSH
56209: PPUSH
56210: PPUSH
56211: PPUSH
56212: PPUSH
56213: PPUSH
56214: PPUSH
56215: PPUSH
56216: PPUSH
56217: PPUSH
56218: PPUSH
56219: PPUSH
56220: PPUSH
56221: PPUSH
56222: PPUSH
56223: PPUSH
56224: PPUSH
56225: PPUSH
56226: PPUSH
56227: PPUSH
56228: PPUSH
56229: PPUSH
56230: PPUSH
56231: PPUSH
56232: PPUSH
56233: PPUSH
// result = [ ] ;
56234: LD_ADDR_VAR 0 7
56238: PUSH
56239: EMPTY
56240: ST_TO_ADDR
// temp_list = [ ] ;
56241: LD_ADDR_VAR 0 9
56245: PUSH
56246: EMPTY
56247: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56248: LD_VAR 0 4
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: LD_INT 4
56267: PUSH
56268: LD_INT 5
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: IN
56279: NOT
56280: PUSH
56281: LD_VAR 0 1
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: IN
56296: PUSH
56297: LD_VAR 0 5
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: IN
56316: NOT
56317: AND
56318: OR
56319: IFFALSE 56323
// exit ;
56321: GO 74714
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56323: LD_VAR 0 1
56327: PUSH
56328: LD_INT 6
56330: PUSH
56331: LD_INT 7
56333: PUSH
56334: LD_INT 8
56336: PUSH
56337: LD_INT 13
56339: PUSH
56340: LD_INT 12
56342: PUSH
56343: LD_INT 15
56345: PUSH
56346: LD_INT 11
56348: PUSH
56349: LD_INT 14
56351: PUSH
56352: LD_INT 10
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: IN
56366: IFFALSE 56376
// btype = b_lab ;
56368: LD_ADDR_VAR 0 1
56372: PUSH
56373: LD_INT 6
56375: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56376: LD_VAR 0 6
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: LIST
56394: IN
56395: NOT
56396: PUSH
56397: LD_VAR 0 1
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: LD_INT 3
56413: PUSH
56414: LD_INT 6
56416: PUSH
56417: LD_INT 36
56419: PUSH
56420: LD_INT 4
56422: PUSH
56423: LD_INT 5
56425: PUSH
56426: LD_INT 31
56428: PUSH
56429: LD_INT 32
56431: PUSH
56432: LD_INT 33
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: IN
56448: NOT
56449: PUSH
56450: LD_VAR 0 6
56454: PUSH
56455: LD_INT 1
56457: EQUAL
56458: AND
56459: OR
56460: PUSH
56461: LD_VAR 0 1
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 3
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: IN
56476: NOT
56477: PUSH
56478: LD_VAR 0 6
56482: PUSH
56483: LD_INT 2
56485: EQUAL
56486: AND
56487: OR
56488: IFFALSE 56498
// mode = 0 ;
56490: LD_ADDR_VAR 0 6
56494: PUSH
56495: LD_INT 0
56497: ST_TO_ADDR
// case mode of 0 :
56498: LD_VAR 0 6
56502: PUSH
56503: LD_INT 0
56505: DOUBLE
56506: EQUAL
56507: IFTRUE 56511
56509: GO 67964
56511: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56512: LD_ADDR_VAR 0 11
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56705: LD_ADDR_VAR 0 12
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 2
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56901: LD_ADDR_VAR 0 13
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 3
57072: NEG
57073: PUSH
57074: LD_INT 3
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57100: LD_ADDR_VAR 0 14
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 2
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 3
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 3
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57296: LD_ADDR_VAR 0 15
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 3
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57489: LD_ADDR_VAR 0 16
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 3
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 3
57646: PUSH
57647: LD_INT 3
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: PUSH
57657: LD_INT 3
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57682: LD_ADDR_VAR 0 17
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: LD_INT 2
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57912: LD_ADDR_VAR 0 18
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: NEG
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: NEG
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58142: LD_ADDR_VAR 0 19
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: LD_INT 2
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: LD_INT 2
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58372: LD_ADDR_VAR 0 20
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 1
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: LD_INT 2
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: LD_INT 2
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58602: LD_ADDR_VAR 0 21
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58832: LD_ADDR_VAR 0 22
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 2
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59062: LD_ADDR_VAR 0 23
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: LD_INT 1
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: LD_INT 2
59147: NEG
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: LD_INT 2
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 2
59249: NEG
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: LD_INT 3
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: LD_INT 3
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59342: LD_ADDR_VAR 0 24
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 2
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: LD_INT 2
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 3
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59618: LD_ADDR_VAR 0 25
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: LD_INT 2
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: LD_INT 2
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 2
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: NEG
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 3
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 3
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59892: LD_ADDR_VAR 0 26
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 2
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: LD_INT 2
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: NEG
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 2
60091: NEG
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60168: LD_ADDR_VAR 0 27
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 2
60344: NEG
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 2
60367: NEG
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 3
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 3
60413: NEG
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60448: LD_ADDR_VAR 0 28
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 2
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: LD_INT 2
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: NEG
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: LD_INT 3
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: LD_INT 3
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 3
60683: NEG
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 3
60695: NEG
60696: PUSH
60697: LD_INT 2
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60730: LD_ADDR_VAR 0 29
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: NEG
60812: PUSH
60813: LD_INT 2
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: LD_INT 2
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: LD_INT 2
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 2
60920: NEG
60921: PUSH
60922: LD_INT 3
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 2
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 3
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: LD_INT 3
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: LD_INT 2
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 3
60974: NEG
60975: PUSH
60976: LD_INT 2
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61009: LD_ADDR_VAR 0 30
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 2
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 2
61175: NEG
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: LD_INT 3
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: LD_INT 2
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 3
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 2
61231: PUSH
61232: LD_INT 3
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61287: LD_ADDR_VAR 0 31
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: LD_INT 1
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: LD_INT 2
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 2
61452: NEG
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: NEG
61465: PUSH
61466: LD_INT 2
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 2
61476: NEG
61477: PUSH
61478: LD_INT 3
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: LD_INT 3
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 3
61530: NEG
61531: PUSH
61532: LD_INT 2
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61565: LD_ADDR_VAR 0 32
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: LD_INT 2
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 2
61690: PUSH
61691: LD_INT 2
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: LD_INT 2
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 2
61742: NEG
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: NEG
61755: PUSH
61756: LD_INT 3
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: LD_INT 2
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 3
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: LD_INT 3
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 2
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 3
61808: NEG
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61843: LD_ADDR_VAR 0 33
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: LD_INT 1
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 1
61912: NEG
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 1
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 2
61998: NEG
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PUSH
62011: LD_INT 1
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: NEG
62022: PUSH
62023: LD_INT 2
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: LD_INT 3
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 3
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: LD_INT 3
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 3
62087: NEG
62088: PUSH
62089: LD_INT 2
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62122: LD_ADDR_VAR 0 34
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: LD_INT 1
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: NEG
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 2
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: LD_INT 2
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 2
62278: NEG
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: LD_INT 2
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: LD_INT 3
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: LD_INT 2
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 3
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: LD_INT 3
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 3
62367: NEG
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62402: LD_ADDR_VAR 0 35
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 2
62493: NEG
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62514: LD_ADDR_VAR 0 36
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: LD_INT 2
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: LD_INT 2
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62626: LD_ADDR_VAR 0 37
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: LD_INT 1
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: LD_INT 0
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 1
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62738: LD_ADDR_VAR 0 38
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 1
62796: NEG
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 2
62829: NEG
62830: PUSH
62831: LD_INT 1
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62850: LD_ADDR_VAR 0 39
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 2
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62962: LD_ADDR_VAR 0 40
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: LD_INT 1
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: LD_INT 1
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63074: LD_ADDR_VAR 0 41
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 1
63112: PUSH
63113: LD_INT 1
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: LD_INT 1
63147: NEG
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: LD_INT 2
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: LD_INT 1
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 2
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: LD_INT 2
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: NEG
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 2
63240: NEG
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 2
63252: NEG
63253: PUSH
63254: LD_INT 2
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 2
63264: NEG
63265: PUSH
63266: LD_INT 3
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 2
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 3
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 3
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 3
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 3
63317: PUSH
63318: LD_INT 3
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 2
63327: PUSH
63328: LD_INT 3
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 2
63337: NEG
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 3
63348: NEG
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 3
63359: NEG
63360: PUSH
63361: LD_INT 1
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 3
63371: NEG
63372: PUSH
63373: LD_INT 2
63375: NEG
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 3
63383: NEG
63384: PUSH
63385: LD_INT 3
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63424: LD_ADDR_VAR 0 42
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: LD_INT 1
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: LD_INT 1
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: LD_INT 2
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 1
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 2
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: LD_INT 2
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 2
63590: NEG
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 2
63602: NEG
63603: PUSH
63604: LD_INT 2
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 2
63614: NEG
63615: PUSH
63616: LD_INT 3
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: LD_INT 3
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: LD_INT 3
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: LD_INT 2
63652: NEG
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 3
63660: PUSH
63661: LD_INT 2
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 3
63670: PUSH
63671: LD_INT 3
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: LD_INT 3
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: LD_INT 3
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: LD_INT 3
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 1
63710: NEG
63711: PUSH
63712: LD_INT 2
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 3
63721: NEG
63722: PUSH
63723: LD_INT 2
63725: NEG
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 3
63733: NEG
63734: PUSH
63735: LD_INT 3
63737: NEG
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63774: LD_ADDR_VAR 0 43
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 0
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: LD_INT 1
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: LD_INT 2
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: LD_INT 2
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: LD_INT 1
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 2
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 2
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: LD_INT 2
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: LD_INT 2
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: LD_INT 1
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 2
63940: NEG
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 2
63951: NEG
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: LD_INT 3
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: LD_INT 3
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: LD_INT 2
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 2
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 3
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 3
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: LD_INT 3
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: LD_INT 3
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: LD_INT 2
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 2
64059: NEG
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 3
64070: NEG
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 3
64081: NEG
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64122: LD_ADDR_VAR 0 44
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: LD_INT 1
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: LD_INT 1
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 1
64180: NEG
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: LD_INT 2
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: LD_INT 1
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 2
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 2
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 2
64246: PUSH
64247: LD_INT 2
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: LD_INT 2
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 1
64266: NEG
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 2
64277: NEG
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 2
64288: NEG
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 2
64300: NEG
64301: PUSH
64302: LD_INT 2
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 2
64312: NEG
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 3
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 3
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 3
64355: PUSH
64356: LD_INT 2
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 3
64365: PUSH
64366: LD_INT 3
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 2
64375: PUSH
64376: LD_INT 3
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 2
64385: NEG
64386: PUSH
64387: LD_INT 1
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 3
64396: NEG
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 3
64407: NEG
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 3
64419: NEG
64420: PUSH
64421: LD_INT 2
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 3
64431: NEG
64432: PUSH
64433: LD_INT 3
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64472: LD_ADDR_VAR 0 45
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: LD_INT 1
64492: NEG
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 1
64530: NEG
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: LD_INT 1
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: LD_INT 2
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 2
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 2
64597: PUSH
64598: LD_INT 2
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 1
64607: PUSH
64608: LD_INT 2
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: LD_INT 2
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 2
64638: NEG
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 2
64650: NEG
64651: PUSH
64652: LD_INT 2
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 2
64662: NEG
64663: PUSH
64664: LD_INT 3
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: LD_INT 3
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: LD_INT 3
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 1
64697: PUSH
64698: LD_INT 2
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 3
64708: PUSH
64709: LD_INT 2
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 3
64718: PUSH
64719: LD_INT 3
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 2
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 1
64738: PUSH
64739: LD_INT 3
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: LD_INT 3
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: NEG
64759: PUSH
64760: LD_INT 2
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 3
64769: NEG
64770: PUSH
64771: LD_INT 2
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 3
64781: NEG
64782: PUSH
64783: LD_INT 3
64785: NEG
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64822: LD_ADDR_VAR 0 46
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 0
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: LD_INT 0
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 1
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 1
64880: NEG
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 1
64903: NEG
64904: PUSH
64905: LD_INT 2
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 0
64915: PUSH
64916: LD_INT 2
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 1
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 2
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: LD_INT 1
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: LD_INT 2
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: LD_INT 2
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 2
64988: NEG
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 2
64999: NEG
65000: PUSH
65001: LD_INT 1
65003: NEG
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 1
65011: NEG
65012: PUSH
65013: LD_INT 3
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: LD_INT 3
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: LD_INT 2
65037: NEG
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 2
65045: PUSH
65046: LD_INT 1
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 3
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 3
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: LD_INT 3
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: LD_INT 3
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: LD_INT 2
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 2
65107: NEG
65108: PUSH
65109: LD_INT 1
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 3
65118: NEG
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 3
65129: NEG
65130: PUSH
65131: LD_INT 1
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65170: LD_ADDR_VAR 0 47
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: LD_INT 1
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: LD_INT 1
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 1
65228: NEG
65229: PUSH
65230: LD_INT 0
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 1
65239: NEG
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: LD_INT 2
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: LD_INT 2
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 2
65285: NEG
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 2
65297: NEG
65298: PUSH
65299: LD_INT 2
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65321: LD_ADDR_VAR 0 48
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 1
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 0
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 1
65379: NEG
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: LD_INT 1
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: LD_INT 2
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 0
65414: PUSH
65415: LD_INT 2
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: LD_INT 1
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 2
65436: PUSH
65437: LD_INT 0
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 2
65446: PUSH
65447: LD_INT 1
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65468: LD_ADDR_VAR 0 49
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: LD_INT 1
65488: NEG
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: LD_INT 1
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 2
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 2
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 2
65580: PUSH
65581: LD_INT 2
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 1
65590: PUSH
65591: LD_INT 2
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65612: LD_ADDR_VAR 0 50
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: LD_INT 0
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 0
65629: PUSH
65630: LD_INT 1
65632: NEG
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 1
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: LD_INT 1
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 1
65670: NEG
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 1
65681: NEG
65682: PUSH
65683: LD_INT 1
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 2
65693: PUSH
65694: LD_INT 1
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 2
65703: PUSH
65704: LD_INT 2
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 1
65713: PUSH
65714: LD_INT 2
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 0
65723: PUSH
65724: LD_INT 2
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 1
65733: NEG
65734: PUSH
65735: LD_INT 1
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65756: LD_ADDR_VAR 0 51
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: LD_INT 0
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 1
65784: PUSH
65785: LD_INT 0
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: PUSH
65795: LD_INT 1
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 0
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 1
65814: NEG
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: PUSH
65827: LD_INT 1
65829: NEG
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: LD_INT 2
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: LD_INT 2
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 2
65868: NEG
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65903: LD_ADDR_VAR 0 52
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: LD_INT 1
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: LD_INT 0
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: LD_INT 1
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: LD_INT 1
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 1
65961: NEG
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 1
65972: NEG
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 1
65984: NEG
65985: PUSH
65986: LD_INT 2
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 2
66007: NEG
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 2
66018: NEG
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 2
66030: NEG
66031: PUSH
66032: LD_INT 2
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66054: LD_ADDR_VAR 0 53
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: LD_INT 1
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 1
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 1
66092: PUSH
66093: LD_INT 1
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: LD_INT 1
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 1
66112: NEG
66113: PUSH
66114: LD_INT 0
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 1
66123: NEG
66124: PUSH
66125: LD_INT 1
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: LD_INT 2
66139: NEG
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: LD_INT 2
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 1
66158: PUSH
66159: LD_INT 1
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 2
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 2
66179: PUSH
66180: LD_INT 1
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 2
66189: PUSH
66190: LD_INT 2
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 1
66199: PUSH
66200: LD_INT 2
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: LD_INT 2
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: LD_INT 1
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 2
66230: NEG
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 2
66241: NEG
66242: PUSH
66243: LD_INT 1
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 2
66253: NEG
66254: PUSH
66255: LD_INT 2
66257: NEG
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66284: LD_ADDR_VAR 0 54
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 0
66301: PUSH
66302: LD_INT 1
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 1
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 1
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 0
66332: PUSH
66333: LD_INT 1
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 1
66342: NEG
66343: PUSH
66344: LD_INT 0
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: LD_INT 1
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 1
66365: NEG
66366: PUSH
66367: LD_INT 2
66369: NEG
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: LD_INT 2
66380: NEG
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 1
66388: PUSH
66389: LD_INT 1
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 2
66409: PUSH
66410: LD_INT 1
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 2
66419: PUSH
66420: LD_INT 2
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: LD_INT 2
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 0
66439: PUSH
66440: LD_INT 2
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 1
66449: NEG
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 2
66460: NEG
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 2
66471: NEG
66472: PUSH
66473: LD_INT 1
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 2
66483: NEG
66484: PUSH
66485: LD_INT 2
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66514: LD_ADDR_VAR 0 55
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: LD_INT 0
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 0
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 1
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 1
66552: PUSH
66553: LD_INT 1
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 0
66562: PUSH
66563: LD_INT 1
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: LD_INT 1
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 1
66595: NEG
66596: PUSH
66597: LD_INT 2
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: PUSH
66619: LD_INT 1
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 2
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 2
66639: PUSH
66640: LD_INT 1
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 2
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 1
66659: PUSH
66660: LD_INT 2
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: LD_INT 2
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 1
66679: NEG
66680: PUSH
66681: LD_INT 1
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 2
66690: NEG
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 2
66701: NEG
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 2
66713: NEG
66714: PUSH
66715: LD_INT 2
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66744: LD_ADDR_VAR 0 56
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: LD_INT 0
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 0
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 1
66772: PUSH
66773: LD_INT 0
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 1
66782: PUSH
66783: LD_INT 1
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: LD_INT 1
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 1
66802: NEG
66803: PUSH
66804: LD_INT 0
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 1
66813: NEG
66814: PUSH
66815: LD_INT 1
66817: NEG
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 1
66825: NEG
66826: PUSH
66827: LD_INT 2
66829: NEG
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: LD_INT 2
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: LD_INT 1
66851: NEG
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 2
66859: PUSH
66860: LD_INT 0
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 2
66869: PUSH
66870: LD_INT 1
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 2
66879: PUSH
66880: LD_INT 2
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: LD_INT 2
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 0
66899: PUSH
66900: LD_INT 2
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 1
66909: NEG
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 2
66920: NEG
66921: PUSH
66922: LD_INT 0
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 2
66931: NEG
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 2
66943: NEG
66944: PUSH
66945: LD_INT 2
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66974: LD_ADDR_VAR 0 57
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: LD_INT 1
66994: NEG
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: LD_INT 0
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 1
67012: PUSH
67013: LD_INT 1
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 0
67022: PUSH
67023: LD_INT 1
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 1
67032: NEG
67033: PUSH
67034: LD_INT 0
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 1
67043: NEG
67044: PUSH
67045: LD_INT 1
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 1
67055: NEG
67056: PUSH
67057: LD_INT 2
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: LD_INT 2
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: LD_INT 1
67081: NEG
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 2
67089: PUSH
67090: LD_INT 0
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 2
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 2
67109: PUSH
67110: LD_INT 2
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 1
67119: PUSH
67120: LD_INT 2
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 0
67129: PUSH
67130: LD_INT 2
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 2
67150: NEG
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 2
67161: NEG
67162: PUSH
67163: LD_INT 1
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 2
67173: NEG
67174: PUSH
67175: LD_INT 2
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67204: LD_ADDR_VAR 0 58
67208: PUSH
67209: LD_INT 0
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 0
67221: PUSH
67222: LD_INT 1
67224: NEG
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 1
67232: PUSH
67233: LD_INT 0
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 1
67242: PUSH
67243: LD_INT 1
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 0
67252: PUSH
67253: LD_INT 1
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 1
67262: NEG
67263: PUSH
67264: LD_INT 0
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: LD_INT 1
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 1
67285: NEG
67286: PUSH
67287: LD_INT 2
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: LD_INT 2
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 1
67308: PUSH
67309: LD_INT 1
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 2
67319: PUSH
67320: LD_INT 0
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 2
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 2
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 1
67349: PUSH
67350: LD_INT 2
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: LD_INT 2
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 1
67369: NEG
67370: PUSH
67371: LD_INT 1
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 2
67380: NEG
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 2
67391: NEG
67392: PUSH
67393: LD_INT 1
67395: NEG
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 2
67403: NEG
67404: PUSH
67405: LD_INT 2
67407: NEG
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67434: LD_ADDR_VAR 0 59
67438: PUSH
67439: LD_INT 0
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 0
67451: PUSH
67452: LD_INT 1
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 1
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 1
67472: PUSH
67473: LD_INT 1
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 0
67482: PUSH
67483: LD_INT 1
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 1
67492: NEG
67493: PUSH
67494: LD_INT 0
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: LD_INT 1
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67522: LD_ADDR_VAR 0 60
67526: PUSH
67527: LD_INT 0
67529: PUSH
67530: LD_INT 0
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 0
67539: PUSH
67540: LD_INT 1
67542: NEG
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 1
67550: PUSH
67551: LD_INT 0
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 1
67560: PUSH
67561: LD_INT 1
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: LD_INT 1
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 1
67580: NEG
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 1
67591: NEG
67592: PUSH
67593: LD_INT 1
67595: NEG
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67610: LD_ADDR_VAR 0 61
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 0
67627: PUSH
67628: LD_INT 1
67630: NEG
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 1
67638: PUSH
67639: LD_INT 0
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 1
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: LD_INT 1
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: NEG
67680: PUSH
67681: LD_INT 1
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67698: LD_ADDR_VAR 0 62
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: LD_INT 0
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: LD_INT 1
67718: NEG
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 1
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: PUSH
67737: LD_INT 1
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 0
67746: PUSH
67747: LD_INT 1
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 1
67756: NEG
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 1
67767: NEG
67768: PUSH
67769: LD_INT 1
67771: NEG
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67786: LD_ADDR_VAR 0 63
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: LD_INT 1
67806: NEG
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 1
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 1
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 0
67834: PUSH
67835: LD_INT 1
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 1
67844: NEG
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 1
67855: NEG
67856: PUSH
67857: LD_INT 1
67859: NEG
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67874: LD_ADDR_VAR 0 64
67878: PUSH
67879: LD_INT 0
67881: PUSH
67882: LD_INT 0
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 0
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 1
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 1
67912: PUSH
67913: LD_INT 1
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: LD_INT 1
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 1
67932: NEG
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 1
67943: NEG
67944: PUSH
67945: LD_INT 1
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: ST_TO_ADDR
// end ; 1 :
67962: GO 73859
67964: LD_INT 1
67966: DOUBLE
67967: EQUAL
67968: IFTRUE 67972
67970: GO 70595
67972: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67973: LD_ADDR_VAR 0 11
67977: PUSH
67978: LD_INT 1
67980: NEG
67981: PUSH
67982: LD_INT 3
67984: NEG
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: LD_INT 3
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 1
68003: PUSH
68004: LD_INT 2
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: LIST
68016: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68017: LD_ADDR_VAR 0 12
68021: PUSH
68022: LD_INT 2
68024: PUSH
68025: LD_INT 1
68027: NEG
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 3
68035: PUSH
68036: LD_INT 0
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 3
68045: PUSH
68046: LD_INT 1
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: LIST
68057: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68058: LD_ADDR_VAR 0 13
68062: PUSH
68063: LD_INT 3
68065: PUSH
68066: LD_INT 2
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 3
68075: PUSH
68076: LD_INT 3
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 2
68085: PUSH
68086: LD_INT 3
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: LIST
68097: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68098: LD_ADDR_VAR 0 14
68102: PUSH
68103: LD_INT 1
68105: PUSH
68106: LD_INT 3
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 0
68115: PUSH
68116: LD_INT 3
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 1
68125: NEG
68126: PUSH
68127: LD_INT 2
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: LIST
68138: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68139: LD_ADDR_VAR 0 15
68143: PUSH
68144: LD_INT 2
68146: NEG
68147: PUSH
68148: LD_INT 1
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 3
68157: NEG
68158: PUSH
68159: LD_INT 0
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 3
68168: NEG
68169: PUSH
68170: LD_INT 1
68172: NEG
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: LIST
68182: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68183: LD_ADDR_VAR 0 16
68187: PUSH
68188: LD_INT 2
68190: NEG
68191: PUSH
68192: LD_INT 3
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 3
68202: NEG
68203: PUSH
68204: LD_INT 2
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 3
68214: NEG
68215: PUSH
68216: LD_INT 3
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: LIST
68228: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68229: LD_ADDR_VAR 0 17
68233: PUSH
68234: LD_INT 1
68236: NEG
68237: PUSH
68238: LD_INT 3
68240: NEG
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 0
68248: PUSH
68249: LD_INT 3
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 1
68259: PUSH
68260: LD_INT 2
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: LIST
68272: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68273: LD_ADDR_VAR 0 18
68277: PUSH
68278: LD_INT 2
68280: PUSH
68281: LD_INT 1
68283: NEG
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 3
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 3
68301: PUSH
68302: LD_INT 1
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: LIST
68313: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68314: LD_ADDR_VAR 0 19
68318: PUSH
68319: LD_INT 3
68321: PUSH
68322: LD_INT 2
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 3
68331: PUSH
68332: LD_INT 3
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 2
68341: PUSH
68342: LD_INT 3
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: LIST
68353: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68354: LD_ADDR_VAR 0 20
68358: PUSH
68359: LD_INT 1
68361: PUSH
68362: LD_INT 3
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 0
68371: PUSH
68372: LD_INT 3
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 1
68381: NEG
68382: PUSH
68383: LD_INT 2
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: LIST
68394: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68395: LD_ADDR_VAR 0 21
68399: PUSH
68400: LD_INT 2
68402: NEG
68403: PUSH
68404: LD_INT 1
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 3
68413: NEG
68414: PUSH
68415: LD_INT 0
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 3
68424: NEG
68425: PUSH
68426: LD_INT 1
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: LIST
68438: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68439: LD_ADDR_VAR 0 22
68443: PUSH
68444: LD_INT 2
68446: NEG
68447: PUSH
68448: LD_INT 3
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 3
68458: NEG
68459: PUSH
68460: LD_INT 2
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 3
68470: NEG
68471: PUSH
68472: LD_INT 3
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: LIST
68484: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68485: LD_ADDR_VAR 0 23
68489: PUSH
68490: LD_INT 0
68492: PUSH
68493: LD_INT 3
68495: NEG
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 1
68503: NEG
68504: PUSH
68505: LD_INT 4
68507: NEG
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 1
68515: PUSH
68516: LD_INT 3
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: LIST
68528: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68529: LD_ADDR_VAR 0 24
68533: PUSH
68534: LD_INT 3
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 3
68546: PUSH
68547: LD_INT 1
68549: NEG
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 4
68557: PUSH
68558: LD_INT 1
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: LIST
68569: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68570: LD_ADDR_VAR 0 25
68574: PUSH
68575: LD_INT 3
68577: PUSH
68578: LD_INT 3
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 4
68587: PUSH
68588: LD_INT 3
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 3
68597: PUSH
68598: LD_INT 4
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: LIST
68609: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68610: LD_ADDR_VAR 0 26
68614: PUSH
68615: LD_INT 0
68617: PUSH
68618: LD_INT 3
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 1
68627: PUSH
68628: LD_INT 4
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 1
68637: NEG
68638: PUSH
68639: LD_INT 3
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: LIST
68650: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68651: LD_ADDR_VAR 0 27
68655: PUSH
68656: LD_INT 3
68658: NEG
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 3
68669: NEG
68670: PUSH
68671: LD_INT 1
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 4
68680: NEG
68681: PUSH
68682: LD_INT 1
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: LIST
68694: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68695: LD_ADDR_VAR 0 28
68699: PUSH
68700: LD_INT 3
68702: NEG
68703: PUSH
68704: LD_INT 3
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 3
68714: NEG
68715: PUSH
68716: LD_INT 4
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 4
68726: NEG
68727: PUSH
68728: LD_INT 3
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: LIST
68740: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68741: LD_ADDR_VAR 0 29
68745: PUSH
68746: LD_INT 1
68748: NEG
68749: PUSH
68750: LD_INT 3
68752: NEG
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 0
68760: PUSH
68761: LD_INT 3
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: LD_INT 2
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 1
68782: NEG
68783: PUSH
68784: LD_INT 4
68786: NEG
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 0
68794: PUSH
68795: LD_INT 4
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 1
68805: PUSH
68806: LD_INT 3
68808: NEG
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 1
68816: NEG
68817: PUSH
68818: LD_INT 5
68820: NEG
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 0
68828: PUSH
68829: LD_INT 5
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 1
68839: PUSH
68840: LD_INT 4
68842: NEG
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 1
68850: NEG
68851: PUSH
68852: LD_INT 6
68854: NEG
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: LD_INT 6
68865: NEG
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 1
68873: PUSH
68874: LD_INT 5
68876: NEG
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68896: LD_ADDR_VAR 0 30
68900: PUSH
68901: LD_INT 2
68903: PUSH
68904: LD_INT 1
68906: NEG
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 3
68914: PUSH
68915: LD_INT 0
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 3
68924: PUSH
68925: LD_INT 1
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 3
68934: PUSH
68935: LD_INT 1
68937: NEG
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 4
68945: PUSH
68946: LD_INT 0
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 4
68955: PUSH
68956: LD_INT 1
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 4
68965: PUSH
68966: LD_INT 1
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 5
68976: PUSH
68977: LD_INT 0
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 5
68986: PUSH
68987: LD_INT 1
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 5
68996: PUSH
68997: LD_INT 1
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 6
69007: PUSH
69008: LD_INT 0
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 6
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69039: LD_ADDR_VAR 0 31
69043: PUSH
69044: LD_INT 3
69046: PUSH
69047: LD_INT 2
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 3
69056: PUSH
69057: LD_INT 3
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 2
69066: PUSH
69067: LD_INT 3
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 4
69076: PUSH
69077: LD_INT 3
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 4
69086: PUSH
69087: LD_INT 4
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 3
69096: PUSH
69097: LD_INT 4
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 5
69106: PUSH
69107: LD_INT 4
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 5
69116: PUSH
69117: LD_INT 5
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 4
69126: PUSH
69127: LD_INT 5
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 6
69136: PUSH
69137: LD_INT 5
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 6
69146: PUSH
69147: LD_INT 6
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 5
69156: PUSH
69157: LD_INT 6
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69178: LD_ADDR_VAR 0 32
69182: PUSH
69183: LD_INT 1
69185: PUSH
69186: LD_INT 3
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: LD_INT 3
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 1
69205: NEG
69206: PUSH
69207: LD_INT 2
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 1
69216: PUSH
69217: LD_INT 4
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: LD_INT 4
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 1
69236: NEG
69237: PUSH
69238: LD_INT 3
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: LD_INT 5
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: LD_INT 5
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 1
69267: NEG
69268: PUSH
69269: LD_INT 4
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 1
69278: PUSH
69279: LD_INT 6
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: LD_INT 6
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 1
69298: NEG
69299: PUSH
69300: LD_INT 5
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69321: LD_ADDR_VAR 0 33
69325: PUSH
69326: LD_INT 2
69328: NEG
69329: PUSH
69330: LD_INT 1
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 3
69339: NEG
69340: PUSH
69341: LD_INT 0
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 3
69350: NEG
69351: PUSH
69352: LD_INT 1
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 3
69362: NEG
69363: PUSH
69364: LD_INT 1
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 4
69373: NEG
69374: PUSH
69375: LD_INT 0
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 4
69384: NEG
69385: PUSH
69386: LD_INT 1
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 4
69396: NEG
69397: PUSH
69398: LD_INT 1
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 5
69407: NEG
69408: PUSH
69409: LD_INT 0
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 5
69418: NEG
69419: PUSH
69420: LD_INT 1
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 5
69430: NEG
69431: PUSH
69432: LD_INT 1
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 6
69441: NEG
69442: PUSH
69443: LD_INT 0
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 6
69452: NEG
69453: PUSH
69454: LD_INT 1
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69476: LD_ADDR_VAR 0 34
69480: PUSH
69481: LD_INT 2
69483: NEG
69484: PUSH
69485: LD_INT 3
69487: NEG
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 3
69495: NEG
69496: PUSH
69497: LD_INT 2
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 3
69507: NEG
69508: PUSH
69509: LD_INT 3
69511: NEG
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 3
69519: NEG
69520: PUSH
69521: LD_INT 4
69523: NEG
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 4
69531: NEG
69532: PUSH
69533: LD_INT 3
69535: NEG
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 4
69543: NEG
69544: PUSH
69545: LD_INT 4
69547: NEG
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 4
69555: NEG
69556: PUSH
69557: LD_INT 5
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 5
69567: NEG
69568: PUSH
69569: LD_INT 4
69571: NEG
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 5
69579: NEG
69580: PUSH
69581: LD_INT 5
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 5
69591: NEG
69592: PUSH
69593: LD_INT 6
69595: NEG
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 6
69603: NEG
69604: PUSH
69605: LD_INT 5
69607: NEG
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 6
69615: NEG
69616: PUSH
69617: LD_INT 6
69619: NEG
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69639: LD_ADDR_VAR 0 41
69643: PUSH
69644: LD_INT 0
69646: PUSH
69647: LD_INT 2
69649: NEG
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 1
69657: NEG
69658: PUSH
69659: LD_INT 3
69661: NEG
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: LD_INT 2
69672: NEG
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: LIST
69682: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69683: LD_ADDR_VAR 0 42
69687: PUSH
69688: LD_INT 2
69690: PUSH
69691: LD_INT 0
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: LD_INT 1
69703: NEG
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 3
69711: PUSH
69712: LD_INT 1
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: LIST
69723: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69724: LD_ADDR_VAR 0 43
69728: PUSH
69729: LD_INT 2
69731: PUSH
69732: LD_INT 2
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 3
69741: PUSH
69742: LD_INT 2
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 2
69751: PUSH
69752: LD_INT 3
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69764: LD_ADDR_VAR 0 44
69768: PUSH
69769: LD_INT 0
69771: PUSH
69772: LD_INT 2
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 1
69781: PUSH
69782: LD_INT 3
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 1
69791: NEG
69792: PUSH
69793: LD_INT 2
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: LIST
69804: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69805: LD_ADDR_VAR 0 45
69809: PUSH
69810: LD_INT 2
69812: NEG
69813: PUSH
69814: LD_INT 0
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 2
69823: NEG
69824: PUSH
69825: LD_INT 1
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 3
69834: NEG
69835: PUSH
69836: LD_INT 1
69838: NEG
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: LIST
69848: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69849: LD_ADDR_VAR 0 46
69853: PUSH
69854: LD_INT 2
69856: NEG
69857: PUSH
69858: LD_INT 2
69860: NEG
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 2
69868: NEG
69869: PUSH
69870: LD_INT 3
69872: NEG
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 3
69880: NEG
69881: PUSH
69882: LD_INT 2
69884: NEG
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: LIST
69894: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69895: LD_ADDR_VAR 0 47
69899: PUSH
69900: LD_INT 2
69902: NEG
69903: PUSH
69904: LD_INT 3
69906: NEG
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 1
69914: NEG
69915: PUSH
69916: LD_INT 3
69918: NEG
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69928: LD_ADDR_VAR 0 48
69932: PUSH
69933: LD_INT 1
69935: PUSH
69936: LD_INT 2
69938: NEG
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 2
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69959: LD_ADDR_VAR 0 49
69963: PUSH
69964: LD_INT 3
69966: PUSH
69967: LD_INT 1
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 3
69976: PUSH
69977: LD_INT 2
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69988: LD_ADDR_VAR 0 50
69992: PUSH
69993: LD_INT 2
69995: PUSH
69996: LD_INT 3
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 1
70005: PUSH
70006: LD_INT 3
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70017: LD_ADDR_VAR 0 51
70021: PUSH
70022: LD_INT 1
70024: NEG
70025: PUSH
70026: LD_INT 2
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 2
70035: NEG
70036: PUSH
70037: LD_INT 1
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70048: LD_ADDR_VAR 0 52
70052: PUSH
70053: LD_INT 3
70055: NEG
70056: PUSH
70057: LD_INT 1
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 3
70067: NEG
70068: PUSH
70069: LD_INT 2
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70081: LD_ADDR_VAR 0 53
70085: PUSH
70086: LD_INT 1
70088: NEG
70089: PUSH
70090: LD_INT 3
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 0
70100: PUSH
70101: LD_INT 3
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 1
70111: PUSH
70112: LD_INT 2
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: LIST
70124: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70125: LD_ADDR_VAR 0 54
70129: PUSH
70130: LD_INT 2
70132: PUSH
70133: LD_INT 1
70135: NEG
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 3
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 3
70153: PUSH
70154: LD_INT 1
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70166: LD_ADDR_VAR 0 55
70170: PUSH
70171: LD_INT 3
70173: PUSH
70174: LD_INT 2
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 3
70183: PUSH
70184: LD_INT 3
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 2
70193: PUSH
70194: LD_INT 3
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: LIST
70205: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70206: LD_ADDR_VAR 0 56
70210: PUSH
70211: LD_INT 1
70213: PUSH
70214: LD_INT 3
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 0
70223: PUSH
70224: LD_INT 3
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 1
70233: NEG
70234: PUSH
70235: LD_INT 2
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: LIST
70246: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70247: LD_ADDR_VAR 0 57
70251: PUSH
70252: LD_INT 2
70254: NEG
70255: PUSH
70256: LD_INT 1
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 3
70265: NEG
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 3
70276: NEG
70277: PUSH
70278: LD_INT 1
70280: NEG
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: LIST
70290: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70291: LD_ADDR_VAR 0 58
70295: PUSH
70296: LD_INT 2
70298: NEG
70299: PUSH
70300: LD_INT 3
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 3
70310: NEG
70311: PUSH
70312: LD_INT 2
70314: NEG
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 3
70322: NEG
70323: PUSH
70324: LD_INT 3
70326: NEG
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: LIST
70336: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70337: LD_ADDR_VAR 0 59
70341: PUSH
70342: LD_INT 1
70344: NEG
70345: PUSH
70346: LD_INT 2
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 0
70356: PUSH
70357: LD_INT 2
70359: NEG
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 1
70367: PUSH
70368: LD_INT 1
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: LIST
70380: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70381: LD_ADDR_VAR 0 60
70385: PUSH
70386: LD_INT 1
70388: PUSH
70389: LD_INT 1
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 2
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 2
70409: PUSH
70410: LD_INT 1
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: LIST
70421: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70422: LD_ADDR_VAR 0 61
70426: PUSH
70427: LD_INT 2
70429: PUSH
70430: LD_INT 1
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 2
70439: PUSH
70440: LD_INT 2
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 1
70449: PUSH
70450: LD_INT 2
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: LIST
70461: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70462: LD_ADDR_VAR 0 62
70466: PUSH
70467: LD_INT 1
70469: PUSH
70470: LD_INT 2
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: LD_INT 2
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 1
70489: NEG
70490: PUSH
70491: LD_INT 1
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: LIST
70502: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70503: LD_ADDR_VAR 0 63
70507: PUSH
70508: LD_INT 1
70510: NEG
70511: PUSH
70512: LD_INT 1
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 2
70521: NEG
70522: PUSH
70523: LD_INT 0
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 2
70532: NEG
70533: PUSH
70534: LD_INT 1
70536: NEG
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: LIST
70546: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70547: LD_ADDR_VAR 0 64
70551: PUSH
70552: LD_INT 1
70554: NEG
70555: PUSH
70556: LD_INT 2
70558: NEG
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 2
70566: NEG
70567: PUSH
70568: LD_INT 1
70570: NEG
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 2
70578: NEG
70579: PUSH
70580: LD_INT 2
70582: NEG
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: LIST
70592: ST_TO_ADDR
// end ; 2 :
70593: GO 73859
70595: LD_INT 2
70597: DOUBLE
70598: EQUAL
70599: IFTRUE 70603
70601: GO 73858
70603: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70604: LD_ADDR_VAR 0 29
70608: PUSH
70609: LD_INT 4
70611: PUSH
70612: LD_INT 0
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 4
70621: PUSH
70622: LD_INT 1
70624: NEG
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 5
70632: PUSH
70633: LD_INT 0
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 5
70642: PUSH
70643: LD_INT 1
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 4
70652: PUSH
70653: LD_INT 1
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 3
70662: PUSH
70663: LD_INT 0
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 3
70672: PUSH
70673: LD_INT 1
70675: NEG
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 3
70683: PUSH
70684: LD_INT 2
70686: NEG
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 5
70694: PUSH
70695: LD_INT 2
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 3
70704: PUSH
70705: LD_INT 3
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 3
70714: PUSH
70715: LD_INT 2
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 4
70724: PUSH
70725: LD_INT 3
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 4
70734: PUSH
70735: LD_INT 4
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 3
70744: PUSH
70745: LD_INT 4
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 2
70754: PUSH
70755: LD_INT 3
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 2
70764: PUSH
70765: LD_INT 2
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 4
70774: PUSH
70775: LD_INT 2
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 2
70784: PUSH
70785: LD_INT 4
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 0
70794: PUSH
70795: LD_INT 4
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 0
70804: PUSH
70805: LD_INT 3
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 1
70814: PUSH
70815: LD_INT 4
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 1
70824: PUSH
70825: LD_INT 5
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 0
70834: PUSH
70835: LD_INT 5
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 1
70844: NEG
70845: PUSH
70846: LD_INT 4
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 1
70855: NEG
70856: PUSH
70857: LD_INT 3
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 2
70866: PUSH
70867: LD_INT 5
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 2
70876: NEG
70877: PUSH
70878: LD_INT 3
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 3
70887: NEG
70888: PUSH
70889: LD_INT 0
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 3
70898: NEG
70899: PUSH
70900: LD_INT 1
70902: NEG
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 2
70910: NEG
70911: PUSH
70912: LD_INT 0
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 2
70921: NEG
70922: PUSH
70923: LD_INT 1
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 3
70932: NEG
70933: PUSH
70934: LD_INT 1
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 4
70943: NEG
70944: PUSH
70945: LD_INT 0
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 4
70954: NEG
70955: PUSH
70956: LD_INT 1
70958: NEG
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 4
70966: NEG
70967: PUSH
70968: LD_INT 2
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 2
70978: NEG
70979: PUSH
70980: LD_INT 2
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 4
70989: NEG
70990: PUSH
70991: LD_INT 4
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 4
71001: NEG
71002: PUSH
71003: LD_INT 5
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 3
71013: NEG
71014: PUSH
71015: LD_INT 4
71017: NEG
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 3
71025: NEG
71026: PUSH
71027: LD_INT 3
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 4
71037: NEG
71038: PUSH
71039: LD_INT 3
71041: NEG
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 5
71049: NEG
71050: PUSH
71051: LD_INT 4
71053: NEG
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 5
71061: NEG
71062: PUSH
71063: LD_INT 5
71065: NEG
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 3
71073: NEG
71074: PUSH
71075: LD_INT 5
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 5
71085: NEG
71086: PUSH
71087: LD_INT 3
71089: NEG
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71142: LD_ADDR_VAR 0 30
71146: PUSH
71147: LD_INT 4
71149: PUSH
71150: LD_INT 4
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 4
71159: PUSH
71160: LD_INT 3
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 5
71169: PUSH
71170: LD_INT 4
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 5
71179: PUSH
71180: LD_INT 5
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 4
71189: PUSH
71190: LD_INT 5
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 3
71199: PUSH
71200: LD_INT 4
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 3
71209: PUSH
71210: LD_INT 3
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 5
71219: PUSH
71220: LD_INT 3
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 3
71229: PUSH
71230: LD_INT 5
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 0
71239: PUSH
71240: LD_INT 3
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: LD_INT 2
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 1
71259: PUSH
71260: LD_INT 3
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 1
71269: PUSH
71270: LD_INT 4
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 0
71279: PUSH
71280: LD_INT 4
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 1
71289: NEG
71290: PUSH
71291: LD_INT 3
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 1
71300: NEG
71301: PUSH
71302: LD_INT 2
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 2
71311: PUSH
71312: LD_INT 4
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 2
71321: NEG
71322: PUSH
71323: LD_INT 2
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 4
71332: NEG
71333: PUSH
71334: LD_INT 0
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 4
71343: NEG
71344: PUSH
71345: LD_INT 1
71347: NEG
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 3
71355: NEG
71356: PUSH
71357: LD_INT 0
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 3
71366: NEG
71367: PUSH
71368: LD_INT 1
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 4
71377: NEG
71378: PUSH
71379: LD_INT 1
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 5
71388: NEG
71389: PUSH
71390: LD_INT 0
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 5
71399: NEG
71400: PUSH
71401: LD_INT 1
71403: NEG
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 5
71411: NEG
71412: PUSH
71413: LD_INT 2
71415: NEG
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_INT 3
71423: NEG
71424: PUSH
71425: LD_INT 2
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 3
71434: NEG
71435: PUSH
71436: LD_INT 3
71438: NEG
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 3
71446: NEG
71447: PUSH
71448: LD_INT 4
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 2
71458: NEG
71459: PUSH
71460: LD_INT 3
71462: NEG
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 2
71470: NEG
71471: PUSH
71472: LD_INT 2
71474: NEG
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 3
71482: NEG
71483: PUSH
71484: LD_INT 2
71486: NEG
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 4
71494: NEG
71495: PUSH
71496: LD_INT 3
71498: NEG
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 4
71506: NEG
71507: PUSH
71508: LD_INT 4
71510: NEG
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 2
71518: NEG
71519: PUSH
71520: LD_INT 4
71522: NEG
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 4
71530: NEG
71531: PUSH
71532: LD_INT 2
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 0
71542: PUSH
71543: LD_INT 4
71545: NEG
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 0
71553: PUSH
71554: LD_INT 5
71556: NEG
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 1
71564: PUSH
71565: LD_INT 4
71567: NEG
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 1
71575: PUSH
71576: LD_INT 3
71578: NEG
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 0
71586: PUSH
71587: LD_INT 3
71589: NEG
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 1
71597: NEG
71598: PUSH
71599: LD_INT 4
71601: NEG
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 1
71609: NEG
71610: PUSH
71611: LD_INT 5
71613: NEG
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 2
71621: PUSH
71622: LD_INT 3
71624: NEG
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 2
71632: NEG
71633: PUSH
71634: LD_INT 5
71636: NEG
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71689: LD_ADDR_VAR 0 31
71693: PUSH
71694: LD_INT 0
71696: PUSH
71697: LD_INT 4
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: LD_INT 0
71706: PUSH
71707: LD_INT 3
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PUSH
71714: LD_INT 1
71716: PUSH
71717: LD_INT 4
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: PUSH
71724: LD_INT 1
71726: PUSH
71727: LD_INT 5
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 0
71736: PUSH
71737: LD_INT 5
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 1
71746: NEG
71747: PUSH
71748: LD_INT 4
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 1
71757: NEG
71758: PUSH
71759: LD_INT 3
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 2
71768: PUSH
71769: LD_INT 5
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 2
71778: NEG
71779: PUSH
71780: LD_INT 3
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 3
71789: NEG
71790: PUSH
71791: LD_INT 0
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 3
71800: NEG
71801: PUSH
71802: LD_INT 1
71804: NEG
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 2
71812: NEG
71813: PUSH
71814: LD_INT 0
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 2
71823: NEG
71824: PUSH
71825: LD_INT 1
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 3
71834: NEG
71835: PUSH
71836: LD_INT 1
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: LD_INT 4
71845: NEG
71846: PUSH
71847: LD_INT 0
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 4
71856: NEG
71857: PUSH
71858: LD_INT 1
71860: NEG
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 4
71868: NEG
71869: PUSH
71870: LD_INT 2
71872: NEG
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 2
71880: NEG
71881: PUSH
71882: LD_INT 2
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 4
71891: NEG
71892: PUSH
71893: LD_INT 4
71895: NEG
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 4
71903: NEG
71904: PUSH
71905: LD_INT 5
71907: NEG
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 3
71915: NEG
71916: PUSH
71917: LD_INT 4
71919: NEG
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 3
71927: NEG
71928: PUSH
71929: LD_INT 3
71931: NEG
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 4
71939: NEG
71940: PUSH
71941: LD_INT 3
71943: NEG
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 5
71951: NEG
71952: PUSH
71953: LD_INT 4
71955: NEG
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 5
71963: NEG
71964: PUSH
71965: LD_INT 5
71967: NEG
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 3
71975: NEG
71976: PUSH
71977: LD_INT 5
71979: NEG
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 5
71987: NEG
71988: PUSH
71989: LD_INT 3
71991: NEG
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 0
71999: PUSH
72000: LD_INT 3
72002: NEG
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 0
72010: PUSH
72011: LD_INT 4
72013: NEG
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 1
72021: PUSH
72022: LD_INT 3
72024: NEG
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 1
72032: PUSH
72033: LD_INT 2
72035: NEG
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 0
72043: PUSH
72044: LD_INT 2
72046: NEG
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 1
72054: NEG
72055: PUSH
72056: LD_INT 3
72058: NEG
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 1
72066: NEG
72067: PUSH
72068: LD_INT 4
72070: NEG
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: LD_INT 2
72078: PUSH
72079: LD_INT 2
72081: NEG
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 2
72089: NEG
72090: PUSH
72091: LD_INT 4
72093: NEG
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 4
72101: PUSH
72102: LD_INT 0
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 4
72111: PUSH
72112: LD_INT 1
72114: NEG
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 5
72122: PUSH
72123: LD_INT 0
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 5
72132: PUSH
72133: LD_INT 1
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 4
72142: PUSH
72143: LD_INT 1
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 3
72152: PUSH
72153: LD_INT 0
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 3
72162: PUSH
72163: LD_INT 1
72165: NEG
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 3
72173: PUSH
72174: LD_INT 2
72176: NEG
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 5
72184: PUSH
72185: LD_INT 2
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72239: LD_ADDR_VAR 0 32
72243: PUSH
72244: LD_INT 4
72246: NEG
72247: PUSH
72248: LD_INT 0
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 4
72257: NEG
72258: PUSH
72259: LD_INT 1
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 3
72269: NEG
72270: PUSH
72271: LD_INT 0
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 3
72280: NEG
72281: PUSH
72282: LD_INT 1
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 4
72291: NEG
72292: PUSH
72293: LD_INT 1
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 5
72302: NEG
72303: PUSH
72304: LD_INT 0
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 5
72313: NEG
72314: PUSH
72315: LD_INT 1
72317: NEG
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: LD_INT 5
72325: NEG
72326: PUSH
72327: LD_INT 2
72329: NEG
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 3
72337: NEG
72338: PUSH
72339: LD_INT 2
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 3
72348: NEG
72349: PUSH
72350: LD_INT 3
72352: NEG
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 3
72360: NEG
72361: PUSH
72362: LD_INT 4
72364: NEG
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 2
72372: NEG
72373: PUSH
72374: LD_INT 3
72376: NEG
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 2
72384: NEG
72385: PUSH
72386: LD_INT 2
72388: NEG
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_INT 3
72396: NEG
72397: PUSH
72398: LD_INT 2
72400: NEG
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 4
72408: NEG
72409: PUSH
72410: LD_INT 3
72412: NEG
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 4
72420: NEG
72421: PUSH
72422: LD_INT 4
72424: NEG
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 2
72432: NEG
72433: PUSH
72434: LD_INT 4
72436: NEG
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 4
72444: NEG
72445: PUSH
72446: LD_INT 2
72448: NEG
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 0
72456: PUSH
72457: LD_INT 4
72459: NEG
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 0
72467: PUSH
72468: LD_INT 5
72470: NEG
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 1
72478: PUSH
72479: LD_INT 4
72481: NEG
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: LD_INT 1
72489: PUSH
72490: LD_INT 3
72492: NEG
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 0
72500: PUSH
72501: LD_INT 3
72503: NEG
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: LD_INT 1
72511: NEG
72512: PUSH
72513: LD_INT 4
72515: NEG
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 1
72523: NEG
72524: PUSH
72525: LD_INT 5
72527: NEG
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: LD_INT 2
72535: PUSH
72536: LD_INT 3
72538: NEG
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 2
72546: NEG
72547: PUSH
72548: LD_INT 5
72550: NEG
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 3
72558: PUSH
72559: LD_INT 0
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PUSH
72566: LD_INT 3
72568: PUSH
72569: LD_INT 1
72571: NEG
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 4
72579: PUSH
72580: LD_INT 0
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 4
72589: PUSH
72590: LD_INT 1
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 3
72599: PUSH
72600: LD_INT 1
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PUSH
72607: LD_INT 2
72609: PUSH
72610: LD_INT 0
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 2
72619: PUSH
72620: LD_INT 1
72622: NEG
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 2
72630: PUSH
72631: LD_INT 2
72633: NEG
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 4
72641: PUSH
72642: LD_INT 2
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 4
72651: PUSH
72652: LD_INT 4
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: LD_INT 4
72661: PUSH
72662: LD_INT 3
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 5
72671: PUSH
72672: LD_INT 4
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PUSH
72679: LD_INT 5
72681: PUSH
72682: LD_INT 5
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: PUSH
72689: LD_INT 4
72691: PUSH
72692: LD_INT 5
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: PUSH
72699: LD_INT 3
72701: PUSH
72702: LD_INT 4
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 3
72711: PUSH
72712: LD_INT 3
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 5
72721: PUSH
72722: LD_INT 3
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 3
72731: PUSH
72732: LD_INT 5
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72786: LD_ADDR_VAR 0 33
72790: PUSH
72791: LD_INT 4
72793: NEG
72794: PUSH
72795: LD_INT 4
72797: NEG
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 4
72805: NEG
72806: PUSH
72807: LD_INT 5
72809: NEG
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PUSH
72815: LD_INT 3
72817: NEG
72818: PUSH
72819: LD_INT 4
72821: NEG
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 3
72829: NEG
72830: PUSH
72831: LD_INT 3
72833: NEG
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 4
72841: NEG
72842: PUSH
72843: LD_INT 3
72845: NEG
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: LD_INT 5
72853: NEG
72854: PUSH
72855: LD_INT 4
72857: NEG
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 5
72865: NEG
72866: PUSH
72867: LD_INT 5
72869: NEG
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 3
72877: NEG
72878: PUSH
72879: LD_INT 5
72881: NEG
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 5
72889: NEG
72890: PUSH
72891: LD_INT 3
72893: NEG
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 0
72901: PUSH
72902: LD_INT 3
72904: NEG
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_INT 0
72912: PUSH
72913: LD_INT 4
72915: NEG
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 1
72923: PUSH
72924: LD_INT 3
72926: NEG
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 1
72934: PUSH
72935: LD_INT 2
72937: NEG
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: LD_INT 0
72945: PUSH
72946: LD_INT 2
72948: NEG
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: PUSH
72954: LD_INT 1
72956: NEG
72957: PUSH
72958: LD_INT 3
72960: NEG
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 1
72968: NEG
72969: PUSH
72970: LD_INT 4
72972: NEG
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 2
72980: PUSH
72981: LD_INT 2
72983: NEG
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: LD_INT 2
72991: NEG
72992: PUSH
72993: LD_INT 4
72995: NEG
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 4
73003: PUSH
73004: LD_INT 0
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: LD_INT 4
73013: PUSH
73014: LD_INT 1
73016: NEG
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: PUSH
73022: LD_INT 5
73024: PUSH
73025: LD_INT 0
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: LD_INT 5
73034: PUSH
73035: LD_INT 1
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: PUSH
73042: LD_INT 4
73044: PUSH
73045: LD_INT 1
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_INT 3
73054: PUSH
73055: LD_INT 0
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PUSH
73062: LD_INT 3
73064: PUSH
73065: LD_INT 1
73067: NEG
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: LD_INT 3
73075: PUSH
73076: LD_INT 2
73078: NEG
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PUSH
73084: LD_INT 5
73086: PUSH
73087: LD_INT 2
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: PUSH
73094: LD_INT 3
73096: PUSH
73097: LD_INT 3
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PUSH
73104: LD_INT 3
73106: PUSH
73107: LD_INT 2
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: LD_INT 4
73116: PUSH
73117: LD_INT 3
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 4
73126: PUSH
73127: LD_INT 4
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 3
73136: PUSH
73137: LD_INT 4
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_INT 2
73146: PUSH
73147: LD_INT 3
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: LD_INT 2
73156: PUSH
73157: LD_INT 2
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 4
73166: PUSH
73167: LD_INT 2
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PUSH
73174: LD_INT 2
73176: PUSH
73177: LD_INT 4
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: PUSH
73184: LD_INT 0
73186: PUSH
73187: LD_INT 4
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: PUSH
73194: LD_INT 0
73196: PUSH
73197: LD_INT 3
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: PUSH
73204: LD_INT 1
73206: PUSH
73207: LD_INT 4
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: PUSH
73214: LD_INT 1
73216: PUSH
73217: LD_INT 5
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: LD_INT 0
73226: PUSH
73227: LD_INT 5
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 1
73236: NEG
73237: PUSH
73238: LD_INT 4
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 1
73247: NEG
73248: PUSH
73249: LD_INT 3
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: PUSH
73256: LD_INT 2
73258: PUSH
73259: LD_INT 5
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: PUSH
73266: LD_INT 2
73268: NEG
73269: PUSH
73270: LD_INT 3
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73324: LD_ADDR_VAR 0 34
73328: PUSH
73329: LD_INT 0
73331: PUSH
73332: LD_INT 4
73334: NEG
73335: PUSH
73336: EMPTY
73337: LIST
73338: LIST
73339: PUSH
73340: LD_INT 0
73342: PUSH
73343: LD_INT 5
73345: NEG
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 1
73353: PUSH
73354: LD_INT 4
73356: NEG
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: PUSH
73362: LD_INT 1
73364: PUSH
73365: LD_INT 3
73367: NEG
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: PUSH
73373: LD_INT 0
73375: PUSH
73376: LD_INT 3
73378: NEG
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: LD_INT 1
73386: NEG
73387: PUSH
73388: LD_INT 4
73390: NEG
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 1
73398: NEG
73399: PUSH
73400: LD_INT 5
73402: NEG
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: PUSH
73408: LD_INT 2
73410: PUSH
73411: LD_INT 3
73413: NEG
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PUSH
73419: LD_INT 2
73421: NEG
73422: PUSH
73423: LD_INT 5
73425: NEG
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 3
73433: PUSH
73434: LD_INT 0
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 3
73443: PUSH
73444: LD_INT 1
73446: NEG
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_INT 4
73454: PUSH
73455: LD_INT 0
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 4
73464: PUSH
73465: LD_INT 1
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PUSH
73472: LD_INT 3
73474: PUSH
73475: LD_INT 1
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: PUSH
73482: LD_INT 2
73484: PUSH
73485: LD_INT 0
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 2
73494: PUSH
73495: LD_INT 1
73497: NEG
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: LD_INT 2
73505: PUSH
73506: LD_INT 2
73508: NEG
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 4
73516: PUSH
73517: LD_INT 2
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 4
73526: PUSH
73527: LD_INT 4
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 4
73536: PUSH
73537: LD_INT 3
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 5
73546: PUSH
73547: LD_INT 4
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 5
73556: PUSH
73557: LD_INT 5
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 4
73566: PUSH
73567: LD_INT 5
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PUSH
73574: LD_INT 3
73576: PUSH
73577: LD_INT 4
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 3
73586: PUSH
73587: LD_INT 3
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PUSH
73594: LD_INT 5
73596: PUSH
73597: LD_INT 3
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PUSH
73604: LD_INT 3
73606: PUSH
73607: LD_INT 5
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 0
73616: PUSH
73617: LD_INT 3
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: LD_INT 0
73626: PUSH
73627: LD_INT 2
73629: PUSH
73630: EMPTY
73631: LIST
73632: LIST
73633: PUSH
73634: LD_INT 1
73636: PUSH
73637: LD_INT 3
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 1
73646: PUSH
73647: LD_INT 4
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PUSH
73654: LD_INT 0
73656: PUSH
73657: LD_INT 4
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 1
73666: NEG
73667: PUSH
73668: LD_INT 3
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: PUSH
73675: LD_INT 1
73677: NEG
73678: PUSH
73679: LD_INT 2
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: LD_INT 2
73688: PUSH
73689: LD_INT 4
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_INT 2
73698: NEG
73699: PUSH
73700: LD_INT 2
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 4
73709: NEG
73710: PUSH
73711: LD_INT 0
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: LD_INT 4
73720: NEG
73721: PUSH
73722: LD_INT 1
73724: NEG
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: PUSH
73730: LD_INT 3
73732: NEG
73733: PUSH
73734: LD_INT 0
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: PUSH
73741: LD_INT 3
73743: NEG
73744: PUSH
73745: LD_INT 1
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 4
73754: NEG
73755: PUSH
73756: LD_INT 1
73758: PUSH
73759: EMPTY
73760: LIST
73761: LIST
73762: PUSH
73763: LD_INT 5
73765: NEG
73766: PUSH
73767: LD_INT 0
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: LD_INT 5
73776: NEG
73777: PUSH
73778: LD_INT 1
73780: NEG
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 5
73788: NEG
73789: PUSH
73790: LD_INT 2
73792: NEG
73793: PUSH
73794: EMPTY
73795: LIST
73796: LIST
73797: PUSH
73798: LD_INT 3
73800: NEG
73801: PUSH
73802: LD_INT 2
73804: PUSH
73805: EMPTY
73806: LIST
73807: LIST
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: ST_TO_ADDR
// end ; end ;
73856: GO 73859
73858: POP
// case btype of b_depot , b_warehouse :
73859: LD_VAR 0 1
73863: PUSH
73864: LD_INT 0
73866: DOUBLE
73867: EQUAL
73868: IFTRUE 73878
73870: LD_INT 1
73872: DOUBLE
73873: EQUAL
73874: IFTRUE 73878
73876: GO 74079
73878: POP
// case nation of nation_american :
73879: LD_VAR 0 5
73883: PUSH
73884: LD_INT 1
73886: DOUBLE
73887: EQUAL
73888: IFTRUE 73892
73890: GO 73948
73892: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73893: LD_ADDR_VAR 0 9
73897: PUSH
73898: LD_VAR 0 11
73902: PUSH
73903: LD_VAR 0 12
73907: PUSH
73908: LD_VAR 0 13
73912: PUSH
73913: LD_VAR 0 14
73917: PUSH
73918: LD_VAR 0 15
73922: PUSH
73923: LD_VAR 0 16
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: LIST
73935: PUSH
73936: LD_VAR 0 4
73940: PUSH
73941: LD_INT 1
73943: PLUS
73944: ARRAY
73945: ST_TO_ADDR
73946: GO 74077
73948: LD_INT 2
73950: DOUBLE
73951: EQUAL
73952: IFTRUE 73956
73954: GO 74012
73956: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73957: LD_ADDR_VAR 0 9
73961: PUSH
73962: LD_VAR 0 17
73966: PUSH
73967: LD_VAR 0 18
73971: PUSH
73972: LD_VAR 0 19
73976: PUSH
73977: LD_VAR 0 20
73981: PUSH
73982: LD_VAR 0 21
73986: PUSH
73987: LD_VAR 0 22
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: LIST
73999: PUSH
74000: LD_VAR 0 4
74004: PUSH
74005: LD_INT 1
74007: PLUS
74008: ARRAY
74009: ST_TO_ADDR
74010: GO 74077
74012: LD_INT 3
74014: DOUBLE
74015: EQUAL
74016: IFTRUE 74020
74018: GO 74076
74020: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74021: LD_ADDR_VAR 0 9
74025: PUSH
74026: LD_VAR 0 23
74030: PUSH
74031: LD_VAR 0 24
74035: PUSH
74036: LD_VAR 0 25
74040: PUSH
74041: LD_VAR 0 26
74045: PUSH
74046: LD_VAR 0 27
74050: PUSH
74051: LD_VAR 0 28
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: LIST
74060: LIST
74061: LIST
74062: LIST
74063: PUSH
74064: LD_VAR 0 4
74068: PUSH
74069: LD_INT 1
74071: PLUS
74072: ARRAY
74073: ST_TO_ADDR
74074: GO 74077
74076: POP
74077: GO 74632
74079: LD_INT 2
74081: DOUBLE
74082: EQUAL
74083: IFTRUE 74093
74085: LD_INT 3
74087: DOUBLE
74088: EQUAL
74089: IFTRUE 74093
74091: GO 74149
74093: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74094: LD_ADDR_VAR 0 9
74098: PUSH
74099: LD_VAR 0 29
74103: PUSH
74104: LD_VAR 0 30
74108: PUSH
74109: LD_VAR 0 31
74113: PUSH
74114: LD_VAR 0 32
74118: PUSH
74119: LD_VAR 0 33
74123: PUSH
74124: LD_VAR 0 34
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: PUSH
74137: LD_VAR 0 4
74141: PUSH
74142: LD_INT 1
74144: PLUS
74145: ARRAY
74146: ST_TO_ADDR
74147: GO 74632
74149: LD_INT 16
74151: DOUBLE
74152: EQUAL
74153: IFTRUE 74211
74155: LD_INT 17
74157: DOUBLE
74158: EQUAL
74159: IFTRUE 74211
74161: LD_INT 18
74163: DOUBLE
74164: EQUAL
74165: IFTRUE 74211
74167: LD_INT 19
74169: DOUBLE
74170: EQUAL
74171: IFTRUE 74211
74173: LD_INT 22
74175: DOUBLE
74176: EQUAL
74177: IFTRUE 74211
74179: LD_INT 20
74181: DOUBLE
74182: EQUAL
74183: IFTRUE 74211
74185: LD_INT 21
74187: DOUBLE
74188: EQUAL
74189: IFTRUE 74211
74191: LD_INT 23
74193: DOUBLE
74194: EQUAL
74195: IFTRUE 74211
74197: LD_INT 24
74199: DOUBLE
74200: EQUAL
74201: IFTRUE 74211
74203: LD_INT 25
74205: DOUBLE
74206: EQUAL
74207: IFTRUE 74211
74209: GO 74267
74211: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74212: LD_ADDR_VAR 0 9
74216: PUSH
74217: LD_VAR 0 35
74221: PUSH
74222: LD_VAR 0 36
74226: PUSH
74227: LD_VAR 0 37
74231: PUSH
74232: LD_VAR 0 38
74236: PUSH
74237: LD_VAR 0 39
74241: PUSH
74242: LD_VAR 0 40
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: PUSH
74255: LD_VAR 0 4
74259: PUSH
74260: LD_INT 1
74262: PLUS
74263: ARRAY
74264: ST_TO_ADDR
74265: GO 74632
74267: LD_INT 6
74269: DOUBLE
74270: EQUAL
74271: IFTRUE 74323
74273: LD_INT 7
74275: DOUBLE
74276: EQUAL
74277: IFTRUE 74323
74279: LD_INT 8
74281: DOUBLE
74282: EQUAL
74283: IFTRUE 74323
74285: LD_INT 13
74287: DOUBLE
74288: EQUAL
74289: IFTRUE 74323
74291: LD_INT 12
74293: DOUBLE
74294: EQUAL
74295: IFTRUE 74323
74297: LD_INT 15
74299: DOUBLE
74300: EQUAL
74301: IFTRUE 74323
74303: LD_INT 11
74305: DOUBLE
74306: EQUAL
74307: IFTRUE 74323
74309: LD_INT 14
74311: DOUBLE
74312: EQUAL
74313: IFTRUE 74323
74315: LD_INT 10
74317: DOUBLE
74318: EQUAL
74319: IFTRUE 74323
74321: GO 74379
74323: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74324: LD_ADDR_VAR 0 9
74328: PUSH
74329: LD_VAR 0 41
74333: PUSH
74334: LD_VAR 0 42
74338: PUSH
74339: LD_VAR 0 43
74343: PUSH
74344: LD_VAR 0 44
74348: PUSH
74349: LD_VAR 0 45
74353: PUSH
74354: LD_VAR 0 46
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: PUSH
74367: LD_VAR 0 4
74371: PUSH
74372: LD_INT 1
74374: PLUS
74375: ARRAY
74376: ST_TO_ADDR
74377: GO 74632
74379: LD_INT 36
74381: DOUBLE
74382: EQUAL
74383: IFTRUE 74387
74385: GO 74443
74387: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74388: LD_ADDR_VAR 0 9
74392: PUSH
74393: LD_VAR 0 47
74397: PUSH
74398: LD_VAR 0 48
74402: PUSH
74403: LD_VAR 0 49
74407: PUSH
74408: LD_VAR 0 50
74412: PUSH
74413: LD_VAR 0 51
74417: PUSH
74418: LD_VAR 0 52
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: PUSH
74431: LD_VAR 0 4
74435: PUSH
74436: LD_INT 1
74438: PLUS
74439: ARRAY
74440: ST_TO_ADDR
74441: GO 74632
74443: LD_INT 4
74445: DOUBLE
74446: EQUAL
74447: IFTRUE 74469
74449: LD_INT 5
74451: DOUBLE
74452: EQUAL
74453: IFTRUE 74469
74455: LD_INT 34
74457: DOUBLE
74458: EQUAL
74459: IFTRUE 74469
74461: LD_INT 37
74463: DOUBLE
74464: EQUAL
74465: IFTRUE 74469
74467: GO 74525
74469: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74470: LD_ADDR_VAR 0 9
74474: PUSH
74475: LD_VAR 0 53
74479: PUSH
74480: LD_VAR 0 54
74484: PUSH
74485: LD_VAR 0 55
74489: PUSH
74490: LD_VAR 0 56
74494: PUSH
74495: LD_VAR 0 57
74499: PUSH
74500: LD_VAR 0 58
74504: PUSH
74505: EMPTY
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: PUSH
74513: LD_VAR 0 4
74517: PUSH
74518: LD_INT 1
74520: PLUS
74521: ARRAY
74522: ST_TO_ADDR
74523: GO 74632
74525: LD_INT 31
74527: DOUBLE
74528: EQUAL
74529: IFTRUE 74575
74531: LD_INT 32
74533: DOUBLE
74534: EQUAL
74535: IFTRUE 74575
74537: LD_INT 33
74539: DOUBLE
74540: EQUAL
74541: IFTRUE 74575
74543: LD_INT 27
74545: DOUBLE
74546: EQUAL
74547: IFTRUE 74575
74549: LD_INT 26
74551: DOUBLE
74552: EQUAL
74553: IFTRUE 74575
74555: LD_INT 28
74557: DOUBLE
74558: EQUAL
74559: IFTRUE 74575
74561: LD_INT 29
74563: DOUBLE
74564: EQUAL
74565: IFTRUE 74575
74567: LD_INT 30
74569: DOUBLE
74570: EQUAL
74571: IFTRUE 74575
74573: GO 74631
74575: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74576: LD_ADDR_VAR 0 9
74580: PUSH
74581: LD_VAR 0 59
74585: PUSH
74586: LD_VAR 0 60
74590: PUSH
74591: LD_VAR 0 61
74595: PUSH
74596: LD_VAR 0 62
74600: PUSH
74601: LD_VAR 0 63
74605: PUSH
74606: LD_VAR 0 64
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: LIST
74615: LIST
74616: LIST
74617: LIST
74618: PUSH
74619: LD_VAR 0 4
74623: PUSH
74624: LD_INT 1
74626: PLUS
74627: ARRAY
74628: ST_TO_ADDR
74629: GO 74632
74631: POP
// temp_list2 = [ ] ;
74632: LD_ADDR_VAR 0 10
74636: PUSH
74637: EMPTY
74638: ST_TO_ADDR
// for i in temp_list do
74639: LD_ADDR_VAR 0 8
74643: PUSH
74644: LD_VAR 0 9
74648: PUSH
74649: FOR_IN
74650: IFFALSE 74702
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74652: LD_ADDR_VAR 0 10
74656: PUSH
74657: LD_VAR 0 10
74661: PUSH
74662: LD_VAR 0 8
74666: PUSH
74667: LD_INT 1
74669: ARRAY
74670: PUSH
74671: LD_VAR 0 2
74675: PLUS
74676: PUSH
74677: LD_VAR 0 8
74681: PUSH
74682: LD_INT 2
74684: ARRAY
74685: PUSH
74686: LD_VAR 0 3
74690: PLUS
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: PUSH
74696: EMPTY
74697: LIST
74698: ADD
74699: ST_TO_ADDR
74700: GO 74649
74702: POP
74703: POP
// result = temp_list2 ;
74704: LD_ADDR_VAR 0 7
74708: PUSH
74709: LD_VAR 0 10
74713: ST_TO_ADDR
// end ;
74714: LD_VAR 0 7
74718: RET
// export function EnemyInRange ( unit , dist ) ; begin
74719: LD_INT 0
74721: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74722: LD_ADDR_VAR 0 3
74726: PUSH
74727: LD_VAR 0 1
74731: PPUSH
74732: CALL_OW 255
74736: PPUSH
74737: LD_VAR 0 1
74741: PPUSH
74742: CALL_OW 250
74746: PPUSH
74747: LD_VAR 0 1
74751: PPUSH
74752: CALL_OW 251
74756: PPUSH
74757: LD_VAR 0 2
74761: PPUSH
74762: CALL 48092 0 4
74766: PUSH
74767: LD_INT 4
74769: ARRAY
74770: ST_TO_ADDR
// end ;
74771: LD_VAR 0 3
74775: RET
// export function PlayerSeeMe ( unit ) ; begin
74776: LD_INT 0
74778: PPUSH
// result := See ( your_side , unit ) ;
74779: LD_ADDR_VAR 0 2
74783: PUSH
74784: LD_OWVAR 2
74788: PPUSH
74789: LD_VAR 0 1
74793: PPUSH
74794: CALL_OW 292
74798: ST_TO_ADDR
// end ;
74799: LD_VAR 0 2
74803: RET
// export function ReverseDir ( unit ) ; begin
74804: LD_INT 0
74806: PPUSH
// if not unit then
74807: LD_VAR 0 1
74811: NOT
74812: IFFALSE 74816
// exit ;
74814: GO 74839
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74816: LD_ADDR_VAR 0 2
74820: PUSH
74821: LD_VAR 0 1
74825: PPUSH
74826: CALL_OW 254
74830: PUSH
74831: LD_INT 3
74833: PLUS
74834: PUSH
74835: LD_INT 6
74837: MOD
74838: ST_TO_ADDR
// end ;
74839: LD_VAR 0 2
74843: RET
// export function ReverseArray ( array ) ; var i ; begin
74844: LD_INT 0
74846: PPUSH
74847: PPUSH
// if not array then
74848: LD_VAR 0 1
74852: NOT
74853: IFFALSE 74857
// exit ;
74855: GO 74912
// result := [ ] ;
74857: LD_ADDR_VAR 0 2
74861: PUSH
74862: EMPTY
74863: ST_TO_ADDR
// for i := array downto 1 do
74864: LD_ADDR_VAR 0 3
74868: PUSH
74869: DOUBLE
74870: LD_VAR 0 1
74874: INC
74875: ST_TO_ADDR
74876: LD_INT 1
74878: PUSH
74879: FOR_DOWNTO
74880: IFFALSE 74910
// result := Join ( result , array [ i ] ) ;
74882: LD_ADDR_VAR 0 2
74886: PUSH
74887: LD_VAR 0 2
74891: PPUSH
74892: LD_VAR 0 1
74896: PUSH
74897: LD_VAR 0 3
74901: ARRAY
74902: PPUSH
74903: CALL 79577 0 2
74907: ST_TO_ADDR
74908: GO 74879
74910: POP
74911: POP
// end ;
74912: LD_VAR 0 2
74916: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74917: LD_INT 0
74919: PPUSH
74920: PPUSH
74921: PPUSH
74922: PPUSH
74923: PPUSH
74924: PPUSH
// if not unit or not hexes then
74925: LD_VAR 0 1
74929: NOT
74930: PUSH
74931: LD_VAR 0 2
74935: NOT
74936: OR
74937: IFFALSE 74941
// exit ;
74939: GO 75064
// dist := 9999 ;
74941: LD_ADDR_VAR 0 5
74945: PUSH
74946: LD_INT 9999
74948: ST_TO_ADDR
// for i = 1 to hexes do
74949: LD_ADDR_VAR 0 4
74953: PUSH
74954: DOUBLE
74955: LD_INT 1
74957: DEC
74958: ST_TO_ADDR
74959: LD_VAR 0 2
74963: PUSH
74964: FOR_TO
74965: IFFALSE 75052
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74967: LD_ADDR_VAR 0 6
74971: PUSH
74972: LD_VAR 0 1
74976: PPUSH
74977: LD_VAR 0 2
74981: PUSH
74982: LD_VAR 0 4
74986: ARRAY
74987: PUSH
74988: LD_INT 1
74990: ARRAY
74991: PPUSH
74992: LD_VAR 0 2
74996: PUSH
74997: LD_VAR 0 4
75001: ARRAY
75002: PUSH
75003: LD_INT 2
75005: ARRAY
75006: PPUSH
75007: CALL_OW 297
75011: ST_TO_ADDR
// if tdist < dist then
75012: LD_VAR 0 6
75016: PUSH
75017: LD_VAR 0 5
75021: LESS
75022: IFFALSE 75050
// begin hex := hexes [ i ] ;
75024: LD_ADDR_VAR 0 8
75028: PUSH
75029: LD_VAR 0 2
75033: PUSH
75034: LD_VAR 0 4
75038: ARRAY
75039: ST_TO_ADDR
// dist := tdist ;
75040: LD_ADDR_VAR 0 5
75044: PUSH
75045: LD_VAR 0 6
75049: ST_TO_ADDR
// end ; end ;
75050: GO 74964
75052: POP
75053: POP
// result := hex ;
75054: LD_ADDR_VAR 0 3
75058: PUSH
75059: LD_VAR 0 8
75063: ST_TO_ADDR
// end ;
75064: LD_VAR 0 3
75068: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75069: LD_INT 0
75071: PPUSH
75072: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75073: LD_VAR 0 1
75077: NOT
75078: PUSH
75079: LD_VAR 0 1
75083: PUSH
75084: LD_INT 21
75086: PUSH
75087: LD_INT 2
75089: PUSH
75090: EMPTY
75091: LIST
75092: LIST
75093: PUSH
75094: LD_INT 23
75096: PUSH
75097: LD_INT 2
75099: PUSH
75100: EMPTY
75101: LIST
75102: LIST
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: PPUSH
75108: CALL_OW 69
75112: IN
75113: NOT
75114: OR
75115: IFFALSE 75119
// exit ;
75117: GO 75166
// for i = 1 to 3 do
75119: LD_ADDR_VAR 0 3
75123: PUSH
75124: DOUBLE
75125: LD_INT 1
75127: DEC
75128: ST_TO_ADDR
75129: LD_INT 3
75131: PUSH
75132: FOR_TO
75133: IFFALSE 75164
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75135: LD_VAR 0 1
75139: PPUSH
75140: CALL_OW 250
75144: PPUSH
75145: LD_VAR 0 1
75149: PPUSH
75150: CALL_OW 251
75154: PPUSH
75155: LD_INT 1
75157: PPUSH
75158: CALL_OW 453
75162: GO 75132
75164: POP
75165: POP
// end ;
75166: LD_VAR 0 2
75170: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75171: LD_INT 0
75173: PPUSH
75174: PPUSH
75175: PPUSH
75176: PPUSH
75177: PPUSH
75178: PPUSH
// if not unit or not enemy_unit then
75179: LD_VAR 0 1
75183: NOT
75184: PUSH
75185: LD_VAR 0 2
75189: NOT
75190: OR
75191: IFFALSE 75195
// exit ;
75193: GO 75662
// if GetLives ( i ) < 250 then
75195: LD_VAR 0 4
75199: PPUSH
75200: CALL_OW 256
75204: PUSH
75205: LD_INT 250
75207: LESS
75208: IFFALSE 75221
// begin ComAutodestruct ( i ) ;
75210: LD_VAR 0 4
75214: PPUSH
75215: CALL 75069 0 1
// exit ;
75219: GO 75662
// end ; x := GetX ( enemy_unit ) ;
75221: LD_ADDR_VAR 0 7
75225: PUSH
75226: LD_VAR 0 2
75230: PPUSH
75231: CALL_OW 250
75235: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75236: LD_ADDR_VAR 0 8
75240: PUSH
75241: LD_VAR 0 2
75245: PPUSH
75246: CALL_OW 251
75250: ST_TO_ADDR
// if not x or not y then
75251: LD_VAR 0 7
75255: NOT
75256: PUSH
75257: LD_VAR 0 8
75261: NOT
75262: OR
75263: IFFALSE 75267
// exit ;
75265: GO 75662
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75267: LD_ADDR_VAR 0 6
75271: PUSH
75272: LD_VAR 0 7
75276: PPUSH
75277: LD_INT 0
75279: PPUSH
75280: LD_INT 4
75282: PPUSH
75283: CALL_OW 272
75287: PUSH
75288: LD_VAR 0 8
75292: PPUSH
75293: LD_INT 0
75295: PPUSH
75296: LD_INT 4
75298: PPUSH
75299: CALL_OW 273
75303: PUSH
75304: EMPTY
75305: LIST
75306: LIST
75307: PUSH
75308: LD_VAR 0 7
75312: PPUSH
75313: LD_INT 1
75315: PPUSH
75316: LD_INT 4
75318: PPUSH
75319: CALL_OW 272
75323: PUSH
75324: LD_VAR 0 8
75328: PPUSH
75329: LD_INT 1
75331: PPUSH
75332: LD_INT 4
75334: PPUSH
75335: CALL_OW 273
75339: PUSH
75340: EMPTY
75341: LIST
75342: LIST
75343: PUSH
75344: LD_VAR 0 7
75348: PPUSH
75349: LD_INT 2
75351: PPUSH
75352: LD_INT 4
75354: PPUSH
75355: CALL_OW 272
75359: PUSH
75360: LD_VAR 0 8
75364: PPUSH
75365: LD_INT 2
75367: PPUSH
75368: LD_INT 4
75370: PPUSH
75371: CALL_OW 273
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: PUSH
75380: LD_VAR 0 7
75384: PPUSH
75385: LD_INT 3
75387: PPUSH
75388: LD_INT 4
75390: PPUSH
75391: CALL_OW 272
75395: PUSH
75396: LD_VAR 0 8
75400: PPUSH
75401: LD_INT 3
75403: PPUSH
75404: LD_INT 4
75406: PPUSH
75407: CALL_OW 273
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: LD_VAR 0 7
75420: PPUSH
75421: LD_INT 4
75423: PPUSH
75424: LD_INT 4
75426: PPUSH
75427: CALL_OW 272
75431: PUSH
75432: LD_VAR 0 8
75436: PPUSH
75437: LD_INT 4
75439: PPUSH
75440: LD_INT 4
75442: PPUSH
75443: CALL_OW 273
75447: PUSH
75448: EMPTY
75449: LIST
75450: LIST
75451: PUSH
75452: LD_VAR 0 7
75456: PPUSH
75457: LD_INT 5
75459: PPUSH
75460: LD_INT 4
75462: PPUSH
75463: CALL_OW 272
75467: PUSH
75468: LD_VAR 0 8
75472: PPUSH
75473: LD_INT 5
75475: PPUSH
75476: LD_INT 4
75478: PPUSH
75479: CALL_OW 273
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: ST_TO_ADDR
// for i = tmp downto 1 do
75496: LD_ADDR_VAR 0 4
75500: PUSH
75501: DOUBLE
75502: LD_VAR 0 6
75506: INC
75507: ST_TO_ADDR
75508: LD_INT 1
75510: PUSH
75511: FOR_DOWNTO
75512: IFFALSE 75613
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75514: LD_VAR 0 6
75518: PUSH
75519: LD_VAR 0 4
75523: ARRAY
75524: PUSH
75525: LD_INT 1
75527: ARRAY
75528: PPUSH
75529: LD_VAR 0 6
75533: PUSH
75534: LD_VAR 0 4
75538: ARRAY
75539: PUSH
75540: LD_INT 2
75542: ARRAY
75543: PPUSH
75544: CALL_OW 488
75548: NOT
75549: PUSH
75550: LD_VAR 0 6
75554: PUSH
75555: LD_VAR 0 4
75559: ARRAY
75560: PUSH
75561: LD_INT 1
75563: ARRAY
75564: PPUSH
75565: LD_VAR 0 6
75569: PUSH
75570: LD_VAR 0 4
75574: ARRAY
75575: PUSH
75576: LD_INT 2
75578: ARRAY
75579: PPUSH
75580: CALL_OW 428
75584: PUSH
75585: LD_INT 0
75587: NONEQUAL
75588: OR
75589: IFFALSE 75611
// tmp := Delete ( tmp , i ) ;
75591: LD_ADDR_VAR 0 6
75595: PUSH
75596: LD_VAR 0 6
75600: PPUSH
75601: LD_VAR 0 4
75605: PPUSH
75606: CALL_OW 3
75610: ST_TO_ADDR
75611: GO 75511
75613: POP
75614: POP
// j := GetClosestHex ( unit , tmp ) ;
75615: LD_ADDR_VAR 0 5
75619: PUSH
75620: LD_VAR 0 1
75624: PPUSH
75625: LD_VAR 0 6
75629: PPUSH
75630: CALL 74917 0 2
75634: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75635: LD_VAR 0 1
75639: PPUSH
75640: LD_VAR 0 5
75644: PUSH
75645: LD_INT 1
75647: ARRAY
75648: PPUSH
75649: LD_VAR 0 5
75653: PUSH
75654: LD_INT 2
75656: ARRAY
75657: PPUSH
75658: CALL_OW 111
// end ;
75662: LD_VAR 0 3
75666: RET
// export function PrepareApemanSoldier ( ) ; begin
75667: LD_INT 0
75669: PPUSH
// uc_nation := 0 ;
75670: LD_ADDR_OWVAR 21
75674: PUSH
75675: LD_INT 0
75677: ST_TO_ADDR
// hc_sex := sex_male ;
75678: LD_ADDR_OWVAR 27
75682: PUSH
75683: LD_INT 1
75685: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75686: LD_ADDR_OWVAR 28
75690: PUSH
75691: LD_INT 15
75693: ST_TO_ADDR
// hc_gallery :=  ;
75694: LD_ADDR_OWVAR 33
75698: PUSH
75699: LD_STRING 
75701: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75702: LD_ADDR_OWVAR 31
75706: PUSH
75707: LD_INT 0
75709: PPUSH
75710: LD_INT 3
75712: PPUSH
75713: CALL_OW 12
75717: PUSH
75718: LD_INT 0
75720: PPUSH
75721: LD_INT 3
75723: PPUSH
75724: CALL_OW 12
75728: PUSH
75729: LD_INT 0
75731: PUSH
75732: LD_INT 0
75734: PUSH
75735: EMPTY
75736: LIST
75737: LIST
75738: LIST
75739: LIST
75740: ST_TO_ADDR
// end ;
75741: LD_VAR 0 1
75745: RET
// export function PrepareApemanEngineer ( ) ; begin
75746: LD_INT 0
75748: PPUSH
// uc_nation := 0 ;
75749: LD_ADDR_OWVAR 21
75753: PUSH
75754: LD_INT 0
75756: ST_TO_ADDR
// hc_sex := sex_male ;
75757: LD_ADDR_OWVAR 27
75761: PUSH
75762: LD_INT 1
75764: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75765: LD_ADDR_OWVAR 28
75769: PUSH
75770: LD_INT 16
75772: ST_TO_ADDR
// hc_gallery :=  ;
75773: LD_ADDR_OWVAR 33
75777: PUSH
75778: LD_STRING 
75780: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75781: LD_ADDR_OWVAR 31
75785: PUSH
75786: LD_INT 0
75788: PPUSH
75789: LD_INT 3
75791: PPUSH
75792: CALL_OW 12
75796: PUSH
75797: LD_INT 0
75799: PPUSH
75800: LD_INT 3
75802: PPUSH
75803: CALL_OW 12
75807: PUSH
75808: LD_INT 0
75810: PUSH
75811: LD_INT 0
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: LIST
75818: LIST
75819: ST_TO_ADDR
// end ;
75820: LD_VAR 0 1
75824: RET
// export function PrepareApeman ( agressivity ) ; begin
75825: LD_INT 0
75827: PPUSH
// uc_side := 0 ;
75828: LD_ADDR_OWVAR 20
75832: PUSH
75833: LD_INT 0
75835: ST_TO_ADDR
// uc_nation := 0 ;
75836: LD_ADDR_OWVAR 21
75840: PUSH
75841: LD_INT 0
75843: ST_TO_ADDR
// hc_sex := sex_male ;
75844: LD_ADDR_OWVAR 27
75848: PUSH
75849: LD_INT 1
75851: ST_TO_ADDR
// hc_class := class_apeman ;
75852: LD_ADDR_OWVAR 28
75856: PUSH
75857: LD_INT 12
75859: ST_TO_ADDR
// hc_gallery :=  ;
75860: LD_ADDR_OWVAR 33
75864: PUSH
75865: LD_STRING 
75867: ST_TO_ADDR
// if agressivity = 0 then
75868: LD_VAR 0 1
75872: PUSH
75873: LD_INT 0
75875: EQUAL
75876: IFFALSE 75888
// hc_agressivity := 0 else
75878: LD_ADDR_OWVAR 35
75882: PUSH
75883: LD_INT 0
75885: ST_TO_ADDR
75886: GO 75909
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75888: LD_ADDR_OWVAR 35
75892: PUSH
75893: LD_VAR 0 1
75897: NEG
75898: PPUSH
75899: LD_VAR 0 1
75903: PPUSH
75904: CALL_OW 12
75908: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75909: LD_ADDR_OWVAR 31
75913: PUSH
75914: LD_INT 0
75916: PPUSH
75917: LD_INT 3
75919: PPUSH
75920: CALL_OW 12
75924: PUSH
75925: LD_INT 0
75927: PPUSH
75928: LD_INT 3
75930: PPUSH
75931: CALL_OW 12
75935: PUSH
75936: LD_INT 0
75938: PUSH
75939: LD_INT 0
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: LIST
75946: LIST
75947: ST_TO_ADDR
// end ;
75948: LD_VAR 0 2
75952: RET
// export function PrepareTiger ( agressivity ) ; begin
75953: LD_INT 0
75955: PPUSH
// uc_side := 0 ;
75956: LD_ADDR_OWVAR 20
75960: PUSH
75961: LD_INT 0
75963: ST_TO_ADDR
// uc_nation := 0 ;
75964: LD_ADDR_OWVAR 21
75968: PUSH
75969: LD_INT 0
75971: ST_TO_ADDR
// hc_class := class_tiger ;
75972: LD_ADDR_OWVAR 28
75976: PUSH
75977: LD_INT 14
75979: ST_TO_ADDR
// hc_gallery :=  ;
75980: LD_ADDR_OWVAR 33
75984: PUSH
75985: LD_STRING 
75987: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75988: LD_ADDR_OWVAR 35
75992: PUSH
75993: LD_VAR 0 1
75997: NEG
75998: PPUSH
75999: LD_VAR 0 1
76003: PPUSH
76004: CALL_OW 12
76008: ST_TO_ADDR
// end ;
76009: LD_VAR 0 2
76013: RET
// export function PrepareEnchidna ( ) ; begin
76014: LD_INT 0
76016: PPUSH
// uc_side := 0 ;
76017: LD_ADDR_OWVAR 20
76021: PUSH
76022: LD_INT 0
76024: ST_TO_ADDR
// uc_nation := 0 ;
76025: LD_ADDR_OWVAR 21
76029: PUSH
76030: LD_INT 0
76032: ST_TO_ADDR
// hc_class := class_baggie ;
76033: LD_ADDR_OWVAR 28
76037: PUSH
76038: LD_INT 13
76040: ST_TO_ADDR
// hc_gallery :=  ;
76041: LD_ADDR_OWVAR 33
76045: PUSH
76046: LD_STRING 
76048: ST_TO_ADDR
// end ;
76049: LD_VAR 0 1
76053: RET
// export function PrepareFrog ( ) ; begin
76054: LD_INT 0
76056: PPUSH
// uc_side := 0 ;
76057: LD_ADDR_OWVAR 20
76061: PUSH
76062: LD_INT 0
76064: ST_TO_ADDR
// uc_nation := 0 ;
76065: LD_ADDR_OWVAR 21
76069: PUSH
76070: LD_INT 0
76072: ST_TO_ADDR
// hc_class := class_frog ;
76073: LD_ADDR_OWVAR 28
76077: PUSH
76078: LD_INT 19
76080: ST_TO_ADDR
// hc_gallery :=  ;
76081: LD_ADDR_OWVAR 33
76085: PUSH
76086: LD_STRING 
76088: ST_TO_ADDR
// end ;
76089: LD_VAR 0 1
76093: RET
// export function PrepareFish ( ) ; begin
76094: LD_INT 0
76096: PPUSH
// uc_side := 0 ;
76097: LD_ADDR_OWVAR 20
76101: PUSH
76102: LD_INT 0
76104: ST_TO_ADDR
// uc_nation := 0 ;
76105: LD_ADDR_OWVAR 21
76109: PUSH
76110: LD_INT 0
76112: ST_TO_ADDR
// hc_class := class_fish ;
76113: LD_ADDR_OWVAR 28
76117: PUSH
76118: LD_INT 20
76120: ST_TO_ADDR
// hc_gallery :=  ;
76121: LD_ADDR_OWVAR 33
76125: PUSH
76126: LD_STRING 
76128: ST_TO_ADDR
// end ;
76129: LD_VAR 0 1
76133: RET
// export function PrepareBird ( ) ; begin
76134: LD_INT 0
76136: PPUSH
// uc_side := 0 ;
76137: LD_ADDR_OWVAR 20
76141: PUSH
76142: LD_INT 0
76144: ST_TO_ADDR
// uc_nation := 0 ;
76145: LD_ADDR_OWVAR 21
76149: PUSH
76150: LD_INT 0
76152: ST_TO_ADDR
// hc_class := class_phororhacos ;
76153: LD_ADDR_OWVAR 28
76157: PUSH
76158: LD_INT 18
76160: ST_TO_ADDR
// hc_gallery :=  ;
76161: LD_ADDR_OWVAR 33
76165: PUSH
76166: LD_STRING 
76168: ST_TO_ADDR
// end ;
76169: LD_VAR 0 1
76173: RET
// export function PrepareHorse ( ) ; begin
76174: LD_INT 0
76176: PPUSH
// uc_side := 0 ;
76177: LD_ADDR_OWVAR 20
76181: PUSH
76182: LD_INT 0
76184: ST_TO_ADDR
// uc_nation := 0 ;
76185: LD_ADDR_OWVAR 21
76189: PUSH
76190: LD_INT 0
76192: ST_TO_ADDR
// hc_class := class_horse ;
76193: LD_ADDR_OWVAR 28
76197: PUSH
76198: LD_INT 21
76200: ST_TO_ADDR
// hc_gallery :=  ;
76201: LD_ADDR_OWVAR 33
76205: PUSH
76206: LD_STRING 
76208: ST_TO_ADDR
// end ;
76209: LD_VAR 0 1
76213: RET
// export function PrepareMastodont ( ) ; begin
76214: LD_INT 0
76216: PPUSH
// uc_side := 0 ;
76217: LD_ADDR_OWVAR 20
76221: PUSH
76222: LD_INT 0
76224: ST_TO_ADDR
// uc_nation := 0 ;
76225: LD_ADDR_OWVAR 21
76229: PUSH
76230: LD_INT 0
76232: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76233: LD_ADDR_OWVAR 37
76237: PUSH
76238: LD_INT 31
76240: ST_TO_ADDR
// vc_control := control_rider ;
76241: LD_ADDR_OWVAR 38
76245: PUSH
76246: LD_INT 4
76248: ST_TO_ADDR
// end ;
76249: LD_VAR 0 1
76253: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76254: LD_INT 0
76256: PPUSH
76257: PPUSH
76258: PPUSH
// uc_side = 0 ;
76259: LD_ADDR_OWVAR 20
76263: PUSH
76264: LD_INT 0
76266: ST_TO_ADDR
// uc_nation = 0 ;
76267: LD_ADDR_OWVAR 21
76271: PUSH
76272: LD_INT 0
76274: ST_TO_ADDR
// InitHc_All ( ) ;
76275: CALL_OW 584
// InitVc ;
76279: CALL_OW 20
// if mastodonts then
76283: LD_VAR 0 6
76287: IFFALSE 76354
// for i = 1 to mastodonts do
76289: LD_ADDR_VAR 0 11
76293: PUSH
76294: DOUBLE
76295: LD_INT 1
76297: DEC
76298: ST_TO_ADDR
76299: LD_VAR 0 6
76303: PUSH
76304: FOR_TO
76305: IFFALSE 76352
// begin vc_chassis := 31 ;
76307: LD_ADDR_OWVAR 37
76311: PUSH
76312: LD_INT 31
76314: ST_TO_ADDR
// vc_control := control_rider ;
76315: LD_ADDR_OWVAR 38
76319: PUSH
76320: LD_INT 4
76322: ST_TO_ADDR
// animal := CreateVehicle ;
76323: LD_ADDR_VAR 0 12
76327: PUSH
76328: CALL_OW 45
76332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76333: LD_VAR 0 12
76337: PPUSH
76338: LD_VAR 0 8
76342: PPUSH
76343: LD_INT 0
76345: PPUSH
76346: CALL 78482 0 3
// end ;
76350: GO 76304
76352: POP
76353: POP
// if horses then
76354: LD_VAR 0 5
76358: IFFALSE 76425
// for i = 1 to horses do
76360: LD_ADDR_VAR 0 11
76364: PUSH
76365: DOUBLE
76366: LD_INT 1
76368: DEC
76369: ST_TO_ADDR
76370: LD_VAR 0 5
76374: PUSH
76375: FOR_TO
76376: IFFALSE 76423
// begin hc_class := 21 ;
76378: LD_ADDR_OWVAR 28
76382: PUSH
76383: LD_INT 21
76385: ST_TO_ADDR
// hc_gallery :=  ;
76386: LD_ADDR_OWVAR 33
76390: PUSH
76391: LD_STRING 
76393: ST_TO_ADDR
// animal := CreateHuman ;
76394: LD_ADDR_VAR 0 12
76398: PUSH
76399: CALL_OW 44
76403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76404: LD_VAR 0 12
76408: PPUSH
76409: LD_VAR 0 8
76413: PPUSH
76414: LD_INT 0
76416: PPUSH
76417: CALL 78482 0 3
// end ;
76421: GO 76375
76423: POP
76424: POP
// if birds then
76425: LD_VAR 0 1
76429: IFFALSE 76496
// for i = 1 to birds do
76431: LD_ADDR_VAR 0 11
76435: PUSH
76436: DOUBLE
76437: LD_INT 1
76439: DEC
76440: ST_TO_ADDR
76441: LD_VAR 0 1
76445: PUSH
76446: FOR_TO
76447: IFFALSE 76494
// begin hc_class := 18 ;
76449: LD_ADDR_OWVAR 28
76453: PUSH
76454: LD_INT 18
76456: ST_TO_ADDR
// hc_gallery =  ;
76457: LD_ADDR_OWVAR 33
76461: PUSH
76462: LD_STRING 
76464: ST_TO_ADDR
// animal := CreateHuman ;
76465: LD_ADDR_VAR 0 12
76469: PUSH
76470: CALL_OW 44
76474: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76475: LD_VAR 0 12
76479: PPUSH
76480: LD_VAR 0 8
76484: PPUSH
76485: LD_INT 0
76487: PPUSH
76488: CALL 78482 0 3
// end ;
76492: GO 76446
76494: POP
76495: POP
// if tigers then
76496: LD_VAR 0 2
76500: IFFALSE 76584
// for i = 1 to tigers do
76502: LD_ADDR_VAR 0 11
76506: PUSH
76507: DOUBLE
76508: LD_INT 1
76510: DEC
76511: ST_TO_ADDR
76512: LD_VAR 0 2
76516: PUSH
76517: FOR_TO
76518: IFFALSE 76582
// begin hc_class = class_tiger ;
76520: LD_ADDR_OWVAR 28
76524: PUSH
76525: LD_INT 14
76527: ST_TO_ADDR
// hc_gallery =  ;
76528: LD_ADDR_OWVAR 33
76532: PUSH
76533: LD_STRING 
76535: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76536: LD_ADDR_OWVAR 35
76540: PUSH
76541: LD_INT 7
76543: NEG
76544: PPUSH
76545: LD_INT 7
76547: PPUSH
76548: CALL_OW 12
76552: ST_TO_ADDR
// animal := CreateHuman ;
76553: LD_ADDR_VAR 0 12
76557: PUSH
76558: CALL_OW 44
76562: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76563: LD_VAR 0 12
76567: PPUSH
76568: LD_VAR 0 8
76572: PPUSH
76573: LD_INT 0
76575: PPUSH
76576: CALL 78482 0 3
// end ;
76580: GO 76517
76582: POP
76583: POP
// if apemans then
76584: LD_VAR 0 3
76588: IFFALSE 76711
// for i = 1 to apemans do
76590: LD_ADDR_VAR 0 11
76594: PUSH
76595: DOUBLE
76596: LD_INT 1
76598: DEC
76599: ST_TO_ADDR
76600: LD_VAR 0 3
76604: PUSH
76605: FOR_TO
76606: IFFALSE 76709
// begin hc_class = class_apeman ;
76608: LD_ADDR_OWVAR 28
76612: PUSH
76613: LD_INT 12
76615: ST_TO_ADDR
// hc_gallery =  ;
76616: LD_ADDR_OWVAR 33
76620: PUSH
76621: LD_STRING 
76623: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76624: LD_ADDR_OWVAR 35
76628: PUSH
76629: LD_INT 2
76631: NEG
76632: PPUSH
76633: LD_INT 2
76635: PPUSH
76636: CALL_OW 12
76640: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76641: LD_ADDR_OWVAR 31
76645: PUSH
76646: LD_INT 1
76648: PPUSH
76649: LD_INT 3
76651: PPUSH
76652: CALL_OW 12
76656: PUSH
76657: LD_INT 1
76659: PPUSH
76660: LD_INT 3
76662: PPUSH
76663: CALL_OW 12
76667: PUSH
76668: LD_INT 0
76670: PUSH
76671: LD_INT 0
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: LIST
76678: LIST
76679: ST_TO_ADDR
// animal := CreateHuman ;
76680: LD_ADDR_VAR 0 12
76684: PUSH
76685: CALL_OW 44
76689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76690: LD_VAR 0 12
76694: PPUSH
76695: LD_VAR 0 8
76699: PPUSH
76700: LD_INT 0
76702: PPUSH
76703: CALL 78482 0 3
// end ;
76707: GO 76605
76709: POP
76710: POP
// if enchidnas then
76711: LD_VAR 0 4
76715: IFFALSE 76782
// for i = 1 to enchidnas do
76717: LD_ADDR_VAR 0 11
76721: PUSH
76722: DOUBLE
76723: LD_INT 1
76725: DEC
76726: ST_TO_ADDR
76727: LD_VAR 0 4
76731: PUSH
76732: FOR_TO
76733: IFFALSE 76780
// begin hc_class = 13 ;
76735: LD_ADDR_OWVAR 28
76739: PUSH
76740: LD_INT 13
76742: ST_TO_ADDR
// hc_gallery =  ;
76743: LD_ADDR_OWVAR 33
76747: PUSH
76748: LD_STRING 
76750: ST_TO_ADDR
// animal := CreateHuman ;
76751: LD_ADDR_VAR 0 12
76755: PUSH
76756: CALL_OW 44
76760: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76761: LD_VAR 0 12
76765: PPUSH
76766: LD_VAR 0 8
76770: PPUSH
76771: LD_INT 0
76773: PPUSH
76774: CALL 78482 0 3
// end ;
76778: GO 76732
76780: POP
76781: POP
// if fishes then
76782: LD_VAR 0 7
76786: IFFALSE 76853
// for i = 1 to fishes do
76788: LD_ADDR_VAR 0 11
76792: PUSH
76793: DOUBLE
76794: LD_INT 1
76796: DEC
76797: ST_TO_ADDR
76798: LD_VAR 0 7
76802: PUSH
76803: FOR_TO
76804: IFFALSE 76851
// begin hc_class = 20 ;
76806: LD_ADDR_OWVAR 28
76810: PUSH
76811: LD_INT 20
76813: ST_TO_ADDR
// hc_gallery =  ;
76814: LD_ADDR_OWVAR 33
76818: PUSH
76819: LD_STRING 
76821: ST_TO_ADDR
// animal := CreateHuman ;
76822: LD_ADDR_VAR 0 12
76826: PUSH
76827: CALL_OW 44
76831: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76832: LD_VAR 0 12
76836: PPUSH
76837: LD_VAR 0 9
76841: PPUSH
76842: LD_INT 0
76844: PPUSH
76845: CALL 78482 0 3
// end ;
76849: GO 76803
76851: POP
76852: POP
// end ;
76853: LD_VAR 0 10
76857: RET
// export function WantHeal ( sci , unit ) ; begin
76858: LD_INT 0
76860: PPUSH
// if GetTaskList ( sci ) > 0 then
76861: LD_VAR 0 1
76865: PPUSH
76866: CALL_OW 437
76870: PUSH
76871: LD_INT 0
76873: GREATER
76874: IFFALSE 76944
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76876: LD_VAR 0 1
76880: PPUSH
76881: CALL_OW 437
76885: PUSH
76886: LD_INT 1
76888: ARRAY
76889: PUSH
76890: LD_INT 1
76892: ARRAY
76893: PUSH
76894: LD_STRING l
76896: EQUAL
76897: PUSH
76898: LD_VAR 0 1
76902: PPUSH
76903: CALL_OW 437
76907: PUSH
76908: LD_INT 1
76910: ARRAY
76911: PUSH
76912: LD_INT 4
76914: ARRAY
76915: PUSH
76916: LD_VAR 0 2
76920: EQUAL
76921: AND
76922: IFFALSE 76934
// result := true else
76924: LD_ADDR_VAR 0 3
76928: PUSH
76929: LD_INT 1
76931: ST_TO_ADDR
76932: GO 76942
// result := false ;
76934: LD_ADDR_VAR 0 3
76938: PUSH
76939: LD_INT 0
76941: ST_TO_ADDR
// end else
76942: GO 76952
// result := false ;
76944: LD_ADDR_VAR 0 3
76948: PUSH
76949: LD_INT 0
76951: ST_TO_ADDR
// end ;
76952: LD_VAR 0 3
76956: RET
// export function HealTarget ( sci ) ; begin
76957: LD_INT 0
76959: PPUSH
// if not sci then
76960: LD_VAR 0 1
76964: NOT
76965: IFFALSE 76969
// exit ;
76967: GO 77034
// result := 0 ;
76969: LD_ADDR_VAR 0 2
76973: PUSH
76974: LD_INT 0
76976: ST_TO_ADDR
// if GetTaskList ( sci ) then
76977: LD_VAR 0 1
76981: PPUSH
76982: CALL_OW 437
76986: IFFALSE 77034
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76988: LD_VAR 0 1
76992: PPUSH
76993: CALL_OW 437
76997: PUSH
76998: LD_INT 1
77000: ARRAY
77001: PUSH
77002: LD_INT 1
77004: ARRAY
77005: PUSH
77006: LD_STRING l
77008: EQUAL
77009: IFFALSE 77034
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77011: LD_ADDR_VAR 0 2
77015: PUSH
77016: LD_VAR 0 1
77020: PPUSH
77021: CALL_OW 437
77025: PUSH
77026: LD_INT 1
77028: ARRAY
77029: PUSH
77030: LD_INT 4
77032: ARRAY
77033: ST_TO_ADDR
// end ;
77034: LD_VAR 0 2
77038: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77039: LD_INT 0
77041: PPUSH
77042: PPUSH
77043: PPUSH
77044: PPUSH
// if not base_units then
77045: LD_VAR 0 1
77049: NOT
77050: IFFALSE 77054
// exit ;
77052: GO 77141
// result := false ;
77054: LD_ADDR_VAR 0 2
77058: PUSH
77059: LD_INT 0
77061: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77062: LD_ADDR_VAR 0 5
77066: PUSH
77067: LD_VAR 0 1
77071: PPUSH
77072: LD_INT 21
77074: PUSH
77075: LD_INT 3
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: PPUSH
77082: CALL_OW 72
77086: ST_TO_ADDR
// if not tmp then
77087: LD_VAR 0 5
77091: NOT
77092: IFFALSE 77096
// exit ;
77094: GO 77141
// for i in tmp do
77096: LD_ADDR_VAR 0 3
77100: PUSH
77101: LD_VAR 0 5
77105: PUSH
77106: FOR_IN
77107: IFFALSE 77139
// begin result := EnemyInRange ( i , 22 ) ;
77109: LD_ADDR_VAR 0 2
77113: PUSH
77114: LD_VAR 0 3
77118: PPUSH
77119: LD_INT 22
77121: PPUSH
77122: CALL 74719 0 2
77126: ST_TO_ADDR
// if result then
77127: LD_VAR 0 2
77131: IFFALSE 77137
// exit ;
77133: POP
77134: POP
77135: GO 77141
// end ;
77137: GO 77106
77139: POP
77140: POP
// end ;
77141: LD_VAR 0 2
77145: RET
// export function FilterByTag ( units , tag ) ; begin
77146: LD_INT 0
77148: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77149: LD_ADDR_VAR 0 3
77153: PUSH
77154: LD_VAR 0 1
77158: PPUSH
77159: LD_INT 120
77161: PUSH
77162: LD_VAR 0 2
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: PPUSH
77171: CALL_OW 72
77175: ST_TO_ADDR
// end ;
77176: LD_VAR 0 3
77180: RET
// export function IsDriver ( un ) ; begin
77181: LD_INT 0
77183: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77184: LD_ADDR_VAR 0 2
77188: PUSH
77189: LD_VAR 0 1
77193: PUSH
77194: LD_INT 55
77196: PUSH
77197: EMPTY
77198: LIST
77199: PPUSH
77200: CALL_OW 69
77204: IN
77205: ST_TO_ADDR
// end ;
77206: LD_VAR 0 2
77210: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77211: LD_INT 0
77213: PPUSH
77214: PPUSH
// list := [ ] ;
77215: LD_ADDR_VAR 0 5
77219: PUSH
77220: EMPTY
77221: ST_TO_ADDR
// case d of 0 :
77222: LD_VAR 0 3
77226: PUSH
77227: LD_INT 0
77229: DOUBLE
77230: EQUAL
77231: IFTRUE 77235
77233: GO 77368
77235: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77236: LD_ADDR_VAR 0 5
77240: PUSH
77241: LD_VAR 0 1
77245: PUSH
77246: LD_INT 4
77248: MINUS
77249: PUSH
77250: LD_VAR 0 2
77254: PUSH
77255: LD_INT 4
77257: MINUS
77258: PUSH
77259: LD_INT 2
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: LIST
77266: PUSH
77267: LD_VAR 0 1
77271: PUSH
77272: LD_INT 3
77274: MINUS
77275: PUSH
77276: LD_VAR 0 2
77280: PUSH
77281: LD_INT 1
77283: PUSH
77284: EMPTY
77285: LIST
77286: LIST
77287: LIST
77288: PUSH
77289: LD_VAR 0 1
77293: PUSH
77294: LD_INT 4
77296: PLUS
77297: PUSH
77298: LD_VAR 0 2
77302: PUSH
77303: LD_INT 4
77305: PUSH
77306: EMPTY
77307: LIST
77308: LIST
77309: LIST
77310: PUSH
77311: LD_VAR 0 1
77315: PUSH
77316: LD_INT 3
77318: PLUS
77319: PUSH
77320: LD_VAR 0 2
77324: PUSH
77325: LD_INT 3
77327: PLUS
77328: PUSH
77329: LD_INT 5
77331: PUSH
77332: EMPTY
77333: LIST
77334: LIST
77335: LIST
77336: PUSH
77337: LD_VAR 0 1
77341: PUSH
77342: LD_VAR 0 2
77346: PUSH
77347: LD_INT 4
77349: PLUS
77350: PUSH
77351: LD_INT 0
77353: PUSH
77354: EMPTY
77355: LIST
77356: LIST
77357: LIST
77358: PUSH
77359: EMPTY
77360: LIST
77361: LIST
77362: LIST
77363: LIST
77364: LIST
77365: ST_TO_ADDR
// end ; 1 :
77366: GO 78066
77368: LD_INT 1
77370: DOUBLE
77371: EQUAL
77372: IFTRUE 77376
77374: GO 77509
77376: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77377: LD_ADDR_VAR 0 5
77381: PUSH
77382: LD_VAR 0 1
77386: PUSH
77387: LD_VAR 0 2
77391: PUSH
77392: LD_INT 4
77394: MINUS
77395: PUSH
77396: LD_INT 3
77398: PUSH
77399: EMPTY
77400: LIST
77401: LIST
77402: LIST
77403: PUSH
77404: LD_VAR 0 1
77408: PUSH
77409: LD_INT 3
77411: MINUS
77412: PUSH
77413: LD_VAR 0 2
77417: PUSH
77418: LD_INT 3
77420: MINUS
77421: PUSH
77422: LD_INT 2
77424: PUSH
77425: EMPTY
77426: LIST
77427: LIST
77428: LIST
77429: PUSH
77430: LD_VAR 0 1
77434: PUSH
77435: LD_INT 4
77437: MINUS
77438: PUSH
77439: LD_VAR 0 2
77443: PUSH
77444: LD_INT 1
77446: PUSH
77447: EMPTY
77448: LIST
77449: LIST
77450: LIST
77451: PUSH
77452: LD_VAR 0 1
77456: PUSH
77457: LD_VAR 0 2
77461: PUSH
77462: LD_INT 3
77464: PLUS
77465: PUSH
77466: LD_INT 0
77468: PUSH
77469: EMPTY
77470: LIST
77471: LIST
77472: LIST
77473: PUSH
77474: LD_VAR 0 1
77478: PUSH
77479: LD_INT 4
77481: PLUS
77482: PUSH
77483: LD_VAR 0 2
77487: PUSH
77488: LD_INT 4
77490: PLUS
77491: PUSH
77492: LD_INT 5
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: LIST
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: LIST
77504: LIST
77505: LIST
77506: ST_TO_ADDR
// end ; 2 :
77507: GO 78066
77509: LD_INT 2
77511: DOUBLE
77512: EQUAL
77513: IFTRUE 77517
77515: GO 77646
77517: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77518: LD_ADDR_VAR 0 5
77522: PUSH
77523: LD_VAR 0 1
77527: PUSH
77528: LD_VAR 0 2
77532: PUSH
77533: LD_INT 3
77535: MINUS
77536: PUSH
77537: LD_INT 3
77539: PUSH
77540: EMPTY
77541: LIST
77542: LIST
77543: LIST
77544: PUSH
77545: LD_VAR 0 1
77549: PUSH
77550: LD_INT 4
77552: PLUS
77553: PUSH
77554: LD_VAR 0 2
77558: PUSH
77559: LD_INT 4
77561: PUSH
77562: EMPTY
77563: LIST
77564: LIST
77565: LIST
77566: PUSH
77567: LD_VAR 0 1
77571: PUSH
77572: LD_VAR 0 2
77576: PUSH
77577: LD_INT 4
77579: PLUS
77580: PUSH
77581: LD_INT 0
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: LIST
77588: PUSH
77589: LD_VAR 0 1
77593: PUSH
77594: LD_INT 3
77596: MINUS
77597: PUSH
77598: LD_VAR 0 2
77602: PUSH
77603: LD_INT 1
77605: PUSH
77606: EMPTY
77607: LIST
77608: LIST
77609: LIST
77610: PUSH
77611: LD_VAR 0 1
77615: PUSH
77616: LD_INT 4
77618: MINUS
77619: PUSH
77620: LD_VAR 0 2
77624: PUSH
77625: LD_INT 4
77627: MINUS
77628: PUSH
77629: LD_INT 2
77631: PUSH
77632: EMPTY
77633: LIST
77634: LIST
77635: LIST
77636: PUSH
77637: EMPTY
77638: LIST
77639: LIST
77640: LIST
77641: LIST
77642: LIST
77643: ST_TO_ADDR
// end ; 3 :
77644: GO 78066
77646: LD_INT 3
77648: DOUBLE
77649: EQUAL
77650: IFTRUE 77654
77652: GO 77787
77654: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77655: LD_ADDR_VAR 0 5
77659: PUSH
77660: LD_VAR 0 1
77664: PUSH
77665: LD_INT 3
77667: PLUS
77668: PUSH
77669: LD_VAR 0 2
77673: PUSH
77674: LD_INT 4
77676: PUSH
77677: EMPTY
77678: LIST
77679: LIST
77680: LIST
77681: PUSH
77682: LD_VAR 0 1
77686: PUSH
77687: LD_INT 4
77689: PLUS
77690: PUSH
77691: LD_VAR 0 2
77695: PUSH
77696: LD_INT 4
77698: PLUS
77699: PUSH
77700: LD_INT 5
77702: PUSH
77703: EMPTY
77704: LIST
77705: LIST
77706: LIST
77707: PUSH
77708: LD_VAR 0 1
77712: PUSH
77713: LD_INT 4
77715: MINUS
77716: PUSH
77717: LD_VAR 0 2
77721: PUSH
77722: LD_INT 1
77724: PUSH
77725: EMPTY
77726: LIST
77727: LIST
77728: LIST
77729: PUSH
77730: LD_VAR 0 1
77734: PUSH
77735: LD_VAR 0 2
77739: PUSH
77740: LD_INT 4
77742: MINUS
77743: PUSH
77744: LD_INT 3
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: LIST
77751: PUSH
77752: LD_VAR 0 1
77756: PUSH
77757: LD_INT 3
77759: MINUS
77760: PUSH
77761: LD_VAR 0 2
77765: PUSH
77766: LD_INT 3
77768: MINUS
77769: PUSH
77770: LD_INT 2
77772: PUSH
77773: EMPTY
77774: LIST
77775: LIST
77776: LIST
77777: PUSH
77778: EMPTY
77779: LIST
77780: LIST
77781: LIST
77782: LIST
77783: LIST
77784: ST_TO_ADDR
// end ; 4 :
77785: GO 78066
77787: LD_INT 4
77789: DOUBLE
77790: EQUAL
77791: IFTRUE 77795
77793: GO 77928
77795: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77796: LD_ADDR_VAR 0 5
77800: PUSH
77801: LD_VAR 0 1
77805: PUSH
77806: LD_VAR 0 2
77810: PUSH
77811: LD_INT 4
77813: PLUS
77814: PUSH
77815: LD_INT 0
77817: PUSH
77818: EMPTY
77819: LIST
77820: LIST
77821: LIST
77822: PUSH
77823: LD_VAR 0 1
77827: PUSH
77828: LD_INT 3
77830: PLUS
77831: PUSH
77832: LD_VAR 0 2
77836: PUSH
77837: LD_INT 3
77839: PLUS
77840: PUSH
77841: LD_INT 5
77843: PUSH
77844: EMPTY
77845: LIST
77846: LIST
77847: LIST
77848: PUSH
77849: LD_VAR 0 1
77853: PUSH
77854: LD_INT 4
77856: PLUS
77857: PUSH
77858: LD_VAR 0 2
77862: PUSH
77863: LD_INT 4
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: LIST
77870: PUSH
77871: LD_VAR 0 1
77875: PUSH
77876: LD_VAR 0 2
77880: PUSH
77881: LD_INT 3
77883: MINUS
77884: PUSH
77885: LD_INT 3
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: LIST
77892: PUSH
77893: LD_VAR 0 1
77897: PUSH
77898: LD_INT 4
77900: MINUS
77901: PUSH
77902: LD_VAR 0 2
77906: PUSH
77907: LD_INT 4
77909: MINUS
77910: PUSH
77911: LD_INT 2
77913: PUSH
77914: EMPTY
77915: LIST
77916: LIST
77917: LIST
77918: PUSH
77919: EMPTY
77920: LIST
77921: LIST
77922: LIST
77923: LIST
77924: LIST
77925: ST_TO_ADDR
// end ; 5 :
77926: GO 78066
77928: LD_INT 5
77930: DOUBLE
77931: EQUAL
77932: IFTRUE 77936
77934: GO 78065
77936: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77937: LD_ADDR_VAR 0 5
77941: PUSH
77942: LD_VAR 0 1
77946: PUSH
77947: LD_INT 4
77949: MINUS
77950: PUSH
77951: LD_VAR 0 2
77955: PUSH
77956: LD_INT 1
77958: PUSH
77959: EMPTY
77960: LIST
77961: LIST
77962: LIST
77963: PUSH
77964: LD_VAR 0 1
77968: PUSH
77969: LD_VAR 0 2
77973: PUSH
77974: LD_INT 4
77976: MINUS
77977: PUSH
77978: LD_INT 3
77980: PUSH
77981: EMPTY
77982: LIST
77983: LIST
77984: LIST
77985: PUSH
77986: LD_VAR 0 1
77990: PUSH
77991: LD_INT 4
77993: PLUS
77994: PUSH
77995: LD_VAR 0 2
77999: PUSH
78000: LD_INT 4
78002: PLUS
78003: PUSH
78004: LD_INT 5
78006: PUSH
78007: EMPTY
78008: LIST
78009: LIST
78010: LIST
78011: PUSH
78012: LD_VAR 0 1
78016: PUSH
78017: LD_INT 3
78019: PLUS
78020: PUSH
78021: LD_VAR 0 2
78025: PUSH
78026: LD_INT 4
78028: PUSH
78029: EMPTY
78030: LIST
78031: LIST
78032: LIST
78033: PUSH
78034: LD_VAR 0 1
78038: PUSH
78039: LD_VAR 0 2
78043: PUSH
78044: LD_INT 3
78046: PLUS
78047: PUSH
78048: LD_INT 0
78050: PUSH
78051: EMPTY
78052: LIST
78053: LIST
78054: LIST
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: LIST
78060: LIST
78061: LIST
78062: ST_TO_ADDR
// end ; end ;
78063: GO 78066
78065: POP
// result := list ;
78066: LD_ADDR_VAR 0 4
78070: PUSH
78071: LD_VAR 0 5
78075: ST_TO_ADDR
// end ;
78076: LD_VAR 0 4
78080: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78081: LD_INT 0
78083: PPUSH
78084: PPUSH
78085: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78086: LD_VAR 0 1
78090: NOT
78091: PUSH
78092: LD_VAR 0 2
78096: PUSH
78097: LD_INT 1
78099: PUSH
78100: LD_INT 2
78102: PUSH
78103: LD_INT 3
78105: PUSH
78106: LD_INT 4
78108: PUSH
78109: EMPTY
78110: LIST
78111: LIST
78112: LIST
78113: LIST
78114: IN
78115: NOT
78116: OR
78117: IFFALSE 78121
// exit ;
78119: GO 78204
// tmp := [ ] ;
78121: LD_ADDR_VAR 0 5
78125: PUSH
78126: EMPTY
78127: ST_TO_ADDR
// for i in units do
78128: LD_ADDR_VAR 0 4
78132: PUSH
78133: LD_VAR 0 1
78137: PUSH
78138: FOR_IN
78139: IFFALSE 78173
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78141: LD_ADDR_VAR 0 5
78145: PUSH
78146: LD_VAR 0 5
78150: PPUSH
78151: LD_VAR 0 4
78155: PPUSH
78156: LD_VAR 0 2
78160: PPUSH
78161: CALL_OW 259
78165: PPUSH
78166: CALL 79577 0 2
78170: ST_TO_ADDR
78171: GO 78138
78173: POP
78174: POP
// if not tmp then
78175: LD_VAR 0 5
78179: NOT
78180: IFFALSE 78184
// exit ;
78182: GO 78204
// result := SortListByListDesc ( units , tmp ) ;
78184: LD_ADDR_VAR 0 3
78188: PUSH
78189: LD_VAR 0 1
78193: PPUSH
78194: LD_VAR 0 5
78198: PPUSH
78199: CALL_OW 77
78203: ST_TO_ADDR
// end ;
78204: LD_VAR 0 3
78208: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78209: LD_INT 0
78211: PPUSH
78212: PPUSH
78213: PPUSH
// result := false ;
78214: LD_ADDR_VAR 0 3
78218: PUSH
78219: LD_INT 0
78221: ST_TO_ADDR
// if not building then
78222: LD_VAR 0 2
78226: NOT
78227: IFFALSE 78231
// exit ;
78229: GO 78369
// x := GetX ( building ) ;
78231: LD_ADDR_VAR 0 4
78235: PUSH
78236: LD_VAR 0 2
78240: PPUSH
78241: CALL_OW 250
78245: ST_TO_ADDR
// y := GetY ( building ) ;
78246: LD_ADDR_VAR 0 5
78250: PUSH
78251: LD_VAR 0 2
78255: PPUSH
78256: CALL_OW 251
78260: ST_TO_ADDR
// if not x or not y then
78261: LD_VAR 0 4
78265: NOT
78266: PUSH
78267: LD_VAR 0 5
78271: NOT
78272: OR
78273: IFFALSE 78277
// exit ;
78275: GO 78369
// if GetTaskList ( unit ) then
78277: LD_VAR 0 1
78281: PPUSH
78282: CALL_OW 437
78286: IFFALSE 78369
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78288: LD_STRING e
78290: PUSH
78291: LD_VAR 0 1
78295: PPUSH
78296: CALL_OW 437
78300: PUSH
78301: LD_INT 1
78303: ARRAY
78304: PUSH
78305: LD_INT 1
78307: ARRAY
78308: EQUAL
78309: PUSH
78310: LD_VAR 0 4
78314: PUSH
78315: LD_VAR 0 1
78319: PPUSH
78320: CALL_OW 437
78324: PUSH
78325: LD_INT 1
78327: ARRAY
78328: PUSH
78329: LD_INT 2
78331: ARRAY
78332: EQUAL
78333: AND
78334: PUSH
78335: LD_VAR 0 5
78339: PUSH
78340: LD_VAR 0 1
78344: PPUSH
78345: CALL_OW 437
78349: PUSH
78350: LD_INT 1
78352: ARRAY
78353: PUSH
78354: LD_INT 3
78356: ARRAY
78357: EQUAL
78358: AND
78359: IFFALSE 78369
// result := true end ;
78361: LD_ADDR_VAR 0 3
78365: PUSH
78366: LD_INT 1
78368: ST_TO_ADDR
// end ;
78369: LD_VAR 0 3
78373: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78374: LD_INT 0
78376: PPUSH
// result := false ;
78377: LD_ADDR_VAR 0 4
78381: PUSH
78382: LD_INT 0
78384: ST_TO_ADDR
// if GetTaskList ( unit ) then
78385: LD_VAR 0 1
78389: PPUSH
78390: CALL_OW 437
78394: IFFALSE 78477
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78396: LD_STRING M
78398: PUSH
78399: LD_VAR 0 1
78403: PPUSH
78404: CALL_OW 437
78408: PUSH
78409: LD_INT 1
78411: ARRAY
78412: PUSH
78413: LD_INT 1
78415: ARRAY
78416: EQUAL
78417: PUSH
78418: LD_VAR 0 2
78422: PUSH
78423: LD_VAR 0 1
78427: PPUSH
78428: CALL_OW 437
78432: PUSH
78433: LD_INT 1
78435: ARRAY
78436: PUSH
78437: LD_INT 2
78439: ARRAY
78440: EQUAL
78441: AND
78442: PUSH
78443: LD_VAR 0 3
78447: PUSH
78448: LD_VAR 0 1
78452: PPUSH
78453: CALL_OW 437
78457: PUSH
78458: LD_INT 1
78460: ARRAY
78461: PUSH
78462: LD_INT 3
78464: ARRAY
78465: EQUAL
78466: AND
78467: IFFALSE 78477
// result := true ;
78469: LD_ADDR_VAR 0 4
78473: PUSH
78474: LD_INT 1
78476: ST_TO_ADDR
// end ; end ;
78477: LD_VAR 0 4
78481: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78482: LD_INT 0
78484: PPUSH
78485: PPUSH
78486: PPUSH
78487: PPUSH
// if not unit or not area then
78488: LD_VAR 0 1
78492: NOT
78493: PUSH
78494: LD_VAR 0 2
78498: NOT
78499: OR
78500: IFFALSE 78504
// exit ;
78502: GO 78680
// tmp := AreaToList ( area , i ) ;
78504: LD_ADDR_VAR 0 6
78508: PUSH
78509: LD_VAR 0 2
78513: PPUSH
78514: LD_VAR 0 5
78518: PPUSH
78519: CALL_OW 517
78523: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78524: LD_ADDR_VAR 0 5
78528: PUSH
78529: DOUBLE
78530: LD_INT 1
78532: DEC
78533: ST_TO_ADDR
78534: LD_VAR 0 6
78538: PUSH
78539: LD_INT 1
78541: ARRAY
78542: PUSH
78543: FOR_TO
78544: IFFALSE 78678
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78546: LD_ADDR_VAR 0 7
78550: PUSH
78551: LD_VAR 0 6
78555: PUSH
78556: LD_INT 1
78558: ARRAY
78559: PUSH
78560: LD_VAR 0 5
78564: ARRAY
78565: PUSH
78566: LD_VAR 0 6
78570: PUSH
78571: LD_INT 2
78573: ARRAY
78574: PUSH
78575: LD_VAR 0 5
78579: ARRAY
78580: PUSH
78581: EMPTY
78582: LIST
78583: LIST
78584: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78585: LD_INT 92
78587: PUSH
78588: LD_VAR 0 7
78592: PUSH
78593: LD_INT 1
78595: ARRAY
78596: PUSH
78597: LD_VAR 0 7
78601: PUSH
78602: LD_INT 2
78604: ARRAY
78605: PUSH
78606: LD_INT 2
78608: PUSH
78609: EMPTY
78610: LIST
78611: LIST
78612: LIST
78613: LIST
78614: PPUSH
78615: CALL_OW 69
78619: PUSH
78620: LD_INT 0
78622: EQUAL
78623: IFFALSE 78676
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78625: LD_VAR 0 1
78629: PPUSH
78630: LD_VAR 0 7
78634: PUSH
78635: LD_INT 1
78637: ARRAY
78638: PPUSH
78639: LD_VAR 0 7
78643: PUSH
78644: LD_INT 2
78646: ARRAY
78647: PPUSH
78648: LD_VAR 0 3
78652: PPUSH
78653: CALL_OW 48
// result := IsPlaced ( unit ) ;
78657: LD_ADDR_VAR 0 4
78661: PUSH
78662: LD_VAR 0 1
78666: PPUSH
78667: CALL_OW 305
78671: ST_TO_ADDR
// exit ;
78672: POP
78673: POP
78674: GO 78680
// end ; end ;
78676: GO 78543
78678: POP
78679: POP
// end ;
78680: LD_VAR 0 4
78684: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78685: LD_INT 0
78687: PPUSH
78688: PPUSH
78689: PPUSH
// if not side or side > 8 then
78690: LD_VAR 0 1
78694: NOT
78695: PUSH
78696: LD_VAR 0 1
78700: PUSH
78701: LD_INT 8
78703: GREATER
78704: OR
78705: IFFALSE 78709
// exit ;
78707: GO 78896
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78709: LD_ADDR_VAR 0 4
78713: PUSH
78714: LD_INT 22
78716: PUSH
78717: LD_VAR 0 1
78721: PUSH
78722: EMPTY
78723: LIST
78724: LIST
78725: PUSH
78726: LD_INT 21
78728: PUSH
78729: LD_INT 3
78731: PUSH
78732: EMPTY
78733: LIST
78734: LIST
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: PPUSH
78740: CALL_OW 69
78744: ST_TO_ADDR
// if not tmp then
78745: LD_VAR 0 4
78749: NOT
78750: IFFALSE 78754
// exit ;
78752: GO 78896
// enable_addtolog := true ;
78754: LD_ADDR_OWVAR 81
78758: PUSH
78759: LD_INT 1
78761: ST_TO_ADDR
// AddToLog ( [ ) ;
78762: LD_STRING [
78764: PPUSH
78765: CALL_OW 561
// for i in tmp do
78769: LD_ADDR_VAR 0 3
78773: PUSH
78774: LD_VAR 0 4
78778: PUSH
78779: FOR_IN
78780: IFFALSE 78887
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78782: LD_STRING [
78784: PUSH
78785: LD_VAR 0 3
78789: PPUSH
78790: CALL_OW 266
78794: STR
78795: PUSH
78796: LD_STRING , 
78798: STR
78799: PUSH
78800: LD_VAR 0 3
78804: PPUSH
78805: CALL_OW 250
78809: STR
78810: PUSH
78811: LD_STRING , 
78813: STR
78814: PUSH
78815: LD_VAR 0 3
78819: PPUSH
78820: CALL_OW 251
78824: STR
78825: PUSH
78826: LD_STRING , 
78828: STR
78829: PUSH
78830: LD_VAR 0 3
78834: PPUSH
78835: CALL_OW 254
78839: STR
78840: PUSH
78841: LD_STRING , 
78843: STR
78844: PUSH
78845: LD_VAR 0 3
78849: PPUSH
78850: LD_INT 1
78852: PPUSH
78853: CALL_OW 268
78857: STR
78858: PUSH
78859: LD_STRING , 
78861: STR
78862: PUSH
78863: LD_VAR 0 3
78867: PPUSH
78868: LD_INT 2
78870: PPUSH
78871: CALL_OW 268
78875: STR
78876: PUSH
78877: LD_STRING ],
78879: STR
78880: PPUSH
78881: CALL_OW 561
// end ;
78885: GO 78779
78887: POP
78888: POP
// AddToLog ( ]; ) ;
78889: LD_STRING ];
78891: PPUSH
78892: CALL_OW 561
// end ;
78896: LD_VAR 0 2
78900: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78901: LD_INT 0
78903: PPUSH
78904: PPUSH
78905: PPUSH
78906: PPUSH
78907: PPUSH
// if not area or not rate or not max then
78908: LD_VAR 0 1
78912: NOT
78913: PUSH
78914: LD_VAR 0 2
78918: NOT
78919: OR
78920: PUSH
78921: LD_VAR 0 4
78925: NOT
78926: OR
78927: IFFALSE 78931
// exit ;
78929: GO 79120
// while 1 do
78931: LD_INT 1
78933: IFFALSE 79120
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78935: LD_ADDR_VAR 0 9
78939: PUSH
78940: LD_VAR 0 1
78944: PPUSH
78945: LD_INT 1
78947: PPUSH
78948: CALL_OW 287
78952: PUSH
78953: LD_INT 10
78955: MUL
78956: ST_TO_ADDR
// r := rate / 10 ;
78957: LD_ADDR_VAR 0 7
78961: PUSH
78962: LD_VAR 0 2
78966: PUSH
78967: LD_INT 10
78969: DIVREAL
78970: ST_TO_ADDR
// time := 1 1$00 ;
78971: LD_ADDR_VAR 0 8
78975: PUSH
78976: LD_INT 2100
78978: ST_TO_ADDR
// if amount < min then
78979: LD_VAR 0 9
78983: PUSH
78984: LD_VAR 0 3
78988: LESS
78989: IFFALSE 79007
// r := r * 2 else
78991: LD_ADDR_VAR 0 7
78995: PUSH
78996: LD_VAR 0 7
79000: PUSH
79001: LD_INT 2
79003: MUL
79004: ST_TO_ADDR
79005: GO 79033
// if amount > max then
79007: LD_VAR 0 9
79011: PUSH
79012: LD_VAR 0 4
79016: GREATER
79017: IFFALSE 79033
// r := r / 2 ;
79019: LD_ADDR_VAR 0 7
79023: PUSH
79024: LD_VAR 0 7
79028: PUSH
79029: LD_INT 2
79031: DIVREAL
79032: ST_TO_ADDR
// time := time / r ;
79033: LD_ADDR_VAR 0 8
79037: PUSH
79038: LD_VAR 0 8
79042: PUSH
79043: LD_VAR 0 7
79047: DIVREAL
79048: ST_TO_ADDR
// if time < 0 then
79049: LD_VAR 0 8
79053: PUSH
79054: LD_INT 0
79056: LESS
79057: IFFALSE 79074
// time := time * - 1 ;
79059: LD_ADDR_VAR 0 8
79063: PUSH
79064: LD_VAR 0 8
79068: PUSH
79069: LD_INT 1
79071: NEG
79072: MUL
79073: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79074: LD_VAR 0 8
79078: PUSH
79079: LD_INT 35
79081: PPUSH
79082: LD_INT 875
79084: PPUSH
79085: CALL_OW 12
79089: PLUS
79090: PPUSH
79091: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79095: LD_INT 1
79097: PPUSH
79098: LD_INT 5
79100: PPUSH
79101: CALL_OW 12
79105: PPUSH
79106: LD_VAR 0 1
79110: PPUSH
79111: LD_INT 1
79113: PPUSH
79114: CALL_OW 55
// end ;
79118: GO 78931
// end ;
79120: LD_VAR 0 5
79124: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79125: LD_INT 0
79127: PPUSH
79128: PPUSH
79129: PPUSH
79130: PPUSH
79131: PPUSH
79132: PPUSH
79133: PPUSH
79134: PPUSH
// if not turrets or not factories then
79135: LD_VAR 0 1
79139: NOT
79140: PUSH
79141: LD_VAR 0 2
79145: NOT
79146: OR
79147: IFFALSE 79151
// exit ;
79149: GO 79458
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79151: LD_ADDR_VAR 0 10
79155: PUSH
79156: LD_INT 5
79158: PUSH
79159: LD_INT 6
79161: PUSH
79162: EMPTY
79163: LIST
79164: LIST
79165: PUSH
79166: LD_INT 2
79168: PUSH
79169: LD_INT 4
79171: PUSH
79172: EMPTY
79173: LIST
79174: LIST
79175: PUSH
79176: LD_INT 3
79178: PUSH
79179: LD_INT 5
79181: PUSH
79182: EMPTY
79183: LIST
79184: LIST
79185: PUSH
79186: EMPTY
79187: LIST
79188: LIST
79189: LIST
79190: PUSH
79191: LD_INT 24
79193: PUSH
79194: LD_INT 25
79196: PUSH
79197: EMPTY
79198: LIST
79199: LIST
79200: PUSH
79201: LD_INT 23
79203: PUSH
79204: LD_INT 27
79206: PUSH
79207: EMPTY
79208: LIST
79209: LIST
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: PUSH
79215: LD_INT 42
79217: PUSH
79218: LD_INT 43
79220: PUSH
79221: EMPTY
79222: LIST
79223: LIST
79224: PUSH
79225: LD_INT 44
79227: PUSH
79228: LD_INT 46
79230: PUSH
79231: EMPTY
79232: LIST
79233: LIST
79234: PUSH
79235: LD_INT 45
79237: PUSH
79238: LD_INT 47
79240: PUSH
79241: EMPTY
79242: LIST
79243: LIST
79244: PUSH
79245: EMPTY
79246: LIST
79247: LIST
79248: LIST
79249: PUSH
79250: EMPTY
79251: LIST
79252: LIST
79253: LIST
79254: ST_TO_ADDR
// result := [ ] ;
79255: LD_ADDR_VAR 0 3
79259: PUSH
79260: EMPTY
79261: ST_TO_ADDR
// for i in turrets do
79262: LD_ADDR_VAR 0 4
79266: PUSH
79267: LD_VAR 0 1
79271: PUSH
79272: FOR_IN
79273: IFFALSE 79456
// begin nat := GetNation ( i ) ;
79275: LD_ADDR_VAR 0 7
79279: PUSH
79280: LD_VAR 0 4
79284: PPUSH
79285: CALL_OW 248
79289: ST_TO_ADDR
// weapon := 0 ;
79290: LD_ADDR_VAR 0 8
79294: PUSH
79295: LD_INT 0
79297: ST_TO_ADDR
// if not nat then
79298: LD_VAR 0 7
79302: NOT
79303: IFFALSE 79307
// continue ;
79305: GO 79272
// for j in list [ nat ] do
79307: LD_ADDR_VAR 0 5
79311: PUSH
79312: LD_VAR 0 10
79316: PUSH
79317: LD_VAR 0 7
79321: ARRAY
79322: PUSH
79323: FOR_IN
79324: IFFALSE 79365
// if GetBWeapon ( i ) = j [ 1 ] then
79326: LD_VAR 0 4
79330: PPUSH
79331: CALL_OW 269
79335: PUSH
79336: LD_VAR 0 5
79340: PUSH
79341: LD_INT 1
79343: ARRAY
79344: EQUAL
79345: IFFALSE 79363
// begin weapon := j [ 2 ] ;
79347: LD_ADDR_VAR 0 8
79351: PUSH
79352: LD_VAR 0 5
79356: PUSH
79357: LD_INT 2
79359: ARRAY
79360: ST_TO_ADDR
// break ;
79361: GO 79365
// end ;
79363: GO 79323
79365: POP
79366: POP
// if not weapon then
79367: LD_VAR 0 8
79371: NOT
79372: IFFALSE 79376
// continue ;
79374: GO 79272
// for k in factories do
79376: LD_ADDR_VAR 0 6
79380: PUSH
79381: LD_VAR 0 2
79385: PUSH
79386: FOR_IN
79387: IFFALSE 79452
// begin weapons := AvailableWeaponList ( k ) ;
79389: LD_ADDR_VAR 0 9
79393: PUSH
79394: LD_VAR 0 6
79398: PPUSH
79399: CALL_OW 478
79403: ST_TO_ADDR
// if not weapons then
79404: LD_VAR 0 9
79408: NOT
79409: IFFALSE 79413
// continue ;
79411: GO 79386
// if weapon in weapons then
79413: LD_VAR 0 8
79417: PUSH
79418: LD_VAR 0 9
79422: IN
79423: IFFALSE 79450
// begin result := [ i , weapon ] ;
79425: LD_ADDR_VAR 0 3
79429: PUSH
79430: LD_VAR 0 4
79434: PUSH
79435: LD_VAR 0 8
79439: PUSH
79440: EMPTY
79441: LIST
79442: LIST
79443: ST_TO_ADDR
// exit ;
79444: POP
79445: POP
79446: POP
79447: POP
79448: GO 79458
// end ; end ;
79450: GO 79386
79452: POP
79453: POP
// end ;
79454: GO 79272
79456: POP
79457: POP
// end ;
79458: LD_VAR 0 3
79462: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79463: LD_INT 0
79465: PPUSH
// if not side or side > 8 then
79466: LD_VAR 0 3
79470: NOT
79471: PUSH
79472: LD_VAR 0 3
79476: PUSH
79477: LD_INT 8
79479: GREATER
79480: OR
79481: IFFALSE 79485
// exit ;
79483: GO 79544
// if not range then
79485: LD_VAR 0 4
79489: NOT
79490: IFFALSE 79501
// range := - 12 ;
79492: LD_ADDR_VAR 0 4
79496: PUSH
79497: LD_INT 12
79499: NEG
79500: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79501: LD_VAR 0 1
79505: PPUSH
79506: LD_VAR 0 2
79510: PPUSH
79511: LD_VAR 0 3
79515: PPUSH
79516: LD_VAR 0 4
79520: PPUSH
79521: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79525: LD_VAR 0 1
79529: PPUSH
79530: LD_VAR 0 2
79534: PPUSH
79535: LD_VAR 0 3
79539: PPUSH
79540: CALL_OW 331
// end ;
79544: LD_VAR 0 5
79548: RET
// export function Video ( mode ) ; begin
79549: LD_INT 0
79551: PPUSH
// ingame_video = mode ;
79552: LD_ADDR_OWVAR 52
79556: PUSH
79557: LD_VAR 0 1
79561: ST_TO_ADDR
// interface_hidden = mode ;
79562: LD_ADDR_OWVAR 54
79566: PUSH
79567: LD_VAR 0 1
79571: ST_TO_ADDR
// end ;
79572: LD_VAR 0 2
79576: RET
// export function Join ( array , element ) ; begin
79577: LD_INT 0
79579: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79580: LD_ADDR_VAR 0 3
79584: PUSH
79585: LD_VAR 0 1
79589: PPUSH
79590: LD_VAR 0 1
79594: PUSH
79595: LD_INT 1
79597: PLUS
79598: PPUSH
79599: LD_VAR 0 2
79603: PPUSH
79604: CALL_OW 1
79608: ST_TO_ADDR
// end ;
79609: LD_VAR 0 3
79613: RET
// export function JoinUnion ( array , element ) ; begin
79614: LD_INT 0
79616: PPUSH
// result := array union element ;
79617: LD_ADDR_VAR 0 3
79621: PUSH
79622: LD_VAR 0 1
79626: PUSH
79627: LD_VAR 0 2
79631: UNION
79632: ST_TO_ADDR
// end ;
79633: LD_VAR 0 3
79637: RET
// export function GetBehemoths ( side ) ; begin
79638: LD_INT 0
79640: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79641: LD_ADDR_VAR 0 2
79645: PUSH
79646: LD_INT 22
79648: PUSH
79649: LD_VAR 0 1
79653: PUSH
79654: EMPTY
79655: LIST
79656: LIST
79657: PUSH
79658: LD_INT 31
79660: PUSH
79661: LD_INT 25
79663: PUSH
79664: EMPTY
79665: LIST
79666: LIST
79667: PUSH
79668: EMPTY
79669: LIST
79670: LIST
79671: PPUSH
79672: CALL_OW 69
79676: ST_TO_ADDR
// end ;
79677: LD_VAR 0 2
79681: RET
// export function Shuffle ( array ) ; var i , index ; begin
79682: LD_INT 0
79684: PPUSH
79685: PPUSH
79686: PPUSH
// result := [ ] ;
79687: LD_ADDR_VAR 0 2
79691: PUSH
79692: EMPTY
79693: ST_TO_ADDR
// if not array then
79694: LD_VAR 0 1
79698: NOT
79699: IFFALSE 79703
// exit ;
79701: GO 79802
// Randomize ;
79703: CALL_OW 10
// for i = array downto 1 do
79707: LD_ADDR_VAR 0 3
79711: PUSH
79712: DOUBLE
79713: LD_VAR 0 1
79717: INC
79718: ST_TO_ADDR
79719: LD_INT 1
79721: PUSH
79722: FOR_DOWNTO
79723: IFFALSE 79800
// begin index := rand ( 1 , array ) ;
79725: LD_ADDR_VAR 0 4
79729: PUSH
79730: LD_INT 1
79732: PPUSH
79733: LD_VAR 0 1
79737: PPUSH
79738: CALL_OW 12
79742: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79743: LD_ADDR_VAR 0 2
79747: PUSH
79748: LD_VAR 0 2
79752: PPUSH
79753: LD_VAR 0 2
79757: PUSH
79758: LD_INT 1
79760: PLUS
79761: PPUSH
79762: LD_VAR 0 1
79766: PUSH
79767: LD_VAR 0 4
79771: ARRAY
79772: PPUSH
79773: CALL_OW 2
79777: ST_TO_ADDR
// array := Delete ( array , index ) ;
79778: LD_ADDR_VAR 0 1
79782: PUSH
79783: LD_VAR 0 1
79787: PPUSH
79788: LD_VAR 0 4
79792: PPUSH
79793: CALL_OW 3
79797: ST_TO_ADDR
// end ;
79798: GO 79722
79800: POP
79801: POP
// end ;
79802: LD_VAR 0 2
79806: RET
// export function GetBaseMaterials ( base ) ; begin
79807: LD_INT 0
79809: PPUSH
// result := [ 0 , 0 , 0 ] ;
79810: LD_ADDR_VAR 0 2
79814: PUSH
79815: LD_INT 0
79817: PUSH
79818: LD_INT 0
79820: PUSH
79821: LD_INT 0
79823: PUSH
79824: EMPTY
79825: LIST
79826: LIST
79827: LIST
79828: ST_TO_ADDR
// if not base then
79829: LD_VAR 0 1
79833: NOT
79834: IFFALSE 79838
// exit ;
79836: GO 79887
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79838: LD_ADDR_VAR 0 2
79842: PUSH
79843: LD_VAR 0 1
79847: PPUSH
79848: LD_INT 1
79850: PPUSH
79851: CALL_OW 275
79855: PUSH
79856: LD_VAR 0 1
79860: PPUSH
79861: LD_INT 2
79863: PPUSH
79864: CALL_OW 275
79868: PUSH
79869: LD_VAR 0 1
79873: PPUSH
79874: LD_INT 3
79876: PPUSH
79877: CALL_OW 275
79881: PUSH
79882: EMPTY
79883: LIST
79884: LIST
79885: LIST
79886: ST_TO_ADDR
// end ;
79887: LD_VAR 0 2
79891: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79892: LD_INT 0
79894: PPUSH
79895: PPUSH
// result := array ;
79896: LD_ADDR_VAR 0 3
79900: PUSH
79901: LD_VAR 0 1
79905: ST_TO_ADDR
// if size >= result then
79906: LD_VAR 0 2
79910: PUSH
79911: LD_VAR 0 3
79915: GREATEREQUAL
79916: IFFALSE 79920
// exit ;
79918: GO 79970
// if size then
79920: LD_VAR 0 2
79924: IFFALSE 79970
// for i := array downto size do
79926: LD_ADDR_VAR 0 4
79930: PUSH
79931: DOUBLE
79932: LD_VAR 0 1
79936: INC
79937: ST_TO_ADDR
79938: LD_VAR 0 2
79942: PUSH
79943: FOR_DOWNTO
79944: IFFALSE 79968
// result := Delete ( result , result ) ;
79946: LD_ADDR_VAR 0 3
79950: PUSH
79951: LD_VAR 0 3
79955: PPUSH
79956: LD_VAR 0 3
79960: PPUSH
79961: CALL_OW 3
79965: ST_TO_ADDR
79966: GO 79943
79968: POP
79969: POP
// end ;
79970: LD_VAR 0 3
79974: RET
// export function ComExit ( unit ) ; var tmp ; begin
79975: LD_INT 0
79977: PPUSH
79978: PPUSH
// if not IsInUnit ( unit ) then
79979: LD_VAR 0 1
79983: PPUSH
79984: CALL_OW 310
79988: NOT
79989: IFFALSE 79993
// exit ;
79991: GO 80053
// tmp := IsInUnit ( unit ) ;
79993: LD_ADDR_VAR 0 3
79997: PUSH
79998: LD_VAR 0 1
80002: PPUSH
80003: CALL_OW 310
80007: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80008: LD_VAR 0 3
80012: PPUSH
80013: CALL_OW 247
80017: PUSH
80018: LD_INT 2
80020: EQUAL
80021: IFFALSE 80034
// ComExitVehicle ( unit ) else
80023: LD_VAR 0 1
80027: PPUSH
80028: CALL_OW 121
80032: GO 80043
// ComExitBuilding ( unit ) ;
80034: LD_VAR 0 1
80038: PPUSH
80039: CALL_OW 122
// result := tmp ;
80043: LD_ADDR_VAR 0 2
80047: PUSH
80048: LD_VAR 0 3
80052: ST_TO_ADDR
// end ;
80053: LD_VAR 0 2
80057: RET
// export function ComExitAll ( units ) ; var i ; begin
80058: LD_INT 0
80060: PPUSH
80061: PPUSH
// if not units then
80062: LD_VAR 0 1
80066: NOT
80067: IFFALSE 80071
// exit ;
80069: GO 80097
// for i in units do
80071: LD_ADDR_VAR 0 3
80075: PUSH
80076: LD_VAR 0 1
80080: PUSH
80081: FOR_IN
80082: IFFALSE 80095
// ComExit ( i ) ;
80084: LD_VAR 0 3
80088: PPUSH
80089: CALL 79975 0 1
80093: GO 80081
80095: POP
80096: POP
// end ;
80097: LD_VAR 0 2
80101: RET
// export function ResetHc ; begin
80102: LD_INT 0
80104: PPUSH
// InitHc ;
80105: CALL_OW 19
// hc_importance := 0 ;
80109: LD_ADDR_OWVAR 32
80113: PUSH
80114: LD_INT 0
80116: ST_TO_ADDR
// end ;
80117: LD_VAR 0 1
80121: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80122: LD_INT 0
80124: PPUSH
80125: PPUSH
80126: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80127: LD_ADDR_VAR 0 6
80131: PUSH
80132: LD_VAR 0 1
80136: PUSH
80137: LD_VAR 0 3
80141: PLUS
80142: PUSH
80143: LD_INT 2
80145: DIV
80146: ST_TO_ADDR
// if _x < 0 then
80147: LD_VAR 0 6
80151: PUSH
80152: LD_INT 0
80154: LESS
80155: IFFALSE 80172
// _x := _x * - 1 ;
80157: LD_ADDR_VAR 0 6
80161: PUSH
80162: LD_VAR 0 6
80166: PUSH
80167: LD_INT 1
80169: NEG
80170: MUL
80171: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80172: LD_ADDR_VAR 0 7
80176: PUSH
80177: LD_VAR 0 2
80181: PUSH
80182: LD_VAR 0 4
80186: PLUS
80187: PUSH
80188: LD_INT 2
80190: DIV
80191: ST_TO_ADDR
// if _y < 0 then
80192: LD_VAR 0 7
80196: PUSH
80197: LD_INT 0
80199: LESS
80200: IFFALSE 80217
// _y := _y * - 1 ;
80202: LD_ADDR_VAR 0 7
80206: PUSH
80207: LD_VAR 0 7
80211: PUSH
80212: LD_INT 1
80214: NEG
80215: MUL
80216: ST_TO_ADDR
// result := [ _x , _y ] ;
80217: LD_ADDR_VAR 0 5
80221: PUSH
80222: LD_VAR 0 6
80226: PUSH
80227: LD_VAR 0 7
80231: PUSH
80232: EMPTY
80233: LIST
80234: LIST
80235: ST_TO_ADDR
// end ;
80236: LD_VAR 0 5
80240: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80241: LD_INT 0
80243: PPUSH
80244: PPUSH
80245: PPUSH
80246: PPUSH
// task := GetTaskList ( unit ) ;
80247: LD_ADDR_VAR 0 7
80251: PUSH
80252: LD_VAR 0 1
80256: PPUSH
80257: CALL_OW 437
80261: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80262: LD_VAR 0 7
80266: NOT
80267: PUSH
80268: LD_VAR 0 1
80272: PPUSH
80273: LD_VAR 0 2
80277: PPUSH
80278: CALL_OW 308
80282: NOT
80283: AND
80284: IFFALSE 80288
// exit ;
80286: GO 80406
// if IsInArea ( unit , area ) then
80288: LD_VAR 0 1
80292: PPUSH
80293: LD_VAR 0 2
80297: PPUSH
80298: CALL_OW 308
80302: IFFALSE 80320
// begin ComMoveToArea ( unit , goAway ) ;
80304: LD_VAR 0 1
80308: PPUSH
80309: LD_VAR 0 3
80313: PPUSH
80314: CALL_OW 113
// exit ;
80318: GO 80406
// end ; if task [ 1 ] [ 1 ] <> M then
80320: LD_VAR 0 7
80324: PUSH
80325: LD_INT 1
80327: ARRAY
80328: PUSH
80329: LD_INT 1
80331: ARRAY
80332: PUSH
80333: LD_STRING M
80335: NONEQUAL
80336: IFFALSE 80340
// exit ;
80338: GO 80406
// x := task [ 1 ] [ 2 ] ;
80340: LD_ADDR_VAR 0 5
80344: PUSH
80345: LD_VAR 0 7
80349: PUSH
80350: LD_INT 1
80352: ARRAY
80353: PUSH
80354: LD_INT 2
80356: ARRAY
80357: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80358: LD_ADDR_VAR 0 6
80362: PUSH
80363: LD_VAR 0 7
80367: PUSH
80368: LD_INT 1
80370: ARRAY
80371: PUSH
80372: LD_INT 3
80374: ARRAY
80375: ST_TO_ADDR
// if InArea ( x , y , area ) then
80376: LD_VAR 0 5
80380: PPUSH
80381: LD_VAR 0 6
80385: PPUSH
80386: LD_VAR 0 2
80390: PPUSH
80391: CALL_OW 309
80395: IFFALSE 80406
// ComStop ( unit ) ;
80397: LD_VAR 0 1
80401: PPUSH
80402: CALL_OW 141
// end ;
80406: LD_VAR 0 4
80410: RET
// export function Abs ( value ) ; begin
80411: LD_INT 0
80413: PPUSH
// result := value ;
80414: LD_ADDR_VAR 0 2
80418: PUSH
80419: LD_VAR 0 1
80423: ST_TO_ADDR
// if value < 0 then
80424: LD_VAR 0 1
80428: PUSH
80429: LD_INT 0
80431: LESS
80432: IFFALSE 80449
// result := value * - 1 ;
80434: LD_ADDR_VAR 0 2
80438: PUSH
80439: LD_VAR 0 1
80443: PUSH
80444: LD_INT 1
80446: NEG
80447: MUL
80448: ST_TO_ADDR
// end ;
80449: LD_VAR 0 2
80453: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80454: LD_INT 0
80456: PPUSH
80457: PPUSH
80458: PPUSH
80459: PPUSH
80460: PPUSH
80461: PPUSH
80462: PPUSH
80463: PPUSH
// if not unit or not building then
80464: LD_VAR 0 1
80468: NOT
80469: PUSH
80470: LD_VAR 0 2
80474: NOT
80475: OR
80476: IFFALSE 80480
// exit ;
80478: GO 80706
// x := GetX ( building ) ;
80480: LD_ADDR_VAR 0 4
80484: PUSH
80485: LD_VAR 0 2
80489: PPUSH
80490: CALL_OW 250
80494: ST_TO_ADDR
// y := GetY ( building ) ;
80495: LD_ADDR_VAR 0 6
80499: PUSH
80500: LD_VAR 0 2
80504: PPUSH
80505: CALL_OW 251
80509: ST_TO_ADDR
// d := GetDir ( building ) ;
80510: LD_ADDR_VAR 0 8
80514: PUSH
80515: LD_VAR 0 2
80519: PPUSH
80520: CALL_OW 254
80524: ST_TO_ADDR
// r := 4 ;
80525: LD_ADDR_VAR 0 9
80529: PUSH
80530: LD_INT 4
80532: ST_TO_ADDR
// for i := 1 to 5 do
80533: LD_ADDR_VAR 0 10
80537: PUSH
80538: DOUBLE
80539: LD_INT 1
80541: DEC
80542: ST_TO_ADDR
80543: LD_INT 5
80545: PUSH
80546: FOR_TO
80547: IFFALSE 80704
// begin _x := ShiftX ( x , d , r + i ) ;
80549: LD_ADDR_VAR 0 5
80553: PUSH
80554: LD_VAR 0 4
80558: PPUSH
80559: LD_VAR 0 8
80563: PPUSH
80564: LD_VAR 0 9
80568: PUSH
80569: LD_VAR 0 10
80573: PLUS
80574: PPUSH
80575: CALL_OW 272
80579: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80580: LD_ADDR_VAR 0 7
80584: PUSH
80585: LD_VAR 0 6
80589: PPUSH
80590: LD_VAR 0 8
80594: PPUSH
80595: LD_VAR 0 9
80599: PUSH
80600: LD_VAR 0 10
80604: PLUS
80605: PPUSH
80606: CALL_OW 273
80610: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80611: LD_VAR 0 5
80615: PPUSH
80616: LD_VAR 0 7
80620: PPUSH
80621: CALL_OW 488
80625: PUSH
80626: LD_VAR 0 5
80630: PPUSH
80631: LD_VAR 0 7
80635: PPUSH
80636: CALL_OW 428
80640: PPUSH
80641: CALL_OW 247
80645: PUSH
80646: LD_INT 3
80648: PUSH
80649: LD_INT 2
80651: PUSH
80652: EMPTY
80653: LIST
80654: LIST
80655: IN
80656: NOT
80657: AND
80658: IFFALSE 80702
// begin ComMoveXY ( unit , _x , _y ) ;
80660: LD_VAR 0 1
80664: PPUSH
80665: LD_VAR 0 5
80669: PPUSH
80670: LD_VAR 0 7
80674: PPUSH
80675: CALL_OW 111
// result := [ _x , _y ] ;
80679: LD_ADDR_VAR 0 3
80683: PUSH
80684: LD_VAR 0 5
80688: PUSH
80689: LD_VAR 0 7
80693: PUSH
80694: EMPTY
80695: LIST
80696: LIST
80697: ST_TO_ADDR
// exit ;
80698: POP
80699: POP
80700: GO 80706
// end ; end ;
80702: GO 80546
80704: POP
80705: POP
// end ;
80706: LD_VAR 0 3
80710: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80711: LD_INT 0
80713: PPUSH
80714: PPUSH
80715: PPUSH
// result := 0 ;
80716: LD_ADDR_VAR 0 3
80720: PUSH
80721: LD_INT 0
80723: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80724: LD_VAR 0 1
80728: PUSH
80729: LD_INT 0
80731: LESS
80732: PUSH
80733: LD_VAR 0 1
80737: PUSH
80738: LD_INT 8
80740: GREATER
80741: OR
80742: PUSH
80743: LD_VAR 0 2
80747: PUSH
80748: LD_INT 0
80750: LESS
80751: OR
80752: PUSH
80753: LD_VAR 0 2
80757: PUSH
80758: LD_INT 8
80760: GREATER
80761: OR
80762: IFFALSE 80766
// exit ;
80764: GO 80841
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80766: LD_ADDR_VAR 0 4
80770: PUSH
80771: LD_INT 22
80773: PUSH
80774: LD_VAR 0 2
80778: PUSH
80779: EMPTY
80780: LIST
80781: LIST
80782: PPUSH
80783: CALL_OW 69
80787: PUSH
80788: FOR_IN
80789: IFFALSE 80839
// begin un := UnitShoot ( i ) ;
80791: LD_ADDR_VAR 0 5
80795: PUSH
80796: LD_VAR 0 4
80800: PPUSH
80801: CALL_OW 504
80805: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80806: LD_VAR 0 5
80810: PPUSH
80811: CALL_OW 255
80815: PUSH
80816: LD_VAR 0 1
80820: EQUAL
80821: IFFALSE 80837
// begin result := un ;
80823: LD_ADDR_VAR 0 3
80827: PUSH
80828: LD_VAR 0 5
80832: ST_TO_ADDR
// exit ;
80833: POP
80834: POP
80835: GO 80841
// end ; end ;
80837: GO 80788
80839: POP
80840: POP
// end ;
80841: LD_VAR 0 3
80845: RET
// export function GetCargoBay ( units ) ; begin
80846: LD_INT 0
80848: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80849: LD_ADDR_VAR 0 2
80853: PUSH
80854: LD_VAR 0 1
80858: PPUSH
80859: LD_INT 2
80861: PUSH
80862: LD_INT 34
80864: PUSH
80865: LD_INT 12
80867: PUSH
80868: EMPTY
80869: LIST
80870: LIST
80871: PUSH
80872: LD_INT 34
80874: PUSH
80875: LD_INT 51
80877: PUSH
80878: EMPTY
80879: LIST
80880: LIST
80881: PUSH
80882: LD_INT 34
80884: PUSH
80885: LD_INT 32
80887: PUSH
80888: EMPTY
80889: LIST
80890: LIST
80891: PUSH
80892: LD_INT 34
80894: PUSH
80895: LD_INT 89
80897: PUSH
80898: EMPTY
80899: LIST
80900: LIST
80901: PUSH
80902: EMPTY
80903: LIST
80904: LIST
80905: LIST
80906: LIST
80907: LIST
80908: PPUSH
80909: CALL_OW 72
80913: ST_TO_ADDR
// end ;
80914: LD_VAR 0 2
80918: RET
// export function Negate ( value ) ; begin
80919: LD_INT 0
80921: PPUSH
// result := not value ;
80922: LD_ADDR_VAR 0 2
80926: PUSH
80927: LD_VAR 0 1
80931: NOT
80932: ST_TO_ADDR
// end ;
80933: LD_VAR 0 2
80937: RET
// export function Inc ( value ) ; begin
80938: LD_INT 0
80940: PPUSH
// result := value + 1 ;
80941: LD_ADDR_VAR 0 2
80945: PUSH
80946: LD_VAR 0 1
80950: PUSH
80951: LD_INT 1
80953: PLUS
80954: ST_TO_ADDR
// end ;
80955: LD_VAR 0 2
80959: RET
// export function Dec ( value ) ; begin
80960: LD_INT 0
80962: PPUSH
// result := value - 1 ;
80963: LD_ADDR_VAR 0 2
80967: PUSH
80968: LD_VAR 0 1
80972: PUSH
80973: LD_INT 1
80975: MINUS
80976: ST_TO_ADDR
// end ;
80977: LD_VAR 0 2
80981: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80982: LD_INT 0
80984: PPUSH
80985: PPUSH
80986: PPUSH
80987: PPUSH
80988: PPUSH
80989: PPUSH
80990: PPUSH
80991: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80992: LD_VAR 0 1
80996: PPUSH
80997: LD_VAR 0 2
81001: PPUSH
81002: CALL_OW 488
81006: NOT
81007: PUSH
81008: LD_VAR 0 3
81012: PPUSH
81013: LD_VAR 0 4
81017: PPUSH
81018: CALL_OW 488
81022: NOT
81023: OR
81024: IFFALSE 81037
// begin result := - 1 ;
81026: LD_ADDR_VAR 0 5
81030: PUSH
81031: LD_INT 1
81033: NEG
81034: ST_TO_ADDR
// exit ;
81035: GO 81272
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81037: LD_ADDR_VAR 0 12
81041: PUSH
81042: LD_VAR 0 1
81046: PPUSH
81047: LD_VAR 0 2
81051: PPUSH
81052: LD_VAR 0 3
81056: PPUSH
81057: LD_VAR 0 4
81061: PPUSH
81062: CALL 80122 0 4
81066: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81067: LD_ADDR_VAR 0 11
81071: PUSH
81072: LD_VAR 0 1
81076: PPUSH
81077: LD_VAR 0 2
81081: PPUSH
81082: LD_VAR 0 12
81086: PUSH
81087: LD_INT 1
81089: ARRAY
81090: PPUSH
81091: LD_VAR 0 12
81095: PUSH
81096: LD_INT 2
81098: ARRAY
81099: PPUSH
81100: CALL_OW 298
81104: ST_TO_ADDR
// distance := 9999 ;
81105: LD_ADDR_VAR 0 10
81109: PUSH
81110: LD_INT 9999
81112: ST_TO_ADDR
// for i := 0 to 5 do
81113: LD_ADDR_VAR 0 6
81117: PUSH
81118: DOUBLE
81119: LD_INT 0
81121: DEC
81122: ST_TO_ADDR
81123: LD_INT 5
81125: PUSH
81126: FOR_TO
81127: IFFALSE 81270
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81129: LD_ADDR_VAR 0 7
81133: PUSH
81134: LD_VAR 0 1
81138: PPUSH
81139: LD_VAR 0 6
81143: PPUSH
81144: LD_VAR 0 11
81148: PPUSH
81149: CALL_OW 272
81153: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81154: LD_ADDR_VAR 0 8
81158: PUSH
81159: LD_VAR 0 2
81163: PPUSH
81164: LD_VAR 0 6
81168: PPUSH
81169: LD_VAR 0 11
81173: PPUSH
81174: CALL_OW 273
81178: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81179: LD_VAR 0 7
81183: PPUSH
81184: LD_VAR 0 8
81188: PPUSH
81189: CALL_OW 488
81193: NOT
81194: IFFALSE 81198
// continue ;
81196: GO 81126
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81198: LD_ADDR_VAR 0 9
81202: PUSH
81203: LD_VAR 0 12
81207: PUSH
81208: LD_INT 1
81210: ARRAY
81211: PPUSH
81212: LD_VAR 0 12
81216: PUSH
81217: LD_INT 2
81219: ARRAY
81220: PPUSH
81221: LD_VAR 0 7
81225: PPUSH
81226: LD_VAR 0 8
81230: PPUSH
81231: CALL_OW 298
81235: ST_TO_ADDR
// if tmp < distance then
81236: LD_VAR 0 9
81240: PUSH
81241: LD_VAR 0 10
81245: LESS
81246: IFFALSE 81268
// begin result := i ;
81248: LD_ADDR_VAR 0 5
81252: PUSH
81253: LD_VAR 0 6
81257: ST_TO_ADDR
// distance := tmp ;
81258: LD_ADDR_VAR 0 10
81262: PUSH
81263: LD_VAR 0 9
81267: ST_TO_ADDR
// end ; end ;
81268: GO 81126
81270: POP
81271: POP
// end ;
81272: LD_VAR 0 5
81276: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81277: LD_INT 0
81279: PPUSH
81280: PPUSH
// if not driver or not IsInUnit ( driver ) then
81281: LD_VAR 0 1
81285: NOT
81286: PUSH
81287: LD_VAR 0 1
81291: PPUSH
81292: CALL_OW 310
81296: NOT
81297: OR
81298: IFFALSE 81302
// exit ;
81300: GO 81392
// vehicle := IsInUnit ( driver ) ;
81302: LD_ADDR_VAR 0 3
81306: PUSH
81307: LD_VAR 0 1
81311: PPUSH
81312: CALL_OW 310
81316: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81317: LD_VAR 0 1
81321: PPUSH
81322: LD_STRING \
81324: PUSH
81325: LD_INT 0
81327: PUSH
81328: LD_INT 0
81330: PUSH
81331: LD_INT 0
81333: PUSH
81334: LD_INT 0
81336: PUSH
81337: LD_INT 0
81339: PUSH
81340: LD_INT 0
81342: PUSH
81343: EMPTY
81344: LIST
81345: LIST
81346: LIST
81347: LIST
81348: LIST
81349: LIST
81350: LIST
81351: PUSH
81352: LD_STRING E
81354: PUSH
81355: LD_INT 0
81357: PUSH
81358: LD_INT 0
81360: PUSH
81361: LD_VAR 0 3
81365: PUSH
81366: LD_INT 0
81368: PUSH
81369: LD_INT 0
81371: PUSH
81372: LD_INT 0
81374: PUSH
81375: EMPTY
81376: LIST
81377: LIST
81378: LIST
81379: LIST
81380: LIST
81381: LIST
81382: LIST
81383: PUSH
81384: EMPTY
81385: LIST
81386: LIST
81387: PPUSH
81388: CALL_OW 446
// end ;
81392: LD_VAR 0 2
81396: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81397: LD_INT 0
81399: PPUSH
81400: PPUSH
// if not driver or not IsInUnit ( driver ) then
81401: LD_VAR 0 1
81405: NOT
81406: PUSH
81407: LD_VAR 0 1
81411: PPUSH
81412: CALL_OW 310
81416: NOT
81417: OR
81418: IFFALSE 81422
// exit ;
81420: GO 81512
// vehicle := IsInUnit ( driver ) ;
81422: LD_ADDR_VAR 0 3
81426: PUSH
81427: LD_VAR 0 1
81431: PPUSH
81432: CALL_OW 310
81436: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81437: LD_VAR 0 1
81441: PPUSH
81442: LD_STRING \
81444: PUSH
81445: LD_INT 0
81447: PUSH
81448: LD_INT 0
81450: PUSH
81451: LD_INT 0
81453: PUSH
81454: LD_INT 0
81456: PUSH
81457: LD_INT 0
81459: PUSH
81460: LD_INT 0
81462: PUSH
81463: EMPTY
81464: LIST
81465: LIST
81466: LIST
81467: LIST
81468: LIST
81469: LIST
81470: LIST
81471: PUSH
81472: LD_STRING E
81474: PUSH
81475: LD_INT 0
81477: PUSH
81478: LD_INT 0
81480: PUSH
81481: LD_VAR 0 3
81485: PUSH
81486: LD_INT 0
81488: PUSH
81489: LD_INT 0
81491: PUSH
81492: LD_INT 0
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: LIST
81499: LIST
81500: LIST
81501: LIST
81502: LIST
81503: PUSH
81504: EMPTY
81505: LIST
81506: LIST
81507: PPUSH
81508: CALL_OW 447
// end ;
81512: LD_VAR 0 2
81516: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81517: LD_INT 0
81519: PPUSH
81520: PPUSH
81521: PPUSH
// tmp := [ ] ;
81522: LD_ADDR_VAR 0 5
81526: PUSH
81527: EMPTY
81528: ST_TO_ADDR
// for i in units do
81529: LD_ADDR_VAR 0 4
81533: PUSH
81534: LD_VAR 0 1
81538: PUSH
81539: FOR_IN
81540: IFFALSE 81578
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81542: LD_ADDR_VAR 0 5
81546: PUSH
81547: LD_VAR 0 5
81551: PPUSH
81552: LD_VAR 0 5
81556: PUSH
81557: LD_INT 1
81559: PLUS
81560: PPUSH
81561: LD_VAR 0 4
81565: PPUSH
81566: CALL_OW 256
81570: PPUSH
81571: CALL_OW 2
81575: ST_TO_ADDR
81576: GO 81539
81578: POP
81579: POP
// if not tmp then
81580: LD_VAR 0 5
81584: NOT
81585: IFFALSE 81589
// exit ;
81587: GO 81637
// if asc then
81589: LD_VAR 0 2
81593: IFFALSE 81617
// result := SortListByListAsc ( units , tmp ) else
81595: LD_ADDR_VAR 0 3
81599: PUSH
81600: LD_VAR 0 1
81604: PPUSH
81605: LD_VAR 0 5
81609: PPUSH
81610: CALL_OW 76
81614: ST_TO_ADDR
81615: GO 81637
// result := SortListByListDesc ( units , tmp ) ;
81617: LD_ADDR_VAR 0 3
81621: PUSH
81622: LD_VAR 0 1
81626: PPUSH
81627: LD_VAR 0 5
81631: PPUSH
81632: CALL_OW 77
81636: ST_TO_ADDR
// end ;
81637: LD_VAR 0 3
81641: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81642: LD_INT 0
81644: PPUSH
81645: PPUSH
// task := GetTaskList ( mech ) ;
81646: LD_ADDR_VAR 0 4
81650: PUSH
81651: LD_VAR 0 1
81655: PPUSH
81656: CALL_OW 437
81660: ST_TO_ADDR
// if not task then
81661: LD_VAR 0 4
81665: NOT
81666: IFFALSE 81670
// exit ;
81668: GO 81712
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81670: LD_ADDR_VAR 0 3
81674: PUSH
81675: LD_VAR 0 4
81679: PUSH
81680: LD_INT 1
81682: ARRAY
81683: PUSH
81684: LD_INT 1
81686: ARRAY
81687: PUSH
81688: LD_STRING r
81690: EQUAL
81691: PUSH
81692: LD_VAR 0 4
81696: PUSH
81697: LD_INT 1
81699: ARRAY
81700: PUSH
81701: LD_INT 4
81703: ARRAY
81704: PUSH
81705: LD_VAR 0 2
81709: EQUAL
81710: AND
81711: ST_TO_ADDR
// end ;
81712: LD_VAR 0 3
81716: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81717: LD_INT 0
81719: PPUSH
// SetDir ( unit , d ) ;
81720: LD_VAR 0 1
81724: PPUSH
81725: LD_VAR 0 4
81729: PPUSH
81730: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81734: LD_ADDR_VAR 0 6
81738: PUSH
81739: LD_VAR 0 1
81743: PPUSH
81744: LD_VAR 0 2
81748: PPUSH
81749: LD_VAR 0 3
81753: PPUSH
81754: LD_VAR 0 5
81758: PPUSH
81759: CALL_OW 48
81763: ST_TO_ADDR
// end ;
81764: LD_VAR 0 6
81768: RET
// export function ToNaturalNumber ( number ) ; begin
81769: LD_INT 0
81771: PPUSH
// result := number div 1 ;
81772: LD_ADDR_VAR 0 2
81776: PUSH
81777: LD_VAR 0 1
81781: PUSH
81782: LD_INT 1
81784: DIV
81785: ST_TO_ADDR
// if number < 0 then
81786: LD_VAR 0 1
81790: PUSH
81791: LD_INT 0
81793: LESS
81794: IFFALSE 81804
// result := 0 ;
81796: LD_ADDR_VAR 0 2
81800: PUSH
81801: LD_INT 0
81803: ST_TO_ADDR
// end ;
81804: LD_VAR 0 2
81808: RET
// export function SortByClass ( units , class ) ; var un ; begin
81809: LD_INT 0
81811: PPUSH
81812: PPUSH
// if not units or not class then
81813: LD_VAR 0 1
81817: NOT
81818: PUSH
81819: LD_VAR 0 2
81823: NOT
81824: OR
81825: IFFALSE 81829
// exit ;
81827: GO 81924
// result := [ ] ;
81829: LD_ADDR_VAR 0 3
81833: PUSH
81834: EMPTY
81835: ST_TO_ADDR
// for un in units do
81836: LD_ADDR_VAR 0 4
81840: PUSH
81841: LD_VAR 0 1
81845: PUSH
81846: FOR_IN
81847: IFFALSE 81922
// if GetClass ( un ) = class then
81849: LD_VAR 0 4
81853: PPUSH
81854: CALL_OW 257
81858: PUSH
81859: LD_VAR 0 2
81863: EQUAL
81864: IFFALSE 81891
// result := Insert ( result , 1 , un ) else
81866: LD_ADDR_VAR 0 3
81870: PUSH
81871: LD_VAR 0 3
81875: PPUSH
81876: LD_INT 1
81878: PPUSH
81879: LD_VAR 0 4
81883: PPUSH
81884: CALL_OW 2
81888: ST_TO_ADDR
81889: GO 81920
// result := Replace ( result , result + 1 , un ) ;
81891: LD_ADDR_VAR 0 3
81895: PUSH
81896: LD_VAR 0 3
81900: PPUSH
81901: LD_VAR 0 3
81905: PUSH
81906: LD_INT 1
81908: PLUS
81909: PPUSH
81910: LD_VAR 0 4
81914: PPUSH
81915: CALL_OW 1
81919: ST_TO_ADDR
81920: GO 81846
81922: POP
81923: POP
// end ;
81924: LD_VAR 0 3
81928: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81929: LD_INT 0
81931: PPUSH
81932: PPUSH
81933: PPUSH
81934: PPUSH
81935: PPUSH
81936: PPUSH
81937: PPUSH
// result := [ ] ;
81938: LD_ADDR_VAR 0 4
81942: PUSH
81943: EMPTY
81944: ST_TO_ADDR
// if x - r < 0 then
81945: LD_VAR 0 1
81949: PUSH
81950: LD_VAR 0 3
81954: MINUS
81955: PUSH
81956: LD_INT 0
81958: LESS
81959: IFFALSE 81971
// min_x := 0 else
81961: LD_ADDR_VAR 0 8
81965: PUSH
81966: LD_INT 0
81968: ST_TO_ADDR
81969: GO 81987
// min_x := x - r ;
81971: LD_ADDR_VAR 0 8
81975: PUSH
81976: LD_VAR 0 1
81980: PUSH
81981: LD_VAR 0 3
81985: MINUS
81986: ST_TO_ADDR
// if y - r < 0 then
81987: LD_VAR 0 2
81991: PUSH
81992: LD_VAR 0 3
81996: MINUS
81997: PUSH
81998: LD_INT 0
82000: LESS
82001: IFFALSE 82013
// min_y := 0 else
82003: LD_ADDR_VAR 0 7
82007: PUSH
82008: LD_INT 0
82010: ST_TO_ADDR
82011: GO 82029
// min_y := y - r ;
82013: LD_ADDR_VAR 0 7
82017: PUSH
82018: LD_VAR 0 2
82022: PUSH
82023: LD_VAR 0 3
82027: MINUS
82028: ST_TO_ADDR
// max_x := x + r ;
82029: LD_ADDR_VAR 0 9
82033: PUSH
82034: LD_VAR 0 1
82038: PUSH
82039: LD_VAR 0 3
82043: PLUS
82044: ST_TO_ADDR
// max_y := y + r ;
82045: LD_ADDR_VAR 0 10
82049: PUSH
82050: LD_VAR 0 2
82054: PUSH
82055: LD_VAR 0 3
82059: PLUS
82060: ST_TO_ADDR
// for _x = min_x to max_x do
82061: LD_ADDR_VAR 0 5
82065: PUSH
82066: DOUBLE
82067: LD_VAR 0 8
82071: DEC
82072: ST_TO_ADDR
82073: LD_VAR 0 9
82077: PUSH
82078: FOR_TO
82079: IFFALSE 82180
// for _y = min_y to max_y do
82081: LD_ADDR_VAR 0 6
82085: PUSH
82086: DOUBLE
82087: LD_VAR 0 7
82091: DEC
82092: ST_TO_ADDR
82093: LD_VAR 0 10
82097: PUSH
82098: FOR_TO
82099: IFFALSE 82176
// begin if not ValidHex ( _x , _y ) then
82101: LD_VAR 0 5
82105: PPUSH
82106: LD_VAR 0 6
82110: PPUSH
82111: CALL_OW 488
82115: NOT
82116: IFFALSE 82120
// continue ;
82118: GO 82098
// if GetResourceTypeXY ( _x , _y ) then
82120: LD_VAR 0 5
82124: PPUSH
82125: LD_VAR 0 6
82129: PPUSH
82130: CALL_OW 283
82134: IFFALSE 82174
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82136: LD_ADDR_VAR 0 4
82140: PUSH
82141: LD_VAR 0 4
82145: PPUSH
82146: LD_VAR 0 4
82150: PUSH
82151: LD_INT 1
82153: PLUS
82154: PPUSH
82155: LD_VAR 0 5
82159: PUSH
82160: LD_VAR 0 6
82164: PUSH
82165: EMPTY
82166: LIST
82167: LIST
82168: PPUSH
82169: CALL_OW 1
82173: ST_TO_ADDR
// end ;
82174: GO 82098
82176: POP
82177: POP
82178: GO 82078
82180: POP
82181: POP
// end ;
82182: LD_VAR 0 4
82186: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82187: LD_INT 0
82189: PPUSH
82190: PPUSH
82191: PPUSH
82192: PPUSH
82193: PPUSH
82194: PPUSH
82195: PPUSH
82196: PPUSH
// if not units then
82197: LD_VAR 0 1
82201: NOT
82202: IFFALSE 82206
// exit ;
82204: GO 82734
// result := UnitFilter ( units , [ f_ok ] ) ;
82206: LD_ADDR_VAR 0 3
82210: PUSH
82211: LD_VAR 0 1
82215: PPUSH
82216: LD_INT 50
82218: PUSH
82219: EMPTY
82220: LIST
82221: PPUSH
82222: CALL_OW 72
82226: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82227: LD_ADDR_VAR 0 8
82231: PUSH
82232: LD_VAR 0 1
82236: PUSH
82237: LD_INT 1
82239: ARRAY
82240: PPUSH
82241: CALL_OW 255
82245: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82246: LD_ADDR_VAR 0 10
82250: PUSH
82251: LD_INT 29
82253: PUSH
82254: LD_INT 91
82256: PUSH
82257: LD_INT 49
82259: PUSH
82260: EMPTY
82261: LIST
82262: LIST
82263: LIST
82264: ST_TO_ADDR
// if not result then
82265: LD_VAR 0 3
82269: NOT
82270: IFFALSE 82274
// exit ;
82272: GO 82734
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82274: LD_ADDR_VAR 0 5
82278: PUSH
82279: LD_INT 81
82281: PUSH
82282: LD_VAR 0 8
82286: PUSH
82287: EMPTY
82288: LIST
82289: LIST
82290: PPUSH
82291: CALL_OW 69
82295: ST_TO_ADDR
// for i in result do
82296: LD_ADDR_VAR 0 4
82300: PUSH
82301: LD_VAR 0 3
82305: PUSH
82306: FOR_IN
82307: IFFALSE 82732
// begin tag := GetTag ( i ) + 1 ;
82309: LD_ADDR_VAR 0 9
82313: PUSH
82314: LD_VAR 0 4
82318: PPUSH
82319: CALL_OW 110
82323: PUSH
82324: LD_INT 1
82326: PLUS
82327: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82328: LD_ADDR_VAR 0 7
82332: PUSH
82333: LD_VAR 0 4
82337: PPUSH
82338: CALL_OW 250
82342: PPUSH
82343: LD_VAR 0 4
82347: PPUSH
82348: CALL_OW 251
82352: PPUSH
82353: LD_INT 4
82355: PPUSH
82356: CALL 81929 0 3
82360: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82361: LD_VAR 0 4
82365: PPUSH
82366: CALL_OW 247
82370: PUSH
82371: LD_INT 2
82373: EQUAL
82374: PUSH
82375: LD_VAR 0 7
82379: PUSH
82380: LD_INT 2
82382: GREATER
82383: AND
82384: PUSH
82385: LD_VAR 0 4
82389: PPUSH
82390: CALL_OW 264
82394: PUSH
82395: LD_VAR 0 10
82399: IN
82400: NOT
82401: AND
82402: IFFALSE 82441
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82404: LD_VAR 0 4
82408: PPUSH
82409: LD_VAR 0 7
82413: PUSH
82414: LD_INT 1
82416: ARRAY
82417: PUSH
82418: LD_INT 1
82420: ARRAY
82421: PPUSH
82422: LD_VAR 0 7
82426: PUSH
82427: LD_INT 1
82429: ARRAY
82430: PUSH
82431: LD_INT 2
82433: ARRAY
82434: PPUSH
82435: CALL_OW 116
82439: GO 82730
// if path > tag then
82441: LD_VAR 0 2
82445: PUSH
82446: LD_VAR 0 9
82450: GREATER
82451: IFFALSE 82659
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82453: LD_ADDR_VAR 0 6
82457: PUSH
82458: LD_VAR 0 5
82462: PPUSH
82463: LD_INT 91
82465: PUSH
82466: LD_VAR 0 4
82470: PUSH
82471: LD_INT 8
82473: PUSH
82474: EMPTY
82475: LIST
82476: LIST
82477: LIST
82478: PPUSH
82479: CALL_OW 72
82483: ST_TO_ADDR
// if nearEnemy then
82484: LD_VAR 0 6
82488: IFFALSE 82557
// begin if GetWeapon ( i ) = ru_time_lapser then
82490: LD_VAR 0 4
82494: PPUSH
82495: CALL_OW 264
82499: PUSH
82500: LD_INT 49
82502: EQUAL
82503: IFFALSE 82531
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82505: LD_VAR 0 4
82509: PPUSH
82510: LD_VAR 0 6
82514: PPUSH
82515: LD_VAR 0 4
82519: PPUSH
82520: CALL_OW 74
82524: PPUSH
82525: CALL_OW 112
82529: GO 82555
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82531: LD_VAR 0 4
82535: PPUSH
82536: LD_VAR 0 6
82540: PPUSH
82541: LD_VAR 0 4
82545: PPUSH
82546: CALL_OW 74
82550: PPUSH
82551: CALL 83805 0 2
// end else
82555: GO 82657
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82557: LD_VAR 0 4
82561: PPUSH
82562: LD_VAR 0 2
82566: PUSH
82567: LD_VAR 0 9
82571: ARRAY
82572: PUSH
82573: LD_INT 1
82575: ARRAY
82576: PPUSH
82577: LD_VAR 0 2
82581: PUSH
82582: LD_VAR 0 9
82586: ARRAY
82587: PUSH
82588: LD_INT 2
82590: ARRAY
82591: PPUSH
82592: CALL_OW 297
82596: PUSH
82597: LD_INT 6
82599: GREATER
82600: IFFALSE 82643
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82602: LD_VAR 0 4
82606: PPUSH
82607: LD_VAR 0 2
82611: PUSH
82612: LD_VAR 0 9
82616: ARRAY
82617: PUSH
82618: LD_INT 1
82620: ARRAY
82621: PPUSH
82622: LD_VAR 0 2
82626: PUSH
82627: LD_VAR 0 9
82631: ARRAY
82632: PUSH
82633: LD_INT 2
82635: ARRAY
82636: PPUSH
82637: CALL_OW 114
82641: GO 82657
// SetTag ( i , tag ) ;
82643: LD_VAR 0 4
82647: PPUSH
82648: LD_VAR 0 9
82652: PPUSH
82653: CALL_OW 109
// end else
82657: GO 82730
// if enemy then
82659: LD_VAR 0 5
82663: IFFALSE 82730
// begin if GetWeapon ( i ) = ru_time_lapser then
82665: LD_VAR 0 4
82669: PPUSH
82670: CALL_OW 264
82674: PUSH
82675: LD_INT 49
82677: EQUAL
82678: IFFALSE 82706
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82680: LD_VAR 0 4
82684: PPUSH
82685: LD_VAR 0 5
82689: PPUSH
82690: LD_VAR 0 4
82694: PPUSH
82695: CALL_OW 74
82699: PPUSH
82700: CALL_OW 112
82704: GO 82730
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82706: LD_VAR 0 4
82710: PPUSH
82711: LD_VAR 0 5
82715: PPUSH
82716: LD_VAR 0 4
82720: PPUSH
82721: CALL_OW 74
82725: PPUSH
82726: CALL 83805 0 2
// end ; end ;
82730: GO 82306
82732: POP
82733: POP
// end ;
82734: LD_VAR 0 3
82738: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82739: LD_INT 0
82741: PPUSH
82742: PPUSH
82743: PPUSH
// if not unit or IsInUnit ( unit ) then
82744: LD_VAR 0 1
82748: NOT
82749: PUSH
82750: LD_VAR 0 1
82754: PPUSH
82755: CALL_OW 310
82759: OR
82760: IFFALSE 82764
// exit ;
82762: GO 82855
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82764: LD_ADDR_VAR 0 4
82768: PUSH
82769: LD_VAR 0 1
82773: PPUSH
82774: CALL_OW 250
82778: PPUSH
82779: LD_VAR 0 2
82783: PPUSH
82784: LD_INT 1
82786: PPUSH
82787: CALL_OW 272
82791: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82792: LD_ADDR_VAR 0 5
82796: PUSH
82797: LD_VAR 0 1
82801: PPUSH
82802: CALL_OW 251
82806: PPUSH
82807: LD_VAR 0 2
82811: PPUSH
82812: LD_INT 1
82814: PPUSH
82815: CALL_OW 273
82819: ST_TO_ADDR
// if ValidHex ( x , y ) then
82820: LD_VAR 0 4
82824: PPUSH
82825: LD_VAR 0 5
82829: PPUSH
82830: CALL_OW 488
82834: IFFALSE 82855
// ComTurnXY ( unit , x , y ) ;
82836: LD_VAR 0 1
82840: PPUSH
82841: LD_VAR 0 4
82845: PPUSH
82846: LD_VAR 0 5
82850: PPUSH
82851: CALL_OW 118
// end ;
82855: LD_VAR 0 3
82859: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82860: LD_INT 0
82862: PPUSH
82863: PPUSH
// result := false ;
82864: LD_ADDR_VAR 0 3
82868: PUSH
82869: LD_INT 0
82871: ST_TO_ADDR
// if not units then
82872: LD_VAR 0 2
82876: NOT
82877: IFFALSE 82881
// exit ;
82879: GO 82926
// for i in units do
82881: LD_ADDR_VAR 0 4
82885: PUSH
82886: LD_VAR 0 2
82890: PUSH
82891: FOR_IN
82892: IFFALSE 82924
// if See ( side , i ) then
82894: LD_VAR 0 1
82898: PPUSH
82899: LD_VAR 0 4
82903: PPUSH
82904: CALL_OW 292
82908: IFFALSE 82922
// begin result := true ;
82910: LD_ADDR_VAR 0 3
82914: PUSH
82915: LD_INT 1
82917: ST_TO_ADDR
// exit ;
82918: POP
82919: POP
82920: GO 82926
// end ;
82922: GO 82891
82924: POP
82925: POP
// end ;
82926: LD_VAR 0 3
82930: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82931: LD_INT 0
82933: PPUSH
82934: PPUSH
82935: PPUSH
82936: PPUSH
// if not unit or not points then
82937: LD_VAR 0 1
82941: NOT
82942: PUSH
82943: LD_VAR 0 2
82947: NOT
82948: OR
82949: IFFALSE 82953
// exit ;
82951: GO 83043
// dist := 99999 ;
82953: LD_ADDR_VAR 0 5
82957: PUSH
82958: LD_INT 99999
82960: ST_TO_ADDR
// for i in points do
82961: LD_ADDR_VAR 0 4
82965: PUSH
82966: LD_VAR 0 2
82970: PUSH
82971: FOR_IN
82972: IFFALSE 83041
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82974: LD_ADDR_VAR 0 6
82978: PUSH
82979: LD_VAR 0 1
82983: PPUSH
82984: LD_VAR 0 4
82988: PUSH
82989: LD_INT 1
82991: ARRAY
82992: PPUSH
82993: LD_VAR 0 4
82997: PUSH
82998: LD_INT 2
83000: ARRAY
83001: PPUSH
83002: CALL_OW 297
83006: ST_TO_ADDR
// if tmpDist < dist then
83007: LD_VAR 0 6
83011: PUSH
83012: LD_VAR 0 5
83016: LESS
83017: IFFALSE 83039
// begin result := i ;
83019: LD_ADDR_VAR 0 3
83023: PUSH
83024: LD_VAR 0 4
83028: ST_TO_ADDR
// dist := tmpDist ;
83029: LD_ADDR_VAR 0 5
83033: PUSH
83034: LD_VAR 0 6
83038: ST_TO_ADDR
// end ; end ;
83039: GO 82971
83041: POP
83042: POP
// end ;
83043: LD_VAR 0 3
83047: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83048: LD_INT 0
83050: PPUSH
// uc_side := side ;
83051: LD_ADDR_OWVAR 20
83055: PUSH
83056: LD_VAR 0 1
83060: ST_TO_ADDR
// uc_nation := 3 ;
83061: LD_ADDR_OWVAR 21
83065: PUSH
83066: LD_INT 3
83068: ST_TO_ADDR
// vc_chassis := 25 ;
83069: LD_ADDR_OWVAR 37
83073: PUSH
83074: LD_INT 25
83076: ST_TO_ADDR
// vc_engine := engine_siberite ;
83077: LD_ADDR_OWVAR 39
83081: PUSH
83082: LD_INT 3
83084: ST_TO_ADDR
// vc_control := control_computer ;
83085: LD_ADDR_OWVAR 38
83089: PUSH
83090: LD_INT 3
83092: ST_TO_ADDR
// vc_weapon := 59 ;
83093: LD_ADDR_OWVAR 40
83097: PUSH
83098: LD_INT 59
83100: ST_TO_ADDR
// result := CreateVehicle ;
83101: LD_ADDR_VAR 0 5
83105: PUSH
83106: CALL_OW 45
83110: ST_TO_ADDR
// SetDir ( result , d ) ;
83111: LD_VAR 0 5
83115: PPUSH
83116: LD_VAR 0 4
83120: PPUSH
83121: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83125: LD_VAR 0 5
83129: PPUSH
83130: LD_VAR 0 2
83134: PPUSH
83135: LD_VAR 0 3
83139: PPUSH
83140: LD_INT 0
83142: PPUSH
83143: CALL_OW 48
// end ;
83147: LD_VAR 0 5
83151: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83152: LD_INT 0
83154: PPUSH
83155: PPUSH
83156: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83157: LD_ADDR_VAR 0 2
83161: PUSH
83162: LD_INT 0
83164: PUSH
83165: LD_INT 0
83167: PUSH
83168: LD_INT 0
83170: PUSH
83171: LD_INT 0
83173: PUSH
83174: EMPTY
83175: LIST
83176: LIST
83177: LIST
83178: LIST
83179: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83180: LD_VAR 0 1
83184: NOT
83185: PUSH
83186: LD_VAR 0 1
83190: PPUSH
83191: CALL_OW 264
83195: PUSH
83196: LD_INT 12
83198: PUSH
83199: LD_INT 51
83201: PUSH
83202: LD_INT 32
83204: PUSH
83205: LD_INT 89
83207: PUSH
83208: EMPTY
83209: LIST
83210: LIST
83211: LIST
83212: LIST
83213: IN
83214: NOT
83215: OR
83216: IFFALSE 83220
// exit ;
83218: GO 83318
// for i := 1 to 3 do
83220: LD_ADDR_VAR 0 3
83224: PUSH
83225: DOUBLE
83226: LD_INT 1
83228: DEC
83229: ST_TO_ADDR
83230: LD_INT 3
83232: PUSH
83233: FOR_TO
83234: IFFALSE 83316
// begin tmp := GetCargo ( cargo , i ) ;
83236: LD_ADDR_VAR 0 4
83240: PUSH
83241: LD_VAR 0 1
83245: PPUSH
83246: LD_VAR 0 3
83250: PPUSH
83251: CALL_OW 289
83255: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83256: LD_ADDR_VAR 0 2
83260: PUSH
83261: LD_VAR 0 2
83265: PPUSH
83266: LD_VAR 0 3
83270: PPUSH
83271: LD_VAR 0 4
83275: PPUSH
83276: CALL_OW 1
83280: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83281: LD_ADDR_VAR 0 2
83285: PUSH
83286: LD_VAR 0 2
83290: PPUSH
83291: LD_INT 4
83293: PPUSH
83294: LD_VAR 0 2
83298: PUSH
83299: LD_INT 4
83301: ARRAY
83302: PUSH
83303: LD_VAR 0 4
83307: PLUS
83308: PPUSH
83309: CALL_OW 1
83313: ST_TO_ADDR
// end ;
83314: GO 83233
83316: POP
83317: POP
// end ;
83318: LD_VAR 0 2
83322: RET
// export function Length ( array ) ; begin
83323: LD_INT 0
83325: PPUSH
// result := array + 0 ;
83326: LD_ADDR_VAR 0 2
83330: PUSH
83331: LD_VAR 0 1
83335: PUSH
83336: LD_INT 0
83338: PLUS
83339: ST_TO_ADDR
// end ;
83340: LD_VAR 0 2
83344: RET
// export function PrepareArray ( array ) ; begin
83345: LD_INT 0
83347: PPUSH
// result := array diff 0 ;
83348: LD_ADDR_VAR 0 2
83352: PUSH
83353: LD_VAR 0 1
83357: PUSH
83358: LD_INT 0
83360: DIFF
83361: ST_TO_ADDR
// if not result [ 1 ] then
83362: LD_VAR 0 2
83366: PUSH
83367: LD_INT 1
83369: ARRAY
83370: NOT
83371: IFFALSE 83391
// result := Delete ( result , 1 ) ;
83373: LD_ADDR_VAR 0 2
83377: PUSH
83378: LD_VAR 0 2
83382: PPUSH
83383: LD_INT 1
83385: PPUSH
83386: CALL_OW 3
83390: ST_TO_ADDR
// end ;
83391: LD_VAR 0 2
83395: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83396: LD_INT 0
83398: PPUSH
83399: PPUSH
83400: PPUSH
83401: PPUSH
// sibRocketRange := 25 ;
83402: LD_ADDR_VAR 0 6
83406: PUSH
83407: LD_INT 25
83409: ST_TO_ADDR
// result := false ;
83410: LD_ADDR_VAR 0 4
83414: PUSH
83415: LD_INT 0
83417: ST_TO_ADDR
// for i := 0 to 5 do
83418: LD_ADDR_VAR 0 5
83422: PUSH
83423: DOUBLE
83424: LD_INT 0
83426: DEC
83427: ST_TO_ADDR
83428: LD_INT 5
83430: PUSH
83431: FOR_TO
83432: IFFALSE 83499
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83434: LD_VAR 0 1
83438: PPUSH
83439: LD_VAR 0 5
83443: PPUSH
83444: LD_VAR 0 6
83448: PPUSH
83449: CALL_OW 272
83453: PPUSH
83454: LD_VAR 0 2
83458: PPUSH
83459: LD_VAR 0 5
83463: PPUSH
83464: LD_VAR 0 6
83468: PPUSH
83469: CALL_OW 273
83473: PPUSH
83474: LD_VAR 0 3
83478: PPUSH
83479: CALL_OW 309
83483: IFFALSE 83497
// begin result := true ;
83485: LD_ADDR_VAR 0 4
83489: PUSH
83490: LD_INT 1
83492: ST_TO_ADDR
// exit ;
83493: POP
83494: POP
83495: GO 83501
// end ;
83497: GO 83431
83499: POP
83500: POP
// end ;
83501: LD_VAR 0 4
83505: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83506: LD_INT 0
83508: PPUSH
83509: PPUSH
83510: PPUSH
// if btype = b_depot then
83511: LD_VAR 0 2
83515: PUSH
83516: LD_INT 0
83518: EQUAL
83519: IFFALSE 83531
// begin result := true ;
83521: LD_ADDR_VAR 0 3
83525: PUSH
83526: LD_INT 1
83528: ST_TO_ADDR
// exit ;
83529: GO 83647
// end ; pom := GetBase ( depot ) ;
83531: LD_ADDR_VAR 0 4
83535: PUSH
83536: LD_VAR 0 1
83540: PPUSH
83541: CALL_OW 274
83545: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83546: LD_ADDR_VAR 0 5
83550: PUSH
83551: LD_VAR 0 2
83555: PPUSH
83556: LD_VAR 0 1
83560: PPUSH
83561: CALL_OW 248
83565: PPUSH
83566: CALL_OW 450
83570: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83571: LD_ADDR_VAR 0 3
83575: PUSH
83576: LD_VAR 0 4
83580: PPUSH
83581: LD_INT 1
83583: PPUSH
83584: CALL_OW 275
83588: PUSH
83589: LD_VAR 0 5
83593: PUSH
83594: LD_INT 1
83596: ARRAY
83597: GREATEREQUAL
83598: PUSH
83599: LD_VAR 0 4
83603: PPUSH
83604: LD_INT 2
83606: PPUSH
83607: CALL_OW 275
83611: PUSH
83612: LD_VAR 0 5
83616: PUSH
83617: LD_INT 2
83619: ARRAY
83620: GREATEREQUAL
83621: AND
83622: PUSH
83623: LD_VAR 0 4
83627: PPUSH
83628: LD_INT 3
83630: PPUSH
83631: CALL_OW 275
83635: PUSH
83636: LD_VAR 0 5
83640: PUSH
83641: LD_INT 3
83643: ARRAY
83644: GREATEREQUAL
83645: AND
83646: ST_TO_ADDR
// end ;
83647: LD_VAR 0 3
83651: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83652: LD_INT 0
83654: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83655: LD_VAR 0 1
83659: PPUSH
83660: LD_VAR 0 2
83664: PPUSH
83665: LD_INT 0
83667: PPUSH
83668: LD_INT 0
83670: PPUSH
83671: LD_INT 1
83673: PPUSH
83674: LD_INT 0
83676: PPUSH
83677: CALL_OW 587
// end ;
83681: LD_VAR 0 3
83685: RET
// export function CenterOnNow ( unit ) ; begin
83686: LD_INT 0
83688: PPUSH
// result := IsInUnit ( unit ) ;
83689: LD_ADDR_VAR 0 2
83693: PUSH
83694: LD_VAR 0 1
83698: PPUSH
83699: CALL_OW 310
83703: ST_TO_ADDR
// if not result then
83704: LD_VAR 0 2
83708: NOT
83709: IFFALSE 83721
// result := unit ;
83711: LD_ADDR_VAR 0 2
83715: PUSH
83716: LD_VAR 0 1
83720: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83721: LD_VAR 0 1
83725: PPUSH
83726: CALL_OW 87
// end ;
83730: LD_VAR 0 2
83734: RET
// export function ComMoveHex ( unit , hex ) ; begin
83735: LD_INT 0
83737: PPUSH
// if not hex then
83738: LD_VAR 0 2
83742: NOT
83743: IFFALSE 83747
// exit ;
83745: GO 83800
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83747: LD_VAR 0 2
83751: PUSH
83752: LD_INT 1
83754: ARRAY
83755: PPUSH
83756: LD_VAR 0 2
83760: PUSH
83761: LD_INT 2
83763: ARRAY
83764: PPUSH
83765: CALL_OW 428
83769: IFFALSE 83773
// exit ;
83771: GO 83800
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83773: LD_VAR 0 1
83777: PPUSH
83778: LD_VAR 0 2
83782: PUSH
83783: LD_INT 1
83785: ARRAY
83786: PPUSH
83787: LD_VAR 0 2
83791: PUSH
83792: LD_INT 2
83794: ARRAY
83795: PPUSH
83796: CALL_OW 111
// end ;
83800: LD_VAR 0 3
83804: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83805: LD_INT 0
83807: PPUSH
83808: PPUSH
83809: PPUSH
// if not unit or not enemy then
83810: LD_VAR 0 1
83814: NOT
83815: PUSH
83816: LD_VAR 0 2
83820: NOT
83821: OR
83822: IFFALSE 83826
// exit ;
83824: GO 83950
// x := GetX ( enemy ) ;
83826: LD_ADDR_VAR 0 4
83830: PUSH
83831: LD_VAR 0 2
83835: PPUSH
83836: CALL_OW 250
83840: ST_TO_ADDR
// y := GetY ( enemy ) ;
83841: LD_ADDR_VAR 0 5
83845: PUSH
83846: LD_VAR 0 2
83850: PPUSH
83851: CALL_OW 251
83855: ST_TO_ADDR
// if ValidHex ( x , y ) then
83856: LD_VAR 0 4
83860: PPUSH
83861: LD_VAR 0 5
83865: PPUSH
83866: CALL_OW 488
83870: IFFALSE 83950
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83872: LD_VAR 0 2
83876: PPUSH
83877: CALL_OW 247
83881: PUSH
83882: LD_INT 3
83884: PUSH
83885: LD_INT 2
83887: PUSH
83888: EMPTY
83889: LIST
83890: LIST
83891: IN
83892: PUSH
83893: LD_VAR 0 1
83897: PPUSH
83898: CALL_OW 255
83902: PPUSH
83903: LD_VAR 0 2
83907: PPUSH
83908: CALL_OW 292
83912: OR
83913: IFFALSE 83931
// ComAttackUnit ( unit , enemy ) else
83915: LD_VAR 0 1
83919: PPUSH
83920: LD_VAR 0 2
83924: PPUSH
83925: CALL_OW 115
83929: GO 83950
// ComAgressiveMove ( unit , x , y ) ;
83931: LD_VAR 0 1
83935: PPUSH
83936: LD_VAR 0 4
83940: PPUSH
83941: LD_VAR 0 5
83945: PPUSH
83946: CALL_OW 114
// end ;
83950: LD_VAR 0 3
83954: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83955: LD_INT 0
83957: PPUSH
83958: PPUSH
83959: PPUSH
// list := AreaToList ( area , 0 ) ;
83960: LD_ADDR_VAR 0 5
83964: PUSH
83965: LD_VAR 0 1
83969: PPUSH
83970: LD_INT 0
83972: PPUSH
83973: CALL_OW 517
83977: ST_TO_ADDR
// if not list then
83978: LD_VAR 0 5
83982: NOT
83983: IFFALSE 83987
// exit ;
83985: GO 84117
// if all then
83987: LD_VAR 0 2
83991: IFFALSE 84079
// begin for i := 1 to list [ 1 ] do
83993: LD_ADDR_VAR 0 4
83997: PUSH
83998: DOUBLE
83999: LD_INT 1
84001: DEC
84002: ST_TO_ADDR
84003: LD_VAR 0 5
84007: PUSH
84008: LD_INT 1
84010: ARRAY
84011: PUSH
84012: FOR_TO
84013: IFFALSE 84075
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84015: LD_ADDR_VAR 0 3
84019: PUSH
84020: LD_VAR 0 3
84024: PPUSH
84025: LD_VAR 0 3
84029: PUSH
84030: LD_INT 1
84032: PLUS
84033: PPUSH
84034: LD_VAR 0 5
84038: PUSH
84039: LD_INT 1
84041: ARRAY
84042: PUSH
84043: LD_VAR 0 4
84047: ARRAY
84048: PUSH
84049: LD_VAR 0 5
84053: PUSH
84054: LD_INT 2
84056: ARRAY
84057: PUSH
84058: LD_VAR 0 4
84062: ARRAY
84063: PUSH
84064: EMPTY
84065: LIST
84066: LIST
84067: PPUSH
84068: CALL_OW 1
84072: ST_TO_ADDR
84073: GO 84012
84075: POP
84076: POP
// exit ;
84077: GO 84117
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84079: LD_ADDR_VAR 0 3
84083: PUSH
84084: LD_VAR 0 5
84088: PUSH
84089: LD_INT 1
84091: ARRAY
84092: PUSH
84093: LD_INT 1
84095: ARRAY
84096: PUSH
84097: LD_VAR 0 5
84101: PUSH
84102: LD_INT 2
84104: ARRAY
84105: PUSH
84106: LD_INT 1
84108: ARRAY
84109: PUSH
84110: EMPTY
84111: LIST
84112: LIST
84113: PUSH
84114: EMPTY
84115: LIST
84116: ST_TO_ADDR
// end ;
84117: LD_VAR 0 3
84121: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84122: LD_INT 0
84124: PPUSH
84125: PPUSH
// list := AreaToList ( area , 0 ) ;
84126: LD_ADDR_VAR 0 4
84130: PUSH
84131: LD_VAR 0 1
84135: PPUSH
84136: LD_INT 0
84138: PPUSH
84139: CALL_OW 517
84143: ST_TO_ADDR
// if not list then
84144: LD_VAR 0 4
84148: NOT
84149: IFFALSE 84153
// exit ;
84151: GO 84194
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84153: LD_ADDR_VAR 0 3
84157: PUSH
84158: LD_VAR 0 4
84162: PUSH
84163: LD_INT 1
84165: ARRAY
84166: PUSH
84167: LD_INT 1
84169: ARRAY
84170: PUSH
84171: LD_VAR 0 4
84175: PUSH
84176: LD_INT 2
84178: ARRAY
84179: PUSH
84180: LD_INT 1
84182: ARRAY
84183: PUSH
84184: LD_VAR 0 2
84188: PUSH
84189: EMPTY
84190: LIST
84191: LIST
84192: LIST
84193: ST_TO_ADDR
// end ;
84194: LD_VAR 0 3
84198: RET
// export function First ( array ) ; begin
84199: LD_INT 0
84201: PPUSH
// if not array then
84202: LD_VAR 0 1
84206: NOT
84207: IFFALSE 84211
// exit ;
84209: GO 84225
// result := array [ 1 ] ;
84211: LD_ADDR_VAR 0 2
84215: PUSH
84216: LD_VAR 0 1
84220: PUSH
84221: LD_INT 1
84223: ARRAY
84224: ST_TO_ADDR
// end ;
84225: LD_VAR 0 2
84229: RET
// export function Last ( array ) ; begin
84230: LD_INT 0
84232: PPUSH
// if not array then
84233: LD_VAR 0 1
84237: NOT
84238: IFFALSE 84242
// exit ;
84240: GO 84258
// result := array [ array ] ;
84242: LD_ADDR_VAR 0 2
84246: PUSH
84247: LD_VAR 0 1
84251: PUSH
84252: LD_VAR 0 1
84256: ARRAY
84257: ST_TO_ADDR
// end ;
84258: LD_VAR 0 2
84262: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84263: LD_INT 0
84265: PPUSH
84266: PPUSH
// result := [ ] ;
84267: LD_ADDR_VAR 0 5
84271: PUSH
84272: EMPTY
84273: ST_TO_ADDR
// if not array then
84274: LD_VAR 0 1
84278: NOT
84279: IFFALSE 84283
// exit ;
84281: GO 84395
// for i := 1 to array do
84283: LD_ADDR_VAR 0 6
84287: PUSH
84288: DOUBLE
84289: LD_INT 1
84291: DEC
84292: ST_TO_ADDR
84293: LD_VAR 0 1
84297: PUSH
84298: FOR_TO
84299: IFFALSE 84393
// if array [ i ] [ index ] = value then
84301: LD_VAR 0 1
84305: PUSH
84306: LD_VAR 0 6
84310: ARRAY
84311: PUSH
84312: LD_VAR 0 2
84316: ARRAY
84317: PUSH
84318: LD_VAR 0 3
84322: EQUAL
84323: IFFALSE 84391
// begin if indexColumn then
84325: LD_VAR 0 4
84329: IFFALSE 84365
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84331: LD_ADDR_VAR 0 5
84335: PUSH
84336: LD_VAR 0 5
84340: PPUSH
84341: LD_VAR 0 1
84345: PUSH
84346: LD_VAR 0 6
84350: ARRAY
84351: PUSH
84352: LD_VAR 0 4
84356: ARRAY
84357: PPUSH
84358: CALL 79577 0 2
84362: ST_TO_ADDR
84363: GO 84391
// result := Join ( result , array [ i ] ) ;
84365: LD_ADDR_VAR 0 5
84369: PUSH
84370: LD_VAR 0 5
84374: PPUSH
84375: LD_VAR 0 1
84379: PUSH
84380: LD_VAR 0 6
84384: ARRAY
84385: PPUSH
84386: CALL 79577 0 2
84390: ST_TO_ADDR
// end ;
84391: GO 84298
84393: POP
84394: POP
// end ;
84395: LD_VAR 0 5
84399: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84400: LD_INT 0
84402: PPUSH
// if not vehicles or not parkingPoint then
84403: LD_VAR 0 1
84407: NOT
84408: PUSH
84409: LD_VAR 0 2
84413: NOT
84414: OR
84415: IFFALSE 84419
// exit ;
84417: GO 84517
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84419: LD_ADDR_VAR 0 1
84423: PUSH
84424: LD_VAR 0 1
84428: PPUSH
84429: LD_INT 50
84431: PUSH
84432: EMPTY
84433: LIST
84434: PUSH
84435: LD_INT 3
84437: PUSH
84438: LD_INT 92
84440: PUSH
84441: LD_VAR 0 2
84445: PUSH
84446: LD_INT 1
84448: ARRAY
84449: PUSH
84450: LD_VAR 0 2
84454: PUSH
84455: LD_INT 2
84457: ARRAY
84458: PUSH
84459: LD_INT 8
84461: PUSH
84462: EMPTY
84463: LIST
84464: LIST
84465: LIST
84466: LIST
84467: PUSH
84468: EMPTY
84469: LIST
84470: LIST
84471: PUSH
84472: EMPTY
84473: LIST
84474: LIST
84475: PPUSH
84476: CALL_OW 72
84480: ST_TO_ADDR
// if not vehicles then
84481: LD_VAR 0 1
84485: NOT
84486: IFFALSE 84490
// exit ;
84488: GO 84517
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84490: LD_VAR 0 1
84494: PPUSH
84495: LD_VAR 0 2
84499: PUSH
84500: LD_INT 1
84502: ARRAY
84503: PPUSH
84504: LD_VAR 0 2
84508: PUSH
84509: LD_INT 2
84511: ARRAY
84512: PPUSH
84513: CALL_OW 111
// end ;
84517: LD_VAR 0 3
84521: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84522: LD_INT 0
84524: PPUSH
84525: PPUSH
84526: PPUSH
// if not side or not area then
84527: LD_VAR 0 1
84531: NOT
84532: PUSH
84533: LD_VAR 0 2
84537: NOT
84538: OR
84539: IFFALSE 84543
// exit ;
84541: GO 84662
// tmp := AreaToList ( area , 0 ) ;
84543: LD_ADDR_VAR 0 5
84547: PUSH
84548: LD_VAR 0 2
84552: PPUSH
84553: LD_INT 0
84555: PPUSH
84556: CALL_OW 517
84560: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84561: LD_ADDR_VAR 0 4
84565: PUSH
84566: DOUBLE
84567: LD_INT 1
84569: DEC
84570: ST_TO_ADDR
84571: LD_VAR 0 5
84575: PUSH
84576: LD_INT 1
84578: ARRAY
84579: PUSH
84580: FOR_TO
84581: IFFALSE 84660
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84583: LD_VAR 0 5
84587: PUSH
84588: LD_INT 1
84590: ARRAY
84591: PUSH
84592: LD_VAR 0 4
84596: ARRAY
84597: PPUSH
84598: LD_VAR 0 5
84602: PUSH
84603: LD_INT 2
84605: ARRAY
84606: PUSH
84607: LD_VAR 0 4
84611: ARRAY
84612: PPUSH
84613: CALL_OW 351
84617: IFFALSE 84658
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84619: LD_VAR 0 5
84623: PUSH
84624: LD_INT 1
84626: ARRAY
84627: PUSH
84628: LD_VAR 0 4
84632: ARRAY
84633: PPUSH
84634: LD_VAR 0 5
84638: PUSH
84639: LD_INT 2
84641: ARRAY
84642: PUSH
84643: LD_VAR 0 4
84647: ARRAY
84648: PPUSH
84649: LD_VAR 0 1
84653: PPUSH
84654: CALL_OW 244
// end ;
84658: GO 84580
84660: POP
84661: POP
// end ; end_of_file
84662: LD_VAR 0 3
84666: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84667: LD_VAR 0 1
84671: PUSH
84672: LD_INT 200
84674: DOUBLE
84675: GREATEREQUAL
84676: IFFALSE 84684
84678: LD_INT 299
84680: DOUBLE
84681: LESSEQUAL
84682: IFTRUE 84686
84684: GO 84718
84686: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84687: LD_VAR 0 1
84691: PPUSH
84692: LD_VAR 0 2
84696: PPUSH
84697: LD_VAR 0 3
84701: PPUSH
84702: LD_VAR 0 4
84706: PPUSH
84707: LD_VAR 0 5
84711: PPUSH
84712: CALL 37083 0 5
84716: GO 84795
84718: LD_INT 300
84720: DOUBLE
84721: GREATEREQUAL
84722: IFFALSE 84730
84724: LD_INT 399
84726: DOUBLE
84727: LESSEQUAL
84728: IFTRUE 84732
84730: GO 84794
84732: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84733: LD_VAR 0 1
84737: PPUSH
84738: LD_VAR 0 2
84742: PPUSH
84743: LD_VAR 0 3
84747: PPUSH
84748: LD_VAR 0 4
84752: PPUSH
84753: LD_VAR 0 5
84757: PPUSH
84758: LD_VAR 0 6
84762: PPUSH
84763: LD_VAR 0 7
84767: PPUSH
84768: LD_VAR 0 8
84772: PPUSH
84773: LD_VAR 0 9
84777: PPUSH
84778: LD_VAR 0 10
84782: PPUSH
84783: LD_VAR 0 11
84787: PPUSH
84788: CALL 32991 0 11
84792: GO 84795
84794: POP
// end ;
84795: PPOPN 11
84797: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84798: LD_VAR 0 1
84802: PPUSH
84803: LD_VAR 0 2
84807: PPUSH
84808: LD_VAR 0 3
84812: PPUSH
84813: LD_VAR 0 4
84817: PPUSH
84818: LD_VAR 0 5
84822: PPUSH
84823: CALL 36468 0 5
// end ; end_of_file
84827: PPOPN 5
84829: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84830: LD_VAR 0 1
84834: PPUSH
84835: LD_VAR 0 2
84839: PPUSH
84840: LD_VAR 0 3
84844: PPUSH
84845: LD_VAR 0 4
84849: PPUSH
84850: LD_VAR 0 5
84854: PPUSH
84855: LD_VAR 0 6
84859: PPUSH
84860: CALL 20643 0 6
// end ;
84864: PPOPN 6
84866: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84867: LD_INT 0
84869: PPUSH
// begin if not units then
84870: LD_VAR 0 1
84874: NOT
84875: IFFALSE 84879
// exit ;
84877: GO 84879
// end ;
84879: PPOPN 7
84881: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84882: CALL 20530 0 0
// end ;
84886: PPOPN 1
84888: END
