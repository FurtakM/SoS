// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 8885 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 73573 0 9
// Action ;
  79: CALL 14694 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2486 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 39442 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 39442 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 39442 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 39442 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 39442 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: PUSH
 686: LD_STRING LisaInDelta
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 30
 696: NOT
 697: AND
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 754
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 39442 0 3
 731: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 732: LD_ADDR_VAR 0 5
 736: PUSH
 737: LD_VAR 0 5
 741: PPUSH
 742: LD_EXP 19
 746: PPUSH
 747: CALL 76891 0 2
 751: ST_TO_ADDR
// end else
 752: GO 813
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 754: LD_EXP 19
 758: NOT
 759: PUSH
 760: LD_STRING LisaIn07
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: CALL_OW 30
 770: NOT
 771: AND
 772: IFFALSE 813
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 774: LD_ADDR_EXP 19
 778: PUSH
 779: LD_STRING Lisa
 781: PPUSH
 782: LD_INT 1
 784: PPUSH
 785: LD_STRING 07_
 787: PPUSH
 788: CALL 39442 0 3
 792: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 793: LD_ADDR_VAR 0 5
 797: PUSH
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_EXP 19
 807: PPUSH
 808: CALL 76891 0 2
 812: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 813: LD_STRING 04_Bobby
 815: PUSH
 816: EMPTY
 817: LIST
 818: PPUSH
 819: CALL_OW 28
 823: PUSH
 824: LD_STRING BobbyInDelta
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: CALL_OW 30
 834: NOT
 835: AND
 836: PUSH
 837: LD_STRING 07_Bobby
 839: PUSH
 840: EMPTY
 841: LIST
 842: PPUSH
 843: CALL_OW 28
 847: NOT
 848: AND
 849: IFFALSE 892
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 851: LD_ADDR_EXP 17
 855: PUSH
 856: LD_STRING Bobby
 858: PPUSH
 859: LD_INT 1
 861: PPUSH
 862: LD_STRING 04_
 864: PPUSH
 865: CALL 39442 0 3
 869: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 870: LD_ADDR_VAR 0 5
 874: PUSH
 875: LD_VAR 0 5
 879: PPUSH
 880: LD_EXP 17
 884: PPUSH
 885: CALL 76891 0 2
 889: ST_TO_ADDR
// end else
 890: GO 951
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 892: LD_EXP 17
 896: NOT
 897: PUSH
 898: LD_STRING BobbyIn07
 900: PPUSH
 901: LD_INT 0
 903: PPUSH
 904: CALL_OW 30
 908: NOT
 909: AND
 910: IFFALSE 951
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 912: LD_ADDR_EXP 17
 916: PUSH
 917: LD_STRING Bobby
 919: PPUSH
 920: LD_INT 1
 922: PPUSH
 923: LD_STRING 07_
 925: PPUSH
 926: CALL 39442 0 3
 930: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 931: LD_ADDR_VAR 0 5
 935: PUSH
 936: LD_VAR 0 5
 940: PPUSH
 941: LD_EXP 17
 945: PPUSH
 946: CALL 76891 0 2
 950: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 951: LD_STRING 04_Cyrus
 953: PUSH
 954: EMPTY
 955: LIST
 956: PPUSH
 957: CALL_OW 28
 961: PUSH
 962: LD_STRING CyrusInDelta
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 30
 972: NOT
 973: AND
 974: PUSH
 975: LD_STRING 07_Cyrus
 977: PUSH
 978: EMPTY
 979: LIST
 980: PPUSH
 981: CALL_OW 28
 985: NOT
 986: AND
 987: IFFALSE 1030
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
 989: LD_ADDR_EXP 18
 993: PUSH
 994: LD_STRING Cyrus
 996: PPUSH
 997: LD_INT 1
 999: PPUSH
1000: LD_STRING 04_
1002: PPUSH
1003: CALL 39442 0 3
1007: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_VAR 0 5
1017: PPUSH
1018: LD_EXP 18
1022: PPUSH
1023: CALL 76891 0 2
1027: ST_TO_ADDR
// end else
1028: GO 1089
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1030: LD_EXP 18
1034: NOT
1035: PUSH
1036: LD_STRING CyrusIn07
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: CALL_OW 30
1046: NOT
1047: AND
1048: IFFALSE 1089
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1050: LD_ADDR_EXP 18
1054: PUSH
1055: LD_STRING Cyrus
1057: PPUSH
1058: LD_INT 1
1060: PPUSH
1061: LD_STRING 07_
1063: PPUSH
1064: CALL 39442 0 3
1068: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_VAR 0 5
1078: PPUSH
1079: LD_EXP 18
1083: PPUSH
1084: CALL 76891 0 2
1088: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1089: LD_STRING 04_Brown
1091: PUSH
1092: EMPTY
1093: LIST
1094: PPUSH
1095: CALL_OW 28
1099: PUSH
1100: LD_STRING BrownInDelta
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 30
1110: NOT
1111: AND
1112: PUSH
1113: LD_STRING 07_Brown
1115: PUSH
1116: EMPTY
1117: LIST
1118: PPUSH
1119: CALL_OW 28
1123: NOT
1124: AND
1125: PUSH
1126: LD_EXP 13
1130: PUSH
1131: LD_INT 2
1133: NONEQUAL
1134: AND
1135: IFFALSE 1178
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1137: LD_ADDR_EXP 15
1141: PUSH
1142: LD_STRING Brown
1144: PPUSH
1145: LD_INT 1
1147: PPUSH
1148: LD_STRING 04_
1150: PPUSH
1151: CALL 39442 0 3
1155: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1156: LD_ADDR_VAR 0 5
1160: PUSH
1161: LD_VAR 0 5
1165: PPUSH
1166: LD_EXP 15
1170: PPUSH
1171: CALL 76891 0 2
1175: ST_TO_ADDR
// end else
1176: GO 1247
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1178: LD_EXP 15
1182: NOT
1183: PUSH
1184: LD_STRING BrownIn07
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 30
1194: NOT
1195: AND
1196: PUSH
1197: LD_EXP 13
1201: PUSH
1202: LD_INT 2
1204: NONEQUAL
1205: AND
1206: IFFALSE 1247
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1208: LD_ADDR_EXP 15
1212: PUSH
1213: LD_STRING Brown
1215: PPUSH
1216: LD_INT 1
1218: PPUSH
1219: LD_STRING 07_
1221: PPUSH
1222: CALL 39442 0 3
1226: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1227: LD_ADDR_VAR 0 5
1231: PUSH
1232: LD_VAR 0 5
1236: PPUSH
1237: LD_EXP 15
1241: PPUSH
1242: CALL 76891 0 2
1246: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1247: LD_STRING 04_Donaldson
1249: PUSH
1250: EMPTY
1251: LIST
1252: PPUSH
1253: CALL_OW 28
1257: PUSH
1258: LD_STRING DonaldsonInDelta
1260: PPUSH
1261: LD_INT 0
1263: PPUSH
1264: CALL_OW 30
1268: NOT
1269: AND
1270: PUSH
1271: LD_STRING 07_Donaldson
1273: PUSH
1274: EMPTY
1275: LIST
1276: PPUSH
1277: CALL_OW 28
1281: NOT
1282: AND
1283: PUSH
1284: LD_EXP 13
1288: PUSH
1289: LD_INT 1
1291: NONEQUAL
1292: AND
1293: IFFALSE 1336
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1295: LD_ADDR_EXP 16
1299: PUSH
1300: LD_STRING Donaldson
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: LD_STRING 04_
1308: PPUSH
1309: CALL 39442 0 3
1313: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1314: LD_ADDR_VAR 0 5
1318: PUSH
1319: LD_VAR 0 5
1323: PPUSH
1324: LD_EXP 16
1328: PPUSH
1329: CALL 76891 0 2
1333: ST_TO_ADDR
// end else
1334: GO 1405
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1336: LD_EXP 16
1340: NOT
1341: PUSH
1342: LD_STRING DonaldsonIn07
1344: PPUSH
1345: LD_INT 0
1347: PPUSH
1348: CALL_OW 30
1352: NOT
1353: AND
1354: PUSH
1355: LD_EXP 13
1359: PUSH
1360: LD_INT 1
1362: NONEQUAL
1363: AND
1364: IFFALSE 1405
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1366: LD_ADDR_EXP 16
1370: PUSH
1371: LD_STRING Donaldson
1373: PPUSH
1374: LD_INT 1
1376: PPUSH
1377: LD_STRING 07_
1379: PPUSH
1380: CALL 39442 0 3
1384: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1385: LD_ADDR_VAR 0 5
1389: PUSH
1390: LD_VAR 0 5
1394: PPUSH
1395: LD_EXP 16
1399: PPUSH
1400: CALL 76891 0 2
1404: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1405: LD_STRING KhatamIn07
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 30
1415: NOT
1416: IFFALSE 1457
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1418: LD_ADDR_EXP 23
1422: PUSH
1423: LD_STRING Khatam
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_STRING 07_
1431: PPUSH
1432: CALL 39442 0 3
1436: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1437: LD_ADDR_VAR 0 5
1441: PUSH
1442: LD_VAR 0 5
1446: PPUSH
1447: LD_EXP 23
1451: PPUSH
1452: CALL 76891 0 2
1456: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_VAR 0 6
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 5 - others ;
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: LD_INT 5
1477: PUSH
1478: LD_VAR 0 6
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 4
1488: IFFALSE 1545
// for i := tmp downto 1 do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_VAR 0 4
1500: INC
1501: ST_TO_ADDR
1502: LD_INT 1
1504: PUSH
1505: FOR_DOWNTO
1506: IFFALSE 1543
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1521: LD_ADDR_VAR 0 6
1525: PUSH
1526: LD_VAR 0 6
1530: PPUSH
1531: CALL_OW 44
1535: PPUSH
1536: CALL 76891 0 2
1540: ST_TO_ADDR
// end ;
1541: GO 1505
1543: POP
1544: POP
// for i in others do
1545: LD_ADDR_VAR 0 2
1549: PUSH
1550: LD_VAR 0 6
1554: PUSH
1555: FOR_IN
1556: IFFALSE 1572
// SetTag ( i , 106 ) ;
1558: LD_VAR 0 2
1562: PPUSH
1563: LD_INT 106
1565: PPUSH
1566: CALL_OW 109
1570: GO 1555
1572: POP
1573: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1574: LD_ADDR_VAR 0 8
1578: PUSH
1579: LD_INT 22
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 30
1591: PUSH
1592: LD_INT 31
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PPUSH
1603: CALL_OW 69
1607: ST_TO_ADDR
// for i in bun do
1608: LD_ADDR_VAR 0 2
1612: PUSH
1613: LD_VAR 0 8
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1751
// begin x := GetX ( i ) ;
1621: LD_ADDR_VAR 0 13
1625: PUSH
1626: LD_VAR 0 2
1630: PPUSH
1631: CALL_OW 250
1635: ST_TO_ADDR
// y := GetY ( i ) ;
1636: LD_ADDR_VAR 0 14
1640: PUSH
1641: LD_VAR 0 2
1645: PPUSH
1646: CALL_OW 251
1650: ST_TO_ADDR
// d := GetDir ( i ) ;
1651: LD_ADDR_VAR 0 15
1655: PUSH
1656: LD_VAR 0 2
1660: PPUSH
1661: CALL_OW 254
1665: ST_TO_ADDR
// RemoveUnit ( i ) ;
1666: LD_VAR 0 2
1670: PPUSH
1671: CALL_OW 64
// bc_type := b_bunker ;
1675: LD_ADDR_OWVAR 42
1679: PUSH
1680: LD_INT 32
1682: ST_TO_ADDR
// bc_level := 6 ;
1683: LD_ADDR_OWVAR 43
1687: PUSH
1688: LD_INT 6
1690: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1691: LD_ADDR_VAR 0 16
1695: PUSH
1696: LD_VAR 0 13
1700: PPUSH
1701: LD_VAR 0 14
1705: PPUSH
1706: LD_VAR 0 15
1710: PPUSH
1711: CALL_OW 47
1715: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1716: LD_VAR 0 16
1720: PPUSH
1721: LD_INT 5
1723: PUSH
1724: LD_INT 4
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 2
1738: MOD
1739: PUSH
1740: LD_INT 1
1742: PLUS
1743: ARRAY
1744: PPUSH
1745: CALL_OW 431
// end ;
1749: GO 1618
1751: POP
1752: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1753: LD_ADDR_VAR 0 7
1757: PUSH
1758: LD_INT 22
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 30
1770: PUSH
1771: LD_INT 5
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 69
1786: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1787: LD_ADDR_VAR 0 9
1791: PUSH
1792: LD_INT 22
1794: PUSH
1795: LD_INT 1
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 2
1804: PUSH
1805: LD_INT 30
1807: PUSH
1808: LD_INT 6
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: LD_INT 30
1817: PUSH
1818: LD_INT 7
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 30
1827: PUSH
1828: LD_INT 8
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PPUSH
1845: CALL_OW 69
1849: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1850: LD_ADDR_VAR 0 10
1854: PUSH
1855: LD_INT 22
1857: PUSH
1858: LD_INT 1
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 30
1867: PUSH
1868: LD_INT 3
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PPUSH
1879: CALL_OW 69
1883: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1884: LD_ADDR_VAR 0 11
1888: PUSH
1889: LD_INT 22
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 30
1901: PUSH
1902: LD_INT 36
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 69
1917: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1918: LD_ADDR_VAR 0 8
1922: PUSH
1923: LD_INT 22
1925: PUSH
1926: LD_INT 1
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PUSH
1933: LD_INT 2
1935: PUSH
1936: LD_INT 30
1938: PUSH
1939: LD_INT 31
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 30
1948: PUSH
1949: LD_INT 32
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PPUSH
1965: CALL_OW 69
1969: ST_TO_ADDR
// for i in others union tmp2 do
1970: LD_ADDR_VAR 0 2
1974: PUSH
1975: LD_VAR 0 6
1979: PUSH
1980: LD_VAR 0 5
1984: UNION
1985: PUSH
1986: FOR_IN
1987: IFFALSE 2479
// begin placed := false ;
1989: LD_ADDR_VAR 0 12
1993: PUSH
1994: LD_INT 0
1996: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1997: LD_VAR 0 2
2001: PPUSH
2002: CALL_OW 257
2006: PUSH
2007: LD_INT 1
2009: EQUAL
2010: IFFALSE 2135
// begin if UnitFilter ( bun , [ f_empty ] ) then
2012: LD_VAR 0 8
2016: PPUSH
2017: LD_INT 58
2019: PUSH
2020: EMPTY
2021: LIST
2022: PPUSH
2023: CALL_OW 72
2027: IFFALSE 2066
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2029: LD_VAR 0 2
2033: PPUSH
2034: LD_VAR 0 8
2038: PPUSH
2039: LD_INT 58
2041: PUSH
2042: EMPTY
2043: LIST
2044: PPUSH
2045: CALL_OW 72
2049: PUSH
2050: LD_INT 1
2052: ARRAY
2053: PPUSH
2054: CALL_OW 52
// placed := true ;
2058: LD_ADDR_VAR 0 12
2062: PUSH
2063: LD_INT 1
2065: ST_TO_ADDR
// end ; if arm and not placed then
2066: LD_VAR 0 7
2070: PUSH
2071: LD_VAR 0 12
2075: NOT
2076: AND
2077: IFFALSE 2135
// begin for j in arm do
2079: LD_ADDR_VAR 0 3
2083: PUSH
2084: LD_VAR 0 7
2088: PUSH
2089: FOR_IN
2090: IFFALSE 2133
// if UnitsInside ( j ) < 6 then
2092: LD_VAR 0 3
2096: PPUSH
2097: CALL_OW 313
2101: PUSH
2102: LD_INT 6
2104: LESS
2105: IFFALSE 2131
// begin PlaceHumanInUnit ( i , j ) ;
2107: LD_VAR 0 2
2111: PPUSH
2112: LD_VAR 0 3
2116: PPUSH
2117: CALL_OW 52
// placed := true ;
2121: LD_ADDR_VAR 0 12
2125: PUSH
2126: LD_INT 1
2128: ST_TO_ADDR
// break ;
2129: GO 2133
// end ;
2131: GO 2089
2133: POP
2134: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2135: LD_VAR 0 2
2139: PPUSH
2140: CALL_OW 257
2144: PUSH
2145: LD_INT 2
2147: EQUAL
2148: IFFALSE 2181
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_INT 52
2157: PPUSH
2158: LD_INT 20
2160: PPUSH
2161: LD_INT 6
2163: PPUSH
2164: LD_INT 0
2166: PPUSH
2167: CALL_OW 50
// placed := true ;
2171: LD_ADDR_VAR 0 12
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// continue ;
2179: GO 1986
// end ; if GetClass ( i ) = class_mechanic then
2181: LD_VAR 0 2
2185: PPUSH
2186: CALL_OW 257
2190: PUSH
2191: LD_INT 3
2193: EQUAL
2194: IFFALSE 2298
// begin if fac then
2196: LD_VAR 0 10
2200: IFFALSE 2298
// begin if ct then
2202: LD_VAR 0 11
2206: IFFALSE 2234
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2208: LD_VAR 0 2
2212: PPUSH
2213: LD_VAR 0 11
2217: PUSH
2218: LD_INT 1
2220: ARRAY
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// end ; if placed then
2234: LD_VAR 0 12
2238: IFFALSE 2242
// continue ;
2240: GO 1986
// for j in fac do
2242: LD_ADDR_VAR 0 3
2246: PUSH
2247: LD_VAR 0 10
2251: PUSH
2252: FOR_IN
2253: IFFALSE 2296
// if UnitsInside ( j ) < 6 then
2255: LD_VAR 0 3
2259: PPUSH
2260: CALL_OW 313
2264: PUSH
2265: LD_INT 6
2267: LESS
2268: IFFALSE 2294
// begin PlaceHumanInUnit ( i , j ) ;
2270: LD_VAR 0 2
2274: PPUSH
2275: LD_VAR 0 3
2279: PPUSH
2280: CALL_OW 52
// placed := true ;
2284: LD_ADDR_VAR 0 12
2288: PUSH
2289: LD_INT 1
2291: ST_TO_ADDR
// break ;
2292: GO 2296
// end ;
2294: GO 2252
2296: POP
2297: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL_OW 257
2307: PUSH
2308: LD_INT 4
2310: EQUAL
2311: IFFALSE 2406
// begin if lab then
2313: LD_VAR 0 9
2317: IFFALSE 2375
// begin for j in lab do
2319: LD_ADDR_VAR 0 3
2323: PUSH
2324: LD_VAR 0 9
2328: PUSH
2329: FOR_IN
2330: IFFALSE 2373
// if UnitsInside ( j ) < 6 then
2332: LD_VAR 0 3
2336: PPUSH
2337: CALL_OW 313
2341: PUSH
2342: LD_INT 6
2344: LESS
2345: IFFALSE 2371
// begin PlaceHumanInUnit ( i , j ) ;
2347: LD_VAR 0 2
2351: PPUSH
2352: LD_VAR 0 3
2356: PPUSH
2357: CALL_OW 52
// placed := true ;
2361: LD_ADDR_VAR 0 12
2365: PUSH
2366: LD_INT 1
2368: ST_TO_ADDR
// break ;
2369: GO 2373
// end ;
2371: GO 2329
2373: POP
2374: POP
// end ; if not placed then
2375: LD_VAR 0 12
2379: NOT
2380: IFFALSE 2406
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2382: LD_VAR 0 2
2386: PPUSH
2387: LD_INT 3
2389: PPUSH
2390: LD_INT 0
2392: PPUSH
2393: CALL_OW 49
// ComHold ( i ) ;
2397: LD_VAR 0 2
2401: PPUSH
2402: CALL_OW 140
// end ; end ; if ct then
2406: LD_VAR 0 11
2410: IFFALSE 2477
// if UnitsInside ( ct [ 1 ] ) then
2412: LD_VAR 0 11
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 313
2425: IFFALSE 2477
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 33
2444: PUSH
2445: LD_INT 2
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: PUSH
2461: FOR_IN
2462: IFFALSE 2475
// Connect ( i ) ;
2464: LD_VAR 0 2
2468: PPUSH
2469: CALL 47548 0 1
2473: GO 2461
2475: POP
2476: POP
// end ; end ;
2477: GO 1986
2479: POP
2480: POP
// end ;
2481: LD_VAR 0 1
2485: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2486: LD_INT 0
2488: PPUSH
2489: PPUSH
2490: PPUSH
2491: PPUSH
2492: PPUSH
2493: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2494: LD_INT 71
2496: PPUSH
2497: LD_INT 5
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2507: LD_ADDR_VAR 0 2
2511: PUSH
2512: LD_STRING GammaBase
2514: PPUSH
2515: EMPTY
2516: PPUSH
2517: CALL_OW 30
2521: ST_TO_ADDR
// if not blist then
2522: LD_VAR 0 2
2526: NOT
2527: IFFALSE 2567
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: LD_INT 1
2536: PUSH
2537: LD_INT 52
2539: PUSH
2540: LD_INT 12
2542: PUSH
2543: LD_INT 3
2545: PUSH
2546: LD_INT 3
2548: PUSH
2549: LD_INT 0
2551: PUSH
2552: LD_INT 0
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: EMPTY
2565: LIST
2566: ST_TO_ADDR
// uc_side := 1 ;
2567: LD_ADDR_OWVAR 20
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// uc_nation := 1 ;
2575: LD_ADDR_OWVAR 21
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// bc_kind1 := - 1 ;
2583: LD_ADDR_OWVAR 44
2587: PUSH
2588: LD_INT 1
2590: NEG
2591: ST_TO_ADDR
// bc_kind2 := - 1 ;
2592: LD_ADDR_OWVAR 45
2596: PUSH
2597: LD_INT 1
2599: NEG
2600: ST_TO_ADDR
// for i in blist do
2601: LD_ADDR_VAR 0 3
2605: PUSH
2606: LD_VAR 0 2
2610: PUSH
2611: FOR_IN
2612: IFFALSE 2888
// begin bc_type := i [ 1 ] ;
2614: LD_ADDR_OWVAR 42
2618: PUSH
2619: LD_VAR 0 3
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2628: LD_ADDR_OWVAR 43
2632: PUSH
2633: LD_VAR 0 3
2637: PUSH
2638: LD_INT 5
2640: ARRAY
2641: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2642: LD_OWVAR 42
2646: PUSH
2647: LD_INT 6
2649: PUSH
2650: LD_INT 7
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: IN
2657: IFFALSE 2723
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2659: LD_STRING 06_remoteVehs_1
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 30
2669: NOT
2670: IFFALSE 2698
// begin bc_type := b_lab_full ;
2672: LD_ADDR_OWVAR 42
2676: PUSH
2677: LD_INT 8
2679: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2680: LD_ADDR_OWVAR 44
2684: PUSH
2685: LD_INT 10
2687: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2688: LD_ADDR_OWVAR 45
2692: PUSH
2693: LD_INT 15
2695: ST_TO_ADDR
// end else
2696: GO 2723
// begin bc_type := b_lab_half ;
2698: LD_ADDR_OWVAR 42
2702: PUSH
2703: LD_INT 7
2705: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2706: LD_ADDR_OWVAR 44
2710: PUSH
2711: LD_INT 10
2713: ST_TO_ADDR
// bc_kind2 := - 1 ;
2714: LD_ADDR_OWVAR 45
2718: PUSH
2719: LD_INT 1
2721: NEG
2722: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2723: LD_OWVAR 42
2727: PUSH
2728: LD_INT 2
2730: EQUAL
2731: IFFALSE 2741
// bc_type := b_factory ;
2733: LD_ADDR_OWVAR 42
2737: PUSH
2738: LD_INT 3
2740: ST_TO_ADDR
// if bc_type = b_depot then
2741: LD_OWVAR 42
2745: PUSH
2746: LD_INT 0
2748: EQUAL
2749: IFFALSE 2798
// begin bc_type := b_warehouse ;
2751: LD_ADDR_OWVAR 42
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2759: LD_ADDR_EXP 31
2763: PUSH
2764: LD_VAR 0 3
2768: PUSH
2769: LD_INT 2
2771: ARRAY
2772: PPUSH
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 3
2780: ARRAY
2781: PPUSH
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 4
2789: ARRAY
2790: PPUSH
2791: CALL_OW 47
2795: ST_TO_ADDR
// continue ;
2796: GO 2611
// end ; if bc_type = b_armoury then
2798: LD_OWVAR 42
2802: PUSH
2803: LD_INT 4
2805: EQUAL
2806: IFFALSE 2816
// bc_type = b_barracks ;
2808: LD_ADDR_OWVAR 42
2812: PUSH
2813: LD_INT 5
2815: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2816: LD_ADDR_VAR 0 4
2820: PUSH
2821: LD_VAR 0 3
2825: PUSH
2826: LD_INT 2
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 3
2834: PUSH
2835: LD_INT 3
2837: ARRAY
2838: PPUSH
2839: LD_VAR 0 3
2843: PUSH
2844: LD_INT 4
2846: ARRAY
2847: PPUSH
2848: CALL_OW 47
2852: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2853: LD_VAR 0 4
2857: PPUSH
2858: CALL_OW 266
2862: PUSH
2863: LD_INT 32
2865: EQUAL
2866: IFFALSE 2886
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2868: LD_VAR 0 4
2872: PPUSH
2873: LD_VAR 0 3
2877: PUSH
2878: LD_INT 7
2880: ARRAY
2881: PPUSH
2882: CALL_OW 431
// end ;
2886: GO 2611
2888: POP
2889: POP
// if not amDepot then
2890: LD_EXP 31
2894: NOT
2895: IFFALSE 2932
// begin bc_type := b_warehouse ;
2897: LD_ADDR_OWVAR 42
2901: PUSH
2902: LD_INT 1
2904: ST_TO_ADDR
// bc_level := 6 ;
2905: LD_ADDR_OWVAR 43
2909: PUSH
2910: LD_INT 6
2912: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2913: LD_ADDR_EXP 31
2917: PUSH
2918: LD_INT 52
2920: PPUSH
2921: LD_INT 12
2923: PPUSH
2924: LD_INT 3
2926: PPUSH
2927: CALL_OW 47
2931: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2932: LD_ADDR_OWVAR 42
2936: PUSH
2937: LD_INT 5
2939: ST_TO_ADDR
// bc_level := 6 ;
2940: LD_ADDR_OWVAR 43
2944: PUSH
2945: LD_INT 6
2947: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2948: LD_INT 61
2950: PPUSH
2951: LD_INT 29
2953: PPUSH
2954: LD_INT 5
2956: PPUSH
2957: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2961: LD_EXP 31
2965: PPUSH
2966: LD_STRING gamma
2968: PPUSH
2969: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2973: LD_EXP 31
2977: PPUSH
2978: CALL_OW 274
2982: PPUSH
2983: LD_INT 1
2985: PPUSH
2986: LD_INT 400
2988: PUSH
2989: LD_INT 320
2991: PUSH
2992: LD_INT 270
2994: PUSH
2995: LD_INT 230
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: PUSH
3004: LD_OWVAR 67
3008: ARRAY
3009: PPUSH
3010: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
3014: LD_EXP 31
3018: PPUSH
3019: CALL_OW 274
3023: PPUSH
3024: LD_INT 2
3026: PPUSH
3027: LD_INT 130
3029: PPUSH
3030: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3034: LD_INT 22
3036: PUSH
3037: LD_INT 1
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: LD_INT 30
3046: PUSH
3047: LD_INT 3
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PPUSH
3058: CALL_OW 69
3062: IFFALSE 3310
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 30
3081: PUSH
3082: LD_INT 3
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PPUSH
3093: CALL_OW 69
3097: PUSH
3098: LD_INT 1
3100: ARRAY
3101: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3102: LD_ADDR_VAR 0 6
3106: PUSH
3107: LD_VAR 0 4
3111: PPUSH
3112: CALL_OW 250
3116: PPUSH
3117: LD_VAR 0 4
3121: PPUSH
3122: CALL_OW 251
3126: PPUSH
3127: LD_VAR 0 4
3131: PPUSH
3132: CALL_OW 254
3136: PPUSH
3137: CALL 74530 0 3
3141: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3142: LD_ADDR_VAR 0 2
3146: PUSH
3147: LD_INT 19
3149: PUSH
3150: LD_INT 17
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3157: LD_STRING 06_remoteVehs_1
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 30
3167: IFFALSE 3190
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 2
3178: PPUSH
3179: LD_INT 1
3181: PPUSH
3182: LD_INT 22
3184: PPUSH
3185: CALL_OW 2
3189: ST_TO_ADDR
// for i in tmp do
3190: LD_ADDR_VAR 0 3
3194: PUSH
3195: LD_VAR 0 6
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3308
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3203: LD_VAR 0 3
3207: PUSH
3208: LD_INT 1
3210: ARRAY
3211: PPUSH
3212: LD_VAR 0 3
3216: PUSH
3217: LD_INT 2
3219: ARRAY
3220: PPUSH
3221: CALL_OW 428
3225: PUSH
3226: LD_INT 0
3228: EQUAL
3229: IFFALSE 3306
// begin bc_type := blist [ 1 ] ;
3231: LD_ADDR_OWVAR 42
3235: PUSH
3236: LD_VAR 0 2
3240: PUSH
3241: LD_INT 1
3243: ARRAY
3244: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3245: LD_VAR 0 3
3249: PUSH
3250: LD_INT 1
3252: ARRAY
3253: PPUSH
3254: LD_VAR 0 3
3258: PUSH
3259: LD_INT 2
3261: ARRAY
3262: PPUSH
3263: LD_VAR 0 3
3267: PUSH
3268: LD_INT 3
3270: ARRAY
3271: PPUSH
3272: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_INT 1
3288: PPUSH
3289: CALL_OW 3
3293: ST_TO_ADDR
// if blist = 0 then
3294: LD_VAR 0 2
3298: PUSH
3299: LD_INT 0
3301: EQUAL
3302: IFFALSE 3306
// break ;
3304: GO 3308
// end ;
3306: GO 3200
3308: POP
3309: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3310: LD_STRING 06_remoteVehs_1
3312: PPUSH
3313: LD_INT 0
3315: PPUSH
3316: CALL_OW 30
3320: IFFALSE 3773
// begin bc_type := b_control_tower ;
3322: LD_ADDR_OWVAR 42
3326: PUSH
3327: LD_INT 36
3329: ST_TO_ADDR
// bc_level := 4 ;
3330: LD_ADDR_OWVAR 43
3334: PUSH
3335: LD_INT 4
3337: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3338: LD_EXP 31
3342: PPUSH
3343: LD_INT 36
3345: PPUSH
3346: LD_INT 62
3348: PPUSH
3349: LD_INT 12
3351: PPUSH
3352: LD_INT 3
3354: PPUSH
3355: CALL 52676 0 5
3359: PUSH
3360: LD_INT 92
3362: PUSH
3363: LD_INT 62
3365: PUSH
3366: LD_INT 12
3368: PUSH
3369: LD_INT 3
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: PPUSH
3378: CALL_OW 69
3382: NOT
3383: AND
3384: IFFALSE 3401
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3386: LD_INT 62
3388: PPUSH
3389: LD_INT 12
3391: PPUSH
3392: LD_INT 3
3394: PPUSH
3395: CALL_OW 47
3399: GO 3563
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3401: LD_EXP 31
3405: PPUSH
3406: LD_INT 36
3408: PPUSH
3409: LD_INT 37
3411: PPUSH
3412: LD_INT 18
3414: PPUSH
3415: LD_INT 2
3417: PPUSH
3418: CALL 52676 0 5
3422: PUSH
3423: LD_INT 92
3425: PUSH
3426: LD_INT 37
3428: PUSH
3429: LD_INT 18
3431: PUSH
3432: LD_INT 3
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: NOT
3446: AND
3447: IFFALSE 3464
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3449: LD_INT 37
3451: PPUSH
3452: LD_INT 18
3454: PPUSH
3455: LD_INT 2
3457: PPUSH
3458: CALL_OW 47
3462: GO 3563
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3464: LD_EXP 31
3468: PPUSH
3469: LD_INT 36
3471: PPUSH
3472: LD_INT 66
3474: PPUSH
3475: LD_INT 14
3477: PPUSH
3478: LD_INT 4
3480: PPUSH
3481: CALL 52676 0 5
3485: PUSH
3486: LD_INT 92
3488: PUSH
3489: LD_INT 66
3491: PUSH
3492: LD_INT 14
3494: PUSH
3495: LD_INT 3
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: PPUSH
3504: CALL_OW 69
3508: NOT
3509: AND
3510: IFFALSE 3527
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3512: LD_INT 66
3514: PPUSH
3515: LD_INT 14
3517: PPUSH
3518: LD_INT 4
3520: PPUSH
3521: CALL_OW 47
3525: GO 3563
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3527: LD_EXP 31
3531: PPUSH
3532: LD_INT 36
3534: PPUSH
3535: LD_INT 74
3537: PPUSH
3538: LD_INT 26
3540: PPUSH
3541: LD_INT 4
3543: PPUSH
3544: CALL 52676 0 5
3548: IFFALSE 3563
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3550: LD_INT 74
3552: PPUSH
3553: LD_INT 26
3555: PPUSH
3556: LD_INT 4
3558: PPUSH
3559: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3563: LD_INT 22
3565: PUSH
3566: LD_INT 1
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 30
3575: PUSH
3576: LD_INT 36
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PPUSH
3587: CALL_OW 69
3591: NOT
3592: IFFALSE 3596
// exit ;
3594: GO 4121
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3596: LD_ADDR_VAR 0 3
3600: PUSH
3601: DOUBLE
3602: LD_INT 1
3604: DEC
3605: ST_TO_ADDR
3606: LD_INT 3
3608: PUSH
3609: LD_INT 2
3611: PUSH
3612: LD_INT 2
3614: PUSH
3615: LD_INT 2
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: PUSH
3624: LD_OWVAR 67
3628: ARRAY
3629: PUSH
3630: FOR_TO
3631: IFFALSE 3771
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3633: LD_ADDR_OWVAR 37
3637: PUSH
3638: LD_INT 3
3640: PUSH
3641: LD_INT 2
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PUSH
3648: LD_INT 1
3650: PPUSH
3651: LD_INT 2
3653: PPUSH
3654: CALL_OW 12
3658: ARRAY
3659: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3660: LD_ADDR_OWVAR 39
3664: PUSH
3665: LD_INT 1
3667: PUSH
3668: LD_INT 2
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 1
3677: PPUSH
3678: LD_INT 2
3680: PPUSH
3681: CALL_OW 12
3685: ARRAY
3686: ST_TO_ADDR
// vc_control := control_remote ;
3687: LD_ADDR_OWVAR 38
3691: PUSH
3692: LD_INT 2
3694: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3695: LD_ADDR_OWVAR 40
3699: PUSH
3700: LD_INT 4
3702: PUSH
3703: LD_INT 3
3705: PUSH
3706: LD_INT 5
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 1
3716: PPUSH
3717: LD_INT 3
3719: PPUSH
3720: CALL_OW 12
3724: ARRAY
3725: ST_TO_ADDR
// veh := CreateVehicle ;
3726: LD_ADDR_VAR 0 5
3730: PUSH
3731: CALL_OW 45
3735: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3736: LD_VAR 0 5
3740: PPUSH
3741: LD_INT 3
3743: PPUSH
3744: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3748: LD_VAR 0 5
3752: PPUSH
3753: LD_INT 61
3755: PPUSH
3756: LD_INT 23
3758: PPUSH
3759: LD_INT 9
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL_OW 50
// end ;
3769: GO 3630
3771: POP
3772: POP
// end ; if gammaCommander = 1 then
3773: LD_EXP 13
3777: PUSH
3778: LD_INT 1
3780: EQUAL
3781: IFFALSE 3958
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: DOUBLE
3789: LD_INT 1
3791: DEC
3792: ST_TO_ADDR
3793: LD_INT 3
3795: PUSH
3796: LD_INT 3
3798: PUSH
3799: LD_INT 2
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: PUSH
3811: LD_OWVAR 67
3815: ARRAY
3816: PUSH
3817: FOR_TO
3818: IFFALSE 3954
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3820: LD_ADDR_OWVAR 37
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: LD_INT 2
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 1
3837: PPUSH
3838: LD_INT 2
3840: PPUSH
3841: CALL_OW 12
3845: ARRAY
3846: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3847: LD_ADDR_OWVAR 39
3851: PUSH
3852: LD_INT 1
3854: PUSH
3855: LD_INT 2
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 1
3864: PPUSH
3865: LD_INT 2
3867: PPUSH
3868: CALL_OW 12
3872: ARRAY
3873: ST_TO_ADDR
// vc_control := control_manual ;
3874: LD_ADDR_OWVAR 38
3878: PUSH
3879: LD_INT 1
3881: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3882: LD_ADDR_OWVAR 40
3886: PUSH
3887: LD_INT 4
3889: PUSH
3890: LD_INT 5
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PUSH
3897: LD_INT 1
3899: PPUSH
3900: LD_INT 2
3902: PPUSH
3903: CALL_OW 12
3907: ARRAY
3908: ST_TO_ADDR
// veh := CreateVehicle ;
3909: LD_ADDR_VAR 0 5
3913: PUSH
3914: CALL_OW 45
3918: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 3
3926: PPUSH
3927: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3931: LD_VAR 0 5
3935: PPUSH
3936: LD_INT 61
3938: PPUSH
3939: LD_INT 23
3941: PPUSH
3942: LD_INT 9
3944: PPUSH
3945: LD_INT 0
3947: PPUSH
3948: CALL_OW 50
// end ;
3952: GO 3817
3954: POP
3955: POP
// end else
3956: GO 4121
// if gammaCommander = 2 then
3958: LD_EXP 13
3962: PUSH
3963: LD_INT 2
3965: EQUAL
3966: IFFALSE 4121
// begin bc_type := b_bunker ;
3968: LD_ADDR_OWVAR 42
3972: PUSH
3973: LD_INT 32
3975: ST_TO_ADDR
// bc_level := 6 ;
3976: LD_ADDR_OWVAR 43
3980: PUSH
3981: LD_INT 6
3983: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3984: LD_ADDR_VAR 0 4
3988: PUSH
3989: LD_INT 67
3991: PPUSH
3992: LD_INT 36
3994: PPUSH
3995: LD_INT 5
3997: PPUSH
3998: CALL_OW 47
4002: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
4003: LD_VAR 0 4
4007: PPUSH
4008: LD_INT 4
4010: PPUSH
4011: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
4015: LD_ADDR_VAR 0 4
4019: PUSH
4020: LD_INT 61
4022: PPUSH
4023: LD_INT 40
4025: PPUSH
4026: LD_INT 5
4028: PPUSH
4029: CALL_OW 47
4033: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
4034: LD_VAR 0 4
4038: PPUSH
4039: LD_INT 5
4041: PPUSH
4042: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
4046: LD_ADDR_OWVAR 37
4050: PUSH
4051: LD_INT 2
4053: ST_TO_ADDR
// vc_engine := engine_combustion ;
4054: LD_ADDR_OWVAR 39
4058: PUSH
4059: LD_INT 1
4061: ST_TO_ADDR
// vc_control := control_manual ;
4062: LD_ADDR_OWVAR 38
4066: PUSH
4067: LD_INT 1
4069: ST_TO_ADDR
// vc_weapon := us_crane ;
4070: LD_ADDR_OWVAR 40
4074: PUSH
4075: LD_INT 13
4077: ST_TO_ADDR
// veh := CreateVehicle ;
4078: LD_ADDR_VAR 0 5
4082: PUSH
4083: CALL_OW 45
4087: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4088: LD_VAR 0 5
4092: PPUSH
4093: LD_INT 3
4095: PPUSH
4096: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4100: LD_VAR 0 5
4104: PPUSH
4105: LD_INT 61
4107: PPUSH
4108: LD_INT 23
4110: PPUSH
4111: LD_INT 9
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 50
// end ; end ;
4121: LD_VAR 0 1
4125: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
4131: PPUSH
// uc_side := 1 ;
4132: LD_ADDR_OWVAR 20
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// uc_nation := 1 ;
4140: LD_ADDR_OWVAR 21
4144: PUSH
4145: LD_INT 1
4147: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 26
4152: PUSH
4153: LD_STRING Denis
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 39442 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4170: LD_EXP 26
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4185: LD_ADDR_EXP 27
4189: PUSH
4190: LD_STRING Joan
4192: PPUSH
4193: LD_EXP 1
4197: NOT
4198: PPUSH
4199: LD_STRING 06c_
4201: PPUSH
4202: CALL 39442 0 3
4206: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4207: LD_EXP 27
4211: PPUSH
4212: LD_INT 4
4214: PPUSH
4215: LD_INT 0
4217: PPUSH
4218: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4222: LD_ADDR_EXP 24
4226: PUSH
4227: LD_STRING Mike
4229: PPUSH
4230: LD_EXP 1
4234: NOT
4235: PPUSH
4236: LD_STRING 06c_
4238: PPUSH
4239: CALL 39442 0 3
4243: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4244: LD_EXP 24
4248: PPUSH
4249: LD_INT 4
4251: PPUSH
4252: LD_INT 0
4254: PPUSH
4255: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4259: LD_STRING GladstoneIn07
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL_OW 30
4269: NOT
4270: IFFALSE 4350
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4272: LD_ADDR_EXP 21
4276: PUSH
4277: LD_STRING Gladstone
4279: PPUSH
4280: LD_EXP 1
4284: NOT
4285: PPUSH
4286: LD_STRING 06c_
4288: PPUSH
4289: CALL 39442 0 3
4293: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4294: LD_EXP 21
4298: NOT
4299: PUSH
4300: LD_STRING GladstoneStayInDelta
4302: PPUSH
4303: LD_INT 0
4305: PPUSH
4306: CALL_OW 30
4310: AND
4311: IFFALSE 4335
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4313: LD_ADDR_EXP 21
4317: PUSH
4318: LD_STRING Gladstone
4320: PPUSH
4321: LD_EXP 1
4325: NOT
4326: PPUSH
4327: LD_STRING 05_
4329: PPUSH
4330: CALL 39442 0 3
4334: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4335: LD_EXP 21
4339: PPUSH
4340: LD_INT 4
4342: PPUSH
4343: LD_INT 0
4345: PPUSH
4346: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4350: LD_STRING LisaStayInDelta
4352: PPUSH
4353: LD_INT 0
4355: PPUSH
4356: CALL_OW 30
4360: IFFALSE 4396
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4362: LD_ADDR_EXP 19
4366: PUSH
4367: LD_STRING Lisa
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_STRING 05_
4375: PPUSH
4376: CALL 39442 0 3
4380: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4381: LD_EXP 19
4385: PPUSH
4386: LD_INT 4
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4396: LD_STRING BobbyStayInDelta
4398: PPUSH
4399: LD_INT 0
4401: PPUSH
4402: CALL_OW 30
4406: IFFALSE 4442
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4408: LD_ADDR_EXP 17
4412: PUSH
4413: LD_STRING Bobby
4415: PPUSH
4416: LD_INT 1
4418: PPUSH
4419: LD_STRING 05_
4421: PPUSH
4422: CALL 39442 0 3
4426: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4427: LD_EXP 17
4431: PPUSH
4432: LD_INT 4
4434: PPUSH
4435: LD_INT 0
4437: PPUSH
4438: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4442: LD_STRING CyrusStayInDelta
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL_OW 30
4452: IFFALSE 4488
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4454: LD_ADDR_EXP 18
4458: PUSH
4459: LD_STRING Cyrus
4461: PPUSH
4462: LD_INT 1
4464: PPUSH
4465: LD_STRING 05_
4467: PPUSH
4468: CALL 39442 0 3
4472: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4473: LD_EXP 18
4477: PPUSH
4478: LD_INT 4
4480: PPUSH
4481: LD_INT 0
4483: PPUSH
4484: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4488: LD_STRING BrownStayInDelta
4490: PPUSH
4491: LD_INT 0
4493: PPUSH
4494: CALL_OW 30
4498: IFFALSE 4534
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4500: LD_ADDR_EXP 15
4504: PUSH
4505: LD_STRING Brown
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_STRING 05_
4513: PPUSH
4514: CALL 39442 0 3
4518: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4519: LD_EXP 15
4523: PPUSH
4524: LD_INT 4
4526: PPUSH
4527: LD_INT 0
4529: PPUSH
4530: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4534: LD_STRING DonaldsonStayInDelta
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 30
4544: IFFALSE 4580
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4546: LD_ADDR_EXP 16
4550: PUSH
4551: LD_STRING Donaldson
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_STRING 05_
4559: PPUSH
4560: CALL 39442 0 3
4564: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4565: LD_EXP 16
4569: PPUSH
4570: LD_INT 4
4572: PPUSH
4573: LD_INT 0
4575: PPUSH
4576: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4580: LD_ADDR_VAR 0 4
4584: PUSH
4585: LD_STRING OthersStayInDelta
4587: PPUSH
4588: CALL_OW 31
4592: ST_TO_ADDR
// if others > 2 then
4593: LD_VAR 0 4
4597: PUSH
4598: LD_INT 2
4600: GREATER
4601: IFFALSE 4664
// begin for j := 1 to 2 do
4603: LD_ADDR_VAR 0 3
4607: PUSH
4608: DOUBLE
4609: LD_INT 1
4611: DEC
4612: ST_TO_ADDR
4613: LD_INT 2
4615: PUSH
4616: FOR_TO
4617: IFFALSE 4660
// begin SetTag ( others [ j ] , 107 ) ;
4619: LD_VAR 0 4
4623: PUSH
4624: LD_VAR 0 3
4628: ARRAY
4629: PPUSH
4630: LD_INT 107
4632: PPUSH
4633: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4637: LD_VAR 0 4
4641: PUSH
4642: LD_VAR 0 3
4646: ARRAY
4647: PPUSH
4648: LD_INT 4
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: CALL_OW 49
// end ;
4658: GO 4616
4660: POP
4661: POP
// end else
4662: GO 4725
// begin for j := 1 to others do
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_VAR 0 4
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4723
// begin SetTag ( others [ i ] , 107 ) ;
4682: LD_VAR 0 4
4686: PUSH
4687: LD_VAR 0 2
4691: ARRAY
4692: PPUSH
4693: LD_INT 107
4695: PPUSH
4696: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4700: LD_VAR 0 4
4704: PUSH
4705: LD_VAR 0 3
4709: ARRAY
4710: PPUSH
4711: LD_INT 4
4713: PPUSH
4714: LD_INT 0
4716: PPUSH
4717: CALL_OW 49
// end ;
4721: GO 4679
4723: POP
4724: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4725: LD_ADDR_VAR 0 4
4729: PUSH
4730: LD_STRING 06_other_apemans
4732: PPUSH
4733: CALL_OW 31
4737: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4738: LD_VAR 0 4
4742: PUSH
4743: LD_INT 3
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: LD_INT 2
4751: PUSH
4752: LD_INT 1
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: PUSH
4761: LD_OWVAR 67
4765: ARRAY
4766: GREATEREQUAL
4767: IFFALSE 4800
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: LD_INT 2
4779: PUSH
4780: LD_INT 2
4782: PUSH
4783: LD_INT 1
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: PUSH
4792: LD_OWVAR 67
4796: ARRAY
4797: ST_TO_ADDR
4798: GO 4810
// j := others ;
4800: LD_ADDR_VAR 0 3
4804: PUSH
4805: LD_VAR 0 4
4809: ST_TO_ADDR
// for i := 1 to j do
4810: LD_ADDR_VAR 0 2
4814: PUSH
4815: DOUBLE
4816: LD_INT 1
4818: DEC
4819: ST_TO_ADDR
4820: LD_VAR 0 3
4824: PUSH
4825: FOR_TO
4826: IFFALSE 4851
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4828: LD_VAR 0 4
4832: PUSH
4833: LD_VAR 0 2
4837: ARRAY
4838: PPUSH
4839: LD_INT 4
4841: PPUSH
4842: LD_INT 0
4844: PPUSH
4845: CALL_OW 49
4849: GO 4825
4851: POP
4852: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4853: LD_INT 4
4855: PPUSH
4856: LD_INT 22
4858: PUSH
4859: LD_INT 1
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 21
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PPUSH
4880: CALL_OW 70
4884: PPUSH
4885: LD_INT 53
4887: PPUSH
4888: LD_INT 19
4890: PPUSH
4891: CALL_OW 111
// end ;
4895: LD_VAR 0 1
4899: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4900: LD_INT 0
4902: PPUSH
4903: PPUSH
4904: PPUSH
4905: PPUSH
4906: PPUSH
4907: PPUSH
4908: PPUSH
4909: PPUSH
4910: PPUSH
4911: PPUSH
4912: PPUSH
4913: PPUSH
4914: PPUSH
4915: PPUSH
4916: PPUSH
// prefix := 07c_ ;
4917: LD_ADDR_VAR 0 11
4921: PUSH
4922: LD_STRING 07c_
4924: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4925: LD_ADDR_VAR 0 9
4929: PUSH
4930: LD_STRING 07_vehicles
4932: PPUSH
4933: EMPTY
4934: PPUSH
4935: CALL_OW 30
4939: ST_TO_ADDR
// if not vehicles and debug then
4940: LD_VAR 0 9
4944: NOT
4945: PUSH
4946: LD_EXP 1
4950: AND
4951: IFFALSE 4976
// vehicles := [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ;
4953: LD_ADDR_VAR 0 9
4957: PUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 1
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: LD_INT 4
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: ST_TO_ADDR
// if not vehicles then
4976: LD_VAR 0 9
4980: NOT
4981: IFFALSE 5038
// begin area := westGammaSupportArea ;
4983: LD_ADDR_VAR 0 12
4987: PUSH
4988: LD_INT 16
4990: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4991: LD_ADDR_VAR 0 15
4995: PUSH
4996: LD_INT 37
4998: PUSH
4999: LD_INT 70
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
5006: LD_ADDR_VAR 0 14
5010: PUSH
5011: LD_INT 43
5013: PUSH
5014: LD_INT 67
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: ST_TO_ADDR
// dir := 1 ;
5021: LD_ADDR_VAR 0 13
5025: PUSH
5026: LD_INT 1
5028: ST_TO_ADDR
// wait ( 2 2$00 ) ;
5029: LD_INT 4200
5031: PPUSH
5032: CALL_OW 67
// end else
5036: GO 5084
// begin area := southGammaSupportArea ;
5038: LD_ADDR_VAR 0 12
5042: PUSH
5043: LD_INT 5
5045: ST_TO_ADDR
// point := [ 87 , 147 ] ;
5046: LD_ADDR_VAR 0 15
5050: PUSH
5051: LD_INT 87
5053: PUSH
5054: LD_INT 147
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
5061: LD_ADDR_VAR 0 14
5065: PUSH
5066: LD_INT 74
5068: PUSH
5069: LD_INT 129
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: ST_TO_ADDR
// dir := 0 ;
5076: LD_ADDR_VAR 0 13
5080: PUSH
5081: LD_INT 0
5083: ST_TO_ADDR
// end ; squad := [ ] ;
5084: LD_ADDR_VAR 0 6
5088: PUSH
5089: EMPTY
5090: ST_TO_ADDR
// tmp := [ ] ;
5091: LD_ADDR_VAR 0 7
5095: PUSH
5096: EMPTY
5097: ST_TO_ADDR
// tmpVehs := [ ] ;
5098: LD_ADDR_VAR 0 8
5102: PUSH
5103: EMPTY
5104: ST_TO_ADDR
// uc_side := 1 ;
5105: LD_ADDR_OWVAR 20
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// uc_nation := 1 ;
5113: LD_ADDR_OWVAR 21
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
// if vehicles then
5121: LD_VAR 0 9
5125: IFFALSE 5281
// begin k := 1 ;
5127: LD_ADDR_VAR 0 3
5131: PUSH
5132: LD_INT 1
5134: ST_TO_ADDR
// for i := 1 to vehicles div 4 do
5135: LD_ADDR_VAR 0 2
5139: PUSH
5140: DOUBLE
5141: LD_INT 1
5143: DEC
5144: ST_TO_ADDR
5145: LD_VAR 0 9
5149: PUSH
5150: LD_INT 4
5152: DIV
5153: PUSH
5154: FOR_TO
5155: IFFALSE 5279
// begin vc_chassis := vehicles [ k ] ;
5157: LD_ADDR_OWVAR 37
5161: PUSH
5162: LD_VAR 0 9
5166: PUSH
5167: LD_VAR 0 3
5171: ARRAY
5172: ST_TO_ADDR
// vc_engine := vehicles [ k + 1 ] ;
5173: LD_ADDR_OWVAR 39
5177: PUSH
5178: LD_VAR 0 9
5182: PUSH
5183: LD_VAR 0 3
5187: PUSH
5188: LD_INT 1
5190: PLUS
5191: ARRAY
5192: ST_TO_ADDR
// vc_control := vehicles [ k + 2 ] ;
5193: LD_ADDR_OWVAR 38
5197: PUSH
5198: LD_VAR 0 9
5202: PUSH
5203: LD_VAR 0 3
5207: PUSH
5208: LD_INT 2
5210: PLUS
5211: ARRAY
5212: ST_TO_ADDR
// vc_weapon := vehicles [ k + 3 ] ;
5213: LD_ADDR_OWVAR 40
5217: PUSH
5218: LD_VAR 0 9
5222: PUSH
5223: LD_VAR 0 3
5227: PUSH
5228: LD_INT 3
5230: PLUS
5231: ARRAY
5232: ST_TO_ADDR
// k := k + 4 ;
5233: LD_ADDR_VAR 0 3
5237: PUSH
5238: LD_VAR 0 3
5242: PUSH
5243: LD_INT 4
5245: PLUS
5246: ST_TO_ADDR
// veh := CreateVehicle ;
5247: LD_ADDR_VAR 0 10
5251: PUSH
5252: CALL_OW 45
5256: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5257: LD_ADDR_VAR 0 8
5261: PUSH
5262: LD_VAR 0 8
5266: PPUSH
5267: LD_VAR 0 10
5271: PPUSH
5272: CALL 76891 0 2
5276: ST_TO_ADDR
// end ;
5277: GO 5154
5279: POP
5280: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5281: LD_ADDR_EXP 14
5285: PUSH
5286: LD_STRING JMM
5288: PPUSH
5289: LD_EXP 1
5293: NOT
5294: PPUSH
5295: LD_VAR 0 11
5299: PPUSH
5300: CALL 39442 0 3
5304: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5305: LD_EXP 13
5309: PUSH
5310: LD_INT 1
5312: PUSH
5313: LD_INT 3
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: IN
5320: PUSH
5321: LD_EXP 15
5325: NOT
5326: AND
5327: IFFALSE 5388
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5329: LD_ADDR_EXP 15
5333: PUSH
5334: LD_STRING Brown
5336: PPUSH
5337: LD_EXP 1
5341: NOT
5342: PPUSH
5343: LD_VAR 0 11
5347: PPUSH
5348: CALL 39442 0 3
5352: ST_TO_ADDR
// if Brown then
5353: LD_EXP 15
5357: IFFALSE 5388
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5359: LD_ADDR_VAR 0 7
5363: PUSH
5364: LD_VAR 0 7
5368: PPUSH
5369: LD_VAR 0 7
5373: PUSH
5374: LD_INT 1
5376: PLUS
5377: PPUSH
5378: LD_EXP 15
5382: PPUSH
5383: CALL_OW 1
5387: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5388: LD_EXP 13
5392: PUSH
5393: LD_INT 2
5395: PUSH
5396: LD_INT 3
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: IN
5403: PUSH
5404: LD_EXP 16
5408: NOT
5409: AND
5410: IFFALSE 5471
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5412: LD_ADDR_EXP 16
5416: PUSH
5417: LD_STRING Donaldson
5419: PPUSH
5420: LD_EXP 1
5424: NOT
5425: PPUSH
5426: LD_VAR 0 11
5430: PPUSH
5431: CALL 39442 0 3
5435: ST_TO_ADDR
// if Donaldson then
5436: LD_EXP 16
5440: IFFALSE 5471
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5442: LD_ADDR_VAR 0 7
5446: PUSH
5447: LD_VAR 0 7
5451: PPUSH
5452: LD_VAR 0 7
5456: PUSH
5457: LD_INT 1
5459: PLUS
5460: PPUSH
5461: LD_EXP 16
5465: PPUSH
5466: CALL_OW 1
5470: ST_TO_ADDR
// end ; if not Bobby then
5471: LD_EXP 17
5475: NOT
5476: IFFALSE 5534
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5478: LD_ADDR_EXP 17
5482: PUSH
5483: LD_STRING Bobby
5485: PPUSH
5486: LD_INT 1
5488: PPUSH
5489: LD_VAR 0 11
5493: PPUSH
5494: CALL 39442 0 3
5498: ST_TO_ADDR
// if Bobby then
5499: LD_EXP 17
5503: IFFALSE 5534
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5505: LD_ADDR_VAR 0 7
5509: PUSH
5510: LD_VAR 0 7
5514: PPUSH
5515: LD_VAR 0 7
5519: PUSH
5520: LD_INT 1
5522: PLUS
5523: PPUSH
5524: LD_EXP 17
5528: PPUSH
5529: CALL_OW 1
5533: ST_TO_ADDR
// end ; if not Cyrus then
5534: LD_EXP 18
5538: NOT
5539: IFFALSE 5597
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5541: LD_ADDR_EXP 18
5545: PUSH
5546: LD_STRING Cyrus
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: LD_VAR 0 11
5556: PPUSH
5557: CALL 39442 0 3
5561: ST_TO_ADDR
// if Cyrus then
5562: LD_EXP 18
5566: IFFALSE 5597
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5568: LD_ADDR_VAR 0 7
5572: PUSH
5573: LD_VAR 0 7
5577: PPUSH
5578: LD_VAR 0 7
5582: PUSH
5583: LD_INT 1
5585: PLUS
5586: PPUSH
5587: LD_EXP 18
5591: PPUSH
5592: CALL_OW 1
5596: ST_TO_ADDR
// end ; if not Lisa then
5597: LD_EXP 19
5601: NOT
5602: IFFALSE 5663
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5604: LD_ADDR_EXP 19
5608: PUSH
5609: LD_STRING Lisa
5611: PPUSH
5612: LD_EXP 1
5616: NOT
5617: PPUSH
5618: LD_VAR 0 11
5622: PPUSH
5623: CALL 39442 0 3
5627: ST_TO_ADDR
// if Lisa then
5628: LD_EXP 19
5632: IFFALSE 5663
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5634: LD_ADDR_VAR 0 7
5638: PUSH
5639: LD_VAR 0 7
5643: PPUSH
5644: LD_VAR 0 7
5648: PUSH
5649: LD_INT 1
5651: PLUS
5652: PPUSH
5653: LD_EXP 19
5657: PPUSH
5658: CALL_OW 1
5662: ST_TO_ADDR
// end ; if not Frank then
5663: LD_EXP 20
5667: NOT
5668: IFFALSE 5729
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5670: LD_ADDR_EXP 20
5674: PUSH
5675: LD_STRING Frank
5677: PPUSH
5678: LD_EXP 1
5682: NOT
5683: PPUSH
5684: LD_VAR 0 11
5688: PPUSH
5689: CALL 39442 0 3
5693: ST_TO_ADDR
// if Frank then
5694: LD_EXP 20
5698: IFFALSE 5729
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5700: LD_ADDR_VAR 0 7
5704: PUSH
5705: LD_VAR 0 7
5709: PPUSH
5710: LD_VAR 0 7
5714: PUSH
5715: LD_INT 1
5717: PLUS
5718: PPUSH
5719: LD_EXP 20
5723: PPUSH
5724: CALL_OW 1
5728: ST_TO_ADDR
// end ; if not Kikuchi then
5729: LD_EXP 22
5733: NOT
5734: IFFALSE 5792
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5736: LD_ADDR_EXP 22
5740: PUSH
5741: LD_STRING Kikuchi
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: LD_VAR 0 11
5751: PPUSH
5752: CALL 39442 0 3
5756: ST_TO_ADDR
// if Kikuchi then
5757: LD_EXP 22
5761: IFFALSE 5792
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5763: LD_ADDR_VAR 0 7
5767: PUSH
5768: LD_VAR 0 7
5772: PPUSH
5773: LD_VAR 0 7
5777: PUSH
5778: LD_INT 1
5780: PLUS
5781: PPUSH
5782: LD_EXP 22
5786: PPUSH
5787: CALL_OW 1
5791: ST_TO_ADDR
// end ; if not Gladstone then
5792: LD_EXP 21
5796: NOT
5797: IFFALSE 5858
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5799: LD_ADDR_EXP 21
5803: PUSH
5804: LD_STRING Gladstone
5806: PPUSH
5807: LD_EXP 1
5811: NOT
5812: PPUSH
5813: LD_VAR 0 11
5817: PPUSH
5818: CALL 39442 0 3
5822: ST_TO_ADDR
// if Gladstone then
5823: LD_EXP 21
5827: IFFALSE 5858
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5829: LD_ADDR_VAR 0 7
5833: PUSH
5834: LD_VAR 0 7
5838: PPUSH
5839: LD_VAR 0 7
5843: PUSH
5844: LD_INT 1
5846: PLUS
5847: PPUSH
5848: LD_EXP 21
5852: PPUSH
5853: CALL_OW 1
5857: ST_TO_ADDR
// end ; if not Khatam then
5858: LD_EXP 23
5862: NOT
5863: IFFALSE 5921
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5865: LD_ADDR_EXP 23
5869: PUSH
5870: LD_STRING Khatam
5872: PPUSH
5873: LD_INT 1
5875: PPUSH
5876: LD_VAR 0 11
5880: PPUSH
5881: CALL 39442 0 3
5885: ST_TO_ADDR
// if Khatam then
5886: LD_EXP 23
5890: IFFALSE 5921
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5892: LD_ADDR_VAR 0 7
5896: PUSH
5897: LD_VAR 0 7
5901: PPUSH
5902: LD_VAR 0 7
5906: PUSH
5907: LD_INT 1
5909: PLUS
5910: PPUSH
5911: LD_EXP 23
5915: PPUSH
5916: CALL_OW 1
5920: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5921: LD_ADDR_VAR 0 5
5925: PUSH
5926: LD_STRING 07c_others
5928: PPUSH
5929: CALL_OW 31
5933: ST_TO_ADDR
// squad := others ;
5934: LD_ADDR_VAR 0 6
5938: PUSH
5939: LD_VAR 0 5
5943: ST_TO_ADDR
// if others then
5944: LD_VAR 0 5
5948: IFFALSE 6048
// for i in others do
5950: LD_ADDR_VAR 0 2
5954: PUSH
5955: LD_VAR 0 5
5959: PUSH
5960: FOR_IN
5961: IFFALSE 6046
// begin SetTag ( i , 108 ) ;
5963: LD_VAR 0 2
5967: PPUSH
5968: LD_INT 108
5970: PPUSH
5971: CALL_OW 109
// if GetClass ( i ) = class_mechanic then
5975: LD_VAR 0 2
5979: PPUSH
5980: CALL_OW 257
5984: PUSH
5985: LD_INT 3
5987: EQUAL
5988: IFFALSE 6015
// tmp := Insert ( tmp , 1 , i ) else
5990: LD_ADDR_VAR 0 7
5994: PUSH
5995: LD_VAR 0 7
5999: PPUSH
6000: LD_INT 1
6002: PPUSH
6003: LD_VAR 0 2
6007: PPUSH
6008: CALL_OW 2
6012: ST_TO_ADDR
6013: GO 6044
// tmp := Replace ( tmp , tmp + 1 , i ) ;
6015: LD_ADDR_VAR 0 7
6019: PUSH
6020: LD_VAR 0 7
6024: PPUSH
6025: LD_VAR 0 7
6029: PUSH
6030: LD_INT 1
6032: PLUS
6033: PPUSH
6034: LD_VAR 0 2
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// end ;
6044: GO 5960
6046: POP
6047: POP
// if tmp then
6048: LD_VAR 0 7
6052: IFFALSE 6252
// begin for i in tmp do
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: LD_VAR 0 7
6063: PUSH
6064: FOR_IN
6065: IFFALSE 6250
// begin SetDir ( i , dir ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 13
6076: PPUSH
6077: CALL_OW 233
// if tmpVehs then
6081: LD_VAR 0 8
6085: IFFALSE 6175
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
6087: LD_VAR 0 8
6091: PUSH
6092: LD_INT 1
6094: ARRAY
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
6103: LD_VAR 0 8
6107: PUSH
6108: LD_INT 1
6110: ARRAY
6111: PPUSH
6112: LD_VAR 0 15
6116: PUSH
6117: LD_INT 1
6119: ARRAY
6120: PPUSH
6121: LD_VAR 0 15
6125: PUSH
6126: LD_INT 2
6128: ARRAY
6129: PPUSH
6130: LD_INT 0
6132: PPUSH
6133: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6137: LD_VAR 0 2
6141: PPUSH
6142: LD_VAR 0 8
6146: PUSH
6147: LD_INT 1
6149: ARRAY
6150: PPUSH
6151: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6155: LD_ADDR_VAR 0 8
6159: PUSH
6160: LD_VAR 0 8
6164: PPUSH
6165: LD_INT 1
6167: PPUSH
6168: CALL_OW 3
6172: ST_TO_ADDR
// end else
6173: GO 6192
// PlaceUnitArea ( i , area , false ) ;
6175: LD_VAR 0 2
6179: PPUSH
6180: LD_VAR 0 12
6184: PPUSH
6185: LD_INT 0
6187: PPUSH
6188: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6192: LD_VAR 0 2
6196: PPUSH
6197: LD_VAR 0 14
6201: PUSH
6202: LD_INT 1
6204: ARRAY
6205: PPUSH
6206: LD_VAR 0 14
6210: PUSH
6211: LD_INT 2
6213: ARRAY
6214: PPUSH
6215: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6219: LD_INT 35
6221: PPUSH
6222: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6226: LD_VAR 0 12
6230: PPUSH
6231: LD_INT 22
6233: PUSH
6234: LD_INT 1
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PPUSH
6241: CALL_OW 70
6245: NOT
6246: IFFALSE 6219
// end ;
6248: GO 6064
6250: POP
6251: POP
// end ; PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6252: LD_EXP 14
6256: PPUSH
6257: LD_VAR 0 15
6261: PUSH
6262: LD_INT 1
6264: ARRAY
6265: PPUSH
6266: LD_VAR 0 15
6270: PUSH
6271: LD_INT 2
6273: ARRAY
6274: PPUSH
6275: LD_INT 0
6277: PPUSH
6278: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6282: LD_EXP 14
6286: PPUSH
6287: LD_VAR 0 14
6291: PUSH
6292: LD_INT 1
6294: ARRAY
6295: PPUSH
6296: LD_VAR 0 14
6300: PUSH
6301: LD_INT 2
6303: ARRAY
6304: PPUSH
6305: CALL_OW 111
// jmmArrival := true ;
6309: LD_ADDR_EXP 8
6313: PUSH
6314: LD_INT 1
6316: ST_TO_ADDR
// end ;
6317: LD_VAR 0 1
6321: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6322: LD_INT 0
6324: PPUSH
6325: PPUSH
6326: PPUSH
6327: PPUSH
6328: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6329: LD_INT 1
6331: PPUSH
6332: LD_INT 17
6334: PPUSH
6335: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6339: LD_INT 2
6341: PPUSH
6342: LD_INT 17
6344: PPUSH
6345: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6349: LD_ADDR_VAR 0 5
6353: PUSH
6354: LD_INT 6
6356: PPUSH
6357: LD_INT 3
6359: PUSH
6360: LD_INT 21
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PPUSH
6374: CALL_OW 70
6378: ST_TO_ADDR
// if tmp then
6379: LD_VAR 0 5
6383: IFFALSE 6407
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6385: LD_VAR 0 5
6389: PPUSH
6390: LD_INT 33
6392: PPUSH
6393: LD_INT 39
6395: PPUSH
6396: CALL_OW 111
// wait ( 0 0$3 ) ;
6400: LD_INT 105
6402: PPUSH
6403: CALL_OW 67
// end ; uc_side := 4 ;
6407: LD_ADDR_OWVAR 20
6411: PUSH
6412: LD_INT 4
6414: ST_TO_ADDR
// uc_nation := 1 ;
6415: LD_ADDR_OWVAR 21
6419: PUSH
6420: LD_INT 1
6422: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6423: LD_ADDR_EXP 28
6427: PUSH
6428: LD_STRING Sikorski
6430: PPUSH
6431: LD_INT 0
6433: PPUSH
6434: LD_STRING 
6436: PPUSH
6437: CALL 39442 0 3
6441: ST_TO_ADDR
// vc_engine := engine_combustion ;
6442: LD_ADDR_OWVAR 39
6446: PUSH
6447: LD_INT 1
6449: ST_TO_ADDR
// vc_control := control_manual ;
6450: LD_ADDR_OWVAR 38
6454: PUSH
6455: LD_INT 1
6457: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6458: LD_ADDR_OWVAR 40
6462: PUSH
6463: LD_INT 6
6465: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6466: LD_ADDR_OWVAR 37
6470: PUSH
6471: LD_INT 4
6473: ST_TO_ADDR
// veh := CreateVehicle ;
6474: LD_ADDR_VAR 0 4
6478: PUSH
6479: CALL_OW 45
6483: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6484: LD_VAR 0 4
6488: PPUSH
6489: LD_INT 3
6491: PPUSH
6492: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6496: LD_VAR 0 4
6500: PPUSH
6501: LD_INT 4
6503: NEG
6504: PPUSH
6505: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6509: LD_VAR 0 4
6513: PPUSH
6514: LD_INT 70
6516: PPUSH
6517: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6521: LD_VAR 0 4
6525: PPUSH
6526: LD_INT 6
6528: PPUSH
6529: LD_INT 0
6531: PPUSH
6532: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6536: LD_EXP 28
6540: PPUSH
6541: LD_VAR 0 4
6545: PPUSH
6546: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6550: LD_EXP 28
6554: PPUSH
6555: LD_INT 37
6557: PPUSH
6558: LD_INT 30
6560: PPUSH
6561: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6565: LD_INT 10
6567: PPUSH
6568: CALL_OW 67
// InitHc_All ( ) ;
6572: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6576: LD_ADDR_VAR 0 2
6580: PUSH
6581: DOUBLE
6582: LD_INT 1
6584: DEC
6585: ST_TO_ADDR
6586: LD_INT 3
6588: PUSH
6589: LD_INT 2
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: LD_INT 2
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_OWVAR 67
6608: ARRAY
6609: PUSH
6610: FOR_TO
6611: IFFALSE 6723
// begin uc_side := 4 ;
6613: LD_ADDR_OWVAR 20
6617: PUSH
6618: LD_INT 4
6620: ST_TO_ADDR
// uc_nation := 1 ;
6621: LD_ADDR_OWVAR 21
6625: PUSH
6626: LD_INT 1
6628: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6629: LD_INT 0
6631: PPUSH
6632: LD_INT 1
6634: PPUSH
6635: LD_INT 4
6637: PPUSH
6638: LD_INT 7
6640: PPUSH
6641: CALL_OW 12
6645: PPUSH
6646: CALL_OW 380
// un := CreateHuman ;
6650: LD_ADDR_VAR 0 3
6654: PUSH
6655: CALL_OW 44
6659: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6660: LD_VAR 0 3
6664: PPUSH
6665: LD_INT 3
6667: PPUSH
6668: CALL_OW 233
// SetTag ( un , 101 ) ;
6672: LD_VAR 0 3
6676: PPUSH
6677: LD_INT 101
6679: PPUSH
6680: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6684: LD_VAR 0 3
6688: PPUSH
6689: LD_INT 6
6691: PPUSH
6692: LD_INT 0
6694: PPUSH
6695: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6699: LD_VAR 0 3
6703: PPUSH
6704: LD_INT 25
6706: PPUSH
6707: LD_INT 27
6709: PPUSH
6710: CALL_OW 111
// wait ( 0 0$1 ) ;
6714: LD_INT 35
6716: PPUSH
6717: CALL_OW 67
// end ;
6721: GO 6610
6723: POP
6724: POP
// for i := 1 to 2 do
6725: LD_ADDR_VAR 0 2
6729: PUSH
6730: DOUBLE
6731: LD_INT 1
6733: DEC
6734: ST_TO_ADDR
6735: LD_INT 2
6737: PUSH
6738: FOR_TO
6739: IFFALSE 6851
// begin uc_side := 4 ;
6741: LD_ADDR_OWVAR 20
6745: PUSH
6746: LD_INT 4
6748: ST_TO_ADDR
// uc_nation := 1 ;
6749: LD_ADDR_OWVAR 21
6753: PUSH
6754: LD_INT 1
6756: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6757: LD_INT 0
6759: PPUSH
6760: LD_INT 4
6762: PPUSH
6763: LD_INT 3
6765: PPUSH
6766: LD_INT 5
6768: PPUSH
6769: CALL_OW 12
6773: PPUSH
6774: CALL_OW 380
// un := CreateHuman ;
6778: LD_ADDR_VAR 0 3
6782: PUSH
6783: CALL_OW 44
6787: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6788: LD_VAR 0 3
6792: PPUSH
6793: LD_INT 3
6795: PPUSH
6796: CALL_OW 233
// SetTag ( un , 101 ) ;
6800: LD_VAR 0 3
6804: PPUSH
6805: LD_INT 101
6807: PPUSH
6808: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6812: LD_VAR 0 3
6816: PPUSH
6817: LD_INT 6
6819: PPUSH
6820: LD_INT 0
6822: PPUSH
6823: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6827: LD_VAR 0 3
6831: PPUSH
6832: LD_INT 25
6834: PPUSH
6835: LD_INT 27
6837: PPUSH
6838: CALL_OW 111
// wait ( 0 0$1 ) ;
6842: LD_INT 35
6844: PPUSH
6845: CALL_OW 67
// end ;
6849: GO 6738
6851: POP
6852: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6853: LD_ADDR_VAR 0 2
6857: PUSH
6858: DOUBLE
6859: LD_INT 1
6861: DEC
6862: ST_TO_ADDR
6863: LD_INT 5
6865: PUSH
6866: LD_INT 4
6868: PUSH
6869: LD_INT 3
6871: PUSH
6872: LD_INT 3
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: LD_OWVAR 67
6885: ARRAY
6886: PUSH
6887: FOR_TO
6888: IFFALSE 7130
// begin uc_side := 4 ;
6890: LD_ADDR_OWVAR 20
6894: PUSH
6895: LD_INT 4
6897: ST_TO_ADDR
// uc_nation := 1 ;
6898: LD_ADDR_OWVAR 21
6902: PUSH
6903: LD_INT 1
6905: ST_TO_ADDR
// vc_engine := engine_combustion ;
6906: LD_ADDR_OWVAR 39
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// vc_control := control_manual ;
6914: LD_ADDR_OWVAR 38
6918: PUSH
6919: LD_INT 1
6921: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6922: LD_ADDR_OWVAR 40
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 7
6932: PUSH
6933: LD_INT 5
6935: PUSH
6936: LD_INT 4
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: PUSH
6945: LD_VAR 0 2
6949: PUSH
6950: LD_INT 4
6952: MOD
6953: PUSH
6954: LD_INT 1
6956: PLUS
6957: ARRAY
6958: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6959: LD_ADDR_OWVAR 37
6963: PUSH
6964: LD_INT 3
6966: PUSH
6967: LD_INT 3
6969: PUSH
6970: LD_INT 4
6972: PUSH
6973: LD_INT 4
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: PUSH
6982: LD_VAR 0 2
6986: PUSH
6987: LD_INT 4
6989: MOD
6990: PUSH
6991: LD_INT 1
6993: PLUS
6994: ARRAY
6995: ST_TO_ADDR
// veh := CreateVehicle ;
6996: LD_ADDR_VAR 0 4
7000: PUSH
7001: CALL_OW 45
7005: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7006: LD_VAR 0 4
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 233
// SetTag ( veh , 0 ) ;
7018: LD_VAR 0 4
7022: PPUSH
7023: LD_INT 0
7025: PPUSH
7026: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7030: LD_VAR 0 4
7034: PPUSH
7035: LD_INT 70
7037: PPUSH
7038: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7042: LD_VAR 0 4
7046: PPUSH
7047: LD_INT 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// InitHc ;
7057: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7061: LD_INT 0
7063: PPUSH
7064: LD_INT 3
7066: PPUSH
7067: LD_INT 4
7069: PPUSH
7070: LD_INT 7
7072: PPUSH
7073: CALL_OW 12
7077: PPUSH
7078: CALL_OW 380
// un := CreateHuman ;
7082: LD_ADDR_VAR 0 3
7086: PUSH
7087: CALL_OW 44
7091: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7092: LD_VAR 0 3
7096: PPUSH
7097: LD_VAR 0 4
7101: PPUSH
7102: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7106: LD_VAR 0 3
7110: PPUSH
7111: LD_INT 30
7113: PPUSH
7114: LD_INT 22
7116: PPUSH
7117: CALL_OW 111
// wait ( 0 0$3 ) ;
7121: LD_INT 105
7123: PPUSH
7124: CALL_OW 67
// end ;
7128: GO 6887
7130: POP
7131: POP
// wait ( 0 0$10 ) ;
7132: LD_INT 350
7134: PPUSH
7135: CALL_OW 67
// end ;
7139: LD_VAR 0 1
7143: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7144: LD_INT 0
7146: PPUSH
7147: PPUSH
7148: PPUSH
7149: PPUSH
// gammaBase := [ ] ;
7150: LD_ADDR_VAR 0 4
7154: PUSH
7155: EMPTY
7156: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7157: LD_ADDR_VAR 0 5
7161: PUSH
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 3
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 50
7189: PUSH
7190: EMPTY
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 70
7202: ST_TO_ADDR
// for i in buildings do
7203: LD_ADDR_VAR 0 3
7207: PUSH
7208: LD_VAR 0 5
7212: PUSH
7213: FOR_IN
7214: IFFALSE 7651
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7216: LD_VAR 0 3
7220: PPUSH
7221: CALL_OW 266
7225: PUSH
7226: LD_INT 6
7228: PUSH
7229: LD_INT 7
7231: PUSH
7232: LD_INT 8
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: IN
7240: IFFALSE 7354
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7242: LD_ADDR_VAR 0 4
7246: PUSH
7247: LD_VAR 0 4
7251: PUSH
7252: LD_VAR 0 3
7256: PPUSH
7257: CALL_OW 266
7261: PUSH
7262: LD_VAR 0 3
7266: PPUSH
7267: CALL_OW 250
7271: PUSH
7272: LD_VAR 0 3
7276: PPUSH
7277: CALL_OW 251
7281: PUSH
7282: LD_VAR 0 3
7286: PPUSH
7287: CALL_OW 254
7291: PUSH
7292: LD_VAR 0 3
7296: PPUSH
7297: CALL_OW 267
7301: PUSH
7302: LD_VAR 0 3
7306: PPUSH
7307: CALL_OW 248
7311: PUSH
7312: LD_VAR 0 3
7316: PPUSH
7317: LD_INT 1
7319: PPUSH
7320: CALL_OW 268
7324: PUSH
7325: LD_VAR 0 3
7329: PPUSH
7330: LD_INT 2
7332: PPUSH
7333: CALL_OW 268
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: PUSH
7348: EMPTY
7349: LIST
7350: ADD
7351: ST_TO_ADDR
7352: GO 7649
// if GetBType ( i ) = b_bunker then
7354: LD_VAR 0 3
7358: PPUSH
7359: CALL_OW 266
7363: PUSH
7364: LD_INT 32
7366: EQUAL
7367: IFFALSE 7464
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7369: LD_ADDR_VAR 0 4
7373: PUSH
7374: LD_VAR 0 4
7378: PUSH
7379: LD_VAR 0 3
7383: PPUSH
7384: CALL_OW 266
7388: PUSH
7389: LD_VAR 0 3
7393: PPUSH
7394: CALL_OW 250
7398: PUSH
7399: LD_VAR 0 3
7403: PPUSH
7404: CALL_OW 251
7408: PUSH
7409: LD_VAR 0 3
7413: PPUSH
7414: CALL_OW 254
7418: PUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 267
7428: PUSH
7429: LD_VAR 0 3
7433: PPUSH
7434: CALL_OW 248
7438: PUSH
7439: LD_VAR 0 3
7443: PPUSH
7444: CALL_OW 269
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: PUSH
7458: EMPTY
7459: LIST
7460: ADD
7461: ST_TO_ADDR
7462: GO 7649
// if GetBType ( i ) = b_factory then
7464: LD_VAR 0 3
7468: PPUSH
7469: CALL_OW 266
7473: PUSH
7474: LD_INT 3
7476: EQUAL
7477: IFFALSE 7567
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7479: LD_ADDR_VAR 0 4
7483: PUSH
7484: LD_VAR 0 4
7488: PPUSH
7489: LD_INT 1
7491: PPUSH
7492: LD_VAR 0 3
7496: PPUSH
7497: CALL_OW 266
7501: PUSH
7502: LD_VAR 0 3
7506: PPUSH
7507: CALL_OW 250
7511: PUSH
7512: LD_VAR 0 3
7516: PPUSH
7517: CALL_OW 251
7521: PUSH
7522: LD_VAR 0 3
7526: PPUSH
7527: CALL_OW 254
7531: PUSH
7532: LD_VAR 0 3
7536: PPUSH
7537: CALL_OW 267
7541: PUSH
7542: LD_VAR 0 3
7546: PPUSH
7547: CALL_OW 248
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 2
7564: ST_TO_ADDR
7565: GO 7649
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7567: LD_ADDR_VAR 0 4
7571: PUSH
7572: LD_VAR 0 4
7576: PUSH
7577: LD_VAR 0 3
7581: PPUSH
7582: CALL_OW 266
7586: PUSH
7587: LD_VAR 0 3
7591: PPUSH
7592: CALL_OW 250
7596: PUSH
7597: LD_VAR 0 3
7601: PPUSH
7602: CALL_OW 251
7606: PUSH
7607: LD_VAR 0 3
7611: PPUSH
7612: CALL_OW 254
7616: PUSH
7617: LD_VAR 0 3
7621: PPUSH
7622: CALL_OW 267
7626: PUSH
7627: LD_VAR 0 3
7631: PPUSH
7632: CALL_OW 248
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: ADD
7648: ST_TO_ADDR
// end ;
7649: GO 7213
7651: POP
7652: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7653: LD_VAR 0 4
7657: PPUSH
7658: LD_STRING 08_GammaBase
7660: PPUSH
7661: CALL_OW 39
// end ;
7665: LD_VAR 0 2
7669: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7670: LD_INT 0
7672: PPUSH
7673: PPUSH
7674: PPUSH
7675: PPUSH
7676: PPUSH
7677: PPUSH
7678: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7679: LD_ADDR_VAR 0 3
7683: PUSH
7684: LD_INT 17
7686: PPUSH
7687: LD_INT 22
7689: PUSH
7690: LD_INT 1
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 21
7702: PUSH
7703: LD_INT 3
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 3
7716: PUSH
7717: LD_INT 33
7719: PUSH
7720: LD_INT 2
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: PPUSH
7736: CALL_OW 70
7740: ST_TO_ADDR
// if tmp then
7741: LD_VAR 0 3
7745: IFFALSE 7864
// begin for i in tmp do
7747: LD_ADDR_VAR 0 2
7751: PUSH
7752: LD_VAR 0 3
7756: PUSH
7757: FOR_IN
7758: IFFALSE 7789
// begin SetSide ( i , 4 ) ;
7760: LD_VAR 0 2
7764: PPUSH
7765: LD_INT 4
7767: PPUSH
7768: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7772: LD_VAR 0 2
7776: PPUSH
7777: LD_INT 42
7779: PPUSH
7780: LD_INT 22
7782: PPUSH
7783: CALL_OW 111
// end ;
7787: GO 7757
7789: POP
7790: POP
// repeat wait ( 0 0$3 ) ;
7791: LD_INT 105
7793: PPUSH
7794: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7798: LD_VAR 0 3
7802: PPUSH
7803: LD_INT 51
7805: PPUSH
7806: LD_INT 16
7808: PPUSH
7809: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
7813: LD_VAR 0 3
7817: PPUSH
7818: LD_INT 95
7820: PUSH
7821: LD_INT 17
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PPUSH
7828: CALL_OW 72
7832: NOT
7833: IFFALSE 7791
// for i in tmp do
7835: LD_ADDR_VAR 0 2
7839: PUSH
7840: LD_VAR 0 3
7844: PUSH
7845: FOR_IN
7846: IFFALSE 7862
// SetSide ( i , 1 ) ;
7848: LD_VAR 0 2
7852: PPUSH
7853: LD_INT 1
7855: PPUSH
7856: CALL_OW 235
7860: GO 7845
7862: POP
7863: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
7864: LD_ADDR_VAR 0 3
7868: PUSH
7869: LD_INT 17
7871: PPUSH
7872: LD_INT 22
7874: PUSH
7875: LD_INT 1
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 33
7884: PUSH
7885: LD_INT 2
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 70
7900: ST_TO_ADDR
// if tmp then
7901: LD_VAR 0 3
7905: IFFALSE 7929
// begin ComMoveXY ( tmp , 40 , 32 ) ;
7907: LD_VAR 0 3
7911: PPUSH
7912: LD_INT 40
7914: PPUSH
7915: LD_INT 32
7917: PPUSH
7918: CALL_OW 111
// wait ( 0 0$3 ) ;
7922: LD_INT 105
7924: PPUSH
7925: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
7929: LD_ADDR_VAR 0 3
7933: PUSH
7934: LD_INT 17
7936: PPUSH
7937: LD_INT 22
7939: PUSH
7940: LD_INT 1
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 2
7949: PUSH
7950: LD_INT 21
7952: PUSH
7953: LD_INT 2
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: LD_INT 21
7962: PUSH
7963: LD_INT 3
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: LIST
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PPUSH
7979: CALL_OW 70
7983: ST_TO_ADDR
// if tmp then
7984: LD_VAR 0 3
7988: IFFALSE 8136
// begin repeat wait ( 0 0$1 ) ;
7990: LD_INT 35
7992: PPUSH
7993: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
7997: LD_ADDR_VAR 0 3
8001: PUSH
8002: LD_INT 17
8004: PPUSH
8005: LD_INT 22
8007: PUSH
8008: LD_INT 1
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 2
8017: PUSH
8018: LD_INT 21
8020: PUSH
8021: LD_INT 2
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 21
8030: PUSH
8031: LD_INT 3
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 70
8051: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8052: LD_ADDR_VAR 0 2
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_INT 4
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 2
8069: PUSH
8070: LD_INT 25
8072: PUSH
8073: LD_INT 1
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 21
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: LIST
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 69
8103: PUSH
8104: FOR_IN
8105: IFFALSE 8127
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8107: LD_VAR 0 2
8111: PPUSH
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 1
8119: ARRAY
8120: PPUSH
8121: CALL_OW 115
8125: GO 8104
8127: POP
8128: POP
// until not tmp ;
8129: LD_VAR 0 3
8133: NOT
8134: IFFALSE 7990
// end ; wait ( 0 0$2 ) ;
8136: LD_INT 70
8138: PPUSH
8139: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8143: LD_ADDR_VAR 0 3
8147: PUSH
8148: LD_INT 22
8150: PUSH
8151: LD_INT 4
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PPUSH
8158: CALL_OW 69
8162: ST_TO_ADDR
// AgressiveMove ( tmp , [ [ 55 , 62 ] ] ) ;
8163: LD_VAR 0 3
8167: PPUSH
8168: LD_INT 55
8170: PUSH
8171: LD_INT 62
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: EMPTY
8179: LIST
8180: PPUSH
8181: CALL 79495 0 2
// AddComWait ( tmp , 0 0$05 ) ;
8185: LD_VAR 0 3
8189: PPUSH
8190: LD_INT 175
8192: PPUSH
8193: CALL_OW 202
// wait ( 0 0$5 ) ;
8197: LD_INT 175
8199: PPUSH
8200: CALL_OW 67
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
8204: LD_VAR 0 3
8208: PPUSH
8209: LD_INT 120
8211: PUSH
8212: LD_INT 101
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PPUSH
8219: CALL_OW 72
8223: PPUSH
8224: LD_INT 58
8226: PPUSH
8227: LD_INT 96
8229: PPUSH
8230: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8234: LD_VAR 0 3
8238: PPUSH
8239: LD_INT 120
8241: PUSH
8242: LD_INT 101
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 72
8253: PPUSH
8254: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
8258: LD_VAR 0 3
8262: PPUSH
8263: LD_INT 120
8265: PUSH
8266: LD_INT 101
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: LD_INT 25
8275: PUSH
8276: LD_INT 4
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: PPUSH
8287: CALL_OW 72
8291: PPUSH
8292: LD_INT 52
8294: PPUSH
8295: LD_INT 93
8297: PPUSH
8298: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8302: LD_VAR 0 3
8306: PPUSH
8307: LD_INT 120
8309: PUSH
8310: LD_INT 101
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 25
8319: PUSH
8320: LD_INT 4
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PPUSH
8331: CALL_OW 72
8335: PPUSH
8336: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8340: LD_ADDR_VAR 0 7
8344: PUSH
8345: LD_VAR 0 3
8349: PPUSH
8350: LD_INT 21
8352: PUSH
8353: LD_INT 2
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PPUSH
8360: CALL_OW 72
8364: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8365: LD_ADDR_VAR 0 4
8369: PUSH
8370: LD_INT 81
8372: PUSH
8373: LD_INT 1
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PPUSH
8380: CALL_OW 69
8384: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8385: LD_ADDR_VAR 0 5
8389: PUSH
8390: LD_INT 57
8392: PUSH
8393: LD_INT 66
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: LD_INT 62
8402: PUSH
8403: LD_INT 58
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8414: LD_INT 35
8416: PPUSH
8417: CALL_OW 67
// for i in filter do
8421: LD_ADDR_VAR 0 2
8425: PUSH
8426: LD_VAR 0 7
8430: PUSH
8431: FOR_IN
8432: IFFALSE 8871
// begin if IsDead ( i ) then
8434: LD_VAR 0 2
8438: PPUSH
8439: CALL_OW 301
8443: IFFALSE 8463
// begin filter := filter diff i ;
8445: LD_ADDR_VAR 0 7
8449: PUSH
8450: LD_VAR 0 7
8454: PUSH
8455: LD_VAR 0 2
8459: DIFF
8460: ST_TO_ADDR
// continue ;
8461: GO 8431
// end ; tmp := IsDrivenBy ( i ) ;
8463: LD_ADDR_VAR 0 3
8467: PUSH
8468: LD_VAR 0 2
8472: PPUSH
8473: CALL_OW 311
8477: ST_TO_ADDR
// if not tmp then
8478: LD_VAR 0 3
8482: NOT
8483: IFFALSE 8487
// continue ;
8485: GO 8431
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8487: LD_VAR 0 2
8491: PPUSH
8492: CALL_OW 261
8496: PUSH
8497: LD_INT 30
8499: GREATER
8500: PUSH
8501: LD_VAR 0 2
8505: PPUSH
8506: CALL_OW 110
8510: PUSH
8511: LD_INT 2
8513: EQUAL
8514: AND
8515: IFFALSE 8531
// SetTag ( i , 0 ) else
8517: LD_VAR 0 2
8521: PPUSH
8522: LD_INT 0
8524: PPUSH
8525: CALL_OW 109
8529: GO 8575
// if GetTag ( i ) = 2 then
8531: LD_VAR 0 2
8535: PPUSH
8536: CALL_OW 110
8540: PUSH
8541: LD_INT 2
8543: EQUAL
8544: IFFALSE 8575
// begin ComMoveXY ( i , 52 , 50 ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: LD_INT 52
8553: PPUSH
8554: LD_INT 50
8556: PPUSH
8557: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
8561: LD_VAR 0 2
8565: PPUSH
8566: LD_EXP 31
8570: PPUSH
8571: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8575: LD_VAR 0 2
8579: PPUSH
8580: CALL_OW 256
8584: PUSH
8585: LD_INT 600
8587: GREATEREQUAL
8588: PUSH
8589: LD_VAR 0 2
8593: PPUSH
8594: CALL_OW 110
8598: NOT
8599: AND
8600: IFFALSE 8626
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8602: LD_VAR 0 2
8606: PPUSH
8607: LD_VAR 0 4
8611: PPUSH
8612: LD_VAR 0 2
8616: PPUSH
8617: CALL_OW 74
8621: PPUSH
8622: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8626: LD_VAR 0 2
8630: PPUSH
8631: CALL_OW 256
8635: PUSH
8636: LD_INT 600
8638: LESS
8639: PUSH
8640: LD_VAR 0 2
8644: PPUSH
8645: CALL_OW 110
8649: NOT
8650: AND
8651: IFFALSE 8727
// begin SetTag ( i , 1 ) ;
8653: LD_VAR 0 2
8657: PPUSH
8658: LD_INT 1
8660: PPUSH
8661: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8665: LD_ADDR_VAR 0 6
8669: PUSH
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_VAR 0 5
8679: PPUSH
8680: CALL 80235 0 2
8684: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8685: LD_VAR 0 2
8689: PPUSH
8690: LD_VAR 0 6
8694: PUSH
8695: LD_INT 1
8697: ARRAY
8698: PPUSH
8699: LD_VAR 0 6
8703: PUSH
8704: LD_INT 2
8706: ARRAY
8707: PPUSH
8708: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8712: LD_VAR 0 2
8716: PPUSH
8717: LD_INT 40
8719: PPUSH
8720: LD_INT 49
8722: PPUSH
8723: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8727: LD_VAR 0 2
8731: PPUSH
8732: CALL_OW 110
8736: PUSH
8737: LD_INT 1
8739: EQUAL
8740: PUSH
8741: LD_VAR 0 2
8745: PPUSH
8746: LD_INT 40
8748: PPUSH
8749: LD_INT 49
8751: PPUSH
8752: CALL_OW 297
8756: PUSH
8757: LD_INT 9
8759: LESS
8760: AND
8761: PUSH
8762: LD_VAR 0 3
8766: AND
8767: IFFALSE 8869
// begin ComExitVehicle ( tmp ) ;
8769: LD_VAR 0 3
8773: PPUSH
8774: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8778: LD_VAR 0 3
8782: PPUSH
8783: LD_VAR 0 2
8787: PPUSH
8788: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8792: LD_INT 35
8794: PPUSH
8795: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 256
8808: PUSH
8809: LD_INT 1000
8811: EQUAL
8812: IFFALSE 8792
// ComEnterUnit ( tmp , i ) ;
8814: LD_VAR 0 3
8818: PPUSH
8819: LD_VAR 0 2
8823: PPUSH
8824: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8828: LD_VAR 0 2
8832: PPUSH
8833: CALL_OW 261
8837: PUSH
8838: LD_INT 40
8840: LESSEQUAL
8841: IFFALSE 8857
// SetTag ( i , 2 ) else
8843: LD_VAR 0 2
8847: PPUSH
8848: LD_INT 2
8850: PPUSH
8851: CALL_OW 109
8855: GO 8869
// SetTag ( i , 0 ) ;
8857: LD_VAR 0 2
8861: PPUSH
8862: LD_INT 0
8864: PPUSH
8865: CALL_OW 109
// end ; end ;
8869: GO 8431
8871: POP
8872: POP
// until not filter ;
8873: LD_VAR 0 7
8877: NOT
8878: IFFALSE 8414
// end ; end_of_file
8880: LD_VAR 0 1
8884: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8885: LD_INT 0
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
// uc_side := 3 ;
8892: LD_ADDR_OWVAR 20
8896: PUSH
8897: LD_INT 3
8899: ST_TO_ADDR
// uc_nation := 3 ;
8900: LD_ADDR_OWVAR 21
8904: PUSH
8905: LD_INT 3
8907: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
8908: LD_ADDR_EXP 33
8912: PUSH
8913: LD_INT 8
8915: PUSH
8916: LD_INT 11
8918: PUSH
8919: LD_INT 14
8921: PUSH
8922: LD_INT 17
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: PUSH
8931: LD_OWVAR 67
8935: ARRAY
8936: ST_TO_ADDR
// ruMobile := [ ] ;
8937: LD_ADDR_EXP 34
8941: PUSH
8942: EMPTY
8943: ST_TO_ADDR
// ruBuildList := [ ] ;
8944: LD_ADDR_EXP 35
8948: PUSH
8949: EMPTY
8950: ST_TO_ADDR
// russianAttackers := [ ] ;
8951: LD_ADDR_EXP 36
8955: PUSH
8956: EMPTY
8957: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8958: LD_ADDR_VAR 0 5
8962: PUSH
8963: LD_INT 43
8965: PUSH
8966: LD_INT 44
8968: PUSH
8969: LD_INT 46
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: LIST
8976: ST_TO_ADDR
// if Difficulty > 2 then
8977: LD_OWVAR 67
8981: PUSH
8982: LD_INT 2
8984: GREATER
8985: IFFALSE 9008
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8987: LD_ADDR_VAR 0 5
8991: PUSH
8992: LD_VAR 0 5
8996: PUSH
8997: LD_INT 45
8999: PUSH
9000: LD_INT 46
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: ADD
9007: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9008: LD_ADDR_EXP 32
9012: PUSH
9013: LD_STRING Borodin
9015: PPUSH
9016: CALL_OW 25
9020: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9021: LD_EXP 32
9025: PPUSH
9026: LD_INT 28
9028: PPUSH
9029: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9033: LD_INT 28
9035: PPUSH
9036: CALL_OW 274
9040: PPUSH
9041: LD_INT 1
9043: PPUSH
9044: LD_INT 3000
9046: PUSH
9047: LD_INT 4000
9049: PUSH
9050: LD_INT 5000
9052: PUSH
9053: LD_INT 6000
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: PUSH
9062: LD_OWVAR 67
9066: ARRAY
9067: PPUSH
9068: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9072: LD_INT 28
9074: PPUSH
9075: CALL_OW 274
9079: PPUSH
9080: LD_INT 2
9082: PPUSH
9083: LD_INT 1000
9085: PPUSH
9086: CALL_OW 277
// if Difficulty > 2 then
9090: LD_OWVAR 67
9094: PUSH
9095: LD_INT 2
9097: GREATER
9098: IFFALSE 9222
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9100: LD_ADDR_VAR 0 4
9104: PUSH
9105: LD_INT 99
9107: PUSH
9108: LD_INT 130
9110: PUSH
9111: LD_INT 2
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: PUSH
9119: LD_INT 121
9121: PUSH
9122: LD_INT 127
9124: PUSH
9125: LD_INT 4
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 117
9135: PUSH
9136: LD_INT 121
9138: PUSH
9139: LD_INT 4
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: LIST
9151: ST_TO_ADDR
// for i in tmp do
9152: LD_ADDR_VAR 0 2
9156: PUSH
9157: LD_VAR 0 4
9161: PUSH
9162: FOR_IN
9163: IFFALSE 9220
// begin bc_type := b_turret ;
9165: LD_ADDR_OWVAR 42
9169: PUSH
9170: LD_INT 33
9172: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9173: LD_ADDR_OWVAR 43
9177: PUSH
9178: LD_INT 2
9180: PUSH
9181: LD_OWVAR 67
9185: PLUS
9186: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9187: LD_VAR 0 2
9191: PUSH
9192: LD_INT 1
9194: ARRAY
9195: PPUSH
9196: LD_VAR 0 2
9200: PUSH
9201: LD_INT 2
9203: ARRAY
9204: PPUSH
9205: LD_VAR 0 2
9209: PUSH
9210: LD_INT 3
9212: ARRAY
9213: PPUSH
9214: CALL_OW 47
// end ;
9218: GO 9162
9220: POP
9221: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9222: LD_ADDR_VAR 0 2
9226: PUSH
9227: LD_INT 22
9229: PUSH
9230: LD_INT 3
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 21
9239: PUSH
9240: LD_INT 3
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL_OW 69
9255: PUSH
9256: FOR_IN
9257: IFFALSE 9279
// SetBLevel ( i , 2 + Difficulty ) ;
9259: LD_VAR 0 2
9263: PPUSH
9264: LD_INT 2
9266: PUSH
9267: LD_OWVAR 67
9271: PLUS
9272: PPUSH
9273: CALL_OW 241
9277: GO 9256
9279: POP
9280: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9281: LD_ADDR_VAR 0 4
9285: PUSH
9286: LD_INT 22
9288: PUSH
9289: LD_INT 3
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 2
9298: PUSH
9299: LD_INT 30
9301: PUSH
9302: LD_INT 32
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 30
9311: PUSH
9312: LD_INT 33
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PPUSH
9328: CALL_OW 69
9332: ST_TO_ADDR
// for i in tmp do
9333: LD_ADDR_VAR 0 2
9337: PUSH
9338: LD_VAR 0 4
9342: PUSH
9343: FOR_IN
9344: IFFALSE 9376
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9346: LD_VAR 0 2
9350: PPUSH
9351: LD_VAR 0 5
9355: PUSH
9356: LD_INT 1
9358: PPUSH
9359: LD_VAR 0 5
9363: PPUSH
9364: CALL_OW 12
9368: ARRAY
9369: PPUSH
9370: CALL_OW 431
9374: GO 9343
9376: POP
9377: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9378: LD_ADDR_VAR 0 2
9382: PUSH
9383: LD_INT 22
9385: PUSH
9386: LD_INT 3
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PUSH
9393: LD_INT 30
9395: PUSH
9396: LD_INT 32
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PPUSH
9407: CALL_OW 69
9411: PUSH
9412: FOR_IN
9413: IFFALSE 9462
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9415: LD_INT 0
9417: PPUSH
9418: LD_INT 5
9420: PUSH
9421: LD_INT 6
9423: PUSH
9424: LD_INT 7
9426: PUSH
9427: LD_INT 8
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: LD_OWVAR 67
9440: ARRAY
9441: PPUSH
9442: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9446: CALL_OW 44
9450: PPUSH
9451: LD_VAR 0 2
9455: PPUSH
9456: CALL_OW 52
// end ;
9460: GO 9412
9462: POP
9463: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9464: LD_ADDR_VAR 0 2
9468: PUSH
9469: LD_INT 22
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 30
9481: PUSH
9482: LD_INT 5
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PPUSH
9493: CALL_OW 69
9497: PUSH
9498: FOR_IN
9499: IFFALSE 9589
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9501: LD_ADDR_VAR 0 3
9505: PUSH
9506: DOUBLE
9507: LD_INT 1
9509: DEC
9510: ST_TO_ADDR
9511: LD_INT 2
9513: PUSH
9514: LD_INT 3
9516: PUSH
9517: LD_INT 4
9519: PUSH
9520: LD_INT 5
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: PUSH
9529: LD_OWVAR 67
9533: ARRAY
9534: PUSH
9535: FOR_TO
9536: IFFALSE 9585
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9538: LD_INT 0
9540: PPUSH
9541: LD_INT 5
9543: PUSH
9544: LD_INT 6
9546: PUSH
9547: LD_INT 7
9549: PUSH
9550: LD_INT 8
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: PUSH
9559: LD_OWVAR 67
9563: ARRAY
9564: PPUSH
9565: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9569: CALL_OW 44
9573: PPUSH
9574: LD_VAR 0 2
9578: PPUSH
9579: CALL_OW 52
// end ;
9583: GO 9535
9585: POP
9586: POP
// end ;
9587: GO 9498
9589: POP
9590: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9591: LD_ADDR_VAR 0 2
9595: PUSH
9596: DOUBLE
9597: LD_INT 1
9599: DEC
9600: ST_TO_ADDR
9601: LD_INT 3
9603: PUSH
9604: LD_INT 4
9606: PUSH
9607: LD_INT 5
9609: PUSH
9610: LD_INT 5
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: PUSH
9619: LD_OWVAR 67
9623: ARRAY
9624: PUSH
9625: FOR_TO
9626: IFFALSE 9673
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9628: LD_INT 0
9630: PPUSH
9631: LD_INT 4
9633: PUSH
9634: LD_INT 5
9636: PUSH
9637: LD_INT 5
9639: PUSH
9640: LD_INT 6
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: PUSH
9649: LD_OWVAR 67
9653: ARRAY
9654: PPUSH
9655: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9659: CALL_OW 44
9663: PPUSH
9664: LD_INT 28
9666: PPUSH
9667: CALL_OW 52
// end ;
9671: GO 9625
9673: POP
9674: POP
// for i := 1 to 2 do
9675: LD_ADDR_VAR 0 2
9679: PUSH
9680: DOUBLE
9681: LD_INT 1
9683: DEC
9684: ST_TO_ADDR
9685: LD_INT 2
9687: PUSH
9688: FOR_TO
9689: IFFALSE 9723
// begin PrepareScientist ( false , 6 ) ;
9691: LD_INT 0
9693: PPUSH
9694: LD_INT 6
9696: PPUSH
9697: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9701: CALL_OW 44
9705: PPUSH
9706: LD_INT 81
9708: PPUSH
9709: LD_INT 93
9711: PPUSH
9712: CALL_OW 428
9716: PPUSH
9717: CALL_OW 52
// end ;
9721: GO 9688
9723: POP
9724: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9725: LD_INT 22
9727: PPUSH
9728: LD_INT 1
9730: PPUSH
9731: LD_INT 3
9733: PPUSH
9734: LD_INT 51
9736: PPUSH
9737: LD_INT 100
9739: PPUSH
9740: CALL 44457 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9744: CALL_OW 45
9748: PPUSH
9749: LD_INT 91
9751: PPUSH
9752: LD_INT 94
9754: PPUSH
9755: LD_INT 3
9757: PPUSH
9758: LD_INT 0
9760: PPUSH
9761: CALL_OW 50
// for i := 1 to 2 do
9765: LD_ADDR_VAR 0 2
9769: PUSH
9770: DOUBLE
9771: LD_INT 1
9773: DEC
9774: ST_TO_ADDR
9775: LD_INT 2
9777: PUSH
9778: FOR_TO
9779: IFFALSE 9823
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9781: LD_INT 22
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 3
9789: PPUSH
9790: LD_INT 52
9792: PPUSH
9793: LD_INT 100
9795: PPUSH
9796: CALL 44457 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9800: CALL_OW 45
9804: PPUSH
9805: LD_INT 91
9807: PPUSH
9808: LD_INT 94
9810: PPUSH
9811: LD_INT 4
9813: PPUSH
9814: LD_INT 0
9816: PPUSH
9817: CALL_OW 50
// end ;
9821: GO 9778
9823: POP
9824: POP
// end ;
9825: LD_VAR 0 1
9829: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9830: LD_INT 0
9832: PPUSH
9833: PPUSH
9834: PPUSH
9835: PPUSH
9836: PPUSH
// uc_side := 3 ;
9837: LD_ADDR_OWVAR 20
9841: PUSH
9842: LD_INT 3
9844: ST_TO_ADDR
// uc_nation := 3 ;
9845: LD_ADDR_OWVAR 21
9849: PUSH
9850: LD_INT 3
9852: ST_TO_ADDR
// for i := 1 to 4 do
9853: LD_ADDR_VAR 0 2
9857: PUSH
9858: DOUBLE
9859: LD_INT 1
9861: DEC
9862: ST_TO_ADDR
9863: LD_INT 4
9865: PUSH
9866: FOR_TO
9867: IFFALSE 9994
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9869: LD_INT 22
9871: PPUSH
9872: LD_INT 1
9874: PPUSH
9875: LD_INT 1
9877: PPUSH
9878: LD_INT 42
9880: PUSH
9881: LD_INT 43
9883: PUSH
9884: LD_INT 44
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 1
9894: PPUSH
9895: LD_INT 3
9897: PPUSH
9898: CALL_OW 12
9902: ARRAY
9903: PPUSH
9904: LD_INT 40
9906: PPUSH
9907: CALL 44457 0 5
// veh := CreateVehicle ;
9911: LD_ADDR_VAR 0 4
9915: PUSH
9916: CALL_OW 45
9920: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9921: LD_VAR 0 4
9925: PPUSH
9926: LD_INT 5
9928: PPUSH
9929: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9933: LD_VAR 0 4
9937: PPUSH
9938: LD_INT 7
9940: PPUSH
9941: LD_INT 0
9943: PPUSH
9944: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9948: LD_INT 0
9950: PPUSH
9951: LD_INT 5
9953: PPUSH
9954: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9958: CALL_OW 44
9962: PPUSH
9963: LD_VAR 0 4
9967: PPUSH
9968: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9972: LD_ADDR_VAR 0 5
9976: PUSH
9977: LD_VAR 0 5
9981: PPUSH
9982: LD_VAR 0 4
9986: PPUSH
9987: CALL 76891 0 2
9991: ST_TO_ADDR
// end ;
9992: GO 9866
9994: POP
9995: POP
// for i := 1 to 3 do
9996: LD_ADDR_VAR 0 2
10000: PUSH
10001: DOUBLE
10002: LD_INT 1
10004: DEC
10005: ST_TO_ADDR
10006: LD_INT 3
10008: PUSH
10009: FOR_TO
10010: IFFALSE 10137
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10012: LD_INT 22
10014: PPUSH
10015: LD_INT 1
10017: PPUSH
10018: LD_INT 1
10020: PPUSH
10021: LD_INT 42
10023: PUSH
10024: LD_INT 43
10026: PUSH
10027: LD_INT 44
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 1
10037: PPUSH
10038: LD_INT 3
10040: PPUSH
10041: CALL_OW 12
10045: ARRAY
10046: PPUSH
10047: LD_INT 40
10049: PPUSH
10050: CALL 44457 0 5
// veh := CreateVehicle ;
10054: LD_ADDR_VAR 0 4
10058: PUSH
10059: CALL_OW 45
10063: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10064: LD_VAR 0 4
10068: PPUSH
10069: LD_INT 5
10071: PPUSH
10072: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10076: LD_VAR 0 4
10080: PPUSH
10081: LD_INT 8
10083: PPUSH
10084: LD_INT 0
10086: PPUSH
10087: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10091: LD_INT 0
10093: PPUSH
10094: LD_INT 5
10096: PPUSH
10097: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10101: CALL_OW 44
10105: PPUSH
10106: LD_VAR 0 4
10110: PPUSH
10111: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10115: LD_ADDR_VAR 0 5
10119: PUSH
10120: LD_VAR 0 5
10124: PPUSH
10125: LD_VAR 0 4
10129: PPUSH
10130: CALL 76891 0 2
10134: ST_TO_ADDR
// end ;
10135: GO 10009
10137: POP
10138: POP
// for i := 1 to 2 do
10139: LD_ADDR_VAR 0 2
10143: PUSH
10144: DOUBLE
10145: LD_INT 1
10147: DEC
10148: ST_TO_ADDR
10149: LD_INT 2
10151: PUSH
10152: FOR_TO
10153: IFFALSE 10212
// begin PrepareSoldier ( false , 5 ) ;
10155: LD_INT 0
10157: PPUSH
10158: LD_INT 5
10160: PPUSH
10161: CALL_OW 381
// un := CreateHuman ;
10165: LD_ADDR_VAR 0 3
10169: PUSH
10170: CALL_OW 44
10174: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10175: LD_VAR 0 3
10179: PPUSH
10180: LD_INT 8
10182: PPUSH
10183: LD_INT 0
10185: PPUSH
10186: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10190: LD_ADDR_VAR 0 5
10194: PUSH
10195: LD_VAR 0 5
10199: PPUSH
10200: LD_VAR 0 3
10204: PPUSH
10205: CALL 76891 0 2
10209: ST_TO_ADDR
// end ;
10210: GO 10152
10212: POP
10213: POP
// for i in tmp do
10214: LD_ADDR_VAR 0 2
10218: PUSH
10219: LD_VAR 0 5
10223: PUSH
10224: FOR_IN
10225: IFFALSE 10244
// ComAgressiveMove ( i , 51 , 16 ) ;
10227: LD_VAR 0 2
10231: PPUSH
10232: LD_INT 51
10234: PPUSH
10235: LD_INT 16
10237: PPUSH
10238: CALL_OW 114
10242: GO 10224
10244: POP
10245: POP
// end ;
10246: LD_VAR 0 1
10250: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10251: LD_EXP 34
10255: IFFALSE 10830
10257: GO 10259
10259: DISABLE
10260: LD_INT 0
10262: PPUSH
10263: PPUSH
10264: PPUSH
// begin enable ;
10265: ENABLE
// if not ruMobile then
10266: LD_EXP 34
10270: NOT
10271: IFFALSE 10275
// exit ;
10273: GO 10830
// for i in ruMobile do
10275: LD_ADDR_VAR 0 1
10279: PUSH
10280: LD_EXP 34
10284: PUSH
10285: FOR_IN
10286: IFFALSE 10828
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 302
10297: NOT
10298: PUSH
10299: LD_VAR 0 1
10303: PPUSH
10304: CALL_OW 255
10308: PUSH
10309: LD_INT 3
10311: NONEQUAL
10312: OR
10313: IFFALSE 10333
// begin ruMobile := ruMobile diff i ;
10315: LD_ADDR_EXP 34
10319: PUSH
10320: LD_EXP 34
10324: PUSH
10325: LD_VAR 0 1
10329: DIFF
10330: ST_TO_ADDR
// continue ;
10331: GO 10285
// end ; if GetTag ( i ) = 300 then
10333: LD_VAR 0 1
10337: PPUSH
10338: CALL_OW 110
10342: PUSH
10343: LD_INT 300
10345: EQUAL
10346: IFFALSE 10461
// begin if GetFuel ( i ) < 50 then
10348: LD_VAR 0 1
10352: PPUSH
10353: CALL_OW 261
10357: PUSH
10358: LD_INT 50
10360: LESS
10361: IFFALSE 10420
// begin ComMoveXY ( i , 93 , 100 ) ;
10363: LD_VAR 0 1
10367: PPUSH
10368: LD_INT 93
10370: PPUSH
10371: LD_INT 100
10373: PPUSH
10374: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10378: LD_INT 35
10380: PPUSH
10381: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10385: LD_VAR 0 1
10389: PPUSH
10390: LD_INT 93
10392: PPUSH
10393: LD_INT 100
10395: PPUSH
10396: CALL_OW 297
10400: PUSH
10401: LD_INT 4
10403: LESS
10404: IFFALSE 10378
// SetFuel ( i , 100 ) ;
10406: LD_VAR 0 1
10410: PPUSH
10411: LD_INT 100
10413: PPUSH
10414: CALL_OW 240
// end else
10418: GO 10461
// if not IsInArea ( i , ruParkingArea ) then
10420: LD_VAR 0 1
10424: PPUSH
10425: LD_INT 10
10427: PPUSH
10428: CALL_OW 308
10432: NOT
10433: IFFALSE 10449
// ComMoveToArea ( i , ruParkingArea ) else
10435: LD_VAR 0 1
10439: PPUSH
10440: LD_INT 10
10442: PPUSH
10443: CALL_OW 113
10447: GO 10461
// SetTag ( i , 301 ) ;
10449: LD_VAR 0 1
10453: PPUSH
10454: LD_INT 301
10456: PPUSH
10457: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10461: LD_VAR 0 1
10465: PPUSH
10466: CALL_OW 110
10470: PUSH
10471: LD_INT 301
10473: EQUAL
10474: IFFALSE 10604
// begin if GetLives ( i ) < 1000 then
10476: LD_VAR 0 1
10480: PPUSH
10481: CALL_OW 256
10485: PUSH
10486: LD_INT 1000
10488: LESS
10489: IFFALSE 10581
// begin if not IsDrivenBy ( i ) then
10491: LD_VAR 0 1
10495: PPUSH
10496: CALL_OW 311
10500: NOT
10501: IFFALSE 10505
// continue ;
10503: GO 10285
// mech := IsDrivenBy ( i ) ;
10505: LD_ADDR_VAR 0 2
10509: PUSH
10510: LD_VAR 0 1
10514: PPUSH
10515: CALL_OW 311
10519: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10520: LD_VAR 0 2
10524: PPUSH
10525: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_VAR 0 1
10538: PPUSH
10539: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10543: LD_INT 35
10545: PPUSH
10546: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10550: LD_VAR 0 1
10554: PPUSH
10555: CALL_OW 256
10559: PUSH
10560: LD_INT 1000
10562: EQUAL
10563: IFFALSE 10543
// ComEnterUnit ( mech , i ) ;
10565: LD_VAR 0 2
10569: PPUSH
10570: LD_VAR 0 1
10574: PPUSH
10575: CALL_OW 120
// end else
10579: GO 10604
// if IsDrivenBy ( i ) then
10581: LD_VAR 0 1
10585: PPUSH
10586: CALL_OW 311
10590: IFFALSE 10604
// SetTag ( i , 0 ) ;
10592: LD_VAR 0 1
10596: PPUSH
10597: LD_INT 0
10599: PPUSH
10600: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10604: LD_VAR 0 1
10608: PPUSH
10609: CALL_OW 110
10613: PUSH
10614: LD_INT 300
10616: LESS
10617: IFFALSE 10826
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10619: LD_ADDR_VAR 0 3
10623: PUSH
10624: LD_INT 11
10626: PPUSH
10627: LD_INT 81
10629: PUSH
10630: LD_INT 3
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PPUSH
10637: CALL_OW 70
10641: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10642: LD_VAR 0 1
10646: PPUSH
10647: CALL_OW 256
10651: PUSH
10652: LD_INT 650
10654: LESS
10655: IFFALSE 10680
// begin ComStop ( i ) ;
10657: LD_VAR 0 1
10661: PPUSH
10662: CALL_OW 141
// SetTag ( i , 300 ) ;
10666: LD_VAR 0 1
10670: PPUSH
10671: LD_INT 300
10673: PPUSH
10674: CALL_OW 109
// continue ;
10678: GO 10285
// end ; if enemy then
10680: LD_VAR 0 3
10684: IFFALSE 10724
// begin if not HasTask ( i ) then
10686: LD_VAR 0 1
10690: PPUSH
10691: CALL_OW 314
10695: NOT
10696: IFFALSE 10722
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10698: LD_VAR 0 1
10702: PPUSH
10703: LD_VAR 0 3
10707: PPUSH
10708: LD_VAR 0 1
10712: PPUSH
10713: CALL_OW 74
10717: PPUSH
10718: CALL_OW 115
// end else
10722: GO 10826
// if ruMobile > 2 then
10724: LD_EXP 34
10728: PUSH
10729: LD_INT 2
10731: GREATER
10732: IFFALSE 10826
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10734: LD_ADDR_VAR 0 3
10738: PUSH
10739: LD_INT 81
10741: PUSH
10742: LD_INT 3
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PPUSH
10749: CALL_OW 69
10753: ST_TO_ADDR
// if enemy then
10754: LD_VAR 0 3
10758: IFFALSE 10826
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10760: LD_VAR 0 1
10764: PPUSH
10765: LD_INT 116
10767: PUSH
10768: LD_INT 95
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 84
10777: PUSH
10778: LD_INT 68
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 58
10787: PUSH
10788: LD_INT 53
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 44
10797: PUSH
10798: LD_INT 35
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 45
10807: PUSH
10808: LD_INT 23
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: PPUSH
10822: CALL 79495 0 2
// end ; end ; end ;
10826: GO 10285
10828: POP
10829: POP
// end ;
10830: PPOPN 3
10832: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10833: LD_INT 3
10835: PUSH
10836: LD_INT 22
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 32
10852: PUSH
10853: LD_INT 1
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: IFFALSE 10952
10870: GO 10872
10872: DISABLE
10873: LD_INT 0
10875: PPUSH
// begin enable ;
10876: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10877: LD_ADDR_VAR 0 1
10881: PUSH
10882: LD_INT 3
10884: PUSH
10885: LD_INT 22
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 32
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PPUSH
10913: CALL_OW 69
10917: PUSH
10918: FOR_IN
10919: IFFALSE 10950
// if GetFuel ( i ) < 3 then
10921: LD_VAR 0 1
10925: PPUSH
10926: CALL_OW 261
10930: PUSH
10931: LD_INT 3
10933: LESS
10934: IFFALSE 10948
// SetFuel ( i , 3 ) ;
10936: LD_VAR 0 1
10940: PPUSH
10941: LD_INT 3
10943: PPUSH
10944: CALL_OW 240
10948: GO 10918
10950: POP
10951: POP
// end ;
10952: PPOPN 1
10954: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10955: LD_INT 29
10957: PPUSH
10958: CALL_OW 302
10962: PUSH
10963: LD_INT 29
10965: PPUSH
10966: CALL_OW 461
10970: PUSH
10971: LD_INT 2
10973: EQUAL
10974: AND
10975: IFFALSE 11208
10977: GO 10979
10979: DISABLE
10980: LD_INT 0
10982: PPUSH
10983: PPUSH
// begin enable ;
10984: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10985: LD_ADDR_VAR 0 1
10989: PUSH
10990: LD_INT 21
10992: PUSH
10993: LD_INT 22
10995: PUSH
10996: LD_INT 23
10998: PUSH
10999: LD_INT 24
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 1
11010: PPUSH
11011: LD_INT 4
11013: PPUSH
11014: CALL_OW 12
11018: ARRAY
11019: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11020: LD_ADDR_VAR 0 2
11024: PUSH
11025: LD_INT 42
11027: PUSH
11028: LD_INT 44
11030: PUSH
11031: LD_INT 43
11033: PUSH
11034: LD_INT 46
11036: PUSH
11037: LD_INT 45
11039: PUSH
11040: LD_INT 46
11042: PUSH
11043: LD_INT 45
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: PUSH
11055: LD_OWVAR 67
11059: PUSH
11060: LD_INT 0
11062: PPUSH
11063: LD_INT 3
11065: PPUSH
11066: CALL_OW 12
11070: PLUS
11071: ARRAY
11072: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11073: LD_VAR 0 1
11077: PUSH
11078: LD_INT 21
11080: PUSH
11081: LD_INT 22
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: IN
11088: PUSH
11089: LD_VAR 0 2
11093: PUSH
11094: LD_INT 46
11096: EQUAL
11097: AND
11098: IFFALSE 11127
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11100: LD_ADDR_VAR 0 2
11104: PUSH
11105: LD_INT 44
11107: PUSH
11108: LD_INT 45
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 1
11117: PPUSH
11118: LD_INT 2
11120: PPUSH
11121: CALL_OW 12
11125: ARRAY
11126: ST_TO_ADDR
// if tick < [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11127: LD_OWVAR 1
11131: PUSH
11132: LD_INT 25200
11134: PUSH
11135: LD_INT 23100
11137: PUSH
11138: LD_INT 21000
11140: PUSH
11141: LD_INT 18900
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: PUSH
11150: LD_OWVAR 67
11154: ARRAY
11155: LESS
11156: IFFALSE 11185
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11158: LD_ADDR_VAR 0 2
11162: PUSH
11163: LD_INT 44
11165: PUSH
11166: LD_INT 43
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 1
11175: PPUSH
11176: LD_INT 2
11178: PPUSH
11179: CALL_OW 12
11183: ARRAY
11184: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11185: LD_INT 29
11187: PPUSH
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: LD_INT 1
11198: PPUSH
11199: LD_VAR 0 2
11203: PPUSH
11204: CALL_OW 185
// end ;
11208: PPOPN 2
11210: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
11211: LD_INT 28
11213: PPUSH
11214: CALL_OW 302
11218: IFFALSE 12060
11220: GO 11222
11222: DISABLE
11223: LD_INT 0
11225: PPUSH
11226: PPUSH
11227: PPUSH
11228: PPUSH
11229: PPUSH
11230: PPUSH
11231: PPUSH
11232: PPUSH
// begin enable ;
11233: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11234: LD_ADDR_VAR 0 3
11238: PUSH
11239: LD_INT 12
11241: PPUSH
11242: LD_INT 3
11244: PUSH
11245: LD_INT 24
11247: PUSH
11248: LD_INT 1000
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 21
11261: PUSH
11262: LD_INT 3
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PPUSH
11273: CALL_OW 70
11277: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11278: LD_ADDR_VAR 0 4
11282: PUSH
11283: LD_INT 22
11285: PUSH
11286: LD_INT 3
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 25
11295: PUSH
11296: LD_INT 2
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PPUSH
11307: CALL_OW 69
11311: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11312: LD_ADDR_VAR 0 5
11316: PUSH
11317: LD_INT 22
11319: PUSH
11320: LD_INT 3
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 34
11329: PUSH
11330: LD_INT 52
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 69
11345: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11346: LD_ADDR_VAR 0 7
11350: PUSH
11351: LD_INT 22
11353: PUSH
11354: LD_INT 3
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 25
11363: PUSH
11364: LD_INT 4
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PPUSH
11375: CALL_OW 69
11379: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11380: LD_ADDR_VAR 0 8
11384: PUSH
11385: LD_INT 81
11387: PPUSH
11388: LD_INT 93
11390: PPUSH
11391: CALL_OW 428
11395: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
11396: LD_VAR 0 7
11400: PUSH
11401: LD_VAR 0 4
11405: PPUSH
11406: LD_INT 120
11408: PUSH
11409: LD_INT 2
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PPUSH
11416: CALL_OW 72
11420: AND
11421: IFFALSE 11434
// ComExitAll ( sci ) else
11423: LD_VAR 0 7
11427: PPUSH
11428: CALL 77372 0 1
11432: GO 11507
// if sci then
11434: LD_VAR 0 7
11438: IFFALSE 11507
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
11440: LD_VAR 0 7
11444: PPUSH
11445: LD_INT 3
11447: PUSH
11448: LD_INT 54
11450: PUSH
11451: EMPTY
11452: LIST
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PPUSH
11458: CALL_OW 72
11462: PUSH
11463: LD_VAR 0 8
11467: PPUSH
11468: CALL_OW 302
11472: AND
11473: IFFALSE 11507
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
11475: LD_VAR 0 7
11479: PPUSH
11480: LD_INT 3
11482: PUSH
11483: LD_INT 54
11485: PUSH
11486: EMPTY
11487: LIST
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PPUSH
11493: CALL_OW 72
11497: PPUSH
11498: LD_VAR 0 8
11502: PPUSH
11503: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
11507: LD_VAR 0 5
11511: PPUSH
11512: LD_INT 50
11514: PUSH
11515: EMPTY
11516: LIST
11517: PPUSH
11518: CALL_OW 72
11522: PUSH
11523: LD_VAR 0 3
11527: AND
11528: IFFALSE 11559
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
11530: LD_VAR 0 5
11534: PPUSH
11535: LD_INT 50
11537: PUSH
11538: EMPTY
11539: LIST
11540: PPUSH
11541: CALL_OW 72
11545: PPUSH
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 1
11553: ARRAY
11554: PPUSH
11555: CALL_OW 130
// if eng then
11559: LD_VAR 0 4
11563: IFFALSE 12060
// begin for i in eng do
11565: LD_ADDR_VAR 0 1
11569: PUSH
11570: LD_VAR 0 4
11574: PUSH
11575: FOR_IN
11576: IFFALSE 12058
// begin tag := GetTag ( i ) ;
11578: LD_ADDR_VAR 0 6
11582: PUSH
11583: LD_VAR 0 1
11587: PPUSH
11588: CALL_OW 110
11592: ST_TO_ADDR
// case tag of 0 :
11593: LD_VAR 0 6
11597: PUSH
11598: LD_INT 0
11600: DOUBLE
11601: EQUAL
11602: IFTRUE 11606
11604: GO 11817
11606: POP
// begin if b then
11607: LD_VAR 0 3
11611: IFFALSE 11627
// begin SetTag ( i , 1 ) ;
11613: LD_VAR 0 1
11617: PPUSH
11618: LD_INT 1
11620: PPUSH
11621: CALL_OW 109
// continue ;
11625: GO 11575
// end ; if not ruBuildList then
11627: LD_EXP 35
11631: NOT
11632: IFFALSE 11648
// ComEnterUnit ( i , ruDep ) else
11634: LD_VAR 0 1
11638: PPUSH
11639: LD_INT 28
11641: PPUSH
11642: CALL_OW 120
11646: GO 11815
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11648: LD_INT 11
11650: PPUSH
11651: LD_INT 81
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 70
11665: PUSH
11666: LD_INT 0
11668: EQUAL
11669: PUSH
11670: LD_INT 28
11672: PPUSH
11673: LD_EXP 35
11677: PUSH
11678: LD_INT 1
11680: ARRAY
11681: PUSH
11682: LD_INT 1
11684: ARRAY
11685: PPUSH
11686: LD_EXP 35
11690: PUSH
11691: LD_INT 1
11693: ARRAY
11694: PUSH
11695: LD_INT 2
11697: ARRAY
11698: PPUSH
11699: LD_EXP 35
11703: PUSH
11704: LD_INT 1
11706: ARRAY
11707: PUSH
11708: LD_INT 3
11710: ARRAY
11711: PPUSH
11712: LD_EXP 35
11716: PUSH
11717: LD_INT 1
11719: ARRAY
11720: PUSH
11721: LD_INT 4
11723: ARRAY
11724: PPUSH
11725: CALL 52676 0 5
11729: AND
11730: IFFALSE 11815
// begin if IsInUnit ( i ) then
11732: LD_VAR 0 1
11736: PPUSH
11737: CALL_OW 310
11741: IFFALSE 11754
// ComExitBuilding ( i ) else
11743: LD_VAR 0 1
11747: PPUSH
11748: CALL_OW 122
11752: GO 11815
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11754: LD_VAR 0 1
11758: PPUSH
11759: LD_EXP 35
11763: PUSH
11764: LD_INT 1
11766: ARRAY
11767: PUSH
11768: LD_INT 1
11770: ARRAY
11771: PPUSH
11772: LD_EXP 35
11776: PUSH
11777: LD_INT 1
11779: ARRAY
11780: PUSH
11781: LD_INT 2
11783: ARRAY
11784: PPUSH
11785: LD_EXP 35
11789: PUSH
11790: LD_INT 1
11792: ARRAY
11793: PUSH
11794: LD_INT 3
11796: ARRAY
11797: PPUSH
11798: LD_EXP 35
11802: PUSH
11803: LD_INT 1
11805: ARRAY
11806: PUSH
11807: LD_INT 4
11809: ARRAY
11810: PPUSH
11811: CALL_OW 145
// end ; end ; 1 :
11815: GO 12014
11817: LD_INT 1
11819: DOUBLE
11820: EQUAL
11821: IFTRUE 11825
11823: GO 11928
11825: POP
// begin if not b then
11826: LD_VAR 0 3
11830: NOT
11831: IFFALSE 11847
// begin SetTag ( i , 0 ) ;
11833: LD_VAR 0 1
11837: PPUSH
11838: LD_INT 0
11840: PPUSH
11841: CALL_OW 109
// continue ;
11845: GO 11575
// end ; if IsInUnit ( i ) then
11847: LD_VAR 0 1
11851: PPUSH
11852: CALL_OW 310
11856: IFFALSE 11867
// ComExitBuilding ( i ) ;
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 122
// if GetLives ( i ) < 650 then
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 256
11876: PUSH
11877: LD_INT 650
11879: LESS
11880: IFFALSE 11896
// begin SetTag ( i , 2 ) ;
11882: LD_VAR 0 1
11886: PPUSH
11887: LD_INT 2
11889: PPUSH
11890: CALL_OW 109
// continue ;
11894: GO 11575
// end ; if b then
11896: LD_VAR 0 3
11900: IFFALSE 11926
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
11902: LD_VAR 0 1
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: LD_VAR 0 1
11916: PPUSH
11917: CALL_OW 74
11921: PPUSH
11922: CALL_OW 130
// end ; 2 :
11926: GO 12014
11928: LD_INT 2
11930: DOUBLE
11931: EQUAL
11932: IFTRUE 11936
11934: GO 12013
11936: POP
// begin if GetLives ( i ) = 1000 then
11937: LD_VAR 0 1
11941: PPUSH
11942: CALL_OW 256
11946: PUSH
11947: LD_INT 1000
11949: EQUAL
11950: IFFALSE 11966
// begin SetTag ( i , 1 ) ;
11952: LD_VAR 0 1
11956: PPUSH
11957: LD_INT 1
11959: PPUSH
11960: CALL_OW 109
// continue ;
11964: GO 11575
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
11966: LD_VAR 0 1
11970: PPUSH
11971: LD_INT 84
11973: PPUSH
11974: LD_INT 93
11976: PPUSH
11977: CALL_OW 297
11981: PUSH
11982: LD_INT 6
11984: GREATER
11985: IFFALSE 12011
// begin ComMoveXY ( i , 84 , 93 ) ;
11987: LD_VAR 0 1
11991: PPUSH
11992: LD_INT 84
11994: PPUSH
11995: LD_INT 93
11997: PPUSH
11998: CALL_OW 111
// AddComHold ( i ) ;
12002: LD_VAR 0 1
12006: PPUSH
12007: CALL_OW 200
// end ; end ; end ;
12011: GO 12014
12013: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
12014: LD_VAR 0 1
12018: PPUSH
12019: LD_INT 12
12021: PPUSH
12022: CALL_OW 308
12026: NOT
12027: PUSH
12028: LD_VAR 0 1
12032: PPUSH
12033: CALL_OW 310
12037: NOT
12038: AND
12039: IFFALSE 12056
// ComMoveXY ( i , 91 , 95 ) ;
12041: LD_VAR 0 1
12045: PPUSH
12046: LD_INT 91
12048: PPUSH
12049: LD_INT 95
12051: PPUSH
12052: CALL_OW 111
// end ;
12056: GO 11575
12058: POP
12059: POP
// end ; end ;
12060: PPOPN 8
12062: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12063: LD_INT 0
12065: PPUSH
12066: PPUSH
12067: PPUSH
12068: PPUSH
12069: PPUSH
12070: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
12071: LD_ADDR_VAR 0 3
12075: PUSH
12076: DOUBLE
12077: LD_INT 1
12079: DEC
12080: ST_TO_ADDR
12081: LD_INT 3
12083: PUSH
12084: LD_INT 4
12086: PUSH
12087: LD_INT 5
12089: PUSH
12090: LD_INT 6
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_OWVAR 67
12103: ARRAY
12104: PUSH
12105: LD_VAR 0 1
12109: PLUS
12110: PUSH
12111: FOR_TO
12112: IFFALSE 12429
// begin uc_side := 6 ;
12114: LD_ADDR_OWVAR 20
12118: PUSH
12119: LD_INT 6
12121: ST_TO_ADDR
// uc_nation := 3 ;
12122: LD_ADDR_OWVAR 21
12126: PUSH
12127: LD_INT 3
12129: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12130: LD_ADDR_VAR 0 6
12134: PUSH
12135: LD_INT 21
12137: PUSH
12138: LD_INT 22
12140: PUSH
12141: LD_INT 23
12143: PUSH
12144: LD_INT 24
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 1
12155: PPUSH
12156: LD_INT 4
12158: PPUSH
12159: CALL_OW 12
12163: ARRAY
12164: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12165: LD_ADDR_VAR 0 7
12169: PUSH
12170: LD_INT 42
12172: PUSH
12173: LD_INT 44
12175: PUSH
12176: LD_INT 43
12178: PUSH
12179: LD_INT 46
12181: PUSH
12182: LD_INT 45
12184: PUSH
12185: LD_INT 46
12187: PUSH
12188: LD_INT 45
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: PUSH
12200: LD_OWVAR 67
12204: PUSH
12205: LD_INT 0
12207: PPUSH
12208: LD_INT 3
12210: PPUSH
12211: CALL_OW 12
12215: PLUS
12216: ARRAY
12217: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12218: LD_VAR 0 6
12222: PUSH
12223: LD_INT 21
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: IN
12233: PUSH
12234: LD_VAR 0 7
12238: PUSH
12239: LD_INT 46
12241: EQUAL
12242: AND
12243: IFFALSE 12272
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12245: LD_ADDR_VAR 0 7
12249: PUSH
12250: LD_INT 44
12252: PUSH
12253: LD_INT 45
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 1
12262: PPUSH
12263: LD_INT 2
12265: PPUSH
12266: CALL_OW 12
12270: ARRAY
12271: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
12272: LD_OWVAR 1
12276: PUSH
12277: LD_INT 31500
12279: PUSH
12280: LD_INT 27300
12282: PUSH
12283: LD_INT 23100
12285: PUSH
12286: LD_INT 18900
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: PUSH
12295: LD_OWVAR 67
12299: ARRAY
12300: LESS
12301: IFFALSE 12334
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
12303: LD_ADDR_VAR 0 7
12307: PUSH
12308: LD_INT 44
12310: PUSH
12311: LD_INT 43
12313: PUSH
12314: LD_INT 42
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 1
12324: PPUSH
12325: LD_INT 3
12327: PPUSH
12328: CALL_OW 12
12332: ARRAY
12333: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
12334: LD_VAR 0 6
12338: PPUSH
12339: LD_INT 1
12341: PPUSH
12342: LD_INT 3
12344: PPUSH
12345: LD_VAR 0 7
12349: PPUSH
12350: LD_INT 90
12352: PPUSH
12353: CALL 44457 0 5
// un := CreateVehicle ;
12357: LD_ADDR_VAR 0 4
12361: PUSH
12362: CALL_OW 45
12366: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
12367: LD_VAR 0 4
12371: PPUSH
12372: LD_INT 140
12374: PPUSH
12375: LD_INT 146
12377: PPUSH
12378: LD_INT 0
12380: PPUSH
12381: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
12385: LD_VAR 0 4
12389: PPUSH
12390: LD_INT 131
12392: PPUSH
12393: LD_INT 128
12395: PPUSH
12396: CALL_OW 111
// wait ( 0 0$3 ) ;
12400: LD_INT 105
12402: PPUSH
12403: CALL_OW 67
// tmp := Join ( tmp , un ) ;
12407: LD_ADDR_VAR 0 5
12411: PUSH
12412: LD_VAR 0 5
12416: PPUSH
12417: LD_VAR 0 4
12421: PPUSH
12422: CALL 76891 0 2
12426: ST_TO_ADDR
// end ;
12427: GO 12111
12429: POP
12430: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
12431: LD_ADDR_EXP 36
12435: PUSH
12436: LD_EXP 36
12440: PPUSH
12441: LD_VAR 0 5
12445: PPUSH
12446: CALL 76928 0 2
12450: ST_TO_ADDR
// end ;
12451: LD_VAR 0 2
12455: RET
// every 0 0$3 trigger russianAttackers do
12456: LD_EXP 36
12460: IFFALSE 12543
12462: GO 12464
12464: DISABLE
// begin enable ;
12465: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
12466: LD_EXP 36
12470: PPUSH
12471: LD_INT 126
12473: PUSH
12474: LD_INT 108
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 107
12483: PUSH
12484: LD_INT 85
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 82
12493: PUSH
12494: LD_INT 62
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 73
12503: PUSH
12504: LD_INT 46
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 62
12513: PUSH
12514: LD_INT 31
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 52
12523: PUSH
12524: LD_INT 17
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL 79495 0 2
// end ; end_of_file
12543: END
// on SailEvent ( event ) do begin if event = 1 then
12544: LD_VAR 0 1
12548: PUSH
12549: LD_INT 1
12551: EQUAL
12552: IFFALSE 12567
// PrepareRussianAttack ( Difficulty + 3 ) ;
12554: LD_OWVAR 67
12558: PUSH
12559: LD_INT 3
12561: PLUS
12562: PPUSH
12563: CALL 12063 0 1
// end ;
12567: PPOPN 1
12569: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
12570: LD_INT 0
12572: PPUSH
12573: PPUSH
12574: PPUSH
12575: PPUSH
12576: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12577: LD_VAR 0 1
12581: PPUSH
12582: CALL 35153 0 1
// if un = JMM then
12586: LD_VAR 0 1
12590: PUSH
12591: LD_EXP 14
12595: EQUAL
12596: IFFALSE 12605
// YouLost ( JMM ) ;
12598: LD_STRING JMM
12600: PPUSH
12601: CALL_OW 104
// if un = Sikorski then
12605: LD_VAR 0 1
12609: PUSH
12610: LD_EXP 28
12614: EQUAL
12615: IFFALSE 12641
// if sikorskiStatus = 0 then
12617: LD_EXP 9
12621: PUSH
12622: LD_INT 0
12624: EQUAL
12625: IFFALSE 12633
// SikorskiKilledInAction else
12627: CALL 17982 0 0
12631: GO 12641
// sikorskiIsKilled := true ;
12633: LD_ADDR_EXP 10
12637: PUSH
12638: LD_INT 1
12640: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12641: LD_VAR 0 1
12645: PPUSH
12646: CALL_OW 255
12650: PUSH
12651: LD_INT 1
12653: EQUAL
12654: PUSH
12655: LD_VAR 0 1
12659: PPUSH
12660: CALL_OW 266
12664: PUSH
12665: LD_INT 0
12667: PUSH
12668: LD_INT 1
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: IN
12675: AND
12676: IFFALSE 12685
// YouLost ( Destroyed ) ;
12678: LD_STRING Destroyed
12680: PPUSH
12681: CALL_OW 104
// if un = ruDep then
12685: LD_VAR 0 1
12689: PUSH
12690: LD_INT 28
12692: EQUAL
12693: IFFALSE 12827
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
12695: LD_ADDR_VAR 0 2
12699: PUSH
12700: LD_INT 22
12702: PUSH
12703: LD_INT 3
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 25
12712: PUSH
12713: LD_INT 1
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PPUSH
12724: CALL_OW 69
12728: PUSH
12729: FOR_IN
12730: IFFALSE 12825
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
12732: LD_ADDR_VAR 0 3
12736: PUSH
12737: LD_INT 11
12739: PPUSH
12740: LD_INT 81
12742: PUSH
12743: LD_INT 3
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PPUSH
12750: CALL_OW 70
12754: PPUSH
12755: LD_VAR 0 2
12759: PPUSH
12760: CALL_OW 74
12764: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
12765: LD_VAR 0 2
12769: PPUSH
12770: CALL_OW 310
12774: PPUSH
12775: CALL_OW 266
12779: PUSH
12780: LD_INT 32
12782: EQUAL
12783: IFFALSE 12823
// begin ComExitBuilding ( i ) ;
12785: LD_VAR 0 2
12789: PPUSH
12790: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
12794: LD_VAR 0 2
12798: PPUSH
12799: LD_VAR 0 3
12803: PPUSH
12804: CALL_OW 250
12808: PPUSH
12809: LD_VAR 0 3
12813: PPUSH
12814: CALL_OW 251
12818: PPUSH
12819: CALL_OW 174
// end ; end ;
12823: GO 12729
12825: POP
12826: POP
// end ; if un in ruMobile then
12827: LD_VAR 0 1
12831: PUSH
12832: LD_EXP 34
12836: IN
12837: IFFALSE 12855
// ruMobile := ruMobile diff un ;
12839: LD_ADDR_EXP 34
12843: PUSH
12844: LD_EXP 34
12848: PUSH
12849: LD_VAR 0 1
12853: DIFF
12854: ST_TO_ADDR
// if GetSide ( un ) = 3 then
12855: LD_VAR 0 1
12859: PPUSH
12860: CALL_OW 255
12864: PUSH
12865: LD_INT 3
12867: EQUAL
12868: IFFALSE 13503
// begin if GetType ( un ) = unit_building then
12870: LD_VAR 0 1
12874: PPUSH
12875: CALL_OW 247
12879: PUSH
12880: LD_INT 3
12882: EQUAL
12883: IFFALSE 13019
// begin btype := GetBType ( un ) ;
12885: LD_ADDR_VAR 0 6
12889: PUSH
12890: LD_VAR 0 1
12894: PPUSH
12895: CALL_OW 266
12899: ST_TO_ADDR
// if btype = b_warehouse then
12900: LD_VAR 0 6
12904: PUSH
12905: LD_INT 1
12907: EQUAL
12908: IFFALSE 12918
// btype := b_depot ;
12910: LD_ADDR_VAR 0 6
12914: PUSH
12915: LD_INT 0
12917: ST_TO_ADDR
// if btype = b_barracks then
12918: LD_VAR 0 6
12922: PUSH
12923: LD_INT 5
12925: EQUAL
12926: IFFALSE 12936
// btype := b_armoury ;
12928: LD_ADDR_VAR 0 6
12932: PUSH
12933: LD_INT 4
12935: ST_TO_ADDR
// if btype = b_lab_full then
12936: LD_VAR 0 6
12940: PUSH
12941: LD_INT 8
12943: EQUAL
12944: IFFALSE 12954
// btype := b_lab ;
12946: LD_ADDR_VAR 0 6
12950: PUSH
12951: LD_INT 6
12953: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
12954: LD_ADDR_EXP 35
12958: PUSH
12959: LD_EXP 35
12963: PPUSH
12964: LD_EXP 35
12968: PUSH
12969: LD_INT 1
12971: PLUS
12972: PPUSH
12973: LD_VAR 0 6
12977: PUSH
12978: LD_VAR 0 1
12982: PPUSH
12983: CALL_OW 250
12987: PUSH
12988: LD_VAR 0 1
12992: PPUSH
12993: CALL_OW 251
12997: PUSH
12998: LD_VAR 0 1
13002: PPUSH
13003: CALL_OW 254
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 1
13018: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
13019: LD_VAR 0 1
13023: PPUSH
13024: CALL_OW 247
13028: PUSH
13029: LD_INT 2
13031: EQUAL
13032: IFFALSE 13307
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
13034: LD_VAR 0 1
13038: PPUSH
13039: CALL_OW 264
13043: PUSH
13044: LD_INT 52
13046: PUSH
13047: LD_INT 51
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: IN
13054: IFFALSE 13084
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
13056: LD_INT 29
13058: PPUSH
13059: LD_INT 22
13061: PPUSH
13062: LD_INT 1
13064: PPUSH
13065: LD_INT 3
13067: PPUSH
13068: LD_VAR 0 1
13072: PPUSH
13073: CALL_OW 264
13077: PPUSH
13078: CALL_OW 185
// end else
13082: GO 13307
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13084: LD_ADDR_VAR 0 4
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 22
13094: PUSH
13095: LD_INT 23
13097: PUSH
13098: LD_INT 24
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: PUSH
13107: LD_INT 1
13109: PPUSH
13110: LD_INT 4
13112: PPUSH
13113: CALL_OW 12
13117: ARRAY
13118: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13119: LD_ADDR_VAR 0 5
13123: PUSH
13124: LD_INT 42
13126: PUSH
13127: LD_INT 44
13129: PUSH
13130: LD_INT 43
13132: PUSH
13133: LD_INT 46
13135: PUSH
13136: LD_INT 45
13138: PUSH
13139: LD_INT 46
13141: PUSH
13142: LD_INT 45
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: PUSH
13154: LD_OWVAR 67
13158: PUSH
13159: LD_INT 0
13161: PPUSH
13162: LD_INT 3
13164: PPUSH
13165: CALL_OW 12
13169: PLUS
13170: ARRAY
13171: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13172: LD_VAR 0 4
13176: PUSH
13177: LD_INT 21
13179: PUSH
13180: LD_INT 22
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: IN
13187: PUSH
13188: LD_VAR 0 5
13192: PUSH
13193: LD_INT 46
13195: EQUAL
13196: AND
13197: IFFALSE 13226
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13199: LD_ADDR_VAR 0 5
13203: PUSH
13204: LD_INT 44
13206: PUSH
13207: LD_INT 45
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 1
13216: PPUSH
13217: LD_INT 2
13219: PPUSH
13220: CALL_OW 12
13224: ARRAY
13225: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
13226: LD_OWVAR 1
13230: PUSH
13231: LD_INT 31500
13233: PUSH
13234: LD_INT 27300
13236: PUSH
13237: LD_INT 23100
13239: PUSH
13240: LD_INT 21000
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: LD_OWVAR 67
13253: ARRAY
13254: LESS
13255: IFFALSE 13284
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13257: LD_ADDR_VAR 0 5
13261: PUSH
13262: LD_INT 44
13264: PUSH
13265: LD_INT 43
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 1
13274: PPUSH
13275: LD_INT 2
13277: PPUSH
13278: CALL_OW 12
13282: ARRAY
13283: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
13284: LD_INT 29
13286: PPUSH
13287: LD_VAR 0 4
13291: PPUSH
13292: LD_INT 1
13294: PPUSH
13295: LD_INT 1
13297: PPUSH
13298: LD_VAR 0 5
13302: PPUSH
13303: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
13307: LD_VAR 0 1
13311: PPUSH
13312: CALL_OW 257
13316: PUSH
13317: LD_INT 3
13319: EQUAL
13320: IFFALSE 13503
// begin killMechCounter := Inc ( killMechCounter ) ;
13322: LD_ADDR_EXP 12
13326: PUSH
13327: LD_EXP 12
13331: PPUSH
13332: CALL 78252 0 1
13336: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
13337: LD_EXP 33
13341: PUSH
13342: LD_INT 0
13344: EQUAL
13345: PUSH
13346: LD_INT 29
13348: PPUSH
13349: CALL_OW 302
13353: NOT
13354: OR
13355: IFFALSE 13359
// exit ;
13357: GO 13503
// ruMechCounter := Dec ( ruMechCounter ) ;
13359: LD_ADDR_EXP 33
13363: PUSH
13364: LD_EXP 33
13368: PPUSH
13369: CALL 78274 0 1
13373: ST_TO_ADDR
// uc_side := 3 ;
13374: LD_ADDR_OWVAR 20
13378: PUSH
13379: LD_INT 3
13381: ST_TO_ADDR
// uc_nation := 3 ;
13382: LD_ADDR_OWVAR 21
13386: PUSH
13387: LD_INT 3
13389: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
13390: LD_INT 0
13392: PPUSH
13393: LD_INT 5
13395: PUSH
13396: LD_INT 6
13398: PUSH
13399: LD_INT 7
13401: PUSH
13402: LD_INT 8
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: PUSH
13411: LD_OWVAR 67
13415: ARRAY
13416: PPUSH
13417: CALL_OW 383
// tmp := CreateHuman ;
13421: LD_ADDR_VAR 0 3
13425: PUSH
13426: CALL_OW 44
13430: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
13431: LD_VAR 0 3
13435: PPUSH
13436: LD_INT 145
13438: PPUSH
13439: LD_INT 133
13441: PPUSH
13442: LD_INT 0
13444: PPUSH
13445: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
13449: LD_VAR 0 3
13453: PPUSH
13454: LD_INT 29
13456: PPUSH
13457: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13461: LD_INT 35
13463: PPUSH
13464: CALL_OW 67
// if not HasTask ( tmp ) then
13468: LD_VAR 0 3
13472: PPUSH
13473: CALL_OW 314
13477: NOT
13478: IFFALSE 13492
// ComEnterUnit ( tmp , ruFac ) ;
13480: LD_VAR 0 3
13484: PPUSH
13485: LD_INT 29
13487: PPUSH
13488: CALL_OW 120
// until IsInUnit ( tmp ) ;
13492: LD_VAR 0 3
13496: PPUSH
13497: CALL_OW 310
13501: IFFALSE 13461
// end ; end ; end ;
13503: PPOPN 6
13505: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
13506: LD_VAR 0 1
13510: PPUSH
13511: CALL_OW 255
13515: PUSH
13516: LD_INT 4
13518: EQUAL
13519: IFFALSE 13536
// ComMoveXY ( driver , 40 , 47 ) ;
13521: LD_VAR 0 1
13525: PPUSH
13526: LD_INT 40
13528: PPUSH
13529: LD_INT 47
13531: PPUSH
13532: CALL_OW 111
// if GetSide ( driver ) = 3 then
13536: LD_VAR 0 1
13540: PPUSH
13541: CALL_OW 255
13545: PUSH
13546: LD_INT 3
13548: EQUAL
13549: IFFALSE 13763
// begin ComMoveXY ( driver , 90 , 97 ) ;
13551: LD_VAR 0 1
13555: PPUSH
13556: LD_INT 90
13558: PPUSH
13559: LD_INT 97
13561: PPUSH
13562: CALL_OW 111
// if IsOk ( ruFac ) then
13566: LD_INT 29
13568: PPUSH
13569: CALL_OW 302
13573: IFFALSE 13687
// begin repeat wait ( 0 0$1 ) ;
13575: LD_INT 35
13577: PPUSH
13578: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
13582: LD_INT 29
13584: PPUSH
13585: CALL_OW 313
13589: PUSH
13590: LD_INT 6
13592: LESS
13593: PUSH
13594: LD_VAR 0 1
13598: PPUSH
13599: CALL_OW 301
13603: OR
13604: IFFALSE 13575
// if IsDead ( driver ) then
13606: LD_VAR 0 1
13610: PPUSH
13611: CALL_OW 301
13615: IFFALSE 13619
// exit ;
13617: GO 13763
// repeat wait ( 0 0$10 ) ;
13619: LD_INT 350
13621: PPUSH
13622: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
13626: LD_VAR 0 1
13630: PPUSH
13631: CALL_OW 314
13635: NOT
13636: PUSH
13637: LD_INT 29
13639: PPUSH
13640: CALL_OW 313
13644: PUSH
13645: LD_INT 6
13647: LESS
13648: AND
13649: IFFALSE 13663
// ComEnterUnit ( driver , ruFac ) ;
13651: LD_VAR 0 1
13655: PPUSH
13656: LD_INT 29
13658: PPUSH
13659: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
13663: LD_VAR 0 1
13667: PPUSH
13668: CALL_OW 301
13672: PUSH
13673: LD_VAR 0 1
13677: PPUSH
13678: CALL_OW 310
13682: OR
13683: IFFALSE 13619
// end else
13685: GO 13763
// begin ComMoveXY ( driver , 142 , 148 ) ;
13687: LD_VAR 0 1
13691: PPUSH
13692: LD_INT 142
13694: PPUSH
13695: LD_INT 148
13697: PPUSH
13698: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13702: LD_INT 35
13704: PPUSH
13705: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
13709: LD_VAR 0 1
13713: PPUSH
13714: CALL_OW 301
13718: PUSH
13719: LD_VAR 0 1
13723: PPUSH
13724: LD_INT 142
13726: PPUSH
13727: LD_INT 148
13729: PPUSH
13730: CALL_OW 307
13734: OR
13735: IFFALSE 13702
// if IsAt ( driver , 142 , 148 ) then
13737: LD_VAR 0 1
13741: PPUSH
13742: LD_INT 142
13744: PPUSH
13745: LD_INT 148
13747: PPUSH
13748: CALL_OW 307
13752: IFFALSE 13763
// RemoveUnit ( driver ) ;
13754: LD_VAR 0 1
13758: PPUSH
13759: CALL_OW 64
// end ; end ; end ;
13763: PPOPN 4
13765: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
13766: LD_VAR 0 2
13770: PPUSH
13771: CALL_OW 257
13775: PUSH
13776: LD_INT 3
13778: EQUAL
13779: PUSH
13780: LD_VAR 0 1
13784: PPUSH
13785: CALL_OW 255
13789: PUSH
13790: LD_INT 3
13792: EQUAL
13793: AND
13794: PUSH
13795: LD_VAR 0 1
13799: PUSH
13800: LD_INT 29
13802: EQUAL
13803: AND
13804: IFFALSE 13818
// SetLives ( un , 1000 ) ;
13806: LD_VAR 0 2
13810: PPUSH
13811: LD_INT 1000
13813: PPUSH
13814: CALL_OW 234
// end ;
13818: PPOPN 2
13820: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
13821: LD_INT 0
13823: PPUSH
13824: PPUSH
// begin if GetSide ( b ) = 3 then
13825: LD_VAR 0 1
13829: PPUSH
13830: CALL_OW 255
13834: PUSH
13835: LD_INT 3
13837: EQUAL
13838: IFFALSE 14069
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
13840: LD_VAR 0 1
13844: PPUSH
13845: CALL_OW 266
13849: PUSH
13850: LD_INT 32
13852: PUSH
13853: LD_INT 5
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: IN
13860: IFFALSE 14069
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
13862: LD_ADDR_VAR 0 4
13866: PUSH
13867: LD_INT 22
13869: PUSH
13870: LD_INT 3
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PUSH
13877: LD_INT 50
13879: PUSH
13880: EMPTY
13881: LIST
13882: PUSH
13883: LD_INT 30
13885: PUSH
13886: LD_INT 32
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 58
13895: PUSH
13896: EMPTY
13897: LIST
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: PPUSH
13905: CALL_OW 69
13909: ST_TO_ADDR
// if tmp then
13910: LD_VAR 0 4
13914: IFFALSE 13936
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
13916: LD_VAR 0 2
13920: PPUSH
13921: LD_VAR 0 4
13925: PUSH
13926: LD_INT 1
13928: ARRAY
13929: PPUSH
13930: CALL_OW 120
// exit ;
13934: GO 14069
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13936: LD_ADDR_VAR 0 4
13940: PUSH
13941: LD_INT 22
13943: PUSH
13944: LD_INT 3
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 50
13953: PUSH
13954: EMPTY
13955: LIST
13956: PUSH
13957: LD_INT 2
13959: PUSH
13960: LD_INT 30
13962: PUSH
13963: LD_INT 4
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PUSH
13970: LD_INT 30
13972: PUSH
13973: LD_INT 5
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: LIST
13989: PPUSH
13990: CALL_OW 69
13994: ST_TO_ADDR
// if not tmp then
13995: LD_VAR 0 4
13999: NOT
14000: IFFALSE 14019
// begin ComMoveXY ( un , 92 , 99 ) ;
14002: LD_VAR 0 2
14006: PPUSH
14007: LD_INT 92
14009: PPUSH
14010: LD_INT 99
14012: PPUSH
14013: CALL_OW 111
// exit ;
14017: GO 14069
// end ; for i in tmp do
14019: LD_ADDR_VAR 0 3
14023: PUSH
14024: LD_VAR 0 4
14028: PUSH
14029: FOR_IN
14030: IFFALSE 14067
// if UnitsInside ( i ) < 6 then
14032: LD_VAR 0 3
14036: PPUSH
14037: CALL_OW 313
14041: PUSH
14042: LD_INT 6
14044: LESS
14045: IFFALSE 14065
// begin ComEnterUnit ( un , i ) ;
14047: LD_VAR 0 2
14051: PPUSH
14052: LD_VAR 0 3
14056: PPUSH
14057: CALL_OW 120
// exit ;
14061: POP
14062: POP
14063: GO 14069
// end ;
14065: GO 14029
14067: POP
14068: POP
// end ; end ; end ;
14069: PPOPN 4
14071: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 255
14081: PUSH
14082: LD_INT 3
14084: PUSH
14085: LD_INT 6
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: IN
14092: PUSH
14093: LD_VAR 0 1
14097: PPUSH
14098: CALL_OW 263
14102: PUSH
14103: LD_INT 3
14105: EQUAL
14106: AND
14107: PUSH
14108: LD_EXP 7
14112: NOT
14113: AND
14114: IFFALSE 14133
// begin seenComputer := true ;
14116: LD_ADDR_EXP 7
14120: PUSH
14121: LD_INT 1
14123: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14124: LD_VAR 0 1
14128: PPUSH
14129: CALL 17196 0 1
// end ; end ;
14133: PPOPN 1
14135: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
14136: LD_INT 0
14138: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14139: LD_VAR 0 1
14143: PPUSH
14144: LD_VAR 0 2
14148: PPUSH
14149: CALL 35273 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
14153: LD_VAR 0 1
14157: PPUSH
14158: CALL_OW 255
14162: PUSH
14163: LD_INT 3
14165: EQUAL
14166: PUSH
14167: LD_VAR 0 1
14171: PPUSH
14172: CALL_OW 263
14176: PUSH
14177: LD_INT 1
14179: EQUAL
14180: AND
14181: PUSH
14182: LD_VAR 0 1
14186: PPUSH
14187: CALL_OW 264
14191: PUSH
14192: LD_INT 42
14194: PUSH
14195: LD_INT 43
14197: PUSH
14198: LD_INT 44
14200: PUSH
14201: LD_INT 46
14203: PUSH
14204: LD_INT 45
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: IN
14214: AND
14215: IFFALSE 14245
// begin SetTag ( vehicle , 300 ) ;
14217: LD_VAR 0 1
14221: PPUSH
14222: LD_INT 300
14224: PPUSH
14225: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
14229: LD_ADDR_EXP 34
14233: PUSH
14234: LD_EXP 34
14238: PUSH
14239: LD_VAR 0 1
14243: UNION
14244: ST_TO_ADDR
// end ; end ;
14245: PPOPN 3
14247: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
14248: LD_INT 0
14250: PPUSH
// begin if InArea ( x , y , ruCrates ) then
14251: LD_VAR 0 2
14255: PPUSH
14256: LD_VAR 0 3
14260: PPUSH
14261: LD_INT 13
14263: PPUSH
14264: CALL_OW 309
14268: IFFALSE 14399
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
14270: LD_ADDR_VAR 0 6
14274: PUSH
14275: LD_INT 22
14277: PUSH
14278: LD_INT 3
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 50
14287: PUSH
14288: EMPTY
14289: LIST
14290: PUSH
14291: LD_INT 34
14293: PUSH
14294: LD_INT 51
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: PPUSH
14306: CALL_OW 69
14310: ST_TO_ADDR
// if not cargo then
14311: LD_VAR 0 6
14315: NOT
14316: IFFALSE 14320
// exit ;
14318: GO 14399
// wait ( 0 0$5 ) ;
14320: LD_INT 175
14322: PPUSH
14323: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
14327: LD_VAR 0 6
14331: PUSH
14332: LD_INT 1
14334: ARRAY
14335: PPUSH
14336: LD_INT 28
14338: PPUSH
14339: CALL_OW 296
14343: PUSH
14344: LD_INT 6
14346: LESS
14347: PUSH
14348: LD_VAR 0 6
14352: PUSH
14353: LD_INT 1
14355: ARRAY
14356: PPUSH
14357: CALL_OW 261
14361: PUSH
14362: LD_INT 50
14364: LESS
14365: AND
14366: IFFALSE 14380
// ComMoveUnit ( cargo , ruDep ) ;
14368: LD_VAR 0 6
14372: PPUSH
14373: LD_INT 28
14375: PPUSH
14376: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
14380: LD_VAR 0 6
14384: PPUSH
14385: LD_VAR 0 2
14389: PPUSH
14390: LD_VAR 0 3
14394: PPUSH
14395: CALL_OW 177
// end ; end ;
14399: PPOPN 6
14401: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
14402: LD_VAR 0 1
14406: PPUSH
14407: CALL_OW 264
14411: PUSH
14412: LD_INT 45
14414: EQUAL
14415: IFFALSE 14432
// captureRocketCounter := Inc ( captureRocketCounter ) ;
14417: LD_ADDR_EXP 11
14421: PUSH
14422: LD_EXP 11
14426: PPUSH
14427: CALL 78252 0 1
14431: ST_TO_ADDR
// end ;
14432: PPOPN 4
14434: END
// on BuildingComplete ( b ) do var i , tmp ;
14435: LD_INT 0
14437: PPUSH
14438: PPUSH
// begin if GetSide ( b ) = 3 then
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 255
14448: PUSH
14449: LD_INT 3
14451: EQUAL
14452: IFFALSE 14691
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
14454: LD_ADDR_EXP 35
14458: PUSH
14459: LD_EXP 35
14463: PPUSH
14464: LD_INT 1
14466: PPUSH
14467: CALL_OW 3
14471: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
14472: LD_VAR 0 1
14476: PPUSH
14477: CALL_OW 266
14481: PUSH
14482: LD_INT 4
14484: EQUAL
14485: IFFALSE 14496
// ComUpgrade ( b ) ;
14487: LD_VAR 0 1
14491: PPUSH
14492: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
14496: LD_VAR 0 1
14500: PPUSH
14501: CALL_OW 266
14505: PUSH
14506: LD_INT 32
14508: PUSH
14509: LD_INT 33
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: IN
14516: IFFALSE 14691
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
14518: LD_VAR 0 1
14522: PPUSH
14523: LD_INT 46
14525: PUSH
14526: LD_INT 45
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: LD_INT 1
14535: PPUSH
14536: LD_INT 2
14538: PPUSH
14539: CALL_OW 12
14543: ARRAY
14544: PPUSH
14545: CALL_OW 208
// if GetBType ( b ) = b_bunker then
14549: LD_VAR 0 1
14553: PPUSH
14554: CALL_OW 266
14558: PUSH
14559: LD_INT 32
14561: EQUAL
14562: IFFALSE 14691
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
14564: LD_ADDR_VAR 0 3
14568: PUSH
14569: LD_INT 22
14571: PUSH
14572: LD_INT 3
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: LD_INT 25
14581: PUSH
14582: LD_INT 1
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 120
14591: PUSH
14592: LD_INT 0
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: LIST
14603: PPUSH
14604: CALL_OW 69
14608: ST_TO_ADDR
// if tmp then
14609: LD_VAR 0 3
14613: IFFALSE 14691
// for i in tmp do
14615: LD_ADDR_VAR 0 2
14619: PUSH
14620: LD_VAR 0 3
14624: PUSH
14625: FOR_IN
14626: IFFALSE 14689
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
14628: LD_VAR 0 2
14632: PPUSH
14633: CALL_OW 310
14637: NOT
14638: PUSH
14639: LD_VAR 0 2
14643: PPUSH
14644: CALL_OW 310
14648: PPUSH
14649: CALL_OW 266
14653: PUSH
14654: LD_INT 32
14656: NONEQUAL
14657: OR
14658: IFFALSE 14687
// begin ComExit ( i ) ;
14660: LD_VAR 0 2
14664: PPUSH
14665: CALL 77289 0 1
// AddComEnterUnit ( i , b ) ;
14669: LD_VAR 0 2
14673: PPUSH
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL_OW 180
// exit ;
14683: POP
14684: POP
14685: GO 14691
// end ;
14687: GO 14625
14689: POP
14690: POP
// end ; end ; end ; end ; end_of_file
14691: PPOPN 3
14693: END
// export function Action ; var i , tmp , un , inUnit ; begin
14694: LD_INT 0
14696: PPUSH
14697: PPUSH
14698: PPUSH
14699: PPUSH
14700: PPUSH
// Video ( true ) ;
14701: LD_INT 1
14703: PPUSH
14704: CALL 76863 0 1
// invincibleMode := true ;
14708: LD_ADDR_EXP 5
14712: PUSH
14713: LD_INT 1
14715: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
14716: LD_INT 50
14718: PPUSH
14719: LD_INT 12
14721: PPUSH
14722: LD_INT 1
14724: PPUSH
14725: LD_INT 56
14727: NEG
14728: PPUSH
14729: CALL 76777 0 4
// CenterOnXY ( 50 , 12 ) ;
14733: LD_INT 50
14735: PPUSH
14736: LD_INT 12
14738: PPUSH
14739: CALL_OW 84
// wait ( 0 0$3 ) ;
14743: LD_INT 105
14745: PPUSH
14746: CALL_OW 67
// PrepareStartRussianAttack ;
14750: CALL 9830 0 0
// CenterOnXY ( 66 , 47 ) ;
14754: LD_INT 66
14756: PPUSH
14757: LD_INT 47
14759: PPUSH
14760: CALL_OW 84
// wait ( 0 0$5 ) ;
14764: LD_INT 175
14766: PPUSH
14767: CALL_OW 67
// case gammaCommander of 1 :
14771: LD_EXP 13
14775: PUSH
14776: LD_INT 1
14778: DOUBLE
14779: EQUAL
14780: IFTRUE 14784
14782: GO 14799
14784: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
14785: LD_EXP 16
14789: PPUSH
14790: LD_STRING D1-Don-1
14792: PPUSH
14793: CALL_OW 88
14797: GO 14846
14799: LD_INT 2
14801: DOUBLE
14802: EQUAL
14803: IFTRUE 14807
14805: GO 14822
14807: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
14808: LD_EXP 15
14812: PPUSH
14813: LD_STRING D1-Brown-1
14815: PPUSH
14816: CALL_OW 88
14820: GO 14846
14822: LD_INT 3
14824: DOUBLE
14825: EQUAL
14826: IFTRUE 14830
14828: GO 14845
14830: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
14831: LD_EXP 25
14835: PPUSH
14836: LD_STRING D1-VanH-1
14838: PPUSH
14839: CALL_OW 88
14843: GO 14846
14845: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: LD_INT 22
14853: PUSH
14854: LD_INT 1
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 33
14863: PUSH
14864: LD_INT 2
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 61
14873: PUSH
14874: EMPTY
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: PPUSH
14882: CALL_OW 69
14886: ST_TO_ADDR
// if tmp then
14887: LD_VAR 0 3
14891: IFFALSE 14908
// ComAgressiveMove ( tmp , 74 , 44 ) ;
14893: LD_VAR 0 3
14897: PPUSH
14898: LD_INT 74
14900: PPUSH
14901: LD_INT 44
14903: PPUSH
14904: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
14908: LD_ADDR_VAR 0 3
14912: PUSH
14913: LD_INT 22
14915: PUSH
14916: LD_INT 1
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 25
14925: PUSH
14926: LD_INT 1
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PPUSH
14937: CALL_OW 69
14941: PUSH
14942: LD_EXP 16
14946: PUSH
14947: LD_EXP 15
14951: PUSH
14952: LD_EXP 25
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: DIFF
14962: ST_TO_ADDR
// if tmp then
14963: LD_VAR 0 3
14967: IFFALSE 15045
// for i in tmp do
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_VAR 0 3
14978: PUSH
14979: FOR_IN
14980: IFFALSE 15043
// begin inUnit := IsInUnit ( i ) ;
14982: LD_ADDR_VAR 0 5
14986: PUSH
14987: LD_VAR 0 2
14991: PPUSH
14992: CALL_OW 310
14996: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
14997: LD_VAR 0 5
15001: PUSH
15002: LD_VAR 0 5
15006: PPUSH
15007: CALL_OW 266
15011: PUSH
15012: LD_INT 32
15014: PUSH
15015: LD_INT 31
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: IN
15022: AND
15023: IFFALSE 15041
// tmp := tmp diff i ;
15025: LD_ADDR_VAR 0 3
15029: PUSH
15030: LD_VAR 0 3
15034: PUSH
15035: LD_VAR 0 2
15039: DIFF
15040: ST_TO_ADDR
// end ;
15041: GO 14979
15043: POP
15044: POP
// if tmp then
15045: LD_VAR 0 3
15049: IFFALSE 15139
// begin ComExitAll ( tmp ) ;
15051: LD_VAR 0 3
15055: PPUSH
15056: CALL 77372 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15060: LD_VAR 0 3
15064: PPUSH
15065: LD_INT 74
15067: PPUSH
15068: LD_INT 44
15070: PPUSH
15071: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15075: LD_ADDR_VAR 0 3
15079: PUSH
15080: LD_INT 22
15082: PUSH
15083: LD_INT 1
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 25
15092: PUSH
15093: LD_INT 4
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PPUSH
15104: CALL_OW 69
15108: ST_TO_ADDR
// if tmp then
15109: LD_VAR 0 3
15113: IFFALSE 15139
// begin ComExitAll ( tmp ) ;
15115: LD_VAR 0 3
15119: PPUSH
15120: CALL 77372 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15124: LD_VAR 0 3
15128: PPUSH
15129: LD_INT 66
15131: PPUSH
15132: LD_INT 28
15134: PPUSH
15135: CALL_OW 171
// end ; end ; game_speed := 4 ;
15139: LD_ADDR_OWVAR 65
15143: PUSH
15144: LD_INT 4
15146: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15147: LD_INT 70
15149: PPUSH
15150: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15154: LD_EXP 29
15158: PPUSH
15159: LD_STRING D1-Har-1
15161: PPUSH
15162: CALL_OW 94
// case gammaCommander of 1 :
15166: LD_EXP 13
15170: PUSH
15171: LD_INT 1
15173: DOUBLE
15174: EQUAL
15175: IFTRUE 15179
15177: GO 15194
15179: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15180: LD_EXP 16
15184: PPUSH
15185: LD_STRING D1-Don-2
15187: PPUSH
15188: CALL_OW 88
15192: GO 15241
15194: LD_INT 2
15196: DOUBLE
15197: EQUAL
15198: IFTRUE 15202
15200: GO 15217
15202: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15203: LD_EXP 15
15207: PPUSH
15208: LD_STRING D1-Brown-2
15210: PPUSH
15211: CALL_OW 88
15215: GO 15241
15217: LD_INT 3
15219: DOUBLE
15220: EQUAL
15221: IFTRUE 15225
15223: GO 15240
15225: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15226: LD_EXP 25
15230: PPUSH
15231: LD_STRING D1-VanH-2
15233: PPUSH
15234: CALL_OW 88
15238: GO 15241
15240: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15241: LD_EXP 29
15245: PPUSH
15246: LD_STRING D1-Har-2
15248: PPUSH
15249: CALL_OW 94
// invincibleMode := false ;
15253: LD_ADDR_EXP 5
15257: PUSH
15258: LD_INT 0
15260: ST_TO_ADDR
// Video ( false ) ;
15261: LD_INT 0
15263: PPUSH
15264: CALL 76863 0 1
// ChangeMissionObjectives ( M1 ) ;
15268: LD_STRING M1
15270: PPUSH
15271: CALL_OW 337
// SaveForQuickRestart ;
15275: CALL_OW 22
// wait ( 2 2$30 ) ;
15279: LD_INT 5250
15281: PPUSH
15282: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
15286: LD_INT 1
15288: PPUSH
15289: CALL 12063 0 1
// wait ( 4 4$30 ) ;
15293: LD_INT 9450
15295: PPUSH
15296: CALL_OW 67
// if Difficulty > 1 then
15300: LD_OWVAR 67
15304: PUSH
15305: LD_INT 1
15307: GREATER
15308: IFFALSE 15317
// PrepareRussianAttack ( 2 ) ;
15310: LD_INT 2
15312: PPUSH
15313: CALL 12063 0 1
// if Difficulty > 2 then
15317: LD_OWVAR 67
15321: PUSH
15322: LD_INT 2
15324: GREATER
15325: IFFALSE 15484
// begin for i := 1 to 4 do
15327: LD_ADDR_VAR 0 2
15331: PUSH
15332: DOUBLE
15333: LD_INT 1
15335: DEC
15336: ST_TO_ADDR
15337: LD_INT 4
15339: PUSH
15340: FOR_TO
15341: IFFALSE 15426
// begin uc_side := 6 ;
15343: LD_ADDR_OWVAR 20
15347: PUSH
15348: LD_INT 6
15350: ST_TO_ADDR
// uc_nation := 3 ;
15351: LD_ADDR_OWVAR 21
15355: PUSH
15356: LD_INT 3
15358: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
15359: LD_INT 0
15361: PPUSH
15362: LD_INT 7
15364: PPUSH
15365: CALL_OW 381
// un := CreateHuman ;
15369: LD_ADDR_VAR 0 4
15373: PUSH
15374: CALL_OW 44
15378: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15379: LD_VAR 0 4
15383: PPUSH
15384: LD_INT 122
15386: PPUSH
15387: LD_INT 89
15389: PPUSH
15390: LD_INT 3
15392: PPUSH
15393: LD_INT 0
15395: PPUSH
15396: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
15400: LD_VAR 0 4
15404: PPUSH
15405: LD_INT 88
15407: PPUSH
15408: LD_INT 42
15410: PPUSH
15411: CALL_OW 114
// AddComHold ( un ) ;
15415: LD_VAR 0 4
15419: PPUSH
15420: CALL_OW 200
// end ;
15424: GO 15340
15426: POP
15427: POP
// PrepareScientist ( false , 6 ) ;
15428: LD_INT 0
15430: PPUSH
15431: LD_INT 6
15433: PPUSH
15434: CALL_OW 384
// un := CreateHuman ;
15438: LD_ADDR_VAR 0 4
15442: PUSH
15443: CALL_OW 44
15447: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15448: LD_VAR 0 4
15452: PPUSH
15453: LD_INT 122
15455: PPUSH
15456: LD_INT 89
15458: PPUSH
15459: LD_INT 3
15461: PPUSH
15462: LD_INT 0
15464: PPUSH
15465: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
15469: LD_VAR 0 4
15473: PPUSH
15474: LD_INT 91
15476: PPUSH
15477: LD_INT 48
15479: PPUSH
15480: CALL_OW 111
// end ; end ;
15484: LD_VAR 0 1
15488: RET
// every 0 0$1 trigger invincibleMode do var i ;
15489: LD_EXP 5
15493: IFFALSE 15572
15495: GO 15497
15497: DISABLE
15498: LD_INT 0
15500: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15501: LD_ADDR_VAR 0 1
15505: PUSH
15506: LD_INT 22
15508: PUSH
15509: LD_INT 1
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 21
15518: PUSH
15519: LD_INT 1
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 3
15528: PUSH
15529: LD_INT 24
15531: PUSH
15532: LD_INT 1000
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: LIST
15547: PPUSH
15548: CALL_OW 69
15552: PUSH
15553: FOR_IN
15554: IFFALSE 15570
// SetLives ( i , 1000 ) ;
15556: LD_VAR 0 1
15560: PPUSH
15561: LD_INT 1000
15563: PPUSH
15564: CALL_OW 234
15568: GO 15553
15570: POP
15571: POP
// end ;
15572: PPOPN 1
15574: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
15575: LD_OWVAR 1
15579: PUSH
15580: LD_INT 14700
15582: GREATER
15583: IFFALSE 17193
15585: GO 15587
15587: DISABLE
15588: LD_INT 0
15590: PPUSH
15591: PPUSH
// begin PrepareSupportFromDelta ;
15592: CALL 4126 0 0
// deltaSupport := true ;
15596: LD_ADDR_EXP 6
15600: PUSH
15601: LD_INT 1
15603: ST_TO_ADDR
// dialog := false ;
15604: LD_ADDR_VAR 0 1
15608: PUSH
15609: LD_INT 0
15611: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15612: LD_EXP 21
15616: PPUSH
15617: CALL_OW 302
15621: IFFALSE 15643
// dialog := Say ( Gladstone , D2-Glad-1 ) else
15623: LD_ADDR_VAR 0 1
15627: PUSH
15628: LD_EXP 21
15632: PPUSH
15633: LD_STRING D2-Glad-1
15635: PPUSH
15636: CALL_OW 88
15640: ST_TO_ADDR
15641: GO 15725
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
15643: LD_ADDR_VAR 0 1
15647: PUSH
15648: LD_INT 22
15650: PUSH
15651: LD_INT 1
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 120
15660: PUSH
15661: LD_INT 107
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 21
15670: PUSH
15671: LD_INT 1
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 23
15680: PUSH
15681: LD_INT 1
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: PPUSH
15694: CALL_OW 69
15698: PUSH
15699: LD_EXP 27
15703: PUSH
15704: LD_EXP 26
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: DIFF
15713: PPUSH
15714: LD_STRING D2-Sol1-1
15716: PPUSH
15717: LD_STRING D2-FSol1-1
15719: PPUSH
15720: CALL 19361 0 3
15724: ST_TO_ADDR
// if dialog then
15725: LD_VAR 0 1
15729: IFFALSE 15830
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
15731: LD_EXP 16
15735: PPUSH
15736: CALL_OW 302
15740: PUSH
15741: LD_EXP 13
15745: PUSH
15746: LD_INT 1
15748: EQUAL
15749: AND
15750: IFFALSE 15764
// Say ( Donaldson , D2-Don-1 ) ;
15752: LD_EXP 16
15756: PPUSH
15757: LD_STRING D2-Don-1
15759: PPUSH
15760: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15764: LD_EXP 15
15768: PPUSH
15769: CALL_OW 302
15773: PUSH
15774: LD_EXP 13
15778: PUSH
15779: LD_INT 2
15781: EQUAL
15782: AND
15783: IFFALSE 15797
// Say ( Brown , D2-Brown-1 ) ;
15785: LD_EXP 15
15789: PPUSH
15790: LD_STRING D2-Brown-1
15792: PPUSH
15793: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
15797: LD_EXP 25
15801: PPUSH
15802: CALL_OW 302
15806: PUSH
15807: LD_EXP 13
15811: PUSH
15812: LD_INT 3
15814: EQUAL
15815: AND
15816: IFFALSE 15830
// Say ( Houten , D2-VanH-1 ) ;
15818: LD_EXP 25
15822: PPUSH
15823: LD_STRING D2-VanH-1
15825: PPUSH
15826: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
15830: LD_INT 3
15832: PPUSH
15833: CALL 12063 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
15837: LD_STRING 07_time
15839: PPUSH
15840: LD_INT 18900
15842: PPUSH
15843: CALL_OW 30
15847: PUSH
15848: LD_INT 3
15850: DIV
15851: PPUSH
15852: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
15856: LD_INT 34
15858: PPUSH
15859: LD_INT 1
15861: PPUSH
15862: CALL_OW 321
15866: PUSH
15867: LD_INT 2
15869: EQUAL
15870: IFFALSE 15879
// SetAchievement ( ACH_HEAVYGUN ) ;
15872: LD_STRING ACH_HEAVYGUN
15874: PPUSH
15875: CALL_OW 543
// PrepareMacmillanSquad ;
15879: CALL 4900 0 0
// wait ( 0 0$1 ) ;
15883: LD_INT 35
15885: PPUSH
15886: CALL_OW 67
// DialogueOn ;
15890: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
15894: LD_EXP 14
15898: PPUSH
15899: CALL_OW 87
// dwait ( 0 0$2 ) ;
15903: LD_INT 70
15905: PPUSH
15906: CALL_OW 68
// DialogueOff ;
15910: CALL_OW 7
// wait ( 0 0$10 ) ;
15914: LD_INT 350
15916: PPUSH
15917: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
15921: LD_INT 1
15923: PPUSH
15924: CALL_OW 427
// p := 0 ;
15928: LD_ADDR_VAR 0 2
15932: PUSH
15933: LD_INT 0
15935: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15936: LD_INT 35
15938: PPUSH
15939: CALL_OW 67
// p := Inc ( p ) ;
15943: LD_ADDR_VAR 0 2
15947: PUSH
15948: LD_VAR 0 2
15952: PPUSH
15953: CALL 78252 0 1
15957: ST_TO_ADDR
// if p > 120 then
15958: LD_VAR 0 2
15962: PUSH
15963: LD_INT 120
15965: GREATER
15966: IFFALSE 15970
// exit ;
15968: GO 17193
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
15970: LD_EXP 14
15974: PPUSH
15975: LD_INT 15
15977: PPUSH
15978: CALL_OW 308
15982: PUSH
15983: LD_EXP 14
15987: PPUSH
15988: CALL_OW 310
15992: PPUSH
15993: LD_INT 15
15995: PPUSH
15996: CALL_OW 308
16000: OR
16001: PUSH
16002: LD_EXP 14
16006: PPUSH
16007: LD_EXP 27
16011: PPUSH
16012: CALL_OW 296
16016: PUSH
16017: LD_INT 10
16019: LESS
16020: OR
16021: PUSH
16022: LD_INT 22
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 2
16034: PUSH
16035: LD_INT 120
16037: PUSH
16038: LD_INT 106
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 120
16047: PUSH
16048: LD_INT 107
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: LIST
16059: PUSH
16060: LD_INT 91
16062: PUSH
16063: LD_EXP 14
16067: PUSH
16068: LD_INT 12
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: LIST
16080: PPUSH
16081: CALL_OW 69
16085: OR
16086: IFFALSE 15936
// DialogueOn ;
16088: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16092: LD_EXP 14
16096: PPUSH
16097: LD_STRING D3-JMM-1
16099: PPUSH
16100: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16104: LD_EXP 16
16108: PPUSH
16109: CALL_OW 302
16113: PUSH
16114: LD_EXP 13
16118: PUSH
16119: LD_INT 1
16121: EQUAL
16122: AND
16123: IFFALSE 16139
// Say ( Donaldson , D3-Don-1 ) else
16125: LD_EXP 16
16129: PPUSH
16130: LD_STRING D3-Don-1
16132: PPUSH
16133: CALL_OW 88
16137: GO 16235
// begin if gammaCommander = 1 then
16139: LD_EXP 13
16143: PUSH
16144: LD_INT 1
16146: EQUAL
16147: IFFALSE 16235
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16149: LD_INT 22
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 21
16161: PUSH
16162: LD_INT 1
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 23
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 120
16181: PUSH
16182: LD_INT 106
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 26
16191: PUSH
16192: LD_INT 1
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: PPUSH
16206: CALL_OW 69
16210: PPUSH
16211: LD_STRING D3-Sol1-1
16213: PPUSH
16214: LD_STRING 
16216: PPUSH
16217: CALL 19361 0 3
16221: IFFALSE 16235
// Say ( JMM , D3-JMM-2 ) ;
16223: LD_EXP 14
16227: PPUSH
16228: LD_STRING D3-JMM-2
16230: PPUSH
16231: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16235: LD_EXP 15
16239: PPUSH
16240: CALL_OW 302
16244: PUSH
16245: LD_EXP 13
16249: PUSH
16250: LD_INT 2
16252: EQUAL
16253: AND
16254: IFFALSE 16270
// Say ( Brown , D3-Brown-1 ) else
16256: LD_EXP 15
16260: PPUSH
16261: LD_STRING D3-Brown-1
16263: PPUSH
16264: CALL_OW 88
16268: GO 16366
// begin if gammaCommander = 2 then
16270: LD_EXP 13
16274: PUSH
16275: LD_INT 2
16277: EQUAL
16278: IFFALSE 16366
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
16280: LD_INT 22
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 21
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 23
16302: PUSH
16303: LD_INT 1
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 120
16312: PUSH
16313: LD_INT 106
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 26
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: PPUSH
16337: CALL_OW 69
16341: PPUSH
16342: LD_STRING D3-Sol1-1a
16344: PPUSH
16345: LD_STRING 
16347: PPUSH
16348: CALL 19361 0 3
16352: IFFALSE 16366
// Say ( JMM , D3-JMM-2 ) ;
16354: LD_EXP 14
16358: PPUSH
16359: LD_STRING D3-JMM-2
16361: PPUSH
16362: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
16366: LD_EXP 25
16370: PPUSH
16371: CALL_OW 302
16375: PUSH
16376: LD_EXP 13
16380: PUSH
16381: LD_INT 3
16383: EQUAL
16384: AND
16385: IFFALSE 16401
// Say ( Houten , D3-VanH-1 ) else
16387: LD_EXP 25
16391: PPUSH
16392: LD_STRING D3-VanH-1
16394: PPUSH
16395: CALL_OW 88
16399: GO 16497
// begin if gammaCommander = 3 then
16401: LD_EXP 13
16405: PUSH
16406: LD_INT 3
16408: EQUAL
16409: IFFALSE 16497
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
16411: LD_INT 22
16413: PUSH
16414: LD_INT 1
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 21
16423: PUSH
16424: LD_INT 1
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 23
16433: PUSH
16434: LD_INT 1
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 120
16443: PUSH
16444: LD_INT 106
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: LD_INT 26
16453: PUSH
16454: LD_INT 1
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: PPUSH
16468: CALL_OW 69
16472: PPUSH
16473: LD_STRING D3-Sol1-1b
16475: PPUSH
16476: LD_STRING 
16478: PPUSH
16479: CALL 19361 0 3
16483: IFFALSE 16497
// Say ( JMM , D3-JMM-2 ) ;
16485: LD_EXP 14
16489: PPUSH
16490: LD_STRING D3-JMM-2
16492: PPUSH
16493: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
16497: LD_EXP 27
16501: PPUSH
16502: CALL_OW 302
16506: IFFALSE 16534
// begin Say ( Joan , D3a-Joan-1 ) ;
16508: LD_EXP 27
16512: PPUSH
16513: LD_STRING D3a-Joan-1
16515: PPUSH
16516: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
16520: LD_EXP 14
16524: PPUSH
16525: LD_STRING D3a-JMM-1
16527: PPUSH
16528: CALL_OW 88
// end else
16532: GO 16968
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16534: LD_STRING 06_JoanStatus_1
16536: PPUSH
16537: LD_INT 0
16539: PPUSH
16540: CALL_OW 30
16544: PUSH
16545: LD_INT 1
16547: EQUAL
16548: IFFALSE 16968
// begin Say ( JMM , D3b-JMM-1 ) ;
16550: LD_EXP 14
16554: PPUSH
16555: LD_STRING D3b-JMM-1
16557: PPUSH
16558: CALL_OW 88
// dialog := false ;
16562: LD_ADDR_VAR 0 1
16566: PUSH
16567: LD_INT 0
16569: ST_TO_ADDR
// if gammaCommander = 1 then
16570: LD_EXP 13
16574: PUSH
16575: LD_INT 1
16577: EQUAL
16578: IFFALSE 16689
// if IsOK ( Donaldson ) then
16580: LD_EXP 16
16584: PPUSH
16585: CALL_OW 302
16589: IFFALSE 16611
// dialog := Say ( Donaldson , D3b-Don-1 ) else
16591: LD_ADDR_VAR 0 1
16595: PUSH
16596: LD_EXP 16
16600: PPUSH
16601: LD_STRING D3b-Don-1
16603: PPUSH
16604: CALL_OW 88
16608: ST_TO_ADDR
16609: GO 16689
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: LD_INT 22
16618: PUSH
16619: LD_INT 1
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 21
16628: PUSH
16629: LD_INT 1
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 23
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 120
16648: PUSH
16649: LD_INT 106
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 26
16658: PUSH
16659: LD_INT 1
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: PPUSH
16673: CALL_OW 69
16677: PPUSH
16678: LD_STRING D3b-Sol1-1
16680: PPUSH
16681: LD_STRING 
16683: PPUSH
16684: CALL 19361 0 3
16688: ST_TO_ADDR
// if gammaCommander = 2 then
16689: LD_EXP 13
16693: PUSH
16694: LD_INT 2
16696: EQUAL
16697: IFFALSE 16808
// if IsOk ( Brown ) then
16699: LD_EXP 15
16703: PPUSH
16704: CALL_OW 302
16708: IFFALSE 16730
// dialog := Say ( Brown , D3b-Brown-1 ) else
16710: LD_ADDR_VAR 0 1
16714: PUSH
16715: LD_EXP 15
16719: PPUSH
16720: LD_STRING D3b-Brown-1
16722: PPUSH
16723: CALL_OW 88
16727: ST_TO_ADDR
16728: GO 16808
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16730: LD_ADDR_VAR 0 1
16734: PUSH
16735: LD_INT 22
16737: PUSH
16738: LD_INT 1
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: LD_INT 21
16747: PUSH
16748: LD_INT 1
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 23
16757: PUSH
16758: LD_INT 1
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 120
16767: PUSH
16768: LD_INT 106
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 26
16777: PUSH
16778: LD_INT 1
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL_OW 69
16796: PPUSH
16797: LD_STRING D3b-Sol1-1
16799: PPUSH
16800: LD_STRING 
16802: PPUSH
16803: CALL 19361 0 3
16807: ST_TO_ADDR
// if gammaCommander = 3 then
16808: LD_EXP 13
16812: PUSH
16813: LD_INT 3
16815: EQUAL
16816: IFFALSE 16927
// if IsOk ( Houten ) then
16818: LD_EXP 25
16822: PPUSH
16823: CALL_OW 302
16827: IFFALSE 16849
// dialog := Say ( Houten , D3b-VanH-1 ) else
16829: LD_ADDR_VAR 0 1
16833: PUSH
16834: LD_EXP 25
16838: PPUSH
16839: LD_STRING D3b-VanH-1
16841: PPUSH
16842: CALL_OW 88
16846: ST_TO_ADDR
16847: GO 16927
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16849: LD_ADDR_VAR 0 1
16853: PUSH
16854: LD_INT 22
16856: PUSH
16857: LD_INT 1
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 21
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 23
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 120
16886: PUSH
16887: LD_INT 106
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 26
16896: PUSH
16897: LD_INT 1
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: PPUSH
16911: CALL_OW 69
16915: PPUSH
16916: LD_STRING D3b-Sol1-1
16918: PPUSH
16919: LD_STRING 
16921: PPUSH
16922: CALL 19361 0 3
16926: ST_TO_ADDR
// if dialog then
16927: LD_VAR 0 1
16931: IFFALSE 16968
// begin Say ( JMM , D3b-JMM-2 ) ;
16933: LD_EXP 14
16937: PPUSH
16938: LD_STRING D3b-JMM-2
16940: PPUSH
16941: CALL_OW 88
// if IsOK ( Lisa ) then
16945: LD_EXP 19
16949: PPUSH
16950: CALL_OW 302
16954: IFFALSE 16968
// Say ( Lisa , D3b-Lisa-2 ) ;
16956: LD_EXP 19
16960: PPUSH
16961: LD_STRING D3b-Lisa-2
16963: PPUSH
16964: CALL_OW 88
// end ; end ; end ; if not seenComputer then
16968: LD_EXP 7
16972: NOT
16973: IFFALSE 16981
// begin DialogueOff ;
16975: CALL_OW 7
// exit ;
16979: GO 17193
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
16981: LD_INT 22
16983: PUSH
16984: LD_INT 1
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 21
16993: PUSH
16994: LD_INT 1
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 23
17003: PUSH
17004: LD_INT 1
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 2
17013: PUSH
17014: LD_INT 120
17016: PUSH
17017: LD_INT 106
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 120
17026: PUSH
17027: LD_INT 107
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: LIST
17038: PUSH
17039: LD_INT 26
17041: PUSH
17042: LD_INT 1
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: PPUSH
17056: CALL_OW 69
17060: PPUSH
17061: LD_STRING DCa-Sol1-1
17063: PPUSH
17064: LD_STRING 
17066: PPUSH
17067: CALL 19361 0 3
17071: IFFALSE 17085
// Say ( JMM , DCb-JMM-1 ) ;
17073: LD_EXP 14
17077: PPUSH
17078: LD_STRING DCb-JMM-1
17080: PPUSH
17081: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17085: LD_INT 22
17087: PUSH
17088: LD_INT 1
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 21
17097: PUSH
17098: LD_INT 1
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 23
17107: PUSH
17108: LD_INT 1
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 2
17117: PUSH
17118: LD_INT 120
17120: PUSH
17121: LD_INT 106
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 120
17130: PUSH
17131: LD_INT 107
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 26
17145: PUSH
17146: LD_INT 1
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: PPUSH
17160: CALL_OW 69
17164: PPUSH
17165: LD_STRING DCb-Sol1-1
17167: PPUSH
17168: LD_STRING 
17170: PPUSH
17171: CALL 19361 0 3
17175: IFFALSE 17189
// Say ( JMM , DCb-JMM-2 ) ;
17177: LD_EXP 14
17181: PPUSH
17182: LD_STRING DCb-JMM-2
17184: PPUSH
17185: CALL_OW 88
// DialogueOff ;
17189: CALL_OW 7
// end ;
17193: PPOPN 2
17195: END
// export function DialogSeenComputer ( un ) ; begin
17196: LD_INT 0
17198: PPUSH
// if jmmArrival then
17199: LD_EXP 8
17203: IFFALSE 17207
// exit ;
17205: GO 17273
// CenterOnUnits ( un ) ;
17207: LD_VAR 0 1
17211: PPUSH
17212: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17216: LD_INT 22
17218: PUSH
17219: LD_INT 1
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 2
17228: PUSH
17229: LD_INT 120
17231: PUSH
17232: LD_INT 106
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 120
17241: PUSH
17242: LD_INT 107
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PPUSH
17258: CALL_OW 69
17262: PPUSH
17263: LD_STRING DC-Sol1-1
17265: PPUSH
17266: LD_STRING DC-FSol1-1
17268: PPUSH
17269: CALL 19361 0 3
// end ;
17273: LD_VAR 0 2
17277: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
17278: LD_EXP 8
17282: PUSH
17283: LD_OWVAR 1
17287: PUSH
17288: LD_INT 48300
17290: GREATEREQUAL
17291: AND
17292: PUSH
17293: LD_EXP 14
17297: PPUSH
17298: CALL_OW 302
17302: AND
17303: IFFALSE 17766
17305: GO 17307
17307: DISABLE
// begin wait ( 2 2$00 ) ;
17308: LD_INT 4200
17310: PPUSH
17311: CALL_OW 67
// DialogueOn ;
17315: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17319: LD_EXP 30
17323: PPUSH
17324: LD_STRING D4-Pow-1
17326: PPUSH
17327: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17331: LD_EXP 14
17335: PPUSH
17336: LD_STRING D4-JMM-1
17338: PPUSH
17339: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17343: LD_EXP 30
17347: PPUSH
17348: LD_STRING D4-Pow-2
17350: PPUSH
17351: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17355: LD_EXP 14
17359: PPUSH
17360: LD_STRING D4-JMM-2
17362: PPUSH
17363: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
17367: LD_EXP 30
17371: PPUSH
17372: LD_STRING D4-Pow-3
17374: PPUSH
17375: CALL_OW 94
// DialogueOff ;
17379: CALL_OW 7
// wait ( 1 1$00 ) ;
17383: LD_INT 2100
17385: PPUSH
17386: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 427
// wait ( 7 7$30 ) ;
17397: LD_INT 15750
17399: PPUSH
17400: CALL_OW 67
// DialogueOn ;
17404: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
17408: LD_EXP 30
17412: PPUSH
17413: LD_STRING D4a-Pow-1
17415: PPUSH
17416: CALL_OW 94
// DialogueOff ;
17420: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
17424: LD_INT 1
17426: PPUSH
17427: CALL_OW 427
// SikorskiCounter ;
17431: CALL 19145 0 0
// PrepareSikorsky ;
17435: CALL 6322 0 0
// CenterNowOnUnits ( Sikorski ) ;
17439: LD_EXP 28
17443: PPUSH
17444: CALL_OW 87
// DialogueOn ;
17448: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
17452: LD_EXP 28
17456: PPUSH
17457: LD_STRING D5-Sik-1
17459: PPUSH
17460: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 then
17464: LD_INT 11
17466: PPUSH
17467: LD_INT 22
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PPUSH
17477: CALL_OW 70
17481: PUSH
17482: LD_INT 1
17484: GREATER
17485: IFFALSE 17537
// begin Say ( JMM , D5-JMM-1 ) ;
17487: LD_EXP 14
17491: PPUSH
17492: LD_STRING D5-JMM-1
17494: PPUSH
17495: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
17499: LD_EXP 28
17503: PPUSH
17504: LD_STRING D7a-Sik-1
17506: PPUSH
17507: CALL_OW 88
// DialogueOff ;
17511: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17515: LD_STRING M2
17517: PPUSH
17518: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
17522: LD_INT 1
17524: PPUSH
17525: CALL_OW 427
// SikorskiAttack ;
17529: CALL 7670 0 0
// exit ;
17533: GO 17766
// end else
17535: GO 17582
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
17537: LD_INT 15
17539: PPUSH
17540: LD_INT 81
17542: PUSH
17543: LD_INT 1
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PPUSH
17550: CALL_OW 70
17554: IFFALSE 17570
// Say ( JMM , D5-JMM-1b ) else
17556: LD_EXP 14
17560: PPUSH
17561: LD_STRING D5-JMM-1b
17563: PPUSH
17564: CALL_OW 88
17568: GO 17582
// Say ( JMM , D5-JMM-1a ) ;
17570: LD_EXP 14
17574: PPUSH
17575: LD_STRING D5-JMM-1a
17577: PPUSH
17578: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
17582: LD_EXP 28
17586: PPUSH
17587: LD_STRING D5-Sik-2
17589: PPUSH
17590: CALL_OW 88
// case Query ( QSikorski ) of 1 :
17594: LD_STRING QSikorski
17596: PPUSH
17597: CALL_OW 97
17601: PUSH
17602: LD_INT 1
17604: DOUBLE
17605: EQUAL
17606: IFTRUE 17610
17608: GO 17633
17610: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
17611: LD_EXP 28
17615: PPUSH
17616: LD_STRING D5a-Sik-1
17618: PPUSH
17619: CALL_OW 88
// sikorskiWait := 1 1$00 ;
17623: LD_ADDR_EXP 4
17627: PUSH
17628: LD_INT 2100
17630: ST_TO_ADDR
// end ; 2 :
17631: GO 17720
17633: LD_INT 2
17635: DOUBLE
17636: EQUAL
17637: IFTRUE 17641
17639: GO 17664
17641: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
17642: LD_EXP 28
17646: PPUSH
17647: LD_STRING D5b-Sik-1
17649: PPUSH
17650: CALL_OW 88
// sikorskiWait := 5 5$00 ;
17654: LD_ADDR_EXP 4
17658: PUSH
17659: LD_INT 10500
17661: ST_TO_ADDR
// end ; 3 :
17662: GO 17720
17664: LD_INT 3
17666: DOUBLE
17667: EQUAL
17668: IFTRUE 17672
17670: GO 17719
17672: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
17673: LD_EXP 28
17677: PPUSH
17678: LD_STRING D5c-Sik-1
17680: PPUSH
17681: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
17685: LD_EXP 14
17689: PPUSH
17690: LD_STRING D5c-JMM-1
17692: PPUSH
17693: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
17697: LD_EXP 28
17701: PPUSH
17702: LD_STRING D5c-Sik-2
17704: PPUSH
17705: CALL_OW 88
// sikorskiWait := 5 5$00 ;
17709: LD_ADDR_EXP 4
17713: PUSH
17714: LD_INT 10500
17716: ST_TO_ADDR
// end ; end ;
17717: GO 17720
17719: POP
// DialogueOff ;
17720: CALL_OW 7
// SikorskiWaitCounter ;
17724: CALL 19208 0 0
// DialogueOn ;
17728: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
17732: LD_EXP 28
17736: PPUSH
17737: LD_STRING D6-Sik-1
17739: PPUSH
17740: CALL_OW 88
// DialogueOff ;
17744: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17748: LD_STRING M2
17750: PPUSH
17751: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
17755: LD_INT 1
17757: PPUSH
17758: CALL_OW 427
// SikorskiAttack ;
17762: CALL 7670 0 0
// end ;
17766: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
17767: LD_INT 11
17769: PPUSH
17770: LD_INT 22
17772: PUSH
17773: LD_INT 4
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PPUSH
17780: CALL_OW 70
17784: PUSH
17785: LD_INT 2
17787: GREATER
17788: IFFALSE 17981
17790: GO 17792
17792: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
17793: LD_EXP 28
17797: PPUSH
17798: LD_STRING D7-Sik-1
17800: PPUSH
17801: CALL_OW 88
// wait ( 0 0$10 ) ;
17805: LD_INT 350
17807: PPUSH
17808: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
17812: LD_EXP 14
17816: PPUSH
17817: LD_INT 11
17819: PPUSH
17820: CALL_OW 308
17824: PUSH
17825: LD_EXP 14
17829: PPUSH
17830: CALL_OW 310
17834: PPUSH
17835: LD_INT 11
17837: PPUSH
17838: CALL_OW 308
17842: OR
17843: IFFALSE 17867
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17845: LD_EXP 28
17849: PPUSH
17850: LD_STRING D7a-Sik-1
17852: PPUSH
17853: CALL_OW 88
// sikorskiStatus := 1 ;
17857: LD_ADDR_EXP 9
17861: PUSH
17862: LD_INT 1
17864: ST_TO_ADDR
// end else
17865: GO 17887
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17867: LD_EXP 28
17871: PPUSH
17872: LD_STRING D7b-Sik-1
17874: PPUSH
17875: CALL_OW 88
// sikorskiStatus := 0 ;
17879: LD_ADDR_EXP 9
17883: PUSH
17884: LD_INT 0
17886: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
17887: LD_INT 1575
17889: PPUSH
17890: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
17894: LD_EXP 14
17898: PPUSH
17899: LD_INT 11
17901: PPUSH
17902: CALL_OW 308
17906: PUSH
17907: LD_EXP 14
17911: PPUSH
17912: CALL_OW 310
17916: PPUSH
17917: LD_INT 11
17919: PPUSH
17920: CALL_OW 308
17924: OR
17925: PUSH
17926: LD_EXP 14
17930: PPUSH
17931: CALL_OW 302
17935: NOT
17936: OR
17937: IFFALSE 17961
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17939: LD_EXP 28
17943: PPUSH
17944: LD_STRING D7a-Sik-1
17946: PPUSH
17947: CALL_OW 88
// sikorskiStatus := 1 ;
17951: LD_ADDR_EXP 9
17955: PUSH
17956: LD_INT 1
17958: ST_TO_ADDR
// end else
17959: GO 17981
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17961: LD_EXP 28
17965: PPUSH
17966: LD_STRING D7b-Sik-1
17968: PPUSH
17969: CALL_OW 88
// sikorskiStatus := 0 ;
17973: LD_ADDR_EXP 9
17977: PUSH
17978: LD_INT 0
17980: ST_TO_ADDR
// end ; end ;
17981: END
// export function SikorskiKilledInAction ; begin
17982: LD_INT 0
17984: PPUSH
// wait ( 0 0$2 ) ;
17985: LD_INT 70
17987: PPUSH
17988: CALL_OW 67
// DialogueOn ;
17992: CALL_OW 6
// dwait ( 0 0$1 ) ;
17996: LD_INT 35
17998: PPUSH
17999: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18003: LD_EXP 30
18007: PPUSH
18008: LD_STRING D8b-Pow-1
18010: PPUSH
18011: CALL_OW 94
// YouLost ( Dismissed ) ;
18015: LD_STRING Dismissed
18017: PPUSH
18018: CALL_OW 104
// DialogueOff ;
18022: CALL_OW 7
// end ;
18026: LD_VAR 0 1
18030: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18031: LD_EXP 8
18035: PUSH
18036: LD_INT 28
18038: PPUSH
18039: CALL_OW 301
18043: AND
18044: PUSH
18045: LD_EXP 32
18049: PPUSH
18050: CALL_OW 301
18054: AND
18055: PUSH
18056: LD_INT 22
18058: PUSH
18059: LD_INT 3
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 50
18068: PUSH
18069: EMPTY
18070: LIST
18071: PUSH
18072: LD_INT 30
18074: PUSH
18075: LD_INT 5
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: LIST
18086: PPUSH
18087: CALL_OW 69
18091: PUSH
18092: LD_INT 0
18094: EQUAL
18095: AND
18096: IFFALSE 19142
18098: GO 18100
18100: DISABLE
18101: LD_INT 0
18103: PPUSH
18104: PPUSH
18105: PPUSH
// begin Video ( true ) ;
18106: LD_INT 1
18108: PPUSH
18109: CALL 76863 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18113: LD_INT 104
18115: PPUSH
18116: LD_INT 108
18118: PPUSH
18119: LD_INT 1
18121: PPUSH
18122: LD_INT 36
18124: NEG
18125: PPUSH
18126: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18130: LD_INT 104
18132: PPUSH
18133: LD_INT 108
18135: PPUSH
18136: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18140: LD_ADDR_VAR 0 2
18144: PUSH
18145: LD_INT 22
18147: PUSH
18148: LD_INT 1
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 21
18157: PUSH
18158: LD_INT 1
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 3
18167: PUSH
18168: LD_INT 24
18170: PUSH
18171: LD_INT 249
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: PPUSH
18187: CALL_OW 69
18191: ST_TO_ADDR
// if tmp then
18192: LD_VAR 0 2
18196: IFFALSE 18227
// for i in tmp do
18198: LD_ADDR_VAR 0 1
18202: PUSH
18203: LD_VAR 0 2
18207: PUSH
18208: FOR_IN
18209: IFFALSE 18225
// SetLives ( i , 249 ) ;
18211: LD_VAR 0 1
18215: PPUSH
18216: LD_INT 249
18218: PPUSH
18219: CALL_OW 234
18223: GO 18208
18225: POP
18226: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18227: LD_ADDR_VAR 0 1
18231: PUSH
18232: LD_INT 22
18234: PUSH
18235: LD_INT 3
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 21
18244: PUSH
18245: LD_INT 1
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PPUSH
18256: CALL_OW 69
18260: PUSH
18261: FOR_IN
18262: IFFALSE 18305
// begin ComExit ( i ) ;
18264: LD_VAR 0 1
18268: PPUSH
18269: CALL 77289 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
18273: LD_VAR 0 1
18277: PPUSH
18278: LD_INT 131
18280: PPUSH
18281: LD_INT 127
18283: PPUSH
18284: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
18288: LD_VAR 0 1
18292: PPUSH
18293: LD_INT 141
18295: PPUSH
18296: LD_INT 147
18298: PPUSH
18299: CALL_OW 171
// end ;
18303: GO 18261
18305: POP
18306: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
18307: LD_INT 81
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 3
18319: PUSH
18320: LD_INT 21
18322: PUSH
18323: LD_INT 3
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PPUSH
18338: CALL_OW 69
18342: PPUSH
18343: LD_INT 131
18345: PPUSH
18346: LD_INT 127
18348: PPUSH
18349: CALL_OW 174
// wait ( 0 0$08 ) ;
18353: LD_INT 280
18355: PPUSH
18356: CALL_OW 67
// DialogueOn ;
18360: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
18364: LD_EXP 9
18368: PUSH
18369: LD_INT 1
18371: EQUAL
18372: PUSH
18373: LD_EXP 28
18377: PPUSH
18378: CALL_OW 302
18382: AND
18383: IFFALSE 18397
// Say ( Sikorski , D9-Sik-1 ) ;
18385: LD_EXP 28
18389: PPUSH
18390: LD_STRING D9-Sik-1
18392: PPUSH
18393: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
18397: LD_INT 22
18399: PUSH
18400: LD_INT 4
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PPUSH
18407: CALL_OW 69
18411: PUSH
18412: LD_INT 0
18414: EQUAL
18415: PUSH
18416: LD_EXP 3
18420: AND
18421: IFFALSE 18430
// SetAchievement ( ACH_BLITZKRIEG ) ;
18423: LD_STRING ACH_BLITZKRIEG
18425: PPUSH
18426: CALL_OW 543
// if tick <= 45 45$10 then
18430: LD_OWVAR 1
18434: PUSH
18435: LD_INT 94850
18437: LESSEQUAL
18438: IFFALSE 18454
// begin wait ( 3 ) ;
18440: LD_INT 3
18442: PPUSH
18443: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
18447: LD_STRING ACH_ASPEED_8
18449: PPUSH
18450: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
18454: LD_STRING med1
18456: PPUSH
18457: LD_INT 1
18459: PPUSH
18460: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
18464: LD_STRING med2
18466: PPUSH
18467: LD_INT 1
18469: PPUSH
18470: CALL_OW 101
// if sikorskiStatus = 1 then
18474: LD_EXP 9
18478: PUSH
18479: LD_INT 1
18481: EQUAL
18482: IFFALSE 18496
// AddMedal ( perfect , 1 ) else
18484: LD_STRING perfect
18486: PPUSH
18487: LD_INT 1
18489: PPUSH
18490: CALL_OW 101
18494: GO 18507
// AddMedal ( perfect , - 1 ) ;
18496: LD_STRING perfect
18498: PPUSH
18499: LD_INT 1
18501: NEG
18502: PPUSH
18503: CALL_OW 101
// if Difficulty >= 3 then
18507: LD_OWVAR 67
18511: PUSH
18512: LD_INT 3
18514: GREATEREQUAL
18515: IFFALSE 18527
// SetAchievementEX ( ACH_AMER , 8 ) ;
18517: LD_STRING ACH_AMER
18519: PPUSH
18520: LD_INT 8
18522: PPUSH
18523: CALL_OW 564
// GiveMedals ( Main ) ;
18527: LD_STRING Main
18529: PPUSH
18530: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18534: LD_INT 22
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 23
18546: PUSH
18547: LD_INT 1
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 21
18556: PUSH
18557: LD_INT 1
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: LIST
18568: PPUSH
18569: CALL_OW 69
18573: PPUSH
18574: CALL_OW 43
// prefix := 08_ ;
18578: LD_ADDR_VAR 0 3
18582: PUSH
18583: LD_STRING 08_
18585: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
18586: LD_EXP 14
18590: PPUSH
18591: LD_VAR 0 3
18595: PUSH
18596: LD_STRING JMM
18598: STR
18599: PPUSH
18600: CALL_OW 38
// if IsLive ( Brown ) then
18604: LD_EXP 15
18608: PPUSH
18609: CALL_OW 300
18613: IFFALSE 18633
// SaveCharacters ( Brown , prefix & Brown ) ;
18615: LD_EXP 15
18619: PPUSH
18620: LD_VAR 0 3
18624: PUSH
18625: LD_STRING Brown
18627: STR
18628: PPUSH
18629: CALL_OW 38
// if IsLive ( Donaldson ) then
18633: LD_EXP 16
18637: PPUSH
18638: CALL_OW 300
18642: IFFALSE 18662
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
18644: LD_EXP 16
18648: PPUSH
18649: LD_VAR 0 3
18653: PUSH
18654: LD_STRING Donaldson
18656: STR
18657: PPUSH
18658: CALL_OW 38
// if IsLive ( Bobby ) then
18662: LD_EXP 17
18666: PPUSH
18667: CALL_OW 300
18671: IFFALSE 18691
// SaveCharacters ( Bobby , prefix & Bobby ) ;
18673: LD_EXP 17
18677: PPUSH
18678: LD_VAR 0 3
18682: PUSH
18683: LD_STRING Bobby
18685: STR
18686: PPUSH
18687: CALL_OW 38
// if IsLive ( Cyrus ) then
18691: LD_EXP 18
18695: PPUSH
18696: CALL_OW 300
18700: IFFALSE 18720
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
18702: LD_EXP 18
18706: PPUSH
18707: LD_VAR 0 3
18711: PUSH
18712: LD_STRING Cyrus
18714: STR
18715: PPUSH
18716: CALL_OW 38
// if IsLive ( Lisa ) then
18720: LD_EXP 19
18724: PPUSH
18725: CALL_OW 300
18729: IFFALSE 18749
// SaveCharacters ( Lisa , prefix & Lisa ) ;
18731: LD_EXP 19
18735: PPUSH
18736: LD_VAR 0 3
18740: PUSH
18741: LD_STRING Lisa
18743: STR
18744: PPUSH
18745: CALL_OW 38
// if IsLive ( Frank ) then
18749: LD_EXP 20
18753: PPUSH
18754: CALL_OW 300
18758: IFFALSE 18778
// SaveCharacters ( Frank , prefix & Frank ) ;
18760: LD_EXP 20
18764: PPUSH
18765: LD_VAR 0 3
18769: PUSH
18770: LD_STRING Frank
18772: STR
18773: PPUSH
18774: CALL_OW 38
// if IsLive ( Gladstone ) then
18778: LD_EXP 21
18782: PPUSH
18783: CALL_OW 300
18787: IFFALSE 18807
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
18789: LD_EXP 21
18793: PPUSH
18794: LD_VAR 0 3
18798: PUSH
18799: LD_STRING Gladstone
18801: STR
18802: PPUSH
18803: CALL_OW 38
// if IsLive ( Kikuchi ) then
18807: LD_EXP 22
18811: PPUSH
18812: CALL_OW 300
18816: IFFALSE 18836
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
18818: LD_EXP 22
18822: PPUSH
18823: LD_VAR 0 3
18827: PUSH
18828: LD_STRING Kikuchi
18830: STR
18831: PPUSH
18832: CALL_OW 38
// if IsLive ( Denis ) then
18836: LD_EXP 26
18840: PPUSH
18841: CALL_OW 300
18845: IFFALSE 18865
// SaveCharacters ( Denis , prefix & Denis ) ;
18847: LD_EXP 26
18851: PPUSH
18852: LD_VAR 0 3
18856: PUSH
18857: LD_STRING Denis
18859: STR
18860: PPUSH
18861: CALL_OW 38
// if IsLive ( Joan ) then
18865: LD_EXP 27
18869: PPUSH
18870: CALL_OW 300
18874: IFFALSE 18896
// SaveCharacters ( Joan , prefix & Joan ) else
18876: LD_EXP 27
18880: PPUSH
18881: LD_VAR 0 3
18885: PUSH
18886: LD_STRING Joan
18888: STR
18889: PPUSH
18890: CALL_OW 38
18894: GO 18903
// DeleteCharacters ( Joan ) ;
18896: LD_STRING Joan
18898: PPUSH
18899: CALL_OW 40
// if IsLive ( Khatam ) then
18903: LD_EXP 23
18907: PPUSH
18908: CALL_OW 300
18912: IFFALSE 18932
// SaveCharacters ( Khatam , prefix & Khatam ) ;
18914: LD_EXP 23
18918: PPUSH
18919: LD_VAR 0 3
18923: PUSH
18924: LD_STRING Khatam
18926: STR
18927: PPUSH
18928: CALL_OW 38
// if IsLive ( Houten ) then
18932: LD_EXP 25
18936: PPUSH
18937: CALL_OW 300
18941: IFFALSE 18961
// SaveCharacters ( Houten , prefix & Houten ) ;
18943: LD_EXP 25
18947: PPUSH
18948: LD_VAR 0 3
18952: PUSH
18953: LD_STRING Houten
18955: STR
18956: PPUSH
18957: CALL_OW 38
// if IsLive ( Mike ) then
18961: LD_EXP 24
18965: PPUSH
18966: CALL_OW 300
18970: IFFALSE 18990
// SaveCharacters ( Mike , prefix & Mike ) ;
18972: LD_EXP 24
18976: PPUSH
18977: LD_VAR 0 3
18981: PUSH
18982: LD_STRING Mike
18984: STR
18985: PPUSH
18986: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
18990: LD_INT 22
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 21
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 23
19012: PUSH
19013: LD_INT 1
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: PPUSH
19025: CALL_OW 69
19029: PUSH
19030: LD_EXP 14
19034: PUSH
19035: LD_EXP 15
19039: PUSH
19040: LD_EXP 16
19044: PUSH
19045: LD_EXP 17
19049: PUSH
19050: LD_EXP 18
19054: PUSH
19055: LD_EXP 19
19059: PUSH
19060: LD_EXP 20
19064: PUSH
19065: LD_EXP 21
19069: PUSH
19070: LD_EXP 22
19074: PUSH
19075: LD_EXP 26
19079: PUSH
19080: LD_EXP 27
19084: PUSH
19085: LD_EXP 25
19089: PUSH
19090: LD_EXP 23
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: DIFF
19110: PPUSH
19111: LD_STRING 08_other_survivors
19113: PPUSH
19114: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19118: LD_INT 15
19120: PPUSH
19121: CALL 7144 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19125: LD_EXP 10
19129: NOT
19130: PPUSH
19131: LD_STRING 08_SikorskiStatus
19133: PPUSH
19134: CALL_OW 39
// YouWin ;
19138: CALL_OW 103
// end ; end_of_file
19142: PPOPN 3
19144: END
// export function SikorskiCounter ; begin
19145: LD_INT 0
19147: PPUSH
// repeat wait ( 0 0$1 ) ;
19148: LD_INT 35
19150: PPUSH
19151: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
19155: LD_ADDR_OWVAR 47
19159: PUSH
19160: LD_STRING #Am08-2
19162: PUSH
19163: LD_EXP 3
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
19172: LD_ADDR_EXP 3
19176: PUSH
19177: LD_EXP 3
19181: PUSH
19182: LD_INT 35
19184: MINUS
19185: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
19186: LD_EXP 3
19190: PUSH
19191: LD_INT 0
19193: EQUAL
19194: IFFALSE 19148
// display_strings := [ ] ;
19196: LD_ADDR_OWVAR 47
19200: PUSH
19201: EMPTY
19202: ST_TO_ADDR
// end ;
19203: LD_VAR 0 1
19207: RET
// export function SikorskiWaitCounter ; begin
19208: LD_INT 0
19210: PPUSH
// repeat wait ( 0 0$1 ) ;
19211: LD_INT 35
19213: PPUSH
19214: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
19218: LD_ADDR_OWVAR 47
19222: PUSH
19223: LD_STRING #Am08-1
19225: PUSH
19226: LD_EXP 4
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
19235: LD_ADDR_EXP 4
19239: PUSH
19240: LD_EXP 4
19244: PUSH
19245: LD_INT 35
19247: MINUS
19248: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
19249: LD_EXP 4
19253: PUSH
19254: LD_INT 0
19256: EQUAL
19257: IFFALSE 19211
// display_strings := [ ] ;
19259: LD_ADDR_OWVAR 47
19263: PUSH
19264: EMPTY
19265: ST_TO_ADDR
// end ; end_of_file
19266: LD_VAR 0 1
19270: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
19271: LD_EXP 3
19275: IFFALSE 19315
19277: GO 19279
19279: DISABLE
// begin enable ;
19280: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
19281: LD_INT 14
19283: PPUSH
19284: CALL_OW 435
19288: PUSH
19289: LD_INT 10
19291: LESS
19292: IFFALSE 19315
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
19294: LD_INT 1
19296: PPUSH
19297: LD_INT 5
19299: PPUSH
19300: CALL_OW 12
19304: PPUSH
19305: LD_INT 14
19307: PPUSH
19308: LD_INT 1
19310: PPUSH
19311: CALL_OW 55
// end ;
19315: END
// every 0 0$55 trigger sikorskiArriveCounter do
19316: LD_EXP 3
19320: IFFALSE 19360
19322: GO 19324
19324: DISABLE
// begin enable ;
19325: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
19326: LD_INT 13
19328: PPUSH
19329: CALL_OW 435
19333: PUSH
19334: LD_INT 10
19336: LESS
19337: IFFALSE 19360
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
19339: LD_INT 1
19341: PPUSH
19342: LD_INT 5
19344: PPUSH
19345: CALL_OW 12
19349: PPUSH
19350: LD_INT 13
19352: PPUSH
19353: LD_INT 1
19355: PPUSH
19356: CALL_OW 55
// end ; end_of_file
19360: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
19361: LD_INT 0
19363: PPUSH
19364: PPUSH
// if not units then
19365: LD_VAR 0 1
19369: NOT
19370: IFFALSE 19374
// exit ;
19372: GO 19499
// result := false ;
19374: LD_ADDR_VAR 0 4
19378: PUSH
19379: LD_INT 0
19381: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
19382: LD_ADDR_VAR 0 5
19386: PUSH
19387: LD_VAR 0 1
19391: PPUSH
19392: LD_INT 26
19394: PUSH
19395: LD_INT 1
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PPUSH
19402: CALL_OW 72
19406: ST_TO_ADDR
// if tmp then
19407: LD_VAR 0 5
19411: IFFALSE 19437
// result := Say ( tmp [ 1 ] , menDialog ) ;
19413: LD_ADDR_VAR 0 4
19417: PUSH
19418: LD_VAR 0 5
19422: PUSH
19423: LD_INT 1
19425: ARRAY
19426: PPUSH
19427: LD_VAR 0 2
19431: PPUSH
19432: CALL_OW 88
19436: ST_TO_ADDR
// if not result then
19437: LD_VAR 0 4
19441: NOT
19442: IFFALSE 19499
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
19444: LD_ADDR_VAR 0 5
19448: PUSH
19449: LD_VAR 0 1
19453: PPUSH
19454: LD_INT 26
19456: PUSH
19457: LD_INT 2
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PPUSH
19464: CALL_OW 72
19468: ST_TO_ADDR
// if tmp then
19469: LD_VAR 0 5
19473: IFFALSE 19499
// result := Say ( tmp [ 1 ] , womenDialog ) ;
19475: LD_ADDR_VAR 0 4
19479: PUSH
19480: LD_VAR 0 5
19484: PUSH
19485: LD_INT 1
19487: ARRAY
19488: PPUSH
19489: LD_VAR 0 3
19493: PPUSH
19494: CALL_OW 88
19498: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
19499: LD_VAR 0 4
19503: RET
// every 0 0$1 do
19504: GO 19506
19506: DISABLE
// begin enable ;
19507: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19508: LD_STRING updateTimer(
19510: PUSH
19511: LD_OWVAR 1
19515: STR
19516: PUSH
19517: LD_STRING );
19519: STR
19520: PPUSH
19521: CALL_OW 559
// end ;
19525: END
// export function SOS_MapStart ( ) ; begin
19526: LD_INT 0
19528: PPUSH
// if streamModeActive then
19529: LD_EXP 37
19533: IFFALSE 19542
// DefineStreamItems ( true ) ;
19535: LD_INT 1
19537: PPUSH
19538: CALL 21196 0 1
// UpdateFactoryWaypoints ( ) ;
19542: CALL 34057 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19546: CALL 34314 0 0
// end ;
19550: LD_VAR 0 1
19554: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19555: LD_INT 0
19557: PPUSH
// if p2 = hack_mode then
19558: LD_VAR 0 2
19562: PUSH
19563: LD_INT 100
19565: EQUAL
19566: IFFALSE 20569
// begin if not StreamModeActive then
19568: LD_EXP 37
19572: NOT
19573: IFFALSE 19583
// StreamModeActive := true ;
19575: LD_ADDR_EXP 37
19579: PUSH
19580: LD_INT 1
19582: ST_TO_ADDR
// if p3 = 0 then
19583: LD_VAR 0 3
19587: PUSH
19588: LD_INT 0
19590: EQUAL
19591: IFFALSE 19597
// InitStreamMode ;
19593: CALL 20732 0 0
// if p3 = 1 then
19597: LD_VAR 0 3
19601: PUSH
19602: LD_INT 1
19604: EQUAL
19605: IFFALSE 19615
// sRocket := true ;
19607: LD_ADDR_EXP 42
19611: PUSH
19612: LD_INT 1
19614: ST_TO_ADDR
// if p3 = 2 then
19615: LD_VAR 0 3
19619: PUSH
19620: LD_INT 2
19622: EQUAL
19623: IFFALSE 19633
// sSpeed := true ;
19625: LD_ADDR_EXP 41
19629: PUSH
19630: LD_INT 1
19632: ST_TO_ADDR
// if p3 = 3 then
19633: LD_VAR 0 3
19637: PUSH
19638: LD_INT 3
19640: EQUAL
19641: IFFALSE 19651
// sEngine := true ;
19643: LD_ADDR_EXP 43
19647: PUSH
19648: LD_INT 1
19650: ST_TO_ADDR
// if p3 = 4 then
19651: LD_VAR 0 3
19655: PUSH
19656: LD_INT 4
19658: EQUAL
19659: IFFALSE 19669
// sSpec := true ;
19661: LD_ADDR_EXP 40
19665: PUSH
19666: LD_INT 1
19668: ST_TO_ADDR
// if p3 = 5 then
19669: LD_VAR 0 3
19673: PUSH
19674: LD_INT 5
19676: EQUAL
19677: IFFALSE 19687
// sLevel := true ;
19679: LD_ADDR_EXP 44
19683: PUSH
19684: LD_INT 1
19686: ST_TO_ADDR
// if p3 = 6 then
19687: LD_VAR 0 3
19691: PUSH
19692: LD_INT 6
19694: EQUAL
19695: IFFALSE 19705
// sArmoury := true ;
19697: LD_ADDR_EXP 45
19701: PUSH
19702: LD_INT 1
19704: ST_TO_ADDR
// if p3 = 7 then
19705: LD_VAR 0 3
19709: PUSH
19710: LD_INT 7
19712: EQUAL
19713: IFFALSE 19723
// sRadar := true ;
19715: LD_ADDR_EXP 46
19719: PUSH
19720: LD_INT 1
19722: ST_TO_ADDR
// if p3 = 8 then
19723: LD_VAR 0 3
19727: PUSH
19728: LD_INT 8
19730: EQUAL
19731: IFFALSE 19741
// sBunker := true ;
19733: LD_ADDR_EXP 47
19737: PUSH
19738: LD_INT 1
19740: ST_TO_ADDR
// if p3 = 9 then
19741: LD_VAR 0 3
19745: PUSH
19746: LD_INT 9
19748: EQUAL
19749: IFFALSE 19759
// sHack := true ;
19751: LD_ADDR_EXP 48
19755: PUSH
19756: LD_INT 1
19758: ST_TO_ADDR
// if p3 = 10 then
19759: LD_VAR 0 3
19763: PUSH
19764: LD_INT 10
19766: EQUAL
19767: IFFALSE 19777
// sFire := true ;
19769: LD_ADDR_EXP 49
19773: PUSH
19774: LD_INT 1
19776: ST_TO_ADDR
// if p3 = 11 then
19777: LD_VAR 0 3
19781: PUSH
19782: LD_INT 11
19784: EQUAL
19785: IFFALSE 19795
// sRefresh := true ;
19787: LD_ADDR_EXP 50
19791: PUSH
19792: LD_INT 1
19794: ST_TO_ADDR
// if p3 = 12 then
19795: LD_VAR 0 3
19799: PUSH
19800: LD_INT 12
19802: EQUAL
19803: IFFALSE 19813
// sExp := true ;
19805: LD_ADDR_EXP 51
19809: PUSH
19810: LD_INT 1
19812: ST_TO_ADDR
// if p3 = 13 then
19813: LD_VAR 0 3
19817: PUSH
19818: LD_INT 13
19820: EQUAL
19821: IFFALSE 19831
// sDepot := true ;
19823: LD_ADDR_EXP 52
19827: PUSH
19828: LD_INT 1
19830: ST_TO_ADDR
// if p3 = 14 then
19831: LD_VAR 0 3
19835: PUSH
19836: LD_INT 14
19838: EQUAL
19839: IFFALSE 19849
// sFlag := true ;
19841: LD_ADDR_EXP 53
19845: PUSH
19846: LD_INT 1
19848: ST_TO_ADDR
// if p3 = 15 then
19849: LD_VAR 0 3
19853: PUSH
19854: LD_INT 15
19856: EQUAL
19857: IFFALSE 19867
// sKamikadze := true ;
19859: LD_ADDR_EXP 61
19863: PUSH
19864: LD_INT 1
19866: ST_TO_ADDR
// if p3 = 16 then
19867: LD_VAR 0 3
19871: PUSH
19872: LD_INT 16
19874: EQUAL
19875: IFFALSE 19885
// sTroll := true ;
19877: LD_ADDR_EXP 62
19881: PUSH
19882: LD_INT 1
19884: ST_TO_ADDR
// if p3 = 17 then
19885: LD_VAR 0 3
19889: PUSH
19890: LD_INT 17
19892: EQUAL
19893: IFFALSE 19903
// sSlow := true ;
19895: LD_ADDR_EXP 63
19899: PUSH
19900: LD_INT 1
19902: ST_TO_ADDR
// if p3 = 18 then
19903: LD_VAR 0 3
19907: PUSH
19908: LD_INT 18
19910: EQUAL
19911: IFFALSE 19921
// sLack := true ;
19913: LD_ADDR_EXP 64
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// if p3 = 19 then
19921: LD_VAR 0 3
19925: PUSH
19926: LD_INT 19
19928: EQUAL
19929: IFFALSE 19939
// sTank := true ;
19931: LD_ADDR_EXP 66
19935: PUSH
19936: LD_INT 1
19938: ST_TO_ADDR
// if p3 = 20 then
19939: LD_VAR 0 3
19943: PUSH
19944: LD_INT 20
19946: EQUAL
19947: IFFALSE 19957
// sRemote := true ;
19949: LD_ADDR_EXP 67
19953: PUSH
19954: LD_INT 1
19956: ST_TO_ADDR
// if p3 = 21 then
19957: LD_VAR 0 3
19961: PUSH
19962: LD_INT 21
19964: EQUAL
19965: IFFALSE 19975
// sPowell := true ;
19967: LD_ADDR_EXP 68
19971: PUSH
19972: LD_INT 1
19974: ST_TO_ADDR
// if p3 = 22 then
19975: LD_VAR 0 3
19979: PUSH
19980: LD_INT 22
19982: EQUAL
19983: IFFALSE 19993
// sTeleport := true ;
19985: LD_ADDR_EXP 71
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// if p3 = 23 then
19993: LD_VAR 0 3
19997: PUSH
19998: LD_INT 23
20000: EQUAL
20001: IFFALSE 20011
// sOilTower := true ;
20003: LD_ADDR_EXP 73
20007: PUSH
20008: LD_INT 1
20010: ST_TO_ADDR
// if p3 = 24 then
20011: LD_VAR 0 3
20015: PUSH
20016: LD_INT 24
20018: EQUAL
20019: IFFALSE 20029
// sShovel := true ;
20021: LD_ADDR_EXP 74
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// if p3 = 25 then
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 25
20036: EQUAL
20037: IFFALSE 20047
// sSheik := true ;
20039: LD_ADDR_EXP 75
20043: PUSH
20044: LD_INT 1
20046: ST_TO_ADDR
// if p3 = 26 then
20047: LD_VAR 0 3
20051: PUSH
20052: LD_INT 26
20054: EQUAL
20055: IFFALSE 20065
// sEarthquake := true ;
20057: LD_ADDR_EXP 77
20061: PUSH
20062: LD_INT 1
20064: ST_TO_ADDR
// if p3 = 27 then
20065: LD_VAR 0 3
20069: PUSH
20070: LD_INT 27
20072: EQUAL
20073: IFFALSE 20083
// sAI := true ;
20075: LD_ADDR_EXP 78
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// if p3 = 28 then
20083: LD_VAR 0 3
20087: PUSH
20088: LD_INT 28
20090: EQUAL
20091: IFFALSE 20101
// sCargo := true ;
20093: LD_ADDR_EXP 81
20097: PUSH
20098: LD_INT 1
20100: ST_TO_ADDR
// if p3 = 29 then
20101: LD_VAR 0 3
20105: PUSH
20106: LD_INT 29
20108: EQUAL
20109: IFFALSE 20119
// sDLaser := true ;
20111: LD_ADDR_EXP 82
20115: PUSH
20116: LD_INT 1
20118: ST_TO_ADDR
// if p3 = 30 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 30
20126: EQUAL
20127: IFFALSE 20137
// sExchange := true ;
20129: LD_ADDR_EXP 83
20133: PUSH
20134: LD_INT 1
20136: ST_TO_ADDR
// if p3 = 31 then
20137: LD_VAR 0 3
20141: PUSH
20142: LD_INT 31
20144: EQUAL
20145: IFFALSE 20155
// sFac := true ;
20147: LD_ADDR_EXP 84
20151: PUSH
20152: LD_INT 1
20154: ST_TO_ADDR
// if p3 = 32 then
20155: LD_VAR 0 3
20159: PUSH
20160: LD_INT 32
20162: EQUAL
20163: IFFALSE 20173
// sPower := true ;
20165: LD_ADDR_EXP 85
20169: PUSH
20170: LD_INT 1
20172: ST_TO_ADDR
// if p3 = 33 then
20173: LD_VAR 0 3
20177: PUSH
20178: LD_INT 33
20180: EQUAL
20181: IFFALSE 20191
// sRandom := true ;
20183: LD_ADDR_EXP 86
20187: PUSH
20188: LD_INT 1
20190: ST_TO_ADDR
// if p3 = 34 then
20191: LD_VAR 0 3
20195: PUSH
20196: LD_INT 34
20198: EQUAL
20199: IFFALSE 20209
// sShield := true ;
20201: LD_ADDR_EXP 87
20205: PUSH
20206: LD_INT 1
20208: ST_TO_ADDR
// if p3 = 35 then
20209: LD_VAR 0 3
20213: PUSH
20214: LD_INT 35
20216: EQUAL
20217: IFFALSE 20227
// sTime := true ;
20219: LD_ADDR_EXP 88
20223: PUSH
20224: LD_INT 1
20226: ST_TO_ADDR
// if p3 = 36 then
20227: LD_VAR 0 3
20231: PUSH
20232: LD_INT 36
20234: EQUAL
20235: IFFALSE 20245
// sTools := true ;
20237: LD_ADDR_EXP 89
20241: PUSH
20242: LD_INT 1
20244: ST_TO_ADDR
// if p3 = 101 then
20245: LD_VAR 0 3
20249: PUSH
20250: LD_INT 101
20252: EQUAL
20253: IFFALSE 20263
// sSold := true ;
20255: LD_ADDR_EXP 54
20259: PUSH
20260: LD_INT 1
20262: ST_TO_ADDR
// if p3 = 102 then
20263: LD_VAR 0 3
20267: PUSH
20268: LD_INT 102
20270: EQUAL
20271: IFFALSE 20281
// sDiff := true ;
20273: LD_ADDR_EXP 55
20277: PUSH
20278: LD_INT 1
20280: ST_TO_ADDR
// if p3 = 103 then
20281: LD_VAR 0 3
20285: PUSH
20286: LD_INT 103
20288: EQUAL
20289: IFFALSE 20299
// sFog := true ;
20291: LD_ADDR_EXP 58
20295: PUSH
20296: LD_INT 1
20298: ST_TO_ADDR
// if p3 = 104 then
20299: LD_VAR 0 3
20303: PUSH
20304: LD_INT 104
20306: EQUAL
20307: IFFALSE 20317
// sReset := true ;
20309: LD_ADDR_EXP 59
20313: PUSH
20314: LD_INT 1
20316: ST_TO_ADDR
// if p3 = 105 then
20317: LD_VAR 0 3
20321: PUSH
20322: LD_INT 105
20324: EQUAL
20325: IFFALSE 20335
// sSun := true ;
20327: LD_ADDR_EXP 60
20331: PUSH
20332: LD_INT 1
20334: ST_TO_ADDR
// if p3 = 106 then
20335: LD_VAR 0 3
20339: PUSH
20340: LD_INT 106
20342: EQUAL
20343: IFFALSE 20353
// sTiger := true ;
20345: LD_ADDR_EXP 56
20349: PUSH
20350: LD_INT 1
20352: ST_TO_ADDR
// if p3 = 107 then
20353: LD_VAR 0 3
20357: PUSH
20358: LD_INT 107
20360: EQUAL
20361: IFFALSE 20371
// sBomb := true ;
20363: LD_ADDR_EXP 57
20367: PUSH
20368: LD_INT 1
20370: ST_TO_ADDR
// if p3 = 108 then
20371: LD_VAR 0 3
20375: PUSH
20376: LD_INT 108
20378: EQUAL
20379: IFFALSE 20389
// sWound := true ;
20381: LD_ADDR_EXP 65
20385: PUSH
20386: LD_INT 1
20388: ST_TO_ADDR
// if p3 = 109 then
20389: LD_VAR 0 3
20393: PUSH
20394: LD_INT 109
20396: EQUAL
20397: IFFALSE 20407
// sBetray := true ;
20399: LD_ADDR_EXP 69
20403: PUSH
20404: LD_INT 1
20406: ST_TO_ADDR
// if p3 = 110 then
20407: LD_VAR 0 3
20411: PUSH
20412: LD_INT 110
20414: EQUAL
20415: IFFALSE 20425
// sContamin := true ;
20417: LD_ADDR_EXP 70
20421: PUSH
20422: LD_INT 1
20424: ST_TO_ADDR
// if p3 = 111 then
20425: LD_VAR 0 3
20429: PUSH
20430: LD_INT 111
20432: EQUAL
20433: IFFALSE 20443
// sOil := true ;
20435: LD_ADDR_EXP 72
20439: PUSH
20440: LD_INT 1
20442: ST_TO_ADDR
// if p3 = 112 then
20443: LD_VAR 0 3
20447: PUSH
20448: LD_INT 112
20450: EQUAL
20451: IFFALSE 20461
// sStu := true ;
20453: LD_ADDR_EXP 76
20457: PUSH
20458: LD_INT 1
20460: ST_TO_ADDR
// if p3 = 113 then
20461: LD_VAR 0 3
20465: PUSH
20466: LD_INT 113
20468: EQUAL
20469: IFFALSE 20479
// sBazooka := true ;
20471: LD_ADDR_EXP 79
20475: PUSH
20476: LD_INT 1
20478: ST_TO_ADDR
// if p3 = 114 then
20479: LD_VAR 0 3
20483: PUSH
20484: LD_INT 114
20486: EQUAL
20487: IFFALSE 20497
// sMortar := true ;
20489: LD_ADDR_EXP 80
20493: PUSH
20494: LD_INT 1
20496: ST_TO_ADDR
// if p3 = 115 then
20497: LD_VAR 0 3
20501: PUSH
20502: LD_INT 115
20504: EQUAL
20505: IFFALSE 20515
// sRanger := true ;
20507: LD_ADDR_EXP 90
20511: PUSH
20512: LD_INT 1
20514: ST_TO_ADDR
// if p3 = 116 then
20515: LD_VAR 0 3
20519: PUSH
20520: LD_INT 116
20522: EQUAL
20523: IFFALSE 20533
// sComputer := true ;
20525: LD_ADDR_EXP 91
20529: PUSH
20530: LD_INT 1
20532: ST_TO_ADDR
// if p3 = 117 then
20533: LD_VAR 0 3
20537: PUSH
20538: LD_INT 117
20540: EQUAL
20541: IFFALSE 20551
// s30 := true ;
20543: LD_ADDR_EXP 92
20547: PUSH
20548: LD_INT 1
20550: ST_TO_ADDR
// if p3 = 118 then
20551: LD_VAR 0 3
20555: PUSH
20556: LD_INT 118
20558: EQUAL
20559: IFFALSE 20569
// s60 := true ;
20561: LD_ADDR_EXP 93
20565: PUSH
20566: LD_INT 1
20568: ST_TO_ADDR
// end ; if p2 = stream_mode then
20569: LD_VAR 0 2
20573: PUSH
20574: LD_INT 101
20576: EQUAL
20577: IFFALSE 20705
// begin case p3 of 1 :
20579: LD_VAR 0 3
20583: PUSH
20584: LD_INT 1
20586: DOUBLE
20587: EQUAL
20588: IFTRUE 20592
20590: GO 20599
20592: POP
// hHackUnlimitedResources ; 2 :
20593: CALL 32803 0 0
20597: GO 20705
20599: LD_INT 2
20601: DOUBLE
20602: EQUAL
20603: IFTRUE 20607
20605: GO 20614
20607: POP
// hHackSetLevel10 ; 3 :
20608: CALL 32936 0 0
20612: GO 20705
20614: LD_INT 3
20616: DOUBLE
20617: EQUAL
20618: IFTRUE 20622
20620: GO 20629
20622: POP
// hHackSetLevel10YourUnits ; 4 :
20623: CALL 33021 0 0
20627: GO 20705
20629: LD_INT 4
20631: DOUBLE
20632: EQUAL
20633: IFTRUE 20637
20635: GO 20644
20637: POP
// hHackInvincible ; 5 :
20638: CALL 33469 0 0
20642: GO 20705
20644: LD_INT 5
20646: DOUBLE
20647: EQUAL
20648: IFTRUE 20652
20650: GO 20659
20652: POP
// hHackInvisible ; 6 :
20653: CALL 33580 0 0
20657: GO 20705
20659: LD_INT 6
20661: DOUBLE
20662: EQUAL
20663: IFTRUE 20667
20665: GO 20674
20667: POP
// hHackChangeYourSide ; 7 :
20668: CALL 33637 0 0
20672: GO 20705
20674: LD_INT 7
20676: DOUBLE
20677: EQUAL
20678: IFTRUE 20682
20680: GO 20689
20682: POP
// hHackChangeUnitSide ; 8 :
20683: CALL 33679 0 0
20687: GO 20705
20689: LD_INT 8
20691: DOUBLE
20692: EQUAL
20693: IFTRUE 20697
20695: GO 20704
20697: POP
// hHackFog ; end ;
20698: CALL 33780 0 0
20702: GO 20705
20704: POP
// end ; end ;
20705: LD_VAR 0 7
20709: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20710: GO 20712
20712: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20713: LD_STRING initStreamRollete();
20715: PPUSH
20716: CALL_OW 559
// InitStreamMode ;
20720: CALL 20732 0 0
// DefineStreamItems ( false ) ;
20724: LD_INT 0
20726: PPUSH
20727: CALL 21196 0 1
// end ;
20731: END
// function InitStreamMode ; begin
20732: LD_INT 0
20734: PPUSH
// streamModeActive := false ;
20735: LD_ADDR_EXP 37
20739: PUSH
20740: LD_INT 0
20742: ST_TO_ADDR
// normalCounter := 36 ;
20743: LD_ADDR_EXP 38
20747: PUSH
20748: LD_INT 36
20750: ST_TO_ADDR
// hardcoreCounter := 18 ;
20751: LD_ADDR_EXP 39
20755: PUSH
20756: LD_INT 18
20758: ST_TO_ADDR
// sRocket := false ;
20759: LD_ADDR_EXP 42
20763: PUSH
20764: LD_INT 0
20766: ST_TO_ADDR
// sSpeed := false ;
20767: LD_ADDR_EXP 41
20771: PUSH
20772: LD_INT 0
20774: ST_TO_ADDR
// sEngine := false ;
20775: LD_ADDR_EXP 43
20779: PUSH
20780: LD_INT 0
20782: ST_TO_ADDR
// sSpec := false ;
20783: LD_ADDR_EXP 40
20787: PUSH
20788: LD_INT 0
20790: ST_TO_ADDR
// sLevel := false ;
20791: LD_ADDR_EXP 44
20795: PUSH
20796: LD_INT 0
20798: ST_TO_ADDR
// sArmoury := false ;
20799: LD_ADDR_EXP 45
20803: PUSH
20804: LD_INT 0
20806: ST_TO_ADDR
// sRadar := false ;
20807: LD_ADDR_EXP 46
20811: PUSH
20812: LD_INT 0
20814: ST_TO_ADDR
// sBunker := false ;
20815: LD_ADDR_EXP 47
20819: PUSH
20820: LD_INT 0
20822: ST_TO_ADDR
// sHack := false ;
20823: LD_ADDR_EXP 48
20827: PUSH
20828: LD_INT 0
20830: ST_TO_ADDR
// sFire := false ;
20831: LD_ADDR_EXP 49
20835: PUSH
20836: LD_INT 0
20838: ST_TO_ADDR
// sRefresh := false ;
20839: LD_ADDR_EXP 50
20843: PUSH
20844: LD_INT 0
20846: ST_TO_ADDR
// sExp := false ;
20847: LD_ADDR_EXP 51
20851: PUSH
20852: LD_INT 0
20854: ST_TO_ADDR
// sDepot := false ;
20855: LD_ADDR_EXP 52
20859: PUSH
20860: LD_INT 0
20862: ST_TO_ADDR
// sFlag := false ;
20863: LD_ADDR_EXP 53
20867: PUSH
20868: LD_INT 0
20870: ST_TO_ADDR
// sKamikadze := false ;
20871: LD_ADDR_EXP 61
20875: PUSH
20876: LD_INT 0
20878: ST_TO_ADDR
// sTroll := false ;
20879: LD_ADDR_EXP 62
20883: PUSH
20884: LD_INT 0
20886: ST_TO_ADDR
// sSlow := false ;
20887: LD_ADDR_EXP 63
20891: PUSH
20892: LD_INT 0
20894: ST_TO_ADDR
// sLack := false ;
20895: LD_ADDR_EXP 64
20899: PUSH
20900: LD_INT 0
20902: ST_TO_ADDR
// sTank := false ;
20903: LD_ADDR_EXP 66
20907: PUSH
20908: LD_INT 0
20910: ST_TO_ADDR
// sRemote := false ;
20911: LD_ADDR_EXP 67
20915: PUSH
20916: LD_INT 0
20918: ST_TO_ADDR
// sPowell := false ;
20919: LD_ADDR_EXP 68
20923: PUSH
20924: LD_INT 0
20926: ST_TO_ADDR
// sTeleport := false ;
20927: LD_ADDR_EXP 71
20931: PUSH
20932: LD_INT 0
20934: ST_TO_ADDR
// sOilTower := false ;
20935: LD_ADDR_EXP 73
20939: PUSH
20940: LD_INT 0
20942: ST_TO_ADDR
// sShovel := false ;
20943: LD_ADDR_EXP 74
20947: PUSH
20948: LD_INT 0
20950: ST_TO_ADDR
// sSheik := false ;
20951: LD_ADDR_EXP 75
20955: PUSH
20956: LD_INT 0
20958: ST_TO_ADDR
// sEarthquake := false ;
20959: LD_ADDR_EXP 77
20963: PUSH
20964: LD_INT 0
20966: ST_TO_ADDR
// sAI := false ;
20967: LD_ADDR_EXP 78
20971: PUSH
20972: LD_INT 0
20974: ST_TO_ADDR
// sCargo := false ;
20975: LD_ADDR_EXP 81
20979: PUSH
20980: LD_INT 0
20982: ST_TO_ADDR
// sDLaser := false ;
20983: LD_ADDR_EXP 82
20987: PUSH
20988: LD_INT 0
20990: ST_TO_ADDR
// sExchange := false ;
20991: LD_ADDR_EXP 83
20995: PUSH
20996: LD_INT 0
20998: ST_TO_ADDR
// sFac := false ;
20999: LD_ADDR_EXP 84
21003: PUSH
21004: LD_INT 0
21006: ST_TO_ADDR
// sPower := false ;
21007: LD_ADDR_EXP 85
21011: PUSH
21012: LD_INT 0
21014: ST_TO_ADDR
// sRandom := false ;
21015: LD_ADDR_EXP 86
21019: PUSH
21020: LD_INT 0
21022: ST_TO_ADDR
// sShield := false ;
21023: LD_ADDR_EXP 87
21027: PUSH
21028: LD_INT 0
21030: ST_TO_ADDR
// sTime := false ;
21031: LD_ADDR_EXP 88
21035: PUSH
21036: LD_INT 0
21038: ST_TO_ADDR
// sTools := false ;
21039: LD_ADDR_EXP 89
21043: PUSH
21044: LD_INT 0
21046: ST_TO_ADDR
// sSold := false ;
21047: LD_ADDR_EXP 54
21051: PUSH
21052: LD_INT 0
21054: ST_TO_ADDR
// sDiff := false ;
21055: LD_ADDR_EXP 55
21059: PUSH
21060: LD_INT 0
21062: ST_TO_ADDR
// sFog := false ;
21063: LD_ADDR_EXP 58
21067: PUSH
21068: LD_INT 0
21070: ST_TO_ADDR
// sReset := false ;
21071: LD_ADDR_EXP 59
21075: PUSH
21076: LD_INT 0
21078: ST_TO_ADDR
// sSun := false ;
21079: LD_ADDR_EXP 60
21083: PUSH
21084: LD_INT 0
21086: ST_TO_ADDR
// sTiger := false ;
21087: LD_ADDR_EXP 56
21091: PUSH
21092: LD_INT 0
21094: ST_TO_ADDR
// sBomb := false ;
21095: LD_ADDR_EXP 57
21099: PUSH
21100: LD_INT 0
21102: ST_TO_ADDR
// sWound := false ;
21103: LD_ADDR_EXP 65
21107: PUSH
21108: LD_INT 0
21110: ST_TO_ADDR
// sBetray := false ;
21111: LD_ADDR_EXP 69
21115: PUSH
21116: LD_INT 0
21118: ST_TO_ADDR
// sContamin := false ;
21119: LD_ADDR_EXP 70
21123: PUSH
21124: LD_INT 0
21126: ST_TO_ADDR
// sOil := false ;
21127: LD_ADDR_EXP 72
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
// sStu := false ;
21135: LD_ADDR_EXP 76
21139: PUSH
21140: LD_INT 0
21142: ST_TO_ADDR
// sBazooka := false ;
21143: LD_ADDR_EXP 79
21147: PUSH
21148: LD_INT 0
21150: ST_TO_ADDR
// sMortar := false ;
21151: LD_ADDR_EXP 80
21155: PUSH
21156: LD_INT 0
21158: ST_TO_ADDR
// sRanger := false ;
21159: LD_ADDR_EXP 90
21163: PUSH
21164: LD_INT 0
21166: ST_TO_ADDR
// sComputer := false ;
21167: LD_ADDR_EXP 91
21171: PUSH
21172: LD_INT 0
21174: ST_TO_ADDR
// s30 := false ;
21175: LD_ADDR_EXP 92
21179: PUSH
21180: LD_INT 0
21182: ST_TO_ADDR
// s60 := false ;
21183: LD_ADDR_EXP 93
21187: PUSH
21188: LD_INT 0
21190: ST_TO_ADDR
// end ;
21191: LD_VAR 0 1
21195: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21196: LD_INT 0
21198: PPUSH
21199: PPUSH
21200: PPUSH
21201: PPUSH
21202: PPUSH
21203: PPUSH
21204: PPUSH
// result := [ ] ;
21205: LD_ADDR_VAR 0 2
21209: PUSH
21210: EMPTY
21211: ST_TO_ADDR
// if campaign_id = 1 then
21212: LD_OWVAR 69
21216: PUSH
21217: LD_INT 1
21219: EQUAL
21220: IFFALSE 24386
// begin case mission_number of 1 :
21222: LD_OWVAR 70
21226: PUSH
21227: LD_INT 1
21229: DOUBLE
21230: EQUAL
21231: IFTRUE 21235
21233: GO 21311
21235: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21236: LD_ADDR_VAR 0 2
21240: PUSH
21241: LD_INT 2
21243: PUSH
21244: LD_INT 4
21246: PUSH
21247: LD_INT 11
21249: PUSH
21250: LD_INT 12
21252: PUSH
21253: LD_INT 15
21255: PUSH
21256: LD_INT 16
21258: PUSH
21259: LD_INT 22
21261: PUSH
21262: LD_INT 23
21264: PUSH
21265: LD_INT 26
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 101
21281: PUSH
21282: LD_INT 102
21284: PUSH
21285: LD_INT 106
21287: PUSH
21288: LD_INT 116
21290: PUSH
21291: LD_INT 117
21293: PUSH
21294: LD_INT 118
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: ST_TO_ADDR
21309: GO 24384
21311: LD_INT 2
21313: DOUBLE
21314: EQUAL
21315: IFTRUE 21319
21317: GO 21403
21319: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21320: LD_ADDR_VAR 0 2
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 4
21330: PUSH
21331: LD_INT 11
21333: PUSH
21334: LD_INT 12
21336: PUSH
21337: LD_INT 15
21339: PUSH
21340: LD_INT 16
21342: PUSH
21343: LD_INT 22
21345: PUSH
21346: LD_INT 23
21348: PUSH
21349: LD_INT 26
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 101
21365: PUSH
21366: LD_INT 102
21368: PUSH
21369: LD_INT 105
21371: PUSH
21372: LD_INT 106
21374: PUSH
21375: LD_INT 108
21377: PUSH
21378: LD_INT 116
21380: PUSH
21381: LD_INT 117
21383: PUSH
21384: LD_INT 118
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: ST_TO_ADDR
21401: GO 24384
21403: LD_INT 3
21405: DOUBLE
21406: EQUAL
21407: IFTRUE 21411
21409: GO 21499
21411: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21412: LD_ADDR_VAR 0 2
21416: PUSH
21417: LD_INT 2
21419: PUSH
21420: LD_INT 4
21422: PUSH
21423: LD_INT 5
21425: PUSH
21426: LD_INT 11
21428: PUSH
21429: LD_INT 12
21431: PUSH
21432: LD_INT 15
21434: PUSH
21435: LD_INT 16
21437: PUSH
21438: LD_INT 22
21440: PUSH
21441: LD_INT 26
21443: PUSH
21444: LD_INT 36
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 101
21461: PUSH
21462: LD_INT 102
21464: PUSH
21465: LD_INT 105
21467: PUSH
21468: LD_INT 106
21470: PUSH
21471: LD_INT 108
21473: PUSH
21474: LD_INT 116
21476: PUSH
21477: LD_INT 117
21479: PUSH
21480: LD_INT 118
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: ST_TO_ADDR
21497: GO 24384
21499: LD_INT 4
21501: DOUBLE
21502: EQUAL
21503: IFTRUE 21507
21505: GO 21603
21507: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21508: LD_ADDR_VAR 0 2
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: LD_INT 4
21518: PUSH
21519: LD_INT 5
21521: PUSH
21522: LD_INT 8
21524: PUSH
21525: LD_INT 11
21527: PUSH
21528: LD_INT 12
21530: PUSH
21531: LD_INT 15
21533: PUSH
21534: LD_INT 16
21536: PUSH
21537: LD_INT 22
21539: PUSH
21540: LD_INT 23
21542: PUSH
21543: LD_INT 26
21545: PUSH
21546: LD_INT 36
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 101
21565: PUSH
21566: LD_INT 102
21568: PUSH
21569: LD_INT 105
21571: PUSH
21572: LD_INT 106
21574: PUSH
21575: LD_INT 108
21577: PUSH
21578: LD_INT 116
21580: PUSH
21581: LD_INT 117
21583: PUSH
21584: LD_INT 118
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: ST_TO_ADDR
21601: GO 24384
21603: LD_INT 5
21605: DOUBLE
21606: EQUAL
21607: IFTRUE 21611
21609: GO 21723
21611: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21612: LD_ADDR_VAR 0 2
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: LD_INT 4
21622: PUSH
21623: LD_INT 5
21625: PUSH
21626: LD_INT 6
21628: PUSH
21629: LD_INT 8
21631: PUSH
21632: LD_INT 11
21634: PUSH
21635: LD_INT 12
21637: PUSH
21638: LD_INT 15
21640: PUSH
21641: LD_INT 16
21643: PUSH
21644: LD_INT 22
21646: PUSH
21647: LD_INT 23
21649: PUSH
21650: LD_INT 25
21652: PUSH
21653: LD_INT 26
21655: PUSH
21656: LD_INT 36
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 101
21677: PUSH
21678: LD_INT 102
21680: PUSH
21681: LD_INT 105
21683: PUSH
21684: LD_INT 106
21686: PUSH
21687: LD_INT 108
21689: PUSH
21690: LD_INT 109
21692: PUSH
21693: LD_INT 112
21695: PUSH
21696: LD_INT 116
21698: PUSH
21699: LD_INT 117
21701: PUSH
21702: LD_INT 118
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: ST_TO_ADDR
21721: GO 24384
21723: LD_INT 6
21725: DOUBLE
21726: EQUAL
21727: IFTRUE 21731
21729: GO 21863
21731: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21732: LD_ADDR_VAR 0 2
21736: PUSH
21737: LD_INT 2
21739: PUSH
21740: LD_INT 4
21742: PUSH
21743: LD_INT 5
21745: PUSH
21746: LD_INT 6
21748: PUSH
21749: LD_INT 8
21751: PUSH
21752: LD_INT 11
21754: PUSH
21755: LD_INT 12
21757: PUSH
21758: LD_INT 15
21760: PUSH
21761: LD_INT 16
21763: PUSH
21764: LD_INT 20
21766: PUSH
21767: LD_INT 21
21769: PUSH
21770: LD_INT 22
21772: PUSH
21773: LD_INT 23
21775: PUSH
21776: LD_INT 25
21778: PUSH
21779: LD_INT 26
21781: PUSH
21782: LD_INT 30
21784: PUSH
21785: LD_INT 31
21787: PUSH
21788: LD_INT 32
21790: PUSH
21791: LD_INT 36
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 101
21817: PUSH
21818: LD_INT 102
21820: PUSH
21821: LD_INT 105
21823: PUSH
21824: LD_INT 106
21826: PUSH
21827: LD_INT 108
21829: PUSH
21830: LD_INT 109
21832: PUSH
21833: LD_INT 112
21835: PUSH
21836: LD_INT 116
21838: PUSH
21839: LD_INT 117
21841: PUSH
21842: LD_INT 118
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: ST_TO_ADDR
21861: GO 24384
21863: LD_INT 7
21865: DOUBLE
21866: EQUAL
21867: IFTRUE 21871
21869: GO 21983
21871: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21872: LD_ADDR_VAR 0 2
21876: PUSH
21877: LD_INT 2
21879: PUSH
21880: LD_INT 4
21882: PUSH
21883: LD_INT 5
21885: PUSH
21886: LD_INT 7
21888: PUSH
21889: LD_INT 11
21891: PUSH
21892: LD_INT 12
21894: PUSH
21895: LD_INT 15
21897: PUSH
21898: LD_INT 16
21900: PUSH
21901: LD_INT 20
21903: PUSH
21904: LD_INT 21
21906: PUSH
21907: LD_INT 22
21909: PUSH
21910: LD_INT 23
21912: PUSH
21913: LD_INT 25
21915: PUSH
21916: LD_INT 26
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 101
21937: PUSH
21938: LD_INT 102
21940: PUSH
21941: LD_INT 103
21943: PUSH
21944: LD_INT 105
21946: PUSH
21947: LD_INT 106
21949: PUSH
21950: LD_INT 108
21952: PUSH
21953: LD_INT 112
21955: PUSH
21956: LD_INT 116
21958: PUSH
21959: LD_INT 117
21961: PUSH
21962: LD_INT 118
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: ST_TO_ADDR
21981: GO 24384
21983: LD_INT 8
21985: DOUBLE
21986: EQUAL
21987: IFTRUE 21991
21989: GO 22131
21991: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21992: LD_ADDR_VAR 0 2
21996: PUSH
21997: LD_INT 2
21999: PUSH
22000: LD_INT 4
22002: PUSH
22003: LD_INT 5
22005: PUSH
22006: LD_INT 6
22008: PUSH
22009: LD_INT 7
22011: PUSH
22012: LD_INT 8
22014: PUSH
22015: LD_INT 11
22017: PUSH
22018: LD_INT 12
22020: PUSH
22021: LD_INT 15
22023: PUSH
22024: LD_INT 16
22026: PUSH
22027: LD_INT 20
22029: PUSH
22030: LD_INT 21
22032: PUSH
22033: LD_INT 22
22035: PUSH
22036: LD_INT 23
22038: PUSH
22039: LD_INT 25
22041: PUSH
22042: LD_INT 26
22044: PUSH
22045: LD_INT 30
22047: PUSH
22048: LD_INT 31
22050: PUSH
22051: LD_INT 32
22053: PUSH
22054: LD_INT 36
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 101
22081: PUSH
22082: LD_INT 102
22084: PUSH
22085: LD_INT 103
22087: PUSH
22088: LD_INT 105
22090: PUSH
22091: LD_INT 106
22093: PUSH
22094: LD_INT 108
22096: PUSH
22097: LD_INT 109
22099: PUSH
22100: LD_INT 112
22102: PUSH
22103: LD_INT 116
22105: PUSH
22106: LD_INT 117
22108: PUSH
22109: LD_INT 118
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: ST_TO_ADDR
22129: GO 24384
22131: LD_INT 9
22133: DOUBLE
22134: EQUAL
22135: IFTRUE 22139
22137: GO 22287
22139: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22140: LD_ADDR_VAR 0 2
22144: PUSH
22145: LD_INT 2
22147: PUSH
22148: LD_INT 4
22150: PUSH
22151: LD_INT 5
22153: PUSH
22154: LD_INT 6
22156: PUSH
22157: LD_INT 7
22159: PUSH
22160: LD_INT 8
22162: PUSH
22163: LD_INT 11
22165: PUSH
22166: LD_INT 12
22168: PUSH
22169: LD_INT 15
22171: PUSH
22172: LD_INT 16
22174: PUSH
22175: LD_INT 20
22177: PUSH
22178: LD_INT 21
22180: PUSH
22181: LD_INT 22
22183: PUSH
22184: LD_INT 23
22186: PUSH
22187: LD_INT 25
22189: PUSH
22190: LD_INT 26
22192: PUSH
22193: LD_INT 28
22195: PUSH
22196: LD_INT 30
22198: PUSH
22199: LD_INT 31
22201: PUSH
22202: LD_INT 32
22204: PUSH
22205: LD_INT 36
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 101
22233: PUSH
22234: LD_INT 102
22236: PUSH
22237: LD_INT 103
22239: PUSH
22240: LD_INT 105
22242: PUSH
22243: LD_INT 106
22245: PUSH
22246: LD_INT 108
22248: PUSH
22249: LD_INT 109
22251: PUSH
22252: LD_INT 112
22254: PUSH
22255: LD_INT 114
22257: PUSH
22258: LD_INT 116
22260: PUSH
22261: LD_INT 117
22263: PUSH
22264: LD_INT 118
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: ST_TO_ADDR
22285: GO 24384
22287: LD_INT 10
22289: DOUBLE
22290: EQUAL
22291: IFTRUE 22295
22293: GO 22491
22295: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22296: LD_ADDR_VAR 0 2
22300: PUSH
22301: LD_INT 2
22303: PUSH
22304: LD_INT 4
22306: PUSH
22307: LD_INT 5
22309: PUSH
22310: LD_INT 6
22312: PUSH
22313: LD_INT 7
22315: PUSH
22316: LD_INT 8
22318: PUSH
22319: LD_INT 9
22321: PUSH
22322: LD_INT 10
22324: PUSH
22325: LD_INT 11
22327: PUSH
22328: LD_INT 12
22330: PUSH
22331: LD_INT 13
22333: PUSH
22334: LD_INT 14
22336: PUSH
22337: LD_INT 15
22339: PUSH
22340: LD_INT 16
22342: PUSH
22343: LD_INT 17
22345: PUSH
22346: LD_INT 18
22348: PUSH
22349: LD_INT 19
22351: PUSH
22352: LD_INT 20
22354: PUSH
22355: LD_INT 21
22357: PUSH
22358: LD_INT 22
22360: PUSH
22361: LD_INT 23
22363: PUSH
22364: LD_INT 24
22366: PUSH
22367: LD_INT 25
22369: PUSH
22370: LD_INT 26
22372: PUSH
22373: LD_INT 28
22375: PUSH
22376: LD_INT 30
22378: PUSH
22379: LD_INT 31
22381: PUSH
22382: LD_INT 32
22384: PUSH
22385: LD_INT 36
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 101
22421: PUSH
22422: LD_INT 102
22424: PUSH
22425: LD_INT 103
22427: PUSH
22428: LD_INT 104
22430: PUSH
22431: LD_INT 105
22433: PUSH
22434: LD_INT 106
22436: PUSH
22437: LD_INT 107
22439: PUSH
22440: LD_INT 108
22442: PUSH
22443: LD_INT 109
22445: PUSH
22446: LD_INT 110
22448: PUSH
22449: LD_INT 111
22451: PUSH
22452: LD_INT 112
22454: PUSH
22455: LD_INT 114
22457: PUSH
22458: LD_INT 116
22460: PUSH
22461: LD_INT 117
22463: PUSH
22464: LD_INT 118
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: ST_TO_ADDR
22489: GO 24384
22491: LD_INT 11
22493: DOUBLE
22494: EQUAL
22495: IFTRUE 22499
22497: GO 22703
22499: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22500: LD_ADDR_VAR 0 2
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: LD_INT 3
22510: PUSH
22511: LD_INT 4
22513: PUSH
22514: LD_INT 5
22516: PUSH
22517: LD_INT 6
22519: PUSH
22520: LD_INT 7
22522: PUSH
22523: LD_INT 8
22525: PUSH
22526: LD_INT 9
22528: PUSH
22529: LD_INT 10
22531: PUSH
22532: LD_INT 11
22534: PUSH
22535: LD_INT 12
22537: PUSH
22538: LD_INT 13
22540: PUSH
22541: LD_INT 14
22543: PUSH
22544: LD_INT 15
22546: PUSH
22547: LD_INT 16
22549: PUSH
22550: LD_INT 17
22552: PUSH
22553: LD_INT 18
22555: PUSH
22556: LD_INT 19
22558: PUSH
22559: LD_INT 20
22561: PUSH
22562: LD_INT 21
22564: PUSH
22565: LD_INT 22
22567: PUSH
22568: LD_INT 23
22570: PUSH
22571: LD_INT 24
22573: PUSH
22574: LD_INT 25
22576: PUSH
22577: LD_INT 26
22579: PUSH
22580: LD_INT 28
22582: PUSH
22583: LD_INT 30
22585: PUSH
22586: LD_INT 31
22588: PUSH
22589: LD_INT 32
22591: PUSH
22592: LD_INT 34
22594: PUSH
22595: LD_INT 36
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 101
22633: PUSH
22634: LD_INT 102
22636: PUSH
22637: LD_INT 103
22639: PUSH
22640: LD_INT 104
22642: PUSH
22643: LD_INT 105
22645: PUSH
22646: LD_INT 106
22648: PUSH
22649: LD_INT 107
22651: PUSH
22652: LD_INT 108
22654: PUSH
22655: LD_INT 109
22657: PUSH
22658: LD_INT 110
22660: PUSH
22661: LD_INT 111
22663: PUSH
22664: LD_INT 112
22666: PUSH
22667: LD_INT 114
22669: PUSH
22670: LD_INT 116
22672: PUSH
22673: LD_INT 117
22675: PUSH
22676: LD_INT 118
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: ST_TO_ADDR
22701: GO 24384
22703: LD_INT 12
22705: DOUBLE
22706: EQUAL
22707: IFTRUE 22711
22709: GO 22931
22711: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22712: LD_ADDR_VAR 0 2
22716: PUSH
22717: LD_INT 1
22719: PUSH
22720: LD_INT 2
22722: PUSH
22723: LD_INT 3
22725: PUSH
22726: LD_INT 4
22728: PUSH
22729: LD_INT 5
22731: PUSH
22732: LD_INT 6
22734: PUSH
22735: LD_INT 7
22737: PUSH
22738: LD_INT 8
22740: PUSH
22741: LD_INT 9
22743: PUSH
22744: LD_INT 10
22746: PUSH
22747: LD_INT 11
22749: PUSH
22750: LD_INT 12
22752: PUSH
22753: LD_INT 13
22755: PUSH
22756: LD_INT 14
22758: PUSH
22759: LD_INT 15
22761: PUSH
22762: LD_INT 16
22764: PUSH
22765: LD_INT 17
22767: PUSH
22768: LD_INT 18
22770: PUSH
22771: LD_INT 19
22773: PUSH
22774: LD_INT 20
22776: PUSH
22777: LD_INT 21
22779: PUSH
22780: LD_INT 22
22782: PUSH
22783: LD_INT 23
22785: PUSH
22786: LD_INT 24
22788: PUSH
22789: LD_INT 25
22791: PUSH
22792: LD_INT 26
22794: PUSH
22795: LD_INT 27
22797: PUSH
22798: LD_INT 28
22800: PUSH
22801: LD_INT 30
22803: PUSH
22804: LD_INT 31
22806: PUSH
22807: LD_INT 32
22809: PUSH
22810: LD_INT 33
22812: PUSH
22813: LD_INT 34
22815: PUSH
22816: LD_INT 36
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 101
22857: PUSH
22858: LD_INT 102
22860: PUSH
22861: LD_INT 103
22863: PUSH
22864: LD_INT 104
22866: PUSH
22867: LD_INT 105
22869: PUSH
22870: LD_INT 106
22872: PUSH
22873: LD_INT 107
22875: PUSH
22876: LD_INT 108
22878: PUSH
22879: LD_INT 109
22881: PUSH
22882: LD_INT 110
22884: PUSH
22885: LD_INT 111
22887: PUSH
22888: LD_INT 112
22890: PUSH
22891: LD_INT 113
22893: PUSH
22894: LD_INT 114
22896: PUSH
22897: LD_INT 116
22899: PUSH
22900: LD_INT 117
22902: PUSH
22903: LD_INT 118
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: ST_TO_ADDR
22929: GO 24384
22931: LD_INT 13
22933: DOUBLE
22934: EQUAL
22935: IFTRUE 22939
22937: GO 23147
22939: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22940: LD_ADDR_VAR 0 2
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: LD_INT 2
22950: PUSH
22951: LD_INT 3
22953: PUSH
22954: LD_INT 4
22956: PUSH
22957: LD_INT 5
22959: PUSH
22960: LD_INT 8
22962: PUSH
22963: LD_INT 9
22965: PUSH
22966: LD_INT 10
22968: PUSH
22969: LD_INT 11
22971: PUSH
22972: LD_INT 12
22974: PUSH
22975: LD_INT 14
22977: PUSH
22978: LD_INT 15
22980: PUSH
22981: LD_INT 16
22983: PUSH
22984: LD_INT 17
22986: PUSH
22987: LD_INT 18
22989: PUSH
22990: LD_INT 19
22992: PUSH
22993: LD_INT 20
22995: PUSH
22996: LD_INT 21
22998: PUSH
22999: LD_INT 22
23001: PUSH
23002: LD_INT 23
23004: PUSH
23005: LD_INT 24
23007: PUSH
23008: LD_INT 25
23010: PUSH
23011: LD_INT 26
23013: PUSH
23014: LD_INT 27
23016: PUSH
23017: LD_INT 28
23019: PUSH
23020: LD_INT 30
23022: PUSH
23023: LD_INT 31
23025: PUSH
23026: LD_INT 32
23028: PUSH
23029: LD_INT 33
23031: PUSH
23032: LD_INT 34
23034: PUSH
23035: LD_INT 36
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 101
23073: PUSH
23074: LD_INT 102
23076: PUSH
23077: LD_INT 103
23079: PUSH
23080: LD_INT 104
23082: PUSH
23083: LD_INT 105
23085: PUSH
23086: LD_INT 106
23088: PUSH
23089: LD_INT 107
23091: PUSH
23092: LD_INT 108
23094: PUSH
23095: LD_INT 109
23097: PUSH
23098: LD_INT 110
23100: PUSH
23101: LD_INT 111
23103: PUSH
23104: LD_INT 112
23106: PUSH
23107: LD_INT 113
23109: PUSH
23110: LD_INT 114
23112: PUSH
23113: LD_INT 116
23115: PUSH
23116: LD_INT 117
23118: PUSH
23119: LD_INT 118
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: ST_TO_ADDR
23145: GO 24384
23147: LD_INT 14
23149: DOUBLE
23150: EQUAL
23151: IFTRUE 23155
23153: GO 23379
23155: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23156: LD_ADDR_VAR 0 2
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: LD_INT 3
23169: PUSH
23170: LD_INT 4
23172: PUSH
23173: LD_INT 5
23175: PUSH
23176: LD_INT 6
23178: PUSH
23179: LD_INT 7
23181: PUSH
23182: LD_INT 8
23184: PUSH
23185: LD_INT 9
23187: PUSH
23188: LD_INT 10
23190: PUSH
23191: LD_INT 11
23193: PUSH
23194: LD_INT 12
23196: PUSH
23197: LD_INT 13
23199: PUSH
23200: LD_INT 14
23202: PUSH
23203: LD_INT 15
23205: PUSH
23206: LD_INT 16
23208: PUSH
23209: LD_INT 17
23211: PUSH
23212: LD_INT 18
23214: PUSH
23215: LD_INT 19
23217: PUSH
23218: LD_INT 20
23220: PUSH
23221: LD_INT 21
23223: PUSH
23224: LD_INT 22
23226: PUSH
23227: LD_INT 23
23229: PUSH
23230: LD_INT 24
23232: PUSH
23233: LD_INT 25
23235: PUSH
23236: LD_INT 26
23238: PUSH
23239: LD_INT 27
23241: PUSH
23242: LD_INT 28
23244: PUSH
23245: LD_INT 29
23247: PUSH
23248: LD_INT 30
23250: PUSH
23251: LD_INT 31
23253: PUSH
23254: LD_INT 32
23256: PUSH
23257: LD_INT 33
23259: PUSH
23260: LD_INT 34
23262: PUSH
23263: LD_INT 36
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 101
23305: PUSH
23306: LD_INT 102
23308: PUSH
23309: LD_INT 103
23311: PUSH
23312: LD_INT 104
23314: PUSH
23315: LD_INT 105
23317: PUSH
23318: LD_INT 106
23320: PUSH
23321: LD_INT 107
23323: PUSH
23324: LD_INT 108
23326: PUSH
23327: LD_INT 109
23329: PUSH
23330: LD_INT 110
23332: PUSH
23333: LD_INT 111
23335: PUSH
23336: LD_INT 112
23338: PUSH
23339: LD_INT 113
23341: PUSH
23342: LD_INT 114
23344: PUSH
23345: LD_INT 116
23347: PUSH
23348: LD_INT 117
23350: PUSH
23351: LD_INT 118
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: ST_TO_ADDR
23377: GO 24384
23379: LD_INT 15
23381: DOUBLE
23382: EQUAL
23383: IFTRUE 23387
23385: GO 23611
23387: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23388: LD_ADDR_VAR 0 2
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: LD_INT 2
23398: PUSH
23399: LD_INT 3
23401: PUSH
23402: LD_INT 4
23404: PUSH
23405: LD_INT 5
23407: PUSH
23408: LD_INT 6
23410: PUSH
23411: LD_INT 7
23413: PUSH
23414: LD_INT 8
23416: PUSH
23417: LD_INT 9
23419: PUSH
23420: LD_INT 10
23422: PUSH
23423: LD_INT 11
23425: PUSH
23426: LD_INT 12
23428: PUSH
23429: LD_INT 13
23431: PUSH
23432: LD_INT 14
23434: PUSH
23435: LD_INT 15
23437: PUSH
23438: LD_INT 16
23440: PUSH
23441: LD_INT 17
23443: PUSH
23444: LD_INT 18
23446: PUSH
23447: LD_INT 19
23449: PUSH
23450: LD_INT 20
23452: PUSH
23453: LD_INT 21
23455: PUSH
23456: LD_INT 22
23458: PUSH
23459: LD_INT 23
23461: PUSH
23462: LD_INT 24
23464: PUSH
23465: LD_INT 25
23467: PUSH
23468: LD_INT 26
23470: PUSH
23471: LD_INT 27
23473: PUSH
23474: LD_INT 28
23476: PUSH
23477: LD_INT 29
23479: PUSH
23480: LD_INT 30
23482: PUSH
23483: LD_INT 31
23485: PUSH
23486: LD_INT 32
23488: PUSH
23489: LD_INT 33
23491: PUSH
23492: LD_INT 34
23494: PUSH
23495: LD_INT 36
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 101
23537: PUSH
23538: LD_INT 102
23540: PUSH
23541: LD_INT 103
23543: PUSH
23544: LD_INT 104
23546: PUSH
23547: LD_INT 105
23549: PUSH
23550: LD_INT 106
23552: PUSH
23553: LD_INT 107
23555: PUSH
23556: LD_INT 108
23558: PUSH
23559: LD_INT 109
23561: PUSH
23562: LD_INT 110
23564: PUSH
23565: LD_INT 111
23567: PUSH
23568: LD_INT 112
23570: PUSH
23571: LD_INT 113
23573: PUSH
23574: LD_INT 114
23576: PUSH
23577: LD_INT 116
23579: PUSH
23580: LD_INT 117
23582: PUSH
23583: LD_INT 118
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: ST_TO_ADDR
23609: GO 24384
23611: LD_INT 16
23613: DOUBLE
23614: EQUAL
23615: IFTRUE 23619
23617: GO 23755
23619: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23620: LD_ADDR_VAR 0 2
23624: PUSH
23625: LD_INT 2
23627: PUSH
23628: LD_INT 4
23630: PUSH
23631: LD_INT 5
23633: PUSH
23634: LD_INT 7
23636: PUSH
23637: LD_INT 11
23639: PUSH
23640: LD_INT 12
23642: PUSH
23643: LD_INT 15
23645: PUSH
23646: LD_INT 16
23648: PUSH
23649: LD_INT 20
23651: PUSH
23652: LD_INT 21
23654: PUSH
23655: LD_INT 22
23657: PUSH
23658: LD_INT 23
23660: PUSH
23661: LD_INT 25
23663: PUSH
23664: LD_INT 26
23666: PUSH
23667: LD_INT 30
23669: PUSH
23670: LD_INT 31
23672: PUSH
23673: LD_INT 32
23675: PUSH
23676: LD_INT 33
23678: PUSH
23679: LD_INT 34
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 101
23705: PUSH
23706: LD_INT 102
23708: PUSH
23709: LD_INT 103
23711: PUSH
23712: LD_INT 106
23714: PUSH
23715: LD_INT 108
23717: PUSH
23718: LD_INT 112
23720: PUSH
23721: LD_INT 113
23723: PUSH
23724: LD_INT 114
23726: PUSH
23727: LD_INT 116
23729: PUSH
23730: LD_INT 117
23732: PUSH
23733: LD_INT 118
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: ST_TO_ADDR
23753: GO 24384
23755: LD_INT 17
23757: DOUBLE
23758: EQUAL
23759: IFTRUE 23763
23761: GO 23987
23763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23764: LD_ADDR_VAR 0 2
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 3
23777: PUSH
23778: LD_INT 4
23780: PUSH
23781: LD_INT 5
23783: PUSH
23784: LD_INT 6
23786: PUSH
23787: LD_INT 7
23789: PUSH
23790: LD_INT 8
23792: PUSH
23793: LD_INT 9
23795: PUSH
23796: LD_INT 10
23798: PUSH
23799: LD_INT 11
23801: PUSH
23802: LD_INT 12
23804: PUSH
23805: LD_INT 13
23807: PUSH
23808: LD_INT 14
23810: PUSH
23811: LD_INT 15
23813: PUSH
23814: LD_INT 16
23816: PUSH
23817: LD_INT 17
23819: PUSH
23820: LD_INT 18
23822: PUSH
23823: LD_INT 19
23825: PUSH
23826: LD_INT 20
23828: PUSH
23829: LD_INT 21
23831: PUSH
23832: LD_INT 22
23834: PUSH
23835: LD_INT 23
23837: PUSH
23838: LD_INT 24
23840: PUSH
23841: LD_INT 25
23843: PUSH
23844: LD_INT 26
23846: PUSH
23847: LD_INT 27
23849: PUSH
23850: LD_INT 28
23852: PUSH
23853: LD_INT 29
23855: PUSH
23856: LD_INT 30
23858: PUSH
23859: LD_INT 31
23861: PUSH
23862: LD_INT 32
23864: PUSH
23865: LD_INT 33
23867: PUSH
23868: LD_INT 34
23870: PUSH
23871: LD_INT 36
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 101
23913: PUSH
23914: LD_INT 102
23916: PUSH
23917: LD_INT 103
23919: PUSH
23920: LD_INT 104
23922: PUSH
23923: LD_INT 105
23925: PUSH
23926: LD_INT 106
23928: PUSH
23929: LD_INT 107
23931: PUSH
23932: LD_INT 108
23934: PUSH
23935: LD_INT 109
23937: PUSH
23938: LD_INT 110
23940: PUSH
23941: LD_INT 111
23943: PUSH
23944: LD_INT 112
23946: PUSH
23947: LD_INT 113
23949: PUSH
23950: LD_INT 114
23952: PUSH
23953: LD_INT 116
23955: PUSH
23956: LD_INT 117
23958: PUSH
23959: LD_INT 118
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: ST_TO_ADDR
23985: GO 24384
23987: LD_INT 18
23989: DOUBLE
23990: EQUAL
23991: IFTRUE 23995
23993: GO 24143
23995: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23996: LD_ADDR_VAR 0 2
24000: PUSH
24001: LD_INT 2
24003: PUSH
24004: LD_INT 4
24006: PUSH
24007: LD_INT 5
24009: PUSH
24010: LD_INT 7
24012: PUSH
24013: LD_INT 11
24015: PUSH
24016: LD_INT 12
24018: PUSH
24019: LD_INT 15
24021: PUSH
24022: LD_INT 16
24024: PUSH
24025: LD_INT 20
24027: PUSH
24028: LD_INT 21
24030: PUSH
24031: LD_INT 22
24033: PUSH
24034: LD_INT 23
24036: PUSH
24037: LD_INT 25
24039: PUSH
24040: LD_INT 26
24042: PUSH
24043: LD_INT 30
24045: PUSH
24046: LD_INT 31
24048: PUSH
24049: LD_INT 32
24051: PUSH
24052: LD_INT 33
24054: PUSH
24055: LD_INT 34
24057: PUSH
24058: LD_INT 35
24060: PUSH
24061: LD_INT 36
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 101
24089: PUSH
24090: LD_INT 102
24092: PUSH
24093: LD_INT 103
24095: PUSH
24096: LD_INT 106
24098: PUSH
24099: LD_INT 108
24101: PUSH
24102: LD_INT 112
24104: PUSH
24105: LD_INT 113
24107: PUSH
24108: LD_INT 114
24110: PUSH
24111: LD_INT 115
24113: PUSH
24114: LD_INT 116
24116: PUSH
24117: LD_INT 117
24119: PUSH
24120: LD_INT 118
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: ST_TO_ADDR
24141: GO 24384
24143: LD_INT 19
24145: DOUBLE
24146: EQUAL
24147: IFTRUE 24151
24149: GO 24383
24151: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24152: LD_ADDR_VAR 0 2
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: LD_INT 2
24162: PUSH
24163: LD_INT 3
24165: PUSH
24166: LD_INT 4
24168: PUSH
24169: LD_INT 5
24171: PUSH
24172: LD_INT 6
24174: PUSH
24175: LD_INT 7
24177: PUSH
24178: LD_INT 8
24180: PUSH
24181: LD_INT 9
24183: PUSH
24184: LD_INT 10
24186: PUSH
24187: LD_INT 11
24189: PUSH
24190: LD_INT 12
24192: PUSH
24193: LD_INT 13
24195: PUSH
24196: LD_INT 14
24198: PUSH
24199: LD_INT 15
24201: PUSH
24202: LD_INT 16
24204: PUSH
24205: LD_INT 17
24207: PUSH
24208: LD_INT 18
24210: PUSH
24211: LD_INT 19
24213: PUSH
24214: LD_INT 20
24216: PUSH
24217: LD_INT 21
24219: PUSH
24220: LD_INT 22
24222: PUSH
24223: LD_INT 23
24225: PUSH
24226: LD_INT 24
24228: PUSH
24229: LD_INT 25
24231: PUSH
24232: LD_INT 26
24234: PUSH
24235: LD_INT 27
24237: PUSH
24238: LD_INT 28
24240: PUSH
24241: LD_INT 29
24243: PUSH
24244: LD_INT 30
24246: PUSH
24247: LD_INT 31
24249: PUSH
24250: LD_INT 32
24252: PUSH
24253: LD_INT 33
24255: PUSH
24256: LD_INT 34
24258: PUSH
24259: LD_INT 35
24261: PUSH
24262: LD_INT 36
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 101
24305: PUSH
24306: LD_INT 102
24308: PUSH
24309: LD_INT 103
24311: PUSH
24312: LD_INT 104
24314: PUSH
24315: LD_INT 105
24317: PUSH
24318: LD_INT 106
24320: PUSH
24321: LD_INT 107
24323: PUSH
24324: LD_INT 108
24326: PUSH
24327: LD_INT 109
24329: PUSH
24330: LD_INT 110
24332: PUSH
24333: LD_INT 111
24335: PUSH
24336: LD_INT 112
24338: PUSH
24339: LD_INT 113
24341: PUSH
24342: LD_INT 114
24344: PUSH
24345: LD_INT 115
24347: PUSH
24348: LD_INT 116
24350: PUSH
24351: LD_INT 117
24353: PUSH
24354: LD_INT 118
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: ST_TO_ADDR
24381: GO 24384
24383: POP
// end else
24384: GO 24615
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24386: LD_ADDR_VAR 0 2
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: LD_INT 4
24402: PUSH
24403: LD_INT 5
24405: PUSH
24406: LD_INT 6
24408: PUSH
24409: LD_INT 7
24411: PUSH
24412: LD_INT 8
24414: PUSH
24415: LD_INT 9
24417: PUSH
24418: LD_INT 10
24420: PUSH
24421: LD_INT 11
24423: PUSH
24424: LD_INT 12
24426: PUSH
24427: LD_INT 13
24429: PUSH
24430: LD_INT 14
24432: PUSH
24433: LD_INT 15
24435: PUSH
24436: LD_INT 16
24438: PUSH
24439: LD_INT 17
24441: PUSH
24442: LD_INT 18
24444: PUSH
24445: LD_INT 19
24447: PUSH
24448: LD_INT 20
24450: PUSH
24451: LD_INT 21
24453: PUSH
24454: LD_INT 22
24456: PUSH
24457: LD_INT 23
24459: PUSH
24460: LD_INT 24
24462: PUSH
24463: LD_INT 25
24465: PUSH
24466: LD_INT 26
24468: PUSH
24469: LD_INT 27
24471: PUSH
24472: LD_INT 28
24474: PUSH
24475: LD_INT 29
24477: PUSH
24478: LD_INT 30
24480: PUSH
24481: LD_INT 31
24483: PUSH
24484: LD_INT 32
24486: PUSH
24487: LD_INT 33
24489: PUSH
24490: LD_INT 34
24492: PUSH
24493: LD_INT 35
24495: PUSH
24496: LD_INT 36
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 101
24539: PUSH
24540: LD_INT 102
24542: PUSH
24543: LD_INT 103
24545: PUSH
24546: LD_INT 104
24548: PUSH
24549: LD_INT 105
24551: PUSH
24552: LD_INT 106
24554: PUSH
24555: LD_INT 107
24557: PUSH
24558: LD_INT 108
24560: PUSH
24561: LD_INT 109
24563: PUSH
24564: LD_INT 110
24566: PUSH
24567: LD_INT 111
24569: PUSH
24570: LD_INT 112
24572: PUSH
24573: LD_INT 113
24575: PUSH
24576: LD_INT 114
24578: PUSH
24579: LD_INT 115
24581: PUSH
24582: LD_INT 116
24584: PUSH
24585: LD_INT 117
24587: PUSH
24588: LD_INT 118
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: ST_TO_ADDR
// if result then
24615: LD_VAR 0 2
24619: IFFALSE 25405
// begin normal :=  ;
24621: LD_ADDR_VAR 0 5
24625: PUSH
24626: LD_STRING 
24628: ST_TO_ADDR
// hardcore :=  ;
24629: LD_ADDR_VAR 0 6
24633: PUSH
24634: LD_STRING 
24636: ST_TO_ADDR
// active :=  ;
24637: LD_ADDR_VAR 0 7
24641: PUSH
24642: LD_STRING 
24644: ST_TO_ADDR
// for i = 1 to normalCounter do
24645: LD_ADDR_VAR 0 8
24649: PUSH
24650: DOUBLE
24651: LD_INT 1
24653: DEC
24654: ST_TO_ADDR
24655: LD_EXP 38
24659: PUSH
24660: FOR_TO
24661: IFFALSE 24762
// begin tmp := 0 ;
24663: LD_ADDR_VAR 0 3
24667: PUSH
24668: LD_STRING 0
24670: ST_TO_ADDR
// if result [ 1 ] then
24671: LD_VAR 0 2
24675: PUSH
24676: LD_INT 1
24678: ARRAY
24679: IFFALSE 24744
// if result [ 1 ] [ 1 ] = i then
24681: LD_VAR 0 2
24685: PUSH
24686: LD_INT 1
24688: ARRAY
24689: PUSH
24690: LD_INT 1
24692: ARRAY
24693: PUSH
24694: LD_VAR 0 8
24698: EQUAL
24699: IFFALSE 24744
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24701: LD_ADDR_VAR 0 2
24705: PUSH
24706: LD_VAR 0 2
24710: PPUSH
24711: LD_INT 1
24713: PPUSH
24714: LD_VAR 0 2
24718: PUSH
24719: LD_INT 1
24721: ARRAY
24722: PPUSH
24723: LD_INT 1
24725: PPUSH
24726: CALL_OW 3
24730: PPUSH
24731: CALL_OW 1
24735: ST_TO_ADDR
// tmp := 1 ;
24736: LD_ADDR_VAR 0 3
24740: PUSH
24741: LD_STRING 1
24743: ST_TO_ADDR
// end ; normal := normal & tmp ;
24744: LD_ADDR_VAR 0 5
24748: PUSH
24749: LD_VAR 0 5
24753: PUSH
24754: LD_VAR 0 3
24758: STR
24759: ST_TO_ADDR
// end ;
24760: GO 24660
24762: POP
24763: POP
// for i = 1 to hardcoreCounter do
24764: LD_ADDR_VAR 0 8
24768: PUSH
24769: DOUBLE
24770: LD_INT 1
24772: DEC
24773: ST_TO_ADDR
24774: LD_EXP 39
24778: PUSH
24779: FOR_TO
24780: IFFALSE 24885
// begin tmp := 0 ;
24782: LD_ADDR_VAR 0 3
24786: PUSH
24787: LD_STRING 0
24789: ST_TO_ADDR
// if result [ 2 ] then
24790: LD_VAR 0 2
24794: PUSH
24795: LD_INT 2
24797: ARRAY
24798: IFFALSE 24867
// if result [ 2 ] [ 1 ] = 100 + i then
24800: LD_VAR 0 2
24804: PUSH
24805: LD_INT 2
24807: ARRAY
24808: PUSH
24809: LD_INT 1
24811: ARRAY
24812: PUSH
24813: LD_INT 100
24815: PUSH
24816: LD_VAR 0 8
24820: PLUS
24821: EQUAL
24822: IFFALSE 24867
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24824: LD_ADDR_VAR 0 2
24828: PUSH
24829: LD_VAR 0 2
24833: PPUSH
24834: LD_INT 2
24836: PPUSH
24837: LD_VAR 0 2
24841: PUSH
24842: LD_INT 2
24844: ARRAY
24845: PPUSH
24846: LD_INT 1
24848: PPUSH
24849: CALL_OW 3
24853: PPUSH
24854: CALL_OW 1
24858: ST_TO_ADDR
// tmp := 1 ;
24859: LD_ADDR_VAR 0 3
24863: PUSH
24864: LD_STRING 1
24866: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24867: LD_ADDR_VAR 0 6
24871: PUSH
24872: LD_VAR 0 6
24876: PUSH
24877: LD_VAR 0 3
24881: STR
24882: ST_TO_ADDR
// end ;
24883: GO 24779
24885: POP
24886: POP
// if isGameLoad then
24887: LD_VAR 0 1
24891: IFFALSE 25366
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24893: LD_ADDR_VAR 0 4
24897: PUSH
24898: LD_EXP 42
24902: PUSH
24903: LD_EXP 41
24907: PUSH
24908: LD_EXP 43
24912: PUSH
24913: LD_EXP 40
24917: PUSH
24918: LD_EXP 44
24922: PUSH
24923: LD_EXP 45
24927: PUSH
24928: LD_EXP 46
24932: PUSH
24933: LD_EXP 47
24937: PUSH
24938: LD_EXP 48
24942: PUSH
24943: LD_EXP 49
24947: PUSH
24948: LD_EXP 50
24952: PUSH
24953: LD_EXP 51
24957: PUSH
24958: LD_EXP 52
24962: PUSH
24963: LD_EXP 53
24967: PUSH
24968: LD_EXP 61
24972: PUSH
24973: LD_EXP 62
24977: PUSH
24978: LD_EXP 63
24982: PUSH
24983: LD_EXP 64
24987: PUSH
24988: LD_EXP 66
24992: PUSH
24993: LD_EXP 67
24997: PUSH
24998: LD_EXP 68
25002: PUSH
25003: LD_EXP 71
25007: PUSH
25008: LD_EXP 73
25012: PUSH
25013: LD_EXP 74
25017: PUSH
25018: LD_EXP 75
25022: PUSH
25023: LD_EXP 77
25027: PUSH
25028: LD_EXP 78
25032: PUSH
25033: LD_EXP 81
25037: PUSH
25038: LD_EXP 82
25042: PUSH
25043: LD_EXP 83
25047: PUSH
25048: LD_EXP 84
25052: PUSH
25053: LD_EXP 85
25057: PUSH
25058: LD_EXP 86
25062: PUSH
25063: LD_EXP 87
25067: PUSH
25068: LD_EXP 88
25072: PUSH
25073: LD_EXP 89
25077: PUSH
25078: LD_EXP 54
25082: PUSH
25083: LD_EXP 55
25087: PUSH
25088: LD_EXP 58
25092: PUSH
25093: LD_EXP 59
25097: PUSH
25098: LD_EXP 60
25102: PUSH
25103: LD_EXP 56
25107: PUSH
25108: LD_EXP 57
25112: PUSH
25113: LD_EXP 65
25117: PUSH
25118: LD_EXP 69
25122: PUSH
25123: LD_EXP 70
25127: PUSH
25128: LD_EXP 72
25132: PUSH
25133: LD_EXP 76
25137: PUSH
25138: LD_EXP 79
25142: PUSH
25143: LD_EXP 80
25147: PUSH
25148: LD_EXP 90
25152: PUSH
25153: LD_EXP 91
25157: PUSH
25158: LD_EXP 92
25162: PUSH
25163: LD_EXP 93
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: ST_TO_ADDR
// tmp :=  ;
25224: LD_ADDR_VAR 0 3
25228: PUSH
25229: LD_STRING 
25231: ST_TO_ADDR
// for i = 1 to normalCounter do
25232: LD_ADDR_VAR 0 8
25236: PUSH
25237: DOUBLE
25238: LD_INT 1
25240: DEC
25241: ST_TO_ADDR
25242: LD_EXP 38
25246: PUSH
25247: FOR_TO
25248: IFFALSE 25284
// begin if flags [ i ] then
25250: LD_VAR 0 4
25254: PUSH
25255: LD_VAR 0 8
25259: ARRAY
25260: IFFALSE 25282
// tmp := tmp & i & ; ;
25262: LD_ADDR_VAR 0 3
25266: PUSH
25267: LD_VAR 0 3
25271: PUSH
25272: LD_VAR 0 8
25276: STR
25277: PUSH
25278: LD_STRING ;
25280: STR
25281: ST_TO_ADDR
// end ;
25282: GO 25247
25284: POP
25285: POP
// for i = 1 to hardcoreCounter do
25286: LD_ADDR_VAR 0 8
25290: PUSH
25291: DOUBLE
25292: LD_INT 1
25294: DEC
25295: ST_TO_ADDR
25296: LD_EXP 39
25300: PUSH
25301: FOR_TO
25302: IFFALSE 25348
// begin if flags [ normalCounter + i ] then
25304: LD_VAR 0 4
25308: PUSH
25309: LD_EXP 38
25313: PUSH
25314: LD_VAR 0 8
25318: PLUS
25319: ARRAY
25320: IFFALSE 25346
// tmp := tmp & ( 100 + i ) & ; ;
25322: LD_ADDR_VAR 0 3
25326: PUSH
25327: LD_VAR 0 3
25331: PUSH
25332: LD_INT 100
25334: PUSH
25335: LD_VAR 0 8
25339: PLUS
25340: STR
25341: PUSH
25342: LD_STRING ;
25344: STR
25345: ST_TO_ADDR
// end ;
25346: GO 25301
25348: POP
25349: POP
// if tmp then
25350: LD_VAR 0 3
25354: IFFALSE 25366
// active := tmp ;
25356: LD_ADDR_VAR 0 7
25360: PUSH
25361: LD_VAR 0 3
25365: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25366: LD_STRING getStreamItemsFromMission("
25368: PUSH
25369: LD_VAR 0 5
25373: STR
25374: PUSH
25375: LD_STRING ","
25377: STR
25378: PUSH
25379: LD_VAR 0 6
25383: STR
25384: PUSH
25385: LD_STRING ","
25387: STR
25388: PUSH
25389: LD_VAR 0 7
25393: STR
25394: PUSH
25395: LD_STRING ")
25397: STR
25398: PPUSH
25399: CALL_OW 559
// end else
25403: GO 25412
// ToLua ( getStreamItemsFromMission("","","") ) ;
25405: LD_STRING getStreamItemsFromMission("","","")
25407: PPUSH
25408: CALL_OW 559
// end ;
25412: LD_VAR 0 2
25416: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25417: LD_EXP 37
25421: PUSH
25422: LD_EXP 42
25426: AND
25427: IFFALSE 25551
25429: GO 25431
25431: DISABLE
25432: LD_INT 0
25434: PPUSH
25435: PPUSH
// begin enable ;
25436: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25437: LD_ADDR_VAR 0 2
25441: PUSH
25442: LD_INT 22
25444: PUSH
25445: LD_OWVAR 2
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 2
25456: PUSH
25457: LD_INT 34
25459: PUSH
25460: LD_INT 7
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 34
25469: PUSH
25470: LD_INT 45
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 34
25479: PUSH
25480: LD_INT 28
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 34
25489: PUSH
25490: LD_INT 47
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PPUSH
25508: CALL_OW 69
25512: ST_TO_ADDR
// if not tmp then
25513: LD_VAR 0 2
25517: NOT
25518: IFFALSE 25522
// exit ;
25520: GO 25551
// for i in tmp do
25522: LD_ADDR_VAR 0 1
25526: PUSH
25527: LD_VAR 0 2
25531: PUSH
25532: FOR_IN
25533: IFFALSE 25549
// begin SetLives ( i , 0 ) ;
25535: LD_VAR 0 1
25539: PPUSH
25540: LD_INT 0
25542: PPUSH
25543: CALL_OW 234
// end ;
25547: GO 25532
25549: POP
25550: POP
// end ;
25551: PPOPN 2
25553: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25554: LD_EXP 37
25558: PUSH
25559: LD_EXP 43
25563: AND
25564: IFFALSE 25648
25566: GO 25568
25568: DISABLE
25569: LD_INT 0
25571: PPUSH
25572: PPUSH
// begin enable ;
25573: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25574: LD_ADDR_VAR 0 2
25578: PUSH
25579: LD_INT 22
25581: PUSH
25582: LD_OWVAR 2
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 32
25593: PUSH
25594: LD_INT 3
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PPUSH
25605: CALL_OW 69
25609: ST_TO_ADDR
// if not tmp then
25610: LD_VAR 0 2
25614: NOT
25615: IFFALSE 25619
// exit ;
25617: GO 25648
// for i in tmp do
25619: LD_ADDR_VAR 0 1
25623: PUSH
25624: LD_VAR 0 2
25628: PUSH
25629: FOR_IN
25630: IFFALSE 25646
// begin SetLives ( i , 0 ) ;
25632: LD_VAR 0 1
25636: PPUSH
25637: LD_INT 0
25639: PPUSH
25640: CALL_OW 234
// end ;
25644: GO 25629
25646: POP
25647: POP
// end ;
25648: PPOPN 2
25650: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25651: LD_EXP 37
25655: PUSH
25656: LD_EXP 40
25660: AND
25661: IFFALSE 25754
25663: GO 25665
25665: DISABLE
25666: LD_INT 0
25668: PPUSH
// begin enable ;
25669: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25670: LD_ADDR_VAR 0 1
25674: PUSH
25675: LD_INT 22
25677: PUSH
25678: LD_OWVAR 2
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: LD_INT 25
25692: PUSH
25693: LD_INT 5
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 25
25702: PUSH
25703: LD_INT 9
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 25
25712: PUSH
25713: LD_INT 8
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PPUSH
25730: CALL_OW 69
25734: PUSH
25735: FOR_IN
25736: IFFALSE 25752
// begin SetClass ( i , 1 ) ;
25738: LD_VAR 0 1
25742: PPUSH
25743: LD_INT 1
25745: PPUSH
25746: CALL_OW 336
// end ;
25750: GO 25735
25752: POP
25753: POP
// end ;
25754: PPOPN 1
25756: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25757: LD_EXP 37
25761: PUSH
25762: LD_EXP 41
25766: AND
25767: PUSH
25768: LD_OWVAR 65
25772: PUSH
25773: LD_INT 7
25775: LESS
25776: AND
25777: IFFALSE 25791
25779: GO 25781
25781: DISABLE
// begin enable ;
25782: ENABLE
// game_speed := 7 ;
25783: LD_ADDR_OWVAR 65
25787: PUSH
25788: LD_INT 7
25790: ST_TO_ADDR
// end ;
25791: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25792: LD_EXP 37
25796: PUSH
25797: LD_EXP 44
25801: AND
25802: IFFALSE 26004
25804: GO 25806
25806: DISABLE
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
25811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25812: LD_ADDR_VAR 0 3
25816: PUSH
25817: LD_INT 81
25819: PUSH
25820: LD_OWVAR 2
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 21
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PPUSH
25843: CALL_OW 69
25847: ST_TO_ADDR
// if not tmp then
25848: LD_VAR 0 3
25852: NOT
25853: IFFALSE 25857
// exit ;
25855: GO 26004
// if tmp > 5 then
25857: LD_VAR 0 3
25861: PUSH
25862: LD_INT 5
25864: GREATER
25865: IFFALSE 25877
// k := 5 else
25867: LD_ADDR_VAR 0 2
25871: PUSH
25872: LD_INT 5
25874: ST_TO_ADDR
25875: GO 25887
// k := tmp ;
25877: LD_ADDR_VAR 0 2
25881: PUSH
25882: LD_VAR 0 3
25886: ST_TO_ADDR
// for i := 1 to k do
25887: LD_ADDR_VAR 0 1
25891: PUSH
25892: DOUBLE
25893: LD_INT 1
25895: DEC
25896: ST_TO_ADDR
25897: LD_VAR 0 2
25901: PUSH
25902: FOR_TO
25903: IFFALSE 26002
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25905: LD_VAR 0 3
25909: PUSH
25910: LD_VAR 0 1
25914: ARRAY
25915: PPUSH
25916: LD_VAR 0 1
25920: PUSH
25921: LD_INT 4
25923: MOD
25924: PUSH
25925: LD_INT 1
25927: PLUS
25928: PPUSH
25929: CALL_OW 259
25933: PUSH
25934: LD_INT 10
25936: LESS
25937: IFFALSE 26000
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25939: LD_VAR 0 3
25943: PUSH
25944: LD_VAR 0 1
25948: ARRAY
25949: PPUSH
25950: LD_VAR 0 1
25954: PUSH
25955: LD_INT 4
25957: MOD
25958: PUSH
25959: LD_INT 1
25961: PLUS
25962: PPUSH
25963: LD_VAR 0 3
25967: PUSH
25968: LD_VAR 0 1
25972: ARRAY
25973: PPUSH
25974: LD_VAR 0 1
25978: PUSH
25979: LD_INT 4
25981: MOD
25982: PUSH
25983: LD_INT 1
25985: PLUS
25986: PPUSH
25987: CALL_OW 259
25991: PUSH
25992: LD_INT 1
25994: PLUS
25995: PPUSH
25996: CALL_OW 237
26000: GO 25902
26002: POP
26003: POP
// end ;
26004: PPOPN 3
26006: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26007: LD_EXP 37
26011: PUSH
26012: LD_EXP 45
26016: AND
26017: IFFALSE 26037
26019: GO 26021
26021: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26022: LD_INT 4
26024: PPUSH
26025: LD_OWVAR 2
26029: PPUSH
26030: LD_INT 0
26032: PPUSH
26033: CALL_OW 324
26037: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26038: LD_EXP 37
26042: PUSH
26043: LD_EXP 74
26047: AND
26048: IFFALSE 26068
26050: GO 26052
26052: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26053: LD_INT 19
26055: PPUSH
26056: LD_OWVAR 2
26060: PPUSH
26061: LD_INT 0
26063: PPUSH
26064: CALL_OW 324
26068: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26069: LD_EXP 37
26073: PUSH
26074: LD_EXP 46
26078: AND
26079: IFFALSE 26181
26081: GO 26083
26083: DISABLE
26084: LD_INT 0
26086: PPUSH
26087: PPUSH
// begin enable ;
26088: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26089: LD_ADDR_VAR 0 2
26093: PUSH
26094: LD_INT 22
26096: PUSH
26097: LD_OWVAR 2
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: LD_INT 34
26111: PUSH
26112: LD_INT 11
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 34
26121: PUSH
26122: LD_INT 30
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PPUSH
26138: CALL_OW 69
26142: ST_TO_ADDR
// if not tmp then
26143: LD_VAR 0 2
26147: NOT
26148: IFFALSE 26152
// exit ;
26150: GO 26181
// for i in tmp do
26152: LD_ADDR_VAR 0 1
26156: PUSH
26157: LD_VAR 0 2
26161: PUSH
26162: FOR_IN
26163: IFFALSE 26179
// begin SetLives ( i , 0 ) ;
26165: LD_VAR 0 1
26169: PPUSH
26170: LD_INT 0
26172: PPUSH
26173: CALL_OW 234
// end ;
26177: GO 26162
26179: POP
26180: POP
// end ;
26181: PPOPN 2
26183: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26184: LD_EXP 37
26188: PUSH
26189: LD_EXP 47
26193: AND
26194: IFFALSE 26214
26196: GO 26198
26198: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26199: LD_INT 32
26201: PPUSH
26202: LD_OWVAR 2
26206: PPUSH
26207: LD_INT 0
26209: PPUSH
26210: CALL_OW 324
26214: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26215: LD_EXP 37
26219: PUSH
26220: LD_EXP 48
26224: AND
26225: IFFALSE 26406
26227: GO 26229
26229: DISABLE
26230: LD_INT 0
26232: PPUSH
26233: PPUSH
26234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26235: LD_ADDR_VAR 0 2
26239: PUSH
26240: LD_INT 22
26242: PUSH
26243: LD_OWVAR 2
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 33
26254: PUSH
26255: LD_INT 3
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PPUSH
26266: CALL_OW 69
26270: ST_TO_ADDR
// if not tmp then
26271: LD_VAR 0 2
26275: NOT
26276: IFFALSE 26280
// exit ;
26278: GO 26406
// side := 0 ;
26280: LD_ADDR_VAR 0 3
26284: PUSH
26285: LD_INT 0
26287: ST_TO_ADDR
// for i := 1 to 8 do
26288: LD_ADDR_VAR 0 1
26292: PUSH
26293: DOUBLE
26294: LD_INT 1
26296: DEC
26297: ST_TO_ADDR
26298: LD_INT 8
26300: PUSH
26301: FOR_TO
26302: IFFALSE 26350
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26304: LD_OWVAR 2
26308: PUSH
26309: LD_VAR 0 1
26313: NONEQUAL
26314: PUSH
26315: LD_OWVAR 2
26319: PPUSH
26320: LD_VAR 0 1
26324: PPUSH
26325: CALL_OW 81
26329: PUSH
26330: LD_INT 2
26332: EQUAL
26333: AND
26334: IFFALSE 26348
// begin side := i ;
26336: LD_ADDR_VAR 0 3
26340: PUSH
26341: LD_VAR 0 1
26345: ST_TO_ADDR
// break ;
26346: GO 26350
// end ;
26348: GO 26301
26350: POP
26351: POP
// if not side then
26352: LD_VAR 0 3
26356: NOT
26357: IFFALSE 26361
// exit ;
26359: GO 26406
// for i := 1 to tmp do
26361: LD_ADDR_VAR 0 1
26365: PUSH
26366: DOUBLE
26367: LD_INT 1
26369: DEC
26370: ST_TO_ADDR
26371: LD_VAR 0 2
26375: PUSH
26376: FOR_TO
26377: IFFALSE 26404
// if Prob ( 60 ) then
26379: LD_INT 60
26381: PPUSH
26382: CALL_OW 13
26386: IFFALSE 26402
// SetSide ( i , side ) ;
26388: LD_VAR 0 1
26392: PPUSH
26393: LD_VAR 0 3
26397: PPUSH
26398: CALL_OW 235
26402: GO 26376
26404: POP
26405: POP
// end ;
26406: PPOPN 3
26408: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26409: LD_EXP 37
26413: PUSH
26414: LD_EXP 50
26418: AND
26419: IFFALSE 26538
26421: GO 26423
26423: DISABLE
26424: LD_INT 0
26426: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26427: LD_ADDR_VAR 0 1
26431: PUSH
26432: LD_INT 22
26434: PUSH
26435: LD_OWVAR 2
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 21
26446: PUSH
26447: LD_INT 1
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 3
26456: PUSH
26457: LD_INT 23
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: LIST
26475: PPUSH
26476: CALL_OW 69
26480: PUSH
26481: FOR_IN
26482: IFFALSE 26536
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26484: LD_VAR 0 1
26488: PPUSH
26489: CALL_OW 257
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: LD_INT 2
26499: PUSH
26500: LD_INT 3
26502: PUSH
26503: LD_INT 4
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: IN
26512: IFFALSE 26534
// SetClass ( un , rand ( 1 , 4 ) ) ;
26514: LD_VAR 0 1
26518: PPUSH
26519: LD_INT 1
26521: PPUSH
26522: LD_INT 4
26524: PPUSH
26525: CALL_OW 12
26529: PPUSH
26530: CALL_OW 336
26534: GO 26481
26536: POP
26537: POP
// end ;
26538: PPOPN 1
26540: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26541: LD_EXP 37
26545: PUSH
26546: LD_EXP 49
26550: AND
26551: IFFALSE 26630
26553: GO 26555
26555: DISABLE
26556: LD_INT 0
26558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26559: LD_ADDR_VAR 0 1
26563: PUSH
26564: LD_INT 22
26566: PUSH
26567: LD_OWVAR 2
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 21
26578: PUSH
26579: LD_INT 3
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PPUSH
26590: CALL_OW 69
26594: ST_TO_ADDR
// if not tmp then
26595: LD_VAR 0 1
26599: NOT
26600: IFFALSE 26604
// exit ;
26602: GO 26630
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26604: LD_VAR 0 1
26608: PUSH
26609: LD_INT 1
26611: PPUSH
26612: LD_VAR 0 1
26616: PPUSH
26617: CALL_OW 12
26621: ARRAY
26622: PPUSH
26623: LD_INT 100
26625: PPUSH
26626: CALL_OW 234
// end ;
26630: PPOPN 1
26632: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26633: LD_EXP 37
26637: PUSH
26638: LD_EXP 51
26642: AND
26643: IFFALSE 26741
26645: GO 26647
26647: DISABLE
26648: LD_INT 0
26650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26651: LD_ADDR_VAR 0 1
26655: PUSH
26656: LD_INT 22
26658: PUSH
26659: LD_OWVAR 2
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 21
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 69
26686: ST_TO_ADDR
// if not tmp then
26687: LD_VAR 0 1
26691: NOT
26692: IFFALSE 26696
// exit ;
26694: GO 26741
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26696: LD_VAR 0 1
26700: PUSH
26701: LD_INT 1
26703: PPUSH
26704: LD_VAR 0 1
26708: PPUSH
26709: CALL_OW 12
26713: ARRAY
26714: PPUSH
26715: LD_INT 1
26717: PPUSH
26718: LD_INT 4
26720: PPUSH
26721: CALL_OW 12
26725: PPUSH
26726: LD_INT 3000
26728: PPUSH
26729: LD_INT 9000
26731: PPUSH
26732: CALL_OW 12
26736: PPUSH
26737: CALL_OW 492
// end ;
26741: PPOPN 1
26743: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26744: LD_EXP 37
26748: PUSH
26749: LD_EXP 52
26753: AND
26754: IFFALSE 26774
26756: GO 26758
26758: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26759: LD_INT 1
26761: PPUSH
26762: LD_OWVAR 2
26766: PPUSH
26767: LD_INT 0
26769: PPUSH
26770: CALL_OW 324
26774: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26775: LD_EXP 37
26779: PUSH
26780: LD_EXP 53
26784: AND
26785: IFFALSE 26868
26787: GO 26789
26789: DISABLE
26790: LD_INT 0
26792: PPUSH
26793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26794: LD_ADDR_VAR 0 2
26798: PUSH
26799: LD_INT 22
26801: PUSH
26802: LD_OWVAR 2
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 21
26813: PUSH
26814: LD_INT 3
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PPUSH
26825: CALL_OW 69
26829: ST_TO_ADDR
// if not tmp then
26830: LD_VAR 0 2
26834: NOT
26835: IFFALSE 26839
// exit ;
26837: GO 26868
// for i in tmp do
26839: LD_ADDR_VAR 0 1
26843: PUSH
26844: LD_VAR 0 2
26848: PUSH
26849: FOR_IN
26850: IFFALSE 26866
// SetBLevel ( i , 10 ) ;
26852: LD_VAR 0 1
26856: PPUSH
26857: LD_INT 10
26859: PPUSH
26860: CALL_OW 241
26864: GO 26849
26866: POP
26867: POP
// end ;
26868: PPOPN 2
26870: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26871: LD_EXP 37
26875: PUSH
26876: LD_EXP 54
26880: AND
26881: IFFALSE 26992
26883: GO 26885
26885: DISABLE
26886: LD_INT 0
26888: PPUSH
26889: PPUSH
26890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26891: LD_ADDR_VAR 0 3
26895: PUSH
26896: LD_INT 22
26898: PUSH
26899: LD_OWVAR 2
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 25
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PPUSH
26922: CALL_OW 69
26926: ST_TO_ADDR
// if not tmp then
26927: LD_VAR 0 3
26931: NOT
26932: IFFALSE 26936
// exit ;
26934: GO 26992
// un := tmp [ rand ( 1 , tmp ) ] ;
26936: LD_ADDR_VAR 0 2
26940: PUSH
26941: LD_VAR 0 3
26945: PUSH
26946: LD_INT 1
26948: PPUSH
26949: LD_VAR 0 3
26953: PPUSH
26954: CALL_OW 12
26958: ARRAY
26959: ST_TO_ADDR
// if Crawls ( un ) then
26960: LD_VAR 0 2
26964: PPUSH
26965: CALL_OW 318
26969: IFFALSE 26980
// ComWalk ( un ) ;
26971: LD_VAR 0 2
26975: PPUSH
26976: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26980: LD_VAR 0 2
26984: PPUSH
26985: LD_INT 5
26987: PPUSH
26988: CALL_OW 336
// end ;
26992: PPOPN 3
26994: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26995: LD_EXP 37
26999: PUSH
27000: LD_EXP 55
27004: AND
27005: PUSH
27006: LD_OWVAR 67
27010: PUSH
27011: LD_INT 4
27013: LESS
27014: AND
27015: IFFALSE 27034
27017: GO 27019
27019: DISABLE
// begin Difficulty := Difficulty + 1 ;
27020: LD_ADDR_OWVAR 67
27024: PUSH
27025: LD_OWVAR 67
27029: PUSH
27030: LD_INT 1
27032: PLUS
27033: ST_TO_ADDR
// end ;
27034: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27035: LD_EXP 37
27039: PUSH
27040: LD_EXP 56
27044: AND
27045: IFFALSE 27148
27047: GO 27049
27049: DISABLE
27050: LD_INT 0
27052: PPUSH
// begin for i := 1 to 5 do
27053: LD_ADDR_VAR 0 1
27057: PUSH
27058: DOUBLE
27059: LD_INT 1
27061: DEC
27062: ST_TO_ADDR
27063: LD_INT 5
27065: PUSH
27066: FOR_TO
27067: IFFALSE 27146
// begin uc_nation := nation_nature ;
27069: LD_ADDR_OWVAR 21
27073: PUSH
27074: LD_INT 0
27076: ST_TO_ADDR
// uc_side := 0 ;
27077: LD_ADDR_OWVAR 20
27081: PUSH
27082: LD_INT 0
27084: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27085: LD_ADDR_OWVAR 29
27089: PUSH
27090: LD_INT 12
27092: PUSH
27093: LD_INT 12
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: ST_TO_ADDR
// hc_agressivity := 20 ;
27100: LD_ADDR_OWVAR 35
27104: PUSH
27105: LD_INT 20
27107: ST_TO_ADDR
// hc_class := class_tiger ;
27108: LD_ADDR_OWVAR 28
27112: PUSH
27113: LD_INT 14
27115: ST_TO_ADDR
// hc_gallery :=  ;
27116: LD_ADDR_OWVAR 33
27120: PUSH
27121: LD_STRING 
27123: ST_TO_ADDR
// hc_name :=  ;
27124: LD_ADDR_OWVAR 26
27128: PUSH
27129: LD_STRING 
27131: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27132: CALL_OW 44
27136: PPUSH
27137: LD_INT 0
27139: PPUSH
27140: CALL_OW 51
// end ;
27144: GO 27066
27146: POP
27147: POP
// end ;
27148: PPOPN 1
27150: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27151: LD_EXP 37
27155: PUSH
27156: LD_EXP 57
27160: AND
27161: IFFALSE 27170
27163: GO 27165
27165: DISABLE
// StreamSibBomb ;
27166: CALL 27171 0 0
27170: END
// export function StreamSibBomb ; var i , x , y ; begin
27171: LD_INT 0
27173: PPUSH
27174: PPUSH
27175: PPUSH
27176: PPUSH
// result := false ;
27177: LD_ADDR_VAR 0 1
27181: PUSH
27182: LD_INT 0
27184: ST_TO_ADDR
// for i := 1 to 16 do
27185: LD_ADDR_VAR 0 2
27189: PUSH
27190: DOUBLE
27191: LD_INT 1
27193: DEC
27194: ST_TO_ADDR
27195: LD_INT 16
27197: PUSH
27198: FOR_TO
27199: IFFALSE 27398
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27201: LD_ADDR_VAR 0 3
27205: PUSH
27206: LD_INT 10
27208: PUSH
27209: LD_INT 20
27211: PUSH
27212: LD_INT 30
27214: PUSH
27215: LD_INT 40
27217: PUSH
27218: LD_INT 50
27220: PUSH
27221: LD_INT 60
27223: PUSH
27224: LD_INT 70
27226: PUSH
27227: LD_INT 80
27229: PUSH
27230: LD_INT 90
27232: PUSH
27233: LD_INT 100
27235: PUSH
27236: LD_INT 110
27238: PUSH
27239: LD_INT 120
27241: PUSH
27242: LD_INT 130
27244: PUSH
27245: LD_INT 140
27247: PUSH
27248: LD_INT 150
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: PPUSH
27271: LD_INT 15
27273: PPUSH
27274: CALL_OW 12
27278: ARRAY
27279: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27280: LD_ADDR_VAR 0 4
27284: PUSH
27285: LD_INT 10
27287: PUSH
27288: LD_INT 20
27290: PUSH
27291: LD_INT 30
27293: PUSH
27294: LD_INT 40
27296: PUSH
27297: LD_INT 50
27299: PUSH
27300: LD_INT 60
27302: PUSH
27303: LD_INT 70
27305: PUSH
27306: LD_INT 80
27308: PUSH
27309: LD_INT 90
27311: PUSH
27312: LD_INT 100
27314: PUSH
27315: LD_INT 110
27317: PUSH
27318: LD_INT 120
27320: PUSH
27321: LD_INT 130
27323: PUSH
27324: LD_INT 140
27326: PUSH
27327: LD_INT 150
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: PPUSH
27350: LD_INT 15
27352: PPUSH
27353: CALL_OW 12
27357: ARRAY
27358: ST_TO_ADDR
// if ValidHex ( x , y ) then
27359: LD_VAR 0 3
27363: PPUSH
27364: LD_VAR 0 4
27368: PPUSH
27369: CALL_OW 488
27373: IFFALSE 27396
// begin result := [ x , y ] ;
27375: LD_ADDR_VAR 0 1
27379: PUSH
27380: LD_VAR 0 3
27384: PUSH
27385: LD_VAR 0 4
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: ST_TO_ADDR
// break ;
27394: GO 27398
// end ; end ;
27396: GO 27198
27398: POP
27399: POP
// if result then
27400: LD_VAR 0 1
27404: IFFALSE 27464
// begin ToLua ( playSibBomb() ) ;
27406: LD_STRING playSibBomb()
27408: PPUSH
27409: CALL_OW 559
// wait ( 0 0$14 ) ;
27413: LD_INT 490
27415: PPUSH
27416: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27420: LD_VAR 0 1
27424: PUSH
27425: LD_INT 1
27427: ARRAY
27428: PPUSH
27429: LD_VAR 0 1
27433: PUSH
27434: LD_INT 2
27436: ARRAY
27437: PPUSH
27438: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27442: LD_VAR 0 1
27446: PUSH
27447: LD_INT 1
27449: ARRAY
27450: PPUSH
27451: LD_VAR 0 1
27455: PUSH
27456: LD_INT 2
27458: ARRAY
27459: PPUSH
27460: CALL_OW 429
// end ; end ;
27464: LD_VAR 0 1
27468: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27469: LD_EXP 37
27473: PUSH
27474: LD_EXP 59
27478: AND
27479: IFFALSE 27491
27481: GO 27483
27483: DISABLE
// YouLost (  ) ;
27484: LD_STRING 
27486: PPUSH
27487: CALL_OW 104
27491: END
// every 0 0$1 trigger StreamModeActive and sFog do
27492: LD_EXP 37
27496: PUSH
27497: LD_EXP 58
27501: AND
27502: IFFALSE 27516
27504: GO 27506
27506: DISABLE
// FogOff ( your_side ) ;
27507: LD_OWVAR 2
27511: PPUSH
27512: CALL_OW 344
27516: END
// every 0 0$1 trigger StreamModeActive and sSun do
27517: LD_EXP 37
27521: PUSH
27522: LD_EXP 60
27526: AND
27527: IFFALSE 27555
27529: GO 27531
27531: DISABLE
// begin solar_recharge_percent := 0 ;
27532: LD_ADDR_OWVAR 79
27536: PUSH
27537: LD_INT 0
27539: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27540: LD_INT 10500
27542: PPUSH
27543: CALL_OW 67
// solar_recharge_percent := 100 ;
27547: LD_ADDR_OWVAR 79
27551: PUSH
27552: LD_INT 100
27554: ST_TO_ADDR
// end ;
27555: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27556: LD_EXP 37
27560: PUSH
27561: LD_EXP 61
27565: AND
27566: IFFALSE 27805
27568: GO 27570
27570: DISABLE
27571: LD_INT 0
27573: PPUSH
27574: PPUSH
27575: PPUSH
// begin tmp := [ ] ;
27576: LD_ADDR_VAR 0 3
27580: PUSH
27581: EMPTY
27582: ST_TO_ADDR
// for i := 1 to 6 do
27583: LD_ADDR_VAR 0 1
27587: PUSH
27588: DOUBLE
27589: LD_INT 1
27591: DEC
27592: ST_TO_ADDR
27593: LD_INT 6
27595: PUSH
27596: FOR_TO
27597: IFFALSE 27702
// begin uc_nation := nation_nature ;
27599: LD_ADDR_OWVAR 21
27603: PUSH
27604: LD_INT 0
27606: ST_TO_ADDR
// uc_side := 0 ;
27607: LD_ADDR_OWVAR 20
27611: PUSH
27612: LD_INT 0
27614: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27615: LD_ADDR_OWVAR 29
27619: PUSH
27620: LD_INT 12
27622: PUSH
27623: LD_INT 12
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: ST_TO_ADDR
// hc_agressivity := 20 ;
27630: LD_ADDR_OWVAR 35
27634: PUSH
27635: LD_INT 20
27637: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27638: LD_ADDR_OWVAR 28
27642: PUSH
27643: LD_INT 17
27645: ST_TO_ADDR
// hc_gallery :=  ;
27646: LD_ADDR_OWVAR 33
27650: PUSH
27651: LD_STRING 
27653: ST_TO_ADDR
// hc_name :=  ;
27654: LD_ADDR_OWVAR 26
27658: PUSH
27659: LD_STRING 
27661: ST_TO_ADDR
// un := CreateHuman ;
27662: LD_ADDR_VAR 0 2
27666: PUSH
27667: CALL_OW 44
27671: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27672: LD_VAR 0 2
27676: PPUSH
27677: LD_INT 1
27679: PPUSH
27680: CALL_OW 51
// tmp := tmp ^ un ;
27684: LD_ADDR_VAR 0 3
27688: PUSH
27689: LD_VAR 0 3
27693: PUSH
27694: LD_VAR 0 2
27698: ADD
27699: ST_TO_ADDR
// end ;
27700: GO 27596
27702: POP
27703: POP
// repeat wait ( 0 0$1 ) ;
27704: LD_INT 35
27706: PPUSH
27707: CALL_OW 67
// for un in tmp do
27711: LD_ADDR_VAR 0 2
27715: PUSH
27716: LD_VAR 0 3
27720: PUSH
27721: FOR_IN
27722: IFFALSE 27796
// begin if IsDead ( un ) then
27724: LD_VAR 0 2
27728: PPUSH
27729: CALL_OW 301
27733: IFFALSE 27753
// begin tmp := tmp diff un ;
27735: LD_ADDR_VAR 0 3
27739: PUSH
27740: LD_VAR 0 3
27744: PUSH
27745: LD_VAR 0 2
27749: DIFF
27750: ST_TO_ADDR
// continue ;
27751: GO 27721
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27753: LD_VAR 0 2
27757: PPUSH
27758: LD_INT 3
27760: PUSH
27761: LD_INT 22
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PPUSH
27775: CALL_OW 69
27779: PPUSH
27780: LD_VAR 0 2
27784: PPUSH
27785: CALL_OW 74
27789: PPUSH
27790: CALL_OW 115
// end ;
27794: GO 27721
27796: POP
27797: POP
// until not tmp ;
27798: LD_VAR 0 3
27802: NOT
27803: IFFALSE 27704
// end ;
27805: PPOPN 3
27807: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27808: LD_EXP 37
27812: PUSH
27813: LD_EXP 62
27817: AND
27818: IFFALSE 27872
27820: GO 27822
27822: DISABLE
// begin ToLua ( displayTroll(); ) ;
27823: LD_STRING displayTroll();
27825: PPUSH
27826: CALL_OW 559
// wait ( 3 3$00 ) ;
27830: LD_INT 6300
27832: PPUSH
27833: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27837: LD_STRING hideTroll();
27839: PPUSH
27840: CALL_OW 559
// wait ( 1 1$00 ) ;
27844: LD_INT 2100
27846: PPUSH
27847: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27851: LD_STRING displayTroll();
27853: PPUSH
27854: CALL_OW 559
// wait ( 1 1$00 ) ;
27858: LD_INT 2100
27860: PPUSH
27861: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27865: LD_STRING hideTroll();
27867: PPUSH
27868: CALL_OW 559
// end ;
27872: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27873: LD_EXP 37
27877: PUSH
27878: LD_EXP 63
27882: AND
27883: IFFALSE 27946
27885: GO 27887
27887: DISABLE
27888: LD_INT 0
27890: PPUSH
// begin p := 0 ;
27891: LD_ADDR_VAR 0 1
27895: PUSH
27896: LD_INT 0
27898: ST_TO_ADDR
// repeat game_speed := 1 ;
27899: LD_ADDR_OWVAR 65
27903: PUSH
27904: LD_INT 1
27906: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27907: LD_INT 35
27909: PPUSH
27910: CALL_OW 67
// p := p + 1 ;
27914: LD_ADDR_VAR 0 1
27918: PUSH
27919: LD_VAR 0 1
27923: PUSH
27924: LD_INT 1
27926: PLUS
27927: ST_TO_ADDR
// until p >= 60 ;
27928: LD_VAR 0 1
27932: PUSH
27933: LD_INT 60
27935: GREATEREQUAL
27936: IFFALSE 27899
// game_speed := 4 ;
27938: LD_ADDR_OWVAR 65
27942: PUSH
27943: LD_INT 4
27945: ST_TO_ADDR
// end ;
27946: PPOPN 1
27948: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27949: LD_EXP 37
27953: PUSH
27954: LD_EXP 64
27958: AND
27959: IFFALSE 28105
27961: GO 27963
27963: DISABLE
27964: LD_INT 0
27966: PPUSH
27967: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27968: LD_ADDR_VAR 0 1
27972: PUSH
27973: LD_INT 22
27975: PUSH
27976: LD_OWVAR 2
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 2
27987: PUSH
27988: LD_INT 30
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 30
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: LIST
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PPUSH
28017: CALL_OW 69
28021: ST_TO_ADDR
// if not depot then
28022: LD_VAR 0 1
28026: NOT
28027: IFFALSE 28031
// exit ;
28029: GO 28105
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28031: LD_ADDR_VAR 0 2
28035: PUSH
28036: LD_VAR 0 1
28040: PUSH
28041: LD_INT 1
28043: PPUSH
28044: LD_VAR 0 1
28048: PPUSH
28049: CALL_OW 12
28053: ARRAY
28054: PPUSH
28055: CALL_OW 274
28059: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28060: LD_VAR 0 2
28064: PPUSH
28065: LD_INT 1
28067: PPUSH
28068: LD_INT 0
28070: PPUSH
28071: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28075: LD_VAR 0 2
28079: PPUSH
28080: LD_INT 2
28082: PPUSH
28083: LD_INT 0
28085: PPUSH
28086: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28090: LD_VAR 0 2
28094: PPUSH
28095: LD_INT 3
28097: PPUSH
28098: LD_INT 0
28100: PPUSH
28101: CALL_OW 277
// end ;
28105: PPOPN 2
28107: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28108: LD_EXP 37
28112: PUSH
28113: LD_EXP 65
28117: AND
28118: IFFALSE 28215
28120: GO 28122
28122: DISABLE
28123: LD_INT 0
28125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28126: LD_ADDR_VAR 0 1
28130: PUSH
28131: LD_INT 22
28133: PUSH
28134: LD_OWVAR 2
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 21
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 3
28155: PUSH
28156: LD_INT 23
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: LIST
28174: PPUSH
28175: CALL_OW 69
28179: ST_TO_ADDR
// if not tmp then
28180: LD_VAR 0 1
28184: NOT
28185: IFFALSE 28189
// exit ;
28187: GO 28215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28189: LD_VAR 0 1
28193: PUSH
28194: LD_INT 1
28196: PPUSH
28197: LD_VAR 0 1
28201: PPUSH
28202: CALL_OW 12
28206: ARRAY
28207: PPUSH
28208: LD_INT 200
28210: PPUSH
28211: CALL_OW 234
// end ;
28215: PPOPN 1
28217: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28218: LD_EXP 37
28222: PUSH
28223: LD_EXP 66
28227: AND
28228: IFFALSE 28307
28230: GO 28232
28232: DISABLE
28233: LD_INT 0
28235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28236: LD_ADDR_VAR 0 1
28240: PUSH
28241: LD_INT 22
28243: PUSH
28244: LD_OWVAR 2
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 21
28255: PUSH
28256: LD_INT 2
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PPUSH
28267: CALL_OW 69
28271: ST_TO_ADDR
// if not tmp then
28272: LD_VAR 0 1
28276: NOT
28277: IFFALSE 28281
// exit ;
28279: GO 28307
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28281: LD_VAR 0 1
28285: PUSH
28286: LD_INT 1
28288: PPUSH
28289: LD_VAR 0 1
28293: PPUSH
28294: CALL_OW 12
28298: ARRAY
28299: PPUSH
28300: LD_INT 60
28302: PPUSH
28303: CALL_OW 234
// end ;
28307: PPOPN 1
28309: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28310: LD_EXP 37
28314: PUSH
28315: LD_EXP 67
28319: AND
28320: IFFALSE 28419
28322: GO 28324
28324: DISABLE
28325: LD_INT 0
28327: PPUSH
28328: PPUSH
// begin enable ;
28329: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28330: LD_ADDR_VAR 0 1
28334: PUSH
28335: LD_INT 22
28337: PUSH
28338: LD_OWVAR 2
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 61
28349: PUSH
28350: EMPTY
28351: LIST
28352: PUSH
28353: LD_INT 33
28355: PUSH
28356: LD_INT 2
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: LIST
28367: PPUSH
28368: CALL_OW 69
28372: ST_TO_ADDR
// if not tmp then
28373: LD_VAR 0 1
28377: NOT
28378: IFFALSE 28382
// exit ;
28380: GO 28419
// for i in tmp do
28382: LD_ADDR_VAR 0 2
28386: PUSH
28387: LD_VAR 0 1
28391: PUSH
28392: FOR_IN
28393: IFFALSE 28417
// if IsControledBy ( i ) then
28395: LD_VAR 0 2
28399: PPUSH
28400: CALL_OW 312
28404: IFFALSE 28415
// ComUnlink ( i ) ;
28406: LD_VAR 0 2
28410: PPUSH
28411: CALL_OW 136
28415: GO 28392
28417: POP
28418: POP
// end ;
28419: PPOPN 2
28421: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28422: LD_EXP 37
28426: PUSH
28427: LD_EXP 68
28431: AND
28432: IFFALSE 28572
28434: GO 28436
28436: DISABLE
28437: LD_INT 0
28439: PPUSH
28440: PPUSH
// begin ToLua ( displayPowell(); ) ;
28441: LD_STRING displayPowell();
28443: PPUSH
28444: CALL_OW 559
// uc_side := 0 ;
28448: LD_ADDR_OWVAR 20
28452: PUSH
28453: LD_INT 0
28455: ST_TO_ADDR
// uc_nation := 2 ;
28456: LD_ADDR_OWVAR 21
28460: PUSH
28461: LD_INT 2
28463: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28464: LD_ADDR_OWVAR 37
28468: PUSH
28469: LD_INT 14
28471: ST_TO_ADDR
// vc_engine := engine_siberite ;
28472: LD_ADDR_OWVAR 39
28476: PUSH
28477: LD_INT 3
28479: ST_TO_ADDR
// vc_control := control_apeman ;
28480: LD_ADDR_OWVAR 38
28484: PUSH
28485: LD_INT 5
28487: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28488: LD_ADDR_OWVAR 40
28492: PUSH
28493: LD_INT 29
28495: ST_TO_ADDR
// un := CreateVehicle ;
28496: LD_ADDR_VAR 0 2
28500: PUSH
28501: CALL_OW 45
28505: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28506: LD_VAR 0 2
28510: PPUSH
28511: LD_INT 1
28513: PPUSH
28514: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28518: LD_INT 35
28520: PPUSH
28521: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28525: LD_VAR 0 2
28529: PPUSH
28530: LD_INT 22
28532: PUSH
28533: LD_OWVAR 2
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PPUSH
28542: CALL_OW 69
28546: PPUSH
28547: LD_VAR 0 2
28551: PPUSH
28552: CALL_OW 74
28556: PPUSH
28557: CALL_OW 115
// until IsDead ( un ) ;
28561: LD_VAR 0 2
28565: PPUSH
28566: CALL_OW 301
28570: IFFALSE 28518
// end ;
28572: PPOPN 2
28574: END
// every 0 0$1 trigger StreamModeActive and sStu do
28575: LD_EXP 37
28579: PUSH
28580: LD_EXP 76
28584: AND
28585: IFFALSE 28601
28587: GO 28589
28589: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28590: LD_STRING displayStucuk();
28592: PPUSH
28593: CALL_OW 559
// ResetFog ;
28597: CALL_OW 335
// end ;
28601: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28602: LD_EXP 37
28606: PUSH
28607: LD_EXP 69
28611: AND
28612: IFFALSE 28753
28614: GO 28616
28616: DISABLE
28617: LD_INT 0
28619: PPUSH
28620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28621: LD_ADDR_VAR 0 2
28625: PUSH
28626: LD_INT 22
28628: PUSH
28629: LD_OWVAR 2
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 21
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 69
28656: ST_TO_ADDR
// if not tmp then
28657: LD_VAR 0 2
28661: NOT
28662: IFFALSE 28666
// exit ;
28664: GO 28753
// un := tmp [ rand ( 1 , tmp ) ] ;
28666: LD_ADDR_VAR 0 1
28670: PUSH
28671: LD_VAR 0 2
28675: PUSH
28676: LD_INT 1
28678: PPUSH
28679: LD_VAR 0 2
28683: PPUSH
28684: CALL_OW 12
28688: ARRAY
28689: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28690: LD_VAR 0 1
28694: PPUSH
28695: LD_INT 0
28697: PPUSH
28698: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28702: LD_VAR 0 1
28706: PPUSH
28707: LD_OWVAR 3
28711: PUSH
28712: LD_VAR 0 1
28716: DIFF
28717: PPUSH
28718: LD_VAR 0 1
28722: PPUSH
28723: CALL_OW 74
28727: PPUSH
28728: CALL_OW 115
// wait ( 0 0$20 ) ;
28732: LD_INT 700
28734: PPUSH
28735: CALL_OW 67
// SetSide ( un , your_side ) ;
28739: LD_VAR 0 1
28743: PPUSH
28744: LD_OWVAR 2
28748: PPUSH
28749: CALL_OW 235
// end ;
28753: PPOPN 2
28755: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28756: LD_EXP 37
28760: PUSH
28761: LD_EXP 70
28765: AND
28766: IFFALSE 28872
28768: GO 28770
28770: DISABLE
28771: LD_INT 0
28773: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28774: LD_ADDR_VAR 0 1
28778: PUSH
28779: LD_INT 22
28781: PUSH
28782: LD_OWVAR 2
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: LD_INT 30
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 30
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PPUSH
28823: CALL_OW 69
28827: ST_TO_ADDR
// if not depot then
28828: LD_VAR 0 1
28832: NOT
28833: IFFALSE 28837
// exit ;
28835: GO 28872
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28837: LD_VAR 0 1
28841: PUSH
28842: LD_INT 1
28844: ARRAY
28845: PPUSH
28846: CALL_OW 250
28850: PPUSH
28851: LD_VAR 0 1
28855: PUSH
28856: LD_INT 1
28858: ARRAY
28859: PPUSH
28860: CALL_OW 251
28864: PPUSH
28865: LD_INT 70
28867: PPUSH
28868: CALL_OW 495
// end ;
28872: PPOPN 1
28874: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28875: LD_EXP 37
28879: PUSH
28880: LD_EXP 71
28884: AND
28885: IFFALSE 29096
28887: GO 28889
28889: DISABLE
28890: LD_INT 0
28892: PPUSH
28893: PPUSH
28894: PPUSH
28895: PPUSH
28896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28897: LD_ADDR_VAR 0 5
28901: PUSH
28902: LD_INT 22
28904: PUSH
28905: LD_OWVAR 2
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 21
28916: PUSH
28917: LD_INT 1
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PPUSH
28928: CALL_OW 69
28932: ST_TO_ADDR
// if not tmp then
28933: LD_VAR 0 5
28937: NOT
28938: IFFALSE 28942
// exit ;
28940: GO 29096
// for i in tmp do
28942: LD_ADDR_VAR 0 1
28946: PUSH
28947: LD_VAR 0 5
28951: PUSH
28952: FOR_IN
28953: IFFALSE 29094
// begin d := rand ( 0 , 5 ) ;
28955: LD_ADDR_VAR 0 4
28959: PUSH
28960: LD_INT 0
28962: PPUSH
28963: LD_INT 5
28965: PPUSH
28966: CALL_OW 12
28970: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28971: LD_ADDR_VAR 0 2
28975: PUSH
28976: LD_VAR 0 1
28980: PPUSH
28981: CALL_OW 250
28985: PPUSH
28986: LD_VAR 0 4
28990: PPUSH
28991: LD_INT 3
28993: PPUSH
28994: LD_INT 12
28996: PPUSH
28997: CALL_OW 12
29001: PPUSH
29002: CALL_OW 272
29006: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29007: LD_ADDR_VAR 0 3
29011: PUSH
29012: LD_VAR 0 1
29016: PPUSH
29017: CALL_OW 251
29021: PPUSH
29022: LD_VAR 0 4
29026: PPUSH
29027: LD_INT 3
29029: PPUSH
29030: LD_INT 12
29032: PPUSH
29033: CALL_OW 12
29037: PPUSH
29038: CALL_OW 273
29042: ST_TO_ADDR
// if ValidHex ( x , y ) then
29043: LD_VAR 0 2
29047: PPUSH
29048: LD_VAR 0 3
29052: PPUSH
29053: CALL_OW 488
29057: IFFALSE 29092
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29059: LD_VAR 0 1
29063: PPUSH
29064: LD_VAR 0 2
29068: PPUSH
29069: LD_VAR 0 3
29073: PPUSH
29074: LD_INT 3
29076: PPUSH
29077: LD_INT 6
29079: PPUSH
29080: CALL_OW 12
29084: PPUSH
29085: LD_INT 1
29087: PPUSH
29088: CALL_OW 483
// end ;
29092: GO 28952
29094: POP
29095: POP
// end ;
29096: PPOPN 5
29098: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29099: LD_EXP 37
29103: PUSH
29104: LD_EXP 72
29108: AND
29109: IFFALSE 29203
29111: GO 29113
29113: DISABLE
29114: LD_INT 0
29116: PPUSH
29117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29118: LD_ADDR_VAR 0 2
29122: PUSH
29123: LD_INT 22
29125: PUSH
29126: LD_OWVAR 2
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 32
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 21
29147: PUSH
29148: LD_INT 2
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: LIST
29159: PPUSH
29160: CALL_OW 69
29164: ST_TO_ADDR
// if not tmp then
29165: LD_VAR 0 2
29169: NOT
29170: IFFALSE 29174
// exit ;
29172: GO 29203
// for i in tmp do
29174: LD_ADDR_VAR 0 1
29178: PUSH
29179: LD_VAR 0 2
29183: PUSH
29184: FOR_IN
29185: IFFALSE 29201
// SetFuel ( i , 0 ) ;
29187: LD_VAR 0 1
29191: PPUSH
29192: LD_INT 0
29194: PPUSH
29195: CALL_OW 240
29199: GO 29184
29201: POP
29202: POP
// end ;
29203: PPOPN 2
29205: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29206: LD_EXP 37
29210: PUSH
29211: LD_EXP 73
29215: AND
29216: IFFALSE 29282
29218: GO 29220
29220: DISABLE
29221: LD_INT 0
29223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29224: LD_ADDR_VAR 0 1
29228: PUSH
29229: LD_INT 22
29231: PUSH
29232: LD_OWVAR 2
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 30
29243: PUSH
29244: LD_INT 29
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PPUSH
29255: CALL_OW 69
29259: ST_TO_ADDR
// if not tmp then
29260: LD_VAR 0 1
29264: NOT
29265: IFFALSE 29269
// exit ;
29267: GO 29282
// DestroyUnit ( tmp [ 1 ] ) ;
29269: LD_VAR 0 1
29273: PUSH
29274: LD_INT 1
29276: ARRAY
29277: PPUSH
29278: CALL_OW 65
// end ;
29282: PPOPN 1
29284: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29285: LD_EXP 37
29289: PUSH
29290: LD_EXP 75
29294: AND
29295: IFFALSE 29424
29297: GO 29299
29299: DISABLE
29300: LD_INT 0
29302: PPUSH
// begin uc_side := 0 ;
29303: LD_ADDR_OWVAR 20
29307: PUSH
29308: LD_INT 0
29310: ST_TO_ADDR
// uc_nation := nation_arabian ;
29311: LD_ADDR_OWVAR 21
29315: PUSH
29316: LD_INT 2
29318: ST_TO_ADDR
// hc_gallery :=  ;
29319: LD_ADDR_OWVAR 33
29323: PUSH
29324: LD_STRING 
29326: ST_TO_ADDR
// hc_name :=  ;
29327: LD_ADDR_OWVAR 26
29331: PUSH
29332: LD_STRING 
29334: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29335: LD_INT 1
29337: PPUSH
29338: LD_INT 11
29340: PPUSH
29341: LD_INT 10
29343: PPUSH
29344: CALL_OW 380
// un := CreateHuman ;
29348: LD_ADDR_VAR 0 1
29352: PUSH
29353: CALL_OW 44
29357: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29358: LD_VAR 0 1
29362: PPUSH
29363: LD_INT 1
29365: PPUSH
29366: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29370: LD_INT 35
29372: PPUSH
29373: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29377: LD_VAR 0 1
29381: PPUSH
29382: LD_INT 22
29384: PUSH
29385: LD_OWVAR 2
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PPUSH
29394: CALL_OW 69
29398: PPUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 74
29408: PPUSH
29409: CALL_OW 115
// until IsDead ( un ) ;
29413: LD_VAR 0 1
29417: PPUSH
29418: CALL_OW 301
29422: IFFALSE 29370
// end ;
29424: PPOPN 1
29426: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29427: LD_EXP 37
29431: PUSH
29432: LD_EXP 77
29436: AND
29437: IFFALSE 29449
29439: GO 29441
29441: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29442: LD_STRING earthquake(getX(game), 0, 32)
29444: PPUSH
29445: CALL_OW 559
29449: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29450: LD_EXP 37
29454: PUSH
29455: LD_EXP 78
29459: AND
29460: IFFALSE 29551
29462: GO 29464
29464: DISABLE
29465: LD_INT 0
29467: PPUSH
// begin enable ;
29468: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29469: LD_ADDR_VAR 0 1
29473: PUSH
29474: LD_INT 22
29476: PUSH
29477: LD_OWVAR 2
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 21
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 33
29498: PUSH
29499: LD_INT 3
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: LIST
29510: PPUSH
29511: CALL_OW 69
29515: ST_TO_ADDR
// if not tmp then
29516: LD_VAR 0 1
29520: NOT
29521: IFFALSE 29525
// exit ;
29523: GO 29551
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29525: LD_VAR 0 1
29529: PUSH
29530: LD_INT 1
29532: PPUSH
29533: LD_VAR 0 1
29537: PPUSH
29538: CALL_OW 12
29542: ARRAY
29543: PPUSH
29544: LD_INT 1
29546: PPUSH
29547: CALL_OW 234
// end ;
29551: PPOPN 1
29553: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29554: LD_EXP 37
29558: PUSH
29559: LD_EXP 79
29563: AND
29564: IFFALSE 29705
29566: GO 29568
29568: DISABLE
29569: LD_INT 0
29571: PPUSH
29572: PPUSH
29573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29574: LD_ADDR_VAR 0 3
29578: PUSH
29579: LD_INT 22
29581: PUSH
29582: LD_OWVAR 2
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 25
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PPUSH
29605: CALL_OW 69
29609: ST_TO_ADDR
// if not tmp then
29610: LD_VAR 0 3
29614: NOT
29615: IFFALSE 29619
// exit ;
29617: GO 29705
// un := tmp [ rand ( 1 , tmp ) ] ;
29619: LD_ADDR_VAR 0 2
29623: PUSH
29624: LD_VAR 0 3
29628: PUSH
29629: LD_INT 1
29631: PPUSH
29632: LD_VAR 0 3
29636: PPUSH
29637: CALL_OW 12
29641: ARRAY
29642: ST_TO_ADDR
// if Crawls ( un ) then
29643: LD_VAR 0 2
29647: PPUSH
29648: CALL_OW 318
29652: IFFALSE 29663
// ComWalk ( un ) ;
29654: LD_VAR 0 2
29658: PPUSH
29659: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29663: LD_VAR 0 2
29667: PPUSH
29668: LD_INT 9
29670: PPUSH
29671: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29675: LD_INT 28
29677: PPUSH
29678: LD_OWVAR 2
29682: PPUSH
29683: LD_INT 2
29685: PPUSH
29686: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29690: LD_INT 29
29692: PPUSH
29693: LD_OWVAR 2
29697: PPUSH
29698: LD_INT 2
29700: PPUSH
29701: CALL_OW 322
// end ;
29705: PPOPN 3
29707: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29708: LD_EXP 37
29712: PUSH
29713: LD_EXP 80
29717: AND
29718: IFFALSE 29829
29720: GO 29722
29722: DISABLE
29723: LD_INT 0
29725: PPUSH
29726: PPUSH
29727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29728: LD_ADDR_VAR 0 3
29732: PUSH
29733: LD_INT 22
29735: PUSH
29736: LD_OWVAR 2
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 25
29747: PUSH
29748: LD_INT 1
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PPUSH
29759: CALL_OW 69
29763: ST_TO_ADDR
// if not tmp then
29764: LD_VAR 0 3
29768: NOT
29769: IFFALSE 29773
// exit ;
29771: GO 29829
// un := tmp [ rand ( 1 , tmp ) ] ;
29773: LD_ADDR_VAR 0 2
29777: PUSH
29778: LD_VAR 0 3
29782: PUSH
29783: LD_INT 1
29785: PPUSH
29786: LD_VAR 0 3
29790: PPUSH
29791: CALL_OW 12
29795: ARRAY
29796: ST_TO_ADDR
// if Crawls ( un ) then
29797: LD_VAR 0 2
29801: PPUSH
29802: CALL_OW 318
29806: IFFALSE 29817
// ComWalk ( un ) ;
29808: LD_VAR 0 2
29812: PPUSH
29813: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29817: LD_VAR 0 2
29821: PPUSH
29822: LD_INT 8
29824: PPUSH
29825: CALL_OW 336
// end ;
29829: PPOPN 3
29831: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29832: LD_EXP 37
29836: PUSH
29837: LD_EXP 81
29841: AND
29842: IFFALSE 29986
29844: GO 29846
29846: DISABLE
29847: LD_INT 0
29849: PPUSH
29850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29851: LD_ADDR_VAR 0 2
29855: PUSH
29856: LD_INT 22
29858: PUSH
29859: LD_OWVAR 2
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 21
29870: PUSH
29871: LD_INT 2
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 2
29880: PUSH
29881: LD_INT 34
29883: PUSH
29884: LD_INT 12
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 34
29893: PUSH
29894: LD_INT 51
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 34
29903: PUSH
29904: LD_INT 32
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: PPUSH
29922: CALL_OW 69
29926: ST_TO_ADDR
// if not tmp then
29927: LD_VAR 0 2
29931: NOT
29932: IFFALSE 29936
// exit ;
29934: GO 29986
// for i in tmp do
29936: LD_ADDR_VAR 0 1
29940: PUSH
29941: LD_VAR 0 2
29945: PUSH
29946: FOR_IN
29947: IFFALSE 29984
// if GetCargo ( i , mat_artifact ) = 0 then
29949: LD_VAR 0 1
29953: PPUSH
29954: LD_INT 4
29956: PPUSH
29957: CALL_OW 289
29961: PUSH
29962: LD_INT 0
29964: EQUAL
29965: IFFALSE 29982
// SetCargo ( i , mat_siberit , 100 ) ;
29967: LD_VAR 0 1
29971: PPUSH
29972: LD_INT 3
29974: PPUSH
29975: LD_INT 100
29977: PPUSH
29978: CALL_OW 290
29982: GO 29946
29984: POP
29985: POP
// end ;
29986: PPOPN 2
29988: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29989: LD_EXP 37
29993: PUSH
29994: LD_EXP 82
29998: AND
29999: IFFALSE 30182
30001: GO 30003
30003: DISABLE
30004: LD_INT 0
30006: PPUSH
30007: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30008: LD_ADDR_VAR 0 2
30012: PUSH
30013: LD_INT 22
30015: PUSH
30016: LD_OWVAR 2
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PPUSH
30025: CALL_OW 69
30029: ST_TO_ADDR
// if not tmp then
30030: LD_VAR 0 2
30034: NOT
30035: IFFALSE 30039
// exit ;
30037: GO 30182
// for i := 1 to 2 do
30039: LD_ADDR_VAR 0 1
30043: PUSH
30044: DOUBLE
30045: LD_INT 1
30047: DEC
30048: ST_TO_ADDR
30049: LD_INT 2
30051: PUSH
30052: FOR_TO
30053: IFFALSE 30180
// begin uc_side := your_side ;
30055: LD_ADDR_OWVAR 20
30059: PUSH
30060: LD_OWVAR 2
30064: ST_TO_ADDR
// uc_nation := nation_american ;
30065: LD_ADDR_OWVAR 21
30069: PUSH
30070: LD_INT 1
30072: ST_TO_ADDR
// vc_chassis := us_morphling ;
30073: LD_ADDR_OWVAR 37
30077: PUSH
30078: LD_INT 5
30080: ST_TO_ADDR
// vc_engine := engine_siberite ;
30081: LD_ADDR_OWVAR 39
30085: PUSH
30086: LD_INT 3
30088: ST_TO_ADDR
// vc_control := control_computer ;
30089: LD_ADDR_OWVAR 38
30093: PUSH
30094: LD_INT 3
30096: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30097: LD_ADDR_OWVAR 40
30101: PUSH
30102: LD_INT 10
30104: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30105: LD_VAR 0 2
30109: PUSH
30110: LD_INT 1
30112: ARRAY
30113: PPUSH
30114: CALL_OW 310
30118: NOT
30119: IFFALSE 30166
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30121: CALL_OW 45
30125: PPUSH
30126: LD_VAR 0 2
30130: PUSH
30131: LD_INT 1
30133: ARRAY
30134: PPUSH
30135: CALL_OW 250
30139: PPUSH
30140: LD_VAR 0 2
30144: PUSH
30145: LD_INT 1
30147: ARRAY
30148: PPUSH
30149: CALL_OW 251
30153: PPUSH
30154: LD_INT 12
30156: PPUSH
30157: LD_INT 1
30159: PPUSH
30160: CALL_OW 50
30164: GO 30178
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30166: CALL_OW 45
30170: PPUSH
30171: LD_INT 1
30173: PPUSH
30174: CALL_OW 51
// end ;
30178: GO 30052
30180: POP
30181: POP
// end ;
30182: PPOPN 2
30184: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30185: LD_EXP 37
30189: PUSH
30190: LD_EXP 83
30194: AND
30195: IFFALSE 30417
30197: GO 30199
30199: DISABLE
30200: LD_INT 0
30202: PPUSH
30203: PPUSH
30204: PPUSH
30205: PPUSH
30206: PPUSH
30207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30208: LD_ADDR_VAR 0 6
30212: PUSH
30213: LD_INT 22
30215: PUSH
30216: LD_OWVAR 2
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 21
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 3
30237: PUSH
30238: LD_INT 23
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: LIST
30256: PPUSH
30257: CALL_OW 69
30261: ST_TO_ADDR
// if not tmp then
30262: LD_VAR 0 6
30266: NOT
30267: IFFALSE 30271
// exit ;
30269: GO 30417
// s1 := rand ( 1 , 4 ) ;
30271: LD_ADDR_VAR 0 2
30275: PUSH
30276: LD_INT 1
30278: PPUSH
30279: LD_INT 4
30281: PPUSH
30282: CALL_OW 12
30286: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30287: LD_ADDR_VAR 0 4
30291: PUSH
30292: LD_VAR 0 6
30296: PUSH
30297: LD_INT 1
30299: ARRAY
30300: PPUSH
30301: LD_VAR 0 2
30305: PPUSH
30306: CALL_OW 259
30310: ST_TO_ADDR
// if s1 = 1 then
30311: LD_VAR 0 2
30315: PUSH
30316: LD_INT 1
30318: EQUAL
30319: IFFALSE 30339
// s2 := rand ( 2 , 4 ) else
30321: LD_ADDR_VAR 0 3
30325: PUSH
30326: LD_INT 2
30328: PPUSH
30329: LD_INT 4
30331: PPUSH
30332: CALL_OW 12
30336: ST_TO_ADDR
30337: GO 30347
// s2 := 1 ;
30339: LD_ADDR_VAR 0 3
30343: PUSH
30344: LD_INT 1
30346: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30347: LD_ADDR_VAR 0 5
30351: PUSH
30352: LD_VAR 0 6
30356: PUSH
30357: LD_INT 1
30359: ARRAY
30360: PPUSH
30361: LD_VAR 0 3
30365: PPUSH
30366: CALL_OW 259
30370: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30371: LD_VAR 0 6
30375: PUSH
30376: LD_INT 1
30378: ARRAY
30379: PPUSH
30380: LD_VAR 0 2
30384: PPUSH
30385: LD_VAR 0 5
30389: PPUSH
30390: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30394: LD_VAR 0 6
30398: PUSH
30399: LD_INT 1
30401: ARRAY
30402: PPUSH
30403: LD_VAR 0 3
30407: PPUSH
30408: LD_VAR 0 4
30412: PPUSH
30413: CALL_OW 237
// end ;
30417: PPOPN 6
30419: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30420: LD_EXP 37
30424: PUSH
30425: LD_EXP 84
30429: AND
30430: IFFALSE 30509
30432: GO 30434
30434: DISABLE
30435: LD_INT 0
30437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30438: LD_ADDR_VAR 0 1
30442: PUSH
30443: LD_INT 22
30445: PUSH
30446: LD_OWVAR 2
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 30
30457: PUSH
30458: LD_INT 3
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PPUSH
30469: CALL_OW 69
30473: ST_TO_ADDR
// if not tmp then
30474: LD_VAR 0 1
30478: NOT
30479: IFFALSE 30483
// exit ;
30481: GO 30509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30483: LD_VAR 0 1
30487: PUSH
30488: LD_INT 1
30490: PPUSH
30491: LD_VAR 0 1
30495: PPUSH
30496: CALL_OW 12
30500: ARRAY
30501: PPUSH
30502: LD_INT 1
30504: PPUSH
30505: CALL_OW 234
// end ;
30509: PPOPN 1
30511: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30512: LD_EXP 37
30516: PUSH
30517: LD_EXP 85
30521: AND
30522: IFFALSE 30634
30524: GO 30526
30526: DISABLE
30527: LD_INT 0
30529: PPUSH
30530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30531: LD_ADDR_VAR 0 2
30535: PUSH
30536: LD_INT 22
30538: PUSH
30539: LD_OWVAR 2
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 2
30550: PUSH
30551: LD_INT 30
30553: PUSH
30554: LD_INT 27
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 30
30563: PUSH
30564: LD_INT 26
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 30
30573: PUSH
30574: LD_INT 28
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PPUSH
30591: CALL_OW 69
30595: ST_TO_ADDR
// if not tmp then
30596: LD_VAR 0 2
30600: NOT
30601: IFFALSE 30605
// exit ;
30603: GO 30634
// for i in tmp do
30605: LD_ADDR_VAR 0 1
30609: PUSH
30610: LD_VAR 0 2
30614: PUSH
30615: FOR_IN
30616: IFFALSE 30632
// SetLives ( i , 1 ) ;
30618: LD_VAR 0 1
30622: PPUSH
30623: LD_INT 1
30625: PPUSH
30626: CALL_OW 234
30630: GO 30615
30632: POP
30633: POP
// end ;
30634: PPOPN 2
30636: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30637: LD_EXP 37
30641: PUSH
30642: LD_EXP 86
30646: AND
30647: IFFALSE 30934
30649: GO 30651
30651: DISABLE
30652: LD_INT 0
30654: PPUSH
30655: PPUSH
30656: PPUSH
// begin i := rand ( 1 , 7 ) ;
30657: LD_ADDR_VAR 0 1
30661: PUSH
30662: LD_INT 1
30664: PPUSH
30665: LD_INT 7
30667: PPUSH
30668: CALL_OW 12
30672: ST_TO_ADDR
// case i of 1 :
30673: LD_VAR 0 1
30677: PUSH
30678: LD_INT 1
30680: DOUBLE
30681: EQUAL
30682: IFTRUE 30686
30684: GO 30696
30686: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30687: LD_STRING earthquake(getX(game), 0, 32)
30689: PPUSH
30690: CALL_OW 559
30694: GO 30934
30696: LD_INT 2
30698: DOUBLE
30699: EQUAL
30700: IFTRUE 30704
30702: GO 30718
30704: POP
// begin ToLua ( displayStucuk(); ) ;
30705: LD_STRING displayStucuk();
30707: PPUSH
30708: CALL_OW 559
// ResetFog ;
30712: CALL_OW 335
// end ; 3 :
30716: GO 30934
30718: LD_INT 3
30720: DOUBLE
30721: EQUAL
30722: IFTRUE 30726
30724: GO 30830
30726: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30727: LD_ADDR_VAR 0 2
30731: PUSH
30732: LD_INT 22
30734: PUSH
30735: LD_OWVAR 2
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 25
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PPUSH
30758: CALL_OW 69
30762: ST_TO_ADDR
// if not tmp then
30763: LD_VAR 0 2
30767: NOT
30768: IFFALSE 30772
// exit ;
30770: GO 30934
// un := tmp [ rand ( 1 , tmp ) ] ;
30772: LD_ADDR_VAR 0 3
30776: PUSH
30777: LD_VAR 0 2
30781: PUSH
30782: LD_INT 1
30784: PPUSH
30785: LD_VAR 0 2
30789: PPUSH
30790: CALL_OW 12
30794: ARRAY
30795: ST_TO_ADDR
// if Crawls ( un ) then
30796: LD_VAR 0 3
30800: PPUSH
30801: CALL_OW 318
30805: IFFALSE 30816
// ComWalk ( un ) ;
30807: LD_VAR 0 3
30811: PPUSH
30812: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30816: LD_VAR 0 3
30820: PPUSH
30821: LD_INT 8
30823: PPUSH
30824: CALL_OW 336
// end ; 4 :
30828: GO 30934
30830: LD_INT 4
30832: DOUBLE
30833: EQUAL
30834: IFTRUE 30838
30836: GO 30912
30838: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30839: LD_ADDR_VAR 0 2
30843: PUSH
30844: LD_INT 22
30846: PUSH
30847: LD_OWVAR 2
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 30
30858: PUSH
30859: LD_INT 29
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PPUSH
30870: CALL_OW 69
30874: ST_TO_ADDR
// if not tmp then
30875: LD_VAR 0 2
30879: NOT
30880: IFFALSE 30884
// exit ;
30882: GO 30934
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30884: LD_VAR 0 2
30888: PUSH
30889: LD_INT 1
30891: ARRAY
30892: PPUSH
30893: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30897: LD_VAR 0 2
30901: PUSH
30902: LD_INT 1
30904: ARRAY
30905: PPUSH
30906: CALL_OW 65
// end ; 5 .. 7 :
30910: GO 30934
30912: LD_INT 5
30914: DOUBLE
30915: GREATEREQUAL
30916: IFFALSE 30924
30918: LD_INT 7
30920: DOUBLE
30921: LESSEQUAL
30922: IFTRUE 30926
30924: GO 30933
30926: POP
// StreamSibBomb ; end ;
30927: CALL 27171 0 0
30931: GO 30934
30933: POP
// end ;
30934: PPOPN 3
30936: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30937: LD_EXP 37
30941: PUSH
30942: LD_EXP 87
30946: AND
30947: IFFALSE 31103
30949: GO 30951
30951: DISABLE
30952: LD_INT 0
30954: PPUSH
30955: PPUSH
30956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30957: LD_ADDR_VAR 0 2
30961: PUSH
30962: LD_INT 81
30964: PUSH
30965: LD_OWVAR 2
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 2
30976: PUSH
30977: LD_INT 21
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 21
30989: PUSH
30990: LD_INT 2
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: LIST
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PPUSH
31006: CALL_OW 69
31010: ST_TO_ADDR
// if not tmp then
31011: LD_VAR 0 2
31015: NOT
31016: IFFALSE 31020
// exit ;
31018: GO 31103
// p := 0 ;
31020: LD_ADDR_VAR 0 3
31024: PUSH
31025: LD_INT 0
31027: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31028: LD_INT 35
31030: PPUSH
31031: CALL_OW 67
// p := p + 1 ;
31035: LD_ADDR_VAR 0 3
31039: PUSH
31040: LD_VAR 0 3
31044: PUSH
31045: LD_INT 1
31047: PLUS
31048: ST_TO_ADDR
// for i in tmp do
31049: LD_ADDR_VAR 0 1
31053: PUSH
31054: LD_VAR 0 2
31058: PUSH
31059: FOR_IN
31060: IFFALSE 31091
// if GetLives ( i ) < 1000 then
31062: LD_VAR 0 1
31066: PPUSH
31067: CALL_OW 256
31071: PUSH
31072: LD_INT 1000
31074: LESS
31075: IFFALSE 31089
// SetLives ( i , 1000 ) ;
31077: LD_VAR 0 1
31081: PPUSH
31082: LD_INT 1000
31084: PPUSH
31085: CALL_OW 234
31089: GO 31059
31091: POP
31092: POP
// until p > 20 ;
31093: LD_VAR 0 3
31097: PUSH
31098: LD_INT 20
31100: GREATER
31101: IFFALSE 31028
// end ;
31103: PPOPN 3
31105: END
// every 0 0$1 trigger StreamModeActive and sTime do
31106: LD_EXP 37
31110: PUSH
31111: LD_EXP 88
31115: AND
31116: IFFALSE 31151
31118: GO 31120
31120: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31121: LD_INT 28
31123: PPUSH
31124: LD_OWVAR 2
31128: PPUSH
31129: LD_INT 2
31131: PPUSH
31132: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31136: LD_INT 30
31138: PPUSH
31139: LD_OWVAR 2
31143: PPUSH
31144: LD_INT 2
31146: PPUSH
31147: CALL_OW 322
// end ;
31151: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31152: LD_EXP 37
31156: PUSH
31157: LD_EXP 89
31161: AND
31162: IFFALSE 31283
31164: GO 31166
31166: DISABLE
31167: LD_INT 0
31169: PPUSH
31170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31171: LD_ADDR_VAR 0 2
31175: PUSH
31176: LD_INT 22
31178: PUSH
31179: LD_OWVAR 2
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 21
31190: PUSH
31191: LD_INT 1
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 3
31200: PUSH
31201: LD_INT 23
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: PPUSH
31220: CALL_OW 69
31224: ST_TO_ADDR
// if not tmp then
31225: LD_VAR 0 2
31229: NOT
31230: IFFALSE 31234
// exit ;
31232: GO 31283
// for i in tmp do
31234: LD_ADDR_VAR 0 1
31238: PUSH
31239: LD_VAR 0 2
31243: PUSH
31244: FOR_IN
31245: IFFALSE 31281
// begin if Crawls ( i ) then
31247: LD_VAR 0 1
31251: PPUSH
31252: CALL_OW 318
31256: IFFALSE 31267
// ComWalk ( i ) ;
31258: LD_VAR 0 1
31262: PPUSH
31263: CALL_OW 138
// SetClass ( i , 2 ) ;
31267: LD_VAR 0 1
31271: PPUSH
31272: LD_INT 2
31274: PPUSH
31275: CALL_OW 336
// end ;
31279: GO 31244
31281: POP
31282: POP
// end ;
31283: PPOPN 2
31285: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31286: LD_EXP 37
31290: PUSH
31291: LD_EXP 90
31295: AND
31296: IFFALSE 31584
31298: GO 31300
31300: DISABLE
31301: LD_INT 0
31303: PPUSH
31304: PPUSH
31305: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31306: LD_OWVAR 2
31310: PPUSH
31311: LD_INT 9
31313: PPUSH
31314: LD_INT 1
31316: PPUSH
31317: LD_INT 1
31319: PPUSH
31320: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31324: LD_INT 9
31326: PPUSH
31327: LD_OWVAR 2
31331: PPUSH
31332: CALL_OW 343
// uc_side := 9 ;
31336: LD_ADDR_OWVAR 20
31340: PUSH
31341: LD_INT 9
31343: ST_TO_ADDR
// uc_nation := 2 ;
31344: LD_ADDR_OWVAR 21
31348: PUSH
31349: LD_INT 2
31351: ST_TO_ADDR
// hc_name := Dark Warrior ;
31352: LD_ADDR_OWVAR 26
31356: PUSH
31357: LD_STRING Dark Warrior
31359: ST_TO_ADDR
// hc_gallery :=  ;
31360: LD_ADDR_OWVAR 33
31364: PUSH
31365: LD_STRING 
31367: ST_TO_ADDR
// hc_noskilllimit := true ;
31368: LD_ADDR_OWVAR 76
31372: PUSH
31373: LD_INT 1
31375: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31376: LD_ADDR_OWVAR 31
31380: PUSH
31381: LD_INT 30
31383: PUSH
31384: LD_INT 30
31386: PUSH
31387: LD_INT 30
31389: PUSH
31390: LD_INT 30
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: ST_TO_ADDR
// un := CreateHuman ;
31399: LD_ADDR_VAR 0 3
31403: PUSH
31404: CALL_OW 44
31408: ST_TO_ADDR
// hc_noskilllimit := false ;
31409: LD_ADDR_OWVAR 76
31413: PUSH
31414: LD_INT 0
31416: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31417: LD_VAR 0 3
31421: PPUSH
31422: LD_INT 1
31424: PPUSH
31425: CALL_OW 51
// ToLua ( playRanger() ) ;
31429: LD_STRING playRanger()
31431: PPUSH
31432: CALL_OW 559
// p := 0 ;
31436: LD_ADDR_VAR 0 2
31440: PUSH
31441: LD_INT 0
31443: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31444: LD_INT 35
31446: PPUSH
31447: CALL_OW 67
// p := p + 1 ;
31451: LD_ADDR_VAR 0 2
31455: PUSH
31456: LD_VAR 0 2
31460: PUSH
31461: LD_INT 1
31463: PLUS
31464: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31465: LD_VAR 0 3
31469: PPUSH
31470: CALL_OW 256
31474: PUSH
31475: LD_INT 1000
31477: LESS
31478: IFFALSE 31492
// SetLives ( un , 1000 ) ;
31480: LD_VAR 0 3
31484: PPUSH
31485: LD_INT 1000
31487: PPUSH
31488: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31492: LD_VAR 0 3
31496: PPUSH
31497: LD_INT 81
31499: PUSH
31500: LD_OWVAR 2
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 91
31511: PUSH
31512: LD_VAR 0 3
31516: PUSH
31517: LD_INT 30
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: LIST
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PPUSH
31529: CALL_OW 69
31533: PPUSH
31534: LD_VAR 0 3
31538: PPUSH
31539: CALL_OW 74
31543: PPUSH
31544: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31548: LD_VAR 0 2
31552: PUSH
31553: LD_INT 80
31555: GREATER
31556: PUSH
31557: LD_VAR 0 3
31561: PPUSH
31562: CALL_OW 301
31566: OR
31567: IFFALSE 31444
// if un then
31569: LD_VAR 0 3
31573: IFFALSE 31584
// RemoveUnit ( un ) ;
31575: LD_VAR 0 3
31579: PPUSH
31580: CALL_OW 64
// end ;
31584: PPOPN 3
31586: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31587: LD_EXP 91
31591: IFFALSE 31707
31593: GO 31595
31595: DISABLE
31596: LD_INT 0
31598: PPUSH
31599: PPUSH
31600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31601: LD_ADDR_VAR 0 2
31605: PUSH
31606: LD_INT 81
31608: PUSH
31609: LD_OWVAR 2
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 21
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PPUSH
31632: CALL_OW 69
31636: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31637: LD_STRING playComputer()
31639: PPUSH
31640: CALL_OW 559
// if not tmp then
31644: LD_VAR 0 2
31648: NOT
31649: IFFALSE 31653
// exit ;
31651: GO 31707
// for i in tmp do
31653: LD_ADDR_VAR 0 1
31657: PUSH
31658: LD_VAR 0 2
31662: PUSH
31663: FOR_IN
31664: IFFALSE 31705
// for j := 1 to 4 do
31666: LD_ADDR_VAR 0 3
31670: PUSH
31671: DOUBLE
31672: LD_INT 1
31674: DEC
31675: ST_TO_ADDR
31676: LD_INT 4
31678: PUSH
31679: FOR_TO
31680: IFFALSE 31701
// SetSkill ( i , j , 10 ) ;
31682: LD_VAR 0 1
31686: PPUSH
31687: LD_VAR 0 3
31691: PPUSH
31692: LD_INT 10
31694: PPUSH
31695: CALL_OW 237
31699: GO 31679
31701: POP
31702: POP
31703: GO 31663
31705: POP
31706: POP
// end ;
31707: PPOPN 3
31709: END
// every 0 0$1 trigger s30 do var i , tmp ;
31710: LD_EXP 92
31714: IFFALSE 31783
31716: GO 31718
31718: DISABLE
31719: LD_INT 0
31721: PPUSH
31722: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31723: LD_ADDR_VAR 0 2
31727: PUSH
31728: LD_INT 22
31730: PUSH
31731: LD_OWVAR 2
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PPUSH
31740: CALL_OW 69
31744: ST_TO_ADDR
// if not tmp then
31745: LD_VAR 0 2
31749: NOT
31750: IFFALSE 31754
// exit ;
31752: GO 31783
// for i in tmp do
31754: LD_ADDR_VAR 0 1
31758: PUSH
31759: LD_VAR 0 2
31763: PUSH
31764: FOR_IN
31765: IFFALSE 31781
// SetLives ( i , 300 ) ;
31767: LD_VAR 0 1
31771: PPUSH
31772: LD_INT 300
31774: PPUSH
31775: CALL_OW 234
31779: GO 31764
31781: POP
31782: POP
// end ;
31783: PPOPN 2
31785: END
// every 0 0$1 trigger s60 do var i , tmp ;
31786: LD_EXP 93
31790: IFFALSE 31859
31792: GO 31794
31794: DISABLE
31795: LD_INT 0
31797: PPUSH
31798: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31799: LD_ADDR_VAR 0 2
31803: PUSH
31804: LD_INT 22
31806: PUSH
31807: LD_OWVAR 2
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PPUSH
31816: CALL_OW 69
31820: ST_TO_ADDR
// if not tmp then
31821: LD_VAR 0 2
31825: NOT
31826: IFFALSE 31830
// exit ;
31828: GO 31859
// for i in tmp do
31830: LD_ADDR_VAR 0 1
31834: PUSH
31835: LD_VAR 0 2
31839: PUSH
31840: FOR_IN
31841: IFFALSE 31857
// SetLives ( i , 600 ) ;
31843: LD_VAR 0 1
31847: PPUSH
31848: LD_INT 600
31850: PPUSH
31851: CALL_OW 234
31855: GO 31840
31857: POP
31858: POP
// end ;
31859: PPOPN 2
31861: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31862: LD_INT 0
31864: PPUSH
// case cmd of 301 :
31865: LD_VAR 0 1
31869: PUSH
31870: LD_INT 301
31872: DOUBLE
31873: EQUAL
31874: IFTRUE 31878
31876: GO 31910
31878: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31879: LD_VAR 0 6
31883: PPUSH
31884: LD_VAR 0 7
31888: PPUSH
31889: LD_VAR 0 8
31893: PPUSH
31894: LD_VAR 0 4
31898: PPUSH
31899: LD_VAR 0 5
31903: PPUSH
31904: CALL 33111 0 5
31908: GO 32031
31910: LD_INT 302
31912: DOUBLE
31913: EQUAL
31914: IFTRUE 31918
31916: GO 31955
31918: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31919: LD_VAR 0 6
31923: PPUSH
31924: LD_VAR 0 7
31928: PPUSH
31929: LD_VAR 0 8
31933: PPUSH
31934: LD_VAR 0 9
31938: PPUSH
31939: LD_VAR 0 4
31943: PPUSH
31944: LD_VAR 0 5
31948: PPUSH
31949: CALL 33202 0 6
31953: GO 32031
31955: LD_INT 303
31957: DOUBLE
31958: EQUAL
31959: IFTRUE 31963
31961: GO 32000
31963: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31964: LD_VAR 0 6
31968: PPUSH
31969: LD_VAR 0 7
31973: PPUSH
31974: LD_VAR 0 8
31978: PPUSH
31979: LD_VAR 0 9
31983: PPUSH
31984: LD_VAR 0 4
31988: PPUSH
31989: LD_VAR 0 5
31993: PPUSH
31994: CALL 32036 0 6
31998: GO 32031
32000: LD_INT 304
32002: DOUBLE
32003: EQUAL
32004: IFTRUE 32008
32006: GO 32030
32008: POP
// hHackTeleport ( unit , x , y ) ; end ;
32009: LD_VAR 0 2
32013: PPUSH
32014: LD_VAR 0 4
32018: PPUSH
32019: LD_VAR 0 5
32023: PPUSH
32024: CALL 33795 0 3
32028: GO 32031
32030: POP
// end ;
32031: LD_VAR 0 12
32035: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32036: LD_INT 0
32038: PPUSH
32039: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32040: LD_VAR 0 1
32044: PUSH
32045: LD_INT 1
32047: LESS
32048: PUSH
32049: LD_VAR 0 1
32053: PUSH
32054: LD_INT 3
32056: GREATER
32057: OR
32058: PUSH
32059: LD_VAR 0 5
32063: PPUSH
32064: LD_VAR 0 6
32068: PPUSH
32069: CALL_OW 428
32073: OR
32074: IFFALSE 32078
// exit ;
32076: GO 32798
// uc_side := your_side ;
32078: LD_ADDR_OWVAR 20
32082: PUSH
32083: LD_OWVAR 2
32087: ST_TO_ADDR
// uc_nation := nation ;
32088: LD_ADDR_OWVAR 21
32092: PUSH
32093: LD_VAR 0 1
32097: ST_TO_ADDR
// bc_level = 1 ;
32098: LD_ADDR_OWVAR 43
32102: PUSH
32103: LD_INT 1
32105: ST_TO_ADDR
// case btype of 1 :
32106: LD_VAR 0 2
32110: PUSH
32111: LD_INT 1
32113: DOUBLE
32114: EQUAL
32115: IFTRUE 32119
32117: GO 32130
32119: POP
// bc_type := b_depot ; 2 :
32120: LD_ADDR_OWVAR 42
32124: PUSH
32125: LD_INT 0
32127: ST_TO_ADDR
32128: GO 32742
32130: LD_INT 2
32132: DOUBLE
32133: EQUAL
32134: IFTRUE 32138
32136: GO 32149
32138: POP
// bc_type := b_warehouse ; 3 :
32139: LD_ADDR_OWVAR 42
32143: PUSH
32144: LD_INT 1
32146: ST_TO_ADDR
32147: GO 32742
32149: LD_INT 3
32151: DOUBLE
32152: EQUAL
32153: IFTRUE 32157
32155: GO 32168
32157: POP
// bc_type := b_lab ; 4 .. 9 :
32158: LD_ADDR_OWVAR 42
32162: PUSH
32163: LD_INT 6
32165: ST_TO_ADDR
32166: GO 32742
32168: LD_INT 4
32170: DOUBLE
32171: GREATEREQUAL
32172: IFFALSE 32180
32174: LD_INT 9
32176: DOUBLE
32177: LESSEQUAL
32178: IFTRUE 32182
32180: GO 32234
32182: POP
// begin bc_type := b_lab_half ;
32183: LD_ADDR_OWVAR 42
32187: PUSH
32188: LD_INT 7
32190: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32191: LD_ADDR_OWVAR 44
32195: PUSH
32196: LD_INT 10
32198: PUSH
32199: LD_INT 11
32201: PUSH
32202: LD_INT 12
32204: PUSH
32205: LD_INT 15
32207: PUSH
32208: LD_INT 14
32210: PUSH
32211: LD_INT 13
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: PUSH
32222: LD_VAR 0 2
32226: PUSH
32227: LD_INT 3
32229: MINUS
32230: ARRAY
32231: ST_TO_ADDR
// end ; 10 .. 13 :
32232: GO 32742
32234: LD_INT 10
32236: DOUBLE
32237: GREATEREQUAL
32238: IFFALSE 32246
32240: LD_INT 13
32242: DOUBLE
32243: LESSEQUAL
32244: IFTRUE 32248
32246: GO 32325
32248: POP
// begin bc_type := b_lab_full ;
32249: LD_ADDR_OWVAR 42
32253: PUSH
32254: LD_INT 8
32256: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32257: LD_ADDR_OWVAR 44
32261: PUSH
32262: LD_INT 10
32264: PUSH
32265: LD_INT 12
32267: PUSH
32268: LD_INT 14
32270: PUSH
32271: LD_INT 13
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: PUSH
32280: LD_VAR 0 2
32284: PUSH
32285: LD_INT 9
32287: MINUS
32288: ARRAY
32289: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32290: LD_ADDR_OWVAR 45
32294: PUSH
32295: LD_INT 11
32297: PUSH
32298: LD_INT 15
32300: PUSH
32301: LD_INT 12
32303: PUSH
32304: LD_INT 15
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: PUSH
32313: LD_VAR 0 2
32317: PUSH
32318: LD_INT 9
32320: MINUS
32321: ARRAY
32322: ST_TO_ADDR
// end ; 14 :
32323: GO 32742
32325: LD_INT 14
32327: DOUBLE
32328: EQUAL
32329: IFTRUE 32333
32331: GO 32344
32333: POP
// bc_type := b_workshop ; 15 :
32334: LD_ADDR_OWVAR 42
32338: PUSH
32339: LD_INT 2
32341: ST_TO_ADDR
32342: GO 32742
32344: LD_INT 15
32346: DOUBLE
32347: EQUAL
32348: IFTRUE 32352
32350: GO 32363
32352: POP
// bc_type := b_factory ; 16 :
32353: LD_ADDR_OWVAR 42
32357: PUSH
32358: LD_INT 3
32360: ST_TO_ADDR
32361: GO 32742
32363: LD_INT 16
32365: DOUBLE
32366: EQUAL
32367: IFTRUE 32371
32369: GO 32382
32371: POP
// bc_type := b_ext_gun ; 17 :
32372: LD_ADDR_OWVAR 42
32376: PUSH
32377: LD_INT 17
32379: ST_TO_ADDR
32380: GO 32742
32382: LD_INT 17
32384: DOUBLE
32385: EQUAL
32386: IFTRUE 32390
32388: GO 32418
32390: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32391: LD_ADDR_OWVAR 42
32395: PUSH
32396: LD_INT 19
32398: PUSH
32399: LD_INT 23
32401: PUSH
32402: LD_INT 19
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: PUSH
32410: LD_VAR 0 1
32414: ARRAY
32415: ST_TO_ADDR
32416: GO 32742
32418: LD_INT 18
32420: DOUBLE
32421: EQUAL
32422: IFTRUE 32426
32424: GO 32437
32426: POP
// bc_type := b_ext_radar ; 19 :
32427: LD_ADDR_OWVAR 42
32431: PUSH
32432: LD_INT 20
32434: ST_TO_ADDR
32435: GO 32742
32437: LD_INT 19
32439: DOUBLE
32440: EQUAL
32441: IFTRUE 32445
32443: GO 32456
32445: POP
// bc_type := b_ext_radio ; 20 :
32446: LD_ADDR_OWVAR 42
32450: PUSH
32451: LD_INT 22
32453: ST_TO_ADDR
32454: GO 32742
32456: LD_INT 20
32458: DOUBLE
32459: EQUAL
32460: IFTRUE 32464
32462: GO 32475
32464: POP
// bc_type := b_ext_siberium ; 21 :
32465: LD_ADDR_OWVAR 42
32469: PUSH
32470: LD_INT 21
32472: ST_TO_ADDR
32473: GO 32742
32475: LD_INT 21
32477: DOUBLE
32478: EQUAL
32479: IFTRUE 32483
32481: GO 32494
32483: POP
// bc_type := b_ext_computer ; 22 :
32484: LD_ADDR_OWVAR 42
32488: PUSH
32489: LD_INT 24
32491: ST_TO_ADDR
32492: GO 32742
32494: LD_INT 22
32496: DOUBLE
32497: EQUAL
32498: IFTRUE 32502
32500: GO 32513
32502: POP
// bc_type := b_ext_track ; 23 :
32503: LD_ADDR_OWVAR 42
32507: PUSH
32508: LD_INT 16
32510: ST_TO_ADDR
32511: GO 32742
32513: LD_INT 23
32515: DOUBLE
32516: EQUAL
32517: IFTRUE 32521
32519: GO 32532
32521: POP
// bc_type := b_ext_laser ; 24 :
32522: LD_ADDR_OWVAR 42
32526: PUSH
32527: LD_INT 25
32529: ST_TO_ADDR
32530: GO 32742
32532: LD_INT 24
32534: DOUBLE
32535: EQUAL
32536: IFTRUE 32540
32538: GO 32551
32540: POP
// bc_type := b_control_tower ; 25 :
32541: LD_ADDR_OWVAR 42
32545: PUSH
32546: LD_INT 36
32548: ST_TO_ADDR
32549: GO 32742
32551: LD_INT 25
32553: DOUBLE
32554: EQUAL
32555: IFTRUE 32559
32557: GO 32570
32559: POP
// bc_type := b_breastwork ; 26 :
32560: LD_ADDR_OWVAR 42
32564: PUSH
32565: LD_INT 31
32567: ST_TO_ADDR
32568: GO 32742
32570: LD_INT 26
32572: DOUBLE
32573: EQUAL
32574: IFTRUE 32578
32576: GO 32589
32578: POP
// bc_type := b_bunker ; 27 :
32579: LD_ADDR_OWVAR 42
32583: PUSH
32584: LD_INT 32
32586: ST_TO_ADDR
32587: GO 32742
32589: LD_INT 27
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32608
32597: POP
// bc_type := b_turret ; 28 :
32598: LD_ADDR_OWVAR 42
32602: PUSH
32603: LD_INT 33
32605: ST_TO_ADDR
32606: GO 32742
32608: LD_INT 28
32610: DOUBLE
32611: EQUAL
32612: IFTRUE 32616
32614: GO 32627
32616: POP
// bc_type := b_armoury ; 29 :
32617: LD_ADDR_OWVAR 42
32621: PUSH
32622: LD_INT 4
32624: ST_TO_ADDR
32625: GO 32742
32627: LD_INT 29
32629: DOUBLE
32630: EQUAL
32631: IFTRUE 32635
32633: GO 32646
32635: POP
// bc_type := b_barracks ; 30 :
32636: LD_ADDR_OWVAR 42
32640: PUSH
32641: LD_INT 5
32643: ST_TO_ADDR
32644: GO 32742
32646: LD_INT 30
32648: DOUBLE
32649: EQUAL
32650: IFTRUE 32654
32652: GO 32665
32654: POP
// bc_type := b_solar_power ; 31 :
32655: LD_ADDR_OWVAR 42
32659: PUSH
32660: LD_INT 27
32662: ST_TO_ADDR
32663: GO 32742
32665: LD_INT 31
32667: DOUBLE
32668: EQUAL
32669: IFTRUE 32673
32671: GO 32684
32673: POP
// bc_type := b_oil_power ; 32 :
32674: LD_ADDR_OWVAR 42
32678: PUSH
32679: LD_INT 26
32681: ST_TO_ADDR
32682: GO 32742
32684: LD_INT 32
32686: DOUBLE
32687: EQUAL
32688: IFTRUE 32692
32690: GO 32703
32692: POP
// bc_type := b_siberite_power ; 33 :
32693: LD_ADDR_OWVAR 42
32697: PUSH
32698: LD_INT 28
32700: ST_TO_ADDR
32701: GO 32742
32703: LD_INT 33
32705: DOUBLE
32706: EQUAL
32707: IFTRUE 32711
32709: GO 32722
32711: POP
// bc_type := b_oil_mine ; 34 :
32712: LD_ADDR_OWVAR 42
32716: PUSH
32717: LD_INT 29
32719: ST_TO_ADDR
32720: GO 32742
32722: LD_INT 34
32724: DOUBLE
32725: EQUAL
32726: IFTRUE 32730
32728: GO 32741
32730: POP
// bc_type := b_siberite_mine ; end ;
32731: LD_ADDR_OWVAR 42
32735: PUSH
32736: LD_INT 30
32738: ST_TO_ADDR
32739: GO 32742
32741: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32742: LD_ADDR_VAR 0 8
32746: PUSH
32747: LD_VAR 0 5
32751: PPUSH
32752: LD_VAR 0 6
32756: PPUSH
32757: LD_VAR 0 3
32761: PPUSH
32762: CALL_OW 47
32766: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32767: LD_OWVAR 42
32771: PUSH
32772: LD_INT 32
32774: PUSH
32775: LD_INT 33
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: IN
32782: IFFALSE 32798
// PlaceWeaponTurret ( b , weapon ) ;
32784: LD_VAR 0 8
32788: PPUSH
32789: LD_VAR 0 4
32793: PPUSH
32794: CALL_OW 431
// end ;
32798: LD_VAR 0 7
32802: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32803: LD_INT 0
32805: PPUSH
32806: PPUSH
32807: PPUSH
32808: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32809: LD_ADDR_VAR 0 4
32813: PUSH
32814: LD_INT 22
32816: PUSH
32817: LD_OWVAR 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 30
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 30
32841: PUSH
32842: LD_INT 1
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PPUSH
32858: CALL_OW 69
32862: ST_TO_ADDR
// if not tmp then
32863: LD_VAR 0 4
32867: NOT
32868: IFFALSE 32872
// exit ;
32870: GO 32931
// for i in tmp do
32872: LD_ADDR_VAR 0 2
32876: PUSH
32877: LD_VAR 0 4
32881: PUSH
32882: FOR_IN
32883: IFFALSE 32929
// for j = 1 to 3 do
32885: LD_ADDR_VAR 0 3
32889: PUSH
32890: DOUBLE
32891: LD_INT 1
32893: DEC
32894: ST_TO_ADDR
32895: LD_INT 3
32897: PUSH
32898: FOR_TO
32899: IFFALSE 32925
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32901: LD_VAR 0 2
32905: PPUSH
32906: CALL_OW 274
32910: PPUSH
32911: LD_VAR 0 3
32915: PPUSH
32916: LD_INT 99999
32918: PPUSH
32919: CALL_OW 277
32923: GO 32898
32925: POP
32926: POP
32927: GO 32882
32929: POP
32930: POP
// end ;
32931: LD_VAR 0 1
32935: RET
// export function hHackSetLevel10 ; var i , j ; begin
32936: LD_INT 0
32938: PPUSH
32939: PPUSH
32940: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32941: LD_ADDR_VAR 0 2
32945: PUSH
32946: LD_INT 21
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PPUSH
32956: CALL_OW 69
32960: PUSH
32961: FOR_IN
32962: IFFALSE 33014
// if IsSelected ( i ) then
32964: LD_VAR 0 2
32968: PPUSH
32969: CALL_OW 306
32973: IFFALSE 33012
// begin for j := 1 to 4 do
32975: LD_ADDR_VAR 0 3
32979: PUSH
32980: DOUBLE
32981: LD_INT 1
32983: DEC
32984: ST_TO_ADDR
32985: LD_INT 4
32987: PUSH
32988: FOR_TO
32989: IFFALSE 33010
// SetSkill ( i , j , 10 ) ;
32991: LD_VAR 0 2
32995: PPUSH
32996: LD_VAR 0 3
33000: PPUSH
33001: LD_INT 10
33003: PPUSH
33004: CALL_OW 237
33008: GO 32988
33010: POP
33011: POP
// end ;
33012: GO 32961
33014: POP
33015: POP
// end ;
33016: LD_VAR 0 1
33020: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33021: LD_INT 0
33023: PPUSH
33024: PPUSH
33025: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33026: LD_ADDR_VAR 0 2
33030: PUSH
33031: LD_INT 22
33033: PUSH
33034: LD_OWVAR 2
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 21
33045: PUSH
33046: LD_INT 1
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PPUSH
33057: CALL_OW 69
33061: PUSH
33062: FOR_IN
33063: IFFALSE 33104
// begin for j := 1 to 4 do
33065: LD_ADDR_VAR 0 3
33069: PUSH
33070: DOUBLE
33071: LD_INT 1
33073: DEC
33074: ST_TO_ADDR
33075: LD_INT 4
33077: PUSH
33078: FOR_TO
33079: IFFALSE 33100
// SetSkill ( i , j , 10 ) ;
33081: LD_VAR 0 2
33085: PPUSH
33086: LD_VAR 0 3
33090: PPUSH
33091: LD_INT 10
33093: PPUSH
33094: CALL_OW 237
33098: GO 33078
33100: POP
33101: POP
// end ;
33102: GO 33062
33104: POP
33105: POP
// end ;
33106: LD_VAR 0 1
33110: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33111: LD_INT 0
33113: PPUSH
// uc_side := your_side ;
33114: LD_ADDR_OWVAR 20
33118: PUSH
33119: LD_OWVAR 2
33123: ST_TO_ADDR
// uc_nation := nation ;
33124: LD_ADDR_OWVAR 21
33128: PUSH
33129: LD_VAR 0 1
33133: ST_TO_ADDR
// InitHc ;
33134: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33138: LD_INT 0
33140: PPUSH
33141: LD_VAR 0 2
33145: PPUSH
33146: LD_VAR 0 3
33150: PPUSH
33151: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33155: LD_VAR 0 4
33159: PPUSH
33160: LD_VAR 0 5
33164: PPUSH
33165: CALL_OW 428
33169: PUSH
33170: LD_INT 0
33172: EQUAL
33173: IFFALSE 33197
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33175: CALL_OW 44
33179: PPUSH
33180: LD_VAR 0 4
33184: PPUSH
33185: LD_VAR 0 5
33189: PPUSH
33190: LD_INT 1
33192: PPUSH
33193: CALL_OW 48
// end ;
33197: LD_VAR 0 6
33201: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33202: LD_INT 0
33204: PPUSH
33205: PPUSH
// uc_side := your_side ;
33206: LD_ADDR_OWVAR 20
33210: PUSH
33211: LD_OWVAR 2
33215: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33216: LD_VAR 0 1
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: LD_INT 3
33229: PUSH
33230: LD_INT 4
33232: PUSH
33233: LD_INT 5
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: IN
33243: IFFALSE 33255
// uc_nation := nation_american else
33245: LD_ADDR_OWVAR 21
33249: PUSH
33250: LD_INT 1
33252: ST_TO_ADDR
33253: GO 33298
// if chassis in [ 11 , 12 , 13 , 14 ] then
33255: LD_VAR 0 1
33259: PUSH
33260: LD_INT 11
33262: PUSH
33263: LD_INT 12
33265: PUSH
33266: LD_INT 13
33268: PUSH
33269: LD_INT 14
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: IN
33278: IFFALSE 33290
// uc_nation := nation_arabian else
33280: LD_ADDR_OWVAR 21
33284: PUSH
33285: LD_INT 2
33287: ST_TO_ADDR
33288: GO 33298
// uc_nation := nation_russian ;
33290: LD_ADDR_OWVAR 21
33294: PUSH
33295: LD_INT 3
33297: ST_TO_ADDR
// vc_chassis := chassis ;
33298: LD_ADDR_OWVAR 37
33302: PUSH
33303: LD_VAR 0 1
33307: ST_TO_ADDR
// vc_engine := engine ;
33308: LD_ADDR_OWVAR 39
33312: PUSH
33313: LD_VAR 0 2
33317: ST_TO_ADDR
// vc_control := control ;
33318: LD_ADDR_OWVAR 38
33322: PUSH
33323: LD_VAR 0 3
33327: ST_TO_ADDR
// vc_weapon := weapon ;
33328: LD_ADDR_OWVAR 40
33332: PUSH
33333: LD_VAR 0 4
33337: ST_TO_ADDR
// un := CreateVehicle ;
33338: LD_ADDR_VAR 0 8
33342: PUSH
33343: CALL_OW 45
33347: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33348: LD_VAR 0 8
33352: PPUSH
33353: LD_INT 0
33355: PPUSH
33356: LD_INT 5
33358: PPUSH
33359: CALL_OW 12
33363: PPUSH
33364: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33368: LD_VAR 0 8
33372: PPUSH
33373: LD_VAR 0 5
33377: PPUSH
33378: LD_VAR 0 6
33382: PPUSH
33383: LD_INT 1
33385: PPUSH
33386: CALL_OW 48
// end ;
33390: LD_VAR 0 7
33394: RET
// export hInvincible ; every 1 do
33395: GO 33397
33397: DISABLE
// hInvincible := [ ] ;
33398: LD_ADDR_EXP 94
33402: PUSH
33403: EMPTY
33404: ST_TO_ADDR
33405: END
// every 10 do var i ;
33406: GO 33408
33408: DISABLE
33409: LD_INT 0
33411: PPUSH
// begin enable ;
33412: ENABLE
// if not hInvincible then
33413: LD_EXP 94
33417: NOT
33418: IFFALSE 33422
// exit ;
33420: GO 33466
// for i in hInvincible do
33422: LD_ADDR_VAR 0 1
33426: PUSH
33427: LD_EXP 94
33431: PUSH
33432: FOR_IN
33433: IFFALSE 33464
// if GetLives ( i ) < 1000 then
33435: LD_VAR 0 1
33439: PPUSH
33440: CALL_OW 256
33444: PUSH
33445: LD_INT 1000
33447: LESS
33448: IFFALSE 33462
// SetLives ( i , 1000 ) ;
33450: LD_VAR 0 1
33454: PPUSH
33455: LD_INT 1000
33457: PPUSH
33458: CALL_OW 234
33462: GO 33432
33464: POP
33465: POP
// end ;
33466: PPOPN 1
33468: END
// export function hHackInvincible ; var i ; begin
33469: LD_INT 0
33471: PPUSH
33472: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33473: LD_ADDR_VAR 0 2
33477: PUSH
33478: LD_INT 2
33480: PUSH
33481: LD_INT 21
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 21
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: LIST
33505: PPUSH
33506: CALL_OW 69
33510: PUSH
33511: FOR_IN
33512: IFFALSE 33573
// if IsSelected ( i ) then
33514: LD_VAR 0 2
33518: PPUSH
33519: CALL_OW 306
33523: IFFALSE 33571
// begin if i in hInvincible then
33525: LD_VAR 0 2
33529: PUSH
33530: LD_EXP 94
33534: IN
33535: IFFALSE 33555
// hInvincible := hInvincible diff i else
33537: LD_ADDR_EXP 94
33541: PUSH
33542: LD_EXP 94
33546: PUSH
33547: LD_VAR 0 2
33551: DIFF
33552: ST_TO_ADDR
33553: GO 33571
// hInvincible := hInvincible union i ;
33555: LD_ADDR_EXP 94
33559: PUSH
33560: LD_EXP 94
33564: PUSH
33565: LD_VAR 0 2
33569: UNION
33570: ST_TO_ADDR
// end ;
33571: GO 33511
33573: POP
33574: POP
// end ;
33575: LD_VAR 0 1
33579: RET
// export function hHackInvisible ; var i , j ; begin
33580: LD_INT 0
33582: PPUSH
33583: PPUSH
33584: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33585: LD_ADDR_VAR 0 2
33589: PUSH
33590: LD_INT 21
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PPUSH
33600: CALL_OW 69
33604: PUSH
33605: FOR_IN
33606: IFFALSE 33630
// if IsSelected ( i ) then
33608: LD_VAR 0 2
33612: PPUSH
33613: CALL_OW 306
33617: IFFALSE 33628
// ComForceInvisible ( i ) ;
33619: LD_VAR 0 2
33623: PPUSH
33624: CALL_OW 496
33628: GO 33605
33630: POP
33631: POP
// end ;
33632: LD_VAR 0 1
33636: RET
// export function hHackChangeYourSide ; begin
33637: LD_INT 0
33639: PPUSH
// if your_side = 8 then
33640: LD_OWVAR 2
33644: PUSH
33645: LD_INT 8
33647: EQUAL
33648: IFFALSE 33660
// your_side := 0 else
33650: LD_ADDR_OWVAR 2
33654: PUSH
33655: LD_INT 0
33657: ST_TO_ADDR
33658: GO 33674
// your_side := your_side + 1 ;
33660: LD_ADDR_OWVAR 2
33664: PUSH
33665: LD_OWVAR 2
33669: PUSH
33670: LD_INT 1
33672: PLUS
33673: ST_TO_ADDR
// end ;
33674: LD_VAR 0 1
33678: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33679: LD_INT 0
33681: PPUSH
33682: PPUSH
33683: PPUSH
// for i in all_units do
33684: LD_ADDR_VAR 0 2
33688: PUSH
33689: LD_OWVAR 3
33693: PUSH
33694: FOR_IN
33695: IFFALSE 33773
// if IsSelected ( i ) then
33697: LD_VAR 0 2
33701: PPUSH
33702: CALL_OW 306
33706: IFFALSE 33771
// begin j := GetSide ( i ) ;
33708: LD_ADDR_VAR 0 3
33712: PUSH
33713: LD_VAR 0 2
33717: PPUSH
33718: CALL_OW 255
33722: ST_TO_ADDR
// if j = 8 then
33723: LD_VAR 0 3
33727: PUSH
33728: LD_INT 8
33730: EQUAL
33731: IFFALSE 33743
// j := 0 else
33733: LD_ADDR_VAR 0 3
33737: PUSH
33738: LD_INT 0
33740: ST_TO_ADDR
33741: GO 33757
// j := j + 1 ;
33743: LD_ADDR_VAR 0 3
33747: PUSH
33748: LD_VAR 0 3
33752: PUSH
33753: LD_INT 1
33755: PLUS
33756: ST_TO_ADDR
// SetSide ( i , j ) ;
33757: LD_VAR 0 2
33761: PPUSH
33762: LD_VAR 0 3
33766: PPUSH
33767: CALL_OW 235
// end ;
33771: GO 33694
33773: POP
33774: POP
// end ;
33775: LD_VAR 0 1
33779: RET
// export function hHackFog ; begin
33780: LD_INT 0
33782: PPUSH
// FogOff ( true ) ;
33783: LD_INT 1
33785: PPUSH
33786: CALL_OW 344
// end ;
33790: LD_VAR 0 1
33794: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33795: LD_INT 0
33797: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33798: LD_VAR 0 1
33802: PPUSH
33803: LD_VAR 0 2
33807: PPUSH
33808: LD_VAR 0 3
33812: PPUSH
33813: LD_INT 1
33815: PPUSH
33816: LD_INT 1
33818: PPUSH
33819: CALL_OW 483
// CenterOnXY ( x , y ) ;
33823: LD_VAR 0 2
33827: PPUSH
33828: LD_VAR 0 3
33832: PPUSH
33833: CALL_OW 84
// end ;
33837: LD_VAR 0 4
33841: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33842: LD_INT 0
33844: PPUSH
33845: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33846: LD_VAR 0 1
33850: NOT
33851: PUSH
33852: LD_VAR 0 2
33856: PPUSH
33857: LD_VAR 0 3
33861: PPUSH
33862: CALL_OW 488
33866: NOT
33867: OR
33868: PUSH
33869: LD_VAR 0 1
33873: PPUSH
33874: CALL_OW 266
33878: PUSH
33879: LD_INT 3
33881: NONEQUAL
33882: PUSH
33883: LD_VAR 0 1
33887: PPUSH
33888: CALL_OW 247
33892: PUSH
33893: LD_INT 1
33895: EQUAL
33896: NOT
33897: AND
33898: OR
33899: IFFALSE 33903
// exit ;
33901: GO 34052
// if GetType ( factory ) = unit_human then
33903: LD_VAR 0 1
33907: PPUSH
33908: CALL_OW 247
33912: PUSH
33913: LD_INT 1
33915: EQUAL
33916: IFFALSE 33933
// factory := IsInUnit ( factory ) ;
33918: LD_ADDR_VAR 0 1
33922: PUSH
33923: LD_VAR 0 1
33927: PPUSH
33928: CALL_OW 310
33932: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33933: LD_VAR 0 1
33937: PPUSH
33938: CALL_OW 266
33942: PUSH
33943: LD_INT 3
33945: NONEQUAL
33946: IFFALSE 33950
// exit ;
33948: GO 34052
// if HexInfo ( x , y ) = factory then
33950: LD_VAR 0 2
33954: PPUSH
33955: LD_VAR 0 3
33959: PPUSH
33960: CALL_OW 428
33964: PUSH
33965: LD_VAR 0 1
33969: EQUAL
33970: IFFALSE 33997
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33972: LD_ADDR_EXP 95
33976: PUSH
33977: LD_EXP 95
33981: PPUSH
33982: LD_VAR 0 1
33986: PPUSH
33987: LD_INT 0
33989: PPUSH
33990: CALL_OW 1
33994: ST_TO_ADDR
33995: GO 34048
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33997: LD_ADDR_EXP 95
34001: PUSH
34002: LD_EXP 95
34006: PPUSH
34007: LD_VAR 0 1
34011: PPUSH
34012: LD_VAR 0 1
34016: PPUSH
34017: CALL_OW 255
34021: PUSH
34022: LD_VAR 0 1
34026: PUSH
34027: LD_VAR 0 2
34031: PUSH
34032: LD_VAR 0 3
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: PPUSH
34043: CALL_OW 1
34047: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34048: CALL 34057 0 0
// end ;
34052: LD_VAR 0 4
34056: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34057: LD_INT 0
34059: PPUSH
34060: PPUSH
34061: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34062: LD_STRING resetFactoryWaypoint();
34064: PPUSH
34065: CALL_OW 559
// if factoryWaypoints then
34069: LD_EXP 95
34073: IFFALSE 34199
// begin list := PrepareArray ( factoryWaypoints ) ;
34075: LD_ADDR_VAR 0 3
34079: PUSH
34080: LD_EXP 95
34084: PPUSH
34085: CALL 80649 0 1
34089: ST_TO_ADDR
// for i := 1 to list do
34090: LD_ADDR_VAR 0 2
34094: PUSH
34095: DOUBLE
34096: LD_INT 1
34098: DEC
34099: ST_TO_ADDR
34100: LD_VAR 0 3
34104: PUSH
34105: FOR_TO
34106: IFFALSE 34197
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34108: LD_STRING setFactoryWaypointXY(
34110: PUSH
34111: LD_VAR 0 3
34115: PUSH
34116: LD_VAR 0 2
34120: ARRAY
34121: PUSH
34122: LD_INT 1
34124: ARRAY
34125: STR
34126: PUSH
34127: LD_STRING ,
34129: STR
34130: PUSH
34131: LD_VAR 0 3
34135: PUSH
34136: LD_VAR 0 2
34140: ARRAY
34141: PUSH
34142: LD_INT 2
34144: ARRAY
34145: STR
34146: PUSH
34147: LD_STRING ,
34149: STR
34150: PUSH
34151: LD_VAR 0 3
34155: PUSH
34156: LD_VAR 0 2
34160: ARRAY
34161: PUSH
34162: LD_INT 3
34164: ARRAY
34165: STR
34166: PUSH
34167: LD_STRING ,
34169: STR
34170: PUSH
34171: LD_VAR 0 3
34175: PUSH
34176: LD_VAR 0 2
34180: ARRAY
34181: PUSH
34182: LD_INT 4
34184: ARRAY
34185: STR
34186: PUSH
34187: LD_STRING )
34189: STR
34190: PPUSH
34191: CALL_OW 559
34195: GO 34105
34197: POP
34198: POP
// end ; end ;
34199: LD_VAR 0 1
34203: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34204: LD_INT 0
34206: PPUSH
// if HexInfo ( x , y ) = warehouse then
34207: LD_VAR 0 2
34211: PPUSH
34212: LD_VAR 0 3
34216: PPUSH
34217: CALL_OW 428
34221: PUSH
34222: LD_VAR 0 1
34226: EQUAL
34227: IFFALSE 34254
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34229: LD_ADDR_EXP 96
34233: PUSH
34234: LD_EXP 96
34238: PPUSH
34239: LD_VAR 0 1
34243: PPUSH
34244: LD_INT 0
34246: PPUSH
34247: CALL_OW 1
34251: ST_TO_ADDR
34252: GO 34305
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34254: LD_ADDR_EXP 96
34258: PUSH
34259: LD_EXP 96
34263: PPUSH
34264: LD_VAR 0 1
34268: PPUSH
34269: LD_VAR 0 1
34273: PPUSH
34274: CALL_OW 255
34278: PUSH
34279: LD_VAR 0 1
34283: PUSH
34284: LD_VAR 0 2
34288: PUSH
34289: LD_VAR 0 3
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: PPUSH
34300: CALL_OW 1
34304: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34305: CALL 34314 0 0
// end ;
34309: LD_VAR 0 4
34313: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34314: LD_INT 0
34316: PPUSH
34317: PPUSH
34318: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34319: LD_STRING resetWarehouseGatheringPoints();
34321: PPUSH
34322: CALL_OW 559
// if warehouseGatheringPoints then
34326: LD_EXP 96
34330: IFFALSE 34456
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34332: LD_ADDR_VAR 0 3
34336: PUSH
34337: LD_EXP 96
34341: PPUSH
34342: CALL 80649 0 1
34346: ST_TO_ADDR
// for i := 1 to list do
34347: LD_ADDR_VAR 0 2
34351: PUSH
34352: DOUBLE
34353: LD_INT 1
34355: DEC
34356: ST_TO_ADDR
34357: LD_VAR 0 3
34361: PUSH
34362: FOR_TO
34363: IFFALSE 34454
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34365: LD_STRING setWarehouseGatheringPointXY(
34367: PUSH
34368: LD_VAR 0 3
34372: PUSH
34373: LD_VAR 0 2
34377: ARRAY
34378: PUSH
34379: LD_INT 1
34381: ARRAY
34382: STR
34383: PUSH
34384: LD_STRING ,
34386: STR
34387: PUSH
34388: LD_VAR 0 3
34392: PUSH
34393: LD_VAR 0 2
34397: ARRAY
34398: PUSH
34399: LD_INT 2
34401: ARRAY
34402: STR
34403: PUSH
34404: LD_STRING ,
34406: STR
34407: PUSH
34408: LD_VAR 0 3
34412: PUSH
34413: LD_VAR 0 2
34417: ARRAY
34418: PUSH
34419: LD_INT 3
34421: ARRAY
34422: STR
34423: PUSH
34424: LD_STRING ,
34426: STR
34427: PUSH
34428: LD_VAR 0 3
34432: PUSH
34433: LD_VAR 0 2
34437: ARRAY
34438: PUSH
34439: LD_INT 4
34441: ARRAY
34442: STR
34443: PUSH
34444: LD_STRING )
34446: STR
34447: PPUSH
34448: CALL_OW 559
34452: GO 34362
34454: POP
34455: POP
// end ; end ;
34456: LD_VAR 0 1
34460: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34461: LD_EXP 96
34465: IFFALSE 35150
34467: GO 34469
34469: DISABLE
34470: LD_INT 0
34472: PPUSH
34473: PPUSH
34474: PPUSH
34475: PPUSH
34476: PPUSH
34477: PPUSH
34478: PPUSH
34479: PPUSH
34480: PPUSH
// begin enable ;
34481: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34482: LD_ADDR_VAR 0 3
34486: PUSH
34487: LD_EXP 96
34491: PPUSH
34492: CALL 80649 0 1
34496: ST_TO_ADDR
// if not list then
34497: LD_VAR 0 3
34501: NOT
34502: IFFALSE 34506
// exit ;
34504: GO 35150
// for i := 1 to list do
34506: LD_ADDR_VAR 0 1
34510: PUSH
34511: DOUBLE
34512: LD_INT 1
34514: DEC
34515: ST_TO_ADDR
34516: LD_VAR 0 3
34520: PUSH
34521: FOR_TO
34522: IFFALSE 35148
// begin depot := list [ i ] [ 2 ] ;
34524: LD_ADDR_VAR 0 8
34528: PUSH
34529: LD_VAR 0 3
34533: PUSH
34534: LD_VAR 0 1
34538: ARRAY
34539: PUSH
34540: LD_INT 2
34542: ARRAY
34543: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34544: LD_ADDR_VAR 0 5
34548: PUSH
34549: LD_VAR 0 3
34553: PUSH
34554: LD_VAR 0 1
34558: ARRAY
34559: PUSH
34560: LD_INT 1
34562: ARRAY
34563: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34564: LD_VAR 0 8
34568: PPUSH
34569: CALL_OW 301
34573: PUSH
34574: LD_VAR 0 5
34578: PUSH
34579: LD_VAR 0 8
34583: PPUSH
34584: CALL_OW 255
34588: NONEQUAL
34589: OR
34590: IFFALSE 34619
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34592: LD_ADDR_EXP 96
34596: PUSH
34597: LD_EXP 96
34601: PPUSH
34602: LD_VAR 0 8
34606: PPUSH
34607: LD_INT 0
34609: PPUSH
34610: CALL_OW 1
34614: ST_TO_ADDR
// exit ;
34615: POP
34616: POP
34617: GO 35150
// end ; x := list [ i ] [ 3 ] ;
34619: LD_ADDR_VAR 0 6
34623: PUSH
34624: LD_VAR 0 3
34628: PUSH
34629: LD_VAR 0 1
34633: ARRAY
34634: PUSH
34635: LD_INT 3
34637: ARRAY
34638: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34639: LD_ADDR_VAR 0 7
34643: PUSH
34644: LD_VAR 0 3
34648: PUSH
34649: LD_VAR 0 1
34653: ARRAY
34654: PUSH
34655: LD_INT 4
34657: ARRAY
34658: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34659: LD_ADDR_VAR 0 9
34663: PUSH
34664: LD_VAR 0 6
34668: PPUSH
34669: LD_VAR 0 7
34673: PPUSH
34674: LD_INT 16
34676: PPUSH
34677: CALL 79237 0 3
34681: ST_TO_ADDR
// if not cratesNearbyPoint then
34682: LD_VAR 0 9
34686: NOT
34687: IFFALSE 34693
// exit ;
34689: POP
34690: POP
34691: GO 35150
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34693: LD_ADDR_VAR 0 4
34697: PUSH
34698: LD_INT 22
34700: PUSH
34701: LD_VAR 0 5
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: LD_INT 60
34715: PUSH
34716: EMPTY
34717: LIST
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 91
34725: PUSH
34726: LD_VAR 0 8
34730: PUSH
34731: LD_INT 6
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: LD_INT 25
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 25
34754: PUSH
34755: LD_INT 16
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: LIST
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: PPUSH
34773: CALL_OW 69
34777: PUSH
34778: LD_VAR 0 8
34782: PPUSH
34783: CALL_OW 313
34787: PPUSH
34788: LD_INT 3
34790: PUSH
34791: LD_INT 60
34793: PUSH
34794: EMPTY
34795: LIST
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 2
34803: PUSH
34804: LD_INT 25
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 25
34816: PUSH
34817: LD_INT 16
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PPUSH
34833: CALL_OW 72
34837: UNION
34838: ST_TO_ADDR
// if tmp then
34839: LD_VAR 0 4
34843: IFFALSE 34923
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34845: LD_ADDR_VAR 0 4
34849: PUSH
34850: LD_VAR 0 4
34854: PPUSH
34855: LD_INT 3
34857: PPUSH
34858: CALL 77206 0 2
34862: ST_TO_ADDR
// for j in tmp do
34863: LD_ADDR_VAR 0 2
34867: PUSH
34868: LD_VAR 0 4
34872: PUSH
34873: FOR_IN
34874: IFFALSE 34917
// begin if IsInUnit ( j ) then
34876: LD_VAR 0 2
34880: PPUSH
34881: CALL_OW 310
34885: IFFALSE 34896
// ComExit ( j ) ;
34887: LD_VAR 0 2
34891: PPUSH
34892: CALL 77289 0 1
// AddComCollect ( j , x , y ) ;
34896: LD_VAR 0 2
34900: PPUSH
34901: LD_VAR 0 6
34905: PPUSH
34906: LD_VAR 0 7
34910: PPUSH
34911: CALL_OW 177
// end ;
34915: GO 34873
34917: POP
34918: POP
// exit ;
34919: POP
34920: POP
34921: GO 35150
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34923: LD_ADDR_VAR 0 4
34927: PUSH
34928: LD_INT 22
34930: PUSH
34931: LD_VAR 0 5
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 91
34942: PUSH
34943: LD_VAR 0 8
34947: PUSH
34948: LD_INT 8
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 2
34958: PUSH
34959: LD_INT 34
34961: PUSH
34962: LD_INT 12
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 34
34971: PUSH
34972: LD_INT 51
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 34
34981: PUSH
34982: LD_INT 32
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 34
34991: PUSH
34992: LD_INT 89
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: LIST
35010: PPUSH
35011: CALL_OW 69
35015: ST_TO_ADDR
// if tmp then
35016: LD_VAR 0 4
35020: IFFALSE 35146
// begin for j in tmp do
35022: LD_ADDR_VAR 0 2
35026: PUSH
35027: LD_VAR 0 4
35031: PUSH
35032: FOR_IN
35033: IFFALSE 35144
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35035: LD_VAR 0 2
35039: PPUSH
35040: CALL_OW 262
35044: PUSH
35045: LD_INT 3
35047: EQUAL
35048: PUSH
35049: LD_VAR 0 2
35053: PPUSH
35054: CALL_OW 261
35058: PUSH
35059: LD_INT 20
35061: GREATER
35062: OR
35063: PUSH
35064: LD_VAR 0 2
35068: PPUSH
35069: CALL_OW 314
35073: NOT
35074: AND
35075: PUSH
35076: LD_VAR 0 2
35080: PPUSH
35081: CALL_OW 263
35085: PUSH
35086: LD_INT 1
35088: NONEQUAL
35089: PUSH
35090: LD_VAR 0 2
35094: PPUSH
35095: CALL_OW 311
35099: OR
35100: AND
35101: IFFALSE 35142
// begin ComCollect ( j , x , y ) ;
35103: LD_VAR 0 2
35107: PPUSH
35108: LD_VAR 0 6
35112: PPUSH
35113: LD_VAR 0 7
35117: PPUSH
35118: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35122: LD_VAR 0 2
35126: PPUSH
35127: LD_VAR 0 8
35131: PPUSH
35132: CALL_OW 172
// exit ;
35136: POP
35137: POP
35138: POP
35139: POP
35140: GO 35150
// end ;
35142: GO 35032
35144: POP
35145: POP
// end ; end ;
35146: GO 34521
35148: POP
35149: POP
// end ; end_of_file
35150: PPOPN 9
35152: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35153: LD_INT 0
35155: PPUSH
35156: PPUSH
35157: PPUSH
35158: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35159: LD_VAR 0 1
35163: PPUSH
35164: CALL_OW 264
35168: PUSH
35169: LD_INT 91
35171: EQUAL
35172: IFFALSE 35244
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35174: LD_INT 68
35176: PPUSH
35177: LD_VAR 0 1
35181: PPUSH
35182: CALL_OW 255
35186: PPUSH
35187: CALL_OW 321
35191: PUSH
35192: LD_INT 2
35194: EQUAL
35195: IFFALSE 35207
// eff := 70 else
35197: LD_ADDR_VAR 0 4
35201: PUSH
35202: LD_INT 70
35204: ST_TO_ADDR
35205: GO 35215
// eff := 30 ;
35207: LD_ADDR_VAR 0 4
35211: PUSH
35212: LD_INT 30
35214: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35215: LD_VAR 0 1
35219: PPUSH
35220: CALL_OW 250
35224: PPUSH
35225: LD_VAR 0 1
35229: PPUSH
35230: CALL_OW 251
35234: PPUSH
35235: LD_VAR 0 4
35239: PPUSH
35240: CALL_OW 495
// end ; end ;
35244: LD_VAR 0 2
35248: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35249: LD_INT 0
35251: PPUSH
// end ;
35252: LD_VAR 0 4
35256: RET
// export function SOS_Command ( cmd ) ; begin
35257: LD_INT 0
35259: PPUSH
// end ;
35260: LD_VAR 0 2
35264: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35265: LD_INT 0
35267: PPUSH
// end ;
35268: LD_VAR 0 6
35272: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35273: LD_INT 0
35275: PPUSH
35276: PPUSH
// if not vehicle or not factory then
35277: LD_VAR 0 1
35281: NOT
35282: PUSH
35283: LD_VAR 0 2
35287: NOT
35288: OR
35289: IFFALSE 35293
// exit ;
35291: GO 35524
// if factoryWaypoints >= factory then
35293: LD_EXP 95
35297: PUSH
35298: LD_VAR 0 2
35302: GREATEREQUAL
35303: IFFALSE 35524
// if factoryWaypoints [ factory ] then
35305: LD_EXP 95
35309: PUSH
35310: LD_VAR 0 2
35314: ARRAY
35315: IFFALSE 35524
// begin if GetControl ( vehicle ) = control_manual then
35317: LD_VAR 0 1
35321: PPUSH
35322: CALL_OW 263
35326: PUSH
35327: LD_INT 1
35329: EQUAL
35330: IFFALSE 35411
// begin driver := IsDrivenBy ( vehicle ) ;
35332: LD_ADDR_VAR 0 4
35336: PUSH
35337: LD_VAR 0 1
35341: PPUSH
35342: CALL_OW 311
35346: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35347: LD_VAR 0 4
35351: PPUSH
35352: LD_EXP 95
35356: PUSH
35357: LD_VAR 0 2
35361: ARRAY
35362: PUSH
35363: LD_INT 3
35365: ARRAY
35366: PPUSH
35367: LD_EXP 95
35371: PUSH
35372: LD_VAR 0 2
35376: ARRAY
35377: PUSH
35378: LD_INT 4
35380: ARRAY
35381: PPUSH
35382: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35386: LD_VAR 0 4
35390: PPUSH
35391: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35395: LD_VAR 0 4
35399: PPUSH
35400: LD_VAR 0 2
35404: PPUSH
35405: CALL_OW 180
// end else
35409: GO 35524
// if GetControl ( vehicle ) = control_remote then
35411: LD_VAR 0 1
35415: PPUSH
35416: CALL_OW 263
35420: PUSH
35421: LD_INT 2
35423: EQUAL
35424: IFFALSE 35485
// begin wait ( 0 0$2 ) ;
35426: LD_INT 70
35428: PPUSH
35429: CALL_OW 67
// if Connect ( vehicle ) then
35433: LD_VAR 0 1
35437: PPUSH
35438: CALL 47548 0 1
35442: IFFALSE 35483
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35444: LD_VAR 0 1
35448: PPUSH
35449: LD_EXP 95
35453: PUSH
35454: LD_VAR 0 2
35458: ARRAY
35459: PUSH
35460: LD_INT 3
35462: ARRAY
35463: PPUSH
35464: LD_EXP 95
35468: PUSH
35469: LD_VAR 0 2
35473: ARRAY
35474: PUSH
35475: LD_INT 4
35477: ARRAY
35478: PPUSH
35479: CALL_OW 171
// end else
35483: GO 35524
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35485: LD_VAR 0 1
35489: PPUSH
35490: LD_EXP 95
35494: PUSH
35495: LD_VAR 0 2
35499: ARRAY
35500: PUSH
35501: LD_INT 3
35503: ARRAY
35504: PPUSH
35505: LD_EXP 95
35509: PUSH
35510: LD_VAR 0 2
35514: ARRAY
35515: PUSH
35516: LD_INT 4
35518: ARRAY
35519: PPUSH
35520: CALL_OW 171
// end ; end ;
35524: LD_VAR 0 3
35528: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35529: LD_INT 0
35531: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35532: LD_VAR 0 1
35536: PUSH
35537: LD_INT 250
35539: EQUAL
35540: PUSH
35541: LD_VAR 0 2
35545: PPUSH
35546: CALL_OW 264
35550: PUSH
35551: LD_INT 81
35553: EQUAL
35554: AND
35555: IFFALSE 35576
// MinerPlaceMine ( unit , x , y ) ;
35557: LD_VAR 0 2
35561: PPUSH
35562: LD_VAR 0 4
35566: PPUSH
35567: LD_VAR 0 5
35571: PPUSH
35572: CALL 37961 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35576: LD_VAR 0 1
35580: PUSH
35581: LD_INT 251
35583: EQUAL
35584: PUSH
35585: LD_VAR 0 2
35589: PPUSH
35590: CALL_OW 264
35594: PUSH
35595: LD_INT 81
35597: EQUAL
35598: AND
35599: IFFALSE 35620
// MinerDetonateMine ( unit , x , y ) ;
35601: LD_VAR 0 2
35605: PPUSH
35606: LD_VAR 0 4
35610: PPUSH
35611: LD_VAR 0 5
35615: PPUSH
35616: CALL 38236 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35620: LD_VAR 0 1
35624: PUSH
35625: LD_INT 252
35627: EQUAL
35628: PUSH
35629: LD_VAR 0 2
35633: PPUSH
35634: CALL_OW 264
35638: PUSH
35639: LD_INT 81
35641: EQUAL
35642: AND
35643: IFFALSE 35664
// MinerCreateMinefield ( unit , x , y ) ;
35645: LD_VAR 0 2
35649: PPUSH
35650: LD_VAR 0 4
35654: PPUSH
35655: LD_VAR 0 5
35659: PPUSH
35660: CALL 38653 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35664: LD_VAR 0 1
35668: PUSH
35669: LD_INT 253
35671: EQUAL
35672: PUSH
35673: LD_VAR 0 2
35677: PPUSH
35678: CALL_OW 257
35682: PUSH
35683: LD_INT 5
35685: EQUAL
35686: AND
35687: IFFALSE 35708
// ComBinocular ( unit , x , y ) ;
35689: LD_VAR 0 2
35693: PPUSH
35694: LD_VAR 0 4
35698: PPUSH
35699: LD_VAR 0 5
35703: PPUSH
35704: CALL 39022 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35708: LD_VAR 0 1
35712: PUSH
35713: LD_INT 254
35715: EQUAL
35716: PUSH
35717: LD_VAR 0 2
35721: PPUSH
35722: CALL_OW 264
35726: PUSH
35727: LD_INT 99
35729: EQUAL
35730: AND
35731: PUSH
35732: LD_VAR 0 3
35736: PPUSH
35737: CALL_OW 263
35741: PUSH
35742: LD_INT 3
35744: EQUAL
35745: AND
35746: IFFALSE 35762
// HackDestroyVehicle ( unit , selectedUnit ) ;
35748: LD_VAR 0 2
35752: PPUSH
35753: LD_VAR 0 3
35757: PPUSH
35758: CALL 37325 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35762: LD_VAR 0 1
35766: PUSH
35767: LD_INT 255
35769: EQUAL
35770: PUSH
35771: LD_VAR 0 2
35775: PPUSH
35776: CALL_OW 264
35780: PUSH
35781: LD_INT 14
35783: PUSH
35784: LD_INT 53
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: IN
35791: AND
35792: PUSH
35793: LD_VAR 0 4
35797: PPUSH
35798: LD_VAR 0 5
35802: PPUSH
35803: CALL_OW 488
35807: AND
35808: IFFALSE 35832
// CutTreeXYR ( unit , x , y , 12 ) ;
35810: LD_VAR 0 2
35814: PPUSH
35815: LD_VAR 0 4
35819: PPUSH
35820: LD_VAR 0 5
35824: PPUSH
35825: LD_INT 12
35827: PPUSH
35828: CALL 35895 0 4
// if cmd = 256 then
35832: LD_VAR 0 1
35836: PUSH
35837: LD_INT 256
35839: EQUAL
35840: IFFALSE 35861
// SetFactoryWaypoint ( unit , x , y ) ;
35842: LD_VAR 0 2
35846: PPUSH
35847: LD_VAR 0 4
35851: PPUSH
35852: LD_VAR 0 5
35856: PPUSH
35857: CALL 33842 0 3
// if cmd = 257 then
35861: LD_VAR 0 1
35865: PUSH
35866: LD_INT 257
35868: EQUAL
35869: IFFALSE 35890
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35871: LD_VAR 0 2
35875: PPUSH
35876: LD_VAR 0 4
35880: PPUSH
35881: LD_VAR 0 5
35885: PPUSH
35886: CALL 34204 0 3
// end ;
35890: LD_VAR 0 6
35894: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35895: LD_INT 0
35897: PPUSH
35898: PPUSH
35899: PPUSH
35900: PPUSH
35901: PPUSH
35902: PPUSH
35903: PPUSH
35904: PPUSH
35905: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35906: LD_VAR 0 1
35910: NOT
35911: PUSH
35912: LD_VAR 0 2
35916: PPUSH
35917: LD_VAR 0 3
35921: PPUSH
35922: CALL_OW 488
35926: NOT
35927: OR
35928: PUSH
35929: LD_VAR 0 4
35933: NOT
35934: OR
35935: IFFALSE 35939
// exit ;
35937: GO 36279
// list := [ ] ;
35939: LD_ADDR_VAR 0 13
35943: PUSH
35944: EMPTY
35945: ST_TO_ADDR
// if x - r < 0 then
35946: LD_VAR 0 2
35950: PUSH
35951: LD_VAR 0 4
35955: MINUS
35956: PUSH
35957: LD_INT 0
35959: LESS
35960: IFFALSE 35972
// min_x := 0 else
35962: LD_ADDR_VAR 0 7
35966: PUSH
35967: LD_INT 0
35969: ST_TO_ADDR
35970: GO 35988
// min_x := x - r ;
35972: LD_ADDR_VAR 0 7
35976: PUSH
35977: LD_VAR 0 2
35981: PUSH
35982: LD_VAR 0 4
35986: MINUS
35987: ST_TO_ADDR
// if y - r < 0 then
35988: LD_VAR 0 3
35992: PUSH
35993: LD_VAR 0 4
35997: MINUS
35998: PUSH
35999: LD_INT 0
36001: LESS
36002: IFFALSE 36014
// min_y := 0 else
36004: LD_ADDR_VAR 0 8
36008: PUSH
36009: LD_INT 0
36011: ST_TO_ADDR
36012: GO 36030
// min_y := y - r ;
36014: LD_ADDR_VAR 0 8
36018: PUSH
36019: LD_VAR 0 3
36023: PUSH
36024: LD_VAR 0 4
36028: MINUS
36029: ST_TO_ADDR
// max_x := x + r ;
36030: LD_ADDR_VAR 0 9
36034: PUSH
36035: LD_VAR 0 2
36039: PUSH
36040: LD_VAR 0 4
36044: PLUS
36045: ST_TO_ADDR
// max_y := y + r ;
36046: LD_ADDR_VAR 0 10
36050: PUSH
36051: LD_VAR 0 3
36055: PUSH
36056: LD_VAR 0 4
36060: PLUS
36061: ST_TO_ADDR
// for _x = min_x to max_x do
36062: LD_ADDR_VAR 0 11
36066: PUSH
36067: DOUBLE
36068: LD_VAR 0 7
36072: DEC
36073: ST_TO_ADDR
36074: LD_VAR 0 9
36078: PUSH
36079: FOR_TO
36080: IFFALSE 36197
// for _y = min_y to max_y do
36082: LD_ADDR_VAR 0 12
36086: PUSH
36087: DOUBLE
36088: LD_VAR 0 8
36092: DEC
36093: ST_TO_ADDR
36094: LD_VAR 0 10
36098: PUSH
36099: FOR_TO
36100: IFFALSE 36193
// begin if not ValidHex ( _x , _y ) then
36102: LD_VAR 0 11
36106: PPUSH
36107: LD_VAR 0 12
36111: PPUSH
36112: CALL_OW 488
36116: NOT
36117: IFFALSE 36121
// continue ;
36119: GO 36099
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36121: LD_VAR 0 11
36125: PPUSH
36126: LD_VAR 0 12
36130: PPUSH
36131: CALL_OW 351
36135: PUSH
36136: LD_VAR 0 11
36140: PPUSH
36141: LD_VAR 0 12
36145: PPUSH
36146: CALL_OW 554
36150: AND
36151: IFFALSE 36191
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36153: LD_ADDR_VAR 0 13
36157: PUSH
36158: LD_VAR 0 13
36162: PPUSH
36163: LD_VAR 0 13
36167: PUSH
36168: LD_INT 1
36170: PLUS
36171: PPUSH
36172: LD_VAR 0 11
36176: PUSH
36177: LD_VAR 0 12
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PPUSH
36186: CALL_OW 2
36190: ST_TO_ADDR
// end ;
36191: GO 36099
36193: POP
36194: POP
36195: GO 36079
36197: POP
36198: POP
// if not list then
36199: LD_VAR 0 13
36203: NOT
36204: IFFALSE 36208
// exit ;
36206: GO 36279
// for i in list do
36208: LD_ADDR_VAR 0 6
36212: PUSH
36213: LD_VAR 0 13
36217: PUSH
36218: FOR_IN
36219: IFFALSE 36277
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36221: LD_VAR 0 1
36225: PPUSH
36226: LD_STRING M
36228: PUSH
36229: LD_VAR 0 6
36233: PUSH
36234: LD_INT 1
36236: ARRAY
36237: PUSH
36238: LD_VAR 0 6
36242: PUSH
36243: LD_INT 2
36245: ARRAY
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: PUSH
36268: EMPTY
36269: LIST
36270: PPUSH
36271: CALL_OW 447
36275: GO 36218
36277: POP
36278: POP
// end ;
36279: LD_VAR 0 5
36283: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36284: LD_EXP 98
36288: NOT
36289: IFFALSE 36339
36291: GO 36293
36293: DISABLE
// begin initHack := true ;
36294: LD_ADDR_EXP 98
36298: PUSH
36299: LD_INT 1
36301: ST_TO_ADDR
// hackTanks := [ ] ;
36302: LD_ADDR_EXP 99
36306: PUSH
36307: EMPTY
36308: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36309: LD_ADDR_EXP 100
36313: PUSH
36314: EMPTY
36315: ST_TO_ADDR
// hackLimit := 3 ;
36316: LD_ADDR_EXP 101
36320: PUSH
36321: LD_INT 3
36323: ST_TO_ADDR
// hackDist := 12 ;
36324: LD_ADDR_EXP 102
36328: PUSH
36329: LD_INT 12
36331: ST_TO_ADDR
// hackCounter := [ ] ;
36332: LD_ADDR_EXP 103
36336: PUSH
36337: EMPTY
36338: ST_TO_ADDR
// end ;
36339: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36340: LD_EXP 98
36344: PUSH
36345: LD_INT 34
36347: PUSH
36348: LD_INT 99
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PPUSH
36355: CALL_OW 69
36359: AND
36360: IFFALSE 36613
36362: GO 36364
36364: DISABLE
36365: LD_INT 0
36367: PPUSH
36368: PPUSH
// begin enable ;
36369: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36370: LD_ADDR_VAR 0 1
36374: PUSH
36375: LD_INT 34
36377: PUSH
36378: LD_INT 99
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PPUSH
36385: CALL_OW 69
36389: PUSH
36390: FOR_IN
36391: IFFALSE 36611
// begin if not i in hackTanks then
36393: LD_VAR 0 1
36397: PUSH
36398: LD_EXP 99
36402: IN
36403: NOT
36404: IFFALSE 36487
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36406: LD_ADDR_EXP 99
36410: PUSH
36411: LD_EXP 99
36415: PPUSH
36416: LD_EXP 99
36420: PUSH
36421: LD_INT 1
36423: PLUS
36424: PPUSH
36425: LD_VAR 0 1
36429: PPUSH
36430: CALL_OW 1
36434: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36435: LD_ADDR_EXP 100
36439: PUSH
36440: LD_EXP 100
36444: PPUSH
36445: LD_EXP 100
36449: PUSH
36450: LD_INT 1
36452: PLUS
36453: PPUSH
36454: EMPTY
36455: PPUSH
36456: CALL_OW 1
36460: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36461: LD_ADDR_EXP 103
36465: PUSH
36466: LD_EXP 103
36470: PPUSH
36471: LD_EXP 103
36475: PUSH
36476: LD_INT 1
36478: PLUS
36479: PPUSH
36480: EMPTY
36481: PPUSH
36482: CALL_OW 1
36486: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36487: LD_VAR 0 1
36491: PPUSH
36492: CALL_OW 302
36496: NOT
36497: IFFALSE 36510
// begin HackUnlinkAll ( i ) ;
36499: LD_VAR 0 1
36503: PPUSH
36504: CALL 36616 0 1
// continue ;
36508: GO 36390
// end ; HackCheckCapturedStatus ( i ) ;
36510: LD_VAR 0 1
36514: PPUSH
36515: CALL 37059 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36519: LD_ADDR_VAR 0 2
36523: PUSH
36524: LD_INT 81
36526: PUSH
36527: LD_VAR 0 1
36531: PPUSH
36532: CALL_OW 255
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 33
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 91
36553: PUSH
36554: LD_VAR 0 1
36558: PUSH
36559: LD_EXP 102
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 50
36571: PUSH
36572: EMPTY
36573: LIST
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: PPUSH
36581: CALL_OW 69
36585: ST_TO_ADDR
// if not tmp then
36586: LD_VAR 0 2
36590: NOT
36591: IFFALSE 36595
// continue ;
36593: GO 36390
// HackLink ( i , tmp ) ;
36595: LD_VAR 0 1
36599: PPUSH
36600: LD_VAR 0 2
36604: PPUSH
36605: CALL 36752 0 2
// end ;
36609: GO 36390
36611: POP
36612: POP
// end ;
36613: PPOPN 2
36615: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36616: LD_INT 0
36618: PPUSH
36619: PPUSH
36620: PPUSH
// if not hack in hackTanks then
36621: LD_VAR 0 1
36625: PUSH
36626: LD_EXP 99
36630: IN
36631: NOT
36632: IFFALSE 36636
// exit ;
36634: GO 36747
// index := GetElementIndex ( hackTanks , hack ) ;
36636: LD_ADDR_VAR 0 4
36640: PUSH
36641: LD_EXP 99
36645: PPUSH
36646: LD_VAR 0 1
36650: PPUSH
36651: CALL 44364 0 2
36655: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36656: LD_EXP 100
36660: PUSH
36661: LD_VAR 0 4
36665: ARRAY
36666: IFFALSE 36747
// begin for i in hackTanksCaptured [ index ] do
36668: LD_ADDR_VAR 0 3
36672: PUSH
36673: LD_EXP 100
36677: PUSH
36678: LD_VAR 0 4
36682: ARRAY
36683: PUSH
36684: FOR_IN
36685: IFFALSE 36711
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36687: LD_VAR 0 3
36691: PUSH
36692: LD_INT 1
36694: ARRAY
36695: PPUSH
36696: LD_VAR 0 3
36700: PUSH
36701: LD_INT 2
36703: ARRAY
36704: PPUSH
36705: CALL_OW 235
36709: GO 36684
36711: POP
36712: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36713: LD_ADDR_EXP 100
36717: PUSH
36718: LD_EXP 100
36722: PPUSH
36723: LD_VAR 0 4
36727: PPUSH
36728: EMPTY
36729: PPUSH
36730: CALL_OW 1
36734: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36735: LD_VAR 0 1
36739: PPUSH
36740: LD_INT 0
36742: PPUSH
36743: CALL_OW 505
// end ; end ;
36747: LD_VAR 0 2
36751: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36752: LD_INT 0
36754: PPUSH
36755: PPUSH
36756: PPUSH
// if not hack in hackTanks or not vehicles then
36757: LD_VAR 0 1
36761: PUSH
36762: LD_EXP 99
36766: IN
36767: NOT
36768: PUSH
36769: LD_VAR 0 2
36773: NOT
36774: OR
36775: IFFALSE 36779
// exit ;
36777: GO 37054
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36779: LD_ADDR_VAR 0 2
36783: PUSH
36784: LD_VAR 0 1
36788: PPUSH
36789: LD_VAR 0 2
36793: PPUSH
36794: LD_INT 1
36796: PPUSH
36797: LD_INT 1
36799: PPUSH
36800: CALL 45014 0 4
36804: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36805: LD_ADDR_VAR 0 5
36809: PUSH
36810: LD_EXP 99
36814: PPUSH
36815: LD_VAR 0 1
36819: PPUSH
36820: CALL 44364 0 2
36824: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36825: LD_EXP 100
36829: PUSH
36830: LD_VAR 0 5
36834: ARRAY
36835: PUSH
36836: LD_EXP 101
36840: LESS
36841: IFFALSE 37030
// begin for i := 1 to vehicles do
36843: LD_ADDR_VAR 0 4
36847: PUSH
36848: DOUBLE
36849: LD_INT 1
36851: DEC
36852: ST_TO_ADDR
36853: LD_VAR 0 2
36857: PUSH
36858: FOR_TO
36859: IFFALSE 37028
// begin if hackTanksCaptured [ index ] = hackLimit then
36861: LD_EXP 100
36865: PUSH
36866: LD_VAR 0 5
36870: ARRAY
36871: PUSH
36872: LD_EXP 101
36876: EQUAL
36877: IFFALSE 36881
// break ;
36879: GO 37028
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36881: LD_ADDR_EXP 103
36885: PUSH
36886: LD_EXP 103
36890: PPUSH
36891: LD_VAR 0 5
36895: PPUSH
36896: LD_EXP 103
36900: PUSH
36901: LD_VAR 0 5
36905: ARRAY
36906: PUSH
36907: LD_INT 1
36909: PLUS
36910: PPUSH
36911: CALL_OW 1
36915: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36916: LD_ADDR_EXP 100
36920: PUSH
36921: LD_EXP 100
36925: PPUSH
36926: LD_VAR 0 5
36930: PUSH
36931: LD_EXP 100
36935: PUSH
36936: LD_VAR 0 5
36940: ARRAY
36941: PUSH
36942: LD_INT 1
36944: PLUS
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PPUSH
36950: LD_VAR 0 2
36954: PUSH
36955: LD_VAR 0 4
36959: ARRAY
36960: PUSH
36961: LD_VAR 0 2
36965: PUSH
36966: LD_VAR 0 4
36970: ARRAY
36971: PPUSH
36972: CALL_OW 255
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PPUSH
36981: CALL 44579 0 3
36985: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36986: LD_VAR 0 2
36990: PUSH
36991: LD_VAR 0 4
36995: ARRAY
36996: PPUSH
36997: LD_VAR 0 1
37001: PPUSH
37002: CALL_OW 255
37006: PPUSH
37007: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37011: LD_VAR 0 2
37015: PUSH
37016: LD_VAR 0 4
37020: ARRAY
37021: PPUSH
37022: CALL_OW 141
// end ;
37026: GO 36858
37028: POP
37029: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37030: LD_VAR 0 1
37034: PPUSH
37035: LD_EXP 100
37039: PUSH
37040: LD_VAR 0 5
37044: ARRAY
37045: PUSH
37046: LD_INT 0
37048: PLUS
37049: PPUSH
37050: CALL_OW 505
// end ;
37054: LD_VAR 0 3
37058: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37059: LD_INT 0
37061: PPUSH
37062: PPUSH
37063: PPUSH
37064: PPUSH
// if not hack in hackTanks then
37065: LD_VAR 0 1
37069: PUSH
37070: LD_EXP 99
37074: IN
37075: NOT
37076: IFFALSE 37080
// exit ;
37078: GO 37320
// index := GetElementIndex ( hackTanks , hack ) ;
37080: LD_ADDR_VAR 0 4
37084: PUSH
37085: LD_EXP 99
37089: PPUSH
37090: LD_VAR 0 1
37094: PPUSH
37095: CALL 44364 0 2
37099: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37100: LD_ADDR_VAR 0 3
37104: PUSH
37105: DOUBLE
37106: LD_EXP 100
37110: PUSH
37111: LD_VAR 0 4
37115: ARRAY
37116: INC
37117: ST_TO_ADDR
37118: LD_INT 1
37120: PUSH
37121: FOR_DOWNTO
37122: IFFALSE 37294
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37124: LD_ADDR_VAR 0 5
37128: PUSH
37129: LD_EXP 100
37133: PUSH
37134: LD_VAR 0 4
37138: ARRAY
37139: PUSH
37140: LD_VAR 0 3
37144: ARRAY
37145: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37146: LD_VAR 0 5
37150: PUSH
37151: LD_INT 1
37153: ARRAY
37154: PPUSH
37155: CALL_OW 302
37159: NOT
37160: PUSH
37161: LD_VAR 0 5
37165: PUSH
37166: LD_INT 1
37168: ARRAY
37169: PPUSH
37170: CALL_OW 255
37174: PUSH
37175: LD_VAR 0 1
37179: PPUSH
37180: CALL_OW 255
37184: NONEQUAL
37185: OR
37186: IFFALSE 37292
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37188: LD_VAR 0 5
37192: PUSH
37193: LD_INT 1
37195: ARRAY
37196: PPUSH
37197: CALL_OW 305
37201: PUSH
37202: LD_VAR 0 5
37206: PUSH
37207: LD_INT 1
37209: ARRAY
37210: PPUSH
37211: CALL_OW 255
37215: PUSH
37216: LD_VAR 0 1
37220: PPUSH
37221: CALL_OW 255
37225: EQUAL
37226: AND
37227: IFFALSE 37251
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37229: LD_VAR 0 5
37233: PUSH
37234: LD_INT 1
37236: ARRAY
37237: PPUSH
37238: LD_VAR 0 5
37242: PUSH
37243: LD_INT 2
37245: ARRAY
37246: PPUSH
37247: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37251: LD_ADDR_EXP 100
37255: PUSH
37256: LD_EXP 100
37260: PPUSH
37261: LD_VAR 0 4
37265: PPUSH
37266: LD_EXP 100
37270: PUSH
37271: LD_VAR 0 4
37275: ARRAY
37276: PPUSH
37277: LD_VAR 0 3
37281: PPUSH
37282: CALL_OW 3
37286: PPUSH
37287: CALL_OW 1
37291: ST_TO_ADDR
// end ; end ;
37292: GO 37121
37294: POP
37295: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37296: LD_VAR 0 1
37300: PPUSH
37301: LD_EXP 100
37305: PUSH
37306: LD_VAR 0 4
37310: ARRAY
37311: PUSH
37312: LD_INT 0
37314: PLUS
37315: PPUSH
37316: CALL_OW 505
// end ;
37320: LD_VAR 0 2
37324: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37325: LD_INT 0
37327: PPUSH
37328: PPUSH
37329: PPUSH
37330: PPUSH
// if not hack in hackTanks then
37331: LD_VAR 0 1
37335: PUSH
37336: LD_EXP 99
37340: IN
37341: NOT
37342: IFFALSE 37346
// exit ;
37344: GO 37431
// index := GetElementIndex ( hackTanks , hack ) ;
37346: LD_ADDR_VAR 0 5
37350: PUSH
37351: LD_EXP 99
37355: PPUSH
37356: LD_VAR 0 1
37360: PPUSH
37361: CALL 44364 0 2
37365: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37366: LD_ADDR_VAR 0 4
37370: PUSH
37371: DOUBLE
37372: LD_INT 1
37374: DEC
37375: ST_TO_ADDR
37376: LD_EXP 100
37380: PUSH
37381: LD_VAR 0 5
37385: ARRAY
37386: PUSH
37387: FOR_TO
37388: IFFALSE 37429
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37390: LD_EXP 100
37394: PUSH
37395: LD_VAR 0 5
37399: ARRAY
37400: PUSH
37401: LD_VAR 0 4
37405: ARRAY
37406: PUSH
37407: LD_INT 1
37409: ARRAY
37410: PUSH
37411: LD_VAR 0 2
37415: EQUAL
37416: IFFALSE 37427
// KillUnit ( vehicle ) ;
37418: LD_VAR 0 2
37422: PPUSH
37423: CALL_OW 66
37427: GO 37387
37429: POP
37430: POP
// end ;
37431: LD_VAR 0 3
37435: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37436: LD_EXP 104
37440: NOT
37441: IFFALSE 37476
37443: GO 37445
37445: DISABLE
// begin initMiner := true ;
37446: LD_ADDR_EXP 104
37450: PUSH
37451: LD_INT 1
37453: ST_TO_ADDR
// minersList := [ ] ;
37454: LD_ADDR_EXP 105
37458: PUSH
37459: EMPTY
37460: ST_TO_ADDR
// minerMinesList := [ ] ;
37461: LD_ADDR_EXP 106
37465: PUSH
37466: EMPTY
37467: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37468: LD_ADDR_EXP 107
37472: PUSH
37473: LD_INT 5
37475: ST_TO_ADDR
// end ;
37476: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37477: LD_EXP 104
37481: PUSH
37482: LD_INT 34
37484: PUSH
37485: LD_INT 81
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PPUSH
37492: CALL_OW 69
37496: AND
37497: IFFALSE 37958
37499: GO 37501
37501: DISABLE
37502: LD_INT 0
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
// begin enable ;
37508: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37509: LD_ADDR_VAR 0 1
37513: PUSH
37514: LD_INT 34
37516: PUSH
37517: LD_INT 81
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PPUSH
37524: CALL_OW 69
37528: PUSH
37529: FOR_IN
37530: IFFALSE 37602
// begin if not i in minersList then
37532: LD_VAR 0 1
37536: PUSH
37537: LD_EXP 105
37541: IN
37542: NOT
37543: IFFALSE 37600
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37545: LD_ADDR_EXP 105
37549: PUSH
37550: LD_EXP 105
37554: PPUSH
37555: LD_EXP 105
37559: PUSH
37560: LD_INT 1
37562: PLUS
37563: PPUSH
37564: LD_VAR 0 1
37568: PPUSH
37569: CALL_OW 1
37573: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37574: LD_ADDR_EXP 106
37578: PUSH
37579: LD_EXP 106
37583: PPUSH
37584: LD_EXP 106
37588: PUSH
37589: LD_INT 1
37591: PLUS
37592: PPUSH
37593: EMPTY
37594: PPUSH
37595: CALL_OW 1
37599: ST_TO_ADDR
// end end ;
37600: GO 37529
37602: POP
37603: POP
// for i := minerMinesList downto 1 do
37604: LD_ADDR_VAR 0 1
37608: PUSH
37609: DOUBLE
37610: LD_EXP 106
37614: INC
37615: ST_TO_ADDR
37616: LD_INT 1
37618: PUSH
37619: FOR_DOWNTO
37620: IFFALSE 37956
// begin if IsLive ( minersList [ i ] ) then
37622: LD_EXP 105
37626: PUSH
37627: LD_VAR 0 1
37631: ARRAY
37632: PPUSH
37633: CALL_OW 300
37637: IFFALSE 37665
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37639: LD_EXP 105
37643: PUSH
37644: LD_VAR 0 1
37648: ARRAY
37649: PPUSH
37650: LD_EXP 106
37654: PUSH
37655: LD_VAR 0 1
37659: ARRAY
37660: PPUSH
37661: CALL_OW 505
// if not minerMinesList [ i ] then
37665: LD_EXP 106
37669: PUSH
37670: LD_VAR 0 1
37674: ARRAY
37675: NOT
37676: IFFALSE 37680
// continue ;
37678: GO 37619
// for j := minerMinesList [ i ] downto 1 do
37680: LD_ADDR_VAR 0 2
37684: PUSH
37685: DOUBLE
37686: LD_EXP 106
37690: PUSH
37691: LD_VAR 0 1
37695: ARRAY
37696: INC
37697: ST_TO_ADDR
37698: LD_INT 1
37700: PUSH
37701: FOR_DOWNTO
37702: IFFALSE 37952
// begin side := GetSide ( minersList [ i ] ) ;
37704: LD_ADDR_VAR 0 3
37708: PUSH
37709: LD_EXP 105
37713: PUSH
37714: LD_VAR 0 1
37718: ARRAY
37719: PPUSH
37720: CALL_OW 255
37724: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37725: LD_ADDR_VAR 0 4
37729: PUSH
37730: LD_EXP 106
37734: PUSH
37735: LD_VAR 0 1
37739: ARRAY
37740: PUSH
37741: LD_VAR 0 2
37745: ARRAY
37746: PUSH
37747: LD_INT 1
37749: ARRAY
37750: PPUSH
37751: LD_EXP 106
37755: PUSH
37756: LD_VAR 0 1
37760: ARRAY
37761: PUSH
37762: LD_VAR 0 2
37766: ARRAY
37767: PUSH
37768: LD_INT 2
37770: ARRAY
37771: PPUSH
37772: CALL_OW 428
37776: ST_TO_ADDR
// if not tmp then
37777: LD_VAR 0 4
37781: NOT
37782: IFFALSE 37786
// continue ;
37784: GO 37701
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37786: LD_VAR 0 4
37790: PUSH
37791: LD_INT 81
37793: PUSH
37794: LD_VAR 0 3
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PPUSH
37803: CALL_OW 69
37807: IN
37808: PUSH
37809: LD_EXP 106
37813: PUSH
37814: LD_VAR 0 1
37818: ARRAY
37819: PUSH
37820: LD_VAR 0 2
37824: ARRAY
37825: PUSH
37826: LD_INT 1
37828: ARRAY
37829: PPUSH
37830: LD_EXP 106
37834: PUSH
37835: LD_VAR 0 1
37839: ARRAY
37840: PUSH
37841: LD_VAR 0 2
37845: ARRAY
37846: PUSH
37847: LD_INT 2
37849: ARRAY
37850: PPUSH
37851: CALL_OW 458
37855: AND
37856: IFFALSE 37950
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37858: LD_EXP 106
37862: PUSH
37863: LD_VAR 0 1
37867: ARRAY
37868: PUSH
37869: LD_VAR 0 2
37873: ARRAY
37874: PUSH
37875: LD_INT 1
37877: ARRAY
37878: PPUSH
37879: LD_EXP 106
37883: PUSH
37884: LD_VAR 0 1
37888: ARRAY
37889: PUSH
37890: LD_VAR 0 2
37894: ARRAY
37895: PUSH
37896: LD_INT 2
37898: ARRAY
37899: PPUSH
37900: LD_VAR 0 3
37904: PPUSH
37905: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37909: LD_ADDR_EXP 106
37913: PUSH
37914: LD_EXP 106
37918: PPUSH
37919: LD_VAR 0 1
37923: PPUSH
37924: LD_EXP 106
37928: PUSH
37929: LD_VAR 0 1
37933: ARRAY
37934: PPUSH
37935: LD_VAR 0 2
37939: PPUSH
37940: CALL_OW 3
37944: PPUSH
37945: CALL_OW 1
37949: ST_TO_ADDR
// end ; end ;
37950: GO 37701
37952: POP
37953: POP
// end ;
37954: GO 37619
37956: POP
37957: POP
// end ;
37958: PPOPN 4
37960: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37961: LD_INT 0
37963: PPUSH
37964: PPUSH
// result := false ;
37965: LD_ADDR_VAR 0 4
37969: PUSH
37970: LD_INT 0
37972: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37973: LD_VAR 0 1
37977: PPUSH
37978: CALL_OW 264
37982: PUSH
37983: LD_INT 81
37985: EQUAL
37986: NOT
37987: IFFALSE 37991
// exit ;
37989: GO 38231
// index := GetElementIndex ( minersList , unit ) ;
37991: LD_ADDR_VAR 0 5
37995: PUSH
37996: LD_EXP 105
38000: PPUSH
38001: LD_VAR 0 1
38005: PPUSH
38006: CALL 44364 0 2
38010: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38011: LD_EXP 106
38015: PUSH
38016: LD_VAR 0 5
38020: ARRAY
38021: PUSH
38022: LD_EXP 107
38026: GREATEREQUAL
38027: IFFALSE 38031
// exit ;
38029: GO 38231
// ComMoveXY ( unit , x , y ) ;
38031: LD_VAR 0 1
38035: PPUSH
38036: LD_VAR 0 2
38040: PPUSH
38041: LD_VAR 0 3
38045: PPUSH
38046: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38050: LD_INT 35
38052: PPUSH
38053: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38057: LD_VAR 0 1
38061: PPUSH
38062: LD_VAR 0 2
38066: PPUSH
38067: LD_VAR 0 3
38071: PPUSH
38072: CALL 75700 0 3
38076: NOT
38077: PUSH
38078: LD_VAR 0 1
38082: PPUSH
38083: CALL_OW 314
38087: AND
38088: IFFALSE 38092
// exit ;
38090: GO 38231
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38092: LD_VAR 0 2
38096: PPUSH
38097: LD_VAR 0 3
38101: PPUSH
38102: CALL_OW 428
38106: PUSH
38107: LD_VAR 0 1
38111: EQUAL
38112: PUSH
38113: LD_VAR 0 1
38117: PPUSH
38118: CALL_OW 314
38122: NOT
38123: AND
38124: IFFALSE 38050
// PlaySoundXY ( x , y , PlantMine ) ;
38126: LD_VAR 0 2
38130: PPUSH
38131: LD_VAR 0 3
38135: PPUSH
38136: LD_STRING PlantMine
38138: PPUSH
38139: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38143: LD_VAR 0 2
38147: PPUSH
38148: LD_VAR 0 3
38152: PPUSH
38153: LD_VAR 0 1
38157: PPUSH
38158: CALL_OW 255
38162: PPUSH
38163: LD_INT 0
38165: PPUSH
38166: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38170: LD_ADDR_EXP 106
38174: PUSH
38175: LD_EXP 106
38179: PPUSH
38180: LD_VAR 0 5
38184: PUSH
38185: LD_EXP 106
38189: PUSH
38190: LD_VAR 0 5
38194: ARRAY
38195: PUSH
38196: LD_INT 1
38198: PLUS
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PPUSH
38204: LD_VAR 0 2
38208: PUSH
38209: LD_VAR 0 3
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PPUSH
38218: CALL 44579 0 3
38222: ST_TO_ADDR
// result := true ;
38223: LD_ADDR_VAR 0 4
38227: PUSH
38228: LD_INT 1
38230: ST_TO_ADDR
// end ;
38231: LD_VAR 0 4
38235: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38236: LD_INT 0
38238: PPUSH
38239: PPUSH
38240: PPUSH
// if not unit in minersList then
38241: LD_VAR 0 1
38245: PUSH
38246: LD_EXP 105
38250: IN
38251: NOT
38252: IFFALSE 38256
// exit ;
38254: GO 38648
// index := GetElementIndex ( minersList , unit ) ;
38256: LD_ADDR_VAR 0 6
38260: PUSH
38261: LD_EXP 105
38265: PPUSH
38266: LD_VAR 0 1
38270: PPUSH
38271: CALL 44364 0 2
38275: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38276: LD_ADDR_VAR 0 5
38280: PUSH
38281: DOUBLE
38282: LD_EXP 106
38286: PUSH
38287: LD_VAR 0 6
38291: ARRAY
38292: INC
38293: ST_TO_ADDR
38294: LD_INT 1
38296: PUSH
38297: FOR_DOWNTO
38298: IFFALSE 38459
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38300: LD_EXP 106
38304: PUSH
38305: LD_VAR 0 6
38309: ARRAY
38310: PUSH
38311: LD_VAR 0 5
38315: ARRAY
38316: PUSH
38317: LD_INT 1
38319: ARRAY
38320: PUSH
38321: LD_VAR 0 2
38325: EQUAL
38326: PUSH
38327: LD_EXP 106
38331: PUSH
38332: LD_VAR 0 6
38336: ARRAY
38337: PUSH
38338: LD_VAR 0 5
38342: ARRAY
38343: PUSH
38344: LD_INT 2
38346: ARRAY
38347: PUSH
38348: LD_VAR 0 3
38352: EQUAL
38353: AND
38354: IFFALSE 38457
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38356: LD_EXP 106
38360: PUSH
38361: LD_VAR 0 6
38365: ARRAY
38366: PUSH
38367: LD_VAR 0 5
38371: ARRAY
38372: PUSH
38373: LD_INT 1
38375: ARRAY
38376: PPUSH
38377: LD_EXP 106
38381: PUSH
38382: LD_VAR 0 6
38386: ARRAY
38387: PUSH
38388: LD_VAR 0 5
38392: ARRAY
38393: PUSH
38394: LD_INT 2
38396: ARRAY
38397: PPUSH
38398: LD_VAR 0 1
38402: PPUSH
38403: CALL_OW 255
38407: PPUSH
38408: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38412: LD_ADDR_EXP 106
38416: PUSH
38417: LD_EXP 106
38421: PPUSH
38422: LD_VAR 0 6
38426: PPUSH
38427: LD_EXP 106
38431: PUSH
38432: LD_VAR 0 6
38436: ARRAY
38437: PPUSH
38438: LD_VAR 0 5
38442: PPUSH
38443: CALL_OW 3
38447: PPUSH
38448: CALL_OW 1
38452: ST_TO_ADDR
// exit ;
38453: POP
38454: POP
38455: GO 38648
// end ; end ;
38457: GO 38297
38459: POP
38460: POP
// for i := minerMinesList [ index ] downto 1 do
38461: LD_ADDR_VAR 0 5
38465: PUSH
38466: DOUBLE
38467: LD_EXP 106
38471: PUSH
38472: LD_VAR 0 6
38476: ARRAY
38477: INC
38478: ST_TO_ADDR
38479: LD_INT 1
38481: PUSH
38482: FOR_DOWNTO
38483: IFFALSE 38646
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38485: LD_EXP 106
38489: PUSH
38490: LD_VAR 0 6
38494: ARRAY
38495: PUSH
38496: LD_VAR 0 5
38500: ARRAY
38501: PUSH
38502: LD_INT 1
38504: ARRAY
38505: PPUSH
38506: LD_EXP 106
38510: PUSH
38511: LD_VAR 0 6
38515: ARRAY
38516: PUSH
38517: LD_VAR 0 5
38521: ARRAY
38522: PUSH
38523: LD_INT 2
38525: ARRAY
38526: PPUSH
38527: LD_VAR 0 2
38531: PPUSH
38532: LD_VAR 0 3
38536: PPUSH
38537: CALL_OW 298
38541: PUSH
38542: LD_INT 6
38544: LESS
38545: IFFALSE 38644
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38547: LD_EXP 106
38551: PUSH
38552: LD_VAR 0 6
38556: ARRAY
38557: PUSH
38558: LD_VAR 0 5
38562: ARRAY
38563: PUSH
38564: LD_INT 1
38566: ARRAY
38567: PPUSH
38568: LD_EXP 106
38572: PUSH
38573: LD_VAR 0 6
38577: ARRAY
38578: PUSH
38579: LD_VAR 0 5
38583: ARRAY
38584: PUSH
38585: LD_INT 2
38587: ARRAY
38588: PPUSH
38589: LD_VAR 0 1
38593: PPUSH
38594: CALL_OW 255
38598: PPUSH
38599: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38603: LD_ADDR_EXP 106
38607: PUSH
38608: LD_EXP 106
38612: PPUSH
38613: LD_VAR 0 6
38617: PPUSH
38618: LD_EXP 106
38622: PUSH
38623: LD_VAR 0 6
38627: ARRAY
38628: PPUSH
38629: LD_VAR 0 5
38633: PPUSH
38634: CALL_OW 3
38638: PPUSH
38639: CALL_OW 1
38643: ST_TO_ADDR
// end ; end ;
38644: GO 38482
38646: POP
38647: POP
// end ;
38648: LD_VAR 0 4
38652: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38653: LD_INT 0
38655: PPUSH
38656: PPUSH
38657: PPUSH
38658: PPUSH
38659: PPUSH
38660: PPUSH
38661: PPUSH
38662: PPUSH
38663: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38664: LD_VAR 0 1
38668: PPUSH
38669: CALL_OW 264
38673: PUSH
38674: LD_INT 81
38676: EQUAL
38677: NOT
38678: PUSH
38679: LD_VAR 0 1
38683: PUSH
38684: LD_EXP 105
38688: IN
38689: NOT
38690: OR
38691: IFFALSE 38695
// exit ;
38693: GO 39017
// index := GetElementIndex ( minersList , unit ) ;
38695: LD_ADDR_VAR 0 6
38699: PUSH
38700: LD_EXP 105
38704: PPUSH
38705: LD_VAR 0 1
38709: PPUSH
38710: CALL 44364 0 2
38714: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38715: LD_ADDR_VAR 0 8
38719: PUSH
38720: LD_EXP 107
38724: PUSH
38725: LD_EXP 106
38729: PUSH
38730: LD_VAR 0 6
38734: ARRAY
38735: MINUS
38736: ST_TO_ADDR
// if not minesFreeAmount then
38737: LD_VAR 0 8
38741: NOT
38742: IFFALSE 38746
// exit ;
38744: GO 39017
// tmp := [ ] ;
38746: LD_ADDR_VAR 0 7
38750: PUSH
38751: EMPTY
38752: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38753: LD_ADDR_VAR 0 5
38757: PUSH
38758: DOUBLE
38759: LD_INT 1
38761: DEC
38762: ST_TO_ADDR
38763: LD_VAR 0 8
38767: PUSH
38768: FOR_TO
38769: IFFALSE 38964
// begin _d := rand ( 0 , 5 ) ;
38771: LD_ADDR_VAR 0 11
38775: PUSH
38776: LD_INT 0
38778: PPUSH
38779: LD_INT 5
38781: PPUSH
38782: CALL_OW 12
38786: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38787: LD_ADDR_VAR 0 12
38791: PUSH
38792: LD_INT 2
38794: PPUSH
38795: LD_INT 6
38797: PPUSH
38798: CALL_OW 12
38802: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38803: LD_ADDR_VAR 0 9
38807: PUSH
38808: LD_VAR 0 2
38812: PPUSH
38813: LD_VAR 0 11
38817: PPUSH
38818: LD_VAR 0 12
38822: PPUSH
38823: CALL_OW 272
38827: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38828: LD_ADDR_VAR 0 10
38832: PUSH
38833: LD_VAR 0 3
38837: PPUSH
38838: LD_VAR 0 11
38842: PPUSH
38843: LD_VAR 0 12
38847: PPUSH
38848: CALL_OW 273
38852: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38853: LD_VAR 0 9
38857: PPUSH
38858: LD_VAR 0 10
38862: PPUSH
38863: CALL_OW 488
38867: PUSH
38868: LD_VAR 0 9
38872: PUSH
38873: LD_VAR 0 10
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_VAR 0 7
38886: IN
38887: NOT
38888: AND
38889: PUSH
38890: LD_VAR 0 9
38894: PPUSH
38895: LD_VAR 0 10
38899: PPUSH
38900: CALL_OW 458
38904: NOT
38905: AND
38906: IFFALSE 38948
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38908: LD_ADDR_VAR 0 7
38912: PUSH
38913: LD_VAR 0 7
38917: PPUSH
38918: LD_VAR 0 7
38922: PUSH
38923: LD_INT 1
38925: PLUS
38926: PPUSH
38927: LD_VAR 0 9
38931: PUSH
38932: LD_VAR 0 10
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PPUSH
38941: CALL_OW 1
38945: ST_TO_ADDR
38946: GO 38962
// i := i - 1 ;
38948: LD_ADDR_VAR 0 5
38952: PUSH
38953: LD_VAR 0 5
38957: PUSH
38958: LD_INT 1
38960: MINUS
38961: ST_TO_ADDR
// end ;
38962: GO 38768
38964: POP
38965: POP
// for i in tmp do
38966: LD_ADDR_VAR 0 5
38970: PUSH
38971: LD_VAR 0 7
38975: PUSH
38976: FOR_IN
38977: IFFALSE 39015
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38979: LD_VAR 0 1
38983: PPUSH
38984: LD_VAR 0 5
38988: PUSH
38989: LD_INT 1
38991: ARRAY
38992: PPUSH
38993: LD_VAR 0 5
38997: PUSH
38998: LD_INT 2
39000: ARRAY
39001: PPUSH
39002: CALL 37961 0 3
39006: NOT
39007: IFFALSE 39013
// exit ;
39009: POP
39010: POP
39011: GO 39017
39013: GO 38976
39015: POP
39016: POP
// end ;
39017: LD_VAR 0 4
39021: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39022: LD_INT 0
39024: PPUSH
39025: PPUSH
39026: PPUSH
39027: PPUSH
39028: PPUSH
39029: PPUSH
39030: PPUSH
// if not GetClass ( unit ) = class_sniper then
39031: LD_VAR 0 1
39035: PPUSH
39036: CALL_OW 257
39040: PUSH
39041: LD_INT 5
39043: EQUAL
39044: NOT
39045: IFFALSE 39049
// exit ;
39047: GO 39437
// dist := 8 ;
39049: LD_ADDR_VAR 0 5
39053: PUSH
39054: LD_INT 8
39056: ST_TO_ADDR
// viewRange := 12 ;
39057: LD_ADDR_VAR 0 7
39061: PUSH
39062: LD_INT 12
39064: ST_TO_ADDR
// side := GetSide ( unit ) ;
39065: LD_ADDR_VAR 0 6
39069: PUSH
39070: LD_VAR 0 1
39074: PPUSH
39075: CALL_OW 255
39079: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39080: LD_INT 61
39082: PPUSH
39083: LD_VAR 0 6
39087: PPUSH
39088: CALL_OW 321
39092: PUSH
39093: LD_INT 2
39095: EQUAL
39096: IFFALSE 39106
// viewRange := 16 ;
39098: LD_ADDR_VAR 0 7
39102: PUSH
39103: LD_INT 16
39105: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39106: LD_VAR 0 1
39110: PPUSH
39111: LD_VAR 0 2
39115: PPUSH
39116: LD_VAR 0 3
39120: PPUSH
39121: CALL_OW 297
39125: PUSH
39126: LD_VAR 0 5
39130: GREATER
39131: IFFALSE 39210
// begin ComMoveXY ( unit , x , y ) ;
39133: LD_VAR 0 1
39137: PPUSH
39138: LD_VAR 0 2
39142: PPUSH
39143: LD_VAR 0 3
39147: PPUSH
39148: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39152: LD_INT 35
39154: PPUSH
39155: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39159: LD_VAR 0 1
39163: PPUSH
39164: LD_VAR 0 2
39168: PPUSH
39169: LD_VAR 0 3
39173: PPUSH
39174: CALL 75700 0 3
39178: NOT
39179: IFFALSE 39183
// exit ;
39181: GO 39437
// until GetDistUnitXY ( unit , x , y ) < dist ;
39183: LD_VAR 0 1
39187: PPUSH
39188: LD_VAR 0 2
39192: PPUSH
39193: LD_VAR 0 3
39197: PPUSH
39198: CALL_OW 297
39202: PUSH
39203: LD_VAR 0 5
39207: LESS
39208: IFFALSE 39152
// end ; ComTurnXY ( unit , x , y ) ;
39210: LD_VAR 0 1
39214: PPUSH
39215: LD_VAR 0 2
39219: PPUSH
39220: LD_VAR 0 3
39224: PPUSH
39225: CALL_OW 118
// wait ( 5 ) ;
39229: LD_INT 5
39231: PPUSH
39232: CALL_OW 67
// _d := GetDir ( unit ) ;
39236: LD_ADDR_VAR 0 10
39240: PUSH
39241: LD_VAR 0 1
39245: PPUSH
39246: CALL_OW 254
39250: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39251: LD_ADDR_VAR 0 8
39255: PUSH
39256: LD_VAR 0 1
39260: PPUSH
39261: CALL_OW 250
39265: PPUSH
39266: LD_VAR 0 10
39270: PPUSH
39271: LD_VAR 0 5
39275: PPUSH
39276: CALL_OW 272
39280: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39281: LD_ADDR_VAR 0 9
39285: PUSH
39286: LD_VAR 0 1
39290: PPUSH
39291: CALL_OW 251
39295: PPUSH
39296: LD_VAR 0 10
39300: PPUSH
39301: LD_VAR 0 5
39305: PPUSH
39306: CALL_OW 273
39310: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39311: LD_VAR 0 8
39315: PPUSH
39316: LD_VAR 0 9
39320: PPUSH
39321: CALL_OW 488
39325: NOT
39326: IFFALSE 39330
// exit ;
39328: GO 39437
// ComAnimCustom ( unit , 1 ) ;
39330: LD_VAR 0 1
39334: PPUSH
39335: LD_INT 1
39337: PPUSH
39338: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39342: LD_VAR 0 8
39346: PPUSH
39347: LD_VAR 0 9
39351: PPUSH
39352: LD_VAR 0 6
39356: PPUSH
39357: LD_VAR 0 7
39361: PPUSH
39362: CALL_OW 330
// repeat wait ( 1 ) ;
39366: LD_INT 1
39368: PPUSH
39369: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39373: LD_VAR 0 1
39377: PPUSH
39378: CALL_OW 316
39382: PUSH
39383: LD_VAR 0 1
39387: PPUSH
39388: CALL_OW 314
39392: OR
39393: PUSH
39394: LD_VAR 0 1
39398: PPUSH
39399: CALL_OW 302
39403: NOT
39404: OR
39405: PUSH
39406: LD_VAR 0 1
39410: PPUSH
39411: CALL_OW 301
39415: OR
39416: IFFALSE 39366
// RemoveSeeing ( _x , _y , side ) ;
39418: LD_VAR 0 8
39422: PPUSH
39423: LD_VAR 0 9
39427: PPUSH
39428: LD_VAR 0 6
39432: PPUSH
39433: CALL_OW 331
// end ; end_of_file
39437: LD_VAR 0 4
39441: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39442: LD_INT 0
39444: PPUSH
39445: PPUSH
// if exist_mode then
39446: LD_VAR 0 2
39450: IFFALSE 39475
// unit := CreateCharacter ( prefix & ident ) else
39452: LD_ADDR_VAR 0 5
39456: PUSH
39457: LD_VAR 0 3
39461: PUSH
39462: LD_VAR 0 1
39466: STR
39467: PPUSH
39468: CALL_OW 34
39472: ST_TO_ADDR
39473: GO 39490
// unit := NewCharacter ( ident ) ;
39475: LD_ADDR_VAR 0 5
39479: PUSH
39480: LD_VAR 0 1
39484: PPUSH
39485: CALL_OW 25
39489: ST_TO_ADDR
// result := unit ;
39490: LD_ADDR_VAR 0 4
39494: PUSH
39495: LD_VAR 0 5
39499: ST_TO_ADDR
// end ;
39500: LD_VAR 0 4
39504: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39505: LD_INT 0
39507: PPUSH
39508: PPUSH
// if not side or not nation then
39509: LD_VAR 0 1
39513: NOT
39514: PUSH
39515: LD_VAR 0 2
39519: NOT
39520: OR
39521: IFFALSE 39525
// exit ;
39523: GO 40293
// case nation of nation_american :
39525: LD_VAR 0 2
39529: PUSH
39530: LD_INT 1
39532: DOUBLE
39533: EQUAL
39534: IFTRUE 39538
39536: GO 39752
39538: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39539: LD_ADDR_VAR 0 4
39543: PUSH
39544: LD_INT 35
39546: PUSH
39547: LD_INT 45
39549: PUSH
39550: LD_INT 46
39552: PUSH
39553: LD_INT 47
39555: PUSH
39556: LD_INT 82
39558: PUSH
39559: LD_INT 83
39561: PUSH
39562: LD_INT 84
39564: PUSH
39565: LD_INT 85
39567: PUSH
39568: LD_INT 86
39570: PUSH
39571: LD_INT 1
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: LD_INT 6
39579: PUSH
39580: LD_INT 15
39582: PUSH
39583: LD_INT 16
39585: PUSH
39586: LD_INT 7
39588: PUSH
39589: LD_INT 12
39591: PUSH
39592: LD_INT 13
39594: PUSH
39595: LD_INT 10
39597: PUSH
39598: LD_INT 14
39600: PUSH
39601: LD_INT 20
39603: PUSH
39604: LD_INT 21
39606: PUSH
39607: LD_INT 22
39609: PUSH
39610: LD_INT 25
39612: PUSH
39613: LD_INT 32
39615: PUSH
39616: LD_INT 27
39618: PUSH
39619: LD_INT 36
39621: PUSH
39622: LD_INT 69
39624: PUSH
39625: LD_INT 39
39627: PUSH
39628: LD_INT 34
39630: PUSH
39631: LD_INT 40
39633: PUSH
39634: LD_INT 48
39636: PUSH
39637: LD_INT 49
39639: PUSH
39640: LD_INT 50
39642: PUSH
39643: LD_INT 51
39645: PUSH
39646: LD_INT 52
39648: PUSH
39649: LD_INT 53
39651: PUSH
39652: LD_INT 54
39654: PUSH
39655: LD_INT 55
39657: PUSH
39658: LD_INT 56
39660: PUSH
39661: LD_INT 57
39663: PUSH
39664: LD_INT 58
39666: PUSH
39667: LD_INT 59
39669: PUSH
39670: LD_INT 60
39672: PUSH
39673: LD_INT 61
39675: PUSH
39676: LD_INT 62
39678: PUSH
39679: LD_INT 80
39681: PUSH
39682: LD_INT 82
39684: PUSH
39685: LD_INT 83
39687: PUSH
39688: LD_INT 84
39690: PUSH
39691: LD_INT 85
39693: PUSH
39694: LD_INT 86
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: ST_TO_ADDR
39750: GO 40217
39752: LD_INT 2
39754: DOUBLE
39755: EQUAL
39756: IFTRUE 39760
39758: GO 39986
39760: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39761: LD_ADDR_VAR 0 4
39765: PUSH
39766: LD_INT 35
39768: PUSH
39769: LD_INT 45
39771: PUSH
39772: LD_INT 46
39774: PUSH
39775: LD_INT 47
39777: PUSH
39778: LD_INT 82
39780: PUSH
39781: LD_INT 83
39783: PUSH
39784: LD_INT 84
39786: PUSH
39787: LD_INT 85
39789: PUSH
39790: LD_INT 87
39792: PUSH
39793: LD_INT 70
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: LD_INT 11
39801: PUSH
39802: LD_INT 3
39804: PUSH
39805: LD_INT 4
39807: PUSH
39808: LD_INT 5
39810: PUSH
39811: LD_INT 6
39813: PUSH
39814: LD_INT 15
39816: PUSH
39817: LD_INT 18
39819: PUSH
39820: LD_INT 7
39822: PUSH
39823: LD_INT 17
39825: PUSH
39826: LD_INT 8
39828: PUSH
39829: LD_INT 20
39831: PUSH
39832: LD_INT 21
39834: PUSH
39835: LD_INT 22
39837: PUSH
39838: LD_INT 72
39840: PUSH
39841: LD_INT 26
39843: PUSH
39844: LD_INT 69
39846: PUSH
39847: LD_INT 39
39849: PUSH
39850: LD_INT 40
39852: PUSH
39853: LD_INT 41
39855: PUSH
39856: LD_INT 42
39858: PUSH
39859: LD_INT 43
39861: PUSH
39862: LD_INT 48
39864: PUSH
39865: LD_INT 49
39867: PUSH
39868: LD_INT 50
39870: PUSH
39871: LD_INT 51
39873: PUSH
39874: LD_INT 52
39876: PUSH
39877: LD_INT 53
39879: PUSH
39880: LD_INT 54
39882: PUSH
39883: LD_INT 55
39885: PUSH
39886: LD_INT 56
39888: PUSH
39889: LD_INT 60
39891: PUSH
39892: LD_INT 61
39894: PUSH
39895: LD_INT 62
39897: PUSH
39898: LD_INT 66
39900: PUSH
39901: LD_INT 67
39903: PUSH
39904: LD_INT 68
39906: PUSH
39907: LD_INT 81
39909: PUSH
39910: LD_INT 82
39912: PUSH
39913: LD_INT 83
39915: PUSH
39916: LD_INT 84
39918: PUSH
39919: LD_INT 85
39921: PUSH
39922: LD_INT 87
39924: PUSH
39925: LD_INT 88
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: ST_TO_ADDR
39984: GO 40217
39986: LD_INT 3
39988: DOUBLE
39989: EQUAL
39990: IFTRUE 39994
39992: GO 40216
39994: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39995: LD_ADDR_VAR 0 4
39999: PUSH
40000: LD_INT 46
40002: PUSH
40003: LD_INT 47
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: LD_INT 2
40011: PUSH
40012: LD_INT 82
40014: PUSH
40015: LD_INT 83
40017: PUSH
40018: LD_INT 84
40020: PUSH
40021: LD_INT 85
40023: PUSH
40024: LD_INT 86
40026: PUSH
40027: LD_INT 11
40029: PUSH
40030: LD_INT 9
40032: PUSH
40033: LD_INT 20
40035: PUSH
40036: LD_INT 19
40038: PUSH
40039: LD_INT 21
40041: PUSH
40042: LD_INT 24
40044: PUSH
40045: LD_INT 22
40047: PUSH
40048: LD_INT 25
40050: PUSH
40051: LD_INT 28
40053: PUSH
40054: LD_INT 29
40056: PUSH
40057: LD_INT 30
40059: PUSH
40060: LD_INT 31
40062: PUSH
40063: LD_INT 37
40065: PUSH
40066: LD_INT 38
40068: PUSH
40069: LD_INT 32
40071: PUSH
40072: LD_INT 27
40074: PUSH
40075: LD_INT 33
40077: PUSH
40078: LD_INT 69
40080: PUSH
40081: LD_INT 39
40083: PUSH
40084: LD_INT 34
40086: PUSH
40087: LD_INT 40
40089: PUSH
40090: LD_INT 71
40092: PUSH
40093: LD_INT 23
40095: PUSH
40096: LD_INT 44
40098: PUSH
40099: LD_INT 48
40101: PUSH
40102: LD_INT 49
40104: PUSH
40105: LD_INT 50
40107: PUSH
40108: LD_INT 51
40110: PUSH
40111: LD_INT 52
40113: PUSH
40114: LD_INT 53
40116: PUSH
40117: LD_INT 54
40119: PUSH
40120: LD_INT 55
40122: PUSH
40123: LD_INT 56
40125: PUSH
40126: LD_INT 57
40128: PUSH
40129: LD_INT 58
40131: PUSH
40132: LD_INT 59
40134: PUSH
40135: LD_INT 63
40137: PUSH
40138: LD_INT 64
40140: PUSH
40141: LD_INT 65
40143: PUSH
40144: LD_INT 82
40146: PUSH
40147: LD_INT 83
40149: PUSH
40150: LD_INT 84
40152: PUSH
40153: LD_INT 85
40155: PUSH
40156: LD_INT 86
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: ST_TO_ADDR
40214: GO 40217
40216: POP
// if state > - 1 and state < 3 then
40217: LD_VAR 0 3
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: GREATER
40226: PUSH
40227: LD_VAR 0 3
40231: PUSH
40232: LD_INT 3
40234: LESS
40235: AND
40236: IFFALSE 40293
// for i in result do
40238: LD_ADDR_VAR 0 5
40242: PUSH
40243: LD_VAR 0 4
40247: PUSH
40248: FOR_IN
40249: IFFALSE 40291
// if GetTech ( i , side ) <> state then
40251: LD_VAR 0 5
40255: PPUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 321
40265: PUSH
40266: LD_VAR 0 3
40270: NONEQUAL
40271: IFFALSE 40289
// result := result diff i ;
40273: LD_ADDR_VAR 0 4
40277: PUSH
40278: LD_VAR 0 4
40282: PUSH
40283: LD_VAR 0 5
40287: DIFF
40288: ST_TO_ADDR
40289: GO 40248
40291: POP
40292: POP
// end ;
40293: LD_VAR 0 4
40297: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40298: LD_INT 0
40300: PPUSH
40301: PPUSH
40302: PPUSH
// result := true ;
40303: LD_ADDR_VAR 0 3
40307: PUSH
40308: LD_INT 1
40310: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40311: LD_ADDR_VAR 0 5
40315: PUSH
40316: LD_VAR 0 2
40320: PPUSH
40321: CALL_OW 480
40325: ST_TO_ADDR
// if not tmp then
40326: LD_VAR 0 5
40330: NOT
40331: IFFALSE 40335
// exit ;
40333: GO 40384
// for i in tmp do
40335: LD_ADDR_VAR 0 4
40339: PUSH
40340: LD_VAR 0 5
40344: PUSH
40345: FOR_IN
40346: IFFALSE 40382
// if GetTech ( i , side ) <> state_researched then
40348: LD_VAR 0 4
40352: PPUSH
40353: LD_VAR 0 1
40357: PPUSH
40358: CALL_OW 321
40362: PUSH
40363: LD_INT 2
40365: NONEQUAL
40366: IFFALSE 40380
// begin result := false ;
40368: LD_ADDR_VAR 0 3
40372: PUSH
40373: LD_INT 0
40375: ST_TO_ADDR
// exit ;
40376: POP
40377: POP
40378: GO 40384
// end ;
40380: GO 40345
40382: POP
40383: POP
// end ;
40384: LD_VAR 0 3
40388: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40389: LD_INT 0
40391: PPUSH
40392: PPUSH
40393: PPUSH
40394: PPUSH
40395: PPUSH
40396: PPUSH
40397: PPUSH
40398: PPUSH
40399: PPUSH
40400: PPUSH
40401: PPUSH
40402: PPUSH
40403: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40404: LD_VAR 0 1
40408: NOT
40409: PUSH
40410: LD_VAR 0 1
40414: PPUSH
40415: CALL_OW 257
40419: PUSH
40420: LD_INT 9
40422: NONEQUAL
40423: OR
40424: IFFALSE 40428
// exit ;
40426: GO 41001
// side := GetSide ( unit ) ;
40428: LD_ADDR_VAR 0 9
40432: PUSH
40433: LD_VAR 0 1
40437: PPUSH
40438: CALL_OW 255
40442: ST_TO_ADDR
// tech_space := tech_spacanom ;
40443: LD_ADDR_VAR 0 12
40447: PUSH
40448: LD_INT 29
40450: ST_TO_ADDR
// tech_time := tech_taurad ;
40451: LD_ADDR_VAR 0 13
40455: PUSH
40456: LD_INT 28
40458: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40459: LD_ADDR_VAR 0 11
40463: PUSH
40464: LD_VAR 0 1
40468: PPUSH
40469: CALL_OW 310
40473: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40474: LD_VAR 0 11
40478: PPUSH
40479: CALL_OW 247
40483: PUSH
40484: LD_INT 2
40486: EQUAL
40487: IFFALSE 40491
// exit ;
40489: GO 41001
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40491: LD_ADDR_VAR 0 8
40495: PUSH
40496: LD_INT 81
40498: PUSH
40499: LD_VAR 0 9
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 3
40510: PUSH
40511: LD_INT 21
40513: PUSH
40514: LD_INT 3
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PPUSH
40529: CALL_OW 69
40533: ST_TO_ADDR
// if not tmp then
40534: LD_VAR 0 8
40538: NOT
40539: IFFALSE 40543
// exit ;
40541: GO 41001
// if in_unit then
40543: LD_VAR 0 11
40547: IFFALSE 40571
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40549: LD_ADDR_VAR 0 10
40553: PUSH
40554: LD_VAR 0 8
40558: PPUSH
40559: LD_VAR 0 11
40563: PPUSH
40564: CALL_OW 74
40568: ST_TO_ADDR
40569: GO 40591
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40571: LD_ADDR_VAR 0 10
40575: PUSH
40576: LD_VAR 0 8
40580: PPUSH
40581: LD_VAR 0 1
40585: PPUSH
40586: CALL_OW 74
40590: ST_TO_ADDR
// if not enemy then
40591: LD_VAR 0 10
40595: NOT
40596: IFFALSE 40600
// exit ;
40598: GO 41001
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40600: LD_VAR 0 11
40604: PUSH
40605: LD_VAR 0 11
40609: PPUSH
40610: LD_VAR 0 10
40614: PPUSH
40615: CALL_OW 296
40619: PUSH
40620: LD_INT 13
40622: GREATER
40623: AND
40624: PUSH
40625: LD_VAR 0 1
40629: PPUSH
40630: LD_VAR 0 10
40634: PPUSH
40635: CALL_OW 296
40639: PUSH
40640: LD_INT 12
40642: GREATER
40643: OR
40644: IFFALSE 40648
// exit ;
40646: GO 41001
// missile := [ 1 ] ;
40648: LD_ADDR_VAR 0 14
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: EMPTY
40657: LIST
40658: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40659: LD_VAR 0 9
40663: PPUSH
40664: LD_VAR 0 12
40668: PPUSH
40669: CALL_OW 325
40673: IFFALSE 40702
// missile := Replace ( missile , missile + 1 , 2 ) ;
40675: LD_ADDR_VAR 0 14
40679: PUSH
40680: LD_VAR 0 14
40684: PPUSH
40685: LD_VAR 0 14
40689: PUSH
40690: LD_INT 1
40692: PLUS
40693: PPUSH
40694: LD_INT 2
40696: PPUSH
40697: CALL_OW 1
40701: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40702: LD_VAR 0 9
40706: PPUSH
40707: LD_VAR 0 13
40711: PPUSH
40712: CALL_OW 325
40716: PUSH
40717: LD_VAR 0 10
40721: PPUSH
40722: CALL_OW 255
40726: PPUSH
40727: LD_VAR 0 13
40731: PPUSH
40732: CALL_OW 325
40736: NOT
40737: AND
40738: IFFALSE 40767
// missile := Replace ( missile , missile + 1 , 3 ) ;
40740: LD_ADDR_VAR 0 14
40744: PUSH
40745: LD_VAR 0 14
40749: PPUSH
40750: LD_VAR 0 14
40754: PUSH
40755: LD_INT 1
40757: PLUS
40758: PPUSH
40759: LD_INT 3
40761: PPUSH
40762: CALL_OW 1
40766: ST_TO_ADDR
// if missile < 2 then
40767: LD_VAR 0 14
40771: PUSH
40772: LD_INT 2
40774: LESS
40775: IFFALSE 40779
// exit ;
40777: GO 41001
// x := GetX ( enemy ) ;
40779: LD_ADDR_VAR 0 4
40783: PUSH
40784: LD_VAR 0 10
40788: PPUSH
40789: CALL_OW 250
40793: ST_TO_ADDR
// y := GetY ( enemy ) ;
40794: LD_ADDR_VAR 0 5
40798: PUSH
40799: LD_VAR 0 10
40803: PPUSH
40804: CALL_OW 251
40808: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40809: LD_ADDR_VAR 0 6
40813: PUSH
40814: LD_VAR 0 4
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PPUSH
40823: LD_INT 1
40825: PPUSH
40826: CALL_OW 12
40830: PLUS
40831: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40832: LD_ADDR_VAR 0 7
40836: PUSH
40837: LD_VAR 0 5
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PPUSH
40846: LD_INT 1
40848: PPUSH
40849: CALL_OW 12
40853: PLUS
40854: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40855: LD_VAR 0 6
40859: PPUSH
40860: LD_VAR 0 7
40864: PPUSH
40865: CALL_OW 488
40869: NOT
40870: IFFALSE 40892
// begin _x := x ;
40872: LD_ADDR_VAR 0 6
40876: PUSH
40877: LD_VAR 0 4
40881: ST_TO_ADDR
// _y := y ;
40882: LD_ADDR_VAR 0 7
40886: PUSH
40887: LD_VAR 0 5
40891: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40892: LD_ADDR_VAR 0 3
40896: PUSH
40897: LD_INT 1
40899: PPUSH
40900: LD_VAR 0 14
40904: PPUSH
40905: CALL_OW 12
40909: ST_TO_ADDR
// case i of 1 :
40910: LD_VAR 0 3
40914: PUSH
40915: LD_INT 1
40917: DOUBLE
40918: EQUAL
40919: IFTRUE 40923
40921: GO 40940
40923: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40924: LD_VAR 0 1
40928: PPUSH
40929: LD_VAR 0 10
40933: PPUSH
40934: CALL_OW 115
40938: GO 41001
40940: LD_INT 2
40942: DOUBLE
40943: EQUAL
40944: IFTRUE 40948
40946: GO 40970
40948: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40949: LD_VAR 0 1
40953: PPUSH
40954: LD_VAR 0 6
40958: PPUSH
40959: LD_VAR 0 7
40963: PPUSH
40964: CALL_OW 153
40968: GO 41001
40970: LD_INT 3
40972: DOUBLE
40973: EQUAL
40974: IFTRUE 40978
40976: GO 41000
40978: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40979: LD_VAR 0 1
40983: PPUSH
40984: LD_VAR 0 6
40988: PPUSH
40989: LD_VAR 0 7
40993: PPUSH
40994: CALL_OW 154
40998: GO 41001
41000: POP
// end ;
41001: LD_VAR 0 2
41005: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41006: LD_INT 0
41008: PPUSH
41009: PPUSH
41010: PPUSH
41011: PPUSH
41012: PPUSH
41013: PPUSH
// if not unit or not building then
41014: LD_VAR 0 1
41018: NOT
41019: PUSH
41020: LD_VAR 0 2
41024: NOT
41025: OR
41026: IFFALSE 41030
// exit ;
41028: GO 41188
// x := GetX ( building ) ;
41030: LD_ADDR_VAR 0 5
41034: PUSH
41035: LD_VAR 0 2
41039: PPUSH
41040: CALL_OW 250
41044: ST_TO_ADDR
// y := GetY ( building ) ;
41045: LD_ADDR_VAR 0 6
41049: PUSH
41050: LD_VAR 0 2
41054: PPUSH
41055: CALL_OW 251
41059: ST_TO_ADDR
// for i = 0 to 5 do
41060: LD_ADDR_VAR 0 4
41064: PUSH
41065: DOUBLE
41066: LD_INT 0
41068: DEC
41069: ST_TO_ADDR
41070: LD_INT 5
41072: PUSH
41073: FOR_TO
41074: IFFALSE 41186
// begin _x := ShiftX ( x , i , 3 ) ;
41076: LD_ADDR_VAR 0 7
41080: PUSH
41081: LD_VAR 0 5
41085: PPUSH
41086: LD_VAR 0 4
41090: PPUSH
41091: LD_INT 3
41093: PPUSH
41094: CALL_OW 272
41098: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41099: LD_ADDR_VAR 0 8
41103: PUSH
41104: LD_VAR 0 6
41108: PPUSH
41109: LD_VAR 0 4
41113: PPUSH
41114: LD_INT 3
41116: PPUSH
41117: CALL_OW 273
41121: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41122: LD_VAR 0 7
41126: PPUSH
41127: LD_VAR 0 8
41131: PPUSH
41132: CALL_OW 488
41136: NOT
41137: IFFALSE 41141
// continue ;
41139: GO 41073
// if HexInfo ( _x , _y ) = 0 then
41141: LD_VAR 0 7
41145: PPUSH
41146: LD_VAR 0 8
41150: PPUSH
41151: CALL_OW 428
41155: PUSH
41156: LD_INT 0
41158: EQUAL
41159: IFFALSE 41184
// begin ComMoveXY ( unit , _x , _y ) ;
41161: LD_VAR 0 1
41165: PPUSH
41166: LD_VAR 0 7
41170: PPUSH
41171: LD_VAR 0 8
41175: PPUSH
41176: CALL_OW 111
// exit ;
41180: POP
41181: POP
41182: GO 41188
// end ; end ;
41184: GO 41073
41186: POP
41187: POP
// end ;
41188: LD_VAR 0 3
41192: RET
// export function ScanBase ( side , base_area ) ; begin
41193: LD_INT 0
41195: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41196: LD_ADDR_VAR 0 3
41200: PUSH
41201: LD_VAR 0 2
41205: PPUSH
41206: LD_INT 81
41208: PUSH
41209: LD_VAR 0 1
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PPUSH
41218: CALL_OW 70
41222: ST_TO_ADDR
// end ;
41223: LD_VAR 0 3
41227: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41228: LD_INT 0
41230: PPUSH
41231: PPUSH
41232: PPUSH
41233: PPUSH
// result := false ;
41234: LD_ADDR_VAR 0 2
41238: PUSH
41239: LD_INT 0
41241: ST_TO_ADDR
// side := GetSide ( unit ) ;
41242: LD_ADDR_VAR 0 3
41246: PUSH
41247: LD_VAR 0 1
41251: PPUSH
41252: CALL_OW 255
41256: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41257: LD_ADDR_VAR 0 4
41261: PUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: CALL_OW 248
41271: ST_TO_ADDR
// case nat of 1 :
41272: LD_VAR 0 4
41276: PUSH
41277: LD_INT 1
41279: DOUBLE
41280: EQUAL
41281: IFTRUE 41285
41283: GO 41296
41285: POP
// tech := tech_lassight ; 2 :
41286: LD_ADDR_VAR 0 5
41290: PUSH
41291: LD_INT 12
41293: ST_TO_ADDR
41294: GO 41335
41296: LD_INT 2
41298: DOUBLE
41299: EQUAL
41300: IFTRUE 41304
41302: GO 41315
41304: POP
// tech := tech_mortar ; 3 :
41305: LD_ADDR_VAR 0 5
41309: PUSH
41310: LD_INT 41
41312: ST_TO_ADDR
41313: GO 41335
41315: LD_INT 3
41317: DOUBLE
41318: EQUAL
41319: IFTRUE 41323
41321: GO 41334
41323: POP
// tech := tech_bazooka ; end ;
41324: LD_ADDR_VAR 0 5
41328: PUSH
41329: LD_INT 44
41331: ST_TO_ADDR
41332: GO 41335
41334: POP
// if Researched ( side , tech ) then
41335: LD_VAR 0 3
41339: PPUSH
41340: LD_VAR 0 5
41344: PPUSH
41345: CALL_OW 325
41349: IFFALSE 41376
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41351: LD_ADDR_VAR 0 2
41355: PUSH
41356: LD_INT 5
41358: PUSH
41359: LD_INT 8
41361: PUSH
41362: LD_INT 9
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: LIST
41369: PUSH
41370: LD_VAR 0 4
41374: ARRAY
41375: ST_TO_ADDR
// end ;
41376: LD_VAR 0 2
41380: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41381: LD_INT 0
41383: PPUSH
41384: PPUSH
41385: PPUSH
// if not mines then
41386: LD_VAR 0 2
41390: NOT
41391: IFFALSE 41395
// exit ;
41393: GO 41539
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41395: LD_ADDR_VAR 0 5
41399: PUSH
41400: LD_INT 81
41402: PUSH
41403: LD_VAR 0 1
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 3
41414: PUSH
41415: LD_INT 21
41417: PUSH
41418: LD_INT 3
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PPUSH
41433: CALL_OW 69
41437: ST_TO_ADDR
// for i in mines do
41438: LD_ADDR_VAR 0 4
41442: PUSH
41443: LD_VAR 0 2
41447: PUSH
41448: FOR_IN
41449: IFFALSE 41537
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41451: LD_VAR 0 4
41455: PUSH
41456: LD_INT 1
41458: ARRAY
41459: PPUSH
41460: LD_VAR 0 4
41464: PUSH
41465: LD_INT 2
41467: ARRAY
41468: PPUSH
41469: CALL_OW 458
41473: NOT
41474: IFFALSE 41478
// continue ;
41476: GO 41448
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41478: LD_VAR 0 4
41482: PUSH
41483: LD_INT 1
41485: ARRAY
41486: PPUSH
41487: LD_VAR 0 4
41491: PUSH
41492: LD_INT 2
41494: ARRAY
41495: PPUSH
41496: CALL_OW 428
41500: PUSH
41501: LD_VAR 0 5
41505: IN
41506: IFFALSE 41535
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41508: LD_VAR 0 4
41512: PUSH
41513: LD_INT 1
41515: ARRAY
41516: PPUSH
41517: LD_VAR 0 4
41521: PUSH
41522: LD_INT 2
41524: ARRAY
41525: PPUSH
41526: LD_VAR 0 1
41530: PPUSH
41531: CALL_OW 456
// end ;
41535: GO 41448
41537: POP
41538: POP
// end ;
41539: LD_VAR 0 3
41543: RET
// export function Count ( array ) ; var i ; begin
41544: LD_INT 0
41546: PPUSH
41547: PPUSH
// result := 0 ;
41548: LD_ADDR_VAR 0 2
41552: PUSH
41553: LD_INT 0
41555: ST_TO_ADDR
// for i in array do
41556: LD_ADDR_VAR 0 3
41560: PUSH
41561: LD_VAR 0 1
41565: PUSH
41566: FOR_IN
41567: IFFALSE 41591
// if i then
41569: LD_VAR 0 3
41573: IFFALSE 41589
// result := result + 1 ;
41575: LD_ADDR_VAR 0 2
41579: PUSH
41580: LD_VAR 0 2
41584: PUSH
41585: LD_INT 1
41587: PLUS
41588: ST_TO_ADDR
41589: GO 41566
41591: POP
41592: POP
// end ;
41593: LD_VAR 0 2
41597: RET
// export function IsEmpty ( building ) ; begin
41598: LD_INT 0
41600: PPUSH
// if not building then
41601: LD_VAR 0 1
41605: NOT
41606: IFFALSE 41610
// exit ;
41608: GO 41653
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41610: LD_ADDR_VAR 0 2
41614: PUSH
41615: LD_VAR 0 1
41619: PUSH
41620: LD_INT 22
41622: PUSH
41623: LD_VAR 0 1
41627: PPUSH
41628: CALL_OW 255
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 58
41639: PUSH
41640: EMPTY
41641: LIST
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PPUSH
41647: CALL_OW 69
41651: IN
41652: ST_TO_ADDR
// end ;
41653: LD_VAR 0 2
41657: RET
// export function IsNotFull ( building ) ; var places ; begin
41658: LD_INT 0
41660: PPUSH
41661: PPUSH
// if not building then
41662: LD_VAR 0 1
41666: NOT
41667: IFFALSE 41671
// exit ;
41669: GO 41842
// result := false ;
41671: LD_ADDR_VAR 0 2
41675: PUSH
41676: LD_INT 0
41678: ST_TO_ADDR
// places := 0 ;
41679: LD_ADDR_VAR 0 3
41683: PUSH
41684: LD_INT 0
41686: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41687: LD_VAR 0 1
41691: PPUSH
41692: CALL_OW 266
41696: PUSH
41697: LD_INT 0
41699: DOUBLE
41700: EQUAL
41701: IFTRUE 41759
41703: LD_INT 1
41705: DOUBLE
41706: EQUAL
41707: IFTRUE 41759
41709: LD_INT 6
41711: DOUBLE
41712: EQUAL
41713: IFTRUE 41759
41715: LD_INT 7
41717: DOUBLE
41718: EQUAL
41719: IFTRUE 41759
41721: LD_INT 8
41723: DOUBLE
41724: EQUAL
41725: IFTRUE 41759
41727: LD_INT 4
41729: DOUBLE
41730: EQUAL
41731: IFTRUE 41759
41733: LD_INT 5
41735: DOUBLE
41736: EQUAL
41737: IFTRUE 41759
41739: LD_INT 2
41741: DOUBLE
41742: EQUAL
41743: IFTRUE 41759
41745: LD_INT 3
41747: DOUBLE
41748: EQUAL
41749: IFTRUE 41759
41751: LD_INT 35
41753: DOUBLE
41754: EQUAL
41755: IFTRUE 41759
41757: GO 41770
41759: POP
// places := 6 ; b_bunker , b_breastwork :
41760: LD_ADDR_VAR 0 3
41764: PUSH
41765: LD_INT 6
41767: ST_TO_ADDR
41768: GO 41815
41770: LD_INT 32
41772: DOUBLE
41773: EQUAL
41774: IFTRUE 41784
41776: LD_INT 31
41778: DOUBLE
41779: EQUAL
41780: IFTRUE 41784
41782: GO 41795
41784: POP
// places := 1 ; b_control_tower :
41785: LD_ADDR_VAR 0 3
41789: PUSH
41790: LD_INT 1
41792: ST_TO_ADDR
41793: GO 41815
41795: LD_INT 36
41797: DOUBLE
41798: EQUAL
41799: IFTRUE 41803
41801: GO 41814
41803: POP
// places := 3 ; end ;
41804: LD_ADDR_VAR 0 3
41808: PUSH
41809: LD_INT 3
41811: ST_TO_ADDR
41812: GO 41815
41814: POP
// if places then
41815: LD_VAR 0 3
41819: IFFALSE 41842
// result := UnitsInside ( building ) < places ;
41821: LD_ADDR_VAR 0 2
41825: PUSH
41826: LD_VAR 0 1
41830: PPUSH
41831: CALL_OW 313
41835: PUSH
41836: LD_VAR 0 3
41840: LESS
41841: ST_TO_ADDR
// end ;
41842: LD_VAR 0 2
41846: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41847: LD_INT 0
41849: PPUSH
41850: PPUSH
41851: PPUSH
41852: PPUSH
// tmp := [ ] ;
41853: LD_ADDR_VAR 0 3
41857: PUSH
41858: EMPTY
41859: ST_TO_ADDR
// list := [ ] ;
41860: LD_ADDR_VAR 0 5
41864: PUSH
41865: EMPTY
41866: ST_TO_ADDR
// for i = 16 to 25 do
41867: LD_ADDR_VAR 0 4
41871: PUSH
41872: DOUBLE
41873: LD_INT 16
41875: DEC
41876: ST_TO_ADDR
41877: LD_INT 25
41879: PUSH
41880: FOR_TO
41881: IFFALSE 41954
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41883: LD_ADDR_VAR 0 3
41887: PUSH
41888: LD_VAR 0 3
41892: PUSH
41893: LD_INT 22
41895: PUSH
41896: LD_VAR 0 1
41900: PPUSH
41901: CALL_OW 255
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 91
41912: PUSH
41913: LD_VAR 0 1
41917: PUSH
41918: LD_INT 6
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 30
41928: PUSH
41929: LD_VAR 0 4
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: LIST
41942: PUSH
41943: EMPTY
41944: LIST
41945: PPUSH
41946: CALL_OW 69
41950: ADD
41951: ST_TO_ADDR
41952: GO 41880
41954: POP
41955: POP
// for i = 1 to tmp do
41956: LD_ADDR_VAR 0 4
41960: PUSH
41961: DOUBLE
41962: LD_INT 1
41964: DEC
41965: ST_TO_ADDR
41966: LD_VAR 0 3
41970: PUSH
41971: FOR_TO
41972: IFFALSE 42060
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41974: LD_ADDR_VAR 0 5
41978: PUSH
41979: LD_VAR 0 5
41983: PUSH
41984: LD_VAR 0 3
41988: PUSH
41989: LD_VAR 0 4
41993: ARRAY
41994: PPUSH
41995: CALL_OW 266
41999: PUSH
42000: LD_VAR 0 3
42004: PUSH
42005: LD_VAR 0 4
42009: ARRAY
42010: PPUSH
42011: CALL_OW 250
42015: PUSH
42016: LD_VAR 0 3
42020: PUSH
42021: LD_VAR 0 4
42025: ARRAY
42026: PPUSH
42027: CALL_OW 251
42031: PUSH
42032: LD_VAR 0 3
42036: PUSH
42037: LD_VAR 0 4
42041: ARRAY
42042: PPUSH
42043: CALL_OW 254
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: PUSH
42054: EMPTY
42055: LIST
42056: ADD
42057: ST_TO_ADDR
42058: GO 41971
42060: POP
42061: POP
// result := list ;
42062: LD_ADDR_VAR 0 2
42066: PUSH
42067: LD_VAR 0 5
42071: ST_TO_ADDR
// end ;
42072: LD_VAR 0 2
42076: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42077: LD_INT 0
42079: PPUSH
42080: PPUSH
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
42085: PPUSH
// if not factory then
42086: LD_VAR 0 1
42090: NOT
42091: IFFALSE 42095
// exit ;
42093: GO 42688
// if control = control_apeman then
42095: LD_VAR 0 4
42099: PUSH
42100: LD_INT 5
42102: EQUAL
42103: IFFALSE 42212
// begin tmp := UnitsInside ( factory ) ;
42105: LD_ADDR_VAR 0 8
42109: PUSH
42110: LD_VAR 0 1
42114: PPUSH
42115: CALL_OW 313
42119: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42120: LD_VAR 0 8
42124: PPUSH
42125: LD_INT 25
42127: PUSH
42128: LD_INT 12
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PPUSH
42135: CALL_OW 72
42139: NOT
42140: IFFALSE 42150
// control := control_manual ;
42142: LD_ADDR_VAR 0 4
42146: PUSH
42147: LD_INT 1
42149: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42150: LD_ADDR_VAR 0 8
42154: PUSH
42155: LD_VAR 0 1
42159: PPUSH
42160: CALL 41847 0 1
42164: ST_TO_ADDR
// if tmp then
42165: LD_VAR 0 8
42169: IFFALSE 42212
// begin for i in tmp do
42171: LD_ADDR_VAR 0 7
42175: PUSH
42176: LD_VAR 0 8
42180: PUSH
42181: FOR_IN
42182: IFFALSE 42210
// if i [ 1 ] = b_ext_radio then
42184: LD_VAR 0 7
42188: PUSH
42189: LD_INT 1
42191: ARRAY
42192: PUSH
42193: LD_INT 22
42195: EQUAL
42196: IFFALSE 42208
// begin control := control_remote ;
42198: LD_ADDR_VAR 0 4
42202: PUSH
42203: LD_INT 2
42205: ST_TO_ADDR
// break ;
42206: GO 42210
// end ;
42208: GO 42181
42210: POP
42211: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42212: LD_VAR 0 1
42216: PPUSH
42217: LD_VAR 0 2
42221: PPUSH
42222: LD_VAR 0 3
42226: PPUSH
42227: LD_VAR 0 4
42231: PPUSH
42232: LD_VAR 0 5
42236: PPUSH
42237: CALL_OW 448
42241: IFFALSE 42276
// begin result := [ chassis , engine , control , weapon ] ;
42243: LD_ADDR_VAR 0 6
42247: PUSH
42248: LD_VAR 0 2
42252: PUSH
42253: LD_VAR 0 3
42257: PUSH
42258: LD_VAR 0 4
42262: PUSH
42263: LD_VAR 0 5
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: ST_TO_ADDR
// exit ;
42274: GO 42688
// end ; _chassis := AvailableChassisList ( factory ) ;
42276: LD_ADDR_VAR 0 9
42280: PUSH
42281: LD_VAR 0 1
42285: PPUSH
42286: CALL_OW 475
42290: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42291: LD_ADDR_VAR 0 11
42295: PUSH
42296: LD_VAR 0 1
42300: PPUSH
42301: CALL_OW 476
42305: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42306: LD_ADDR_VAR 0 12
42310: PUSH
42311: LD_VAR 0 1
42315: PPUSH
42316: CALL_OW 477
42320: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42321: LD_ADDR_VAR 0 10
42325: PUSH
42326: LD_VAR 0 1
42330: PPUSH
42331: CALL_OW 478
42335: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42336: LD_VAR 0 9
42340: NOT
42341: PUSH
42342: LD_VAR 0 11
42346: NOT
42347: OR
42348: PUSH
42349: LD_VAR 0 12
42353: NOT
42354: OR
42355: PUSH
42356: LD_VAR 0 10
42360: NOT
42361: OR
42362: IFFALSE 42397
// begin result := [ chassis , engine , control , weapon ] ;
42364: LD_ADDR_VAR 0 6
42368: PUSH
42369: LD_VAR 0 2
42373: PUSH
42374: LD_VAR 0 3
42378: PUSH
42379: LD_VAR 0 4
42383: PUSH
42384: LD_VAR 0 5
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: ST_TO_ADDR
// exit ;
42395: GO 42688
// end ; if not chassis in _chassis then
42397: LD_VAR 0 2
42401: PUSH
42402: LD_VAR 0 9
42406: IN
42407: NOT
42408: IFFALSE 42434
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42410: LD_ADDR_VAR 0 2
42414: PUSH
42415: LD_VAR 0 9
42419: PUSH
42420: LD_INT 1
42422: PPUSH
42423: LD_VAR 0 9
42427: PPUSH
42428: CALL_OW 12
42432: ARRAY
42433: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42434: LD_VAR 0 2
42438: PPUSH
42439: LD_VAR 0 3
42443: PPUSH
42444: CALL 42693 0 2
42448: NOT
42449: IFFALSE 42508
// repeat engine := _engine [ 1 ] ;
42451: LD_ADDR_VAR 0 3
42455: PUSH
42456: LD_VAR 0 11
42460: PUSH
42461: LD_INT 1
42463: ARRAY
42464: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42465: LD_ADDR_VAR 0 11
42469: PUSH
42470: LD_VAR 0 11
42474: PPUSH
42475: LD_INT 1
42477: PPUSH
42478: CALL_OW 3
42482: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42483: LD_VAR 0 2
42487: PPUSH
42488: LD_VAR 0 3
42492: PPUSH
42493: CALL 42693 0 2
42497: PUSH
42498: LD_VAR 0 11
42502: PUSH
42503: EMPTY
42504: EQUAL
42505: OR
42506: IFFALSE 42451
// if not control in _control then
42508: LD_VAR 0 4
42512: PUSH
42513: LD_VAR 0 12
42517: IN
42518: NOT
42519: IFFALSE 42545
// control := _control [ rand ( 1 , _control ) ] ;
42521: LD_ADDR_VAR 0 4
42525: PUSH
42526: LD_VAR 0 12
42530: PUSH
42531: LD_INT 1
42533: PPUSH
42534: LD_VAR 0 12
42538: PPUSH
42539: CALL_OW 12
42543: ARRAY
42544: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42545: LD_VAR 0 2
42549: PPUSH
42550: LD_VAR 0 5
42554: PPUSH
42555: CALL 42913 0 2
42559: NOT
42560: IFFALSE 42619
// repeat weapon := _weapon [ 1 ] ;
42562: LD_ADDR_VAR 0 5
42566: PUSH
42567: LD_VAR 0 10
42571: PUSH
42572: LD_INT 1
42574: ARRAY
42575: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42576: LD_ADDR_VAR 0 10
42580: PUSH
42581: LD_VAR 0 10
42585: PPUSH
42586: LD_INT 1
42588: PPUSH
42589: CALL_OW 3
42593: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42594: LD_VAR 0 2
42598: PPUSH
42599: LD_VAR 0 5
42603: PPUSH
42604: CALL 42913 0 2
42608: PUSH
42609: LD_VAR 0 10
42613: PUSH
42614: EMPTY
42615: EQUAL
42616: OR
42617: IFFALSE 42562
// result := [ ] ;
42619: LD_ADDR_VAR 0 6
42623: PUSH
42624: EMPTY
42625: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42626: LD_VAR 0 1
42630: PPUSH
42631: LD_VAR 0 2
42635: PPUSH
42636: LD_VAR 0 3
42640: PPUSH
42641: LD_VAR 0 4
42645: PPUSH
42646: LD_VAR 0 5
42650: PPUSH
42651: CALL_OW 448
42655: IFFALSE 42688
// result := [ chassis , engine , control , weapon ] ;
42657: LD_ADDR_VAR 0 6
42661: PUSH
42662: LD_VAR 0 2
42666: PUSH
42667: LD_VAR 0 3
42671: PUSH
42672: LD_VAR 0 4
42676: PUSH
42677: LD_VAR 0 5
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: ST_TO_ADDR
// end ;
42688: LD_VAR 0 6
42692: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42693: LD_INT 0
42695: PPUSH
// if not chassis or not engine then
42696: LD_VAR 0 1
42700: NOT
42701: PUSH
42702: LD_VAR 0 2
42706: NOT
42707: OR
42708: IFFALSE 42712
// exit ;
42710: GO 42908
// case engine of engine_solar :
42712: LD_VAR 0 2
42716: PUSH
42717: LD_INT 2
42719: DOUBLE
42720: EQUAL
42721: IFTRUE 42725
42723: GO 42763
42725: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42726: LD_ADDR_VAR 0 3
42730: PUSH
42731: LD_INT 11
42733: PUSH
42734: LD_INT 12
42736: PUSH
42737: LD_INT 13
42739: PUSH
42740: LD_INT 14
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: LD_INT 3
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: ST_TO_ADDR
42761: GO 42892
42763: LD_INT 1
42765: DOUBLE
42766: EQUAL
42767: IFTRUE 42771
42769: GO 42833
42771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42772: LD_ADDR_VAR 0 3
42776: PUSH
42777: LD_INT 11
42779: PUSH
42780: LD_INT 12
42782: PUSH
42783: LD_INT 13
42785: PUSH
42786: LD_INT 14
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 3
42797: PUSH
42798: LD_INT 4
42800: PUSH
42801: LD_INT 5
42803: PUSH
42804: LD_INT 21
42806: PUSH
42807: LD_INT 23
42809: PUSH
42810: LD_INT 22
42812: PUSH
42813: LD_INT 24
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: ST_TO_ADDR
42831: GO 42892
42833: LD_INT 3
42835: DOUBLE
42836: EQUAL
42837: IFTRUE 42841
42839: GO 42891
42841: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42842: LD_ADDR_VAR 0 3
42846: PUSH
42847: LD_INT 13
42849: PUSH
42850: LD_INT 14
42852: PUSH
42853: LD_INT 2
42855: PUSH
42856: LD_INT 3
42858: PUSH
42859: LD_INT 4
42861: PUSH
42862: LD_INT 5
42864: PUSH
42865: LD_INT 21
42867: PUSH
42868: LD_INT 22
42870: PUSH
42871: LD_INT 23
42873: PUSH
42874: LD_INT 24
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: ST_TO_ADDR
42889: GO 42892
42891: POP
// result := ( chassis in result ) ;
42892: LD_ADDR_VAR 0 3
42896: PUSH
42897: LD_VAR 0 1
42901: PUSH
42902: LD_VAR 0 3
42906: IN
42907: ST_TO_ADDR
// end ;
42908: LD_VAR 0 3
42912: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42913: LD_INT 0
42915: PPUSH
// if not chassis or not weapon then
42916: LD_VAR 0 1
42920: NOT
42921: PUSH
42922: LD_VAR 0 2
42926: NOT
42927: OR
42928: IFFALSE 42932
// exit ;
42930: GO 43992
// case weapon of us_machine_gun :
42932: LD_VAR 0 2
42936: PUSH
42937: LD_INT 2
42939: DOUBLE
42940: EQUAL
42941: IFTRUE 42945
42943: GO 42975
42945: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42946: LD_ADDR_VAR 0 3
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 2
42956: PUSH
42957: LD_INT 3
42959: PUSH
42960: LD_INT 4
42962: PUSH
42963: LD_INT 5
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: ST_TO_ADDR
42973: GO 43976
42975: LD_INT 3
42977: DOUBLE
42978: EQUAL
42979: IFTRUE 42983
42981: GO 43013
42983: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42984: LD_ADDR_VAR 0 3
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: LD_INT 3
42997: PUSH
42998: LD_INT 4
43000: PUSH
43001: LD_INT 5
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: ST_TO_ADDR
43011: GO 43976
43013: LD_INT 11
43015: DOUBLE
43016: EQUAL
43017: IFTRUE 43021
43019: GO 43051
43021: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43022: LD_ADDR_VAR 0 3
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: LD_INT 3
43035: PUSH
43036: LD_INT 4
43038: PUSH
43039: LD_INT 5
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: ST_TO_ADDR
43049: GO 43976
43051: LD_INT 4
43053: DOUBLE
43054: EQUAL
43055: IFTRUE 43059
43057: GO 43085
43059: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43060: LD_ADDR_VAR 0 3
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: LD_INT 3
43070: PUSH
43071: LD_INT 4
43073: PUSH
43074: LD_INT 5
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: ST_TO_ADDR
43083: GO 43976
43085: LD_INT 5
43087: DOUBLE
43088: EQUAL
43089: IFTRUE 43093
43091: GO 43119
43093: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43094: LD_ADDR_VAR 0 3
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: LD_INT 3
43104: PUSH
43105: LD_INT 4
43107: PUSH
43108: LD_INT 5
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: ST_TO_ADDR
43117: GO 43976
43119: LD_INT 9
43121: DOUBLE
43122: EQUAL
43123: IFTRUE 43127
43125: GO 43153
43127: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43128: LD_ADDR_VAR 0 3
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: LD_INT 4
43141: PUSH
43142: LD_INT 5
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: ST_TO_ADDR
43151: GO 43976
43153: LD_INT 7
43155: DOUBLE
43156: EQUAL
43157: IFTRUE 43161
43159: GO 43187
43161: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43162: LD_ADDR_VAR 0 3
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: LD_INT 3
43172: PUSH
43173: LD_INT 4
43175: PUSH
43176: LD_INT 5
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: ST_TO_ADDR
43185: GO 43976
43187: LD_INT 12
43189: DOUBLE
43190: EQUAL
43191: IFTRUE 43195
43193: GO 43221
43195: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43196: LD_ADDR_VAR 0 3
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: LD_INT 3
43206: PUSH
43207: LD_INT 4
43209: PUSH
43210: LD_INT 5
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: ST_TO_ADDR
43219: GO 43976
43221: LD_INT 13
43223: DOUBLE
43224: EQUAL
43225: IFTRUE 43229
43227: GO 43255
43229: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43230: LD_ADDR_VAR 0 3
43234: PUSH
43235: LD_INT 2
43237: PUSH
43238: LD_INT 3
43240: PUSH
43241: LD_INT 4
43243: PUSH
43244: LD_INT 5
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
43253: GO 43976
43255: LD_INT 14
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43263
43261: GO 43281
43263: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43264: LD_ADDR_VAR 0 3
43268: PUSH
43269: LD_INT 4
43271: PUSH
43272: LD_INT 5
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: ST_TO_ADDR
43279: GO 43976
43281: LD_INT 6
43283: DOUBLE
43284: EQUAL
43285: IFTRUE 43289
43287: GO 43307
43289: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43290: LD_ADDR_VAR 0 3
43294: PUSH
43295: LD_INT 4
43297: PUSH
43298: LD_INT 5
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: ST_TO_ADDR
43305: GO 43976
43307: LD_INT 10
43309: DOUBLE
43310: EQUAL
43311: IFTRUE 43315
43313: GO 43333
43315: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43316: LD_ADDR_VAR 0 3
43320: PUSH
43321: LD_INT 4
43323: PUSH
43324: LD_INT 5
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: ST_TO_ADDR
43331: GO 43976
43333: LD_INT 22
43335: DOUBLE
43336: EQUAL
43337: IFTRUE 43341
43339: GO 43367
43341: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43342: LD_ADDR_VAR 0 3
43346: PUSH
43347: LD_INT 11
43349: PUSH
43350: LD_INT 12
43352: PUSH
43353: LD_INT 13
43355: PUSH
43356: LD_INT 14
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: ST_TO_ADDR
43365: GO 43976
43367: LD_INT 23
43369: DOUBLE
43370: EQUAL
43371: IFTRUE 43375
43373: GO 43401
43375: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43376: LD_ADDR_VAR 0 3
43380: PUSH
43381: LD_INT 11
43383: PUSH
43384: LD_INT 12
43386: PUSH
43387: LD_INT 13
43389: PUSH
43390: LD_INT 14
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: ST_TO_ADDR
43399: GO 43976
43401: LD_INT 24
43403: DOUBLE
43404: EQUAL
43405: IFTRUE 43409
43407: GO 43435
43409: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43410: LD_ADDR_VAR 0 3
43414: PUSH
43415: LD_INT 11
43417: PUSH
43418: LD_INT 12
43420: PUSH
43421: LD_INT 13
43423: PUSH
43424: LD_INT 14
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: ST_TO_ADDR
43433: GO 43976
43435: LD_INT 30
43437: DOUBLE
43438: EQUAL
43439: IFTRUE 43443
43441: GO 43469
43443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43444: LD_ADDR_VAR 0 3
43448: PUSH
43449: LD_INT 11
43451: PUSH
43452: LD_INT 12
43454: PUSH
43455: LD_INT 13
43457: PUSH
43458: LD_INT 14
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: ST_TO_ADDR
43467: GO 43976
43469: LD_INT 25
43471: DOUBLE
43472: EQUAL
43473: IFTRUE 43477
43475: GO 43495
43477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43478: LD_ADDR_VAR 0 3
43482: PUSH
43483: LD_INT 13
43485: PUSH
43486: LD_INT 14
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: ST_TO_ADDR
43493: GO 43976
43495: LD_INT 27
43497: DOUBLE
43498: EQUAL
43499: IFTRUE 43503
43501: GO 43521
43503: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43504: LD_ADDR_VAR 0 3
43508: PUSH
43509: LD_INT 13
43511: PUSH
43512: LD_INT 14
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: ST_TO_ADDR
43519: GO 43976
43521: LD_INT 92
43523: DOUBLE
43524: EQUAL
43525: IFTRUE 43529
43527: GO 43555
43529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43530: LD_ADDR_VAR 0 3
43534: PUSH
43535: LD_INT 11
43537: PUSH
43538: LD_INT 12
43540: PUSH
43541: LD_INT 13
43543: PUSH
43544: LD_INT 14
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: ST_TO_ADDR
43553: GO 43976
43555: LD_INT 28
43557: DOUBLE
43558: EQUAL
43559: IFTRUE 43563
43561: GO 43581
43563: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43564: LD_ADDR_VAR 0 3
43568: PUSH
43569: LD_INT 13
43571: PUSH
43572: LD_INT 14
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: ST_TO_ADDR
43579: GO 43976
43581: LD_INT 29
43583: DOUBLE
43584: EQUAL
43585: IFTRUE 43589
43587: GO 43607
43589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43590: LD_ADDR_VAR 0 3
43594: PUSH
43595: LD_INT 13
43597: PUSH
43598: LD_INT 14
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: ST_TO_ADDR
43605: GO 43976
43607: LD_INT 31
43609: DOUBLE
43610: EQUAL
43611: IFTRUE 43615
43613: GO 43633
43615: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43616: LD_ADDR_VAR 0 3
43620: PUSH
43621: LD_INT 13
43623: PUSH
43624: LD_INT 14
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: ST_TO_ADDR
43631: GO 43976
43633: LD_INT 26
43635: DOUBLE
43636: EQUAL
43637: IFTRUE 43641
43639: GO 43659
43641: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43642: LD_ADDR_VAR 0 3
43646: PUSH
43647: LD_INT 13
43649: PUSH
43650: LD_INT 14
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: ST_TO_ADDR
43657: GO 43976
43659: LD_INT 42
43661: DOUBLE
43662: EQUAL
43663: IFTRUE 43667
43665: GO 43693
43667: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43668: LD_ADDR_VAR 0 3
43672: PUSH
43673: LD_INT 21
43675: PUSH
43676: LD_INT 22
43678: PUSH
43679: LD_INT 23
43681: PUSH
43682: LD_INT 24
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: ST_TO_ADDR
43691: GO 43976
43693: LD_INT 43
43695: DOUBLE
43696: EQUAL
43697: IFTRUE 43701
43699: GO 43727
43701: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43702: LD_ADDR_VAR 0 3
43706: PUSH
43707: LD_INT 21
43709: PUSH
43710: LD_INT 22
43712: PUSH
43713: LD_INT 23
43715: PUSH
43716: LD_INT 24
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: ST_TO_ADDR
43725: GO 43976
43727: LD_INT 44
43729: DOUBLE
43730: EQUAL
43731: IFTRUE 43735
43733: GO 43761
43735: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43736: LD_ADDR_VAR 0 3
43740: PUSH
43741: LD_INT 21
43743: PUSH
43744: LD_INT 22
43746: PUSH
43747: LD_INT 23
43749: PUSH
43750: LD_INT 24
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: ST_TO_ADDR
43759: GO 43976
43761: LD_INT 45
43763: DOUBLE
43764: EQUAL
43765: IFTRUE 43769
43767: GO 43795
43769: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43770: LD_ADDR_VAR 0 3
43774: PUSH
43775: LD_INT 21
43777: PUSH
43778: LD_INT 22
43780: PUSH
43781: LD_INT 23
43783: PUSH
43784: LD_INT 24
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: ST_TO_ADDR
43793: GO 43976
43795: LD_INT 49
43797: DOUBLE
43798: EQUAL
43799: IFTRUE 43803
43801: GO 43829
43803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43804: LD_ADDR_VAR 0 3
43808: PUSH
43809: LD_INT 21
43811: PUSH
43812: LD_INT 22
43814: PUSH
43815: LD_INT 23
43817: PUSH
43818: LD_INT 24
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: ST_TO_ADDR
43827: GO 43976
43829: LD_INT 51
43831: DOUBLE
43832: EQUAL
43833: IFTRUE 43837
43835: GO 43863
43837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43838: LD_ADDR_VAR 0 3
43842: PUSH
43843: LD_INT 21
43845: PUSH
43846: LD_INT 22
43848: PUSH
43849: LD_INT 23
43851: PUSH
43852: LD_INT 24
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: ST_TO_ADDR
43861: GO 43976
43863: LD_INT 52
43865: DOUBLE
43866: EQUAL
43867: IFTRUE 43871
43869: GO 43897
43871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43872: LD_ADDR_VAR 0 3
43876: PUSH
43877: LD_INT 21
43879: PUSH
43880: LD_INT 22
43882: PUSH
43883: LD_INT 23
43885: PUSH
43886: LD_INT 24
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: ST_TO_ADDR
43895: GO 43976
43897: LD_INT 53
43899: DOUBLE
43900: EQUAL
43901: IFTRUE 43905
43903: GO 43923
43905: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43906: LD_ADDR_VAR 0 3
43910: PUSH
43911: LD_INT 23
43913: PUSH
43914: LD_INT 24
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: ST_TO_ADDR
43921: GO 43976
43923: LD_INT 46
43925: DOUBLE
43926: EQUAL
43927: IFTRUE 43931
43929: GO 43949
43931: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43932: LD_ADDR_VAR 0 3
43936: PUSH
43937: LD_INT 23
43939: PUSH
43940: LD_INT 24
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: ST_TO_ADDR
43947: GO 43976
43949: LD_INT 47
43951: DOUBLE
43952: EQUAL
43953: IFTRUE 43957
43955: GO 43975
43957: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43958: LD_ADDR_VAR 0 3
43962: PUSH
43963: LD_INT 23
43965: PUSH
43966: LD_INT 24
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: ST_TO_ADDR
43973: GO 43976
43975: POP
// result := ( chassis in result ) ;
43976: LD_ADDR_VAR 0 3
43980: PUSH
43981: LD_VAR 0 1
43985: PUSH
43986: LD_VAR 0 3
43990: IN
43991: ST_TO_ADDR
// end ;
43992: LD_VAR 0 3
43996: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43997: LD_INT 0
43999: PPUSH
44000: PPUSH
44001: PPUSH
44002: PPUSH
44003: PPUSH
44004: PPUSH
44005: PPUSH
// result := array ;
44006: LD_ADDR_VAR 0 5
44010: PUSH
44011: LD_VAR 0 1
44015: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44016: LD_VAR 0 1
44020: NOT
44021: PUSH
44022: LD_VAR 0 2
44026: NOT
44027: OR
44028: PUSH
44029: LD_VAR 0 3
44033: NOT
44034: OR
44035: PUSH
44036: LD_VAR 0 2
44040: PUSH
44041: LD_VAR 0 1
44045: GREATER
44046: OR
44047: PUSH
44048: LD_VAR 0 3
44052: PUSH
44053: LD_VAR 0 1
44057: GREATER
44058: OR
44059: IFFALSE 44063
// exit ;
44061: GO 44359
// if direction then
44063: LD_VAR 0 4
44067: IFFALSE 44131
// begin d := 1 ;
44069: LD_ADDR_VAR 0 9
44073: PUSH
44074: LD_INT 1
44076: ST_TO_ADDR
// if i_from > i_to then
44077: LD_VAR 0 2
44081: PUSH
44082: LD_VAR 0 3
44086: GREATER
44087: IFFALSE 44113
// length := ( array - i_from ) + i_to else
44089: LD_ADDR_VAR 0 11
44093: PUSH
44094: LD_VAR 0 1
44098: PUSH
44099: LD_VAR 0 2
44103: MINUS
44104: PUSH
44105: LD_VAR 0 3
44109: PLUS
44110: ST_TO_ADDR
44111: GO 44129
// length := i_to - i_from ;
44113: LD_ADDR_VAR 0 11
44117: PUSH
44118: LD_VAR 0 3
44122: PUSH
44123: LD_VAR 0 2
44127: MINUS
44128: ST_TO_ADDR
// end else
44129: GO 44192
// begin d := - 1 ;
44131: LD_ADDR_VAR 0 9
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: ST_TO_ADDR
// if i_from > i_to then
44140: LD_VAR 0 2
44144: PUSH
44145: LD_VAR 0 3
44149: GREATER
44150: IFFALSE 44170
// length := i_from - i_to else
44152: LD_ADDR_VAR 0 11
44156: PUSH
44157: LD_VAR 0 2
44161: PUSH
44162: LD_VAR 0 3
44166: MINUS
44167: ST_TO_ADDR
44168: GO 44192
// length := ( array - i_to ) + i_from ;
44170: LD_ADDR_VAR 0 11
44174: PUSH
44175: LD_VAR 0 1
44179: PUSH
44180: LD_VAR 0 3
44184: MINUS
44185: PUSH
44186: LD_VAR 0 2
44190: PLUS
44191: ST_TO_ADDR
// end ; if not length then
44192: LD_VAR 0 11
44196: NOT
44197: IFFALSE 44201
// exit ;
44199: GO 44359
// tmp := array ;
44201: LD_ADDR_VAR 0 10
44205: PUSH
44206: LD_VAR 0 1
44210: ST_TO_ADDR
// for i = 1 to length do
44211: LD_ADDR_VAR 0 6
44215: PUSH
44216: DOUBLE
44217: LD_INT 1
44219: DEC
44220: ST_TO_ADDR
44221: LD_VAR 0 11
44225: PUSH
44226: FOR_TO
44227: IFFALSE 44347
// begin for j = 1 to array do
44229: LD_ADDR_VAR 0 7
44233: PUSH
44234: DOUBLE
44235: LD_INT 1
44237: DEC
44238: ST_TO_ADDR
44239: LD_VAR 0 1
44243: PUSH
44244: FOR_TO
44245: IFFALSE 44333
// begin k := j + d ;
44247: LD_ADDR_VAR 0 8
44251: PUSH
44252: LD_VAR 0 7
44256: PUSH
44257: LD_VAR 0 9
44261: PLUS
44262: ST_TO_ADDR
// if k > array then
44263: LD_VAR 0 8
44267: PUSH
44268: LD_VAR 0 1
44272: GREATER
44273: IFFALSE 44283
// k := 1 ;
44275: LD_ADDR_VAR 0 8
44279: PUSH
44280: LD_INT 1
44282: ST_TO_ADDR
// if not k then
44283: LD_VAR 0 8
44287: NOT
44288: IFFALSE 44300
// k := array ;
44290: LD_ADDR_VAR 0 8
44294: PUSH
44295: LD_VAR 0 1
44299: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44300: LD_ADDR_VAR 0 10
44304: PUSH
44305: LD_VAR 0 10
44309: PPUSH
44310: LD_VAR 0 8
44314: PPUSH
44315: LD_VAR 0 1
44319: PUSH
44320: LD_VAR 0 7
44324: ARRAY
44325: PPUSH
44326: CALL_OW 1
44330: ST_TO_ADDR
// end ;
44331: GO 44244
44333: POP
44334: POP
// array := tmp ;
44335: LD_ADDR_VAR 0 1
44339: PUSH
44340: LD_VAR 0 10
44344: ST_TO_ADDR
// end ;
44345: GO 44226
44347: POP
44348: POP
// result := array ;
44349: LD_ADDR_VAR 0 5
44353: PUSH
44354: LD_VAR 0 1
44358: ST_TO_ADDR
// end ;
44359: LD_VAR 0 5
44363: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44364: LD_INT 0
44366: PPUSH
44367: PPUSH
// result := 0 ;
44368: LD_ADDR_VAR 0 3
44372: PUSH
44373: LD_INT 0
44375: ST_TO_ADDR
// if not array or not value in array then
44376: LD_VAR 0 1
44380: NOT
44381: PUSH
44382: LD_VAR 0 2
44386: PUSH
44387: LD_VAR 0 1
44391: IN
44392: NOT
44393: OR
44394: IFFALSE 44398
// exit ;
44396: GO 44452
// for i = 1 to array do
44398: LD_ADDR_VAR 0 4
44402: PUSH
44403: DOUBLE
44404: LD_INT 1
44406: DEC
44407: ST_TO_ADDR
44408: LD_VAR 0 1
44412: PUSH
44413: FOR_TO
44414: IFFALSE 44450
// if value = array [ i ] then
44416: LD_VAR 0 2
44420: PUSH
44421: LD_VAR 0 1
44425: PUSH
44426: LD_VAR 0 4
44430: ARRAY
44431: EQUAL
44432: IFFALSE 44448
// begin result := i ;
44434: LD_ADDR_VAR 0 3
44438: PUSH
44439: LD_VAR 0 4
44443: ST_TO_ADDR
// exit ;
44444: POP
44445: POP
44446: GO 44452
// end ;
44448: GO 44413
44450: POP
44451: POP
// end ;
44452: LD_VAR 0 3
44456: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44457: LD_INT 0
44459: PPUSH
// vc_chassis := chassis ;
44460: LD_ADDR_OWVAR 37
44464: PUSH
44465: LD_VAR 0 1
44469: ST_TO_ADDR
// vc_engine := engine ;
44470: LD_ADDR_OWVAR 39
44474: PUSH
44475: LD_VAR 0 2
44479: ST_TO_ADDR
// vc_control := control ;
44480: LD_ADDR_OWVAR 38
44484: PUSH
44485: LD_VAR 0 3
44489: ST_TO_ADDR
// vc_weapon := weapon ;
44490: LD_ADDR_OWVAR 40
44494: PUSH
44495: LD_VAR 0 4
44499: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44500: LD_ADDR_OWVAR 41
44504: PUSH
44505: LD_VAR 0 5
44509: ST_TO_ADDR
// end ;
44510: LD_VAR 0 6
44514: RET
// export function WantPlant ( unit ) ; var task ; begin
44515: LD_INT 0
44517: PPUSH
44518: PPUSH
// result := false ;
44519: LD_ADDR_VAR 0 2
44523: PUSH
44524: LD_INT 0
44526: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44527: LD_ADDR_VAR 0 3
44531: PUSH
44532: LD_VAR 0 1
44536: PPUSH
44537: CALL_OW 437
44541: ST_TO_ADDR
// if task then
44542: LD_VAR 0 3
44546: IFFALSE 44574
// if task [ 1 ] [ 1 ] = p then
44548: LD_VAR 0 3
44552: PUSH
44553: LD_INT 1
44555: ARRAY
44556: PUSH
44557: LD_INT 1
44559: ARRAY
44560: PUSH
44561: LD_STRING p
44563: EQUAL
44564: IFFALSE 44574
// result := true ;
44566: LD_ADDR_VAR 0 2
44570: PUSH
44571: LD_INT 1
44573: ST_TO_ADDR
// end ;
44574: LD_VAR 0 2
44578: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44579: LD_INT 0
44581: PPUSH
44582: PPUSH
44583: PPUSH
44584: PPUSH
// if pos < 1 then
44585: LD_VAR 0 2
44589: PUSH
44590: LD_INT 1
44592: LESS
44593: IFFALSE 44597
// exit ;
44595: GO 44900
// if pos = 1 then
44597: LD_VAR 0 2
44601: PUSH
44602: LD_INT 1
44604: EQUAL
44605: IFFALSE 44638
// result := Replace ( arr , pos [ 1 ] , value ) else
44607: LD_ADDR_VAR 0 4
44611: PUSH
44612: LD_VAR 0 1
44616: PPUSH
44617: LD_VAR 0 2
44621: PUSH
44622: LD_INT 1
44624: ARRAY
44625: PPUSH
44626: LD_VAR 0 3
44630: PPUSH
44631: CALL_OW 1
44635: ST_TO_ADDR
44636: GO 44900
// begin tmp := arr ;
44638: LD_ADDR_VAR 0 6
44642: PUSH
44643: LD_VAR 0 1
44647: ST_TO_ADDR
// s_arr := [ tmp ] ;
44648: LD_ADDR_VAR 0 7
44652: PUSH
44653: LD_VAR 0 6
44657: PUSH
44658: EMPTY
44659: LIST
44660: ST_TO_ADDR
// for i = 1 to pos - 1 do
44661: LD_ADDR_VAR 0 5
44665: PUSH
44666: DOUBLE
44667: LD_INT 1
44669: DEC
44670: ST_TO_ADDR
44671: LD_VAR 0 2
44675: PUSH
44676: LD_INT 1
44678: MINUS
44679: PUSH
44680: FOR_TO
44681: IFFALSE 44726
// begin tmp := tmp [ pos [ i ] ] ;
44683: LD_ADDR_VAR 0 6
44687: PUSH
44688: LD_VAR 0 6
44692: PUSH
44693: LD_VAR 0 2
44697: PUSH
44698: LD_VAR 0 5
44702: ARRAY
44703: ARRAY
44704: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44705: LD_ADDR_VAR 0 7
44709: PUSH
44710: LD_VAR 0 7
44714: PUSH
44715: LD_VAR 0 6
44719: PUSH
44720: EMPTY
44721: LIST
44722: ADD
44723: ST_TO_ADDR
// end ;
44724: GO 44680
44726: POP
44727: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44728: LD_ADDR_VAR 0 6
44732: PUSH
44733: LD_VAR 0 6
44737: PPUSH
44738: LD_VAR 0 2
44742: PUSH
44743: LD_VAR 0 2
44747: ARRAY
44748: PPUSH
44749: LD_VAR 0 3
44753: PPUSH
44754: CALL_OW 1
44758: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44759: LD_ADDR_VAR 0 7
44763: PUSH
44764: LD_VAR 0 7
44768: PPUSH
44769: LD_VAR 0 7
44773: PPUSH
44774: LD_VAR 0 6
44778: PPUSH
44779: CALL_OW 1
44783: ST_TO_ADDR
// for i = s_arr downto 2 do
44784: LD_ADDR_VAR 0 5
44788: PUSH
44789: DOUBLE
44790: LD_VAR 0 7
44794: INC
44795: ST_TO_ADDR
44796: LD_INT 2
44798: PUSH
44799: FOR_DOWNTO
44800: IFFALSE 44884
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44802: LD_ADDR_VAR 0 6
44806: PUSH
44807: LD_VAR 0 7
44811: PUSH
44812: LD_VAR 0 5
44816: PUSH
44817: LD_INT 1
44819: MINUS
44820: ARRAY
44821: PPUSH
44822: LD_VAR 0 2
44826: PUSH
44827: LD_VAR 0 5
44831: PUSH
44832: LD_INT 1
44834: MINUS
44835: ARRAY
44836: PPUSH
44837: LD_VAR 0 7
44841: PUSH
44842: LD_VAR 0 5
44846: ARRAY
44847: PPUSH
44848: CALL_OW 1
44852: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44853: LD_ADDR_VAR 0 7
44857: PUSH
44858: LD_VAR 0 7
44862: PPUSH
44863: LD_VAR 0 5
44867: PUSH
44868: LD_INT 1
44870: MINUS
44871: PPUSH
44872: LD_VAR 0 6
44876: PPUSH
44877: CALL_OW 1
44881: ST_TO_ADDR
// end ;
44882: GO 44799
44884: POP
44885: POP
// result := s_arr [ 1 ] ;
44886: LD_ADDR_VAR 0 4
44890: PUSH
44891: LD_VAR 0 7
44895: PUSH
44896: LD_INT 1
44898: ARRAY
44899: ST_TO_ADDR
// end ; end ;
44900: LD_VAR 0 4
44904: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44905: LD_INT 0
44907: PPUSH
44908: PPUSH
// if not list then
44909: LD_VAR 0 1
44913: NOT
44914: IFFALSE 44918
// exit ;
44916: GO 45009
// i := list [ pos1 ] ;
44918: LD_ADDR_VAR 0 5
44922: PUSH
44923: LD_VAR 0 1
44927: PUSH
44928: LD_VAR 0 2
44932: ARRAY
44933: ST_TO_ADDR
// if not i then
44934: LD_VAR 0 5
44938: NOT
44939: IFFALSE 44943
// exit ;
44941: GO 45009
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44943: LD_ADDR_VAR 0 1
44947: PUSH
44948: LD_VAR 0 1
44952: PPUSH
44953: LD_VAR 0 2
44957: PPUSH
44958: LD_VAR 0 1
44962: PUSH
44963: LD_VAR 0 3
44967: ARRAY
44968: PPUSH
44969: CALL_OW 1
44973: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44974: LD_ADDR_VAR 0 1
44978: PUSH
44979: LD_VAR 0 1
44983: PPUSH
44984: LD_VAR 0 3
44988: PPUSH
44989: LD_VAR 0 5
44993: PPUSH
44994: CALL_OW 1
44998: ST_TO_ADDR
// result := list ;
44999: LD_ADDR_VAR 0 4
45003: PUSH
45004: LD_VAR 0 1
45008: ST_TO_ADDR
// end ;
45009: LD_VAR 0 4
45013: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45014: LD_INT 0
45016: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45017: LD_ADDR_VAR 0 5
45021: PUSH
45022: LD_VAR 0 1
45026: PPUSH
45027: CALL_OW 250
45031: PPUSH
45032: LD_VAR 0 1
45036: PPUSH
45037: CALL_OW 251
45041: PPUSH
45042: LD_VAR 0 2
45046: PPUSH
45047: LD_VAR 0 3
45051: PPUSH
45052: LD_VAR 0 4
45056: PPUSH
45057: CALL 45067 0 5
45061: ST_TO_ADDR
// end ;
45062: LD_VAR 0 5
45066: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45067: LD_INT 0
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
// if not list then
45073: LD_VAR 0 3
45077: NOT
45078: IFFALSE 45082
// exit ;
45080: GO 45470
// result := [ ] ;
45082: LD_ADDR_VAR 0 6
45086: PUSH
45087: EMPTY
45088: ST_TO_ADDR
// for i in list do
45089: LD_ADDR_VAR 0 7
45093: PUSH
45094: LD_VAR 0 3
45098: PUSH
45099: FOR_IN
45100: IFFALSE 45302
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45102: LD_ADDR_VAR 0 9
45106: PUSH
45107: LD_VAR 0 7
45111: PPUSH
45112: LD_VAR 0 1
45116: PPUSH
45117: LD_VAR 0 2
45121: PPUSH
45122: CALL_OW 297
45126: ST_TO_ADDR
// if not result then
45127: LD_VAR 0 6
45131: NOT
45132: IFFALSE 45158
// result := [ [ i , tmp ] ] else
45134: LD_ADDR_VAR 0 6
45138: PUSH
45139: LD_VAR 0 7
45143: PUSH
45144: LD_VAR 0 9
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: EMPTY
45154: LIST
45155: ST_TO_ADDR
45156: GO 45300
// begin if result [ result ] [ 2 ] < tmp then
45158: LD_VAR 0 6
45162: PUSH
45163: LD_VAR 0 6
45167: ARRAY
45168: PUSH
45169: LD_INT 2
45171: ARRAY
45172: PUSH
45173: LD_VAR 0 9
45177: LESS
45178: IFFALSE 45220
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45180: LD_ADDR_VAR 0 6
45184: PUSH
45185: LD_VAR 0 6
45189: PPUSH
45190: LD_VAR 0 6
45194: PUSH
45195: LD_INT 1
45197: PLUS
45198: PPUSH
45199: LD_VAR 0 7
45203: PUSH
45204: LD_VAR 0 9
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PPUSH
45213: CALL_OW 2
45217: ST_TO_ADDR
45218: GO 45300
// for j = 1 to result do
45220: LD_ADDR_VAR 0 8
45224: PUSH
45225: DOUBLE
45226: LD_INT 1
45228: DEC
45229: ST_TO_ADDR
45230: LD_VAR 0 6
45234: PUSH
45235: FOR_TO
45236: IFFALSE 45298
// begin if tmp < result [ j ] [ 2 ] then
45238: LD_VAR 0 9
45242: PUSH
45243: LD_VAR 0 6
45247: PUSH
45248: LD_VAR 0 8
45252: ARRAY
45253: PUSH
45254: LD_INT 2
45256: ARRAY
45257: LESS
45258: IFFALSE 45296
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45260: LD_ADDR_VAR 0 6
45264: PUSH
45265: LD_VAR 0 6
45269: PPUSH
45270: LD_VAR 0 8
45274: PPUSH
45275: LD_VAR 0 7
45279: PUSH
45280: LD_VAR 0 9
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PPUSH
45289: CALL_OW 2
45293: ST_TO_ADDR
// break ;
45294: GO 45298
// end ; end ;
45296: GO 45235
45298: POP
45299: POP
// end ; end ;
45300: GO 45099
45302: POP
45303: POP
// if result and not asc then
45304: LD_VAR 0 6
45308: PUSH
45309: LD_VAR 0 4
45313: NOT
45314: AND
45315: IFFALSE 45390
// begin tmp := result ;
45317: LD_ADDR_VAR 0 9
45321: PUSH
45322: LD_VAR 0 6
45326: ST_TO_ADDR
// for i = tmp downto 1 do
45327: LD_ADDR_VAR 0 7
45331: PUSH
45332: DOUBLE
45333: LD_VAR 0 9
45337: INC
45338: ST_TO_ADDR
45339: LD_INT 1
45341: PUSH
45342: FOR_DOWNTO
45343: IFFALSE 45388
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45345: LD_ADDR_VAR 0 6
45349: PUSH
45350: LD_VAR 0 6
45354: PPUSH
45355: LD_VAR 0 9
45359: PUSH
45360: LD_VAR 0 7
45364: MINUS
45365: PUSH
45366: LD_INT 1
45368: PLUS
45369: PPUSH
45370: LD_VAR 0 9
45374: PUSH
45375: LD_VAR 0 7
45379: ARRAY
45380: PPUSH
45381: CALL_OW 1
45385: ST_TO_ADDR
45386: GO 45342
45388: POP
45389: POP
// end ; tmp := [ ] ;
45390: LD_ADDR_VAR 0 9
45394: PUSH
45395: EMPTY
45396: ST_TO_ADDR
// if mode then
45397: LD_VAR 0 5
45401: IFFALSE 45470
// begin for i = 1 to result do
45403: LD_ADDR_VAR 0 7
45407: PUSH
45408: DOUBLE
45409: LD_INT 1
45411: DEC
45412: ST_TO_ADDR
45413: LD_VAR 0 6
45417: PUSH
45418: FOR_TO
45419: IFFALSE 45458
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45421: LD_ADDR_VAR 0 9
45425: PUSH
45426: LD_VAR 0 9
45430: PPUSH
45431: LD_VAR 0 7
45435: PPUSH
45436: LD_VAR 0 6
45440: PUSH
45441: LD_VAR 0 7
45445: ARRAY
45446: PUSH
45447: LD_INT 1
45449: ARRAY
45450: PPUSH
45451: CALL_OW 1
45455: ST_TO_ADDR
45456: GO 45418
45458: POP
45459: POP
// result := tmp ;
45460: LD_ADDR_VAR 0 6
45464: PUSH
45465: LD_VAR 0 9
45469: ST_TO_ADDR
// end ; end ;
45470: LD_VAR 0 6
45474: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45475: LD_INT 0
45477: PPUSH
45478: PPUSH
45479: PPUSH
45480: PPUSH
45481: PPUSH
45482: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45483: LD_ADDR_VAR 0 5
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: ST_TO_ADDR
// if not x or not y then
45505: LD_VAR 0 2
45509: NOT
45510: PUSH
45511: LD_VAR 0 3
45515: NOT
45516: OR
45517: IFFALSE 45521
// exit ;
45519: GO 47171
// if not range then
45521: LD_VAR 0 4
45525: NOT
45526: IFFALSE 45536
// range := 10 ;
45528: LD_ADDR_VAR 0 4
45532: PUSH
45533: LD_INT 10
45535: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45536: LD_ADDR_VAR 0 8
45540: PUSH
45541: LD_INT 81
45543: PUSH
45544: LD_VAR 0 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 92
45555: PUSH
45556: LD_VAR 0 2
45560: PUSH
45561: LD_VAR 0 3
45565: PUSH
45566: LD_VAR 0 4
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: LD_INT 21
45582: PUSH
45583: LD_INT 3
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: PPUSH
45599: CALL_OW 69
45603: ST_TO_ADDR
// if not tmp then
45604: LD_VAR 0 8
45608: NOT
45609: IFFALSE 45613
// exit ;
45611: GO 47171
// for i in tmp do
45613: LD_ADDR_VAR 0 6
45617: PUSH
45618: LD_VAR 0 8
45622: PUSH
45623: FOR_IN
45624: IFFALSE 47146
// begin points := [ 0 , 0 , 0 ] ;
45626: LD_ADDR_VAR 0 9
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: LIST
45644: ST_TO_ADDR
// bpoints := 1 ;
45645: LD_ADDR_VAR 0 10
45649: PUSH
45650: LD_INT 1
45652: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45653: LD_VAR 0 6
45657: PPUSH
45658: CALL_OW 247
45662: PUSH
45663: LD_INT 1
45665: DOUBLE
45666: EQUAL
45667: IFTRUE 45671
45669: GO 46249
45671: POP
// begin if GetClass ( i ) = 1 then
45672: LD_VAR 0 6
45676: PPUSH
45677: CALL_OW 257
45681: PUSH
45682: LD_INT 1
45684: EQUAL
45685: IFFALSE 45706
// points := [ 10 , 5 , 3 ] ;
45687: LD_ADDR_VAR 0 9
45691: PUSH
45692: LD_INT 10
45694: PUSH
45695: LD_INT 5
45697: PUSH
45698: LD_INT 3
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: LIST
45705: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45706: LD_VAR 0 6
45710: PPUSH
45711: CALL_OW 257
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: LD_INT 3
45721: PUSH
45722: LD_INT 4
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: LIST
45729: IN
45730: IFFALSE 45751
// points := [ 3 , 2 , 1 ] ;
45732: LD_ADDR_VAR 0 9
45736: PUSH
45737: LD_INT 3
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45751: LD_VAR 0 6
45755: PPUSH
45756: CALL_OW 257
45760: PUSH
45761: LD_INT 5
45763: EQUAL
45764: IFFALSE 45785
// points := [ 130 , 5 , 2 ] ;
45766: LD_ADDR_VAR 0 9
45770: PUSH
45771: LD_INT 130
45773: PUSH
45774: LD_INT 5
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45785: LD_VAR 0 6
45789: PPUSH
45790: CALL_OW 257
45794: PUSH
45795: LD_INT 8
45797: EQUAL
45798: IFFALSE 45819
// points := [ 35 , 35 , 30 ] ;
45800: LD_ADDR_VAR 0 9
45804: PUSH
45805: LD_INT 35
45807: PUSH
45808: LD_INT 35
45810: PUSH
45811: LD_INT 30
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45819: LD_VAR 0 6
45823: PPUSH
45824: CALL_OW 257
45828: PUSH
45829: LD_INT 9
45831: EQUAL
45832: IFFALSE 45853
// points := [ 20 , 55 , 40 ] ;
45834: LD_ADDR_VAR 0 9
45838: PUSH
45839: LD_INT 20
45841: PUSH
45842: LD_INT 55
45844: PUSH
45845: LD_INT 40
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45853: LD_VAR 0 6
45857: PPUSH
45858: CALL_OW 257
45862: PUSH
45863: LD_INT 12
45865: PUSH
45866: LD_INT 16
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: IN
45873: IFFALSE 45894
// points := [ 5 , 3 , 2 ] ;
45875: LD_ADDR_VAR 0 9
45879: PUSH
45880: LD_INT 5
45882: PUSH
45883: LD_INT 3
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: LIST
45893: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45894: LD_VAR 0 6
45898: PPUSH
45899: CALL_OW 257
45903: PUSH
45904: LD_INT 17
45906: EQUAL
45907: IFFALSE 45928
// points := [ 100 , 50 , 75 ] ;
45909: LD_ADDR_VAR 0 9
45913: PUSH
45914: LD_INT 100
45916: PUSH
45917: LD_INT 50
45919: PUSH
45920: LD_INT 75
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: LIST
45927: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45928: LD_VAR 0 6
45932: PPUSH
45933: CALL_OW 257
45937: PUSH
45938: LD_INT 15
45940: EQUAL
45941: IFFALSE 45962
// points := [ 10 , 5 , 3 ] ;
45943: LD_ADDR_VAR 0 9
45947: PUSH
45948: LD_INT 10
45950: PUSH
45951: LD_INT 5
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: LIST
45961: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45962: LD_VAR 0 6
45966: PPUSH
45967: CALL_OW 257
45971: PUSH
45972: LD_INT 14
45974: EQUAL
45975: IFFALSE 45996
// points := [ 10 , 0 , 0 ] ;
45977: LD_ADDR_VAR 0 9
45981: PUSH
45982: LD_INT 10
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: LIST
45995: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45996: LD_VAR 0 6
46000: PPUSH
46001: CALL_OW 257
46005: PUSH
46006: LD_INT 11
46008: EQUAL
46009: IFFALSE 46030
// points := [ 30 , 10 , 5 ] ;
46011: LD_ADDR_VAR 0 9
46015: PUSH
46016: LD_INT 30
46018: PUSH
46019: LD_INT 10
46021: PUSH
46022: LD_INT 5
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: LIST
46029: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46030: LD_VAR 0 1
46034: PPUSH
46035: LD_INT 5
46037: PPUSH
46038: CALL_OW 321
46042: PUSH
46043: LD_INT 2
46045: EQUAL
46046: IFFALSE 46063
// bpoints := bpoints * 1.8 ;
46048: LD_ADDR_VAR 0 10
46052: PUSH
46053: LD_VAR 0 10
46057: PUSH
46058: LD_REAL  1.80000000000000E+0000
46061: MUL
46062: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46063: LD_VAR 0 6
46067: PPUSH
46068: CALL_OW 257
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 3
46081: PUSH
46082: LD_INT 4
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: IN
46091: PUSH
46092: LD_VAR 0 1
46096: PPUSH
46097: LD_INT 51
46099: PPUSH
46100: CALL_OW 321
46104: PUSH
46105: LD_INT 2
46107: EQUAL
46108: AND
46109: IFFALSE 46126
// bpoints := bpoints * 1.2 ;
46111: LD_ADDR_VAR 0 10
46115: PUSH
46116: LD_VAR 0 10
46120: PUSH
46121: LD_REAL  1.20000000000000E+0000
46124: MUL
46125: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46126: LD_VAR 0 6
46130: PPUSH
46131: CALL_OW 257
46135: PUSH
46136: LD_INT 5
46138: PUSH
46139: LD_INT 7
46141: PUSH
46142: LD_INT 9
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: IN
46150: PUSH
46151: LD_VAR 0 1
46155: PPUSH
46156: LD_INT 52
46158: PPUSH
46159: CALL_OW 321
46163: PUSH
46164: LD_INT 2
46166: EQUAL
46167: AND
46168: IFFALSE 46185
// bpoints := bpoints * 1.5 ;
46170: LD_ADDR_VAR 0 10
46174: PUSH
46175: LD_VAR 0 10
46179: PUSH
46180: LD_REAL  1.50000000000000E+0000
46183: MUL
46184: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46185: LD_VAR 0 1
46189: PPUSH
46190: LD_INT 66
46192: PPUSH
46193: CALL_OW 321
46197: PUSH
46198: LD_INT 2
46200: EQUAL
46201: IFFALSE 46218
// bpoints := bpoints * 1.1 ;
46203: LD_ADDR_VAR 0 10
46207: PUSH
46208: LD_VAR 0 10
46212: PUSH
46213: LD_REAL  1.10000000000000E+0000
46216: MUL
46217: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46218: LD_ADDR_VAR 0 10
46222: PUSH
46223: LD_VAR 0 10
46227: PUSH
46228: LD_VAR 0 6
46232: PPUSH
46233: LD_INT 1
46235: PPUSH
46236: CALL_OW 259
46240: PUSH
46241: LD_REAL  1.15000000000000E+0000
46244: MUL
46245: MUL
46246: ST_TO_ADDR
// end ; unit_vehicle :
46247: GO 47075
46249: LD_INT 2
46251: DOUBLE
46252: EQUAL
46253: IFTRUE 46257
46255: GO 47063
46257: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46258: LD_VAR 0 6
46262: PPUSH
46263: CALL_OW 264
46267: PUSH
46268: LD_INT 2
46270: PUSH
46271: LD_INT 42
46273: PUSH
46274: LD_INT 24
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: LIST
46281: IN
46282: IFFALSE 46303
// points := [ 25 , 5 , 3 ] ;
46284: LD_ADDR_VAR 0 9
46288: PUSH
46289: LD_INT 25
46291: PUSH
46292: LD_INT 5
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: LIST
46302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46303: LD_VAR 0 6
46307: PPUSH
46308: CALL_OW 264
46312: PUSH
46313: LD_INT 4
46315: PUSH
46316: LD_INT 43
46318: PUSH
46319: LD_INT 25
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: LIST
46326: IN
46327: IFFALSE 46348
// points := [ 40 , 15 , 5 ] ;
46329: LD_ADDR_VAR 0 9
46333: PUSH
46334: LD_INT 40
46336: PUSH
46337: LD_INT 15
46339: PUSH
46340: LD_INT 5
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46348: LD_VAR 0 6
46352: PPUSH
46353: CALL_OW 264
46357: PUSH
46358: LD_INT 3
46360: PUSH
46361: LD_INT 23
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: IN
46368: IFFALSE 46389
// points := [ 7 , 25 , 8 ] ;
46370: LD_ADDR_VAR 0 9
46374: PUSH
46375: LD_INT 7
46377: PUSH
46378: LD_INT 25
46380: PUSH
46381: LD_INT 8
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46389: LD_VAR 0 6
46393: PPUSH
46394: CALL_OW 264
46398: PUSH
46399: LD_INT 5
46401: PUSH
46402: LD_INT 27
46404: PUSH
46405: LD_INT 44
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: LIST
46412: IN
46413: IFFALSE 46434
// points := [ 14 , 50 , 16 ] ;
46415: LD_ADDR_VAR 0 9
46419: PUSH
46420: LD_INT 14
46422: PUSH
46423: LD_INT 50
46425: PUSH
46426: LD_INT 16
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46434: LD_VAR 0 6
46438: PPUSH
46439: CALL_OW 264
46443: PUSH
46444: LD_INT 6
46446: PUSH
46447: LD_INT 46
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: IN
46454: IFFALSE 46475
// points := [ 32 , 120 , 70 ] ;
46456: LD_ADDR_VAR 0 9
46460: PUSH
46461: LD_INT 32
46463: PUSH
46464: LD_INT 120
46466: PUSH
46467: LD_INT 70
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46475: LD_VAR 0 6
46479: PPUSH
46480: CALL_OW 264
46484: PUSH
46485: LD_INT 7
46487: PUSH
46488: LD_INT 28
46490: PUSH
46491: LD_INT 45
46493: PUSH
46494: LD_INT 92
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: IN
46503: IFFALSE 46524
// points := [ 35 , 20 , 45 ] ;
46505: LD_ADDR_VAR 0 9
46509: PUSH
46510: LD_INT 35
46512: PUSH
46513: LD_INT 20
46515: PUSH
46516: LD_INT 45
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: LIST
46523: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46524: LD_VAR 0 6
46528: PPUSH
46529: CALL_OW 264
46533: PUSH
46534: LD_INT 47
46536: PUSH
46537: EMPTY
46538: LIST
46539: IN
46540: IFFALSE 46561
// points := [ 67 , 45 , 75 ] ;
46542: LD_ADDR_VAR 0 9
46546: PUSH
46547: LD_INT 67
46549: PUSH
46550: LD_INT 45
46552: PUSH
46553: LD_INT 75
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: LIST
46560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46561: LD_VAR 0 6
46565: PPUSH
46566: CALL_OW 264
46570: PUSH
46571: LD_INT 26
46573: PUSH
46574: EMPTY
46575: LIST
46576: IN
46577: IFFALSE 46598
// points := [ 120 , 30 , 80 ] ;
46579: LD_ADDR_VAR 0 9
46583: PUSH
46584: LD_INT 120
46586: PUSH
46587: LD_INT 30
46589: PUSH
46590: LD_INT 80
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46598: LD_VAR 0 6
46602: PPUSH
46603: CALL_OW 264
46607: PUSH
46608: LD_INT 22
46610: PUSH
46611: EMPTY
46612: LIST
46613: IN
46614: IFFALSE 46635
// points := [ 40 , 1 , 1 ] ;
46616: LD_ADDR_VAR 0 9
46620: PUSH
46621: LD_INT 40
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46635: LD_VAR 0 6
46639: PPUSH
46640: CALL_OW 264
46644: PUSH
46645: LD_INT 29
46647: PUSH
46648: EMPTY
46649: LIST
46650: IN
46651: IFFALSE 46672
// points := [ 70 , 200 , 400 ] ;
46653: LD_ADDR_VAR 0 9
46657: PUSH
46658: LD_INT 70
46660: PUSH
46661: LD_INT 200
46663: PUSH
46664: LD_INT 400
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46672: LD_VAR 0 6
46676: PPUSH
46677: CALL_OW 264
46681: PUSH
46682: LD_INT 14
46684: PUSH
46685: LD_INT 53
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: IN
46692: IFFALSE 46713
// points := [ 40 , 10 , 20 ] ;
46694: LD_ADDR_VAR 0 9
46698: PUSH
46699: LD_INT 40
46701: PUSH
46702: LD_INT 10
46704: PUSH
46705: LD_INT 20
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: LIST
46712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46713: LD_VAR 0 6
46717: PPUSH
46718: CALL_OW 264
46722: PUSH
46723: LD_INT 9
46725: PUSH
46726: EMPTY
46727: LIST
46728: IN
46729: IFFALSE 46750
// points := [ 5 , 70 , 20 ] ;
46731: LD_ADDR_VAR 0 9
46735: PUSH
46736: LD_INT 5
46738: PUSH
46739: LD_INT 70
46741: PUSH
46742: LD_INT 20
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46750: LD_VAR 0 6
46754: PPUSH
46755: CALL_OW 264
46759: PUSH
46760: LD_INT 10
46762: PUSH
46763: EMPTY
46764: LIST
46765: IN
46766: IFFALSE 46787
// points := [ 35 , 110 , 70 ] ;
46768: LD_ADDR_VAR 0 9
46772: PUSH
46773: LD_INT 35
46775: PUSH
46776: LD_INT 110
46778: PUSH
46779: LD_INT 70
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: LIST
46786: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46787: LD_VAR 0 6
46791: PPUSH
46792: CALL_OW 265
46796: PUSH
46797: LD_INT 25
46799: EQUAL
46800: IFFALSE 46821
// points := [ 80 , 65 , 100 ] ;
46802: LD_ADDR_VAR 0 9
46806: PUSH
46807: LD_INT 80
46809: PUSH
46810: LD_INT 65
46812: PUSH
46813: LD_INT 100
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46821: LD_VAR 0 6
46825: PPUSH
46826: CALL_OW 263
46830: PUSH
46831: LD_INT 1
46833: EQUAL
46834: IFFALSE 46869
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46836: LD_ADDR_VAR 0 10
46840: PUSH
46841: LD_VAR 0 10
46845: PUSH
46846: LD_VAR 0 6
46850: PPUSH
46851: CALL_OW 311
46855: PPUSH
46856: LD_INT 3
46858: PPUSH
46859: CALL_OW 259
46863: PUSH
46864: LD_INT 4
46866: MUL
46867: MUL
46868: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46869: LD_VAR 0 6
46873: PPUSH
46874: CALL_OW 263
46878: PUSH
46879: LD_INT 2
46881: EQUAL
46882: IFFALSE 46933
// begin j := IsControledBy ( i ) ;
46884: LD_ADDR_VAR 0 7
46888: PUSH
46889: LD_VAR 0 6
46893: PPUSH
46894: CALL_OW 312
46898: ST_TO_ADDR
// if j then
46899: LD_VAR 0 7
46903: IFFALSE 46933
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46905: LD_ADDR_VAR 0 10
46909: PUSH
46910: LD_VAR 0 10
46914: PUSH
46915: LD_VAR 0 7
46919: PPUSH
46920: LD_INT 3
46922: PPUSH
46923: CALL_OW 259
46927: PUSH
46928: LD_INT 3
46930: MUL
46931: MUL
46932: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46933: LD_VAR 0 6
46937: PPUSH
46938: CALL_OW 264
46942: PUSH
46943: LD_INT 5
46945: PUSH
46946: LD_INT 6
46948: PUSH
46949: LD_INT 46
46951: PUSH
46952: LD_INT 44
46954: PUSH
46955: LD_INT 47
46957: PUSH
46958: LD_INT 45
46960: PUSH
46961: LD_INT 28
46963: PUSH
46964: LD_INT 7
46966: PUSH
46967: LD_INT 27
46969: PUSH
46970: LD_INT 29
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: IN
46985: PUSH
46986: LD_VAR 0 1
46990: PPUSH
46991: LD_INT 52
46993: PPUSH
46994: CALL_OW 321
46998: PUSH
46999: LD_INT 2
47001: EQUAL
47002: AND
47003: IFFALSE 47020
// bpoints := bpoints * 1.2 ;
47005: LD_ADDR_VAR 0 10
47009: PUSH
47010: LD_VAR 0 10
47014: PUSH
47015: LD_REAL  1.20000000000000E+0000
47018: MUL
47019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47020: LD_VAR 0 6
47024: PPUSH
47025: CALL_OW 264
47029: PUSH
47030: LD_INT 6
47032: PUSH
47033: LD_INT 46
47035: PUSH
47036: LD_INT 47
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: LIST
47043: IN
47044: IFFALSE 47061
// bpoints := bpoints * 1.2 ;
47046: LD_ADDR_VAR 0 10
47050: PUSH
47051: LD_VAR 0 10
47055: PUSH
47056: LD_REAL  1.20000000000000E+0000
47059: MUL
47060: ST_TO_ADDR
// end ; unit_building :
47061: GO 47075
47063: LD_INT 3
47065: DOUBLE
47066: EQUAL
47067: IFTRUE 47071
47069: GO 47074
47071: POP
// ; end ;
47072: GO 47075
47074: POP
// for j = 1 to 3 do
47075: LD_ADDR_VAR 0 7
47079: PUSH
47080: DOUBLE
47081: LD_INT 1
47083: DEC
47084: ST_TO_ADDR
47085: LD_INT 3
47087: PUSH
47088: FOR_TO
47089: IFFALSE 47142
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47091: LD_ADDR_VAR 0 5
47095: PUSH
47096: LD_VAR 0 5
47100: PPUSH
47101: LD_VAR 0 7
47105: PPUSH
47106: LD_VAR 0 5
47110: PUSH
47111: LD_VAR 0 7
47115: ARRAY
47116: PUSH
47117: LD_VAR 0 9
47121: PUSH
47122: LD_VAR 0 7
47126: ARRAY
47127: PUSH
47128: LD_VAR 0 10
47132: MUL
47133: PLUS
47134: PPUSH
47135: CALL_OW 1
47139: ST_TO_ADDR
47140: GO 47088
47142: POP
47143: POP
// end ;
47144: GO 45623
47146: POP
47147: POP
// result := Replace ( result , 4 , tmp ) ;
47148: LD_ADDR_VAR 0 5
47152: PUSH
47153: LD_VAR 0 5
47157: PPUSH
47158: LD_INT 4
47160: PPUSH
47161: LD_VAR 0 8
47165: PPUSH
47166: CALL_OW 1
47170: ST_TO_ADDR
// end ;
47171: LD_VAR 0 5
47175: RET
// export function DangerAtRange ( unit , range ) ; begin
47176: LD_INT 0
47178: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47179: LD_ADDR_VAR 0 3
47183: PUSH
47184: LD_VAR 0 1
47188: PPUSH
47189: CALL_OW 255
47193: PPUSH
47194: LD_VAR 0 1
47198: PPUSH
47199: CALL_OW 250
47203: PPUSH
47204: LD_VAR 0 1
47208: PPUSH
47209: CALL_OW 251
47213: PPUSH
47214: LD_VAR 0 2
47218: PPUSH
47219: CALL 45475 0 4
47223: ST_TO_ADDR
// end ;
47224: LD_VAR 0 3
47228: RET
// export function DangerInArea ( side , area ) ; begin
47229: LD_INT 0
47231: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47232: LD_ADDR_VAR 0 3
47236: PUSH
47237: LD_VAR 0 2
47241: PPUSH
47242: LD_INT 81
47244: PUSH
47245: LD_VAR 0 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PPUSH
47254: CALL_OW 70
47258: ST_TO_ADDR
// end ;
47259: LD_VAR 0 3
47263: RET
// export function IsExtension ( b ) ; begin
47264: LD_INT 0
47266: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47267: LD_ADDR_VAR 0 2
47271: PUSH
47272: LD_VAR 0 1
47276: PUSH
47277: LD_INT 23
47279: PUSH
47280: LD_INT 20
47282: PUSH
47283: LD_INT 22
47285: PUSH
47286: LD_INT 17
47288: PUSH
47289: LD_INT 24
47291: PUSH
47292: LD_INT 21
47294: PUSH
47295: LD_INT 19
47297: PUSH
47298: LD_INT 16
47300: PUSH
47301: LD_INT 25
47303: PUSH
47304: LD_INT 18
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: IN
47319: ST_TO_ADDR
// end ;
47320: LD_VAR 0 2
47324: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47325: LD_INT 0
47327: PPUSH
47328: PPUSH
47329: PPUSH
// result := [ ] ;
47330: LD_ADDR_VAR 0 4
47334: PUSH
47335: EMPTY
47336: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47337: LD_ADDR_VAR 0 5
47341: PUSH
47342: LD_VAR 0 2
47346: PPUSH
47347: LD_INT 21
47349: PUSH
47350: LD_INT 3
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PPUSH
47357: CALL_OW 70
47361: ST_TO_ADDR
// if not tmp then
47362: LD_VAR 0 5
47366: NOT
47367: IFFALSE 47371
// exit ;
47369: GO 47435
// if checkLink then
47371: LD_VAR 0 3
47375: IFFALSE 47425
// begin for i in tmp do
47377: LD_ADDR_VAR 0 6
47381: PUSH
47382: LD_VAR 0 5
47386: PUSH
47387: FOR_IN
47388: IFFALSE 47423
// if GetBase ( i ) <> base then
47390: LD_VAR 0 6
47394: PPUSH
47395: CALL_OW 274
47399: PUSH
47400: LD_VAR 0 1
47404: NONEQUAL
47405: IFFALSE 47421
// ComLinkToBase ( base , i ) ;
47407: LD_VAR 0 1
47411: PPUSH
47412: LD_VAR 0 6
47416: PPUSH
47417: CALL_OW 169
47421: GO 47387
47423: POP
47424: POP
// end ; result := tmp ;
47425: LD_ADDR_VAR 0 4
47429: PUSH
47430: LD_VAR 0 5
47434: ST_TO_ADDR
// end ;
47435: LD_VAR 0 4
47439: RET
// export function ComComplete ( units , b ) ; var i ; begin
47440: LD_INT 0
47442: PPUSH
47443: PPUSH
// if not units then
47444: LD_VAR 0 1
47448: NOT
47449: IFFALSE 47453
// exit ;
47451: GO 47543
// for i in units do
47453: LD_ADDR_VAR 0 4
47457: PUSH
47458: LD_VAR 0 1
47462: PUSH
47463: FOR_IN
47464: IFFALSE 47541
// if BuildingStatus ( b ) = bs_build then
47466: LD_VAR 0 2
47470: PPUSH
47471: CALL_OW 461
47475: PUSH
47476: LD_INT 1
47478: EQUAL
47479: IFFALSE 47539
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47481: LD_VAR 0 4
47485: PPUSH
47486: LD_STRING h
47488: PUSH
47489: LD_VAR 0 2
47493: PPUSH
47494: CALL_OW 250
47498: PUSH
47499: LD_VAR 0 2
47503: PPUSH
47504: CALL_OW 251
47508: PUSH
47509: LD_VAR 0 2
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: PUSH
47532: EMPTY
47533: LIST
47534: PPUSH
47535: CALL_OW 446
47539: GO 47463
47541: POP
47542: POP
// end ;
47543: LD_VAR 0 3
47547: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47548: LD_INT 0
47550: PPUSH
47551: PPUSH
47552: PPUSH
47553: PPUSH
47554: PPUSH
47555: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47556: LD_VAR 0 1
47560: NOT
47561: PUSH
47562: LD_VAR 0 1
47566: PPUSH
47567: CALL_OW 263
47571: PUSH
47572: LD_INT 2
47574: NONEQUAL
47575: OR
47576: IFFALSE 47580
// exit ;
47578: GO 47896
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47580: LD_ADDR_VAR 0 6
47584: PUSH
47585: LD_INT 22
47587: PUSH
47588: LD_VAR 0 1
47592: PPUSH
47593: CALL_OW 255
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 30
47607: PUSH
47608: LD_INT 36
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 34
47617: PUSH
47618: LD_INT 31
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: LIST
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PPUSH
47634: CALL_OW 69
47638: ST_TO_ADDR
// if not tmp then
47639: LD_VAR 0 6
47643: NOT
47644: IFFALSE 47648
// exit ;
47646: GO 47896
// result := [ ] ;
47648: LD_ADDR_VAR 0 2
47652: PUSH
47653: EMPTY
47654: ST_TO_ADDR
// for i in tmp do
47655: LD_ADDR_VAR 0 3
47659: PUSH
47660: LD_VAR 0 6
47664: PUSH
47665: FOR_IN
47666: IFFALSE 47737
// begin t := UnitsInside ( i ) ;
47668: LD_ADDR_VAR 0 4
47672: PUSH
47673: LD_VAR 0 3
47677: PPUSH
47678: CALL_OW 313
47682: ST_TO_ADDR
// if t then
47683: LD_VAR 0 4
47687: IFFALSE 47735
// for j in t do
47689: LD_ADDR_VAR 0 7
47693: PUSH
47694: LD_VAR 0 4
47698: PUSH
47699: FOR_IN
47700: IFFALSE 47733
// result := Replace ( result , result + 1 , j ) ;
47702: LD_ADDR_VAR 0 2
47706: PUSH
47707: LD_VAR 0 2
47711: PPUSH
47712: LD_VAR 0 2
47716: PUSH
47717: LD_INT 1
47719: PLUS
47720: PPUSH
47721: LD_VAR 0 7
47725: PPUSH
47726: CALL_OW 1
47730: ST_TO_ADDR
47731: GO 47699
47733: POP
47734: POP
// end ;
47735: GO 47665
47737: POP
47738: POP
// if not result then
47739: LD_VAR 0 2
47743: NOT
47744: IFFALSE 47748
// exit ;
47746: GO 47896
// mech := result [ 1 ] ;
47748: LD_ADDR_VAR 0 5
47752: PUSH
47753: LD_VAR 0 2
47757: PUSH
47758: LD_INT 1
47760: ARRAY
47761: ST_TO_ADDR
// if result > 1 then
47762: LD_VAR 0 2
47766: PUSH
47767: LD_INT 1
47769: GREATER
47770: IFFALSE 47882
// begin for i = 2 to result do
47772: LD_ADDR_VAR 0 3
47776: PUSH
47777: DOUBLE
47778: LD_INT 2
47780: DEC
47781: ST_TO_ADDR
47782: LD_VAR 0 2
47786: PUSH
47787: FOR_TO
47788: IFFALSE 47880
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47790: LD_ADDR_VAR 0 4
47794: PUSH
47795: LD_VAR 0 2
47799: PUSH
47800: LD_VAR 0 3
47804: ARRAY
47805: PPUSH
47806: LD_INT 3
47808: PPUSH
47809: CALL_OW 259
47813: PUSH
47814: LD_VAR 0 2
47818: PUSH
47819: LD_VAR 0 3
47823: ARRAY
47824: PPUSH
47825: CALL_OW 432
47829: MINUS
47830: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47831: LD_VAR 0 4
47835: PUSH
47836: LD_VAR 0 5
47840: PPUSH
47841: LD_INT 3
47843: PPUSH
47844: CALL_OW 259
47848: PUSH
47849: LD_VAR 0 5
47853: PPUSH
47854: CALL_OW 432
47858: MINUS
47859: GREATEREQUAL
47860: IFFALSE 47878
// mech := result [ i ] ;
47862: LD_ADDR_VAR 0 5
47866: PUSH
47867: LD_VAR 0 2
47871: PUSH
47872: LD_VAR 0 3
47876: ARRAY
47877: ST_TO_ADDR
// end ;
47878: GO 47787
47880: POP
47881: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47882: LD_VAR 0 1
47886: PPUSH
47887: LD_VAR 0 5
47891: PPUSH
47892: CALL_OW 135
// end ;
47896: LD_VAR 0 2
47900: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47901: LD_INT 0
47903: PPUSH
47904: PPUSH
47905: PPUSH
47906: PPUSH
47907: PPUSH
47908: PPUSH
47909: PPUSH
47910: PPUSH
47911: PPUSH
47912: PPUSH
47913: PPUSH
47914: PPUSH
47915: PPUSH
// result := [ ] ;
47916: LD_ADDR_VAR 0 7
47920: PUSH
47921: EMPTY
47922: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47923: LD_VAR 0 1
47927: PPUSH
47928: CALL_OW 266
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: IN
47943: NOT
47944: IFFALSE 47948
// exit ;
47946: GO 49582
// if name then
47948: LD_VAR 0 3
47952: IFFALSE 47968
// SetBName ( base_dep , name ) ;
47954: LD_VAR 0 1
47958: PPUSH
47959: LD_VAR 0 3
47963: PPUSH
47964: CALL_OW 500
// base := GetBase ( base_dep ) ;
47968: LD_ADDR_VAR 0 15
47972: PUSH
47973: LD_VAR 0 1
47977: PPUSH
47978: CALL_OW 274
47982: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47983: LD_ADDR_VAR 0 16
47987: PUSH
47988: LD_VAR 0 1
47992: PPUSH
47993: CALL_OW 255
47997: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47998: LD_ADDR_VAR 0 17
48002: PUSH
48003: LD_VAR 0 1
48007: PPUSH
48008: CALL_OW 248
48012: ST_TO_ADDR
// if sources then
48013: LD_VAR 0 5
48017: IFFALSE 48064
// for i = 1 to 3 do
48019: LD_ADDR_VAR 0 8
48023: PUSH
48024: DOUBLE
48025: LD_INT 1
48027: DEC
48028: ST_TO_ADDR
48029: LD_INT 3
48031: PUSH
48032: FOR_TO
48033: IFFALSE 48062
// AddResourceType ( base , i , sources [ i ] ) ;
48035: LD_VAR 0 15
48039: PPUSH
48040: LD_VAR 0 8
48044: PPUSH
48045: LD_VAR 0 5
48049: PUSH
48050: LD_VAR 0 8
48054: ARRAY
48055: PPUSH
48056: CALL_OW 276
48060: GO 48032
48062: POP
48063: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48064: LD_ADDR_VAR 0 18
48068: PUSH
48069: LD_VAR 0 15
48073: PPUSH
48074: LD_VAR 0 2
48078: PPUSH
48079: LD_INT 1
48081: PPUSH
48082: CALL 47325 0 3
48086: ST_TO_ADDR
// InitHc ;
48087: CALL_OW 19
// InitUc ;
48091: CALL_OW 18
// uc_side := side ;
48095: LD_ADDR_OWVAR 20
48099: PUSH
48100: LD_VAR 0 16
48104: ST_TO_ADDR
// uc_nation := nation ;
48105: LD_ADDR_OWVAR 21
48109: PUSH
48110: LD_VAR 0 17
48114: ST_TO_ADDR
// if buildings then
48115: LD_VAR 0 18
48119: IFFALSE 49441
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48121: LD_ADDR_VAR 0 19
48125: PUSH
48126: LD_VAR 0 18
48130: PPUSH
48131: LD_INT 2
48133: PUSH
48134: LD_INT 30
48136: PUSH
48137: LD_INT 29
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 30
48146: PUSH
48147: LD_INT 30
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: LIST
48158: PPUSH
48159: CALL_OW 72
48163: ST_TO_ADDR
// if tmp then
48164: LD_VAR 0 19
48168: IFFALSE 48216
// for i in tmp do
48170: LD_ADDR_VAR 0 8
48174: PUSH
48175: LD_VAR 0 19
48179: PUSH
48180: FOR_IN
48181: IFFALSE 48214
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48183: LD_VAR 0 8
48187: PPUSH
48188: CALL_OW 250
48192: PPUSH
48193: LD_VAR 0 8
48197: PPUSH
48198: CALL_OW 251
48202: PPUSH
48203: LD_VAR 0 16
48207: PPUSH
48208: CALL_OW 441
48212: GO 48180
48214: POP
48215: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48216: LD_VAR 0 18
48220: PPUSH
48221: LD_INT 2
48223: PUSH
48224: LD_INT 30
48226: PUSH
48227: LD_INT 32
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 30
48236: PUSH
48237: LD_INT 33
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: PPUSH
48249: CALL_OW 72
48253: IFFALSE 48341
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48255: LD_ADDR_VAR 0 8
48259: PUSH
48260: LD_VAR 0 18
48264: PPUSH
48265: LD_INT 2
48267: PUSH
48268: LD_INT 30
48270: PUSH
48271: LD_INT 32
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 30
48280: PUSH
48281: LD_INT 33
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: PPUSH
48293: CALL_OW 72
48297: PUSH
48298: FOR_IN
48299: IFFALSE 48339
// begin if not GetBWeapon ( i ) then
48301: LD_VAR 0 8
48305: PPUSH
48306: CALL_OW 269
48310: NOT
48311: IFFALSE 48337
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48313: LD_VAR 0 8
48317: PPUSH
48318: LD_VAR 0 8
48322: PPUSH
48323: LD_VAR 0 2
48327: PPUSH
48328: CALL 49587 0 2
48332: PPUSH
48333: CALL_OW 431
// end ;
48337: GO 48298
48339: POP
48340: POP
// end ; for i = 1 to personel do
48341: LD_ADDR_VAR 0 8
48345: PUSH
48346: DOUBLE
48347: LD_INT 1
48349: DEC
48350: ST_TO_ADDR
48351: LD_VAR 0 6
48355: PUSH
48356: FOR_TO
48357: IFFALSE 49421
// begin if i > 4 then
48359: LD_VAR 0 8
48363: PUSH
48364: LD_INT 4
48366: GREATER
48367: IFFALSE 48371
// break ;
48369: GO 49421
// case i of 1 :
48371: LD_VAR 0 8
48375: PUSH
48376: LD_INT 1
48378: DOUBLE
48379: EQUAL
48380: IFTRUE 48384
48382: GO 48464
48384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48385: LD_ADDR_VAR 0 12
48389: PUSH
48390: LD_VAR 0 18
48394: PPUSH
48395: LD_INT 22
48397: PUSH
48398: LD_VAR 0 16
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 58
48409: PUSH
48410: EMPTY
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: LD_INT 30
48418: PUSH
48419: LD_INT 32
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 30
48428: PUSH
48429: LD_INT 4
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 30
48438: PUSH
48439: LD_INT 5
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: LIST
48456: PPUSH
48457: CALL_OW 72
48461: ST_TO_ADDR
48462: GO 48686
48464: LD_INT 2
48466: DOUBLE
48467: EQUAL
48468: IFTRUE 48472
48470: GO 48534
48472: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48473: LD_ADDR_VAR 0 12
48477: PUSH
48478: LD_VAR 0 18
48482: PPUSH
48483: LD_INT 22
48485: PUSH
48486: LD_VAR 0 16
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: PUSH
48498: LD_INT 30
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 30
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: LIST
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PPUSH
48527: CALL_OW 72
48531: ST_TO_ADDR
48532: GO 48686
48534: LD_INT 3
48536: DOUBLE
48537: EQUAL
48538: IFTRUE 48542
48540: GO 48604
48542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48543: LD_ADDR_VAR 0 12
48547: PUSH
48548: LD_VAR 0 18
48552: PPUSH
48553: LD_INT 22
48555: PUSH
48556: LD_VAR 0 16
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 30
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 30
48580: PUSH
48581: LD_INT 3
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: LIST
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PPUSH
48597: CALL_OW 72
48601: ST_TO_ADDR
48602: GO 48686
48604: LD_INT 4
48606: DOUBLE
48607: EQUAL
48608: IFTRUE 48612
48610: GO 48685
48612: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48613: LD_ADDR_VAR 0 12
48617: PUSH
48618: LD_VAR 0 18
48622: PPUSH
48623: LD_INT 22
48625: PUSH
48626: LD_VAR 0 16
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: LD_INT 30
48640: PUSH
48641: LD_INT 6
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 30
48650: PUSH
48651: LD_INT 7
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 30
48660: PUSH
48661: LD_INT 8
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PPUSH
48678: CALL_OW 72
48682: ST_TO_ADDR
48683: GO 48686
48685: POP
// if i = 1 then
48686: LD_VAR 0 8
48690: PUSH
48691: LD_INT 1
48693: EQUAL
48694: IFFALSE 48805
// begin tmp := [ ] ;
48696: LD_ADDR_VAR 0 19
48700: PUSH
48701: EMPTY
48702: ST_TO_ADDR
// for j in f do
48703: LD_ADDR_VAR 0 9
48707: PUSH
48708: LD_VAR 0 12
48712: PUSH
48713: FOR_IN
48714: IFFALSE 48787
// if GetBType ( j ) = b_bunker then
48716: LD_VAR 0 9
48720: PPUSH
48721: CALL_OW 266
48725: PUSH
48726: LD_INT 32
48728: EQUAL
48729: IFFALSE 48756
// tmp := Insert ( tmp , 1 , j ) else
48731: LD_ADDR_VAR 0 19
48735: PUSH
48736: LD_VAR 0 19
48740: PPUSH
48741: LD_INT 1
48743: PPUSH
48744: LD_VAR 0 9
48748: PPUSH
48749: CALL_OW 2
48753: ST_TO_ADDR
48754: GO 48785
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48756: LD_ADDR_VAR 0 19
48760: PUSH
48761: LD_VAR 0 19
48765: PPUSH
48766: LD_VAR 0 19
48770: PUSH
48771: LD_INT 1
48773: PLUS
48774: PPUSH
48775: LD_VAR 0 9
48779: PPUSH
48780: CALL_OW 2
48784: ST_TO_ADDR
48785: GO 48713
48787: POP
48788: POP
// if tmp then
48789: LD_VAR 0 19
48793: IFFALSE 48805
// f := tmp ;
48795: LD_ADDR_VAR 0 12
48799: PUSH
48800: LD_VAR 0 19
48804: ST_TO_ADDR
// end ; x := personel [ i ] ;
48805: LD_ADDR_VAR 0 13
48809: PUSH
48810: LD_VAR 0 6
48814: PUSH
48815: LD_VAR 0 8
48819: ARRAY
48820: ST_TO_ADDR
// if x = - 1 then
48821: LD_VAR 0 13
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: EQUAL
48830: IFFALSE 49039
// begin for j in f do
48832: LD_ADDR_VAR 0 9
48836: PUSH
48837: LD_VAR 0 12
48841: PUSH
48842: FOR_IN
48843: IFFALSE 49035
// repeat InitHc ;
48845: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48849: LD_VAR 0 9
48853: PPUSH
48854: CALL_OW 266
48858: PUSH
48859: LD_INT 5
48861: EQUAL
48862: IFFALSE 48932
// begin if UnitsInside ( j ) < 3 then
48864: LD_VAR 0 9
48868: PPUSH
48869: CALL_OW 313
48873: PUSH
48874: LD_INT 3
48876: LESS
48877: IFFALSE 48913
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48879: LD_INT 0
48881: PPUSH
48882: LD_INT 5
48884: PUSH
48885: LD_INT 8
48887: PUSH
48888: LD_INT 9
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: LIST
48895: PUSH
48896: LD_VAR 0 17
48900: ARRAY
48901: PPUSH
48902: LD_VAR 0 4
48906: PPUSH
48907: CALL_OW 380
48911: GO 48930
// PrepareHuman ( false , i , skill ) ;
48913: LD_INT 0
48915: PPUSH
48916: LD_VAR 0 8
48920: PPUSH
48921: LD_VAR 0 4
48925: PPUSH
48926: CALL_OW 380
// end else
48930: GO 48949
// PrepareHuman ( false , i , skill ) ;
48932: LD_INT 0
48934: PPUSH
48935: LD_VAR 0 8
48939: PPUSH
48940: LD_VAR 0 4
48944: PPUSH
48945: CALL_OW 380
// un := CreateHuman ;
48949: LD_ADDR_VAR 0 14
48953: PUSH
48954: CALL_OW 44
48958: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48959: LD_ADDR_VAR 0 7
48963: PUSH
48964: LD_VAR 0 7
48968: PPUSH
48969: LD_INT 1
48971: PPUSH
48972: LD_VAR 0 14
48976: PPUSH
48977: CALL_OW 2
48981: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48982: LD_VAR 0 14
48986: PPUSH
48987: LD_VAR 0 9
48991: PPUSH
48992: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48996: LD_VAR 0 9
49000: PPUSH
49001: CALL_OW 313
49005: PUSH
49006: LD_INT 6
49008: EQUAL
49009: PUSH
49010: LD_VAR 0 9
49014: PPUSH
49015: CALL_OW 266
49019: PUSH
49020: LD_INT 32
49022: PUSH
49023: LD_INT 31
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: IN
49030: OR
49031: IFFALSE 48845
49033: GO 48842
49035: POP
49036: POP
// end else
49037: GO 49419
// for j = 1 to x do
49039: LD_ADDR_VAR 0 9
49043: PUSH
49044: DOUBLE
49045: LD_INT 1
49047: DEC
49048: ST_TO_ADDR
49049: LD_VAR 0 13
49053: PUSH
49054: FOR_TO
49055: IFFALSE 49417
// begin InitHc ;
49057: CALL_OW 19
// if not f then
49061: LD_VAR 0 12
49065: NOT
49066: IFFALSE 49155
// begin PrepareHuman ( false , i , skill ) ;
49068: LD_INT 0
49070: PPUSH
49071: LD_VAR 0 8
49075: PPUSH
49076: LD_VAR 0 4
49080: PPUSH
49081: CALL_OW 380
// un := CreateHuman ;
49085: LD_ADDR_VAR 0 14
49089: PUSH
49090: CALL_OW 44
49094: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49095: LD_ADDR_VAR 0 7
49099: PUSH
49100: LD_VAR 0 7
49104: PPUSH
49105: LD_INT 1
49107: PPUSH
49108: LD_VAR 0 14
49112: PPUSH
49113: CALL_OW 2
49117: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49118: LD_VAR 0 14
49122: PPUSH
49123: LD_VAR 0 1
49127: PPUSH
49128: CALL_OW 250
49132: PPUSH
49133: LD_VAR 0 1
49137: PPUSH
49138: CALL_OW 251
49142: PPUSH
49143: LD_INT 10
49145: PPUSH
49146: LD_INT 0
49148: PPUSH
49149: CALL_OW 50
// continue ;
49153: GO 49054
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49155: LD_VAR 0 12
49159: PUSH
49160: LD_INT 1
49162: ARRAY
49163: PPUSH
49164: CALL_OW 313
49168: PUSH
49169: LD_VAR 0 12
49173: PUSH
49174: LD_INT 1
49176: ARRAY
49177: PPUSH
49178: CALL_OW 266
49182: PUSH
49183: LD_INT 32
49185: PUSH
49186: LD_INT 31
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: IN
49193: AND
49194: PUSH
49195: LD_VAR 0 12
49199: PUSH
49200: LD_INT 1
49202: ARRAY
49203: PPUSH
49204: CALL_OW 313
49208: PUSH
49209: LD_INT 6
49211: EQUAL
49212: OR
49213: IFFALSE 49233
// f := Delete ( f , 1 ) ;
49215: LD_ADDR_VAR 0 12
49219: PUSH
49220: LD_VAR 0 12
49224: PPUSH
49225: LD_INT 1
49227: PPUSH
49228: CALL_OW 3
49232: ST_TO_ADDR
// if not f then
49233: LD_VAR 0 12
49237: NOT
49238: IFFALSE 49256
// begin x := x + 2 ;
49240: LD_ADDR_VAR 0 13
49244: PUSH
49245: LD_VAR 0 13
49249: PUSH
49250: LD_INT 2
49252: PLUS
49253: ST_TO_ADDR
// continue ;
49254: GO 49054
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49256: LD_VAR 0 12
49260: PUSH
49261: LD_INT 1
49263: ARRAY
49264: PPUSH
49265: CALL_OW 266
49269: PUSH
49270: LD_INT 5
49272: EQUAL
49273: IFFALSE 49347
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49275: LD_VAR 0 12
49279: PUSH
49280: LD_INT 1
49282: ARRAY
49283: PPUSH
49284: CALL_OW 313
49288: PUSH
49289: LD_INT 3
49291: LESS
49292: IFFALSE 49328
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49294: LD_INT 0
49296: PPUSH
49297: LD_INT 5
49299: PUSH
49300: LD_INT 8
49302: PUSH
49303: LD_INT 9
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: LIST
49310: PUSH
49311: LD_VAR 0 17
49315: ARRAY
49316: PPUSH
49317: LD_VAR 0 4
49321: PPUSH
49322: CALL_OW 380
49326: GO 49345
// PrepareHuman ( false , i , skill ) ;
49328: LD_INT 0
49330: PPUSH
49331: LD_VAR 0 8
49335: PPUSH
49336: LD_VAR 0 4
49340: PPUSH
49341: CALL_OW 380
// end else
49345: GO 49364
// PrepareHuman ( false , i , skill ) ;
49347: LD_INT 0
49349: PPUSH
49350: LD_VAR 0 8
49354: PPUSH
49355: LD_VAR 0 4
49359: PPUSH
49360: CALL_OW 380
// un := CreateHuman ;
49364: LD_ADDR_VAR 0 14
49368: PUSH
49369: CALL_OW 44
49373: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49374: LD_ADDR_VAR 0 7
49378: PUSH
49379: LD_VAR 0 7
49383: PPUSH
49384: LD_INT 1
49386: PPUSH
49387: LD_VAR 0 14
49391: PPUSH
49392: CALL_OW 2
49396: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49397: LD_VAR 0 14
49401: PPUSH
49402: LD_VAR 0 12
49406: PUSH
49407: LD_INT 1
49409: ARRAY
49410: PPUSH
49411: CALL_OW 52
// end ;
49415: GO 49054
49417: POP
49418: POP
// end ;
49419: GO 48356
49421: POP
49422: POP
// result := result ^ buildings ;
49423: LD_ADDR_VAR 0 7
49427: PUSH
49428: LD_VAR 0 7
49432: PUSH
49433: LD_VAR 0 18
49437: ADD
49438: ST_TO_ADDR
// end else
49439: GO 49582
// begin for i = 1 to personel do
49441: LD_ADDR_VAR 0 8
49445: PUSH
49446: DOUBLE
49447: LD_INT 1
49449: DEC
49450: ST_TO_ADDR
49451: LD_VAR 0 6
49455: PUSH
49456: FOR_TO
49457: IFFALSE 49580
// begin if i > 4 then
49459: LD_VAR 0 8
49463: PUSH
49464: LD_INT 4
49466: GREATER
49467: IFFALSE 49471
// break ;
49469: GO 49580
// x := personel [ i ] ;
49471: LD_ADDR_VAR 0 13
49475: PUSH
49476: LD_VAR 0 6
49480: PUSH
49481: LD_VAR 0 8
49485: ARRAY
49486: ST_TO_ADDR
// if x = - 1 then
49487: LD_VAR 0 13
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: EQUAL
49496: IFFALSE 49500
// continue ;
49498: GO 49456
// PrepareHuman ( false , i , skill ) ;
49500: LD_INT 0
49502: PPUSH
49503: LD_VAR 0 8
49507: PPUSH
49508: LD_VAR 0 4
49512: PPUSH
49513: CALL_OW 380
// un := CreateHuman ;
49517: LD_ADDR_VAR 0 14
49521: PUSH
49522: CALL_OW 44
49526: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49527: LD_VAR 0 14
49531: PPUSH
49532: LD_VAR 0 1
49536: PPUSH
49537: CALL_OW 250
49541: PPUSH
49542: LD_VAR 0 1
49546: PPUSH
49547: CALL_OW 251
49551: PPUSH
49552: LD_INT 10
49554: PPUSH
49555: LD_INT 0
49557: PPUSH
49558: CALL_OW 50
// result := result ^ un ;
49562: LD_ADDR_VAR 0 7
49566: PUSH
49567: LD_VAR 0 7
49571: PUSH
49572: LD_VAR 0 14
49576: ADD
49577: ST_TO_ADDR
// end ;
49578: GO 49456
49580: POP
49581: POP
// end ; end ;
49582: LD_VAR 0 7
49586: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49587: LD_INT 0
49589: PPUSH
49590: PPUSH
49591: PPUSH
49592: PPUSH
49593: PPUSH
49594: PPUSH
49595: PPUSH
49596: PPUSH
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
49603: PPUSH
49604: PPUSH
// result := false ;
49605: LD_ADDR_VAR 0 3
49609: PUSH
49610: LD_INT 0
49612: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49613: LD_VAR 0 1
49617: NOT
49618: PUSH
49619: LD_VAR 0 1
49623: PPUSH
49624: CALL_OW 266
49628: PUSH
49629: LD_INT 32
49631: PUSH
49632: LD_INT 33
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: IN
49639: NOT
49640: OR
49641: IFFALSE 49645
// exit ;
49643: GO 50754
// nat := GetNation ( tower ) ;
49645: LD_ADDR_VAR 0 12
49649: PUSH
49650: LD_VAR 0 1
49654: PPUSH
49655: CALL_OW 248
49659: ST_TO_ADDR
// side := GetSide ( tower ) ;
49660: LD_ADDR_VAR 0 16
49664: PUSH
49665: LD_VAR 0 1
49669: PPUSH
49670: CALL_OW 255
49674: ST_TO_ADDR
// x := GetX ( tower ) ;
49675: LD_ADDR_VAR 0 10
49679: PUSH
49680: LD_VAR 0 1
49684: PPUSH
49685: CALL_OW 250
49689: ST_TO_ADDR
// y := GetY ( tower ) ;
49690: LD_ADDR_VAR 0 11
49694: PUSH
49695: LD_VAR 0 1
49699: PPUSH
49700: CALL_OW 251
49704: ST_TO_ADDR
// if not x or not y then
49705: LD_VAR 0 10
49709: NOT
49710: PUSH
49711: LD_VAR 0 11
49715: NOT
49716: OR
49717: IFFALSE 49721
// exit ;
49719: GO 50754
// weapon := 0 ;
49721: LD_ADDR_VAR 0 18
49725: PUSH
49726: LD_INT 0
49728: ST_TO_ADDR
// fac_list := [ ] ;
49729: LD_ADDR_VAR 0 17
49733: PUSH
49734: EMPTY
49735: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49736: LD_ADDR_VAR 0 6
49740: PUSH
49741: LD_VAR 0 1
49745: PPUSH
49746: CALL_OW 274
49750: PPUSH
49751: LD_VAR 0 2
49755: PPUSH
49756: LD_INT 0
49758: PPUSH
49759: CALL 47325 0 3
49763: PPUSH
49764: LD_INT 30
49766: PUSH
49767: LD_INT 3
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PPUSH
49774: CALL_OW 72
49778: ST_TO_ADDR
// if not factories then
49779: LD_VAR 0 6
49783: NOT
49784: IFFALSE 49788
// exit ;
49786: GO 50754
// for i in factories do
49788: LD_ADDR_VAR 0 8
49792: PUSH
49793: LD_VAR 0 6
49797: PUSH
49798: FOR_IN
49799: IFFALSE 49824
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49801: LD_ADDR_VAR 0 17
49805: PUSH
49806: LD_VAR 0 17
49810: PUSH
49811: LD_VAR 0 8
49815: PPUSH
49816: CALL_OW 478
49820: UNION
49821: ST_TO_ADDR
49822: GO 49798
49824: POP
49825: POP
// if not fac_list then
49826: LD_VAR 0 17
49830: NOT
49831: IFFALSE 49835
// exit ;
49833: GO 50754
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49835: LD_ADDR_VAR 0 5
49839: PUSH
49840: LD_INT 4
49842: PUSH
49843: LD_INT 5
49845: PUSH
49846: LD_INT 9
49848: PUSH
49849: LD_INT 10
49851: PUSH
49852: LD_INT 6
49854: PUSH
49855: LD_INT 7
49857: PUSH
49858: LD_INT 11
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 27
49872: PUSH
49873: LD_INT 28
49875: PUSH
49876: LD_INT 26
49878: PUSH
49879: LD_INT 30
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 43
49890: PUSH
49891: LD_INT 44
49893: PUSH
49894: LD_INT 46
49896: PUSH
49897: LD_INT 45
49899: PUSH
49900: LD_INT 47
49902: PUSH
49903: LD_INT 49
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: LIST
49918: PUSH
49919: LD_VAR 0 12
49923: ARRAY
49924: ST_TO_ADDR
// list := list isect fac_list ;
49925: LD_ADDR_VAR 0 5
49929: PUSH
49930: LD_VAR 0 5
49934: PUSH
49935: LD_VAR 0 17
49939: ISECT
49940: ST_TO_ADDR
// if not list then
49941: LD_VAR 0 5
49945: NOT
49946: IFFALSE 49950
// exit ;
49948: GO 50754
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49950: LD_VAR 0 12
49954: PUSH
49955: LD_INT 3
49957: EQUAL
49958: PUSH
49959: LD_INT 49
49961: PUSH
49962: LD_VAR 0 5
49966: IN
49967: AND
49968: PUSH
49969: LD_INT 31
49971: PPUSH
49972: LD_VAR 0 16
49976: PPUSH
49977: CALL_OW 321
49981: PUSH
49982: LD_INT 2
49984: EQUAL
49985: AND
49986: IFFALSE 50046
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49988: LD_INT 22
49990: PUSH
49991: LD_VAR 0 16
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 35
50002: PUSH
50003: LD_INT 49
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 91
50012: PUSH
50013: LD_VAR 0 1
50017: PUSH
50018: LD_INT 10
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: PPUSH
50031: CALL_OW 69
50035: NOT
50036: IFFALSE 50046
// weapon := ru_time_lapser ;
50038: LD_ADDR_VAR 0 18
50042: PUSH
50043: LD_INT 49
50045: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50046: LD_VAR 0 12
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: IN
50061: PUSH
50062: LD_INT 11
50064: PUSH
50065: LD_VAR 0 5
50069: IN
50070: PUSH
50071: LD_INT 30
50073: PUSH
50074: LD_VAR 0 5
50078: IN
50079: OR
50080: AND
50081: PUSH
50082: LD_INT 6
50084: PPUSH
50085: LD_VAR 0 16
50089: PPUSH
50090: CALL_OW 321
50094: PUSH
50095: LD_INT 2
50097: EQUAL
50098: AND
50099: IFFALSE 50264
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50101: LD_INT 22
50103: PUSH
50104: LD_VAR 0 16
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 35
50118: PUSH
50119: LD_INT 11
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 35
50128: PUSH
50129: LD_INT 30
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 91
50143: PUSH
50144: LD_VAR 0 1
50148: PUSH
50149: LD_INT 18
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: LIST
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: LIST
50161: PPUSH
50162: CALL_OW 69
50166: NOT
50167: PUSH
50168: LD_INT 22
50170: PUSH
50171: LD_VAR 0 16
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: LD_INT 30
50185: PUSH
50186: LD_INT 32
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 30
50195: PUSH
50196: LD_INT 33
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 91
50210: PUSH
50211: LD_VAR 0 1
50215: PUSH
50216: LD_INT 12
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: LIST
50228: PUSH
50229: EMPTY
50230: LIST
50231: PPUSH
50232: CALL_OW 69
50236: PUSH
50237: LD_INT 2
50239: GREATER
50240: AND
50241: IFFALSE 50264
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50243: LD_ADDR_VAR 0 18
50247: PUSH
50248: LD_INT 11
50250: PUSH
50251: LD_INT 30
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_VAR 0 12
50262: ARRAY
50263: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50264: LD_VAR 0 18
50268: NOT
50269: PUSH
50270: LD_INT 40
50272: PPUSH
50273: LD_VAR 0 16
50277: PPUSH
50278: CALL_OW 321
50282: PUSH
50283: LD_INT 2
50285: EQUAL
50286: AND
50287: PUSH
50288: LD_INT 7
50290: PUSH
50291: LD_VAR 0 5
50295: IN
50296: PUSH
50297: LD_INT 28
50299: PUSH
50300: LD_VAR 0 5
50304: IN
50305: OR
50306: PUSH
50307: LD_INT 45
50309: PUSH
50310: LD_VAR 0 5
50314: IN
50315: OR
50316: AND
50317: IFFALSE 50571
// begin hex := GetHexInfo ( x , y ) ;
50319: LD_ADDR_VAR 0 4
50323: PUSH
50324: LD_VAR 0 10
50328: PPUSH
50329: LD_VAR 0 11
50333: PPUSH
50334: CALL_OW 546
50338: ST_TO_ADDR
// if hex [ 1 ] then
50339: LD_VAR 0 4
50343: PUSH
50344: LD_INT 1
50346: ARRAY
50347: IFFALSE 50351
// exit ;
50349: GO 50754
// height := hex [ 2 ] ;
50351: LD_ADDR_VAR 0 15
50355: PUSH
50356: LD_VAR 0 4
50360: PUSH
50361: LD_INT 2
50363: ARRAY
50364: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50365: LD_ADDR_VAR 0 14
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: LD_INT 3
50378: PUSH
50379: LD_INT 5
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: ST_TO_ADDR
// for i in tmp do
50388: LD_ADDR_VAR 0 8
50392: PUSH
50393: LD_VAR 0 14
50397: PUSH
50398: FOR_IN
50399: IFFALSE 50569
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50401: LD_ADDR_VAR 0 9
50405: PUSH
50406: LD_VAR 0 10
50410: PPUSH
50411: LD_VAR 0 8
50415: PPUSH
50416: LD_INT 5
50418: PPUSH
50419: CALL_OW 272
50423: PUSH
50424: LD_VAR 0 11
50428: PPUSH
50429: LD_VAR 0 8
50433: PPUSH
50434: LD_INT 5
50436: PPUSH
50437: CALL_OW 273
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50446: LD_VAR 0 9
50450: PUSH
50451: LD_INT 1
50453: ARRAY
50454: PPUSH
50455: LD_VAR 0 9
50459: PUSH
50460: LD_INT 2
50462: ARRAY
50463: PPUSH
50464: CALL_OW 488
50468: IFFALSE 50567
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50470: LD_ADDR_VAR 0 4
50474: PUSH
50475: LD_VAR 0 9
50479: PUSH
50480: LD_INT 1
50482: ARRAY
50483: PPUSH
50484: LD_VAR 0 9
50488: PUSH
50489: LD_INT 2
50491: ARRAY
50492: PPUSH
50493: CALL_OW 546
50497: ST_TO_ADDR
// if hex [ 1 ] then
50498: LD_VAR 0 4
50502: PUSH
50503: LD_INT 1
50505: ARRAY
50506: IFFALSE 50510
// continue ;
50508: GO 50398
// h := hex [ 2 ] ;
50510: LD_ADDR_VAR 0 13
50514: PUSH
50515: LD_VAR 0 4
50519: PUSH
50520: LD_INT 2
50522: ARRAY
50523: ST_TO_ADDR
// if h + 7 < height then
50524: LD_VAR 0 13
50528: PUSH
50529: LD_INT 7
50531: PLUS
50532: PUSH
50533: LD_VAR 0 15
50537: LESS
50538: IFFALSE 50567
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50540: LD_ADDR_VAR 0 18
50544: PUSH
50545: LD_INT 7
50547: PUSH
50548: LD_INT 28
50550: PUSH
50551: LD_INT 45
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: LIST
50558: PUSH
50559: LD_VAR 0 12
50563: ARRAY
50564: ST_TO_ADDR
// break ;
50565: GO 50569
// end ; end ; end ;
50567: GO 50398
50569: POP
50570: POP
// end ; if not weapon then
50571: LD_VAR 0 18
50575: NOT
50576: IFFALSE 50636
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50578: LD_ADDR_VAR 0 5
50582: PUSH
50583: LD_VAR 0 5
50587: PUSH
50588: LD_INT 11
50590: PUSH
50591: LD_INT 30
50593: PUSH
50594: LD_INT 49
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: LIST
50601: DIFF
50602: ST_TO_ADDR
// if not list then
50603: LD_VAR 0 5
50607: NOT
50608: IFFALSE 50612
// exit ;
50610: GO 50754
// weapon := list [ rand ( 1 , list ) ] ;
50612: LD_ADDR_VAR 0 18
50616: PUSH
50617: LD_VAR 0 5
50621: PUSH
50622: LD_INT 1
50624: PPUSH
50625: LD_VAR 0 5
50629: PPUSH
50630: CALL_OW 12
50634: ARRAY
50635: ST_TO_ADDR
// end ; if weapon then
50636: LD_VAR 0 18
50640: IFFALSE 50754
// begin tmp := CostOfWeapon ( weapon ) ;
50642: LD_ADDR_VAR 0 14
50646: PUSH
50647: LD_VAR 0 18
50651: PPUSH
50652: CALL_OW 451
50656: ST_TO_ADDR
// j := GetBase ( tower ) ;
50657: LD_ADDR_VAR 0 9
50661: PUSH
50662: LD_VAR 0 1
50666: PPUSH
50667: CALL_OW 274
50671: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50672: LD_VAR 0 9
50676: PPUSH
50677: LD_INT 1
50679: PPUSH
50680: CALL_OW 275
50684: PUSH
50685: LD_VAR 0 14
50689: PUSH
50690: LD_INT 1
50692: ARRAY
50693: GREATEREQUAL
50694: PUSH
50695: LD_VAR 0 9
50699: PPUSH
50700: LD_INT 2
50702: PPUSH
50703: CALL_OW 275
50707: PUSH
50708: LD_VAR 0 14
50712: PUSH
50713: LD_INT 2
50715: ARRAY
50716: GREATEREQUAL
50717: AND
50718: PUSH
50719: LD_VAR 0 9
50723: PPUSH
50724: LD_INT 3
50726: PPUSH
50727: CALL_OW 275
50731: PUSH
50732: LD_VAR 0 14
50736: PUSH
50737: LD_INT 3
50739: ARRAY
50740: GREATEREQUAL
50741: AND
50742: IFFALSE 50754
// result := weapon ;
50744: LD_ADDR_VAR 0 3
50748: PUSH
50749: LD_VAR 0 18
50753: ST_TO_ADDR
// end ; end ;
50754: LD_VAR 0 3
50758: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50759: LD_INT 0
50761: PPUSH
50762: PPUSH
// result := true ;
50763: LD_ADDR_VAR 0 3
50767: PUSH
50768: LD_INT 1
50770: ST_TO_ADDR
// if array1 = array2 then
50771: LD_VAR 0 1
50775: PUSH
50776: LD_VAR 0 2
50780: EQUAL
50781: IFFALSE 50841
// begin for i = 1 to array1 do
50783: LD_ADDR_VAR 0 4
50787: PUSH
50788: DOUBLE
50789: LD_INT 1
50791: DEC
50792: ST_TO_ADDR
50793: LD_VAR 0 1
50797: PUSH
50798: FOR_TO
50799: IFFALSE 50837
// if array1 [ i ] <> array2 [ i ] then
50801: LD_VAR 0 1
50805: PUSH
50806: LD_VAR 0 4
50810: ARRAY
50811: PUSH
50812: LD_VAR 0 2
50816: PUSH
50817: LD_VAR 0 4
50821: ARRAY
50822: NONEQUAL
50823: IFFALSE 50835
// begin result := false ;
50825: LD_ADDR_VAR 0 3
50829: PUSH
50830: LD_INT 0
50832: ST_TO_ADDR
// break ;
50833: GO 50837
// end ;
50835: GO 50798
50837: POP
50838: POP
// end else
50839: GO 50849
// result := false ;
50841: LD_ADDR_VAR 0 3
50845: PUSH
50846: LD_INT 0
50848: ST_TO_ADDR
// end ;
50849: LD_VAR 0 3
50853: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50854: LD_INT 0
50856: PPUSH
50857: PPUSH
// if not array1 or not array2 then
50858: LD_VAR 0 1
50862: NOT
50863: PUSH
50864: LD_VAR 0 2
50868: NOT
50869: OR
50870: IFFALSE 50874
// exit ;
50872: GO 50938
// result := true ;
50874: LD_ADDR_VAR 0 3
50878: PUSH
50879: LD_INT 1
50881: ST_TO_ADDR
// for i = 1 to array1 do
50882: LD_ADDR_VAR 0 4
50886: PUSH
50887: DOUBLE
50888: LD_INT 1
50890: DEC
50891: ST_TO_ADDR
50892: LD_VAR 0 1
50896: PUSH
50897: FOR_TO
50898: IFFALSE 50936
// if array1 [ i ] <> array2 [ i ] then
50900: LD_VAR 0 1
50904: PUSH
50905: LD_VAR 0 4
50909: ARRAY
50910: PUSH
50911: LD_VAR 0 2
50915: PUSH
50916: LD_VAR 0 4
50920: ARRAY
50921: NONEQUAL
50922: IFFALSE 50934
// begin result := false ;
50924: LD_ADDR_VAR 0 3
50928: PUSH
50929: LD_INT 0
50931: ST_TO_ADDR
// break ;
50932: GO 50936
// end ;
50934: GO 50897
50936: POP
50937: POP
// end ;
50938: LD_VAR 0 3
50942: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50943: LD_INT 0
50945: PPUSH
50946: PPUSH
50947: PPUSH
// pom := GetBase ( fac ) ;
50948: LD_ADDR_VAR 0 5
50952: PUSH
50953: LD_VAR 0 1
50957: PPUSH
50958: CALL_OW 274
50962: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50963: LD_ADDR_VAR 0 4
50967: PUSH
50968: LD_VAR 0 2
50972: PUSH
50973: LD_INT 1
50975: ARRAY
50976: PPUSH
50977: LD_VAR 0 2
50981: PUSH
50982: LD_INT 2
50984: ARRAY
50985: PPUSH
50986: LD_VAR 0 2
50990: PUSH
50991: LD_INT 3
50993: ARRAY
50994: PPUSH
50995: LD_VAR 0 2
50999: PUSH
51000: LD_INT 4
51002: ARRAY
51003: PPUSH
51004: CALL_OW 449
51008: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51009: LD_ADDR_VAR 0 3
51013: PUSH
51014: LD_VAR 0 5
51018: PPUSH
51019: LD_INT 1
51021: PPUSH
51022: CALL_OW 275
51026: PUSH
51027: LD_VAR 0 4
51031: PUSH
51032: LD_INT 1
51034: ARRAY
51035: GREATEREQUAL
51036: PUSH
51037: LD_VAR 0 5
51041: PPUSH
51042: LD_INT 2
51044: PPUSH
51045: CALL_OW 275
51049: PUSH
51050: LD_VAR 0 4
51054: PUSH
51055: LD_INT 2
51057: ARRAY
51058: GREATEREQUAL
51059: AND
51060: PUSH
51061: LD_VAR 0 5
51065: PPUSH
51066: LD_INT 3
51068: PPUSH
51069: CALL_OW 275
51073: PUSH
51074: LD_VAR 0 4
51078: PUSH
51079: LD_INT 3
51081: ARRAY
51082: GREATEREQUAL
51083: AND
51084: ST_TO_ADDR
// end ;
51085: LD_VAR 0 3
51089: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51090: LD_INT 0
51092: PPUSH
51093: PPUSH
51094: PPUSH
51095: PPUSH
// pom := GetBase ( building ) ;
51096: LD_ADDR_VAR 0 3
51100: PUSH
51101: LD_VAR 0 1
51105: PPUSH
51106: CALL_OW 274
51110: ST_TO_ADDR
// if not pom then
51111: LD_VAR 0 3
51115: NOT
51116: IFFALSE 51120
// exit ;
51118: GO 51290
// btype := GetBType ( building ) ;
51120: LD_ADDR_VAR 0 5
51124: PUSH
51125: LD_VAR 0 1
51129: PPUSH
51130: CALL_OW 266
51134: ST_TO_ADDR
// if btype = b_armoury then
51135: LD_VAR 0 5
51139: PUSH
51140: LD_INT 4
51142: EQUAL
51143: IFFALSE 51153
// btype := b_barracks ;
51145: LD_ADDR_VAR 0 5
51149: PUSH
51150: LD_INT 5
51152: ST_TO_ADDR
// if btype = b_depot then
51153: LD_VAR 0 5
51157: PUSH
51158: LD_INT 0
51160: EQUAL
51161: IFFALSE 51171
// btype := b_warehouse ;
51163: LD_ADDR_VAR 0 5
51167: PUSH
51168: LD_INT 1
51170: ST_TO_ADDR
// if btype = b_workshop then
51171: LD_VAR 0 5
51175: PUSH
51176: LD_INT 2
51178: EQUAL
51179: IFFALSE 51189
// btype := b_factory ;
51181: LD_ADDR_VAR 0 5
51185: PUSH
51186: LD_INT 3
51188: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51189: LD_ADDR_VAR 0 4
51193: PUSH
51194: LD_VAR 0 5
51198: PPUSH
51199: LD_VAR 0 1
51203: PPUSH
51204: CALL_OW 248
51208: PPUSH
51209: CALL_OW 450
51213: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51214: LD_ADDR_VAR 0 2
51218: PUSH
51219: LD_VAR 0 3
51223: PPUSH
51224: LD_INT 1
51226: PPUSH
51227: CALL_OW 275
51231: PUSH
51232: LD_VAR 0 4
51236: PUSH
51237: LD_INT 1
51239: ARRAY
51240: GREATEREQUAL
51241: PUSH
51242: LD_VAR 0 3
51246: PPUSH
51247: LD_INT 2
51249: PPUSH
51250: CALL_OW 275
51254: PUSH
51255: LD_VAR 0 4
51259: PUSH
51260: LD_INT 2
51262: ARRAY
51263: GREATEREQUAL
51264: AND
51265: PUSH
51266: LD_VAR 0 3
51270: PPUSH
51271: LD_INT 3
51273: PPUSH
51274: CALL_OW 275
51278: PUSH
51279: LD_VAR 0 4
51283: PUSH
51284: LD_INT 3
51286: ARRAY
51287: GREATEREQUAL
51288: AND
51289: ST_TO_ADDR
// end ;
51290: LD_VAR 0 2
51294: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51295: LD_INT 0
51297: PPUSH
51298: PPUSH
51299: PPUSH
// pom := GetBase ( building ) ;
51300: LD_ADDR_VAR 0 4
51304: PUSH
51305: LD_VAR 0 1
51309: PPUSH
51310: CALL_OW 274
51314: ST_TO_ADDR
// if not pom then
51315: LD_VAR 0 4
51319: NOT
51320: IFFALSE 51324
// exit ;
51322: GO 51425
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51324: LD_ADDR_VAR 0 5
51328: PUSH
51329: LD_VAR 0 2
51333: PPUSH
51334: LD_VAR 0 1
51338: PPUSH
51339: CALL_OW 248
51343: PPUSH
51344: CALL_OW 450
51348: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51349: LD_ADDR_VAR 0 3
51353: PUSH
51354: LD_VAR 0 4
51358: PPUSH
51359: LD_INT 1
51361: PPUSH
51362: CALL_OW 275
51366: PUSH
51367: LD_VAR 0 5
51371: PUSH
51372: LD_INT 1
51374: ARRAY
51375: GREATEREQUAL
51376: PUSH
51377: LD_VAR 0 4
51381: PPUSH
51382: LD_INT 2
51384: PPUSH
51385: CALL_OW 275
51389: PUSH
51390: LD_VAR 0 5
51394: PUSH
51395: LD_INT 2
51397: ARRAY
51398: GREATEREQUAL
51399: AND
51400: PUSH
51401: LD_VAR 0 4
51405: PPUSH
51406: LD_INT 3
51408: PPUSH
51409: CALL_OW 275
51413: PUSH
51414: LD_VAR 0 5
51418: PUSH
51419: LD_INT 3
51421: ARRAY
51422: GREATEREQUAL
51423: AND
51424: ST_TO_ADDR
// end ;
51425: LD_VAR 0 3
51429: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51430: LD_INT 0
51432: PPUSH
51433: PPUSH
51434: PPUSH
51435: PPUSH
51436: PPUSH
51437: PPUSH
51438: PPUSH
51439: PPUSH
51440: PPUSH
51441: PPUSH
51442: PPUSH
// result := false ;
51443: LD_ADDR_VAR 0 8
51447: PUSH
51448: LD_INT 0
51450: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51451: LD_VAR 0 5
51455: NOT
51456: PUSH
51457: LD_VAR 0 1
51461: NOT
51462: OR
51463: PUSH
51464: LD_VAR 0 2
51468: NOT
51469: OR
51470: PUSH
51471: LD_VAR 0 3
51475: NOT
51476: OR
51477: IFFALSE 51481
// exit ;
51479: GO 52295
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51481: LD_ADDR_VAR 0 14
51485: PUSH
51486: LD_VAR 0 1
51490: PPUSH
51491: LD_VAR 0 2
51495: PPUSH
51496: LD_VAR 0 3
51500: PPUSH
51501: LD_VAR 0 4
51505: PPUSH
51506: LD_VAR 0 5
51510: PUSH
51511: LD_INT 1
51513: ARRAY
51514: PPUSH
51515: CALL_OW 248
51519: PPUSH
51520: LD_INT 0
51522: PPUSH
51523: CALL 53528 0 6
51527: ST_TO_ADDR
// if not hexes then
51528: LD_VAR 0 14
51532: NOT
51533: IFFALSE 51537
// exit ;
51535: GO 52295
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51537: LD_ADDR_VAR 0 17
51541: PUSH
51542: LD_VAR 0 5
51546: PPUSH
51547: LD_INT 22
51549: PUSH
51550: LD_VAR 0 13
51554: PPUSH
51555: CALL_OW 255
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: LD_INT 30
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 30
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: LIST
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PPUSH
51596: CALL_OW 72
51600: ST_TO_ADDR
// for i = 1 to hexes do
51601: LD_ADDR_VAR 0 9
51605: PUSH
51606: DOUBLE
51607: LD_INT 1
51609: DEC
51610: ST_TO_ADDR
51611: LD_VAR 0 14
51615: PUSH
51616: FOR_TO
51617: IFFALSE 52293
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51619: LD_ADDR_VAR 0 13
51623: PUSH
51624: LD_VAR 0 14
51628: PUSH
51629: LD_VAR 0 9
51633: ARRAY
51634: PUSH
51635: LD_INT 1
51637: ARRAY
51638: PPUSH
51639: LD_VAR 0 14
51643: PUSH
51644: LD_VAR 0 9
51648: ARRAY
51649: PUSH
51650: LD_INT 2
51652: ARRAY
51653: PPUSH
51654: CALL_OW 428
51658: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51659: LD_VAR 0 14
51663: PUSH
51664: LD_VAR 0 9
51668: ARRAY
51669: PUSH
51670: LD_INT 1
51672: ARRAY
51673: PPUSH
51674: LD_VAR 0 14
51678: PUSH
51679: LD_VAR 0 9
51683: ARRAY
51684: PUSH
51685: LD_INT 2
51687: ARRAY
51688: PPUSH
51689: CALL_OW 351
51693: PUSH
51694: LD_VAR 0 14
51698: PUSH
51699: LD_VAR 0 9
51703: ARRAY
51704: PUSH
51705: LD_INT 1
51707: ARRAY
51708: PPUSH
51709: LD_VAR 0 14
51713: PUSH
51714: LD_VAR 0 9
51718: ARRAY
51719: PUSH
51720: LD_INT 2
51722: ARRAY
51723: PPUSH
51724: CALL_OW 488
51728: NOT
51729: OR
51730: PUSH
51731: LD_VAR 0 13
51735: PPUSH
51736: CALL_OW 247
51740: PUSH
51741: LD_INT 3
51743: EQUAL
51744: OR
51745: IFFALSE 51751
// exit ;
51747: POP
51748: POP
51749: GO 52295
// if not tmp then
51751: LD_VAR 0 13
51755: NOT
51756: IFFALSE 51760
// continue ;
51758: GO 51616
// result := true ;
51760: LD_ADDR_VAR 0 8
51764: PUSH
51765: LD_INT 1
51767: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51768: LD_VAR 0 6
51772: PUSH
51773: LD_VAR 0 13
51777: PPUSH
51778: CALL_OW 247
51782: PUSH
51783: LD_INT 2
51785: EQUAL
51786: AND
51787: PUSH
51788: LD_VAR 0 13
51792: PPUSH
51793: CALL_OW 263
51797: PUSH
51798: LD_INT 1
51800: EQUAL
51801: AND
51802: IFFALSE 51966
// begin if IsDrivenBy ( tmp ) then
51804: LD_VAR 0 13
51808: PPUSH
51809: CALL_OW 311
51813: IFFALSE 51817
// continue ;
51815: GO 51616
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51817: LD_VAR 0 6
51821: PPUSH
51822: LD_INT 3
51824: PUSH
51825: LD_INT 60
51827: PUSH
51828: EMPTY
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: LD_INT 55
51840: PUSH
51841: EMPTY
51842: LIST
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PPUSH
51852: CALL_OW 72
51856: IFFALSE 51964
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51858: LD_ADDR_VAR 0 18
51862: PUSH
51863: LD_VAR 0 6
51867: PPUSH
51868: LD_INT 3
51870: PUSH
51871: LD_INT 60
51873: PUSH
51874: EMPTY
51875: LIST
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 3
51883: PUSH
51884: LD_INT 55
51886: PUSH
51887: EMPTY
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PPUSH
51898: CALL_OW 72
51902: PUSH
51903: LD_INT 1
51905: ARRAY
51906: ST_TO_ADDR
// if IsInUnit ( driver ) then
51907: LD_VAR 0 18
51911: PPUSH
51912: CALL_OW 310
51916: IFFALSE 51927
// ComExit ( driver ) ;
51918: LD_VAR 0 18
51922: PPUSH
51923: CALL 77289 0 1
// AddComEnterUnit ( driver , tmp ) ;
51927: LD_VAR 0 18
51931: PPUSH
51932: LD_VAR 0 13
51936: PPUSH
51937: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51941: LD_VAR 0 18
51945: PPUSH
51946: LD_VAR 0 7
51950: PPUSH
51951: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51955: LD_VAR 0 18
51959: PPUSH
51960: CALL_OW 181
// end ; continue ;
51964: GO 51616
// end ; if not cleaners or not tmp in cleaners then
51966: LD_VAR 0 6
51970: NOT
51971: PUSH
51972: LD_VAR 0 13
51976: PUSH
51977: LD_VAR 0 6
51981: IN
51982: NOT
51983: OR
51984: IFFALSE 52291
// begin if dep then
51986: LD_VAR 0 17
51990: IFFALSE 52126
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51992: LD_ADDR_VAR 0 16
51996: PUSH
51997: LD_VAR 0 17
52001: PUSH
52002: LD_INT 1
52004: ARRAY
52005: PPUSH
52006: CALL_OW 250
52010: PPUSH
52011: LD_VAR 0 17
52015: PUSH
52016: LD_INT 1
52018: ARRAY
52019: PPUSH
52020: CALL_OW 254
52024: PPUSH
52025: LD_INT 5
52027: PPUSH
52028: CALL_OW 272
52032: PUSH
52033: LD_VAR 0 17
52037: PUSH
52038: LD_INT 1
52040: ARRAY
52041: PPUSH
52042: CALL_OW 251
52046: PPUSH
52047: LD_VAR 0 17
52051: PUSH
52052: LD_INT 1
52054: ARRAY
52055: PPUSH
52056: CALL_OW 254
52060: PPUSH
52061: LD_INT 5
52063: PPUSH
52064: CALL_OW 273
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52073: LD_VAR 0 16
52077: PUSH
52078: LD_INT 1
52080: ARRAY
52081: PPUSH
52082: LD_VAR 0 16
52086: PUSH
52087: LD_INT 2
52089: ARRAY
52090: PPUSH
52091: CALL_OW 488
52095: IFFALSE 52126
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52097: LD_VAR 0 13
52101: PPUSH
52102: LD_VAR 0 16
52106: PUSH
52107: LD_INT 1
52109: ARRAY
52110: PPUSH
52111: LD_VAR 0 16
52115: PUSH
52116: LD_INT 2
52118: ARRAY
52119: PPUSH
52120: CALL_OW 111
// continue ;
52124: GO 51616
// end ; end ; r := GetDir ( tmp ) ;
52126: LD_ADDR_VAR 0 15
52130: PUSH
52131: LD_VAR 0 13
52135: PPUSH
52136: CALL_OW 254
52140: ST_TO_ADDR
// if r = 5 then
52141: LD_VAR 0 15
52145: PUSH
52146: LD_INT 5
52148: EQUAL
52149: IFFALSE 52159
// r := 0 ;
52151: LD_ADDR_VAR 0 15
52155: PUSH
52156: LD_INT 0
52158: ST_TO_ADDR
// for j = r to 5 do
52159: LD_ADDR_VAR 0 10
52163: PUSH
52164: DOUBLE
52165: LD_VAR 0 15
52169: DEC
52170: ST_TO_ADDR
52171: LD_INT 5
52173: PUSH
52174: FOR_TO
52175: IFFALSE 52289
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52177: LD_ADDR_VAR 0 11
52181: PUSH
52182: LD_VAR 0 13
52186: PPUSH
52187: CALL_OW 250
52191: PPUSH
52192: LD_VAR 0 10
52196: PPUSH
52197: LD_INT 2
52199: PPUSH
52200: CALL_OW 272
52204: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52205: LD_ADDR_VAR 0 12
52209: PUSH
52210: LD_VAR 0 13
52214: PPUSH
52215: CALL_OW 251
52219: PPUSH
52220: LD_VAR 0 10
52224: PPUSH
52225: LD_INT 2
52227: PPUSH
52228: CALL_OW 273
52232: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52233: LD_VAR 0 11
52237: PPUSH
52238: LD_VAR 0 12
52242: PPUSH
52243: CALL_OW 488
52247: PUSH
52248: LD_VAR 0 11
52252: PPUSH
52253: LD_VAR 0 12
52257: PPUSH
52258: CALL_OW 428
52262: NOT
52263: AND
52264: IFFALSE 52287
// begin ComMoveXY ( tmp , _x , _y ) ;
52266: LD_VAR 0 13
52270: PPUSH
52271: LD_VAR 0 11
52275: PPUSH
52276: LD_VAR 0 12
52280: PPUSH
52281: CALL_OW 111
// break ;
52285: GO 52289
// end ; end ;
52287: GO 52174
52289: POP
52290: POP
// end ; end ;
52291: GO 51616
52293: POP
52294: POP
// end ;
52295: LD_VAR 0 8
52299: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52300: LD_INT 0
52302: PPUSH
// result := true ;
52303: LD_ADDR_VAR 0 3
52307: PUSH
52308: LD_INT 1
52310: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52311: LD_VAR 0 2
52315: PUSH
52316: LD_INT 24
52318: DOUBLE
52319: EQUAL
52320: IFTRUE 52330
52322: LD_INT 33
52324: DOUBLE
52325: EQUAL
52326: IFTRUE 52330
52328: GO 52355
52330: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52331: LD_ADDR_VAR 0 3
52335: PUSH
52336: LD_INT 32
52338: PPUSH
52339: LD_VAR 0 1
52343: PPUSH
52344: CALL_OW 321
52348: PUSH
52349: LD_INT 2
52351: EQUAL
52352: ST_TO_ADDR
52353: GO 52671
52355: LD_INT 20
52357: DOUBLE
52358: EQUAL
52359: IFTRUE 52363
52361: GO 52388
52363: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52364: LD_ADDR_VAR 0 3
52368: PUSH
52369: LD_INT 6
52371: PPUSH
52372: LD_VAR 0 1
52376: PPUSH
52377: CALL_OW 321
52381: PUSH
52382: LD_INT 2
52384: EQUAL
52385: ST_TO_ADDR
52386: GO 52671
52388: LD_INT 22
52390: DOUBLE
52391: EQUAL
52392: IFTRUE 52402
52394: LD_INT 36
52396: DOUBLE
52397: EQUAL
52398: IFTRUE 52402
52400: GO 52427
52402: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52403: LD_ADDR_VAR 0 3
52407: PUSH
52408: LD_INT 15
52410: PPUSH
52411: LD_VAR 0 1
52415: PPUSH
52416: CALL_OW 321
52420: PUSH
52421: LD_INT 2
52423: EQUAL
52424: ST_TO_ADDR
52425: GO 52671
52427: LD_INT 30
52429: DOUBLE
52430: EQUAL
52431: IFTRUE 52435
52433: GO 52460
52435: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52436: LD_ADDR_VAR 0 3
52440: PUSH
52441: LD_INT 20
52443: PPUSH
52444: LD_VAR 0 1
52448: PPUSH
52449: CALL_OW 321
52453: PUSH
52454: LD_INT 2
52456: EQUAL
52457: ST_TO_ADDR
52458: GO 52671
52460: LD_INT 28
52462: DOUBLE
52463: EQUAL
52464: IFTRUE 52474
52466: LD_INT 21
52468: DOUBLE
52469: EQUAL
52470: IFTRUE 52474
52472: GO 52499
52474: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52475: LD_ADDR_VAR 0 3
52479: PUSH
52480: LD_INT 21
52482: PPUSH
52483: LD_VAR 0 1
52487: PPUSH
52488: CALL_OW 321
52492: PUSH
52493: LD_INT 2
52495: EQUAL
52496: ST_TO_ADDR
52497: GO 52671
52499: LD_INT 16
52501: DOUBLE
52502: EQUAL
52503: IFTRUE 52507
52505: GO 52532
52507: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52508: LD_ADDR_VAR 0 3
52512: PUSH
52513: LD_INT 84
52515: PPUSH
52516: LD_VAR 0 1
52520: PPUSH
52521: CALL_OW 321
52525: PUSH
52526: LD_INT 2
52528: EQUAL
52529: ST_TO_ADDR
52530: GO 52671
52532: LD_INT 19
52534: DOUBLE
52535: EQUAL
52536: IFTRUE 52546
52538: LD_INT 23
52540: DOUBLE
52541: EQUAL
52542: IFTRUE 52546
52544: GO 52571
52546: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52547: LD_ADDR_VAR 0 3
52551: PUSH
52552: LD_INT 83
52554: PPUSH
52555: LD_VAR 0 1
52559: PPUSH
52560: CALL_OW 321
52564: PUSH
52565: LD_INT 2
52567: EQUAL
52568: ST_TO_ADDR
52569: GO 52671
52571: LD_INT 17
52573: DOUBLE
52574: EQUAL
52575: IFTRUE 52579
52577: GO 52604
52579: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52580: LD_ADDR_VAR 0 3
52584: PUSH
52585: LD_INT 39
52587: PPUSH
52588: LD_VAR 0 1
52592: PPUSH
52593: CALL_OW 321
52597: PUSH
52598: LD_INT 2
52600: EQUAL
52601: ST_TO_ADDR
52602: GO 52671
52604: LD_INT 18
52606: DOUBLE
52607: EQUAL
52608: IFTRUE 52612
52610: GO 52637
52612: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52613: LD_ADDR_VAR 0 3
52617: PUSH
52618: LD_INT 40
52620: PPUSH
52621: LD_VAR 0 1
52625: PPUSH
52626: CALL_OW 321
52630: PUSH
52631: LD_INT 2
52633: EQUAL
52634: ST_TO_ADDR
52635: GO 52671
52637: LD_INT 27
52639: DOUBLE
52640: EQUAL
52641: IFTRUE 52645
52643: GO 52670
52645: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52646: LD_ADDR_VAR 0 3
52650: PUSH
52651: LD_INT 35
52653: PPUSH
52654: LD_VAR 0 1
52658: PPUSH
52659: CALL_OW 321
52663: PUSH
52664: LD_INT 2
52666: EQUAL
52667: ST_TO_ADDR
52668: GO 52671
52670: POP
// end ;
52671: LD_VAR 0 3
52675: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52676: LD_INT 0
52678: PPUSH
52679: PPUSH
52680: PPUSH
52681: PPUSH
52682: PPUSH
52683: PPUSH
52684: PPUSH
52685: PPUSH
52686: PPUSH
52687: PPUSH
52688: PPUSH
// result := false ;
52689: LD_ADDR_VAR 0 6
52693: PUSH
52694: LD_INT 0
52696: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52697: LD_VAR 0 1
52701: NOT
52702: PUSH
52703: LD_VAR 0 1
52707: PPUSH
52708: CALL_OW 266
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: IN
52723: NOT
52724: OR
52725: PUSH
52726: LD_VAR 0 2
52730: NOT
52731: OR
52732: PUSH
52733: LD_VAR 0 5
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: LD_INT 3
52749: PUSH
52750: LD_INT 4
52752: PUSH
52753: LD_INT 5
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: IN
52764: NOT
52765: OR
52766: PUSH
52767: LD_VAR 0 3
52771: PPUSH
52772: LD_VAR 0 4
52776: PPUSH
52777: CALL_OW 488
52781: NOT
52782: OR
52783: IFFALSE 52787
// exit ;
52785: GO 53523
// side := GetSide ( depot ) ;
52787: LD_ADDR_VAR 0 9
52791: PUSH
52792: LD_VAR 0 1
52796: PPUSH
52797: CALL_OW 255
52801: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52802: LD_VAR 0 9
52806: PPUSH
52807: LD_VAR 0 2
52811: PPUSH
52812: CALL 52300 0 2
52816: NOT
52817: IFFALSE 52821
// exit ;
52819: GO 53523
// pom := GetBase ( depot ) ;
52821: LD_ADDR_VAR 0 10
52825: PUSH
52826: LD_VAR 0 1
52830: PPUSH
52831: CALL_OW 274
52835: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52836: LD_ADDR_VAR 0 11
52840: PUSH
52841: LD_VAR 0 2
52845: PPUSH
52846: LD_VAR 0 1
52850: PPUSH
52851: CALL_OW 248
52855: PPUSH
52856: CALL_OW 450
52860: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52861: LD_VAR 0 10
52865: PPUSH
52866: LD_INT 1
52868: PPUSH
52869: CALL_OW 275
52873: PUSH
52874: LD_VAR 0 11
52878: PUSH
52879: LD_INT 1
52881: ARRAY
52882: GREATEREQUAL
52883: PUSH
52884: LD_VAR 0 10
52888: PPUSH
52889: LD_INT 2
52891: PPUSH
52892: CALL_OW 275
52896: PUSH
52897: LD_VAR 0 11
52901: PUSH
52902: LD_INT 2
52904: ARRAY
52905: GREATEREQUAL
52906: AND
52907: PUSH
52908: LD_VAR 0 10
52912: PPUSH
52913: LD_INT 3
52915: PPUSH
52916: CALL_OW 275
52920: PUSH
52921: LD_VAR 0 11
52925: PUSH
52926: LD_INT 3
52928: ARRAY
52929: GREATEREQUAL
52930: AND
52931: NOT
52932: IFFALSE 52936
// exit ;
52934: GO 53523
// if GetBType ( depot ) = b_depot then
52936: LD_VAR 0 1
52940: PPUSH
52941: CALL_OW 266
52945: PUSH
52946: LD_INT 0
52948: EQUAL
52949: IFFALSE 52961
// dist := 28 else
52951: LD_ADDR_VAR 0 14
52955: PUSH
52956: LD_INT 28
52958: ST_TO_ADDR
52959: GO 52969
// dist := 36 ;
52961: LD_ADDR_VAR 0 14
52965: PUSH
52966: LD_INT 36
52968: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52969: LD_VAR 0 1
52973: PPUSH
52974: LD_VAR 0 3
52978: PPUSH
52979: LD_VAR 0 4
52983: PPUSH
52984: CALL_OW 297
52988: PUSH
52989: LD_VAR 0 14
52993: GREATER
52994: IFFALSE 52998
// exit ;
52996: GO 53523
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52998: LD_ADDR_VAR 0 12
53002: PUSH
53003: LD_VAR 0 2
53007: PPUSH
53008: LD_VAR 0 3
53012: PPUSH
53013: LD_VAR 0 4
53017: PPUSH
53018: LD_VAR 0 5
53022: PPUSH
53023: LD_VAR 0 1
53027: PPUSH
53028: CALL_OW 248
53032: PPUSH
53033: LD_INT 0
53035: PPUSH
53036: CALL 53528 0 6
53040: ST_TO_ADDR
// if not hexes then
53041: LD_VAR 0 12
53045: NOT
53046: IFFALSE 53050
// exit ;
53048: GO 53523
// hex := GetHexInfo ( x , y ) ;
53050: LD_ADDR_VAR 0 15
53054: PUSH
53055: LD_VAR 0 3
53059: PPUSH
53060: LD_VAR 0 4
53064: PPUSH
53065: CALL_OW 546
53069: ST_TO_ADDR
// if hex [ 1 ] then
53070: LD_VAR 0 15
53074: PUSH
53075: LD_INT 1
53077: ARRAY
53078: IFFALSE 53082
// exit ;
53080: GO 53523
// height := hex [ 2 ] ;
53082: LD_ADDR_VAR 0 13
53086: PUSH
53087: LD_VAR 0 15
53091: PUSH
53092: LD_INT 2
53094: ARRAY
53095: ST_TO_ADDR
// for i = 1 to hexes do
53096: LD_ADDR_VAR 0 7
53100: PUSH
53101: DOUBLE
53102: LD_INT 1
53104: DEC
53105: ST_TO_ADDR
53106: LD_VAR 0 12
53110: PUSH
53111: FOR_TO
53112: IFFALSE 53442
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53114: LD_VAR 0 12
53118: PUSH
53119: LD_VAR 0 7
53123: ARRAY
53124: PUSH
53125: LD_INT 1
53127: ARRAY
53128: PPUSH
53129: LD_VAR 0 12
53133: PUSH
53134: LD_VAR 0 7
53138: ARRAY
53139: PUSH
53140: LD_INT 2
53142: ARRAY
53143: PPUSH
53144: CALL_OW 488
53148: NOT
53149: PUSH
53150: LD_VAR 0 12
53154: PUSH
53155: LD_VAR 0 7
53159: ARRAY
53160: PUSH
53161: LD_INT 1
53163: ARRAY
53164: PPUSH
53165: LD_VAR 0 12
53169: PUSH
53170: LD_VAR 0 7
53174: ARRAY
53175: PUSH
53176: LD_INT 2
53178: ARRAY
53179: PPUSH
53180: CALL_OW 428
53184: PUSH
53185: LD_INT 0
53187: GREATER
53188: OR
53189: PUSH
53190: LD_VAR 0 12
53194: PUSH
53195: LD_VAR 0 7
53199: ARRAY
53200: PUSH
53201: LD_INT 1
53203: ARRAY
53204: PPUSH
53205: LD_VAR 0 12
53209: PUSH
53210: LD_VAR 0 7
53214: ARRAY
53215: PUSH
53216: LD_INT 2
53218: ARRAY
53219: PPUSH
53220: CALL_OW 351
53224: OR
53225: IFFALSE 53231
// exit ;
53227: POP
53228: POP
53229: GO 53523
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53231: LD_ADDR_VAR 0 8
53235: PUSH
53236: LD_VAR 0 12
53240: PUSH
53241: LD_VAR 0 7
53245: ARRAY
53246: PUSH
53247: LD_INT 1
53249: ARRAY
53250: PPUSH
53251: LD_VAR 0 12
53255: PUSH
53256: LD_VAR 0 7
53260: ARRAY
53261: PUSH
53262: LD_INT 2
53264: ARRAY
53265: PPUSH
53266: CALL_OW 546
53270: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53271: LD_VAR 0 8
53275: PUSH
53276: LD_INT 1
53278: ARRAY
53279: PUSH
53280: LD_VAR 0 8
53284: PUSH
53285: LD_INT 2
53287: ARRAY
53288: PUSH
53289: LD_VAR 0 13
53293: PUSH
53294: LD_INT 2
53296: PLUS
53297: GREATER
53298: OR
53299: PUSH
53300: LD_VAR 0 8
53304: PUSH
53305: LD_INT 2
53307: ARRAY
53308: PUSH
53309: LD_VAR 0 13
53313: PUSH
53314: LD_INT 2
53316: MINUS
53317: LESS
53318: OR
53319: PUSH
53320: LD_VAR 0 8
53324: PUSH
53325: LD_INT 3
53327: ARRAY
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: LD_INT 8
53334: PUSH
53335: LD_INT 9
53337: PUSH
53338: LD_INT 10
53340: PUSH
53341: LD_INT 11
53343: PUSH
53344: LD_INT 12
53346: PUSH
53347: LD_INT 13
53349: PUSH
53350: LD_INT 16
53352: PUSH
53353: LD_INT 17
53355: PUSH
53356: LD_INT 18
53358: PUSH
53359: LD_INT 19
53361: PUSH
53362: LD_INT 20
53364: PUSH
53365: LD_INT 21
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: IN
53383: NOT
53384: OR
53385: PUSH
53386: LD_VAR 0 8
53390: PUSH
53391: LD_INT 5
53393: ARRAY
53394: NOT
53395: OR
53396: PUSH
53397: LD_VAR 0 8
53401: PUSH
53402: LD_INT 6
53404: ARRAY
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 7
53414: PUSH
53415: LD_INT 9
53417: PUSH
53418: LD_INT 10
53420: PUSH
53421: LD_INT 11
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: IN
53432: NOT
53433: OR
53434: IFFALSE 53440
// exit ;
53436: POP
53437: POP
53438: GO 53523
// end ;
53440: GO 53111
53442: POP
53443: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53444: LD_VAR 0 9
53448: PPUSH
53449: LD_VAR 0 3
53453: PPUSH
53454: LD_VAR 0 4
53458: PPUSH
53459: LD_INT 20
53461: PPUSH
53462: CALL 45475 0 4
53466: PUSH
53467: LD_INT 4
53469: ARRAY
53470: IFFALSE 53474
// exit ;
53472: GO 53523
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53474: LD_VAR 0 2
53478: PUSH
53479: LD_INT 29
53481: PUSH
53482: LD_INT 30
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: IN
53489: PUSH
53490: LD_VAR 0 3
53494: PPUSH
53495: LD_VAR 0 4
53499: PPUSH
53500: LD_VAR 0 9
53504: PPUSH
53505: CALL_OW 440
53509: NOT
53510: AND
53511: IFFALSE 53515
// exit ;
53513: GO 53523
// result := true ;
53515: LD_ADDR_VAR 0 6
53519: PUSH
53520: LD_INT 1
53522: ST_TO_ADDR
// end ;
53523: LD_VAR 0 6
53527: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53528: LD_INT 0
53530: PPUSH
53531: PPUSH
53532: PPUSH
53533: PPUSH
53534: PPUSH
53535: PPUSH
53536: PPUSH
53537: PPUSH
53538: PPUSH
53539: PPUSH
53540: PPUSH
53541: PPUSH
53542: PPUSH
53543: PPUSH
53544: PPUSH
53545: PPUSH
53546: PPUSH
53547: PPUSH
53548: PPUSH
53549: PPUSH
53550: PPUSH
53551: PPUSH
53552: PPUSH
53553: PPUSH
53554: PPUSH
53555: PPUSH
53556: PPUSH
53557: PPUSH
53558: PPUSH
53559: PPUSH
53560: PPUSH
53561: PPUSH
53562: PPUSH
53563: PPUSH
53564: PPUSH
53565: PPUSH
53566: PPUSH
53567: PPUSH
53568: PPUSH
53569: PPUSH
53570: PPUSH
53571: PPUSH
53572: PPUSH
53573: PPUSH
53574: PPUSH
53575: PPUSH
53576: PPUSH
53577: PPUSH
53578: PPUSH
53579: PPUSH
53580: PPUSH
53581: PPUSH
53582: PPUSH
53583: PPUSH
53584: PPUSH
53585: PPUSH
53586: PPUSH
53587: PPUSH
// result = [ ] ;
53588: LD_ADDR_VAR 0 7
53592: PUSH
53593: EMPTY
53594: ST_TO_ADDR
// temp_list = [ ] ;
53595: LD_ADDR_VAR 0 9
53599: PUSH
53600: EMPTY
53601: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53602: LD_VAR 0 4
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: LD_INT 3
53618: PUSH
53619: LD_INT 4
53621: PUSH
53622: LD_INT 5
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: IN
53633: NOT
53634: PUSH
53635: LD_VAR 0 1
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: IN
53650: PUSH
53651: LD_VAR 0 5
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: LD_INT 3
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: LIST
53669: IN
53670: NOT
53671: AND
53672: OR
53673: IFFALSE 53677
// exit ;
53675: GO 72068
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53677: LD_VAR 0 1
53681: PUSH
53682: LD_INT 6
53684: PUSH
53685: LD_INT 7
53687: PUSH
53688: LD_INT 8
53690: PUSH
53691: LD_INT 13
53693: PUSH
53694: LD_INT 12
53696: PUSH
53697: LD_INT 15
53699: PUSH
53700: LD_INT 11
53702: PUSH
53703: LD_INT 14
53705: PUSH
53706: LD_INT 10
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: IN
53720: IFFALSE 53730
// btype = b_lab ;
53722: LD_ADDR_VAR 0 1
53726: PUSH
53727: LD_INT 6
53729: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53730: LD_VAR 0 6
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: LIST
53748: IN
53749: NOT
53750: PUSH
53751: LD_VAR 0 1
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: LD_INT 6
53770: PUSH
53771: LD_INT 36
53773: PUSH
53774: LD_INT 4
53776: PUSH
53777: LD_INT 5
53779: PUSH
53780: LD_INT 31
53782: PUSH
53783: LD_INT 32
53785: PUSH
53786: LD_INT 33
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: IN
53802: NOT
53803: PUSH
53804: LD_VAR 0 6
53808: PUSH
53809: LD_INT 1
53811: EQUAL
53812: AND
53813: OR
53814: PUSH
53815: LD_VAR 0 1
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: IN
53830: NOT
53831: PUSH
53832: LD_VAR 0 6
53836: PUSH
53837: LD_INT 2
53839: EQUAL
53840: AND
53841: OR
53842: IFFALSE 53852
// mode = 0 ;
53844: LD_ADDR_VAR 0 6
53848: PUSH
53849: LD_INT 0
53851: ST_TO_ADDR
// case mode of 0 :
53852: LD_VAR 0 6
53856: PUSH
53857: LD_INT 0
53859: DOUBLE
53860: EQUAL
53861: IFTRUE 53865
53863: GO 65318
53865: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53866: LD_ADDR_VAR 0 11
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 2
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 3
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 3
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54059: LD_ADDR_VAR 0 12
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 3
54227: NEG
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54255: LD_ADDR_VAR 0 13
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 3
54414: NEG
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: NEG
54427: PUSH
54428: LD_INT 3
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54454: LD_ADDR_VAR 0 14
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: LD_INT 3
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 3
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54650: LD_ADDR_VAR 0 15
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 3
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54843: LD_ADDR_VAR 0 16
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: LD_INT 2
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 3
55000: PUSH
55001: LD_INT 3
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55036: LD_ADDR_VAR 0 17
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55266: LD_ADDR_VAR 0 18
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 2
55442: NEG
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55496: LD_ADDR_VAR 0 19
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: NEG
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55726: LD_ADDR_VAR 0 20
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: LD_INT 2
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 2
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 2
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: LD_INT 2
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55956: LD_ADDR_VAR 0 21
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56186: LD_ADDR_VAR 0 22
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: NEG
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56416: LD_ADDR_VAR 0 23
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 2
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: LD_INT 3
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 3
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56696: LD_ADDR_VAR 0 24
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 2
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: NEG
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 3
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56972: LD_ADDR_VAR 0 25
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 2
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: LD_INT 3
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57246: LD_ADDR_VAR 0 26
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 2
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 2
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: LD_INT 3
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57522: LD_ADDR_VAR 0 27
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 2
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 3
57755: NEG
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 3
57767: NEG
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57802: LD_ADDR_VAR 0 28
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: LD_INT 2
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 2
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: LD_INT 2
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: LD_INT 3
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: LD_INT 3
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 3
58037: NEG
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: LD_INT 2
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58084: LD_ADDR_VAR 0 29
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 2
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 2
58250: NEG
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 2
58274: NEG
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 3
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: LD_INT 3
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: LD_INT 2
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 3
58328: NEG
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58363: LD_ADDR_VAR 0 30
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 3
58606: NEG
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58641: LD_ADDR_VAR 0 31
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 2
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: LD_INT 2
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: LD_INT 3
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 3
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: LD_INT 3
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 3
58884: NEG
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58919: LD_ADDR_VAR 0 32
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: LD_INT 3
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: LD_INT 2
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 3
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: LD_INT 3
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: LD_INT 1
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59197: LD_ADDR_VAR 0 33
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 2
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 2
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: NEG
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 3
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: LD_INT 3
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 3
59441: NEG
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59476: LD_ADDR_VAR 0 34
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 2
59601: PUSH
59602: LD_INT 2
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 2
59632: NEG
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: LD_INT 2
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: LD_INT 3
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: LD_INT 2
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: NEG
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 3
59721: NEG
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59756: LD_ADDR_VAR 0 35
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 2
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59868: LD_ADDR_VAR 0 36
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59980: LD_ADDR_VAR 0 37
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60092: LD_ADDR_VAR 0 38
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 1
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: LD_INT 1
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60204: LD_ADDR_VAR 0 39
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60316: LD_ADDR_VAR 0 40
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60428: LD_ADDR_VAR 0 41
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: LD_INT 2
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: LD_INT 2
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: NEG
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: NEG
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: NEG
60619: PUSH
60620: LD_INT 3
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 2
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 3
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 3
60661: PUSH
60662: LD_INT 2
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 3
60671: PUSH
60672: LD_INT 3
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: LD_INT 3
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 2
60691: NEG
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 3
60702: NEG
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 3
60725: NEG
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 3
60737: NEG
60738: PUSH
60739: LD_INT 3
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60778: LD_ADDR_VAR 0 42
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: LD_INT 1
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: LD_INT 0
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: NEG
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: LD_INT 2
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: LD_INT 2
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 2
60944: NEG
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 2
60956: NEG
60957: PUSH
60958: LD_INT 2
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: LD_INT 3
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: LD_INT 3
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: LD_INT 2
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 3
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 3
61024: PUSH
61025: LD_INT 3
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 3
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 3
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: LD_INT 2
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 3
61087: NEG
61088: PUSH
61089: LD_INT 3
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61128: LD_ADDR_VAR 0 43
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: NEG
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: LD_INT 2
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 2
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 2
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 3
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: LD_INT 3
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: LD_INT 2
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 3
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 3
61424: NEG
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 3
61435: NEG
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61476: LD_ADDR_VAR 0 44
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: LD_INT 1
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 2
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 2
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: LD_INT 2
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: NEG
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: LD_INT 2
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: NEG
61667: PUSH
61668: LD_INT 3
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 3
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 3
61709: PUSH
61710: LD_INT 2
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: LD_INT 3
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 2
61729: PUSH
61730: LD_INT 3
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 2
61739: NEG
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 3
61750: NEG
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 3
61785: NEG
61786: PUSH
61787: LD_INT 3
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61826: LD_ADDR_VAR 0 45
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: LD_INT 2
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 2
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 2
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 2
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 2
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 2
62004: NEG
62005: PUSH
62006: LD_INT 2
62008: NEG
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 2
62016: NEG
62017: PUSH
62018: LD_INT 3
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: LD_INT 3
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: LD_INT 3
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: LD_INT 2
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 3
62062: PUSH
62063: LD_INT 2
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 3
62072: PUSH
62073: LD_INT 3
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 2
62082: PUSH
62083: LD_INT 3
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: LD_INT 3
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 3
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 3
62123: NEG
62124: PUSH
62125: LD_INT 2
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 3
62135: NEG
62136: PUSH
62137: LD_INT 3
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62176: LD_ADDR_VAR 0 46
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: LD_INT 1
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: LD_INT 2
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: LD_INT 2
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: LD_INT 2
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: LD_INT 2
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 2
62342: NEG
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 1
62365: NEG
62366: PUSH
62367: LD_INT 3
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: LD_INT 3
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: LD_INT 2
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 3
62420: PUSH
62421: LD_INT 1
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: LD_INT 3
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: LD_INT 3
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 2
62461: NEG
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 3
62472: NEG
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 3
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62524: LD_ADDR_VAR 0 47
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: LD_INT 2
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 2
62639: NEG
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: LD_INT 2
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62675: LD_ADDR_VAR 0 48
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 1
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_INT 2
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 2
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: LD_INT 1
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62822: LD_ADDR_VAR 0 49
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 2
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 2
62924: PUSH
62925: LD_INT 1
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 2
62934: PUSH
62935: LD_INT 2
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: LD_INT 2
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62966: LD_ADDR_VAR 0 50
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: LD_INT 1
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 1
63035: NEG
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 2
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 2
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: LD_INT 2
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: NEG
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63110: LD_ADDR_VAR 0 51
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 1
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: LD_INT 1
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: LD_INT 1
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 1
63168: NEG
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: LD_INT 2
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: LD_INT 1
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 2
63233: NEG
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63257: LD_ADDR_VAR 0 52
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 0
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: LD_INT 2
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 2
63361: NEG
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 2
63372: NEG
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 2
63384: NEG
63385: PUSH
63386: LD_INT 2
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63408: LD_ADDR_VAR 0 53
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: LD_INT 1
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 1
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: LD_INT 1
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: LD_INT 2
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: LD_INT 2
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 2
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 2
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 2
63543: PUSH
63544: LD_INT 2
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: LD_INT 2
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: NEG
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 2
63584: NEG
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: NEG
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 2
63607: NEG
63608: PUSH
63609: LD_INT 2
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63638: LD_ADDR_VAR 0 54
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: LD_INT 1
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: LD_INT 1
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: LD_INT 2
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 2
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 2
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: LD_INT 2
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: LD_INT 2
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: LD_INT 2
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 2
63814: NEG
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 2
63825: NEG
63826: PUSH
63827: LD_INT 1
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 2
63837: NEG
63838: PUSH
63839: LD_INT 2
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63868: LD_ADDR_VAR 0 55
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: LD_INT 1
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: LD_INT 2
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: LD_INT 2
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 2
64003: PUSH
64004: LD_INT 2
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: LD_INT 2
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 0
64023: PUSH
64024: LD_INT 2
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 2
64044: NEG
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 2
64055: NEG
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: LD_INT 2
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64098: LD_ADDR_VAR 0 56
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: LD_INT 1
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: LD_INT 1
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: LD_INT 1
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 1
64156: NEG
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 1
64167: NEG
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: LD_INT 2
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: LD_INT 2
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: LD_INT 1
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 2
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: PUSH
64234: LD_INT 2
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: LD_INT 2
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 0
64253: PUSH
64254: LD_INT 2
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 2
64274: NEG
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 2
64285: NEG
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 2
64297: NEG
64298: PUSH
64299: LD_INT 2
64301: NEG
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64328: LD_ADDR_VAR 0 57
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: LD_INT 1
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: LD_INT 1
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: LD_INT 1
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 1
64397: NEG
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 1
64409: NEG
64410: PUSH
64411: LD_INT 2
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: LD_INT 2
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 2
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 2
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 2
64463: PUSH
64464: LD_INT 2
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 1
64473: PUSH
64474: LD_INT 2
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: LD_INT 2
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 2
64504: NEG
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 2
64515: NEG
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 2
64527: NEG
64528: PUSH
64529: LD_INT 2
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64558: LD_ADDR_VAR 0 58
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 0
64575: PUSH
64576: LD_INT 1
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 1
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: LD_INT 1
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: LD_INT 1
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 1
64616: NEG
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 1
64639: NEG
64640: PUSH
64641: LD_INT 2
64643: NEG
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: LD_INT 2
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: LD_INT 1
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 2
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 2
64683: PUSH
64684: LD_INT 1
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 2
64693: PUSH
64694: LD_INT 2
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: LD_INT 2
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: LD_INT 2
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: LD_INT 1
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 2
64734: NEG
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 2
64745: NEG
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 2
64757: NEG
64758: PUSH
64759: LD_INT 2
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64788: LD_ADDR_VAR 0 59
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: LD_INT 1
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: LD_INT 0
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: LD_INT 1
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: LD_INT 1
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 1
64846: NEG
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 1
64857: NEG
64858: PUSH
64859: LD_INT 1
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64876: LD_ADDR_VAR 0 60
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: LD_INT 1
64896: NEG
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 1
64904: PUSH
64905: LD_INT 0
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: LD_INT 1
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: LD_INT 1
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64964: LD_ADDR_VAR 0 61
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: LD_INT 1
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: NEG
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 1
65033: NEG
65034: PUSH
65035: LD_INT 1
65037: NEG
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65052: LD_ADDR_VAR 0 62
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: LD_INT 1
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65140: LD_ADDR_VAR 0 63
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 1
65209: NEG
65210: PUSH
65211: LD_INT 1
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65228: LD_ADDR_VAR 0 64
65232: PUSH
65233: LD_INT 0
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 0
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 1
65256: PUSH
65257: LD_INT 0
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 1
65266: PUSH
65267: LD_INT 1
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: LD_INT 1
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: ST_TO_ADDR
// end ; 1 :
65316: GO 71213
65318: LD_INT 1
65320: DOUBLE
65321: EQUAL
65322: IFTRUE 65326
65324: GO 67949
65326: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65327: LD_ADDR_VAR 0 11
65331: PUSH
65332: LD_INT 1
65334: NEG
65335: PUSH
65336: LD_INT 3
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: LD_INT 3
65349: NEG
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: LD_INT 2
65360: NEG
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: LIST
65370: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65371: LD_ADDR_VAR 0 12
65375: PUSH
65376: LD_INT 2
65378: PUSH
65379: LD_INT 1
65381: NEG
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 3
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 3
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65412: LD_ADDR_VAR 0 13
65416: PUSH
65417: LD_INT 3
65419: PUSH
65420: LD_INT 2
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 3
65429: PUSH
65430: LD_INT 3
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 2
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65452: LD_ADDR_VAR 0 14
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: LD_INT 3
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: LD_INT 3
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: NEG
65480: PUSH
65481: LD_INT 2
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: LIST
65492: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65493: LD_ADDR_VAR 0 15
65497: PUSH
65498: LD_INT 2
65500: NEG
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 3
65511: NEG
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 3
65522: NEG
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: LIST
65536: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65537: LD_ADDR_VAR 0 16
65541: PUSH
65542: LD_INT 2
65544: NEG
65545: PUSH
65546: LD_INT 3
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 3
65556: NEG
65557: PUSH
65558: LD_INT 2
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 3
65568: NEG
65569: PUSH
65570: LD_INT 3
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: LIST
65582: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65583: LD_ADDR_VAR 0 17
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: LD_INT 3
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: LD_INT 3
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: LD_INT 2
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: LIST
65626: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65627: LD_ADDR_VAR 0 18
65631: PUSH
65632: LD_INT 2
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 3
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 3
65655: PUSH
65656: LD_INT 1
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: LIST
65667: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65668: LD_ADDR_VAR 0 19
65672: PUSH
65673: LD_INT 3
65675: PUSH
65676: LD_INT 2
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 3
65685: PUSH
65686: LD_INT 3
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 2
65695: PUSH
65696: LD_INT 3
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: LIST
65707: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65708: LD_ADDR_VAR 0 20
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 3
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: LD_INT 3
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: NEG
65736: PUSH
65737: LD_INT 2
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: LIST
65748: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65749: LD_ADDR_VAR 0 21
65753: PUSH
65754: LD_INT 2
65756: NEG
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 3
65767: NEG
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 3
65778: NEG
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: LIST
65792: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65793: LD_ADDR_VAR 0 22
65797: PUSH
65798: LD_INT 2
65800: NEG
65801: PUSH
65802: LD_INT 3
65804: NEG
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 3
65812: NEG
65813: PUSH
65814: LD_INT 2
65816: NEG
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 3
65824: NEG
65825: PUSH
65826: LD_INT 3
65828: NEG
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: LIST
65838: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65839: LD_ADDR_VAR 0 23
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: LD_INT 3
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: LD_INT 4
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 1
65869: PUSH
65870: LD_INT 3
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: LIST
65882: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65883: LD_ADDR_VAR 0 24
65887: PUSH
65888: LD_INT 3
65890: PUSH
65891: LD_INT 0
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 3
65900: PUSH
65901: LD_INT 1
65903: NEG
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 4
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: LIST
65923: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65924: LD_ADDR_VAR 0 25
65928: PUSH
65929: LD_INT 3
65931: PUSH
65932: LD_INT 3
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 4
65941: PUSH
65942: LD_INT 3
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 3
65951: PUSH
65952: LD_INT 4
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65964: LD_ADDR_VAR 0 26
65968: PUSH
65969: LD_INT 0
65971: PUSH
65972: LD_INT 3
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 1
65981: PUSH
65982: LD_INT 4
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: NEG
65992: PUSH
65993: LD_INT 3
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: LIST
66004: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66005: LD_ADDR_VAR 0 27
66009: PUSH
66010: LD_INT 3
66012: NEG
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 3
66023: NEG
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 4
66034: NEG
66035: PUSH
66036: LD_INT 1
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: LIST
66048: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66049: LD_ADDR_VAR 0 28
66053: PUSH
66054: LD_INT 3
66056: NEG
66057: PUSH
66058: LD_INT 3
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 3
66068: NEG
66069: PUSH
66070: LD_INT 4
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 4
66080: NEG
66081: PUSH
66082: LD_INT 3
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66095: LD_ADDR_VAR 0 29
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: LD_INT 3
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: LD_INT 3
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 1
66125: PUSH
66126: LD_INT 2
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: LD_INT 4
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: LD_INT 4
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: LD_INT 3
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: LD_INT 5
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: LD_INT 5
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: PUSH
66194: LD_INT 4
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: LD_INT 6
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: LD_INT 6
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: LD_INT 5
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66250: LD_ADDR_VAR 0 30
66254: PUSH
66255: LD_INT 2
66257: PUSH
66258: LD_INT 1
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 3
66268: PUSH
66269: LD_INT 0
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 3
66278: PUSH
66279: LD_INT 1
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 3
66288: PUSH
66289: LD_INT 1
66291: NEG
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 4
66299: PUSH
66300: LD_INT 0
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 4
66309: PUSH
66310: LD_INT 1
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 4
66319: PUSH
66320: LD_INT 1
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 5
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 5
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 5
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 6
66361: PUSH
66362: LD_INT 0
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 6
66371: PUSH
66372: LD_INT 1
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66393: LD_ADDR_VAR 0 31
66397: PUSH
66398: LD_INT 3
66400: PUSH
66401: LD_INT 2
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 3
66410: PUSH
66411: LD_INT 3
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 2
66420: PUSH
66421: LD_INT 3
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 4
66430: PUSH
66431: LD_INT 3
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 4
66440: PUSH
66441: LD_INT 4
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 3
66450: PUSH
66451: LD_INT 4
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 5
66460: PUSH
66461: LD_INT 4
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 5
66470: PUSH
66471: LD_INT 5
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 4
66480: PUSH
66481: LD_INT 5
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 6
66490: PUSH
66491: LD_INT 5
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 6
66500: PUSH
66501: LD_INT 6
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 5
66510: PUSH
66511: LD_INT 6
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66532: LD_ADDR_VAR 0 32
66536: PUSH
66537: LD_INT 1
66539: PUSH
66540: LD_INT 3
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: LD_INT 3
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 1
66559: NEG
66560: PUSH
66561: LD_INT 2
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 1
66570: PUSH
66571: LD_INT 4
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: LD_INT 4
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 1
66590: NEG
66591: PUSH
66592: LD_INT 3
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: LD_INT 5
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 0
66611: PUSH
66612: LD_INT 5
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 1
66621: NEG
66622: PUSH
66623: LD_INT 4
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 1
66632: PUSH
66633: LD_INT 6
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: LD_INT 6
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: LD_INT 5
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66675: LD_ADDR_VAR 0 33
66679: PUSH
66680: LD_INT 2
66682: NEG
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 3
66693: NEG
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 3
66704: NEG
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 3
66716: NEG
66717: PUSH
66718: LD_INT 1
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 4
66727: NEG
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 4
66738: NEG
66739: PUSH
66740: LD_INT 1
66742: NEG
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 4
66750: NEG
66751: PUSH
66752: LD_INT 1
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 5
66761: NEG
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 5
66772: NEG
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 5
66784: NEG
66785: PUSH
66786: LD_INT 1
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 6
66795: NEG
66796: PUSH
66797: LD_INT 0
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 6
66806: NEG
66807: PUSH
66808: LD_INT 1
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66830: LD_ADDR_VAR 0 34
66834: PUSH
66835: LD_INT 2
66837: NEG
66838: PUSH
66839: LD_INT 3
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 3
66849: NEG
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 3
66861: NEG
66862: PUSH
66863: LD_INT 3
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 3
66873: NEG
66874: PUSH
66875: LD_INT 4
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 4
66885: NEG
66886: PUSH
66887: LD_INT 3
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 4
66897: NEG
66898: PUSH
66899: LD_INT 4
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 4
66909: NEG
66910: PUSH
66911: LD_INT 5
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 5
66921: NEG
66922: PUSH
66923: LD_INT 4
66925: NEG
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 5
66933: NEG
66934: PUSH
66935: LD_INT 5
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 5
66945: NEG
66946: PUSH
66947: LD_INT 6
66949: NEG
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 6
66957: NEG
66958: PUSH
66959: LD_INT 5
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 6
66969: NEG
66970: PUSH
66971: LD_INT 6
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66993: LD_ADDR_VAR 0 41
66997: PUSH
66998: LD_INT 0
67000: PUSH
67001: LD_INT 2
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 1
67011: NEG
67012: PUSH
67013: LD_INT 3
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 1
67023: PUSH
67024: LD_INT 2
67026: NEG
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: LIST
67036: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67037: LD_ADDR_VAR 0 42
67041: PUSH
67042: LD_INT 2
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 2
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 3
67065: PUSH
67066: LD_INT 1
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: LIST
67077: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67078: LD_ADDR_VAR 0 43
67082: PUSH
67083: LD_INT 2
67085: PUSH
67086: LD_INT 2
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 3
67095: PUSH
67096: LD_INT 2
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 2
67105: PUSH
67106: LD_INT 3
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: LIST
67117: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67118: LD_ADDR_VAR 0 44
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: LD_INT 2
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 1
67135: PUSH
67136: LD_INT 3
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 1
67145: NEG
67146: PUSH
67147: LD_INT 2
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: LIST
67158: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67159: LD_ADDR_VAR 0 45
67163: PUSH
67164: LD_INT 2
67166: NEG
67167: PUSH
67168: LD_INT 0
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 2
67177: NEG
67178: PUSH
67179: LD_INT 1
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 3
67188: NEG
67189: PUSH
67190: LD_INT 1
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: LIST
67202: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67203: LD_ADDR_VAR 0 46
67207: PUSH
67208: LD_INT 2
67210: NEG
67211: PUSH
67212: LD_INT 2
67214: NEG
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 2
67222: NEG
67223: PUSH
67224: LD_INT 3
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 3
67234: NEG
67235: PUSH
67236: LD_INT 2
67238: NEG
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: LIST
67248: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67249: LD_ADDR_VAR 0 47
67253: PUSH
67254: LD_INT 2
67256: NEG
67257: PUSH
67258: LD_INT 3
67260: NEG
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 1
67268: NEG
67269: PUSH
67270: LD_INT 3
67272: NEG
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67282: LD_ADDR_VAR 0 48
67286: PUSH
67287: LD_INT 1
67289: PUSH
67290: LD_INT 2
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 2
67300: PUSH
67301: LD_INT 1
67303: NEG
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67313: LD_ADDR_VAR 0 49
67317: PUSH
67318: LD_INT 3
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 3
67330: PUSH
67331: LD_INT 2
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67342: LD_ADDR_VAR 0 50
67346: PUSH
67347: LD_INT 2
67349: PUSH
67350: LD_INT 3
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 1
67359: PUSH
67360: LD_INT 3
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67371: LD_ADDR_VAR 0 51
67375: PUSH
67376: LD_INT 1
67378: NEG
67379: PUSH
67380: LD_INT 2
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 2
67389: NEG
67390: PUSH
67391: LD_INT 1
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67402: LD_ADDR_VAR 0 52
67406: PUSH
67407: LD_INT 3
67409: NEG
67410: PUSH
67411: LD_INT 1
67413: NEG
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 3
67421: NEG
67422: PUSH
67423: LD_INT 2
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67435: LD_ADDR_VAR 0 53
67439: PUSH
67440: LD_INT 1
67442: NEG
67443: PUSH
67444: LD_INT 3
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: LD_INT 3
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 1
67465: PUSH
67466: LD_INT 2
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67479: LD_ADDR_VAR 0 54
67483: PUSH
67484: LD_INT 2
67486: PUSH
67487: LD_INT 1
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 3
67497: PUSH
67498: LD_INT 0
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 3
67507: PUSH
67508: LD_INT 1
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: LIST
67519: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67520: LD_ADDR_VAR 0 55
67524: PUSH
67525: LD_INT 3
67527: PUSH
67528: LD_INT 2
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 3
67537: PUSH
67538: LD_INT 3
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 2
67547: PUSH
67548: LD_INT 3
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: LIST
67559: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67560: LD_ADDR_VAR 0 56
67564: PUSH
67565: LD_INT 1
67567: PUSH
67568: LD_INT 3
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 0
67577: PUSH
67578: LD_INT 3
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 1
67587: NEG
67588: PUSH
67589: LD_INT 2
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: LIST
67600: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67601: LD_ADDR_VAR 0 57
67605: PUSH
67606: LD_INT 2
67608: NEG
67609: PUSH
67610: LD_INT 1
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 3
67619: NEG
67620: PUSH
67621: LD_INT 0
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 3
67630: NEG
67631: PUSH
67632: LD_INT 1
67634: NEG
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: LIST
67644: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67645: LD_ADDR_VAR 0 58
67649: PUSH
67650: LD_INT 2
67652: NEG
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 3
67664: NEG
67665: PUSH
67666: LD_INT 2
67668: NEG
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 3
67676: NEG
67677: PUSH
67678: LD_INT 3
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: LIST
67690: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67691: LD_ADDR_VAR 0 59
67695: PUSH
67696: LD_INT 1
67698: NEG
67699: PUSH
67700: LD_INT 2
67702: NEG
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: LD_INT 2
67713: NEG
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 1
67721: PUSH
67722: LD_INT 1
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: LIST
67734: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67735: LD_ADDR_VAR 0 60
67739: PUSH
67740: LD_INT 1
67742: PUSH
67743: LD_INT 1
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 2
67753: PUSH
67754: LD_INT 0
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 2
67763: PUSH
67764: LD_INT 1
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: LIST
67775: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67776: LD_ADDR_VAR 0 61
67780: PUSH
67781: LD_INT 2
67783: PUSH
67784: LD_INT 1
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: LD_INT 2
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 1
67803: PUSH
67804: LD_INT 2
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: LIST
67815: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67816: LD_ADDR_VAR 0 62
67820: PUSH
67821: LD_INT 1
67823: PUSH
67824: LD_INT 2
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: LD_INT 2
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 1
67843: NEG
67844: PUSH
67845: LD_INT 1
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: LIST
67856: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67857: LD_ADDR_VAR 0 63
67861: PUSH
67862: LD_INT 1
67864: NEG
67865: PUSH
67866: LD_INT 1
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 2
67875: NEG
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 2
67886: NEG
67887: PUSH
67888: LD_INT 1
67890: NEG
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: LIST
67900: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67901: LD_ADDR_VAR 0 64
67905: PUSH
67906: LD_INT 1
67908: NEG
67909: PUSH
67910: LD_INT 2
67912: NEG
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 2
67920: NEG
67921: PUSH
67922: LD_INT 1
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 2
67932: NEG
67933: PUSH
67934: LD_INT 2
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: LIST
67946: ST_TO_ADDR
// end ; 2 :
67947: GO 71213
67949: LD_INT 2
67951: DOUBLE
67952: EQUAL
67953: IFTRUE 67957
67955: GO 71212
67957: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67958: LD_ADDR_VAR 0 29
67962: PUSH
67963: LD_INT 4
67965: PUSH
67966: LD_INT 0
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 4
67975: PUSH
67976: LD_INT 1
67978: NEG
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 5
67986: PUSH
67987: LD_INT 0
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 5
67996: PUSH
67997: LD_INT 1
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 4
68006: PUSH
68007: LD_INT 1
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 3
68016: PUSH
68017: LD_INT 0
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 3
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 3
68037: PUSH
68038: LD_INT 2
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 5
68048: PUSH
68049: LD_INT 2
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 3
68058: PUSH
68059: LD_INT 3
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 3
68068: PUSH
68069: LD_INT 2
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 4
68078: PUSH
68079: LD_INT 3
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 4
68088: PUSH
68089: LD_INT 4
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 3
68098: PUSH
68099: LD_INT 4
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 2
68108: PUSH
68109: LD_INT 3
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 2
68118: PUSH
68119: LD_INT 2
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 4
68128: PUSH
68129: LD_INT 2
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 2
68138: PUSH
68139: LD_INT 4
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 0
68148: PUSH
68149: LD_INT 4
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: LD_INT 3
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 1
68168: PUSH
68169: LD_INT 4
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 1
68178: PUSH
68179: LD_INT 5
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: LD_INT 5
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 1
68198: NEG
68199: PUSH
68200: LD_INT 4
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 1
68209: NEG
68210: PUSH
68211: LD_INT 3
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 2
68220: PUSH
68221: LD_INT 5
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 2
68230: NEG
68231: PUSH
68232: LD_INT 3
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 3
68241: NEG
68242: PUSH
68243: LD_INT 0
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 3
68252: NEG
68253: PUSH
68254: LD_INT 1
68256: NEG
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 2
68264: NEG
68265: PUSH
68266: LD_INT 0
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 2
68275: NEG
68276: PUSH
68277: LD_INT 1
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 3
68286: NEG
68287: PUSH
68288: LD_INT 1
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 4
68297: NEG
68298: PUSH
68299: LD_INT 0
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 4
68308: NEG
68309: PUSH
68310: LD_INT 1
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 4
68320: NEG
68321: PUSH
68322: LD_INT 2
68324: NEG
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 2
68332: NEG
68333: PUSH
68334: LD_INT 2
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 4
68343: NEG
68344: PUSH
68345: LD_INT 4
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 4
68355: NEG
68356: PUSH
68357: LD_INT 5
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 3
68367: NEG
68368: PUSH
68369: LD_INT 4
68371: NEG
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 3
68379: NEG
68380: PUSH
68381: LD_INT 3
68383: NEG
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 4
68391: NEG
68392: PUSH
68393: LD_INT 3
68395: NEG
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 5
68403: NEG
68404: PUSH
68405: LD_INT 4
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 5
68415: NEG
68416: PUSH
68417: LD_INT 5
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 3
68427: NEG
68428: PUSH
68429: LD_INT 5
68431: NEG
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 5
68439: NEG
68440: PUSH
68441: LD_INT 3
68443: NEG
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68496: LD_ADDR_VAR 0 30
68500: PUSH
68501: LD_INT 4
68503: PUSH
68504: LD_INT 4
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 4
68513: PUSH
68514: LD_INT 3
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 5
68523: PUSH
68524: LD_INT 4
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 5
68533: PUSH
68534: LD_INT 5
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 4
68543: PUSH
68544: LD_INT 5
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 3
68553: PUSH
68554: LD_INT 4
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 3
68563: PUSH
68564: LD_INT 3
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 5
68573: PUSH
68574: LD_INT 3
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 3
68583: PUSH
68584: LD_INT 5
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 0
68593: PUSH
68594: LD_INT 3
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 0
68603: PUSH
68604: LD_INT 2
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 1
68613: PUSH
68614: LD_INT 3
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 1
68623: PUSH
68624: LD_INT 4
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 0
68633: PUSH
68634: LD_INT 4
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 1
68643: NEG
68644: PUSH
68645: LD_INT 3
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 1
68654: NEG
68655: PUSH
68656: LD_INT 2
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 2
68665: PUSH
68666: LD_INT 4
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 2
68675: NEG
68676: PUSH
68677: LD_INT 2
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 4
68686: NEG
68687: PUSH
68688: LD_INT 0
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 4
68697: NEG
68698: PUSH
68699: LD_INT 1
68701: NEG
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 3
68709: NEG
68710: PUSH
68711: LD_INT 0
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: NEG
68721: PUSH
68722: LD_INT 1
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 4
68731: NEG
68732: PUSH
68733: LD_INT 1
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 5
68742: NEG
68743: PUSH
68744: LD_INT 0
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 5
68753: NEG
68754: PUSH
68755: LD_INT 1
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 5
68765: NEG
68766: PUSH
68767: LD_INT 2
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 3
68777: NEG
68778: PUSH
68779: LD_INT 2
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 3
68788: NEG
68789: PUSH
68790: LD_INT 3
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 3
68800: NEG
68801: PUSH
68802: LD_INT 4
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 2
68812: NEG
68813: PUSH
68814: LD_INT 3
68816: NEG
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 2
68824: NEG
68825: PUSH
68826: LD_INT 2
68828: NEG
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 3
68836: NEG
68837: PUSH
68838: LD_INT 2
68840: NEG
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 4
68848: NEG
68849: PUSH
68850: LD_INT 3
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 4
68860: NEG
68861: PUSH
68862: LD_INT 4
68864: NEG
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 2
68872: NEG
68873: PUSH
68874: LD_INT 4
68876: NEG
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 4
68884: NEG
68885: PUSH
68886: LD_INT 2
68888: NEG
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 0
68896: PUSH
68897: LD_INT 4
68899: NEG
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 0
68907: PUSH
68908: LD_INT 5
68910: NEG
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 1
68918: PUSH
68919: LD_INT 4
68921: NEG
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 1
68929: PUSH
68930: LD_INT 3
68932: NEG
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: LD_INT 3
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 1
68951: NEG
68952: PUSH
68953: LD_INT 4
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 1
68963: NEG
68964: PUSH
68965: LD_INT 5
68967: NEG
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 2
68975: PUSH
68976: LD_INT 3
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 2
68986: NEG
68987: PUSH
68988: LD_INT 5
68990: NEG
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69043: LD_ADDR_VAR 0 31
69047: PUSH
69048: LD_INT 0
69050: PUSH
69051: LD_INT 4
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 0
69060: PUSH
69061: LD_INT 3
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 1
69070: PUSH
69071: LD_INT 4
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 1
69080: PUSH
69081: LD_INT 5
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 0
69090: PUSH
69091: LD_INT 5
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 1
69100: NEG
69101: PUSH
69102: LD_INT 4
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 1
69111: NEG
69112: PUSH
69113: LD_INT 3
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 2
69122: PUSH
69123: LD_INT 5
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 2
69132: NEG
69133: PUSH
69134: LD_INT 3
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 3
69143: NEG
69144: PUSH
69145: LD_INT 0
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 3
69154: NEG
69155: PUSH
69156: LD_INT 1
69158: NEG
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 2
69166: NEG
69167: PUSH
69168: LD_INT 0
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 2
69177: NEG
69178: PUSH
69179: LD_INT 1
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 3
69188: NEG
69189: PUSH
69190: LD_INT 1
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 4
69199: NEG
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 4
69210: NEG
69211: PUSH
69212: LD_INT 1
69214: NEG
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 4
69222: NEG
69223: PUSH
69224: LD_INT 2
69226: NEG
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 2
69234: NEG
69235: PUSH
69236: LD_INT 2
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 4
69245: NEG
69246: PUSH
69247: LD_INT 4
69249: NEG
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 4
69257: NEG
69258: PUSH
69259: LD_INT 5
69261: NEG
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 3
69269: NEG
69270: PUSH
69271: LD_INT 4
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 3
69281: NEG
69282: PUSH
69283: LD_INT 3
69285: NEG
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 4
69293: NEG
69294: PUSH
69295: LD_INT 3
69297: NEG
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 5
69305: NEG
69306: PUSH
69307: LD_INT 4
69309: NEG
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 5
69317: NEG
69318: PUSH
69319: LD_INT 5
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 3
69329: NEG
69330: PUSH
69331: LD_INT 5
69333: NEG
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 5
69341: NEG
69342: PUSH
69343: LD_INT 3
69345: NEG
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 0
69353: PUSH
69354: LD_INT 3
69356: NEG
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 0
69364: PUSH
69365: LD_INT 4
69367: NEG
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 1
69375: PUSH
69376: LD_INT 3
69378: NEG
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 1
69386: PUSH
69387: LD_INT 2
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 0
69397: PUSH
69398: LD_INT 2
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 1
69408: NEG
69409: PUSH
69410: LD_INT 3
69412: NEG
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 1
69420: NEG
69421: PUSH
69422: LD_INT 4
69424: NEG
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 2
69432: PUSH
69433: LD_INT 2
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 2
69443: NEG
69444: PUSH
69445: LD_INT 4
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 4
69455: PUSH
69456: LD_INT 0
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 4
69465: PUSH
69466: LD_INT 1
69468: NEG
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 5
69476: PUSH
69477: LD_INT 0
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 5
69486: PUSH
69487: LD_INT 1
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 4
69496: PUSH
69497: LD_INT 1
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 3
69506: PUSH
69507: LD_INT 0
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 3
69516: PUSH
69517: LD_INT 1
69519: NEG
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 3
69527: PUSH
69528: LD_INT 2
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 5
69538: PUSH
69539: LD_INT 2
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69593: LD_ADDR_VAR 0 32
69597: PUSH
69598: LD_INT 4
69600: NEG
69601: PUSH
69602: LD_INT 0
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 4
69611: NEG
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 3
69623: NEG
69624: PUSH
69625: LD_INT 0
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 3
69634: NEG
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 4
69645: NEG
69646: PUSH
69647: LD_INT 1
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 5
69656: NEG
69657: PUSH
69658: LD_INT 0
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 5
69667: NEG
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 5
69679: NEG
69680: PUSH
69681: LD_INT 2
69683: NEG
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 3
69691: NEG
69692: PUSH
69693: LD_INT 2
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 3
69702: NEG
69703: PUSH
69704: LD_INT 3
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 3
69714: NEG
69715: PUSH
69716: LD_INT 4
69718: NEG
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 2
69726: NEG
69727: PUSH
69728: LD_INT 3
69730: NEG
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 2
69738: NEG
69739: PUSH
69740: LD_INT 2
69742: NEG
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 3
69750: NEG
69751: PUSH
69752: LD_INT 2
69754: NEG
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 4
69762: NEG
69763: PUSH
69764: LD_INT 3
69766: NEG
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 4
69774: NEG
69775: PUSH
69776: LD_INT 4
69778: NEG
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 2
69786: NEG
69787: PUSH
69788: LD_INT 4
69790: NEG
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 4
69798: NEG
69799: PUSH
69800: LD_INT 2
69802: NEG
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 0
69810: PUSH
69811: LD_INT 4
69813: NEG
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 0
69821: PUSH
69822: LD_INT 5
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 1
69832: PUSH
69833: LD_INT 4
69835: NEG
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 1
69843: PUSH
69844: LD_INT 3
69846: NEG
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 0
69854: PUSH
69855: LD_INT 3
69857: NEG
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 1
69865: NEG
69866: PUSH
69867: LD_INT 4
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 1
69877: NEG
69878: PUSH
69879: LD_INT 5
69881: NEG
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 2
69889: PUSH
69890: LD_INT 3
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 2
69900: NEG
69901: PUSH
69902: LD_INT 5
69904: NEG
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 3
69912: PUSH
69913: LD_INT 0
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 3
69922: PUSH
69923: LD_INT 1
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 4
69933: PUSH
69934: LD_INT 0
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 4
69943: PUSH
69944: LD_INT 1
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 3
69953: PUSH
69954: LD_INT 1
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 2
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 2
69973: PUSH
69974: LD_INT 1
69976: NEG
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 2
69984: PUSH
69985: LD_INT 2
69987: NEG
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 4
69995: PUSH
69996: LD_INT 2
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 4
70005: PUSH
70006: LD_INT 4
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 4
70015: PUSH
70016: LD_INT 3
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 5
70025: PUSH
70026: LD_INT 4
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 5
70035: PUSH
70036: LD_INT 5
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 4
70045: PUSH
70046: LD_INT 5
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 3
70055: PUSH
70056: LD_INT 4
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 3
70065: PUSH
70066: LD_INT 3
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 5
70075: PUSH
70076: LD_INT 3
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 3
70085: PUSH
70086: LD_INT 5
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70140: LD_ADDR_VAR 0 33
70144: PUSH
70145: LD_INT 4
70147: NEG
70148: PUSH
70149: LD_INT 4
70151: NEG
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 4
70159: NEG
70160: PUSH
70161: LD_INT 5
70163: NEG
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 3
70171: NEG
70172: PUSH
70173: LD_INT 4
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 3
70183: NEG
70184: PUSH
70185: LD_INT 3
70187: NEG
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 4
70195: NEG
70196: PUSH
70197: LD_INT 3
70199: NEG
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 5
70207: NEG
70208: PUSH
70209: LD_INT 4
70211: NEG
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 5
70219: NEG
70220: PUSH
70221: LD_INT 5
70223: NEG
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 3
70231: NEG
70232: PUSH
70233: LD_INT 5
70235: NEG
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 5
70243: NEG
70244: PUSH
70245: LD_INT 3
70247: NEG
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 0
70255: PUSH
70256: LD_INT 3
70258: NEG
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 0
70266: PUSH
70267: LD_INT 4
70269: NEG
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 1
70277: PUSH
70278: LD_INT 3
70280: NEG
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: LD_INT 1
70288: PUSH
70289: LD_INT 2
70291: NEG
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: PUSH
70297: LD_INT 0
70299: PUSH
70300: LD_INT 2
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 1
70310: NEG
70311: PUSH
70312: LD_INT 3
70314: NEG
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 1
70322: NEG
70323: PUSH
70324: LD_INT 4
70326: NEG
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 2
70334: PUSH
70335: LD_INT 2
70337: NEG
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 2
70345: NEG
70346: PUSH
70347: LD_INT 4
70349: NEG
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 4
70357: PUSH
70358: LD_INT 0
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 4
70367: PUSH
70368: LD_INT 1
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 5
70378: PUSH
70379: LD_INT 0
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 5
70388: PUSH
70389: LD_INT 1
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 4
70398: PUSH
70399: LD_INT 1
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 3
70408: PUSH
70409: LD_INT 0
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 3
70418: PUSH
70419: LD_INT 1
70421: NEG
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 3
70429: PUSH
70430: LD_INT 2
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 5
70440: PUSH
70441: LD_INT 2
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 3
70450: PUSH
70451: LD_INT 3
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 3
70460: PUSH
70461: LD_INT 2
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 4
70470: PUSH
70471: LD_INT 3
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 4
70480: PUSH
70481: LD_INT 4
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 3
70490: PUSH
70491: LD_INT 4
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 2
70500: PUSH
70501: LD_INT 3
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 2
70510: PUSH
70511: LD_INT 2
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 4
70520: PUSH
70521: LD_INT 2
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 2
70530: PUSH
70531: LD_INT 4
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 0
70540: PUSH
70541: LD_INT 4
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 0
70550: PUSH
70551: LD_INT 3
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 1
70560: PUSH
70561: LD_INT 4
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 1
70570: PUSH
70571: LD_INT 5
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 0
70580: PUSH
70581: LD_INT 5
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 1
70590: NEG
70591: PUSH
70592: LD_INT 4
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 1
70601: NEG
70602: PUSH
70603: LD_INT 3
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 2
70612: PUSH
70613: LD_INT 5
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 2
70622: NEG
70623: PUSH
70624: LD_INT 3
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70678: LD_ADDR_VAR 0 34
70682: PUSH
70683: LD_INT 0
70685: PUSH
70686: LD_INT 4
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 0
70696: PUSH
70697: LD_INT 5
70699: NEG
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 1
70707: PUSH
70708: LD_INT 4
70710: NEG
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 1
70718: PUSH
70719: LD_INT 3
70721: NEG
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: LD_INT 3
70732: NEG
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 1
70740: NEG
70741: PUSH
70742: LD_INT 4
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 1
70752: NEG
70753: PUSH
70754: LD_INT 5
70756: NEG
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 2
70764: PUSH
70765: LD_INT 3
70767: NEG
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 2
70775: NEG
70776: PUSH
70777: LD_INT 5
70779: NEG
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 3
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 3
70797: PUSH
70798: LD_INT 1
70800: NEG
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 4
70808: PUSH
70809: LD_INT 0
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 4
70818: PUSH
70819: LD_INT 1
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 3
70828: PUSH
70829: LD_INT 1
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 2
70838: PUSH
70839: LD_INT 0
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 2
70848: PUSH
70849: LD_INT 1
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 2
70859: PUSH
70860: LD_INT 2
70862: NEG
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 4
70870: PUSH
70871: LD_INT 2
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 4
70880: PUSH
70881: LD_INT 4
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 4
70890: PUSH
70891: LD_INT 3
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 5
70900: PUSH
70901: LD_INT 4
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 5
70910: PUSH
70911: LD_INT 5
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 4
70920: PUSH
70921: LD_INT 5
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 3
70930: PUSH
70931: LD_INT 4
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: LD_INT 3
70940: PUSH
70941: LD_INT 3
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 5
70950: PUSH
70951: LD_INT 3
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 3
70960: PUSH
70961: LD_INT 5
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 0
70970: PUSH
70971: LD_INT 3
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 0
70980: PUSH
70981: LD_INT 2
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 1
70990: PUSH
70991: LD_INT 3
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 1
71000: PUSH
71001: LD_INT 4
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 0
71010: PUSH
71011: LD_INT 4
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 1
71020: NEG
71021: PUSH
71022: LD_INT 3
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 1
71031: NEG
71032: PUSH
71033: LD_INT 2
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 2
71042: PUSH
71043: LD_INT 4
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_INT 2
71052: NEG
71053: PUSH
71054: LD_INT 2
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 4
71063: NEG
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 4
71074: NEG
71075: PUSH
71076: LD_INT 1
71078: NEG
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 3
71086: NEG
71087: PUSH
71088: LD_INT 0
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 3
71097: NEG
71098: PUSH
71099: LD_INT 1
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 4
71108: NEG
71109: PUSH
71110: LD_INT 1
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 5
71119: NEG
71120: PUSH
71121: LD_INT 0
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 5
71130: NEG
71131: PUSH
71132: LD_INT 1
71134: NEG
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 5
71142: NEG
71143: PUSH
71144: LD_INT 2
71146: NEG
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: LD_INT 3
71154: NEG
71155: PUSH
71156: LD_INT 2
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: ST_TO_ADDR
// end ; end ;
71210: GO 71213
71212: POP
// case btype of b_depot , b_warehouse :
71213: LD_VAR 0 1
71217: PUSH
71218: LD_INT 0
71220: DOUBLE
71221: EQUAL
71222: IFTRUE 71232
71224: LD_INT 1
71226: DOUBLE
71227: EQUAL
71228: IFTRUE 71232
71230: GO 71433
71232: POP
// case nation of nation_american :
71233: LD_VAR 0 5
71237: PUSH
71238: LD_INT 1
71240: DOUBLE
71241: EQUAL
71242: IFTRUE 71246
71244: GO 71302
71246: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71247: LD_ADDR_VAR 0 9
71251: PUSH
71252: LD_VAR 0 11
71256: PUSH
71257: LD_VAR 0 12
71261: PUSH
71262: LD_VAR 0 13
71266: PUSH
71267: LD_VAR 0 14
71271: PUSH
71272: LD_VAR 0 15
71276: PUSH
71277: LD_VAR 0 16
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: PUSH
71290: LD_VAR 0 4
71294: PUSH
71295: LD_INT 1
71297: PLUS
71298: ARRAY
71299: ST_TO_ADDR
71300: GO 71431
71302: LD_INT 2
71304: DOUBLE
71305: EQUAL
71306: IFTRUE 71310
71308: GO 71366
71310: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71311: LD_ADDR_VAR 0 9
71315: PUSH
71316: LD_VAR 0 17
71320: PUSH
71321: LD_VAR 0 18
71325: PUSH
71326: LD_VAR 0 19
71330: PUSH
71331: LD_VAR 0 20
71335: PUSH
71336: LD_VAR 0 21
71340: PUSH
71341: LD_VAR 0 22
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: PUSH
71354: LD_VAR 0 4
71358: PUSH
71359: LD_INT 1
71361: PLUS
71362: ARRAY
71363: ST_TO_ADDR
71364: GO 71431
71366: LD_INT 3
71368: DOUBLE
71369: EQUAL
71370: IFTRUE 71374
71372: GO 71430
71374: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71375: LD_ADDR_VAR 0 9
71379: PUSH
71380: LD_VAR 0 23
71384: PUSH
71385: LD_VAR 0 24
71389: PUSH
71390: LD_VAR 0 25
71394: PUSH
71395: LD_VAR 0 26
71399: PUSH
71400: LD_VAR 0 27
71404: PUSH
71405: LD_VAR 0 28
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: PUSH
71418: LD_VAR 0 4
71422: PUSH
71423: LD_INT 1
71425: PLUS
71426: ARRAY
71427: ST_TO_ADDR
71428: GO 71431
71430: POP
71431: GO 71986
71433: LD_INT 2
71435: DOUBLE
71436: EQUAL
71437: IFTRUE 71447
71439: LD_INT 3
71441: DOUBLE
71442: EQUAL
71443: IFTRUE 71447
71445: GO 71503
71447: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71448: LD_ADDR_VAR 0 9
71452: PUSH
71453: LD_VAR 0 29
71457: PUSH
71458: LD_VAR 0 30
71462: PUSH
71463: LD_VAR 0 31
71467: PUSH
71468: LD_VAR 0 32
71472: PUSH
71473: LD_VAR 0 33
71477: PUSH
71478: LD_VAR 0 34
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: PUSH
71491: LD_VAR 0 4
71495: PUSH
71496: LD_INT 1
71498: PLUS
71499: ARRAY
71500: ST_TO_ADDR
71501: GO 71986
71503: LD_INT 16
71505: DOUBLE
71506: EQUAL
71507: IFTRUE 71565
71509: LD_INT 17
71511: DOUBLE
71512: EQUAL
71513: IFTRUE 71565
71515: LD_INT 18
71517: DOUBLE
71518: EQUAL
71519: IFTRUE 71565
71521: LD_INT 19
71523: DOUBLE
71524: EQUAL
71525: IFTRUE 71565
71527: LD_INT 22
71529: DOUBLE
71530: EQUAL
71531: IFTRUE 71565
71533: LD_INT 20
71535: DOUBLE
71536: EQUAL
71537: IFTRUE 71565
71539: LD_INT 21
71541: DOUBLE
71542: EQUAL
71543: IFTRUE 71565
71545: LD_INT 23
71547: DOUBLE
71548: EQUAL
71549: IFTRUE 71565
71551: LD_INT 24
71553: DOUBLE
71554: EQUAL
71555: IFTRUE 71565
71557: LD_INT 25
71559: DOUBLE
71560: EQUAL
71561: IFTRUE 71565
71563: GO 71621
71565: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71566: LD_ADDR_VAR 0 9
71570: PUSH
71571: LD_VAR 0 35
71575: PUSH
71576: LD_VAR 0 36
71580: PUSH
71581: LD_VAR 0 37
71585: PUSH
71586: LD_VAR 0 38
71590: PUSH
71591: LD_VAR 0 39
71595: PUSH
71596: LD_VAR 0 40
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: PUSH
71609: LD_VAR 0 4
71613: PUSH
71614: LD_INT 1
71616: PLUS
71617: ARRAY
71618: ST_TO_ADDR
71619: GO 71986
71621: LD_INT 6
71623: DOUBLE
71624: EQUAL
71625: IFTRUE 71677
71627: LD_INT 7
71629: DOUBLE
71630: EQUAL
71631: IFTRUE 71677
71633: LD_INT 8
71635: DOUBLE
71636: EQUAL
71637: IFTRUE 71677
71639: LD_INT 13
71641: DOUBLE
71642: EQUAL
71643: IFTRUE 71677
71645: LD_INT 12
71647: DOUBLE
71648: EQUAL
71649: IFTRUE 71677
71651: LD_INT 15
71653: DOUBLE
71654: EQUAL
71655: IFTRUE 71677
71657: LD_INT 11
71659: DOUBLE
71660: EQUAL
71661: IFTRUE 71677
71663: LD_INT 14
71665: DOUBLE
71666: EQUAL
71667: IFTRUE 71677
71669: LD_INT 10
71671: DOUBLE
71672: EQUAL
71673: IFTRUE 71677
71675: GO 71733
71677: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71678: LD_ADDR_VAR 0 9
71682: PUSH
71683: LD_VAR 0 41
71687: PUSH
71688: LD_VAR 0 42
71692: PUSH
71693: LD_VAR 0 43
71697: PUSH
71698: LD_VAR 0 44
71702: PUSH
71703: LD_VAR 0 45
71707: PUSH
71708: LD_VAR 0 46
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: PUSH
71721: LD_VAR 0 4
71725: PUSH
71726: LD_INT 1
71728: PLUS
71729: ARRAY
71730: ST_TO_ADDR
71731: GO 71986
71733: LD_INT 36
71735: DOUBLE
71736: EQUAL
71737: IFTRUE 71741
71739: GO 71797
71741: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71742: LD_ADDR_VAR 0 9
71746: PUSH
71747: LD_VAR 0 47
71751: PUSH
71752: LD_VAR 0 48
71756: PUSH
71757: LD_VAR 0 49
71761: PUSH
71762: LD_VAR 0 50
71766: PUSH
71767: LD_VAR 0 51
71771: PUSH
71772: LD_VAR 0 52
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: PUSH
71785: LD_VAR 0 4
71789: PUSH
71790: LD_INT 1
71792: PLUS
71793: ARRAY
71794: ST_TO_ADDR
71795: GO 71986
71797: LD_INT 4
71799: DOUBLE
71800: EQUAL
71801: IFTRUE 71823
71803: LD_INT 5
71805: DOUBLE
71806: EQUAL
71807: IFTRUE 71823
71809: LD_INT 34
71811: DOUBLE
71812: EQUAL
71813: IFTRUE 71823
71815: LD_INT 37
71817: DOUBLE
71818: EQUAL
71819: IFTRUE 71823
71821: GO 71879
71823: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71824: LD_ADDR_VAR 0 9
71828: PUSH
71829: LD_VAR 0 53
71833: PUSH
71834: LD_VAR 0 54
71838: PUSH
71839: LD_VAR 0 55
71843: PUSH
71844: LD_VAR 0 56
71848: PUSH
71849: LD_VAR 0 57
71853: PUSH
71854: LD_VAR 0 58
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: PUSH
71867: LD_VAR 0 4
71871: PUSH
71872: LD_INT 1
71874: PLUS
71875: ARRAY
71876: ST_TO_ADDR
71877: GO 71986
71879: LD_INT 31
71881: DOUBLE
71882: EQUAL
71883: IFTRUE 71929
71885: LD_INT 32
71887: DOUBLE
71888: EQUAL
71889: IFTRUE 71929
71891: LD_INT 33
71893: DOUBLE
71894: EQUAL
71895: IFTRUE 71929
71897: LD_INT 27
71899: DOUBLE
71900: EQUAL
71901: IFTRUE 71929
71903: LD_INT 26
71905: DOUBLE
71906: EQUAL
71907: IFTRUE 71929
71909: LD_INT 28
71911: DOUBLE
71912: EQUAL
71913: IFTRUE 71929
71915: LD_INT 29
71917: DOUBLE
71918: EQUAL
71919: IFTRUE 71929
71921: LD_INT 30
71923: DOUBLE
71924: EQUAL
71925: IFTRUE 71929
71927: GO 71985
71929: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71930: LD_ADDR_VAR 0 9
71934: PUSH
71935: LD_VAR 0 59
71939: PUSH
71940: LD_VAR 0 60
71944: PUSH
71945: LD_VAR 0 61
71949: PUSH
71950: LD_VAR 0 62
71954: PUSH
71955: LD_VAR 0 63
71959: PUSH
71960: LD_VAR 0 64
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: PUSH
71973: LD_VAR 0 4
71977: PUSH
71978: LD_INT 1
71980: PLUS
71981: ARRAY
71982: ST_TO_ADDR
71983: GO 71986
71985: POP
// temp_list2 = [ ] ;
71986: LD_ADDR_VAR 0 10
71990: PUSH
71991: EMPTY
71992: ST_TO_ADDR
// for i in temp_list do
71993: LD_ADDR_VAR 0 8
71997: PUSH
71998: LD_VAR 0 9
72002: PUSH
72003: FOR_IN
72004: IFFALSE 72056
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72006: LD_ADDR_VAR 0 10
72010: PUSH
72011: LD_VAR 0 10
72015: PUSH
72016: LD_VAR 0 8
72020: PUSH
72021: LD_INT 1
72023: ARRAY
72024: PUSH
72025: LD_VAR 0 2
72029: PLUS
72030: PUSH
72031: LD_VAR 0 8
72035: PUSH
72036: LD_INT 2
72038: ARRAY
72039: PUSH
72040: LD_VAR 0 3
72044: PLUS
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: EMPTY
72051: LIST
72052: ADD
72053: ST_TO_ADDR
72054: GO 72003
72056: POP
72057: POP
// result = temp_list2 ;
72058: LD_ADDR_VAR 0 7
72062: PUSH
72063: LD_VAR 0 10
72067: ST_TO_ADDR
// end ;
72068: LD_VAR 0 7
72072: RET
// export function EnemyInRange ( unit , dist ) ; begin
72073: LD_INT 0
72075: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72076: LD_ADDR_VAR 0 3
72080: PUSH
72081: LD_VAR 0 1
72085: PPUSH
72086: CALL_OW 255
72090: PPUSH
72091: LD_VAR 0 1
72095: PPUSH
72096: CALL_OW 250
72100: PPUSH
72101: LD_VAR 0 1
72105: PPUSH
72106: CALL_OW 251
72110: PPUSH
72111: LD_VAR 0 2
72115: PPUSH
72116: CALL 45475 0 4
72120: PUSH
72121: LD_INT 4
72123: ARRAY
72124: ST_TO_ADDR
// end ;
72125: LD_VAR 0 3
72129: RET
// export function PlayerSeeMe ( unit ) ; begin
72130: LD_INT 0
72132: PPUSH
// result := See ( your_side , unit ) ;
72133: LD_ADDR_VAR 0 2
72137: PUSH
72138: LD_OWVAR 2
72142: PPUSH
72143: LD_VAR 0 1
72147: PPUSH
72148: CALL_OW 292
72152: ST_TO_ADDR
// end ;
72153: LD_VAR 0 2
72157: RET
// export function ReverseDir ( unit ) ; begin
72158: LD_INT 0
72160: PPUSH
// if not unit then
72161: LD_VAR 0 1
72165: NOT
72166: IFFALSE 72170
// exit ;
72168: GO 72193
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72170: LD_ADDR_VAR 0 2
72174: PUSH
72175: LD_VAR 0 1
72179: PPUSH
72180: CALL_OW 254
72184: PUSH
72185: LD_INT 3
72187: PLUS
72188: PUSH
72189: LD_INT 6
72191: MOD
72192: ST_TO_ADDR
// end ;
72193: LD_VAR 0 2
72197: RET
// export function ReverseArray ( array ) ; var i ; begin
72198: LD_INT 0
72200: PPUSH
72201: PPUSH
// if not array then
72202: LD_VAR 0 1
72206: NOT
72207: IFFALSE 72211
// exit ;
72209: GO 72266
// result := [ ] ;
72211: LD_ADDR_VAR 0 2
72215: PUSH
72216: EMPTY
72217: ST_TO_ADDR
// for i := array downto 1 do
72218: LD_ADDR_VAR 0 3
72222: PUSH
72223: DOUBLE
72224: LD_VAR 0 1
72228: INC
72229: ST_TO_ADDR
72230: LD_INT 1
72232: PUSH
72233: FOR_DOWNTO
72234: IFFALSE 72264
// result := Join ( result , array [ i ] ) ;
72236: LD_ADDR_VAR 0 2
72240: PUSH
72241: LD_VAR 0 2
72245: PPUSH
72246: LD_VAR 0 1
72250: PUSH
72251: LD_VAR 0 3
72255: ARRAY
72256: PPUSH
72257: CALL 76891 0 2
72261: ST_TO_ADDR
72262: GO 72233
72264: POP
72265: POP
// end ;
72266: LD_VAR 0 2
72270: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72271: LD_INT 0
72273: PPUSH
72274: PPUSH
72275: PPUSH
72276: PPUSH
72277: PPUSH
72278: PPUSH
// if not unit or not hexes then
72279: LD_VAR 0 1
72283: NOT
72284: PUSH
72285: LD_VAR 0 2
72289: NOT
72290: OR
72291: IFFALSE 72295
// exit ;
72293: GO 72418
// dist := 9999 ;
72295: LD_ADDR_VAR 0 5
72299: PUSH
72300: LD_INT 9999
72302: ST_TO_ADDR
// for i = 1 to hexes do
72303: LD_ADDR_VAR 0 4
72307: PUSH
72308: DOUBLE
72309: LD_INT 1
72311: DEC
72312: ST_TO_ADDR
72313: LD_VAR 0 2
72317: PUSH
72318: FOR_TO
72319: IFFALSE 72406
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72321: LD_ADDR_VAR 0 6
72325: PUSH
72326: LD_VAR 0 1
72330: PPUSH
72331: LD_VAR 0 2
72335: PUSH
72336: LD_VAR 0 4
72340: ARRAY
72341: PUSH
72342: LD_INT 1
72344: ARRAY
72345: PPUSH
72346: LD_VAR 0 2
72350: PUSH
72351: LD_VAR 0 4
72355: ARRAY
72356: PUSH
72357: LD_INT 2
72359: ARRAY
72360: PPUSH
72361: CALL_OW 297
72365: ST_TO_ADDR
// if tdist < dist then
72366: LD_VAR 0 6
72370: PUSH
72371: LD_VAR 0 5
72375: LESS
72376: IFFALSE 72404
// begin hex := hexes [ i ] ;
72378: LD_ADDR_VAR 0 8
72382: PUSH
72383: LD_VAR 0 2
72387: PUSH
72388: LD_VAR 0 4
72392: ARRAY
72393: ST_TO_ADDR
// dist := tdist ;
72394: LD_ADDR_VAR 0 5
72398: PUSH
72399: LD_VAR 0 6
72403: ST_TO_ADDR
// end ; end ;
72404: GO 72318
72406: POP
72407: POP
// result := hex ;
72408: LD_ADDR_VAR 0 3
72412: PUSH
72413: LD_VAR 0 8
72417: ST_TO_ADDR
// end ;
72418: LD_VAR 0 3
72422: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72423: LD_INT 0
72425: PPUSH
72426: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72427: LD_VAR 0 1
72431: NOT
72432: PUSH
72433: LD_VAR 0 1
72437: PUSH
72438: LD_INT 21
72440: PUSH
72441: LD_INT 2
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 23
72450: PUSH
72451: LD_INT 2
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PPUSH
72462: CALL_OW 69
72466: IN
72467: NOT
72468: OR
72469: IFFALSE 72473
// exit ;
72471: GO 72520
// for i = 1 to 3 do
72473: LD_ADDR_VAR 0 3
72477: PUSH
72478: DOUBLE
72479: LD_INT 1
72481: DEC
72482: ST_TO_ADDR
72483: LD_INT 3
72485: PUSH
72486: FOR_TO
72487: IFFALSE 72518
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72489: LD_VAR 0 1
72493: PPUSH
72494: CALL_OW 250
72498: PPUSH
72499: LD_VAR 0 1
72503: PPUSH
72504: CALL_OW 251
72508: PPUSH
72509: LD_INT 1
72511: PPUSH
72512: CALL_OW 453
72516: GO 72486
72518: POP
72519: POP
// end ;
72520: LD_VAR 0 2
72524: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72525: LD_INT 0
72527: PPUSH
72528: PPUSH
72529: PPUSH
72530: PPUSH
72531: PPUSH
72532: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72533: LD_VAR 0 1
72537: NOT
72538: PUSH
72539: LD_VAR 0 2
72543: NOT
72544: OR
72545: PUSH
72546: LD_VAR 0 1
72550: PPUSH
72551: CALL_OW 314
72555: OR
72556: IFFALSE 72560
// exit ;
72558: GO 73001
// x := GetX ( enemy_unit ) ;
72560: LD_ADDR_VAR 0 7
72564: PUSH
72565: LD_VAR 0 2
72569: PPUSH
72570: CALL_OW 250
72574: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72575: LD_ADDR_VAR 0 8
72579: PUSH
72580: LD_VAR 0 2
72584: PPUSH
72585: CALL_OW 251
72589: ST_TO_ADDR
// if not x or not y then
72590: LD_VAR 0 7
72594: NOT
72595: PUSH
72596: LD_VAR 0 8
72600: NOT
72601: OR
72602: IFFALSE 72606
// exit ;
72604: GO 73001
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72606: LD_ADDR_VAR 0 6
72610: PUSH
72611: LD_VAR 0 7
72615: PPUSH
72616: LD_INT 0
72618: PPUSH
72619: LD_INT 4
72621: PPUSH
72622: CALL_OW 272
72626: PUSH
72627: LD_VAR 0 8
72631: PPUSH
72632: LD_INT 0
72634: PPUSH
72635: LD_INT 4
72637: PPUSH
72638: CALL_OW 273
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: PUSH
72647: LD_VAR 0 7
72651: PPUSH
72652: LD_INT 1
72654: PPUSH
72655: LD_INT 4
72657: PPUSH
72658: CALL_OW 272
72662: PUSH
72663: LD_VAR 0 8
72667: PPUSH
72668: LD_INT 1
72670: PPUSH
72671: LD_INT 4
72673: PPUSH
72674: CALL_OW 273
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_VAR 0 7
72687: PPUSH
72688: LD_INT 2
72690: PPUSH
72691: LD_INT 4
72693: PPUSH
72694: CALL_OW 272
72698: PUSH
72699: LD_VAR 0 8
72703: PPUSH
72704: LD_INT 2
72706: PPUSH
72707: LD_INT 4
72709: PPUSH
72710: CALL_OW 273
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_VAR 0 7
72723: PPUSH
72724: LD_INT 3
72726: PPUSH
72727: LD_INT 4
72729: PPUSH
72730: CALL_OW 272
72734: PUSH
72735: LD_VAR 0 8
72739: PPUSH
72740: LD_INT 3
72742: PPUSH
72743: LD_INT 4
72745: PPUSH
72746: CALL_OW 273
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_VAR 0 7
72759: PPUSH
72760: LD_INT 4
72762: PPUSH
72763: LD_INT 4
72765: PPUSH
72766: CALL_OW 272
72770: PUSH
72771: LD_VAR 0 8
72775: PPUSH
72776: LD_INT 4
72778: PPUSH
72779: LD_INT 4
72781: PPUSH
72782: CALL_OW 273
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: PUSH
72791: LD_VAR 0 7
72795: PPUSH
72796: LD_INT 5
72798: PPUSH
72799: LD_INT 4
72801: PPUSH
72802: CALL_OW 272
72806: PUSH
72807: LD_VAR 0 8
72811: PPUSH
72812: LD_INT 5
72814: PPUSH
72815: LD_INT 4
72817: PPUSH
72818: CALL_OW 273
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: ST_TO_ADDR
// for i = tmp downto 1 do
72835: LD_ADDR_VAR 0 4
72839: PUSH
72840: DOUBLE
72841: LD_VAR 0 6
72845: INC
72846: ST_TO_ADDR
72847: LD_INT 1
72849: PUSH
72850: FOR_DOWNTO
72851: IFFALSE 72952
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72853: LD_VAR 0 6
72857: PUSH
72858: LD_VAR 0 4
72862: ARRAY
72863: PUSH
72864: LD_INT 1
72866: ARRAY
72867: PPUSH
72868: LD_VAR 0 6
72872: PUSH
72873: LD_VAR 0 4
72877: ARRAY
72878: PUSH
72879: LD_INT 2
72881: ARRAY
72882: PPUSH
72883: CALL_OW 488
72887: NOT
72888: PUSH
72889: LD_VAR 0 6
72893: PUSH
72894: LD_VAR 0 4
72898: ARRAY
72899: PUSH
72900: LD_INT 1
72902: ARRAY
72903: PPUSH
72904: LD_VAR 0 6
72908: PUSH
72909: LD_VAR 0 4
72913: ARRAY
72914: PUSH
72915: LD_INT 2
72917: ARRAY
72918: PPUSH
72919: CALL_OW 428
72923: PUSH
72924: LD_INT 0
72926: NONEQUAL
72927: OR
72928: IFFALSE 72950
// tmp := Delete ( tmp , i ) ;
72930: LD_ADDR_VAR 0 6
72934: PUSH
72935: LD_VAR 0 6
72939: PPUSH
72940: LD_VAR 0 4
72944: PPUSH
72945: CALL_OW 3
72949: ST_TO_ADDR
72950: GO 72850
72952: POP
72953: POP
// j := GetClosestHex ( unit , tmp ) ;
72954: LD_ADDR_VAR 0 5
72958: PUSH
72959: LD_VAR 0 1
72963: PPUSH
72964: LD_VAR 0 6
72968: PPUSH
72969: CALL 72271 0 2
72973: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72974: LD_VAR 0 1
72978: PPUSH
72979: LD_VAR 0 5
72983: PUSH
72984: LD_INT 1
72986: ARRAY
72987: PPUSH
72988: LD_VAR 0 5
72992: PUSH
72993: LD_INT 2
72995: ARRAY
72996: PPUSH
72997: CALL_OW 111
// end ;
73001: LD_VAR 0 3
73005: RET
// export function PrepareApemanSoldier ( ) ; begin
73006: LD_INT 0
73008: PPUSH
// uc_nation := 0 ;
73009: LD_ADDR_OWVAR 21
73013: PUSH
73014: LD_INT 0
73016: ST_TO_ADDR
// hc_sex := sex_male ;
73017: LD_ADDR_OWVAR 27
73021: PUSH
73022: LD_INT 1
73024: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73025: LD_ADDR_OWVAR 28
73029: PUSH
73030: LD_INT 15
73032: ST_TO_ADDR
// hc_gallery :=  ;
73033: LD_ADDR_OWVAR 33
73037: PUSH
73038: LD_STRING 
73040: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73041: LD_ADDR_OWVAR 31
73045: PUSH
73046: LD_INT 0
73048: PPUSH
73049: LD_INT 3
73051: PPUSH
73052: CALL_OW 12
73056: PUSH
73057: LD_INT 0
73059: PPUSH
73060: LD_INT 3
73062: PPUSH
73063: CALL_OW 12
73067: PUSH
73068: LD_INT 0
73070: PUSH
73071: LD_INT 0
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: ST_TO_ADDR
// end ;
73080: LD_VAR 0 1
73084: RET
// export function PrepareApemanEngineer ( ) ; begin
73085: LD_INT 0
73087: PPUSH
// uc_nation := 0 ;
73088: LD_ADDR_OWVAR 21
73092: PUSH
73093: LD_INT 0
73095: ST_TO_ADDR
// hc_sex := sex_male ;
73096: LD_ADDR_OWVAR 27
73100: PUSH
73101: LD_INT 1
73103: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73104: LD_ADDR_OWVAR 28
73108: PUSH
73109: LD_INT 16
73111: ST_TO_ADDR
// hc_gallery :=  ;
73112: LD_ADDR_OWVAR 33
73116: PUSH
73117: LD_STRING 
73119: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73120: LD_ADDR_OWVAR 31
73124: PUSH
73125: LD_INT 0
73127: PPUSH
73128: LD_INT 3
73130: PPUSH
73131: CALL_OW 12
73135: PUSH
73136: LD_INT 0
73138: PPUSH
73139: LD_INT 3
73141: PPUSH
73142: CALL_OW 12
73146: PUSH
73147: LD_INT 0
73149: PUSH
73150: LD_INT 0
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: ST_TO_ADDR
// end ;
73159: LD_VAR 0 1
73163: RET
// export function PrepareApeman ( agressivity ) ; begin
73164: LD_INT 0
73166: PPUSH
// uc_side := 0 ;
73167: LD_ADDR_OWVAR 20
73171: PUSH
73172: LD_INT 0
73174: ST_TO_ADDR
// uc_nation := 0 ;
73175: LD_ADDR_OWVAR 21
73179: PUSH
73180: LD_INT 0
73182: ST_TO_ADDR
// hc_sex := sex_male ;
73183: LD_ADDR_OWVAR 27
73187: PUSH
73188: LD_INT 1
73190: ST_TO_ADDR
// hc_class := class_apeman ;
73191: LD_ADDR_OWVAR 28
73195: PUSH
73196: LD_INT 12
73198: ST_TO_ADDR
// hc_gallery :=  ;
73199: LD_ADDR_OWVAR 33
73203: PUSH
73204: LD_STRING 
73206: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73207: LD_ADDR_OWVAR 35
73211: PUSH
73212: LD_VAR 0 1
73216: NEG
73217: PPUSH
73218: LD_VAR 0 1
73222: PPUSH
73223: CALL_OW 12
73227: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73228: LD_ADDR_OWVAR 31
73232: PUSH
73233: LD_INT 0
73235: PPUSH
73236: LD_INT 3
73238: PPUSH
73239: CALL_OW 12
73243: PUSH
73244: LD_INT 0
73246: PPUSH
73247: LD_INT 3
73249: PPUSH
73250: CALL_OW 12
73254: PUSH
73255: LD_INT 0
73257: PUSH
73258: LD_INT 0
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: ST_TO_ADDR
// end ;
73267: LD_VAR 0 2
73271: RET
// export function PrepareTiger ( agressivity ) ; begin
73272: LD_INT 0
73274: PPUSH
// uc_side := 0 ;
73275: LD_ADDR_OWVAR 20
73279: PUSH
73280: LD_INT 0
73282: ST_TO_ADDR
// uc_nation := 0 ;
73283: LD_ADDR_OWVAR 21
73287: PUSH
73288: LD_INT 0
73290: ST_TO_ADDR
// hc_class := class_tiger ;
73291: LD_ADDR_OWVAR 28
73295: PUSH
73296: LD_INT 14
73298: ST_TO_ADDR
// hc_gallery :=  ;
73299: LD_ADDR_OWVAR 33
73303: PUSH
73304: LD_STRING 
73306: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73307: LD_ADDR_OWVAR 35
73311: PUSH
73312: LD_VAR 0 1
73316: NEG
73317: PPUSH
73318: LD_VAR 0 1
73322: PPUSH
73323: CALL_OW 12
73327: ST_TO_ADDR
// end ;
73328: LD_VAR 0 2
73332: RET
// export function PrepareEnchidna ( ) ; begin
73333: LD_INT 0
73335: PPUSH
// uc_side := 0 ;
73336: LD_ADDR_OWVAR 20
73340: PUSH
73341: LD_INT 0
73343: ST_TO_ADDR
// uc_nation := 0 ;
73344: LD_ADDR_OWVAR 21
73348: PUSH
73349: LD_INT 0
73351: ST_TO_ADDR
// hc_class := class_baggie ;
73352: LD_ADDR_OWVAR 28
73356: PUSH
73357: LD_INT 13
73359: ST_TO_ADDR
// hc_gallery :=  ;
73360: LD_ADDR_OWVAR 33
73364: PUSH
73365: LD_STRING 
73367: ST_TO_ADDR
// end ;
73368: LD_VAR 0 1
73372: RET
// export function PrepareFrog ( ) ; begin
73373: LD_INT 0
73375: PPUSH
// uc_side := 0 ;
73376: LD_ADDR_OWVAR 20
73380: PUSH
73381: LD_INT 0
73383: ST_TO_ADDR
// uc_nation := 0 ;
73384: LD_ADDR_OWVAR 21
73388: PUSH
73389: LD_INT 0
73391: ST_TO_ADDR
// hc_class := class_frog ;
73392: LD_ADDR_OWVAR 28
73396: PUSH
73397: LD_INT 19
73399: ST_TO_ADDR
// hc_gallery :=  ;
73400: LD_ADDR_OWVAR 33
73404: PUSH
73405: LD_STRING 
73407: ST_TO_ADDR
// end ;
73408: LD_VAR 0 1
73412: RET
// export function PrepareFish ( ) ; begin
73413: LD_INT 0
73415: PPUSH
// uc_side := 0 ;
73416: LD_ADDR_OWVAR 20
73420: PUSH
73421: LD_INT 0
73423: ST_TO_ADDR
// uc_nation := 0 ;
73424: LD_ADDR_OWVAR 21
73428: PUSH
73429: LD_INT 0
73431: ST_TO_ADDR
// hc_class := class_fish ;
73432: LD_ADDR_OWVAR 28
73436: PUSH
73437: LD_INT 20
73439: ST_TO_ADDR
// hc_gallery :=  ;
73440: LD_ADDR_OWVAR 33
73444: PUSH
73445: LD_STRING 
73447: ST_TO_ADDR
// end ;
73448: LD_VAR 0 1
73452: RET
// export function PrepareBird ( ) ; begin
73453: LD_INT 0
73455: PPUSH
// uc_side := 0 ;
73456: LD_ADDR_OWVAR 20
73460: PUSH
73461: LD_INT 0
73463: ST_TO_ADDR
// uc_nation := 0 ;
73464: LD_ADDR_OWVAR 21
73468: PUSH
73469: LD_INT 0
73471: ST_TO_ADDR
// hc_class := class_phororhacos ;
73472: LD_ADDR_OWVAR 28
73476: PUSH
73477: LD_INT 18
73479: ST_TO_ADDR
// hc_gallery :=  ;
73480: LD_ADDR_OWVAR 33
73484: PUSH
73485: LD_STRING 
73487: ST_TO_ADDR
// end ;
73488: LD_VAR 0 1
73492: RET
// export function PrepareHorse ( ) ; begin
73493: LD_INT 0
73495: PPUSH
// uc_side := 0 ;
73496: LD_ADDR_OWVAR 20
73500: PUSH
73501: LD_INT 0
73503: ST_TO_ADDR
// uc_nation := 0 ;
73504: LD_ADDR_OWVAR 21
73508: PUSH
73509: LD_INT 0
73511: ST_TO_ADDR
// hc_class := class_horse ;
73512: LD_ADDR_OWVAR 28
73516: PUSH
73517: LD_INT 21
73519: ST_TO_ADDR
// hc_gallery :=  ;
73520: LD_ADDR_OWVAR 33
73524: PUSH
73525: LD_STRING 
73527: ST_TO_ADDR
// end ;
73528: LD_VAR 0 1
73532: RET
// export function PrepareMastodont ( ) ; begin
73533: LD_INT 0
73535: PPUSH
// uc_side := 0 ;
73536: LD_ADDR_OWVAR 20
73540: PUSH
73541: LD_INT 0
73543: ST_TO_ADDR
// uc_nation := 0 ;
73544: LD_ADDR_OWVAR 21
73548: PUSH
73549: LD_INT 0
73551: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73552: LD_ADDR_OWVAR 37
73556: PUSH
73557: LD_INT 31
73559: ST_TO_ADDR
// vc_control := control_rider ;
73560: LD_ADDR_OWVAR 38
73564: PUSH
73565: LD_INT 4
73567: ST_TO_ADDR
// end ;
73568: LD_VAR 0 1
73572: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73573: LD_INT 0
73575: PPUSH
73576: PPUSH
73577: PPUSH
// uc_side = 0 ;
73578: LD_ADDR_OWVAR 20
73582: PUSH
73583: LD_INT 0
73585: ST_TO_ADDR
// uc_nation = 0 ;
73586: LD_ADDR_OWVAR 21
73590: PUSH
73591: LD_INT 0
73593: ST_TO_ADDR
// InitHc_All ( ) ;
73594: CALL_OW 584
// InitVc ;
73598: CALL_OW 20
// if mastodonts then
73602: LD_VAR 0 6
73606: IFFALSE 73673
// for i = 1 to mastodonts do
73608: LD_ADDR_VAR 0 11
73612: PUSH
73613: DOUBLE
73614: LD_INT 1
73616: DEC
73617: ST_TO_ADDR
73618: LD_VAR 0 6
73622: PUSH
73623: FOR_TO
73624: IFFALSE 73671
// begin vc_chassis := 31 ;
73626: LD_ADDR_OWVAR 37
73630: PUSH
73631: LD_INT 31
73633: ST_TO_ADDR
// vc_control := control_rider ;
73634: LD_ADDR_OWVAR 38
73638: PUSH
73639: LD_INT 4
73641: ST_TO_ADDR
// animal := CreateVehicle ;
73642: LD_ADDR_VAR 0 12
73646: PUSH
73647: CALL_OW 45
73651: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73652: LD_VAR 0 12
73656: PPUSH
73657: LD_VAR 0 8
73661: PPUSH
73662: LD_INT 0
73664: PPUSH
73665: CALL 75808 0 3
// end ;
73669: GO 73623
73671: POP
73672: POP
// if horses then
73673: LD_VAR 0 5
73677: IFFALSE 73744
// for i = 1 to horses do
73679: LD_ADDR_VAR 0 11
73683: PUSH
73684: DOUBLE
73685: LD_INT 1
73687: DEC
73688: ST_TO_ADDR
73689: LD_VAR 0 5
73693: PUSH
73694: FOR_TO
73695: IFFALSE 73742
// begin hc_class := 21 ;
73697: LD_ADDR_OWVAR 28
73701: PUSH
73702: LD_INT 21
73704: ST_TO_ADDR
// hc_gallery :=  ;
73705: LD_ADDR_OWVAR 33
73709: PUSH
73710: LD_STRING 
73712: ST_TO_ADDR
// animal := CreateHuman ;
73713: LD_ADDR_VAR 0 12
73717: PUSH
73718: CALL_OW 44
73722: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73723: LD_VAR 0 12
73727: PPUSH
73728: LD_VAR 0 8
73732: PPUSH
73733: LD_INT 0
73735: PPUSH
73736: CALL 75808 0 3
// end ;
73740: GO 73694
73742: POP
73743: POP
// if birds then
73744: LD_VAR 0 1
73748: IFFALSE 73815
// for i = 1 to birds do
73750: LD_ADDR_VAR 0 11
73754: PUSH
73755: DOUBLE
73756: LD_INT 1
73758: DEC
73759: ST_TO_ADDR
73760: LD_VAR 0 1
73764: PUSH
73765: FOR_TO
73766: IFFALSE 73813
// begin hc_class = 18 ;
73768: LD_ADDR_OWVAR 28
73772: PUSH
73773: LD_INT 18
73775: ST_TO_ADDR
// hc_gallery =  ;
73776: LD_ADDR_OWVAR 33
73780: PUSH
73781: LD_STRING 
73783: ST_TO_ADDR
// animal := CreateHuman ;
73784: LD_ADDR_VAR 0 12
73788: PUSH
73789: CALL_OW 44
73793: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73794: LD_VAR 0 12
73798: PPUSH
73799: LD_VAR 0 8
73803: PPUSH
73804: LD_INT 0
73806: PPUSH
73807: CALL 75808 0 3
// end ;
73811: GO 73765
73813: POP
73814: POP
// if tigers then
73815: LD_VAR 0 2
73819: IFFALSE 73903
// for i = 1 to tigers do
73821: LD_ADDR_VAR 0 11
73825: PUSH
73826: DOUBLE
73827: LD_INT 1
73829: DEC
73830: ST_TO_ADDR
73831: LD_VAR 0 2
73835: PUSH
73836: FOR_TO
73837: IFFALSE 73901
// begin hc_class = class_tiger ;
73839: LD_ADDR_OWVAR 28
73843: PUSH
73844: LD_INT 14
73846: ST_TO_ADDR
// hc_gallery =  ;
73847: LD_ADDR_OWVAR 33
73851: PUSH
73852: LD_STRING 
73854: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73855: LD_ADDR_OWVAR 35
73859: PUSH
73860: LD_INT 7
73862: NEG
73863: PPUSH
73864: LD_INT 7
73866: PPUSH
73867: CALL_OW 12
73871: ST_TO_ADDR
// animal := CreateHuman ;
73872: LD_ADDR_VAR 0 12
73876: PUSH
73877: CALL_OW 44
73881: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73882: LD_VAR 0 12
73886: PPUSH
73887: LD_VAR 0 8
73891: PPUSH
73892: LD_INT 0
73894: PPUSH
73895: CALL 75808 0 3
// end ;
73899: GO 73836
73901: POP
73902: POP
// if apemans then
73903: LD_VAR 0 3
73907: IFFALSE 74030
// for i = 1 to apemans do
73909: LD_ADDR_VAR 0 11
73913: PUSH
73914: DOUBLE
73915: LD_INT 1
73917: DEC
73918: ST_TO_ADDR
73919: LD_VAR 0 3
73923: PUSH
73924: FOR_TO
73925: IFFALSE 74028
// begin hc_class = class_apeman ;
73927: LD_ADDR_OWVAR 28
73931: PUSH
73932: LD_INT 12
73934: ST_TO_ADDR
// hc_gallery =  ;
73935: LD_ADDR_OWVAR 33
73939: PUSH
73940: LD_STRING 
73942: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73943: LD_ADDR_OWVAR 35
73947: PUSH
73948: LD_INT 2
73950: NEG
73951: PPUSH
73952: LD_INT 2
73954: PPUSH
73955: CALL_OW 12
73959: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73960: LD_ADDR_OWVAR 31
73964: PUSH
73965: LD_INT 1
73967: PPUSH
73968: LD_INT 3
73970: PPUSH
73971: CALL_OW 12
73975: PUSH
73976: LD_INT 1
73978: PPUSH
73979: LD_INT 3
73981: PPUSH
73982: CALL_OW 12
73986: PUSH
73987: LD_INT 0
73989: PUSH
73990: LD_INT 0
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: ST_TO_ADDR
// animal := CreateHuman ;
73999: LD_ADDR_VAR 0 12
74003: PUSH
74004: CALL_OW 44
74008: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74009: LD_VAR 0 12
74013: PPUSH
74014: LD_VAR 0 8
74018: PPUSH
74019: LD_INT 0
74021: PPUSH
74022: CALL 75808 0 3
// end ;
74026: GO 73924
74028: POP
74029: POP
// if enchidnas then
74030: LD_VAR 0 4
74034: IFFALSE 74101
// for i = 1 to enchidnas do
74036: LD_ADDR_VAR 0 11
74040: PUSH
74041: DOUBLE
74042: LD_INT 1
74044: DEC
74045: ST_TO_ADDR
74046: LD_VAR 0 4
74050: PUSH
74051: FOR_TO
74052: IFFALSE 74099
// begin hc_class = 13 ;
74054: LD_ADDR_OWVAR 28
74058: PUSH
74059: LD_INT 13
74061: ST_TO_ADDR
// hc_gallery =  ;
74062: LD_ADDR_OWVAR 33
74066: PUSH
74067: LD_STRING 
74069: ST_TO_ADDR
// animal := CreateHuman ;
74070: LD_ADDR_VAR 0 12
74074: PUSH
74075: CALL_OW 44
74079: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74080: LD_VAR 0 12
74084: PPUSH
74085: LD_VAR 0 8
74089: PPUSH
74090: LD_INT 0
74092: PPUSH
74093: CALL 75808 0 3
// end ;
74097: GO 74051
74099: POP
74100: POP
// if fishes then
74101: LD_VAR 0 7
74105: IFFALSE 74172
// for i = 1 to fishes do
74107: LD_ADDR_VAR 0 11
74111: PUSH
74112: DOUBLE
74113: LD_INT 1
74115: DEC
74116: ST_TO_ADDR
74117: LD_VAR 0 7
74121: PUSH
74122: FOR_TO
74123: IFFALSE 74170
// begin hc_class = 20 ;
74125: LD_ADDR_OWVAR 28
74129: PUSH
74130: LD_INT 20
74132: ST_TO_ADDR
// hc_gallery =  ;
74133: LD_ADDR_OWVAR 33
74137: PUSH
74138: LD_STRING 
74140: ST_TO_ADDR
// animal := CreateHuman ;
74141: LD_ADDR_VAR 0 12
74145: PUSH
74146: CALL_OW 44
74150: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74151: LD_VAR 0 12
74155: PPUSH
74156: LD_VAR 0 9
74160: PPUSH
74161: LD_INT 0
74163: PPUSH
74164: CALL 75808 0 3
// end ;
74168: GO 74122
74170: POP
74171: POP
// end ;
74172: LD_VAR 0 10
74176: RET
// export function WantHeal ( sci , unit ) ; begin
74177: LD_INT 0
74179: PPUSH
// if GetTaskList ( sci ) > 0 then
74180: LD_VAR 0 1
74184: PPUSH
74185: CALL_OW 437
74189: PUSH
74190: LD_INT 0
74192: GREATER
74193: IFFALSE 74263
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74195: LD_VAR 0 1
74199: PPUSH
74200: CALL_OW 437
74204: PUSH
74205: LD_INT 1
74207: ARRAY
74208: PUSH
74209: LD_INT 1
74211: ARRAY
74212: PUSH
74213: LD_STRING l
74215: EQUAL
74216: PUSH
74217: LD_VAR 0 1
74221: PPUSH
74222: CALL_OW 437
74226: PUSH
74227: LD_INT 1
74229: ARRAY
74230: PUSH
74231: LD_INT 4
74233: ARRAY
74234: PUSH
74235: LD_VAR 0 2
74239: EQUAL
74240: AND
74241: IFFALSE 74253
// result := true else
74243: LD_ADDR_VAR 0 3
74247: PUSH
74248: LD_INT 1
74250: ST_TO_ADDR
74251: GO 74261
// result := false ;
74253: LD_ADDR_VAR 0 3
74257: PUSH
74258: LD_INT 0
74260: ST_TO_ADDR
// end else
74261: GO 74271
// result := false ;
74263: LD_ADDR_VAR 0 3
74267: PUSH
74268: LD_INT 0
74270: ST_TO_ADDR
// end ;
74271: LD_VAR 0 3
74275: RET
// export function HealTarget ( sci ) ; begin
74276: LD_INT 0
74278: PPUSH
// if not sci then
74279: LD_VAR 0 1
74283: NOT
74284: IFFALSE 74288
// exit ;
74286: GO 74353
// result := 0 ;
74288: LD_ADDR_VAR 0 2
74292: PUSH
74293: LD_INT 0
74295: ST_TO_ADDR
// if GetTaskList ( sci ) then
74296: LD_VAR 0 1
74300: PPUSH
74301: CALL_OW 437
74305: IFFALSE 74353
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74307: LD_VAR 0 1
74311: PPUSH
74312: CALL_OW 437
74316: PUSH
74317: LD_INT 1
74319: ARRAY
74320: PUSH
74321: LD_INT 1
74323: ARRAY
74324: PUSH
74325: LD_STRING l
74327: EQUAL
74328: IFFALSE 74353
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74330: LD_ADDR_VAR 0 2
74334: PUSH
74335: LD_VAR 0 1
74339: PPUSH
74340: CALL_OW 437
74344: PUSH
74345: LD_INT 1
74347: ARRAY
74348: PUSH
74349: LD_INT 4
74351: ARRAY
74352: ST_TO_ADDR
// end ;
74353: LD_VAR 0 2
74357: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74358: LD_INT 0
74360: PPUSH
74361: PPUSH
74362: PPUSH
74363: PPUSH
// if not base_units then
74364: LD_VAR 0 1
74368: NOT
74369: IFFALSE 74373
// exit ;
74371: GO 74460
// result := false ;
74373: LD_ADDR_VAR 0 2
74377: PUSH
74378: LD_INT 0
74380: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74381: LD_ADDR_VAR 0 5
74385: PUSH
74386: LD_VAR 0 1
74390: PPUSH
74391: LD_INT 21
74393: PUSH
74394: LD_INT 3
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: PPUSH
74401: CALL_OW 72
74405: ST_TO_ADDR
// if not tmp then
74406: LD_VAR 0 5
74410: NOT
74411: IFFALSE 74415
// exit ;
74413: GO 74460
// for i in tmp do
74415: LD_ADDR_VAR 0 3
74419: PUSH
74420: LD_VAR 0 5
74424: PUSH
74425: FOR_IN
74426: IFFALSE 74458
// begin result := EnemyInRange ( i , 22 ) ;
74428: LD_ADDR_VAR 0 2
74432: PUSH
74433: LD_VAR 0 3
74437: PPUSH
74438: LD_INT 22
74440: PPUSH
74441: CALL 72073 0 2
74445: ST_TO_ADDR
// if result then
74446: LD_VAR 0 2
74450: IFFALSE 74456
// exit ;
74452: POP
74453: POP
74454: GO 74460
// end ;
74456: GO 74425
74458: POP
74459: POP
// end ;
74460: LD_VAR 0 2
74464: RET
// export function FilterByTag ( units , tag ) ; begin
74465: LD_INT 0
74467: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74468: LD_ADDR_VAR 0 3
74472: PUSH
74473: LD_VAR 0 1
74477: PPUSH
74478: LD_INT 120
74480: PUSH
74481: LD_VAR 0 2
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: PPUSH
74490: CALL_OW 72
74494: ST_TO_ADDR
// end ;
74495: LD_VAR 0 3
74499: RET
// export function IsDriver ( un ) ; begin
74500: LD_INT 0
74502: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74503: LD_ADDR_VAR 0 2
74507: PUSH
74508: LD_VAR 0 1
74512: PUSH
74513: LD_INT 55
74515: PUSH
74516: EMPTY
74517: LIST
74518: PPUSH
74519: CALL_OW 69
74523: IN
74524: ST_TO_ADDR
// end ;
74525: LD_VAR 0 2
74529: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74530: LD_INT 0
74532: PPUSH
74533: PPUSH
// list := [ ] ;
74534: LD_ADDR_VAR 0 5
74538: PUSH
74539: EMPTY
74540: ST_TO_ADDR
// case d of 0 :
74541: LD_VAR 0 3
74545: PUSH
74546: LD_INT 0
74548: DOUBLE
74549: EQUAL
74550: IFTRUE 74554
74552: GO 74687
74554: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74555: LD_ADDR_VAR 0 5
74559: PUSH
74560: LD_VAR 0 1
74564: PUSH
74565: LD_INT 4
74567: MINUS
74568: PUSH
74569: LD_VAR 0 2
74573: PUSH
74574: LD_INT 4
74576: MINUS
74577: PUSH
74578: LD_INT 2
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: LIST
74585: PUSH
74586: LD_VAR 0 1
74590: PUSH
74591: LD_INT 3
74593: MINUS
74594: PUSH
74595: LD_VAR 0 2
74599: PUSH
74600: LD_INT 1
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: LIST
74607: PUSH
74608: LD_VAR 0 1
74612: PUSH
74613: LD_INT 4
74615: PLUS
74616: PUSH
74617: LD_VAR 0 2
74621: PUSH
74622: LD_INT 4
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: LIST
74629: PUSH
74630: LD_VAR 0 1
74634: PUSH
74635: LD_INT 3
74637: PLUS
74638: PUSH
74639: LD_VAR 0 2
74643: PUSH
74644: LD_INT 3
74646: PLUS
74647: PUSH
74648: LD_INT 5
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: LIST
74655: PUSH
74656: LD_VAR 0 1
74660: PUSH
74661: LD_VAR 0 2
74665: PUSH
74666: LD_INT 4
74668: PLUS
74669: PUSH
74670: LD_INT 0
74672: PUSH
74673: EMPTY
74674: LIST
74675: LIST
74676: LIST
74677: PUSH
74678: EMPTY
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: ST_TO_ADDR
// end ; 1 :
74685: GO 75385
74687: LD_INT 1
74689: DOUBLE
74690: EQUAL
74691: IFTRUE 74695
74693: GO 74828
74695: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74696: LD_ADDR_VAR 0 5
74700: PUSH
74701: LD_VAR 0 1
74705: PUSH
74706: LD_VAR 0 2
74710: PUSH
74711: LD_INT 4
74713: MINUS
74714: PUSH
74715: LD_INT 3
74717: PUSH
74718: EMPTY
74719: LIST
74720: LIST
74721: LIST
74722: PUSH
74723: LD_VAR 0 1
74727: PUSH
74728: LD_INT 3
74730: MINUS
74731: PUSH
74732: LD_VAR 0 2
74736: PUSH
74737: LD_INT 3
74739: MINUS
74740: PUSH
74741: LD_INT 2
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: LIST
74748: PUSH
74749: LD_VAR 0 1
74753: PUSH
74754: LD_INT 4
74756: MINUS
74757: PUSH
74758: LD_VAR 0 2
74762: PUSH
74763: LD_INT 1
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: LIST
74770: PUSH
74771: LD_VAR 0 1
74775: PUSH
74776: LD_VAR 0 2
74780: PUSH
74781: LD_INT 3
74783: PLUS
74784: PUSH
74785: LD_INT 0
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: LIST
74792: PUSH
74793: LD_VAR 0 1
74797: PUSH
74798: LD_INT 4
74800: PLUS
74801: PUSH
74802: LD_VAR 0 2
74806: PUSH
74807: LD_INT 4
74809: PLUS
74810: PUSH
74811: LD_INT 5
74813: PUSH
74814: EMPTY
74815: LIST
74816: LIST
74817: LIST
74818: PUSH
74819: EMPTY
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: ST_TO_ADDR
// end ; 2 :
74826: GO 75385
74828: LD_INT 2
74830: DOUBLE
74831: EQUAL
74832: IFTRUE 74836
74834: GO 74965
74836: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74837: LD_ADDR_VAR 0 5
74841: PUSH
74842: LD_VAR 0 1
74846: PUSH
74847: LD_VAR 0 2
74851: PUSH
74852: LD_INT 3
74854: MINUS
74855: PUSH
74856: LD_INT 3
74858: PUSH
74859: EMPTY
74860: LIST
74861: LIST
74862: LIST
74863: PUSH
74864: LD_VAR 0 1
74868: PUSH
74869: LD_INT 4
74871: PLUS
74872: PUSH
74873: LD_VAR 0 2
74877: PUSH
74878: LD_INT 4
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: LIST
74885: PUSH
74886: LD_VAR 0 1
74890: PUSH
74891: LD_VAR 0 2
74895: PUSH
74896: LD_INT 4
74898: PLUS
74899: PUSH
74900: LD_INT 0
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: LIST
74907: PUSH
74908: LD_VAR 0 1
74912: PUSH
74913: LD_INT 3
74915: MINUS
74916: PUSH
74917: LD_VAR 0 2
74921: PUSH
74922: LD_INT 1
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: LIST
74929: PUSH
74930: LD_VAR 0 1
74934: PUSH
74935: LD_INT 4
74937: MINUS
74938: PUSH
74939: LD_VAR 0 2
74943: PUSH
74944: LD_INT 4
74946: MINUS
74947: PUSH
74948: LD_INT 2
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: LIST
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: ST_TO_ADDR
// end ; 3 :
74963: GO 75385
74965: LD_INT 3
74967: DOUBLE
74968: EQUAL
74969: IFTRUE 74973
74971: GO 75106
74973: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74974: LD_ADDR_VAR 0 5
74978: PUSH
74979: LD_VAR 0 1
74983: PUSH
74984: LD_INT 3
74986: PLUS
74987: PUSH
74988: LD_VAR 0 2
74992: PUSH
74993: LD_INT 4
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: LIST
75000: PUSH
75001: LD_VAR 0 1
75005: PUSH
75006: LD_INT 4
75008: PLUS
75009: PUSH
75010: LD_VAR 0 2
75014: PUSH
75015: LD_INT 4
75017: PLUS
75018: PUSH
75019: LD_INT 5
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: LIST
75026: PUSH
75027: LD_VAR 0 1
75031: PUSH
75032: LD_INT 4
75034: MINUS
75035: PUSH
75036: LD_VAR 0 2
75040: PUSH
75041: LD_INT 1
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: LIST
75048: PUSH
75049: LD_VAR 0 1
75053: PUSH
75054: LD_VAR 0 2
75058: PUSH
75059: LD_INT 4
75061: MINUS
75062: PUSH
75063: LD_INT 3
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: LIST
75070: PUSH
75071: LD_VAR 0 1
75075: PUSH
75076: LD_INT 3
75078: MINUS
75079: PUSH
75080: LD_VAR 0 2
75084: PUSH
75085: LD_INT 3
75087: MINUS
75088: PUSH
75089: LD_INT 2
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: LIST
75096: PUSH
75097: EMPTY
75098: LIST
75099: LIST
75100: LIST
75101: LIST
75102: LIST
75103: ST_TO_ADDR
// end ; 4 :
75104: GO 75385
75106: LD_INT 4
75108: DOUBLE
75109: EQUAL
75110: IFTRUE 75114
75112: GO 75247
75114: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75115: LD_ADDR_VAR 0 5
75119: PUSH
75120: LD_VAR 0 1
75124: PUSH
75125: LD_VAR 0 2
75129: PUSH
75130: LD_INT 4
75132: PLUS
75133: PUSH
75134: LD_INT 0
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: LIST
75141: PUSH
75142: LD_VAR 0 1
75146: PUSH
75147: LD_INT 3
75149: PLUS
75150: PUSH
75151: LD_VAR 0 2
75155: PUSH
75156: LD_INT 3
75158: PLUS
75159: PUSH
75160: LD_INT 5
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: LIST
75167: PUSH
75168: LD_VAR 0 1
75172: PUSH
75173: LD_INT 4
75175: PLUS
75176: PUSH
75177: LD_VAR 0 2
75181: PUSH
75182: LD_INT 4
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: LIST
75189: PUSH
75190: LD_VAR 0 1
75194: PUSH
75195: LD_VAR 0 2
75199: PUSH
75200: LD_INT 3
75202: MINUS
75203: PUSH
75204: LD_INT 3
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: LIST
75211: PUSH
75212: LD_VAR 0 1
75216: PUSH
75217: LD_INT 4
75219: MINUS
75220: PUSH
75221: LD_VAR 0 2
75225: PUSH
75226: LD_INT 4
75228: MINUS
75229: PUSH
75230: LD_INT 2
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: LIST
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: LIST
75244: ST_TO_ADDR
// end ; 5 :
75245: GO 75385
75247: LD_INT 5
75249: DOUBLE
75250: EQUAL
75251: IFTRUE 75255
75253: GO 75384
75255: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75256: LD_ADDR_VAR 0 5
75260: PUSH
75261: LD_VAR 0 1
75265: PUSH
75266: LD_INT 4
75268: MINUS
75269: PUSH
75270: LD_VAR 0 2
75274: PUSH
75275: LD_INT 1
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: LIST
75282: PUSH
75283: LD_VAR 0 1
75287: PUSH
75288: LD_VAR 0 2
75292: PUSH
75293: LD_INT 4
75295: MINUS
75296: PUSH
75297: LD_INT 3
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: LIST
75304: PUSH
75305: LD_VAR 0 1
75309: PUSH
75310: LD_INT 4
75312: PLUS
75313: PUSH
75314: LD_VAR 0 2
75318: PUSH
75319: LD_INT 4
75321: PLUS
75322: PUSH
75323: LD_INT 5
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: LIST
75330: PUSH
75331: LD_VAR 0 1
75335: PUSH
75336: LD_INT 3
75338: PLUS
75339: PUSH
75340: LD_VAR 0 2
75344: PUSH
75345: LD_INT 4
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: LIST
75352: PUSH
75353: LD_VAR 0 1
75357: PUSH
75358: LD_VAR 0 2
75362: PUSH
75363: LD_INT 3
75365: PLUS
75366: PUSH
75367: LD_INT 0
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: LIST
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: ST_TO_ADDR
// end ; end ;
75382: GO 75385
75384: POP
// result := list ;
75385: LD_ADDR_VAR 0 4
75389: PUSH
75390: LD_VAR 0 5
75394: ST_TO_ADDR
// end ;
75395: LD_VAR 0 4
75399: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75400: LD_INT 0
75402: PPUSH
75403: PPUSH
75404: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75405: LD_VAR 0 1
75409: NOT
75410: PUSH
75411: LD_VAR 0 2
75415: PUSH
75416: LD_INT 1
75418: PUSH
75419: LD_INT 2
75421: PUSH
75422: LD_INT 3
75424: PUSH
75425: LD_INT 4
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: IN
75434: NOT
75435: OR
75436: IFFALSE 75440
// exit ;
75438: GO 75532
// tmp := [ ] ;
75440: LD_ADDR_VAR 0 5
75444: PUSH
75445: EMPTY
75446: ST_TO_ADDR
// for i in units do
75447: LD_ADDR_VAR 0 4
75451: PUSH
75452: LD_VAR 0 1
75456: PUSH
75457: FOR_IN
75458: IFFALSE 75501
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75460: LD_ADDR_VAR 0 5
75464: PUSH
75465: LD_VAR 0 5
75469: PPUSH
75470: LD_VAR 0 5
75474: PUSH
75475: LD_INT 1
75477: PLUS
75478: PPUSH
75479: LD_VAR 0 4
75483: PPUSH
75484: LD_VAR 0 2
75488: PPUSH
75489: CALL_OW 259
75493: PPUSH
75494: CALL_OW 2
75498: ST_TO_ADDR
75499: GO 75457
75501: POP
75502: POP
// if not tmp then
75503: LD_VAR 0 5
75507: NOT
75508: IFFALSE 75512
// exit ;
75510: GO 75532
// result := SortListByListDesc ( units , tmp ) ;
75512: LD_ADDR_VAR 0 3
75516: PUSH
75517: LD_VAR 0 1
75521: PPUSH
75522: LD_VAR 0 5
75526: PPUSH
75527: CALL_OW 77
75531: ST_TO_ADDR
// end ;
75532: LD_VAR 0 3
75536: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75537: LD_INT 0
75539: PPUSH
75540: PPUSH
75541: PPUSH
// result := false ;
75542: LD_ADDR_VAR 0 3
75546: PUSH
75547: LD_INT 0
75549: ST_TO_ADDR
// x := GetX ( building ) ;
75550: LD_ADDR_VAR 0 4
75554: PUSH
75555: LD_VAR 0 2
75559: PPUSH
75560: CALL_OW 250
75564: ST_TO_ADDR
// y := GetY ( building ) ;
75565: LD_ADDR_VAR 0 5
75569: PUSH
75570: LD_VAR 0 2
75574: PPUSH
75575: CALL_OW 251
75579: ST_TO_ADDR
// if not building or not x or not y then
75580: LD_VAR 0 2
75584: NOT
75585: PUSH
75586: LD_VAR 0 4
75590: NOT
75591: OR
75592: PUSH
75593: LD_VAR 0 5
75597: NOT
75598: OR
75599: IFFALSE 75603
// exit ;
75601: GO 75695
// if GetTaskList ( unit ) then
75603: LD_VAR 0 1
75607: PPUSH
75608: CALL_OW 437
75612: IFFALSE 75695
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75614: LD_STRING e
75616: PUSH
75617: LD_VAR 0 1
75621: PPUSH
75622: CALL_OW 437
75626: PUSH
75627: LD_INT 1
75629: ARRAY
75630: PUSH
75631: LD_INT 1
75633: ARRAY
75634: EQUAL
75635: PUSH
75636: LD_VAR 0 4
75640: PUSH
75641: LD_VAR 0 1
75645: PPUSH
75646: CALL_OW 437
75650: PUSH
75651: LD_INT 1
75653: ARRAY
75654: PUSH
75655: LD_INT 2
75657: ARRAY
75658: EQUAL
75659: AND
75660: PUSH
75661: LD_VAR 0 5
75665: PUSH
75666: LD_VAR 0 1
75670: PPUSH
75671: CALL_OW 437
75675: PUSH
75676: LD_INT 1
75678: ARRAY
75679: PUSH
75680: LD_INT 3
75682: ARRAY
75683: EQUAL
75684: AND
75685: IFFALSE 75695
// result := true end ;
75687: LD_ADDR_VAR 0 3
75691: PUSH
75692: LD_INT 1
75694: ST_TO_ADDR
// end ;
75695: LD_VAR 0 3
75699: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75700: LD_INT 0
75702: PPUSH
// result := false ;
75703: LD_ADDR_VAR 0 4
75707: PUSH
75708: LD_INT 0
75710: ST_TO_ADDR
// if GetTaskList ( unit ) then
75711: LD_VAR 0 1
75715: PPUSH
75716: CALL_OW 437
75720: IFFALSE 75803
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75722: LD_STRING M
75724: PUSH
75725: LD_VAR 0 1
75729: PPUSH
75730: CALL_OW 437
75734: PUSH
75735: LD_INT 1
75737: ARRAY
75738: PUSH
75739: LD_INT 1
75741: ARRAY
75742: EQUAL
75743: PUSH
75744: LD_VAR 0 2
75748: PUSH
75749: LD_VAR 0 1
75753: PPUSH
75754: CALL_OW 437
75758: PUSH
75759: LD_INT 1
75761: ARRAY
75762: PUSH
75763: LD_INT 2
75765: ARRAY
75766: EQUAL
75767: AND
75768: PUSH
75769: LD_VAR 0 3
75773: PUSH
75774: LD_VAR 0 1
75778: PPUSH
75779: CALL_OW 437
75783: PUSH
75784: LD_INT 1
75786: ARRAY
75787: PUSH
75788: LD_INT 3
75790: ARRAY
75791: EQUAL
75792: AND
75793: IFFALSE 75803
// result := true ;
75795: LD_ADDR_VAR 0 4
75799: PUSH
75800: LD_INT 1
75802: ST_TO_ADDR
// end ; end ;
75803: LD_VAR 0 4
75807: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75808: LD_INT 0
75810: PPUSH
75811: PPUSH
75812: PPUSH
75813: PPUSH
// if not unit or not area then
75814: LD_VAR 0 1
75818: NOT
75819: PUSH
75820: LD_VAR 0 2
75824: NOT
75825: OR
75826: IFFALSE 75830
// exit ;
75828: GO 75994
// tmp := AreaToList ( area , i ) ;
75830: LD_ADDR_VAR 0 6
75834: PUSH
75835: LD_VAR 0 2
75839: PPUSH
75840: LD_VAR 0 5
75844: PPUSH
75845: CALL_OW 517
75849: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75850: LD_ADDR_VAR 0 5
75854: PUSH
75855: DOUBLE
75856: LD_INT 1
75858: DEC
75859: ST_TO_ADDR
75860: LD_VAR 0 6
75864: PUSH
75865: LD_INT 1
75867: ARRAY
75868: PUSH
75869: FOR_TO
75870: IFFALSE 75992
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75872: LD_ADDR_VAR 0 7
75876: PUSH
75877: LD_VAR 0 6
75881: PUSH
75882: LD_INT 1
75884: ARRAY
75885: PUSH
75886: LD_VAR 0 5
75890: ARRAY
75891: PUSH
75892: LD_VAR 0 6
75896: PUSH
75897: LD_INT 2
75899: ARRAY
75900: PUSH
75901: LD_VAR 0 5
75905: ARRAY
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75911: LD_VAR 0 7
75915: PUSH
75916: LD_INT 1
75918: ARRAY
75919: PPUSH
75920: LD_VAR 0 7
75924: PUSH
75925: LD_INT 2
75927: ARRAY
75928: PPUSH
75929: CALL_OW 428
75933: PUSH
75934: LD_INT 0
75936: EQUAL
75937: IFFALSE 75990
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75939: LD_VAR 0 1
75943: PPUSH
75944: LD_VAR 0 7
75948: PUSH
75949: LD_INT 1
75951: ARRAY
75952: PPUSH
75953: LD_VAR 0 7
75957: PUSH
75958: LD_INT 2
75960: ARRAY
75961: PPUSH
75962: LD_VAR 0 3
75966: PPUSH
75967: CALL_OW 48
// result := IsPlaced ( unit ) ;
75971: LD_ADDR_VAR 0 4
75975: PUSH
75976: LD_VAR 0 1
75980: PPUSH
75981: CALL_OW 305
75985: ST_TO_ADDR
// exit ;
75986: POP
75987: POP
75988: GO 75994
// end ; end ;
75990: GO 75869
75992: POP
75993: POP
// end ;
75994: LD_VAR 0 4
75998: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75999: LD_INT 0
76001: PPUSH
76002: PPUSH
76003: PPUSH
// if not side or side > 8 then
76004: LD_VAR 0 1
76008: NOT
76009: PUSH
76010: LD_VAR 0 1
76014: PUSH
76015: LD_INT 8
76017: GREATER
76018: OR
76019: IFFALSE 76023
// exit ;
76021: GO 76210
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76023: LD_ADDR_VAR 0 4
76027: PUSH
76028: LD_INT 22
76030: PUSH
76031: LD_VAR 0 1
76035: PUSH
76036: EMPTY
76037: LIST
76038: LIST
76039: PUSH
76040: LD_INT 21
76042: PUSH
76043: LD_INT 3
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: PUSH
76050: EMPTY
76051: LIST
76052: LIST
76053: PPUSH
76054: CALL_OW 69
76058: ST_TO_ADDR
// if not tmp then
76059: LD_VAR 0 4
76063: NOT
76064: IFFALSE 76068
// exit ;
76066: GO 76210
// enable_addtolog := true ;
76068: LD_ADDR_OWVAR 81
76072: PUSH
76073: LD_INT 1
76075: ST_TO_ADDR
// AddToLog ( [ ) ;
76076: LD_STRING [
76078: PPUSH
76079: CALL_OW 561
// for i in tmp do
76083: LD_ADDR_VAR 0 3
76087: PUSH
76088: LD_VAR 0 4
76092: PUSH
76093: FOR_IN
76094: IFFALSE 76201
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76096: LD_STRING [
76098: PUSH
76099: LD_VAR 0 3
76103: PPUSH
76104: CALL_OW 266
76108: STR
76109: PUSH
76110: LD_STRING , 
76112: STR
76113: PUSH
76114: LD_VAR 0 3
76118: PPUSH
76119: CALL_OW 250
76123: STR
76124: PUSH
76125: LD_STRING , 
76127: STR
76128: PUSH
76129: LD_VAR 0 3
76133: PPUSH
76134: CALL_OW 251
76138: STR
76139: PUSH
76140: LD_STRING , 
76142: STR
76143: PUSH
76144: LD_VAR 0 3
76148: PPUSH
76149: CALL_OW 254
76153: STR
76154: PUSH
76155: LD_STRING , 
76157: STR
76158: PUSH
76159: LD_VAR 0 3
76163: PPUSH
76164: LD_INT 1
76166: PPUSH
76167: CALL_OW 268
76171: STR
76172: PUSH
76173: LD_STRING , 
76175: STR
76176: PUSH
76177: LD_VAR 0 3
76181: PPUSH
76182: LD_INT 2
76184: PPUSH
76185: CALL_OW 268
76189: STR
76190: PUSH
76191: LD_STRING ],
76193: STR
76194: PPUSH
76195: CALL_OW 561
// end ;
76199: GO 76093
76201: POP
76202: POP
// AddToLog ( ]; ) ;
76203: LD_STRING ];
76205: PPUSH
76206: CALL_OW 561
// end ;
76210: LD_VAR 0 2
76214: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76215: LD_INT 0
76217: PPUSH
76218: PPUSH
76219: PPUSH
76220: PPUSH
76221: PPUSH
// if not area or not rate or not max then
76222: LD_VAR 0 1
76226: NOT
76227: PUSH
76228: LD_VAR 0 2
76232: NOT
76233: OR
76234: PUSH
76235: LD_VAR 0 4
76239: NOT
76240: OR
76241: IFFALSE 76245
// exit ;
76243: GO 76434
// while 1 do
76245: LD_INT 1
76247: IFFALSE 76434
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76249: LD_ADDR_VAR 0 9
76253: PUSH
76254: LD_VAR 0 1
76258: PPUSH
76259: LD_INT 1
76261: PPUSH
76262: CALL_OW 287
76266: PUSH
76267: LD_INT 10
76269: MUL
76270: ST_TO_ADDR
// r := rate / 10 ;
76271: LD_ADDR_VAR 0 7
76275: PUSH
76276: LD_VAR 0 2
76280: PUSH
76281: LD_INT 10
76283: DIVREAL
76284: ST_TO_ADDR
// time := 1 1$00 ;
76285: LD_ADDR_VAR 0 8
76289: PUSH
76290: LD_INT 2100
76292: ST_TO_ADDR
// if amount < min then
76293: LD_VAR 0 9
76297: PUSH
76298: LD_VAR 0 3
76302: LESS
76303: IFFALSE 76321
// r := r * 2 else
76305: LD_ADDR_VAR 0 7
76309: PUSH
76310: LD_VAR 0 7
76314: PUSH
76315: LD_INT 2
76317: MUL
76318: ST_TO_ADDR
76319: GO 76347
// if amount > max then
76321: LD_VAR 0 9
76325: PUSH
76326: LD_VAR 0 4
76330: GREATER
76331: IFFALSE 76347
// r := r / 2 ;
76333: LD_ADDR_VAR 0 7
76337: PUSH
76338: LD_VAR 0 7
76342: PUSH
76343: LD_INT 2
76345: DIVREAL
76346: ST_TO_ADDR
// time := time / r ;
76347: LD_ADDR_VAR 0 8
76351: PUSH
76352: LD_VAR 0 8
76356: PUSH
76357: LD_VAR 0 7
76361: DIVREAL
76362: ST_TO_ADDR
// if time < 0 then
76363: LD_VAR 0 8
76367: PUSH
76368: LD_INT 0
76370: LESS
76371: IFFALSE 76388
// time := time * - 1 ;
76373: LD_ADDR_VAR 0 8
76377: PUSH
76378: LD_VAR 0 8
76382: PUSH
76383: LD_INT 1
76385: NEG
76386: MUL
76387: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76388: LD_VAR 0 8
76392: PUSH
76393: LD_INT 35
76395: PPUSH
76396: LD_INT 875
76398: PPUSH
76399: CALL_OW 12
76403: PLUS
76404: PPUSH
76405: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76409: LD_INT 1
76411: PPUSH
76412: LD_INT 5
76414: PPUSH
76415: CALL_OW 12
76419: PPUSH
76420: LD_VAR 0 1
76424: PPUSH
76425: LD_INT 1
76427: PPUSH
76428: CALL_OW 55
// end ;
76432: GO 76245
// end ;
76434: LD_VAR 0 5
76438: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76439: LD_INT 0
76441: PPUSH
76442: PPUSH
76443: PPUSH
76444: PPUSH
76445: PPUSH
76446: PPUSH
76447: PPUSH
76448: PPUSH
// if not turrets or not factories then
76449: LD_VAR 0 1
76453: NOT
76454: PUSH
76455: LD_VAR 0 2
76459: NOT
76460: OR
76461: IFFALSE 76465
// exit ;
76463: GO 76772
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76465: LD_ADDR_VAR 0 10
76469: PUSH
76470: LD_INT 5
76472: PUSH
76473: LD_INT 6
76475: PUSH
76476: EMPTY
76477: LIST
76478: LIST
76479: PUSH
76480: LD_INT 2
76482: PUSH
76483: LD_INT 4
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: PUSH
76490: LD_INT 3
76492: PUSH
76493: LD_INT 5
76495: PUSH
76496: EMPTY
76497: LIST
76498: LIST
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: LIST
76504: PUSH
76505: LD_INT 24
76507: PUSH
76508: LD_INT 25
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: PUSH
76515: LD_INT 23
76517: PUSH
76518: LD_INT 27
76520: PUSH
76521: EMPTY
76522: LIST
76523: LIST
76524: PUSH
76525: EMPTY
76526: LIST
76527: LIST
76528: PUSH
76529: LD_INT 42
76531: PUSH
76532: LD_INT 43
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: LD_INT 44
76541: PUSH
76542: LD_INT 46
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PUSH
76549: LD_INT 45
76551: PUSH
76552: LD_INT 47
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: LIST
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: LIST
76568: ST_TO_ADDR
// result := [ ] ;
76569: LD_ADDR_VAR 0 3
76573: PUSH
76574: EMPTY
76575: ST_TO_ADDR
// for i in turrets do
76576: LD_ADDR_VAR 0 4
76580: PUSH
76581: LD_VAR 0 1
76585: PUSH
76586: FOR_IN
76587: IFFALSE 76770
// begin nat := GetNation ( i ) ;
76589: LD_ADDR_VAR 0 7
76593: PUSH
76594: LD_VAR 0 4
76598: PPUSH
76599: CALL_OW 248
76603: ST_TO_ADDR
// weapon := 0 ;
76604: LD_ADDR_VAR 0 8
76608: PUSH
76609: LD_INT 0
76611: ST_TO_ADDR
// if not nat then
76612: LD_VAR 0 7
76616: NOT
76617: IFFALSE 76621
// continue ;
76619: GO 76586
// for j in list [ nat ] do
76621: LD_ADDR_VAR 0 5
76625: PUSH
76626: LD_VAR 0 10
76630: PUSH
76631: LD_VAR 0 7
76635: ARRAY
76636: PUSH
76637: FOR_IN
76638: IFFALSE 76679
// if GetBWeapon ( i ) = j [ 1 ] then
76640: LD_VAR 0 4
76644: PPUSH
76645: CALL_OW 269
76649: PUSH
76650: LD_VAR 0 5
76654: PUSH
76655: LD_INT 1
76657: ARRAY
76658: EQUAL
76659: IFFALSE 76677
// begin weapon := j [ 2 ] ;
76661: LD_ADDR_VAR 0 8
76665: PUSH
76666: LD_VAR 0 5
76670: PUSH
76671: LD_INT 2
76673: ARRAY
76674: ST_TO_ADDR
// break ;
76675: GO 76679
// end ;
76677: GO 76637
76679: POP
76680: POP
// if not weapon then
76681: LD_VAR 0 8
76685: NOT
76686: IFFALSE 76690
// continue ;
76688: GO 76586
// for k in factories do
76690: LD_ADDR_VAR 0 6
76694: PUSH
76695: LD_VAR 0 2
76699: PUSH
76700: FOR_IN
76701: IFFALSE 76766
// begin weapons := AvailableWeaponList ( k ) ;
76703: LD_ADDR_VAR 0 9
76707: PUSH
76708: LD_VAR 0 6
76712: PPUSH
76713: CALL_OW 478
76717: ST_TO_ADDR
// if not weapons then
76718: LD_VAR 0 9
76722: NOT
76723: IFFALSE 76727
// continue ;
76725: GO 76700
// if weapon in weapons then
76727: LD_VAR 0 8
76731: PUSH
76732: LD_VAR 0 9
76736: IN
76737: IFFALSE 76764
// begin result := [ i , weapon ] ;
76739: LD_ADDR_VAR 0 3
76743: PUSH
76744: LD_VAR 0 4
76748: PUSH
76749: LD_VAR 0 8
76753: PUSH
76754: EMPTY
76755: LIST
76756: LIST
76757: ST_TO_ADDR
// exit ;
76758: POP
76759: POP
76760: POP
76761: POP
76762: GO 76772
// end ; end ;
76764: GO 76700
76766: POP
76767: POP
// end ;
76768: GO 76586
76770: POP
76771: POP
// end ;
76772: LD_VAR 0 3
76776: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76777: LD_INT 0
76779: PPUSH
// if not side or side > 8 then
76780: LD_VAR 0 3
76784: NOT
76785: PUSH
76786: LD_VAR 0 3
76790: PUSH
76791: LD_INT 8
76793: GREATER
76794: OR
76795: IFFALSE 76799
// exit ;
76797: GO 76858
// if not range then
76799: LD_VAR 0 4
76803: NOT
76804: IFFALSE 76815
// range := - 12 ;
76806: LD_ADDR_VAR 0 4
76810: PUSH
76811: LD_INT 12
76813: NEG
76814: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76815: LD_VAR 0 1
76819: PPUSH
76820: LD_VAR 0 2
76824: PPUSH
76825: LD_VAR 0 3
76829: PPUSH
76830: LD_VAR 0 4
76834: PPUSH
76835: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76839: LD_VAR 0 1
76843: PPUSH
76844: LD_VAR 0 2
76848: PPUSH
76849: LD_VAR 0 3
76853: PPUSH
76854: CALL_OW 331
// end ;
76858: LD_VAR 0 5
76862: RET
// export function Video ( mode ) ; begin
76863: LD_INT 0
76865: PPUSH
// ingame_video = mode ;
76866: LD_ADDR_OWVAR 52
76870: PUSH
76871: LD_VAR 0 1
76875: ST_TO_ADDR
// interface_hidden = mode ;
76876: LD_ADDR_OWVAR 54
76880: PUSH
76881: LD_VAR 0 1
76885: ST_TO_ADDR
// end ;
76886: LD_VAR 0 2
76890: RET
// export function Join ( array , element ) ; begin
76891: LD_INT 0
76893: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76894: LD_ADDR_VAR 0 3
76898: PUSH
76899: LD_VAR 0 1
76903: PPUSH
76904: LD_VAR 0 1
76908: PUSH
76909: LD_INT 1
76911: PLUS
76912: PPUSH
76913: LD_VAR 0 2
76917: PPUSH
76918: CALL_OW 1
76922: ST_TO_ADDR
// end ;
76923: LD_VAR 0 3
76927: RET
// export function JoinUnion ( array , element ) ; begin
76928: LD_INT 0
76930: PPUSH
// result := array union element ;
76931: LD_ADDR_VAR 0 3
76935: PUSH
76936: LD_VAR 0 1
76940: PUSH
76941: LD_VAR 0 2
76945: UNION
76946: ST_TO_ADDR
// end ;
76947: LD_VAR 0 3
76951: RET
// export function GetBehemoths ( side ) ; begin
76952: LD_INT 0
76954: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76955: LD_ADDR_VAR 0 2
76959: PUSH
76960: LD_INT 22
76962: PUSH
76963: LD_VAR 0 1
76967: PUSH
76968: EMPTY
76969: LIST
76970: LIST
76971: PUSH
76972: LD_INT 31
76974: PUSH
76975: LD_INT 25
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: PUSH
76982: EMPTY
76983: LIST
76984: LIST
76985: PPUSH
76986: CALL_OW 69
76990: ST_TO_ADDR
// end ;
76991: LD_VAR 0 2
76995: RET
// export function Shuffle ( array ) ; var i , index ; begin
76996: LD_INT 0
76998: PPUSH
76999: PPUSH
77000: PPUSH
// result := [ ] ;
77001: LD_ADDR_VAR 0 2
77005: PUSH
77006: EMPTY
77007: ST_TO_ADDR
// if not array then
77008: LD_VAR 0 1
77012: NOT
77013: IFFALSE 77017
// exit ;
77015: GO 77116
// Randomize ;
77017: CALL_OW 10
// for i = array downto 1 do
77021: LD_ADDR_VAR 0 3
77025: PUSH
77026: DOUBLE
77027: LD_VAR 0 1
77031: INC
77032: ST_TO_ADDR
77033: LD_INT 1
77035: PUSH
77036: FOR_DOWNTO
77037: IFFALSE 77114
// begin index := rand ( 1 , array ) ;
77039: LD_ADDR_VAR 0 4
77043: PUSH
77044: LD_INT 1
77046: PPUSH
77047: LD_VAR 0 1
77051: PPUSH
77052: CALL_OW 12
77056: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77057: LD_ADDR_VAR 0 2
77061: PUSH
77062: LD_VAR 0 2
77066: PPUSH
77067: LD_VAR 0 2
77071: PUSH
77072: LD_INT 1
77074: PLUS
77075: PPUSH
77076: LD_VAR 0 1
77080: PUSH
77081: LD_VAR 0 4
77085: ARRAY
77086: PPUSH
77087: CALL_OW 2
77091: ST_TO_ADDR
// array := Delete ( array , index ) ;
77092: LD_ADDR_VAR 0 1
77096: PUSH
77097: LD_VAR 0 1
77101: PPUSH
77102: LD_VAR 0 4
77106: PPUSH
77107: CALL_OW 3
77111: ST_TO_ADDR
// end ;
77112: GO 77036
77114: POP
77115: POP
// end ;
77116: LD_VAR 0 2
77120: RET
// export function GetBaseMaterials ( base ) ; begin
77121: LD_INT 0
77123: PPUSH
// result := [ 0 , 0 , 0 ] ;
77124: LD_ADDR_VAR 0 2
77128: PUSH
77129: LD_INT 0
77131: PUSH
77132: LD_INT 0
77134: PUSH
77135: LD_INT 0
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: LIST
77142: ST_TO_ADDR
// if not base then
77143: LD_VAR 0 1
77147: NOT
77148: IFFALSE 77152
// exit ;
77150: GO 77201
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77152: LD_ADDR_VAR 0 2
77156: PUSH
77157: LD_VAR 0 1
77161: PPUSH
77162: LD_INT 1
77164: PPUSH
77165: CALL_OW 275
77169: PUSH
77170: LD_VAR 0 1
77174: PPUSH
77175: LD_INT 2
77177: PPUSH
77178: CALL_OW 275
77182: PUSH
77183: LD_VAR 0 1
77187: PPUSH
77188: LD_INT 3
77190: PPUSH
77191: CALL_OW 275
77195: PUSH
77196: EMPTY
77197: LIST
77198: LIST
77199: LIST
77200: ST_TO_ADDR
// end ;
77201: LD_VAR 0 2
77205: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77206: LD_INT 0
77208: PPUSH
77209: PPUSH
// result := array ;
77210: LD_ADDR_VAR 0 3
77214: PUSH
77215: LD_VAR 0 1
77219: ST_TO_ADDR
// if size >= result then
77220: LD_VAR 0 2
77224: PUSH
77225: LD_VAR 0 3
77229: GREATEREQUAL
77230: IFFALSE 77234
// exit ;
77232: GO 77284
// if size then
77234: LD_VAR 0 2
77238: IFFALSE 77284
// for i := array downto size do
77240: LD_ADDR_VAR 0 4
77244: PUSH
77245: DOUBLE
77246: LD_VAR 0 1
77250: INC
77251: ST_TO_ADDR
77252: LD_VAR 0 2
77256: PUSH
77257: FOR_DOWNTO
77258: IFFALSE 77282
// result := Delete ( result , result ) ;
77260: LD_ADDR_VAR 0 3
77264: PUSH
77265: LD_VAR 0 3
77269: PPUSH
77270: LD_VAR 0 3
77274: PPUSH
77275: CALL_OW 3
77279: ST_TO_ADDR
77280: GO 77257
77282: POP
77283: POP
// end ;
77284: LD_VAR 0 3
77288: RET
// export function ComExit ( unit ) ; var tmp ; begin
77289: LD_INT 0
77291: PPUSH
77292: PPUSH
// if not IsInUnit ( unit ) then
77293: LD_VAR 0 1
77297: PPUSH
77298: CALL_OW 310
77302: NOT
77303: IFFALSE 77307
// exit ;
77305: GO 77367
// tmp := IsInUnit ( unit ) ;
77307: LD_ADDR_VAR 0 3
77311: PUSH
77312: LD_VAR 0 1
77316: PPUSH
77317: CALL_OW 310
77321: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77322: LD_VAR 0 3
77326: PPUSH
77327: CALL_OW 247
77331: PUSH
77332: LD_INT 2
77334: EQUAL
77335: IFFALSE 77348
// ComExitVehicle ( unit ) else
77337: LD_VAR 0 1
77341: PPUSH
77342: CALL_OW 121
77346: GO 77357
// ComExitBuilding ( unit ) ;
77348: LD_VAR 0 1
77352: PPUSH
77353: CALL_OW 122
// result := tmp ;
77357: LD_ADDR_VAR 0 2
77361: PUSH
77362: LD_VAR 0 3
77366: ST_TO_ADDR
// end ;
77367: LD_VAR 0 2
77371: RET
// export function ComExitAll ( units ) ; var i ; begin
77372: LD_INT 0
77374: PPUSH
77375: PPUSH
// if not units then
77376: LD_VAR 0 1
77380: NOT
77381: IFFALSE 77385
// exit ;
77383: GO 77411
// for i in units do
77385: LD_ADDR_VAR 0 3
77389: PUSH
77390: LD_VAR 0 1
77394: PUSH
77395: FOR_IN
77396: IFFALSE 77409
// ComExit ( i ) ;
77398: LD_VAR 0 3
77402: PPUSH
77403: CALL 77289 0 1
77407: GO 77395
77409: POP
77410: POP
// end ;
77411: LD_VAR 0 2
77415: RET
// export function ResetHc ; begin
77416: LD_INT 0
77418: PPUSH
// InitHc ;
77419: CALL_OW 19
// hc_importance := 0 ;
77423: LD_ADDR_OWVAR 32
77427: PUSH
77428: LD_INT 0
77430: ST_TO_ADDR
// end ;
77431: LD_VAR 0 1
77435: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77436: LD_INT 0
77438: PPUSH
77439: PPUSH
77440: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77441: LD_ADDR_VAR 0 6
77445: PUSH
77446: LD_VAR 0 1
77450: PUSH
77451: LD_VAR 0 3
77455: PLUS
77456: PUSH
77457: LD_INT 2
77459: DIV
77460: ST_TO_ADDR
// if _x < 0 then
77461: LD_VAR 0 6
77465: PUSH
77466: LD_INT 0
77468: LESS
77469: IFFALSE 77486
// _x := _x * - 1 ;
77471: LD_ADDR_VAR 0 6
77475: PUSH
77476: LD_VAR 0 6
77480: PUSH
77481: LD_INT 1
77483: NEG
77484: MUL
77485: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77486: LD_ADDR_VAR 0 7
77490: PUSH
77491: LD_VAR 0 2
77495: PUSH
77496: LD_VAR 0 4
77500: PLUS
77501: PUSH
77502: LD_INT 2
77504: DIV
77505: ST_TO_ADDR
// if _y < 0 then
77506: LD_VAR 0 7
77510: PUSH
77511: LD_INT 0
77513: LESS
77514: IFFALSE 77531
// _y := _y * - 1 ;
77516: LD_ADDR_VAR 0 7
77520: PUSH
77521: LD_VAR 0 7
77525: PUSH
77526: LD_INT 1
77528: NEG
77529: MUL
77530: ST_TO_ADDR
// result := [ _x , _y ] ;
77531: LD_ADDR_VAR 0 5
77535: PUSH
77536: LD_VAR 0 6
77540: PUSH
77541: LD_VAR 0 7
77545: PUSH
77546: EMPTY
77547: LIST
77548: LIST
77549: ST_TO_ADDR
// end ;
77550: LD_VAR 0 5
77554: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77555: LD_INT 0
77557: PPUSH
77558: PPUSH
77559: PPUSH
77560: PPUSH
// task := GetTaskList ( unit ) ;
77561: LD_ADDR_VAR 0 7
77565: PUSH
77566: LD_VAR 0 1
77570: PPUSH
77571: CALL_OW 437
77575: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77576: LD_VAR 0 7
77580: NOT
77581: PUSH
77582: LD_VAR 0 1
77586: PPUSH
77587: LD_VAR 0 2
77591: PPUSH
77592: CALL_OW 308
77596: NOT
77597: AND
77598: IFFALSE 77602
// exit ;
77600: GO 77720
// if IsInArea ( unit , area ) then
77602: LD_VAR 0 1
77606: PPUSH
77607: LD_VAR 0 2
77611: PPUSH
77612: CALL_OW 308
77616: IFFALSE 77634
// begin ComMoveToArea ( unit , goAway ) ;
77618: LD_VAR 0 1
77622: PPUSH
77623: LD_VAR 0 3
77627: PPUSH
77628: CALL_OW 113
// exit ;
77632: GO 77720
// end ; if task [ 1 ] [ 1 ] <> M then
77634: LD_VAR 0 7
77638: PUSH
77639: LD_INT 1
77641: ARRAY
77642: PUSH
77643: LD_INT 1
77645: ARRAY
77646: PUSH
77647: LD_STRING M
77649: NONEQUAL
77650: IFFALSE 77654
// exit ;
77652: GO 77720
// x := task [ 1 ] [ 2 ] ;
77654: LD_ADDR_VAR 0 5
77658: PUSH
77659: LD_VAR 0 7
77663: PUSH
77664: LD_INT 1
77666: ARRAY
77667: PUSH
77668: LD_INT 2
77670: ARRAY
77671: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77672: LD_ADDR_VAR 0 6
77676: PUSH
77677: LD_VAR 0 7
77681: PUSH
77682: LD_INT 1
77684: ARRAY
77685: PUSH
77686: LD_INT 3
77688: ARRAY
77689: ST_TO_ADDR
// if InArea ( x , y , area ) then
77690: LD_VAR 0 5
77694: PPUSH
77695: LD_VAR 0 6
77699: PPUSH
77700: LD_VAR 0 2
77704: PPUSH
77705: CALL_OW 309
77709: IFFALSE 77720
// ComStop ( unit ) ;
77711: LD_VAR 0 1
77715: PPUSH
77716: CALL_OW 141
// end ;
77720: LD_VAR 0 4
77724: RET
// export function Abs ( value ) ; begin
77725: LD_INT 0
77727: PPUSH
// result := value ;
77728: LD_ADDR_VAR 0 2
77732: PUSH
77733: LD_VAR 0 1
77737: ST_TO_ADDR
// if value < 0 then
77738: LD_VAR 0 1
77742: PUSH
77743: LD_INT 0
77745: LESS
77746: IFFALSE 77763
// result := value * - 1 ;
77748: LD_ADDR_VAR 0 2
77752: PUSH
77753: LD_VAR 0 1
77757: PUSH
77758: LD_INT 1
77760: NEG
77761: MUL
77762: ST_TO_ADDR
// end ;
77763: LD_VAR 0 2
77767: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77768: LD_INT 0
77770: PPUSH
77771: PPUSH
77772: PPUSH
77773: PPUSH
77774: PPUSH
77775: PPUSH
77776: PPUSH
77777: PPUSH
// if not unit or not building then
77778: LD_VAR 0 1
77782: NOT
77783: PUSH
77784: LD_VAR 0 2
77788: NOT
77789: OR
77790: IFFALSE 77794
// exit ;
77792: GO 78020
// x := GetX ( building ) ;
77794: LD_ADDR_VAR 0 4
77798: PUSH
77799: LD_VAR 0 2
77803: PPUSH
77804: CALL_OW 250
77808: ST_TO_ADDR
// y := GetY ( building ) ;
77809: LD_ADDR_VAR 0 6
77813: PUSH
77814: LD_VAR 0 2
77818: PPUSH
77819: CALL_OW 251
77823: ST_TO_ADDR
// d := GetDir ( building ) ;
77824: LD_ADDR_VAR 0 8
77828: PUSH
77829: LD_VAR 0 2
77833: PPUSH
77834: CALL_OW 254
77838: ST_TO_ADDR
// r := 4 ;
77839: LD_ADDR_VAR 0 9
77843: PUSH
77844: LD_INT 4
77846: ST_TO_ADDR
// for i := 1 to 5 do
77847: LD_ADDR_VAR 0 10
77851: PUSH
77852: DOUBLE
77853: LD_INT 1
77855: DEC
77856: ST_TO_ADDR
77857: LD_INT 5
77859: PUSH
77860: FOR_TO
77861: IFFALSE 78018
// begin _x := ShiftX ( x , d , r + i ) ;
77863: LD_ADDR_VAR 0 5
77867: PUSH
77868: LD_VAR 0 4
77872: PPUSH
77873: LD_VAR 0 8
77877: PPUSH
77878: LD_VAR 0 9
77882: PUSH
77883: LD_VAR 0 10
77887: PLUS
77888: PPUSH
77889: CALL_OW 272
77893: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77894: LD_ADDR_VAR 0 7
77898: PUSH
77899: LD_VAR 0 6
77903: PPUSH
77904: LD_VAR 0 8
77908: PPUSH
77909: LD_VAR 0 9
77913: PUSH
77914: LD_VAR 0 10
77918: PLUS
77919: PPUSH
77920: CALL_OW 273
77924: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77925: LD_VAR 0 5
77929: PPUSH
77930: LD_VAR 0 7
77934: PPUSH
77935: CALL_OW 488
77939: PUSH
77940: LD_VAR 0 5
77944: PPUSH
77945: LD_VAR 0 7
77949: PPUSH
77950: CALL_OW 428
77954: PPUSH
77955: CALL_OW 247
77959: PUSH
77960: LD_INT 3
77962: PUSH
77963: LD_INT 2
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: IN
77970: NOT
77971: AND
77972: IFFALSE 78016
// begin ComMoveXY ( unit , _x , _y ) ;
77974: LD_VAR 0 1
77978: PPUSH
77979: LD_VAR 0 5
77983: PPUSH
77984: LD_VAR 0 7
77988: PPUSH
77989: CALL_OW 111
// result := [ _x , _y ] ;
77993: LD_ADDR_VAR 0 3
77997: PUSH
77998: LD_VAR 0 5
78002: PUSH
78003: LD_VAR 0 7
78007: PUSH
78008: EMPTY
78009: LIST
78010: LIST
78011: ST_TO_ADDR
// exit ;
78012: POP
78013: POP
78014: GO 78020
// end ; end ;
78016: GO 77860
78018: POP
78019: POP
// end ;
78020: LD_VAR 0 3
78024: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78025: LD_INT 0
78027: PPUSH
78028: PPUSH
78029: PPUSH
// result := 0 ;
78030: LD_ADDR_VAR 0 3
78034: PUSH
78035: LD_INT 0
78037: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78038: LD_VAR 0 1
78042: PUSH
78043: LD_INT 0
78045: LESS
78046: PUSH
78047: LD_VAR 0 1
78051: PUSH
78052: LD_INT 8
78054: GREATER
78055: OR
78056: PUSH
78057: LD_VAR 0 2
78061: PUSH
78062: LD_INT 0
78064: LESS
78065: OR
78066: PUSH
78067: LD_VAR 0 2
78071: PUSH
78072: LD_INT 8
78074: GREATER
78075: OR
78076: IFFALSE 78080
// exit ;
78078: GO 78155
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78080: LD_ADDR_VAR 0 4
78084: PUSH
78085: LD_INT 22
78087: PUSH
78088: LD_VAR 0 2
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: PPUSH
78097: CALL_OW 69
78101: PUSH
78102: FOR_IN
78103: IFFALSE 78153
// begin un := UnitShoot ( i ) ;
78105: LD_ADDR_VAR 0 5
78109: PUSH
78110: LD_VAR 0 4
78114: PPUSH
78115: CALL_OW 504
78119: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78120: LD_VAR 0 5
78124: PPUSH
78125: CALL_OW 255
78129: PUSH
78130: LD_VAR 0 1
78134: EQUAL
78135: IFFALSE 78151
// begin result := un ;
78137: LD_ADDR_VAR 0 3
78141: PUSH
78142: LD_VAR 0 5
78146: ST_TO_ADDR
// exit ;
78147: POP
78148: POP
78149: GO 78155
// end ; end ;
78151: GO 78102
78153: POP
78154: POP
// end ;
78155: LD_VAR 0 3
78159: RET
// export function GetCargoBay ( units ) ; begin
78160: LD_INT 0
78162: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78163: LD_ADDR_VAR 0 2
78167: PUSH
78168: LD_VAR 0 1
78172: PPUSH
78173: LD_INT 2
78175: PUSH
78176: LD_INT 34
78178: PUSH
78179: LD_INT 12
78181: PUSH
78182: EMPTY
78183: LIST
78184: LIST
78185: PUSH
78186: LD_INT 34
78188: PUSH
78189: LD_INT 51
78191: PUSH
78192: EMPTY
78193: LIST
78194: LIST
78195: PUSH
78196: LD_INT 34
78198: PUSH
78199: LD_INT 32
78201: PUSH
78202: EMPTY
78203: LIST
78204: LIST
78205: PUSH
78206: LD_INT 34
78208: PUSH
78209: LD_INT 89
78211: PUSH
78212: EMPTY
78213: LIST
78214: LIST
78215: PUSH
78216: EMPTY
78217: LIST
78218: LIST
78219: LIST
78220: LIST
78221: LIST
78222: PPUSH
78223: CALL_OW 72
78227: ST_TO_ADDR
// end ;
78228: LD_VAR 0 2
78232: RET
// export function Negate ( value ) ; begin
78233: LD_INT 0
78235: PPUSH
// result := not value ;
78236: LD_ADDR_VAR 0 2
78240: PUSH
78241: LD_VAR 0 1
78245: NOT
78246: ST_TO_ADDR
// end ;
78247: LD_VAR 0 2
78251: RET
// export function Inc ( value ) ; begin
78252: LD_INT 0
78254: PPUSH
// result := value + 1 ;
78255: LD_ADDR_VAR 0 2
78259: PUSH
78260: LD_VAR 0 1
78264: PUSH
78265: LD_INT 1
78267: PLUS
78268: ST_TO_ADDR
// end ;
78269: LD_VAR 0 2
78273: RET
// export function Dec ( value ) ; begin
78274: LD_INT 0
78276: PPUSH
// result := value - 1 ;
78277: LD_ADDR_VAR 0 2
78281: PUSH
78282: LD_VAR 0 1
78286: PUSH
78287: LD_INT 1
78289: MINUS
78290: ST_TO_ADDR
// end ;
78291: LD_VAR 0 2
78295: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78296: LD_INT 0
78298: PPUSH
78299: PPUSH
78300: PPUSH
78301: PPUSH
78302: PPUSH
78303: PPUSH
78304: PPUSH
78305: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78306: LD_VAR 0 1
78310: PPUSH
78311: LD_VAR 0 2
78315: PPUSH
78316: CALL_OW 488
78320: NOT
78321: PUSH
78322: LD_VAR 0 3
78326: PPUSH
78327: LD_VAR 0 4
78331: PPUSH
78332: CALL_OW 488
78336: NOT
78337: OR
78338: IFFALSE 78351
// begin result := - 1 ;
78340: LD_ADDR_VAR 0 5
78344: PUSH
78345: LD_INT 1
78347: NEG
78348: ST_TO_ADDR
// exit ;
78349: GO 78586
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78351: LD_ADDR_VAR 0 12
78355: PUSH
78356: LD_VAR 0 1
78360: PPUSH
78361: LD_VAR 0 2
78365: PPUSH
78366: LD_VAR 0 3
78370: PPUSH
78371: LD_VAR 0 4
78375: PPUSH
78376: CALL 77436 0 4
78380: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78381: LD_ADDR_VAR 0 11
78385: PUSH
78386: LD_VAR 0 1
78390: PPUSH
78391: LD_VAR 0 2
78395: PPUSH
78396: LD_VAR 0 12
78400: PUSH
78401: LD_INT 1
78403: ARRAY
78404: PPUSH
78405: LD_VAR 0 12
78409: PUSH
78410: LD_INT 2
78412: ARRAY
78413: PPUSH
78414: CALL_OW 298
78418: ST_TO_ADDR
// distance := 9999 ;
78419: LD_ADDR_VAR 0 10
78423: PUSH
78424: LD_INT 9999
78426: ST_TO_ADDR
// for i := 0 to 5 do
78427: LD_ADDR_VAR 0 6
78431: PUSH
78432: DOUBLE
78433: LD_INT 0
78435: DEC
78436: ST_TO_ADDR
78437: LD_INT 5
78439: PUSH
78440: FOR_TO
78441: IFFALSE 78584
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78443: LD_ADDR_VAR 0 7
78447: PUSH
78448: LD_VAR 0 1
78452: PPUSH
78453: LD_VAR 0 6
78457: PPUSH
78458: LD_VAR 0 11
78462: PPUSH
78463: CALL_OW 272
78467: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78468: LD_ADDR_VAR 0 8
78472: PUSH
78473: LD_VAR 0 2
78477: PPUSH
78478: LD_VAR 0 6
78482: PPUSH
78483: LD_VAR 0 11
78487: PPUSH
78488: CALL_OW 273
78492: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78493: LD_VAR 0 7
78497: PPUSH
78498: LD_VAR 0 8
78502: PPUSH
78503: CALL_OW 488
78507: NOT
78508: IFFALSE 78512
// continue ;
78510: GO 78440
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78512: LD_ADDR_VAR 0 9
78516: PUSH
78517: LD_VAR 0 12
78521: PUSH
78522: LD_INT 1
78524: ARRAY
78525: PPUSH
78526: LD_VAR 0 12
78530: PUSH
78531: LD_INT 2
78533: ARRAY
78534: PPUSH
78535: LD_VAR 0 7
78539: PPUSH
78540: LD_VAR 0 8
78544: PPUSH
78545: CALL_OW 298
78549: ST_TO_ADDR
// if tmp < distance then
78550: LD_VAR 0 9
78554: PUSH
78555: LD_VAR 0 10
78559: LESS
78560: IFFALSE 78582
// begin result := i ;
78562: LD_ADDR_VAR 0 5
78566: PUSH
78567: LD_VAR 0 6
78571: ST_TO_ADDR
// distance := tmp ;
78572: LD_ADDR_VAR 0 10
78576: PUSH
78577: LD_VAR 0 9
78581: ST_TO_ADDR
// end ; end ;
78582: GO 78440
78584: POP
78585: POP
// end ;
78586: LD_VAR 0 5
78590: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78591: LD_INT 0
78593: PPUSH
78594: PPUSH
// if not driver or not IsInUnit ( driver ) then
78595: LD_VAR 0 1
78599: NOT
78600: PUSH
78601: LD_VAR 0 1
78605: PPUSH
78606: CALL_OW 310
78610: NOT
78611: OR
78612: IFFALSE 78616
// exit ;
78614: GO 78706
// vehicle := IsInUnit ( driver ) ;
78616: LD_ADDR_VAR 0 3
78620: PUSH
78621: LD_VAR 0 1
78625: PPUSH
78626: CALL_OW 310
78630: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78631: LD_VAR 0 1
78635: PPUSH
78636: LD_STRING \
78638: PUSH
78639: LD_INT 0
78641: PUSH
78642: LD_INT 0
78644: PUSH
78645: LD_INT 0
78647: PUSH
78648: LD_INT 0
78650: PUSH
78651: LD_INT 0
78653: PUSH
78654: LD_INT 0
78656: PUSH
78657: EMPTY
78658: LIST
78659: LIST
78660: LIST
78661: LIST
78662: LIST
78663: LIST
78664: LIST
78665: PUSH
78666: LD_STRING E
78668: PUSH
78669: LD_INT 0
78671: PUSH
78672: LD_INT 0
78674: PUSH
78675: LD_VAR 0 3
78679: PUSH
78680: LD_INT 0
78682: PUSH
78683: LD_INT 0
78685: PUSH
78686: LD_INT 0
78688: PUSH
78689: EMPTY
78690: LIST
78691: LIST
78692: LIST
78693: LIST
78694: LIST
78695: LIST
78696: LIST
78697: PUSH
78698: EMPTY
78699: LIST
78700: LIST
78701: PPUSH
78702: CALL_OW 446
// end ;
78706: LD_VAR 0 2
78710: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78711: LD_INT 0
78713: PPUSH
78714: PPUSH
// if not driver or not IsInUnit ( driver ) then
78715: LD_VAR 0 1
78719: NOT
78720: PUSH
78721: LD_VAR 0 1
78725: PPUSH
78726: CALL_OW 310
78730: NOT
78731: OR
78732: IFFALSE 78736
// exit ;
78734: GO 78826
// vehicle := IsInUnit ( driver ) ;
78736: LD_ADDR_VAR 0 3
78740: PUSH
78741: LD_VAR 0 1
78745: PPUSH
78746: CALL_OW 310
78750: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78751: LD_VAR 0 1
78755: PPUSH
78756: LD_STRING \
78758: PUSH
78759: LD_INT 0
78761: PUSH
78762: LD_INT 0
78764: PUSH
78765: LD_INT 0
78767: PUSH
78768: LD_INT 0
78770: PUSH
78771: LD_INT 0
78773: PUSH
78774: LD_INT 0
78776: PUSH
78777: EMPTY
78778: LIST
78779: LIST
78780: LIST
78781: LIST
78782: LIST
78783: LIST
78784: LIST
78785: PUSH
78786: LD_STRING E
78788: PUSH
78789: LD_INT 0
78791: PUSH
78792: LD_INT 0
78794: PUSH
78795: LD_VAR 0 3
78799: PUSH
78800: LD_INT 0
78802: PUSH
78803: LD_INT 0
78805: PUSH
78806: LD_INT 0
78808: PUSH
78809: EMPTY
78810: LIST
78811: LIST
78812: LIST
78813: LIST
78814: LIST
78815: LIST
78816: LIST
78817: PUSH
78818: EMPTY
78819: LIST
78820: LIST
78821: PPUSH
78822: CALL_OW 447
// end ;
78826: LD_VAR 0 2
78830: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78831: LD_INT 0
78833: PPUSH
78834: PPUSH
78835: PPUSH
// tmp := [ ] ;
78836: LD_ADDR_VAR 0 5
78840: PUSH
78841: EMPTY
78842: ST_TO_ADDR
// for i in units do
78843: LD_ADDR_VAR 0 4
78847: PUSH
78848: LD_VAR 0 1
78852: PUSH
78853: FOR_IN
78854: IFFALSE 78892
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78856: LD_ADDR_VAR 0 5
78860: PUSH
78861: LD_VAR 0 5
78865: PPUSH
78866: LD_VAR 0 5
78870: PUSH
78871: LD_INT 1
78873: PLUS
78874: PPUSH
78875: LD_VAR 0 4
78879: PPUSH
78880: CALL_OW 256
78884: PPUSH
78885: CALL_OW 2
78889: ST_TO_ADDR
78890: GO 78853
78892: POP
78893: POP
// if not tmp then
78894: LD_VAR 0 5
78898: NOT
78899: IFFALSE 78903
// exit ;
78901: GO 78951
// if asc then
78903: LD_VAR 0 2
78907: IFFALSE 78931
// result := SortListByListAsc ( units , tmp ) else
78909: LD_ADDR_VAR 0 3
78913: PUSH
78914: LD_VAR 0 1
78918: PPUSH
78919: LD_VAR 0 5
78923: PPUSH
78924: CALL_OW 76
78928: ST_TO_ADDR
78929: GO 78951
// result := SortListByListDesc ( units , tmp ) ;
78931: LD_ADDR_VAR 0 3
78935: PUSH
78936: LD_VAR 0 1
78940: PPUSH
78941: LD_VAR 0 5
78945: PPUSH
78946: CALL_OW 77
78950: ST_TO_ADDR
// end ;
78951: LD_VAR 0 3
78955: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78956: LD_INT 0
78958: PPUSH
78959: PPUSH
// task := GetTaskList ( mech ) ;
78960: LD_ADDR_VAR 0 4
78964: PUSH
78965: LD_VAR 0 1
78969: PPUSH
78970: CALL_OW 437
78974: ST_TO_ADDR
// if not task then
78975: LD_VAR 0 4
78979: NOT
78980: IFFALSE 78984
// exit ;
78982: GO 79026
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78984: LD_ADDR_VAR 0 3
78988: PUSH
78989: LD_VAR 0 4
78993: PUSH
78994: LD_INT 1
78996: ARRAY
78997: PUSH
78998: LD_INT 1
79000: ARRAY
79001: PUSH
79002: LD_STRING r
79004: EQUAL
79005: PUSH
79006: LD_VAR 0 4
79010: PUSH
79011: LD_INT 1
79013: ARRAY
79014: PUSH
79015: LD_INT 4
79017: ARRAY
79018: PUSH
79019: LD_VAR 0 2
79023: EQUAL
79024: AND
79025: ST_TO_ADDR
// end ;
79026: LD_VAR 0 3
79030: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79031: LD_INT 0
79033: PPUSH
// SetDir ( unit , d ) ;
79034: LD_VAR 0 1
79038: PPUSH
79039: LD_VAR 0 4
79043: PPUSH
79044: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79048: LD_VAR 0 1
79052: PPUSH
79053: LD_VAR 0 2
79057: PPUSH
79058: LD_VAR 0 3
79062: PPUSH
79063: LD_VAR 0 5
79067: PPUSH
79068: CALL_OW 48
// end ;
79072: LD_VAR 0 6
79076: RET
// export function ToNaturalNumber ( number ) ; begin
79077: LD_INT 0
79079: PPUSH
// result := number div 1 ;
79080: LD_ADDR_VAR 0 2
79084: PUSH
79085: LD_VAR 0 1
79089: PUSH
79090: LD_INT 1
79092: DIV
79093: ST_TO_ADDR
// if number < 0 then
79094: LD_VAR 0 1
79098: PUSH
79099: LD_INT 0
79101: LESS
79102: IFFALSE 79112
// result := 0 ;
79104: LD_ADDR_VAR 0 2
79108: PUSH
79109: LD_INT 0
79111: ST_TO_ADDR
// end ;
79112: LD_VAR 0 2
79116: RET
// export function SortByClass ( units , class ) ; var un ; begin
79117: LD_INT 0
79119: PPUSH
79120: PPUSH
// if not units or not class then
79121: LD_VAR 0 1
79125: NOT
79126: PUSH
79127: LD_VAR 0 2
79131: NOT
79132: OR
79133: IFFALSE 79137
// exit ;
79135: GO 79232
// result := [ ] ;
79137: LD_ADDR_VAR 0 3
79141: PUSH
79142: EMPTY
79143: ST_TO_ADDR
// for un in units do
79144: LD_ADDR_VAR 0 4
79148: PUSH
79149: LD_VAR 0 1
79153: PUSH
79154: FOR_IN
79155: IFFALSE 79230
// if GetClass ( un ) = class then
79157: LD_VAR 0 4
79161: PPUSH
79162: CALL_OW 257
79166: PUSH
79167: LD_VAR 0 2
79171: EQUAL
79172: IFFALSE 79199
// result := Insert ( result , 1 , un ) else
79174: LD_ADDR_VAR 0 3
79178: PUSH
79179: LD_VAR 0 3
79183: PPUSH
79184: LD_INT 1
79186: PPUSH
79187: LD_VAR 0 4
79191: PPUSH
79192: CALL_OW 2
79196: ST_TO_ADDR
79197: GO 79228
// result := Replace ( result , result + 1 , un ) ;
79199: LD_ADDR_VAR 0 3
79203: PUSH
79204: LD_VAR 0 3
79208: PPUSH
79209: LD_VAR 0 3
79213: PUSH
79214: LD_INT 1
79216: PLUS
79217: PPUSH
79218: LD_VAR 0 4
79222: PPUSH
79223: CALL_OW 1
79227: ST_TO_ADDR
79228: GO 79154
79230: POP
79231: POP
// end ;
79232: LD_VAR 0 3
79236: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79237: LD_INT 0
79239: PPUSH
79240: PPUSH
79241: PPUSH
79242: PPUSH
79243: PPUSH
79244: PPUSH
79245: PPUSH
// result := [ ] ;
79246: LD_ADDR_VAR 0 4
79250: PUSH
79251: EMPTY
79252: ST_TO_ADDR
// if x - r < 0 then
79253: LD_VAR 0 1
79257: PUSH
79258: LD_VAR 0 3
79262: MINUS
79263: PUSH
79264: LD_INT 0
79266: LESS
79267: IFFALSE 79279
// min_x := 0 else
79269: LD_ADDR_VAR 0 8
79273: PUSH
79274: LD_INT 0
79276: ST_TO_ADDR
79277: GO 79295
// min_x := x - r ;
79279: LD_ADDR_VAR 0 8
79283: PUSH
79284: LD_VAR 0 1
79288: PUSH
79289: LD_VAR 0 3
79293: MINUS
79294: ST_TO_ADDR
// if y - r < 0 then
79295: LD_VAR 0 2
79299: PUSH
79300: LD_VAR 0 3
79304: MINUS
79305: PUSH
79306: LD_INT 0
79308: LESS
79309: IFFALSE 79321
// min_y := 0 else
79311: LD_ADDR_VAR 0 7
79315: PUSH
79316: LD_INT 0
79318: ST_TO_ADDR
79319: GO 79337
// min_y := y - r ;
79321: LD_ADDR_VAR 0 7
79325: PUSH
79326: LD_VAR 0 2
79330: PUSH
79331: LD_VAR 0 3
79335: MINUS
79336: ST_TO_ADDR
// max_x := x + r ;
79337: LD_ADDR_VAR 0 9
79341: PUSH
79342: LD_VAR 0 1
79346: PUSH
79347: LD_VAR 0 3
79351: PLUS
79352: ST_TO_ADDR
// max_y := y + r ;
79353: LD_ADDR_VAR 0 10
79357: PUSH
79358: LD_VAR 0 2
79362: PUSH
79363: LD_VAR 0 3
79367: PLUS
79368: ST_TO_ADDR
// for _x = min_x to max_x do
79369: LD_ADDR_VAR 0 5
79373: PUSH
79374: DOUBLE
79375: LD_VAR 0 8
79379: DEC
79380: ST_TO_ADDR
79381: LD_VAR 0 9
79385: PUSH
79386: FOR_TO
79387: IFFALSE 79488
// for _y = min_y to max_y do
79389: LD_ADDR_VAR 0 6
79393: PUSH
79394: DOUBLE
79395: LD_VAR 0 7
79399: DEC
79400: ST_TO_ADDR
79401: LD_VAR 0 10
79405: PUSH
79406: FOR_TO
79407: IFFALSE 79484
// begin if not ValidHex ( _x , _y ) then
79409: LD_VAR 0 5
79413: PPUSH
79414: LD_VAR 0 6
79418: PPUSH
79419: CALL_OW 488
79423: NOT
79424: IFFALSE 79428
// continue ;
79426: GO 79406
// if GetResourceTypeXY ( _x , _y ) then
79428: LD_VAR 0 5
79432: PPUSH
79433: LD_VAR 0 6
79437: PPUSH
79438: CALL_OW 283
79442: IFFALSE 79482
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79444: LD_ADDR_VAR 0 4
79448: PUSH
79449: LD_VAR 0 4
79453: PPUSH
79454: LD_VAR 0 4
79458: PUSH
79459: LD_INT 1
79461: PLUS
79462: PPUSH
79463: LD_VAR 0 5
79467: PUSH
79468: LD_VAR 0 6
79472: PUSH
79473: EMPTY
79474: LIST
79475: LIST
79476: PPUSH
79477: CALL_OW 1
79481: ST_TO_ADDR
// end ;
79482: GO 79406
79484: POP
79485: POP
79486: GO 79386
79488: POP
79489: POP
// end ;
79490: LD_VAR 0 4
79494: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79495: LD_INT 0
79497: PPUSH
79498: PPUSH
79499: PPUSH
79500: PPUSH
79501: PPUSH
79502: PPUSH
79503: PPUSH
79504: PPUSH
// if not units then
79505: LD_VAR 0 1
79509: NOT
79510: IFFALSE 79514
// exit ;
79512: GO 80038
// result := UnitFilter ( units , [ f_ok ] ) ;
79514: LD_ADDR_VAR 0 3
79518: PUSH
79519: LD_VAR 0 1
79523: PPUSH
79524: LD_INT 50
79526: PUSH
79527: EMPTY
79528: LIST
79529: PPUSH
79530: CALL_OW 72
79534: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79535: LD_ADDR_VAR 0 8
79539: PUSH
79540: LD_VAR 0 1
79544: PUSH
79545: LD_INT 1
79547: ARRAY
79548: PPUSH
79549: CALL_OW 255
79553: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79554: LD_ADDR_VAR 0 10
79558: PUSH
79559: LD_INT 29
79561: PUSH
79562: LD_INT 91
79564: PUSH
79565: LD_INT 49
79567: PUSH
79568: EMPTY
79569: LIST
79570: LIST
79571: LIST
79572: ST_TO_ADDR
// if not result then
79573: LD_VAR 0 3
79577: NOT
79578: IFFALSE 79582
// exit ;
79580: GO 80038
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79582: LD_ADDR_VAR 0 5
79586: PUSH
79587: LD_INT 81
79589: PUSH
79590: LD_VAR 0 8
79594: PUSH
79595: EMPTY
79596: LIST
79597: LIST
79598: PPUSH
79599: CALL_OW 69
79603: ST_TO_ADDR
// for i in result do
79604: LD_ADDR_VAR 0 4
79608: PUSH
79609: LD_VAR 0 3
79613: PUSH
79614: FOR_IN
79615: IFFALSE 80036
// begin tag := GetTag ( i ) + 1 ;
79617: LD_ADDR_VAR 0 9
79621: PUSH
79622: LD_VAR 0 4
79626: PPUSH
79627: CALL_OW 110
79631: PUSH
79632: LD_INT 1
79634: PLUS
79635: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79636: LD_ADDR_VAR 0 7
79640: PUSH
79641: LD_VAR 0 4
79645: PPUSH
79646: CALL_OW 250
79650: PPUSH
79651: LD_VAR 0 4
79655: PPUSH
79656: CALL_OW 251
79660: PPUSH
79661: LD_INT 6
79663: PPUSH
79664: CALL 79237 0 3
79668: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79669: LD_VAR 0 4
79673: PPUSH
79674: CALL_OW 247
79678: PUSH
79679: LD_INT 2
79681: EQUAL
79682: PUSH
79683: LD_VAR 0 7
79687: AND
79688: PUSH
79689: LD_VAR 0 4
79693: PPUSH
79694: CALL_OW 264
79698: PUSH
79699: LD_VAR 0 10
79703: IN
79704: NOT
79705: AND
79706: IFFALSE 79745
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79708: LD_VAR 0 4
79712: PPUSH
79713: LD_VAR 0 7
79717: PUSH
79718: LD_INT 1
79720: ARRAY
79721: PUSH
79722: LD_INT 1
79724: ARRAY
79725: PPUSH
79726: LD_VAR 0 7
79730: PUSH
79731: LD_INT 1
79733: ARRAY
79734: PUSH
79735: LD_INT 2
79737: ARRAY
79738: PPUSH
79739: CALL_OW 116
79743: GO 80034
// if path > tag then
79745: LD_VAR 0 2
79749: PUSH
79750: LD_VAR 0 9
79754: GREATER
79755: IFFALSE 79963
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79757: LD_ADDR_VAR 0 6
79761: PUSH
79762: LD_VAR 0 5
79766: PPUSH
79767: LD_INT 91
79769: PUSH
79770: LD_VAR 0 4
79774: PUSH
79775: LD_INT 8
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: LIST
79782: PPUSH
79783: CALL_OW 72
79787: ST_TO_ADDR
// if nearEnemy then
79788: LD_VAR 0 6
79792: IFFALSE 79861
// begin if GetWeapon ( i ) = ru_time_lapser then
79794: LD_VAR 0 4
79798: PPUSH
79799: CALL_OW 264
79803: PUSH
79804: LD_INT 49
79806: EQUAL
79807: IFFALSE 79835
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79809: LD_VAR 0 4
79813: PPUSH
79814: LD_VAR 0 6
79818: PPUSH
79819: LD_VAR 0 4
79823: PPUSH
79824: CALL_OW 74
79828: PPUSH
79829: CALL_OW 112
79833: GO 79859
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79835: LD_VAR 0 4
79839: PPUSH
79840: LD_VAR 0 6
79844: PPUSH
79845: LD_VAR 0 4
79849: PPUSH
79850: CALL_OW 74
79854: PPUSH
79855: CALL_OW 115
// end else
79859: GO 79961
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79861: LD_VAR 0 4
79865: PPUSH
79866: LD_VAR 0 2
79870: PUSH
79871: LD_VAR 0 9
79875: ARRAY
79876: PUSH
79877: LD_INT 1
79879: ARRAY
79880: PPUSH
79881: LD_VAR 0 2
79885: PUSH
79886: LD_VAR 0 9
79890: ARRAY
79891: PUSH
79892: LD_INT 2
79894: ARRAY
79895: PPUSH
79896: CALL_OW 297
79900: PUSH
79901: LD_INT 6
79903: GREATER
79904: IFFALSE 79947
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79906: LD_VAR 0 4
79910: PPUSH
79911: LD_VAR 0 2
79915: PUSH
79916: LD_VAR 0 9
79920: ARRAY
79921: PUSH
79922: LD_INT 1
79924: ARRAY
79925: PPUSH
79926: LD_VAR 0 2
79930: PUSH
79931: LD_VAR 0 9
79935: ARRAY
79936: PUSH
79937: LD_INT 2
79939: ARRAY
79940: PPUSH
79941: CALL_OW 114
79945: GO 79961
// SetTag ( i , tag ) ;
79947: LD_VAR 0 4
79951: PPUSH
79952: LD_VAR 0 9
79956: PPUSH
79957: CALL_OW 109
// end else
79961: GO 80034
// if enemy then
79963: LD_VAR 0 5
79967: IFFALSE 80034
// begin if GetWeapon ( i ) = ru_time_lapser then
79969: LD_VAR 0 4
79973: PPUSH
79974: CALL_OW 264
79978: PUSH
79979: LD_INT 49
79981: EQUAL
79982: IFFALSE 80010
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79984: LD_VAR 0 4
79988: PPUSH
79989: LD_VAR 0 5
79993: PPUSH
79994: LD_VAR 0 4
79998: PPUSH
79999: CALL_OW 74
80003: PPUSH
80004: CALL_OW 112
80008: GO 80034
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80010: LD_VAR 0 4
80014: PPUSH
80015: LD_VAR 0 5
80019: PPUSH
80020: LD_VAR 0 4
80024: PPUSH
80025: CALL_OW 74
80029: PPUSH
80030: CALL_OW 115
// end ; end ;
80034: GO 79614
80036: POP
80037: POP
// end ;
80038: LD_VAR 0 3
80042: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80043: LD_INT 0
80045: PPUSH
80046: PPUSH
80047: PPUSH
// if not unit or IsInUnit ( unit ) then
80048: LD_VAR 0 1
80052: NOT
80053: PUSH
80054: LD_VAR 0 1
80058: PPUSH
80059: CALL_OW 310
80063: OR
80064: IFFALSE 80068
// exit ;
80066: GO 80159
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80068: LD_ADDR_VAR 0 4
80072: PUSH
80073: LD_VAR 0 1
80077: PPUSH
80078: CALL_OW 250
80082: PPUSH
80083: LD_VAR 0 2
80087: PPUSH
80088: LD_INT 1
80090: PPUSH
80091: CALL_OW 272
80095: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80096: LD_ADDR_VAR 0 5
80100: PUSH
80101: LD_VAR 0 1
80105: PPUSH
80106: CALL_OW 251
80110: PPUSH
80111: LD_VAR 0 2
80115: PPUSH
80116: LD_INT 1
80118: PPUSH
80119: CALL_OW 273
80123: ST_TO_ADDR
// if ValidHex ( x , y ) then
80124: LD_VAR 0 4
80128: PPUSH
80129: LD_VAR 0 5
80133: PPUSH
80134: CALL_OW 488
80138: IFFALSE 80159
// ComTurnXY ( unit , x , y ) ;
80140: LD_VAR 0 1
80144: PPUSH
80145: LD_VAR 0 4
80149: PPUSH
80150: LD_VAR 0 5
80154: PPUSH
80155: CALL_OW 118
// end ;
80159: LD_VAR 0 3
80163: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80164: LD_INT 0
80166: PPUSH
80167: PPUSH
// result := false ;
80168: LD_ADDR_VAR 0 3
80172: PUSH
80173: LD_INT 0
80175: ST_TO_ADDR
// if not units then
80176: LD_VAR 0 2
80180: NOT
80181: IFFALSE 80185
// exit ;
80183: GO 80230
// for i in units do
80185: LD_ADDR_VAR 0 4
80189: PUSH
80190: LD_VAR 0 2
80194: PUSH
80195: FOR_IN
80196: IFFALSE 80228
// if See ( side , i ) then
80198: LD_VAR 0 1
80202: PPUSH
80203: LD_VAR 0 4
80207: PPUSH
80208: CALL_OW 292
80212: IFFALSE 80226
// begin result := true ;
80214: LD_ADDR_VAR 0 3
80218: PUSH
80219: LD_INT 1
80221: ST_TO_ADDR
// exit ;
80222: POP
80223: POP
80224: GO 80230
// end ;
80226: GO 80195
80228: POP
80229: POP
// end ;
80230: LD_VAR 0 3
80234: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80235: LD_INT 0
80237: PPUSH
80238: PPUSH
80239: PPUSH
80240: PPUSH
// if not unit or not points then
80241: LD_VAR 0 1
80245: NOT
80246: PUSH
80247: LD_VAR 0 2
80251: NOT
80252: OR
80253: IFFALSE 80257
// exit ;
80255: GO 80347
// dist := 99999 ;
80257: LD_ADDR_VAR 0 5
80261: PUSH
80262: LD_INT 99999
80264: ST_TO_ADDR
// for i in points do
80265: LD_ADDR_VAR 0 4
80269: PUSH
80270: LD_VAR 0 2
80274: PUSH
80275: FOR_IN
80276: IFFALSE 80345
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80278: LD_ADDR_VAR 0 6
80282: PUSH
80283: LD_VAR 0 1
80287: PPUSH
80288: LD_VAR 0 4
80292: PUSH
80293: LD_INT 1
80295: ARRAY
80296: PPUSH
80297: LD_VAR 0 4
80301: PUSH
80302: LD_INT 2
80304: ARRAY
80305: PPUSH
80306: CALL_OW 297
80310: ST_TO_ADDR
// if tmpDist < dist then
80311: LD_VAR 0 6
80315: PUSH
80316: LD_VAR 0 5
80320: LESS
80321: IFFALSE 80343
// begin result := i ;
80323: LD_ADDR_VAR 0 3
80327: PUSH
80328: LD_VAR 0 4
80332: ST_TO_ADDR
// dist := tmpDist ;
80333: LD_ADDR_VAR 0 5
80337: PUSH
80338: LD_VAR 0 6
80342: ST_TO_ADDR
// end ; end ;
80343: GO 80275
80345: POP
80346: POP
// end ;
80347: LD_VAR 0 3
80351: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80352: LD_INT 0
80354: PPUSH
// uc_side := side ;
80355: LD_ADDR_OWVAR 20
80359: PUSH
80360: LD_VAR 0 1
80364: ST_TO_ADDR
// uc_nation := 3 ;
80365: LD_ADDR_OWVAR 21
80369: PUSH
80370: LD_INT 3
80372: ST_TO_ADDR
// vc_chassis := 25 ;
80373: LD_ADDR_OWVAR 37
80377: PUSH
80378: LD_INT 25
80380: ST_TO_ADDR
// vc_engine := engine_siberite ;
80381: LD_ADDR_OWVAR 39
80385: PUSH
80386: LD_INT 3
80388: ST_TO_ADDR
// vc_control := control_computer ;
80389: LD_ADDR_OWVAR 38
80393: PUSH
80394: LD_INT 3
80396: ST_TO_ADDR
// vc_weapon := 59 ;
80397: LD_ADDR_OWVAR 40
80401: PUSH
80402: LD_INT 59
80404: ST_TO_ADDR
// result := CreateVehicle ;
80405: LD_ADDR_VAR 0 5
80409: PUSH
80410: CALL_OW 45
80414: ST_TO_ADDR
// SetDir ( result , d ) ;
80415: LD_VAR 0 5
80419: PPUSH
80420: LD_VAR 0 4
80424: PPUSH
80425: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80429: LD_VAR 0 5
80433: PPUSH
80434: LD_VAR 0 2
80438: PPUSH
80439: LD_VAR 0 3
80443: PPUSH
80444: LD_INT 0
80446: PPUSH
80447: CALL_OW 48
// end ;
80451: LD_VAR 0 5
80455: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80456: LD_INT 0
80458: PPUSH
80459: PPUSH
80460: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80461: LD_ADDR_VAR 0 2
80465: PUSH
80466: LD_INT 0
80468: PUSH
80469: LD_INT 0
80471: PUSH
80472: LD_INT 0
80474: PUSH
80475: LD_INT 0
80477: PUSH
80478: EMPTY
80479: LIST
80480: LIST
80481: LIST
80482: LIST
80483: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80484: LD_VAR 0 1
80488: NOT
80489: PUSH
80490: LD_VAR 0 1
80494: PPUSH
80495: CALL_OW 264
80499: PUSH
80500: LD_INT 12
80502: PUSH
80503: LD_INT 51
80505: PUSH
80506: LD_INT 32
80508: PUSH
80509: LD_INT 89
80511: PUSH
80512: EMPTY
80513: LIST
80514: LIST
80515: LIST
80516: LIST
80517: IN
80518: NOT
80519: OR
80520: IFFALSE 80524
// exit ;
80522: GO 80622
// for i := 1 to 3 do
80524: LD_ADDR_VAR 0 3
80528: PUSH
80529: DOUBLE
80530: LD_INT 1
80532: DEC
80533: ST_TO_ADDR
80534: LD_INT 3
80536: PUSH
80537: FOR_TO
80538: IFFALSE 80620
// begin tmp := GetCargo ( cargo , i ) ;
80540: LD_ADDR_VAR 0 4
80544: PUSH
80545: LD_VAR 0 1
80549: PPUSH
80550: LD_VAR 0 3
80554: PPUSH
80555: CALL_OW 289
80559: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80560: LD_ADDR_VAR 0 2
80564: PUSH
80565: LD_VAR 0 2
80569: PPUSH
80570: LD_VAR 0 3
80574: PPUSH
80575: LD_VAR 0 4
80579: PPUSH
80580: CALL_OW 1
80584: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80585: LD_ADDR_VAR 0 2
80589: PUSH
80590: LD_VAR 0 2
80594: PPUSH
80595: LD_INT 4
80597: PPUSH
80598: LD_VAR 0 2
80602: PUSH
80603: LD_INT 4
80605: ARRAY
80606: PUSH
80607: LD_VAR 0 4
80611: PLUS
80612: PPUSH
80613: CALL_OW 1
80617: ST_TO_ADDR
// end ;
80618: GO 80537
80620: POP
80621: POP
// end ;
80622: LD_VAR 0 2
80626: RET
// export function Length ( array ) ; begin
80627: LD_INT 0
80629: PPUSH
// result := array + 0 ;
80630: LD_ADDR_VAR 0 2
80634: PUSH
80635: LD_VAR 0 1
80639: PUSH
80640: LD_INT 0
80642: PLUS
80643: ST_TO_ADDR
// end ;
80644: LD_VAR 0 2
80648: RET
// export function PrepareArray ( array ) ; begin
80649: LD_INT 0
80651: PPUSH
// result := array diff 0 ;
80652: LD_ADDR_VAR 0 2
80656: PUSH
80657: LD_VAR 0 1
80661: PUSH
80662: LD_INT 0
80664: DIFF
80665: ST_TO_ADDR
// if not result [ 1 ] then
80666: LD_VAR 0 2
80670: PUSH
80671: LD_INT 1
80673: ARRAY
80674: NOT
80675: IFFALSE 80695
// result := Delete ( result , 1 ) ;
80677: LD_ADDR_VAR 0 2
80681: PUSH
80682: LD_VAR 0 2
80686: PPUSH
80687: LD_INT 1
80689: PPUSH
80690: CALL_OW 3
80694: ST_TO_ADDR
// end ;
80695: LD_VAR 0 2
80699: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80700: LD_INT 0
80702: PPUSH
80703: PPUSH
80704: PPUSH
80705: PPUSH
// sibRocketRange := 25 ;
80706: LD_ADDR_VAR 0 6
80710: PUSH
80711: LD_INT 25
80713: ST_TO_ADDR
// result := false ;
80714: LD_ADDR_VAR 0 4
80718: PUSH
80719: LD_INT 0
80721: ST_TO_ADDR
// for i := 0 to 5 do
80722: LD_ADDR_VAR 0 5
80726: PUSH
80727: DOUBLE
80728: LD_INT 0
80730: DEC
80731: ST_TO_ADDR
80732: LD_INT 5
80734: PUSH
80735: FOR_TO
80736: IFFALSE 80803
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80738: LD_VAR 0 1
80742: PPUSH
80743: LD_VAR 0 5
80747: PPUSH
80748: LD_VAR 0 6
80752: PPUSH
80753: CALL_OW 272
80757: PPUSH
80758: LD_VAR 0 2
80762: PPUSH
80763: LD_VAR 0 5
80767: PPUSH
80768: LD_VAR 0 6
80772: PPUSH
80773: CALL_OW 273
80777: PPUSH
80778: LD_VAR 0 3
80782: PPUSH
80783: CALL_OW 309
80787: IFFALSE 80801
// begin result := true ;
80789: LD_ADDR_VAR 0 4
80793: PUSH
80794: LD_INT 1
80796: ST_TO_ADDR
// exit ;
80797: POP
80798: POP
80799: GO 80805
// end ;
80801: GO 80735
80803: POP
80804: POP
// end ;
80805: LD_VAR 0 4
80809: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80810: LD_INT 0
80812: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80813: LD_VAR 0 1
80817: PPUSH
80818: LD_VAR 0 2
80822: PPUSH
80823: LD_INT 0
80825: PPUSH
80826: LD_INT 0
80828: PPUSH
80829: LD_INT 1
80831: PPUSH
80832: LD_INT 0
80834: PPUSH
80835: CALL_OW 587
// end ; end_of_file
80839: LD_VAR 0 3
80843: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80844: LD_VAR 0 1
80848: PUSH
80849: LD_INT 200
80851: DOUBLE
80852: GREATEREQUAL
80853: IFFALSE 80861
80855: LD_INT 299
80857: DOUBLE
80858: LESSEQUAL
80859: IFTRUE 80863
80861: GO 80895
80863: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80864: LD_VAR 0 1
80868: PPUSH
80869: LD_VAR 0 2
80873: PPUSH
80874: LD_VAR 0 3
80878: PPUSH
80879: LD_VAR 0 4
80883: PPUSH
80884: LD_VAR 0 5
80888: PPUSH
80889: CALL 35529 0 5
80893: GO 80972
80895: LD_INT 300
80897: DOUBLE
80898: GREATEREQUAL
80899: IFFALSE 80907
80901: LD_INT 399
80903: DOUBLE
80904: LESSEQUAL
80905: IFTRUE 80909
80907: GO 80971
80909: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80910: LD_VAR 0 1
80914: PPUSH
80915: LD_VAR 0 2
80919: PPUSH
80920: LD_VAR 0 3
80924: PPUSH
80925: LD_VAR 0 4
80929: PPUSH
80930: LD_VAR 0 5
80934: PPUSH
80935: LD_VAR 0 6
80939: PPUSH
80940: LD_VAR 0 7
80944: PPUSH
80945: LD_VAR 0 8
80949: PPUSH
80950: LD_VAR 0 9
80954: PPUSH
80955: LD_VAR 0 10
80959: PPUSH
80960: LD_VAR 0 11
80964: PPUSH
80965: CALL 31862 0 11
80969: GO 80972
80971: POP
// end ;
80972: PPOPN 11
80974: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80975: LD_VAR 0 1
80979: PPUSH
80980: LD_VAR 0 2
80984: PPUSH
80985: LD_VAR 0 3
80989: PPUSH
80990: LD_VAR 0 4
80994: PPUSH
80995: LD_VAR 0 5
80999: PPUSH
81000: CALL 35265 0 5
// end ; end_of_file
81004: PPOPN 5
81006: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81007: LD_VAR 0 1
81011: PPUSH
81012: LD_VAR 0 2
81016: PPUSH
81017: LD_VAR 0 3
81021: PPUSH
81022: LD_VAR 0 4
81026: PPUSH
81027: LD_VAR 0 5
81031: PPUSH
81032: LD_VAR 0 6
81036: PPUSH
81037: CALL 19555 0 6
// end ;
81041: PPOPN 6
81043: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81044: LD_INT 0
81046: PPUSH
// begin if not units then
81047: LD_VAR 0 1
81051: NOT
81052: IFFALSE 81056
// exit ;
81054: GO 81056
// end ;
81056: PPOPN 7
81058: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81059: CALL 19526 0 0
// end ;
81063: PPOPN 1
81065: END
