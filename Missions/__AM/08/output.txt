// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 9069 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 75092 0 9
// Action ;
  79: CALL 15318 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 40713 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 40713 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 40713 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 40713 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 40713 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 40713 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 40713 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 78415 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 40713 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 40713 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 78415 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 40713 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 40713 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 78415 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 40713 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 78415 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 40713 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 78415 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 40713 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 78415 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 40713 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 78415 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 40713 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 78415 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 78415 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 49021 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2814
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2649
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: IFFALSE 2625
// begin bc_type := b_lab_full ;
2599: LD_ADDR_OWVAR 42
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2607: LD_ADDR_OWVAR 44
2611: PUSH
2612: LD_INT 10
2614: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_INT 15
2622: ST_TO_ADDR
// end else
2623: GO 2649
// begin bc_type := b_lab_half ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 7
2632: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2633: LD_ADDR_OWVAR 44
2637: PUSH
2638: LD_INT 10
2640: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 9
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2535
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2535
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 31
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 31
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 31
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 31
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 31
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 76049 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 31
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 54149 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 31
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 54149 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 31
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 54149 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 31
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 54149 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 13
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 13
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 40713 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 26
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 27
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 40713 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 27
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 24
4152: PUSH
4153: LD_STRING Mike
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 40713 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4170: LD_EXP 24
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4185: LD_STRING GladstoneIn07
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 30
4195: NOT
4196: IFFALSE 4276
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4198: LD_ADDR_EXP 21
4202: PUSH
4203: LD_STRING Gladstone
4205: PPUSH
4206: LD_EXP 1
4210: NOT
4211: PPUSH
4212: LD_STRING 06c_
4214: PPUSH
4215: CALL 40713 0 3
4219: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4220: LD_EXP 21
4224: NOT
4225: PUSH
4226: LD_STRING GladstoneStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: AND
4237: IFFALSE 4261
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4239: LD_ADDR_EXP 21
4243: PUSH
4244: LD_STRING Gladstone
4246: PPUSH
4247: LD_EXP 1
4251: NOT
4252: PPUSH
4253: LD_STRING 05_
4255: PPUSH
4256: CALL 40713 0 3
4260: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4261: LD_EXP 21
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4276: LD_STRING LisaStayInDelta
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 30
4286: IFFALSE 4322
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4288: LD_ADDR_EXP 19
4292: PUSH
4293: LD_STRING Lisa
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_STRING 05_
4301: PPUSH
4302: CALL 40713 0 3
4306: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4307: LD_EXP 19
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4322: LD_STRING BobbyStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: IFFALSE 4368
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4334: LD_ADDR_EXP 17
4338: PUSH
4339: LD_STRING Bobby
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_STRING 05_
4347: PPUSH
4348: CALL 40713 0 3
4352: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4353: LD_EXP 17
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4368: LD_STRING CyrusStayInDelta
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL_OW 30
4378: IFFALSE 4414
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4380: LD_ADDR_EXP 18
4384: PUSH
4385: LD_STRING Cyrus
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING 05_
4393: PPUSH
4394: CALL 40713 0 3
4398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4399: LD_EXP 18
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4414: LD_STRING BrownStayInDelta
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 30
4424: IFFALSE 4460
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4426: LD_ADDR_EXP 15
4430: PUSH
4431: LD_STRING Brown
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_STRING 05_
4439: PPUSH
4440: CALL 40713 0 3
4444: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4445: LD_EXP 15
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4460: LD_STRING DonaldsonStayInDelta
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 30
4470: IFFALSE 4506
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4472: LD_ADDR_EXP 16
4476: PUSH
4477: LD_STRING Donaldson
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING 05_
4485: PPUSH
4486: CALL 40713 0 3
4490: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4491: LD_EXP 16
4495: PPUSH
4496: LD_INT 4
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_STRING OthersStayInDelta
4513: PPUSH
4514: CALL_OW 31
4518: ST_TO_ADDR
// if others > 2 then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_INT 2
4526: GREATER
4527: IFFALSE 4590
// begin for j := 1 to 2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4586
// begin SetTag ( others [ j ] , 107 ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 3
4554: ARRAY
4555: PPUSH
4556: LD_INT 107
4558: PPUSH
4559: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PPUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// end ;
4584: GO 4542
4586: POP
4587: POP
// end else
4588: GO 4651
// begin for j := 1 to others do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_VAR 0 4
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4649
// begin SetTag ( others [ i ] , 107 ) ;
4608: LD_VAR 0 4
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: LD_INT 107
4621: PPUSH
4622: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4626: LD_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: ARRAY
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 49
// end ;
4647: GO 4605
4649: POP
4650: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4651: LD_ADDR_VAR 0 4
4655: PUSH
4656: LD_STRING 06_other_apemans
4658: PPUSH
4659: CALL_OW 31
4663: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PUSH
4687: LD_OWVAR 67
4691: ARRAY
4692: GREATEREQUAL
4693: IFFALSE 4726
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 2
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: ST_TO_ADDR
4724: GO 4736
// j := others ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 4
4735: ST_TO_ADDR
// for i := 1 to j do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 3
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4777
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: LD_INT 4
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
4775: GO 4751
4777: POP
4778: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PPUSH
4811: LD_INT 53
4813: PPUSH
4814: LD_INT 19
4816: PPUSH
4817: CALL_OW 111
// end ;
4821: LD_VAR 0 1
4825: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
// prefix := 07c_ ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_STRING 07c_
4849: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4850: LD_ADDR_VAR 0 8
4854: PUSH
4855: LD_STRING 07_vehicles
4857: PPUSH
4858: EMPTY
4859: PPUSH
4860: CALL_OW 30
4864: ST_TO_ADDR
// if not vehicles and debug then
4865: LD_VAR 0 8
4869: NOT
4870: PUSH
4871: LD_EXP 1
4875: AND
4876: IFFALSE 4904
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4878: LD_ADDR_VAR 0 8
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 4
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: ST_TO_ADDR
// if not vehicles then
4904: LD_VAR 0 8
4908: NOT
4909: IFFALSE 4966
// begin area := westGammaSupportArea ;
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_INT 16
4918: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4919: LD_ADDR_VAR 0 14
4923: PUSH
4924: LD_INT 37
4926: PUSH
4927: LD_INT 70
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4934: LD_ADDR_VAR 0 13
4938: PUSH
4939: LD_INT 43
4941: PUSH
4942: LD_INT 67
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// dir := 1 ;
4949: LD_ADDR_VAR 0 12
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4957: LD_INT 4200
4959: PPUSH
4960: CALL_OW 67
// end else
4964: GO 5012
// begin area := southGammaSupportArea ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_INT 5
4973: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4974: LD_ADDR_VAR 0 14
4978: PUSH
4979: LD_INT 87
4981: PUSH
4982: LD_INT 147
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4989: LD_ADDR_VAR 0 13
4993: PUSH
4994: LD_INT 74
4996: PUSH
4997: LD_INT 129
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
// dir := 0 ;
5004: LD_ADDR_VAR 0 12
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// end ; squad := [ ] ;
5012: LD_ADDR_VAR 0 5
5016: PUSH
5017: EMPTY
5018: ST_TO_ADDR
// tmp := [ ] ;
5019: LD_ADDR_VAR 0 6
5023: PUSH
5024: EMPTY
5025: ST_TO_ADDR
// tmpVehs := [ ] ;
5026: LD_ADDR_VAR 0 7
5030: PUSH
5031: EMPTY
5032: ST_TO_ADDR
// uc_side := 1 ;
5033: LD_ADDR_OWVAR 20
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// uc_nation := 1 ;
5041: LD_ADDR_OWVAR 21
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if vehicles then
5049: LD_VAR 0 8
5053: IFFALSE 5187
// begin for i := 1 to vehicles do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_VAR 0 8
5069: PUSH
5070: FOR_TO
5071: IFFALSE 5185
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
5073: LD_ADDR_OWVAR 37
5077: PUSH
5078: LD_VAR 0 8
5082: PUSH
5083: LD_VAR 0 2
5087: ARRAY
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5093: LD_ADDR_OWVAR 39
5097: PUSH
5098: LD_VAR 0 8
5102: PUSH
5103: LD_VAR 0 2
5107: ARRAY
5108: PUSH
5109: LD_INT 2
5111: ARRAY
5112: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5113: LD_ADDR_OWVAR 38
5117: PUSH
5118: LD_VAR 0 8
5122: PUSH
5123: LD_VAR 0 2
5127: ARRAY
5128: PUSH
5129: LD_INT 3
5131: ARRAY
5132: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5133: LD_ADDR_OWVAR 40
5137: PUSH
5138: LD_VAR 0 8
5142: PUSH
5143: LD_VAR 0 2
5147: ARRAY
5148: PUSH
5149: LD_INT 4
5151: ARRAY
5152: ST_TO_ADDR
// veh := CreateVehicle ;
5153: LD_ADDR_VAR 0 9
5157: PUSH
5158: CALL_OW 45
5162: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5163: LD_ADDR_VAR 0 7
5167: PUSH
5168: LD_VAR 0 7
5172: PPUSH
5173: LD_VAR 0 9
5177: PPUSH
5178: CALL 78415 0 2
5182: ST_TO_ADDR
// end ;
5183: GO 5070
5185: POP
5186: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5187: LD_ADDR_EXP 14
5191: PUSH
5192: LD_STRING JMM
5194: PPUSH
5195: LD_EXP 1
5199: NOT
5200: PPUSH
5201: LD_VAR 0 10
5205: PPUSH
5206: CALL 40713 0 3
5210: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5211: LD_EXP 13
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: IN
5226: PUSH
5227: LD_EXP 15
5231: NOT
5232: AND
5233: IFFALSE 5294
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5235: LD_ADDR_EXP 15
5239: PUSH
5240: LD_STRING Brown
5242: PPUSH
5243: LD_EXP 1
5247: NOT
5248: PPUSH
5249: LD_VAR 0 10
5253: PPUSH
5254: CALL 40713 0 3
5258: ST_TO_ADDR
// if Brown then
5259: LD_EXP 15
5263: IFFALSE 5294
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_VAR 0 6
5274: PPUSH
5275: LD_VAR 0 6
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: PPUSH
5284: LD_EXP 15
5288: PPUSH
5289: CALL_OW 1
5293: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5294: LD_EXP 13
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 3
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: IN
5309: PUSH
5310: LD_EXP 16
5314: NOT
5315: AND
5316: IFFALSE 5377
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5318: LD_ADDR_EXP 16
5322: PUSH
5323: LD_STRING Donaldson
5325: PPUSH
5326: LD_EXP 1
5330: NOT
5331: PPUSH
5332: LD_VAR 0 10
5336: PPUSH
5337: CALL 40713 0 3
5341: ST_TO_ADDR
// if Donaldson then
5342: LD_EXP 16
5346: IFFALSE 5377
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_VAR 0 6
5357: PPUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 1
5365: PLUS
5366: PPUSH
5367: LD_EXP 16
5371: PPUSH
5372: CALL_OW 1
5376: ST_TO_ADDR
// end ; if not Bobby then
5377: LD_EXP 17
5381: NOT
5382: IFFALSE 5440
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5384: LD_ADDR_EXP 17
5388: PUSH
5389: LD_STRING Bobby
5391: PPUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_VAR 0 10
5399: PPUSH
5400: CALL 40713 0 3
5404: ST_TO_ADDR
// if Bobby then
5405: LD_EXP 17
5409: IFFALSE 5440
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5411: LD_ADDR_VAR 0 6
5415: PUSH
5416: LD_VAR 0 6
5420: PPUSH
5421: LD_VAR 0 6
5425: PUSH
5426: LD_INT 1
5428: PLUS
5429: PPUSH
5430: LD_EXP 17
5434: PPUSH
5435: CALL_OW 1
5439: ST_TO_ADDR
// end ; if not Cyrus then
5440: LD_EXP 18
5444: NOT
5445: IFFALSE 5503
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5447: LD_ADDR_EXP 18
5451: PUSH
5452: LD_STRING Cyrus
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: LD_VAR 0 10
5462: PPUSH
5463: CALL 40713 0 3
5467: ST_TO_ADDR
// if Cyrus then
5468: LD_EXP 18
5472: IFFALSE 5503
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5474: LD_ADDR_VAR 0 6
5478: PUSH
5479: LD_VAR 0 6
5483: PPUSH
5484: LD_VAR 0 6
5488: PUSH
5489: LD_INT 1
5491: PLUS
5492: PPUSH
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 1
5502: ST_TO_ADDR
// end ; if not Lisa then
5503: LD_EXP 19
5507: NOT
5508: IFFALSE 5569
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5510: LD_ADDR_EXP 19
5514: PUSH
5515: LD_STRING Lisa
5517: PPUSH
5518: LD_EXP 1
5522: NOT
5523: PPUSH
5524: LD_VAR 0 10
5528: PPUSH
5529: CALL 40713 0 3
5533: ST_TO_ADDR
// if Lisa then
5534: LD_EXP 19
5538: IFFALSE 5569
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5540: LD_ADDR_VAR 0 6
5544: PUSH
5545: LD_VAR 0 6
5549: PPUSH
5550: LD_VAR 0 6
5554: PUSH
5555: LD_INT 1
5557: PLUS
5558: PPUSH
5559: LD_EXP 19
5563: PPUSH
5564: CALL_OW 1
5568: ST_TO_ADDR
// end ; if not Frank then
5569: LD_EXP 20
5573: NOT
5574: IFFALSE 5635
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5576: LD_ADDR_EXP 20
5580: PUSH
5581: LD_STRING Frank
5583: PPUSH
5584: LD_EXP 1
5588: NOT
5589: PPUSH
5590: LD_VAR 0 10
5594: PPUSH
5595: CALL 40713 0 3
5599: ST_TO_ADDR
// if Frank then
5600: LD_EXP 20
5604: IFFALSE 5635
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_VAR 0 6
5615: PPUSH
5616: LD_VAR 0 6
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PPUSH
5625: LD_EXP 20
5629: PPUSH
5630: CALL_OW 1
5634: ST_TO_ADDR
// end ; if not Kikuchi then
5635: LD_EXP 22
5639: NOT
5640: IFFALSE 5698
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5642: LD_ADDR_EXP 22
5646: PUSH
5647: LD_STRING Kikuchi
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: LD_VAR 0 10
5657: PPUSH
5658: CALL 40713 0 3
5662: ST_TO_ADDR
// if Kikuchi then
5663: LD_EXP 22
5667: IFFALSE 5698
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: LD_VAR 0 6
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 1
5686: PLUS
5687: PPUSH
5688: LD_EXP 22
5692: PPUSH
5693: CALL_OW 1
5697: ST_TO_ADDR
// end ; if not Gladstone then
5698: LD_EXP 21
5702: NOT
5703: IFFALSE 5764
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5705: LD_ADDR_EXP 21
5709: PUSH
5710: LD_STRING Gladstone
5712: PPUSH
5713: LD_EXP 1
5717: NOT
5718: PPUSH
5719: LD_VAR 0 10
5723: PPUSH
5724: CALL 40713 0 3
5728: ST_TO_ADDR
// if Gladstone then
5729: LD_EXP 21
5733: IFFALSE 5764
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5735: LD_ADDR_VAR 0 6
5739: PUSH
5740: LD_VAR 0 6
5744: PPUSH
5745: LD_VAR 0 6
5749: PUSH
5750: LD_INT 1
5752: PLUS
5753: PPUSH
5754: LD_EXP 21
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// end ; if not Khatam then
5764: LD_EXP 23
5768: NOT
5769: IFFALSE 5827
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5771: LD_ADDR_EXP 23
5775: PUSH
5776: LD_STRING Khatam
5778: PPUSH
5779: LD_INT 1
5781: PPUSH
5782: LD_VAR 0 10
5786: PPUSH
5787: CALL 40713 0 3
5791: ST_TO_ADDR
// if Khatam then
5792: LD_EXP 23
5796: IFFALSE 5827
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5798: LD_ADDR_VAR 0 6
5802: PUSH
5803: LD_VAR 0 6
5807: PPUSH
5808: LD_VAR 0 6
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_EXP 23
5821: PPUSH
5822: CALL_OW 1
5826: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5827: LD_ADDR_VAR 0 4
5831: PUSH
5832: LD_STRING 07c_others
5834: PPUSH
5835: CALL_OW 31
5839: ST_TO_ADDR
// squad := others ;
5840: LD_ADDR_VAR 0 5
5844: PUSH
5845: LD_VAR 0 4
5849: ST_TO_ADDR
// if others then
5850: LD_VAR 0 4
5854: IFFALSE 5905
// for i in others do
5856: LD_ADDR_VAR 0 2
5860: PUSH
5861: LD_VAR 0 4
5865: PUSH
5866: FOR_IN
5867: IFFALSE 5903
// begin SetTag ( i , 108 ) ;
5869: LD_VAR 0 2
5873: PPUSH
5874: LD_INT 108
5876: PPUSH
5877: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5881: LD_ADDR_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: PPUSH
5891: LD_VAR 0 2
5895: PPUSH
5896: CALL 78415 0 2
5900: ST_TO_ADDR
// end ;
5901: GO 5866
5903: POP
5904: POP
// if tmp then
5905: LD_VAR 0 6
5909: IFFALSE 6144
// begin tmp := Join ( tmp , JMM ) ;
5911: LD_ADDR_VAR 0 6
5915: PUSH
5916: LD_VAR 0 6
5920: PPUSH
5921: LD_EXP 14
5925: PPUSH
5926: CALL 78415 0 2
5930: ST_TO_ADDR
// for i in tmp do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: LD_VAR 0 6
5940: PUSH
5941: FOR_IN
5942: IFFALSE 6142
// begin SetDir ( i , dir ) ;
5944: LD_VAR 0 2
5948: PPUSH
5949: LD_VAR 0 12
5953: PPUSH
5954: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
5958: LD_VAR 0 2
5962: PPUSH
5963: CALL_OW 257
5967: PUSH
5968: LD_INT 3
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 7
5976: AND
5977: IFFALSE 6067
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5979: LD_VAR 0 7
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PPUSH
5988: LD_INT 0
5990: PPUSH
5991: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5995: LD_VAR 0 7
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: PPUSH
6004: LD_VAR 0 14
6008: PUSH
6009: LD_INT 1
6011: ARRAY
6012: PPUSH
6013: LD_VAR 0 14
6017: PUSH
6018: LD_INT 2
6020: ARRAY
6021: PPUSH
6022: LD_INT 0
6024: PPUSH
6025: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_VAR 0 7
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PPUSH
6043: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6047: LD_ADDR_VAR 0 7
6051: PUSH
6052: LD_VAR 0 7
6056: PPUSH
6057: LD_INT 1
6059: PPUSH
6060: CALL_OW 3
6064: ST_TO_ADDR
// end else
6065: GO 6084
// PlaceUnitArea ( i , area , false ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 11
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6084: LD_VAR 0 2
6088: PPUSH
6089: LD_VAR 0 13
6093: PUSH
6094: LD_INT 1
6096: ARRAY
6097: PPUSH
6098: LD_VAR 0 13
6102: PUSH
6103: LD_INT 2
6105: ARRAY
6106: PPUSH
6107: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6118: LD_VAR 0 11
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: NOT
6138: IFFALSE 6111
// end ;
6140: GO 5941
6142: POP
6143: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6144: LD_EXP 14
6148: PPUSH
6149: CALL_OW 305
6153: NOT
6154: PUSH
6155: LD_EXP 14
6159: PPUSH
6160: CALL_OW 310
6164: NOT
6165: OR
6166: IFFALSE 6198
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6168: LD_EXP 14
6172: PPUSH
6173: LD_VAR 0 14
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 14
6186: PUSH
6187: LD_INT 2
6189: ARRAY
6190: PPUSH
6191: LD_INT 0
6193: PPUSH
6194: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6198: LD_EXP 14
6202: PPUSH
6203: LD_VAR 0 13
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: PPUSH
6212: LD_VAR 0 13
6216: PUSH
6217: LD_INT 2
6219: ARRAY
6220: PPUSH
6221: CALL_OW 111
// jmmArrival := true ;
6225: LD_ADDR_EXP 8
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 1
6237: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6245: LD_INT 1
6247: PPUSH
6248: LD_INT 17
6250: PPUSH
6251: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6255: LD_INT 2
6257: PPUSH
6258: LD_INT 17
6260: PPUSH
6261: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6265: LD_ADDR_VAR 0 5
6269: PUSH
6270: LD_INT 6
6272: PPUSH
6273: LD_INT 58
6275: PUSH
6276: EMPTY
6277: LIST
6278: PPUSH
6279: CALL_OW 70
6283: ST_TO_ADDR
// if tmp then
6284: LD_VAR 0 5
6288: IFFALSE 6316
// for i in tmp do
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_VAR 0 5
6299: PUSH
6300: FOR_IN
6301: IFFALSE 6314
// RemoveUnit ( i ) ;
6303: LD_VAR 0 2
6307: PPUSH
6308: CALL_OW 64
6312: GO 6300
6314: POP
6315: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6316: LD_ADDR_VAR 0 5
6320: PUSH
6321: LD_INT 6
6323: PPUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 3
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 70
6345: ST_TO_ADDR
// if tmp then
6346: LD_VAR 0 5
6350: IFFALSE 6374
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6352: LD_VAR 0 5
6356: PPUSH
6357: LD_INT 33
6359: PPUSH
6360: LD_INT 39
6362: PPUSH
6363: CALL_OW 111
// wait ( 0 0$3 ) ;
6367: LD_INT 105
6369: PPUSH
6370: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6374: LD_INT 70
6376: PPUSH
6377: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6381: LD_INT 6
6383: PPUSH
6384: LD_INT 50
6386: PUSH
6387: EMPTY
6388: LIST
6389: PPUSH
6390: CALL_OW 70
6394: NOT
6395: IFFALSE 6374
// uc_side := 4 ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_INT 4
6404: ST_TO_ADDR
// uc_nation := 1 ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6413: LD_ADDR_EXP 28
6417: PUSH
6418: LD_STRING Sikorski
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: LD_STRING 
6426: PPUSH
6427: CALL 40713 0 3
6431: ST_TO_ADDR
// vc_engine := engine_combustion ;
6432: LD_ADDR_OWVAR 39
6436: PUSH
6437: LD_INT 1
6439: ST_TO_ADDR
// vc_control := control_manual ;
6440: LD_ADDR_OWVAR 38
6444: PUSH
6445: LD_INT 1
6447: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6448: LD_ADDR_OWVAR 40
6452: PUSH
6453: LD_INT 6
6455: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6456: LD_ADDR_OWVAR 37
6460: PUSH
6461: LD_INT 4
6463: ST_TO_ADDR
// veh := CreateVehicle ;
6464: LD_ADDR_VAR 0 4
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6474: LD_VAR 0 4
6478: PPUSH
6479: LD_INT 3
6481: PPUSH
6482: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6486: LD_VAR 0 4
6490: PPUSH
6491: LD_INT 4
6493: NEG
6494: PPUSH
6495: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 70
6506: PPUSH
6507: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 6
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6526: LD_EXP 28
6530: PPUSH
6531: LD_VAR 0 4
6535: PPUSH
6536: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6540: LD_EXP 28
6544: PPUSH
6545: LD_INT 37
6547: PPUSH
6548: LD_INT 30
6550: PPUSH
6551: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6555: LD_INT 10
6557: PPUSH
6558: CALL_OW 67
// InitHc_All ( ) ;
6562: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 3
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_OWVAR 67
6598: ARRAY
6599: PUSH
6600: FOR_TO
6601: IFFALSE 6736
// begin repeat wait ( 0 0$2 ) ;
6603: LD_INT 70
6605: PPUSH
6606: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6610: LD_INT 6
6612: PPUSH
6613: LD_INT 50
6615: PUSH
6616: EMPTY
6617: LIST
6618: PPUSH
6619: CALL_OW 70
6623: NOT
6624: IFFALSE 6603
// uc_side := 4 ;
6626: LD_ADDR_OWVAR 20
6630: PUSH
6631: LD_INT 4
6633: ST_TO_ADDR
// uc_nation := 1 ;
6634: LD_ADDR_OWVAR 21
6638: PUSH
6639: LD_INT 1
6641: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6642: LD_INT 0
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_INT 4
6650: PPUSH
6651: LD_INT 7
6653: PPUSH
6654: CALL_OW 12
6658: PPUSH
6659: CALL_OW 380
// un := CreateHuman ;
6663: LD_ADDR_VAR 0 3
6667: PUSH
6668: CALL_OW 44
6672: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6673: LD_VAR 0 3
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 233
// SetTag ( un , 101 ) ;
6685: LD_VAR 0 3
6689: PPUSH
6690: LD_INT 101
6692: PPUSH
6693: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6697: LD_VAR 0 3
6701: PPUSH
6702: LD_INT 6
6704: PPUSH
6705: LD_INT 0
6707: PPUSH
6708: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6712: LD_VAR 0 3
6716: PPUSH
6717: LD_INT 25
6719: PPUSH
6720: LD_INT 27
6722: PPUSH
6723: CALL_OW 111
// wait ( 0 0$1 ) ;
6727: LD_INT 35
6729: PPUSH
6730: CALL_OW 67
// end ;
6734: GO 6600
6736: POP
6737: POP
// repeat wait ( 0 0$2 ) ;
6738: LD_INT 70
6740: PPUSH
6741: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 4
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 25
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: PUSH
6779: FOR_IN
6780: IFFALSE 6843
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_INT 17
6789: PPUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: LD_INT 58
6805: PUSH
6806: EMPTY
6807: LIST
6808: PUSH
6809: LD_INT 33
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 70
6832: PUSH
6833: LD_INT 1
6835: ARRAY
6836: PPUSH
6837: CALL_OW 115
6841: GO 6779
6843: POP
6844: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6845: LD_INT 17
6847: PPUSH
6848: LD_INT 22
6850: PUSH
6851: LD_INT 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: LD_INT 58
6863: PUSH
6864: EMPTY
6865: LIST
6866: PUSH
6867: LD_INT 33
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 70
6890: NOT
6891: IFFALSE 6738
// for i := 1 to 2 do
6893: LD_ADDR_VAR 0 2
6897: PUSH
6898: DOUBLE
6899: LD_INT 1
6901: DEC
6902: ST_TO_ADDR
6903: LD_INT 2
6905: PUSH
6906: FOR_TO
6907: IFFALSE 7019
// begin uc_side := 4 ;
6909: LD_ADDR_OWVAR 20
6913: PUSH
6914: LD_INT 4
6916: ST_TO_ADDR
// uc_nation := 1 ;
6917: LD_ADDR_OWVAR 21
6921: PUSH
6922: LD_INT 1
6924: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6925: LD_INT 0
6927: PPUSH
6928: LD_INT 4
6930: PPUSH
6931: LD_INT 3
6933: PPUSH
6934: LD_INT 5
6936: PPUSH
6937: CALL_OW 12
6941: PPUSH
6942: CALL_OW 380
// un := CreateHuman ;
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: CALL_OW 44
6955: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6956: LD_VAR 0 3
6960: PPUSH
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 233
// SetTag ( un , 101 ) ;
6968: LD_VAR 0 3
6972: PPUSH
6973: LD_INT 101
6975: PPUSH
6976: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_INT 6
6987: PPUSH
6988: LD_INT 0
6990: PPUSH
6991: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6995: LD_VAR 0 3
6999: PPUSH
7000: LD_INT 25
7002: PPUSH
7003: LD_INT 27
7005: PPUSH
7006: CALL_OW 111
// wait ( 0 0$1 ) ;
7010: LD_INT 35
7012: PPUSH
7013: CALL_OW 67
// end ;
7017: GO 6906
7019: POP
7020: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7021: LD_ADDR_VAR 0 2
7025: PUSH
7026: DOUBLE
7027: LD_INT 1
7029: DEC
7030: ST_TO_ADDR
7031: LD_INT 5
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7321
// begin repeat wait ( 0 0$2 ) ;
7058: LD_INT 70
7060: PPUSH
7061: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7065: LD_INT 6
7067: PPUSH
7068: LD_INT 50
7070: PUSH
7071: EMPTY
7072: LIST
7073: PPUSH
7074: CALL_OW 70
7078: NOT
7079: IFFALSE 7058
// uc_side := 4 ;
7081: LD_ADDR_OWVAR 20
7085: PUSH
7086: LD_INT 4
7088: ST_TO_ADDR
// uc_nation := 1 ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// vc_engine := engine_combustion ;
7097: LD_ADDR_OWVAR 39
7101: PUSH
7102: LD_INT 1
7104: ST_TO_ADDR
// vc_control := control_manual ;
7105: LD_ADDR_OWVAR 38
7109: PUSH
7110: LD_INT 1
7112: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7113: LD_ADDR_OWVAR 40
7117: PUSH
7118: LD_INT 5
7120: PUSH
7121: LD_INT 7
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 4
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_VAR 0 2
7140: PUSH
7141: LD_INT 4
7143: MOD
7144: PUSH
7145: LD_INT 1
7147: PLUS
7148: ARRAY
7149: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7150: LD_ADDR_OWVAR 37
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: LD_INT 4
7163: PUSH
7164: LD_INT 4
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_VAR 0 2
7177: PUSH
7178: LD_INT 4
7180: MOD
7181: PUSH
7182: LD_INT 1
7184: PLUS
7185: ARRAY
7186: ST_TO_ADDR
// veh := CreateVehicle ;
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: CALL_OW 45
7196: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7197: LD_VAR 0 4
7201: PPUSH
7202: LD_INT 3
7204: PPUSH
7205: CALL_OW 233
// SetTag ( veh , 0 ) ;
7209: LD_VAR 0 4
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7221: LD_VAR 0 4
7225: PPUSH
7226: LD_INT 70
7228: PPUSH
7229: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7233: LD_VAR 0 4
7237: PPUSH
7238: LD_INT 6
7240: PPUSH
7241: LD_INT 0
7243: PPUSH
7244: CALL_OW 49
// InitHc ;
7248: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7252: LD_INT 0
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 4
7260: PPUSH
7261: LD_INT 7
7263: PPUSH
7264: CALL_OW 12
7268: PPUSH
7269: CALL_OW 380
// un := CreateHuman ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: CALL_OW 44
7282: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7283: LD_VAR 0 3
7287: PPUSH
7288: LD_VAR 0 4
7292: PPUSH
7293: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7297: LD_VAR 0 3
7301: PPUSH
7302: LD_INT 30
7304: PPUSH
7305: LD_INT 22
7307: PPUSH
7308: CALL_OW 111
// wait ( 0 0$3 ) ;
7312: LD_INT 105
7314: PPUSH
7315: CALL_OW 67
// end ;
7319: GO 7055
7321: POP
7322: POP
// wait ( 0 0$10 ) ;
7323: LD_INT 350
7325: PPUSH
7326: CALL_OW 67
// end ;
7330: LD_VAR 0 1
7334: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
// gammaBase := [ ] ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: EMPTY
7347: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT 22
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 21
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 50
7380: PUSH
7381: EMPTY
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 70
7393: ST_TO_ADDR
// for i in buildings do
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 5
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7842
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 266
7416: PUSH
7417: LD_INT 6
7419: PUSH
7420: LD_INT 7
7422: PUSH
7423: LD_INT 8
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: IN
7431: IFFALSE 7545
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7433: LD_ADDR_VAR 0 4
7437: PUSH
7438: LD_VAR 0 4
7442: PUSH
7443: LD_VAR 0 3
7447: PPUSH
7448: CALL_OW 266
7452: PUSH
7453: LD_VAR 0 3
7457: PPUSH
7458: CALL_OW 250
7462: PUSH
7463: LD_VAR 0 3
7467: PPUSH
7468: CALL_OW 251
7472: PUSH
7473: LD_VAR 0 3
7477: PPUSH
7478: CALL_OW 254
7482: PUSH
7483: LD_VAR 0 3
7487: PPUSH
7488: CALL_OW 267
7492: PUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 248
7502: PUSH
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 268
7515: PUSH
7516: LD_VAR 0 3
7520: PPUSH
7521: LD_INT 2
7523: PPUSH
7524: CALL_OW 268
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: ADD
7542: ST_TO_ADDR
7543: GO 7840
// if GetBType ( i ) = b_bunker then
7545: LD_VAR 0 3
7549: PPUSH
7550: CALL_OW 266
7554: PUSH
7555: LD_INT 32
7557: EQUAL
7558: IFFALSE 7655
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7560: LD_ADDR_VAR 0 4
7564: PUSH
7565: LD_VAR 0 4
7569: PUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: CALL_OW 266
7579: PUSH
7580: LD_VAR 0 3
7584: PPUSH
7585: CALL_OW 250
7589: PUSH
7590: LD_VAR 0 3
7594: PPUSH
7595: CALL_OW 251
7599: PUSH
7600: LD_VAR 0 3
7604: PPUSH
7605: CALL_OW 254
7609: PUSH
7610: LD_VAR 0 3
7614: PPUSH
7615: CALL_OW 267
7619: PUSH
7620: LD_VAR 0 3
7624: PPUSH
7625: CALL_OW 248
7629: PUSH
7630: LD_VAR 0 3
7634: PPUSH
7635: CALL_OW 269
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: ADD
7652: ST_TO_ADDR
7653: GO 7840
// if GetBType ( i ) = b_factory then
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 266
7664: PUSH
7665: LD_INT 3
7667: EQUAL
7668: IFFALSE 7758
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PPUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 266
7692: PUSH
7693: LD_VAR 0 3
7697: PPUSH
7698: CALL_OW 250
7702: PUSH
7703: LD_VAR 0 3
7707: PPUSH
7708: CALL_OW 251
7712: PUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: CALL_OW 254
7722: PUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 267
7732: PUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 248
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 2
7755: ST_TO_ADDR
7756: GO 7840
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7758: LD_ADDR_VAR 0 4
7762: PUSH
7763: LD_VAR 0 4
7767: PUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 266
7777: PUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 250
7787: PUSH
7788: LD_VAR 0 3
7792: PPUSH
7793: CALL_OW 251
7797: PUSH
7798: LD_VAR 0 3
7802: PPUSH
7803: CALL_OW 254
7807: PUSH
7808: LD_VAR 0 3
7812: PPUSH
7813: CALL_OW 267
7817: PUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 248
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: ADD
7839: ST_TO_ADDR
// end ;
7840: GO 7404
7842: POP
7843: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7844: LD_VAR 0 4
7848: PPUSH
7849: LD_STRING 08_GammaBase
7851: PPUSH
7852: CALL_OW 39
// end ;
7856: LD_VAR 0 2
7860: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_INT 17
7877: PPUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 3
7890: PUSH
7891: LD_INT 21
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 3
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 70
7931: ST_TO_ADDR
// if tmp then
7932: LD_VAR 0 3
7936: IFFALSE 8055
// begin for i in tmp do
7938: LD_ADDR_VAR 0 2
7942: PUSH
7943: LD_VAR 0 3
7947: PUSH
7948: FOR_IN
7949: IFFALSE 7980
// begin SetSide ( i , 4 ) ;
7951: LD_VAR 0 2
7955: PPUSH
7956: LD_INT 4
7958: PPUSH
7959: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7963: LD_VAR 0 2
7967: PPUSH
7968: LD_INT 42
7970: PPUSH
7971: LD_INT 22
7973: PPUSH
7974: CALL_OW 111
// end ;
7978: GO 7948
7980: POP
7981: POP
// repeat wait ( 0 0$3 ) ;
7982: LD_INT 105
7984: PPUSH
7985: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_INT 51
7996: PPUSH
7997: LD_INT 16
7999: PPUSH
8000: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8004: LD_VAR 0 3
8008: PPUSH
8009: LD_INT 95
8011: PUSH
8012: LD_INT 17
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 72
8023: NOT
8024: IFFALSE 7982
// for i in tmp do
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 3
8035: PUSH
8036: FOR_IN
8037: IFFALSE 8053
// SetSide ( i , 1 ) ;
8039: LD_VAR 0 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 235
8051: GO 8036
8053: POP
8054: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8055: LD_ADDR_VAR 0 3
8059: PUSH
8060: LD_INT 17
8062: PPUSH
8063: LD_INT 22
8065: PUSH
8066: LD_INT 1
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 70
8091: ST_TO_ADDR
// if tmp then
8092: LD_VAR 0 3
8096: IFFALSE 8120
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8098: LD_VAR 0 3
8102: PPUSH
8103: LD_INT 40
8105: PPUSH
8106: LD_INT 32
8108: PPUSH
8109: CALL_OW 111
// wait ( 0 0$3 ) ;
8113: LD_INT 105
8115: PPUSH
8116: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8120: LD_ADDR_VAR 0 3
8124: PUSH
8125: LD_INT 17
8127: PPUSH
8128: LD_INT 22
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 2
8140: PUSH
8141: LD_INT 21
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 21
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// if tmp then
8175: LD_VAR 0 3
8179: IFFALSE 8327
// begin repeat wait ( 0 0$1 ) ;
8181: LD_INT 35
8183: PPUSH
8184: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 17
8195: PPUSH
8196: LD_INT 22
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 2
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 21
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 70
8242: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: LD_INT 25
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 2
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: FOR_IN
8296: IFFALSE 8318
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: CALL_OW 115
8316: GO 8295
8318: POP
8319: POP
// until not tmp ;
8320: LD_VAR 0 3
8324: NOT
8325: IFFALSE 8181
// end ; wait ( 0 0$2 ) ;
8327: LD_INT 70
8329: PPUSH
8330: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8334: LD_ADDR_VAR 0 3
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 4
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8354: LD_VAR 0 3
8358: PPUSH
8359: LD_INT 52
8361: PPUSH
8362: LD_INT 54
8364: PPUSH
8365: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8369: LD_VAR 0 3
8373: PPUSH
8374: LD_INT 175
8376: PPUSH
8377: CALL_OW 202
// wait ( 0 0$5 ) ;
8381: LD_INT 175
8383: PPUSH
8384: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_INT 120
8395: PUSH
8396: LD_INT 101
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 72
8407: PPUSH
8408: LD_INT 42
8410: PPUSH
8411: LD_INT 52
8413: PPUSH
8414: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8418: LD_VAR 0 3
8422: PPUSH
8423: LD_INT 120
8425: PUSH
8426: LD_INT 101
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 72
8437: PPUSH
8438: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_INT 120
8449: PUSH
8450: LD_INT 101
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 25
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 72
8475: PPUSH
8476: LD_INT 34
8478: PPUSH
8479: LD_INT 47
8481: PPUSH
8482: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8486: LD_VAR 0 3
8490: PPUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 101
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 4
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PPUSH
8515: CALL_OW 72
8519: PPUSH
8520: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8524: LD_ADDR_VAR 0 7
8528: PUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8549: LD_ADDR_VAR 0 4
8553: PUSH
8554: LD_INT 81
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8569: LD_ADDR_VAR 0 5
8573: PUSH
8574: LD_INT 57
8576: PUSH
8577: LD_INT 66
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 62
8586: PUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8598: LD_INT 35
8600: PPUSH
8601: CALL_OW 67
// for i in filter do
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: LD_VAR 0 7
8614: PUSH
8615: FOR_IN
8616: IFFALSE 9055
// begin if IsDead ( i ) then
8618: LD_VAR 0 2
8622: PPUSH
8623: CALL_OW 301
8627: IFFALSE 8647
// begin filter := filter diff i ;
8629: LD_ADDR_VAR 0 7
8633: PUSH
8634: LD_VAR 0 7
8638: PUSH
8639: LD_VAR 0 2
8643: DIFF
8644: ST_TO_ADDR
// continue ;
8645: GO 8615
// end ; tmp := IsDrivenBy ( i ) ;
8647: LD_ADDR_VAR 0 3
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 311
8661: ST_TO_ADDR
// if not tmp then
8662: LD_VAR 0 3
8666: NOT
8667: IFFALSE 8671
// continue ;
8669: GO 8615
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL_OW 261
8680: PUSH
8681: LD_INT 30
8683: GREATER
8684: PUSH
8685: LD_VAR 0 2
8689: PPUSH
8690: CALL_OW 110
8694: PUSH
8695: LD_INT 2
8697: EQUAL
8698: AND
8699: IFFALSE 8715
// SetTag ( i , 0 ) else
8701: LD_VAR 0 2
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 109
8713: GO 8759
// if GetTag ( i ) = 2 then
8715: LD_VAR 0 2
8719: PPUSH
8720: CALL_OW 110
8724: PUSH
8725: LD_INT 2
8727: EQUAL
8728: IFFALSE 8759
// begin ComMoveXY ( i , 52 , 50 ) ;
8730: LD_VAR 0 2
8734: PPUSH
8735: LD_INT 52
8737: PPUSH
8738: LD_INT 50
8740: PPUSH
8741: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
8745: LD_VAR 0 2
8749: PPUSH
8750: LD_EXP 31
8754: PPUSH
8755: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8759: LD_VAR 0 2
8763: PPUSH
8764: CALL_OW 256
8768: PUSH
8769: LD_INT 600
8771: GREATEREQUAL
8772: PUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 110
8782: NOT
8783: AND
8784: IFFALSE 8810
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8786: LD_VAR 0 2
8790: PPUSH
8791: LD_VAR 0 4
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 74
8805: PPUSH
8806: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8810: LD_VAR 0 2
8814: PPUSH
8815: CALL_OW 256
8819: PUSH
8820: LD_INT 600
8822: LESS
8823: PUSH
8824: LD_VAR 0 2
8828: PPUSH
8829: CALL_OW 110
8833: NOT
8834: AND
8835: IFFALSE 8911
// begin SetTag ( i , 1 ) ;
8837: LD_VAR 0 2
8841: PPUSH
8842: LD_INT 1
8844: PPUSH
8845: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8849: LD_ADDR_VAR 0 6
8853: PUSH
8854: LD_VAR 0 2
8858: PPUSH
8859: LD_VAR 0 5
8863: PPUSH
8864: CALL 81759 0 2
8868: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8869: LD_VAR 0 2
8873: PPUSH
8874: LD_VAR 0 6
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 6
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_INT 40
8903: PPUSH
8904: LD_INT 49
8906: PPUSH
8907: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8911: LD_VAR 0 2
8915: PPUSH
8916: CALL_OW 110
8920: PUSH
8921: LD_INT 1
8923: EQUAL
8924: PUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: LD_INT 40
8932: PPUSH
8933: LD_INT 49
8935: PPUSH
8936: CALL_OW 297
8940: PUSH
8941: LD_INT 9
8943: LESS
8944: AND
8945: PUSH
8946: LD_VAR 0 3
8950: AND
8951: IFFALSE 9053
// begin ComExitVehicle ( tmp ) ;
8953: LD_VAR 0 3
8957: PPUSH
8958: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8962: LD_VAR 0 3
8966: PPUSH
8967: LD_VAR 0 2
8971: PPUSH
8972: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8976: LD_INT 35
8978: PPUSH
8979: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 256
8992: PUSH
8993: LD_INT 1000
8995: EQUAL
8996: IFFALSE 8976
// ComEnterUnit ( tmp , i ) ;
8998: LD_VAR 0 3
9002: PPUSH
9003: LD_VAR 0 2
9007: PPUSH
9008: CALL_OW 120
// if GetFuel ( i ) <= 40 then
9012: LD_VAR 0 2
9016: PPUSH
9017: CALL_OW 261
9021: PUSH
9022: LD_INT 40
9024: LESSEQUAL
9025: IFFALSE 9041
// SetTag ( i , 2 ) else
9027: LD_VAR 0 2
9031: PPUSH
9032: LD_INT 2
9034: PPUSH
9035: CALL_OW 109
9039: GO 9053
// SetTag ( i , 0 ) ;
9041: LD_VAR 0 2
9045: PPUSH
9046: LD_INT 0
9048: PPUSH
9049: CALL_OW 109
// end ; end ;
9053: GO 8615
9055: POP
9056: POP
// until not filter ;
9057: LD_VAR 0 7
9061: NOT
9062: IFFALSE 8598
// end ; end_of_file
9064: LD_VAR 0 1
9068: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9069: LD_INT 0
9071: PPUSH
9072: PPUSH
9073: PPUSH
9074: PPUSH
9075: PPUSH
// uc_side := 3 ;
9076: LD_ADDR_OWVAR 20
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// uc_nation := 3 ;
9084: LD_ADDR_OWVAR 21
9088: PUSH
9089: LD_INT 3
9091: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9092: LD_ADDR_EXP 33
9096: PUSH
9097: LD_INT 8
9099: PUSH
9100: LD_INT 11
9102: PUSH
9103: LD_INT 14
9105: PUSH
9106: LD_INT 17
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PUSH
9115: LD_OWVAR 67
9119: ARRAY
9120: ST_TO_ADDR
// ruMobile := [ ] ;
9121: LD_ADDR_EXP 34
9125: PUSH
9126: EMPTY
9127: ST_TO_ADDR
// ruBuildList := [ ] ;
9128: LD_ADDR_EXP 35
9132: PUSH
9133: EMPTY
9134: ST_TO_ADDR
// russianAttackers := [ ] ;
9135: LD_ADDR_EXP 36
9139: PUSH
9140: EMPTY
9141: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9142: LD_ADDR_VAR 0 5
9146: PUSH
9147: LD_INT 43
9149: PUSH
9150: LD_INT 44
9152: PUSH
9153: LD_INT 46
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: ST_TO_ADDR
// if Difficulty > 2 then
9161: LD_OWVAR 67
9165: PUSH
9166: LD_INT 2
9168: GREATER
9169: IFFALSE 9192
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9171: LD_ADDR_VAR 0 5
9175: PUSH
9176: LD_VAR 0 5
9180: PUSH
9181: LD_INT 45
9183: PUSH
9184: LD_INT 46
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: ADD
9191: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9192: LD_ADDR_EXP 32
9196: PUSH
9197: LD_STRING Borodin
9199: PPUSH
9200: CALL_OW 25
9204: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9205: LD_EXP 32
9209: PPUSH
9210: LD_INT 28
9212: PPUSH
9213: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9217: LD_INT 28
9219: PPUSH
9220: CALL_OW 274
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: LD_INT 3000
9230: PUSH
9231: LD_INT 4000
9233: PUSH
9234: LD_INT 5000
9236: PUSH
9237: LD_INT 6000
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: PUSH
9246: LD_OWVAR 67
9250: ARRAY
9251: PPUSH
9252: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9256: LD_INT 28
9258: PPUSH
9259: CALL_OW 274
9263: PPUSH
9264: LD_INT 2
9266: PPUSH
9267: LD_INT 1000
9269: PPUSH
9270: CALL_OW 277
// if Difficulty > 2 then
9274: LD_OWVAR 67
9278: PUSH
9279: LD_INT 2
9281: GREATER
9282: IFFALSE 9406
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9284: LD_ADDR_VAR 0 4
9288: PUSH
9289: LD_INT 99
9291: PUSH
9292: LD_INT 130
9294: PUSH
9295: LD_INT 2
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 121
9305: PUSH
9306: LD_INT 127
9308: PUSH
9309: LD_INT 4
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 117
9319: PUSH
9320: LD_INT 121
9322: PUSH
9323: LD_INT 4
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: ST_TO_ADDR
// for i in tmp do
9336: LD_ADDR_VAR 0 2
9340: PUSH
9341: LD_VAR 0 4
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9404
// begin bc_type := b_turret ;
9349: LD_ADDR_OWVAR 42
9353: PUSH
9354: LD_INT 33
9356: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9357: LD_ADDR_OWVAR 43
9361: PUSH
9362: LD_INT 2
9364: PUSH
9365: LD_OWVAR 67
9369: PLUS
9370: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9371: LD_VAR 0 2
9375: PUSH
9376: LD_INT 1
9378: ARRAY
9379: PPUSH
9380: LD_VAR 0 2
9384: PUSH
9385: LD_INT 2
9387: ARRAY
9388: PPUSH
9389: LD_VAR 0 2
9393: PUSH
9394: LD_INT 3
9396: ARRAY
9397: PPUSH
9398: CALL_OW 47
// end ;
9402: GO 9346
9404: POP
9405: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: LD_INT 22
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 21
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 69
9439: PUSH
9440: FOR_IN
9441: IFFALSE 9463
// SetBLevel ( i , 2 + Difficulty ) ;
9443: LD_VAR 0 2
9447: PPUSH
9448: LD_INT 2
9450: PUSH
9451: LD_OWVAR 67
9455: PLUS
9456: PPUSH
9457: CALL_OW 241
9461: GO 9440
9463: POP
9464: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9465: LD_ADDR_VAR 0 4
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: LD_INT 30
9485: PUSH
9486: LD_INT 32
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: LD_INT 30
9495: PUSH
9496: LD_INT 33
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PPUSH
9512: CALL_OW 69
9516: ST_TO_ADDR
// for i in tmp do
9517: LD_ADDR_VAR 0 2
9521: PUSH
9522: LD_VAR 0 4
9526: PUSH
9527: FOR_IN
9528: IFFALSE 9560
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9530: LD_VAR 0 2
9534: PPUSH
9535: LD_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_VAR 0 5
9547: PPUSH
9548: CALL_OW 12
9552: ARRAY
9553: PPUSH
9554: CALL_OW 431
9558: GO 9527
9560: POP
9561: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9562: LD_ADDR_VAR 0 2
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_INT 3
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 30
9579: PUSH
9580: LD_INT 32
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PPUSH
9591: CALL_OW 69
9595: PUSH
9596: FOR_IN
9597: IFFALSE 9646
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9599: LD_INT 0
9601: PPUSH
9602: LD_INT 5
9604: PUSH
9605: LD_INT 6
9607: PUSH
9608: LD_INT 7
9610: PUSH
9611: LD_INT 8
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_OWVAR 67
9624: ARRAY
9625: PPUSH
9626: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9630: CALL_OW 44
9634: PPUSH
9635: LD_VAR 0 2
9639: PPUSH
9640: CALL_OW 52
// end ;
9644: GO 9596
9646: POP
9647: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9648: LD_ADDR_VAR 0 2
9652: PUSH
9653: LD_INT 22
9655: PUSH
9656: LD_INT 3
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 30
9665: PUSH
9666: LD_INT 5
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 69
9681: PUSH
9682: FOR_IN
9683: IFFALSE 9773
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9685: LD_ADDR_VAR 0 3
9689: PUSH
9690: DOUBLE
9691: LD_INT 1
9693: DEC
9694: ST_TO_ADDR
9695: LD_INT 2
9697: PUSH
9698: LD_INT 3
9700: PUSH
9701: LD_INT 4
9703: PUSH
9704: LD_INT 5
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: PUSH
9713: LD_OWVAR 67
9717: ARRAY
9718: PUSH
9719: FOR_TO
9720: IFFALSE 9769
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9722: LD_INT 0
9724: PPUSH
9725: LD_INT 5
9727: PUSH
9728: LD_INT 6
9730: PUSH
9731: LD_INT 7
9733: PUSH
9734: LD_INT 8
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: LD_OWVAR 67
9747: ARRAY
9748: PPUSH
9749: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9753: CALL_OW 44
9757: PPUSH
9758: LD_VAR 0 2
9762: PPUSH
9763: CALL_OW 52
// end ;
9767: GO 9719
9769: POP
9770: POP
// end ;
9771: GO 9682
9773: POP
9774: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9775: LD_ADDR_VAR 0 2
9779: PUSH
9780: DOUBLE
9781: LD_INT 1
9783: DEC
9784: ST_TO_ADDR
9785: LD_INT 3
9787: PUSH
9788: LD_INT 4
9790: PUSH
9791: LD_INT 5
9793: PUSH
9794: LD_INT 5
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: PUSH
9803: LD_OWVAR 67
9807: ARRAY
9808: PUSH
9809: FOR_TO
9810: IFFALSE 9857
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9812: LD_INT 0
9814: PPUSH
9815: LD_INT 4
9817: PUSH
9818: LD_INT 5
9820: PUSH
9821: LD_INT 5
9823: PUSH
9824: LD_INT 6
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_OWVAR 67
9837: ARRAY
9838: PPUSH
9839: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9843: CALL_OW 44
9847: PPUSH
9848: LD_INT 28
9850: PPUSH
9851: CALL_OW 52
// end ;
9855: GO 9809
9857: POP
9858: POP
// for i := 1 to 2 do
9859: LD_ADDR_VAR 0 2
9863: PUSH
9864: DOUBLE
9865: LD_INT 1
9867: DEC
9868: ST_TO_ADDR
9869: LD_INT 2
9871: PUSH
9872: FOR_TO
9873: IFFALSE 9907
// begin PrepareScientist ( false , 6 ) ;
9875: LD_INT 0
9877: PPUSH
9878: LD_INT 6
9880: PPUSH
9881: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9885: CALL_OW 44
9889: PPUSH
9890: LD_INT 81
9892: PPUSH
9893: LD_INT 93
9895: PPUSH
9896: CALL_OW 428
9900: PPUSH
9901: CALL_OW 52
// end ;
9905: GO 9872
9907: POP
9908: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9909: LD_INT 22
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: LD_INT 51
9920: PPUSH
9921: LD_INT 100
9923: PPUSH
9924: CALL 45553 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9928: CALL_OW 45
9932: PPUSH
9933: LD_INT 91
9935: PPUSH
9936: LD_INT 94
9938: PPUSH
9939: LD_INT 3
9941: PPUSH
9942: LD_INT 0
9944: PPUSH
9945: CALL_OW 50
// for i := 1 to 2 do
9949: LD_ADDR_VAR 0 2
9953: PUSH
9954: DOUBLE
9955: LD_INT 1
9957: DEC
9958: ST_TO_ADDR
9959: LD_INT 2
9961: PUSH
9962: FOR_TO
9963: IFFALSE 10007
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9965: LD_INT 22
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: LD_INT 3
9973: PPUSH
9974: LD_INT 52
9976: PPUSH
9977: LD_INT 100
9979: PPUSH
9980: CALL 45553 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9984: CALL_OW 45
9988: PPUSH
9989: LD_INT 91
9991: PPUSH
9992: LD_INT 94
9994: PPUSH
9995: LD_INT 4
9997: PPUSH
9998: LD_INT 0
10000: PPUSH
10001: CALL_OW 50
// end ;
10005: GO 9962
10007: POP
10008: POP
// end ;
10009: LD_VAR 0 1
10013: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
10014: LD_INT 0
10016: PPUSH
10017: PPUSH
10018: PPUSH
10019: PPUSH
10020: PPUSH
// uc_side := 3 ;
10021: LD_ADDR_OWVAR 20
10025: PUSH
10026: LD_INT 3
10028: ST_TO_ADDR
// uc_nation := 3 ;
10029: LD_ADDR_OWVAR 21
10033: PUSH
10034: LD_INT 3
10036: ST_TO_ADDR
// for i := 1 to 4 do
10037: LD_ADDR_VAR 0 2
10041: PUSH
10042: DOUBLE
10043: LD_INT 1
10045: DEC
10046: ST_TO_ADDR
10047: LD_INT 4
10049: PUSH
10050: FOR_TO
10051: IFFALSE 10178
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10053: LD_INT 22
10055: PPUSH
10056: LD_INT 1
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: LD_INT 42
10064: PUSH
10065: LD_INT 43
10067: PUSH
10068: LD_INT 44
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 1
10078: PPUSH
10079: LD_INT 3
10081: PPUSH
10082: CALL_OW 12
10086: ARRAY
10087: PPUSH
10088: LD_INT 40
10090: PPUSH
10091: CALL 45553 0 5
// veh := CreateVehicle ;
10095: LD_ADDR_VAR 0 4
10099: PUSH
10100: CALL_OW 45
10104: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10105: LD_VAR 0 4
10109: PPUSH
10110: LD_INT 5
10112: PPUSH
10113: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10117: LD_VAR 0 4
10121: PPUSH
10122: LD_INT 7
10124: PPUSH
10125: LD_INT 0
10127: PPUSH
10128: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10132: LD_INT 0
10134: PPUSH
10135: LD_INT 5
10137: PPUSH
10138: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10142: CALL_OW 44
10146: PPUSH
10147: LD_VAR 0 4
10151: PPUSH
10152: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10156: LD_ADDR_VAR 0 5
10160: PUSH
10161: LD_VAR 0 5
10165: PPUSH
10166: LD_VAR 0 4
10170: PPUSH
10171: CALL 78415 0 2
10175: ST_TO_ADDR
// end ;
10176: GO 10050
10178: POP
10179: POP
// for i := 1 to 3 do
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: DOUBLE
10186: LD_INT 1
10188: DEC
10189: ST_TO_ADDR
10190: LD_INT 3
10192: PUSH
10193: FOR_TO
10194: IFFALSE 10321
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10196: LD_INT 22
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: LD_INT 42
10207: PUSH
10208: LD_INT 43
10210: PUSH
10211: LD_INT 44
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 1
10221: PPUSH
10222: LD_INT 3
10224: PPUSH
10225: CALL_OW 12
10229: ARRAY
10230: PPUSH
10231: LD_INT 40
10233: PPUSH
10234: CALL 45553 0 5
// veh := CreateVehicle ;
10238: LD_ADDR_VAR 0 4
10242: PUSH
10243: CALL_OW 45
10247: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10248: LD_VAR 0 4
10252: PPUSH
10253: LD_INT 5
10255: PPUSH
10256: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10260: LD_VAR 0 4
10264: PPUSH
10265: LD_INT 8
10267: PPUSH
10268: LD_INT 0
10270: PPUSH
10271: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10275: LD_INT 0
10277: PPUSH
10278: LD_INT 5
10280: PPUSH
10281: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10285: CALL_OW 44
10289: PPUSH
10290: LD_VAR 0 4
10294: PPUSH
10295: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10299: LD_ADDR_VAR 0 5
10303: PUSH
10304: LD_VAR 0 5
10308: PPUSH
10309: LD_VAR 0 4
10313: PPUSH
10314: CALL 78415 0 2
10318: ST_TO_ADDR
// end ;
10319: GO 10193
10321: POP
10322: POP
// for i := 1 to 2 do
10323: LD_ADDR_VAR 0 2
10327: PUSH
10328: DOUBLE
10329: LD_INT 1
10331: DEC
10332: ST_TO_ADDR
10333: LD_INT 2
10335: PUSH
10336: FOR_TO
10337: IFFALSE 10396
// begin PrepareSoldier ( false , 5 ) ;
10339: LD_INT 0
10341: PPUSH
10342: LD_INT 5
10344: PPUSH
10345: CALL_OW 381
// un := CreateHuman ;
10349: LD_ADDR_VAR 0 3
10353: PUSH
10354: CALL_OW 44
10358: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10359: LD_VAR 0 3
10363: PPUSH
10364: LD_INT 8
10366: PPUSH
10367: LD_INT 0
10369: PPUSH
10370: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10374: LD_ADDR_VAR 0 5
10378: PUSH
10379: LD_VAR 0 5
10383: PPUSH
10384: LD_VAR 0 3
10388: PPUSH
10389: CALL 78415 0 2
10393: ST_TO_ADDR
// end ;
10394: GO 10336
10396: POP
10397: POP
// for i in tmp do
10398: LD_ADDR_VAR 0 2
10402: PUSH
10403: LD_VAR 0 5
10407: PUSH
10408: FOR_IN
10409: IFFALSE 10428
// ComAgressiveMove ( i , 51 , 16 ) ;
10411: LD_VAR 0 2
10415: PPUSH
10416: LD_INT 51
10418: PPUSH
10419: LD_INT 16
10421: PPUSH
10422: CALL_OW 114
10426: GO 10408
10428: POP
10429: POP
// end ;
10430: LD_VAR 0 1
10434: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10435: LD_EXP 34
10439: IFFALSE 11014
10441: GO 10443
10443: DISABLE
10444: LD_INT 0
10446: PPUSH
10447: PPUSH
10448: PPUSH
// begin enable ;
10449: ENABLE
// if not ruMobile then
10450: LD_EXP 34
10454: NOT
10455: IFFALSE 10459
// exit ;
10457: GO 11014
// for i in ruMobile do
10459: LD_ADDR_VAR 0 1
10463: PUSH
10464: LD_EXP 34
10468: PUSH
10469: FOR_IN
10470: IFFALSE 11012
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10472: LD_VAR 0 1
10476: PPUSH
10477: CALL_OW 302
10481: NOT
10482: PUSH
10483: LD_VAR 0 1
10487: PPUSH
10488: CALL_OW 255
10492: PUSH
10493: LD_INT 3
10495: NONEQUAL
10496: OR
10497: IFFALSE 10517
// begin ruMobile := ruMobile diff i ;
10499: LD_ADDR_EXP 34
10503: PUSH
10504: LD_EXP 34
10508: PUSH
10509: LD_VAR 0 1
10513: DIFF
10514: ST_TO_ADDR
// continue ;
10515: GO 10469
// end ; if GetTag ( i ) = 300 then
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 110
10526: PUSH
10527: LD_INT 300
10529: EQUAL
10530: IFFALSE 10645
// begin if GetFuel ( i ) < 50 then
10532: LD_VAR 0 1
10536: PPUSH
10537: CALL_OW 261
10541: PUSH
10542: LD_INT 50
10544: LESS
10545: IFFALSE 10604
// begin ComMoveXY ( i , 93 , 100 ) ;
10547: LD_VAR 0 1
10551: PPUSH
10552: LD_INT 93
10554: PPUSH
10555: LD_INT 100
10557: PPUSH
10558: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10562: LD_INT 35
10564: PPUSH
10565: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10569: LD_VAR 0 1
10573: PPUSH
10574: LD_INT 93
10576: PPUSH
10577: LD_INT 100
10579: PPUSH
10580: CALL_OW 297
10584: PUSH
10585: LD_INT 4
10587: LESS
10588: IFFALSE 10562
// SetFuel ( i , 100 ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_INT 100
10597: PPUSH
10598: CALL_OW 240
// end else
10602: GO 10645
// if not IsInArea ( i , ruParkingArea ) then
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 10
10611: PPUSH
10612: CALL_OW 308
10616: NOT
10617: IFFALSE 10633
// ComMoveToArea ( i , ruParkingArea ) else
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 10
10626: PPUSH
10627: CALL_OW 113
10631: GO 10645
// SetTag ( i , 301 ) ;
10633: LD_VAR 0 1
10637: PPUSH
10638: LD_INT 301
10640: PPUSH
10641: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 110
10654: PUSH
10655: LD_INT 301
10657: EQUAL
10658: IFFALSE 10788
// begin if GetLives ( i ) < 1000 then
10660: LD_VAR 0 1
10664: PPUSH
10665: CALL_OW 256
10669: PUSH
10670: LD_INT 1000
10672: LESS
10673: IFFALSE 10765
// begin if not IsDrivenBy ( i ) then
10675: LD_VAR 0 1
10679: PPUSH
10680: CALL_OW 311
10684: NOT
10685: IFFALSE 10689
// continue ;
10687: GO 10469
// mech := IsDrivenBy ( i ) ;
10689: LD_ADDR_VAR 0 2
10693: PUSH
10694: LD_VAR 0 1
10698: PPUSH
10699: CALL_OW 311
10703: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10704: LD_VAR 0 2
10708: PPUSH
10709: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10713: LD_VAR 0 2
10717: PPUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10727: LD_INT 35
10729: PPUSH
10730: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10734: LD_VAR 0 1
10738: PPUSH
10739: CALL_OW 256
10743: PUSH
10744: LD_INT 1000
10746: EQUAL
10747: IFFALSE 10727
// ComEnterUnit ( mech , i ) ;
10749: LD_VAR 0 2
10753: PPUSH
10754: LD_VAR 0 1
10758: PPUSH
10759: CALL_OW 120
// end else
10763: GO 10788
// if IsDrivenBy ( i ) then
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 311
10774: IFFALSE 10788
// SetTag ( i , 0 ) ;
10776: LD_VAR 0 1
10780: PPUSH
10781: LD_INT 0
10783: PPUSH
10784: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10788: LD_VAR 0 1
10792: PPUSH
10793: CALL_OW 110
10797: PUSH
10798: LD_INT 300
10800: LESS
10801: IFFALSE 11010
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10803: LD_ADDR_VAR 0 3
10807: PUSH
10808: LD_INT 11
10810: PPUSH
10811: LD_INT 81
10813: PUSH
10814: LD_INT 3
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 70
10825: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 256
10835: PUSH
10836: LD_INT 650
10838: LESS
10839: IFFALSE 10864
// begin ComStop ( i ) ;
10841: LD_VAR 0 1
10845: PPUSH
10846: CALL_OW 141
// SetTag ( i , 300 ) ;
10850: LD_VAR 0 1
10854: PPUSH
10855: LD_INT 300
10857: PPUSH
10858: CALL_OW 109
// continue ;
10862: GO 10469
// end ; if enemy then
10864: LD_VAR 0 3
10868: IFFALSE 10908
// begin if not HasTask ( i ) then
10870: LD_VAR 0 1
10874: PPUSH
10875: CALL_OW 314
10879: NOT
10880: IFFALSE 10906
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_VAR 0 3
10891: PPUSH
10892: LD_VAR 0 1
10896: PPUSH
10897: CALL_OW 74
10901: PPUSH
10902: CALL_OW 115
// end else
10906: GO 11010
// if ruMobile > 2 then
10908: LD_EXP 34
10912: PUSH
10913: LD_INT 2
10915: GREATER
10916: IFFALSE 11010
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: LD_INT 81
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PPUSH
10933: CALL_OW 69
10937: ST_TO_ADDR
// if enemy then
10938: LD_VAR 0 3
10942: IFFALSE 11010
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10944: LD_VAR 0 1
10948: PPUSH
10949: LD_INT 116
10951: PUSH
10952: LD_INT 95
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 84
10961: PUSH
10962: LD_INT 68
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 58
10971: PUSH
10972: LD_INT 53
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 44
10981: PUSH
10982: LD_INT 35
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 45
10991: PUSH
10992: LD_INT 23
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: PPUSH
11006: CALL 81019 0 2
// end ; end ; end ;
11010: GO 10469
11012: POP
11013: POP
// end ;
11014: PPOPN 3
11016: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11017: LD_INT 3
11019: PUSH
11020: LD_INT 22
11022: PUSH
11023: LD_INT 1
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 32
11036: PUSH
11037: LD_INT 1
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PPUSH
11048: CALL_OW 69
11052: IFFALSE 11136
11054: GO 11056
11056: DISABLE
11057: LD_INT 0
11059: PPUSH
// begin enable ;
11060: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11061: LD_ADDR_VAR 0 1
11065: PUSH
11066: LD_INT 3
11068: PUSH
11069: LD_INT 22
11071: PUSH
11072: LD_INT 1
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 32
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PPUSH
11097: CALL_OW 69
11101: PUSH
11102: FOR_IN
11103: IFFALSE 11134
// if GetFuel ( i ) < 3 then
11105: LD_VAR 0 1
11109: PPUSH
11110: CALL_OW 261
11114: PUSH
11115: LD_INT 3
11117: LESS
11118: IFFALSE 11132
// SetFuel ( i , 3 ) ;
11120: LD_VAR 0 1
11124: PPUSH
11125: LD_INT 3
11127: PPUSH
11128: CALL_OW 240
11132: GO 11102
11134: POP
11135: POP
// end ;
11136: PPOPN 1
11138: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11139: LD_INT 29
11141: PPUSH
11142: CALL_OW 302
11146: PUSH
11147: LD_INT 29
11149: PPUSH
11150: CALL_OW 461
11154: PUSH
11155: LD_INT 2
11157: EQUAL
11158: AND
11159: IFFALSE 11392
11161: GO 11163
11163: DISABLE
11164: LD_INT 0
11166: PPUSH
11167: PPUSH
// begin enable ;
11168: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11169: LD_ADDR_VAR 0 1
11173: PUSH
11174: LD_INT 21
11176: PUSH
11177: LD_INT 22
11179: PUSH
11180: LD_INT 23
11182: PUSH
11183: LD_INT 24
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 1
11194: PPUSH
11195: LD_INT 4
11197: PPUSH
11198: CALL_OW 12
11202: ARRAY
11203: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11204: LD_ADDR_VAR 0 2
11208: PUSH
11209: LD_INT 42
11211: PUSH
11212: LD_INT 44
11214: PUSH
11215: LD_INT 43
11217: PUSH
11218: LD_INT 46
11220: PUSH
11221: LD_INT 45
11223: PUSH
11224: LD_INT 46
11226: PUSH
11227: LD_INT 45
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: LD_OWVAR 67
11243: PUSH
11244: LD_INT 0
11246: PPUSH
11247: LD_INT 3
11249: PPUSH
11250: CALL_OW 12
11254: PLUS
11255: ARRAY
11256: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11257: LD_VAR 0 1
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 22
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: IN
11272: PUSH
11273: LD_VAR 0 2
11277: PUSH
11278: LD_INT 46
11280: EQUAL
11281: AND
11282: IFFALSE 11311
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11284: LD_ADDR_VAR 0 2
11288: PUSH
11289: LD_INT 44
11291: PUSH
11292: LD_INT 45
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 1
11301: PPUSH
11302: LD_INT 2
11304: PPUSH
11305: CALL_OW 12
11309: ARRAY
11310: ST_TO_ADDR
// if tick < [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11311: LD_OWVAR 1
11315: PUSH
11316: LD_INT 25200
11318: PUSH
11319: LD_INT 23100
11321: PUSH
11322: LD_INT 21000
11324: PUSH
11325: LD_INT 18900
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: LD_OWVAR 67
11338: ARRAY
11339: LESS
11340: IFFALSE 11369
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11342: LD_ADDR_VAR 0 2
11346: PUSH
11347: LD_INT 44
11349: PUSH
11350: LD_INT 43
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 1
11359: PPUSH
11360: LD_INT 2
11362: PPUSH
11363: CALL_OW 12
11367: ARRAY
11368: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11369: LD_INT 29
11371: PPUSH
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: LD_INT 1
11382: PPUSH
11383: LD_VAR 0 2
11387: PPUSH
11388: CALL_OW 185
// end ;
11392: PPOPN 2
11394: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11395: LD_INT 28
11397: PPUSH
11398: CALL_OW 302
11402: IFFALSE 12994
11404: GO 11406
11406: DISABLE
11407: LD_INT 0
11409: PPUSH
11410: PPUSH
11411: PPUSH
11412: PPUSH
11413: PPUSH
11414: PPUSH
11415: PPUSH
11416: PPUSH
11417: PPUSH
11418: PPUSH
11419: PPUSH
11420: PPUSH
11421: PPUSH
// begin enable ;
11422: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11423: LD_ADDR_VAR 0 4
11427: PUSH
11428: LD_INT 12
11430: PPUSH
11431: LD_INT 3
11433: PUSH
11434: LD_INT 24
11436: PUSH
11437: LD_INT 1000
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 21
11450: PUSH
11451: LD_INT 3
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PPUSH
11462: CALL_OW 70
11466: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11467: LD_ADDR_VAR 0 5
11471: PUSH
11472: LD_INT 22
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 25
11484: PUSH
11485: LD_INT 2
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PPUSH
11496: CALL_OW 69
11500: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11501: LD_ADDR_VAR 0 6
11505: PUSH
11506: LD_INT 22
11508: PUSH
11509: LD_INT 3
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 34
11518: PUSH
11519: LD_INT 52
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 69
11534: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11535: LD_ADDR_VAR 0 8
11539: PUSH
11540: LD_INT 22
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 4
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PPUSH
11564: CALL_OW 69
11568: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11569: LD_ADDR_VAR 0 9
11573: PUSH
11574: LD_INT 81
11576: PPUSH
11577: LD_INT 93
11579: PPUSH
11580: CALL_OW 428
11584: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11585: LD_ADDR_VAR 0 10
11589: PUSH
11590: LD_INT 22
11592: PUSH
11593: LD_INT 3
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 30
11602: PUSH
11603: LD_INT 32
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 50
11612: PUSH
11613: EMPTY
11614: LIST
11615: PUSH
11616: LD_INT 58
11618: PUSH
11619: EMPTY
11620: LIST
11621: PUSH
11622: LD_INT 3
11624: PUSH
11625: LD_INT 120
11627: PUSH
11628: LD_INT 701
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: PPUSH
11646: CALL_OW 69
11650: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11651: LD_ADDR_VAR 0 12
11655: PUSH
11656: LD_INT 22
11658: PUSH
11659: LD_INT 3
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 30
11668: PUSH
11669: LD_INT 5
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 50
11678: PUSH
11679: EMPTY
11680: LIST
11681: PUSH
11682: LD_INT 3
11684: PUSH
11685: LD_INT 62
11687: PUSH
11688: EMPTY
11689: LIST
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 69
11705: ST_TO_ADDR
// if emptyTowers then
11706: LD_VAR 0 10
11710: IFFALSE 11971
// begin for i in emptyTowers do
11712: LD_ADDR_VAR 0 1
11716: PUSH
11717: LD_VAR 0 10
11721: PUSH
11722: FOR_IN
11723: IFFALSE 11967
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11725: LD_ADDR_VAR 0 11
11729: PUSH
11730: LD_INT 22
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 2
11742: PUSH
11743: LD_INT 54
11745: PUSH
11746: EMPTY
11747: LIST
11748: PUSH
11749: LD_INT 95
11751: PUSH
11752: LD_INT 12
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 50
11776: PUSH
11777: EMPTY
11778: LIST
11779: PUSH
11780: LD_INT 3
11782: PUSH
11783: LD_INT 120
11785: PUSH
11786: LD_INT 701
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 69
11808: ST_TO_ADDR
// if not sol then
11809: LD_VAR 0 11
11813: NOT
11814: IFFALSE 11818
// break ;
11816: GO 11967
// for j in sol do
11818: LD_ADDR_VAR 0 2
11822: PUSH
11823: LD_VAR 0 11
11827: PUSH
11828: FOR_IN
11829: IFFALSE 11880
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11831: LD_VAR 0 2
11835: PPUSH
11836: CALL_OW 310
11840: PUSH
11841: LD_VAR 0 2
11845: PPUSH
11846: CALL_OW 310
11850: PPUSH
11851: CALL_OW 266
11855: PUSH
11856: LD_INT 32
11858: EQUAL
11859: AND
11860: IFFALSE 11878
// sol := sol diff j ;
11862: LD_ADDR_VAR 0 11
11866: PUSH
11867: LD_VAR 0 11
11871: PUSH
11872: LD_VAR 0 2
11876: DIFF
11877: ST_TO_ADDR
11878: GO 11828
11880: POP
11881: POP
// if not sol then
11882: LD_VAR 0 11
11886: NOT
11887: IFFALSE 11891
// break ;
11889: GO 11967
// if IsInUnit ( sol [ 1 ] ) then
11891: LD_VAR 0 11
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: CALL_OW 310
11904: IFFALSE 11919
// ComExit ( sol [ 1 ] ) ;
11906: LD_VAR 0 11
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PPUSH
11915: CALL 78813 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
11919: LD_VAR 0 11
11923: PUSH
11924: LD_INT 1
11926: ARRAY
11927: PPUSH
11928: LD_INT 701
11930: PPUSH
11931: CALL_OW 109
// SetTag ( i , 701 ) ;
11935: LD_VAR 0 1
11939: PPUSH
11940: LD_INT 701
11942: PPUSH
11943: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
11947: LD_VAR 0 11
11951: PUSH
11952: LD_INT 1
11954: ARRAY
11955: PPUSH
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL_OW 180
// end ;
11965: GO 11722
11967: POP
11968: POP
// end else
11969: GO 12217
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
11971: LD_VAR 0 11
11975: PPUSH
11976: LD_INT 3
11978: PUSH
11979: LD_INT 54
11981: PUSH
11982: EMPTY
11983: LIST
11984: PUSH
11985: LD_INT 95
11987: PUSH
11988: LD_INT 12
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 72
12004: IFFALSE 12217
// begin if barracks then
12006: LD_VAR 0 12
12010: IFFALSE 12078
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12012: LD_ADDR_VAR 0 1
12016: PUSH
12017: LD_VAR 0 11
12021: PPUSH
12022: LD_INT 3
12024: PUSH
12025: LD_INT 54
12027: PUSH
12028: EMPTY
12029: LIST
12030: PUSH
12031: LD_INT 95
12033: PUSH
12034: LD_INT 12
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: PPUSH
12046: CALL_OW 72
12050: PUSH
12051: FOR_IN
12052: IFFALSE 12074
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_VAR 0 12
12063: PUSH
12064: LD_INT 1
12066: ARRAY
12067: PPUSH
12068: CALL_OW 120
12072: GO 12051
12074: POP
12075: POP
// end else
12076: GO 12217
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12078: LD_INT 12
12080: PPUSH
12081: LD_INT 81
12083: PUSH
12084: LD_INT 3
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PPUSH
12091: CALL_OW 70
12095: IFFALSE 12217
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_VAR 0 11
12106: PPUSH
12107: LD_INT 3
12109: PUSH
12110: LD_INT 54
12112: PUSH
12113: EMPTY
12114: LIST
12115: PUSH
12116: LD_INT 95
12118: PUSH
12119: LD_INT 12
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: PPUSH
12131: CALL_OW 72
12135: PUSH
12136: FOR_IN
12137: IFFALSE 12215
// begin SetTag ( i , 702 ) ;
12139: LD_VAR 0 1
12143: PPUSH
12144: LD_INT 702
12146: PPUSH
12147: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12151: LD_ADDR_VAR 0 13
12155: PUSH
12156: LD_INT 12
12158: PPUSH
12159: LD_INT 81
12161: PUSH
12162: LD_INT 3
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PPUSH
12169: CALL_OW 70
12173: PPUSH
12174: LD_VAR 0 1
12178: PPUSH
12179: CALL_OW 74
12183: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12184: LD_VAR 0 1
12188: PPUSH
12189: LD_VAR 0 13
12193: PPUSH
12194: CALL_OW 250
12198: PPUSH
12199: LD_VAR 0 13
12203: PPUSH
12204: CALL_OW 251
12208: PPUSH
12209: CALL_OW 114
// end ;
12213: GO 12136
12215: POP
12216: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12217: LD_ADDR_VAR 0 3
12221: PUSH
12222: LD_INT 22
12224: PUSH
12225: LD_INT 3
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 95
12234: PUSH
12235: LD_INT 11
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 50
12244: PUSH
12245: EMPTY
12246: LIST
12247: PUSH
12248: LD_INT 25
12250: PUSH
12251: LD_INT 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 120
12260: PUSH
12261: LD_INT 702
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 69
12279: ST_TO_ADDR
// if tmp then
12280: LD_VAR 0 3
12284: IFFALSE 12330
// for i in tmp do
12286: LD_ADDR_VAR 0 1
12290: PUSH
12291: LD_VAR 0 3
12295: PUSH
12296: FOR_IN
12297: IFFALSE 12328
// begin ComMoveXY ( i , 90 , 94 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 90
12306: PPUSH
12307: LD_INT 94
12309: PPUSH
12310: CALL_OW 111
// SetTag ( i , 0 ) ;
12314: LD_VAR 0 1
12318: PPUSH
12319: LD_INT 0
12321: PPUSH
12322: CALL_OW 109
// end ;
12326: GO 12296
12328: POP
12329: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12330: LD_VAR 0 8
12334: PUSH
12335: LD_VAR 0 5
12339: PPUSH
12340: LD_INT 120
12342: PUSH
12343: LD_INT 2
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 72
12354: AND
12355: IFFALSE 12368
// ComExitAll ( sci ) else
12357: LD_VAR 0 8
12361: PPUSH
12362: CALL 78896 0 1
12366: GO 12441
// if sci then
12368: LD_VAR 0 8
12372: IFFALSE 12441
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12374: LD_VAR 0 8
12378: PPUSH
12379: LD_INT 3
12381: PUSH
12382: LD_INT 54
12384: PUSH
12385: EMPTY
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 72
12396: PUSH
12397: LD_VAR 0 9
12401: PPUSH
12402: CALL_OW 302
12406: AND
12407: IFFALSE 12441
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12409: LD_VAR 0 8
12413: PPUSH
12414: LD_INT 3
12416: PUSH
12417: LD_INT 54
12419: PUSH
12420: EMPTY
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 72
12431: PPUSH
12432: LD_VAR 0 9
12436: PPUSH
12437: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12441: LD_VAR 0 6
12445: PPUSH
12446: LD_INT 50
12448: PUSH
12449: EMPTY
12450: LIST
12451: PPUSH
12452: CALL_OW 72
12456: PUSH
12457: LD_VAR 0 4
12461: AND
12462: IFFALSE 12493
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12464: LD_VAR 0 6
12468: PPUSH
12469: LD_INT 50
12471: PUSH
12472: EMPTY
12473: LIST
12474: PPUSH
12475: CALL_OW 72
12479: PPUSH
12480: LD_VAR 0 4
12484: PUSH
12485: LD_INT 1
12487: ARRAY
12488: PPUSH
12489: CALL_OW 130
// if eng then
12493: LD_VAR 0 5
12497: IFFALSE 12994
// begin for i in eng do
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: LD_VAR 0 5
12508: PUSH
12509: FOR_IN
12510: IFFALSE 12992
// begin tag := GetTag ( i ) ;
12512: LD_ADDR_VAR 0 7
12516: PUSH
12517: LD_VAR 0 1
12521: PPUSH
12522: CALL_OW 110
12526: ST_TO_ADDR
// case tag of 0 :
12527: LD_VAR 0 7
12531: PUSH
12532: LD_INT 0
12534: DOUBLE
12535: EQUAL
12536: IFTRUE 12540
12538: GO 12751
12540: POP
// begin if b then
12541: LD_VAR 0 4
12545: IFFALSE 12561
// begin SetTag ( i , 1 ) ;
12547: LD_VAR 0 1
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 109
// continue ;
12559: GO 12509
// end ; if not ruBuildList then
12561: LD_EXP 35
12565: NOT
12566: IFFALSE 12582
// ComEnterUnit ( i , ruDep ) else
12568: LD_VAR 0 1
12572: PPUSH
12573: LD_INT 28
12575: PPUSH
12576: CALL_OW 120
12580: GO 12749
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12582: LD_INT 11
12584: PPUSH
12585: LD_INT 81
12587: PUSH
12588: LD_INT 3
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PPUSH
12595: CALL_OW 70
12599: PUSH
12600: LD_INT 0
12602: EQUAL
12603: PUSH
12604: LD_INT 28
12606: PPUSH
12607: LD_EXP 35
12611: PUSH
12612: LD_INT 1
12614: ARRAY
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PPUSH
12620: LD_EXP 35
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PUSH
12629: LD_INT 2
12631: ARRAY
12632: PPUSH
12633: LD_EXP 35
12637: PUSH
12638: LD_INT 1
12640: ARRAY
12641: PUSH
12642: LD_INT 3
12644: ARRAY
12645: PPUSH
12646: LD_EXP 35
12650: PUSH
12651: LD_INT 1
12653: ARRAY
12654: PUSH
12655: LD_INT 4
12657: ARRAY
12658: PPUSH
12659: CALL 54149 0 5
12663: AND
12664: IFFALSE 12749
// begin if IsInUnit ( i ) then
12666: LD_VAR 0 1
12670: PPUSH
12671: CALL_OW 310
12675: IFFALSE 12688
// ComExitBuilding ( i ) else
12677: LD_VAR 0 1
12681: PPUSH
12682: CALL_OW 122
12686: GO 12749
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12688: LD_VAR 0 1
12692: PPUSH
12693: LD_EXP 35
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PUSH
12702: LD_INT 1
12704: ARRAY
12705: PPUSH
12706: LD_EXP 35
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PUSH
12715: LD_INT 2
12717: ARRAY
12718: PPUSH
12719: LD_EXP 35
12723: PUSH
12724: LD_INT 1
12726: ARRAY
12727: PUSH
12728: LD_INT 3
12730: ARRAY
12731: PPUSH
12732: LD_EXP 35
12736: PUSH
12737: LD_INT 1
12739: ARRAY
12740: PUSH
12741: LD_INT 4
12743: ARRAY
12744: PPUSH
12745: CALL_OW 145
// end ; end ; 1 :
12749: GO 12948
12751: LD_INT 1
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12862
12759: POP
// begin if not b then
12760: LD_VAR 0 4
12764: NOT
12765: IFFALSE 12781
// begin SetTag ( i , 0 ) ;
12767: LD_VAR 0 1
12771: PPUSH
12772: LD_INT 0
12774: PPUSH
12775: CALL_OW 109
// continue ;
12779: GO 12509
// end ; if IsInUnit ( i ) then
12781: LD_VAR 0 1
12785: PPUSH
12786: CALL_OW 310
12790: IFFALSE 12801
// ComExitBuilding ( i ) ;
12792: LD_VAR 0 1
12796: PPUSH
12797: CALL_OW 122
// if GetLives ( i ) < 650 then
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 256
12810: PUSH
12811: LD_INT 650
12813: LESS
12814: IFFALSE 12830
// begin SetTag ( i , 2 ) ;
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_INT 2
12823: PPUSH
12824: CALL_OW 109
// continue ;
12828: GO 12509
// end ; if b then
12830: LD_VAR 0 4
12834: IFFALSE 12860
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12836: LD_VAR 0 1
12840: PPUSH
12841: LD_VAR 0 4
12845: PPUSH
12846: LD_VAR 0 1
12850: PPUSH
12851: CALL_OW 74
12855: PPUSH
12856: CALL_OW 130
// end ; 2 :
12860: GO 12948
12862: LD_INT 2
12864: DOUBLE
12865: EQUAL
12866: IFTRUE 12870
12868: GO 12947
12870: POP
// begin if GetLives ( i ) = 1000 then
12871: LD_VAR 0 1
12875: PPUSH
12876: CALL_OW 256
12880: PUSH
12881: LD_INT 1000
12883: EQUAL
12884: IFFALSE 12900
// begin SetTag ( i , 1 ) ;
12886: LD_VAR 0 1
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 109
// continue ;
12898: GO 12509
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
12900: LD_VAR 0 1
12904: PPUSH
12905: LD_INT 84
12907: PPUSH
12908: LD_INT 93
12910: PPUSH
12911: CALL_OW 297
12915: PUSH
12916: LD_INT 6
12918: GREATER
12919: IFFALSE 12945
// begin ComMoveXY ( i , 84 , 93 ) ;
12921: LD_VAR 0 1
12925: PPUSH
12926: LD_INT 84
12928: PPUSH
12929: LD_INT 93
12931: PPUSH
12932: CALL_OW 111
// AddComHold ( i ) ;
12936: LD_VAR 0 1
12940: PPUSH
12941: CALL_OW 200
// end ; end ; end ;
12945: GO 12948
12947: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
12948: LD_VAR 0 1
12952: PPUSH
12953: LD_INT 12
12955: PPUSH
12956: CALL_OW 308
12960: NOT
12961: PUSH
12962: LD_VAR 0 1
12966: PPUSH
12967: CALL_OW 310
12971: NOT
12972: AND
12973: IFFALSE 12990
// ComMoveXY ( i , 91 , 95 ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: LD_INT 91
12982: PPUSH
12983: LD_INT 95
12985: PPUSH
12986: CALL_OW 111
// end ;
12990: GO 12509
12992: POP
12993: POP
// end ; end ;
12994: PPOPN 13
12996: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12997: LD_INT 0
12999: PPUSH
13000: PPUSH
13001: PPUSH
13002: PPUSH
13003: PPUSH
13004: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
13005: LD_ADDR_VAR 0 3
13009: PUSH
13010: DOUBLE
13011: LD_INT 1
13013: DEC
13014: ST_TO_ADDR
13015: LD_INT 3
13017: PUSH
13018: LD_INT 4
13020: PUSH
13021: LD_INT 5
13023: PUSH
13024: LD_INT 6
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: PUSH
13033: LD_OWVAR 67
13037: ARRAY
13038: PUSH
13039: LD_VAR 0 1
13043: PLUS
13044: PUSH
13045: FOR_TO
13046: IFFALSE 13363
// begin uc_side := 6 ;
13048: LD_ADDR_OWVAR 20
13052: PUSH
13053: LD_INT 6
13055: ST_TO_ADDR
// uc_nation := 3 ;
13056: LD_ADDR_OWVAR 21
13060: PUSH
13061: LD_INT 3
13063: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13064: LD_ADDR_VAR 0 6
13068: PUSH
13069: LD_INT 21
13071: PUSH
13072: LD_INT 22
13074: PUSH
13075: LD_INT 23
13077: PUSH
13078: LD_INT 24
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 1
13089: PPUSH
13090: LD_INT 4
13092: PPUSH
13093: CALL_OW 12
13097: ARRAY
13098: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13099: LD_ADDR_VAR 0 7
13103: PUSH
13104: LD_INT 42
13106: PUSH
13107: LD_INT 44
13109: PUSH
13110: LD_INT 43
13112: PUSH
13113: LD_INT 46
13115: PUSH
13116: LD_INT 45
13118: PUSH
13119: LD_INT 46
13121: PUSH
13122: LD_INT 45
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_OWVAR 67
13138: PUSH
13139: LD_INT 0
13141: PPUSH
13142: LD_INT 3
13144: PPUSH
13145: CALL_OW 12
13149: PLUS
13150: ARRAY
13151: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13152: LD_VAR 0 6
13156: PUSH
13157: LD_INT 21
13159: PUSH
13160: LD_INT 22
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: IN
13167: PUSH
13168: LD_VAR 0 7
13172: PUSH
13173: LD_INT 46
13175: EQUAL
13176: AND
13177: IFFALSE 13206
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13179: LD_ADDR_VAR 0 7
13183: PUSH
13184: LD_INT 44
13186: PUSH
13187: LD_INT 45
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 2
13199: PPUSH
13200: CALL_OW 12
13204: ARRAY
13205: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13206: LD_OWVAR 1
13210: PUSH
13211: LD_INT 31500
13213: PUSH
13214: LD_INT 27300
13216: PUSH
13217: LD_INT 23100
13219: PUSH
13220: LD_INT 18900
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: PUSH
13229: LD_OWVAR 67
13233: ARRAY
13234: LESS
13235: IFFALSE 13268
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13237: LD_ADDR_VAR 0 7
13241: PUSH
13242: LD_INT 44
13244: PUSH
13245: LD_INT 43
13247: PUSH
13248: LD_INT 42
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 1
13258: PPUSH
13259: LD_INT 3
13261: PPUSH
13262: CALL_OW 12
13266: ARRAY
13267: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13268: LD_VAR 0 6
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: LD_INT 3
13278: PPUSH
13279: LD_VAR 0 7
13283: PPUSH
13284: LD_INT 90
13286: PPUSH
13287: CALL 45553 0 5
// un := CreateVehicle ;
13291: LD_ADDR_VAR 0 4
13295: PUSH
13296: CALL_OW 45
13300: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13301: LD_VAR 0 4
13305: PPUSH
13306: LD_INT 140
13308: PPUSH
13309: LD_INT 146
13311: PPUSH
13312: LD_INT 0
13314: PPUSH
13315: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13319: LD_VAR 0 4
13323: PPUSH
13324: LD_INT 131
13326: PPUSH
13327: LD_INT 128
13329: PPUSH
13330: CALL_OW 111
// wait ( 0 0$3 ) ;
13334: LD_INT 105
13336: PPUSH
13337: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13341: LD_ADDR_VAR 0 5
13345: PUSH
13346: LD_VAR 0 5
13350: PPUSH
13351: LD_VAR 0 4
13355: PPUSH
13356: CALL 78415 0 2
13360: ST_TO_ADDR
// end ;
13361: GO 13045
13363: POP
13364: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13365: LD_ADDR_EXP 36
13369: PUSH
13370: LD_EXP 36
13374: PPUSH
13375: LD_VAR 0 5
13379: PPUSH
13380: CALL 78452 0 2
13384: ST_TO_ADDR
// end ;
13385: LD_VAR 0 2
13389: RET
// every 0 0$3 trigger russianAttackers do
13390: LD_EXP 36
13394: IFFALSE 13477
13396: GO 13398
13398: DISABLE
// begin enable ;
13399: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13400: LD_EXP 36
13404: PPUSH
13405: LD_INT 126
13407: PUSH
13408: LD_INT 108
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 107
13417: PUSH
13418: LD_INT 85
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 82
13427: PUSH
13428: LD_INT 62
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 73
13437: PUSH
13438: LD_INT 46
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 62
13447: PUSH
13448: LD_INT 31
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 52
13457: PUSH
13458: LD_INT 17
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: PPUSH
13473: CALL 81019 0 2
// end ; end_of_file
13477: END
// on SailEvent ( event ) do begin if event = 1 then
13478: LD_VAR 0 1
13482: PUSH
13483: LD_INT 1
13485: EQUAL
13486: IFFALSE 13501
// PrepareRussianAttack ( Difficulty + 3 ) ;
13488: LD_OWVAR 67
13492: PUSH
13493: LD_INT 3
13495: PLUS
13496: PPUSH
13497: CALL 12997 0 1
// end ;
13501: PPOPN 1
13503: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13504: LD_VAR 0 1
13508: PUSH
13509: LD_EXP 28
13513: EQUAL
13514: PUSH
13515: LD_VAR 0 2
13519: PUSH
13520: LD_INT 1
13522: EQUAL
13523: AND
13524: IFFALSE 13530
// SikorskiKilledInAction ;
13526: CALL 18647 0 0
// end ;
13530: PPOPN 3
13532: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13533: LD_INT 0
13535: PPUSH
13536: PPUSH
13537: PPUSH
13538: PPUSH
13539: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13540: LD_VAR 0 1
13544: PPUSH
13545: CALL 35985 0 1
// if un = JMM then
13549: LD_VAR 0 1
13553: PUSH
13554: LD_EXP 14
13558: EQUAL
13559: IFFALSE 13568
// YouLost ( JMM ) ;
13561: LD_STRING JMM
13563: PPUSH
13564: CALL_OW 104
// if un = Sikorski then
13568: LD_VAR 0 1
13572: PUSH
13573: LD_EXP 28
13577: EQUAL
13578: IFFALSE 13604
// if sikorskiStatus = 0 then
13580: LD_EXP 9
13584: PUSH
13585: LD_INT 0
13587: EQUAL
13588: IFFALSE 13596
// SikorskiKilledInAction else
13590: CALL 18647 0 0
13594: GO 13604
// sikorskiIsKilled := true ;
13596: LD_ADDR_EXP 10
13600: PUSH
13601: LD_INT 1
13603: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 255
13613: PUSH
13614: LD_INT 1
13616: EQUAL
13617: PUSH
13618: LD_VAR 0 1
13622: PPUSH
13623: CALL_OW 248
13627: PUSH
13628: LD_INT 1
13630: EQUAL
13631: AND
13632: PUSH
13633: LD_VAR 0 1
13637: PPUSH
13638: CALL_OW 266
13642: PUSH
13643: LD_INT 0
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: IN
13653: AND
13654: IFFALSE 13663
// YouLost ( Destroyed ) ;
13656: LD_STRING Destroyed
13658: PPUSH
13659: CALL_OW 104
// if un = ruDep then
13663: LD_VAR 0 1
13667: PUSH
13668: LD_INT 28
13670: EQUAL
13671: IFFALSE 13805
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13673: LD_ADDR_VAR 0 2
13677: PUSH
13678: LD_INT 22
13680: PUSH
13681: LD_INT 3
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 25
13690: PUSH
13691: LD_INT 1
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 69
13706: PUSH
13707: FOR_IN
13708: IFFALSE 13803
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13710: LD_ADDR_VAR 0 3
13714: PUSH
13715: LD_INT 11
13717: PPUSH
13718: LD_INT 81
13720: PUSH
13721: LD_INT 3
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PPUSH
13728: CALL_OW 70
13732: PPUSH
13733: LD_VAR 0 2
13737: PPUSH
13738: CALL_OW 74
13742: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13743: LD_VAR 0 2
13747: PPUSH
13748: CALL_OW 310
13752: PPUSH
13753: CALL_OW 266
13757: PUSH
13758: LD_INT 32
13760: EQUAL
13761: IFFALSE 13801
// begin ComExitBuilding ( i ) ;
13763: LD_VAR 0 2
13767: PPUSH
13768: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13772: LD_VAR 0 2
13776: PPUSH
13777: LD_VAR 0 3
13781: PPUSH
13782: CALL_OW 250
13786: PPUSH
13787: LD_VAR 0 3
13791: PPUSH
13792: CALL_OW 251
13796: PPUSH
13797: CALL_OW 174
// end ; end ;
13801: GO 13707
13803: POP
13804: POP
// end ; if un in ruMobile then
13805: LD_VAR 0 1
13809: PUSH
13810: LD_EXP 34
13814: IN
13815: IFFALSE 13833
// ruMobile := ruMobile diff un ;
13817: LD_ADDR_EXP 34
13821: PUSH
13822: LD_EXP 34
13826: PUSH
13827: LD_VAR 0 1
13831: DIFF
13832: ST_TO_ADDR
// if GetSide ( un ) = 3 then
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 255
13842: PUSH
13843: LD_INT 3
13845: EQUAL
13846: IFFALSE 14481
// begin if GetType ( un ) = unit_building then
13848: LD_VAR 0 1
13852: PPUSH
13853: CALL_OW 247
13857: PUSH
13858: LD_INT 3
13860: EQUAL
13861: IFFALSE 13997
// begin btype := GetBType ( un ) ;
13863: LD_ADDR_VAR 0 6
13867: PUSH
13868: LD_VAR 0 1
13872: PPUSH
13873: CALL_OW 266
13877: ST_TO_ADDR
// if btype = b_warehouse then
13878: LD_VAR 0 6
13882: PUSH
13883: LD_INT 1
13885: EQUAL
13886: IFFALSE 13896
// btype := b_depot ;
13888: LD_ADDR_VAR 0 6
13892: PUSH
13893: LD_INT 0
13895: ST_TO_ADDR
// if btype = b_barracks then
13896: LD_VAR 0 6
13900: PUSH
13901: LD_INT 5
13903: EQUAL
13904: IFFALSE 13914
// btype := b_armoury ;
13906: LD_ADDR_VAR 0 6
13910: PUSH
13911: LD_INT 4
13913: ST_TO_ADDR
// if btype = b_lab_full then
13914: LD_VAR 0 6
13918: PUSH
13919: LD_INT 8
13921: EQUAL
13922: IFFALSE 13932
// btype := b_lab ;
13924: LD_ADDR_VAR 0 6
13928: PUSH
13929: LD_INT 6
13931: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
13932: LD_ADDR_EXP 35
13936: PUSH
13937: LD_EXP 35
13941: PPUSH
13942: LD_EXP 35
13946: PUSH
13947: LD_INT 1
13949: PLUS
13950: PPUSH
13951: LD_VAR 0 6
13955: PUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 250
13965: PUSH
13966: LD_VAR 0 1
13970: PPUSH
13971: CALL_OW 251
13975: PUSH
13976: LD_VAR 0 1
13980: PPUSH
13981: CALL_OW 254
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: PPUSH
13992: CALL_OW 1
13996: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 247
14006: PUSH
14007: LD_INT 2
14009: EQUAL
14010: IFFALSE 14285
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14012: LD_VAR 0 1
14016: PPUSH
14017: CALL_OW 264
14021: PUSH
14022: LD_INT 52
14024: PUSH
14025: LD_INT 51
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: IN
14032: IFFALSE 14062
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14034: LD_INT 29
14036: PPUSH
14037: LD_INT 22
14039: PPUSH
14040: LD_INT 1
14042: PPUSH
14043: LD_INT 3
14045: PPUSH
14046: LD_VAR 0 1
14050: PPUSH
14051: CALL_OW 264
14055: PPUSH
14056: CALL_OW 185
// end else
14060: GO 14285
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14062: LD_ADDR_VAR 0 4
14066: PUSH
14067: LD_INT 21
14069: PUSH
14070: LD_INT 22
14072: PUSH
14073: LD_INT 23
14075: PUSH
14076: LD_INT 24
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 1
14087: PPUSH
14088: LD_INT 4
14090: PPUSH
14091: CALL_OW 12
14095: ARRAY
14096: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14097: LD_ADDR_VAR 0 5
14101: PUSH
14102: LD_INT 42
14104: PUSH
14105: LD_INT 44
14107: PUSH
14108: LD_INT 43
14110: PUSH
14111: LD_INT 46
14113: PUSH
14114: LD_INT 45
14116: PUSH
14117: LD_INT 46
14119: PUSH
14120: LD_INT 45
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: PUSH
14132: LD_OWVAR 67
14136: PUSH
14137: LD_INT 0
14139: PPUSH
14140: LD_INT 3
14142: PPUSH
14143: CALL_OW 12
14147: PLUS
14148: ARRAY
14149: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14150: LD_VAR 0 4
14154: PUSH
14155: LD_INT 21
14157: PUSH
14158: LD_INT 22
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: IN
14165: PUSH
14166: LD_VAR 0 5
14170: PUSH
14171: LD_INT 46
14173: EQUAL
14174: AND
14175: IFFALSE 14204
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
14177: LD_ADDR_VAR 0 5
14181: PUSH
14182: LD_INT 44
14184: PUSH
14185: LD_INT 45
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 1
14194: PPUSH
14195: LD_INT 2
14197: PPUSH
14198: CALL_OW 12
14202: ARRAY
14203: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14204: LD_OWVAR 1
14208: PUSH
14209: LD_INT 31500
14211: PUSH
14212: LD_INT 27300
14214: PUSH
14215: LD_INT 23100
14217: PUSH
14218: LD_INT 21000
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: PUSH
14227: LD_OWVAR 67
14231: ARRAY
14232: LESS
14233: IFFALSE 14262
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14235: LD_ADDR_VAR 0 5
14239: PUSH
14240: LD_INT 44
14242: PUSH
14243: LD_INT 43
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 1
14252: PPUSH
14253: LD_INT 2
14255: PPUSH
14256: CALL_OW 12
14260: ARRAY
14261: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14262: LD_INT 29
14264: PPUSH
14265: LD_VAR 0 4
14269: PPUSH
14270: LD_INT 1
14272: PPUSH
14273: LD_INT 1
14275: PPUSH
14276: LD_VAR 0 5
14280: PPUSH
14281: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL_OW 257
14294: PUSH
14295: LD_INT 3
14297: EQUAL
14298: IFFALSE 14481
// begin killMechCounter := Inc ( killMechCounter ) ;
14300: LD_ADDR_EXP 12
14304: PUSH
14305: LD_EXP 12
14309: PPUSH
14310: CALL 79776 0 1
14314: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14315: LD_EXP 33
14319: PUSH
14320: LD_INT 0
14322: EQUAL
14323: PUSH
14324: LD_INT 29
14326: PPUSH
14327: CALL_OW 302
14331: NOT
14332: OR
14333: IFFALSE 14337
// exit ;
14335: GO 14481
// ruMechCounter := Dec ( ruMechCounter ) ;
14337: LD_ADDR_EXP 33
14341: PUSH
14342: LD_EXP 33
14346: PPUSH
14347: CALL 79798 0 1
14351: ST_TO_ADDR
// uc_side := 3 ;
14352: LD_ADDR_OWVAR 20
14356: PUSH
14357: LD_INT 3
14359: ST_TO_ADDR
// uc_nation := 3 ;
14360: LD_ADDR_OWVAR 21
14364: PUSH
14365: LD_INT 3
14367: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14368: LD_INT 0
14370: PPUSH
14371: LD_INT 5
14373: PUSH
14374: LD_INT 6
14376: PUSH
14377: LD_INT 7
14379: PUSH
14380: LD_INT 8
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: PUSH
14389: LD_OWVAR 67
14393: ARRAY
14394: PPUSH
14395: CALL_OW 383
// tmp := CreateHuman ;
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: CALL_OW 44
14408: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14409: LD_VAR 0 3
14413: PPUSH
14414: LD_INT 145
14416: PPUSH
14417: LD_INT 133
14419: PPUSH
14420: LD_INT 0
14422: PPUSH
14423: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14427: LD_VAR 0 3
14431: PPUSH
14432: LD_INT 29
14434: PPUSH
14435: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14439: LD_INT 35
14441: PPUSH
14442: CALL_OW 67
// if not HasTask ( tmp ) then
14446: LD_VAR 0 3
14450: PPUSH
14451: CALL_OW 314
14455: NOT
14456: IFFALSE 14470
// ComEnterUnit ( tmp , ruFac ) ;
14458: LD_VAR 0 3
14462: PPUSH
14463: LD_INT 29
14465: PPUSH
14466: CALL_OW 120
// until IsInUnit ( tmp ) ;
14470: LD_VAR 0 3
14474: PPUSH
14475: CALL_OW 310
14479: IFFALSE 14439
// end ; end ; end ;
14481: PPOPN 6
14483: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 255
14493: PUSH
14494: LD_INT 4
14496: EQUAL
14497: IFFALSE 14514
// ComMoveXY ( driver , 40 , 47 ) ;
14499: LD_VAR 0 1
14503: PPUSH
14504: LD_INT 40
14506: PPUSH
14507: LD_INT 47
14509: PPUSH
14510: CALL_OW 111
// if GetSide ( driver ) = 3 then
14514: LD_VAR 0 1
14518: PPUSH
14519: CALL_OW 255
14523: PUSH
14524: LD_INT 3
14526: EQUAL
14527: IFFALSE 14741
// begin ComMoveXY ( driver , 90 , 97 ) ;
14529: LD_VAR 0 1
14533: PPUSH
14534: LD_INT 90
14536: PPUSH
14537: LD_INT 97
14539: PPUSH
14540: CALL_OW 111
// if IsOk ( ruFac ) then
14544: LD_INT 29
14546: PPUSH
14547: CALL_OW 302
14551: IFFALSE 14665
// begin repeat wait ( 0 0$1 ) ;
14553: LD_INT 35
14555: PPUSH
14556: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14560: LD_INT 29
14562: PPUSH
14563: CALL_OW 313
14567: PUSH
14568: LD_INT 6
14570: LESS
14571: PUSH
14572: LD_VAR 0 1
14576: PPUSH
14577: CALL_OW 301
14581: OR
14582: IFFALSE 14553
// if IsDead ( driver ) then
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 301
14593: IFFALSE 14597
// exit ;
14595: GO 14741
// repeat wait ( 0 0$10 ) ;
14597: LD_INT 350
14599: PPUSH
14600: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 314
14613: NOT
14614: PUSH
14615: LD_INT 29
14617: PPUSH
14618: CALL_OW 313
14622: PUSH
14623: LD_INT 6
14625: LESS
14626: AND
14627: IFFALSE 14641
// ComEnterUnit ( driver , ruFac ) ;
14629: LD_VAR 0 1
14633: PPUSH
14634: LD_INT 29
14636: PPUSH
14637: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14641: LD_VAR 0 1
14645: PPUSH
14646: CALL_OW 301
14650: PUSH
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 310
14660: OR
14661: IFFALSE 14597
// end else
14663: GO 14741
// begin ComMoveXY ( driver , 142 , 148 ) ;
14665: LD_VAR 0 1
14669: PPUSH
14670: LD_INT 142
14672: PPUSH
14673: LD_INT 148
14675: PPUSH
14676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14680: LD_INT 35
14682: PPUSH
14683: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 301
14696: PUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: LD_INT 142
14704: PPUSH
14705: LD_INT 148
14707: PPUSH
14708: CALL_OW 307
14712: OR
14713: IFFALSE 14680
// if IsAt ( driver , 142 , 148 ) then
14715: LD_VAR 0 1
14719: PPUSH
14720: LD_INT 142
14722: PPUSH
14723: LD_INT 148
14725: PPUSH
14726: CALL_OW 307
14730: IFFALSE 14741
// RemoveUnit ( driver ) ;
14732: LD_VAR 0 1
14736: PPUSH
14737: CALL_OW 64
// end ; end ; end ;
14741: PPOPN 4
14743: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14744: LD_VAR 0 2
14748: PPUSH
14749: CALL_OW 257
14753: PUSH
14754: LD_INT 3
14756: EQUAL
14757: PUSH
14758: LD_VAR 0 1
14762: PPUSH
14763: CALL_OW 255
14767: PUSH
14768: LD_INT 3
14770: EQUAL
14771: AND
14772: PUSH
14773: LD_VAR 0 1
14777: PUSH
14778: LD_INT 29
14780: EQUAL
14781: AND
14782: IFFALSE 14796
// SetLives ( un , 1000 ) ;
14784: LD_VAR 0 2
14788: PPUSH
14789: LD_INT 1000
14791: PPUSH
14792: CALL_OW 234
// if GetTag ( b ) = 701 then
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 110
14805: PUSH
14806: LD_INT 701
14808: EQUAL
14809: IFFALSE 14835
// begin SetTag ( b , 0 ) ;
14811: LD_VAR 0 1
14815: PPUSH
14816: LD_INT 0
14818: PPUSH
14819: CALL_OW 109
// SetTag ( un , 0 ) ;
14823: LD_VAR 0 2
14827: PPUSH
14828: LD_INT 0
14830: PPUSH
14831: CALL_OW 109
// end ; end ;
14835: PPOPN 2
14837: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 255
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: LD_INT 6
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: IN
14858: PUSH
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 263
14868: PUSH
14869: LD_INT 3
14871: EQUAL
14872: AND
14873: PUSH
14874: LD_EXP 7
14878: NOT
14879: AND
14880: IFFALSE 14899
// begin seenComputer := true ;
14882: LD_ADDR_EXP 7
14886: PUSH
14887: LD_INT 1
14889: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14890: LD_VAR 0 1
14894: PPUSH
14895: CALL 17838 0 1
// end ; end ;
14899: PPOPN 1
14901: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
14902: LD_INT 0
14904: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL 36105 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
14919: LD_VAR 0 1
14923: PPUSH
14924: CALL_OW 255
14928: PUSH
14929: LD_INT 3
14931: EQUAL
14932: PUSH
14933: LD_VAR 0 1
14937: PPUSH
14938: CALL_OW 263
14942: PUSH
14943: LD_INT 1
14945: EQUAL
14946: AND
14947: PUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 264
14957: PUSH
14958: LD_INT 42
14960: PUSH
14961: LD_INT 43
14963: PUSH
14964: LD_INT 44
14966: PUSH
14967: LD_INT 46
14969: PUSH
14970: LD_INT 45
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: IN
14980: AND
14981: IFFALSE 15011
// begin SetTag ( vehicle , 300 ) ;
14983: LD_VAR 0 1
14987: PPUSH
14988: LD_INT 300
14990: PPUSH
14991: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
14995: LD_ADDR_EXP 34
14999: PUSH
15000: LD_EXP 34
15004: PUSH
15005: LD_VAR 0 1
15009: UNION
15010: ST_TO_ADDR
// end ; end ;
15011: PPOPN 3
15013: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15014: LD_INT 0
15016: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15017: LD_VAR 0 2
15021: PPUSH
15022: LD_VAR 0 3
15026: PPUSH
15027: LD_INT 13
15029: PPUSH
15030: CALL_OW 309
15034: IFFALSE 15165
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15036: LD_ADDR_VAR 0 6
15040: PUSH
15041: LD_INT 22
15043: PUSH
15044: LD_INT 3
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 50
15053: PUSH
15054: EMPTY
15055: LIST
15056: PUSH
15057: LD_INT 34
15059: PUSH
15060: LD_INT 51
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: ST_TO_ADDR
// if not cargo then
15077: LD_VAR 0 6
15081: NOT
15082: IFFALSE 15086
// exit ;
15084: GO 15165
// wait ( 0 0$5 ) ;
15086: LD_INT 175
15088: PPUSH
15089: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15093: LD_VAR 0 6
15097: PUSH
15098: LD_INT 1
15100: ARRAY
15101: PPUSH
15102: LD_INT 28
15104: PPUSH
15105: CALL_OW 296
15109: PUSH
15110: LD_INT 6
15112: LESS
15113: PUSH
15114: LD_VAR 0 6
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: CALL_OW 261
15127: PUSH
15128: LD_INT 50
15130: LESS
15131: AND
15132: IFFALSE 15146
// ComMoveUnit ( cargo , ruDep ) ;
15134: LD_VAR 0 6
15138: PPUSH
15139: LD_INT 28
15141: PPUSH
15142: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15146: LD_VAR 0 6
15150: PPUSH
15151: LD_VAR 0 2
15155: PPUSH
15156: LD_VAR 0 3
15160: PPUSH
15161: CALL_OW 177
// end ; end ;
15165: PPOPN 6
15167: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15168: LD_VAR 0 1
15172: PPUSH
15173: CALL_OW 264
15177: PUSH
15178: LD_INT 45
15180: EQUAL
15181: IFFALSE 15198
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15183: LD_ADDR_EXP 11
15187: PUSH
15188: LD_EXP 11
15192: PPUSH
15193: CALL 79776 0 1
15197: ST_TO_ADDR
// end ;
15198: PPOPN 4
15200: END
// on BuildingComplete ( b ) do var i , tmp ;
15201: LD_INT 0
15203: PPUSH
15204: PPUSH
// begin if GetSide ( b ) = 3 then
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 255
15214: PUSH
15215: LD_INT 3
15217: EQUAL
15218: IFFALSE 15315
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15220: LD_ADDR_EXP 35
15224: PUSH
15225: LD_EXP 35
15229: PPUSH
15230: LD_INT 1
15232: PPUSH
15233: CALL_OW 3
15237: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 266
15247: PUSH
15248: LD_INT 4
15250: EQUAL
15251: IFFALSE 15262
// ComUpgrade ( b ) ;
15253: LD_VAR 0 1
15257: PPUSH
15258: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 266
15271: PUSH
15272: LD_INT 32
15274: PUSH
15275: LD_INT 33
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: IN
15282: IFFALSE 15315
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15284: LD_VAR 0 1
15288: PPUSH
15289: LD_INT 46
15291: PUSH
15292: LD_INT 45
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 1
15301: PPUSH
15302: LD_INT 2
15304: PPUSH
15305: CALL_OW 12
15309: ARRAY
15310: PPUSH
15311: CALL_OW 208
// end ; end ; end_of_file
15315: PPOPN 3
15317: END
// export function Action ; var i , tmp , un , inUnit ; begin
15318: LD_INT 0
15320: PPUSH
15321: PPUSH
15322: PPUSH
15323: PPUSH
15324: PPUSH
// Video ( true ) ;
15325: LD_INT 1
15327: PPUSH
15328: CALL 78387 0 1
// invincibleMode := true ;
15332: LD_ADDR_EXP 5
15336: PUSH
15337: LD_INT 1
15339: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15340: LD_INT 50
15342: PPUSH
15343: LD_INT 12
15345: PPUSH
15346: LD_INT 1
15348: PPUSH
15349: LD_INT 56
15351: NEG
15352: PPUSH
15353: CALL 78301 0 4
// CenterOnXY ( 50 , 12 ) ;
15357: LD_INT 50
15359: PPUSH
15360: LD_INT 12
15362: PPUSH
15363: CALL_OW 84
// wait ( 0 0$3 ) ;
15367: LD_INT 105
15369: PPUSH
15370: CALL_OW 67
// PrepareStartRussianAttack ;
15374: CALL 10014 0 0
// CenterOnXY ( 66 , 47 ) ;
15378: LD_INT 66
15380: PPUSH
15381: LD_INT 47
15383: PPUSH
15384: CALL_OW 84
// wait ( 0 0$5 ) ;
15388: LD_INT 175
15390: PPUSH
15391: CALL_OW 67
// case gammaCommander of 1 :
15395: LD_EXP 13
15399: PUSH
15400: LD_INT 1
15402: DOUBLE
15403: EQUAL
15404: IFTRUE 15408
15406: GO 15423
15408: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15409: LD_EXP 16
15413: PPUSH
15414: LD_STRING D1-Don-1
15416: PPUSH
15417: CALL_OW 88
15421: GO 15470
15423: LD_INT 2
15425: DOUBLE
15426: EQUAL
15427: IFTRUE 15431
15429: GO 15446
15431: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15432: LD_EXP 15
15436: PPUSH
15437: LD_STRING D1-Brown-1
15439: PPUSH
15440: CALL_OW 88
15444: GO 15470
15446: LD_INT 3
15448: DOUBLE
15449: EQUAL
15450: IFTRUE 15454
15452: GO 15469
15454: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15455: LD_EXP 25
15459: PPUSH
15460: LD_STRING D1-VanH-1
15462: PPUSH
15463: CALL_OW 88
15467: GO 15470
15469: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15470: LD_ADDR_VAR 0 3
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 33
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 61
15497: PUSH
15498: EMPTY
15499: LIST
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: ST_TO_ADDR
// if tmp then
15511: LD_VAR 0 3
15515: IFFALSE 15532
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15517: LD_VAR 0 3
15521: PPUSH
15522: LD_INT 74
15524: PPUSH
15525: LD_INT 44
15527: PPUSH
15528: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15532: LD_ADDR_VAR 0 3
15536: PUSH
15537: LD_INT 22
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 25
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PPUSH
15561: CALL_OW 69
15565: PUSH
15566: LD_EXP 16
15570: PUSH
15571: LD_EXP 15
15575: PUSH
15576: LD_EXP 25
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: LIST
15585: DIFF
15586: ST_TO_ADDR
// if tmp then
15587: LD_VAR 0 3
15591: IFFALSE 15669
// for i in tmp do
15593: LD_ADDR_VAR 0 2
15597: PUSH
15598: LD_VAR 0 3
15602: PUSH
15603: FOR_IN
15604: IFFALSE 15667
// begin inUnit := IsInUnit ( i ) ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_VAR 0 2
15615: PPUSH
15616: CALL_OW 310
15620: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15621: LD_VAR 0 5
15625: PUSH
15626: LD_VAR 0 5
15630: PPUSH
15631: CALL_OW 266
15635: PUSH
15636: LD_INT 32
15638: PUSH
15639: LD_INT 31
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: IN
15646: AND
15647: IFFALSE 15665
// tmp := tmp diff i ;
15649: LD_ADDR_VAR 0 3
15653: PUSH
15654: LD_VAR 0 3
15658: PUSH
15659: LD_VAR 0 2
15663: DIFF
15664: ST_TO_ADDR
// end ;
15665: GO 15603
15667: POP
15668: POP
// if tmp then
15669: LD_VAR 0 3
15673: IFFALSE 15763
// begin ComExitAll ( tmp ) ;
15675: LD_VAR 0 3
15679: PPUSH
15680: CALL 78896 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15684: LD_VAR 0 3
15688: PPUSH
15689: LD_INT 74
15691: PPUSH
15692: LD_INT 44
15694: PPUSH
15695: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15699: LD_ADDR_VAR 0 3
15703: PUSH
15704: LD_INT 22
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 25
15716: PUSH
15717: LD_INT 4
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PPUSH
15728: CALL_OW 69
15732: ST_TO_ADDR
// if tmp then
15733: LD_VAR 0 3
15737: IFFALSE 15763
// begin ComExitAll ( tmp ) ;
15739: LD_VAR 0 3
15743: PPUSH
15744: CALL 78896 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 66
15755: PPUSH
15756: LD_INT 28
15758: PPUSH
15759: CALL_OW 171
// end ; end ; game_speed := 4 ;
15763: LD_ADDR_OWVAR 65
15767: PUSH
15768: LD_INT 4
15770: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15771: LD_INT 70
15773: PPUSH
15774: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15778: LD_EXP 29
15782: PPUSH
15783: LD_STRING D1-Har-1
15785: PPUSH
15786: CALL_OW 94
// case gammaCommander of 1 :
15790: LD_EXP 13
15794: PUSH
15795: LD_INT 1
15797: DOUBLE
15798: EQUAL
15799: IFTRUE 15803
15801: GO 15818
15803: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15804: LD_EXP 16
15808: PPUSH
15809: LD_STRING D1-Don-2
15811: PPUSH
15812: CALL_OW 88
15816: GO 15865
15818: LD_INT 2
15820: DOUBLE
15821: EQUAL
15822: IFTRUE 15826
15824: GO 15841
15826: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15827: LD_EXP 15
15831: PPUSH
15832: LD_STRING D1-Brown-2
15834: PPUSH
15835: CALL_OW 88
15839: GO 15865
15841: LD_INT 3
15843: DOUBLE
15844: EQUAL
15845: IFTRUE 15849
15847: GO 15864
15849: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15850: LD_EXP 25
15854: PPUSH
15855: LD_STRING D1-VanH-2
15857: PPUSH
15858: CALL_OW 88
15862: GO 15865
15864: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15865: LD_EXP 29
15869: PPUSH
15870: LD_STRING D1-Har-2
15872: PPUSH
15873: CALL_OW 94
// invincibleMode := false ;
15877: LD_ADDR_EXP 5
15881: PUSH
15882: LD_INT 0
15884: ST_TO_ADDR
// Video ( false ) ;
15885: LD_INT 0
15887: PPUSH
15888: CALL 78387 0 1
// ChangeMissionObjectives ( M1 ) ;
15892: LD_STRING M1
15894: PPUSH
15895: CALL_OW 337
// SaveForQuickRestart ;
15899: CALL_OW 22
// wait ( 2 2$30 ) ;
15903: LD_INT 5250
15905: PPUSH
15906: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
15910: LD_INT 1
15912: PPUSH
15913: CALL 12997 0 1
// wait ( 4 4$30 ) ;
15917: LD_INT 9450
15919: PPUSH
15920: CALL_OW 67
// if Difficulty > 1 then
15924: LD_OWVAR 67
15928: PUSH
15929: LD_INT 1
15931: GREATER
15932: IFFALSE 15941
// PrepareRussianAttack ( 2 ) ;
15934: LD_INT 2
15936: PPUSH
15937: CALL 12997 0 1
// if Difficulty > 2 then
15941: LD_OWVAR 67
15945: PUSH
15946: LD_INT 2
15948: GREATER
15949: IFFALSE 16108
// begin for i := 1 to 4 do
15951: LD_ADDR_VAR 0 2
15955: PUSH
15956: DOUBLE
15957: LD_INT 1
15959: DEC
15960: ST_TO_ADDR
15961: LD_INT 4
15963: PUSH
15964: FOR_TO
15965: IFFALSE 16050
// begin uc_side := 6 ;
15967: LD_ADDR_OWVAR 20
15971: PUSH
15972: LD_INT 6
15974: ST_TO_ADDR
// uc_nation := 3 ;
15975: LD_ADDR_OWVAR 21
15979: PUSH
15980: LD_INT 3
15982: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
15983: LD_INT 0
15985: PPUSH
15986: LD_INT 7
15988: PPUSH
15989: CALL_OW 381
// un := CreateHuman ;
15993: LD_ADDR_VAR 0 4
15997: PUSH
15998: CALL_OW 44
16002: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16003: LD_VAR 0 4
16007: PPUSH
16008: LD_INT 122
16010: PPUSH
16011: LD_INT 89
16013: PPUSH
16014: LD_INT 3
16016: PPUSH
16017: LD_INT 0
16019: PPUSH
16020: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16024: LD_VAR 0 4
16028: PPUSH
16029: LD_INT 88
16031: PPUSH
16032: LD_INT 42
16034: PPUSH
16035: CALL_OW 114
// AddComHold ( un ) ;
16039: LD_VAR 0 4
16043: PPUSH
16044: CALL_OW 200
// end ;
16048: GO 15964
16050: POP
16051: POP
// PrepareScientist ( false , 6 ) ;
16052: LD_INT 0
16054: PPUSH
16055: LD_INT 6
16057: PPUSH
16058: CALL_OW 384
// un := CreateHuman ;
16062: LD_ADDR_VAR 0 4
16066: PUSH
16067: CALL_OW 44
16071: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16072: LD_VAR 0 4
16076: PPUSH
16077: LD_INT 122
16079: PPUSH
16080: LD_INT 89
16082: PPUSH
16083: LD_INT 3
16085: PPUSH
16086: LD_INT 0
16088: PPUSH
16089: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16093: LD_VAR 0 4
16097: PPUSH
16098: LD_INT 91
16100: PPUSH
16101: LD_INT 48
16103: PPUSH
16104: CALL_OW 111
// end ; end ;
16108: LD_VAR 0 1
16112: RET
// every 0 0$1 trigger invincibleMode do var i ;
16113: LD_EXP 5
16117: IFFALSE 16214
16119: GO 16121
16121: DISABLE
16122: LD_INT 0
16124: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16125: LD_ADDR_VAR 0 1
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 2
16142: PUSH
16143: LD_INT 21
16145: PUSH
16146: LD_INT 3
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 21
16155: PUSH
16156: LD_INT 1
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 3
16170: PUSH
16171: LD_INT 24
16173: PUSH
16174: LD_INT 900
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: PPUSH
16190: CALL_OW 69
16194: PUSH
16195: FOR_IN
16196: IFFALSE 16212
// SetLives ( i , 900 ) ;
16198: LD_VAR 0 1
16202: PPUSH
16203: LD_INT 900
16205: PPUSH
16206: CALL_OW 234
16210: GO 16195
16212: POP
16213: POP
// end ;
16214: PPOPN 1
16216: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16217: LD_OWVAR 1
16221: PUSH
16222: LD_INT 14700
16224: GREATER
16225: IFFALSE 17835
16227: GO 16229
16229: DISABLE
16230: LD_INT 0
16232: PPUSH
16233: PPUSH
// begin PrepareSupportFromDelta ;
16234: CALL 4052 0 0
// deltaSupport := true ;
16238: LD_ADDR_EXP 6
16242: PUSH
16243: LD_INT 1
16245: ST_TO_ADDR
// dialog := false ;
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: LD_INT 0
16253: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16254: LD_EXP 21
16258: PPUSH
16259: CALL_OW 302
16263: IFFALSE 16285
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16265: LD_ADDR_VAR 0 1
16269: PUSH
16270: LD_EXP 21
16274: PPUSH
16275: LD_STRING D2-Glad-1
16277: PPUSH
16278: CALL_OW 88
16282: ST_TO_ADDR
16283: GO 16367
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16285: LD_ADDR_VAR 0 1
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 120
16302: PUSH
16303: LD_INT 107
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 21
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 23
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: PPUSH
16336: CALL_OW 69
16340: PUSH
16341: LD_EXP 27
16345: PUSH
16346: LD_EXP 26
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: DIFF
16355: PPUSH
16356: LD_STRING D2-Sol1-1
16358: PPUSH
16359: LD_STRING D2-FSol1-1
16361: PPUSH
16362: CALL 20040 0 3
16366: ST_TO_ADDR
// if dialog then
16367: LD_VAR 0 1
16371: IFFALSE 16472
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16373: LD_EXP 16
16377: PPUSH
16378: CALL_OW 302
16382: PUSH
16383: LD_EXP 13
16387: PUSH
16388: LD_INT 1
16390: EQUAL
16391: AND
16392: IFFALSE 16406
// Say ( Donaldson , D2-Don-1 ) ;
16394: LD_EXP 16
16398: PPUSH
16399: LD_STRING D2-Don-1
16401: PPUSH
16402: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16406: LD_EXP 15
16410: PPUSH
16411: CALL_OW 302
16415: PUSH
16416: LD_EXP 13
16420: PUSH
16421: LD_INT 2
16423: EQUAL
16424: AND
16425: IFFALSE 16439
// Say ( Brown , D2-Brown-1 ) ;
16427: LD_EXP 15
16431: PPUSH
16432: LD_STRING D2-Brown-1
16434: PPUSH
16435: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16439: LD_EXP 25
16443: PPUSH
16444: CALL_OW 302
16448: PUSH
16449: LD_EXP 13
16453: PUSH
16454: LD_INT 3
16456: EQUAL
16457: AND
16458: IFFALSE 16472
// Say ( Houten , D2-VanH-1 ) ;
16460: LD_EXP 25
16464: PPUSH
16465: LD_STRING D2-VanH-1
16467: PPUSH
16468: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16472: LD_INT 3
16474: PPUSH
16475: CALL 12997 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16479: LD_STRING 07_time
16481: PPUSH
16482: LD_INT 18900
16484: PPUSH
16485: CALL_OW 30
16489: PUSH
16490: LD_INT 3
16492: DIV
16493: PPUSH
16494: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16498: LD_INT 34
16500: PPUSH
16501: LD_INT 1
16503: PPUSH
16504: CALL_OW 321
16508: PUSH
16509: LD_INT 2
16511: EQUAL
16512: IFFALSE 16521
// SetAchievement ( ACH_HEAVYGUN ) ;
16514: LD_STRING ACH_HEAVYGUN
16516: PPUSH
16517: CALL_OW 543
// PrepareMacmillanSquad ;
16521: CALL 4826 0 0
// wait ( 0 0$1 ) ;
16525: LD_INT 35
16527: PPUSH
16528: CALL_OW 67
// DialogueOn ;
16532: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16536: LD_EXP 14
16540: PPUSH
16541: CALL_OW 87
// dwait ( 0 0$2 ) ;
16545: LD_INT 70
16547: PPUSH
16548: CALL_OW 68
// DialogueOff ;
16552: CALL_OW 7
// wait ( 0 0$10 ) ;
16556: LD_INT 350
16558: PPUSH
16559: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16563: LD_INT 1
16565: PPUSH
16566: CALL_OW 427
// p := 0 ;
16570: LD_ADDR_VAR 0 2
16574: PUSH
16575: LD_INT 0
16577: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16578: LD_INT 35
16580: PPUSH
16581: CALL_OW 67
// p := Inc ( p ) ;
16585: LD_ADDR_VAR 0 2
16589: PUSH
16590: LD_VAR 0 2
16594: PPUSH
16595: CALL 79776 0 1
16599: ST_TO_ADDR
// if p > 300 then
16600: LD_VAR 0 2
16604: PUSH
16605: LD_INT 300
16607: GREATER
16608: IFFALSE 16612
// exit ;
16610: GO 17835
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16612: LD_EXP 14
16616: PPUSH
16617: LD_INT 15
16619: PPUSH
16620: CALL_OW 308
16624: PUSH
16625: LD_EXP 14
16629: PPUSH
16630: CALL_OW 310
16634: PPUSH
16635: LD_INT 15
16637: PPUSH
16638: CALL_OW 308
16642: OR
16643: PUSH
16644: LD_EXP 14
16648: PPUSH
16649: LD_EXP 27
16653: PPUSH
16654: CALL_OW 296
16658: PUSH
16659: LD_INT 10
16661: LESS
16662: OR
16663: PUSH
16664: LD_INT 22
16666: PUSH
16667: LD_INT 1
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 2
16676: PUSH
16677: LD_INT 120
16679: PUSH
16680: LD_INT 106
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 120
16689: PUSH
16690: LD_INT 107
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 91
16704: PUSH
16705: LD_EXP 14
16709: PUSH
16710: LD_INT 12
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: PPUSH
16723: CALL_OW 69
16727: OR
16728: IFFALSE 16578
// DialogueOn ;
16730: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16734: LD_EXP 14
16738: PPUSH
16739: LD_STRING D3-JMM-1
16741: PPUSH
16742: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16746: LD_EXP 16
16750: PPUSH
16751: CALL_OW 302
16755: PUSH
16756: LD_EXP 13
16760: PUSH
16761: LD_INT 1
16763: EQUAL
16764: AND
16765: IFFALSE 16781
// Say ( Donaldson , D3-Don-1 ) else
16767: LD_EXP 16
16771: PPUSH
16772: LD_STRING D3-Don-1
16774: PPUSH
16775: CALL_OW 88
16779: GO 16877
// begin if gammaCommander = 1 then
16781: LD_EXP 13
16785: PUSH
16786: LD_INT 1
16788: EQUAL
16789: IFFALSE 16877
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16791: LD_INT 22
16793: PUSH
16794: LD_INT 1
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 21
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 23
16813: PUSH
16814: LD_INT 1
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 120
16823: PUSH
16824: LD_INT 106
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 26
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: PPUSH
16848: CALL_OW 69
16852: PPUSH
16853: LD_STRING D3-Sol1-1
16855: PPUSH
16856: LD_STRING 
16858: PPUSH
16859: CALL 20040 0 3
16863: IFFALSE 16877
// Say ( JMM , D3-JMM-2 ) ;
16865: LD_EXP 14
16869: PPUSH
16870: LD_STRING D3-JMM-2
16872: PPUSH
16873: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16877: LD_EXP 15
16881: PPUSH
16882: CALL_OW 302
16886: PUSH
16887: LD_EXP 13
16891: PUSH
16892: LD_INT 2
16894: EQUAL
16895: AND
16896: IFFALSE 16912
// Say ( Brown , D3-Brown-1 ) else
16898: LD_EXP 15
16902: PPUSH
16903: LD_STRING D3-Brown-1
16905: PPUSH
16906: CALL_OW 88
16910: GO 17008
// begin if gammaCommander = 2 then
16912: LD_EXP 13
16916: PUSH
16917: LD_INT 2
16919: EQUAL
16920: IFFALSE 17008
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
16922: LD_INT 22
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 21
16934: PUSH
16935: LD_INT 1
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 23
16944: PUSH
16945: LD_INT 1
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 120
16954: PUSH
16955: LD_INT 106
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 26
16964: PUSH
16965: LD_INT 1
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: PPUSH
16979: CALL_OW 69
16983: PPUSH
16984: LD_STRING D3-Sol1-1a
16986: PPUSH
16987: LD_STRING 
16989: PPUSH
16990: CALL 20040 0 3
16994: IFFALSE 17008
// Say ( JMM , D3-JMM-2 ) ;
16996: LD_EXP 14
17000: PPUSH
17001: LD_STRING D3-JMM-2
17003: PPUSH
17004: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17008: LD_EXP 25
17012: PPUSH
17013: CALL_OW 302
17017: PUSH
17018: LD_EXP 13
17022: PUSH
17023: LD_INT 3
17025: EQUAL
17026: AND
17027: IFFALSE 17043
// Say ( Houten , D3-VanH-1 ) else
17029: LD_EXP 25
17033: PPUSH
17034: LD_STRING D3-VanH-1
17036: PPUSH
17037: CALL_OW 88
17041: GO 17139
// begin if gammaCommander = 3 then
17043: LD_EXP 13
17047: PUSH
17048: LD_INT 3
17050: EQUAL
17051: IFFALSE 17139
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17053: LD_INT 22
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 21
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 23
17075: PUSH
17076: LD_INT 1
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 120
17085: PUSH
17086: LD_INT 106
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 26
17095: PUSH
17096: LD_INT 1
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 69
17114: PPUSH
17115: LD_STRING D3-Sol1-1b
17117: PPUSH
17118: LD_STRING 
17120: PPUSH
17121: CALL 20040 0 3
17125: IFFALSE 17139
// Say ( JMM , D3-JMM-2 ) ;
17127: LD_EXP 14
17131: PPUSH
17132: LD_STRING D3-JMM-2
17134: PPUSH
17135: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17139: LD_EXP 27
17143: PPUSH
17144: CALL_OW 302
17148: IFFALSE 17176
// begin Say ( Joan , D3a-Joan-1 ) ;
17150: LD_EXP 27
17154: PPUSH
17155: LD_STRING D3a-Joan-1
17157: PPUSH
17158: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17162: LD_EXP 14
17166: PPUSH
17167: LD_STRING D3a-JMM-1
17169: PPUSH
17170: CALL_OW 88
// end else
17174: GO 17610
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17176: LD_STRING 06_JoanStatus_1
17178: PPUSH
17179: LD_INT 0
17181: PPUSH
17182: CALL_OW 30
17186: PUSH
17187: LD_INT 1
17189: EQUAL
17190: IFFALSE 17610
// begin Say ( JMM , D3b-JMM-1 ) ;
17192: LD_EXP 14
17196: PPUSH
17197: LD_STRING D3b-JMM-1
17199: PPUSH
17200: CALL_OW 88
// dialog := false ;
17204: LD_ADDR_VAR 0 1
17208: PUSH
17209: LD_INT 0
17211: ST_TO_ADDR
// if gammaCommander = 1 then
17212: LD_EXP 13
17216: PUSH
17217: LD_INT 1
17219: EQUAL
17220: IFFALSE 17331
// if IsOK ( Donaldson ) then
17222: LD_EXP 16
17226: PPUSH
17227: CALL_OW 302
17231: IFFALSE 17253
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17233: LD_ADDR_VAR 0 1
17237: PUSH
17238: LD_EXP 16
17242: PPUSH
17243: LD_STRING D3b-Don-1
17245: PPUSH
17246: CALL_OW 88
17250: ST_TO_ADDR
17251: GO 17331
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17253: LD_ADDR_VAR 0 1
17257: PUSH
17258: LD_INT 22
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 21
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 23
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 120
17290: PUSH
17291: LD_INT 106
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 26
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: PPUSH
17320: LD_STRING D3b-Sol1-1
17322: PPUSH
17323: LD_STRING 
17325: PPUSH
17326: CALL 20040 0 3
17330: ST_TO_ADDR
// if gammaCommander = 2 then
17331: LD_EXP 13
17335: PUSH
17336: LD_INT 2
17338: EQUAL
17339: IFFALSE 17450
// if IsOk ( Brown ) then
17341: LD_EXP 15
17345: PPUSH
17346: CALL_OW 302
17350: IFFALSE 17372
// dialog := Say ( Brown , D3b-Brown-1 ) else
17352: LD_ADDR_VAR 0 1
17356: PUSH
17357: LD_EXP 15
17361: PPUSH
17362: LD_STRING D3b-Brown-1
17364: PPUSH
17365: CALL_OW 88
17369: ST_TO_ADDR
17370: GO 17450
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17372: LD_ADDR_VAR 0 1
17376: PUSH
17377: LD_INT 22
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 21
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 23
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 120
17409: PUSH
17410: LD_INT 106
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 26
17419: PUSH
17420: LD_INT 1
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: PPUSH
17439: LD_STRING D3b-Sol1-1
17441: PPUSH
17442: LD_STRING 
17444: PPUSH
17445: CALL 20040 0 3
17449: ST_TO_ADDR
// if gammaCommander = 3 then
17450: LD_EXP 13
17454: PUSH
17455: LD_INT 3
17457: EQUAL
17458: IFFALSE 17569
// if IsOk ( Houten ) then
17460: LD_EXP 25
17464: PPUSH
17465: CALL_OW 302
17469: IFFALSE 17491
// dialog := Say ( Houten , D3b-VanH-1 ) else
17471: LD_ADDR_VAR 0 1
17475: PUSH
17476: LD_EXP 25
17480: PPUSH
17481: LD_STRING D3b-VanH-1
17483: PPUSH
17484: CALL_OW 88
17488: ST_TO_ADDR
17489: GO 17569
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17491: LD_ADDR_VAR 0 1
17495: PUSH
17496: LD_INT 22
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 21
17508: PUSH
17509: LD_INT 1
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 23
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 120
17528: PUSH
17529: LD_INT 106
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 26
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: PPUSH
17558: LD_STRING D3b-Sol1-1
17560: PPUSH
17561: LD_STRING 
17563: PPUSH
17564: CALL 20040 0 3
17568: ST_TO_ADDR
// if dialog then
17569: LD_VAR 0 1
17573: IFFALSE 17610
// begin Say ( JMM , D3b-JMM-2 ) ;
17575: LD_EXP 14
17579: PPUSH
17580: LD_STRING D3b-JMM-2
17582: PPUSH
17583: CALL_OW 88
// if IsOK ( Lisa ) then
17587: LD_EXP 19
17591: PPUSH
17592: CALL_OW 302
17596: IFFALSE 17610
// Say ( Lisa , D3b-Lisa-2 ) ;
17598: LD_EXP 19
17602: PPUSH
17603: LD_STRING D3b-Lisa-2
17605: PPUSH
17606: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17610: LD_EXP 7
17614: NOT
17615: IFFALSE 17623
// begin DialogueOff ;
17617: CALL_OW 7
// exit ;
17621: GO 17835
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17623: LD_INT 22
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 21
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 23
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 2
17655: PUSH
17656: LD_INT 120
17658: PUSH
17659: LD_INT 106
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 120
17668: PUSH
17669: LD_INT 107
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 26
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: PPUSH
17698: CALL_OW 69
17702: PPUSH
17703: LD_STRING DCa-Sol1-1
17705: PPUSH
17706: LD_STRING 
17708: PPUSH
17709: CALL 20040 0 3
17713: IFFALSE 17727
// Say ( JMM , DCb-JMM-1 ) ;
17715: LD_EXP 14
17719: PPUSH
17720: LD_STRING DCb-JMM-1
17722: PPUSH
17723: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17727: LD_INT 22
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 21
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 23
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 2
17759: PUSH
17760: LD_INT 120
17762: PUSH
17763: LD_INT 106
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 120
17772: PUSH
17773: LD_INT 107
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 26
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: PPUSH
17807: LD_STRING DCb-Sol1-1
17809: PPUSH
17810: LD_STRING 
17812: PPUSH
17813: CALL 20040 0 3
17817: IFFALSE 17831
// Say ( JMM , DCb-JMM-2 ) ;
17819: LD_EXP 14
17823: PPUSH
17824: LD_STRING DCb-JMM-2
17826: PPUSH
17827: CALL_OW 88
// DialogueOff ;
17831: CALL_OW 7
// end ;
17835: PPOPN 2
17837: END
// export function DialogSeenComputer ( un ) ; begin
17838: LD_INT 0
17840: PPUSH
// if jmmArrival then
17841: LD_EXP 8
17845: IFFALSE 17849
// exit ;
17847: GO 17915
// CenterOnUnits ( un ) ;
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17858: LD_INT 22
17860: PUSH
17861: LD_INT 1
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 120
17873: PUSH
17874: LD_INT 106
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 120
17883: PUSH
17884: LD_INT 107
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 69
17904: PPUSH
17905: LD_STRING DC-Sol1-1
17907: PPUSH
17908: LD_STRING DC-FSol1-1
17910: PPUSH
17911: CALL 20040 0 3
// end ;
17915: LD_VAR 0 2
17919: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
17920: LD_EXP 8
17924: PUSH
17925: LD_OWVAR 1
17929: PUSH
17930: LD_INT 48300
17932: GREATEREQUAL
17933: AND
17934: PUSH
17935: LD_EXP 14
17939: PPUSH
17940: CALL_OW 302
17944: AND
17945: IFFALSE 18431
17947: GO 17949
17949: DISABLE
// begin wait ( 2 2$00 ) ;
17950: LD_INT 4200
17952: PPUSH
17953: CALL_OW 67
// DialogueOn ;
17957: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17961: LD_EXP 30
17965: PPUSH
17966: LD_STRING D4-Pow-1
17968: PPUSH
17969: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17973: LD_EXP 14
17977: PPUSH
17978: LD_STRING D4-JMM-1
17980: PPUSH
17981: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17985: LD_EXP 30
17989: PPUSH
17990: LD_STRING D4-Pow-2
17992: PPUSH
17993: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17997: LD_EXP 14
18001: PPUSH
18002: LD_STRING D4-JMM-2
18004: PPUSH
18005: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18009: LD_EXP 30
18013: PPUSH
18014: LD_STRING D4-Pow-3
18016: PPUSH
18017: CALL_OW 94
// DialogueOff ;
18021: CALL_OW 7
// wait ( 1 1$00 ) ;
18025: LD_INT 2100
18027: PPUSH
18028: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18032: LD_INT 1
18034: PPUSH
18035: CALL_OW 427
// wait ( 7 7$30 ) ;
18039: LD_INT 15750
18041: PPUSH
18042: CALL_OW 67
// DialogueOn ;
18046: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18050: LD_EXP 30
18054: PPUSH
18055: LD_STRING D4a-Pow-1
18057: PPUSH
18058: CALL_OW 94
// DialogueOff ;
18062: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18066: LD_INT 1
18068: PPUSH
18069: CALL_OW 427
// SikorskiCounter ;
18073: CALL 19824 0 0
// PrepareSikorsky ;
18077: CALL 6238 0 0
// CenterNowOnUnits ( Sikorski ) ;
18081: LD_EXP 28
18085: PPUSH
18086: CALL_OW 87
// DialogueOn ;
18090: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18094: LD_EXP 28
18098: PPUSH
18099: LD_STRING D5-Sik-1
18101: PPUSH
18102: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18106: LD_INT 11
18108: PPUSH
18109: LD_INT 22
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PPUSH
18119: CALL_OW 70
18123: PUSH
18124: LD_INT 1
18126: GREATER
18127: PUSH
18128: LD_INT 28
18130: PPUSH
18131: CALL_OW 302
18135: NOT
18136: OR
18137: PUSH
18138: LD_INT 28
18140: PPUSH
18141: CALL_OW 255
18145: PUSH
18146: LD_INT 1
18148: EQUAL
18149: OR
18150: IFFALSE 18202
// begin Say ( JMM , D5-JMM-1 ) ;
18152: LD_EXP 14
18156: PPUSH
18157: LD_STRING D5-JMM-1
18159: PPUSH
18160: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18164: LD_EXP 28
18168: PPUSH
18169: LD_STRING D7a-Sik-1
18171: PPUSH
18172: CALL_OW 88
// DialogueOff ;
18176: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18180: LD_STRING M2
18182: PPUSH
18183: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18187: LD_INT 1
18189: PPUSH
18190: CALL_OW 427
// SikorskiAttack ;
18194: CALL 7861 0 0
// exit ;
18198: GO 18431
// end else
18200: GO 18247
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18202: LD_INT 15
18204: PPUSH
18205: LD_INT 81
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 70
18219: IFFALSE 18235
// Say ( JMM , D5-JMM-1b ) else
18221: LD_EXP 14
18225: PPUSH
18226: LD_STRING D5-JMM-1b
18228: PPUSH
18229: CALL_OW 88
18233: GO 18247
// Say ( JMM , D5-JMM-1a ) ;
18235: LD_EXP 14
18239: PPUSH
18240: LD_STRING D5-JMM-1a
18242: PPUSH
18243: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18247: LD_EXP 28
18251: PPUSH
18252: LD_STRING D5-Sik-2
18254: PPUSH
18255: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18259: LD_STRING QSikorski
18261: PPUSH
18262: CALL_OW 97
18266: PUSH
18267: LD_INT 1
18269: DOUBLE
18270: EQUAL
18271: IFTRUE 18275
18273: GO 18298
18275: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18276: LD_EXP 28
18280: PPUSH
18281: LD_STRING D5a-Sik-1
18283: PPUSH
18284: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18288: LD_ADDR_EXP 4
18292: PUSH
18293: LD_INT 2100
18295: ST_TO_ADDR
// end ; 2 :
18296: GO 18385
18298: LD_INT 2
18300: DOUBLE
18301: EQUAL
18302: IFTRUE 18306
18304: GO 18329
18306: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18307: LD_EXP 28
18311: PPUSH
18312: LD_STRING D5b-Sik-1
18314: PPUSH
18315: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18319: LD_ADDR_EXP 4
18323: PUSH
18324: LD_INT 10500
18326: ST_TO_ADDR
// end ; 3 :
18327: GO 18385
18329: LD_INT 3
18331: DOUBLE
18332: EQUAL
18333: IFTRUE 18337
18335: GO 18384
18337: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18338: LD_EXP 28
18342: PPUSH
18343: LD_STRING D5c-Sik-1
18345: PPUSH
18346: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18350: LD_EXP 14
18354: PPUSH
18355: LD_STRING D5c-JMM-1
18357: PPUSH
18358: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18362: LD_EXP 28
18366: PPUSH
18367: LD_STRING D5c-Sik-2
18369: PPUSH
18370: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18374: LD_ADDR_EXP 4
18378: PUSH
18379: LD_INT 10500
18381: ST_TO_ADDR
// end ; end ;
18382: GO 18385
18384: POP
// DialogueOff ;
18385: CALL_OW 7
// SikorskiWaitCounter ;
18389: CALL 19887 0 0
// DialogueOn ;
18393: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18397: LD_EXP 28
18401: PPUSH
18402: LD_STRING D6-Sik-1
18404: PPUSH
18405: CALL_OW 88
// DialogueOff ;
18409: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18413: LD_STRING M2
18415: PPUSH
18416: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18420: LD_INT 1
18422: PPUSH
18423: CALL_OW 427
// SikorskiAttack ;
18427: CALL 7861 0 0
// end ;
18431: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18432: LD_INT 11
18434: PPUSH
18435: LD_INT 22
18437: PUSH
18438: LD_INT 4
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 70
18449: PUSH
18450: LD_INT 2
18452: GREATER
18453: IFFALSE 18646
18455: GO 18457
18457: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18458: LD_EXP 28
18462: PPUSH
18463: LD_STRING D7-Sik-1
18465: PPUSH
18466: CALL_OW 88
// wait ( 0 0$10 ) ;
18470: LD_INT 350
18472: PPUSH
18473: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18477: LD_EXP 14
18481: PPUSH
18482: LD_INT 11
18484: PPUSH
18485: CALL_OW 308
18489: PUSH
18490: LD_EXP 14
18494: PPUSH
18495: CALL_OW 310
18499: PPUSH
18500: LD_INT 11
18502: PPUSH
18503: CALL_OW 308
18507: OR
18508: IFFALSE 18532
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18510: LD_EXP 28
18514: PPUSH
18515: LD_STRING D7a-Sik-1
18517: PPUSH
18518: CALL_OW 88
// sikorskiStatus := 1 ;
18522: LD_ADDR_EXP 9
18526: PUSH
18527: LD_INT 1
18529: ST_TO_ADDR
// end else
18530: GO 18552
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18532: LD_EXP 28
18536: PPUSH
18537: LD_STRING D7b-Sik-1
18539: PPUSH
18540: CALL_OW 88
// sikorskiStatus := 0 ;
18544: LD_ADDR_EXP 9
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18552: LD_INT 1575
18554: PPUSH
18555: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18559: LD_EXP 14
18563: PPUSH
18564: LD_INT 11
18566: PPUSH
18567: CALL_OW 308
18571: PUSH
18572: LD_EXP 14
18576: PPUSH
18577: CALL_OW 310
18581: PPUSH
18582: LD_INT 11
18584: PPUSH
18585: CALL_OW 308
18589: OR
18590: PUSH
18591: LD_EXP 14
18595: PPUSH
18596: CALL_OW 302
18600: NOT
18601: OR
18602: IFFALSE 18626
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18604: LD_EXP 28
18608: PPUSH
18609: LD_STRING D7a-Sik-1
18611: PPUSH
18612: CALL_OW 88
// sikorskiStatus := 1 ;
18616: LD_ADDR_EXP 9
18620: PUSH
18621: LD_INT 1
18623: ST_TO_ADDR
// end else
18624: GO 18646
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18626: LD_EXP 28
18630: PPUSH
18631: LD_STRING D7b-Sik-1
18633: PPUSH
18634: CALL_OW 88
// sikorskiStatus := 0 ;
18638: LD_ADDR_EXP 9
18642: PUSH
18643: LD_INT 0
18645: ST_TO_ADDR
// end ; end ;
18646: END
// export function SikorskiKilledInAction ; begin
18647: LD_INT 0
18649: PPUSH
// wait ( 0 0$2 ) ;
18650: LD_INT 70
18652: PPUSH
18653: CALL_OW 67
// DialogueOn ;
18657: CALL_OW 6
// dwait ( 0 0$1 ) ;
18661: LD_INT 35
18663: PPUSH
18664: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18668: LD_EXP 30
18672: PPUSH
18673: LD_STRING D8b-Pow-1
18675: PPUSH
18676: CALL_OW 94
// YouLost ( Dismissed ) ;
18680: LD_STRING Dismissed
18682: PPUSH
18683: CALL_OW 104
// DialogueOff ;
18687: CALL_OW 7
// end ;
18691: LD_VAR 0 1
18695: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18696: LD_EXP 8
18700: PUSH
18701: LD_INT 28
18703: PPUSH
18704: CALL_OW 301
18708: AND
18709: PUSH
18710: LD_EXP 32
18714: PPUSH
18715: CALL_OW 301
18719: AND
18720: PUSH
18721: LD_INT 22
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 50
18733: PUSH
18734: EMPTY
18735: LIST
18736: PUSH
18737: LD_INT 30
18739: PUSH
18740: LD_INT 5
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: LIST
18751: PPUSH
18752: CALL_OW 69
18756: PUSH
18757: LD_INT 0
18759: EQUAL
18760: AND
18761: IFFALSE 19821
18763: GO 18765
18765: DISABLE
18766: LD_INT 0
18768: PPUSH
18769: PPUSH
18770: PPUSH
// begin Video ( true ) ;
18771: LD_INT 1
18773: PPUSH
18774: CALL 78387 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18778: LD_INT 104
18780: PPUSH
18781: LD_INT 108
18783: PPUSH
18784: LD_INT 1
18786: PPUSH
18787: LD_INT 36
18789: NEG
18790: PPUSH
18791: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18795: LD_INT 104
18797: PPUSH
18798: LD_INT 108
18800: PPUSH
18801: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18805: LD_ADDR_VAR 0 2
18809: PUSH
18810: LD_INT 22
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: LD_INT 24
18835: PUSH
18836: LD_INT 249
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: PPUSH
18852: CALL_OW 69
18856: ST_TO_ADDR
// if tmp then
18857: LD_VAR 0 2
18861: IFFALSE 18892
// for i in tmp do
18863: LD_ADDR_VAR 0 1
18867: PUSH
18868: LD_VAR 0 2
18872: PUSH
18873: FOR_IN
18874: IFFALSE 18890
// SetLives ( i , 249 ) ;
18876: LD_VAR 0 1
18880: PPUSH
18881: LD_INT 249
18883: PPUSH
18884: CALL_OW 234
18888: GO 18873
18890: POP
18891: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18892: LD_ADDR_VAR 0 1
18896: PUSH
18897: LD_INT 22
18899: PUSH
18900: LD_INT 3
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 21
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PPUSH
18921: CALL_OW 69
18925: PUSH
18926: FOR_IN
18927: IFFALSE 18970
// begin ComExit ( i ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL 78813 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
18938: LD_VAR 0 1
18942: PPUSH
18943: LD_INT 131
18945: PPUSH
18946: LD_INT 127
18948: PPUSH
18949: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
18953: LD_VAR 0 1
18957: PPUSH
18958: LD_INT 141
18960: PPUSH
18961: LD_INT 147
18963: PPUSH
18964: CALL_OW 171
// end ;
18968: GO 18926
18970: POP
18971: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
18972: LD_INT 81
18974: PUSH
18975: LD_INT 3
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 3
18984: PUSH
18985: LD_INT 21
18987: PUSH
18988: LD_INT 3
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 69
19007: PPUSH
19008: LD_INT 131
19010: PPUSH
19011: LD_INT 127
19013: PPUSH
19014: CALL_OW 174
// wait ( 0 0$08 ) ;
19018: LD_INT 280
19020: PPUSH
19021: CALL_OW 67
// DialogueOn ;
19025: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19029: LD_EXP 9
19033: PUSH
19034: LD_INT 1
19036: EQUAL
19037: PUSH
19038: LD_EXP 28
19042: PPUSH
19043: CALL_OW 302
19047: AND
19048: IFFALSE 19062
// Say ( Sikorski , D9-Sik-1 ) ;
19050: LD_EXP 28
19054: PPUSH
19055: LD_STRING D9-Sik-1
19057: PPUSH
19058: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19062: LD_INT 22
19064: PUSH
19065: LD_INT 4
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PPUSH
19072: CALL_OW 69
19076: PUSH
19077: LD_INT 0
19079: EQUAL
19080: PUSH
19081: LD_EXP 3
19085: AND
19086: IFFALSE 19095
// SetAchievement ( ACH_BLITZKRIEG ) ;
19088: LD_STRING ACH_BLITZKRIEG
19090: PPUSH
19091: CALL_OW 543
// if tick <= 45 45$10 then
19095: LD_OWVAR 1
19099: PUSH
19100: LD_INT 94850
19102: LESSEQUAL
19103: IFFALSE 19119
// begin wait ( 3 ) ;
19105: LD_INT 3
19107: PPUSH
19108: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19112: LD_STRING ACH_ASPEED_8
19114: PPUSH
19115: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19119: LD_STRING med1
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19129: LD_STRING med2
19131: PPUSH
19132: LD_INT 1
19134: PPUSH
19135: CALL_OW 101
// if sikorskiStatus = 1 then
19139: LD_EXP 9
19143: PUSH
19144: LD_INT 1
19146: EQUAL
19147: IFFALSE 19161
// AddMedal ( perfect , 1 ) else
19149: LD_STRING perfect
19151: PPUSH
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 101
19159: GO 19172
// AddMedal ( perfect , - 1 ) ;
19161: LD_STRING perfect
19163: PPUSH
19164: LD_INT 1
19166: NEG
19167: PPUSH
19168: CALL_OW 101
// if Difficulty >= 3 then
19172: LD_OWVAR 67
19176: PUSH
19177: LD_INT 3
19179: GREATEREQUAL
19180: IFFALSE 19192
// SetAchievementEX ( ACH_AMER , 8 ) ;
19182: LD_STRING ACH_AMER
19184: PPUSH
19185: LD_INT 8
19187: PPUSH
19188: CALL_OW 564
// GiveMedals ( Main ) ;
19192: LD_STRING Main
19194: PPUSH
19195: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19199: LD_INT 22
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 23
19211: PUSH
19212: LD_INT 1
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 21
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL_OW 69
19238: PPUSH
19239: CALL_OW 43
// prefix := 08_ ;
19243: LD_ADDR_VAR 0 3
19247: PUSH
19248: LD_STRING 08_
19250: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19251: LD_EXP 14
19255: PPUSH
19256: LD_VAR 0 3
19260: PUSH
19261: LD_STRING JMM
19263: STR
19264: PPUSH
19265: CALL_OW 38
// if IsLive ( Brown ) then
19269: LD_EXP 15
19273: PPUSH
19274: CALL_OW 300
19278: IFFALSE 19298
// SaveCharacters ( Brown , prefix & Brown ) ;
19280: LD_EXP 15
19284: PPUSH
19285: LD_VAR 0 3
19289: PUSH
19290: LD_STRING Brown
19292: STR
19293: PPUSH
19294: CALL_OW 38
// if IsLive ( Donaldson ) then
19298: LD_EXP 16
19302: PPUSH
19303: CALL_OW 300
19307: IFFALSE 19327
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19309: LD_EXP 16
19313: PPUSH
19314: LD_VAR 0 3
19318: PUSH
19319: LD_STRING Donaldson
19321: STR
19322: PPUSH
19323: CALL_OW 38
// if IsLive ( Bobby ) then
19327: LD_EXP 17
19331: PPUSH
19332: CALL_OW 300
19336: IFFALSE 19356
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19338: LD_EXP 17
19342: PPUSH
19343: LD_VAR 0 3
19347: PUSH
19348: LD_STRING Bobby
19350: STR
19351: PPUSH
19352: CALL_OW 38
// if IsLive ( Cyrus ) then
19356: LD_EXP 18
19360: PPUSH
19361: CALL_OW 300
19365: IFFALSE 19385
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19367: LD_EXP 18
19371: PPUSH
19372: LD_VAR 0 3
19376: PUSH
19377: LD_STRING Cyrus
19379: STR
19380: PPUSH
19381: CALL_OW 38
// if IsLive ( Lisa ) then
19385: LD_EXP 19
19389: PPUSH
19390: CALL_OW 300
19394: IFFALSE 19414
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19396: LD_EXP 19
19400: PPUSH
19401: LD_VAR 0 3
19405: PUSH
19406: LD_STRING Lisa
19408: STR
19409: PPUSH
19410: CALL_OW 38
// if IsLive ( Frank ) then
19414: LD_EXP 20
19418: PPUSH
19419: CALL_OW 300
19423: IFFALSE 19443
// SaveCharacters ( Frank , prefix & Frank ) ;
19425: LD_EXP 20
19429: PPUSH
19430: LD_VAR 0 3
19434: PUSH
19435: LD_STRING Frank
19437: STR
19438: PPUSH
19439: CALL_OW 38
// if IsLive ( Gladstone ) then
19443: LD_EXP 21
19447: PPUSH
19448: CALL_OW 300
19452: IFFALSE 19472
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19454: LD_EXP 21
19458: PPUSH
19459: LD_VAR 0 3
19463: PUSH
19464: LD_STRING Gladstone
19466: STR
19467: PPUSH
19468: CALL_OW 38
// if IsLive ( Kikuchi ) then
19472: LD_EXP 22
19476: PPUSH
19477: CALL_OW 300
19481: IFFALSE 19501
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19483: LD_EXP 22
19487: PPUSH
19488: LD_VAR 0 3
19492: PUSH
19493: LD_STRING Kikuchi
19495: STR
19496: PPUSH
19497: CALL_OW 38
// if IsLive ( Denis ) then
19501: LD_EXP 26
19505: PPUSH
19506: CALL_OW 300
19510: IFFALSE 19530
// SaveCharacters ( Denis , prefix & Denis ) ;
19512: LD_EXP 26
19516: PPUSH
19517: LD_VAR 0 3
19521: PUSH
19522: LD_STRING Denis
19524: STR
19525: PPUSH
19526: CALL_OW 38
// if IsLive ( Joan ) then
19530: LD_EXP 27
19534: PPUSH
19535: CALL_OW 300
19539: IFFALSE 19561
// SaveCharacters ( Joan , prefix & Joan ) else
19541: LD_EXP 27
19545: PPUSH
19546: LD_VAR 0 3
19550: PUSH
19551: LD_STRING Joan
19553: STR
19554: PPUSH
19555: CALL_OW 38
19559: GO 19568
// DeleteCharacters ( Joan ) ;
19561: LD_STRING Joan
19563: PPUSH
19564: CALL_OW 40
// if IsLive ( Khatam ) then
19568: LD_EXP 23
19572: PPUSH
19573: CALL_OW 300
19577: IFFALSE 19597
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19579: LD_EXP 23
19583: PPUSH
19584: LD_VAR 0 3
19588: PUSH
19589: LD_STRING Khatam
19591: STR
19592: PPUSH
19593: CALL_OW 38
// if IsLive ( Houten ) then
19597: LD_EXP 25
19601: PPUSH
19602: CALL_OW 300
19606: IFFALSE 19633
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
19608: LD_STRING enableBioCharacter(BIO_HOUT)
19610: PPUSH
19611: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
19615: LD_EXP 25
19619: PPUSH
19620: LD_VAR 0 3
19624: PUSH
19625: LD_STRING Houten
19627: STR
19628: PPUSH
19629: CALL_OW 38
// end ; if IsLive ( Mike ) then
19633: LD_EXP 24
19637: PPUSH
19638: CALL_OW 300
19642: IFFALSE 19662
// SaveCharacters ( Mike , prefix & Mike ) ;
19644: LD_EXP 24
19648: PPUSH
19649: LD_VAR 0 3
19653: PUSH
19654: LD_STRING Mike
19656: STR
19657: PPUSH
19658: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19662: LD_INT 22
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 21
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 23
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: PPUSH
19697: CALL_OW 69
19701: PUSH
19702: LD_EXP 14
19706: PUSH
19707: LD_EXP 15
19711: PUSH
19712: LD_EXP 16
19716: PUSH
19717: LD_EXP 17
19721: PUSH
19722: LD_EXP 18
19726: PUSH
19727: LD_EXP 19
19731: PUSH
19732: LD_EXP 20
19736: PUSH
19737: LD_EXP 21
19741: PUSH
19742: LD_EXP 22
19746: PUSH
19747: LD_EXP 26
19751: PUSH
19752: LD_EXP 27
19756: PUSH
19757: LD_EXP 25
19761: PUSH
19762: LD_EXP 23
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: DIFF
19782: PPUSH
19783: LD_STRING 08_other_survivors
19785: PPUSH
19786: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19790: LD_INT 15
19792: PPUSH
19793: CALL 7335 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19797: LD_EXP 10
19801: NOT
19802: PPUSH
19803: LD_STRING 08_SikorskiStatus
19805: PPUSH
19806: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
19810: LD_STRING enableBioCharacter(BIO_SIK)
19812: PPUSH
19813: CALL_OW 559
// YouWin ;
19817: CALL_OW 103
// end ; end_of_file
19821: PPOPN 3
19823: END
// export function SikorskiCounter ; begin
19824: LD_INT 0
19826: PPUSH
// repeat wait ( 0 0$1 ) ;
19827: LD_INT 35
19829: PPUSH
19830: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
19834: LD_ADDR_OWVAR 47
19838: PUSH
19839: LD_STRING #Am08-2
19841: PUSH
19842: LD_EXP 3
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
19851: LD_ADDR_EXP 3
19855: PUSH
19856: LD_EXP 3
19860: PUSH
19861: LD_INT 35
19863: MINUS
19864: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
19865: LD_EXP 3
19869: PUSH
19870: LD_INT 0
19872: EQUAL
19873: IFFALSE 19827
// display_strings := [ ] ;
19875: LD_ADDR_OWVAR 47
19879: PUSH
19880: EMPTY
19881: ST_TO_ADDR
// end ;
19882: LD_VAR 0 1
19886: RET
// export function SikorskiWaitCounter ; begin
19887: LD_INT 0
19889: PPUSH
// repeat wait ( 0 0$1 ) ;
19890: LD_INT 35
19892: PPUSH
19893: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
19897: LD_ADDR_OWVAR 47
19901: PUSH
19902: LD_STRING #Am08-1
19904: PUSH
19905: LD_EXP 4
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
19914: LD_ADDR_EXP 4
19918: PUSH
19919: LD_EXP 4
19923: PUSH
19924: LD_INT 35
19926: MINUS
19927: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
19928: LD_EXP 4
19932: PUSH
19933: LD_INT 0
19935: EQUAL
19936: IFFALSE 19890
// display_strings := [ ] ;
19938: LD_ADDR_OWVAR 47
19942: PUSH
19943: EMPTY
19944: ST_TO_ADDR
// end ; end_of_file
19945: LD_VAR 0 1
19949: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
19950: LD_EXP 3
19954: IFFALSE 19994
19956: GO 19958
19958: DISABLE
// begin enable ;
19959: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
19960: LD_INT 14
19962: PPUSH
19963: CALL_OW 435
19967: PUSH
19968: LD_INT 10
19970: LESS
19971: IFFALSE 19994
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
19973: LD_INT 1
19975: PPUSH
19976: LD_INT 5
19978: PPUSH
19979: CALL_OW 12
19983: PPUSH
19984: LD_INT 14
19986: PPUSH
19987: LD_INT 1
19989: PPUSH
19990: CALL_OW 55
// end ;
19994: END
// every 0 0$55 trigger sikorskiArriveCounter do
19995: LD_EXP 3
19999: IFFALSE 20039
20001: GO 20003
20003: DISABLE
// begin enable ;
20004: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20005: LD_INT 13
20007: PPUSH
20008: CALL_OW 435
20012: PUSH
20013: LD_INT 10
20015: LESS
20016: IFFALSE 20039
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20018: LD_INT 1
20020: PPUSH
20021: LD_INT 5
20023: PPUSH
20024: CALL_OW 12
20028: PPUSH
20029: LD_INT 13
20031: PPUSH
20032: LD_INT 1
20034: PPUSH
20035: CALL_OW 55
// end ; end_of_file
20039: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20040: LD_INT 0
20042: PPUSH
20043: PPUSH
// if not units then
20044: LD_VAR 0 1
20048: NOT
20049: IFFALSE 20053
// exit ;
20051: GO 20178
// result := false ;
20053: LD_ADDR_VAR 0 4
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20061: LD_ADDR_VAR 0 5
20065: PUSH
20066: LD_VAR 0 1
20070: PPUSH
20071: LD_INT 26
20073: PUSH
20074: LD_INT 1
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PPUSH
20081: CALL_OW 72
20085: ST_TO_ADDR
// if tmp then
20086: LD_VAR 0 5
20090: IFFALSE 20116
// result := Say ( tmp [ 1 ] , menDialog ) ;
20092: LD_ADDR_VAR 0 4
20096: PUSH
20097: LD_VAR 0 5
20101: PUSH
20102: LD_INT 1
20104: ARRAY
20105: PPUSH
20106: LD_VAR 0 2
20110: PPUSH
20111: CALL_OW 88
20115: ST_TO_ADDR
// if not result then
20116: LD_VAR 0 4
20120: NOT
20121: IFFALSE 20178
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20123: LD_ADDR_VAR 0 5
20127: PUSH
20128: LD_VAR 0 1
20132: PPUSH
20133: LD_INT 26
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PPUSH
20143: CALL_OW 72
20147: ST_TO_ADDR
// if tmp then
20148: LD_VAR 0 5
20152: IFFALSE 20178
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20154: LD_ADDR_VAR 0 4
20158: PUSH
20159: LD_VAR 0 5
20163: PUSH
20164: LD_INT 1
20166: ARRAY
20167: PPUSH
20168: LD_VAR 0 3
20172: PPUSH
20173: CALL_OW 88
20177: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20178: LD_VAR 0 4
20182: RET
// export globalGameSaveCounter ; every 0 0$1 do
20183: GO 20185
20185: DISABLE
// begin enable ;
20186: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20187: LD_STRING updateTimer(
20189: PUSH
20190: LD_OWVAR 1
20194: STR
20195: PUSH
20196: LD_STRING );
20198: STR
20199: PPUSH
20200: CALL_OW 559
// end ;
20204: END
// every 0 0$1 do
20205: GO 20207
20207: DISABLE
// begin globalGameSaveCounter := 0 ;
20208: LD_ADDR_EXP 37
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20216: LD_STRING setGameSaveCounter(0)
20218: PPUSH
20219: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20223: LD_STRING initStreamRollete();
20225: PPUSH
20226: CALL_OW 559
// InitStreamMode ;
20230: CALL 21556 0 0
// DefineStreamItems ( false ) ;
20234: LD_INT 0
20236: PPUSH
20237: CALL 22020 0 1
// end ;
20241: END
// export function SOS_MapStart ( ) ; begin
20242: LD_INT 0
20244: PPUSH
// if streamModeActive then
20245: LD_EXP 38
20249: IFFALSE 20258
// DefineStreamItems ( true ) ;
20251: LD_INT 1
20253: PPUSH
20254: CALL 22020 0 1
// UpdateLuaVariables ( ) ;
20258: CALL 20275 0 0
// UpdateFactoryWaypoints ( ) ;
20262: CALL 34889 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20266: CALL 35146 0 0
// end ;
20270: LD_VAR 0 1
20274: RET
// function UpdateLuaVariables ( ) ; begin
20275: LD_INT 0
20277: PPUSH
// if globalGameSaveCounter then
20278: LD_EXP 37
20282: IFFALSE 20316
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20284: LD_ADDR_EXP 37
20288: PUSH
20289: LD_EXP 37
20293: PPUSH
20294: CALL 79776 0 1
20298: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20299: LD_STRING setGameSaveCounter(
20301: PUSH
20302: LD_EXP 37
20306: STR
20307: PUSH
20308: LD_STRING )
20310: STR
20311: PPUSH
20312: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20316: LD_STRING setGameDifficulty(
20318: PUSH
20319: LD_OWVAR 67
20323: STR
20324: PUSH
20325: LD_STRING )
20327: STR
20328: PPUSH
20329: CALL_OW 559
// end ;
20333: LD_VAR 0 1
20337: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20338: LD_INT 0
20340: PPUSH
// if p2 = stream_mode then
20341: LD_VAR 0 2
20345: PUSH
20346: LD_INT 100
20348: EQUAL
20349: IFFALSE 21352
// begin if not StreamModeActive then
20351: LD_EXP 38
20355: NOT
20356: IFFALSE 20366
// StreamModeActive := true ;
20358: LD_ADDR_EXP 38
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// if p3 = 0 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 0
20373: EQUAL
20374: IFFALSE 20380
// InitStreamMode ;
20376: CALL 21556 0 0
// if p3 = 1 then
20380: LD_VAR 0 3
20384: PUSH
20385: LD_INT 1
20387: EQUAL
20388: IFFALSE 20398
// sRocket := true ;
20390: LD_ADDR_EXP 43
20394: PUSH
20395: LD_INT 1
20397: ST_TO_ADDR
// if p3 = 2 then
20398: LD_VAR 0 3
20402: PUSH
20403: LD_INT 2
20405: EQUAL
20406: IFFALSE 20416
// sSpeed := true ;
20408: LD_ADDR_EXP 42
20412: PUSH
20413: LD_INT 1
20415: ST_TO_ADDR
// if p3 = 3 then
20416: LD_VAR 0 3
20420: PUSH
20421: LD_INT 3
20423: EQUAL
20424: IFFALSE 20434
// sEngine := true ;
20426: LD_ADDR_EXP 44
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// if p3 = 4 then
20434: LD_VAR 0 3
20438: PUSH
20439: LD_INT 4
20441: EQUAL
20442: IFFALSE 20452
// sSpec := true ;
20444: LD_ADDR_EXP 41
20448: PUSH
20449: LD_INT 1
20451: ST_TO_ADDR
// if p3 = 5 then
20452: LD_VAR 0 3
20456: PUSH
20457: LD_INT 5
20459: EQUAL
20460: IFFALSE 20470
// sLevel := true ;
20462: LD_ADDR_EXP 45
20466: PUSH
20467: LD_INT 1
20469: ST_TO_ADDR
// if p3 = 6 then
20470: LD_VAR 0 3
20474: PUSH
20475: LD_INT 6
20477: EQUAL
20478: IFFALSE 20488
// sArmoury := true ;
20480: LD_ADDR_EXP 46
20484: PUSH
20485: LD_INT 1
20487: ST_TO_ADDR
// if p3 = 7 then
20488: LD_VAR 0 3
20492: PUSH
20493: LD_INT 7
20495: EQUAL
20496: IFFALSE 20506
// sRadar := true ;
20498: LD_ADDR_EXP 47
20502: PUSH
20503: LD_INT 1
20505: ST_TO_ADDR
// if p3 = 8 then
20506: LD_VAR 0 3
20510: PUSH
20511: LD_INT 8
20513: EQUAL
20514: IFFALSE 20524
// sBunker := true ;
20516: LD_ADDR_EXP 48
20520: PUSH
20521: LD_INT 1
20523: ST_TO_ADDR
// if p3 = 9 then
20524: LD_VAR 0 3
20528: PUSH
20529: LD_INT 9
20531: EQUAL
20532: IFFALSE 20542
// sHack := true ;
20534: LD_ADDR_EXP 49
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// if p3 = 10 then
20542: LD_VAR 0 3
20546: PUSH
20547: LD_INT 10
20549: EQUAL
20550: IFFALSE 20560
// sFire := true ;
20552: LD_ADDR_EXP 50
20556: PUSH
20557: LD_INT 1
20559: ST_TO_ADDR
// if p3 = 11 then
20560: LD_VAR 0 3
20564: PUSH
20565: LD_INT 11
20567: EQUAL
20568: IFFALSE 20578
// sRefresh := true ;
20570: LD_ADDR_EXP 51
20574: PUSH
20575: LD_INT 1
20577: ST_TO_ADDR
// if p3 = 12 then
20578: LD_VAR 0 3
20582: PUSH
20583: LD_INT 12
20585: EQUAL
20586: IFFALSE 20596
// sExp := true ;
20588: LD_ADDR_EXP 52
20592: PUSH
20593: LD_INT 1
20595: ST_TO_ADDR
// if p3 = 13 then
20596: LD_VAR 0 3
20600: PUSH
20601: LD_INT 13
20603: EQUAL
20604: IFFALSE 20614
// sDepot := true ;
20606: LD_ADDR_EXP 53
20610: PUSH
20611: LD_INT 1
20613: ST_TO_ADDR
// if p3 = 14 then
20614: LD_VAR 0 3
20618: PUSH
20619: LD_INT 14
20621: EQUAL
20622: IFFALSE 20632
// sFlag := true ;
20624: LD_ADDR_EXP 54
20628: PUSH
20629: LD_INT 1
20631: ST_TO_ADDR
// if p3 = 15 then
20632: LD_VAR 0 3
20636: PUSH
20637: LD_INT 15
20639: EQUAL
20640: IFFALSE 20650
// sKamikadze := true ;
20642: LD_ADDR_EXP 62
20646: PUSH
20647: LD_INT 1
20649: ST_TO_ADDR
// if p3 = 16 then
20650: LD_VAR 0 3
20654: PUSH
20655: LD_INT 16
20657: EQUAL
20658: IFFALSE 20668
// sTroll := true ;
20660: LD_ADDR_EXP 63
20664: PUSH
20665: LD_INT 1
20667: ST_TO_ADDR
// if p3 = 17 then
20668: LD_VAR 0 3
20672: PUSH
20673: LD_INT 17
20675: EQUAL
20676: IFFALSE 20686
// sSlow := true ;
20678: LD_ADDR_EXP 64
20682: PUSH
20683: LD_INT 1
20685: ST_TO_ADDR
// if p3 = 18 then
20686: LD_VAR 0 3
20690: PUSH
20691: LD_INT 18
20693: EQUAL
20694: IFFALSE 20704
// sLack := true ;
20696: LD_ADDR_EXP 65
20700: PUSH
20701: LD_INT 1
20703: ST_TO_ADDR
// if p3 = 19 then
20704: LD_VAR 0 3
20708: PUSH
20709: LD_INT 19
20711: EQUAL
20712: IFFALSE 20722
// sTank := true ;
20714: LD_ADDR_EXP 67
20718: PUSH
20719: LD_INT 1
20721: ST_TO_ADDR
// if p3 = 20 then
20722: LD_VAR 0 3
20726: PUSH
20727: LD_INT 20
20729: EQUAL
20730: IFFALSE 20740
// sRemote := true ;
20732: LD_ADDR_EXP 68
20736: PUSH
20737: LD_INT 1
20739: ST_TO_ADDR
// if p3 = 21 then
20740: LD_VAR 0 3
20744: PUSH
20745: LD_INT 21
20747: EQUAL
20748: IFFALSE 20758
// sPowell := true ;
20750: LD_ADDR_EXP 69
20754: PUSH
20755: LD_INT 1
20757: ST_TO_ADDR
// if p3 = 22 then
20758: LD_VAR 0 3
20762: PUSH
20763: LD_INT 22
20765: EQUAL
20766: IFFALSE 20776
// sTeleport := true ;
20768: LD_ADDR_EXP 72
20772: PUSH
20773: LD_INT 1
20775: ST_TO_ADDR
// if p3 = 23 then
20776: LD_VAR 0 3
20780: PUSH
20781: LD_INT 23
20783: EQUAL
20784: IFFALSE 20794
// sOilTower := true ;
20786: LD_ADDR_EXP 74
20790: PUSH
20791: LD_INT 1
20793: ST_TO_ADDR
// if p3 = 24 then
20794: LD_VAR 0 3
20798: PUSH
20799: LD_INT 24
20801: EQUAL
20802: IFFALSE 20812
// sShovel := true ;
20804: LD_ADDR_EXP 75
20808: PUSH
20809: LD_INT 1
20811: ST_TO_ADDR
// if p3 = 25 then
20812: LD_VAR 0 3
20816: PUSH
20817: LD_INT 25
20819: EQUAL
20820: IFFALSE 20830
// sSheik := true ;
20822: LD_ADDR_EXP 76
20826: PUSH
20827: LD_INT 1
20829: ST_TO_ADDR
// if p3 = 26 then
20830: LD_VAR 0 3
20834: PUSH
20835: LD_INT 26
20837: EQUAL
20838: IFFALSE 20848
// sEarthquake := true ;
20840: LD_ADDR_EXP 78
20844: PUSH
20845: LD_INT 1
20847: ST_TO_ADDR
// if p3 = 27 then
20848: LD_VAR 0 3
20852: PUSH
20853: LD_INT 27
20855: EQUAL
20856: IFFALSE 20866
// sAI := true ;
20858: LD_ADDR_EXP 79
20862: PUSH
20863: LD_INT 1
20865: ST_TO_ADDR
// if p3 = 28 then
20866: LD_VAR 0 3
20870: PUSH
20871: LD_INT 28
20873: EQUAL
20874: IFFALSE 20884
// sCargo := true ;
20876: LD_ADDR_EXP 82
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// if p3 = 29 then
20884: LD_VAR 0 3
20888: PUSH
20889: LD_INT 29
20891: EQUAL
20892: IFFALSE 20902
// sDLaser := true ;
20894: LD_ADDR_EXP 83
20898: PUSH
20899: LD_INT 1
20901: ST_TO_ADDR
// if p3 = 30 then
20902: LD_VAR 0 3
20906: PUSH
20907: LD_INT 30
20909: EQUAL
20910: IFFALSE 20920
// sExchange := true ;
20912: LD_ADDR_EXP 84
20916: PUSH
20917: LD_INT 1
20919: ST_TO_ADDR
// if p3 = 31 then
20920: LD_VAR 0 3
20924: PUSH
20925: LD_INT 31
20927: EQUAL
20928: IFFALSE 20938
// sFac := true ;
20930: LD_ADDR_EXP 85
20934: PUSH
20935: LD_INT 1
20937: ST_TO_ADDR
// if p3 = 32 then
20938: LD_VAR 0 3
20942: PUSH
20943: LD_INT 32
20945: EQUAL
20946: IFFALSE 20956
// sPower := true ;
20948: LD_ADDR_EXP 86
20952: PUSH
20953: LD_INT 1
20955: ST_TO_ADDR
// if p3 = 33 then
20956: LD_VAR 0 3
20960: PUSH
20961: LD_INT 33
20963: EQUAL
20964: IFFALSE 20974
// sRandom := true ;
20966: LD_ADDR_EXP 87
20970: PUSH
20971: LD_INT 1
20973: ST_TO_ADDR
// if p3 = 34 then
20974: LD_VAR 0 3
20978: PUSH
20979: LD_INT 34
20981: EQUAL
20982: IFFALSE 20992
// sShield := true ;
20984: LD_ADDR_EXP 88
20988: PUSH
20989: LD_INT 1
20991: ST_TO_ADDR
// if p3 = 35 then
20992: LD_VAR 0 3
20996: PUSH
20997: LD_INT 35
20999: EQUAL
21000: IFFALSE 21010
// sTime := true ;
21002: LD_ADDR_EXP 89
21006: PUSH
21007: LD_INT 1
21009: ST_TO_ADDR
// if p3 = 36 then
21010: LD_VAR 0 3
21014: PUSH
21015: LD_INT 36
21017: EQUAL
21018: IFFALSE 21028
// sTools := true ;
21020: LD_ADDR_EXP 90
21024: PUSH
21025: LD_INT 1
21027: ST_TO_ADDR
// if p3 = 101 then
21028: LD_VAR 0 3
21032: PUSH
21033: LD_INT 101
21035: EQUAL
21036: IFFALSE 21046
// sSold := true ;
21038: LD_ADDR_EXP 55
21042: PUSH
21043: LD_INT 1
21045: ST_TO_ADDR
// if p3 = 102 then
21046: LD_VAR 0 3
21050: PUSH
21051: LD_INT 102
21053: EQUAL
21054: IFFALSE 21064
// sDiff := true ;
21056: LD_ADDR_EXP 56
21060: PUSH
21061: LD_INT 1
21063: ST_TO_ADDR
// if p3 = 103 then
21064: LD_VAR 0 3
21068: PUSH
21069: LD_INT 103
21071: EQUAL
21072: IFFALSE 21082
// sFog := true ;
21074: LD_ADDR_EXP 59
21078: PUSH
21079: LD_INT 1
21081: ST_TO_ADDR
// if p3 = 104 then
21082: LD_VAR 0 3
21086: PUSH
21087: LD_INT 104
21089: EQUAL
21090: IFFALSE 21100
// sReset := true ;
21092: LD_ADDR_EXP 60
21096: PUSH
21097: LD_INT 1
21099: ST_TO_ADDR
// if p3 = 105 then
21100: LD_VAR 0 3
21104: PUSH
21105: LD_INT 105
21107: EQUAL
21108: IFFALSE 21118
// sSun := true ;
21110: LD_ADDR_EXP 61
21114: PUSH
21115: LD_INT 1
21117: ST_TO_ADDR
// if p3 = 106 then
21118: LD_VAR 0 3
21122: PUSH
21123: LD_INT 106
21125: EQUAL
21126: IFFALSE 21136
// sTiger := true ;
21128: LD_ADDR_EXP 57
21132: PUSH
21133: LD_INT 1
21135: ST_TO_ADDR
// if p3 = 107 then
21136: LD_VAR 0 3
21140: PUSH
21141: LD_INT 107
21143: EQUAL
21144: IFFALSE 21154
// sBomb := true ;
21146: LD_ADDR_EXP 58
21150: PUSH
21151: LD_INT 1
21153: ST_TO_ADDR
// if p3 = 108 then
21154: LD_VAR 0 3
21158: PUSH
21159: LD_INT 108
21161: EQUAL
21162: IFFALSE 21172
// sWound := true ;
21164: LD_ADDR_EXP 66
21168: PUSH
21169: LD_INT 1
21171: ST_TO_ADDR
// if p3 = 109 then
21172: LD_VAR 0 3
21176: PUSH
21177: LD_INT 109
21179: EQUAL
21180: IFFALSE 21190
// sBetray := true ;
21182: LD_ADDR_EXP 70
21186: PUSH
21187: LD_INT 1
21189: ST_TO_ADDR
// if p3 = 110 then
21190: LD_VAR 0 3
21194: PUSH
21195: LD_INT 110
21197: EQUAL
21198: IFFALSE 21208
// sContamin := true ;
21200: LD_ADDR_EXP 71
21204: PUSH
21205: LD_INT 1
21207: ST_TO_ADDR
// if p3 = 111 then
21208: LD_VAR 0 3
21212: PUSH
21213: LD_INT 111
21215: EQUAL
21216: IFFALSE 21226
// sOil := true ;
21218: LD_ADDR_EXP 73
21222: PUSH
21223: LD_INT 1
21225: ST_TO_ADDR
// if p3 = 112 then
21226: LD_VAR 0 3
21230: PUSH
21231: LD_INT 112
21233: EQUAL
21234: IFFALSE 21244
// sStu := true ;
21236: LD_ADDR_EXP 77
21240: PUSH
21241: LD_INT 1
21243: ST_TO_ADDR
// if p3 = 113 then
21244: LD_VAR 0 3
21248: PUSH
21249: LD_INT 113
21251: EQUAL
21252: IFFALSE 21262
// sBazooka := true ;
21254: LD_ADDR_EXP 80
21258: PUSH
21259: LD_INT 1
21261: ST_TO_ADDR
// if p3 = 114 then
21262: LD_VAR 0 3
21266: PUSH
21267: LD_INT 114
21269: EQUAL
21270: IFFALSE 21280
// sMortar := true ;
21272: LD_ADDR_EXP 81
21276: PUSH
21277: LD_INT 1
21279: ST_TO_ADDR
// if p3 = 115 then
21280: LD_VAR 0 3
21284: PUSH
21285: LD_INT 115
21287: EQUAL
21288: IFFALSE 21298
// sRanger := true ;
21290: LD_ADDR_EXP 91
21294: PUSH
21295: LD_INT 1
21297: ST_TO_ADDR
// if p3 = 116 then
21298: LD_VAR 0 3
21302: PUSH
21303: LD_INT 116
21305: EQUAL
21306: IFFALSE 21316
// sComputer := true ;
21308: LD_ADDR_EXP 92
21312: PUSH
21313: LD_INT 1
21315: ST_TO_ADDR
// if p3 = 117 then
21316: LD_VAR 0 3
21320: PUSH
21321: LD_INT 117
21323: EQUAL
21324: IFFALSE 21334
// s30 := true ;
21326: LD_ADDR_EXP 93
21330: PUSH
21331: LD_INT 1
21333: ST_TO_ADDR
// if p3 = 118 then
21334: LD_VAR 0 3
21338: PUSH
21339: LD_INT 118
21341: EQUAL
21342: IFFALSE 21352
// s60 := true ;
21344: LD_ADDR_EXP 94
21348: PUSH
21349: LD_INT 1
21351: ST_TO_ADDR
// end ; if p2 = hack_mode then
21352: LD_VAR 0 2
21356: PUSH
21357: LD_INT 101
21359: EQUAL
21360: IFFALSE 21488
// begin case p3 of 1 :
21362: LD_VAR 0 3
21366: PUSH
21367: LD_INT 1
21369: DOUBLE
21370: EQUAL
21371: IFTRUE 21375
21373: GO 21382
21375: POP
// hHackUnlimitedResources ; 2 :
21376: CALL 33635 0 0
21380: GO 21488
21382: LD_INT 2
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21397
21390: POP
// hHackSetLevel10 ; 3 :
21391: CALL 33768 0 0
21395: GO 21488
21397: LD_INT 3
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21412
21405: POP
// hHackSetLevel10YourUnits ; 4 :
21406: CALL 33853 0 0
21410: GO 21488
21412: LD_INT 4
21414: DOUBLE
21415: EQUAL
21416: IFTRUE 21420
21418: GO 21427
21420: POP
// hHackInvincible ; 5 :
21421: CALL 34301 0 0
21425: GO 21488
21427: LD_INT 5
21429: DOUBLE
21430: EQUAL
21431: IFTRUE 21435
21433: GO 21442
21435: POP
// hHackInvisible ; 6 :
21436: CALL 34412 0 0
21440: GO 21488
21442: LD_INT 6
21444: DOUBLE
21445: EQUAL
21446: IFTRUE 21450
21448: GO 21457
21450: POP
// hHackChangeYourSide ; 7 :
21451: CALL 34469 0 0
21455: GO 21488
21457: LD_INT 7
21459: DOUBLE
21460: EQUAL
21461: IFTRUE 21465
21463: GO 21472
21465: POP
// hHackChangeUnitSide ; 8 :
21466: CALL 34511 0 0
21470: GO 21488
21472: LD_INT 8
21474: DOUBLE
21475: EQUAL
21476: IFTRUE 21480
21478: GO 21487
21480: POP
// hHackFog ; end ;
21481: CALL 34612 0 0
21485: GO 21488
21487: POP
// end ; if p2 = game_save_mode then
21488: LD_VAR 0 2
21492: PUSH
21493: LD_INT 102
21495: EQUAL
21496: IFFALSE 21551
// begin if p3 = 1 then
21498: LD_VAR 0 3
21502: PUSH
21503: LD_INT 1
21505: EQUAL
21506: IFFALSE 21518
// globalGameSaveCounter := p4 ;
21508: LD_ADDR_EXP 37
21512: PUSH
21513: LD_VAR 0 4
21517: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21518: LD_VAR 0 3
21522: PUSH
21523: LD_INT 2
21525: EQUAL
21526: PUSH
21527: LD_EXP 37
21531: AND
21532: IFFALSE 21551
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21534: LD_STRING setGameSaveCounter(
21536: PUSH
21537: LD_EXP 37
21541: STR
21542: PUSH
21543: LD_STRING )
21545: STR
21546: PPUSH
21547: CALL_OW 559
// end ; end ;
21551: LD_VAR 0 7
21555: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21556: LD_INT 0
21558: PPUSH
// streamModeActive := false ;
21559: LD_ADDR_EXP 38
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// normalCounter := 36 ;
21567: LD_ADDR_EXP 39
21571: PUSH
21572: LD_INT 36
21574: ST_TO_ADDR
// hardcoreCounter := 18 ;
21575: LD_ADDR_EXP 40
21579: PUSH
21580: LD_INT 18
21582: ST_TO_ADDR
// sRocket := false ;
21583: LD_ADDR_EXP 43
21587: PUSH
21588: LD_INT 0
21590: ST_TO_ADDR
// sSpeed := false ;
21591: LD_ADDR_EXP 42
21595: PUSH
21596: LD_INT 0
21598: ST_TO_ADDR
// sEngine := false ;
21599: LD_ADDR_EXP 44
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
// sSpec := false ;
21607: LD_ADDR_EXP 41
21611: PUSH
21612: LD_INT 0
21614: ST_TO_ADDR
// sLevel := false ;
21615: LD_ADDR_EXP 45
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// sArmoury := false ;
21623: LD_ADDR_EXP 46
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// sRadar := false ;
21631: LD_ADDR_EXP 47
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
// sBunker := false ;
21639: LD_ADDR_EXP 48
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
// sHack := false ;
21647: LD_ADDR_EXP 49
21651: PUSH
21652: LD_INT 0
21654: ST_TO_ADDR
// sFire := false ;
21655: LD_ADDR_EXP 50
21659: PUSH
21660: LD_INT 0
21662: ST_TO_ADDR
// sRefresh := false ;
21663: LD_ADDR_EXP 51
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// sExp := false ;
21671: LD_ADDR_EXP 52
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// sDepot := false ;
21679: LD_ADDR_EXP 53
21683: PUSH
21684: LD_INT 0
21686: ST_TO_ADDR
// sFlag := false ;
21687: LD_ADDR_EXP 54
21691: PUSH
21692: LD_INT 0
21694: ST_TO_ADDR
// sKamikadze := false ;
21695: LD_ADDR_EXP 62
21699: PUSH
21700: LD_INT 0
21702: ST_TO_ADDR
// sTroll := false ;
21703: LD_ADDR_EXP 63
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// sSlow := false ;
21711: LD_ADDR_EXP 64
21715: PUSH
21716: LD_INT 0
21718: ST_TO_ADDR
// sLack := false ;
21719: LD_ADDR_EXP 65
21723: PUSH
21724: LD_INT 0
21726: ST_TO_ADDR
// sTank := false ;
21727: LD_ADDR_EXP 67
21731: PUSH
21732: LD_INT 0
21734: ST_TO_ADDR
// sRemote := false ;
21735: LD_ADDR_EXP 68
21739: PUSH
21740: LD_INT 0
21742: ST_TO_ADDR
// sPowell := false ;
21743: LD_ADDR_EXP 69
21747: PUSH
21748: LD_INT 0
21750: ST_TO_ADDR
// sTeleport := false ;
21751: LD_ADDR_EXP 72
21755: PUSH
21756: LD_INT 0
21758: ST_TO_ADDR
// sOilTower := false ;
21759: LD_ADDR_EXP 74
21763: PUSH
21764: LD_INT 0
21766: ST_TO_ADDR
// sShovel := false ;
21767: LD_ADDR_EXP 75
21771: PUSH
21772: LD_INT 0
21774: ST_TO_ADDR
// sSheik := false ;
21775: LD_ADDR_EXP 76
21779: PUSH
21780: LD_INT 0
21782: ST_TO_ADDR
// sEarthquake := false ;
21783: LD_ADDR_EXP 78
21787: PUSH
21788: LD_INT 0
21790: ST_TO_ADDR
// sAI := false ;
21791: LD_ADDR_EXP 79
21795: PUSH
21796: LD_INT 0
21798: ST_TO_ADDR
// sCargo := false ;
21799: LD_ADDR_EXP 82
21803: PUSH
21804: LD_INT 0
21806: ST_TO_ADDR
// sDLaser := false ;
21807: LD_ADDR_EXP 83
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
// sExchange := false ;
21815: LD_ADDR_EXP 84
21819: PUSH
21820: LD_INT 0
21822: ST_TO_ADDR
// sFac := false ;
21823: LD_ADDR_EXP 85
21827: PUSH
21828: LD_INT 0
21830: ST_TO_ADDR
// sPower := false ;
21831: LD_ADDR_EXP 86
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
// sRandom := false ;
21839: LD_ADDR_EXP 87
21843: PUSH
21844: LD_INT 0
21846: ST_TO_ADDR
// sShield := false ;
21847: LD_ADDR_EXP 88
21851: PUSH
21852: LD_INT 0
21854: ST_TO_ADDR
// sTime := false ;
21855: LD_ADDR_EXP 89
21859: PUSH
21860: LD_INT 0
21862: ST_TO_ADDR
// sTools := false ;
21863: LD_ADDR_EXP 90
21867: PUSH
21868: LD_INT 0
21870: ST_TO_ADDR
// sSold := false ;
21871: LD_ADDR_EXP 55
21875: PUSH
21876: LD_INT 0
21878: ST_TO_ADDR
// sDiff := false ;
21879: LD_ADDR_EXP 56
21883: PUSH
21884: LD_INT 0
21886: ST_TO_ADDR
// sFog := false ;
21887: LD_ADDR_EXP 59
21891: PUSH
21892: LD_INT 0
21894: ST_TO_ADDR
// sReset := false ;
21895: LD_ADDR_EXP 60
21899: PUSH
21900: LD_INT 0
21902: ST_TO_ADDR
// sSun := false ;
21903: LD_ADDR_EXP 61
21907: PUSH
21908: LD_INT 0
21910: ST_TO_ADDR
// sTiger := false ;
21911: LD_ADDR_EXP 57
21915: PUSH
21916: LD_INT 0
21918: ST_TO_ADDR
// sBomb := false ;
21919: LD_ADDR_EXP 58
21923: PUSH
21924: LD_INT 0
21926: ST_TO_ADDR
// sWound := false ;
21927: LD_ADDR_EXP 66
21931: PUSH
21932: LD_INT 0
21934: ST_TO_ADDR
// sBetray := false ;
21935: LD_ADDR_EXP 70
21939: PUSH
21940: LD_INT 0
21942: ST_TO_ADDR
// sContamin := false ;
21943: LD_ADDR_EXP 71
21947: PUSH
21948: LD_INT 0
21950: ST_TO_ADDR
// sOil := false ;
21951: LD_ADDR_EXP 73
21955: PUSH
21956: LD_INT 0
21958: ST_TO_ADDR
// sStu := false ;
21959: LD_ADDR_EXP 77
21963: PUSH
21964: LD_INT 0
21966: ST_TO_ADDR
// sBazooka := false ;
21967: LD_ADDR_EXP 80
21971: PUSH
21972: LD_INT 0
21974: ST_TO_ADDR
// sMortar := false ;
21975: LD_ADDR_EXP 81
21979: PUSH
21980: LD_INT 0
21982: ST_TO_ADDR
// sRanger := false ;
21983: LD_ADDR_EXP 91
21987: PUSH
21988: LD_INT 0
21990: ST_TO_ADDR
// sComputer := false ;
21991: LD_ADDR_EXP 92
21995: PUSH
21996: LD_INT 0
21998: ST_TO_ADDR
// s30 := false ;
21999: LD_ADDR_EXP 93
22003: PUSH
22004: LD_INT 0
22006: ST_TO_ADDR
// s60 := false ;
22007: LD_ADDR_EXP 94
22011: PUSH
22012: LD_INT 0
22014: ST_TO_ADDR
// end ;
22015: LD_VAR 0 1
22019: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22020: LD_INT 0
22022: PPUSH
22023: PPUSH
22024: PPUSH
22025: PPUSH
22026: PPUSH
22027: PPUSH
22028: PPUSH
// result := [ ] ;
22029: LD_ADDR_VAR 0 2
22033: PUSH
22034: EMPTY
22035: ST_TO_ADDR
// if campaign_id = 1 then
22036: LD_OWVAR 69
22040: PUSH
22041: LD_INT 1
22043: EQUAL
22044: IFFALSE 25210
// begin case mission_number of 1 :
22046: LD_OWVAR 70
22050: PUSH
22051: LD_INT 1
22053: DOUBLE
22054: EQUAL
22055: IFTRUE 22059
22057: GO 22135
22059: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22060: LD_ADDR_VAR 0 2
22064: PUSH
22065: LD_INT 2
22067: PUSH
22068: LD_INT 4
22070: PUSH
22071: LD_INT 11
22073: PUSH
22074: LD_INT 12
22076: PUSH
22077: LD_INT 15
22079: PUSH
22080: LD_INT 16
22082: PUSH
22083: LD_INT 22
22085: PUSH
22086: LD_INT 23
22088: PUSH
22089: LD_INT 26
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 101
22105: PUSH
22106: LD_INT 102
22108: PUSH
22109: LD_INT 106
22111: PUSH
22112: LD_INT 116
22114: PUSH
22115: LD_INT 117
22117: PUSH
22118: LD_INT 118
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: ST_TO_ADDR
22133: GO 25208
22135: LD_INT 2
22137: DOUBLE
22138: EQUAL
22139: IFTRUE 22143
22141: GO 22227
22143: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22144: LD_ADDR_VAR 0 2
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: LD_INT 4
22154: PUSH
22155: LD_INT 11
22157: PUSH
22158: LD_INT 12
22160: PUSH
22161: LD_INT 15
22163: PUSH
22164: LD_INT 16
22166: PUSH
22167: LD_INT 22
22169: PUSH
22170: LD_INT 23
22172: PUSH
22173: LD_INT 26
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 101
22189: PUSH
22190: LD_INT 102
22192: PUSH
22193: LD_INT 105
22195: PUSH
22196: LD_INT 106
22198: PUSH
22199: LD_INT 108
22201: PUSH
22202: LD_INT 116
22204: PUSH
22205: LD_INT 117
22207: PUSH
22208: LD_INT 118
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: ST_TO_ADDR
22225: GO 25208
22227: LD_INT 3
22229: DOUBLE
22230: EQUAL
22231: IFTRUE 22235
22233: GO 22323
22235: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22236: LD_ADDR_VAR 0 2
22240: PUSH
22241: LD_INT 2
22243: PUSH
22244: LD_INT 4
22246: PUSH
22247: LD_INT 5
22249: PUSH
22250: LD_INT 11
22252: PUSH
22253: LD_INT 12
22255: PUSH
22256: LD_INT 15
22258: PUSH
22259: LD_INT 16
22261: PUSH
22262: LD_INT 22
22264: PUSH
22265: LD_INT 26
22267: PUSH
22268: LD_INT 36
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 101
22285: PUSH
22286: LD_INT 102
22288: PUSH
22289: LD_INT 105
22291: PUSH
22292: LD_INT 106
22294: PUSH
22295: LD_INT 108
22297: PUSH
22298: LD_INT 116
22300: PUSH
22301: LD_INT 117
22303: PUSH
22304: LD_INT 118
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: ST_TO_ADDR
22321: GO 25208
22323: LD_INT 4
22325: DOUBLE
22326: EQUAL
22327: IFTRUE 22331
22329: GO 22427
22331: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22332: LD_ADDR_VAR 0 2
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: LD_INT 4
22342: PUSH
22343: LD_INT 5
22345: PUSH
22346: LD_INT 8
22348: PUSH
22349: LD_INT 11
22351: PUSH
22352: LD_INT 12
22354: PUSH
22355: LD_INT 15
22357: PUSH
22358: LD_INT 16
22360: PUSH
22361: LD_INT 22
22363: PUSH
22364: LD_INT 23
22366: PUSH
22367: LD_INT 26
22369: PUSH
22370: LD_INT 36
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 101
22389: PUSH
22390: LD_INT 102
22392: PUSH
22393: LD_INT 105
22395: PUSH
22396: LD_INT 106
22398: PUSH
22399: LD_INT 108
22401: PUSH
22402: LD_INT 116
22404: PUSH
22405: LD_INT 117
22407: PUSH
22408: LD_INT 118
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: ST_TO_ADDR
22425: GO 25208
22427: LD_INT 5
22429: DOUBLE
22430: EQUAL
22431: IFTRUE 22435
22433: GO 22547
22435: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22436: LD_ADDR_VAR 0 2
22440: PUSH
22441: LD_INT 2
22443: PUSH
22444: LD_INT 4
22446: PUSH
22447: LD_INT 5
22449: PUSH
22450: LD_INT 6
22452: PUSH
22453: LD_INT 8
22455: PUSH
22456: LD_INT 11
22458: PUSH
22459: LD_INT 12
22461: PUSH
22462: LD_INT 15
22464: PUSH
22465: LD_INT 16
22467: PUSH
22468: LD_INT 22
22470: PUSH
22471: LD_INT 23
22473: PUSH
22474: LD_INT 25
22476: PUSH
22477: LD_INT 26
22479: PUSH
22480: LD_INT 36
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 101
22501: PUSH
22502: LD_INT 102
22504: PUSH
22505: LD_INT 105
22507: PUSH
22508: LD_INT 106
22510: PUSH
22511: LD_INT 108
22513: PUSH
22514: LD_INT 109
22516: PUSH
22517: LD_INT 112
22519: PUSH
22520: LD_INT 116
22522: PUSH
22523: LD_INT 117
22525: PUSH
22526: LD_INT 118
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: ST_TO_ADDR
22545: GO 25208
22547: LD_INT 6
22549: DOUBLE
22550: EQUAL
22551: IFTRUE 22555
22553: GO 22687
22555: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22556: LD_ADDR_VAR 0 2
22560: PUSH
22561: LD_INT 2
22563: PUSH
22564: LD_INT 4
22566: PUSH
22567: LD_INT 5
22569: PUSH
22570: LD_INT 6
22572: PUSH
22573: LD_INT 8
22575: PUSH
22576: LD_INT 11
22578: PUSH
22579: LD_INT 12
22581: PUSH
22582: LD_INT 15
22584: PUSH
22585: LD_INT 16
22587: PUSH
22588: LD_INT 20
22590: PUSH
22591: LD_INT 21
22593: PUSH
22594: LD_INT 22
22596: PUSH
22597: LD_INT 23
22599: PUSH
22600: LD_INT 25
22602: PUSH
22603: LD_INT 26
22605: PUSH
22606: LD_INT 30
22608: PUSH
22609: LD_INT 31
22611: PUSH
22612: LD_INT 32
22614: PUSH
22615: LD_INT 36
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 101
22641: PUSH
22642: LD_INT 102
22644: PUSH
22645: LD_INT 105
22647: PUSH
22648: LD_INT 106
22650: PUSH
22651: LD_INT 108
22653: PUSH
22654: LD_INT 109
22656: PUSH
22657: LD_INT 112
22659: PUSH
22660: LD_INT 116
22662: PUSH
22663: LD_INT 117
22665: PUSH
22666: LD_INT 118
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: ST_TO_ADDR
22685: GO 25208
22687: LD_INT 7
22689: DOUBLE
22690: EQUAL
22691: IFTRUE 22695
22693: GO 22807
22695: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22696: LD_ADDR_VAR 0 2
22700: PUSH
22701: LD_INT 2
22703: PUSH
22704: LD_INT 4
22706: PUSH
22707: LD_INT 5
22709: PUSH
22710: LD_INT 7
22712: PUSH
22713: LD_INT 11
22715: PUSH
22716: LD_INT 12
22718: PUSH
22719: LD_INT 15
22721: PUSH
22722: LD_INT 16
22724: PUSH
22725: LD_INT 20
22727: PUSH
22728: LD_INT 21
22730: PUSH
22731: LD_INT 22
22733: PUSH
22734: LD_INT 23
22736: PUSH
22737: LD_INT 25
22739: PUSH
22740: LD_INT 26
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 101
22761: PUSH
22762: LD_INT 102
22764: PUSH
22765: LD_INT 103
22767: PUSH
22768: LD_INT 105
22770: PUSH
22771: LD_INT 106
22773: PUSH
22774: LD_INT 108
22776: PUSH
22777: LD_INT 112
22779: PUSH
22780: LD_INT 116
22782: PUSH
22783: LD_INT 117
22785: PUSH
22786: LD_INT 118
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: ST_TO_ADDR
22805: GO 25208
22807: LD_INT 8
22809: DOUBLE
22810: EQUAL
22811: IFTRUE 22815
22813: GO 22955
22815: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22816: LD_ADDR_VAR 0 2
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: LD_INT 4
22826: PUSH
22827: LD_INT 5
22829: PUSH
22830: LD_INT 6
22832: PUSH
22833: LD_INT 7
22835: PUSH
22836: LD_INT 8
22838: PUSH
22839: LD_INT 11
22841: PUSH
22842: LD_INT 12
22844: PUSH
22845: LD_INT 15
22847: PUSH
22848: LD_INT 16
22850: PUSH
22851: LD_INT 20
22853: PUSH
22854: LD_INT 21
22856: PUSH
22857: LD_INT 22
22859: PUSH
22860: LD_INT 23
22862: PUSH
22863: LD_INT 25
22865: PUSH
22866: LD_INT 26
22868: PUSH
22869: LD_INT 30
22871: PUSH
22872: LD_INT 31
22874: PUSH
22875: LD_INT 32
22877: PUSH
22878: LD_INT 36
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 101
22905: PUSH
22906: LD_INT 102
22908: PUSH
22909: LD_INT 103
22911: PUSH
22912: LD_INT 105
22914: PUSH
22915: LD_INT 106
22917: PUSH
22918: LD_INT 108
22920: PUSH
22921: LD_INT 109
22923: PUSH
22924: LD_INT 112
22926: PUSH
22927: LD_INT 116
22929: PUSH
22930: LD_INT 117
22932: PUSH
22933: LD_INT 118
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: ST_TO_ADDR
22953: GO 25208
22955: LD_INT 9
22957: DOUBLE
22958: EQUAL
22959: IFTRUE 22963
22961: GO 23111
22963: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22964: LD_ADDR_VAR 0 2
22968: PUSH
22969: LD_INT 2
22971: PUSH
22972: LD_INT 4
22974: PUSH
22975: LD_INT 5
22977: PUSH
22978: LD_INT 6
22980: PUSH
22981: LD_INT 7
22983: PUSH
22984: LD_INT 8
22986: PUSH
22987: LD_INT 11
22989: PUSH
22990: LD_INT 12
22992: PUSH
22993: LD_INT 15
22995: PUSH
22996: LD_INT 16
22998: PUSH
22999: LD_INT 20
23001: PUSH
23002: LD_INT 21
23004: PUSH
23005: LD_INT 22
23007: PUSH
23008: LD_INT 23
23010: PUSH
23011: LD_INT 25
23013: PUSH
23014: LD_INT 26
23016: PUSH
23017: LD_INT 28
23019: PUSH
23020: LD_INT 30
23022: PUSH
23023: LD_INT 31
23025: PUSH
23026: LD_INT 32
23028: PUSH
23029: LD_INT 36
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 101
23057: PUSH
23058: LD_INT 102
23060: PUSH
23061: LD_INT 103
23063: PUSH
23064: LD_INT 105
23066: PUSH
23067: LD_INT 106
23069: PUSH
23070: LD_INT 108
23072: PUSH
23073: LD_INT 109
23075: PUSH
23076: LD_INT 112
23078: PUSH
23079: LD_INT 114
23081: PUSH
23082: LD_INT 116
23084: PUSH
23085: LD_INT 117
23087: PUSH
23088: LD_INT 118
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: ST_TO_ADDR
23109: GO 25208
23111: LD_INT 10
23113: DOUBLE
23114: EQUAL
23115: IFTRUE 23119
23117: GO 23315
23119: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23120: LD_ADDR_VAR 0 2
23124: PUSH
23125: LD_INT 2
23127: PUSH
23128: LD_INT 4
23130: PUSH
23131: LD_INT 5
23133: PUSH
23134: LD_INT 6
23136: PUSH
23137: LD_INT 7
23139: PUSH
23140: LD_INT 8
23142: PUSH
23143: LD_INT 9
23145: PUSH
23146: LD_INT 10
23148: PUSH
23149: LD_INT 11
23151: PUSH
23152: LD_INT 12
23154: PUSH
23155: LD_INT 13
23157: PUSH
23158: LD_INT 14
23160: PUSH
23161: LD_INT 15
23163: PUSH
23164: LD_INT 16
23166: PUSH
23167: LD_INT 17
23169: PUSH
23170: LD_INT 18
23172: PUSH
23173: LD_INT 19
23175: PUSH
23176: LD_INT 20
23178: PUSH
23179: LD_INT 21
23181: PUSH
23182: LD_INT 22
23184: PUSH
23185: LD_INT 23
23187: PUSH
23188: LD_INT 24
23190: PUSH
23191: LD_INT 25
23193: PUSH
23194: LD_INT 26
23196: PUSH
23197: LD_INT 28
23199: PUSH
23200: LD_INT 30
23202: PUSH
23203: LD_INT 31
23205: PUSH
23206: LD_INT 32
23208: PUSH
23209: LD_INT 36
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 101
23245: PUSH
23246: LD_INT 102
23248: PUSH
23249: LD_INT 103
23251: PUSH
23252: LD_INT 104
23254: PUSH
23255: LD_INT 105
23257: PUSH
23258: LD_INT 106
23260: PUSH
23261: LD_INT 107
23263: PUSH
23264: LD_INT 108
23266: PUSH
23267: LD_INT 109
23269: PUSH
23270: LD_INT 110
23272: PUSH
23273: LD_INT 111
23275: PUSH
23276: LD_INT 112
23278: PUSH
23279: LD_INT 114
23281: PUSH
23282: LD_INT 116
23284: PUSH
23285: LD_INT 117
23287: PUSH
23288: LD_INT 118
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: ST_TO_ADDR
23313: GO 25208
23315: LD_INT 11
23317: DOUBLE
23318: EQUAL
23319: IFTRUE 23323
23321: GO 23527
23323: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23324: LD_ADDR_VAR 0 2
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: LD_INT 3
23334: PUSH
23335: LD_INT 4
23337: PUSH
23338: LD_INT 5
23340: PUSH
23341: LD_INT 6
23343: PUSH
23344: LD_INT 7
23346: PUSH
23347: LD_INT 8
23349: PUSH
23350: LD_INT 9
23352: PUSH
23353: LD_INT 10
23355: PUSH
23356: LD_INT 11
23358: PUSH
23359: LD_INT 12
23361: PUSH
23362: LD_INT 13
23364: PUSH
23365: LD_INT 14
23367: PUSH
23368: LD_INT 15
23370: PUSH
23371: LD_INT 16
23373: PUSH
23374: LD_INT 17
23376: PUSH
23377: LD_INT 18
23379: PUSH
23380: LD_INT 19
23382: PUSH
23383: LD_INT 20
23385: PUSH
23386: LD_INT 21
23388: PUSH
23389: LD_INT 22
23391: PUSH
23392: LD_INT 23
23394: PUSH
23395: LD_INT 24
23397: PUSH
23398: LD_INT 25
23400: PUSH
23401: LD_INT 26
23403: PUSH
23404: LD_INT 28
23406: PUSH
23407: LD_INT 30
23409: PUSH
23410: LD_INT 31
23412: PUSH
23413: LD_INT 32
23415: PUSH
23416: LD_INT 34
23418: PUSH
23419: LD_INT 36
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 101
23457: PUSH
23458: LD_INT 102
23460: PUSH
23461: LD_INT 103
23463: PUSH
23464: LD_INT 104
23466: PUSH
23467: LD_INT 105
23469: PUSH
23470: LD_INT 106
23472: PUSH
23473: LD_INT 107
23475: PUSH
23476: LD_INT 108
23478: PUSH
23479: LD_INT 109
23481: PUSH
23482: LD_INT 110
23484: PUSH
23485: LD_INT 111
23487: PUSH
23488: LD_INT 112
23490: PUSH
23491: LD_INT 114
23493: PUSH
23494: LD_INT 116
23496: PUSH
23497: LD_INT 117
23499: PUSH
23500: LD_INT 118
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: ST_TO_ADDR
23525: GO 25208
23527: LD_INT 12
23529: DOUBLE
23530: EQUAL
23531: IFTRUE 23535
23533: GO 23755
23535: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23536: LD_ADDR_VAR 0 2
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: LD_INT 3
23549: PUSH
23550: LD_INT 4
23552: PUSH
23553: LD_INT 5
23555: PUSH
23556: LD_INT 6
23558: PUSH
23559: LD_INT 7
23561: PUSH
23562: LD_INT 8
23564: PUSH
23565: LD_INT 9
23567: PUSH
23568: LD_INT 10
23570: PUSH
23571: LD_INT 11
23573: PUSH
23574: LD_INT 12
23576: PUSH
23577: LD_INT 13
23579: PUSH
23580: LD_INT 14
23582: PUSH
23583: LD_INT 15
23585: PUSH
23586: LD_INT 16
23588: PUSH
23589: LD_INT 17
23591: PUSH
23592: LD_INT 18
23594: PUSH
23595: LD_INT 19
23597: PUSH
23598: LD_INT 20
23600: PUSH
23601: LD_INT 21
23603: PUSH
23604: LD_INT 22
23606: PUSH
23607: LD_INT 23
23609: PUSH
23610: LD_INT 24
23612: PUSH
23613: LD_INT 25
23615: PUSH
23616: LD_INT 26
23618: PUSH
23619: LD_INT 27
23621: PUSH
23622: LD_INT 28
23624: PUSH
23625: LD_INT 30
23627: PUSH
23628: LD_INT 31
23630: PUSH
23631: LD_INT 32
23633: PUSH
23634: LD_INT 33
23636: PUSH
23637: LD_INT 34
23639: PUSH
23640: LD_INT 36
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 101
23681: PUSH
23682: LD_INT 102
23684: PUSH
23685: LD_INT 103
23687: PUSH
23688: LD_INT 104
23690: PUSH
23691: LD_INT 105
23693: PUSH
23694: LD_INT 106
23696: PUSH
23697: LD_INT 107
23699: PUSH
23700: LD_INT 108
23702: PUSH
23703: LD_INT 109
23705: PUSH
23706: LD_INT 110
23708: PUSH
23709: LD_INT 111
23711: PUSH
23712: LD_INT 112
23714: PUSH
23715: LD_INT 113
23717: PUSH
23718: LD_INT 114
23720: PUSH
23721: LD_INT 116
23723: PUSH
23724: LD_INT 117
23726: PUSH
23727: LD_INT 118
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: ST_TO_ADDR
23753: GO 25208
23755: LD_INT 13
23757: DOUBLE
23758: EQUAL
23759: IFTRUE 23763
23761: GO 23971
23763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23764: LD_ADDR_VAR 0 2
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 3
23777: PUSH
23778: LD_INT 4
23780: PUSH
23781: LD_INT 5
23783: PUSH
23784: LD_INT 8
23786: PUSH
23787: LD_INT 9
23789: PUSH
23790: LD_INT 10
23792: PUSH
23793: LD_INT 11
23795: PUSH
23796: LD_INT 12
23798: PUSH
23799: LD_INT 14
23801: PUSH
23802: LD_INT 15
23804: PUSH
23805: LD_INT 16
23807: PUSH
23808: LD_INT 17
23810: PUSH
23811: LD_INT 18
23813: PUSH
23814: LD_INT 19
23816: PUSH
23817: LD_INT 20
23819: PUSH
23820: LD_INT 21
23822: PUSH
23823: LD_INT 22
23825: PUSH
23826: LD_INT 23
23828: PUSH
23829: LD_INT 24
23831: PUSH
23832: LD_INT 25
23834: PUSH
23835: LD_INT 26
23837: PUSH
23838: LD_INT 27
23840: PUSH
23841: LD_INT 28
23843: PUSH
23844: LD_INT 30
23846: PUSH
23847: LD_INT 31
23849: PUSH
23850: LD_INT 32
23852: PUSH
23853: LD_INT 33
23855: PUSH
23856: LD_INT 34
23858: PUSH
23859: LD_INT 36
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 101
23897: PUSH
23898: LD_INT 102
23900: PUSH
23901: LD_INT 103
23903: PUSH
23904: LD_INT 104
23906: PUSH
23907: LD_INT 105
23909: PUSH
23910: LD_INT 106
23912: PUSH
23913: LD_INT 107
23915: PUSH
23916: LD_INT 108
23918: PUSH
23919: LD_INT 109
23921: PUSH
23922: LD_INT 110
23924: PUSH
23925: LD_INT 111
23927: PUSH
23928: LD_INT 112
23930: PUSH
23931: LD_INT 113
23933: PUSH
23934: LD_INT 114
23936: PUSH
23937: LD_INT 116
23939: PUSH
23940: LD_INT 117
23942: PUSH
23943: LD_INT 118
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: ST_TO_ADDR
23969: GO 25208
23971: LD_INT 14
23973: DOUBLE
23974: EQUAL
23975: IFTRUE 23979
23977: GO 24203
23979: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23980: LD_ADDR_VAR 0 2
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: LD_INT 3
23993: PUSH
23994: LD_INT 4
23996: PUSH
23997: LD_INT 5
23999: PUSH
24000: LD_INT 6
24002: PUSH
24003: LD_INT 7
24005: PUSH
24006: LD_INT 8
24008: PUSH
24009: LD_INT 9
24011: PUSH
24012: LD_INT 10
24014: PUSH
24015: LD_INT 11
24017: PUSH
24018: LD_INT 12
24020: PUSH
24021: LD_INT 13
24023: PUSH
24024: LD_INT 14
24026: PUSH
24027: LD_INT 15
24029: PUSH
24030: LD_INT 16
24032: PUSH
24033: LD_INT 17
24035: PUSH
24036: LD_INT 18
24038: PUSH
24039: LD_INT 19
24041: PUSH
24042: LD_INT 20
24044: PUSH
24045: LD_INT 21
24047: PUSH
24048: LD_INT 22
24050: PUSH
24051: LD_INT 23
24053: PUSH
24054: LD_INT 24
24056: PUSH
24057: LD_INT 25
24059: PUSH
24060: LD_INT 26
24062: PUSH
24063: LD_INT 27
24065: PUSH
24066: LD_INT 28
24068: PUSH
24069: LD_INT 29
24071: PUSH
24072: LD_INT 30
24074: PUSH
24075: LD_INT 31
24077: PUSH
24078: LD_INT 32
24080: PUSH
24081: LD_INT 33
24083: PUSH
24084: LD_INT 34
24086: PUSH
24087: LD_INT 36
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 101
24129: PUSH
24130: LD_INT 102
24132: PUSH
24133: LD_INT 103
24135: PUSH
24136: LD_INT 104
24138: PUSH
24139: LD_INT 105
24141: PUSH
24142: LD_INT 106
24144: PUSH
24145: LD_INT 107
24147: PUSH
24148: LD_INT 108
24150: PUSH
24151: LD_INT 109
24153: PUSH
24154: LD_INT 110
24156: PUSH
24157: LD_INT 111
24159: PUSH
24160: LD_INT 112
24162: PUSH
24163: LD_INT 113
24165: PUSH
24166: LD_INT 114
24168: PUSH
24169: LD_INT 116
24171: PUSH
24172: LD_INT 117
24174: PUSH
24175: LD_INT 118
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: ST_TO_ADDR
24201: GO 25208
24203: LD_INT 15
24205: DOUBLE
24206: EQUAL
24207: IFTRUE 24211
24209: GO 24435
24211: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24212: LD_ADDR_VAR 0 2
24216: PUSH
24217: LD_INT 1
24219: PUSH
24220: LD_INT 2
24222: PUSH
24223: LD_INT 3
24225: PUSH
24226: LD_INT 4
24228: PUSH
24229: LD_INT 5
24231: PUSH
24232: LD_INT 6
24234: PUSH
24235: LD_INT 7
24237: PUSH
24238: LD_INT 8
24240: PUSH
24241: LD_INT 9
24243: PUSH
24244: LD_INT 10
24246: PUSH
24247: LD_INT 11
24249: PUSH
24250: LD_INT 12
24252: PUSH
24253: LD_INT 13
24255: PUSH
24256: LD_INT 14
24258: PUSH
24259: LD_INT 15
24261: PUSH
24262: LD_INT 16
24264: PUSH
24265: LD_INT 17
24267: PUSH
24268: LD_INT 18
24270: PUSH
24271: LD_INT 19
24273: PUSH
24274: LD_INT 20
24276: PUSH
24277: LD_INT 21
24279: PUSH
24280: LD_INT 22
24282: PUSH
24283: LD_INT 23
24285: PUSH
24286: LD_INT 24
24288: PUSH
24289: LD_INT 25
24291: PUSH
24292: LD_INT 26
24294: PUSH
24295: LD_INT 27
24297: PUSH
24298: LD_INT 28
24300: PUSH
24301: LD_INT 29
24303: PUSH
24304: LD_INT 30
24306: PUSH
24307: LD_INT 31
24309: PUSH
24310: LD_INT 32
24312: PUSH
24313: LD_INT 33
24315: PUSH
24316: LD_INT 34
24318: PUSH
24319: LD_INT 36
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 101
24361: PUSH
24362: LD_INT 102
24364: PUSH
24365: LD_INT 103
24367: PUSH
24368: LD_INT 104
24370: PUSH
24371: LD_INT 105
24373: PUSH
24374: LD_INT 106
24376: PUSH
24377: LD_INT 107
24379: PUSH
24380: LD_INT 108
24382: PUSH
24383: LD_INT 109
24385: PUSH
24386: LD_INT 110
24388: PUSH
24389: LD_INT 111
24391: PUSH
24392: LD_INT 112
24394: PUSH
24395: LD_INT 113
24397: PUSH
24398: LD_INT 114
24400: PUSH
24401: LD_INT 116
24403: PUSH
24404: LD_INT 117
24406: PUSH
24407: LD_INT 118
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: ST_TO_ADDR
24433: GO 25208
24435: LD_INT 16
24437: DOUBLE
24438: EQUAL
24439: IFTRUE 24443
24441: GO 24579
24443: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24444: LD_ADDR_VAR 0 2
24448: PUSH
24449: LD_INT 2
24451: PUSH
24452: LD_INT 4
24454: PUSH
24455: LD_INT 5
24457: PUSH
24458: LD_INT 7
24460: PUSH
24461: LD_INT 11
24463: PUSH
24464: LD_INT 12
24466: PUSH
24467: LD_INT 15
24469: PUSH
24470: LD_INT 16
24472: PUSH
24473: LD_INT 20
24475: PUSH
24476: LD_INT 21
24478: PUSH
24479: LD_INT 22
24481: PUSH
24482: LD_INT 23
24484: PUSH
24485: LD_INT 25
24487: PUSH
24488: LD_INT 26
24490: PUSH
24491: LD_INT 30
24493: PUSH
24494: LD_INT 31
24496: PUSH
24497: LD_INT 32
24499: PUSH
24500: LD_INT 33
24502: PUSH
24503: LD_INT 34
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 101
24529: PUSH
24530: LD_INT 102
24532: PUSH
24533: LD_INT 103
24535: PUSH
24536: LD_INT 106
24538: PUSH
24539: LD_INT 108
24541: PUSH
24542: LD_INT 112
24544: PUSH
24545: LD_INT 113
24547: PUSH
24548: LD_INT 114
24550: PUSH
24551: LD_INT 116
24553: PUSH
24554: LD_INT 117
24556: PUSH
24557: LD_INT 118
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: ST_TO_ADDR
24577: GO 25208
24579: LD_INT 17
24581: DOUBLE
24582: EQUAL
24583: IFTRUE 24587
24585: GO 24811
24587: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24588: LD_ADDR_VAR 0 2
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: LD_INT 3
24601: PUSH
24602: LD_INT 4
24604: PUSH
24605: LD_INT 5
24607: PUSH
24608: LD_INT 6
24610: PUSH
24611: LD_INT 7
24613: PUSH
24614: LD_INT 8
24616: PUSH
24617: LD_INT 9
24619: PUSH
24620: LD_INT 10
24622: PUSH
24623: LD_INT 11
24625: PUSH
24626: LD_INT 12
24628: PUSH
24629: LD_INT 13
24631: PUSH
24632: LD_INT 14
24634: PUSH
24635: LD_INT 15
24637: PUSH
24638: LD_INT 16
24640: PUSH
24641: LD_INT 17
24643: PUSH
24644: LD_INT 18
24646: PUSH
24647: LD_INT 19
24649: PUSH
24650: LD_INT 20
24652: PUSH
24653: LD_INT 21
24655: PUSH
24656: LD_INT 22
24658: PUSH
24659: LD_INT 23
24661: PUSH
24662: LD_INT 24
24664: PUSH
24665: LD_INT 25
24667: PUSH
24668: LD_INT 26
24670: PUSH
24671: LD_INT 27
24673: PUSH
24674: LD_INT 28
24676: PUSH
24677: LD_INT 29
24679: PUSH
24680: LD_INT 30
24682: PUSH
24683: LD_INT 31
24685: PUSH
24686: LD_INT 32
24688: PUSH
24689: LD_INT 33
24691: PUSH
24692: LD_INT 34
24694: PUSH
24695: LD_INT 36
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 101
24737: PUSH
24738: LD_INT 102
24740: PUSH
24741: LD_INT 103
24743: PUSH
24744: LD_INT 104
24746: PUSH
24747: LD_INT 105
24749: PUSH
24750: LD_INT 106
24752: PUSH
24753: LD_INT 107
24755: PUSH
24756: LD_INT 108
24758: PUSH
24759: LD_INT 109
24761: PUSH
24762: LD_INT 110
24764: PUSH
24765: LD_INT 111
24767: PUSH
24768: LD_INT 112
24770: PUSH
24771: LD_INT 113
24773: PUSH
24774: LD_INT 114
24776: PUSH
24777: LD_INT 116
24779: PUSH
24780: LD_INT 117
24782: PUSH
24783: LD_INT 118
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: ST_TO_ADDR
24809: GO 25208
24811: LD_INT 18
24813: DOUBLE
24814: EQUAL
24815: IFTRUE 24819
24817: GO 24967
24819: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24820: LD_ADDR_VAR 0 2
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: LD_INT 4
24830: PUSH
24831: LD_INT 5
24833: PUSH
24834: LD_INT 7
24836: PUSH
24837: LD_INT 11
24839: PUSH
24840: LD_INT 12
24842: PUSH
24843: LD_INT 15
24845: PUSH
24846: LD_INT 16
24848: PUSH
24849: LD_INT 20
24851: PUSH
24852: LD_INT 21
24854: PUSH
24855: LD_INT 22
24857: PUSH
24858: LD_INT 23
24860: PUSH
24861: LD_INT 25
24863: PUSH
24864: LD_INT 26
24866: PUSH
24867: LD_INT 30
24869: PUSH
24870: LD_INT 31
24872: PUSH
24873: LD_INT 32
24875: PUSH
24876: LD_INT 33
24878: PUSH
24879: LD_INT 34
24881: PUSH
24882: LD_INT 35
24884: PUSH
24885: LD_INT 36
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 101
24913: PUSH
24914: LD_INT 102
24916: PUSH
24917: LD_INT 103
24919: PUSH
24920: LD_INT 106
24922: PUSH
24923: LD_INT 108
24925: PUSH
24926: LD_INT 112
24928: PUSH
24929: LD_INT 113
24931: PUSH
24932: LD_INT 114
24934: PUSH
24935: LD_INT 115
24937: PUSH
24938: LD_INT 116
24940: PUSH
24941: LD_INT 117
24943: PUSH
24944: LD_INT 118
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: ST_TO_ADDR
24965: GO 25208
24967: LD_INT 19
24969: DOUBLE
24970: EQUAL
24971: IFTRUE 24975
24973: GO 25207
24975: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24976: LD_ADDR_VAR 0 2
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: LD_INT 2
24986: PUSH
24987: LD_INT 3
24989: PUSH
24990: LD_INT 4
24992: PUSH
24993: LD_INT 5
24995: PUSH
24996: LD_INT 6
24998: PUSH
24999: LD_INT 7
25001: PUSH
25002: LD_INT 8
25004: PUSH
25005: LD_INT 9
25007: PUSH
25008: LD_INT 10
25010: PUSH
25011: LD_INT 11
25013: PUSH
25014: LD_INT 12
25016: PUSH
25017: LD_INT 13
25019: PUSH
25020: LD_INT 14
25022: PUSH
25023: LD_INT 15
25025: PUSH
25026: LD_INT 16
25028: PUSH
25029: LD_INT 17
25031: PUSH
25032: LD_INT 18
25034: PUSH
25035: LD_INT 19
25037: PUSH
25038: LD_INT 20
25040: PUSH
25041: LD_INT 21
25043: PUSH
25044: LD_INT 22
25046: PUSH
25047: LD_INT 23
25049: PUSH
25050: LD_INT 24
25052: PUSH
25053: LD_INT 25
25055: PUSH
25056: LD_INT 26
25058: PUSH
25059: LD_INT 27
25061: PUSH
25062: LD_INT 28
25064: PUSH
25065: LD_INT 29
25067: PUSH
25068: LD_INT 30
25070: PUSH
25071: LD_INT 31
25073: PUSH
25074: LD_INT 32
25076: PUSH
25077: LD_INT 33
25079: PUSH
25080: LD_INT 34
25082: PUSH
25083: LD_INT 35
25085: PUSH
25086: LD_INT 36
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 101
25129: PUSH
25130: LD_INT 102
25132: PUSH
25133: LD_INT 103
25135: PUSH
25136: LD_INT 104
25138: PUSH
25139: LD_INT 105
25141: PUSH
25142: LD_INT 106
25144: PUSH
25145: LD_INT 107
25147: PUSH
25148: LD_INT 108
25150: PUSH
25151: LD_INT 109
25153: PUSH
25154: LD_INT 110
25156: PUSH
25157: LD_INT 111
25159: PUSH
25160: LD_INT 112
25162: PUSH
25163: LD_INT 113
25165: PUSH
25166: LD_INT 114
25168: PUSH
25169: LD_INT 115
25171: PUSH
25172: LD_INT 116
25174: PUSH
25175: LD_INT 117
25177: PUSH
25178: LD_INT 118
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: ST_TO_ADDR
25205: GO 25208
25207: POP
// end else
25208: GO 25439
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25210: LD_ADDR_VAR 0 2
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: LD_INT 2
25220: PUSH
25221: LD_INT 3
25223: PUSH
25224: LD_INT 4
25226: PUSH
25227: LD_INT 5
25229: PUSH
25230: LD_INT 6
25232: PUSH
25233: LD_INT 7
25235: PUSH
25236: LD_INT 8
25238: PUSH
25239: LD_INT 9
25241: PUSH
25242: LD_INT 10
25244: PUSH
25245: LD_INT 11
25247: PUSH
25248: LD_INT 12
25250: PUSH
25251: LD_INT 13
25253: PUSH
25254: LD_INT 14
25256: PUSH
25257: LD_INT 15
25259: PUSH
25260: LD_INT 16
25262: PUSH
25263: LD_INT 17
25265: PUSH
25266: LD_INT 18
25268: PUSH
25269: LD_INT 19
25271: PUSH
25272: LD_INT 20
25274: PUSH
25275: LD_INT 21
25277: PUSH
25278: LD_INT 22
25280: PUSH
25281: LD_INT 23
25283: PUSH
25284: LD_INT 24
25286: PUSH
25287: LD_INT 25
25289: PUSH
25290: LD_INT 26
25292: PUSH
25293: LD_INT 27
25295: PUSH
25296: LD_INT 28
25298: PUSH
25299: LD_INT 29
25301: PUSH
25302: LD_INT 30
25304: PUSH
25305: LD_INT 31
25307: PUSH
25308: LD_INT 32
25310: PUSH
25311: LD_INT 33
25313: PUSH
25314: LD_INT 34
25316: PUSH
25317: LD_INT 35
25319: PUSH
25320: LD_INT 36
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 101
25363: PUSH
25364: LD_INT 102
25366: PUSH
25367: LD_INT 103
25369: PUSH
25370: LD_INT 104
25372: PUSH
25373: LD_INT 105
25375: PUSH
25376: LD_INT 106
25378: PUSH
25379: LD_INT 107
25381: PUSH
25382: LD_INT 108
25384: PUSH
25385: LD_INT 109
25387: PUSH
25388: LD_INT 110
25390: PUSH
25391: LD_INT 111
25393: PUSH
25394: LD_INT 112
25396: PUSH
25397: LD_INT 113
25399: PUSH
25400: LD_INT 114
25402: PUSH
25403: LD_INT 115
25405: PUSH
25406: LD_INT 116
25408: PUSH
25409: LD_INT 117
25411: PUSH
25412: LD_INT 118
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: ST_TO_ADDR
// if result then
25439: LD_VAR 0 2
25443: IFFALSE 26229
// begin normal :=  ;
25445: LD_ADDR_VAR 0 5
25449: PUSH
25450: LD_STRING 
25452: ST_TO_ADDR
// hardcore :=  ;
25453: LD_ADDR_VAR 0 6
25457: PUSH
25458: LD_STRING 
25460: ST_TO_ADDR
// active :=  ;
25461: LD_ADDR_VAR 0 7
25465: PUSH
25466: LD_STRING 
25468: ST_TO_ADDR
// for i = 1 to normalCounter do
25469: LD_ADDR_VAR 0 8
25473: PUSH
25474: DOUBLE
25475: LD_INT 1
25477: DEC
25478: ST_TO_ADDR
25479: LD_EXP 39
25483: PUSH
25484: FOR_TO
25485: IFFALSE 25586
// begin tmp := 0 ;
25487: LD_ADDR_VAR 0 3
25491: PUSH
25492: LD_STRING 0
25494: ST_TO_ADDR
// if result [ 1 ] then
25495: LD_VAR 0 2
25499: PUSH
25500: LD_INT 1
25502: ARRAY
25503: IFFALSE 25568
// if result [ 1 ] [ 1 ] = i then
25505: LD_VAR 0 2
25509: PUSH
25510: LD_INT 1
25512: ARRAY
25513: PUSH
25514: LD_INT 1
25516: ARRAY
25517: PUSH
25518: LD_VAR 0 8
25522: EQUAL
25523: IFFALSE 25568
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25525: LD_ADDR_VAR 0 2
25529: PUSH
25530: LD_VAR 0 2
25534: PPUSH
25535: LD_INT 1
25537: PPUSH
25538: LD_VAR 0 2
25542: PUSH
25543: LD_INT 1
25545: ARRAY
25546: PPUSH
25547: LD_INT 1
25549: PPUSH
25550: CALL_OW 3
25554: PPUSH
25555: CALL_OW 1
25559: ST_TO_ADDR
// tmp := 1 ;
25560: LD_ADDR_VAR 0 3
25564: PUSH
25565: LD_STRING 1
25567: ST_TO_ADDR
// end ; normal := normal & tmp ;
25568: LD_ADDR_VAR 0 5
25572: PUSH
25573: LD_VAR 0 5
25577: PUSH
25578: LD_VAR 0 3
25582: STR
25583: ST_TO_ADDR
// end ;
25584: GO 25484
25586: POP
25587: POP
// for i = 1 to hardcoreCounter do
25588: LD_ADDR_VAR 0 8
25592: PUSH
25593: DOUBLE
25594: LD_INT 1
25596: DEC
25597: ST_TO_ADDR
25598: LD_EXP 40
25602: PUSH
25603: FOR_TO
25604: IFFALSE 25709
// begin tmp := 0 ;
25606: LD_ADDR_VAR 0 3
25610: PUSH
25611: LD_STRING 0
25613: ST_TO_ADDR
// if result [ 2 ] then
25614: LD_VAR 0 2
25618: PUSH
25619: LD_INT 2
25621: ARRAY
25622: IFFALSE 25691
// if result [ 2 ] [ 1 ] = 100 + i then
25624: LD_VAR 0 2
25628: PUSH
25629: LD_INT 2
25631: ARRAY
25632: PUSH
25633: LD_INT 1
25635: ARRAY
25636: PUSH
25637: LD_INT 100
25639: PUSH
25640: LD_VAR 0 8
25644: PLUS
25645: EQUAL
25646: IFFALSE 25691
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25648: LD_ADDR_VAR 0 2
25652: PUSH
25653: LD_VAR 0 2
25657: PPUSH
25658: LD_INT 2
25660: PPUSH
25661: LD_VAR 0 2
25665: PUSH
25666: LD_INT 2
25668: ARRAY
25669: PPUSH
25670: LD_INT 1
25672: PPUSH
25673: CALL_OW 3
25677: PPUSH
25678: CALL_OW 1
25682: ST_TO_ADDR
// tmp := 1 ;
25683: LD_ADDR_VAR 0 3
25687: PUSH
25688: LD_STRING 1
25690: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25691: LD_ADDR_VAR 0 6
25695: PUSH
25696: LD_VAR 0 6
25700: PUSH
25701: LD_VAR 0 3
25705: STR
25706: ST_TO_ADDR
// end ;
25707: GO 25603
25709: POP
25710: POP
// if isGameLoad then
25711: LD_VAR 0 1
25715: IFFALSE 26190
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25717: LD_ADDR_VAR 0 4
25721: PUSH
25722: LD_EXP 43
25726: PUSH
25727: LD_EXP 42
25731: PUSH
25732: LD_EXP 44
25736: PUSH
25737: LD_EXP 41
25741: PUSH
25742: LD_EXP 45
25746: PUSH
25747: LD_EXP 46
25751: PUSH
25752: LD_EXP 47
25756: PUSH
25757: LD_EXP 48
25761: PUSH
25762: LD_EXP 49
25766: PUSH
25767: LD_EXP 50
25771: PUSH
25772: LD_EXP 51
25776: PUSH
25777: LD_EXP 52
25781: PUSH
25782: LD_EXP 53
25786: PUSH
25787: LD_EXP 54
25791: PUSH
25792: LD_EXP 62
25796: PUSH
25797: LD_EXP 63
25801: PUSH
25802: LD_EXP 64
25806: PUSH
25807: LD_EXP 65
25811: PUSH
25812: LD_EXP 67
25816: PUSH
25817: LD_EXP 68
25821: PUSH
25822: LD_EXP 69
25826: PUSH
25827: LD_EXP 72
25831: PUSH
25832: LD_EXP 74
25836: PUSH
25837: LD_EXP 75
25841: PUSH
25842: LD_EXP 76
25846: PUSH
25847: LD_EXP 78
25851: PUSH
25852: LD_EXP 79
25856: PUSH
25857: LD_EXP 82
25861: PUSH
25862: LD_EXP 83
25866: PUSH
25867: LD_EXP 84
25871: PUSH
25872: LD_EXP 85
25876: PUSH
25877: LD_EXP 86
25881: PUSH
25882: LD_EXP 87
25886: PUSH
25887: LD_EXP 88
25891: PUSH
25892: LD_EXP 89
25896: PUSH
25897: LD_EXP 90
25901: PUSH
25902: LD_EXP 55
25906: PUSH
25907: LD_EXP 56
25911: PUSH
25912: LD_EXP 59
25916: PUSH
25917: LD_EXP 60
25921: PUSH
25922: LD_EXP 61
25926: PUSH
25927: LD_EXP 57
25931: PUSH
25932: LD_EXP 58
25936: PUSH
25937: LD_EXP 66
25941: PUSH
25942: LD_EXP 70
25946: PUSH
25947: LD_EXP 71
25951: PUSH
25952: LD_EXP 73
25956: PUSH
25957: LD_EXP 77
25961: PUSH
25962: LD_EXP 80
25966: PUSH
25967: LD_EXP 81
25971: PUSH
25972: LD_EXP 91
25976: PUSH
25977: LD_EXP 92
25981: PUSH
25982: LD_EXP 93
25986: PUSH
25987: LD_EXP 94
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: ST_TO_ADDR
// tmp :=  ;
26048: LD_ADDR_VAR 0 3
26052: PUSH
26053: LD_STRING 
26055: ST_TO_ADDR
// for i = 1 to normalCounter do
26056: LD_ADDR_VAR 0 8
26060: PUSH
26061: DOUBLE
26062: LD_INT 1
26064: DEC
26065: ST_TO_ADDR
26066: LD_EXP 39
26070: PUSH
26071: FOR_TO
26072: IFFALSE 26108
// begin if flags [ i ] then
26074: LD_VAR 0 4
26078: PUSH
26079: LD_VAR 0 8
26083: ARRAY
26084: IFFALSE 26106
// tmp := tmp & i & ; ;
26086: LD_ADDR_VAR 0 3
26090: PUSH
26091: LD_VAR 0 3
26095: PUSH
26096: LD_VAR 0 8
26100: STR
26101: PUSH
26102: LD_STRING ;
26104: STR
26105: ST_TO_ADDR
// end ;
26106: GO 26071
26108: POP
26109: POP
// for i = 1 to hardcoreCounter do
26110: LD_ADDR_VAR 0 8
26114: PUSH
26115: DOUBLE
26116: LD_INT 1
26118: DEC
26119: ST_TO_ADDR
26120: LD_EXP 40
26124: PUSH
26125: FOR_TO
26126: IFFALSE 26172
// begin if flags [ normalCounter + i ] then
26128: LD_VAR 0 4
26132: PUSH
26133: LD_EXP 39
26137: PUSH
26138: LD_VAR 0 8
26142: PLUS
26143: ARRAY
26144: IFFALSE 26170
// tmp := tmp & ( 100 + i ) & ; ;
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_VAR 0 3
26155: PUSH
26156: LD_INT 100
26158: PUSH
26159: LD_VAR 0 8
26163: PLUS
26164: STR
26165: PUSH
26166: LD_STRING ;
26168: STR
26169: ST_TO_ADDR
// end ;
26170: GO 26125
26172: POP
26173: POP
// if tmp then
26174: LD_VAR 0 3
26178: IFFALSE 26190
// active := tmp ;
26180: LD_ADDR_VAR 0 7
26184: PUSH
26185: LD_VAR 0 3
26189: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26190: LD_STRING getStreamItemsFromMission("
26192: PUSH
26193: LD_VAR 0 5
26197: STR
26198: PUSH
26199: LD_STRING ","
26201: STR
26202: PUSH
26203: LD_VAR 0 6
26207: STR
26208: PUSH
26209: LD_STRING ","
26211: STR
26212: PUSH
26213: LD_VAR 0 7
26217: STR
26218: PUSH
26219: LD_STRING ")
26221: STR
26222: PPUSH
26223: CALL_OW 559
// end else
26227: GO 26236
// ToLua ( getStreamItemsFromMission("","","") ) ;
26229: LD_STRING getStreamItemsFromMission("","","")
26231: PPUSH
26232: CALL_OW 559
// end ;
26236: LD_VAR 0 2
26240: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26241: LD_EXP 38
26245: PUSH
26246: LD_EXP 43
26250: AND
26251: IFFALSE 26375
26253: GO 26255
26255: DISABLE
26256: LD_INT 0
26258: PPUSH
26259: PPUSH
// begin enable ;
26260: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26261: LD_ADDR_VAR 0 2
26265: PUSH
26266: LD_INT 22
26268: PUSH
26269: LD_OWVAR 2
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 2
26280: PUSH
26281: LD_INT 34
26283: PUSH
26284: LD_INT 7
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 34
26293: PUSH
26294: LD_INT 45
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 34
26303: PUSH
26304: LD_INT 28
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 34
26313: PUSH
26314: LD_INT 47
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PPUSH
26332: CALL_OW 69
26336: ST_TO_ADDR
// if not tmp then
26337: LD_VAR 0 2
26341: NOT
26342: IFFALSE 26346
// exit ;
26344: GO 26375
// for i in tmp do
26346: LD_ADDR_VAR 0 1
26350: PUSH
26351: LD_VAR 0 2
26355: PUSH
26356: FOR_IN
26357: IFFALSE 26373
// begin SetLives ( i , 0 ) ;
26359: LD_VAR 0 1
26363: PPUSH
26364: LD_INT 0
26366: PPUSH
26367: CALL_OW 234
// end ;
26371: GO 26356
26373: POP
26374: POP
// end ;
26375: PPOPN 2
26377: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26378: LD_EXP 38
26382: PUSH
26383: LD_EXP 44
26387: AND
26388: IFFALSE 26472
26390: GO 26392
26392: DISABLE
26393: LD_INT 0
26395: PPUSH
26396: PPUSH
// begin enable ;
26397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26398: LD_ADDR_VAR 0 2
26402: PUSH
26403: LD_INT 22
26405: PUSH
26406: LD_OWVAR 2
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 32
26417: PUSH
26418: LD_INT 3
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PPUSH
26429: CALL_OW 69
26433: ST_TO_ADDR
// if not tmp then
26434: LD_VAR 0 2
26438: NOT
26439: IFFALSE 26443
// exit ;
26441: GO 26472
// for i in tmp do
26443: LD_ADDR_VAR 0 1
26447: PUSH
26448: LD_VAR 0 2
26452: PUSH
26453: FOR_IN
26454: IFFALSE 26470
// begin SetLives ( i , 0 ) ;
26456: LD_VAR 0 1
26460: PPUSH
26461: LD_INT 0
26463: PPUSH
26464: CALL_OW 234
// end ;
26468: GO 26453
26470: POP
26471: POP
// end ;
26472: PPOPN 2
26474: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26475: LD_EXP 38
26479: PUSH
26480: LD_EXP 41
26484: AND
26485: IFFALSE 26578
26487: GO 26489
26489: DISABLE
26490: LD_INT 0
26492: PPUSH
// begin enable ;
26493: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26494: LD_ADDR_VAR 0 1
26498: PUSH
26499: LD_INT 22
26501: PUSH
26502: LD_OWVAR 2
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 2
26513: PUSH
26514: LD_INT 25
26516: PUSH
26517: LD_INT 5
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 25
26526: PUSH
26527: LD_INT 9
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 25
26536: PUSH
26537: LD_INT 8
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PPUSH
26554: CALL_OW 69
26558: PUSH
26559: FOR_IN
26560: IFFALSE 26576
// begin SetClass ( i , 1 ) ;
26562: LD_VAR 0 1
26566: PPUSH
26567: LD_INT 1
26569: PPUSH
26570: CALL_OW 336
// end ;
26574: GO 26559
26576: POP
26577: POP
// end ;
26578: PPOPN 1
26580: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26581: LD_EXP 38
26585: PUSH
26586: LD_EXP 42
26590: AND
26591: PUSH
26592: LD_OWVAR 65
26596: PUSH
26597: LD_INT 7
26599: LESS
26600: AND
26601: IFFALSE 26615
26603: GO 26605
26605: DISABLE
// begin enable ;
26606: ENABLE
// game_speed := 7 ;
26607: LD_ADDR_OWVAR 65
26611: PUSH
26612: LD_INT 7
26614: ST_TO_ADDR
// end ;
26615: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26616: LD_EXP 38
26620: PUSH
26621: LD_EXP 45
26625: AND
26626: IFFALSE 26828
26628: GO 26630
26630: DISABLE
26631: LD_INT 0
26633: PPUSH
26634: PPUSH
26635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26636: LD_ADDR_VAR 0 3
26640: PUSH
26641: LD_INT 81
26643: PUSH
26644: LD_OWVAR 2
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 21
26655: PUSH
26656: LD_INT 1
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PPUSH
26667: CALL_OW 69
26671: ST_TO_ADDR
// if not tmp then
26672: LD_VAR 0 3
26676: NOT
26677: IFFALSE 26681
// exit ;
26679: GO 26828
// if tmp > 5 then
26681: LD_VAR 0 3
26685: PUSH
26686: LD_INT 5
26688: GREATER
26689: IFFALSE 26701
// k := 5 else
26691: LD_ADDR_VAR 0 2
26695: PUSH
26696: LD_INT 5
26698: ST_TO_ADDR
26699: GO 26711
// k := tmp ;
26701: LD_ADDR_VAR 0 2
26705: PUSH
26706: LD_VAR 0 3
26710: ST_TO_ADDR
// for i := 1 to k do
26711: LD_ADDR_VAR 0 1
26715: PUSH
26716: DOUBLE
26717: LD_INT 1
26719: DEC
26720: ST_TO_ADDR
26721: LD_VAR 0 2
26725: PUSH
26726: FOR_TO
26727: IFFALSE 26826
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26729: LD_VAR 0 3
26733: PUSH
26734: LD_VAR 0 1
26738: ARRAY
26739: PPUSH
26740: LD_VAR 0 1
26744: PUSH
26745: LD_INT 4
26747: MOD
26748: PUSH
26749: LD_INT 1
26751: PLUS
26752: PPUSH
26753: CALL_OW 259
26757: PUSH
26758: LD_INT 10
26760: LESS
26761: IFFALSE 26824
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26763: LD_VAR 0 3
26767: PUSH
26768: LD_VAR 0 1
26772: ARRAY
26773: PPUSH
26774: LD_VAR 0 1
26778: PUSH
26779: LD_INT 4
26781: MOD
26782: PUSH
26783: LD_INT 1
26785: PLUS
26786: PPUSH
26787: LD_VAR 0 3
26791: PUSH
26792: LD_VAR 0 1
26796: ARRAY
26797: PPUSH
26798: LD_VAR 0 1
26802: PUSH
26803: LD_INT 4
26805: MOD
26806: PUSH
26807: LD_INT 1
26809: PLUS
26810: PPUSH
26811: CALL_OW 259
26815: PUSH
26816: LD_INT 1
26818: PLUS
26819: PPUSH
26820: CALL_OW 237
26824: GO 26726
26826: POP
26827: POP
// end ;
26828: PPOPN 3
26830: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26831: LD_EXP 38
26835: PUSH
26836: LD_EXP 46
26840: AND
26841: IFFALSE 26861
26843: GO 26845
26845: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26846: LD_INT 4
26848: PPUSH
26849: LD_OWVAR 2
26853: PPUSH
26854: LD_INT 0
26856: PPUSH
26857: CALL_OW 324
26861: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26862: LD_EXP 38
26866: PUSH
26867: LD_EXP 75
26871: AND
26872: IFFALSE 26892
26874: GO 26876
26876: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26877: LD_INT 19
26879: PPUSH
26880: LD_OWVAR 2
26884: PPUSH
26885: LD_INT 0
26887: PPUSH
26888: CALL_OW 324
26892: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26893: LD_EXP 38
26897: PUSH
26898: LD_EXP 47
26902: AND
26903: IFFALSE 27005
26905: GO 26907
26907: DISABLE
26908: LD_INT 0
26910: PPUSH
26911: PPUSH
// begin enable ;
26912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26913: LD_ADDR_VAR 0 2
26917: PUSH
26918: LD_INT 22
26920: PUSH
26921: LD_OWVAR 2
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: LD_INT 34
26935: PUSH
26936: LD_INT 11
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 34
26945: PUSH
26946: LD_INT 30
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: LIST
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PPUSH
26962: CALL_OW 69
26966: ST_TO_ADDR
// if not tmp then
26967: LD_VAR 0 2
26971: NOT
26972: IFFALSE 26976
// exit ;
26974: GO 27005
// for i in tmp do
26976: LD_ADDR_VAR 0 1
26980: PUSH
26981: LD_VAR 0 2
26985: PUSH
26986: FOR_IN
26987: IFFALSE 27003
// begin SetLives ( i , 0 ) ;
26989: LD_VAR 0 1
26993: PPUSH
26994: LD_INT 0
26996: PPUSH
26997: CALL_OW 234
// end ;
27001: GO 26986
27003: POP
27004: POP
// end ;
27005: PPOPN 2
27007: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27008: LD_EXP 38
27012: PUSH
27013: LD_EXP 48
27017: AND
27018: IFFALSE 27038
27020: GO 27022
27022: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27023: LD_INT 32
27025: PPUSH
27026: LD_OWVAR 2
27030: PPUSH
27031: LD_INT 0
27033: PPUSH
27034: CALL_OW 324
27038: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27039: LD_EXP 38
27043: PUSH
27044: LD_EXP 49
27048: AND
27049: IFFALSE 27230
27051: GO 27053
27053: DISABLE
27054: LD_INT 0
27056: PPUSH
27057: PPUSH
27058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27059: LD_ADDR_VAR 0 2
27063: PUSH
27064: LD_INT 22
27066: PUSH
27067: LD_OWVAR 2
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 33
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PPUSH
27090: CALL_OW 69
27094: ST_TO_ADDR
// if not tmp then
27095: LD_VAR 0 2
27099: NOT
27100: IFFALSE 27104
// exit ;
27102: GO 27230
// side := 0 ;
27104: LD_ADDR_VAR 0 3
27108: PUSH
27109: LD_INT 0
27111: ST_TO_ADDR
// for i := 1 to 8 do
27112: LD_ADDR_VAR 0 1
27116: PUSH
27117: DOUBLE
27118: LD_INT 1
27120: DEC
27121: ST_TO_ADDR
27122: LD_INT 8
27124: PUSH
27125: FOR_TO
27126: IFFALSE 27174
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27128: LD_OWVAR 2
27132: PUSH
27133: LD_VAR 0 1
27137: NONEQUAL
27138: PUSH
27139: LD_OWVAR 2
27143: PPUSH
27144: LD_VAR 0 1
27148: PPUSH
27149: CALL_OW 81
27153: PUSH
27154: LD_INT 2
27156: EQUAL
27157: AND
27158: IFFALSE 27172
// begin side := i ;
27160: LD_ADDR_VAR 0 3
27164: PUSH
27165: LD_VAR 0 1
27169: ST_TO_ADDR
// break ;
27170: GO 27174
// end ;
27172: GO 27125
27174: POP
27175: POP
// if not side then
27176: LD_VAR 0 3
27180: NOT
27181: IFFALSE 27185
// exit ;
27183: GO 27230
// for i := 1 to tmp do
27185: LD_ADDR_VAR 0 1
27189: PUSH
27190: DOUBLE
27191: LD_INT 1
27193: DEC
27194: ST_TO_ADDR
27195: LD_VAR 0 2
27199: PUSH
27200: FOR_TO
27201: IFFALSE 27228
// if Prob ( 60 ) then
27203: LD_INT 60
27205: PPUSH
27206: CALL_OW 13
27210: IFFALSE 27226
// SetSide ( i , side ) ;
27212: LD_VAR 0 1
27216: PPUSH
27217: LD_VAR 0 3
27221: PPUSH
27222: CALL_OW 235
27226: GO 27200
27228: POP
27229: POP
// end ;
27230: PPOPN 3
27232: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27233: LD_EXP 38
27237: PUSH
27238: LD_EXP 51
27242: AND
27243: IFFALSE 27362
27245: GO 27247
27247: DISABLE
27248: LD_INT 0
27250: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27251: LD_ADDR_VAR 0 1
27255: PUSH
27256: LD_INT 22
27258: PUSH
27259: LD_OWVAR 2
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 21
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 3
27280: PUSH
27281: LD_INT 23
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: PPUSH
27300: CALL_OW 69
27304: PUSH
27305: FOR_IN
27306: IFFALSE 27360
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27308: LD_VAR 0 1
27312: PPUSH
27313: CALL_OW 257
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 3
27326: PUSH
27327: LD_INT 4
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: IN
27336: IFFALSE 27358
// SetClass ( un , rand ( 1 , 4 ) ) ;
27338: LD_VAR 0 1
27342: PPUSH
27343: LD_INT 1
27345: PPUSH
27346: LD_INT 4
27348: PPUSH
27349: CALL_OW 12
27353: PPUSH
27354: CALL_OW 336
27358: GO 27305
27360: POP
27361: POP
// end ;
27362: PPOPN 1
27364: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27365: LD_EXP 38
27369: PUSH
27370: LD_EXP 50
27374: AND
27375: IFFALSE 27454
27377: GO 27379
27379: DISABLE
27380: LD_INT 0
27382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27383: LD_ADDR_VAR 0 1
27387: PUSH
27388: LD_INT 22
27390: PUSH
27391: LD_OWVAR 2
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 21
27402: PUSH
27403: LD_INT 3
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PPUSH
27414: CALL_OW 69
27418: ST_TO_ADDR
// if not tmp then
27419: LD_VAR 0 1
27423: NOT
27424: IFFALSE 27428
// exit ;
27426: GO 27454
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27428: LD_VAR 0 1
27432: PUSH
27433: LD_INT 1
27435: PPUSH
27436: LD_VAR 0 1
27440: PPUSH
27441: CALL_OW 12
27445: ARRAY
27446: PPUSH
27447: LD_INT 100
27449: PPUSH
27450: CALL_OW 234
// end ;
27454: PPOPN 1
27456: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27457: LD_EXP 38
27461: PUSH
27462: LD_EXP 52
27466: AND
27467: IFFALSE 27565
27469: GO 27471
27471: DISABLE
27472: LD_INT 0
27474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27475: LD_ADDR_VAR 0 1
27479: PUSH
27480: LD_INT 22
27482: PUSH
27483: LD_OWVAR 2
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 21
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PPUSH
27506: CALL_OW 69
27510: ST_TO_ADDR
// if not tmp then
27511: LD_VAR 0 1
27515: NOT
27516: IFFALSE 27520
// exit ;
27518: GO 27565
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27520: LD_VAR 0 1
27524: PUSH
27525: LD_INT 1
27527: PPUSH
27528: LD_VAR 0 1
27532: PPUSH
27533: CALL_OW 12
27537: ARRAY
27538: PPUSH
27539: LD_INT 1
27541: PPUSH
27542: LD_INT 4
27544: PPUSH
27545: CALL_OW 12
27549: PPUSH
27550: LD_INT 3000
27552: PPUSH
27553: LD_INT 9000
27555: PPUSH
27556: CALL_OW 12
27560: PPUSH
27561: CALL_OW 492
// end ;
27565: PPOPN 1
27567: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27568: LD_EXP 38
27572: PUSH
27573: LD_EXP 53
27577: AND
27578: IFFALSE 27598
27580: GO 27582
27582: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27583: LD_INT 1
27585: PPUSH
27586: LD_OWVAR 2
27590: PPUSH
27591: LD_INT 0
27593: PPUSH
27594: CALL_OW 324
27598: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27599: LD_EXP 38
27603: PUSH
27604: LD_EXP 54
27608: AND
27609: IFFALSE 27692
27611: GO 27613
27613: DISABLE
27614: LD_INT 0
27616: PPUSH
27617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27618: LD_ADDR_VAR 0 2
27622: PUSH
27623: LD_INT 22
27625: PUSH
27626: LD_OWVAR 2
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 21
27637: PUSH
27638: LD_INT 3
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PPUSH
27649: CALL_OW 69
27653: ST_TO_ADDR
// if not tmp then
27654: LD_VAR 0 2
27658: NOT
27659: IFFALSE 27663
// exit ;
27661: GO 27692
// for i in tmp do
27663: LD_ADDR_VAR 0 1
27667: PUSH
27668: LD_VAR 0 2
27672: PUSH
27673: FOR_IN
27674: IFFALSE 27690
// SetBLevel ( i , 10 ) ;
27676: LD_VAR 0 1
27680: PPUSH
27681: LD_INT 10
27683: PPUSH
27684: CALL_OW 241
27688: GO 27673
27690: POP
27691: POP
// end ;
27692: PPOPN 2
27694: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27695: LD_EXP 38
27699: PUSH
27700: LD_EXP 55
27704: AND
27705: IFFALSE 27816
27707: GO 27709
27709: DISABLE
27710: LD_INT 0
27712: PPUSH
27713: PPUSH
27714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27715: LD_ADDR_VAR 0 3
27719: PUSH
27720: LD_INT 22
27722: PUSH
27723: LD_OWVAR 2
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 25
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PPUSH
27746: CALL_OW 69
27750: ST_TO_ADDR
// if not tmp then
27751: LD_VAR 0 3
27755: NOT
27756: IFFALSE 27760
// exit ;
27758: GO 27816
// un := tmp [ rand ( 1 , tmp ) ] ;
27760: LD_ADDR_VAR 0 2
27764: PUSH
27765: LD_VAR 0 3
27769: PUSH
27770: LD_INT 1
27772: PPUSH
27773: LD_VAR 0 3
27777: PPUSH
27778: CALL_OW 12
27782: ARRAY
27783: ST_TO_ADDR
// if Crawls ( un ) then
27784: LD_VAR 0 2
27788: PPUSH
27789: CALL_OW 318
27793: IFFALSE 27804
// ComWalk ( un ) ;
27795: LD_VAR 0 2
27799: PPUSH
27800: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27804: LD_VAR 0 2
27808: PPUSH
27809: LD_INT 5
27811: PPUSH
27812: CALL_OW 336
// end ;
27816: PPOPN 3
27818: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27819: LD_EXP 38
27823: PUSH
27824: LD_EXP 56
27828: AND
27829: PUSH
27830: LD_OWVAR 67
27834: PUSH
27835: LD_INT 4
27837: LESS
27838: AND
27839: IFFALSE 27858
27841: GO 27843
27843: DISABLE
// begin Difficulty := Difficulty + 1 ;
27844: LD_ADDR_OWVAR 67
27848: PUSH
27849: LD_OWVAR 67
27853: PUSH
27854: LD_INT 1
27856: PLUS
27857: ST_TO_ADDR
// end ;
27858: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27859: LD_EXP 38
27863: PUSH
27864: LD_EXP 57
27868: AND
27869: IFFALSE 27972
27871: GO 27873
27873: DISABLE
27874: LD_INT 0
27876: PPUSH
// begin for i := 1 to 5 do
27877: LD_ADDR_VAR 0 1
27881: PUSH
27882: DOUBLE
27883: LD_INT 1
27885: DEC
27886: ST_TO_ADDR
27887: LD_INT 5
27889: PUSH
27890: FOR_TO
27891: IFFALSE 27970
// begin uc_nation := nation_nature ;
27893: LD_ADDR_OWVAR 21
27897: PUSH
27898: LD_INT 0
27900: ST_TO_ADDR
// uc_side := 0 ;
27901: LD_ADDR_OWVAR 20
27905: PUSH
27906: LD_INT 0
27908: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27909: LD_ADDR_OWVAR 29
27913: PUSH
27914: LD_INT 12
27916: PUSH
27917: LD_INT 12
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: ST_TO_ADDR
// hc_agressivity := 20 ;
27924: LD_ADDR_OWVAR 35
27928: PUSH
27929: LD_INT 20
27931: ST_TO_ADDR
// hc_class := class_tiger ;
27932: LD_ADDR_OWVAR 28
27936: PUSH
27937: LD_INT 14
27939: ST_TO_ADDR
// hc_gallery :=  ;
27940: LD_ADDR_OWVAR 33
27944: PUSH
27945: LD_STRING 
27947: ST_TO_ADDR
// hc_name :=  ;
27948: LD_ADDR_OWVAR 26
27952: PUSH
27953: LD_STRING 
27955: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27956: CALL_OW 44
27960: PPUSH
27961: LD_INT 0
27963: PPUSH
27964: CALL_OW 51
// end ;
27968: GO 27890
27970: POP
27971: POP
// end ;
27972: PPOPN 1
27974: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27975: LD_EXP 38
27979: PUSH
27980: LD_EXP 58
27984: AND
27985: IFFALSE 27994
27987: GO 27989
27989: DISABLE
// StreamSibBomb ;
27990: CALL 27995 0 0
27994: END
// export function StreamSibBomb ; var i , x , y ; begin
27995: LD_INT 0
27997: PPUSH
27998: PPUSH
27999: PPUSH
28000: PPUSH
// result := false ;
28001: LD_ADDR_VAR 0 1
28005: PUSH
28006: LD_INT 0
28008: ST_TO_ADDR
// for i := 1 to 16 do
28009: LD_ADDR_VAR 0 2
28013: PUSH
28014: DOUBLE
28015: LD_INT 1
28017: DEC
28018: ST_TO_ADDR
28019: LD_INT 16
28021: PUSH
28022: FOR_TO
28023: IFFALSE 28222
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28025: LD_ADDR_VAR 0 3
28029: PUSH
28030: LD_INT 10
28032: PUSH
28033: LD_INT 20
28035: PUSH
28036: LD_INT 30
28038: PUSH
28039: LD_INT 40
28041: PUSH
28042: LD_INT 50
28044: PUSH
28045: LD_INT 60
28047: PUSH
28048: LD_INT 70
28050: PUSH
28051: LD_INT 80
28053: PUSH
28054: LD_INT 90
28056: PUSH
28057: LD_INT 100
28059: PUSH
28060: LD_INT 110
28062: PUSH
28063: LD_INT 120
28065: PUSH
28066: LD_INT 130
28068: PUSH
28069: LD_INT 140
28071: PUSH
28072: LD_INT 150
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: PPUSH
28095: LD_INT 15
28097: PPUSH
28098: CALL_OW 12
28102: ARRAY
28103: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28104: LD_ADDR_VAR 0 4
28108: PUSH
28109: LD_INT 10
28111: PUSH
28112: LD_INT 20
28114: PUSH
28115: LD_INT 30
28117: PUSH
28118: LD_INT 40
28120: PUSH
28121: LD_INT 50
28123: PUSH
28124: LD_INT 60
28126: PUSH
28127: LD_INT 70
28129: PUSH
28130: LD_INT 80
28132: PUSH
28133: LD_INT 90
28135: PUSH
28136: LD_INT 100
28138: PUSH
28139: LD_INT 110
28141: PUSH
28142: LD_INT 120
28144: PUSH
28145: LD_INT 130
28147: PUSH
28148: LD_INT 140
28150: PUSH
28151: LD_INT 150
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 1
28173: PPUSH
28174: LD_INT 15
28176: PPUSH
28177: CALL_OW 12
28181: ARRAY
28182: ST_TO_ADDR
// if ValidHex ( x , y ) then
28183: LD_VAR 0 3
28187: PPUSH
28188: LD_VAR 0 4
28192: PPUSH
28193: CALL_OW 488
28197: IFFALSE 28220
// begin result := [ x , y ] ;
28199: LD_ADDR_VAR 0 1
28203: PUSH
28204: LD_VAR 0 3
28208: PUSH
28209: LD_VAR 0 4
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: ST_TO_ADDR
// break ;
28218: GO 28222
// end ; end ;
28220: GO 28022
28222: POP
28223: POP
// if result then
28224: LD_VAR 0 1
28228: IFFALSE 28288
// begin ToLua ( playSibBomb() ) ;
28230: LD_STRING playSibBomb()
28232: PPUSH
28233: CALL_OW 559
// wait ( 0 0$14 ) ;
28237: LD_INT 490
28239: PPUSH
28240: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28244: LD_VAR 0 1
28248: PUSH
28249: LD_INT 1
28251: ARRAY
28252: PPUSH
28253: LD_VAR 0 1
28257: PUSH
28258: LD_INT 2
28260: ARRAY
28261: PPUSH
28262: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28266: LD_VAR 0 1
28270: PUSH
28271: LD_INT 1
28273: ARRAY
28274: PPUSH
28275: LD_VAR 0 1
28279: PUSH
28280: LD_INT 2
28282: ARRAY
28283: PPUSH
28284: CALL_OW 429
// end ; end ;
28288: LD_VAR 0 1
28292: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28293: LD_EXP 38
28297: PUSH
28298: LD_EXP 60
28302: AND
28303: IFFALSE 28315
28305: GO 28307
28307: DISABLE
// YouLost (  ) ;
28308: LD_STRING 
28310: PPUSH
28311: CALL_OW 104
28315: END
// every 0 0$1 trigger StreamModeActive and sFog do
28316: LD_EXP 38
28320: PUSH
28321: LD_EXP 59
28325: AND
28326: IFFALSE 28340
28328: GO 28330
28330: DISABLE
// FogOff ( your_side ) ;
28331: LD_OWVAR 2
28335: PPUSH
28336: CALL_OW 344
28340: END
// every 0 0$1 trigger StreamModeActive and sSun do
28341: LD_EXP 38
28345: PUSH
28346: LD_EXP 61
28350: AND
28351: IFFALSE 28379
28353: GO 28355
28355: DISABLE
// begin solar_recharge_percent := 0 ;
28356: LD_ADDR_OWVAR 79
28360: PUSH
28361: LD_INT 0
28363: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28364: LD_INT 10500
28366: PPUSH
28367: CALL_OW 67
// solar_recharge_percent := 100 ;
28371: LD_ADDR_OWVAR 79
28375: PUSH
28376: LD_INT 100
28378: ST_TO_ADDR
// end ;
28379: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28380: LD_EXP 38
28384: PUSH
28385: LD_EXP 62
28389: AND
28390: IFFALSE 28629
28392: GO 28394
28394: DISABLE
28395: LD_INT 0
28397: PPUSH
28398: PPUSH
28399: PPUSH
// begin tmp := [ ] ;
28400: LD_ADDR_VAR 0 3
28404: PUSH
28405: EMPTY
28406: ST_TO_ADDR
// for i := 1 to 6 do
28407: LD_ADDR_VAR 0 1
28411: PUSH
28412: DOUBLE
28413: LD_INT 1
28415: DEC
28416: ST_TO_ADDR
28417: LD_INT 6
28419: PUSH
28420: FOR_TO
28421: IFFALSE 28526
// begin uc_nation := nation_nature ;
28423: LD_ADDR_OWVAR 21
28427: PUSH
28428: LD_INT 0
28430: ST_TO_ADDR
// uc_side := 0 ;
28431: LD_ADDR_OWVAR 20
28435: PUSH
28436: LD_INT 0
28438: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28439: LD_ADDR_OWVAR 29
28443: PUSH
28444: LD_INT 12
28446: PUSH
28447: LD_INT 12
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: ST_TO_ADDR
// hc_agressivity := 20 ;
28454: LD_ADDR_OWVAR 35
28458: PUSH
28459: LD_INT 20
28461: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28462: LD_ADDR_OWVAR 28
28466: PUSH
28467: LD_INT 17
28469: ST_TO_ADDR
// hc_gallery :=  ;
28470: LD_ADDR_OWVAR 33
28474: PUSH
28475: LD_STRING 
28477: ST_TO_ADDR
// hc_name :=  ;
28478: LD_ADDR_OWVAR 26
28482: PUSH
28483: LD_STRING 
28485: ST_TO_ADDR
// un := CreateHuman ;
28486: LD_ADDR_VAR 0 2
28490: PUSH
28491: CALL_OW 44
28495: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28496: LD_VAR 0 2
28500: PPUSH
28501: LD_INT 1
28503: PPUSH
28504: CALL_OW 51
// tmp := tmp ^ un ;
28508: LD_ADDR_VAR 0 3
28512: PUSH
28513: LD_VAR 0 3
28517: PUSH
28518: LD_VAR 0 2
28522: ADD
28523: ST_TO_ADDR
// end ;
28524: GO 28420
28526: POP
28527: POP
// repeat wait ( 0 0$1 ) ;
28528: LD_INT 35
28530: PPUSH
28531: CALL_OW 67
// for un in tmp do
28535: LD_ADDR_VAR 0 2
28539: PUSH
28540: LD_VAR 0 3
28544: PUSH
28545: FOR_IN
28546: IFFALSE 28620
// begin if IsDead ( un ) then
28548: LD_VAR 0 2
28552: PPUSH
28553: CALL_OW 301
28557: IFFALSE 28577
// begin tmp := tmp diff un ;
28559: LD_ADDR_VAR 0 3
28563: PUSH
28564: LD_VAR 0 3
28568: PUSH
28569: LD_VAR 0 2
28573: DIFF
28574: ST_TO_ADDR
// continue ;
28575: GO 28545
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28577: LD_VAR 0 2
28581: PPUSH
28582: LD_INT 3
28584: PUSH
28585: LD_INT 22
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PPUSH
28599: CALL_OW 69
28603: PPUSH
28604: LD_VAR 0 2
28608: PPUSH
28609: CALL_OW 74
28613: PPUSH
28614: CALL_OW 115
// end ;
28618: GO 28545
28620: POP
28621: POP
// until not tmp ;
28622: LD_VAR 0 3
28626: NOT
28627: IFFALSE 28528
// end ;
28629: PPOPN 3
28631: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28632: LD_EXP 38
28636: PUSH
28637: LD_EXP 63
28641: AND
28642: IFFALSE 28696
28644: GO 28646
28646: DISABLE
// begin ToLua ( displayTroll(); ) ;
28647: LD_STRING displayTroll();
28649: PPUSH
28650: CALL_OW 559
// wait ( 3 3$00 ) ;
28654: LD_INT 6300
28656: PPUSH
28657: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28661: LD_STRING hideTroll();
28663: PPUSH
28664: CALL_OW 559
// wait ( 1 1$00 ) ;
28668: LD_INT 2100
28670: PPUSH
28671: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28675: LD_STRING displayTroll();
28677: PPUSH
28678: CALL_OW 559
// wait ( 1 1$00 ) ;
28682: LD_INT 2100
28684: PPUSH
28685: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28689: LD_STRING hideTroll();
28691: PPUSH
28692: CALL_OW 559
// end ;
28696: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28697: LD_EXP 38
28701: PUSH
28702: LD_EXP 64
28706: AND
28707: IFFALSE 28770
28709: GO 28711
28711: DISABLE
28712: LD_INT 0
28714: PPUSH
// begin p := 0 ;
28715: LD_ADDR_VAR 0 1
28719: PUSH
28720: LD_INT 0
28722: ST_TO_ADDR
// repeat game_speed := 1 ;
28723: LD_ADDR_OWVAR 65
28727: PUSH
28728: LD_INT 1
28730: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28731: LD_INT 35
28733: PPUSH
28734: CALL_OW 67
// p := p + 1 ;
28738: LD_ADDR_VAR 0 1
28742: PUSH
28743: LD_VAR 0 1
28747: PUSH
28748: LD_INT 1
28750: PLUS
28751: ST_TO_ADDR
// until p >= 60 ;
28752: LD_VAR 0 1
28756: PUSH
28757: LD_INT 60
28759: GREATEREQUAL
28760: IFFALSE 28723
// game_speed := 4 ;
28762: LD_ADDR_OWVAR 65
28766: PUSH
28767: LD_INT 4
28769: ST_TO_ADDR
// end ;
28770: PPOPN 1
28772: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28773: LD_EXP 38
28777: PUSH
28778: LD_EXP 65
28782: AND
28783: IFFALSE 28929
28785: GO 28787
28787: DISABLE
28788: LD_INT 0
28790: PPUSH
28791: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28792: LD_ADDR_VAR 0 1
28796: PUSH
28797: LD_INT 22
28799: PUSH
28800: LD_OWVAR 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: LD_INT 30
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 30
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PPUSH
28841: CALL_OW 69
28845: ST_TO_ADDR
// if not depot then
28846: LD_VAR 0 1
28850: NOT
28851: IFFALSE 28855
// exit ;
28853: GO 28929
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28855: LD_ADDR_VAR 0 2
28859: PUSH
28860: LD_VAR 0 1
28864: PUSH
28865: LD_INT 1
28867: PPUSH
28868: LD_VAR 0 1
28872: PPUSH
28873: CALL_OW 12
28877: ARRAY
28878: PPUSH
28879: CALL_OW 274
28883: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28884: LD_VAR 0 2
28888: PPUSH
28889: LD_INT 1
28891: PPUSH
28892: LD_INT 0
28894: PPUSH
28895: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28899: LD_VAR 0 2
28903: PPUSH
28904: LD_INT 2
28906: PPUSH
28907: LD_INT 0
28909: PPUSH
28910: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28914: LD_VAR 0 2
28918: PPUSH
28919: LD_INT 3
28921: PPUSH
28922: LD_INT 0
28924: PPUSH
28925: CALL_OW 277
// end ;
28929: PPOPN 2
28931: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28932: LD_EXP 38
28936: PUSH
28937: LD_EXP 66
28941: AND
28942: IFFALSE 29039
28944: GO 28946
28946: DISABLE
28947: LD_INT 0
28949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28950: LD_ADDR_VAR 0 1
28954: PUSH
28955: LD_INT 22
28957: PUSH
28958: LD_OWVAR 2
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 21
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 3
28979: PUSH
28980: LD_INT 23
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: LIST
28998: PPUSH
28999: CALL_OW 69
29003: ST_TO_ADDR
// if not tmp then
29004: LD_VAR 0 1
29008: NOT
29009: IFFALSE 29013
// exit ;
29011: GO 29039
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29013: LD_VAR 0 1
29017: PUSH
29018: LD_INT 1
29020: PPUSH
29021: LD_VAR 0 1
29025: PPUSH
29026: CALL_OW 12
29030: ARRAY
29031: PPUSH
29032: LD_INT 200
29034: PPUSH
29035: CALL_OW 234
// end ;
29039: PPOPN 1
29041: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29042: LD_EXP 38
29046: PUSH
29047: LD_EXP 67
29051: AND
29052: IFFALSE 29131
29054: GO 29056
29056: DISABLE
29057: LD_INT 0
29059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29060: LD_ADDR_VAR 0 1
29064: PUSH
29065: LD_INT 22
29067: PUSH
29068: LD_OWVAR 2
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 21
29079: PUSH
29080: LD_INT 2
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PPUSH
29091: CALL_OW 69
29095: ST_TO_ADDR
// if not tmp then
29096: LD_VAR 0 1
29100: NOT
29101: IFFALSE 29105
// exit ;
29103: GO 29131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29105: LD_VAR 0 1
29109: PUSH
29110: LD_INT 1
29112: PPUSH
29113: LD_VAR 0 1
29117: PPUSH
29118: CALL_OW 12
29122: ARRAY
29123: PPUSH
29124: LD_INT 60
29126: PPUSH
29127: CALL_OW 234
// end ;
29131: PPOPN 1
29133: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29134: LD_EXP 38
29138: PUSH
29139: LD_EXP 68
29143: AND
29144: IFFALSE 29243
29146: GO 29148
29148: DISABLE
29149: LD_INT 0
29151: PPUSH
29152: PPUSH
// begin enable ;
29153: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29154: LD_ADDR_VAR 0 1
29158: PUSH
29159: LD_INT 22
29161: PUSH
29162: LD_OWVAR 2
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 61
29173: PUSH
29174: EMPTY
29175: LIST
29176: PUSH
29177: LD_INT 33
29179: PUSH
29180: LD_INT 2
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: LIST
29191: PPUSH
29192: CALL_OW 69
29196: ST_TO_ADDR
// if not tmp then
29197: LD_VAR 0 1
29201: NOT
29202: IFFALSE 29206
// exit ;
29204: GO 29243
// for i in tmp do
29206: LD_ADDR_VAR 0 2
29210: PUSH
29211: LD_VAR 0 1
29215: PUSH
29216: FOR_IN
29217: IFFALSE 29241
// if IsControledBy ( i ) then
29219: LD_VAR 0 2
29223: PPUSH
29224: CALL_OW 312
29228: IFFALSE 29239
// ComUnlink ( i ) ;
29230: LD_VAR 0 2
29234: PPUSH
29235: CALL_OW 136
29239: GO 29216
29241: POP
29242: POP
// end ;
29243: PPOPN 2
29245: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29246: LD_EXP 38
29250: PUSH
29251: LD_EXP 69
29255: AND
29256: IFFALSE 29396
29258: GO 29260
29260: DISABLE
29261: LD_INT 0
29263: PPUSH
29264: PPUSH
// begin ToLua ( displayPowell(); ) ;
29265: LD_STRING displayPowell();
29267: PPUSH
29268: CALL_OW 559
// uc_side := 0 ;
29272: LD_ADDR_OWVAR 20
29276: PUSH
29277: LD_INT 0
29279: ST_TO_ADDR
// uc_nation := 2 ;
29280: LD_ADDR_OWVAR 21
29284: PUSH
29285: LD_INT 2
29287: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29288: LD_ADDR_OWVAR 37
29292: PUSH
29293: LD_INT 14
29295: ST_TO_ADDR
// vc_engine := engine_siberite ;
29296: LD_ADDR_OWVAR 39
29300: PUSH
29301: LD_INT 3
29303: ST_TO_ADDR
// vc_control := control_apeman ;
29304: LD_ADDR_OWVAR 38
29308: PUSH
29309: LD_INT 5
29311: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29312: LD_ADDR_OWVAR 40
29316: PUSH
29317: LD_INT 29
29319: ST_TO_ADDR
// un := CreateVehicle ;
29320: LD_ADDR_VAR 0 2
29324: PUSH
29325: CALL_OW 45
29329: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29330: LD_VAR 0 2
29334: PPUSH
29335: LD_INT 1
29337: PPUSH
29338: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29342: LD_INT 35
29344: PPUSH
29345: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29349: LD_VAR 0 2
29353: PPUSH
29354: LD_INT 22
29356: PUSH
29357: LD_OWVAR 2
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PPUSH
29366: CALL_OW 69
29370: PPUSH
29371: LD_VAR 0 2
29375: PPUSH
29376: CALL_OW 74
29380: PPUSH
29381: CALL_OW 115
// until IsDead ( un ) ;
29385: LD_VAR 0 2
29389: PPUSH
29390: CALL_OW 301
29394: IFFALSE 29342
// end ;
29396: PPOPN 2
29398: END
// every 0 0$1 trigger StreamModeActive and sStu do
29399: LD_EXP 38
29403: PUSH
29404: LD_EXP 77
29408: AND
29409: IFFALSE 29425
29411: GO 29413
29413: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29414: LD_STRING displayStucuk();
29416: PPUSH
29417: CALL_OW 559
// ResetFog ;
29421: CALL_OW 335
// end ;
29425: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29426: LD_EXP 38
29430: PUSH
29431: LD_EXP 70
29435: AND
29436: IFFALSE 29577
29438: GO 29440
29440: DISABLE
29441: LD_INT 0
29443: PPUSH
29444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29445: LD_ADDR_VAR 0 2
29449: PUSH
29450: LD_INT 22
29452: PUSH
29453: LD_OWVAR 2
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 21
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PPUSH
29476: CALL_OW 69
29480: ST_TO_ADDR
// if not tmp then
29481: LD_VAR 0 2
29485: NOT
29486: IFFALSE 29490
// exit ;
29488: GO 29577
// un := tmp [ rand ( 1 , tmp ) ] ;
29490: LD_ADDR_VAR 0 1
29494: PUSH
29495: LD_VAR 0 2
29499: PUSH
29500: LD_INT 1
29502: PPUSH
29503: LD_VAR 0 2
29507: PPUSH
29508: CALL_OW 12
29512: ARRAY
29513: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29514: LD_VAR 0 1
29518: PPUSH
29519: LD_INT 0
29521: PPUSH
29522: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29526: LD_VAR 0 1
29530: PPUSH
29531: LD_OWVAR 3
29535: PUSH
29536: LD_VAR 0 1
29540: DIFF
29541: PPUSH
29542: LD_VAR 0 1
29546: PPUSH
29547: CALL_OW 74
29551: PPUSH
29552: CALL_OW 115
// wait ( 0 0$20 ) ;
29556: LD_INT 700
29558: PPUSH
29559: CALL_OW 67
// SetSide ( un , your_side ) ;
29563: LD_VAR 0 1
29567: PPUSH
29568: LD_OWVAR 2
29572: PPUSH
29573: CALL_OW 235
// end ;
29577: PPOPN 2
29579: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29580: LD_EXP 38
29584: PUSH
29585: LD_EXP 71
29589: AND
29590: IFFALSE 29696
29592: GO 29594
29594: DISABLE
29595: LD_INT 0
29597: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29598: LD_ADDR_VAR 0 1
29602: PUSH
29603: LD_INT 22
29605: PUSH
29606: LD_OWVAR 2
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: LD_INT 30
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 30
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PPUSH
29647: CALL_OW 69
29651: ST_TO_ADDR
// if not depot then
29652: LD_VAR 0 1
29656: NOT
29657: IFFALSE 29661
// exit ;
29659: GO 29696
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29661: LD_VAR 0 1
29665: PUSH
29666: LD_INT 1
29668: ARRAY
29669: PPUSH
29670: CALL_OW 250
29674: PPUSH
29675: LD_VAR 0 1
29679: PUSH
29680: LD_INT 1
29682: ARRAY
29683: PPUSH
29684: CALL_OW 251
29688: PPUSH
29689: LD_INT 70
29691: PPUSH
29692: CALL_OW 495
// end ;
29696: PPOPN 1
29698: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29699: LD_EXP 38
29703: PUSH
29704: LD_EXP 72
29708: AND
29709: IFFALSE 29920
29711: GO 29713
29713: DISABLE
29714: LD_INT 0
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29721: LD_ADDR_VAR 0 5
29725: PUSH
29726: LD_INT 22
29728: PUSH
29729: LD_OWVAR 2
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 21
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PPUSH
29752: CALL_OW 69
29756: ST_TO_ADDR
// if not tmp then
29757: LD_VAR 0 5
29761: NOT
29762: IFFALSE 29766
// exit ;
29764: GO 29920
// for i in tmp do
29766: LD_ADDR_VAR 0 1
29770: PUSH
29771: LD_VAR 0 5
29775: PUSH
29776: FOR_IN
29777: IFFALSE 29918
// begin d := rand ( 0 , 5 ) ;
29779: LD_ADDR_VAR 0 4
29783: PUSH
29784: LD_INT 0
29786: PPUSH
29787: LD_INT 5
29789: PPUSH
29790: CALL_OW 12
29794: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29795: LD_ADDR_VAR 0 2
29799: PUSH
29800: LD_VAR 0 1
29804: PPUSH
29805: CALL_OW 250
29809: PPUSH
29810: LD_VAR 0 4
29814: PPUSH
29815: LD_INT 3
29817: PPUSH
29818: LD_INT 12
29820: PPUSH
29821: CALL_OW 12
29825: PPUSH
29826: CALL_OW 272
29830: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29831: LD_ADDR_VAR 0 3
29835: PUSH
29836: LD_VAR 0 1
29840: PPUSH
29841: CALL_OW 251
29845: PPUSH
29846: LD_VAR 0 4
29850: PPUSH
29851: LD_INT 3
29853: PPUSH
29854: LD_INT 12
29856: PPUSH
29857: CALL_OW 12
29861: PPUSH
29862: CALL_OW 273
29866: ST_TO_ADDR
// if ValidHex ( x , y ) then
29867: LD_VAR 0 2
29871: PPUSH
29872: LD_VAR 0 3
29876: PPUSH
29877: CALL_OW 488
29881: IFFALSE 29916
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29883: LD_VAR 0 1
29887: PPUSH
29888: LD_VAR 0 2
29892: PPUSH
29893: LD_VAR 0 3
29897: PPUSH
29898: LD_INT 3
29900: PPUSH
29901: LD_INT 6
29903: PPUSH
29904: CALL_OW 12
29908: PPUSH
29909: LD_INT 1
29911: PPUSH
29912: CALL_OW 483
// end ;
29916: GO 29776
29918: POP
29919: POP
// end ;
29920: PPOPN 5
29922: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29923: LD_EXP 38
29927: PUSH
29928: LD_EXP 73
29932: AND
29933: IFFALSE 30027
29935: GO 29937
29937: DISABLE
29938: LD_INT 0
29940: PPUSH
29941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29942: LD_ADDR_VAR 0 2
29946: PUSH
29947: LD_INT 22
29949: PUSH
29950: LD_OWVAR 2
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 32
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 21
29971: PUSH
29972: LD_INT 2
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: LIST
29983: PPUSH
29984: CALL_OW 69
29988: ST_TO_ADDR
// if not tmp then
29989: LD_VAR 0 2
29993: NOT
29994: IFFALSE 29998
// exit ;
29996: GO 30027
// for i in tmp do
29998: LD_ADDR_VAR 0 1
30002: PUSH
30003: LD_VAR 0 2
30007: PUSH
30008: FOR_IN
30009: IFFALSE 30025
// SetFuel ( i , 0 ) ;
30011: LD_VAR 0 1
30015: PPUSH
30016: LD_INT 0
30018: PPUSH
30019: CALL_OW 240
30023: GO 30008
30025: POP
30026: POP
// end ;
30027: PPOPN 2
30029: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30030: LD_EXP 38
30034: PUSH
30035: LD_EXP 74
30039: AND
30040: IFFALSE 30106
30042: GO 30044
30044: DISABLE
30045: LD_INT 0
30047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30048: LD_ADDR_VAR 0 1
30052: PUSH
30053: LD_INT 22
30055: PUSH
30056: LD_OWVAR 2
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 30
30067: PUSH
30068: LD_INT 29
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PPUSH
30079: CALL_OW 69
30083: ST_TO_ADDR
// if not tmp then
30084: LD_VAR 0 1
30088: NOT
30089: IFFALSE 30093
// exit ;
30091: GO 30106
// DestroyUnit ( tmp [ 1 ] ) ;
30093: LD_VAR 0 1
30097: PUSH
30098: LD_INT 1
30100: ARRAY
30101: PPUSH
30102: CALL_OW 65
// end ;
30106: PPOPN 1
30108: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30109: LD_EXP 38
30113: PUSH
30114: LD_EXP 76
30118: AND
30119: IFFALSE 30248
30121: GO 30123
30123: DISABLE
30124: LD_INT 0
30126: PPUSH
// begin uc_side := 0 ;
30127: LD_ADDR_OWVAR 20
30131: PUSH
30132: LD_INT 0
30134: ST_TO_ADDR
// uc_nation := nation_arabian ;
30135: LD_ADDR_OWVAR 21
30139: PUSH
30140: LD_INT 2
30142: ST_TO_ADDR
// hc_gallery :=  ;
30143: LD_ADDR_OWVAR 33
30147: PUSH
30148: LD_STRING 
30150: ST_TO_ADDR
// hc_name :=  ;
30151: LD_ADDR_OWVAR 26
30155: PUSH
30156: LD_STRING 
30158: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30159: LD_INT 1
30161: PPUSH
30162: LD_INT 11
30164: PPUSH
30165: LD_INT 10
30167: PPUSH
30168: CALL_OW 380
// un := CreateHuman ;
30172: LD_ADDR_VAR 0 1
30176: PUSH
30177: CALL_OW 44
30181: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30182: LD_VAR 0 1
30186: PPUSH
30187: LD_INT 1
30189: PPUSH
30190: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30194: LD_INT 35
30196: PPUSH
30197: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30201: LD_VAR 0 1
30205: PPUSH
30206: LD_INT 22
30208: PUSH
30209: LD_OWVAR 2
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PPUSH
30218: CALL_OW 69
30222: PPUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: CALL_OW 74
30232: PPUSH
30233: CALL_OW 115
// until IsDead ( un ) ;
30237: LD_VAR 0 1
30241: PPUSH
30242: CALL_OW 301
30246: IFFALSE 30194
// end ;
30248: PPOPN 1
30250: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30251: LD_EXP 38
30255: PUSH
30256: LD_EXP 78
30260: AND
30261: IFFALSE 30273
30263: GO 30265
30265: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30266: LD_STRING earthquake(getX(game), 0, 32)
30268: PPUSH
30269: CALL_OW 559
30273: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30274: LD_EXP 38
30278: PUSH
30279: LD_EXP 79
30283: AND
30284: IFFALSE 30375
30286: GO 30288
30288: DISABLE
30289: LD_INT 0
30291: PPUSH
// begin enable ;
30292: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30293: LD_ADDR_VAR 0 1
30297: PUSH
30298: LD_INT 22
30300: PUSH
30301: LD_OWVAR 2
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 21
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 33
30322: PUSH
30323: LD_INT 3
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: PPUSH
30335: CALL_OW 69
30339: ST_TO_ADDR
// if not tmp then
30340: LD_VAR 0 1
30344: NOT
30345: IFFALSE 30349
// exit ;
30347: GO 30375
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30349: LD_VAR 0 1
30353: PUSH
30354: LD_INT 1
30356: PPUSH
30357: LD_VAR 0 1
30361: PPUSH
30362: CALL_OW 12
30366: ARRAY
30367: PPUSH
30368: LD_INT 1
30370: PPUSH
30371: CALL_OW 234
// end ;
30375: PPOPN 1
30377: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30378: LD_EXP 38
30382: PUSH
30383: LD_EXP 80
30387: AND
30388: IFFALSE 30529
30390: GO 30392
30392: DISABLE
30393: LD_INT 0
30395: PPUSH
30396: PPUSH
30397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30398: LD_ADDR_VAR 0 3
30402: PUSH
30403: LD_INT 22
30405: PUSH
30406: LD_OWVAR 2
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 25
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PPUSH
30429: CALL_OW 69
30433: ST_TO_ADDR
// if not tmp then
30434: LD_VAR 0 3
30438: NOT
30439: IFFALSE 30443
// exit ;
30441: GO 30529
// un := tmp [ rand ( 1 , tmp ) ] ;
30443: LD_ADDR_VAR 0 2
30447: PUSH
30448: LD_VAR 0 3
30452: PUSH
30453: LD_INT 1
30455: PPUSH
30456: LD_VAR 0 3
30460: PPUSH
30461: CALL_OW 12
30465: ARRAY
30466: ST_TO_ADDR
// if Crawls ( un ) then
30467: LD_VAR 0 2
30471: PPUSH
30472: CALL_OW 318
30476: IFFALSE 30487
// ComWalk ( un ) ;
30478: LD_VAR 0 2
30482: PPUSH
30483: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30487: LD_VAR 0 2
30491: PPUSH
30492: LD_INT 9
30494: PPUSH
30495: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30499: LD_INT 28
30501: PPUSH
30502: LD_OWVAR 2
30506: PPUSH
30507: LD_INT 2
30509: PPUSH
30510: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30514: LD_INT 29
30516: PPUSH
30517: LD_OWVAR 2
30521: PPUSH
30522: LD_INT 2
30524: PPUSH
30525: CALL_OW 322
// end ;
30529: PPOPN 3
30531: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30532: LD_EXP 38
30536: PUSH
30537: LD_EXP 81
30541: AND
30542: IFFALSE 30653
30544: GO 30546
30546: DISABLE
30547: LD_INT 0
30549: PPUSH
30550: PPUSH
30551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30552: LD_ADDR_VAR 0 3
30556: PUSH
30557: LD_INT 22
30559: PUSH
30560: LD_OWVAR 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 25
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PPUSH
30583: CALL_OW 69
30587: ST_TO_ADDR
// if not tmp then
30588: LD_VAR 0 3
30592: NOT
30593: IFFALSE 30597
// exit ;
30595: GO 30653
// un := tmp [ rand ( 1 , tmp ) ] ;
30597: LD_ADDR_VAR 0 2
30601: PUSH
30602: LD_VAR 0 3
30606: PUSH
30607: LD_INT 1
30609: PPUSH
30610: LD_VAR 0 3
30614: PPUSH
30615: CALL_OW 12
30619: ARRAY
30620: ST_TO_ADDR
// if Crawls ( un ) then
30621: LD_VAR 0 2
30625: PPUSH
30626: CALL_OW 318
30630: IFFALSE 30641
// ComWalk ( un ) ;
30632: LD_VAR 0 2
30636: PPUSH
30637: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30641: LD_VAR 0 2
30645: PPUSH
30646: LD_INT 8
30648: PPUSH
30649: CALL_OW 336
// end ;
30653: PPOPN 3
30655: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30656: LD_EXP 38
30660: PUSH
30661: LD_EXP 82
30665: AND
30666: IFFALSE 30810
30668: GO 30670
30670: DISABLE
30671: LD_INT 0
30673: PPUSH
30674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30675: LD_ADDR_VAR 0 2
30679: PUSH
30680: LD_INT 22
30682: PUSH
30683: LD_OWVAR 2
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 21
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 2
30704: PUSH
30705: LD_INT 34
30707: PUSH
30708: LD_INT 12
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 34
30717: PUSH
30718: LD_INT 51
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 34
30727: PUSH
30728: LD_INT 32
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: LIST
30745: PPUSH
30746: CALL_OW 69
30750: ST_TO_ADDR
// if not tmp then
30751: LD_VAR 0 2
30755: NOT
30756: IFFALSE 30760
// exit ;
30758: GO 30810
// for i in tmp do
30760: LD_ADDR_VAR 0 1
30764: PUSH
30765: LD_VAR 0 2
30769: PUSH
30770: FOR_IN
30771: IFFALSE 30808
// if GetCargo ( i , mat_artifact ) = 0 then
30773: LD_VAR 0 1
30777: PPUSH
30778: LD_INT 4
30780: PPUSH
30781: CALL_OW 289
30785: PUSH
30786: LD_INT 0
30788: EQUAL
30789: IFFALSE 30806
// SetCargo ( i , mat_siberit , 100 ) ;
30791: LD_VAR 0 1
30795: PPUSH
30796: LD_INT 3
30798: PPUSH
30799: LD_INT 100
30801: PPUSH
30802: CALL_OW 290
30806: GO 30770
30808: POP
30809: POP
// end ;
30810: PPOPN 2
30812: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30813: LD_EXP 38
30817: PUSH
30818: LD_EXP 83
30822: AND
30823: IFFALSE 31006
30825: GO 30827
30827: DISABLE
30828: LD_INT 0
30830: PPUSH
30831: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30832: LD_ADDR_VAR 0 2
30836: PUSH
30837: LD_INT 22
30839: PUSH
30840: LD_OWVAR 2
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PPUSH
30849: CALL_OW 69
30853: ST_TO_ADDR
// if not tmp then
30854: LD_VAR 0 2
30858: NOT
30859: IFFALSE 30863
// exit ;
30861: GO 31006
// for i := 1 to 2 do
30863: LD_ADDR_VAR 0 1
30867: PUSH
30868: DOUBLE
30869: LD_INT 1
30871: DEC
30872: ST_TO_ADDR
30873: LD_INT 2
30875: PUSH
30876: FOR_TO
30877: IFFALSE 31004
// begin uc_side := your_side ;
30879: LD_ADDR_OWVAR 20
30883: PUSH
30884: LD_OWVAR 2
30888: ST_TO_ADDR
// uc_nation := nation_american ;
30889: LD_ADDR_OWVAR 21
30893: PUSH
30894: LD_INT 1
30896: ST_TO_ADDR
// vc_chassis := us_morphling ;
30897: LD_ADDR_OWVAR 37
30901: PUSH
30902: LD_INT 5
30904: ST_TO_ADDR
// vc_engine := engine_siberite ;
30905: LD_ADDR_OWVAR 39
30909: PUSH
30910: LD_INT 3
30912: ST_TO_ADDR
// vc_control := control_computer ;
30913: LD_ADDR_OWVAR 38
30917: PUSH
30918: LD_INT 3
30920: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30921: LD_ADDR_OWVAR 40
30925: PUSH
30926: LD_INT 10
30928: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30929: LD_VAR 0 2
30933: PUSH
30934: LD_INT 1
30936: ARRAY
30937: PPUSH
30938: CALL_OW 310
30942: NOT
30943: IFFALSE 30990
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30945: CALL_OW 45
30949: PPUSH
30950: LD_VAR 0 2
30954: PUSH
30955: LD_INT 1
30957: ARRAY
30958: PPUSH
30959: CALL_OW 250
30963: PPUSH
30964: LD_VAR 0 2
30968: PUSH
30969: LD_INT 1
30971: ARRAY
30972: PPUSH
30973: CALL_OW 251
30977: PPUSH
30978: LD_INT 12
30980: PPUSH
30981: LD_INT 1
30983: PPUSH
30984: CALL_OW 50
30988: GO 31002
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30990: CALL_OW 45
30994: PPUSH
30995: LD_INT 1
30997: PPUSH
30998: CALL_OW 51
// end ;
31002: GO 30876
31004: POP
31005: POP
// end ;
31006: PPOPN 2
31008: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31009: LD_EXP 38
31013: PUSH
31014: LD_EXP 84
31018: AND
31019: IFFALSE 31241
31021: GO 31023
31023: DISABLE
31024: LD_INT 0
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31032: LD_ADDR_VAR 0 6
31036: PUSH
31037: LD_INT 22
31039: PUSH
31040: LD_OWVAR 2
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 21
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 3
31061: PUSH
31062: LD_INT 23
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: LIST
31080: PPUSH
31081: CALL_OW 69
31085: ST_TO_ADDR
// if not tmp then
31086: LD_VAR 0 6
31090: NOT
31091: IFFALSE 31095
// exit ;
31093: GO 31241
// s1 := rand ( 1 , 4 ) ;
31095: LD_ADDR_VAR 0 2
31099: PUSH
31100: LD_INT 1
31102: PPUSH
31103: LD_INT 4
31105: PPUSH
31106: CALL_OW 12
31110: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31111: LD_ADDR_VAR 0 4
31115: PUSH
31116: LD_VAR 0 6
31120: PUSH
31121: LD_INT 1
31123: ARRAY
31124: PPUSH
31125: LD_VAR 0 2
31129: PPUSH
31130: CALL_OW 259
31134: ST_TO_ADDR
// if s1 = 1 then
31135: LD_VAR 0 2
31139: PUSH
31140: LD_INT 1
31142: EQUAL
31143: IFFALSE 31163
// s2 := rand ( 2 , 4 ) else
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_INT 2
31152: PPUSH
31153: LD_INT 4
31155: PPUSH
31156: CALL_OW 12
31160: ST_TO_ADDR
31161: GO 31171
// s2 := 1 ;
31163: LD_ADDR_VAR 0 3
31167: PUSH
31168: LD_INT 1
31170: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: LD_VAR 0 6
31180: PUSH
31181: LD_INT 1
31183: ARRAY
31184: PPUSH
31185: LD_VAR 0 3
31189: PPUSH
31190: CALL_OW 259
31194: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31195: LD_VAR 0 6
31199: PUSH
31200: LD_INT 1
31202: ARRAY
31203: PPUSH
31204: LD_VAR 0 2
31208: PPUSH
31209: LD_VAR 0 5
31213: PPUSH
31214: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31218: LD_VAR 0 6
31222: PUSH
31223: LD_INT 1
31225: ARRAY
31226: PPUSH
31227: LD_VAR 0 3
31231: PPUSH
31232: LD_VAR 0 4
31236: PPUSH
31237: CALL_OW 237
// end ;
31241: PPOPN 6
31243: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31244: LD_EXP 38
31248: PUSH
31249: LD_EXP 85
31253: AND
31254: IFFALSE 31333
31256: GO 31258
31258: DISABLE
31259: LD_INT 0
31261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31262: LD_ADDR_VAR 0 1
31266: PUSH
31267: LD_INT 22
31269: PUSH
31270: LD_OWVAR 2
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 30
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PPUSH
31293: CALL_OW 69
31297: ST_TO_ADDR
// if not tmp then
31298: LD_VAR 0 1
31302: NOT
31303: IFFALSE 31307
// exit ;
31305: GO 31333
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31307: LD_VAR 0 1
31311: PUSH
31312: LD_INT 1
31314: PPUSH
31315: LD_VAR 0 1
31319: PPUSH
31320: CALL_OW 12
31324: ARRAY
31325: PPUSH
31326: LD_INT 1
31328: PPUSH
31329: CALL_OW 234
// end ;
31333: PPOPN 1
31335: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31336: LD_EXP 38
31340: PUSH
31341: LD_EXP 86
31345: AND
31346: IFFALSE 31458
31348: GO 31350
31350: DISABLE
31351: LD_INT 0
31353: PPUSH
31354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31355: LD_ADDR_VAR 0 2
31359: PUSH
31360: LD_INT 22
31362: PUSH
31363: LD_OWVAR 2
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: LD_INT 30
31377: PUSH
31378: LD_INT 27
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 30
31387: PUSH
31388: LD_INT 26
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 30
31397: PUSH
31398: LD_INT 28
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PPUSH
31415: CALL_OW 69
31419: ST_TO_ADDR
// if not tmp then
31420: LD_VAR 0 2
31424: NOT
31425: IFFALSE 31429
// exit ;
31427: GO 31458
// for i in tmp do
31429: LD_ADDR_VAR 0 1
31433: PUSH
31434: LD_VAR 0 2
31438: PUSH
31439: FOR_IN
31440: IFFALSE 31456
// SetLives ( i , 1 ) ;
31442: LD_VAR 0 1
31446: PPUSH
31447: LD_INT 1
31449: PPUSH
31450: CALL_OW 234
31454: GO 31439
31456: POP
31457: POP
// end ;
31458: PPOPN 2
31460: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31461: LD_EXP 38
31465: PUSH
31466: LD_EXP 87
31470: AND
31471: IFFALSE 31758
31473: GO 31475
31475: DISABLE
31476: LD_INT 0
31478: PPUSH
31479: PPUSH
31480: PPUSH
// begin i := rand ( 1 , 7 ) ;
31481: LD_ADDR_VAR 0 1
31485: PUSH
31486: LD_INT 1
31488: PPUSH
31489: LD_INT 7
31491: PPUSH
31492: CALL_OW 12
31496: ST_TO_ADDR
// case i of 1 :
31497: LD_VAR 0 1
31501: PUSH
31502: LD_INT 1
31504: DOUBLE
31505: EQUAL
31506: IFTRUE 31510
31508: GO 31520
31510: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31511: LD_STRING earthquake(getX(game), 0, 32)
31513: PPUSH
31514: CALL_OW 559
31518: GO 31758
31520: LD_INT 2
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 31542
31528: POP
// begin ToLua ( displayStucuk(); ) ;
31529: LD_STRING displayStucuk();
31531: PPUSH
31532: CALL_OW 559
// ResetFog ;
31536: CALL_OW 335
// end ; 3 :
31540: GO 31758
31542: LD_INT 3
31544: DOUBLE
31545: EQUAL
31546: IFTRUE 31550
31548: GO 31654
31550: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31551: LD_ADDR_VAR 0 2
31555: PUSH
31556: LD_INT 22
31558: PUSH
31559: LD_OWVAR 2
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 25
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PPUSH
31582: CALL_OW 69
31586: ST_TO_ADDR
// if not tmp then
31587: LD_VAR 0 2
31591: NOT
31592: IFFALSE 31596
// exit ;
31594: GO 31758
// un := tmp [ rand ( 1 , tmp ) ] ;
31596: LD_ADDR_VAR 0 3
31600: PUSH
31601: LD_VAR 0 2
31605: PUSH
31606: LD_INT 1
31608: PPUSH
31609: LD_VAR 0 2
31613: PPUSH
31614: CALL_OW 12
31618: ARRAY
31619: ST_TO_ADDR
// if Crawls ( un ) then
31620: LD_VAR 0 3
31624: PPUSH
31625: CALL_OW 318
31629: IFFALSE 31640
// ComWalk ( un ) ;
31631: LD_VAR 0 3
31635: PPUSH
31636: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31640: LD_VAR 0 3
31644: PPUSH
31645: LD_INT 8
31647: PPUSH
31648: CALL_OW 336
// end ; 4 :
31652: GO 31758
31654: LD_INT 4
31656: DOUBLE
31657: EQUAL
31658: IFTRUE 31662
31660: GO 31736
31662: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31663: LD_ADDR_VAR 0 2
31667: PUSH
31668: LD_INT 22
31670: PUSH
31671: LD_OWVAR 2
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 30
31682: PUSH
31683: LD_INT 29
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PPUSH
31694: CALL_OW 69
31698: ST_TO_ADDR
// if not tmp then
31699: LD_VAR 0 2
31703: NOT
31704: IFFALSE 31708
// exit ;
31706: GO 31758
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31708: LD_VAR 0 2
31712: PUSH
31713: LD_INT 1
31715: ARRAY
31716: PPUSH
31717: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31721: LD_VAR 0 2
31725: PUSH
31726: LD_INT 1
31728: ARRAY
31729: PPUSH
31730: CALL_OW 65
// end ; 5 .. 7 :
31734: GO 31758
31736: LD_INT 5
31738: DOUBLE
31739: GREATEREQUAL
31740: IFFALSE 31748
31742: LD_INT 7
31744: DOUBLE
31745: LESSEQUAL
31746: IFTRUE 31750
31748: GO 31757
31750: POP
// StreamSibBomb ; end ;
31751: CALL 27995 0 0
31755: GO 31758
31757: POP
// end ;
31758: PPOPN 3
31760: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31761: LD_EXP 38
31765: PUSH
31766: LD_EXP 88
31770: AND
31771: IFFALSE 31927
31773: GO 31775
31775: DISABLE
31776: LD_INT 0
31778: PPUSH
31779: PPUSH
31780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31781: LD_ADDR_VAR 0 2
31785: PUSH
31786: LD_INT 81
31788: PUSH
31789: LD_OWVAR 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: LD_INT 21
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 21
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: LIST
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PPUSH
31830: CALL_OW 69
31834: ST_TO_ADDR
// if not tmp then
31835: LD_VAR 0 2
31839: NOT
31840: IFFALSE 31844
// exit ;
31842: GO 31927
// p := 0 ;
31844: LD_ADDR_VAR 0 3
31848: PUSH
31849: LD_INT 0
31851: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31852: LD_INT 35
31854: PPUSH
31855: CALL_OW 67
// p := p + 1 ;
31859: LD_ADDR_VAR 0 3
31863: PUSH
31864: LD_VAR 0 3
31868: PUSH
31869: LD_INT 1
31871: PLUS
31872: ST_TO_ADDR
// for i in tmp do
31873: LD_ADDR_VAR 0 1
31877: PUSH
31878: LD_VAR 0 2
31882: PUSH
31883: FOR_IN
31884: IFFALSE 31915
// if GetLives ( i ) < 1000 then
31886: LD_VAR 0 1
31890: PPUSH
31891: CALL_OW 256
31895: PUSH
31896: LD_INT 1000
31898: LESS
31899: IFFALSE 31913
// SetLives ( i , 1000 ) ;
31901: LD_VAR 0 1
31905: PPUSH
31906: LD_INT 1000
31908: PPUSH
31909: CALL_OW 234
31913: GO 31883
31915: POP
31916: POP
// until p > 20 ;
31917: LD_VAR 0 3
31921: PUSH
31922: LD_INT 20
31924: GREATER
31925: IFFALSE 31852
// end ;
31927: PPOPN 3
31929: END
// every 0 0$1 trigger StreamModeActive and sTime do
31930: LD_EXP 38
31934: PUSH
31935: LD_EXP 89
31939: AND
31940: IFFALSE 31975
31942: GO 31944
31944: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31945: LD_INT 28
31947: PPUSH
31948: LD_OWVAR 2
31952: PPUSH
31953: LD_INT 2
31955: PPUSH
31956: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31960: LD_INT 30
31962: PPUSH
31963: LD_OWVAR 2
31967: PPUSH
31968: LD_INT 2
31970: PPUSH
31971: CALL_OW 322
// end ;
31975: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31976: LD_EXP 38
31980: PUSH
31981: LD_EXP 90
31985: AND
31986: IFFALSE 32107
31988: GO 31990
31990: DISABLE
31991: LD_INT 0
31993: PPUSH
31994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31995: LD_ADDR_VAR 0 2
31999: PUSH
32000: LD_INT 22
32002: PUSH
32003: LD_OWVAR 2
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 21
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 3
32024: PUSH
32025: LD_INT 23
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: PPUSH
32044: CALL_OW 69
32048: ST_TO_ADDR
// if not tmp then
32049: LD_VAR 0 2
32053: NOT
32054: IFFALSE 32058
// exit ;
32056: GO 32107
// for i in tmp do
32058: LD_ADDR_VAR 0 1
32062: PUSH
32063: LD_VAR 0 2
32067: PUSH
32068: FOR_IN
32069: IFFALSE 32105
// begin if Crawls ( i ) then
32071: LD_VAR 0 1
32075: PPUSH
32076: CALL_OW 318
32080: IFFALSE 32091
// ComWalk ( i ) ;
32082: LD_VAR 0 1
32086: PPUSH
32087: CALL_OW 138
// SetClass ( i , 2 ) ;
32091: LD_VAR 0 1
32095: PPUSH
32096: LD_INT 2
32098: PPUSH
32099: CALL_OW 336
// end ;
32103: GO 32068
32105: POP
32106: POP
// end ;
32107: PPOPN 2
32109: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32110: LD_EXP 38
32114: PUSH
32115: LD_EXP 91
32119: AND
32120: IFFALSE 32408
32122: GO 32124
32124: DISABLE
32125: LD_INT 0
32127: PPUSH
32128: PPUSH
32129: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32130: LD_OWVAR 2
32134: PPUSH
32135: LD_INT 9
32137: PPUSH
32138: LD_INT 1
32140: PPUSH
32141: LD_INT 1
32143: PPUSH
32144: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32148: LD_INT 9
32150: PPUSH
32151: LD_OWVAR 2
32155: PPUSH
32156: CALL_OW 343
// uc_side := 9 ;
32160: LD_ADDR_OWVAR 20
32164: PUSH
32165: LD_INT 9
32167: ST_TO_ADDR
// uc_nation := 2 ;
32168: LD_ADDR_OWVAR 21
32172: PUSH
32173: LD_INT 2
32175: ST_TO_ADDR
// hc_name := Dark Warrior ;
32176: LD_ADDR_OWVAR 26
32180: PUSH
32181: LD_STRING Dark Warrior
32183: ST_TO_ADDR
// hc_gallery :=  ;
32184: LD_ADDR_OWVAR 33
32188: PUSH
32189: LD_STRING 
32191: ST_TO_ADDR
// hc_noskilllimit := true ;
32192: LD_ADDR_OWVAR 76
32196: PUSH
32197: LD_INT 1
32199: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32200: LD_ADDR_OWVAR 31
32204: PUSH
32205: LD_INT 30
32207: PUSH
32208: LD_INT 30
32210: PUSH
32211: LD_INT 30
32213: PUSH
32214: LD_INT 30
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: ST_TO_ADDR
// un := CreateHuman ;
32223: LD_ADDR_VAR 0 3
32227: PUSH
32228: CALL_OW 44
32232: ST_TO_ADDR
// hc_noskilllimit := false ;
32233: LD_ADDR_OWVAR 76
32237: PUSH
32238: LD_INT 0
32240: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32241: LD_VAR 0 3
32245: PPUSH
32246: LD_INT 1
32248: PPUSH
32249: CALL_OW 51
// ToLua ( playRanger() ) ;
32253: LD_STRING playRanger()
32255: PPUSH
32256: CALL_OW 559
// p := 0 ;
32260: LD_ADDR_VAR 0 2
32264: PUSH
32265: LD_INT 0
32267: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32268: LD_INT 35
32270: PPUSH
32271: CALL_OW 67
// p := p + 1 ;
32275: LD_ADDR_VAR 0 2
32279: PUSH
32280: LD_VAR 0 2
32284: PUSH
32285: LD_INT 1
32287: PLUS
32288: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32289: LD_VAR 0 3
32293: PPUSH
32294: CALL_OW 256
32298: PUSH
32299: LD_INT 1000
32301: LESS
32302: IFFALSE 32316
// SetLives ( un , 1000 ) ;
32304: LD_VAR 0 3
32308: PPUSH
32309: LD_INT 1000
32311: PPUSH
32312: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32316: LD_VAR 0 3
32320: PPUSH
32321: LD_INT 81
32323: PUSH
32324: LD_OWVAR 2
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 91
32335: PUSH
32336: LD_VAR 0 3
32340: PUSH
32341: LD_INT 30
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PPUSH
32353: CALL_OW 69
32357: PPUSH
32358: LD_VAR 0 3
32362: PPUSH
32363: CALL_OW 74
32367: PPUSH
32368: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32372: LD_VAR 0 2
32376: PUSH
32377: LD_INT 80
32379: GREATER
32380: PUSH
32381: LD_VAR 0 3
32385: PPUSH
32386: CALL_OW 301
32390: OR
32391: IFFALSE 32268
// if un then
32393: LD_VAR 0 3
32397: IFFALSE 32408
// RemoveUnit ( un ) ;
32399: LD_VAR 0 3
32403: PPUSH
32404: CALL_OW 64
// end ;
32408: PPOPN 3
32410: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32411: LD_EXP 92
32415: IFFALSE 32531
32417: GO 32419
32419: DISABLE
32420: LD_INT 0
32422: PPUSH
32423: PPUSH
32424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32425: LD_ADDR_VAR 0 2
32429: PUSH
32430: LD_INT 81
32432: PUSH
32433: LD_OWVAR 2
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 21
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PPUSH
32456: CALL_OW 69
32460: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32461: LD_STRING playComputer()
32463: PPUSH
32464: CALL_OW 559
// if not tmp then
32468: LD_VAR 0 2
32472: NOT
32473: IFFALSE 32477
// exit ;
32475: GO 32531
// for i in tmp do
32477: LD_ADDR_VAR 0 1
32481: PUSH
32482: LD_VAR 0 2
32486: PUSH
32487: FOR_IN
32488: IFFALSE 32529
// for j := 1 to 4 do
32490: LD_ADDR_VAR 0 3
32494: PUSH
32495: DOUBLE
32496: LD_INT 1
32498: DEC
32499: ST_TO_ADDR
32500: LD_INT 4
32502: PUSH
32503: FOR_TO
32504: IFFALSE 32525
// SetSkill ( i , j , 10 ) ;
32506: LD_VAR 0 1
32510: PPUSH
32511: LD_VAR 0 3
32515: PPUSH
32516: LD_INT 10
32518: PPUSH
32519: CALL_OW 237
32523: GO 32503
32525: POP
32526: POP
32527: GO 32487
32529: POP
32530: POP
// end ;
32531: PPOPN 3
32533: END
// every 0 0$1 trigger s30 do var i , tmp ;
32534: LD_EXP 93
32538: IFFALSE 32607
32540: GO 32542
32542: DISABLE
32543: LD_INT 0
32545: PPUSH
32546: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32547: LD_ADDR_VAR 0 2
32551: PUSH
32552: LD_INT 22
32554: PUSH
32555: LD_OWVAR 2
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PPUSH
32564: CALL_OW 69
32568: ST_TO_ADDR
// if not tmp then
32569: LD_VAR 0 2
32573: NOT
32574: IFFALSE 32578
// exit ;
32576: GO 32607
// for i in tmp do
32578: LD_ADDR_VAR 0 1
32582: PUSH
32583: LD_VAR 0 2
32587: PUSH
32588: FOR_IN
32589: IFFALSE 32605
// SetLives ( i , 300 ) ;
32591: LD_VAR 0 1
32595: PPUSH
32596: LD_INT 300
32598: PPUSH
32599: CALL_OW 234
32603: GO 32588
32605: POP
32606: POP
// end ;
32607: PPOPN 2
32609: END
// every 0 0$1 trigger s60 do var i , tmp ;
32610: LD_EXP 94
32614: IFFALSE 32683
32616: GO 32618
32618: DISABLE
32619: LD_INT 0
32621: PPUSH
32622: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32623: LD_ADDR_VAR 0 2
32627: PUSH
32628: LD_INT 22
32630: PUSH
32631: LD_OWVAR 2
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PPUSH
32640: CALL_OW 69
32644: ST_TO_ADDR
// if not tmp then
32645: LD_VAR 0 2
32649: NOT
32650: IFFALSE 32654
// exit ;
32652: GO 32683
// for i in tmp do
32654: LD_ADDR_VAR 0 1
32658: PUSH
32659: LD_VAR 0 2
32663: PUSH
32664: FOR_IN
32665: IFFALSE 32681
// SetLives ( i , 600 ) ;
32667: LD_VAR 0 1
32671: PPUSH
32672: LD_INT 600
32674: PPUSH
32675: CALL_OW 234
32679: GO 32664
32681: POP
32682: POP
// end ;
32683: PPOPN 2
32685: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32686: LD_INT 0
32688: PPUSH
// case cmd of 301 :
32689: LD_VAR 0 1
32693: PUSH
32694: LD_INT 301
32696: DOUBLE
32697: EQUAL
32698: IFTRUE 32702
32700: GO 32734
32702: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32703: LD_VAR 0 6
32707: PPUSH
32708: LD_VAR 0 7
32712: PPUSH
32713: LD_VAR 0 8
32717: PPUSH
32718: LD_VAR 0 4
32722: PPUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: CALL 33943 0 5
32732: GO 32855
32734: LD_INT 302
32736: DOUBLE
32737: EQUAL
32738: IFTRUE 32742
32740: GO 32779
32742: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32743: LD_VAR 0 6
32747: PPUSH
32748: LD_VAR 0 7
32752: PPUSH
32753: LD_VAR 0 8
32757: PPUSH
32758: LD_VAR 0 9
32762: PPUSH
32763: LD_VAR 0 4
32767: PPUSH
32768: LD_VAR 0 5
32772: PPUSH
32773: CALL 34034 0 6
32777: GO 32855
32779: LD_INT 303
32781: DOUBLE
32782: EQUAL
32783: IFTRUE 32787
32785: GO 32824
32787: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32788: LD_VAR 0 6
32792: PPUSH
32793: LD_VAR 0 7
32797: PPUSH
32798: LD_VAR 0 8
32802: PPUSH
32803: LD_VAR 0 9
32807: PPUSH
32808: LD_VAR 0 4
32812: PPUSH
32813: LD_VAR 0 5
32817: PPUSH
32818: CALL 32860 0 6
32822: GO 32855
32824: LD_INT 304
32826: DOUBLE
32827: EQUAL
32828: IFTRUE 32832
32830: GO 32854
32832: POP
// hHackTeleport ( unit , x , y ) ; end ;
32833: LD_VAR 0 2
32837: PPUSH
32838: LD_VAR 0 4
32842: PPUSH
32843: LD_VAR 0 5
32847: PPUSH
32848: CALL 34627 0 3
32852: GO 32855
32854: POP
// end ;
32855: LD_VAR 0 12
32859: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32860: LD_INT 0
32862: PPUSH
32863: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32864: LD_VAR 0 1
32868: PUSH
32869: LD_INT 1
32871: LESS
32872: PUSH
32873: LD_VAR 0 1
32877: PUSH
32878: LD_INT 3
32880: GREATER
32881: OR
32882: PUSH
32883: LD_VAR 0 5
32887: PPUSH
32888: LD_VAR 0 6
32892: PPUSH
32893: CALL_OW 428
32897: OR
32898: IFFALSE 32902
// exit ;
32900: GO 33630
// uc_side := your_side ;
32902: LD_ADDR_OWVAR 20
32906: PUSH
32907: LD_OWVAR 2
32911: ST_TO_ADDR
// uc_nation := nation ;
32912: LD_ADDR_OWVAR 21
32916: PUSH
32917: LD_VAR 0 1
32921: ST_TO_ADDR
// bc_level = 1 ;
32922: LD_ADDR_OWVAR 43
32926: PUSH
32927: LD_INT 1
32929: ST_TO_ADDR
// case btype of 1 :
32930: LD_VAR 0 2
32934: PUSH
32935: LD_INT 1
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32954
32943: POP
// bc_type := b_depot ; 2 :
32944: LD_ADDR_OWVAR 42
32948: PUSH
32949: LD_INT 0
32951: ST_TO_ADDR
32952: GO 33574
32954: LD_INT 2
32956: DOUBLE
32957: EQUAL
32958: IFTRUE 32962
32960: GO 32973
32962: POP
// bc_type := b_warehouse ; 3 :
32963: LD_ADDR_OWVAR 42
32967: PUSH
32968: LD_INT 1
32970: ST_TO_ADDR
32971: GO 33574
32973: LD_INT 3
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 32992
32981: POP
// bc_type := b_lab ; 4 .. 9 :
32982: LD_ADDR_OWVAR 42
32986: PUSH
32987: LD_INT 6
32989: ST_TO_ADDR
32990: GO 33574
32992: LD_INT 4
32994: DOUBLE
32995: GREATEREQUAL
32996: IFFALSE 33004
32998: LD_INT 9
33000: DOUBLE
33001: LESSEQUAL
33002: IFTRUE 33006
33004: GO 33066
33006: POP
// begin bc_type := b_lab_half ;
33007: LD_ADDR_OWVAR 42
33011: PUSH
33012: LD_INT 7
33014: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33015: LD_ADDR_OWVAR 44
33019: PUSH
33020: LD_INT 10
33022: PUSH
33023: LD_INT 11
33025: PUSH
33026: LD_INT 12
33028: PUSH
33029: LD_INT 15
33031: PUSH
33032: LD_INT 14
33034: PUSH
33035: LD_INT 13
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: PUSH
33046: LD_VAR 0 2
33050: PUSH
33051: LD_INT 3
33053: MINUS
33054: ARRAY
33055: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33056: LD_ADDR_OWVAR 45
33060: PUSH
33061: LD_INT 9
33063: ST_TO_ADDR
// end ; 10 .. 13 :
33064: GO 33574
33066: LD_INT 10
33068: DOUBLE
33069: GREATEREQUAL
33070: IFFALSE 33078
33072: LD_INT 13
33074: DOUBLE
33075: LESSEQUAL
33076: IFTRUE 33080
33078: GO 33157
33080: POP
// begin bc_type := b_lab_full ;
33081: LD_ADDR_OWVAR 42
33085: PUSH
33086: LD_INT 8
33088: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33089: LD_ADDR_OWVAR 44
33093: PUSH
33094: LD_INT 10
33096: PUSH
33097: LD_INT 12
33099: PUSH
33100: LD_INT 14
33102: PUSH
33103: LD_INT 13
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: PUSH
33112: LD_VAR 0 2
33116: PUSH
33117: LD_INT 9
33119: MINUS
33120: ARRAY
33121: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33122: LD_ADDR_OWVAR 45
33126: PUSH
33127: LD_INT 11
33129: PUSH
33130: LD_INT 15
33132: PUSH
33133: LD_INT 12
33135: PUSH
33136: LD_INT 15
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: PUSH
33145: LD_VAR 0 2
33149: PUSH
33150: LD_INT 9
33152: MINUS
33153: ARRAY
33154: ST_TO_ADDR
// end ; 14 :
33155: GO 33574
33157: LD_INT 14
33159: DOUBLE
33160: EQUAL
33161: IFTRUE 33165
33163: GO 33176
33165: POP
// bc_type := b_workshop ; 15 :
33166: LD_ADDR_OWVAR 42
33170: PUSH
33171: LD_INT 2
33173: ST_TO_ADDR
33174: GO 33574
33176: LD_INT 15
33178: DOUBLE
33179: EQUAL
33180: IFTRUE 33184
33182: GO 33195
33184: POP
// bc_type := b_factory ; 16 :
33185: LD_ADDR_OWVAR 42
33189: PUSH
33190: LD_INT 3
33192: ST_TO_ADDR
33193: GO 33574
33195: LD_INT 16
33197: DOUBLE
33198: EQUAL
33199: IFTRUE 33203
33201: GO 33214
33203: POP
// bc_type := b_ext_gun ; 17 :
33204: LD_ADDR_OWVAR 42
33208: PUSH
33209: LD_INT 17
33211: ST_TO_ADDR
33212: GO 33574
33214: LD_INT 17
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33222
33220: GO 33250
33222: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33223: LD_ADDR_OWVAR 42
33227: PUSH
33228: LD_INT 19
33230: PUSH
33231: LD_INT 23
33233: PUSH
33234: LD_INT 19
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: PUSH
33242: LD_VAR 0 1
33246: ARRAY
33247: ST_TO_ADDR
33248: GO 33574
33250: LD_INT 18
33252: DOUBLE
33253: EQUAL
33254: IFTRUE 33258
33256: GO 33269
33258: POP
// bc_type := b_ext_radar ; 19 :
33259: LD_ADDR_OWVAR 42
33263: PUSH
33264: LD_INT 20
33266: ST_TO_ADDR
33267: GO 33574
33269: LD_INT 19
33271: DOUBLE
33272: EQUAL
33273: IFTRUE 33277
33275: GO 33288
33277: POP
// bc_type := b_ext_radio ; 20 :
33278: LD_ADDR_OWVAR 42
33282: PUSH
33283: LD_INT 22
33285: ST_TO_ADDR
33286: GO 33574
33288: LD_INT 20
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33307
33296: POP
// bc_type := b_ext_siberium ; 21 :
33297: LD_ADDR_OWVAR 42
33301: PUSH
33302: LD_INT 21
33304: ST_TO_ADDR
33305: GO 33574
33307: LD_INT 21
33309: DOUBLE
33310: EQUAL
33311: IFTRUE 33315
33313: GO 33326
33315: POP
// bc_type := b_ext_computer ; 22 :
33316: LD_ADDR_OWVAR 42
33320: PUSH
33321: LD_INT 24
33323: ST_TO_ADDR
33324: GO 33574
33326: LD_INT 22
33328: DOUBLE
33329: EQUAL
33330: IFTRUE 33334
33332: GO 33345
33334: POP
// bc_type := b_ext_track ; 23 :
33335: LD_ADDR_OWVAR 42
33339: PUSH
33340: LD_INT 16
33342: ST_TO_ADDR
33343: GO 33574
33345: LD_INT 23
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33353
33351: GO 33364
33353: POP
// bc_type := b_ext_laser ; 24 :
33354: LD_ADDR_OWVAR 42
33358: PUSH
33359: LD_INT 25
33361: ST_TO_ADDR
33362: GO 33574
33364: LD_INT 24
33366: DOUBLE
33367: EQUAL
33368: IFTRUE 33372
33370: GO 33383
33372: POP
// bc_type := b_control_tower ; 25 :
33373: LD_ADDR_OWVAR 42
33377: PUSH
33378: LD_INT 36
33380: ST_TO_ADDR
33381: GO 33574
33383: LD_INT 25
33385: DOUBLE
33386: EQUAL
33387: IFTRUE 33391
33389: GO 33402
33391: POP
// bc_type := b_breastwork ; 26 :
33392: LD_ADDR_OWVAR 42
33396: PUSH
33397: LD_INT 31
33399: ST_TO_ADDR
33400: GO 33574
33402: LD_INT 26
33404: DOUBLE
33405: EQUAL
33406: IFTRUE 33410
33408: GO 33421
33410: POP
// bc_type := b_bunker ; 27 :
33411: LD_ADDR_OWVAR 42
33415: PUSH
33416: LD_INT 32
33418: ST_TO_ADDR
33419: GO 33574
33421: LD_INT 27
33423: DOUBLE
33424: EQUAL
33425: IFTRUE 33429
33427: GO 33440
33429: POP
// bc_type := b_turret ; 28 :
33430: LD_ADDR_OWVAR 42
33434: PUSH
33435: LD_INT 33
33437: ST_TO_ADDR
33438: GO 33574
33440: LD_INT 28
33442: DOUBLE
33443: EQUAL
33444: IFTRUE 33448
33446: GO 33459
33448: POP
// bc_type := b_armoury ; 29 :
33449: LD_ADDR_OWVAR 42
33453: PUSH
33454: LD_INT 4
33456: ST_TO_ADDR
33457: GO 33574
33459: LD_INT 29
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33467
33465: GO 33478
33467: POP
// bc_type := b_barracks ; 30 :
33468: LD_ADDR_OWVAR 42
33472: PUSH
33473: LD_INT 5
33475: ST_TO_ADDR
33476: GO 33574
33478: LD_INT 30
33480: DOUBLE
33481: EQUAL
33482: IFTRUE 33486
33484: GO 33497
33486: POP
// bc_type := b_solar_power ; 31 :
33487: LD_ADDR_OWVAR 42
33491: PUSH
33492: LD_INT 27
33494: ST_TO_ADDR
33495: GO 33574
33497: LD_INT 31
33499: DOUBLE
33500: EQUAL
33501: IFTRUE 33505
33503: GO 33516
33505: POP
// bc_type := b_oil_power ; 32 :
33506: LD_ADDR_OWVAR 42
33510: PUSH
33511: LD_INT 26
33513: ST_TO_ADDR
33514: GO 33574
33516: LD_INT 32
33518: DOUBLE
33519: EQUAL
33520: IFTRUE 33524
33522: GO 33535
33524: POP
// bc_type := b_siberite_power ; 33 :
33525: LD_ADDR_OWVAR 42
33529: PUSH
33530: LD_INT 28
33532: ST_TO_ADDR
33533: GO 33574
33535: LD_INT 33
33537: DOUBLE
33538: EQUAL
33539: IFTRUE 33543
33541: GO 33554
33543: POP
// bc_type := b_oil_mine ; 34 :
33544: LD_ADDR_OWVAR 42
33548: PUSH
33549: LD_INT 29
33551: ST_TO_ADDR
33552: GO 33574
33554: LD_INT 34
33556: DOUBLE
33557: EQUAL
33558: IFTRUE 33562
33560: GO 33573
33562: POP
// bc_type := b_siberite_mine ; end ;
33563: LD_ADDR_OWVAR 42
33567: PUSH
33568: LD_INT 30
33570: ST_TO_ADDR
33571: GO 33574
33573: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33574: LD_ADDR_VAR 0 8
33578: PUSH
33579: LD_VAR 0 5
33583: PPUSH
33584: LD_VAR 0 6
33588: PPUSH
33589: LD_VAR 0 3
33593: PPUSH
33594: CALL_OW 47
33598: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33599: LD_OWVAR 42
33603: PUSH
33604: LD_INT 32
33606: PUSH
33607: LD_INT 33
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: IN
33614: IFFALSE 33630
// PlaceWeaponTurret ( b , weapon ) ;
33616: LD_VAR 0 8
33620: PPUSH
33621: LD_VAR 0 4
33625: PPUSH
33626: CALL_OW 431
// end ;
33630: LD_VAR 0 7
33634: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33635: LD_INT 0
33637: PPUSH
33638: PPUSH
33639: PPUSH
33640: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33641: LD_ADDR_VAR 0 4
33645: PUSH
33646: LD_INT 22
33648: PUSH
33649: LD_OWVAR 2
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: LD_INT 30
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 30
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: LIST
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PPUSH
33690: CALL_OW 69
33694: ST_TO_ADDR
// if not tmp then
33695: LD_VAR 0 4
33699: NOT
33700: IFFALSE 33704
// exit ;
33702: GO 33763
// for i in tmp do
33704: LD_ADDR_VAR 0 2
33708: PUSH
33709: LD_VAR 0 4
33713: PUSH
33714: FOR_IN
33715: IFFALSE 33761
// for j = 1 to 3 do
33717: LD_ADDR_VAR 0 3
33721: PUSH
33722: DOUBLE
33723: LD_INT 1
33725: DEC
33726: ST_TO_ADDR
33727: LD_INT 3
33729: PUSH
33730: FOR_TO
33731: IFFALSE 33757
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33733: LD_VAR 0 2
33737: PPUSH
33738: CALL_OW 274
33742: PPUSH
33743: LD_VAR 0 3
33747: PPUSH
33748: LD_INT 99999
33750: PPUSH
33751: CALL_OW 277
33755: GO 33730
33757: POP
33758: POP
33759: GO 33714
33761: POP
33762: POP
// end ;
33763: LD_VAR 0 1
33767: RET
// export function hHackSetLevel10 ; var i , j ; begin
33768: LD_INT 0
33770: PPUSH
33771: PPUSH
33772: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33773: LD_ADDR_VAR 0 2
33777: PUSH
33778: LD_INT 21
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PPUSH
33788: CALL_OW 69
33792: PUSH
33793: FOR_IN
33794: IFFALSE 33846
// if IsSelected ( i ) then
33796: LD_VAR 0 2
33800: PPUSH
33801: CALL_OW 306
33805: IFFALSE 33844
// begin for j := 1 to 4 do
33807: LD_ADDR_VAR 0 3
33811: PUSH
33812: DOUBLE
33813: LD_INT 1
33815: DEC
33816: ST_TO_ADDR
33817: LD_INT 4
33819: PUSH
33820: FOR_TO
33821: IFFALSE 33842
// SetSkill ( i , j , 10 ) ;
33823: LD_VAR 0 2
33827: PPUSH
33828: LD_VAR 0 3
33832: PPUSH
33833: LD_INT 10
33835: PPUSH
33836: CALL_OW 237
33840: GO 33820
33842: POP
33843: POP
// end ;
33844: GO 33793
33846: POP
33847: POP
// end ;
33848: LD_VAR 0 1
33852: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33853: LD_INT 0
33855: PPUSH
33856: PPUSH
33857: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33858: LD_ADDR_VAR 0 2
33862: PUSH
33863: LD_INT 22
33865: PUSH
33866: LD_OWVAR 2
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 21
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PPUSH
33889: CALL_OW 69
33893: PUSH
33894: FOR_IN
33895: IFFALSE 33936
// begin for j := 1 to 4 do
33897: LD_ADDR_VAR 0 3
33901: PUSH
33902: DOUBLE
33903: LD_INT 1
33905: DEC
33906: ST_TO_ADDR
33907: LD_INT 4
33909: PUSH
33910: FOR_TO
33911: IFFALSE 33932
// SetSkill ( i , j , 10 ) ;
33913: LD_VAR 0 2
33917: PPUSH
33918: LD_VAR 0 3
33922: PPUSH
33923: LD_INT 10
33925: PPUSH
33926: CALL_OW 237
33930: GO 33910
33932: POP
33933: POP
// end ;
33934: GO 33894
33936: POP
33937: POP
// end ;
33938: LD_VAR 0 1
33942: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33943: LD_INT 0
33945: PPUSH
// uc_side := your_side ;
33946: LD_ADDR_OWVAR 20
33950: PUSH
33951: LD_OWVAR 2
33955: ST_TO_ADDR
// uc_nation := nation ;
33956: LD_ADDR_OWVAR 21
33960: PUSH
33961: LD_VAR 0 1
33965: ST_TO_ADDR
// InitHc ;
33966: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33970: LD_INT 0
33972: PPUSH
33973: LD_VAR 0 2
33977: PPUSH
33978: LD_VAR 0 3
33982: PPUSH
33983: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33987: LD_VAR 0 4
33991: PPUSH
33992: LD_VAR 0 5
33996: PPUSH
33997: CALL_OW 428
34001: PUSH
34002: LD_INT 0
34004: EQUAL
34005: IFFALSE 34029
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34007: CALL_OW 44
34011: PPUSH
34012: LD_VAR 0 4
34016: PPUSH
34017: LD_VAR 0 5
34021: PPUSH
34022: LD_INT 1
34024: PPUSH
34025: CALL_OW 48
// end ;
34029: LD_VAR 0 6
34033: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34034: LD_INT 0
34036: PPUSH
34037: PPUSH
// uc_side := your_side ;
34038: LD_ADDR_OWVAR 20
34042: PUSH
34043: LD_OWVAR 2
34047: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34048: LD_VAR 0 1
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: LD_INT 3
34061: PUSH
34062: LD_INT 4
34064: PUSH
34065: LD_INT 5
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: IN
34075: IFFALSE 34087
// uc_nation := nation_american else
34077: LD_ADDR_OWVAR 21
34081: PUSH
34082: LD_INT 1
34084: ST_TO_ADDR
34085: GO 34130
// if chassis in [ 11 , 12 , 13 , 14 ] then
34087: LD_VAR 0 1
34091: PUSH
34092: LD_INT 11
34094: PUSH
34095: LD_INT 12
34097: PUSH
34098: LD_INT 13
34100: PUSH
34101: LD_INT 14
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: IN
34110: IFFALSE 34122
// uc_nation := nation_arabian else
34112: LD_ADDR_OWVAR 21
34116: PUSH
34117: LD_INT 2
34119: ST_TO_ADDR
34120: GO 34130
// uc_nation := nation_russian ;
34122: LD_ADDR_OWVAR 21
34126: PUSH
34127: LD_INT 3
34129: ST_TO_ADDR
// vc_chassis := chassis ;
34130: LD_ADDR_OWVAR 37
34134: PUSH
34135: LD_VAR 0 1
34139: ST_TO_ADDR
// vc_engine := engine ;
34140: LD_ADDR_OWVAR 39
34144: PUSH
34145: LD_VAR 0 2
34149: ST_TO_ADDR
// vc_control := control ;
34150: LD_ADDR_OWVAR 38
34154: PUSH
34155: LD_VAR 0 3
34159: ST_TO_ADDR
// vc_weapon := weapon ;
34160: LD_ADDR_OWVAR 40
34164: PUSH
34165: LD_VAR 0 4
34169: ST_TO_ADDR
// un := CreateVehicle ;
34170: LD_ADDR_VAR 0 8
34174: PUSH
34175: CALL_OW 45
34179: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34180: LD_VAR 0 8
34184: PPUSH
34185: LD_INT 0
34187: PPUSH
34188: LD_INT 5
34190: PPUSH
34191: CALL_OW 12
34195: PPUSH
34196: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34200: LD_VAR 0 8
34204: PPUSH
34205: LD_VAR 0 5
34209: PPUSH
34210: LD_VAR 0 6
34214: PPUSH
34215: LD_INT 1
34217: PPUSH
34218: CALL_OW 48
// end ;
34222: LD_VAR 0 7
34226: RET
// export hInvincible ; every 1 do
34227: GO 34229
34229: DISABLE
// hInvincible := [ ] ;
34230: LD_ADDR_EXP 95
34234: PUSH
34235: EMPTY
34236: ST_TO_ADDR
34237: END
// every 10 do var i ;
34238: GO 34240
34240: DISABLE
34241: LD_INT 0
34243: PPUSH
// begin enable ;
34244: ENABLE
// if not hInvincible then
34245: LD_EXP 95
34249: NOT
34250: IFFALSE 34254
// exit ;
34252: GO 34298
// for i in hInvincible do
34254: LD_ADDR_VAR 0 1
34258: PUSH
34259: LD_EXP 95
34263: PUSH
34264: FOR_IN
34265: IFFALSE 34296
// if GetLives ( i ) < 1000 then
34267: LD_VAR 0 1
34271: PPUSH
34272: CALL_OW 256
34276: PUSH
34277: LD_INT 1000
34279: LESS
34280: IFFALSE 34294
// SetLives ( i , 1000 ) ;
34282: LD_VAR 0 1
34286: PPUSH
34287: LD_INT 1000
34289: PPUSH
34290: CALL_OW 234
34294: GO 34264
34296: POP
34297: POP
// end ;
34298: PPOPN 1
34300: END
// export function hHackInvincible ; var i ; begin
34301: LD_INT 0
34303: PPUSH
34304: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34305: LD_ADDR_VAR 0 2
34309: PUSH
34310: LD_INT 2
34312: PUSH
34313: LD_INT 21
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 21
34325: PUSH
34326: LD_INT 2
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: PPUSH
34338: CALL_OW 69
34342: PUSH
34343: FOR_IN
34344: IFFALSE 34405
// if IsSelected ( i ) then
34346: LD_VAR 0 2
34350: PPUSH
34351: CALL_OW 306
34355: IFFALSE 34403
// begin if i in hInvincible then
34357: LD_VAR 0 2
34361: PUSH
34362: LD_EXP 95
34366: IN
34367: IFFALSE 34387
// hInvincible := hInvincible diff i else
34369: LD_ADDR_EXP 95
34373: PUSH
34374: LD_EXP 95
34378: PUSH
34379: LD_VAR 0 2
34383: DIFF
34384: ST_TO_ADDR
34385: GO 34403
// hInvincible := hInvincible union i ;
34387: LD_ADDR_EXP 95
34391: PUSH
34392: LD_EXP 95
34396: PUSH
34397: LD_VAR 0 2
34401: UNION
34402: ST_TO_ADDR
// end ;
34403: GO 34343
34405: POP
34406: POP
// end ;
34407: LD_VAR 0 1
34411: RET
// export function hHackInvisible ; var i , j ; begin
34412: LD_INT 0
34414: PPUSH
34415: PPUSH
34416: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34417: LD_ADDR_VAR 0 2
34421: PUSH
34422: LD_INT 21
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PPUSH
34432: CALL_OW 69
34436: PUSH
34437: FOR_IN
34438: IFFALSE 34462
// if IsSelected ( i ) then
34440: LD_VAR 0 2
34444: PPUSH
34445: CALL_OW 306
34449: IFFALSE 34460
// ComForceInvisible ( i ) ;
34451: LD_VAR 0 2
34455: PPUSH
34456: CALL_OW 496
34460: GO 34437
34462: POP
34463: POP
// end ;
34464: LD_VAR 0 1
34468: RET
// export function hHackChangeYourSide ; begin
34469: LD_INT 0
34471: PPUSH
// if your_side = 8 then
34472: LD_OWVAR 2
34476: PUSH
34477: LD_INT 8
34479: EQUAL
34480: IFFALSE 34492
// your_side := 0 else
34482: LD_ADDR_OWVAR 2
34486: PUSH
34487: LD_INT 0
34489: ST_TO_ADDR
34490: GO 34506
// your_side := your_side + 1 ;
34492: LD_ADDR_OWVAR 2
34496: PUSH
34497: LD_OWVAR 2
34501: PUSH
34502: LD_INT 1
34504: PLUS
34505: ST_TO_ADDR
// end ;
34506: LD_VAR 0 1
34510: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34511: LD_INT 0
34513: PPUSH
34514: PPUSH
34515: PPUSH
// for i in all_units do
34516: LD_ADDR_VAR 0 2
34520: PUSH
34521: LD_OWVAR 3
34525: PUSH
34526: FOR_IN
34527: IFFALSE 34605
// if IsSelected ( i ) then
34529: LD_VAR 0 2
34533: PPUSH
34534: CALL_OW 306
34538: IFFALSE 34603
// begin j := GetSide ( i ) ;
34540: LD_ADDR_VAR 0 3
34544: PUSH
34545: LD_VAR 0 2
34549: PPUSH
34550: CALL_OW 255
34554: ST_TO_ADDR
// if j = 8 then
34555: LD_VAR 0 3
34559: PUSH
34560: LD_INT 8
34562: EQUAL
34563: IFFALSE 34575
// j := 0 else
34565: LD_ADDR_VAR 0 3
34569: PUSH
34570: LD_INT 0
34572: ST_TO_ADDR
34573: GO 34589
// j := j + 1 ;
34575: LD_ADDR_VAR 0 3
34579: PUSH
34580: LD_VAR 0 3
34584: PUSH
34585: LD_INT 1
34587: PLUS
34588: ST_TO_ADDR
// SetSide ( i , j ) ;
34589: LD_VAR 0 2
34593: PPUSH
34594: LD_VAR 0 3
34598: PPUSH
34599: CALL_OW 235
// end ;
34603: GO 34526
34605: POP
34606: POP
// end ;
34607: LD_VAR 0 1
34611: RET
// export function hHackFog ; begin
34612: LD_INT 0
34614: PPUSH
// FogOff ( true ) ;
34615: LD_INT 1
34617: PPUSH
34618: CALL_OW 344
// end ;
34622: LD_VAR 0 1
34626: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34627: LD_INT 0
34629: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34630: LD_VAR 0 1
34634: PPUSH
34635: LD_VAR 0 2
34639: PPUSH
34640: LD_VAR 0 3
34644: PPUSH
34645: LD_INT 1
34647: PPUSH
34648: LD_INT 1
34650: PPUSH
34651: CALL_OW 483
// CenterOnXY ( x , y ) ;
34655: LD_VAR 0 2
34659: PPUSH
34660: LD_VAR 0 3
34664: PPUSH
34665: CALL_OW 84
// end ;
34669: LD_VAR 0 4
34673: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34674: LD_INT 0
34676: PPUSH
34677: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34678: LD_VAR 0 1
34682: NOT
34683: PUSH
34684: LD_VAR 0 2
34688: PPUSH
34689: LD_VAR 0 3
34693: PPUSH
34694: CALL_OW 488
34698: NOT
34699: OR
34700: PUSH
34701: LD_VAR 0 1
34705: PPUSH
34706: CALL_OW 266
34710: PUSH
34711: LD_INT 3
34713: NONEQUAL
34714: PUSH
34715: LD_VAR 0 1
34719: PPUSH
34720: CALL_OW 247
34724: PUSH
34725: LD_INT 1
34727: EQUAL
34728: NOT
34729: AND
34730: OR
34731: IFFALSE 34735
// exit ;
34733: GO 34884
// if GetType ( factory ) = unit_human then
34735: LD_VAR 0 1
34739: PPUSH
34740: CALL_OW 247
34744: PUSH
34745: LD_INT 1
34747: EQUAL
34748: IFFALSE 34765
// factory := IsInUnit ( factory ) ;
34750: LD_ADDR_VAR 0 1
34754: PUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL_OW 310
34764: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34765: LD_VAR 0 1
34769: PPUSH
34770: CALL_OW 266
34774: PUSH
34775: LD_INT 3
34777: NONEQUAL
34778: IFFALSE 34782
// exit ;
34780: GO 34884
// if HexInfo ( x , y ) = factory then
34782: LD_VAR 0 2
34786: PPUSH
34787: LD_VAR 0 3
34791: PPUSH
34792: CALL_OW 428
34796: PUSH
34797: LD_VAR 0 1
34801: EQUAL
34802: IFFALSE 34829
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34804: LD_ADDR_EXP 96
34808: PUSH
34809: LD_EXP 96
34813: PPUSH
34814: LD_VAR 0 1
34818: PPUSH
34819: LD_INT 0
34821: PPUSH
34822: CALL_OW 1
34826: ST_TO_ADDR
34827: GO 34880
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34829: LD_ADDR_EXP 96
34833: PUSH
34834: LD_EXP 96
34838: PPUSH
34839: LD_VAR 0 1
34843: PPUSH
34844: LD_VAR 0 1
34848: PPUSH
34849: CALL_OW 255
34853: PUSH
34854: LD_VAR 0 1
34858: PUSH
34859: LD_VAR 0 2
34863: PUSH
34864: LD_VAR 0 3
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: PPUSH
34875: CALL_OW 1
34879: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34880: CALL 34889 0 0
// end ;
34884: LD_VAR 0 4
34888: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34889: LD_INT 0
34891: PPUSH
34892: PPUSH
34893: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34894: LD_STRING resetFactoryWaypoint();
34896: PPUSH
34897: CALL_OW 559
// if factoryWaypoints then
34901: LD_EXP 96
34905: IFFALSE 35031
// begin list := PrepareArray ( factoryWaypoints ) ;
34907: LD_ADDR_VAR 0 3
34911: PUSH
34912: LD_EXP 96
34916: PPUSH
34917: CALL 82173 0 1
34921: ST_TO_ADDR
// for i := 1 to list do
34922: LD_ADDR_VAR 0 2
34926: PUSH
34927: DOUBLE
34928: LD_INT 1
34930: DEC
34931: ST_TO_ADDR
34932: LD_VAR 0 3
34936: PUSH
34937: FOR_TO
34938: IFFALSE 35029
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34940: LD_STRING setFactoryWaypointXY(
34942: PUSH
34943: LD_VAR 0 3
34947: PUSH
34948: LD_VAR 0 2
34952: ARRAY
34953: PUSH
34954: LD_INT 1
34956: ARRAY
34957: STR
34958: PUSH
34959: LD_STRING ,
34961: STR
34962: PUSH
34963: LD_VAR 0 3
34967: PUSH
34968: LD_VAR 0 2
34972: ARRAY
34973: PUSH
34974: LD_INT 2
34976: ARRAY
34977: STR
34978: PUSH
34979: LD_STRING ,
34981: STR
34982: PUSH
34983: LD_VAR 0 3
34987: PUSH
34988: LD_VAR 0 2
34992: ARRAY
34993: PUSH
34994: LD_INT 3
34996: ARRAY
34997: STR
34998: PUSH
34999: LD_STRING ,
35001: STR
35002: PUSH
35003: LD_VAR 0 3
35007: PUSH
35008: LD_VAR 0 2
35012: ARRAY
35013: PUSH
35014: LD_INT 4
35016: ARRAY
35017: STR
35018: PUSH
35019: LD_STRING )
35021: STR
35022: PPUSH
35023: CALL_OW 559
35027: GO 34937
35029: POP
35030: POP
// end ; end ;
35031: LD_VAR 0 1
35035: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35036: LD_INT 0
35038: PPUSH
// if HexInfo ( x , y ) = warehouse then
35039: LD_VAR 0 2
35043: PPUSH
35044: LD_VAR 0 3
35048: PPUSH
35049: CALL_OW 428
35053: PUSH
35054: LD_VAR 0 1
35058: EQUAL
35059: IFFALSE 35086
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35061: LD_ADDR_EXP 97
35065: PUSH
35066: LD_EXP 97
35070: PPUSH
35071: LD_VAR 0 1
35075: PPUSH
35076: LD_INT 0
35078: PPUSH
35079: CALL_OW 1
35083: ST_TO_ADDR
35084: GO 35137
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35086: LD_ADDR_EXP 97
35090: PUSH
35091: LD_EXP 97
35095: PPUSH
35096: LD_VAR 0 1
35100: PPUSH
35101: LD_VAR 0 1
35105: PPUSH
35106: CALL_OW 255
35110: PUSH
35111: LD_VAR 0 1
35115: PUSH
35116: LD_VAR 0 2
35120: PUSH
35121: LD_VAR 0 3
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: PPUSH
35132: CALL_OW 1
35136: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35137: CALL 35146 0 0
// end ;
35141: LD_VAR 0 4
35145: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35146: LD_INT 0
35148: PPUSH
35149: PPUSH
35150: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35151: LD_STRING resetWarehouseGatheringPoints();
35153: PPUSH
35154: CALL_OW 559
// if warehouseGatheringPoints then
35158: LD_EXP 97
35162: IFFALSE 35288
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35164: LD_ADDR_VAR 0 3
35168: PUSH
35169: LD_EXP 97
35173: PPUSH
35174: CALL 82173 0 1
35178: ST_TO_ADDR
// for i := 1 to list do
35179: LD_ADDR_VAR 0 2
35183: PUSH
35184: DOUBLE
35185: LD_INT 1
35187: DEC
35188: ST_TO_ADDR
35189: LD_VAR 0 3
35193: PUSH
35194: FOR_TO
35195: IFFALSE 35286
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35197: LD_STRING setWarehouseGatheringPointXY(
35199: PUSH
35200: LD_VAR 0 3
35204: PUSH
35205: LD_VAR 0 2
35209: ARRAY
35210: PUSH
35211: LD_INT 1
35213: ARRAY
35214: STR
35215: PUSH
35216: LD_STRING ,
35218: STR
35219: PUSH
35220: LD_VAR 0 3
35224: PUSH
35225: LD_VAR 0 2
35229: ARRAY
35230: PUSH
35231: LD_INT 2
35233: ARRAY
35234: STR
35235: PUSH
35236: LD_STRING ,
35238: STR
35239: PUSH
35240: LD_VAR 0 3
35244: PUSH
35245: LD_VAR 0 2
35249: ARRAY
35250: PUSH
35251: LD_INT 3
35253: ARRAY
35254: STR
35255: PUSH
35256: LD_STRING ,
35258: STR
35259: PUSH
35260: LD_VAR 0 3
35264: PUSH
35265: LD_VAR 0 2
35269: ARRAY
35270: PUSH
35271: LD_INT 4
35273: ARRAY
35274: STR
35275: PUSH
35276: LD_STRING )
35278: STR
35279: PPUSH
35280: CALL_OW 559
35284: GO 35194
35286: POP
35287: POP
// end ; end ;
35288: LD_VAR 0 1
35292: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35293: LD_EXP 97
35297: IFFALSE 35982
35299: GO 35301
35301: DISABLE
35302: LD_INT 0
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
35310: PPUSH
35311: PPUSH
35312: PPUSH
// begin enable ;
35313: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35314: LD_ADDR_VAR 0 3
35318: PUSH
35319: LD_EXP 97
35323: PPUSH
35324: CALL 82173 0 1
35328: ST_TO_ADDR
// if not list then
35329: LD_VAR 0 3
35333: NOT
35334: IFFALSE 35338
// exit ;
35336: GO 35982
// for i := 1 to list do
35338: LD_ADDR_VAR 0 1
35342: PUSH
35343: DOUBLE
35344: LD_INT 1
35346: DEC
35347: ST_TO_ADDR
35348: LD_VAR 0 3
35352: PUSH
35353: FOR_TO
35354: IFFALSE 35980
// begin depot := list [ i ] [ 2 ] ;
35356: LD_ADDR_VAR 0 8
35360: PUSH
35361: LD_VAR 0 3
35365: PUSH
35366: LD_VAR 0 1
35370: ARRAY
35371: PUSH
35372: LD_INT 2
35374: ARRAY
35375: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35376: LD_ADDR_VAR 0 5
35380: PUSH
35381: LD_VAR 0 3
35385: PUSH
35386: LD_VAR 0 1
35390: ARRAY
35391: PUSH
35392: LD_INT 1
35394: ARRAY
35395: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35396: LD_VAR 0 8
35400: PPUSH
35401: CALL_OW 301
35405: PUSH
35406: LD_VAR 0 5
35410: PUSH
35411: LD_VAR 0 8
35415: PPUSH
35416: CALL_OW 255
35420: NONEQUAL
35421: OR
35422: IFFALSE 35451
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35424: LD_ADDR_EXP 97
35428: PUSH
35429: LD_EXP 97
35433: PPUSH
35434: LD_VAR 0 8
35438: PPUSH
35439: LD_INT 0
35441: PPUSH
35442: CALL_OW 1
35446: ST_TO_ADDR
// exit ;
35447: POP
35448: POP
35449: GO 35982
// end ; x := list [ i ] [ 3 ] ;
35451: LD_ADDR_VAR 0 6
35455: PUSH
35456: LD_VAR 0 3
35460: PUSH
35461: LD_VAR 0 1
35465: ARRAY
35466: PUSH
35467: LD_INT 3
35469: ARRAY
35470: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35471: LD_ADDR_VAR 0 7
35475: PUSH
35476: LD_VAR 0 3
35480: PUSH
35481: LD_VAR 0 1
35485: ARRAY
35486: PUSH
35487: LD_INT 4
35489: ARRAY
35490: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35491: LD_ADDR_VAR 0 9
35495: PUSH
35496: LD_VAR 0 6
35500: PPUSH
35501: LD_VAR 0 7
35505: PPUSH
35506: LD_INT 16
35508: PPUSH
35509: CALL 80761 0 3
35513: ST_TO_ADDR
// if not cratesNearbyPoint then
35514: LD_VAR 0 9
35518: NOT
35519: IFFALSE 35525
// exit ;
35521: POP
35522: POP
35523: GO 35982
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35525: LD_ADDR_VAR 0 4
35529: PUSH
35530: LD_INT 22
35532: PUSH
35533: LD_VAR 0 5
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 3
35544: PUSH
35545: LD_INT 60
35547: PUSH
35548: EMPTY
35549: LIST
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 91
35557: PUSH
35558: LD_VAR 0 8
35562: PUSH
35563: LD_INT 6
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: LD_INT 25
35576: PUSH
35577: LD_INT 2
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 25
35586: PUSH
35587: LD_INT 16
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: PPUSH
35605: CALL_OW 69
35609: PUSH
35610: LD_VAR 0 8
35614: PPUSH
35615: CALL_OW 313
35619: PPUSH
35620: LD_INT 3
35622: PUSH
35623: LD_INT 60
35625: PUSH
35626: EMPTY
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: LD_INT 25
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 25
35648: PUSH
35649: LD_INT 16
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PPUSH
35665: CALL_OW 72
35669: UNION
35670: ST_TO_ADDR
// if tmp then
35671: LD_VAR 0 4
35675: IFFALSE 35755
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35677: LD_ADDR_VAR 0 4
35681: PUSH
35682: LD_VAR 0 4
35686: PPUSH
35687: LD_INT 3
35689: PPUSH
35690: CALL 78730 0 2
35694: ST_TO_ADDR
// for j in tmp do
35695: LD_ADDR_VAR 0 2
35699: PUSH
35700: LD_VAR 0 4
35704: PUSH
35705: FOR_IN
35706: IFFALSE 35749
// begin if IsInUnit ( j ) then
35708: LD_VAR 0 2
35712: PPUSH
35713: CALL_OW 310
35717: IFFALSE 35728
// ComExit ( j ) ;
35719: LD_VAR 0 2
35723: PPUSH
35724: CALL 78813 0 1
// AddComCollect ( j , x , y ) ;
35728: LD_VAR 0 2
35732: PPUSH
35733: LD_VAR 0 6
35737: PPUSH
35738: LD_VAR 0 7
35742: PPUSH
35743: CALL_OW 177
// end ;
35747: GO 35705
35749: POP
35750: POP
// exit ;
35751: POP
35752: POP
35753: GO 35982
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35755: LD_ADDR_VAR 0 4
35759: PUSH
35760: LD_INT 22
35762: PUSH
35763: LD_VAR 0 5
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 91
35774: PUSH
35775: LD_VAR 0 8
35779: PUSH
35780: LD_INT 8
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 34
35793: PUSH
35794: LD_INT 12
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 34
35803: PUSH
35804: LD_INT 51
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 34
35813: PUSH
35814: LD_INT 32
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 34
35823: PUSH
35824: LD_INT 89
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: PPUSH
35843: CALL_OW 69
35847: ST_TO_ADDR
// if tmp then
35848: LD_VAR 0 4
35852: IFFALSE 35978
// begin for j in tmp do
35854: LD_ADDR_VAR 0 2
35858: PUSH
35859: LD_VAR 0 4
35863: PUSH
35864: FOR_IN
35865: IFFALSE 35976
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35867: LD_VAR 0 2
35871: PPUSH
35872: CALL_OW 262
35876: PUSH
35877: LD_INT 3
35879: EQUAL
35880: PUSH
35881: LD_VAR 0 2
35885: PPUSH
35886: CALL_OW 261
35890: PUSH
35891: LD_INT 20
35893: GREATER
35894: OR
35895: PUSH
35896: LD_VAR 0 2
35900: PPUSH
35901: CALL_OW 314
35905: NOT
35906: AND
35907: PUSH
35908: LD_VAR 0 2
35912: PPUSH
35913: CALL_OW 263
35917: PUSH
35918: LD_INT 1
35920: NONEQUAL
35921: PUSH
35922: LD_VAR 0 2
35926: PPUSH
35927: CALL_OW 311
35931: OR
35932: AND
35933: IFFALSE 35974
// begin ComCollect ( j , x , y ) ;
35935: LD_VAR 0 2
35939: PPUSH
35940: LD_VAR 0 6
35944: PPUSH
35945: LD_VAR 0 7
35949: PPUSH
35950: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35954: LD_VAR 0 2
35958: PPUSH
35959: LD_VAR 0 8
35963: PPUSH
35964: CALL_OW 172
// exit ;
35968: POP
35969: POP
35970: POP
35971: POP
35972: GO 35982
// end ;
35974: GO 35864
35976: POP
35977: POP
// end ; end ;
35978: GO 35353
35980: POP
35981: POP
// end ; end_of_file
35982: PPOPN 9
35984: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35985: LD_INT 0
35987: PPUSH
35988: PPUSH
35989: PPUSH
35990: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35991: LD_VAR 0 1
35995: PPUSH
35996: CALL_OW 264
36000: PUSH
36001: LD_INT 91
36003: EQUAL
36004: IFFALSE 36076
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36006: LD_INT 68
36008: PPUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: CALL_OW 255
36018: PPUSH
36019: CALL_OW 321
36023: PUSH
36024: LD_INT 2
36026: EQUAL
36027: IFFALSE 36039
// eff := 70 else
36029: LD_ADDR_VAR 0 4
36033: PUSH
36034: LD_INT 70
36036: ST_TO_ADDR
36037: GO 36047
// eff := 30 ;
36039: LD_ADDR_VAR 0 4
36043: PUSH
36044: LD_INT 30
36046: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36047: LD_VAR 0 1
36051: PPUSH
36052: CALL_OW 250
36056: PPUSH
36057: LD_VAR 0 1
36061: PPUSH
36062: CALL_OW 251
36066: PPUSH
36067: LD_VAR 0 4
36071: PPUSH
36072: CALL_OW 495
// end ; end ;
36076: LD_VAR 0 2
36080: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36081: LD_INT 0
36083: PPUSH
// end ;
36084: LD_VAR 0 4
36088: RET
// export function SOS_Command ( cmd ) ; begin
36089: LD_INT 0
36091: PPUSH
// end ;
36092: LD_VAR 0 2
36096: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36097: LD_INT 0
36099: PPUSH
// end ;
36100: LD_VAR 0 6
36104: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36105: LD_INT 0
36107: PPUSH
36108: PPUSH
// if not vehicle or not factory then
36109: LD_VAR 0 1
36113: NOT
36114: PUSH
36115: LD_VAR 0 2
36119: NOT
36120: OR
36121: IFFALSE 36125
// exit ;
36123: GO 36356
// if factoryWaypoints >= factory then
36125: LD_EXP 96
36129: PUSH
36130: LD_VAR 0 2
36134: GREATEREQUAL
36135: IFFALSE 36356
// if factoryWaypoints [ factory ] then
36137: LD_EXP 96
36141: PUSH
36142: LD_VAR 0 2
36146: ARRAY
36147: IFFALSE 36356
// begin if GetControl ( vehicle ) = control_manual then
36149: LD_VAR 0 1
36153: PPUSH
36154: CALL_OW 263
36158: PUSH
36159: LD_INT 1
36161: EQUAL
36162: IFFALSE 36243
// begin driver := IsDrivenBy ( vehicle ) ;
36164: LD_ADDR_VAR 0 4
36168: PUSH
36169: LD_VAR 0 1
36173: PPUSH
36174: CALL_OW 311
36178: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36179: LD_VAR 0 4
36183: PPUSH
36184: LD_EXP 96
36188: PUSH
36189: LD_VAR 0 2
36193: ARRAY
36194: PUSH
36195: LD_INT 3
36197: ARRAY
36198: PPUSH
36199: LD_EXP 96
36203: PUSH
36204: LD_VAR 0 2
36208: ARRAY
36209: PUSH
36210: LD_INT 4
36212: ARRAY
36213: PPUSH
36214: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36218: LD_VAR 0 4
36222: PPUSH
36223: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36227: LD_VAR 0 4
36231: PPUSH
36232: LD_VAR 0 2
36236: PPUSH
36237: CALL_OW 180
// end else
36241: GO 36356
// if GetControl ( vehicle ) = control_remote then
36243: LD_VAR 0 1
36247: PPUSH
36248: CALL_OW 263
36252: PUSH
36253: LD_INT 2
36255: EQUAL
36256: IFFALSE 36317
// begin wait ( 0 0$2 ) ;
36258: LD_INT 70
36260: PPUSH
36261: CALL_OW 67
// if Connect ( vehicle ) then
36265: LD_VAR 0 1
36269: PPUSH
36270: CALL 49021 0 1
36274: IFFALSE 36315
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36276: LD_VAR 0 1
36280: PPUSH
36281: LD_EXP 96
36285: PUSH
36286: LD_VAR 0 2
36290: ARRAY
36291: PUSH
36292: LD_INT 3
36294: ARRAY
36295: PPUSH
36296: LD_EXP 96
36300: PUSH
36301: LD_VAR 0 2
36305: ARRAY
36306: PUSH
36307: LD_INT 4
36309: ARRAY
36310: PPUSH
36311: CALL_OW 171
// end else
36315: GO 36356
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36317: LD_VAR 0 1
36321: PPUSH
36322: LD_EXP 96
36326: PUSH
36327: LD_VAR 0 2
36331: ARRAY
36332: PUSH
36333: LD_INT 3
36335: ARRAY
36336: PPUSH
36337: LD_EXP 96
36341: PUSH
36342: LD_VAR 0 2
36346: ARRAY
36347: PUSH
36348: LD_INT 4
36350: ARRAY
36351: PPUSH
36352: CALL_OW 171
// end ; end ;
36356: LD_VAR 0 3
36360: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36361: LD_INT 0
36363: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36364: LD_VAR 0 1
36368: PUSH
36369: LD_INT 250
36371: EQUAL
36372: PUSH
36373: LD_VAR 0 2
36377: PPUSH
36378: CALL_OW 264
36382: PUSH
36383: LD_INT 81
36385: EQUAL
36386: AND
36387: IFFALSE 36408
// MinerPlaceMine ( unit , x , y ) ;
36389: LD_VAR 0 2
36393: PPUSH
36394: LD_VAR 0 4
36398: PPUSH
36399: LD_VAR 0 5
36403: PPUSH
36404: CALL 39232 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36408: LD_VAR 0 1
36412: PUSH
36413: LD_INT 251
36415: EQUAL
36416: PUSH
36417: LD_VAR 0 2
36421: PPUSH
36422: CALL_OW 264
36426: PUSH
36427: LD_INT 81
36429: EQUAL
36430: AND
36431: IFFALSE 36452
// MinerDetonateMine ( unit , x , y ) ;
36433: LD_VAR 0 2
36437: PPUSH
36438: LD_VAR 0 4
36442: PPUSH
36443: LD_VAR 0 5
36447: PPUSH
36448: CALL 39507 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36452: LD_VAR 0 1
36456: PUSH
36457: LD_INT 252
36459: EQUAL
36460: PUSH
36461: LD_VAR 0 2
36465: PPUSH
36466: CALL_OW 264
36470: PUSH
36471: LD_INT 81
36473: EQUAL
36474: AND
36475: IFFALSE 36496
// MinerCreateMinefield ( unit , x , y ) ;
36477: LD_VAR 0 2
36481: PPUSH
36482: LD_VAR 0 4
36486: PPUSH
36487: LD_VAR 0 5
36491: PPUSH
36492: CALL 39924 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36496: LD_VAR 0 1
36500: PUSH
36501: LD_INT 253
36503: EQUAL
36504: PUSH
36505: LD_VAR 0 2
36509: PPUSH
36510: CALL_OW 257
36514: PUSH
36515: LD_INT 5
36517: EQUAL
36518: AND
36519: IFFALSE 36540
// ComBinocular ( unit , x , y ) ;
36521: LD_VAR 0 2
36525: PPUSH
36526: LD_VAR 0 4
36530: PPUSH
36531: LD_VAR 0 5
36535: PPUSH
36536: CALL 40293 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36540: LD_VAR 0 1
36544: PUSH
36545: LD_INT 254
36547: EQUAL
36548: PUSH
36549: LD_VAR 0 2
36553: PPUSH
36554: CALL_OW 264
36558: PUSH
36559: LD_INT 99
36561: EQUAL
36562: AND
36563: PUSH
36564: LD_VAR 0 3
36568: PPUSH
36569: CALL_OW 263
36573: PUSH
36574: LD_INT 3
36576: EQUAL
36577: AND
36578: IFFALSE 36594
// HackDestroyVehicle ( unit , selectedUnit ) ;
36580: LD_VAR 0 2
36584: PPUSH
36585: LD_VAR 0 3
36589: PPUSH
36590: CALL 38596 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36594: LD_VAR 0 1
36598: PUSH
36599: LD_INT 255
36601: EQUAL
36602: PUSH
36603: LD_VAR 0 2
36607: PPUSH
36608: CALL_OW 264
36612: PUSH
36613: LD_INT 14
36615: PUSH
36616: LD_INT 53
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: IN
36623: AND
36624: PUSH
36625: LD_VAR 0 4
36629: PPUSH
36630: LD_VAR 0 5
36634: PPUSH
36635: CALL_OW 488
36639: AND
36640: IFFALSE 36664
// CutTreeXYR ( unit , x , y , 12 ) ;
36642: LD_VAR 0 2
36646: PPUSH
36647: LD_VAR 0 4
36651: PPUSH
36652: LD_VAR 0 5
36656: PPUSH
36657: LD_INT 12
36659: PPUSH
36660: CALL 36759 0 4
// if cmd = 256 then
36664: LD_VAR 0 1
36668: PUSH
36669: LD_INT 256
36671: EQUAL
36672: IFFALSE 36693
// SetFactoryWaypoint ( unit , x , y ) ;
36674: LD_VAR 0 2
36678: PPUSH
36679: LD_VAR 0 4
36683: PPUSH
36684: LD_VAR 0 5
36688: PPUSH
36689: CALL 34674 0 3
// if cmd = 257 then
36693: LD_VAR 0 1
36697: PUSH
36698: LD_INT 257
36700: EQUAL
36701: IFFALSE 36722
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36703: LD_VAR 0 2
36707: PPUSH
36708: LD_VAR 0 4
36712: PPUSH
36713: LD_VAR 0 5
36717: PPUSH
36718: CALL 35036 0 3
// if cmd = 258 then
36722: LD_VAR 0 1
36726: PUSH
36727: LD_INT 258
36729: EQUAL
36730: IFFALSE 36754
// BurnTreeXYR ( unit , x , y , 8 ) ;
36732: LD_VAR 0 2
36736: PPUSH
36737: LD_VAR 0 4
36741: PPUSH
36742: LD_VAR 0 5
36746: PPUSH
36747: LD_INT 8
36749: PPUSH
36750: CALL 37153 0 4
// end ;
36754: LD_VAR 0 6
36758: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36759: LD_INT 0
36761: PPUSH
36762: PPUSH
36763: PPUSH
36764: PPUSH
36765: PPUSH
36766: PPUSH
36767: PPUSH
36768: PPUSH
36769: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36770: LD_VAR 0 1
36774: PPUSH
36775: CALL_OW 302
36779: NOT
36780: PUSH
36781: LD_VAR 0 2
36785: PPUSH
36786: LD_VAR 0 3
36790: PPUSH
36791: CALL_OW 488
36795: NOT
36796: OR
36797: PUSH
36798: LD_VAR 0 4
36802: NOT
36803: OR
36804: IFFALSE 36808
// exit ;
36806: GO 37148
// list := [ ] ;
36808: LD_ADDR_VAR 0 13
36812: PUSH
36813: EMPTY
36814: ST_TO_ADDR
// if x - r < 0 then
36815: LD_VAR 0 2
36819: PUSH
36820: LD_VAR 0 4
36824: MINUS
36825: PUSH
36826: LD_INT 0
36828: LESS
36829: IFFALSE 36841
// min_x := 0 else
36831: LD_ADDR_VAR 0 7
36835: PUSH
36836: LD_INT 0
36838: ST_TO_ADDR
36839: GO 36857
// min_x := x - r ;
36841: LD_ADDR_VAR 0 7
36845: PUSH
36846: LD_VAR 0 2
36850: PUSH
36851: LD_VAR 0 4
36855: MINUS
36856: ST_TO_ADDR
// if y - r < 0 then
36857: LD_VAR 0 3
36861: PUSH
36862: LD_VAR 0 4
36866: MINUS
36867: PUSH
36868: LD_INT 0
36870: LESS
36871: IFFALSE 36883
// min_y := 0 else
36873: LD_ADDR_VAR 0 8
36877: PUSH
36878: LD_INT 0
36880: ST_TO_ADDR
36881: GO 36899
// min_y := y - r ;
36883: LD_ADDR_VAR 0 8
36887: PUSH
36888: LD_VAR 0 3
36892: PUSH
36893: LD_VAR 0 4
36897: MINUS
36898: ST_TO_ADDR
// max_x := x + r ;
36899: LD_ADDR_VAR 0 9
36903: PUSH
36904: LD_VAR 0 2
36908: PUSH
36909: LD_VAR 0 4
36913: PLUS
36914: ST_TO_ADDR
// max_y := y + r ;
36915: LD_ADDR_VAR 0 10
36919: PUSH
36920: LD_VAR 0 3
36924: PUSH
36925: LD_VAR 0 4
36929: PLUS
36930: ST_TO_ADDR
// for _x = min_x to max_x do
36931: LD_ADDR_VAR 0 11
36935: PUSH
36936: DOUBLE
36937: LD_VAR 0 7
36941: DEC
36942: ST_TO_ADDR
36943: LD_VAR 0 9
36947: PUSH
36948: FOR_TO
36949: IFFALSE 37066
// for _y = min_y to max_y do
36951: LD_ADDR_VAR 0 12
36955: PUSH
36956: DOUBLE
36957: LD_VAR 0 8
36961: DEC
36962: ST_TO_ADDR
36963: LD_VAR 0 10
36967: PUSH
36968: FOR_TO
36969: IFFALSE 37062
// begin if not ValidHex ( _x , _y ) then
36971: LD_VAR 0 11
36975: PPUSH
36976: LD_VAR 0 12
36980: PPUSH
36981: CALL_OW 488
36985: NOT
36986: IFFALSE 36990
// continue ;
36988: GO 36968
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36990: LD_VAR 0 11
36994: PPUSH
36995: LD_VAR 0 12
36999: PPUSH
37000: CALL_OW 351
37004: PUSH
37005: LD_VAR 0 11
37009: PPUSH
37010: LD_VAR 0 12
37014: PPUSH
37015: CALL_OW 554
37019: AND
37020: IFFALSE 37060
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37022: LD_ADDR_VAR 0 13
37026: PUSH
37027: LD_VAR 0 13
37031: PPUSH
37032: LD_VAR 0 13
37036: PUSH
37037: LD_INT 1
37039: PLUS
37040: PPUSH
37041: LD_VAR 0 11
37045: PUSH
37046: LD_VAR 0 12
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PPUSH
37055: CALL_OW 2
37059: ST_TO_ADDR
// end ;
37060: GO 36968
37062: POP
37063: POP
37064: GO 36948
37066: POP
37067: POP
// if not list then
37068: LD_VAR 0 13
37072: NOT
37073: IFFALSE 37077
// exit ;
37075: GO 37148
// for i in list do
37077: LD_ADDR_VAR 0 6
37081: PUSH
37082: LD_VAR 0 13
37086: PUSH
37087: FOR_IN
37088: IFFALSE 37146
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37090: LD_VAR 0 1
37094: PPUSH
37095: LD_STRING M
37097: PUSH
37098: LD_VAR 0 6
37102: PUSH
37103: LD_INT 1
37105: ARRAY
37106: PUSH
37107: LD_VAR 0 6
37111: PUSH
37112: LD_INT 2
37114: ARRAY
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: PUSH
37137: EMPTY
37138: LIST
37139: PPUSH
37140: CALL_OW 447
37144: GO 37087
37146: POP
37147: POP
// end ;
37148: LD_VAR 0 5
37152: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37153: LD_INT 0
37155: PPUSH
37156: PPUSH
37157: PPUSH
37158: PPUSH
37159: PPUSH
37160: PPUSH
37161: PPUSH
37162: PPUSH
37163: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37164: LD_VAR 0 1
37168: PPUSH
37169: CALL_OW 302
37173: NOT
37174: PUSH
37175: LD_VAR 0 2
37179: PPUSH
37180: LD_VAR 0 3
37184: PPUSH
37185: CALL_OW 488
37189: NOT
37190: OR
37191: PUSH
37192: LD_VAR 0 4
37196: NOT
37197: OR
37198: IFFALSE 37202
// exit ;
37200: GO 37550
// list := [ ] ;
37202: LD_ADDR_VAR 0 13
37206: PUSH
37207: EMPTY
37208: ST_TO_ADDR
// if x - r < 0 then
37209: LD_VAR 0 2
37213: PUSH
37214: LD_VAR 0 4
37218: MINUS
37219: PUSH
37220: LD_INT 0
37222: LESS
37223: IFFALSE 37235
// min_x := 0 else
37225: LD_ADDR_VAR 0 7
37229: PUSH
37230: LD_INT 0
37232: ST_TO_ADDR
37233: GO 37251
// min_x := x - r ;
37235: LD_ADDR_VAR 0 7
37239: PUSH
37240: LD_VAR 0 2
37244: PUSH
37245: LD_VAR 0 4
37249: MINUS
37250: ST_TO_ADDR
// if y - r < 0 then
37251: LD_VAR 0 3
37255: PUSH
37256: LD_VAR 0 4
37260: MINUS
37261: PUSH
37262: LD_INT 0
37264: LESS
37265: IFFALSE 37277
// min_y := 0 else
37267: LD_ADDR_VAR 0 8
37271: PUSH
37272: LD_INT 0
37274: ST_TO_ADDR
37275: GO 37293
// min_y := y - r ;
37277: LD_ADDR_VAR 0 8
37281: PUSH
37282: LD_VAR 0 3
37286: PUSH
37287: LD_VAR 0 4
37291: MINUS
37292: ST_TO_ADDR
// max_x := x + r ;
37293: LD_ADDR_VAR 0 9
37297: PUSH
37298: LD_VAR 0 2
37302: PUSH
37303: LD_VAR 0 4
37307: PLUS
37308: ST_TO_ADDR
// max_y := y + r ;
37309: LD_ADDR_VAR 0 10
37313: PUSH
37314: LD_VAR 0 3
37318: PUSH
37319: LD_VAR 0 4
37323: PLUS
37324: ST_TO_ADDR
// for _x = min_x to max_x do
37325: LD_ADDR_VAR 0 11
37329: PUSH
37330: DOUBLE
37331: LD_VAR 0 7
37335: DEC
37336: ST_TO_ADDR
37337: LD_VAR 0 9
37341: PUSH
37342: FOR_TO
37343: IFFALSE 37460
// for _y = min_y to max_y do
37345: LD_ADDR_VAR 0 12
37349: PUSH
37350: DOUBLE
37351: LD_VAR 0 8
37355: DEC
37356: ST_TO_ADDR
37357: LD_VAR 0 10
37361: PUSH
37362: FOR_TO
37363: IFFALSE 37456
// begin if not ValidHex ( _x , _y ) then
37365: LD_VAR 0 11
37369: PPUSH
37370: LD_VAR 0 12
37374: PPUSH
37375: CALL_OW 488
37379: NOT
37380: IFFALSE 37384
// continue ;
37382: GO 37362
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37384: LD_VAR 0 11
37388: PPUSH
37389: LD_VAR 0 12
37393: PPUSH
37394: CALL_OW 351
37398: PUSH
37399: LD_VAR 0 11
37403: PPUSH
37404: LD_VAR 0 12
37408: PPUSH
37409: CALL_OW 554
37413: AND
37414: IFFALSE 37454
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37416: LD_ADDR_VAR 0 13
37420: PUSH
37421: LD_VAR 0 13
37425: PPUSH
37426: LD_VAR 0 13
37430: PUSH
37431: LD_INT 1
37433: PLUS
37434: PPUSH
37435: LD_VAR 0 11
37439: PUSH
37440: LD_VAR 0 12
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PPUSH
37449: CALL_OW 2
37453: ST_TO_ADDR
// end ;
37454: GO 37362
37456: POP
37457: POP
37458: GO 37342
37460: POP
37461: POP
// if not list then
37462: LD_VAR 0 13
37466: NOT
37467: IFFALSE 37471
// exit ;
37469: GO 37550
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37471: LD_ADDR_VAR 0 13
37475: PUSH
37476: LD_VAR 0 1
37480: PPUSH
37481: LD_VAR 0 13
37485: PPUSH
37486: LD_INT 1
37488: PPUSH
37489: LD_INT 1
37491: PPUSH
37492: CALL 46163 0 4
37496: ST_TO_ADDR
// ComStop ( flame ) ;
37497: LD_VAR 0 1
37501: PPUSH
37502: CALL_OW 141
// for i in list do
37506: LD_ADDR_VAR 0 6
37510: PUSH
37511: LD_VAR 0 13
37515: PUSH
37516: FOR_IN
37517: IFFALSE 37548
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37519: LD_VAR 0 1
37523: PPUSH
37524: LD_VAR 0 6
37528: PUSH
37529: LD_INT 1
37531: ARRAY
37532: PPUSH
37533: LD_VAR 0 6
37537: PUSH
37538: LD_INT 2
37540: ARRAY
37541: PPUSH
37542: CALL_OW 176
37546: GO 37516
37548: POP
37549: POP
// end ;
37550: LD_VAR 0 5
37554: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37555: LD_EXP 99
37559: NOT
37560: IFFALSE 37610
37562: GO 37564
37564: DISABLE
// begin initHack := true ;
37565: LD_ADDR_EXP 99
37569: PUSH
37570: LD_INT 1
37572: ST_TO_ADDR
// hackTanks := [ ] ;
37573: LD_ADDR_EXP 100
37577: PUSH
37578: EMPTY
37579: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37580: LD_ADDR_EXP 101
37584: PUSH
37585: EMPTY
37586: ST_TO_ADDR
// hackLimit := 3 ;
37587: LD_ADDR_EXP 102
37591: PUSH
37592: LD_INT 3
37594: ST_TO_ADDR
// hackDist := 12 ;
37595: LD_ADDR_EXP 103
37599: PUSH
37600: LD_INT 12
37602: ST_TO_ADDR
// hackCounter := [ ] ;
37603: LD_ADDR_EXP 104
37607: PUSH
37608: EMPTY
37609: ST_TO_ADDR
// end ;
37610: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37611: LD_EXP 99
37615: PUSH
37616: LD_INT 34
37618: PUSH
37619: LD_INT 99
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PPUSH
37626: CALL_OW 69
37630: AND
37631: IFFALSE 37884
37633: GO 37635
37635: DISABLE
37636: LD_INT 0
37638: PPUSH
37639: PPUSH
// begin enable ;
37640: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37641: LD_ADDR_VAR 0 1
37645: PUSH
37646: LD_INT 34
37648: PUSH
37649: LD_INT 99
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PPUSH
37656: CALL_OW 69
37660: PUSH
37661: FOR_IN
37662: IFFALSE 37882
// begin if not i in hackTanks then
37664: LD_VAR 0 1
37668: PUSH
37669: LD_EXP 100
37673: IN
37674: NOT
37675: IFFALSE 37758
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37677: LD_ADDR_EXP 100
37681: PUSH
37682: LD_EXP 100
37686: PPUSH
37687: LD_EXP 100
37691: PUSH
37692: LD_INT 1
37694: PLUS
37695: PPUSH
37696: LD_VAR 0 1
37700: PPUSH
37701: CALL_OW 1
37705: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37706: LD_ADDR_EXP 101
37710: PUSH
37711: LD_EXP 101
37715: PPUSH
37716: LD_EXP 101
37720: PUSH
37721: LD_INT 1
37723: PLUS
37724: PPUSH
37725: EMPTY
37726: PPUSH
37727: CALL_OW 1
37731: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37732: LD_ADDR_EXP 104
37736: PUSH
37737: LD_EXP 104
37741: PPUSH
37742: LD_EXP 104
37746: PUSH
37747: LD_INT 1
37749: PLUS
37750: PPUSH
37751: EMPTY
37752: PPUSH
37753: CALL_OW 1
37757: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37758: LD_VAR 0 1
37762: PPUSH
37763: CALL_OW 302
37767: NOT
37768: IFFALSE 37781
// begin HackUnlinkAll ( i ) ;
37770: LD_VAR 0 1
37774: PPUSH
37775: CALL 37887 0 1
// continue ;
37779: GO 37661
// end ; HackCheckCapturedStatus ( i ) ;
37781: LD_VAR 0 1
37785: PPUSH
37786: CALL 38330 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37790: LD_ADDR_VAR 0 2
37794: PUSH
37795: LD_INT 81
37797: PUSH
37798: LD_VAR 0 1
37802: PPUSH
37803: CALL_OW 255
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 33
37814: PUSH
37815: LD_INT 3
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 91
37824: PUSH
37825: LD_VAR 0 1
37829: PUSH
37830: LD_EXP 103
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 50
37842: PUSH
37843: EMPTY
37844: LIST
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: PPUSH
37852: CALL_OW 69
37856: ST_TO_ADDR
// if not tmp then
37857: LD_VAR 0 2
37861: NOT
37862: IFFALSE 37866
// continue ;
37864: GO 37661
// HackLink ( i , tmp ) ;
37866: LD_VAR 0 1
37870: PPUSH
37871: LD_VAR 0 2
37875: PPUSH
37876: CALL 38023 0 2
// end ;
37880: GO 37661
37882: POP
37883: POP
// end ;
37884: PPOPN 2
37886: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37887: LD_INT 0
37889: PPUSH
37890: PPUSH
37891: PPUSH
// if not hack in hackTanks then
37892: LD_VAR 0 1
37896: PUSH
37897: LD_EXP 100
37901: IN
37902: NOT
37903: IFFALSE 37907
// exit ;
37905: GO 38018
// index := GetElementIndex ( hackTanks , hack ) ;
37907: LD_ADDR_VAR 0 4
37911: PUSH
37912: LD_EXP 100
37916: PPUSH
37917: LD_VAR 0 1
37921: PPUSH
37922: CALL 45460 0 2
37926: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37927: LD_EXP 101
37931: PUSH
37932: LD_VAR 0 4
37936: ARRAY
37937: IFFALSE 38018
// begin for i in hackTanksCaptured [ index ] do
37939: LD_ADDR_VAR 0 3
37943: PUSH
37944: LD_EXP 101
37948: PUSH
37949: LD_VAR 0 4
37953: ARRAY
37954: PUSH
37955: FOR_IN
37956: IFFALSE 37982
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37958: LD_VAR 0 3
37962: PUSH
37963: LD_INT 1
37965: ARRAY
37966: PPUSH
37967: LD_VAR 0 3
37971: PUSH
37972: LD_INT 2
37974: ARRAY
37975: PPUSH
37976: CALL_OW 235
37980: GO 37955
37982: POP
37983: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37984: LD_ADDR_EXP 101
37988: PUSH
37989: LD_EXP 101
37993: PPUSH
37994: LD_VAR 0 4
37998: PPUSH
37999: EMPTY
38000: PPUSH
38001: CALL_OW 1
38005: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38006: LD_VAR 0 1
38010: PPUSH
38011: LD_INT 0
38013: PPUSH
38014: CALL_OW 505
// end ; end ;
38018: LD_VAR 0 2
38022: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38023: LD_INT 0
38025: PPUSH
38026: PPUSH
38027: PPUSH
// if not hack in hackTanks or not vehicles then
38028: LD_VAR 0 1
38032: PUSH
38033: LD_EXP 100
38037: IN
38038: NOT
38039: PUSH
38040: LD_VAR 0 2
38044: NOT
38045: OR
38046: IFFALSE 38050
// exit ;
38048: GO 38325
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38050: LD_ADDR_VAR 0 2
38054: PUSH
38055: LD_VAR 0 1
38059: PPUSH
38060: LD_VAR 0 2
38064: PPUSH
38065: LD_INT 1
38067: PPUSH
38068: LD_INT 1
38070: PPUSH
38071: CALL 46110 0 4
38075: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38076: LD_ADDR_VAR 0 5
38080: PUSH
38081: LD_EXP 100
38085: PPUSH
38086: LD_VAR 0 1
38090: PPUSH
38091: CALL 45460 0 2
38095: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38096: LD_EXP 101
38100: PUSH
38101: LD_VAR 0 5
38105: ARRAY
38106: PUSH
38107: LD_EXP 102
38111: LESS
38112: IFFALSE 38301
// begin for i := 1 to vehicles do
38114: LD_ADDR_VAR 0 4
38118: PUSH
38119: DOUBLE
38120: LD_INT 1
38122: DEC
38123: ST_TO_ADDR
38124: LD_VAR 0 2
38128: PUSH
38129: FOR_TO
38130: IFFALSE 38299
// begin if hackTanksCaptured [ index ] = hackLimit then
38132: LD_EXP 101
38136: PUSH
38137: LD_VAR 0 5
38141: ARRAY
38142: PUSH
38143: LD_EXP 102
38147: EQUAL
38148: IFFALSE 38152
// break ;
38150: GO 38299
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38152: LD_ADDR_EXP 104
38156: PUSH
38157: LD_EXP 104
38161: PPUSH
38162: LD_VAR 0 5
38166: PPUSH
38167: LD_EXP 104
38171: PUSH
38172: LD_VAR 0 5
38176: ARRAY
38177: PUSH
38178: LD_INT 1
38180: PLUS
38181: PPUSH
38182: CALL_OW 1
38186: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38187: LD_ADDR_EXP 101
38191: PUSH
38192: LD_EXP 101
38196: PPUSH
38197: LD_VAR 0 5
38201: PUSH
38202: LD_EXP 101
38206: PUSH
38207: LD_VAR 0 5
38211: ARRAY
38212: PUSH
38213: LD_INT 1
38215: PLUS
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PPUSH
38221: LD_VAR 0 2
38225: PUSH
38226: LD_VAR 0 4
38230: ARRAY
38231: PUSH
38232: LD_VAR 0 2
38236: PUSH
38237: LD_VAR 0 4
38241: ARRAY
38242: PPUSH
38243: CALL_OW 255
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PPUSH
38252: CALL 45675 0 3
38256: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38257: LD_VAR 0 2
38261: PUSH
38262: LD_VAR 0 4
38266: ARRAY
38267: PPUSH
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL_OW 255
38277: PPUSH
38278: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38282: LD_VAR 0 2
38286: PUSH
38287: LD_VAR 0 4
38291: ARRAY
38292: PPUSH
38293: CALL_OW 141
// end ;
38297: GO 38129
38299: POP
38300: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38301: LD_VAR 0 1
38305: PPUSH
38306: LD_EXP 101
38310: PUSH
38311: LD_VAR 0 5
38315: ARRAY
38316: PUSH
38317: LD_INT 0
38319: PLUS
38320: PPUSH
38321: CALL_OW 505
// end ;
38325: LD_VAR 0 3
38329: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38330: LD_INT 0
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
// if not hack in hackTanks then
38336: LD_VAR 0 1
38340: PUSH
38341: LD_EXP 100
38345: IN
38346: NOT
38347: IFFALSE 38351
// exit ;
38349: GO 38591
// index := GetElementIndex ( hackTanks , hack ) ;
38351: LD_ADDR_VAR 0 4
38355: PUSH
38356: LD_EXP 100
38360: PPUSH
38361: LD_VAR 0 1
38365: PPUSH
38366: CALL 45460 0 2
38370: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38371: LD_ADDR_VAR 0 3
38375: PUSH
38376: DOUBLE
38377: LD_EXP 101
38381: PUSH
38382: LD_VAR 0 4
38386: ARRAY
38387: INC
38388: ST_TO_ADDR
38389: LD_INT 1
38391: PUSH
38392: FOR_DOWNTO
38393: IFFALSE 38565
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38395: LD_ADDR_VAR 0 5
38399: PUSH
38400: LD_EXP 101
38404: PUSH
38405: LD_VAR 0 4
38409: ARRAY
38410: PUSH
38411: LD_VAR 0 3
38415: ARRAY
38416: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38417: LD_VAR 0 5
38421: PUSH
38422: LD_INT 1
38424: ARRAY
38425: PPUSH
38426: CALL_OW 302
38430: NOT
38431: PUSH
38432: LD_VAR 0 5
38436: PUSH
38437: LD_INT 1
38439: ARRAY
38440: PPUSH
38441: CALL_OW 255
38445: PUSH
38446: LD_VAR 0 1
38450: PPUSH
38451: CALL_OW 255
38455: NONEQUAL
38456: OR
38457: IFFALSE 38563
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38459: LD_VAR 0 5
38463: PUSH
38464: LD_INT 1
38466: ARRAY
38467: PPUSH
38468: CALL_OW 305
38472: PUSH
38473: LD_VAR 0 5
38477: PUSH
38478: LD_INT 1
38480: ARRAY
38481: PPUSH
38482: CALL_OW 255
38486: PUSH
38487: LD_VAR 0 1
38491: PPUSH
38492: CALL_OW 255
38496: EQUAL
38497: AND
38498: IFFALSE 38522
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38500: LD_VAR 0 5
38504: PUSH
38505: LD_INT 1
38507: ARRAY
38508: PPUSH
38509: LD_VAR 0 5
38513: PUSH
38514: LD_INT 2
38516: ARRAY
38517: PPUSH
38518: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38522: LD_ADDR_EXP 101
38526: PUSH
38527: LD_EXP 101
38531: PPUSH
38532: LD_VAR 0 4
38536: PPUSH
38537: LD_EXP 101
38541: PUSH
38542: LD_VAR 0 4
38546: ARRAY
38547: PPUSH
38548: LD_VAR 0 3
38552: PPUSH
38553: CALL_OW 3
38557: PPUSH
38558: CALL_OW 1
38562: ST_TO_ADDR
// end ; end ;
38563: GO 38392
38565: POP
38566: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38567: LD_VAR 0 1
38571: PPUSH
38572: LD_EXP 101
38576: PUSH
38577: LD_VAR 0 4
38581: ARRAY
38582: PUSH
38583: LD_INT 0
38585: PLUS
38586: PPUSH
38587: CALL_OW 505
// end ;
38591: LD_VAR 0 2
38595: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38596: LD_INT 0
38598: PPUSH
38599: PPUSH
38600: PPUSH
38601: PPUSH
// if not hack in hackTanks then
38602: LD_VAR 0 1
38606: PUSH
38607: LD_EXP 100
38611: IN
38612: NOT
38613: IFFALSE 38617
// exit ;
38615: GO 38702
// index := GetElementIndex ( hackTanks , hack ) ;
38617: LD_ADDR_VAR 0 5
38621: PUSH
38622: LD_EXP 100
38626: PPUSH
38627: LD_VAR 0 1
38631: PPUSH
38632: CALL 45460 0 2
38636: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38637: LD_ADDR_VAR 0 4
38641: PUSH
38642: DOUBLE
38643: LD_INT 1
38645: DEC
38646: ST_TO_ADDR
38647: LD_EXP 101
38651: PUSH
38652: LD_VAR 0 5
38656: ARRAY
38657: PUSH
38658: FOR_TO
38659: IFFALSE 38700
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38661: LD_EXP 101
38665: PUSH
38666: LD_VAR 0 5
38670: ARRAY
38671: PUSH
38672: LD_VAR 0 4
38676: ARRAY
38677: PUSH
38678: LD_INT 1
38680: ARRAY
38681: PUSH
38682: LD_VAR 0 2
38686: EQUAL
38687: IFFALSE 38698
// KillUnit ( vehicle ) ;
38689: LD_VAR 0 2
38693: PPUSH
38694: CALL_OW 66
38698: GO 38658
38700: POP
38701: POP
// end ;
38702: LD_VAR 0 3
38706: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38707: LD_EXP 105
38711: NOT
38712: IFFALSE 38747
38714: GO 38716
38716: DISABLE
// begin initMiner := true ;
38717: LD_ADDR_EXP 105
38721: PUSH
38722: LD_INT 1
38724: ST_TO_ADDR
// minersList := [ ] ;
38725: LD_ADDR_EXP 106
38729: PUSH
38730: EMPTY
38731: ST_TO_ADDR
// minerMinesList := [ ] ;
38732: LD_ADDR_EXP 107
38736: PUSH
38737: EMPTY
38738: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38739: LD_ADDR_EXP 108
38743: PUSH
38744: LD_INT 5
38746: ST_TO_ADDR
// end ;
38747: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38748: LD_EXP 105
38752: PUSH
38753: LD_INT 34
38755: PUSH
38756: LD_INT 81
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PPUSH
38763: CALL_OW 69
38767: AND
38768: IFFALSE 39229
38770: GO 38772
38772: DISABLE
38773: LD_INT 0
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
// begin enable ;
38779: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38780: LD_ADDR_VAR 0 1
38784: PUSH
38785: LD_INT 34
38787: PUSH
38788: LD_INT 81
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PPUSH
38795: CALL_OW 69
38799: PUSH
38800: FOR_IN
38801: IFFALSE 38873
// begin if not i in minersList then
38803: LD_VAR 0 1
38807: PUSH
38808: LD_EXP 106
38812: IN
38813: NOT
38814: IFFALSE 38871
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38816: LD_ADDR_EXP 106
38820: PUSH
38821: LD_EXP 106
38825: PPUSH
38826: LD_EXP 106
38830: PUSH
38831: LD_INT 1
38833: PLUS
38834: PPUSH
38835: LD_VAR 0 1
38839: PPUSH
38840: CALL_OW 1
38844: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38845: LD_ADDR_EXP 107
38849: PUSH
38850: LD_EXP 107
38854: PPUSH
38855: LD_EXP 107
38859: PUSH
38860: LD_INT 1
38862: PLUS
38863: PPUSH
38864: EMPTY
38865: PPUSH
38866: CALL_OW 1
38870: ST_TO_ADDR
// end end ;
38871: GO 38800
38873: POP
38874: POP
// for i := minerMinesList downto 1 do
38875: LD_ADDR_VAR 0 1
38879: PUSH
38880: DOUBLE
38881: LD_EXP 107
38885: INC
38886: ST_TO_ADDR
38887: LD_INT 1
38889: PUSH
38890: FOR_DOWNTO
38891: IFFALSE 39227
// begin if IsLive ( minersList [ i ] ) then
38893: LD_EXP 106
38897: PUSH
38898: LD_VAR 0 1
38902: ARRAY
38903: PPUSH
38904: CALL_OW 300
38908: IFFALSE 38936
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38910: LD_EXP 106
38914: PUSH
38915: LD_VAR 0 1
38919: ARRAY
38920: PPUSH
38921: LD_EXP 107
38925: PUSH
38926: LD_VAR 0 1
38930: ARRAY
38931: PPUSH
38932: CALL_OW 505
// if not minerMinesList [ i ] then
38936: LD_EXP 107
38940: PUSH
38941: LD_VAR 0 1
38945: ARRAY
38946: NOT
38947: IFFALSE 38951
// continue ;
38949: GO 38890
// for j := minerMinesList [ i ] downto 1 do
38951: LD_ADDR_VAR 0 2
38955: PUSH
38956: DOUBLE
38957: LD_EXP 107
38961: PUSH
38962: LD_VAR 0 1
38966: ARRAY
38967: INC
38968: ST_TO_ADDR
38969: LD_INT 1
38971: PUSH
38972: FOR_DOWNTO
38973: IFFALSE 39223
// begin side := GetSide ( minersList [ i ] ) ;
38975: LD_ADDR_VAR 0 3
38979: PUSH
38980: LD_EXP 106
38984: PUSH
38985: LD_VAR 0 1
38989: ARRAY
38990: PPUSH
38991: CALL_OW 255
38995: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38996: LD_ADDR_VAR 0 4
39000: PUSH
39001: LD_EXP 107
39005: PUSH
39006: LD_VAR 0 1
39010: ARRAY
39011: PUSH
39012: LD_VAR 0 2
39016: ARRAY
39017: PUSH
39018: LD_INT 1
39020: ARRAY
39021: PPUSH
39022: LD_EXP 107
39026: PUSH
39027: LD_VAR 0 1
39031: ARRAY
39032: PUSH
39033: LD_VAR 0 2
39037: ARRAY
39038: PUSH
39039: LD_INT 2
39041: ARRAY
39042: PPUSH
39043: CALL_OW 428
39047: ST_TO_ADDR
// if not tmp then
39048: LD_VAR 0 4
39052: NOT
39053: IFFALSE 39057
// continue ;
39055: GO 38972
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39057: LD_VAR 0 4
39061: PUSH
39062: LD_INT 81
39064: PUSH
39065: LD_VAR 0 3
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PPUSH
39074: CALL_OW 69
39078: IN
39079: PUSH
39080: LD_EXP 107
39084: PUSH
39085: LD_VAR 0 1
39089: ARRAY
39090: PUSH
39091: LD_VAR 0 2
39095: ARRAY
39096: PUSH
39097: LD_INT 1
39099: ARRAY
39100: PPUSH
39101: LD_EXP 107
39105: PUSH
39106: LD_VAR 0 1
39110: ARRAY
39111: PUSH
39112: LD_VAR 0 2
39116: ARRAY
39117: PUSH
39118: LD_INT 2
39120: ARRAY
39121: PPUSH
39122: CALL_OW 458
39126: AND
39127: IFFALSE 39221
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39129: LD_EXP 107
39133: PUSH
39134: LD_VAR 0 1
39138: ARRAY
39139: PUSH
39140: LD_VAR 0 2
39144: ARRAY
39145: PUSH
39146: LD_INT 1
39148: ARRAY
39149: PPUSH
39150: LD_EXP 107
39154: PUSH
39155: LD_VAR 0 1
39159: ARRAY
39160: PUSH
39161: LD_VAR 0 2
39165: ARRAY
39166: PUSH
39167: LD_INT 2
39169: ARRAY
39170: PPUSH
39171: LD_VAR 0 3
39175: PPUSH
39176: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39180: LD_ADDR_EXP 107
39184: PUSH
39185: LD_EXP 107
39189: PPUSH
39190: LD_VAR 0 1
39194: PPUSH
39195: LD_EXP 107
39199: PUSH
39200: LD_VAR 0 1
39204: ARRAY
39205: PPUSH
39206: LD_VAR 0 2
39210: PPUSH
39211: CALL_OW 3
39215: PPUSH
39216: CALL_OW 1
39220: ST_TO_ADDR
// end ; end ;
39221: GO 38972
39223: POP
39224: POP
// end ;
39225: GO 38890
39227: POP
39228: POP
// end ;
39229: PPOPN 4
39231: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39232: LD_INT 0
39234: PPUSH
39235: PPUSH
// result := false ;
39236: LD_ADDR_VAR 0 4
39240: PUSH
39241: LD_INT 0
39243: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39244: LD_VAR 0 1
39248: PPUSH
39249: CALL_OW 264
39253: PUSH
39254: LD_INT 81
39256: EQUAL
39257: NOT
39258: IFFALSE 39262
// exit ;
39260: GO 39502
// index := GetElementIndex ( minersList , unit ) ;
39262: LD_ADDR_VAR 0 5
39266: PUSH
39267: LD_EXP 106
39271: PPUSH
39272: LD_VAR 0 1
39276: PPUSH
39277: CALL 45460 0 2
39281: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39282: LD_EXP 107
39286: PUSH
39287: LD_VAR 0 5
39291: ARRAY
39292: PUSH
39293: LD_EXP 108
39297: GREATEREQUAL
39298: IFFALSE 39302
// exit ;
39300: GO 39502
// ComMoveXY ( unit , x , y ) ;
39302: LD_VAR 0 1
39306: PPUSH
39307: LD_VAR 0 2
39311: PPUSH
39312: LD_VAR 0 3
39316: PPUSH
39317: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39321: LD_INT 35
39323: PPUSH
39324: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39328: LD_VAR 0 1
39332: PPUSH
39333: LD_VAR 0 2
39337: PPUSH
39338: LD_VAR 0 3
39342: PPUSH
39343: CALL 77212 0 3
39347: NOT
39348: PUSH
39349: LD_VAR 0 1
39353: PPUSH
39354: CALL_OW 314
39358: AND
39359: IFFALSE 39363
// exit ;
39361: GO 39502
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39363: LD_VAR 0 2
39367: PPUSH
39368: LD_VAR 0 3
39372: PPUSH
39373: CALL_OW 428
39377: PUSH
39378: LD_VAR 0 1
39382: EQUAL
39383: PUSH
39384: LD_VAR 0 1
39388: PPUSH
39389: CALL_OW 314
39393: NOT
39394: AND
39395: IFFALSE 39321
// PlaySoundXY ( x , y , PlantMine ) ;
39397: LD_VAR 0 2
39401: PPUSH
39402: LD_VAR 0 3
39406: PPUSH
39407: LD_STRING PlantMine
39409: PPUSH
39410: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39414: LD_VAR 0 2
39418: PPUSH
39419: LD_VAR 0 3
39423: PPUSH
39424: LD_VAR 0 1
39428: PPUSH
39429: CALL_OW 255
39433: PPUSH
39434: LD_INT 0
39436: PPUSH
39437: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39441: LD_ADDR_EXP 107
39445: PUSH
39446: LD_EXP 107
39450: PPUSH
39451: LD_VAR 0 5
39455: PUSH
39456: LD_EXP 107
39460: PUSH
39461: LD_VAR 0 5
39465: ARRAY
39466: PUSH
39467: LD_INT 1
39469: PLUS
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PPUSH
39475: LD_VAR 0 2
39479: PUSH
39480: LD_VAR 0 3
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PPUSH
39489: CALL 45675 0 3
39493: ST_TO_ADDR
// result := true ;
39494: LD_ADDR_VAR 0 4
39498: PUSH
39499: LD_INT 1
39501: ST_TO_ADDR
// end ;
39502: LD_VAR 0 4
39506: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39507: LD_INT 0
39509: PPUSH
39510: PPUSH
39511: PPUSH
// if not unit in minersList then
39512: LD_VAR 0 1
39516: PUSH
39517: LD_EXP 106
39521: IN
39522: NOT
39523: IFFALSE 39527
// exit ;
39525: GO 39919
// index := GetElementIndex ( minersList , unit ) ;
39527: LD_ADDR_VAR 0 6
39531: PUSH
39532: LD_EXP 106
39536: PPUSH
39537: LD_VAR 0 1
39541: PPUSH
39542: CALL 45460 0 2
39546: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39547: LD_ADDR_VAR 0 5
39551: PUSH
39552: DOUBLE
39553: LD_EXP 107
39557: PUSH
39558: LD_VAR 0 6
39562: ARRAY
39563: INC
39564: ST_TO_ADDR
39565: LD_INT 1
39567: PUSH
39568: FOR_DOWNTO
39569: IFFALSE 39730
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39571: LD_EXP 107
39575: PUSH
39576: LD_VAR 0 6
39580: ARRAY
39581: PUSH
39582: LD_VAR 0 5
39586: ARRAY
39587: PUSH
39588: LD_INT 1
39590: ARRAY
39591: PUSH
39592: LD_VAR 0 2
39596: EQUAL
39597: PUSH
39598: LD_EXP 107
39602: PUSH
39603: LD_VAR 0 6
39607: ARRAY
39608: PUSH
39609: LD_VAR 0 5
39613: ARRAY
39614: PUSH
39615: LD_INT 2
39617: ARRAY
39618: PUSH
39619: LD_VAR 0 3
39623: EQUAL
39624: AND
39625: IFFALSE 39728
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39627: LD_EXP 107
39631: PUSH
39632: LD_VAR 0 6
39636: ARRAY
39637: PUSH
39638: LD_VAR 0 5
39642: ARRAY
39643: PUSH
39644: LD_INT 1
39646: ARRAY
39647: PPUSH
39648: LD_EXP 107
39652: PUSH
39653: LD_VAR 0 6
39657: ARRAY
39658: PUSH
39659: LD_VAR 0 5
39663: ARRAY
39664: PUSH
39665: LD_INT 2
39667: ARRAY
39668: PPUSH
39669: LD_VAR 0 1
39673: PPUSH
39674: CALL_OW 255
39678: PPUSH
39679: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39683: LD_ADDR_EXP 107
39687: PUSH
39688: LD_EXP 107
39692: PPUSH
39693: LD_VAR 0 6
39697: PPUSH
39698: LD_EXP 107
39702: PUSH
39703: LD_VAR 0 6
39707: ARRAY
39708: PPUSH
39709: LD_VAR 0 5
39713: PPUSH
39714: CALL_OW 3
39718: PPUSH
39719: CALL_OW 1
39723: ST_TO_ADDR
// exit ;
39724: POP
39725: POP
39726: GO 39919
// end ; end ;
39728: GO 39568
39730: POP
39731: POP
// for i := minerMinesList [ index ] downto 1 do
39732: LD_ADDR_VAR 0 5
39736: PUSH
39737: DOUBLE
39738: LD_EXP 107
39742: PUSH
39743: LD_VAR 0 6
39747: ARRAY
39748: INC
39749: ST_TO_ADDR
39750: LD_INT 1
39752: PUSH
39753: FOR_DOWNTO
39754: IFFALSE 39917
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39756: LD_EXP 107
39760: PUSH
39761: LD_VAR 0 6
39765: ARRAY
39766: PUSH
39767: LD_VAR 0 5
39771: ARRAY
39772: PUSH
39773: LD_INT 1
39775: ARRAY
39776: PPUSH
39777: LD_EXP 107
39781: PUSH
39782: LD_VAR 0 6
39786: ARRAY
39787: PUSH
39788: LD_VAR 0 5
39792: ARRAY
39793: PUSH
39794: LD_INT 2
39796: ARRAY
39797: PPUSH
39798: LD_VAR 0 2
39802: PPUSH
39803: LD_VAR 0 3
39807: PPUSH
39808: CALL_OW 298
39812: PUSH
39813: LD_INT 6
39815: LESS
39816: IFFALSE 39915
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39818: LD_EXP 107
39822: PUSH
39823: LD_VAR 0 6
39827: ARRAY
39828: PUSH
39829: LD_VAR 0 5
39833: ARRAY
39834: PUSH
39835: LD_INT 1
39837: ARRAY
39838: PPUSH
39839: LD_EXP 107
39843: PUSH
39844: LD_VAR 0 6
39848: ARRAY
39849: PUSH
39850: LD_VAR 0 5
39854: ARRAY
39855: PUSH
39856: LD_INT 2
39858: ARRAY
39859: PPUSH
39860: LD_VAR 0 1
39864: PPUSH
39865: CALL_OW 255
39869: PPUSH
39870: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39874: LD_ADDR_EXP 107
39878: PUSH
39879: LD_EXP 107
39883: PPUSH
39884: LD_VAR 0 6
39888: PPUSH
39889: LD_EXP 107
39893: PUSH
39894: LD_VAR 0 6
39898: ARRAY
39899: PPUSH
39900: LD_VAR 0 5
39904: PPUSH
39905: CALL_OW 3
39909: PPUSH
39910: CALL_OW 1
39914: ST_TO_ADDR
// end ; end ;
39915: GO 39753
39917: POP
39918: POP
// end ;
39919: LD_VAR 0 4
39923: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39924: LD_INT 0
39926: PPUSH
39927: PPUSH
39928: PPUSH
39929: PPUSH
39930: PPUSH
39931: PPUSH
39932: PPUSH
39933: PPUSH
39934: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39935: LD_VAR 0 1
39939: PPUSH
39940: CALL_OW 264
39944: PUSH
39945: LD_INT 81
39947: EQUAL
39948: NOT
39949: PUSH
39950: LD_VAR 0 1
39954: PUSH
39955: LD_EXP 106
39959: IN
39960: NOT
39961: OR
39962: IFFALSE 39966
// exit ;
39964: GO 40288
// index := GetElementIndex ( minersList , unit ) ;
39966: LD_ADDR_VAR 0 6
39970: PUSH
39971: LD_EXP 106
39975: PPUSH
39976: LD_VAR 0 1
39980: PPUSH
39981: CALL 45460 0 2
39985: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39986: LD_ADDR_VAR 0 8
39990: PUSH
39991: LD_EXP 108
39995: PUSH
39996: LD_EXP 107
40000: PUSH
40001: LD_VAR 0 6
40005: ARRAY
40006: MINUS
40007: ST_TO_ADDR
// if not minesFreeAmount then
40008: LD_VAR 0 8
40012: NOT
40013: IFFALSE 40017
// exit ;
40015: GO 40288
// tmp := [ ] ;
40017: LD_ADDR_VAR 0 7
40021: PUSH
40022: EMPTY
40023: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40024: LD_ADDR_VAR 0 5
40028: PUSH
40029: DOUBLE
40030: LD_INT 1
40032: DEC
40033: ST_TO_ADDR
40034: LD_VAR 0 8
40038: PUSH
40039: FOR_TO
40040: IFFALSE 40235
// begin _d := rand ( 0 , 5 ) ;
40042: LD_ADDR_VAR 0 11
40046: PUSH
40047: LD_INT 0
40049: PPUSH
40050: LD_INT 5
40052: PPUSH
40053: CALL_OW 12
40057: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40058: LD_ADDR_VAR 0 12
40062: PUSH
40063: LD_INT 2
40065: PPUSH
40066: LD_INT 6
40068: PPUSH
40069: CALL_OW 12
40073: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40074: LD_ADDR_VAR 0 9
40078: PUSH
40079: LD_VAR 0 2
40083: PPUSH
40084: LD_VAR 0 11
40088: PPUSH
40089: LD_VAR 0 12
40093: PPUSH
40094: CALL_OW 272
40098: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40099: LD_ADDR_VAR 0 10
40103: PUSH
40104: LD_VAR 0 3
40108: PPUSH
40109: LD_VAR 0 11
40113: PPUSH
40114: LD_VAR 0 12
40118: PPUSH
40119: CALL_OW 273
40123: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40124: LD_VAR 0 9
40128: PPUSH
40129: LD_VAR 0 10
40133: PPUSH
40134: CALL_OW 488
40138: PUSH
40139: LD_VAR 0 9
40143: PUSH
40144: LD_VAR 0 10
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_VAR 0 7
40157: IN
40158: NOT
40159: AND
40160: PUSH
40161: LD_VAR 0 9
40165: PPUSH
40166: LD_VAR 0 10
40170: PPUSH
40171: CALL_OW 458
40175: NOT
40176: AND
40177: IFFALSE 40219
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40179: LD_ADDR_VAR 0 7
40183: PUSH
40184: LD_VAR 0 7
40188: PPUSH
40189: LD_VAR 0 7
40193: PUSH
40194: LD_INT 1
40196: PLUS
40197: PPUSH
40198: LD_VAR 0 9
40202: PUSH
40203: LD_VAR 0 10
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PPUSH
40212: CALL_OW 1
40216: ST_TO_ADDR
40217: GO 40233
// i := i - 1 ;
40219: LD_ADDR_VAR 0 5
40223: PUSH
40224: LD_VAR 0 5
40228: PUSH
40229: LD_INT 1
40231: MINUS
40232: ST_TO_ADDR
// end ;
40233: GO 40039
40235: POP
40236: POP
// for i in tmp do
40237: LD_ADDR_VAR 0 5
40241: PUSH
40242: LD_VAR 0 7
40246: PUSH
40247: FOR_IN
40248: IFFALSE 40286
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40250: LD_VAR 0 1
40254: PPUSH
40255: LD_VAR 0 5
40259: PUSH
40260: LD_INT 1
40262: ARRAY
40263: PPUSH
40264: LD_VAR 0 5
40268: PUSH
40269: LD_INT 2
40271: ARRAY
40272: PPUSH
40273: CALL 39232 0 3
40277: NOT
40278: IFFALSE 40284
// exit ;
40280: POP
40281: POP
40282: GO 40288
40284: GO 40247
40286: POP
40287: POP
// end ;
40288: LD_VAR 0 4
40292: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40293: LD_INT 0
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
40301: PPUSH
// if not GetClass ( unit ) = class_sniper then
40302: LD_VAR 0 1
40306: PPUSH
40307: CALL_OW 257
40311: PUSH
40312: LD_INT 5
40314: EQUAL
40315: NOT
40316: IFFALSE 40320
// exit ;
40318: GO 40708
// dist := 8 ;
40320: LD_ADDR_VAR 0 5
40324: PUSH
40325: LD_INT 8
40327: ST_TO_ADDR
// viewRange := 12 ;
40328: LD_ADDR_VAR 0 7
40332: PUSH
40333: LD_INT 12
40335: ST_TO_ADDR
// side := GetSide ( unit ) ;
40336: LD_ADDR_VAR 0 6
40340: PUSH
40341: LD_VAR 0 1
40345: PPUSH
40346: CALL_OW 255
40350: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40351: LD_INT 61
40353: PPUSH
40354: LD_VAR 0 6
40358: PPUSH
40359: CALL_OW 321
40363: PUSH
40364: LD_INT 2
40366: EQUAL
40367: IFFALSE 40377
// viewRange := 16 ;
40369: LD_ADDR_VAR 0 7
40373: PUSH
40374: LD_INT 16
40376: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40377: LD_VAR 0 1
40381: PPUSH
40382: LD_VAR 0 2
40386: PPUSH
40387: LD_VAR 0 3
40391: PPUSH
40392: CALL_OW 297
40396: PUSH
40397: LD_VAR 0 5
40401: GREATER
40402: IFFALSE 40481
// begin ComMoveXY ( unit , x , y ) ;
40404: LD_VAR 0 1
40408: PPUSH
40409: LD_VAR 0 2
40413: PPUSH
40414: LD_VAR 0 3
40418: PPUSH
40419: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40423: LD_INT 35
40425: PPUSH
40426: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40430: LD_VAR 0 1
40434: PPUSH
40435: LD_VAR 0 2
40439: PPUSH
40440: LD_VAR 0 3
40444: PPUSH
40445: CALL 77212 0 3
40449: NOT
40450: IFFALSE 40454
// exit ;
40452: GO 40708
// until GetDistUnitXY ( unit , x , y ) < dist ;
40454: LD_VAR 0 1
40458: PPUSH
40459: LD_VAR 0 2
40463: PPUSH
40464: LD_VAR 0 3
40468: PPUSH
40469: CALL_OW 297
40473: PUSH
40474: LD_VAR 0 5
40478: LESS
40479: IFFALSE 40423
// end ; ComTurnXY ( unit , x , y ) ;
40481: LD_VAR 0 1
40485: PPUSH
40486: LD_VAR 0 2
40490: PPUSH
40491: LD_VAR 0 3
40495: PPUSH
40496: CALL_OW 118
// wait ( 5 ) ;
40500: LD_INT 5
40502: PPUSH
40503: CALL_OW 67
// _d := GetDir ( unit ) ;
40507: LD_ADDR_VAR 0 10
40511: PUSH
40512: LD_VAR 0 1
40516: PPUSH
40517: CALL_OW 254
40521: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40522: LD_ADDR_VAR 0 8
40526: PUSH
40527: LD_VAR 0 1
40531: PPUSH
40532: CALL_OW 250
40536: PPUSH
40537: LD_VAR 0 10
40541: PPUSH
40542: LD_VAR 0 5
40546: PPUSH
40547: CALL_OW 272
40551: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40552: LD_ADDR_VAR 0 9
40556: PUSH
40557: LD_VAR 0 1
40561: PPUSH
40562: CALL_OW 251
40566: PPUSH
40567: LD_VAR 0 10
40571: PPUSH
40572: LD_VAR 0 5
40576: PPUSH
40577: CALL_OW 273
40581: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40582: LD_VAR 0 8
40586: PPUSH
40587: LD_VAR 0 9
40591: PPUSH
40592: CALL_OW 488
40596: NOT
40597: IFFALSE 40601
// exit ;
40599: GO 40708
// ComAnimCustom ( unit , 1 ) ;
40601: LD_VAR 0 1
40605: PPUSH
40606: LD_INT 1
40608: PPUSH
40609: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40613: LD_VAR 0 8
40617: PPUSH
40618: LD_VAR 0 9
40622: PPUSH
40623: LD_VAR 0 6
40627: PPUSH
40628: LD_VAR 0 7
40632: PPUSH
40633: CALL_OW 330
// repeat wait ( 1 ) ;
40637: LD_INT 1
40639: PPUSH
40640: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40644: LD_VAR 0 1
40648: PPUSH
40649: CALL_OW 316
40653: PUSH
40654: LD_VAR 0 1
40658: PPUSH
40659: CALL_OW 314
40663: OR
40664: PUSH
40665: LD_VAR 0 1
40669: PPUSH
40670: CALL_OW 302
40674: NOT
40675: OR
40676: PUSH
40677: LD_VAR 0 1
40681: PPUSH
40682: CALL_OW 301
40686: OR
40687: IFFALSE 40637
// RemoveSeeing ( _x , _y , side ) ;
40689: LD_VAR 0 8
40693: PPUSH
40694: LD_VAR 0 9
40698: PPUSH
40699: LD_VAR 0 6
40703: PPUSH
40704: CALL_OW 331
// end ; end_of_file
40708: LD_VAR 0 4
40712: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40713: LD_INT 0
40715: PPUSH
40716: PPUSH
// if exist_mode then
40717: LD_VAR 0 2
40721: IFFALSE 40746
// unit := CreateCharacter ( prefix & ident ) else
40723: LD_ADDR_VAR 0 5
40727: PUSH
40728: LD_VAR 0 3
40732: PUSH
40733: LD_VAR 0 1
40737: STR
40738: PPUSH
40739: CALL_OW 34
40743: ST_TO_ADDR
40744: GO 40761
// unit := NewCharacter ( ident ) ;
40746: LD_ADDR_VAR 0 5
40750: PUSH
40751: LD_VAR 0 1
40755: PPUSH
40756: CALL_OW 25
40760: ST_TO_ADDR
// result := unit ;
40761: LD_ADDR_VAR 0 4
40765: PUSH
40766: LD_VAR 0 5
40770: ST_TO_ADDR
// end ;
40771: LD_VAR 0 4
40775: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40776: LD_INT 0
40778: PPUSH
40779: PPUSH
// if not side or not nation then
40780: LD_VAR 0 1
40784: NOT
40785: PUSH
40786: LD_VAR 0 2
40790: NOT
40791: OR
40792: IFFALSE 40796
// exit ;
40794: GO 41564
// case nation of nation_american :
40796: LD_VAR 0 2
40800: PUSH
40801: LD_INT 1
40803: DOUBLE
40804: EQUAL
40805: IFTRUE 40809
40807: GO 41023
40809: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40810: LD_ADDR_VAR 0 4
40814: PUSH
40815: LD_INT 35
40817: PUSH
40818: LD_INT 45
40820: PUSH
40821: LD_INT 46
40823: PUSH
40824: LD_INT 47
40826: PUSH
40827: LD_INT 82
40829: PUSH
40830: LD_INT 83
40832: PUSH
40833: LD_INT 84
40835: PUSH
40836: LD_INT 85
40838: PUSH
40839: LD_INT 86
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: LD_INT 6
40850: PUSH
40851: LD_INT 15
40853: PUSH
40854: LD_INT 16
40856: PUSH
40857: LD_INT 7
40859: PUSH
40860: LD_INT 12
40862: PUSH
40863: LD_INT 13
40865: PUSH
40866: LD_INT 10
40868: PUSH
40869: LD_INT 14
40871: PUSH
40872: LD_INT 20
40874: PUSH
40875: LD_INT 21
40877: PUSH
40878: LD_INT 22
40880: PUSH
40881: LD_INT 25
40883: PUSH
40884: LD_INT 32
40886: PUSH
40887: LD_INT 27
40889: PUSH
40890: LD_INT 36
40892: PUSH
40893: LD_INT 69
40895: PUSH
40896: LD_INT 39
40898: PUSH
40899: LD_INT 34
40901: PUSH
40902: LD_INT 40
40904: PUSH
40905: LD_INT 48
40907: PUSH
40908: LD_INT 49
40910: PUSH
40911: LD_INT 50
40913: PUSH
40914: LD_INT 51
40916: PUSH
40917: LD_INT 52
40919: PUSH
40920: LD_INT 53
40922: PUSH
40923: LD_INT 54
40925: PUSH
40926: LD_INT 55
40928: PUSH
40929: LD_INT 56
40931: PUSH
40932: LD_INT 57
40934: PUSH
40935: LD_INT 58
40937: PUSH
40938: LD_INT 59
40940: PUSH
40941: LD_INT 60
40943: PUSH
40944: LD_INT 61
40946: PUSH
40947: LD_INT 62
40949: PUSH
40950: LD_INT 80
40952: PUSH
40953: LD_INT 82
40955: PUSH
40956: LD_INT 83
40958: PUSH
40959: LD_INT 84
40961: PUSH
40962: LD_INT 85
40964: PUSH
40965: LD_INT 86
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: ST_TO_ADDR
41021: GO 41488
41023: LD_INT 2
41025: DOUBLE
41026: EQUAL
41027: IFTRUE 41031
41029: GO 41257
41031: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41032: LD_ADDR_VAR 0 4
41036: PUSH
41037: LD_INT 35
41039: PUSH
41040: LD_INT 45
41042: PUSH
41043: LD_INT 46
41045: PUSH
41046: LD_INT 47
41048: PUSH
41049: LD_INT 82
41051: PUSH
41052: LD_INT 83
41054: PUSH
41055: LD_INT 84
41057: PUSH
41058: LD_INT 85
41060: PUSH
41061: LD_INT 87
41063: PUSH
41064: LD_INT 70
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: LD_INT 11
41072: PUSH
41073: LD_INT 3
41075: PUSH
41076: LD_INT 4
41078: PUSH
41079: LD_INT 5
41081: PUSH
41082: LD_INT 6
41084: PUSH
41085: LD_INT 15
41087: PUSH
41088: LD_INT 18
41090: PUSH
41091: LD_INT 7
41093: PUSH
41094: LD_INT 17
41096: PUSH
41097: LD_INT 8
41099: PUSH
41100: LD_INT 20
41102: PUSH
41103: LD_INT 21
41105: PUSH
41106: LD_INT 22
41108: PUSH
41109: LD_INT 72
41111: PUSH
41112: LD_INT 26
41114: PUSH
41115: LD_INT 69
41117: PUSH
41118: LD_INT 39
41120: PUSH
41121: LD_INT 40
41123: PUSH
41124: LD_INT 41
41126: PUSH
41127: LD_INT 42
41129: PUSH
41130: LD_INT 43
41132: PUSH
41133: LD_INT 48
41135: PUSH
41136: LD_INT 49
41138: PUSH
41139: LD_INT 50
41141: PUSH
41142: LD_INT 51
41144: PUSH
41145: LD_INT 52
41147: PUSH
41148: LD_INT 53
41150: PUSH
41151: LD_INT 54
41153: PUSH
41154: LD_INT 55
41156: PUSH
41157: LD_INT 56
41159: PUSH
41160: LD_INT 60
41162: PUSH
41163: LD_INT 61
41165: PUSH
41166: LD_INT 62
41168: PUSH
41169: LD_INT 66
41171: PUSH
41172: LD_INT 67
41174: PUSH
41175: LD_INT 68
41177: PUSH
41178: LD_INT 81
41180: PUSH
41181: LD_INT 82
41183: PUSH
41184: LD_INT 83
41186: PUSH
41187: LD_INT 84
41189: PUSH
41190: LD_INT 85
41192: PUSH
41193: LD_INT 87
41195: PUSH
41196: LD_INT 88
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: ST_TO_ADDR
41255: GO 41488
41257: LD_INT 3
41259: DOUBLE
41260: EQUAL
41261: IFTRUE 41265
41263: GO 41487
41265: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41266: LD_ADDR_VAR 0 4
41270: PUSH
41271: LD_INT 46
41273: PUSH
41274: LD_INT 47
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: LD_INT 82
41285: PUSH
41286: LD_INT 83
41288: PUSH
41289: LD_INT 84
41291: PUSH
41292: LD_INT 85
41294: PUSH
41295: LD_INT 86
41297: PUSH
41298: LD_INT 11
41300: PUSH
41301: LD_INT 9
41303: PUSH
41304: LD_INT 20
41306: PUSH
41307: LD_INT 19
41309: PUSH
41310: LD_INT 21
41312: PUSH
41313: LD_INT 24
41315: PUSH
41316: LD_INT 22
41318: PUSH
41319: LD_INT 25
41321: PUSH
41322: LD_INT 28
41324: PUSH
41325: LD_INT 29
41327: PUSH
41328: LD_INT 30
41330: PUSH
41331: LD_INT 31
41333: PUSH
41334: LD_INT 37
41336: PUSH
41337: LD_INT 38
41339: PUSH
41340: LD_INT 32
41342: PUSH
41343: LD_INT 27
41345: PUSH
41346: LD_INT 33
41348: PUSH
41349: LD_INT 69
41351: PUSH
41352: LD_INT 39
41354: PUSH
41355: LD_INT 34
41357: PUSH
41358: LD_INT 40
41360: PUSH
41361: LD_INT 71
41363: PUSH
41364: LD_INT 23
41366: PUSH
41367: LD_INT 44
41369: PUSH
41370: LD_INT 48
41372: PUSH
41373: LD_INT 49
41375: PUSH
41376: LD_INT 50
41378: PUSH
41379: LD_INT 51
41381: PUSH
41382: LD_INT 52
41384: PUSH
41385: LD_INT 53
41387: PUSH
41388: LD_INT 54
41390: PUSH
41391: LD_INT 55
41393: PUSH
41394: LD_INT 56
41396: PUSH
41397: LD_INT 57
41399: PUSH
41400: LD_INT 58
41402: PUSH
41403: LD_INT 59
41405: PUSH
41406: LD_INT 63
41408: PUSH
41409: LD_INT 64
41411: PUSH
41412: LD_INT 65
41414: PUSH
41415: LD_INT 82
41417: PUSH
41418: LD_INT 83
41420: PUSH
41421: LD_INT 84
41423: PUSH
41424: LD_INT 85
41426: PUSH
41427: LD_INT 86
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: ST_TO_ADDR
41485: GO 41488
41487: POP
// if state > - 1 and state < 3 then
41488: LD_VAR 0 3
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: GREATER
41497: PUSH
41498: LD_VAR 0 3
41502: PUSH
41503: LD_INT 3
41505: LESS
41506: AND
41507: IFFALSE 41564
// for i in result do
41509: LD_ADDR_VAR 0 5
41513: PUSH
41514: LD_VAR 0 4
41518: PUSH
41519: FOR_IN
41520: IFFALSE 41562
// if GetTech ( i , side ) <> state then
41522: LD_VAR 0 5
41526: PPUSH
41527: LD_VAR 0 1
41531: PPUSH
41532: CALL_OW 321
41536: PUSH
41537: LD_VAR 0 3
41541: NONEQUAL
41542: IFFALSE 41560
// result := result diff i ;
41544: LD_ADDR_VAR 0 4
41548: PUSH
41549: LD_VAR 0 4
41553: PUSH
41554: LD_VAR 0 5
41558: DIFF
41559: ST_TO_ADDR
41560: GO 41519
41562: POP
41563: POP
// end ;
41564: LD_VAR 0 4
41568: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41569: LD_INT 0
41571: PPUSH
41572: PPUSH
41573: PPUSH
// result := true ;
41574: LD_ADDR_VAR 0 3
41578: PUSH
41579: LD_INT 1
41581: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41582: LD_ADDR_VAR 0 5
41586: PUSH
41587: LD_VAR 0 2
41591: PPUSH
41592: CALL_OW 480
41596: ST_TO_ADDR
// if not tmp then
41597: LD_VAR 0 5
41601: NOT
41602: IFFALSE 41606
// exit ;
41604: GO 41655
// for i in tmp do
41606: LD_ADDR_VAR 0 4
41610: PUSH
41611: LD_VAR 0 5
41615: PUSH
41616: FOR_IN
41617: IFFALSE 41653
// if GetTech ( i , side ) <> state_researched then
41619: LD_VAR 0 4
41623: PPUSH
41624: LD_VAR 0 1
41628: PPUSH
41629: CALL_OW 321
41633: PUSH
41634: LD_INT 2
41636: NONEQUAL
41637: IFFALSE 41651
// begin result := false ;
41639: LD_ADDR_VAR 0 3
41643: PUSH
41644: LD_INT 0
41646: ST_TO_ADDR
// exit ;
41647: POP
41648: POP
41649: GO 41655
// end ;
41651: GO 41616
41653: POP
41654: POP
// end ;
41655: LD_VAR 0 3
41659: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41660: LD_INT 0
41662: PPUSH
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
41667: PPUSH
41668: PPUSH
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
41673: PPUSH
41674: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41675: LD_VAR 0 1
41679: NOT
41680: PUSH
41681: LD_VAR 0 1
41685: PPUSH
41686: CALL_OW 257
41690: PUSH
41691: LD_INT 9
41693: NONEQUAL
41694: OR
41695: IFFALSE 41699
// exit ;
41697: GO 42272
// side := GetSide ( unit ) ;
41699: LD_ADDR_VAR 0 9
41703: PUSH
41704: LD_VAR 0 1
41708: PPUSH
41709: CALL_OW 255
41713: ST_TO_ADDR
// tech_space := tech_spacanom ;
41714: LD_ADDR_VAR 0 12
41718: PUSH
41719: LD_INT 29
41721: ST_TO_ADDR
// tech_time := tech_taurad ;
41722: LD_ADDR_VAR 0 13
41726: PUSH
41727: LD_INT 28
41729: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41730: LD_ADDR_VAR 0 11
41734: PUSH
41735: LD_VAR 0 1
41739: PPUSH
41740: CALL_OW 310
41744: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41745: LD_VAR 0 11
41749: PPUSH
41750: CALL_OW 247
41754: PUSH
41755: LD_INT 2
41757: EQUAL
41758: IFFALSE 41762
// exit ;
41760: GO 42272
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41762: LD_ADDR_VAR 0 8
41766: PUSH
41767: LD_INT 81
41769: PUSH
41770: LD_VAR 0 9
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: LD_INT 21
41784: PUSH
41785: LD_INT 3
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PPUSH
41800: CALL_OW 69
41804: ST_TO_ADDR
// if not tmp then
41805: LD_VAR 0 8
41809: NOT
41810: IFFALSE 41814
// exit ;
41812: GO 42272
// if in_unit then
41814: LD_VAR 0 11
41818: IFFALSE 41842
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41820: LD_ADDR_VAR 0 10
41824: PUSH
41825: LD_VAR 0 8
41829: PPUSH
41830: LD_VAR 0 11
41834: PPUSH
41835: CALL_OW 74
41839: ST_TO_ADDR
41840: GO 41862
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41842: LD_ADDR_VAR 0 10
41846: PUSH
41847: LD_VAR 0 8
41851: PPUSH
41852: LD_VAR 0 1
41856: PPUSH
41857: CALL_OW 74
41861: ST_TO_ADDR
// if not enemy then
41862: LD_VAR 0 10
41866: NOT
41867: IFFALSE 41871
// exit ;
41869: GO 42272
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41871: LD_VAR 0 11
41875: PUSH
41876: LD_VAR 0 11
41880: PPUSH
41881: LD_VAR 0 10
41885: PPUSH
41886: CALL_OW 296
41890: PUSH
41891: LD_INT 13
41893: GREATER
41894: AND
41895: PUSH
41896: LD_VAR 0 1
41900: PPUSH
41901: LD_VAR 0 10
41905: PPUSH
41906: CALL_OW 296
41910: PUSH
41911: LD_INT 12
41913: GREATER
41914: OR
41915: IFFALSE 41919
// exit ;
41917: GO 42272
// missile := [ 1 ] ;
41919: LD_ADDR_VAR 0 14
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41930: LD_VAR 0 9
41934: PPUSH
41935: LD_VAR 0 12
41939: PPUSH
41940: CALL_OW 325
41944: IFFALSE 41973
// missile := Replace ( missile , missile + 1 , 2 ) ;
41946: LD_ADDR_VAR 0 14
41950: PUSH
41951: LD_VAR 0 14
41955: PPUSH
41956: LD_VAR 0 14
41960: PUSH
41961: LD_INT 1
41963: PLUS
41964: PPUSH
41965: LD_INT 2
41967: PPUSH
41968: CALL_OW 1
41972: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41973: LD_VAR 0 9
41977: PPUSH
41978: LD_VAR 0 13
41982: PPUSH
41983: CALL_OW 325
41987: PUSH
41988: LD_VAR 0 10
41992: PPUSH
41993: CALL_OW 255
41997: PPUSH
41998: LD_VAR 0 13
42002: PPUSH
42003: CALL_OW 325
42007: NOT
42008: AND
42009: IFFALSE 42038
// missile := Replace ( missile , missile + 1 , 3 ) ;
42011: LD_ADDR_VAR 0 14
42015: PUSH
42016: LD_VAR 0 14
42020: PPUSH
42021: LD_VAR 0 14
42025: PUSH
42026: LD_INT 1
42028: PLUS
42029: PPUSH
42030: LD_INT 3
42032: PPUSH
42033: CALL_OW 1
42037: ST_TO_ADDR
// if missile < 2 then
42038: LD_VAR 0 14
42042: PUSH
42043: LD_INT 2
42045: LESS
42046: IFFALSE 42050
// exit ;
42048: GO 42272
// x := GetX ( enemy ) ;
42050: LD_ADDR_VAR 0 4
42054: PUSH
42055: LD_VAR 0 10
42059: PPUSH
42060: CALL_OW 250
42064: ST_TO_ADDR
// y := GetY ( enemy ) ;
42065: LD_ADDR_VAR 0 5
42069: PUSH
42070: LD_VAR 0 10
42074: PPUSH
42075: CALL_OW 251
42079: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42080: LD_ADDR_VAR 0 6
42084: PUSH
42085: LD_VAR 0 4
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PPUSH
42094: LD_INT 1
42096: PPUSH
42097: CALL_OW 12
42101: PLUS
42102: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42103: LD_ADDR_VAR 0 7
42107: PUSH
42108: LD_VAR 0 5
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PPUSH
42117: LD_INT 1
42119: PPUSH
42120: CALL_OW 12
42124: PLUS
42125: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42126: LD_VAR 0 6
42130: PPUSH
42131: LD_VAR 0 7
42135: PPUSH
42136: CALL_OW 488
42140: NOT
42141: IFFALSE 42163
// begin _x := x ;
42143: LD_ADDR_VAR 0 6
42147: PUSH
42148: LD_VAR 0 4
42152: ST_TO_ADDR
// _y := y ;
42153: LD_ADDR_VAR 0 7
42157: PUSH
42158: LD_VAR 0 5
42162: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42163: LD_ADDR_VAR 0 3
42167: PUSH
42168: LD_INT 1
42170: PPUSH
42171: LD_VAR 0 14
42175: PPUSH
42176: CALL_OW 12
42180: ST_TO_ADDR
// case i of 1 :
42181: LD_VAR 0 3
42185: PUSH
42186: LD_INT 1
42188: DOUBLE
42189: EQUAL
42190: IFTRUE 42194
42192: GO 42211
42194: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42195: LD_VAR 0 1
42199: PPUSH
42200: LD_VAR 0 10
42204: PPUSH
42205: CALL_OW 115
42209: GO 42272
42211: LD_INT 2
42213: DOUBLE
42214: EQUAL
42215: IFTRUE 42219
42217: GO 42241
42219: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42220: LD_VAR 0 1
42224: PPUSH
42225: LD_VAR 0 6
42229: PPUSH
42230: LD_VAR 0 7
42234: PPUSH
42235: CALL_OW 153
42239: GO 42272
42241: LD_INT 3
42243: DOUBLE
42244: EQUAL
42245: IFTRUE 42249
42247: GO 42271
42249: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42250: LD_VAR 0 1
42254: PPUSH
42255: LD_VAR 0 6
42259: PPUSH
42260: LD_VAR 0 7
42264: PPUSH
42265: CALL_OW 154
42269: GO 42272
42271: POP
// end ;
42272: LD_VAR 0 2
42276: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42277: LD_INT 0
42279: PPUSH
42280: PPUSH
42281: PPUSH
42282: PPUSH
42283: PPUSH
42284: PPUSH
// if not unit or not building then
42285: LD_VAR 0 1
42289: NOT
42290: PUSH
42291: LD_VAR 0 2
42295: NOT
42296: OR
42297: IFFALSE 42301
// exit ;
42299: GO 42459
// x := GetX ( building ) ;
42301: LD_ADDR_VAR 0 5
42305: PUSH
42306: LD_VAR 0 2
42310: PPUSH
42311: CALL_OW 250
42315: ST_TO_ADDR
// y := GetY ( building ) ;
42316: LD_ADDR_VAR 0 6
42320: PUSH
42321: LD_VAR 0 2
42325: PPUSH
42326: CALL_OW 251
42330: ST_TO_ADDR
// for i = 0 to 5 do
42331: LD_ADDR_VAR 0 4
42335: PUSH
42336: DOUBLE
42337: LD_INT 0
42339: DEC
42340: ST_TO_ADDR
42341: LD_INT 5
42343: PUSH
42344: FOR_TO
42345: IFFALSE 42457
// begin _x := ShiftX ( x , i , 3 ) ;
42347: LD_ADDR_VAR 0 7
42351: PUSH
42352: LD_VAR 0 5
42356: PPUSH
42357: LD_VAR 0 4
42361: PPUSH
42362: LD_INT 3
42364: PPUSH
42365: CALL_OW 272
42369: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42370: LD_ADDR_VAR 0 8
42374: PUSH
42375: LD_VAR 0 6
42379: PPUSH
42380: LD_VAR 0 4
42384: PPUSH
42385: LD_INT 3
42387: PPUSH
42388: CALL_OW 273
42392: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42393: LD_VAR 0 7
42397: PPUSH
42398: LD_VAR 0 8
42402: PPUSH
42403: CALL_OW 488
42407: NOT
42408: IFFALSE 42412
// continue ;
42410: GO 42344
// if HexInfo ( _x , _y ) = 0 then
42412: LD_VAR 0 7
42416: PPUSH
42417: LD_VAR 0 8
42421: PPUSH
42422: CALL_OW 428
42426: PUSH
42427: LD_INT 0
42429: EQUAL
42430: IFFALSE 42455
// begin ComMoveXY ( unit , _x , _y ) ;
42432: LD_VAR 0 1
42436: PPUSH
42437: LD_VAR 0 7
42441: PPUSH
42442: LD_VAR 0 8
42446: PPUSH
42447: CALL_OW 111
// exit ;
42451: POP
42452: POP
42453: GO 42459
// end ; end ;
42455: GO 42344
42457: POP
42458: POP
// end ;
42459: LD_VAR 0 3
42463: RET
// export function ScanBase ( side , base_area ) ; begin
42464: LD_INT 0
42466: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42467: LD_ADDR_VAR 0 3
42471: PUSH
42472: LD_VAR 0 2
42476: PPUSH
42477: LD_INT 81
42479: PUSH
42480: LD_VAR 0 1
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PPUSH
42489: CALL_OW 70
42493: ST_TO_ADDR
// end ;
42494: LD_VAR 0 3
42498: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42499: LD_INT 0
42501: PPUSH
42502: PPUSH
42503: PPUSH
42504: PPUSH
// result := false ;
42505: LD_ADDR_VAR 0 2
42509: PUSH
42510: LD_INT 0
42512: ST_TO_ADDR
// side := GetSide ( unit ) ;
42513: LD_ADDR_VAR 0 3
42517: PUSH
42518: LD_VAR 0 1
42522: PPUSH
42523: CALL_OW 255
42527: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42528: LD_ADDR_VAR 0 4
42532: PUSH
42533: LD_VAR 0 1
42537: PPUSH
42538: CALL_OW 248
42542: ST_TO_ADDR
// case nat of 1 :
42543: LD_VAR 0 4
42547: PUSH
42548: LD_INT 1
42550: DOUBLE
42551: EQUAL
42552: IFTRUE 42556
42554: GO 42567
42556: POP
// tech := tech_lassight ; 2 :
42557: LD_ADDR_VAR 0 5
42561: PUSH
42562: LD_INT 12
42564: ST_TO_ADDR
42565: GO 42606
42567: LD_INT 2
42569: DOUBLE
42570: EQUAL
42571: IFTRUE 42575
42573: GO 42586
42575: POP
// tech := tech_mortar ; 3 :
42576: LD_ADDR_VAR 0 5
42580: PUSH
42581: LD_INT 41
42583: ST_TO_ADDR
42584: GO 42606
42586: LD_INT 3
42588: DOUBLE
42589: EQUAL
42590: IFTRUE 42594
42592: GO 42605
42594: POP
// tech := tech_bazooka ; end ;
42595: LD_ADDR_VAR 0 5
42599: PUSH
42600: LD_INT 44
42602: ST_TO_ADDR
42603: GO 42606
42605: POP
// if Researched ( side , tech ) then
42606: LD_VAR 0 3
42610: PPUSH
42611: LD_VAR 0 5
42615: PPUSH
42616: CALL_OW 325
42620: IFFALSE 42647
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42622: LD_ADDR_VAR 0 2
42626: PUSH
42627: LD_INT 5
42629: PUSH
42630: LD_INT 8
42632: PUSH
42633: LD_INT 9
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: PUSH
42641: LD_VAR 0 4
42645: ARRAY
42646: ST_TO_ADDR
// end ;
42647: LD_VAR 0 2
42651: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42652: LD_INT 0
42654: PPUSH
42655: PPUSH
42656: PPUSH
// if not mines then
42657: LD_VAR 0 2
42661: NOT
42662: IFFALSE 42666
// exit ;
42664: GO 42810
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42666: LD_ADDR_VAR 0 5
42670: PUSH
42671: LD_INT 81
42673: PUSH
42674: LD_VAR 0 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 3
42685: PUSH
42686: LD_INT 21
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PPUSH
42704: CALL_OW 69
42708: ST_TO_ADDR
// for i in mines do
42709: LD_ADDR_VAR 0 4
42713: PUSH
42714: LD_VAR 0 2
42718: PUSH
42719: FOR_IN
42720: IFFALSE 42808
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42722: LD_VAR 0 4
42726: PUSH
42727: LD_INT 1
42729: ARRAY
42730: PPUSH
42731: LD_VAR 0 4
42735: PUSH
42736: LD_INT 2
42738: ARRAY
42739: PPUSH
42740: CALL_OW 458
42744: NOT
42745: IFFALSE 42749
// continue ;
42747: GO 42719
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42749: LD_VAR 0 4
42753: PUSH
42754: LD_INT 1
42756: ARRAY
42757: PPUSH
42758: LD_VAR 0 4
42762: PUSH
42763: LD_INT 2
42765: ARRAY
42766: PPUSH
42767: CALL_OW 428
42771: PUSH
42772: LD_VAR 0 5
42776: IN
42777: IFFALSE 42806
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42779: LD_VAR 0 4
42783: PUSH
42784: LD_INT 1
42786: ARRAY
42787: PPUSH
42788: LD_VAR 0 4
42792: PUSH
42793: LD_INT 2
42795: ARRAY
42796: PPUSH
42797: LD_VAR 0 1
42801: PPUSH
42802: CALL_OW 456
// end ;
42806: GO 42719
42808: POP
42809: POP
// end ;
42810: LD_VAR 0 3
42814: RET
// export function Count ( array ) ; begin
42815: LD_INT 0
42817: PPUSH
// result := array + 0 ;
42818: LD_ADDR_VAR 0 2
42822: PUSH
42823: LD_VAR 0 1
42827: PUSH
42828: LD_INT 0
42830: PLUS
42831: ST_TO_ADDR
// end ;
42832: LD_VAR 0 2
42836: RET
// export function IsEmpty ( building ) ; begin
42837: LD_INT 0
42839: PPUSH
// if not building then
42840: LD_VAR 0 1
42844: NOT
42845: IFFALSE 42849
// exit ;
42847: GO 42892
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42849: LD_ADDR_VAR 0 2
42853: PUSH
42854: LD_VAR 0 1
42858: PUSH
42859: LD_INT 22
42861: PUSH
42862: LD_VAR 0 1
42866: PPUSH
42867: CALL_OW 255
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 58
42878: PUSH
42879: EMPTY
42880: LIST
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PPUSH
42886: CALL_OW 69
42890: IN
42891: ST_TO_ADDR
// end ;
42892: LD_VAR 0 2
42896: RET
// export function IsNotFull ( building ) ; var places ; begin
42897: LD_INT 0
42899: PPUSH
42900: PPUSH
// if not building then
42901: LD_VAR 0 1
42905: NOT
42906: IFFALSE 42910
// exit ;
42908: GO 42938
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42910: LD_ADDR_VAR 0 2
42914: PUSH
42915: LD_VAR 0 1
42919: PPUSH
42920: LD_INT 3
42922: PUSH
42923: LD_INT 62
42925: PUSH
42926: EMPTY
42927: LIST
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PPUSH
42933: CALL_OW 72
42937: ST_TO_ADDR
// end ;
42938: LD_VAR 0 2
42942: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42943: LD_INT 0
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
// tmp := [ ] ;
42949: LD_ADDR_VAR 0 3
42953: PUSH
42954: EMPTY
42955: ST_TO_ADDR
// list := [ ] ;
42956: LD_ADDR_VAR 0 5
42960: PUSH
42961: EMPTY
42962: ST_TO_ADDR
// for i = 16 to 25 do
42963: LD_ADDR_VAR 0 4
42967: PUSH
42968: DOUBLE
42969: LD_INT 16
42971: DEC
42972: ST_TO_ADDR
42973: LD_INT 25
42975: PUSH
42976: FOR_TO
42977: IFFALSE 43050
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42979: LD_ADDR_VAR 0 3
42983: PUSH
42984: LD_VAR 0 3
42988: PUSH
42989: LD_INT 22
42991: PUSH
42992: LD_VAR 0 1
42996: PPUSH
42997: CALL_OW 255
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 91
43008: PUSH
43009: LD_VAR 0 1
43013: PUSH
43014: LD_INT 6
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 30
43024: PUSH
43025: LD_VAR 0 4
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: PUSH
43039: EMPTY
43040: LIST
43041: PPUSH
43042: CALL_OW 69
43046: ADD
43047: ST_TO_ADDR
43048: GO 42976
43050: POP
43051: POP
// for i = 1 to tmp do
43052: LD_ADDR_VAR 0 4
43056: PUSH
43057: DOUBLE
43058: LD_INT 1
43060: DEC
43061: ST_TO_ADDR
43062: LD_VAR 0 3
43066: PUSH
43067: FOR_TO
43068: IFFALSE 43156
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43070: LD_ADDR_VAR 0 5
43074: PUSH
43075: LD_VAR 0 5
43079: PUSH
43080: LD_VAR 0 3
43084: PUSH
43085: LD_VAR 0 4
43089: ARRAY
43090: PPUSH
43091: CALL_OW 266
43095: PUSH
43096: LD_VAR 0 3
43100: PUSH
43101: LD_VAR 0 4
43105: ARRAY
43106: PPUSH
43107: CALL_OW 250
43111: PUSH
43112: LD_VAR 0 3
43116: PUSH
43117: LD_VAR 0 4
43121: ARRAY
43122: PPUSH
43123: CALL_OW 251
43127: PUSH
43128: LD_VAR 0 3
43132: PUSH
43133: LD_VAR 0 4
43137: ARRAY
43138: PPUSH
43139: CALL_OW 254
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: PUSH
43150: EMPTY
43151: LIST
43152: ADD
43153: ST_TO_ADDR
43154: GO 43067
43156: POP
43157: POP
// result := list ;
43158: LD_ADDR_VAR 0 2
43162: PUSH
43163: LD_VAR 0 5
43167: ST_TO_ADDR
// end ;
43168: LD_VAR 0 2
43172: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43173: LD_INT 0
43175: PPUSH
43176: PPUSH
43177: PPUSH
43178: PPUSH
43179: PPUSH
43180: PPUSH
43181: PPUSH
// if not factory then
43182: LD_VAR 0 1
43186: NOT
43187: IFFALSE 43191
// exit ;
43189: GO 43784
// if control = control_apeman then
43191: LD_VAR 0 4
43195: PUSH
43196: LD_INT 5
43198: EQUAL
43199: IFFALSE 43308
// begin tmp := UnitsInside ( factory ) ;
43201: LD_ADDR_VAR 0 8
43205: PUSH
43206: LD_VAR 0 1
43210: PPUSH
43211: CALL_OW 313
43215: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43216: LD_VAR 0 8
43220: PPUSH
43221: LD_INT 25
43223: PUSH
43224: LD_INT 12
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PPUSH
43231: CALL_OW 72
43235: NOT
43236: IFFALSE 43246
// control := control_manual ;
43238: LD_ADDR_VAR 0 4
43242: PUSH
43243: LD_INT 1
43245: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43246: LD_ADDR_VAR 0 8
43250: PUSH
43251: LD_VAR 0 1
43255: PPUSH
43256: CALL 42943 0 1
43260: ST_TO_ADDR
// if tmp then
43261: LD_VAR 0 8
43265: IFFALSE 43308
// begin for i in tmp do
43267: LD_ADDR_VAR 0 7
43271: PUSH
43272: LD_VAR 0 8
43276: PUSH
43277: FOR_IN
43278: IFFALSE 43306
// if i [ 1 ] = b_ext_radio then
43280: LD_VAR 0 7
43284: PUSH
43285: LD_INT 1
43287: ARRAY
43288: PUSH
43289: LD_INT 22
43291: EQUAL
43292: IFFALSE 43304
// begin control := control_remote ;
43294: LD_ADDR_VAR 0 4
43298: PUSH
43299: LD_INT 2
43301: ST_TO_ADDR
// break ;
43302: GO 43306
// end ;
43304: GO 43277
43306: POP
43307: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43308: LD_VAR 0 1
43312: PPUSH
43313: LD_VAR 0 2
43317: PPUSH
43318: LD_VAR 0 3
43322: PPUSH
43323: LD_VAR 0 4
43327: PPUSH
43328: LD_VAR 0 5
43332: PPUSH
43333: CALL_OW 448
43337: IFFALSE 43372
// begin result := [ chassis , engine , control , weapon ] ;
43339: LD_ADDR_VAR 0 6
43343: PUSH
43344: LD_VAR 0 2
43348: PUSH
43349: LD_VAR 0 3
43353: PUSH
43354: LD_VAR 0 4
43358: PUSH
43359: LD_VAR 0 5
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: ST_TO_ADDR
// exit ;
43370: GO 43784
// end ; _chassis := AvailableChassisList ( factory ) ;
43372: LD_ADDR_VAR 0 9
43376: PUSH
43377: LD_VAR 0 1
43381: PPUSH
43382: CALL_OW 475
43386: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43387: LD_ADDR_VAR 0 11
43391: PUSH
43392: LD_VAR 0 1
43396: PPUSH
43397: CALL_OW 476
43401: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43402: LD_ADDR_VAR 0 12
43406: PUSH
43407: LD_VAR 0 1
43411: PPUSH
43412: CALL_OW 477
43416: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43417: LD_ADDR_VAR 0 10
43421: PUSH
43422: LD_VAR 0 1
43426: PPUSH
43427: CALL_OW 478
43431: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43432: LD_VAR 0 9
43436: NOT
43437: PUSH
43438: LD_VAR 0 11
43442: NOT
43443: OR
43444: PUSH
43445: LD_VAR 0 12
43449: NOT
43450: OR
43451: PUSH
43452: LD_VAR 0 10
43456: NOT
43457: OR
43458: IFFALSE 43493
// begin result := [ chassis , engine , control , weapon ] ;
43460: LD_ADDR_VAR 0 6
43464: PUSH
43465: LD_VAR 0 2
43469: PUSH
43470: LD_VAR 0 3
43474: PUSH
43475: LD_VAR 0 4
43479: PUSH
43480: LD_VAR 0 5
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// exit ;
43491: GO 43784
// end ; if not chassis in _chassis then
43493: LD_VAR 0 2
43497: PUSH
43498: LD_VAR 0 9
43502: IN
43503: NOT
43504: IFFALSE 43530
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43506: LD_ADDR_VAR 0 2
43510: PUSH
43511: LD_VAR 0 9
43515: PUSH
43516: LD_INT 1
43518: PPUSH
43519: LD_VAR 0 9
43523: PPUSH
43524: CALL_OW 12
43528: ARRAY
43529: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43530: LD_VAR 0 2
43534: PPUSH
43535: LD_VAR 0 3
43539: PPUSH
43540: CALL 43789 0 2
43544: NOT
43545: IFFALSE 43604
// repeat engine := _engine [ 1 ] ;
43547: LD_ADDR_VAR 0 3
43551: PUSH
43552: LD_VAR 0 11
43556: PUSH
43557: LD_INT 1
43559: ARRAY
43560: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43561: LD_ADDR_VAR 0 11
43565: PUSH
43566: LD_VAR 0 11
43570: PPUSH
43571: LD_INT 1
43573: PPUSH
43574: CALL_OW 3
43578: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43579: LD_VAR 0 2
43583: PPUSH
43584: LD_VAR 0 3
43588: PPUSH
43589: CALL 43789 0 2
43593: PUSH
43594: LD_VAR 0 11
43598: PUSH
43599: EMPTY
43600: EQUAL
43601: OR
43602: IFFALSE 43547
// if not control in _control then
43604: LD_VAR 0 4
43608: PUSH
43609: LD_VAR 0 12
43613: IN
43614: NOT
43615: IFFALSE 43641
// control := _control [ rand ( 1 , _control ) ] ;
43617: LD_ADDR_VAR 0 4
43621: PUSH
43622: LD_VAR 0 12
43626: PUSH
43627: LD_INT 1
43629: PPUSH
43630: LD_VAR 0 12
43634: PPUSH
43635: CALL_OW 12
43639: ARRAY
43640: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43641: LD_VAR 0 2
43645: PPUSH
43646: LD_VAR 0 5
43650: PPUSH
43651: CALL 44009 0 2
43655: NOT
43656: IFFALSE 43715
// repeat weapon := _weapon [ 1 ] ;
43658: LD_ADDR_VAR 0 5
43662: PUSH
43663: LD_VAR 0 10
43667: PUSH
43668: LD_INT 1
43670: ARRAY
43671: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43672: LD_ADDR_VAR 0 10
43676: PUSH
43677: LD_VAR 0 10
43681: PPUSH
43682: LD_INT 1
43684: PPUSH
43685: CALL_OW 3
43689: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43690: LD_VAR 0 2
43694: PPUSH
43695: LD_VAR 0 5
43699: PPUSH
43700: CALL 44009 0 2
43704: PUSH
43705: LD_VAR 0 10
43709: PUSH
43710: EMPTY
43711: EQUAL
43712: OR
43713: IFFALSE 43658
// result := [ ] ;
43715: LD_ADDR_VAR 0 6
43719: PUSH
43720: EMPTY
43721: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43722: LD_VAR 0 1
43726: PPUSH
43727: LD_VAR 0 2
43731: PPUSH
43732: LD_VAR 0 3
43736: PPUSH
43737: LD_VAR 0 4
43741: PPUSH
43742: LD_VAR 0 5
43746: PPUSH
43747: CALL_OW 448
43751: IFFALSE 43784
// result := [ chassis , engine , control , weapon ] ;
43753: LD_ADDR_VAR 0 6
43757: PUSH
43758: LD_VAR 0 2
43762: PUSH
43763: LD_VAR 0 3
43767: PUSH
43768: LD_VAR 0 4
43772: PUSH
43773: LD_VAR 0 5
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: ST_TO_ADDR
// end ;
43784: LD_VAR 0 6
43788: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43789: LD_INT 0
43791: PPUSH
// if not chassis or not engine then
43792: LD_VAR 0 1
43796: NOT
43797: PUSH
43798: LD_VAR 0 2
43802: NOT
43803: OR
43804: IFFALSE 43808
// exit ;
43806: GO 44004
// case engine of engine_solar :
43808: LD_VAR 0 2
43812: PUSH
43813: LD_INT 2
43815: DOUBLE
43816: EQUAL
43817: IFTRUE 43821
43819: GO 43859
43821: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43822: LD_ADDR_VAR 0 3
43826: PUSH
43827: LD_INT 11
43829: PUSH
43830: LD_INT 12
43832: PUSH
43833: LD_INT 13
43835: PUSH
43836: LD_INT 14
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: LD_INT 3
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: ST_TO_ADDR
43857: GO 43988
43859: LD_INT 1
43861: DOUBLE
43862: EQUAL
43863: IFTRUE 43867
43865: GO 43929
43867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43868: LD_ADDR_VAR 0 3
43872: PUSH
43873: LD_INT 11
43875: PUSH
43876: LD_INT 12
43878: PUSH
43879: LD_INT 13
43881: PUSH
43882: LD_INT 14
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: LD_INT 3
43893: PUSH
43894: LD_INT 4
43896: PUSH
43897: LD_INT 5
43899: PUSH
43900: LD_INT 21
43902: PUSH
43903: LD_INT 23
43905: PUSH
43906: LD_INT 22
43908: PUSH
43909: LD_INT 24
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: ST_TO_ADDR
43927: GO 43988
43929: LD_INT 3
43931: DOUBLE
43932: EQUAL
43933: IFTRUE 43937
43935: GO 43987
43937: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43938: LD_ADDR_VAR 0 3
43942: PUSH
43943: LD_INT 13
43945: PUSH
43946: LD_INT 14
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: LD_INT 3
43954: PUSH
43955: LD_INT 4
43957: PUSH
43958: LD_INT 5
43960: PUSH
43961: LD_INT 21
43963: PUSH
43964: LD_INT 22
43966: PUSH
43967: LD_INT 23
43969: PUSH
43970: LD_INT 24
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: ST_TO_ADDR
43985: GO 43988
43987: POP
// result := ( chassis in result ) ;
43988: LD_ADDR_VAR 0 3
43992: PUSH
43993: LD_VAR 0 1
43997: PUSH
43998: LD_VAR 0 3
44002: IN
44003: ST_TO_ADDR
// end ;
44004: LD_VAR 0 3
44008: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44009: LD_INT 0
44011: PPUSH
// if not chassis or not weapon then
44012: LD_VAR 0 1
44016: NOT
44017: PUSH
44018: LD_VAR 0 2
44022: NOT
44023: OR
44024: IFFALSE 44028
// exit ;
44026: GO 45088
// case weapon of us_machine_gun :
44028: LD_VAR 0 2
44032: PUSH
44033: LD_INT 2
44035: DOUBLE
44036: EQUAL
44037: IFTRUE 44041
44039: GO 44071
44041: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44042: LD_ADDR_VAR 0 3
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 3
44055: PUSH
44056: LD_INT 4
44058: PUSH
44059: LD_INT 5
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: ST_TO_ADDR
44069: GO 45072
44071: LD_INT 3
44073: DOUBLE
44074: EQUAL
44075: IFTRUE 44079
44077: GO 44109
44079: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44080: LD_ADDR_VAR 0 3
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: LD_INT 2
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: LD_INT 4
44096: PUSH
44097: LD_INT 5
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: ST_TO_ADDR
44107: GO 45072
44109: LD_INT 11
44111: DOUBLE
44112: EQUAL
44113: IFTRUE 44117
44115: GO 44147
44117: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44118: LD_ADDR_VAR 0 3
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: LD_INT 3
44131: PUSH
44132: LD_INT 4
44134: PUSH
44135: LD_INT 5
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: ST_TO_ADDR
44145: GO 45072
44147: LD_INT 4
44149: DOUBLE
44150: EQUAL
44151: IFTRUE 44155
44153: GO 44181
44155: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44156: LD_ADDR_VAR 0 3
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: LD_INT 3
44166: PUSH
44167: LD_INT 4
44169: PUSH
44170: LD_INT 5
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: ST_TO_ADDR
44179: GO 45072
44181: LD_INT 5
44183: DOUBLE
44184: EQUAL
44185: IFTRUE 44189
44187: GO 44215
44189: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44190: LD_ADDR_VAR 0 3
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: LD_INT 3
44200: PUSH
44201: LD_INT 4
44203: PUSH
44204: LD_INT 5
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: ST_TO_ADDR
44213: GO 45072
44215: LD_INT 9
44217: DOUBLE
44218: EQUAL
44219: IFTRUE 44223
44221: GO 44249
44223: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44224: LD_ADDR_VAR 0 3
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: LD_INT 3
44234: PUSH
44235: LD_INT 4
44237: PUSH
44238: LD_INT 5
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
44247: GO 45072
44249: LD_INT 7
44251: DOUBLE
44252: EQUAL
44253: IFTRUE 44257
44255: GO 44283
44257: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44258: LD_ADDR_VAR 0 3
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 3
44268: PUSH
44269: LD_INT 4
44271: PUSH
44272: LD_INT 5
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: ST_TO_ADDR
44281: GO 45072
44283: LD_INT 12
44285: DOUBLE
44286: EQUAL
44287: IFTRUE 44291
44289: GO 44317
44291: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44292: LD_ADDR_VAR 0 3
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: LD_INT 4
44305: PUSH
44306: LD_INT 5
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
44315: GO 45072
44317: LD_INT 13
44319: DOUBLE
44320: EQUAL
44321: IFTRUE 44325
44323: GO 44351
44325: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44326: LD_ADDR_VAR 0 3
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 3
44336: PUSH
44337: LD_INT 4
44339: PUSH
44340: LD_INT 5
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: ST_TO_ADDR
44349: GO 45072
44351: LD_INT 14
44353: DOUBLE
44354: EQUAL
44355: IFTRUE 44359
44357: GO 44377
44359: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44360: LD_ADDR_VAR 0 3
44364: PUSH
44365: LD_INT 4
44367: PUSH
44368: LD_INT 5
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: ST_TO_ADDR
44375: GO 45072
44377: LD_INT 6
44379: DOUBLE
44380: EQUAL
44381: IFTRUE 44385
44383: GO 44403
44385: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44386: LD_ADDR_VAR 0 3
44390: PUSH
44391: LD_INT 4
44393: PUSH
44394: LD_INT 5
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: ST_TO_ADDR
44401: GO 45072
44403: LD_INT 10
44405: DOUBLE
44406: EQUAL
44407: IFTRUE 44411
44409: GO 44429
44411: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44412: LD_ADDR_VAR 0 3
44416: PUSH
44417: LD_INT 4
44419: PUSH
44420: LD_INT 5
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: ST_TO_ADDR
44427: GO 45072
44429: LD_INT 22
44431: DOUBLE
44432: EQUAL
44433: IFTRUE 44437
44435: GO 44463
44437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44438: LD_ADDR_VAR 0 3
44442: PUSH
44443: LD_INT 11
44445: PUSH
44446: LD_INT 12
44448: PUSH
44449: LD_INT 13
44451: PUSH
44452: LD_INT 14
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: ST_TO_ADDR
44461: GO 45072
44463: LD_INT 23
44465: DOUBLE
44466: EQUAL
44467: IFTRUE 44471
44469: GO 44497
44471: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44472: LD_ADDR_VAR 0 3
44476: PUSH
44477: LD_INT 11
44479: PUSH
44480: LD_INT 12
44482: PUSH
44483: LD_INT 13
44485: PUSH
44486: LD_INT 14
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: ST_TO_ADDR
44495: GO 45072
44497: LD_INT 24
44499: DOUBLE
44500: EQUAL
44501: IFTRUE 44505
44503: GO 44531
44505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44506: LD_ADDR_VAR 0 3
44510: PUSH
44511: LD_INT 11
44513: PUSH
44514: LD_INT 12
44516: PUSH
44517: LD_INT 13
44519: PUSH
44520: LD_INT 14
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: ST_TO_ADDR
44529: GO 45072
44531: LD_INT 30
44533: DOUBLE
44534: EQUAL
44535: IFTRUE 44539
44537: GO 44565
44539: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44540: LD_ADDR_VAR 0 3
44544: PUSH
44545: LD_INT 11
44547: PUSH
44548: LD_INT 12
44550: PUSH
44551: LD_INT 13
44553: PUSH
44554: LD_INT 14
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: ST_TO_ADDR
44563: GO 45072
44565: LD_INT 25
44567: DOUBLE
44568: EQUAL
44569: IFTRUE 44573
44571: GO 44591
44573: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44574: LD_ADDR_VAR 0 3
44578: PUSH
44579: LD_INT 13
44581: PUSH
44582: LD_INT 14
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: ST_TO_ADDR
44589: GO 45072
44591: LD_INT 27
44593: DOUBLE
44594: EQUAL
44595: IFTRUE 44599
44597: GO 44617
44599: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44600: LD_ADDR_VAR 0 3
44604: PUSH
44605: LD_INT 13
44607: PUSH
44608: LD_INT 14
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: ST_TO_ADDR
44615: GO 45072
44617: LD_INT 92
44619: DOUBLE
44620: EQUAL
44621: IFTRUE 44625
44623: GO 44651
44625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44626: LD_ADDR_VAR 0 3
44630: PUSH
44631: LD_INT 11
44633: PUSH
44634: LD_INT 12
44636: PUSH
44637: LD_INT 13
44639: PUSH
44640: LD_INT 14
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: ST_TO_ADDR
44649: GO 45072
44651: LD_INT 28
44653: DOUBLE
44654: EQUAL
44655: IFTRUE 44659
44657: GO 44677
44659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44660: LD_ADDR_VAR 0 3
44664: PUSH
44665: LD_INT 13
44667: PUSH
44668: LD_INT 14
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: ST_TO_ADDR
44675: GO 45072
44677: LD_INT 29
44679: DOUBLE
44680: EQUAL
44681: IFTRUE 44685
44683: GO 44703
44685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44686: LD_ADDR_VAR 0 3
44690: PUSH
44691: LD_INT 13
44693: PUSH
44694: LD_INT 14
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: ST_TO_ADDR
44701: GO 45072
44703: LD_INT 31
44705: DOUBLE
44706: EQUAL
44707: IFTRUE 44711
44709: GO 44729
44711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44712: LD_ADDR_VAR 0 3
44716: PUSH
44717: LD_INT 13
44719: PUSH
44720: LD_INT 14
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: ST_TO_ADDR
44727: GO 45072
44729: LD_INT 26
44731: DOUBLE
44732: EQUAL
44733: IFTRUE 44737
44735: GO 44755
44737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44738: LD_ADDR_VAR 0 3
44742: PUSH
44743: LD_INT 13
44745: PUSH
44746: LD_INT 14
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: ST_TO_ADDR
44753: GO 45072
44755: LD_INT 42
44757: DOUBLE
44758: EQUAL
44759: IFTRUE 44763
44761: GO 44789
44763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44764: LD_ADDR_VAR 0 3
44768: PUSH
44769: LD_INT 21
44771: PUSH
44772: LD_INT 22
44774: PUSH
44775: LD_INT 23
44777: PUSH
44778: LD_INT 24
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: ST_TO_ADDR
44787: GO 45072
44789: LD_INT 43
44791: DOUBLE
44792: EQUAL
44793: IFTRUE 44797
44795: GO 44823
44797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44798: LD_ADDR_VAR 0 3
44802: PUSH
44803: LD_INT 21
44805: PUSH
44806: LD_INT 22
44808: PUSH
44809: LD_INT 23
44811: PUSH
44812: LD_INT 24
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: ST_TO_ADDR
44821: GO 45072
44823: LD_INT 44
44825: DOUBLE
44826: EQUAL
44827: IFTRUE 44831
44829: GO 44857
44831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44832: LD_ADDR_VAR 0 3
44836: PUSH
44837: LD_INT 21
44839: PUSH
44840: LD_INT 22
44842: PUSH
44843: LD_INT 23
44845: PUSH
44846: LD_INT 24
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: ST_TO_ADDR
44855: GO 45072
44857: LD_INT 45
44859: DOUBLE
44860: EQUAL
44861: IFTRUE 44865
44863: GO 44891
44865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44866: LD_ADDR_VAR 0 3
44870: PUSH
44871: LD_INT 21
44873: PUSH
44874: LD_INT 22
44876: PUSH
44877: LD_INT 23
44879: PUSH
44880: LD_INT 24
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: ST_TO_ADDR
44889: GO 45072
44891: LD_INT 49
44893: DOUBLE
44894: EQUAL
44895: IFTRUE 44899
44897: GO 44925
44899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44900: LD_ADDR_VAR 0 3
44904: PUSH
44905: LD_INT 21
44907: PUSH
44908: LD_INT 22
44910: PUSH
44911: LD_INT 23
44913: PUSH
44914: LD_INT 24
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: ST_TO_ADDR
44923: GO 45072
44925: LD_INT 51
44927: DOUBLE
44928: EQUAL
44929: IFTRUE 44933
44931: GO 44959
44933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44934: LD_ADDR_VAR 0 3
44938: PUSH
44939: LD_INT 21
44941: PUSH
44942: LD_INT 22
44944: PUSH
44945: LD_INT 23
44947: PUSH
44948: LD_INT 24
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: ST_TO_ADDR
44957: GO 45072
44959: LD_INT 52
44961: DOUBLE
44962: EQUAL
44963: IFTRUE 44967
44965: GO 44993
44967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44968: LD_ADDR_VAR 0 3
44972: PUSH
44973: LD_INT 21
44975: PUSH
44976: LD_INT 22
44978: PUSH
44979: LD_INT 23
44981: PUSH
44982: LD_INT 24
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: ST_TO_ADDR
44991: GO 45072
44993: LD_INT 53
44995: DOUBLE
44996: EQUAL
44997: IFTRUE 45001
44999: GO 45019
45001: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45002: LD_ADDR_VAR 0 3
45006: PUSH
45007: LD_INT 23
45009: PUSH
45010: LD_INT 24
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: ST_TO_ADDR
45017: GO 45072
45019: LD_INT 46
45021: DOUBLE
45022: EQUAL
45023: IFTRUE 45027
45025: GO 45045
45027: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45028: LD_ADDR_VAR 0 3
45032: PUSH
45033: LD_INT 23
45035: PUSH
45036: LD_INT 24
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: ST_TO_ADDR
45043: GO 45072
45045: LD_INT 47
45047: DOUBLE
45048: EQUAL
45049: IFTRUE 45053
45051: GO 45071
45053: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45054: LD_ADDR_VAR 0 3
45058: PUSH
45059: LD_INT 23
45061: PUSH
45062: LD_INT 24
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: ST_TO_ADDR
45069: GO 45072
45071: POP
// result := ( chassis in result ) ;
45072: LD_ADDR_VAR 0 3
45076: PUSH
45077: LD_VAR 0 1
45081: PUSH
45082: LD_VAR 0 3
45086: IN
45087: ST_TO_ADDR
// end ;
45088: LD_VAR 0 3
45092: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45093: LD_INT 0
45095: PPUSH
45096: PPUSH
45097: PPUSH
45098: PPUSH
45099: PPUSH
45100: PPUSH
45101: PPUSH
// result := array ;
45102: LD_ADDR_VAR 0 5
45106: PUSH
45107: LD_VAR 0 1
45111: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45112: LD_VAR 0 1
45116: NOT
45117: PUSH
45118: LD_VAR 0 2
45122: NOT
45123: OR
45124: PUSH
45125: LD_VAR 0 3
45129: NOT
45130: OR
45131: PUSH
45132: LD_VAR 0 2
45136: PUSH
45137: LD_VAR 0 1
45141: GREATER
45142: OR
45143: PUSH
45144: LD_VAR 0 3
45148: PUSH
45149: LD_VAR 0 1
45153: GREATER
45154: OR
45155: IFFALSE 45159
// exit ;
45157: GO 45455
// if direction then
45159: LD_VAR 0 4
45163: IFFALSE 45227
// begin d := 1 ;
45165: LD_ADDR_VAR 0 9
45169: PUSH
45170: LD_INT 1
45172: ST_TO_ADDR
// if i_from > i_to then
45173: LD_VAR 0 2
45177: PUSH
45178: LD_VAR 0 3
45182: GREATER
45183: IFFALSE 45209
// length := ( array - i_from ) + i_to else
45185: LD_ADDR_VAR 0 11
45189: PUSH
45190: LD_VAR 0 1
45194: PUSH
45195: LD_VAR 0 2
45199: MINUS
45200: PUSH
45201: LD_VAR 0 3
45205: PLUS
45206: ST_TO_ADDR
45207: GO 45225
// length := i_to - i_from ;
45209: LD_ADDR_VAR 0 11
45213: PUSH
45214: LD_VAR 0 3
45218: PUSH
45219: LD_VAR 0 2
45223: MINUS
45224: ST_TO_ADDR
// end else
45225: GO 45288
// begin d := - 1 ;
45227: LD_ADDR_VAR 0 9
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: ST_TO_ADDR
// if i_from > i_to then
45236: LD_VAR 0 2
45240: PUSH
45241: LD_VAR 0 3
45245: GREATER
45246: IFFALSE 45266
// length := i_from - i_to else
45248: LD_ADDR_VAR 0 11
45252: PUSH
45253: LD_VAR 0 2
45257: PUSH
45258: LD_VAR 0 3
45262: MINUS
45263: ST_TO_ADDR
45264: GO 45288
// length := ( array - i_to ) + i_from ;
45266: LD_ADDR_VAR 0 11
45270: PUSH
45271: LD_VAR 0 1
45275: PUSH
45276: LD_VAR 0 3
45280: MINUS
45281: PUSH
45282: LD_VAR 0 2
45286: PLUS
45287: ST_TO_ADDR
// end ; if not length then
45288: LD_VAR 0 11
45292: NOT
45293: IFFALSE 45297
// exit ;
45295: GO 45455
// tmp := array ;
45297: LD_ADDR_VAR 0 10
45301: PUSH
45302: LD_VAR 0 1
45306: ST_TO_ADDR
// for i = 1 to length do
45307: LD_ADDR_VAR 0 6
45311: PUSH
45312: DOUBLE
45313: LD_INT 1
45315: DEC
45316: ST_TO_ADDR
45317: LD_VAR 0 11
45321: PUSH
45322: FOR_TO
45323: IFFALSE 45443
// begin for j = 1 to array do
45325: LD_ADDR_VAR 0 7
45329: PUSH
45330: DOUBLE
45331: LD_INT 1
45333: DEC
45334: ST_TO_ADDR
45335: LD_VAR 0 1
45339: PUSH
45340: FOR_TO
45341: IFFALSE 45429
// begin k := j + d ;
45343: LD_ADDR_VAR 0 8
45347: PUSH
45348: LD_VAR 0 7
45352: PUSH
45353: LD_VAR 0 9
45357: PLUS
45358: ST_TO_ADDR
// if k > array then
45359: LD_VAR 0 8
45363: PUSH
45364: LD_VAR 0 1
45368: GREATER
45369: IFFALSE 45379
// k := 1 ;
45371: LD_ADDR_VAR 0 8
45375: PUSH
45376: LD_INT 1
45378: ST_TO_ADDR
// if not k then
45379: LD_VAR 0 8
45383: NOT
45384: IFFALSE 45396
// k := array ;
45386: LD_ADDR_VAR 0 8
45390: PUSH
45391: LD_VAR 0 1
45395: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45396: LD_ADDR_VAR 0 10
45400: PUSH
45401: LD_VAR 0 10
45405: PPUSH
45406: LD_VAR 0 8
45410: PPUSH
45411: LD_VAR 0 1
45415: PUSH
45416: LD_VAR 0 7
45420: ARRAY
45421: PPUSH
45422: CALL_OW 1
45426: ST_TO_ADDR
// end ;
45427: GO 45340
45429: POP
45430: POP
// array := tmp ;
45431: LD_ADDR_VAR 0 1
45435: PUSH
45436: LD_VAR 0 10
45440: ST_TO_ADDR
// end ;
45441: GO 45322
45443: POP
45444: POP
// result := array ;
45445: LD_ADDR_VAR 0 5
45449: PUSH
45450: LD_VAR 0 1
45454: ST_TO_ADDR
// end ;
45455: LD_VAR 0 5
45459: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45460: LD_INT 0
45462: PPUSH
45463: PPUSH
// result := 0 ;
45464: LD_ADDR_VAR 0 3
45468: PUSH
45469: LD_INT 0
45471: ST_TO_ADDR
// if not array or not value in array then
45472: LD_VAR 0 1
45476: NOT
45477: PUSH
45478: LD_VAR 0 2
45482: PUSH
45483: LD_VAR 0 1
45487: IN
45488: NOT
45489: OR
45490: IFFALSE 45494
// exit ;
45492: GO 45548
// for i = 1 to array do
45494: LD_ADDR_VAR 0 4
45498: PUSH
45499: DOUBLE
45500: LD_INT 1
45502: DEC
45503: ST_TO_ADDR
45504: LD_VAR 0 1
45508: PUSH
45509: FOR_TO
45510: IFFALSE 45546
// if value = array [ i ] then
45512: LD_VAR 0 2
45516: PUSH
45517: LD_VAR 0 1
45521: PUSH
45522: LD_VAR 0 4
45526: ARRAY
45527: EQUAL
45528: IFFALSE 45544
// begin result := i ;
45530: LD_ADDR_VAR 0 3
45534: PUSH
45535: LD_VAR 0 4
45539: ST_TO_ADDR
// exit ;
45540: POP
45541: POP
45542: GO 45548
// end ;
45544: GO 45509
45546: POP
45547: POP
// end ;
45548: LD_VAR 0 3
45552: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45553: LD_INT 0
45555: PPUSH
// vc_chassis := chassis ;
45556: LD_ADDR_OWVAR 37
45560: PUSH
45561: LD_VAR 0 1
45565: ST_TO_ADDR
// vc_engine := engine ;
45566: LD_ADDR_OWVAR 39
45570: PUSH
45571: LD_VAR 0 2
45575: ST_TO_ADDR
// vc_control := control ;
45576: LD_ADDR_OWVAR 38
45580: PUSH
45581: LD_VAR 0 3
45585: ST_TO_ADDR
// vc_weapon := weapon ;
45586: LD_ADDR_OWVAR 40
45590: PUSH
45591: LD_VAR 0 4
45595: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45596: LD_ADDR_OWVAR 41
45600: PUSH
45601: LD_VAR 0 5
45605: ST_TO_ADDR
// end ;
45606: LD_VAR 0 6
45610: RET
// export function WantPlant ( unit ) ; var task ; begin
45611: LD_INT 0
45613: PPUSH
45614: PPUSH
// result := false ;
45615: LD_ADDR_VAR 0 2
45619: PUSH
45620: LD_INT 0
45622: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45623: LD_ADDR_VAR 0 3
45627: PUSH
45628: LD_VAR 0 1
45632: PPUSH
45633: CALL_OW 437
45637: ST_TO_ADDR
// if task then
45638: LD_VAR 0 3
45642: IFFALSE 45670
// if task [ 1 ] [ 1 ] = p then
45644: LD_VAR 0 3
45648: PUSH
45649: LD_INT 1
45651: ARRAY
45652: PUSH
45653: LD_INT 1
45655: ARRAY
45656: PUSH
45657: LD_STRING p
45659: EQUAL
45660: IFFALSE 45670
// result := true ;
45662: LD_ADDR_VAR 0 2
45666: PUSH
45667: LD_INT 1
45669: ST_TO_ADDR
// end ;
45670: LD_VAR 0 2
45674: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45675: LD_INT 0
45677: PPUSH
45678: PPUSH
45679: PPUSH
45680: PPUSH
// if pos < 1 then
45681: LD_VAR 0 2
45685: PUSH
45686: LD_INT 1
45688: LESS
45689: IFFALSE 45693
// exit ;
45691: GO 45996
// if pos = 1 then
45693: LD_VAR 0 2
45697: PUSH
45698: LD_INT 1
45700: EQUAL
45701: IFFALSE 45734
// result := Replace ( arr , pos [ 1 ] , value ) else
45703: LD_ADDR_VAR 0 4
45707: PUSH
45708: LD_VAR 0 1
45712: PPUSH
45713: LD_VAR 0 2
45717: PUSH
45718: LD_INT 1
45720: ARRAY
45721: PPUSH
45722: LD_VAR 0 3
45726: PPUSH
45727: CALL_OW 1
45731: ST_TO_ADDR
45732: GO 45996
// begin tmp := arr ;
45734: LD_ADDR_VAR 0 6
45738: PUSH
45739: LD_VAR 0 1
45743: ST_TO_ADDR
// s_arr := [ tmp ] ;
45744: LD_ADDR_VAR 0 7
45748: PUSH
45749: LD_VAR 0 6
45753: PUSH
45754: EMPTY
45755: LIST
45756: ST_TO_ADDR
// for i = 1 to pos - 1 do
45757: LD_ADDR_VAR 0 5
45761: PUSH
45762: DOUBLE
45763: LD_INT 1
45765: DEC
45766: ST_TO_ADDR
45767: LD_VAR 0 2
45771: PUSH
45772: LD_INT 1
45774: MINUS
45775: PUSH
45776: FOR_TO
45777: IFFALSE 45822
// begin tmp := tmp [ pos [ i ] ] ;
45779: LD_ADDR_VAR 0 6
45783: PUSH
45784: LD_VAR 0 6
45788: PUSH
45789: LD_VAR 0 2
45793: PUSH
45794: LD_VAR 0 5
45798: ARRAY
45799: ARRAY
45800: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45801: LD_ADDR_VAR 0 7
45805: PUSH
45806: LD_VAR 0 7
45810: PUSH
45811: LD_VAR 0 6
45815: PUSH
45816: EMPTY
45817: LIST
45818: ADD
45819: ST_TO_ADDR
// end ;
45820: GO 45776
45822: POP
45823: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45824: LD_ADDR_VAR 0 6
45828: PUSH
45829: LD_VAR 0 6
45833: PPUSH
45834: LD_VAR 0 2
45838: PUSH
45839: LD_VAR 0 2
45843: ARRAY
45844: PPUSH
45845: LD_VAR 0 3
45849: PPUSH
45850: CALL_OW 1
45854: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45855: LD_ADDR_VAR 0 7
45859: PUSH
45860: LD_VAR 0 7
45864: PPUSH
45865: LD_VAR 0 7
45869: PPUSH
45870: LD_VAR 0 6
45874: PPUSH
45875: CALL_OW 1
45879: ST_TO_ADDR
// for i = s_arr downto 2 do
45880: LD_ADDR_VAR 0 5
45884: PUSH
45885: DOUBLE
45886: LD_VAR 0 7
45890: INC
45891: ST_TO_ADDR
45892: LD_INT 2
45894: PUSH
45895: FOR_DOWNTO
45896: IFFALSE 45980
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45898: LD_ADDR_VAR 0 6
45902: PUSH
45903: LD_VAR 0 7
45907: PUSH
45908: LD_VAR 0 5
45912: PUSH
45913: LD_INT 1
45915: MINUS
45916: ARRAY
45917: PPUSH
45918: LD_VAR 0 2
45922: PUSH
45923: LD_VAR 0 5
45927: PUSH
45928: LD_INT 1
45930: MINUS
45931: ARRAY
45932: PPUSH
45933: LD_VAR 0 7
45937: PUSH
45938: LD_VAR 0 5
45942: ARRAY
45943: PPUSH
45944: CALL_OW 1
45948: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45949: LD_ADDR_VAR 0 7
45953: PUSH
45954: LD_VAR 0 7
45958: PPUSH
45959: LD_VAR 0 5
45963: PUSH
45964: LD_INT 1
45966: MINUS
45967: PPUSH
45968: LD_VAR 0 6
45972: PPUSH
45973: CALL_OW 1
45977: ST_TO_ADDR
// end ;
45978: GO 45895
45980: POP
45981: POP
// result := s_arr [ 1 ] ;
45982: LD_ADDR_VAR 0 4
45986: PUSH
45987: LD_VAR 0 7
45991: PUSH
45992: LD_INT 1
45994: ARRAY
45995: ST_TO_ADDR
// end ; end ;
45996: LD_VAR 0 4
46000: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46001: LD_INT 0
46003: PPUSH
46004: PPUSH
// if not list then
46005: LD_VAR 0 1
46009: NOT
46010: IFFALSE 46014
// exit ;
46012: GO 46105
// i := list [ pos1 ] ;
46014: LD_ADDR_VAR 0 5
46018: PUSH
46019: LD_VAR 0 1
46023: PUSH
46024: LD_VAR 0 2
46028: ARRAY
46029: ST_TO_ADDR
// if not i then
46030: LD_VAR 0 5
46034: NOT
46035: IFFALSE 46039
// exit ;
46037: GO 46105
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46039: LD_ADDR_VAR 0 1
46043: PUSH
46044: LD_VAR 0 1
46048: PPUSH
46049: LD_VAR 0 2
46053: PPUSH
46054: LD_VAR 0 1
46058: PUSH
46059: LD_VAR 0 3
46063: ARRAY
46064: PPUSH
46065: CALL_OW 1
46069: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46070: LD_ADDR_VAR 0 1
46074: PUSH
46075: LD_VAR 0 1
46079: PPUSH
46080: LD_VAR 0 3
46084: PPUSH
46085: LD_VAR 0 5
46089: PPUSH
46090: CALL_OW 1
46094: ST_TO_ADDR
// result := list ;
46095: LD_ADDR_VAR 0 4
46099: PUSH
46100: LD_VAR 0 1
46104: ST_TO_ADDR
// end ;
46105: LD_VAR 0 4
46109: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46110: LD_INT 0
46112: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46113: LD_ADDR_VAR 0 5
46117: PUSH
46118: LD_VAR 0 1
46122: PPUSH
46123: CALL_OW 250
46127: PPUSH
46128: LD_VAR 0 1
46132: PPUSH
46133: CALL_OW 251
46137: PPUSH
46138: LD_VAR 0 2
46142: PPUSH
46143: LD_VAR 0 3
46147: PPUSH
46148: LD_VAR 0 4
46152: PPUSH
46153: CALL 46531 0 5
46157: ST_TO_ADDR
// end ;
46158: LD_VAR 0 5
46162: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46163: LD_INT 0
46165: PPUSH
46166: PPUSH
46167: PPUSH
46168: PPUSH
// if not list or not unit then
46169: LD_VAR 0 2
46173: NOT
46174: PUSH
46175: LD_VAR 0 1
46179: NOT
46180: OR
46181: IFFALSE 46185
// exit ;
46183: GO 46526
// result := [ ] ;
46185: LD_ADDR_VAR 0 5
46189: PUSH
46190: EMPTY
46191: ST_TO_ADDR
// for i in list do
46192: LD_ADDR_VAR 0 6
46196: PUSH
46197: LD_VAR 0 2
46201: PUSH
46202: FOR_IN
46203: IFFALSE 46421
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46205: LD_ADDR_VAR 0 8
46209: PUSH
46210: LD_VAR 0 1
46214: PPUSH
46215: LD_VAR 0 6
46219: PUSH
46220: LD_INT 1
46222: ARRAY
46223: PPUSH
46224: LD_VAR 0 6
46228: PUSH
46229: LD_INT 2
46231: ARRAY
46232: PPUSH
46233: CALL_OW 297
46237: ST_TO_ADDR
// if not Count ( result ) then
46238: LD_VAR 0 5
46242: PPUSH
46243: CALL 42815 0 1
46247: NOT
46248: IFFALSE 46281
// begin result := Join ( result , [ i , tmp ] ) ;
46250: LD_ADDR_VAR 0 5
46254: PUSH
46255: LD_VAR 0 5
46259: PPUSH
46260: LD_VAR 0 6
46264: PUSH
46265: LD_VAR 0 8
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PPUSH
46274: CALL 78415 0 2
46278: ST_TO_ADDR
// continue ;
46279: GO 46202
// end ; if result [ result ] [ 2 ] <= tmp then
46281: LD_VAR 0 5
46285: PUSH
46286: LD_VAR 0 5
46290: ARRAY
46291: PUSH
46292: LD_INT 2
46294: ARRAY
46295: PUSH
46296: LD_VAR 0 8
46300: LESSEQUAL
46301: IFFALSE 46334
// result := Join ( result , [ i , tmp ] ) else
46303: LD_ADDR_VAR 0 5
46307: PUSH
46308: LD_VAR 0 5
46312: PPUSH
46313: LD_VAR 0 6
46317: PUSH
46318: LD_VAR 0 8
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PPUSH
46327: CALL 78415 0 2
46331: ST_TO_ADDR
46332: GO 46419
// begin for j := 1 to Count ( result ) do
46334: LD_ADDR_VAR 0 7
46338: PUSH
46339: DOUBLE
46340: LD_INT 1
46342: DEC
46343: ST_TO_ADDR
46344: LD_VAR 0 5
46348: PPUSH
46349: CALL 42815 0 1
46353: PUSH
46354: FOR_TO
46355: IFFALSE 46417
// begin if tmp < result [ j ] [ 2 ] then
46357: LD_VAR 0 8
46361: PUSH
46362: LD_VAR 0 5
46366: PUSH
46367: LD_VAR 0 7
46371: ARRAY
46372: PUSH
46373: LD_INT 2
46375: ARRAY
46376: LESS
46377: IFFALSE 46415
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46379: LD_ADDR_VAR 0 5
46383: PUSH
46384: LD_VAR 0 5
46388: PPUSH
46389: LD_VAR 0 7
46393: PPUSH
46394: LD_VAR 0 6
46398: PUSH
46399: LD_VAR 0 8
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PPUSH
46408: CALL_OW 2
46412: ST_TO_ADDR
// break ;
46413: GO 46417
// end ; end ;
46415: GO 46354
46417: POP
46418: POP
// end ; end ;
46419: GO 46202
46421: POP
46422: POP
// if result and not asc then
46423: LD_VAR 0 5
46427: PUSH
46428: LD_VAR 0 3
46432: NOT
46433: AND
46434: IFFALSE 46451
// result := ReverseArray ( result ) ;
46436: LD_ADDR_VAR 0 5
46440: PUSH
46441: LD_VAR 0 5
46445: PPUSH
46446: CALL 73691 0 1
46450: ST_TO_ADDR
// tmp := [ ] ;
46451: LD_ADDR_VAR 0 8
46455: PUSH
46456: EMPTY
46457: ST_TO_ADDR
// if mode then
46458: LD_VAR 0 4
46462: IFFALSE 46526
// begin for i := 1 to result do
46464: LD_ADDR_VAR 0 6
46468: PUSH
46469: DOUBLE
46470: LD_INT 1
46472: DEC
46473: ST_TO_ADDR
46474: LD_VAR 0 5
46478: PUSH
46479: FOR_TO
46480: IFFALSE 46514
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46482: LD_ADDR_VAR 0 8
46486: PUSH
46487: LD_VAR 0 8
46491: PPUSH
46492: LD_VAR 0 5
46496: PUSH
46497: LD_VAR 0 6
46501: ARRAY
46502: PUSH
46503: LD_INT 1
46505: ARRAY
46506: PPUSH
46507: CALL 78415 0 2
46511: ST_TO_ADDR
46512: GO 46479
46514: POP
46515: POP
// result := tmp ;
46516: LD_ADDR_VAR 0 5
46520: PUSH
46521: LD_VAR 0 8
46525: ST_TO_ADDR
// end ; end ;
46526: LD_VAR 0 5
46530: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46531: LD_INT 0
46533: PPUSH
46534: PPUSH
46535: PPUSH
46536: PPUSH
// if not list then
46537: LD_VAR 0 3
46541: NOT
46542: IFFALSE 46546
// exit ;
46544: GO 46934
// result := [ ] ;
46546: LD_ADDR_VAR 0 6
46550: PUSH
46551: EMPTY
46552: ST_TO_ADDR
// for i in list do
46553: LD_ADDR_VAR 0 7
46557: PUSH
46558: LD_VAR 0 3
46562: PUSH
46563: FOR_IN
46564: IFFALSE 46766
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46566: LD_ADDR_VAR 0 9
46570: PUSH
46571: LD_VAR 0 7
46575: PPUSH
46576: LD_VAR 0 1
46580: PPUSH
46581: LD_VAR 0 2
46585: PPUSH
46586: CALL_OW 297
46590: ST_TO_ADDR
// if not result then
46591: LD_VAR 0 6
46595: NOT
46596: IFFALSE 46622
// result := [ [ i , tmp ] ] else
46598: LD_ADDR_VAR 0 6
46602: PUSH
46603: LD_VAR 0 7
46607: PUSH
46608: LD_VAR 0 9
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: EMPTY
46618: LIST
46619: ST_TO_ADDR
46620: GO 46764
// begin if result [ result ] [ 2 ] < tmp then
46622: LD_VAR 0 6
46626: PUSH
46627: LD_VAR 0 6
46631: ARRAY
46632: PUSH
46633: LD_INT 2
46635: ARRAY
46636: PUSH
46637: LD_VAR 0 9
46641: LESS
46642: IFFALSE 46684
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46644: LD_ADDR_VAR 0 6
46648: PUSH
46649: LD_VAR 0 6
46653: PPUSH
46654: LD_VAR 0 6
46658: PUSH
46659: LD_INT 1
46661: PLUS
46662: PPUSH
46663: LD_VAR 0 7
46667: PUSH
46668: LD_VAR 0 9
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PPUSH
46677: CALL_OW 2
46681: ST_TO_ADDR
46682: GO 46764
// for j = 1 to result do
46684: LD_ADDR_VAR 0 8
46688: PUSH
46689: DOUBLE
46690: LD_INT 1
46692: DEC
46693: ST_TO_ADDR
46694: LD_VAR 0 6
46698: PUSH
46699: FOR_TO
46700: IFFALSE 46762
// begin if tmp < result [ j ] [ 2 ] then
46702: LD_VAR 0 9
46706: PUSH
46707: LD_VAR 0 6
46711: PUSH
46712: LD_VAR 0 8
46716: ARRAY
46717: PUSH
46718: LD_INT 2
46720: ARRAY
46721: LESS
46722: IFFALSE 46760
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46724: LD_ADDR_VAR 0 6
46728: PUSH
46729: LD_VAR 0 6
46733: PPUSH
46734: LD_VAR 0 8
46738: PPUSH
46739: LD_VAR 0 7
46743: PUSH
46744: LD_VAR 0 9
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PPUSH
46753: CALL_OW 2
46757: ST_TO_ADDR
// break ;
46758: GO 46762
// end ; end ;
46760: GO 46699
46762: POP
46763: POP
// end ; end ;
46764: GO 46563
46766: POP
46767: POP
// if result and not asc then
46768: LD_VAR 0 6
46772: PUSH
46773: LD_VAR 0 4
46777: NOT
46778: AND
46779: IFFALSE 46854
// begin tmp := result ;
46781: LD_ADDR_VAR 0 9
46785: PUSH
46786: LD_VAR 0 6
46790: ST_TO_ADDR
// for i = tmp downto 1 do
46791: LD_ADDR_VAR 0 7
46795: PUSH
46796: DOUBLE
46797: LD_VAR 0 9
46801: INC
46802: ST_TO_ADDR
46803: LD_INT 1
46805: PUSH
46806: FOR_DOWNTO
46807: IFFALSE 46852
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46809: LD_ADDR_VAR 0 6
46813: PUSH
46814: LD_VAR 0 6
46818: PPUSH
46819: LD_VAR 0 9
46823: PUSH
46824: LD_VAR 0 7
46828: MINUS
46829: PUSH
46830: LD_INT 1
46832: PLUS
46833: PPUSH
46834: LD_VAR 0 9
46838: PUSH
46839: LD_VAR 0 7
46843: ARRAY
46844: PPUSH
46845: CALL_OW 1
46849: ST_TO_ADDR
46850: GO 46806
46852: POP
46853: POP
// end ; tmp := [ ] ;
46854: LD_ADDR_VAR 0 9
46858: PUSH
46859: EMPTY
46860: ST_TO_ADDR
// if mode then
46861: LD_VAR 0 5
46865: IFFALSE 46934
// begin for i = 1 to result do
46867: LD_ADDR_VAR 0 7
46871: PUSH
46872: DOUBLE
46873: LD_INT 1
46875: DEC
46876: ST_TO_ADDR
46877: LD_VAR 0 6
46881: PUSH
46882: FOR_TO
46883: IFFALSE 46922
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46885: LD_ADDR_VAR 0 9
46889: PUSH
46890: LD_VAR 0 9
46894: PPUSH
46895: LD_VAR 0 7
46899: PPUSH
46900: LD_VAR 0 6
46904: PUSH
46905: LD_VAR 0 7
46909: ARRAY
46910: PUSH
46911: LD_INT 1
46913: ARRAY
46914: PPUSH
46915: CALL_OW 1
46919: ST_TO_ADDR
46920: GO 46882
46922: POP
46923: POP
// result := tmp ;
46924: LD_ADDR_VAR 0 6
46928: PUSH
46929: LD_VAR 0 9
46933: ST_TO_ADDR
// end ; end ;
46934: LD_VAR 0 6
46938: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46939: LD_INT 0
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46947: LD_ADDR_VAR 0 5
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: ST_TO_ADDR
// if not x or not y then
46969: LD_VAR 0 2
46973: NOT
46974: PUSH
46975: LD_VAR 0 3
46979: NOT
46980: OR
46981: IFFALSE 46985
// exit ;
46983: GO 48635
// if not range then
46985: LD_VAR 0 4
46989: NOT
46990: IFFALSE 47000
// range := 10 ;
46992: LD_ADDR_VAR 0 4
46996: PUSH
46997: LD_INT 10
46999: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47000: LD_ADDR_VAR 0 8
47004: PUSH
47005: LD_INT 81
47007: PUSH
47008: LD_VAR 0 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 92
47019: PUSH
47020: LD_VAR 0 2
47024: PUSH
47025: LD_VAR 0 3
47029: PUSH
47030: LD_VAR 0 4
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 3
47043: PUSH
47044: LD_INT 21
47046: PUSH
47047: LD_INT 3
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: LIST
47062: PPUSH
47063: CALL_OW 69
47067: ST_TO_ADDR
// if not tmp then
47068: LD_VAR 0 8
47072: NOT
47073: IFFALSE 47077
// exit ;
47075: GO 48635
// for i in tmp do
47077: LD_ADDR_VAR 0 6
47081: PUSH
47082: LD_VAR 0 8
47086: PUSH
47087: FOR_IN
47088: IFFALSE 48610
// begin points := [ 0 , 0 , 0 ] ;
47090: LD_ADDR_VAR 0 9
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// bpoints := 1 ;
47109: LD_ADDR_VAR 0 10
47113: PUSH
47114: LD_INT 1
47116: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47117: LD_VAR 0 6
47121: PPUSH
47122: CALL_OW 247
47126: PUSH
47127: LD_INT 1
47129: DOUBLE
47130: EQUAL
47131: IFTRUE 47135
47133: GO 47713
47135: POP
// begin if GetClass ( i ) = 1 then
47136: LD_VAR 0 6
47140: PPUSH
47141: CALL_OW 257
47145: PUSH
47146: LD_INT 1
47148: EQUAL
47149: IFFALSE 47170
// points := [ 10 , 5 , 3 ] ;
47151: LD_ADDR_VAR 0 9
47155: PUSH
47156: LD_INT 10
47158: PUSH
47159: LD_INT 5
47161: PUSH
47162: LD_INT 3
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: LIST
47169: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47170: LD_VAR 0 6
47174: PPUSH
47175: CALL_OW 257
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 3
47185: PUSH
47186: LD_INT 4
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: IN
47194: IFFALSE 47215
// points := [ 3 , 2 , 1 ] ;
47196: LD_ADDR_VAR 0 9
47200: PUSH
47201: LD_INT 3
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47215: LD_VAR 0 6
47219: PPUSH
47220: CALL_OW 257
47224: PUSH
47225: LD_INT 5
47227: EQUAL
47228: IFFALSE 47249
// points := [ 130 , 5 , 2 ] ;
47230: LD_ADDR_VAR 0 9
47234: PUSH
47235: LD_INT 130
47237: PUSH
47238: LD_INT 5
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: LIST
47248: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47249: LD_VAR 0 6
47253: PPUSH
47254: CALL_OW 257
47258: PUSH
47259: LD_INT 8
47261: EQUAL
47262: IFFALSE 47283
// points := [ 35 , 35 , 30 ] ;
47264: LD_ADDR_VAR 0 9
47268: PUSH
47269: LD_INT 35
47271: PUSH
47272: LD_INT 35
47274: PUSH
47275: LD_INT 30
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47283: LD_VAR 0 6
47287: PPUSH
47288: CALL_OW 257
47292: PUSH
47293: LD_INT 9
47295: EQUAL
47296: IFFALSE 47317
// points := [ 20 , 55 , 40 ] ;
47298: LD_ADDR_VAR 0 9
47302: PUSH
47303: LD_INT 20
47305: PUSH
47306: LD_INT 55
47308: PUSH
47309: LD_INT 40
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: LIST
47316: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47317: LD_VAR 0 6
47321: PPUSH
47322: CALL_OW 257
47326: PUSH
47327: LD_INT 12
47329: PUSH
47330: LD_INT 16
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: IN
47337: IFFALSE 47358
// points := [ 5 , 3 , 2 ] ;
47339: LD_ADDR_VAR 0 9
47343: PUSH
47344: LD_INT 5
47346: PUSH
47347: LD_INT 3
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: LIST
47357: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47358: LD_VAR 0 6
47362: PPUSH
47363: CALL_OW 257
47367: PUSH
47368: LD_INT 17
47370: EQUAL
47371: IFFALSE 47392
// points := [ 100 , 50 , 75 ] ;
47373: LD_ADDR_VAR 0 9
47377: PUSH
47378: LD_INT 100
47380: PUSH
47381: LD_INT 50
47383: PUSH
47384: LD_INT 75
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47392: LD_VAR 0 6
47396: PPUSH
47397: CALL_OW 257
47401: PUSH
47402: LD_INT 15
47404: EQUAL
47405: IFFALSE 47426
// points := [ 10 , 5 , 3 ] ;
47407: LD_ADDR_VAR 0 9
47411: PUSH
47412: LD_INT 10
47414: PUSH
47415: LD_INT 5
47417: PUSH
47418: LD_INT 3
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: LIST
47425: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47426: LD_VAR 0 6
47430: PPUSH
47431: CALL_OW 257
47435: PUSH
47436: LD_INT 14
47438: EQUAL
47439: IFFALSE 47460
// points := [ 10 , 0 , 0 ] ;
47441: LD_ADDR_VAR 0 9
47445: PUSH
47446: LD_INT 10
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: LIST
47459: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47460: LD_VAR 0 6
47464: PPUSH
47465: CALL_OW 257
47469: PUSH
47470: LD_INT 11
47472: EQUAL
47473: IFFALSE 47494
// points := [ 30 , 10 , 5 ] ;
47475: LD_ADDR_VAR 0 9
47479: PUSH
47480: LD_INT 30
47482: PUSH
47483: LD_INT 10
47485: PUSH
47486: LD_INT 5
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: LIST
47493: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47494: LD_VAR 0 1
47498: PPUSH
47499: LD_INT 5
47501: PPUSH
47502: CALL_OW 321
47506: PUSH
47507: LD_INT 2
47509: EQUAL
47510: IFFALSE 47527
// bpoints := bpoints * 1.8 ;
47512: LD_ADDR_VAR 0 10
47516: PUSH
47517: LD_VAR 0 10
47521: PUSH
47522: LD_REAL  1.80000000000000E+0000
47525: MUL
47526: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47527: LD_VAR 0 6
47531: PPUSH
47532: CALL_OW 257
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 3
47545: PUSH
47546: LD_INT 4
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: IN
47555: PUSH
47556: LD_VAR 0 1
47560: PPUSH
47561: LD_INT 51
47563: PPUSH
47564: CALL_OW 321
47568: PUSH
47569: LD_INT 2
47571: EQUAL
47572: AND
47573: IFFALSE 47590
// bpoints := bpoints * 1.2 ;
47575: LD_ADDR_VAR 0 10
47579: PUSH
47580: LD_VAR 0 10
47584: PUSH
47585: LD_REAL  1.20000000000000E+0000
47588: MUL
47589: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47590: LD_VAR 0 6
47594: PPUSH
47595: CALL_OW 257
47599: PUSH
47600: LD_INT 5
47602: PUSH
47603: LD_INT 7
47605: PUSH
47606: LD_INT 9
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: LIST
47613: IN
47614: PUSH
47615: LD_VAR 0 1
47619: PPUSH
47620: LD_INT 52
47622: PPUSH
47623: CALL_OW 321
47627: PUSH
47628: LD_INT 2
47630: EQUAL
47631: AND
47632: IFFALSE 47649
// bpoints := bpoints * 1.5 ;
47634: LD_ADDR_VAR 0 10
47638: PUSH
47639: LD_VAR 0 10
47643: PUSH
47644: LD_REAL  1.50000000000000E+0000
47647: MUL
47648: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47649: LD_VAR 0 1
47653: PPUSH
47654: LD_INT 66
47656: PPUSH
47657: CALL_OW 321
47661: PUSH
47662: LD_INT 2
47664: EQUAL
47665: IFFALSE 47682
// bpoints := bpoints * 1.1 ;
47667: LD_ADDR_VAR 0 10
47671: PUSH
47672: LD_VAR 0 10
47676: PUSH
47677: LD_REAL  1.10000000000000E+0000
47680: MUL
47681: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47682: LD_ADDR_VAR 0 10
47686: PUSH
47687: LD_VAR 0 10
47691: PUSH
47692: LD_VAR 0 6
47696: PPUSH
47697: LD_INT 1
47699: PPUSH
47700: CALL_OW 259
47704: PUSH
47705: LD_REAL  1.15000000000000E+0000
47708: MUL
47709: MUL
47710: ST_TO_ADDR
// end ; unit_vehicle :
47711: GO 48539
47713: LD_INT 2
47715: DOUBLE
47716: EQUAL
47717: IFTRUE 47721
47719: GO 48527
47721: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47722: LD_VAR 0 6
47726: PPUSH
47727: CALL_OW 264
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: LD_INT 42
47737: PUSH
47738: LD_INT 24
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: IN
47746: IFFALSE 47767
// points := [ 25 , 5 , 3 ] ;
47748: LD_ADDR_VAR 0 9
47752: PUSH
47753: LD_INT 25
47755: PUSH
47756: LD_INT 5
47758: PUSH
47759: LD_INT 3
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47767: LD_VAR 0 6
47771: PPUSH
47772: CALL_OW 264
47776: PUSH
47777: LD_INT 4
47779: PUSH
47780: LD_INT 43
47782: PUSH
47783: LD_INT 25
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: IN
47791: IFFALSE 47812
// points := [ 40 , 15 , 5 ] ;
47793: LD_ADDR_VAR 0 9
47797: PUSH
47798: LD_INT 40
47800: PUSH
47801: LD_INT 15
47803: PUSH
47804: LD_INT 5
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47812: LD_VAR 0 6
47816: PPUSH
47817: CALL_OW 264
47821: PUSH
47822: LD_INT 3
47824: PUSH
47825: LD_INT 23
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: IN
47832: IFFALSE 47853
// points := [ 7 , 25 , 8 ] ;
47834: LD_ADDR_VAR 0 9
47838: PUSH
47839: LD_INT 7
47841: PUSH
47842: LD_INT 25
47844: PUSH
47845: LD_INT 8
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: LIST
47852: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47853: LD_VAR 0 6
47857: PPUSH
47858: CALL_OW 264
47862: PUSH
47863: LD_INT 5
47865: PUSH
47866: LD_INT 27
47868: PUSH
47869: LD_INT 44
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: LIST
47876: IN
47877: IFFALSE 47898
// points := [ 14 , 50 , 16 ] ;
47879: LD_ADDR_VAR 0 9
47883: PUSH
47884: LD_INT 14
47886: PUSH
47887: LD_INT 50
47889: PUSH
47890: LD_INT 16
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47898: LD_VAR 0 6
47902: PPUSH
47903: CALL_OW 264
47907: PUSH
47908: LD_INT 6
47910: PUSH
47911: LD_INT 46
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: IN
47918: IFFALSE 47939
// points := [ 32 , 120 , 70 ] ;
47920: LD_ADDR_VAR 0 9
47924: PUSH
47925: LD_INT 32
47927: PUSH
47928: LD_INT 120
47930: PUSH
47931: LD_INT 70
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47939: LD_VAR 0 6
47943: PPUSH
47944: CALL_OW 264
47948: PUSH
47949: LD_INT 7
47951: PUSH
47952: LD_INT 28
47954: PUSH
47955: LD_INT 45
47957: PUSH
47958: LD_INT 92
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: IN
47967: IFFALSE 47988
// points := [ 35 , 20 , 45 ] ;
47969: LD_ADDR_VAR 0 9
47973: PUSH
47974: LD_INT 35
47976: PUSH
47977: LD_INT 20
47979: PUSH
47980: LD_INT 45
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: LIST
47987: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47988: LD_VAR 0 6
47992: PPUSH
47993: CALL_OW 264
47997: PUSH
47998: LD_INT 47
48000: PUSH
48001: EMPTY
48002: LIST
48003: IN
48004: IFFALSE 48025
// points := [ 67 , 45 , 75 ] ;
48006: LD_ADDR_VAR 0 9
48010: PUSH
48011: LD_INT 67
48013: PUSH
48014: LD_INT 45
48016: PUSH
48017: LD_INT 75
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: LIST
48024: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48025: LD_VAR 0 6
48029: PPUSH
48030: CALL_OW 264
48034: PUSH
48035: LD_INT 26
48037: PUSH
48038: EMPTY
48039: LIST
48040: IN
48041: IFFALSE 48062
// points := [ 120 , 30 , 80 ] ;
48043: LD_ADDR_VAR 0 9
48047: PUSH
48048: LD_INT 120
48050: PUSH
48051: LD_INT 30
48053: PUSH
48054: LD_INT 80
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48062: LD_VAR 0 6
48066: PPUSH
48067: CALL_OW 264
48071: PUSH
48072: LD_INT 22
48074: PUSH
48075: EMPTY
48076: LIST
48077: IN
48078: IFFALSE 48099
// points := [ 40 , 1 , 1 ] ;
48080: LD_ADDR_VAR 0 9
48084: PUSH
48085: LD_INT 40
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: LIST
48098: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48099: LD_VAR 0 6
48103: PPUSH
48104: CALL_OW 264
48108: PUSH
48109: LD_INT 29
48111: PUSH
48112: EMPTY
48113: LIST
48114: IN
48115: IFFALSE 48136
// points := [ 70 , 200 , 400 ] ;
48117: LD_ADDR_VAR 0 9
48121: PUSH
48122: LD_INT 70
48124: PUSH
48125: LD_INT 200
48127: PUSH
48128: LD_INT 400
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: LIST
48135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48136: LD_VAR 0 6
48140: PPUSH
48141: CALL_OW 264
48145: PUSH
48146: LD_INT 14
48148: PUSH
48149: LD_INT 53
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: IN
48156: IFFALSE 48177
// points := [ 40 , 10 , 20 ] ;
48158: LD_ADDR_VAR 0 9
48162: PUSH
48163: LD_INT 40
48165: PUSH
48166: LD_INT 10
48168: PUSH
48169: LD_INT 20
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: LIST
48176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48177: LD_VAR 0 6
48181: PPUSH
48182: CALL_OW 264
48186: PUSH
48187: LD_INT 9
48189: PUSH
48190: EMPTY
48191: LIST
48192: IN
48193: IFFALSE 48214
// points := [ 5 , 70 , 20 ] ;
48195: LD_ADDR_VAR 0 9
48199: PUSH
48200: LD_INT 5
48202: PUSH
48203: LD_INT 70
48205: PUSH
48206: LD_INT 20
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: LIST
48213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48214: LD_VAR 0 6
48218: PPUSH
48219: CALL_OW 264
48223: PUSH
48224: LD_INT 10
48226: PUSH
48227: EMPTY
48228: LIST
48229: IN
48230: IFFALSE 48251
// points := [ 35 , 110 , 70 ] ;
48232: LD_ADDR_VAR 0 9
48236: PUSH
48237: LD_INT 35
48239: PUSH
48240: LD_INT 110
48242: PUSH
48243: LD_INT 70
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48251: LD_VAR 0 6
48255: PPUSH
48256: CALL_OW 265
48260: PUSH
48261: LD_INT 25
48263: EQUAL
48264: IFFALSE 48285
// points := [ 80 , 65 , 100 ] ;
48266: LD_ADDR_VAR 0 9
48270: PUSH
48271: LD_INT 80
48273: PUSH
48274: LD_INT 65
48276: PUSH
48277: LD_INT 100
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: LIST
48284: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48285: LD_VAR 0 6
48289: PPUSH
48290: CALL_OW 263
48294: PUSH
48295: LD_INT 1
48297: EQUAL
48298: IFFALSE 48333
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48300: LD_ADDR_VAR 0 10
48304: PUSH
48305: LD_VAR 0 10
48309: PUSH
48310: LD_VAR 0 6
48314: PPUSH
48315: CALL_OW 311
48319: PPUSH
48320: LD_INT 3
48322: PPUSH
48323: CALL_OW 259
48327: PUSH
48328: LD_INT 4
48330: MUL
48331: MUL
48332: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48333: LD_VAR 0 6
48337: PPUSH
48338: CALL_OW 263
48342: PUSH
48343: LD_INT 2
48345: EQUAL
48346: IFFALSE 48397
// begin j := IsControledBy ( i ) ;
48348: LD_ADDR_VAR 0 7
48352: PUSH
48353: LD_VAR 0 6
48357: PPUSH
48358: CALL_OW 312
48362: ST_TO_ADDR
// if j then
48363: LD_VAR 0 7
48367: IFFALSE 48397
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48369: LD_ADDR_VAR 0 10
48373: PUSH
48374: LD_VAR 0 10
48378: PUSH
48379: LD_VAR 0 7
48383: PPUSH
48384: LD_INT 3
48386: PPUSH
48387: CALL_OW 259
48391: PUSH
48392: LD_INT 3
48394: MUL
48395: MUL
48396: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48397: LD_VAR 0 6
48401: PPUSH
48402: CALL_OW 264
48406: PUSH
48407: LD_INT 5
48409: PUSH
48410: LD_INT 6
48412: PUSH
48413: LD_INT 46
48415: PUSH
48416: LD_INT 44
48418: PUSH
48419: LD_INT 47
48421: PUSH
48422: LD_INT 45
48424: PUSH
48425: LD_INT 28
48427: PUSH
48428: LD_INT 7
48430: PUSH
48431: LD_INT 27
48433: PUSH
48434: LD_INT 29
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: IN
48449: PUSH
48450: LD_VAR 0 1
48454: PPUSH
48455: LD_INT 52
48457: PPUSH
48458: CALL_OW 321
48462: PUSH
48463: LD_INT 2
48465: EQUAL
48466: AND
48467: IFFALSE 48484
// bpoints := bpoints * 1.2 ;
48469: LD_ADDR_VAR 0 10
48473: PUSH
48474: LD_VAR 0 10
48478: PUSH
48479: LD_REAL  1.20000000000000E+0000
48482: MUL
48483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48484: LD_VAR 0 6
48488: PPUSH
48489: CALL_OW 264
48493: PUSH
48494: LD_INT 6
48496: PUSH
48497: LD_INT 46
48499: PUSH
48500: LD_INT 47
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: LIST
48507: IN
48508: IFFALSE 48525
// bpoints := bpoints * 1.2 ;
48510: LD_ADDR_VAR 0 10
48514: PUSH
48515: LD_VAR 0 10
48519: PUSH
48520: LD_REAL  1.20000000000000E+0000
48523: MUL
48524: ST_TO_ADDR
// end ; unit_building :
48525: GO 48539
48527: LD_INT 3
48529: DOUBLE
48530: EQUAL
48531: IFTRUE 48535
48533: GO 48538
48535: POP
// ; end ;
48536: GO 48539
48538: POP
// for j = 1 to 3 do
48539: LD_ADDR_VAR 0 7
48543: PUSH
48544: DOUBLE
48545: LD_INT 1
48547: DEC
48548: ST_TO_ADDR
48549: LD_INT 3
48551: PUSH
48552: FOR_TO
48553: IFFALSE 48606
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48555: LD_ADDR_VAR 0 5
48559: PUSH
48560: LD_VAR 0 5
48564: PPUSH
48565: LD_VAR 0 7
48569: PPUSH
48570: LD_VAR 0 5
48574: PUSH
48575: LD_VAR 0 7
48579: ARRAY
48580: PUSH
48581: LD_VAR 0 9
48585: PUSH
48586: LD_VAR 0 7
48590: ARRAY
48591: PUSH
48592: LD_VAR 0 10
48596: MUL
48597: PLUS
48598: PPUSH
48599: CALL_OW 1
48603: ST_TO_ADDR
48604: GO 48552
48606: POP
48607: POP
// end ;
48608: GO 47087
48610: POP
48611: POP
// result := Replace ( result , 4 , tmp ) ;
48612: LD_ADDR_VAR 0 5
48616: PUSH
48617: LD_VAR 0 5
48621: PPUSH
48622: LD_INT 4
48624: PPUSH
48625: LD_VAR 0 8
48629: PPUSH
48630: CALL_OW 1
48634: ST_TO_ADDR
// end ;
48635: LD_VAR 0 5
48639: RET
// export function DangerAtRange ( unit , range ) ; begin
48640: LD_INT 0
48642: PPUSH
// if not unit then
48643: LD_VAR 0 1
48647: NOT
48648: IFFALSE 48652
// exit ;
48650: GO 48697
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48652: LD_ADDR_VAR 0 3
48656: PUSH
48657: LD_VAR 0 1
48661: PPUSH
48662: CALL_OW 255
48666: PPUSH
48667: LD_VAR 0 1
48671: PPUSH
48672: CALL_OW 250
48676: PPUSH
48677: LD_VAR 0 1
48681: PPUSH
48682: CALL_OW 251
48686: PPUSH
48687: LD_VAR 0 2
48691: PPUSH
48692: CALL 46939 0 4
48696: ST_TO_ADDR
// end ;
48697: LD_VAR 0 3
48701: RET
// export function DangerInArea ( side , area ) ; begin
48702: LD_INT 0
48704: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48705: LD_ADDR_VAR 0 3
48709: PUSH
48710: LD_VAR 0 2
48714: PPUSH
48715: LD_INT 81
48717: PUSH
48718: LD_VAR 0 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PPUSH
48727: CALL_OW 70
48731: ST_TO_ADDR
// end ;
48732: LD_VAR 0 3
48736: RET
// export function IsExtension ( b ) ; begin
48737: LD_INT 0
48739: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48740: LD_ADDR_VAR 0 2
48744: PUSH
48745: LD_VAR 0 1
48749: PUSH
48750: LD_INT 23
48752: PUSH
48753: LD_INT 20
48755: PUSH
48756: LD_INT 22
48758: PUSH
48759: LD_INT 17
48761: PUSH
48762: LD_INT 24
48764: PUSH
48765: LD_INT 21
48767: PUSH
48768: LD_INT 19
48770: PUSH
48771: LD_INT 16
48773: PUSH
48774: LD_INT 25
48776: PUSH
48777: LD_INT 18
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: IN
48792: ST_TO_ADDR
// end ;
48793: LD_VAR 0 2
48797: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48798: LD_INT 0
48800: PPUSH
48801: PPUSH
48802: PPUSH
// result := [ ] ;
48803: LD_ADDR_VAR 0 4
48807: PUSH
48808: EMPTY
48809: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48810: LD_ADDR_VAR 0 5
48814: PUSH
48815: LD_VAR 0 2
48819: PPUSH
48820: LD_INT 21
48822: PUSH
48823: LD_INT 3
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PPUSH
48830: CALL_OW 70
48834: ST_TO_ADDR
// if not tmp then
48835: LD_VAR 0 5
48839: NOT
48840: IFFALSE 48844
// exit ;
48842: GO 48908
// if checkLink then
48844: LD_VAR 0 3
48848: IFFALSE 48898
// begin for i in tmp do
48850: LD_ADDR_VAR 0 6
48854: PUSH
48855: LD_VAR 0 5
48859: PUSH
48860: FOR_IN
48861: IFFALSE 48896
// if GetBase ( i ) <> base then
48863: LD_VAR 0 6
48867: PPUSH
48868: CALL_OW 274
48872: PUSH
48873: LD_VAR 0 1
48877: NONEQUAL
48878: IFFALSE 48894
// ComLinkToBase ( base , i ) ;
48880: LD_VAR 0 1
48884: PPUSH
48885: LD_VAR 0 6
48889: PPUSH
48890: CALL_OW 169
48894: GO 48860
48896: POP
48897: POP
// end ; result := tmp ;
48898: LD_ADDR_VAR 0 4
48902: PUSH
48903: LD_VAR 0 5
48907: ST_TO_ADDR
// end ;
48908: LD_VAR 0 4
48912: RET
// export function ComComplete ( units , b ) ; var i ; begin
48913: LD_INT 0
48915: PPUSH
48916: PPUSH
// if not units then
48917: LD_VAR 0 1
48921: NOT
48922: IFFALSE 48926
// exit ;
48924: GO 49016
// for i in units do
48926: LD_ADDR_VAR 0 4
48930: PUSH
48931: LD_VAR 0 1
48935: PUSH
48936: FOR_IN
48937: IFFALSE 49014
// if BuildingStatus ( b ) = bs_build then
48939: LD_VAR 0 2
48943: PPUSH
48944: CALL_OW 461
48948: PUSH
48949: LD_INT 1
48951: EQUAL
48952: IFFALSE 49012
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48954: LD_VAR 0 4
48958: PPUSH
48959: LD_STRING h
48961: PUSH
48962: LD_VAR 0 2
48966: PPUSH
48967: CALL_OW 250
48971: PUSH
48972: LD_VAR 0 2
48976: PPUSH
48977: CALL_OW 251
48981: PUSH
48982: LD_VAR 0 2
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: PUSH
49005: EMPTY
49006: LIST
49007: PPUSH
49008: CALL_OW 446
49012: GO 48936
49014: POP
49015: POP
// end ;
49016: LD_VAR 0 3
49020: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49021: LD_INT 0
49023: PPUSH
49024: PPUSH
49025: PPUSH
49026: PPUSH
49027: PPUSH
49028: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49029: LD_VAR 0 1
49033: NOT
49034: PUSH
49035: LD_VAR 0 1
49039: PPUSH
49040: CALL_OW 263
49044: PUSH
49045: LD_INT 2
49047: NONEQUAL
49048: OR
49049: IFFALSE 49053
// exit ;
49051: GO 49369
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49053: LD_ADDR_VAR 0 6
49057: PUSH
49058: LD_INT 22
49060: PUSH
49061: LD_VAR 0 1
49065: PPUSH
49066: CALL_OW 255
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: LD_INT 30
49080: PUSH
49081: LD_INT 36
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 34
49090: PUSH
49091: LD_INT 31
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PPUSH
49107: CALL_OW 69
49111: ST_TO_ADDR
// if not tmp then
49112: LD_VAR 0 6
49116: NOT
49117: IFFALSE 49121
// exit ;
49119: GO 49369
// result := [ ] ;
49121: LD_ADDR_VAR 0 2
49125: PUSH
49126: EMPTY
49127: ST_TO_ADDR
// for i in tmp do
49128: LD_ADDR_VAR 0 3
49132: PUSH
49133: LD_VAR 0 6
49137: PUSH
49138: FOR_IN
49139: IFFALSE 49210
// begin t := UnitsInside ( i ) ;
49141: LD_ADDR_VAR 0 4
49145: PUSH
49146: LD_VAR 0 3
49150: PPUSH
49151: CALL_OW 313
49155: ST_TO_ADDR
// if t then
49156: LD_VAR 0 4
49160: IFFALSE 49208
// for j in t do
49162: LD_ADDR_VAR 0 7
49166: PUSH
49167: LD_VAR 0 4
49171: PUSH
49172: FOR_IN
49173: IFFALSE 49206
// result := Replace ( result , result + 1 , j ) ;
49175: LD_ADDR_VAR 0 2
49179: PUSH
49180: LD_VAR 0 2
49184: PPUSH
49185: LD_VAR 0 2
49189: PUSH
49190: LD_INT 1
49192: PLUS
49193: PPUSH
49194: LD_VAR 0 7
49198: PPUSH
49199: CALL_OW 1
49203: ST_TO_ADDR
49204: GO 49172
49206: POP
49207: POP
// end ;
49208: GO 49138
49210: POP
49211: POP
// if not result then
49212: LD_VAR 0 2
49216: NOT
49217: IFFALSE 49221
// exit ;
49219: GO 49369
// mech := result [ 1 ] ;
49221: LD_ADDR_VAR 0 5
49225: PUSH
49226: LD_VAR 0 2
49230: PUSH
49231: LD_INT 1
49233: ARRAY
49234: ST_TO_ADDR
// if result > 1 then
49235: LD_VAR 0 2
49239: PUSH
49240: LD_INT 1
49242: GREATER
49243: IFFALSE 49355
// begin for i = 2 to result do
49245: LD_ADDR_VAR 0 3
49249: PUSH
49250: DOUBLE
49251: LD_INT 2
49253: DEC
49254: ST_TO_ADDR
49255: LD_VAR 0 2
49259: PUSH
49260: FOR_TO
49261: IFFALSE 49353
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49263: LD_ADDR_VAR 0 4
49267: PUSH
49268: LD_VAR 0 2
49272: PUSH
49273: LD_VAR 0 3
49277: ARRAY
49278: PPUSH
49279: LD_INT 3
49281: PPUSH
49282: CALL_OW 259
49286: PUSH
49287: LD_VAR 0 2
49291: PUSH
49292: LD_VAR 0 3
49296: ARRAY
49297: PPUSH
49298: CALL_OW 432
49302: MINUS
49303: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49304: LD_VAR 0 4
49308: PUSH
49309: LD_VAR 0 5
49313: PPUSH
49314: LD_INT 3
49316: PPUSH
49317: CALL_OW 259
49321: PUSH
49322: LD_VAR 0 5
49326: PPUSH
49327: CALL_OW 432
49331: MINUS
49332: GREATEREQUAL
49333: IFFALSE 49351
// mech := result [ i ] ;
49335: LD_ADDR_VAR 0 5
49339: PUSH
49340: LD_VAR 0 2
49344: PUSH
49345: LD_VAR 0 3
49349: ARRAY
49350: ST_TO_ADDR
// end ;
49351: GO 49260
49353: POP
49354: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49355: LD_VAR 0 1
49359: PPUSH
49360: LD_VAR 0 5
49364: PPUSH
49365: CALL_OW 135
// end ;
49369: LD_VAR 0 2
49373: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49374: LD_INT 0
49376: PPUSH
49377: PPUSH
49378: PPUSH
49379: PPUSH
49380: PPUSH
49381: PPUSH
49382: PPUSH
49383: PPUSH
49384: PPUSH
49385: PPUSH
49386: PPUSH
49387: PPUSH
49388: PPUSH
// result := [ ] ;
49389: LD_ADDR_VAR 0 7
49393: PUSH
49394: EMPTY
49395: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49396: LD_VAR 0 1
49400: PPUSH
49401: CALL_OW 266
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: IN
49416: NOT
49417: IFFALSE 49421
// exit ;
49419: GO 51055
// if name then
49421: LD_VAR 0 3
49425: IFFALSE 49441
// SetBName ( base_dep , name ) ;
49427: LD_VAR 0 1
49431: PPUSH
49432: LD_VAR 0 3
49436: PPUSH
49437: CALL_OW 500
// base := GetBase ( base_dep ) ;
49441: LD_ADDR_VAR 0 15
49445: PUSH
49446: LD_VAR 0 1
49450: PPUSH
49451: CALL_OW 274
49455: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49456: LD_ADDR_VAR 0 16
49460: PUSH
49461: LD_VAR 0 1
49465: PPUSH
49466: CALL_OW 255
49470: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49471: LD_ADDR_VAR 0 17
49475: PUSH
49476: LD_VAR 0 1
49480: PPUSH
49481: CALL_OW 248
49485: ST_TO_ADDR
// if sources then
49486: LD_VAR 0 5
49490: IFFALSE 49537
// for i = 1 to 3 do
49492: LD_ADDR_VAR 0 8
49496: PUSH
49497: DOUBLE
49498: LD_INT 1
49500: DEC
49501: ST_TO_ADDR
49502: LD_INT 3
49504: PUSH
49505: FOR_TO
49506: IFFALSE 49535
// AddResourceType ( base , i , sources [ i ] ) ;
49508: LD_VAR 0 15
49512: PPUSH
49513: LD_VAR 0 8
49517: PPUSH
49518: LD_VAR 0 5
49522: PUSH
49523: LD_VAR 0 8
49527: ARRAY
49528: PPUSH
49529: CALL_OW 276
49533: GO 49505
49535: POP
49536: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49537: LD_ADDR_VAR 0 18
49541: PUSH
49542: LD_VAR 0 15
49546: PPUSH
49547: LD_VAR 0 2
49551: PPUSH
49552: LD_INT 1
49554: PPUSH
49555: CALL 48798 0 3
49559: ST_TO_ADDR
// InitHc ;
49560: CALL_OW 19
// InitUc ;
49564: CALL_OW 18
// uc_side := side ;
49568: LD_ADDR_OWVAR 20
49572: PUSH
49573: LD_VAR 0 16
49577: ST_TO_ADDR
// uc_nation := nation ;
49578: LD_ADDR_OWVAR 21
49582: PUSH
49583: LD_VAR 0 17
49587: ST_TO_ADDR
// if buildings then
49588: LD_VAR 0 18
49592: IFFALSE 50914
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49594: LD_ADDR_VAR 0 19
49598: PUSH
49599: LD_VAR 0 18
49603: PPUSH
49604: LD_INT 2
49606: PUSH
49607: LD_INT 30
49609: PUSH
49610: LD_INT 29
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 30
49619: PUSH
49620: LD_INT 30
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: LIST
49631: PPUSH
49632: CALL_OW 72
49636: ST_TO_ADDR
// if tmp then
49637: LD_VAR 0 19
49641: IFFALSE 49689
// for i in tmp do
49643: LD_ADDR_VAR 0 8
49647: PUSH
49648: LD_VAR 0 19
49652: PUSH
49653: FOR_IN
49654: IFFALSE 49687
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49656: LD_VAR 0 8
49660: PPUSH
49661: CALL_OW 250
49665: PPUSH
49666: LD_VAR 0 8
49670: PPUSH
49671: CALL_OW 251
49675: PPUSH
49676: LD_VAR 0 16
49680: PPUSH
49681: CALL_OW 441
49685: GO 49653
49687: POP
49688: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49689: LD_VAR 0 18
49693: PPUSH
49694: LD_INT 2
49696: PUSH
49697: LD_INT 30
49699: PUSH
49700: LD_INT 32
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 30
49709: PUSH
49710: LD_INT 33
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: PPUSH
49722: CALL_OW 72
49726: IFFALSE 49814
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49728: LD_ADDR_VAR 0 8
49732: PUSH
49733: LD_VAR 0 18
49737: PPUSH
49738: LD_INT 2
49740: PUSH
49741: LD_INT 30
49743: PUSH
49744: LD_INT 32
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 30
49753: PUSH
49754: LD_INT 33
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: PPUSH
49766: CALL_OW 72
49770: PUSH
49771: FOR_IN
49772: IFFALSE 49812
// begin if not GetBWeapon ( i ) then
49774: LD_VAR 0 8
49778: PPUSH
49779: CALL_OW 269
49783: NOT
49784: IFFALSE 49810
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49786: LD_VAR 0 8
49790: PPUSH
49791: LD_VAR 0 8
49795: PPUSH
49796: LD_VAR 0 2
49800: PPUSH
49801: CALL 51060 0 2
49805: PPUSH
49806: CALL_OW 431
// end ;
49810: GO 49771
49812: POP
49813: POP
// end ; for i = 1 to personel do
49814: LD_ADDR_VAR 0 8
49818: PUSH
49819: DOUBLE
49820: LD_INT 1
49822: DEC
49823: ST_TO_ADDR
49824: LD_VAR 0 6
49828: PUSH
49829: FOR_TO
49830: IFFALSE 50894
// begin if i > 4 then
49832: LD_VAR 0 8
49836: PUSH
49837: LD_INT 4
49839: GREATER
49840: IFFALSE 49844
// break ;
49842: GO 50894
// case i of 1 :
49844: LD_VAR 0 8
49848: PUSH
49849: LD_INT 1
49851: DOUBLE
49852: EQUAL
49853: IFTRUE 49857
49855: GO 49937
49857: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49858: LD_ADDR_VAR 0 12
49862: PUSH
49863: LD_VAR 0 18
49867: PPUSH
49868: LD_INT 22
49870: PUSH
49871: LD_VAR 0 16
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 58
49882: PUSH
49883: EMPTY
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 30
49891: PUSH
49892: LD_INT 32
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 30
49901: PUSH
49902: LD_INT 4
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 30
49911: PUSH
49912: LD_INT 5
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: LIST
49929: PPUSH
49930: CALL_OW 72
49934: ST_TO_ADDR
49935: GO 50159
49937: LD_INT 2
49939: DOUBLE
49940: EQUAL
49941: IFTRUE 49945
49943: GO 50007
49945: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49946: LD_ADDR_VAR 0 12
49950: PUSH
49951: LD_VAR 0 18
49955: PPUSH
49956: LD_INT 22
49958: PUSH
49959: LD_VAR 0 16
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: LD_INT 30
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 30
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: LIST
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PPUSH
50000: CALL_OW 72
50004: ST_TO_ADDR
50005: GO 50159
50007: LD_INT 3
50009: DOUBLE
50010: EQUAL
50011: IFTRUE 50015
50013: GO 50077
50015: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50016: LD_ADDR_VAR 0 12
50020: PUSH
50021: LD_VAR 0 18
50025: PPUSH
50026: LD_INT 22
50028: PUSH
50029: LD_VAR 0 16
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: LD_INT 30
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 30
50053: PUSH
50054: LD_INT 3
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PPUSH
50070: CALL_OW 72
50074: ST_TO_ADDR
50075: GO 50159
50077: LD_INT 4
50079: DOUBLE
50080: EQUAL
50081: IFTRUE 50085
50083: GO 50158
50085: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50086: LD_ADDR_VAR 0 12
50090: PUSH
50091: LD_VAR 0 18
50095: PPUSH
50096: LD_INT 22
50098: PUSH
50099: LD_VAR 0 16
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 30
50113: PUSH
50114: LD_INT 6
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 30
50123: PUSH
50124: LD_INT 7
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 30
50133: PUSH
50134: LD_INT 8
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PPUSH
50151: CALL_OW 72
50155: ST_TO_ADDR
50156: GO 50159
50158: POP
// if i = 1 then
50159: LD_VAR 0 8
50163: PUSH
50164: LD_INT 1
50166: EQUAL
50167: IFFALSE 50278
// begin tmp := [ ] ;
50169: LD_ADDR_VAR 0 19
50173: PUSH
50174: EMPTY
50175: ST_TO_ADDR
// for j in f do
50176: LD_ADDR_VAR 0 9
50180: PUSH
50181: LD_VAR 0 12
50185: PUSH
50186: FOR_IN
50187: IFFALSE 50260
// if GetBType ( j ) = b_bunker then
50189: LD_VAR 0 9
50193: PPUSH
50194: CALL_OW 266
50198: PUSH
50199: LD_INT 32
50201: EQUAL
50202: IFFALSE 50229
// tmp := Insert ( tmp , 1 , j ) else
50204: LD_ADDR_VAR 0 19
50208: PUSH
50209: LD_VAR 0 19
50213: PPUSH
50214: LD_INT 1
50216: PPUSH
50217: LD_VAR 0 9
50221: PPUSH
50222: CALL_OW 2
50226: ST_TO_ADDR
50227: GO 50258
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50229: LD_ADDR_VAR 0 19
50233: PUSH
50234: LD_VAR 0 19
50238: PPUSH
50239: LD_VAR 0 19
50243: PUSH
50244: LD_INT 1
50246: PLUS
50247: PPUSH
50248: LD_VAR 0 9
50252: PPUSH
50253: CALL_OW 2
50257: ST_TO_ADDR
50258: GO 50186
50260: POP
50261: POP
// if tmp then
50262: LD_VAR 0 19
50266: IFFALSE 50278
// f := tmp ;
50268: LD_ADDR_VAR 0 12
50272: PUSH
50273: LD_VAR 0 19
50277: ST_TO_ADDR
// end ; x := personel [ i ] ;
50278: LD_ADDR_VAR 0 13
50282: PUSH
50283: LD_VAR 0 6
50287: PUSH
50288: LD_VAR 0 8
50292: ARRAY
50293: ST_TO_ADDR
// if x = - 1 then
50294: LD_VAR 0 13
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: EQUAL
50303: IFFALSE 50512
// begin for j in f do
50305: LD_ADDR_VAR 0 9
50309: PUSH
50310: LD_VAR 0 12
50314: PUSH
50315: FOR_IN
50316: IFFALSE 50508
// repeat InitHc ;
50318: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50322: LD_VAR 0 9
50326: PPUSH
50327: CALL_OW 266
50331: PUSH
50332: LD_INT 5
50334: EQUAL
50335: IFFALSE 50405
// begin if UnitsInside ( j ) < 3 then
50337: LD_VAR 0 9
50341: PPUSH
50342: CALL_OW 313
50346: PUSH
50347: LD_INT 3
50349: LESS
50350: IFFALSE 50386
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50352: LD_INT 0
50354: PPUSH
50355: LD_INT 5
50357: PUSH
50358: LD_INT 8
50360: PUSH
50361: LD_INT 9
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: LIST
50368: PUSH
50369: LD_VAR 0 17
50373: ARRAY
50374: PPUSH
50375: LD_VAR 0 4
50379: PPUSH
50380: CALL_OW 380
50384: GO 50403
// PrepareHuman ( false , i , skill ) ;
50386: LD_INT 0
50388: PPUSH
50389: LD_VAR 0 8
50393: PPUSH
50394: LD_VAR 0 4
50398: PPUSH
50399: CALL_OW 380
// end else
50403: GO 50422
// PrepareHuman ( false , i , skill ) ;
50405: LD_INT 0
50407: PPUSH
50408: LD_VAR 0 8
50412: PPUSH
50413: LD_VAR 0 4
50417: PPUSH
50418: CALL_OW 380
// un := CreateHuman ;
50422: LD_ADDR_VAR 0 14
50426: PUSH
50427: CALL_OW 44
50431: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50432: LD_ADDR_VAR 0 7
50436: PUSH
50437: LD_VAR 0 7
50441: PPUSH
50442: LD_INT 1
50444: PPUSH
50445: LD_VAR 0 14
50449: PPUSH
50450: CALL_OW 2
50454: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50455: LD_VAR 0 14
50459: PPUSH
50460: LD_VAR 0 9
50464: PPUSH
50465: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50469: LD_VAR 0 9
50473: PPUSH
50474: CALL_OW 313
50478: PUSH
50479: LD_INT 6
50481: EQUAL
50482: PUSH
50483: LD_VAR 0 9
50487: PPUSH
50488: CALL_OW 266
50492: PUSH
50493: LD_INT 32
50495: PUSH
50496: LD_INT 31
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: IN
50503: OR
50504: IFFALSE 50318
50506: GO 50315
50508: POP
50509: POP
// end else
50510: GO 50892
// for j = 1 to x do
50512: LD_ADDR_VAR 0 9
50516: PUSH
50517: DOUBLE
50518: LD_INT 1
50520: DEC
50521: ST_TO_ADDR
50522: LD_VAR 0 13
50526: PUSH
50527: FOR_TO
50528: IFFALSE 50890
// begin InitHc ;
50530: CALL_OW 19
// if not f then
50534: LD_VAR 0 12
50538: NOT
50539: IFFALSE 50628
// begin PrepareHuman ( false , i , skill ) ;
50541: LD_INT 0
50543: PPUSH
50544: LD_VAR 0 8
50548: PPUSH
50549: LD_VAR 0 4
50553: PPUSH
50554: CALL_OW 380
// un := CreateHuman ;
50558: LD_ADDR_VAR 0 14
50562: PUSH
50563: CALL_OW 44
50567: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50568: LD_ADDR_VAR 0 7
50572: PUSH
50573: LD_VAR 0 7
50577: PPUSH
50578: LD_INT 1
50580: PPUSH
50581: LD_VAR 0 14
50585: PPUSH
50586: CALL_OW 2
50590: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50591: LD_VAR 0 14
50595: PPUSH
50596: LD_VAR 0 1
50600: PPUSH
50601: CALL_OW 250
50605: PPUSH
50606: LD_VAR 0 1
50610: PPUSH
50611: CALL_OW 251
50615: PPUSH
50616: LD_INT 10
50618: PPUSH
50619: LD_INT 0
50621: PPUSH
50622: CALL_OW 50
// continue ;
50626: GO 50527
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50628: LD_VAR 0 12
50632: PUSH
50633: LD_INT 1
50635: ARRAY
50636: PPUSH
50637: CALL_OW 313
50641: PUSH
50642: LD_VAR 0 12
50646: PUSH
50647: LD_INT 1
50649: ARRAY
50650: PPUSH
50651: CALL_OW 266
50655: PUSH
50656: LD_INT 32
50658: PUSH
50659: LD_INT 31
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: IN
50666: AND
50667: PUSH
50668: LD_VAR 0 12
50672: PUSH
50673: LD_INT 1
50675: ARRAY
50676: PPUSH
50677: CALL_OW 313
50681: PUSH
50682: LD_INT 6
50684: EQUAL
50685: OR
50686: IFFALSE 50706
// f := Delete ( f , 1 ) ;
50688: LD_ADDR_VAR 0 12
50692: PUSH
50693: LD_VAR 0 12
50697: PPUSH
50698: LD_INT 1
50700: PPUSH
50701: CALL_OW 3
50705: ST_TO_ADDR
// if not f then
50706: LD_VAR 0 12
50710: NOT
50711: IFFALSE 50729
// begin x := x + 2 ;
50713: LD_ADDR_VAR 0 13
50717: PUSH
50718: LD_VAR 0 13
50722: PUSH
50723: LD_INT 2
50725: PLUS
50726: ST_TO_ADDR
// continue ;
50727: GO 50527
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50729: LD_VAR 0 12
50733: PUSH
50734: LD_INT 1
50736: ARRAY
50737: PPUSH
50738: CALL_OW 266
50742: PUSH
50743: LD_INT 5
50745: EQUAL
50746: IFFALSE 50820
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50748: LD_VAR 0 12
50752: PUSH
50753: LD_INT 1
50755: ARRAY
50756: PPUSH
50757: CALL_OW 313
50761: PUSH
50762: LD_INT 3
50764: LESS
50765: IFFALSE 50801
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50767: LD_INT 0
50769: PPUSH
50770: LD_INT 5
50772: PUSH
50773: LD_INT 8
50775: PUSH
50776: LD_INT 9
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: LIST
50783: PUSH
50784: LD_VAR 0 17
50788: ARRAY
50789: PPUSH
50790: LD_VAR 0 4
50794: PPUSH
50795: CALL_OW 380
50799: GO 50818
// PrepareHuman ( false , i , skill ) ;
50801: LD_INT 0
50803: PPUSH
50804: LD_VAR 0 8
50808: PPUSH
50809: LD_VAR 0 4
50813: PPUSH
50814: CALL_OW 380
// end else
50818: GO 50837
// PrepareHuman ( false , i , skill ) ;
50820: LD_INT 0
50822: PPUSH
50823: LD_VAR 0 8
50827: PPUSH
50828: LD_VAR 0 4
50832: PPUSH
50833: CALL_OW 380
// un := CreateHuman ;
50837: LD_ADDR_VAR 0 14
50841: PUSH
50842: CALL_OW 44
50846: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50847: LD_ADDR_VAR 0 7
50851: PUSH
50852: LD_VAR 0 7
50856: PPUSH
50857: LD_INT 1
50859: PPUSH
50860: LD_VAR 0 14
50864: PPUSH
50865: CALL_OW 2
50869: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50870: LD_VAR 0 14
50874: PPUSH
50875: LD_VAR 0 12
50879: PUSH
50880: LD_INT 1
50882: ARRAY
50883: PPUSH
50884: CALL_OW 52
// end ;
50888: GO 50527
50890: POP
50891: POP
// end ;
50892: GO 49829
50894: POP
50895: POP
// result := result ^ buildings ;
50896: LD_ADDR_VAR 0 7
50900: PUSH
50901: LD_VAR 0 7
50905: PUSH
50906: LD_VAR 0 18
50910: ADD
50911: ST_TO_ADDR
// end else
50912: GO 51055
// begin for i = 1 to personel do
50914: LD_ADDR_VAR 0 8
50918: PUSH
50919: DOUBLE
50920: LD_INT 1
50922: DEC
50923: ST_TO_ADDR
50924: LD_VAR 0 6
50928: PUSH
50929: FOR_TO
50930: IFFALSE 51053
// begin if i > 4 then
50932: LD_VAR 0 8
50936: PUSH
50937: LD_INT 4
50939: GREATER
50940: IFFALSE 50944
// break ;
50942: GO 51053
// x := personel [ i ] ;
50944: LD_ADDR_VAR 0 13
50948: PUSH
50949: LD_VAR 0 6
50953: PUSH
50954: LD_VAR 0 8
50958: ARRAY
50959: ST_TO_ADDR
// if x = - 1 then
50960: LD_VAR 0 13
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: EQUAL
50969: IFFALSE 50973
// continue ;
50971: GO 50929
// PrepareHuman ( false , i , skill ) ;
50973: LD_INT 0
50975: PPUSH
50976: LD_VAR 0 8
50980: PPUSH
50981: LD_VAR 0 4
50985: PPUSH
50986: CALL_OW 380
// un := CreateHuman ;
50990: LD_ADDR_VAR 0 14
50994: PUSH
50995: CALL_OW 44
50999: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51000: LD_VAR 0 14
51004: PPUSH
51005: LD_VAR 0 1
51009: PPUSH
51010: CALL_OW 250
51014: PPUSH
51015: LD_VAR 0 1
51019: PPUSH
51020: CALL_OW 251
51024: PPUSH
51025: LD_INT 10
51027: PPUSH
51028: LD_INT 0
51030: PPUSH
51031: CALL_OW 50
// result := result ^ un ;
51035: LD_ADDR_VAR 0 7
51039: PUSH
51040: LD_VAR 0 7
51044: PUSH
51045: LD_VAR 0 14
51049: ADD
51050: ST_TO_ADDR
// end ;
51051: GO 50929
51053: POP
51054: POP
// end ; end ;
51055: LD_VAR 0 7
51059: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51060: LD_INT 0
51062: PPUSH
51063: PPUSH
51064: PPUSH
51065: PPUSH
51066: PPUSH
51067: PPUSH
51068: PPUSH
51069: PPUSH
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
51075: PPUSH
51076: PPUSH
51077: PPUSH
// result := false ;
51078: LD_ADDR_VAR 0 3
51082: PUSH
51083: LD_INT 0
51085: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51086: LD_VAR 0 1
51090: NOT
51091: PUSH
51092: LD_VAR 0 1
51096: PPUSH
51097: CALL_OW 266
51101: PUSH
51102: LD_INT 32
51104: PUSH
51105: LD_INT 33
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: IN
51112: NOT
51113: OR
51114: IFFALSE 51118
// exit ;
51116: GO 52227
// nat := GetNation ( tower ) ;
51118: LD_ADDR_VAR 0 12
51122: PUSH
51123: LD_VAR 0 1
51127: PPUSH
51128: CALL_OW 248
51132: ST_TO_ADDR
// side := GetSide ( tower ) ;
51133: LD_ADDR_VAR 0 16
51137: PUSH
51138: LD_VAR 0 1
51142: PPUSH
51143: CALL_OW 255
51147: ST_TO_ADDR
// x := GetX ( tower ) ;
51148: LD_ADDR_VAR 0 10
51152: PUSH
51153: LD_VAR 0 1
51157: PPUSH
51158: CALL_OW 250
51162: ST_TO_ADDR
// y := GetY ( tower ) ;
51163: LD_ADDR_VAR 0 11
51167: PUSH
51168: LD_VAR 0 1
51172: PPUSH
51173: CALL_OW 251
51177: ST_TO_ADDR
// if not x or not y then
51178: LD_VAR 0 10
51182: NOT
51183: PUSH
51184: LD_VAR 0 11
51188: NOT
51189: OR
51190: IFFALSE 51194
// exit ;
51192: GO 52227
// weapon := 0 ;
51194: LD_ADDR_VAR 0 18
51198: PUSH
51199: LD_INT 0
51201: ST_TO_ADDR
// fac_list := [ ] ;
51202: LD_ADDR_VAR 0 17
51206: PUSH
51207: EMPTY
51208: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51209: LD_ADDR_VAR 0 6
51213: PUSH
51214: LD_VAR 0 1
51218: PPUSH
51219: CALL_OW 274
51223: PPUSH
51224: LD_VAR 0 2
51228: PPUSH
51229: LD_INT 0
51231: PPUSH
51232: CALL 48798 0 3
51236: PPUSH
51237: LD_INT 30
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PPUSH
51247: CALL_OW 72
51251: ST_TO_ADDR
// if not factories then
51252: LD_VAR 0 6
51256: NOT
51257: IFFALSE 51261
// exit ;
51259: GO 52227
// for i in factories do
51261: LD_ADDR_VAR 0 8
51265: PUSH
51266: LD_VAR 0 6
51270: PUSH
51271: FOR_IN
51272: IFFALSE 51297
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51274: LD_ADDR_VAR 0 17
51278: PUSH
51279: LD_VAR 0 17
51283: PUSH
51284: LD_VAR 0 8
51288: PPUSH
51289: CALL_OW 478
51293: UNION
51294: ST_TO_ADDR
51295: GO 51271
51297: POP
51298: POP
// if not fac_list then
51299: LD_VAR 0 17
51303: NOT
51304: IFFALSE 51308
// exit ;
51306: GO 52227
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51308: LD_ADDR_VAR 0 5
51312: PUSH
51313: LD_INT 4
51315: PUSH
51316: LD_INT 5
51318: PUSH
51319: LD_INT 9
51321: PUSH
51322: LD_INT 10
51324: PUSH
51325: LD_INT 6
51327: PUSH
51328: LD_INT 7
51330: PUSH
51331: LD_INT 11
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 27
51345: PUSH
51346: LD_INT 28
51348: PUSH
51349: LD_INT 26
51351: PUSH
51352: LD_INT 30
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 43
51363: PUSH
51364: LD_INT 44
51366: PUSH
51367: LD_INT 46
51369: PUSH
51370: LD_INT 45
51372: PUSH
51373: LD_INT 47
51375: PUSH
51376: LD_INT 49
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: LIST
51391: PUSH
51392: LD_VAR 0 12
51396: ARRAY
51397: ST_TO_ADDR
// list := list isect fac_list ;
51398: LD_ADDR_VAR 0 5
51402: PUSH
51403: LD_VAR 0 5
51407: PUSH
51408: LD_VAR 0 17
51412: ISECT
51413: ST_TO_ADDR
// if not list then
51414: LD_VAR 0 5
51418: NOT
51419: IFFALSE 51423
// exit ;
51421: GO 52227
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51423: LD_VAR 0 12
51427: PUSH
51428: LD_INT 3
51430: EQUAL
51431: PUSH
51432: LD_INT 49
51434: PUSH
51435: LD_VAR 0 5
51439: IN
51440: AND
51441: PUSH
51442: LD_INT 31
51444: PPUSH
51445: LD_VAR 0 16
51449: PPUSH
51450: CALL_OW 321
51454: PUSH
51455: LD_INT 2
51457: EQUAL
51458: AND
51459: IFFALSE 51519
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51461: LD_INT 22
51463: PUSH
51464: LD_VAR 0 16
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 35
51475: PUSH
51476: LD_INT 49
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 91
51485: PUSH
51486: LD_VAR 0 1
51490: PUSH
51491: LD_INT 10
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: PPUSH
51504: CALL_OW 69
51508: NOT
51509: IFFALSE 51519
// weapon := ru_time_lapser ;
51511: LD_ADDR_VAR 0 18
51515: PUSH
51516: LD_INT 49
51518: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51519: LD_VAR 0 12
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: IN
51534: PUSH
51535: LD_INT 11
51537: PUSH
51538: LD_VAR 0 5
51542: IN
51543: PUSH
51544: LD_INT 30
51546: PUSH
51547: LD_VAR 0 5
51551: IN
51552: OR
51553: AND
51554: PUSH
51555: LD_INT 6
51557: PPUSH
51558: LD_VAR 0 16
51562: PPUSH
51563: CALL_OW 321
51567: PUSH
51568: LD_INT 2
51570: EQUAL
51571: AND
51572: IFFALSE 51737
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51574: LD_INT 22
51576: PUSH
51577: LD_VAR 0 16
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: LD_INT 35
51591: PUSH
51592: LD_INT 11
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 35
51601: PUSH
51602: LD_INT 30
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 91
51616: PUSH
51617: LD_VAR 0 1
51621: PUSH
51622: LD_INT 18
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: LIST
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: LIST
51634: PPUSH
51635: CALL_OW 69
51639: NOT
51640: PUSH
51641: LD_INT 22
51643: PUSH
51644: LD_VAR 0 16
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: LD_INT 30
51658: PUSH
51659: LD_INT 32
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 30
51668: PUSH
51669: LD_INT 33
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 91
51683: PUSH
51684: LD_VAR 0 1
51688: PUSH
51689: LD_INT 12
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: PUSH
51702: EMPTY
51703: LIST
51704: PPUSH
51705: CALL_OW 69
51709: PUSH
51710: LD_INT 2
51712: GREATER
51713: AND
51714: IFFALSE 51737
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51716: LD_ADDR_VAR 0 18
51720: PUSH
51721: LD_INT 11
51723: PUSH
51724: LD_INT 30
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_VAR 0 12
51735: ARRAY
51736: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51737: LD_VAR 0 18
51741: NOT
51742: PUSH
51743: LD_INT 40
51745: PPUSH
51746: LD_VAR 0 16
51750: PPUSH
51751: CALL_OW 321
51755: PUSH
51756: LD_INT 2
51758: EQUAL
51759: AND
51760: PUSH
51761: LD_INT 7
51763: PUSH
51764: LD_VAR 0 5
51768: IN
51769: PUSH
51770: LD_INT 28
51772: PUSH
51773: LD_VAR 0 5
51777: IN
51778: OR
51779: PUSH
51780: LD_INT 45
51782: PUSH
51783: LD_VAR 0 5
51787: IN
51788: OR
51789: AND
51790: IFFALSE 52044
// begin hex := GetHexInfo ( x , y ) ;
51792: LD_ADDR_VAR 0 4
51796: PUSH
51797: LD_VAR 0 10
51801: PPUSH
51802: LD_VAR 0 11
51806: PPUSH
51807: CALL_OW 546
51811: ST_TO_ADDR
// if hex [ 1 ] then
51812: LD_VAR 0 4
51816: PUSH
51817: LD_INT 1
51819: ARRAY
51820: IFFALSE 51824
// exit ;
51822: GO 52227
// height := hex [ 2 ] ;
51824: LD_ADDR_VAR 0 15
51828: PUSH
51829: LD_VAR 0 4
51833: PUSH
51834: LD_INT 2
51836: ARRAY
51837: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51838: LD_ADDR_VAR 0 14
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: LD_INT 3
51851: PUSH
51852: LD_INT 5
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: ST_TO_ADDR
// for i in tmp do
51861: LD_ADDR_VAR 0 8
51865: PUSH
51866: LD_VAR 0 14
51870: PUSH
51871: FOR_IN
51872: IFFALSE 52042
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51874: LD_ADDR_VAR 0 9
51878: PUSH
51879: LD_VAR 0 10
51883: PPUSH
51884: LD_VAR 0 8
51888: PPUSH
51889: LD_INT 5
51891: PPUSH
51892: CALL_OW 272
51896: PUSH
51897: LD_VAR 0 11
51901: PPUSH
51902: LD_VAR 0 8
51906: PPUSH
51907: LD_INT 5
51909: PPUSH
51910: CALL_OW 273
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51919: LD_VAR 0 9
51923: PUSH
51924: LD_INT 1
51926: ARRAY
51927: PPUSH
51928: LD_VAR 0 9
51932: PUSH
51933: LD_INT 2
51935: ARRAY
51936: PPUSH
51937: CALL_OW 488
51941: IFFALSE 52040
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51943: LD_ADDR_VAR 0 4
51947: PUSH
51948: LD_VAR 0 9
51952: PUSH
51953: LD_INT 1
51955: ARRAY
51956: PPUSH
51957: LD_VAR 0 9
51961: PUSH
51962: LD_INT 2
51964: ARRAY
51965: PPUSH
51966: CALL_OW 546
51970: ST_TO_ADDR
// if hex [ 1 ] then
51971: LD_VAR 0 4
51975: PUSH
51976: LD_INT 1
51978: ARRAY
51979: IFFALSE 51983
// continue ;
51981: GO 51871
// h := hex [ 2 ] ;
51983: LD_ADDR_VAR 0 13
51987: PUSH
51988: LD_VAR 0 4
51992: PUSH
51993: LD_INT 2
51995: ARRAY
51996: ST_TO_ADDR
// if h + 7 < height then
51997: LD_VAR 0 13
52001: PUSH
52002: LD_INT 7
52004: PLUS
52005: PUSH
52006: LD_VAR 0 15
52010: LESS
52011: IFFALSE 52040
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52013: LD_ADDR_VAR 0 18
52017: PUSH
52018: LD_INT 7
52020: PUSH
52021: LD_INT 28
52023: PUSH
52024: LD_INT 45
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: LIST
52031: PUSH
52032: LD_VAR 0 12
52036: ARRAY
52037: ST_TO_ADDR
// break ;
52038: GO 52042
// end ; end ; end ;
52040: GO 51871
52042: POP
52043: POP
// end ; if not weapon then
52044: LD_VAR 0 18
52048: NOT
52049: IFFALSE 52109
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52051: LD_ADDR_VAR 0 5
52055: PUSH
52056: LD_VAR 0 5
52060: PUSH
52061: LD_INT 11
52063: PUSH
52064: LD_INT 30
52066: PUSH
52067: LD_INT 49
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: DIFF
52075: ST_TO_ADDR
// if not list then
52076: LD_VAR 0 5
52080: NOT
52081: IFFALSE 52085
// exit ;
52083: GO 52227
// weapon := list [ rand ( 1 , list ) ] ;
52085: LD_ADDR_VAR 0 18
52089: PUSH
52090: LD_VAR 0 5
52094: PUSH
52095: LD_INT 1
52097: PPUSH
52098: LD_VAR 0 5
52102: PPUSH
52103: CALL_OW 12
52107: ARRAY
52108: ST_TO_ADDR
// end ; if weapon then
52109: LD_VAR 0 18
52113: IFFALSE 52227
// begin tmp := CostOfWeapon ( weapon ) ;
52115: LD_ADDR_VAR 0 14
52119: PUSH
52120: LD_VAR 0 18
52124: PPUSH
52125: CALL_OW 451
52129: ST_TO_ADDR
// j := GetBase ( tower ) ;
52130: LD_ADDR_VAR 0 9
52134: PUSH
52135: LD_VAR 0 1
52139: PPUSH
52140: CALL_OW 274
52144: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52145: LD_VAR 0 9
52149: PPUSH
52150: LD_INT 1
52152: PPUSH
52153: CALL_OW 275
52157: PUSH
52158: LD_VAR 0 14
52162: PUSH
52163: LD_INT 1
52165: ARRAY
52166: GREATEREQUAL
52167: PUSH
52168: LD_VAR 0 9
52172: PPUSH
52173: LD_INT 2
52175: PPUSH
52176: CALL_OW 275
52180: PUSH
52181: LD_VAR 0 14
52185: PUSH
52186: LD_INT 2
52188: ARRAY
52189: GREATEREQUAL
52190: AND
52191: PUSH
52192: LD_VAR 0 9
52196: PPUSH
52197: LD_INT 3
52199: PPUSH
52200: CALL_OW 275
52204: PUSH
52205: LD_VAR 0 14
52209: PUSH
52210: LD_INT 3
52212: ARRAY
52213: GREATEREQUAL
52214: AND
52215: IFFALSE 52227
// result := weapon ;
52217: LD_ADDR_VAR 0 3
52221: PUSH
52222: LD_VAR 0 18
52226: ST_TO_ADDR
// end ; end ;
52227: LD_VAR 0 3
52231: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52232: LD_INT 0
52234: PPUSH
52235: PPUSH
// result := true ;
52236: LD_ADDR_VAR 0 3
52240: PUSH
52241: LD_INT 1
52243: ST_TO_ADDR
// if array1 = array2 then
52244: LD_VAR 0 1
52248: PUSH
52249: LD_VAR 0 2
52253: EQUAL
52254: IFFALSE 52314
// begin for i = 1 to array1 do
52256: LD_ADDR_VAR 0 4
52260: PUSH
52261: DOUBLE
52262: LD_INT 1
52264: DEC
52265: ST_TO_ADDR
52266: LD_VAR 0 1
52270: PUSH
52271: FOR_TO
52272: IFFALSE 52310
// if array1 [ i ] <> array2 [ i ] then
52274: LD_VAR 0 1
52278: PUSH
52279: LD_VAR 0 4
52283: ARRAY
52284: PUSH
52285: LD_VAR 0 2
52289: PUSH
52290: LD_VAR 0 4
52294: ARRAY
52295: NONEQUAL
52296: IFFALSE 52308
// begin result := false ;
52298: LD_ADDR_VAR 0 3
52302: PUSH
52303: LD_INT 0
52305: ST_TO_ADDR
// break ;
52306: GO 52310
// end ;
52308: GO 52271
52310: POP
52311: POP
// end else
52312: GO 52322
// result := false ;
52314: LD_ADDR_VAR 0 3
52318: PUSH
52319: LD_INT 0
52321: ST_TO_ADDR
// end ;
52322: LD_VAR 0 3
52326: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52327: LD_INT 0
52329: PPUSH
52330: PPUSH
// if not array1 or not array2 then
52331: LD_VAR 0 1
52335: NOT
52336: PUSH
52337: LD_VAR 0 2
52341: NOT
52342: OR
52343: IFFALSE 52347
// exit ;
52345: GO 52411
// result := true ;
52347: LD_ADDR_VAR 0 3
52351: PUSH
52352: LD_INT 1
52354: ST_TO_ADDR
// for i = 1 to array1 do
52355: LD_ADDR_VAR 0 4
52359: PUSH
52360: DOUBLE
52361: LD_INT 1
52363: DEC
52364: ST_TO_ADDR
52365: LD_VAR 0 1
52369: PUSH
52370: FOR_TO
52371: IFFALSE 52409
// if array1 [ i ] <> array2 [ i ] then
52373: LD_VAR 0 1
52377: PUSH
52378: LD_VAR 0 4
52382: ARRAY
52383: PUSH
52384: LD_VAR 0 2
52388: PUSH
52389: LD_VAR 0 4
52393: ARRAY
52394: NONEQUAL
52395: IFFALSE 52407
// begin result := false ;
52397: LD_ADDR_VAR 0 3
52401: PUSH
52402: LD_INT 0
52404: ST_TO_ADDR
// break ;
52405: GO 52409
// end ;
52407: GO 52370
52409: POP
52410: POP
// end ;
52411: LD_VAR 0 3
52415: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52416: LD_INT 0
52418: PPUSH
52419: PPUSH
52420: PPUSH
// pom := GetBase ( fac ) ;
52421: LD_ADDR_VAR 0 5
52425: PUSH
52426: LD_VAR 0 1
52430: PPUSH
52431: CALL_OW 274
52435: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52436: LD_ADDR_VAR 0 4
52440: PUSH
52441: LD_VAR 0 2
52445: PUSH
52446: LD_INT 1
52448: ARRAY
52449: PPUSH
52450: LD_VAR 0 2
52454: PUSH
52455: LD_INT 2
52457: ARRAY
52458: PPUSH
52459: LD_VAR 0 2
52463: PUSH
52464: LD_INT 3
52466: ARRAY
52467: PPUSH
52468: LD_VAR 0 2
52472: PUSH
52473: LD_INT 4
52475: ARRAY
52476: PPUSH
52477: CALL_OW 449
52481: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52482: LD_ADDR_VAR 0 3
52486: PUSH
52487: LD_VAR 0 5
52491: PPUSH
52492: LD_INT 1
52494: PPUSH
52495: CALL_OW 275
52499: PUSH
52500: LD_VAR 0 4
52504: PUSH
52505: LD_INT 1
52507: ARRAY
52508: GREATEREQUAL
52509: PUSH
52510: LD_VAR 0 5
52514: PPUSH
52515: LD_INT 2
52517: PPUSH
52518: CALL_OW 275
52522: PUSH
52523: LD_VAR 0 4
52527: PUSH
52528: LD_INT 2
52530: ARRAY
52531: GREATEREQUAL
52532: AND
52533: PUSH
52534: LD_VAR 0 5
52538: PPUSH
52539: LD_INT 3
52541: PPUSH
52542: CALL_OW 275
52546: PUSH
52547: LD_VAR 0 4
52551: PUSH
52552: LD_INT 3
52554: ARRAY
52555: GREATEREQUAL
52556: AND
52557: ST_TO_ADDR
// end ;
52558: LD_VAR 0 3
52562: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52563: LD_INT 0
52565: PPUSH
52566: PPUSH
52567: PPUSH
52568: PPUSH
// pom := GetBase ( building ) ;
52569: LD_ADDR_VAR 0 3
52573: PUSH
52574: LD_VAR 0 1
52578: PPUSH
52579: CALL_OW 274
52583: ST_TO_ADDR
// if not pom then
52584: LD_VAR 0 3
52588: NOT
52589: IFFALSE 52593
// exit ;
52591: GO 52763
// btype := GetBType ( building ) ;
52593: LD_ADDR_VAR 0 5
52597: PUSH
52598: LD_VAR 0 1
52602: PPUSH
52603: CALL_OW 266
52607: ST_TO_ADDR
// if btype = b_armoury then
52608: LD_VAR 0 5
52612: PUSH
52613: LD_INT 4
52615: EQUAL
52616: IFFALSE 52626
// btype := b_barracks ;
52618: LD_ADDR_VAR 0 5
52622: PUSH
52623: LD_INT 5
52625: ST_TO_ADDR
// if btype = b_depot then
52626: LD_VAR 0 5
52630: PUSH
52631: LD_INT 0
52633: EQUAL
52634: IFFALSE 52644
// btype := b_warehouse ;
52636: LD_ADDR_VAR 0 5
52640: PUSH
52641: LD_INT 1
52643: ST_TO_ADDR
// if btype = b_workshop then
52644: LD_VAR 0 5
52648: PUSH
52649: LD_INT 2
52651: EQUAL
52652: IFFALSE 52662
// btype := b_factory ;
52654: LD_ADDR_VAR 0 5
52658: PUSH
52659: LD_INT 3
52661: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52662: LD_ADDR_VAR 0 4
52666: PUSH
52667: LD_VAR 0 5
52671: PPUSH
52672: LD_VAR 0 1
52676: PPUSH
52677: CALL_OW 248
52681: PPUSH
52682: CALL_OW 450
52686: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52687: LD_ADDR_VAR 0 2
52691: PUSH
52692: LD_VAR 0 3
52696: PPUSH
52697: LD_INT 1
52699: PPUSH
52700: CALL_OW 275
52704: PUSH
52705: LD_VAR 0 4
52709: PUSH
52710: LD_INT 1
52712: ARRAY
52713: GREATEREQUAL
52714: PUSH
52715: LD_VAR 0 3
52719: PPUSH
52720: LD_INT 2
52722: PPUSH
52723: CALL_OW 275
52727: PUSH
52728: LD_VAR 0 4
52732: PUSH
52733: LD_INT 2
52735: ARRAY
52736: GREATEREQUAL
52737: AND
52738: PUSH
52739: LD_VAR 0 3
52743: PPUSH
52744: LD_INT 3
52746: PPUSH
52747: CALL_OW 275
52751: PUSH
52752: LD_VAR 0 4
52756: PUSH
52757: LD_INT 3
52759: ARRAY
52760: GREATEREQUAL
52761: AND
52762: ST_TO_ADDR
// end ;
52763: LD_VAR 0 2
52767: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52768: LD_INT 0
52770: PPUSH
52771: PPUSH
52772: PPUSH
// pom := GetBase ( building ) ;
52773: LD_ADDR_VAR 0 4
52777: PUSH
52778: LD_VAR 0 1
52782: PPUSH
52783: CALL_OW 274
52787: ST_TO_ADDR
// if not pom then
52788: LD_VAR 0 4
52792: NOT
52793: IFFALSE 52797
// exit ;
52795: GO 52898
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52797: LD_ADDR_VAR 0 5
52801: PUSH
52802: LD_VAR 0 2
52806: PPUSH
52807: LD_VAR 0 1
52811: PPUSH
52812: CALL_OW 248
52816: PPUSH
52817: CALL_OW 450
52821: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52822: LD_ADDR_VAR 0 3
52826: PUSH
52827: LD_VAR 0 4
52831: PPUSH
52832: LD_INT 1
52834: PPUSH
52835: CALL_OW 275
52839: PUSH
52840: LD_VAR 0 5
52844: PUSH
52845: LD_INT 1
52847: ARRAY
52848: GREATEREQUAL
52849: PUSH
52850: LD_VAR 0 4
52854: PPUSH
52855: LD_INT 2
52857: PPUSH
52858: CALL_OW 275
52862: PUSH
52863: LD_VAR 0 5
52867: PUSH
52868: LD_INT 2
52870: ARRAY
52871: GREATEREQUAL
52872: AND
52873: PUSH
52874: LD_VAR 0 4
52878: PPUSH
52879: LD_INT 3
52881: PPUSH
52882: CALL_OW 275
52886: PUSH
52887: LD_VAR 0 5
52891: PUSH
52892: LD_INT 3
52894: ARRAY
52895: GREATEREQUAL
52896: AND
52897: ST_TO_ADDR
// end ;
52898: LD_VAR 0 3
52902: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52903: LD_INT 0
52905: PPUSH
52906: PPUSH
52907: PPUSH
52908: PPUSH
52909: PPUSH
52910: PPUSH
52911: PPUSH
52912: PPUSH
52913: PPUSH
52914: PPUSH
52915: PPUSH
// result := false ;
52916: LD_ADDR_VAR 0 8
52920: PUSH
52921: LD_INT 0
52923: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52924: LD_VAR 0 5
52928: NOT
52929: PUSH
52930: LD_VAR 0 1
52934: NOT
52935: OR
52936: PUSH
52937: LD_VAR 0 2
52941: NOT
52942: OR
52943: PUSH
52944: LD_VAR 0 3
52948: NOT
52949: OR
52950: IFFALSE 52954
// exit ;
52952: GO 53768
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52954: LD_ADDR_VAR 0 14
52958: PUSH
52959: LD_VAR 0 1
52963: PPUSH
52964: LD_VAR 0 2
52968: PPUSH
52969: LD_VAR 0 3
52973: PPUSH
52974: LD_VAR 0 4
52978: PPUSH
52979: LD_VAR 0 5
52983: PUSH
52984: LD_INT 1
52986: ARRAY
52987: PPUSH
52988: CALL_OW 248
52992: PPUSH
52993: LD_INT 0
52995: PPUSH
52996: CALL 55021 0 6
53000: ST_TO_ADDR
// if not hexes then
53001: LD_VAR 0 14
53005: NOT
53006: IFFALSE 53010
// exit ;
53008: GO 53768
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53010: LD_ADDR_VAR 0 17
53014: PUSH
53015: LD_VAR 0 5
53019: PPUSH
53020: LD_INT 22
53022: PUSH
53023: LD_VAR 0 13
53027: PPUSH
53028: CALL_OW 255
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: LD_INT 30
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 30
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: LIST
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PPUSH
53069: CALL_OW 72
53073: ST_TO_ADDR
// for i = 1 to hexes do
53074: LD_ADDR_VAR 0 9
53078: PUSH
53079: DOUBLE
53080: LD_INT 1
53082: DEC
53083: ST_TO_ADDR
53084: LD_VAR 0 14
53088: PUSH
53089: FOR_TO
53090: IFFALSE 53766
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53092: LD_ADDR_VAR 0 13
53096: PUSH
53097: LD_VAR 0 14
53101: PUSH
53102: LD_VAR 0 9
53106: ARRAY
53107: PUSH
53108: LD_INT 1
53110: ARRAY
53111: PPUSH
53112: LD_VAR 0 14
53116: PUSH
53117: LD_VAR 0 9
53121: ARRAY
53122: PUSH
53123: LD_INT 2
53125: ARRAY
53126: PPUSH
53127: CALL_OW 428
53131: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53132: LD_VAR 0 14
53136: PUSH
53137: LD_VAR 0 9
53141: ARRAY
53142: PUSH
53143: LD_INT 1
53145: ARRAY
53146: PPUSH
53147: LD_VAR 0 14
53151: PUSH
53152: LD_VAR 0 9
53156: ARRAY
53157: PUSH
53158: LD_INT 2
53160: ARRAY
53161: PPUSH
53162: CALL_OW 351
53166: PUSH
53167: LD_VAR 0 14
53171: PUSH
53172: LD_VAR 0 9
53176: ARRAY
53177: PUSH
53178: LD_INT 1
53180: ARRAY
53181: PPUSH
53182: LD_VAR 0 14
53186: PUSH
53187: LD_VAR 0 9
53191: ARRAY
53192: PUSH
53193: LD_INT 2
53195: ARRAY
53196: PPUSH
53197: CALL_OW 488
53201: NOT
53202: OR
53203: PUSH
53204: LD_VAR 0 13
53208: PPUSH
53209: CALL_OW 247
53213: PUSH
53214: LD_INT 3
53216: EQUAL
53217: OR
53218: IFFALSE 53224
// exit ;
53220: POP
53221: POP
53222: GO 53768
// if not tmp then
53224: LD_VAR 0 13
53228: NOT
53229: IFFALSE 53233
// continue ;
53231: GO 53089
// result := true ;
53233: LD_ADDR_VAR 0 8
53237: PUSH
53238: LD_INT 1
53240: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53241: LD_VAR 0 6
53245: PUSH
53246: LD_VAR 0 13
53250: PPUSH
53251: CALL_OW 247
53255: PUSH
53256: LD_INT 2
53258: EQUAL
53259: AND
53260: PUSH
53261: LD_VAR 0 13
53265: PPUSH
53266: CALL_OW 263
53270: PUSH
53271: LD_INT 1
53273: EQUAL
53274: AND
53275: IFFALSE 53439
// begin if IsDrivenBy ( tmp ) then
53277: LD_VAR 0 13
53281: PPUSH
53282: CALL_OW 311
53286: IFFALSE 53290
// continue ;
53288: GO 53089
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53290: LD_VAR 0 6
53294: PPUSH
53295: LD_INT 3
53297: PUSH
53298: LD_INT 60
53300: PUSH
53301: EMPTY
53302: LIST
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 3
53310: PUSH
53311: LD_INT 55
53313: PUSH
53314: EMPTY
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PPUSH
53325: CALL_OW 72
53329: IFFALSE 53437
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53331: LD_ADDR_VAR 0 18
53335: PUSH
53336: LD_VAR 0 6
53340: PPUSH
53341: LD_INT 3
53343: PUSH
53344: LD_INT 60
53346: PUSH
53347: EMPTY
53348: LIST
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: LD_INT 55
53359: PUSH
53360: EMPTY
53361: LIST
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PPUSH
53371: CALL_OW 72
53375: PUSH
53376: LD_INT 1
53378: ARRAY
53379: ST_TO_ADDR
// if IsInUnit ( driver ) then
53380: LD_VAR 0 18
53384: PPUSH
53385: CALL_OW 310
53389: IFFALSE 53400
// ComExit ( driver ) ;
53391: LD_VAR 0 18
53395: PPUSH
53396: CALL 78813 0 1
// AddComEnterUnit ( driver , tmp ) ;
53400: LD_VAR 0 18
53404: PPUSH
53405: LD_VAR 0 13
53409: PPUSH
53410: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53414: LD_VAR 0 18
53418: PPUSH
53419: LD_VAR 0 7
53423: PPUSH
53424: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53428: LD_VAR 0 18
53432: PPUSH
53433: CALL_OW 181
// end ; continue ;
53437: GO 53089
// end ; if not cleaners or not tmp in cleaners then
53439: LD_VAR 0 6
53443: NOT
53444: PUSH
53445: LD_VAR 0 13
53449: PUSH
53450: LD_VAR 0 6
53454: IN
53455: NOT
53456: OR
53457: IFFALSE 53764
// begin if dep then
53459: LD_VAR 0 17
53463: IFFALSE 53599
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53465: LD_ADDR_VAR 0 16
53469: PUSH
53470: LD_VAR 0 17
53474: PUSH
53475: LD_INT 1
53477: ARRAY
53478: PPUSH
53479: CALL_OW 250
53483: PPUSH
53484: LD_VAR 0 17
53488: PUSH
53489: LD_INT 1
53491: ARRAY
53492: PPUSH
53493: CALL_OW 254
53497: PPUSH
53498: LD_INT 5
53500: PPUSH
53501: CALL_OW 272
53505: PUSH
53506: LD_VAR 0 17
53510: PUSH
53511: LD_INT 1
53513: ARRAY
53514: PPUSH
53515: CALL_OW 251
53519: PPUSH
53520: LD_VAR 0 17
53524: PUSH
53525: LD_INT 1
53527: ARRAY
53528: PPUSH
53529: CALL_OW 254
53533: PPUSH
53534: LD_INT 5
53536: PPUSH
53537: CALL_OW 273
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53546: LD_VAR 0 16
53550: PUSH
53551: LD_INT 1
53553: ARRAY
53554: PPUSH
53555: LD_VAR 0 16
53559: PUSH
53560: LD_INT 2
53562: ARRAY
53563: PPUSH
53564: CALL_OW 488
53568: IFFALSE 53599
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53570: LD_VAR 0 13
53574: PPUSH
53575: LD_VAR 0 16
53579: PUSH
53580: LD_INT 1
53582: ARRAY
53583: PPUSH
53584: LD_VAR 0 16
53588: PUSH
53589: LD_INT 2
53591: ARRAY
53592: PPUSH
53593: CALL_OW 111
// continue ;
53597: GO 53089
// end ; end ; r := GetDir ( tmp ) ;
53599: LD_ADDR_VAR 0 15
53603: PUSH
53604: LD_VAR 0 13
53608: PPUSH
53609: CALL_OW 254
53613: ST_TO_ADDR
// if r = 5 then
53614: LD_VAR 0 15
53618: PUSH
53619: LD_INT 5
53621: EQUAL
53622: IFFALSE 53632
// r := 0 ;
53624: LD_ADDR_VAR 0 15
53628: PUSH
53629: LD_INT 0
53631: ST_TO_ADDR
// for j = r to 5 do
53632: LD_ADDR_VAR 0 10
53636: PUSH
53637: DOUBLE
53638: LD_VAR 0 15
53642: DEC
53643: ST_TO_ADDR
53644: LD_INT 5
53646: PUSH
53647: FOR_TO
53648: IFFALSE 53762
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53650: LD_ADDR_VAR 0 11
53654: PUSH
53655: LD_VAR 0 13
53659: PPUSH
53660: CALL_OW 250
53664: PPUSH
53665: LD_VAR 0 10
53669: PPUSH
53670: LD_INT 2
53672: PPUSH
53673: CALL_OW 272
53677: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53678: LD_ADDR_VAR 0 12
53682: PUSH
53683: LD_VAR 0 13
53687: PPUSH
53688: CALL_OW 251
53692: PPUSH
53693: LD_VAR 0 10
53697: PPUSH
53698: LD_INT 2
53700: PPUSH
53701: CALL_OW 273
53705: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53706: LD_VAR 0 11
53710: PPUSH
53711: LD_VAR 0 12
53715: PPUSH
53716: CALL_OW 488
53720: PUSH
53721: LD_VAR 0 11
53725: PPUSH
53726: LD_VAR 0 12
53730: PPUSH
53731: CALL_OW 428
53735: NOT
53736: AND
53737: IFFALSE 53760
// begin ComMoveXY ( tmp , _x , _y ) ;
53739: LD_VAR 0 13
53743: PPUSH
53744: LD_VAR 0 11
53748: PPUSH
53749: LD_VAR 0 12
53753: PPUSH
53754: CALL_OW 111
// break ;
53758: GO 53762
// end ; end ;
53760: GO 53647
53762: POP
53763: POP
// end ; end ;
53764: GO 53089
53766: POP
53767: POP
// end ;
53768: LD_VAR 0 8
53772: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53773: LD_INT 0
53775: PPUSH
// result := true ;
53776: LD_ADDR_VAR 0 3
53780: PUSH
53781: LD_INT 1
53783: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53784: LD_VAR 0 2
53788: PUSH
53789: LD_INT 24
53791: DOUBLE
53792: EQUAL
53793: IFTRUE 53803
53795: LD_INT 33
53797: DOUBLE
53798: EQUAL
53799: IFTRUE 53803
53801: GO 53828
53803: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53804: LD_ADDR_VAR 0 3
53808: PUSH
53809: LD_INT 32
53811: PPUSH
53812: LD_VAR 0 1
53816: PPUSH
53817: CALL_OW 321
53821: PUSH
53822: LD_INT 2
53824: EQUAL
53825: ST_TO_ADDR
53826: GO 54144
53828: LD_INT 20
53830: DOUBLE
53831: EQUAL
53832: IFTRUE 53836
53834: GO 53861
53836: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53837: LD_ADDR_VAR 0 3
53841: PUSH
53842: LD_INT 6
53844: PPUSH
53845: LD_VAR 0 1
53849: PPUSH
53850: CALL_OW 321
53854: PUSH
53855: LD_INT 2
53857: EQUAL
53858: ST_TO_ADDR
53859: GO 54144
53861: LD_INT 22
53863: DOUBLE
53864: EQUAL
53865: IFTRUE 53875
53867: LD_INT 36
53869: DOUBLE
53870: EQUAL
53871: IFTRUE 53875
53873: GO 53900
53875: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53876: LD_ADDR_VAR 0 3
53880: PUSH
53881: LD_INT 15
53883: PPUSH
53884: LD_VAR 0 1
53888: PPUSH
53889: CALL_OW 321
53893: PUSH
53894: LD_INT 2
53896: EQUAL
53897: ST_TO_ADDR
53898: GO 54144
53900: LD_INT 30
53902: DOUBLE
53903: EQUAL
53904: IFTRUE 53908
53906: GO 53933
53908: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53909: LD_ADDR_VAR 0 3
53913: PUSH
53914: LD_INT 20
53916: PPUSH
53917: LD_VAR 0 1
53921: PPUSH
53922: CALL_OW 321
53926: PUSH
53927: LD_INT 2
53929: EQUAL
53930: ST_TO_ADDR
53931: GO 54144
53933: LD_INT 28
53935: DOUBLE
53936: EQUAL
53937: IFTRUE 53947
53939: LD_INT 21
53941: DOUBLE
53942: EQUAL
53943: IFTRUE 53947
53945: GO 53972
53947: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53948: LD_ADDR_VAR 0 3
53952: PUSH
53953: LD_INT 21
53955: PPUSH
53956: LD_VAR 0 1
53960: PPUSH
53961: CALL_OW 321
53965: PUSH
53966: LD_INT 2
53968: EQUAL
53969: ST_TO_ADDR
53970: GO 54144
53972: LD_INT 16
53974: DOUBLE
53975: EQUAL
53976: IFTRUE 53980
53978: GO 54005
53980: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53981: LD_ADDR_VAR 0 3
53985: PUSH
53986: LD_INT 84
53988: PPUSH
53989: LD_VAR 0 1
53993: PPUSH
53994: CALL_OW 321
53998: PUSH
53999: LD_INT 2
54001: EQUAL
54002: ST_TO_ADDR
54003: GO 54144
54005: LD_INT 19
54007: DOUBLE
54008: EQUAL
54009: IFTRUE 54019
54011: LD_INT 23
54013: DOUBLE
54014: EQUAL
54015: IFTRUE 54019
54017: GO 54044
54019: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54020: LD_ADDR_VAR 0 3
54024: PUSH
54025: LD_INT 83
54027: PPUSH
54028: LD_VAR 0 1
54032: PPUSH
54033: CALL_OW 321
54037: PUSH
54038: LD_INT 2
54040: EQUAL
54041: ST_TO_ADDR
54042: GO 54144
54044: LD_INT 17
54046: DOUBLE
54047: EQUAL
54048: IFTRUE 54052
54050: GO 54077
54052: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54053: LD_ADDR_VAR 0 3
54057: PUSH
54058: LD_INT 39
54060: PPUSH
54061: LD_VAR 0 1
54065: PPUSH
54066: CALL_OW 321
54070: PUSH
54071: LD_INT 2
54073: EQUAL
54074: ST_TO_ADDR
54075: GO 54144
54077: LD_INT 18
54079: DOUBLE
54080: EQUAL
54081: IFTRUE 54085
54083: GO 54110
54085: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54086: LD_ADDR_VAR 0 3
54090: PUSH
54091: LD_INT 40
54093: PPUSH
54094: LD_VAR 0 1
54098: PPUSH
54099: CALL_OW 321
54103: PUSH
54104: LD_INT 2
54106: EQUAL
54107: ST_TO_ADDR
54108: GO 54144
54110: LD_INT 27
54112: DOUBLE
54113: EQUAL
54114: IFTRUE 54118
54116: GO 54143
54118: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54119: LD_ADDR_VAR 0 3
54123: PUSH
54124: LD_INT 35
54126: PPUSH
54127: LD_VAR 0 1
54131: PPUSH
54132: CALL_OW 321
54136: PUSH
54137: LD_INT 2
54139: EQUAL
54140: ST_TO_ADDR
54141: GO 54144
54143: POP
// end ;
54144: LD_VAR 0 3
54148: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54149: LD_INT 0
54151: PPUSH
54152: PPUSH
54153: PPUSH
54154: PPUSH
54155: PPUSH
54156: PPUSH
54157: PPUSH
54158: PPUSH
54159: PPUSH
54160: PPUSH
54161: PPUSH
// result := false ;
54162: LD_ADDR_VAR 0 6
54166: PUSH
54167: LD_INT 0
54169: ST_TO_ADDR
// if btype = b_depot then
54170: LD_VAR 0 2
54174: PUSH
54175: LD_INT 0
54177: EQUAL
54178: IFFALSE 54190
// begin result := true ;
54180: LD_ADDR_VAR 0 6
54184: PUSH
54185: LD_INT 1
54187: ST_TO_ADDR
// exit ;
54188: GO 55016
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54190: LD_VAR 0 1
54194: NOT
54195: PUSH
54196: LD_VAR 0 1
54200: PPUSH
54201: CALL_OW 266
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: IN
54216: NOT
54217: OR
54218: PUSH
54219: LD_VAR 0 2
54223: NOT
54224: OR
54225: PUSH
54226: LD_VAR 0 5
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: LD_INT 4
54245: PUSH
54246: LD_INT 5
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: IN
54257: NOT
54258: OR
54259: PUSH
54260: LD_VAR 0 3
54264: PPUSH
54265: LD_VAR 0 4
54269: PPUSH
54270: CALL_OW 488
54274: NOT
54275: OR
54276: IFFALSE 54280
// exit ;
54278: GO 55016
// side := GetSide ( depot ) ;
54280: LD_ADDR_VAR 0 9
54284: PUSH
54285: LD_VAR 0 1
54289: PPUSH
54290: CALL_OW 255
54294: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54295: LD_VAR 0 9
54299: PPUSH
54300: LD_VAR 0 2
54304: PPUSH
54305: CALL 53773 0 2
54309: NOT
54310: IFFALSE 54314
// exit ;
54312: GO 55016
// pom := GetBase ( depot ) ;
54314: LD_ADDR_VAR 0 10
54318: PUSH
54319: LD_VAR 0 1
54323: PPUSH
54324: CALL_OW 274
54328: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54329: LD_ADDR_VAR 0 11
54333: PUSH
54334: LD_VAR 0 2
54338: PPUSH
54339: LD_VAR 0 1
54343: PPUSH
54344: CALL_OW 248
54348: PPUSH
54349: CALL_OW 450
54353: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54354: LD_VAR 0 10
54358: PPUSH
54359: LD_INT 1
54361: PPUSH
54362: CALL_OW 275
54366: PUSH
54367: LD_VAR 0 11
54371: PUSH
54372: LD_INT 1
54374: ARRAY
54375: GREATEREQUAL
54376: PUSH
54377: LD_VAR 0 10
54381: PPUSH
54382: LD_INT 2
54384: PPUSH
54385: CALL_OW 275
54389: PUSH
54390: LD_VAR 0 11
54394: PUSH
54395: LD_INT 2
54397: ARRAY
54398: GREATEREQUAL
54399: AND
54400: PUSH
54401: LD_VAR 0 10
54405: PPUSH
54406: LD_INT 3
54408: PPUSH
54409: CALL_OW 275
54413: PUSH
54414: LD_VAR 0 11
54418: PUSH
54419: LD_INT 3
54421: ARRAY
54422: GREATEREQUAL
54423: AND
54424: NOT
54425: IFFALSE 54429
// exit ;
54427: GO 55016
// if GetBType ( depot ) = b_depot then
54429: LD_VAR 0 1
54433: PPUSH
54434: CALL_OW 266
54438: PUSH
54439: LD_INT 0
54441: EQUAL
54442: IFFALSE 54454
// dist := 28 else
54444: LD_ADDR_VAR 0 14
54448: PUSH
54449: LD_INT 28
54451: ST_TO_ADDR
54452: GO 54462
// dist := 36 ;
54454: LD_ADDR_VAR 0 14
54458: PUSH
54459: LD_INT 36
54461: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54462: LD_VAR 0 1
54466: PPUSH
54467: LD_VAR 0 3
54471: PPUSH
54472: LD_VAR 0 4
54476: PPUSH
54477: CALL_OW 297
54481: PUSH
54482: LD_VAR 0 14
54486: GREATER
54487: IFFALSE 54491
// exit ;
54489: GO 55016
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54491: LD_ADDR_VAR 0 12
54495: PUSH
54496: LD_VAR 0 2
54500: PPUSH
54501: LD_VAR 0 3
54505: PPUSH
54506: LD_VAR 0 4
54510: PPUSH
54511: LD_VAR 0 5
54515: PPUSH
54516: LD_VAR 0 1
54520: PPUSH
54521: CALL_OW 248
54525: PPUSH
54526: LD_INT 0
54528: PPUSH
54529: CALL 55021 0 6
54533: ST_TO_ADDR
// if not hexes then
54534: LD_VAR 0 12
54538: NOT
54539: IFFALSE 54543
// exit ;
54541: GO 55016
// hex := GetHexInfo ( x , y ) ;
54543: LD_ADDR_VAR 0 15
54547: PUSH
54548: LD_VAR 0 3
54552: PPUSH
54553: LD_VAR 0 4
54557: PPUSH
54558: CALL_OW 546
54562: ST_TO_ADDR
// if hex [ 1 ] then
54563: LD_VAR 0 15
54567: PUSH
54568: LD_INT 1
54570: ARRAY
54571: IFFALSE 54575
// exit ;
54573: GO 55016
// height := hex [ 2 ] ;
54575: LD_ADDR_VAR 0 13
54579: PUSH
54580: LD_VAR 0 15
54584: PUSH
54585: LD_INT 2
54587: ARRAY
54588: ST_TO_ADDR
// for i = 1 to hexes do
54589: LD_ADDR_VAR 0 7
54593: PUSH
54594: DOUBLE
54595: LD_INT 1
54597: DEC
54598: ST_TO_ADDR
54599: LD_VAR 0 12
54603: PUSH
54604: FOR_TO
54605: IFFALSE 54935
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54607: LD_VAR 0 12
54611: PUSH
54612: LD_VAR 0 7
54616: ARRAY
54617: PUSH
54618: LD_INT 1
54620: ARRAY
54621: PPUSH
54622: LD_VAR 0 12
54626: PUSH
54627: LD_VAR 0 7
54631: ARRAY
54632: PUSH
54633: LD_INT 2
54635: ARRAY
54636: PPUSH
54637: CALL_OW 488
54641: NOT
54642: PUSH
54643: LD_VAR 0 12
54647: PUSH
54648: LD_VAR 0 7
54652: ARRAY
54653: PUSH
54654: LD_INT 1
54656: ARRAY
54657: PPUSH
54658: LD_VAR 0 12
54662: PUSH
54663: LD_VAR 0 7
54667: ARRAY
54668: PUSH
54669: LD_INT 2
54671: ARRAY
54672: PPUSH
54673: CALL_OW 428
54677: PUSH
54678: LD_INT 0
54680: GREATER
54681: OR
54682: PUSH
54683: LD_VAR 0 12
54687: PUSH
54688: LD_VAR 0 7
54692: ARRAY
54693: PUSH
54694: LD_INT 1
54696: ARRAY
54697: PPUSH
54698: LD_VAR 0 12
54702: PUSH
54703: LD_VAR 0 7
54707: ARRAY
54708: PUSH
54709: LD_INT 2
54711: ARRAY
54712: PPUSH
54713: CALL_OW 351
54717: OR
54718: IFFALSE 54724
// exit ;
54720: POP
54721: POP
54722: GO 55016
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54724: LD_ADDR_VAR 0 8
54728: PUSH
54729: LD_VAR 0 12
54733: PUSH
54734: LD_VAR 0 7
54738: ARRAY
54739: PUSH
54740: LD_INT 1
54742: ARRAY
54743: PPUSH
54744: LD_VAR 0 12
54748: PUSH
54749: LD_VAR 0 7
54753: ARRAY
54754: PUSH
54755: LD_INT 2
54757: ARRAY
54758: PPUSH
54759: CALL_OW 546
54763: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54764: LD_VAR 0 8
54768: PUSH
54769: LD_INT 1
54771: ARRAY
54772: PUSH
54773: LD_VAR 0 8
54777: PUSH
54778: LD_INT 2
54780: ARRAY
54781: PUSH
54782: LD_VAR 0 13
54786: PUSH
54787: LD_INT 2
54789: PLUS
54790: GREATER
54791: OR
54792: PUSH
54793: LD_VAR 0 8
54797: PUSH
54798: LD_INT 2
54800: ARRAY
54801: PUSH
54802: LD_VAR 0 13
54806: PUSH
54807: LD_INT 2
54809: MINUS
54810: LESS
54811: OR
54812: PUSH
54813: LD_VAR 0 8
54817: PUSH
54818: LD_INT 3
54820: ARRAY
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: LD_INT 8
54827: PUSH
54828: LD_INT 9
54830: PUSH
54831: LD_INT 10
54833: PUSH
54834: LD_INT 11
54836: PUSH
54837: LD_INT 12
54839: PUSH
54840: LD_INT 13
54842: PUSH
54843: LD_INT 16
54845: PUSH
54846: LD_INT 17
54848: PUSH
54849: LD_INT 18
54851: PUSH
54852: LD_INT 19
54854: PUSH
54855: LD_INT 20
54857: PUSH
54858: LD_INT 21
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: IN
54876: NOT
54877: OR
54878: PUSH
54879: LD_VAR 0 8
54883: PUSH
54884: LD_INT 5
54886: ARRAY
54887: NOT
54888: OR
54889: PUSH
54890: LD_VAR 0 8
54894: PUSH
54895: LD_INT 6
54897: ARRAY
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: LD_INT 7
54907: PUSH
54908: LD_INT 9
54910: PUSH
54911: LD_INT 10
54913: PUSH
54914: LD_INT 11
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: IN
54925: NOT
54926: OR
54927: IFFALSE 54933
// exit ;
54929: POP
54930: POP
54931: GO 55016
// end ;
54933: GO 54604
54935: POP
54936: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54937: LD_VAR 0 9
54941: PPUSH
54942: LD_VAR 0 3
54946: PPUSH
54947: LD_VAR 0 4
54951: PPUSH
54952: LD_INT 20
54954: PPUSH
54955: CALL 46939 0 4
54959: PUSH
54960: LD_INT 4
54962: ARRAY
54963: IFFALSE 54967
// exit ;
54965: GO 55016
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54967: LD_VAR 0 2
54971: PUSH
54972: LD_INT 29
54974: PUSH
54975: LD_INT 30
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: IN
54982: PUSH
54983: LD_VAR 0 3
54987: PPUSH
54988: LD_VAR 0 4
54992: PPUSH
54993: LD_VAR 0 9
54997: PPUSH
54998: CALL_OW 440
55002: NOT
55003: AND
55004: IFFALSE 55008
// exit ;
55006: GO 55016
// result := true ;
55008: LD_ADDR_VAR 0 6
55012: PUSH
55013: LD_INT 1
55015: ST_TO_ADDR
// end ;
55016: LD_VAR 0 6
55020: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55021: LD_INT 0
55023: PPUSH
55024: PPUSH
55025: PPUSH
55026: PPUSH
55027: PPUSH
55028: PPUSH
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
55044: PPUSH
55045: PPUSH
55046: PPUSH
55047: PPUSH
55048: PPUSH
55049: PPUSH
55050: PPUSH
55051: PPUSH
55052: PPUSH
55053: PPUSH
55054: PPUSH
55055: PPUSH
55056: PPUSH
55057: PPUSH
55058: PPUSH
55059: PPUSH
55060: PPUSH
55061: PPUSH
55062: PPUSH
55063: PPUSH
55064: PPUSH
55065: PPUSH
55066: PPUSH
55067: PPUSH
55068: PPUSH
55069: PPUSH
55070: PPUSH
55071: PPUSH
55072: PPUSH
55073: PPUSH
55074: PPUSH
55075: PPUSH
55076: PPUSH
55077: PPUSH
55078: PPUSH
55079: PPUSH
55080: PPUSH
// result = [ ] ;
55081: LD_ADDR_VAR 0 7
55085: PUSH
55086: EMPTY
55087: ST_TO_ADDR
// temp_list = [ ] ;
55088: LD_ADDR_VAR 0 9
55092: PUSH
55093: EMPTY
55094: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55095: LD_VAR 0 4
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: LD_INT 3
55111: PUSH
55112: LD_INT 4
55114: PUSH
55115: LD_INT 5
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: IN
55126: NOT
55127: PUSH
55128: LD_VAR 0 1
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: IN
55143: PUSH
55144: LD_VAR 0 5
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: LIST
55162: IN
55163: NOT
55164: AND
55165: OR
55166: IFFALSE 55170
// exit ;
55168: GO 73561
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55170: LD_VAR 0 1
55174: PUSH
55175: LD_INT 6
55177: PUSH
55178: LD_INT 7
55180: PUSH
55181: LD_INT 8
55183: PUSH
55184: LD_INT 13
55186: PUSH
55187: LD_INT 12
55189: PUSH
55190: LD_INT 15
55192: PUSH
55193: LD_INT 11
55195: PUSH
55196: LD_INT 14
55198: PUSH
55199: LD_INT 10
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: IN
55213: IFFALSE 55223
// btype = b_lab ;
55215: LD_ADDR_VAR 0 1
55219: PUSH
55220: LD_INT 6
55222: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55223: LD_VAR 0 6
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: LIST
55241: IN
55242: NOT
55243: PUSH
55244: LD_VAR 0 1
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: LD_INT 3
55260: PUSH
55261: LD_INT 6
55263: PUSH
55264: LD_INT 36
55266: PUSH
55267: LD_INT 4
55269: PUSH
55270: LD_INT 5
55272: PUSH
55273: LD_INT 31
55275: PUSH
55276: LD_INT 32
55278: PUSH
55279: LD_INT 33
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: IN
55295: NOT
55296: PUSH
55297: LD_VAR 0 6
55301: PUSH
55302: LD_INT 1
55304: EQUAL
55305: AND
55306: OR
55307: PUSH
55308: LD_VAR 0 1
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: IN
55323: NOT
55324: PUSH
55325: LD_VAR 0 6
55329: PUSH
55330: LD_INT 2
55332: EQUAL
55333: AND
55334: OR
55335: IFFALSE 55345
// mode = 0 ;
55337: LD_ADDR_VAR 0 6
55341: PUSH
55342: LD_INT 0
55344: ST_TO_ADDR
// case mode of 0 :
55345: LD_VAR 0 6
55349: PUSH
55350: LD_INT 0
55352: DOUBLE
55353: EQUAL
55354: IFTRUE 55358
55356: GO 66811
55358: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55359: LD_ADDR_VAR 0 11
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 3
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 3
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55552: LD_ADDR_VAR 0 12
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 3
55720: NEG
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55748: LD_ADDR_VAR 0 13
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: LD_INT 3
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 3
55907: NEG
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: NEG
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55947: LD_ADDR_VAR 0 14
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: LD_INT 3
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: LD_INT 3
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 2
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56143: LD_ADDR_VAR 0 15
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 3
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56336: LD_ADDR_VAR 0 16
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 3
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: LD_INT 3
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 3
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56529: LD_ADDR_VAR 0 17
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56759: LD_ADDR_VAR 0 18
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 2
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56989: LD_ADDR_VAR 0 19
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: LD_INT 2
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57219: LD_ADDR_VAR 0 20
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: NEG
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57449: LD_ADDR_VAR 0 21
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 2
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57679: LD_ADDR_VAR 0 22
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 2
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 2
57878: NEG
57879: PUSH
57880: LD_INT 2
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57909: LD_ADDR_VAR 0 23
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: LD_INT 2
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 2
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: LD_INT 2
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: LD_INT 3
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58189: LD_ADDR_VAR 0 24
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: LD_INT 2
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 2
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: NEG
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: LD_INT 2
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 3
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58465: LD_ADDR_VAR 0 25
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 2
58652: NEG
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 3
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 3
58686: PUSH
58687: LD_INT 2
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: LD_INT 3
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58739: LD_ADDR_VAR 0 26
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 2
58950: PUSH
58951: LD_INT 3
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59015: LD_ADDR_VAR 0 27
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: NEG
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: NEG
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59295: LD_ADDR_VAR 0 28
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 2
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 2
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 3
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 3
59530: NEG
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 3
59542: NEG
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59577: LD_ADDR_VAR 0 29
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 2
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: NEG
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 2
59767: NEG
59768: PUSH
59769: LD_INT 3
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 3
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 3
59821: NEG
59822: PUSH
59823: LD_INT 2
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59856: LD_ADDR_VAR 0 30
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 2
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 2
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 2
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: LD_INT 2
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: LD_INT 2
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: NEG
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 3
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: LD_INT 2
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 3
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 3
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60134: LD_ADDR_VAR 0 31
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: NEG
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: LD_INT 2
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 2
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 2
60311: NEG
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 2
60323: NEG
60324: PUSH
60325: LD_INT 3
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: LD_INT 3
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 3
60377: NEG
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60412: LD_ADDR_VAR 0 32
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: LD_INT 2
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 2
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: NEG
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 3
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: LD_INT 2
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 3
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: LD_INT 3
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 3
60655: NEG
60656: PUSH
60657: LD_INT 1
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60690: LD_ADDR_VAR 0 33
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: LD_INT 2
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 3
60934: NEG
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60969: LD_ADDR_VAR 0 34
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: LD_INT 2
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 2
61125: NEG
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 2
61136: NEG
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: LD_INT 3
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: LD_INT 2
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 3
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: LD_INT 3
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 2
61203: NEG
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 3
61214: NEG
61215: PUSH
61216: LD_INT 1
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61249: LD_ADDR_VAR 0 35
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 1
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: NEG
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 2
61340: NEG
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61361: LD_ADDR_VAR 0 36
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61473: LD_ADDR_VAR 0 37
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61585: LD_ADDR_VAR 0 38
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61697: LD_ADDR_VAR 0 39
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: LD_INT 1
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: LD_INT 2
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61809: LD_ADDR_VAR 0 40
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61921: LD_ADDR_VAR 0 41
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 2
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 2
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: NEG
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 2
62099: NEG
62100: PUSH
62101: LD_INT 2
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 2
62111: NEG
62112: PUSH
62113: LD_INT 3
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 3
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 3
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 3
62164: PUSH
62165: LD_INT 3
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: LD_INT 3
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 3
62195: NEG
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 3
62206: NEG
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 3
62218: NEG
62219: PUSH
62220: LD_INT 2
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 3
62230: NEG
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62271: LD_ADDR_VAR 0 42
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 1
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: LD_INT 2
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 2
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 2
62396: PUSH
62397: LD_INT 2
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 2
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 2
62437: NEG
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: LD_INT 2
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 2
62461: NEG
62462: PUSH
62463: LD_INT 3
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: LD_INT 3
62477: NEG
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: LD_INT 3
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 3
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 3
62517: PUSH
62518: LD_INT 3
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: LD_INT 3
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: LD_INT 3
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: LD_INT 3
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: NEG
62558: PUSH
62559: LD_INT 2
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 3
62568: NEG
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 3
62580: NEG
62581: PUSH
62582: LD_INT 3
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62621: LD_ADDR_VAR 0 43
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: LD_INT 1
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: NEG
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: NEG
62703: PUSH
62704: LD_INT 2
62706: NEG
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: LD_INT 1
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 2
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 2
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: LD_INT 2
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: LD_INT 2
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 2
62798: NEG
62799: PUSH
62800: LD_INT 1
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: NEG
62811: PUSH
62812: LD_INT 3
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: LD_INT 3
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: LD_INT 2
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 3
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: LD_INT 3
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 3
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 2
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 2
62906: NEG
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 3
62917: NEG
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 3
62928: NEG
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62969: LD_ADDR_VAR 0 44
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 1
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: LD_INT 2
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: LD_INT 1
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 2
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: PUSH
63104: LD_INT 2
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 1
63113: NEG
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 2
63124: NEG
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 2
63135: NEG
63136: PUSH
63137: LD_INT 1
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: LD_INT 2
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: NEG
63160: PUSH
63161: LD_INT 3
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 3
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 3
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 3
63202: PUSH
63203: LD_INT 2
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 3
63212: PUSH
63213: LD_INT 3
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 2
63222: PUSH
63223: LD_INT 3
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 2
63232: NEG
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 3
63243: NEG
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 3
63254: NEG
63255: PUSH
63256: LD_INT 1
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 3
63266: NEG
63267: PUSH
63268: LD_INT 2
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: NEG
63279: PUSH
63280: LD_INT 3
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63319: LD_ADDR_VAR 0 45
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: LD_INT 1
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: NEG
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: NEG
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: NEG
63401: PUSH
63402: LD_INT 2
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: LD_INT 2
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: LD_INT 1
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 2
63485: NEG
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 2
63497: NEG
63498: PUSH
63499: LD_INT 2
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: LD_INT 3
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: LD_INT 3
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: LD_INT 3
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: LD_INT 2
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 3
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 3
63565: PUSH
63566: LD_INT 3
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: LD_INT 3
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: LD_INT 3
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: LD_INT 3
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: LD_INT 2
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 3
63616: NEG
63617: PUSH
63618: LD_INT 2
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 3
63628: NEG
63629: PUSH
63630: LD_INT 3
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63669: LD_ADDR_VAR 0 46
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: LD_INT 1
63689: NEG
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 1
63707: PUSH
63708: LD_INT 1
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 1
63727: NEG
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: LD_INT 1
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 1
63750: NEG
63751: PUSH
63752: LD_INT 2
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: LD_INT 2
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 2
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 2
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: LD_INT 2
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: LD_INT 2
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 2
63835: NEG
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 2
63846: NEG
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: LD_INT 3
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: LD_INT 3
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 2
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 3
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 3
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 1
63923: PUSH
63924: LD_INT 3
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: LD_INT 3
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 1
63943: NEG
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 2
63954: NEG
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 3
63965: NEG
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 3
63976: NEG
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64017: LD_ADDR_VAR 0 47
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 1
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 2
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: LD_INT 2
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: NEG
64133: PUSH
64134: LD_INT 1
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: NEG
64145: PUSH
64146: LD_INT 2
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64168: LD_ADDR_VAR 0 48
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: LD_INT 0
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: NEG
64250: PUSH
64251: LD_INT 2
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: LD_INT 2
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: LD_INT 1
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 2
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64315: LD_ADDR_VAR 0 49
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 1
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: NEG
64385: PUSH
64386: LD_INT 1
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 2
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 2
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 2
64427: PUSH
64428: LD_INT 2
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 2
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64459: LD_ADDR_VAR 0 50
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: NEG
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 2
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 2
64550: PUSH
64551: LD_INT 2
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: LD_INT 2
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 2
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 1
64580: NEG
64581: PUSH
64582: LD_INT 1
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64603: LD_ADDR_VAR 0 51
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: LD_INT 0
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: LD_INT 1
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: LD_INT 2
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: LD_INT 2
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 1
64704: NEG
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 2
64715: NEG
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 2
64726: NEG
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64750: LD_ADDR_VAR 0 52
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: NEG
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 1
64831: NEG
64832: PUSH
64833: LD_INT 2
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 2
64854: NEG
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: NEG
64866: PUSH
64867: LD_INT 1
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 2
64877: NEG
64878: PUSH
64879: LD_INT 2
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64901: LD_ADDR_VAR 0 53
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 1
64959: NEG
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 1
64970: NEG
64971: PUSH
64972: LD_INT 1
64974: NEG
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 1
64982: NEG
64983: PUSH
64984: LD_INT 2
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_INT 2
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: LD_INT 1
65008: NEG
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 2
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 2
65026: PUSH
65027: LD_INT 1
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 2
65036: PUSH
65037: LD_INT 2
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 1
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: LD_INT 2
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 2
65077: NEG
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 2
65088: NEG
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 2
65100: NEG
65101: PUSH
65102: LD_INT 2
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65131: LD_ADDR_VAR 0 54
65135: PUSH
65136: LD_INT 0
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 0
65148: PUSH
65149: LD_INT 1
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: LD_INT 1
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: LD_INT 1
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 1
65189: NEG
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: LD_INT 1
65204: NEG
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: LD_INT 2
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 2
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 1
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 2
65246: PUSH
65247: LD_INT 0
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 2
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 2
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: LD_INT 2
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: LD_INT 1
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 2
65307: NEG
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 2
65318: NEG
65319: PUSH
65320: LD_INT 1
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 2
65330: NEG
65331: PUSH
65332: LD_INT 2
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65361: LD_ADDR_VAR 0 55
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: LD_INT 0
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: LD_INT 1
65381: NEG
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 1
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: LD_INT 1
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 1
65419: NEG
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 1
65430: NEG
65431: PUSH
65432: LD_INT 1
65434: NEG
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 1
65442: NEG
65443: PUSH
65444: LD_INT 2
65446: NEG
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 2
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: LD_INT 1
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 2
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 2
65496: PUSH
65497: LD_INT 2
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: LD_INT 2
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: LD_INT 2
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: LD_INT 1
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 2
65537: NEG
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 2
65548: NEG
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 2
65560: NEG
65561: PUSH
65562: LD_INT 2
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65591: LD_ADDR_VAR 0 56
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: LD_INT 1
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 1
65619: PUSH
65620: LD_INT 0
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: PUSH
65630: LD_INT 1
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 0
65639: PUSH
65640: LD_INT 1
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 1
65660: NEG
65661: PUSH
65662: LD_INT 1
65664: NEG
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 1
65672: NEG
65673: PUSH
65674: LD_INT 2
65676: NEG
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: LD_INT 2
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 1
65695: PUSH
65696: LD_INT 1
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 2
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 2
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 2
65726: PUSH
65727: LD_INT 2
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: LD_INT 2
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 0
65746: PUSH
65747: LD_INT 2
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 2
65767: NEG
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 2
65778: NEG
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 2
65790: NEG
65791: PUSH
65792: LD_INT 2
65794: NEG
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65821: LD_ADDR_VAR 0 57
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 0
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 1
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 1
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: LD_INT 1
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 1
65890: NEG
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 1
65902: NEG
65903: PUSH
65904: LD_INT 2
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 2
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: LD_INT 1
65928: NEG
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 2
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 2
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 2
65956: PUSH
65957: LD_INT 2
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: LD_INT 2
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: LD_INT 2
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 1
65986: NEG
65987: PUSH
65988: LD_INT 1
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 2
65997: NEG
65998: PUSH
65999: LD_INT 0
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 2
66008: NEG
66009: PUSH
66010: LD_INT 1
66012: NEG
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 2
66020: NEG
66021: PUSH
66022: LD_INT 2
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66051: LD_ADDR_VAR 0 58
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 0
66068: PUSH
66069: LD_INT 1
66071: NEG
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 1
66079: PUSH
66080: LD_INT 0
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 1
66089: PUSH
66090: LD_INT 1
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 0
66099: PUSH
66100: LD_INT 1
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 1
66109: NEG
66110: PUSH
66111: LD_INT 0
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 1
66120: NEG
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 1
66132: NEG
66133: PUSH
66134: LD_INT 2
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: LD_INT 2
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 1
66155: PUSH
66156: LD_INT 1
66158: NEG
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 2
66166: PUSH
66167: LD_INT 0
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 2
66176: PUSH
66177: LD_INT 1
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 2
66186: PUSH
66187: LD_INT 2
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 1
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: LD_INT 2
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 1
66216: NEG
66217: PUSH
66218: LD_INT 1
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 2
66227: NEG
66228: PUSH
66229: LD_INT 0
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 2
66238: NEG
66239: PUSH
66240: LD_INT 1
66242: NEG
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 2
66250: NEG
66251: PUSH
66252: LD_INT 2
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66281: LD_ADDR_VAR 0 59
66285: PUSH
66286: LD_INT 0
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 0
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 1
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: PUSH
66320: LD_INT 1
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: LD_INT 1
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 1
66339: NEG
66340: PUSH
66341: LD_INT 0
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 1
66350: NEG
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66369: LD_ADDR_VAR 0 60
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: LD_INT 0
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 1
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: LD_INT 1
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 0
66417: PUSH
66418: LD_INT 1
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 1
66427: NEG
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 1
66438: NEG
66439: PUSH
66440: LD_INT 1
66442: NEG
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66457: LD_ADDR_VAR 0 61
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: LD_INT 1
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: LD_INT 1
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 0
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 1
66515: NEG
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 1
66526: NEG
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66545: LD_ADDR_VAR 0 62
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 0
66562: PUSH
66563: LD_INT 1
66565: NEG
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: LD_INT 1
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 0
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 1
66603: NEG
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 1
66614: NEG
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66633: LD_ADDR_VAR 0 63
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: LD_INT 1
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: LD_INT 1
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 0
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 1
66691: NEG
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 1
66702: NEG
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66721: LD_ADDR_VAR 0 64
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: LD_INT 1
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 1
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 1
66759: PUSH
66760: LD_INT 1
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 0
66769: PUSH
66770: LD_INT 1
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 1
66779: NEG
66780: PUSH
66781: LD_INT 0
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: PUSH
66792: LD_INT 1
66794: NEG
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: ST_TO_ADDR
// end ; 1 :
66809: GO 72706
66811: LD_INT 1
66813: DOUBLE
66814: EQUAL
66815: IFTRUE 66819
66817: GO 69442
66819: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66820: LD_ADDR_VAR 0 11
66824: PUSH
66825: LD_INT 1
66827: NEG
66828: PUSH
66829: LD_INT 3
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 1
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: LIST
66863: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66864: LD_ADDR_VAR 0 12
66868: PUSH
66869: LD_INT 2
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 3
66882: PUSH
66883: LD_INT 0
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 3
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: LIST
66904: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66905: LD_ADDR_VAR 0 13
66909: PUSH
66910: LD_INT 3
66912: PUSH
66913: LD_INT 2
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 3
66922: PUSH
66923: LD_INT 3
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 2
66932: PUSH
66933: LD_INT 3
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: LIST
66944: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66945: LD_ADDR_VAR 0 14
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: LD_INT 3
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 0
66962: PUSH
66963: LD_INT 3
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 1
66972: NEG
66973: PUSH
66974: LD_INT 2
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: LIST
66985: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66986: LD_ADDR_VAR 0 15
66990: PUSH
66991: LD_INT 2
66993: NEG
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 3
67004: NEG
67005: PUSH
67006: LD_INT 0
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 3
67015: NEG
67016: PUSH
67017: LD_INT 1
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: LIST
67029: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67030: LD_ADDR_VAR 0 16
67034: PUSH
67035: LD_INT 2
67037: NEG
67038: PUSH
67039: LD_INT 3
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 3
67049: NEG
67050: PUSH
67051: LD_INT 2
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 3
67061: NEG
67062: PUSH
67063: LD_INT 3
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: LIST
67075: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67076: LD_ADDR_VAR 0 17
67080: PUSH
67081: LD_INT 1
67083: NEG
67084: PUSH
67085: LD_INT 3
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 0
67095: PUSH
67096: LD_INT 3
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: LD_INT 2
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: LIST
67119: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67120: LD_ADDR_VAR 0 18
67124: PUSH
67125: LD_INT 2
67127: PUSH
67128: LD_INT 1
67130: NEG
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 3
67138: PUSH
67139: LD_INT 0
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 3
67148: PUSH
67149: LD_INT 1
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: LIST
67160: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67161: LD_ADDR_VAR 0 19
67165: PUSH
67166: LD_INT 3
67168: PUSH
67169: LD_INT 2
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 3
67178: PUSH
67179: LD_INT 3
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 2
67188: PUSH
67189: LD_INT 3
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: LIST
67200: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67201: LD_ADDR_VAR 0 20
67205: PUSH
67206: LD_INT 1
67208: PUSH
67209: LD_INT 3
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 0
67218: PUSH
67219: LD_INT 3
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 1
67228: NEG
67229: PUSH
67230: LD_INT 2
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: LIST
67241: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67242: LD_ADDR_VAR 0 21
67246: PUSH
67247: LD_INT 2
67249: NEG
67250: PUSH
67251: LD_INT 1
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 3
67260: NEG
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 3
67271: NEG
67272: PUSH
67273: LD_INT 1
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: LIST
67285: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67286: LD_ADDR_VAR 0 22
67290: PUSH
67291: LD_INT 2
67293: NEG
67294: PUSH
67295: LD_INT 3
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 3
67305: NEG
67306: PUSH
67307: LD_INT 2
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 3
67317: NEG
67318: PUSH
67319: LD_INT 3
67321: NEG
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: LIST
67331: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67332: LD_ADDR_VAR 0 23
67336: PUSH
67337: LD_INT 0
67339: PUSH
67340: LD_INT 3
67342: NEG
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: LD_INT 4
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 1
67362: PUSH
67363: LD_INT 3
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: LIST
67375: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67376: LD_ADDR_VAR 0 24
67380: PUSH
67381: LD_INT 3
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 3
67393: PUSH
67394: LD_INT 1
67396: NEG
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 4
67404: PUSH
67405: LD_INT 1
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: LIST
67416: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67417: LD_ADDR_VAR 0 25
67421: PUSH
67422: LD_INT 3
67424: PUSH
67425: LD_INT 3
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 4
67434: PUSH
67435: LD_INT 3
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 3
67444: PUSH
67445: LD_INT 4
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: LIST
67456: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67457: LD_ADDR_VAR 0 26
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: LD_INT 3
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 1
67474: PUSH
67475: LD_INT 4
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 1
67484: NEG
67485: PUSH
67486: LD_INT 3
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: LIST
67497: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67498: LD_ADDR_VAR 0 27
67502: PUSH
67503: LD_INT 3
67505: NEG
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 3
67516: NEG
67517: PUSH
67518: LD_INT 1
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 4
67527: NEG
67528: PUSH
67529: LD_INT 1
67531: NEG
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: LIST
67541: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67542: LD_ADDR_VAR 0 28
67546: PUSH
67547: LD_INT 3
67549: NEG
67550: PUSH
67551: LD_INT 3
67553: NEG
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 3
67561: NEG
67562: PUSH
67563: LD_INT 4
67565: NEG
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 4
67573: NEG
67574: PUSH
67575: LD_INT 3
67577: NEG
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: LIST
67587: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67588: LD_ADDR_VAR 0 29
67592: PUSH
67593: LD_INT 1
67595: NEG
67596: PUSH
67597: LD_INT 3
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 0
67607: PUSH
67608: LD_INT 3
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 1
67618: PUSH
67619: LD_INT 2
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 1
67629: NEG
67630: PUSH
67631: LD_INT 4
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 0
67641: PUSH
67642: LD_INT 4
67644: NEG
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 1
67652: PUSH
67653: LD_INT 3
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 1
67663: NEG
67664: PUSH
67665: LD_INT 5
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: LD_INT 5
67678: NEG
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 1
67686: PUSH
67687: LD_INT 4
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 1
67697: NEG
67698: PUSH
67699: LD_INT 6
67701: NEG
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 0
67709: PUSH
67710: LD_INT 6
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 1
67720: PUSH
67721: LD_INT 5
67723: NEG
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67743: LD_ADDR_VAR 0 30
67747: PUSH
67748: LD_INT 2
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 3
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 3
67771: PUSH
67772: LD_INT 1
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 3
67781: PUSH
67782: LD_INT 1
67784: NEG
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 4
67792: PUSH
67793: LD_INT 0
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 4
67802: PUSH
67803: LD_INT 1
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 4
67812: PUSH
67813: LD_INT 1
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 5
67823: PUSH
67824: LD_INT 0
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 5
67833: PUSH
67834: LD_INT 1
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 5
67843: PUSH
67844: LD_INT 1
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 6
67854: PUSH
67855: LD_INT 0
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 6
67864: PUSH
67865: LD_INT 1
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67886: LD_ADDR_VAR 0 31
67890: PUSH
67891: LD_INT 3
67893: PUSH
67894: LD_INT 2
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 3
67903: PUSH
67904: LD_INT 3
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 2
67913: PUSH
67914: LD_INT 3
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 4
67923: PUSH
67924: LD_INT 3
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 4
67933: PUSH
67934: LD_INT 4
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 3
67943: PUSH
67944: LD_INT 4
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 5
67953: PUSH
67954: LD_INT 4
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 5
67963: PUSH
67964: LD_INT 5
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 4
67973: PUSH
67974: LD_INT 5
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 6
67983: PUSH
67984: LD_INT 5
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 6
67993: PUSH
67994: LD_INT 6
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 5
68003: PUSH
68004: LD_INT 6
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68025: LD_ADDR_VAR 0 32
68029: PUSH
68030: LD_INT 1
68032: PUSH
68033: LD_INT 3
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: LD_INT 3
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 1
68052: NEG
68053: PUSH
68054: LD_INT 2
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 1
68063: PUSH
68064: LD_INT 4
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: LD_INT 4
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 1
68083: NEG
68084: PUSH
68085: LD_INT 3
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 1
68094: PUSH
68095: LD_INT 5
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: LD_INT 5
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: PUSH
68116: LD_INT 4
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 1
68125: PUSH
68126: LD_INT 6
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: LD_INT 6
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 1
68145: NEG
68146: PUSH
68147: LD_INT 5
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68168: LD_ADDR_VAR 0 33
68172: PUSH
68173: LD_INT 2
68175: NEG
68176: PUSH
68177: LD_INT 1
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 3
68186: NEG
68187: PUSH
68188: LD_INT 0
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 3
68197: NEG
68198: PUSH
68199: LD_INT 1
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 3
68209: NEG
68210: PUSH
68211: LD_INT 1
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 4
68220: NEG
68221: PUSH
68222: LD_INT 0
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 4
68231: NEG
68232: PUSH
68233: LD_INT 1
68235: NEG
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 4
68243: NEG
68244: PUSH
68245: LD_INT 1
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 5
68254: NEG
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 5
68265: NEG
68266: PUSH
68267: LD_INT 1
68269: NEG
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 5
68277: NEG
68278: PUSH
68279: LD_INT 1
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 6
68288: NEG
68289: PUSH
68290: LD_INT 0
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 6
68299: NEG
68300: PUSH
68301: LD_INT 1
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68323: LD_ADDR_VAR 0 34
68327: PUSH
68328: LD_INT 2
68330: NEG
68331: PUSH
68332: LD_INT 3
68334: NEG
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 3
68342: NEG
68343: PUSH
68344: LD_INT 2
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 3
68354: NEG
68355: PUSH
68356: LD_INT 3
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 3
68366: NEG
68367: PUSH
68368: LD_INT 4
68370: NEG
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 4
68378: NEG
68379: PUSH
68380: LD_INT 3
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 4
68390: NEG
68391: PUSH
68392: LD_INT 4
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 4
68402: NEG
68403: PUSH
68404: LD_INT 5
68406: NEG
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 5
68414: NEG
68415: PUSH
68416: LD_INT 4
68418: NEG
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 5
68426: NEG
68427: PUSH
68428: LD_INT 5
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 5
68438: NEG
68439: PUSH
68440: LD_INT 6
68442: NEG
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 6
68450: NEG
68451: PUSH
68452: LD_INT 5
68454: NEG
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 6
68462: NEG
68463: PUSH
68464: LD_INT 6
68466: NEG
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68486: LD_ADDR_VAR 0 41
68490: PUSH
68491: LD_INT 0
68493: PUSH
68494: LD_INT 2
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 1
68504: NEG
68505: PUSH
68506: LD_INT 3
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 1
68516: PUSH
68517: LD_INT 2
68519: NEG
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: LIST
68529: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68530: LD_ADDR_VAR 0 42
68534: PUSH
68535: LD_INT 2
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 2
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 3
68558: PUSH
68559: LD_INT 1
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: LIST
68570: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68571: LD_ADDR_VAR 0 43
68575: PUSH
68576: LD_INT 2
68578: PUSH
68579: LD_INT 2
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 3
68588: PUSH
68589: LD_INT 2
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 2
68598: PUSH
68599: LD_INT 3
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: LIST
68610: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68611: LD_ADDR_VAR 0 44
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: LD_INT 2
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 1
68628: PUSH
68629: LD_INT 3
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 1
68638: NEG
68639: PUSH
68640: LD_INT 2
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: LIST
68651: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68652: LD_ADDR_VAR 0 45
68656: PUSH
68657: LD_INT 2
68659: NEG
68660: PUSH
68661: LD_INT 0
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 2
68670: NEG
68671: PUSH
68672: LD_INT 1
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 3
68681: NEG
68682: PUSH
68683: LD_INT 1
68685: NEG
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: LIST
68695: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68696: LD_ADDR_VAR 0 46
68700: PUSH
68701: LD_INT 2
68703: NEG
68704: PUSH
68705: LD_INT 2
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 2
68715: NEG
68716: PUSH
68717: LD_INT 3
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 3
68727: NEG
68728: PUSH
68729: LD_INT 2
68731: NEG
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: LIST
68741: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68742: LD_ADDR_VAR 0 47
68746: PUSH
68747: LD_INT 2
68749: NEG
68750: PUSH
68751: LD_INT 3
68753: NEG
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 1
68761: NEG
68762: PUSH
68763: LD_INT 3
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68775: LD_ADDR_VAR 0 48
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: LD_INT 2
68785: NEG
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 2
68793: PUSH
68794: LD_INT 1
68796: NEG
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68806: LD_ADDR_VAR 0 49
68810: PUSH
68811: LD_INT 3
68813: PUSH
68814: LD_INT 1
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 3
68823: PUSH
68824: LD_INT 2
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68835: LD_ADDR_VAR 0 50
68839: PUSH
68840: LD_INT 2
68842: PUSH
68843: LD_INT 3
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 1
68852: PUSH
68853: LD_INT 3
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68864: LD_ADDR_VAR 0 51
68868: PUSH
68869: LD_INT 1
68871: NEG
68872: PUSH
68873: LD_INT 2
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 2
68882: NEG
68883: PUSH
68884: LD_INT 1
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68895: LD_ADDR_VAR 0 52
68899: PUSH
68900: LD_INT 3
68902: NEG
68903: PUSH
68904: LD_INT 1
68906: NEG
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 3
68914: NEG
68915: PUSH
68916: LD_INT 2
68918: NEG
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68928: LD_ADDR_VAR 0 53
68932: PUSH
68933: LD_INT 1
68935: NEG
68936: PUSH
68937: LD_INT 3
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: LD_INT 3
68950: NEG
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 1
68958: PUSH
68959: LD_INT 2
68961: NEG
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: LIST
68971: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68972: LD_ADDR_VAR 0 54
68976: PUSH
68977: LD_INT 2
68979: PUSH
68980: LD_INT 1
68982: NEG
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 3
68990: PUSH
68991: LD_INT 0
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 3
69000: PUSH
69001: LD_INT 1
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: LIST
69012: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69013: LD_ADDR_VAR 0 55
69017: PUSH
69018: LD_INT 3
69020: PUSH
69021: LD_INT 2
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: PUSH
69031: LD_INT 3
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 2
69040: PUSH
69041: LD_INT 3
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: LIST
69052: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69053: LD_ADDR_VAR 0 56
69057: PUSH
69058: LD_INT 1
69060: PUSH
69061: LD_INT 3
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 0
69070: PUSH
69071: LD_INT 3
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 1
69080: NEG
69081: PUSH
69082: LD_INT 2
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: LIST
69093: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69094: LD_ADDR_VAR 0 57
69098: PUSH
69099: LD_INT 2
69101: NEG
69102: PUSH
69103: LD_INT 1
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 3
69112: NEG
69113: PUSH
69114: LD_INT 0
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 3
69123: NEG
69124: PUSH
69125: LD_INT 1
69127: NEG
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: LIST
69137: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69138: LD_ADDR_VAR 0 58
69142: PUSH
69143: LD_INT 2
69145: NEG
69146: PUSH
69147: LD_INT 3
69149: NEG
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 3
69157: NEG
69158: PUSH
69159: LD_INT 2
69161: NEG
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 3
69169: NEG
69170: PUSH
69171: LD_INT 3
69173: NEG
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: LIST
69183: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69184: LD_ADDR_VAR 0 59
69188: PUSH
69189: LD_INT 1
69191: NEG
69192: PUSH
69193: LD_INT 2
69195: NEG
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: LD_INT 2
69206: NEG
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 1
69214: PUSH
69215: LD_INT 1
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: LIST
69227: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69228: LD_ADDR_VAR 0 60
69232: PUSH
69233: LD_INT 1
69235: PUSH
69236: LD_INT 1
69238: NEG
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 2
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 2
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: LIST
69268: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69269: LD_ADDR_VAR 0 61
69273: PUSH
69274: LD_INT 2
69276: PUSH
69277: LD_INT 1
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 2
69286: PUSH
69287: LD_INT 2
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 1
69296: PUSH
69297: LD_INT 2
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: LIST
69308: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69309: LD_ADDR_VAR 0 62
69313: PUSH
69314: LD_INT 1
69316: PUSH
69317: LD_INT 2
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 0
69326: PUSH
69327: LD_INT 2
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 1
69336: NEG
69337: PUSH
69338: LD_INT 1
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: LIST
69349: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69350: LD_ADDR_VAR 0 63
69354: PUSH
69355: LD_INT 1
69357: NEG
69358: PUSH
69359: LD_INT 1
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 2
69368: NEG
69369: PUSH
69370: LD_INT 0
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 2
69379: NEG
69380: PUSH
69381: LD_INT 1
69383: NEG
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: LIST
69393: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69394: LD_ADDR_VAR 0 64
69398: PUSH
69399: LD_INT 1
69401: NEG
69402: PUSH
69403: LD_INT 2
69405: NEG
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 2
69413: NEG
69414: PUSH
69415: LD_INT 1
69417: NEG
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 2
69425: NEG
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: LIST
69439: ST_TO_ADDR
// end ; 2 :
69440: GO 72706
69442: LD_INT 2
69444: DOUBLE
69445: EQUAL
69446: IFTRUE 69450
69448: GO 72705
69450: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69451: LD_ADDR_VAR 0 29
69455: PUSH
69456: LD_INT 4
69458: PUSH
69459: LD_INT 0
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 4
69468: PUSH
69469: LD_INT 1
69471: NEG
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 5
69479: PUSH
69480: LD_INT 0
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 5
69489: PUSH
69490: LD_INT 1
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 4
69499: PUSH
69500: LD_INT 1
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 3
69509: PUSH
69510: LD_INT 0
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 3
69519: PUSH
69520: LD_INT 1
69522: NEG
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 3
69530: PUSH
69531: LD_INT 2
69533: NEG
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 5
69541: PUSH
69542: LD_INT 2
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 3
69551: PUSH
69552: LD_INT 3
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 3
69561: PUSH
69562: LD_INT 2
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 4
69571: PUSH
69572: LD_INT 3
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 4
69581: PUSH
69582: LD_INT 4
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 3
69591: PUSH
69592: LD_INT 4
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 2
69601: PUSH
69602: LD_INT 3
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 2
69611: PUSH
69612: LD_INT 2
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 4
69621: PUSH
69622: LD_INT 2
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 2
69631: PUSH
69632: LD_INT 4
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 0
69641: PUSH
69642: LD_INT 4
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 0
69651: PUSH
69652: LD_INT 3
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 1
69661: PUSH
69662: LD_INT 4
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 1
69671: PUSH
69672: LD_INT 5
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 0
69681: PUSH
69682: LD_INT 5
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 1
69691: NEG
69692: PUSH
69693: LD_INT 4
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 1
69702: NEG
69703: PUSH
69704: LD_INT 3
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 2
69713: PUSH
69714: LD_INT 5
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 2
69723: NEG
69724: PUSH
69725: LD_INT 3
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 3
69734: NEG
69735: PUSH
69736: LD_INT 0
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 3
69745: NEG
69746: PUSH
69747: LD_INT 1
69749: NEG
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 2
69757: NEG
69758: PUSH
69759: LD_INT 0
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 2
69768: NEG
69769: PUSH
69770: LD_INT 1
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 3
69779: NEG
69780: PUSH
69781: LD_INT 1
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 4
69790: NEG
69791: PUSH
69792: LD_INT 0
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 4
69801: NEG
69802: PUSH
69803: LD_INT 1
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 4
69813: NEG
69814: PUSH
69815: LD_INT 2
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 2
69825: NEG
69826: PUSH
69827: LD_INT 2
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 4
69836: NEG
69837: PUSH
69838: LD_INT 4
69840: NEG
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 4
69848: NEG
69849: PUSH
69850: LD_INT 5
69852: NEG
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 3
69860: NEG
69861: PUSH
69862: LD_INT 4
69864: NEG
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 3
69872: NEG
69873: PUSH
69874: LD_INT 3
69876: NEG
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 4
69884: NEG
69885: PUSH
69886: LD_INT 3
69888: NEG
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 5
69896: NEG
69897: PUSH
69898: LD_INT 4
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 5
69908: NEG
69909: PUSH
69910: LD_INT 5
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 3
69920: NEG
69921: PUSH
69922: LD_INT 5
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 5
69932: NEG
69933: PUSH
69934: LD_INT 3
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69989: LD_ADDR_VAR 0 30
69993: PUSH
69994: LD_INT 4
69996: PUSH
69997: LD_INT 4
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 4
70006: PUSH
70007: LD_INT 3
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 5
70016: PUSH
70017: LD_INT 4
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 5
70026: PUSH
70027: LD_INT 5
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 4
70036: PUSH
70037: LD_INT 5
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 3
70046: PUSH
70047: LD_INT 4
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 3
70056: PUSH
70057: LD_INT 3
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 5
70066: PUSH
70067: LD_INT 3
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 3
70076: PUSH
70077: LD_INT 5
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 0
70086: PUSH
70087: LD_INT 3
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 0
70096: PUSH
70097: LD_INT 2
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 1
70106: PUSH
70107: LD_INT 3
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 1
70116: PUSH
70117: LD_INT 4
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 0
70126: PUSH
70127: LD_INT 4
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 1
70136: NEG
70137: PUSH
70138: LD_INT 3
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 1
70147: NEG
70148: PUSH
70149: LD_INT 2
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 2
70158: PUSH
70159: LD_INT 4
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 2
70168: NEG
70169: PUSH
70170: LD_INT 2
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 4
70179: NEG
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 4
70190: NEG
70191: PUSH
70192: LD_INT 1
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 3
70202: NEG
70203: PUSH
70204: LD_INT 0
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 3
70213: NEG
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 4
70224: NEG
70225: PUSH
70226: LD_INT 1
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 5
70235: NEG
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 5
70246: NEG
70247: PUSH
70248: LD_INT 1
70250: NEG
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 5
70258: NEG
70259: PUSH
70260: LD_INT 2
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 3
70270: NEG
70271: PUSH
70272: LD_INT 2
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 3
70281: NEG
70282: PUSH
70283: LD_INT 3
70285: NEG
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 3
70293: NEG
70294: PUSH
70295: LD_INT 4
70297: NEG
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 2
70305: NEG
70306: PUSH
70307: LD_INT 3
70309: NEG
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 2
70317: NEG
70318: PUSH
70319: LD_INT 2
70321: NEG
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 3
70329: NEG
70330: PUSH
70331: LD_INT 2
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 4
70341: NEG
70342: PUSH
70343: LD_INT 3
70345: NEG
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 4
70353: NEG
70354: PUSH
70355: LD_INT 4
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 2
70365: NEG
70366: PUSH
70367: LD_INT 4
70369: NEG
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 4
70377: NEG
70378: PUSH
70379: LD_INT 2
70381: NEG
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 0
70389: PUSH
70390: LD_INT 4
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 0
70400: PUSH
70401: LD_INT 5
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 1
70411: PUSH
70412: LD_INT 4
70414: NEG
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 1
70422: PUSH
70423: LD_INT 3
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 0
70433: PUSH
70434: LD_INT 3
70436: NEG
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 1
70444: NEG
70445: PUSH
70446: LD_INT 4
70448: NEG
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 1
70456: NEG
70457: PUSH
70458: LD_INT 5
70460: NEG
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 2
70468: PUSH
70469: LD_INT 3
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 2
70479: NEG
70480: PUSH
70481: LD_INT 5
70483: NEG
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70536: LD_ADDR_VAR 0 31
70540: PUSH
70541: LD_INT 0
70543: PUSH
70544: LD_INT 4
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: LD_INT 3
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 1
70563: PUSH
70564: LD_INT 4
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 1
70573: PUSH
70574: LD_INT 5
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 0
70583: PUSH
70584: LD_INT 5
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 1
70593: NEG
70594: PUSH
70595: LD_INT 4
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 1
70604: NEG
70605: PUSH
70606: LD_INT 3
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 2
70615: PUSH
70616: LD_INT 5
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 2
70625: NEG
70626: PUSH
70627: LD_INT 3
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 3
70636: NEG
70637: PUSH
70638: LD_INT 0
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 3
70647: NEG
70648: PUSH
70649: LD_INT 1
70651: NEG
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 2
70659: NEG
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 2
70670: NEG
70671: PUSH
70672: LD_INT 1
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 3
70681: NEG
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 4
70692: NEG
70693: PUSH
70694: LD_INT 0
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 4
70703: NEG
70704: PUSH
70705: LD_INT 1
70707: NEG
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 4
70715: NEG
70716: PUSH
70717: LD_INT 2
70719: NEG
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 2
70727: NEG
70728: PUSH
70729: LD_INT 2
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 4
70738: NEG
70739: PUSH
70740: LD_INT 4
70742: NEG
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 4
70750: NEG
70751: PUSH
70752: LD_INT 5
70754: NEG
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 3
70762: NEG
70763: PUSH
70764: LD_INT 4
70766: NEG
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 3
70774: NEG
70775: PUSH
70776: LD_INT 3
70778: NEG
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 4
70786: NEG
70787: PUSH
70788: LD_INT 3
70790: NEG
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 5
70798: NEG
70799: PUSH
70800: LD_INT 4
70802: NEG
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 5
70810: NEG
70811: PUSH
70812: LD_INT 5
70814: NEG
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 3
70822: NEG
70823: PUSH
70824: LD_INT 5
70826: NEG
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 5
70834: NEG
70835: PUSH
70836: LD_INT 3
70838: NEG
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: LD_INT 3
70849: NEG
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: LD_INT 4
70860: NEG
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 1
70868: PUSH
70869: LD_INT 3
70871: NEG
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 1
70879: PUSH
70880: LD_INT 2
70882: NEG
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 0
70890: PUSH
70891: LD_INT 2
70893: NEG
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 1
70901: NEG
70902: PUSH
70903: LD_INT 3
70905: NEG
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 1
70913: NEG
70914: PUSH
70915: LD_INT 4
70917: NEG
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 2
70925: PUSH
70926: LD_INT 2
70928: NEG
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 2
70936: NEG
70937: PUSH
70938: LD_INT 4
70940: NEG
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 4
70948: PUSH
70949: LD_INT 0
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 4
70958: PUSH
70959: LD_INT 1
70961: NEG
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 5
70969: PUSH
70970: LD_INT 0
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 5
70979: PUSH
70980: LD_INT 1
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 4
70989: PUSH
70990: LD_INT 1
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 3
70999: PUSH
71000: LD_INT 0
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 3
71009: PUSH
71010: LD_INT 1
71012: NEG
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 3
71020: PUSH
71021: LD_INT 2
71023: NEG
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 5
71031: PUSH
71032: LD_INT 2
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71086: LD_ADDR_VAR 0 32
71090: PUSH
71091: LD_INT 4
71093: NEG
71094: PUSH
71095: LD_INT 0
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 4
71104: NEG
71105: PUSH
71106: LD_INT 1
71108: NEG
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 3
71116: NEG
71117: PUSH
71118: LD_INT 0
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 3
71127: NEG
71128: PUSH
71129: LD_INT 1
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 4
71138: NEG
71139: PUSH
71140: LD_INT 1
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 5
71149: NEG
71150: PUSH
71151: LD_INT 0
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 5
71160: NEG
71161: PUSH
71162: LD_INT 1
71164: NEG
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 5
71172: NEG
71173: PUSH
71174: LD_INT 2
71176: NEG
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 3
71184: NEG
71185: PUSH
71186: LD_INT 2
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 3
71195: NEG
71196: PUSH
71197: LD_INT 3
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 3
71207: NEG
71208: PUSH
71209: LD_INT 4
71211: NEG
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 2
71219: NEG
71220: PUSH
71221: LD_INT 3
71223: NEG
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 2
71231: NEG
71232: PUSH
71233: LD_INT 2
71235: NEG
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 3
71243: NEG
71244: PUSH
71245: LD_INT 2
71247: NEG
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 4
71255: NEG
71256: PUSH
71257: LD_INT 3
71259: NEG
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 4
71267: NEG
71268: PUSH
71269: LD_INT 4
71271: NEG
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 2
71279: NEG
71280: PUSH
71281: LD_INT 4
71283: NEG
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 4
71291: NEG
71292: PUSH
71293: LD_INT 2
71295: NEG
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 0
71303: PUSH
71304: LD_INT 4
71306: NEG
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 0
71314: PUSH
71315: LD_INT 5
71317: NEG
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 1
71325: PUSH
71326: LD_INT 4
71328: NEG
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 1
71336: PUSH
71337: LD_INT 3
71339: NEG
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 0
71347: PUSH
71348: LD_INT 3
71350: NEG
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 1
71358: NEG
71359: PUSH
71360: LD_INT 4
71362: NEG
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 1
71370: NEG
71371: PUSH
71372: LD_INT 5
71374: NEG
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 2
71382: PUSH
71383: LD_INT 3
71385: NEG
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 2
71393: NEG
71394: PUSH
71395: LD_INT 5
71397: NEG
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: LD_INT 3
71405: PUSH
71406: LD_INT 0
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 3
71415: PUSH
71416: LD_INT 1
71418: NEG
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 4
71426: PUSH
71427: LD_INT 0
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 4
71436: PUSH
71437: LD_INT 1
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 3
71446: PUSH
71447: LD_INT 1
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 2
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 2
71466: PUSH
71467: LD_INT 1
71469: NEG
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 2
71477: PUSH
71478: LD_INT 2
71480: NEG
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 4
71488: PUSH
71489: LD_INT 2
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 4
71498: PUSH
71499: LD_INT 4
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 4
71508: PUSH
71509: LD_INT 3
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 5
71518: PUSH
71519: LD_INT 4
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: PUSH
71526: LD_INT 5
71528: PUSH
71529: LD_INT 5
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 4
71538: PUSH
71539: LD_INT 5
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 3
71548: PUSH
71549: LD_INT 4
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 3
71558: PUSH
71559: LD_INT 3
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: LD_INT 5
71568: PUSH
71569: LD_INT 3
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 3
71578: PUSH
71579: LD_INT 5
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71633: LD_ADDR_VAR 0 33
71637: PUSH
71638: LD_INT 4
71640: NEG
71641: PUSH
71642: LD_INT 4
71644: NEG
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 4
71652: NEG
71653: PUSH
71654: LD_INT 5
71656: NEG
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: PUSH
71662: LD_INT 3
71664: NEG
71665: PUSH
71666: LD_INT 4
71668: NEG
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 3
71676: NEG
71677: PUSH
71678: LD_INT 3
71680: NEG
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 4
71688: NEG
71689: PUSH
71690: LD_INT 3
71692: NEG
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 5
71700: NEG
71701: PUSH
71702: LD_INT 4
71704: NEG
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 5
71712: NEG
71713: PUSH
71714: LD_INT 5
71716: NEG
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 3
71724: NEG
71725: PUSH
71726: LD_INT 5
71728: NEG
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 5
71736: NEG
71737: PUSH
71738: LD_INT 3
71740: NEG
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 0
71748: PUSH
71749: LD_INT 3
71751: NEG
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 0
71759: PUSH
71760: LD_INT 4
71762: NEG
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 1
71770: PUSH
71771: LD_INT 3
71773: NEG
71774: PUSH
71775: EMPTY
71776: LIST
71777: LIST
71778: PUSH
71779: LD_INT 1
71781: PUSH
71782: LD_INT 2
71784: NEG
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 0
71792: PUSH
71793: LD_INT 2
71795: NEG
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 1
71803: NEG
71804: PUSH
71805: LD_INT 3
71807: NEG
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 1
71815: NEG
71816: PUSH
71817: LD_INT 4
71819: NEG
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 2
71827: PUSH
71828: LD_INT 2
71830: NEG
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 2
71838: NEG
71839: PUSH
71840: LD_INT 4
71842: NEG
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PUSH
71848: LD_INT 4
71850: PUSH
71851: LD_INT 0
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 4
71860: PUSH
71861: LD_INT 1
71863: NEG
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 5
71871: PUSH
71872: LD_INT 0
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 5
71881: PUSH
71882: LD_INT 1
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 4
71891: PUSH
71892: LD_INT 1
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PUSH
71899: LD_INT 3
71901: PUSH
71902: LD_INT 0
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 3
71911: PUSH
71912: LD_INT 1
71914: NEG
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_INT 3
71922: PUSH
71923: LD_INT 2
71925: NEG
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 5
71933: PUSH
71934: LD_INT 2
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: LD_INT 3
71943: PUSH
71944: LD_INT 3
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: PUSH
71951: LD_INT 3
71953: PUSH
71954: LD_INT 2
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 4
71963: PUSH
71964: LD_INT 3
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: PUSH
71971: LD_INT 4
71973: PUSH
71974: LD_INT 4
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 3
71983: PUSH
71984: LD_INT 4
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 2
71993: PUSH
71994: LD_INT 3
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 2
72003: PUSH
72004: LD_INT 2
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 4
72013: PUSH
72014: LD_INT 2
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 2
72023: PUSH
72024: LD_INT 4
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 0
72033: PUSH
72034: LD_INT 4
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 0
72043: PUSH
72044: LD_INT 3
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 1
72053: PUSH
72054: LD_INT 4
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 1
72063: PUSH
72064: LD_INT 5
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PUSH
72071: LD_INT 0
72073: PUSH
72074: LD_INT 5
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 1
72083: NEG
72084: PUSH
72085: LD_INT 4
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 1
72094: NEG
72095: PUSH
72096: LD_INT 3
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: LD_INT 2
72105: PUSH
72106: LD_INT 5
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 2
72115: NEG
72116: PUSH
72117: LD_INT 3
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72171: LD_ADDR_VAR 0 34
72175: PUSH
72176: LD_INT 0
72178: PUSH
72179: LD_INT 4
72181: NEG
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 0
72189: PUSH
72190: LD_INT 5
72192: NEG
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 1
72200: PUSH
72201: LD_INT 4
72203: NEG
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 1
72211: PUSH
72212: LD_INT 3
72214: NEG
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 0
72222: PUSH
72223: LD_INT 3
72225: NEG
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 1
72233: NEG
72234: PUSH
72235: LD_INT 4
72237: NEG
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 1
72245: NEG
72246: PUSH
72247: LD_INT 5
72249: NEG
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 2
72257: PUSH
72258: LD_INT 3
72260: NEG
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 2
72268: NEG
72269: PUSH
72270: LD_INT 5
72272: NEG
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 3
72280: PUSH
72281: LD_INT 0
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 3
72290: PUSH
72291: LD_INT 1
72293: NEG
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 4
72301: PUSH
72302: LD_INT 0
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 4
72311: PUSH
72312: LD_INT 1
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 3
72321: PUSH
72322: LD_INT 1
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: LD_INT 2
72331: PUSH
72332: LD_INT 0
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 2
72341: PUSH
72342: LD_INT 1
72344: NEG
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 2
72352: PUSH
72353: LD_INT 2
72355: NEG
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 4
72363: PUSH
72364: LD_INT 2
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PUSH
72371: LD_INT 4
72373: PUSH
72374: LD_INT 4
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: PUSH
72381: LD_INT 4
72383: PUSH
72384: LD_INT 3
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 5
72393: PUSH
72394: LD_INT 4
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 5
72403: PUSH
72404: LD_INT 5
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 4
72413: PUSH
72414: LD_INT 5
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 3
72423: PUSH
72424: LD_INT 4
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 3
72433: PUSH
72434: LD_INT 3
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 5
72443: PUSH
72444: LD_INT 3
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_INT 3
72453: PUSH
72454: LD_INT 5
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 0
72463: PUSH
72464: LD_INT 3
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 0
72473: PUSH
72474: LD_INT 2
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 1
72483: PUSH
72484: LD_INT 3
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 1
72493: PUSH
72494: LD_INT 4
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: LD_INT 0
72503: PUSH
72504: LD_INT 4
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PUSH
72511: LD_INT 1
72513: NEG
72514: PUSH
72515: LD_INT 3
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 1
72524: NEG
72525: PUSH
72526: LD_INT 2
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: LD_INT 2
72535: PUSH
72536: LD_INT 4
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 2
72545: NEG
72546: PUSH
72547: LD_INT 2
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 4
72556: NEG
72557: PUSH
72558: LD_INT 0
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 4
72567: NEG
72568: PUSH
72569: LD_INT 1
72571: NEG
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 3
72579: NEG
72580: PUSH
72581: LD_INT 0
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 3
72590: NEG
72591: PUSH
72592: LD_INT 1
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: LD_INT 4
72601: NEG
72602: PUSH
72603: LD_INT 1
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 5
72612: NEG
72613: PUSH
72614: LD_INT 0
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: LD_INT 5
72623: NEG
72624: PUSH
72625: LD_INT 1
72627: NEG
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 5
72635: NEG
72636: PUSH
72637: LD_INT 2
72639: NEG
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 3
72647: NEG
72648: PUSH
72649: LD_INT 2
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: ST_TO_ADDR
// end ; end ;
72703: GO 72706
72705: POP
// case btype of b_depot , b_warehouse :
72706: LD_VAR 0 1
72710: PUSH
72711: LD_INT 0
72713: DOUBLE
72714: EQUAL
72715: IFTRUE 72725
72717: LD_INT 1
72719: DOUBLE
72720: EQUAL
72721: IFTRUE 72725
72723: GO 72926
72725: POP
// case nation of nation_american :
72726: LD_VAR 0 5
72730: PUSH
72731: LD_INT 1
72733: DOUBLE
72734: EQUAL
72735: IFTRUE 72739
72737: GO 72795
72739: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72740: LD_ADDR_VAR 0 9
72744: PUSH
72745: LD_VAR 0 11
72749: PUSH
72750: LD_VAR 0 12
72754: PUSH
72755: LD_VAR 0 13
72759: PUSH
72760: LD_VAR 0 14
72764: PUSH
72765: LD_VAR 0 15
72769: PUSH
72770: LD_VAR 0 16
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: PUSH
72783: LD_VAR 0 4
72787: PUSH
72788: LD_INT 1
72790: PLUS
72791: ARRAY
72792: ST_TO_ADDR
72793: GO 72924
72795: LD_INT 2
72797: DOUBLE
72798: EQUAL
72799: IFTRUE 72803
72801: GO 72859
72803: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72804: LD_ADDR_VAR 0 9
72808: PUSH
72809: LD_VAR 0 17
72813: PUSH
72814: LD_VAR 0 18
72818: PUSH
72819: LD_VAR 0 19
72823: PUSH
72824: LD_VAR 0 20
72828: PUSH
72829: LD_VAR 0 21
72833: PUSH
72834: LD_VAR 0 22
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: PUSH
72847: LD_VAR 0 4
72851: PUSH
72852: LD_INT 1
72854: PLUS
72855: ARRAY
72856: ST_TO_ADDR
72857: GO 72924
72859: LD_INT 3
72861: DOUBLE
72862: EQUAL
72863: IFTRUE 72867
72865: GO 72923
72867: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72868: LD_ADDR_VAR 0 9
72872: PUSH
72873: LD_VAR 0 23
72877: PUSH
72878: LD_VAR 0 24
72882: PUSH
72883: LD_VAR 0 25
72887: PUSH
72888: LD_VAR 0 26
72892: PUSH
72893: LD_VAR 0 27
72897: PUSH
72898: LD_VAR 0 28
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: PUSH
72911: LD_VAR 0 4
72915: PUSH
72916: LD_INT 1
72918: PLUS
72919: ARRAY
72920: ST_TO_ADDR
72921: GO 72924
72923: POP
72924: GO 73479
72926: LD_INT 2
72928: DOUBLE
72929: EQUAL
72930: IFTRUE 72940
72932: LD_INT 3
72934: DOUBLE
72935: EQUAL
72936: IFTRUE 72940
72938: GO 72996
72940: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72941: LD_ADDR_VAR 0 9
72945: PUSH
72946: LD_VAR 0 29
72950: PUSH
72951: LD_VAR 0 30
72955: PUSH
72956: LD_VAR 0 31
72960: PUSH
72961: LD_VAR 0 32
72965: PUSH
72966: LD_VAR 0 33
72970: PUSH
72971: LD_VAR 0 34
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: PUSH
72984: LD_VAR 0 4
72988: PUSH
72989: LD_INT 1
72991: PLUS
72992: ARRAY
72993: ST_TO_ADDR
72994: GO 73479
72996: LD_INT 16
72998: DOUBLE
72999: EQUAL
73000: IFTRUE 73058
73002: LD_INT 17
73004: DOUBLE
73005: EQUAL
73006: IFTRUE 73058
73008: LD_INT 18
73010: DOUBLE
73011: EQUAL
73012: IFTRUE 73058
73014: LD_INT 19
73016: DOUBLE
73017: EQUAL
73018: IFTRUE 73058
73020: LD_INT 22
73022: DOUBLE
73023: EQUAL
73024: IFTRUE 73058
73026: LD_INT 20
73028: DOUBLE
73029: EQUAL
73030: IFTRUE 73058
73032: LD_INT 21
73034: DOUBLE
73035: EQUAL
73036: IFTRUE 73058
73038: LD_INT 23
73040: DOUBLE
73041: EQUAL
73042: IFTRUE 73058
73044: LD_INT 24
73046: DOUBLE
73047: EQUAL
73048: IFTRUE 73058
73050: LD_INT 25
73052: DOUBLE
73053: EQUAL
73054: IFTRUE 73058
73056: GO 73114
73058: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73059: LD_ADDR_VAR 0 9
73063: PUSH
73064: LD_VAR 0 35
73068: PUSH
73069: LD_VAR 0 36
73073: PUSH
73074: LD_VAR 0 37
73078: PUSH
73079: LD_VAR 0 38
73083: PUSH
73084: LD_VAR 0 39
73088: PUSH
73089: LD_VAR 0 40
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: PUSH
73102: LD_VAR 0 4
73106: PUSH
73107: LD_INT 1
73109: PLUS
73110: ARRAY
73111: ST_TO_ADDR
73112: GO 73479
73114: LD_INT 6
73116: DOUBLE
73117: EQUAL
73118: IFTRUE 73170
73120: LD_INT 7
73122: DOUBLE
73123: EQUAL
73124: IFTRUE 73170
73126: LD_INT 8
73128: DOUBLE
73129: EQUAL
73130: IFTRUE 73170
73132: LD_INT 13
73134: DOUBLE
73135: EQUAL
73136: IFTRUE 73170
73138: LD_INT 12
73140: DOUBLE
73141: EQUAL
73142: IFTRUE 73170
73144: LD_INT 15
73146: DOUBLE
73147: EQUAL
73148: IFTRUE 73170
73150: LD_INT 11
73152: DOUBLE
73153: EQUAL
73154: IFTRUE 73170
73156: LD_INT 14
73158: DOUBLE
73159: EQUAL
73160: IFTRUE 73170
73162: LD_INT 10
73164: DOUBLE
73165: EQUAL
73166: IFTRUE 73170
73168: GO 73226
73170: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73171: LD_ADDR_VAR 0 9
73175: PUSH
73176: LD_VAR 0 41
73180: PUSH
73181: LD_VAR 0 42
73185: PUSH
73186: LD_VAR 0 43
73190: PUSH
73191: LD_VAR 0 44
73195: PUSH
73196: LD_VAR 0 45
73200: PUSH
73201: LD_VAR 0 46
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: PUSH
73214: LD_VAR 0 4
73218: PUSH
73219: LD_INT 1
73221: PLUS
73222: ARRAY
73223: ST_TO_ADDR
73224: GO 73479
73226: LD_INT 36
73228: DOUBLE
73229: EQUAL
73230: IFTRUE 73234
73232: GO 73290
73234: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73235: LD_ADDR_VAR 0 9
73239: PUSH
73240: LD_VAR 0 47
73244: PUSH
73245: LD_VAR 0 48
73249: PUSH
73250: LD_VAR 0 49
73254: PUSH
73255: LD_VAR 0 50
73259: PUSH
73260: LD_VAR 0 51
73264: PUSH
73265: LD_VAR 0 52
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: PUSH
73278: LD_VAR 0 4
73282: PUSH
73283: LD_INT 1
73285: PLUS
73286: ARRAY
73287: ST_TO_ADDR
73288: GO 73479
73290: LD_INT 4
73292: DOUBLE
73293: EQUAL
73294: IFTRUE 73316
73296: LD_INT 5
73298: DOUBLE
73299: EQUAL
73300: IFTRUE 73316
73302: LD_INT 34
73304: DOUBLE
73305: EQUAL
73306: IFTRUE 73316
73308: LD_INT 37
73310: DOUBLE
73311: EQUAL
73312: IFTRUE 73316
73314: GO 73372
73316: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73317: LD_ADDR_VAR 0 9
73321: PUSH
73322: LD_VAR 0 53
73326: PUSH
73327: LD_VAR 0 54
73331: PUSH
73332: LD_VAR 0 55
73336: PUSH
73337: LD_VAR 0 56
73341: PUSH
73342: LD_VAR 0 57
73346: PUSH
73347: LD_VAR 0 58
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: PUSH
73360: LD_VAR 0 4
73364: PUSH
73365: LD_INT 1
73367: PLUS
73368: ARRAY
73369: ST_TO_ADDR
73370: GO 73479
73372: LD_INT 31
73374: DOUBLE
73375: EQUAL
73376: IFTRUE 73422
73378: LD_INT 32
73380: DOUBLE
73381: EQUAL
73382: IFTRUE 73422
73384: LD_INT 33
73386: DOUBLE
73387: EQUAL
73388: IFTRUE 73422
73390: LD_INT 27
73392: DOUBLE
73393: EQUAL
73394: IFTRUE 73422
73396: LD_INT 26
73398: DOUBLE
73399: EQUAL
73400: IFTRUE 73422
73402: LD_INT 28
73404: DOUBLE
73405: EQUAL
73406: IFTRUE 73422
73408: LD_INT 29
73410: DOUBLE
73411: EQUAL
73412: IFTRUE 73422
73414: LD_INT 30
73416: DOUBLE
73417: EQUAL
73418: IFTRUE 73422
73420: GO 73478
73422: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73423: LD_ADDR_VAR 0 9
73427: PUSH
73428: LD_VAR 0 59
73432: PUSH
73433: LD_VAR 0 60
73437: PUSH
73438: LD_VAR 0 61
73442: PUSH
73443: LD_VAR 0 62
73447: PUSH
73448: LD_VAR 0 63
73452: PUSH
73453: LD_VAR 0 64
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: PUSH
73466: LD_VAR 0 4
73470: PUSH
73471: LD_INT 1
73473: PLUS
73474: ARRAY
73475: ST_TO_ADDR
73476: GO 73479
73478: POP
// temp_list2 = [ ] ;
73479: LD_ADDR_VAR 0 10
73483: PUSH
73484: EMPTY
73485: ST_TO_ADDR
// for i in temp_list do
73486: LD_ADDR_VAR 0 8
73490: PUSH
73491: LD_VAR 0 9
73495: PUSH
73496: FOR_IN
73497: IFFALSE 73549
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73499: LD_ADDR_VAR 0 10
73503: PUSH
73504: LD_VAR 0 10
73508: PUSH
73509: LD_VAR 0 8
73513: PUSH
73514: LD_INT 1
73516: ARRAY
73517: PUSH
73518: LD_VAR 0 2
73522: PLUS
73523: PUSH
73524: LD_VAR 0 8
73528: PUSH
73529: LD_INT 2
73531: ARRAY
73532: PUSH
73533: LD_VAR 0 3
73537: PLUS
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: PUSH
73543: EMPTY
73544: LIST
73545: ADD
73546: ST_TO_ADDR
73547: GO 73496
73549: POP
73550: POP
// result = temp_list2 ;
73551: LD_ADDR_VAR 0 7
73555: PUSH
73556: LD_VAR 0 10
73560: ST_TO_ADDR
// end ;
73561: LD_VAR 0 7
73565: RET
// export function EnemyInRange ( unit , dist ) ; begin
73566: LD_INT 0
73568: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73569: LD_ADDR_VAR 0 3
73573: PUSH
73574: LD_VAR 0 1
73578: PPUSH
73579: CALL_OW 255
73583: PPUSH
73584: LD_VAR 0 1
73588: PPUSH
73589: CALL_OW 250
73593: PPUSH
73594: LD_VAR 0 1
73598: PPUSH
73599: CALL_OW 251
73603: PPUSH
73604: LD_VAR 0 2
73608: PPUSH
73609: CALL 46939 0 4
73613: PUSH
73614: LD_INT 4
73616: ARRAY
73617: ST_TO_ADDR
// end ;
73618: LD_VAR 0 3
73622: RET
// export function PlayerSeeMe ( unit ) ; begin
73623: LD_INT 0
73625: PPUSH
// result := See ( your_side , unit ) ;
73626: LD_ADDR_VAR 0 2
73630: PUSH
73631: LD_OWVAR 2
73635: PPUSH
73636: LD_VAR 0 1
73640: PPUSH
73641: CALL_OW 292
73645: ST_TO_ADDR
// end ;
73646: LD_VAR 0 2
73650: RET
// export function ReverseDir ( unit ) ; begin
73651: LD_INT 0
73653: PPUSH
// if not unit then
73654: LD_VAR 0 1
73658: NOT
73659: IFFALSE 73663
// exit ;
73661: GO 73686
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73663: LD_ADDR_VAR 0 2
73667: PUSH
73668: LD_VAR 0 1
73672: PPUSH
73673: CALL_OW 254
73677: PUSH
73678: LD_INT 3
73680: PLUS
73681: PUSH
73682: LD_INT 6
73684: MOD
73685: ST_TO_ADDR
// end ;
73686: LD_VAR 0 2
73690: RET
// export function ReverseArray ( array ) ; var i ; begin
73691: LD_INT 0
73693: PPUSH
73694: PPUSH
// if not array then
73695: LD_VAR 0 1
73699: NOT
73700: IFFALSE 73704
// exit ;
73702: GO 73759
// result := [ ] ;
73704: LD_ADDR_VAR 0 2
73708: PUSH
73709: EMPTY
73710: ST_TO_ADDR
// for i := array downto 1 do
73711: LD_ADDR_VAR 0 3
73715: PUSH
73716: DOUBLE
73717: LD_VAR 0 1
73721: INC
73722: ST_TO_ADDR
73723: LD_INT 1
73725: PUSH
73726: FOR_DOWNTO
73727: IFFALSE 73757
// result := Join ( result , array [ i ] ) ;
73729: LD_ADDR_VAR 0 2
73733: PUSH
73734: LD_VAR 0 2
73738: PPUSH
73739: LD_VAR 0 1
73743: PUSH
73744: LD_VAR 0 3
73748: ARRAY
73749: PPUSH
73750: CALL 78415 0 2
73754: ST_TO_ADDR
73755: GO 73726
73757: POP
73758: POP
// end ;
73759: LD_VAR 0 2
73763: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73764: LD_INT 0
73766: PPUSH
73767: PPUSH
73768: PPUSH
73769: PPUSH
73770: PPUSH
73771: PPUSH
// if not unit or not hexes then
73772: LD_VAR 0 1
73776: NOT
73777: PUSH
73778: LD_VAR 0 2
73782: NOT
73783: OR
73784: IFFALSE 73788
// exit ;
73786: GO 73911
// dist := 9999 ;
73788: LD_ADDR_VAR 0 5
73792: PUSH
73793: LD_INT 9999
73795: ST_TO_ADDR
// for i = 1 to hexes do
73796: LD_ADDR_VAR 0 4
73800: PUSH
73801: DOUBLE
73802: LD_INT 1
73804: DEC
73805: ST_TO_ADDR
73806: LD_VAR 0 2
73810: PUSH
73811: FOR_TO
73812: IFFALSE 73899
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73814: LD_ADDR_VAR 0 6
73818: PUSH
73819: LD_VAR 0 1
73823: PPUSH
73824: LD_VAR 0 2
73828: PUSH
73829: LD_VAR 0 4
73833: ARRAY
73834: PUSH
73835: LD_INT 1
73837: ARRAY
73838: PPUSH
73839: LD_VAR 0 2
73843: PUSH
73844: LD_VAR 0 4
73848: ARRAY
73849: PUSH
73850: LD_INT 2
73852: ARRAY
73853: PPUSH
73854: CALL_OW 297
73858: ST_TO_ADDR
// if tdist < dist then
73859: LD_VAR 0 6
73863: PUSH
73864: LD_VAR 0 5
73868: LESS
73869: IFFALSE 73897
// begin hex := hexes [ i ] ;
73871: LD_ADDR_VAR 0 8
73875: PUSH
73876: LD_VAR 0 2
73880: PUSH
73881: LD_VAR 0 4
73885: ARRAY
73886: ST_TO_ADDR
// dist := tdist ;
73887: LD_ADDR_VAR 0 5
73891: PUSH
73892: LD_VAR 0 6
73896: ST_TO_ADDR
// end ; end ;
73897: GO 73811
73899: POP
73900: POP
// result := hex ;
73901: LD_ADDR_VAR 0 3
73905: PUSH
73906: LD_VAR 0 8
73910: ST_TO_ADDR
// end ;
73911: LD_VAR 0 3
73915: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73916: LD_INT 0
73918: PPUSH
73919: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73920: LD_VAR 0 1
73924: NOT
73925: PUSH
73926: LD_VAR 0 1
73930: PUSH
73931: LD_INT 21
73933: PUSH
73934: LD_INT 2
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: PUSH
73941: LD_INT 23
73943: PUSH
73944: LD_INT 2
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: PPUSH
73955: CALL_OW 69
73959: IN
73960: NOT
73961: OR
73962: IFFALSE 73966
// exit ;
73964: GO 74013
// for i = 1 to 3 do
73966: LD_ADDR_VAR 0 3
73970: PUSH
73971: DOUBLE
73972: LD_INT 1
73974: DEC
73975: ST_TO_ADDR
73976: LD_INT 3
73978: PUSH
73979: FOR_TO
73980: IFFALSE 74011
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73982: LD_VAR 0 1
73986: PPUSH
73987: CALL_OW 250
73991: PPUSH
73992: LD_VAR 0 1
73996: PPUSH
73997: CALL_OW 251
74001: PPUSH
74002: LD_INT 1
74004: PPUSH
74005: CALL_OW 453
74009: GO 73979
74011: POP
74012: POP
// end ;
74013: LD_VAR 0 2
74017: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74018: LD_INT 0
74020: PPUSH
74021: PPUSH
74022: PPUSH
74023: PPUSH
74024: PPUSH
74025: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74026: LD_VAR 0 1
74030: NOT
74031: PUSH
74032: LD_VAR 0 2
74036: NOT
74037: OR
74038: PUSH
74039: LD_VAR 0 1
74043: PPUSH
74044: CALL_OW 314
74048: OR
74049: IFFALSE 74053
// exit ;
74051: GO 74520
// if GetLives ( i ) < 250 then
74053: LD_VAR 0 4
74057: PPUSH
74058: CALL_OW 256
74062: PUSH
74063: LD_INT 250
74065: LESS
74066: IFFALSE 74079
// begin ComAutodestruct ( i ) ;
74068: LD_VAR 0 4
74072: PPUSH
74073: CALL 73916 0 1
// exit ;
74077: GO 74520
// end ; x := GetX ( enemy_unit ) ;
74079: LD_ADDR_VAR 0 7
74083: PUSH
74084: LD_VAR 0 2
74088: PPUSH
74089: CALL_OW 250
74093: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74094: LD_ADDR_VAR 0 8
74098: PUSH
74099: LD_VAR 0 2
74103: PPUSH
74104: CALL_OW 251
74108: ST_TO_ADDR
// if not x or not y then
74109: LD_VAR 0 7
74113: NOT
74114: PUSH
74115: LD_VAR 0 8
74119: NOT
74120: OR
74121: IFFALSE 74125
// exit ;
74123: GO 74520
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74125: LD_ADDR_VAR 0 6
74129: PUSH
74130: LD_VAR 0 7
74134: PPUSH
74135: LD_INT 0
74137: PPUSH
74138: LD_INT 4
74140: PPUSH
74141: CALL_OW 272
74145: PUSH
74146: LD_VAR 0 8
74150: PPUSH
74151: LD_INT 0
74153: PPUSH
74154: LD_INT 4
74156: PPUSH
74157: CALL_OW 273
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_VAR 0 7
74170: PPUSH
74171: LD_INT 1
74173: PPUSH
74174: LD_INT 4
74176: PPUSH
74177: CALL_OW 272
74181: PUSH
74182: LD_VAR 0 8
74186: PPUSH
74187: LD_INT 1
74189: PPUSH
74190: LD_INT 4
74192: PPUSH
74193: CALL_OW 273
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_VAR 0 7
74206: PPUSH
74207: LD_INT 2
74209: PPUSH
74210: LD_INT 4
74212: PPUSH
74213: CALL_OW 272
74217: PUSH
74218: LD_VAR 0 8
74222: PPUSH
74223: LD_INT 2
74225: PPUSH
74226: LD_INT 4
74228: PPUSH
74229: CALL_OW 273
74233: PUSH
74234: EMPTY
74235: LIST
74236: LIST
74237: PUSH
74238: LD_VAR 0 7
74242: PPUSH
74243: LD_INT 3
74245: PPUSH
74246: LD_INT 4
74248: PPUSH
74249: CALL_OW 272
74253: PUSH
74254: LD_VAR 0 8
74258: PPUSH
74259: LD_INT 3
74261: PPUSH
74262: LD_INT 4
74264: PPUSH
74265: CALL_OW 273
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: PUSH
74274: LD_VAR 0 7
74278: PPUSH
74279: LD_INT 4
74281: PPUSH
74282: LD_INT 4
74284: PPUSH
74285: CALL_OW 272
74289: PUSH
74290: LD_VAR 0 8
74294: PPUSH
74295: LD_INT 4
74297: PPUSH
74298: LD_INT 4
74300: PPUSH
74301: CALL_OW 273
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PUSH
74310: LD_VAR 0 7
74314: PPUSH
74315: LD_INT 5
74317: PPUSH
74318: LD_INT 4
74320: PPUSH
74321: CALL_OW 272
74325: PUSH
74326: LD_VAR 0 8
74330: PPUSH
74331: LD_INT 5
74333: PPUSH
74334: LD_INT 4
74336: PPUSH
74337: CALL_OW 273
74341: PUSH
74342: EMPTY
74343: LIST
74344: LIST
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: ST_TO_ADDR
// for i = tmp downto 1 do
74354: LD_ADDR_VAR 0 4
74358: PUSH
74359: DOUBLE
74360: LD_VAR 0 6
74364: INC
74365: ST_TO_ADDR
74366: LD_INT 1
74368: PUSH
74369: FOR_DOWNTO
74370: IFFALSE 74471
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74372: LD_VAR 0 6
74376: PUSH
74377: LD_VAR 0 4
74381: ARRAY
74382: PUSH
74383: LD_INT 1
74385: ARRAY
74386: PPUSH
74387: LD_VAR 0 6
74391: PUSH
74392: LD_VAR 0 4
74396: ARRAY
74397: PUSH
74398: LD_INT 2
74400: ARRAY
74401: PPUSH
74402: CALL_OW 488
74406: NOT
74407: PUSH
74408: LD_VAR 0 6
74412: PUSH
74413: LD_VAR 0 4
74417: ARRAY
74418: PUSH
74419: LD_INT 1
74421: ARRAY
74422: PPUSH
74423: LD_VAR 0 6
74427: PUSH
74428: LD_VAR 0 4
74432: ARRAY
74433: PUSH
74434: LD_INT 2
74436: ARRAY
74437: PPUSH
74438: CALL_OW 428
74442: PUSH
74443: LD_INT 0
74445: NONEQUAL
74446: OR
74447: IFFALSE 74469
// tmp := Delete ( tmp , i ) ;
74449: LD_ADDR_VAR 0 6
74453: PUSH
74454: LD_VAR 0 6
74458: PPUSH
74459: LD_VAR 0 4
74463: PPUSH
74464: CALL_OW 3
74468: ST_TO_ADDR
74469: GO 74369
74471: POP
74472: POP
// j := GetClosestHex ( unit , tmp ) ;
74473: LD_ADDR_VAR 0 5
74477: PUSH
74478: LD_VAR 0 1
74482: PPUSH
74483: LD_VAR 0 6
74487: PPUSH
74488: CALL 73764 0 2
74492: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74493: LD_VAR 0 1
74497: PPUSH
74498: LD_VAR 0 5
74502: PUSH
74503: LD_INT 1
74505: ARRAY
74506: PPUSH
74507: LD_VAR 0 5
74511: PUSH
74512: LD_INT 2
74514: ARRAY
74515: PPUSH
74516: CALL_OW 111
// end ;
74520: LD_VAR 0 3
74524: RET
// export function PrepareApemanSoldier ( ) ; begin
74525: LD_INT 0
74527: PPUSH
// uc_nation := 0 ;
74528: LD_ADDR_OWVAR 21
74532: PUSH
74533: LD_INT 0
74535: ST_TO_ADDR
// hc_sex := sex_male ;
74536: LD_ADDR_OWVAR 27
74540: PUSH
74541: LD_INT 1
74543: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74544: LD_ADDR_OWVAR 28
74548: PUSH
74549: LD_INT 15
74551: ST_TO_ADDR
// hc_gallery :=  ;
74552: LD_ADDR_OWVAR 33
74556: PUSH
74557: LD_STRING 
74559: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74560: LD_ADDR_OWVAR 31
74564: PUSH
74565: LD_INT 0
74567: PPUSH
74568: LD_INT 3
74570: PPUSH
74571: CALL_OW 12
74575: PUSH
74576: LD_INT 0
74578: PPUSH
74579: LD_INT 3
74581: PPUSH
74582: CALL_OW 12
74586: PUSH
74587: LD_INT 0
74589: PUSH
74590: LD_INT 0
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: LIST
74597: LIST
74598: ST_TO_ADDR
// end ;
74599: LD_VAR 0 1
74603: RET
// export function PrepareApemanEngineer ( ) ; begin
74604: LD_INT 0
74606: PPUSH
// uc_nation := 0 ;
74607: LD_ADDR_OWVAR 21
74611: PUSH
74612: LD_INT 0
74614: ST_TO_ADDR
// hc_sex := sex_male ;
74615: LD_ADDR_OWVAR 27
74619: PUSH
74620: LD_INT 1
74622: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74623: LD_ADDR_OWVAR 28
74627: PUSH
74628: LD_INT 16
74630: ST_TO_ADDR
// hc_gallery :=  ;
74631: LD_ADDR_OWVAR 33
74635: PUSH
74636: LD_STRING 
74638: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74639: LD_ADDR_OWVAR 31
74643: PUSH
74644: LD_INT 0
74646: PPUSH
74647: LD_INT 3
74649: PPUSH
74650: CALL_OW 12
74654: PUSH
74655: LD_INT 0
74657: PPUSH
74658: LD_INT 3
74660: PPUSH
74661: CALL_OW 12
74665: PUSH
74666: LD_INT 0
74668: PUSH
74669: LD_INT 0
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: ST_TO_ADDR
// end ;
74678: LD_VAR 0 1
74682: RET
// export function PrepareApeman ( agressivity ) ; begin
74683: LD_INT 0
74685: PPUSH
// uc_side := 0 ;
74686: LD_ADDR_OWVAR 20
74690: PUSH
74691: LD_INT 0
74693: ST_TO_ADDR
// uc_nation := 0 ;
74694: LD_ADDR_OWVAR 21
74698: PUSH
74699: LD_INT 0
74701: ST_TO_ADDR
// hc_sex := sex_male ;
74702: LD_ADDR_OWVAR 27
74706: PUSH
74707: LD_INT 1
74709: ST_TO_ADDR
// hc_class := class_apeman ;
74710: LD_ADDR_OWVAR 28
74714: PUSH
74715: LD_INT 12
74717: ST_TO_ADDR
// hc_gallery :=  ;
74718: LD_ADDR_OWVAR 33
74722: PUSH
74723: LD_STRING 
74725: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74726: LD_ADDR_OWVAR 35
74730: PUSH
74731: LD_VAR 0 1
74735: NEG
74736: PPUSH
74737: LD_VAR 0 1
74741: PPUSH
74742: CALL_OW 12
74746: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74747: LD_ADDR_OWVAR 31
74751: PUSH
74752: LD_INT 0
74754: PPUSH
74755: LD_INT 3
74757: PPUSH
74758: CALL_OW 12
74762: PUSH
74763: LD_INT 0
74765: PPUSH
74766: LD_INT 3
74768: PPUSH
74769: CALL_OW 12
74773: PUSH
74774: LD_INT 0
74776: PUSH
74777: LD_INT 0
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: ST_TO_ADDR
// end ;
74786: LD_VAR 0 2
74790: RET
// export function PrepareTiger ( agressivity ) ; begin
74791: LD_INT 0
74793: PPUSH
// uc_side := 0 ;
74794: LD_ADDR_OWVAR 20
74798: PUSH
74799: LD_INT 0
74801: ST_TO_ADDR
// uc_nation := 0 ;
74802: LD_ADDR_OWVAR 21
74806: PUSH
74807: LD_INT 0
74809: ST_TO_ADDR
// hc_class := class_tiger ;
74810: LD_ADDR_OWVAR 28
74814: PUSH
74815: LD_INT 14
74817: ST_TO_ADDR
// hc_gallery :=  ;
74818: LD_ADDR_OWVAR 33
74822: PUSH
74823: LD_STRING 
74825: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74826: LD_ADDR_OWVAR 35
74830: PUSH
74831: LD_VAR 0 1
74835: NEG
74836: PPUSH
74837: LD_VAR 0 1
74841: PPUSH
74842: CALL_OW 12
74846: ST_TO_ADDR
// end ;
74847: LD_VAR 0 2
74851: RET
// export function PrepareEnchidna ( ) ; begin
74852: LD_INT 0
74854: PPUSH
// uc_side := 0 ;
74855: LD_ADDR_OWVAR 20
74859: PUSH
74860: LD_INT 0
74862: ST_TO_ADDR
// uc_nation := 0 ;
74863: LD_ADDR_OWVAR 21
74867: PUSH
74868: LD_INT 0
74870: ST_TO_ADDR
// hc_class := class_baggie ;
74871: LD_ADDR_OWVAR 28
74875: PUSH
74876: LD_INT 13
74878: ST_TO_ADDR
// hc_gallery :=  ;
74879: LD_ADDR_OWVAR 33
74883: PUSH
74884: LD_STRING 
74886: ST_TO_ADDR
// end ;
74887: LD_VAR 0 1
74891: RET
// export function PrepareFrog ( ) ; begin
74892: LD_INT 0
74894: PPUSH
// uc_side := 0 ;
74895: LD_ADDR_OWVAR 20
74899: PUSH
74900: LD_INT 0
74902: ST_TO_ADDR
// uc_nation := 0 ;
74903: LD_ADDR_OWVAR 21
74907: PUSH
74908: LD_INT 0
74910: ST_TO_ADDR
// hc_class := class_frog ;
74911: LD_ADDR_OWVAR 28
74915: PUSH
74916: LD_INT 19
74918: ST_TO_ADDR
// hc_gallery :=  ;
74919: LD_ADDR_OWVAR 33
74923: PUSH
74924: LD_STRING 
74926: ST_TO_ADDR
// end ;
74927: LD_VAR 0 1
74931: RET
// export function PrepareFish ( ) ; begin
74932: LD_INT 0
74934: PPUSH
// uc_side := 0 ;
74935: LD_ADDR_OWVAR 20
74939: PUSH
74940: LD_INT 0
74942: ST_TO_ADDR
// uc_nation := 0 ;
74943: LD_ADDR_OWVAR 21
74947: PUSH
74948: LD_INT 0
74950: ST_TO_ADDR
// hc_class := class_fish ;
74951: LD_ADDR_OWVAR 28
74955: PUSH
74956: LD_INT 20
74958: ST_TO_ADDR
// hc_gallery :=  ;
74959: LD_ADDR_OWVAR 33
74963: PUSH
74964: LD_STRING 
74966: ST_TO_ADDR
// end ;
74967: LD_VAR 0 1
74971: RET
// export function PrepareBird ( ) ; begin
74972: LD_INT 0
74974: PPUSH
// uc_side := 0 ;
74975: LD_ADDR_OWVAR 20
74979: PUSH
74980: LD_INT 0
74982: ST_TO_ADDR
// uc_nation := 0 ;
74983: LD_ADDR_OWVAR 21
74987: PUSH
74988: LD_INT 0
74990: ST_TO_ADDR
// hc_class := class_phororhacos ;
74991: LD_ADDR_OWVAR 28
74995: PUSH
74996: LD_INT 18
74998: ST_TO_ADDR
// hc_gallery :=  ;
74999: LD_ADDR_OWVAR 33
75003: PUSH
75004: LD_STRING 
75006: ST_TO_ADDR
// end ;
75007: LD_VAR 0 1
75011: RET
// export function PrepareHorse ( ) ; begin
75012: LD_INT 0
75014: PPUSH
// uc_side := 0 ;
75015: LD_ADDR_OWVAR 20
75019: PUSH
75020: LD_INT 0
75022: ST_TO_ADDR
// uc_nation := 0 ;
75023: LD_ADDR_OWVAR 21
75027: PUSH
75028: LD_INT 0
75030: ST_TO_ADDR
// hc_class := class_horse ;
75031: LD_ADDR_OWVAR 28
75035: PUSH
75036: LD_INT 21
75038: ST_TO_ADDR
// hc_gallery :=  ;
75039: LD_ADDR_OWVAR 33
75043: PUSH
75044: LD_STRING 
75046: ST_TO_ADDR
// end ;
75047: LD_VAR 0 1
75051: RET
// export function PrepareMastodont ( ) ; begin
75052: LD_INT 0
75054: PPUSH
// uc_side := 0 ;
75055: LD_ADDR_OWVAR 20
75059: PUSH
75060: LD_INT 0
75062: ST_TO_ADDR
// uc_nation := 0 ;
75063: LD_ADDR_OWVAR 21
75067: PUSH
75068: LD_INT 0
75070: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75071: LD_ADDR_OWVAR 37
75075: PUSH
75076: LD_INT 31
75078: ST_TO_ADDR
// vc_control := control_rider ;
75079: LD_ADDR_OWVAR 38
75083: PUSH
75084: LD_INT 4
75086: ST_TO_ADDR
// end ;
75087: LD_VAR 0 1
75091: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75092: LD_INT 0
75094: PPUSH
75095: PPUSH
75096: PPUSH
// uc_side = 0 ;
75097: LD_ADDR_OWVAR 20
75101: PUSH
75102: LD_INT 0
75104: ST_TO_ADDR
// uc_nation = 0 ;
75105: LD_ADDR_OWVAR 21
75109: PUSH
75110: LD_INT 0
75112: ST_TO_ADDR
// InitHc_All ( ) ;
75113: CALL_OW 584
// InitVc ;
75117: CALL_OW 20
// if mastodonts then
75121: LD_VAR 0 6
75125: IFFALSE 75192
// for i = 1 to mastodonts do
75127: LD_ADDR_VAR 0 11
75131: PUSH
75132: DOUBLE
75133: LD_INT 1
75135: DEC
75136: ST_TO_ADDR
75137: LD_VAR 0 6
75141: PUSH
75142: FOR_TO
75143: IFFALSE 75190
// begin vc_chassis := 31 ;
75145: LD_ADDR_OWVAR 37
75149: PUSH
75150: LD_INT 31
75152: ST_TO_ADDR
// vc_control := control_rider ;
75153: LD_ADDR_OWVAR 38
75157: PUSH
75158: LD_INT 4
75160: ST_TO_ADDR
// animal := CreateVehicle ;
75161: LD_ADDR_VAR 0 12
75165: PUSH
75166: CALL_OW 45
75170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75171: LD_VAR 0 12
75175: PPUSH
75176: LD_VAR 0 8
75180: PPUSH
75181: LD_INT 0
75183: PPUSH
75184: CALL 77320 0 3
// end ;
75188: GO 75142
75190: POP
75191: POP
// if horses then
75192: LD_VAR 0 5
75196: IFFALSE 75263
// for i = 1 to horses do
75198: LD_ADDR_VAR 0 11
75202: PUSH
75203: DOUBLE
75204: LD_INT 1
75206: DEC
75207: ST_TO_ADDR
75208: LD_VAR 0 5
75212: PUSH
75213: FOR_TO
75214: IFFALSE 75261
// begin hc_class := 21 ;
75216: LD_ADDR_OWVAR 28
75220: PUSH
75221: LD_INT 21
75223: ST_TO_ADDR
// hc_gallery :=  ;
75224: LD_ADDR_OWVAR 33
75228: PUSH
75229: LD_STRING 
75231: ST_TO_ADDR
// animal := CreateHuman ;
75232: LD_ADDR_VAR 0 12
75236: PUSH
75237: CALL_OW 44
75241: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75242: LD_VAR 0 12
75246: PPUSH
75247: LD_VAR 0 8
75251: PPUSH
75252: LD_INT 0
75254: PPUSH
75255: CALL 77320 0 3
// end ;
75259: GO 75213
75261: POP
75262: POP
// if birds then
75263: LD_VAR 0 1
75267: IFFALSE 75334
// for i = 1 to birds do
75269: LD_ADDR_VAR 0 11
75273: PUSH
75274: DOUBLE
75275: LD_INT 1
75277: DEC
75278: ST_TO_ADDR
75279: LD_VAR 0 1
75283: PUSH
75284: FOR_TO
75285: IFFALSE 75332
// begin hc_class := 18 ;
75287: LD_ADDR_OWVAR 28
75291: PUSH
75292: LD_INT 18
75294: ST_TO_ADDR
// hc_gallery =  ;
75295: LD_ADDR_OWVAR 33
75299: PUSH
75300: LD_STRING 
75302: ST_TO_ADDR
// animal := CreateHuman ;
75303: LD_ADDR_VAR 0 12
75307: PUSH
75308: CALL_OW 44
75312: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75313: LD_VAR 0 12
75317: PPUSH
75318: LD_VAR 0 8
75322: PPUSH
75323: LD_INT 0
75325: PPUSH
75326: CALL 77320 0 3
// end ;
75330: GO 75284
75332: POP
75333: POP
// if tigers then
75334: LD_VAR 0 2
75338: IFFALSE 75422
// for i = 1 to tigers do
75340: LD_ADDR_VAR 0 11
75344: PUSH
75345: DOUBLE
75346: LD_INT 1
75348: DEC
75349: ST_TO_ADDR
75350: LD_VAR 0 2
75354: PUSH
75355: FOR_TO
75356: IFFALSE 75420
// begin hc_class = class_tiger ;
75358: LD_ADDR_OWVAR 28
75362: PUSH
75363: LD_INT 14
75365: ST_TO_ADDR
// hc_gallery =  ;
75366: LD_ADDR_OWVAR 33
75370: PUSH
75371: LD_STRING 
75373: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75374: LD_ADDR_OWVAR 35
75378: PUSH
75379: LD_INT 7
75381: NEG
75382: PPUSH
75383: LD_INT 7
75385: PPUSH
75386: CALL_OW 12
75390: ST_TO_ADDR
// animal := CreateHuman ;
75391: LD_ADDR_VAR 0 12
75395: PUSH
75396: CALL_OW 44
75400: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75401: LD_VAR 0 12
75405: PPUSH
75406: LD_VAR 0 8
75410: PPUSH
75411: LD_INT 0
75413: PPUSH
75414: CALL 77320 0 3
// end ;
75418: GO 75355
75420: POP
75421: POP
// if apemans then
75422: LD_VAR 0 3
75426: IFFALSE 75549
// for i = 1 to apemans do
75428: LD_ADDR_VAR 0 11
75432: PUSH
75433: DOUBLE
75434: LD_INT 1
75436: DEC
75437: ST_TO_ADDR
75438: LD_VAR 0 3
75442: PUSH
75443: FOR_TO
75444: IFFALSE 75547
// begin hc_class = class_apeman ;
75446: LD_ADDR_OWVAR 28
75450: PUSH
75451: LD_INT 12
75453: ST_TO_ADDR
// hc_gallery =  ;
75454: LD_ADDR_OWVAR 33
75458: PUSH
75459: LD_STRING 
75461: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75462: LD_ADDR_OWVAR 35
75466: PUSH
75467: LD_INT 2
75469: NEG
75470: PPUSH
75471: LD_INT 2
75473: PPUSH
75474: CALL_OW 12
75478: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75479: LD_ADDR_OWVAR 31
75483: PUSH
75484: LD_INT 1
75486: PPUSH
75487: LD_INT 3
75489: PPUSH
75490: CALL_OW 12
75494: PUSH
75495: LD_INT 1
75497: PPUSH
75498: LD_INT 3
75500: PPUSH
75501: CALL_OW 12
75505: PUSH
75506: LD_INT 0
75508: PUSH
75509: LD_INT 0
75511: PUSH
75512: EMPTY
75513: LIST
75514: LIST
75515: LIST
75516: LIST
75517: ST_TO_ADDR
// animal := CreateHuman ;
75518: LD_ADDR_VAR 0 12
75522: PUSH
75523: CALL_OW 44
75527: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75528: LD_VAR 0 12
75532: PPUSH
75533: LD_VAR 0 8
75537: PPUSH
75538: LD_INT 0
75540: PPUSH
75541: CALL 77320 0 3
// end ;
75545: GO 75443
75547: POP
75548: POP
// if enchidnas then
75549: LD_VAR 0 4
75553: IFFALSE 75620
// for i = 1 to enchidnas do
75555: LD_ADDR_VAR 0 11
75559: PUSH
75560: DOUBLE
75561: LD_INT 1
75563: DEC
75564: ST_TO_ADDR
75565: LD_VAR 0 4
75569: PUSH
75570: FOR_TO
75571: IFFALSE 75618
// begin hc_class = 13 ;
75573: LD_ADDR_OWVAR 28
75577: PUSH
75578: LD_INT 13
75580: ST_TO_ADDR
// hc_gallery =  ;
75581: LD_ADDR_OWVAR 33
75585: PUSH
75586: LD_STRING 
75588: ST_TO_ADDR
// animal := CreateHuman ;
75589: LD_ADDR_VAR 0 12
75593: PUSH
75594: CALL_OW 44
75598: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75599: LD_VAR 0 12
75603: PPUSH
75604: LD_VAR 0 8
75608: PPUSH
75609: LD_INT 0
75611: PPUSH
75612: CALL 77320 0 3
// end ;
75616: GO 75570
75618: POP
75619: POP
// if fishes then
75620: LD_VAR 0 7
75624: IFFALSE 75691
// for i = 1 to fishes do
75626: LD_ADDR_VAR 0 11
75630: PUSH
75631: DOUBLE
75632: LD_INT 1
75634: DEC
75635: ST_TO_ADDR
75636: LD_VAR 0 7
75640: PUSH
75641: FOR_TO
75642: IFFALSE 75689
// begin hc_class = 20 ;
75644: LD_ADDR_OWVAR 28
75648: PUSH
75649: LD_INT 20
75651: ST_TO_ADDR
// hc_gallery =  ;
75652: LD_ADDR_OWVAR 33
75656: PUSH
75657: LD_STRING 
75659: ST_TO_ADDR
// animal := CreateHuman ;
75660: LD_ADDR_VAR 0 12
75664: PUSH
75665: CALL_OW 44
75669: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75670: LD_VAR 0 12
75674: PPUSH
75675: LD_VAR 0 9
75679: PPUSH
75680: LD_INT 0
75682: PPUSH
75683: CALL 77320 0 3
// end ;
75687: GO 75641
75689: POP
75690: POP
// end ;
75691: LD_VAR 0 10
75695: RET
// export function WantHeal ( sci , unit ) ; begin
75696: LD_INT 0
75698: PPUSH
// if GetTaskList ( sci ) > 0 then
75699: LD_VAR 0 1
75703: PPUSH
75704: CALL_OW 437
75708: PUSH
75709: LD_INT 0
75711: GREATER
75712: IFFALSE 75782
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75714: LD_VAR 0 1
75718: PPUSH
75719: CALL_OW 437
75723: PUSH
75724: LD_INT 1
75726: ARRAY
75727: PUSH
75728: LD_INT 1
75730: ARRAY
75731: PUSH
75732: LD_STRING l
75734: EQUAL
75735: PUSH
75736: LD_VAR 0 1
75740: PPUSH
75741: CALL_OW 437
75745: PUSH
75746: LD_INT 1
75748: ARRAY
75749: PUSH
75750: LD_INT 4
75752: ARRAY
75753: PUSH
75754: LD_VAR 0 2
75758: EQUAL
75759: AND
75760: IFFALSE 75772
// result := true else
75762: LD_ADDR_VAR 0 3
75766: PUSH
75767: LD_INT 1
75769: ST_TO_ADDR
75770: GO 75780
// result := false ;
75772: LD_ADDR_VAR 0 3
75776: PUSH
75777: LD_INT 0
75779: ST_TO_ADDR
// end else
75780: GO 75790
// result := false ;
75782: LD_ADDR_VAR 0 3
75786: PUSH
75787: LD_INT 0
75789: ST_TO_ADDR
// end ;
75790: LD_VAR 0 3
75794: RET
// export function HealTarget ( sci ) ; begin
75795: LD_INT 0
75797: PPUSH
// if not sci then
75798: LD_VAR 0 1
75802: NOT
75803: IFFALSE 75807
// exit ;
75805: GO 75872
// result := 0 ;
75807: LD_ADDR_VAR 0 2
75811: PUSH
75812: LD_INT 0
75814: ST_TO_ADDR
// if GetTaskList ( sci ) then
75815: LD_VAR 0 1
75819: PPUSH
75820: CALL_OW 437
75824: IFFALSE 75872
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75826: LD_VAR 0 1
75830: PPUSH
75831: CALL_OW 437
75835: PUSH
75836: LD_INT 1
75838: ARRAY
75839: PUSH
75840: LD_INT 1
75842: ARRAY
75843: PUSH
75844: LD_STRING l
75846: EQUAL
75847: IFFALSE 75872
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75849: LD_ADDR_VAR 0 2
75853: PUSH
75854: LD_VAR 0 1
75858: PPUSH
75859: CALL_OW 437
75863: PUSH
75864: LD_INT 1
75866: ARRAY
75867: PUSH
75868: LD_INT 4
75870: ARRAY
75871: ST_TO_ADDR
// end ;
75872: LD_VAR 0 2
75876: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75877: LD_INT 0
75879: PPUSH
75880: PPUSH
75881: PPUSH
75882: PPUSH
// if not base_units then
75883: LD_VAR 0 1
75887: NOT
75888: IFFALSE 75892
// exit ;
75890: GO 75979
// result := false ;
75892: LD_ADDR_VAR 0 2
75896: PUSH
75897: LD_INT 0
75899: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75900: LD_ADDR_VAR 0 5
75904: PUSH
75905: LD_VAR 0 1
75909: PPUSH
75910: LD_INT 21
75912: PUSH
75913: LD_INT 3
75915: PUSH
75916: EMPTY
75917: LIST
75918: LIST
75919: PPUSH
75920: CALL_OW 72
75924: ST_TO_ADDR
// if not tmp then
75925: LD_VAR 0 5
75929: NOT
75930: IFFALSE 75934
// exit ;
75932: GO 75979
// for i in tmp do
75934: LD_ADDR_VAR 0 3
75938: PUSH
75939: LD_VAR 0 5
75943: PUSH
75944: FOR_IN
75945: IFFALSE 75977
// begin result := EnemyInRange ( i , 22 ) ;
75947: LD_ADDR_VAR 0 2
75951: PUSH
75952: LD_VAR 0 3
75956: PPUSH
75957: LD_INT 22
75959: PPUSH
75960: CALL 73566 0 2
75964: ST_TO_ADDR
// if result then
75965: LD_VAR 0 2
75969: IFFALSE 75975
// exit ;
75971: POP
75972: POP
75973: GO 75979
// end ;
75975: GO 75944
75977: POP
75978: POP
// end ;
75979: LD_VAR 0 2
75983: RET
// export function FilterByTag ( units , tag ) ; begin
75984: LD_INT 0
75986: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75987: LD_ADDR_VAR 0 3
75991: PUSH
75992: LD_VAR 0 1
75996: PPUSH
75997: LD_INT 120
75999: PUSH
76000: LD_VAR 0 2
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: PPUSH
76009: CALL_OW 72
76013: ST_TO_ADDR
// end ;
76014: LD_VAR 0 3
76018: RET
// export function IsDriver ( un ) ; begin
76019: LD_INT 0
76021: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76022: LD_ADDR_VAR 0 2
76026: PUSH
76027: LD_VAR 0 1
76031: PUSH
76032: LD_INT 55
76034: PUSH
76035: EMPTY
76036: LIST
76037: PPUSH
76038: CALL_OW 69
76042: IN
76043: ST_TO_ADDR
// end ;
76044: LD_VAR 0 2
76048: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76049: LD_INT 0
76051: PPUSH
76052: PPUSH
// list := [ ] ;
76053: LD_ADDR_VAR 0 5
76057: PUSH
76058: EMPTY
76059: ST_TO_ADDR
// case d of 0 :
76060: LD_VAR 0 3
76064: PUSH
76065: LD_INT 0
76067: DOUBLE
76068: EQUAL
76069: IFTRUE 76073
76071: GO 76206
76073: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76074: LD_ADDR_VAR 0 5
76078: PUSH
76079: LD_VAR 0 1
76083: PUSH
76084: LD_INT 4
76086: MINUS
76087: PUSH
76088: LD_VAR 0 2
76092: PUSH
76093: LD_INT 4
76095: MINUS
76096: PUSH
76097: LD_INT 2
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: LIST
76104: PUSH
76105: LD_VAR 0 1
76109: PUSH
76110: LD_INT 3
76112: MINUS
76113: PUSH
76114: LD_VAR 0 2
76118: PUSH
76119: LD_INT 1
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: LIST
76126: PUSH
76127: LD_VAR 0 1
76131: PUSH
76132: LD_INT 4
76134: PLUS
76135: PUSH
76136: LD_VAR 0 2
76140: PUSH
76141: LD_INT 4
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: LIST
76148: PUSH
76149: LD_VAR 0 1
76153: PUSH
76154: LD_INT 3
76156: PLUS
76157: PUSH
76158: LD_VAR 0 2
76162: PUSH
76163: LD_INT 3
76165: PLUS
76166: PUSH
76167: LD_INT 5
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: LIST
76174: PUSH
76175: LD_VAR 0 1
76179: PUSH
76180: LD_VAR 0 2
76184: PUSH
76185: LD_INT 4
76187: PLUS
76188: PUSH
76189: LD_INT 0
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: LIST
76196: PUSH
76197: EMPTY
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: ST_TO_ADDR
// end ; 1 :
76204: GO 76904
76206: LD_INT 1
76208: DOUBLE
76209: EQUAL
76210: IFTRUE 76214
76212: GO 76347
76214: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76215: LD_ADDR_VAR 0 5
76219: PUSH
76220: LD_VAR 0 1
76224: PUSH
76225: LD_VAR 0 2
76229: PUSH
76230: LD_INT 4
76232: MINUS
76233: PUSH
76234: LD_INT 3
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: LIST
76241: PUSH
76242: LD_VAR 0 1
76246: PUSH
76247: LD_INT 3
76249: MINUS
76250: PUSH
76251: LD_VAR 0 2
76255: PUSH
76256: LD_INT 3
76258: MINUS
76259: PUSH
76260: LD_INT 2
76262: PUSH
76263: EMPTY
76264: LIST
76265: LIST
76266: LIST
76267: PUSH
76268: LD_VAR 0 1
76272: PUSH
76273: LD_INT 4
76275: MINUS
76276: PUSH
76277: LD_VAR 0 2
76281: PUSH
76282: LD_INT 1
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: LIST
76289: PUSH
76290: LD_VAR 0 1
76294: PUSH
76295: LD_VAR 0 2
76299: PUSH
76300: LD_INT 3
76302: PLUS
76303: PUSH
76304: LD_INT 0
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: LIST
76311: PUSH
76312: LD_VAR 0 1
76316: PUSH
76317: LD_INT 4
76319: PLUS
76320: PUSH
76321: LD_VAR 0 2
76325: PUSH
76326: LD_INT 4
76328: PLUS
76329: PUSH
76330: LD_INT 5
76332: PUSH
76333: EMPTY
76334: LIST
76335: LIST
76336: LIST
76337: PUSH
76338: EMPTY
76339: LIST
76340: LIST
76341: LIST
76342: LIST
76343: LIST
76344: ST_TO_ADDR
// end ; 2 :
76345: GO 76904
76347: LD_INT 2
76349: DOUBLE
76350: EQUAL
76351: IFTRUE 76355
76353: GO 76484
76355: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76356: LD_ADDR_VAR 0 5
76360: PUSH
76361: LD_VAR 0 1
76365: PUSH
76366: LD_VAR 0 2
76370: PUSH
76371: LD_INT 3
76373: MINUS
76374: PUSH
76375: LD_INT 3
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: LIST
76382: PUSH
76383: LD_VAR 0 1
76387: PUSH
76388: LD_INT 4
76390: PLUS
76391: PUSH
76392: LD_VAR 0 2
76396: PUSH
76397: LD_INT 4
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: LIST
76404: PUSH
76405: LD_VAR 0 1
76409: PUSH
76410: LD_VAR 0 2
76414: PUSH
76415: LD_INT 4
76417: PLUS
76418: PUSH
76419: LD_INT 0
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: LIST
76426: PUSH
76427: LD_VAR 0 1
76431: PUSH
76432: LD_INT 3
76434: MINUS
76435: PUSH
76436: LD_VAR 0 2
76440: PUSH
76441: LD_INT 1
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: LIST
76448: PUSH
76449: LD_VAR 0 1
76453: PUSH
76454: LD_INT 4
76456: MINUS
76457: PUSH
76458: LD_VAR 0 2
76462: PUSH
76463: LD_INT 4
76465: MINUS
76466: PUSH
76467: LD_INT 2
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: LIST
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: ST_TO_ADDR
// end ; 3 :
76482: GO 76904
76484: LD_INT 3
76486: DOUBLE
76487: EQUAL
76488: IFTRUE 76492
76490: GO 76625
76492: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76493: LD_ADDR_VAR 0 5
76497: PUSH
76498: LD_VAR 0 1
76502: PUSH
76503: LD_INT 3
76505: PLUS
76506: PUSH
76507: LD_VAR 0 2
76511: PUSH
76512: LD_INT 4
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: PUSH
76520: LD_VAR 0 1
76524: PUSH
76525: LD_INT 4
76527: PLUS
76528: PUSH
76529: LD_VAR 0 2
76533: PUSH
76534: LD_INT 4
76536: PLUS
76537: PUSH
76538: LD_INT 5
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: LIST
76545: PUSH
76546: LD_VAR 0 1
76550: PUSH
76551: LD_INT 4
76553: MINUS
76554: PUSH
76555: LD_VAR 0 2
76559: PUSH
76560: LD_INT 1
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: LIST
76567: PUSH
76568: LD_VAR 0 1
76572: PUSH
76573: LD_VAR 0 2
76577: PUSH
76578: LD_INT 4
76580: MINUS
76581: PUSH
76582: LD_INT 3
76584: PUSH
76585: EMPTY
76586: LIST
76587: LIST
76588: LIST
76589: PUSH
76590: LD_VAR 0 1
76594: PUSH
76595: LD_INT 3
76597: MINUS
76598: PUSH
76599: LD_VAR 0 2
76603: PUSH
76604: LD_INT 3
76606: MINUS
76607: PUSH
76608: LD_INT 2
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: LIST
76615: PUSH
76616: EMPTY
76617: LIST
76618: LIST
76619: LIST
76620: LIST
76621: LIST
76622: ST_TO_ADDR
// end ; 4 :
76623: GO 76904
76625: LD_INT 4
76627: DOUBLE
76628: EQUAL
76629: IFTRUE 76633
76631: GO 76766
76633: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76634: LD_ADDR_VAR 0 5
76638: PUSH
76639: LD_VAR 0 1
76643: PUSH
76644: LD_VAR 0 2
76648: PUSH
76649: LD_INT 4
76651: PLUS
76652: PUSH
76653: LD_INT 0
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: LIST
76660: PUSH
76661: LD_VAR 0 1
76665: PUSH
76666: LD_INT 3
76668: PLUS
76669: PUSH
76670: LD_VAR 0 2
76674: PUSH
76675: LD_INT 3
76677: PLUS
76678: PUSH
76679: LD_INT 5
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: LIST
76686: PUSH
76687: LD_VAR 0 1
76691: PUSH
76692: LD_INT 4
76694: PLUS
76695: PUSH
76696: LD_VAR 0 2
76700: PUSH
76701: LD_INT 4
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: LIST
76708: PUSH
76709: LD_VAR 0 1
76713: PUSH
76714: LD_VAR 0 2
76718: PUSH
76719: LD_INT 3
76721: MINUS
76722: PUSH
76723: LD_INT 3
76725: PUSH
76726: EMPTY
76727: LIST
76728: LIST
76729: LIST
76730: PUSH
76731: LD_VAR 0 1
76735: PUSH
76736: LD_INT 4
76738: MINUS
76739: PUSH
76740: LD_VAR 0 2
76744: PUSH
76745: LD_INT 4
76747: MINUS
76748: PUSH
76749: LD_INT 2
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: LIST
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: ST_TO_ADDR
// end ; 5 :
76764: GO 76904
76766: LD_INT 5
76768: DOUBLE
76769: EQUAL
76770: IFTRUE 76774
76772: GO 76903
76774: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76775: LD_ADDR_VAR 0 5
76779: PUSH
76780: LD_VAR 0 1
76784: PUSH
76785: LD_INT 4
76787: MINUS
76788: PUSH
76789: LD_VAR 0 2
76793: PUSH
76794: LD_INT 1
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: LIST
76801: PUSH
76802: LD_VAR 0 1
76806: PUSH
76807: LD_VAR 0 2
76811: PUSH
76812: LD_INT 4
76814: MINUS
76815: PUSH
76816: LD_INT 3
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: LIST
76823: PUSH
76824: LD_VAR 0 1
76828: PUSH
76829: LD_INT 4
76831: PLUS
76832: PUSH
76833: LD_VAR 0 2
76837: PUSH
76838: LD_INT 4
76840: PLUS
76841: PUSH
76842: LD_INT 5
76844: PUSH
76845: EMPTY
76846: LIST
76847: LIST
76848: LIST
76849: PUSH
76850: LD_VAR 0 1
76854: PUSH
76855: LD_INT 3
76857: PLUS
76858: PUSH
76859: LD_VAR 0 2
76863: PUSH
76864: LD_INT 4
76866: PUSH
76867: EMPTY
76868: LIST
76869: LIST
76870: LIST
76871: PUSH
76872: LD_VAR 0 1
76876: PUSH
76877: LD_VAR 0 2
76881: PUSH
76882: LD_INT 3
76884: PLUS
76885: PUSH
76886: LD_INT 0
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: LIST
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: LIST
76898: LIST
76899: LIST
76900: ST_TO_ADDR
// end ; end ;
76901: GO 76904
76903: POP
// result := list ;
76904: LD_ADDR_VAR 0 4
76908: PUSH
76909: LD_VAR 0 5
76913: ST_TO_ADDR
// end ;
76914: LD_VAR 0 4
76918: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76919: LD_INT 0
76921: PPUSH
76922: PPUSH
76923: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76924: LD_VAR 0 1
76928: NOT
76929: PUSH
76930: LD_VAR 0 2
76934: PUSH
76935: LD_INT 1
76937: PUSH
76938: LD_INT 2
76940: PUSH
76941: LD_INT 3
76943: PUSH
76944: LD_INT 4
76946: PUSH
76947: EMPTY
76948: LIST
76949: LIST
76950: LIST
76951: LIST
76952: IN
76953: NOT
76954: OR
76955: IFFALSE 76959
// exit ;
76957: GO 77042
// tmp := [ ] ;
76959: LD_ADDR_VAR 0 5
76963: PUSH
76964: EMPTY
76965: ST_TO_ADDR
// for i in units do
76966: LD_ADDR_VAR 0 4
76970: PUSH
76971: LD_VAR 0 1
76975: PUSH
76976: FOR_IN
76977: IFFALSE 77011
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76979: LD_ADDR_VAR 0 5
76983: PUSH
76984: LD_VAR 0 5
76988: PPUSH
76989: LD_VAR 0 4
76993: PPUSH
76994: LD_VAR 0 2
76998: PPUSH
76999: CALL_OW 259
77003: PPUSH
77004: CALL 78415 0 2
77008: ST_TO_ADDR
77009: GO 76976
77011: POP
77012: POP
// if not tmp then
77013: LD_VAR 0 5
77017: NOT
77018: IFFALSE 77022
// exit ;
77020: GO 77042
// result := SortListByListDesc ( units , tmp ) ;
77022: LD_ADDR_VAR 0 3
77026: PUSH
77027: LD_VAR 0 1
77031: PPUSH
77032: LD_VAR 0 5
77036: PPUSH
77037: CALL_OW 77
77041: ST_TO_ADDR
// end ;
77042: LD_VAR 0 3
77046: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77047: LD_INT 0
77049: PPUSH
77050: PPUSH
77051: PPUSH
// result := false ;
77052: LD_ADDR_VAR 0 3
77056: PUSH
77057: LD_INT 0
77059: ST_TO_ADDR
// if not building then
77060: LD_VAR 0 2
77064: NOT
77065: IFFALSE 77069
// exit ;
77067: GO 77207
// x := GetX ( building ) ;
77069: LD_ADDR_VAR 0 4
77073: PUSH
77074: LD_VAR 0 2
77078: PPUSH
77079: CALL_OW 250
77083: ST_TO_ADDR
// y := GetY ( building ) ;
77084: LD_ADDR_VAR 0 5
77088: PUSH
77089: LD_VAR 0 2
77093: PPUSH
77094: CALL_OW 251
77098: ST_TO_ADDR
// if not x or not y then
77099: LD_VAR 0 4
77103: NOT
77104: PUSH
77105: LD_VAR 0 5
77109: NOT
77110: OR
77111: IFFALSE 77115
// exit ;
77113: GO 77207
// if GetTaskList ( unit ) then
77115: LD_VAR 0 1
77119: PPUSH
77120: CALL_OW 437
77124: IFFALSE 77207
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77126: LD_STRING e
77128: PUSH
77129: LD_VAR 0 1
77133: PPUSH
77134: CALL_OW 437
77138: PUSH
77139: LD_INT 1
77141: ARRAY
77142: PUSH
77143: LD_INT 1
77145: ARRAY
77146: EQUAL
77147: PUSH
77148: LD_VAR 0 4
77152: PUSH
77153: LD_VAR 0 1
77157: PPUSH
77158: CALL_OW 437
77162: PUSH
77163: LD_INT 1
77165: ARRAY
77166: PUSH
77167: LD_INT 2
77169: ARRAY
77170: EQUAL
77171: AND
77172: PUSH
77173: LD_VAR 0 5
77177: PUSH
77178: LD_VAR 0 1
77182: PPUSH
77183: CALL_OW 437
77187: PUSH
77188: LD_INT 1
77190: ARRAY
77191: PUSH
77192: LD_INT 3
77194: ARRAY
77195: EQUAL
77196: AND
77197: IFFALSE 77207
// result := true end ;
77199: LD_ADDR_VAR 0 3
77203: PUSH
77204: LD_INT 1
77206: ST_TO_ADDR
// end ;
77207: LD_VAR 0 3
77211: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77212: LD_INT 0
77214: PPUSH
// result := false ;
77215: LD_ADDR_VAR 0 4
77219: PUSH
77220: LD_INT 0
77222: ST_TO_ADDR
// if GetTaskList ( unit ) then
77223: LD_VAR 0 1
77227: PPUSH
77228: CALL_OW 437
77232: IFFALSE 77315
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77234: LD_STRING M
77236: PUSH
77237: LD_VAR 0 1
77241: PPUSH
77242: CALL_OW 437
77246: PUSH
77247: LD_INT 1
77249: ARRAY
77250: PUSH
77251: LD_INT 1
77253: ARRAY
77254: EQUAL
77255: PUSH
77256: LD_VAR 0 2
77260: PUSH
77261: LD_VAR 0 1
77265: PPUSH
77266: CALL_OW 437
77270: PUSH
77271: LD_INT 1
77273: ARRAY
77274: PUSH
77275: LD_INT 2
77277: ARRAY
77278: EQUAL
77279: AND
77280: PUSH
77281: LD_VAR 0 3
77285: PUSH
77286: LD_VAR 0 1
77290: PPUSH
77291: CALL_OW 437
77295: PUSH
77296: LD_INT 1
77298: ARRAY
77299: PUSH
77300: LD_INT 3
77302: ARRAY
77303: EQUAL
77304: AND
77305: IFFALSE 77315
// result := true ;
77307: LD_ADDR_VAR 0 4
77311: PUSH
77312: LD_INT 1
77314: ST_TO_ADDR
// end ; end ;
77315: LD_VAR 0 4
77319: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77320: LD_INT 0
77322: PPUSH
77323: PPUSH
77324: PPUSH
77325: PPUSH
// if not unit or not area then
77326: LD_VAR 0 1
77330: NOT
77331: PUSH
77332: LD_VAR 0 2
77336: NOT
77337: OR
77338: IFFALSE 77342
// exit ;
77340: GO 77518
// tmp := AreaToList ( area , i ) ;
77342: LD_ADDR_VAR 0 6
77346: PUSH
77347: LD_VAR 0 2
77351: PPUSH
77352: LD_VAR 0 5
77356: PPUSH
77357: CALL_OW 517
77361: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77362: LD_ADDR_VAR 0 5
77366: PUSH
77367: DOUBLE
77368: LD_INT 1
77370: DEC
77371: ST_TO_ADDR
77372: LD_VAR 0 6
77376: PUSH
77377: LD_INT 1
77379: ARRAY
77380: PUSH
77381: FOR_TO
77382: IFFALSE 77516
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77384: LD_ADDR_VAR 0 7
77388: PUSH
77389: LD_VAR 0 6
77393: PUSH
77394: LD_INT 1
77396: ARRAY
77397: PUSH
77398: LD_VAR 0 5
77402: ARRAY
77403: PUSH
77404: LD_VAR 0 6
77408: PUSH
77409: LD_INT 2
77411: ARRAY
77412: PUSH
77413: LD_VAR 0 5
77417: ARRAY
77418: PUSH
77419: EMPTY
77420: LIST
77421: LIST
77422: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77423: LD_INT 92
77425: PUSH
77426: LD_VAR 0 7
77430: PUSH
77431: LD_INT 1
77433: ARRAY
77434: PUSH
77435: LD_VAR 0 7
77439: PUSH
77440: LD_INT 2
77442: ARRAY
77443: PUSH
77444: LD_INT 2
77446: PUSH
77447: EMPTY
77448: LIST
77449: LIST
77450: LIST
77451: LIST
77452: PPUSH
77453: CALL_OW 69
77457: PUSH
77458: LD_INT 0
77460: EQUAL
77461: IFFALSE 77514
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77463: LD_VAR 0 1
77467: PPUSH
77468: LD_VAR 0 7
77472: PUSH
77473: LD_INT 1
77475: ARRAY
77476: PPUSH
77477: LD_VAR 0 7
77481: PUSH
77482: LD_INT 2
77484: ARRAY
77485: PPUSH
77486: LD_VAR 0 3
77490: PPUSH
77491: CALL_OW 48
// result := IsPlaced ( unit ) ;
77495: LD_ADDR_VAR 0 4
77499: PUSH
77500: LD_VAR 0 1
77504: PPUSH
77505: CALL_OW 305
77509: ST_TO_ADDR
// exit ;
77510: POP
77511: POP
77512: GO 77518
// end ; end ;
77514: GO 77381
77516: POP
77517: POP
// end ;
77518: LD_VAR 0 4
77522: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77523: LD_INT 0
77525: PPUSH
77526: PPUSH
77527: PPUSH
// if not side or side > 8 then
77528: LD_VAR 0 1
77532: NOT
77533: PUSH
77534: LD_VAR 0 1
77538: PUSH
77539: LD_INT 8
77541: GREATER
77542: OR
77543: IFFALSE 77547
// exit ;
77545: GO 77734
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77547: LD_ADDR_VAR 0 4
77551: PUSH
77552: LD_INT 22
77554: PUSH
77555: LD_VAR 0 1
77559: PUSH
77560: EMPTY
77561: LIST
77562: LIST
77563: PUSH
77564: LD_INT 21
77566: PUSH
77567: LD_INT 3
77569: PUSH
77570: EMPTY
77571: LIST
77572: LIST
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: PPUSH
77578: CALL_OW 69
77582: ST_TO_ADDR
// if not tmp then
77583: LD_VAR 0 4
77587: NOT
77588: IFFALSE 77592
// exit ;
77590: GO 77734
// enable_addtolog := true ;
77592: LD_ADDR_OWVAR 81
77596: PUSH
77597: LD_INT 1
77599: ST_TO_ADDR
// AddToLog ( [ ) ;
77600: LD_STRING [
77602: PPUSH
77603: CALL_OW 561
// for i in tmp do
77607: LD_ADDR_VAR 0 3
77611: PUSH
77612: LD_VAR 0 4
77616: PUSH
77617: FOR_IN
77618: IFFALSE 77725
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77620: LD_STRING [
77622: PUSH
77623: LD_VAR 0 3
77627: PPUSH
77628: CALL_OW 266
77632: STR
77633: PUSH
77634: LD_STRING , 
77636: STR
77637: PUSH
77638: LD_VAR 0 3
77642: PPUSH
77643: CALL_OW 250
77647: STR
77648: PUSH
77649: LD_STRING , 
77651: STR
77652: PUSH
77653: LD_VAR 0 3
77657: PPUSH
77658: CALL_OW 251
77662: STR
77663: PUSH
77664: LD_STRING , 
77666: STR
77667: PUSH
77668: LD_VAR 0 3
77672: PPUSH
77673: CALL_OW 254
77677: STR
77678: PUSH
77679: LD_STRING , 
77681: STR
77682: PUSH
77683: LD_VAR 0 3
77687: PPUSH
77688: LD_INT 1
77690: PPUSH
77691: CALL_OW 268
77695: STR
77696: PUSH
77697: LD_STRING , 
77699: STR
77700: PUSH
77701: LD_VAR 0 3
77705: PPUSH
77706: LD_INT 2
77708: PPUSH
77709: CALL_OW 268
77713: STR
77714: PUSH
77715: LD_STRING ],
77717: STR
77718: PPUSH
77719: CALL_OW 561
// end ;
77723: GO 77617
77725: POP
77726: POP
// AddToLog ( ]; ) ;
77727: LD_STRING ];
77729: PPUSH
77730: CALL_OW 561
// end ;
77734: LD_VAR 0 2
77738: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77739: LD_INT 0
77741: PPUSH
77742: PPUSH
77743: PPUSH
77744: PPUSH
77745: PPUSH
// if not area or not rate or not max then
77746: LD_VAR 0 1
77750: NOT
77751: PUSH
77752: LD_VAR 0 2
77756: NOT
77757: OR
77758: PUSH
77759: LD_VAR 0 4
77763: NOT
77764: OR
77765: IFFALSE 77769
// exit ;
77767: GO 77958
// while 1 do
77769: LD_INT 1
77771: IFFALSE 77958
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77773: LD_ADDR_VAR 0 9
77777: PUSH
77778: LD_VAR 0 1
77782: PPUSH
77783: LD_INT 1
77785: PPUSH
77786: CALL_OW 287
77790: PUSH
77791: LD_INT 10
77793: MUL
77794: ST_TO_ADDR
// r := rate / 10 ;
77795: LD_ADDR_VAR 0 7
77799: PUSH
77800: LD_VAR 0 2
77804: PUSH
77805: LD_INT 10
77807: DIVREAL
77808: ST_TO_ADDR
// time := 1 1$00 ;
77809: LD_ADDR_VAR 0 8
77813: PUSH
77814: LD_INT 2100
77816: ST_TO_ADDR
// if amount < min then
77817: LD_VAR 0 9
77821: PUSH
77822: LD_VAR 0 3
77826: LESS
77827: IFFALSE 77845
// r := r * 2 else
77829: LD_ADDR_VAR 0 7
77833: PUSH
77834: LD_VAR 0 7
77838: PUSH
77839: LD_INT 2
77841: MUL
77842: ST_TO_ADDR
77843: GO 77871
// if amount > max then
77845: LD_VAR 0 9
77849: PUSH
77850: LD_VAR 0 4
77854: GREATER
77855: IFFALSE 77871
// r := r / 2 ;
77857: LD_ADDR_VAR 0 7
77861: PUSH
77862: LD_VAR 0 7
77866: PUSH
77867: LD_INT 2
77869: DIVREAL
77870: ST_TO_ADDR
// time := time / r ;
77871: LD_ADDR_VAR 0 8
77875: PUSH
77876: LD_VAR 0 8
77880: PUSH
77881: LD_VAR 0 7
77885: DIVREAL
77886: ST_TO_ADDR
// if time < 0 then
77887: LD_VAR 0 8
77891: PUSH
77892: LD_INT 0
77894: LESS
77895: IFFALSE 77912
// time := time * - 1 ;
77897: LD_ADDR_VAR 0 8
77901: PUSH
77902: LD_VAR 0 8
77906: PUSH
77907: LD_INT 1
77909: NEG
77910: MUL
77911: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77912: LD_VAR 0 8
77916: PUSH
77917: LD_INT 35
77919: PPUSH
77920: LD_INT 875
77922: PPUSH
77923: CALL_OW 12
77927: PLUS
77928: PPUSH
77929: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77933: LD_INT 1
77935: PPUSH
77936: LD_INT 5
77938: PPUSH
77939: CALL_OW 12
77943: PPUSH
77944: LD_VAR 0 1
77948: PPUSH
77949: LD_INT 1
77951: PPUSH
77952: CALL_OW 55
// end ;
77956: GO 77769
// end ;
77958: LD_VAR 0 5
77962: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77963: LD_INT 0
77965: PPUSH
77966: PPUSH
77967: PPUSH
77968: PPUSH
77969: PPUSH
77970: PPUSH
77971: PPUSH
77972: PPUSH
// if not turrets or not factories then
77973: LD_VAR 0 1
77977: NOT
77978: PUSH
77979: LD_VAR 0 2
77983: NOT
77984: OR
77985: IFFALSE 77989
// exit ;
77987: GO 78296
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77989: LD_ADDR_VAR 0 10
77993: PUSH
77994: LD_INT 5
77996: PUSH
77997: LD_INT 6
77999: PUSH
78000: EMPTY
78001: LIST
78002: LIST
78003: PUSH
78004: LD_INT 2
78006: PUSH
78007: LD_INT 4
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: PUSH
78014: LD_INT 3
78016: PUSH
78017: LD_INT 5
78019: PUSH
78020: EMPTY
78021: LIST
78022: LIST
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: LIST
78028: PUSH
78029: LD_INT 24
78031: PUSH
78032: LD_INT 25
78034: PUSH
78035: EMPTY
78036: LIST
78037: LIST
78038: PUSH
78039: LD_INT 23
78041: PUSH
78042: LD_INT 27
78044: PUSH
78045: EMPTY
78046: LIST
78047: LIST
78048: PUSH
78049: EMPTY
78050: LIST
78051: LIST
78052: PUSH
78053: LD_INT 42
78055: PUSH
78056: LD_INT 43
78058: PUSH
78059: EMPTY
78060: LIST
78061: LIST
78062: PUSH
78063: LD_INT 44
78065: PUSH
78066: LD_INT 46
78068: PUSH
78069: EMPTY
78070: LIST
78071: LIST
78072: PUSH
78073: LD_INT 45
78075: PUSH
78076: LD_INT 47
78078: PUSH
78079: EMPTY
78080: LIST
78081: LIST
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: LIST
78087: PUSH
78088: EMPTY
78089: LIST
78090: LIST
78091: LIST
78092: ST_TO_ADDR
// result := [ ] ;
78093: LD_ADDR_VAR 0 3
78097: PUSH
78098: EMPTY
78099: ST_TO_ADDR
// for i in turrets do
78100: LD_ADDR_VAR 0 4
78104: PUSH
78105: LD_VAR 0 1
78109: PUSH
78110: FOR_IN
78111: IFFALSE 78294
// begin nat := GetNation ( i ) ;
78113: LD_ADDR_VAR 0 7
78117: PUSH
78118: LD_VAR 0 4
78122: PPUSH
78123: CALL_OW 248
78127: ST_TO_ADDR
// weapon := 0 ;
78128: LD_ADDR_VAR 0 8
78132: PUSH
78133: LD_INT 0
78135: ST_TO_ADDR
// if not nat then
78136: LD_VAR 0 7
78140: NOT
78141: IFFALSE 78145
// continue ;
78143: GO 78110
// for j in list [ nat ] do
78145: LD_ADDR_VAR 0 5
78149: PUSH
78150: LD_VAR 0 10
78154: PUSH
78155: LD_VAR 0 7
78159: ARRAY
78160: PUSH
78161: FOR_IN
78162: IFFALSE 78203
// if GetBWeapon ( i ) = j [ 1 ] then
78164: LD_VAR 0 4
78168: PPUSH
78169: CALL_OW 269
78173: PUSH
78174: LD_VAR 0 5
78178: PUSH
78179: LD_INT 1
78181: ARRAY
78182: EQUAL
78183: IFFALSE 78201
// begin weapon := j [ 2 ] ;
78185: LD_ADDR_VAR 0 8
78189: PUSH
78190: LD_VAR 0 5
78194: PUSH
78195: LD_INT 2
78197: ARRAY
78198: ST_TO_ADDR
// break ;
78199: GO 78203
// end ;
78201: GO 78161
78203: POP
78204: POP
// if not weapon then
78205: LD_VAR 0 8
78209: NOT
78210: IFFALSE 78214
// continue ;
78212: GO 78110
// for k in factories do
78214: LD_ADDR_VAR 0 6
78218: PUSH
78219: LD_VAR 0 2
78223: PUSH
78224: FOR_IN
78225: IFFALSE 78290
// begin weapons := AvailableWeaponList ( k ) ;
78227: LD_ADDR_VAR 0 9
78231: PUSH
78232: LD_VAR 0 6
78236: PPUSH
78237: CALL_OW 478
78241: ST_TO_ADDR
// if not weapons then
78242: LD_VAR 0 9
78246: NOT
78247: IFFALSE 78251
// continue ;
78249: GO 78224
// if weapon in weapons then
78251: LD_VAR 0 8
78255: PUSH
78256: LD_VAR 0 9
78260: IN
78261: IFFALSE 78288
// begin result := [ i , weapon ] ;
78263: LD_ADDR_VAR 0 3
78267: PUSH
78268: LD_VAR 0 4
78272: PUSH
78273: LD_VAR 0 8
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: ST_TO_ADDR
// exit ;
78282: POP
78283: POP
78284: POP
78285: POP
78286: GO 78296
// end ; end ;
78288: GO 78224
78290: POP
78291: POP
// end ;
78292: GO 78110
78294: POP
78295: POP
// end ;
78296: LD_VAR 0 3
78300: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78301: LD_INT 0
78303: PPUSH
// if not side or side > 8 then
78304: LD_VAR 0 3
78308: NOT
78309: PUSH
78310: LD_VAR 0 3
78314: PUSH
78315: LD_INT 8
78317: GREATER
78318: OR
78319: IFFALSE 78323
// exit ;
78321: GO 78382
// if not range then
78323: LD_VAR 0 4
78327: NOT
78328: IFFALSE 78339
// range := - 12 ;
78330: LD_ADDR_VAR 0 4
78334: PUSH
78335: LD_INT 12
78337: NEG
78338: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78339: LD_VAR 0 1
78343: PPUSH
78344: LD_VAR 0 2
78348: PPUSH
78349: LD_VAR 0 3
78353: PPUSH
78354: LD_VAR 0 4
78358: PPUSH
78359: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78363: LD_VAR 0 1
78367: PPUSH
78368: LD_VAR 0 2
78372: PPUSH
78373: LD_VAR 0 3
78377: PPUSH
78378: CALL_OW 331
// end ;
78382: LD_VAR 0 5
78386: RET
// export function Video ( mode ) ; begin
78387: LD_INT 0
78389: PPUSH
// ingame_video = mode ;
78390: LD_ADDR_OWVAR 52
78394: PUSH
78395: LD_VAR 0 1
78399: ST_TO_ADDR
// interface_hidden = mode ;
78400: LD_ADDR_OWVAR 54
78404: PUSH
78405: LD_VAR 0 1
78409: ST_TO_ADDR
// end ;
78410: LD_VAR 0 2
78414: RET
// export function Join ( array , element ) ; begin
78415: LD_INT 0
78417: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78418: LD_ADDR_VAR 0 3
78422: PUSH
78423: LD_VAR 0 1
78427: PPUSH
78428: LD_VAR 0 1
78432: PUSH
78433: LD_INT 1
78435: PLUS
78436: PPUSH
78437: LD_VAR 0 2
78441: PPUSH
78442: CALL_OW 1
78446: ST_TO_ADDR
// end ;
78447: LD_VAR 0 3
78451: RET
// export function JoinUnion ( array , element ) ; begin
78452: LD_INT 0
78454: PPUSH
// result := array union element ;
78455: LD_ADDR_VAR 0 3
78459: PUSH
78460: LD_VAR 0 1
78464: PUSH
78465: LD_VAR 0 2
78469: UNION
78470: ST_TO_ADDR
// end ;
78471: LD_VAR 0 3
78475: RET
// export function GetBehemoths ( side ) ; begin
78476: LD_INT 0
78478: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78479: LD_ADDR_VAR 0 2
78483: PUSH
78484: LD_INT 22
78486: PUSH
78487: LD_VAR 0 1
78491: PUSH
78492: EMPTY
78493: LIST
78494: LIST
78495: PUSH
78496: LD_INT 31
78498: PUSH
78499: LD_INT 25
78501: PUSH
78502: EMPTY
78503: LIST
78504: LIST
78505: PUSH
78506: EMPTY
78507: LIST
78508: LIST
78509: PPUSH
78510: CALL_OW 69
78514: ST_TO_ADDR
// end ;
78515: LD_VAR 0 2
78519: RET
// export function Shuffle ( array ) ; var i , index ; begin
78520: LD_INT 0
78522: PPUSH
78523: PPUSH
78524: PPUSH
// result := [ ] ;
78525: LD_ADDR_VAR 0 2
78529: PUSH
78530: EMPTY
78531: ST_TO_ADDR
// if not array then
78532: LD_VAR 0 1
78536: NOT
78537: IFFALSE 78541
// exit ;
78539: GO 78640
// Randomize ;
78541: CALL_OW 10
// for i = array downto 1 do
78545: LD_ADDR_VAR 0 3
78549: PUSH
78550: DOUBLE
78551: LD_VAR 0 1
78555: INC
78556: ST_TO_ADDR
78557: LD_INT 1
78559: PUSH
78560: FOR_DOWNTO
78561: IFFALSE 78638
// begin index := rand ( 1 , array ) ;
78563: LD_ADDR_VAR 0 4
78567: PUSH
78568: LD_INT 1
78570: PPUSH
78571: LD_VAR 0 1
78575: PPUSH
78576: CALL_OW 12
78580: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78581: LD_ADDR_VAR 0 2
78585: PUSH
78586: LD_VAR 0 2
78590: PPUSH
78591: LD_VAR 0 2
78595: PUSH
78596: LD_INT 1
78598: PLUS
78599: PPUSH
78600: LD_VAR 0 1
78604: PUSH
78605: LD_VAR 0 4
78609: ARRAY
78610: PPUSH
78611: CALL_OW 2
78615: ST_TO_ADDR
// array := Delete ( array , index ) ;
78616: LD_ADDR_VAR 0 1
78620: PUSH
78621: LD_VAR 0 1
78625: PPUSH
78626: LD_VAR 0 4
78630: PPUSH
78631: CALL_OW 3
78635: ST_TO_ADDR
// end ;
78636: GO 78560
78638: POP
78639: POP
// end ;
78640: LD_VAR 0 2
78644: RET
// export function GetBaseMaterials ( base ) ; begin
78645: LD_INT 0
78647: PPUSH
// result := [ 0 , 0 , 0 ] ;
78648: LD_ADDR_VAR 0 2
78652: PUSH
78653: LD_INT 0
78655: PUSH
78656: LD_INT 0
78658: PUSH
78659: LD_INT 0
78661: PUSH
78662: EMPTY
78663: LIST
78664: LIST
78665: LIST
78666: ST_TO_ADDR
// if not base then
78667: LD_VAR 0 1
78671: NOT
78672: IFFALSE 78676
// exit ;
78674: GO 78725
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78676: LD_ADDR_VAR 0 2
78680: PUSH
78681: LD_VAR 0 1
78685: PPUSH
78686: LD_INT 1
78688: PPUSH
78689: CALL_OW 275
78693: PUSH
78694: LD_VAR 0 1
78698: PPUSH
78699: LD_INT 2
78701: PPUSH
78702: CALL_OW 275
78706: PUSH
78707: LD_VAR 0 1
78711: PPUSH
78712: LD_INT 3
78714: PPUSH
78715: CALL_OW 275
78719: PUSH
78720: EMPTY
78721: LIST
78722: LIST
78723: LIST
78724: ST_TO_ADDR
// end ;
78725: LD_VAR 0 2
78729: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78730: LD_INT 0
78732: PPUSH
78733: PPUSH
// result := array ;
78734: LD_ADDR_VAR 0 3
78738: PUSH
78739: LD_VAR 0 1
78743: ST_TO_ADDR
// if size >= result then
78744: LD_VAR 0 2
78748: PUSH
78749: LD_VAR 0 3
78753: GREATEREQUAL
78754: IFFALSE 78758
// exit ;
78756: GO 78808
// if size then
78758: LD_VAR 0 2
78762: IFFALSE 78808
// for i := array downto size do
78764: LD_ADDR_VAR 0 4
78768: PUSH
78769: DOUBLE
78770: LD_VAR 0 1
78774: INC
78775: ST_TO_ADDR
78776: LD_VAR 0 2
78780: PUSH
78781: FOR_DOWNTO
78782: IFFALSE 78806
// result := Delete ( result , result ) ;
78784: LD_ADDR_VAR 0 3
78788: PUSH
78789: LD_VAR 0 3
78793: PPUSH
78794: LD_VAR 0 3
78798: PPUSH
78799: CALL_OW 3
78803: ST_TO_ADDR
78804: GO 78781
78806: POP
78807: POP
// end ;
78808: LD_VAR 0 3
78812: RET
// export function ComExit ( unit ) ; var tmp ; begin
78813: LD_INT 0
78815: PPUSH
78816: PPUSH
// if not IsInUnit ( unit ) then
78817: LD_VAR 0 1
78821: PPUSH
78822: CALL_OW 310
78826: NOT
78827: IFFALSE 78831
// exit ;
78829: GO 78891
// tmp := IsInUnit ( unit ) ;
78831: LD_ADDR_VAR 0 3
78835: PUSH
78836: LD_VAR 0 1
78840: PPUSH
78841: CALL_OW 310
78845: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78846: LD_VAR 0 3
78850: PPUSH
78851: CALL_OW 247
78855: PUSH
78856: LD_INT 2
78858: EQUAL
78859: IFFALSE 78872
// ComExitVehicle ( unit ) else
78861: LD_VAR 0 1
78865: PPUSH
78866: CALL_OW 121
78870: GO 78881
// ComExitBuilding ( unit ) ;
78872: LD_VAR 0 1
78876: PPUSH
78877: CALL_OW 122
// result := tmp ;
78881: LD_ADDR_VAR 0 2
78885: PUSH
78886: LD_VAR 0 3
78890: ST_TO_ADDR
// end ;
78891: LD_VAR 0 2
78895: RET
// export function ComExitAll ( units ) ; var i ; begin
78896: LD_INT 0
78898: PPUSH
78899: PPUSH
// if not units then
78900: LD_VAR 0 1
78904: NOT
78905: IFFALSE 78909
// exit ;
78907: GO 78935
// for i in units do
78909: LD_ADDR_VAR 0 3
78913: PUSH
78914: LD_VAR 0 1
78918: PUSH
78919: FOR_IN
78920: IFFALSE 78933
// ComExit ( i ) ;
78922: LD_VAR 0 3
78926: PPUSH
78927: CALL 78813 0 1
78931: GO 78919
78933: POP
78934: POP
// end ;
78935: LD_VAR 0 2
78939: RET
// export function ResetHc ; begin
78940: LD_INT 0
78942: PPUSH
// InitHc ;
78943: CALL_OW 19
// hc_importance := 0 ;
78947: LD_ADDR_OWVAR 32
78951: PUSH
78952: LD_INT 0
78954: ST_TO_ADDR
// end ;
78955: LD_VAR 0 1
78959: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78960: LD_INT 0
78962: PPUSH
78963: PPUSH
78964: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78965: LD_ADDR_VAR 0 6
78969: PUSH
78970: LD_VAR 0 1
78974: PUSH
78975: LD_VAR 0 3
78979: PLUS
78980: PUSH
78981: LD_INT 2
78983: DIV
78984: ST_TO_ADDR
// if _x < 0 then
78985: LD_VAR 0 6
78989: PUSH
78990: LD_INT 0
78992: LESS
78993: IFFALSE 79010
// _x := _x * - 1 ;
78995: LD_ADDR_VAR 0 6
78999: PUSH
79000: LD_VAR 0 6
79004: PUSH
79005: LD_INT 1
79007: NEG
79008: MUL
79009: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79010: LD_ADDR_VAR 0 7
79014: PUSH
79015: LD_VAR 0 2
79019: PUSH
79020: LD_VAR 0 4
79024: PLUS
79025: PUSH
79026: LD_INT 2
79028: DIV
79029: ST_TO_ADDR
// if _y < 0 then
79030: LD_VAR 0 7
79034: PUSH
79035: LD_INT 0
79037: LESS
79038: IFFALSE 79055
// _y := _y * - 1 ;
79040: LD_ADDR_VAR 0 7
79044: PUSH
79045: LD_VAR 0 7
79049: PUSH
79050: LD_INT 1
79052: NEG
79053: MUL
79054: ST_TO_ADDR
// result := [ _x , _y ] ;
79055: LD_ADDR_VAR 0 5
79059: PUSH
79060: LD_VAR 0 6
79064: PUSH
79065: LD_VAR 0 7
79069: PUSH
79070: EMPTY
79071: LIST
79072: LIST
79073: ST_TO_ADDR
// end ;
79074: LD_VAR 0 5
79078: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79079: LD_INT 0
79081: PPUSH
79082: PPUSH
79083: PPUSH
79084: PPUSH
// task := GetTaskList ( unit ) ;
79085: LD_ADDR_VAR 0 7
79089: PUSH
79090: LD_VAR 0 1
79094: PPUSH
79095: CALL_OW 437
79099: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79100: LD_VAR 0 7
79104: NOT
79105: PUSH
79106: LD_VAR 0 1
79110: PPUSH
79111: LD_VAR 0 2
79115: PPUSH
79116: CALL_OW 308
79120: NOT
79121: AND
79122: IFFALSE 79126
// exit ;
79124: GO 79244
// if IsInArea ( unit , area ) then
79126: LD_VAR 0 1
79130: PPUSH
79131: LD_VAR 0 2
79135: PPUSH
79136: CALL_OW 308
79140: IFFALSE 79158
// begin ComMoveToArea ( unit , goAway ) ;
79142: LD_VAR 0 1
79146: PPUSH
79147: LD_VAR 0 3
79151: PPUSH
79152: CALL_OW 113
// exit ;
79156: GO 79244
// end ; if task [ 1 ] [ 1 ] <> M then
79158: LD_VAR 0 7
79162: PUSH
79163: LD_INT 1
79165: ARRAY
79166: PUSH
79167: LD_INT 1
79169: ARRAY
79170: PUSH
79171: LD_STRING M
79173: NONEQUAL
79174: IFFALSE 79178
// exit ;
79176: GO 79244
// x := task [ 1 ] [ 2 ] ;
79178: LD_ADDR_VAR 0 5
79182: PUSH
79183: LD_VAR 0 7
79187: PUSH
79188: LD_INT 1
79190: ARRAY
79191: PUSH
79192: LD_INT 2
79194: ARRAY
79195: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79196: LD_ADDR_VAR 0 6
79200: PUSH
79201: LD_VAR 0 7
79205: PUSH
79206: LD_INT 1
79208: ARRAY
79209: PUSH
79210: LD_INT 3
79212: ARRAY
79213: ST_TO_ADDR
// if InArea ( x , y , area ) then
79214: LD_VAR 0 5
79218: PPUSH
79219: LD_VAR 0 6
79223: PPUSH
79224: LD_VAR 0 2
79228: PPUSH
79229: CALL_OW 309
79233: IFFALSE 79244
// ComStop ( unit ) ;
79235: LD_VAR 0 1
79239: PPUSH
79240: CALL_OW 141
// end ;
79244: LD_VAR 0 4
79248: RET
// export function Abs ( value ) ; begin
79249: LD_INT 0
79251: PPUSH
// result := value ;
79252: LD_ADDR_VAR 0 2
79256: PUSH
79257: LD_VAR 0 1
79261: ST_TO_ADDR
// if value < 0 then
79262: LD_VAR 0 1
79266: PUSH
79267: LD_INT 0
79269: LESS
79270: IFFALSE 79287
// result := value * - 1 ;
79272: LD_ADDR_VAR 0 2
79276: PUSH
79277: LD_VAR 0 1
79281: PUSH
79282: LD_INT 1
79284: NEG
79285: MUL
79286: ST_TO_ADDR
// end ;
79287: LD_VAR 0 2
79291: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79292: LD_INT 0
79294: PPUSH
79295: PPUSH
79296: PPUSH
79297: PPUSH
79298: PPUSH
79299: PPUSH
79300: PPUSH
79301: PPUSH
// if not unit or not building then
79302: LD_VAR 0 1
79306: NOT
79307: PUSH
79308: LD_VAR 0 2
79312: NOT
79313: OR
79314: IFFALSE 79318
// exit ;
79316: GO 79544
// x := GetX ( building ) ;
79318: LD_ADDR_VAR 0 4
79322: PUSH
79323: LD_VAR 0 2
79327: PPUSH
79328: CALL_OW 250
79332: ST_TO_ADDR
// y := GetY ( building ) ;
79333: LD_ADDR_VAR 0 6
79337: PUSH
79338: LD_VAR 0 2
79342: PPUSH
79343: CALL_OW 251
79347: ST_TO_ADDR
// d := GetDir ( building ) ;
79348: LD_ADDR_VAR 0 8
79352: PUSH
79353: LD_VAR 0 2
79357: PPUSH
79358: CALL_OW 254
79362: ST_TO_ADDR
// r := 4 ;
79363: LD_ADDR_VAR 0 9
79367: PUSH
79368: LD_INT 4
79370: ST_TO_ADDR
// for i := 1 to 5 do
79371: LD_ADDR_VAR 0 10
79375: PUSH
79376: DOUBLE
79377: LD_INT 1
79379: DEC
79380: ST_TO_ADDR
79381: LD_INT 5
79383: PUSH
79384: FOR_TO
79385: IFFALSE 79542
// begin _x := ShiftX ( x , d , r + i ) ;
79387: LD_ADDR_VAR 0 5
79391: PUSH
79392: LD_VAR 0 4
79396: PPUSH
79397: LD_VAR 0 8
79401: PPUSH
79402: LD_VAR 0 9
79406: PUSH
79407: LD_VAR 0 10
79411: PLUS
79412: PPUSH
79413: CALL_OW 272
79417: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79418: LD_ADDR_VAR 0 7
79422: PUSH
79423: LD_VAR 0 6
79427: PPUSH
79428: LD_VAR 0 8
79432: PPUSH
79433: LD_VAR 0 9
79437: PUSH
79438: LD_VAR 0 10
79442: PLUS
79443: PPUSH
79444: CALL_OW 273
79448: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79449: LD_VAR 0 5
79453: PPUSH
79454: LD_VAR 0 7
79458: PPUSH
79459: CALL_OW 488
79463: PUSH
79464: LD_VAR 0 5
79468: PPUSH
79469: LD_VAR 0 7
79473: PPUSH
79474: CALL_OW 428
79478: PPUSH
79479: CALL_OW 247
79483: PUSH
79484: LD_INT 3
79486: PUSH
79487: LD_INT 2
79489: PUSH
79490: EMPTY
79491: LIST
79492: LIST
79493: IN
79494: NOT
79495: AND
79496: IFFALSE 79540
// begin ComMoveXY ( unit , _x , _y ) ;
79498: LD_VAR 0 1
79502: PPUSH
79503: LD_VAR 0 5
79507: PPUSH
79508: LD_VAR 0 7
79512: PPUSH
79513: CALL_OW 111
// result := [ _x , _y ] ;
79517: LD_ADDR_VAR 0 3
79521: PUSH
79522: LD_VAR 0 5
79526: PUSH
79527: LD_VAR 0 7
79531: PUSH
79532: EMPTY
79533: LIST
79534: LIST
79535: ST_TO_ADDR
// exit ;
79536: POP
79537: POP
79538: GO 79544
// end ; end ;
79540: GO 79384
79542: POP
79543: POP
// end ;
79544: LD_VAR 0 3
79548: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79549: LD_INT 0
79551: PPUSH
79552: PPUSH
79553: PPUSH
// result := 0 ;
79554: LD_ADDR_VAR 0 3
79558: PUSH
79559: LD_INT 0
79561: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79562: LD_VAR 0 1
79566: PUSH
79567: LD_INT 0
79569: LESS
79570: PUSH
79571: LD_VAR 0 1
79575: PUSH
79576: LD_INT 8
79578: GREATER
79579: OR
79580: PUSH
79581: LD_VAR 0 2
79585: PUSH
79586: LD_INT 0
79588: LESS
79589: OR
79590: PUSH
79591: LD_VAR 0 2
79595: PUSH
79596: LD_INT 8
79598: GREATER
79599: OR
79600: IFFALSE 79604
// exit ;
79602: GO 79679
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79604: LD_ADDR_VAR 0 4
79608: PUSH
79609: LD_INT 22
79611: PUSH
79612: LD_VAR 0 2
79616: PUSH
79617: EMPTY
79618: LIST
79619: LIST
79620: PPUSH
79621: CALL_OW 69
79625: PUSH
79626: FOR_IN
79627: IFFALSE 79677
// begin un := UnitShoot ( i ) ;
79629: LD_ADDR_VAR 0 5
79633: PUSH
79634: LD_VAR 0 4
79638: PPUSH
79639: CALL_OW 504
79643: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79644: LD_VAR 0 5
79648: PPUSH
79649: CALL_OW 255
79653: PUSH
79654: LD_VAR 0 1
79658: EQUAL
79659: IFFALSE 79675
// begin result := un ;
79661: LD_ADDR_VAR 0 3
79665: PUSH
79666: LD_VAR 0 5
79670: ST_TO_ADDR
// exit ;
79671: POP
79672: POP
79673: GO 79679
// end ; end ;
79675: GO 79626
79677: POP
79678: POP
// end ;
79679: LD_VAR 0 3
79683: RET
// export function GetCargoBay ( units ) ; begin
79684: LD_INT 0
79686: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79687: LD_ADDR_VAR 0 2
79691: PUSH
79692: LD_VAR 0 1
79696: PPUSH
79697: LD_INT 2
79699: PUSH
79700: LD_INT 34
79702: PUSH
79703: LD_INT 12
79705: PUSH
79706: EMPTY
79707: LIST
79708: LIST
79709: PUSH
79710: LD_INT 34
79712: PUSH
79713: LD_INT 51
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: PUSH
79720: LD_INT 34
79722: PUSH
79723: LD_INT 32
79725: PUSH
79726: EMPTY
79727: LIST
79728: LIST
79729: PUSH
79730: LD_INT 34
79732: PUSH
79733: LD_INT 89
79735: PUSH
79736: EMPTY
79737: LIST
79738: LIST
79739: PUSH
79740: EMPTY
79741: LIST
79742: LIST
79743: LIST
79744: LIST
79745: LIST
79746: PPUSH
79747: CALL_OW 72
79751: ST_TO_ADDR
// end ;
79752: LD_VAR 0 2
79756: RET
// export function Negate ( value ) ; begin
79757: LD_INT 0
79759: PPUSH
// result := not value ;
79760: LD_ADDR_VAR 0 2
79764: PUSH
79765: LD_VAR 0 1
79769: NOT
79770: ST_TO_ADDR
// end ;
79771: LD_VAR 0 2
79775: RET
// export function Inc ( value ) ; begin
79776: LD_INT 0
79778: PPUSH
// result := value + 1 ;
79779: LD_ADDR_VAR 0 2
79783: PUSH
79784: LD_VAR 0 1
79788: PUSH
79789: LD_INT 1
79791: PLUS
79792: ST_TO_ADDR
// end ;
79793: LD_VAR 0 2
79797: RET
// export function Dec ( value ) ; begin
79798: LD_INT 0
79800: PPUSH
// result := value - 1 ;
79801: LD_ADDR_VAR 0 2
79805: PUSH
79806: LD_VAR 0 1
79810: PUSH
79811: LD_INT 1
79813: MINUS
79814: ST_TO_ADDR
// end ;
79815: LD_VAR 0 2
79819: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79820: LD_INT 0
79822: PPUSH
79823: PPUSH
79824: PPUSH
79825: PPUSH
79826: PPUSH
79827: PPUSH
79828: PPUSH
79829: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79830: LD_VAR 0 1
79834: PPUSH
79835: LD_VAR 0 2
79839: PPUSH
79840: CALL_OW 488
79844: NOT
79845: PUSH
79846: LD_VAR 0 3
79850: PPUSH
79851: LD_VAR 0 4
79855: PPUSH
79856: CALL_OW 488
79860: NOT
79861: OR
79862: IFFALSE 79875
// begin result := - 1 ;
79864: LD_ADDR_VAR 0 5
79868: PUSH
79869: LD_INT 1
79871: NEG
79872: ST_TO_ADDR
// exit ;
79873: GO 80110
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79875: LD_ADDR_VAR 0 12
79879: PUSH
79880: LD_VAR 0 1
79884: PPUSH
79885: LD_VAR 0 2
79889: PPUSH
79890: LD_VAR 0 3
79894: PPUSH
79895: LD_VAR 0 4
79899: PPUSH
79900: CALL 78960 0 4
79904: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79905: LD_ADDR_VAR 0 11
79909: PUSH
79910: LD_VAR 0 1
79914: PPUSH
79915: LD_VAR 0 2
79919: PPUSH
79920: LD_VAR 0 12
79924: PUSH
79925: LD_INT 1
79927: ARRAY
79928: PPUSH
79929: LD_VAR 0 12
79933: PUSH
79934: LD_INT 2
79936: ARRAY
79937: PPUSH
79938: CALL_OW 298
79942: ST_TO_ADDR
// distance := 9999 ;
79943: LD_ADDR_VAR 0 10
79947: PUSH
79948: LD_INT 9999
79950: ST_TO_ADDR
// for i := 0 to 5 do
79951: LD_ADDR_VAR 0 6
79955: PUSH
79956: DOUBLE
79957: LD_INT 0
79959: DEC
79960: ST_TO_ADDR
79961: LD_INT 5
79963: PUSH
79964: FOR_TO
79965: IFFALSE 80108
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79967: LD_ADDR_VAR 0 7
79971: PUSH
79972: LD_VAR 0 1
79976: PPUSH
79977: LD_VAR 0 6
79981: PPUSH
79982: LD_VAR 0 11
79986: PPUSH
79987: CALL_OW 272
79991: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79992: LD_ADDR_VAR 0 8
79996: PUSH
79997: LD_VAR 0 2
80001: PPUSH
80002: LD_VAR 0 6
80006: PPUSH
80007: LD_VAR 0 11
80011: PPUSH
80012: CALL_OW 273
80016: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80017: LD_VAR 0 7
80021: PPUSH
80022: LD_VAR 0 8
80026: PPUSH
80027: CALL_OW 488
80031: NOT
80032: IFFALSE 80036
// continue ;
80034: GO 79964
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80036: LD_ADDR_VAR 0 9
80040: PUSH
80041: LD_VAR 0 12
80045: PUSH
80046: LD_INT 1
80048: ARRAY
80049: PPUSH
80050: LD_VAR 0 12
80054: PUSH
80055: LD_INT 2
80057: ARRAY
80058: PPUSH
80059: LD_VAR 0 7
80063: PPUSH
80064: LD_VAR 0 8
80068: PPUSH
80069: CALL_OW 298
80073: ST_TO_ADDR
// if tmp < distance then
80074: LD_VAR 0 9
80078: PUSH
80079: LD_VAR 0 10
80083: LESS
80084: IFFALSE 80106
// begin result := i ;
80086: LD_ADDR_VAR 0 5
80090: PUSH
80091: LD_VAR 0 6
80095: ST_TO_ADDR
// distance := tmp ;
80096: LD_ADDR_VAR 0 10
80100: PUSH
80101: LD_VAR 0 9
80105: ST_TO_ADDR
// end ; end ;
80106: GO 79964
80108: POP
80109: POP
// end ;
80110: LD_VAR 0 5
80114: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80115: LD_INT 0
80117: PPUSH
80118: PPUSH
// if not driver or not IsInUnit ( driver ) then
80119: LD_VAR 0 1
80123: NOT
80124: PUSH
80125: LD_VAR 0 1
80129: PPUSH
80130: CALL_OW 310
80134: NOT
80135: OR
80136: IFFALSE 80140
// exit ;
80138: GO 80230
// vehicle := IsInUnit ( driver ) ;
80140: LD_ADDR_VAR 0 3
80144: PUSH
80145: LD_VAR 0 1
80149: PPUSH
80150: CALL_OW 310
80154: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80155: LD_VAR 0 1
80159: PPUSH
80160: LD_STRING \
80162: PUSH
80163: LD_INT 0
80165: PUSH
80166: LD_INT 0
80168: PUSH
80169: LD_INT 0
80171: PUSH
80172: LD_INT 0
80174: PUSH
80175: LD_INT 0
80177: PUSH
80178: LD_INT 0
80180: PUSH
80181: EMPTY
80182: LIST
80183: LIST
80184: LIST
80185: LIST
80186: LIST
80187: LIST
80188: LIST
80189: PUSH
80190: LD_STRING E
80192: PUSH
80193: LD_INT 0
80195: PUSH
80196: LD_INT 0
80198: PUSH
80199: LD_VAR 0 3
80203: PUSH
80204: LD_INT 0
80206: PUSH
80207: LD_INT 0
80209: PUSH
80210: LD_INT 0
80212: PUSH
80213: EMPTY
80214: LIST
80215: LIST
80216: LIST
80217: LIST
80218: LIST
80219: LIST
80220: LIST
80221: PUSH
80222: EMPTY
80223: LIST
80224: LIST
80225: PPUSH
80226: CALL_OW 446
// end ;
80230: LD_VAR 0 2
80234: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80235: LD_INT 0
80237: PPUSH
80238: PPUSH
// if not driver or not IsInUnit ( driver ) then
80239: LD_VAR 0 1
80243: NOT
80244: PUSH
80245: LD_VAR 0 1
80249: PPUSH
80250: CALL_OW 310
80254: NOT
80255: OR
80256: IFFALSE 80260
// exit ;
80258: GO 80350
// vehicle := IsInUnit ( driver ) ;
80260: LD_ADDR_VAR 0 3
80264: PUSH
80265: LD_VAR 0 1
80269: PPUSH
80270: CALL_OW 310
80274: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80275: LD_VAR 0 1
80279: PPUSH
80280: LD_STRING \
80282: PUSH
80283: LD_INT 0
80285: PUSH
80286: LD_INT 0
80288: PUSH
80289: LD_INT 0
80291: PUSH
80292: LD_INT 0
80294: PUSH
80295: LD_INT 0
80297: PUSH
80298: LD_INT 0
80300: PUSH
80301: EMPTY
80302: LIST
80303: LIST
80304: LIST
80305: LIST
80306: LIST
80307: LIST
80308: LIST
80309: PUSH
80310: LD_STRING E
80312: PUSH
80313: LD_INT 0
80315: PUSH
80316: LD_INT 0
80318: PUSH
80319: LD_VAR 0 3
80323: PUSH
80324: LD_INT 0
80326: PUSH
80327: LD_INT 0
80329: PUSH
80330: LD_INT 0
80332: PUSH
80333: EMPTY
80334: LIST
80335: LIST
80336: LIST
80337: LIST
80338: LIST
80339: LIST
80340: LIST
80341: PUSH
80342: EMPTY
80343: LIST
80344: LIST
80345: PPUSH
80346: CALL_OW 447
// end ;
80350: LD_VAR 0 2
80354: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80355: LD_INT 0
80357: PPUSH
80358: PPUSH
80359: PPUSH
// tmp := [ ] ;
80360: LD_ADDR_VAR 0 5
80364: PUSH
80365: EMPTY
80366: ST_TO_ADDR
// for i in units do
80367: LD_ADDR_VAR 0 4
80371: PUSH
80372: LD_VAR 0 1
80376: PUSH
80377: FOR_IN
80378: IFFALSE 80416
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80380: LD_ADDR_VAR 0 5
80384: PUSH
80385: LD_VAR 0 5
80389: PPUSH
80390: LD_VAR 0 5
80394: PUSH
80395: LD_INT 1
80397: PLUS
80398: PPUSH
80399: LD_VAR 0 4
80403: PPUSH
80404: CALL_OW 256
80408: PPUSH
80409: CALL_OW 2
80413: ST_TO_ADDR
80414: GO 80377
80416: POP
80417: POP
// if not tmp then
80418: LD_VAR 0 5
80422: NOT
80423: IFFALSE 80427
// exit ;
80425: GO 80475
// if asc then
80427: LD_VAR 0 2
80431: IFFALSE 80455
// result := SortListByListAsc ( units , tmp ) else
80433: LD_ADDR_VAR 0 3
80437: PUSH
80438: LD_VAR 0 1
80442: PPUSH
80443: LD_VAR 0 5
80447: PPUSH
80448: CALL_OW 76
80452: ST_TO_ADDR
80453: GO 80475
// result := SortListByListDesc ( units , tmp ) ;
80455: LD_ADDR_VAR 0 3
80459: PUSH
80460: LD_VAR 0 1
80464: PPUSH
80465: LD_VAR 0 5
80469: PPUSH
80470: CALL_OW 77
80474: ST_TO_ADDR
// end ;
80475: LD_VAR 0 3
80479: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80480: LD_INT 0
80482: PPUSH
80483: PPUSH
// task := GetTaskList ( mech ) ;
80484: LD_ADDR_VAR 0 4
80488: PUSH
80489: LD_VAR 0 1
80493: PPUSH
80494: CALL_OW 437
80498: ST_TO_ADDR
// if not task then
80499: LD_VAR 0 4
80503: NOT
80504: IFFALSE 80508
// exit ;
80506: GO 80550
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80508: LD_ADDR_VAR 0 3
80512: PUSH
80513: LD_VAR 0 4
80517: PUSH
80518: LD_INT 1
80520: ARRAY
80521: PUSH
80522: LD_INT 1
80524: ARRAY
80525: PUSH
80526: LD_STRING r
80528: EQUAL
80529: PUSH
80530: LD_VAR 0 4
80534: PUSH
80535: LD_INT 1
80537: ARRAY
80538: PUSH
80539: LD_INT 4
80541: ARRAY
80542: PUSH
80543: LD_VAR 0 2
80547: EQUAL
80548: AND
80549: ST_TO_ADDR
// end ;
80550: LD_VAR 0 3
80554: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80555: LD_INT 0
80557: PPUSH
// SetDir ( unit , d ) ;
80558: LD_VAR 0 1
80562: PPUSH
80563: LD_VAR 0 4
80567: PPUSH
80568: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80572: LD_VAR 0 1
80576: PPUSH
80577: LD_VAR 0 2
80581: PPUSH
80582: LD_VAR 0 3
80586: PPUSH
80587: LD_VAR 0 5
80591: PPUSH
80592: CALL_OW 48
// end ;
80596: LD_VAR 0 6
80600: RET
// export function ToNaturalNumber ( number ) ; begin
80601: LD_INT 0
80603: PPUSH
// result := number div 1 ;
80604: LD_ADDR_VAR 0 2
80608: PUSH
80609: LD_VAR 0 1
80613: PUSH
80614: LD_INT 1
80616: DIV
80617: ST_TO_ADDR
// if number < 0 then
80618: LD_VAR 0 1
80622: PUSH
80623: LD_INT 0
80625: LESS
80626: IFFALSE 80636
// result := 0 ;
80628: LD_ADDR_VAR 0 2
80632: PUSH
80633: LD_INT 0
80635: ST_TO_ADDR
// end ;
80636: LD_VAR 0 2
80640: RET
// export function SortByClass ( units , class ) ; var un ; begin
80641: LD_INT 0
80643: PPUSH
80644: PPUSH
// if not units or not class then
80645: LD_VAR 0 1
80649: NOT
80650: PUSH
80651: LD_VAR 0 2
80655: NOT
80656: OR
80657: IFFALSE 80661
// exit ;
80659: GO 80756
// result := [ ] ;
80661: LD_ADDR_VAR 0 3
80665: PUSH
80666: EMPTY
80667: ST_TO_ADDR
// for un in units do
80668: LD_ADDR_VAR 0 4
80672: PUSH
80673: LD_VAR 0 1
80677: PUSH
80678: FOR_IN
80679: IFFALSE 80754
// if GetClass ( un ) = class then
80681: LD_VAR 0 4
80685: PPUSH
80686: CALL_OW 257
80690: PUSH
80691: LD_VAR 0 2
80695: EQUAL
80696: IFFALSE 80723
// result := Insert ( result , 1 , un ) else
80698: LD_ADDR_VAR 0 3
80702: PUSH
80703: LD_VAR 0 3
80707: PPUSH
80708: LD_INT 1
80710: PPUSH
80711: LD_VAR 0 4
80715: PPUSH
80716: CALL_OW 2
80720: ST_TO_ADDR
80721: GO 80752
// result := Replace ( result , result + 1 , un ) ;
80723: LD_ADDR_VAR 0 3
80727: PUSH
80728: LD_VAR 0 3
80732: PPUSH
80733: LD_VAR 0 3
80737: PUSH
80738: LD_INT 1
80740: PLUS
80741: PPUSH
80742: LD_VAR 0 4
80746: PPUSH
80747: CALL_OW 1
80751: ST_TO_ADDR
80752: GO 80678
80754: POP
80755: POP
// end ;
80756: LD_VAR 0 3
80760: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80761: LD_INT 0
80763: PPUSH
80764: PPUSH
80765: PPUSH
80766: PPUSH
80767: PPUSH
80768: PPUSH
80769: PPUSH
// result := [ ] ;
80770: LD_ADDR_VAR 0 4
80774: PUSH
80775: EMPTY
80776: ST_TO_ADDR
// if x - r < 0 then
80777: LD_VAR 0 1
80781: PUSH
80782: LD_VAR 0 3
80786: MINUS
80787: PUSH
80788: LD_INT 0
80790: LESS
80791: IFFALSE 80803
// min_x := 0 else
80793: LD_ADDR_VAR 0 8
80797: PUSH
80798: LD_INT 0
80800: ST_TO_ADDR
80801: GO 80819
// min_x := x - r ;
80803: LD_ADDR_VAR 0 8
80807: PUSH
80808: LD_VAR 0 1
80812: PUSH
80813: LD_VAR 0 3
80817: MINUS
80818: ST_TO_ADDR
// if y - r < 0 then
80819: LD_VAR 0 2
80823: PUSH
80824: LD_VAR 0 3
80828: MINUS
80829: PUSH
80830: LD_INT 0
80832: LESS
80833: IFFALSE 80845
// min_y := 0 else
80835: LD_ADDR_VAR 0 7
80839: PUSH
80840: LD_INT 0
80842: ST_TO_ADDR
80843: GO 80861
// min_y := y - r ;
80845: LD_ADDR_VAR 0 7
80849: PUSH
80850: LD_VAR 0 2
80854: PUSH
80855: LD_VAR 0 3
80859: MINUS
80860: ST_TO_ADDR
// max_x := x + r ;
80861: LD_ADDR_VAR 0 9
80865: PUSH
80866: LD_VAR 0 1
80870: PUSH
80871: LD_VAR 0 3
80875: PLUS
80876: ST_TO_ADDR
// max_y := y + r ;
80877: LD_ADDR_VAR 0 10
80881: PUSH
80882: LD_VAR 0 2
80886: PUSH
80887: LD_VAR 0 3
80891: PLUS
80892: ST_TO_ADDR
// for _x = min_x to max_x do
80893: LD_ADDR_VAR 0 5
80897: PUSH
80898: DOUBLE
80899: LD_VAR 0 8
80903: DEC
80904: ST_TO_ADDR
80905: LD_VAR 0 9
80909: PUSH
80910: FOR_TO
80911: IFFALSE 81012
// for _y = min_y to max_y do
80913: LD_ADDR_VAR 0 6
80917: PUSH
80918: DOUBLE
80919: LD_VAR 0 7
80923: DEC
80924: ST_TO_ADDR
80925: LD_VAR 0 10
80929: PUSH
80930: FOR_TO
80931: IFFALSE 81008
// begin if not ValidHex ( _x , _y ) then
80933: LD_VAR 0 5
80937: PPUSH
80938: LD_VAR 0 6
80942: PPUSH
80943: CALL_OW 488
80947: NOT
80948: IFFALSE 80952
// continue ;
80950: GO 80930
// if GetResourceTypeXY ( _x , _y ) then
80952: LD_VAR 0 5
80956: PPUSH
80957: LD_VAR 0 6
80961: PPUSH
80962: CALL_OW 283
80966: IFFALSE 81006
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80968: LD_ADDR_VAR 0 4
80972: PUSH
80973: LD_VAR 0 4
80977: PPUSH
80978: LD_VAR 0 4
80982: PUSH
80983: LD_INT 1
80985: PLUS
80986: PPUSH
80987: LD_VAR 0 5
80991: PUSH
80992: LD_VAR 0 6
80996: PUSH
80997: EMPTY
80998: LIST
80999: LIST
81000: PPUSH
81001: CALL_OW 1
81005: ST_TO_ADDR
// end ;
81006: GO 80930
81008: POP
81009: POP
81010: GO 80910
81012: POP
81013: POP
// end ;
81014: LD_VAR 0 4
81018: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81019: LD_INT 0
81021: PPUSH
81022: PPUSH
81023: PPUSH
81024: PPUSH
81025: PPUSH
81026: PPUSH
81027: PPUSH
81028: PPUSH
// if not units then
81029: LD_VAR 0 1
81033: NOT
81034: IFFALSE 81038
// exit ;
81036: GO 81562
// result := UnitFilter ( units , [ f_ok ] ) ;
81038: LD_ADDR_VAR 0 3
81042: PUSH
81043: LD_VAR 0 1
81047: PPUSH
81048: LD_INT 50
81050: PUSH
81051: EMPTY
81052: LIST
81053: PPUSH
81054: CALL_OW 72
81058: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81059: LD_ADDR_VAR 0 8
81063: PUSH
81064: LD_VAR 0 1
81068: PUSH
81069: LD_INT 1
81071: ARRAY
81072: PPUSH
81073: CALL_OW 255
81077: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81078: LD_ADDR_VAR 0 10
81082: PUSH
81083: LD_INT 29
81085: PUSH
81086: LD_INT 91
81088: PUSH
81089: LD_INT 49
81091: PUSH
81092: EMPTY
81093: LIST
81094: LIST
81095: LIST
81096: ST_TO_ADDR
// if not result then
81097: LD_VAR 0 3
81101: NOT
81102: IFFALSE 81106
// exit ;
81104: GO 81562
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81106: LD_ADDR_VAR 0 5
81110: PUSH
81111: LD_INT 81
81113: PUSH
81114: LD_VAR 0 8
81118: PUSH
81119: EMPTY
81120: LIST
81121: LIST
81122: PPUSH
81123: CALL_OW 69
81127: ST_TO_ADDR
// for i in result do
81128: LD_ADDR_VAR 0 4
81132: PUSH
81133: LD_VAR 0 3
81137: PUSH
81138: FOR_IN
81139: IFFALSE 81560
// begin tag := GetTag ( i ) + 1 ;
81141: LD_ADDR_VAR 0 9
81145: PUSH
81146: LD_VAR 0 4
81150: PPUSH
81151: CALL_OW 110
81155: PUSH
81156: LD_INT 1
81158: PLUS
81159: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81160: LD_ADDR_VAR 0 7
81164: PUSH
81165: LD_VAR 0 4
81169: PPUSH
81170: CALL_OW 250
81174: PPUSH
81175: LD_VAR 0 4
81179: PPUSH
81180: CALL_OW 251
81184: PPUSH
81185: LD_INT 6
81187: PPUSH
81188: CALL 80761 0 3
81192: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81193: LD_VAR 0 4
81197: PPUSH
81198: CALL_OW 247
81202: PUSH
81203: LD_INT 2
81205: EQUAL
81206: PUSH
81207: LD_VAR 0 7
81211: AND
81212: PUSH
81213: LD_VAR 0 4
81217: PPUSH
81218: CALL_OW 264
81222: PUSH
81223: LD_VAR 0 10
81227: IN
81228: NOT
81229: AND
81230: IFFALSE 81269
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81232: LD_VAR 0 4
81236: PPUSH
81237: LD_VAR 0 7
81241: PUSH
81242: LD_INT 1
81244: ARRAY
81245: PUSH
81246: LD_INT 1
81248: ARRAY
81249: PPUSH
81250: LD_VAR 0 7
81254: PUSH
81255: LD_INT 1
81257: ARRAY
81258: PUSH
81259: LD_INT 2
81261: ARRAY
81262: PPUSH
81263: CALL_OW 116
81267: GO 81558
// if path > tag then
81269: LD_VAR 0 2
81273: PUSH
81274: LD_VAR 0 9
81278: GREATER
81279: IFFALSE 81487
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81281: LD_ADDR_VAR 0 6
81285: PUSH
81286: LD_VAR 0 5
81290: PPUSH
81291: LD_INT 91
81293: PUSH
81294: LD_VAR 0 4
81298: PUSH
81299: LD_INT 8
81301: PUSH
81302: EMPTY
81303: LIST
81304: LIST
81305: LIST
81306: PPUSH
81307: CALL_OW 72
81311: ST_TO_ADDR
// if nearEnemy then
81312: LD_VAR 0 6
81316: IFFALSE 81385
// begin if GetWeapon ( i ) = ru_time_lapser then
81318: LD_VAR 0 4
81322: PPUSH
81323: CALL_OW 264
81327: PUSH
81328: LD_INT 49
81330: EQUAL
81331: IFFALSE 81359
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81333: LD_VAR 0 4
81337: PPUSH
81338: LD_VAR 0 6
81342: PPUSH
81343: LD_VAR 0 4
81347: PPUSH
81348: CALL_OW 74
81352: PPUSH
81353: CALL_OW 112
81357: GO 81383
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81359: LD_VAR 0 4
81363: PPUSH
81364: LD_VAR 0 6
81368: PPUSH
81369: LD_VAR 0 4
81373: PPUSH
81374: CALL_OW 74
81378: PPUSH
81379: CALL 82487 0 2
// end else
81383: GO 81485
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81385: LD_VAR 0 4
81389: PPUSH
81390: LD_VAR 0 2
81394: PUSH
81395: LD_VAR 0 9
81399: ARRAY
81400: PUSH
81401: LD_INT 1
81403: ARRAY
81404: PPUSH
81405: LD_VAR 0 2
81409: PUSH
81410: LD_VAR 0 9
81414: ARRAY
81415: PUSH
81416: LD_INT 2
81418: ARRAY
81419: PPUSH
81420: CALL_OW 297
81424: PUSH
81425: LD_INT 6
81427: GREATER
81428: IFFALSE 81471
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81430: LD_VAR 0 4
81434: PPUSH
81435: LD_VAR 0 2
81439: PUSH
81440: LD_VAR 0 9
81444: ARRAY
81445: PUSH
81446: LD_INT 1
81448: ARRAY
81449: PPUSH
81450: LD_VAR 0 2
81454: PUSH
81455: LD_VAR 0 9
81459: ARRAY
81460: PUSH
81461: LD_INT 2
81463: ARRAY
81464: PPUSH
81465: CALL_OW 114
81469: GO 81485
// SetTag ( i , tag ) ;
81471: LD_VAR 0 4
81475: PPUSH
81476: LD_VAR 0 9
81480: PPUSH
81481: CALL_OW 109
// end else
81485: GO 81558
// if enemy then
81487: LD_VAR 0 5
81491: IFFALSE 81558
// begin if GetWeapon ( i ) = ru_time_lapser then
81493: LD_VAR 0 4
81497: PPUSH
81498: CALL_OW 264
81502: PUSH
81503: LD_INT 49
81505: EQUAL
81506: IFFALSE 81534
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81508: LD_VAR 0 4
81512: PPUSH
81513: LD_VAR 0 5
81517: PPUSH
81518: LD_VAR 0 4
81522: PPUSH
81523: CALL_OW 74
81527: PPUSH
81528: CALL_OW 112
81532: GO 81558
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81534: LD_VAR 0 4
81538: PPUSH
81539: LD_VAR 0 5
81543: PPUSH
81544: LD_VAR 0 4
81548: PPUSH
81549: CALL_OW 74
81553: PPUSH
81554: CALL 82487 0 2
// end ; end ;
81558: GO 81138
81560: POP
81561: POP
// end ;
81562: LD_VAR 0 3
81566: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81567: LD_INT 0
81569: PPUSH
81570: PPUSH
81571: PPUSH
// if not unit or IsInUnit ( unit ) then
81572: LD_VAR 0 1
81576: NOT
81577: PUSH
81578: LD_VAR 0 1
81582: PPUSH
81583: CALL_OW 310
81587: OR
81588: IFFALSE 81592
// exit ;
81590: GO 81683
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81592: LD_ADDR_VAR 0 4
81596: PUSH
81597: LD_VAR 0 1
81601: PPUSH
81602: CALL_OW 250
81606: PPUSH
81607: LD_VAR 0 2
81611: PPUSH
81612: LD_INT 1
81614: PPUSH
81615: CALL_OW 272
81619: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81620: LD_ADDR_VAR 0 5
81624: PUSH
81625: LD_VAR 0 1
81629: PPUSH
81630: CALL_OW 251
81634: PPUSH
81635: LD_VAR 0 2
81639: PPUSH
81640: LD_INT 1
81642: PPUSH
81643: CALL_OW 273
81647: ST_TO_ADDR
// if ValidHex ( x , y ) then
81648: LD_VAR 0 4
81652: PPUSH
81653: LD_VAR 0 5
81657: PPUSH
81658: CALL_OW 488
81662: IFFALSE 81683
// ComTurnXY ( unit , x , y ) ;
81664: LD_VAR 0 1
81668: PPUSH
81669: LD_VAR 0 4
81673: PPUSH
81674: LD_VAR 0 5
81678: PPUSH
81679: CALL_OW 118
// end ;
81683: LD_VAR 0 3
81687: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81688: LD_INT 0
81690: PPUSH
81691: PPUSH
// result := false ;
81692: LD_ADDR_VAR 0 3
81696: PUSH
81697: LD_INT 0
81699: ST_TO_ADDR
// if not units then
81700: LD_VAR 0 2
81704: NOT
81705: IFFALSE 81709
// exit ;
81707: GO 81754
// for i in units do
81709: LD_ADDR_VAR 0 4
81713: PUSH
81714: LD_VAR 0 2
81718: PUSH
81719: FOR_IN
81720: IFFALSE 81752
// if See ( side , i ) then
81722: LD_VAR 0 1
81726: PPUSH
81727: LD_VAR 0 4
81731: PPUSH
81732: CALL_OW 292
81736: IFFALSE 81750
// begin result := true ;
81738: LD_ADDR_VAR 0 3
81742: PUSH
81743: LD_INT 1
81745: ST_TO_ADDR
// exit ;
81746: POP
81747: POP
81748: GO 81754
// end ;
81750: GO 81719
81752: POP
81753: POP
// end ;
81754: LD_VAR 0 3
81758: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81759: LD_INT 0
81761: PPUSH
81762: PPUSH
81763: PPUSH
81764: PPUSH
// if not unit or not points then
81765: LD_VAR 0 1
81769: NOT
81770: PUSH
81771: LD_VAR 0 2
81775: NOT
81776: OR
81777: IFFALSE 81781
// exit ;
81779: GO 81871
// dist := 99999 ;
81781: LD_ADDR_VAR 0 5
81785: PUSH
81786: LD_INT 99999
81788: ST_TO_ADDR
// for i in points do
81789: LD_ADDR_VAR 0 4
81793: PUSH
81794: LD_VAR 0 2
81798: PUSH
81799: FOR_IN
81800: IFFALSE 81869
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81802: LD_ADDR_VAR 0 6
81806: PUSH
81807: LD_VAR 0 1
81811: PPUSH
81812: LD_VAR 0 4
81816: PUSH
81817: LD_INT 1
81819: ARRAY
81820: PPUSH
81821: LD_VAR 0 4
81825: PUSH
81826: LD_INT 2
81828: ARRAY
81829: PPUSH
81830: CALL_OW 297
81834: ST_TO_ADDR
// if tmpDist < dist then
81835: LD_VAR 0 6
81839: PUSH
81840: LD_VAR 0 5
81844: LESS
81845: IFFALSE 81867
// begin result := i ;
81847: LD_ADDR_VAR 0 3
81851: PUSH
81852: LD_VAR 0 4
81856: ST_TO_ADDR
// dist := tmpDist ;
81857: LD_ADDR_VAR 0 5
81861: PUSH
81862: LD_VAR 0 6
81866: ST_TO_ADDR
// end ; end ;
81867: GO 81799
81869: POP
81870: POP
// end ;
81871: LD_VAR 0 3
81875: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81876: LD_INT 0
81878: PPUSH
// uc_side := side ;
81879: LD_ADDR_OWVAR 20
81883: PUSH
81884: LD_VAR 0 1
81888: ST_TO_ADDR
// uc_nation := 3 ;
81889: LD_ADDR_OWVAR 21
81893: PUSH
81894: LD_INT 3
81896: ST_TO_ADDR
// vc_chassis := 25 ;
81897: LD_ADDR_OWVAR 37
81901: PUSH
81902: LD_INT 25
81904: ST_TO_ADDR
// vc_engine := engine_siberite ;
81905: LD_ADDR_OWVAR 39
81909: PUSH
81910: LD_INT 3
81912: ST_TO_ADDR
// vc_control := control_computer ;
81913: LD_ADDR_OWVAR 38
81917: PUSH
81918: LD_INT 3
81920: ST_TO_ADDR
// vc_weapon := 59 ;
81921: LD_ADDR_OWVAR 40
81925: PUSH
81926: LD_INT 59
81928: ST_TO_ADDR
// result := CreateVehicle ;
81929: LD_ADDR_VAR 0 5
81933: PUSH
81934: CALL_OW 45
81938: ST_TO_ADDR
// SetDir ( result , d ) ;
81939: LD_VAR 0 5
81943: PPUSH
81944: LD_VAR 0 4
81948: PPUSH
81949: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81953: LD_VAR 0 5
81957: PPUSH
81958: LD_VAR 0 2
81962: PPUSH
81963: LD_VAR 0 3
81967: PPUSH
81968: LD_INT 0
81970: PPUSH
81971: CALL_OW 48
// end ;
81975: LD_VAR 0 5
81979: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81980: LD_INT 0
81982: PPUSH
81983: PPUSH
81984: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81985: LD_ADDR_VAR 0 2
81989: PUSH
81990: LD_INT 0
81992: PUSH
81993: LD_INT 0
81995: PUSH
81996: LD_INT 0
81998: PUSH
81999: LD_INT 0
82001: PUSH
82002: EMPTY
82003: LIST
82004: LIST
82005: LIST
82006: LIST
82007: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82008: LD_VAR 0 1
82012: NOT
82013: PUSH
82014: LD_VAR 0 1
82018: PPUSH
82019: CALL_OW 264
82023: PUSH
82024: LD_INT 12
82026: PUSH
82027: LD_INT 51
82029: PUSH
82030: LD_INT 32
82032: PUSH
82033: LD_INT 89
82035: PUSH
82036: EMPTY
82037: LIST
82038: LIST
82039: LIST
82040: LIST
82041: IN
82042: NOT
82043: OR
82044: IFFALSE 82048
// exit ;
82046: GO 82146
// for i := 1 to 3 do
82048: LD_ADDR_VAR 0 3
82052: PUSH
82053: DOUBLE
82054: LD_INT 1
82056: DEC
82057: ST_TO_ADDR
82058: LD_INT 3
82060: PUSH
82061: FOR_TO
82062: IFFALSE 82144
// begin tmp := GetCargo ( cargo , i ) ;
82064: LD_ADDR_VAR 0 4
82068: PUSH
82069: LD_VAR 0 1
82073: PPUSH
82074: LD_VAR 0 3
82078: PPUSH
82079: CALL_OW 289
82083: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82084: LD_ADDR_VAR 0 2
82088: PUSH
82089: LD_VAR 0 2
82093: PPUSH
82094: LD_VAR 0 3
82098: PPUSH
82099: LD_VAR 0 4
82103: PPUSH
82104: CALL_OW 1
82108: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82109: LD_ADDR_VAR 0 2
82113: PUSH
82114: LD_VAR 0 2
82118: PPUSH
82119: LD_INT 4
82121: PPUSH
82122: LD_VAR 0 2
82126: PUSH
82127: LD_INT 4
82129: ARRAY
82130: PUSH
82131: LD_VAR 0 4
82135: PLUS
82136: PPUSH
82137: CALL_OW 1
82141: ST_TO_ADDR
// end ;
82142: GO 82061
82144: POP
82145: POP
// end ;
82146: LD_VAR 0 2
82150: RET
// export function Length ( array ) ; begin
82151: LD_INT 0
82153: PPUSH
// result := array + 0 ;
82154: LD_ADDR_VAR 0 2
82158: PUSH
82159: LD_VAR 0 1
82163: PUSH
82164: LD_INT 0
82166: PLUS
82167: ST_TO_ADDR
// end ;
82168: LD_VAR 0 2
82172: RET
// export function PrepareArray ( array ) ; begin
82173: LD_INT 0
82175: PPUSH
// result := array diff 0 ;
82176: LD_ADDR_VAR 0 2
82180: PUSH
82181: LD_VAR 0 1
82185: PUSH
82186: LD_INT 0
82188: DIFF
82189: ST_TO_ADDR
// if not result [ 1 ] then
82190: LD_VAR 0 2
82194: PUSH
82195: LD_INT 1
82197: ARRAY
82198: NOT
82199: IFFALSE 82219
// result := Delete ( result , 1 ) ;
82201: LD_ADDR_VAR 0 2
82205: PUSH
82206: LD_VAR 0 2
82210: PPUSH
82211: LD_INT 1
82213: PPUSH
82214: CALL_OW 3
82218: ST_TO_ADDR
// end ;
82219: LD_VAR 0 2
82223: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82224: LD_INT 0
82226: PPUSH
82227: PPUSH
82228: PPUSH
82229: PPUSH
// sibRocketRange := 25 ;
82230: LD_ADDR_VAR 0 6
82234: PUSH
82235: LD_INT 25
82237: ST_TO_ADDR
// result := false ;
82238: LD_ADDR_VAR 0 4
82242: PUSH
82243: LD_INT 0
82245: ST_TO_ADDR
// for i := 0 to 5 do
82246: LD_ADDR_VAR 0 5
82250: PUSH
82251: DOUBLE
82252: LD_INT 0
82254: DEC
82255: ST_TO_ADDR
82256: LD_INT 5
82258: PUSH
82259: FOR_TO
82260: IFFALSE 82327
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82262: LD_VAR 0 1
82266: PPUSH
82267: LD_VAR 0 5
82271: PPUSH
82272: LD_VAR 0 6
82276: PPUSH
82277: CALL_OW 272
82281: PPUSH
82282: LD_VAR 0 2
82286: PPUSH
82287: LD_VAR 0 5
82291: PPUSH
82292: LD_VAR 0 6
82296: PPUSH
82297: CALL_OW 273
82301: PPUSH
82302: LD_VAR 0 3
82306: PPUSH
82307: CALL_OW 309
82311: IFFALSE 82325
// begin result := true ;
82313: LD_ADDR_VAR 0 4
82317: PUSH
82318: LD_INT 1
82320: ST_TO_ADDR
// exit ;
82321: POP
82322: POP
82323: GO 82329
// end ;
82325: GO 82259
82327: POP
82328: POP
// end ;
82329: LD_VAR 0 4
82333: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82334: LD_INT 0
82336: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82337: LD_VAR 0 1
82341: PPUSH
82342: LD_VAR 0 2
82346: PPUSH
82347: LD_INT 0
82349: PPUSH
82350: LD_INT 0
82352: PPUSH
82353: LD_INT 1
82355: PPUSH
82356: LD_INT 0
82358: PPUSH
82359: CALL_OW 587
// end ;
82363: LD_VAR 0 3
82367: RET
// export function CenterOnNow ( unit ) ; begin
82368: LD_INT 0
82370: PPUSH
// result := IsInUnit ( unit ) ;
82371: LD_ADDR_VAR 0 2
82375: PUSH
82376: LD_VAR 0 1
82380: PPUSH
82381: CALL_OW 310
82385: ST_TO_ADDR
// if not result then
82386: LD_VAR 0 2
82390: NOT
82391: IFFALSE 82403
// result := unit ;
82393: LD_ADDR_VAR 0 2
82397: PUSH
82398: LD_VAR 0 1
82402: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82403: LD_VAR 0 1
82407: PPUSH
82408: CALL_OW 87
// end ;
82412: LD_VAR 0 2
82416: RET
// export function ComMoveHex ( unit , hex ) ; begin
82417: LD_INT 0
82419: PPUSH
// if not hex then
82420: LD_VAR 0 2
82424: NOT
82425: IFFALSE 82429
// exit ;
82427: GO 82482
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82429: LD_VAR 0 2
82433: PUSH
82434: LD_INT 1
82436: ARRAY
82437: PPUSH
82438: LD_VAR 0 2
82442: PUSH
82443: LD_INT 2
82445: ARRAY
82446: PPUSH
82447: CALL_OW 428
82451: IFFALSE 82455
// exit ;
82453: GO 82482
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82455: LD_VAR 0 1
82459: PPUSH
82460: LD_VAR 0 2
82464: PUSH
82465: LD_INT 1
82467: ARRAY
82468: PPUSH
82469: LD_VAR 0 2
82473: PUSH
82474: LD_INT 2
82476: ARRAY
82477: PPUSH
82478: CALL_OW 111
// end ;
82482: LD_VAR 0 3
82486: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82487: LD_INT 0
82489: PPUSH
82490: PPUSH
82491: PPUSH
// if not unit or not enemy then
82492: LD_VAR 0 1
82496: NOT
82497: PUSH
82498: LD_VAR 0 2
82502: NOT
82503: OR
82504: IFFALSE 82508
// exit ;
82506: GO 82632
// x := GetX ( enemy ) ;
82508: LD_ADDR_VAR 0 4
82512: PUSH
82513: LD_VAR 0 2
82517: PPUSH
82518: CALL_OW 250
82522: ST_TO_ADDR
// y := GetY ( enemy ) ;
82523: LD_ADDR_VAR 0 5
82527: PUSH
82528: LD_VAR 0 2
82532: PPUSH
82533: CALL_OW 251
82537: ST_TO_ADDR
// if ValidHex ( x , y ) then
82538: LD_VAR 0 4
82542: PPUSH
82543: LD_VAR 0 5
82547: PPUSH
82548: CALL_OW 488
82552: IFFALSE 82632
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
82554: LD_VAR 0 2
82558: PPUSH
82559: CALL_OW 247
82563: PUSH
82564: LD_INT 3
82566: PUSH
82567: LD_INT 2
82569: PUSH
82570: EMPTY
82571: LIST
82572: LIST
82573: IN
82574: PUSH
82575: LD_VAR 0 1
82579: PPUSH
82580: CALL_OW 255
82584: PPUSH
82585: LD_VAR 0 2
82589: PPUSH
82590: CALL_OW 292
82594: AND
82595: IFFALSE 82613
// ComAttackUnit ( unit , enemy ) else
82597: LD_VAR 0 1
82601: PPUSH
82602: LD_VAR 0 2
82606: PPUSH
82607: CALL_OW 115
82611: GO 82632
// ComAgressiveMove ( unit , x , y ) ;
82613: LD_VAR 0 1
82617: PPUSH
82618: LD_VAR 0 4
82622: PPUSH
82623: LD_VAR 0 5
82627: PPUSH
82628: CALL_OW 114
// end ; end_of_file
82632: LD_VAR 0 3
82636: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82637: LD_VAR 0 1
82641: PUSH
82642: LD_INT 200
82644: DOUBLE
82645: GREATEREQUAL
82646: IFFALSE 82654
82648: LD_INT 299
82650: DOUBLE
82651: LESSEQUAL
82652: IFTRUE 82656
82654: GO 82688
82656: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82657: LD_VAR 0 1
82661: PPUSH
82662: LD_VAR 0 2
82666: PPUSH
82667: LD_VAR 0 3
82671: PPUSH
82672: LD_VAR 0 4
82676: PPUSH
82677: LD_VAR 0 5
82681: PPUSH
82682: CALL 36361 0 5
82686: GO 82765
82688: LD_INT 300
82690: DOUBLE
82691: GREATEREQUAL
82692: IFFALSE 82700
82694: LD_INT 399
82696: DOUBLE
82697: LESSEQUAL
82698: IFTRUE 82702
82700: GO 82764
82702: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82703: LD_VAR 0 1
82707: PPUSH
82708: LD_VAR 0 2
82712: PPUSH
82713: LD_VAR 0 3
82717: PPUSH
82718: LD_VAR 0 4
82722: PPUSH
82723: LD_VAR 0 5
82727: PPUSH
82728: LD_VAR 0 6
82732: PPUSH
82733: LD_VAR 0 7
82737: PPUSH
82738: LD_VAR 0 8
82742: PPUSH
82743: LD_VAR 0 9
82747: PPUSH
82748: LD_VAR 0 10
82752: PPUSH
82753: LD_VAR 0 11
82757: PPUSH
82758: CALL 32686 0 11
82762: GO 82765
82764: POP
// end ;
82765: PPOPN 11
82767: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82768: LD_VAR 0 1
82772: PPUSH
82773: LD_VAR 0 2
82777: PPUSH
82778: LD_VAR 0 3
82782: PPUSH
82783: LD_VAR 0 4
82787: PPUSH
82788: LD_VAR 0 5
82792: PPUSH
82793: CALL 36097 0 5
// end ; end_of_file
82797: PPOPN 5
82799: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82800: LD_VAR 0 1
82804: PPUSH
82805: LD_VAR 0 2
82809: PPUSH
82810: LD_VAR 0 3
82814: PPUSH
82815: LD_VAR 0 4
82819: PPUSH
82820: LD_VAR 0 5
82824: PPUSH
82825: LD_VAR 0 6
82829: PPUSH
82830: CALL 20338 0 6
// end ;
82834: PPOPN 6
82836: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82837: LD_INT 0
82839: PPUSH
// begin if not units then
82840: LD_VAR 0 1
82844: NOT
82845: IFFALSE 82849
// exit ;
82847: GO 82849
// end ;
82849: PPOPN 7
82851: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82852: CALL 20242 0 0
// end ;
82856: PPOPN 1
82858: END
