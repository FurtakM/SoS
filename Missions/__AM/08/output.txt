// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 8754 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 73628 0 9
// Action ;
  79: CALL 14578 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2409 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 39471 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 39471 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 39471 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 39471 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 39471 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 39471 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 39471 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 76939 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 39471 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 39471 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 76939 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 39471 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 39471 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 76939 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 39471 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 76939 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 39471 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 76939 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 39471 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 76939 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 39471 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 76939 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 39471 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 76939 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 76939 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2402
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2221
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2221
// begin if ct then
2125: LD_VAR 0 11
2129: IFFALSE 2157
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2131: LD_VAR 0 2
2135: PPUSH
2136: LD_VAR 0 11
2140: PUSH
2141: LD_INT 1
2143: ARRAY
2144: PPUSH
2145: CALL_OW 52
// placed := true ;
2149: LD_ADDR_VAR 0 12
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// end ; if placed then
2157: LD_VAR 0 12
2161: IFFALSE 2165
// continue ;
2163: GO 1909
// for j in fac do
2165: LD_ADDR_VAR 0 3
2169: PUSH
2170: LD_VAR 0 10
2174: PUSH
2175: FOR_IN
2176: IFFALSE 2219
// if UnitsInside ( j ) < 6 then
2178: LD_VAR 0 3
2182: PPUSH
2183: CALL_OW 313
2187: PUSH
2188: LD_INT 6
2190: LESS
2191: IFFALSE 2217
// begin PlaceHumanInUnit ( i , j ) ;
2193: LD_VAR 0 2
2197: PPUSH
2198: LD_VAR 0 3
2202: PPUSH
2203: CALL_OW 52
// placed := true ;
2207: LD_ADDR_VAR 0 12
2211: PUSH
2212: LD_INT 1
2214: ST_TO_ADDR
// break ;
2215: GO 2219
// end ;
2217: GO 2175
2219: POP
2220: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2221: LD_VAR 0 2
2225: PPUSH
2226: CALL_OW 257
2230: PUSH
2231: LD_INT 4
2233: EQUAL
2234: IFFALSE 2329
// begin if lab then
2236: LD_VAR 0 9
2240: IFFALSE 2298
// begin for j in lab do
2242: LD_ADDR_VAR 0 3
2246: PUSH
2247: LD_VAR 0 9
2251: PUSH
2252: FOR_IN
2253: IFFALSE 2296
// if UnitsInside ( j ) < 6 then
2255: LD_VAR 0 3
2259: PPUSH
2260: CALL_OW 313
2264: PUSH
2265: LD_INT 6
2267: LESS
2268: IFFALSE 2294
// begin PlaceHumanInUnit ( i , j ) ;
2270: LD_VAR 0 2
2274: PPUSH
2275: LD_VAR 0 3
2279: PPUSH
2280: CALL_OW 52
// placed := true ;
2284: LD_ADDR_VAR 0 12
2288: PUSH
2289: LD_INT 1
2291: ST_TO_ADDR
// break ;
2292: GO 2296
// end ;
2294: GO 2252
2296: POP
2297: POP
// end ; if not placed then
2298: LD_VAR 0 12
2302: NOT
2303: IFFALSE 2329
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2305: LD_VAR 0 2
2309: PPUSH
2310: LD_INT 3
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: CALL_OW 49
// ComHold ( i ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 140
// end ; end ; if ct then
2329: LD_VAR 0 11
2333: IFFALSE 2400
// if UnitsInside ( ct [ 1 ] ) then
2335: LD_VAR 0 11
2339: PUSH
2340: LD_INT 1
2342: ARRAY
2343: PPUSH
2344: CALL_OW 313
2348: IFFALSE 2400
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2350: LD_ADDR_VAR 0 2
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 1
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 33
2367: PUSH
2368: LD_INT 2
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: FOR_IN
2385: IFFALSE 2398
// Connect ( i ) ;
2387: LD_VAR 0 2
2391: PPUSH
2392: CALL 47577 0 1
2396: GO 2384
2398: POP
2399: POP
// end ; end ;
2400: GO 1909
2402: POP
2403: POP
// end ;
2404: LD_VAR 0 1
2408: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2409: LD_INT 0
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2417: LD_INT 71
2419: PPUSH
2420: LD_INT 5
2422: PPUSH
2423: LD_INT 1
2425: PPUSH
2426: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_STRING GammaBase
2437: PPUSH
2438: EMPTY
2439: PPUSH
2440: CALL_OW 30
2444: ST_TO_ADDR
// if not blist then
2445: LD_VAR 0 2
2449: NOT
2450: IFFALSE 2490
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_INT 1
2459: PUSH
2460: LD_INT 52
2462: PUSH
2463: LD_INT 12
2465: PUSH
2466: LD_INT 3
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: LD_INT 0
2474: PUSH
2475: LD_INT 0
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: ST_TO_ADDR
// uc_side := 1 ;
2490: LD_ADDR_OWVAR 20
2494: PUSH
2495: LD_INT 1
2497: ST_TO_ADDR
// uc_nation := 1 ;
2498: LD_ADDR_OWVAR 21
2502: PUSH
2503: LD_INT 1
2505: ST_TO_ADDR
// bc_kind1 := - 1 ;
2506: LD_ADDR_OWVAR 44
2510: PUSH
2511: LD_INT 1
2513: NEG
2514: ST_TO_ADDR
// bc_kind2 := - 1 ;
2515: LD_ADDR_OWVAR 45
2519: PUSH
2520: LD_INT 1
2522: NEG
2523: ST_TO_ADDR
// for i in blist do
2524: LD_ADDR_VAR 0 3
2528: PUSH
2529: LD_VAR 0 2
2533: PUSH
2534: FOR_IN
2535: IFFALSE 2811
// begin bc_type := i [ 1 ] ;
2537: LD_ADDR_OWVAR 42
2541: PUSH
2542: LD_VAR 0 3
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2551: LD_ADDR_OWVAR 43
2555: PUSH
2556: LD_VAR 0 3
2560: PUSH
2561: LD_INT 5
2563: ARRAY
2564: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2565: LD_OWVAR 42
2569: PUSH
2570: LD_INT 6
2572: PUSH
2573: LD_INT 7
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: IN
2580: IFFALSE 2646
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2582: LD_STRING 06_remoteVehs_1
2584: PPUSH
2585: LD_INT 0
2587: PPUSH
2588: CALL_OW 30
2592: NOT
2593: IFFALSE 2621
// begin bc_type := b_lab_full ;
2595: LD_ADDR_OWVAR 42
2599: PUSH
2600: LD_INT 8
2602: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2603: LD_ADDR_OWVAR 44
2607: PUSH
2608: LD_INT 10
2610: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2611: LD_ADDR_OWVAR 45
2615: PUSH
2616: LD_INT 15
2618: ST_TO_ADDR
// end else
2619: GO 2646
// begin bc_type := b_lab_half ;
2621: LD_ADDR_OWVAR 42
2625: PUSH
2626: LD_INT 7
2628: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2629: LD_ADDR_OWVAR 44
2633: PUSH
2634: LD_INT 10
2636: ST_TO_ADDR
// bc_kind2 := - 1 ;
2637: LD_ADDR_OWVAR 45
2641: PUSH
2642: LD_INT 1
2644: NEG
2645: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2646: LD_OWVAR 42
2650: PUSH
2651: LD_INT 2
2653: EQUAL
2654: IFFALSE 2664
// bc_type := b_factory ;
2656: LD_ADDR_OWVAR 42
2660: PUSH
2661: LD_INT 3
2663: ST_TO_ADDR
// if bc_type = b_depot then
2664: LD_OWVAR 42
2668: PUSH
2669: LD_INT 0
2671: EQUAL
2672: IFFALSE 2721
// begin bc_type := b_warehouse ;
2674: LD_ADDR_OWVAR 42
2678: PUSH
2679: LD_INT 1
2681: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2682: LD_ADDR_EXP 31
2686: PUSH
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 2
2694: ARRAY
2695: PPUSH
2696: LD_VAR 0 3
2700: PUSH
2701: LD_INT 3
2703: ARRAY
2704: PPUSH
2705: LD_VAR 0 3
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: CALL_OW 47
2718: ST_TO_ADDR
// continue ;
2719: GO 2534
// end ; if bc_type = b_armoury then
2721: LD_OWVAR 42
2725: PUSH
2726: LD_INT 4
2728: EQUAL
2729: IFFALSE 2739
// bc_type = b_barracks ;
2731: LD_ADDR_OWVAR 42
2735: PUSH
2736: LD_INT 5
2738: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2739: LD_ADDR_VAR 0 4
2743: PUSH
2744: LD_VAR 0 3
2748: PUSH
2749: LD_INT 2
2751: ARRAY
2752: PPUSH
2753: LD_VAR 0 3
2757: PUSH
2758: LD_INT 3
2760: ARRAY
2761: PPUSH
2762: LD_VAR 0 3
2766: PUSH
2767: LD_INT 4
2769: ARRAY
2770: PPUSH
2771: CALL_OW 47
2775: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2776: LD_VAR 0 4
2780: PPUSH
2781: CALL_OW 266
2785: PUSH
2786: LD_INT 32
2788: EQUAL
2789: IFFALSE 2809
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2791: LD_VAR 0 4
2795: PPUSH
2796: LD_VAR 0 3
2800: PUSH
2801: LD_INT 7
2803: ARRAY
2804: PPUSH
2805: CALL_OW 431
// end ;
2809: GO 2534
2811: POP
2812: POP
// if not amDepot then
2813: LD_EXP 31
2817: NOT
2818: IFFALSE 2855
// begin bc_type := b_warehouse ;
2820: LD_ADDR_OWVAR 42
2824: PUSH
2825: LD_INT 1
2827: ST_TO_ADDR
// bc_level := 6 ;
2828: LD_ADDR_OWVAR 43
2832: PUSH
2833: LD_INT 6
2835: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2836: LD_ADDR_EXP 31
2840: PUSH
2841: LD_INT 52
2843: PPUSH
2844: LD_INT 12
2846: PPUSH
2847: LD_INT 3
2849: PPUSH
2850: CALL_OW 47
2854: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2855: LD_ADDR_OWVAR 42
2859: PUSH
2860: LD_INT 5
2862: ST_TO_ADDR
// bc_level := 6 ;
2863: LD_ADDR_OWVAR 43
2867: PUSH
2868: LD_INT 6
2870: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2871: LD_INT 61
2873: PPUSH
2874: LD_INT 29
2876: PPUSH
2877: LD_INT 5
2879: PPUSH
2880: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2884: LD_EXP 31
2888: PPUSH
2889: LD_STRING gamma
2891: PPUSH
2892: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2896: LD_EXP 31
2900: PPUSH
2901: CALL_OW 274
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 400
2911: PUSH
2912: LD_INT 320
2914: PUSH
2915: LD_INT 270
2917: PUSH
2918: LD_INT 230
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: PUSH
2927: LD_OWVAR 67
2931: ARRAY
2932: PPUSH
2933: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2937: LD_EXP 31
2941: PPUSH
2942: CALL_OW 274
2946: PPUSH
2947: LD_INT 2
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2957: LD_INT 22
2959: PUSH
2960: LD_INT 1
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 30
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PPUSH
2981: CALL_OW 69
2985: IFFALSE 3233
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2987: LD_ADDR_VAR 0 4
2991: PUSH
2992: LD_INT 22
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 30
3004: PUSH
3005: LD_INT 3
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PPUSH
3016: CALL_OW 69
3020: PUSH
3021: LD_INT 1
3023: ARRAY
3024: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3025: LD_ADDR_VAR 0 6
3029: PUSH
3030: LD_VAR 0 4
3034: PPUSH
3035: CALL_OW 250
3039: PPUSH
3040: LD_VAR 0 4
3044: PPUSH
3045: CALL_OW 251
3049: PPUSH
3050: LD_VAR 0 4
3054: PPUSH
3055: CALL_OW 254
3059: PPUSH
3060: CALL 74585 0 3
3064: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3065: LD_ADDR_VAR 0 2
3069: PUSH
3070: LD_INT 19
3072: PUSH
3073: LD_INT 17
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3080: LD_STRING 06_remoteVehs_1
3082: PPUSH
3083: LD_INT 0
3085: PPUSH
3086: CALL_OW 30
3090: IFFALSE 3113
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3092: LD_ADDR_VAR 0 2
3096: PUSH
3097: LD_VAR 0 2
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: LD_INT 22
3107: PPUSH
3108: CALL_OW 2
3112: ST_TO_ADDR
// for i in tmp do
3113: LD_ADDR_VAR 0 3
3117: PUSH
3118: LD_VAR 0 6
3122: PUSH
3123: FOR_IN
3124: IFFALSE 3231
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3126: LD_VAR 0 3
3130: PUSH
3131: LD_INT 1
3133: ARRAY
3134: PPUSH
3135: LD_VAR 0 3
3139: PUSH
3140: LD_INT 2
3142: ARRAY
3143: PPUSH
3144: CALL_OW 428
3148: PUSH
3149: LD_INT 0
3151: EQUAL
3152: IFFALSE 3229
// begin bc_type := blist [ 1 ] ;
3154: LD_ADDR_OWVAR 42
3158: PUSH
3159: LD_VAR 0 2
3163: PUSH
3164: LD_INT 1
3166: ARRAY
3167: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3168: LD_VAR 0 3
3172: PUSH
3173: LD_INT 1
3175: ARRAY
3176: PPUSH
3177: LD_VAR 0 3
3181: PUSH
3182: LD_INT 2
3184: ARRAY
3185: PPUSH
3186: LD_VAR 0 3
3190: PUSH
3191: LD_INT 3
3193: ARRAY
3194: PPUSH
3195: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3199: LD_ADDR_VAR 0 2
3203: PUSH
3204: LD_VAR 0 2
3208: PPUSH
3209: LD_INT 1
3211: PPUSH
3212: CALL_OW 3
3216: ST_TO_ADDR
// if blist = 0 then
3217: LD_VAR 0 2
3221: PUSH
3222: LD_INT 0
3224: EQUAL
3225: IFFALSE 3229
// break ;
3227: GO 3231
// end ;
3229: GO 3123
3231: POP
3232: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3233: LD_STRING 06_remoteVehs_1
3235: PPUSH
3236: LD_INT 0
3238: PPUSH
3239: CALL_OW 30
3243: IFFALSE 3696
// begin bc_type := b_control_tower ;
3245: LD_ADDR_OWVAR 42
3249: PUSH
3250: LD_INT 36
3252: ST_TO_ADDR
// bc_level := 4 ;
3253: LD_ADDR_OWVAR 43
3257: PUSH
3258: LD_INT 4
3260: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3261: LD_EXP 31
3265: PPUSH
3266: LD_INT 36
3268: PPUSH
3269: LD_INT 62
3271: PPUSH
3272: LD_INT 12
3274: PPUSH
3275: LD_INT 3
3277: PPUSH
3278: CALL 52705 0 5
3282: PUSH
3283: LD_INT 92
3285: PUSH
3286: LD_INT 62
3288: PUSH
3289: LD_INT 12
3291: PUSH
3292: LD_INT 3
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: PPUSH
3301: CALL_OW 69
3305: NOT
3306: AND
3307: IFFALSE 3324
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3309: LD_INT 62
3311: PPUSH
3312: LD_INT 12
3314: PPUSH
3315: LD_INT 3
3317: PPUSH
3318: CALL_OW 47
3322: GO 3486
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3324: LD_EXP 31
3328: PPUSH
3329: LD_INT 36
3331: PPUSH
3332: LD_INT 37
3334: PPUSH
3335: LD_INT 18
3337: PPUSH
3338: LD_INT 2
3340: PPUSH
3341: CALL 52705 0 5
3345: PUSH
3346: LD_INT 92
3348: PUSH
3349: LD_INT 37
3351: PUSH
3352: LD_INT 18
3354: PUSH
3355: LD_INT 3
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: NOT
3369: AND
3370: IFFALSE 3387
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3372: LD_INT 37
3374: PPUSH
3375: LD_INT 18
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: CALL_OW 47
3385: GO 3486
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3387: LD_EXP 31
3391: PPUSH
3392: LD_INT 36
3394: PPUSH
3395: LD_INT 66
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: LD_INT 4
3403: PPUSH
3404: CALL 52705 0 5
3408: PUSH
3409: LD_INT 92
3411: PUSH
3412: LD_INT 66
3414: PUSH
3415: LD_INT 14
3417: PUSH
3418: LD_INT 3
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: PPUSH
3427: CALL_OW 69
3431: NOT
3432: AND
3433: IFFALSE 3450
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3435: LD_INT 66
3437: PPUSH
3438: LD_INT 14
3440: PPUSH
3441: LD_INT 4
3443: PPUSH
3444: CALL_OW 47
3448: GO 3486
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3450: LD_EXP 31
3454: PPUSH
3455: LD_INT 36
3457: PPUSH
3458: LD_INT 74
3460: PPUSH
3461: LD_INT 26
3463: PPUSH
3464: LD_INT 4
3466: PPUSH
3467: CALL 52705 0 5
3471: IFFALSE 3486
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3473: LD_INT 74
3475: PPUSH
3476: LD_INT 26
3478: PPUSH
3479: LD_INT 4
3481: PPUSH
3482: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3486: LD_INT 22
3488: PUSH
3489: LD_INT 1
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: LD_INT 30
3498: PUSH
3499: LD_INT 36
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PPUSH
3510: CALL_OW 69
3514: NOT
3515: IFFALSE 3519
// exit ;
3517: GO 4044
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3519: LD_ADDR_VAR 0 3
3523: PUSH
3524: DOUBLE
3525: LD_INT 1
3527: DEC
3528: ST_TO_ADDR
3529: LD_INT 3
3531: PUSH
3532: LD_INT 2
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: PUSH
3547: LD_OWVAR 67
3551: ARRAY
3552: PUSH
3553: FOR_TO
3554: IFFALSE 3694
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3556: LD_ADDR_OWVAR 37
3560: PUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 1
3573: PPUSH
3574: LD_INT 2
3576: PPUSH
3577: CALL_OW 12
3581: ARRAY
3582: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3583: LD_ADDR_OWVAR 39
3587: PUSH
3588: LD_INT 1
3590: PUSH
3591: LD_INT 2
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 12
3608: ARRAY
3609: ST_TO_ADDR
// vc_control := control_remote ;
3610: LD_ADDR_OWVAR 38
3614: PUSH
3615: LD_INT 2
3617: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3618: LD_ADDR_OWVAR 40
3622: PUSH
3623: LD_INT 4
3625: PUSH
3626: LD_INT 3
3628: PUSH
3629: LD_INT 5
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: PUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: CALL_OW 12
3647: ARRAY
3648: ST_TO_ADDR
// veh := CreateVehicle ;
3649: LD_ADDR_VAR 0 5
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3659: LD_VAR 0 5
3663: PPUSH
3664: LD_INT 3
3666: PPUSH
3667: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3671: LD_VAR 0 5
3675: PPUSH
3676: LD_INT 61
3678: PPUSH
3679: LD_INT 23
3681: PPUSH
3682: LD_INT 9
3684: PPUSH
3685: LD_INT 0
3687: PPUSH
3688: CALL_OW 50
// end ;
3692: GO 3553
3694: POP
3695: POP
// end ; if gammaCommander = 1 then
3696: LD_EXP 13
3700: PUSH
3701: LD_INT 1
3703: EQUAL
3704: IFFALSE 3881
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3706: LD_ADDR_VAR 0 3
3710: PUSH
3711: DOUBLE
3712: LD_INT 1
3714: DEC
3715: ST_TO_ADDR
3716: LD_INT 3
3718: PUSH
3719: LD_INT 3
3721: PUSH
3722: LD_INT 2
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_OWVAR 67
3738: ARRAY
3739: PUSH
3740: FOR_TO
3741: IFFALSE 3877
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3743: LD_ADDR_OWVAR 37
3747: PUSH
3748: LD_INT 3
3750: PUSH
3751: LD_INT 2
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 2
3763: PPUSH
3764: CALL_OW 12
3768: ARRAY
3769: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3770: LD_ADDR_OWVAR 39
3774: PUSH
3775: LD_INT 1
3777: PUSH
3778: LD_INT 2
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 1
3787: PPUSH
3788: LD_INT 2
3790: PPUSH
3791: CALL_OW 12
3795: ARRAY
3796: ST_TO_ADDR
// vc_control := control_manual ;
3797: LD_ADDR_OWVAR 38
3801: PUSH
3802: LD_INT 1
3804: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3805: LD_ADDR_OWVAR 40
3809: PUSH
3810: LD_INT 4
3812: PUSH
3813: LD_INT 5
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 1
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 12
3830: ARRAY
3831: ST_TO_ADDR
// veh := CreateVehicle ;
3832: LD_ADDR_VAR 0 5
3836: PUSH
3837: CALL_OW 45
3841: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3842: LD_VAR 0 5
3846: PPUSH
3847: LD_INT 3
3849: PPUSH
3850: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3854: LD_VAR 0 5
3858: PPUSH
3859: LD_INT 61
3861: PPUSH
3862: LD_INT 23
3864: PPUSH
3865: LD_INT 9
3867: PPUSH
3868: LD_INT 0
3870: PPUSH
3871: CALL_OW 50
// end ;
3875: GO 3740
3877: POP
3878: POP
// end else
3879: GO 4044
// if gammaCommander = 2 then
3881: LD_EXP 13
3885: PUSH
3886: LD_INT 2
3888: EQUAL
3889: IFFALSE 4044
// begin bc_type := b_bunker ;
3891: LD_ADDR_OWVAR 42
3895: PUSH
3896: LD_INT 32
3898: ST_TO_ADDR
// bc_level := 6 ;
3899: LD_ADDR_OWVAR 43
3903: PUSH
3904: LD_INT 6
3906: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3907: LD_ADDR_VAR 0 4
3911: PUSH
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 36
3917: PPUSH
3918: LD_INT 5
3920: PPUSH
3921: CALL_OW 47
3925: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_INT 4
3933: PPUSH
3934: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3938: LD_ADDR_VAR 0 4
3942: PUSH
3943: LD_INT 61
3945: PPUSH
3946: LD_INT 40
3948: PPUSH
3949: LD_INT 5
3951: PPUSH
3952: CALL_OW 47
3956: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3957: LD_VAR 0 4
3961: PPUSH
3962: LD_INT 5
3964: PPUSH
3965: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3969: LD_ADDR_OWVAR 37
3973: PUSH
3974: LD_INT 2
3976: ST_TO_ADDR
// vc_engine := engine_combustion ;
3977: LD_ADDR_OWVAR 39
3981: PUSH
3982: LD_INT 1
3984: ST_TO_ADDR
// vc_control := control_manual ;
3985: LD_ADDR_OWVAR 38
3989: PUSH
3990: LD_INT 1
3992: ST_TO_ADDR
// vc_weapon := us_crane ;
3993: LD_ADDR_OWVAR 40
3997: PUSH
3998: LD_INT 13
4000: ST_TO_ADDR
// veh := CreateVehicle ;
4001: LD_ADDR_VAR 0 5
4005: PUSH
4006: CALL_OW 45
4010: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4011: LD_VAR 0 5
4015: PPUSH
4016: LD_INT 3
4018: PPUSH
4019: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4023: LD_VAR 0 5
4027: PPUSH
4028: LD_INT 61
4030: PPUSH
4031: LD_INT 23
4033: PPUSH
4034: LD_INT 9
4036: PPUSH
4037: LD_INT 0
4039: PPUSH
4040: CALL_OW 50
// end ; end ;
4044: LD_VAR 0 1
4048: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4049: LD_INT 0
4051: PPUSH
4052: PPUSH
4053: PPUSH
4054: PPUSH
// uc_side := 1 ;
4055: LD_ADDR_OWVAR 20
4059: PUSH
4060: LD_INT 1
4062: ST_TO_ADDR
// uc_nation := 1 ;
4063: LD_ADDR_OWVAR 21
4067: PUSH
4068: LD_INT 1
4070: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4071: LD_ADDR_EXP 26
4075: PUSH
4076: LD_STRING Denis
4078: PPUSH
4079: LD_EXP 1
4083: NOT
4084: PPUSH
4085: LD_STRING 06c_
4087: PPUSH
4088: CALL 39471 0 3
4092: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4093: LD_EXP 26
4097: PPUSH
4098: LD_INT 4
4100: PPUSH
4101: LD_INT 0
4103: PPUSH
4104: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4108: LD_ADDR_EXP 27
4112: PUSH
4113: LD_STRING Joan
4115: PPUSH
4116: LD_EXP 1
4120: NOT
4121: PPUSH
4122: LD_STRING 06c_
4124: PPUSH
4125: CALL 39471 0 3
4129: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4130: LD_EXP 27
4134: PPUSH
4135: LD_INT 4
4137: PPUSH
4138: LD_INT 0
4140: PPUSH
4141: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4145: LD_ADDR_EXP 24
4149: PUSH
4150: LD_STRING Mike
4152: PPUSH
4153: LD_EXP 1
4157: NOT
4158: PPUSH
4159: LD_STRING 06c_
4161: PPUSH
4162: CALL 39471 0 3
4166: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4167: LD_EXP 24
4171: PPUSH
4172: LD_INT 4
4174: PPUSH
4175: LD_INT 0
4177: PPUSH
4178: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4182: LD_STRING GladstoneIn07
4184: PPUSH
4185: LD_INT 0
4187: PPUSH
4188: CALL_OW 30
4192: NOT
4193: IFFALSE 4273
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4195: LD_ADDR_EXP 21
4199: PUSH
4200: LD_STRING Gladstone
4202: PPUSH
4203: LD_EXP 1
4207: NOT
4208: PPUSH
4209: LD_STRING 06c_
4211: PPUSH
4212: CALL 39471 0 3
4216: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4217: LD_EXP 21
4221: NOT
4222: PUSH
4223: LD_STRING GladstoneStayInDelta
4225: PPUSH
4226: LD_INT 0
4228: PPUSH
4229: CALL_OW 30
4233: AND
4234: IFFALSE 4258
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4236: LD_ADDR_EXP 21
4240: PUSH
4241: LD_STRING Gladstone
4243: PPUSH
4244: LD_EXP 1
4248: NOT
4249: PPUSH
4250: LD_STRING 05_
4252: PPUSH
4253: CALL 39471 0 3
4257: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4258: LD_EXP 21
4262: PPUSH
4263: LD_INT 4
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4273: LD_STRING LisaStayInDelta
4275: PPUSH
4276: LD_INT 0
4278: PPUSH
4279: CALL_OW 30
4283: IFFALSE 4319
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4285: LD_ADDR_EXP 19
4289: PUSH
4290: LD_STRING Lisa
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_STRING 05_
4298: PPUSH
4299: CALL 39471 0 3
4303: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4304: LD_EXP 19
4308: PPUSH
4309: LD_INT 4
4311: PPUSH
4312: LD_INT 0
4314: PPUSH
4315: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4319: LD_STRING BobbyStayInDelta
4321: PPUSH
4322: LD_INT 0
4324: PPUSH
4325: CALL_OW 30
4329: IFFALSE 4365
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4331: LD_ADDR_EXP 17
4335: PUSH
4336: LD_STRING Bobby
4338: PPUSH
4339: LD_INT 1
4341: PPUSH
4342: LD_STRING 05_
4344: PPUSH
4345: CALL 39471 0 3
4349: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4350: LD_EXP 17
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_INT 0
4360: PPUSH
4361: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4365: LD_STRING CyrusStayInDelta
4367: PPUSH
4368: LD_INT 0
4370: PPUSH
4371: CALL_OW 30
4375: IFFALSE 4411
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4377: LD_ADDR_EXP 18
4381: PUSH
4382: LD_STRING Cyrus
4384: PPUSH
4385: LD_INT 1
4387: PPUSH
4388: LD_STRING 05_
4390: PPUSH
4391: CALL 39471 0 3
4395: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4396: LD_EXP 18
4400: PPUSH
4401: LD_INT 4
4403: PPUSH
4404: LD_INT 0
4406: PPUSH
4407: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4411: LD_STRING BrownStayInDelta
4413: PPUSH
4414: LD_INT 0
4416: PPUSH
4417: CALL_OW 30
4421: IFFALSE 4457
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4423: LD_ADDR_EXP 15
4427: PUSH
4428: LD_STRING Brown
4430: PPUSH
4431: LD_INT 1
4433: PPUSH
4434: LD_STRING 05_
4436: PPUSH
4437: CALL 39471 0 3
4441: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4442: LD_EXP 15
4446: PPUSH
4447: LD_INT 4
4449: PPUSH
4450: LD_INT 0
4452: PPUSH
4453: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4457: LD_STRING DonaldsonStayInDelta
4459: PPUSH
4460: LD_INT 0
4462: PPUSH
4463: CALL_OW 30
4467: IFFALSE 4503
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4469: LD_ADDR_EXP 16
4473: PUSH
4474: LD_STRING Donaldson
4476: PPUSH
4477: LD_INT 1
4479: PPUSH
4480: LD_STRING 05_
4482: PPUSH
4483: CALL 39471 0 3
4487: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4488: LD_EXP 16
4492: PPUSH
4493: LD_INT 4
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4503: LD_ADDR_VAR 0 4
4507: PUSH
4508: LD_STRING OthersStayInDelta
4510: PPUSH
4511: CALL_OW 31
4515: ST_TO_ADDR
// if others > 2 then
4516: LD_VAR 0 4
4520: PUSH
4521: LD_INT 2
4523: GREATER
4524: IFFALSE 4587
// begin for j := 1 to 2 do
4526: LD_ADDR_VAR 0 3
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4583
// begin SetTag ( others [ j ] , 107 ) ;
4542: LD_VAR 0 4
4546: PUSH
4547: LD_VAR 0 3
4551: ARRAY
4552: PPUSH
4553: LD_INT 107
4555: PPUSH
4556: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4560: LD_VAR 0 4
4564: PUSH
4565: LD_VAR 0 3
4569: ARRAY
4570: PPUSH
4571: LD_INT 4
4573: PPUSH
4574: LD_INT 0
4576: PPUSH
4577: CALL_OW 49
// end ;
4581: GO 4539
4583: POP
4584: POP
// end else
4585: GO 4648
// begin for j := 1 to others do
4587: LD_ADDR_VAR 0 3
4591: PUSH
4592: DOUBLE
4593: LD_INT 1
4595: DEC
4596: ST_TO_ADDR
4597: LD_VAR 0 4
4601: PUSH
4602: FOR_TO
4603: IFFALSE 4646
// begin SetTag ( others [ i ] , 107 ) ;
4605: LD_VAR 0 4
4609: PUSH
4610: LD_VAR 0 2
4614: ARRAY
4615: PPUSH
4616: LD_INT 107
4618: PPUSH
4619: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4623: LD_VAR 0 4
4627: PUSH
4628: LD_VAR 0 3
4632: ARRAY
4633: PPUSH
4634: LD_INT 4
4636: PPUSH
4637: LD_INT 0
4639: PPUSH
4640: CALL_OW 49
// end ;
4644: GO 4602
4646: POP
4647: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4648: LD_ADDR_VAR 0 4
4652: PUSH
4653: LD_STRING 06_other_apemans
4655: PPUSH
4656: CALL_OW 31
4660: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4661: LD_VAR 0 4
4665: PUSH
4666: LD_INT 3
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 1
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: PUSH
4684: LD_OWVAR 67
4688: ARRAY
4689: GREATEREQUAL
4690: IFFALSE 4723
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4692: LD_ADDR_VAR 0 3
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 2
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 1
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: PUSH
4715: LD_OWVAR 67
4719: ARRAY
4720: ST_TO_ADDR
4721: GO 4733
// j := others ;
4723: LD_ADDR_VAR 0 3
4727: PUSH
4728: LD_VAR 0 4
4732: ST_TO_ADDR
// for i := 1 to j do
4733: LD_ADDR_VAR 0 2
4737: PUSH
4738: DOUBLE
4739: LD_INT 1
4741: DEC
4742: ST_TO_ADDR
4743: LD_VAR 0 3
4747: PUSH
4748: FOR_TO
4749: IFFALSE 4774
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4751: LD_VAR 0 4
4755: PUSH
4756: LD_VAR 0 2
4760: ARRAY
4761: PPUSH
4762: LD_INT 4
4764: PPUSH
4765: LD_INT 0
4767: PPUSH
4768: CALL_OW 49
4772: GO 4748
4774: POP
4775: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4776: LD_INT 4
4778: PPUSH
4779: LD_INT 22
4781: PUSH
4782: LD_INT 1
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 21
4791: PUSH
4792: LD_INT 1
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PPUSH
4803: CALL_OW 70
4807: PPUSH
4808: LD_INT 53
4810: PPUSH
4811: LD_INT 19
4813: PPUSH
4814: CALL_OW 111
// end ;
4818: LD_VAR 0 1
4822: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4823: LD_INT 0
4825: PPUSH
4826: PPUSH
4827: PPUSH
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
// prefix := 07c_ ;
4839: LD_ADDR_VAR 0 10
4843: PUSH
4844: LD_STRING 07c_
4846: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4847: LD_ADDR_VAR 0 8
4851: PUSH
4852: LD_STRING 07_vehicles
4854: PPUSH
4855: EMPTY
4856: PPUSH
4857: CALL_OW 30
4861: ST_TO_ADDR
// if not vehicles and debug then
4862: LD_VAR 0 8
4866: NOT
4867: PUSH
4868: LD_EXP 1
4872: AND
4873: IFFALSE 4901
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4875: LD_ADDR_VAR 0 8
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: LD_INT 1
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 4
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: ST_TO_ADDR
// if not vehicles then
4901: LD_VAR 0 8
4905: NOT
4906: IFFALSE 4963
// begin area := westGammaSupportArea ;
4908: LD_ADDR_VAR 0 11
4912: PUSH
4913: LD_INT 16
4915: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4916: LD_ADDR_VAR 0 14
4920: PUSH
4921: LD_INT 37
4923: PUSH
4924: LD_INT 70
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4931: LD_ADDR_VAR 0 13
4935: PUSH
4936: LD_INT 43
4938: PUSH
4939: LD_INT 67
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: ST_TO_ADDR
// dir := 1 ;
4946: LD_ADDR_VAR 0 12
4950: PUSH
4951: LD_INT 1
4953: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4954: LD_INT 4200
4956: PPUSH
4957: CALL_OW 67
// end else
4961: GO 5009
// begin area := southGammaSupportArea ;
4963: LD_ADDR_VAR 0 11
4967: PUSH
4968: LD_INT 5
4970: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4971: LD_ADDR_VAR 0 14
4975: PUSH
4976: LD_INT 87
4978: PUSH
4979: LD_INT 147
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4986: LD_ADDR_VAR 0 13
4990: PUSH
4991: LD_INT 74
4993: PUSH
4994: LD_INT 129
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: ST_TO_ADDR
// dir := 0 ;
5001: LD_ADDR_VAR 0 12
5005: PUSH
5006: LD_INT 0
5008: ST_TO_ADDR
// end ; squad := [ ] ;
5009: LD_ADDR_VAR 0 5
5013: PUSH
5014: EMPTY
5015: ST_TO_ADDR
// tmp := [ ] ;
5016: LD_ADDR_VAR 0 6
5020: PUSH
5021: EMPTY
5022: ST_TO_ADDR
// tmpVehs := [ ] ;
5023: LD_ADDR_VAR 0 7
5027: PUSH
5028: EMPTY
5029: ST_TO_ADDR
// uc_side := 1 ;
5030: LD_ADDR_OWVAR 20
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// uc_nation := 1 ;
5038: LD_ADDR_OWVAR 21
5042: PUSH
5043: LD_INT 1
5045: ST_TO_ADDR
// if vehicles then
5046: LD_VAR 0 8
5050: IFFALSE 5184
// begin for i := 1 to vehicles do
5052: LD_ADDR_VAR 0 2
5056: PUSH
5057: DOUBLE
5058: LD_INT 1
5060: DEC
5061: ST_TO_ADDR
5062: LD_VAR 0 8
5066: PUSH
5067: FOR_TO
5068: IFFALSE 5182
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
5070: LD_ADDR_OWVAR 37
5074: PUSH
5075: LD_VAR 0 8
5079: PUSH
5080: LD_VAR 0 2
5084: ARRAY
5085: PUSH
5086: LD_INT 1
5088: ARRAY
5089: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5090: LD_ADDR_OWVAR 39
5094: PUSH
5095: LD_VAR 0 8
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PUSH
5106: LD_INT 2
5108: ARRAY
5109: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5110: LD_ADDR_OWVAR 38
5114: PUSH
5115: LD_VAR 0 8
5119: PUSH
5120: LD_VAR 0 2
5124: ARRAY
5125: PUSH
5126: LD_INT 3
5128: ARRAY
5129: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5130: LD_ADDR_OWVAR 40
5134: PUSH
5135: LD_VAR 0 8
5139: PUSH
5140: LD_VAR 0 2
5144: ARRAY
5145: PUSH
5146: LD_INT 4
5148: ARRAY
5149: ST_TO_ADDR
// veh := CreateVehicle ;
5150: LD_ADDR_VAR 0 9
5154: PUSH
5155: CALL_OW 45
5159: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5160: LD_ADDR_VAR 0 7
5164: PUSH
5165: LD_VAR 0 7
5169: PPUSH
5170: LD_VAR 0 9
5174: PPUSH
5175: CALL 76939 0 2
5179: ST_TO_ADDR
// end ;
5180: GO 5067
5182: POP
5183: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5184: LD_ADDR_EXP 14
5188: PUSH
5189: LD_STRING JMM
5191: PPUSH
5192: LD_EXP 1
5196: NOT
5197: PPUSH
5198: LD_VAR 0 10
5202: PPUSH
5203: CALL 39471 0 3
5207: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5208: LD_EXP 13
5212: PUSH
5213: LD_INT 1
5215: PUSH
5216: LD_INT 3
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: IN
5223: PUSH
5224: LD_EXP 15
5228: NOT
5229: AND
5230: IFFALSE 5291
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5232: LD_ADDR_EXP 15
5236: PUSH
5237: LD_STRING Brown
5239: PPUSH
5240: LD_EXP 1
5244: NOT
5245: PPUSH
5246: LD_VAR 0 10
5250: PPUSH
5251: CALL 39471 0 3
5255: ST_TO_ADDR
// if Brown then
5256: LD_EXP 15
5260: IFFALSE 5291
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5262: LD_ADDR_VAR 0 6
5266: PUSH
5267: LD_VAR 0 6
5271: PPUSH
5272: LD_VAR 0 6
5276: PUSH
5277: LD_INT 1
5279: PLUS
5280: PPUSH
5281: LD_EXP 15
5285: PPUSH
5286: CALL_OW 1
5290: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5291: LD_EXP 13
5295: PUSH
5296: LD_INT 2
5298: PUSH
5299: LD_INT 3
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: IN
5306: PUSH
5307: LD_EXP 16
5311: NOT
5312: AND
5313: IFFALSE 5374
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5315: LD_ADDR_EXP 16
5319: PUSH
5320: LD_STRING Donaldson
5322: PPUSH
5323: LD_EXP 1
5327: NOT
5328: PPUSH
5329: LD_VAR 0 10
5333: PPUSH
5334: CALL 39471 0 3
5338: ST_TO_ADDR
// if Donaldson then
5339: LD_EXP 16
5343: IFFALSE 5374
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5345: LD_ADDR_VAR 0 6
5349: PUSH
5350: LD_VAR 0 6
5354: PPUSH
5355: LD_VAR 0 6
5359: PUSH
5360: LD_INT 1
5362: PLUS
5363: PPUSH
5364: LD_EXP 16
5368: PPUSH
5369: CALL_OW 1
5373: ST_TO_ADDR
// end ; if not Bobby then
5374: LD_EXP 17
5378: NOT
5379: IFFALSE 5437
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5381: LD_ADDR_EXP 17
5385: PUSH
5386: LD_STRING Bobby
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: LD_VAR 0 10
5396: PPUSH
5397: CALL 39471 0 3
5401: ST_TO_ADDR
// if Bobby then
5402: LD_EXP 17
5406: IFFALSE 5437
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5408: LD_ADDR_VAR 0 6
5412: PUSH
5413: LD_VAR 0 6
5417: PPUSH
5418: LD_VAR 0 6
5422: PUSH
5423: LD_INT 1
5425: PLUS
5426: PPUSH
5427: LD_EXP 17
5431: PPUSH
5432: CALL_OW 1
5436: ST_TO_ADDR
// end ; if not Cyrus then
5437: LD_EXP 18
5441: NOT
5442: IFFALSE 5500
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5444: LD_ADDR_EXP 18
5448: PUSH
5449: LD_STRING Cyrus
5451: PPUSH
5452: LD_INT 1
5454: PPUSH
5455: LD_VAR 0 10
5459: PPUSH
5460: CALL 39471 0 3
5464: ST_TO_ADDR
// if Cyrus then
5465: LD_EXP 18
5469: IFFALSE 5500
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5471: LD_ADDR_VAR 0 6
5475: PUSH
5476: LD_VAR 0 6
5480: PPUSH
5481: LD_VAR 0 6
5485: PUSH
5486: LD_INT 1
5488: PLUS
5489: PPUSH
5490: LD_EXP 18
5494: PPUSH
5495: CALL_OW 1
5499: ST_TO_ADDR
// end ; if not Lisa then
5500: LD_EXP 19
5504: NOT
5505: IFFALSE 5566
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5507: LD_ADDR_EXP 19
5511: PUSH
5512: LD_STRING Lisa
5514: PPUSH
5515: LD_EXP 1
5519: NOT
5520: PPUSH
5521: LD_VAR 0 10
5525: PPUSH
5526: CALL 39471 0 3
5530: ST_TO_ADDR
// if Lisa then
5531: LD_EXP 19
5535: IFFALSE 5566
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5537: LD_ADDR_VAR 0 6
5541: PUSH
5542: LD_VAR 0 6
5546: PPUSH
5547: LD_VAR 0 6
5551: PUSH
5552: LD_INT 1
5554: PLUS
5555: PPUSH
5556: LD_EXP 19
5560: PPUSH
5561: CALL_OW 1
5565: ST_TO_ADDR
// end ; if not Frank then
5566: LD_EXP 20
5570: NOT
5571: IFFALSE 5632
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5573: LD_ADDR_EXP 20
5577: PUSH
5578: LD_STRING Frank
5580: PPUSH
5581: LD_EXP 1
5585: NOT
5586: PPUSH
5587: LD_VAR 0 10
5591: PPUSH
5592: CALL 39471 0 3
5596: ST_TO_ADDR
// if Frank then
5597: LD_EXP 20
5601: IFFALSE 5632
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5603: LD_ADDR_VAR 0 6
5607: PUSH
5608: LD_VAR 0 6
5612: PPUSH
5613: LD_VAR 0 6
5617: PUSH
5618: LD_INT 1
5620: PLUS
5621: PPUSH
5622: LD_EXP 20
5626: PPUSH
5627: CALL_OW 1
5631: ST_TO_ADDR
// end ; if not Kikuchi then
5632: LD_EXP 22
5636: NOT
5637: IFFALSE 5695
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5639: LD_ADDR_EXP 22
5643: PUSH
5644: LD_STRING Kikuchi
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: LD_VAR 0 10
5654: PPUSH
5655: CALL 39471 0 3
5659: ST_TO_ADDR
// if Kikuchi then
5660: LD_EXP 22
5664: IFFALSE 5695
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5666: LD_ADDR_VAR 0 6
5670: PUSH
5671: LD_VAR 0 6
5675: PPUSH
5676: LD_VAR 0 6
5680: PUSH
5681: LD_INT 1
5683: PLUS
5684: PPUSH
5685: LD_EXP 22
5689: PPUSH
5690: CALL_OW 1
5694: ST_TO_ADDR
// end ; if not Gladstone then
5695: LD_EXP 21
5699: NOT
5700: IFFALSE 5761
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5702: LD_ADDR_EXP 21
5706: PUSH
5707: LD_STRING Gladstone
5709: PPUSH
5710: LD_EXP 1
5714: NOT
5715: PPUSH
5716: LD_VAR 0 10
5720: PPUSH
5721: CALL 39471 0 3
5725: ST_TO_ADDR
// if Gladstone then
5726: LD_EXP 21
5730: IFFALSE 5761
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5732: LD_ADDR_VAR 0 6
5736: PUSH
5737: LD_VAR 0 6
5741: PPUSH
5742: LD_VAR 0 6
5746: PUSH
5747: LD_INT 1
5749: PLUS
5750: PPUSH
5751: LD_EXP 21
5755: PPUSH
5756: CALL_OW 1
5760: ST_TO_ADDR
// end ; if not Khatam then
5761: LD_EXP 23
5765: NOT
5766: IFFALSE 5824
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5768: LD_ADDR_EXP 23
5772: PUSH
5773: LD_STRING Khatam
5775: PPUSH
5776: LD_INT 1
5778: PPUSH
5779: LD_VAR 0 10
5783: PPUSH
5784: CALL 39471 0 3
5788: ST_TO_ADDR
// if Khatam then
5789: LD_EXP 23
5793: IFFALSE 5824
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5795: LD_ADDR_VAR 0 6
5799: PUSH
5800: LD_VAR 0 6
5804: PPUSH
5805: LD_VAR 0 6
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: PPUSH
5814: LD_EXP 23
5818: PPUSH
5819: CALL_OW 1
5823: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5824: LD_ADDR_VAR 0 4
5828: PUSH
5829: LD_STRING 07c_others
5831: PPUSH
5832: CALL_OW 31
5836: ST_TO_ADDR
// squad := others ;
5837: LD_ADDR_VAR 0 5
5841: PUSH
5842: LD_VAR 0 4
5846: ST_TO_ADDR
// if others then
5847: LD_VAR 0 4
5851: IFFALSE 5902
// for i in others do
5853: LD_ADDR_VAR 0 2
5857: PUSH
5858: LD_VAR 0 4
5862: PUSH
5863: FOR_IN
5864: IFFALSE 5900
// begin SetTag ( i , 108 ) ;
5866: LD_VAR 0 2
5870: PPUSH
5871: LD_INT 108
5873: PPUSH
5874: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5878: LD_ADDR_VAR 0 6
5882: PUSH
5883: LD_VAR 0 6
5887: PPUSH
5888: LD_VAR 0 2
5892: PPUSH
5893: CALL 76939 0 2
5897: ST_TO_ADDR
// end ;
5898: GO 5863
5900: POP
5901: POP
// if tmp then
5902: LD_VAR 0 6
5906: IFFALSE 6121
// begin for i in tmp do
5908: LD_ADDR_VAR 0 2
5912: PUSH
5913: LD_VAR 0 6
5917: PUSH
5918: FOR_IN
5919: IFFALSE 6119
// begin SetDir ( i , dir ) ;
5921: LD_VAR 0 2
5925: PPUSH
5926: LD_VAR 0 12
5930: PPUSH
5931: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
5935: LD_VAR 0 2
5939: PPUSH
5940: CALL_OW 257
5944: PUSH
5945: LD_INT 3
5947: EQUAL
5948: PUSH
5949: LD_VAR 0 7
5953: AND
5954: IFFALSE 6044
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5956: LD_VAR 0 7
5960: PUSH
5961: LD_INT 1
5963: ARRAY
5964: PPUSH
5965: LD_INT 0
5967: PPUSH
5968: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5972: LD_VAR 0 7
5976: PUSH
5977: LD_INT 1
5979: ARRAY
5980: PPUSH
5981: LD_VAR 0 14
5985: PUSH
5986: LD_INT 1
5988: ARRAY
5989: PPUSH
5990: LD_VAR 0 14
5994: PUSH
5995: LD_INT 2
5997: ARRAY
5998: PPUSH
5999: LD_INT 0
6001: PPUSH
6002: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_VAR 0 7
6015: PUSH
6016: LD_INT 1
6018: ARRAY
6019: PPUSH
6020: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6024: LD_ADDR_VAR 0 7
6028: PUSH
6029: LD_VAR 0 7
6033: PPUSH
6034: LD_INT 1
6036: PPUSH
6037: CALL_OW 3
6041: ST_TO_ADDR
// end else
6042: GO 6061
// PlaceUnitArea ( i , area , false ) ;
6044: LD_VAR 0 2
6048: PPUSH
6049: LD_VAR 0 11
6053: PPUSH
6054: LD_INT 0
6056: PPUSH
6057: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6061: LD_VAR 0 2
6065: PPUSH
6066: LD_VAR 0 13
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_VAR 0 13
6079: PUSH
6080: LD_INT 2
6082: ARRAY
6083: PPUSH
6084: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6088: LD_INT 35
6090: PPUSH
6091: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6095: LD_VAR 0 11
6099: PPUSH
6100: LD_INT 22
6102: PUSH
6103: LD_INT 1
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PPUSH
6110: CALL_OW 70
6114: NOT
6115: IFFALSE 6088
// end ;
6117: GO 5918
6119: POP
6120: POP
// end ; PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6121: LD_EXP 14
6125: PPUSH
6126: LD_VAR 0 14
6130: PUSH
6131: LD_INT 1
6133: ARRAY
6134: PPUSH
6135: LD_VAR 0 14
6139: PUSH
6140: LD_INT 2
6142: ARRAY
6143: PPUSH
6144: LD_INT 0
6146: PPUSH
6147: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6151: LD_EXP 14
6155: PPUSH
6156: LD_VAR 0 13
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PPUSH
6165: LD_VAR 0 13
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PPUSH
6174: CALL_OW 111
// jmmArrival := true ;
6178: LD_ADDR_EXP 8
6182: PUSH
6183: LD_INT 1
6185: ST_TO_ADDR
// end ;
6186: LD_VAR 0 1
6190: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6191: LD_INT 0
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
6197: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6198: LD_INT 1
6200: PPUSH
6201: LD_INT 17
6203: PPUSH
6204: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6208: LD_INT 2
6210: PPUSH
6211: LD_INT 17
6213: PPUSH
6214: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6218: LD_ADDR_VAR 0 5
6222: PUSH
6223: LD_INT 6
6225: PPUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 21
6231: PUSH
6232: LD_INT 3
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 70
6247: ST_TO_ADDR
// if tmp then
6248: LD_VAR 0 5
6252: IFFALSE 6276
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6254: LD_VAR 0 5
6258: PPUSH
6259: LD_INT 33
6261: PPUSH
6262: LD_INT 39
6264: PPUSH
6265: CALL_OW 111
// wait ( 0 0$3 ) ;
6269: LD_INT 105
6271: PPUSH
6272: CALL_OW 67
// end ; uc_side := 4 ;
6276: LD_ADDR_OWVAR 20
6280: PUSH
6281: LD_INT 4
6283: ST_TO_ADDR
// uc_nation := 1 ;
6284: LD_ADDR_OWVAR 21
6288: PUSH
6289: LD_INT 1
6291: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6292: LD_ADDR_EXP 28
6296: PUSH
6297: LD_STRING Sikorski
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_STRING 
6305: PPUSH
6306: CALL 39471 0 3
6310: ST_TO_ADDR
// vc_engine := engine_combustion ;
6311: LD_ADDR_OWVAR 39
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// vc_control := control_manual ;
6319: LD_ADDR_OWVAR 38
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6327: LD_ADDR_OWVAR 40
6331: PUSH
6332: LD_INT 6
6334: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6335: LD_ADDR_OWVAR 37
6339: PUSH
6340: LD_INT 4
6342: ST_TO_ADDR
// veh := CreateVehicle ;
6343: LD_ADDR_VAR 0 4
6347: PUSH
6348: CALL_OW 45
6352: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6353: LD_VAR 0 4
6357: PPUSH
6358: LD_INT 3
6360: PPUSH
6361: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6365: LD_VAR 0 4
6369: PPUSH
6370: LD_INT 4
6372: NEG
6373: PPUSH
6374: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6378: LD_VAR 0 4
6382: PPUSH
6383: LD_INT 70
6385: PPUSH
6386: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6390: LD_VAR 0 4
6394: PPUSH
6395: LD_INT 6
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6405: LD_EXP 28
6409: PPUSH
6410: LD_VAR 0 4
6414: PPUSH
6415: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6419: LD_EXP 28
6423: PPUSH
6424: LD_INT 37
6426: PPUSH
6427: LD_INT 30
6429: PPUSH
6430: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6434: LD_INT 10
6436: PPUSH
6437: CALL_OW 67
// InitHc_All ( ) ;
6441: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6445: LD_ADDR_VAR 0 2
6449: PUSH
6450: DOUBLE
6451: LD_INT 1
6453: DEC
6454: ST_TO_ADDR
6455: LD_INT 3
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 2
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: LD_OWVAR 67
6477: ARRAY
6478: PUSH
6479: FOR_TO
6480: IFFALSE 6592
// begin uc_side := 4 ;
6482: LD_ADDR_OWVAR 20
6486: PUSH
6487: LD_INT 4
6489: ST_TO_ADDR
// uc_nation := 1 ;
6490: LD_ADDR_OWVAR 21
6494: PUSH
6495: LD_INT 1
6497: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6498: LD_INT 0
6500: PPUSH
6501: LD_INT 1
6503: PPUSH
6504: LD_INT 4
6506: PPUSH
6507: LD_INT 7
6509: PPUSH
6510: CALL_OW 12
6514: PPUSH
6515: CALL_OW 380
// un := CreateHuman ;
6519: LD_ADDR_VAR 0 3
6523: PUSH
6524: CALL_OW 44
6528: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6529: LD_VAR 0 3
6533: PPUSH
6534: LD_INT 3
6536: PPUSH
6537: CALL_OW 233
// SetTag ( un , 101 ) ;
6541: LD_VAR 0 3
6545: PPUSH
6546: LD_INT 101
6548: PPUSH
6549: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6553: LD_VAR 0 3
6557: PPUSH
6558: LD_INT 6
6560: PPUSH
6561: LD_INT 0
6563: PPUSH
6564: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6568: LD_VAR 0 3
6572: PPUSH
6573: LD_INT 25
6575: PPUSH
6576: LD_INT 27
6578: PPUSH
6579: CALL_OW 111
// wait ( 0 0$1 ) ;
6583: LD_INT 35
6585: PPUSH
6586: CALL_OW 67
// end ;
6590: GO 6479
6592: POP
6593: POP
// for i := 1 to 2 do
6594: LD_ADDR_VAR 0 2
6598: PUSH
6599: DOUBLE
6600: LD_INT 1
6602: DEC
6603: ST_TO_ADDR
6604: LD_INT 2
6606: PUSH
6607: FOR_TO
6608: IFFALSE 6720
// begin uc_side := 4 ;
6610: LD_ADDR_OWVAR 20
6614: PUSH
6615: LD_INT 4
6617: ST_TO_ADDR
// uc_nation := 1 ;
6618: LD_ADDR_OWVAR 21
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6626: LD_INT 0
6628: PPUSH
6629: LD_INT 4
6631: PPUSH
6632: LD_INT 3
6634: PPUSH
6635: LD_INT 5
6637: PPUSH
6638: CALL_OW 12
6642: PPUSH
6643: CALL_OW 380
// un := CreateHuman ;
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: CALL_OW 44
6656: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6657: LD_VAR 0 3
6661: PPUSH
6662: LD_INT 3
6664: PPUSH
6665: CALL_OW 233
// SetTag ( un , 101 ) ;
6669: LD_VAR 0 3
6673: PPUSH
6674: LD_INT 101
6676: PPUSH
6677: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6681: LD_VAR 0 3
6685: PPUSH
6686: LD_INT 6
6688: PPUSH
6689: LD_INT 0
6691: PPUSH
6692: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6696: LD_VAR 0 3
6700: PPUSH
6701: LD_INT 25
6703: PPUSH
6704: LD_INT 27
6706: PPUSH
6707: CALL_OW 111
// wait ( 0 0$1 ) ;
6711: LD_INT 35
6713: PPUSH
6714: CALL_OW 67
// end ;
6718: GO 6607
6720: POP
6721: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6722: LD_ADDR_VAR 0 2
6726: PUSH
6727: DOUBLE
6728: LD_INT 1
6730: DEC
6731: ST_TO_ADDR
6732: LD_INT 5
6734: PUSH
6735: LD_INT 4
6737: PUSH
6738: LD_INT 3
6740: PUSH
6741: LD_INT 3
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: PUSH
6750: LD_OWVAR 67
6754: ARRAY
6755: PUSH
6756: FOR_TO
6757: IFFALSE 6999
// begin uc_side := 4 ;
6759: LD_ADDR_OWVAR 20
6763: PUSH
6764: LD_INT 4
6766: ST_TO_ADDR
// uc_nation := 1 ;
6767: LD_ADDR_OWVAR 21
6771: PUSH
6772: LD_INT 1
6774: ST_TO_ADDR
// vc_engine := engine_combustion ;
6775: LD_ADDR_OWVAR 39
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// vc_control := control_manual ;
6783: LD_ADDR_OWVAR 38
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6791: LD_ADDR_OWVAR 40
6795: PUSH
6796: LD_INT 5
6798: PUSH
6799: LD_INT 7
6801: PUSH
6802: LD_INT 5
6804: PUSH
6805: LD_INT 4
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: PUSH
6814: LD_VAR 0 2
6818: PUSH
6819: LD_INT 4
6821: MOD
6822: PUSH
6823: LD_INT 1
6825: PLUS
6826: ARRAY
6827: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6828: LD_ADDR_OWVAR 37
6832: PUSH
6833: LD_INT 3
6835: PUSH
6836: LD_INT 3
6838: PUSH
6839: LD_INT 4
6841: PUSH
6842: LD_INT 4
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: PUSH
6851: LD_VAR 0 2
6855: PUSH
6856: LD_INT 4
6858: MOD
6859: PUSH
6860: LD_INT 1
6862: PLUS
6863: ARRAY
6864: ST_TO_ADDR
// veh := CreateVehicle ;
6865: LD_ADDR_VAR 0 4
6869: PUSH
6870: CALL_OW 45
6874: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6875: LD_VAR 0 4
6879: PPUSH
6880: LD_INT 3
6882: PPUSH
6883: CALL_OW 233
// SetTag ( veh , 0 ) ;
6887: LD_VAR 0 4
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6899: LD_VAR 0 4
6903: PPUSH
6904: LD_INT 70
6906: PPUSH
6907: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6911: LD_VAR 0 4
6915: PPUSH
6916: LD_INT 6
6918: PPUSH
6919: LD_INT 0
6921: PPUSH
6922: CALL_OW 49
// InitHc ;
6926: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
6930: LD_INT 0
6932: PPUSH
6933: LD_INT 3
6935: PPUSH
6936: LD_INT 4
6938: PPUSH
6939: LD_INT 7
6941: PPUSH
6942: CALL_OW 12
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 3
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6961: LD_VAR 0 3
6965: PPUSH
6966: LD_VAR 0 4
6970: PPUSH
6971: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
6975: LD_VAR 0 3
6979: PPUSH
6980: LD_INT 30
6982: PPUSH
6983: LD_INT 22
6985: PPUSH
6986: CALL_OW 111
// wait ( 0 0$3 ) ;
6990: LD_INT 105
6992: PPUSH
6993: CALL_OW 67
// end ;
6997: GO 6756
6999: POP
7000: POP
// wait ( 0 0$10 ) ;
7001: LD_INT 350
7003: PPUSH
7004: CALL_OW 67
// end ;
7008: LD_VAR 0 1
7012: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7013: LD_INT 0
7015: PPUSH
7016: PPUSH
7017: PPUSH
7018: PPUSH
// gammaBase := [ ] ;
7019: LD_ADDR_VAR 0 4
7023: PUSH
7024: EMPTY
7025: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7026: LD_ADDR_VAR 0 5
7030: PUSH
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 22
7038: PUSH
7039: LD_INT 1
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 21
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 50
7058: PUSH
7059: EMPTY
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: PPUSH
7067: CALL_OW 70
7071: ST_TO_ADDR
// for i in buildings do
7072: LD_ADDR_VAR 0 3
7076: PUSH
7077: LD_VAR 0 5
7081: PUSH
7082: FOR_IN
7083: IFFALSE 7520
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7085: LD_VAR 0 3
7089: PPUSH
7090: CALL_OW 266
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: LD_INT 7
7100: PUSH
7101: LD_INT 8
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: IN
7109: IFFALSE 7223
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7111: LD_ADDR_VAR 0 4
7115: PUSH
7116: LD_VAR 0 4
7120: PUSH
7121: LD_VAR 0 3
7125: PPUSH
7126: CALL_OW 266
7130: PUSH
7131: LD_VAR 0 3
7135: PPUSH
7136: CALL_OW 250
7140: PUSH
7141: LD_VAR 0 3
7145: PPUSH
7146: CALL_OW 251
7150: PUSH
7151: LD_VAR 0 3
7155: PPUSH
7156: CALL_OW 254
7160: PUSH
7161: LD_VAR 0 3
7165: PPUSH
7166: CALL_OW 267
7170: PUSH
7171: LD_VAR 0 3
7175: PPUSH
7176: CALL_OW 248
7180: PUSH
7181: LD_VAR 0 3
7185: PPUSH
7186: LD_INT 1
7188: PPUSH
7189: CALL_OW 268
7193: PUSH
7194: LD_VAR 0 3
7198: PPUSH
7199: LD_INT 2
7201: PPUSH
7202: CALL_OW 268
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: ADD
7220: ST_TO_ADDR
7221: GO 7518
// if GetBType ( i ) = b_bunker then
7223: LD_VAR 0 3
7227: PPUSH
7228: CALL_OW 266
7232: PUSH
7233: LD_INT 32
7235: EQUAL
7236: IFFALSE 7333
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7238: LD_ADDR_VAR 0 4
7242: PUSH
7243: LD_VAR 0 4
7247: PUSH
7248: LD_VAR 0 3
7252: PPUSH
7253: CALL_OW 266
7257: PUSH
7258: LD_VAR 0 3
7262: PPUSH
7263: CALL_OW 250
7267: PUSH
7268: LD_VAR 0 3
7272: PPUSH
7273: CALL_OW 251
7277: PUSH
7278: LD_VAR 0 3
7282: PPUSH
7283: CALL_OW 254
7287: PUSH
7288: LD_VAR 0 3
7292: PPUSH
7293: CALL_OW 267
7297: PUSH
7298: LD_VAR 0 3
7302: PPUSH
7303: CALL_OW 248
7307: PUSH
7308: LD_VAR 0 3
7312: PPUSH
7313: CALL_OW 269
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: ADD
7330: ST_TO_ADDR
7331: GO 7518
// if GetBType ( i ) = b_factory then
7333: LD_VAR 0 3
7337: PPUSH
7338: CALL_OW 266
7342: PUSH
7343: LD_INT 3
7345: EQUAL
7346: IFFALSE 7436
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7348: LD_ADDR_VAR 0 4
7352: PUSH
7353: LD_VAR 0 4
7357: PPUSH
7358: LD_INT 1
7360: PPUSH
7361: LD_VAR 0 3
7365: PPUSH
7366: CALL_OW 266
7370: PUSH
7371: LD_VAR 0 3
7375: PPUSH
7376: CALL_OW 250
7380: PUSH
7381: LD_VAR 0 3
7385: PPUSH
7386: CALL_OW 251
7390: PUSH
7391: LD_VAR 0 3
7395: PPUSH
7396: CALL_OW 254
7400: PUSH
7401: LD_VAR 0 3
7405: PPUSH
7406: CALL_OW 267
7410: PUSH
7411: LD_VAR 0 3
7415: PPUSH
7416: CALL_OW 248
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 2
7433: ST_TO_ADDR
7434: GO 7518
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7436: LD_ADDR_VAR 0 4
7440: PUSH
7441: LD_VAR 0 4
7445: PUSH
7446: LD_VAR 0 3
7450: PPUSH
7451: CALL_OW 266
7455: PUSH
7456: LD_VAR 0 3
7460: PPUSH
7461: CALL_OW 250
7465: PUSH
7466: LD_VAR 0 3
7470: PPUSH
7471: CALL_OW 251
7475: PUSH
7476: LD_VAR 0 3
7480: PPUSH
7481: CALL_OW 254
7485: PUSH
7486: LD_VAR 0 3
7490: PPUSH
7491: CALL_OW 267
7495: PUSH
7496: LD_VAR 0 3
7500: PPUSH
7501: CALL_OW 248
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: ADD
7517: ST_TO_ADDR
// end ;
7518: GO 7082
7520: POP
7521: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7522: LD_VAR 0 4
7526: PPUSH
7527: LD_STRING 08_GammaBase
7529: PPUSH
7530: CALL_OW 39
// end ;
7534: LD_VAR 0 2
7538: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7539: LD_INT 0
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
7545: PPUSH
7546: PPUSH
7547: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7548: LD_ADDR_VAR 0 3
7552: PUSH
7553: LD_INT 17
7555: PPUSH
7556: LD_INT 22
7558: PUSH
7559: LD_INT 1
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 3
7568: PUSH
7569: LD_INT 21
7571: PUSH
7572: LD_INT 3
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: LD_INT 3
7585: PUSH
7586: LD_INT 33
7588: PUSH
7589: LD_INT 2
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 70
7609: ST_TO_ADDR
// if tmp then
7610: LD_VAR 0 3
7614: IFFALSE 7733
// begin for i in tmp do
7616: LD_ADDR_VAR 0 2
7620: PUSH
7621: LD_VAR 0 3
7625: PUSH
7626: FOR_IN
7627: IFFALSE 7658
// begin SetSide ( i , 4 ) ;
7629: LD_VAR 0 2
7633: PPUSH
7634: LD_INT 4
7636: PPUSH
7637: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7641: LD_VAR 0 2
7645: PPUSH
7646: LD_INT 42
7648: PPUSH
7649: LD_INT 22
7651: PPUSH
7652: CALL_OW 111
// end ;
7656: GO 7626
7658: POP
7659: POP
// repeat wait ( 0 0$3 ) ;
7660: LD_INT 105
7662: PPUSH
7663: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7667: LD_VAR 0 3
7671: PPUSH
7672: LD_INT 51
7674: PPUSH
7675: LD_INT 16
7677: PPUSH
7678: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
7682: LD_VAR 0 3
7686: PPUSH
7687: LD_INT 95
7689: PUSH
7690: LD_INT 17
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PPUSH
7697: CALL_OW 72
7701: NOT
7702: IFFALSE 7660
// for i in tmp do
7704: LD_ADDR_VAR 0 2
7708: PUSH
7709: LD_VAR 0 3
7713: PUSH
7714: FOR_IN
7715: IFFALSE 7731
// SetSide ( i , 1 ) ;
7717: LD_VAR 0 2
7721: PPUSH
7722: LD_INT 1
7724: PPUSH
7725: CALL_OW 235
7729: GO 7714
7731: POP
7732: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
7733: LD_ADDR_VAR 0 3
7737: PUSH
7738: LD_INT 17
7740: PPUSH
7741: LD_INT 22
7743: PUSH
7744: LD_INT 1
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 33
7753: PUSH
7754: LD_INT 2
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 70
7769: ST_TO_ADDR
// if tmp then
7770: LD_VAR 0 3
7774: IFFALSE 7798
// begin ComMoveXY ( tmp , 40 , 32 ) ;
7776: LD_VAR 0 3
7780: PPUSH
7781: LD_INT 40
7783: PPUSH
7784: LD_INT 32
7786: PPUSH
7787: CALL_OW 111
// wait ( 0 0$3 ) ;
7791: LD_INT 105
7793: PPUSH
7794: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
7798: LD_ADDR_VAR 0 3
7802: PUSH
7803: LD_INT 17
7805: PPUSH
7806: LD_INT 22
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 2
7818: PUSH
7819: LD_INT 21
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 21
7831: PUSH
7832: LD_INT 3
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PPUSH
7848: CALL_OW 70
7852: ST_TO_ADDR
// if tmp then
7853: LD_VAR 0 3
7857: IFFALSE 8005
// begin repeat wait ( 0 0$1 ) ;
7859: LD_INT 35
7861: PPUSH
7862: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
7866: LD_ADDR_VAR 0 3
7870: PUSH
7871: LD_INT 17
7873: PPUSH
7874: LD_INT 22
7876: PUSH
7877: LD_INT 1
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: LD_INT 2
7886: PUSH
7887: LD_INT 21
7889: PUSH
7890: LD_INT 2
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 21
7899: PUSH
7900: LD_INT 3
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: LIST
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PPUSH
7916: CALL_OW 70
7920: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
7921: LD_ADDR_VAR 0 2
7925: PUSH
7926: LD_INT 22
7928: PUSH
7929: LD_INT 4
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: LD_INT 25
7941: PUSH
7942: LD_INT 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 21
7951: PUSH
7952: LD_INT 2
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PPUSH
7968: CALL_OW 69
7972: PUSH
7973: FOR_IN
7974: IFFALSE 7996
// ComAttackUnit ( i , tmp [ 1 ] ) ;
7976: LD_VAR 0 2
7980: PPUSH
7981: LD_VAR 0 3
7985: PUSH
7986: LD_INT 1
7988: ARRAY
7989: PPUSH
7990: CALL_OW 115
7994: GO 7973
7996: POP
7997: POP
// until not tmp ;
7998: LD_VAR 0 3
8002: NOT
8003: IFFALSE 7859
// end ; wait ( 0 0$2 ) ;
8005: LD_INT 70
8007: PPUSH
8008: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8012: LD_ADDR_VAR 0 3
8016: PUSH
8017: LD_INT 22
8019: PUSH
8020: LD_INT 4
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PPUSH
8027: CALL_OW 69
8031: ST_TO_ADDR
// AgressiveMove ( tmp , [ [ 55 , 62 ] ] ) ;
8032: LD_VAR 0 3
8036: PPUSH
8037: LD_INT 55
8039: PUSH
8040: LD_INT 62
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: PPUSH
8050: CALL 79543 0 2
// AddComWait ( tmp , 0 0$05 ) ;
8054: LD_VAR 0 3
8058: PPUSH
8059: LD_INT 175
8061: PPUSH
8062: CALL_OW 202
// wait ( 0 0$5 ) ;
8066: LD_INT 175
8068: PPUSH
8069: CALL_OW 67
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
8073: LD_VAR 0 3
8077: PPUSH
8078: LD_INT 120
8080: PUSH
8081: LD_INT 101
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PPUSH
8088: CALL_OW 72
8092: PPUSH
8093: LD_INT 58
8095: PPUSH
8096: LD_INT 96
8098: PPUSH
8099: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8103: LD_VAR 0 3
8107: PPUSH
8108: LD_INT 120
8110: PUSH
8111: LD_INT 101
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 72
8122: PPUSH
8123: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
8127: LD_VAR 0 3
8131: PPUSH
8132: LD_INT 120
8134: PUSH
8135: LD_INT 101
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: LD_INT 25
8144: PUSH
8145: LD_INT 4
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PPUSH
8156: CALL_OW 72
8160: PPUSH
8161: LD_INT 52
8163: PPUSH
8164: LD_INT 93
8166: PPUSH
8167: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8171: LD_VAR 0 3
8175: PPUSH
8176: LD_INT 120
8178: PUSH
8179: LD_INT 101
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: LD_INT 25
8188: PUSH
8189: LD_INT 4
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 72
8204: PPUSH
8205: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8209: LD_ADDR_VAR 0 7
8213: PUSH
8214: LD_VAR 0 3
8218: PPUSH
8219: LD_INT 21
8221: PUSH
8222: LD_INT 2
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PPUSH
8229: CALL_OW 72
8233: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8234: LD_ADDR_VAR 0 4
8238: PUSH
8239: LD_INT 81
8241: PUSH
8242: LD_INT 1
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 69
8253: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8254: LD_ADDR_VAR 0 5
8258: PUSH
8259: LD_INT 57
8261: PUSH
8262: LD_INT 66
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 62
8271: PUSH
8272: LD_INT 58
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8283: LD_INT 35
8285: PPUSH
8286: CALL_OW 67
// for i in filter do
8290: LD_ADDR_VAR 0 2
8294: PUSH
8295: LD_VAR 0 7
8299: PUSH
8300: FOR_IN
8301: IFFALSE 8740
// begin if IsDead ( i ) then
8303: LD_VAR 0 2
8307: PPUSH
8308: CALL_OW 301
8312: IFFALSE 8332
// begin filter := filter diff i ;
8314: LD_ADDR_VAR 0 7
8318: PUSH
8319: LD_VAR 0 7
8323: PUSH
8324: LD_VAR 0 2
8328: DIFF
8329: ST_TO_ADDR
// continue ;
8330: GO 8300
// end ; tmp := IsDrivenBy ( i ) ;
8332: LD_ADDR_VAR 0 3
8336: PUSH
8337: LD_VAR 0 2
8341: PPUSH
8342: CALL_OW 311
8346: ST_TO_ADDR
// if not tmp then
8347: LD_VAR 0 3
8351: NOT
8352: IFFALSE 8356
// continue ;
8354: GO 8300
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8356: LD_VAR 0 2
8360: PPUSH
8361: CALL_OW 261
8365: PUSH
8366: LD_INT 30
8368: GREATER
8369: PUSH
8370: LD_VAR 0 2
8374: PPUSH
8375: CALL_OW 110
8379: PUSH
8380: LD_INT 2
8382: EQUAL
8383: AND
8384: IFFALSE 8400
// SetTag ( i , 0 ) else
8386: LD_VAR 0 2
8390: PPUSH
8391: LD_INT 0
8393: PPUSH
8394: CALL_OW 109
8398: GO 8444
// if GetTag ( i ) = 2 then
8400: LD_VAR 0 2
8404: PPUSH
8405: CALL_OW 110
8409: PUSH
8410: LD_INT 2
8412: EQUAL
8413: IFFALSE 8444
// begin ComMoveXY ( i , 52 , 50 ) ;
8415: LD_VAR 0 2
8419: PPUSH
8420: LD_INT 52
8422: PPUSH
8423: LD_INT 50
8425: PPUSH
8426: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
8430: LD_VAR 0 2
8434: PPUSH
8435: LD_EXP 31
8439: PPUSH
8440: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8444: LD_VAR 0 2
8448: PPUSH
8449: CALL_OW 256
8453: PUSH
8454: LD_INT 600
8456: GREATEREQUAL
8457: PUSH
8458: LD_VAR 0 2
8462: PPUSH
8463: CALL_OW 110
8467: NOT
8468: AND
8469: IFFALSE 8495
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8471: LD_VAR 0 2
8475: PPUSH
8476: LD_VAR 0 4
8480: PPUSH
8481: LD_VAR 0 2
8485: PPUSH
8486: CALL_OW 74
8490: PPUSH
8491: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8495: LD_VAR 0 2
8499: PPUSH
8500: CALL_OW 256
8504: PUSH
8505: LD_INT 600
8507: LESS
8508: PUSH
8509: LD_VAR 0 2
8513: PPUSH
8514: CALL_OW 110
8518: NOT
8519: AND
8520: IFFALSE 8596
// begin SetTag ( i , 1 ) ;
8522: LD_VAR 0 2
8526: PPUSH
8527: LD_INT 1
8529: PPUSH
8530: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8534: LD_ADDR_VAR 0 6
8538: PUSH
8539: LD_VAR 0 2
8543: PPUSH
8544: LD_VAR 0 5
8548: PPUSH
8549: CALL 80283 0 2
8553: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_VAR 0 6
8563: PUSH
8564: LD_INT 1
8566: ARRAY
8567: PPUSH
8568: LD_VAR 0 6
8572: PUSH
8573: LD_INT 2
8575: ARRAY
8576: PPUSH
8577: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8581: LD_VAR 0 2
8585: PPUSH
8586: LD_INT 40
8588: PPUSH
8589: LD_INT 49
8591: PPUSH
8592: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8596: LD_VAR 0 2
8600: PPUSH
8601: CALL_OW 110
8605: PUSH
8606: LD_INT 1
8608: EQUAL
8609: PUSH
8610: LD_VAR 0 2
8614: PPUSH
8615: LD_INT 40
8617: PPUSH
8618: LD_INT 49
8620: PPUSH
8621: CALL_OW 297
8625: PUSH
8626: LD_INT 9
8628: LESS
8629: AND
8630: PUSH
8631: LD_VAR 0 3
8635: AND
8636: IFFALSE 8738
// begin ComExitVehicle ( tmp ) ;
8638: LD_VAR 0 3
8642: PPUSH
8643: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8647: LD_VAR 0 3
8651: PPUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8661: LD_INT 35
8663: PPUSH
8664: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8668: LD_VAR 0 2
8672: PPUSH
8673: CALL_OW 256
8677: PUSH
8678: LD_INT 1000
8680: EQUAL
8681: IFFALSE 8661
// ComEnterUnit ( tmp , i ) ;
8683: LD_VAR 0 3
8687: PPUSH
8688: LD_VAR 0 2
8692: PPUSH
8693: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8697: LD_VAR 0 2
8701: PPUSH
8702: CALL_OW 261
8706: PUSH
8707: LD_INT 40
8709: LESSEQUAL
8710: IFFALSE 8726
// SetTag ( i , 2 ) else
8712: LD_VAR 0 2
8716: PPUSH
8717: LD_INT 2
8719: PPUSH
8720: CALL_OW 109
8724: GO 8738
// SetTag ( i , 0 ) ;
8726: LD_VAR 0 2
8730: PPUSH
8731: LD_INT 0
8733: PPUSH
8734: CALL_OW 109
// end ; end ;
8738: GO 8300
8740: POP
8741: POP
// until not filter ;
8742: LD_VAR 0 7
8746: NOT
8747: IFFALSE 8283
// end ; end_of_file
8749: LD_VAR 0 1
8753: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8754: LD_INT 0
8756: PPUSH
8757: PPUSH
8758: PPUSH
8759: PPUSH
8760: PPUSH
// uc_side := 3 ;
8761: LD_ADDR_OWVAR 20
8765: PUSH
8766: LD_INT 3
8768: ST_TO_ADDR
// uc_nation := 3 ;
8769: LD_ADDR_OWVAR 21
8773: PUSH
8774: LD_INT 3
8776: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
8777: LD_ADDR_EXP 33
8781: PUSH
8782: LD_INT 8
8784: PUSH
8785: LD_INT 11
8787: PUSH
8788: LD_INT 14
8790: PUSH
8791: LD_INT 17
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: PUSH
8800: LD_OWVAR 67
8804: ARRAY
8805: ST_TO_ADDR
// ruMobile := [ ] ;
8806: LD_ADDR_EXP 34
8810: PUSH
8811: EMPTY
8812: ST_TO_ADDR
// ruBuildList := [ ] ;
8813: LD_ADDR_EXP 35
8817: PUSH
8818: EMPTY
8819: ST_TO_ADDR
// russianAttackers := [ ] ;
8820: LD_ADDR_EXP 36
8824: PUSH
8825: EMPTY
8826: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8827: LD_ADDR_VAR 0 5
8831: PUSH
8832: LD_INT 43
8834: PUSH
8835: LD_INT 44
8837: PUSH
8838: LD_INT 46
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: ST_TO_ADDR
// if Difficulty > 2 then
8846: LD_OWVAR 67
8850: PUSH
8851: LD_INT 2
8853: GREATER
8854: IFFALSE 8877
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8856: LD_ADDR_VAR 0 5
8860: PUSH
8861: LD_VAR 0 5
8865: PUSH
8866: LD_INT 45
8868: PUSH
8869: LD_INT 46
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: ADD
8876: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8877: LD_ADDR_EXP 32
8881: PUSH
8882: LD_STRING Borodin
8884: PPUSH
8885: CALL_OW 25
8889: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8890: LD_EXP 32
8894: PPUSH
8895: LD_INT 28
8897: PPUSH
8898: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8902: LD_INT 28
8904: PPUSH
8905: CALL_OW 274
8909: PPUSH
8910: LD_INT 1
8912: PPUSH
8913: LD_INT 3000
8915: PUSH
8916: LD_INT 4000
8918: PUSH
8919: LD_INT 5000
8921: PUSH
8922: LD_INT 6000
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: PUSH
8931: LD_OWVAR 67
8935: ARRAY
8936: PPUSH
8937: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
8941: LD_INT 28
8943: PPUSH
8944: CALL_OW 274
8948: PPUSH
8949: LD_INT 2
8951: PPUSH
8952: LD_INT 1000
8954: PPUSH
8955: CALL_OW 277
// if Difficulty > 2 then
8959: LD_OWVAR 67
8963: PUSH
8964: LD_INT 2
8966: GREATER
8967: IFFALSE 9091
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
8969: LD_ADDR_VAR 0 4
8973: PUSH
8974: LD_INT 99
8976: PUSH
8977: LD_INT 130
8979: PUSH
8980: LD_INT 2
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 121
8990: PUSH
8991: LD_INT 127
8993: PUSH
8994: LD_INT 4
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 117
9004: PUSH
9005: LD_INT 121
9007: PUSH
9008: LD_INT 4
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: LIST
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: LIST
9020: ST_TO_ADDR
// for i in tmp do
9021: LD_ADDR_VAR 0 2
9025: PUSH
9026: LD_VAR 0 4
9030: PUSH
9031: FOR_IN
9032: IFFALSE 9089
// begin bc_type := b_turret ;
9034: LD_ADDR_OWVAR 42
9038: PUSH
9039: LD_INT 33
9041: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9042: LD_ADDR_OWVAR 43
9046: PUSH
9047: LD_INT 2
9049: PUSH
9050: LD_OWVAR 67
9054: PLUS
9055: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9056: LD_VAR 0 2
9060: PUSH
9061: LD_INT 1
9063: ARRAY
9064: PPUSH
9065: LD_VAR 0 2
9069: PUSH
9070: LD_INT 2
9072: ARRAY
9073: PPUSH
9074: LD_VAR 0 2
9078: PUSH
9079: LD_INT 3
9081: ARRAY
9082: PPUSH
9083: CALL_OW 47
// end ;
9087: GO 9031
9089: POP
9090: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9091: LD_ADDR_VAR 0 2
9095: PUSH
9096: LD_INT 22
9098: PUSH
9099: LD_INT 3
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 21
9108: PUSH
9109: LD_INT 3
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 69
9124: PUSH
9125: FOR_IN
9126: IFFALSE 9148
// SetBLevel ( i , 2 + Difficulty ) ;
9128: LD_VAR 0 2
9132: PPUSH
9133: LD_INT 2
9135: PUSH
9136: LD_OWVAR 67
9140: PLUS
9141: PPUSH
9142: CALL_OW 241
9146: GO 9125
9148: POP
9149: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: LD_INT 22
9157: PUSH
9158: LD_INT 3
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 2
9167: PUSH
9168: LD_INT 30
9170: PUSH
9171: LD_INT 32
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PUSH
9178: LD_INT 30
9180: PUSH
9181: LD_INT 33
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PPUSH
9197: CALL_OW 69
9201: ST_TO_ADDR
// for i in tmp do
9202: LD_ADDR_VAR 0 2
9206: PUSH
9207: LD_VAR 0 4
9211: PUSH
9212: FOR_IN
9213: IFFALSE 9245
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9215: LD_VAR 0 2
9219: PPUSH
9220: LD_VAR 0 5
9224: PUSH
9225: LD_INT 1
9227: PPUSH
9228: LD_VAR 0 5
9232: PPUSH
9233: CALL_OW 12
9237: ARRAY
9238: PPUSH
9239: CALL_OW 431
9243: GO 9212
9245: POP
9246: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9247: LD_ADDR_VAR 0 2
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_INT 3
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 30
9264: PUSH
9265: LD_INT 32
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9331
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9284: LD_INT 0
9286: PPUSH
9287: LD_INT 5
9289: PUSH
9290: LD_INT 6
9292: PUSH
9293: LD_INT 7
9295: PUSH
9296: LD_INT 8
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: PUSH
9305: LD_OWVAR 67
9309: ARRAY
9310: PPUSH
9311: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9315: CALL_OW 44
9319: PPUSH
9320: LD_VAR 0 2
9324: PPUSH
9325: CALL_OW 52
// end ;
9329: GO 9281
9331: POP
9332: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9333: LD_ADDR_VAR 0 2
9337: PUSH
9338: LD_INT 22
9340: PUSH
9341: LD_INT 3
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PUSH
9348: LD_INT 30
9350: PUSH
9351: LD_INT 5
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PPUSH
9362: CALL_OW 69
9366: PUSH
9367: FOR_IN
9368: IFFALSE 9458
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9370: LD_ADDR_VAR 0 3
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_INT 2
9382: PUSH
9383: LD_INT 3
9385: PUSH
9386: LD_INT 4
9388: PUSH
9389: LD_INT 5
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: PUSH
9398: LD_OWVAR 67
9402: ARRAY
9403: PUSH
9404: FOR_TO
9405: IFFALSE 9454
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9407: LD_INT 0
9409: PPUSH
9410: LD_INT 5
9412: PUSH
9413: LD_INT 6
9415: PUSH
9416: LD_INT 7
9418: PUSH
9419: LD_INT 8
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: PUSH
9428: LD_OWVAR 67
9432: ARRAY
9433: PPUSH
9434: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9438: CALL_OW 44
9442: PPUSH
9443: LD_VAR 0 2
9447: PPUSH
9448: CALL_OW 52
// end ;
9452: GO 9404
9454: POP
9455: POP
// end ;
9456: GO 9367
9458: POP
9459: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9460: LD_ADDR_VAR 0 2
9464: PUSH
9465: DOUBLE
9466: LD_INT 1
9468: DEC
9469: ST_TO_ADDR
9470: LD_INT 3
9472: PUSH
9473: LD_INT 4
9475: PUSH
9476: LD_INT 5
9478: PUSH
9479: LD_INT 5
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: PUSH
9488: LD_OWVAR 67
9492: ARRAY
9493: PUSH
9494: FOR_TO
9495: IFFALSE 9542
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9497: LD_INT 0
9499: PPUSH
9500: LD_INT 4
9502: PUSH
9503: LD_INT 5
9505: PUSH
9506: LD_INT 5
9508: PUSH
9509: LD_INT 6
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: LD_OWVAR 67
9522: ARRAY
9523: PPUSH
9524: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9528: CALL_OW 44
9532: PPUSH
9533: LD_INT 28
9535: PPUSH
9536: CALL_OW 52
// end ;
9540: GO 9494
9542: POP
9543: POP
// for i := 1 to 2 do
9544: LD_ADDR_VAR 0 2
9548: PUSH
9549: DOUBLE
9550: LD_INT 1
9552: DEC
9553: ST_TO_ADDR
9554: LD_INT 2
9556: PUSH
9557: FOR_TO
9558: IFFALSE 9592
// begin PrepareScientist ( false , 6 ) ;
9560: LD_INT 0
9562: PPUSH
9563: LD_INT 6
9565: PPUSH
9566: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9570: CALL_OW 44
9574: PPUSH
9575: LD_INT 81
9577: PPUSH
9578: LD_INT 93
9580: PPUSH
9581: CALL_OW 428
9585: PPUSH
9586: CALL_OW 52
// end ;
9590: GO 9557
9592: POP
9593: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9594: LD_INT 22
9596: PPUSH
9597: LD_INT 1
9599: PPUSH
9600: LD_INT 3
9602: PPUSH
9603: LD_INT 51
9605: PPUSH
9606: LD_INT 100
9608: PPUSH
9609: CALL 44486 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9613: CALL_OW 45
9617: PPUSH
9618: LD_INT 91
9620: PPUSH
9621: LD_INT 94
9623: PPUSH
9624: LD_INT 3
9626: PPUSH
9627: LD_INT 0
9629: PPUSH
9630: CALL_OW 50
// for i := 1 to 2 do
9634: LD_ADDR_VAR 0 2
9638: PUSH
9639: DOUBLE
9640: LD_INT 1
9642: DEC
9643: ST_TO_ADDR
9644: LD_INT 2
9646: PUSH
9647: FOR_TO
9648: IFFALSE 9692
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9650: LD_INT 22
9652: PPUSH
9653: LD_INT 1
9655: PPUSH
9656: LD_INT 3
9658: PPUSH
9659: LD_INT 52
9661: PPUSH
9662: LD_INT 100
9664: PPUSH
9665: CALL 44486 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9669: CALL_OW 45
9673: PPUSH
9674: LD_INT 91
9676: PPUSH
9677: LD_INT 94
9679: PPUSH
9680: LD_INT 4
9682: PPUSH
9683: LD_INT 0
9685: PPUSH
9686: CALL_OW 50
// end ;
9690: GO 9647
9692: POP
9693: POP
// end ;
9694: LD_VAR 0 1
9698: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9699: LD_INT 0
9701: PPUSH
9702: PPUSH
9703: PPUSH
9704: PPUSH
9705: PPUSH
// uc_side := 3 ;
9706: LD_ADDR_OWVAR 20
9710: PUSH
9711: LD_INT 3
9713: ST_TO_ADDR
// uc_nation := 3 ;
9714: LD_ADDR_OWVAR 21
9718: PUSH
9719: LD_INT 3
9721: ST_TO_ADDR
// for i := 1 to 4 do
9722: LD_ADDR_VAR 0 2
9726: PUSH
9727: DOUBLE
9728: LD_INT 1
9730: DEC
9731: ST_TO_ADDR
9732: LD_INT 4
9734: PUSH
9735: FOR_TO
9736: IFFALSE 9863
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9738: LD_INT 22
9740: PPUSH
9741: LD_INT 1
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: LD_INT 42
9749: PUSH
9750: LD_INT 43
9752: PUSH
9753: LD_INT 44
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 1
9763: PPUSH
9764: LD_INT 3
9766: PPUSH
9767: CALL_OW 12
9771: ARRAY
9772: PPUSH
9773: LD_INT 40
9775: PPUSH
9776: CALL 44486 0 5
// veh := CreateVehicle ;
9780: LD_ADDR_VAR 0 4
9784: PUSH
9785: CALL_OW 45
9789: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9790: LD_VAR 0 4
9794: PPUSH
9795: LD_INT 5
9797: PPUSH
9798: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9802: LD_VAR 0 4
9806: PPUSH
9807: LD_INT 7
9809: PPUSH
9810: LD_INT 0
9812: PPUSH
9813: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9817: LD_INT 0
9819: PPUSH
9820: LD_INT 5
9822: PPUSH
9823: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9827: CALL_OW 44
9831: PPUSH
9832: LD_VAR 0 4
9836: PPUSH
9837: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9841: LD_ADDR_VAR 0 5
9845: PUSH
9846: LD_VAR 0 5
9850: PPUSH
9851: LD_VAR 0 4
9855: PPUSH
9856: CALL 76939 0 2
9860: ST_TO_ADDR
// end ;
9861: GO 9735
9863: POP
9864: POP
// for i := 1 to 3 do
9865: LD_ADDR_VAR 0 2
9869: PUSH
9870: DOUBLE
9871: LD_INT 1
9873: DEC
9874: ST_TO_ADDR
9875: LD_INT 3
9877: PUSH
9878: FOR_TO
9879: IFFALSE 10006
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9881: LD_INT 22
9883: PPUSH
9884: LD_INT 1
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: LD_INT 42
9892: PUSH
9893: LD_INT 43
9895: PUSH
9896: LD_INT 44
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: PUSH
9904: LD_INT 1
9906: PPUSH
9907: LD_INT 3
9909: PPUSH
9910: CALL_OW 12
9914: ARRAY
9915: PPUSH
9916: LD_INT 40
9918: PPUSH
9919: CALL 44486 0 5
// veh := CreateVehicle ;
9923: LD_ADDR_VAR 0 4
9927: PUSH
9928: CALL_OW 45
9932: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9933: LD_VAR 0 4
9937: PPUSH
9938: LD_INT 5
9940: PPUSH
9941: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
9945: LD_VAR 0 4
9949: PPUSH
9950: LD_INT 8
9952: PPUSH
9953: LD_INT 0
9955: PPUSH
9956: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9960: LD_INT 0
9962: PPUSH
9963: LD_INT 5
9965: PPUSH
9966: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9970: CALL_OW 44
9974: PPUSH
9975: LD_VAR 0 4
9979: PPUSH
9980: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9984: LD_ADDR_VAR 0 5
9988: PUSH
9989: LD_VAR 0 5
9993: PPUSH
9994: LD_VAR 0 4
9998: PPUSH
9999: CALL 76939 0 2
10003: ST_TO_ADDR
// end ;
10004: GO 9878
10006: POP
10007: POP
// for i := 1 to 2 do
10008: LD_ADDR_VAR 0 2
10012: PUSH
10013: DOUBLE
10014: LD_INT 1
10016: DEC
10017: ST_TO_ADDR
10018: LD_INT 2
10020: PUSH
10021: FOR_TO
10022: IFFALSE 10081
// begin PrepareSoldier ( false , 5 ) ;
10024: LD_INT 0
10026: PPUSH
10027: LD_INT 5
10029: PPUSH
10030: CALL_OW 381
// un := CreateHuman ;
10034: LD_ADDR_VAR 0 3
10038: PUSH
10039: CALL_OW 44
10043: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10044: LD_VAR 0 3
10048: PPUSH
10049: LD_INT 8
10051: PPUSH
10052: LD_INT 0
10054: PPUSH
10055: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10059: LD_ADDR_VAR 0 5
10063: PUSH
10064: LD_VAR 0 5
10068: PPUSH
10069: LD_VAR 0 3
10073: PPUSH
10074: CALL 76939 0 2
10078: ST_TO_ADDR
// end ;
10079: GO 10021
10081: POP
10082: POP
// for i in tmp do
10083: LD_ADDR_VAR 0 2
10087: PUSH
10088: LD_VAR 0 5
10092: PUSH
10093: FOR_IN
10094: IFFALSE 10113
// ComAgressiveMove ( i , 51 , 16 ) ;
10096: LD_VAR 0 2
10100: PPUSH
10101: LD_INT 51
10103: PPUSH
10104: LD_INT 16
10106: PPUSH
10107: CALL_OW 114
10111: GO 10093
10113: POP
10114: POP
// end ;
10115: LD_VAR 0 1
10119: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10120: LD_EXP 34
10124: IFFALSE 10699
10126: GO 10128
10128: DISABLE
10129: LD_INT 0
10131: PPUSH
10132: PPUSH
10133: PPUSH
// begin enable ;
10134: ENABLE
// if not ruMobile then
10135: LD_EXP 34
10139: NOT
10140: IFFALSE 10144
// exit ;
10142: GO 10699
// for i in ruMobile do
10144: LD_ADDR_VAR 0 1
10148: PUSH
10149: LD_EXP 34
10153: PUSH
10154: FOR_IN
10155: IFFALSE 10697
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10157: LD_VAR 0 1
10161: PPUSH
10162: CALL_OW 302
10166: NOT
10167: PUSH
10168: LD_VAR 0 1
10172: PPUSH
10173: CALL_OW 255
10177: PUSH
10178: LD_INT 3
10180: NONEQUAL
10181: OR
10182: IFFALSE 10202
// begin ruMobile := ruMobile diff i ;
10184: LD_ADDR_EXP 34
10188: PUSH
10189: LD_EXP 34
10193: PUSH
10194: LD_VAR 0 1
10198: DIFF
10199: ST_TO_ADDR
// continue ;
10200: GO 10154
// end ; if GetTag ( i ) = 300 then
10202: LD_VAR 0 1
10206: PPUSH
10207: CALL_OW 110
10211: PUSH
10212: LD_INT 300
10214: EQUAL
10215: IFFALSE 10330
// begin if GetFuel ( i ) < 50 then
10217: LD_VAR 0 1
10221: PPUSH
10222: CALL_OW 261
10226: PUSH
10227: LD_INT 50
10229: LESS
10230: IFFALSE 10289
// begin ComMoveXY ( i , 93 , 100 ) ;
10232: LD_VAR 0 1
10236: PPUSH
10237: LD_INT 93
10239: PPUSH
10240: LD_INT 100
10242: PPUSH
10243: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10247: LD_INT 35
10249: PPUSH
10250: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10254: LD_VAR 0 1
10258: PPUSH
10259: LD_INT 93
10261: PPUSH
10262: LD_INT 100
10264: PPUSH
10265: CALL_OW 297
10269: PUSH
10270: LD_INT 4
10272: LESS
10273: IFFALSE 10247
// SetFuel ( i , 100 ) ;
10275: LD_VAR 0 1
10279: PPUSH
10280: LD_INT 100
10282: PPUSH
10283: CALL_OW 240
// end else
10287: GO 10330
// if not IsInArea ( i , ruParkingArea ) then
10289: LD_VAR 0 1
10293: PPUSH
10294: LD_INT 10
10296: PPUSH
10297: CALL_OW 308
10301: NOT
10302: IFFALSE 10318
// ComMoveToArea ( i , ruParkingArea ) else
10304: LD_VAR 0 1
10308: PPUSH
10309: LD_INT 10
10311: PPUSH
10312: CALL_OW 113
10316: GO 10330
// SetTag ( i , 301 ) ;
10318: LD_VAR 0 1
10322: PPUSH
10323: LD_INT 301
10325: PPUSH
10326: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10330: LD_VAR 0 1
10334: PPUSH
10335: CALL_OW 110
10339: PUSH
10340: LD_INT 301
10342: EQUAL
10343: IFFALSE 10473
// begin if GetLives ( i ) < 1000 then
10345: LD_VAR 0 1
10349: PPUSH
10350: CALL_OW 256
10354: PUSH
10355: LD_INT 1000
10357: LESS
10358: IFFALSE 10450
// begin if not IsDrivenBy ( i ) then
10360: LD_VAR 0 1
10364: PPUSH
10365: CALL_OW 311
10369: NOT
10370: IFFALSE 10374
// continue ;
10372: GO 10154
// mech := IsDrivenBy ( i ) ;
10374: LD_ADDR_VAR 0 2
10378: PUSH
10379: LD_VAR 0 1
10383: PPUSH
10384: CALL_OW 311
10388: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10389: LD_VAR 0 2
10393: PPUSH
10394: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10398: LD_VAR 0 2
10402: PPUSH
10403: LD_VAR 0 1
10407: PPUSH
10408: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10412: LD_INT 35
10414: PPUSH
10415: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10419: LD_VAR 0 1
10423: PPUSH
10424: CALL_OW 256
10428: PUSH
10429: LD_INT 1000
10431: EQUAL
10432: IFFALSE 10412
// ComEnterUnit ( mech , i ) ;
10434: LD_VAR 0 2
10438: PPUSH
10439: LD_VAR 0 1
10443: PPUSH
10444: CALL_OW 120
// end else
10448: GO 10473
// if IsDrivenBy ( i ) then
10450: LD_VAR 0 1
10454: PPUSH
10455: CALL_OW 311
10459: IFFALSE 10473
// SetTag ( i , 0 ) ;
10461: LD_VAR 0 1
10465: PPUSH
10466: LD_INT 0
10468: PPUSH
10469: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10473: LD_VAR 0 1
10477: PPUSH
10478: CALL_OW 110
10482: PUSH
10483: LD_INT 300
10485: LESS
10486: IFFALSE 10695
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10488: LD_ADDR_VAR 0 3
10492: PUSH
10493: LD_INT 11
10495: PPUSH
10496: LD_INT 81
10498: PUSH
10499: LD_INT 3
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 70
10510: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10511: LD_VAR 0 1
10515: PPUSH
10516: CALL_OW 256
10520: PUSH
10521: LD_INT 650
10523: LESS
10524: IFFALSE 10549
// begin ComStop ( i ) ;
10526: LD_VAR 0 1
10530: PPUSH
10531: CALL_OW 141
// SetTag ( i , 300 ) ;
10535: LD_VAR 0 1
10539: PPUSH
10540: LD_INT 300
10542: PPUSH
10543: CALL_OW 109
// continue ;
10547: GO 10154
// end ; if enemy then
10549: LD_VAR 0 3
10553: IFFALSE 10593
// begin if not HasTask ( i ) then
10555: LD_VAR 0 1
10559: PPUSH
10560: CALL_OW 314
10564: NOT
10565: IFFALSE 10591
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10567: LD_VAR 0 1
10571: PPUSH
10572: LD_VAR 0 3
10576: PPUSH
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL_OW 74
10586: PPUSH
10587: CALL_OW 115
// end else
10591: GO 10695
// if ruMobile > 2 then
10593: LD_EXP 34
10597: PUSH
10598: LD_INT 2
10600: GREATER
10601: IFFALSE 10695
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10603: LD_ADDR_VAR 0 3
10607: PUSH
10608: LD_INT 81
10610: PUSH
10611: LD_INT 3
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PPUSH
10618: CALL_OW 69
10622: ST_TO_ADDR
// if enemy then
10623: LD_VAR 0 3
10627: IFFALSE 10695
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10629: LD_VAR 0 1
10633: PPUSH
10634: LD_INT 116
10636: PUSH
10637: LD_INT 95
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 84
10646: PUSH
10647: LD_INT 68
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 58
10656: PUSH
10657: LD_INT 53
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 44
10666: PUSH
10667: LD_INT 35
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 45
10676: PUSH
10677: LD_INT 23
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: PPUSH
10691: CALL 79543 0 2
// end ; end ; end ;
10695: GO 10154
10697: POP
10698: POP
// end ;
10699: PPOPN 3
10701: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10702: LD_INT 3
10704: PUSH
10705: LD_INT 22
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 32
10721: PUSH
10722: LD_INT 1
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PPUSH
10733: CALL_OW 69
10737: IFFALSE 10821
10739: GO 10741
10741: DISABLE
10742: LD_INT 0
10744: PPUSH
// begin enable ;
10745: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10746: LD_ADDR_VAR 0 1
10750: PUSH
10751: LD_INT 3
10753: PUSH
10754: LD_INT 22
10756: PUSH
10757: LD_INT 1
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 32
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PPUSH
10782: CALL_OW 69
10786: PUSH
10787: FOR_IN
10788: IFFALSE 10819
// if GetFuel ( i ) < 3 then
10790: LD_VAR 0 1
10794: PPUSH
10795: CALL_OW 261
10799: PUSH
10800: LD_INT 3
10802: LESS
10803: IFFALSE 10817
// SetFuel ( i , 3 ) ;
10805: LD_VAR 0 1
10809: PPUSH
10810: LD_INT 3
10812: PPUSH
10813: CALL_OW 240
10817: GO 10787
10819: POP
10820: POP
// end ;
10821: PPOPN 1
10823: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10824: LD_INT 29
10826: PPUSH
10827: CALL_OW 302
10831: PUSH
10832: LD_INT 29
10834: PPUSH
10835: CALL_OW 461
10839: PUSH
10840: LD_INT 2
10842: EQUAL
10843: AND
10844: IFFALSE 11077
10846: GO 10848
10848: DISABLE
10849: LD_INT 0
10851: PPUSH
10852: PPUSH
// begin enable ;
10853: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10854: LD_ADDR_VAR 0 1
10858: PUSH
10859: LD_INT 21
10861: PUSH
10862: LD_INT 22
10864: PUSH
10865: LD_INT 23
10867: PUSH
10868: LD_INT 24
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: PUSH
10877: LD_INT 1
10879: PPUSH
10880: LD_INT 4
10882: PPUSH
10883: CALL_OW 12
10887: ARRAY
10888: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10889: LD_ADDR_VAR 0 2
10893: PUSH
10894: LD_INT 42
10896: PUSH
10897: LD_INT 44
10899: PUSH
10900: LD_INT 43
10902: PUSH
10903: LD_INT 46
10905: PUSH
10906: LD_INT 45
10908: PUSH
10909: LD_INT 46
10911: PUSH
10912: LD_INT 45
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: PUSH
10924: LD_OWVAR 67
10928: PUSH
10929: LD_INT 0
10931: PPUSH
10932: LD_INT 3
10934: PPUSH
10935: CALL_OW 12
10939: PLUS
10940: ARRAY
10941: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
10942: LD_VAR 0 1
10946: PUSH
10947: LD_INT 21
10949: PUSH
10950: LD_INT 22
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: IN
10957: PUSH
10958: LD_VAR 0 2
10962: PUSH
10963: LD_INT 46
10965: EQUAL
10966: AND
10967: IFFALSE 10996
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10969: LD_ADDR_VAR 0 2
10973: PUSH
10974: LD_INT 44
10976: PUSH
10977: LD_INT 45
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 1
10986: PPUSH
10987: LD_INT 2
10989: PPUSH
10990: CALL_OW 12
10994: ARRAY
10995: ST_TO_ADDR
// if tick < [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
10996: LD_OWVAR 1
11000: PUSH
11001: LD_INT 25200
11003: PUSH
11004: LD_INT 23100
11006: PUSH
11007: LD_INT 21000
11009: PUSH
11010: LD_INT 18900
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: PUSH
11019: LD_OWVAR 67
11023: ARRAY
11024: LESS
11025: IFFALSE 11054
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11027: LD_ADDR_VAR 0 2
11031: PUSH
11032: LD_INT 44
11034: PUSH
11035: LD_INT 43
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 1
11044: PPUSH
11045: LD_INT 2
11047: PPUSH
11048: CALL_OW 12
11052: ARRAY
11053: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11054: LD_INT 29
11056: PPUSH
11057: LD_VAR 0 1
11061: PPUSH
11062: LD_INT 1
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: LD_VAR 0 2
11072: PPUSH
11073: CALL_OW 185
// end ;
11077: PPOPN 2
11079: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
11080: LD_INT 28
11082: PPUSH
11083: CALL_OW 302
11087: IFFALSE 11929
11089: GO 11091
11091: DISABLE
11092: LD_INT 0
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
// begin enable ;
11102: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11103: LD_ADDR_VAR 0 3
11107: PUSH
11108: LD_INT 12
11110: PPUSH
11111: LD_INT 3
11113: PUSH
11114: LD_INT 24
11116: PUSH
11117: LD_INT 1000
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 21
11130: PUSH
11131: LD_INT 3
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PPUSH
11142: CALL_OW 70
11146: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11147: LD_ADDR_VAR 0 4
11151: PUSH
11152: LD_INT 22
11154: PUSH
11155: LD_INT 3
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: LD_INT 25
11164: PUSH
11165: LD_INT 2
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PPUSH
11176: CALL_OW 69
11180: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11181: LD_ADDR_VAR 0 5
11185: PUSH
11186: LD_INT 22
11188: PUSH
11189: LD_INT 3
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 34
11198: PUSH
11199: LD_INT 52
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PPUSH
11210: CALL_OW 69
11214: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11215: LD_ADDR_VAR 0 7
11219: PUSH
11220: LD_INT 22
11222: PUSH
11223: LD_INT 3
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 25
11232: PUSH
11233: LD_INT 4
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PPUSH
11244: CALL_OW 69
11248: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11249: LD_ADDR_VAR 0 8
11253: PUSH
11254: LD_INT 81
11256: PPUSH
11257: LD_INT 93
11259: PPUSH
11260: CALL_OW 428
11264: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
11265: LD_VAR 0 7
11269: PUSH
11270: LD_VAR 0 4
11274: PPUSH
11275: LD_INT 120
11277: PUSH
11278: LD_INT 2
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PPUSH
11285: CALL_OW 72
11289: AND
11290: IFFALSE 11303
// ComExitAll ( sci ) else
11292: LD_VAR 0 7
11296: PPUSH
11297: CALL 77420 0 1
11301: GO 11376
// if sci then
11303: LD_VAR 0 7
11307: IFFALSE 11376
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
11309: LD_VAR 0 7
11313: PPUSH
11314: LD_INT 3
11316: PUSH
11317: LD_INT 54
11319: PUSH
11320: EMPTY
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PPUSH
11327: CALL_OW 72
11331: PUSH
11332: LD_VAR 0 8
11336: PPUSH
11337: CALL_OW 302
11341: AND
11342: IFFALSE 11376
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
11344: LD_VAR 0 7
11348: PPUSH
11349: LD_INT 3
11351: PUSH
11352: LD_INT 54
11354: PUSH
11355: EMPTY
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PPUSH
11362: CALL_OW 72
11366: PPUSH
11367: LD_VAR 0 8
11371: PPUSH
11372: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
11376: LD_VAR 0 5
11380: PPUSH
11381: LD_INT 50
11383: PUSH
11384: EMPTY
11385: LIST
11386: PPUSH
11387: CALL_OW 72
11391: PUSH
11392: LD_VAR 0 3
11396: AND
11397: IFFALSE 11428
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
11399: LD_VAR 0 5
11403: PPUSH
11404: LD_INT 50
11406: PUSH
11407: EMPTY
11408: LIST
11409: PPUSH
11410: CALL_OW 72
11414: PPUSH
11415: LD_VAR 0 3
11419: PUSH
11420: LD_INT 1
11422: ARRAY
11423: PPUSH
11424: CALL_OW 130
// if eng then
11428: LD_VAR 0 4
11432: IFFALSE 11929
// begin for i in eng do
11434: LD_ADDR_VAR 0 1
11438: PUSH
11439: LD_VAR 0 4
11443: PUSH
11444: FOR_IN
11445: IFFALSE 11927
// begin tag := GetTag ( i ) ;
11447: LD_ADDR_VAR 0 6
11451: PUSH
11452: LD_VAR 0 1
11456: PPUSH
11457: CALL_OW 110
11461: ST_TO_ADDR
// case tag of 0 :
11462: LD_VAR 0 6
11466: PUSH
11467: LD_INT 0
11469: DOUBLE
11470: EQUAL
11471: IFTRUE 11475
11473: GO 11686
11475: POP
// begin if b then
11476: LD_VAR 0 3
11480: IFFALSE 11496
// begin SetTag ( i , 1 ) ;
11482: LD_VAR 0 1
11486: PPUSH
11487: LD_INT 1
11489: PPUSH
11490: CALL_OW 109
// continue ;
11494: GO 11444
// end ; if not ruBuildList then
11496: LD_EXP 35
11500: NOT
11501: IFFALSE 11517
// ComEnterUnit ( i , ruDep ) else
11503: LD_VAR 0 1
11507: PPUSH
11508: LD_INT 28
11510: PPUSH
11511: CALL_OW 120
11515: GO 11684
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11517: LD_INT 11
11519: PPUSH
11520: LD_INT 81
11522: PUSH
11523: LD_INT 3
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 70
11534: PUSH
11535: LD_INT 0
11537: EQUAL
11538: PUSH
11539: LD_INT 28
11541: PPUSH
11542: LD_EXP 35
11546: PUSH
11547: LD_INT 1
11549: ARRAY
11550: PUSH
11551: LD_INT 1
11553: ARRAY
11554: PPUSH
11555: LD_EXP 35
11559: PUSH
11560: LD_INT 1
11562: ARRAY
11563: PUSH
11564: LD_INT 2
11566: ARRAY
11567: PPUSH
11568: LD_EXP 35
11572: PUSH
11573: LD_INT 1
11575: ARRAY
11576: PUSH
11577: LD_INT 3
11579: ARRAY
11580: PPUSH
11581: LD_EXP 35
11585: PUSH
11586: LD_INT 1
11588: ARRAY
11589: PUSH
11590: LD_INT 4
11592: ARRAY
11593: PPUSH
11594: CALL 52705 0 5
11598: AND
11599: IFFALSE 11684
// begin if IsInUnit ( i ) then
11601: LD_VAR 0 1
11605: PPUSH
11606: CALL_OW 310
11610: IFFALSE 11623
// ComExitBuilding ( i ) else
11612: LD_VAR 0 1
11616: PPUSH
11617: CALL_OW 122
11621: GO 11684
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11623: LD_VAR 0 1
11627: PPUSH
11628: LD_EXP 35
11632: PUSH
11633: LD_INT 1
11635: ARRAY
11636: PUSH
11637: LD_INT 1
11639: ARRAY
11640: PPUSH
11641: LD_EXP 35
11645: PUSH
11646: LD_INT 1
11648: ARRAY
11649: PUSH
11650: LD_INT 2
11652: ARRAY
11653: PPUSH
11654: LD_EXP 35
11658: PUSH
11659: LD_INT 1
11661: ARRAY
11662: PUSH
11663: LD_INT 3
11665: ARRAY
11666: PPUSH
11667: LD_EXP 35
11671: PUSH
11672: LD_INT 1
11674: ARRAY
11675: PUSH
11676: LD_INT 4
11678: ARRAY
11679: PPUSH
11680: CALL_OW 145
// end ; end ; 1 :
11684: GO 11883
11686: LD_INT 1
11688: DOUBLE
11689: EQUAL
11690: IFTRUE 11694
11692: GO 11797
11694: POP
// begin if not b then
11695: LD_VAR 0 3
11699: NOT
11700: IFFALSE 11716
// begin SetTag ( i , 0 ) ;
11702: LD_VAR 0 1
11706: PPUSH
11707: LD_INT 0
11709: PPUSH
11710: CALL_OW 109
// continue ;
11714: GO 11444
// end ; if IsInUnit ( i ) then
11716: LD_VAR 0 1
11720: PPUSH
11721: CALL_OW 310
11725: IFFALSE 11736
// ComExitBuilding ( i ) ;
11727: LD_VAR 0 1
11731: PPUSH
11732: CALL_OW 122
// if GetLives ( i ) < 650 then
11736: LD_VAR 0 1
11740: PPUSH
11741: CALL_OW 256
11745: PUSH
11746: LD_INT 650
11748: LESS
11749: IFFALSE 11765
// begin SetTag ( i , 2 ) ;
11751: LD_VAR 0 1
11755: PPUSH
11756: LD_INT 2
11758: PPUSH
11759: CALL_OW 109
// continue ;
11763: GO 11444
// end ; if b then
11765: LD_VAR 0 3
11769: IFFALSE 11795
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
11771: LD_VAR 0 1
11775: PPUSH
11776: LD_VAR 0 3
11780: PPUSH
11781: LD_VAR 0 1
11785: PPUSH
11786: CALL_OW 74
11790: PPUSH
11791: CALL_OW 130
// end ; 2 :
11795: GO 11883
11797: LD_INT 2
11799: DOUBLE
11800: EQUAL
11801: IFTRUE 11805
11803: GO 11882
11805: POP
// begin if GetLives ( i ) = 1000 then
11806: LD_VAR 0 1
11810: PPUSH
11811: CALL_OW 256
11815: PUSH
11816: LD_INT 1000
11818: EQUAL
11819: IFFALSE 11835
// begin SetTag ( i , 1 ) ;
11821: LD_VAR 0 1
11825: PPUSH
11826: LD_INT 1
11828: PPUSH
11829: CALL_OW 109
// continue ;
11833: GO 11444
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
11835: LD_VAR 0 1
11839: PPUSH
11840: LD_INT 84
11842: PPUSH
11843: LD_INT 93
11845: PPUSH
11846: CALL_OW 297
11850: PUSH
11851: LD_INT 6
11853: GREATER
11854: IFFALSE 11880
// begin ComMoveXY ( i , 84 , 93 ) ;
11856: LD_VAR 0 1
11860: PPUSH
11861: LD_INT 84
11863: PPUSH
11864: LD_INT 93
11866: PPUSH
11867: CALL_OW 111
// AddComHold ( i ) ;
11871: LD_VAR 0 1
11875: PPUSH
11876: CALL_OW 200
// end ; end ; end ;
11880: GO 11883
11882: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
11883: LD_VAR 0 1
11887: PPUSH
11888: LD_INT 12
11890: PPUSH
11891: CALL_OW 308
11895: NOT
11896: PUSH
11897: LD_VAR 0 1
11901: PPUSH
11902: CALL_OW 310
11906: NOT
11907: AND
11908: IFFALSE 11925
// ComMoveXY ( i , 91 , 95 ) ;
11910: LD_VAR 0 1
11914: PPUSH
11915: LD_INT 91
11917: PPUSH
11918: LD_INT 95
11920: PPUSH
11921: CALL_OW 111
// end ;
11925: GO 11444
11927: POP
11928: POP
// end ; end ;
11929: PPOPN 8
11931: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
11932: LD_INT 0
11934: PPUSH
11935: PPUSH
11936: PPUSH
11937: PPUSH
11938: PPUSH
11939: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
11940: LD_ADDR_VAR 0 3
11944: PUSH
11945: DOUBLE
11946: LD_INT 1
11948: DEC
11949: ST_TO_ADDR
11950: LD_INT 3
11952: PUSH
11953: LD_INT 4
11955: PUSH
11956: LD_INT 5
11958: PUSH
11959: LD_INT 6
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: PUSH
11968: LD_OWVAR 67
11972: ARRAY
11973: PUSH
11974: LD_VAR 0 1
11978: PLUS
11979: PUSH
11980: FOR_TO
11981: IFFALSE 12298
// begin uc_side := 6 ;
11983: LD_ADDR_OWVAR 20
11987: PUSH
11988: LD_INT 6
11990: ST_TO_ADDR
// uc_nation := 3 ;
11991: LD_ADDR_OWVAR 21
11995: PUSH
11996: LD_INT 3
11998: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11999: LD_ADDR_VAR 0 6
12003: PUSH
12004: LD_INT 21
12006: PUSH
12007: LD_INT 22
12009: PUSH
12010: LD_INT 23
12012: PUSH
12013: LD_INT 24
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 1
12024: PPUSH
12025: LD_INT 4
12027: PPUSH
12028: CALL_OW 12
12032: ARRAY
12033: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12034: LD_ADDR_VAR 0 7
12038: PUSH
12039: LD_INT 42
12041: PUSH
12042: LD_INT 44
12044: PUSH
12045: LD_INT 43
12047: PUSH
12048: LD_INT 46
12050: PUSH
12051: LD_INT 45
12053: PUSH
12054: LD_INT 46
12056: PUSH
12057: LD_INT 45
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: PUSH
12069: LD_OWVAR 67
12073: PUSH
12074: LD_INT 0
12076: PPUSH
12077: LD_INT 3
12079: PPUSH
12080: CALL_OW 12
12084: PLUS
12085: ARRAY
12086: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12087: LD_VAR 0 6
12091: PUSH
12092: LD_INT 21
12094: PUSH
12095: LD_INT 22
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: IN
12102: PUSH
12103: LD_VAR 0 7
12107: PUSH
12108: LD_INT 46
12110: EQUAL
12111: AND
12112: IFFALSE 12141
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12114: LD_ADDR_VAR 0 7
12118: PUSH
12119: LD_INT 44
12121: PUSH
12122: LD_INT 45
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 1
12131: PPUSH
12132: LD_INT 2
12134: PPUSH
12135: CALL_OW 12
12139: ARRAY
12140: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
12141: LD_OWVAR 1
12145: PUSH
12146: LD_INT 31500
12148: PUSH
12149: LD_INT 27300
12151: PUSH
12152: LD_INT 23100
12154: PUSH
12155: LD_INT 18900
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: PUSH
12164: LD_OWVAR 67
12168: ARRAY
12169: LESS
12170: IFFALSE 12203
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
12172: LD_ADDR_VAR 0 7
12176: PUSH
12177: LD_INT 44
12179: PUSH
12180: LD_INT 43
12182: PUSH
12183: LD_INT 42
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 1
12193: PPUSH
12194: LD_INT 3
12196: PPUSH
12197: CALL_OW 12
12201: ARRAY
12202: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
12203: LD_VAR 0 6
12207: PPUSH
12208: LD_INT 1
12210: PPUSH
12211: LD_INT 3
12213: PPUSH
12214: LD_VAR 0 7
12218: PPUSH
12219: LD_INT 90
12221: PPUSH
12222: CALL 44486 0 5
// un := CreateVehicle ;
12226: LD_ADDR_VAR 0 4
12230: PUSH
12231: CALL_OW 45
12235: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
12236: LD_VAR 0 4
12240: PPUSH
12241: LD_INT 140
12243: PPUSH
12244: LD_INT 146
12246: PPUSH
12247: LD_INT 0
12249: PPUSH
12250: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
12254: LD_VAR 0 4
12258: PPUSH
12259: LD_INT 131
12261: PPUSH
12262: LD_INT 128
12264: PPUSH
12265: CALL_OW 111
// wait ( 0 0$3 ) ;
12269: LD_INT 105
12271: PPUSH
12272: CALL_OW 67
// tmp := Join ( tmp , un ) ;
12276: LD_ADDR_VAR 0 5
12280: PUSH
12281: LD_VAR 0 5
12285: PPUSH
12286: LD_VAR 0 4
12290: PPUSH
12291: CALL 76939 0 2
12295: ST_TO_ADDR
// end ;
12296: GO 11980
12298: POP
12299: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
12300: LD_ADDR_EXP 36
12304: PUSH
12305: LD_EXP 36
12309: PPUSH
12310: LD_VAR 0 5
12314: PPUSH
12315: CALL 76976 0 2
12319: ST_TO_ADDR
// end ;
12320: LD_VAR 0 2
12324: RET
// every 0 0$3 trigger russianAttackers do
12325: LD_EXP 36
12329: IFFALSE 12412
12331: GO 12333
12333: DISABLE
// begin enable ;
12334: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
12335: LD_EXP 36
12339: PPUSH
12340: LD_INT 126
12342: PUSH
12343: LD_INT 108
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 107
12352: PUSH
12353: LD_INT 85
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 82
12362: PUSH
12363: LD_INT 62
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 73
12372: PUSH
12373: LD_INT 46
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 62
12382: PUSH
12383: LD_INT 31
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 52
12392: PUSH
12393: LD_INT 17
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: PPUSH
12408: CALL 79543 0 2
// end ; end_of_file
12412: END
// on SailEvent ( event ) do begin if event = 1 then
12413: LD_VAR 0 1
12417: PUSH
12418: LD_INT 1
12420: EQUAL
12421: IFFALSE 12436
// PrepareRussianAttack ( Difficulty + 3 ) ;
12423: LD_OWVAR 67
12427: PUSH
12428: LD_INT 3
12430: PLUS
12431: PPUSH
12432: CALL 11932 0 1
// end ;
12436: PPOPN 1
12438: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
12439: LD_INT 0
12441: PPUSH
12442: PPUSH
12443: PPUSH
12444: PPUSH
12445: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: CALL 35182 0 1
// if un = JMM then
12455: LD_VAR 0 1
12459: PUSH
12460: LD_EXP 14
12464: EQUAL
12465: IFFALSE 12474
// YouLost ( JMM ) ;
12467: LD_STRING JMM
12469: PPUSH
12470: CALL_OW 104
// if un = Sikorski then
12474: LD_VAR 0 1
12478: PUSH
12479: LD_EXP 28
12483: EQUAL
12484: IFFALSE 12510
// if sikorskiStatus = 0 then
12486: LD_EXP 9
12490: PUSH
12491: LD_INT 0
12493: EQUAL
12494: IFFALSE 12502
// SikorskiKilledInAction else
12496: CALL 17866 0 0
12500: GO 12510
// sikorskiIsKilled := true ;
12502: LD_ADDR_EXP 10
12506: PUSH
12507: LD_INT 1
12509: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12510: LD_VAR 0 1
12514: PPUSH
12515: CALL_OW 255
12519: PUSH
12520: LD_INT 1
12522: EQUAL
12523: PUSH
12524: LD_VAR 0 1
12528: PPUSH
12529: CALL_OW 248
12533: PUSH
12534: LD_INT 1
12536: EQUAL
12537: AND
12538: PUSH
12539: LD_VAR 0 1
12543: PPUSH
12544: CALL_OW 266
12548: PUSH
12549: LD_INT 0
12551: PUSH
12552: LD_INT 1
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: IN
12559: AND
12560: IFFALSE 12569
// YouLost ( Destroyed ) ;
12562: LD_STRING Destroyed
12564: PPUSH
12565: CALL_OW 104
// if un = ruDep then
12569: LD_VAR 0 1
12573: PUSH
12574: LD_INT 28
12576: EQUAL
12577: IFFALSE 12711
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
12579: LD_ADDR_VAR 0 2
12583: PUSH
12584: LD_INT 22
12586: PUSH
12587: LD_INT 3
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: LD_INT 25
12596: PUSH
12597: LD_INT 1
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PPUSH
12608: CALL_OW 69
12612: PUSH
12613: FOR_IN
12614: IFFALSE 12709
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
12616: LD_ADDR_VAR 0 3
12620: PUSH
12621: LD_INT 11
12623: PPUSH
12624: LD_INT 81
12626: PUSH
12627: LD_INT 3
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PPUSH
12634: CALL_OW 70
12638: PPUSH
12639: LD_VAR 0 2
12643: PPUSH
12644: CALL_OW 74
12648: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
12649: LD_VAR 0 2
12653: PPUSH
12654: CALL_OW 310
12658: PPUSH
12659: CALL_OW 266
12663: PUSH
12664: LD_INT 32
12666: EQUAL
12667: IFFALSE 12707
// begin ComExitBuilding ( i ) ;
12669: LD_VAR 0 2
12673: PPUSH
12674: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
12678: LD_VAR 0 2
12682: PPUSH
12683: LD_VAR 0 3
12687: PPUSH
12688: CALL_OW 250
12692: PPUSH
12693: LD_VAR 0 3
12697: PPUSH
12698: CALL_OW 251
12702: PPUSH
12703: CALL_OW 174
// end ; end ;
12707: GO 12613
12709: POP
12710: POP
// end ; if un in ruMobile then
12711: LD_VAR 0 1
12715: PUSH
12716: LD_EXP 34
12720: IN
12721: IFFALSE 12739
// ruMobile := ruMobile diff un ;
12723: LD_ADDR_EXP 34
12727: PUSH
12728: LD_EXP 34
12732: PUSH
12733: LD_VAR 0 1
12737: DIFF
12738: ST_TO_ADDR
// if GetSide ( un ) = 3 then
12739: LD_VAR 0 1
12743: PPUSH
12744: CALL_OW 255
12748: PUSH
12749: LD_INT 3
12751: EQUAL
12752: IFFALSE 13387
// begin if GetType ( un ) = unit_building then
12754: LD_VAR 0 1
12758: PPUSH
12759: CALL_OW 247
12763: PUSH
12764: LD_INT 3
12766: EQUAL
12767: IFFALSE 12903
// begin btype := GetBType ( un ) ;
12769: LD_ADDR_VAR 0 6
12773: PUSH
12774: LD_VAR 0 1
12778: PPUSH
12779: CALL_OW 266
12783: ST_TO_ADDR
// if btype = b_warehouse then
12784: LD_VAR 0 6
12788: PUSH
12789: LD_INT 1
12791: EQUAL
12792: IFFALSE 12802
// btype := b_depot ;
12794: LD_ADDR_VAR 0 6
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// if btype = b_barracks then
12802: LD_VAR 0 6
12806: PUSH
12807: LD_INT 5
12809: EQUAL
12810: IFFALSE 12820
// btype := b_armoury ;
12812: LD_ADDR_VAR 0 6
12816: PUSH
12817: LD_INT 4
12819: ST_TO_ADDR
// if btype = b_lab_full then
12820: LD_VAR 0 6
12824: PUSH
12825: LD_INT 8
12827: EQUAL
12828: IFFALSE 12838
// btype := b_lab ;
12830: LD_ADDR_VAR 0 6
12834: PUSH
12835: LD_INT 6
12837: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
12838: LD_ADDR_EXP 35
12842: PUSH
12843: LD_EXP 35
12847: PPUSH
12848: LD_EXP 35
12852: PUSH
12853: LD_INT 1
12855: PLUS
12856: PPUSH
12857: LD_VAR 0 6
12861: PUSH
12862: LD_VAR 0 1
12866: PPUSH
12867: CALL_OW 250
12871: PUSH
12872: LD_VAR 0 1
12876: PPUSH
12877: CALL_OW 251
12881: PUSH
12882: LD_VAR 0 1
12886: PPUSH
12887: CALL_OW 254
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: PPUSH
12898: CALL_OW 1
12902: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12903: LD_VAR 0 1
12907: PPUSH
12908: CALL_OW 247
12912: PUSH
12913: LD_INT 2
12915: EQUAL
12916: IFFALSE 13191
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
12918: LD_VAR 0 1
12922: PPUSH
12923: CALL_OW 264
12927: PUSH
12928: LD_INT 52
12930: PUSH
12931: LD_INT 51
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: IN
12938: IFFALSE 12968
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
12940: LD_INT 29
12942: PPUSH
12943: LD_INT 22
12945: PPUSH
12946: LD_INT 1
12948: PPUSH
12949: LD_INT 3
12951: PPUSH
12952: LD_VAR 0 1
12956: PPUSH
12957: CALL_OW 264
12961: PPUSH
12962: CALL_OW 185
// end else
12966: GO 13191
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12968: LD_ADDR_VAR 0 4
12972: PUSH
12973: LD_INT 21
12975: PUSH
12976: LD_INT 22
12978: PUSH
12979: LD_INT 23
12981: PUSH
12982: LD_INT 24
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: PUSH
12991: LD_INT 1
12993: PPUSH
12994: LD_INT 4
12996: PPUSH
12997: CALL_OW 12
13001: ARRAY
13002: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13003: LD_ADDR_VAR 0 5
13007: PUSH
13008: LD_INT 42
13010: PUSH
13011: LD_INT 44
13013: PUSH
13014: LD_INT 43
13016: PUSH
13017: LD_INT 46
13019: PUSH
13020: LD_INT 45
13022: PUSH
13023: LD_INT 46
13025: PUSH
13026: LD_INT 45
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: PUSH
13038: LD_OWVAR 67
13042: PUSH
13043: LD_INT 0
13045: PPUSH
13046: LD_INT 3
13048: PPUSH
13049: CALL_OW 12
13053: PLUS
13054: ARRAY
13055: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13056: LD_VAR 0 4
13060: PUSH
13061: LD_INT 21
13063: PUSH
13064: LD_INT 22
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: IN
13071: PUSH
13072: LD_VAR 0 5
13076: PUSH
13077: LD_INT 46
13079: EQUAL
13080: AND
13081: IFFALSE 13110
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13083: LD_ADDR_VAR 0 5
13087: PUSH
13088: LD_INT 44
13090: PUSH
13091: LD_INT 45
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: LD_INT 1
13100: PPUSH
13101: LD_INT 2
13103: PPUSH
13104: CALL_OW 12
13108: ARRAY
13109: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
13110: LD_OWVAR 1
13114: PUSH
13115: LD_INT 31500
13117: PUSH
13118: LD_INT 27300
13120: PUSH
13121: LD_INT 23100
13123: PUSH
13124: LD_INT 21000
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: PUSH
13133: LD_OWVAR 67
13137: ARRAY
13138: LESS
13139: IFFALSE 13168
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13141: LD_ADDR_VAR 0 5
13145: PUSH
13146: LD_INT 44
13148: PUSH
13149: LD_INT 43
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 1
13158: PPUSH
13159: LD_INT 2
13161: PPUSH
13162: CALL_OW 12
13166: ARRAY
13167: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
13168: LD_INT 29
13170: PPUSH
13171: LD_VAR 0 4
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 1
13181: PPUSH
13182: LD_VAR 0 5
13186: PPUSH
13187: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
13191: LD_VAR 0 1
13195: PPUSH
13196: CALL_OW 257
13200: PUSH
13201: LD_INT 3
13203: EQUAL
13204: IFFALSE 13387
// begin killMechCounter := Inc ( killMechCounter ) ;
13206: LD_ADDR_EXP 12
13210: PUSH
13211: LD_EXP 12
13215: PPUSH
13216: CALL 78300 0 1
13220: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
13221: LD_EXP 33
13225: PUSH
13226: LD_INT 0
13228: EQUAL
13229: PUSH
13230: LD_INT 29
13232: PPUSH
13233: CALL_OW 302
13237: NOT
13238: OR
13239: IFFALSE 13243
// exit ;
13241: GO 13387
// ruMechCounter := Dec ( ruMechCounter ) ;
13243: LD_ADDR_EXP 33
13247: PUSH
13248: LD_EXP 33
13252: PPUSH
13253: CALL 78322 0 1
13257: ST_TO_ADDR
// uc_side := 3 ;
13258: LD_ADDR_OWVAR 20
13262: PUSH
13263: LD_INT 3
13265: ST_TO_ADDR
// uc_nation := 3 ;
13266: LD_ADDR_OWVAR 21
13270: PUSH
13271: LD_INT 3
13273: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
13274: LD_INT 0
13276: PPUSH
13277: LD_INT 5
13279: PUSH
13280: LD_INT 6
13282: PUSH
13283: LD_INT 7
13285: PUSH
13286: LD_INT 8
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: PUSH
13295: LD_OWVAR 67
13299: ARRAY
13300: PPUSH
13301: CALL_OW 383
// tmp := CreateHuman ;
13305: LD_ADDR_VAR 0 3
13309: PUSH
13310: CALL_OW 44
13314: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
13315: LD_VAR 0 3
13319: PPUSH
13320: LD_INT 145
13322: PPUSH
13323: LD_INT 133
13325: PPUSH
13326: LD_INT 0
13328: PPUSH
13329: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
13333: LD_VAR 0 3
13337: PPUSH
13338: LD_INT 29
13340: PPUSH
13341: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13345: LD_INT 35
13347: PPUSH
13348: CALL_OW 67
// if not HasTask ( tmp ) then
13352: LD_VAR 0 3
13356: PPUSH
13357: CALL_OW 314
13361: NOT
13362: IFFALSE 13376
// ComEnterUnit ( tmp , ruFac ) ;
13364: LD_VAR 0 3
13368: PPUSH
13369: LD_INT 29
13371: PPUSH
13372: CALL_OW 120
// until IsInUnit ( tmp ) ;
13376: LD_VAR 0 3
13380: PPUSH
13381: CALL_OW 310
13385: IFFALSE 13345
// end ; end ; end ;
13387: PPOPN 6
13389: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
13390: LD_VAR 0 1
13394: PPUSH
13395: CALL_OW 255
13399: PUSH
13400: LD_INT 4
13402: EQUAL
13403: IFFALSE 13420
// ComMoveXY ( driver , 40 , 47 ) ;
13405: LD_VAR 0 1
13409: PPUSH
13410: LD_INT 40
13412: PPUSH
13413: LD_INT 47
13415: PPUSH
13416: CALL_OW 111
// if GetSide ( driver ) = 3 then
13420: LD_VAR 0 1
13424: PPUSH
13425: CALL_OW 255
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: IFFALSE 13647
// begin ComMoveXY ( driver , 90 , 97 ) ;
13435: LD_VAR 0 1
13439: PPUSH
13440: LD_INT 90
13442: PPUSH
13443: LD_INT 97
13445: PPUSH
13446: CALL_OW 111
// if IsOk ( ruFac ) then
13450: LD_INT 29
13452: PPUSH
13453: CALL_OW 302
13457: IFFALSE 13571
// begin repeat wait ( 0 0$1 ) ;
13459: LD_INT 35
13461: PPUSH
13462: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
13466: LD_INT 29
13468: PPUSH
13469: CALL_OW 313
13473: PUSH
13474: LD_INT 6
13476: LESS
13477: PUSH
13478: LD_VAR 0 1
13482: PPUSH
13483: CALL_OW 301
13487: OR
13488: IFFALSE 13459
// if IsDead ( driver ) then
13490: LD_VAR 0 1
13494: PPUSH
13495: CALL_OW 301
13499: IFFALSE 13503
// exit ;
13501: GO 13647
// repeat wait ( 0 0$10 ) ;
13503: LD_INT 350
13505: PPUSH
13506: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
13510: LD_VAR 0 1
13514: PPUSH
13515: CALL_OW 314
13519: NOT
13520: PUSH
13521: LD_INT 29
13523: PPUSH
13524: CALL_OW 313
13528: PUSH
13529: LD_INT 6
13531: LESS
13532: AND
13533: IFFALSE 13547
// ComEnterUnit ( driver , ruFac ) ;
13535: LD_VAR 0 1
13539: PPUSH
13540: LD_INT 29
13542: PPUSH
13543: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
13547: LD_VAR 0 1
13551: PPUSH
13552: CALL_OW 301
13556: PUSH
13557: LD_VAR 0 1
13561: PPUSH
13562: CALL_OW 310
13566: OR
13567: IFFALSE 13503
// end else
13569: GO 13647
// begin ComMoveXY ( driver , 142 , 148 ) ;
13571: LD_VAR 0 1
13575: PPUSH
13576: LD_INT 142
13578: PPUSH
13579: LD_INT 148
13581: PPUSH
13582: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13586: LD_INT 35
13588: PPUSH
13589: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
13593: LD_VAR 0 1
13597: PPUSH
13598: CALL_OW 301
13602: PUSH
13603: LD_VAR 0 1
13607: PPUSH
13608: LD_INT 142
13610: PPUSH
13611: LD_INT 148
13613: PPUSH
13614: CALL_OW 307
13618: OR
13619: IFFALSE 13586
// if IsAt ( driver , 142 , 148 ) then
13621: LD_VAR 0 1
13625: PPUSH
13626: LD_INT 142
13628: PPUSH
13629: LD_INT 148
13631: PPUSH
13632: CALL_OW 307
13636: IFFALSE 13647
// RemoveUnit ( driver ) ;
13638: LD_VAR 0 1
13642: PPUSH
13643: CALL_OW 64
// end ; end ; end ;
13647: PPOPN 4
13649: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
13650: LD_VAR 0 2
13654: PPUSH
13655: CALL_OW 257
13659: PUSH
13660: LD_INT 3
13662: EQUAL
13663: PUSH
13664: LD_VAR 0 1
13668: PPUSH
13669: CALL_OW 255
13673: PUSH
13674: LD_INT 3
13676: EQUAL
13677: AND
13678: PUSH
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 29
13686: EQUAL
13687: AND
13688: IFFALSE 13702
// SetLives ( un , 1000 ) ;
13690: LD_VAR 0 2
13694: PPUSH
13695: LD_INT 1000
13697: PPUSH
13698: CALL_OW 234
// end ;
13702: PPOPN 2
13704: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
13705: LD_INT 0
13707: PPUSH
13708: PPUSH
// begin if GetSide ( b ) = 3 then
13709: LD_VAR 0 1
13713: PPUSH
13714: CALL_OW 255
13718: PUSH
13719: LD_INT 3
13721: EQUAL
13722: IFFALSE 13953
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 266
13733: PUSH
13734: LD_INT 32
13736: PUSH
13737: LD_INT 5
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: IN
13744: IFFALSE 13953
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
13746: LD_ADDR_VAR 0 4
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_INT 3
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: LD_INT 50
13763: PUSH
13764: EMPTY
13765: LIST
13766: PUSH
13767: LD_INT 30
13769: PUSH
13770: LD_INT 32
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 58
13779: PUSH
13780: EMPTY
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: PPUSH
13789: CALL_OW 69
13793: ST_TO_ADDR
// if tmp then
13794: LD_VAR 0 4
13798: IFFALSE 13820
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
13800: LD_VAR 0 2
13804: PPUSH
13805: LD_VAR 0 4
13809: PUSH
13810: LD_INT 1
13812: ARRAY
13813: PPUSH
13814: CALL_OW 120
// exit ;
13818: GO 13953
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13820: LD_ADDR_VAR 0 4
13824: PUSH
13825: LD_INT 22
13827: PUSH
13828: LD_INT 3
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 50
13837: PUSH
13838: EMPTY
13839: LIST
13840: PUSH
13841: LD_INT 2
13843: PUSH
13844: LD_INT 30
13846: PUSH
13847: LD_INT 4
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 30
13856: PUSH
13857: LD_INT 5
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: PPUSH
13874: CALL_OW 69
13878: ST_TO_ADDR
// if not tmp then
13879: LD_VAR 0 4
13883: NOT
13884: IFFALSE 13903
// begin ComMoveXY ( un , 92 , 99 ) ;
13886: LD_VAR 0 2
13890: PPUSH
13891: LD_INT 92
13893: PPUSH
13894: LD_INT 99
13896: PPUSH
13897: CALL_OW 111
// exit ;
13901: GO 13953
// end ; for i in tmp do
13903: LD_ADDR_VAR 0 3
13907: PUSH
13908: LD_VAR 0 4
13912: PUSH
13913: FOR_IN
13914: IFFALSE 13951
// if UnitsInside ( i ) < 6 then
13916: LD_VAR 0 3
13920: PPUSH
13921: CALL_OW 313
13925: PUSH
13926: LD_INT 6
13928: LESS
13929: IFFALSE 13949
// begin ComEnterUnit ( un , i ) ;
13931: LD_VAR 0 2
13935: PPUSH
13936: LD_VAR 0 3
13940: PPUSH
13941: CALL_OW 120
// exit ;
13945: POP
13946: POP
13947: GO 13953
// end ;
13949: GO 13913
13951: POP
13952: POP
// end ; end ; end ;
13953: PPOPN 4
13955: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 255
13965: PUSH
13966: LD_INT 3
13968: PUSH
13969: LD_INT 6
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: IN
13976: PUSH
13977: LD_VAR 0 1
13981: PPUSH
13982: CALL_OW 263
13986: PUSH
13987: LD_INT 3
13989: EQUAL
13990: AND
13991: PUSH
13992: LD_EXP 7
13996: NOT
13997: AND
13998: IFFALSE 14017
// begin seenComputer := true ;
14000: LD_ADDR_EXP 7
14004: PUSH
14005: LD_INT 1
14007: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14008: LD_VAR 0 1
14012: PPUSH
14013: CALL 17080 0 1
// end ; end ;
14017: PPOPN 1
14019: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
14020: LD_INT 0
14022: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14023: LD_VAR 0 1
14027: PPUSH
14028: LD_VAR 0 2
14032: PPUSH
14033: CALL 35302 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
14037: LD_VAR 0 1
14041: PPUSH
14042: CALL_OW 255
14046: PUSH
14047: LD_INT 3
14049: EQUAL
14050: PUSH
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 263
14060: PUSH
14061: LD_INT 1
14063: EQUAL
14064: AND
14065: PUSH
14066: LD_VAR 0 1
14070: PPUSH
14071: CALL_OW 264
14075: PUSH
14076: LD_INT 42
14078: PUSH
14079: LD_INT 43
14081: PUSH
14082: LD_INT 44
14084: PUSH
14085: LD_INT 46
14087: PUSH
14088: LD_INT 45
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: IN
14098: AND
14099: IFFALSE 14129
// begin SetTag ( vehicle , 300 ) ;
14101: LD_VAR 0 1
14105: PPUSH
14106: LD_INT 300
14108: PPUSH
14109: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
14113: LD_ADDR_EXP 34
14117: PUSH
14118: LD_EXP 34
14122: PUSH
14123: LD_VAR 0 1
14127: UNION
14128: ST_TO_ADDR
// end ; end ;
14129: PPOPN 3
14131: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
14132: LD_INT 0
14134: PPUSH
// begin if InArea ( x , y , ruCrates ) then
14135: LD_VAR 0 2
14139: PPUSH
14140: LD_VAR 0 3
14144: PPUSH
14145: LD_INT 13
14147: PPUSH
14148: CALL_OW 309
14152: IFFALSE 14283
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
14154: LD_ADDR_VAR 0 6
14158: PUSH
14159: LD_INT 22
14161: PUSH
14162: LD_INT 3
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 50
14171: PUSH
14172: EMPTY
14173: LIST
14174: PUSH
14175: LD_INT 34
14177: PUSH
14178: LD_INT 51
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: PPUSH
14190: CALL_OW 69
14194: ST_TO_ADDR
// if not cargo then
14195: LD_VAR 0 6
14199: NOT
14200: IFFALSE 14204
// exit ;
14202: GO 14283
// wait ( 0 0$5 ) ;
14204: LD_INT 175
14206: PPUSH
14207: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
14211: LD_VAR 0 6
14215: PUSH
14216: LD_INT 1
14218: ARRAY
14219: PPUSH
14220: LD_INT 28
14222: PPUSH
14223: CALL_OW 296
14227: PUSH
14228: LD_INT 6
14230: LESS
14231: PUSH
14232: LD_VAR 0 6
14236: PUSH
14237: LD_INT 1
14239: ARRAY
14240: PPUSH
14241: CALL_OW 261
14245: PUSH
14246: LD_INT 50
14248: LESS
14249: AND
14250: IFFALSE 14264
// ComMoveUnit ( cargo , ruDep ) ;
14252: LD_VAR 0 6
14256: PPUSH
14257: LD_INT 28
14259: PPUSH
14260: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
14264: LD_VAR 0 6
14268: PPUSH
14269: LD_VAR 0 2
14273: PPUSH
14274: LD_VAR 0 3
14278: PPUSH
14279: CALL_OW 177
// end ; end ;
14283: PPOPN 6
14285: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
14286: LD_VAR 0 1
14290: PPUSH
14291: CALL_OW 264
14295: PUSH
14296: LD_INT 45
14298: EQUAL
14299: IFFALSE 14316
// captureRocketCounter := Inc ( captureRocketCounter ) ;
14301: LD_ADDR_EXP 11
14305: PUSH
14306: LD_EXP 11
14310: PPUSH
14311: CALL 78300 0 1
14315: ST_TO_ADDR
// end ;
14316: PPOPN 4
14318: END
// on BuildingComplete ( b ) do var i , tmp ;
14319: LD_INT 0
14321: PPUSH
14322: PPUSH
// begin if GetSide ( b ) = 3 then
14323: LD_VAR 0 1
14327: PPUSH
14328: CALL_OW 255
14332: PUSH
14333: LD_INT 3
14335: EQUAL
14336: IFFALSE 14575
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
14338: LD_ADDR_EXP 35
14342: PUSH
14343: LD_EXP 35
14347: PPUSH
14348: LD_INT 1
14350: PPUSH
14351: CALL_OW 3
14355: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
14356: LD_VAR 0 1
14360: PPUSH
14361: CALL_OW 266
14365: PUSH
14366: LD_INT 4
14368: EQUAL
14369: IFFALSE 14380
// ComUpgrade ( b ) ;
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 266
14389: PUSH
14390: LD_INT 32
14392: PUSH
14393: LD_INT 33
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: IN
14400: IFFALSE 14575
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
14402: LD_VAR 0 1
14406: PPUSH
14407: LD_INT 46
14409: PUSH
14410: LD_INT 45
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 1
14419: PPUSH
14420: LD_INT 2
14422: PPUSH
14423: CALL_OW 12
14427: ARRAY
14428: PPUSH
14429: CALL_OW 208
// if GetBType ( b ) = b_bunker then
14433: LD_VAR 0 1
14437: PPUSH
14438: CALL_OW 266
14442: PUSH
14443: LD_INT 32
14445: EQUAL
14446: IFFALSE 14575
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
14448: LD_ADDR_VAR 0 3
14452: PUSH
14453: LD_INT 22
14455: PUSH
14456: LD_INT 3
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: LD_INT 25
14465: PUSH
14466: LD_INT 1
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 120
14475: PUSH
14476: LD_INT 0
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 69
14492: ST_TO_ADDR
// if tmp then
14493: LD_VAR 0 3
14497: IFFALSE 14575
// for i in tmp do
14499: LD_ADDR_VAR 0 2
14503: PUSH
14504: LD_VAR 0 3
14508: PUSH
14509: FOR_IN
14510: IFFALSE 14573
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
14512: LD_VAR 0 2
14516: PPUSH
14517: CALL_OW 310
14521: NOT
14522: PUSH
14523: LD_VAR 0 2
14527: PPUSH
14528: CALL_OW 310
14532: PPUSH
14533: CALL_OW 266
14537: PUSH
14538: LD_INT 32
14540: NONEQUAL
14541: OR
14542: IFFALSE 14571
// begin ComExit ( i ) ;
14544: LD_VAR 0 2
14548: PPUSH
14549: CALL 77337 0 1
// AddComEnterUnit ( i , b ) ;
14553: LD_VAR 0 2
14557: PPUSH
14558: LD_VAR 0 1
14562: PPUSH
14563: CALL_OW 180
// exit ;
14567: POP
14568: POP
14569: GO 14575
// end ;
14571: GO 14509
14573: POP
14574: POP
// end ; end ; end ; end ; end_of_file
14575: PPOPN 3
14577: END
// export function Action ; var i , tmp , un , inUnit ; begin
14578: LD_INT 0
14580: PPUSH
14581: PPUSH
14582: PPUSH
14583: PPUSH
14584: PPUSH
// Video ( true ) ;
14585: LD_INT 1
14587: PPUSH
14588: CALL 76911 0 1
// invincibleMode := true ;
14592: LD_ADDR_EXP 5
14596: PUSH
14597: LD_INT 1
14599: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
14600: LD_INT 50
14602: PPUSH
14603: LD_INT 12
14605: PPUSH
14606: LD_INT 1
14608: PPUSH
14609: LD_INT 56
14611: NEG
14612: PPUSH
14613: CALL 76825 0 4
// CenterOnXY ( 50 , 12 ) ;
14617: LD_INT 50
14619: PPUSH
14620: LD_INT 12
14622: PPUSH
14623: CALL_OW 84
// wait ( 0 0$3 ) ;
14627: LD_INT 105
14629: PPUSH
14630: CALL_OW 67
// PrepareStartRussianAttack ;
14634: CALL 9699 0 0
// CenterOnXY ( 66 , 47 ) ;
14638: LD_INT 66
14640: PPUSH
14641: LD_INT 47
14643: PPUSH
14644: CALL_OW 84
// wait ( 0 0$5 ) ;
14648: LD_INT 175
14650: PPUSH
14651: CALL_OW 67
// case gammaCommander of 1 :
14655: LD_EXP 13
14659: PUSH
14660: LD_INT 1
14662: DOUBLE
14663: EQUAL
14664: IFTRUE 14668
14666: GO 14683
14668: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
14669: LD_EXP 16
14673: PPUSH
14674: LD_STRING D1-Don-1
14676: PPUSH
14677: CALL_OW 88
14681: GO 14730
14683: LD_INT 2
14685: DOUBLE
14686: EQUAL
14687: IFTRUE 14691
14689: GO 14706
14691: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
14692: LD_EXP 15
14696: PPUSH
14697: LD_STRING D1-Brown-1
14699: PPUSH
14700: CALL_OW 88
14704: GO 14730
14706: LD_INT 3
14708: DOUBLE
14709: EQUAL
14710: IFTRUE 14714
14712: GO 14729
14714: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
14715: LD_EXP 25
14719: PPUSH
14720: LD_STRING D1-VanH-1
14722: PPUSH
14723: CALL_OW 88
14727: GO 14730
14729: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
14730: LD_ADDR_VAR 0 3
14734: PUSH
14735: LD_INT 22
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 33
14747: PUSH
14748: LD_INT 2
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 61
14757: PUSH
14758: EMPTY
14759: LIST
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: LIST
14765: PPUSH
14766: CALL_OW 69
14770: ST_TO_ADDR
// if tmp then
14771: LD_VAR 0 3
14775: IFFALSE 14792
// ComAgressiveMove ( tmp , 74 , 44 ) ;
14777: LD_VAR 0 3
14781: PPUSH
14782: LD_INT 74
14784: PPUSH
14785: LD_INT 44
14787: PPUSH
14788: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
14792: LD_ADDR_VAR 0 3
14796: PUSH
14797: LD_INT 22
14799: PUSH
14800: LD_INT 1
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 25
14809: PUSH
14810: LD_INT 1
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PPUSH
14821: CALL_OW 69
14825: PUSH
14826: LD_EXP 16
14830: PUSH
14831: LD_EXP 15
14835: PUSH
14836: LD_EXP 25
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: LIST
14845: DIFF
14846: ST_TO_ADDR
// if tmp then
14847: LD_VAR 0 3
14851: IFFALSE 14929
// for i in tmp do
14853: LD_ADDR_VAR 0 2
14857: PUSH
14858: LD_VAR 0 3
14862: PUSH
14863: FOR_IN
14864: IFFALSE 14927
// begin inUnit := IsInUnit ( i ) ;
14866: LD_ADDR_VAR 0 5
14870: PUSH
14871: LD_VAR 0 2
14875: PPUSH
14876: CALL_OW 310
14880: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
14881: LD_VAR 0 5
14885: PUSH
14886: LD_VAR 0 5
14890: PPUSH
14891: CALL_OW 266
14895: PUSH
14896: LD_INT 32
14898: PUSH
14899: LD_INT 31
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: IN
14906: AND
14907: IFFALSE 14925
// tmp := tmp diff i ;
14909: LD_ADDR_VAR 0 3
14913: PUSH
14914: LD_VAR 0 3
14918: PUSH
14919: LD_VAR 0 2
14923: DIFF
14924: ST_TO_ADDR
// end ;
14925: GO 14863
14927: POP
14928: POP
// if tmp then
14929: LD_VAR 0 3
14933: IFFALSE 15023
// begin ComExitAll ( tmp ) ;
14935: LD_VAR 0 3
14939: PPUSH
14940: CALL 77420 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
14944: LD_VAR 0 3
14948: PPUSH
14949: LD_INT 74
14951: PPUSH
14952: LD_INT 44
14954: PPUSH
14955: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
14959: LD_ADDR_VAR 0 3
14963: PUSH
14964: LD_INT 22
14966: PUSH
14967: LD_INT 1
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 25
14976: PUSH
14977: LD_INT 4
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PPUSH
14988: CALL_OW 69
14992: ST_TO_ADDR
// if tmp then
14993: LD_VAR 0 3
14997: IFFALSE 15023
// begin ComExitAll ( tmp ) ;
14999: LD_VAR 0 3
15003: PPUSH
15004: CALL 77420 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15008: LD_VAR 0 3
15012: PPUSH
15013: LD_INT 66
15015: PPUSH
15016: LD_INT 28
15018: PPUSH
15019: CALL_OW 171
// end ; end ; game_speed := 4 ;
15023: LD_ADDR_OWVAR 65
15027: PUSH
15028: LD_INT 4
15030: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15031: LD_INT 70
15033: PPUSH
15034: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15038: LD_EXP 29
15042: PPUSH
15043: LD_STRING D1-Har-1
15045: PPUSH
15046: CALL_OW 94
// case gammaCommander of 1 :
15050: LD_EXP 13
15054: PUSH
15055: LD_INT 1
15057: DOUBLE
15058: EQUAL
15059: IFTRUE 15063
15061: GO 15078
15063: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15064: LD_EXP 16
15068: PPUSH
15069: LD_STRING D1-Don-2
15071: PPUSH
15072: CALL_OW 88
15076: GO 15125
15078: LD_INT 2
15080: DOUBLE
15081: EQUAL
15082: IFTRUE 15086
15084: GO 15101
15086: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15087: LD_EXP 15
15091: PPUSH
15092: LD_STRING D1-Brown-2
15094: PPUSH
15095: CALL_OW 88
15099: GO 15125
15101: LD_INT 3
15103: DOUBLE
15104: EQUAL
15105: IFTRUE 15109
15107: GO 15124
15109: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15110: LD_EXP 25
15114: PPUSH
15115: LD_STRING D1-VanH-2
15117: PPUSH
15118: CALL_OW 88
15122: GO 15125
15124: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15125: LD_EXP 29
15129: PPUSH
15130: LD_STRING D1-Har-2
15132: PPUSH
15133: CALL_OW 94
// invincibleMode := false ;
15137: LD_ADDR_EXP 5
15141: PUSH
15142: LD_INT 0
15144: ST_TO_ADDR
// Video ( false ) ;
15145: LD_INT 0
15147: PPUSH
15148: CALL 76911 0 1
// ChangeMissionObjectives ( M1 ) ;
15152: LD_STRING M1
15154: PPUSH
15155: CALL_OW 337
// SaveForQuickRestart ;
15159: CALL_OW 22
// wait ( 2 2$30 ) ;
15163: LD_INT 5250
15165: PPUSH
15166: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
15170: LD_INT 1
15172: PPUSH
15173: CALL 11932 0 1
// wait ( 4 4$30 ) ;
15177: LD_INT 9450
15179: PPUSH
15180: CALL_OW 67
// if Difficulty > 1 then
15184: LD_OWVAR 67
15188: PUSH
15189: LD_INT 1
15191: GREATER
15192: IFFALSE 15201
// PrepareRussianAttack ( 2 ) ;
15194: LD_INT 2
15196: PPUSH
15197: CALL 11932 0 1
// if Difficulty > 2 then
15201: LD_OWVAR 67
15205: PUSH
15206: LD_INT 2
15208: GREATER
15209: IFFALSE 15368
// begin for i := 1 to 4 do
15211: LD_ADDR_VAR 0 2
15215: PUSH
15216: DOUBLE
15217: LD_INT 1
15219: DEC
15220: ST_TO_ADDR
15221: LD_INT 4
15223: PUSH
15224: FOR_TO
15225: IFFALSE 15310
// begin uc_side := 6 ;
15227: LD_ADDR_OWVAR 20
15231: PUSH
15232: LD_INT 6
15234: ST_TO_ADDR
// uc_nation := 3 ;
15235: LD_ADDR_OWVAR 21
15239: PUSH
15240: LD_INT 3
15242: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
15243: LD_INT 0
15245: PPUSH
15246: LD_INT 7
15248: PPUSH
15249: CALL_OW 381
// un := CreateHuman ;
15253: LD_ADDR_VAR 0 4
15257: PUSH
15258: CALL_OW 44
15262: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15263: LD_VAR 0 4
15267: PPUSH
15268: LD_INT 122
15270: PPUSH
15271: LD_INT 89
15273: PPUSH
15274: LD_INT 3
15276: PPUSH
15277: LD_INT 0
15279: PPUSH
15280: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
15284: LD_VAR 0 4
15288: PPUSH
15289: LD_INT 88
15291: PPUSH
15292: LD_INT 42
15294: PPUSH
15295: CALL_OW 114
// AddComHold ( un ) ;
15299: LD_VAR 0 4
15303: PPUSH
15304: CALL_OW 200
// end ;
15308: GO 15224
15310: POP
15311: POP
// PrepareScientist ( false , 6 ) ;
15312: LD_INT 0
15314: PPUSH
15315: LD_INT 6
15317: PPUSH
15318: CALL_OW 384
// un := CreateHuman ;
15322: LD_ADDR_VAR 0 4
15326: PUSH
15327: CALL_OW 44
15331: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15332: LD_VAR 0 4
15336: PPUSH
15337: LD_INT 122
15339: PPUSH
15340: LD_INT 89
15342: PPUSH
15343: LD_INT 3
15345: PPUSH
15346: LD_INT 0
15348: PPUSH
15349: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
15353: LD_VAR 0 4
15357: PPUSH
15358: LD_INT 91
15360: PPUSH
15361: LD_INT 48
15363: PPUSH
15364: CALL_OW 111
// end ; end ;
15368: LD_VAR 0 1
15372: RET
// every 0 0$1 trigger invincibleMode do var i ;
15373: LD_EXP 5
15377: IFFALSE 15456
15379: GO 15381
15381: DISABLE
15382: LD_INT 0
15384: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15385: LD_ADDR_VAR 0 1
15389: PUSH
15390: LD_INT 22
15392: PUSH
15393: LD_INT 1
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 21
15402: PUSH
15403: LD_INT 1
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 3
15412: PUSH
15413: LD_INT 24
15415: PUSH
15416: LD_INT 1000
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: PUSH
15437: FOR_IN
15438: IFFALSE 15454
// SetLives ( i , 1000 ) ;
15440: LD_VAR 0 1
15444: PPUSH
15445: LD_INT 1000
15447: PPUSH
15448: CALL_OW 234
15452: GO 15437
15454: POP
15455: POP
// end ;
15456: PPOPN 1
15458: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
15459: LD_OWVAR 1
15463: PUSH
15464: LD_INT 14700
15466: GREATER
15467: IFFALSE 17077
15469: GO 15471
15471: DISABLE
15472: LD_INT 0
15474: PPUSH
15475: PPUSH
// begin PrepareSupportFromDelta ;
15476: CALL 4049 0 0
// deltaSupport := true ;
15480: LD_ADDR_EXP 6
15484: PUSH
15485: LD_INT 1
15487: ST_TO_ADDR
// dialog := false ;
15488: LD_ADDR_VAR 0 1
15492: PUSH
15493: LD_INT 0
15495: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15496: LD_EXP 21
15500: PPUSH
15501: CALL_OW 302
15505: IFFALSE 15527
// dialog := Say ( Gladstone , D2-Glad-1 ) else
15507: LD_ADDR_VAR 0 1
15511: PUSH
15512: LD_EXP 21
15516: PPUSH
15517: LD_STRING D2-Glad-1
15519: PPUSH
15520: CALL_OW 88
15524: ST_TO_ADDR
15525: GO 15609
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
15527: LD_ADDR_VAR 0 1
15531: PUSH
15532: LD_INT 22
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 120
15544: PUSH
15545: LD_INT 107
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 21
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 23
15564: PUSH
15565: LD_INT 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: PUSH
15583: LD_EXP 27
15587: PUSH
15588: LD_EXP 26
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: DIFF
15597: PPUSH
15598: LD_STRING D2-Sol1-1
15600: PPUSH
15601: LD_STRING D2-FSol1-1
15603: PPUSH
15604: CALL 19245 0 3
15608: ST_TO_ADDR
// if dialog then
15609: LD_VAR 0 1
15613: IFFALSE 15714
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
15615: LD_EXP 16
15619: PPUSH
15620: CALL_OW 302
15624: PUSH
15625: LD_EXP 13
15629: PUSH
15630: LD_INT 1
15632: EQUAL
15633: AND
15634: IFFALSE 15648
// Say ( Donaldson , D2-Don-1 ) ;
15636: LD_EXP 16
15640: PPUSH
15641: LD_STRING D2-Don-1
15643: PPUSH
15644: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15648: LD_EXP 15
15652: PPUSH
15653: CALL_OW 302
15657: PUSH
15658: LD_EXP 13
15662: PUSH
15663: LD_INT 2
15665: EQUAL
15666: AND
15667: IFFALSE 15681
// Say ( Brown , D2-Brown-1 ) ;
15669: LD_EXP 15
15673: PPUSH
15674: LD_STRING D2-Brown-1
15676: PPUSH
15677: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
15681: LD_EXP 25
15685: PPUSH
15686: CALL_OW 302
15690: PUSH
15691: LD_EXP 13
15695: PUSH
15696: LD_INT 3
15698: EQUAL
15699: AND
15700: IFFALSE 15714
// Say ( Houten , D2-VanH-1 ) ;
15702: LD_EXP 25
15706: PPUSH
15707: LD_STRING D2-VanH-1
15709: PPUSH
15710: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
15714: LD_INT 3
15716: PPUSH
15717: CALL 11932 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
15721: LD_STRING 07_time
15723: PPUSH
15724: LD_INT 18900
15726: PPUSH
15727: CALL_OW 30
15731: PUSH
15732: LD_INT 3
15734: DIV
15735: PPUSH
15736: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
15740: LD_INT 34
15742: PPUSH
15743: LD_INT 1
15745: PPUSH
15746: CALL_OW 321
15750: PUSH
15751: LD_INT 2
15753: EQUAL
15754: IFFALSE 15763
// SetAchievement ( ACH_HEAVYGUN ) ;
15756: LD_STRING ACH_HEAVYGUN
15758: PPUSH
15759: CALL_OW 543
// PrepareMacmillanSquad ;
15763: CALL 4823 0 0
// wait ( 0 0$1 ) ;
15767: LD_INT 35
15769: PPUSH
15770: CALL_OW 67
// DialogueOn ;
15774: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
15778: LD_EXP 14
15782: PPUSH
15783: CALL_OW 87
// dwait ( 0 0$2 ) ;
15787: LD_INT 70
15789: PPUSH
15790: CALL_OW 68
// DialogueOff ;
15794: CALL_OW 7
// wait ( 0 0$10 ) ;
15798: LD_INT 350
15800: PPUSH
15801: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
15805: LD_INT 1
15807: PPUSH
15808: CALL_OW 427
// p := 0 ;
15812: LD_ADDR_VAR 0 2
15816: PUSH
15817: LD_INT 0
15819: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15820: LD_INT 35
15822: PPUSH
15823: CALL_OW 67
// p := Inc ( p ) ;
15827: LD_ADDR_VAR 0 2
15831: PUSH
15832: LD_VAR 0 2
15836: PPUSH
15837: CALL 78300 0 1
15841: ST_TO_ADDR
// if p > 120 then
15842: LD_VAR 0 2
15846: PUSH
15847: LD_INT 120
15849: GREATER
15850: IFFALSE 15854
// exit ;
15852: GO 17077
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
15854: LD_EXP 14
15858: PPUSH
15859: LD_INT 15
15861: PPUSH
15862: CALL_OW 308
15866: PUSH
15867: LD_EXP 14
15871: PPUSH
15872: CALL_OW 310
15876: PPUSH
15877: LD_INT 15
15879: PPUSH
15880: CALL_OW 308
15884: OR
15885: PUSH
15886: LD_EXP 14
15890: PPUSH
15891: LD_EXP 27
15895: PPUSH
15896: CALL_OW 296
15900: PUSH
15901: LD_INT 10
15903: LESS
15904: OR
15905: PUSH
15906: LD_INT 22
15908: PUSH
15909: LD_INT 1
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: LD_INT 120
15921: PUSH
15922: LD_INT 106
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: LD_INT 120
15931: PUSH
15932: LD_INT 107
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 91
15946: PUSH
15947: LD_EXP 14
15951: PUSH
15952: LD_INT 12
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: LIST
15964: PPUSH
15965: CALL_OW 69
15969: OR
15970: IFFALSE 15820
// DialogueOn ;
15972: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
15976: LD_EXP 14
15980: PPUSH
15981: LD_STRING D3-JMM-1
15983: PPUSH
15984: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15988: LD_EXP 16
15992: PPUSH
15993: CALL_OW 302
15997: PUSH
15998: LD_EXP 13
16002: PUSH
16003: LD_INT 1
16005: EQUAL
16006: AND
16007: IFFALSE 16023
// Say ( Donaldson , D3-Don-1 ) else
16009: LD_EXP 16
16013: PPUSH
16014: LD_STRING D3-Don-1
16016: PPUSH
16017: CALL_OW 88
16021: GO 16119
// begin if gammaCommander = 1 then
16023: LD_EXP 13
16027: PUSH
16028: LD_INT 1
16030: EQUAL
16031: IFFALSE 16119
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16033: LD_INT 22
16035: PUSH
16036: LD_INT 1
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 21
16045: PUSH
16046: LD_INT 1
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 23
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 120
16065: PUSH
16066: LD_INT 106
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 26
16075: PUSH
16076: LD_INT 1
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: PPUSH
16090: CALL_OW 69
16094: PPUSH
16095: LD_STRING D3-Sol1-1
16097: PPUSH
16098: LD_STRING 
16100: PPUSH
16101: CALL 19245 0 3
16105: IFFALSE 16119
// Say ( JMM , D3-JMM-2 ) ;
16107: LD_EXP 14
16111: PPUSH
16112: LD_STRING D3-JMM-2
16114: PPUSH
16115: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16119: LD_EXP 15
16123: PPUSH
16124: CALL_OW 302
16128: PUSH
16129: LD_EXP 13
16133: PUSH
16134: LD_INT 2
16136: EQUAL
16137: AND
16138: IFFALSE 16154
// Say ( Brown , D3-Brown-1 ) else
16140: LD_EXP 15
16144: PPUSH
16145: LD_STRING D3-Brown-1
16147: PPUSH
16148: CALL_OW 88
16152: GO 16250
// begin if gammaCommander = 2 then
16154: LD_EXP 13
16158: PUSH
16159: LD_INT 2
16161: EQUAL
16162: IFFALSE 16250
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
16164: LD_INT 22
16166: PUSH
16167: LD_INT 1
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 21
16176: PUSH
16177: LD_INT 1
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 23
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 120
16196: PUSH
16197: LD_INT 106
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 26
16206: PUSH
16207: LD_INT 1
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: PPUSH
16226: LD_STRING D3-Sol1-1a
16228: PPUSH
16229: LD_STRING 
16231: PPUSH
16232: CALL 19245 0 3
16236: IFFALSE 16250
// Say ( JMM , D3-JMM-2 ) ;
16238: LD_EXP 14
16242: PPUSH
16243: LD_STRING D3-JMM-2
16245: PPUSH
16246: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
16250: LD_EXP 25
16254: PPUSH
16255: CALL_OW 302
16259: PUSH
16260: LD_EXP 13
16264: PUSH
16265: LD_INT 3
16267: EQUAL
16268: AND
16269: IFFALSE 16285
// Say ( Houten , D3-VanH-1 ) else
16271: LD_EXP 25
16275: PPUSH
16276: LD_STRING D3-VanH-1
16278: PPUSH
16279: CALL_OW 88
16283: GO 16381
// begin if gammaCommander = 3 then
16285: LD_EXP 13
16289: PUSH
16290: LD_INT 3
16292: EQUAL
16293: IFFALSE 16381
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
16295: LD_INT 22
16297: PUSH
16298: LD_INT 1
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 21
16307: PUSH
16308: LD_INT 1
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 23
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 120
16327: PUSH
16328: LD_INT 106
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 26
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: PPUSH
16352: CALL_OW 69
16356: PPUSH
16357: LD_STRING D3-Sol1-1b
16359: PPUSH
16360: LD_STRING 
16362: PPUSH
16363: CALL 19245 0 3
16367: IFFALSE 16381
// Say ( JMM , D3-JMM-2 ) ;
16369: LD_EXP 14
16373: PPUSH
16374: LD_STRING D3-JMM-2
16376: PPUSH
16377: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
16381: LD_EXP 27
16385: PPUSH
16386: CALL_OW 302
16390: IFFALSE 16418
// begin Say ( Joan , D3a-Joan-1 ) ;
16392: LD_EXP 27
16396: PPUSH
16397: LD_STRING D3a-Joan-1
16399: PPUSH
16400: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
16404: LD_EXP 14
16408: PPUSH
16409: LD_STRING D3a-JMM-1
16411: PPUSH
16412: CALL_OW 88
// end else
16416: GO 16852
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16418: LD_STRING 06_JoanStatus_1
16420: PPUSH
16421: LD_INT 0
16423: PPUSH
16424: CALL_OW 30
16428: PUSH
16429: LD_INT 1
16431: EQUAL
16432: IFFALSE 16852
// begin Say ( JMM , D3b-JMM-1 ) ;
16434: LD_EXP 14
16438: PPUSH
16439: LD_STRING D3b-JMM-1
16441: PPUSH
16442: CALL_OW 88
// dialog := false ;
16446: LD_ADDR_VAR 0 1
16450: PUSH
16451: LD_INT 0
16453: ST_TO_ADDR
// if gammaCommander = 1 then
16454: LD_EXP 13
16458: PUSH
16459: LD_INT 1
16461: EQUAL
16462: IFFALSE 16573
// if IsOK ( Donaldson ) then
16464: LD_EXP 16
16468: PPUSH
16469: CALL_OW 302
16473: IFFALSE 16495
// dialog := Say ( Donaldson , D3b-Don-1 ) else
16475: LD_ADDR_VAR 0 1
16479: PUSH
16480: LD_EXP 16
16484: PPUSH
16485: LD_STRING D3b-Don-1
16487: PPUSH
16488: CALL_OW 88
16492: ST_TO_ADDR
16493: GO 16573
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16495: LD_ADDR_VAR 0 1
16499: PUSH
16500: LD_INT 22
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 21
16512: PUSH
16513: LD_INT 1
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 23
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 120
16532: PUSH
16533: LD_INT 106
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 26
16542: PUSH
16543: LD_INT 1
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: PPUSH
16557: CALL_OW 69
16561: PPUSH
16562: LD_STRING D3b-Sol1-1
16564: PPUSH
16565: LD_STRING 
16567: PPUSH
16568: CALL 19245 0 3
16572: ST_TO_ADDR
// if gammaCommander = 2 then
16573: LD_EXP 13
16577: PUSH
16578: LD_INT 2
16580: EQUAL
16581: IFFALSE 16692
// if IsOk ( Brown ) then
16583: LD_EXP 15
16587: PPUSH
16588: CALL_OW 302
16592: IFFALSE 16614
// dialog := Say ( Brown , D3b-Brown-1 ) else
16594: LD_ADDR_VAR 0 1
16598: PUSH
16599: LD_EXP 15
16603: PPUSH
16604: LD_STRING D3b-Brown-1
16606: PPUSH
16607: CALL_OW 88
16611: ST_TO_ADDR
16612: GO 16692
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16614: LD_ADDR_VAR 0 1
16618: PUSH
16619: LD_INT 22
16621: PUSH
16622: LD_INT 1
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 21
16631: PUSH
16632: LD_INT 1
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 23
16641: PUSH
16642: LD_INT 1
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 120
16651: PUSH
16652: LD_INT 106
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 26
16661: PUSH
16662: LD_INT 1
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: PPUSH
16681: LD_STRING D3b-Sol1-1
16683: PPUSH
16684: LD_STRING 
16686: PPUSH
16687: CALL 19245 0 3
16691: ST_TO_ADDR
// if gammaCommander = 3 then
16692: LD_EXP 13
16696: PUSH
16697: LD_INT 3
16699: EQUAL
16700: IFFALSE 16811
// if IsOk ( Houten ) then
16702: LD_EXP 25
16706: PPUSH
16707: CALL_OW 302
16711: IFFALSE 16733
// dialog := Say ( Houten , D3b-VanH-1 ) else
16713: LD_ADDR_VAR 0 1
16717: PUSH
16718: LD_EXP 25
16722: PPUSH
16723: LD_STRING D3b-VanH-1
16725: PPUSH
16726: CALL_OW 88
16730: ST_TO_ADDR
16731: GO 16811
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16733: LD_ADDR_VAR 0 1
16737: PUSH
16738: LD_INT 22
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 21
16750: PUSH
16751: LD_INT 1
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 23
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 120
16770: PUSH
16771: LD_INT 106
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 26
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: PPUSH
16795: CALL_OW 69
16799: PPUSH
16800: LD_STRING D3b-Sol1-1
16802: PPUSH
16803: LD_STRING 
16805: PPUSH
16806: CALL 19245 0 3
16810: ST_TO_ADDR
// if dialog then
16811: LD_VAR 0 1
16815: IFFALSE 16852
// begin Say ( JMM , D3b-JMM-2 ) ;
16817: LD_EXP 14
16821: PPUSH
16822: LD_STRING D3b-JMM-2
16824: PPUSH
16825: CALL_OW 88
// if IsOK ( Lisa ) then
16829: LD_EXP 19
16833: PPUSH
16834: CALL_OW 302
16838: IFFALSE 16852
// Say ( Lisa , D3b-Lisa-2 ) ;
16840: LD_EXP 19
16844: PPUSH
16845: LD_STRING D3b-Lisa-2
16847: PPUSH
16848: CALL_OW 88
// end ; end ; end ; if not seenComputer then
16852: LD_EXP 7
16856: NOT
16857: IFFALSE 16865
// begin DialogueOff ;
16859: CALL_OW 7
// exit ;
16863: GO 17077
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
16865: LD_INT 22
16867: PUSH
16868: LD_INT 1
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 21
16877: PUSH
16878: LD_INT 1
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 23
16887: PUSH
16888: LD_INT 1
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: LD_INT 120
16900: PUSH
16901: LD_INT 106
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 120
16910: PUSH
16911: LD_INT 107
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 26
16925: PUSH
16926: LD_INT 1
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: PPUSH
16940: CALL_OW 69
16944: PPUSH
16945: LD_STRING DCa-Sol1-1
16947: PPUSH
16948: LD_STRING 
16950: PPUSH
16951: CALL 19245 0 3
16955: IFFALSE 16969
// Say ( JMM , DCb-JMM-1 ) ;
16957: LD_EXP 14
16961: PPUSH
16962: LD_STRING DCb-JMM-1
16964: PPUSH
16965: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
16969: LD_INT 22
16971: PUSH
16972: LD_INT 1
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 21
16981: PUSH
16982: LD_INT 1
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 23
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 2
17001: PUSH
17002: LD_INT 120
17004: PUSH
17005: LD_INT 106
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 120
17014: PUSH
17015: LD_INT 107
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 26
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: PPUSH
17044: CALL_OW 69
17048: PPUSH
17049: LD_STRING DCb-Sol1-1
17051: PPUSH
17052: LD_STRING 
17054: PPUSH
17055: CALL 19245 0 3
17059: IFFALSE 17073
// Say ( JMM , DCb-JMM-2 ) ;
17061: LD_EXP 14
17065: PPUSH
17066: LD_STRING DCb-JMM-2
17068: PPUSH
17069: CALL_OW 88
// DialogueOff ;
17073: CALL_OW 7
// end ;
17077: PPOPN 2
17079: END
// export function DialogSeenComputer ( un ) ; begin
17080: LD_INT 0
17082: PPUSH
// if jmmArrival then
17083: LD_EXP 8
17087: IFFALSE 17091
// exit ;
17089: GO 17157
// CenterOnUnits ( un ) ;
17091: LD_VAR 0 1
17095: PPUSH
17096: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17100: LD_INT 22
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: LD_INT 120
17115: PUSH
17116: LD_INT 106
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 120
17125: PUSH
17126: LD_INT 107
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PPUSH
17142: CALL_OW 69
17146: PPUSH
17147: LD_STRING DC-Sol1-1
17149: PPUSH
17150: LD_STRING DC-FSol1-1
17152: PPUSH
17153: CALL 19245 0 3
// end ;
17157: LD_VAR 0 2
17161: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
17162: LD_EXP 8
17166: PUSH
17167: LD_OWVAR 1
17171: PUSH
17172: LD_INT 48300
17174: GREATEREQUAL
17175: AND
17176: PUSH
17177: LD_EXP 14
17181: PPUSH
17182: CALL_OW 302
17186: AND
17187: IFFALSE 17650
17189: GO 17191
17191: DISABLE
// begin wait ( 2 2$00 ) ;
17192: LD_INT 4200
17194: PPUSH
17195: CALL_OW 67
// DialogueOn ;
17199: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17203: LD_EXP 30
17207: PPUSH
17208: LD_STRING D4-Pow-1
17210: PPUSH
17211: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17215: LD_EXP 14
17219: PPUSH
17220: LD_STRING D4-JMM-1
17222: PPUSH
17223: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17227: LD_EXP 30
17231: PPUSH
17232: LD_STRING D4-Pow-2
17234: PPUSH
17235: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17239: LD_EXP 14
17243: PPUSH
17244: LD_STRING D4-JMM-2
17246: PPUSH
17247: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
17251: LD_EXP 30
17255: PPUSH
17256: LD_STRING D4-Pow-3
17258: PPUSH
17259: CALL_OW 94
// DialogueOff ;
17263: CALL_OW 7
// wait ( 1 1$00 ) ;
17267: LD_INT 2100
17269: PPUSH
17270: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
17274: LD_INT 1
17276: PPUSH
17277: CALL_OW 427
// wait ( 7 7$30 ) ;
17281: LD_INT 15750
17283: PPUSH
17284: CALL_OW 67
// DialogueOn ;
17288: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
17292: LD_EXP 30
17296: PPUSH
17297: LD_STRING D4a-Pow-1
17299: PPUSH
17300: CALL_OW 94
// DialogueOff ;
17304: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
17308: LD_INT 1
17310: PPUSH
17311: CALL_OW 427
// SikorskiCounter ;
17315: CALL 19029 0 0
// PrepareSikorsky ;
17319: CALL 6191 0 0
// CenterNowOnUnits ( Sikorski ) ;
17323: LD_EXP 28
17327: PPUSH
17328: CALL_OW 87
// DialogueOn ;
17332: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
17336: LD_EXP 28
17340: PPUSH
17341: LD_STRING D5-Sik-1
17343: PPUSH
17344: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 then
17348: LD_INT 11
17350: PPUSH
17351: LD_INT 22
17353: PUSH
17354: LD_INT 1
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL_OW 70
17365: PUSH
17366: LD_INT 1
17368: GREATER
17369: IFFALSE 17421
// begin Say ( JMM , D5-JMM-1 ) ;
17371: LD_EXP 14
17375: PPUSH
17376: LD_STRING D5-JMM-1
17378: PPUSH
17379: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
17383: LD_EXP 28
17387: PPUSH
17388: LD_STRING D7a-Sik-1
17390: PPUSH
17391: CALL_OW 88
// DialogueOff ;
17395: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17399: LD_STRING M2
17401: PPUSH
17402: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
17406: LD_INT 1
17408: PPUSH
17409: CALL_OW 427
// SikorskiAttack ;
17413: CALL 7539 0 0
// exit ;
17417: GO 17650
// end else
17419: GO 17466
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
17421: LD_INT 15
17423: PPUSH
17424: LD_INT 81
17426: PUSH
17427: LD_INT 1
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 70
17438: IFFALSE 17454
// Say ( JMM , D5-JMM-1b ) else
17440: LD_EXP 14
17444: PPUSH
17445: LD_STRING D5-JMM-1b
17447: PPUSH
17448: CALL_OW 88
17452: GO 17466
// Say ( JMM , D5-JMM-1a ) ;
17454: LD_EXP 14
17458: PPUSH
17459: LD_STRING D5-JMM-1a
17461: PPUSH
17462: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
17466: LD_EXP 28
17470: PPUSH
17471: LD_STRING D5-Sik-2
17473: PPUSH
17474: CALL_OW 88
// case Query ( QSikorski ) of 1 :
17478: LD_STRING QSikorski
17480: PPUSH
17481: CALL_OW 97
17485: PUSH
17486: LD_INT 1
17488: DOUBLE
17489: EQUAL
17490: IFTRUE 17494
17492: GO 17517
17494: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
17495: LD_EXP 28
17499: PPUSH
17500: LD_STRING D5a-Sik-1
17502: PPUSH
17503: CALL_OW 88
// sikorskiWait := 1 1$00 ;
17507: LD_ADDR_EXP 4
17511: PUSH
17512: LD_INT 2100
17514: ST_TO_ADDR
// end ; 2 :
17515: GO 17604
17517: LD_INT 2
17519: DOUBLE
17520: EQUAL
17521: IFTRUE 17525
17523: GO 17548
17525: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
17526: LD_EXP 28
17530: PPUSH
17531: LD_STRING D5b-Sik-1
17533: PPUSH
17534: CALL_OW 88
// sikorskiWait := 5 5$00 ;
17538: LD_ADDR_EXP 4
17542: PUSH
17543: LD_INT 10500
17545: ST_TO_ADDR
// end ; 3 :
17546: GO 17604
17548: LD_INT 3
17550: DOUBLE
17551: EQUAL
17552: IFTRUE 17556
17554: GO 17603
17556: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
17557: LD_EXP 28
17561: PPUSH
17562: LD_STRING D5c-Sik-1
17564: PPUSH
17565: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
17569: LD_EXP 14
17573: PPUSH
17574: LD_STRING D5c-JMM-1
17576: PPUSH
17577: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
17581: LD_EXP 28
17585: PPUSH
17586: LD_STRING D5c-Sik-2
17588: PPUSH
17589: CALL_OW 88
// sikorskiWait := 5 5$00 ;
17593: LD_ADDR_EXP 4
17597: PUSH
17598: LD_INT 10500
17600: ST_TO_ADDR
// end ; end ;
17601: GO 17604
17603: POP
// DialogueOff ;
17604: CALL_OW 7
// SikorskiWaitCounter ;
17608: CALL 19092 0 0
// DialogueOn ;
17612: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
17616: LD_EXP 28
17620: PPUSH
17621: LD_STRING D6-Sik-1
17623: PPUSH
17624: CALL_OW 88
// DialogueOff ;
17628: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17632: LD_STRING M2
17634: PPUSH
17635: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
17639: LD_INT 1
17641: PPUSH
17642: CALL_OW 427
// SikorskiAttack ;
17646: CALL 7539 0 0
// end ;
17650: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
17651: LD_INT 11
17653: PPUSH
17654: LD_INT 22
17656: PUSH
17657: LD_INT 4
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PPUSH
17664: CALL_OW 70
17668: PUSH
17669: LD_INT 2
17671: GREATER
17672: IFFALSE 17865
17674: GO 17676
17676: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
17677: LD_EXP 28
17681: PPUSH
17682: LD_STRING D7-Sik-1
17684: PPUSH
17685: CALL_OW 88
// wait ( 0 0$10 ) ;
17689: LD_INT 350
17691: PPUSH
17692: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
17696: LD_EXP 14
17700: PPUSH
17701: LD_INT 11
17703: PPUSH
17704: CALL_OW 308
17708: PUSH
17709: LD_EXP 14
17713: PPUSH
17714: CALL_OW 310
17718: PPUSH
17719: LD_INT 11
17721: PPUSH
17722: CALL_OW 308
17726: OR
17727: IFFALSE 17751
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17729: LD_EXP 28
17733: PPUSH
17734: LD_STRING D7a-Sik-1
17736: PPUSH
17737: CALL_OW 88
// sikorskiStatus := 1 ;
17741: LD_ADDR_EXP 9
17745: PUSH
17746: LD_INT 1
17748: ST_TO_ADDR
// end else
17749: GO 17771
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17751: LD_EXP 28
17755: PPUSH
17756: LD_STRING D7b-Sik-1
17758: PPUSH
17759: CALL_OW 88
// sikorskiStatus := 0 ;
17763: LD_ADDR_EXP 9
17767: PUSH
17768: LD_INT 0
17770: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
17771: LD_INT 1575
17773: PPUSH
17774: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
17778: LD_EXP 14
17782: PPUSH
17783: LD_INT 11
17785: PPUSH
17786: CALL_OW 308
17790: PUSH
17791: LD_EXP 14
17795: PPUSH
17796: CALL_OW 310
17800: PPUSH
17801: LD_INT 11
17803: PPUSH
17804: CALL_OW 308
17808: OR
17809: PUSH
17810: LD_EXP 14
17814: PPUSH
17815: CALL_OW 302
17819: NOT
17820: OR
17821: IFFALSE 17845
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17823: LD_EXP 28
17827: PPUSH
17828: LD_STRING D7a-Sik-1
17830: PPUSH
17831: CALL_OW 88
// sikorskiStatus := 1 ;
17835: LD_ADDR_EXP 9
17839: PUSH
17840: LD_INT 1
17842: ST_TO_ADDR
// end else
17843: GO 17865
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17845: LD_EXP 28
17849: PPUSH
17850: LD_STRING D7b-Sik-1
17852: PPUSH
17853: CALL_OW 88
// sikorskiStatus := 0 ;
17857: LD_ADDR_EXP 9
17861: PUSH
17862: LD_INT 0
17864: ST_TO_ADDR
// end ; end ;
17865: END
// export function SikorskiKilledInAction ; begin
17866: LD_INT 0
17868: PPUSH
// wait ( 0 0$2 ) ;
17869: LD_INT 70
17871: PPUSH
17872: CALL_OW 67
// DialogueOn ;
17876: CALL_OW 6
// dwait ( 0 0$1 ) ;
17880: LD_INT 35
17882: PPUSH
17883: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
17887: LD_EXP 30
17891: PPUSH
17892: LD_STRING D8b-Pow-1
17894: PPUSH
17895: CALL_OW 94
// YouLost ( Dismissed ) ;
17899: LD_STRING Dismissed
17901: PPUSH
17902: CALL_OW 104
// DialogueOff ;
17906: CALL_OW 7
// end ;
17910: LD_VAR 0 1
17914: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
17915: LD_EXP 8
17919: PUSH
17920: LD_INT 28
17922: PPUSH
17923: CALL_OW 301
17927: AND
17928: PUSH
17929: LD_EXP 32
17933: PPUSH
17934: CALL_OW 301
17938: AND
17939: PUSH
17940: LD_INT 22
17942: PUSH
17943: LD_INT 3
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 50
17952: PUSH
17953: EMPTY
17954: LIST
17955: PUSH
17956: LD_INT 30
17958: PUSH
17959: LD_INT 5
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: LIST
17970: PPUSH
17971: CALL_OW 69
17975: PUSH
17976: LD_INT 0
17978: EQUAL
17979: AND
17980: IFFALSE 19026
17982: GO 17984
17984: DISABLE
17985: LD_INT 0
17987: PPUSH
17988: PPUSH
17989: PPUSH
// begin Video ( true ) ;
17990: LD_INT 1
17992: PPUSH
17993: CALL 76911 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
17997: LD_INT 104
17999: PPUSH
18000: LD_INT 108
18002: PPUSH
18003: LD_INT 1
18005: PPUSH
18006: LD_INT 36
18008: NEG
18009: PPUSH
18010: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18014: LD_INT 104
18016: PPUSH
18017: LD_INT 108
18019: PPUSH
18020: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18024: LD_ADDR_VAR 0 2
18028: PUSH
18029: LD_INT 22
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 21
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 3
18051: PUSH
18052: LD_INT 24
18054: PUSH
18055: LD_INT 249
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 69
18075: ST_TO_ADDR
// if tmp then
18076: LD_VAR 0 2
18080: IFFALSE 18111
// for i in tmp do
18082: LD_ADDR_VAR 0 1
18086: PUSH
18087: LD_VAR 0 2
18091: PUSH
18092: FOR_IN
18093: IFFALSE 18109
// SetLives ( i , 249 ) ;
18095: LD_VAR 0 1
18099: PPUSH
18100: LD_INT 249
18102: PPUSH
18103: CALL_OW 234
18107: GO 18092
18109: POP
18110: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18111: LD_ADDR_VAR 0 1
18115: PUSH
18116: LD_INT 22
18118: PUSH
18119: LD_INT 3
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 21
18128: PUSH
18129: LD_INT 1
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 69
18144: PUSH
18145: FOR_IN
18146: IFFALSE 18189
// begin ComExit ( i ) ;
18148: LD_VAR 0 1
18152: PPUSH
18153: CALL 77337 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
18157: LD_VAR 0 1
18161: PPUSH
18162: LD_INT 131
18164: PPUSH
18165: LD_INT 127
18167: PPUSH
18168: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
18172: LD_VAR 0 1
18176: PPUSH
18177: LD_INT 141
18179: PPUSH
18180: LD_INT 147
18182: PPUSH
18183: CALL_OW 171
// end ;
18187: GO 18145
18189: POP
18190: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
18191: LD_INT 81
18193: PUSH
18194: LD_INT 3
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 3
18203: PUSH
18204: LD_INT 21
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PPUSH
18222: CALL_OW 69
18226: PPUSH
18227: LD_INT 131
18229: PPUSH
18230: LD_INT 127
18232: PPUSH
18233: CALL_OW 174
// wait ( 0 0$08 ) ;
18237: LD_INT 280
18239: PPUSH
18240: CALL_OW 67
// DialogueOn ;
18244: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
18248: LD_EXP 9
18252: PUSH
18253: LD_INT 1
18255: EQUAL
18256: PUSH
18257: LD_EXP 28
18261: PPUSH
18262: CALL_OW 302
18266: AND
18267: IFFALSE 18281
// Say ( Sikorski , D9-Sik-1 ) ;
18269: LD_EXP 28
18273: PPUSH
18274: LD_STRING D9-Sik-1
18276: PPUSH
18277: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
18281: LD_INT 22
18283: PUSH
18284: LD_INT 4
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PPUSH
18291: CALL_OW 69
18295: PUSH
18296: LD_INT 0
18298: EQUAL
18299: PUSH
18300: LD_EXP 3
18304: AND
18305: IFFALSE 18314
// SetAchievement ( ACH_BLITZKRIEG ) ;
18307: LD_STRING ACH_BLITZKRIEG
18309: PPUSH
18310: CALL_OW 543
// if tick <= 45 45$10 then
18314: LD_OWVAR 1
18318: PUSH
18319: LD_INT 94850
18321: LESSEQUAL
18322: IFFALSE 18338
// begin wait ( 3 ) ;
18324: LD_INT 3
18326: PPUSH
18327: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
18331: LD_STRING ACH_ASPEED_8
18333: PPUSH
18334: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
18338: LD_STRING med1
18340: PPUSH
18341: LD_INT 1
18343: PPUSH
18344: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
18348: LD_STRING med2
18350: PPUSH
18351: LD_INT 1
18353: PPUSH
18354: CALL_OW 101
// if sikorskiStatus = 1 then
18358: LD_EXP 9
18362: PUSH
18363: LD_INT 1
18365: EQUAL
18366: IFFALSE 18380
// AddMedal ( perfect , 1 ) else
18368: LD_STRING perfect
18370: PPUSH
18371: LD_INT 1
18373: PPUSH
18374: CALL_OW 101
18378: GO 18391
// AddMedal ( perfect , - 1 ) ;
18380: LD_STRING perfect
18382: PPUSH
18383: LD_INT 1
18385: NEG
18386: PPUSH
18387: CALL_OW 101
// if Difficulty >= 3 then
18391: LD_OWVAR 67
18395: PUSH
18396: LD_INT 3
18398: GREATEREQUAL
18399: IFFALSE 18411
// SetAchievementEX ( ACH_AMER , 8 ) ;
18401: LD_STRING ACH_AMER
18403: PPUSH
18404: LD_INT 8
18406: PPUSH
18407: CALL_OW 564
// GiveMedals ( Main ) ;
18411: LD_STRING Main
18413: PPUSH
18414: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18418: LD_INT 22
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 23
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 21
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: LIST
18452: PPUSH
18453: CALL_OW 69
18457: PPUSH
18458: CALL_OW 43
// prefix := 08_ ;
18462: LD_ADDR_VAR 0 3
18466: PUSH
18467: LD_STRING 08_
18469: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
18470: LD_EXP 14
18474: PPUSH
18475: LD_VAR 0 3
18479: PUSH
18480: LD_STRING JMM
18482: STR
18483: PPUSH
18484: CALL_OW 38
// if IsLive ( Brown ) then
18488: LD_EXP 15
18492: PPUSH
18493: CALL_OW 300
18497: IFFALSE 18517
// SaveCharacters ( Brown , prefix & Brown ) ;
18499: LD_EXP 15
18503: PPUSH
18504: LD_VAR 0 3
18508: PUSH
18509: LD_STRING Brown
18511: STR
18512: PPUSH
18513: CALL_OW 38
// if IsLive ( Donaldson ) then
18517: LD_EXP 16
18521: PPUSH
18522: CALL_OW 300
18526: IFFALSE 18546
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
18528: LD_EXP 16
18532: PPUSH
18533: LD_VAR 0 3
18537: PUSH
18538: LD_STRING Donaldson
18540: STR
18541: PPUSH
18542: CALL_OW 38
// if IsLive ( Bobby ) then
18546: LD_EXP 17
18550: PPUSH
18551: CALL_OW 300
18555: IFFALSE 18575
// SaveCharacters ( Bobby , prefix & Bobby ) ;
18557: LD_EXP 17
18561: PPUSH
18562: LD_VAR 0 3
18566: PUSH
18567: LD_STRING Bobby
18569: STR
18570: PPUSH
18571: CALL_OW 38
// if IsLive ( Cyrus ) then
18575: LD_EXP 18
18579: PPUSH
18580: CALL_OW 300
18584: IFFALSE 18604
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
18586: LD_EXP 18
18590: PPUSH
18591: LD_VAR 0 3
18595: PUSH
18596: LD_STRING Cyrus
18598: STR
18599: PPUSH
18600: CALL_OW 38
// if IsLive ( Lisa ) then
18604: LD_EXP 19
18608: PPUSH
18609: CALL_OW 300
18613: IFFALSE 18633
// SaveCharacters ( Lisa , prefix & Lisa ) ;
18615: LD_EXP 19
18619: PPUSH
18620: LD_VAR 0 3
18624: PUSH
18625: LD_STRING Lisa
18627: STR
18628: PPUSH
18629: CALL_OW 38
// if IsLive ( Frank ) then
18633: LD_EXP 20
18637: PPUSH
18638: CALL_OW 300
18642: IFFALSE 18662
// SaveCharacters ( Frank , prefix & Frank ) ;
18644: LD_EXP 20
18648: PPUSH
18649: LD_VAR 0 3
18653: PUSH
18654: LD_STRING Frank
18656: STR
18657: PPUSH
18658: CALL_OW 38
// if IsLive ( Gladstone ) then
18662: LD_EXP 21
18666: PPUSH
18667: CALL_OW 300
18671: IFFALSE 18691
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
18673: LD_EXP 21
18677: PPUSH
18678: LD_VAR 0 3
18682: PUSH
18683: LD_STRING Gladstone
18685: STR
18686: PPUSH
18687: CALL_OW 38
// if IsLive ( Kikuchi ) then
18691: LD_EXP 22
18695: PPUSH
18696: CALL_OW 300
18700: IFFALSE 18720
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
18702: LD_EXP 22
18706: PPUSH
18707: LD_VAR 0 3
18711: PUSH
18712: LD_STRING Kikuchi
18714: STR
18715: PPUSH
18716: CALL_OW 38
// if IsLive ( Denis ) then
18720: LD_EXP 26
18724: PPUSH
18725: CALL_OW 300
18729: IFFALSE 18749
// SaveCharacters ( Denis , prefix & Denis ) ;
18731: LD_EXP 26
18735: PPUSH
18736: LD_VAR 0 3
18740: PUSH
18741: LD_STRING Denis
18743: STR
18744: PPUSH
18745: CALL_OW 38
// if IsLive ( Joan ) then
18749: LD_EXP 27
18753: PPUSH
18754: CALL_OW 300
18758: IFFALSE 18780
// SaveCharacters ( Joan , prefix & Joan ) else
18760: LD_EXP 27
18764: PPUSH
18765: LD_VAR 0 3
18769: PUSH
18770: LD_STRING Joan
18772: STR
18773: PPUSH
18774: CALL_OW 38
18778: GO 18787
// DeleteCharacters ( Joan ) ;
18780: LD_STRING Joan
18782: PPUSH
18783: CALL_OW 40
// if IsLive ( Khatam ) then
18787: LD_EXP 23
18791: PPUSH
18792: CALL_OW 300
18796: IFFALSE 18816
// SaveCharacters ( Khatam , prefix & Khatam ) ;
18798: LD_EXP 23
18802: PPUSH
18803: LD_VAR 0 3
18807: PUSH
18808: LD_STRING Khatam
18810: STR
18811: PPUSH
18812: CALL_OW 38
// if IsLive ( Houten ) then
18816: LD_EXP 25
18820: PPUSH
18821: CALL_OW 300
18825: IFFALSE 18845
// SaveCharacters ( Houten , prefix & Houten ) ;
18827: LD_EXP 25
18831: PPUSH
18832: LD_VAR 0 3
18836: PUSH
18837: LD_STRING Houten
18839: STR
18840: PPUSH
18841: CALL_OW 38
// if IsLive ( Mike ) then
18845: LD_EXP 24
18849: PPUSH
18850: CALL_OW 300
18854: IFFALSE 18874
// SaveCharacters ( Mike , prefix & Mike ) ;
18856: LD_EXP 24
18860: PPUSH
18861: LD_VAR 0 3
18865: PUSH
18866: LD_STRING Mike
18868: STR
18869: PPUSH
18870: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
18874: LD_INT 22
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 21
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 23
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: PUSH
18914: LD_EXP 14
18918: PUSH
18919: LD_EXP 15
18923: PUSH
18924: LD_EXP 16
18928: PUSH
18929: LD_EXP 17
18933: PUSH
18934: LD_EXP 18
18938: PUSH
18939: LD_EXP 19
18943: PUSH
18944: LD_EXP 20
18948: PUSH
18949: LD_EXP 21
18953: PUSH
18954: LD_EXP 22
18958: PUSH
18959: LD_EXP 26
18963: PUSH
18964: LD_EXP 27
18968: PUSH
18969: LD_EXP 25
18973: PUSH
18974: LD_EXP 23
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: DIFF
18994: PPUSH
18995: LD_STRING 08_other_survivors
18997: PPUSH
18998: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19002: LD_INT 15
19004: PPUSH
19005: CALL 7013 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19009: LD_EXP 10
19013: NOT
19014: PPUSH
19015: LD_STRING 08_SikorskiStatus
19017: PPUSH
19018: CALL_OW 39
// YouWin ;
19022: CALL_OW 103
// end ; end_of_file
19026: PPOPN 3
19028: END
// export function SikorskiCounter ; begin
19029: LD_INT 0
19031: PPUSH
// repeat wait ( 0 0$1 ) ;
19032: LD_INT 35
19034: PPUSH
19035: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
19039: LD_ADDR_OWVAR 47
19043: PUSH
19044: LD_STRING #Am08-2
19046: PUSH
19047: LD_EXP 3
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
19056: LD_ADDR_EXP 3
19060: PUSH
19061: LD_EXP 3
19065: PUSH
19066: LD_INT 35
19068: MINUS
19069: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
19070: LD_EXP 3
19074: PUSH
19075: LD_INT 0
19077: EQUAL
19078: IFFALSE 19032
// display_strings := [ ] ;
19080: LD_ADDR_OWVAR 47
19084: PUSH
19085: EMPTY
19086: ST_TO_ADDR
// end ;
19087: LD_VAR 0 1
19091: RET
// export function SikorskiWaitCounter ; begin
19092: LD_INT 0
19094: PPUSH
// repeat wait ( 0 0$1 ) ;
19095: LD_INT 35
19097: PPUSH
19098: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
19102: LD_ADDR_OWVAR 47
19106: PUSH
19107: LD_STRING #Am08-1
19109: PUSH
19110: LD_EXP 4
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
19119: LD_ADDR_EXP 4
19123: PUSH
19124: LD_EXP 4
19128: PUSH
19129: LD_INT 35
19131: MINUS
19132: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
19133: LD_EXP 4
19137: PUSH
19138: LD_INT 0
19140: EQUAL
19141: IFFALSE 19095
// display_strings := [ ] ;
19143: LD_ADDR_OWVAR 47
19147: PUSH
19148: EMPTY
19149: ST_TO_ADDR
// end ; end_of_file
19150: LD_VAR 0 1
19154: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
19155: LD_EXP 3
19159: IFFALSE 19199
19161: GO 19163
19163: DISABLE
// begin enable ;
19164: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
19165: LD_INT 14
19167: PPUSH
19168: CALL_OW 435
19172: PUSH
19173: LD_INT 10
19175: LESS
19176: IFFALSE 19199
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
19178: LD_INT 1
19180: PPUSH
19181: LD_INT 5
19183: PPUSH
19184: CALL_OW 12
19188: PPUSH
19189: LD_INT 14
19191: PPUSH
19192: LD_INT 1
19194: PPUSH
19195: CALL_OW 55
// end ;
19199: END
// every 0 0$55 trigger sikorskiArriveCounter do
19200: LD_EXP 3
19204: IFFALSE 19244
19206: GO 19208
19208: DISABLE
// begin enable ;
19209: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
19210: LD_INT 13
19212: PPUSH
19213: CALL_OW 435
19217: PUSH
19218: LD_INT 10
19220: LESS
19221: IFFALSE 19244
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
19223: LD_INT 1
19225: PPUSH
19226: LD_INT 5
19228: PPUSH
19229: CALL_OW 12
19233: PPUSH
19234: LD_INT 13
19236: PPUSH
19237: LD_INT 1
19239: PPUSH
19240: CALL_OW 55
// end ; end_of_file
19244: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
19245: LD_INT 0
19247: PPUSH
19248: PPUSH
// if not units then
19249: LD_VAR 0 1
19253: NOT
19254: IFFALSE 19258
// exit ;
19256: GO 19383
// result := false ;
19258: LD_ADDR_VAR 0 4
19262: PUSH
19263: LD_INT 0
19265: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
19266: LD_ADDR_VAR 0 5
19270: PUSH
19271: LD_VAR 0 1
19275: PPUSH
19276: LD_INT 26
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PPUSH
19286: CALL_OW 72
19290: ST_TO_ADDR
// if tmp then
19291: LD_VAR 0 5
19295: IFFALSE 19321
// result := Say ( tmp [ 1 ] , menDialog ) ;
19297: LD_ADDR_VAR 0 4
19301: PUSH
19302: LD_VAR 0 5
19306: PUSH
19307: LD_INT 1
19309: ARRAY
19310: PPUSH
19311: LD_VAR 0 2
19315: PPUSH
19316: CALL_OW 88
19320: ST_TO_ADDR
// if not result then
19321: LD_VAR 0 4
19325: NOT
19326: IFFALSE 19383
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
19328: LD_ADDR_VAR 0 5
19332: PUSH
19333: LD_VAR 0 1
19337: PPUSH
19338: LD_INT 26
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PPUSH
19348: CALL_OW 72
19352: ST_TO_ADDR
// if tmp then
19353: LD_VAR 0 5
19357: IFFALSE 19383
// result := Say ( tmp [ 1 ] , womenDialog ) ;
19359: LD_ADDR_VAR 0 4
19363: PUSH
19364: LD_VAR 0 5
19368: PUSH
19369: LD_INT 1
19371: ARRAY
19372: PPUSH
19373: LD_VAR 0 3
19377: PPUSH
19378: CALL_OW 88
19382: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
19383: LD_VAR 0 4
19387: RET
// export globalGameSaveCounter ; every 0 0$1 do
19388: GO 19390
19390: DISABLE
// begin enable ;
19391: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19392: LD_STRING updateTimer(
19394: PUSH
19395: LD_OWVAR 1
19399: STR
19400: PUSH
19401: LD_STRING );
19403: STR
19404: PPUSH
19405: CALL_OW 559
// end ;
19409: END
// every 0 0$1 do
19410: GO 19412
19412: DISABLE
// begin globalGameSaveCounter := 0 ;
19413: LD_ADDR_EXP 37
19417: PUSH
19418: LD_INT 0
19420: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19421: LD_STRING setGameSaveCounter(0)
19423: PPUSH
19424: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19428: LD_STRING initStreamRollete();
19430: PPUSH
19431: CALL_OW 559
// InitStreamMode ;
19435: CALL 20761 0 0
// DefineStreamItems ( false ) ;
19439: LD_INT 0
19441: PPUSH
19442: CALL 21225 0 1
// end ;
19446: END
// export function SOS_MapStart ( ) ; begin
19447: LD_INT 0
19449: PPUSH
// if streamModeActive then
19450: LD_EXP 38
19454: IFFALSE 19463
// DefineStreamItems ( true ) ;
19456: LD_INT 1
19458: PPUSH
19459: CALL 21225 0 1
// UpdateLuaVariables ( ) ;
19463: CALL 19480 0 0
// UpdateFactoryWaypoints ( ) ;
19467: CALL 34086 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19471: CALL 34343 0 0
// end ;
19475: LD_VAR 0 1
19479: RET
// function UpdateLuaVariables ( ) ; begin
19480: LD_INT 0
19482: PPUSH
// if globalGameSaveCounter then
19483: LD_EXP 37
19487: IFFALSE 19521
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19489: LD_ADDR_EXP 37
19493: PUSH
19494: LD_EXP 37
19498: PPUSH
19499: CALL 78300 0 1
19503: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19504: LD_STRING setGameSaveCounter(
19506: PUSH
19507: LD_EXP 37
19511: STR
19512: PUSH
19513: LD_STRING )
19515: STR
19516: PPUSH
19517: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19521: LD_STRING setGameDifficulty(
19523: PUSH
19524: LD_OWVAR 67
19528: STR
19529: PUSH
19530: LD_STRING )
19532: STR
19533: PPUSH
19534: CALL_OW 559
// end ;
19538: LD_VAR 0 1
19542: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19543: LD_INT 0
19545: PPUSH
// if p2 = stream_mode then
19546: LD_VAR 0 2
19550: PUSH
19551: LD_INT 100
19553: EQUAL
19554: IFFALSE 20557
// begin if not StreamModeActive then
19556: LD_EXP 38
19560: NOT
19561: IFFALSE 19571
// StreamModeActive := true ;
19563: LD_ADDR_EXP 38
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 0 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 0
19578: EQUAL
19579: IFFALSE 19585
// InitStreamMode ;
19581: CALL 20761 0 0
// if p3 = 1 then
19585: LD_VAR 0 3
19589: PUSH
19590: LD_INT 1
19592: EQUAL
19593: IFFALSE 19603
// sRocket := true ;
19595: LD_ADDR_EXP 43
19599: PUSH
19600: LD_INT 1
19602: ST_TO_ADDR
// if p3 = 2 then
19603: LD_VAR 0 3
19607: PUSH
19608: LD_INT 2
19610: EQUAL
19611: IFFALSE 19621
// sSpeed := true ;
19613: LD_ADDR_EXP 42
19617: PUSH
19618: LD_INT 1
19620: ST_TO_ADDR
// if p3 = 3 then
19621: LD_VAR 0 3
19625: PUSH
19626: LD_INT 3
19628: EQUAL
19629: IFFALSE 19639
// sEngine := true ;
19631: LD_ADDR_EXP 44
19635: PUSH
19636: LD_INT 1
19638: ST_TO_ADDR
// if p3 = 4 then
19639: LD_VAR 0 3
19643: PUSH
19644: LD_INT 4
19646: EQUAL
19647: IFFALSE 19657
// sSpec := true ;
19649: LD_ADDR_EXP 41
19653: PUSH
19654: LD_INT 1
19656: ST_TO_ADDR
// if p3 = 5 then
19657: LD_VAR 0 3
19661: PUSH
19662: LD_INT 5
19664: EQUAL
19665: IFFALSE 19675
// sLevel := true ;
19667: LD_ADDR_EXP 45
19671: PUSH
19672: LD_INT 1
19674: ST_TO_ADDR
// if p3 = 6 then
19675: LD_VAR 0 3
19679: PUSH
19680: LD_INT 6
19682: EQUAL
19683: IFFALSE 19693
// sArmoury := true ;
19685: LD_ADDR_EXP 46
19689: PUSH
19690: LD_INT 1
19692: ST_TO_ADDR
// if p3 = 7 then
19693: LD_VAR 0 3
19697: PUSH
19698: LD_INT 7
19700: EQUAL
19701: IFFALSE 19711
// sRadar := true ;
19703: LD_ADDR_EXP 47
19707: PUSH
19708: LD_INT 1
19710: ST_TO_ADDR
// if p3 = 8 then
19711: LD_VAR 0 3
19715: PUSH
19716: LD_INT 8
19718: EQUAL
19719: IFFALSE 19729
// sBunker := true ;
19721: LD_ADDR_EXP 48
19725: PUSH
19726: LD_INT 1
19728: ST_TO_ADDR
// if p3 = 9 then
19729: LD_VAR 0 3
19733: PUSH
19734: LD_INT 9
19736: EQUAL
19737: IFFALSE 19747
// sHack := true ;
19739: LD_ADDR_EXP 49
19743: PUSH
19744: LD_INT 1
19746: ST_TO_ADDR
// if p3 = 10 then
19747: LD_VAR 0 3
19751: PUSH
19752: LD_INT 10
19754: EQUAL
19755: IFFALSE 19765
// sFire := true ;
19757: LD_ADDR_EXP 50
19761: PUSH
19762: LD_INT 1
19764: ST_TO_ADDR
// if p3 = 11 then
19765: LD_VAR 0 3
19769: PUSH
19770: LD_INT 11
19772: EQUAL
19773: IFFALSE 19783
// sRefresh := true ;
19775: LD_ADDR_EXP 51
19779: PUSH
19780: LD_INT 1
19782: ST_TO_ADDR
// if p3 = 12 then
19783: LD_VAR 0 3
19787: PUSH
19788: LD_INT 12
19790: EQUAL
19791: IFFALSE 19801
// sExp := true ;
19793: LD_ADDR_EXP 52
19797: PUSH
19798: LD_INT 1
19800: ST_TO_ADDR
// if p3 = 13 then
19801: LD_VAR 0 3
19805: PUSH
19806: LD_INT 13
19808: EQUAL
19809: IFFALSE 19819
// sDepot := true ;
19811: LD_ADDR_EXP 53
19815: PUSH
19816: LD_INT 1
19818: ST_TO_ADDR
// if p3 = 14 then
19819: LD_VAR 0 3
19823: PUSH
19824: LD_INT 14
19826: EQUAL
19827: IFFALSE 19837
// sFlag := true ;
19829: LD_ADDR_EXP 54
19833: PUSH
19834: LD_INT 1
19836: ST_TO_ADDR
// if p3 = 15 then
19837: LD_VAR 0 3
19841: PUSH
19842: LD_INT 15
19844: EQUAL
19845: IFFALSE 19855
// sKamikadze := true ;
19847: LD_ADDR_EXP 62
19851: PUSH
19852: LD_INT 1
19854: ST_TO_ADDR
// if p3 = 16 then
19855: LD_VAR 0 3
19859: PUSH
19860: LD_INT 16
19862: EQUAL
19863: IFFALSE 19873
// sTroll := true ;
19865: LD_ADDR_EXP 63
19869: PUSH
19870: LD_INT 1
19872: ST_TO_ADDR
// if p3 = 17 then
19873: LD_VAR 0 3
19877: PUSH
19878: LD_INT 17
19880: EQUAL
19881: IFFALSE 19891
// sSlow := true ;
19883: LD_ADDR_EXP 64
19887: PUSH
19888: LD_INT 1
19890: ST_TO_ADDR
// if p3 = 18 then
19891: LD_VAR 0 3
19895: PUSH
19896: LD_INT 18
19898: EQUAL
19899: IFFALSE 19909
// sLack := true ;
19901: LD_ADDR_EXP 65
19905: PUSH
19906: LD_INT 1
19908: ST_TO_ADDR
// if p3 = 19 then
19909: LD_VAR 0 3
19913: PUSH
19914: LD_INT 19
19916: EQUAL
19917: IFFALSE 19927
// sTank := true ;
19919: LD_ADDR_EXP 67
19923: PUSH
19924: LD_INT 1
19926: ST_TO_ADDR
// if p3 = 20 then
19927: LD_VAR 0 3
19931: PUSH
19932: LD_INT 20
19934: EQUAL
19935: IFFALSE 19945
// sRemote := true ;
19937: LD_ADDR_EXP 68
19941: PUSH
19942: LD_INT 1
19944: ST_TO_ADDR
// if p3 = 21 then
19945: LD_VAR 0 3
19949: PUSH
19950: LD_INT 21
19952: EQUAL
19953: IFFALSE 19963
// sPowell := true ;
19955: LD_ADDR_EXP 69
19959: PUSH
19960: LD_INT 1
19962: ST_TO_ADDR
// if p3 = 22 then
19963: LD_VAR 0 3
19967: PUSH
19968: LD_INT 22
19970: EQUAL
19971: IFFALSE 19981
// sTeleport := true ;
19973: LD_ADDR_EXP 72
19977: PUSH
19978: LD_INT 1
19980: ST_TO_ADDR
// if p3 = 23 then
19981: LD_VAR 0 3
19985: PUSH
19986: LD_INT 23
19988: EQUAL
19989: IFFALSE 19999
// sOilTower := true ;
19991: LD_ADDR_EXP 74
19995: PUSH
19996: LD_INT 1
19998: ST_TO_ADDR
// if p3 = 24 then
19999: LD_VAR 0 3
20003: PUSH
20004: LD_INT 24
20006: EQUAL
20007: IFFALSE 20017
// sShovel := true ;
20009: LD_ADDR_EXP 75
20013: PUSH
20014: LD_INT 1
20016: ST_TO_ADDR
// if p3 = 25 then
20017: LD_VAR 0 3
20021: PUSH
20022: LD_INT 25
20024: EQUAL
20025: IFFALSE 20035
// sSheik := true ;
20027: LD_ADDR_EXP 76
20031: PUSH
20032: LD_INT 1
20034: ST_TO_ADDR
// if p3 = 26 then
20035: LD_VAR 0 3
20039: PUSH
20040: LD_INT 26
20042: EQUAL
20043: IFFALSE 20053
// sEarthquake := true ;
20045: LD_ADDR_EXP 78
20049: PUSH
20050: LD_INT 1
20052: ST_TO_ADDR
// if p3 = 27 then
20053: LD_VAR 0 3
20057: PUSH
20058: LD_INT 27
20060: EQUAL
20061: IFFALSE 20071
// sAI := true ;
20063: LD_ADDR_EXP 79
20067: PUSH
20068: LD_INT 1
20070: ST_TO_ADDR
// if p3 = 28 then
20071: LD_VAR 0 3
20075: PUSH
20076: LD_INT 28
20078: EQUAL
20079: IFFALSE 20089
// sCargo := true ;
20081: LD_ADDR_EXP 82
20085: PUSH
20086: LD_INT 1
20088: ST_TO_ADDR
// if p3 = 29 then
20089: LD_VAR 0 3
20093: PUSH
20094: LD_INT 29
20096: EQUAL
20097: IFFALSE 20107
// sDLaser := true ;
20099: LD_ADDR_EXP 83
20103: PUSH
20104: LD_INT 1
20106: ST_TO_ADDR
// if p3 = 30 then
20107: LD_VAR 0 3
20111: PUSH
20112: LD_INT 30
20114: EQUAL
20115: IFFALSE 20125
// sExchange := true ;
20117: LD_ADDR_EXP 84
20121: PUSH
20122: LD_INT 1
20124: ST_TO_ADDR
// if p3 = 31 then
20125: LD_VAR 0 3
20129: PUSH
20130: LD_INT 31
20132: EQUAL
20133: IFFALSE 20143
// sFac := true ;
20135: LD_ADDR_EXP 85
20139: PUSH
20140: LD_INT 1
20142: ST_TO_ADDR
// if p3 = 32 then
20143: LD_VAR 0 3
20147: PUSH
20148: LD_INT 32
20150: EQUAL
20151: IFFALSE 20161
// sPower := true ;
20153: LD_ADDR_EXP 86
20157: PUSH
20158: LD_INT 1
20160: ST_TO_ADDR
// if p3 = 33 then
20161: LD_VAR 0 3
20165: PUSH
20166: LD_INT 33
20168: EQUAL
20169: IFFALSE 20179
// sRandom := true ;
20171: LD_ADDR_EXP 87
20175: PUSH
20176: LD_INT 1
20178: ST_TO_ADDR
// if p3 = 34 then
20179: LD_VAR 0 3
20183: PUSH
20184: LD_INT 34
20186: EQUAL
20187: IFFALSE 20197
// sShield := true ;
20189: LD_ADDR_EXP 88
20193: PUSH
20194: LD_INT 1
20196: ST_TO_ADDR
// if p3 = 35 then
20197: LD_VAR 0 3
20201: PUSH
20202: LD_INT 35
20204: EQUAL
20205: IFFALSE 20215
// sTime := true ;
20207: LD_ADDR_EXP 89
20211: PUSH
20212: LD_INT 1
20214: ST_TO_ADDR
// if p3 = 36 then
20215: LD_VAR 0 3
20219: PUSH
20220: LD_INT 36
20222: EQUAL
20223: IFFALSE 20233
// sTools := true ;
20225: LD_ADDR_EXP 90
20229: PUSH
20230: LD_INT 1
20232: ST_TO_ADDR
// if p3 = 101 then
20233: LD_VAR 0 3
20237: PUSH
20238: LD_INT 101
20240: EQUAL
20241: IFFALSE 20251
// sSold := true ;
20243: LD_ADDR_EXP 55
20247: PUSH
20248: LD_INT 1
20250: ST_TO_ADDR
// if p3 = 102 then
20251: LD_VAR 0 3
20255: PUSH
20256: LD_INT 102
20258: EQUAL
20259: IFFALSE 20269
// sDiff := true ;
20261: LD_ADDR_EXP 56
20265: PUSH
20266: LD_INT 1
20268: ST_TO_ADDR
// if p3 = 103 then
20269: LD_VAR 0 3
20273: PUSH
20274: LD_INT 103
20276: EQUAL
20277: IFFALSE 20287
// sFog := true ;
20279: LD_ADDR_EXP 59
20283: PUSH
20284: LD_INT 1
20286: ST_TO_ADDR
// if p3 = 104 then
20287: LD_VAR 0 3
20291: PUSH
20292: LD_INT 104
20294: EQUAL
20295: IFFALSE 20305
// sReset := true ;
20297: LD_ADDR_EXP 60
20301: PUSH
20302: LD_INT 1
20304: ST_TO_ADDR
// if p3 = 105 then
20305: LD_VAR 0 3
20309: PUSH
20310: LD_INT 105
20312: EQUAL
20313: IFFALSE 20323
// sSun := true ;
20315: LD_ADDR_EXP 61
20319: PUSH
20320: LD_INT 1
20322: ST_TO_ADDR
// if p3 = 106 then
20323: LD_VAR 0 3
20327: PUSH
20328: LD_INT 106
20330: EQUAL
20331: IFFALSE 20341
// sTiger := true ;
20333: LD_ADDR_EXP 57
20337: PUSH
20338: LD_INT 1
20340: ST_TO_ADDR
// if p3 = 107 then
20341: LD_VAR 0 3
20345: PUSH
20346: LD_INT 107
20348: EQUAL
20349: IFFALSE 20359
// sBomb := true ;
20351: LD_ADDR_EXP 58
20355: PUSH
20356: LD_INT 1
20358: ST_TO_ADDR
// if p3 = 108 then
20359: LD_VAR 0 3
20363: PUSH
20364: LD_INT 108
20366: EQUAL
20367: IFFALSE 20377
// sWound := true ;
20369: LD_ADDR_EXP 66
20373: PUSH
20374: LD_INT 1
20376: ST_TO_ADDR
// if p3 = 109 then
20377: LD_VAR 0 3
20381: PUSH
20382: LD_INT 109
20384: EQUAL
20385: IFFALSE 20395
// sBetray := true ;
20387: LD_ADDR_EXP 70
20391: PUSH
20392: LD_INT 1
20394: ST_TO_ADDR
// if p3 = 110 then
20395: LD_VAR 0 3
20399: PUSH
20400: LD_INT 110
20402: EQUAL
20403: IFFALSE 20413
// sContamin := true ;
20405: LD_ADDR_EXP 71
20409: PUSH
20410: LD_INT 1
20412: ST_TO_ADDR
// if p3 = 111 then
20413: LD_VAR 0 3
20417: PUSH
20418: LD_INT 111
20420: EQUAL
20421: IFFALSE 20431
// sOil := true ;
20423: LD_ADDR_EXP 73
20427: PUSH
20428: LD_INT 1
20430: ST_TO_ADDR
// if p3 = 112 then
20431: LD_VAR 0 3
20435: PUSH
20436: LD_INT 112
20438: EQUAL
20439: IFFALSE 20449
// sStu := true ;
20441: LD_ADDR_EXP 77
20445: PUSH
20446: LD_INT 1
20448: ST_TO_ADDR
// if p3 = 113 then
20449: LD_VAR 0 3
20453: PUSH
20454: LD_INT 113
20456: EQUAL
20457: IFFALSE 20467
// sBazooka := true ;
20459: LD_ADDR_EXP 80
20463: PUSH
20464: LD_INT 1
20466: ST_TO_ADDR
// if p3 = 114 then
20467: LD_VAR 0 3
20471: PUSH
20472: LD_INT 114
20474: EQUAL
20475: IFFALSE 20485
// sMortar := true ;
20477: LD_ADDR_EXP 81
20481: PUSH
20482: LD_INT 1
20484: ST_TO_ADDR
// if p3 = 115 then
20485: LD_VAR 0 3
20489: PUSH
20490: LD_INT 115
20492: EQUAL
20493: IFFALSE 20503
// sRanger := true ;
20495: LD_ADDR_EXP 91
20499: PUSH
20500: LD_INT 1
20502: ST_TO_ADDR
// if p3 = 116 then
20503: LD_VAR 0 3
20507: PUSH
20508: LD_INT 116
20510: EQUAL
20511: IFFALSE 20521
// sComputer := true ;
20513: LD_ADDR_EXP 92
20517: PUSH
20518: LD_INT 1
20520: ST_TO_ADDR
// if p3 = 117 then
20521: LD_VAR 0 3
20525: PUSH
20526: LD_INT 117
20528: EQUAL
20529: IFFALSE 20539
// s30 := true ;
20531: LD_ADDR_EXP 93
20535: PUSH
20536: LD_INT 1
20538: ST_TO_ADDR
// if p3 = 118 then
20539: LD_VAR 0 3
20543: PUSH
20544: LD_INT 118
20546: EQUAL
20547: IFFALSE 20557
// s60 := true ;
20549: LD_ADDR_EXP 94
20553: PUSH
20554: LD_INT 1
20556: ST_TO_ADDR
// end ; if p2 = hack_mode then
20557: LD_VAR 0 2
20561: PUSH
20562: LD_INT 101
20564: EQUAL
20565: IFFALSE 20693
// begin case p3 of 1 :
20567: LD_VAR 0 3
20571: PUSH
20572: LD_INT 1
20574: DOUBLE
20575: EQUAL
20576: IFTRUE 20580
20578: GO 20587
20580: POP
// hHackUnlimitedResources ; 2 :
20581: CALL 32832 0 0
20585: GO 20693
20587: LD_INT 2
20589: DOUBLE
20590: EQUAL
20591: IFTRUE 20595
20593: GO 20602
20595: POP
// hHackSetLevel10 ; 3 :
20596: CALL 32965 0 0
20600: GO 20693
20602: LD_INT 3
20604: DOUBLE
20605: EQUAL
20606: IFTRUE 20610
20608: GO 20617
20610: POP
// hHackSetLevel10YourUnits ; 4 :
20611: CALL 33050 0 0
20615: GO 20693
20617: LD_INT 4
20619: DOUBLE
20620: EQUAL
20621: IFTRUE 20625
20623: GO 20632
20625: POP
// hHackInvincible ; 5 :
20626: CALL 33498 0 0
20630: GO 20693
20632: LD_INT 5
20634: DOUBLE
20635: EQUAL
20636: IFTRUE 20640
20638: GO 20647
20640: POP
// hHackInvisible ; 6 :
20641: CALL 33609 0 0
20645: GO 20693
20647: LD_INT 6
20649: DOUBLE
20650: EQUAL
20651: IFTRUE 20655
20653: GO 20662
20655: POP
// hHackChangeYourSide ; 7 :
20656: CALL 33666 0 0
20660: GO 20693
20662: LD_INT 7
20664: DOUBLE
20665: EQUAL
20666: IFTRUE 20670
20668: GO 20677
20670: POP
// hHackChangeUnitSide ; 8 :
20671: CALL 33708 0 0
20675: GO 20693
20677: LD_INT 8
20679: DOUBLE
20680: EQUAL
20681: IFTRUE 20685
20683: GO 20692
20685: POP
// hHackFog ; end ;
20686: CALL 33809 0 0
20690: GO 20693
20692: POP
// end ; if p2 = game_save_mode then
20693: LD_VAR 0 2
20697: PUSH
20698: LD_INT 102
20700: EQUAL
20701: IFFALSE 20756
// begin if p3 = 1 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 1
20710: EQUAL
20711: IFFALSE 20723
// globalGameSaveCounter := p4 ;
20713: LD_ADDR_EXP 37
20717: PUSH
20718: LD_VAR 0 4
20722: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20723: LD_VAR 0 3
20727: PUSH
20728: LD_INT 2
20730: EQUAL
20731: PUSH
20732: LD_EXP 37
20736: AND
20737: IFFALSE 20756
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20739: LD_STRING setGameSaveCounter(
20741: PUSH
20742: LD_EXP 37
20746: STR
20747: PUSH
20748: LD_STRING )
20750: STR
20751: PPUSH
20752: CALL_OW 559
// end ; end ;
20756: LD_VAR 0 7
20760: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20761: LD_INT 0
20763: PPUSH
// streamModeActive := false ;
20764: LD_ADDR_EXP 38
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// normalCounter := 36 ;
20772: LD_ADDR_EXP 39
20776: PUSH
20777: LD_INT 36
20779: ST_TO_ADDR
// hardcoreCounter := 18 ;
20780: LD_ADDR_EXP 40
20784: PUSH
20785: LD_INT 18
20787: ST_TO_ADDR
// sRocket := false ;
20788: LD_ADDR_EXP 43
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// sSpeed := false ;
20796: LD_ADDR_EXP 42
20800: PUSH
20801: LD_INT 0
20803: ST_TO_ADDR
// sEngine := false ;
20804: LD_ADDR_EXP 44
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// sSpec := false ;
20812: LD_ADDR_EXP 41
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// sLevel := false ;
20820: LD_ADDR_EXP 45
20824: PUSH
20825: LD_INT 0
20827: ST_TO_ADDR
// sArmoury := false ;
20828: LD_ADDR_EXP 46
20832: PUSH
20833: LD_INT 0
20835: ST_TO_ADDR
// sRadar := false ;
20836: LD_ADDR_EXP 47
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
// sBunker := false ;
20844: LD_ADDR_EXP 48
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// sHack := false ;
20852: LD_ADDR_EXP 49
20856: PUSH
20857: LD_INT 0
20859: ST_TO_ADDR
// sFire := false ;
20860: LD_ADDR_EXP 50
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// sRefresh := false ;
20868: LD_ADDR_EXP 51
20872: PUSH
20873: LD_INT 0
20875: ST_TO_ADDR
// sExp := false ;
20876: LD_ADDR_EXP 52
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// sDepot := false ;
20884: LD_ADDR_EXP 53
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// sFlag := false ;
20892: LD_ADDR_EXP 54
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// sKamikadze := false ;
20900: LD_ADDR_EXP 62
20904: PUSH
20905: LD_INT 0
20907: ST_TO_ADDR
// sTroll := false ;
20908: LD_ADDR_EXP 63
20912: PUSH
20913: LD_INT 0
20915: ST_TO_ADDR
// sSlow := false ;
20916: LD_ADDR_EXP 64
20920: PUSH
20921: LD_INT 0
20923: ST_TO_ADDR
// sLack := false ;
20924: LD_ADDR_EXP 65
20928: PUSH
20929: LD_INT 0
20931: ST_TO_ADDR
// sTank := false ;
20932: LD_ADDR_EXP 67
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// sRemote := false ;
20940: LD_ADDR_EXP 68
20944: PUSH
20945: LD_INT 0
20947: ST_TO_ADDR
// sPowell := false ;
20948: LD_ADDR_EXP 69
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// sTeleport := false ;
20956: LD_ADDR_EXP 72
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// sOilTower := false ;
20964: LD_ADDR_EXP 74
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// sShovel := false ;
20972: LD_ADDR_EXP 75
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
// sSheik := false ;
20980: LD_ADDR_EXP 76
20984: PUSH
20985: LD_INT 0
20987: ST_TO_ADDR
// sEarthquake := false ;
20988: LD_ADDR_EXP 78
20992: PUSH
20993: LD_INT 0
20995: ST_TO_ADDR
// sAI := false ;
20996: LD_ADDR_EXP 79
21000: PUSH
21001: LD_INT 0
21003: ST_TO_ADDR
// sCargo := false ;
21004: LD_ADDR_EXP 82
21008: PUSH
21009: LD_INT 0
21011: ST_TO_ADDR
// sDLaser := false ;
21012: LD_ADDR_EXP 83
21016: PUSH
21017: LD_INT 0
21019: ST_TO_ADDR
// sExchange := false ;
21020: LD_ADDR_EXP 84
21024: PUSH
21025: LD_INT 0
21027: ST_TO_ADDR
// sFac := false ;
21028: LD_ADDR_EXP 85
21032: PUSH
21033: LD_INT 0
21035: ST_TO_ADDR
// sPower := false ;
21036: LD_ADDR_EXP 86
21040: PUSH
21041: LD_INT 0
21043: ST_TO_ADDR
// sRandom := false ;
21044: LD_ADDR_EXP 87
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// sShield := false ;
21052: LD_ADDR_EXP 88
21056: PUSH
21057: LD_INT 0
21059: ST_TO_ADDR
// sTime := false ;
21060: LD_ADDR_EXP 89
21064: PUSH
21065: LD_INT 0
21067: ST_TO_ADDR
// sTools := false ;
21068: LD_ADDR_EXP 90
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
// sSold := false ;
21076: LD_ADDR_EXP 55
21080: PUSH
21081: LD_INT 0
21083: ST_TO_ADDR
// sDiff := false ;
21084: LD_ADDR_EXP 56
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// sFog := false ;
21092: LD_ADDR_EXP 59
21096: PUSH
21097: LD_INT 0
21099: ST_TO_ADDR
// sReset := false ;
21100: LD_ADDR_EXP 60
21104: PUSH
21105: LD_INT 0
21107: ST_TO_ADDR
// sSun := false ;
21108: LD_ADDR_EXP 61
21112: PUSH
21113: LD_INT 0
21115: ST_TO_ADDR
// sTiger := false ;
21116: LD_ADDR_EXP 57
21120: PUSH
21121: LD_INT 0
21123: ST_TO_ADDR
// sBomb := false ;
21124: LD_ADDR_EXP 58
21128: PUSH
21129: LD_INT 0
21131: ST_TO_ADDR
// sWound := false ;
21132: LD_ADDR_EXP 66
21136: PUSH
21137: LD_INT 0
21139: ST_TO_ADDR
// sBetray := false ;
21140: LD_ADDR_EXP 70
21144: PUSH
21145: LD_INT 0
21147: ST_TO_ADDR
// sContamin := false ;
21148: LD_ADDR_EXP 71
21152: PUSH
21153: LD_INT 0
21155: ST_TO_ADDR
// sOil := false ;
21156: LD_ADDR_EXP 73
21160: PUSH
21161: LD_INT 0
21163: ST_TO_ADDR
// sStu := false ;
21164: LD_ADDR_EXP 77
21168: PUSH
21169: LD_INT 0
21171: ST_TO_ADDR
// sBazooka := false ;
21172: LD_ADDR_EXP 80
21176: PUSH
21177: LD_INT 0
21179: ST_TO_ADDR
// sMortar := false ;
21180: LD_ADDR_EXP 81
21184: PUSH
21185: LD_INT 0
21187: ST_TO_ADDR
// sRanger := false ;
21188: LD_ADDR_EXP 91
21192: PUSH
21193: LD_INT 0
21195: ST_TO_ADDR
// sComputer := false ;
21196: LD_ADDR_EXP 92
21200: PUSH
21201: LD_INT 0
21203: ST_TO_ADDR
// s30 := false ;
21204: LD_ADDR_EXP 93
21208: PUSH
21209: LD_INT 0
21211: ST_TO_ADDR
// s60 := false ;
21212: LD_ADDR_EXP 94
21216: PUSH
21217: LD_INT 0
21219: ST_TO_ADDR
// end ;
21220: LD_VAR 0 1
21224: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21225: LD_INT 0
21227: PPUSH
21228: PPUSH
21229: PPUSH
21230: PPUSH
21231: PPUSH
21232: PPUSH
21233: PPUSH
// result := [ ] ;
21234: LD_ADDR_VAR 0 2
21238: PUSH
21239: EMPTY
21240: ST_TO_ADDR
// if campaign_id = 1 then
21241: LD_OWVAR 69
21245: PUSH
21246: LD_INT 1
21248: EQUAL
21249: IFFALSE 24415
// begin case mission_number of 1 :
21251: LD_OWVAR 70
21255: PUSH
21256: LD_INT 1
21258: DOUBLE
21259: EQUAL
21260: IFTRUE 21264
21262: GO 21340
21264: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21265: LD_ADDR_VAR 0 2
21269: PUSH
21270: LD_INT 2
21272: PUSH
21273: LD_INT 4
21275: PUSH
21276: LD_INT 11
21278: PUSH
21279: LD_INT 12
21281: PUSH
21282: LD_INT 15
21284: PUSH
21285: LD_INT 16
21287: PUSH
21288: LD_INT 22
21290: PUSH
21291: LD_INT 23
21293: PUSH
21294: LD_INT 26
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 101
21310: PUSH
21311: LD_INT 102
21313: PUSH
21314: LD_INT 106
21316: PUSH
21317: LD_INT 116
21319: PUSH
21320: LD_INT 117
21322: PUSH
21323: LD_INT 118
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: ST_TO_ADDR
21338: GO 24413
21340: LD_INT 2
21342: DOUBLE
21343: EQUAL
21344: IFTRUE 21348
21346: GO 21432
21348: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21349: LD_ADDR_VAR 0 2
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: LD_INT 4
21359: PUSH
21360: LD_INT 11
21362: PUSH
21363: LD_INT 12
21365: PUSH
21366: LD_INT 15
21368: PUSH
21369: LD_INT 16
21371: PUSH
21372: LD_INT 22
21374: PUSH
21375: LD_INT 23
21377: PUSH
21378: LD_INT 26
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 101
21394: PUSH
21395: LD_INT 102
21397: PUSH
21398: LD_INT 105
21400: PUSH
21401: LD_INT 106
21403: PUSH
21404: LD_INT 108
21406: PUSH
21407: LD_INT 116
21409: PUSH
21410: LD_INT 117
21412: PUSH
21413: LD_INT 118
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: ST_TO_ADDR
21430: GO 24413
21432: LD_INT 3
21434: DOUBLE
21435: EQUAL
21436: IFTRUE 21440
21438: GO 21528
21440: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21441: LD_ADDR_VAR 0 2
21445: PUSH
21446: LD_INT 2
21448: PUSH
21449: LD_INT 4
21451: PUSH
21452: LD_INT 5
21454: PUSH
21455: LD_INT 11
21457: PUSH
21458: LD_INT 12
21460: PUSH
21461: LD_INT 15
21463: PUSH
21464: LD_INT 16
21466: PUSH
21467: LD_INT 22
21469: PUSH
21470: LD_INT 26
21472: PUSH
21473: LD_INT 36
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 101
21490: PUSH
21491: LD_INT 102
21493: PUSH
21494: LD_INT 105
21496: PUSH
21497: LD_INT 106
21499: PUSH
21500: LD_INT 108
21502: PUSH
21503: LD_INT 116
21505: PUSH
21506: LD_INT 117
21508: PUSH
21509: LD_INT 118
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: ST_TO_ADDR
21526: GO 24413
21528: LD_INT 4
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21632
21536: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21537: LD_ADDR_VAR 0 2
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 4
21547: PUSH
21548: LD_INT 5
21550: PUSH
21551: LD_INT 8
21553: PUSH
21554: LD_INT 11
21556: PUSH
21557: LD_INT 12
21559: PUSH
21560: LD_INT 15
21562: PUSH
21563: LD_INT 16
21565: PUSH
21566: LD_INT 22
21568: PUSH
21569: LD_INT 23
21571: PUSH
21572: LD_INT 26
21574: PUSH
21575: LD_INT 36
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 101
21594: PUSH
21595: LD_INT 102
21597: PUSH
21598: LD_INT 105
21600: PUSH
21601: LD_INT 106
21603: PUSH
21604: LD_INT 108
21606: PUSH
21607: LD_INT 116
21609: PUSH
21610: LD_INT 117
21612: PUSH
21613: LD_INT 118
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: ST_TO_ADDR
21630: GO 24413
21632: LD_INT 5
21634: DOUBLE
21635: EQUAL
21636: IFTRUE 21640
21638: GO 21752
21640: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21641: LD_ADDR_VAR 0 2
21645: PUSH
21646: LD_INT 2
21648: PUSH
21649: LD_INT 4
21651: PUSH
21652: LD_INT 5
21654: PUSH
21655: LD_INT 6
21657: PUSH
21658: LD_INT 8
21660: PUSH
21661: LD_INT 11
21663: PUSH
21664: LD_INT 12
21666: PUSH
21667: LD_INT 15
21669: PUSH
21670: LD_INT 16
21672: PUSH
21673: LD_INT 22
21675: PUSH
21676: LD_INT 23
21678: PUSH
21679: LD_INT 25
21681: PUSH
21682: LD_INT 26
21684: PUSH
21685: LD_INT 36
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 101
21706: PUSH
21707: LD_INT 102
21709: PUSH
21710: LD_INT 105
21712: PUSH
21713: LD_INT 106
21715: PUSH
21716: LD_INT 108
21718: PUSH
21719: LD_INT 109
21721: PUSH
21722: LD_INT 112
21724: PUSH
21725: LD_INT 116
21727: PUSH
21728: LD_INT 117
21730: PUSH
21731: LD_INT 118
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: ST_TO_ADDR
21750: GO 24413
21752: LD_INT 6
21754: DOUBLE
21755: EQUAL
21756: IFTRUE 21760
21758: GO 21892
21760: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21761: LD_ADDR_VAR 0 2
21765: PUSH
21766: LD_INT 2
21768: PUSH
21769: LD_INT 4
21771: PUSH
21772: LD_INT 5
21774: PUSH
21775: LD_INT 6
21777: PUSH
21778: LD_INT 8
21780: PUSH
21781: LD_INT 11
21783: PUSH
21784: LD_INT 12
21786: PUSH
21787: LD_INT 15
21789: PUSH
21790: LD_INT 16
21792: PUSH
21793: LD_INT 20
21795: PUSH
21796: LD_INT 21
21798: PUSH
21799: LD_INT 22
21801: PUSH
21802: LD_INT 23
21804: PUSH
21805: LD_INT 25
21807: PUSH
21808: LD_INT 26
21810: PUSH
21811: LD_INT 30
21813: PUSH
21814: LD_INT 31
21816: PUSH
21817: LD_INT 32
21819: PUSH
21820: LD_INT 36
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 101
21846: PUSH
21847: LD_INT 102
21849: PUSH
21850: LD_INT 105
21852: PUSH
21853: LD_INT 106
21855: PUSH
21856: LD_INT 108
21858: PUSH
21859: LD_INT 109
21861: PUSH
21862: LD_INT 112
21864: PUSH
21865: LD_INT 116
21867: PUSH
21868: LD_INT 117
21870: PUSH
21871: LD_INT 118
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: ST_TO_ADDR
21890: GO 24413
21892: LD_INT 7
21894: DOUBLE
21895: EQUAL
21896: IFTRUE 21900
21898: GO 22012
21900: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21901: LD_ADDR_VAR 0 2
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: LD_INT 4
21911: PUSH
21912: LD_INT 5
21914: PUSH
21915: LD_INT 7
21917: PUSH
21918: LD_INT 11
21920: PUSH
21921: LD_INT 12
21923: PUSH
21924: LD_INT 15
21926: PUSH
21927: LD_INT 16
21929: PUSH
21930: LD_INT 20
21932: PUSH
21933: LD_INT 21
21935: PUSH
21936: LD_INT 22
21938: PUSH
21939: LD_INT 23
21941: PUSH
21942: LD_INT 25
21944: PUSH
21945: LD_INT 26
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 101
21966: PUSH
21967: LD_INT 102
21969: PUSH
21970: LD_INT 103
21972: PUSH
21973: LD_INT 105
21975: PUSH
21976: LD_INT 106
21978: PUSH
21979: LD_INT 108
21981: PUSH
21982: LD_INT 112
21984: PUSH
21985: LD_INT 116
21987: PUSH
21988: LD_INT 117
21990: PUSH
21991: LD_INT 118
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: ST_TO_ADDR
22010: GO 24413
22012: LD_INT 8
22014: DOUBLE
22015: EQUAL
22016: IFTRUE 22020
22018: GO 22160
22020: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22021: LD_ADDR_VAR 0 2
22025: PUSH
22026: LD_INT 2
22028: PUSH
22029: LD_INT 4
22031: PUSH
22032: LD_INT 5
22034: PUSH
22035: LD_INT 6
22037: PUSH
22038: LD_INT 7
22040: PUSH
22041: LD_INT 8
22043: PUSH
22044: LD_INT 11
22046: PUSH
22047: LD_INT 12
22049: PUSH
22050: LD_INT 15
22052: PUSH
22053: LD_INT 16
22055: PUSH
22056: LD_INT 20
22058: PUSH
22059: LD_INT 21
22061: PUSH
22062: LD_INT 22
22064: PUSH
22065: LD_INT 23
22067: PUSH
22068: LD_INT 25
22070: PUSH
22071: LD_INT 26
22073: PUSH
22074: LD_INT 30
22076: PUSH
22077: LD_INT 31
22079: PUSH
22080: LD_INT 32
22082: PUSH
22083: LD_INT 36
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 101
22110: PUSH
22111: LD_INT 102
22113: PUSH
22114: LD_INT 103
22116: PUSH
22117: LD_INT 105
22119: PUSH
22120: LD_INT 106
22122: PUSH
22123: LD_INT 108
22125: PUSH
22126: LD_INT 109
22128: PUSH
22129: LD_INT 112
22131: PUSH
22132: LD_INT 116
22134: PUSH
22135: LD_INT 117
22137: PUSH
22138: LD_INT 118
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: ST_TO_ADDR
22158: GO 24413
22160: LD_INT 9
22162: DOUBLE
22163: EQUAL
22164: IFTRUE 22168
22166: GO 22316
22168: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22169: LD_ADDR_VAR 0 2
22173: PUSH
22174: LD_INT 2
22176: PUSH
22177: LD_INT 4
22179: PUSH
22180: LD_INT 5
22182: PUSH
22183: LD_INT 6
22185: PUSH
22186: LD_INT 7
22188: PUSH
22189: LD_INT 8
22191: PUSH
22192: LD_INT 11
22194: PUSH
22195: LD_INT 12
22197: PUSH
22198: LD_INT 15
22200: PUSH
22201: LD_INT 16
22203: PUSH
22204: LD_INT 20
22206: PUSH
22207: LD_INT 21
22209: PUSH
22210: LD_INT 22
22212: PUSH
22213: LD_INT 23
22215: PUSH
22216: LD_INT 25
22218: PUSH
22219: LD_INT 26
22221: PUSH
22222: LD_INT 28
22224: PUSH
22225: LD_INT 30
22227: PUSH
22228: LD_INT 31
22230: PUSH
22231: LD_INT 32
22233: PUSH
22234: LD_INT 36
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 101
22262: PUSH
22263: LD_INT 102
22265: PUSH
22266: LD_INT 103
22268: PUSH
22269: LD_INT 105
22271: PUSH
22272: LD_INT 106
22274: PUSH
22275: LD_INT 108
22277: PUSH
22278: LD_INT 109
22280: PUSH
22281: LD_INT 112
22283: PUSH
22284: LD_INT 114
22286: PUSH
22287: LD_INT 116
22289: PUSH
22290: LD_INT 117
22292: PUSH
22293: LD_INT 118
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: ST_TO_ADDR
22314: GO 24413
22316: LD_INT 10
22318: DOUBLE
22319: EQUAL
22320: IFTRUE 22324
22322: GO 22520
22324: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22325: LD_ADDR_VAR 0 2
22329: PUSH
22330: LD_INT 2
22332: PUSH
22333: LD_INT 4
22335: PUSH
22336: LD_INT 5
22338: PUSH
22339: LD_INT 6
22341: PUSH
22342: LD_INT 7
22344: PUSH
22345: LD_INT 8
22347: PUSH
22348: LD_INT 9
22350: PUSH
22351: LD_INT 10
22353: PUSH
22354: LD_INT 11
22356: PUSH
22357: LD_INT 12
22359: PUSH
22360: LD_INT 13
22362: PUSH
22363: LD_INT 14
22365: PUSH
22366: LD_INT 15
22368: PUSH
22369: LD_INT 16
22371: PUSH
22372: LD_INT 17
22374: PUSH
22375: LD_INT 18
22377: PUSH
22378: LD_INT 19
22380: PUSH
22381: LD_INT 20
22383: PUSH
22384: LD_INT 21
22386: PUSH
22387: LD_INT 22
22389: PUSH
22390: LD_INT 23
22392: PUSH
22393: LD_INT 24
22395: PUSH
22396: LD_INT 25
22398: PUSH
22399: LD_INT 26
22401: PUSH
22402: LD_INT 28
22404: PUSH
22405: LD_INT 30
22407: PUSH
22408: LD_INT 31
22410: PUSH
22411: LD_INT 32
22413: PUSH
22414: LD_INT 36
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 101
22450: PUSH
22451: LD_INT 102
22453: PUSH
22454: LD_INT 103
22456: PUSH
22457: LD_INT 104
22459: PUSH
22460: LD_INT 105
22462: PUSH
22463: LD_INT 106
22465: PUSH
22466: LD_INT 107
22468: PUSH
22469: LD_INT 108
22471: PUSH
22472: LD_INT 109
22474: PUSH
22475: LD_INT 110
22477: PUSH
22478: LD_INT 111
22480: PUSH
22481: LD_INT 112
22483: PUSH
22484: LD_INT 114
22486: PUSH
22487: LD_INT 116
22489: PUSH
22490: LD_INT 117
22492: PUSH
22493: LD_INT 118
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: ST_TO_ADDR
22518: GO 24413
22520: LD_INT 11
22522: DOUBLE
22523: EQUAL
22524: IFTRUE 22528
22526: GO 22732
22528: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22529: LD_ADDR_VAR 0 2
22533: PUSH
22534: LD_INT 2
22536: PUSH
22537: LD_INT 3
22539: PUSH
22540: LD_INT 4
22542: PUSH
22543: LD_INT 5
22545: PUSH
22546: LD_INT 6
22548: PUSH
22549: LD_INT 7
22551: PUSH
22552: LD_INT 8
22554: PUSH
22555: LD_INT 9
22557: PUSH
22558: LD_INT 10
22560: PUSH
22561: LD_INT 11
22563: PUSH
22564: LD_INT 12
22566: PUSH
22567: LD_INT 13
22569: PUSH
22570: LD_INT 14
22572: PUSH
22573: LD_INT 15
22575: PUSH
22576: LD_INT 16
22578: PUSH
22579: LD_INT 17
22581: PUSH
22582: LD_INT 18
22584: PUSH
22585: LD_INT 19
22587: PUSH
22588: LD_INT 20
22590: PUSH
22591: LD_INT 21
22593: PUSH
22594: LD_INT 22
22596: PUSH
22597: LD_INT 23
22599: PUSH
22600: LD_INT 24
22602: PUSH
22603: LD_INT 25
22605: PUSH
22606: LD_INT 26
22608: PUSH
22609: LD_INT 28
22611: PUSH
22612: LD_INT 30
22614: PUSH
22615: LD_INT 31
22617: PUSH
22618: LD_INT 32
22620: PUSH
22621: LD_INT 34
22623: PUSH
22624: LD_INT 36
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 101
22662: PUSH
22663: LD_INT 102
22665: PUSH
22666: LD_INT 103
22668: PUSH
22669: LD_INT 104
22671: PUSH
22672: LD_INT 105
22674: PUSH
22675: LD_INT 106
22677: PUSH
22678: LD_INT 107
22680: PUSH
22681: LD_INT 108
22683: PUSH
22684: LD_INT 109
22686: PUSH
22687: LD_INT 110
22689: PUSH
22690: LD_INT 111
22692: PUSH
22693: LD_INT 112
22695: PUSH
22696: LD_INT 114
22698: PUSH
22699: LD_INT 116
22701: PUSH
22702: LD_INT 117
22704: PUSH
22705: LD_INT 118
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: ST_TO_ADDR
22730: GO 24413
22732: LD_INT 12
22734: DOUBLE
22735: EQUAL
22736: IFTRUE 22740
22738: GO 22960
22740: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22741: LD_ADDR_VAR 0 2
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: LD_INT 2
22751: PUSH
22752: LD_INT 3
22754: PUSH
22755: LD_INT 4
22757: PUSH
22758: LD_INT 5
22760: PUSH
22761: LD_INT 6
22763: PUSH
22764: LD_INT 7
22766: PUSH
22767: LD_INT 8
22769: PUSH
22770: LD_INT 9
22772: PUSH
22773: LD_INT 10
22775: PUSH
22776: LD_INT 11
22778: PUSH
22779: LD_INT 12
22781: PUSH
22782: LD_INT 13
22784: PUSH
22785: LD_INT 14
22787: PUSH
22788: LD_INT 15
22790: PUSH
22791: LD_INT 16
22793: PUSH
22794: LD_INT 17
22796: PUSH
22797: LD_INT 18
22799: PUSH
22800: LD_INT 19
22802: PUSH
22803: LD_INT 20
22805: PUSH
22806: LD_INT 21
22808: PUSH
22809: LD_INT 22
22811: PUSH
22812: LD_INT 23
22814: PUSH
22815: LD_INT 24
22817: PUSH
22818: LD_INT 25
22820: PUSH
22821: LD_INT 26
22823: PUSH
22824: LD_INT 27
22826: PUSH
22827: LD_INT 28
22829: PUSH
22830: LD_INT 30
22832: PUSH
22833: LD_INT 31
22835: PUSH
22836: LD_INT 32
22838: PUSH
22839: LD_INT 33
22841: PUSH
22842: LD_INT 34
22844: PUSH
22845: LD_INT 36
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 101
22886: PUSH
22887: LD_INT 102
22889: PUSH
22890: LD_INT 103
22892: PUSH
22893: LD_INT 104
22895: PUSH
22896: LD_INT 105
22898: PUSH
22899: LD_INT 106
22901: PUSH
22902: LD_INT 107
22904: PUSH
22905: LD_INT 108
22907: PUSH
22908: LD_INT 109
22910: PUSH
22911: LD_INT 110
22913: PUSH
22914: LD_INT 111
22916: PUSH
22917: LD_INT 112
22919: PUSH
22920: LD_INT 113
22922: PUSH
22923: LD_INT 114
22925: PUSH
22926: LD_INT 116
22928: PUSH
22929: LD_INT 117
22931: PUSH
22932: LD_INT 118
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: ST_TO_ADDR
22958: GO 24413
22960: LD_INT 13
22962: DOUBLE
22963: EQUAL
22964: IFTRUE 22968
22966: GO 23176
22968: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22969: LD_ADDR_VAR 0 2
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: LD_INT 2
22979: PUSH
22980: LD_INT 3
22982: PUSH
22983: LD_INT 4
22985: PUSH
22986: LD_INT 5
22988: PUSH
22989: LD_INT 8
22991: PUSH
22992: LD_INT 9
22994: PUSH
22995: LD_INT 10
22997: PUSH
22998: LD_INT 11
23000: PUSH
23001: LD_INT 12
23003: PUSH
23004: LD_INT 14
23006: PUSH
23007: LD_INT 15
23009: PUSH
23010: LD_INT 16
23012: PUSH
23013: LD_INT 17
23015: PUSH
23016: LD_INT 18
23018: PUSH
23019: LD_INT 19
23021: PUSH
23022: LD_INT 20
23024: PUSH
23025: LD_INT 21
23027: PUSH
23028: LD_INT 22
23030: PUSH
23031: LD_INT 23
23033: PUSH
23034: LD_INT 24
23036: PUSH
23037: LD_INT 25
23039: PUSH
23040: LD_INT 26
23042: PUSH
23043: LD_INT 27
23045: PUSH
23046: LD_INT 28
23048: PUSH
23049: LD_INT 30
23051: PUSH
23052: LD_INT 31
23054: PUSH
23055: LD_INT 32
23057: PUSH
23058: LD_INT 33
23060: PUSH
23061: LD_INT 34
23063: PUSH
23064: LD_INT 36
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 101
23102: PUSH
23103: LD_INT 102
23105: PUSH
23106: LD_INT 103
23108: PUSH
23109: LD_INT 104
23111: PUSH
23112: LD_INT 105
23114: PUSH
23115: LD_INT 106
23117: PUSH
23118: LD_INT 107
23120: PUSH
23121: LD_INT 108
23123: PUSH
23124: LD_INT 109
23126: PUSH
23127: LD_INT 110
23129: PUSH
23130: LD_INT 111
23132: PUSH
23133: LD_INT 112
23135: PUSH
23136: LD_INT 113
23138: PUSH
23139: LD_INT 114
23141: PUSH
23142: LD_INT 116
23144: PUSH
23145: LD_INT 117
23147: PUSH
23148: LD_INT 118
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: ST_TO_ADDR
23174: GO 24413
23176: LD_INT 14
23178: DOUBLE
23179: EQUAL
23180: IFTRUE 23184
23182: GO 23408
23184: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23185: LD_ADDR_VAR 0 2
23189: PUSH
23190: LD_INT 1
23192: PUSH
23193: LD_INT 2
23195: PUSH
23196: LD_INT 3
23198: PUSH
23199: LD_INT 4
23201: PUSH
23202: LD_INT 5
23204: PUSH
23205: LD_INT 6
23207: PUSH
23208: LD_INT 7
23210: PUSH
23211: LD_INT 8
23213: PUSH
23214: LD_INT 9
23216: PUSH
23217: LD_INT 10
23219: PUSH
23220: LD_INT 11
23222: PUSH
23223: LD_INT 12
23225: PUSH
23226: LD_INT 13
23228: PUSH
23229: LD_INT 14
23231: PUSH
23232: LD_INT 15
23234: PUSH
23235: LD_INT 16
23237: PUSH
23238: LD_INT 17
23240: PUSH
23241: LD_INT 18
23243: PUSH
23244: LD_INT 19
23246: PUSH
23247: LD_INT 20
23249: PUSH
23250: LD_INT 21
23252: PUSH
23253: LD_INT 22
23255: PUSH
23256: LD_INT 23
23258: PUSH
23259: LD_INT 24
23261: PUSH
23262: LD_INT 25
23264: PUSH
23265: LD_INT 26
23267: PUSH
23268: LD_INT 27
23270: PUSH
23271: LD_INT 28
23273: PUSH
23274: LD_INT 29
23276: PUSH
23277: LD_INT 30
23279: PUSH
23280: LD_INT 31
23282: PUSH
23283: LD_INT 32
23285: PUSH
23286: LD_INT 33
23288: PUSH
23289: LD_INT 34
23291: PUSH
23292: LD_INT 36
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 101
23334: PUSH
23335: LD_INT 102
23337: PUSH
23338: LD_INT 103
23340: PUSH
23341: LD_INT 104
23343: PUSH
23344: LD_INT 105
23346: PUSH
23347: LD_INT 106
23349: PUSH
23350: LD_INT 107
23352: PUSH
23353: LD_INT 108
23355: PUSH
23356: LD_INT 109
23358: PUSH
23359: LD_INT 110
23361: PUSH
23362: LD_INT 111
23364: PUSH
23365: LD_INT 112
23367: PUSH
23368: LD_INT 113
23370: PUSH
23371: LD_INT 114
23373: PUSH
23374: LD_INT 116
23376: PUSH
23377: LD_INT 117
23379: PUSH
23380: LD_INT 118
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: ST_TO_ADDR
23406: GO 24413
23408: LD_INT 15
23410: DOUBLE
23411: EQUAL
23412: IFTRUE 23416
23414: GO 23640
23416: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23417: LD_ADDR_VAR 0 2
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 3
23430: PUSH
23431: LD_INT 4
23433: PUSH
23434: LD_INT 5
23436: PUSH
23437: LD_INT 6
23439: PUSH
23440: LD_INT 7
23442: PUSH
23443: LD_INT 8
23445: PUSH
23446: LD_INT 9
23448: PUSH
23449: LD_INT 10
23451: PUSH
23452: LD_INT 11
23454: PUSH
23455: LD_INT 12
23457: PUSH
23458: LD_INT 13
23460: PUSH
23461: LD_INT 14
23463: PUSH
23464: LD_INT 15
23466: PUSH
23467: LD_INT 16
23469: PUSH
23470: LD_INT 17
23472: PUSH
23473: LD_INT 18
23475: PUSH
23476: LD_INT 19
23478: PUSH
23479: LD_INT 20
23481: PUSH
23482: LD_INT 21
23484: PUSH
23485: LD_INT 22
23487: PUSH
23488: LD_INT 23
23490: PUSH
23491: LD_INT 24
23493: PUSH
23494: LD_INT 25
23496: PUSH
23497: LD_INT 26
23499: PUSH
23500: LD_INT 27
23502: PUSH
23503: LD_INT 28
23505: PUSH
23506: LD_INT 29
23508: PUSH
23509: LD_INT 30
23511: PUSH
23512: LD_INT 31
23514: PUSH
23515: LD_INT 32
23517: PUSH
23518: LD_INT 33
23520: PUSH
23521: LD_INT 34
23523: PUSH
23524: LD_INT 36
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 101
23566: PUSH
23567: LD_INT 102
23569: PUSH
23570: LD_INT 103
23572: PUSH
23573: LD_INT 104
23575: PUSH
23576: LD_INT 105
23578: PUSH
23579: LD_INT 106
23581: PUSH
23582: LD_INT 107
23584: PUSH
23585: LD_INT 108
23587: PUSH
23588: LD_INT 109
23590: PUSH
23591: LD_INT 110
23593: PUSH
23594: LD_INT 111
23596: PUSH
23597: LD_INT 112
23599: PUSH
23600: LD_INT 113
23602: PUSH
23603: LD_INT 114
23605: PUSH
23606: LD_INT 116
23608: PUSH
23609: LD_INT 117
23611: PUSH
23612: LD_INT 118
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: ST_TO_ADDR
23638: GO 24413
23640: LD_INT 16
23642: DOUBLE
23643: EQUAL
23644: IFTRUE 23648
23646: GO 23784
23648: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23649: LD_ADDR_VAR 0 2
23653: PUSH
23654: LD_INT 2
23656: PUSH
23657: LD_INT 4
23659: PUSH
23660: LD_INT 5
23662: PUSH
23663: LD_INT 7
23665: PUSH
23666: LD_INT 11
23668: PUSH
23669: LD_INT 12
23671: PUSH
23672: LD_INT 15
23674: PUSH
23675: LD_INT 16
23677: PUSH
23678: LD_INT 20
23680: PUSH
23681: LD_INT 21
23683: PUSH
23684: LD_INT 22
23686: PUSH
23687: LD_INT 23
23689: PUSH
23690: LD_INT 25
23692: PUSH
23693: LD_INT 26
23695: PUSH
23696: LD_INT 30
23698: PUSH
23699: LD_INT 31
23701: PUSH
23702: LD_INT 32
23704: PUSH
23705: LD_INT 33
23707: PUSH
23708: LD_INT 34
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 101
23734: PUSH
23735: LD_INT 102
23737: PUSH
23738: LD_INT 103
23740: PUSH
23741: LD_INT 106
23743: PUSH
23744: LD_INT 108
23746: PUSH
23747: LD_INT 112
23749: PUSH
23750: LD_INT 113
23752: PUSH
23753: LD_INT 114
23755: PUSH
23756: LD_INT 116
23758: PUSH
23759: LD_INT 117
23761: PUSH
23762: LD_INT 118
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: ST_TO_ADDR
23782: GO 24413
23784: LD_INT 17
23786: DOUBLE
23787: EQUAL
23788: IFTRUE 23792
23790: GO 24016
23792: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23793: LD_ADDR_VAR 0 2
23797: PUSH
23798: LD_INT 1
23800: PUSH
23801: LD_INT 2
23803: PUSH
23804: LD_INT 3
23806: PUSH
23807: LD_INT 4
23809: PUSH
23810: LD_INT 5
23812: PUSH
23813: LD_INT 6
23815: PUSH
23816: LD_INT 7
23818: PUSH
23819: LD_INT 8
23821: PUSH
23822: LD_INT 9
23824: PUSH
23825: LD_INT 10
23827: PUSH
23828: LD_INT 11
23830: PUSH
23831: LD_INT 12
23833: PUSH
23834: LD_INT 13
23836: PUSH
23837: LD_INT 14
23839: PUSH
23840: LD_INT 15
23842: PUSH
23843: LD_INT 16
23845: PUSH
23846: LD_INT 17
23848: PUSH
23849: LD_INT 18
23851: PUSH
23852: LD_INT 19
23854: PUSH
23855: LD_INT 20
23857: PUSH
23858: LD_INT 21
23860: PUSH
23861: LD_INT 22
23863: PUSH
23864: LD_INT 23
23866: PUSH
23867: LD_INT 24
23869: PUSH
23870: LD_INT 25
23872: PUSH
23873: LD_INT 26
23875: PUSH
23876: LD_INT 27
23878: PUSH
23879: LD_INT 28
23881: PUSH
23882: LD_INT 29
23884: PUSH
23885: LD_INT 30
23887: PUSH
23888: LD_INT 31
23890: PUSH
23891: LD_INT 32
23893: PUSH
23894: LD_INT 33
23896: PUSH
23897: LD_INT 34
23899: PUSH
23900: LD_INT 36
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 101
23942: PUSH
23943: LD_INT 102
23945: PUSH
23946: LD_INT 103
23948: PUSH
23949: LD_INT 104
23951: PUSH
23952: LD_INT 105
23954: PUSH
23955: LD_INT 106
23957: PUSH
23958: LD_INT 107
23960: PUSH
23961: LD_INT 108
23963: PUSH
23964: LD_INT 109
23966: PUSH
23967: LD_INT 110
23969: PUSH
23970: LD_INT 111
23972: PUSH
23973: LD_INT 112
23975: PUSH
23976: LD_INT 113
23978: PUSH
23979: LD_INT 114
23981: PUSH
23982: LD_INT 116
23984: PUSH
23985: LD_INT 117
23987: PUSH
23988: LD_INT 118
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: ST_TO_ADDR
24014: GO 24413
24016: LD_INT 18
24018: DOUBLE
24019: EQUAL
24020: IFTRUE 24024
24022: GO 24172
24024: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24025: LD_ADDR_VAR 0 2
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: LD_INT 4
24035: PUSH
24036: LD_INT 5
24038: PUSH
24039: LD_INT 7
24041: PUSH
24042: LD_INT 11
24044: PUSH
24045: LD_INT 12
24047: PUSH
24048: LD_INT 15
24050: PUSH
24051: LD_INT 16
24053: PUSH
24054: LD_INT 20
24056: PUSH
24057: LD_INT 21
24059: PUSH
24060: LD_INT 22
24062: PUSH
24063: LD_INT 23
24065: PUSH
24066: LD_INT 25
24068: PUSH
24069: LD_INT 26
24071: PUSH
24072: LD_INT 30
24074: PUSH
24075: LD_INT 31
24077: PUSH
24078: LD_INT 32
24080: PUSH
24081: LD_INT 33
24083: PUSH
24084: LD_INT 34
24086: PUSH
24087: LD_INT 35
24089: PUSH
24090: LD_INT 36
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 101
24118: PUSH
24119: LD_INT 102
24121: PUSH
24122: LD_INT 103
24124: PUSH
24125: LD_INT 106
24127: PUSH
24128: LD_INT 108
24130: PUSH
24131: LD_INT 112
24133: PUSH
24134: LD_INT 113
24136: PUSH
24137: LD_INT 114
24139: PUSH
24140: LD_INT 115
24142: PUSH
24143: LD_INT 116
24145: PUSH
24146: LD_INT 117
24148: PUSH
24149: LD_INT 118
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: ST_TO_ADDR
24170: GO 24413
24172: LD_INT 19
24174: DOUBLE
24175: EQUAL
24176: IFTRUE 24180
24178: GO 24412
24180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24181: LD_ADDR_VAR 0 2
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: LD_INT 3
24194: PUSH
24195: LD_INT 4
24197: PUSH
24198: LD_INT 5
24200: PUSH
24201: LD_INT 6
24203: PUSH
24204: LD_INT 7
24206: PUSH
24207: LD_INT 8
24209: PUSH
24210: LD_INT 9
24212: PUSH
24213: LD_INT 10
24215: PUSH
24216: LD_INT 11
24218: PUSH
24219: LD_INT 12
24221: PUSH
24222: LD_INT 13
24224: PUSH
24225: LD_INT 14
24227: PUSH
24228: LD_INT 15
24230: PUSH
24231: LD_INT 16
24233: PUSH
24234: LD_INT 17
24236: PUSH
24237: LD_INT 18
24239: PUSH
24240: LD_INT 19
24242: PUSH
24243: LD_INT 20
24245: PUSH
24246: LD_INT 21
24248: PUSH
24249: LD_INT 22
24251: PUSH
24252: LD_INT 23
24254: PUSH
24255: LD_INT 24
24257: PUSH
24258: LD_INT 25
24260: PUSH
24261: LD_INT 26
24263: PUSH
24264: LD_INT 27
24266: PUSH
24267: LD_INT 28
24269: PUSH
24270: LD_INT 29
24272: PUSH
24273: LD_INT 30
24275: PUSH
24276: LD_INT 31
24278: PUSH
24279: LD_INT 32
24281: PUSH
24282: LD_INT 33
24284: PUSH
24285: LD_INT 34
24287: PUSH
24288: LD_INT 35
24290: PUSH
24291: LD_INT 36
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 101
24334: PUSH
24335: LD_INT 102
24337: PUSH
24338: LD_INT 103
24340: PUSH
24341: LD_INT 104
24343: PUSH
24344: LD_INT 105
24346: PUSH
24347: LD_INT 106
24349: PUSH
24350: LD_INT 107
24352: PUSH
24353: LD_INT 108
24355: PUSH
24356: LD_INT 109
24358: PUSH
24359: LD_INT 110
24361: PUSH
24362: LD_INT 111
24364: PUSH
24365: LD_INT 112
24367: PUSH
24368: LD_INT 113
24370: PUSH
24371: LD_INT 114
24373: PUSH
24374: LD_INT 115
24376: PUSH
24377: LD_INT 116
24379: PUSH
24380: LD_INT 117
24382: PUSH
24383: LD_INT 118
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: ST_TO_ADDR
24410: GO 24413
24412: POP
// end else
24413: GO 24644
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24415: LD_ADDR_VAR 0 2
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: LD_INT 2
24425: PUSH
24426: LD_INT 3
24428: PUSH
24429: LD_INT 4
24431: PUSH
24432: LD_INT 5
24434: PUSH
24435: LD_INT 6
24437: PUSH
24438: LD_INT 7
24440: PUSH
24441: LD_INT 8
24443: PUSH
24444: LD_INT 9
24446: PUSH
24447: LD_INT 10
24449: PUSH
24450: LD_INT 11
24452: PUSH
24453: LD_INT 12
24455: PUSH
24456: LD_INT 13
24458: PUSH
24459: LD_INT 14
24461: PUSH
24462: LD_INT 15
24464: PUSH
24465: LD_INT 16
24467: PUSH
24468: LD_INT 17
24470: PUSH
24471: LD_INT 18
24473: PUSH
24474: LD_INT 19
24476: PUSH
24477: LD_INT 20
24479: PUSH
24480: LD_INT 21
24482: PUSH
24483: LD_INT 22
24485: PUSH
24486: LD_INT 23
24488: PUSH
24489: LD_INT 24
24491: PUSH
24492: LD_INT 25
24494: PUSH
24495: LD_INT 26
24497: PUSH
24498: LD_INT 27
24500: PUSH
24501: LD_INT 28
24503: PUSH
24504: LD_INT 29
24506: PUSH
24507: LD_INT 30
24509: PUSH
24510: LD_INT 31
24512: PUSH
24513: LD_INT 32
24515: PUSH
24516: LD_INT 33
24518: PUSH
24519: LD_INT 34
24521: PUSH
24522: LD_INT 35
24524: PUSH
24525: LD_INT 36
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 101
24568: PUSH
24569: LD_INT 102
24571: PUSH
24572: LD_INT 103
24574: PUSH
24575: LD_INT 104
24577: PUSH
24578: LD_INT 105
24580: PUSH
24581: LD_INT 106
24583: PUSH
24584: LD_INT 107
24586: PUSH
24587: LD_INT 108
24589: PUSH
24590: LD_INT 109
24592: PUSH
24593: LD_INT 110
24595: PUSH
24596: LD_INT 111
24598: PUSH
24599: LD_INT 112
24601: PUSH
24602: LD_INT 113
24604: PUSH
24605: LD_INT 114
24607: PUSH
24608: LD_INT 115
24610: PUSH
24611: LD_INT 116
24613: PUSH
24614: LD_INT 117
24616: PUSH
24617: LD_INT 118
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: ST_TO_ADDR
// if result then
24644: LD_VAR 0 2
24648: IFFALSE 25434
// begin normal :=  ;
24650: LD_ADDR_VAR 0 5
24654: PUSH
24655: LD_STRING 
24657: ST_TO_ADDR
// hardcore :=  ;
24658: LD_ADDR_VAR 0 6
24662: PUSH
24663: LD_STRING 
24665: ST_TO_ADDR
// active :=  ;
24666: LD_ADDR_VAR 0 7
24670: PUSH
24671: LD_STRING 
24673: ST_TO_ADDR
// for i = 1 to normalCounter do
24674: LD_ADDR_VAR 0 8
24678: PUSH
24679: DOUBLE
24680: LD_INT 1
24682: DEC
24683: ST_TO_ADDR
24684: LD_EXP 39
24688: PUSH
24689: FOR_TO
24690: IFFALSE 24791
// begin tmp := 0 ;
24692: LD_ADDR_VAR 0 3
24696: PUSH
24697: LD_STRING 0
24699: ST_TO_ADDR
// if result [ 1 ] then
24700: LD_VAR 0 2
24704: PUSH
24705: LD_INT 1
24707: ARRAY
24708: IFFALSE 24773
// if result [ 1 ] [ 1 ] = i then
24710: LD_VAR 0 2
24714: PUSH
24715: LD_INT 1
24717: ARRAY
24718: PUSH
24719: LD_INT 1
24721: ARRAY
24722: PUSH
24723: LD_VAR 0 8
24727: EQUAL
24728: IFFALSE 24773
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24730: LD_ADDR_VAR 0 2
24734: PUSH
24735: LD_VAR 0 2
24739: PPUSH
24740: LD_INT 1
24742: PPUSH
24743: LD_VAR 0 2
24747: PUSH
24748: LD_INT 1
24750: ARRAY
24751: PPUSH
24752: LD_INT 1
24754: PPUSH
24755: CALL_OW 3
24759: PPUSH
24760: CALL_OW 1
24764: ST_TO_ADDR
// tmp := 1 ;
24765: LD_ADDR_VAR 0 3
24769: PUSH
24770: LD_STRING 1
24772: ST_TO_ADDR
// end ; normal := normal & tmp ;
24773: LD_ADDR_VAR 0 5
24777: PUSH
24778: LD_VAR 0 5
24782: PUSH
24783: LD_VAR 0 3
24787: STR
24788: ST_TO_ADDR
// end ;
24789: GO 24689
24791: POP
24792: POP
// for i = 1 to hardcoreCounter do
24793: LD_ADDR_VAR 0 8
24797: PUSH
24798: DOUBLE
24799: LD_INT 1
24801: DEC
24802: ST_TO_ADDR
24803: LD_EXP 40
24807: PUSH
24808: FOR_TO
24809: IFFALSE 24914
// begin tmp := 0 ;
24811: LD_ADDR_VAR 0 3
24815: PUSH
24816: LD_STRING 0
24818: ST_TO_ADDR
// if result [ 2 ] then
24819: LD_VAR 0 2
24823: PUSH
24824: LD_INT 2
24826: ARRAY
24827: IFFALSE 24896
// if result [ 2 ] [ 1 ] = 100 + i then
24829: LD_VAR 0 2
24833: PUSH
24834: LD_INT 2
24836: ARRAY
24837: PUSH
24838: LD_INT 1
24840: ARRAY
24841: PUSH
24842: LD_INT 100
24844: PUSH
24845: LD_VAR 0 8
24849: PLUS
24850: EQUAL
24851: IFFALSE 24896
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24853: LD_ADDR_VAR 0 2
24857: PUSH
24858: LD_VAR 0 2
24862: PPUSH
24863: LD_INT 2
24865: PPUSH
24866: LD_VAR 0 2
24870: PUSH
24871: LD_INT 2
24873: ARRAY
24874: PPUSH
24875: LD_INT 1
24877: PPUSH
24878: CALL_OW 3
24882: PPUSH
24883: CALL_OW 1
24887: ST_TO_ADDR
// tmp := 1 ;
24888: LD_ADDR_VAR 0 3
24892: PUSH
24893: LD_STRING 1
24895: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24896: LD_ADDR_VAR 0 6
24900: PUSH
24901: LD_VAR 0 6
24905: PUSH
24906: LD_VAR 0 3
24910: STR
24911: ST_TO_ADDR
// end ;
24912: GO 24808
24914: POP
24915: POP
// if isGameLoad then
24916: LD_VAR 0 1
24920: IFFALSE 25395
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24922: LD_ADDR_VAR 0 4
24926: PUSH
24927: LD_EXP 43
24931: PUSH
24932: LD_EXP 42
24936: PUSH
24937: LD_EXP 44
24941: PUSH
24942: LD_EXP 41
24946: PUSH
24947: LD_EXP 45
24951: PUSH
24952: LD_EXP 46
24956: PUSH
24957: LD_EXP 47
24961: PUSH
24962: LD_EXP 48
24966: PUSH
24967: LD_EXP 49
24971: PUSH
24972: LD_EXP 50
24976: PUSH
24977: LD_EXP 51
24981: PUSH
24982: LD_EXP 52
24986: PUSH
24987: LD_EXP 53
24991: PUSH
24992: LD_EXP 54
24996: PUSH
24997: LD_EXP 62
25001: PUSH
25002: LD_EXP 63
25006: PUSH
25007: LD_EXP 64
25011: PUSH
25012: LD_EXP 65
25016: PUSH
25017: LD_EXP 67
25021: PUSH
25022: LD_EXP 68
25026: PUSH
25027: LD_EXP 69
25031: PUSH
25032: LD_EXP 72
25036: PUSH
25037: LD_EXP 74
25041: PUSH
25042: LD_EXP 75
25046: PUSH
25047: LD_EXP 76
25051: PUSH
25052: LD_EXP 78
25056: PUSH
25057: LD_EXP 79
25061: PUSH
25062: LD_EXP 82
25066: PUSH
25067: LD_EXP 83
25071: PUSH
25072: LD_EXP 84
25076: PUSH
25077: LD_EXP 85
25081: PUSH
25082: LD_EXP 86
25086: PUSH
25087: LD_EXP 87
25091: PUSH
25092: LD_EXP 88
25096: PUSH
25097: LD_EXP 89
25101: PUSH
25102: LD_EXP 90
25106: PUSH
25107: LD_EXP 55
25111: PUSH
25112: LD_EXP 56
25116: PUSH
25117: LD_EXP 59
25121: PUSH
25122: LD_EXP 60
25126: PUSH
25127: LD_EXP 61
25131: PUSH
25132: LD_EXP 57
25136: PUSH
25137: LD_EXP 58
25141: PUSH
25142: LD_EXP 66
25146: PUSH
25147: LD_EXP 70
25151: PUSH
25152: LD_EXP 71
25156: PUSH
25157: LD_EXP 73
25161: PUSH
25162: LD_EXP 77
25166: PUSH
25167: LD_EXP 80
25171: PUSH
25172: LD_EXP 81
25176: PUSH
25177: LD_EXP 91
25181: PUSH
25182: LD_EXP 92
25186: PUSH
25187: LD_EXP 93
25191: PUSH
25192: LD_EXP 94
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: ST_TO_ADDR
// tmp :=  ;
25253: LD_ADDR_VAR 0 3
25257: PUSH
25258: LD_STRING 
25260: ST_TO_ADDR
// for i = 1 to normalCounter do
25261: LD_ADDR_VAR 0 8
25265: PUSH
25266: DOUBLE
25267: LD_INT 1
25269: DEC
25270: ST_TO_ADDR
25271: LD_EXP 39
25275: PUSH
25276: FOR_TO
25277: IFFALSE 25313
// begin if flags [ i ] then
25279: LD_VAR 0 4
25283: PUSH
25284: LD_VAR 0 8
25288: ARRAY
25289: IFFALSE 25311
// tmp := tmp & i & ; ;
25291: LD_ADDR_VAR 0 3
25295: PUSH
25296: LD_VAR 0 3
25300: PUSH
25301: LD_VAR 0 8
25305: STR
25306: PUSH
25307: LD_STRING ;
25309: STR
25310: ST_TO_ADDR
// end ;
25311: GO 25276
25313: POP
25314: POP
// for i = 1 to hardcoreCounter do
25315: LD_ADDR_VAR 0 8
25319: PUSH
25320: DOUBLE
25321: LD_INT 1
25323: DEC
25324: ST_TO_ADDR
25325: LD_EXP 40
25329: PUSH
25330: FOR_TO
25331: IFFALSE 25377
// begin if flags [ normalCounter + i ] then
25333: LD_VAR 0 4
25337: PUSH
25338: LD_EXP 39
25342: PUSH
25343: LD_VAR 0 8
25347: PLUS
25348: ARRAY
25349: IFFALSE 25375
// tmp := tmp & ( 100 + i ) & ; ;
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: LD_VAR 0 3
25360: PUSH
25361: LD_INT 100
25363: PUSH
25364: LD_VAR 0 8
25368: PLUS
25369: STR
25370: PUSH
25371: LD_STRING ;
25373: STR
25374: ST_TO_ADDR
// end ;
25375: GO 25330
25377: POP
25378: POP
// if tmp then
25379: LD_VAR 0 3
25383: IFFALSE 25395
// active := tmp ;
25385: LD_ADDR_VAR 0 7
25389: PUSH
25390: LD_VAR 0 3
25394: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25395: LD_STRING getStreamItemsFromMission("
25397: PUSH
25398: LD_VAR 0 5
25402: STR
25403: PUSH
25404: LD_STRING ","
25406: STR
25407: PUSH
25408: LD_VAR 0 6
25412: STR
25413: PUSH
25414: LD_STRING ","
25416: STR
25417: PUSH
25418: LD_VAR 0 7
25422: STR
25423: PUSH
25424: LD_STRING ")
25426: STR
25427: PPUSH
25428: CALL_OW 559
// end else
25432: GO 25441
// ToLua ( getStreamItemsFromMission("","","") ) ;
25434: LD_STRING getStreamItemsFromMission("","","")
25436: PPUSH
25437: CALL_OW 559
// end ;
25441: LD_VAR 0 2
25445: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25446: LD_EXP 38
25450: PUSH
25451: LD_EXP 43
25455: AND
25456: IFFALSE 25580
25458: GO 25460
25460: DISABLE
25461: LD_INT 0
25463: PPUSH
25464: PPUSH
// begin enable ;
25465: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25466: LD_ADDR_VAR 0 2
25470: PUSH
25471: LD_INT 22
25473: PUSH
25474: LD_OWVAR 2
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 2
25485: PUSH
25486: LD_INT 34
25488: PUSH
25489: LD_INT 7
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 34
25498: PUSH
25499: LD_INT 45
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 34
25508: PUSH
25509: LD_INT 28
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 34
25518: PUSH
25519: LD_INT 47
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PPUSH
25537: CALL_OW 69
25541: ST_TO_ADDR
// if not tmp then
25542: LD_VAR 0 2
25546: NOT
25547: IFFALSE 25551
// exit ;
25549: GO 25580
// for i in tmp do
25551: LD_ADDR_VAR 0 1
25555: PUSH
25556: LD_VAR 0 2
25560: PUSH
25561: FOR_IN
25562: IFFALSE 25578
// begin SetLives ( i , 0 ) ;
25564: LD_VAR 0 1
25568: PPUSH
25569: LD_INT 0
25571: PPUSH
25572: CALL_OW 234
// end ;
25576: GO 25561
25578: POP
25579: POP
// end ;
25580: PPOPN 2
25582: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25583: LD_EXP 38
25587: PUSH
25588: LD_EXP 44
25592: AND
25593: IFFALSE 25677
25595: GO 25597
25597: DISABLE
25598: LD_INT 0
25600: PPUSH
25601: PPUSH
// begin enable ;
25602: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25603: LD_ADDR_VAR 0 2
25607: PUSH
25608: LD_INT 22
25610: PUSH
25611: LD_OWVAR 2
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 32
25622: PUSH
25623: LD_INT 3
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PPUSH
25634: CALL_OW 69
25638: ST_TO_ADDR
// if not tmp then
25639: LD_VAR 0 2
25643: NOT
25644: IFFALSE 25648
// exit ;
25646: GO 25677
// for i in tmp do
25648: LD_ADDR_VAR 0 1
25652: PUSH
25653: LD_VAR 0 2
25657: PUSH
25658: FOR_IN
25659: IFFALSE 25675
// begin SetLives ( i , 0 ) ;
25661: LD_VAR 0 1
25665: PPUSH
25666: LD_INT 0
25668: PPUSH
25669: CALL_OW 234
// end ;
25673: GO 25658
25675: POP
25676: POP
// end ;
25677: PPOPN 2
25679: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25680: LD_EXP 38
25684: PUSH
25685: LD_EXP 41
25689: AND
25690: IFFALSE 25783
25692: GO 25694
25694: DISABLE
25695: LD_INT 0
25697: PPUSH
// begin enable ;
25698: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25699: LD_ADDR_VAR 0 1
25703: PUSH
25704: LD_INT 22
25706: PUSH
25707: LD_OWVAR 2
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: LD_INT 25
25721: PUSH
25722: LD_INT 5
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 25
25731: PUSH
25732: LD_INT 9
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 25
25741: PUSH
25742: LD_INT 8
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PPUSH
25759: CALL_OW 69
25763: PUSH
25764: FOR_IN
25765: IFFALSE 25781
// begin SetClass ( i , 1 ) ;
25767: LD_VAR 0 1
25771: PPUSH
25772: LD_INT 1
25774: PPUSH
25775: CALL_OW 336
// end ;
25779: GO 25764
25781: POP
25782: POP
// end ;
25783: PPOPN 1
25785: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25786: LD_EXP 38
25790: PUSH
25791: LD_EXP 42
25795: AND
25796: PUSH
25797: LD_OWVAR 65
25801: PUSH
25802: LD_INT 7
25804: LESS
25805: AND
25806: IFFALSE 25820
25808: GO 25810
25810: DISABLE
// begin enable ;
25811: ENABLE
// game_speed := 7 ;
25812: LD_ADDR_OWVAR 65
25816: PUSH
25817: LD_INT 7
25819: ST_TO_ADDR
// end ;
25820: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25821: LD_EXP 38
25825: PUSH
25826: LD_EXP 45
25830: AND
25831: IFFALSE 26033
25833: GO 25835
25835: DISABLE
25836: LD_INT 0
25838: PPUSH
25839: PPUSH
25840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25841: LD_ADDR_VAR 0 3
25845: PUSH
25846: LD_INT 81
25848: PUSH
25849: LD_OWVAR 2
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 21
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PPUSH
25872: CALL_OW 69
25876: ST_TO_ADDR
// if not tmp then
25877: LD_VAR 0 3
25881: NOT
25882: IFFALSE 25886
// exit ;
25884: GO 26033
// if tmp > 5 then
25886: LD_VAR 0 3
25890: PUSH
25891: LD_INT 5
25893: GREATER
25894: IFFALSE 25906
// k := 5 else
25896: LD_ADDR_VAR 0 2
25900: PUSH
25901: LD_INT 5
25903: ST_TO_ADDR
25904: GO 25916
// k := tmp ;
25906: LD_ADDR_VAR 0 2
25910: PUSH
25911: LD_VAR 0 3
25915: ST_TO_ADDR
// for i := 1 to k do
25916: LD_ADDR_VAR 0 1
25920: PUSH
25921: DOUBLE
25922: LD_INT 1
25924: DEC
25925: ST_TO_ADDR
25926: LD_VAR 0 2
25930: PUSH
25931: FOR_TO
25932: IFFALSE 26031
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25934: LD_VAR 0 3
25938: PUSH
25939: LD_VAR 0 1
25943: ARRAY
25944: PPUSH
25945: LD_VAR 0 1
25949: PUSH
25950: LD_INT 4
25952: MOD
25953: PUSH
25954: LD_INT 1
25956: PLUS
25957: PPUSH
25958: CALL_OW 259
25962: PUSH
25963: LD_INT 10
25965: LESS
25966: IFFALSE 26029
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25968: LD_VAR 0 3
25972: PUSH
25973: LD_VAR 0 1
25977: ARRAY
25978: PPUSH
25979: LD_VAR 0 1
25983: PUSH
25984: LD_INT 4
25986: MOD
25987: PUSH
25988: LD_INT 1
25990: PLUS
25991: PPUSH
25992: LD_VAR 0 3
25996: PUSH
25997: LD_VAR 0 1
26001: ARRAY
26002: PPUSH
26003: LD_VAR 0 1
26007: PUSH
26008: LD_INT 4
26010: MOD
26011: PUSH
26012: LD_INT 1
26014: PLUS
26015: PPUSH
26016: CALL_OW 259
26020: PUSH
26021: LD_INT 1
26023: PLUS
26024: PPUSH
26025: CALL_OW 237
26029: GO 25931
26031: POP
26032: POP
// end ;
26033: PPOPN 3
26035: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26036: LD_EXP 38
26040: PUSH
26041: LD_EXP 46
26045: AND
26046: IFFALSE 26066
26048: GO 26050
26050: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26051: LD_INT 4
26053: PPUSH
26054: LD_OWVAR 2
26058: PPUSH
26059: LD_INT 0
26061: PPUSH
26062: CALL_OW 324
26066: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26067: LD_EXP 38
26071: PUSH
26072: LD_EXP 75
26076: AND
26077: IFFALSE 26097
26079: GO 26081
26081: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26082: LD_INT 19
26084: PPUSH
26085: LD_OWVAR 2
26089: PPUSH
26090: LD_INT 0
26092: PPUSH
26093: CALL_OW 324
26097: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26098: LD_EXP 38
26102: PUSH
26103: LD_EXP 47
26107: AND
26108: IFFALSE 26210
26110: GO 26112
26112: DISABLE
26113: LD_INT 0
26115: PPUSH
26116: PPUSH
// begin enable ;
26117: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26118: LD_ADDR_VAR 0 2
26122: PUSH
26123: LD_INT 22
26125: PUSH
26126: LD_OWVAR 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 2
26137: PUSH
26138: LD_INT 34
26140: PUSH
26141: LD_INT 11
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 34
26150: PUSH
26151: LD_INT 30
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PPUSH
26167: CALL_OW 69
26171: ST_TO_ADDR
// if not tmp then
26172: LD_VAR 0 2
26176: NOT
26177: IFFALSE 26181
// exit ;
26179: GO 26210
// for i in tmp do
26181: LD_ADDR_VAR 0 1
26185: PUSH
26186: LD_VAR 0 2
26190: PUSH
26191: FOR_IN
26192: IFFALSE 26208
// begin SetLives ( i , 0 ) ;
26194: LD_VAR 0 1
26198: PPUSH
26199: LD_INT 0
26201: PPUSH
26202: CALL_OW 234
// end ;
26206: GO 26191
26208: POP
26209: POP
// end ;
26210: PPOPN 2
26212: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26213: LD_EXP 38
26217: PUSH
26218: LD_EXP 48
26222: AND
26223: IFFALSE 26243
26225: GO 26227
26227: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26228: LD_INT 32
26230: PPUSH
26231: LD_OWVAR 2
26235: PPUSH
26236: LD_INT 0
26238: PPUSH
26239: CALL_OW 324
26243: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26244: LD_EXP 38
26248: PUSH
26249: LD_EXP 49
26253: AND
26254: IFFALSE 26435
26256: GO 26258
26258: DISABLE
26259: LD_INT 0
26261: PPUSH
26262: PPUSH
26263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26264: LD_ADDR_VAR 0 2
26268: PUSH
26269: LD_INT 22
26271: PUSH
26272: LD_OWVAR 2
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 33
26283: PUSH
26284: LD_INT 3
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 69
26299: ST_TO_ADDR
// if not tmp then
26300: LD_VAR 0 2
26304: NOT
26305: IFFALSE 26309
// exit ;
26307: GO 26435
// side := 0 ;
26309: LD_ADDR_VAR 0 3
26313: PUSH
26314: LD_INT 0
26316: ST_TO_ADDR
// for i := 1 to 8 do
26317: LD_ADDR_VAR 0 1
26321: PUSH
26322: DOUBLE
26323: LD_INT 1
26325: DEC
26326: ST_TO_ADDR
26327: LD_INT 8
26329: PUSH
26330: FOR_TO
26331: IFFALSE 26379
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26333: LD_OWVAR 2
26337: PUSH
26338: LD_VAR 0 1
26342: NONEQUAL
26343: PUSH
26344: LD_OWVAR 2
26348: PPUSH
26349: LD_VAR 0 1
26353: PPUSH
26354: CALL_OW 81
26358: PUSH
26359: LD_INT 2
26361: EQUAL
26362: AND
26363: IFFALSE 26377
// begin side := i ;
26365: LD_ADDR_VAR 0 3
26369: PUSH
26370: LD_VAR 0 1
26374: ST_TO_ADDR
// break ;
26375: GO 26379
// end ;
26377: GO 26330
26379: POP
26380: POP
// if not side then
26381: LD_VAR 0 3
26385: NOT
26386: IFFALSE 26390
// exit ;
26388: GO 26435
// for i := 1 to tmp do
26390: LD_ADDR_VAR 0 1
26394: PUSH
26395: DOUBLE
26396: LD_INT 1
26398: DEC
26399: ST_TO_ADDR
26400: LD_VAR 0 2
26404: PUSH
26405: FOR_TO
26406: IFFALSE 26433
// if Prob ( 60 ) then
26408: LD_INT 60
26410: PPUSH
26411: CALL_OW 13
26415: IFFALSE 26431
// SetSide ( i , side ) ;
26417: LD_VAR 0 1
26421: PPUSH
26422: LD_VAR 0 3
26426: PPUSH
26427: CALL_OW 235
26431: GO 26405
26433: POP
26434: POP
// end ;
26435: PPOPN 3
26437: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26438: LD_EXP 38
26442: PUSH
26443: LD_EXP 51
26447: AND
26448: IFFALSE 26567
26450: GO 26452
26452: DISABLE
26453: LD_INT 0
26455: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26456: LD_ADDR_VAR 0 1
26460: PUSH
26461: LD_INT 22
26463: PUSH
26464: LD_OWVAR 2
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 21
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 3
26485: PUSH
26486: LD_INT 23
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: LIST
26504: PPUSH
26505: CALL_OW 69
26509: PUSH
26510: FOR_IN
26511: IFFALSE 26565
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26513: LD_VAR 0 1
26517: PPUSH
26518: CALL_OW 257
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: LD_INT 2
26528: PUSH
26529: LD_INT 3
26531: PUSH
26532: LD_INT 4
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: IN
26541: IFFALSE 26563
// SetClass ( un , rand ( 1 , 4 ) ) ;
26543: LD_VAR 0 1
26547: PPUSH
26548: LD_INT 1
26550: PPUSH
26551: LD_INT 4
26553: PPUSH
26554: CALL_OW 12
26558: PPUSH
26559: CALL_OW 336
26563: GO 26510
26565: POP
26566: POP
// end ;
26567: PPOPN 1
26569: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26570: LD_EXP 38
26574: PUSH
26575: LD_EXP 50
26579: AND
26580: IFFALSE 26659
26582: GO 26584
26584: DISABLE
26585: LD_INT 0
26587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26588: LD_ADDR_VAR 0 1
26592: PUSH
26593: LD_INT 22
26595: PUSH
26596: LD_OWVAR 2
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 21
26607: PUSH
26608: LD_INT 3
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PPUSH
26619: CALL_OW 69
26623: ST_TO_ADDR
// if not tmp then
26624: LD_VAR 0 1
26628: NOT
26629: IFFALSE 26633
// exit ;
26631: GO 26659
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26633: LD_VAR 0 1
26637: PUSH
26638: LD_INT 1
26640: PPUSH
26641: LD_VAR 0 1
26645: PPUSH
26646: CALL_OW 12
26650: ARRAY
26651: PPUSH
26652: LD_INT 100
26654: PPUSH
26655: CALL_OW 234
// end ;
26659: PPOPN 1
26661: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26662: LD_EXP 38
26666: PUSH
26667: LD_EXP 52
26671: AND
26672: IFFALSE 26770
26674: GO 26676
26676: DISABLE
26677: LD_INT 0
26679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26680: LD_ADDR_VAR 0 1
26684: PUSH
26685: LD_INT 22
26687: PUSH
26688: LD_OWVAR 2
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 21
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PPUSH
26711: CALL_OW 69
26715: ST_TO_ADDR
// if not tmp then
26716: LD_VAR 0 1
26720: NOT
26721: IFFALSE 26725
// exit ;
26723: GO 26770
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26725: LD_VAR 0 1
26729: PUSH
26730: LD_INT 1
26732: PPUSH
26733: LD_VAR 0 1
26737: PPUSH
26738: CALL_OW 12
26742: ARRAY
26743: PPUSH
26744: LD_INT 1
26746: PPUSH
26747: LD_INT 4
26749: PPUSH
26750: CALL_OW 12
26754: PPUSH
26755: LD_INT 3000
26757: PPUSH
26758: LD_INT 9000
26760: PPUSH
26761: CALL_OW 12
26765: PPUSH
26766: CALL_OW 492
// end ;
26770: PPOPN 1
26772: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26773: LD_EXP 38
26777: PUSH
26778: LD_EXP 53
26782: AND
26783: IFFALSE 26803
26785: GO 26787
26787: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26788: LD_INT 1
26790: PPUSH
26791: LD_OWVAR 2
26795: PPUSH
26796: LD_INT 0
26798: PPUSH
26799: CALL_OW 324
26803: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26804: LD_EXP 38
26808: PUSH
26809: LD_EXP 54
26813: AND
26814: IFFALSE 26897
26816: GO 26818
26818: DISABLE
26819: LD_INT 0
26821: PPUSH
26822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26823: LD_ADDR_VAR 0 2
26827: PUSH
26828: LD_INT 22
26830: PUSH
26831: LD_OWVAR 2
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 21
26842: PUSH
26843: LD_INT 3
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PPUSH
26854: CALL_OW 69
26858: ST_TO_ADDR
// if not tmp then
26859: LD_VAR 0 2
26863: NOT
26864: IFFALSE 26868
// exit ;
26866: GO 26897
// for i in tmp do
26868: LD_ADDR_VAR 0 1
26872: PUSH
26873: LD_VAR 0 2
26877: PUSH
26878: FOR_IN
26879: IFFALSE 26895
// SetBLevel ( i , 10 ) ;
26881: LD_VAR 0 1
26885: PPUSH
26886: LD_INT 10
26888: PPUSH
26889: CALL_OW 241
26893: GO 26878
26895: POP
26896: POP
// end ;
26897: PPOPN 2
26899: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26900: LD_EXP 38
26904: PUSH
26905: LD_EXP 55
26909: AND
26910: IFFALSE 27021
26912: GO 26914
26914: DISABLE
26915: LD_INT 0
26917: PPUSH
26918: PPUSH
26919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26920: LD_ADDR_VAR 0 3
26924: PUSH
26925: LD_INT 22
26927: PUSH
26928: LD_OWVAR 2
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 25
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PPUSH
26951: CALL_OW 69
26955: ST_TO_ADDR
// if not tmp then
26956: LD_VAR 0 3
26960: NOT
26961: IFFALSE 26965
// exit ;
26963: GO 27021
// un := tmp [ rand ( 1 , tmp ) ] ;
26965: LD_ADDR_VAR 0 2
26969: PUSH
26970: LD_VAR 0 3
26974: PUSH
26975: LD_INT 1
26977: PPUSH
26978: LD_VAR 0 3
26982: PPUSH
26983: CALL_OW 12
26987: ARRAY
26988: ST_TO_ADDR
// if Crawls ( un ) then
26989: LD_VAR 0 2
26993: PPUSH
26994: CALL_OW 318
26998: IFFALSE 27009
// ComWalk ( un ) ;
27000: LD_VAR 0 2
27004: PPUSH
27005: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27009: LD_VAR 0 2
27013: PPUSH
27014: LD_INT 5
27016: PPUSH
27017: CALL_OW 336
// end ;
27021: PPOPN 3
27023: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27024: LD_EXP 38
27028: PUSH
27029: LD_EXP 56
27033: AND
27034: PUSH
27035: LD_OWVAR 67
27039: PUSH
27040: LD_INT 4
27042: LESS
27043: AND
27044: IFFALSE 27063
27046: GO 27048
27048: DISABLE
// begin Difficulty := Difficulty + 1 ;
27049: LD_ADDR_OWVAR 67
27053: PUSH
27054: LD_OWVAR 67
27058: PUSH
27059: LD_INT 1
27061: PLUS
27062: ST_TO_ADDR
// end ;
27063: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27064: LD_EXP 38
27068: PUSH
27069: LD_EXP 57
27073: AND
27074: IFFALSE 27177
27076: GO 27078
27078: DISABLE
27079: LD_INT 0
27081: PPUSH
// begin for i := 1 to 5 do
27082: LD_ADDR_VAR 0 1
27086: PUSH
27087: DOUBLE
27088: LD_INT 1
27090: DEC
27091: ST_TO_ADDR
27092: LD_INT 5
27094: PUSH
27095: FOR_TO
27096: IFFALSE 27175
// begin uc_nation := nation_nature ;
27098: LD_ADDR_OWVAR 21
27102: PUSH
27103: LD_INT 0
27105: ST_TO_ADDR
// uc_side := 0 ;
27106: LD_ADDR_OWVAR 20
27110: PUSH
27111: LD_INT 0
27113: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27114: LD_ADDR_OWVAR 29
27118: PUSH
27119: LD_INT 12
27121: PUSH
27122: LD_INT 12
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: ST_TO_ADDR
// hc_agressivity := 20 ;
27129: LD_ADDR_OWVAR 35
27133: PUSH
27134: LD_INT 20
27136: ST_TO_ADDR
// hc_class := class_tiger ;
27137: LD_ADDR_OWVAR 28
27141: PUSH
27142: LD_INT 14
27144: ST_TO_ADDR
// hc_gallery :=  ;
27145: LD_ADDR_OWVAR 33
27149: PUSH
27150: LD_STRING 
27152: ST_TO_ADDR
// hc_name :=  ;
27153: LD_ADDR_OWVAR 26
27157: PUSH
27158: LD_STRING 
27160: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27161: CALL_OW 44
27165: PPUSH
27166: LD_INT 0
27168: PPUSH
27169: CALL_OW 51
// end ;
27173: GO 27095
27175: POP
27176: POP
// end ;
27177: PPOPN 1
27179: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27180: LD_EXP 38
27184: PUSH
27185: LD_EXP 58
27189: AND
27190: IFFALSE 27199
27192: GO 27194
27194: DISABLE
// StreamSibBomb ;
27195: CALL 27200 0 0
27199: END
// export function StreamSibBomb ; var i , x , y ; begin
27200: LD_INT 0
27202: PPUSH
27203: PPUSH
27204: PPUSH
27205: PPUSH
// result := false ;
27206: LD_ADDR_VAR 0 1
27210: PUSH
27211: LD_INT 0
27213: ST_TO_ADDR
// for i := 1 to 16 do
27214: LD_ADDR_VAR 0 2
27218: PUSH
27219: DOUBLE
27220: LD_INT 1
27222: DEC
27223: ST_TO_ADDR
27224: LD_INT 16
27226: PUSH
27227: FOR_TO
27228: IFFALSE 27427
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27230: LD_ADDR_VAR 0 3
27234: PUSH
27235: LD_INT 10
27237: PUSH
27238: LD_INT 20
27240: PUSH
27241: LD_INT 30
27243: PUSH
27244: LD_INT 40
27246: PUSH
27247: LD_INT 50
27249: PUSH
27250: LD_INT 60
27252: PUSH
27253: LD_INT 70
27255: PUSH
27256: LD_INT 80
27258: PUSH
27259: LD_INT 90
27261: PUSH
27262: LD_INT 100
27264: PUSH
27265: LD_INT 110
27267: PUSH
27268: LD_INT 120
27270: PUSH
27271: LD_INT 130
27273: PUSH
27274: LD_INT 140
27276: PUSH
27277: LD_INT 150
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 1
27299: PPUSH
27300: LD_INT 15
27302: PPUSH
27303: CALL_OW 12
27307: ARRAY
27308: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27309: LD_ADDR_VAR 0 4
27313: PUSH
27314: LD_INT 10
27316: PUSH
27317: LD_INT 20
27319: PUSH
27320: LD_INT 30
27322: PUSH
27323: LD_INT 40
27325: PUSH
27326: LD_INT 50
27328: PUSH
27329: LD_INT 60
27331: PUSH
27332: LD_INT 70
27334: PUSH
27335: LD_INT 80
27337: PUSH
27338: LD_INT 90
27340: PUSH
27341: LD_INT 100
27343: PUSH
27344: LD_INT 110
27346: PUSH
27347: LD_INT 120
27349: PUSH
27350: LD_INT 130
27352: PUSH
27353: LD_INT 140
27355: PUSH
27356: LD_INT 150
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: PPUSH
27379: LD_INT 15
27381: PPUSH
27382: CALL_OW 12
27386: ARRAY
27387: ST_TO_ADDR
// if ValidHex ( x , y ) then
27388: LD_VAR 0 3
27392: PPUSH
27393: LD_VAR 0 4
27397: PPUSH
27398: CALL_OW 488
27402: IFFALSE 27425
// begin result := [ x , y ] ;
27404: LD_ADDR_VAR 0 1
27408: PUSH
27409: LD_VAR 0 3
27413: PUSH
27414: LD_VAR 0 4
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: ST_TO_ADDR
// break ;
27423: GO 27427
// end ; end ;
27425: GO 27227
27427: POP
27428: POP
// if result then
27429: LD_VAR 0 1
27433: IFFALSE 27493
// begin ToLua ( playSibBomb() ) ;
27435: LD_STRING playSibBomb()
27437: PPUSH
27438: CALL_OW 559
// wait ( 0 0$14 ) ;
27442: LD_INT 490
27444: PPUSH
27445: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27449: LD_VAR 0 1
27453: PUSH
27454: LD_INT 1
27456: ARRAY
27457: PPUSH
27458: LD_VAR 0 1
27462: PUSH
27463: LD_INT 2
27465: ARRAY
27466: PPUSH
27467: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27471: LD_VAR 0 1
27475: PUSH
27476: LD_INT 1
27478: ARRAY
27479: PPUSH
27480: LD_VAR 0 1
27484: PUSH
27485: LD_INT 2
27487: ARRAY
27488: PPUSH
27489: CALL_OW 429
// end ; end ;
27493: LD_VAR 0 1
27497: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27498: LD_EXP 38
27502: PUSH
27503: LD_EXP 60
27507: AND
27508: IFFALSE 27520
27510: GO 27512
27512: DISABLE
// YouLost (  ) ;
27513: LD_STRING 
27515: PPUSH
27516: CALL_OW 104
27520: END
// every 0 0$1 trigger StreamModeActive and sFog do
27521: LD_EXP 38
27525: PUSH
27526: LD_EXP 59
27530: AND
27531: IFFALSE 27545
27533: GO 27535
27535: DISABLE
// FogOff ( your_side ) ;
27536: LD_OWVAR 2
27540: PPUSH
27541: CALL_OW 344
27545: END
// every 0 0$1 trigger StreamModeActive and sSun do
27546: LD_EXP 38
27550: PUSH
27551: LD_EXP 61
27555: AND
27556: IFFALSE 27584
27558: GO 27560
27560: DISABLE
// begin solar_recharge_percent := 0 ;
27561: LD_ADDR_OWVAR 79
27565: PUSH
27566: LD_INT 0
27568: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27569: LD_INT 10500
27571: PPUSH
27572: CALL_OW 67
// solar_recharge_percent := 100 ;
27576: LD_ADDR_OWVAR 79
27580: PUSH
27581: LD_INT 100
27583: ST_TO_ADDR
// end ;
27584: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27585: LD_EXP 38
27589: PUSH
27590: LD_EXP 62
27594: AND
27595: IFFALSE 27834
27597: GO 27599
27599: DISABLE
27600: LD_INT 0
27602: PPUSH
27603: PPUSH
27604: PPUSH
// begin tmp := [ ] ;
27605: LD_ADDR_VAR 0 3
27609: PUSH
27610: EMPTY
27611: ST_TO_ADDR
// for i := 1 to 6 do
27612: LD_ADDR_VAR 0 1
27616: PUSH
27617: DOUBLE
27618: LD_INT 1
27620: DEC
27621: ST_TO_ADDR
27622: LD_INT 6
27624: PUSH
27625: FOR_TO
27626: IFFALSE 27731
// begin uc_nation := nation_nature ;
27628: LD_ADDR_OWVAR 21
27632: PUSH
27633: LD_INT 0
27635: ST_TO_ADDR
// uc_side := 0 ;
27636: LD_ADDR_OWVAR 20
27640: PUSH
27641: LD_INT 0
27643: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27644: LD_ADDR_OWVAR 29
27648: PUSH
27649: LD_INT 12
27651: PUSH
27652: LD_INT 12
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: ST_TO_ADDR
// hc_agressivity := 20 ;
27659: LD_ADDR_OWVAR 35
27663: PUSH
27664: LD_INT 20
27666: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27667: LD_ADDR_OWVAR 28
27671: PUSH
27672: LD_INT 17
27674: ST_TO_ADDR
// hc_gallery :=  ;
27675: LD_ADDR_OWVAR 33
27679: PUSH
27680: LD_STRING 
27682: ST_TO_ADDR
// hc_name :=  ;
27683: LD_ADDR_OWVAR 26
27687: PUSH
27688: LD_STRING 
27690: ST_TO_ADDR
// un := CreateHuman ;
27691: LD_ADDR_VAR 0 2
27695: PUSH
27696: CALL_OW 44
27700: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27701: LD_VAR 0 2
27705: PPUSH
27706: LD_INT 1
27708: PPUSH
27709: CALL_OW 51
// tmp := tmp ^ un ;
27713: LD_ADDR_VAR 0 3
27717: PUSH
27718: LD_VAR 0 3
27722: PUSH
27723: LD_VAR 0 2
27727: ADD
27728: ST_TO_ADDR
// end ;
27729: GO 27625
27731: POP
27732: POP
// repeat wait ( 0 0$1 ) ;
27733: LD_INT 35
27735: PPUSH
27736: CALL_OW 67
// for un in tmp do
27740: LD_ADDR_VAR 0 2
27744: PUSH
27745: LD_VAR 0 3
27749: PUSH
27750: FOR_IN
27751: IFFALSE 27825
// begin if IsDead ( un ) then
27753: LD_VAR 0 2
27757: PPUSH
27758: CALL_OW 301
27762: IFFALSE 27782
// begin tmp := tmp diff un ;
27764: LD_ADDR_VAR 0 3
27768: PUSH
27769: LD_VAR 0 3
27773: PUSH
27774: LD_VAR 0 2
27778: DIFF
27779: ST_TO_ADDR
// continue ;
27780: GO 27750
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27782: LD_VAR 0 2
27786: PPUSH
27787: LD_INT 3
27789: PUSH
27790: LD_INT 22
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PPUSH
27804: CALL_OW 69
27808: PPUSH
27809: LD_VAR 0 2
27813: PPUSH
27814: CALL_OW 74
27818: PPUSH
27819: CALL_OW 115
// end ;
27823: GO 27750
27825: POP
27826: POP
// until not tmp ;
27827: LD_VAR 0 3
27831: NOT
27832: IFFALSE 27733
// end ;
27834: PPOPN 3
27836: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27837: LD_EXP 38
27841: PUSH
27842: LD_EXP 63
27846: AND
27847: IFFALSE 27901
27849: GO 27851
27851: DISABLE
// begin ToLua ( displayTroll(); ) ;
27852: LD_STRING displayTroll();
27854: PPUSH
27855: CALL_OW 559
// wait ( 3 3$00 ) ;
27859: LD_INT 6300
27861: PPUSH
27862: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27866: LD_STRING hideTroll();
27868: PPUSH
27869: CALL_OW 559
// wait ( 1 1$00 ) ;
27873: LD_INT 2100
27875: PPUSH
27876: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27880: LD_STRING displayTroll();
27882: PPUSH
27883: CALL_OW 559
// wait ( 1 1$00 ) ;
27887: LD_INT 2100
27889: PPUSH
27890: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27894: LD_STRING hideTroll();
27896: PPUSH
27897: CALL_OW 559
// end ;
27901: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27902: LD_EXP 38
27906: PUSH
27907: LD_EXP 64
27911: AND
27912: IFFALSE 27975
27914: GO 27916
27916: DISABLE
27917: LD_INT 0
27919: PPUSH
// begin p := 0 ;
27920: LD_ADDR_VAR 0 1
27924: PUSH
27925: LD_INT 0
27927: ST_TO_ADDR
// repeat game_speed := 1 ;
27928: LD_ADDR_OWVAR 65
27932: PUSH
27933: LD_INT 1
27935: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27936: LD_INT 35
27938: PPUSH
27939: CALL_OW 67
// p := p + 1 ;
27943: LD_ADDR_VAR 0 1
27947: PUSH
27948: LD_VAR 0 1
27952: PUSH
27953: LD_INT 1
27955: PLUS
27956: ST_TO_ADDR
// until p >= 60 ;
27957: LD_VAR 0 1
27961: PUSH
27962: LD_INT 60
27964: GREATEREQUAL
27965: IFFALSE 27928
// game_speed := 4 ;
27967: LD_ADDR_OWVAR 65
27971: PUSH
27972: LD_INT 4
27974: ST_TO_ADDR
// end ;
27975: PPOPN 1
27977: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27978: LD_EXP 38
27982: PUSH
27983: LD_EXP 65
27987: AND
27988: IFFALSE 28134
27990: GO 27992
27992: DISABLE
27993: LD_INT 0
27995: PPUSH
27996: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27997: LD_ADDR_VAR 0 1
28001: PUSH
28002: LD_INT 22
28004: PUSH
28005: LD_OWVAR 2
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 2
28016: PUSH
28017: LD_INT 30
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 30
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PPUSH
28046: CALL_OW 69
28050: ST_TO_ADDR
// if not depot then
28051: LD_VAR 0 1
28055: NOT
28056: IFFALSE 28060
// exit ;
28058: GO 28134
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28060: LD_ADDR_VAR 0 2
28064: PUSH
28065: LD_VAR 0 1
28069: PUSH
28070: LD_INT 1
28072: PPUSH
28073: LD_VAR 0 1
28077: PPUSH
28078: CALL_OW 12
28082: ARRAY
28083: PPUSH
28084: CALL_OW 274
28088: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28089: LD_VAR 0 2
28093: PPUSH
28094: LD_INT 1
28096: PPUSH
28097: LD_INT 0
28099: PPUSH
28100: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28104: LD_VAR 0 2
28108: PPUSH
28109: LD_INT 2
28111: PPUSH
28112: LD_INT 0
28114: PPUSH
28115: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28119: LD_VAR 0 2
28123: PPUSH
28124: LD_INT 3
28126: PPUSH
28127: LD_INT 0
28129: PPUSH
28130: CALL_OW 277
// end ;
28134: PPOPN 2
28136: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28137: LD_EXP 38
28141: PUSH
28142: LD_EXP 66
28146: AND
28147: IFFALSE 28244
28149: GO 28151
28151: DISABLE
28152: LD_INT 0
28154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28155: LD_ADDR_VAR 0 1
28159: PUSH
28160: LD_INT 22
28162: PUSH
28163: LD_OWVAR 2
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 21
28174: PUSH
28175: LD_INT 1
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 3
28184: PUSH
28185: LD_INT 23
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: PPUSH
28204: CALL_OW 69
28208: ST_TO_ADDR
// if not tmp then
28209: LD_VAR 0 1
28213: NOT
28214: IFFALSE 28218
// exit ;
28216: GO 28244
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28218: LD_VAR 0 1
28222: PUSH
28223: LD_INT 1
28225: PPUSH
28226: LD_VAR 0 1
28230: PPUSH
28231: CALL_OW 12
28235: ARRAY
28236: PPUSH
28237: LD_INT 200
28239: PPUSH
28240: CALL_OW 234
// end ;
28244: PPOPN 1
28246: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28247: LD_EXP 38
28251: PUSH
28252: LD_EXP 67
28256: AND
28257: IFFALSE 28336
28259: GO 28261
28261: DISABLE
28262: LD_INT 0
28264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28265: LD_ADDR_VAR 0 1
28269: PUSH
28270: LD_INT 22
28272: PUSH
28273: LD_OWVAR 2
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 21
28284: PUSH
28285: LD_INT 2
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PPUSH
28296: CALL_OW 69
28300: ST_TO_ADDR
// if not tmp then
28301: LD_VAR 0 1
28305: NOT
28306: IFFALSE 28310
// exit ;
28308: GO 28336
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28310: LD_VAR 0 1
28314: PUSH
28315: LD_INT 1
28317: PPUSH
28318: LD_VAR 0 1
28322: PPUSH
28323: CALL_OW 12
28327: ARRAY
28328: PPUSH
28329: LD_INT 60
28331: PPUSH
28332: CALL_OW 234
// end ;
28336: PPOPN 1
28338: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28339: LD_EXP 38
28343: PUSH
28344: LD_EXP 68
28348: AND
28349: IFFALSE 28448
28351: GO 28353
28353: DISABLE
28354: LD_INT 0
28356: PPUSH
28357: PPUSH
// begin enable ;
28358: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28359: LD_ADDR_VAR 0 1
28363: PUSH
28364: LD_INT 22
28366: PUSH
28367: LD_OWVAR 2
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 61
28378: PUSH
28379: EMPTY
28380: LIST
28381: PUSH
28382: LD_INT 33
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: LIST
28396: PPUSH
28397: CALL_OW 69
28401: ST_TO_ADDR
// if not tmp then
28402: LD_VAR 0 1
28406: NOT
28407: IFFALSE 28411
// exit ;
28409: GO 28448
// for i in tmp do
28411: LD_ADDR_VAR 0 2
28415: PUSH
28416: LD_VAR 0 1
28420: PUSH
28421: FOR_IN
28422: IFFALSE 28446
// if IsControledBy ( i ) then
28424: LD_VAR 0 2
28428: PPUSH
28429: CALL_OW 312
28433: IFFALSE 28444
// ComUnlink ( i ) ;
28435: LD_VAR 0 2
28439: PPUSH
28440: CALL_OW 136
28444: GO 28421
28446: POP
28447: POP
// end ;
28448: PPOPN 2
28450: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28451: LD_EXP 38
28455: PUSH
28456: LD_EXP 69
28460: AND
28461: IFFALSE 28601
28463: GO 28465
28465: DISABLE
28466: LD_INT 0
28468: PPUSH
28469: PPUSH
// begin ToLua ( displayPowell(); ) ;
28470: LD_STRING displayPowell();
28472: PPUSH
28473: CALL_OW 559
// uc_side := 0 ;
28477: LD_ADDR_OWVAR 20
28481: PUSH
28482: LD_INT 0
28484: ST_TO_ADDR
// uc_nation := 2 ;
28485: LD_ADDR_OWVAR 21
28489: PUSH
28490: LD_INT 2
28492: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28493: LD_ADDR_OWVAR 37
28497: PUSH
28498: LD_INT 14
28500: ST_TO_ADDR
// vc_engine := engine_siberite ;
28501: LD_ADDR_OWVAR 39
28505: PUSH
28506: LD_INT 3
28508: ST_TO_ADDR
// vc_control := control_apeman ;
28509: LD_ADDR_OWVAR 38
28513: PUSH
28514: LD_INT 5
28516: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28517: LD_ADDR_OWVAR 40
28521: PUSH
28522: LD_INT 29
28524: ST_TO_ADDR
// un := CreateVehicle ;
28525: LD_ADDR_VAR 0 2
28529: PUSH
28530: CALL_OW 45
28534: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28535: LD_VAR 0 2
28539: PPUSH
28540: LD_INT 1
28542: PPUSH
28543: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28547: LD_INT 35
28549: PPUSH
28550: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28554: LD_VAR 0 2
28558: PPUSH
28559: LD_INT 22
28561: PUSH
28562: LD_OWVAR 2
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PPUSH
28571: CALL_OW 69
28575: PPUSH
28576: LD_VAR 0 2
28580: PPUSH
28581: CALL_OW 74
28585: PPUSH
28586: CALL_OW 115
// until IsDead ( un ) ;
28590: LD_VAR 0 2
28594: PPUSH
28595: CALL_OW 301
28599: IFFALSE 28547
// end ;
28601: PPOPN 2
28603: END
// every 0 0$1 trigger StreamModeActive and sStu do
28604: LD_EXP 38
28608: PUSH
28609: LD_EXP 77
28613: AND
28614: IFFALSE 28630
28616: GO 28618
28618: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28619: LD_STRING displayStucuk();
28621: PPUSH
28622: CALL_OW 559
// ResetFog ;
28626: CALL_OW 335
// end ;
28630: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28631: LD_EXP 38
28635: PUSH
28636: LD_EXP 70
28640: AND
28641: IFFALSE 28782
28643: GO 28645
28645: DISABLE
28646: LD_INT 0
28648: PPUSH
28649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28650: LD_ADDR_VAR 0 2
28654: PUSH
28655: LD_INT 22
28657: PUSH
28658: LD_OWVAR 2
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 21
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PPUSH
28681: CALL_OW 69
28685: ST_TO_ADDR
// if not tmp then
28686: LD_VAR 0 2
28690: NOT
28691: IFFALSE 28695
// exit ;
28693: GO 28782
// un := tmp [ rand ( 1 , tmp ) ] ;
28695: LD_ADDR_VAR 0 1
28699: PUSH
28700: LD_VAR 0 2
28704: PUSH
28705: LD_INT 1
28707: PPUSH
28708: LD_VAR 0 2
28712: PPUSH
28713: CALL_OW 12
28717: ARRAY
28718: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28719: LD_VAR 0 1
28723: PPUSH
28724: LD_INT 0
28726: PPUSH
28727: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28731: LD_VAR 0 1
28735: PPUSH
28736: LD_OWVAR 3
28740: PUSH
28741: LD_VAR 0 1
28745: DIFF
28746: PPUSH
28747: LD_VAR 0 1
28751: PPUSH
28752: CALL_OW 74
28756: PPUSH
28757: CALL_OW 115
// wait ( 0 0$20 ) ;
28761: LD_INT 700
28763: PPUSH
28764: CALL_OW 67
// SetSide ( un , your_side ) ;
28768: LD_VAR 0 1
28772: PPUSH
28773: LD_OWVAR 2
28777: PPUSH
28778: CALL_OW 235
// end ;
28782: PPOPN 2
28784: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28785: LD_EXP 38
28789: PUSH
28790: LD_EXP 71
28794: AND
28795: IFFALSE 28901
28797: GO 28799
28799: DISABLE
28800: LD_INT 0
28802: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28803: LD_ADDR_VAR 0 1
28807: PUSH
28808: LD_INT 22
28810: PUSH
28811: LD_OWVAR 2
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 2
28822: PUSH
28823: LD_INT 30
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 30
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: LIST
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PPUSH
28852: CALL_OW 69
28856: ST_TO_ADDR
// if not depot then
28857: LD_VAR 0 1
28861: NOT
28862: IFFALSE 28866
// exit ;
28864: GO 28901
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28866: LD_VAR 0 1
28870: PUSH
28871: LD_INT 1
28873: ARRAY
28874: PPUSH
28875: CALL_OW 250
28879: PPUSH
28880: LD_VAR 0 1
28884: PUSH
28885: LD_INT 1
28887: ARRAY
28888: PPUSH
28889: CALL_OW 251
28893: PPUSH
28894: LD_INT 70
28896: PPUSH
28897: CALL_OW 495
// end ;
28901: PPOPN 1
28903: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28904: LD_EXP 38
28908: PUSH
28909: LD_EXP 72
28913: AND
28914: IFFALSE 29125
28916: GO 28918
28918: DISABLE
28919: LD_INT 0
28921: PPUSH
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28926: LD_ADDR_VAR 0 5
28930: PUSH
28931: LD_INT 22
28933: PUSH
28934: LD_OWVAR 2
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 21
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PPUSH
28957: CALL_OW 69
28961: ST_TO_ADDR
// if not tmp then
28962: LD_VAR 0 5
28966: NOT
28967: IFFALSE 28971
// exit ;
28969: GO 29125
// for i in tmp do
28971: LD_ADDR_VAR 0 1
28975: PUSH
28976: LD_VAR 0 5
28980: PUSH
28981: FOR_IN
28982: IFFALSE 29123
// begin d := rand ( 0 , 5 ) ;
28984: LD_ADDR_VAR 0 4
28988: PUSH
28989: LD_INT 0
28991: PPUSH
28992: LD_INT 5
28994: PPUSH
28995: CALL_OW 12
28999: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29000: LD_ADDR_VAR 0 2
29004: PUSH
29005: LD_VAR 0 1
29009: PPUSH
29010: CALL_OW 250
29014: PPUSH
29015: LD_VAR 0 4
29019: PPUSH
29020: LD_INT 3
29022: PPUSH
29023: LD_INT 12
29025: PPUSH
29026: CALL_OW 12
29030: PPUSH
29031: CALL_OW 272
29035: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29036: LD_ADDR_VAR 0 3
29040: PUSH
29041: LD_VAR 0 1
29045: PPUSH
29046: CALL_OW 251
29050: PPUSH
29051: LD_VAR 0 4
29055: PPUSH
29056: LD_INT 3
29058: PPUSH
29059: LD_INT 12
29061: PPUSH
29062: CALL_OW 12
29066: PPUSH
29067: CALL_OW 273
29071: ST_TO_ADDR
// if ValidHex ( x , y ) then
29072: LD_VAR 0 2
29076: PPUSH
29077: LD_VAR 0 3
29081: PPUSH
29082: CALL_OW 488
29086: IFFALSE 29121
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29088: LD_VAR 0 1
29092: PPUSH
29093: LD_VAR 0 2
29097: PPUSH
29098: LD_VAR 0 3
29102: PPUSH
29103: LD_INT 3
29105: PPUSH
29106: LD_INT 6
29108: PPUSH
29109: CALL_OW 12
29113: PPUSH
29114: LD_INT 1
29116: PPUSH
29117: CALL_OW 483
// end ;
29121: GO 28981
29123: POP
29124: POP
// end ;
29125: PPOPN 5
29127: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29128: LD_EXP 38
29132: PUSH
29133: LD_EXP 73
29137: AND
29138: IFFALSE 29232
29140: GO 29142
29142: DISABLE
29143: LD_INT 0
29145: PPUSH
29146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29147: LD_ADDR_VAR 0 2
29151: PUSH
29152: LD_INT 22
29154: PUSH
29155: LD_OWVAR 2
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 32
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 21
29176: PUSH
29177: LD_INT 2
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: LIST
29188: PPUSH
29189: CALL_OW 69
29193: ST_TO_ADDR
// if not tmp then
29194: LD_VAR 0 2
29198: NOT
29199: IFFALSE 29203
// exit ;
29201: GO 29232
// for i in tmp do
29203: LD_ADDR_VAR 0 1
29207: PUSH
29208: LD_VAR 0 2
29212: PUSH
29213: FOR_IN
29214: IFFALSE 29230
// SetFuel ( i , 0 ) ;
29216: LD_VAR 0 1
29220: PPUSH
29221: LD_INT 0
29223: PPUSH
29224: CALL_OW 240
29228: GO 29213
29230: POP
29231: POP
// end ;
29232: PPOPN 2
29234: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29235: LD_EXP 38
29239: PUSH
29240: LD_EXP 74
29244: AND
29245: IFFALSE 29311
29247: GO 29249
29249: DISABLE
29250: LD_INT 0
29252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29253: LD_ADDR_VAR 0 1
29257: PUSH
29258: LD_INT 22
29260: PUSH
29261: LD_OWVAR 2
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 30
29272: PUSH
29273: LD_INT 29
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PPUSH
29284: CALL_OW 69
29288: ST_TO_ADDR
// if not tmp then
29289: LD_VAR 0 1
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29311
// DestroyUnit ( tmp [ 1 ] ) ;
29298: LD_VAR 0 1
29302: PUSH
29303: LD_INT 1
29305: ARRAY
29306: PPUSH
29307: CALL_OW 65
// end ;
29311: PPOPN 1
29313: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29314: LD_EXP 38
29318: PUSH
29319: LD_EXP 76
29323: AND
29324: IFFALSE 29453
29326: GO 29328
29328: DISABLE
29329: LD_INT 0
29331: PPUSH
// begin uc_side := 0 ;
29332: LD_ADDR_OWVAR 20
29336: PUSH
29337: LD_INT 0
29339: ST_TO_ADDR
// uc_nation := nation_arabian ;
29340: LD_ADDR_OWVAR 21
29344: PUSH
29345: LD_INT 2
29347: ST_TO_ADDR
// hc_gallery :=  ;
29348: LD_ADDR_OWVAR 33
29352: PUSH
29353: LD_STRING 
29355: ST_TO_ADDR
// hc_name :=  ;
29356: LD_ADDR_OWVAR 26
29360: PUSH
29361: LD_STRING 
29363: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29364: LD_INT 1
29366: PPUSH
29367: LD_INT 11
29369: PPUSH
29370: LD_INT 10
29372: PPUSH
29373: CALL_OW 380
// un := CreateHuman ;
29377: LD_ADDR_VAR 0 1
29381: PUSH
29382: CALL_OW 44
29386: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29387: LD_VAR 0 1
29391: PPUSH
29392: LD_INT 1
29394: PPUSH
29395: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29399: LD_INT 35
29401: PPUSH
29402: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29406: LD_VAR 0 1
29410: PPUSH
29411: LD_INT 22
29413: PUSH
29414: LD_OWVAR 2
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PPUSH
29423: CALL_OW 69
29427: PPUSH
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 74
29437: PPUSH
29438: CALL_OW 115
// until IsDead ( un ) ;
29442: LD_VAR 0 1
29446: PPUSH
29447: CALL_OW 301
29451: IFFALSE 29399
// end ;
29453: PPOPN 1
29455: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29456: LD_EXP 38
29460: PUSH
29461: LD_EXP 78
29465: AND
29466: IFFALSE 29478
29468: GO 29470
29470: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29471: LD_STRING earthquake(getX(game), 0, 32)
29473: PPUSH
29474: CALL_OW 559
29478: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29479: LD_EXP 38
29483: PUSH
29484: LD_EXP 79
29488: AND
29489: IFFALSE 29580
29491: GO 29493
29493: DISABLE
29494: LD_INT 0
29496: PPUSH
// begin enable ;
29497: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29498: LD_ADDR_VAR 0 1
29502: PUSH
29503: LD_INT 22
29505: PUSH
29506: LD_OWVAR 2
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 21
29517: PUSH
29518: LD_INT 2
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 33
29527: PUSH
29528: LD_INT 3
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: LIST
29539: PPUSH
29540: CALL_OW 69
29544: ST_TO_ADDR
// if not tmp then
29545: LD_VAR 0 1
29549: NOT
29550: IFFALSE 29554
// exit ;
29552: GO 29580
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29554: LD_VAR 0 1
29558: PUSH
29559: LD_INT 1
29561: PPUSH
29562: LD_VAR 0 1
29566: PPUSH
29567: CALL_OW 12
29571: ARRAY
29572: PPUSH
29573: LD_INT 1
29575: PPUSH
29576: CALL_OW 234
// end ;
29580: PPOPN 1
29582: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29583: LD_EXP 38
29587: PUSH
29588: LD_EXP 80
29592: AND
29593: IFFALSE 29734
29595: GO 29597
29597: DISABLE
29598: LD_INT 0
29600: PPUSH
29601: PPUSH
29602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29603: LD_ADDR_VAR 0 3
29607: PUSH
29608: LD_INT 22
29610: PUSH
29611: LD_OWVAR 2
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 25
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PPUSH
29634: CALL_OW 69
29638: ST_TO_ADDR
// if not tmp then
29639: LD_VAR 0 3
29643: NOT
29644: IFFALSE 29648
// exit ;
29646: GO 29734
// un := tmp [ rand ( 1 , tmp ) ] ;
29648: LD_ADDR_VAR 0 2
29652: PUSH
29653: LD_VAR 0 3
29657: PUSH
29658: LD_INT 1
29660: PPUSH
29661: LD_VAR 0 3
29665: PPUSH
29666: CALL_OW 12
29670: ARRAY
29671: ST_TO_ADDR
// if Crawls ( un ) then
29672: LD_VAR 0 2
29676: PPUSH
29677: CALL_OW 318
29681: IFFALSE 29692
// ComWalk ( un ) ;
29683: LD_VAR 0 2
29687: PPUSH
29688: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29692: LD_VAR 0 2
29696: PPUSH
29697: LD_INT 9
29699: PPUSH
29700: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29704: LD_INT 28
29706: PPUSH
29707: LD_OWVAR 2
29711: PPUSH
29712: LD_INT 2
29714: PPUSH
29715: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29719: LD_INT 29
29721: PPUSH
29722: LD_OWVAR 2
29726: PPUSH
29727: LD_INT 2
29729: PPUSH
29730: CALL_OW 322
// end ;
29734: PPOPN 3
29736: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29737: LD_EXP 38
29741: PUSH
29742: LD_EXP 81
29746: AND
29747: IFFALSE 29858
29749: GO 29751
29751: DISABLE
29752: LD_INT 0
29754: PPUSH
29755: PPUSH
29756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29757: LD_ADDR_VAR 0 3
29761: PUSH
29762: LD_INT 22
29764: PUSH
29765: LD_OWVAR 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 25
29776: PUSH
29777: LD_INT 1
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PPUSH
29788: CALL_OW 69
29792: ST_TO_ADDR
// if not tmp then
29793: LD_VAR 0 3
29797: NOT
29798: IFFALSE 29802
// exit ;
29800: GO 29858
// un := tmp [ rand ( 1 , tmp ) ] ;
29802: LD_ADDR_VAR 0 2
29806: PUSH
29807: LD_VAR 0 3
29811: PUSH
29812: LD_INT 1
29814: PPUSH
29815: LD_VAR 0 3
29819: PPUSH
29820: CALL_OW 12
29824: ARRAY
29825: ST_TO_ADDR
// if Crawls ( un ) then
29826: LD_VAR 0 2
29830: PPUSH
29831: CALL_OW 318
29835: IFFALSE 29846
// ComWalk ( un ) ;
29837: LD_VAR 0 2
29841: PPUSH
29842: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29846: LD_VAR 0 2
29850: PPUSH
29851: LD_INT 8
29853: PPUSH
29854: CALL_OW 336
// end ;
29858: PPOPN 3
29860: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29861: LD_EXP 38
29865: PUSH
29866: LD_EXP 82
29870: AND
29871: IFFALSE 30015
29873: GO 29875
29875: DISABLE
29876: LD_INT 0
29878: PPUSH
29879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29880: LD_ADDR_VAR 0 2
29884: PUSH
29885: LD_INT 22
29887: PUSH
29888: LD_OWVAR 2
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 21
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 2
29909: PUSH
29910: LD_INT 34
29912: PUSH
29913: LD_INT 12
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 34
29922: PUSH
29923: LD_INT 51
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 34
29932: PUSH
29933: LD_INT 32
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: LIST
29950: PPUSH
29951: CALL_OW 69
29955: ST_TO_ADDR
// if not tmp then
29956: LD_VAR 0 2
29960: NOT
29961: IFFALSE 29965
// exit ;
29963: GO 30015
// for i in tmp do
29965: LD_ADDR_VAR 0 1
29969: PUSH
29970: LD_VAR 0 2
29974: PUSH
29975: FOR_IN
29976: IFFALSE 30013
// if GetCargo ( i , mat_artifact ) = 0 then
29978: LD_VAR 0 1
29982: PPUSH
29983: LD_INT 4
29985: PPUSH
29986: CALL_OW 289
29990: PUSH
29991: LD_INT 0
29993: EQUAL
29994: IFFALSE 30011
// SetCargo ( i , mat_siberit , 100 ) ;
29996: LD_VAR 0 1
30000: PPUSH
30001: LD_INT 3
30003: PPUSH
30004: LD_INT 100
30006: PPUSH
30007: CALL_OW 290
30011: GO 29975
30013: POP
30014: POP
// end ;
30015: PPOPN 2
30017: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30018: LD_EXP 38
30022: PUSH
30023: LD_EXP 83
30027: AND
30028: IFFALSE 30211
30030: GO 30032
30032: DISABLE
30033: LD_INT 0
30035: PPUSH
30036: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30037: LD_ADDR_VAR 0 2
30041: PUSH
30042: LD_INT 22
30044: PUSH
30045: LD_OWVAR 2
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PPUSH
30054: CALL_OW 69
30058: ST_TO_ADDR
// if not tmp then
30059: LD_VAR 0 2
30063: NOT
30064: IFFALSE 30068
// exit ;
30066: GO 30211
// for i := 1 to 2 do
30068: LD_ADDR_VAR 0 1
30072: PUSH
30073: DOUBLE
30074: LD_INT 1
30076: DEC
30077: ST_TO_ADDR
30078: LD_INT 2
30080: PUSH
30081: FOR_TO
30082: IFFALSE 30209
// begin uc_side := your_side ;
30084: LD_ADDR_OWVAR 20
30088: PUSH
30089: LD_OWVAR 2
30093: ST_TO_ADDR
// uc_nation := nation_american ;
30094: LD_ADDR_OWVAR 21
30098: PUSH
30099: LD_INT 1
30101: ST_TO_ADDR
// vc_chassis := us_morphling ;
30102: LD_ADDR_OWVAR 37
30106: PUSH
30107: LD_INT 5
30109: ST_TO_ADDR
// vc_engine := engine_siberite ;
30110: LD_ADDR_OWVAR 39
30114: PUSH
30115: LD_INT 3
30117: ST_TO_ADDR
// vc_control := control_computer ;
30118: LD_ADDR_OWVAR 38
30122: PUSH
30123: LD_INT 3
30125: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30126: LD_ADDR_OWVAR 40
30130: PUSH
30131: LD_INT 10
30133: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30134: LD_VAR 0 2
30138: PUSH
30139: LD_INT 1
30141: ARRAY
30142: PPUSH
30143: CALL_OW 310
30147: NOT
30148: IFFALSE 30195
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30150: CALL_OW 45
30154: PPUSH
30155: LD_VAR 0 2
30159: PUSH
30160: LD_INT 1
30162: ARRAY
30163: PPUSH
30164: CALL_OW 250
30168: PPUSH
30169: LD_VAR 0 2
30173: PUSH
30174: LD_INT 1
30176: ARRAY
30177: PPUSH
30178: CALL_OW 251
30182: PPUSH
30183: LD_INT 12
30185: PPUSH
30186: LD_INT 1
30188: PPUSH
30189: CALL_OW 50
30193: GO 30207
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30195: CALL_OW 45
30199: PPUSH
30200: LD_INT 1
30202: PPUSH
30203: CALL_OW 51
// end ;
30207: GO 30081
30209: POP
30210: POP
// end ;
30211: PPOPN 2
30213: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30214: LD_EXP 38
30218: PUSH
30219: LD_EXP 84
30223: AND
30224: IFFALSE 30446
30226: GO 30228
30228: DISABLE
30229: LD_INT 0
30231: PPUSH
30232: PPUSH
30233: PPUSH
30234: PPUSH
30235: PPUSH
30236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30237: LD_ADDR_VAR 0 6
30241: PUSH
30242: LD_INT 22
30244: PUSH
30245: LD_OWVAR 2
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 21
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: LD_INT 23
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: PPUSH
30286: CALL_OW 69
30290: ST_TO_ADDR
// if not tmp then
30291: LD_VAR 0 6
30295: NOT
30296: IFFALSE 30300
// exit ;
30298: GO 30446
// s1 := rand ( 1 , 4 ) ;
30300: LD_ADDR_VAR 0 2
30304: PUSH
30305: LD_INT 1
30307: PPUSH
30308: LD_INT 4
30310: PPUSH
30311: CALL_OW 12
30315: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30316: LD_ADDR_VAR 0 4
30320: PUSH
30321: LD_VAR 0 6
30325: PUSH
30326: LD_INT 1
30328: ARRAY
30329: PPUSH
30330: LD_VAR 0 2
30334: PPUSH
30335: CALL_OW 259
30339: ST_TO_ADDR
// if s1 = 1 then
30340: LD_VAR 0 2
30344: PUSH
30345: LD_INT 1
30347: EQUAL
30348: IFFALSE 30368
// s2 := rand ( 2 , 4 ) else
30350: LD_ADDR_VAR 0 3
30354: PUSH
30355: LD_INT 2
30357: PPUSH
30358: LD_INT 4
30360: PPUSH
30361: CALL_OW 12
30365: ST_TO_ADDR
30366: GO 30376
// s2 := 1 ;
30368: LD_ADDR_VAR 0 3
30372: PUSH
30373: LD_INT 1
30375: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30376: LD_ADDR_VAR 0 5
30380: PUSH
30381: LD_VAR 0 6
30385: PUSH
30386: LD_INT 1
30388: ARRAY
30389: PPUSH
30390: LD_VAR 0 3
30394: PPUSH
30395: CALL_OW 259
30399: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30400: LD_VAR 0 6
30404: PUSH
30405: LD_INT 1
30407: ARRAY
30408: PPUSH
30409: LD_VAR 0 2
30413: PPUSH
30414: LD_VAR 0 5
30418: PPUSH
30419: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30423: LD_VAR 0 6
30427: PUSH
30428: LD_INT 1
30430: ARRAY
30431: PPUSH
30432: LD_VAR 0 3
30436: PPUSH
30437: LD_VAR 0 4
30441: PPUSH
30442: CALL_OW 237
// end ;
30446: PPOPN 6
30448: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30449: LD_EXP 38
30453: PUSH
30454: LD_EXP 85
30458: AND
30459: IFFALSE 30538
30461: GO 30463
30463: DISABLE
30464: LD_INT 0
30466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30467: LD_ADDR_VAR 0 1
30471: PUSH
30472: LD_INT 22
30474: PUSH
30475: LD_OWVAR 2
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 30
30486: PUSH
30487: LD_INT 3
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PPUSH
30498: CALL_OW 69
30502: ST_TO_ADDR
// if not tmp then
30503: LD_VAR 0 1
30507: NOT
30508: IFFALSE 30512
// exit ;
30510: GO 30538
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30512: LD_VAR 0 1
30516: PUSH
30517: LD_INT 1
30519: PPUSH
30520: LD_VAR 0 1
30524: PPUSH
30525: CALL_OW 12
30529: ARRAY
30530: PPUSH
30531: LD_INT 1
30533: PPUSH
30534: CALL_OW 234
// end ;
30538: PPOPN 1
30540: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30541: LD_EXP 38
30545: PUSH
30546: LD_EXP 86
30550: AND
30551: IFFALSE 30663
30553: GO 30555
30555: DISABLE
30556: LD_INT 0
30558: PPUSH
30559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30560: LD_ADDR_VAR 0 2
30564: PUSH
30565: LD_INT 22
30567: PUSH
30568: LD_OWVAR 2
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 2
30579: PUSH
30580: LD_INT 30
30582: PUSH
30583: LD_INT 27
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 30
30592: PUSH
30593: LD_INT 26
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 30
30602: PUSH
30603: LD_INT 28
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PPUSH
30620: CALL_OW 69
30624: ST_TO_ADDR
// if not tmp then
30625: LD_VAR 0 2
30629: NOT
30630: IFFALSE 30634
// exit ;
30632: GO 30663
// for i in tmp do
30634: LD_ADDR_VAR 0 1
30638: PUSH
30639: LD_VAR 0 2
30643: PUSH
30644: FOR_IN
30645: IFFALSE 30661
// SetLives ( i , 1 ) ;
30647: LD_VAR 0 1
30651: PPUSH
30652: LD_INT 1
30654: PPUSH
30655: CALL_OW 234
30659: GO 30644
30661: POP
30662: POP
// end ;
30663: PPOPN 2
30665: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30666: LD_EXP 38
30670: PUSH
30671: LD_EXP 87
30675: AND
30676: IFFALSE 30963
30678: GO 30680
30680: DISABLE
30681: LD_INT 0
30683: PPUSH
30684: PPUSH
30685: PPUSH
// begin i := rand ( 1 , 7 ) ;
30686: LD_ADDR_VAR 0 1
30690: PUSH
30691: LD_INT 1
30693: PPUSH
30694: LD_INT 7
30696: PPUSH
30697: CALL_OW 12
30701: ST_TO_ADDR
// case i of 1 :
30702: LD_VAR 0 1
30706: PUSH
30707: LD_INT 1
30709: DOUBLE
30710: EQUAL
30711: IFTRUE 30715
30713: GO 30725
30715: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30716: LD_STRING earthquake(getX(game), 0, 32)
30718: PPUSH
30719: CALL_OW 559
30723: GO 30963
30725: LD_INT 2
30727: DOUBLE
30728: EQUAL
30729: IFTRUE 30733
30731: GO 30747
30733: POP
// begin ToLua ( displayStucuk(); ) ;
30734: LD_STRING displayStucuk();
30736: PPUSH
30737: CALL_OW 559
// ResetFog ;
30741: CALL_OW 335
// end ; 3 :
30745: GO 30963
30747: LD_INT 3
30749: DOUBLE
30750: EQUAL
30751: IFTRUE 30755
30753: GO 30859
30755: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30756: LD_ADDR_VAR 0 2
30760: PUSH
30761: LD_INT 22
30763: PUSH
30764: LD_OWVAR 2
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 25
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PPUSH
30787: CALL_OW 69
30791: ST_TO_ADDR
// if not tmp then
30792: LD_VAR 0 2
30796: NOT
30797: IFFALSE 30801
// exit ;
30799: GO 30963
// un := tmp [ rand ( 1 , tmp ) ] ;
30801: LD_ADDR_VAR 0 3
30805: PUSH
30806: LD_VAR 0 2
30810: PUSH
30811: LD_INT 1
30813: PPUSH
30814: LD_VAR 0 2
30818: PPUSH
30819: CALL_OW 12
30823: ARRAY
30824: ST_TO_ADDR
// if Crawls ( un ) then
30825: LD_VAR 0 3
30829: PPUSH
30830: CALL_OW 318
30834: IFFALSE 30845
// ComWalk ( un ) ;
30836: LD_VAR 0 3
30840: PPUSH
30841: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30845: LD_VAR 0 3
30849: PPUSH
30850: LD_INT 8
30852: PPUSH
30853: CALL_OW 336
// end ; 4 :
30857: GO 30963
30859: LD_INT 4
30861: DOUBLE
30862: EQUAL
30863: IFTRUE 30867
30865: GO 30941
30867: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30868: LD_ADDR_VAR 0 2
30872: PUSH
30873: LD_INT 22
30875: PUSH
30876: LD_OWVAR 2
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 30
30887: PUSH
30888: LD_INT 29
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PPUSH
30899: CALL_OW 69
30903: ST_TO_ADDR
// if not tmp then
30904: LD_VAR 0 2
30908: NOT
30909: IFFALSE 30913
// exit ;
30911: GO 30963
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30913: LD_VAR 0 2
30917: PUSH
30918: LD_INT 1
30920: ARRAY
30921: PPUSH
30922: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30926: LD_VAR 0 2
30930: PUSH
30931: LD_INT 1
30933: ARRAY
30934: PPUSH
30935: CALL_OW 65
// end ; 5 .. 7 :
30939: GO 30963
30941: LD_INT 5
30943: DOUBLE
30944: GREATEREQUAL
30945: IFFALSE 30953
30947: LD_INT 7
30949: DOUBLE
30950: LESSEQUAL
30951: IFTRUE 30955
30953: GO 30962
30955: POP
// StreamSibBomb ; end ;
30956: CALL 27200 0 0
30960: GO 30963
30962: POP
// end ;
30963: PPOPN 3
30965: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30966: LD_EXP 38
30970: PUSH
30971: LD_EXP 88
30975: AND
30976: IFFALSE 31132
30978: GO 30980
30980: DISABLE
30981: LD_INT 0
30983: PPUSH
30984: PPUSH
30985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30986: LD_ADDR_VAR 0 2
30990: PUSH
30991: LD_INT 81
30993: PUSH
30994: LD_OWVAR 2
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 2
31005: PUSH
31006: LD_INT 21
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 21
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PPUSH
31035: CALL_OW 69
31039: ST_TO_ADDR
// if not tmp then
31040: LD_VAR 0 2
31044: NOT
31045: IFFALSE 31049
// exit ;
31047: GO 31132
// p := 0 ;
31049: LD_ADDR_VAR 0 3
31053: PUSH
31054: LD_INT 0
31056: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31057: LD_INT 35
31059: PPUSH
31060: CALL_OW 67
// p := p + 1 ;
31064: LD_ADDR_VAR 0 3
31068: PUSH
31069: LD_VAR 0 3
31073: PUSH
31074: LD_INT 1
31076: PLUS
31077: ST_TO_ADDR
// for i in tmp do
31078: LD_ADDR_VAR 0 1
31082: PUSH
31083: LD_VAR 0 2
31087: PUSH
31088: FOR_IN
31089: IFFALSE 31120
// if GetLives ( i ) < 1000 then
31091: LD_VAR 0 1
31095: PPUSH
31096: CALL_OW 256
31100: PUSH
31101: LD_INT 1000
31103: LESS
31104: IFFALSE 31118
// SetLives ( i , 1000 ) ;
31106: LD_VAR 0 1
31110: PPUSH
31111: LD_INT 1000
31113: PPUSH
31114: CALL_OW 234
31118: GO 31088
31120: POP
31121: POP
// until p > 20 ;
31122: LD_VAR 0 3
31126: PUSH
31127: LD_INT 20
31129: GREATER
31130: IFFALSE 31057
// end ;
31132: PPOPN 3
31134: END
// every 0 0$1 trigger StreamModeActive and sTime do
31135: LD_EXP 38
31139: PUSH
31140: LD_EXP 89
31144: AND
31145: IFFALSE 31180
31147: GO 31149
31149: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31150: LD_INT 28
31152: PPUSH
31153: LD_OWVAR 2
31157: PPUSH
31158: LD_INT 2
31160: PPUSH
31161: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31165: LD_INT 30
31167: PPUSH
31168: LD_OWVAR 2
31172: PPUSH
31173: LD_INT 2
31175: PPUSH
31176: CALL_OW 322
// end ;
31180: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31181: LD_EXP 38
31185: PUSH
31186: LD_EXP 90
31190: AND
31191: IFFALSE 31312
31193: GO 31195
31195: DISABLE
31196: LD_INT 0
31198: PPUSH
31199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31200: LD_ADDR_VAR 0 2
31204: PUSH
31205: LD_INT 22
31207: PUSH
31208: LD_OWVAR 2
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 21
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: LD_INT 23
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: PPUSH
31249: CALL_OW 69
31253: ST_TO_ADDR
// if not tmp then
31254: LD_VAR 0 2
31258: NOT
31259: IFFALSE 31263
// exit ;
31261: GO 31312
// for i in tmp do
31263: LD_ADDR_VAR 0 1
31267: PUSH
31268: LD_VAR 0 2
31272: PUSH
31273: FOR_IN
31274: IFFALSE 31310
// begin if Crawls ( i ) then
31276: LD_VAR 0 1
31280: PPUSH
31281: CALL_OW 318
31285: IFFALSE 31296
// ComWalk ( i ) ;
31287: LD_VAR 0 1
31291: PPUSH
31292: CALL_OW 138
// SetClass ( i , 2 ) ;
31296: LD_VAR 0 1
31300: PPUSH
31301: LD_INT 2
31303: PPUSH
31304: CALL_OW 336
// end ;
31308: GO 31273
31310: POP
31311: POP
// end ;
31312: PPOPN 2
31314: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31315: LD_EXP 38
31319: PUSH
31320: LD_EXP 91
31324: AND
31325: IFFALSE 31613
31327: GO 31329
31329: DISABLE
31330: LD_INT 0
31332: PPUSH
31333: PPUSH
31334: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31335: LD_OWVAR 2
31339: PPUSH
31340: LD_INT 9
31342: PPUSH
31343: LD_INT 1
31345: PPUSH
31346: LD_INT 1
31348: PPUSH
31349: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31353: LD_INT 9
31355: PPUSH
31356: LD_OWVAR 2
31360: PPUSH
31361: CALL_OW 343
// uc_side := 9 ;
31365: LD_ADDR_OWVAR 20
31369: PUSH
31370: LD_INT 9
31372: ST_TO_ADDR
// uc_nation := 2 ;
31373: LD_ADDR_OWVAR 21
31377: PUSH
31378: LD_INT 2
31380: ST_TO_ADDR
// hc_name := Dark Warrior ;
31381: LD_ADDR_OWVAR 26
31385: PUSH
31386: LD_STRING Dark Warrior
31388: ST_TO_ADDR
// hc_gallery :=  ;
31389: LD_ADDR_OWVAR 33
31393: PUSH
31394: LD_STRING 
31396: ST_TO_ADDR
// hc_noskilllimit := true ;
31397: LD_ADDR_OWVAR 76
31401: PUSH
31402: LD_INT 1
31404: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31405: LD_ADDR_OWVAR 31
31409: PUSH
31410: LD_INT 30
31412: PUSH
31413: LD_INT 30
31415: PUSH
31416: LD_INT 30
31418: PUSH
31419: LD_INT 30
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: ST_TO_ADDR
// un := CreateHuman ;
31428: LD_ADDR_VAR 0 3
31432: PUSH
31433: CALL_OW 44
31437: ST_TO_ADDR
// hc_noskilllimit := false ;
31438: LD_ADDR_OWVAR 76
31442: PUSH
31443: LD_INT 0
31445: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31446: LD_VAR 0 3
31450: PPUSH
31451: LD_INT 1
31453: PPUSH
31454: CALL_OW 51
// ToLua ( playRanger() ) ;
31458: LD_STRING playRanger()
31460: PPUSH
31461: CALL_OW 559
// p := 0 ;
31465: LD_ADDR_VAR 0 2
31469: PUSH
31470: LD_INT 0
31472: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31473: LD_INT 35
31475: PPUSH
31476: CALL_OW 67
// p := p + 1 ;
31480: LD_ADDR_VAR 0 2
31484: PUSH
31485: LD_VAR 0 2
31489: PUSH
31490: LD_INT 1
31492: PLUS
31493: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31494: LD_VAR 0 3
31498: PPUSH
31499: CALL_OW 256
31503: PUSH
31504: LD_INT 1000
31506: LESS
31507: IFFALSE 31521
// SetLives ( un , 1000 ) ;
31509: LD_VAR 0 3
31513: PPUSH
31514: LD_INT 1000
31516: PPUSH
31517: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31521: LD_VAR 0 3
31525: PPUSH
31526: LD_INT 81
31528: PUSH
31529: LD_OWVAR 2
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 91
31540: PUSH
31541: LD_VAR 0 3
31545: PUSH
31546: LD_INT 30
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PPUSH
31558: CALL_OW 69
31562: PPUSH
31563: LD_VAR 0 3
31567: PPUSH
31568: CALL_OW 74
31572: PPUSH
31573: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31577: LD_VAR 0 2
31581: PUSH
31582: LD_INT 80
31584: GREATER
31585: PUSH
31586: LD_VAR 0 3
31590: PPUSH
31591: CALL_OW 301
31595: OR
31596: IFFALSE 31473
// if un then
31598: LD_VAR 0 3
31602: IFFALSE 31613
// RemoveUnit ( un ) ;
31604: LD_VAR 0 3
31608: PPUSH
31609: CALL_OW 64
// end ;
31613: PPOPN 3
31615: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31616: LD_EXP 92
31620: IFFALSE 31736
31622: GO 31624
31624: DISABLE
31625: LD_INT 0
31627: PPUSH
31628: PPUSH
31629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31630: LD_ADDR_VAR 0 2
31634: PUSH
31635: LD_INT 81
31637: PUSH
31638: LD_OWVAR 2
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 21
31649: PUSH
31650: LD_INT 1
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PPUSH
31661: CALL_OW 69
31665: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31666: LD_STRING playComputer()
31668: PPUSH
31669: CALL_OW 559
// if not tmp then
31673: LD_VAR 0 2
31677: NOT
31678: IFFALSE 31682
// exit ;
31680: GO 31736
// for i in tmp do
31682: LD_ADDR_VAR 0 1
31686: PUSH
31687: LD_VAR 0 2
31691: PUSH
31692: FOR_IN
31693: IFFALSE 31734
// for j := 1 to 4 do
31695: LD_ADDR_VAR 0 3
31699: PUSH
31700: DOUBLE
31701: LD_INT 1
31703: DEC
31704: ST_TO_ADDR
31705: LD_INT 4
31707: PUSH
31708: FOR_TO
31709: IFFALSE 31730
// SetSkill ( i , j , 10 ) ;
31711: LD_VAR 0 1
31715: PPUSH
31716: LD_VAR 0 3
31720: PPUSH
31721: LD_INT 10
31723: PPUSH
31724: CALL_OW 237
31728: GO 31708
31730: POP
31731: POP
31732: GO 31692
31734: POP
31735: POP
// end ;
31736: PPOPN 3
31738: END
// every 0 0$1 trigger s30 do var i , tmp ;
31739: LD_EXP 93
31743: IFFALSE 31812
31745: GO 31747
31747: DISABLE
31748: LD_INT 0
31750: PPUSH
31751: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31752: LD_ADDR_VAR 0 2
31756: PUSH
31757: LD_INT 22
31759: PUSH
31760: LD_OWVAR 2
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PPUSH
31769: CALL_OW 69
31773: ST_TO_ADDR
// if not tmp then
31774: LD_VAR 0 2
31778: NOT
31779: IFFALSE 31783
// exit ;
31781: GO 31812
// for i in tmp do
31783: LD_ADDR_VAR 0 1
31787: PUSH
31788: LD_VAR 0 2
31792: PUSH
31793: FOR_IN
31794: IFFALSE 31810
// SetLives ( i , 300 ) ;
31796: LD_VAR 0 1
31800: PPUSH
31801: LD_INT 300
31803: PPUSH
31804: CALL_OW 234
31808: GO 31793
31810: POP
31811: POP
// end ;
31812: PPOPN 2
31814: END
// every 0 0$1 trigger s60 do var i , tmp ;
31815: LD_EXP 94
31819: IFFALSE 31888
31821: GO 31823
31823: DISABLE
31824: LD_INT 0
31826: PPUSH
31827: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31828: LD_ADDR_VAR 0 2
31832: PUSH
31833: LD_INT 22
31835: PUSH
31836: LD_OWVAR 2
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PPUSH
31845: CALL_OW 69
31849: ST_TO_ADDR
// if not tmp then
31850: LD_VAR 0 2
31854: NOT
31855: IFFALSE 31859
// exit ;
31857: GO 31888
// for i in tmp do
31859: LD_ADDR_VAR 0 1
31863: PUSH
31864: LD_VAR 0 2
31868: PUSH
31869: FOR_IN
31870: IFFALSE 31886
// SetLives ( i , 600 ) ;
31872: LD_VAR 0 1
31876: PPUSH
31877: LD_INT 600
31879: PPUSH
31880: CALL_OW 234
31884: GO 31869
31886: POP
31887: POP
// end ;
31888: PPOPN 2
31890: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31891: LD_INT 0
31893: PPUSH
// case cmd of 301 :
31894: LD_VAR 0 1
31898: PUSH
31899: LD_INT 301
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31907
31905: GO 31939
31907: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31908: LD_VAR 0 6
31912: PPUSH
31913: LD_VAR 0 7
31917: PPUSH
31918: LD_VAR 0 8
31922: PPUSH
31923: LD_VAR 0 4
31927: PPUSH
31928: LD_VAR 0 5
31932: PPUSH
31933: CALL 33140 0 5
31937: GO 32060
31939: LD_INT 302
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31947
31945: GO 31984
31947: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31948: LD_VAR 0 6
31952: PPUSH
31953: LD_VAR 0 7
31957: PPUSH
31958: LD_VAR 0 8
31962: PPUSH
31963: LD_VAR 0 9
31967: PPUSH
31968: LD_VAR 0 4
31972: PPUSH
31973: LD_VAR 0 5
31977: PPUSH
31978: CALL 33231 0 6
31982: GO 32060
31984: LD_INT 303
31986: DOUBLE
31987: EQUAL
31988: IFTRUE 31992
31990: GO 32029
31992: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31993: LD_VAR 0 6
31997: PPUSH
31998: LD_VAR 0 7
32002: PPUSH
32003: LD_VAR 0 8
32007: PPUSH
32008: LD_VAR 0 9
32012: PPUSH
32013: LD_VAR 0 4
32017: PPUSH
32018: LD_VAR 0 5
32022: PPUSH
32023: CALL 32065 0 6
32027: GO 32060
32029: LD_INT 304
32031: DOUBLE
32032: EQUAL
32033: IFTRUE 32037
32035: GO 32059
32037: POP
// hHackTeleport ( unit , x , y ) ; end ;
32038: LD_VAR 0 2
32042: PPUSH
32043: LD_VAR 0 4
32047: PPUSH
32048: LD_VAR 0 5
32052: PPUSH
32053: CALL 33824 0 3
32057: GO 32060
32059: POP
// end ;
32060: LD_VAR 0 12
32064: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32065: LD_INT 0
32067: PPUSH
32068: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32069: LD_VAR 0 1
32073: PUSH
32074: LD_INT 1
32076: LESS
32077: PUSH
32078: LD_VAR 0 1
32082: PUSH
32083: LD_INT 3
32085: GREATER
32086: OR
32087: PUSH
32088: LD_VAR 0 5
32092: PPUSH
32093: LD_VAR 0 6
32097: PPUSH
32098: CALL_OW 428
32102: OR
32103: IFFALSE 32107
// exit ;
32105: GO 32827
// uc_side := your_side ;
32107: LD_ADDR_OWVAR 20
32111: PUSH
32112: LD_OWVAR 2
32116: ST_TO_ADDR
// uc_nation := nation ;
32117: LD_ADDR_OWVAR 21
32121: PUSH
32122: LD_VAR 0 1
32126: ST_TO_ADDR
// bc_level = 1 ;
32127: LD_ADDR_OWVAR 43
32131: PUSH
32132: LD_INT 1
32134: ST_TO_ADDR
// case btype of 1 :
32135: LD_VAR 0 2
32139: PUSH
32140: LD_INT 1
32142: DOUBLE
32143: EQUAL
32144: IFTRUE 32148
32146: GO 32159
32148: POP
// bc_type := b_depot ; 2 :
32149: LD_ADDR_OWVAR 42
32153: PUSH
32154: LD_INT 0
32156: ST_TO_ADDR
32157: GO 32771
32159: LD_INT 2
32161: DOUBLE
32162: EQUAL
32163: IFTRUE 32167
32165: GO 32178
32167: POP
// bc_type := b_warehouse ; 3 :
32168: LD_ADDR_OWVAR 42
32172: PUSH
32173: LD_INT 1
32175: ST_TO_ADDR
32176: GO 32771
32178: LD_INT 3
32180: DOUBLE
32181: EQUAL
32182: IFTRUE 32186
32184: GO 32197
32186: POP
// bc_type := b_lab ; 4 .. 9 :
32187: LD_ADDR_OWVAR 42
32191: PUSH
32192: LD_INT 6
32194: ST_TO_ADDR
32195: GO 32771
32197: LD_INT 4
32199: DOUBLE
32200: GREATEREQUAL
32201: IFFALSE 32209
32203: LD_INT 9
32205: DOUBLE
32206: LESSEQUAL
32207: IFTRUE 32211
32209: GO 32263
32211: POP
// begin bc_type := b_lab_half ;
32212: LD_ADDR_OWVAR 42
32216: PUSH
32217: LD_INT 7
32219: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32220: LD_ADDR_OWVAR 44
32224: PUSH
32225: LD_INT 10
32227: PUSH
32228: LD_INT 11
32230: PUSH
32231: LD_INT 12
32233: PUSH
32234: LD_INT 15
32236: PUSH
32237: LD_INT 14
32239: PUSH
32240: LD_INT 13
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: PUSH
32251: LD_VAR 0 2
32255: PUSH
32256: LD_INT 3
32258: MINUS
32259: ARRAY
32260: ST_TO_ADDR
// end ; 10 .. 13 :
32261: GO 32771
32263: LD_INT 10
32265: DOUBLE
32266: GREATEREQUAL
32267: IFFALSE 32275
32269: LD_INT 13
32271: DOUBLE
32272: LESSEQUAL
32273: IFTRUE 32277
32275: GO 32354
32277: POP
// begin bc_type := b_lab_full ;
32278: LD_ADDR_OWVAR 42
32282: PUSH
32283: LD_INT 8
32285: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32286: LD_ADDR_OWVAR 44
32290: PUSH
32291: LD_INT 10
32293: PUSH
32294: LD_INT 12
32296: PUSH
32297: LD_INT 14
32299: PUSH
32300: LD_INT 13
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: PUSH
32309: LD_VAR 0 2
32313: PUSH
32314: LD_INT 9
32316: MINUS
32317: ARRAY
32318: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32319: LD_ADDR_OWVAR 45
32323: PUSH
32324: LD_INT 11
32326: PUSH
32327: LD_INT 15
32329: PUSH
32330: LD_INT 12
32332: PUSH
32333: LD_INT 15
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: PUSH
32342: LD_VAR 0 2
32346: PUSH
32347: LD_INT 9
32349: MINUS
32350: ARRAY
32351: ST_TO_ADDR
// end ; 14 :
32352: GO 32771
32354: LD_INT 14
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32362
32360: GO 32373
32362: POP
// bc_type := b_workshop ; 15 :
32363: LD_ADDR_OWVAR 42
32367: PUSH
32368: LD_INT 2
32370: ST_TO_ADDR
32371: GO 32771
32373: LD_INT 15
32375: DOUBLE
32376: EQUAL
32377: IFTRUE 32381
32379: GO 32392
32381: POP
// bc_type := b_factory ; 16 :
32382: LD_ADDR_OWVAR 42
32386: PUSH
32387: LD_INT 3
32389: ST_TO_ADDR
32390: GO 32771
32392: LD_INT 16
32394: DOUBLE
32395: EQUAL
32396: IFTRUE 32400
32398: GO 32411
32400: POP
// bc_type := b_ext_gun ; 17 :
32401: LD_ADDR_OWVAR 42
32405: PUSH
32406: LD_INT 17
32408: ST_TO_ADDR
32409: GO 32771
32411: LD_INT 17
32413: DOUBLE
32414: EQUAL
32415: IFTRUE 32419
32417: GO 32447
32419: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32420: LD_ADDR_OWVAR 42
32424: PUSH
32425: LD_INT 19
32427: PUSH
32428: LD_INT 23
32430: PUSH
32431: LD_INT 19
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: LIST
32438: PUSH
32439: LD_VAR 0 1
32443: ARRAY
32444: ST_TO_ADDR
32445: GO 32771
32447: LD_INT 18
32449: DOUBLE
32450: EQUAL
32451: IFTRUE 32455
32453: GO 32466
32455: POP
// bc_type := b_ext_radar ; 19 :
32456: LD_ADDR_OWVAR 42
32460: PUSH
32461: LD_INT 20
32463: ST_TO_ADDR
32464: GO 32771
32466: LD_INT 19
32468: DOUBLE
32469: EQUAL
32470: IFTRUE 32474
32472: GO 32485
32474: POP
// bc_type := b_ext_radio ; 20 :
32475: LD_ADDR_OWVAR 42
32479: PUSH
32480: LD_INT 22
32482: ST_TO_ADDR
32483: GO 32771
32485: LD_INT 20
32487: DOUBLE
32488: EQUAL
32489: IFTRUE 32493
32491: GO 32504
32493: POP
// bc_type := b_ext_siberium ; 21 :
32494: LD_ADDR_OWVAR 42
32498: PUSH
32499: LD_INT 21
32501: ST_TO_ADDR
32502: GO 32771
32504: LD_INT 21
32506: DOUBLE
32507: EQUAL
32508: IFTRUE 32512
32510: GO 32523
32512: POP
// bc_type := b_ext_computer ; 22 :
32513: LD_ADDR_OWVAR 42
32517: PUSH
32518: LD_INT 24
32520: ST_TO_ADDR
32521: GO 32771
32523: LD_INT 22
32525: DOUBLE
32526: EQUAL
32527: IFTRUE 32531
32529: GO 32542
32531: POP
// bc_type := b_ext_track ; 23 :
32532: LD_ADDR_OWVAR 42
32536: PUSH
32537: LD_INT 16
32539: ST_TO_ADDR
32540: GO 32771
32542: LD_INT 23
32544: DOUBLE
32545: EQUAL
32546: IFTRUE 32550
32548: GO 32561
32550: POP
// bc_type := b_ext_laser ; 24 :
32551: LD_ADDR_OWVAR 42
32555: PUSH
32556: LD_INT 25
32558: ST_TO_ADDR
32559: GO 32771
32561: LD_INT 24
32563: DOUBLE
32564: EQUAL
32565: IFTRUE 32569
32567: GO 32580
32569: POP
// bc_type := b_control_tower ; 25 :
32570: LD_ADDR_OWVAR 42
32574: PUSH
32575: LD_INT 36
32577: ST_TO_ADDR
32578: GO 32771
32580: LD_INT 25
32582: DOUBLE
32583: EQUAL
32584: IFTRUE 32588
32586: GO 32599
32588: POP
// bc_type := b_breastwork ; 26 :
32589: LD_ADDR_OWVAR 42
32593: PUSH
32594: LD_INT 31
32596: ST_TO_ADDR
32597: GO 32771
32599: LD_INT 26
32601: DOUBLE
32602: EQUAL
32603: IFTRUE 32607
32605: GO 32618
32607: POP
// bc_type := b_bunker ; 27 :
32608: LD_ADDR_OWVAR 42
32612: PUSH
32613: LD_INT 32
32615: ST_TO_ADDR
32616: GO 32771
32618: LD_INT 27
32620: DOUBLE
32621: EQUAL
32622: IFTRUE 32626
32624: GO 32637
32626: POP
// bc_type := b_turret ; 28 :
32627: LD_ADDR_OWVAR 42
32631: PUSH
32632: LD_INT 33
32634: ST_TO_ADDR
32635: GO 32771
32637: LD_INT 28
32639: DOUBLE
32640: EQUAL
32641: IFTRUE 32645
32643: GO 32656
32645: POP
// bc_type := b_armoury ; 29 :
32646: LD_ADDR_OWVAR 42
32650: PUSH
32651: LD_INT 4
32653: ST_TO_ADDR
32654: GO 32771
32656: LD_INT 29
32658: DOUBLE
32659: EQUAL
32660: IFTRUE 32664
32662: GO 32675
32664: POP
// bc_type := b_barracks ; 30 :
32665: LD_ADDR_OWVAR 42
32669: PUSH
32670: LD_INT 5
32672: ST_TO_ADDR
32673: GO 32771
32675: LD_INT 30
32677: DOUBLE
32678: EQUAL
32679: IFTRUE 32683
32681: GO 32694
32683: POP
// bc_type := b_solar_power ; 31 :
32684: LD_ADDR_OWVAR 42
32688: PUSH
32689: LD_INT 27
32691: ST_TO_ADDR
32692: GO 32771
32694: LD_INT 31
32696: DOUBLE
32697: EQUAL
32698: IFTRUE 32702
32700: GO 32713
32702: POP
// bc_type := b_oil_power ; 32 :
32703: LD_ADDR_OWVAR 42
32707: PUSH
32708: LD_INT 26
32710: ST_TO_ADDR
32711: GO 32771
32713: LD_INT 32
32715: DOUBLE
32716: EQUAL
32717: IFTRUE 32721
32719: GO 32732
32721: POP
// bc_type := b_siberite_power ; 33 :
32722: LD_ADDR_OWVAR 42
32726: PUSH
32727: LD_INT 28
32729: ST_TO_ADDR
32730: GO 32771
32732: LD_INT 33
32734: DOUBLE
32735: EQUAL
32736: IFTRUE 32740
32738: GO 32751
32740: POP
// bc_type := b_oil_mine ; 34 :
32741: LD_ADDR_OWVAR 42
32745: PUSH
32746: LD_INT 29
32748: ST_TO_ADDR
32749: GO 32771
32751: LD_INT 34
32753: DOUBLE
32754: EQUAL
32755: IFTRUE 32759
32757: GO 32770
32759: POP
// bc_type := b_siberite_mine ; end ;
32760: LD_ADDR_OWVAR 42
32764: PUSH
32765: LD_INT 30
32767: ST_TO_ADDR
32768: GO 32771
32770: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32771: LD_ADDR_VAR 0 8
32775: PUSH
32776: LD_VAR 0 5
32780: PPUSH
32781: LD_VAR 0 6
32785: PPUSH
32786: LD_VAR 0 3
32790: PPUSH
32791: CALL_OW 47
32795: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32796: LD_OWVAR 42
32800: PUSH
32801: LD_INT 32
32803: PUSH
32804: LD_INT 33
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: IN
32811: IFFALSE 32827
// PlaceWeaponTurret ( b , weapon ) ;
32813: LD_VAR 0 8
32817: PPUSH
32818: LD_VAR 0 4
32822: PPUSH
32823: CALL_OW 431
// end ;
32827: LD_VAR 0 7
32831: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32832: LD_INT 0
32834: PPUSH
32835: PPUSH
32836: PPUSH
32837: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32838: LD_ADDR_VAR 0 4
32842: PUSH
32843: LD_INT 22
32845: PUSH
32846: LD_OWVAR 2
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 2
32857: PUSH
32858: LD_INT 30
32860: PUSH
32861: LD_INT 0
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 30
32870: PUSH
32871: LD_INT 1
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PPUSH
32887: CALL_OW 69
32891: ST_TO_ADDR
// if not tmp then
32892: LD_VAR 0 4
32896: NOT
32897: IFFALSE 32901
// exit ;
32899: GO 32960
// for i in tmp do
32901: LD_ADDR_VAR 0 2
32905: PUSH
32906: LD_VAR 0 4
32910: PUSH
32911: FOR_IN
32912: IFFALSE 32958
// for j = 1 to 3 do
32914: LD_ADDR_VAR 0 3
32918: PUSH
32919: DOUBLE
32920: LD_INT 1
32922: DEC
32923: ST_TO_ADDR
32924: LD_INT 3
32926: PUSH
32927: FOR_TO
32928: IFFALSE 32954
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32930: LD_VAR 0 2
32934: PPUSH
32935: CALL_OW 274
32939: PPUSH
32940: LD_VAR 0 3
32944: PPUSH
32945: LD_INT 99999
32947: PPUSH
32948: CALL_OW 277
32952: GO 32927
32954: POP
32955: POP
32956: GO 32911
32958: POP
32959: POP
// end ;
32960: LD_VAR 0 1
32964: RET
// export function hHackSetLevel10 ; var i , j ; begin
32965: LD_INT 0
32967: PPUSH
32968: PPUSH
32969: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32970: LD_ADDR_VAR 0 2
32974: PUSH
32975: LD_INT 21
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PPUSH
32985: CALL_OW 69
32989: PUSH
32990: FOR_IN
32991: IFFALSE 33043
// if IsSelected ( i ) then
32993: LD_VAR 0 2
32997: PPUSH
32998: CALL_OW 306
33002: IFFALSE 33041
// begin for j := 1 to 4 do
33004: LD_ADDR_VAR 0 3
33008: PUSH
33009: DOUBLE
33010: LD_INT 1
33012: DEC
33013: ST_TO_ADDR
33014: LD_INT 4
33016: PUSH
33017: FOR_TO
33018: IFFALSE 33039
// SetSkill ( i , j , 10 ) ;
33020: LD_VAR 0 2
33024: PPUSH
33025: LD_VAR 0 3
33029: PPUSH
33030: LD_INT 10
33032: PPUSH
33033: CALL_OW 237
33037: GO 33017
33039: POP
33040: POP
// end ;
33041: GO 32990
33043: POP
33044: POP
// end ;
33045: LD_VAR 0 1
33049: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33050: LD_INT 0
33052: PPUSH
33053: PPUSH
33054: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33055: LD_ADDR_VAR 0 2
33059: PUSH
33060: LD_INT 22
33062: PUSH
33063: LD_OWVAR 2
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 21
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PPUSH
33086: CALL_OW 69
33090: PUSH
33091: FOR_IN
33092: IFFALSE 33133
// begin for j := 1 to 4 do
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: DOUBLE
33100: LD_INT 1
33102: DEC
33103: ST_TO_ADDR
33104: LD_INT 4
33106: PUSH
33107: FOR_TO
33108: IFFALSE 33129
// SetSkill ( i , j , 10 ) ;
33110: LD_VAR 0 2
33114: PPUSH
33115: LD_VAR 0 3
33119: PPUSH
33120: LD_INT 10
33122: PPUSH
33123: CALL_OW 237
33127: GO 33107
33129: POP
33130: POP
// end ;
33131: GO 33091
33133: POP
33134: POP
// end ;
33135: LD_VAR 0 1
33139: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33140: LD_INT 0
33142: PPUSH
// uc_side := your_side ;
33143: LD_ADDR_OWVAR 20
33147: PUSH
33148: LD_OWVAR 2
33152: ST_TO_ADDR
// uc_nation := nation ;
33153: LD_ADDR_OWVAR 21
33157: PUSH
33158: LD_VAR 0 1
33162: ST_TO_ADDR
// InitHc ;
33163: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33167: LD_INT 0
33169: PPUSH
33170: LD_VAR 0 2
33174: PPUSH
33175: LD_VAR 0 3
33179: PPUSH
33180: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33184: LD_VAR 0 4
33188: PPUSH
33189: LD_VAR 0 5
33193: PPUSH
33194: CALL_OW 428
33198: PUSH
33199: LD_INT 0
33201: EQUAL
33202: IFFALSE 33226
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33204: CALL_OW 44
33208: PPUSH
33209: LD_VAR 0 4
33213: PPUSH
33214: LD_VAR 0 5
33218: PPUSH
33219: LD_INT 1
33221: PPUSH
33222: CALL_OW 48
// end ;
33226: LD_VAR 0 6
33230: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33231: LD_INT 0
33233: PPUSH
33234: PPUSH
// uc_side := your_side ;
33235: LD_ADDR_OWVAR 20
33239: PUSH
33240: LD_OWVAR 2
33244: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33245: LD_VAR 0 1
33249: PUSH
33250: LD_INT 1
33252: PUSH
33253: LD_INT 2
33255: PUSH
33256: LD_INT 3
33258: PUSH
33259: LD_INT 4
33261: PUSH
33262: LD_INT 5
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: IN
33272: IFFALSE 33284
// uc_nation := nation_american else
33274: LD_ADDR_OWVAR 21
33278: PUSH
33279: LD_INT 1
33281: ST_TO_ADDR
33282: GO 33327
// if chassis in [ 11 , 12 , 13 , 14 ] then
33284: LD_VAR 0 1
33288: PUSH
33289: LD_INT 11
33291: PUSH
33292: LD_INT 12
33294: PUSH
33295: LD_INT 13
33297: PUSH
33298: LD_INT 14
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: IN
33307: IFFALSE 33319
// uc_nation := nation_arabian else
33309: LD_ADDR_OWVAR 21
33313: PUSH
33314: LD_INT 2
33316: ST_TO_ADDR
33317: GO 33327
// uc_nation := nation_russian ;
33319: LD_ADDR_OWVAR 21
33323: PUSH
33324: LD_INT 3
33326: ST_TO_ADDR
// vc_chassis := chassis ;
33327: LD_ADDR_OWVAR 37
33331: PUSH
33332: LD_VAR 0 1
33336: ST_TO_ADDR
// vc_engine := engine ;
33337: LD_ADDR_OWVAR 39
33341: PUSH
33342: LD_VAR 0 2
33346: ST_TO_ADDR
// vc_control := control ;
33347: LD_ADDR_OWVAR 38
33351: PUSH
33352: LD_VAR 0 3
33356: ST_TO_ADDR
// vc_weapon := weapon ;
33357: LD_ADDR_OWVAR 40
33361: PUSH
33362: LD_VAR 0 4
33366: ST_TO_ADDR
// un := CreateVehicle ;
33367: LD_ADDR_VAR 0 8
33371: PUSH
33372: CALL_OW 45
33376: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33377: LD_VAR 0 8
33381: PPUSH
33382: LD_INT 0
33384: PPUSH
33385: LD_INT 5
33387: PPUSH
33388: CALL_OW 12
33392: PPUSH
33393: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33397: LD_VAR 0 8
33401: PPUSH
33402: LD_VAR 0 5
33406: PPUSH
33407: LD_VAR 0 6
33411: PPUSH
33412: LD_INT 1
33414: PPUSH
33415: CALL_OW 48
// end ;
33419: LD_VAR 0 7
33423: RET
// export hInvincible ; every 1 do
33424: GO 33426
33426: DISABLE
// hInvincible := [ ] ;
33427: LD_ADDR_EXP 95
33431: PUSH
33432: EMPTY
33433: ST_TO_ADDR
33434: END
// every 10 do var i ;
33435: GO 33437
33437: DISABLE
33438: LD_INT 0
33440: PPUSH
// begin enable ;
33441: ENABLE
// if not hInvincible then
33442: LD_EXP 95
33446: NOT
33447: IFFALSE 33451
// exit ;
33449: GO 33495
// for i in hInvincible do
33451: LD_ADDR_VAR 0 1
33455: PUSH
33456: LD_EXP 95
33460: PUSH
33461: FOR_IN
33462: IFFALSE 33493
// if GetLives ( i ) < 1000 then
33464: LD_VAR 0 1
33468: PPUSH
33469: CALL_OW 256
33473: PUSH
33474: LD_INT 1000
33476: LESS
33477: IFFALSE 33491
// SetLives ( i , 1000 ) ;
33479: LD_VAR 0 1
33483: PPUSH
33484: LD_INT 1000
33486: PPUSH
33487: CALL_OW 234
33491: GO 33461
33493: POP
33494: POP
// end ;
33495: PPOPN 1
33497: END
// export function hHackInvincible ; var i ; begin
33498: LD_INT 0
33500: PPUSH
33501: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33502: LD_ADDR_VAR 0 2
33506: PUSH
33507: LD_INT 2
33509: PUSH
33510: LD_INT 21
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 21
33522: PUSH
33523: LD_INT 2
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: LIST
33534: PPUSH
33535: CALL_OW 69
33539: PUSH
33540: FOR_IN
33541: IFFALSE 33602
// if IsSelected ( i ) then
33543: LD_VAR 0 2
33547: PPUSH
33548: CALL_OW 306
33552: IFFALSE 33600
// begin if i in hInvincible then
33554: LD_VAR 0 2
33558: PUSH
33559: LD_EXP 95
33563: IN
33564: IFFALSE 33584
// hInvincible := hInvincible diff i else
33566: LD_ADDR_EXP 95
33570: PUSH
33571: LD_EXP 95
33575: PUSH
33576: LD_VAR 0 2
33580: DIFF
33581: ST_TO_ADDR
33582: GO 33600
// hInvincible := hInvincible union i ;
33584: LD_ADDR_EXP 95
33588: PUSH
33589: LD_EXP 95
33593: PUSH
33594: LD_VAR 0 2
33598: UNION
33599: ST_TO_ADDR
// end ;
33600: GO 33540
33602: POP
33603: POP
// end ;
33604: LD_VAR 0 1
33608: RET
// export function hHackInvisible ; var i , j ; begin
33609: LD_INT 0
33611: PPUSH
33612: PPUSH
33613: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33614: LD_ADDR_VAR 0 2
33618: PUSH
33619: LD_INT 21
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PPUSH
33629: CALL_OW 69
33633: PUSH
33634: FOR_IN
33635: IFFALSE 33659
// if IsSelected ( i ) then
33637: LD_VAR 0 2
33641: PPUSH
33642: CALL_OW 306
33646: IFFALSE 33657
// ComForceInvisible ( i ) ;
33648: LD_VAR 0 2
33652: PPUSH
33653: CALL_OW 496
33657: GO 33634
33659: POP
33660: POP
// end ;
33661: LD_VAR 0 1
33665: RET
// export function hHackChangeYourSide ; begin
33666: LD_INT 0
33668: PPUSH
// if your_side = 8 then
33669: LD_OWVAR 2
33673: PUSH
33674: LD_INT 8
33676: EQUAL
33677: IFFALSE 33689
// your_side := 0 else
33679: LD_ADDR_OWVAR 2
33683: PUSH
33684: LD_INT 0
33686: ST_TO_ADDR
33687: GO 33703
// your_side := your_side + 1 ;
33689: LD_ADDR_OWVAR 2
33693: PUSH
33694: LD_OWVAR 2
33698: PUSH
33699: LD_INT 1
33701: PLUS
33702: ST_TO_ADDR
// end ;
33703: LD_VAR 0 1
33707: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33708: LD_INT 0
33710: PPUSH
33711: PPUSH
33712: PPUSH
// for i in all_units do
33713: LD_ADDR_VAR 0 2
33717: PUSH
33718: LD_OWVAR 3
33722: PUSH
33723: FOR_IN
33724: IFFALSE 33802
// if IsSelected ( i ) then
33726: LD_VAR 0 2
33730: PPUSH
33731: CALL_OW 306
33735: IFFALSE 33800
// begin j := GetSide ( i ) ;
33737: LD_ADDR_VAR 0 3
33741: PUSH
33742: LD_VAR 0 2
33746: PPUSH
33747: CALL_OW 255
33751: ST_TO_ADDR
// if j = 8 then
33752: LD_VAR 0 3
33756: PUSH
33757: LD_INT 8
33759: EQUAL
33760: IFFALSE 33772
// j := 0 else
33762: LD_ADDR_VAR 0 3
33766: PUSH
33767: LD_INT 0
33769: ST_TO_ADDR
33770: GO 33786
// j := j + 1 ;
33772: LD_ADDR_VAR 0 3
33776: PUSH
33777: LD_VAR 0 3
33781: PUSH
33782: LD_INT 1
33784: PLUS
33785: ST_TO_ADDR
// SetSide ( i , j ) ;
33786: LD_VAR 0 2
33790: PPUSH
33791: LD_VAR 0 3
33795: PPUSH
33796: CALL_OW 235
// end ;
33800: GO 33723
33802: POP
33803: POP
// end ;
33804: LD_VAR 0 1
33808: RET
// export function hHackFog ; begin
33809: LD_INT 0
33811: PPUSH
// FogOff ( true ) ;
33812: LD_INT 1
33814: PPUSH
33815: CALL_OW 344
// end ;
33819: LD_VAR 0 1
33823: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33824: LD_INT 0
33826: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33827: LD_VAR 0 1
33831: PPUSH
33832: LD_VAR 0 2
33836: PPUSH
33837: LD_VAR 0 3
33841: PPUSH
33842: LD_INT 1
33844: PPUSH
33845: LD_INT 1
33847: PPUSH
33848: CALL_OW 483
// CenterOnXY ( x , y ) ;
33852: LD_VAR 0 2
33856: PPUSH
33857: LD_VAR 0 3
33861: PPUSH
33862: CALL_OW 84
// end ;
33866: LD_VAR 0 4
33870: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33871: LD_INT 0
33873: PPUSH
33874: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33875: LD_VAR 0 1
33879: NOT
33880: PUSH
33881: LD_VAR 0 2
33885: PPUSH
33886: LD_VAR 0 3
33890: PPUSH
33891: CALL_OW 488
33895: NOT
33896: OR
33897: PUSH
33898: LD_VAR 0 1
33902: PPUSH
33903: CALL_OW 266
33907: PUSH
33908: LD_INT 3
33910: NONEQUAL
33911: PUSH
33912: LD_VAR 0 1
33916: PPUSH
33917: CALL_OW 247
33921: PUSH
33922: LD_INT 1
33924: EQUAL
33925: NOT
33926: AND
33927: OR
33928: IFFALSE 33932
// exit ;
33930: GO 34081
// if GetType ( factory ) = unit_human then
33932: LD_VAR 0 1
33936: PPUSH
33937: CALL_OW 247
33941: PUSH
33942: LD_INT 1
33944: EQUAL
33945: IFFALSE 33962
// factory := IsInUnit ( factory ) ;
33947: LD_ADDR_VAR 0 1
33951: PUSH
33952: LD_VAR 0 1
33956: PPUSH
33957: CALL_OW 310
33961: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33962: LD_VAR 0 1
33966: PPUSH
33967: CALL_OW 266
33971: PUSH
33972: LD_INT 3
33974: NONEQUAL
33975: IFFALSE 33979
// exit ;
33977: GO 34081
// if HexInfo ( x , y ) = factory then
33979: LD_VAR 0 2
33983: PPUSH
33984: LD_VAR 0 3
33988: PPUSH
33989: CALL_OW 428
33993: PUSH
33994: LD_VAR 0 1
33998: EQUAL
33999: IFFALSE 34026
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34001: LD_ADDR_EXP 96
34005: PUSH
34006: LD_EXP 96
34010: PPUSH
34011: LD_VAR 0 1
34015: PPUSH
34016: LD_INT 0
34018: PPUSH
34019: CALL_OW 1
34023: ST_TO_ADDR
34024: GO 34077
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34026: LD_ADDR_EXP 96
34030: PUSH
34031: LD_EXP 96
34035: PPUSH
34036: LD_VAR 0 1
34040: PPUSH
34041: LD_VAR 0 1
34045: PPUSH
34046: CALL_OW 255
34050: PUSH
34051: LD_VAR 0 1
34055: PUSH
34056: LD_VAR 0 2
34060: PUSH
34061: LD_VAR 0 3
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: PPUSH
34072: CALL_OW 1
34076: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34077: CALL 34086 0 0
// end ;
34081: LD_VAR 0 4
34085: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34086: LD_INT 0
34088: PPUSH
34089: PPUSH
34090: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34091: LD_STRING resetFactoryWaypoint();
34093: PPUSH
34094: CALL_OW 559
// if factoryWaypoints then
34098: LD_EXP 96
34102: IFFALSE 34228
// begin list := PrepareArray ( factoryWaypoints ) ;
34104: LD_ADDR_VAR 0 3
34108: PUSH
34109: LD_EXP 96
34113: PPUSH
34114: CALL 80697 0 1
34118: ST_TO_ADDR
// for i := 1 to list do
34119: LD_ADDR_VAR 0 2
34123: PUSH
34124: DOUBLE
34125: LD_INT 1
34127: DEC
34128: ST_TO_ADDR
34129: LD_VAR 0 3
34133: PUSH
34134: FOR_TO
34135: IFFALSE 34226
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34137: LD_STRING setFactoryWaypointXY(
34139: PUSH
34140: LD_VAR 0 3
34144: PUSH
34145: LD_VAR 0 2
34149: ARRAY
34150: PUSH
34151: LD_INT 1
34153: ARRAY
34154: STR
34155: PUSH
34156: LD_STRING ,
34158: STR
34159: PUSH
34160: LD_VAR 0 3
34164: PUSH
34165: LD_VAR 0 2
34169: ARRAY
34170: PUSH
34171: LD_INT 2
34173: ARRAY
34174: STR
34175: PUSH
34176: LD_STRING ,
34178: STR
34179: PUSH
34180: LD_VAR 0 3
34184: PUSH
34185: LD_VAR 0 2
34189: ARRAY
34190: PUSH
34191: LD_INT 3
34193: ARRAY
34194: STR
34195: PUSH
34196: LD_STRING ,
34198: STR
34199: PUSH
34200: LD_VAR 0 3
34204: PUSH
34205: LD_VAR 0 2
34209: ARRAY
34210: PUSH
34211: LD_INT 4
34213: ARRAY
34214: STR
34215: PUSH
34216: LD_STRING )
34218: STR
34219: PPUSH
34220: CALL_OW 559
34224: GO 34134
34226: POP
34227: POP
// end ; end ;
34228: LD_VAR 0 1
34232: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34233: LD_INT 0
34235: PPUSH
// if HexInfo ( x , y ) = warehouse then
34236: LD_VAR 0 2
34240: PPUSH
34241: LD_VAR 0 3
34245: PPUSH
34246: CALL_OW 428
34250: PUSH
34251: LD_VAR 0 1
34255: EQUAL
34256: IFFALSE 34283
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34258: LD_ADDR_EXP 97
34262: PUSH
34263: LD_EXP 97
34267: PPUSH
34268: LD_VAR 0 1
34272: PPUSH
34273: LD_INT 0
34275: PPUSH
34276: CALL_OW 1
34280: ST_TO_ADDR
34281: GO 34334
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34283: LD_ADDR_EXP 97
34287: PUSH
34288: LD_EXP 97
34292: PPUSH
34293: LD_VAR 0 1
34297: PPUSH
34298: LD_VAR 0 1
34302: PPUSH
34303: CALL_OW 255
34307: PUSH
34308: LD_VAR 0 1
34312: PUSH
34313: LD_VAR 0 2
34317: PUSH
34318: LD_VAR 0 3
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: PPUSH
34329: CALL_OW 1
34333: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34334: CALL 34343 0 0
// end ;
34338: LD_VAR 0 4
34342: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34343: LD_INT 0
34345: PPUSH
34346: PPUSH
34347: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34348: LD_STRING resetWarehouseGatheringPoints();
34350: PPUSH
34351: CALL_OW 559
// if warehouseGatheringPoints then
34355: LD_EXP 97
34359: IFFALSE 34485
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34361: LD_ADDR_VAR 0 3
34365: PUSH
34366: LD_EXP 97
34370: PPUSH
34371: CALL 80697 0 1
34375: ST_TO_ADDR
// for i := 1 to list do
34376: LD_ADDR_VAR 0 2
34380: PUSH
34381: DOUBLE
34382: LD_INT 1
34384: DEC
34385: ST_TO_ADDR
34386: LD_VAR 0 3
34390: PUSH
34391: FOR_TO
34392: IFFALSE 34483
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34394: LD_STRING setWarehouseGatheringPointXY(
34396: PUSH
34397: LD_VAR 0 3
34401: PUSH
34402: LD_VAR 0 2
34406: ARRAY
34407: PUSH
34408: LD_INT 1
34410: ARRAY
34411: STR
34412: PUSH
34413: LD_STRING ,
34415: STR
34416: PUSH
34417: LD_VAR 0 3
34421: PUSH
34422: LD_VAR 0 2
34426: ARRAY
34427: PUSH
34428: LD_INT 2
34430: ARRAY
34431: STR
34432: PUSH
34433: LD_STRING ,
34435: STR
34436: PUSH
34437: LD_VAR 0 3
34441: PUSH
34442: LD_VAR 0 2
34446: ARRAY
34447: PUSH
34448: LD_INT 3
34450: ARRAY
34451: STR
34452: PUSH
34453: LD_STRING ,
34455: STR
34456: PUSH
34457: LD_VAR 0 3
34461: PUSH
34462: LD_VAR 0 2
34466: ARRAY
34467: PUSH
34468: LD_INT 4
34470: ARRAY
34471: STR
34472: PUSH
34473: LD_STRING )
34475: STR
34476: PPUSH
34477: CALL_OW 559
34481: GO 34391
34483: POP
34484: POP
// end ; end ;
34485: LD_VAR 0 1
34489: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34490: LD_EXP 97
34494: IFFALSE 35179
34496: GO 34498
34498: DISABLE
34499: LD_INT 0
34501: PPUSH
34502: PPUSH
34503: PPUSH
34504: PPUSH
34505: PPUSH
34506: PPUSH
34507: PPUSH
34508: PPUSH
34509: PPUSH
// begin enable ;
34510: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34511: LD_ADDR_VAR 0 3
34515: PUSH
34516: LD_EXP 97
34520: PPUSH
34521: CALL 80697 0 1
34525: ST_TO_ADDR
// if not list then
34526: LD_VAR 0 3
34530: NOT
34531: IFFALSE 34535
// exit ;
34533: GO 35179
// for i := 1 to list do
34535: LD_ADDR_VAR 0 1
34539: PUSH
34540: DOUBLE
34541: LD_INT 1
34543: DEC
34544: ST_TO_ADDR
34545: LD_VAR 0 3
34549: PUSH
34550: FOR_TO
34551: IFFALSE 35177
// begin depot := list [ i ] [ 2 ] ;
34553: LD_ADDR_VAR 0 8
34557: PUSH
34558: LD_VAR 0 3
34562: PUSH
34563: LD_VAR 0 1
34567: ARRAY
34568: PUSH
34569: LD_INT 2
34571: ARRAY
34572: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34573: LD_ADDR_VAR 0 5
34577: PUSH
34578: LD_VAR 0 3
34582: PUSH
34583: LD_VAR 0 1
34587: ARRAY
34588: PUSH
34589: LD_INT 1
34591: ARRAY
34592: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34593: LD_VAR 0 8
34597: PPUSH
34598: CALL_OW 301
34602: PUSH
34603: LD_VAR 0 5
34607: PUSH
34608: LD_VAR 0 8
34612: PPUSH
34613: CALL_OW 255
34617: NONEQUAL
34618: OR
34619: IFFALSE 34648
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34621: LD_ADDR_EXP 97
34625: PUSH
34626: LD_EXP 97
34630: PPUSH
34631: LD_VAR 0 8
34635: PPUSH
34636: LD_INT 0
34638: PPUSH
34639: CALL_OW 1
34643: ST_TO_ADDR
// exit ;
34644: POP
34645: POP
34646: GO 35179
// end ; x := list [ i ] [ 3 ] ;
34648: LD_ADDR_VAR 0 6
34652: PUSH
34653: LD_VAR 0 3
34657: PUSH
34658: LD_VAR 0 1
34662: ARRAY
34663: PUSH
34664: LD_INT 3
34666: ARRAY
34667: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34668: LD_ADDR_VAR 0 7
34672: PUSH
34673: LD_VAR 0 3
34677: PUSH
34678: LD_VAR 0 1
34682: ARRAY
34683: PUSH
34684: LD_INT 4
34686: ARRAY
34687: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34688: LD_ADDR_VAR 0 9
34692: PUSH
34693: LD_VAR 0 6
34697: PPUSH
34698: LD_VAR 0 7
34702: PPUSH
34703: LD_INT 16
34705: PPUSH
34706: CALL 79285 0 3
34710: ST_TO_ADDR
// if not cratesNearbyPoint then
34711: LD_VAR 0 9
34715: NOT
34716: IFFALSE 34722
// exit ;
34718: POP
34719: POP
34720: GO 35179
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34722: LD_ADDR_VAR 0 4
34726: PUSH
34727: LD_INT 22
34729: PUSH
34730: LD_VAR 0 5
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 3
34741: PUSH
34742: LD_INT 60
34744: PUSH
34745: EMPTY
34746: LIST
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 91
34754: PUSH
34755: LD_VAR 0 8
34759: PUSH
34760: LD_INT 6
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 2
34770: PUSH
34771: LD_INT 25
34773: PUSH
34774: LD_INT 2
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 25
34783: PUSH
34784: LD_INT 16
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: PPUSH
34802: CALL_OW 69
34806: PUSH
34807: LD_VAR 0 8
34811: PPUSH
34812: CALL_OW 313
34816: PPUSH
34817: LD_INT 3
34819: PUSH
34820: LD_INT 60
34822: PUSH
34823: EMPTY
34824: LIST
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 2
34832: PUSH
34833: LD_INT 25
34835: PUSH
34836: LD_INT 2
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 25
34845: PUSH
34846: LD_INT 16
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: LIST
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PPUSH
34862: CALL_OW 72
34866: UNION
34867: ST_TO_ADDR
// if tmp then
34868: LD_VAR 0 4
34872: IFFALSE 34952
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34874: LD_ADDR_VAR 0 4
34878: PUSH
34879: LD_VAR 0 4
34883: PPUSH
34884: LD_INT 3
34886: PPUSH
34887: CALL 77254 0 2
34891: ST_TO_ADDR
// for j in tmp do
34892: LD_ADDR_VAR 0 2
34896: PUSH
34897: LD_VAR 0 4
34901: PUSH
34902: FOR_IN
34903: IFFALSE 34946
// begin if IsInUnit ( j ) then
34905: LD_VAR 0 2
34909: PPUSH
34910: CALL_OW 310
34914: IFFALSE 34925
// ComExit ( j ) ;
34916: LD_VAR 0 2
34920: PPUSH
34921: CALL 77337 0 1
// AddComCollect ( j , x , y ) ;
34925: LD_VAR 0 2
34929: PPUSH
34930: LD_VAR 0 6
34934: PPUSH
34935: LD_VAR 0 7
34939: PPUSH
34940: CALL_OW 177
// end ;
34944: GO 34902
34946: POP
34947: POP
// exit ;
34948: POP
34949: POP
34950: GO 35179
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34952: LD_ADDR_VAR 0 4
34956: PUSH
34957: LD_INT 22
34959: PUSH
34960: LD_VAR 0 5
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 91
34971: PUSH
34972: LD_VAR 0 8
34976: PUSH
34977: LD_INT 8
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 2
34987: PUSH
34988: LD_INT 34
34990: PUSH
34991: LD_INT 12
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 34
35000: PUSH
35001: LD_INT 51
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 34
35010: PUSH
35011: LD_INT 32
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 34
35020: PUSH
35021: LD_INT 89
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: PPUSH
35040: CALL_OW 69
35044: ST_TO_ADDR
// if tmp then
35045: LD_VAR 0 4
35049: IFFALSE 35175
// begin for j in tmp do
35051: LD_ADDR_VAR 0 2
35055: PUSH
35056: LD_VAR 0 4
35060: PUSH
35061: FOR_IN
35062: IFFALSE 35173
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35064: LD_VAR 0 2
35068: PPUSH
35069: CALL_OW 262
35073: PUSH
35074: LD_INT 3
35076: EQUAL
35077: PUSH
35078: LD_VAR 0 2
35082: PPUSH
35083: CALL_OW 261
35087: PUSH
35088: LD_INT 20
35090: GREATER
35091: OR
35092: PUSH
35093: LD_VAR 0 2
35097: PPUSH
35098: CALL_OW 314
35102: NOT
35103: AND
35104: PUSH
35105: LD_VAR 0 2
35109: PPUSH
35110: CALL_OW 263
35114: PUSH
35115: LD_INT 1
35117: NONEQUAL
35118: PUSH
35119: LD_VAR 0 2
35123: PPUSH
35124: CALL_OW 311
35128: OR
35129: AND
35130: IFFALSE 35171
// begin ComCollect ( j , x , y ) ;
35132: LD_VAR 0 2
35136: PPUSH
35137: LD_VAR 0 6
35141: PPUSH
35142: LD_VAR 0 7
35146: PPUSH
35147: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35151: LD_VAR 0 2
35155: PPUSH
35156: LD_VAR 0 8
35160: PPUSH
35161: CALL_OW 172
// exit ;
35165: POP
35166: POP
35167: POP
35168: POP
35169: GO 35179
// end ;
35171: GO 35061
35173: POP
35174: POP
// end ; end ;
35175: GO 34550
35177: POP
35178: POP
// end ; end_of_file
35179: PPOPN 9
35181: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35182: LD_INT 0
35184: PPUSH
35185: PPUSH
35186: PPUSH
35187: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35188: LD_VAR 0 1
35192: PPUSH
35193: CALL_OW 264
35197: PUSH
35198: LD_INT 91
35200: EQUAL
35201: IFFALSE 35273
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35203: LD_INT 68
35205: PPUSH
35206: LD_VAR 0 1
35210: PPUSH
35211: CALL_OW 255
35215: PPUSH
35216: CALL_OW 321
35220: PUSH
35221: LD_INT 2
35223: EQUAL
35224: IFFALSE 35236
// eff := 70 else
35226: LD_ADDR_VAR 0 4
35230: PUSH
35231: LD_INT 70
35233: ST_TO_ADDR
35234: GO 35244
// eff := 30 ;
35236: LD_ADDR_VAR 0 4
35240: PUSH
35241: LD_INT 30
35243: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35244: LD_VAR 0 1
35248: PPUSH
35249: CALL_OW 250
35253: PPUSH
35254: LD_VAR 0 1
35258: PPUSH
35259: CALL_OW 251
35263: PPUSH
35264: LD_VAR 0 4
35268: PPUSH
35269: CALL_OW 495
// end ; end ;
35273: LD_VAR 0 2
35277: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35278: LD_INT 0
35280: PPUSH
// end ;
35281: LD_VAR 0 4
35285: RET
// export function SOS_Command ( cmd ) ; begin
35286: LD_INT 0
35288: PPUSH
// end ;
35289: LD_VAR 0 2
35293: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35294: LD_INT 0
35296: PPUSH
// end ;
35297: LD_VAR 0 6
35301: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35302: LD_INT 0
35304: PPUSH
35305: PPUSH
// if not vehicle or not factory then
35306: LD_VAR 0 1
35310: NOT
35311: PUSH
35312: LD_VAR 0 2
35316: NOT
35317: OR
35318: IFFALSE 35322
// exit ;
35320: GO 35553
// if factoryWaypoints >= factory then
35322: LD_EXP 96
35326: PUSH
35327: LD_VAR 0 2
35331: GREATEREQUAL
35332: IFFALSE 35553
// if factoryWaypoints [ factory ] then
35334: LD_EXP 96
35338: PUSH
35339: LD_VAR 0 2
35343: ARRAY
35344: IFFALSE 35553
// begin if GetControl ( vehicle ) = control_manual then
35346: LD_VAR 0 1
35350: PPUSH
35351: CALL_OW 263
35355: PUSH
35356: LD_INT 1
35358: EQUAL
35359: IFFALSE 35440
// begin driver := IsDrivenBy ( vehicle ) ;
35361: LD_ADDR_VAR 0 4
35365: PUSH
35366: LD_VAR 0 1
35370: PPUSH
35371: CALL_OW 311
35375: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35376: LD_VAR 0 4
35380: PPUSH
35381: LD_EXP 96
35385: PUSH
35386: LD_VAR 0 2
35390: ARRAY
35391: PUSH
35392: LD_INT 3
35394: ARRAY
35395: PPUSH
35396: LD_EXP 96
35400: PUSH
35401: LD_VAR 0 2
35405: ARRAY
35406: PUSH
35407: LD_INT 4
35409: ARRAY
35410: PPUSH
35411: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35415: LD_VAR 0 4
35419: PPUSH
35420: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35424: LD_VAR 0 4
35428: PPUSH
35429: LD_VAR 0 2
35433: PPUSH
35434: CALL_OW 180
// end else
35438: GO 35553
// if GetControl ( vehicle ) = control_remote then
35440: LD_VAR 0 1
35444: PPUSH
35445: CALL_OW 263
35449: PUSH
35450: LD_INT 2
35452: EQUAL
35453: IFFALSE 35514
// begin wait ( 0 0$2 ) ;
35455: LD_INT 70
35457: PPUSH
35458: CALL_OW 67
// if Connect ( vehicle ) then
35462: LD_VAR 0 1
35466: PPUSH
35467: CALL 47577 0 1
35471: IFFALSE 35512
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35473: LD_VAR 0 1
35477: PPUSH
35478: LD_EXP 96
35482: PUSH
35483: LD_VAR 0 2
35487: ARRAY
35488: PUSH
35489: LD_INT 3
35491: ARRAY
35492: PPUSH
35493: LD_EXP 96
35497: PUSH
35498: LD_VAR 0 2
35502: ARRAY
35503: PUSH
35504: LD_INT 4
35506: ARRAY
35507: PPUSH
35508: CALL_OW 171
// end else
35512: GO 35553
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35514: LD_VAR 0 1
35518: PPUSH
35519: LD_EXP 96
35523: PUSH
35524: LD_VAR 0 2
35528: ARRAY
35529: PUSH
35530: LD_INT 3
35532: ARRAY
35533: PPUSH
35534: LD_EXP 96
35538: PUSH
35539: LD_VAR 0 2
35543: ARRAY
35544: PUSH
35545: LD_INT 4
35547: ARRAY
35548: PPUSH
35549: CALL_OW 171
// end ; end ;
35553: LD_VAR 0 3
35557: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35558: LD_INT 0
35560: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35561: LD_VAR 0 1
35565: PUSH
35566: LD_INT 250
35568: EQUAL
35569: PUSH
35570: LD_VAR 0 2
35574: PPUSH
35575: CALL_OW 264
35579: PUSH
35580: LD_INT 81
35582: EQUAL
35583: AND
35584: IFFALSE 35605
// MinerPlaceMine ( unit , x , y ) ;
35586: LD_VAR 0 2
35590: PPUSH
35591: LD_VAR 0 4
35595: PPUSH
35596: LD_VAR 0 5
35600: PPUSH
35601: CALL 37990 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35605: LD_VAR 0 1
35609: PUSH
35610: LD_INT 251
35612: EQUAL
35613: PUSH
35614: LD_VAR 0 2
35618: PPUSH
35619: CALL_OW 264
35623: PUSH
35624: LD_INT 81
35626: EQUAL
35627: AND
35628: IFFALSE 35649
// MinerDetonateMine ( unit , x , y ) ;
35630: LD_VAR 0 2
35634: PPUSH
35635: LD_VAR 0 4
35639: PPUSH
35640: LD_VAR 0 5
35644: PPUSH
35645: CALL 38265 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35649: LD_VAR 0 1
35653: PUSH
35654: LD_INT 252
35656: EQUAL
35657: PUSH
35658: LD_VAR 0 2
35662: PPUSH
35663: CALL_OW 264
35667: PUSH
35668: LD_INT 81
35670: EQUAL
35671: AND
35672: IFFALSE 35693
// MinerCreateMinefield ( unit , x , y ) ;
35674: LD_VAR 0 2
35678: PPUSH
35679: LD_VAR 0 4
35683: PPUSH
35684: LD_VAR 0 5
35688: PPUSH
35689: CALL 38682 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35693: LD_VAR 0 1
35697: PUSH
35698: LD_INT 253
35700: EQUAL
35701: PUSH
35702: LD_VAR 0 2
35706: PPUSH
35707: CALL_OW 257
35711: PUSH
35712: LD_INT 5
35714: EQUAL
35715: AND
35716: IFFALSE 35737
// ComBinocular ( unit , x , y ) ;
35718: LD_VAR 0 2
35722: PPUSH
35723: LD_VAR 0 4
35727: PPUSH
35728: LD_VAR 0 5
35732: PPUSH
35733: CALL 39051 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35737: LD_VAR 0 1
35741: PUSH
35742: LD_INT 254
35744: EQUAL
35745: PUSH
35746: LD_VAR 0 2
35750: PPUSH
35751: CALL_OW 264
35755: PUSH
35756: LD_INT 99
35758: EQUAL
35759: AND
35760: PUSH
35761: LD_VAR 0 3
35765: PPUSH
35766: CALL_OW 263
35770: PUSH
35771: LD_INT 3
35773: EQUAL
35774: AND
35775: IFFALSE 35791
// HackDestroyVehicle ( unit , selectedUnit ) ;
35777: LD_VAR 0 2
35781: PPUSH
35782: LD_VAR 0 3
35786: PPUSH
35787: CALL 37354 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35791: LD_VAR 0 1
35795: PUSH
35796: LD_INT 255
35798: EQUAL
35799: PUSH
35800: LD_VAR 0 2
35804: PPUSH
35805: CALL_OW 264
35809: PUSH
35810: LD_INT 14
35812: PUSH
35813: LD_INT 53
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: IN
35820: AND
35821: PUSH
35822: LD_VAR 0 4
35826: PPUSH
35827: LD_VAR 0 5
35831: PPUSH
35832: CALL_OW 488
35836: AND
35837: IFFALSE 35861
// CutTreeXYR ( unit , x , y , 12 ) ;
35839: LD_VAR 0 2
35843: PPUSH
35844: LD_VAR 0 4
35848: PPUSH
35849: LD_VAR 0 5
35853: PPUSH
35854: LD_INT 12
35856: PPUSH
35857: CALL 35924 0 4
// if cmd = 256 then
35861: LD_VAR 0 1
35865: PUSH
35866: LD_INT 256
35868: EQUAL
35869: IFFALSE 35890
// SetFactoryWaypoint ( unit , x , y ) ;
35871: LD_VAR 0 2
35875: PPUSH
35876: LD_VAR 0 4
35880: PPUSH
35881: LD_VAR 0 5
35885: PPUSH
35886: CALL 33871 0 3
// if cmd = 257 then
35890: LD_VAR 0 1
35894: PUSH
35895: LD_INT 257
35897: EQUAL
35898: IFFALSE 35919
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35900: LD_VAR 0 2
35904: PPUSH
35905: LD_VAR 0 4
35909: PPUSH
35910: LD_VAR 0 5
35914: PPUSH
35915: CALL 34233 0 3
// end ;
35919: LD_VAR 0 6
35923: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35924: LD_INT 0
35926: PPUSH
35927: PPUSH
35928: PPUSH
35929: PPUSH
35930: PPUSH
35931: PPUSH
35932: PPUSH
35933: PPUSH
35934: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35935: LD_VAR 0 1
35939: NOT
35940: PUSH
35941: LD_VAR 0 2
35945: PPUSH
35946: LD_VAR 0 3
35950: PPUSH
35951: CALL_OW 488
35955: NOT
35956: OR
35957: PUSH
35958: LD_VAR 0 4
35962: NOT
35963: OR
35964: IFFALSE 35968
// exit ;
35966: GO 36308
// list := [ ] ;
35968: LD_ADDR_VAR 0 13
35972: PUSH
35973: EMPTY
35974: ST_TO_ADDR
// if x - r < 0 then
35975: LD_VAR 0 2
35979: PUSH
35980: LD_VAR 0 4
35984: MINUS
35985: PUSH
35986: LD_INT 0
35988: LESS
35989: IFFALSE 36001
// min_x := 0 else
35991: LD_ADDR_VAR 0 7
35995: PUSH
35996: LD_INT 0
35998: ST_TO_ADDR
35999: GO 36017
// min_x := x - r ;
36001: LD_ADDR_VAR 0 7
36005: PUSH
36006: LD_VAR 0 2
36010: PUSH
36011: LD_VAR 0 4
36015: MINUS
36016: ST_TO_ADDR
// if y - r < 0 then
36017: LD_VAR 0 3
36021: PUSH
36022: LD_VAR 0 4
36026: MINUS
36027: PUSH
36028: LD_INT 0
36030: LESS
36031: IFFALSE 36043
// min_y := 0 else
36033: LD_ADDR_VAR 0 8
36037: PUSH
36038: LD_INT 0
36040: ST_TO_ADDR
36041: GO 36059
// min_y := y - r ;
36043: LD_ADDR_VAR 0 8
36047: PUSH
36048: LD_VAR 0 3
36052: PUSH
36053: LD_VAR 0 4
36057: MINUS
36058: ST_TO_ADDR
// max_x := x + r ;
36059: LD_ADDR_VAR 0 9
36063: PUSH
36064: LD_VAR 0 2
36068: PUSH
36069: LD_VAR 0 4
36073: PLUS
36074: ST_TO_ADDR
// max_y := y + r ;
36075: LD_ADDR_VAR 0 10
36079: PUSH
36080: LD_VAR 0 3
36084: PUSH
36085: LD_VAR 0 4
36089: PLUS
36090: ST_TO_ADDR
// for _x = min_x to max_x do
36091: LD_ADDR_VAR 0 11
36095: PUSH
36096: DOUBLE
36097: LD_VAR 0 7
36101: DEC
36102: ST_TO_ADDR
36103: LD_VAR 0 9
36107: PUSH
36108: FOR_TO
36109: IFFALSE 36226
// for _y = min_y to max_y do
36111: LD_ADDR_VAR 0 12
36115: PUSH
36116: DOUBLE
36117: LD_VAR 0 8
36121: DEC
36122: ST_TO_ADDR
36123: LD_VAR 0 10
36127: PUSH
36128: FOR_TO
36129: IFFALSE 36222
// begin if not ValidHex ( _x , _y ) then
36131: LD_VAR 0 11
36135: PPUSH
36136: LD_VAR 0 12
36140: PPUSH
36141: CALL_OW 488
36145: NOT
36146: IFFALSE 36150
// continue ;
36148: GO 36128
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36150: LD_VAR 0 11
36154: PPUSH
36155: LD_VAR 0 12
36159: PPUSH
36160: CALL_OW 351
36164: PUSH
36165: LD_VAR 0 11
36169: PPUSH
36170: LD_VAR 0 12
36174: PPUSH
36175: CALL_OW 554
36179: AND
36180: IFFALSE 36220
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36182: LD_ADDR_VAR 0 13
36186: PUSH
36187: LD_VAR 0 13
36191: PPUSH
36192: LD_VAR 0 13
36196: PUSH
36197: LD_INT 1
36199: PLUS
36200: PPUSH
36201: LD_VAR 0 11
36205: PUSH
36206: LD_VAR 0 12
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PPUSH
36215: CALL_OW 2
36219: ST_TO_ADDR
// end ;
36220: GO 36128
36222: POP
36223: POP
36224: GO 36108
36226: POP
36227: POP
// if not list then
36228: LD_VAR 0 13
36232: NOT
36233: IFFALSE 36237
// exit ;
36235: GO 36308
// for i in list do
36237: LD_ADDR_VAR 0 6
36241: PUSH
36242: LD_VAR 0 13
36246: PUSH
36247: FOR_IN
36248: IFFALSE 36306
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36250: LD_VAR 0 1
36254: PPUSH
36255: LD_STRING M
36257: PUSH
36258: LD_VAR 0 6
36262: PUSH
36263: LD_INT 1
36265: ARRAY
36266: PUSH
36267: LD_VAR 0 6
36271: PUSH
36272: LD_INT 2
36274: ARRAY
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: PUSH
36297: EMPTY
36298: LIST
36299: PPUSH
36300: CALL_OW 447
36304: GO 36247
36306: POP
36307: POP
// end ;
36308: LD_VAR 0 5
36312: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36313: LD_EXP 99
36317: NOT
36318: IFFALSE 36368
36320: GO 36322
36322: DISABLE
// begin initHack := true ;
36323: LD_ADDR_EXP 99
36327: PUSH
36328: LD_INT 1
36330: ST_TO_ADDR
// hackTanks := [ ] ;
36331: LD_ADDR_EXP 100
36335: PUSH
36336: EMPTY
36337: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36338: LD_ADDR_EXP 101
36342: PUSH
36343: EMPTY
36344: ST_TO_ADDR
// hackLimit := 3 ;
36345: LD_ADDR_EXP 102
36349: PUSH
36350: LD_INT 3
36352: ST_TO_ADDR
// hackDist := 12 ;
36353: LD_ADDR_EXP 103
36357: PUSH
36358: LD_INT 12
36360: ST_TO_ADDR
// hackCounter := [ ] ;
36361: LD_ADDR_EXP 104
36365: PUSH
36366: EMPTY
36367: ST_TO_ADDR
// end ;
36368: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36369: LD_EXP 99
36373: PUSH
36374: LD_INT 34
36376: PUSH
36377: LD_INT 99
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PPUSH
36384: CALL_OW 69
36388: AND
36389: IFFALSE 36642
36391: GO 36393
36393: DISABLE
36394: LD_INT 0
36396: PPUSH
36397: PPUSH
// begin enable ;
36398: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36399: LD_ADDR_VAR 0 1
36403: PUSH
36404: LD_INT 34
36406: PUSH
36407: LD_INT 99
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PPUSH
36414: CALL_OW 69
36418: PUSH
36419: FOR_IN
36420: IFFALSE 36640
// begin if not i in hackTanks then
36422: LD_VAR 0 1
36426: PUSH
36427: LD_EXP 100
36431: IN
36432: NOT
36433: IFFALSE 36516
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36435: LD_ADDR_EXP 100
36439: PUSH
36440: LD_EXP 100
36444: PPUSH
36445: LD_EXP 100
36449: PUSH
36450: LD_INT 1
36452: PLUS
36453: PPUSH
36454: LD_VAR 0 1
36458: PPUSH
36459: CALL_OW 1
36463: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36464: LD_ADDR_EXP 101
36468: PUSH
36469: LD_EXP 101
36473: PPUSH
36474: LD_EXP 101
36478: PUSH
36479: LD_INT 1
36481: PLUS
36482: PPUSH
36483: EMPTY
36484: PPUSH
36485: CALL_OW 1
36489: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36490: LD_ADDR_EXP 104
36494: PUSH
36495: LD_EXP 104
36499: PPUSH
36500: LD_EXP 104
36504: PUSH
36505: LD_INT 1
36507: PLUS
36508: PPUSH
36509: EMPTY
36510: PPUSH
36511: CALL_OW 1
36515: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36516: LD_VAR 0 1
36520: PPUSH
36521: CALL_OW 302
36525: NOT
36526: IFFALSE 36539
// begin HackUnlinkAll ( i ) ;
36528: LD_VAR 0 1
36532: PPUSH
36533: CALL 36645 0 1
// continue ;
36537: GO 36419
// end ; HackCheckCapturedStatus ( i ) ;
36539: LD_VAR 0 1
36543: PPUSH
36544: CALL 37088 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36548: LD_ADDR_VAR 0 2
36552: PUSH
36553: LD_INT 81
36555: PUSH
36556: LD_VAR 0 1
36560: PPUSH
36561: CALL_OW 255
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 33
36572: PUSH
36573: LD_INT 3
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 91
36582: PUSH
36583: LD_VAR 0 1
36587: PUSH
36588: LD_EXP 103
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 50
36600: PUSH
36601: EMPTY
36602: LIST
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: PPUSH
36610: CALL_OW 69
36614: ST_TO_ADDR
// if not tmp then
36615: LD_VAR 0 2
36619: NOT
36620: IFFALSE 36624
// continue ;
36622: GO 36419
// HackLink ( i , tmp ) ;
36624: LD_VAR 0 1
36628: PPUSH
36629: LD_VAR 0 2
36633: PPUSH
36634: CALL 36781 0 2
// end ;
36638: GO 36419
36640: POP
36641: POP
// end ;
36642: PPOPN 2
36644: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36645: LD_INT 0
36647: PPUSH
36648: PPUSH
36649: PPUSH
// if not hack in hackTanks then
36650: LD_VAR 0 1
36654: PUSH
36655: LD_EXP 100
36659: IN
36660: NOT
36661: IFFALSE 36665
// exit ;
36663: GO 36776
// index := GetElementIndex ( hackTanks , hack ) ;
36665: LD_ADDR_VAR 0 4
36669: PUSH
36670: LD_EXP 100
36674: PPUSH
36675: LD_VAR 0 1
36679: PPUSH
36680: CALL 44393 0 2
36684: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36685: LD_EXP 101
36689: PUSH
36690: LD_VAR 0 4
36694: ARRAY
36695: IFFALSE 36776
// begin for i in hackTanksCaptured [ index ] do
36697: LD_ADDR_VAR 0 3
36701: PUSH
36702: LD_EXP 101
36706: PUSH
36707: LD_VAR 0 4
36711: ARRAY
36712: PUSH
36713: FOR_IN
36714: IFFALSE 36740
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36716: LD_VAR 0 3
36720: PUSH
36721: LD_INT 1
36723: ARRAY
36724: PPUSH
36725: LD_VAR 0 3
36729: PUSH
36730: LD_INT 2
36732: ARRAY
36733: PPUSH
36734: CALL_OW 235
36738: GO 36713
36740: POP
36741: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36742: LD_ADDR_EXP 101
36746: PUSH
36747: LD_EXP 101
36751: PPUSH
36752: LD_VAR 0 4
36756: PPUSH
36757: EMPTY
36758: PPUSH
36759: CALL_OW 1
36763: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36764: LD_VAR 0 1
36768: PPUSH
36769: LD_INT 0
36771: PPUSH
36772: CALL_OW 505
// end ; end ;
36776: LD_VAR 0 2
36780: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36781: LD_INT 0
36783: PPUSH
36784: PPUSH
36785: PPUSH
// if not hack in hackTanks or not vehicles then
36786: LD_VAR 0 1
36790: PUSH
36791: LD_EXP 100
36795: IN
36796: NOT
36797: PUSH
36798: LD_VAR 0 2
36802: NOT
36803: OR
36804: IFFALSE 36808
// exit ;
36806: GO 37083
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36808: LD_ADDR_VAR 0 2
36812: PUSH
36813: LD_VAR 0 1
36817: PPUSH
36818: LD_VAR 0 2
36822: PPUSH
36823: LD_INT 1
36825: PPUSH
36826: LD_INT 1
36828: PPUSH
36829: CALL 45043 0 4
36833: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36834: LD_ADDR_VAR 0 5
36838: PUSH
36839: LD_EXP 100
36843: PPUSH
36844: LD_VAR 0 1
36848: PPUSH
36849: CALL 44393 0 2
36853: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36854: LD_EXP 101
36858: PUSH
36859: LD_VAR 0 5
36863: ARRAY
36864: PUSH
36865: LD_EXP 102
36869: LESS
36870: IFFALSE 37059
// begin for i := 1 to vehicles do
36872: LD_ADDR_VAR 0 4
36876: PUSH
36877: DOUBLE
36878: LD_INT 1
36880: DEC
36881: ST_TO_ADDR
36882: LD_VAR 0 2
36886: PUSH
36887: FOR_TO
36888: IFFALSE 37057
// begin if hackTanksCaptured [ index ] = hackLimit then
36890: LD_EXP 101
36894: PUSH
36895: LD_VAR 0 5
36899: ARRAY
36900: PUSH
36901: LD_EXP 102
36905: EQUAL
36906: IFFALSE 36910
// break ;
36908: GO 37057
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36910: LD_ADDR_EXP 104
36914: PUSH
36915: LD_EXP 104
36919: PPUSH
36920: LD_VAR 0 5
36924: PPUSH
36925: LD_EXP 104
36929: PUSH
36930: LD_VAR 0 5
36934: ARRAY
36935: PUSH
36936: LD_INT 1
36938: PLUS
36939: PPUSH
36940: CALL_OW 1
36944: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36945: LD_ADDR_EXP 101
36949: PUSH
36950: LD_EXP 101
36954: PPUSH
36955: LD_VAR 0 5
36959: PUSH
36960: LD_EXP 101
36964: PUSH
36965: LD_VAR 0 5
36969: ARRAY
36970: PUSH
36971: LD_INT 1
36973: PLUS
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PPUSH
36979: LD_VAR 0 2
36983: PUSH
36984: LD_VAR 0 4
36988: ARRAY
36989: PUSH
36990: LD_VAR 0 2
36994: PUSH
36995: LD_VAR 0 4
36999: ARRAY
37000: PPUSH
37001: CALL_OW 255
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PPUSH
37010: CALL 44608 0 3
37014: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37015: LD_VAR 0 2
37019: PUSH
37020: LD_VAR 0 4
37024: ARRAY
37025: PPUSH
37026: LD_VAR 0 1
37030: PPUSH
37031: CALL_OW 255
37035: PPUSH
37036: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37040: LD_VAR 0 2
37044: PUSH
37045: LD_VAR 0 4
37049: ARRAY
37050: PPUSH
37051: CALL_OW 141
// end ;
37055: GO 36887
37057: POP
37058: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37059: LD_VAR 0 1
37063: PPUSH
37064: LD_EXP 101
37068: PUSH
37069: LD_VAR 0 5
37073: ARRAY
37074: PUSH
37075: LD_INT 0
37077: PLUS
37078: PPUSH
37079: CALL_OW 505
// end ;
37083: LD_VAR 0 3
37087: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37088: LD_INT 0
37090: PPUSH
37091: PPUSH
37092: PPUSH
37093: PPUSH
// if not hack in hackTanks then
37094: LD_VAR 0 1
37098: PUSH
37099: LD_EXP 100
37103: IN
37104: NOT
37105: IFFALSE 37109
// exit ;
37107: GO 37349
// index := GetElementIndex ( hackTanks , hack ) ;
37109: LD_ADDR_VAR 0 4
37113: PUSH
37114: LD_EXP 100
37118: PPUSH
37119: LD_VAR 0 1
37123: PPUSH
37124: CALL 44393 0 2
37128: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37129: LD_ADDR_VAR 0 3
37133: PUSH
37134: DOUBLE
37135: LD_EXP 101
37139: PUSH
37140: LD_VAR 0 4
37144: ARRAY
37145: INC
37146: ST_TO_ADDR
37147: LD_INT 1
37149: PUSH
37150: FOR_DOWNTO
37151: IFFALSE 37323
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37153: LD_ADDR_VAR 0 5
37157: PUSH
37158: LD_EXP 101
37162: PUSH
37163: LD_VAR 0 4
37167: ARRAY
37168: PUSH
37169: LD_VAR 0 3
37173: ARRAY
37174: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37175: LD_VAR 0 5
37179: PUSH
37180: LD_INT 1
37182: ARRAY
37183: PPUSH
37184: CALL_OW 302
37188: NOT
37189: PUSH
37190: LD_VAR 0 5
37194: PUSH
37195: LD_INT 1
37197: ARRAY
37198: PPUSH
37199: CALL_OW 255
37203: PUSH
37204: LD_VAR 0 1
37208: PPUSH
37209: CALL_OW 255
37213: NONEQUAL
37214: OR
37215: IFFALSE 37321
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37217: LD_VAR 0 5
37221: PUSH
37222: LD_INT 1
37224: ARRAY
37225: PPUSH
37226: CALL_OW 305
37230: PUSH
37231: LD_VAR 0 5
37235: PUSH
37236: LD_INT 1
37238: ARRAY
37239: PPUSH
37240: CALL_OW 255
37244: PUSH
37245: LD_VAR 0 1
37249: PPUSH
37250: CALL_OW 255
37254: EQUAL
37255: AND
37256: IFFALSE 37280
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37258: LD_VAR 0 5
37262: PUSH
37263: LD_INT 1
37265: ARRAY
37266: PPUSH
37267: LD_VAR 0 5
37271: PUSH
37272: LD_INT 2
37274: ARRAY
37275: PPUSH
37276: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37280: LD_ADDR_EXP 101
37284: PUSH
37285: LD_EXP 101
37289: PPUSH
37290: LD_VAR 0 4
37294: PPUSH
37295: LD_EXP 101
37299: PUSH
37300: LD_VAR 0 4
37304: ARRAY
37305: PPUSH
37306: LD_VAR 0 3
37310: PPUSH
37311: CALL_OW 3
37315: PPUSH
37316: CALL_OW 1
37320: ST_TO_ADDR
// end ; end ;
37321: GO 37150
37323: POP
37324: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37325: LD_VAR 0 1
37329: PPUSH
37330: LD_EXP 101
37334: PUSH
37335: LD_VAR 0 4
37339: ARRAY
37340: PUSH
37341: LD_INT 0
37343: PLUS
37344: PPUSH
37345: CALL_OW 505
// end ;
37349: LD_VAR 0 2
37353: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37354: LD_INT 0
37356: PPUSH
37357: PPUSH
37358: PPUSH
37359: PPUSH
// if not hack in hackTanks then
37360: LD_VAR 0 1
37364: PUSH
37365: LD_EXP 100
37369: IN
37370: NOT
37371: IFFALSE 37375
// exit ;
37373: GO 37460
// index := GetElementIndex ( hackTanks , hack ) ;
37375: LD_ADDR_VAR 0 5
37379: PUSH
37380: LD_EXP 100
37384: PPUSH
37385: LD_VAR 0 1
37389: PPUSH
37390: CALL 44393 0 2
37394: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37395: LD_ADDR_VAR 0 4
37399: PUSH
37400: DOUBLE
37401: LD_INT 1
37403: DEC
37404: ST_TO_ADDR
37405: LD_EXP 101
37409: PUSH
37410: LD_VAR 0 5
37414: ARRAY
37415: PUSH
37416: FOR_TO
37417: IFFALSE 37458
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37419: LD_EXP 101
37423: PUSH
37424: LD_VAR 0 5
37428: ARRAY
37429: PUSH
37430: LD_VAR 0 4
37434: ARRAY
37435: PUSH
37436: LD_INT 1
37438: ARRAY
37439: PUSH
37440: LD_VAR 0 2
37444: EQUAL
37445: IFFALSE 37456
// KillUnit ( vehicle ) ;
37447: LD_VAR 0 2
37451: PPUSH
37452: CALL_OW 66
37456: GO 37416
37458: POP
37459: POP
// end ;
37460: LD_VAR 0 3
37464: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37465: LD_EXP 105
37469: NOT
37470: IFFALSE 37505
37472: GO 37474
37474: DISABLE
// begin initMiner := true ;
37475: LD_ADDR_EXP 105
37479: PUSH
37480: LD_INT 1
37482: ST_TO_ADDR
// minersList := [ ] ;
37483: LD_ADDR_EXP 106
37487: PUSH
37488: EMPTY
37489: ST_TO_ADDR
// minerMinesList := [ ] ;
37490: LD_ADDR_EXP 107
37494: PUSH
37495: EMPTY
37496: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37497: LD_ADDR_EXP 108
37501: PUSH
37502: LD_INT 5
37504: ST_TO_ADDR
// end ;
37505: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37506: LD_EXP 105
37510: PUSH
37511: LD_INT 34
37513: PUSH
37514: LD_INT 81
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PPUSH
37521: CALL_OW 69
37525: AND
37526: IFFALSE 37987
37528: GO 37530
37530: DISABLE
37531: LD_INT 0
37533: PPUSH
37534: PPUSH
37535: PPUSH
37536: PPUSH
// begin enable ;
37537: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37538: LD_ADDR_VAR 0 1
37542: PUSH
37543: LD_INT 34
37545: PUSH
37546: LD_INT 81
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PPUSH
37553: CALL_OW 69
37557: PUSH
37558: FOR_IN
37559: IFFALSE 37631
// begin if not i in minersList then
37561: LD_VAR 0 1
37565: PUSH
37566: LD_EXP 106
37570: IN
37571: NOT
37572: IFFALSE 37629
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37574: LD_ADDR_EXP 106
37578: PUSH
37579: LD_EXP 106
37583: PPUSH
37584: LD_EXP 106
37588: PUSH
37589: LD_INT 1
37591: PLUS
37592: PPUSH
37593: LD_VAR 0 1
37597: PPUSH
37598: CALL_OW 1
37602: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37603: LD_ADDR_EXP 107
37607: PUSH
37608: LD_EXP 107
37612: PPUSH
37613: LD_EXP 107
37617: PUSH
37618: LD_INT 1
37620: PLUS
37621: PPUSH
37622: EMPTY
37623: PPUSH
37624: CALL_OW 1
37628: ST_TO_ADDR
// end end ;
37629: GO 37558
37631: POP
37632: POP
// for i := minerMinesList downto 1 do
37633: LD_ADDR_VAR 0 1
37637: PUSH
37638: DOUBLE
37639: LD_EXP 107
37643: INC
37644: ST_TO_ADDR
37645: LD_INT 1
37647: PUSH
37648: FOR_DOWNTO
37649: IFFALSE 37985
// begin if IsLive ( minersList [ i ] ) then
37651: LD_EXP 106
37655: PUSH
37656: LD_VAR 0 1
37660: ARRAY
37661: PPUSH
37662: CALL_OW 300
37666: IFFALSE 37694
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37668: LD_EXP 106
37672: PUSH
37673: LD_VAR 0 1
37677: ARRAY
37678: PPUSH
37679: LD_EXP 107
37683: PUSH
37684: LD_VAR 0 1
37688: ARRAY
37689: PPUSH
37690: CALL_OW 505
// if not minerMinesList [ i ] then
37694: LD_EXP 107
37698: PUSH
37699: LD_VAR 0 1
37703: ARRAY
37704: NOT
37705: IFFALSE 37709
// continue ;
37707: GO 37648
// for j := minerMinesList [ i ] downto 1 do
37709: LD_ADDR_VAR 0 2
37713: PUSH
37714: DOUBLE
37715: LD_EXP 107
37719: PUSH
37720: LD_VAR 0 1
37724: ARRAY
37725: INC
37726: ST_TO_ADDR
37727: LD_INT 1
37729: PUSH
37730: FOR_DOWNTO
37731: IFFALSE 37981
// begin side := GetSide ( minersList [ i ] ) ;
37733: LD_ADDR_VAR 0 3
37737: PUSH
37738: LD_EXP 106
37742: PUSH
37743: LD_VAR 0 1
37747: ARRAY
37748: PPUSH
37749: CALL_OW 255
37753: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37754: LD_ADDR_VAR 0 4
37758: PUSH
37759: LD_EXP 107
37763: PUSH
37764: LD_VAR 0 1
37768: ARRAY
37769: PUSH
37770: LD_VAR 0 2
37774: ARRAY
37775: PUSH
37776: LD_INT 1
37778: ARRAY
37779: PPUSH
37780: LD_EXP 107
37784: PUSH
37785: LD_VAR 0 1
37789: ARRAY
37790: PUSH
37791: LD_VAR 0 2
37795: ARRAY
37796: PUSH
37797: LD_INT 2
37799: ARRAY
37800: PPUSH
37801: CALL_OW 428
37805: ST_TO_ADDR
// if not tmp then
37806: LD_VAR 0 4
37810: NOT
37811: IFFALSE 37815
// continue ;
37813: GO 37730
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37815: LD_VAR 0 4
37819: PUSH
37820: LD_INT 81
37822: PUSH
37823: LD_VAR 0 3
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PPUSH
37832: CALL_OW 69
37836: IN
37837: PUSH
37838: LD_EXP 107
37842: PUSH
37843: LD_VAR 0 1
37847: ARRAY
37848: PUSH
37849: LD_VAR 0 2
37853: ARRAY
37854: PUSH
37855: LD_INT 1
37857: ARRAY
37858: PPUSH
37859: LD_EXP 107
37863: PUSH
37864: LD_VAR 0 1
37868: ARRAY
37869: PUSH
37870: LD_VAR 0 2
37874: ARRAY
37875: PUSH
37876: LD_INT 2
37878: ARRAY
37879: PPUSH
37880: CALL_OW 458
37884: AND
37885: IFFALSE 37979
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37887: LD_EXP 107
37891: PUSH
37892: LD_VAR 0 1
37896: ARRAY
37897: PUSH
37898: LD_VAR 0 2
37902: ARRAY
37903: PUSH
37904: LD_INT 1
37906: ARRAY
37907: PPUSH
37908: LD_EXP 107
37912: PUSH
37913: LD_VAR 0 1
37917: ARRAY
37918: PUSH
37919: LD_VAR 0 2
37923: ARRAY
37924: PUSH
37925: LD_INT 2
37927: ARRAY
37928: PPUSH
37929: LD_VAR 0 3
37933: PPUSH
37934: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37938: LD_ADDR_EXP 107
37942: PUSH
37943: LD_EXP 107
37947: PPUSH
37948: LD_VAR 0 1
37952: PPUSH
37953: LD_EXP 107
37957: PUSH
37958: LD_VAR 0 1
37962: ARRAY
37963: PPUSH
37964: LD_VAR 0 2
37968: PPUSH
37969: CALL_OW 3
37973: PPUSH
37974: CALL_OW 1
37978: ST_TO_ADDR
// end ; end ;
37979: GO 37730
37981: POP
37982: POP
// end ;
37983: GO 37648
37985: POP
37986: POP
// end ;
37987: PPOPN 4
37989: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37990: LD_INT 0
37992: PPUSH
37993: PPUSH
// result := false ;
37994: LD_ADDR_VAR 0 4
37998: PUSH
37999: LD_INT 0
38001: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38002: LD_VAR 0 1
38006: PPUSH
38007: CALL_OW 264
38011: PUSH
38012: LD_INT 81
38014: EQUAL
38015: NOT
38016: IFFALSE 38020
// exit ;
38018: GO 38260
// index := GetElementIndex ( minersList , unit ) ;
38020: LD_ADDR_VAR 0 5
38024: PUSH
38025: LD_EXP 106
38029: PPUSH
38030: LD_VAR 0 1
38034: PPUSH
38035: CALL 44393 0 2
38039: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38040: LD_EXP 107
38044: PUSH
38045: LD_VAR 0 5
38049: ARRAY
38050: PUSH
38051: LD_EXP 108
38055: GREATEREQUAL
38056: IFFALSE 38060
// exit ;
38058: GO 38260
// ComMoveXY ( unit , x , y ) ;
38060: LD_VAR 0 1
38064: PPUSH
38065: LD_VAR 0 2
38069: PPUSH
38070: LD_VAR 0 3
38074: PPUSH
38075: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38079: LD_INT 35
38081: PPUSH
38082: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38086: LD_VAR 0 1
38090: PPUSH
38091: LD_VAR 0 2
38095: PPUSH
38096: LD_VAR 0 3
38100: PPUSH
38101: CALL 75748 0 3
38105: NOT
38106: PUSH
38107: LD_VAR 0 1
38111: PPUSH
38112: CALL_OW 314
38116: AND
38117: IFFALSE 38121
// exit ;
38119: GO 38260
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38121: LD_VAR 0 2
38125: PPUSH
38126: LD_VAR 0 3
38130: PPUSH
38131: CALL_OW 428
38135: PUSH
38136: LD_VAR 0 1
38140: EQUAL
38141: PUSH
38142: LD_VAR 0 1
38146: PPUSH
38147: CALL_OW 314
38151: NOT
38152: AND
38153: IFFALSE 38079
// PlaySoundXY ( x , y , PlantMine ) ;
38155: LD_VAR 0 2
38159: PPUSH
38160: LD_VAR 0 3
38164: PPUSH
38165: LD_STRING PlantMine
38167: PPUSH
38168: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38172: LD_VAR 0 2
38176: PPUSH
38177: LD_VAR 0 3
38181: PPUSH
38182: LD_VAR 0 1
38186: PPUSH
38187: CALL_OW 255
38191: PPUSH
38192: LD_INT 0
38194: PPUSH
38195: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38199: LD_ADDR_EXP 107
38203: PUSH
38204: LD_EXP 107
38208: PPUSH
38209: LD_VAR 0 5
38213: PUSH
38214: LD_EXP 107
38218: PUSH
38219: LD_VAR 0 5
38223: ARRAY
38224: PUSH
38225: LD_INT 1
38227: PLUS
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PPUSH
38233: LD_VAR 0 2
38237: PUSH
38238: LD_VAR 0 3
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PPUSH
38247: CALL 44608 0 3
38251: ST_TO_ADDR
// result := true ;
38252: LD_ADDR_VAR 0 4
38256: PUSH
38257: LD_INT 1
38259: ST_TO_ADDR
// end ;
38260: LD_VAR 0 4
38264: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38265: LD_INT 0
38267: PPUSH
38268: PPUSH
38269: PPUSH
// if not unit in minersList then
38270: LD_VAR 0 1
38274: PUSH
38275: LD_EXP 106
38279: IN
38280: NOT
38281: IFFALSE 38285
// exit ;
38283: GO 38677
// index := GetElementIndex ( minersList , unit ) ;
38285: LD_ADDR_VAR 0 6
38289: PUSH
38290: LD_EXP 106
38294: PPUSH
38295: LD_VAR 0 1
38299: PPUSH
38300: CALL 44393 0 2
38304: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38305: LD_ADDR_VAR 0 5
38309: PUSH
38310: DOUBLE
38311: LD_EXP 107
38315: PUSH
38316: LD_VAR 0 6
38320: ARRAY
38321: INC
38322: ST_TO_ADDR
38323: LD_INT 1
38325: PUSH
38326: FOR_DOWNTO
38327: IFFALSE 38488
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38329: LD_EXP 107
38333: PUSH
38334: LD_VAR 0 6
38338: ARRAY
38339: PUSH
38340: LD_VAR 0 5
38344: ARRAY
38345: PUSH
38346: LD_INT 1
38348: ARRAY
38349: PUSH
38350: LD_VAR 0 2
38354: EQUAL
38355: PUSH
38356: LD_EXP 107
38360: PUSH
38361: LD_VAR 0 6
38365: ARRAY
38366: PUSH
38367: LD_VAR 0 5
38371: ARRAY
38372: PUSH
38373: LD_INT 2
38375: ARRAY
38376: PUSH
38377: LD_VAR 0 3
38381: EQUAL
38382: AND
38383: IFFALSE 38486
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38385: LD_EXP 107
38389: PUSH
38390: LD_VAR 0 6
38394: ARRAY
38395: PUSH
38396: LD_VAR 0 5
38400: ARRAY
38401: PUSH
38402: LD_INT 1
38404: ARRAY
38405: PPUSH
38406: LD_EXP 107
38410: PUSH
38411: LD_VAR 0 6
38415: ARRAY
38416: PUSH
38417: LD_VAR 0 5
38421: ARRAY
38422: PUSH
38423: LD_INT 2
38425: ARRAY
38426: PPUSH
38427: LD_VAR 0 1
38431: PPUSH
38432: CALL_OW 255
38436: PPUSH
38437: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38441: LD_ADDR_EXP 107
38445: PUSH
38446: LD_EXP 107
38450: PPUSH
38451: LD_VAR 0 6
38455: PPUSH
38456: LD_EXP 107
38460: PUSH
38461: LD_VAR 0 6
38465: ARRAY
38466: PPUSH
38467: LD_VAR 0 5
38471: PPUSH
38472: CALL_OW 3
38476: PPUSH
38477: CALL_OW 1
38481: ST_TO_ADDR
// exit ;
38482: POP
38483: POP
38484: GO 38677
// end ; end ;
38486: GO 38326
38488: POP
38489: POP
// for i := minerMinesList [ index ] downto 1 do
38490: LD_ADDR_VAR 0 5
38494: PUSH
38495: DOUBLE
38496: LD_EXP 107
38500: PUSH
38501: LD_VAR 0 6
38505: ARRAY
38506: INC
38507: ST_TO_ADDR
38508: LD_INT 1
38510: PUSH
38511: FOR_DOWNTO
38512: IFFALSE 38675
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38514: LD_EXP 107
38518: PUSH
38519: LD_VAR 0 6
38523: ARRAY
38524: PUSH
38525: LD_VAR 0 5
38529: ARRAY
38530: PUSH
38531: LD_INT 1
38533: ARRAY
38534: PPUSH
38535: LD_EXP 107
38539: PUSH
38540: LD_VAR 0 6
38544: ARRAY
38545: PUSH
38546: LD_VAR 0 5
38550: ARRAY
38551: PUSH
38552: LD_INT 2
38554: ARRAY
38555: PPUSH
38556: LD_VAR 0 2
38560: PPUSH
38561: LD_VAR 0 3
38565: PPUSH
38566: CALL_OW 298
38570: PUSH
38571: LD_INT 6
38573: LESS
38574: IFFALSE 38673
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38576: LD_EXP 107
38580: PUSH
38581: LD_VAR 0 6
38585: ARRAY
38586: PUSH
38587: LD_VAR 0 5
38591: ARRAY
38592: PUSH
38593: LD_INT 1
38595: ARRAY
38596: PPUSH
38597: LD_EXP 107
38601: PUSH
38602: LD_VAR 0 6
38606: ARRAY
38607: PUSH
38608: LD_VAR 0 5
38612: ARRAY
38613: PUSH
38614: LD_INT 2
38616: ARRAY
38617: PPUSH
38618: LD_VAR 0 1
38622: PPUSH
38623: CALL_OW 255
38627: PPUSH
38628: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38632: LD_ADDR_EXP 107
38636: PUSH
38637: LD_EXP 107
38641: PPUSH
38642: LD_VAR 0 6
38646: PPUSH
38647: LD_EXP 107
38651: PUSH
38652: LD_VAR 0 6
38656: ARRAY
38657: PPUSH
38658: LD_VAR 0 5
38662: PPUSH
38663: CALL_OW 3
38667: PPUSH
38668: CALL_OW 1
38672: ST_TO_ADDR
// end ; end ;
38673: GO 38511
38675: POP
38676: POP
// end ;
38677: LD_VAR 0 4
38681: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38682: LD_INT 0
38684: PPUSH
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38693: LD_VAR 0 1
38697: PPUSH
38698: CALL_OW 264
38702: PUSH
38703: LD_INT 81
38705: EQUAL
38706: NOT
38707: PUSH
38708: LD_VAR 0 1
38712: PUSH
38713: LD_EXP 106
38717: IN
38718: NOT
38719: OR
38720: IFFALSE 38724
// exit ;
38722: GO 39046
// index := GetElementIndex ( minersList , unit ) ;
38724: LD_ADDR_VAR 0 6
38728: PUSH
38729: LD_EXP 106
38733: PPUSH
38734: LD_VAR 0 1
38738: PPUSH
38739: CALL 44393 0 2
38743: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38744: LD_ADDR_VAR 0 8
38748: PUSH
38749: LD_EXP 108
38753: PUSH
38754: LD_EXP 107
38758: PUSH
38759: LD_VAR 0 6
38763: ARRAY
38764: MINUS
38765: ST_TO_ADDR
// if not minesFreeAmount then
38766: LD_VAR 0 8
38770: NOT
38771: IFFALSE 38775
// exit ;
38773: GO 39046
// tmp := [ ] ;
38775: LD_ADDR_VAR 0 7
38779: PUSH
38780: EMPTY
38781: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38782: LD_ADDR_VAR 0 5
38786: PUSH
38787: DOUBLE
38788: LD_INT 1
38790: DEC
38791: ST_TO_ADDR
38792: LD_VAR 0 8
38796: PUSH
38797: FOR_TO
38798: IFFALSE 38993
// begin _d := rand ( 0 , 5 ) ;
38800: LD_ADDR_VAR 0 11
38804: PUSH
38805: LD_INT 0
38807: PPUSH
38808: LD_INT 5
38810: PPUSH
38811: CALL_OW 12
38815: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38816: LD_ADDR_VAR 0 12
38820: PUSH
38821: LD_INT 2
38823: PPUSH
38824: LD_INT 6
38826: PPUSH
38827: CALL_OW 12
38831: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38832: LD_ADDR_VAR 0 9
38836: PUSH
38837: LD_VAR 0 2
38841: PPUSH
38842: LD_VAR 0 11
38846: PPUSH
38847: LD_VAR 0 12
38851: PPUSH
38852: CALL_OW 272
38856: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38857: LD_ADDR_VAR 0 10
38861: PUSH
38862: LD_VAR 0 3
38866: PPUSH
38867: LD_VAR 0 11
38871: PPUSH
38872: LD_VAR 0 12
38876: PPUSH
38877: CALL_OW 273
38881: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38882: LD_VAR 0 9
38886: PPUSH
38887: LD_VAR 0 10
38891: PPUSH
38892: CALL_OW 488
38896: PUSH
38897: LD_VAR 0 9
38901: PUSH
38902: LD_VAR 0 10
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_VAR 0 7
38915: IN
38916: NOT
38917: AND
38918: PUSH
38919: LD_VAR 0 9
38923: PPUSH
38924: LD_VAR 0 10
38928: PPUSH
38929: CALL_OW 458
38933: NOT
38934: AND
38935: IFFALSE 38977
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38937: LD_ADDR_VAR 0 7
38941: PUSH
38942: LD_VAR 0 7
38946: PPUSH
38947: LD_VAR 0 7
38951: PUSH
38952: LD_INT 1
38954: PLUS
38955: PPUSH
38956: LD_VAR 0 9
38960: PUSH
38961: LD_VAR 0 10
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PPUSH
38970: CALL_OW 1
38974: ST_TO_ADDR
38975: GO 38991
// i := i - 1 ;
38977: LD_ADDR_VAR 0 5
38981: PUSH
38982: LD_VAR 0 5
38986: PUSH
38987: LD_INT 1
38989: MINUS
38990: ST_TO_ADDR
// end ;
38991: GO 38797
38993: POP
38994: POP
// for i in tmp do
38995: LD_ADDR_VAR 0 5
38999: PUSH
39000: LD_VAR 0 7
39004: PUSH
39005: FOR_IN
39006: IFFALSE 39044
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39008: LD_VAR 0 1
39012: PPUSH
39013: LD_VAR 0 5
39017: PUSH
39018: LD_INT 1
39020: ARRAY
39021: PPUSH
39022: LD_VAR 0 5
39026: PUSH
39027: LD_INT 2
39029: ARRAY
39030: PPUSH
39031: CALL 37990 0 3
39035: NOT
39036: IFFALSE 39042
// exit ;
39038: POP
39039: POP
39040: GO 39046
39042: GO 39005
39044: POP
39045: POP
// end ;
39046: LD_VAR 0 4
39050: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39051: LD_INT 0
39053: PPUSH
39054: PPUSH
39055: PPUSH
39056: PPUSH
39057: PPUSH
39058: PPUSH
39059: PPUSH
// if not GetClass ( unit ) = class_sniper then
39060: LD_VAR 0 1
39064: PPUSH
39065: CALL_OW 257
39069: PUSH
39070: LD_INT 5
39072: EQUAL
39073: NOT
39074: IFFALSE 39078
// exit ;
39076: GO 39466
// dist := 8 ;
39078: LD_ADDR_VAR 0 5
39082: PUSH
39083: LD_INT 8
39085: ST_TO_ADDR
// viewRange := 12 ;
39086: LD_ADDR_VAR 0 7
39090: PUSH
39091: LD_INT 12
39093: ST_TO_ADDR
// side := GetSide ( unit ) ;
39094: LD_ADDR_VAR 0 6
39098: PUSH
39099: LD_VAR 0 1
39103: PPUSH
39104: CALL_OW 255
39108: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39109: LD_INT 61
39111: PPUSH
39112: LD_VAR 0 6
39116: PPUSH
39117: CALL_OW 321
39121: PUSH
39122: LD_INT 2
39124: EQUAL
39125: IFFALSE 39135
// viewRange := 16 ;
39127: LD_ADDR_VAR 0 7
39131: PUSH
39132: LD_INT 16
39134: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39135: LD_VAR 0 1
39139: PPUSH
39140: LD_VAR 0 2
39144: PPUSH
39145: LD_VAR 0 3
39149: PPUSH
39150: CALL_OW 297
39154: PUSH
39155: LD_VAR 0 5
39159: GREATER
39160: IFFALSE 39239
// begin ComMoveXY ( unit , x , y ) ;
39162: LD_VAR 0 1
39166: PPUSH
39167: LD_VAR 0 2
39171: PPUSH
39172: LD_VAR 0 3
39176: PPUSH
39177: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39181: LD_INT 35
39183: PPUSH
39184: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39188: LD_VAR 0 1
39192: PPUSH
39193: LD_VAR 0 2
39197: PPUSH
39198: LD_VAR 0 3
39202: PPUSH
39203: CALL 75748 0 3
39207: NOT
39208: IFFALSE 39212
// exit ;
39210: GO 39466
// until GetDistUnitXY ( unit , x , y ) < dist ;
39212: LD_VAR 0 1
39216: PPUSH
39217: LD_VAR 0 2
39221: PPUSH
39222: LD_VAR 0 3
39226: PPUSH
39227: CALL_OW 297
39231: PUSH
39232: LD_VAR 0 5
39236: LESS
39237: IFFALSE 39181
// end ; ComTurnXY ( unit , x , y ) ;
39239: LD_VAR 0 1
39243: PPUSH
39244: LD_VAR 0 2
39248: PPUSH
39249: LD_VAR 0 3
39253: PPUSH
39254: CALL_OW 118
// wait ( 5 ) ;
39258: LD_INT 5
39260: PPUSH
39261: CALL_OW 67
// _d := GetDir ( unit ) ;
39265: LD_ADDR_VAR 0 10
39269: PUSH
39270: LD_VAR 0 1
39274: PPUSH
39275: CALL_OW 254
39279: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39280: LD_ADDR_VAR 0 8
39284: PUSH
39285: LD_VAR 0 1
39289: PPUSH
39290: CALL_OW 250
39294: PPUSH
39295: LD_VAR 0 10
39299: PPUSH
39300: LD_VAR 0 5
39304: PPUSH
39305: CALL_OW 272
39309: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39310: LD_ADDR_VAR 0 9
39314: PUSH
39315: LD_VAR 0 1
39319: PPUSH
39320: CALL_OW 251
39324: PPUSH
39325: LD_VAR 0 10
39329: PPUSH
39330: LD_VAR 0 5
39334: PPUSH
39335: CALL_OW 273
39339: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39340: LD_VAR 0 8
39344: PPUSH
39345: LD_VAR 0 9
39349: PPUSH
39350: CALL_OW 488
39354: NOT
39355: IFFALSE 39359
// exit ;
39357: GO 39466
// ComAnimCustom ( unit , 1 ) ;
39359: LD_VAR 0 1
39363: PPUSH
39364: LD_INT 1
39366: PPUSH
39367: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39371: LD_VAR 0 8
39375: PPUSH
39376: LD_VAR 0 9
39380: PPUSH
39381: LD_VAR 0 6
39385: PPUSH
39386: LD_VAR 0 7
39390: PPUSH
39391: CALL_OW 330
// repeat wait ( 1 ) ;
39395: LD_INT 1
39397: PPUSH
39398: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39402: LD_VAR 0 1
39406: PPUSH
39407: CALL_OW 316
39411: PUSH
39412: LD_VAR 0 1
39416: PPUSH
39417: CALL_OW 314
39421: OR
39422: PUSH
39423: LD_VAR 0 1
39427: PPUSH
39428: CALL_OW 302
39432: NOT
39433: OR
39434: PUSH
39435: LD_VAR 0 1
39439: PPUSH
39440: CALL_OW 301
39444: OR
39445: IFFALSE 39395
// RemoveSeeing ( _x , _y , side ) ;
39447: LD_VAR 0 8
39451: PPUSH
39452: LD_VAR 0 9
39456: PPUSH
39457: LD_VAR 0 6
39461: PPUSH
39462: CALL_OW 331
// end ; end_of_file
39466: LD_VAR 0 4
39470: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39471: LD_INT 0
39473: PPUSH
39474: PPUSH
// if exist_mode then
39475: LD_VAR 0 2
39479: IFFALSE 39504
// unit := CreateCharacter ( prefix & ident ) else
39481: LD_ADDR_VAR 0 5
39485: PUSH
39486: LD_VAR 0 3
39490: PUSH
39491: LD_VAR 0 1
39495: STR
39496: PPUSH
39497: CALL_OW 34
39501: ST_TO_ADDR
39502: GO 39519
// unit := NewCharacter ( ident ) ;
39504: LD_ADDR_VAR 0 5
39508: PUSH
39509: LD_VAR 0 1
39513: PPUSH
39514: CALL_OW 25
39518: ST_TO_ADDR
// result := unit ;
39519: LD_ADDR_VAR 0 4
39523: PUSH
39524: LD_VAR 0 5
39528: ST_TO_ADDR
// end ;
39529: LD_VAR 0 4
39533: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39534: LD_INT 0
39536: PPUSH
39537: PPUSH
// if not side or not nation then
39538: LD_VAR 0 1
39542: NOT
39543: PUSH
39544: LD_VAR 0 2
39548: NOT
39549: OR
39550: IFFALSE 39554
// exit ;
39552: GO 40322
// case nation of nation_american :
39554: LD_VAR 0 2
39558: PUSH
39559: LD_INT 1
39561: DOUBLE
39562: EQUAL
39563: IFTRUE 39567
39565: GO 39781
39567: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39568: LD_ADDR_VAR 0 4
39572: PUSH
39573: LD_INT 35
39575: PUSH
39576: LD_INT 45
39578: PUSH
39579: LD_INT 46
39581: PUSH
39582: LD_INT 47
39584: PUSH
39585: LD_INT 82
39587: PUSH
39588: LD_INT 83
39590: PUSH
39591: LD_INT 84
39593: PUSH
39594: LD_INT 85
39596: PUSH
39597: LD_INT 86
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: LD_INT 2
39605: PUSH
39606: LD_INT 6
39608: PUSH
39609: LD_INT 15
39611: PUSH
39612: LD_INT 16
39614: PUSH
39615: LD_INT 7
39617: PUSH
39618: LD_INT 12
39620: PUSH
39621: LD_INT 13
39623: PUSH
39624: LD_INT 10
39626: PUSH
39627: LD_INT 14
39629: PUSH
39630: LD_INT 20
39632: PUSH
39633: LD_INT 21
39635: PUSH
39636: LD_INT 22
39638: PUSH
39639: LD_INT 25
39641: PUSH
39642: LD_INT 32
39644: PUSH
39645: LD_INT 27
39647: PUSH
39648: LD_INT 36
39650: PUSH
39651: LD_INT 69
39653: PUSH
39654: LD_INT 39
39656: PUSH
39657: LD_INT 34
39659: PUSH
39660: LD_INT 40
39662: PUSH
39663: LD_INT 48
39665: PUSH
39666: LD_INT 49
39668: PUSH
39669: LD_INT 50
39671: PUSH
39672: LD_INT 51
39674: PUSH
39675: LD_INT 52
39677: PUSH
39678: LD_INT 53
39680: PUSH
39681: LD_INT 54
39683: PUSH
39684: LD_INT 55
39686: PUSH
39687: LD_INT 56
39689: PUSH
39690: LD_INT 57
39692: PUSH
39693: LD_INT 58
39695: PUSH
39696: LD_INT 59
39698: PUSH
39699: LD_INT 60
39701: PUSH
39702: LD_INT 61
39704: PUSH
39705: LD_INT 62
39707: PUSH
39708: LD_INT 80
39710: PUSH
39711: LD_INT 82
39713: PUSH
39714: LD_INT 83
39716: PUSH
39717: LD_INT 84
39719: PUSH
39720: LD_INT 85
39722: PUSH
39723: LD_INT 86
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: ST_TO_ADDR
39779: GO 40246
39781: LD_INT 2
39783: DOUBLE
39784: EQUAL
39785: IFTRUE 39789
39787: GO 40015
39789: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39790: LD_ADDR_VAR 0 4
39794: PUSH
39795: LD_INT 35
39797: PUSH
39798: LD_INT 45
39800: PUSH
39801: LD_INT 46
39803: PUSH
39804: LD_INT 47
39806: PUSH
39807: LD_INT 82
39809: PUSH
39810: LD_INT 83
39812: PUSH
39813: LD_INT 84
39815: PUSH
39816: LD_INT 85
39818: PUSH
39819: LD_INT 87
39821: PUSH
39822: LD_INT 70
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 11
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: LD_INT 4
39836: PUSH
39837: LD_INT 5
39839: PUSH
39840: LD_INT 6
39842: PUSH
39843: LD_INT 15
39845: PUSH
39846: LD_INT 18
39848: PUSH
39849: LD_INT 7
39851: PUSH
39852: LD_INT 17
39854: PUSH
39855: LD_INT 8
39857: PUSH
39858: LD_INT 20
39860: PUSH
39861: LD_INT 21
39863: PUSH
39864: LD_INT 22
39866: PUSH
39867: LD_INT 72
39869: PUSH
39870: LD_INT 26
39872: PUSH
39873: LD_INT 69
39875: PUSH
39876: LD_INT 39
39878: PUSH
39879: LD_INT 40
39881: PUSH
39882: LD_INT 41
39884: PUSH
39885: LD_INT 42
39887: PUSH
39888: LD_INT 43
39890: PUSH
39891: LD_INT 48
39893: PUSH
39894: LD_INT 49
39896: PUSH
39897: LD_INT 50
39899: PUSH
39900: LD_INT 51
39902: PUSH
39903: LD_INT 52
39905: PUSH
39906: LD_INT 53
39908: PUSH
39909: LD_INT 54
39911: PUSH
39912: LD_INT 55
39914: PUSH
39915: LD_INT 56
39917: PUSH
39918: LD_INT 60
39920: PUSH
39921: LD_INT 61
39923: PUSH
39924: LD_INT 62
39926: PUSH
39927: LD_INT 66
39929: PUSH
39930: LD_INT 67
39932: PUSH
39933: LD_INT 68
39935: PUSH
39936: LD_INT 81
39938: PUSH
39939: LD_INT 82
39941: PUSH
39942: LD_INT 83
39944: PUSH
39945: LD_INT 84
39947: PUSH
39948: LD_INT 85
39950: PUSH
39951: LD_INT 87
39953: PUSH
39954: LD_INT 88
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: ST_TO_ADDR
40013: GO 40246
40015: LD_INT 3
40017: DOUBLE
40018: EQUAL
40019: IFTRUE 40023
40021: GO 40245
40023: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40024: LD_ADDR_VAR 0 4
40028: PUSH
40029: LD_INT 46
40031: PUSH
40032: LD_INT 47
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: LD_INT 82
40043: PUSH
40044: LD_INT 83
40046: PUSH
40047: LD_INT 84
40049: PUSH
40050: LD_INT 85
40052: PUSH
40053: LD_INT 86
40055: PUSH
40056: LD_INT 11
40058: PUSH
40059: LD_INT 9
40061: PUSH
40062: LD_INT 20
40064: PUSH
40065: LD_INT 19
40067: PUSH
40068: LD_INT 21
40070: PUSH
40071: LD_INT 24
40073: PUSH
40074: LD_INT 22
40076: PUSH
40077: LD_INT 25
40079: PUSH
40080: LD_INT 28
40082: PUSH
40083: LD_INT 29
40085: PUSH
40086: LD_INT 30
40088: PUSH
40089: LD_INT 31
40091: PUSH
40092: LD_INT 37
40094: PUSH
40095: LD_INT 38
40097: PUSH
40098: LD_INT 32
40100: PUSH
40101: LD_INT 27
40103: PUSH
40104: LD_INT 33
40106: PUSH
40107: LD_INT 69
40109: PUSH
40110: LD_INT 39
40112: PUSH
40113: LD_INT 34
40115: PUSH
40116: LD_INT 40
40118: PUSH
40119: LD_INT 71
40121: PUSH
40122: LD_INT 23
40124: PUSH
40125: LD_INT 44
40127: PUSH
40128: LD_INT 48
40130: PUSH
40131: LD_INT 49
40133: PUSH
40134: LD_INT 50
40136: PUSH
40137: LD_INT 51
40139: PUSH
40140: LD_INT 52
40142: PUSH
40143: LD_INT 53
40145: PUSH
40146: LD_INT 54
40148: PUSH
40149: LD_INT 55
40151: PUSH
40152: LD_INT 56
40154: PUSH
40155: LD_INT 57
40157: PUSH
40158: LD_INT 58
40160: PUSH
40161: LD_INT 59
40163: PUSH
40164: LD_INT 63
40166: PUSH
40167: LD_INT 64
40169: PUSH
40170: LD_INT 65
40172: PUSH
40173: LD_INT 82
40175: PUSH
40176: LD_INT 83
40178: PUSH
40179: LD_INT 84
40181: PUSH
40182: LD_INT 85
40184: PUSH
40185: LD_INT 86
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: ST_TO_ADDR
40243: GO 40246
40245: POP
// if state > - 1 and state < 3 then
40246: LD_VAR 0 3
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: GREATER
40255: PUSH
40256: LD_VAR 0 3
40260: PUSH
40261: LD_INT 3
40263: LESS
40264: AND
40265: IFFALSE 40322
// for i in result do
40267: LD_ADDR_VAR 0 5
40271: PUSH
40272: LD_VAR 0 4
40276: PUSH
40277: FOR_IN
40278: IFFALSE 40320
// if GetTech ( i , side ) <> state then
40280: LD_VAR 0 5
40284: PPUSH
40285: LD_VAR 0 1
40289: PPUSH
40290: CALL_OW 321
40294: PUSH
40295: LD_VAR 0 3
40299: NONEQUAL
40300: IFFALSE 40318
// result := result diff i ;
40302: LD_ADDR_VAR 0 4
40306: PUSH
40307: LD_VAR 0 4
40311: PUSH
40312: LD_VAR 0 5
40316: DIFF
40317: ST_TO_ADDR
40318: GO 40277
40320: POP
40321: POP
// end ;
40322: LD_VAR 0 4
40326: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40327: LD_INT 0
40329: PPUSH
40330: PPUSH
40331: PPUSH
// result := true ;
40332: LD_ADDR_VAR 0 3
40336: PUSH
40337: LD_INT 1
40339: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40340: LD_ADDR_VAR 0 5
40344: PUSH
40345: LD_VAR 0 2
40349: PPUSH
40350: CALL_OW 480
40354: ST_TO_ADDR
// if not tmp then
40355: LD_VAR 0 5
40359: NOT
40360: IFFALSE 40364
// exit ;
40362: GO 40413
// for i in tmp do
40364: LD_ADDR_VAR 0 4
40368: PUSH
40369: LD_VAR 0 5
40373: PUSH
40374: FOR_IN
40375: IFFALSE 40411
// if GetTech ( i , side ) <> state_researched then
40377: LD_VAR 0 4
40381: PPUSH
40382: LD_VAR 0 1
40386: PPUSH
40387: CALL_OW 321
40391: PUSH
40392: LD_INT 2
40394: NONEQUAL
40395: IFFALSE 40409
// begin result := false ;
40397: LD_ADDR_VAR 0 3
40401: PUSH
40402: LD_INT 0
40404: ST_TO_ADDR
// exit ;
40405: POP
40406: POP
40407: GO 40413
// end ;
40409: GO 40374
40411: POP
40412: POP
// end ;
40413: LD_VAR 0 3
40417: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40418: LD_INT 0
40420: PPUSH
40421: PPUSH
40422: PPUSH
40423: PPUSH
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
40431: PPUSH
40432: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40433: LD_VAR 0 1
40437: NOT
40438: PUSH
40439: LD_VAR 0 1
40443: PPUSH
40444: CALL_OW 257
40448: PUSH
40449: LD_INT 9
40451: NONEQUAL
40452: OR
40453: IFFALSE 40457
// exit ;
40455: GO 41030
// side := GetSide ( unit ) ;
40457: LD_ADDR_VAR 0 9
40461: PUSH
40462: LD_VAR 0 1
40466: PPUSH
40467: CALL_OW 255
40471: ST_TO_ADDR
// tech_space := tech_spacanom ;
40472: LD_ADDR_VAR 0 12
40476: PUSH
40477: LD_INT 29
40479: ST_TO_ADDR
// tech_time := tech_taurad ;
40480: LD_ADDR_VAR 0 13
40484: PUSH
40485: LD_INT 28
40487: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40488: LD_ADDR_VAR 0 11
40492: PUSH
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 310
40502: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40503: LD_VAR 0 11
40507: PPUSH
40508: CALL_OW 247
40512: PUSH
40513: LD_INT 2
40515: EQUAL
40516: IFFALSE 40520
// exit ;
40518: GO 41030
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40520: LD_ADDR_VAR 0 8
40524: PUSH
40525: LD_INT 81
40527: PUSH
40528: LD_VAR 0 9
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 3
40539: PUSH
40540: LD_INT 21
40542: PUSH
40543: LD_INT 3
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PPUSH
40558: CALL_OW 69
40562: ST_TO_ADDR
// if not tmp then
40563: LD_VAR 0 8
40567: NOT
40568: IFFALSE 40572
// exit ;
40570: GO 41030
// if in_unit then
40572: LD_VAR 0 11
40576: IFFALSE 40600
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40578: LD_ADDR_VAR 0 10
40582: PUSH
40583: LD_VAR 0 8
40587: PPUSH
40588: LD_VAR 0 11
40592: PPUSH
40593: CALL_OW 74
40597: ST_TO_ADDR
40598: GO 40620
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40600: LD_ADDR_VAR 0 10
40604: PUSH
40605: LD_VAR 0 8
40609: PPUSH
40610: LD_VAR 0 1
40614: PPUSH
40615: CALL_OW 74
40619: ST_TO_ADDR
// if not enemy then
40620: LD_VAR 0 10
40624: NOT
40625: IFFALSE 40629
// exit ;
40627: GO 41030
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40629: LD_VAR 0 11
40633: PUSH
40634: LD_VAR 0 11
40638: PPUSH
40639: LD_VAR 0 10
40643: PPUSH
40644: CALL_OW 296
40648: PUSH
40649: LD_INT 13
40651: GREATER
40652: AND
40653: PUSH
40654: LD_VAR 0 1
40658: PPUSH
40659: LD_VAR 0 10
40663: PPUSH
40664: CALL_OW 296
40668: PUSH
40669: LD_INT 12
40671: GREATER
40672: OR
40673: IFFALSE 40677
// exit ;
40675: GO 41030
// missile := [ 1 ] ;
40677: LD_ADDR_VAR 0 14
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: EMPTY
40686: LIST
40687: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40688: LD_VAR 0 9
40692: PPUSH
40693: LD_VAR 0 12
40697: PPUSH
40698: CALL_OW 325
40702: IFFALSE 40731
// missile := Replace ( missile , missile + 1 , 2 ) ;
40704: LD_ADDR_VAR 0 14
40708: PUSH
40709: LD_VAR 0 14
40713: PPUSH
40714: LD_VAR 0 14
40718: PUSH
40719: LD_INT 1
40721: PLUS
40722: PPUSH
40723: LD_INT 2
40725: PPUSH
40726: CALL_OW 1
40730: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40731: LD_VAR 0 9
40735: PPUSH
40736: LD_VAR 0 13
40740: PPUSH
40741: CALL_OW 325
40745: PUSH
40746: LD_VAR 0 10
40750: PPUSH
40751: CALL_OW 255
40755: PPUSH
40756: LD_VAR 0 13
40760: PPUSH
40761: CALL_OW 325
40765: NOT
40766: AND
40767: IFFALSE 40796
// missile := Replace ( missile , missile + 1 , 3 ) ;
40769: LD_ADDR_VAR 0 14
40773: PUSH
40774: LD_VAR 0 14
40778: PPUSH
40779: LD_VAR 0 14
40783: PUSH
40784: LD_INT 1
40786: PLUS
40787: PPUSH
40788: LD_INT 3
40790: PPUSH
40791: CALL_OW 1
40795: ST_TO_ADDR
// if missile < 2 then
40796: LD_VAR 0 14
40800: PUSH
40801: LD_INT 2
40803: LESS
40804: IFFALSE 40808
// exit ;
40806: GO 41030
// x := GetX ( enemy ) ;
40808: LD_ADDR_VAR 0 4
40812: PUSH
40813: LD_VAR 0 10
40817: PPUSH
40818: CALL_OW 250
40822: ST_TO_ADDR
// y := GetY ( enemy ) ;
40823: LD_ADDR_VAR 0 5
40827: PUSH
40828: LD_VAR 0 10
40832: PPUSH
40833: CALL_OW 251
40837: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40838: LD_ADDR_VAR 0 6
40842: PUSH
40843: LD_VAR 0 4
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PPUSH
40852: LD_INT 1
40854: PPUSH
40855: CALL_OW 12
40859: PLUS
40860: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40861: LD_ADDR_VAR 0 7
40865: PUSH
40866: LD_VAR 0 5
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PPUSH
40875: LD_INT 1
40877: PPUSH
40878: CALL_OW 12
40882: PLUS
40883: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40884: LD_VAR 0 6
40888: PPUSH
40889: LD_VAR 0 7
40893: PPUSH
40894: CALL_OW 488
40898: NOT
40899: IFFALSE 40921
// begin _x := x ;
40901: LD_ADDR_VAR 0 6
40905: PUSH
40906: LD_VAR 0 4
40910: ST_TO_ADDR
// _y := y ;
40911: LD_ADDR_VAR 0 7
40915: PUSH
40916: LD_VAR 0 5
40920: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40921: LD_ADDR_VAR 0 3
40925: PUSH
40926: LD_INT 1
40928: PPUSH
40929: LD_VAR 0 14
40933: PPUSH
40934: CALL_OW 12
40938: ST_TO_ADDR
// case i of 1 :
40939: LD_VAR 0 3
40943: PUSH
40944: LD_INT 1
40946: DOUBLE
40947: EQUAL
40948: IFTRUE 40952
40950: GO 40969
40952: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40953: LD_VAR 0 1
40957: PPUSH
40958: LD_VAR 0 10
40962: PPUSH
40963: CALL_OW 115
40967: GO 41030
40969: LD_INT 2
40971: DOUBLE
40972: EQUAL
40973: IFTRUE 40977
40975: GO 40999
40977: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40978: LD_VAR 0 1
40982: PPUSH
40983: LD_VAR 0 6
40987: PPUSH
40988: LD_VAR 0 7
40992: PPUSH
40993: CALL_OW 153
40997: GO 41030
40999: LD_INT 3
41001: DOUBLE
41002: EQUAL
41003: IFTRUE 41007
41005: GO 41029
41007: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41008: LD_VAR 0 1
41012: PPUSH
41013: LD_VAR 0 6
41017: PPUSH
41018: LD_VAR 0 7
41022: PPUSH
41023: CALL_OW 154
41027: GO 41030
41029: POP
// end ;
41030: LD_VAR 0 2
41034: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41035: LD_INT 0
41037: PPUSH
41038: PPUSH
41039: PPUSH
41040: PPUSH
41041: PPUSH
41042: PPUSH
// if not unit or not building then
41043: LD_VAR 0 1
41047: NOT
41048: PUSH
41049: LD_VAR 0 2
41053: NOT
41054: OR
41055: IFFALSE 41059
// exit ;
41057: GO 41217
// x := GetX ( building ) ;
41059: LD_ADDR_VAR 0 5
41063: PUSH
41064: LD_VAR 0 2
41068: PPUSH
41069: CALL_OW 250
41073: ST_TO_ADDR
// y := GetY ( building ) ;
41074: LD_ADDR_VAR 0 6
41078: PUSH
41079: LD_VAR 0 2
41083: PPUSH
41084: CALL_OW 251
41088: ST_TO_ADDR
// for i = 0 to 5 do
41089: LD_ADDR_VAR 0 4
41093: PUSH
41094: DOUBLE
41095: LD_INT 0
41097: DEC
41098: ST_TO_ADDR
41099: LD_INT 5
41101: PUSH
41102: FOR_TO
41103: IFFALSE 41215
// begin _x := ShiftX ( x , i , 3 ) ;
41105: LD_ADDR_VAR 0 7
41109: PUSH
41110: LD_VAR 0 5
41114: PPUSH
41115: LD_VAR 0 4
41119: PPUSH
41120: LD_INT 3
41122: PPUSH
41123: CALL_OW 272
41127: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41128: LD_ADDR_VAR 0 8
41132: PUSH
41133: LD_VAR 0 6
41137: PPUSH
41138: LD_VAR 0 4
41142: PPUSH
41143: LD_INT 3
41145: PPUSH
41146: CALL_OW 273
41150: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41151: LD_VAR 0 7
41155: PPUSH
41156: LD_VAR 0 8
41160: PPUSH
41161: CALL_OW 488
41165: NOT
41166: IFFALSE 41170
// continue ;
41168: GO 41102
// if HexInfo ( _x , _y ) = 0 then
41170: LD_VAR 0 7
41174: PPUSH
41175: LD_VAR 0 8
41179: PPUSH
41180: CALL_OW 428
41184: PUSH
41185: LD_INT 0
41187: EQUAL
41188: IFFALSE 41213
// begin ComMoveXY ( unit , _x , _y ) ;
41190: LD_VAR 0 1
41194: PPUSH
41195: LD_VAR 0 7
41199: PPUSH
41200: LD_VAR 0 8
41204: PPUSH
41205: CALL_OW 111
// exit ;
41209: POP
41210: POP
41211: GO 41217
// end ; end ;
41213: GO 41102
41215: POP
41216: POP
// end ;
41217: LD_VAR 0 3
41221: RET
// export function ScanBase ( side , base_area ) ; begin
41222: LD_INT 0
41224: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41225: LD_ADDR_VAR 0 3
41229: PUSH
41230: LD_VAR 0 2
41234: PPUSH
41235: LD_INT 81
41237: PUSH
41238: LD_VAR 0 1
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PPUSH
41247: CALL_OW 70
41251: ST_TO_ADDR
// end ;
41252: LD_VAR 0 3
41256: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41257: LD_INT 0
41259: PPUSH
41260: PPUSH
41261: PPUSH
41262: PPUSH
// result := false ;
41263: LD_ADDR_VAR 0 2
41267: PUSH
41268: LD_INT 0
41270: ST_TO_ADDR
// side := GetSide ( unit ) ;
41271: LD_ADDR_VAR 0 3
41275: PUSH
41276: LD_VAR 0 1
41280: PPUSH
41281: CALL_OW 255
41285: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41286: LD_ADDR_VAR 0 4
41290: PUSH
41291: LD_VAR 0 1
41295: PPUSH
41296: CALL_OW 248
41300: ST_TO_ADDR
// case nat of 1 :
41301: LD_VAR 0 4
41305: PUSH
41306: LD_INT 1
41308: DOUBLE
41309: EQUAL
41310: IFTRUE 41314
41312: GO 41325
41314: POP
// tech := tech_lassight ; 2 :
41315: LD_ADDR_VAR 0 5
41319: PUSH
41320: LD_INT 12
41322: ST_TO_ADDR
41323: GO 41364
41325: LD_INT 2
41327: DOUBLE
41328: EQUAL
41329: IFTRUE 41333
41331: GO 41344
41333: POP
// tech := tech_mortar ; 3 :
41334: LD_ADDR_VAR 0 5
41338: PUSH
41339: LD_INT 41
41341: ST_TO_ADDR
41342: GO 41364
41344: LD_INT 3
41346: DOUBLE
41347: EQUAL
41348: IFTRUE 41352
41350: GO 41363
41352: POP
// tech := tech_bazooka ; end ;
41353: LD_ADDR_VAR 0 5
41357: PUSH
41358: LD_INT 44
41360: ST_TO_ADDR
41361: GO 41364
41363: POP
// if Researched ( side , tech ) then
41364: LD_VAR 0 3
41368: PPUSH
41369: LD_VAR 0 5
41373: PPUSH
41374: CALL_OW 325
41378: IFFALSE 41405
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41380: LD_ADDR_VAR 0 2
41384: PUSH
41385: LD_INT 5
41387: PUSH
41388: LD_INT 8
41390: PUSH
41391: LD_INT 9
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: LIST
41398: PUSH
41399: LD_VAR 0 4
41403: ARRAY
41404: ST_TO_ADDR
// end ;
41405: LD_VAR 0 2
41409: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41410: LD_INT 0
41412: PPUSH
41413: PPUSH
41414: PPUSH
// if not mines then
41415: LD_VAR 0 2
41419: NOT
41420: IFFALSE 41424
// exit ;
41422: GO 41568
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41424: LD_ADDR_VAR 0 5
41428: PUSH
41429: LD_INT 81
41431: PUSH
41432: LD_VAR 0 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 3
41443: PUSH
41444: LD_INT 21
41446: PUSH
41447: LD_INT 3
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PPUSH
41462: CALL_OW 69
41466: ST_TO_ADDR
// for i in mines do
41467: LD_ADDR_VAR 0 4
41471: PUSH
41472: LD_VAR 0 2
41476: PUSH
41477: FOR_IN
41478: IFFALSE 41566
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41480: LD_VAR 0 4
41484: PUSH
41485: LD_INT 1
41487: ARRAY
41488: PPUSH
41489: LD_VAR 0 4
41493: PUSH
41494: LD_INT 2
41496: ARRAY
41497: PPUSH
41498: CALL_OW 458
41502: NOT
41503: IFFALSE 41507
// continue ;
41505: GO 41477
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41507: LD_VAR 0 4
41511: PUSH
41512: LD_INT 1
41514: ARRAY
41515: PPUSH
41516: LD_VAR 0 4
41520: PUSH
41521: LD_INT 2
41523: ARRAY
41524: PPUSH
41525: CALL_OW 428
41529: PUSH
41530: LD_VAR 0 5
41534: IN
41535: IFFALSE 41564
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41537: LD_VAR 0 4
41541: PUSH
41542: LD_INT 1
41544: ARRAY
41545: PPUSH
41546: LD_VAR 0 4
41550: PUSH
41551: LD_INT 2
41553: ARRAY
41554: PPUSH
41555: LD_VAR 0 1
41559: PPUSH
41560: CALL_OW 456
// end ;
41564: GO 41477
41566: POP
41567: POP
// end ;
41568: LD_VAR 0 3
41572: RET
// export function Count ( array ) ; var i ; begin
41573: LD_INT 0
41575: PPUSH
41576: PPUSH
// result := 0 ;
41577: LD_ADDR_VAR 0 2
41581: PUSH
41582: LD_INT 0
41584: ST_TO_ADDR
// for i in array do
41585: LD_ADDR_VAR 0 3
41589: PUSH
41590: LD_VAR 0 1
41594: PUSH
41595: FOR_IN
41596: IFFALSE 41620
// if i then
41598: LD_VAR 0 3
41602: IFFALSE 41618
// result := result + 1 ;
41604: LD_ADDR_VAR 0 2
41608: PUSH
41609: LD_VAR 0 2
41613: PUSH
41614: LD_INT 1
41616: PLUS
41617: ST_TO_ADDR
41618: GO 41595
41620: POP
41621: POP
// end ;
41622: LD_VAR 0 2
41626: RET
// export function IsEmpty ( building ) ; begin
41627: LD_INT 0
41629: PPUSH
// if not building then
41630: LD_VAR 0 1
41634: NOT
41635: IFFALSE 41639
// exit ;
41637: GO 41682
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41639: LD_ADDR_VAR 0 2
41643: PUSH
41644: LD_VAR 0 1
41648: PUSH
41649: LD_INT 22
41651: PUSH
41652: LD_VAR 0 1
41656: PPUSH
41657: CALL_OW 255
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 58
41668: PUSH
41669: EMPTY
41670: LIST
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PPUSH
41676: CALL_OW 69
41680: IN
41681: ST_TO_ADDR
// end ;
41682: LD_VAR 0 2
41686: RET
// export function IsNotFull ( building ) ; var places ; begin
41687: LD_INT 0
41689: PPUSH
41690: PPUSH
// if not building then
41691: LD_VAR 0 1
41695: NOT
41696: IFFALSE 41700
// exit ;
41698: GO 41871
// result := false ;
41700: LD_ADDR_VAR 0 2
41704: PUSH
41705: LD_INT 0
41707: ST_TO_ADDR
// places := 0 ;
41708: LD_ADDR_VAR 0 3
41712: PUSH
41713: LD_INT 0
41715: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41716: LD_VAR 0 1
41720: PPUSH
41721: CALL_OW 266
41725: PUSH
41726: LD_INT 0
41728: DOUBLE
41729: EQUAL
41730: IFTRUE 41788
41732: LD_INT 1
41734: DOUBLE
41735: EQUAL
41736: IFTRUE 41788
41738: LD_INT 6
41740: DOUBLE
41741: EQUAL
41742: IFTRUE 41788
41744: LD_INT 7
41746: DOUBLE
41747: EQUAL
41748: IFTRUE 41788
41750: LD_INT 8
41752: DOUBLE
41753: EQUAL
41754: IFTRUE 41788
41756: LD_INT 4
41758: DOUBLE
41759: EQUAL
41760: IFTRUE 41788
41762: LD_INT 5
41764: DOUBLE
41765: EQUAL
41766: IFTRUE 41788
41768: LD_INT 2
41770: DOUBLE
41771: EQUAL
41772: IFTRUE 41788
41774: LD_INT 3
41776: DOUBLE
41777: EQUAL
41778: IFTRUE 41788
41780: LD_INT 35
41782: DOUBLE
41783: EQUAL
41784: IFTRUE 41788
41786: GO 41799
41788: POP
// places := 6 ; b_bunker , b_breastwork :
41789: LD_ADDR_VAR 0 3
41793: PUSH
41794: LD_INT 6
41796: ST_TO_ADDR
41797: GO 41844
41799: LD_INT 32
41801: DOUBLE
41802: EQUAL
41803: IFTRUE 41813
41805: LD_INT 31
41807: DOUBLE
41808: EQUAL
41809: IFTRUE 41813
41811: GO 41824
41813: POP
// places := 1 ; b_control_tower :
41814: LD_ADDR_VAR 0 3
41818: PUSH
41819: LD_INT 1
41821: ST_TO_ADDR
41822: GO 41844
41824: LD_INT 36
41826: DOUBLE
41827: EQUAL
41828: IFTRUE 41832
41830: GO 41843
41832: POP
// places := 3 ; end ;
41833: LD_ADDR_VAR 0 3
41837: PUSH
41838: LD_INT 3
41840: ST_TO_ADDR
41841: GO 41844
41843: POP
// if places then
41844: LD_VAR 0 3
41848: IFFALSE 41871
// result := UnitsInside ( building ) < places ;
41850: LD_ADDR_VAR 0 2
41854: PUSH
41855: LD_VAR 0 1
41859: PPUSH
41860: CALL_OW 313
41864: PUSH
41865: LD_VAR 0 3
41869: LESS
41870: ST_TO_ADDR
// end ;
41871: LD_VAR 0 2
41875: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41876: LD_INT 0
41878: PPUSH
41879: PPUSH
41880: PPUSH
41881: PPUSH
// tmp := [ ] ;
41882: LD_ADDR_VAR 0 3
41886: PUSH
41887: EMPTY
41888: ST_TO_ADDR
// list := [ ] ;
41889: LD_ADDR_VAR 0 5
41893: PUSH
41894: EMPTY
41895: ST_TO_ADDR
// for i = 16 to 25 do
41896: LD_ADDR_VAR 0 4
41900: PUSH
41901: DOUBLE
41902: LD_INT 16
41904: DEC
41905: ST_TO_ADDR
41906: LD_INT 25
41908: PUSH
41909: FOR_TO
41910: IFFALSE 41983
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41912: LD_ADDR_VAR 0 3
41916: PUSH
41917: LD_VAR 0 3
41921: PUSH
41922: LD_INT 22
41924: PUSH
41925: LD_VAR 0 1
41929: PPUSH
41930: CALL_OW 255
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 91
41941: PUSH
41942: LD_VAR 0 1
41946: PUSH
41947: LD_INT 6
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 30
41957: PUSH
41958: LD_VAR 0 4
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: PPUSH
41975: CALL_OW 69
41979: ADD
41980: ST_TO_ADDR
41981: GO 41909
41983: POP
41984: POP
// for i = 1 to tmp do
41985: LD_ADDR_VAR 0 4
41989: PUSH
41990: DOUBLE
41991: LD_INT 1
41993: DEC
41994: ST_TO_ADDR
41995: LD_VAR 0 3
41999: PUSH
42000: FOR_TO
42001: IFFALSE 42089
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42003: LD_ADDR_VAR 0 5
42007: PUSH
42008: LD_VAR 0 5
42012: PUSH
42013: LD_VAR 0 3
42017: PUSH
42018: LD_VAR 0 4
42022: ARRAY
42023: PPUSH
42024: CALL_OW 266
42028: PUSH
42029: LD_VAR 0 3
42033: PUSH
42034: LD_VAR 0 4
42038: ARRAY
42039: PPUSH
42040: CALL_OW 250
42044: PUSH
42045: LD_VAR 0 3
42049: PUSH
42050: LD_VAR 0 4
42054: ARRAY
42055: PPUSH
42056: CALL_OW 251
42060: PUSH
42061: LD_VAR 0 3
42065: PUSH
42066: LD_VAR 0 4
42070: ARRAY
42071: PPUSH
42072: CALL_OW 254
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: PUSH
42083: EMPTY
42084: LIST
42085: ADD
42086: ST_TO_ADDR
42087: GO 42000
42089: POP
42090: POP
// result := list ;
42091: LD_ADDR_VAR 0 2
42095: PUSH
42096: LD_VAR 0 5
42100: ST_TO_ADDR
// end ;
42101: LD_VAR 0 2
42105: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42106: LD_INT 0
42108: PPUSH
42109: PPUSH
42110: PPUSH
42111: PPUSH
42112: PPUSH
42113: PPUSH
42114: PPUSH
// if not factory then
42115: LD_VAR 0 1
42119: NOT
42120: IFFALSE 42124
// exit ;
42122: GO 42717
// if control = control_apeman then
42124: LD_VAR 0 4
42128: PUSH
42129: LD_INT 5
42131: EQUAL
42132: IFFALSE 42241
// begin tmp := UnitsInside ( factory ) ;
42134: LD_ADDR_VAR 0 8
42138: PUSH
42139: LD_VAR 0 1
42143: PPUSH
42144: CALL_OW 313
42148: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42149: LD_VAR 0 8
42153: PPUSH
42154: LD_INT 25
42156: PUSH
42157: LD_INT 12
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PPUSH
42164: CALL_OW 72
42168: NOT
42169: IFFALSE 42179
// control := control_manual ;
42171: LD_ADDR_VAR 0 4
42175: PUSH
42176: LD_INT 1
42178: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42179: LD_ADDR_VAR 0 8
42183: PUSH
42184: LD_VAR 0 1
42188: PPUSH
42189: CALL 41876 0 1
42193: ST_TO_ADDR
// if tmp then
42194: LD_VAR 0 8
42198: IFFALSE 42241
// begin for i in tmp do
42200: LD_ADDR_VAR 0 7
42204: PUSH
42205: LD_VAR 0 8
42209: PUSH
42210: FOR_IN
42211: IFFALSE 42239
// if i [ 1 ] = b_ext_radio then
42213: LD_VAR 0 7
42217: PUSH
42218: LD_INT 1
42220: ARRAY
42221: PUSH
42222: LD_INT 22
42224: EQUAL
42225: IFFALSE 42237
// begin control := control_remote ;
42227: LD_ADDR_VAR 0 4
42231: PUSH
42232: LD_INT 2
42234: ST_TO_ADDR
// break ;
42235: GO 42239
// end ;
42237: GO 42210
42239: POP
42240: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42241: LD_VAR 0 1
42245: PPUSH
42246: LD_VAR 0 2
42250: PPUSH
42251: LD_VAR 0 3
42255: PPUSH
42256: LD_VAR 0 4
42260: PPUSH
42261: LD_VAR 0 5
42265: PPUSH
42266: CALL_OW 448
42270: IFFALSE 42305
// begin result := [ chassis , engine , control , weapon ] ;
42272: LD_ADDR_VAR 0 6
42276: PUSH
42277: LD_VAR 0 2
42281: PUSH
42282: LD_VAR 0 3
42286: PUSH
42287: LD_VAR 0 4
42291: PUSH
42292: LD_VAR 0 5
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: ST_TO_ADDR
// exit ;
42303: GO 42717
// end ; _chassis := AvailableChassisList ( factory ) ;
42305: LD_ADDR_VAR 0 9
42309: PUSH
42310: LD_VAR 0 1
42314: PPUSH
42315: CALL_OW 475
42319: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42320: LD_ADDR_VAR 0 11
42324: PUSH
42325: LD_VAR 0 1
42329: PPUSH
42330: CALL_OW 476
42334: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42335: LD_ADDR_VAR 0 12
42339: PUSH
42340: LD_VAR 0 1
42344: PPUSH
42345: CALL_OW 477
42349: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42350: LD_ADDR_VAR 0 10
42354: PUSH
42355: LD_VAR 0 1
42359: PPUSH
42360: CALL_OW 478
42364: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42365: LD_VAR 0 9
42369: NOT
42370: PUSH
42371: LD_VAR 0 11
42375: NOT
42376: OR
42377: PUSH
42378: LD_VAR 0 12
42382: NOT
42383: OR
42384: PUSH
42385: LD_VAR 0 10
42389: NOT
42390: OR
42391: IFFALSE 42426
// begin result := [ chassis , engine , control , weapon ] ;
42393: LD_ADDR_VAR 0 6
42397: PUSH
42398: LD_VAR 0 2
42402: PUSH
42403: LD_VAR 0 3
42407: PUSH
42408: LD_VAR 0 4
42412: PUSH
42413: LD_VAR 0 5
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: ST_TO_ADDR
// exit ;
42424: GO 42717
// end ; if not chassis in _chassis then
42426: LD_VAR 0 2
42430: PUSH
42431: LD_VAR 0 9
42435: IN
42436: NOT
42437: IFFALSE 42463
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42439: LD_ADDR_VAR 0 2
42443: PUSH
42444: LD_VAR 0 9
42448: PUSH
42449: LD_INT 1
42451: PPUSH
42452: LD_VAR 0 9
42456: PPUSH
42457: CALL_OW 12
42461: ARRAY
42462: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42463: LD_VAR 0 2
42467: PPUSH
42468: LD_VAR 0 3
42472: PPUSH
42473: CALL 42722 0 2
42477: NOT
42478: IFFALSE 42537
// repeat engine := _engine [ 1 ] ;
42480: LD_ADDR_VAR 0 3
42484: PUSH
42485: LD_VAR 0 11
42489: PUSH
42490: LD_INT 1
42492: ARRAY
42493: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42494: LD_ADDR_VAR 0 11
42498: PUSH
42499: LD_VAR 0 11
42503: PPUSH
42504: LD_INT 1
42506: PPUSH
42507: CALL_OW 3
42511: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42512: LD_VAR 0 2
42516: PPUSH
42517: LD_VAR 0 3
42521: PPUSH
42522: CALL 42722 0 2
42526: PUSH
42527: LD_VAR 0 11
42531: PUSH
42532: EMPTY
42533: EQUAL
42534: OR
42535: IFFALSE 42480
// if not control in _control then
42537: LD_VAR 0 4
42541: PUSH
42542: LD_VAR 0 12
42546: IN
42547: NOT
42548: IFFALSE 42574
// control := _control [ rand ( 1 , _control ) ] ;
42550: LD_ADDR_VAR 0 4
42554: PUSH
42555: LD_VAR 0 12
42559: PUSH
42560: LD_INT 1
42562: PPUSH
42563: LD_VAR 0 12
42567: PPUSH
42568: CALL_OW 12
42572: ARRAY
42573: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42574: LD_VAR 0 2
42578: PPUSH
42579: LD_VAR 0 5
42583: PPUSH
42584: CALL 42942 0 2
42588: NOT
42589: IFFALSE 42648
// repeat weapon := _weapon [ 1 ] ;
42591: LD_ADDR_VAR 0 5
42595: PUSH
42596: LD_VAR 0 10
42600: PUSH
42601: LD_INT 1
42603: ARRAY
42604: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42605: LD_ADDR_VAR 0 10
42609: PUSH
42610: LD_VAR 0 10
42614: PPUSH
42615: LD_INT 1
42617: PPUSH
42618: CALL_OW 3
42622: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42623: LD_VAR 0 2
42627: PPUSH
42628: LD_VAR 0 5
42632: PPUSH
42633: CALL 42942 0 2
42637: PUSH
42638: LD_VAR 0 10
42642: PUSH
42643: EMPTY
42644: EQUAL
42645: OR
42646: IFFALSE 42591
// result := [ ] ;
42648: LD_ADDR_VAR 0 6
42652: PUSH
42653: EMPTY
42654: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42655: LD_VAR 0 1
42659: PPUSH
42660: LD_VAR 0 2
42664: PPUSH
42665: LD_VAR 0 3
42669: PPUSH
42670: LD_VAR 0 4
42674: PPUSH
42675: LD_VAR 0 5
42679: PPUSH
42680: CALL_OW 448
42684: IFFALSE 42717
// result := [ chassis , engine , control , weapon ] ;
42686: LD_ADDR_VAR 0 6
42690: PUSH
42691: LD_VAR 0 2
42695: PUSH
42696: LD_VAR 0 3
42700: PUSH
42701: LD_VAR 0 4
42705: PUSH
42706: LD_VAR 0 5
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: ST_TO_ADDR
// end ;
42717: LD_VAR 0 6
42721: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42722: LD_INT 0
42724: PPUSH
// if not chassis or not engine then
42725: LD_VAR 0 1
42729: NOT
42730: PUSH
42731: LD_VAR 0 2
42735: NOT
42736: OR
42737: IFFALSE 42741
// exit ;
42739: GO 42937
// case engine of engine_solar :
42741: LD_VAR 0 2
42745: PUSH
42746: LD_INT 2
42748: DOUBLE
42749: EQUAL
42750: IFTRUE 42754
42752: GO 42792
42754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42755: LD_ADDR_VAR 0 3
42759: PUSH
42760: LD_INT 11
42762: PUSH
42763: LD_INT 12
42765: PUSH
42766: LD_INT 13
42768: PUSH
42769: LD_INT 14
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: LD_INT 3
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: ST_TO_ADDR
42790: GO 42921
42792: LD_INT 1
42794: DOUBLE
42795: EQUAL
42796: IFTRUE 42800
42798: GO 42862
42800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42801: LD_ADDR_VAR 0 3
42805: PUSH
42806: LD_INT 11
42808: PUSH
42809: LD_INT 12
42811: PUSH
42812: LD_INT 13
42814: PUSH
42815: LD_INT 14
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 3
42826: PUSH
42827: LD_INT 4
42829: PUSH
42830: LD_INT 5
42832: PUSH
42833: LD_INT 21
42835: PUSH
42836: LD_INT 23
42838: PUSH
42839: LD_INT 22
42841: PUSH
42842: LD_INT 24
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: ST_TO_ADDR
42860: GO 42921
42862: LD_INT 3
42864: DOUBLE
42865: EQUAL
42866: IFTRUE 42870
42868: GO 42920
42870: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42871: LD_ADDR_VAR 0 3
42875: PUSH
42876: LD_INT 13
42878: PUSH
42879: LD_INT 14
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: LD_INT 3
42887: PUSH
42888: LD_INT 4
42890: PUSH
42891: LD_INT 5
42893: PUSH
42894: LD_INT 21
42896: PUSH
42897: LD_INT 22
42899: PUSH
42900: LD_INT 23
42902: PUSH
42903: LD_INT 24
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: ST_TO_ADDR
42918: GO 42921
42920: POP
// result := ( chassis in result ) ;
42921: LD_ADDR_VAR 0 3
42925: PUSH
42926: LD_VAR 0 1
42930: PUSH
42931: LD_VAR 0 3
42935: IN
42936: ST_TO_ADDR
// end ;
42937: LD_VAR 0 3
42941: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42942: LD_INT 0
42944: PPUSH
// if not chassis or not weapon then
42945: LD_VAR 0 1
42949: NOT
42950: PUSH
42951: LD_VAR 0 2
42955: NOT
42956: OR
42957: IFFALSE 42961
// exit ;
42959: GO 44021
// case weapon of us_machine_gun :
42961: LD_VAR 0 2
42965: PUSH
42966: LD_INT 2
42968: DOUBLE
42969: EQUAL
42970: IFTRUE 42974
42972: GO 43004
42974: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42975: LD_ADDR_VAR 0 3
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: LD_INT 3
42988: PUSH
42989: LD_INT 4
42991: PUSH
42992: LD_INT 5
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: ST_TO_ADDR
43002: GO 44005
43004: LD_INT 3
43006: DOUBLE
43007: EQUAL
43008: IFTRUE 43012
43010: GO 43042
43012: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43013: LD_ADDR_VAR 0 3
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: LD_INT 3
43026: PUSH
43027: LD_INT 4
43029: PUSH
43030: LD_INT 5
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: ST_TO_ADDR
43040: GO 44005
43042: LD_INT 11
43044: DOUBLE
43045: EQUAL
43046: IFTRUE 43050
43048: GO 43080
43050: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43051: LD_ADDR_VAR 0 3
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: LD_INT 4
43067: PUSH
43068: LD_INT 5
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
43078: GO 44005
43080: LD_INT 4
43082: DOUBLE
43083: EQUAL
43084: IFTRUE 43088
43086: GO 43114
43088: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43089: LD_ADDR_VAR 0 3
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: LD_INT 3
43099: PUSH
43100: LD_INT 4
43102: PUSH
43103: LD_INT 5
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
43112: GO 44005
43114: LD_INT 5
43116: DOUBLE
43117: EQUAL
43118: IFTRUE 43122
43120: GO 43148
43122: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43123: LD_ADDR_VAR 0 3
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: LD_INT 3
43133: PUSH
43134: LD_INT 4
43136: PUSH
43137: LD_INT 5
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: ST_TO_ADDR
43146: GO 44005
43148: LD_INT 9
43150: DOUBLE
43151: EQUAL
43152: IFTRUE 43156
43154: GO 43182
43156: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43157: LD_ADDR_VAR 0 3
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: LD_INT 3
43167: PUSH
43168: LD_INT 4
43170: PUSH
43171: LD_INT 5
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: ST_TO_ADDR
43180: GO 44005
43182: LD_INT 7
43184: DOUBLE
43185: EQUAL
43186: IFTRUE 43190
43188: GO 43216
43190: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43191: LD_ADDR_VAR 0 3
43195: PUSH
43196: LD_INT 2
43198: PUSH
43199: LD_INT 3
43201: PUSH
43202: LD_INT 4
43204: PUSH
43205: LD_INT 5
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: ST_TO_ADDR
43214: GO 44005
43216: LD_INT 12
43218: DOUBLE
43219: EQUAL
43220: IFTRUE 43224
43222: GO 43250
43224: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43225: LD_ADDR_VAR 0 3
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: LD_INT 4
43238: PUSH
43239: LD_INT 5
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: ST_TO_ADDR
43248: GO 44005
43250: LD_INT 13
43252: DOUBLE
43253: EQUAL
43254: IFTRUE 43258
43256: GO 43284
43258: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43259: LD_ADDR_VAR 0 3
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: LD_INT 3
43269: PUSH
43270: LD_INT 4
43272: PUSH
43273: LD_INT 5
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: ST_TO_ADDR
43282: GO 44005
43284: LD_INT 14
43286: DOUBLE
43287: EQUAL
43288: IFTRUE 43292
43290: GO 43310
43292: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43293: LD_ADDR_VAR 0 3
43297: PUSH
43298: LD_INT 4
43300: PUSH
43301: LD_INT 5
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: ST_TO_ADDR
43308: GO 44005
43310: LD_INT 6
43312: DOUBLE
43313: EQUAL
43314: IFTRUE 43318
43316: GO 43336
43318: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43319: LD_ADDR_VAR 0 3
43323: PUSH
43324: LD_INT 4
43326: PUSH
43327: LD_INT 5
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: ST_TO_ADDR
43334: GO 44005
43336: LD_INT 10
43338: DOUBLE
43339: EQUAL
43340: IFTRUE 43344
43342: GO 43362
43344: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43345: LD_ADDR_VAR 0 3
43349: PUSH
43350: LD_INT 4
43352: PUSH
43353: LD_INT 5
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: ST_TO_ADDR
43360: GO 44005
43362: LD_INT 22
43364: DOUBLE
43365: EQUAL
43366: IFTRUE 43370
43368: GO 43396
43370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43371: LD_ADDR_VAR 0 3
43375: PUSH
43376: LD_INT 11
43378: PUSH
43379: LD_INT 12
43381: PUSH
43382: LD_INT 13
43384: PUSH
43385: LD_INT 14
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: ST_TO_ADDR
43394: GO 44005
43396: LD_INT 23
43398: DOUBLE
43399: EQUAL
43400: IFTRUE 43404
43402: GO 43430
43404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43405: LD_ADDR_VAR 0 3
43409: PUSH
43410: LD_INT 11
43412: PUSH
43413: LD_INT 12
43415: PUSH
43416: LD_INT 13
43418: PUSH
43419: LD_INT 14
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: ST_TO_ADDR
43428: GO 44005
43430: LD_INT 24
43432: DOUBLE
43433: EQUAL
43434: IFTRUE 43438
43436: GO 43464
43438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43439: LD_ADDR_VAR 0 3
43443: PUSH
43444: LD_INT 11
43446: PUSH
43447: LD_INT 12
43449: PUSH
43450: LD_INT 13
43452: PUSH
43453: LD_INT 14
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: ST_TO_ADDR
43462: GO 44005
43464: LD_INT 30
43466: DOUBLE
43467: EQUAL
43468: IFTRUE 43472
43470: GO 43498
43472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43473: LD_ADDR_VAR 0 3
43477: PUSH
43478: LD_INT 11
43480: PUSH
43481: LD_INT 12
43483: PUSH
43484: LD_INT 13
43486: PUSH
43487: LD_INT 14
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: ST_TO_ADDR
43496: GO 44005
43498: LD_INT 25
43500: DOUBLE
43501: EQUAL
43502: IFTRUE 43506
43504: GO 43524
43506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43507: LD_ADDR_VAR 0 3
43511: PUSH
43512: LD_INT 13
43514: PUSH
43515: LD_INT 14
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: ST_TO_ADDR
43522: GO 44005
43524: LD_INT 27
43526: DOUBLE
43527: EQUAL
43528: IFTRUE 43532
43530: GO 43550
43532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43533: LD_ADDR_VAR 0 3
43537: PUSH
43538: LD_INT 13
43540: PUSH
43541: LD_INT 14
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: ST_TO_ADDR
43548: GO 44005
43550: LD_INT 92
43552: DOUBLE
43553: EQUAL
43554: IFTRUE 43558
43556: GO 43584
43558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: LD_INT 11
43566: PUSH
43567: LD_INT 12
43569: PUSH
43570: LD_INT 13
43572: PUSH
43573: LD_INT 14
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: ST_TO_ADDR
43582: GO 44005
43584: LD_INT 28
43586: DOUBLE
43587: EQUAL
43588: IFTRUE 43592
43590: GO 43610
43592: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43593: LD_ADDR_VAR 0 3
43597: PUSH
43598: LD_INT 13
43600: PUSH
43601: LD_INT 14
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: ST_TO_ADDR
43608: GO 44005
43610: LD_INT 29
43612: DOUBLE
43613: EQUAL
43614: IFTRUE 43618
43616: GO 43636
43618: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43619: LD_ADDR_VAR 0 3
43623: PUSH
43624: LD_INT 13
43626: PUSH
43627: LD_INT 14
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: ST_TO_ADDR
43634: GO 44005
43636: LD_INT 31
43638: DOUBLE
43639: EQUAL
43640: IFTRUE 43644
43642: GO 43662
43644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43645: LD_ADDR_VAR 0 3
43649: PUSH
43650: LD_INT 13
43652: PUSH
43653: LD_INT 14
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: ST_TO_ADDR
43660: GO 44005
43662: LD_INT 26
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43670
43668: GO 43688
43670: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_INT 13
43678: PUSH
43679: LD_INT 14
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: ST_TO_ADDR
43686: GO 44005
43688: LD_INT 42
43690: DOUBLE
43691: EQUAL
43692: IFTRUE 43696
43694: GO 43722
43696: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43697: LD_ADDR_VAR 0 3
43701: PUSH
43702: LD_INT 21
43704: PUSH
43705: LD_INT 22
43707: PUSH
43708: LD_INT 23
43710: PUSH
43711: LD_INT 24
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: ST_TO_ADDR
43720: GO 44005
43722: LD_INT 43
43724: DOUBLE
43725: EQUAL
43726: IFTRUE 43730
43728: GO 43756
43730: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43731: LD_ADDR_VAR 0 3
43735: PUSH
43736: LD_INT 21
43738: PUSH
43739: LD_INT 22
43741: PUSH
43742: LD_INT 23
43744: PUSH
43745: LD_INT 24
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: ST_TO_ADDR
43754: GO 44005
43756: LD_INT 44
43758: DOUBLE
43759: EQUAL
43760: IFTRUE 43764
43762: GO 43790
43764: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43765: LD_ADDR_VAR 0 3
43769: PUSH
43770: LD_INT 21
43772: PUSH
43773: LD_INT 22
43775: PUSH
43776: LD_INT 23
43778: PUSH
43779: LD_INT 24
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: ST_TO_ADDR
43788: GO 44005
43790: LD_INT 45
43792: DOUBLE
43793: EQUAL
43794: IFTRUE 43798
43796: GO 43824
43798: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43799: LD_ADDR_VAR 0 3
43803: PUSH
43804: LD_INT 21
43806: PUSH
43807: LD_INT 22
43809: PUSH
43810: LD_INT 23
43812: PUSH
43813: LD_INT 24
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
43822: GO 44005
43824: LD_INT 49
43826: DOUBLE
43827: EQUAL
43828: IFTRUE 43832
43830: GO 43858
43832: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43833: LD_ADDR_VAR 0 3
43837: PUSH
43838: LD_INT 21
43840: PUSH
43841: LD_INT 22
43843: PUSH
43844: LD_INT 23
43846: PUSH
43847: LD_INT 24
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: ST_TO_ADDR
43856: GO 44005
43858: LD_INT 51
43860: DOUBLE
43861: EQUAL
43862: IFTRUE 43866
43864: GO 43892
43866: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43867: LD_ADDR_VAR 0 3
43871: PUSH
43872: LD_INT 21
43874: PUSH
43875: LD_INT 22
43877: PUSH
43878: LD_INT 23
43880: PUSH
43881: LD_INT 24
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: ST_TO_ADDR
43890: GO 44005
43892: LD_INT 52
43894: DOUBLE
43895: EQUAL
43896: IFTRUE 43900
43898: GO 43926
43900: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43901: LD_ADDR_VAR 0 3
43905: PUSH
43906: LD_INT 21
43908: PUSH
43909: LD_INT 22
43911: PUSH
43912: LD_INT 23
43914: PUSH
43915: LD_INT 24
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: ST_TO_ADDR
43924: GO 44005
43926: LD_INT 53
43928: DOUBLE
43929: EQUAL
43930: IFTRUE 43934
43932: GO 43952
43934: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43935: LD_ADDR_VAR 0 3
43939: PUSH
43940: LD_INT 23
43942: PUSH
43943: LD_INT 24
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: ST_TO_ADDR
43950: GO 44005
43952: LD_INT 46
43954: DOUBLE
43955: EQUAL
43956: IFTRUE 43960
43958: GO 43978
43960: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43961: LD_ADDR_VAR 0 3
43965: PUSH
43966: LD_INT 23
43968: PUSH
43969: LD_INT 24
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: ST_TO_ADDR
43976: GO 44005
43978: LD_INT 47
43980: DOUBLE
43981: EQUAL
43982: IFTRUE 43986
43984: GO 44004
43986: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43987: LD_ADDR_VAR 0 3
43991: PUSH
43992: LD_INT 23
43994: PUSH
43995: LD_INT 24
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: ST_TO_ADDR
44002: GO 44005
44004: POP
// result := ( chassis in result ) ;
44005: LD_ADDR_VAR 0 3
44009: PUSH
44010: LD_VAR 0 1
44014: PUSH
44015: LD_VAR 0 3
44019: IN
44020: ST_TO_ADDR
// end ;
44021: LD_VAR 0 3
44025: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44026: LD_INT 0
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
44034: PPUSH
// result := array ;
44035: LD_ADDR_VAR 0 5
44039: PUSH
44040: LD_VAR 0 1
44044: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44045: LD_VAR 0 1
44049: NOT
44050: PUSH
44051: LD_VAR 0 2
44055: NOT
44056: OR
44057: PUSH
44058: LD_VAR 0 3
44062: NOT
44063: OR
44064: PUSH
44065: LD_VAR 0 2
44069: PUSH
44070: LD_VAR 0 1
44074: GREATER
44075: OR
44076: PUSH
44077: LD_VAR 0 3
44081: PUSH
44082: LD_VAR 0 1
44086: GREATER
44087: OR
44088: IFFALSE 44092
// exit ;
44090: GO 44388
// if direction then
44092: LD_VAR 0 4
44096: IFFALSE 44160
// begin d := 1 ;
44098: LD_ADDR_VAR 0 9
44102: PUSH
44103: LD_INT 1
44105: ST_TO_ADDR
// if i_from > i_to then
44106: LD_VAR 0 2
44110: PUSH
44111: LD_VAR 0 3
44115: GREATER
44116: IFFALSE 44142
// length := ( array - i_from ) + i_to else
44118: LD_ADDR_VAR 0 11
44122: PUSH
44123: LD_VAR 0 1
44127: PUSH
44128: LD_VAR 0 2
44132: MINUS
44133: PUSH
44134: LD_VAR 0 3
44138: PLUS
44139: ST_TO_ADDR
44140: GO 44158
// length := i_to - i_from ;
44142: LD_ADDR_VAR 0 11
44146: PUSH
44147: LD_VAR 0 3
44151: PUSH
44152: LD_VAR 0 2
44156: MINUS
44157: ST_TO_ADDR
// end else
44158: GO 44221
// begin d := - 1 ;
44160: LD_ADDR_VAR 0 9
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: ST_TO_ADDR
// if i_from > i_to then
44169: LD_VAR 0 2
44173: PUSH
44174: LD_VAR 0 3
44178: GREATER
44179: IFFALSE 44199
// length := i_from - i_to else
44181: LD_ADDR_VAR 0 11
44185: PUSH
44186: LD_VAR 0 2
44190: PUSH
44191: LD_VAR 0 3
44195: MINUS
44196: ST_TO_ADDR
44197: GO 44221
// length := ( array - i_to ) + i_from ;
44199: LD_ADDR_VAR 0 11
44203: PUSH
44204: LD_VAR 0 1
44208: PUSH
44209: LD_VAR 0 3
44213: MINUS
44214: PUSH
44215: LD_VAR 0 2
44219: PLUS
44220: ST_TO_ADDR
// end ; if not length then
44221: LD_VAR 0 11
44225: NOT
44226: IFFALSE 44230
// exit ;
44228: GO 44388
// tmp := array ;
44230: LD_ADDR_VAR 0 10
44234: PUSH
44235: LD_VAR 0 1
44239: ST_TO_ADDR
// for i = 1 to length do
44240: LD_ADDR_VAR 0 6
44244: PUSH
44245: DOUBLE
44246: LD_INT 1
44248: DEC
44249: ST_TO_ADDR
44250: LD_VAR 0 11
44254: PUSH
44255: FOR_TO
44256: IFFALSE 44376
// begin for j = 1 to array do
44258: LD_ADDR_VAR 0 7
44262: PUSH
44263: DOUBLE
44264: LD_INT 1
44266: DEC
44267: ST_TO_ADDR
44268: LD_VAR 0 1
44272: PUSH
44273: FOR_TO
44274: IFFALSE 44362
// begin k := j + d ;
44276: LD_ADDR_VAR 0 8
44280: PUSH
44281: LD_VAR 0 7
44285: PUSH
44286: LD_VAR 0 9
44290: PLUS
44291: ST_TO_ADDR
// if k > array then
44292: LD_VAR 0 8
44296: PUSH
44297: LD_VAR 0 1
44301: GREATER
44302: IFFALSE 44312
// k := 1 ;
44304: LD_ADDR_VAR 0 8
44308: PUSH
44309: LD_INT 1
44311: ST_TO_ADDR
// if not k then
44312: LD_VAR 0 8
44316: NOT
44317: IFFALSE 44329
// k := array ;
44319: LD_ADDR_VAR 0 8
44323: PUSH
44324: LD_VAR 0 1
44328: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44329: LD_ADDR_VAR 0 10
44333: PUSH
44334: LD_VAR 0 10
44338: PPUSH
44339: LD_VAR 0 8
44343: PPUSH
44344: LD_VAR 0 1
44348: PUSH
44349: LD_VAR 0 7
44353: ARRAY
44354: PPUSH
44355: CALL_OW 1
44359: ST_TO_ADDR
// end ;
44360: GO 44273
44362: POP
44363: POP
// array := tmp ;
44364: LD_ADDR_VAR 0 1
44368: PUSH
44369: LD_VAR 0 10
44373: ST_TO_ADDR
// end ;
44374: GO 44255
44376: POP
44377: POP
// result := array ;
44378: LD_ADDR_VAR 0 5
44382: PUSH
44383: LD_VAR 0 1
44387: ST_TO_ADDR
// end ;
44388: LD_VAR 0 5
44392: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44393: LD_INT 0
44395: PPUSH
44396: PPUSH
// result := 0 ;
44397: LD_ADDR_VAR 0 3
44401: PUSH
44402: LD_INT 0
44404: ST_TO_ADDR
// if not array or not value in array then
44405: LD_VAR 0 1
44409: NOT
44410: PUSH
44411: LD_VAR 0 2
44415: PUSH
44416: LD_VAR 0 1
44420: IN
44421: NOT
44422: OR
44423: IFFALSE 44427
// exit ;
44425: GO 44481
// for i = 1 to array do
44427: LD_ADDR_VAR 0 4
44431: PUSH
44432: DOUBLE
44433: LD_INT 1
44435: DEC
44436: ST_TO_ADDR
44437: LD_VAR 0 1
44441: PUSH
44442: FOR_TO
44443: IFFALSE 44479
// if value = array [ i ] then
44445: LD_VAR 0 2
44449: PUSH
44450: LD_VAR 0 1
44454: PUSH
44455: LD_VAR 0 4
44459: ARRAY
44460: EQUAL
44461: IFFALSE 44477
// begin result := i ;
44463: LD_ADDR_VAR 0 3
44467: PUSH
44468: LD_VAR 0 4
44472: ST_TO_ADDR
// exit ;
44473: POP
44474: POP
44475: GO 44481
// end ;
44477: GO 44442
44479: POP
44480: POP
// end ;
44481: LD_VAR 0 3
44485: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44486: LD_INT 0
44488: PPUSH
// vc_chassis := chassis ;
44489: LD_ADDR_OWVAR 37
44493: PUSH
44494: LD_VAR 0 1
44498: ST_TO_ADDR
// vc_engine := engine ;
44499: LD_ADDR_OWVAR 39
44503: PUSH
44504: LD_VAR 0 2
44508: ST_TO_ADDR
// vc_control := control ;
44509: LD_ADDR_OWVAR 38
44513: PUSH
44514: LD_VAR 0 3
44518: ST_TO_ADDR
// vc_weapon := weapon ;
44519: LD_ADDR_OWVAR 40
44523: PUSH
44524: LD_VAR 0 4
44528: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44529: LD_ADDR_OWVAR 41
44533: PUSH
44534: LD_VAR 0 5
44538: ST_TO_ADDR
// end ;
44539: LD_VAR 0 6
44543: RET
// export function WantPlant ( unit ) ; var task ; begin
44544: LD_INT 0
44546: PPUSH
44547: PPUSH
// result := false ;
44548: LD_ADDR_VAR 0 2
44552: PUSH
44553: LD_INT 0
44555: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44556: LD_ADDR_VAR 0 3
44560: PUSH
44561: LD_VAR 0 1
44565: PPUSH
44566: CALL_OW 437
44570: ST_TO_ADDR
// if task then
44571: LD_VAR 0 3
44575: IFFALSE 44603
// if task [ 1 ] [ 1 ] = p then
44577: LD_VAR 0 3
44581: PUSH
44582: LD_INT 1
44584: ARRAY
44585: PUSH
44586: LD_INT 1
44588: ARRAY
44589: PUSH
44590: LD_STRING p
44592: EQUAL
44593: IFFALSE 44603
// result := true ;
44595: LD_ADDR_VAR 0 2
44599: PUSH
44600: LD_INT 1
44602: ST_TO_ADDR
// end ;
44603: LD_VAR 0 2
44607: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44608: LD_INT 0
44610: PPUSH
44611: PPUSH
44612: PPUSH
44613: PPUSH
// if pos < 1 then
44614: LD_VAR 0 2
44618: PUSH
44619: LD_INT 1
44621: LESS
44622: IFFALSE 44626
// exit ;
44624: GO 44929
// if pos = 1 then
44626: LD_VAR 0 2
44630: PUSH
44631: LD_INT 1
44633: EQUAL
44634: IFFALSE 44667
// result := Replace ( arr , pos [ 1 ] , value ) else
44636: LD_ADDR_VAR 0 4
44640: PUSH
44641: LD_VAR 0 1
44645: PPUSH
44646: LD_VAR 0 2
44650: PUSH
44651: LD_INT 1
44653: ARRAY
44654: PPUSH
44655: LD_VAR 0 3
44659: PPUSH
44660: CALL_OW 1
44664: ST_TO_ADDR
44665: GO 44929
// begin tmp := arr ;
44667: LD_ADDR_VAR 0 6
44671: PUSH
44672: LD_VAR 0 1
44676: ST_TO_ADDR
// s_arr := [ tmp ] ;
44677: LD_ADDR_VAR 0 7
44681: PUSH
44682: LD_VAR 0 6
44686: PUSH
44687: EMPTY
44688: LIST
44689: ST_TO_ADDR
// for i = 1 to pos - 1 do
44690: LD_ADDR_VAR 0 5
44694: PUSH
44695: DOUBLE
44696: LD_INT 1
44698: DEC
44699: ST_TO_ADDR
44700: LD_VAR 0 2
44704: PUSH
44705: LD_INT 1
44707: MINUS
44708: PUSH
44709: FOR_TO
44710: IFFALSE 44755
// begin tmp := tmp [ pos [ i ] ] ;
44712: LD_ADDR_VAR 0 6
44716: PUSH
44717: LD_VAR 0 6
44721: PUSH
44722: LD_VAR 0 2
44726: PUSH
44727: LD_VAR 0 5
44731: ARRAY
44732: ARRAY
44733: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44734: LD_ADDR_VAR 0 7
44738: PUSH
44739: LD_VAR 0 7
44743: PUSH
44744: LD_VAR 0 6
44748: PUSH
44749: EMPTY
44750: LIST
44751: ADD
44752: ST_TO_ADDR
// end ;
44753: GO 44709
44755: POP
44756: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44757: LD_ADDR_VAR 0 6
44761: PUSH
44762: LD_VAR 0 6
44766: PPUSH
44767: LD_VAR 0 2
44771: PUSH
44772: LD_VAR 0 2
44776: ARRAY
44777: PPUSH
44778: LD_VAR 0 3
44782: PPUSH
44783: CALL_OW 1
44787: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44788: LD_ADDR_VAR 0 7
44792: PUSH
44793: LD_VAR 0 7
44797: PPUSH
44798: LD_VAR 0 7
44802: PPUSH
44803: LD_VAR 0 6
44807: PPUSH
44808: CALL_OW 1
44812: ST_TO_ADDR
// for i = s_arr downto 2 do
44813: LD_ADDR_VAR 0 5
44817: PUSH
44818: DOUBLE
44819: LD_VAR 0 7
44823: INC
44824: ST_TO_ADDR
44825: LD_INT 2
44827: PUSH
44828: FOR_DOWNTO
44829: IFFALSE 44913
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44831: LD_ADDR_VAR 0 6
44835: PUSH
44836: LD_VAR 0 7
44840: PUSH
44841: LD_VAR 0 5
44845: PUSH
44846: LD_INT 1
44848: MINUS
44849: ARRAY
44850: PPUSH
44851: LD_VAR 0 2
44855: PUSH
44856: LD_VAR 0 5
44860: PUSH
44861: LD_INT 1
44863: MINUS
44864: ARRAY
44865: PPUSH
44866: LD_VAR 0 7
44870: PUSH
44871: LD_VAR 0 5
44875: ARRAY
44876: PPUSH
44877: CALL_OW 1
44881: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44882: LD_ADDR_VAR 0 7
44886: PUSH
44887: LD_VAR 0 7
44891: PPUSH
44892: LD_VAR 0 5
44896: PUSH
44897: LD_INT 1
44899: MINUS
44900: PPUSH
44901: LD_VAR 0 6
44905: PPUSH
44906: CALL_OW 1
44910: ST_TO_ADDR
// end ;
44911: GO 44828
44913: POP
44914: POP
// result := s_arr [ 1 ] ;
44915: LD_ADDR_VAR 0 4
44919: PUSH
44920: LD_VAR 0 7
44924: PUSH
44925: LD_INT 1
44927: ARRAY
44928: ST_TO_ADDR
// end ; end ;
44929: LD_VAR 0 4
44933: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44934: LD_INT 0
44936: PPUSH
44937: PPUSH
// if not list then
44938: LD_VAR 0 1
44942: NOT
44943: IFFALSE 44947
// exit ;
44945: GO 45038
// i := list [ pos1 ] ;
44947: LD_ADDR_VAR 0 5
44951: PUSH
44952: LD_VAR 0 1
44956: PUSH
44957: LD_VAR 0 2
44961: ARRAY
44962: ST_TO_ADDR
// if not i then
44963: LD_VAR 0 5
44967: NOT
44968: IFFALSE 44972
// exit ;
44970: GO 45038
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44972: LD_ADDR_VAR 0 1
44976: PUSH
44977: LD_VAR 0 1
44981: PPUSH
44982: LD_VAR 0 2
44986: PPUSH
44987: LD_VAR 0 1
44991: PUSH
44992: LD_VAR 0 3
44996: ARRAY
44997: PPUSH
44998: CALL_OW 1
45002: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45003: LD_ADDR_VAR 0 1
45007: PUSH
45008: LD_VAR 0 1
45012: PPUSH
45013: LD_VAR 0 3
45017: PPUSH
45018: LD_VAR 0 5
45022: PPUSH
45023: CALL_OW 1
45027: ST_TO_ADDR
// result := list ;
45028: LD_ADDR_VAR 0 4
45032: PUSH
45033: LD_VAR 0 1
45037: ST_TO_ADDR
// end ;
45038: LD_VAR 0 4
45042: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45043: LD_INT 0
45045: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45046: LD_ADDR_VAR 0 5
45050: PUSH
45051: LD_VAR 0 1
45055: PPUSH
45056: CALL_OW 250
45060: PPUSH
45061: LD_VAR 0 1
45065: PPUSH
45066: CALL_OW 251
45070: PPUSH
45071: LD_VAR 0 2
45075: PPUSH
45076: LD_VAR 0 3
45080: PPUSH
45081: LD_VAR 0 4
45085: PPUSH
45086: CALL 45096 0 5
45090: ST_TO_ADDR
// end ;
45091: LD_VAR 0 5
45095: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45096: LD_INT 0
45098: PPUSH
45099: PPUSH
45100: PPUSH
45101: PPUSH
// if not list then
45102: LD_VAR 0 3
45106: NOT
45107: IFFALSE 45111
// exit ;
45109: GO 45499
// result := [ ] ;
45111: LD_ADDR_VAR 0 6
45115: PUSH
45116: EMPTY
45117: ST_TO_ADDR
// for i in list do
45118: LD_ADDR_VAR 0 7
45122: PUSH
45123: LD_VAR 0 3
45127: PUSH
45128: FOR_IN
45129: IFFALSE 45331
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45131: LD_ADDR_VAR 0 9
45135: PUSH
45136: LD_VAR 0 7
45140: PPUSH
45141: LD_VAR 0 1
45145: PPUSH
45146: LD_VAR 0 2
45150: PPUSH
45151: CALL_OW 297
45155: ST_TO_ADDR
// if not result then
45156: LD_VAR 0 6
45160: NOT
45161: IFFALSE 45187
// result := [ [ i , tmp ] ] else
45163: LD_ADDR_VAR 0 6
45167: PUSH
45168: LD_VAR 0 7
45172: PUSH
45173: LD_VAR 0 9
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: EMPTY
45183: LIST
45184: ST_TO_ADDR
45185: GO 45329
// begin if result [ result ] [ 2 ] < tmp then
45187: LD_VAR 0 6
45191: PUSH
45192: LD_VAR 0 6
45196: ARRAY
45197: PUSH
45198: LD_INT 2
45200: ARRAY
45201: PUSH
45202: LD_VAR 0 9
45206: LESS
45207: IFFALSE 45249
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45209: LD_ADDR_VAR 0 6
45213: PUSH
45214: LD_VAR 0 6
45218: PPUSH
45219: LD_VAR 0 6
45223: PUSH
45224: LD_INT 1
45226: PLUS
45227: PPUSH
45228: LD_VAR 0 7
45232: PUSH
45233: LD_VAR 0 9
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PPUSH
45242: CALL_OW 2
45246: ST_TO_ADDR
45247: GO 45329
// for j = 1 to result do
45249: LD_ADDR_VAR 0 8
45253: PUSH
45254: DOUBLE
45255: LD_INT 1
45257: DEC
45258: ST_TO_ADDR
45259: LD_VAR 0 6
45263: PUSH
45264: FOR_TO
45265: IFFALSE 45327
// begin if tmp < result [ j ] [ 2 ] then
45267: LD_VAR 0 9
45271: PUSH
45272: LD_VAR 0 6
45276: PUSH
45277: LD_VAR 0 8
45281: ARRAY
45282: PUSH
45283: LD_INT 2
45285: ARRAY
45286: LESS
45287: IFFALSE 45325
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45289: LD_ADDR_VAR 0 6
45293: PUSH
45294: LD_VAR 0 6
45298: PPUSH
45299: LD_VAR 0 8
45303: PPUSH
45304: LD_VAR 0 7
45308: PUSH
45309: LD_VAR 0 9
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PPUSH
45318: CALL_OW 2
45322: ST_TO_ADDR
// break ;
45323: GO 45327
// end ; end ;
45325: GO 45264
45327: POP
45328: POP
// end ; end ;
45329: GO 45128
45331: POP
45332: POP
// if result and not asc then
45333: LD_VAR 0 6
45337: PUSH
45338: LD_VAR 0 4
45342: NOT
45343: AND
45344: IFFALSE 45419
// begin tmp := result ;
45346: LD_ADDR_VAR 0 9
45350: PUSH
45351: LD_VAR 0 6
45355: ST_TO_ADDR
// for i = tmp downto 1 do
45356: LD_ADDR_VAR 0 7
45360: PUSH
45361: DOUBLE
45362: LD_VAR 0 9
45366: INC
45367: ST_TO_ADDR
45368: LD_INT 1
45370: PUSH
45371: FOR_DOWNTO
45372: IFFALSE 45417
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45374: LD_ADDR_VAR 0 6
45378: PUSH
45379: LD_VAR 0 6
45383: PPUSH
45384: LD_VAR 0 9
45388: PUSH
45389: LD_VAR 0 7
45393: MINUS
45394: PUSH
45395: LD_INT 1
45397: PLUS
45398: PPUSH
45399: LD_VAR 0 9
45403: PUSH
45404: LD_VAR 0 7
45408: ARRAY
45409: PPUSH
45410: CALL_OW 1
45414: ST_TO_ADDR
45415: GO 45371
45417: POP
45418: POP
// end ; tmp := [ ] ;
45419: LD_ADDR_VAR 0 9
45423: PUSH
45424: EMPTY
45425: ST_TO_ADDR
// if mode then
45426: LD_VAR 0 5
45430: IFFALSE 45499
// begin for i = 1 to result do
45432: LD_ADDR_VAR 0 7
45436: PUSH
45437: DOUBLE
45438: LD_INT 1
45440: DEC
45441: ST_TO_ADDR
45442: LD_VAR 0 6
45446: PUSH
45447: FOR_TO
45448: IFFALSE 45487
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45450: LD_ADDR_VAR 0 9
45454: PUSH
45455: LD_VAR 0 9
45459: PPUSH
45460: LD_VAR 0 7
45464: PPUSH
45465: LD_VAR 0 6
45469: PUSH
45470: LD_VAR 0 7
45474: ARRAY
45475: PUSH
45476: LD_INT 1
45478: ARRAY
45479: PPUSH
45480: CALL_OW 1
45484: ST_TO_ADDR
45485: GO 45447
45487: POP
45488: POP
// result := tmp ;
45489: LD_ADDR_VAR 0 6
45493: PUSH
45494: LD_VAR 0 9
45498: ST_TO_ADDR
// end ; end ;
45499: LD_VAR 0 6
45503: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45504: LD_INT 0
45506: PPUSH
45507: PPUSH
45508: PPUSH
45509: PPUSH
45510: PPUSH
45511: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45512: LD_ADDR_VAR 0 5
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
// if not x or not y then
45534: LD_VAR 0 2
45538: NOT
45539: PUSH
45540: LD_VAR 0 3
45544: NOT
45545: OR
45546: IFFALSE 45550
// exit ;
45548: GO 47200
// if not range then
45550: LD_VAR 0 4
45554: NOT
45555: IFFALSE 45565
// range := 10 ;
45557: LD_ADDR_VAR 0 4
45561: PUSH
45562: LD_INT 10
45564: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45565: LD_ADDR_VAR 0 8
45569: PUSH
45570: LD_INT 81
45572: PUSH
45573: LD_VAR 0 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 92
45584: PUSH
45585: LD_VAR 0 2
45589: PUSH
45590: LD_VAR 0 3
45594: PUSH
45595: LD_VAR 0 4
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 3
45608: PUSH
45609: LD_INT 21
45611: PUSH
45612: LD_INT 3
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: LIST
45627: PPUSH
45628: CALL_OW 69
45632: ST_TO_ADDR
// if not tmp then
45633: LD_VAR 0 8
45637: NOT
45638: IFFALSE 45642
// exit ;
45640: GO 47200
// for i in tmp do
45642: LD_ADDR_VAR 0 6
45646: PUSH
45647: LD_VAR 0 8
45651: PUSH
45652: FOR_IN
45653: IFFALSE 47175
// begin points := [ 0 , 0 , 0 ] ;
45655: LD_ADDR_VAR 0 9
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: ST_TO_ADDR
// bpoints := 1 ;
45674: LD_ADDR_VAR 0 10
45678: PUSH
45679: LD_INT 1
45681: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45682: LD_VAR 0 6
45686: PPUSH
45687: CALL_OW 247
45691: PUSH
45692: LD_INT 1
45694: DOUBLE
45695: EQUAL
45696: IFTRUE 45700
45698: GO 46278
45700: POP
// begin if GetClass ( i ) = 1 then
45701: LD_VAR 0 6
45705: PPUSH
45706: CALL_OW 257
45710: PUSH
45711: LD_INT 1
45713: EQUAL
45714: IFFALSE 45735
// points := [ 10 , 5 , 3 ] ;
45716: LD_ADDR_VAR 0 9
45720: PUSH
45721: LD_INT 10
45723: PUSH
45724: LD_INT 5
45726: PUSH
45727: LD_INT 3
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45735: LD_VAR 0 6
45739: PPUSH
45740: CALL_OW 257
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: LD_INT 4
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: LIST
45758: IN
45759: IFFALSE 45780
// points := [ 3 , 2 , 1 ] ;
45761: LD_ADDR_VAR 0 9
45765: PUSH
45766: LD_INT 3
45768: PUSH
45769: LD_INT 2
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45780: LD_VAR 0 6
45784: PPUSH
45785: CALL_OW 257
45789: PUSH
45790: LD_INT 5
45792: EQUAL
45793: IFFALSE 45814
// points := [ 130 , 5 , 2 ] ;
45795: LD_ADDR_VAR 0 9
45799: PUSH
45800: LD_INT 130
45802: PUSH
45803: LD_INT 5
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45814: LD_VAR 0 6
45818: PPUSH
45819: CALL_OW 257
45823: PUSH
45824: LD_INT 8
45826: EQUAL
45827: IFFALSE 45848
// points := [ 35 , 35 , 30 ] ;
45829: LD_ADDR_VAR 0 9
45833: PUSH
45834: LD_INT 35
45836: PUSH
45837: LD_INT 35
45839: PUSH
45840: LD_INT 30
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: LIST
45847: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45848: LD_VAR 0 6
45852: PPUSH
45853: CALL_OW 257
45857: PUSH
45858: LD_INT 9
45860: EQUAL
45861: IFFALSE 45882
// points := [ 20 , 55 , 40 ] ;
45863: LD_ADDR_VAR 0 9
45867: PUSH
45868: LD_INT 20
45870: PUSH
45871: LD_INT 55
45873: PUSH
45874: LD_INT 40
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45882: LD_VAR 0 6
45886: PPUSH
45887: CALL_OW 257
45891: PUSH
45892: LD_INT 12
45894: PUSH
45895: LD_INT 16
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: IN
45902: IFFALSE 45923
// points := [ 5 , 3 , 2 ] ;
45904: LD_ADDR_VAR 0 9
45908: PUSH
45909: LD_INT 5
45911: PUSH
45912: LD_INT 3
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: LIST
45922: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45923: LD_VAR 0 6
45927: PPUSH
45928: CALL_OW 257
45932: PUSH
45933: LD_INT 17
45935: EQUAL
45936: IFFALSE 45957
// points := [ 100 , 50 , 75 ] ;
45938: LD_ADDR_VAR 0 9
45942: PUSH
45943: LD_INT 100
45945: PUSH
45946: LD_INT 50
45948: PUSH
45949: LD_INT 75
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: LIST
45956: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45957: LD_VAR 0 6
45961: PPUSH
45962: CALL_OW 257
45966: PUSH
45967: LD_INT 15
45969: EQUAL
45970: IFFALSE 45991
// points := [ 10 , 5 , 3 ] ;
45972: LD_ADDR_VAR 0 9
45976: PUSH
45977: LD_INT 10
45979: PUSH
45980: LD_INT 5
45982: PUSH
45983: LD_INT 3
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: LIST
45990: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45991: LD_VAR 0 6
45995: PPUSH
45996: CALL_OW 257
46000: PUSH
46001: LD_INT 14
46003: EQUAL
46004: IFFALSE 46025
// points := [ 10 , 0 , 0 ] ;
46006: LD_ADDR_VAR 0 9
46010: PUSH
46011: LD_INT 10
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46025: LD_VAR 0 6
46029: PPUSH
46030: CALL_OW 257
46034: PUSH
46035: LD_INT 11
46037: EQUAL
46038: IFFALSE 46059
// points := [ 30 , 10 , 5 ] ;
46040: LD_ADDR_VAR 0 9
46044: PUSH
46045: LD_INT 30
46047: PUSH
46048: LD_INT 10
46050: PUSH
46051: LD_INT 5
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46059: LD_VAR 0 1
46063: PPUSH
46064: LD_INT 5
46066: PPUSH
46067: CALL_OW 321
46071: PUSH
46072: LD_INT 2
46074: EQUAL
46075: IFFALSE 46092
// bpoints := bpoints * 1.8 ;
46077: LD_ADDR_VAR 0 10
46081: PUSH
46082: LD_VAR 0 10
46086: PUSH
46087: LD_REAL  1.80000000000000E+0000
46090: MUL
46091: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46092: LD_VAR 0 6
46096: PPUSH
46097: CALL_OW 257
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: LD_INT 3
46110: PUSH
46111: LD_INT 4
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: IN
46120: PUSH
46121: LD_VAR 0 1
46125: PPUSH
46126: LD_INT 51
46128: PPUSH
46129: CALL_OW 321
46133: PUSH
46134: LD_INT 2
46136: EQUAL
46137: AND
46138: IFFALSE 46155
// bpoints := bpoints * 1.2 ;
46140: LD_ADDR_VAR 0 10
46144: PUSH
46145: LD_VAR 0 10
46149: PUSH
46150: LD_REAL  1.20000000000000E+0000
46153: MUL
46154: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46155: LD_VAR 0 6
46159: PPUSH
46160: CALL_OW 257
46164: PUSH
46165: LD_INT 5
46167: PUSH
46168: LD_INT 7
46170: PUSH
46171: LD_INT 9
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: IN
46179: PUSH
46180: LD_VAR 0 1
46184: PPUSH
46185: LD_INT 52
46187: PPUSH
46188: CALL_OW 321
46192: PUSH
46193: LD_INT 2
46195: EQUAL
46196: AND
46197: IFFALSE 46214
// bpoints := bpoints * 1.5 ;
46199: LD_ADDR_VAR 0 10
46203: PUSH
46204: LD_VAR 0 10
46208: PUSH
46209: LD_REAL  1.50000000000000E+0000
46212: MUL
46213: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46214: LD_VAR 0 1
46218: PPUSH
46219: LD_INT 66
46221: PPUSH
46222: CALL_OW 321
46226: PUSH
46227: LD_INT 2
46229: EQUAL
46230: IFFALSE 46247
// bpoints := bpoints * 1.1 ;
46232: LD_ADDR_VAR 0 10
46236: PUSH
46237: LD_VAR 0 10
46241: PUSH
46242: LD_REAL  1.10000000000000E+0000
46245: MUL
46246: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46247: LD_ADDR_VAR 0 10
46251: PUSH
46252: LD_VAR 0 10
46256: PUSH
46257: LD_VAR 0 6
46261: PPUSH
46262: LD_INT 1
46264: PPUSH
46265: CALL_OW 259
46269: PUSH
46270: LD_REAL  1.15000000000000E+0000
46273: MUL
46274: MUL
46275: ST_TO_ADDR
// end ; unit_vehicle :
46276: GO 47104
46278: LD_INT 2
46280: DOUBLE
46281: EQUAL
46282: IFTRUE 46286
46284: GO 47092
46286: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46287: LD_VAR 0 6
46291: PPUSH
46292: CALL_OW 264
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: LD_INT 42
46302: PUSH
46303: LD_INT 24
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: LIST
46310: IN
46311: IFFALSE 46332
// points := [ 25 , 5 , 3 ] ;
46313: LD_ADDR_VAR 0 9
46317: PUSH
46318: LD_INT 25
46320: PUSH
46321: LD_INT 5
46323: PUSH
46324: LD_INT 3
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: LIST
46331: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46332: LD_VAR 0 6
46336: PPUSH
46337: CALL_OW 264
46341: PUSH
46342: LD_INT 4
46344: PUSH
46345: LD_INT 43
46347: PUSH
46348: LD_INT 25
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: LIST
46355: IN
46356: IFFALSE 46377
// points := [ 40 , 15 , 5 ] ;
46358: LD_ADDR_VAR 0 9
46362: PUSH
46363: LD_INT 40
46365: PUSH
46366: LD_INT 15
46368: PUSH
46369: LD_INT 5
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46377: LD_VAR 0 6
46381: PPUSH
46382: CALL_OW 264
46386: PUSH
46387: LD_INT 3
46389: PUSH
46390: LD_INT 23
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: IN
46397: IFFALSE 46418
// points := [ 7 , 25 , 8 ] ;
46399: LD_ADDR_VAR 0 9
46403: PUSH
46404: LD_INT 7
46406: PUSH
46407: LD_INT 25
46409: PUSH
46410: LD_INT 8
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: LIST
46417: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46418: LD_VAR 0 6
46422: PPUSH
46423: CALL_OW 264
46427: PUSH
46428: LD_INT 5
46430: PUSH
46431: LD_INT 27
46433: PUSH
46434: LD_INT 44
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: IN
46442: IFFALSE 46463
// points := [ 14 , 50 , 16 ] ;
46444: LD_ADDR_VAR 0 9
46448: PUSH
46449: LD_INT 14
46451: PUSH
46452: LD_INT 50
46454: PUSH
46455: LD_INT 16
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: LIST
46462: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46463: LD_VAR 0 6
46467: PPUSH
46468: CALL_OW 264
46472: PUSH
46473: LD_INT 6
46475: PUSH
46476: LD_INT 46
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: IN
46483: IFFALSE 46504
// points := [ 32 , 120 , 70 ] ;
46485: LD_ADDR_VAR 0 9
46489: PUSH
46490: LD_INT 32
46492: PUSH
46493: LD_INT 120
46495: PUSH
46496: LD_INT 70
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: LIST
46503: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46504: LD_VAR 0 6
46508: PPUSH
46509: CALL_OW 264
46513: PUSH
46514: LD_INT 7
46516: PUSH
46517: LD_INT 28
46519: PUSH
46520: LD_INT 45
46522: PUSH
46523: LD_INT 92
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: IN
46532: IFFALSE 46553
// points := [ 35 , 20 , 45 ] ;
46534: LD_ADDR_VAR 0 9
46538: PUSH
46539: LD_INT 35
46541: PUSH
46542: LD_INT 20
46544: PUSH
46545: LD_INT 45
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46553: LD_VAR 0 6
46557: PPUSH
46558: CALL_OW 264
46562: PUSH
46563: LD_INT 47
46565: PUSH
46566: EMPTY
46567: LIST
46568: IN
46569: IFFALSE 46590
// points := [ 67 , 45 , 75 ] ;
46571: LD_ADDR_VAR 0 9
46575: PUSH
46576: LD_INT 67
46578: PUSH
46579: LD_INT 45
46581: PUSH
46582: LD_INT 75
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: LIST
46589: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46590: LD_VAR 0 6
46594: PPUSH
46595: CALL_OW 264
46599: PUSH
46600: LD_INT 26
46602: PUSH
46603: EMPTY
46604: LIST
46605: IN
46606: IFFALSE 46627
// points := [ 120 , 30 , 80 ] ;
46608: LD_ADDR_VAR 0 9
46612: PUSH
46613: LD_INT 120
46615: PUSH
46616: LD_INT 30
46618: PUSH
46619: LD_INT 80
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: LIST
46626: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46627: LD_VAR 0 6
46631: PPUSH
46632: CALL_OW 264
46636: PUSH
46637: LD_INT 22
46639: PUSH
46640: EMPTY
46641: LIST
46642: IN
46643: IFFALSE 46664
// points := [ 40 , 1 , 1 ] ;
46645: LD_ADDR_VAR 0 9
46649: PUSH
46650: LD_INT 40
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: LIST
46663: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46664: LD_VAR 0 6
46668: PPUSH
46669: CALL_OW 264
46673: PUSH
46674: LD_INT 29
46676: PUSH
46677: EMPTY
46678: LIST
46679: IN
46680: IFFALSE 46701
// points := [ 70 , 200 , 400 ] ;
46682: LD_ADDR_VAR 0 9
46686: PUSH
46687: LD_INT 70
46689: PUSH
46690: LD_INT 200
46692: PUSH
46693: LD_INT 400
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: LIST
46700: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46701: LD_VAR 0 6
46705: PPUSH
46706: CALL_OW 264
46710: PUSH
46711: LD_INT 14
46713: PUSH
46714: LD_INT 53
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: IN
46721: IFFALSE 46742
// points := [ 40 , 10 , 20 ] ;
46723: LD_ADDR_VAR 0 9
46727: PUSH
46728: LD_INT 40
46730: PUSH
46731: LD_INT 10
46733: PUSH
46734: LD_INT 20
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46742: LD_VAR 0 6
46746: PPUSH
46747: CALL_OW 264
46751: PUSH
46752: LD_INT 9
46754: PUSH
46755: EMPTY
46756: LIST
46757: IN
46758: IFFALSE 46779
// points := [ 5 , 70 , 20 ] ;
46760: LD_ADDR_VAR 0 9
46764: PUSH
46765: LD_INT 5
46767: PUSH
46768: LD_INT 70
46770: PUSH
46771: LD_INT 20
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46779: LD_VAR 0 6
46783: PPUSH
46784: CALL_OW 264
46788: PUSH
46789: LD_INT 10
46791: PUSH
46792: EMPTY
46793: LIST
46794: IN
46795: IFFALSE 46816
// points := [ 35 , 110 , 70 ] ;
46797: LD_ADDR_VAR 0 9
46801: PUSH
46802: LD_INT 35
46804: PUSH
46805: LD_INT 110
46807: PUSH
46808: LD_INT 70
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46816: LD_VAR 0 6
46820: PPUSH
46821: CALL_OW 265
46825: PUSH
46826: LD_INT 25
46828: EQUAL
46829: IFFALSE 46850
// points := [ 80 , 65 , 100 ] ;
46831: LD_ADDR_VAR 0 9
46835: PUSH
46836: LD_INT 80
46838: PUSH
46839: LD_INT 65
46841: PUSH
46842: LD_INT 100
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46850: LD_VAR 0 6
46854: PPUSH
46855: CALL_OW 263
46859: PUSH
46860: LD_INT 1
46862: EQUAL
46863: IFFALSE 46898
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46865: LD_ADDR_VAR 0 10
46869: PUSH
46870: LD_VAR 0 10
46874: PUSH
46875: LD_VAR 0 6
46879: PPUSH
46880: CALL_OW 311
46884: PPUSH
46885: LD_INT 3
46887: PPUSH
46888: CALL_OW 259
46892: PUSH
46893: LD_INT 4
46895: MUL
46896: MUL
46897: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46898: LD_VAR 0 6
46902: PPUSH
46903: CALL_OW 263
46907: PUSH
46908: LD_INT 2
46910: EQUAL
46911: IFFALSE 46962
// begin j := IsControledBy ( i ) ;
46913: LD_ADDR_VAR 0 7
46917: PUSH
46918: LD_VAR 0 6
46922: PPUSH
46923: CALL_OW 312
46927: ST_TO_ADDR
// if j then
46928: LD_VAR 0 7
46932: IFFALSE 46962
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46934: LD_ADDR_VAR 0 10
46938: PUSH
46939: LD_VAR 0 10
46943: PUSH
46944: LD_VAR 0 7
46948: PPUSH
46949: LD_INT 3
46951: PPUSH
46952: CALL_OW 259
46956: PUSH
46957: LD_INT 3
46959: MUL
46960: MUL
46961: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46962: LD_VAR 0 6
46966: PPUSH
46967: CALL_OW 264
46971: PUSH
46972: LD_INT 5
46974: PUSH
46975: LD_INT 6
46977: PUSH
46978: LD_INT 46
46980: PUSH
46981: LD_INT 44
46983: PUSH
46984: LD_INT 47
46986: PUSH
46987: LD_INT 45
46989: PUSH
46990: LD_INT 28
46992: PUSH
46993: LD_INT 7
46995: PUSH
46996: LD_INT 27
46998: PUSH
46999: LD_INT 29
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: IN
47014: PUSH
47015: LD_VAR 0 1
47019: PPUSH
47020: LD_INT 52
47022: PPUSH
47023: CALL_OW 321
47027: PUSH
47028: LD_INT 2
47030: EQUAL
47031: AND
47032: IFFALSE 47049
// bpoints := bpoints * 1.2 ;
47034: LD_ADDR_VAR 0 10
47038: PUSH
47039: LD_VAR 0 10
47043: PUSH
47044: LD_REAL  1.20000000000000E+0000
47047: MUL
47048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47049: LD_VAR 0 6
47053: PPUSH
47054: CALL_OW 264
47058: PUSH
47059: LD_INT 6
47061: PUSH
47062: LD_INT 46
47064: PUSH
47065: LD_INT 47
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: IN
47073: IFFALSE 47090
// bpoints := bpoints * 1.2 ;
47075: LD_ADDR_VAR 0 10
47079: PUSH
47080: LD_VAR 0 10
47084: PUSH
47085: LD_REAL  1.20000000000000E+0000
47088: MUL
47089: ST_TO_ADDR
// end ; unit_building :
47090: GO 47104
47092: LD_INT 3
47094: DOUBLE
47095: EQUAL
47096: IFTRUE 47100
47098: GO 47103
47100: POP
// ; end ;
47101: GO 47104
47103: POP
// for j = 1 to 3 do
47104: LD_ADDR_VAR 0 7
47108: PUSH
47109: DOUBLE
47110: LD_INT 1
47112: DEC
47113: ST_TO_ADDR
47114: LD_INT 3
47116: PUSH
47117: FOR_TO
47118: IFFALSE 47171
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47120: LD_ADDR_VAR 0 5
47124: PUSH
47125: LD_VAR 0 5
47129: PPUSH
47130: LD_VAR 0 7
47134: PPUSH
47135: LD_VAR 0 5
47139: PUSH
47140: LD_VAR 0 7
47144: ARRAY
47145: PUSH
47146: LD_VAR 0 9
47150: PUSH
47151: LD_VAR 0 7
47155: ARRAY
47156: PUSH
47157: LD_VAR 0 10
47161: MUL
47162: PLUS
47163: PPUSH
47164: CALL_OW 1
47168: ST_TO_ADDR
47169: GO 47117
47171: POP
47172: POP
// end ;
47173: GO 45652
47175: POP
47176: POP
// result := Replace ( result , 4 , tmp ) ;
47177: LD_ADDR_VAR 0 5
47181: PUSH
47182: LD_VAR 0 5
47186: PPUSH
47187: LD_INT 4
47189: PPUSH
47190: LD_VAR 0 8
47194: PPUSH
47195: CALL_OW 1
47199: ST_TO_ADDR
// end ;
47200: LD_VAR 0 5
47204: RET
// export function DangerAtRange ( unit , range ) ; begin
47205: LD_INT 0
47207: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47208: LD_ADDR_VAR 0 3
47212: PUSH
47213: LD_VAR 0 1
47217: PPUSH
47218: CALL_OW 255
47222: PPUSH
47223: LD_VAR 0 1
47227: PPUSH
47228: CALL_OW 250
47232: PPUSH
47233: LD_VAR 0 1
47237: PPUSH
47238: CALL_OW 251
47242: PPUSH
47243: LD_VAR 0 2
47247: PPUSH
47248: CALL 45504 0 4
47252: ST_TO_ADDR
// end ;
47253: LD_VAR 0 3
47257: RET
// export function DangerInArea ( side , area ) ; begin
47258: LD_INT 0
47260: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47261: LD_ADDR_VAR 0 3
47265: PUSH
47266: LD_VAR 0 2
47270: PPUSH
47271: LD_INT 81
47273: PUSH
47274: LD_VAR 0 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PPUSH
47283: CALL_OW 70
47287: ST_TO_ADDR
// end ;
47288: LD_VAR 0 3
47292: RET
// export function IsExtension ( b ) ; begin
47293: LD_INT 0
47295: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47296: LD_ADDR_VAR 0 2
47300: PUSH
47301: LD_VAR 0 1
47305: PUSH
47306: LD_INT 23
47308: PUSH
47309: LD_INT 20
47311: PUSH
47312: LD_INT 22
47314: PUSH
47315: LD_INT 17
47317: PUSH
47318: LD_INT 24
47320: PUSH
47321: LD_INT 21
47323: PUSH
47324: LD_INT 19
47326: PUSH
47327: LD_INT 16
47329: PUSH
47330: LD_INT 25
47332: PUSH
47333: LD_INT 18
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: IN
47348: ST_TO_ADDR
// end ;
47349: LD_VAR 0 2
47353: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47354: LD_INT 0
47356: PPUSH
47357: PPUSH
47358: PPUSH
// result := [ ] ;
47359: LD_ADDR_VAR 0 4
47363: PUSH
47364: EMPTY
47365: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47366: LD_ADDR_VAR 0 5
47370: PUSH
47371: LD_VAR 0 2
47375: PPUSH
47376: LD_INT 21
47378: PUSH
47379: LD_INT 3
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PPUSH
47386: CALL_OW 70
47390: ST_TO_ADDR
// if not tmp then
47391: LD_VAR 0 5
47395: NOT
47396: IFFALSE 47400
// exit ;
47398: GO 47464
// if checkLink then
47400: LD_VAR 0 3
47404: IFFALSE 47454
// begin for i in tmp do
47406: LD_ADDR_VAR 0 6
47410: PUSH
47411: LD_VAR 0 5
47415: PUSH
47416: FOR_IN
47417: IFFALSE 47452
// if GetBase ( i ) <> base then
47419: LD_VAR 0 6
47423: PPUSH
47424: CALL_OW 274
47428: PUSH
47429: LD_VAR 0 1
47433: NONEQUAL
47434: IFFALSE 47450
// ComLinkToBase ( base , i ) ;
47436: LD_VAR 0 1
47440: PPUSH
47441: LD_VAR 0 6
47445: PPUSH
47446: CALL_OW 169
47450: GO 47416
47452: POP
47453: POP
// end ; result := tmp ;
47454: LD_ADDR_VAR 0 4
47458: PUSH
47459: LD_VAR 0 5
47463: ST_TO_ADDR
// end ;
47464: LD_VAR 0 4
47468: RET
// export function ComComplete ( units , b ) ; var i ; begin
47469: LD_INT 0
47471: PPUSH
47472: PPUSH
// if not units then
47473: LD_VAR 0 1
47477: NOT
47478: IFFALSE 47482
// exit ;
47480: GO 47572
// for i in units do
47482: LD_ADDR_VAR 0 4
47486: PUSH
47487: LD_VAR 0 1
47491: PUSH
47492: FOR_IN
47493: IFFALSE 47570
// if BuildingStatus ( b ) = bs_build then
47495: LD_VAR 0 2
47499: PPUSH
47500: CALL_OW 461
47504: PUSH
47505: LD_INT 1
47507: EQUAL
47508: IFFALSE 47568
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47510: LD_VAR 0 4
47514: PPUSH
47515: LD_STRING h
47517: PUSH
47518: LD_VAR 0 2
47522: PPUSH
47523: CALL_OW 250
47527: PUSH
47528: LD_VAR 0 2
47532: PPUSH
47533: CALL_OW 251
47537: PUSH
47538: LD_VAR 0 2
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: PUSH
47561: EMPTY
47562: LIST
47563: PPUSH
47564: CALL_OW 446
47568: GO 47492
47570: POP
47571: POP
// end ;
47572: LD_VAR 0 3
47576: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47577: LD_INT 0
47579: PPUSH
47580: PPUSH
47581: PPUSH
47582: PPUSH
47583: PPUSH
47584: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47585: LD_VAR 0 1
47589: NOT
47590: PUSH
47591: LD_VAR 0 1
47595: PPUSH
47596: CALL_OW 263
47600: PUSH
47601: LD_INT 2
47603: NONEQUAL
47604: OR
47605: IFFALSE 47609
// exit ;
47607: GO 47925
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47609: LD_ADDR_VAR 0 6
47613: PUSH
47614: LD_INT 22
47616: PUSH
47617: LD_VAR 0 1
47621: PPUSH
47622: CALL_OW 255
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: LD_INT 30
47636: PUSH
47637: LD_INT 36
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 34
47646: PUSH
47647: LD_INT 31
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: LIST
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PPUSH
47663: CALL_OW 69
47667: ST_TO_ADDR
// if not tmp then
47668: LD_VAR 0 6
47672: NOT
47673: IFFALSE 47677
// exit ;
47675: GO 47925
// result := [ ] ;
47677: LD_ADDR_VAR 0 2
47681: PUSH
47682: EMPTY
47683: ST_TO_ADDR
// for i in tmp do
47684: LD_ADDR_VAR 0 3
47688: PUSH
47689: LD_VAR 0 6
47693: PUSH
47694: FOR_IN
47695: IFFALSE 47766
// begin t := UnitsInside ( i ) ;
47697: LD_ADDR_VAR 0 4
47701: PUSH
47702: LD_VAR 0 3
47706: PPUSH
47707: CALL_OW 313
47711: ST_TO_ADDR
// if t then
47712: LD_VAR 0 4
47716: IFFALSE 47764
// for j in t do
47718: LD_ADDR_VAR 0 7
47722: PUSH
47723: LD_VAR 0 4
47727: PUSH
47728: FOR_IN
47729: IFFALSE 47762
// result := Replace ( result , result + 1 , j ) ;
47731: LD_ADDR_VAR 0 2
47735: PUSH
47736: LD_VAR 0 2
47740: PPUSH
47741: LD_VAR 0 2
47745: PUSH
47746: LD_INT 1
47748: PLUS
47749: PPUSH
47750: LD_VAR 0 7
47754: PPUSH
47755: CALL_OW 1
47759: ST_TO_ADDR
47760: GO 47728
47762: POP
47763: POP
// end ;
47764: GO 47694
47766: POP
47767: POP
// if not result then
47768: LD_VAR 0 2
47772: NOT
47773: IFFALSE 47777
// exit ;
47775: GO 47925
// mech := result [ 1 ] ;
47777: LD_ADDR_VAR 0 5
47781: PUSH
47782: LD_VAR 0 2
47786: PUSH
47787: LD_INT 1
47789: ARRAY
47790: ST_TO_ADDR
// if result > 1 then
47791: LD_VAR 0 2
47795: PUSH
47796: LD_INT 1
47798: GREATER
47799: IFFALSE 47911
// begin for i = 2 to result do
47801: LD_ADDR_VAR 0 3
47805: PUSH
47806: DOUBLE
47807: LD_INT 2
47809: DEC
47810: ST_TO_ADDR
47811: LD_VAR 0 2
47815: PUSH
47816: FOR_TO
47817: IFFALSE 47909
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47819: LD_ADDR_VAR 0 4
47823: PUSH
47824: LD_VAR 0 2
47828: PUSH
47829: LD_VAR 0 3
47833: ARRAY
47834: PPUSH
47835: LD_INT 3
47837: PPUSH
47838: CALL_OW 259
47842: PUSH
47843: LD_VAR 0 2
47847: PUSH
47848: LD_VAR 0 3
47852: ARRAY
47853: PPUSH
47854: CALL_OW 432
47858: MINUS
47859: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47860: LD_VAR 0 4
47864: PUSH
47865: LD_VAR 0 5
47869: PPUSH
47870: LD_INT 3
47872: PPUSH
47873: CALL_OW 259
47877: PUSH
47878: LD_VAR 0 5
47882: PPUSH
47883: CALL_OW 432
47887: MINUS
47888: GREATEREQUAL
47889: IFFALSE 47907
// mech := result [ i ] ;
47891: LD_ADDR_VAR 0 5
47895: PUSH
47896: LD_VAR 0 2
47900: PUSH
47901: LD_VAR 0 3
47905: ARRAY
47906: ST_TO_ADDR
// end ;
47907: GO 47816
47909: POP
47910: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47911: LD_VAR 0 1
47915: PPUSH
47916: LD_VAR 0 5
47920: PPUSH
47921: CALL_OW 135
// end ;
47925: LD_VAR 0 2
47929: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47930: LD_INT 0
47932: PPUSH
47933: PPUSH
47934: PPUSH
47935: PPUSH
47936: PPUSH
47937: PPUSH
47938: PPUSH
47939: PPUSH
47940: PPUSH
47941: PPUSH
47942: PPUSH
47943: PPUSH
47944: PPUSH
// result := [ ] ;
47945: LD_ADDR_VAR 0 7
47949: PUSH
47950: EMPTY
47951: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47952: LD_VAR 0 1
47956: PPUSH
47957: CALL_OW 266
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: IN
47972: NOT
47973: IFFALSE 47977
// exit ;
47975: GO 49611
// if name then
47977: LD_VAR 0 3
47981: IFFALSE 47997
// SetBName ( base_dep , name ) ;
47983: LD_VAR 0 1
47987: PPUSH
47988: LD_VAR 0 3
47992: PPUSH
47993: CALL_OW 500
// base := GetBase ( base_dep ) ;
47997: LD_ADDR_VAR 0 15
48001: PUSH
48002: LD_VAR 0 1
48006: PPUSH
48007: CALL_OW 274
48011: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48012: LD_ADDR_VAR 0 16
48016: PUSH
48017: LD_VAR 0 1
48021: PPUSH
48022: CALL_OW 255
48026: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48027: LD_ADDR_VAR 0 17
48031: PUSH
48032: LD_VAR 0 1
48036: PPUSH
48037: CALL_OW 248
48041: ST_TO_ADDR
// if sources then
48042: LD_VAR 0 5
48046: IFFALSE 48093
// for i = 1 to 3 do
48048: LD_ADDR_VAR 0 8
48052: PUSH
48053: DOUBLE
48054: LD_INT 1
48056: DEC
48057: ST_TO_ADDR
48058: LD_INT 3
48060: PUSH
48061: FOR_TO
48062: IFFALSE 48091
// AddResourceType ( base , i , sources [ i ] ) ;
48064: LD_VAR 0 15
48068: PPUSH
48069: LD_VAR 0 8
48073: PPUSH
48074: LD_VAR 0 5
48078: PUSH
48079: LD_VAR 0 8
48083: ARRAY
48084: PPUSH
48085: CALL_OW 276
48089: GO 48061
48091: POP
48092: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48093: LD_ADDR_VAR 0 18
48097: PUSH
48098: LD_VAR 0 15
48102: PPUSH
48103: LD_VAR 0 2
48107: PPUSH
48108: LD_INT 1
48110: PPUSH
48111: CALL 47354 0 3
48115: ST_TO_ADDR
// InitHc ;
48116: CALL_OW 19
// InitUc ;
48120: CALL_OW 18
// uc_side := side ;
48124: LD_ADDR_OWVAR 20
48128: PUSH
48129: LD_VAR 0 16
48133: ST_TO_ADDR
// uc_nation := nation ;
48134: LD_ADDR_OWVAR 21
48138: PUSH
48139: LD_VAR 0 17
48143: ST_TO_ADDR
// if buildings then
48144: LD_VAR 0 18
48148: IFFALSE 49470
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48150: LD_ADDR_VAR 0 19
48154: PUSH
48155: LD_VAR 0 18
48159: PPUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 30
48165: PUSH
48166: LD_INT 29
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 30
48175: PUSH
48176: LD_INT 30
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: LIST
48187: PPUSH
48188: CALL_OW 72
48192: ST_TO_ADDR
// if tmp then
48193: LD_VAR 0 19
48197: IFFALSE 48245
// for i in tmp do
48199: LD_ADDR_VAR 0 8
48203: PUSH
48204: LD_VAR 0 19
48208: PUSH
48209: FOR_IN
48210: IFFALSE 48243
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48212: LD_VAR 0 8
48216: PPUSH
48217: CALL_OW 250
48221: PPUSH
48222: LD_VAR 0 8
48226: PPUSH
48227: CALL_OW 251
48231: PPUSH
48232: LD_VAR 0 16
48236: PPUSH
48237: CALL_OW 441
48241: GO 48209
48243: POP
48244: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48245: LD_VAR 0 18
48249: PPUSH
48250: LD_INT 2
48252: PUSH
48253: LD_INT 30
48255: PUSH
48256: LD_INT 32
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 30
48265: PUSH
48266: LD_INT 33
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: LIST
48277: PPUSH
48278: CALL_OW 72
48282: IFFALSE 48370
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48284: LD_ADDR_VAR 0 8
48288: PUSH
48289: LD_VAR 0 18
48293: PPUSH
48294: LD_INT 2
48296: PUSH
48297: LD_INT 30
48299: PUSH
48300: LD_INT 32
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 30
48309: PUSH
48310: LD_INT 33
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: PPUSH
48322: CALL_OW 72
48326: PUSH
48327: FOR_IN
48328: IFFALSE 48368
// begin if not GetBWeapon ( i ) then
48330: LD_VAR 0 8
48334: PPUSH
48335: CALL_OW 269
48339: NOT
48340: IFFALSE 48366
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48342: LD_VAR 0 8
48346: PPUSH
48347: LD_VAR 0 8
48351: PPUSH
48352: LD_VAR 0 2
48356: PPUSH
48357: CALL 49616 0 2
48361: PPUSH
48362: CALL_OW 431
// end ;
48366: GO 48327
48368: POP
48369: POP
// end ; for i = 1 to personel do
48370: LD_ADDR_VAR 0 8
48374: PUSH
48375: DOUBLE
48376: LD_INT 1
48378: DEC
48379: ST_TO_ADDR
48380: LD_VAR 0 6
48384: PUSH
48385: FOR_TO
48386: IFFALSE 49450
// begin if i > 4 then
48388: LD_VAR 0 8
48392: PUSH
48393: LD_INT 4
48395: GREATER
48396: IFFALSE 48400
// break ;
48398: GO 49450
// case i of 1 :
48400: LD_VAR 0 8
48404: PUSH
48405: LD_INT 1
48407: DOUBLE
48408: EQUAL
48409: IFTRUE 48413
48411: GO 48493
48413: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48414: LD_ADDR_VAR 0 12
48418: PUSH
48419: LD_VAR 0 18
48423: PPUSH
48424: LD_INT 22
48426: PUSH
48427: LD_VAR 0 16
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 58
48438: PUSH
48439: EMPTY
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: LD_INT 30
48447: PUSH
48448: LD_INT 32
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 30
48457: PUSH
48458: LD_INT 4
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 30
48467: PUSH
48468: LD_INT 5
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: LIST
48485: PPUSH
48486: CALL_OW 72
48490: ST_TO_ADDR
48491: GO 48715
48493: LD_INT 2
48495: DOUBLE
48496: EQUAL
48497: IFTRUE 48501
48499: GO 48563
48501: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48502: LD_ADDR_VAR 0 12
48506: PUSH
48507: LD_VAR 0 18
48511: PPUSH
48512: LD_INT 22
48514: PUSH
48515: LD_VAR 0 16
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: PUSH
48527: LD_INT 30
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 30
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: LIST
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PPUSH
48556: CALL_OW 72
48560: ST_TO_ADDR
48561: GO 48715
48563: LD_INT 3
48565: DOUBLE
48566: EQUAL
48567: IFTRUE 48571
48569: GO 48633
48571: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48572: LD_ADDR_VAR 0 12
48576: PUSH
48577: LD_VAR 0 18
48581: PPUSH
48582: LD_INT 22
48584: PUSH
48585: LD_VAR 0 16
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: LD_INT 30
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 30
48609: PUSH
48610: LD_INT 3
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PPUSH
48626: CALL_OW 72
48630: ST_TO_ADDR
48631: GO 48715
48633: LD_INT 4
48635: DOUBLE
48636: EQUAL
48637: IFTRUE 48641
48639: GO 48714
48641: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48642: LD_ADDR_VAR 0 12
48646: PUSH
48647: LD_VAR 0 18
48651: PPUSH
48652: LD_INT 22
48654: PUSH
48655: LD_VAR 0 16
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: LD_INT 30
48669: PUSH
48670: LD_INT 6
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 30
48679: PUSH
48680: LD_INT 7
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 30
48689: PUSH
48690: LD_INT 8
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PPUSH
48707: CALL_OW 72
48711: ST_TO_ADDR
48712: GO 48715
48714: POP
// if i = 1 then
48715: LD_VAR 0 8
48719: PUSH
48720: LD_INT 1
48722: EQUAL
48723: IFFALSE 48834
// begin tmp := [ ] ;
48725: LD_ADDR_VAR 0 19
48729: PUSH
48730: EMPTY
48731: ST_TO_ADDR
// for j in f do
48732: LD_ADDR_VAR 0 9
48736: PUSH
48737: LD_VAR 0 12
48741: PUSH
48742: FOR_IN
48743: IFFALSE 48816
// if GetBType ( j ) = b_bunker then
48745: LD_VAR 0 9
48749: PPUSH
48750: CALL_OW 266
48754: PUSH
48755: LD_INT 32
48757: EQUAL
48758: IFFALSE 48785
// tmp := Insert ( tmp , 1 , j ) else
48760: LD_ADDR_VAR 0 19
48764: PUSH
48765: LD_VAR 0 19
48769: PPUSH
48770: LD_INT 1
48772: PPUSH
48773: LD_VAR 0 9
48777: PPUSH
48778: CALL_OW 2
48782: ST_TO_ADDR
48783: GO 48814
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48785: LD_ADDR_VAR 0 19
48789: PUSH
48790: LD_VAR 0 19
48794: PPUSH
48795: LD_VAR 0 19
48799: PUSH
48800: LD_INT 1
48802: PLUS
48803: PPUSH
48804: LD_VAR 0 9
48808: PPUSH
48809: CALL_OW 2
48813: ST_TO_ADDR
48814: GO 48742
48816: POP
48817: POP
// if tmp then
48818: LD_VAR 0 19
48822: IFFALSE 48834
// f := tmp ;
48824: LD_ADDR_VAR 0 12
48828: PUSH
48829: LD_VAR 0 19
48833: ST_TO_ADDR
// end ; x := personel [ i ] ;
48834: LD_ADDR_VAR 0 13
48838: PUSH
48839: LD_VAR 0 6
48843: PUSH
48844: LD_VAR 0 8
48848: ARRAY
48849: ST_TO_ADDR
// if x = - 1 then
48850: LD_VAR 0 13
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: EQUAL
48859: IFFALSE 49068
// begin for j in f do
48861: LD_ADDR_VAR 0 9
48865: PUSH
48866: LD_VAR 0 12
48870: PUSH
48871: FOR_IN
48872: IFFALSE 49064
// repeat InitHc ;
48874: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48878: LD_VAR 0 9
48882: PPUSH
48883: CALL_OW 266
48887: PUSH
48888: LD_INT 5
48890: EQUAL
48891: IFFALSE 48961
// begin if UnitsInside ( j ) < 3 then
48893: LD_VAR 0 9
48897: PPUSH
48898: CALL_OW 313
48902: PUSH
48903: LD_INT 3
48905: LESS
48906: IFFALSE 48942
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48908: LD_INT 0
48910: PPUSH
48911: LD_INT 5
48913: PUSH
48914: LD_INT 8
48916: PUSH
48917: LD_INT 9
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: LIST
48924: PUSH
48925: LD_VAR 0 17
48929: ARRAY
48930: PPUSH
48931: LD_VAR 0 4
48935: PPUSH
48936: CALL_OW 380
48940: GO 48959
// PrepareHuman ( false , i , skill ) ;
48942: LD_INT 0
48944: PPUSH
48945: LD_VAR 0 8
48949: PPUSH
48950: LD_VAR 0 4
48954: PPUSH
48955: CALL_OW 380
// end else
48959: GO 48978
// PrepareHuman ( false , i , skill ) ;
48961: LD_INT 0
48963: PPUSH
48964: LD_VAR 0 8
48968: PPUSH
48969: LD_VAR 0 4
48973: PPUSH
48974: CALL_OW 380
// un := CreateHuman ;
48978: LD_ADDR_VAR 0 14
48982: PUSH
48983: CALL_OW 44
48987: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48988: LD_ADDR_VAR 0 7
48992: PUSH
48993: LD_VAR 0 7
48997: PPUSH
48998: LD_INT 1
49000: PPUSH
49001: LD_VAR 0 14
49005: PPUSH
49006: CALL_OW 2
49010: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49011: LD_VAR 0 14
49015: PPUSH
49016: LD_VAR 0 9
49020: PPUSH
49021: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49025: LD_VAR 0 9
49029: PPUSH
49030: CALL_OW 313
49034: PUSH
49035: LD_INT 6
49037: EQUAL
49038: PUSH
49039: LD_VAR 0 9
49043: PPUSH
49044: CALL_OW 266
49048: PUSH
49049: LD_INT 32
49051: PUSH
49052: LD_INT 31
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: IN
49059: OR
49060: IFFALSE 48874
49062: GO 48871
49064: POP
49065: POP
// end else
49066: GO 49448
// for j = 1 to x do
49068: LD_ADDR_VAR 0 9
49072: PUSH
49073: DOUBLE
49074: LD_INT 1
49076: DEC
49077: ST_TO_ADDR
49078: LD_VAR 0 13
49082: PUSH
49083: FOR_TO
49084: IFFALSE 49446
// begin InitHc ;
49086: CALL_OW 19
// if not f then
49090: LD_VAR 0 12
49094: NOT
49095: IFFALSE 49184
// begin PrepareHuman ( false , i , skill ) ;
49097: LD_INT 0
49099: PPUSH
49100: LD_VAR 0 8
49104: PPUSH
49105: LD_VAR 0 4
49109: PPUSH
49110: CALL_OW 380
// un := CreateHuman ;
49114: LD_ADDR_VAR 0 14
49118: PUSH
49119: CALL_OW 44
49123: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49124: LD_ADDR_VAR 0 7
49128: PUSH
49129: LD_VAR 0 7
49133: PPUSH
49134: LD_INT 1
49136: PPUSH
49137: LD_VAR 0 14
49141: PPUSH
49142: CALL_OW 2
49146: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49147: LD_VAR 0 14
49151: PPUSH
49152: LD_VAR 0 1
49156: PPUSH
49157: CALL_OW 250
49161: PPUSH
49162: LD_VAR 0 1
49166: PPUSH
49167: CALL_OW 251
49171: PPUSH
49172: LD_INT 10
49174: PPUSH
49175: LD_INT 0
49177: PPUSH
49178: CALL_OW 50
// continue ;
49182: GO 49083
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49184: LD_VAR 0 12
49188: PUSH
49189: LD_INT 1
49191: ARRAY
49192: PPUSH
49193: CALL_OW 313
49197: PUSH
49198: LD_VAR 0 12
49202: PUSH
49203: LD_INT 1
49205: ARRAY
49206: PPUSH
49207: CALL_OW 266
49211: PUSH
49212: LD_INT 32
49214: PUSH
49215: LD_INT 31
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: IN
49222: AND
49223: PUSH
49224: LD_VAR 0 12
49228: PUSH
49229: LD_INT 1
49231: ARRAY
49232: PPUSH
49233: CALL_OW 313
49237: PUSH
49238: LD_INT 6
49240: EQUAL
49241: OR
49242: IFFALSE 49262
// f := Delete ( f , 1 ) ;
49244: LD_ADDR_VAR 0 12
49248: PUSH
49249: LD_VAR 0 12
49253: PPUSH
49254: LD_INT 1
49256: PPUSH
49257: CALL_OW 3
49261: ST_TO_ADDR
// if not f then
49262: LD_VAR 0 12
49266: NOT
49267: IFFALSE 49285
// begin x := x + 2 ;
49269: LD_ADDR_VAR 0 13
49273: PUSH
49274: LD_VAR 0 13
49278: PUSH
49279: LD_INT 2
49281: PLUS
49282: ST_TO_ADDR
// continue ;
49283: GO 49083
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49285: LD_VAR 0 12
49289: PUSH
49290: LD_INT 1
49292: ARRAY
49293: PPUSH
49294: CALL_OW 266
49298: PUSH
49299: LD_INT 5
49301: EQUAL
49302: IFFALSE 49376
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49304: LD_VAR 0 12
49308: PUSH
49309: LD_INT 1
49311: ARRAY
49312: PPUSH
49313: CALL_OW 313
49317: PUSH
49318: LD_INT 3
49320: LESS
49321: IFFALSE 49357
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49323: LD_INT 0
49325: PPUSH
49326: LD_INT 5
49328: PUSH
49329: LD_INT 8
49331: PUSH
49332: LD_INT 9
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: PUSH
49340: LD_VAR 0 17
49344: ARRAY
49345: PPUSH
49346: LD_VAR 0 4
49350: PPUSH
49351: CALL_OW 380
49355: GO 49374
// PrepareHuman ( false , i , skill ) ;
49357: LD_INT 0
49359: PPUSH
49360: LD_VAR 0 8
49364: PPUSH
49365: LD_VAR 0 4
49369: PPUSH
49370: CALL_OW 380
// end else
49374: GO 49393
// PrepareHuman ( false , i , skill ) ;
49376: LD_INT 0
49378: PPUSH
49379: LD_VAR 0 8
49383: PPUSH
49384: LD_VAR 0 4
49388: PPUSH
49389: CALL_OW 380
// un := CreateHuman ;
49393: LD_ADDR_VAR 0 14
49397: PUSH
49398: CALL_OW 44
49402: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49403: LD_ADDR_VAR 0 7
49407: PUSH
49408: LD_VAR 0 7
49412: PPUSH
49413: LD_INT 1
49415: PPUSH
49416: LD_VAR 0 14
49420: PPUSH
49421: CALL_OW 2
49425: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49426: LD_VAR 0 14
49430: PPUSH
49431: LD_VAR 0 12
49435: PUSH
49436: LD_INT 1
49438: ARRAY
49439: PPUSH
49440: CALL_OW 52
// end ;
49444: GO 49083
49446: POP
49447: POP
// end ;
49448: GO 48385
49450: POP
49451: POP
// result := result ^ buildings ;
49452: LD_ADDR_VAR 0 7
49456: PUSH
49457: LD_VAR 0 7
49461: PUSH
49462: LD_VAR 0 18
49466: ADD
49467: ST_TO_ADDR
// end else
49468: GO 49611
// begin for i = 1 to personel do
49470: LD_ADDR_VAR 0 8
49474: PUSH
49475: DOUBLE
49476: LD_INT 1
49478: DEC
49479: ST_TO_ADDR
49480: LD_VAR 0 6
49484: PUSH
49485: FOR_TO
49486: IFFALSE 49609
// begin if i > 4 then
49488: LD_VAR 0 8
49492: PUSH
49493: LD_INT 4
49495: GREATER
49496: IFFALSE 49500
// break ;
49498: GO 49609
// x := personel [ i ] ;
49500: LD_ADDR_VAR 0 13
49504: PUSH
49505: LD_VAR 0 6
49509: PUSH
49510: LD_VAR 0 8
49514: ARRAY
49515: ST_TO_ADDR
// if x = - 1 then
49516: LD_VAR 0 13
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: EQUAL
49525: IFFALSE 49529
// continue ;
49527: GO 49485
// PrepareHuman ( false , i , skill ) ;
49529: LD_INT 0
49531: PPUSH
49532: LD_VAR 0 8
49536: PPUSH
49537: LD_VAR 0 4
49541: PPUSH
49542: CALL_OW 380
// un := CreateHuman ;
49546: LD_ADDR_VAR 0 14
49550: PUSH
49551: CALL_OW 44
49555: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49556: LD_VAR 0 14
49560: PPUSH
49561: LD_VAR 0 1
49565: PPUSH
49566: CALL_OW 250
49570: PPUSH
49571: LD_VAR 0 1
49575: PPUSH
49576: CALL_OW 251
49580: PPUSH
49581: LD_INT 10
49583: PPUSH
49584: LD_INT 0
49586: PPUSH
49587: CALL_OW 50
// result := result ^ un ;
49591: LD_ADDR_VAR 0 7
49595: PUSH
49596: LD_VAR 0 7
49600: PUSH
49601: LD_VAR 0 14
49605: ADD
49606: ST_TO_ADDR
// end ;
49607: GO 49485
49609: POP
49610: POP
// end ; end ;
49611: LD_VAR 0 7
49615: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49616: LD_INT 0
49618: PPUSH
49619: PPUSH
49620: PPUSH
49621: PPUSH
49622: PPUSH
49623: PPUSH
49624: PPUSH
49625: PPUSH
49626: PPUSH
49627: PPUSH
49628: PPUSH
49629: PPUSH
49630: PPUSH
49631: PPUSH
49632: PPUSH
49633: PPUSH
// result := false ;
49634: LD_ADDR_VAR 0 3
49638: PUSH
49639: LD_INT 0
49641: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49642: LD_VAR 0 1
49646: NOT
49647: PUSH
49648: LD_VAR 0 1
49652: PPUSH
49653: CALL_OW 266
49657: PUSH
49658: LD_INT 32
49660: PUSH
49661: LD_INT 33
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: IN
49668: NOT
49669: OR
49670: IFFALSE 49674
// exit ;
49672: GO 50783
// nat := GetNation ( tower ) ;
49674: LD_ADDR_VAR 0 12
49678: PUSH
49679: LD_VAR 0 1
49683: PPUSH
49684: CALL_OW 248
49688: ST_TO_ADDR
// side := GetSide ( tower ) ;
49689: LD_ADDR_VAR 0 16
49693: PUSH
49694: LD_VAR 0 1
49698: PPUSH
49699: CALL_OW 255
49703: ST_TO_ADDR
// x := GetX ( tower ) ;
49704: LD_ADDR_VAR 0 10
49708: PUSH
49709: LD_VAR 0 1
49713: PPUSH
49714: CALL_OW 250
49718: ST_TO_ADDR
// y := GetY ( tower ) ;
49719: LD_ADDR_VAR 0 11
49723: PUSH
49724: LD_VAR 0 1
49728: PPUSH
49729: CALL_OW 251
49733: ST_TO_ADDR
// if not x or not y then
49734: LD_VAR 0 10
49738: NOT
49739: PUSH
49740: LD_VAR 0 11
49744: NOT
49745: OR
49746: IFFALSE 49750
// exit ;
49748: GO 50783
// weapon := 0 ;
49750: LD_ADDR_VAR 0 18
49754: PUSH
49755: LD_INT 0
49757: ST_TO_ADDR
// fac_list := [ ] ;
49758: LD_ADDR_VAR 0 17
49762: PUSH
49763: EMPTY
49764: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49765: LD_ADDR_VAR 0 6
49769: PUSH
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 274
49779: PPUSH
49780: LD_VAR 0 2
49784: PPUSH
49785: LD_INT 0
49787: PPUSH
49788: CALL 47354 0 3
49792: PPUSH
49793: LD_INT 30
49795: PUSH
49796: LD_INT 3
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PPUSH
49803: CALL_OW 72
49807: ST_TO_ADDR
// if not factories then
49808: LD_VAR 0 6
49812: NOT
49813: IFFALSE 49817
// exit ;
49815: GO 50783
// for i in factories do
49817: LD_ADDR_VAR 0 8
49821: PUSH
49822: LD_VAR 0 6
49826: PUSH
49827: FOR_IN
49828: IFFALSE 49853
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49830: LD_ADDR_VAR 0 17
49834: PUSH
49835: LD_VAR 0 17
49839: PUSH
49840: LD_VAR 0 8
49844: PPUSH
49845: CALL_OW 478
49849: UNION
49850: ST_TO_ADDR
49851: GO 49827
49853: POP
49854: POP
// if not fac_list then
49855: LD_VAR 0 17
49859: NOT
49860: IFFALSE 49864
// exit ;
49862: GO 50783
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49864: LD_ADDR_VAR 0 5
49868: PUSH
49869: LD_INT 4
49871: PUSH
49872: LD_INT 5
49874: PUSH
49875: LD_INT 9
49877: PUSH
49878: LD_INT 10
49880: PUSH
49881: LD_INT 6
49883: PUSH
49884: LD_INT 7
49886: PUSH
49887: LD_INT 11
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 27
49901: PUSH
49902: LD_INT 28
49904: PUSH
49905: LD_INT 26
49907: PUSH
49908: LD_INT 30
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 43
49919: PUSH
49920: LD_INT 44
49922: PUSH
49923: LD_INT 46
49925: PUSH
49926: LD_INT 45
49928: PUSH
49929: LD_INT 47
49931: PUSH
49932: LD_INT 49
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: LIST
49947: PUSH
49948: LD_VAR 0 12
49952: ARRAY
49953: ST_TO_ADDR
// list := list isect fac_list ;
49954: LD_ADDR_VAR 0 5
49958: PUSH
49959: LD_VAR 0 5
49963: PUSH
49964: LD_VAR 0 17
49968: ISECT
49969: ST_TO_ADDR
// if not list then
49970: LD_VAR 0 5
49974: NOT
49975: IFFALSE 49979
// exit ;
49977: GO 50783
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49979: LD_VAR 0 12
49983: PUSH
49984: LD_INT 3
49986: EQUAL
49987: PUSH
49988: LD_INT 49
49990: PUSH
49991: LD_VAR 0 5
49995: IN
49996: AND
49997: PUSH
49998: LD_INT 31
50000: PPUSH
50001: LD_VAR 0 16
50005: PPUSH
50006: CALL_OW 321
50010: PUSH
50011: LD_INT 2
50013: EQUAL
50014: AND
50015: IFFALSE 50075
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50017: LD_INT 22
50019: PUSH
50020: LD_VAR 0 16
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 35
50031: PUSH
50032: LD_INT 49
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 91
50041: PUSH
50042: LD_VAR 0 1
50046: PUSH
50047: LD_INT 10
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: LIST
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: PPUSH
50060: CALL_OW 69
50064: NOT
50065: IFFALSE 50075
// weapon := ru_time_lapser ;
50067: LD_ADDR_VAR 0 18
50071: PUSH
50072: LD_INT 49
50074: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50075: LD_VAR 0 12
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: IN
50090: PUSH
50091: LD_INT 11
50093: PUSH
50094: LD_VAR 0 5
50098: IN
50099: PUSH
50100: LD_INT 30
50102: PUSH
50103: LD_VAR 0 5
50107: IN
50108: OR
50109: AND
50110: PUSH
50111: LD_INT 6
50113: PPUSH
50114: LD_VAR 0 16
50118: PPUSH
50119: CALL_OW 321
50123: PUSH
50124: LD_INT 2
50126: EQUAL
50127: AND
50128: IFFALSE 50293
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50130: LD_INT 22
50132: PUSH
50133: LD_VAR 0 16
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 2
50144: PUSH
50145: LD_INT 35
50147: PUSH
50148: LD_INT 11
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 35
50157: PUSH
50158: LD_INT 30
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 91
50172: PUSH
50173: LD_VAR 0 1
50177: PUSH
50178: LD_INT 18
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: LIST
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: PPUSH
50191: CALL_OW 69
50195: NOT
50196: PUSH
50197: LD_INT 22
50199: PUSH
50200: LD_VAR 0 16
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: LD_INT 30
50214: PUSH
50215: LD_INT 32
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 30
50224: PUSH
50225: LD_INT 33
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 91
50239: PUSH
50240: LD_VAR 0 1
50244: PUSH
50245: LD_INT 12
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: LIST
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: PUSH
50258: EMPTY
50259: LIST
50260: PPUSH
50261: CALL_OW 69
50265: PUSH
50266: LD_INT 2
50268: GREATER
50269: AND
50270: IFFALSE 50293
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50272: LD_ADDR_VAR 0 18
50276: PUSH
50277: LD_INT 11
50279: PUSH
50280: LD_INT 30
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_VAR 0 12
50291: ARRAY
50292: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50293: LD_VAR 0 18
50297: NOT
50298: PUSH
50299: LD_INT 40
50301: PPUSH
50302: LD_VAR 0 16
50306: PPUSH
50307: CALL_OW 321
50311: PUSH
50312: LD_INT 2
50314: EQUAL
50315: AND
50316: PUSH
50317: LD_INT 7
50319: PUSH
50320: LD_VAR 0 5
50324: IN
50325: PUSH
50326: LD_INT 28
50328: PUSH
50329: LD_VAR 0 5
50333: IN
50334: OR
50335: PUSH
50336: LD_INT 45
50338: PUSH
50339: LD_VAR 0 5
50343: IN
50344: OR
50345: AND
50346: IFFALSE 50600
// begin hex := GetHexInfo ( x , y ) ;
50348: LD_ADDR_VAR 0 4
50352: PUSH
50353: LD_VAR 0 10
50357: PPUSH
50358: LD_VAR 0 11
50362: PPUSH
50363: CALL_OW 546
50367: ST_TO_ADDR
// if hex [ 1 ] then
50368: LD_VAR 0 4
50372: PUSH
50373: LD_INT 1
50375: ARRAY
50376: IFFALSE 50380
// exit ;
50378: GO 50783
// height := hex [ 2 ] ;
50380: LD_ADDR_VAR 0 15
50384: PUSH
50385: LD_VAR 0 4
50389: PUSH
50390: LD_INT 2
50392: ARRAY
50393: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50394: LD_ADDR_VAR 0 14
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: LD_INT 3
50407: PUSH
50408: LD_INT 5
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: ST_TO_ADDR
// for i in tmp do
50417: LD_ADDR_VAR 0 8
50421: PUSH
50422: LD_VAR 0 14
50426: PUSH
50427: FOR_IN
50428: IFFALSE 50598
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50430: LD_ADDR_VAR 0 9
50434: PUSH
50435: LD_VAR 0 10
50439: PPUSH
50440: LD_VAR 0 8
50444: PPUSH
50445: LD_INT 5
50447: PPUSH
50448: CALL_OW 272
50452: PUSH
50453: LD_VAR 0 11
50457: PPUSH
50458: LD_VAR 0 8
50462: PPUSH
50463: LD_INT 5
50465: PPUSH
50466: CALL_OW 273
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50475: LD_VAR 0 9
50479: PUSH
50480: LD_INT 1
50482: ARRAY
50483: PPUSH
50484: LD_VAR 0 9
50488: PUSH
50489: LD_INT 2
50491: ARRAY
50492: PPUSH
50493: CALL_OW 488
50497: IFFALSE 50596
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50499: LD_ADDR_VAR 0 4
50503: PUSH
50504: LD_VAR 0 9
50508: PUSH
50509: LD_INT 1
50511: ARRAY
50512: PPUSH
50513: LD_VAR 0 9
50517: PUSH
50518: LD_INT 2
50520: ARRAY
50521: PPUSH
50522: CALL_OW 546
50526: ST_TO_ADDR
// if hex [ 1 ] then
50527: LD_VAR 0 4
50531: PUSH
50532: LD_INT 1
50534: ARRAY
50535: IFFALSE 50539
// continue ;
50537: GO 50427
// h := hex [ 2 ] ;
50539: LD_ADDR_VAR 0 13
50543: PUSH
50544: LD_VAR 0 4
50548: PUSH
50549: LD_INT 2
50551: ARRAY
50552: ST_TO_ADDR
// if h + 7 < height then
50553: LD_VAR 0 13
50557: PUSH
50558: LD_INT 7
50560: PLUS
50561: PUSH
50562: LD_VAR 0 15
50566: LESS
50567: IFFALSE 50596
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50569: LD_ADDR_VAR 0 18
50573: PUSH
50574: LD_INT 7
50576: PUSH
50577: LD_INT 28
50579: PUSH
50580: LD_INT 45
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: PUSH
50588: LD_VAR 0 12
50592: ARRAY
50593: ST_TO_ADDR
// break ;
50594: GO 50598
// end ; end ; end ;
50596: GO 50427
50598: POP
50599: POP
// end ; if not weapon then
50600: LD_VAR 0 18
50604: NOT
50605: IFFALSE 50665
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50607: LD_ADDR_VAR 0 5
50611: PUSH
50612: LD_VAR 0 5
50616: PUSH
50617: LD_INT 11
50619: PUSH
50620: LD_INT 30
50622: PUSH
50623: LD_INT 49
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: DIFF
50631: ST_TO_ADDR
// if not list then
50632: LD_VAR 0 5
50636: NOT
50637: IFFALSE 50641
// exit ;
50639: GO 50783
// weapon := list [ rand ( 1 , list ) ] ;
50641: LD_ADDR_VAR 0 18
50645: PUSH
50646: LD_VAR 0 5
50650: PUSH
50651: LD_INT 1
50653: PPUSH
50654: LD_VAR 0 5
50658: PPUSH
50659: CALL_OW 12
50663: ARRAY
50664: ST_TO_ADDR
// end ; if weapon then
50665: LD_VAR 0 18
50669: IFFALSE 50783
// begin tmp := CostOfWeapon ( weapon ) ;
50671: LD_ADDR_VAR 0 14
50675: PUSH
50676: LD_VAR 0 18
50680: PPUSH
50681: CALL_OW 451
50685: ST_TO_ADDR
// j := GetBase ( tower ) ;
50686: LD_ADDR_VAR 0 9
50690: PUSH
50691: LD_VAR 0 1
50695: PPUSH
50696: CALL_OW 274
50700: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50701: LD_VAR 0 9
50705: PPUSH
50706: LD_INT 1
50708: PPUSH
50709: CALL_OW 275
50713: PUSH
50714: LD_VAR 0 14
50718: PUSH
50719: LD_INT 1
50721: ARRAY
50722: GREATEREQUAL
50723: PUSH
50724: LD_VAR 0 9
50728: PPUSH
50729: LD_INT 2
50731: PPUSH
50732: CALL_OW 275
50736: PUSH
50737: LD_VAR 0 14
50741: PUSH
50742: LD_INT 2
50744: ARRAY
50745: GREATEREQUAL
50746: AND
50747: PUSH
50748: LD_VAR 0 9
50752: PPUSH
50753: LD_INT 3
50755: PPUSH
50756: CALL_OW 275
50760: PUSH
50761: LD_VAR 0 14
50765: PUSH
50766: LD_INT 3
50768: ARRAY
50769: GREATEREQUAL
50770: AND
50771: IFFALSE 50783
// result := weapon ;
50773: LD_ADDR_VAR 0 3
50777: PUSH
50778: LD_VAR 0 18
50782: ST_TO_ADDR
// end ; end ;
50783: LD_VAR 0 3
50787: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50788: LD_INT 0
50790: PPUSH
50791: PPUSH
// result := true ;
50792: LD_ADDR_VAR 0 3
50796: PUSH
50797: LD_INT 1
50799: ST_TO_ADDR
// if array1 = array2 then
50800: LD_VAR 0 1
50804: PUSH
50805: LD_VAR 0 2
50809: EQUAL
50810: IFFALSE 50870
// begin for i = 1 to array1 do
50812: LD_ADDR_VAR 0 4
50816: PUSH
50817: DOUBLE
50818: LD_INT 1
50820: DEC
50821: ST_TO_ADDR
50822: LD_VAR 0 1
50826: PUSH
50827: FOR_TO
50828: IFFALSE 50866
// if array1 [ i ] <> array2 [ i ] then
50830: LD_VAR 0 1
50834: PUSH
50835: LD_VAR 0 4
50839: ARRAY
50840: PUSH
50841: LD_VAR 0 2
50845: PUSH
50846: LD_VAR 0 4
50850: ARRAY
50851: NONEQUAL
50852: IFFALSE 50864
// begin result := false ;
50854: LD_ADDR_VAR 0 3
50858: PUSH
50859: LD_INT 0
50861: ST_TO_ADDR
// break ;
50862: GO 50866
// end ;
50864: GO 50827
50866: POP
50867: POP
// end else
50868: GO 50878
// result := false ;
50870: LD_ADDR_VAR 0 3
50874: PUSH
50875: LD_INT 0
50877: ST_TO_ADDR
// end ;
50878: LD_VAR 0 3
50882: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50883: LD_INT 0
50885: PPUSH
50886: PPUSH
// if not array1 or not array2 then
50887: LD_VAR 0 1
50891: NOT
50892: PUSH
50893: LD_VAR 0 2
50897: NOT
50898: OR
50899: IFFALSE 50903
// exit ;
50901: GO 50967
// result := true ;
50903: LD_ADDR_VAR 0 3
50907: PUSH
50908: LD_INT 1
50910: ST_TO_ADDR
// for i = 1 to array1 do
50911: LD_ADDR_VAR 0 4
50915: PUSH
50916: DOUBLE
50917: LD_INT 1
50919: DEC
50920: ST_TO_ADDR
50921: LD_VAR 0 1
50925: PUSH
50926: FOR_TO
50927: IFFALSE 50965
// if array1 [ i ] <> array2 [ i ] then
50929: LD_VAR 0 1
50933: PUSH
50934: LD_VAR 0 4
50938: ARRAY
50939: PUSH
50940: LD_VAR 0 2
50944: PUSH
50945: LD_VAR 0 4
50949: ARRAY
50950: NONEQUAL
50951: IFFALSE 50963
// begin result := false ;
50953: LD_ADDR_VAR 0 3
50957: PUSH
50958: LD_INT 0
50960: ST_TO_ADDR
// break ;
50961: GO 50965
// end ;
50963: GO 50926
50965: POP
50966: POP
// end ;
50967: LD_VAR 0 3
50971: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50972: LD_INT 0
50974: PPUSH
50975: PPUSH
50976: PPUSH
// pom := GetBase ( fac ) ;
50977: LD_ADDR_VAR 0 5
50981: PUSH
50982: LD_VAR 0 1
50986: PPUSH
50987: CALL_OW 274
50991: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50992: LD_ADDR_VAR 0 4
50996: PUSH
50997: LD_VAR 0 2
51001: PUSH
51002: LD_INT 1
51004: ARRAY
51005: PPUSH
51006: LD_VAR 0 2
51010: PUSH
51011: LD_INT 2
51013: ARRAY
51014: PPUSH
51015: LD_VAR 0 2
51019: PUSH
51020: LD_INT 3
51022: ARRAY
51023: PPUSH
51024: LD_VAR 0 2
51028: PUSH
51029: LD_INT 4
51031: ARRAY
51032: PPUSH
51033: CALL_OW 449
51037: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51038: LD_ADDR_VAR 0 3
51042: PUSH
51043: LD_VAR 0 5
51047: PPUSH
51048: LD_INT 1
51050: PPUSH
51051: CALL_OW 275
51055: PUSH
51056: LD_VAR 0 4
51060: PUSH
51061: LD_INT 1
51063: ARRAY
51064: GREATEREQUAL
51065: PUSH
51066: LD_VAR 0 5
51070: PPUSH
51071: LD_INT 2
51073: PPUSH
51074: CALL_OW 275
51078: PUSH
51079: LD_VAR 0 4
51083: PUSH
51084: LD_INT 2
51086: ARRAY
51087: GREATEREQUAL
51088: AND
51089: PUSH
51090: LD_VAR 0 5
51094: PPUSH
51095: LD_INT 3
51097: PPUSH
51098: CALL_OW 275
51102: PUSH
51103: LD_VAR 0 4
51107: PUSH
51108: LD_INT 3
51110: ARRAY
51111: GREATEREQUAL
51112: AND
51113: ST_TO_ADDR
// end ;
51114: LD_VAR 0 3
51118: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51119: LD_INT 0
51121: PPUSH
51122: PPUSH
51123: PPUSH
51124: PPUSH
// pom := GetBase ( building ) ;
51125: LD_ADDR_VAR 0 3
51129: PUSH
51130: LD_VAR 0 1
51134: PPUSH
51135: CALL_OW 274
51139: ST_TO_ADDR
// if not pom then
51140: LD_VAR 0 3
51144: NOT
51145: IFFALSE 51149
// exit ;
51147: GO 51319
// btype := GetBType ( building ) ;
51149: LD_ADDR_VAR 0 5
51153: PUSH
51154: LD_VAR 0 1
51158: PPUSH
51159: CALL_OW 266
51163: ST_TO_ADDR
// if btype = b_armoury then
51164: LD_VAR 0 5
51168: PUSH
51169: LD_INT 4
51171: EQUAL
51172: IFFALSE 51182
// btype := b_barracks ;
51174: LD_ADDR_VAR 0 5
51178: PUSH
51179: LD_INT 5
51181: ST_TO_ADDR
// if btype = b_depot then
51182: LD_VAR 0 5
51186: PUSH
51187: LD_INT 0
51189: EQUAL
51190: IFFALSE 51200
// btype := b_warehouse ;
51192: LD_ADDR_VAR 0 5
51196: PUSH
51197: LD_INT 1
51199: ST_TO_ADDR
// if btype = b_workshop then
51200: LD_VAR 0 5
51204: PUSH
51205: LD_INT 2
51207: EQUAL
51208: IFFALSE 51218
// btype := b_factory ;
51210: LD_ADDR_VAR 0 5
51214: PUSH
51215: LD_INT 3
51217: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51218: LD_ADDR_VAR 0 4
51222: PUSH
51223: LD_VAR 0 5
51227: PPUSH
51228: LD_VAR 0 1
51232: PPUSH
51233: CALL_OW 248
51237: PPUSH
51238: CALL_OW 450
51242: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51243: LD_ADDR_VAR 0 2
51247: PUSH
51248: LD_VAR 0 3
51252: PPUSH
51253: LD_INT 1
51255: PPUSH
51256: CALL_OW 275
51260: PUSH
51261: LD_VAR 0 4
51265: PUSH
51266: LD_INT 1
51268: ARRAY
51269: GREATEREQUAL
51270: PUSH
51271: LD_VAR 0 3
51275: PPUSH
51276: LD_INT 2
51278: PPUSH
51279: CALL_OW 275
51283: PUSH
51284: LD_VAR 0 4
51288: PUSH
51289: LD_INT 2
51291: ARRAY
51292: GREATEREQUAL
51293: AND
51294: PUSH
51295: LD_VAR 0 3
51299: PPUSH
51300: LD_INT 3
51302: PPUSH
51303: CALL_OW 275
51307: PUSH
51308: LD_VAR 0 4
51312: PUSH
51313: LD_INT 3
51315: ARRAY
51316: GREATEREQUAL
51317: AND
51318: ST_TO_ADDR
// end ;
51319: LD_VAR 0 2
51323: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51324: LD_INT 0
51326: PPUSH
51327: PPUSH
51328: PPUSH
// pom := GetBase ( building ) ;
51329: LD_ADDR_VAR 0 4
51333: PUSH
51334: LD_VAR 0 1
51338: PPUSH
51339: CALL_OW 274
51343: ST_TO_ADDR
// if not pom then
51344: LD_VAR 0 4
51348: NOT
51349: IFFALSE 51353
// exit ;
51351: GO 51454
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51353: LD_ADDR_VAR 0 5
51357: PUSH
51358: LD_VAR 0 2
51362: PPUSH
51363: LD_VAR 0 1
51367: PPUSH
51368: CALL_OW 248
51372: PPUSH
51373: CALL_OW 450
51377: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51378: LD_ADDR_VAR 0 3
51382: PUSH
51383: LD_VAR 0 4
51387: PPUSH
51388: LD_INT 1
51390: PPUSH
51391: CALL_OW 275
51395: PUSH
51396: LD_VAR 0 5
51400: PUSH
51401: LD_INT 1
51403: ARRAY
51404: GREATEREQUAL
51405: PUSH
51406: LD_VAR 0 4
51410: PPUSH
51411: LD_INT 2
51413: PPUSH
51414: CALL_OW 275
51418: PUSH
51419: LD_VAR 0 5
51423: PUSH
51424: LD_INT 2
51426: ARRAY
51427: GREATEREQUAL
51428: AND
51429: PUSH
51430: LD_VAR 0 4
51434: PPUSH
51435: LD_INT 3
51437: PPUSH
51438: CALL_OW 275
51442: PUSH
51443: LD_VAR 0 5
51447: PUSH
51448: LD_INT 3
51450: ARRAY
51451: GREATEREQUAL
51452: AND
51453: ST_TO_ADDR
// end ;
51454: LD_VAR 0 3
51458: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51459: LD_INT 0
51461: PPUSH
51462: PPUSH
51463: PPUSH
51464: PPUSH
51465: PPUSH
51466: PPUSH
51467: PPUSH
51468: PPUSH
51469: PPUSH
51470: PPUSH
51471: PPUSH
// result := false ;
51472: LD_ADDR_VAR 0 8
51476: PUSH
51477: LD_INT 0
51479: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51480: LD_VAR 0 5
51484: NOT
51485: PUSH
51486: LD_VAR 0 1
51490: NOT
51491: OR
51492: PUSH
51493: LD_VAR 0 2
51497: NOT
51498: OR
51499: PUSH
51500: LD_VAR 0 3
51504: NOT
51505: OR
51506: IFFALSE 51510
// exit ;
51508: GO 52324
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51510: LD_ADDR_VAR 0 14
51514: PUSH
51515: LD_VAR 0 1
51519: PPUSH
51520: LD_VAR 0 2
51524: PPUSH
51525: LD_VAR 0 3
51529: PPUSH
51530: LD_VAR 0 4
51534: PPUSH
51535: LD_VAR 0 5
51539: PUSH
51540: LD_INT 1
51542: ARRAY
51543: PPUSH
51544: CALL_OW 248
51548: PPUSH
51549: LD_INT 0
51551: PPUSH
51552: CALL 53557 0 6
51556: ST_TO_ADDR
// if not hexes then
51557: LD_VAR 0 14
51561: NOT
51562: IFFALSE 51566
// exit ;
51564: GO 52324
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51566: LD_ADDR_VAR 0 17
51570: PUSH
51571: LD_VAR 0 5
51575: PPUSH
51576: LD_INT 22
51578: PUSH
51579: LD_VAR 0 13
51583: PPUSH
51584: CALL_OW 255
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 2
51595: PUSH
51596: LD_INT 30
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 30
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PPUSH
51625: CALL_OW 72
51629: ST_TO_ADDR
// for i = 1 to hexes do
51630: LD_ADDR_VAR 0 9
51634: PUSH
51635: DOUBLE
51636: LD_INT 1
51638: DEC
51639: ST_TO_ADDR
51640: LD_VAR 0 14
51644: PUSH
51645: FOR_TO
51646: IFFALSE 52322
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51648: LD_ADDR_VAR 0 13
51652: PUSH
51653: LD_VAR 0 14
51657: PUSH
51658: LD_VAR 0 9
51662: ARRAY
51663: PUSH
51664: LD_INT 1
51666: ARRAY
51667: PPUSH
51668: LD_VAR 0 14
51672: PUSH
51673: LD_VAR 0 9
51677: ARRAY
51678: PUSH
51679: LD_INT 2
51681: ARRAY
51682: PPUSH
51683: CALL_OW 428
51687: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51688: LD_VAR 0 14
51692: PUSH
51693: LD_VAR 0 9
51697: ARRAY
51698: PUSH
51699: LD_INT 1
51701: ARRAY
51702: PPUSH
51703: LD_VAR 0 14
51707: PUSH
51708: LD_VAR 0 9
51712: ARRAY
51713: PUSH
51714: LD_INT 2
51716: ARRAY
51717: PPUSH
51718: CALL_OW 351
51722: PUSH
51723: LD_VAR 0 14
51727: PUSH
51728: LD_VAR 0 9
51732: ARRAY
51733: PUSH
51734: LD_INT 1
51736: ARRAY
51737: PPUSH
51738: LD_VAR 0 14
51742: PUSH
51743: LD_VAR 0 9
51747: ARRAY
51748: PUSH
51749: LD_INT 2
51751: ARRAY
51752: PPUSH
51753: CALL_OW 488
51757: NOT
51758: OR
51759: PUSH
51760: LD_VAR 0 13
51764: PPUSH
51765: CALL_OW 247
51769: PUSH
51770: LD_INT 3
51772: EQUAL
51773: OR
51774: IFFALSE 51780
// exit ;
51776: POP
51777: POP
51778: GO 52324
// if not tmp then
51780: LD_VAR 0 13
51784: NOT
51785: IFFALSE 51789
// continue ;
51787: GO 51645
// result := true ;
51789: LD_ADDR_VAR 0 8
51793: PUSH
51794: LD_INT 1
51796: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51797: LD_VAR 0 6
51801: PUSH
51802: LD_VAR 0 13
51806: PPUSH
51807: CALL_OW 247
51811: PUSH
51812: LD_INT 2
51814: EQUAL
51815: AND
51816: PUSH
51817: LD_VAR 0 13
51821: PPUSH
51822: CALL_OW 263
51826: PUSH
51827: LD_INT 1
51829: EQUAL
51830: AND
51831: IFFALSE 51995
// begin if IsDrivenBy ( tmp ) then
51833: LD_VAR 0 13
51837: PPUSH
51838: CALL_OW 311
51842: IFFALSE 51846
// continue ;
51844: GO 51645
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51846: LD_VAR 0 6
51850: PPUSH
51851: LD_INT 3
51853: PUSH
51854: LD_INT 60
51856: PUSH
51857: EMPTY
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 3
51866: PUSH
51867: LD_INT 55
51869: PUSH
51870: EMPTY
51871: LIST
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PPUSH
51881: CALL_OW 72
51885: IFFALSE 51993
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51887: LD_ADDR_VAR 0 18
51891: PUSH
51892: LD_VAR 0 6
51896: PPUSH
51897: LD_INT 3
51899: PUSH
51900: LD_INT 60
51902: PUSH
51903: EMPTY
51904: LIST
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 3
51912: PUSH
51913: LD_INT 55
51915: PUSH
51916: EMPTY
51917: LIST
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PPUSH
51927: CALL_OW 72
51931: PUSH
51932: LD_INT 1
51934: ARRAY
51935: ST_TO_ADDR
// if IsInUnit ( driver ) then
51936: LD_VAR 0 18
51940: PPUSH
51941: CALL_OW 310
51945: IFFALSE 51956
// ComExit ( driver ) ;
51947: LD_VAR 0 18
51951: PPUSH
51952: CALL 77337 0 1
// AddComEnterUnit ( driver , tmp ) ;
51956: LD_VAR 0 18
51960: PPUSH
51961: LD_VAR 0 13
51965: PPUSH
51966: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51970: LD_VAR 0 18
51974: PPUSH
51975: LD_VAR 0 7
51979: PPUSH
51980: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51984: LD_VAR 0 18
51988: PPUSH
51989: CALL_OW 181
// end ; continue ;
51993: GO 51645
// end ; if not cleaners or not tmp in cleaners then
51995: LD_VAR 0 6
51999: NOT
52000: PUSH
52001: LD_VAR 0 13
52005: PUSH
52006: LD_VAR 0 6
52010: IN
52011: NOT
52012: OR
52013: IFFALSE 52320
// begin if dep then
52015: LD_VAR 0 17
52019: IFFALSE 52155
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52021: LD_ADDR_VAR 0 16
52025: PUSH
52026: LD_VAR 0 17
52030: PUSH
52031: LD_INT 1
52033: ARRAY
52034: PPUSH
52035: CALL_OW 250
52039: PPUSH
52040: LD_VAR 0 17
52044: PUSH
52045: LD_INT 1
52047: ARRAY
52048: PPUSH
52049: CALL_OW 254
52053: PPUSH
52054: LD_INT 5
52056: PPUSH
52057: CALL_OW 272
52061: PUSH
52062: LD_VAR 0 17
52066: PUSH
52067: LD_INT 1
52069: ARRAY
52070: PPUSH
52071: CALL_OW 251
52075: PPUSH
52076: LD_VAR 0 17
52080: PUSH
52081: LD_INT 1
52083: ARRAY
52084: PPUSH
52085: CALL_OW 254
52089: PPUSH
52090: LD_INT 5
52092: PPUSH
52093: CALL_OW 273
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52102: LD_VAR 0 16
52106: PUSH
52107: LD_INT 1
52109: ARRAY
52110: PPUSH
52111: LD_VAR 0 16
52115: PUSH
52116: LD_INT 2
52118: ARRAY
52119: PPUSH
52120: CALL_OW 488
52124: IFFALSE 52155
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52126: LD_VAR 0 13
52130: PPUSH
52131: LD_VAR 0 16
52135: PUSH
52136: LD_INT 1
52138: ARRAY
52139: PPUSH
52140: LD_VAR 0 16
52144: PUSH
52145: LD_INT 2
52147: ARRAY
52148: PPUSH
52149: CALL_OW 111
// continue ;
52153: GO 51645
// end ; end ; r := GetDir ( tmp ) ;
52155: LD_ADDR_VAR 0 15
52159: PUSH
52160: LD_VAR 0 13
52164: PPUSH
52165: CALL_OW 254
52169: ST_TO_ADDR
// if r = 5 then
52170: LD_VAR 0 15
52174: PUSH
52175: LD_INT 5
52177: EQUAL
52178: IFFALSE 52188
// r := 0 ;
52180: LD_ADDR_VAR 0 15
52184: PUSH
52185: LD_INT 0
52187: ST_TO_ADDR
// for j = r to 5 do
52188: LD_ADDR_VAR 0 10
52192: PUSH
52193: DOUBLE
52194: LD_VAR 0 15
52198: DEC
52199: ST_TO_ADDR
52200: LD_INT 5
52202: PUSH
52203: FOR_TO
52204: IFFALSE 52318
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52206: LD_ADDR_VAR 0 11
52210: PUSH
52211: LD_VAR 0 13
52215: PPUSH
52216: CALL_OW 250
52220: PPUSH
52221: LD_VAR 0 10
52225: PPUSH
52226: LD_INT 2
52228: PPUSH
52229: CALL_OW 272
52233: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52234: LD_ADDR_VAR 0 12
52238: PUSH
52239: LD_VAR 0 13
52243: PPUSH
52244: CALL_OW 251
52248: PPUSH
52249: LD_VAR 0 10
52253: PPUSH
52254: LD_INT 2
52256: PPUSH
52257: CALL_OW 273
52261: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52262: LD_VAR 0 11
52266: PPUSH
52267: LD_VAR 0 12
52271: PPUSH
52272: CALL_OW 488
52276: PUSH
52277: LD_VAR 0 11
52281: PPUSH
52282: LD_VAR 0 12
52286: PPUSH
52287: CALL_OW 428
52291: NOT
52292: AND
52293: IFFALSE 52316
// begin ComMoveXY ( tmp , _x , _y ) ;
52295: LD_VAR 0 13
52299: PPUSH
52300: LD_VAR 0 11
52304: PPUSH
52305: LD_VAR 0 12
52309: PPUSH
52310: CALL_OW 111
// break ;
52314: GO 52318
// end ; end ;
52316: GO 52203
52318: POP
52319: POP
// end ; end ;
52320: GO 51645
52322: POP
52323: POP
// end ;
52324: LD_VAR 0 8
52328: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52329: LD_INT 0
52331: PPUSH
// result := true ;
52332: LD_ADDR_VAR 0 3
52336: PUSH
52337: LD_INT 1
52339: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52340: LD_VAR 0 2
52344: PUSH
52345: LD_INT 24
52347: DOUBLE
52348: EQUAL
52349: IFTRUE 52359
52351: LD_INT 33
52353: DOUBLE
52354: EQUAL
52355: IFTRUE 52359
52357: GO 52384
52359: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52360: LD_ADDR_VAR 0 3
52364: PUSH
52365: LD_INT 32
52367: PPUSH
52368: LD_VAR 0 1
52372: PPUSH
52373: CALL_OW 321
52377: PUSH
52378: LD_INT 2
52380: EQUAL
52381: ST_TO_ADDR
52382: GO 52700
52384: LD_INT 20
52386: DOUBLE
52387: EQUAL
52388: IFTRUE 52392
52390: GO 52417
52392: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52393: LD_ADDR_VAR 0 3
52397: PUSH
52398: LD_INT 6
52400: PPUSH
52401: LD_VAR 0 1
52405: PPUSH
52406: CALL_OW 321
52410: PUSH
52411: LD_INT 2
52413: EQUAL
52414: ST_TO_ADDR
52415: GO 52700
52417: LD_INT 22
52419: DOUBLE
52420: EQUAL
52421: IFTRUE 52431
52423: LD_INT 36
52425: DOUBLE
52426: EQUAL
52427: IFTRUE 52431
52429: GO 52456
52431: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52432: LD_ADDR_VAR 0 3
52436: PUSH
52437: LD_INT 15
52439: PPUSH
52440: LD_VAR 0 1
52444: PPUSH
52445: CALL_OW 321
52449: PUSH
52450: LD_INT 2
52452: EQUAL
52453: ST_TO_ADDR
52454: GO 52700
52456: LD_INT 30
52458: DOUBLE
52459: EQUAL
52460: IFTRUE 52464
52462: GO 52489
52464: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52465: LD_ADDR_VAR 0 3
52469: PUSH
52470: LD_INT 20
52472: PPUSH
52473: LD_VAR 0 1
52477: PPUSH
52478: CALL_OW 321
52482: PUSH
52483: LD_INT 2
52485: EQUAL
52486: ST_TO_ADDR
52487: GO 52700
52489: LD_INT 28
52491: DOUBLE
52492: EQUAL
52493: IFTRUE 52503
52495: LD_INT 21
52497: DOUBLE
52498: EQUAL
52499: IFTRUE 52503
52501: GO 52528
52503: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52504: LD_ADDR_VAR 0 3
52508: PUSH
52509: LD_INT 21
52511: PPUSH
52512: LD_VAR 0 1
52516: PPUSH
52517: CALL_OW 321
52521: PUSH
52522: LD_INT 2
52524: EQUAL
52525: ST_TO_ADDR
52526: GO 52700
52528: LD_INT 16
52530: DOUBLE
52531: EQUAL
52532: IFTRUE 52536
52534: GO 52561
52536: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52537: LD_ADDR_VAR 0 3
52541: PUSH
52542: LD_INT 84
52544: PPUSH
52545: LD_VAR 0 1
52549: PPUSH
52550: CALL_OW 321
52554: PUSH
52555: LD_INT 2
52557: EQUAL
52558: ST_TO_ADDR
52559: GO 52700
52561: LD_INT 19
52563: DOUBLE
52564: EQUAL
52565: IFTRUE 52575
52567: LD_INT 23
52569: DOUBLE
52570: EQUAL
52571: IFTRUE 52575
52573: GO 52600
52575: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52576: LD_ADDR_VAR 0 3
52580: PUSH
52581: LD_INT 83
52583: PPUSH
52584: LD_VAR 0 1
52588: PPUSH
52589: CALL_OW 321
52593: PUSH
52594: LD_INT 2
52596: EQUAL
52597: ST_TO_ADDR
52598: GO 52700
52600: LD_INT 17
52602: DOUBLE
52603: EQUAL
52604: IFTRUE 52608
52606: GO 52633
52608: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52609: LD_ADDR_VAR 0 3
52613: PUSH
52614: LD_INT 39
52616: PPUSH
52617: LD_VAR 0 1
52621: PPUSH
52622: CALL_OW 321
52626: PUSH
52627: LD_INT 2
52629: EQUAL
52630: ST_TO_ADDR
52631: GO 52700
52633: LD_INT 18
52635: DOUBLE
52636: EQUAL
52637: IFTRUE 52641
52639: GO 52666
52641: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52642: LD_ADDR_VAR 0 3
52646: PUSH
52647: LD_INT 40
52649: PPUSH
52650: LD_VAR 0 1
52654: PPUSH
52655: CALL_OW 321
52659: PUSH
52660: LD_INT 2
52662: EQUAL
52663: ST_TO_ADDR
52664: GO 52700
52666: LD_INT 27
52668: DOUBLE
52669: EQUAL
52670: IFTRUE 52674
52672: GO 52699
52674: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52675: LD_ADDR_VAR 0 3
52679: PUSH
52680: LD_INT 35
52682: PPUSH
52683: LD_VAR 0 1
52687: PPUSH
52688: CALL_OW 321
52692: PUSH
52693: LD_INT 2
52695: EQUAL
52696: ST_TO_ADDR
52697: GO 52700
52699: POP
// end ;
52700: LD_VAR 0 3
52704: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52705: LD_INT 0
52707: PPUSH
52708: PPUSH
52709: PPUSH
52710: PPUSH
52711: PPUSH
52712: PPUSH
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
52717: PPUSH
// result := false ;
52718: LD_ADDR_VAR 0 6
52722: PUSH
52723: LD_INT 0
52725: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52726: LD_VAR 0 1
52730: NOT
52731: PUSH
52732: LD_VAR 0 1
52736: PPUSH
52737: CALL_OW 266
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: IN
52752: NOT
52753: OR
52754: PUSH
52755: LD_VAR 0 2
52759: NOT
52760: OR
52761: PUSH
52762: LD_VAR 0 5
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: LD_INT 4
52781: PUSH
52782: LD_INT 5
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: IN
52793: NOT
52794: OR
52795: PUSH
52796: LD_VAR 0 3
52800: PPUSH
52801: LD_VAR 0 4
52805: PPUSH
52806: CALL_OW 488
52810: NOT
52811: OR
52812: IFFALSE 52816
// exit ;
52814: GO 53552
// side := GetSide ( depot ) ;
52816: LD_ADDR_VAR 0 9
52820: PUSH
52821: LD_VAR 0 1
52825: PPUSH
52826: CALL_OW 255
52830: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52831: LD_VAR 0 9
52835: PPUSH
52836: LD_VAR 0 2
52840: PPUSH
52841: CALL 52329 0 2
52845: NOT
52846: IFFALSE 52850
// exit ;
52848: GO 53552
// pom := GetBase ( depot ) ;
52850: LD_ADDR_VAR 0 10
52854: PUSH
52855: LD_VAR 0 1
52859: PPUSH
52860: CALL_OW 274
52864: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52865: LD_ADDR_VAR 0 11
52869: PUSH
52870: LD_VAR 0 2
52874: PPUSH
52875: LD_VAR 0 1
52879: PPUSH
52880: CALL_OW 248
52884: PPUSH
52885: CALL_OW 450
52889: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52890: LD_VAR 0 10
52894: PPUSH
52895: LD_INT 1
52897: PPUSH
52898: CALL_OW 275
52902: PUSH
52903: LD_VAR 0 11
52907: PUSH
52908: LD_INT 1
52910: ARRAY
52911: GREATEREQUAL
52912: PUSH
52913: LD_VAR 0 10
52917: PPUSH
52918: LD_INT 2
52920: PPUSH
52921: CALL_OW 275
52925: PUSH
52926: LD_VAR 0 11
52930: PUSH
52931: LD_INT 2
52933: ARRAY
52934: GREATEREQUAL
52935: AND
52936: PUSH
52937: LD_VAR 0 10
52941: PPUSH
52942: LD_INT 3
52944: PPUSH
52945: CALL_OW 275
52949: PUSH
52950: LD_VAR 0 11
52954: PUSH
52955: LD_INT 3
52957: ARRAY
52958: GREATEREQUAL
52959: AND
52960: NOT
52961: IFFALSE 52965
// exit ;
52963: GO 53552
// if GetBType ( depot ) = b_depot then
52965: LD_VAR 0 1
52969: PPUSH
52970: CALL_OW 266
52974: PUSH
52975: LD_INT 0
52977: EQUAL
52978: IFFALSE 52990
// dist := 28 else
52980: LD_ADDR_VAR 0 14
52984: PUSH
52985: LD_INT 28
52987: ST_TO_ADDR
52988: GO 52998
// dist := 36 ;
52990: LD_ADDR_VAR 0 14
52994: PUSH
52995: LD_INT 36
52997: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52998: LD_VAR 0 1
53002: PPUSH
53003: LD_VAR 0 3
53007: PPUSH
53008: LD_VAR 0 4
53012: PPUSH
53013: CALL_OW 297
53017: PUSH
53018: LD_VAR 0 14
53022: GREATER
53023: IFFALSE 53027
// exit ;
53025: GO 53552
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53027: LD_ADDR_VAR 0 12
53031: PUSH
53032: LD_VAR 0 2
53036: PPUSH
53037: LD_VAR 0 3
53041: PPUSH
53042: LD_VAR 0 4
53046: PPUSH
53047: LD_VAR 0 5
53051: PPUSH
53052: LD_VAR 0 1
53056: PPUSH
53057: CALL_OW 248
53061: PPUSH
53062: LD_INT 0
53064: PPUSH
53065: CALL 53557 0 6
53069: ST_TO_ADDR
// if not hexes then
53070: LD_VAR 0 12
53074: NOT
53075: IFFALSE 53079
// exit ;
53077: GO 53552
// hex := GetHexInfo ( x , y ) ;
53079: LD_ADDR_VAR 0 15
53083: PUSH
53084: LD_VAR 0 3
53088: PPUSH
53089: LD_VAR 0 4
53093: PPUSH
53094: CALL_OW 546
53098: ST_TO_ADDR
// if hex [ 1 ] then
53099: LD_VAR 0 15
53103: PUSH
53104: LD_INT 1
53106: ARRAY
53107: IFFALSE 53111
// exit ;
53109: GO 53552
// height := hex [ 2 ] ;
53111: LD_ADDR_VAR 0 13
53115: PUSH
53116: LD_VAR 0 15
53120: PUSH
53121: LD_INT 2
53123: ARRAY
53124: ST_TO_ADDR
// for i = 1 to hexes do
53125: LD_ADDR_VAR 0 7
53129: PUSH
53130: DOUBLE
53131: LD_INT 1
53133: DEC
53134: ST_TO_ADDR
53135: LD_VAR 0 12
53139: PUSH
53140: FOR_TO
53141: IFFALSE 53471
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53143: LD_VAR 0 12
53147: PUSH
53148: LD_VAR 0 7
53152: ARRAY
53153: PUSH
53154: LD_INT 1
53156: ARRAY
53157: PPUSH
53158: LD_VAR 0 12
53162: PUSH
53163: LD_VAR 0 7
53167: ARRAY
53168: PUSH
53169: LD_INT 2
53171: ARRAY
53172: PPUSH
53173: CALL_OW 488
53177: NOT
53178: PUSH
53179: LD_VAR 0 12
53183: PUSH
53184: LD_VAR 0 7
53188: ARRAY
53189: PUSH
53190: LD_INT 1
53192: ARRAY
53193: PPUSH
53194: LD_VAR 0 12
53198: PUSH
53199: LD_VAR 0 7
53203: ARRAY
53204: PUSH
53205: LD_INT 2
53207: ARRAY
53208: PPUSH
53209: CALL_OW 428
53213: PUSH
53214: LD_INT 0
53216: GREATER
53217: OR
53218: PUSH
53219: LD_VAR 0 12
53223: PUSH
53224: LD_VAR 0 7
53228: ARRAY
53229: PUSH
53230: LD_INT 1
53232: ARRAY
53233: PPUSH
53234: LD_VAR 0 12
53238: PUSH
53239: LD_VAR 0 7
53243: ARRAY
53244: PUSH
53245: LD_INT 2
53247: ARRAY
53248: PPUSH
53249: CALL_OW 351
53253: OR
53254: IFFALSE 53260
// exit ;
53256: POP
53257: POP
53258: GO 53552
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53260: LD_ADDR_VAR 0 8
53264: PUSH
53265: LD_VAR 0 12
53269: PUSH
53270: LD_VAR 0 7
53274: ARRAY
53275: PUSH
53276: LD_INT 1
53278: ARRAY
53279: PPUSH
53280: LD_VAR 0 12
53284: PUSH
53285: LD_VAR 0 7
53289: ARRAY
53290: PUSH
53291: LD_INT 2
53293: ARRAY
53294: PPUSH
53295: CALL_OW 546
53299: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53300: LD_VAR 0 8
53304: PUSH
53305: LD_INT 1
53307: ARRAY
53308: PUSH
53309: LD_VAR 0 8
53313: PUSH
53314: LD_INT 2
53316: ARRAY
53317: PUSH
53318: LD_VAR 0 13
53322: PUSH
53323: LD_INT 2
53325: PLUS
53326: GREATER
53327: OR
53328: PUSH
53329: LD_VAR 0 8
53333: PUSH
53334: LD_INT 2
53336: ARRAY
53337: PUSH
53338: LD_VAR 0 13
53342: PUSH
53343: LD_INT 2
53345: MINUS
53346: LESS
53347: OR
53348: PUSH
53349: LD_VAR 0 8
53353: PUSH
53354: LD_INT 3
53356: ARRAY
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 8
53363: PUSH
53364: LD_INT 9
53366: PUSH
53367: LD_INT 10
53369: PUSH
53370: LD_INT 11
53372: PUSH
53373: LD_INT 12
53375: PUSH
53376: LD_INT 13
53378: PUSH
53379: LD_INT 16
53381: PUSH
53382: LD_INT 17
53384: PUSH
53385: LD_INT 18
53387: PUSH
53388: LD_INT 19
53390: PUSH
53391: LD_INT 20
53393: PUSH
53394: LD_INT 21
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: IN
53412: NOT
53413: OR
53414: PUSH
53415: LD_VAR 0 8
53419: PUSH
53420: LD_INT 5
53422: ARRAY
53423: NOT
53424: OR
53425: PUSH
53426: LD_VAR 0 8
53430: PUSH
53431: LD_INT 6
53433: ARRAY
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 7
53443: PUSH
53444: LD_INT 9
53446: PUSH
53447: LD_INT 10
53449: PUSH
53450: LD_INT 11
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: IN
53461: NOT
53462: OR
53463: IFFALSE 53469
// exit ;
53465: POP
53466: POP
53467: GO 53552
// end ;
53469: GO 53140
53471: POP
53472: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53473: LD_VAR 0 9
53477: PPUSH
53478: LD_VAR 0 3
53482: PPUSH
53483: LD_VAR 0 4
53487: PPUSH
53488: LD_INT 20
53490: PPUSH
53491: CALL 45504 0 4
53495: PUSH
53496: LD_INT 4
53498: ARRAY
53499: IFFALSE 53503
// exit ;
53501: GO 53552
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53503: LD_VAR 0 2
53507: PUSH
53508: LD_INT 29
53510: PUSH
53511: LD_INT 30
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: IN
53518: PUSH
53519: LD_VAR 0 3
53523: PPUSH
53524: LD_VAR 0 4
53528: PPUSH
53529: LD_VAR 0 9
53533: PPUSH
53534: CALL_OW 440
53538: NOT
53539: AND
53540: IFFALSE 53544
// exit ;
53542: GO 53552
// result := true ;
53544: LD_ADDR_VAR 0 6
53548: PUSH
53549: LD_INT 1
53551: ST_TO_ADDR
// end ;
53552: LD_VAR 0 6
53556: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53557: LD_INT 0
53559: PPUSH
53560: PPUSH
53561: PPUSH
53562: PPUSH
53563: PPUSH
53564: PPUSH
53565: PPUSH
53566: PPUSH
53567: PPUSH
53568: PPUSH
53569: PPUSH
53570: PPUSH
53571: PPUSH
53572: PPUSH
53573: PPUSH
53574: PPUSH
53575: PPUSH
53576: PPUSH
53577: PPUSH
53578: PPUSH
53579: PPUSH
53580: PPUSH
53581: PPUSH
53582: PPUSH
53583: PPUSH
53584: PPUSH
53585: PPUSH
53586: PPUSH
53587: PPUSH
53588: PPUSH
53589: PPUSH
53590: PPUSH
53591: PPUSH
53592: PPUSH
53593: PPUSH
53594: PPUSH
53595: PPUSH
53596: PPUSH
53597: PPUSH
53598: PPUSH
53599: PPUSH
53600: PPUSH
53601: PPUSH
53602: PPUSH
53603: PPUSH
53604: PPUSH
53605: PPUSH
53606: PPUSH
53607: PPUSH
53608: PPUSH
53609: PPUSH
53610: PPUSH
53611: PPUSH
53612: PPUSH
53613: PPUSH
53614: PPUSH
53615: PPUSH
53616: PPUSH
// result = [ ] ;
53617: LD_ADDR_VAR 0 7
53621: PUSH
53622: EMPTY
53623: ST_TO_ADDR
// temp_list = [ ] ;
53624: LD_ADDR_VAR 0 9
53628: PUSH
53629: EMPTY
53630: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53631: LD_VAR 0 4
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: LD_INT 3
53647: PUSH
53648: LD_INT 4
53650: PUSH
53651: LD_INT 5
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: IN
53662: NOT
53663: PUSH
53664: LD_VAR 0 1
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: IN
53679: PUSH
53680: LD_VAR 0 5
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: LIST
53698: IN
53699: NOT
53700: AND
53701: OR
53702: IFFALSE 53706
// exit ;
53704: GO 72097
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53706: LD_VAR 0 1
53710: PUSH
53711: LD_INT 6
53713: PUSH
53714: LD_INT 7
53716: PUSH
53717: LD_INT 8
53719: PUSH
53720: LD_INT 13
53722: PUSH
53723: LD_INT 12
53725: PUSH
53726: LD_INT 15
53728: PUSH
53729: LD_INT 11
53731: PUSH
53732: LD_INT 14
53734: PUSH
53735: LD_INT 10
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: IN
53749: IFFALSE 53759
// btype = b_lab ;
53751: LD_ADDR_VAR 0 1
53755: PUSH
53756: LD_INT 6
53758: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53759: LD_VAR 0 6
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: IN
53778: NOT
53779: PUSH
53780: LD_VAR 0 1
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: LD_INT 3
53796: PUSH
53797: LD_INT 6
53799: PUSH
53800: LD_INT 36
53802: PUSH
53803: LD_INT 4
53805: PUSH
53806: LD_INT 5
53808: PUSH
53809: LD_INT 31
53811: PUSH
53812: LD_INT 32
53814: PUSH
53815: LD_INT 33
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: IN
53831: NOT
53832: PUSH
53833: LD_VAR 0 6
53837: PUSH
53838: LD_INT 1
53840: EQUAL
53841: AND
53842: OR
53843: PUSH
53844: LD_VAR 0 1
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: IN
53859: NOT
53860: PUSH
53861: LD_VAR 0 6
53865: PUSH
53866: LD_INT 2
53868: EQUAL
53869: AND
53870: OR
53871: IFFALSE 53881
// mode = 0 ;
53873: LD_ADDR_VAR 0 6
53877: PUSH
53878: LD_INT 0
53880: ST_TO_ADDR
// case mode of 0 :
53881: LD_VAR 0 6
53885: PUSH
53886: LD_INT 0
53888: DOUBLE
53889: EQUAL
53890: IFTRUE 53894
53892: GO 65347
53894: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53895: LD_ADDR_VAR 0 11
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 3
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 3
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54088: LD_ADDR_VAR 0 12
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 2
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 3
54245: NEG
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 3
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54284: LD_ADDR_VAR 0 13
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: LD_INT 3
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: NEG
54456: PUSH
54457: LD_INT 3
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54483: LD_ADDR_VAR 0 14
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 3
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54679: LD_ADDR_VAR 0 15
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54872: LD_ADDR_VAR 0 16
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 3
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 3
55029: PUSH
55030: LD_INT 3
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: LD_INT 3
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55065: LD_ADDR_VAR 0 17
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: LD_INT 2
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55295: LD_ADDR_VAR 0 18
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 2
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: NEG
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55525: LD_ADDR_VAR 0 19
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55755: LD_ADDR_VAR 0 20
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: LD_INT 2
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: LD_INT 2
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55985: LD_ADDR_VAR 0 21
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 2
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: LD_INT 2
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56215: LD_ADDR_VAR 0 22
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: LD_INT 2
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: LD_INT 2
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56445: LD_ADDR_VAR 0 23
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 2
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 2
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: NEG
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: LD_INT 3
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56725: LD_ADDR_VAR 0 24
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: NEG
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 3
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57001: LD_ADDR_VAR 0 25
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: LD_INT 2
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: NEG
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 3
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57275: LD_ADDR_VAR 0 26
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: LD_INT 2
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: LD_INT 3
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: NEG
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57551: LD_ADDR_VAR 0 27
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 3
57796: NEG
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57831: LD_ADDR_VAR 0 28
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 2
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: NEG
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: NEG
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: LD_INT 2
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 2
58042: NEG
58043: PUSH
58044: LD_INT 3
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: LD_INT 3
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 3
58078: NEG
58079: PUSH
58080: LD_INT 2
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58113: LD_ADDR_VAR 0 29
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: LD_INT 3
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 3
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: LD_INT 3
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 3
58357: NEG
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58392: LD_ADDR_VAR 0 30
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 2
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 2
58558: NEG
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 3
58635: NEG
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58670: LD_ADDR_VAR 0 31
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: LD_INT 2
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: NEG
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: LD_INT 3
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58948: LD_ADDR_VAR 0 32
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 1
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: LD_INT 2
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: LD_INT 2
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 2
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 2
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: LD_INT 3
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: LD_INT 3
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 3
59191: NEG
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59226: LD_ADDR_VAR 0 33
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 2
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: LD_INT 2
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: LD_INT 3
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 3
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: LD_INT 3
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 2
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 3
59470: NEG
59471: PUSH
59472: LD_INT 2
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59505: LD_ADDR_VAR 0 34
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 1
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: LD_INT 2
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 2
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 2
59661: NEG
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 2
59672: NEG
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: LD_INT 3
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 3
59719: PUSH
59720: LD_INT 2
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: PUSH
59730: LD_INT 3
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 3
59750: NEG
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59785: LD_ADDR_VAR 0 35
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59897: LD_ADDR_VAR 0 36
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60009: LD_ADDR_VAR 0 37
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60121: LD_ADDR_VAR 0 38
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60233: LD_ADDR_VAR 0 39
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 1
60291: NEG
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: LD_INT 2
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60345: LD_ADDR_VAR 0 40
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: NEG
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: LD_INT 1
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60457: LD_ADDR_VAR 0 41
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: NEG
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 3
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 3
60690: PUSH
60691: LD_INT 2
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 3
60700: PUSH
60701: LD_INT 3
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 2
60720: NEG
60721: PUSH
60722: LD_INT 1
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 3
60731: NEG
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 3
60742: NEG
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 3
60754: NEG
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: NEG
60767: PUSH
60768: LD_INT 3
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60807: LD_ADDR_VAR 0 42
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 2
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: LD_INT 2
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: NEG
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: LD_INT 2
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: LD_INT 3
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: LD_INT 3
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 3
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 2
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 3
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 3
61053: PUSH
61054: LD_INT 3
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 2
61063: PUSH
61064: LD_INT 3
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: LD_INT 3
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: LD_INT 3
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 3
61104: NEG
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 3
61116: NEG
61117: PUSH
61118: LD_INT 3
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61157: LD_ADDR_VAR 0 43
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 2
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 2
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 2
61334: NEG
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 3
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: LD_INT 3
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 2
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 2
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 3
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 3
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: LD_INT 3
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: LD_INT 3
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: NEG
61432: PUSH
61433: LD_INT 2
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: NEG
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 3
61464: NEG
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61505: LD_ADDR_VAR 0 44
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: LD_INT 1
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: LD_INT 2
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 2
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 2
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: LD_INT 2
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: NEG
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 2
61683: NEG
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: NEG
61696: PUSH
61697: LD_INT 3
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 2
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 3
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 3
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 3
61738: PUSH
61739: LD_INT 2
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 3
61748: PUSH
61749: LD_INT 3
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 2
61758: PUSH
61759: LD_INT 3
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 2
61768: NEG
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 3
61779: NEG
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 3
61790: NEG
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 3
61802: NEG
61803: PUSH
61804: LD_INT 2
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 3
61814: NEG
61815: PUSH
61816: LD_INT 3
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61855: LD_ADDR_VAR 0 45
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: LD_INT 2
61940: NEG
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: LD_INT 2
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: LD_INT 2
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: LD_INT 2
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: NEG
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: LD_INT 2
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: NEG
62058: PUSH
62059: LD_INT 3
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: LD_INT 3
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: LD_INT 2
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 3
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 3
62101: PUSH
62102: LD_INT 3
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: LD_INT 3
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: PUSH
62122: LD_INT 3
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: LD_INT 3
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: LD_INT 2
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 3
62152: NEG
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 3
62164: NEG
62165: PUSH
62166: LD_INT 3
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62205: LD_ADDR_VAR 0 46
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: LD_INT 2
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 2
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: LD_INT 2
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: LD_INT 2
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: NEG
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 2
62382: NEG
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: LD_INT 3
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: LD_INT 3
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: LD_INT 2
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 2
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 3
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 3
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: LD_INT 3
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: LD_INT 3
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: NEG
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 3
62501: NEG
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 3
62512: NEG
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62553: LD_ADDR_VAR 0 47
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: LD_INT 2
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 0
62646: PUSH
62647: LD_INT 2
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 2
62668: NEG
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 2
62680: NEG
62681: PUSH
62682: LD_INT 2
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62704: LD_ADDR_VAR 0 48
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 1
62785: NEG
62786: PUSH
62787: LD_INT 2
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: LD_INT 2
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 2
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62851: LD_ADDR_VAR 0 49
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: LD_INT 1
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 2
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: LD_INT 2
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62995: LD_ADDR_VAR 0 50
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 2
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 2
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: LD_INT 2
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 2
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63139: LD_ADDR_VAR 0 51
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: NEG
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 1
63208: NEG
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 2
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 2
63251: NEG
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 2
63262: NEG
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63286: LD_ADDR_VAR 0 52
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: LD_INT 1
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 1
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: LD_INT 1
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 1
63344: NEG
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: LD_INT 2
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: NEG
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 2
63390: NEG
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 2
63401: NEG
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 2
63413: NEG
63414: PUSH
63415: LD_INT 2
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63437: LD_ADDR_VAR 0 53
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 1
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 1
63495: NEG
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 1
63518: NEG
63519: PUSH
63520: LD_INT 2
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 2
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 2
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: LD_INT 2
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 2
63613: NEG
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 2
63624: NEG
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 2
63636: NEG
63637: PUSH
63638: LD_INT 2
63640: NEG
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63667: LD_ADDR_VAR 0 54
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: LD_INT 1
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: NEG
63749: PUSH
63750: LD_INT 2
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: LD_INT 2
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: LD_INT 1
63774: NEG
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 2
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: LD_INT 2
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 0
63822: PUSH
63823: LD_INT 2
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: NEG
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 2
63854: NEG
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: LD_INT 2
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63897: LD_ADDR_VAR 0 55
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: LD_INT 1
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 1
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: LD_INT 1
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: NEG
63967: PUSH
63968: LD_INT 1
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: LD_INT 2
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: LD_INT 2
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: LD_INT 1
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: LD_INT 0
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 2
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 2
64032: PUSH
64033: LD_INT 2
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: LD_INT 2
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: LD_INT 2
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 2
64073: NEG
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 2
64084: NEG
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 2
64096: NEG
64097: PUSH
64098: LD_INT 2
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64127: LD_ADDR_VAR 0 56
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: LD_INT 1
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: LD_INT 1
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: LD_INT 1
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 1
64196: NEG
64197: PUSH
64198: LD_INT 1
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 1
64208: NEG
64209: PUSH
64210: LD_INT 2
64212: NEG
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: LD_INT 2
64223: NEG
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 2
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 2
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 2
64262: PUSH
64263: LD_INT 2
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: LD_INT 2
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: LD_INT 2
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 2
64303: NEG
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 2
64314: NEG
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 2
64326: NEG
64327: PUSH
64328: LD_INT 2
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64357: LD_ADDR_VAR 0 57
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: LD_INT 1
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: LD_INT 2
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 2
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 2
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 2
64492: PUSH
64493: LD_INT 2
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: LD_INT 2
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 1
64522: NEG
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 2
64533: NEG
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 2
64544: NEG
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 2
64556: NEG
64557: PUSH
64558: LD_INT 2
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64587: LD_ADDR_VAR 0 58
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: LD_INT 1
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: LD_INT 1
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 1
64656: NEG
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: LD_INT 2
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: LD_INT 2
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 2
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 2
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 2
64722: PUSH
64723: LD_INT 2
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: LD_INT 2
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: LD_INT 2
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: NEG
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 2
64763: NEG
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 2
64774: NEG
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 2
64786: NEG
64787: PUSH
64788: LD_INT 2
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64817: LD_ADDR_VAR 0 59
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 1
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 1
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 1
64886: NEG
64887: PUSH
64888: LD_INT 1
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64905: LD_ADDR_VAR 0 60
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: LD_INT 0
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 1
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: LD_INT 1
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 1
64963: NEG
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 1
64974: NEG
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64993: LD_ADDR_VAR 0 61
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: NEG
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65081: LD_ADDR_VAR 0 62
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: LD_INT 1
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 1
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: LD_INT 0
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: LD_INT 1
65154: NEG
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65169: LD_ADDR_VAR 0 63
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: LD_INT 1
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 1
65197: PUSH
65198: LD_INT 0
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 1
65207: PUSH
65208: LD_INT 1
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: LD_INT 1
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 1
65227: NEG
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: PUSH
65240: LD_INT 1
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65257: LD_ADDR_VAR 0 64
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: LD_INT 1
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: LD_INT 1
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: NEG
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: ST_TO_ADDR
// end ; 1 :
65345: GO 71242
65347: LD_INT 1
65349: DOUBLE
65350: EQUAL
65351: IFTRUE 65355
65353: GO 67978
65355: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65356: LD_ADDR_VAR 0 11
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: PUSH
65365: LD_INT 3
65367: NEG
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: LD_INT 3
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 1
65386: PUSH
65387: LD_INT 2
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: LIST
65399: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65400: LD_ADDR_VAR 0 12
65404: PUSH
65405: LD_INT 2
65407: PUSH
65408: LD_INT 1
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 3
65418: PUSH
65419: LD_INT 0
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 3
65428: PUSH
65429: LD_INT 1
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: LIST
65440: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65441: LD_ADDR_VAR 0 13
65445: PUSH
65446: LD_INT 3
65448: PUSH
65449: LD_INT 2
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 3
65458: PUSH
65459: LD_INT 3
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 2
65468: PUSH
65469: LD_INT 3
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: LIST
65480: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65481: LD_ADDR_VAR 0 14
65485: PUSH
65486: LD_INT 1
65488: PUSH
65489: LD_INT 3
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 0
65498: PUSH
65499: LD_INT 3
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 1
65508: NEG
65509: PUSH
65510: LD_INT 2
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: LIST
65521: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65522: LD_ADDR_VAR 0 15
65526: PUSH
65527: LD_INT 2
65529: NEG
65530: PUSH
65531: LD_INT 1
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 3
65540: NEG
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 3
65551: NEG
65552: PUSH
65553: LD_INT 1
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: LIST
65565: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65566: LD_ADDR_VAR 0 16
65570: PUSH
65571: LD_INT 2
65573: NEG
65574: PUSH
65575: LD_INT 3
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 3
65585: NEG
65586: PUSH
65587: LD_INT 2
65589: NEG
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 3
65597: NEG
65598: PUSH
65599: LD_INT 3
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65612: LD_ADDR_VAR 0 17
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: LD_INT 3
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 0
65631: PUSH
65632: LD_INT 3
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 1
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: LIST
65655: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65656: LD_ADDR_VAR 0 18
65660: PUSH
65661: LD_INT 2
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 3
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 3
65684: PUSH
65685: LD_INT 1
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: LIST
65696: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65697: LD_ADDR_VAR 0 19
65701: PUSH
65702: LD_INT 3
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 3
65714: PUSH
65715: LD_INT 3
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 2
65724: PUSH
65725: LD_INT 3
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65737: LD_ADDR_VAR 0 20
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: LD_INT 3
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 0
65754: PUSH
65755: LD_INT 3
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 1
65764: NEG
65765: PUSH
65766: LD_INT 2
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: LIST
65777: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65778: LD_ADDR_VAR 0 21
65782: PUSH
65783: LD_INT 2
65785: NEG
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 3
65796: NEG
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 3
65807: NEG
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: LIST
65821: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65822: LD_ADDR_VAR 0 22
65826: PUSH
65827: LD_INT 2
65829: NEG
65830: PUSH
65831: LD_INT 3
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 3
65841: NEG
65842: PUSH
65843: LD_INT 2
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 3
65853: NEG
65854: PUSH
65855: LD_INT 3
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: LIST
65867: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65868: LD_ADDR_VAR 0 23
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: LD_INT 3
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 1
65886: NEG
65887: PUSH
65888: LD_INT 4
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: LD_INT 3
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: LIST
65911: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65912: LD_ADDR_VAR 0 24
65916: PUSH
65917: LD_INT 3
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 3
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 4
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: LIST
65952: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65953: LD_ADDR_VAR 0 25
65957: PUSH
65958: LD_INT 3
65960: PUSH
65961: LD_INT 3
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 4
65970: PUSH
65971: LD_INT 3
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 3
65980: PUSH
65981: LD_INT 4
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: LIST
65992: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65993: LD_ADDR_VAR 0 26
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: LD_INT 3
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: LD_INT 4
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: LD_INT 3
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: LIST
66033: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66034: LD_ADDR_VAR 0 27
66038: PUSH
66039: LD_INT 3
66041: NEG
66042: PUSH
66043: LD_INT 0
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 3
66052: NEG
66053: PUSH
66054: LD_INT 1
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 4
66063: NEG
66064: PUSH
66065: LD_INT 1
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: LIST
66077: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66078: LD_ADDR_VAR 0 28
66082: PUSH
66083: LD_INT 3
66085: NEG
66086: PUSH
66087: LD_INT 3
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 3
66097: NEG
66098: PUSH
66099: LD_INT 4
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 4
66109: NEG
66110: PUSH
66111: LD_INT 3
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66124: LD_ADDR_VAR 0 29
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: LD_INT 3
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 3
66146: NEG
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: LD_INT 2
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: NEG
66166: PUSH
66167: LD_INT 4
66169: NEG
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: LD_INT 4
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 1
66188: PUSH
66189: LD_INT 3
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 1
66199: NEG
66200: PUSH
66201: LD_INT 5
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 5
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: PUSH
66223: LD_INT 4
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: NEG
66234: PUSH
66235: LD_INT 6
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: LD_INT 6
66248: NEG
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: LD_INT 5
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66279: LD_ADDR_VAR 0 30
66283: PUSH
66284: LD_INT 2
66286: PUSH
66287: LD_INT 1
66289: NEG
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 3
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 3
66307: PUSH
66308: LD_INT 1
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 3
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 4
66328: PUSH
66329: LD_INT 0
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 4
66338: PUSH
66339: LD_INT 1
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 4
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 5
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 5
66369: PUSH
66370: LD_INT 1
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 5
66379: PUSH
66380: LD_INT 1
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 6
66390: PUSH
66391: LD_INT 0
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 6
66400: PUSH
66401: LD_INT 1
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66422: LD_ADDR_VAR 0 31
66426: PUSH
66427: LD_INT 3
66429: PUSH
66430: LD_INT 2
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 3
66439: PUSH
66440: LD_INT 3
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 2
66449: PUSH
66450: LD_INT 3
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 4
66459: PUSH
66460: LD_INT 3
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 4
66469: PUSH
66470: LD_INT 4
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 3
66479: PUSH
66480: LD_INT 4
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 5
66489: PUSH
66490: LD_INT 4
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 5
66499: PUSH
66500: LD_INT 5
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 4
66509: PUSH
66510: LD_INT 5
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 6
66519: PUSH
66520: LD_INT 5
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 6
66529: PUSH
66530: LD_INT 6
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 5
66539: PUSH
66540: LD_INT 6
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66561: LD_ADDR_VAR 0 32
66565: PUSH
66566: LD_INT 1
66568: PUSH
66569: LD_INT 3
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: LD_INT 3
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 1
66588: NEG
66589: PUSH
66590: LD_INT 2
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: LD_INT 4
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: LD_INT 4
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 1
66619: NEG
66620: PUSH
66621: LD_INT 3
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 1
66630: PUSH
66631: LD_INT 5
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: LD_INT 5
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 1
66650: NEG
66651: PUSH
66652: LD_INT 4
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: LD_INT 6
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: LD_INT 6
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: NEG
66682: PUSH
66683: LD_INT 5
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66704: LD_ADDR_VAR 0 33
66708: PUSH
66709: LD_INT 2
66711: NEG
66712: PUSH
66713: LD_INT 1
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 3
66722: NEG
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 3
66733: NEG
66734: PUSH
66735: LD_INT 1
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 3
66745: NEG
66746: PUSH
66747: LD_INT 1
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 4
66756: NEG
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 4
66767: NEG
66768: PUSH
66769: LD_INT 1
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 4
66779: NEG
66780: PUSH
66781: LD_INT 1
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 5
66790: NEG
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 5
66801: NEG
66802: PUSH
66803: LD_INT 1
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 5
66813: NEG
66814: PUSH
66815: LD_INT 1
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 6
66824: NEG
66825: PUSH
66826: LD_INT 0
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 6
66835: NEG
66836: PUSH
66837: LD_INT 1
66839: NEG
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66859: LD_ADDR_VAR 0 34
66863: PUSH
66864: LD_INT 2
66866: NEG
66867: PUSH
66868: LD_INT 3
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: NEG
66879: PUSH
66880: LD_INT 2
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 3
66890: NEG
66891: PUSH
66892: LD_INT 3
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 3
66902: NEG
66903: PUSH
66904: LD_INT 4
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 4
66914: NEG
66915: PUSH
66916: LD_INT 3
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 4
66926: NEG
66927: PUSH
66928: LD_INT 4
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 4
66938: NEG
66939: PUSH
66940: LD_INT 5
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 5
66950: NEG
66951: PUSH
66952: LD_INT 4
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 5
66962: NEG
66963: PUSH
66964: LD_INT 5
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 5
66974: NEG
66975: PUSH
66976: LD_INT 6
66978: NEG
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 6
66986: NEG
66987: PUSH
66988: LD_INT 5
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 6
66998: NEG
66999: PUSH
67000: LD_INT 6
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67022: LD_ADDR_VAR 0 41
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: LD_INT 2
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: LD_INT 3
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: LD_INT 2
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: LIST
67065: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67066: LD_ADDR_VAR 0 42
67070: PUSH
67071: LD_INT 2
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 2
67083: PUSH
67084: LD_INT 1
67086: NEG
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 3
67094: PUSH
67095: LD_INT 1
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: LIST
67106: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67107: LD_ADDR_VAR 0 43
67111: PUSH
67112: LD_INT 2
67114: PUSH
67115: LD_INT 2
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 3
67124: PUSH
67125: LD_INT 2
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 2
67134: PUSH
67135: LD_INT 3
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: LIST
67146: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67147: LD_ADDR_VAR 0 44
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: LD_INT 3
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 1
67174: NEG
67175: PUSH
67176: LD_INT 2
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: LIST
67187: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67188: LD_ADDR_VAR 0 45
67192: PUSH
67193: LD_INT 2
67195: NEG
67196: PUSH
67197: LD_INT 0
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 2
67206: NEG
67207: PUSH
67208: LD_INT 1
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 3
67217: NEG
67218: PUSH
67219: LD_INT 1
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: LIST
67231: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67232: LD_ADDR_VAR 0 46
67236: PUSH
67237: LD_INT 2
67239: NEG
67240: PUSH
67241: LD_INT 2
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 2
67251: NEG
67252: PUSH
67253: LD_INT 3
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 3
67263: NEG
67264: PUSH
67265: LD_INT 2
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: LIST
67277: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67278: LD_ADDR_VAR 0 47
67282: PUSH
67283: LD_INT 2
67285: NEG
67286: PUSH
67287: LD_INT 3
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 1
67297: NEG
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67311: LD_ADDR_VAR 0 48
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: LD_INT 2
67321: NEG
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 2
67329: PUSH
67330: LD_INT 1
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67342: LD_ADDR_VAR 0 49
67346: PUSH
67347: LD_INT 3
67349: PUSH
67350: LD_INT 1
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 3
67359: PUSH
67360: LD_INT 2
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67371: LD_ADDR_VAR 0 50
67375: PUSH
67376: LD_INT 2
67378: PUSH
67379: LD_INT 3
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 1
67388: PUSH
67389: LD_INT 3
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67400: LD_ADDR_VAR 0 51
67404: PUSH
67405: LD_INT 1
67407: NEG
67408: PUSH
67409: LD_INT 2
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 2
67418: NEG
67419: PUSH
67420: LD_INT 1
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67431: LD_ADDR_VAR 0 52
67435: PUSH
67436: LD_INT 3
67438: NEG
67439: PUSH
67440: LD_INT 1
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 3
67450: NEG
67451: PUSH
67452: LD_INT 2
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67464: LD_ADDR_VAR 0 53
67468: PUSH
67469: LD_INT 1
67471: NEG
67472: PUSH
67473: LD_INT 3
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 0
67483: PUSH
67484: LD_INT 3
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 1
67494: PUSH
67495: LD_INT 2
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: LIST
67507: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67508: LD_ADDR_VAR 0 54
67512: PUSH
67513: LD_INT 2
67515: PUSH
67516: LD_INT 1
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 3
67526: PUSH
67527: LD_INT 0
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 3
67536: PUSH
67537: LD_INT 1
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: LIST
67548: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67549: LD_ADDR_VAR 0 55
67553: PUSH
67554: LD_INT 3
67556: PUSH
67557: LD_INT 2
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 3
67566: PUSH
67567: LD_INT 3
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 2
67576: PUSH
67577: LD_INT 3
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: LIST
67588: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67589: LD_ADDR_VAR 0 56
67593: PUSH
67594: LD_INT 1
67596: PUSH
67597: LD_INT 3
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 0
67606: PUSH
67607: LD_INT 3
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: LD_INT 2
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: LIST
67629: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67630: LD_ADDR_VAR 0 57
67634: PUSH
67635: LD_INT 2
67637: NEG
67638: PUSH
67639: LD_INT 1
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 3
67648: NEG
67649: PUSH
67650: LD_INT 0
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 3
67659: NEG
67660: PUSH
67661: LD_INT 1
67663: NEG
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: LIST
67673: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67674: LD_ADDR_VAR 0 58
67678: PUSH
67679: LD_INT 2
67681: NEG
67682: PUSH
67683: LD_INT 3
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 3
67693: NEG
67694: PUSH
67695: LD_INT 2
67697: NEG
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 3
67705: NEG
67706: PUSH
67707: LD_INT 3
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: LIST
67719: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67720: LD_ADDR_VAR 0 59
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: LD_INT 2
67731: NEG
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 0
67739: PUSH
67740: LD_INT 2
67742: NEG
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 1
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: LIST
67763: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67764: LD_ADDR_VAR 0 60
67768: PUSH
67769: LD_INT 1
67771: PUSH
67772: LD_INT 1
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 2
67782: PUSH
67783: LD_INT 0
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 2
67792: PUSH
67793: LD_INT 1
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: LIST
67804: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67805: LD_ADDR_VAR 0 61
67809: PUSH
67810: LD_INT 2
67812: PUSH
67813: LD_INT 1
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 2
67822: PUSH
67823: LD_INT 2
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 1
67832: PUSH
67833: LD_INT 2
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: LIST
67844: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67845: LD_ADDR_VAR 0 62
67849: PUSH
67850: LD_INT 1
67852: PUSH
67853: LD_INT 2
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 0
67862: PUSH
67863: LD_INT 2
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 1
67872: NEG
67873: PUSH
67874: LD_INT 1
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: LIST
67885: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67886: LD_ADDR_VAR 0 63
67890: PUSH
67891: LD_INT 1
67893: NEG
67894: PUSH
67895: LD_INT 1
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 2
67904: NEG
67905: PUSH
67906: LD_INT 0
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 2
67915: NEG
67916: PUSH
67917: LD_INT 1
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: LIST
67929: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67930: LD_ADDR_VAR 0 64
67934: PUSH
67935: LD_INT 1
67937: NEG
67938: PUSH
67939: LD_INT 2
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 2
67949: NEG
67950: PUSH
67951: LD_INT 1
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 2
67961: NEG
67962: PUSH
67963: LD_INT 2
67965: NEG
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: LIST
67975: ST_TO_ADDR
// end ; 2 :
67976: GO 71242
67978: LD_INT 2
67980: DOUBLE
67981: EQUAL
67982: IFTRUE 67986
67984: GO 71241
67986: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67987: LD_ADDR_VAR 0 29
67991: PUSH
67992: LD_INT 4
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 4
68004: PUSH
68005: LD_INT 1
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 5
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 5
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 4
68035: PUSH
68036: LD_INT 1
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 3
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 3
68055: PUSH
68056: LD_INT 1
68058: NEG
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 3
68066: PUSH
68067: LD_INT 2
68069: NEG
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 5
68077: PUSH
68078: LD_INT 2
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 3
68087: PUSH
68088: LD_INT 3
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 3
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 4
68107: PUSH
68108: LD_INT 3
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 4
68117: PUSH
68118: LD_INT 4
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 3
68127: PUSH
68128: LD_INT 4
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 2
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 2
68147: PUSH
68148: LD_INT 2
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 4
68157: PUSH
68158: LD_INT 2
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: LD_INT 4
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: LD_INT 4
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 0
68187: PUSH
68188: LD_INT 3
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 1
68197: PUSH
68198: LD_INT 4
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 1
68207: PUSH
68208: LD_INT 5
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 0
68217: PUSH
68218: LD_INT 5
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 1
68227: NEG
68228: PUSH
68229: LD_INT 4
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 1
68238: NEG
68239: PUSH
68240: LD_INT 3
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 2
68249: PUSH
68250: LD_INT 5
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 2
68259: NEG
68260: PUSH
68261: LD_INT 3
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 3
68270: NEG
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 3
68281: NEG
68282: PUSH
68283: LD_INT 1
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 2
68293: NEG
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 2
68304: NEG
68305: PUSH
68306: LD_INT 1
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 3
68315: NEG
68316: PUSH
68317: LD_INT 1
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 4
68326: NEG
68327: PUSH
68328: LD_INT 0
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 4
68337: NEG
68338: PUSH
68339: LD_INT 1
68341: NEG
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 4
68349: NEG
68350: PUSH
68351: LD_INT 2
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 2
68361: NEG
68362: PUSH
68363: LD_INT 2
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 4
68372: NEG
68373: PUSH
68374: LD_INT 4
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 4
68384: NEG
68385: PUSH
68386: LD_INT 5
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 3
68396: NEG
68397: PUSH
68398: LD_INT 4
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 3
68408: NEG
68409: PUSH
68410: LD_INT 3
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 4
68420: NEG
68421: PUSH
68422: LD_INT 3
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 5
68432: NEG
68433: PUSH
68434: LD_INT 4
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 5
68444: NEG
68445: PUSH
68446: LD_INT 5
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 3
68456: NEG
68457: PUSH
68458: LD_INT 5
68460: NEG
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 5
68468: NEG
68469: PUSH
68470: LD_INT 3
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68525: LD_ADDR_VAR 0 30
68529: PUSH
68530: LD_INT 4
68532: PUSH
68533: LD_INT 4
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 4
68542: PUSH
68543: LD_INT 3
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 5
68552: PUSH
68553: LD_INT 4
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 5
68562: PUSH
68563: LD_INT 5
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 4
68572: PUSH
68573: LD_INT 5
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 3
68582: PUSH
68583: LD_INT 4
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 3
68592: PUSH
68593: LD_INT 3
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 5
68602: PUSH
68603: LD_INT 3
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 3
68612: PUSH
68613: LD_INT 5
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 0
68622: PUSH
68623: LD_INT 3
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 1
68642: PUSH
68643: LD_INT 3
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 1
68652: PUSH
68653: LD_INT 4
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: LD_INT 4
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 1
68672: NEG
68673: PUSH
68674: LD_INT 3
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 1
68683: NEG
68684: PUSH
68685: LD_INT 2
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 2
68694: PUSH
68695: LD_INT 4
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 2
68704: NEG
68705: PUSH
68706: LD_INT 2
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 4
68715: NEG
68716: PUSH
68717: LD_INT 0
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 4
68726: NEG
68727: PUSH
68728: LD_INT 1
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 3
68738: NEG
68739: PUSH
68740: LD_INT 0
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 3
68749: NEG
68750: PUSH
68751: LD_INT 1
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 4
68760: NEG
68761: PUSH
68762: LD_INT 1
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 5
68771: NEG
68772: PUSH
68773: LD_INT 0
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 5
68782: NEG
68783: PUSH
68784: LD_INT 1
68786: NEG
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 5
68794: NEG
68795: PUSH
68796: LD_INT 2
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 3
68806: NEG
68807: PUSH
68808: LD_INT 2
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 3
68817: NEG
68818: PUSH
68819: LD_INT 3
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 3
68829: NEG
68830: PUSH
68831: LD_INT 4
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 2
68841: NEG
68842: PUSH
68843: LD_INT 3
68845: NEG
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 2
68853: NEG
68854: PUSH
68855: LD_INT 2
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 3
68865: NEG
68866: PUSH
68867: LD_INT 2
68869: NEG
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 4
68877: NEG
68878: PUSH
68879: LD_INT 3
68881: NEG
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 4
68889: NEG
68890: PUSH
68891: LD_INT 4
68893: NEG
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 2
68901: NEG
68902: PUSH
68903: LD_INT 4
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 4
68913: NEG
68914: PUSH
68915: LD_INT 2
68917: NEG
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 0
68925: PUSH
68926: LD_INT 4
68928: NEG
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 0
68936: PUSH
68937: LD_INT 5
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 1
68947: PUSH
68948: LD_INT 4
68950: NEG
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 1
68958: PUSH
68959: LD_INT 3
68961: NEG
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 0
68969: PUSH
68970: LD_INT 3
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 1
68980: NEG
68981: PUSH
68982: LD_INT 4
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 1
68992: NEG
68993: PUSH
68994: LD_INT 5
68996: NEG
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 2
69004: PUSH
69005: LD_INT 3
69007: NEG
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 2
69015: NEG
69016: PUSH
69017: LD_INT 5
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69072: LD_ADDR_VAR 0 31
69076: PUSH
69077: LD_INT 0
69079: PUSH
69080: LD_INT 4
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 0
69089: PUSH
69090: LD_INT 3
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 1
69099: PUSH
69100: LD_INT 4
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 1
69109: PUSH
69110: LD_INT 5
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 0
69119: PUSH
69120: LD_INT 5
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 1
69129: NEG
69130: PUSH
69131: LD_INT 4
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 1
69140: NEG
69141: PUSH
69142: LD_INT 3
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 2
69151: PUSH
69152: LD_INT 5
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 2
69161: NEG
69162: PUSH
69163: LD_INT 3
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 3
69172: NEG
69173: PUSH
69174: LD_INT 0
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 3
69183: NEG
69184: PUSH
69185: LD_INT 1
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 2
69195: NEG
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 2
69206: NEG
69207: PUSH
69208: LD_INT 1
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 3
69217: NEG
69218: PUSH
69219: LD_INT 1
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 4
69228: NEG
69229: PUSH
69230: LD_INT 0
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 4
69239: NEG
69240: PUSH
69241: LD_INT 1
69243: NEG
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 4
69251: NEG
69252: PUSH
69253: LD_INT 2
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 2
69263: NEG
69264: PUSH
69265: LD_INT 2
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 4
69274: NEG
69275: PUSH
69276: LD_INT 4
69278: NEG
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 4
69286: NEG
69287: PUSH
69288: LD_INT 5
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 3
69298: NEG
69299: PUSH
69300: LD_INT 4
69302: NEG
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 3
69310: NEG
69311: PUSH
69312: LD_INT 3
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 4
69322: NEG
69323: PUSH
69324: LD_INT 3
69326: NEG
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 5
69334: NEG
69335: PUSH
69336: LD_INT 4
69338: NEG
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 5
69346: NEG
69347: PUSH
69348: LD_INT 5
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 3
69358: NEG
69359: PUSH
69360: LD_INT 5
69362: NEG
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 5
69370: NEG
69371: PUSH
69372: LD_INT 3
69374: NEG
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 0
69382: PUSH
69383: LD_INT 3
69385: NEG
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 0
69393: PUSH
69394: LD_INT 4
69396: NEG
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 1
69404: PUSH
69405: LD_INT 3
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 1
69415: PUSH
69416: LD_INT 2
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 0
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 1
69437: NEG
69438: PUSH
69439: LD_INT 3
69441: NEG
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 1
69449: NEG
69450: PUSH
69451: LD_INT 4
69453: NEG
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 2
69461: PUSH
69462: LD_INT 2
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 2
69472: NEG
69473: PUSH
69474: LD_INT 4
69476: NEG
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 4
69484: PUSH
69485: LD_INT 0
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 4
69494: PUSH
69495: LD_INT 1
69497: NEG
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 5
69505: PUSH
69506: LD_INT 0
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 5
69515: PUSH
69516: LD_INT 1
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 4
69525: PUSH
69526: LD_INT 1
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 3
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 3
69545: PUSH
69546: LD_INT 1
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 3
69556: PUSH
69557: LD_INT 2
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 5
69567: PUSH
69568: LD_INT 2
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69622: LD_ADDR_VAR 0 32
69626: PUSH
69627: LD_INT 4
69629: NEG
69630: PUSH
69631: LD_INT 0
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 4
69640: NEG
69641: PUSH
69642: LD_INT 1
69644: NEG
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 3
69652: NEG
69653: PUSH
69654: LD_INT 0
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 3
69663: NEG
69664: PUSH
69665: LD_INT 1
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 4
69674: NEG
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 5
69685: NEG
69686: PUSH
69687: LD_INT 0
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 5
69696: NEG
69697: PUSH
69698: LD_INT 1
69700: NEG
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 5
69708: NEG
69709: PUSH
69710: LD_INT 2
69712: NEG
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 3
69720: NEG
69721: PUSH
69722: LD_INT 2
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 3
69731: NEG
69732: PUSH
69733: LD_INT 3
69735: NEG
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 3
69743: NEG
69744: PUSH
69745: LD_INT 4
69747: NEG
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 2
69755: NEG
69756: PUSH
69757: LD_INT 3
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 2
69767: NEG
69768: PUSH
69769: LD_INT 2
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 3
69779: NEG
69780: PUSH
69781: LD_INT 2
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 4
69791: NEG
69792: PUSH
69793: LD_INT 3
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 4
69803: NEG
69804: PUSH
69805: LD_INT 4
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 2
69815: NEG
69816: PUSH
69817: LD_INT 4
69819: NEG
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 4
69827: NEG
69828: PUSH
69829: LD_INT 2
69831: NEG
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 0
69839: PUSH
69840: LD_INT 4
69842: NEG
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 0
69850: PUSH
69851: LD_INT 5
69853: NEG
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 1
69861: PUSH
69862: LD_INT 4
69864: NEG
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 1
69872: PUSH
69873: LD_INT 3
69875: NEG
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 0
69883: PUSH
69884: LD_INT 3
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 1
69894: NEG
69895: PUSH
69896: LD_INT 4
69898: NEG
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 1
69906: NEG
69907: PUSH
69908: LD_INT 5
69910: NEG
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 2
69918: PUSH
69919: LD_INT 3
69921: NEG
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 2
69929: NEG
69930: PUSH
69931: LD_INT 5
69933: NEG
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 3
69941: PUSH
69942: LD_INT 0
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 3
69951: PUSH
69952: LD_INT 1
69954: NEG
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 4
69962: PUSH
69963: LD_INT 0
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 4
69972: PUSH
69973: LD_INT 1
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 3
69982: PUSH
69983: LD_INT 1
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 2
69992: PUSH
69993: LD_INT 0
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 2
70002: PUSH
70003: LD_INT 1
70005: NEG
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 2
70013: PUSH
70014: LD_INT 2
70016: NEG
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 4
70024: PUSH
70025: LD_INT 2
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 4
70034: PUSH
70035: LD_INT 4
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 4
70044: PUSH
70045: LD_INT 3
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 5
70054: PUSH
70055: LD_INT 4
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 5
70064: PUSH
70065: LD_INT 5
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 4
70074: PUSH
70075: LD_INT 5
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 3
70084: PUSH
70085: LD_INT 4
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 3
70094: PUSH
70095: LD_INT 3
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 5
70104: PUSH
70105: LD_INT 3
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 3
70114: PUSH
70115: LD_INT 5
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70169: LD_ADDR_VAR 0 33
70173: PUSH
70174: LD_INT 4
70176: NEG
70177: PUSH
70178: LD_INT 4
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 4
70188: NEG
70189: PUSH
70190: LD_INT 5
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 3
70200: NEG
70201: PUSH
70202: LD_INT 4
70204: NEG
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 3
70212: NEG
70213: PUSH
70214: LD_INT 3
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 4
70224: NEG
70225: PUSH
70226: LD_INT 3
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 5
70236: NEG
70237: PUSH
70238: LD_INT 4
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 5
70248: NEG
70249: PUSH
70250: LD_INT 5
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 3
70260: NEG
70261: PUSH
70262: LD_INT 5
70264: NEG
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 5
70272: NEG
70273: PUSH
70274: LD_INT 3
70276: NEG
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 0
70284: PUSH
70285: LD_INT 3
70287: NEG
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: LD_INT 4
70298: NEG
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 1
70306: PUSH
70307: LD_INT 3
70309: NEG
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 1
70317: PUSH
70318: LD_INT 2
70320: NEG
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 0
70328: PUSH
70329: LD_INT 2
70331: NEG
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 1
70339: NEG
70340: PUSH
70341: LD_INT 3
70343: NEG
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 1
70351: NEG
70352: PUSH
70353: LD_INT 4
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 2
70363: PUSH
70364: LD_INT 2
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 2
70374: NEG
70375: PUSH
70376: LD_INT 4
70378: NEG
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 4
70386: PUSH
70387: LD_INT 0
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 4
70396: PUSH
70397: LD_INT 1
70399: NEG
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 5
70407: PUSH
70408: LD_INT 0
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 5
70417: PUSH
70418: LD_INT 1
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 4
70427: PUSH
70428: LD_INT 1
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 3
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 3
70447: PUSH
70448: LD_INT 1
70450: NEG
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 3
70458: PUSH
70459: LD_INT 2
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 5
70469: PUSH
70470: LD_INT 2
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 3
70479: PUSH
70480: LD_INT 3
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 3
70489: PUSH
70490: LD_INT 2
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 4
70499: PUSH
70500: LD_INT 3
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 4
70509: PUSH
70510: LD_INT 4
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 3
70519: PUSH
70520: LD_INT 4
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 2
70529: PUSH
70530: LD_INT 3
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 2
70539: PUSH
70540: LD_INT 2
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 4
70549: PUSH
70550: LD_INT 2
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 2
70559: PUSH
70560: LD_INT 4
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 0
70569: PUSH
70570: LD_INT 4
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: LD_INT 3
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 1
70589: PUSH
70590: LD_INT 4
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 1
70599: PUSH
70600: LD_INT 5
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 0
70609: PUSH
70610: LD_INT 5
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 1
70619: NEG
70620: PUSH
70621: LD_INT 4
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: LD_INT 1
70630: NEG
70631: PUSH
70632: LD_INT 3
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 2
70641: PUSH
70642: LD_INT 5
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 2
70651: NEG
70652: PUSH
70653: LD_INT 3
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70707: LD_ADDR_VAR 0 34
70711: PUSH
70712: LD_INT 0
70714: PUSH
70715: LD_INT 4
70717: NEG
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 0
70725: PUSH
70726: LD_INT 5
70728: NEG
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 1
70736: PUSH
70737: LD_INT 4
70739: NEG
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 1
70747: PUSH
70748: LD_INT 3
70750: NEG
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 0
70758: PUSH
70759: LD_INT 3
70761: NEG
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 1
70769: NEG
70770: PUSH
70771: LD_INT 4
70773: NEG
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 1
70781: NEG
70782: PUSH
70783: LD_INT 5
70785: NEG
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 2
70793: PUSH
70794: LD_INT 3
70796: NEG
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 2
70804: NEG
70805: PUSH
70806: LD_INT 5
70808: NEG
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 3
70816: PUSH
70817: LD_INT 0
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 3
70826: PUSH
70827: LD_INT 1
70829: NEG
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 4
70837: PUSH
70838: LD_INT 0
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 4
70847: PUSH
70848: LD_INT 1
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 3
70857: PUSH
70858: LD_INT 1
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 2
70867: PUSH
70868: LD_INT 0
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 2
70877: PUSH
70878: LD_INT 1
70880: NEG
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 2
70888: PUSH
70889: LD_INT 2
70891: NEG
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 4
70899: PUSH
70900: LD_INT 2
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 4
70909: PUSH
70910: LD_INT 4
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 4
70919: PUSH
70920: LD_INT 3
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 5
70929: PUSH
70930: LD_INT 4
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 5
70939: PUSH
70940: LD_INT 5
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 4
70949: PUSH
70950: LD_INT 5
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 3
70959: PUSH
70960: LD_INT 4
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 3
70969: PUSH
70970: LD_INT 3
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 5
70979: PUSH
70980: LD_INT 3
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 3
70989: PUSH
70990: LD_INT 5
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 0
70999: PUSH
71000: LD_INT 3
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 0
71009: PUSH
71010: LD_INT 2
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 1
71019: PUSH
71020: LD_INT 3
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PUSH
71027: LD_INT 1
71029: PUSH
71030: LD_INT 4
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 0
71039: PUSH
71040: LD_INT 4
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 1
71049: NEG
71050: PUSH
71051: LD_INT 3
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 1
71060: NEG
71061: PUSH
71062: LD_INT 2
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 2
71071: PUSH
71072: LD_INT 4
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 2
71081: NEG
71082: PUSH
71083: LD_INT 2
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 4
71092: NEG
71093: PUSH
71094: LD_INT 0
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 4
71103: NEG
71104: PUSH
71105: LD_INT 1
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 3
71115: NEG
71116: PUSH
71117: LD_INT 0
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 3
71126: NEG
71127: PUSH
71128: LD_INT 1
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 4
71137: NEG
71138: PUSH
71139: LD_INT 1
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 5
71148: NEG
71149: PUSH
71150: LD_INT 0
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 5
71159: NEG
71160: PUSH
71161: LD_INT 1
71163: NEG
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 5
71171: NEG
71172: PUSH
71173: LD_INT 2
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 3
71183: NEG
71184: PUSH
71185: LD_INT 2
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: ST_TO_ADDR
// end ; end ;
71239: GO 71242
71241: POP
// case btype of b_depot , b_warehouse :
71242: LD_VAR 0 1
71246: PUSH
71247: LD_INT 0
71249: DOUBLE
71250: EQUAL
71251: IFTRUE 71261
71253: LD_INT 1
71255: DOUBLE
71256: EQUAL
71257: IFTRUE 71261
71259: GO 71462
71261: POP
// case nation of nation_american :
71262: LD_VAR 0 5
71266: PUSH
71267: LD_INT 1
71269: DOUBLE
71270: EQUAL
71271: IFTRUE 71275
71273: GO 71331
71275: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71276: LD_ADDR_VAR 0 9
71280: PUSH
71281: LD_VAR 0 11
71285: PUSH
71286: LD_VAR 0 12
71290: PUSH
71291: LD_VAR 0 13
71295: PUSH
71296: LD_VAR 0 14
71300: PUSH
71301: LD_VAR 0 15
71305: PUSH
71306: LD_VAR 0 16
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: PUSH
71319: LD_VAR 0 4
71323: PUSH
71324: LD_INT 1
71326: PLUS
71327: ARRAY
71328: ST_TO_ADDR
71329: GO 71460
71331: LD_INT 2
71333: DOUBLE
71334: EQUAL
71335: IFTRUE 71339
71337: GO 71395
71339: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71340: LD_ADDR_VAR 0 9
71344: PUSH
71345: LD_VAR 0 17
71349: PUSH
71350: LD_VAR 0 18
71354: PUSH
71355: LD_VAR 0 19
71359: PUSH
71360: LD_VAR 0 20
71364: PUSH
71365: LD_VAR 0 21
71369: PUSH
71370: LD_VAR 0 22
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: PUSH
71383: LD_VAR 0 4
71387: PUSH
71388: LD_INT 1
71390: PLUS
71391: ARRAY
71392: ST_TO_ADDR
71393: GO 71460
71395: LD_INT 3
71397: DOUBLE
71398: EQUAL
71399: IFTRUE 71403
71401: GO 71459
71403: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71404: LD_ADDR_VAR 0 9
71408: PUSH
71409: LD_VAR 0 23
71413: PUSH
71414: LD_VAR 0 24
71418: PUSH
71419: LD_VAR 0 25
71423: PUSH
71424: LD_VAR 0 26
71428: PUSH
71429: LD_VAR 0 27
71433: PUSH
71434: LD_VAR 0 28
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: PUSH
71447: LD_VAR 0 4
71451: PUSH
71452: LD_INT 1
71454: PLUS
71455: ARRAY
71456: ST_TO_ADDR
71457: GO 71460
71459: POP
71460: GO 72015
71462: LD_INT 2
71464: DOUBLE
71465: EQUAL
71466: IFTRUE 71476
71468: LD_INT 3
71470: DOUBLE
71471: EQUAL
71472: IFTRUE 71476
71474: GO 71532
71476: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71477: LD_ADDR_VAR 0 9
71481: PUSH
71482: LD_VAR 0 29
71486: PUSH
71487: LD_VAR 0 30
71491: PUSH
71492: LD_VAR 0 31
71496: PUSH
71497: LD_VAR 0 32
71501: PUSH
71502: LD_VAR 0 33
71506: PUSH
71507: LD_VAR 0 34
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: PUSH
71520: LD_VAR 0 4
71524: PUSH
71525: LD_INT 1
71527: PLUS
71528: ARRAY
71529: ST_TO_ADDR
71530: GO 72015
71532: LD_INT 16
71534: DOUBLE
71535: EQUAL
71536: IFTRUE 71594
71538: LD_INT 17
71540: DOUBLE
71541: EQUAL
71542: IFTRUE 71594
71544: LD_INT 18
71546: DOUBLE
71547: EQUAL
71548: IFTRUE 71594
71550: LD_INT 19
71552: DOUBLE
71553: EQUAL
71554: IFTRUE 71594
71556: LD_INT 22
71558: DOUBLE
71559: EQUAL
71560: IFTRUE 71594
71562: LD_INT 20
71564: DOUBLE
71565: EQUAL
71566: IFTRUE 71594
71568: LD_INT 21
71570: DOUBLE
71571: EQUAL
71572: IFTRUE 71594
71574: LD_INT 23
71576: DOUBLE
71577: EQUAL
71578: IFTRUE 71594
71580: LD_INT 24
71582: DOUBLE
71583: EQUAL
71584: IFTRUE 71594
71586: LD_INT 25
71588: DOUBLE
71589: EQUAL
71590: IFTRUE 71594
71592: GO 71650
71594: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71595: LD_ADDR_VAR 0 9
71599: PUSH
71600: LD_VAR 0 35
71604: PUSH
71605: LD_VAR 0 36
71609: PUSH
71610: LD_VAR 0 37
71614: PUSH
71615: LD_VAR 0 38
71619: PUSH
71620: LD_VAR 0 39
71624: PUSH
71625: LD_VAR 0 40
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: PUSH
71638: LD_VAR 0 4
71642: PUSH
71643: LD_INT 1
71645: PLUS
71646: ARRAY
71647: ST_TO_ADDR
71648: GO 72015
71650: LD_INT 6
71652: DOUBLE
71653: EQUAL
71654: IFTRUE 71706
71656: LD_INT 7
71658: DOUBLE
71659: EQUAL
71660: IFTRUE 71706
71662: LD_INT 8
71664: DOUBLE
71665: EQUAL
71666: IFTRUE 71706
71668: LD_INT 13
71670: DOUBLE
71671: EQUAL
71672: IFTRUE 71706
71674: LD_INT 12
71676: DOUBLE
71677: EQUAL
71678: IFTRUE 71706
71680: LD_INT 15
71682: DOUBLE
71683: EQUAL
71684: IFTRUE 71706
71686: LD_INT 11
71688: DOUBLE
71689: EQUAL
71690: IFTRUE 71706
71692: LD_INT 14
71694: DOUBLE
71695: EQUAL
71696: IFTRUE 71706
71698: LD_INT 10
71700: DOUBLE
71701: EQUAL
71702: IFTRUE 71706
71704: GO 71762
71706: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71707: LD_ADDR_VAR 0 9
71711: PUSH
71712: LD_VAR 0 41
71716: PUSH
71717: LD_VAR 0 42
71721: PUSH
71722: LD_VAR 0 43
71726: PUSH
71727: LD_VAR 0 44
71731: PUSH
71732: LD_VAR 0 45
71736: PUSH
71737: LD_VAR 0 46
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: PUSH
71750: LD_VAR 0 4
71754: PUSH
71755: LD_INT 1
71757: PLUS
71758: ARRAY
71759: ST_TO_ADDR
71760: GO 72015
71762: LD_INT 36
71764: DOUBLE
71765: EQUAL
71766: IFTRUE 71770
71768: GO 71826
71770: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71771: LD_ADDR_VAR 0 9
71775: PUSH
71776: LD_VAR 0 47
71780: PUSH
71781: LD_VAR 0 48
71785: PUSH
71786: LD_VAR 0 49
71790: PUSH
71791: LD_VAR 0 50
71795: PUSH
71796: LD_VAR 0 51
71800: PUSH
71801: LD_VAR 0 52
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: PUSH
71814: LD_VAR 0 4
71818: PUSH
71819: LD_INT 1
71821: PLUS
71822: ARRAY
71823: ST_TO_ADDR
71824: GO 72015
71826: LD_INT 4
71828: DOUBLE
71829: EQUAL
71830: IFTRUE 71852
71832: LD_INT 5
71834: DOUBLE
71835: EQUAL
71836: IFTRUE 71852
71838: LD_INT 34
71840: DOUBLE
71841: EQUAL
71842: IFTRUE 71852
71844: LD_INT 37
71846: DOUBLE
71847: EQUAL
71848: IFTRUE 71852
71850: GO 71908
71852: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71853: LD_ADDR_VAR 0 9
71857: PUSH
71858: LD_VAR 0 53
71862: PUSH
71863: LD_VAR 0 54
71867: PUSH
71868: LD_VAR 0 55
71872: PUSH
71873: LD_VAR 0 56
71877: PUSH
71878: LD_VAR 0 57
71882: PUSH
71883: LD_VAR 0 58
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: PUSH
71896: LD_VAR 0 4
71900: PUSH
71901: LD_INT 1
71903: PLUS
71904: ARRAY
71905: ST_TO_ADDR
71906: GO 72015
71908: LD_INT 31
71910: DOUBLE
71911: EQUAL
71912: IFTRUE 71958
71914: LD_INT 32
71916: DOUBLE
71917: EQUAL
71918: IFTRUE 71958
71920: LD_INT 33
71922: DOUBLE
71923: EQUAL
71924: IFTRUE 71958
71926: LD_INT 27
71928: DOUBLE
71929: EQUAL
71930: IFTRUE 71958
71932: LD_INT 26
71934: DOUBLE
71935: EQUAL
71936: IFTRUE 71958
71938: LD_INT 28
71940: DOUBLE
71941: EQUAL
71942: IFTRUE 71958
71944: LD_INT 29
71946: DOUBLE
71947: EQUAL
71948: IFTRUE 71958
71950: LD_INT 30
71952: DOUBLE
71953: EQUAL
71954: IFTRUE 71958
71956: GO 72014
71958: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71959: LD_ADDR_VAR 0 9
71963: PUSH
71964: LD_VAR 0 59
71968: PUSH
71969: LD_VAR 0 60
71973: PUSH
71974: LD_VAR 0 61
71978: PUSH
71979: LD_VAR 0 62
71983: PUSH
71984: LD_VAR 0 63
71988: PUSH
71989: LD_VAR 0 64
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: PUSH
72002: LD_VAR 0 4
72006: PUSH
72007: LD_INT 1
72009: PLUS
72010: ARRAY
72011: ST_TO_ADDR
72012: GO 72015
72014: POP
// temp_list2 = [ ] ;
72015: LD_ADDR_VAR 0 10
72019: PUSH
72020: EMPTY
72021: ST_TO_ADDR
// for i in temp_list do
72022: LD_ADDR_VAR 0 8
72026: PUSH
72027: LD_VAR 0 9
72031: PUSH
72032: FOR_IN
72033: IFFALSE 72085
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72035: LD_ADDR_VAR 0 10
72039: PUSH
72040: LD_VAR 0 10
72044: PUSH
72045: LD_VAR 0 8
72049: PUSH
72050: LD_INT 1
72052: ARRAY
72053: PUSH
72054: LD_VAR 0 2
72058: PLUS
72059: PUSH
72060: LD_VAR 0 8
72064: PUSH
72065: LD_INT 2
72067: ARRAY
72068: PUSH
72069: LD_VAR 0 3
72073: PLUS
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: EMPTY
72080: LIST
72081: ADD
72082: ST_TO_ADDR
72083: GO 72032
72085: POP
72086: POP
// result = temp_list2 ;
72087: LD_ADDR_VAR 0 7
72091: PUSH
72092: LD_VAR 0 10
72096: ST_TO_ADDR
// end ;
72097: LD_VAR 0 7
72101: RET
// export function EnemyInRange ( unit , dist ) ; begin
72102: LD_INT 0
72104: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72105: LD_ADDR_VAR 0 3
72109: PUSH
72110: LD_VAR 0 1
72114: PPUSH
72115: CALL_OW 255
72119: PPUSH
72120: LD_VAR 0 1
72124: PPUSH
72125: CALL_OW 250
72129: PPUSH
72130: LD_VAR 0 1
72134: PPUSH
72135: CALL_OW 251
72139: PPUSH
72140: LD_VAR 0 2
72144: PPUSH
72145: CALL 45504 0 4
72149: PUSH
72150: LD_INT 4
72152: ARRAY
72153: ST_TO_ADDR
// end ;
72154: LD_VAR 0 3
72158: RET
// export function PlayerSeeMe ( unit ) ; begin
72159: LD_INT 0
72161: PPUSH
// result := See ( your_side , unit ) ;
72162: LD_ADDR_VAR 0 2
72166: PUSH
72167: LD_OWVAR 2
72171: PPUSH
72172: LD_VAR 0 1
72176: PPUSH
72177: CALL_OW 292
72181: ST_TO_ADDR
// end ;
72182: LD_VAR 0 2
72186: RET
// export function ReverseDir ( unit ) ; begin
72187: LD_INT 0
72189: PPUSH
// if not unit then
72190: LD_VAR 0 1
72194: NOT
72195: IFFALSE 72199
// exit ;
72197: GO 72222
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72199: LD_ADDR_VAR 0 2
72203: PUSH
72204: LD_VAR 0 1
72208: PPUSH
72209: CALL_OW 254
72213: PUSH
72214: LD_INT 3
72216: PLUS
72217: PUSH
72218: LD_INT 6
72220: MOD
72221: ST_TO_ADDR
// end ;
72222: LD_VAR 0 2
72226: RET
// export function ReverseArray ( array ) ; var i ; begin
72227: LD_INT 0
72229: PPUSH
72230: PPUSH
// if not array then
72231: LD_VAR 0 1
72235: NOT
72236: IFFALSE 72240
// exit ;
72238: GO 72295
// result := [ ] ;
72240: LD_ADDR_VAR 0 2
72244: PUSH
72245: EMPTY
72246: ST_TO_ADDR
// for i := array downto 1 do
72247: LD_ADDR_VAR 0 3
72251: PUSH
72252: DOUBLE
72253: LD_VAR 0 1
72257: INC
72258: ST_TO_ADDR
72259: LD_INT 1
72261: PUSH
72262: FOR_DOWNTO
72263: IFFALSE 72293
// result := Join ( result , array [ i ] ) ;
72265: LD_ADDR_VAR 0 2
72269: PUSH
72270: LD_VAR 0 2
72274: PPUSH
72275: LD_VAR 0 1
72279: PUSH
72280: LD_VAR 0 3
72284: ARRAY
72285: PPUSH
72286: CALL 76939 0 2
72290: ST_TO_ADDR
72291: GO 72262
72293: POP
72294: POP
// end ;
72295: LD_VAR 0 2
72299: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72300: LD_INT 0
72302: PPUSH
72303: PPUSH
72304: PPUSH
72305: PPUSH
72306: PPUSH
72307: PPUSH
// if not unit or not hexes then
72308: LD_VAR 0 1
72312: NOT
72313: PUSH
72314: LD_VAR 0 2
72318: NOT
72319: OR
72320: IFFALSE 72324
// exit ;
72322: GO 72447
// dist := 9999 ;
72324: LD_ADDR_VAR 0 5
72328: PUSH
72329: LD_INT 9999
72331: ST_TO_ADDR
// for i = 1 to hexes do
72332: LD_ADDR_VAR 0 4
72336: PUSH
72337: DOUBLE
72338: LD_INT 1
72340: DEC
72341: ST_TO_ADDR
72342: LD_VAR 0 2
72346: PUSH
72347: FOR_TO
72348: IFFALSE 72435
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72350: LD_ADDR_VAR 0 6
72354: PUSH
72355: LD_VAR 0 1
72359: PPUSH
72360: LD_VAR 0 2
72364: PUSH
72365: LD_VAR 0 4
72369: ARRAY
72370: PUSH
72371: LD_INT 1
72373: ARRAY
72374: PPUSH
72375: LD_VAR 0 2
72379: PUSH
72380: LD_VAR 0 4
72384: ARRAY
72385: PUSH
72386: LD_INT 2
72388: ARRAY
72389: PPUSH
72390: CALL_OW 297
72394: ST_TO_ADDR
// if tdist < dist then
72395: LD_VAR 0 6
72399: PUSH
72400: LD_VAR 0 5
72404: LESS
72405: IFFALSE 72433
// begin hex := hexes [ i ] ;
72407: LD_ADDR_VAR 0 8
72411: PUSH
72412: LD_VAR 0 2
72416: PUSH
72417: LD_VAR 0 4
72421: ARRAY
72422: ST_TO_ADDR
// dist := tdist ;
72423: LD_ADDR_VAR 0 5
72427: PUSH
72428: LD_VAR 0 6
72432: ST_TO_ADDR
// end ; end ;
72433: GO 72347
72435: POP
72436: POP
// result := hex ;
72437: LD_ADDR_VAR 0 3
72441: PUSH
72442: LD_VAR 0 8
72446: ST_TO_ADDR
// end ;
72447: LD_VAR 0 3
72451: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72452: LD_INT 0
72454: PPUSH
72455: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72456: LD_VAR 0 1
72460: NOT
72461: PUSH
72462: LD_VAR 0 1
72466: PUSH
72467: LD_INT 21
72469: PUSH
72470: LD_INT 2
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 23
72479: PUSH
72480: LD_INT 2
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PPUSH
72491: CALL_OW 69
72495: IN
72496: NOT
72497: OR
72498: IFFALSE 72502
// exit ;
72500: GO 72549
// for i = 1 to 3 do
72502: LD_ADDR_VAR 0 3
72506: PUSH
72507: DOUBLE
72508: LD_INT 1
72510: DEC
72511: ST_TO_ADDR
72512: LD_INT 3
72514: PUSH
72515: FOR_TO
72516: IFFALSE 72547
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72518: LD_VAR 0 1
72522: PPUSH
72523: CALL_OW 250
72527: PPUSH
72528: LD_VAR 0 1
72532: PPUSH
72533: CALL_OW 251
72537: PPUSH
72538: LD_INT 1
72540: PPUSH
72541: CALL_OW 453
72545: GO 72515
72547: POP
72548: POP
// end ;
72549: LD_VAR 0 2
72553: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72554: LD_INT 0
72556: PPUSH
72557: PPUSH
72558: PPUSH
72559: PPUSH
72560: PPUSH
72561: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72562: LD_VAR 0 1
72566: NOT
72567: PUSH
72568: LD_VAR 0 2
72572: NOT
72573: OR
72574: PUSH
72575: LD_VAR 0 1
72579: PPUSH
72580: CALL_OW 314
72584: OR
72585: IFFALSE 72589
// exit ;
72587: GO 73056
// if GetLives ( i ) < 250 then
72589: LD_VAR 0 4
72593: PPUSH
72594: CALL_OW 256
72598: PUSH
72599: LD_INT 250
72601: LESS
72602: IFFALSE 72615
// begin ComAutodestruct ( i ) ;
72604: LD_VAR 0 4
72608: PPUSH
72609: CALL 72452 0 1
// exit ;
72613: GO 73056
// end ; x := GetX ( enemy_unit ) ;
72615: LD_ADDR_VAR 0 7
72619: PUSH
72620: LD_VAR 0 2
72624: PPUSH
72625: CALL_OW 250
72629: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72630: LD_ADDR_VAR 0 8
72634: PUSH
72635: LD_VAR 0 2
72639: PPUSH
72640: CALL_OW 251
72644: ST_TO_ADDR
// if not x or not y then
72645: LD_VAR 0 7
72649: NOT
72650: PUSH
72651: LD_VAR 0 8
72655: NOT
72656: OR
72657: IFFALSE 72661
// exit ;
72659: GO 73056
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72661: LD_ADDR_VAR 0 6
72665: PUSH
72666: LD_VAR 0 7
72670: PPUSH
72671: LD_INT 0
72673: PPUSH
72674: LD_INT 4
72676: PPUSH
72677: CALL_OW 272
72681: PUSH
72682: LD_VAR 0 8
72686: PPUSH
72687: LD_INT 0
72689: PPUSH
72690: LD_INT 4
72692: PPUSH
72693: CALL_OW 273
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: PUSH
72702: LD_VAR 0 7
72706: PPUSH
72707: LD_INT 1
72709: PPUSH
72710: LD_INT 4
72712: PPUSH
72713: CALL_OW 272
72717: PUSH
72718: LD_VAR 0 8
72722: PPUSH
72723: LD_INT 1
72725: PPUSH
72726: LD_INT 4
72728: PPUSH
72729: CALL_OW 273
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_VAR 0 7
72742: PPUSH
72743: LD_INT 2
72745: PPUSH
72746: LD_INT 4
72748: PPUSH
72749: CALL_OW 272
72753: PUSH
72754: LD_VAR 0 8
72758: PPUSH
72759: LD_INT 2
72761: PPUSH
72762: LD_INT 4
72764: PPUSH
72765: CALL_OW 273
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_VAR 0 7
72778: PPUSH
72779: LD_INT 3
72781: PPUSH
72782: LD_INT 4
72784: PPUSH
72785: CALL_OW 272
72789: PUSH
72790: LD_VAR 0 8
72794: PPUSH
72795: LD_INT 3
72797: PPUSH
72798: LD_INT 4
72800: PPUSH
72801: CALL_OW 273
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_VAR 0 7
72814: PPUSH
72815: LD_INT 4
72817: PPUSH
72818: LD_INT 4
72820: PPUSH
72821: CALL_OW 272
72825: PUSH
72826: LD_VAR 0 8
72830: PPUSH
72831: LD_INT 4
72833: PPUSH
72834: LD_INT 4
72836: PPUSH
72837: CALL_OW 273
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_VAR 0 7
72850: PPUSH
72851: LD_INT 5
72853: PPUSH
72854: LD_INT 4
72856: PPUSH
72857: CALL_OW 272
72861: PUSH
72862: LD_VAR 0 8
72866: PPUSH
72867: LD_INT 5
72869: PPUSH
72870: LD_INT 4
72872: PPUSH
72873: CALL_OW 273
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: ST_TO_ADDR
// for i = tmp downto 1 do
72890: LD_ADDR_VAR 0 4
72894: PUSH
72895: DOUBLE
72896: LD_VAR 0 6
72900: INC
72901: ST_TO_ADDR
72902: LD_INT 1
72904: PUSH
72905: FOR_DOWNTO
72906: IFFALSE 73007
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72908: LD_VAR 0 6
72912: PUSH
72913: LD_VAR 0 4
72917: ARRAY
72918: PUSH
72919: LD_INT 1
72921: ARRAY
72922: PPUSH
72923: LD_VAR 0 6
72927: PUSH
72928: LD_VAR 0 4
72932: ARRAY
72933: PUSH
72934: LD_INT 2
72936: ARRAY
72937: PPUSH
72938: CALL_OW 488
72942: NOT
72943: PUSH
72944: LD_VAR 0 6
72948: PUSH
72949: LD_VAR 0 4
72953: ARRAY
72954: PUSH
72955: LD_INT 1
72957: ARRAY
72958: PPUSH
72959: LD_VAR 0 6
72963: PUSH
72964: LD_VAR 0 4
72968: ARRAY
72969: PUSH
72970: LD_INT 2
72972: ARRAY
72973: PPUSH
72974: CALL_OW 428
72978: PUSH
72979: LD_INT 0
72981: NONEQUAL
72982: OR
72983: IFFALSE 73005
// tmp := Delete ( tmp , i ) ;
72985: LD_ADDR_VAR 0 6
72989: PUSH
72990: LD_VAR 0 6
72994: PPUSH
72995: LD_VAR 0 4
72999: PPUSH
73000: CALL_OW 3
73004: ST_TO_ADDR
73005: GO 72905
73007: POP
73008: POP
// j := GetClosestHex ( unit , tmp ) ;
73009: LD_ADDR_VAR 0 5
73013: PUSH
73014: LD_VAR 0 1
73018: PPUSH
73019: LD_VAR 0 6
73023: PPUSH
73024: CALL 72300 0 2
73028: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73029: LD_VAR 0 1
73033: PPUSH
73034: LD_VAR 0 5
73038: PUSH
73039: LD_INT 1
73041: ARRAY
73042: PPUSH
73043: LD_VAR 0 5
73047: PUSH
73048: LD_INT 2
73050: ARRAY
73051: PPUSH
73052: CALL_OW 111
// end ;
73056: LD_VAR 0 3
73060: RET
// export function PrepareApemanSoldier ( ) ; begin
73061: LD_INT 0
73063: PPUSH
// uc_nation := 0 ;
73064: LD_ADDR_OWVAR 21
73068: PUSH
73069: LD_INT 0
73071: ST_TO_ADDR
// hc_sex := sex_male ;
73072: LD_ADDR_OWVAR 27
73076: PUSH
73077: LD_INT 1
73079: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73080: LD_ADDR_OWVAR 28
73084: PUSH
73085: LD_INT 15
73087: ST_TO_ADDR
// hc_gallery :=  ;
73088: LD_ADDR_OWVAR 33
73092: PUSH
73093: LD_STRING 
73095: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73096: LD_ADDR_OWVAR 31
73100: PUSH
73101: LD_INT 0
73103: PPUSH
73104: LD_INT 3
73106: PPUSH
73107: CALL_OW 12
73111: PUSH
73112: LD_INT 0
73114: PPUSH
73115: LD_INT 3
73117: PPUSH
73118: CALL_OW 12
73122: PUSH
73123: LD_INT 0
73125: PUSH
73126: LD_INT 0
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: ST_TO_ADDR
// end ;
73135: LD_VAR 0 1
73139: RET
// export function PrepareApemanEngineer ( ) ; begin
73140: LD_INT 0
73142: PPUSH
// uc_nation := 0 ;
73143: LD_ADDR_OWVAR 21
73147: PUSH
73148: LD_INT 0
73150: ST_TO_ADDR
// hc_sex := sex_male ;
73151: LD_ADDR_OWVAR 27
73155: PUSH
73156: LD_INT 1
73158: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73159: LD_ADDR_OWVAR 28
73163: PUSH
73164: LD_INT 16
73166: ST_TO_ADDR
// hc_gallery :=  ;
73167: LD_ADDR_OWVAR 33
73171: PUSH
73172: LD_STRING 
73174: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73175: LD_ADDR_OWVAR 31
73179: PUSH
73180: LD_INT 0
73182: PPUSH
73183: LD_INT 3
73185: PPUSH
73186: CALL_OW 12
73190: PUSH
73191: LD_INT 0
73193: PPUSH
73194: LD_INT 3
73196: PPUSH
73197: CALL_OW 12
73201: PUSH
73202: LD_INT 0
73204: PUSH
73205: LD_INT 0
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: ST_TO_ADDR
// end ;
73214: LD_VAR 0 1
73218: RET
// export function PrepareApeman ( agressivity ) ; begin
73219: LD_INT 0
73221: PPUSH
// uc_side := 0 ;
73222: LD_ADDR_OWVAR 20
73226: PUSH
73227: LD_INT 0
73229: ST_TO_ADDR
// uc_nation := 0 ;
73230: LD_ADDR_OWVAR 21
73234: PUSH
73235: LD_INT 0
73237: ST_TO_ADDR
// hc_sex := sex_male ;
73238: LD_ADDR_OWVAR 27
73242: PUSH
73243: LD_INT 1
73245: ST_TO_ADDR
// hc_class := class_apeman ;
73246: LD_ADDR_OWVAR 28
73250: PUSH
73251: LD_INT 12
73253: ST_TO_ADDR
// hc_gallery :=  ;
73254: LD_ADDR_OWVAR 33
73258: PUSH
73259: LD_STRING 
73261: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73262: LD_ADDR_OWVAR 35
73266: PUSH
73267: LD_VAR 0 1
73271: NEG
73272: PPUSH
73273: LD_VAR 0 1
73277: PPUSH
73278: CALL_OW 12
73282: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73283: LD_ADDR_OWVAR 31
73287: PUSH
73288: LD_INT 0
73290: PPUSH
73291: LD_INT 3
73293: PPUSH
73294: CALL_OW 12
73298: PUSH
73299: LD_INT 0
73301: PPUSH
73302: LD_INT 3
73304: PPUSH
73305: CALL_OW 12
73309: PUSH
73310: LD_INT 0
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: ST_TO_ADDR
// end ;
73322: LD_VAR 0 2
73326: RET
// export function PrepareTiger ( agressivity ) ; begin
73327: LD_INT 0
73329: PPUSH
// uc_side := 0 ;
73330: LD_ADDR_OWVAR 20
73334: PUSH
73335: LD_INT 0
73337: ST_TO_ADDR
// uc_nation := 0 ;
73338: LD_ADDR_OWVAR 21
73342: PUSH
73343: LD_INT 0
73345: ST_TO_ADDR
// hc_class := class_tiger ;
73346: LD_ADDR_OWVAR 28
73350: PUSH
73351: LD_INT 14
73353: ST_TO_ADDR
// hc_gallery :=  ;
73354: LD_ADDR_OWVAR 33
73358: PUSH
73359: LD_STRING 
73361: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73362: LD_ADDR_OWVAR 35
73366: PUSH
73367: LD_VAR 0 1
73371: NEG
73372: PPUSH
73373: LD_VAR 0 1
73377: PPUSH
73378: CALL_OW 12
73382: ST_TO_ADDR
// end ;
73383: LD_VAR 0 2
73387: RET
// export function PrepareEnchidna ( ) ; begin
73388: LD_INT 0
73390: PPUSH
// uc_side := 0 ;
73391: LD_ADDR_OWVAR 20
73395: PUSH
73396: LD_INT 0
73398: ST_TO_ADDR
// uc_nation := 0 ;
73399: LD_ADDR_OWVAR 21
73403: PUSH
73404: LD_INT 0
73406: ST_TO_ADDR
// hc_class := class_baggie ;
73407: LD_ADDR_OWVAR 28
73411: PUSH
73412: LD_INT 13
73414: ST_TO_ADDR
// hc_gallery :=  ;
73415: LD_ADDR_OWVAR 33
73419: PUSH
73420: LD_STRING 
73422: ST_TO_ADDR
// end ;
73423: LD_VAR 0 1
73427: RET
// export function PrepareFrog ( ) ; begin
73428: LD_INT 0
73430: PPUSH
// uc_side := 0 ;
73431: LD_ADDR_OWVAR 20
73435: PUSH
73436: LD_INT 0
73438: ST_TO_ADDR
// uc_nation := 0 ;
73439: LD_ADDR_OWVAR 21
73443: PUSH
73444: LD_INT 0
73446: ST_TO_ADDR
// hc_class := class_frog ;
73447: LD_ADDR_OWVAR 28
73451: PUSH
73452: LD_INT 19
73454: ST_TO_ADDR
// hc_gallery :=  ;
73455: LD_ADDR_OWVAR 33
73459: PUSH
73460: LD_STRING 
73462: ST_TO_ADDR
// end ;
73463: LD_VAR 0 1
73467: RET
// export function PrepareFish ( ) ; begin
73468: LD_INT 0
73470: PPUSH
// uc_side := 0 ;
73471: LD_ADDR_OWVAR 20
73475: PUSH
73476: LD_INT 0
73478: ST_TO_ADDR
// uc_nation := 0 ;
73479: LD_ADDR_OWVAR 21
73483: PUSH
73484: LD_INT 0
73486: ST_TO_ADDR
// hc_class := class_fish ;
73487: LD_ADDR_OWVAR 28
73491: PUSH
73492: LD_INT 20
73494: ST_TO_ADDR
// hc_gallery :=  ;
73495: LD_ADDR_OWVAR 33
73499: PUSH
73500: LD_STRING 
73502: ST_TO_ADDR
// end ;
73503: LD_VAR 0 1
73507: RET
// export function PrepareBird ( ) ; begin
73508: LD_INT 0
73510: PPUSH
// uc_side := 0 ;
73511: LD_ADDR_OWVAR 20
73515: PUSH
73516: LD_INT 0
73518: ST_TO_ADDR
// uc_nation := 0 ;
73519: LD_ADDR_OWVAR 21
73523: PUSH
73524: LD_INT 0
73526: ST_TO_ADDR
// hc_class := class_phororhacos ;
73527: LD_ADDR_OWVAR 28
73531: PUSH
73532: LD_INT 18
73534: ST_TO_ADDR
// hc_gallery :=  ;
73535: LD_ADDR_OWVAR 33
73539: PUSH
73540: LD_STRING 
73542: ST_TO_ADDR
// end ;
73543: LD_VAR 0 1
73547: RET
// export function PrepareHorse ( ) ; begin
73548: LD_INT 0
73550: PPUSH
// uc_side := 0 ;
73551: LD_ADDR_OWVAR 20
73555: PUSH
73556: LD_INT 0
73558: ST_TO_ADDR
// uc_nation := 0 ;
73559: LD_ADDR_OWVAR 21
73563: PUSH
73564: LD_INT 0
73566: ST_TO_ADDR
// hc_class := class_horse ;
73567: LD_ADDR_OWVAR 28
73571: PUSH
73572: LD_INT 21
73574: ST_TO_ADDR
// hc_gallery :=  ;
73575: LD_ADDR_OWVAR 33
73579: PUSH
73580: LD_STRING 
73582: ST_TO_ADDR
// end ;
73583: LD_VAR 0 1
73587: RET
// export function PrepareMastodont ( ) ; begin
73588: LD_INT 0
73590: PPUSH
// uc_side := 0 ;
73591: LD_ADDR_OWVAR 20
73595: PUSH
73596: LD_INT 0
73598: ST_TO_ADDR
// uc_nation := 0 ;
73599: LD_ADDR_OWVAR 21
73603: PUSH
73604: LD_INT 0
73606: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73607: LD_ADDR_OWVAR 37
73611: PUSH
73612: LD_INT 31
73614: ST_TO_ADDR
// vc_control := control_rider ;
73615: LD_ADDR_OWVAR 38
73619: PUSH
73620: LD_INT 4
73622: ST_TO_ADDR
// end ;
73623: LD_VAR 0 1
73627: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73628: LD_INT 0
73630: PPUSH
73631: PPUSH
73632: PPUSH
// uc_side = 0 ;
73633: LD_ADDR_OWVAR 20
73637: PUSH
73638: LD_INT 0
73640: ST_TO_ADDR
// uc_nation = 0 ;
73641: LD_ADDR_OWVAR 21
73645: PUSH
73646: LD_INT 0
73648: ST_TO_ADDR
// InitHc_All ( ) ;
73649: CALL_OW 584
// InitVc ;
73653: CALL_OW 20
// if mastodonts then
73657: LD_VAR 0 6
73661: IFFALSE 73728
// for i = 1 to mastodonts do
73663: LD_ADDR_VAR 0 11
73667: PUSH
73668: DOUBLE
73669: LD_INT 1
73671: DEC
73672: ST_TO_ADDR
73673: LD_VAR 0 6
73677: PUSH
73678: FOR_TO
73679: IFFALSE 73726
// begin vc_chassis := 31 ;
73681: LD_ADDR_OWVAR 37
73685: PUSH
73686: LD_INT 31
73688: ST_TO_ADDR
// vc_control := control_rider ;
73689: LD_ADDR_OWVAR 38
73693: PUSH
73694: LD_INT 4
73696: ST_TO_ADDR
// animal := CreateVehicle ;
73697: LD_ADDR_VAR 0 12
73701: PUSH
73702: CALL_OW 45
73706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73707: LD_VAR 0 12
73711: PPUSH
73712: LD_VAR 0 8
73716: PPUSH
73717: LD_INT 0
73719: PPUSH
73720: CALL 75856 0 3
// end ;
73724: GO 73678
73726: POP
73727: POP
// if horses then
73728: LD_VAR 0 5
73732: IFFALSE 73799
// for i = 1 to horses do
73734: LD_ADDR_VAR 0 11
73738: PUSH
73739: DOUBLE
73740: LD_INT 1
73742: DEC
73743: ST_TO_ADDR
73744: LD_VAR 0 5
73748: PUSH
73749: FOR_TO
73750: IFFALSE 73797
// begin hc_class := 21 ;
73752: LD_ADDR_OWVAR 28
73756: PUSH
73757: LD_INT 21
73759: ST_TO_ADDR
// hc_gallery :=  ;
73760: LD_ADDR_OWVAR 33
73764: PUSH
73765: LD_STRING 
73767: ST_TO_ADDR
// animal := CreateHuman ;
73768: LD_ADDR_VAR 0 12
73772: PUSH
73773: CALL_OW 44
73777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73778: LD_VAR 0 12
73782: PPUSH
73783: LD_VAR 0 8
73787: PPUSH
73788: LD_INT 0
73790: PPUSH
73791: CALL 75856 0 3
// end ;
73795: GO 73749
73797: POP
73798: POP
// if birds then
73799: LD_VAR 0 1
73803: IFFALSE 73870
// for i = 1 to birds do
73805: LD_ADDR_VAR 0 11
73809: PUSH
73810: DOUBLE
73811: LD_INT 1
73813: DEC
73814: ST_TO_ADDR
73815: LD_VAR 0 1
73819: PUSH
73820: FOR_TO
73821: IFFALSE 73868
// begin hc_class = 18 ;
73823: LD_ADDR_OWVAR 28
73827: PUSH
73828: LD_INT 18
73830: ST_TO_ADDR
// hc_gallery =  ;
73831: LD_ADDR_OWVAR 33
73835: PUSH
73836: LD_STRING 
73838: ST_TO_ADDR
// animal := CreateHuman ;
73839: LD_ADDR_VAR 0 12
73843: PUSH
73844: CALL_OW 44
73848: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73849: LD_VAR 0 12
73853: PPUSH
73854: LD_VAR 0 8
73858: PPUSH
73859: LD_INT 0
73861: PPUSH
73862: CALL 75856 0 3
// end ;
73866: GO 73820
73868: POP
73869: POP
// if tigers then
73870: LD_VAR 0 2
73874: IFFALSE 73958
// for i = 1 to tigers do
73876: LD_ADDR_VAR 0 11
73880: PUSH
73881: DOUBLE
73882: LD_INT 1
73884: DEC
73885: ST_TO_ADDR
73886: LD_VAR 0 2
73890: PUSH
73891: FOR_TO
73892: IFFALSE 73956
// begin hc_class = class_tiger ;
73894: LD_ADDR_OWVAR 28
73898: PUSH
73899: LD_INT 14
73901: ST_TO_ADDR
// hc_gallery =  ;
73902: LD_ADDR_OWVAR 33
73906: PUSH
73907: LD_STRING 
73909: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73910: LD_ADDR_OWVAR 35
73914: PUSH
73915: LD_INT 7
73917: NEG
73918: PPUSH
73919: LD_INT 7
73921: PPUSH
73922: CALL_OW 12
73926: ST_TO_ADDR
// animal := CreateHuman ;
73927: LD_ADDR_VAR 0 12
73931: PUSH
73932: CALL_OW 44
73936: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73937: LD_VAR 0 12
73941: PPUSH
73942: LD_VAR 0 8
73946: PPUSH
73947: LD_INT 0
73949: PPUSH
73950: CALL 75856 0 3
// end ;
73954: GO 73891
73956: POP
73957: POP
// if apemans then
73958: LD_VAR 0 3
73962: IFFALSE 74085
// for i = 1 to apemans do
73964: LD_ADDR_VAR 0 11
73968: PUSH
73969: DOUBLE
73970: LD_INT 1
73972: DEC
73973: ST_TO_ADDR
73974: LD_VAR 0 3
73978: PUSH
73979: FOR_TO
73980: IFFALSE 74083
// begin hc_class = class_apeman ;
73982: LD_ADDR_OWVAR 28
73986: PUSH
73987: LD_INT 12
73989: ST_TO_ADDR
// hc_gallery =  ;
73990: LD_ADDR_OWVAR 33
73994: PUSH
73995: LD_STRING 
73997: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73998: LD_ADDR_OWVAR 35
74002: PUSH
74003: LD_INT 2
74005: NEG
74006: PPUSH
74007: LD_INT 2
74009: PPUSH
74010: CALL_OW 12
74014: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74015: LD_ADDR_OWVAR 31
74019: PUSH
74020: LD_INT 1
74022: PPUSH
74023: LD_INT 3
74025: PPUSH
74026: CALL_OW 12
74030: PUSH
74031: LD_INT 1
74033: PPUSH
74034: LD_INT 3
74036: PPUSH
74037: CALL_OW 12
74041: PUSH
74042: LD_INT 0
74044: PUSH
74045: LD_INT 0
74047: PUSH
74048: EMPTY
74049: LIST
74050: LIST
74051: LIST
74052: LIST
74053: ST_TO_ADDR
// animal := CreateHuman ;
74054: LD_ADDR_VAR 0 12
74058: PUSH
74059: CALL_OW 44
74063: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74064: LD_VAR 0 12
74068: PPUSH
74069: LD_VAR 0 8
74073: PPUSH
74074: LD_INT 0
74076: PPUSH
74077: CALL 75856 0 3
// end ;
74081: GO 73979
74083: POP
74084: POP
// if enchidnas then
74085: LD_VAR 0 4
74089: IFFALSE 74156
// for i = 1 to enchidnas do
74091: LD_ADDR_VAR 0 11
74095: PUSH
74096: DOUBLE
74097: LD_INT 1
74099: DEC
74100: ST_TO_ADDR
74101: LD_VAR 0 4
74105: PUSH
74106: FOR_TO
74107: IFFALSE 74154
// begin hc_class = 13 ;
74109: LD_ADDR_OWVAR 28
74113: PUSH
74114: LD_INT 13
74116: ST_TO_ADDR
// hc_gallery =  ;
74117: LD_ADDR_OWVAR 33
74121: PUSH
74122: LD_STRING 
74124: ST_TO_ADDR
// animal := CreateHuman ;
74125: LD_ADDR_VAR 0 12
74129: PUSH
74130: CALL_OW 44
74134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74135: LD_VAR 0 12
74139: PPUSH
74140: LD_VAR 0 8
74144: PPUSH
74145: LD_INT 0
74147: PPUSH
74148: CALL 75856 0 3
// end ;
74152: GO 74106
74154: POP
74155: POP
// if fishes then
74156: LD_VAR 0 7
74160: IFFALSE 74227
// for i = 1 to fishes do
74162: LD_ADDR_VAR 0 11
74166: PUSH
74167: DOUBLE
74168: LD_INT 1
74170: DEC
74171: ST_TO_ADDR
74172: LD_VAR 0 7
74176: PUSH
74177: FOR_TO
74178: IFFALSE 74225
// begin hc_class = 20 ;
74180: LD_ADDR_OWVAR 28
74184: PUSH
74185: LD_INT 20
74187: ST_TO_ADDR
// hc_gallery =  ;
74188: LD_ADDR_OWVAR 33
74192: PUSH
74193: LD_STRING 
74195: ST_TO_ADDR
// animal := CreateHuman ;
74196: LD_ADDR_VAR 0 12
74200: PUSH
74201: CALL_OW 44
74205: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74206: LD_VAR 0 12
74210: PPUSH
74211: LD_VAR 0 9
74215: PPUSH
74216: LD_INT 0
74218: PPUSH
74219: CALL 75856 0 3
// end ;
74223: GO 74177
74225: POP
74226: POP
// end ;
74227: LD_VAR 0 10
74231: RET
// export function WantHeal ( sci , unit ) ; begin
74232: LD_INT 0
74234: PPUSH
// if GetTaskList ( sci ) > 0 then
74235: LD_VAR 0 1
74239: PPUSH
74240: CALL_OW 437
74244: PUSH
74245: LD_INT 0
74247: GREATER
74248: IFFALSE 74318
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74250: LD_VAR 0 1
74254: PPUSH
74255: CALL_OW 437
74259: PUSH
74260: LD_INT 1
74262: ARRAY
74263: PUSH
74264: LD_INT 1
74266: ARRAY
74267: PUSH
74268: LD_STRING l
74270: EQUAL
74271: PUSH
74272: LD_VAR 0 1
74276: PPUSH
74277: CALL_OW 437
74281: PUSH
74282: LD_INT 1
74284: ARRAY
74285: PUSH
74286: LD_INT 4
74288: ARRAY
74289: PUSH
74290: LD_VAR 0 2
74294: EQUAL
74295: AND
74296: IFFALSE 74308
// result := true else
74298: LD_ADDR_VAR 0 3
74302: PUSH
74303: LD_INT 1
74305: ST_TO_ADDR
74306: GO 74316
// result := false ;
74308: LD_ADDR_VAR 0 3
74312: PUSH
74313: LD_INT 0
74315: ST_TO_ADDR
// end else
74316: GO 74326
// result := false ;
74318: LD_ADDR_VAR 0 3
74322: PUSH
74323: LD_INT 0
74325: ST_TO_ADDR
// end ;
74326: LD_VAR 0 3
74330: RET
// export function HealTarget ( sci ) ; begin
74331: LD_INT 0
74333: PPUSH
// if not sci then
74334: LD_VAR 0 1
74338: NOT
74339: IFFALSE 74343
// exit ;
74341: GO 74408
// result := 0 ;
74343: LD_ADDR_VAR 0 2
74347: PUSH
74348: LD_INT 0
74350: ST_TO_ADDR
// if GetTaskList ( sci ) then
74351: LD_VAR 0 1
74355: PPUSH
74356: CALL_OW 437
74360: IFFALSE 74408
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74362: LD_VAR 0 1
74366: PPUSH
74367: CALL_OW 437
74371: PUSH
74372: LD_INT 1
74374: ARRAY
74375: PUSH
74376: LD_INT 1
74378: ARRAY
74379: PUSH
74380: LD_STRING l
74382: EQUAL
74383: IFFALSE 74408
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74385: LD_ADDR_VAR 0 2
74389: PUSH
74390: LD_VAR 0 1
74394: PPUSH
74395: CALL_OW 437
74399: PUSH
74400: LD_INT 1
74402: ARRAY
74403: PUSH
74404: LD_INT 4
74406: ARRAY
74407: ST_TO_ADDR
// end ;
74408: LD_VAR 0 2
74412: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74413: LD_INT 0
74415: PPUSH
74416: PPUSH
74417: PPUSH
74418: PPUSH
// if not base_units then
74419: LD_VAR 0 1
74423: NOT
74424: IFFALSE 74428
// exit ;
74426: GO 74515
// result := false ;
74428: LD_ADDR_VAR 0 2
74432: PUSH
74433: LD_INT 0
74435: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74436: LD_ADDR_VAR 0 5
74440: PUSH
74441: LD_VAR 0 1
74445: PPUSH
74446: LD_INT 21
74448: PUSH
74449: LD_INT 3
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PPUSH
74456: CALL_OW 72
74460: ST_TO_ADDR
// if not tmp then
74461: LD_VAR 0 5
74465: NOT
74466: IFFALSE 74470
// exit ;
74468: GO 74515
// for i in tmp do
74470: LD_ADDR_VAR 0 3
74474: PUSH
74475: LD_VAR 0 5
74479: PUSH
74480: FOR_IN
74481: IFFALSE 74513
// begin result := EnemyInRange ( i , 22 ) ;
74483: LD_ADDR_VAR 0 2
74487: PUSH
74488: LD_VAR 0 3
74492: PPUSH
74493: LD_INT 22
74495: PPUSH
74496: CALL 72102 0 2
74500: ST_TO_ADDR
// if result then
74501: LD_VAR 0 2
74505: IFFALSE 74511
// exit ;
74507: POP
74508: POP
74509: GO 74515
// end ;
74511: GO 74480
74513: POP
74514: POP
// end ;
74515: LD_VAR 0 2
74519: RET
// export function FilterByTag ( units , tag ) ; begin
74520: LD_INT 0
74522: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74523: LD_ADDR_VAR 0 3
74527: PUSH
74528: LD_VAR 0 1
74532: PPUSH
74533: LD_INT 120
74535: PUSH
74536: LD_VAR 0 2
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PPUSH
74545: CALL_OW 72
74549: ST_TO_ADDR
// end ;
74550: LD_VAR 0 3
74554: RET
// export function IsDriver ( un ) ; begin
74555: LD_INT 0
74557: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74558: LD_ADDR_VAR 0 2
74562: PUSH
74563: LD_VAR 0 1
74567: PUSH
74568: LD_INT 55
74570: PUSH
74571: EMPTY
74572: LIST
74573: PPUSH
74574: CALL_OW 69
74578: IN
74579: ST_TO_ADDR
// end ;
74580: LD_VAR 0 2
74584: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74585: LD_INT 0
74587: PPUSH
74588: PPUSH
// list := [ ] ;
74589: LD_ADDR_VAR 0 5
74593: PUSH
74594: EMPTY
74595: ST_TO_ADDR
// case d of 0 :
74596: LD_VAR 0 3
74600: PUSH
74601: LD_INT 0
74603: DOUBLE
74604: EQUAL
74605: IFTRUE 74609
74607: GO 74742
74609: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74610: LD_ADDR_VAR 0 5
74614: PUSH
74615: LD_VAR 0 1
74619: PUSH
74620: LD_INT 4
74622: MINUS
74623: PUSH
74624: LD_VAR 0 2
74628: PUSH
74629: LD_INT 4
74631: MINUS
74632: PUSH
74633: LD_INT 2
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: LIST
74640: PUSH
74641: LD_VAR 0 1
74645: PUSH
74646: LD_INT 3
74648: MINUS
74649: PUSH
74650: LD_VAR 0 2
74654: PUSH
74655: LD_INT 1
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: LIST
74662: PUSH
74663: LD_VAR 0 1
74667: PUSH
74668: LD_INT 4
74670: PLUS
74671: PUSH
74672: LD_VAR 0 2
74676: PUSH
74677: LD_INT 4
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: LIST
74684: PUSH
74685: LD_VAR 0 1
74689: PUSH
74690: LD_INT 3
74692: PLUS
74693: PUSH
74694: LD_VAR 0 2
74698: PUSH
74699: LD_INT 3
74701: PLUS
74702: PUSH
74703: LD_INT 5
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: LIST
74710: PUSH
74711: LD_VAR 0 1
74715: PUSH
74716: LD_VAR 0 2
74720: PUSH
74721: LD_INT 4
74723: PLUS
74724: PUSH
74725: LD_INT 0
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: LIST
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: LIST
74737: LIST
74738: LIST
74739: ST_TO_ADDR
// end ; 1 :
74740: GO 75440
74742: LD_INT 1
74744: DOUBLE
74745: EQUAL
74746: IFTRUE 74750
74748: GO 74883
74750: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74751: LD_ADDR_VAR 0 5
74755: PUSH
74756: LD_VAR 0 1
74760: PUSH
74761: LD_VAR 0 2
74765: PUSH
74766: LD_INT 4
74768: MINUS
74769: PUSH
74770: LD_INT 3
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: LIST
74777: PUSH
74778: LD_VAR 0 1
74782: PUSH
74783: LD_INT 3
74785: MINUS
74786: PUSH
74787: LD_VAR 0 2
74791: PUSH
74792: LD_INT 3
74794: MINUS
74795: PUSH
74796: LD_INT 2
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: LIST
74803: PUSH
74804: LD_VAR 0 1
74808: PUSH
74809: LD_INT 4
74811: MINUS
74812: PUSH
74813: LD_VAR 0 2
74817: PUSH
74818: LD_INT 1
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: LIST
74825: PUSH
74826: LD_VAR 0 1
74830: PUSH
74831: LD_VAR 0 2
74835: PUSH
74836: LD_INT 3
74838: PLUS
74839: PUSH
74840: LD_INT 0
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: LIST
74847: PUSH
74848: LD_VAR 0 1
74852: PUSH
74853: LD_INT 4
74855: PLUS
74856: PUSH
74857: LD_VAR 0 2
74861: PUSH
74862: LD_INT 4
74864: PLUS
74865: PUSH
74866: LD_INT 5
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: LIST
74873: PUSH
74874: EMPTY
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: ST_TO_ADDR
// end ; 2 :
74881: GO 75440
74883: LD_INT 2
74885: DOUBLE
74886: EQUAL
74887: IFTRUE 74891
74889: GO 75020
74891: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74892: LD_ADDR_VAR 0 5
74896: PUSH
74897: LD_VAR 0 1
74901: PUSH
74902: LD_VAR 0 2
74906: PUSH
74907: LD_INT 3
74909: MINUS
74910: PUSH
74911: LD_INT 3
74913: PUSH
74914: EMPTY
74915: LIST
74916: LIST
74917: LIST
74918: PUSH
74919: LD_VAR 0 1
74923: PUSH
74924: LD_INT 4
74926: PLUS
74927: PUSH
74928: LD_VAR 0 2
74932: PUSH
74933: LD_INT 4
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: LIST
74940: PUSH
74941: LD_VAR 0 1
74945: PUSH
74946: LD_VAR 0 2
74950: PUSH
74951: LD_INT 4
74953: PLUS
74954: PUSH
74955: LD_INT 0
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: LIST
74962: PUSH
74963: LD_VAR 0 1
74967: PUSH
74968: LD_INT 3
74970: MINUS
74971: PUSH
74972: LD_VAR 0 2
74976: PUSH
74977: LD_INT 1
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: LIST
74984: PUSH
74985: LD_VAR 0 1
74989: PUSH
74990: LD_INT 4
74992: MINUS
74993: PUSH
74994: LD_VAR 0 2
74998: PUSH
74999: LD_INT 4
75001: MINUS
75002: PUSH
75003: LD_INT 2
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: LIST
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: ST_TO_ADDR
// end ; 3 :
75018: GO 75440
75020: LD_INT 3
75022: DOUBLE
75023: EQUAL
75024: IFTRUE 75028
75026: GO 75161
75028: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75029: LD_ADDR_VAR 0 5
75033: PUSH
75034: LD_VAR 0 1
75038: PUSH
75039: LD_INT 3
75041: PLUS
75042: PUSH
75043: LD_VAR 0 2
75047: PUSH
75048: LD_INT 4
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: LIST
75055: PUSH
75056: LD_VAR 0 1
75060: PUSH
75061: LD_INT 4
75063: PLUS
75064: PUSH
75065: LD_VAR 0 2
75069: PUSH
75070: LD_INT 4
75072: PLUS
75073: PUSH
75074: LD_INT 5
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: LIST
75081: PUSH
75082: LD_VAR 0 1
75086: PUSH
75087: LD_INT 4
75089: MINUS
75090: PUSH
75091: LD_VAR 0 2
75095: PUSH
75096: LD_INT 1
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: LIST
75103: PUSH
75104: LD_VAR 0 1
75108: PUSH
75109: LD_VAR 0 2
75113: PUSH
75114: LD_INT 4
75116: MINUS
75117: PUSH
75118: LD_INT 3
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: LIST
75125: PUSH
75126: LD_VAR 0 1
75130: PUSH
75131: LD_INT 3
75133: MINUS
75134: PUSH
75135: LD_VAR 0 2
75139: PUSH
75140: LD_INT 3
75142: MINUS
75143: PUSH
75144: LD_INT 2
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: LIST
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: LIST
75156: LIST
75157: LIST
75158: ST_TO_ADDR
// end ; 4 :
75159: GO 75440
75161: LD_INT 4
75163: DOUBLE
75164: EQUAL
75165: IFTRUE 75169
75167: GO 75302
75169: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75170: LD_ADDR_VAR 0 5
75174: PUSH
75175: LD_VAR 0 1
75179: PUSH
75180: LD_VAR 0 2
75184: PUSH
75185: LD_INT 4
75187: PLUS
75188: PUSH
75189: LD_INT 0
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: LIST
75196: PUSH
75197: LD_VAR 0 1
75201: PUSH
75202: LD_INT 3
75204: PLUS
75205: PUSH
75206: LD_VAR 0 2
75210: PUSH
75211: LD_INT 3
75213: PLUS
75214: PUSH
75215: LD_INT 5
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: LIST
75222: PUSH
75223: LD_VAR 0 1
75227: PUSH
75228: LD_INT 4
75230: PLUS
75231: PUSH
75232: LD_VAR 0 2
75236: PUSH
75237: LD_INT 4
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: LIST
75244: PUSH
75245: LD_VAR 0 1
75249: PUSH
75250: LD_VAR 0 2
75254: PUSH
75255: LD_INT 3
75257: MINUS
75258: PUSH
75259: LD_INT 3
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: LIST
75266: PUSH
75267: LD_VAR 0 1
75271: PUSH
75272: LD_INT 4
75274: MINUS
75275: PUSH
75276: LD_VAR 0 2
75280: PUSH
75281: LD_INT 4
75283: MINUS
75284: PUSH
75285: LD_INT 2
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: LIST
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: LIST
75297: LIST
75298: LIST
75299: ST_TO_ADDR
// end ; 5 :
75300: GO 75440
75302: LD_INT 5
75304: DOUBLE
75305: EQUAL
75306: IFTRUE 75310
75308: GO 75439
75310: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75311: LD_ADDR_VAR 0 5
75315: PUSH
75316: LD_VAR 0 1
75320: PUSH
75321: LD_INT 4
75323: MINUS
75324: PUSH
75325: LD_VAR 0 2
75329: PUSH
75330: LD_INT 1
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: LIST
75337: PUSH
75338: LD_VAR 0 1
75342: PUSH
75343: LD_VAR 0 2
75347: PUSH
75348: LD_INT 4
75350: MINUS
75351: PUSH
75352: LD_INT 3
75354: PUSH
75355: EMPTY
75356: LIST
75357: LIST
75358: LIST
75359: PUSH
75360: LD_VAR 0 1
75364: PUSH
75365: LD_INT 4
75367: PLUS
75368: PUSH
75369: LD_VAR 0 2
75373: PUSH
75374: LD_INT 4
75376: PLUS
75377: PUSH
75378: LD_INT 5
75380: PUSH
75381: EMPTY
75382: LIST
75383: LIST
75384: LIST
75385: PUSH
75386: LD_VAR 0 1
75390: PUSH
75391: LD_INT 3
75393: PLUS
75394: PUSH
75395: LD_VAR 0 2
75399: PUSH
75400: LD_INT 4
75402: PUSH
75403: EMPTY
75404: LIST
75405: LIST
75406: LIST
75407: PUSH
75408: LD_VAR 0 1
75412: PUSH
75413: LD_VAR 0 2
75417: PUSH
75418: LD_INT 3
75420: PLUS
75421: PUSH
75422: LD_INT 0
75424: PUSH
75425: EMPTY
75426: LIST
75427: LIST
75428: LIST
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: ST_TO_ADDR
// end ; end ;
75437: GO 75440
75439: POP
// result := list ;
75440: LD_ADDR_VAR 0 4
75444: PUSH
75445: LD_VAR 0 5
75449: ST_TO_ADDR
// end ;
75450: LD_VAR 0 4
75454: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75455: LD_INT 0
75457: PPUSH
75458: PPUSH
75459: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75460: LD_VAR 0 1
75464: NOT
75465: PUSH
75466: LD_VAR 0 2
75470: PUSH
75471: LD_INT 1
75473: PUSH
75474: LD_INT 2
75476: PUSH
75477: LD_INT 3
75479: PUSH
75480: LD_INT 4
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: IN
75489: NOT
75490: OR
75491: IFFALSE 75495
// exit ;
75493: GO 75578
// tmp := [ ] ;
75495: LD_ADDR_VAR 0 5
75499: PUSH
75500: EMPTY
75501: ST_TO_ADDR
// for i in units do
75502: LD_ADDR_VAR 0 4
75506: PUSH
75507: LD_VAR 0 1
75511: PUSH
75512: FOR_IN
75513: IFFALSE 75547
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75515: LD_ADDR_VAR 0 5
75519: PUSH
75520: LD_VAR 0 5
75524: PPUSH
75525: LD_VAR 0 4
75529: PPUSH
75530: LD_VAR 0 2
75534: PPUSH
75535: CALL_OW 259
75539: PPUSH
75540: CALL 76939 0 2
75544: ST_TO_ADDR
75545: GO 75512
75547: POP
75548: POP
// if not tmp then
75549: LD_VAR 0 5
75553: NOT
75554: IFFALSE 75558
// exit ;
75556: GO 75578
// result := SortListByListDesc ( units , tmp ) ;
75558: LD_ADDR_VAR 0 3
75562: PUSH
75563: LD_VAR 0 1
75567: PPUSH
75568: LD_VAR 0 5
75572: PPUSH
75573: CALL_OW 77
75577: ST_TO_ADDR
// end ;
75578: LD_VAR 0 3
75582: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75583: LD_INT 0
75585: PPUSH
75586: PPUSH
75587: PPUSH
// result := false ;
75588: LD_ADDR_VAR 0 3
75592: PUSH
75593: LD_INT 0
75595: ST_TO_ADDR
// if not building then
75596: LD_VAR 0 2
75600: NOT
75601: IFFALSE 75605
// exit ;
75603: GO 75743
// x := GetX ( building ) ;
75605: LD_ADDR_VAR 0 4
75609: PUSH
75610: LD_VAR 0 2
75614: PPUSH
75615: CALL_OW 250
75619: ST_TO_ADDR
// y := GetY ( building ) ;
75620: LD_ADDR_VAR 0 5
75624: PUSH
75625: LD_VAR 0 2
75629: PPUSH
75630: CALL_OW 251
75634: ST_TO_ADDR
// if not x or not y then
75635: LD_VAR 0 4
75639: NOT
75640: PUSH
75641: LD_VAR 0 5
75645: NOT
75646: OR
75647: IFFALSE 75651
// exit ;
75649: GO 75743
// if GetTaskList ( unit ) then
75651: LD_VAR 0 1
75655: PPUSH
75656: CALL_OW 437
75660: IFFALSE 75743
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75662: LD_STRING e
75664: PUSH
75665: LD_VAR 0 1
75669: PPUSH
75670: CALL_OW 437
75674: PUSH
75675: LD_INT 1
75677: ARRAY
75678: PUSH
75679: LD_INT 1
75681: ARRAY
75682: EQUAL
75683: PUSH
75684: LD_VAR 0 4
75688: PUSH
75689: LD_VAR 0 1
75693: PPUSH
75694: CALL_OW 437
75698: PUSH
75699: LD_INT 1
75701: ARRAY
75702: PUSH
75703: LD_INT 2
75705: ARRAY
75706: EQUAL
75707: AND
75708: PUSH
75709: LD_VAR 0 5
75713: PUSH
75714: LD_VAR 0 1
75718: PPUSH
75719: CALL_OW 437
75723: PUSH
75724: LD_INT 1
75726: ARRAY
75727: PUSH
75728: LD_INT 3
75730: ARRAY
75731: EQUAL
75732: AND
75733: IFFALSE 75743
// result := true end ;
75735: LD_ADDR_VAR 0 3
75739: PUSH
75740: LD_INT 1
75742: ST_TO_ADDR
// end ;
75743: LD_VAR 0 3
75747: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75748: LD_INT 0
75750: PPUSH
// result := false ;
75751: LD_ADDR_VAR 0 4
75755: PUSH
75756: LD_INT 0
75758: ST_TO_ADDR
// if GetTaskList ( unit ) then
75759: LD_VAR 0 1
75763: PPUSH
75764: CALL_OW 437
75768: IFFALSE 75851
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75770: LD_STRING M
75772: PUSH
75773: LD_VAR 0 1
75777: PPUSH
75778: CALL_OW 437
75782: PUSH
75783: LD_INT 1
75785: ARRAY
75786: PUSH
75787: LD_INT 1
75789: ARRAY
75790: EQUAL
75791: PUSH
75792: LD_VAR 0 2
75796: PUSH
75797: LD_VAR 0 1
75801: PPUSH
75802: CALL_OW 437
75806: PUSH
75807: LD_INT 1
75809: ARRAY
75810: PUSH
75811: LD_INT 2
75813: ARRAY
75814: EQUAL
75815: AND
75816: PUSH
75817: LD_VAR 0 3
75821: PUSH
75822: LD_VAR 0 1
75826: PPUSH
75827: CALL_OW 437
75831: PUSH
75832: LD_INT 1
75834: ARRAY
75835: PUSH
75836: LD_INT 3
75838: ARRAY
75839: EQUAL
75840: AND
75841: IFFALSE 75851
// result := true ;
75843: LD_ADDR_VAR 0 4
75847: PUSH
75848: LD_INT 1
75850: ST_TO_ADDR
// end ; end ;
75851: LD_VAR 0 4
75855: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75856: LD_INT 0
75858: PPUSH
75859: PPUSH
75860: PPUSH
75861: PPUSH
// if not unit or not area then
75862: LD_VAR 0 1
75866: NOT
75867: PUSH
75868: LD_VAR 0 2
75872: NOT
75873: OR
75874: IFFALSE 75878
// exit ;
75876: GO 76042
// tmp := AreaToList ( area , i ) ;
75878: LD_ADDR_VAR 0 6
75882: PUSH
75883: LD_VAR 0 2
75887: PPUSH
75888: LD_VAR 0 5
75892: PPUSH
75893: CALL_OW 517
75897: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75898: LD_ADDR_VAR 0 5
75902: PUSH
75903: DOUBLE
75904: LD_INT 1
75906: DEC
75907: ST_TO_ADDR
75908: LD_VAR 0 6
75912: PUSH
75913: LD_INT 1
75915: ARRAY
75916: PUSH
75917: FOR_TO
75918: IFFALSE 76040
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75920: LD_ADDR_VAR 0 7
75924: PUSH
75925: LD_VAR 0 6
75929: PUSH
75930: LD_INT 1
75932: ARRAY
75933: PUSH
75934: LD_VAR 0 5
75938: ARRAY
75939: PUSH
75940: LD_VAR 0 6
75944: PUSH
75945: LD_INT 2
75947: ARRAY
75948: PUSH
75949: LD_VAR 0 5
75953: ARRAY
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75959: LD_VAR 0 7
75963: PUSH
75964: LD_INT 1
75966: ARRAY
75967: PPUSH
75968: LD_VAR 0 7
75972: PUSH
75973: LD_INT 2
75975: ARRAY
75976: PPUSH
75977: CALL_OW 428
75981: PUSH
75982: LD_INT 0
75984: EQUAL
75985: IFFALSE 76038
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75987: LD_VAR 0 1
75991: PPUSH
75992: LD_VAR 0 7
75996: PUSH
75997: LD_INT 1
75999: ARRAY
76000: PPUSH
76001: LD_VAR 0 7
76005: PUSH
76006: LD_INT 2
76008: ARRAY
76009: PPUSH
76010: LD_VAR 0 3
76014: PPUSH
76015: CALL_OW 48
// result := IsPlaced ( unit ) ;
76019: LD_ADDR_VAR 0 4
76023: PUSH
76024: LD_VAR 0 1
76028: PPUSH
76029: CALL_OW 305
76033: ST_TO_ADDR
// exit ;
76034: POP
76035: POP
76036: GO 76042
// end ; end ;
76038: GO 75917
76040: POP
76041: POP
// end ;
76042: LD_VAR 0 4
76046: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76047: LD_INT 0
76049: PPUSH
76050: PPUSH
76051: PPUSH
// if not side or side > 8 then
76052: LD_VAR 0 1
76056: NOT
76057: PUSH
76058: LD_VAR 0 1
76062: PUSH
76063: LD_INT 8
76065: GREATER
76066: OR
76067: IFFALSE 76071
// exit ;
76069: GO 76258
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76071: LD_ADDR_VAR 0 4
76075: PUSH
76076: LD_INT 22
76078: PUSH
76079: LD_VAR 0 1
76083: PUSH
76084: EMPTY
76085: LIST
76086: LIST
76087: PUSH
76088: LD_INT 21
76090: PUSH
76091: LD_INT 3
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: PPUSH
76102: CALL_OW 69
76106: ST_TO_ADDR
// if not tmp then
76107: LD_VAR 0 4
76111: NOT
76112: IFFALSE 76116
// exit ;
76114: GO 76258
// enable_addtolog := true ;
76116: LD_ADDR_OWVAR 81
76120: PUSH
76121: LD_INT 1
76123: ST_TO_ADDR
// AddToLog ( [ ) ;
76124: LD_STRING [
76126: PPUSH
76127: CALL_OW 561
// for i in tmp do
76131: LD_ADDR_VAR 0 3
76135: PUSH
76136: LD_VAR 0 4
76140: PUSH
76141: FOR_IN
76142: IFFALSE 76249
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76144: LD_STRING [
76146: PUSH
76147: LD_VAR 0 3
76151: PPUSH
76152: CALL_OW 266
76156: STR
76157: PUSH
76158: LD_STRING , 
76160: STR
76161: PUSH
76162: LD_VAR 0 3
76166: PPUSH
76167: CALL_OW 250
76171: STR
76172: PUSH
76173: LD_STRING , 
76175: STR
76176: PUSH
76177: LD_VAR 0 3
76181: PPUSH
76182: CALL_OW 251
76186: STR
76187: PUSH
76188: LD_STRING , 
76190: STR
76191: PUSH
76192: LD_VAR 0 3
76196: PPUSH
76197: CALL_OW 254
76201: STR
76202: PUSH
76203: LD_STRING , 
76205: STR
76206: PUSH
76207: LD_VAR 0 3
76211: PPUSH
76212: LD_INT 1
76214: PPUSH
76215: CALL_OW 268
76219: STR
76220: PUSH
76221: LD_STRING , 
76223: STR
76224: PUSH
76225: LD_VAR 0 3
76229: PPUSH
76230: LD_INT 2
76232: PPUSH
76233: CALL_OW 268
76237: STR
76238: PUSH
76239: LD_STRING ],
76241: STR
76242: PPUSH
76243: CALL_OW 561
// end ;
76247: GO 76141
76249: POP
76250: POP
// AddToLog ( ]; ) ;
76251: LD_STRING ];
76253: PPUSH
76254: CALL_OW 561
// end ;
76258: LD_VAR 0 2
76262: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76263: LD_INT 0
76265: PPUSH
76266: PPUSH
76267: PPUSH
76268: PPUSH
76269: PPUSH
// if not area or not rate or not max then
76270: LD_VAR 0 1
76274: NOT
76275: PUSH
76276: LD_VAR 0 2
76280: NOT
76281: OR
76282: PUSH
76283: LD_VAR 0 4
76287: NOT
76288: OR
76289: IFFALSE 76293
// exit ;
76291: GO 76482
// while 1 do
76293: LD_INT 1
76295: IFFALSE 76482
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76297: LD_ADDR_VAR 0 9
76301: PUSH
76302: LD_VAR 0 1
76306: PPUSH
76307: LD_INT 1
76309: PPUSH
76310: CALL_OW 287
76314: PUSH
76315: LD_INT 10
76317: MUL
76318: ST_TO_ADDR
// r := rate / 10 ;
76319: LD_ADDR_VAR 0 7
76323: PUSH
76324: LD_VAR 0 2
76328: PUSH
76329: LD_INT 10
76331: DIVREAL
76332: ST_TO_ADDR
// time := 1 1$00 ;
76333: LD_ADDR_VAR 0 8
76337: PUSH
76338: LD_INT 2100
76340: ST_TO_ADDR
// if amount < min then
76341: LD_VAR 0 9
76345: PUSH
76346: LD_VAR 0 3
76350: LESS
76351: IFFALSE 76369
// r := r * 2 else
76353: LD_ADDR_VAR 0 7
76357: PUSH
76358: LD_VAR 0 7
76362: PUSH
76363: LD_INT 2
76365: MUL
76366: ST_TO_ADDR
76367: GO 76395
// if amount > max then
76369: LD_VAR 0 9
76373: PUSH
76374: LD_VAR 0 4
76378: GREATER
76379: IFFALSE 76395
// r := r / 2 ;
76381: LD_ADDR_VAR 0 7
76385: PUSH
76386: LD_VAR 0 7
76390: PUSH
76391: LD_INT 2
76393: DIVREAL
76394: ST_TO_ADDR
// time := time / r ;
76395: LD_ADDR_VAR 0 8
76399: PUSH
76400: LD_VAR 0 8
76404: PUSH
76405: LD_VAR 0 7
76409: DIVREAL
76410: ST_TO_ADDR
// if time < 0 then
76411: LD_VAR 0 8
76415: PUSH
76416: LD_INT 0
76418: LESS
76419: IFFALSE 76436
// time := time * - 1 ;
76421: LD_ADDR_VAR 0 8
76425: PUSH
76426: LD_VAR 0 8
76430: PUSH
76431: LD_INT 1
76433: NEG
76434: MUL
76435: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76436: LD_VAR 0 8
76440: PUSH
76441: LD_INT 35
76443: PPUSH
76444: LD_INT 875
76446: PPUSH
76447: CALL_OW 12
76451: PLUS
76452: PPUSH
76453: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76457: LD_INT 1
76459: PPUSH
76460: LD_INT 5
76462: PPUSH
76463: CALL_OW 12
76467: PPUSH
76468: LD_VAR 0 1
76472: PPUSH
76473: LD_INT 1
76475: PPUSH
76476: CALL_OW 55
// end ;
76480: GO 76293
// end ;
76482: LD_VAR 0 5
76486: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76487: LD_INT 0
76489: PPUSH
76490: PPUSH
76491: PPUSH
76492: PPUSH
76493: PPUSH
76494: PPUSH
76495: PPUSH
76496: PPUSH
// if not turrets or not factories then
76497: LD_VAR 0 1
76501: NOT
76502: PUSH
76503: LD_VAR 0 2
76507: NOT
76508: OR
76509: IFFALSE 76513
// exit ;
76511: GO 76820
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76513: LD_ADDR_VAR 0 10
76517: PUSH
76518: LD_INT 5
76520: PUSH
76521: LD_INT 6
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PUSH
76528: LD_INT 2
76530: PUSH
76531: LD_INT 4
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: PUSH
76538: LD_INT 3
76540: PUSH
76541: LD_INT 5
76543: PUSH
76544: EMPTY
76545: LIST
76546: LIST
76547: PUSH
76548: EMPTY
76549: LIST
76550: LIST
76551: LIST
76552: PUSH
76553: LD_INT 24
76555: PUSH
76556: LD_INT 25
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: PUSH
76563: LD_INT 23
76565: PUSH
76566: LD_INT 27
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: PUSH
76573: EMPTY
76574: LIST
76575: LIST
76576: PUSH
76577: LD_INT 42
76579: PUSH
76580: LD_INT 43
76582: PUSH
76583: EMPTY
76584: LIST
76585: LIST
76586: PUSH
76587: LD_INT 44
76589: PUSH
76590: LD_INT 46
76592: PUSH
76593: EMPTY
76594: LIST
76595: LIST
76596: PUSH
76597: LD_INT 45
76599: PUSH
76600: LD_INT 47
76602: PUSH
76603: EMPTY
76604: LIST
76605: LIST
76606: PUSH
76607: EMPTY
76608: LIST
76609: LIST
76610: LIST
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: LIST
76616: ST_TO_ADDR
// result := [ ] ;
76617: LD_ADDR_VAR 0 3
76621: PUSH
76622: EMPTY
76623: ST_TO_ADDR
// for i in turrets do
76624: LD_ADDR_VAR 0 4
76628: PUSH
76629: LD_VAR 0 1
76633: PUSH
76634: FOR_IN
76635: IFFALSE 76818
// begin nat := GetNation ( i ) ;
76637: LD_ADDR_VAR 0 7
76641: PUSH
76642: LD_VAR 0 4
76646: PPUSH
76647: CALL_OW 248
76651: ST_TO_ADDR
// weapon := 0 ;
76652: LD_ADDR_VAR 0 8
76656: PUSH
76657: LD_INT 0
76659: ST_TO_ADDR
// if not nat then
76660: LD_VAR 0 7
76664: NOT
76665: IFFALSE 76669
// continue ;
76667: GO 76634
// for j in list [ nat ] do
76669: LD_ADDR_VAR 0 5
76673: PUSH
76674: LD_VAR 0 10
76678: PUSH
76679: LD_VAR 0 7
76683: ARRAY
76684: PUSH
76685: FOR_IN
76686: IFFALSE 76727
// if GetBWeapon ( i ) = j [ 1 ] then
76688: LD_VAR 0 4
76692: PPUSH
76693: CALL_OW 269
76697: PUSH
76698: LD_VAR 0 5
76702: PUSH
76703: LD_INT 1
76705: ARRAY
76706: EQUAL
76707: IFFALSE 76725
// begin weapon := j [ 2 ] ;
76709: LD_ADDR_VAR 0 8
76713: PUSH
76714: LD_VAR 0 5
76718: PUSH
76719: LD_INT 2
76721: ARRAY
76722: ST_TO_ADDR
// break ;
76723: GO 76727
// end ;
76725: GO 76685
76727: POP
76728: POP
// if not weapon then
76729: LD_VAR 0 8
76733: NOT
76734: IFFALSE 76738
// continue ;
76736: GO 76634
// for k in factories do
76738: LD_ADDR_VAR 0 6
76742: PUSH
76743: LD_VAR 0 2
76747: PUSH
76748: FOR_IN
76749: IFFALSE 76814
// begin weapons := AvailableWeaponList ( k ) ;
76751: LD_ADDR_VAR 0 9
76755: PUSH
76756: LD_VAR 0 6
76760: PPUSH
76761: CALL_OW 478
76765: ST_TO_ADDR
// if not weapons then
76766: LD_VAR 0 9
76770: NOT
76771: IFFALSE 76775
// continue ;
76773: GO 76748
// if weapon in weapons then
76775: LD_VAR 0 8
76779: PUSH
76780: LD_VAR 0 9
76784: IN
76785: IFFALSE 76812
// begin result := [ i , weapon ] ;
76787: LD_ADDR_VAR 0 3
76791: PUSH
76792: LD_VAR 0 4
76796: PUSH
76797: LD_VAR 0 8
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: ST_TO_ADDR
// exit ;
76806: POP
76807: POP
76808: POP
76809: POP
76810: GO 76820
// end ; end ;
76812: GO 76748
76814: POP
76815: POP
// end ;
76816: GO 76634
76818: POP
76819: POP
// end ;
76820: LD_VAR 0 3
76824: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76825: LD_INT 0
76827: PPUSH
// if not side or side > 8 then
76828: LD_VAR 0 3
76832: NOT
76833: PUSH
76834: LD_VAR 0 3
76838: PUSH
76839: LD_INT 8
76841: GREATER
76842: OR
76843: IFFALSE 76847
// exit ;
76845: GO 76906
// if not range then
76847: LD_VAR 0 4
76851: NOT
76852: IFFALSE 76863
// range := - 12 ;
76854: LD_ADDR_VAR 0 4
76858: PUSH
76859: LD_INT 12
76861: NEG
76862: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76863: LD_VAR 0 1
76867: PPUSH
76868: LD_VAR 0 2
76872: PPUSH
76873: LD_VAR 0 3
76877: PPUSH
76878: LD_VAR 0 4
76882: PPUSH
76883: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76887: LD_VAR 0 1
76891: PPUSH
76892: LD_VAR 0 2
76896: PPUSH
76897: LD_VAR 0 3
76901: PPUSH
76902: CALL_OW 331
// end ;
76906: LD_VAR 0 5
76910: RET
// export function Video ( mode ) ; begin
76911: LD_INT 0
76913: PPUSH
// ingame_video = mode ;
76914: LD_ADDR_OWVAR 52
76918: PUSH
76919: LD_VAR 0 1
76923: ST_TO_ADDR
// interface_hidden = mode ;
76924: LD_ADDR_OWVAR 54
76928: PUSH
76929: LD_VAR 0 1
76933: ST_TO_ADDR
// end ;
76934: LD_VAR 0 2
76938: RET
// export function Join ( array , element ) ; begin
76939: LD_INT 0
76941: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76942: LD_ADDR_VAR 0 3
76946: PUSH
76947: LD_VAR 0 1
76951: PPUSH
76952: LD_VAR 0 1
76956: PUSH
76957: LD_INT 1
76959: PLUS
76960: PPUSH
76961: LD_VAR 0 2
76965: PPUSH
76966: CALL_OW 1
76970: ST_TO_ADDR
// end ;
76971: LD_VAR 0 3
76975: RET
// export function JoinUnion ( array , element ) ; begin
76976: LD_INT 0
76978: PPUSH
// result := array union element ;
76979: LD_ADDR_VAR 0 3
76983: PUSH
76984: LD_VAR 0 1
76988: PUSH
76989: LD_VAR 0 2
76993: UNION
76994: ST_TO_ADDR
// end ;
76995: LD_VAR 0 3
76999: RET
// export function GetBehemoths ( side ) ; begin
77000: LD_INT 0
77002: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77003: LD_ADDR_VAR 0 2
77007: PUSH
77008: LD_INT 22
77010: PUSH
77011: LD_VAR 0 1
77015: PUSH
77016: EMPTY
77017: LIST
77018: LIST
77019: PUSH
77020: LD_INT 31
77022: PUSH
77023: LD_INT 25
77025: PUSH
77026: EMPTY
77027: LIST
77028: LIST
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: PPUSH
77034: CALL_OW 69
77038: ST_TO_ADDR
// end ;
77039: LD_VAR 0 2
77043: RET
// export function Shuffle ( array ) ; var i , index ; begin
77044: LD_INT 0
77046: PPUSH
77047: PPUSH
77048: PPUSH
// result := [ ] ;
77049: LD_ADDR_VAR 0 2
77053: PUSH
77054: EMPTY
77055: ST_TO_ADDR
// if not array then
77056: LD_VAR 0 1
77060: NOT
77061: IFFALSE 77065
// exit ;
77063: GO 77164
// Randomize ;
77065: CALL_OW 10
// for i = array downto 1 do
77069: LD_ADDR_VAR 0 3
77073: PUSH
77074: DOUBLE
77075: LD_VAR 0 1
77079: INC
77080: ST_TO_ADDR
77081: LD_INT 1
77083: PUSH
77084: FOR_DOWNTO
77085: IFFALSE 77162
// begin index := rand ( 1 , array ) ;
77087: LD_ADDR_VAR 0 4
77091: PUSH
77092: LD_INT 1
77094: PPUSH
77095: LD_VAR 0 1
77099: PPUSH
77100: CALL_OW 12
77104: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77105: LD_ADDR_VAR 0 2
77109: PUSH
77110: LD_VAR 0 2
77114: PPUSH
77115: LD_VAR 0 2
77119: PUSH
77120: LD_INT 1
77122: PLUS
77123: PPUSH
77124: LD_VAR 0 1
77128: PUSH
77129: LD_VAR 0 4
77133: ARRAY
77134: PPUSH
77135: CALL_OW 2
77139: ST_TO_ADDR
// array := Delete ( array , index ) ;
77140: LD_ADDR_VAR 0 1
77144: PUSH
77145: LD_VAR 0 1
77149: PPUSH
77150: LD_VAR 0 4
77154: PPUSH
77155: CALL_OW 3
77159: ST_TO_ADDR
// end ;
77160: GO 77084
77162: POP
77163: POP
// end ;
77164: LD_VAR 0 2
77168: RET
// export function GetBaseMaterials ( base ) ; begin
77169: LD_INT 0
77171: PPUSH
// result := [ 0 , 0 , 0 ] ;
77172: LD_ADDR_VAR 0 2
77176: PUSH
77177: LD_INT 0
77179: PUSH
77180: LD_INT 0
77182: PUSH
77183: LD_INT 0
77185: PUSH
77186: EMPTY
77187: LIST
77188: LIST
77189: LIST
77190: ST_TO_ADDR
// if not base then
77191: LD_VAR 0 1
77195: NOT
77196: IFFALSE 77200
// exit ;
77198: GO 77249
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77200: LD_ADDR_VAR 0 2
77204: PUSH
77205: LD_VAR 0 1
77209: PPUSH
77210: LD_INT 1
77212: PPUSH
77213: CALL_OW 275
77217: PUSH
77218: LD_VAR 0 1
77222: PPUSH
77223: LD_INT 2
77225: PPUSH
77226: CALL_OW 275
77230: PUSH
77231: LD_VAR 0 1
77235: PPUSH
77236: LD_INT 3
77238: PPUSH
77239: CALL_OW 275
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: LIST
77248: ST_TO_ADDR
// end ;
77249: LD_VAR 0 2
77253: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77254: LD_INT 0
77256: PPUSH
77257: PPUSH
// result := array ;
77258: LD_ADDR_VAR 0 3
77262: PUSH
77263: LD_VAR 0 1
77267: ST_TO_ADDR
// if size >= result then
77268: LD_VAR 0 2
77272: PUSH
77273: LD_VAR 0 3
77277: GREATEREQUAL
77278: IFFALSE 77282
// exit ;
77280: GO 77332
// if size then
77282: LD_VAR 0 2
77286: IFFALSE 77332
// for i := array downto size do
77288: LD_ADDR_VAR 0 4
77292: PUSH
77293: DOUBLE
77294: LD_VAR 0 1
77298: INC
77299: ST_TO_ADDR
77300: LD_VAR 0 2
77304: PUSH
77305: FOR_DOWNTO
77306: IFFALSE 77330
// result := Delete ( result , result ) ;
77308: LD_ADDR_VAR 0 3
77312: PUSH
77313: LD_VAR 0 3
77317: PPUSH
77318: LD_VAR 0 3
77322: PPUSH
77323: CALL_OW 3
77327: ST_TO_ADDR
77328: GO 77305
77330: POP
77331: POP
// end ;
77332: LD_VAR 0 3
77336: RET
// export function ComExit ( unit ) ; var tmp ; begin
77337: LD_INT 0
77339: PPUSH
77340: PPUSH
// if not IsInUnit ( unit ) then
77341: LD_VAR 0 1
77345: PPUSH
77346: CALL_OW 310
77350: NOT
77351: IFFALSE 77355
// exit ;
77353: GO 77415
// tmp := IsInUnit ( unit ) ;
77355: LD_ADDR_VAR 0 3
77359: PUSH
77360: LD_VAR 0 1
77364: PPUSH
77365: CALL_OW 310
77369: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77370: LD_VAR 0 3
77374: PPUSH
77375: CALL_OW 247
77379: PUSH
77380: LD_INT 2
77382: EQUAL
77383: IFFALSE 77396
// ComExitVehicle ( unit ) else
77385: LD_VAR 0 1
77389: PPUSH
77390: CALL_OW 121
77394: GO 77405
// ComExitBuilding ( unit ) ;
77396: LD_VAR 0 1
77400: PPUSH
77401: CALL_OW 122
// result := tmp ;
77405: LD_ADDR_VAR 0 2
77409: PUSH
77410: LD_VAR 0 3
77414: ST_TO_ADDR
// end ;
77415: LD_VAR 0 2
77419: RET
// export function ComExitAll ( units ) ; var i ; begin
77420: LD_INT 0
77422: PPUSH
77423: PPUSH
// if not units then
77424: LD_VAR 0 1
77428: NOT
77429: IFFALSE 77433
// exit ;
77431: GO 77459
// for i in units do
77433: LD_ADDR_VAR 0 3
77437: PUSH
77438: LD_VAR 0 1
77442: PUSH
77443: FOR_IN
77444: IFFALSE 77457
// ComExit ( i ) ;
77446: LD_VAR 0 3
77450: PPUSH
77451: CALL 77337 0 1
77455: GO 77443
77457: POP
77458: POP
// end ;
77459: LD_VAR 0 2
77463: RET
// export function ResetHc ; begin
77464: LD_INT 0
77466: PPUSH
// InitHc ;
77467: CALL_OW 19
// hc_importance := 0 ;
77471: LD_ADDR_OWVAR 32
77475: PUSH
77476: LD_INT 0
77478: ST_TO_ADDR
// end ;
77479: LD_VAR 0 1
77483: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77484: LD_INT 0
77486: PPUSH
77487: PPUSH
77488: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77489: LD_ADDR_VAR 0 6
77493: PUSH
77494: LD_VAR 0 1
77498: PUSH
77499: LD_VAR 0 3
77503: PLUS
77504: PUSH
77505: LD_INT 2
77507: DIV
77508: ST_TO_ADDR
// if _x < 0 then
77509: LD_VAR 0 6
77513: PUSH
77514: LD_INT 0
77516: LESS
77517: IFFALSE 77534
// _x := _x * - 1 ;
77519: LD_ADDR_VAR 0 6
77523: PUSH
77524: LD_VAR 0 6
77528: PUSH
77529: LD_INT 1
77531: NEG
77532: MUL
77533: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77534: LD_ADDR_VAR 0 7
77538: PUSH
77539: LD_VAR 0 2
77543: PUSH
77544: LD_VAR 0 4
77548: PLUS
77549: PUSH
77550: LD_INT 2
77552: DIV
77553: ST_TO_ADDR
// if _y < 0 then
77554: LD_VAR 0 7
77558: PUSH
77559: LD_INT 0
77561: LESS
77562: IFFALSE 77579
// _y := _y * - 1 ;
77564: LD_ADDR_VAR 0 7
77568: PUSH
77569: LD_VAR 0 7
77573: PUSH
77574: LD_INT 1
77576: NEG
77577: MUL
77578: ST_TO_ADDR
// result := [ _x , _y ] ;
77579: LD_ADDR_VAR 0 5
77583: PUSH
77584: LD_VAR 0 6
77588: PUSH
77589: LD_VAR 0 7
77593: PUSH
77594: EMPTY
77595: LIST
77596: LIST
77597: ST_TO_ADDR
// end ;
77598: LD_VAR 0 5
77602: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77603: LD_INT 0
77605: PPUSH
77606: PPUSH
77607: PPUSH
77608: PPUSH
// task := GetTaskList ( unit ) ;
77609: LD_ADDR_VAR 0 7
77613: PUSH
77614: LD_VAR 0 1
77618: PPUSH
77619: CALL_OW 437
77623: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77624: LD_VAR 0 7
77628: NOT
77629: PUSH
77630: LD_VAR 0 1
77634: PPUSH
77635: LD_VAR 0 2
77639: PPUSH
77640: CALL_OW 308
77644: NOT
77645: AND
77646: IFFALSE 77650
// exit ;
77648: GO 77768
// if IsInArea ( unit , area ) then
77650: LD_VAR 0 1
77654: PPUSH
77655: LD_VAR 0 2
77659: PPUSH
77660: CALL_OW 308
77664: IFFALSE 77682
// begin ComMoveToArea ( unit , goAway ) ;
77666: LD_VAR 0 1
77670: PPUSH
77671: LD_VAR 0 3
77675: PPUSH
77676: CALL_OW 113
// exit ;
77680: GO 77768
// end ; if task [ 1 ] [ 1 ] <> M then
77682: LD_VAR 0 7
77686: PUSH
77687: LD_INT 1
77689: ARRAY
77690: PUSH
77691: LD_INT 1
77693: ARRAY
77694: PUSH
77695: LD_STRING M
77697: NONEQUAL
77698: IFFALSE 77702
// exit ;
77700: GO 77768
// x := task [ 1 ] [ 2 ] ;
77702: LD_ADDR_VAR 0 5
77706: PUSH
77707: LD_VAR 0 7
77711: PUSH
77712: LD_INT 1
77714: ARRAY
77715: PUSH
77716: LD_INT 2
77718: ARRAY
77719: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77720: LD_ADDR_VAR 0 6
77724: PUSH
77725: LD_VAR 0 7
77729: PUSH
77730: LD_INT 1
77732: ARRAY
77733: PUSH
77734: LD_INT 3
77736: ARRAY
77737: ST_TO_ADDR
// if InArea ( x , y , area ) then
77738: LD_VAR 0 5
77742: PPUSH
77743: LD_VAR 0 6
77747: PPUSH
77748: LD_VAR 0 2
77752: PPUSH
77753: CALL_OW 309
77757: IFFALSE 77768
// ComStop ( unit ) ;
77759: LD_VAR 0 1
77763: PPUSH
77764: CALL_OW 141
// end ;
77768: LD_VAR 0 4
77772: RET
// export function Abs ( value ) ; begin
77773: LD_INT 0
77775: PPUSH
// result := value ;
77776: LD_ADDR_VAR 0 2
77780: PUSH
77781: LD_VAR 0 1
77785: ST_TO_ADDR
// if value < 0 then
77786: LD_VAR 0 1
77790: PUSH
77791: LD_INT 0
77793: LESS
77794: IFFALSE 77811
// result := value * - 1 ;
77796: LD_ADDR_VAR 0 2
77800: PUSH
77801: LD_VAR 0 1
77805: PUSH
77806: LD_INT 1
77808: NEG
77809: MUL
77810: ST_TO_ADDR
// end ;
77811: LD_VAR 0 2
77815: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77816: LD_INT 0
77818: PPUSH
77819: PPUSH
77820: PPUSH
77821: PPUSH
77822: PPUSH
77823: PPUSH
77824: PPUSH
77825: PPUSH
// if not unit or not building then
77826: LD_VAR 0 1
77830: NOT
77831: PUSH
77832: LD_VAR 0 2
77836: NOT
77837: OR
77838: IFFALSE 77842
// exit ;
77840: GO 78068
// x := GetX ( building ) ;
77842: LD_ADDR_VAR 0 4
77846: PUSH
77847: LD_VAR 0 2
77851: PPUSH
77852: CALL_OW 250
77856: ST_TO_ADDR
// y := GetY ( building ) ;
77857: LD_ADDR_VAR 0 6
77861: PUSH
77862: LD_VAR 0 2
77866: PPUSH
77867: CALL_OW 251
77871: ST_TO_ADDR
// d := GetDir ( building ) ;
77872: LD_ADDR_VAR 0 8
77876: PUSH
77877: LD_VAR 0 2
77881: PPUSH
77882: CALL_OW 254
77886: ST_TO_ADDR
// r := 4 ;
77887: LD_ADDR_VAR 0 9
77891: PUSH
77892: LD_INT 4
77894: ST_TO_ADDR
// for i := 1 to 5 do
77895: LD_ADDR_VAR 0 10
77899: PUSH
77900: DOUBLE
77901: LD_INT 1
77903: DEC
77904: ST_TO_ADDR
77905: LD_INT 5
77907: PUSH
77908: FOR_TO
77909: IFFALSE 78066
// begin _x := ShiftX ( x , d , r + i ) ;
77911: LD_ADDR_VAR 0 5
77915: PUSH
77916: LD_VAR 0 4
77920: PPUSH
77921: LD_VAR 0 8
77925: PPUSH
77926: LD_VAR 0 9
77930: PUSH
77931: LD_VAR 0 10
77935: PLUS
77936: PPUSH
77937: CALL_OW 272
77941: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77942: LD_ADDR_VAR 0 7
77946: PUSH
77947: LD_VAR 0 6
77951: PPUSH
77952: LD_VAR 0 8
77956: PPUSH
77957: LD_VAR 0 9
77961: PUSH
77962: LD_VAR 0 10
77966: PLUS
77967: PPUSH
77968: CALL_OW 273
77972: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77973: LD_VAR 0 5
77977: PPUSH
77978: LD_VAR 0 7
77982: PPUSH
77983: CALL_OW 488
77987: PUSH
77988: LD_VAR 0 5
77992: PPUSH
77993: LD_VAR 0 7
77997: PPUSH
77998: CALL_OW 428
78002: PPUSH
78003: CALL_OW 247
78007: PUSH
78008: LD_INT 3
78010: PUSH
78011: LD_INT 2
78013: PUSH
78014: EMPTY
78015: LIST
78016: LIST
78017: IN
78018: NOT
78019: AND
78020: IFFALSE 78064
// begin ComMoveXY ( unit , _x , _y ) ;
78022: LD_VAR 0 1
78026: PPUSH
78027: LD_VAR 0 5
78031: PPUSH
78032: LD_VAR 0 7
78036: PPUSH
78037: CALL_OW 111
// result := [ _x , _y ] ;
78041: LD_ADDR_VAR 0 3
78045: PUSH
78046: LD_VAR 0 5
78050: PUSH
78051: LD_VAR 0 7
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: ST_TO_ADDR
// exit ;
78060: POP
78061: POP
78062: GO 78068
// end ; end ;
78064: GO 77908
78066: POP
78067: POP
// end ;
78068: LD_VAR 0 3
78072: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78073: LD_INT 0
78075: PPUSH
78076: PPUSH
78077: PPUSH
// result := 0 ;
78078: LD_ADDR_VAR 0 3
78082: PUSH
78083: LD_INT 0
78085: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78086: LD_VAR 0 1
78090: PUSH
78091: LD_INT 0
78093: LESS
78094: PUSH
78095: LD_VAR 0 1
78099: PUSH
78100: LD_INT 8
78102: GREATER
78103: OR
78104: PUSH
78105: LD_VAR 0 2
78109: PUSH
78110: LD_INT 0
78112: LESS
78113: OR
78114: PUSH
78115: LD_VAR 0 2
78119: PUSH
78120: LD_INT 8
78122: GREATER
78123: OR
78124: IFFALSE 78128
// exit ;
78126: GO 78203
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78128: LD_ADDR_VAR 0 4
78132: PUSH
78133: LD_INT 22
78135: PUSH
78136: LD_VAR 0 2
78140: PUSH
78141: EMPTY
78142: LIST
78143: LIST
78144: PPUSH
78145: CALL_OW 69
78149: PUSH
78150: FOR_IN
78151: IFFALSE 78201
// begin un := UnitShoot ( i ) ;
78153: LD_ADDR_VAR 0 5
78157: PUSH
78158: LD_VAR 0 4
78162: PPUSH
78163: CALL_OW 504
78167: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78168: LD_VAR 0 5
78172: PPUSH
78173: CALL_OW 255
78177: PUSH
78178: LD_VAR 0 1
78182: EQUAL
78183: IFFALSE 78199
// begin result := un ;
78185: LD_ADDR_VAR 0 3
78189: PUSH
78190: LD_VAR 0 5
78194: ST_TO_ADDR
// exit ;
78195: POP
78196: POP
78197: GO 78203
// end ; end ;
78199: GO 78150
78201: POP
78202: POP
// end ;
78203: LD_VAR 0 3
78207: RET
// export function GetCargoBay ( units ) ; begin
78208: LD_INT 0
78210: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78211: LD_ADDR_VAR 0 2
78215: PUSH
78216: LD_VAR 0 1
78220: PPUSH
78221: LD_INT 2
78223: PUSH
78224: LD_INT 34
78226: PUSH
78227: LD_INT 12
78229: PUSH
78230: EMPTY
78231: LIST
78232: LIST
78233: PUSH
78234: LD_INT 34
78236: PUSH
78237: LD_INT 51
78239: PUSH
78240: EMPTY
78241: LIST
78242: LIST
78243: PUSH
78244: LD_INT 34
78246: PUSH
78247: LD_INT 32
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: PUSH
78254: LD_INT 34
78256: PUSH
78257: LD_INT 89
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: LIST
78268: LIST
78269: LIST
78270: PPUSH
78271: CALL_OW 72
78275: ST_TO_ADDR
// end ;
78276: LD_VAR 0 2
78280: RET
// export function Negate ( value ) ; begin
78281: LD_INT 0
78283: PPUSH
// result := not value ;
78284: LD_ADDR_VAR 0 2
78288: PUSH
78289: LD_VAR 0 1
78293: NOT
78294: ST_TO_ADDR
// end ;
78295: LD_VAR 0 2
78299: RET
// export function Inc ( value ) ; begin
78300: LD_INT 0
78302: PPUSH
// result := value + 1 ;
78303: LD_ADDR_VAR 0 2
78307: PUSH
78308: LD_VAR 0 1
78312: PUSH
78313: LD_INT 1
78315: PLUS
78316: ST_TO_ADDR
// end ;
78317: LD_VAR 0 2
78321: RET
// export function Dec ( value ) ; begin
78322: LD_INT 0
78324: PPUSH
// result := value - 1 ;
78325: LD_ADDR_VAR 0 2
78329: PUSH
78330: LD_VAR 0 1
78334: PUSH
78335: LD_INT 1
78337: MINUS
78338: ST_TO_ADDR
// end ;
78339: LD_VAR 0 2
78343: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78344: LD_INT 0
78346: PPUSH
78347: PPUSH
78348: PPUSH
78349: PPUSH
78350: PPUSH
78351: PPUSH
78352: PPUSH
78353: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78354: LD_VAR 0 1
78358: PPUSH
78359: LD_VAR 0 2
78363: PPUSH
78364: CALL_OW 488
78368: NOT
78369: PUSH
78370: LD_VAR 0 3
78374: PPUSH
78375: LD_VAR 0 4
78379: PPUSH
78380: CALL_OW 488
78384: NOT
78385: OR
78386: IFFALSE 78399
// begin result := - 1 ;
78388: LD_ADDR_VAR 0 5
78392: PUSH
78393: LD_INT 1
78395: NEG
78396: ST_TO_ADDR
// exit ;
78397: GO 78634
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78399: LD_ADDR_VAR 0 12
78403: PUSH
78404: LD_VAR 0 1
78408: PPUSH
78409: LD_VAR 0 2
78413: PPUSH
78414: LD_VAR 0 3
78418: PPUSH
78419: LD_VAR 0 4
78423: PPUSH
78424: CALL 77484 0 4
78428: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78429: LD_ADDR_VAR 0 11
78433: PUSH
78434: LD_VAR 0 1
78438: PPUSH
78439: LD_VAR 0 2
78443: PPUSH
78444: LD_VAR 0 12
78448: PUSH
78449: LD_INT 1
78451: ARRAY
78452: PPUSH
78453: LD_VAR 0 12
78457: PUSH
78458: LD_INT 2
78460: ARRAY
78461: PPUSH
78462: CALL_OW 298
78466: ST_TO_ADDR
// distance := 9999 ;
78467: LD_ADDR_VAR 0 10
78471: PUSH
78472: LD_INT 9999
78474: ST_TO_ADDR
// for i := 0 to 5 do
78475: LD_ADDR_VAR 0 6
78479: PUSH
78480: DOUBLE
78481: LD_INT 0
78483: DEC
78484: ST_TO_ADDR
78485: LD_INT 5
78487: PUSH
78488: FOR_TO
78489: IFFALSE 78632
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78491: LD_ADDR_VAR 0 7
78495: PUSH
78496: LD_VAR 0 1
78500: PPUSH
78501: LD_VAR 0 6
78505: PPUSH
78506: LD_VAR 0 11
78510: PPUSH
78511: CALL_OW 272
78515: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78516: LD_ADDR_VAR 0 8
78520: PUSH
78521: LD_VAR 0 2
78525: PPUSH
78526: LD_VAR 0 6
78530: PPUSH
78531: LD_VAR 0 11
78535: PPUSH
78536: CALL_OW 273
78540: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78541: LD_VAR 0 7
78545: PPUSH
78546: LD_VAR 0 8
78550: PPUSH
78551: CALL_OW 488
78555: NOT
78556: IFFALSE 78560
// continue ;
78558: GO 78488
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78560: LD_ADDR_VAR 0 9
78564: PUSH
78565: LD_VAR 0 12
78569: PUSH
78570: LD_INT 1
78572: ARRAY
78573: PPUSH
78574: LD_VAR 0 12
78578: PUSH
78579: LD_INT 2
78581: ARRAY
78582: PPUSH
78583: LD_VAR 0 7
78587: PPUSH
78588: LD_VAR 0 8
78592: PPUSH
78593: CALL_OW 298
78597: ST_TO_ADDR
// if tmp < distance then
78598: LD_VAR 0 9
78602: PUSH
78603: LD_VAR 0 10
78607: LESS
78608: IFFALSE 78630
// begin result := i ;
78610: LD_ADDR_VAR 0 5
78614: PUSH
78615: LD_VAR 0 6
78619: ST_TO_ADDR
// distance := tmp ;
78620: LD_ADDR_VAR 0 10
78624: PUSH
78625: LD_VAR 0 9
78629: ST_TO_ADDR
// end ; end ;
78630: GO 78488
78632: POP
78633: POP
// end ;
78634: LD_VAR 0 5
78638: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78639: LD_INT 0
78641: PPUSH
78642: PPUSH
// if not driver or not IsInUnit ( driver ) then
78643: LD_VAR 0 1
78647: NOT
78648: PUSH
78649: LD_VAR 0 1
78653: PPUSH
78654: CALL_OW 310
78658: NOT
78659: OR
78660: IFFALSE 78664
// exit ;
78662: GO 78754
// vehicle := IsInUnit ( driver ) ;
78664: LD_ADDR_VAR 0 3
78668: PUSH
78669: LD_VAR 0 1
78673: PPUSH
78674: CALL_OW 310
78678: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78679: LD_VAR 0 1
78683: PPUSH
78684: LD_STRING \
78686: PUSH
78687: LD_INT 0
78689: PUSH
78690: LD_INT 0
78692: PUSH
78693: LD_INT 0
78695: PUSH
78696: LD_INT 0
78698: PUSH
78699: LD_INT 0
78701: PUSH
78702: LD_INT 0
78704: PUSH
78705: EMPTY
78706: LIST
78707: LIST
78708: LIST
78709: LIST
78710: LIST
78711: LIST
78712: LIST
78713: PUSH
78714: LD_STRING E
78716: PUSH
78717: LD_INT 0
78719: PUSH
78720: LD_INT 0
78722: PUSH
78723: LD_VAR 0 3
78727: PUSH
78728: LD_INT 0
78730: PUSH
78731: LD_INT 0
78733: PUSH
78734: LD_INT 0
78736: PUSH
78737: EMPTY
78738: LIST
78739: LIST
78740: LIST
78741: LIST
78742: LIST
78743: LIST
78744: LIST
78745: PUSH
78746: EMPTY
78747: LIST
78748: LIST
78749: PPUSH
78750: CALL_OW 446
// end ;
78754: LD_VAR 0 2
78758: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78759: LD_INT 0
78761: PPUSH
78762: PPUSH
// if not driver or not IsInUnit ( driver ) then
78763: LD_VAR 0 1
78767: NOT
78768: PUSH
78769: LD_VAR 0 1
78773: PPUSH
78774: CALL_OW 310
78778: NOT
78779: OR
78780: IFFALSE 78784
// exit ;
78782: GO 78874
// vehicle := IsInUnit ( driver ) ;
78784: LD_ADDR_VAR 0 3
78788: PUSH
78789: LD_VAR 0 1
78793: PPUSH
78794: CALL_OW 310
78798: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78799: LD_VAR 0 1
78803: PPUSH
78804: LD_STRING \
78806: PUSH
78807: LD_INT 0
78809: PUSH
78810: LD_INT 0
78812: PUSH
78813: LD_INT 0
78815: PUSH
78816: LD_INT 0
78818: PUSH
78819: LD_INT 0
78821: PUSH
78822: LD_INT 0
78824: PUSH
78825: EMPTY
78826: LIST
78827: LIST
78828: LIST
78829: LIST
78830: LIST
78831: LIST
78832: LIST
78833: PUSH
78834: LD_STRING E
78836: PUSH
78837: LD_INT 0
78839: PUSH
78840: LD_INT 0
78842: PUSH
78843: LD_VAR 0 3
78847: PUSH
78848: LD_INT 0
78850: PUSH
78851: LD_INT 0
78853: PUSH
78854: LD_INT 0
78856: PUSH
78857: EMPTY
78858: LIST
78859: LIST
78860: LIST
78861: LIST
78862: LIST
78863: LIST
78864: LIST
78865: PUSH
78866: EMPTY
78867: LIST
78868: LIST
78869: PPUSH
78870: CALL_OW 447
// end ;
78874: LD_VAR 0 2
78878: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78879: LD_INT 0
78881: PPUSH
78882: PPUSH
78883: PPUSH
// tmp := [ ] ;
78884: LD_ADDR_VAR 0 5
78888: PUSH
78889: EMPTY
78890: ST_TO_ADDR
// for i in units do
78891: LD_ADDR_VAR 0 4
78895: PUSH
78896: LD_VAR 0 1
78900: PUSH
78901: FOR_IN
78902: IFFALSE 78940
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78904: LD_ADDR_VAR 0 5
78908: PUSH
78909: LD_VAR 0 5
78913: PPUSH
78914: LD_VAR 0 5
78918: PUSH
78919: LD_INT 1
78921: PLUS
78922: PPUSH
78923: LD_VAR 0 4
78927: PPUSH
78928: CALL_OW 256
78932: PPUSH
78933: CALL_OW 2
78937: ST_TO_ADDR
78938: GO 78901
78940: POP
78941: POP
// if not tmp then
78942: LD_VAR 0 5
78946: NOT
78947: IFFALSE 78951
// exit ;
78949: GO 78999
// if asc then
78951: LD_VAR 0 2
78955: IFFALSE 78979
// result := SortListByListAsc ( units , tmp ) else
78957: LD_ADDR_VAR 0 3
78961: PUSH
78962: LD_VAR 0 1
78966: PPUSH
78967: LD_VAR 0 5
78971: PPUSH
78972: CALL_OW 76
78976: ST_TO_ADDR
78977: GO 78999
// result := SortListByListDesc ( units , tmp ) ;
78979: LD_ADDR_VAR 0 3
78983: PUSH
78984: LD_VAR 0 1
78988: PPUSH
78989: LD_VAR 0 5
78993: PPUSH
78994: CALL_OW 77
78998: ST_TO_ADDR
// end ;
78999: LD_VAR 0 3
79003: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79004: LD_INT 0
79006: PPUSH
79007: PPUSH
// task := GetTaskList ( mech ) ;
79008: LD_ADDR_VAR 0 4
79012: PUSH
79013: LD_VAR 0 1
79017: PPUSH
79018: CALL_OW 437
79022: ST_TO_ADDR
// if not task then
79023: LD_VAR 0 4
79027: NOT
79028: IFFALSE 79032
// exit ;
79030: GO 79074
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79032: LD_ADDR_VAR 0 3
79036: PUSH
79037: LD_VAR 0 4
79041: PUSH
79042: LD_INT 1
79044: ARRAY
79045: PUSH
79046: LD_INT 1
79048: ARRAY
79049: PUSH
79050: LD_STRING r
79052: EQUAL
79053: PUSH
79054: LD_VAR 0 4
79058: PUSH
79059: LD_INT 1
79061: ARRAY
79062: PUSH
79063: LD_INT 4
79065: ARRAY
79066: PUSH
79067: LD_VAR 0 2
79071: EQUAL
79072: AND
79073: ST_TO_ADDR
// end ;
79074: LD_VAR 0 3
79078: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79079: LD_INT 0
79081: PPUSH
// SetDir ( unit , d ) ;
79082: LD_VAR 0 1
79086: PPUSH
79087: LD_VAR 0 4
79091: PPUSH
79092: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79096: LD_VAR 0 1
79100: PPUSH
79101: LD_VAR 0 2
79105: PPUSH
79106: LD_VAR 0 3
79110: PPUSH
79111: LD_VAR 0 5
79115: PPUSH
79116: CALL_OW 48
// end ;
79120: LD_VAR 0 6
79124: RET
// export function ToNaturalNumber ( number ) ; begin
79125: LD_INT 0
79127: PPUSH
// result := number div 1 ;
79128: LD_ADDR_VAR 0 2
79132: PUSH
79133: LD_VAR 0 1
79137: PUSH
79138: LD_INT 1
79140: DIV
79141: ST_TO_ADDR
// if number < 0 then
79142: LD_VAR 0 1
79146: PUSH
79147: LD_INT 0
79149: LESS
79150: IFFALSE 79160
// result := 0 ;
79152: LD_ADDR_VAR 0 2
79156: PUSH
79157: LD_INT 0
79159: ST_TO_ADDR
// end ;
79160: LD_VAR 0 2
79164: RET
// export function SortByClass ( units , class ) ; var un ; begin
79165: LD_INT 0
79167: PPUSH
79168: PPUSH
// if not units or not class then
79169: LD_VAR 0 1
79173: NOT
79174: PUSH
79175: LD_VAR 0 2
79179: NOT
79180: OR
79181: IFFALSE 79185
// exit ;
79183: GO 79280
// result := [ ] ;
79185: LD_ADDR_VAR 0 3
79189: PUSH
79190: EMPTY
79191: ST_TO_ADDR
// for un in units do
79192: LD_ADDR_VAR 0 4
79196: PUSH
79197: LD_VAR 0 1
79201: PUSH
79202: FOR_IN
79203: IFFALSE 79278
// if GetClass ( un ) = class then
79205: LD_VAR 0 4
79209: PPUSH
79210: CALL_OW 257
79214: PUSH
79215: LD_VAR 0 2
79219: EQUAL
79220: IFFALSE 79247
// result := Insert ( result , 1 , un ) else
79222: LD_ADDR_VAR 0 3
79226: PUSH
79227: LD_VAR 0 3
79231: PPUSH
79232: LD_INT 1
79234: PPUSH
79235: LD_VAR 0 4
79239: PPUSH
79240: CALL_OW 2
79244: ST_TO_ADDR
79245: GO 79276
// result := Replace ( result , result + 1 , un ) ;
79247: LD_ADDR_VAR 0 3
79251: PUSH
79252: LD_VAR 0 3
79256: PPUSH
79257: LD_VAR 0 3
79261: PUSH
79262: LD_INT 1
79264: PLUS
79265: PPUSH
79266: LD_VAR 0 4
79270: PPUSH
79271: CALL_OW 1
79275: ST_TO_ADDR
79276: GO 79202
79278: POP
79279: POP
// end ;
79280: LD_VAR 0 3
79284: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79285: LD_INT 0
79287: PPUSH
79288: PPUSH
79289: PPUSH
79290: PPUSH
79291: PPUSH
79292: PPUSH
79293: PPUSH
// result := [ ] ;
79294: LD_ADDR_VAR 0 4
79298: PUSH
79299: EMPTY
79300: ST_TO_ADDR
// if x - r < 0 then
79301: LD_VAR 0 1
79305: PUSH
79306: LD_VAR 0 3
79310: MINUS
79311: PUSH
79312: LD_INT 0
79314: LESS
79315: IFFALSE 79327
// min_x := 0 else
79317: LD_ADDR_VAR 0 8
79321: PUSH
79322: LD_INT 0
79324: ST_TO_ADDR
79325: GO 79343
// min_x := x - r ;
79327: LD_ADDR_VAR 0 8
79331: PUSH
79332: LD_VAR 0 1
79336: PUSH
79337: LD_VAR 0 3
79341: MINUS
79342: ST_TO_ADDR
// if y - r < 0 then
79343: LD_VAR 0 2
79347: PUSH
79348: LD_VAR 0 3
79352: MINUS
79353: PUSH
79354: LD_INT 0
79356: LESS
79357: IFFALSE 79369
// min_y := 0 else
79359: LD_ADDR_VAR 0 7
79363: PUSH
79364: LD_INT 0
79366: ST_TO_ADDR
79367: GO 79385
// min_y := y - r ;
79369: LD_ADDR_VAR 0 7
79373: PUSH
79374: LD_VAR 0 2
79378: PUSH
79379: LD_VAR 0 3
79383: MINUS
79384: ST_TO_ADDR
// max_x := x + r ;
79385: LD_ADDR_VAR 0 9
79389: PUSH
79390: LD_VAR 0 1
79394: PUSH
79395: LD_VAR 0 3
79399: PLUS
79400: ST_TO_ADDR
// max_y := y + r ;
79401: LD_ADDR_VAR 0 10
79405: PUSH
79406: LD_VAR 0 2
79410: PUSH
79411: LD_VAR 0 3
79415: PLUS
79416: ST_TO_ADDR
// for _x = min_x to max_x do
79417: LD_ADDR_VAR 0 5
79421: PUSH
79422: DOUBLE
79423: LD_VAR 0 8
79427: DEC
79428: ST_TO_ADDR
79429: LD_VAR 0 9
79433: PUSH
79434: FOR_TO
79435: IFFALSE 79536
// for _y = min_y to max_y do
79437: LD_ADDR_VAR 0 6
79441: PUSH
79442: DOUBLE
79443: LD_VAR 0 7
79447: DEC
79448: ST_TO_ADDR
79449: LD_VAR 0 10
79453: PUSH
79454: FOR_TO
79455: IFFALSE 79532
// begin if not ValidHex ( _x , _y ) then
79457: LD_VAR 0 5
79461: PPUSH
79462: LD_VAR 0 6
79466: PPUSH
79467: CALL_OW 488
79471: NOT
79472: IFFALSE 79476
// continue ;
79474: GO 79454
// if GetResourceTypeXY ( _x , _y ) then
79476: LD_VAR 0 5
79480: PPUSH
79481: LD_VAR 0 6
79485: PPUSH
79486: CALL_OW 283
79490: IFFALSE 79530
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79492: LD_ADDR_VAR 0 4
79496: PUSH
79497: LD_VAR 0 4
79501: PPUSH
79502: LD_VAR 0 4
79506: PUSH
79507: LD_INT 1
79509: PLUS
79510: PPUSH
79511: LD_VAR 0 5
79515: PUSH
79516: LD_VAR 0 6
79520: PUSH
79521: EMPTY
79522: LIST
79523: LIST
79524: PPUSH
79525: CALL_OW 1
79529: ST_TO_ADDR
// end ;
79530: GO 79454
79532: POP
79533: POP
79534: GO 79434
79536: POP
79537: POP
// end ;
79538: LD_VAR 0 4
79542: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79543: LD_INT 0
79545: PPUSH
79546: PPUSH
79547: PPUSH
79548: PPUSH
79549: PPUSH
79550: PPUSH
79551: PPUSH
79552: PPUSH
// if not units then
79553: LD_VAR 0 1
79557: NOT
79558: IFFALSE 79562
// exit ;
79560: GO 80086
// result := UnitFilter ( units , [ f_ok ] ) ;
79562: LD_ADDR_VAR 0 3
79566: PUSH
79567: LD_VAR 0 1
79571: PPUSH
79572: LD_INT 50
79574: PUSH
79575: EMPTY
79576: LIST
79577: PPUSH
79578: CALL_OW 72
79582: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79583: LD_ADDR_VAR 0 8
79587: PUSH
79588: LD_VAR 0 1
79592: PUSH
79593: LD_INT 1
79595: ARRAY
79596: PPUSH
79597: CALL_OW 255
79601: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79602: LD_ADDR_VAR 0 10
79606: PUSH
79607: LD_INT 29
79609: PUSH
79610: LD_INT 91
79612: PUSH
79613: LD_INT 49
79615: PUSH
79616: EMPTY
79617: LIST
79618: LIST
79619: LIST
79620: ST_TO_ADDR
// if not result then
79621: LD_VAR 0 3
79625: NOT
79626: IFFALSE 79630
// exit ;
79628: GO 80086
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79630: LD_ADDR_VAR 0 5
79634: PUSH
79635: LD_INT 81
79637: PUSH
79638: LD_VAR 0 8
79642: PUSH
79643: EMPTY
79644: LIST
79645: LIST
79646: PPUSH
79647: CALL_OW 69
79651: ST_TO_ADDR
// for i in result do
79652: LD_ADDR_VAR 0 4
79656: PUSH
79657: LD_VAR 0 3
79661: PUSH
79662: FOR_IN
79663: IFFALSE 80084
// begin tag := GetTag ( i ) + 1 ;
79665: LD_ADDR_VAR 0 9
79669: PUSH
79670: LD_VAR 0 4
79674: PPUSH
79675: CALL_OW 110
79679: PUSH
79680: LD_INT 1
79682: PLUS
79683: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79684: LD_ADDR_VAR 0 7
79688: PUSH
79689: LD_VAR 0 4
79693: PPUSH
79694: CALL_OW 250
79698: PPUSH
79699: LD_VAR 0 4
79703: PPUSH
79704: CALL_OW 251
79708: PPUSH
79709: LD_INT 6
79711: PPUSH
79712: CALL 79285 0 3
79716: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79717: LD_VAR 0 4
79721: PPUSH
79722: CALL_OW 247
79726: PUSH
79727: LD_INT 2
79729: EQUAL
79730: PUSH
79731: LD_VAR 0 7
79735: AND
79736: PUSH
79737: LD_VAR 0 4
79741: PPUSH
79742: CALL_OW 264
79746: PUSH
79747: LD_VAR 0 10
79751: IN
79752: NOT
79753: AND
79754: IFFALSE 79793
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79756: LD_VAR 0 4
79760: PPUSH
79761: LD_VAR 0 7
79765: PUSH
79766: LD_INT 1
79768: ARRAY
79769: PUSH
79770: LD_INT 1
79772: ARRAY
79773: PPUSH
79774: LD_VAR 0 7
79778: PUSH
79779: LD_INT 1
79781: ARRAY
79782: PUSH
79783: LD_INT 2
79785: ARRAY
79786: PPUSH
79787: CALL_OW 116
79791: GO 80082
// if path > tag then
79793: LD_VAR 0 2
79797: PUSH
79798: LD_VAR 0 9
79802: GREATER
79803: IFFALSE 80011
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79805: LD_ADDR_VAR 0 6
79809: PUSH
79810: LD_VAR 0 5
79814: PPUSH
79815: LD_INT 91
79817: PUSH
79818: LD_VAR 0 4
79822: PUSH
79823: LD_INT 8
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: LIST
79830: PPUSH
79831: CALL_OW 72
79835: ST_TO_ADDR
// if nearEnemy then
79836: LD_VAR 0 6
79840: IFFALSE 79909
// begin if GetWeapon ( i ) = ru_time_lapser then
79842: LD_VAR 0 4
79846: PPUSH
79847: CALL_OW 264
79851: PUSH
79852: LD_INT 49
79854: EQUAL
79855: IFFALSE 79883
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79857: LD_VAR 0 4
79861: PPUSH
79862: LD_VAR 0 6
79866: PPUSH
79867: LD_VAR 0 4
79871: PPUSH
79872: CALL_OW 74
79876: PPUSH
79877: CALL_OW 112
79881: GO 79907
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79883: LD_VAR 0 4
79887: PPUSH
79888: LD_VAR 0 6
79892: PPUSH
79893: LD_VAR 0 4
79897: PPUSH
79898: CALL_OW 74
79902: PPUSH
79903: CALL_OW 115
// end else
79907: GO 80009
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79909: LD_VAR 0 4
79913: PPUSH
79914: LD_VAR 0 2
79918: PUSH
79919: LD_VAR 0 9
79923: ARRAY
79924: PUSH
79925: LD_INT 1
79927: ARRAY
79928: PPUSH
79929: LD_VAR 0 2
79933: PUSH
79934: LD_VAR 0 9
79938: ARRAY
79939: PUSH
79940: LD_INT 2
79942: ARRAY
79943: PPUSH
79944: CALL_OW 297
79948: PUSH
79949: LD_INT 6
79951: GREATER
79952: IFFALSE 79995
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79954: LD_VAR 0 4
79958: PPUSH
79959: LD_VAR 0 2
79963: PUSH
79964: LD_VAR 0 9
79968: ARRAY
79969: PUSH
79970: LD_INT 1
79972: ARRAY
79973: PPUSH
79974: LD_VAR 0 2
79978: PUSH
79979: LD_VAR 0 9
79983: ARRAY
79984: PUSH
79985: LD_INT 2
79987: ARRAY
79988: PPUSH
79989: CALL_OW 114
79993: GO 80009
// SetTag ( i , tag ) ;
79995: LD_VAR 0 4
79999: PPUSH
80000: LD_VAR 0 9
80004: PPUSH
80005: CALL_OW 109
// end else
80009: GO 80082
// if enemy then
80011: LD_VAR 0 5
80015: IFFALSE 80082
// begin if GetWeapon ( i ) = ru_time_lapser then
80017: LD_VAR 0 4
80021: PPUSH
80022: CALL_OW 264
80026: PUSH
80027: LD_INT 49
80029: EQUAL
80030: IFFALSE 80058
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80032: LD_VAR 0 4
80036: PPUSH
80037: LD_VAR 0 5
80041: PPUSH
80042: LD_VAR 0 4
80046: PPUSH
80047: CALL_OW 74
80051: PPUSH
80052: CALL_OW 112
80056: GO 80082
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80058: LD_VAR 0 4
80062: PPUSH
80063: LD_VAR 0 5
80067: PPUSH
80068: LD_VAR 0 4
80072: PPUSH
80073: CALL_OW 74
80077: PPUSH
80078: CALL_OW 115
// end ; end ;
80082: GO 79662
80084: POP
80085: POP
// end ;
80086: LD_VAR 0 3
80090: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80091: LD_INT 0
80093: PPUSH
80094: PPUSH
80095: PPUSH
// if not unit or IsInUnit ( unit ) then
80096: LD_VAR 0 1
80100: NOT
80101: PUSH
80102: LD_VAR 0 1
80106: PPUSH
80107: CALL_OW 310
80111: OR
80112: IFFALSE 80116
// exit ;
80114: GO 80207
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80116: LD_ADDR_VAR 0 4
80120: PUSH
80121: LD_VAR 0 1
80125: PPUSH
80126: CALL_OW 250
80130: PPUSH
80131: LD_VAR 0 2
80135: PPUSH
80136: LD_INT 1
80138: PPUSH
80139: CALL_OW 272
80143: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80144: LD_ADDR_VAR 0 5
80148: PUSH
80149: LD_VAR 0 1
80153: PPUSH
80154: CALL_OW 251
80158: PPUSH
80159: LD_VAR 0 2
80163: PPUSH
80164: LD_INT 1
80166: PPUSH
80167: CALL_OW 273
80171: ST_TO_ADDR
// if ValidHex ( x , y ) then
80172: LD_VAR 0 4
80176: PPUSH
80177: LD_VAR 0 5
80181: PPUSH
80182: CALL_OW 488
80186: IFFALSE 80207
// ComTurnXY ( unit , x , y ) ;
80188: LD_VAR 0 1
80192: PPUSH
80193: LD_VAR 0 4
80197: PPUSH
80198: LD_VAR 0 5
80202: PPUSH
80203: CALL_OW 118
// end ;
80207: LD_VAR 0 3
80211: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80212: LD_INT 0
80214: PPUSH
80215: PPUSH
// result := false ;
80216: LD_ADDR_VAR 0 3
80220: PUSH
80221: LD_INT 0
80223: ST_TO_ADDR
// if not units then
80224: LD_VAR 0 2
80228: NOT
80229: IFFALSE 80233
// exit ;
80231: GO 80278
// for i in units do
80233: LD_ADDR_VAR 0 4
80237: PUSH
80238: LD_VAR 0 2
80242: PUSH
80243: FOR_IN
80244: IFFALSE 80276
// if See ( side , i ) then
80246: LD_VAR 0 1
80250: PPUSH
80251: LD_VAR 0 4
80255: PPUSH
80256: CALL_OW 292
80260: IFFALSE 80274
// begin result := true ;
80262: LD_ADDR_VAR 0 3
80266: PUSH
80267: LD_INT 1
80269: ST_TO_ADDR
// exit ;
80270: POP
80271: POP
80272: GO 80278
// end ;
80274: GO 80243
80276: POP
80277: POP
// end ;
80278: LD_VAR 0 3
80282: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80283: LD_INT 0
80285: PPUSH
80286: PPUSH
80287: PPUSH
80288: PPUSH
// if not unit or not points then
80289: LD_VAR 0 1
80293: NOT
80294: PUSH
80295: LD_VAR 0 2
80299: NOT
80300: OR
80301: IFFALSE 80305
// exit ;
80303: GO 80395
// dist := 99999 ;
80305: LD_ADDR_VAR 0 5
80309: PUSH
80310: LD_INT 99999
80312: ST_TO_ADDR
// for i in points do
80313: LD_ADDR_VAR 0 4
80317: PUSH
80318: LD_VAR 0 2
80322: PUSH
80323: FOR_IN
80324: IFFALSE 80393
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80326: LD_ADDR_VAR 0 6
80330: PUSH
80331: LD_VAR 0 1
80335: PPUSH
80336: LD_VAR 0 4
80340: PUSH
80341: LD_INT 1
80343: ARRAY
80344: PPUSH
80345: LD_VAR 0 4
80349: PUSH
80350: LD_INT 2
80352: ARRAY
80353: PPUSH
80354: CALL_OW 297
80358: ST_TO_ADDR
// if tmpDist < dist then
80359: LD_VAR 0 6
80363: PUSH
80364: LD_VAR 0 5
80368: LESS
80369: IFFALSE 80391
// begin result := i ;
80371: LD_ADDR_VAR 0 3
80375: PUSH
80376: LD_VAR 0 4
80380: ST_TO_ADDR
// dist := tmpDist ;
80381: LD_ADDR_VAR 0 5
80385: PUSH
80386: LD_VAR 0 6
80390: ST_TO_ADDR
// end ; end ;
80391: GO 80323
80393: POP
80394: POP
// end ;
80395: LD_VAR 0 3
80399: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80400: LD_INT 0
80402: PPUSH
// uc_side := side ;
80403: LD_ADDR_OWVAR 20
80407: PUSH
80408: LD_VAR 0 1
80412: ST_TO_ADDR
// uc_nation := 3 ;
80413: LD_ADDR_OWVAR 21
80417: PUSH
80418: LD_INT 3
80420: ST_TO_ADDR
// vc_chassis := 25 ;
80421: LD_ADDR_OWVAR 37
80425: PUSH
80426: LD_INT 25
80428: ST_TO_ADDR
// vc_engine := engine_siberite ;
80429: LD_ADDR_OWVAR 39
80433: PUSH
80434: LD_INT 3
80436: ST_TO_ADDR
// vc_control := control_computer ;
80437: LD_ADDR_OWVAR 38
80441: PUSH
80442: LD_INT 3
80444: ST_TO_ADDR
// vc_weapon := 59 ;
80445: LD_ADDR_OWVAR 40
80449: PUSH
80450: LD_INT 59
80452: ST_TO_ADDR
// result := CreateVehicle ;
80453: LD_ADDR_VAR 0 5
80457: PUSH
80458: CALL_OW 45
80462: ST_TO_ADDR
// SetDir ( result , d ) ;
80463: LD_VAR 0 5
80467: PPUSH
80468: LD_VAR 0 4
80472: PPUSH
80473: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80477: LD_VAR 0 5
80481: PPUSH
80482: LD_VAR 0 2
80486: PPUSH
80487: LD_VAR 0 3
80491: PPUSH
80492: LD_INT 0
80494: PPUSH
80495: CALL_OW 48
// end ;
80499: LD_VAR 0 5
80503: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80504: LD_INT 0
80506: PPUSH
80507: PPUSH
80508: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80509: LD_ADDR_VAR 0 2
80513: PUSH
80514: LD_INT 0
80516: PUSH
80517: LD_INT 0
80519: PUSH
80520: LD_INT 0
80522: PUSH
80523: LD_INT 0
80525: PUSH
80526: EMPTY
80527: LIST
80528: LIST
80529: LIST
80530: LIST
80531: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80532: LD_VAR 0 1
80536: NOT
80537: PUSH
80538: LD_VAR 0 1
80542: PPUSH
80543: CALL_OW 264
80547: PUSH
80548: LD_INT 12
80550: PUSH
80551: LD_INT 51
80553: PUSH
80554: LD_INT 32
80556: PUSH
80557: LD_INT 89
80559: PUSH
80560: EMPTY
80561: LIST
80562: LIST
80563: LIST
80564: LIST
80565: IN
80566: NOT
80567: OR
80568: IFFALSE 80572
// exit ;
80570: GO 80670
// for i := 1 to 3 do
80572: LD_ADDR_VAR 0 3
80576: PUSH
80577: DOUBLE
80578: LD_INT 1
80580: DEC
80581: ST_TO_ADDR
80582: LD_INT 3
80584: PUSH
80585: FOR_TO
80586: IFFALSE 80668
// begin tmp := GetCargo ( cargo , i ) ;
80588: LD_ADDR_VAR 0 4
80592: PUSH
80593: LD_VAR 0 1
80597: PPUSH
80598: LD_VAR 0 3
80602: PPUSH
80603: CALL_OW 289
80607: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80608: LD_ADDR_VAR 0 2
80612: PUSH
80613: LD_VAR 0 2
80617: PPUSH
80618: LD_VAR 0 3
80622: PPUSH
80623: LD_VAR 0 4
80627: PPUSH
80628: CALL_OW 1
80632: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80633: LD_ADDR_VAR 0 2
80637: PUSH
80638: LD_VAR 0 2
80642: PPUSH
80643: LD_INT 4
80645: PPUSH
80646: LD_VAR 0 2
80650: PUSH
80651: LD_INT 4
80653: ARRAY
80654: PUSH
80655: LD_VAR 0 4
80659: PLUS
80660: PPUSH
80661: CALL_OW 1
80665: ST_TO_ADDR
// end ;
80666: GO 80585
80668: POP
80669: POP
// end ;
80670: LD_VAR 0 2
80674: RET
// export function Length ( array ) ; begin
80675: LD_INT 0
80677: PPUSH
// result := array + 0 ;
80678: LD_ADDR_VAR 0 2
80682: PUSH
80683: LD_VAR 0 1
80687: PUSH
80688: LD_INT 0
80690: PLUS
80691: ST_TO_ADDR
// end ;
80692: LD_VAR 0 2
80696: RET
// export function PrepareArray ( array ) ; begin
80697: LD_INT 0
80699: PPUSH
// result := array diff 0 ;
80700: LD_ADDR_VAR 0 2
80704: PUSH
80705: LD_VAR 0 1
80709: PUSH
80710: LD_INT 0
80712: DIFF
80713: ST_TO_ADDR
// if not result [ 1 ] then
80714: LD_VAR 0 2
80718: PUSH
80719: LD_INT 1
80721: ARRAY
80722: NOT
80723: IFFALSE 80743
// result := Delete ( result , 1 ) ;
80725: LD_ADDR_VAR 0 2
80729: PUSH
80730: LD_VAR 0 2
80734: PPUSH
80735: LD_INT 1
80737: PPUSH
80738: CALL_OW 3
80742: ST_TO_ADDR
// end ;
80743: LD_VAR 0 2
80747: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80748: LD_INT 0
80750: PPUSH
80751: PPUSH
80752: PPUSH
80753: PPUSH
// sibRocketRange := 25 ;
80754: LD_ADDR_VAR 0 6
80758: PUSH
80759: LD_INT 25
80761: ST_TO_ADDR
// result := false ;
80762: LD_ADDR_VAR 0 4
80766: PUSH
80767: LD_INT 0
80769: ST_TO_ADDR
// for i := 0 to 5 do
80770: LD_ADDR_VAR 0 5
80774: PUSH
80775: DOUBLE
80776: LD_INT 0
80778: DEC
80779: ST_TO_ADDR
80780: LD_INT 5
80782: PUSH
80783: FOR_TO
80784: IFFALSE 80851
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80786: LD_VAR 0 1
80790: PPUSH
80791: LD_VAR 0 5
80795: PPUSH
80796: LD_VAR 0 6
80800: PPUSH
80801: CALL_OW 272
80805: PPUSH
80806: LD_VAR 0 2
80810: PPUSH
80811: LD_VAR 0 5
80815: PPUSH
80816: LD_VAR 0 6
80820: PPUSH
80821: CALL_OW 273
80825: PPUSH
80826: LD_VAR 0 3
80830: PPUSH
80831: CALL_OW 309
80835: IFFALSE 80849
// begin result := true ;
80837: LD_ADDR_VAR 0 4
80841: PUSH
80842: LD_INT 1
80844: ST_TO_ADDR
// exit ;
80845: POP
80846: POP
80847: GO 80853
// end ;
80849: GO 80783
80851: POP
80852: POP
// end ;
80853: LD_VAR 0 4
80857: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80858: LD_INT 0
80860: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80861: LD_VAR 0 1
80865: PPUSH
80866: LD_VAR 0 2
80870: PPUSH
80871: LD_INT 0
80873: PPUSH
80874: LD_INT 0
80876: PPUSH
80877: LD_INT 1
80879: PPUSH
80880: LD_INT 0
80882: PPUSH
80883: CALL_OW 587
// end ; end_of_file
80887: LD_VAR 0 3
80891: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80892: LD_VAR 0 1
80896: PUSH
80897: LD_INT 200
80899: DOUBLE
80900: GREATEREQUAL
80901: IFFALSE 80909
80903: LD_INT 299
80905: DOUBLE
80906: LESSEQUAL
80907: IFTRUE 80911
80909: GO 80943
80911: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80912: LD_VAR 0 1
80916: PPUSH
80917: LD_VAR 0 2
80921: PPUSH
80922: LD_VAR 0 3
80926: PPUSH
80927: LD_VAR 0 4
80931: PPUSH
80932: LD_VAR 0 5
80936: PPUSH
80937: CALL 35558 0 5
80941: GO 81020
80943: LD_INT 300
80945: DOUBLE
80946: GREATEREQUAL
80947: IFFALSE 80955
80949: LD_INT 399
80951: DOUBLE
80952: LESSEQUAL
80953: IFTRUE 80957
80955: GO 81019
80957: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80958: LD_VAR 0 1
80962: PPUSH
80963: LD_VAR 0 2
80967: PPUSH
80968: LD_VAR 0 3
80972: PPUSH
80973: LD_VAR 0 4
80977: PPUSH
80978: LD_VAR 0 5
80982: PPUSH
80983: LD_VAR 0 6
80987: PPUSH
80988: LD_VAR 0 7
80992: PPUSH
80993: LD_VAR 0 8
80997: PPUSH
80998: LD_VAR 0 9
81002: PPUSH
81003: LD_VAR 0 10
81007: PPUSH
81008: LD_VAR 0 11
81012: PPUSH
81013: CALL 31891 0 11
81017: GO 81020
81019: POP
// end ;
81020: PPOPN 11
81022: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81023: LD_VAR 0 1
81027: PPUSH
81028: LD_VAR 0 2
81032: PPUSH
81033: LD_VAR 0 3
81037: PPUSH
81038: LD_VAR 0 4
81042: PPUSH
81043: LD_VAR 0 5
81047: PPUSH
81048: CALL 35294 0 5
// end ; end_of_file
81052: PPOPN 5
81054: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81055: LD_VAR 0 1
81059: PPUSH
81060: LD_VAR 0 2
81064: PPUSH
81065: LD_VAR 0 3
81069: PPUSH
81070: LD_VAR 0 4
81074: PPUSH
81075: LD_VAR 0 5
81079: PPUSH
81080: LD_VAR 0 6
81084: PPUSH
81085: CALL 19543 0 6
// end ;
81089: PPOPN 6
81091: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81092: LD_INT 0
81094: PPUSH
// begin if not units then
81095: LD_VAR 0 1
81099: NOT
81100: IFFALSE 81104
// exit ;
81102: GO 81104
// end ;
81104: PPOPN 7
81106: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81107: CALL 19447 0 0
// end ;
81111: PPOPN 1
81113: END
