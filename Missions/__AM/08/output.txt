// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 217 0 0
// PrepareRussian ;
  23: CALL 8297 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 70869 0 9
// Action ;
  79: CALL 13808 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 9
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 5
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 6
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 7
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 8
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// end ;
 167: LD_VAR 0 1
 171: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 172: LD_INT 22
 174: PUSH
 175: LD_INT 1
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 34
 184: PUSH
 185: LD_INT 6
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PPUSH
 196: CALL_OW 69
 200: PUSH
 201: LD_INT 6
 203: GREATEREQUAL
 204: IFFALSE 216
 206: GO 208
 208: DISABLE
// SetAchievement ( ACH_ARMOR ) ; end_of_file
 209: LD_STRING ACH_ARMOR
 211: PPUSH
 212: CALL_OW 543
 216: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 217: LD_INT 0
 219: PPUSH
 220: PPUSH
 221: PPUSH
 222: PPUSH
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 1 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// uc_nation := 1 ;
 243: LD_ADDR_OWVAR 21
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// PrepareGammaBase ;
 251: CALL 2412 0 0
// x := 52 ;
 255: LD_ADDR_VAR 0 13
 259: PUSH
 260: LD_INT 52
 262: ST_TO_ADDR
// y := 16 ;
 263: LD_ADDR_VAR 0 14
 267: PUSH
 268: LD_INT 16
 270: ST_TO_ADDR
// case gammaCommander of 1 :
 271: LD_EXP 9
 275: PUSH
 276: LD_INT 1
 278: DOUBLE
 279: EQUAL
 280: IFTRUE 284
 282: GO 369
 284: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 285: LD_ADDR_EXP 12
 289: PUSH
 290: LD_STRING Donaldson
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: LD_STRING 04_
 298: PPUSH
 299: CALL 37506 0 3
 303: ST_TO_ADDR
// if HexInfo ( x , y ) then
 304: LD_VAR 0 13
 308: PPUSH
 309: LD_VAR 0 14
 313: PPUSH
 314: CALL_OW 428
 318: IFFALSE 336
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 320: LD_EXP 12
 324: PPUSH
 325: LD_EXP 26
 329: PPUSH
 330: CALL_OW 52
 334: GO 358
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 336: LD_EXP 12
 340: PPUSH
 341: LD_VAR 0 13
 345: PPUSH
 346: LD_VAR 0 14
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 48
// ComHold ( Donaldson ) ;
 358: LD_EXP 12
 362: PPUSH
 363: CALL_OW 140
// end ; 2 :
 367: GO 556
 369: LD_INT 2
 371: DOUBLE
 372: EQUAL
 373: IFTRUE 377
 375: GO 462
 377: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 378: LD_ADDR_EXP 11
 382: PUSH
 383: LD_STRING Brown
 385: PPUSH
 386: LD_INT 1
 388: PPUSH
 389: LD_STRING 04_
 391: PPUSH
 392: CALL 37506 0 3
 396: ST_TO_ADDR
// if HexInfo ( x , y ) then
 397: LD_VAR 0 13
 401: PPUSH
 402: LD_VAR 0 14
 406: PPUSH
 407: CALL_OW 428
 411: IFFALSE 429
// PlaceHumanInUnit ( Brown , amDepot ) else
 413: LD_EXP 11
 417: PPUSH
 418: LD_EXP 26
 422: PPUSH
 423: CALL_OW 52
 427: GO 451
// PlaceUnitXY ( Brown , x , y , false ) ;
 429: LD_EXP 11
 433: PPUSH
 434: LD_VAR 0 13
 438: PPUSH
 439: LD_VAR 0 14
 443: PPUSH
 444: LD_INT 0
 446: PPUSH
 447: CALL_OW 48
// ComHold ( Brown ) ;
 451: LD_EXP 11
 455: PPUSH
 456: CALL_OW 140
// end ; 3 :
 460: GO 556
 462: LD_INT 3
 464: DOUBLE
 465: EQUAL
 466: IFTRUE 470
 468: GO 555
 470: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 471: LD_ADDR_EXP 20
 475: PUSH
 476: LD_STRING VanHouten
 478: PPUSH
 479: LD_INT 0
 481: PPUSH
 482: LD_STRING 
 484: PPUSH
 485: CALL 37506 0 3
 489: ST_TO_ADDR
// if HexInfo ( x , y ) then
 490: LD_VAR 0 13
 494: PPUSH
 495: LD_VAR 0 14
 499: PPUSH
 500: CALL_OW 428
 504: IFFALSE 522
// PlaceHumanInUnit ( Houten , amDepot ) else
 506: LD_EXP 20
 510: PPUSH
 511: LD_EXP 26
 515: PPUSH
 516: CALL_OW 52
 520: GO 544
// PlaceUnitXY ( Houten , x , y , false ) ;
 522: LD_EXP 20
 526: PPUSH
 527: LD_VAR 0 13
 531: PPUSH
 532: LD_VAR 0 14
 536: PPUSH
 537: LD_INT 0
 539: PPUSH
 540: CALL_OW 48
// ComHold ( Houten ) ;
 544: LD_EXP 20
 548: PPUSH
 549: CALL_OW 140
// end ; end ;
 553: GO 556
 555: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 556: LD_ADDR_EXP 24
 560: PUSH
 561: LD_STRING Harisson
 563: PPUSH
 564: LD_INT 0
 566: PPUSH
 567: LD_STRING 
 569: PPUSH
 570: CALL 37506 0 3
 574: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 575: LD_ADDR_EXP 25
 579: PUSH
 580: LD_STRING Powell
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: LD_STRING 
 588: PPUSH
 589: CALL 37506 0 3
 593: ST_TO_ADDR
// tmp := [ ] ;
 594: LD_ADDR_VAR 0 4
 598: PUSH
 599: EMPTY
 600: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 601: LD_STRING 04_Lisa
 603: PUSH
 604: EMPTY
 605: LIST
 606: PPUSH
 607: CALL_OW 28
 611: PUSH
 612: LD_STRING LisaInDelta
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 30
 622: NOT
 623: AND
 624: PUSH
 625: LD_STRING 07_Lisa
 627: PUSH
 628: EMPTY
 629: LIST
 630: PPUSH
 631: CALL_OW 28
 635: NOT
 636: AND
 637: IFFALSE 680
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 639: LD_ADDR_EXP 15
 643: PUSH
 644: LD_STRING Lisa
 646: PPUSH
 647: LD_INT 1
 649: PPUSH
 650: LD_STRING 04_
 652: PPUSH
 653: CALL 37506 0 3
 657: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 658: LD_ADDR_VAR 0 5
 662: PUSH
 663: LD_VAR 0 5
 667: PPUSH
 668: LD_EXP 15
 672: PPUSH
 673: CALL 74187 0 2
 677: ST_TO_ADDR
// end else
 678: GO 739
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 680: LD_EXP 15
 684: NOT
 685: PUSH
 686: LD_STRING LisaIn07
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 30
 696: NOT
 697: AND
 698: IFFALSE 739
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 700: LD_ADDR_EXP 15
 704: PUSH
 705: LD_STRING Lisa
 707: PPUSH
 708: LD_INT 1
 710: PPUSH
 711: LD_STRING 07_
 713: PPUSH
 714: CALL 37506 0 3
 718: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 719: LD_ADDR_VAR 0 5
 723: PUSH
 724: LD_VAR 0 5
 728: PPUSH
 729: LD_EXP 15
 733: PPUSH
 734: CALL 74187 0 2
 738: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 739: LD_STRING 04_Bobby
 741: PUSH
 742: EMPTY
 743: LIST
 744: PPUSH
 745: CALL_OW 28
 749: PUSH
 750: LD_STRING BobbyInDelta
 752: PPUSH
 753: LD_INT 0
 755: PPUSH
 756: CALL_OW 30
 760: NOT
 761: AND
 762: PUSH
 763: LD_STRING 07_Bobby
 765: PUSH
 766: EMPTY
 767: LIST
 768: PPUSH
 769: CALL_OW 28
 773: NOT
 774: AND
 775: IFFALSE 818
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 777: LD_ADDR_EXP 13
 781: PUSH
 782: LD_STRING Bobby
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: LD_STRING 04_
 790: PPUSH
 791: CALL 37506 0 3
 795: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 796: LD_ADDR_VAR 0 5
 800: PUSH
 801: LD_VAR 0 5
 805: PPUSH
 806: LD_EXP 13
 810: PPUSH
 811: CALL 74187 0 2
 815: ST_TO_ADDR
// end else
 816: GO 877
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 818: LD_EXP 13
 822: NOT
 823: PUSH
 824: LD_STRING BobbyIn07
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: CALL_OW 30
 834: NOT
 835: AND
 836: IFFALSE 877
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 838: LD_ADDR_EXP 13
 842: PUSH
 843: LD_STRING Bobby
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_STRING 07_
 851: PPUSH
 852: CALL 37506 0 3
 856: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 5
 866: PPUSH
 867: LD_EXP 13
 871: PPUSH
 872: CALL 74187 0 2
 876: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 877: LD_STRING 04_Cyrus
 879: PUSH
 880: EMPTY
 881: LIST
 882: PPUSH
 883: CALL_OW 28
 887: PUSH
 888: LD_STRING CyrusInDelta
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 30
 898: NOT
 899: AND
 900: PUSH
 901: LD_STRING 07_Cyrus
 903: PUSH
 904: EMPTY
 905: LIST
 906: PPUSH
 907: CALL_OW 28
 911: NOT
 912: AND
 913: IFFALSE 956
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
 915: LD_ADDR_EXP 14
 919: PUSH
 920: LD_STRING Cyrus
 922: PPUSH
 923: LD_INT 1
 925: PPUSH
 926: LD_STRING 04_
 928: PPUSH
 929: CALL 37506 0 3
 933: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 934: LD_ADDR_VAR 0 5
 938: PUSH
 939: LD_VAR 0 5
 943: PPUSH
 944: LD_EXP 14
 948: PPUSH
 949: CALL 74187 0 2
 953: ST_TO_ADDR
// end else
 954: GO 1015
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
 956: LD_EXP 14
 960: NOT
 961: PUSH
 962: LD_STRING CyrusIn07
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 30
 972: NOT
 973: AND
 974: IFFALSE 1015
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 976: LD_ADDR_EXP 14
 980: PUSH
 981: LD_STRING Cyrus
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_STRING 07_
 989: PPUSH
 990: CALL 37506 0 3
 994: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 995: LD_ADDR_VAR 0 5
 999: PUSH
1000: LD_VAR 0 5
1004: PPUSH
1005: LD_EXP 14
1009: PPUSH
1010: CALL 74187 0 2
1014: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1015: LD_STRING 04_Brown
1017: PUSH
1018: EMPTY
1019: LIST
1020: PPUSH
1021: CALL_OW 28
1025: PUSH
1026: LD_STRING BrownInDelta
1028: PPUSH
1029: LD_INT 0
1031: PPUSH
1032: CALL_OW 30
1036: NOT
1037: AND
1038: PUSH
1039: LD_STRING 07_Brown
1041: PUSH
1042: EMPTY
1043: LIST
1044: PPUSH
1045: CALL_OW 28
1049: NOT
1050: AND
1051: PUSH
1052: LD_EXP 9
1056: PUSH
1057: LD_INT 2
1059: NONEQUAL
1060: AND
1061: IFFALSE 1104
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1063: LD_ADDR_EXP 11
1067: PUSH
1068: LD_STRING Brown
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_STRING 04_
1076: PPUSH
1077: CALL 37506 0 3
1081: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: LD_EXP 11
1096: PPUSH
1097: CALL 74187 0 2
1101: ST_TO_ADDR
// end else
1102: GO 1173
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1104: LD_EXP 11
1108: NOT
1109: PUSH
1110: LD_STRING BrownIn07
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: CALL_OW 30
1120: NOT
1121: AND
1122: PUSH
1123: LD_EXP 9
1127: PUSH
1128: LD_INT 2
1130: NONEQUAL
1131: AND
1132: IFFALSE 1173
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1134: LD_ADDR_EXP 11
1138: PUSH
1139: LD_STRING Brown
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_STRING 07_
1147: PPUSH
1148: CALL 37506 0 3
1152: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1153: LD_ADDR_VAR 0 5
1157: PUSH
1158: LD_VAR 0 5
1162: PPUSH
1163: LD_EXP 11
1167: PPUSH
1168: CALL 74187 0 2
1172: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1173: LD_STRING 04_Donaldson
1175: PUSH
1176: EMPTY
1177: LIST
1178: PPUSH
1179: CALL_OW 28
1183: PUSH
1184: LD_STRING DonaldsonInDelta
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 30
1194: NOT
1195: AND
1196: PUSH
1197: LD_STRING 07_Donaldson
1199: PUSH
1200: EMPTY
1201: LIST
1202: PPUSH
1203: CALL_OW 28
1207: NOT
1208: AND
1209: PUSH
1210: LD_EXP 9
1214: PUSH
1215: LD_INT 1
1217: NONEQUAL
1218: AND
1219: IFFALSE 1262
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1221: LD_ADDR_EXP 12
1225: PUSH
1226: LD_STRING Donaldson
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_STRING 04_
1234: PPUSH
1235: CALL 37506 0 3
1239: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1240: LD_ADDR_VAR 0 5
1244: PUSH
1245: LD_VAR 0 5
1249: PPUSH
1250: LD_EXP 12
1254: PPUSH
1255: CALL 74187 0 2
1259: ST_TO_ADDR
// end else
1260: GO 1331
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1262: LD_EXP 12
1266: NOT
1267: PUSH
1268: LD_STRING DonaldsonIn07
1270: PPUSH
1271: LD_INT 0
1273: PPUSH
1274: CALL_OW 30
1278: NOT
1279: AND
1280: PUSH
1281: LD_EXP 9
1285: PUSH
1286: LD_INT 1
1288: NONEQUAL
1289: AND
1290: IFFALSE 1331
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1292: LD_ADDR_EXP 12
1296: PUSH
1297: LD_STRING Donaldson
1299: PPUSH
1300: LD_INT 1
1302: PPUSH
1303: LD_STRING 07_
1305: PPUSH
1306: CALL 37506 0 3
1310: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1311: LD_ADDR_VAR 0 5
1315: PUSH
1316: LD_VAR 0 5
1320: PPUSH
1321: LD_EXP 12
1325: PPUSH
1326: CALL 74187 0 2
1330: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1331: LD_STRING KhatamIn07
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 30
1341: NOT
1342: IFFALSE 1383
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1344: LD_ADDR_EXP 19
1348: PUSH
1349: LD_STRING Khatam
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_STRING 07_
1357: PPUSH
1358: CALL 37506 0 3
1362: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1363: LD_ADDR_VAR 0 5
1367: PUSH
1368: LD_VAR 0 5
1372: PPUSH
1373: LD_EXP 19
1377: PPUSH
1378: CALL 74187 0 2
1382: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1383: LD_ADDR_VAR 0 6
1387: PUSH
1388: LD_STRING 07_othersGamma
1390: PPUSH
1391: CALL_OW 31
1395: ST_TO_ADDR
// tmp := 5 - others ;
1396: LD_ADDR_VAR 0 4
1400: PUSH
1401: LD_INT 5
1403: PUSH
1404: LD_VAR 0 6
1408: MINUS
1409: ST_TO_ADDR
// if tmp then
1410: LD_VAR 0 4
1414: IFFALSE 1471
// for i := tmp downto 1 do
1416: LD_ADDR_VAR 0 2
1420: PUSH
1421: DOUBLE
1422: LD_VAR 0 4
1426: INC
1427: ST_TO_ADDR
1428: LD_INT 1
1430: PUSH
1431: FOR_DOWNTO
1432: IFFALSE 1469
// begin PrepareHuman ( false , 1 , 5 ) ;
1434: LD_INT 0
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: LD_INT 5
1442: PPUSH
1443: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1447: LD_ADDR_VAR 0 6
1451: PUSH
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL_OW 44
1461: PPUSH
1462: CALL 74187 0 2
1466: ST_TO_ADDR
// end ;
1467: GO 1431
1469: POP
1470: POP
// for i in others do
1471: LD_ADDR_VAR 0 2
1475: PUSH
1476: LD_VAR 0 6
1480: PUSH
1481: FOR_IN
1482: IFFALSE 1498
// SetTag ( i , 106 ) ;
1484: LD_VAR 0 2
1488: PPUSH
1489: LD_INT 106
1491: PPUSH
1492: CALL_OW 109
1496: GO 1481
1498: POP
1499: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1500: LD_ADDR_VAR 0 8
1504: PUSH
1505: LD_INT 22
1507: PUSH
1508: LD_INT 1
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PUSH
1515: LD_INT 30
1517: PUSH
1518: LD_INT 31
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PPUSH
1529: CALL_OW 69
1533: ST_TO_ADDR
// for i in bun do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: LD_VAR 0 8
1543: PUSH
1544: FOR_IN
1545: IFFALSE 1677
// begin x := GetX ( i ) ;
1547: LD_ADDR_VAR 0 13
1551: PUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 250
1561: ST_TO_ADDR
// y := GetY ( i ) ;
1562: LD_ADDR_VAR 0 14
1566: PUSH
1567: LD_VAR 0 2
1571: PPUSH
1572: CALL_OW 251
1576: ST_TO_ADDR
// d := GetDir ( i ) ;
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 2
1586: PPUSH
1587: CALL_OW 254
1591: ST_TO_ADDR
// RemoveUnit ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 64
// bc_type := b_bunker ;
1601: LD_ADDR_OWVAR 42
1605: PUSH
1606: LD_INT 32
1608: ST_TO_ADDR
// bc_level := 6 ;
1609: LD_ADDR_OWVAR 43
1613: PUSH
1614: LD_INT 6
1616: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1617: LD_ADDR_VAR 0 16
1621: PUSH
1622: LD_VAR 0 13
1626: PPUSH
1627: LD_VAR 0 14
1631: PPUSH
1632: LD_VAR 0 15
1636: PPUSH
1637: CALL_OW 47
1641: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1642: LD_VAR 0 16
1646: PPUSH
1647: LD_INT 5
1649: PUSH
1650: LD_INT 4
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_VAR 0 2
1661: PUSH
1662: LD_INT 2
1664: MOD
1665: PUSH
1666: LD_INT 1
1668: PLUS
1669: ARRAY
1670: PPUSH
1671: CALL_OW 431
// end ;
1675: GO 1544
1677: POP
1678: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1679: LD_ADDR_VAR 0 7
1683: PUSH
1684: LD_INT 22
1686: PUSH
1687: LD_INT 1
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 30
1696: PUSH
1697: LD_INT 5
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PPUSH
1708: CALL_OW 69
1712: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1713: LD_ADDR_VAR 0 9
1717: PUSH
1718: LD_INT 22
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 2
1730: PUSH
1731: LD_INT 30
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 30
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_INT 30
1753: PUSH
1754: LD_INT 8
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PPUSH
1771: CALL_OW 69
1775: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1776: LD_ADDR_VAR 0 10
1780: PUSH
1781: LD_INT 22
1783: PUSH
1784: LD_INT 1
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 30
1793: PUSH
1794: LD_INT 3
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 69
1809: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1810: LD_ADDR_VAR 0 11
1814: PUSH
1815: LD_INT 22
1817: PUSH
1818: LD_INT 1
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 30
1827: PUSH
1828: LD_INT 36
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PPUSH
1839: CALL_OW 69
1843: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1844: LD_ADDR_VAR 0 8
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_INT 1
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 2
1861: PUSH
1862: LD_INT 30
1864: PUSH
1865: LD_INT 31
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 32
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// for i in others union tmp2 do
1896: LD_ADDR_VAR 0 2
1900: PUSH
1901: LD_VAR 0 6
1905: PUSH
1906: LD_VAR 0 5
1910: UNION
1911: PUSH
1912: FOR_IN
1913: IFFALSE 2405
// begin placed := false ;
1915: LD_ADDR_VAR 0 12
1919: PUSH
1920: LD_INT 0
1922: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1923: LD_VAR 0 2
1927: PPUSH
1928: CALL_OW 257
1932: PUSH
1933: LD_INT 1
1935: EQUAL
1936: IFFALSE 2061
// begin if UnitFilter ( bun , [ f_empty ] ) then
1938: LD_VAR 0 8
1942: PPUSH
1943: LD_INT 58
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 72
1953: IFFALSE 1992
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1955: LD_VAR 0 2
1959: PPUSH
1960: LD_VAR 0 8
1964: PPUSH
1965: LD_INT 58
1967: PUSH
1968: EMPTY
1969: LIST
1970: PPUSH
1971: CALL_OW 72
1975: PUSH
1976: LD_INT 1
1978: ARRAY
1979: PPUSH
1980: CALL_OW 52
// placed := true ;
1984: LD_ADDR_VAR 0 12
1988: PUSH
1989: LD_INT 1
1991: ST_TO_ADDR
// end ; if arm and not placed then
1992: LD_VAR 0 7
1996: PUSH
1997: LD_VAR 0 12
2001: NOT
2002: AND
2003: IFFALSE 2061
// begin for j in arm do
2005: LD_ADDR_VAR 0 3
2009: PUSH
2010: LD_VAR 0 7
2014: PUSH
2015: FOR_IN
2016: IFFALSE 2059
// if UnitsInside ( j ) < 6 then
2018: LD_VAR 0 3
2022: PPUSH
2023: CALL_OW 313
2027: PUSH
2028: LD_INT 6
2030: LESS
2031: IFFALSE 2057
// begin PlaceHumanInUnit ( i , j ) ;
2033: LD_VAR 0 2
2037: PPUSH
2038: LD_VAR 0 3
2042: PPUSH
2043: CALL_OW 52
// placed := true ;
2047: LD_ADDR_VAR 0 12
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// break ;
2055: GO 2059
// end ;
2057: GO 2015
2059: POP
2060: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2061: LD_VAR 0 2
2065: PPUSH
2066: CALL_OW 257
2070: PUSH
2071: LD_INT 2
2073: EQUAL
2074: IFFALSE 2107
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2076: LD_VAR 0 2
2080: PPUSH
2081: LD_INT 52
2083: PPUSH
2084: LD_INT 20
2086: PPUSH
2087: LD_INT 6
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: CALL_OW 50
// placed := true ;
2097: LD_ADDR_VAR 0 12
2101: PUSH
2102: LD_INT 1
2104: ST_TO_ADDR
// continue ;
2105: GO 1912
// end ; if GetClass ( i ) = class_mechanic then
2107: LD_VAR 0 2
2111: PPUSH
2112: CALL_OW 257
2116: PUSH
2117: LD_INT 3
2119: EQUAL
2120: IFFALSE 2224
// begin if fac then
2122: LD_VAR 0 10
2126: IFFALSE 2224
// begin if ct then
2128: LD_VAR 0 11
2132: IFFALSE 2160
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_VAR 0 11
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: PPUSH
2148: CALL_OW 52
// placed := true ;
2152: LD_ADDR_VAR 0 12
2156: PUSH
2157: LD_INT 1
2159: ST_TO_ADDR
// end ; if placed then
2160: LD_VAR 0 12
2164: IFFALSE 2168
// continue ;
2166: GO 1912
// for j in fac do
2168: LD_ADDR_VAR 0 3
2172: PUSH
2173: LD_VAR 0 10
2177: PUSH
2178: FOR_IN
2179: IFFALSE 2222
// if UnitsInside ( j ) < 6 then
2181: LD_VAR 0 3
2185: PPUSH
2186: CALL_OW 313
2190: PUSH
2191: LD_INT 6
2193: LESS
2194: IFFALSE 2220
// begin PlaceHumanInUnit ( i , j ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_VAR 0 3
2205: PPUSH
2206: CALL_OW 52
// placed := true ;
2210: LD_ADDR_VAR 0 12
2214: PUSH
2215: LD_INT 1
2217: ST_TO_ADDR
// break ;
2218: GO 2222
// end ;
2220: GO 2178
2222: POP
2223: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2224: LD_VAR 0 2
2228: PPUSH
2229: CALL_OW 257
2233: PUSH
2234: LD_INT 4
2236: EQUAL
2237: IFFALSE 2332
// begin if lab then
2239: LD_VAR 0 9
2243: IFFALSE 2301
// begin for j in lab do
2245: LD_ADDR_VAR 0 3
2249: PUSH
2250: LD_VAR 0 9
2254: PUSH
2255: FOR_IN
2256: IFFALSE 2299
// if UnitsInside ( j ) < 6 then
2258: LD_VAR 0 3
2262: PPUSH
2263: CALL_OW 313
2267: PUSH
2268: LD_INT 6
2270: LESS
2271: IFFALSE 2297
// begin PlaceHumanInUnit ( i , j ) ;
2273: LD_VAR 0 2
2277: PPUSH
2278: LD_VAR 0 3
2282: PPUSH
2283: CALL_OW 52
// placed := true ;
2287: LD_ADDR_VAR 0 12
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// break ;
2295: GO 2299
// end ;
2297: GO 2255
2299: POP
2300: POP
// end ; if not placed then
2301: LD_VAR 0 12
2305: NOT
2306: IFFALSE 2332
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2308: LD_VAR 0 2
2312: PPUSH
2313: LD_INT 3
2315: PPUSH
2316: LD_INT 0
2318: PPUSH
2319: CALL_OW 49
// ComHold ( i ) ;
2323: LD_VAR 0 2
2327: PPUSH
2328: CALL_OW 140
// end ; end ; if ct then
2332: LD_VAR 0 11
2336: IFFALSE 2403
// if UnitsInside ( ct [ 1 ] ) then
2338: LD_VAR 0 11
2342: PUSH
2343: LD_INT 1
2345: ARRAY
2346: PPUSH
2347: CALL_OW 313
2351: IFFALSE 2403
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2353: LD_ADDR_VAR 0 2
2357: PUSH
2358: LD_INT 22
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PUSH
2368: LD_INT 33
2370: PUSH
2371: LD_INT 2
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PPUSH
2382: CALL_OW 69
2386: PUSH
2387: FOR_IN
2388: IFFALSE 2401
// Connect ( i ) ;
2390: LD_VAR 0 2
2394: PPUSH
2395: CALL 45463 0 1
2399: GO 2387
2401: POP
2402: POP
// end ; end ;
2403: GO 1912
2405: POP
2406: POP
// end ;
2407: LD_VAR 0 1
2411: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2412: LD_INT 0
2414: PPUSH
2415: PPUSH
2416: PPUSH
2417: PPUSH
2418: PPUSH
2419: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2420: LD_INT 71
2422: PPUSH
2423: LD_INT 5
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: LD_STRING GammaBase
2440: PPUSH
2441: EMPTY
2442: PPUSH
2443: CALL_OW 30
2447: ST_TO_ADDR
// if not blist then
2448: LD_VAR 0 2
2452: NOT
2453: IFFALSE 2493
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: PUSH
2463: LD_INT 52
2465: PUSH
2466: LD_INT 12
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: LD_INT 3
2474: PUSH
2475: LD_INT 0
2477: PUSH
2478: LD_INT 0
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: PUSH
2490: EMPTY
2491: LIST
2492: ST_TO_ADDR
// uc_side := 1 ;
2493: LD_ADDR_OWVAR 20
2497: PUSH
2498: LD_INT 1
2500: ST_TO_ADDR
// uc_nation := 1 ;
2501: LD_ADDR_OWVAR 21
2505: PUSH
2506: LD_INT 1
2508: ST_TO_ADDR
// bc_kind1 := - 1 ;
2509: LD_ADDR_OWVAR 44
2513: PUSH
2514: LD_INT 1
2516: NEG
2517: ST_TO_ADDR
// bc_kind2 := - 1 ;
2518: LD_ADDR_OWVAR 45
2522: PUSH
2523: LD_INT 1
2525: NEG
2526: ST_TO_ADDR
// for i in blist do
2527: LD_ADDR_VAR 0 3
2531: PUSH
2532: LD_VAR 0 2
2536: PUSH
2537: FOR_IN
2538: IFFALSE 2814
// begin bc_type := i [ 1 ] ;
2540: LD_ADDR_OWVAR 42
2544: PUSH
2545: LD_VAR 0 3
2549: PUSH
2550: LD_INT 1
2552: ARRAY
2553: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2554: LD_ADDR_OWVAR 43
2558: PUSH
2559: LD_VAR 0 3
2563: PUSH
2564: LD_INT 5
2566: ARRAY
2567: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2568: LD_OWVAR 42
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: LD_INT 7
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: IN
2583: IFFALSE 2649
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2585: LD_STRING 06_remoteVehs_1
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL_OW 30
2595: NOT
2596: IFFALSE 2624
// begin bc_type := b_lab_full ;
2598: LD_ADDR_OWVAR 42
2602: PUSH
2603: LD_INT 8
2605: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2606: LD_ADDR_OWVAR 44
2610: PUSH
2611: LD_INT 10
2613: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2614: LD_ADDR_OWVAR 45
2618: PUSH
2619: LD_INT 15
2621: ST_TO_ADDR
// end else
2622: GO 2649
// begin bc_type := b_lab_half ;
2624: LD_ADDR_OWVAR 42
2628: PUSH
2629: LD_INT 7
2631: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2632: LD_ADDR_OWVAR 44
2636: PUSH
2637: LD_INT 10
2639: ST_TO_ADDR
// bc_kind2 := - 1 ;
2640: LD_ADDR_OWVAR 45
2644: PUSH
2645: LD_INT 1
2647: NEG
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 26
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2537
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2537
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 26
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 26
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 26
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 26
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 26
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 71826 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 26
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 50595 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 26
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 50595 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 26
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 50595 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 26
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 50595 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 9
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 9
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 21
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 37506 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 21
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 22
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 37506 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 22
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4148: LD_STRING GladstoneIn07
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: CALL_OW 30
4158: NOT
4159: IFFALSE 4239
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4161: LD_ADDR_EXP 17
4165: PUSH
4166: LD_STRING Gladstone
4168: PPUSH
4169: LD_EXP 1
4173: NOT
4174: PPUSH
4175: LD_STRING 06c_
4177: PPUSH
4178: CALL 37506 0 3
4182: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4183: LD_EXP 17
4187: NOT
4188: PUSH
4189: LD_STRING GladstoneStayInDelta
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 30
4199: AND
4200: IFFALSE 4224
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4202: LD_ADDR_EXP 17
4206: PUSH
4207: LD_STRING Gladstone
4209: PPUSH
4210: LD_EXP 1
4214: NOT
4215: PPUSH
4216: LD_STRING 05_
4218: PPUSH
4219: CALL 37506 0 3
4223: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4224: LD_EXP 17
4228: PPUSH
4229: LD_INT 4
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4239: LD_STRING LisaStayInDelta
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 30
4249: IFFALSE 4285
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4251: LD_ADDR_EXP 15
4255: PUSH
4256: LD_STRING Lisa
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: LD_STRING 05_
4264: PPUSH
4265: CALL 37506 0 3
4269: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4270: LD_EXP 15
4274: PPUSH
4275: LD_INT 4
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4285: LD_STRING BobbyStayInDelta
4287: PPUSH
4288: LD_INT 0
4290: PPUSH
4291: CALL_OW 30
4295: IFFALSE 4331
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4297: LD_ADDR_EXP 13
4301: PUSH
4302: LD_STRING Bobby
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_STRING 05_
4310: PPUSH
4311: CALL 37506 0 3
4315: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4316: LD_EXP 13
4320: PPUSH
4321: LD_INT 4
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4331: LD_STRING CyrusStayInDelta
4333: PPUSH
4334: LD_INT 0
4336: PPUSH
4337: CALL_OW 30
4341: IFFALSE 4377
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4343: LD_ADDR_EXP 14
4347: PUSH
4348: LD_STRING Cyrus
4350: PPUSH
4351: LD_INT 1
4353: PPUSH
4354: LD_STRING 05_
4356: PPUSH
4357: CALL 37506 0 3
4361: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4362: LD_EXP 14
4366: PPUSH
4367: LD_INT 4
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4377: LD_STRING BrownStayInDelta
4379: PPUSH
4380: LD_INT 0
4382: PPUSH
4383: CALL_OW 30
4387: IFFALSE 4423
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4389: LD_ADDR_EXP 11
4393: PUSH
4394: LD_STRING Brown
4396: PPUSH
4397: LD_INT 1
4399: PPUSH
4400: LD_STRING 05_
4402: PPUSH
4403: CALL 37506 0 3
4407: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4408: LD_EXP 11
4412: PPUSH
4413: LD_INT 4
4415: PPUSH
4416: LD_INT 0
4418: PPUSH
4419: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4423: LD_STRING DonaldsonStayInDelta
4425: PPUSH
4426: LD_INT 0
4428: PPUSH
4429: CALL_OW 30
4433: IFFALSE 4469
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4435: LD_ADDR_EXP 12
4439: PUSH
4440: LD_STRING Donaldson
4442: PPUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_STRING 05_
4448: PPUSH
4449: CALL 37506 0 3
4453: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4454: LD_EXP 12
4458: PPUSH
4459: LD_INT 4
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4469: LD_ADDR_VAR 0 4
4473: PUSH
4474: LD_STRING OthersStayInDelta
4476: PPUSH
4477: CALL_OW 31
4481: ST_TO_ADDR
// if others > 2 then
4482: LD_VAR 0 4
4486: PUSH
4487: LD_INT 2
4489: GREATER
4490: IFFALSE 4553
// begin for j := 1 to 2 do
4492: LD_ADDR_VAR 0 3
4496: PUSH
4497: DOUBLE
4498: LD_INT 1
4500: DEC
4501: ST_TO_ADDR
4502: LD_INT 2
4504: PUSH
4505: FOR_TO
4506: IFFALSE 4549
// begin SetTag ( others [ j ] , 107 ) ;
4508: LD_VAR 0 4
4512: PUSH
4513: LD_VAR 0 3
4517: ARRAY
4518: PPUSH
4519: LD_INT 107
4521: PPUSH
4522: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4526: LD_VAR 0 4
4530: PUSH
4531: LD_VAR 0 3
4535: ARRAY
4536: PPUSH
4537: LD_INT 4
4539: PPUSH
4540: LD_INT 0
4542: PPUSH
4543: CALL_OW 49
// end ;
4547: GO 4505
4549: POP
4550: POP
// end else
4551: GO 4614
// begin for j := 1 to others do
4553: LD_ADDR_VAR 0 3
4557: PUSH
4558: DOUBLE
4559: LD_INT 1
4561: DEC
4562: ST_TO_ADDR
4563: LD_VAR 0 4
4567: PUSH
4568: FOR_TO
4569: IFFALSE 4612
// begin SetTag ( others [ i ] , 107 ) ;
4571: LD_VAR 0 4
4575: PUSH
4576: LD_VAR 0 2
4580: ARRAY
4581: PPUSH
4582: LD_INT 107
4584: PPUSH
4585: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4589: LD_VAR 0 4
4593: PUSH
4594: LD_VAR 0 3
4598: ARRAY
4599: PPUSH
4600: LD_INT 4
4602: PPUSH
4603: LD_INT 0
4605: PPUSH
4606: CALL_OW 49
// end ;
4610: GO 4568
4612: POP
4613: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4614: LD_ADDR_VAR 0 4
4618: PUSH
4619: LD_STRING 06_other_apemans
4621: PPUSH
4622: CALL_OW 31
4626: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4627: LD_VAR 0 4
4631: PUSH
4632: LD_INT 3
4634: PUSH
4635: LD_INT 2
4637: PUSH
4638: LD_INT 2
4640: PUSH
4641: LD_INT 1
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: PUSH
4650: LD_OWVAR 67
4654: ARRAY
4655: GREATEREQUAL
4656: IFFALSE 4689
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4658: LD_ADDR_VAR 0 3
4662: PUSH
4663: LD_INT 3
4665: PUSH
4666: LD_INT 2
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 1
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: PUSH
4681: LD_OWVAR 67
4685: ARRAY
4686: ST_TO_ADDR
4687: GO 4699
// j := others ;
4689: LD_ADDR_VAR 0 3
4693: PUSH
4694: LD_VAR 0 4
4698: ST_TO_ADDR
// for i := 1 to j do
4699: LD_ADDR_VAR 0 2
4703: PUSH
4704: DOUBLE
4705: LD_INT 1
4707: DEC
4708: ST_TO_ADDR
4709: LD_VAR 0 3
4713: PUSH
4714: FOR_TO
4715: IFFALSE 4740
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4717: LD_VAR 0 4
4721: PUSH
4722: LD_VAR 0 2
4726: ARRAY
4727: PPUSH
4728: LD_INT 4
4730: PPUSH
4731: LD_INT 0
4733: PPUSH
4734: CALL_OW 49
4738: GO 4714
4740: POP
4741: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4742: LD_INT 4
4744: PPUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 1
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: LD_INT 21
4757: PUSH
4758: LD_INT 1
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PPUSH
4769: CALL_OW 70
4773: PPUSH
4774: LD_INT 53
4776: PPUSH
4777: LD_INT 19
4779: PPUSH
4780: CALL_OW 111
// end ;
4784: LD_VAR 0 1
4788: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4789: LD_INT 0
4791: PPUSH
4792: PPUSH
4793: PPUSH
4794: PPUSH
4795: PPUSH
4796: PPUSH
4797: PPUSH
4798: PPUSH
4799: PPUSH
4800: PPUSH
4801: PPUSH
4802: PPUSH
4803: PPUSH
4804: PPUSH
4805: PPUSH
// prefix := 07c_ ;
4806: LD_ADDR_VAR 0 11
4810: PUSH
4811: LD_STRING 07c_
4813: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4814: LD_ADDR_VAR 0 9
4818: PUSH
4819: LD_STRING 07_vehicles
4821: PPUSH
4822: EMPTY
4823: PPUSH
4824: CALL_OW 30
4828: ST_TO_ADDR
// if not vehicles and debug then
4829: LD_VAR 0 9
4833: NOT
4834: PUSH
4835: LD_EXP 1
4839: AND
4840: IFFALSE 4865
// vehicles := [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ;
4842: LD_ADDR_VAR 0 9
4846: PUSH
4847: LD_INT 2
4849: PUSH
4850: LD_INT 1
4852: PUSH
4853: LD_INT 1
4855: PUSH
4856: LD_INT 4
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: ST_TO_ADDR
// if not vehicles then
4865: LD_VAR 0 9
4869: NOT
4870: IFFALSE 4927
// begin area := westGammaSupportArea ;
4872: LD_ADDR_VAR 0 12
4876: PUSH
4877: LD_INT 16
4879: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4880: LD_ADDR_VAR 0 15
4884: PUSH
4885: LD_INT 37
4887: PUSH
4888: LD_INT 70
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4895: LD_ADDR_VAR 0 14
4899: PUSH
4900: LD_INT 43
4902: PUSH
4903: LD_INT 67
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: ST_TO_ADDR
// dir := 1 ;
4910: LD_ADDR_VAR 0 13
4914: PUSH
4915: LD_INT 1
4917: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4918: LD_INT 4200
4920: PPUSH
4921: CALL_OW 67
// end else
4925: GO 4973
// begin area := southGammaSupportArea ;
4927: LD_ADDR_VAR 0 12
4931: PUSH
4932: LD_INT 5
4934: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4935: LD_ADDR_VAR 0 15
4939: PUSH
4940: LD_INT 87
4942: PUSH
4943: LD_INT 147
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4950: LD_ADDR_VAR 0 14
4954: PUSH
4955: LD_INT 74
4957: PUSH
4958: LD_INT 129
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: ST_TO_ADDR
// dir := 0 ;
4965: LD_ADDR_VAR 0 13
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// end ; squad := [ ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: EMPTY
4979: ST_TO_ADDR
// tmp := [ ] ;
4980: LD_ADDR_VAR 0 7
4984: PUSH
4985: EMPTY
4986: ST_TO_ADDR
// tmpVehs := [ ] ;
4987: LD_ADDR_VAR 0 8
4991: PUSH
4992: EMPTY
4993: ST_TO_ADDR
// uc_side := 1 ;
4994: LD_ADDR_OWVAR 20
4998: PUSH
4999: LD_INT 1
5001: ST_TO_ADDR
// uc_nation := 1 ;
5002: LD_ADDR_OWVAR 21
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// if vehicles then
5010: LD_VAR 0 9
5014: IFFALSE 5170
// begin k := 1 ;
5016: LD_ADDR_VAR 0 3
5020: PUSH
5021: LD_INT 1
5023: ST_TO_ADDR
// for i := 1 to vehicles div 4 do
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: DOUBLE
5030: LD_INT 1
5032: DEC
5033: ST_TO_ADDR
5034: LD_VAR 0 9
5038: PUSH
5039: LD_INT 4
5041: DIV
5042: PUSH
5043: FOR_TO
5044: IFFALSE 5168
// begin vc_chassis := vehicles [ k ] ;
5046: LD_ADDR_OWVAR 37
5050: PUSH
5051: LD_VAR 0 9
5055: PUSH
5056: LD_VAR 0 3
5060: ARRAY
5061: ST_TO_ADDR
// vc_engine := vehicles [ k + 1 ] ;
5062: LD_ADDR_OWVAR 39
5066: PUSH
5067: LD_VAR 0 9
5071: PUSH
5072: LD_VAR 0 3
5076: PUSH
5077: LD_INT 1
5079: PLUS
5080: ARRAY
5081: ST_TO_ADDR
// vc_control := vehicles [ k + 2 ] ;
5082: LD_ADDR_OWVAR 38
5086: PUSH
5087: LD_VAR 0 9
5091: PUSH
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 2
5099: PLUS
5100: ARRAY
5101: ST_TO_ADDR
// vc_weapon := vehicles [ k + 3 ] ;
5102: LD_ADDR_OWVAR 40
5106: PUSH
5107: LD_VAR 0 9
5111: PUSH
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 3
5119: PLUS
5120: ARRAY
5121: ST_TO_ADDR
// k := k + 4 ;
5122: LD_ADDR_VAR 0 3
5126: PUSH
5127: LD_VAR 0 3
5131: PUSH
5132: LD_INT 4
5134: PLUS
5135: ST_TO_ADDR
// veh := CreateVehicle ;
5136: LD_ADDR_VAR 0 10
5140: PUSH
5141: CALL_OW 45
5145: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5146: LD_ADDR_VAR 0 8
5150: PUSH
5151: LD_VAR 0 8
5155: PPUSH
5156: LD_VAR 0 10
5160: PPUSH
5161: CALL 74187 0 2
5165: ST_TO_ADDR
// end ;
5166: GO 5043
5168: POP
5169: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5170: LD_ADDR_EXP 10
5174: PUSH
5175: LD_STRING JMM
5177: PPUSH
5178: LD_EXP 1
5182: NOT
5183: PPUSH
5184: LD_VAR 0 11
5188: PPUSH
5189: CALL 37506 0 3
5193: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5194: LD_EXP 9
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: LD_INT 3
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: IN
5209: PUSH
5210: LD_EXP 11
5214: NOT
5215: AND
5216: IFFALSE 5277
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5218: LD_ADDR_EXP 11
5222: PUSH
5223: LD_STRING Brown
5225: PPUSH
5226: LD_EXP 1
5230: NOT
5231: PPUSH
5232: LD_VAR 0 11
5236: PPUSH
5237: CALL 37506 0 3
5241: ST_TO_ADDR
// if Brown then
5242: LD_EXP 11
5246: IFFALSE 5277
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5248: LD_ADDR_VAR 0 7
5252: PUSH
5253: LD_VAR 0 7
5257: PPUSH
5258: LD_VAR 0 7
5262: PUSH
5263: LD_INT 1
5265: PLUS
5266: PPUSH
5267: LD_EXP 11
5271: PPUSH
5272: CALL_OW 1
5276: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5277: LD_EXP 9
5281: PUSH
5282: LD_INT 2
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: IN
5292: PUSH
5293: LD_EXP 12
5297: NOT
5298: AND
5299: IFFALSE 5360
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5301: LD_ADDR_EXP 12
5305: PUSH
5306: LD_STRING Donaldson
5308: PPUSH
5309: LD_EXP 1
5313: NOT
5314: PPUSH
5315: LD_VAR 0 11
5319: PPUSH
5320: CALL 37506 0 3
5324: ST_TO_ADDR
// if Donaldson then
5325: LD_EXP 12
5329: IFFALSE 5360
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5331: LD_ADDR_VAR 0 7
5335: PUSH
5336: LD_VAR 0 7
5340: PPUSH
5341: LD_VAR 0 7
5345: PUSH
5346: LD_INT 1
5348: PLUS
5349: PPUSH
5350: LD_EXP 12
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// end ; if not Bobby then
5360: LD_EXP 13
5364: NOT
5365: IFFALSE 5423
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5367: LD_ADDR_EXP 13
5371: PUSH
5372: LD_STRING Bobby
5374: PPUSH
5375: LD_INT 1
5377: PPUSH
5378: LD_VAR 0 11
5382: PPUSH
5383: CALL 37506 0 3
5387: ST_TO_ADDR
// if Bobby then
5388: LD_EXP 13
5392: IFFALSE 5423
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5394: LD_ADDR_VAR 0 7
5398: PUSH
5399: LD_VAR 0 7
5403: PPUSH
5404: LD_VAR 0 7
5408: PUSH
5409: LD_INT 1
5411: PLUS
5412: PPUSH
5413: LD_EXP 13
5417: PPUSH
5418: CALL_OW 1
5422: ST_TO_ADDR
// end ; if not Cyrus then
5423: LD_EXP 14
5427: NOT
5428: IFFALSE 5486
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5430: LD_ADDR_EXP 14
5434: PUSH
5435: LD_STRING Cyrus
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_VAR 0 11
5445: PPUSH
5446: CALL 37506 0 3
5450: ST_TO_ADDR
// if Cyrus then
5451: LD_EXP 14
5455: IFFALSE 5486
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5457: LD_ADDR_VAR 0 7
5461: PUSH
5462: LD_VAR 0 7
5466: PPUSH
5467: LD_VAR 0 7
5471: PUSH
5472: LD_INT 1
5474: PLUS
5475: PPUSH
5476: LD_EXP 14
5480: PPUSH
5481: CALL_OW 1
5485: ST_TO_ADDR
// end ; if not Lisa then
5486: LD_EXP 15
5490: NOT
5491: IFFALSE 5552
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5493: LD_ADDR_EXP 15
5497: PUSH
5498: LD_STRING Lisa
5500: PPUSH
5501: LD_EXP 1
5505: NOT
5506: PPUSH
5507: LD_VAR 0 11
5511: PPUSH
5512: CALL 37506 0 3
5516: ST_TO_ADDR
// if Lisa then
5517: LD_EXP 15
5521: IFFALSE 5552
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5523: LD_ADDR_VAR 0 7
5527: PUSH
5528: LD_VAR 0 7
5532: PPUSH
5533: LD_VAR 0 7
5537: PUSH
5538: LD_INT 1
5540: PLUS
5541: PPUSH
5542: LD_EXP 15
5546: PPUSH
5547: CALL_OW 1
5551: ST_TO_ADDR
// end ; if not Frank then
5552: LD_EXP 16
5556: NOT
5557: IFFALSE 5618
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5559: LD_ADDR_EXP 16
5563: PUSH
5564: LD_STRING Frank
5566: PPUSH
5567: LD_EXP 1
5571: NOT
5572: PPUSH
5573: LD_VAR 0 11
5577: PPUSH
5578: CALL 37506 0 3
5582: ST_TO_ADDR
// if Frank then
5583: LD_EXP 16
5587: IFFALSE 5618
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5589: LD_ADDR_VAR 0 7
5593: PUSH
5594: LD_VAR 0 7
5598: PPUSH
5599: LD_VAR 0 7
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: PPUSH
5608: LD_EXP 16
5612: PPUSH
5613: CALL_OW 1
5617: ST_TO_ADDR
// end ; if not Kikuchi then
5618: LD_EXP 18
5622: NOT
5623: IFFALSE 5681
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5625: LD_ADDR_EXP 18
5629: PUSH
5630: LD_STRING Kikuchi
5632: PPUSH
5633: LD_INT 1
5635: PPUSH
5636: LD_VAR 0 11
5640: PPUSH
5641: CALL 37506 0 3
5645: ST_TO_ADDR
// if Kikuchi then
5646: LD_EXP 18
5650: IFFALSE 5681
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5652: LD_ADDR_VAR 0 7
5656: PUSH
5657: LD_VAR 0 7
5661: PPUSH
5662: LD_VAR 0 7
5666: PUSH
5667: LD_INT 1
5669: PLUS
5670: PPUSH
5671: LD_EXP 18
5675: PPUSH
5676: CALL_OW 1
5680: ST_TO_ADDR
// end ; if not Gladstone then
5681: LD_EXP 17
5685: NOT
5686: IFFALSE 5747
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5688: LD_ADDR_EXP 17
5692: PUSH
5693: LD_STRING Gladstone
5695: PPUSH
5696: LD_EXP 1
5700: NOT
5701: PPUSH
5702: LD_VAR 0 11
5706: PPUSH
5707: CALL 37506 0 3
5711: ST_TO_ADDR
// if Gladstone then
5712: LD_EXP 17
5716: IFFALSE 5747
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5718: LD_ADDR_VAR 0 7
5722: PUSH
5723: LD_VAR 0 7
5727: PPUSH
5728: LD_VAR 0 7
5732: PUSH
5733: LD_INT 1
5735: PLUS
5736: PPUSH
5737: LD_EXP 17
5741: PPUSH
5742: CALL_OW 1
5746: ST_TO_ADDR
// end ; if not Khatam then
5747: LD_EXP 19
5751: NOT
5752: IFFALSE 5810
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5754: LD_ADDR_EXP 19
5758: PUSH
5759: LD_STRING Khatam
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: LD_VAR 0 11
5769: PPUSH
5770: CALL 37506 0 3
5774: ST_TO_ADDR
// if Khatam then
5775: LD_EXP 19
5779: IFFALSE 5810
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5781: LD_ADDR_VAR 0 7
5785: PUSH
5786: LD_VAR 0 7
5790: PPUSH
5791: LD_VAR 0 7
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_EXP 19
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5810: LD_ADDR_VAR 0 5
5814: PUSH
5815: LD_STRING 07c_others
5817: PPUSH
5818: CALL_OW 31
5822: ST_TO_ADDR
// squad := others ;
5823: LD_ADDR_VAR 0 6
5827: PUSH
5828: LD_VAR 0 5
5832: ST_TO_ADDR
// if others then
5833: LD_VAR 0 5
5837: IFFALSE 5937
// for i in others do
5839: LD_ADDR_VAR 0 2
5843: PUSH
5844: LD_VAR 0 5
5848: PUSH
5849: FOR_IN
5850: IFFALSE 5935
// begin SetTag ( i , 108 ) ;
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_INT 108
5859: PPUSH
5860: CALL_OW 109
// if GetClass ( i ) = class_mechanic then
5864: LD_VAR 0 2
5868: PPUSH
5869: CALL_OW 257
5873: PUSH
5874: LD_INT 3
5876: EQUAL
5877: IFFALSE 5904
// tmp := Insert ( tmp , 1 , i ) else
5879: LD_ADDR_VAR 0 7
5883: PUSH
5884: LD_VAR 0 7
5888: PPUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_VAR 0 2
5896: PPUSH
5897: CALL_OW 2
5901: ST_TO_ADDR
5902: GO 5933
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5904: LD_ADDR_VAR 0 7
5908: PUSH
5909: LD_VAR 0 7
5913: PPUSH
5914: LD_VAR 0 7
5918: PUSH
5919: LD_INT 1
5921: PLUS
5922: PPUSH
5923: LD_VAR 0 2
5927: PPUSH
5928: CALL_OW 1
5932: ST_TO_ADDR
// end ;
5933: GO 5849
5935: POP
5936: POP
// if tmp then
5937: LD_VAR 0 7
5941: IFFALSE 6141
// begin for i in tmp do
5943: LD_ADDR_VAR 0 2
5947: PUSH
5948: LD_VAR 0 7
5952: PUSH
5953: FOR_IN
5954: IFFALSE 6139
// begin SetDir ( i , dir ) ;
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_VAR 0 13
5965: PPUSH
5966: CALL_OW 233
// if tmpVehs then
5970: LD_VAR 0 8
5974: IFFALSE 6064
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5976: LD_VAR 0 8
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5992: LD_VAR 0 8
5996: PUSH
5997: LD_INT 1
5999: ARRAY
6000: PPUSH
6001: LD_VAR 0 15
6005: PUSH
6006: LD_INT 1
6008: ARRAY
6009: PPUSH
6010: LD_VAR 0 15
6014: PUSH
6015: LD_INT 2
6017: ARRAY
6018: PPUSH
6019: LD_INT 0
6021: PPUSH
6022: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6026: LD_VAR 0 2
6030: PPUSH
6031: LD_VAR 0 8
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6044: LD_ADDR_VAR 0 8
6048: PUSH
6049: LD_VAR 0 8
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: CALL_OW 3
6061: ST_TO_ADDR
// end else
6062: GO 6081
// PlaceUnitArea ( i , area , false ) ;
6064: LD_VAR 0 2
6068: PPUSH
6069: LD_VAR 0 12
6073: PPUSH
6074: LD_INT 0
6076: PPUSH
6077: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6081: LD_VAR 0 2
6085: PPUSH
6086: LD_VAR 0 14
6090: PUSH
6091: LD_INT 1
6093: ARRAY
6094: PPUSH
6095: LD_VAR 0 14
6099: PUSH
6100: LD_INT 2
6102: ARRAY
6103: PPUSH
6104: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6115: LD_VAR 0 12
6119: PPUSH
6120: LD_INT 22
6122: PUSH
6123: LD_INT 1
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 70
6134: NOT
6135: IFFALSE 6108
// end ;
6137: GO 5953
6139: POP
6140: POP
// end ; PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6141: LD_EXP 10
6145: PPUSH
6146: LD_VAR 0 15
6150: PUSH
6151: LD_INT 1
6153: ARRAY
6154: PPUSH
6155: LD_VAR 0 15
6159: PUSH
6160: LD_INT 2
6162: ARRAY
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6171: LD_EXP 10
6175: PPUSH
6176: LD_VAR 0 14
6180: PUSH
6181: LD_INT 1
6183: ARRAY
6184: PPUSH
6185: LD_VAR 0 14
6189: PUSH
6190: LD_INT 2
6192: ARRAY
6193: PPUSH
6194: CALL_OW 111
// jmmArrival := true ;
6198: LD_ADDR_EXP 7
6202: PUSH
6203: LD_INT 1
6205: ST_TO_ADDR
// end ;
6206: LD_VAR 0 1
6210: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6211: LD_INT 0
6213: PPUSH
6214: PPUSH
6215: PPUSH
6216: PPUSH
6217: PPUSH
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6218: LD_ADDR_VAR 0 5
6222: PUSH
6223: LD_INT 6
6225: PPUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 21
6231: PUSH
6232: LD_INT 3
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 70
6247: ST_TO_ADDR
// if tmp then
6248: LD_VAR 0 5
6252: IFFALSE 6276
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6254: LD_VAR 0 5
6258: PPUSH
6259: LD_INT 33
6261: PPUSH
6262: LD_INT 39
6264: PPUSH
6265: CALL_OW 111
// wait ( 0 0$3 ) ;
6269: LD_INT 105
6271: PPUSH
6272: CALL_OW 67
// end ; uc_side := 4 ;
6276: LD_ADDR_OWVAR 20
6280: PUSH
6281: LD_INT 4
6283: ST_TO_ADDR
// uc_nation := 1 ;
6284: LD_ADDR_OWVAR 21
6288: PUSH
6289: LD_INT 1
6291: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6292: LD_ADDR_EXP 23
6296: PUSH
6297: LD_STRING Sikorski
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_STRING 
6305: PPUSH
6306: CALL 37506 0 3
6310: ST_TO_ADDR
// vc_engine := engine_combustion ;
6311: LD_ADDR_OWVAR 39
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// vc_control = control_manual ;
6319: LD_ADDR_OWVAR 38
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// vc_weapon = [ us_heavy_gun , us_double_gun , us_double_gun , us_double_gun ] [ Difficulty ] ;
6327: LD_ADDR_OWVAR 40
6331: PUSH
6332: LD_INT 6
6334: PUSH
6335: LD_INT 5
6337: PUSH
6338: LD_INT 5
6340: PUSH
6341: LD_INT 5
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: LD_OWVAR 67
6354: ARRAY
6355: ST_TO_ADDR
// vc_chassis = us_heavy_tracked ;
6356: LD_ADDR_OWVAR 37
6360: PUSH
6361: LD_INT 4
6363: ST_TO_ADDR
// veh := CreateVehicle ;
6364: LD_ADDR_VAR 0 4
6368: PUSH
6369: CALL_OW 45
6373: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6374: LD_VAR 0 4
6378: PPUSH
6379: LD_INT 3
6381: PPUSH
6382: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6386: LD_VAR 0 4
6390: PPUSH
6391: LD_INT 4
6393: NEG
6394: PPUSH
6395: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6399: LD_VAR 0 4
6403: PPUSH
6404: LD_INT 70
6406: PPUSH
6407: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6411: LD_VAR 0 4
6415: PPUSH
6416: LD_INT 6
6418: PPUSH
6419: LD_INT 0
6421: PPUSH
6422: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6426: LD_EXP 23
6430: PPUSH
6431: LD_VAR 0 4
6435: PPUSH
6436: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6440: LD_EXP 23
6444: PPUSH
6445: LD_INT 37
6447: PPUSH
6448: LD_INT 30
6450: PPUSH
6451: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6455: LD_INT 10
6457: PPUSH
6458: CALL_OW 67
// InitHc_All ( ) ;
6462: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: DOUBLE
6472: LD_INT 1
6474: DEC
6475: ST_TO_ADDR
6476: LD_INT 3
6478: PUSH
6479: LD_INT 2
6481: PUSH
6482: LD_INT 2
6484: PUSH
6485: LD_INT 2
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: PUSH
6494: LD_OWVAR 67
6498: ARRAY
6499: PUSH
6500: FOR_TO
6501: IFFALSE 6613
// begin uc_side = 4 ;
6503: LD_ADDR_OWVAR 20
6507: PUSH
6508: LD_INT 4
6510: ST_TO_ADDR
// uc_nation = 1 ;
6511: LD_ADDR_OWVAR 21
6515: PUSH
6516: LD_INT 1
6518: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6519: LD_INT 0
6521: PPUSH
6522: LD_INT 1
6524: PPUSH
6525: LD_INT 4
6527: PPUSH
6528: LD_INT 7
6530: PPUSH
6531: CALL_OW 12
6535: PPUSH
6536: CALL_OW 380
// un := CreateHuman ;
6540: LD_ADDR_VAR 0 3
6544: PUSH
6545: CALL_OW 44
6549: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_INT 3
6557: PPUSH
6558: CALL_OW 233
// SetTag ( un , 101 ) ;
6562: LD_VAR 0 3
6566: PPUSH
6567: LD_INT 101
6569: PPUSH
6570: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6574: LD_VAR 0 3
6578: PPUSH
6579: LD_INT 6
6581: PPUSH
6582: LD_INT 0
6584: PPUSH
6585: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6589: LD_VAR 0 3
6593: PPUSH
6594: LD_INT 25
6596: PPUSH
6597: LD_INT 27
6599: PPUSH
6600: CALL_OW 111
// wait ( 0 0$1 ) ;
6604: LD_INT 35
6606: PPUSH
6607: CALL_OW 67
// end ;
6611: GO 6500
6613: POP
6614: POP
// for i := 1 to 2 do
6615: LD_ADDR_VAR 0 2
6619: PUSH
6620: DOUBLE
6621: LD_INT 1
6623: DEC
6624: ST_TO_ADDR
6625: LD_INT 2
6627: PUSH
6628: FOR_TO
6629: IFFALSE 6741
// begin uc_side = 4 ;
6631: LD_ADDR_OWVAR 20
6635: PUSH
6636: LD_INT 4
6638: ST_TO_ADDR
// uc_nation = 1 ;
6639: LD_ADDR_OWVAR 21
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6647: LD_INT 0
6649: PPUSH
6650: LD_INT 4
6652: PPUSH
6653: LD_INT 3
6655: PPUSH
6656: LD_INT 5
6658: PPUSH
6659: CALL_OW 12
6663: PPUSH
6664: CALL_OW 380
// un := CreateHuman ;
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: CALL_OW 44
6677: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6678: LD_VAR 0 3
6682: PPUSH
6683: LD_INT 3
6685: PPUSH
6686: CALL_OW 233
// SetTag ( un , 101 ) ;
6690: LD_VAR 0 3
6694: PPUSH
6695: LD_INT 101
6697: PPUSH
6698: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6702: LD_VAR 0 3
6706: PPUSH
6707: LD_INT 6
6709: PPUSH
6710: LD_INT 0
6712: PPUSH
6713: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6717: LD_VAR 0 3
6721: PPUSH
6722: LD_INT 25
6724: PPUSH
6725: LD_INT 27
6727: PPUSH
6728: CALL_OW 111
// wait ( 0 0$1 ) ;
6732: LD_INT 35
6734: PPUSH
6735: CALL_OW 67
// end ;
6739: GO 6628
6741: POP
6742: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: DOUBLE
6749: LD_INT 1
6751: DEC
6752: ST_TO_ADDR
6753: LD_INT 5
6755: PUSH
6756: LD_INT 4
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 3
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_OWVAR 67
6775: ARRAY
6776: PUSH
6777: FOR_TO
6778: IFFALSE 7020
// begin uc_side := 4 ;
6780: LD_ADDR_OWVAR 20
6784: PUSH
6785: LD_INT 4
6787: ST_TO_ADDR
// uc_nation := 1 ;
6788: LD_ADDR_OWVAR 21
6792: PUSH
6793: LD_INT 1
6795: ST_TO_ADDR
// vc_engine := engine_combustion ;
6796: LD_ADDR_OWVAR 39
6800: PUSH
6801: LD_INT 1
6803: ST_TO_ADDR
// vc_control := control_manual ;
6804: LD_ADDR_OWVAR 38
6808: PUSH
6809: LD_INT 1
6811: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6812: LD_ADDR_OWVAR 40
6816: PUSH
6817: LD_INT 5
6819: PUSH
6820: LD_INT 7
6822: PUSH
6823: LD_INT 5
6825: PUSH
6826: LD_INT 4
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: PUSH
6835: LD_VAR 0 2
6839: PUSH
6840: LD_INT 4
6842: MOD
6843: PUSH
6844: LD_INT 1
6846: PLUS
6847: ARRAY
6848: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6849: LD_ADDR_OWVAR 37
6853: PUSH
6854: LD_INT 3
6856: PUSH
6857: LD_INT 3
6859: PUSH
6860: LD_INT 4
6862: PUSH
6863: LD_INT 4
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: PUSH
6872: LD_VAR 0 2
6876: PUSH
6877: LD_INT 4
6879: MOD
6880: PUSH
6881: LD_INT 1
6883: PLUS
6884: ARRAY
6885: ST_TO_ADDR
// veh := CreateVehicle ;
6886: LD_ADDR_VAR 0 4
6890: PUSH
6891: CALL_OW 45
6895: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6896: LD_VAR 0 4
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: CALL_OW 233
// SetTag ( veh , 0 ) ;
6908: LD_VAR 0 4
6912: PPUSH
6913: LD_INT 0
6915: PPUSH
6916: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6920: LD_VAR 0 4
6924: PPUSH
6925: LD_INT 70
6927: PPUSH
6928: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6932: LD_VAR 0 4
6936: PPUSH
6937: LD_INT 6
6939: PPUSH
6940: LD_INT 0
6942: PPUSH
6943: CALL_OW 49
// InitHc ;
6947: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
6951: LD_INT 0
6953: PPUSH
6954: LD_INT 3
6956: PPUSH
6957: LD_INT 4
6959: PPUSH
6960: LD_INT 7
6962: PPUSH
6963: CALL_OW 12
6967: PPUSH
6968: CALL_OW 380
// un := CreateHuman ;
6972: LD_ADDR_VAR 0 3
6976: PUSH
6977: CALL_OW 44
6981: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6982: LD_VAR 0 3
6986: PPUSH
6987: LD_VAR 0 4
6991: PPUSH
6992: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
6996: LD_VAR 0 3
7000: PPUSH
7001: LD_INT 30
7003: PPUSH
7004: LD_INT 22
7006: PPUSH
7007: CALL_OW 111
// wait ( 0 0$3 ) ;
7011: LD_INT 105
7013: PPUSH
7014: CALL_OW 67
// end ;
7018: GO 6777
7020: POP
7021: POP
// wait ( 0 0$10 ) ;
7022: LD_INT 350
7024: PPUSH
7025: CALL_OW 67
// end ;
7029: LD_VAR 0 1
7033: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7034: LD_INT 0
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
// gammaBase := [ ] ;
7040: LD_ADDR_VAR 0 4
7044: PUSH
7045: EMPTY
7046: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7047: LD_ADDR_VAR 0 5
7051: PUSH
7052: LD_VAR 0 1
7056: PPUSH
7057: LD_INT 22
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 21
7069: PUSH
7070: LD_INT 3
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 50
7079: PUSH
7080: EMPTY
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: PPUSH
7088: CALL_OW 70
7092: ST_TO_ADDR
// for i in buildings do
7093: LD_ADDR_VAR 0 3
7097: PUSH
7098: LD_VAR 0 5
7102: PUSH
7103: FOR_IN
7104: IFFALSE 7541
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7106: LD_VAR 0 3
7110: PPUSH
7111: CALL_OW 266
7115: PUSH
7116: LD_INT 6
7118: PUSH
7119: LD_INT 7
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: IN
7130: IFFALSE 7244
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7132: LD_ADDR_VAR 0 4
7136: PUSH
7137: LD_VAR 0 4
7141: PUSH
7142: LD_VAR 0 3
7146: PPUSH
7147: CALL_OW 266
7151: PUSH
7152: LD_VAR 0 3
7156: PPUSH
7157: CALL_OW 250
7161: PUSH
7162: LD_VAR 0 3
7166: PPUSH
7167: CALL_OW 251
7171: PUSH
7172: LD_VAR 0 3
7176: PPUSH
7177: CALL_OW 254
7181: PUSH
7182: LD_VAR 0 3
7186: PPUSH
7187: CALL_OW 267
7191: PUSH
7192: LD_VAR 0 3
7196: PPUSH
7197: CALL_OW 248
7201: PUSH
7202: LD_VAR 0 3
7206: PPUSH
7207: LD_INT 1
7209: PPUSH
7210: CALL_OW 268
7214: PUSH
7215: LD_VAR 0 3
7219: PPUSH
7220: LD_INT 2
7222: PPUSH
7223: CALL_OW 268
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: PUSH
7238: EMPTY
7239: LIST
7240: ADD
7241: ST_TO_ADDR
7242: GO 7539
// if GetBType ( i ) = b_bunker then
7244: LD_VAR 0 3
7248: PPUSH
7249: CALL_OW 266
7253: PUSH
7254: LD_INT 32
7256: EQUAL
7257: IFFALSE 7354
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7259: LD_ADDR_VAR 0 4
7263: PUSH
7264: LD_VAR 0 4
7268: PUSH
7269: LD_VAR 0 3
7273: PPUSH
7274: CALL_OW 266
7278: PUSH
7279: LD_VAR 0 3
7283: PPUSH
7284: CALL_OW 250
7288: PUSH
7289: LD_VAR 0 3
7293: PPUSH
7294: CALL_OW 251
7298: PUSH
7299: LD_VAR 0 3
7303: PPUSH
7304: CALL_OW 254
7308: PUSH
7309: LD_VAR 0 3
7313: PPUSH
7314: CALL_OW 267
7318: PUSH
7319: LD_VAR 0 3
7323: PPUSH
7324: CALL_OW 248
7328: PUSH
7329: LD_VAR 0 3
7333: PPUSH
7334: CALL_OW 269
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: PUSH
7348: EMPTY
7349: LIST
7350: ADD
7351: ST_TO_ADDR
7352: GO 7539
// if GetBType ( i ) = b_factory then
7354: LD_VAR 0 3
7358: PPUSH
7359: CALL_OW 266
7363: PUSH
7364: LD_INT 3
7366: EQUAL
7367: IFFALSE 7457
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7369: LD_ADDR_VAR 0 4
7373: PUSH
7374: LD_VAR 0 4
7378: PPUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_VAR 0 3
7386: PPUSH
7387: CALL_OW 266
7391: PUSH
7392: LD_VAR 0 3
7396: PPUSH
7397: CALL_OW 250
7401: PUSH
7402: LD_VAR 0 3
7406: PPUSH
7407: CALL_OW 251
7411: PUSH
7412: LD_VAR 0 3
7416: PPUSH
7417: CALL_OW 254
7421: PUSH
7422: LD_VAR 0 3
7426: PPUSH
7427: CALL_OW 267
7431: PUSH
7432: LD_VAR 0 3
7436: PPUSH
7437: CALL_OW 248
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 2
7454: ST_TO_ADDR
7455: GO 7539
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7457: LD_ADDR_VAR 0 4
7461: PUSH
7462: LD_VAR 0 4
7466: PUSH
7467: LD_VAR 0 3
7471: PPUSH
7472: CALL_OW 266
7476: PUSH
7477: LD_VAR 0 3
7481: PPUSH
7482: CALL_OW 250
7486: PUSH
7487: LD_VAR 0 3
7491: PPUSH
7492: CALL_OW 251
7496: PUSH
7497: LD_VAR 0 3
7501: PPUSH
7502: CALL_OW 254
7506: PUSH
7507: LD_VAR 0 3
7511: PPUSH
7512: CALL_OW 267
7516: PUSH
7517: LD_VAR 0 3
7521: PPUSH
7522: CALL_OW 248
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: ADD
7538: ST_TO_ADDR
// end ;
7539: GO 7103
7541: POP
7542: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7543: LD_VAR 0 4
7547: PPUSH
7548: LD_STRING 08_GammaBase
7550: PPUSH
7551: CALL_OW 39
// end ;
7555: LD_VAR 0 2
7559: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7560: LD_INT 0
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7569: LD_ADDR_VAR 0 3
7573: PUSH
7574: LD_INT 22
7576: PUSH
7577: LD_INT 4
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PPUSH
7584: CALL_OW 69
7588: ST_TO_ADDR
// ComAgressiveMove ( tmp , 55 , 62 ) ;
7589: LD_VAR 0 3
7593: PPUSH
7594: LD_INT 55
7596: PPUSH
7597: LD_INT 62
7599: PPUSH
7600: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
7604: LD_VAR 0 3
7608: PPUSH
7609: LD_INT 175
7611: PPUSH
7612: CALL_OW 202
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
7616: LD_VAR 0 3
7620: PPUSH
7621: LD_INT 120
7623: PUSH
7624: LD_INT 101
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: PPUSH
7636: LD_INT 58
7638: PPUSH
7639: LD_INT 96
7641: PPUSH
7642: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
7646: LD_VAR 0 3
7650: PPUSH
7651: LD_INT 120
7653: PUSH
7654: LD_INT 101
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: PPUSH
7666: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
7670: LD_VAR 0 3
7674: PPUSH
7675: LD_INT 120
7677: PUSH
7678: LD_INT 101
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 25
7687: PUSH
7688: LD_INT 4
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PPUSH
7699: CALL_OW 72
7703: PPUSH
7704: LD_INT 52
7706: PPUSH
7707: LD_INT 93
7709: PPUSH
7710: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
7714: LD_VAR 0 3
7718: PPUSH
7719: LD_INT 120
7721: PUSH
7722: LD_INT 101
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 25
7731: PUSH
7732: LD_INT 4
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PPUSH
7743: CALL_OW 72
7747: PPUSH
7748: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
7752: LD_ADDR_VAR 0 7
7756: PUSH
7757: LD_VAR 0 3
7761: PPUSH
7762: LD_INT 21
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 72
7776: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
7777: LD_ADDR_VAR 0 4
7781: PUSH
7782: LD_INT 81
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 69
7796: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
7797: LD_ADDR_VAR 0 5
7801: PUSH
7802: LD_INT 57
7804: PUSH
7805: LD_INT 66
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 62
7814: PUSH
7815: LD_INT 58
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7826: LD_INT 35
7828: PPUSH
7829: CALL_OW 67
// for i in filter do
7833: LD_ADDR_VAR 0 2
7837: PUSH
7838: LD_VAR 0 7
7842: PUSH
7843: FOR_IN
7844: IFFALSE 8283
// begin if IsDead ( i ) then
7846: LD_VAR 0 2
7850: PPUSH
7851: CALL_OW 301
7855: IFFALSE 7875
// begin filter := filter diff i ;
7857: LD_ADDR_VAR 0 7
7861: PUSH
7862: LD_VAR 0 7
7866: PUSH
7867: LD_VAR 0 2
7871: DIFF
7872: ST_TO_ADDR
// continue ;
7873: GO 7843
// end ; tmp := IsDrivenBy ( i ) ;
7875: LD_ADDR_VAR 0 3
7879: PUSH
7880: LD_VAR 0 2
7884: PPUSH
7885: CALL_OW 311
7889: ST_TO_ADDR
// if not tmp then
7890: LD_VAR 0 3
7894: NOT
7895: IFFALSE 7899
// continue ;
7897: GO 7843
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
7899: LD_VAR 0 2
7903: PPUSH
7904: CALL_OW 261
7908: PUSH
7909: LD_INT 30
7911: GREATER
7912: PUSH
7913: LD_VAR 0 2
7917: PPUSH
7918: CALL_OW 110
7922: PUSH
7923: LD_INT 2
7925: EQUAL
7926: AND
7927: IFFALSE 7943
// SetTag ( i , 0 ) else
7929: LD_VAR 0 2
7933: PPUSH
7934: LD_INT 0
7936: PPUSH
7937: CALL_OW 109
7941: GO 7987
// if GetTag ( i ) = 2 then
7943: LD_VAR 0 2
7947: PPUSH
7948: CALL_OW 110
7952: PUSH
7953: LD_INT 2
7955: EQUAL
7956: IFFALSE 7987
// begin ComMoveXY ( i , 52 , 50 ) ;
7958: LD_VAR 0 2
7962: PPUSH
7963: LD_INT 52
7965: PPUSH
7966: LD_INT 50
7968: PPUSH
7969: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
7973: LD_VAR 0 2
7977: PPUSH
7978: LD_EXP 26
7982: PPUSH
7983: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
7987: LD_VAR 0 2
7991: PPUSH
7992: CALL_OW 256
7996: PUSH
7997: LD_INT 600
7999: GREATEREQUAL
8000: PUSH
8001: LD_VAR 0 2
8005: PPUSH
8006: CALL_OW 110
8010: NOT
8011: AND
8012: IFFALSE 8038
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8014: LD_VAR 0 2
8018: PPUSH
8019: LD_VAR 0 4
8023: PPUSH
8024: LD_VAR 0 2
8028: PPUSH
8029: CALL_OW 74
8033: PPUSH
8034: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8038: LD_VAR 0 2
8042: PPUSH
8043: CALL_OW 256
8047: PUSH
8048: LD_INT 600
8050: LESS
8051: PUSH
8052: LD_VAR 0 2
8056: PPUSH
8057: CALL_OW 110
8061: NOT
8062: AND
8063: IFFALSE 8139
// begin SetTag ( i , 1 ) ;
8065: LD_VAR 0 2
8069: PPUSH
8070: LD_INT 1
8072: PPUSH
8073: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8077: LD_ADDR_VAR 0 6
8081: PUSH
8082: LD_VAR 0 2
8086: PPUSH
8087: LD_VAR 0 5
8091: PPUSH
8092: CALL 77510 0 2
8096: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8097: LD_VAR 0 2
8101: PPUSH
8102: LD_VAR 0 6
8106: PUSH
8107: LD_INT 1
8109: ARRAY
8110: PPUSH
8111: LD_VAR 0 6
8115: PUSH
8116: LD_INT 2
8118: ARRAY
8119: PPUSH
8120: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8124: LD_VAR 0 2
8128: PPUSH
8129: LD_INT 40
8131: PPUSH
8132: LD_INT 49
8134: PPUSH
8135: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8139: LD_VAR 0 2
8143: PPUSH
8144: CALL_OW 110
8148: PUSH
8149: LD_INT 1
8151: EQUAL
8152: PUSH
8153: LD_VAR 0 2
8157: PPUSH
8158: LD_INT 40
8160: PPUSH
8161: LD_INT 49
8163: PPUSH
8164: CALL_OW 297
8168: PUSH
8169: LD_INT 9
8171: LESS
8172: AND
8173: PUSH
8174: LD_VAR 0 3
8178: AND
8179: IFFALSE 8281
// begin ComExitVehicle ( tmp ) ;
8181: LD_VAR 0 3
8185: PPUSH
8186: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8190: LD_VAR 0 3
8194: PPUSH
8195: LD_VAR 0 2
8199: PPUSH
8200: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8204: LD_INT 35
8206: PPUSH
8207: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8211: LD_VAR 0 2
8215: PPUSH
8216: CALL_OW 256
8220: PUSH
8221: LD_INT 1000
8223: EQUAL
8224: IFFALSE 8204
// ComEnterUnit ( tmp , i ) ;
8226: LD_VAR 0 3
8230: PPUSH
8231: LD_VAR 0 2
8235: PPUSH
8236: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8240: LD_VAR 0 2
8244: PPUSH
8245: CALL_OW 261
8249: PUSH
8250: LD_INT 40
8252: LESSEQUAL
8253: IFFALSE 8269
// SetTag ( i , 2 ) else
8255: LD_VAR 0 2
8259: PPUSH
8260: LD_INT 2
8262: PPUSH
8263: CALL_OW 109
8267: GO 8281
// SetTag ( i , 0 ) ;
8269: LD_VAR 0 2
8273: PPUSH
8274: LD_INT 0
8276: PPUSH
8277: CALL_OW 109
// end ; end ;
8281: GO 7843
8283: POP
8284: POP
// until not filter ;
8285: LD_VAR 0 7
8289: NOT
8290: IFFALSE 7826
// end ; end_of_file
8292: LD_VAR 0 1
8296: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8297: LD_INT 0
8299: PPUSH
8300: PPUSH
8301: PPUSH
8302: PPUSH
8303: PPUSH
// uc_side := 3 ;
8304: LD_ADDR_OWVAR 20
8308: PUSH
8309: LD_INT 3
8311: ST_TO_ADDR
// uc_nation := 3 ;
8312: LD_ADDR_OWVAR 21
8316: PUSH
8317: LD_INT 3
8319: ST_TO_ADDR
// ruMechCounter := [ 8 , 12 , 16 , 20 ] [ Difficulty ] ;
8320: LD_ADDR_EXP 28
8324: PUSH
8325: LD_INT 8
8327: PUSH
8328: LD_INT 12
8330: PUSH
8331: LD_INT 16
8333: PUSH
8334: LD_INT 20
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: PUSH
8343: LD_OWVAR 67
8347: ARRAY
8348: ST_TO_ADDR
// ruMobile := [ ] ;
8349: LD_ADDR_EXP 29
8353: PUSH
8354: EMPTY
8355: ST_TO_ADDR
// ruBuildList := [ ] ;
8356: LD_ADDR_EXP 30
8360: PUSH
8361: EMPTY
8362: ST_TO_ADDR
// russianAttackers := [ ] ;
8363: LD_ADDR_EXP 31
8367: PUSH
8368: EMPTY
8369: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8370: LD_ADDR_VAR 0 5
8374: PUSH
8375: LD_INT 43
8377: PUSH
8378: LD_INT 44
8380: PUSH
8381: LD_INT 46
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: ST_TO_ADDR
// if Difficulty > 2 then
8389: LD_OWVAR 67
8393: PUSH
8394: LD_INT 2
8396: GREATER
8397: IFFALSE 8420
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8399: LD_ADDR_VAR 0 5
8403: PUSH
8404: LD_VAR 0 5
8408: PUSH
8409: LD_INT 45
8411: PUSH
8412: LD_INT 46
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: ADD
8419: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8420: LD_ADDR_EXP 27
8424: PUSH
8425: LD_STRING Borodin
8427: PPUSH
8428: CALL_OW 25
8432: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8433: LD_EXP 27
8437: PPUSH
8438: LD_INT 28
8440: PPUSH
8441: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8445: LD_INT 28
8447: PPUSH
8448: CALL_OW 274
8452: PPUSH
8453: LD_INT 1
8455: PPUSH
8456: LD_INT 3000
8458: PUSH
8459: LD_INT 4000
8461: PUSH
8462: LD_INT 5000
8464: PUSH
8465: LD_INT 6000
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: PUSH
8474: LD_OWVAR 67
8478: ARRAY
8479: PPUSH
8480: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
8484: LD_INT 28
8486: PPUSH
8487: CALL_OW 274
8491: PPUSH
8492: LD_INT 2
8494: PPUSH
8495: LD_INT 1000
8497: PPUSH
8498: CALL_OW 277
// if Difficulty > 2 then
8502: LD_OWVAR 67
8506: PUSH
8507: LD_INT 2
8509: GREATER
8510: IFFALSE 8628
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
8512: LD_ADDR_VAR 0 4
8516: PUSH
8517: LD_INT 99
8519: PUSH
8520: LD_INT 130
8522: PUSH
8523: LD_INT 2
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 121
8533: PUSH
8534: LD_INT 127
8536: PUSH
8537: LD_INT 4
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: LIST
8544: PUSH
8545: LD_INT 117
8547: PUSH
8548: LD_INT 121
8550: PUSH
8551: LD_INT 4
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: ST_TO_ADDR
// for i in tmp do
8564: LD_ADDR_VAR 0 2
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: FOR_IN
8575: IFFALSE 8626
// begin bc_type := b_turret ;
8577: LD_ADDR_OWVAR 42
8581: PUSH
8582: LD_INT 33
8584: ST_TO_ADDR
// bc_level := 6 ;
8585: LD_ADDR_OWVAR 43
8589: PUSH
8590: LD_INT 6
8592: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
8593: LD_VAR 0 2
8597: PUSH
8598: LD_INT 1
8600: ARRAY
8601: PPUSH
8602: LD_VAR 0 2
8606: PUSH
8607: LD_INT 2
8609: ARRAY
8610: PPUSH
8611: LD_VAR 0 2
8615: PUSH
8616: LD_INT 3
8618: ARRAY
8619: PPUSH
8620: CALL_OW 47
// end ;
8624: GO 8574
8626: POP
8627: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
8628: LD_ADDR_VAR 0 2
8632: PUSH
8633: LD_INT 22
8635: PUSH
8636: LD_INT 3
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PUSH
8643: LD_INT 21
8645: PUSH
8646: LD_INT 3
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 69
8661: PUSH
8662: FOR_IN
8663: IFFALSE 8679
// SetBLevel ( i , 6 ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: LD_INT 6
8672: PPUSH
8673: CALL_OW 241
8677: GO 8662
8679: POP
8680: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
8681: LD_ADDR_VAR 0 4
8685: PUSH
8686: LD_INT 22
8688: PUSH
8689: LD_INT 3
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 2
8698: PUSH
8699: LD_INT 30
8701: PUSH
8702: LD_INT 32
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 30
8711: PUSH
8712: LD_INT 33
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL_OW 69
8732: ST_TO_ADDR
// for i in tmp do
8733: LD_ADDR_VAR 0 2
8737: PUSH
8738: LD_VAR 0 4
8742: PUSH
8743: FOR_IN
8744: IFFALSE 8776
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
8746: LD_VAR 0 2
8750: PPUSH
8751: LD_VAR 0 5
8755: PUSH
8756: LD_INT 1
8758: PPUSH
8759: LD_VAR 0 5
8763: PPUSH
8764: CALL_OW 12
8768: ARRAY
8769: PPUSH
8770: CALL_OW 431
8774: GO 8743
8776: POP
8777: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
8778: LD_ADDR_VAR 0 2
8782: PUSH
8783: LD_INT 22
8785: PUSH
8786: LD_INT 3
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 30
8795: PUSH
8796: LD_INT 32
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PPUSH
8807: CALL_OW 69
8811: PUSH
8812: FOR_IN
8813: IFFALSE 8862
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8815: LD_INT 0
8817: PPUSH
8818: LD_INT 5
8820: PUSH
8821: LD_INT 6
8823: PUSH
8824: LD_INT 7
8826: PUSH
8827: LD_INT 8
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: LD_OWVAR 67
8840: ARRAY
8841: PPUSH
8842: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8846: CALL_OW 44
8850: PPUSH
8851: LD_VAR 0 2
8855: PPUSH
8856: CALL_OW 52
// end ;
8860: GO 8812
8862: POP
8863: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
8864: LD_ADDR_VAR 0 2
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_INT 3
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 30
8881: PUSH
8882: LD_INT 5
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: FOR_IN
8899: IFFALSE 8989
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
8901: LD_ADDR_VAR 0 3
8905: PUSH
8906: DOUBLE
8907: LD_INT 1
8909: DEC
8910: ST_TO_ADDR
8911: LD_INT 2
8913: PUSH
8914: LD_INT 2
8916: PUSH
8917: LD_INT 3
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: PUSH
8929: LD_OWVAR 67
8933: ARRAY
8934: PUSH
8935: FOR_TO
8936: IFFALSE 8985
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8938: LD_INT 0
8940: PPUSH
8941: LD_INT 5
8943: PUSH
8944: LD_INT 6
8946: PUSH
8947: LD_INT 7
8949: PUSH
8950: LD_INT 8
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: PUSH
8959: LD_OWVAR 67
8963: ARRAY
8964: PPUSH
8965: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8969: CALL_OW 44
8973: PPUSH
8974: LD_VAR 0 2
8978: PPUSH
8979: CALL_OW 52
// end ;
8983: GO 8935
8985: POP
8986: POP
// end ;
8987: GO 8898
8989: POP
8990: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
8991: LD_ADDR_VAR 0 2
8995: PUSH
8996: DOUBLE
8997: LD_INT 1
8999: DEC
9000: ST_TO_ADDR
9001: LD_INT 3
9003: PUSH
9004: LD_INT 4
9006: PUSH
9007: LD_INT 5
9009: PUSH
9010: LD_INT 5
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: PUSH
9019: LD_OWVAR 67
9023: ARRAY
9024: PUSH
9025: FOR_TO
9026: IFFALSE 9073
// begin PrepareEngineer ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9028: LD_INT 0
9030: PPUSH
9031: LD_INT 5
9033: PUSH
9034: LD_INT 6
9036: PUSH
9037: LD_INT 7
9039: PUSH
9040: LD_INT 8
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: PUSH
9049: LD_OWVAR 67
9053: ARRAY
9054: PPUSH
9055: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9059: CALL_OW 44
9063: PPUSH
9064: LD_INT 28
9066: PPUSH
9067: CALL_OW 52
// end ;
9071: GO 9025
9073: POP
9074: POP
// for i := 1 to 2 do
9075: LD_ADDR_VAR 0 2
9079: PUSH
9080: DOUBLE
9081: LD_INT 1
9083: DEC
9084: ST_TO_ADDR
9085: LD_INT 2
9087: PUSH
9088: FOR_TO
9089: IFFALSE 9123
// begin PrepareScientist ( false , 6 ) ;
9091: LD_INT 0
9093: PPUSH
9094: LD_INT 6
9096: PPUSH
9097: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9101: CALL_OW 44
9105: PPUSH
9106: LD_INT 81
9108: PPUSH
9109: LD_INT 93
9111: PPUSH
9112: CALL_OW 428
9116: PPUSH
9117: CALL_OW 52
// end ;
9121: GO 9088
9123: POP
9124: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9125: LD_INT 22
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 3
9133: PPUSH
9134: LD_INT 51
9136: PPUSH
9137: LD_INT 100
9139: PPUSH
9140: CALL 42370 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9144: CALL_OW 45
9148: PPUSH
9149: LD_INT 91
9151: PPUSH
9152: LD_INT 94
9154: PPUSH
9155: LD_INT 3
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 50
// for i := 1 to 2 do
9165: LD_ADDR_VAR 0 2
9169: PUSH
9170: DOUBLE
9171: LD_INT 1
9173: DEC
9174: ST_TO_ADDR
9175: LD_INT 2
9177: PUSH
9178: FOR_TO
9179: IFFALSE 9223
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9181: LD_INT 22
9183: PPUSH
9184: LD_INT 1
9186: PPUSH
9187: LD_INT 3
9189: PPUSH
9190: LD_INT 52
9192: PPUSH
9193: LD_INT 100
9195: PPUSH
9196: CALL 42370 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9200: CALL_OW 45
9204: PPUSH
9205: LD_INT 91
9207: PPUSH
9208: LD_INT 94
9210: PPUSH
9211: LD_INT 4
9213: PPUSH
9214: LD_INT 0
9216: PPUSH
9217: CALL_OW 50
// end ;
9221: GO 9178
9223: POP
9224: POP
// end ;
9225: LD_VAR 0 1
9229: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9230: LD_INT 0
9232: PPUSH
9233: PPUSH
9234: PPUSH
9235: PPUSH
9236: PPUSH
// uc_side := 3 ;
9237: LD_ADDR_OWVAR 20
9241: PUSH
9242: LD_INT 3
9244: ST_TO_ADDR
// uc_nation := 3 ;
9245: LD_ADDR_OWVAR 21
9249: PUSH
9250: LD_INT 3
9252: ST_TO_ADDR
// for i := 1 to 4 do
9253: LD_ADDR_VAR 0 2
9257: PUSH
9258: DOUBLE
9259: LD_INT 1
9261: DEC
9262: ST_TO_ADDR
9263: LD_INT 4
9265: PUSH
9266: FOR_TO
9267: IFFALSE 9394
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9269: LD_INT 22
9271: PPUSH
9272: LD_INT 1
9274: PPUSH
9275: LD_INT 1
9277: PPUSH
9278: LD_INT 42
9280: PUSH
9281: LD_INT 43
9283: PUSH
9284: LD_INT 44
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 1
9294: PPUSH
9295: LD_INT 3
9297: PPUSH
9298: CALL_OW 12
9302: ARRAY
9303: PPUSH
9304: LD_INT 40
9306: PPUSH
9307: CALL 42370 0 5
// veh := CreateVehicle ;
9311: LD_ADDR_VAR 0 4
9315: PUSH
9316: CALL_OW 45
9320: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9321: LD_VAR 0 4
9325: PPUSH
9326: LD_INT 5
9328: PPUSH
9329: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9333: LD_VAR 0 4
9337: PPUSH
9338: LD_INT 7
9340: PPUSH
9341: LD_INT 0
9343: PPUSH
9344: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9348: LD_INT 0
9350: PPUSH
9351: LD_INT 5
9353: PPUSH
9354: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9358: CALL_OW 44
9362: PPUSH
9363: LD_VAR 0 4
9367: PPUSH
9368: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9372: LD_ADDR_VAR 0 5
9376: PUSH
9377: LD_VAR 0 5
9381: PPUSH
9382: LD_VAR 0 4
9386: PPUSH
9387: CALL 74187 0 2
9391: ST_TO_ADDR
// end ;
9392: GO 9266
9394: POP
9395: POP
// for i := 1 to 3 do
9396: LD_ADDR_VAR 0 2
9400: PUSH
9401: DOUBLE
9402: LD_INT 1
9404: DEC
9405: ST_TO_ADDR
9406: LD_INT 3
9408: PUSH
9409: FOR_TO
9410: IFFALSE 9537
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9412: LD_INT 22
9414: PPUSH
9415: LD_INT 1
9417: PPUSH
9418: LD_INT 1
9420: PPUSH
9421: LD_INT 42
9423: PUSH
9424: LD_INT 43
9426: PUSH
9427: LD_INT 44
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 1
9437: PPUSH
9438: LD_INT 3
9440: PPUSH
9441: CALL_OW 12
9445: ARRAY
9446: PPUSH
9447: LD_INT 40
9449: PPUSH
9450: CALL 42370 0 5
// veh := CreateVehicle ;
9454: LD_ADDR_VAR 0 4
9458: PUSH
9459: CALL_OW 45
9463: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9464: LD_VAR 0 4
9468: PPUSH
9469: LD_INT 5
9471: PPUSH
9472: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
9476: LD_VAR 0 4
9480: PPUSH
9481: LD_INT 8
9483: PPUSH
9484: LD_INT 0
9486: PPUSH
9487: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9491: LD_INT 0
9493: PPUSH
9494: LD_INT 5
9496: PPUSH
9497: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9501: CALL_OW 44
9505: PPUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9515: LD_ADDR_VAR 0 5
9519: PUSH
9520: LD_VAR 0 5
9524: PPUSH
9525: LD_VAR 0 4
9529: PPUSH
9530: CALL 74187 0 2
9534: ST_TO_ADDR
// end ;
9535: GO 9409
9537: POP
9538: POP
// for i := 1 to 2 do
9539: LD_ADDR_VAR 0 2
9543: PUSH
9544: DOUBLE
9545: LD_INT 1
9547: DEC
9548: ST_TO_ADDR
9549: LD_INT 2
9551: PUSH
9552: FOR_TO
9553: IFFALSE 9612
// begin PrepareSoldier ( false , 5 ) ;
9555: LD_INT 0
9557: PPUSH
9558: LD_INT 5
9560: PPUSH
9561: CALL_OW 381
// un := CreateHuman ;
9565: LD_ADDR_VAR 0 3
9569: PUSH
9570: CALL_OW 44
9574: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
9575: LD_VAR 0 3
9579: PPUSH
9580: LD_INT 8
9582: PPUSH
9583: LD_INT 0
9585: PPUSH
9586: CALL_OW 49
// tmp := Join ( tmp , un ) ;
9590: LD_ADDR_VAR 0 5
9594: PUSH
9595: LD_VAR 0 5
9599: PPUSH
9600: LD_VAR 0 3
9604: PPUSH
9605: CALL 74187 0 2
9609: ST_TO_ADDR
// end ;
9610: GO 9552
9612: POP
9613: POP
// for i in tmp do
9614: LD_ADDR_VAR 0 2
9618: PUSH
9619: LD_VAR 0 5
9623: PUSH
9624: FOR_IN
9625: IFFALSE 9644
// ComAgressiveMove ( i , 51 , 16 ) ;
9627: LD_VAR 0 2
9631: PPUSH
9632: LD_INT 51
9634: PPUSH
9635: LD_INT 16
9637: PPUSH
9638: CALL_OW 114
9642: GO 9624
9644: POP
9645: POP
// end ;
9646: LD_VAR 0 1
9650: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
9651: LD_EXP 29
9655: IFFALSE 10230
9657: GO 9659
9659: DISABLE
9660: LD_INT 0
9662: PPUSH
9663: PPUSH
9664: PPUSH
// begin enable ;
9665: ENABLE
// if not ruMobile then
9666: LD_EXP 29
9670: NOT
9671: IFFALSE 9675
// exit ;
9673: GO 10230
// for i in ruMobile do
9675: LD_ADDR_VAR 0 1
9679: PUSH
9680: LD_EXP 29
9684: PUSH
9685: FOR_IN
9686: IFFALSE 10228
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
9688: LD_VAR 0 1
9692: PPUSH
9693: CALL_OW 302
9697: NOT
9698: PUSH
9699: LD_VAR 0 1
9703: PPUSH
9704: CALL_OW 255
9708: PUSH
9709: LD_INT 3
9711: NONEQUAL
9712: OR
9713: IFFALSE 9733
// begin ruMobile := ruMobile diff i ;
9715: LD_ADDR_EXP 29
9719: PUSH
9720: LD_EXP 29
9724: PUSH
9725: LD_VAR 0 1
9729: DIFF
9730: ST_TO_ADDR
// continue ;
9731: GO 9685
// end ; if GetTag ( i ) = 300 then
9733: LD_VAR 0 1
9737: PPUSH
9738: CALL_OW 110
9742: PUSH
9743: LD_INT 300
9745: EQUAL
9746: IFFALSE 9861
// begin if GetFuel ( i ) < 50 then
9748: LD_VAR 0 1
9752: PPUSH
9753: CALL_OW 261
9757: PUSH
9758: LD_INT 50
9760: LESS
9761: IFFALSE 9820
// begin ComMoveXY ( i , 93 , 100 ) ;
9763: LD_VAR 0 1
9767: PPUSH
9768: LD_INT 93
9770: PPUSH
9771: LD_INT 100
9773: PPUSH
9774: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9778: LD_INT 35
9780: PPUSH
9781: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
9785: LD_VAR 0 1
9789: PPUSH
9790: LD_INT 93
9792: PPUSH
9793: LD_INT 100
9795: PPUSH
9796: CALL_OW 297
9800: PUSH
9801: LD_INT 4
9803: LESS
9804: IFFALSE 9778
// SetFuel ( i , 100 ) ;
9806: LD_VAR 0 1
9810: PPUSH
9811: LD_INT 100
9813: PPUSH
9814: CALL_OW 240
// end else
9818: GO 9861
// if not IsInArea ( i , ruParkingArea ) then
9820: LD_VAR 0 1
9824: PPUSH
9825: LD_INT 10
9827: PPUSH
9828: CALL_OW 308
9832: NOT
9833: IFFALSE 9849
// ComMoveToArea ( i , ruParkingArea ) else
9835: LD_VAR 0 1
9839: PPUSH
9840: LD_INT 10
9842: PPUSH
9843: CALL_OW 113
9847: GO 9861
// SetTag ( i , 301 ) ;
9849: LD_VAR 0 1
9853: PPUSH
9854: LD_INT 301
9856: PPUSH
9857: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
9861: LD_VAR 0 1
9865: PPUSH
9866: CALL_OW 110
9870: PUSH
9871: LD_INT 301
9873: EQUAL
9874: IFFALSE 10004
// begin if GetLives ( i ) < 1000 then
9876: LD_VAR 0 1
9880: PPUSH
9881: CALL_OW 256
9885: PUSH
9886: LD_INT 1000
9888: LESS
9889: IFFALSE 9981
// begin if not IsDrivenBy ( i ) then
9891: LD_VAR 0 1
9895: PPUSH
9896: CALL_OW 311
9900: NOT
9901: IFFALSE 9905
// continue ;
9903: GO 9685
// mech := IsDrivenBy ( i ) ;
9905: LD_ADDR_VAR 0 2
9909: PUSH
9910: LD_VAR 0 1
9914: PPUSH
9915: CALL_OW 311
9919: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9920: LD_VAR 0 2
9924: PPUSH
9925: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9929: LD_VAR 0 2
9933: PPUSH
9934: LD_VAR 0 1
9938: PPUSH
9939: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9943: LD_INT 35
9945: PPUSH
9946: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9950: LD_VAR 0 1
9954: PPUSH
9955: CALL_OW 256
9959: PUSH
9960: LD_INT 1000
9962: EQUAL
9963: IFFALSE 9943
// ComEnterUnit ( mech , i ) ;
9965: LD_VAR 0 2
9969: PPUSH
9970: LD_VAR 0 1
9974: PPUSH
9975: CALL_OW 120
// end else
9979: GO 10004
// if IsDrivenBy ( i ) then
9981: LD_VAR 0 1
9985: PPUSH
9986: CALL_OW 311
9990: IFFALSE 10004
// SetTag ( i , 0 ) ;
9992: LD_VAR 0 1
9996: PPUSH
9997: LD_INT 0
9999: PPUSH
10000: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10004: LD_VAR 0 1
10008: PPUSH
10009: CALL_OW 110
10013: PUSH
10014: LD_INT 300
10016: LESS
10017: IFFALSE 10226
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10019: LD_ADDR_VAR 0 3
10023: PUSH
10024: LD_INT 11
10026: PPUSH
10027: LD_INT 81
10029: PUSH
10030: LD_INT 3
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 70
10041: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10042: LD_VAR 0 1
10046: PPUSH
10047: CALL_OW 256
10051: PUSH
10052: LD_INT 650
10054: LESS
10055: IFFALSE 10080
// begin ComStop ( i ) ;
10057: LD_VAR 0 1
10061: PPUSH
10062: CALL_OW 141
// SetTag ( i , 300 ) ;
10066: LD_VAR 0 1
10070: PPUSH
10071: LD_INT 300
10073: PPUSH
10074: CALL_OW 109
// continue ;
10078: GO 9685
// end ; if enemy then
10080: LD_VAR 0 3
10084: IFFALSE 10124
// begin if not HasTask ( i ) then
10086: LD_VAR 0 1
10090: PPUSH
10091: CALL_OW 314
10095: NOT
10096: IFFALSE 10122
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10098: LD_VAR 0 1
10102: PPUSH
10103: LD_VAR 0 3
10107: PPUSH
10108: LD_VAR 0 1
10112: PPUSH
10113: CALL_OW 74
10117: PPUSH
10118: CALL_OW 115
// end else
10122: GO 10226
// if ruMobile > 2 then
10124: LD_EXP 29
10128: PUSH
10129: LD_INT 2
10131: GREATER
10132: IFFALSE 10226
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10134: LD_ADDR_VAR 0 3
10138: PUSH
10139: LD_INT 81
10141: PUSH
10142: LD_INT 3
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PPUSH
10149: CALL_OW 69
10153: ST_TO_ADDR
// if enemy then
10154: LD_VAR 0 3
10158: IFFALSE 10226
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_INT 116
10167: PUSH
10168: LD_INT 95
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PUSH
10175: LD_INT 84
10177: PUSH
10178: LD_INT 68
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: LD_INT 58
10187: PUSH
10188: LD_INT 53
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: LD_INT 44
10197: PUSH
10198: LD_INT 35
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PUSH
10205: LD_INT 45
10207: PUSH
10208: LD_INT 23
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PPUSH
10222: CALL 76783 0 2
// end ; end ; end ;
10226: GO 9685
10228: POP
10229: POP
// end ;
10230: PPOPN 3
10232: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10233: LD_INT 3
10235: PUSH
10236: LD_INT 22
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: LD_INT 32
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PPUSH
10264: CALL_OW 69
10268: IFFALSE 10352
10270: GO 10272
10272: DISABLE
10273: LD_INT 0
10275: PPUSH
// begin enable ;
10276: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10277: LD_ADDR_VAR 0 1
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: LD_INT 22
10287: PUSH
10288: LD_INT 1
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 32
10301: PUSH
10302: LD_INT 1
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PPUSH
10313: CALL_OW 69
10317: PUSH
10318: FOR_IN
10319: IFFALSE 10350
// if GetFuel ( i ) < 3 then
10321: LD_VAR 0 1
10325: PPUSH
10326: CALL_OW 261
10330: PUSH
10331: LD_INT 3
10333: LESS
10334: IFFALSE 10348
// SetFuel ( i , 3 ) ;
10336: LD_VAR 0 1
10340: PPUSH
10341: LD_INT 3
10343: PPUSH
10344: CALL_OW 240
10348: GO 10318
10350: POP
10351: POP
// end ;
10352: PPOPN 1
10354: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10355: LD_INT 29
10357: PPUSH
10358: CALL_OW 302
10362: PUSH
10363: LD_INT 29
10365: PPUSH
10366: CALL_OW 461
10370: PUSH
10371: LD_INT 2
10373: EQUAL
10374: AND
10375: IFFALSE 10608
10377: GO 10379
10379: DISABLE
10380: LD_INT 0
10382: PPUSH
10383: PPUSH
// begin enable ;
10384: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10385: LD_ADDR_VAR 0 1
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 22
10395: PUSH
10396: LD_INT 23
10398: PUSH
10399: LD_INT 24
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: PUSH
10408: LD_INT 1
10410: PPUSH
10411: LD_INT 4
10413: PPUSH
10414: CALL_OW 12
10418: ARRAY
10419: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10420: LD_ADDR_VAR 0 2
10424: PUSH
10425: LD_INT 42
10427: PUSH
10428: LD_INT 44
10430: PUSH
10431: LD_INT 43
10433: PUSH
10434: LD_INT 46
10436: PUSH
10437: LD_INT 45
10439: PUSH
10440: LD_INT 46
10442: PUSH
10443: LD_INT 45
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: PUSH
10455: LD_OWVAR 67
10459: PUSH
10460: LD_INT 0
10462: PPUSH
10463: LD_INT 3
10465: PPUSH
10466: CALL_OW 12
10470: PLUS
10471: ARRAY
10472: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
10473: LD_VAR 0 1
10477: PUSH
10478: LD_INT 21
10480: PUSH
10481: LD_INT 22
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: IN
10488: PUSH
10489: LD_VAR 0 2
10493: PUSH
10494: LD_INT 46
10496: EQUAL
10497: AND
10498: IFFALSE 10527
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10500: LD_ADDR_VAR 0 2
10504: PUSH
10505: LD_INT 44
10507: PUSH
10508: LD_INT 45
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: LD_INT 1
10517: PPUSH
10518: LD_INT 2
10520: PPUSH
10521: CALL_OW 12
10525: ARRAY
10526: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
10527: LD_OWVAR 1
10531: PUSH
10532: LD_INT 31500
10534: PUSH
10535: LD_INT 27300
10537: PUSH
10538: LD_INT 23100
10540: PUSH
10541: LD_INT 21000
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: PUSH
10550: LD_OWVAR 67
10554: ARRAY
10555: LESS
10556: IFFALSE 10585
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
10558: LD_ADDR_VAR 0 2
10562: PUSH
10563: LD_INT 44
10565: PUSH
10566: LD_INT 43
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 1
10575: PPUSH
10576: LD_INT 2
10578: PPUSH
10579: CALL_OW 12
10583: ARRAY
10584: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
10585: LD_INT 29
10587: PPUSH
10588: LD_VAR 0 1
10592: PPUSH
10593: LD_INT 1
10595: PPUSH
10596: LD_INT 1
10598: PPUSH
10599: LD_VAR 0 2
10603: PPUSH
10604: CALL_OW 185
// end ;
10608: PPOPN 2
10610: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
10611: LD_INT 28
10613: PPUSH
10614: CALL_OW 302
10618: IFFALSE 11457
10620: GO 10622
10622: DISABLE
10623: LD_INT 0
10625: PPUSH
10626: PPUSH
10627: PPUSH
10628: PPUSH
10629: PPUSH
10630: PPUSH
10631: PPUSH
10632: PPUSH
// begin enable ;
10633: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
10634: LD_ADDR_VAR 0 3
10638: PUSH
10639: LD_INT 12
10641: PPUSH
10642: LD_INT 3
10644: PUSH
10645: LD_INT 24
10647: PUSH
10648: LD_INT 1000
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 21
10661: PUSH
10662: LD_INT 3
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 70
10677: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10678: LD_ADDR_VAR 0 4
10682: PUSH
10683: LD_INT 22
10685: PUSH
10686: LD_INT 3
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: LD_INT 25
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PPUSH
10707: CALL_OW 69
10711: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
10712: LD_ADDR_VAR 0 5
10716: PUSH
10717: LD_INT 22
10719: PUSH
10720: LD_INT 3
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 34
10729: PUSH
10730: LD_INT 52
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 69
10745: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
10746: LD_ADDR_VAR 0 7
10750: PUSH
10751: LD_INT 22
10753: PUSH
10754: LD_INT 3
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 4
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PPUSH
10775: CALL_OW 69
10779: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
10780: LD_ADDR_VAR 0 8
10784: PUSH
10785: LD_INT 81
10787: PPUSH
10788: LD_INT 93
10790: PPUSH
10791: CALL_OW 428
10795: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
10796: LD_VAR 0 7
10800: PUSH
10801: LD_VAR 0 4
10805: PPUSH
10806: LD_INT 120
10808: PUSH
10809: LD_INT 2
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PPUSH
10816: CALL_OW 72
10820: AND
10821: IFFALSE 10834
// ComExitAll ( sci ) else
10823: LD_VAR 0 7
10827: PPUSH
10828: CALL 74658 0 1
10832: GO 10907
// if sci then
10834: LD_VAR 0 7
10838: IFFALSE 10907
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
10840: LD_VAR 0 7
10844: PPUSH
10845: LD_INT 3
10847: PUSH
10848: LD_INT 54
10850: PUSH
10851: EMPTY
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PPUSH
10858: CALL_OW 72
10862: PUSH
10863: LD_VAR 0 8
10867: PPUSH
10868: CALL_OW 302
10872: AND
10873: IFFALSE 10907
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
10875: LD_VAR 0 7
10879: PPUSH
10880: LD_INT 3
10882: PUSH
10883: LD_INT 54
10885: PUSH
10886: EMPTY
10887: LIST
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PPUSH
10893: CALL_OW 72
10897: PPUSH
10898: LD_VAR 0 8
10902: PPUSH
10903: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
10907: LD_VAR 0 5
10911: PPUSH
10912: LD_INT 50
10914: PUSH
10915: EMPTY
10916: LIST
10917: PPUSH
10918: CALL_OW 72
10922: PUSH
10923: LD_VAR 0 3
10927: AND
10928: IFFALSE 10959
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
10930: LD_VAR 0 5
10934: PPUSH
10935: LD_INT 50
10937: PUSH
10938: EMPTY
10939: LIST
10940: PPUSH
10941: CALL_OW 72
10945: PPUSH
10946: LD_VAR 0 3
10950: PUSH
10951: LD_INT 1
10953: ARRAY
10954: PPUSH
10955: CALL_OW 130
// if eng then
10959: LD_VAR 0 4
10963: IFFALSE 11457
// begin for i in eng do
10965: LD_ADDR_VAR 0 1
10969: PUSH
10970: LD_VAR 0 4
10974: PUSH
10975: FOR_IN
10976: IFFALSE 11455
// begin tag := GetTag ( i ) ;
10978: LD_ADDR_VAR 0 6
10982: PUSH
10983: LD_VAR 0 1
10987: PPUSH
10988: CALL_OW 110
10992: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
10993: LD_VAR 0 3
10997: NOT
10998: PUSH
10999: LD_EXP 30
11003: NOT
11004: AND
11005: PUSH
11006: LD_VAR 0 6
11010: PUSH
11011: LD_INT 1
11013: EQUAL
11014: AND
11015: IFFALSE 11041
// begin SetTag ( i , 0 ) ;
11017: LD_VAR 0 1
11021: PPUSH
11022: LD_INT 0
11024: PPUSH
11025: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
11029: LD_VAR 0 1
11033: PPUSH
11034: LD_INT 28
11036: PPUSH
11037: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
11041: LD_VAR 0 3
11045: PUSH
11046: LD_EXP 30
11050: OR
11051: PUSH
11052: LD_VAR 0 6
11056: PUSH
11057: LD_INT 0
11059: EQUAL
11060: AND
11061: IFFALSE 11075
// SetTag ( i , 1 ) ;
11063: LD_VAR 0 1
11067: PPUSH
11068: LD_INT 1
11070: PPUSH
11071: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
11075: LD_VAR 0 1
11079: PPUSH
11080: CALL_OW 310
11084: PUSH
11085: LD_VAR 0 6
11089: PUSH
11090: LD_INT 1
11092: EQUAL
11093: AND
11094: IFFALSE 11105
// ComExit ( i ) ;
11096: LD_VAR 0 1
11100: PPUSH
11101: CALL 74575 0 1
// if GetLives ( i ) < 500 and tag = 1 then
11105: LD_VAR 0 1
11109: PPUSH
11110: CALL_OW 256
11114: PUSH
11115: LD_INT 500
11117: LESS
11118: PUSH
11119: LD_VAR 0 6
11123: PUSH
11124: LD_INT 1
11126: EQUAL
11127: AND
11128: IFFALSE 11142
// SetTag ( i , 2 ) ;
11130: LD_VAR 0 1
11134: PPUSH
11135: LD_INT 2
11137: PPUSH
11138: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
11142: LD_VAR 0 1
11146: PPUSH
11147: CALL_OW 256
11151: PUSH
11152: LD_INT 1000
11154: EQUAL
11155: PUSH
11156: LD_VAR 0 6
11160: PUSH
11161: LD_INT 2
11163: EQUAL
11164: AND
11165: IFFALSE 11179
// SetTag ( i , 1 ) ;
11167: LD_VAR 0 1
11171: PPUSH
11172: LD_INT 1
11174: PPUSH
11175: CALL_OW 109
// if tag = 2 then
11179: LD_VAR 0 6
11183: PUSH
11184: LD_INT 2
11186: EQUAL
11187: IFFALSE 11234
// begin if GetDistUnitXY ( i , 84 , 93 ) > 6 then
11189: LD_VAR 0 1
11193: PPUSH
11194: LD_INT 84
11196: PPUSH
11197: LD_INT 93
11199: PPUSH
11200: CALL_OW 297
11204: PUSH
11205: LD_INT 6
11207: GREATER
11208: IFFALSE 11234
// begin ComMoveXY ( i , 84 , 93 ) ;
11210: LD_VAR 0 1
11214: PPUSH
11215: LD_INT 84
11217: PPUSH
11218: LD_INT 93
11220: PPUSH
11221: CALL_OW 111
// AddComHold ( i ) ;
11225: LD_VAR 0 1
11229: PPUSH
11230: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
11234: LD_VAR 0 1
11238: PPUSH
11239: LD_INT 11
11241: PPUSH
11242: CALL_OW 308
11246: IFFALSE 11260
// ComMoveToArea ( i , ruBaseArea ) ;
11248: LD_VAR 0 1
11252: PPUSH
11253: LD_INT 12
11255: PPUSH
11256: CALL_OW 113
// if tag = 1 then
11260: LD_VAR 0 6
11264: PUSH
11265: LD_INT 1
11267: EQUAL
11268: IFFALSE 11453
// begin if b then
11270: LD_VAR 0 3
11274: IFFALSE 11302
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
11276: LD_VAR 0 1
11280: PPUSH
11281: LD_VAR 0 3
11285: PPUSH
11286: LD_VAR 0 1
11290: PPUSH
11291: CALL_OW 74
11295: PPUSH
11296: CALL_OW 130
11300: GO 11453
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11302: LD_EXP 30
11306: PUSH
11307: LD_INT 11
11309: PPUSH
11310: LD_INT 81
11312: PUSH
11313: LD_INT 3
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PPUSH
11320: CALL_OW 70
11324: PUSH
11325: LD_INT 0
11327: EQUAL
11328: AND
11329: PUSH
11330: LD_INT 28
11332: PPUSH
11333: LD_EXP 30
11337: PUSH
11338: LD_INT 1
11340: ARRAY
11341: PUSH
11342: LD_INT 1
11344: ARRAY
11345: PPUSH
11346: LD_EXP 30
11350: PUSH
11351: LD_INT 1
11353: ARRAY
11354: PUSH
11355: LD_INT 2
11357: ARRAY
11358: PPUSH
11359: LD_EXP 30
11363: PUSH
11364: LD_INT 1
11366: ARRAY
11367: PUSH
11368: LD_INT 3
11370: ARRAY
11371: PPUSH
11372: LD_EXP 30
11376: PUSH
11377: LD_INT 1
11379: ARRAY
11380: PUSH
11381: LD_INT 4
11383: ARRAY
11384: PPUSH
11385: CALL 50595 0 5
11389: AND
11390: IFFALSE 11453
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11392: LD_VAR 0 1
11396: PPUSH
11397: LD_EXP 30
11401: PUSH
11402: LD_INT 1
11404: ARRAY
11405: PUSH
11406: LD_INT 1
11408: ARRAY
11409: PPUSH
11410: LD_EXP 30
11414: PUSH
11415: LD_INT 1
11417: ARRAY
11418: PUSH
11419: LD_INT 2
11421: ARRAY
11422: PPUSH
11423: LD_EXP 30
11427: PUSH
11428: LD_INT 1
11430: ARRAY
11431: PUSH
11432: LD_INT 3
11434: ARRAY
11435: PPUSH
11436: LD_EXP 30
11440: PUSH
11441: LD_INT 1
11443: ARRAY
11444: PUSH
11445: LD_INT 4
11447: ARRAY
11448: PPUSH
11449: CALL_OW 145
// end ; end ;
11453: GO 10975
11455: POP
11456: POP
// end ; end ;
11457: PPOPN 8
11459: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
11460: LD_INT 0
11462: PPUSH
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
11467: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
11468: LD_ADDR_VAR 0 3
11472: PUSH
11473: DOUBLE
11474: LD_INT 1
11476: DEC
11477: ST_TO_ADDR
11478: LD_INT 3
11480: PUSH
11481: LD_INT 4
11483: PUSH
11484: LD_INT 5
11486: PUSH
11487: LD_INT 6
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: PUSH
11496: LD_OWVAR 67
11500: ARRAY
11501: PUSH
11502: LD_VAR 0 1
11506: PLUS
11507: PUSH
11508: FOR_TO
11509: IFFALSE 11826
// begin uc_side := 6 ;
11511: LD_ADDR_OWVAR 20
11515: PUSH
11516: LD_INT 6
11518: ST_TO_ADDR
// uc_nation := 3 ;
11519: LD_ADDR_OWVAR 21
11523: PUSH
11524: LD_INT 3
11526: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11527: LD_ADDR_VAR 0 6
11531: PUSH
11532: LD_INT 21
11534: PUSH
11535: LD_INT 22
11537: PUSH
11538: LD_INT 23
11540: PUSH
11541: LD_INT 24
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 1
11552: PPUSH
11553: LD_INT 4
11555: PPUSH
11556: CALL_OW 12
11560: ARRAY
11561: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11562: LD_ADDR_VAR 0 7
11566: PUSH
11567: LD_INT 42
11569: PUSH
11570: LD_INT 44
11572: PUSH
11573: LD_INT 43
11575: PUSH
11576: LD_INT 46
11578: PUSH
11579: LD_INT 45
11581: PUSH
11582: LD_INT 46
11584: PUSH
11585: LD_INT 45
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_OWVAR 67
11601: PUSH
11602: LD_INT 0
11604: PPUSH
11605: LD_INT 3
11607: PPUSH
11608: CALL_OW 12
11612: PLUS
11613: ARRAY
11614: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11615: LD_VAR 0 6
11619: PUSH
11620: LD_INT 21
11622: PUSH
11623: LD_INT 22
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: IN
11630: PUSH
11631: LD_VAR 0 7
11635: PUSH
11636: LD_INT 46
11638: EQUAL
11639: AND
11640: IFFALSE 11669
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11642: LD_ADDR_VAR 0 7
11646: PUSH
11647: LD_INT 44
11649: PUSH
11650: LD_INT 45
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 1
11659: PPUSH
11660: LD_INT 2
11662: PPUSH
11663: CALL_OW 12
11667: ARRAY
11668: ST_TO_ADDR
// if tick < [ 17 17$00 , 15 15$00 , 13 13$00 , 11 11$00 ] [ Difficulty ] then
11669: LD_OWVAR 1
11673: PUSH
11674: LD_INT 35700
11676: PUSH
11677: LD_INT 31500
11679: PUSH
11680: LD_INT 27300
11682: PUSH
11683: LD_INT 23100
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: PUSH
11692: LD_OWVAR 67
11696: ARRAY
11697: LESS
11698: IFFALSE 11731
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
11700: LD_ADDR_VAR 0 7
11704: PUSH
11705: LD_INT 44
11707: PUSH
11708: LD_INT 43
11710: PUSH
11711: LD_INT 42
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 1
11721: PPUSH
11722: LD_INT 3
11724: PPUSH
11725: CALL_OW 12
11729: ARRAY
11730: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
11731: LD_VAR 0 6
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: LD_INT 3
11741: PPUSH
11742: LD_VAR 0 7
11746: PPUSH
11747: LD_INT 90
11749: PPUSH
11750: CALL 42370 0 5
// un := CreateVehicle ;
11754: LD_ADDR_VAR 0 4
11758: PUSH
11759: CALL_OW 45
11763: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
11764: LD_VAR 0 4
11768: PPUSH
11769: LD_INT 140
11771: PPUSH
11772: LD_INT 146
11774: PPUSH
11775: LD_INT 0
11777: PPUSH
11778: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
11782: LD_VAR 0 4
11786: PPUSH
11787: LD_INT 131
11789: PPUSH
11790: LD_INT 128
11792: PPUSH
11793: CALL_OW 111
// wait ( 0 0$3 ) ;
11797: LD_INT 105
11799: PPUSH
11800: CALL_OW 67
// tmp := Join ( tmp , un ) ;
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_VAR 0 5
11813: PPUSH
11814: LD_VAR 0 4
11818: PPUSH
11819: CALL 74187 0 2
11823: ST_TO_ADDR
// end ;
11824: GO 11508
11826: POP
11827: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
11828: LD_ADDR_EXP 31
11832: PUSH
11833: LD_EXP 31
11837: PPUSH
11838: LD_VAR 0 5
11842: PPUSH
11843: CALL 74224 0 2
11847: ST_TO_ADDR
// end ;
11848: LD_VAR 0 2
11852: RET
// every 0 0$3 trigger russianAttackers do
11853: LD_EXP 31
11857: IFFALSE 11940
11859: GO 11861
11861: DISABLE
// begin enable ;
11862: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
11863: LD_EXP 31
11867: PPUSH
11868: LD_INT 126
11870: PUSH
11871: LD_INT 108
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 107
11880: PUSH
11881: LD_INT 85
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 82
11890: PUSH
11891: LD_INT 62
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 73
11900: PUSH
11901: LD_INT 46
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 62
11910: PUSH
11911: LD_INT 31
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 52
11920: PUSH
11921: LD_INT 17
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: PPUSH
11936: CALL 76783 0 2
// end ; end_of_file
11940: END
// on SailEvent ( event ) do begin if event = 1 then
11941: LD_VAR 0 1
11945: PUSH
11946: LD_INT 1
11948: EQUAL
11949: IFFALSE 11964
// PrepareRussianAttack ( Difficulty + 3 ) ;
11951: LD_OWVAR 67
11955: PUSH
11956: LD_INT 3
11958: PLUS
11959: PPUSH
11960: CALL 11460 0 1
// end ;
11964: PPOPN 1
11966: END
// on UnitDestroyed ( un ) do var tmp , chassis , weapon , btype ;
11967: LD_INT 0
11969: PPUSH
11970: PPUSH
11971: PPUSH
11972: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL 32866 0 1
// if un = JMM then
11982: LD_VAR 0 1
11986: PUSH
11987: LD_EXP 10
11991: EQUAL
11992: IFFALSE 12001
// YouLost ( JMM ) ;
11994: LD_STRING JMM
11996: PPUSH
11997: CALL_OW 104
// if GetSide ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12001: LD_VAR 0 1
12005: PPUSH
12006: CALL_OW 255
12010: PUSH
12011: LD_INT 1
12013: EQUAL
12014: PUSH
12015: LD_VAR 0 1
12019: PPUSH
12020: CALL_OW 266
12024: PUSH
12025: LD_INT 0
12027: PUSH
12028: LD_INT 1
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: IN
12035: AND
12036: IFFALSE 12045
// YouLost ( Destroyed ) ;
12038: LD_STRING Destroyed
12040: PPUSH
12041: CALL_OW 104
// if un in ruMobile then
12045: LD_VAR 0 1
12049: PUSH
12050: LD_EXP 29
12054: IN
12055: IFFALSE 12073
// ruMobile := ruMobile diff un ;
12057: LD_ADDR_EXP 29
12061: PUSH
12062: LD_EXP 29
12066: PUSH
12067: LD_VAR 0 1
12071: DIFF
12072: ST_TO_ADDR
// if GetSide ( un ) = 3 then
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 255
12082: PUSH
12083: LD_INT 3
12085: EQUAL
12086: IFFALSE 12664
// begin if GetType ( un ) = unit_building then
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 247
12097: PUSH
12098: LD_INT 3
12100: EQUAL
12101: IFFALSE 12237
// begin btype := GetBType ( un ) ;
12103: LD_ADDR_VAR 0 5
12107: PUSH
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 266
12117: ST_TO_ADDR
// if btype = b_warehouse then
12118: LD_VAR 0 5
12122: PUSH
12123: LD_INT 1
12125: EQUAL
12126: IFFALSE 12136
// btype := b_depot ;
12128: LD_ADDR_VAR 0 5
12132: PUSH
12133: LD_INT 0
12135: ST_TO_ADDR
// if btype = b_barracks then
12136: LD_VAR 0 5
12140: PUSH
12141: LD_INT 5
12143: EQUAL
12144: IFFALSE 12154
// btype := b_armoury ;
12146: LD_ADDR_VAR 0 5
12150: PUSH
12151: LD_INT 4
12153: ST_TO_ADDR
// if btype = b_lab_full then
12154: LD_VAR 0 5
12158: PUSH
12159: LD_INT 8
12161: EQUAL
12162: IFFALSE 12172
// btype := b_lab ;
12164: LD_ADDR_VAR 0 5
12168: PUSH
12169: LD_INT 6
12171: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
12172: LD_ADDR_EXP 30
12176: PUSH
12177: LD_EXP 30
12181: PPUSH
12182: LD_EXP 30
12186: PUSH
12187: LD_INT 1
12189: PLUS
12190: PPUSH
12191: LD_VAR 0 5
12195: PUSH
12196: LD_VAR 0 1
12200: PPUSH
12201: CALL_OW 250
12205: PUSH
12206: LD_VAR 0 1
12210: PPUSH
12211: CALL_OW 251
12215: PUSH
12216: LD_VAR 0 1
12220: PPUSH
12221: CALL_OW 254
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 1
12236: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12237: LD_VAR 0 1
12241: PPUSH
12242: CALL_OW 247
12246: PUSH
12247: LD_INT 2
12249: EQUAL
12250: IFFALSE 12525
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
12252: LD_VAR 0 1
12256: PPUSH
12257: CALL_OW 264
12261: PUSH
12262: LD_INT 52
12264: PUSH
12265: LD_INT 51
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: IN
12272: IFFALSE 12302
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
12274: LD_INT 29
12276: PPUSH
12277: LD_INT 22
12279: PPUSH
12280: LD_INT 1
12282: PPUSH
12283: LD_INT 3
12285: PPUSH
12286: LD_VAR 0 1
12290: PPUSH
12291: CALL_OW 264
12295: PPUSH
12296: CALL_OW 185
// end else
12300: GO 12525
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12302: LD_ADDR_VAR 0 3
12306: PUSH
12307: LD_INT 21
12309: PUSH
12310: LD_INT 22
12312: PUSH
12313: LD_INT 23
12315: PUSH
12316: LD_INT 24
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: PUSH
12325: LD_INT 1
12327: PPUSH
12328: LD_INT 4
12330: PPUSH
12331: CALL_OW 12
12335: ARRAY
12336: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12337: LD_ADDR_VAR 0 4
12341: PUSH
12342: LD_INT 42
12344: PUSH
12345: LD_INT 44
12347: PUSH
12348: LD_INT 43
12350: PUSH
12351: LD_INT 46
12353: PUSH
12354: LD_INT 45
12356: PUSH
12357: LD_INT 46
12359: PUSH
12360: LD_INT 45
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: LD_OWVAR 67
12376: PUSH
12377: LD_INT 0
12379: PPUSH
12380: LD_INT 3
12382: PPUSH
12383: CALL_OW 12
12387: PLUS
12388: ARRAY
12389: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12390: LD_VAR 0 3
12394: PUSH
12395: LD_INT 21
12397: PUSH
12398: LD_INT 22
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: IN
12405: PUSH
12406: LD_VAR 0 4
12410: PUSH
12411: LD_INT 46
12413: EQUAL
12414: AND
12415: IFFALSE 12444
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12417: LD_ADDR_VAR 0 4
12421: PUSH
12422: LD_INT 44
12424: PUSH
12425: LD_INT 45
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_INT 1
12434: PPUSH
12435: LD_INT 2
12437: PPUSH
12438: CALL_OW 12
12442: ARRAY
12443: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
12444: LD_OWVAR 1
12448: PUSH
12449: LD_INT 31500
12451: PUSH
12452: LD_INT 27300
12454: PUSH
12455: LD_INT 23100
12457: PUSH
12458: LD_INT 21000
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: PUSH
12467: LD_OWVAR 67
12471: ARRAY
12472: LESS
12473: IFFALSE 12502
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
12475: LD_ADDR_VAR 0 4
12479: PUSH
12480: LD_INT 44
12482: PUSH
12483: LD_INT 43
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 1
12492: PPUSH
12493: LD_INT 2
12495: PPUSH
12496: CALL_OW 12
12500: ARRAY
12501: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
12502: LD_INT 29
12504: PPUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: LD_VAR 0 4
12520: PPUSH
12521: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
12525: LD_VAR 0 1
12529: PPUSH
12530: CALL_OW 257
12534: PUSH
12535: LD_INT 3
12537: EQUAL
12538: IFFALSE 12664
// begin if ruMechCounter = 0 or not IsOk ( ruFac ) then
12540: LD_EXP 28
12544: PUSH
12545: LD_INT 0
12547: EQUAL
12548: PUSH
12549: LD_INT 29
12551: PPUSH
12552: CALL_OW 302
12556: NOT
12557: OR
12558: IFFALSE 12562
// exit ;
12560: GO 12664
// ruMechCounter := Dec ( ruMechCounter ) ;
12562: LD_ADDR_EXP 28
12566: PUSH
12567: LD_EXP 28
12571: PPUSH
12572: CALL 75562 0 1
12576: ST_TO_ADDR
// uc_side := 3 ;
12577: LD_ADDR_OWVAR 20
12581: PUSH
12582: LD_INT 3
12584: ST_TO_ADDR
// uc_nation := 3 ;
12585: LD_ADDR_OWVAR 21
12589: PUSH
12590: LD_INT 3
12592: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
12593: LD_INT 0
12595: PPUSH
12596: LD_INT 5
12598: PUSH
12599: LD_INT 6
12601: PUSH
12602: LD_INT 7
12604: PUSH
12605: LD_INT 8
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: PUSH
12614: LD_OWVAR 67
12618: ARRAY
12619: PPUSH
12620: CALL_OW 383
// tmp := CreateHuman ;
12624: LD_ADDR_VAR 0 2
12628: PUSH
12629: CALL_OW 44
12633: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
12634: LD_VAR 0 2
12638: PPUSH
12639: LD_INT 145
12641: PPUSH
12642: LD_INT 133
12644: PPUSH
12645: LD_INT 0
12647: PPUSH
12648: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
12652: LD_VAR 0 2
12656: PPUSH
12657: LD_INT 29
12659: PPUSH
12660: CALL_OW 120
// end ; end ; end ;
12664: PPOPN 5
12666: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
12667: LD_VAR 0 1
12671: PPUSH
12672: CALL_OW 255
12676: PUSH
12677: LD_INT 4
12679: EQUAL
12680: IFFALSE 12697
// ComMoveXY ( driver , 40 , 47 ) ;
12682: LD_VAR 0 1
12686: PPUSH
12687: LD_INT 40
12689: PPUSH
12690: LD_INT 47
12692: PPUSH
12693: CALL_OW 111
// if GetSide ( driver ) = 3 then
12697: LD_VAR 0 1
12701: PPUSH
12702: CALL_OW 255
12706: PUSH
12707: LD_INT 3
12709: EQUAL
12710: IFFALSE 12934
// begin ComMoveXY ( driver , 90 , 97 ) ;
12712: LD_VAR 0 1
12716: PPUSH
12717: LD_INT 90
12719: PPUSH
12720: LD_INT 97
12722: PPUSH
12723: CALL_OW 111
// if IsOk ( ruFac ) then
12727: LD_INT 29
12729: PPUSH
12730: CALL_OW 302
12734: IFFALSE 12858
// begin repeat wait ( 0 0$1 ) ;
12736: LD_INT 35
12738: PPUSH
12739: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
12743: LD_INT 29
12745: PPUSH
12746: CALL_OW 313
12750: PUSH
12751: LD_INT 6
12753: LESS
12754: PUSH
12755: LD_VAR 0 1
12759: PPUSH
12760: CALL_OW 301
12764: OR
12765: IFFALSE 12736
// if IsDead ( driver ) then
12767: LD_VAR 0 1
12771: PPUSH
12772: CALL_OW 301
12776: IFFALSE 12780
// exit ;
12778: GO 12934
// repeat wait ( 0 0$10 ) ;
12780: LD_INT 350
12782: PPUSH
12783: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
12787: LD_VAR 0 1
12791: PPUSH
12792: CALL_OW 314
12796: NOT
12797: PUSH
12798: LD_INT 29
12800: PPUSH
12801: CALL_OW 313
12805: PUSH
12806: LD_INT 6
12808: LESS
12809: AND
12810: IFFALSE 12824
// ComEnterUnit ( driver , ruFac ) ;
12812: LD_VAR 0 1
12816: PPUSH
12817: LD_INT 29
12819: PPUSH
12820: CALL_OW 120
// until not IsOk ( ruFac ) or IsDead ( driver ) or IsInUnit ( driver ) ;
12824: LD_INT 29
12826: PPUSH
12827: CALL_OW 302
12831: NOT
12832: PUSH
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 301
12842: OR
12843: PUSH
12844: LD_VAR 0 1
12848: PPUSH
12849: CALL_OW 310
12853: OR
12854: IFFALSE 12780
// end else
12856: GO 12934
// begin ComMoveXY ( driver , 142 , 148 ) ;
12858: LD_VAR 0 1
12862: PPUSH
12863: LD_INT 142
12865: PPUSH
12866: LD_INT 148
12868: PPUSH
12869: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12873: LD_INT 35
12875: PPUSH
12876: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
12880: LD_VAR 0 1
12884: PPUSH
12885: CALL_OW 301
12889: PUSH
12890: LD_VAR 0 1
12894: PPUSH
12895: LD_INT 142
12897: PPUSH
12898: LD_INT 148
12900: PPUSH
12901: CALL_OW 307
12905: OR
12906: IFFALSE 12873
// if IsAt ( driver , 142 , 148 ) then
12908: LD_VAR 0 1
12912: PPUSH
12913: LD_INT 142
12915: PPUSH
12916: LD_INT 148
12918: PPUSH
12919: CALL_OW 307
12923: IFFALSE 12934
// RemoveUnit ( driver ) ;
12925: LD_VAR 0 1
12929: PPUSH
12930: CALL_OW 64
// end ; end ; end ;
12934: PPOPN 4
12936: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
12937: LD_VAR 0 2
12941: PPUSH
12942: CALL_OW 257
12946: PUSH
12947: LD_INT 3
12949: EQUAL
12950: PUSH
12951: LD_VAR 0 1
12955: PPUSH
12956: CALL_OW 255
12960: PUSH
12961: LD_INT 3
12963: EQUAL
12964: AND
12965: PUSH
12966: LD_VAR 0 1
12970: PUSH
12971: LD_INT 29
12973: EQUAL
12974: AND
12975: IFFALSE 12989
// SetLives ( un , 1000 ) ;
12977: LD_VAR 0 2
12981: PPUSH
12982: LD_INT 1000
12984: PPUSH
12985: CALL_OW 234
// end ;
12989: PPOPN 2
12991: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
12992: LD_INT 0
12994: PPUSH
12995: PPUSH
// begin if GetSide ( b ) = 3 then
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 255
13005: PUSH
13006: LD_INT 3
13008: EQUAL
13009: IFFALSE 13240
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
13011: LD_VAR 0 1
13015: PPUSH
13016: CALL_OW 266
13020: PUSH
13021: LD_INT 32
13023: PUSH
13024: LD_INT 5
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: IN
13031: IFFALSE 13240
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
13033: LD_ADDR_VAR 0 4
13037: PUSH
13038: LD_INT 22
13040: PUSH
13041: LD_INT 3
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 50
13050: PUSH
13051: EMPTY
13052: LIST
13053: PUSH
13054: LD_INT 30
13056: PUSH
13057: LD_INT 32
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 58
13066: PUSH
13067: EMPTY
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: PPUSH
13076: CALL_OW 69
13080: ST_TO_ADDR
// if tmp then
13081: LD_VAR 0 4
13085: IFFALSE 13107
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
13087: LD_VAR 0 2
13091: PPUSH
13092: LD_VAR 0 4
13096: PUSH
13097: LD_INT 1
13099: ARRAY
13100: PPUSH
13101: CALL_OW 120
// exit ;
13105: GO 13240
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13107: LD_ADDR_VAR 0 4
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 50
13124: PUSH
13125: EMPTY
13126: LIST
13127: PUSH
13128: LD_INT 2
13130: PUSH
13131: LD_INT 30
13133: PUSH
13134: LD_INT 4
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 30
13143: PUSH
13144: LD_INT 5
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: LIST
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: LIST
13160: PPUSH
13161: CALL_OW 69
13165: ST_TO_ADDR
// if not tmp then
13166: LD_VAR 0 4
13170: NOT
13171: IFFALSE 13190
// begin ComMoveXY ( un , 92 , 99 ) ;
13173: LD_VAR 0 2
13177: PPUSH
13178: LD_INT 92
13180: PPUSH
13181: LD_INT 99
13183: PPUSH
13184: CALL_OW 111
// exit ;
13188: GO 13240
// end ; for i in tmp do
13190: LD_ADDR_VAR 0 3
13194: PUSH
13195: LD_VAR 0 4
13199: PUSH
13200: FOR_IN
13201: IFFALSE 13238
// if UnitsInside ( i ) < 6 then
13203: LD_VAR 0 3
13207: PPUSH
13208: CALL_OW 313
13212: PUSH
13213: LD_INT 6
13215: LESS
13216: IFFALSE 13236
// begin ComEnterUnit ( un , i ) ;
13218: LD_VAR 0 2
13222: PPUSH
13223: LD_VAR 0 3
13227: PPUSH
13228: CALL_OW 120
// exit ;
13232: POP
13233: POP
13234: GO 13240
// end ;
13236: GO 13200
13238: POP
13239: POP
// end ; end ; end ;
13240: PPOPN 4
13242: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
13243: LD_VAR 0 1
13247: PPUSH
13248: CALL_OW 255
13252: PUSH
13253: LD_INT 3
13255: PUSH
13256: LD_INT 6
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: IN
13263: PUSH
13264: LD_VAR 0 1
13268: PPUSH
13269: CALL_OW 263
13273: PUSH
13274: LD_INT 3
13276: EQUAL
13277: AND
13278: PUSH
13279: LD_EXP 6
13283: NOT
13284: AND
13285: IFFALSE 13304
// begin seenComputer := true ;
13287: LD_ADDR_EXP 6
13291: PUSH
13292: LD_INT 1
13294: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
13295: LD_VAR 0 1
13299: PPUSH
13300: CALL 16220 0 1
// end ; end ;
13304: PPOPN 1
13306: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
13307: LD_INT 0
13309: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
13310: LD_VAR 0 1
13314: PPUSH
13315: LD_VAR 0 2
13319: PPUSH
13320: CALL 32988 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
13324: LD_VAR 0 1
13328: PPUSH
13329: CALL_OW 255
13333: PUSH
13334: LD_INT 3
13336: EQUAL
13337: PUSH
13338: LD_VAR 0 1
13342: PPUSH
13343: CALL_OW 263
13347: PUSH
13348: LD_INT 1
13350: EQUAL
13351: AND
13352: PUSH
13353: LD_VAR 0 1
13357: PPUSH
13358: CALL_OW 264
13362: PUSH
13363: LD_INT 42
13365: PUSH
13366: LD_INT 43
13368: PUSH
13369: LD_INT 44
13371: PUSH
13372: LD_INT 46
13374: PUSH
13375: LD_INT 45
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: IN
13385: AND
13386: IFFALSE 13416
// begin SetTag ( vehicle , 300 ) ;
13388: LD_VAR 0 1
13392: PPUSH
13393: LD_INT 300
13395: PPUSH
13396: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
13400: LD_ADDR_EXP 29
13404: PUSH
13405: LD_EXP 29
13409: PUSH
13410: LD_VAR 0 1
13414: UNION
13415: ST_TO_ADDR
// end ; end ;
13416: PPOPN 3
13418: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
13419: LD_INT 0
13421: PPUSH
// begin if InArea ( x , y , ruCrates ) then
13422: LD_VAR 0 2
13426: PPUSH
13427: LD_VAR 0 3
13431: PPUSH
13432: LD_INT 13
13434: PPUSH
13435: CALL_OW 309
13439: IFFALSE 13570
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
13441: LD_ADDR_VAR 0 6
13445: PUSH
13446: LD_INT 22
13448: PUSH
13449: LD_INT 3
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 50
13458: PUSH
13459: EMPTY
13460: LIST
13461: PUSH
13462: LD_INT 34
13464: PUSH
13465: LD_INT 51
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PPUSH
13477: CALL_OW 69
13481: ST_TO_ADDR
// if not cargo then
13482: LD_VAR 0 6
13486: NOT
13487: IFFALSE 13491
// exit ;
13489: GO 13570
// wait ( 0 0$5 ) ;
13491: LD_INT 175
13493: PPUSH
13494: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
13498: LD_VAR 0 6
13502: PUSH
13503: LD_INT 1
13505: ARRAY
13506: PPUSH
13507: LD_INT 28
13509: PPUSH
13510: CALL_OW 296
13514: PUSH
13515: LD_INT 6
13517: LESS
13518: PUSH
13519: LD_VAR 0 6
13523: PUSH
13524: LD_INT 1
13526: ARRAY
13527: PPUSH
13528: CALL_OW 261
13532: PUSH
13533: LD_INT 50
13535: LESS
13536: AND
13537: IFFALSE 13551
// ComMoveUnit ( cargo , ruDep ) ;
13539: LD_VAR 0 6
13543: PPUSH
13544: LD_INT 28
13546: PPUSH
13547: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
13551: LD_VAR 0 6
13555: PPUSH
13556: LD_VAR 0 2
13560: PPUSH
13561: LD_VAR 0 3
13565: PPUSH
13566: CALL_OW 177
// end ; end ;
13570: PPOPN 6
13572: END
// on BuildingComplete ( b ) do var i , tmp ;
13573: LD_INT 0
13575: PPUSH
13576: PPUSH
// begin if GetSide ( b ) = 3 then
13577: LD_VAR 0 1
13581: PPUSH
13582: CALL_OW 255
13586: PUSH
13587: LD_INT 3
13589: EQUAL
13590: IFFALSE 13805
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
13592: LD_ADDR_EXP 30
13596: PUSH
13597: LD_EXP 30
13601: PPUSH
13602: LD_INT 1
13604: PPUSH
13605: CALL_OW 3
13609: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
13610: LD_VAR 0 1
13614: PPUSH
13615: CALL_OW 266
13619: PUSH
13620: LD_INT 32
13622: PUSH
13623: LD_INT 33
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: IN
13630: IFFALSE 13805
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
13632: LD_VAR 0 1
13636: PPUSH
13637: LD_INT 46
13639: PUSH
13640: LD_INT 45
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 1
13649: PPUSH
13650: LD_INT 2
13652: PPUSH
13653: CALL_OW 12
13657: ARRAY
13658: PPUSH
13659: CALL_OW 208
// if GetBType ( b ) = b_bunker then
13663: LD_VAR 0 1
13667: PPUSH
13668: CALL_OW 266
13672: PUSH
13673: LD_INT 32
13675: EQUAL
13676: IFFALSE 13805
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
13678: LD_ADDR_VAR 0 3
13682: PUSH
13683: LD_INT 22
13685: PUSH
13686: LD_INT 3
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 25
13695: PUSH
13696: LD_INT 1
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 120
13705: PUSH
13706: LD_INT 0
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: LIST
13717: PPUSH
13718: CALL_OW 69
13722: ST_TO_ADDR
// if tmp then
13723: LD_VAR 0 3
13727: IFFALSE 13805
// for i in tmp do
13729: LD_ADDR_VAR 0 2
13733: PUSH
13734: LD_VAR 0 3
13738: PUSH
13739: FOR_IN
13740: IFFALSE 13803
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
13742: LD_VAR 0 2
13746: PPUSH
13747: CALL_OW 310
13751: NOT
13752: PUSH
13753: LD_VAR 0 2
13757: PPUSH
13758: CALL_OW 310
13762: PPUSH
13763: CALL_OW 266
13767: PUSH
13768: LD_INT 32
13770: NONEQUAL
13771: OR
13772: IFFALSE 13801
// begin ComExit ( i ) ;
13774: LD_VAR 0 2
13778: PPUSH
13779: CALL 74575 0 1
// AddComEnterUnit ( i , b ) ;
13783: LD_VAR 0 2
13787: PPUSH
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 180
// exit ;
13797: POP
13798: POP
13799: GO 13805
// end ;
13801: GO 13739
13803: POP
13804: POP
// end ; end ; end ; end ; end_of_file
13805: PPOPN 3
13807: END
// export function Action ; var i , tmp , un , inUnit ; begin
13808: LD_INT 0
13810: PPUSH
13811: PPUSH
13812: PPUSH
13813: PPUSH
13814: PPUSH
// Video ( true ) ;
13815: LD_INT 1
13817: PPUSH
13818: CALL 74159 0 1
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
13822: LD_INT 50
13824: PPUSH
13825: LD_INT 12
13827: PPUSH
13828: LD_INT 1
13830: PPUSH
13831: LD_INT 56
13833: NEG
13834: PPUSH
13835: CALL 74073 0 4
// CenterOnXY ( 50 , 12 ) ;
13839: LD_INT 50
13841: PPUSH
13842: LD_INT 12
13844: PPUSH
13845: CALL_OW 84
// wait ( 0 0$3 ) ;
13849: LD_INT 105
13851: PPUSH
13852: CALL_OW 67
// PrepareStartRussianAttack ;
13856: CALL 9230 0 0
// CenterOnXY ( 66 , 47 ) ;
13860: LD_INT 66
13862: PPUSH
13863: LD_INT 47
13865: PPUSH
13866: CALL_OW 84
// wait ( 0 0$5 ) ;
13870: LD_INT 175
13872: PPUSH
13873: CALL_OW 67
// case gammaCommander of 1 :
13877: LD_EXP 9
13881: PUSH
13882: LD_INT 1
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13905
13890: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
13891: LD_EXP 12
13895: PPUSH
13896: LD_STRING D1-Don-1
13898: PPUSH
13899: CALL_OW 88
13903: GO 13952
13905: LD_INT 2
13907: DOUBLE
13908: EQUAL
13909: IFTRUE 13913
13911: GO 13928
13913: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
13914: LD_EXP 11
13918: PPUSH
13919: LD_STRING D1-Brown-1
13921: PPUSH
13922: CALL_OW 88
13926: GO 13952
13928: LD_INT 3
13930: DOUBLE
13931: EQUAL
13932: IFTRUE 13936
13934: GO 13951
13936: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
13937: LD_EXP 20
13941: PPUSH
13942: LD_STRING D1-VanH-1
13944: PPUSH
13945: CALL_OW 88
13949: GO 13952
13951: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
13952: LD_ADDR_VAR 0 3
13956: PUSH
13957: LD_INT 22
13959: PUSH
13960: LD_INT 1
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 33
13969: PUSH
13970: LD_INT 2
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 61
13979: PUSH
13980: EMPTY
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: LIST
13987: PPUSH
13988: CALL_OW 69
13992: ST_TO_ADDR
// if tmp then
13993: LD_VAR 0 3
13997: IFFALSE 14014
// ComAgressiveMove ( tmp , 74 , 44 ) ;
13999: LD_VAR 0 3
14003: PPUSH
14004: LD_INT 74
14006: PPUSH
14007: LD_INT 44
14009: PPUSH
14010: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
14014: LD_ADDR_VAR 0 3
14018: PUSH
14019: LD_INT 22
14021: PUSH
14022: LD_INT 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 25
14031: PUSH
14032: LD_INT 1
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PPUSH
14043: CALL_OW 69
14047: PUSH
14048: LD_EXP 12
14052: PUSH
14053: LD_EXP 11
14057: PUSH
14058: LD_EXP 20
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: LIST
14067: DIFF
14068: ST_TO_ADDR
// if tmp then
14069: LD_VAR 0 3
14073: IFFALSE 14151
// for i in tmp do
14075: LD_ADDR_VAR 0 2
14079: PUSH
14080: LD_VAR 0 3
14084: PUSH
14085: FOR_IN
14086: IFFALSE 14149
// begin inUnit := IsInUnit ( i ) ;
14088: LD_ADDR_VAR 0 5
14092: PUSH
14093: LD_VAR 0 2
14097: PPUSH
14098: CALL_OW 310
14102: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
14103: LD_VAR 0 5
14107: PUSH
14108: LD_VAR 0 5
14112: PPUSH
14113: CALL_OW 266
14117: PUSH
14118: LD_INT 32
14120: PUSH
14121: LD_INT 31
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: IN
14128: AND
14129: IFFALSE 14147
// tmp := tmp diff i ;
14131: LD_ADDR_VAR 0 3
14135: PUSH
14136: LD_VAR 0 3
14140: PUSH
14141: LD_VAR 0 2
14145: DIFF
14146: ST_TO_ADDR
// end ;
14147: GO 14085
14149: POP
14150: POP
// if tmp then
14151: LD_VAR 0 3
14155: IFFALSE 14245
// begin ComExitAll ( tmp ) ;
14157: LD_VAR 0 3
14161: PPUSH
14162: CALL 74658 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
14166: LD_VAR 0 3
14170: PPUSH
14171: LD_INT 74
14173: PPUSH
14174: LD_INT 44
14176: PPUSH
14177: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 22
14188: PUSH
14189: LD_INT 1
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 25
14198: PUSH
14199: LD_INT 4
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PPUSH
14210: CALL_OW 69
14214: ST_TO_ADDR
// if tmp then
14215: LD_VAR 0 3
14219: IFFALSE 14245
// begin ComExitAll ( tmp ) ;
14221: LD_VAR 0 3
14225: PPUSH
14226: CALL 74658 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
14230: LD_VAR 0 3
14234: PPUSH
14235: LD_INT 66
14237: PPUSH
14238: LD_INT 28
14240: PPUSH
14241: CALL_OW 171
// end ; end ; game_speed := 4 ;
14245: LD_ADDR_OWVAR 65
14249: PUSH
14250: LD_INT 4
14252: ST_TO_ADDR
// wait ( 0 0$2 ) ;
14253: LD_INT 70
14255: PPUSH
14256: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
14260: LD_EXP 24
14264: PPUSH
14265: LD_STRING D1-Har-1
14267: PPUSH
14268: CALL_OW 94
// case gammaCommander of 1 :
14272: LD_EXP 9
14276: PUSH
14277: LD_INT 1
14279: DOUBLE
14280: EQUAL
14281: IFTRUE 14285
14283: GO 14300
14285: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
14286: LD_EXP 12
14290: PPUSH
14291: LD_STRING D1-Don-2
14293: PPUSH
14294: CALL_OW 88
14298: GO 14347
14300: LD_INT 2
14302: DOUBLE
14303: EQUAL
14304: IFTRUE 14308
14306: GO 14323
14308: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
14309: LD_EXP 11
14313: PPUSH
14314: LD_STRING D1-Brown-2
14316: PPUSH
14317: CALL_OW 88
14321: GO 14347
14323: LD_INT 3
14325: DOUBLE
14326: EQUAL
14327: IFTRUE 14331
14329: GO 14346
14331: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
14332: LD_EXP 20
14336: PPUSH
14337: LD_STRING D1-VanH-2
14339: PPUSH
14340: CALL_OW 88
14344: GO 14347
14346: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
14347: LD_EXP 24
14351: PPUSH
14352: LD_STRING D1-Har-2
14354: PPUSH
14355: CALL_OW 94
// Video ( false ) ;
14359: LD_INT 0
14361: PPUSH
14362: CALL 74159 0 1
// ChangeMissionObjectives ( M1 ) ;
14366: LD_STRING M1
14368: PPUSH
14369: CALL_OW 337
// SaveForQuickRestart ;
14373: CALL_OW 22
// wait ( 2 2$30 ) ;
14377: LD_INT 5250
14379: PPUSH
14380: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
14384: LD_INT 1
14386: PPUSH
14387: CALL 11460 0 1
// wait ( 4 4$30 ) ;
14391: LD_INT 9450
14393: PPUSH
14394: CALL_OW 67
// if Difficulty > 2 then
14398: LD_OWVAR 67
14402: PUSH
14403: LD_INT 2
14405: GREATER
14406: IFFALSE 14415
// PrepareRussianAttack ( 2 ) ;
14408: LD_INT 2
14410: PPUSH
14411: CALL 11460 0 1
// if Difficulty > 3 then
14415: LD_OWVAR 67
14419: PUSH
14420: LD_INT 3
14422: GREATER
14423: IFFALSE 14582
// begin for i := 1 to 4 do
14425: LD_ADDR_VAR 0 2
14429: PUSH
14430: DOUBLE
14431: LD_INT 1
14433: DEC
14434: ST_TO_ADDR
14435: LD_INT 4
14437: PUSH
14438: FOR_TO
14439: IFFALSE 14524
// begin uc_side := 6 ;
14441: LD_ADDR_OWVAR 20
14445: PUSH
14446: LD_INT 6
14448: ST_TO_ADDR
// uc_nation := 3 ;
14449: LD_ADDR_OWVAR 21
14453: PUSH
14454: LD_INT 3
14456: ST_TO_ADDR
// PrepareSoldier ( false , 6 ) ;
14457: LD_INT 0
14459: PPUSH
14460: LD_INT 6
14462: PPUSH
14463: CALL_OW 381
// un := CreateHuman ;
14467: LD_ADDR_VAR 0 4
14471: PUSH
14472: CALL_OW 44
14476: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14477: LD_VAR 0 4
14481: PPUSH
14482: LD_INT 122
14484: PPUSH
14485: LD_INT 89
14487: PPUSH
14488: LD_INT 3
14490: PPUSH
14491: LD_INT 0
14493: PPUSH
14494: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
14498: LD_VAR 0 4
14502: PPUSH
14503: LD_INT 88
14505: PPUSH
14506: LD_INT 42
14508: PPUSH
14509: CALL_OW 114
// AddComHold ( un ) ;
14513: LD_VAR 0 4
14517: PPUSH
14518: CALL_OW 200
// end ;
14522: GO 14438
14524: POP
14525: POP
// PrepareScientist ( false , 6 ) ;
14526: LD_INT 0
14528: PPUSH
14529: LD_INT 6
14531: PPUSH
14532: CALL_OW 384
// un := CreateHuman ;
14536: LD_ADDR_VAR 0 4
14540: PUSH
14541: CALL_OW 44
14545: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14546: LD_VAR 0 4
14550: PPUSH
14551: LD_INT 122
14553: PPUSH
14554: LD_INT 89
14556: PPUSH
14557: LD_INT 3
14559: PPUSH
14560: LD_INT 0
14562: PPUSH
14563: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
14567: LD_VAR 0 4
14571: PPUSH
14572: LD_INT 91
14574: PPUSH
14575: LD_INT 48
14577: PPUSH
14578: CALL_OW 111
// end ; end ;
14582: LD_VAR 0 1
14586: RET
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 3 ] ] ) = 0 and tick > 5 5$00 do var dialog , p ;
14587: LD_INT 22
14589: PUSH
14590: LD_INT 1
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 101
14599: PUSH
14600: LD_INT 3
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PPUSH
14611: CALL_OW 69
14615: PUSH
14616: LD_INT 0
14618: EQUAL
14619: PUSH
14620: LD_OWVAR 1
14624: PUSH
14625: LD_INT 10500
14627: GREATER
14628: AND
14629: IFFALSE 16217
14631: GO 14633
14633: DISABLE
14634: LD_INT 0
14636: PPUSH
14637: PPUSH
// begin PrepareSupportFromDelta ;
14638: CALL 4052 0 0
// deltaSupport := true ;
14642: LD_ADDR_EXP 5
14646: PUSH
14647: LD_INT 1
14649: ST_TO_ADDR
// dialog := false ;
14650: LD_ADDR_VAR 0 1
14654: PUSH
14655: LD_INT 0
14657: ST_TO_ADDR
// if IsOk ( Gladstone ) then
14658: LD_EXP 17
14662: PPUSH
14663: CALL_OW 302
14667: IFFALSE 14689
// dialog := Say ( Gladstone , D2-Glad-1 ) else
14669: LD_ADDR_VAR 0 1
14673: PUSH
14674: LD_EXP 17
14678: PPUSH
14679: LD_STRING D2-Glad-1
14681: PPUSH
14682: CALL_OW 88
14686: ST_TO_ADDR
14687: GO 14771
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
14689: LD_ADDR_VAR 0 1
14693: PUSH
14694: LD_INT 22
14696: PUSH
14697: LD_INT 1
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 120
14706: PUSH
14707: LD_INT 107
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 21
14716: PUSH
14717: LD_INT 1
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 23
14726: PUSH
14727: LD_INT 1
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: PPUSH
14740: CALL_OW 69
14744: PUSH
14745: LD_EXP 22
14749: PUSH
14750: LD_EXP 21
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: DIFF
14759: PPUSH
14760: LD_STRING D2-Sol1-1
14762: PPUSH
14763: LD_STRING D2-FSol1-1
14765: PPUSH
14766: CALL 18213 0 3
14770: ST_TO_ADDR
// if dialog then
14771: LD_VAR 0 1
14775: IFFALSE 14876
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
14777: LD_EXP 12
14781: PPUSH
14782: CALL_OW 302
14786: PUSH
14787: LD_EXP 9
14791: PUSH
14792: LD_INT 1
14794: EQUAL
14795: AND
14796: IFFALSE 14810
// Say ( Donaldson , D2-Don-1 ) ;
14798: LD_EXP 12
14802: PPUSH
14803: LD_STRING D2-Don-1
14805: PPUSH
14806: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
14810: LD_EXP 11
14814: PPUSH
14815: CALL_OW 302
14819: PUSH
14820: LD_EXP 9
14824: PUSH
14825: LD_INT 2
14827: EQUAL
14828: AND
14829: IFFALSE 14843
// Say ( Brown , D2-Brown-1 ) ;
14831: LD_EXP 11
14835: PPUSH
14836: LD_STRING D2-Brown-1
14838: PPUSH
14839: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
14843: LD_EXP 20
14847: PPUSH
14848: CALL_OW 302
14852: PUSH
14853: LD_EXP 9
14857: PUSH
14858: LD_INT 3
14860: EQUAL
14861: AND
14862: IFFALSE 14876
// Say ( Houten , D2-VanH-1 ) ;
14864: LD_EXP 20
14868: PPUSH
14869: LD_STRING D2-VanH-1
14871: PPUSH
14872: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
14876: LD_INT 3
14878: PPUSH
14879: CALL 11460 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
14883: LD_STRING 07_time
14885: PPUSH
14886: LD_INT 18900
14888: PPUSH
14889: CALL_OW 30
14893: PUSH
14894: LD_INT 3
14896: DIV
14897: PPUSH
14898: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
14902: LD_INT 34
14904: PPUSH
14905: LD_INT 1
14907: PPUSH
14908: CALL_OW 321
14912: PUSH
14913: LD_INT 2
14915: EQUAL
14916: IFFALSE 14925
// SetAchievement ( ACH_HEAVYGUN ) ;
14918: LD_STRING ACH_HEAVYGUN
14920: PPUSH
14921: CALL_OW 543
// PrepareMacmillanSquad ;
14925: CALL 4789 0 0
// CenterNowOnUnits ( JMM ) ;
14929: LD_EXP 10
14933: PPUSH
14934: CALL_OW 87
// wait ( 0 0$10 ) ;
14938: LD_INT 350
14940: PPUSH
14941: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
14945: LD_INT 1
14947: PPUSH
14948: CALL_OW 427
// p := 0 ;
14952: LD_ADDR_VAR 0 2
14956: PUSH
14957: LD_INT 0
14959: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14960: LD_INT 35
14962: PPUSH
14963: CALL_OW 67
// p := Inc ( p ) ;
14967: LD_ADDR_VAR 0 2
14971: PUSH
14972: LD_VAR 0 2
14976: PPUSH
14977: CALL 75540 0 1
14981: ST_TO_ADDR
// if p > 100 then
14982: LD_VAR 0 2
14986: PUSH
14987: LD_INT 100
14989: GREATER
14990: IFFALSE 14994
// exit ;
14992: GO 16217
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
14994: LD_EXP 10
14998: PPUSH
14999: LD_INT 15
15001: PPUSH
15002: CALL_OW 308
15006: PUSH
15007: LD_EXP 10
15011: PPUSH
15012: CALL_OW 310
15016: PPUSH
15017: LD_INT 15
15019: PPUSH
15020: CALL_OW 308
15024: OR
15025: PUSH
15026: LD_EXP 10
15030: PPUSH
15031: LD_EXP 22
15035: PPUSH
15036: CALL_OW 296
15040: PUSH
15041: LD_INT 10
15043: LESS
15044: OR
15045: PUSH
15046: LD_INT 22
15048: PUSH
15049: LD_INT 1
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 2
15058: PUSH
15059: LD_INT 120
15061: PUSH
15062: LD_INT 106
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 120
15071: PUSH
15072: LD_INT 107
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: LIST
15083: PUSH
15084: LD_INT 91
15086: PUSH
15087: LD_EXP 10
15091: PUSH
15092: LD_INT 12
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: LIST
15104: PPUSH
15105: CALL_OW 69
15109: OR
15110: IFFALSE 14960
// DialogueOn ;
15112: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
15116: LD_EXP 10
15120: PPUSH
15121: LD_STRING D3-JMM-1
15123: PPUSH
15124: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15128: LD_EXP 12
15132: PPUSH
15133: CALL_OW 302
15137: PUSH
15138: LD_EXP 9
15142: PUSH
15143: LD_INT 1
15145: EQUAL
15146: AND
15147: IFFALSE 15163
// Say ( Donaldson , D3-Don-1 ) else
15149: LD_EXP 12
15153: PPUSH
15154: LD_STRING D3-Don-1
15156: PPUSH
15157: CALL_OW 88
15161: GO 15259
// begin if gammaCommander = 1 then
15163: LD_EXP 9
15167: PUSH
15168: LD_INT 1
15170: EQUAL
15171: IFFALSE 15259
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
15173: LD_INT 22
15175: PUSH
15176: LD_INT 1
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 21
15185: PUSH
15186: LD_INT 1
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: LD_INT 23
15195: PUSH
15196: LD_INT 1
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 120
15205: PUSH
15206: LD_INT 106
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 26
15215: PUSH
15216: LD_INT 1
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: PPUSH
15230: CALL_OW 69
15234: PPUSH
15235: LD_STRING D3-Sol1-1
15237: PPUSH
15238: LD_STRING 
15240: PPUSH
15241: CALL 18213 0 3
15245: IFFALSE 15259
// Say ( JMM , D3-JMM-2 ) ;
15247: LD_EXP 10
15251: PPUSH
15252: LD_STRING D3-JMM-2
15254: PPUSH
15255: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15259: LD_EXP 11
15263: PPUSH
15264: CALL_OW 302
15268: PUSH
15269: LD_EXP 9
15273: PUSH
15274: LD_INT 2
15276: EQUAL
15277: AND
15278: IFFALSE 15294
// Say ( Brown , D3-Brown-1 ) else
15280: LD_EXP 11
15284: PPUSH
15285: LD_STRING D3-Brown-1
15287: PPUSH
15288: CALL_OW 88
15292: GO 15390
// begin if gammaCommander = 2 then
15294: LD_EXP 9
15298: PUSH
15299: LD_INT 2
15301: EQUAL
15302: IFFALSE 15390
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
15304: LD_INT 22
15306: PUSH
15307: LD_INT 1
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 21
15316: PUSH
15317: LD_INT 1
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 23
15326: PUSH
15327: LD_INT 1
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 120
15336: PUSH
15337: LD_INT 106
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 26
15346: PUSH
15347: LD_INT 1
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: PPUSH
15361: CALL_OW 69
15365: PPUSH
15366: LD_STRING D3-Sol1-1a
15368: PPUSH
15369: LD_STRING 
15371: PPUSH
15372: CALL 18213 0 3
15376: IFFALSE 15390
// Say ( JMM , D3-JMM-2 ) ;
15378: LD_EXP 10
15382: PPUSH
15383: LD_STRING D3-JMM-2
15385: PPUSH
15386: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15390: LD_EXP 20
15394: PPUSH
15395: CALL_OW 302
15399: PUSH
15400: LD_EXP 9
15404: PUSH
15405: LD_INT 3
15407: EQUAL
15408: AND
15409: IFFALSE 15425
// Say ( Houten , D3-VanH-1 ) else
15411: LD_EXP 20
15415: PPUSH
15416: LD_STRING D3-VanH-1
15418: PPUSH
15419: CALL_OW 88
15423: GO 15521
// begin if gammaCommander = 3 then
15425: LD_EXP 9
15429: PUSH
15430: LD_INT 3
15432: EQUAL
15433: IFFALSE 15521
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
15435: LD_INT 22
15437: PUSH
15438: LD_INT 1
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 21
15447: PUSH
15448: LD_INT 1
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 23
15457: PUSH
15458: LD_INT 1
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 120
15467: PUSH
15468: LD_INT 106
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 26
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: PPUSH
15492: CALL_OW 69
15496: PPUSH
15497: LD_STRING D3-Sol1-1b
15499: PPUSH
15500: LD_STRING 
15502: PPUSH
15503: CALL 18213 0 3
15507: IFFALSE 15521
// Say ( JMM , D3-JMM-2 ) ;
15509: LD_EXP 10
15513: PPUSH
15514: LD_STRING D3-JMM-2
15516: PPUSH
15517: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15521: LD_EXP 22
15525: PPUSH
15526: CALL_OW 302
15530: IFFALSE 15558
// begin Say ( Joan , D3a-Joan-1 ) ;
15532: LD_EXP 22
15536: PPUSH
15537: LD_STRING D3a-Joan-1
15539: PPUSH
15540: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15544: LD_EXP 10
15548: PPUSH
15549: LD_STRING D3a-JMM-1
15551: PPUSH
15552: CALL_OW 88
// end else
15556: GO 15992
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15558: LD_STRING 06_JoanStatus_1
15560: PPUSH
15561: LD_INT 0
15563: PPUSH
15564: CALL_OW 30
15568: PUSH
15569: LD_INT 1
15571: EQUAL
15572: IFFALSE 15992
// begin Say ( JMM , D3b-JMM-1 ) ;
15574: LD_EXP 10
15578: PPUSH
15579: LD_STRING D3b-JMM-1
15581: PPUSH
15582: CALL_OW 88
// dialog := false ;
15586: LD_ADDR_VAR 0 1
15590: PUSH
15591: LD_INT 0
15593: ST_TO_ADDR
// if gammaCommander = 1 then
15594: LD_EXP 9
15598: PUSH
15599: LD_INT 1
15601: EQUAL
15602: IFFALSE 15713
// if IsOK ( Donaldson ) then
15604: LD_EXP 12
15608: PPUSH
15609: CALL_OW 302
15613: IFFALSE 15635
// dialog := Say ( Donaldson , D3b-Don-1 ) else
15615: LD_ADDR_VAR 0 1
15619: PUSH
15620: LD_EXP 12
15624: PPUSH
15625: LD_STRING D3b-Don-1
15627: PPUSH
15628: CALL_OW 88
15632: ST_TO_ADDR
15633: GO 15713
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15635: LD_ADDR_VAR 0 1
15639: PUSH
15640: LD_INT 22
15642: PUSH
15643: LD_INT 1
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 21
15652: PUSH
15653: LD_INT 1
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 23
15662: PUSH
15663: LD_INT 1
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 120
15672: PUSH
15673: LD_INT 106
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 26
15682: PUSH
15683: LD_INT 1
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL_OW 69
15701: PPUSH
15702: LD_STRING D3b-Sol1-1
15704: PPUSH
15705: LD_STRING 
15707: PPUSH
15708: CALL 18213 0 3
15712: ST_TO_ADDR
// if gammaCommander = 2 then
15713: LD_EXP 9
15717: PUSH
15718: LD_INT 2
15720: EQUAL
15721: IFFALSE 15832
// if IsOk ( Brown ) then
15723: LD_EXP 11
15727: PPUSH
15728: CALL_OW 302
15732: IFFALSE 15754
// dialog := Say ( Brown , D3b-Brown-1 ) else
15734: LD_ADDR_VAR 0 1
15738: PUSH
15739: LD_EXP 11
15743: PPUSH
15744: LD_STRING D3b-Brown-1
15746: PPUSH
15747: CALL_OW 88
15751: ST_TO_ADDR
15752: GO 15832
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15754: LD_ADDR_VAR 0 1
15758: PUSH
15759: LD_INT 22
15761: PUSH
15762: LD_INT 1
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 21
15771: PUSH
15772: LD_INT 1
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 23
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 120
15791: PUSH
15792: LD_INT 106
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 26
15801: PUSH
15802: LD_INT 1
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: PPUSH
15816: CALL_OW 69
15820: PPUSH
15821: LD_STRING D3b-Sol1-1
15823: PPUSH
15824: LD_STRING 
15826: PPUSH
15827: CALL 18213 0 3
15831: ST_TO_ADDR
// if gammaCommander = 3 then
15832: LD_EXP 9
15836: PUSH
15837: LD_INT 3
15839: EQUAL
15840: IFFALSE 15951
// if IsOk ( Houten ) then
15842: LD_EXP 20
15846: PPUSH
15847: CALL_OW 302
15851: IFFALSE 15873
// dialog := Say ( Houten , D3b-VanH-1 ) else
15853: LD_ADDR_VAR 0 1
15857: PUSH
15858: LD_EXP 20
15862: PPUSH
15863: LD_STRING D3b-VanH-1
15865: PPUSH
15866: CALL_OW 88
15870: ST_TO_ADDR
15871: GO 15951
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15873: LD_ADDR_VAR 0 1
15877: PUSH
15878: LD_INT 22
15880: PUSH
15881: LD_INT 1
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 21
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 23
15900: PUSH
15901: LD_INT 1
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 120
15910: PUSH
15911: LD_INT 106
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 26
15920: PUSH
15921: LD_INT 1
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: PPUSH
15935: CALL_OW 69
15939: PPUSH
15940: LD_STRING D3b-Sol1-1
15942: PPUSH
15943: LD_STRING 
15945: PPUSH
15946: CALL 18213 0 3
15950: ST_TO_ADDR
// if dialog then
15951: LD_VAR 0 1
15955: IFFALSE 15992
// begin Say ( JMM , D3b-JMM-2 ) ;
15957: LD_EXP 10
15961: PPUSH
15962: LD_STRING D3b-JMM-2
15964: PPUSH
15965: CALL_OW 88
// if IsOK ( Lisa ) then
15969: LD_EXP 15
15973: PPUSH
15974: CALL_OW 302
15978: IFFALSE 15992
// Say ( Lisa , D3b-Lisa-2 ) ;
15980: LD_EXP 15
15984: PPUSH
15985: LD_STRING D3b-Lisa-2
15987: PPUSH
15988: CALL_OW 88
// end ; end ; end ; if not seenComputer then
15992: LD_EXP 6
15996: NOT
15997: IFFALSE 16005
// begin DialogueOff ;
15999: CALL_OW 7
// exit ;
16003: GO 16217
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
16005: LD_INT 22
16007: PUSH
16008: LD_INT 1
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 21
16017: PUSH
16018: LD_INT 1
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 23
16027: PUSH
16028: LD_INT 1
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 2
16037: PUSH
16038: LD_INT 120
16040: PUSH
16041: LD_INT 106
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 120
16050: PUSH
16051: LD_INT 107
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 26
16065: PUSH
16066: LD_INT 1
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: PPUSH
16080: CALL_OW 69
16084: PPUSH
16085: LD_STRING DCa-Sol1-1
16087: PPUSH
16088: LD_STRING 
16090: PPUSH
16091: CALL 18213 0 3
16095: IFFALSE 16109
// Say ( JMM , DCb-JMM-1 ) ;
16097: LD_EXP 10
16101: PPUSH
16102: LD_STRING DCb-JMM-1
16104: PPUSH
16105: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
16109: LD_INT 22
16111: PUSH
16112: LD_INT 1
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 21
16121: PUSH
16122: LD_INT 1
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 23
16131: PUSH
16132: LD_INT 1
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 2
16141: PUSH
16142: LD_INT 120
16144: PUSH
16145: LD_INT 106
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 120
16154: PUSH
16155: LD_INT 107
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 26
16169: PUSH
16170: LD_INT 1
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: PPUSH
16184: CALL_OW 69
16188: PPUSH
16189: LD_STRING DCb-Sol1-1
16191: PPUSH
16192: LD_STRING 
16194: PPUSH
16195: CALL 18213 0 3
16199: IFFALSE 16213
// Say ( JMM , DCb-JMM-2 ) ;
16201: LD_EXP 10
16205: PPUSH
16206: LD_STRING DCb-JMM-2
16208: PPUSH
16209: CALL_OW 88
// DialogueOff ;
16213: CALL_OW 7
// end ;
16217: PPOPN 2
16219: END
// export function DialogSeenComputer ( un ) ; begin
16220: LD_INT 0
16222: PPUSH
// if jmmArrival then
16223: LD_EXP 7
16227: IFFALSE 16231
// exit ;
16229: GO 16297
// CenterOnUnits ( un ) ;
16231: LD_VAR 0 1
16235: PPUSH
16236: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
16240: LD_INT 22
16242: PUSH
16243: LD_INT 1
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 2
16252: PUSH
16253: LD_INT 120
16255: PUSH
16256: LD_INT 106
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 120
16265: PUSH
16266: LD_INT 107
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: LIST
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PPUSH
16282: CALL_OW 69
16286: PPUSH
16287: LD_STRING DC-Sol1-1
16289: PPUSH
16290: LD_STRING DC-FSol1-1
16292: PPUSH
16293: CALL 18213 0 3
// end ;
16297: LD_VAR 0 2
16301: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
16302: LD_EXP 7
16306: PUSH
16307: LD_OWVAR 1
16311: PUSH
16312: LD_INT 48300
16314: GREATEREQUAL
16315: AND
16316: PUSH
16317: LD_EXP 10
16321: PPUSH
16322: CALL_OW 302
16326: AND
16327: IFFALSE 16677
16329: GO 16331
16331: DISABLE
// begin wait ( 2 2$00 ) ;
16332: LD_INT 4200
16334: PPUSH
16335: CALL_OW 67
// DialogueOn ;
16339: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
16343: LD_EXP 25
16347: PPUSH
16348: LD_STRING D4-Pow-1
16350: PPUSH
16351: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
16355: LD_EXP 10
16359: PPUSH
16360: LD_STRING D4-JMM-1
16362: PPUSH
16363: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
16367: LD_EXP 25
16371: PPUSH
16372: LD_STRING D4-Pow-2
16374: PPUSH
16375: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
16379: LD_EXP 10
16383: PPUSH
16384: LD_STRING D4-JMM-2
16386: PPUSH
16387: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
16391: LD_EXP 25
16395: PPUSH
16396: LD_STRING D4-Pow-3
16398: PPUSH
16399: CALL_OW 94
// DialogueOff ;
16403: CALL_OW 7
// wait ( 1 1$00 ) ;
16407: LD_INT 2100
16409: PPUSH
16410: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16414: LD_INT 1
16416: PPUSH
16417: CALL_OW 427
// wait ( 7 7$30 ) ;
16421: LD_INT 15750
16423: PPUSH
16424: CALL_OW 67
// DialogueOn ;
16428: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16432: LD_EXP 25
16436: PPUSH
16437: LD_STRING D4a-Pow-1
16439: PPUSH
16440: CALL_OW 94
// DialogueOff ;
16444: CALL_OW 7
// SikorskiCounter ;
16448: CALL 17997 0 0
// PrepareSikorsky ;
16452: CALL 6211 0 0
// CenterNowOnUnits ( Sikorski ) ;
16456: LD_EXP 23
16460: PPUSH
16461: CALL_OW 87
// DialogueOn ;
16465: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
16469: LD_EXP 23
16473: PPUSH
16474: LD_STRING D5-Sik-1
16476: PPUSH
16477: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
16481: LD_EXP 10
16485: PPUSH
16486: LD_STRING D5-JMM-1a
16488: PPUSH
16489: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
16493: LD_EXP 23
16497: PPUSH
16498: LD_STRING D5-Sik-2
16500: PPUSH
16501: CALL_OW 88
// case Query ( QSikorski ) of 1 :
16505: LD_STRING QSikorski
16507: PPUSH
16508: CALL_OW 97
16512: PUSH
16513: LD_INT 1
16515: DOUBLE
16516: EQUAL
16517: IFTRUE 16521
16519: GO 16544
16521: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16522: LD_EXP 23
16526: PPUSH
16527: LD_STRING D5a-Sik-1
16529: PPUSH
16530: CALL_OW 88
// sikorskiWait := 1 1$00 ;
16534: LD_ADDR_EXP 4
16538: PUSH
16539: LD_INT 2100
16541: ST_TO_ADDR
// end ; 2 :
16542: GO 16631
16544: LD_INT 2
16546: DOUBLE
16547: EQUAL
16548: IFTRUE 16552
16550: GO 16575
16552: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16553: LD_EXP 23
16557: PPUSH
16558: LD_STRING D5b-Sik-1
16560: PPUSH
16561: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16565: LD_ADDR_EXP 4
16569: PUSH
16570: LD_INT 10500
16572: ST_TO_ADDR
// end ; 3 :
16573: GO 16631
16575: LD_INT 3
16577: DOUBLE
16578: EQUAL
16579: IFTRUE 16583
16581: GO 16630
16583: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16584: LD_EXP 23
16588: PPUSH
16589: LD_STRING D5c-Sik-1
16591: PPUSH
16592: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16596: LD_EXP 10
16600: PPUSH
16601: LD_STRING D5c-JMM-1
16603: PPUSH
16604: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16608: LD_EXP 23
16612: PPUSH
16613: LD_STRING D5c-Sik-2
16615: PPUSH
16616: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16620: LD_ADDR_EXP 4
16624: PUSH
16625: LD_INT 10500
16627: ST_TO_ADDR
// end ; end ;
16628: GO 16631
16630: POP
// DialogueOff ;
16631: CALL_OW 7
// SikorskiWaitCounter ;
16635: CALL 18060 0 0
// DialogueOn ;
16639: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16643: LD_EXP 23
16647: PPUSH
16648: LD_STRING D6-Sik-1
16650: PPUSH
16651: CALL_OW 88
// DialogueOff ;
16655: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
16659: LD_STRING M2
16661: PPUSH
16662: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
16666: LD_INT 1
16668: PPUSH
16669: CALL_OW 427
// SikorskiAttack ;
16673: CALL 7560 0 0
// end ;
16677: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
16678: LD_INT 11
16680: PPUSH
16681: LD_INT 22
16683: PUSH
16684: LD_INT 4
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PPUSH
16691: CALL_OW 70
16695: PUSH
16696: LD_INT 2
16698: GREATER
16699: IFFALSE 16910
16701: GO 16703
16703: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16704: LD_EXP 23
16708: PPUSH
16709: LD_STRING D7-Sik-1
16711: PPUSH
16712: CALL_OW 88
// wait ( 0 0$10 ) ;
16716: LD_INT 350
16718: PPUSH
16719: CALL_OW 67
// if InBattle ( 1 ) and ( IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) ) then
16723: LD_INT 1
16725: PPUSH
16726: CALL_OW 463
16730: PUSH
16731: LD_EXP 10
16735: PPUSH
16736: LD_INT 11
16738: PPUSH
16739: CALL_OW 308
16743: PUSH
16744: LD_EXP 10
16748: PPUSH
16749: CALL_OW 310
16753: PPUSH
16754: LD_INT 11
16756: PPUSH
16757: CALL_OW 308
16761: OR
16762: AND
16763: IFFALSE 16787
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16765: LD_EXP 23
16769: PPUSH
16770: LD_STRING D7a-Sik-1
16772: PPUSH
16773: CALL_OW 88
// sikorskiStatus := 1 ;
16777: LD_ADDR_EXP 8
16781: PUSH
16782: LD_INT 1
16784: ST_TO_ADDR
// end else
16785: GO 16807
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16787: LD_EXP 23
16791: PPUSH
16792: LD_STRING D7b-Sik-1
16794: PPUSH
16795: CALL_OW 88
// sikorskiStatus := 2 ;
16799: LD_ADDR_EXP 8
16803: PUSH
16804: LD_INT 2
16806: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
16807: LD_INT 1575
16809: PPUSH
16810: CALL_OW 67
// if InBattle ( 1 ) and ( IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) ) then
16814: LD_INT 1
16816: PPUSH
16817: CALL_OW 463
16821: PUSH
16822: LD_EXP 10
16826: PPUSH
16827: LD_INT 11
16829: PPUSH
16830: CALL_OW 308
16834: PUSH
16835: LD_EXP 10
16839: PPUSH
16840: CALL_OW 310
16844: PPUSH
16845: LD_INT 11
16847: PPUSH
16848: CALL_OW 308
16852: OR
16853: PUSH
16854: LD_EXP 10
16858: PPUSH
16859: CALL_OW 302
16863: NOT
16864: OR
16865: AND
16866: IFFALSE 16890
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16868: LD_EXP 23
16872: PPUSH
16873: LD_STRING D7a-Sik-1
16875: PPUSH
16876: CALL_OW 88
// sikorskiStatus := 1 ;
16880: LD_ADDR_EXP 8
16884: PUSH
16885: LD_INT 1
16887: ST_TO_ADDR
// end else
16888: GO 16910
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16890: LD_EXP 23
16894: PPUSH
16895: LD_STRING D7b-Sik-1
16897: PPUSH
16898: CALL_OW 88
// sikorskiStatus := 2 ;
16902: LD_ADDR_EXP 8
16906: PUSH
16907: LD_INT 2
16909: ST_TO_ADDR
// end ; end ;
16910: END
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
16911: LD_EXP 7
16915: PUSH
16916: LD_INT 28
16918: PPUSH
16919: CALL_OW 301
16923: AND
16924: PUSH
16925: LD_EXP 27
16929: PPUSH
16930: CALL_OW 301
16934: AND
16935: PUSH
16936: LD_INT 22
16938: PUSH
16939: LD_INT 3
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 30
16948: PUSH
16949: LD_INT 5
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PPUSH
16960: CALL_OW 69
16964: PUSH
16965: LD_INT 0
16967: EQUAL
16968: AND
16969: IFFALSE 17994
16971: GO 16973
16973: DISABLE
16974: LD_INT 0
16976: PPUSH
16977: PPUSH
16978: PPUSH
// begin Video ( true ) ;
16979: LD_INT 1
16981: PPUSH
16982: CALL 74159 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
16986: LD_INT 104
16988: PPUSH
16989: LD_INT 108
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: LD_INT 36
16997: NEG
16998: PPUSH
16999: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
17003: LD_INT 104
17005: PPUSH
17006: LD_INT 108
17008: PPUSH
17009: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
17013: LD_ADDR_VAR 0 2
17017: PUSH
17018: LD_INT 22
17020: PUSH
17021: LD_INT 1
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 21
17030: PUSH
17031: LD_INT 1
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 3
17040: PUSH
17041: LD_INT 24
17043: PUSH
17044: LD_INT 249
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: LIST
17059: PPUSH
17060: CALL_OW 69
17064: ST_TO_ADDR
// if tmp then
17065: LD_VAR 0 2
17069: IFFALSE 17100
// for i in tmp do
17071: LD_ADDR_VAR 0 1
17075: PUSH
17076: LD_VAR 0 2
17080: PUSH
17081: FOR_IN
17082: IFFALSE 17098
// SetLives ( i , 249 ) ;
17084: LD_VAR 0 1
17088: PPUSH
17089: LD_INT 249
17091: PPUSH
17092: CALL_OW 234
17096: GO 17081
17098: POP
17099: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
17100: LD_ADDR_VAR 0 1
17104: PUSH
17105: LD_INT 22
17107: PUSH
17108: LD_INT 3
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 21
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PPUSH
17129: CALL_OW 69
17133: PUSH
17134: FOR_IN
17135: IFFALSE 17178
// begin ComExit ( i ) ;
17137: LD_VAR 0 1
17141: PPUSH
17142: CALL 74575 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
17146: LD_VAR 0 1
17150: PPUSH
17151: LD_INT 131
17153: PPUSH
17154: LD_INT 127
17156: PPUSH
17157: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
17161: LD_VAR 0 1
17165: PPUSH
17166: LD_INT 141
17168: PPUSH
17169: LD_INT 147
17171: PPUSH
17172: CALL_OW 171
// end ;
17176: GO 17134
17178: POP
17179: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
17180: LD_INT 81
17182: PUSH
17183: LD_INT 3
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 3
17192: PUSH
17193: LD_INT 21
17195: PUSH
17196: LD_INT 3
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PPUSH
17211: CALL_OW 69
17215: PPUSH
17216: LD_INT 131
17218: PPUSH
17219: LD_INT 127
17221: PPUSH
17222: CALL_OW 174
// wait ( 0 0$08 ) ;
17226: LD_INT 280
17228: PPUSH
17229: CALL_OW 67
// DialogueOn ;
17233: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
17237: LD_EXP 8
17241: PUSH
17242: LD_INT 1
17244: EQUAL
17245: PUSH
17246: LD_EXP 23
17250: PPUSH
17251: CALL_OW 302
17255: AND
17256: IFFALSE 17270
// Say ( Sikorski , D9-Sik-1 ) ;
17258: LD_EXP 23
17262: PPUSH
17263: LD_STRING D9-Sik-1
17265: PPUSH
17266: CALL_OW 88
// if IsDead ( Sikorski ) then
17270: LD_EXP 23
17274: PPUSH
17275: CALL_OW 301
17279: IFFALSE 17300
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
17281: LD_EXP 25
17285: PPUSH
17286: LD_STRING D8b-Pow-1
17288: PPUSH
17289: CALL_OW 94
// YouLost ( Dismissed ) ;
17293: LD_STRING Dismissed
17295: PPUSH
17296: CALL_OW 104
// end ; if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
17300: LD_INT 22
17302: PUSH
17303: LD_INT 4
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PPUSH
17310: CALL_OW 69
17314: PUSH
17315: LD_INT 0
17317: EQUAL
17318: PUSH
17319: LD_EXP 3
17323: AND
17324: IFFALSE 17333
// SetAchievement ( ACH_BLITZKRIEG ) ;
17326: LD_STRING ACH_BLITZKRIEG
17328: PPUSH
17329: CALL_OW 543
// if tick <= 25 25$08 then
17333: LD_OWVAR 1
17337: PUSH
17338: LD_INT 52780
17340: LESSEQUAL
17341: IFFALSE 17357
// begin wait ( 3 ) ;
17343: LD_INT 3
17345: PPUSH
17346: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
17350: LD_STRING ACH_ASPEED_8
17352: PPUSH
17353: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
17357: LD_STRING med1
17359: PPUSH
17360: LD_INT 1
17362: PPUSH
17363: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
17367: LD_STRING med2
17369: PPUSH
17370: LD_INT 1
17372: PPUSH
17373: CALL_OW 101
// if sikorskiStatus = 1 then
17377: LD_EXP 8
17381: PUSH
17382: LD_INT 1
17384: EQUAL
17385: IFFALSE 17399
// AddMedal ( perfect , 1 ) else
17387: LD_STRING perfect
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 101
17397: GO 17410
// AddMedal ( perfect , - 1 ) ;
17399: LD_STRING perfect
17401: PPUSH
17402: LD_INT 1
17404: NEG
17405: PPUSH
17406: CALL_OW 101
// if Difficulty >= 3 then
17410: LD_OWVAR 67
17414: PUSH
17415: LD_INT 3
17417: GREATEREQUAL
17418: IFFALSE 17430
// SetAchievementEX ( ACH_AMER , 8 ) ;
17420: LD_STRING ACH_AMER
17422: PPUSH
17423: LD_INT 8
17425: PPUSH
17426: CALL_OW 564
// GiveMedals ( Main ) ;
17430: LD_STRING Main
17432: PPUSH
17433: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
17437: LD_INT 22
17439: PUSH
17440: LD_INT 1
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 23
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 21
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: PPUSH
17472: CALL_OW 69
17476: PPUSH
17477: CALL_OW 43
// prefix := 08_ ;
17481: LD_ADDR_VAR 0 3
17485: PUSH
17486: LD_STRING 08_
17488: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
17489: LD_EXP 10
17493: PPUSH
17494: LD_VAR 0 3
17498: PUSH
17499: LD_STRING JMM
17501: STR
17502: PPUSH
17503: CALL_OW 38
// if IsLive ( Brown ) then
17507: LD_EXP 11
17511: PPUSH
17512: CALL_OW 300
17516: IFFALSE 17536
// SaveCharacters ( Brown , prefix & Brown ) ;
17518: LD_EXP 11
17522: PPUSH
17523: LD_VAR 0 3
17527: PUSH
17528: LD_STRING Brown
17530: STR
17531: PPUSH
17532: CALL_OW 38
// if IsLive ( Donaldson ) then
17536: LD_EXP 12
17540: PPUSH
17541: CALL_OW 300
17545: IFFALSE 17565
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
17547: LD_EXP 12
17551: PPUSH
17552: LD_VAR 0 3
17556: PUSH
17557: LD_STRING Donaldson
17559: STR
17560: PPUSH
17561: CALL_OW 38
// if IsLive ( Bobby ) then
17565: LD_EXP 13
17569: PPUSH
17570: CALL_OW 300
17574: IFFALSE 17594
// SaveCharacters ( Bobby , prefix & Bobby ) ;
17576: LD_EXP 13
17580: PPUSH
17581: LD_VAR 0 3
17585: PUSH
17586: LD_STRING Bobby
17588: STR
17589: PPUSH
17590: CALL_OW 38
// if IsLive ( Cyrus ) then
17594: LD_EXP 14
17598: PPUSH
17599: CALL_OW 300
17603: IFFALSE 17623
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
17605: LD_EXP 14
17609: PPUSH
17610: LD_VAR 0 3
17614: PUSH
17615: LD_STRING Cyrus
17617: STR
17618: PPUSH
17619: CALL_OW 38
// if IsLive ( Lisa ) then
17623: LD_EXP 15
17627: PPUSH
17628: CALL_OW 300
17632: IFFALSE 17652
// SaveCharacters ( Lisa , prefix & Lisa ) ;
17634: LD_EXP 15
17638: PPUSH
17639: LD_VAR 0 3
17643: PUSH
17644: LD_STRING Lisa
17646: STR
17647: PPUSH
17648: CALL_OW 38
// if IsLive ( Frank ) then
17652: LD_EXP 16
17656: PPUSH
17657: CALL_OW 300
17661: IFFALSE 17681
// SaveCharacters ( Frank , prefix & Frank ) ;
17663: LD_EXP 16
17667: PPUSH
17668: LD_VAR 0 3
17672: PUSH
17673: LD_STRING Frank
17675: STR
17676: PPUSH
17677: CALL_OW 38
// if IsLive ( Gladstone ) then
17681: LD_EXP 17
17685: PPUSH
17686: CALL_OW 300
17690: IFFALSE 17710
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
17692: LD_EXP 17
17696: PPUSH
17697: LD_VAR 0 3
17701: PUSH
17702: LD_STRING Gladstone
17704: STR
17705: PPUSH
17706: CALL_OW 38
// if IsLive ( Kikuchi ) then
17710: LD_EXP 18
17714: PPUSH
17715: CALL_OW 300
17719: IFFALSE 17739
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
17721: LD_EXP 18
17725: PPUSH
17726: LD_VAR 0 3
17730: PUSH
17731: LD_STRING Kikuchi
17733: STR
17734: PPUSH
17735: CALL_OW 38
// if IsLive ( Denis ) then
17739: LD_EXP 21
17743: PPUSH
17744: CALL_OW 300
17748: IFFALSE 17768
// SaveCharacters ( Denis , prefix & Denis ) ;
17750: LD_EXP 21
17754: PPUSH
17755: LD_VAR 0 3
17759: PUSH
17760: LD_STRING Denis
17762: STR
17763: PPUSH
17764: CALL_OW 38
// if IsLive ( Joan ) then
17768: LD_EXP 22
17772: PPUSH
17773: CALL_OW 300
17777: IFFALSE 17797
// SaveCharacters ( Joan , prefix & Joan ) ;
17779: LD_EXP 22
17783: PPUSH
17784: LD_VAR 0 3
17788: PUSH
17789: LD_STRING Joan
17791: STR
17792: PPUSH
17793: CALL_OW 38
// if IsLive ( Khatam ) then
17797: LD_EXP 19
17801: PPUSH
17802: CALL_OW 300
17806: IFFALSE 17826
// SaveCharacters ( Khatam , prefix & Khatam ) ;
17808: LD_EXP 19
17812: PPUSH
17813: LD_VAR 0 3
17817: PUSH
17818: LD_STRING Khatam
17820: STR
17821: PPUSH
17822: CALL_OW 38
// if IsLive ( Houten ) then
17826: LD_EXP 20
17830: PPUSH
17831: CALL_OW 300
17835: IFFALSE 17855
// SaveCharacters ( Houten , prefix & Houten ) ;
17837: LD_EXP 20
17841: PPUSH
17842: LD_VAR 0 3
17846: PUSH
17847: LD_STRING Houten
17849: STR
17850: PPUSH
17851: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
17855: LD_INT 22
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 21
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 23
17877: PUSH
17878: LD_INT 1
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: LIST
17889: PPUSH
17890: CALL_OW 69
17894: PUSH
17895: LD_EXP 10
17899: PUSH
17900: LD_EXP 11
17904: PUSH
17905: LD_EXP 12
17909: PUSH
17910: LD_EXP 13
17914: PUSH
17915: LD_EXP 14
17919: PUSH
17920: LD_EXP 15
17924: PUSH
17925: LD_EXP 16
17929: PUSH
17930: LD_EXP 17
17934: PUSH
17935: LD_EXP 18
17939: PUSH
17940: LD_EXP 21
17944: PUSH
17945: LD_EXP 22
17949: PUSH
17950: LD_EXP 20
17954: PUSH
17955: LD_EXP 19
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: DIFF
17975: PPUSH
17976: LD_STRING 08_other_survivors
17978: PPUSH
17979: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
17983: LD_INT 15
17985: PPUSH
17986: CALL 7034 0 1
// YouWin ;
17990: CALL_OW 103
// end ; end_of_file
17994: PPOPN 3
17996: END
// export function SikorskiCounter ; begin
17997: LD_INT 0
17999: PPUSH
// repeat wait ( 0 0$1 ) ;
18000: LD_INT 35
18002: PPUSH
18003: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
18007: LD_ADDR_OWVAR 47
18011: PUSH
18012: LD_STRING #Am08-2
18014: PUSH
18015: LD_EXP 3
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
18024: LD_ADDR_EXP 3
18028: PUSH
18029: LD_EXP 3
18033: PUSH
18034: LD_INT 35
18036: MINUS
18037: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
18038: LD_EXP 3
18042: PUSH
18043: LD_INT 0
18045: EQUAL
18046: IFFALSE 18000
// display_strings := [ ] ;
18048: LD_ADDR_OWVAR 47
18052: PUSH
18053: EMPTY
18054: ST_TO_ADDR
// end ;
18055: LD_VAR 0 1
18059: RET
// export function SikorskiWaitCounter ; begin
18060: LD_INT 0
18062: PPUSH
// repeat wait ( 0 0$1 ) ;
18063: LD_INT 35
18065: PPUSH
18066: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
18070: LD_ADDR_OWVAR 47
18074: PUSH
18075: LD_STRING #Am08-1
18077: PUSH
18078: LD_EXP 4
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
18087: LD_ADDR_EXP 4
18091: PUSH
18092: LD_EXP 4
18096: PUSH
18097: LD_INT 35
18099: MINUS
18100: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
18101: LD_EXP 4
18105: PUSH
18106: LD_INT 0
18108: EQUAL
18109: IFFALSE 18063
// display_strings := [ ] ;
18111: LD_ADDR_OWVAR 47
18115: PUSH
18116: EMPTY
18117: ST_TO_ADDR
// end ; end_of_file
18118: LD_VAR 0 1
18122: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
18123: LD_EXP 3
18127: IFFALSE 18167
18129: GO 18131
18131: DISABLE
// begin enable ;
18132: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
18133: LD_INT 14
18135: PPUSH
18136: CALL_OW 435
18140: PUSH
18141: LD_INT 10
18143: LESS
18144: IFFALSE 18167
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
18146: LD_INT 1
18148: PPUSH
18149: LD_INT 5
18151: PPUSH
18152: CALL_OW 12
18156: PPUSH
18157: LD_INT 14
18159: PPUSH
18160: LD_INT 1
18162: PPUSH
18163: CALL_OW 55
// end ;
18167: END
// every 0 0$55 trigger sikorskiArriveCounter do
18168: LD_EXP 3
18172: IFFALSE 18212
18174: GO 18176
18176: DISABLE
// begin enable ;
18177: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
18178: LD_INT 13
18180: PPUSH
18181: CALL_OW 435
18185: PUSH
18186: LD_INT 10
18188: LESS
18189: IFFALSE 18212
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
18191: LD_INT 1
18193: PPUSH
18194: LD_INT 5
18196: PPUSH
18197: CALL_OW 12
18201: PPUSH
18202: LD_INT 13
18204: PPUSH
18205: LD_INT 1
18207: PPUSH
18208: CALL_OW 55
// end ; end_of_file
18212: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
18213: LD_INT 0
18215: PPUSH
18216: PPUSH
// if not units then
18217: LD_VAR 0 1
18221: NOT
18222: IFFALSE 18226
// exit ;
18224: GO 18351
// result := false ;
18226: LD_ADDR_VAR 0 4
18230: PUSH
18231: LD_INT 0
18233: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
18234: LD_ADDR_VAR 0 5
18238: PUSH
18239: LD_VAR 0 1
18243: PPUSH
18244: LD_INT 26
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PPUSH
18254: CALL_OW 72
18258: ST_TO_ADDR
// if tmp then
18259: LD_VAR 0 5
18263: IFFALSE 18289
// result := Say ( tmp [ 1 ] , menDialog ) ;
18265: LD_ADDR_VAR 0 4
18269: PUSH
18270: LD_VAR 0 5
18274: PUSH
18275: LD_INT 1
18277: ARRAY
18278: PPUSH
18279: LD_VAR 0 2
18283: PPUSH
18284: CALL_OW 88
18288: ST_TO_ADDR
// if not result then
18289: LD_VAR 0 4
18293: NOT
18294: IFFALSE 18351
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
18296: LD_ADDR_VAR 0 5
18300: PUSH
18301: LD_VAR 0 1
18305: PPUSH
18306: LD_INT 26
18308: PUSH
18309: LD_INT 2
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PPUSH
18316: CALL_OW 72
18320: ST_TO_ADDR
// if tmp then
18321: LD_VAR 0 5
18325: IFFALSE 18351
// result := Say ( tmp [ 1 ] , womenDialog ) ;
18327: LD_ADDR_VAR 0 4
18331: PUSH
18332: LD_VAR 0 5
18336: PUSH
18337: LD_INT 1
18339: ARRAY
18340: PPUSH
18341: LD_VAR 0 3
18345: PPUSH
18346: CALL_OW 88
18350: ST_TO_ADDR
// end ; end ; end_of_file
18351: LD_VAR 0 4
18355: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18356: LD_INT 0
18358: PPUSH
// ar_miner := 81 ;
18359: LD_ADDR_EXP 39
18363: PUSH
18364: LD_INT 81
18366: ST_TO_ADDR
// ar_crane := 88 ;
18367: LD_ADDR_EXP 38
18371: PUSH
18372: LD_INT 88
18374: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18375: LD_ADDR_EXP 33
18379: PUSH
18380: LD_INT 89
18382: ST_TO_ADDR
// us_hack := 99 ;
18383: LD_ADDR_EXP 34
18387: PUSH
18388: LD_INT 99
18390: ST_TO_ADDR
// us_artillery := 97 ;
18391: LD_ADDR_EXP 35
18395: PUSH
18396: LD_INT 97
18398: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18399: LD_ADDR_EXP 36
18403: PUSH
18404: LD_INT 91
18406: ST_TO_ADDR
// ar_mortar := 92 ;
18407: LD_ADDR_EXP 37
18411: PUSH
18412: LD_INT 92
18414: ST_TO_ADDR
// ru_flamethrower := 93 ;
18415: LD_ADDR_EXP 40
18419: PUSH
18420: LD_INT 93
18422: ST_TO_ADDR
// ru_radar := 98 ;
18423: LD_ADDR_EXP 32
18427: PUSH
18428: LD_INT 98
18430: ST_TO_ADDR
// tech_Artillery := 80 ;
18431: LD_ADDR_EXP 41
18435: PUSH
18436: LD_INT 80
18438: ST_TO_ADDR
// tech_RadMat := 81 ;
18439: LD_ADDR_EXP 42
18443: PUSH
18444: LD_INT 81
18446: ST_TO_ADDR
// tech_BasicTools := 82 ;
18447: LD_ADDR_EXP 43
18451: PUSH
18452: LD_INT 82
18454: ST_TO_ADDR
// tech_Cargo := 83 ;
18455: LD_ADDR_EXP 44
18459: PUSH
18460: LD_INT 83
18462: ST_TO_ADDR
// tech_Track := 84 ;
18463: LD_ADDR_EXP 45
18467: PUSH
18468: LD_INT 84
18470: ST_TO_ADDR
// tech_Crane := 85 ;
18471: LD_ADDR_EXP 46
18475: PUSH
18476: LD_INT 85
18478: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18479: LD_ADDR_EXP 47
18483: PUSH
18484: LD_INT 86
18486: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18487: LD_ADDR_EXP 48
18491: PUSH
18492: LD_INT 87
18494: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18495: LD_ADDR_EXP 49
18499: PUSH
18500: LD_INT 88
18502: ST_TO_ADDR
// class_mastodont := 31 ;
18503: LD_ADDR_EXP 50
18507: PUSH
18508: LD_INT 31
18510: ST_TO_ADDR
// class_horse := 21 ;
18511: LD_ADDR_EXP 51
18515: PUSH
18516: LD_INT 21
18518: ST_TO_ADDR
// end ;
18519: LD_VAR 0 1
18523: RET
// every 1 do
18524: GO 18526
18526: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18527: CALL 18356 0 0
18531: END
// every 0 0$1 do
18532: GO 18534
18534: DISABLE
// begin enable ;
18535: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18536: LD_STRING updateTimer(
18538: PUSH
18539: LD_OWVAR 1
18543: STR
18544: PUSH
18545: LD_STRING );
18547: STR
18548: PPUSH
18549: CALL_OW 559
// end ;
18553: END
// export function SOS_MapStart ( ) ; begin
18554: LD_INT 0
18556: PPUSH
// if streamModeActive then
18557: LD_EXP 52
18561: IFFALSE 18570
// DefineStreamItems ( true ) ;
18563: LD_INT 1
18565: PPUSH
18566: CALL 20220 0 1
// UpdateFactoryWaypoints ( ) ;
18570: CALL 33804 0 0
// end ;
18574: LD_VAR 0 1
18578: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18579: LD_INT 0
18581: PPUSH
// if p2 = 100 then
18582: LD_VAR 0 2
18586: PUSH
18587: LD_INT 100
18589: EQUAL
18590: IFFALSE 19593
// begin if not StreamModeActive then
18592: LD_EXP 52
18596: NOT
18597: IFFALSE 18607
// StreamModeActive := true ;
18599: LD_ADDR_EXP 52
18603: PUSH
18604: LD_INT 1
18606: ST_TO_ADDR
// if p3 = 0 then
18607: LD_VAR 0 3
18611: PUSH
18612: LD_INT 0
18614: EQUAL
18615: IFFALSE 18621
// InitStreamMode ;
18617: CALL 19756 0 0
// if p3 = 1 then
18621: LD_VAR 0 3
18625: PUSH
18626: LD_INT 1
18628: EQUAL
18629: IFFALSE 18639
// sRocket := true ;
18631: LD_ADDR_EXP 57
18635: PUSH
18636: LD_INT 1
18638: ST_TO_ADDR
// if p3 = 2 then
18639: LD_VAR 0 3
18643: PUSH
18644: LD_INT 2
18646: EQUAL
18647: IFFALSE 18657
// sSpeed := true ;
18649: LD_ADDR_EXP 56
18653: PUSH
18654: LD_INT 1
18656: ST_TO_ADDR
// if p3 = 3 then
18657: LD_VAR 0 3
18661: PUSH
18662: LD_INT 3
18664: EQUAL
18665: IFFALSE 18675
// sEngine := true ;
18667: LD_ADDR_EXP 58
18671: PUSH
18672: LD_INT 1
18674: ST_TO_ADDR
// if p3 = 4 then
18675: LD_VAR 0 3
18679: PUSH
18680: LD_INT 4
18682: EQUAL
18683: IFFALSE 18693
// sSpec := true ;
18685: LD_ADDR_EXP 55
18689: PUSH
18690: LD_INT 1
18692: ST_TO_ADDR
// if p3 = 5 then
18693: LD_VAR 0 3
18697: PUSH
18698: LD_INT 5
18700: EQUAL
18701: IFFALSE 18711
// sLevel := true ;
18703: LD_ADDR_EXP 59
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// if p3 = 6 then
18711: LD_VAR 0 3
18715: PUSH
18716: LD_INT 6
18718: EQUAL
18719: IFFALSE 18729
// sArmoury := true ;
18721: LD_ADDR_EXP 60
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// if p3 = 7 then
18729: LD_VAR 0 3
18733: PUSH
18734: LD_INT 7
18736: EQUAL
18737: IFFALSE 18747
// sRadar := true ;
18739: LD_ADDR_EXP 61
18743: PUSH
18744: LD_INT 1
18746: ST_TO_ADDR
// if p3 = 8 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_INT 8
18754: EQUAL
18755: IFFALSE 18765
// sBunker := true ;
18757: LD_ADDR_EXP 62
18761: PUSH
18762: LD_INT 1
18764: ST_TO_ADDR
// if p3 = 9 then
18765: LD_VAR 0 3
18769: PUSH
18770: LD_INT 9
18772: EQUAL
18773: IFFALSE 18783
// sHack := true ;
18775: LD_ADDR_EXP 63
18779: PUSH
18780: LD_INT 1
18782: ST_TO_ADDR
// if p3 = 10 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_INT 10
18790: EQUAL
18791: IFFALSE 18801
// sFire := true ;
18793: LD_ADDR_EXP 64
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 11 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 11
18808: EQUAL
18809: IFFALSE 18819
// sRefresh := true ;
18811: LD_ADDR_EXP 65
18815: PUSH
18816: LD_INT 1
18818: ST_TO_ADDR
// if p3 = 12 then
18819: LD_VAR 0 3
18823: PUSH
18824: LD_INT 12
18826: EQUAL
18827: IFFALSE 18837
// sExp := true ;
18829: LD_ADDR_EXP 66
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// if p3 = 13 then
18837: LD_VAR 0 3
18841: PUSH
18842: LD_INT 13
18844: EQUAL
18845: IFFALSE 18855
// sDepot := true ;
18847: LD_ADDR_EXP 67
18851: PUSH
18852: LD_INT 1
18854: ST_TO_ADDR
// if p3 = 14 then
18855: LD_VAR 0 3
18859: PUSH
18860: LD_INT 14
18862: EQUAL
18863: IFFALSE 18873
// sFlag := true ;
18865: LD_ADDR_EXP 68
18869: PUSH
18870: LD_INT 1
18872: ST_TO_ADDR
// if p3 = 15 then
18873: LD_VAR 0 3
18877: PUSH
18878: LD_INT 15
18880: EQUAL
18881: IFFALSE 18891
// sKamikadze := true ;
18883: LD_ADDR_EXP 76
18887: PUSH
18888: LD_INT 1
18890: ST_TO_ADDR
// if p3 = 16 then
18891: LD_VAR 0 3
18895: PUSH
18896: LD_INT 16
18898: EQUAL
18899: IFFALSE 18909
// sTroll := true ;
18901: LD_ADDR_EXP 77
18905: PUSH
18906: LD_INT 1
18908: ST_TO_ADDR
// if p3 = 17 then
18909: LD_VAR 0 3
18913: PUSH
18914: LD_INT 17
18916: EQUAL
18917: IFFALSE 18927
// sSlow := true ;
18919: LD_ADDR_EXP 78
18923: PUSH
18924: LD_INT 1
18926: ST_TO_ADDR
// if p3 = 18 then
18927: LD_VAR 0 3
18931: PUSH
18932: LD_INT 18
18934: EQUAL
18935: IFFALSE 18945
// sLack := true ;
18937: LD_ADDR_EXP 79
18941: PUSH
18942: LD_INT 1
18944: ST_TO_ADDR
// if p3 = 19 then
18945: LD_VAR 0 3
18949: PUSH
18950: LD_INT 19
18952: EQUAL
18953: IFFALSE 18963
// sTank := true ;
18955: LD_ADDR_EXP 81
18959: PUSH
18960: LD_INT 1
18962: ST_TO_ADDR
// if p3 = 20 then
18963: LD_VAR 0 3
18967: PUSH
18968: LD_INT 20
18970: EQUAL
18971: IFFALSE 18981
// sRemote := true ;
18973: LD_ADDR_EXP 82
18977: PUSH
18978: LD_INT 1
18980: ST_TO_ADDR
// if p3 = 21 then
18981: LD_VAR 0 3
18985: PUSH
18986: LD_INT 21
18988: EQUAL
18989: IFFALSE 18999
// sPowell := true ;
18991: LD_ADDR_EXP 83
18995: PUSH
18996: LD_INT 1
18998: ST_TO_ADDR
// if p3 = 22 then
18999: LD_VAR 0 3
19003: PUSH
19004: LD_INT 22
19006: EQUAL
19007: IFFALSE 19017
// sTeleport := true ;
19009: LD_ADDR_EXP 86
19013: PUSH
19014: LD_INT 1
19016: ST_TO_ADDR
// if p3 = 23 then
19017: LD_VAR 0 3
19021: PUSH
19022: LD_INT 23
19024: EQUAL
19025: IFFALSE 19035
// sOilTower := true ;
19027: LD_ADDR_EXP 88
19031: PUSH
19032: LD_INT 1
19034: ST_TO_ADDR
// if p3 = 24 then
19035: LD_VAR 0 3
19039: PUSH
19040: LD_INT 24
19042: EQUAL
19043: IFFALSE 19053
// sShovel := true ;
19045: LD_ADDR_EXP 89
19049: PUSH
19050: LD_INT 1
19052: ST_TO_ADDR
// if p3 = 25 then
19053: LD_VAR 0 3
19057: PUSH
19058: LD_INT 25
19060: EQUAL
19061: IFFALSE 19071
// sSheik := true ;
19063: LD_ADDR_EXP 90
19067: PUSH
19068: LD_INT 1
19070: ST_TO_ADDR
// if p3 = 26 then
19071: LD_VAR 0 3
19075: PUSH
19076: LD_INT 26
19078: EQUAL
19079: IFFALSE 19089
// sEarthquake := true ;
19081: LD_ADDR_EXP 92
19085: PUSH
19086: LD_INT 1
19088: ST_TO_ADDR
// if p3 = 27 then
19089: LD_VAR 0 3
19093: PUSH
19094: LD_INT 27
19096: EQUAL
19097: IFFALSE 19107
// sAI := true ;
19099: LD_ADDR_EXP 93
19103: PUSH
19104: LD_INT 1
19106: ST_TO_ADDR
// if p3 = 28 then
19107: LD_VAR 0 3
19111: PUSH
19112: LD_INT 28
19114: EQUAL
19115: IFFALSE 19125
// sCargo := true ;
19117: LD_ADDR_EXP 96
19121: PUSH
19122: LD_INT 1
19124: ST_TO_ADDR
// if p3 = 29 then
19125: LD_VAR 0 3
19129: PUSH
19130: LD_INT 29
19132: EQUAL
19133: IFFALSE 19143
// sDLaser := true ;
19135: LD_ADDR_EXP 97
19139: PUSH
19140: LD_INT 1
19142: ST_TO_ADDR
// if p3 = 30 then
19143: LD_VAR 0 3
19147: PUSH
19148: LD_INT 30
19150: EQUAL
19151: IFFALSE 19161
// sExchange := true ;
19153: LD_ADDR_EXP 98
19157: PUSH
19158: LD_INT 1
19160: ST_TO_ADDR
// if p3 = 31 then
19161: LD_VAR 0 3
19165: PUSH
19166: LD_INT 31
19168: EQUAL
19169: IFFALSE 19179
// sFac := true ;
19171: LD_ADDR_EXP 99
19175: PUSH
19176: LD_INT 1
19178: ST_TO_ADDR
// if p3 = 32 then
19179: LD_VAR 0 3
19183: PUSH
19184: LD_INT 32
19186: EQUAL
19187: IFFALSE 19197
// sPower := true ;
19189: LD_ADDR_EXP 100
19193: PUSH
19194: LD_INT 1
19196: ST_TO_ADDR
// if p3 = 33 then
19197: LD_VAR 0 3
19201: PUSH
19202: LD_INT 33
19204: EQUAL
19205: IFFALSE 19215
// sRandom := true ;
19207: LD_ADDR_EXP 101
19211: PUSH
19212: LD_INT 1
19214: ST_TO_ADDR
// if p3 = 34 then
19215: LD_VAR 0 3
19219: PUSH
19220: LD_INT 34
19222: EQUAL
19223: IFFALSE 19233
// sShield := true ;
19225: LD_ADDR_EXP 102
19229: PUSH
19230: LD_INT 1
19232: ST_TO_ADDR
// if p3 = 35 then
19233: LD_VAR 0 3
19237: PUSH
19238: LD_INT 35
19240: EQUAL
19241: IFFALSE 19251
// sTime := true ;
19243: LD_ADDR_EXP 103
19247: PUSH
19248: LD_INT 1
19250: ST_TO_ADDR
// if p3 = 36 then
19251: LD_VAR 0 3
19255: PUSH
19256: LD_INT 36
19258: EQUAL
19259: IFFALSE 19269
// sTools := true ;
19261: LD_ADDR_EXP 104
19265: PUSH
19266: LD_INT 1
19268: ST_TO_ADDR
// if p3 = 101 then
19269: LD_VAR 0 3
19273: PUSH
19274: LD_INT 101
19276: EQUAL
19277: IFFALSE 19287
// sSold := true ;
19279: LD_ADDR_EXP 69
19283: PUSH
19284: LD_INT 1
19286: ST_TO_ADDR
// if p3 = 102 then
19287: LD_VAR 0 3
19291: PUSH
19292: LD_INT 102
19294: EQUAL
19295: IFFALSE 19305
// sDiff := true ;
19297: LD_ADDR_EXP 70
19301: PUSH
19302: LD_INT 1
19304: ST_TO_ADDR
// if p3 = 103 then
19305: LD_VAR 0 3
19309: PUSH
19310: LD_INT 103
19312: EQUAL
19313: IFFALSE 19323
// sFog := true ;
19315: LD_ADDR_EXP 73
19319: PUSH
19320: LD_INT 1
19322: ST_TO_ADDR
// if p3 = 104 then
19323: LD_VAR 0 3
19327: PUSH
19328: LD_INT 104
19330: EQUAL
19331: IFFALSE 19341
// sReset := true ;
19333: LD_ADDR_EXP 74
19337: PUSH
19338: LD_INT 1
19340: ST_TO_ADDR
// if p3 = 105 then
19341: LD_VAR 0 3
19345: PUSH
19346: LD_INT 105
19348: EQUAL
19349: IFFALSE 19359
// sSun := true ;
19351: LD_ADDR_EXP 75
19355: PUSH
19356: LD_INT 1
19358: ST_TO_ADDR
// if p3 = 106 then
19359: LD_VAR 0 3
19363: PUSH
19364: LD_INT 106
19366: EQUAL
19367: IFFALSE 19377
// sTiger := true ;
19369: LD_ADDR_EXP 71
19373: PUSH
19374: LD_INT 1
19376: ST_TO_ADDR
// if p3 = 107 then
19377: LD_VAR 0 3
19381: PUSH
19382: LD_INT 107
19384: EQUAL
19385: IFFALSE 19395
// sBomb := true ;
19387: LD_ADDR_EXP 72
19391: PUSH
19392: LD_INT 1
19394: ST_TO_ADDR
// if p3 = 108 then
19395: LD_VAR 0 3
19399: PUSH
19400: LD_INT 108
19402: EQUAL
19403: IFFALSE 19413
// sWound := true ;
19405: LD_ADDR_EXP 80
19409: PUSH
19410: LD_INT 1
19412: ST_TO_ADDR
// if p3 = 109 then
19413: LD_VAR 0 3
19417: PUSH
19418: LD_INT 109
19420: EQUAL
19421: IFFALSE 19431
// sBetray := true ;
19423: LD_ADDR_EXP 84
19427: PUSH
19428: LD_INT 1
19430: ST_TO_ADDR
// if p3 = 110 then
19431: LD_VAR 0 3
19435: PUSH
19436: LD_INT 110
19438: EQUAL
19439: IFFALSE 19449
// sContamin := true ;
19441: LD_ADDR_EXP 85
19445: PUSH
19446: LD_INT 1
19448: ST_TO_ADDR
// if p3 = 111 then
19449: LD_VAR 0 3
19453: PUSH
19454: LD_INT 111
19456: EQUAL
19457: IFFALSE 19467
// sOil := true ;
19459: LD_ADDR_EXP 87
19463: PUSH
19464: LD_INT 1
19466: ST_TO_ADDR
// if p3 = 112 then
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 112
19474: EQUAL
19475: IFFALSE 19485
// sStu := true ;
19477: LD_ADDR_EXP 91
19481: PUSH
19482: LD_INT 1
19484: ST_TO_ADDR
// if p3 = 113 then
19485: LD_VAR 0 3
19489: PUSH
19490: LD_INT 113
19492: EQUAL
19493: IFFALSE 19503
// sBazooka := true ;
19495: LD_ADDR_EXP 94
19499: PUSH
19500: LD_INT 1
19502: ST_TO_ADDR
// if p3 = 114 then
19503: LD_VAR 0 3
19507: PUSH
19508: LD_INT 114
19510: EQUAL
19511: IFFALSE 19521
// sMortar := true ;
19513: LD_ADDR_EXP 95
19517: PUSH
19518: LD_INT 1
19520: ST_TO_ADDR
// if p3 = 115 then
19521: LD_VAR 0 3
19525: PUSH
19526: LD_INT 115
19528: EQUAL
19529: IFFALSE 19539
// sRanger := true ;
19531: LD_ADDR_EXP 105
19535: PUSH
19536: LD_INT 1
19538: ST_TO_ADDR
// if p3 = 116 then
19539: LD_VAR 0 3
19543: PUSH
19544: LD_INT 116
19546: EQUAL
19547: IFFALSE 19557
// sComputer := true ;
19549: LD_ADDR_EXP 106
19553: PUSH
19554: LD_INT 1
19556: ST_TO_ADDR
// if p3 = 117 then
19557: LD_VAR 0 3
19561: PUSH
19562: LD_INT 117
19564: EQUAL
19565: IFFALSE 19575
// s30 := true ;
19567: LD_ADDR_EXP 107
19571: PUSH
19572: LD_INT 1
19574: ST_TO_ADDR
// if p3 = 118 then
19575: LD_VAR 0 3
19579: PUSH
19580: LD_INT 118
19582: EQUAL
19583: IFFALSE 19593
// s60 := true ;
19585: LD_ADDR_EXP 108
19589: PUSH
19590: LD_INT 1
19592: ST_TO_ADDR
// end ; if p2 = 101 then
19593: LD_VAR 0 2
19597: PUSH
19598: LD_INT 101
19600: EQUAL
19601: IFFALSE 19729
// begin case p3 of 1 :
19603: LD_VAR 0 3
19607: PUSH
19608: LD_INT 1
19610: DOUBLE
19611: EQUAL
19612: IFTRUE 19616
19614: GO 19623
19616: POP
// hHackUnlimitedResources ; 2 :
19617: CALL 31827 0 0
19621: GO 19729
19623: LD_INT 2
19625: DOUBLE
19626: EQUAL
19627: IFTRUE 19631
19629: GO 19638
19631: POP
// hHackSetLevel10 ; 3 :
19632: CALL 31960 0 0
19636: GO 19729
19638: LD_INT 3
19640: DOUBLE
19641: EQUAL
19642: IFTRUE 19646
19644: GO 19653
19646: POP
// hHackSetLevel10YourUnits ; 4 :
19647: CALL 32045 0 0
19651: GO 19729
19653: LD_INT 4
19655: DOUBLE
19656: EQUAL
19657: IFTRUE 19661
19659: GO 19668
19661: POP
// hHackInvincible ; 5 :
19662: CALL 32493 0 0
19666: GO 19729
19668: LD_INT 5
19670: DOUBLE
19671: EQUAL
19672: IFTRUE 19676
19674: GO 19683
19676: POP
// hHackInvisible ; 6 :
19677: CALL 32604 0 0
19681: GO 19729
19683: LD_INT 6
19685: DOUBLE
19686: EQUAL
19687: IFTRUE 19691
19689: GO 19698
19691: POP
// hHackChangeYourSide ; 7 :
19692: CALL 32661 0 0
19696: GO 19729
19698: LD_INT 7
19700: DOUBLE
19701: EQUAL
19702: IFTRUE 19706
19704: GO 19713
19706: POP
// hHackChangeUnitSide ; 8 :
19707: CALL 32703 0 0
19711: GO 19729
19713: LD_INT 8
19715: DOUBLE
19716: EQUAL
19717: IFTRUE 19721
19719: GO 19728
19721: POP
// hHackFog ; end ;
19722: CALL 32804 0 0
19726: GO 19729
19728: POP
// end ; end ;
19729: LD_VAR 0 7
19733: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19734: GO 19736
19736: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19737: LD_STRING initStreamRollete();
19739: PPUSH
19740: CALL_OW 559
// InitStreamMode ;
19744: CALL 19756 0 0
// DefineStreamItems ( false ) ;
19748: LD_INT 0
19750: PPUSH
19751: CALL 20220 0 1
// end ;
19755: END
// function InitStreamMode ; begin
19756: LD_INT 0
19758: PPUSH
// streamModeActive := false ;
19759: LD_ADDR_EXP 52
19763: PUSH
19764: LD_INT 0
19766: ST_TO_ADDR
// normalCounter := 36 ;
19767: LD_ADDR_EXP 53
19771: PUSH
19772: LD_INT 36
19774: ST_TO_ADDR
// hardcoreCounter := 18 ;
19775: LD_ADDR_EXP 54
19779: PUSH
19780: LD_INT 18
19782: ST_TO_ADDR
// sRocket := false ;
19783: LD_ADDR_EXP 57
19787: PUSH
19788: LD_INT 0
19790: ST_TO_ADDR
// sSpeed := false ;
19791: LD_ADDR_EXP 56
19795: PUSH
19796: LD_INT 0
19798: ST_TO_ADDR
// sEngine := false ;
19799: LD_ADDR_EXP 58
19803: PUSH
19804: LD_INT 0
19806: ST_TO_ADDR
// sSpec := false ;
19807: LD_ADDR_EXP 55
19811: PUSH
19812: LD_INT 0
19814: ST_TO_ADDR
// sLevel := false ;
19815: LD_ADDR_EXP 59
19819: PUSH
19820: LD_INT 0
19822: ST_TO_ADDR
// sArmoury := false ;
19823: LD_ADDR_EXP 60
19827: PUSH
19828: LD_INT 0
19830: ST_TO_ADDR
// sRadar := false ;
19831: LD_ADDR_EXP 61
19835: PUSH
19836: LD_INT 0
19838: ST_TO_ADDR
// sBunker := false ;
19839: LD_ADDR_EXP 62
19843: PUSH
19844: LD_INT 0
19846: ST_TO_ADDR
// sHack := false ;
19847: LD_ADDR_EXP 63
19851: PUSH
19852: LD_INT 0
19854: ST_TO_ADDR
// sFire := false ;
19855: LD_ADDR_EXP 64
19859: PUSH
19860: LD_INT 0
19862: ST_TO_ADDR
// sRefresh := false ;
19863: LD_ADDR_EXP 65
19867: PUSH
19868: LD_INT 0
19870: ST_TO_ADDR
// sExp := false ;
19871: LD_ADDR_EXP 66
19875: PUSH
19876: LD_INT 0
19878: ST_TO_ADDR
// sDepot := false ;
19879: LD_ADDR_EXP 67
19883: PUSH
19884: LD_INT 0
19886: ST_TO_ADDR
// sFlag := false ;
19887: LD_ADDR_EXP 68
19891: PUSH
19892: LD_INT 0
19894: ST_TO_ADDR
// sKamikadze := false ;
19895: LD_ADDR_EXP 76
19899: PUSH
19900: LD_INT 0
19902: ST_TO_ADDR
// sTroll := false ;
19903: LD_ADDR_EXP 77
19907: PUSH
19908: LD_INT 0
19910: ST_TO_ADDR
// sSlow := false ;
19911: LD_ADDR_EXP 78
19915: PUSH
19916: LD_INT 0
19918: ST_TO_ADDR
// sLack := false ;
19919: LD_ADDR_EXP 79
19923: PUSH
19924: LD_INT 0
19926: ST_TO_ADDR
// sTank := false ;
19927: LD_ADDR_EXP 81
19931: PUSH
19932: LD_INT 0
19934: ST_TO_ADDR
// sRemote := false ;
19935: LD_ADDR_EXP 82
19939: PUSH
19940: LD_INT 0
19942: ST_TO_ADDR
// sPowell := false ;
19943: LD_ADDR_EXP 83
19947: PUSH
19948: LD_INT 0
19950: ST_TO_ADDR
// sTeleport := false ;
19951: LD_ADDR_EXP 86
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// sOilTower := false ;
19959: LD_ADDR_EXP 88
19963: PUSH
19964: LD_INT 0
19966: ST_TO_ADDR
// sShovel := false ;
19967: LD_ADDR_EXP 89
19971: PUSH
19972: LD_INT 0
19974: ST_TO_ADDR
// sSheik := false ;
19975: LD_ADDR_EXP 90
19979: PUSH
19980: LD_INT 0
19982: ST_TO_ADDR
// sEarthquake := false ;
19983: LD_ADDR_EXP 92
19987: PUSH
19988: LD_INT 0
19990: ST_TO_ADDR
// sAI := false ;
19991: LD_ADDR_EXP 93
19995: PUSH
19996: LD_INT 0
19998: ST_TO_ADDR
// sCargo := false ;
19999: LD_ADDR_EXP 96
20003: PUSH
20004: LD_INT 0
20006: ST_TO_ADDR
// sDLaser := false ;
20007: LD_ADDR_EXP 97
20011: PUSH
20012: LD_INT 0
20014: ST_TO_ADDR
// sExchange := false ;
20015: LD_ADDR_EXP 98
20019: PUSH
20020: LD_INT 0
20022: ST_TO_ADDR
// sFac := false ;
20023: LD_ADDR_EXP 99
20027: PUSH
20028: LD_INT 0
20030: ST_TO_ADDR
// sPower := false ;
20031: LD_ADDR_EXP 100
20035: PUSH
20036: LD_INT 0
20038: ST_TO_ADDR
// sRandom := false ;
20039: LD_ADDR_EXP 101
20043: PUSH
20044: LD_INT 0
20046: ST_TO_ADDR
// sShield := false ;
20047: LD_ADDR_EXP 102
20051: PUSH
20052: LD_INT 0
20054: ST_TO_ADDR
// sTime := false ;
20055: LD_ADDR_EXP 103
20059: PUSH
20060: LD_INT 0
20062: ST_TO_ADDR
// sTools := false ;
20063: LD_ADDR_EXP 104
20067: PUSH
20068: LD_INT 0
20070: ST_TO_ADDR
// sSold := false ;
20071: LD_ADDR_EXP 69
20075: PUSH
20076: LD_INT 0
20078: ST_TO_ADDR
// sDiff := false ;
20079: LD_ADDR_EXP 70
20083: PUSH
20084: LD_INT 0
20086: ST_TO_ADDR
// sFog := false ;
20087: LD_ADDR_EXP 73
20091: PUSH
20092: LD_INT 0
20094: ST_TO_ADDR
// sReset := false ;
20095: LD_ADDR_EXP 74
20099: PUSH
20100: LD_INT 0
20102: ST_TO_ADDR
// sSun := false ;
20103: LD_ADDR_EXP 75
20107: PUSH
20108: LD_INT 0
20110: ST_TO_ADDR
// sTiger := false ;
20111: LD_ADDR_EXP 71
20115: PUSH
20116: LD_INT 0
20118: ST_TO_ADDR
// sBomb := false ;
20119: LD_ADDR_EXP 72
20123: PUSH
20124: LD_INT 0
20126: ST_TO_ADDR
// sWound := false ;
20127: LD_ADDR_EXP 80
20131: PUSH
20132: LD_INT 0
20134: ST_TO_ADDR
// sBetray := false ;
20135: LD_ADDR_EXP 84
20139: PUSH
20140: LD_INT 0
20142: ST_TO_ADDR
// sContamin := false ;
20143: LD_ADDR_EXP 85
20147: PUSH
20148: LD_INT 0
20150: ST_TO_ADDR
// sOil := false ;
20151: LD_ADDR_EXP 87
20155: PUSH
20156: LD_INT 0
20158: ST_TO_ADDR
// sStu := false ;
20159: LD_ADDR_EXP 91
20163: PUSH
20164: LD_INT 0
20166: ST_TO_ADDR
// sBazooka := false ;
20167: LD_ADDR_EXP 94
20171: PUSH
20172: LD_INT 0
20174: ST_TO_ADDR
// sMortar := false ;
20175: LD_ADDR_EXP 95
20179: PUSH
20180: LD_INT 0
20182: ST_TO_ADDR
// sRanger := false ;
20183: LD_ADDR_EXP 105
20187: PUSH
20188: LD_INT 0
20190: ST_TO_ADDR
// sComputer := false ;
20191: LD_ADDR_EXP 106
20195: PUSH
20196: LD_INT 0
20198: ST_TO_ADDR
// s30 := false ;
20199: LD_ADDR_EXP 107
20203: PUSH
20204: LD_INT 0
20206: ST_TO_ADDR
// s60 := false ;
20207: LD_ADDR_EXP 108
20211: PUSH
20212: LD_INT 0
20214: ST_TO_ADDR
// end ;
20215: LD_VAR 0 1
20219: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20220: LD_INT 0
20222: PPUSH
20223: PPUSH
20224: PPUSH
20225: PPUSH
20226: PPUSH
20227: PPUSH
20228: PPUSH
// result := [ ] ;
20229: LD_ADDR_VAR 0 2
20233: PUSH
20234: EMPTY
20235: ST_TO_ADDR
// if campaign_id = 1 then
20236: LD_OWVAR 69
20240: PUSH
20241: LD_INT 1
20243: EQUAL
20244: IFFALSE 23410
// begin case mission_number of 1 :
20246: LD_OWVAR 70
20250: PUSH
20251: LD_INT 1
20253: DOUBLE
20254: EQUAL
20255: IFTRUE 20259
20257: GO 20335
20259: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20260: LD_ADDR_VAR 0 2
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: LD_INT 4
20270: PUSH
20271: LD_INT 11
20273: PUSH
20274: LD_INT 12
20276: PUSH
20277: LD_INT 15
20279: PUSH
20280: LD_INT 16
20282: PUSH
20283: LD_INT 22
20285: PUSH
20286: LD_INT 23
20288: PUSH
20289: LD_INT 26
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 101
20305: PUSH
20306: LD_INT 102
20308: PUSH
20309: LD_INT 106
20311: PUSH
20312: LD_INT 116
20314: PUSH
20315: LD_INT 117
20317: PUSH
20318: LD_INT 118
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: ST_TO_ADDR
20333: GO 23408
20335: LD_INT 2
20337: DOUBLE
20338: EQUAL
20339: IFTRUE 20343
20341: GO 20427
20343: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20344: LD_ADDR_VAR 0 2
20348: PUSH
20349: LD_INT 2
20351: PUSH
20352: LD_INT 4
20354: PUSH
20355: LD_INT 11
20357: PUSH
20358: LD_INT 12
20360: PUSH
20361: LD_INT 15
20363: PUSH
20364: LD_INT 16
20366: PUSH
20367: LD_INT 22
20369: PUSH
20370: LD_INT 23
20372: PUSH
20373: LD_INT 26
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 101
20389: PUSH
20390: LD_INT 102
20392: PUSH
20393: LD_INT 105
20395: PUSH
20396: LD_INT 106
20398: PUSH
20399: LD_INT 108
20401: PUSH
20402: LD_INT 116
20404: PUSH
20405: LD_INT 117
20407: PUSH
20408: LD_INT 118
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: ST_TO_ADDR
20425: GO 23408
20427: LD_INT 3
20429: DOUBLE
20430: EQUAL
20431: IFTRUE 20435
20433: GO 20523
20435: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20436: LD_ADDR_VAR 0 2
20440: PUSH
20441: LD_INT 2
20443: PUSH
20444: LD_INT 4
20446: PUSH
20447: LD_INT 5
20449: PUSH
20450: LD_INT 11
20452: PUSH
20453: LD_INT 12
20455: PUSH
20456: LD_INT 15
20458: PUSH
20459: LD_INT 16
20461: PUSH
20462: LD_INT 22
20464: PUSH
20465: LD_INT 26
20467: PUSH
20468: LD_INT 36
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 101
20485: PUSH
20486: LD_INT 102
20488: PUSH
20489: LD_INT 105
20491: PUSH
20492: LD_INT 106
20494: PUSH
20495: LD_INT 108
20497: PUSH
20498: LD_INT 116
20500: PUSH
20501: LD_INT 117
20503: PUSH
20504: LD_INT 118
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: ST_TO_ADDR
20521: GO 23408
20523: LD_INT 4
20525: DOUBLE
20526: EQUAL
20527: IFTRUE 20531
20529: GO 20627
20531: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20532: LD_ADDR_VAR 0 2
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: LD_INT 4
20542: PUSH
20543: LD_INT 5
20545: PUSH
20546: LD_INT 8
20548: PUSH
20549: LD_INT 11
20551: PUSH
20552: LD_INT 12
20554: PUSH
20555: LD_INT 15
20557: PUSH
20558: LD_INT 16
20560: PUSH
20561: LD_INT 22
20563: PUSH
20564: LD_INT 23
20566: PUSH
20567: LD_INT 26
20569: PUSH
20570: LD_INT 36
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 101
20589: PUSH
20590: LD_INT 102
20592: PUSH
20593: LD_INT 105
20595: PUSH
20596: LD_INT 106
20598: PUSH
20599: LD_INT 108
20601: PUSH
20602: LD_INT 116
20604: PUSH
20605: LD_INT 117
20607: PUSH
20608: LD_INT 118
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: ST_TO_ADDR
20625: GO 23408
20627: LD_INT 5
20629: DOUBLE
20630: EQUAL
20631: IFTRUE 20635
20633: GO 20747
20635: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20636: LD_ADDR_VAR 0 2
20640: PUSH
20641: LD_INT 2
20643: PUSH
20644: LD_INT 4
20646: PUSH
20647: LD_INT 5
20649: PUSH
20650: LD_INT 6
20652: PUSH
20653: LD_INT 8
20655: PUSH
20656: LD_INT 11
20658: PUSH
20659: LD_INT 12
20661: PUSH
20662: LD_INT 15
20664: PUSH
20665: LD_INT 16
20667: PUSH
20668: LD_INT 22
20670: PUSH
20671: LD_INT 23
20673: PUSH
20674: LD_INT 25
20676: PUSH
20677: LD_INT 26
20679: PUSH
20680: LD_INT 36
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 101
20701: PUSH
20702: LD_INT 102
20704: PUSH
20705: LD_INT 105
20707: PUSH
20708: LD_INT 106
20710: PUSH
20711: LD_INT 108
20713: PUSH
20714: LD_INT 109
20716: PUSH
20717: LD_INT 112
20719: PUSH
20720: LD_INT 116
20722: PUSH
20723: LD_INT 117
20725: PUSH
20726: LD_INT 118
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: ST_TO_ADDR
20745: GO 23408
20747: LD_INT 6
20749: DOUBLE
20750: EQUAL
20751: IFTRUE 20755
20753: GO 20887
20755: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20756: LD_ADDR_VAR 0 2
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: LD_INT 4
20766: PUSH
20767: LD_INT 5
20769: PUSH
20770: LD_INT 6
20772: PUSH
20773: LD_INT 8
20775: PUSH
20776: LD_INT 11
20778: PUSH
20779: LD_INT 12
20781: PUSH
20782: LD_INT 15
20784: PUSH
20785: LD_INT 16
20787: PUSH
20788: LD_INT 20
20790: PUSH
20791: LD_INT 21
20793: PUSH
20794: LD_INT 22
20796: PUSH
20797: LD_INT 23
20799: PUSH
20800: LD_INT 25
20802: PUSH
20803: LD_INT 26
20805: PUSH
20806: LD_INT 30
20808: PUSH
20809: LD_INT 31
20811: PUSH
20812: LD_INT 32
20814: PUSH
20815: LD_INT 36
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 101
20841: PUSH
20842: LD_INT 102
20844: PUSH
20845: LD_INT 105
20847: PUSH
20848: LD_INT 106
20850: PUSH
20851: LD_INT 108
20853: PUSH
20854: LD_INT 109
20856: PUSH
20857: LD_INT 112
20859: PUSH
20860: LD_INT 116
20862: PUSH
20863: LD_INT 117
20865: PUSH
20866: LD_INT 118
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: ST_TO_ADDR
20885: GO 23408
20887: LD_INT 7
20889: DOUBLE
20890: EQUAL
20891: IFTRUE 20895
20893: GO 21007
20895: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20896: LD_ADDR_VAR 0 2
20900: PUSH
20901: LD_INT 2
20903: PUSH
20904: LD_INT 4
20906: PUSH
20907: LD_INT 5
20909: PUSH
20910: LD_INT 7
20912: PUSH
20913: LD_INT 11
20915: PUSH
20916: LD_INT 12
20918: PUSH
20919: LD_INT 15
20921: PUSH
20922: LD_INT 16
20924: PUSH
20925: LD_INT 20
20927: PUSH
20928: LD_INT 21
20930: PUSH
20931: LD_INT 22
20933: PUSH
20934: LD_INT 23
20936: PUSH
20937: LD_INT 25
20939: PUSH
20940: LD_INT 26
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 101
20961: PUSH
20962: LD_INT 102
20964: PUSH
20965: LD_INT 103
20967: PUSH
20968: LD_INT 105
20970: PUSH
20971: LD_INT 106
20973: PUSH
20974: LD_INT 108
20976: PUSH
20977: LD_INT 112
20979: PUSH
20980: LD_INT 116
20982: PUSH
20983: LD_INT 117
20985: PUSH
20986: LD_INT 118
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: ST_TO_ADDR
21005: GO 23408
21007: LD_INT 8
21009: DOUBLE
21010: EQUAL
21011: IFTRUE 21015
21013: GO 21155
21015: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21016: LD_ADDR_VAR 0 2
21020: PUSH
21021: LD_INT 2
21023: PUSH
21024: LD_INT 4
21026: PUSH
21027: LD_INT 5
21029: PUSH
21030: LD_INT 6
21032: PUSH
21033: LD_INT 7
21035: PUSH
21036: LD_INT 8
21038: PUSH
21039: LD_INT 11
21041: PUSH
21042: LD_INT 12
21044: PUSH
21045: LD_INT 15
21047: PUSH
21048: LD_INT 16
21050: PUSH
21051: LD_INT 20
21053: PUSH
21054: LD_INT 21
21056: PUSH
21057: LD_INT 22
21059: PUSH
21060: LD_INT 23
21062: PUSH
21063: LD_INT 25
21065: PUSH
21066: LD_INT 26
21068: PUSH
21069: LD_INT 30
21071: PUSH
21072: LD_INT 31
21074: PUSH
21075: LD_INT 32
21077: PUSH
21078: LD_INT 36
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 101
21105: PUSH
21106: LD_INT 102
21108: PUSH
21109: LD_INT 103
21111: PUSH
21112: LD_INT 105
21114: PUSH
21115: LD_INT 106
21117: PUSH
21118: LD_INT 108
21120: PUSH
21121: LD_INT 109
21123: PUSH
21124: LD_INT 112
21126: PUSH
21127: LD_INT 116
21129: PUSH
21130: LD_INT 117
21132: PUSH
21133: LD_INT 118
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: ST_TO_ADDR
21153: GO 23408
21155: LD_INT 9
21157: DOUBLE
21158: EQUAL
21159: IFTRUE 21163
21161: GO 21311
21163: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21164: LD_ADDR_VAR 0 2
21168: PUSH
21169: LD_INT 2
21171: PUSH
21172: LD_INT 4
21174: PUSH
21175: LD_INT 5
21177: PUSH
21178: LD_INT 6
21180: PUSH
21181: LD_INT 7
21183: PUSH
21184: LD_INT 8
21186: PUSH
21187: LD_INT 11
21189: PUSH
21190: LD_INT 12
21192: PUSH
21193: LD_INT 15
21195: PUSH
21196: LD_INT 16
21198: PUSH
21199: LD_INT 20
21201: PUSH
21202: LD_INT 21
21204: PUSH
21205: LD_INT 22
21207: PUSH
21208: LD_INT 23
21210: PUSH
21211: LD_INT 25
21213: PUSH
21214: LD_INT 26
21216: PUSH
21217: LD_INT 28
21219: PUSH
21220: LD_INT 30
21222: PUSH
21223: LD_INT 31
21225: PUSH
21226: LD_INT 32
21228: PUSH
21229: LD_INT 36
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 101
21257: PUSH
21258: LD_INT 102
21260: PUSH
21261: LD_INT 103
21263: PUSH
21264: LD_INT 105
21266: PUSH
21267: LD_INT 106
21269: PUSH
21270: LD_INT 108
21272: PUSH
21273: LD_INT 109
21275: PUSH
21276: LD_INT 112
21278: PUSH
21279: LD_INT 114
21281: PUSH
21282: LD_INT 116
21284: PUSH
21285: LD_INT 117
21287: PUSH
21288: LD_INT 118
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: ST_TO_ADDR
21309: GO 23408
21311: LD_INT 10
21313: DOUBLE
21314: EQUAL
21315: IFTRUE 21319
21317: GO 21515
21319: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21320: LD_ADDR_VAR 0 2
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 4
21330: PUSH
21331: LD_INT 5
21333: PUSH
21334: LD_INT 6
21336: PUSH
21337: LD_INT 7
21339: PUSH
21340: LD_INT 8
21342: PUSH
21343: LD_INT 9
21345: PUSH
21346: LD_INT 10
21348: PUSH
21349: LD_INT 11
21351: PUSH
21352: LD_INT 12
21354: PUSH
21355: LD_INT 13
21357: PUSH
21358: LD_INT 14
21360: PUSH
21361: LD_INT 15
21363: PUSH
21364: LD_INT 16
21366: PUSH
21367: LD_INT 17
21369: PUSH
21370: LD_INT 18
21372: PUSH
21373: LD_INT 19
21375: PUSH
21376: LD_INT 20
21378: PUSH
21379: LD_INT 21
21381: PUSH
21382: LD_INT 22
21384: PUSH
21385: LD_INT 23
21387: PUSH
21388: LD_INT 24
21390: PUSH
21391: LD_INT 25
21393: PUSH
21394: LD_INT 26
21396: PUSH
21397: LD_INT 28
21399: PUSH
21400: LD_INT 30
21402: PUSH
21403: LD_INT 31
21405: PUSH
21406: LD_INT 32
21408: PUSH
21409: LD_INT 36
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 101
21445: PUSH
21446: LD_INT 102
21448: PUSH
21449: LD_INT 103
21451: PUSH
21452: LD_INT 104
21454: PUSH
21455: LD_INT 105
21457: PUSH
21458: LD_INT 106
21460: PUSH
21461: LD_INT 107
21463: PUSH
21464: LD_INT 108
21466: PUSH
21467: LD_INT 109
21469: PUSH
21470: LD_INT 110
21472: PUSH
21473: LD_INT 111
21475: PUSH
21476: LD_INT 112
21478: PUSH
21479: LD_INT 114
21481: PUSH
21482: LD_INT 116
21484: PUSH
21485: LD_INT 117
21487: PUSH
21488: LD_INT 118
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: ST_TO_ADDR
21513: GO 23408
21515: LD_INT 11
21517: DOUBLE
21518: EQUAL
21519: IFTRUE 21523
21521: GO 21727
21523: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21524: LD_ADDR_VAR 0 2
21528: PUSH
21529: LD_INT 2
21531: PUSH
21532: LD_INT 3
21534: PUSH
21535: LD_INT 4
21537: PUSH
21538: LD_INT 5
21540: PUSH
21541: LD_INT 6
21543: PUSH
21544: LD_INT 7
21546: PUSH
21547: LD_INT 8
21549: PUSH
21550: LD_INT 9
21552: PUSH
21553: LD_INT 10
21555: PUSH
21556: LD_INT 11
21558: PUSH
21559: LD_INT 12
21561: PUSH
21562: LD_INT 13
21564: PUSH
21565: LD_INT 14
21567: PUSH
21568: LD_INT 15
21570: PUSH
21571: LD_INT 16
21573: PUSH
21574: LD_INT 17
21576: PUSH
21577: LD_INT 18
21579: PUSH
21580: LD_INT 19
21582: PUSH
21583: LD_INT 20
21585: PUSH
21586: LD_INT 21
21588: PUSH
21589: LD_INT 22
21591: PUSH
21592: LD_INT 23
21594: PUSH
21595: LD_INT 24
21597: PUSH
21598: LD_INT 25
21600: PUSH
21601: LD_INT 26
21603: PUSH
21604: LD_INT 28
21606: PUSH
21607: LD_INT 30
21609: PUSH
21610: LD_INT 31
21612: PUSH
21613: LD_INT 32
21615: PUSH
21616: LD_INT 34
21618: PUSH
21619: LD_INT 36
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 101
21657: PUSH
21658: LD_INT 102
21660: PUSH
21661: LD_INT 103
21663: PUSH
21664: LD_INT 104
21666: PUSH
21667: LD_INT 105
21669: PUSH
21670: LD_INT 106
21672: PUSH
21673: LD_INT 107
21675: PUSH
21676: LD_INT 108
21678: PUSH
21679: LD_INT 109
21681: PUSH
21682: LD_INT 110
21684: PUSH
21685: LD_INT 111
21687: PUSH
21688: LD_INT 112
21690: PUSH
21691: LD_INT 114
21693: PUSH
21694: LD_INT 116
21696: PUSH
21697: LD_INT 117
21699: PUSH
21700: LD_INT 118
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: ST_TO_ADDR
21725: GO 23408
21727: LD_INT 12
21729: DOUBLE
21730: EQUAL
21731: IFTRUE 21735
21733: GO 21955
21735: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21736: LD_ADDR_VAR 0 2
21740: PUSH
21741: LD_INT 1
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: LD_INT 3
21749: PUSH
21750: LD_INT 4
21752: PUSH
21753: LD_INT 5
21755: PUSH
21756: LD_INT 6
21758: PUSH
21759: LD_INT 7
21761: PUSH
21762: LD_INT 8
21764: PUSH
21765: LD_INT 9
21767: PUSH
21768: LD_INT 10
21770: PUSH
21771: LD_INT 11
21773: PUSH
21774: LD_INT 12
21776: PUSH
21777: LD_INT 13
21779: PUSH
21780: LD_INT 14
21782: PUSH
21783: LD_INT 15
21785: PUSH
21786: LD_INT 16
21788: PUSH
21789: LD_INT 17
21791: PUSH
21792: LD_INT 18
21794: PUSH
21795: LD_INT 19
21797: PUSH
21798: LD_INT 20
21800: PUSH
21801: LD_INT 21
21803: PUSH
21804: LD_INT 22
21806: PUSH
21807: LD_INT 23
21809: PUSH
21810: LD_INT 24
21812: PUSH
21813: LD_INT 25
21815: PUSH
21816: LD_INT 26
21818: PUSH
21819: LD_INT 27
21821: PUSH
21822: LD_INT 28
21824: PUSH
21825: LD_INT 30
21827: PUSH
21828: LD_INT 31
21830: PUSH
21831: LD_INT 32
21833: PUSH
21834: LD_INT 33
21836: PUSH
21837: LD_INT 34
21839: PUSH
21840: LD_INT 36
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 101
21881: PUSH
21882: LD_INT 102
21884: PUSH
21885: LD_INT 103
21887: PUSH
21888: LD_INT 104
21890: PUSH
21891: LD_INT 105
21893: PUSH
21894: LD_INT 106
21896: PUSH
21897: LD_INT 107
21899: PUSH
21900: LD_INT 108
21902: PUSH
21903: LD_INT 109
21905: PUSH
21906: LD_INT 110
21908: PUSH
21909: LD_INT 111
21911: PUSH
21912: LD_INT 112
21914: PUSH
21915: LD_INT 113
21917: PUSH
21918: LD_INT 114
21920: PUSH
21921: LD_INT 116
21923: PUSH
21924: LD_INT 117
21926: PUSH
21927: LD_INT 118
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: ST_TO_ADDR
21953: GO 23408
21955: LD_INT 13
21957: DOUBLE
21958: EQUAL
21959: IFTRUE 21963
21961: GO 22171
21963: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21964: LD_ADDR_VAR 0 2
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: LD_INT 2
21974: PUSH
21975: LD_INT 3
21977: PUSH
21978: LD_INT 4
21980: PUSH
21981: LD_INT 5
21983: PUSH
21984: LD_INT 8
21986: PUSH
21987: LD_INT 9
21989: PUSH
21990: LD_INT 10
21992: PUSH
21993: LD_INT 11
21995: PUSH
21996: LD_INT 12
21998: PUSH
21999: LD_INT 14
22001: PUSH
22002: LD_INT 15
22004: PUSH
22005: LD_INT 16
22007: PUSH
22008: LD_INT 17
22010: PUSH
22011: LD_INT 18
22013: PUSH
22014: LD_INT 19
22016: PUSH
22017: LD_INT 20
22019: PUSH
22020: LD_INT 21
22022: PUSH
22023: LD_INT 22
22025: PUSH
22026: LD_INT 23
22028: PUSH
22029: LD_INT 24
22031: PUSH
22032: LD_INT 25
22034: PUSH
22035: LD_INT 26
22037: PUSH
22038: LD_INT 27
22040: PUSH
22041: LD_INT 28
22043: PUSH
22044: LD_INT 30
22046: PUSH
22047: LD_INT 31
22049: PUSH
22050: LD_INT 32
22052: PUSH
22053: LD_INT 33
22055: PUSH
22056: LD_INT 34
22058: PUSH
22059: LD_INT 36
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 101
22097: PUSH
22098: LD_INT 102
22100: PUSH
22101: LD_INT 103
22103: PUSH
22104: LD_INT 104
22106: PUSH
22107: LD_INT 105
22109: PUSH
22110: LD_INT 106
22112: PUSH
22113: LD_INT 107
22115: PUSH
22116: LD_INT 108
22118: PUSH
22119: LD_INT 109
22121: PUSH
22122: LD_INT 110
22124: PUSH
22125: LD_INT 111
22127: PUSH
22128: LD_INT 112
22130: PUSH
22131: LD_INT 113
22133: PUSH
22134: LD_INT 114
22136: PUSH
22137: LD_INT 116
22139: PUSH
22140: LD_INT 117
22142: PUSH
22143: LD_INT 118
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: ST_TO_ADDR
22169: GO 23408
22171: LD_INT 14
22173: DOUBLE
22174: EQUAL
22175: IFTRUE 22179
22177: GO 22403
22179: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22180: LD_ADDR_VAR 0 2
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: LD_INT 2
22190: PUSH
22191: LD_INT 3
22193: PUSH
22194: LD_INT 4
22196: PUSH
22197: LD_INT 5
22199: PUSH
22200: LD_INT 6
22202: PUSH
22203: LD_INT 7
22205: PUSH
22206: LD_INT 8
22208: PUSH
22209: LD_INT 9
22211: PUSH
22212: LD_INT 10
22214: PUSH
22215: LD_INT 11
22217: PUSH
22218: LD_INT 12
22220: PUSH
22221: LD_INT 13
22223: PUSH
22224: LD_INT 14
22226: PUSH
22227: LD_INT 15
22229: PUSH
22230: LD_INT 16
22232: PUSH
22233: LD_INT 17
22235: PUSH
22236: LD_INT 18
22238: PUSH
22239: LD_INT 19
22241: PUSH
22242: LD_INT 20
22244: PUSH
22245: LD_INT 21
22247: PUSH
22248: LD_INT 22
22250: PUSH
22251: LD_INT 23
22253: PUSH
22254: LD_INT 24
22256: PUSH
22257: LD_INT 25
22259: PUSH
22260: LD_INT 26
22262: PUSH
22263: LD_INT 27
22265: PUSH
22266: LD_INT 28
22268: PUSH
22269: LD_INT 29
22271: PUSH
22272: LD_INT 30
22274: PUSH
22275: LD_INT 31
22277: PUSH
22278: LD_INT 32
22280: PUSH
22281: LD_INT 33
22283: PUSH
22284: LD_INT 34
22286: PUSH
22287: LD_INT 36
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 101
22329: PUSH
22330: LD_INT 102
22332: PUSH
22333: LD_INT 103
22335: PUSH
22336: LD_INT 104
22338: PUSH
22339: LD_INT 105
22341: PUSH
22342: LD_INT 106
22344: PUSH
22345: LD_INT 107
22347: PUSH
22348: LD_INT 108
22350: PUSH
22351: LD_INT 109
22353: PUSH
22354: LD_INT 110
22356: PUSH
22357: LD_INT 111
22359: PUSH
22360: LD_INT 112
22362: PUSH
22363: LD_INT 113
22365: PUSH
22366: LD_INT 114
22368: PUSH
22369: LD_INT 116
22371: PUSH
22372: LD_INT 117
22374: PUSH
22375: LD_INT 118
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: ST_TO_ADDR
22401: GO 23408
22403: LD_INT 15
22405: DOUBLE
22406: EQUAL
22407: IFTRUE 22411
22409: GO 22635
22411: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22412: LD_ADDR_VAR 0 2
22416: PUSH
22417: LD_INT 1
22419: PUSH
22420: LD_INT 2
22422: PUSH
22423: LD_INT 3
22425: PUSH
22426: LD_INT 4
22428: PUSH
22429: LD_INT 5
22431: PUSH
22432: LD_INT 6
22434: PUSH
22435: LD_INT 7
22437: PUSH
22438: LD_INT 8
22440: PUSH
22441: LD_INT 9
22443: PUSH
22444: LD_INT 10
22446: PUSH
22447: LD_INT 11
22449: PUSH
22450: LD_INT 12
22452: PUSH
22453: LD_INT 13
22455: PUSH
22456: LD_INT 14
22458: PUSH
22459: LD_INT 15
22461: PUSH
22462: LD_INT 16
22464: PUSH
22465: LD_INT 17
22467: PUSH
22468: LD_INT 18
22470: PUSH
22471: LD_INT 19
22473: PUSH
22474: LD_INT 20
22476: PUSH
22477: LD_INT 21
22479: PUSH
22480: LD_INT 22
22482: PUSH
22483: LD_INT 23
22485: PUSH
22486: LD_INT 24
22488: PUSH
22489: LD_INT 25
22491: PUSH
22492: LD_INT 26
22494: PUSH
22495: LD_INT 27
22497: PUSH
22498: LD_INT 28
22500: PUSH
22501: LD_INT 29
22503: PUSH
22504: LD_INT 30
22506: PUSH
22507: LD_INT 31
22509: PUSH
22510: LD_INT 32
22512: PUSH
22513: LD_INT 33
22515: PUSH
22516: LD_INT 34
22518: PUSH
22519: LD_INT 36
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 101
22561: PUSH
22562: LD_INT 102
22564: PUSH
22565: LD_INT 103
22567: PUSH
22568: LD_INT 104
22570: PUSH
22571: LD_INT 105
22573: PUSH
22574: LD_INT 106
22576: PUSH
22577: LD_INT 107
22579: PUSH
22580: LD_INT 108
22582: PUSH
22583: LD_INT 109
22585: PUSH
22586: LD_INT 110
22588: PUSH
22589: LD_INT 111
22591: PUSH
22592: LD_INT 112
22594: PUSH
22595: LD_INT 113
22597: PUSH
22598: LD_INT 114
22600: PUSH
22601: LD_INT 116
22603: PUSH
22604: LD_INT 117
22606: PUSH
22607: LD_INT 118
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: ST_TO_ADDR
22633: GO 23408
22635: LD_INT 16
22637: DOUBLE
22638: EQUAL
22639: IFTRUE 22643
22641: GO 22779
22643: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22644: LD_ADDR_VAR 0 2
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: LD_INT 4
22654: PUSH
22655: LD_INT 5
22657: PUSH
22658: LD_INT 7
22660: PUSH
22661: LD_INT 11
22663: PUSH
22664: LD_INT 12
22666: PUSH
22667: LD_INT 15
22669: PUSH
22670: LD_INT 16
22672: PUSH
22673: LD_INT 20
22675: PUSH
22676: LD_INT 21
22678: PUSH
22679: LD_INT 22
22681: PUSH
22682: LD_INT 23
22684: PUSH
22685: LD_INT 25
22687: PUSH
22688: LD_INT 26
22690: PUSH
22691: LD_INT 30
22693: PUSH
22694: LD_INT 31
22696: PUSH
22697: LD_INT 32
22699: PUSH
22700: LD_INT 33
22702: PUSH
22703: LD_INT 34
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 101
22729: PUSH
22730: LD_INT 102
22732: PUSH
22733: LD_INT 103
22735: PUSH
22736: LD_INT 106
22738: PUSH
22739: LD_INT 108
22741: PUSH
22742: LD_INT 112
22744: PUSH
22745: LD_INT 113
22747: PUSH
22748: LD_INT 114
22750: PUSH
22751: LD_INT 116
22753: PUSH
22754: LD_INT 117
22756: PUSH
22757: LD_INT 118
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: ST_TO_ADDR
22777: GO 23408
22779: LD_INT 17
22781: DOUBLE
22782: EQUAL
22783: IFTRUE 22787
22785: GO 23011
22787: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22788: LD_ADDR_VAR 0 2
22792: PUSH
22793: LD_INT 1
22795: PUSH
22796: LD_INT 2
22798: PUSH
22799: LD_INT 3
22801: PUSH
22802: LD_INT 4
22804: PUSH
22805: LD_INT 5
22807: PUSH
22808: LD_INT 6
22810: PUSH
22811: LD_INT 7
22813: PUSH
22814: LD_INT 8
22816: PUSH
22817: LD_INT 9
22819: PUSH
22820: LD_INT 10
22822: PUSH
22823: LD_INT 11
22825: PUSH
22826: LD_INT 12
22828: PUSH
22829: LD_INT 13
22831: PUSH
22832: LD_INT 14
22834: PUSH
22835: LD_INT 15
22837: PUSH
22838: LD_INT 16
22840: PUSH
22841: LD_INT 17
22843: PUSH
22844: LD_INT 18
22846: PUSH
22847: LD_INT 19
22849: PUSH
22850: LD_INT 20
22852: PUSH
22853: LD_INT 21
22855: PUSH
22856: LD_INT 22
22858: PUSH
22859: LD_INT 23
22861: PUSH
22862: LD_INT 24
22864: PUSH
22865: LD_INT 25
22867: PUSH
22868: LD_INT 26
22870: PUSH
22871: LD_INT 27
22873: PUSH
22874: LD_INT 28
22876: PUSH
22877: LD_INT 29
22879: PUSH
22880: LD_INT 30
22882: PUSH
22883: LD_INT 31
22885: PUSH
22886: LD_INT 32
22888: PUSH
22889: LD_INT 33
22891: PUSH
22892: LD_INT 34
22894: PUSH
22895: LD_INT 36
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 101
22937: PUSH
22938: LD_INT 102
22940: PUSH
22941: LD_INT 103
22943: PUSH
22944: LD_INT 104
22946: PUSH
22947: LD_INT 105
22949: PUSH
22950: LD_INT 106
22952: PUSH
22953: LD_INT 107
22955: PUSH
22956: LD_INT 108
22958: PUSH
22959: LD_INT 109
22961: PUSH
22962: LD_INT 110
22964: PUSH
22965: LD_INT 111
22967: PUSH
22968: LD_INT 112
22970: PUSH
22971: LD_INT 113
22973: PUSH
22974: LD_INT 114
22976: PUSH
22977: LD_INT 116
22979: PUSH
22980: LD_INT 117
22982: PUSH
22983: LD_INT 118
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: ST_TO_ADDR
23009: GO 23408
23011: LD_INT 18
23013: DOUBLE
23014: EQUAL
23015: IFTRUE 23019
23017: GO 23167
23019: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23020: LD_ADDR_VAR 0 2
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: LD_INT 4
23030: PUSH
23031: LD_INT 5
23033: PUSH
23034: LD_INT 7
23036: PUSH
23037: LD_INT 11
23039: PUSH
23040: LD_INT 12
23042: PUSH
23043: LD_INT 15
23045: PUSH
23046: LD_INT 16
23048: PUSH
23049: LD_INT 20
23051: PUSH
23052: LD_INT 21
23054: PUSH
23055: LD_INT 22
23057: PUSH
23058: LD_INT 23
23060: PUSH
23061: LD_INT 25
23063: PUSH
23064: LD_INT 26
23066: PUSH
23067: LD_INT 30
23069: PUSH
23070: LD_INT 31
23072: PUSH
23073: LD_INT 32
23075: PUSH
23076: LD_INT 33
23078: PUSH
23079: LD_INT 34
23081: PUSH
23082: LD_INT 35
23084: PUSH
23085: LD_INT 36
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 101
23113: PUSH
23114: LD_INT 102
23116: PUSH
23117: LD_INT 103
23119: PUSH
23120: LD_INT 106
23122: PUSH
23123: LD_INT 108
23125: PUSH
23126: LD_INT 112
23128: PUSH
23129: LD_INT 113
23131: PUSH
23132: LD_INT 114
23134: PUSH
23135: LD_INT 115
23137: PUSH
23138: LD_INT 116
23140: PUSH
23141: LD_INT 117
23143: PUSH
23144: LD_INT 118
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: ST_TO_ADDR
23165: GO 23408
23167: LD_INT 19
23169: DOUBLE
23170: EQUAL
23171: IFTRUE 23175
23173: GO 23407
23175: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23176: LD_ADDR_VAR 0 2
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: LD_INT 3
23189: PUSH
23190: LD_INT 4
23192: PUSH
23193: LD_INT 5
23195: PUSH
23196: LD_INT 6
23198: PUSH
23199: LD_INT 7
23201: PUSH
23202: LD_INT 8
23204: PUSH
23205: LD_INT 9
23207: PUSH
23208: LD_INT 10
23210: PUSH
23211: LD_INT 11
23213: PUSH
23214: LD_INT 12
23216: PUSH
23217: LD_INT 13
23219: PUSH
23220: LD_INT 14
23222: PUSH
23223: LD_INT 15
23225: PUSH
23226: LD_INT 16
23228: PUSH
23229: LD_INT 17
23231: PUSH
23232: LD_INT 18
23234: PUSH
23235: LD_INT 19
23237: PUSH
23238: LD_INT 20
23240: PUSH
23241: LD_INT 21
23243: PUSH
23244: LD_INT 22
23246: PUSH
23247: LD_INT 23
23249: PUSH
23250: LD_INT 24
23252: PUSH
23253: LD_INT 25
23255: PUSH
23256: LD_INT 26
23258: PUSH
23259: LD_INT 27
23261: PUSH
23262: LD_INT 28
23264: PUSH
23265: LD_INT 29
23267: PUSH
23268: LD_INT 30
23270: PUSH
23271: LD_INT 31
23273: PUSH
23274: LD_INT 32
23276: PUSH
23277: LD_INT 33
23279: PUSH
23280: LD_INT 34
23282: PUSH
23283: LD_INT 35
23285: PUSH
23286: LD_INT 36
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 101
23329: PUSH
23330: LD_INT 102
23332: PUSH
23333: LD_INT 103
23335: PUSH
23336: LD_INT 104
23338: PUSH
23339: LD_INT 105
23341: PUSH
23342: LD_INT 106
23344: PUSH
23345: LD_INT 107
23347: PUSH
23348: LD_INT 108
23350: PUSH
23351: LD_INT 109
23353: PUSH
23354: LD_INT 110
23356: PUSH
23357: LD_INT 111
23359: PUSH
23360: LD_INT 112
23362: PUSH
23363: LD_INT 113
23365: PUSH
23366: LD_INT 114
23368: PUSH
23369: LD_INT 115
23371: PUSH
23372: LD_INT 116
23374: PUSH
23375: LD_INT 117
23377: PUSH
23378: LD_INT 118
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: ST_TO_ADDR
23405: GO 23408
23407: POP
// end else
23408: GO 23639
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23410: LD_ADDR_VAR 0 2
23414: PUSH
23415: LD_INT 1
23417: PUSH
23418: LD_INT 2
23420: PUSH
23421: LD_INT 3
23423: PUSH
23424: LD_INT 4
23426: PUSH
23427: LD_INT 5
23429: PUSH
23430: LD_INT 6
23432: PUSH
23433: LD_INT 7
23435: PUSH
23436: LD_INT 8
23438: PUSH
23439: LD_INT 9
23441: PUSH
23442: LD_INT 10
23444: PUSH
23445: LD_INT 11
23447: PUSH
23448: LD_INT 12
23450: PUSH
23451: LD_INT 13
23453: PUSH
23454: LD_INT 14
23456: PUSH
23457: LD_INT 15
23459: PUSH
23460: LD_INT 16
23462: PUSH
23463: LD_INT 17
23465: PUSH
23466: LD_INT 18
23468: PUSH
23469: LD_INT 19
23471: PUSH
23472: LD_INT 20
23474: PUSH
23475: LD_INT 21
23477: PUSH
23478: LD_INT 22
23480: PUSH
23481: LD_INT 23
23483: PUSH
23484: LD_INT 24
23486: PUSH
23487: LD_INT 25
23489: PUSH
23490: LD_INT 26
23492: PUSH
23493: LD_INT 27
23495: PUSH
23496: LD_INT 28
23498: PUSH
23499: LD_INT 29
23501: PUSH
23502: LD_INT 30
23504: PUSH
23505: LD_INT 31
23507: PUSH
23508: LD_INT 32
23510: PUSH
23511: LD_INT 33
23513: PUSH
23514: LD_INT 34
23516: PUSH
23517: LD_INT 35
23519: PUSH
23520: LD_INT 36
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 101
23563: PUSH
23564: LD_INT 102
23566: PUSH
23567: LD_INT 103
23569: PUSH
23570: LD_INT 104
23572: PUSH
23573: LD_INT 105
23575: PUSH
23576: LD_INT 106
23578: PUSH
23579: LD_INT 107
23581: PUSH
23582: LD_INT 108
23584: PUSH
23585: LD_INT 109
23587: PUSH
23588: LD_INT 110
23590: PUSH
23591: LD_INT 111
23593: PUSH
23594: LD_INT 112
23596: PUSH
23597: LD_INT 113
23599: PUSH
23600: LD_INT 114
23602: PUSH
23603: LD_INT 115
23605: PUSH
23606: LD_INT 116
23608: PUSH
23609: LD_INT 117
23611: PUSH
23612: LD_INT 118
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: ST_TO_ADDR
// if result then
23639: LD_VAR 0 2
23643: IFFALSE 24429
// begin normal :=  ;
23645: LD_ADDR_VAR 0 5
23649: PUSH
23650: LD_STRING 
23652: ST_TO_ADDR
// hardcore :=  ;
23653: LD_ADDR_VAR 0 6
23657: PUSH
23658: LD_STRING 
23660: ST_TO_ADDR
// active :=  ;
23661: LD_ADDR_VAR 0 7
23665: PUSH
23666: LD_STRING 
23668: ST_TO_ADDR
// for i = 1 to normalCounter do
23669: LD_ADDR_VAR 0 8
23673: PUSH
23674: DOUBLE
23675: LD_INT 1
23677: DEC
23678: ST_TO_ADDR
23679: LD_EXP 53
23683: PUSH
23684: FOR_TO
23685: IFFALSE 23786
// begin tmp := 0 ;
23687: LD_ADDR_VAR 0 3
23691: PUSH
23692: LD_STRING 0
23694: ST_TO_ADDR
// if result [ 1 ] then
23695: LD_VAR 0 2
23699: PUSH
23700: LD_INT 1
23702: ARRAY
23703: IFFALSE 23768
// if result [ 1 ] [ 1 ] = i then
23705: LD_VAR 0 2
23709: PUSH
23710: LD_INT 1
23712: ARRAY
23713: PUSH
23714: LD_INT 1
23716: ARRAY
23717: PUSH
23718: LD_VAR 0 8
23722: EQUAL
23723: IFFALSE 23768
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23725: LD_ADDR_VAR 0 2
23729: PUSH
23730: LD_VAR 0 2
23734: PPUSH
23735: LD_INT 1
23737: PPUSH
23738: LD_VAR 0 2
23742: PUSH
23743: LD_INT 1
23745: ARRAY
23746: PPUSH
23747: LD_INT 1
23749: PPUSH
23750: CALL_OW 3
23754: PPUSH
23755: CALL_OW 1
23759: ST_TO_ADDR
// tmp := 1 ;
23760: LD_ADDR_VAR 0 3
23764: PUSH
23765: LD_STRING 1
23767: ST_TO_ADDR
// end ; normal := normal & tmp ;
23768: LD_ADDR_VAR 0 5
23772: PUSH
23773: LD_VAR 0 5
23777: PUSH
23778: LD_VAR 0 3
23782: STR
23783: ST_TO_ADDR
// end ;
23784: GO 23684
23786: POP
23787: POP
// for i = 1 to hardcoreCounter do
23788: LD_ADDR_VAR 0 8
23792: PUSH
23793: DOUBLE
23794: LD_INT 1
23796: DEC
23797: ST_TO_ADDR
23798: LD_EXP 54
23802: PUSH
23803: FOR_TO
23804: IFFALSE 23909
// begin tmp := 0 ;
23806: LD_ADDR_VAR 0 3
23810: PUSH
23811: LD_STRING 0
23813: ST_TO_ADDR
// if result [ 2 ] then
23814: LD_VAR 0 2
23818: PUSH
23819: LD_INT 2
23821: ARRAY
23822: IFFALSE 23891
// if result [ 2 ] [ 1 ] = 100 + i then
23824: LD_VAR 0 2
23828: PUSH
23829: LD_INT 2
23831: ARRAY
23832: PUSH
23833: LD_INT 1
23835: ARRAY
23836: PUSH
23837: LD_INT 100
23839: PUSH
23840: LD_VAR 0 8
23844: PLUS
23845: EQUAL
23846: IFFALSE 23891
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23848: LD_ADDR_VAR 0 2
23852: PUSH
23853: LD_VAR 0 2
23857: PPUSH
23858: LD_INT 2
23860: PPUSH
23861: LD_VAR 0 2
23865: PUSH
23866: LD_INT 2
23868: ARRAY
23869: PPUSH
23870: LD_INT 1
23872: PPUSH
23873: CALL_OW 3
23877: PPUSH
23878: CALL_OW 1
23882: ST_TO_ADDR
// tmp := 1 ;
23883: LD_ADDR_VAR 0 3
23887: PUSH
23888: LD_STRING 1
23890: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23891: LD_ADDR_VAR 0 6
23895: PUSH
23896: LD_VAR 0 6
23900: PUSH
23901: LD_VAR 0 3
23905: STR
23906: ST_TO_ADDR
// end ;
23907: GO 23803
23909: POP
23910: POP
// if isGameLoad then
23911: LD_VAR 0 1
23915: IFFALSE 24390
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23917: LD_ADDR_VAR 0 4
23921: PUSH
23922: LD_EXP 57
23926: PUSH
23927: LD_EXP 56
23931: PUSH
23932: LD_EXP 58
23936: PUSH
23937: LD_EXP 55
23941: PUSH
23942: LD_EXP 59
23946: PUSH
23947: LD_EXP 60
23951: PUSH
23952: LD_EXP 61
23956: PUSH
23957: LD_EXP 62
23961: PUSH
23962: LD_EXP 63
23966: PUSH
23967: LD_EXP 64
23971: PUSH
23972: LD_EXP 65
23976: PUSH
23977: LD_EXP 66
23981: PUSH
23982: LD_EXP 67
23986: PUSH
23987: LD_EXP 68
23991: PUSH
23992: LD_EXP 76
23996: PUSH
23997: LD_EXP 77
24001: PUSH
24002: LD_EXP 78
24006: PUSH
24007: LD_EXP 79
24011: PUSH
24012: LD_EXP 81
24016: PUSH
24017: LD_EXP 82
24021: PUSH
24022: LD_EXP 83
24026: PUSH
24027: LD_EXP 86
24031: PUSH
24032: LD_EXP 88
24036: PUSH
24037: LD_EXP 89
24041: PUSH
24042: LD_EXP 90
24046: PUSH
24047: LD_EXP 92
24051: PUSH
24052: LD_EXP 93
24056: PUSH
24057: LD_EXP 96
24061: PUSH
24062: LD_EXP 97
24066: PUSH
24067: LD_EXP 98
24071: PUSH
24072: LD_EXP 99
24076: PUSH
24077: LD_EXP 100
24081: PUSH
24082: LD_EXP 101
24086: PUSH
24087: LD_EXP 102
24091: PUSH
24092: LD_EXP 103
24096: PUSH
24097: LD_EXP 104
24101: PUSH
24102: LD_EXP 69
24106: PUSH
24107: LD_EXP 70
24111: PUSH
24112: LD_EXP 73
24116: PUSH
24117: LD_EXP 74
24121: PUSH
24122: LD_EXP 75
24126: PUSH
24127: LD_EXP 71
24131: PUSH
24132: LD_EXP 72
24136: PUSH
24137: LD_EXP 80
24141: PUSH
24142: LD_EXP 84
24146: PUSH
24147: LD_EXP 85
24151: PUSH
24152: LD_EXP 87
24156: PUSH
24157: LD_EXP 91
24161: PUSH
24162: LD_EXP 94
24166: PUSH
24167: LD_EXP 95
24171: PUSH
24172: LD_EXP 105
24176: PUSH
24177: LD_EXP 106
24181: PUSH
24182: LD_EXP 107
24186: PUSH
24187: LD_EXP 108
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: ST_TO_ADDR
// tmp :=  ;
24248: LD_ADDR_VAR 0 3
24252: PUSH
24253: LD_STRING 
24255: ST_TO_ADDR
// for i = 1 to normalCounter do
24256: LD_ADDR_VAR 0 8
24260: PUSH
24261: DOUBLE
24262: LD_INT 1
24264: DEC
24265: ST_TO_ADDR
24266: LD_EXP 53
24270: PUSH
24271: FOR_TO
24272: IFFALSE 24308
// begin if flags [ i ] then
24274: LD_VAR 0 4
24278: PUSH
24279: LD_VAR 0 8
24283: ARRAY
24284: IFFALSE 24306
// tmp := tmp & i & ; ;
24286: LD_ADDR_VAR 0 3
24290: PUSH
24291: LD_VAR 0 3
24295: PUSH
24296: LD_VAR 0 8
24300: STR
24301: PUSH
24302: LD_STRING ;
24304: STR
24305: ST_TO_ADDR
// end ;
24306: GO 24271
24308: POP
24309: POP
// for i = 1 to hardcoreCounter do
24310: LD_ADDR_VAR 0 8
24314: PUSH
24315: DOUBLE
24316: LD_INT 1
24318: DEC
24319: ST_TO_ADDR
24320: LD_EXP 54
24324: PUSH
24325: FOR_TO
24326: IFFALSE 24372
// begin if flags [ normalCounter + i ] then
24328: LD_VAR 0 4
24332: PUSH
24333: LD_EXP 53
24337: PUSH
24338: LD_VAR 0 8
24342: PLUS
24343: ARRAY
24344: IFFALSE 24370
// tmp := tmp & ( 100 + i ) & ; ;
24346: LD_ADDR_VAR 0 3
24350: PUSH
24351: LD_VAR 0 3
24355: PUSH
24356: LD_INT 100
24358: PUSH
24359: LD_VAR 0 8
24363: PLUS
24364: STR
24365: PUSH
24366: LD_STRING ;
24368: STR
24369: ST_TO_ADDR
// end ;
24370: GO 24325
24372: POP
24373: POP
// if tmp then
24374: LD_VAR 0 3
24378: IFFALSE 24390
// active := tmp ;
24380: LD_ADDR_VAR 0 7
24384: PUSH
24385: LD_VAR 0 3
24389: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24390: LD_STRING getStreamItemsFromMission("
24392: PUSH
24393: LD_VAR 0 5
24397: STR
24398: PUSH
24399: LD_STRING ","
24401: STR
24402: PUSH
24403: LD_VAR 0 6
24407: STR
24408: PUSH
24409: LD_STRING ","
24411: STR
24412: PUSH
24413: LD_VAR 0 7
24417: STR
24418: PUSH
24419: LD_STRING ")
24421: STR
24422: PPUSH
24423: CALL_OW 559
// end else
24427: GO 24436
// ToLua ( getStreamItemsFromMission("","","") ) ;
24429: LD_STRING getStreamItemsFromMission("","","")
24431: PPUSH
24432: CALL_OW 559
// end ;
24436: LD_VAR 0 2
24440: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24441: LD_EXP 52
24445: PUSH
24446: LD_EXP 57
24450: AND
24451: IFFALSE 24575
24453: GO 24455
24455: DISABLE
24456: LD_INT 0
24458: PPUSH
24459: PPUSH
// begin enable ;
24460: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24461: LD_ADDR_VAR 0 2
24465: PUSH
24466: LD_INT 22
24468: PUSH
24469: LD_OWVAR 2
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 2
24480: PUSH
24481: LD_INT 34
24483: PUSH
24484: LD_INT 7
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 34
24493: PUSH
24494: LD_INT 45
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 34
24503: PUSH
24504: LD_INT 28
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 34
24513: PUSH
24514: LD_INT 47
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PPUSH
24532: CALL_OW 69
24536: ST_TO_ADDR
// if not tmp then
24537: LD_VAR 0 2
24541: NOT
24542: IFFALSE 24546
// exit ;
24544: GO 24575
// for i in tmp do
24546: LD_ADDR_VAR 0 1
24550: PUSH
24551: LD_VAR 0 2
24555: PUSH
24556: FOR_IN
24557: IFFALSE 24573
// begin SetLives ( i , 0 ) ;
24559: LD_VAR 0 1
24563: PPUSH
24564: LD_INT 0
24566: PPUSH
24567: CALL_OW 234
// end ;
24571: GO 24556
24573: POP
24574: POP
// end ;
24575: PPOPN 2
24577: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24578: LD_EXP 52
24582: PUSH
24583: LD_EXP 58
24587: AND
24588: IFFALSE 24672
24590: GO 24592
24592: DISABLE
24593: LD_INT 0
24595: PPUSH
24596: PPUSH
// begin enable ;
24597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24598: LD_ADDR_VAR 0 2
24602: PUSH
24603: LD_INT 22
24605: PUSH
24606: LD_OWVAR 2
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 32
24617: PUSH
24618: LD_INT 3
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PPUSH
24629: CALL_OW 69
24633: ST_TO_ADDR
// if not tmp then
24634: LD_VAR 0 2
24638: NOT
24639: IFFALSE 24643
// exit ;
24641: GO 24672
// for i in tmp do
24643: LD_ADDR_VAR 0 1
24647: PUSH
24648: LD_VAR 0 2
24652: PUSH
24653: FOR_IN
24654: IFFALSE 24670
// begin SetLives ( i , 0 ) ;
24656: LD_VAR 0 1
24660: PPUSH
24661: LD_INT 0
24663: PPUSH
24664: CALL_OW 234
// end ;
24668: GO 24653
24670: POP
24671: POP
// end ;
24672: PPOPN 2
24674: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24675: LD_EXP 52
24679: PUSH
24680: LD_EXP 55
24684: AND
24685: IFFALSE 24778
24687: GO 24689
24689: DISABLE
24690: LD_INT 0
24692: PPUSH
// begin enable ;
24693: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24694: LD_ADDR_VAR 0 1
24698: PUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 2
24713: PUSH
24714: LD_INT 25
24716: PUSH
24717: LD_INT 5
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 25
24726: PUSH
24727: LD_INT 9
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 25
24736: PUSH
24737: LD_INT 8
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PPUSH
24754: CALL_OW 69
24758: PUSH
24759: FOR_IN
24760: IFFALSE 24776
// begin SetClass ( i , 1 ) ;
24762: LD_VAR 0 1
24766: PPUSH
24767: LD_INT 1
24769: PPUSH
24770: CALL_OW 336
// end ;
24774: GO 24759
24776: POP
24777: POP
// end ;
24778: PPOPN 1
24780: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24781: LD_EXP 52
24785: PUSH
24786: LD_EXP 56
24790: AND
24791: PUSH
24792: LD_OWVAR 65
24796: PUSH
24797: LD_INT 7
24799: LESS
24800: AND
24801: IFFALSE 24815
24803: GO 24805
24805: DISABLE
// begin enable ;
24806: ENABLE
// game_speed := 7 ;
24807: LD_ADDR_OWVAR 65
24811: PUSH
24812: LD_INT 7
24814: ST_TO_ADDR
// end ;
24815: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24816: LD_EXP 52
24820: PUSH
24821: LD_EXP 59
24825: AND
24826: IFFALSE 25028
24828: GO 24830
24830: DISABLE
24831: LD_INT 0
24833: PPUSH
24834: PPUSH
24835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24836: LD_ADDR_VAR 0 3
24840: PUSH
24841: LD_INT 81
24843: PUSH
24844: LD_OWVAR 2
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 21
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PPUSH
24867: CALL_OW 69
24871: ST_TO_ADDR
// if not tmp then
24872: LD_VAR 0 3
24876: NOT
24877: IFFALSE 24881
// exit ;
24879: GO 25028
// if tmp > 5 then
24881: LD_VAR 0 3
24885: PUSH
24886: LD_INT 5
24888: GREATER
24889: IFFALSE 24901
// k := 5 else
24891: LD_ADDR_VAR 0 2
24895: PUSH
24896: LD_INT 5
24898: ST_TO_ADDR
24899: GO 24911
// k := tmp ;
24901: LD_ADDR_VAR 0 2
24905: PUSH
24906: LD_VAR 0 3
24910: ST_TO_ADDR
// for i := 1 to k do
24911: LD_ADDR_VAR 0 1
24915: PUSH
24916: DOUBLE
24917: LD_INT 1
24919: DEC
24920: ST_TO_ADDR
24921: LD_VAR 0 2
24925: PUSH
24926: FOR_TO
24927: IFFALSE 25026
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24929: LD_VAR 0 3
24933: PUSH
24934: LD_VAR 0 1
24938: ARRAY
24939: PPUSH
24940: LD_VAR 0 1
24944: PUSH
24945: LD_INT 4
24947: MOD
24948: PUSH
24949: LD_INT 1
24951: PLUS
24952: PPUSH
24953: CALL_OW 259
24957: PUSH
24958: LD_INT 10
24960: LESS
24961: IFFALSE 25024
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24963: LD_VAR 0 3
24967: PUSH
24968: LD_VAR 0 1
24972: ARRAY
24973: PPUSH
24974: LD_VAR 0 1
24978: PUSH
24979: LD_INT 4
24981: MOD
24982: PUSH
24983: LD_INT 1
24985: PLUS
24986: PPUSH
24987: LD_VAR 0 3
24991: PUSH
24992: LD_VAR 0 1
24996: ARRAY
24997: PPUSH
24998: LD_VAR 0 1
25002: PUSH
25003: LD_INT 4
25005: MOD
25006: PUSH
25007: LD_INT 1
25009: PLUS
25010: PPUSH
25011: CALL_OW 259
25015: PUSH
25016: LD_INT 1
25018: PLUS
25019: PPUSH
25020: CALL_OW 237
25024: GO 24926
25026: POP
25027: POP
// end ;
25028: PPOPN 3
25030: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25031: LD_EXP 52
25035: PUSH
25036: LD_EXP 60
25040: AND
25041: IFFALSE 25061
25043: GO 25045
25045: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25046: LD_INT 4
25048: PPUSH
25049: LD_OWVAR 2
25053: PPUSH
25054: LD_INT 0
25056: PPUSH
25057: CALL_OW 324
25061: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25062: LD_EXP 52
25066: PUSH
25067: LD_EXP 89
25071: AND
25072: IFFALSE 25092
25074: GO 25076
25076: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25077: LD_INT 19
25079: PPUSH
25080: LD_OWVAR 2
25084: PPUSH
25085: LD_INT 0
25087: PPUSH
25088: CALL_OW 324
25092: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25093: LD_EXP 52
25097: PUSH
25098: LD_EXP 61
25102: AND
25103: IFFALSE 25205
25105: GO 25107
25107: DISABLE
25108: LD_INT 0
25110: PPUSH
25111: PPUSH
// begin enable ;
25112: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25113: LD_ADDR_VAR 0 2
25117: PUSH
25118: LD_INT 22
25120: PUSH
25121: LD_OWVAR 2
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 34
25135: PUSH
25136: LD_INT 11
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 34
25145: PUSH
25146: LD_INT 30
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: LIST
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PPUSH
25162: CALL_OW 69
25166: ST_TO_ADDR
// if not tmp then
25167: LD_VAR 0 2
25171: NOT
25172: IFFALSE 25176
// exit ;
25174: GO 25205
// for i in tmp do
25176: LD_ADDR_VAR 0 1
25180: PUSH
25181: LD_VAR 0 2
25185: PUSH
25186: FOR_IN
25187: IFFALSE 25203
// begin SetLives ( i , 0 ) ;
25189: LD_VAR 0 1
25193: PPUSH
25194: LD_INT 0
25196: PPUSH
25197: CALL_OW 234
// end ;
25201: GO 25186
25203: POP
25204: POP
// end ;
25205: PPOPN 2
25207: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25208: LD_EXP 52
25212: PUSH
25213: LD_EXP 62
25217: AND
25218: IFFALSE 25238
25220: GO 25222
25222: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25223: LD_INT 32
25225: PPUSH
25226: LD_OWVAR 2
25230: PPUSH
25231: LD_INT 0
25233: PPUSH
25234: CALL_OW 324
25238: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25239: LD_EXP 52
25243: PUSH
25244: LD_EXP 63
25248: AND
25249: IFFALSE 25430
25251: GO 25253
25253: DISABLE
25254: LD_INT 0
25256: PPUSH
25257: PPUSH
25258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25259: LD_ADDR_VAR 0 2
25263: PUSH
25264: LD_INT 22
25266: PUSH
25267: LD_OWVAR 2
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 33
25278: PUSH
25279: LD_INT 3
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PPUSH
25290: CALL_OW 69
25294: ST_TO_ADDR
// if not tmp then
25295: LD_VAR 0 2
25299: NOT
25300: IFFALSE 25304
// exit ;
25302: GO 25430
// side := 0 ;
25304: LD_ADDR_VAR 0 3
25308: PUSH
25309: LD_INT 0
25311: ST_TO_ADDR
// for i := 1 to 8 do
25312: LD_ADDR_VAR 0 1
25316: PUSH
25317: DOUBLE
25318: LD_INT 1
25320: DEC
25321: ST_TO_ADDR
25322: LD_INT 8
25324: PUSH
25325: FOR_TO
25326: IFFALSE 25374
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25328: LD_OWVAR 2
25332: PUSH
25333: LD_VAR 0 1
25337: NONEQUAL
25338: PUSH
25339: LD_OWVAR 2
25343: PPUSH
25344: LD_VAR 0 1
25348: PPUSH
25349: CALL_OW 81
25353: PUSH
25354: LD_INT 2
25356: EQUAL
25357: AND
25358: IFFALSE 25372
// begin side := i ;
25360: LD_ADDR_VAR 0 3
25364: PUSH
25365: LD_VAR 0 1
25369: ST_TO_ADDR
// break ;
25370: GO 25374
// end ;
25372: GO 25325
25374: POP
25375: POP
// if not side then
25376: LD_VAR 0 3
25380: NOT
25381: IFFALSE 25385
// exit ;
25383: GO 25430
// for i := 1 to tmp do
25385: LD_ADDR_VAR 0 1
25389: PUSH
25390: DOUBLE
25391: LD_INT 1
25393: DEC
25394: ST_TO_ADDR
25395: LD_VAR 0 2
25399: PUSH
25400: FOR_TO
25401: IFFALSE 25428
// if Prob ( 60 ) then
25403: LD_INT 60
25405: PPUSH
25406: CALL_OW 13
25410: IFFALSE 25426
// SetSide ( i , side ) ;
25412: LD_VAR 0 1
25416: PPUSH
25417: LD_VAR 0 3
25421: PPUSH
25422: CALL_OW 235
25426: GO 25400
25428: POP
25429: POP
// end ;
25430: PPOPN 3
25432: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25433: LD_EXP 52
25437: PUSH
25438: LD_EXP 65
25442: AND
25443: IFFALSE 25562
25445: GO 25447
25447: DISABLE
25448: LD_INT 0
25450: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25451: LD_ADDR_VAR 0 1
25455: PUSH
25456: LD_INT 22
25458: PUSH
25459: LD_OWVAR 2
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 21
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 3
25480: PUSH
25481: LD_INT 23
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: PPUSH
25500: CALL_OW 69
25504: PUSH
25505: FOR_IN
25506: IFFALSE 25560
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25508: LD_VAR 0 1
25512: PPUSH
25513: CALL_OW 257
25517: PUSH
25518: LD_INT 1
25520: PUSH
25521: LD_INT 2
25523: PUSH
25524: LD_INT 3
25526: PUSH
25527: LD_INT 4
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: IN
25536: IFFALSE 25558
// SetClass ( un , rand ( 1 , 4 ) ) ;
25538: LD_VAR 0 1
25542: PPUSH
25543: LD_INT 1
25545: PPUSH
25546: LD_INT 4
25548: PPUSH
25549: CALL_OW 12
25553: PPUSH
25554: CALL_OW 336
25558: GO 25505
25560: POP
25561: POP
// end ;
25562: PPOPN 1
25564: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25565: LD_EXP 52
25569: PUSH
25570: LD_EXP 64
25574: AND
25575: IFFALSE 25654
25577: GO 25579
25579: DISABLE
25580: LD_INT 0
25582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25583: LD_ADDR_VAR 0 1
25587: PUSH
25588: LD_INT 22
25590: PUSH
25591: LD_OWVAR 2
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 21
25602: PUSH
25603: LD_INT 3
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PPUSH
25614: CALL_OW 69
25618: ST_TO_ADDR
// if not tmp then
25619: LD_VAR 0 1
25623: NOT
25624: IFFALSE 25628
// exit ;
25626: GO 25654
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25628: LD_VAR 0 1
25632: PUSH
25633: LD_INT 1
25635: PPUSH
25636: LD_VAR 0 1
25640: PPUSH
25641: CALL_OW 12
25645: ARRAY
25646: PPUSH
25647: LD_INT 100
25649: PPUSH
25650: CALL_OW 234
// end ;
25654: PPOPN 1
25656: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25657: LD_EXP 52
25661: PUSH
25662: LD_EXP 66
25666: AND
25667: IFFALSE 25765
25669: GO 25671
25671: DISABLE
25672: LD_INT 0
25674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25675: LD_ADDR_VAR 0 1
25679: PUSH
25680: LD_INT 22
25682: PUSH
25683: LD_OWVAR 2
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 21
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PPUSH
25706: CALL_OW 69
25710: ST_TO_ADDR
// if not tmp then
25711: LD_VAR 0 1
25715: NOT
25716: IFFALSE 25720
// exit ;
25718: GO 25765
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25720: LD_VAR 0 1
25724: PUSH
25725: LD_INT 1
25727: PPUSH
25728: LD_VAR 0 1
25732: PPUSH
25733: CALL_OW 12
25737: ARRAY
25738: PPUSH
25739: LD_INT 1
25741: PPUSH
25742: LD_INT 4
25744: PPUSH
25745: CALL_OW 12
25749: PPUSH
25750: LD_INT 3000
25752: PPUSH
25753: LD_INT 9000
25755: PPUSH
25756: CALL_OW 12
25760: PPUSH
25761: CALL_OW 492
// end ;
25765: PPOPN 1
25767: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25768: LD_EXP 52
25772: PUSH
25773: LD_EXP 67
25777: AND
25778: IFFALSE 25798
25780: GO 25782
25782: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25783: LD_INT 1
25785: PPUSH
25786: LD_OWVAR 2
25790: PPUSH
25791: LD_INT 0
25793: PPUSH
25794: CALL_OW 324
25798: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25799: LD_EXP 52
25803: PUSH
25804: LD_EXP 68
25808: AND
25809: IFFALSE 25892
25811: GO 25813
25813: DISABLE
25814: LD_INT 0
25816: PPUSH
25817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25818: LD_ADDR_VAR 0 2
25822: PUSH
25823: LD_INT 22
25825: PUSH
25826: LD_OWVAR 2
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 21
25837: PUSH
25838: LD_INT 3
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PPUSH
25849: CALL_OW 69
25853: ST_TO_ADDR
// if not tmp then
25854: LD_VAR 0 2
25858: NOT
25859: IFFALSE 25863
// exit ;
25861: GO 25892
// for i in tmp do
25863: LD_ADDR_VAR 0 1
25867: PUSH
25868: LD_VAR 0 2
25872: PUSH
25873: FOR_IN
25874: IFFALSE 25890
// SetBLevel ( i , 10 ) ;
25876: LD_VAR 0 1
25880: PPUSH
25881: LD_INT 10
25883: PPUSH
25884: CALL_OW 241
25888: GO 25873
25890: POP
25891: POP
// end ;
25892: PPOPN 2
25894: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25895: LD_EXP 52
25899: PUSH
25900: LD_EXP 69
25904: AND
25905: IFFALSE 26016
25907: GO 25909
25909: DISABLE
25910: LD_INT 0
25912: PPUSH
25913: PPUSH
25914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25915: LD_ADDR_VAR 0 3
25919: PUSH
25920: LD_INT 22
25922: PUSH
25923: LD_OWVAR 2
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 25
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PPUSH
25946: CALL_OW 69
25950: ST_TO_ADDR
// if not tmp then
25951: LD_VAR 0 3
25955: NOT
25956: IFFALSE 25960
// exit ;
25958: GO 26016
// un := tmp [ rand ( 1 , tmp ) ] ;
25960: LD_ADDR_VAR 0 2
25964: PUSH
25965: LD_VAR 0 3
25969: PUSH
25970: LD_INT 1
25972: PPUSH
25973: LD_VAR 0 3
25977: PPUSH
25978: CALL_OW 12
25982: ARRAY
25983: ST_TO_ADDR
// if Crawls ( un ) then
25984: LD_VAR 0 2
25988: PPUSH
25989: CALL_OW 318
25993: IFFALSE 26004
// ComWalk ( un ) ;
25995: LD_VAR 0 2
25999: PPUSH
26000: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26004: LD_VAR 0 2
26008: PPUSH
26009: LD_INT 5
26011: PPUSH
26012: CALL_OW 336
// end ;
26016: PPOPN 3
26018: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26019: LD_EXP 52
26023: PUSH
26024: LD_EXP 70
26028: AND
26029: PUSH
26030: LD_OWVAR 67
26034: PUSH
26035: LD_INT 4
26037: LESS
26038: AND
26039: IFFALSE 26058
26041: GO 26043
26043: DISABLE
// begin Difficulty := Difficulty + 1 ;
26044: LD_ADDR_OWVAR 67
26048: PUSH
26049: LD_OWVAR 67
26053: PUSH
26054: LD_INT 1
26056: PLUS
26057: ST_TO_ADDR
// end ;
26058: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26059: LD_EXP 52
26063: PUSH
26064: LD_EXP 71
26068: AND
26069: IFFALSE 26172
26071: GO 26073
26073: DISABLE
26074: LD_INT 0
26076: PPUSH
// begin for i := 1 to 5 do
26077: LD_ADDR_VAR 0 1
26081: PUSH
26082: DOUBLE
26083: LD_INT 1
26085: DEC
26086: ST_TO_ADDR
26087: LD_INT 5
26089: PUSH
26090: FOR_TO
26091: IFFALSE 26170
// begin uc_nation := nation_nature ;
26093: LD_ADDR_OWVAR 21
26097: PUSH
26098: LD_INT 0
26100: ST_TO_ADDR
// uc_side := 0 ;
26101: LD_ADDR_OWVAR 20
26105: PUSH
26106: LD_INT 0
26108: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26109: LD_ADDR_OWVAR 29
26113: PUSH
26114: LD_INT 12
26116: PUSH
26117: LD_INT 12
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: ST_TO_ADDR
// hc_agressivity := 20 ;
26124: LD_ADDR_OWVAR 35
26128: PUSH
26129: LD_INT 20
26131: ST_TO_ADDR
// hc_class := class_tiger ;
26132: LD_ADDR_OWVAR 28
26136: PUSH
26137: LD_INT 14
26139: ST_TO_ADDR
// hc_gallery :=  ;
26140: LD_ADDR_OWVAR 33
26144: PUSH
26145: LD_STRING 
26147: ST_TO_ADDR
// hc_name :=  ;
26148: LD_ADDR_OWVAR 26
26152: PUSH
26153: LD_STRING 
26155: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26156: CALL_OW 44
26160: PPUSH
26161: LD_INT 0
26163: PPUSH
26164: CALL_OW 51
// end ;
26168: GO 26090
26170: POP
26171: POP
// end ;
26172: PPOPN 1
26174: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26175: LD_EXP 52
26179: PUSH
26180: LD_EXP 72
26184: AND
26185: IFFALSE 26194
26187: GO 26189
26189: DISABLE
// StreamSibBomb ;
26190: CALL 26195 0 0
26194: END
// export function StreamSibBomb ; var i , x , y ; begin
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
// result := false ;
26201: LD_ADDR_VAR 0 1
26205: PUSH
26206: LD_INT 0
26208: ST_TO_ADDR
// for i := 1 to 16 do
26209: LD_ADDR_VAR 0 2
26213: PUSH
26214: DOUBLE
26215: LD_INT 1
26217: DEC
26218: ST_TO_ADDR
26219: LD_INT 16
26221: PUSH
26222: FOR_TO
26223: IFFALSE 26422
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26225: LD_ADDR_VAR 0 3
26229: PUSH
26230: LD_INT 10
26232: PUSH
26233: LD_INT 20
26235: PUSH
26236: LD_INT 30
26238: PUSH
26239: LD_INT 40
26241: PUSH
26242: LD_INT 50
26244: PUSH
26245: LD_INT 60
26247: PUSH
26248: LD_INT 70
26250: PUSH
26251: LD_INT 80
26253: PUSH
26254: LD_INT 90
26256: PUSH
26257: LD_INT 100
26259: PUSH
26260: LD_INT 110
26262: PUSH
26263: LD_INT 120
26265: PUSH
26266: LD_INT 130
26268: PUSH
26269: LD_INT 140
26271: PUSH
26272: LD_INT 150
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: PPUSH
26295: LD_INT 15
26297: PPUSH
26298: CALL_OW 12
26302: ARRAY
26303: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26304: LD_ADDR_VAR 0 4
26308: PUSH
26309: LD_INT 10
26311: PUSH
26312: LD_INT 20
26314: PUSH
26315: LD_INT 30
26317: PUSH
26318: LD_INT 40
26320: PUSH
26321: LD_INT 50
26323: PUSH
26324: LD_INT 60
26326: PUSH
26327: LD_INT 70
26329: PUSH
26330: LD_INT 80
26332: PUSH
26333: LD_INT 90
26335: PUSH
26336: LD_INT 100
26338: PUSH
26339: LD_INT 110
26341: PUSH
26342: LD_INT 120
26344: PUSH
26345: LD_INT 130
26347: PUSH
26348: LD_INT 140
26350: PUSH
26351: LD_INT 150
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: PPUSH
26374: LD_INT 15
26376: PPUSH
26377: CALL_OW 12
26381: ARRAY
26382: ST_TO_ADDR
// if ValidHex ( x , y ) then
26383: LD_VAR 0 3
26387: PPUSH
26388: LD_VAR 0 4
26392: PPUSH
26393: CALL_OW 488
26397: IFFALSE 26420
// begin result := [ x , y ] ;
26399: LD_ADDR_VAR 0 1
26403: PUSH
26404: LD_VAR 0 3
26408: PUSH
26409: LD_VAR 0 4
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: ST_TO_ADDR
// break ;
26418: GO 26422
// end ; end ;
26420: GO 26222
26422: POP
26423: POP
// if result then
26424: LD_VAR 0 1
26428: IFFALSE 26488
// begin ToLua ( playSibBomb() ) ;
26430: LD_STRING playSibBomb()
26432: PPUSH
26433: CALL_OW 559
// wait ( 0 0$14 ) ;
26437: LD_INT 490
26439: PPUSH
26440: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26444: LD_VAR 0 1
26448: PUSH
26449: LD_INT 1
26451: ARRAY
26452: PPUSH
26453: LD_VAR 0 1
26457: PUSH
26458: LD_INT 2
26460: ARRAY
26461: PPUSH
26462: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26466: LD_VAR 0 1
26470: PUSH
26471: LD_INT 1
26473: ARRAY
26474: PPUSH
26475: LD_VAR 0 1
26479: PUSH
26480: LD_INT 2
26482: ARRAY
26483: PPUSH
26484: CALL_OW 429
// end ; end ;
26488: LD_VAR 0 1
26492: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26493: LD_EXP 52
26497: PUSH
26498: LD_EXP 74
26502: AND
26503: IFFALSE 26515
26505: GO 26507
26507: DISABLE
// YouLost (  ) ;
26508: LD_STRING 
26510: PPUSH
26511: CALL_OW 104
26515: END
// every 0 0$1 trigger StreamModeActive and sFog do
26516: LD_EXP 52
26520: PUSH
26521: LD_EXP 73
26525: AND
26526: IFFALSE 26540
26528: GO 26530
26530: DISABLE
// FogOff ( your_side ) ;
26531: LD_OWVAR 2
26535: PPUSH
26536: CALL_OW 344
26540: END
// every 0 0$1 trigger StreamModeActive and sSun do
26541: LD_EXP 52
26545: PUSH
26546: LD_EXP 75
26550: AND
26551: IFFALSE 26579
26553: GO 26555
26555: DISABLE
// begin solar_recharge_percent := 0 ;
26556: LD_ADDR_OWVAR 79
26560: PUSH
26561: LD_INT 0
26563: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26564: LD_INT 10500
26566: PPUSH
26567: CALL_OW 67
// solar_recharge_percent := 100 ;
26571: LD_ADDR_OWVAR 79
26575: PUSH
26576: LD_INT 100
26578: ST_TO_ADDR
// end ;
26579: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26580: LD_EXP 52
26584: PUSH
26585: LD_EXP 76
26589: AND
26590: IFFALSE 26829
26592: GO 26594
26594: DISABLE
26595: LD_INT 0
26597: PPUSH
26598: PPUSH
26599: PPUSH
// begin tmp := [ ] ;
26600: LD_ADDR_VAR 0 3
26604: PUSH
26605: EMPTY
26606: ST_TO_ADDR
// for i := 1 to 6 do
26607: LD_ADDR_VAR 0 1
26611: PUSH
26612: DOUBLE
26613: LD_INT 1
26615: DEC
26616: ST_TO_ADDR
26617: LD_INT 6
26619: PUSH
26620: FOR_TO
26621: IFFALSE 26726
// begin uc_nation := nation_nature ;
26623: LD_ADDR_OWVAR 21
26627: PUSH
26628: LD_INT 0
26630: ST_TO_ADDR
// uc_side := 0 ;
26631: LD_ADDR_OWVAR 20
26635: PUSH
26636: LD_INT 0
26638: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26639: LD_ADDR_OWVAR 29
26643: PUSH
26644: LD_INT 12
26646: PUSH
26647: LD_INT 12
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: ST_TO_ADDR
// hc_agressivity := 20 ;
26654: LD_ADDR_OWVAR 35
26658: PUSH
26659: LD_INT 20
26661: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26662: LD_ADDR_OWVAR 28
26666: PUSH
26667: LD_INT 17
26669: ST_TO_ADDR
// hc_gallery :=  ;
26670: LD_ADDR_OWVAR 33
26674: PUSH
26675: LD_STRING 
26677: ST_TO_ADDR
// hc_name :=  ;
26678: LD_ADDR_OWVAR 26
26682: PUSH
26683: LD_STRING 
26685: ST_TO_ADDR
// un := CreateHuman ;
26686: LD_ADDR_VAR 0 2
26690: PUSH
26691: CALL_OW 44
26695: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26696: LD_VAR 0 2
26700: PPUSH
26701: LD_INT 1
26703: PPUSH
26704: CALL_OW 51
// tmp := tmp ^ un ;
26708: LD_ADDR_VAR 0 3
26712: PUSH
26713: LD_VAR 0 3
26717: PUSH
26718: LD_VAR 0 2
26722: ADD
26723: ST_TO_ADDR
// end ;
26724: GO 26620
26726: POP
26727: POP
// repeat wait ( 0 0$1 ) ;
26728: LD_INT 35
26730: PPUSH
26731: CALL_OW 67
// for un in tmp do
26735: LD_ADDR_VAR 0 2
26739: PUSH
26740: LD_VAR 0 3
26744: PUSH
26745: FOR_IN
26746: IFFALSE 26820
// begin if IsDead ( un ) then
26748: LD_VAR 0 2
26752: PPUSH
26753: CALL_OW 301
26757: IFFALSE 26777
// begin tmp := tmp diff un ;
26759: LD_ADDR_VAR 0 3
26763: PUSH
26764: LD_VAR 0 3
26768: PUSH
26769: LD_VAR 0 2
26773: DIFF
26774: ST_TO_ADDR
// continue ;
26775: GO 26745
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26777: LD_VAR 0 2
26781: PPUSH
26782: LD_INT 3
26784: PUSH
26785: LD_INT 22
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PPUSH
26799: CALL_OW 69
26803: PPUSH
26804: LD_VAR 0 2
26808: PPUSH
26809: CALL_OW 74
26813: PPUSH
26814: CALL_OW 115
// end ;
26818: GO 26745
26820: POP
26821: POP
// until not tmp ;
26822: LD_VAR 0 3
26826: NOT
26827: IFFALSE 26728
// end ;
26829: PPOPN 3
26831: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26832: LD_EXP 52
26836: PUSH
26837: LD_EXP 77
26841: AND
26842: IFFALSE 26896
26844: GO 26846
26846: DISABLE
// begin ToLua ( displayTroll(); ) ;
26847: LD_STRING displayTroll();
26849: PPUSH
26850: CALL_OW 559
// wait ( 3 3$00 ) ;
26854: LD_INT 6300
26856: PPUSH
26857: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26861: LD_STRING hideTroll();
26863: PPUSH
26864: CALL_OW 559
// wait ( 1 1$00 ) ;
26868: LD_INT 2100
26870: PPUSH
26871: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26875: LD_STRING displayTroll();
26877: PPUSH
26878: CALL_OW 559
// wait ( 1 1$00 ) ;
26882: LD_INT 2100
26884: PPUSH
26885: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26889: LD_STRING hideTroll();
26891: PPUSH
26892: CALL_OW 559
// end ;
26896: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26897: LD_EXP 52
26901: PUSH
26902: LD_EXP 78
26906: AND
26907: IFFALSE 26970
26909: GO 26911
26911: DISABLE
26912: LD_INT 0
26914: PPUSH
// begin p := 0 ;
26915: LD_ADDR_VAR 0 1
26919: PUSH
26920: LD_INT 0
26922: ST_TO_ADDR
// repeat game_speed := 1 ;
26923: LD_ADDR_OWVAR 65
26927: PUSH
26928: LD_INT 1
26930: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26931: LD_INT 35
26933: PPUSH
26934: CALL_OW 67
// p := p + 1 ;
26938: LD_ADDR_VAR 0 1
26942: PUSH
26943: LD_VAR 0 1
26947: PUSH
26948: LD_INT 1
26950: PLUS
26951: ST_TO_ADDR
// until p >= 60 ;
26952: LD_VAR 0 1
26956: PUSH
26957: LD_INT 60
26959: GREATEREQUAL
26960: IFFALSE 26923
// game_speed := 4 ;
26962: LD_ADDR_OWVAR 65
26966: PUSH
26967: LD_INT 4
26969: ST_TO_ADDR
// end ;
26970: PPOPN 1
26972: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26973: LD_EXP 52
26977: PUSH
26978: LD_EXP 79
26982: AND
26983: IFFALSE 27129
26985: GO 26987
26987: DISABLE
26988: LD_INT 0
26990: PPUSH
26991: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26992: LD_ADDR_VAR 0 1
26996: PUSH
26997: LD_INT 22
26999: PUSH
27000: LD_OWVAR 2
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 2
27011: PUSH
27012: LD_INT 30
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 30
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PPUSH
27041: CALL_OW 69
27045: ST_TO_ADDR
// if not depot then
27046: LD_VAR 0 1
27050: NOT
27051: IFFALSE 27055
// exit ;
27053: GO 27129
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27055: LD_ADDR_VAR 0 2
27059: PUSH
27060: LD_VAR 0 1
27064: PUSH
27065: LD_INT 1
27067: PPUSH
27068: LD_VAR 0 1
27072: PPUSH
27073: CALL_OW 12
27077: ARRAY
27078: PPUSH
27079: CALL_OW 274
27083: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27084: LD_VAR 0 2
27088: PPUSH
27089: LD_INT 1
27091: PPUSH
27092: LD_INT 0
27094: PPUSH
27095: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27099: LD_VAR 0 2
27103: PPUSH
27104: LD_INT 2
27106: PPUSH
27107: LD_INT 0
27109: PPUSH
27110: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27114: LD_VAR 0 2
27118: PPUSH
27119: LD_INT 3
27121: PPUSH
27122: LD_INT 0
27124: PPUSH
27125: CALL_OW 277
// end ;
27129: PPOPN 2
27131: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27132: LD_EXP 52
27136: PUSH
27137: LD_EXP 80
27141: AND
27142: IFFALSE 27239
27144: GO 27146
27146: DISABLE
27147: LD_INT 0
27149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27150: LD_ADDR_VAR 0 1
27154: PUSH
27155: LD_INT 22
27157: PUSH
27158: LD_OWVAR 2
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 21
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 3
27179: PUSH
27180: LD_INT 23
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: LIST
27198: PPUSH
27199: CALL_OW 69
27203: ST_TO_ADDR
// if not tmp then
27204: LD_VAR 0 1
27208: NOT
27209: IFFALSE 27213
// exit ;
27211: GO 27239
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27213: LD_VAR 0 1
27217: PUSH
27218: LD_INT 1
27220: PPUSH
27221: LD_VAR 0 1
27225: PPUSH
27226: CALL_OW 12
27230: ARRAY
27231: PPUSH
27232: LD_INT 200
27234: PPUSH
27235: CALL_OW 234
// end ;
27239: PPOPN 1
27241: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27242: LD_EXP 52
27246: PUSH
27247: LD_EXP 81
27251: AND
27252: IFFALSE 27331
27254: GO 27256
27256: DISABLE
27257: LD_INT 0
27259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27260: LD_ADDR_VAR 0 1
27264: PUSH
27265: LD_INT 22
27267: PUSH
27268: LD_OWVAR 2
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 21
27279: PUSH
27280: LD_INT 2
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PPUSH
27291: CALL_OW 69
27295: ST_TO_ADDR
// if not tmp then
27296: LD_VAR 0 1
27300: NOT
27301: IFFALSE 27305
// exit ;
27303: GO 27331
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27305: LD_VAR 0 1
27309: PUSH
27310: LD_INT 1
27312: PPUSH
27313: LD_VAR 0 1
27317: PPUSH
27318: CALL_OW 12
27322: ARRAY
27323: PPUSH
27324: LD_INT 60
27326: PPUSH
27327: CALL_OW 234
// end ;
27331: PPOPN 1
27333: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27334: LD_EXP 52
27338: PUSH
27339: LD_EXP 82
27343: AND
27344: IFFALSE 27443
27346: GO 27348
27348: DISABLE
27349: LD_INT 0
27351: PPUSH
27352: PPUSH
// begin enable ;
27353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27354: LD_ADDR_VAR 0 1
27358: PUSH
27359: LD_INT 22
27361: PUSH
27362: LD_OWVAR 2
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 61
27373: PUSH
27374: EMPTY
27375: LIST
27376: PUSH
27377: LD_INT 33
27379: PUSH
27380: LD_INT 2
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: LIST
27391: PPUSH
27392: CALL_OW 69
27396: ST_TO_ADDR
// if not tmp then
27397: LD_VAR 0 1
27401: NOT
27402: IFFALSE 27406
// exit ;
27404: GO 27443
// for i in tmp do
27406: LD_ADDR_VAR 0 2
27410: PUSH
27411: LD_VAR 0 1
27415: PUSH
27416: FOR_IN
27417: IFFALSE 27441
// if IsControledBy ( i ) then
27419: LD_VAR 0 2
27423: PPUSH
27424: CALL_OW 312
27428: IFFALSE 27439
// ComUnlink ( i ) ;
27430: LD_VAR 0 2
27434: PPUSH
27435: CALL_OW 136
27439: GO 27416
27441: POP
27442: POP
// end ;
27443: PPOPN 2
27445: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27446: LD_EXP 52
27450: PUSH
27451: LD_EXP 83
27455: AND
27456: IFFALSE 27596
27458: GO 27460
27460: DISABLE
27461: LD_INT 0
27463: PPUSH
27464: PPUSH
// begin ToLua ( displayPowell(); ) ;
27465: LD_STRING displayPowell();
27467: PPUSH
27468: CALL_OW 559
// uc_side := 0 ;
27472: LD_ADDR_OWVAR 20
27476: PUSH
27477: LD_INT 0
27479: ST_TO_ADDR
// uc_nation := 2 ;
27480: LD_ADDR_OWVAR 21
27484: PUSH
27485: LD_INT 2
27487: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27488: LD_ADDR_OWVAR 37
27492: PUSH
27493: LD_INT 14
27495: ST_TO_ADDR
// vc_engine := engine_siberite ;
27496: LD_ADDR_OWVAR 39
27500: PUSH
27501: LD_INT 3
27503: ST_TO_ADDR
// vc_control := control_apeman ;
27504: LD_ADDR_OWVAR 38
27508: PUSH
27509: LD_INT 5
27511: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27512: LD_ADDR_OWVAR 40
27516: PUSH
27517: LD_INT 29
27519: ST_TO_ADDR
// un := CreateVehicle ;
27520: LD_ADDR_VAR 0 2
27524: PUSH
27525: CALL_OW 45
27529: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27530: LD_VAR 0 2
27534: PPUSH
27535: LD_INT 1
27537: PPUSH
27538: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27542: LD_INT 35
27544: PPUSH
27545: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27549: LD_VAR 0 2
27553: PPUSH
27554: LD_INT 22
27556: PUSH
27557: LD_OWVAR 2
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PPUSH
27566: CALL_OW 69
27570: PPUSH
27571: LD_VAR 0 2
27575: PPUSH
27576: CALL_OW 74
27580: PPUSH
27581: CALL_OW 115
// until IsDead ( un ) ;
27585: LD_VAR 0 2
27589: PPUSH
27590: CALL_OW 301
27594: IFFALSE 27542
// end ;
27596: PPOPN 2
27598: END
// every 0 0$1 trigger StreamModeActive and sStu do
27599: LD_EXP 52
27603: PUSH
27604: LD_EXP 91
27608: AND
27609: IFFALSE 27625
27611: GO 27613
27613: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27614: LD_STRING displayStucuk();
27616: PPUSH
27617: CALL_OW 559
// ResetFog ;
27621: CALL_OW 335
// end ;
27625: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27626: LD_EXP 52
27630: PUSH
27631: LD_EXP 84
27635: AND
27636: IFFALSE 27777
27638: GO 27640
27640: DISABLE
27641: LD_INT 0
27643: PPUSH
27644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27645: LD_ADDR_VAR 0 2
27649: PUSH
27650: LD_INT 22
27652: PUSH
27653: LD_OWVAR 2
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 21
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PPUSH
27676: CALL_OW 69
27680: ST_TO_ADDR
// if not tmp then
27681: LD_VAR 0 2
27685: NOT
27686: IFFALSE 27690
// exit ;
27688: GO 27777
// un := tmp [ rand ( 1 , tmp ) ] ;
27690: LD_ADDR_VAR 0 1
27694: PUSH
27695: LD_VAR 0 2
27699: PUSH
27700: LD_INT 1
27702: PPUSH
27703: LD_VAR 0 2
27707: PPUSH
27708: CALL_OW 12
27712: ARRAY
27713: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27714: LD_VAR 0 1
27718: PPUSH
27719: LD_INT 0
27721: PPUSH
27722: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27726: LD_VAR 0 1
27730: PPUSH
27731: LD_OWVAR 3
27735: PUSH
27736: LD_VAR 0 1
27740: DIFF
27741: PPUSH
27742: LD_VAR 0 1
27746: PPUSH
27747: CALL_OW 74
27751: PPUSH
27752: CALL_OW 115
// wait ( 0 0$20 ) ;
27756: LD_INT 700
27758: PPUSH
27759: CALL_OW 67
// SetSide ( un , your_side ) ;
27763: LD_VAR 0 1
27767: PPUSH
27768: LD_OWVAR 2
27772: PPUSH
27773: CALL_OW 235
// end ;
27777: PPOPN 2
27779: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27780: LD_EXP 52
27784: PUSH
27785: LD_EXP 85
27789: AND
27790: IFFALSE 27896
27792: GO 27794
27794: DISABLE
27795: LD_INT 0
27797: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27798: LD_ADDR_VAR 0 1
27802: PUSH
27803: LD_INT 22
27805: PUSH
27806: LD_OWVAR 2
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 2
27817: PUSH
27818: LD_INT 30
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 30
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PPUSH
27847: CALL_OW 69
27851: ST_TO_ADDR
// if not depot then
27852: LD_VAR 0 1
27856: NOT
27857: IFFALSE 27861
// exit ;
27859: GO 27896
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27861: LD_VAR 0 1
27865: PUSH
27866: LD_INT 1
27868: ARRAY
27869: PPUSH
27870: CALL_OW 250
27874: PPUSH
27875: LD_VAR 0 1
27879: PUSH
27880: LD_INT 1
27882: ARRAY
27883: PPUSH
27884: CALL_OW 251
27888: PPUSH
27889: LD_INT 70
27891: PPUSH
27892: CALL_OW 495
// end ;
27896: PPOPN 1
27898: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27899: LD_EXP 52
27903: PUSH
27904: LD_EXP 86
27908: AND
27909: IFFALSE 28120
27911: GO 27913
27913: DISABLE
27914: LD_INT 0
27916: PPUSH
27917: PPUSH
27918: PPUSH
27919: PPUSH
27920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27921: LD_ADDR_VAR 0 5
27925: PUSH
27926: LD_INT 22
27928: PUSH
27929: LD_OWVAR 2
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 21
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PPUSH
27952: CALL_OW 69
27956: ST_TO_ADDR
// if not tmp then
27957: LD_VAR 0 5
27961: NOT
27962: IFFALSE 27966
// exit ;
27964: GO 28120
// for i in tmp do
27966: LD_ADDR_VAR 0 1
27970: PUSH
27971: LD_VAR 0 5
27975: PUSH
27976: FOR_IN
27977: IFFALSE 28118
// begin d := rand ( 0 , 5 ) ;
27979: LD_ADDR_VAR 0 4
27983: PUSH
27984: LD_INT 0
27986: PPUSH
27987: LD_INT 5
27989: PPUSH
27990: CALL_OW 12
27994: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27995: LD_ADDR_VAR 0 2
27999: PUSH
28000: LD_VAR 0 1
28004: PPUSH
28005: CALL_OW 250
28009: PPUSH
28010: LD_VAR 0 4
28014: PPUSH
28015: LD_INT 3
28017: PPUSH
28018: LD_INT 12
28020: PPUSH
28021: CALL_OW 12
28025: PPUSH
28026: CALL_OW 272
28030: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28031: LD_ADDR_VAR 0 3
28035: PUSH
28036: LD_VAR 0 1
28040: PPUSH
28041: CALL_OW 251
28045: PPUSH
28046: LD_VAR 0 4
28050: PPUSH
28051: LD_INT 3
28053: PPUSH
28054: LD_INT 12
28056: PPUSH
28057: CALL_OW 12
28061: PPUSH
28062: CALL_OW 273
28066: ST_TO_ADDR
// if ValidHex ( x , y ) then
28067: LD_VAR 0 2
28071: PPUSH
28072: LD_VAR 0 3
28076: PPUSH
28077: CALL_OW 488
28081: IFFALSE 28116
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28083: LD_VAR 0 1
28087: PPUSH
28088: LD_VAR 0 2
28092: PPUSH
28093: LD_VAR 0 3
28097: PPUSH
28098: LD_INT 3
28100: PPUSH
28101: LD_INT 6
28103: PPUSH
28104: CALL_OW 12
28108: PPUSH
28109: LD_INT 1
28111: PPUSH
28112: CALL_OW 483
// end ;
28116: GO 27976
28118: POP
28119: POP
// end ;
28120: PPOPN 5
28122: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28123: LD_EXP 52
28127: PUSH
28128: LD_EXP 87
28132: AND
28133: IFFALSE 28227
28135: GO 28137
28137: DISABLE
28138: LD_INT 0
28140: PPUSH
28141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28142: LD_ADDR_VAR 0 2
28146: PUSH
28147: LD_INT 22
28149: PUSH
28150: LD_OWVAR 2
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 32
28161: PUSH
28162: LD_INT 1
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 21
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: LIST
28183: PPUSH
28184: CALL_OW 69
28188: ST_TO_ADDR
// if not tmp then
28189: LD_VAR 0 2
28193: NOT
28194: IFFALSE 28198
// exit ;
28196: GO 28227
// for i in tmp do
28198: LD_ADDR_VAR 0 1
28202: PUSH
28203: LD_VAR 0 2
28207: PUSH
28208: FOR_IN
28209: IFFALSE 28225
// SetFuel ( i , 0 ) ;
28211: LD_VAR 0 1
28215: PPUSH
28216: LD_INT 0
28218: PPUSH
28219: CALL_OW 240
28223: GO 28208
28225: POP
28226: POP
// end ;
28227: PPOPN 2
28229: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28230: LD_EXP 52
28234: PUSH
28235: LD_EXP 88
28239: AND
28240: IFFALSE 28306
28242: GO 28244
28244: DISABLE
28245: LD_INT 0
28247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28248: LD_ADDR_VAR 0 1
28252: PUSH
28253: LD_INT 22
28255: PUSH
28256: LD_OWVAR 2
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 30
28267: PUSH
28268: LD_INT 29
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PPUSH
28279: CALL_OW 69
28283: ST_TO_ADDR
// if not tmp then
28284: LD_VAR 0 1
28288: NOT
28289: IFFALSE 28293
// exit ;
28291: GO 28306
// DestroyUnit ( tmp [ 1 ] ) ;
28293: LD_VAR 0 1
28297: PUSH
28298: LD_INT 1
28300: ARRAY
28301: PPUSH
28302: CALL_OW 65
// end ;
28306: PPOPN 1
28308: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28309: LD_EXP 52
28313: PUSH
28314: LD_EXP 90
28318: AND
28319: IFFALSE 28448
28321: GO 28323
28323: DISABLE
28324: LD_INT 0
28326: PPUSH
// begin uc_side := 0 ;
28327: LD_ADDR_OWVAR 20
28331: PUSH
28332: LD_INT 0
28334: ST_TO_ADDR
// uc_nation := nation_arabian ;
28335: LD_ADDR_OWVAR 21
28339: PUSH
28340: LD_INT 2
28342: ST_TO_ADDR
// hc_gallery :=  ;
28343: LD_ADDR_OWVAR 33
28347: PUSH
28348: LD_STRING 
28350: ST_TO_ADDR
// hc_name :=  ;
28351: LD_ADDR_OWVAR 26
28355: PUSH
28356: LD_STRING 
28358: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28359: LD_INT 1
28361: PPUSH
28362: LD_INT 11
28364: PPUSH
28365: LD_INT 10
28367: PPUSH
28368: CALL_OW 380
// un := CreateHuman ;
28372: LD_ADDR_VAR 0 1
28376: PUSH
28377: CALL_OW 44
28381: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28382: LD_VAR 0 1
28386: PPUSH
28387: LD_INT 1
28389: PPUSH
28390: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28394: LD_INT 35
28396: PPUSH
28397: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28401: LD_VAR 0 1
28405: PPUSH
28406: LD_INT 22
28408: PUSH
28409: LD_OWVAR 2
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PPUSH
28418: CALL_OW 69
28422: PPUSH
28423: LD_VAR 0 1
28427: PPUSH
28428: CALL_OW 74
28432: PPUSH
28433: CALL_OW 115
// until IsDead ( un ) ;
28437: LD_VAR 0 1
28441: PPUSH
28442: CALL_OW 301
28446: IFFALSE 28394
// end ;
28448: PPOPN 1
28450: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28451: LD_EXP 52
28455: PUSH
28456: LD_EXP 92
28460: AND
28461: IFFALSE 28473
28463: GO 28465
28465: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28466: LD_STRING earthquake(getX(game), 0, 32)
28468: PPUSH
28469: CALL_OW 559
28473: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28474: LD_EXP 52
28478: PUSH
28479: LD_EXP 93
28483: AND
28484: IFFALSE 28575
28486: GO 28488
28488: DISABLE
28489: LD_INT 0
28491: PPUSH
// begin enable ;
28492: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28493: LD_ADDR_VAR 0 1
28497: PUSH
28498: LD_INT 22
28500: PUSH
28501: LD_OWVAR 2
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 21
28512: PUSH
28513: LD_INT 2
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 33
28522: PUSH
28523: LD_INT 3
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: PPUSH
28535: CALL_OW 69
28539: ST_TO_ADDR
// if not tmp then
28540: LD_VAR 0 1
28544: NOT
28545: IFFALSE 28549
// exit ;
28547: GO 28575
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28549: LD_VAR 0 1
28553: PUSH
28554: LD_INT 1
28556: PPUSH
28557: LD_VAR 0 1
28561: PPUSH
28562: CALL_OW 12
28566: ARRAY
28567: PPUSH
28568: LD_INT 1
28570: PPUSH
28571: CALL_OW 234
// end ;
28575: PPOPN 1
28577: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28578: LD_EXP 52
28582: PUSH
28583: LD_EXP 94
28587: AND
28588: IFFALSE 28729
28590: GO 28592
28592: DISABLE
28593: LD_INT 0
28595: PPUSH
28596: PPUSH
28597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28598: LD_ADDR_VAR 0 3
28602: PUSH
28603: LD_INT 22
28605: PUSH
28606: LD_OWVAR 2
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 25
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PPUSH
28629: CALL_OW 69
28633: ST_TO_ADDR
// if not tmp then
28634: LD_VAR 0 3
28638: NOT
28639: IFFALSE 28643
// exit ;
28641: GO 28729
// un := tmp [ rand ( 1 , tmp ) ] ;
28643: LD_ADDR_VAR 0 2
28647: PUSH
28648: LD_VAR 0 3
28652: PUSH
28653: LD_INT 1
28655: PPUSH
28656: LD_VAR 0 3
28660: PPUSH
28661: CALL_OW 12
28665: ARRAY
28666: ST_TO_ADDR
// if Crawls ( un ) then
28667: LD_VAR 0 2
28671: PPUSH
28672: CALL_OW 318
28676: IFFALSE 28687
// ComWalk ( un ) ;
28678: LD_VAR 0 2
28682: PPUSH
28683: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28687: LD_VAR 0 2
28691: PPUSH
28692: LD_INT 9
28694: PPUSH
28695: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28699: LD_INT 28
28701: PPUSH
28702: LD_OWVAR 2
28706: PPUSH
28707: LD_INT 2
28709: PPUSH
28710: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28714: LD_INT 29
28716: PPUSH
28717: LD_OWVAR 2
28721: PPUSH
28722: LD_INT 2
28724: PPUSH
28725: CALL_OW 322
// end ;
28729: PPOPN 3
28731: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28732: LD_EXP 52
28736: PUSH
28737: LD_EXP 95
28741: AND
28742: IFFALSE 28853
28744: GO 28746
28746: DISABLE
28747: LD_INT 0
28749: PPUSH
28750: PPUSH
28751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28752: LD_ADDR_VAR 0 3
28756: PUSH
28757: LD_INT 22
28759: PUSH
28760: LD_OWVAR 2
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 25
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PPUSH
28783: CALL_OW 69
28787: ST_TO_ADDR
// if not tmp then
28788: LD_VAR 0 3
28792: NOT
28793: IFFALSE 28797
// exit ;
28795: GO 28853
// un := tmp [ rand ( 1 , tmp ) ] ;
28797: LD_ADDR_VAR 0 2
28801: PUSH
28802: LD_VAR 0 3
28806: PUSH
28807: LD_INT 1
28809: PPUSH
28810: LD_VAR 0 3
28814: PPUSH
28815: CALL_OW 12
28819: ARRAY
28820: ST_TO_ADDR
// if Crawls ( un ) then
28821: LD_VAR 0 2
28825: PPUSH
28826: CALL_OW 318
28830: IFFALSE 28841
// ComWalk ( un ) ;
28832: LD_VAR 0 2
28836: PPUSH
28837: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28841: LD_VAR 0 2
28845: PPUSH
28846: LD_INT 8
28848: PPUSH
28849: CALL_OW 336
// end ;
28853: PPOPN 3
28855: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28856: LD_EXP 52
28860: PUSH
28861: LD_EXP 96
28865: AND
28866: IFFALSE 29010
28868: GO 28870
28870: DISABLE
28871: LD_INT 0
28873: PPUSH
28874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28875: LD_ADDR_VAR 0 2
28879: PUSH
28880: LD_INT 22
28882: PUSH
28883: LD_OWVAR 2
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 21
28894: PUSH
28895: LD_INT 2
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 2
28904: PUSH
28905: LD_INT 34
28907: PUSH
28908: LD_INT 12
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 34
28917: PUSH
28918: LD_INT 51
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 34
28927: PUSH
28928: LD_INT 32
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: PPUSH
28946: CALL_OW 69
28950: ST_TO_ADDR
// if not tmp then
28951: LD_VAR 0 2
28955: NOT
28956: IFFALSE 28960
// exit ;
28958: GO 29010
// for i in tmp do
28960: LD_ADDR_VAR 0 1
28964: PUSH
28965: LD_VAR 0 2
28969: PUSH
28970: FOR_IN
28971: IFFALSE 29008
// if GetCargo ( i , mat_artifact ) = 0 then
28973: LD_VAR 0 1
28977: PPUSH
28978: LD_INT 4
28980: PPUSH
28981: CALL_OW 289
28985: PUSH
28986: LD_INT 0
28988: EQUAL
28989: IFFALSE 29006
// SetCargo ( i , mat_siberit , 100 ) ;
28991: LD_VAR 0 1
28995: PPUSH
28996: LD_INT 3
28998: PPUSH
28999: LD_INT 100
29001: PPUSH
29002: CALL_OW 290
29006: GO 28970
29008: POP
29009: POP
// end ;
29010: PPOPN 2
29012: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29013: LD_EXP 52
29017: PUSH
29018: LD_EXP 97
29022: AND
29023: IFFALSE 29206
29025: GO 29027
29027: DISABLE
29028: LD_INT 0
29030: PPUSH
29031: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29032: LD_ADDR_VAR 0 2
29036: PUSH
29037: LD_INT 22
29039: PUSH
29040: LD_OWVAR 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PPUSH
29049: CALL_OW 69
29053: ST_TO_ADDR
// if not tmp then
29054: LD_VAR 0 2
29058: NOT
29059: IFFALSE 29063
// exit ;
29061: GO 29206
// for i := 1 to 2 do
29063: LD_ADDR_VAR 0 1
29067: PUSH
29068: DOUBLE
29069: LD_INT 1
29071: DEC
29072: ST_TO_ADDR
29073: LD_INT 2
29075: PUSH
29076: FOR_TO
29077: IFFALSE 29204
// begin uc_side := your_side ;
29079: LD_ADDR_OWVAR 20
29083: PUSH
29084: LD_OWVAR 2
29088: ST_TO_ADDR
// uc_nation := nation_american ;
29089: LD_ADDR_OWVAR 21
29093: PUSH
29094: LD_INT 1
29096: ST_TO_ADDR
// vc_chassis := us_morphling ;
29097: LD_ADDR_OWVAR 37
29101: PUSH
29102: LD_INT 5
29104: ST_TO_ADDR
// vc_engine := engine_siberite ;
29105: LD_ADDR_OWVAR 39
29109: PUSH
29110: LD_INT 3
29112: ST_TO_ADDR
// vc_control := control_computer ;
29113: LD_ADDR_OWVAR 38
29117: PUSH
29118: LD_INT 3
29120: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29121: LD_ADDR_OWVAR 40
29125: PUSH
29126: LD_INT 10
29128: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29129: LD_VAR 0 2
29133: PUSH
29134: LD_INT 1
29136: ARRAY
29137: PPUSH
29138: CALL_OW 310
29142: NOT
29143: IFFALSE 29190
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29145: CALL_OW 45
29149: PPUSH
29150: LD_VAR 0 2
29154: PUSH
29155: LD_INT 1
29157: ARRAY
29158: PPUSH
29159: CALL_OW 250
29163: PPUSH
29164: LD_VAR 0 2
29168: PUSH
29169: LD_INT 1
29171: ARRAY
29172: PPUSH
29173: CALL_OW 251
29177: PPUSH
29178: LD_INT 12
29180: PPUSH
29181: LD_INT 1
29183: PPUSH
29184: CALL_OW 50
29188: GO 29202
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29190: CALL_OW 45
29194: PPUSH
29195: LD_INT 1
29197: PPUSH
29198: CALL_OW 51
// end ;
29202: GO 29076
29204: POP
29205: POP
// end ;
29206: PPOPN 2
29208: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29209: LD_EXP 52
29213: PUSH
29214: LD_EXP 98
29218: AND
29219: IFFALSE 29441
29221: GO 29223
29223: DISABLE
29224: LD_INT 0
29226: PPUSH
29227: PPUSH
29228: PPUSH
29229: PPUSH
29230: PPUSH
29231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29232: LD_ADDR_VAR 0 6
29236: PUSH
29237: LD_INT 22
29239: PUSH
29240: LD_OWVAR 2
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 21
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 3
29261: PUSH
29262: LD_INT 23
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: LIST
29280: PPUSH
29281: CALL_OW 69
29285: ST_TO_ADDR
// if not tmp then
29286: LD_VAR 0 6
29290: NOT
29291: IFFALSE 29295
// exit ;
29293: GO 29441
// s1 := rand ( 1 , 4 ) ;
29295: LD_ADDR_VAR 0 2
29299: PUSH
29300: LD_INT 1
29302: PPUSH
29303: LD_INT 4
29305: PPUSH
29306: CALL_OW 12
29310: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29311: LD_ADDR_VAR 0 4
29315: PUSH
29316: LD_VAR 0 6
29320: PUSH
29321: LD_INT 1
29323: ARRAY
29324: PPUSH
29325: LD_VAR 0 2
29329: PPUSH
29330: CALL_OW 259
29334: ST_TO_ADDR
// if s1 = 1 then
29335: LD_VAR 0 2
29339: PUSH
29340: LD_INT 1
29342: EQUAL
29343: IFFALSE 29363
// s2 := rand ( 2 , 4 ) else
29345: LD_ADDR_VAR 0 3
29349: PUSH
29350: LD_INT 2
29352: PPUSH
29353: LD_INT 4
29355: PPUSH
29356: CALL_OW 12
29360: ST_TO_ADDR
29361: GO 29371
// s2 := 1 ;
29363: LD_ADDR_VAR 0 3
29367: PUSH
29368: LD_INT 1
29370: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29371: LD_ADDR_VAR 0 5
29375: PUSH
29376: LD_VAR 0 6
29380: PUSH
29381: LD_INT 1
29383: ARRAY
29384: PPUSH
29385: LD_VAR 0 3
29389: PPUSH
29390: CALL_OW 259
29394: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29395: LD_VAR 0 6
29399: PUSH
29400: LD_INT 1
29402: ARRAY
29403: PPUSH
29404: LD_VAR 0 2
29408: PPUSH
29409: LD_VAR 0 5
29413: PPUSH
29414: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29418: LD_VAR 0 6
29422: PUSH
29423: LD_INT 1
29425: ARRAY
29426: PPUSH
29427: LD_VAR 0 3
29431: PPUSH
29432: LD_VAR 0 4
29436: PPUSH
29437: CALL_OW 237
// end ;
29441: PPOPN 6
29443: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29444: LD_EXP 52
29448: PUSH
29449: LD_EXP 99
29453: AND
29454: IFFALSE 29533
29456: GO 29458
29458: DISABLE
29459: LD_INT 0
29461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29462: LD_ADDR_VAR 0 1
29466: PUSH
29467: LD_INT 22
29469: PUSH
29470: LD_OWVAR 2
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 30
29481: PUSH
29482: LD_INT 3
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PPUSH
29493: CALL_OW 69
29497: ST_TO_ADDR
// if not tmp then
29498: LD_VAR 0 1
29502: NOT
29503: IFFALSE 29507
// exit ;
29505: GO 29533
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29507: LD_VAR 0 1
29511: PUSH
29512: LD_INT 1
29514: PPUSH
29515: LD_VAR 0 1
29519: PPUSH
29520: CALL_OW 12
29524: ARRAY
29525: PPUSH
29526: LD_INT 1
29528: PPUSH
29529: CALL_OW 234
// end ;
29533: PPOPN 1
29535: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29536: LD_EXP 52
29540: PUSH
29541: LD_EXP 100
29545: AND
29546: IFFALSE 29658
29548: GO 29550
29550: DISABLE
29551: LD_INT 0
29553: PPUSH
29554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29555: LD_ADDR_VAR 0 2
29559: PUSH
29560: LD_INT 22
29562: PUSH
29563: LD_OWVAR 2
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 2
29574: PUSH
29575: LD_INT 30
29577: PUSH
29578: LD_INT 27
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 30
29587: PUSH
29588: LD_INT 26
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 30
29597: PUSH
29598: LD_INT 28
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PPUSH
29615: CALL_OW 69
29619: ST_TO_ADDR
// if not tmp then
29620: LD_VAR 0 2
29624: NOT
29625: IFFALSE 29629
// exit ;
29627: GO 29658
// for i in tmp do
29629: LD_ADDR_VAR 0 1
29633: PUSH
29634: LD_VAR 0 2
29638: PUSH
29639: FOR_IN
29640: IFFALSE 29656
// SetLives ( i , 1 ) ;
29642: LD_VAR 0 1
29646: PPUSH
29647: LD_INT 1
29649: PPUSH
29650: CALL_OW 234
29654: GO 29639
29656: POP
29657: POP
// end ;
29658: PPOPN 2
29660: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29661: LD_EXP 52
29665: PUSH
29666: LD_EXP 101
29670: AND
29671: IFFALSE 29958
29673: GO 29675
29675: DISABLE
29676: LD_INT 0
29678: PPUSH
29679: PPUSH
29680: PPUSH
// begin i := rand ( 1 , 7 ) ;
29681: LD_ADDR_VAR 0 1
29685: PUSH
29686: LD_INT 1
29688: PPUSH
29689: LD_INT 7
29691: PPUSH
29692: CALL_OW 12
29696: ST_TO_ADDR
// case i of 1 :
29697: LD_VAR 0 1
29701: PUSH
29702: LD_INT 1
29704: DOUBLE
29705: EQUAL
29706: IFTRUE 29710
29708: GO 29720
29710: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29711: LD_STRING earthquake(getX(game), 0, 32)
29713: PPUSH
29714: CALL_OW 559
29718: GO 29958
29720: LD_INT 2
29722: DOUBLE
29723: EQUAL
29724: IFTRUE 29728
29726: GO 29742
29728: POP
// begin ToLua ( displayStucuk(); ) ;
29729: LD_STRING displayStucuk();
29731: PPUSH
29732: CALL_OW 559
// ResetFog ;
29736: CALL_OW 335
// end ; 3 :
29740: GO 29958
29742: LD_INT 3
29744: DOUBLE
29745: EQUAL
29746: IFTRUE 29750
29748: GO 29854
29750: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29751: LD_ADDR_VAR 0 2
29755: PUSH
29756: LD_INT 22
29758: PUSH
29759: LD_OWVAR 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 25
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PPUSH
29782: CALL_OW 69
29786: ST_TO_ADDR
// if not tmp then
29787: LD_VAR 0 2
29791: NOT
29792: IFFALSE 29796
// exit ;
29794: GO 29958
// un := tmp [ rand ( 1 , tmp ) ] ;
29796: LD_ADDR_VAR 0 3
29800: PUSH
29801: LD_VAR 0 2
29805: PUSH
29806: LD_INT 1
29808: PPUSH
29809: LD_VAR 0 2
29813: PPUSH
29814: CALL_OW 12
29818: ARRAY
29819: ST_TO_ADDR
// if Crawls ( un ) then
29820: LD_VAR 0 3
29824: PPUSH
29825: CALL_OW 318
29829: IFFALSE 29840
// ComWalk ( un ) ;
29831: LD_VAR 0 3
29835: PPUSH
29836: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29840: LD_VAR 0 3
29844: PPUSH
29845: LD_INT 8
29847: PPUSH
29848: CALL_OW 336
// end ; 4 :
29852: GO 29958
29854: LD_INT 4
29856: DOUBLE
29857: EQUAL
29858: IFTRUE 29862
29860: GO 29936
29862: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29863: LD_ADDR_VAR 0 2
29867: PUSH
29868: LD_INT 22
29870: PUSH
29871: LD_OWVAR 2
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 30
29882: PUSH
29883: LD_INT 29
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PPUSH
29894: CALL_OW 69
29898: ST_TO_ADDR
// if not tmp then
29899: LD_VAR 0 2
29903: NOT
29904: IFFALSE 29908
// exit ;
29906: GO 29958
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29908: LD_VAR 0 2
29912: PUSH
29913: LD_INT 1
29915: ARRAY
29916: PPUSH
29917: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29921: LD_VAR 0 2
29925: PUSH
29926: LD_INT 1
29928: ARRAY
29929: PPUSH
29930: CALL_OW 65
// end ; 5 .. 7 :
29934: GO 29958
29936: LD_INT 5
29938: DOUBLE
29939: GREATEREQUAL
29940: IFFALSE 29948
29942: LD_INT 7
29944: DOUBLE
29945: LESSEQUAL
29946: IFTRUE 29950
29948: GO 29957
29950: POP
// StreamSibBomb ; end ;
29951: CALL 26195 0 0
29955: GO 29958
29957: POP
// end ;
29958: PPOPN 3
29960: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29961: LD_EXP 52
29965: PUSH
29966: LD_EXP 102
29970: AND
29971: IFFALSE 30127
29973: GO 29975
29975: DISABLE
29976: LD_INT 0
29978: PPUSH
29979: PPUSH
29980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29981: LD_ADDR_VAR 0 2
29985: PUSH
29986: LD_INT 81
29988: PUSH
29989: LD_OWVAR 2
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: LD_INT 21
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 21
30013: PUSH
30014: LD_INT 2
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PPUSH
30030: CALL_OW 69
30034: ST_TO_ADDR
// if not tmp then
30035: LD_VAR 0 2
30039: NOT
30040: IFFALSE 30044
// exit ;
30042: GO 30127
// p := 0 ;
30044: LD_ADDR_VAR 0 3
30048: PUSH
30049: LD_INT 0
30051: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30052: LD_INT 35
30054: PPUSH
30055: CALL_OW 67
// p := p + 1 ;
30059: LD_ADDR_VAR 0 3
30063: PUSH
30064: LD_VAR 0 3
30068: PUSH
30069: LD_INT 1
30071: PLUS
30072: ST_TO_ADDR
// for i in tmp do
30073: LD_ADDR_VAR 0 1
30077: PUSH
30078: LD_VAR 0 2
30082: PUSH
30083: FOR_IN
30084: IFFALSE 30115
// if GetLives ( i ) < 1000 then
30086: LD_VAR 0 1
30090: PPUSH
30091: CALL_OW 256
30095: PUSH
30096: LD_INT 1000
30098: LESS
30099: IFFALSE 30113
// SetLives ( i , 1000 ) ;
30101: LD_VAR 0 1
30105: PPUSH
30106: LD_INT 1000
30108: PPUSH
30109: CALL_OW 234
30113: GO 30083
30115: POP
30116: POP
// until p > 20 ;
30117: LD_VAR 0 3
30121: PUSH
30122: LD_INT 20
30124: GREATER
30125: IFFALSE 30052
// end ;
30127: PPOPN 3
30129: END
// every 0 0$1 trigger StreamModeActive and sTime do
30130: LD_EXP 52
30134: PUSH
30135: LD_EXP 103
30139: AND
30140: IFFALSE 30175
30142: GO 30144
30144: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30145: LD_INT 28
30147: PPUSH
30148: LD_OWVAR 2
30152: PPUSH
30153: LD_INT 2
30155: PPUSH
30156: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30160: LD_INT 30
30162: PPUSH
30163: LD_OWVAR 2
30167: PPUSH
30168: LD_INT 2
30170: PPUSH
30171: CALL_OW 322
// end ;
30175: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30176: LD_EXP 52
30180: PUSH
30181: LD_EXP 104
30185: AND
30186: IFFALSE 30307
30188: GO 30190
30190: DISABLE
30191: LD_INT 0
30193: PPUSH
30194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30195: LD_ADDR_VAR 0 2
30199: PUSH
30200: LD_INT 22
30202: PUSH
30203: LD_OWVAR 2
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 21
30214: PUSH
30215: LD_INT 1
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 3
30224: PUSH
30225: LD_INT 23
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: PPUSH
30244: CALL_OW 69
30248: ST_TO_ADDR
// if not tmp then
30249: LD_VAR 0 2
30253: NOT
30254: IFFALSE 30258
// exit ;
30256: GO 30307
// for i in tmp do
30258: LD_ADDR_VAR 0 1
30262: PUSH
30263: LD_VAR 0 2
30267: PUSH
30268: FOR_IN
30269: IFFALSE 30305
// begin if Crawls ( i ) then
30271: LD_VAR 0 1
30275: PPUSH
30276: CALL_OW 318
30280: IFFALSE 30291
// ComWalk ( i ) ;
30282: LD_VAR 0 1
30286: PPUSH
30287: CALL_OW 138
// SetClass ( i , 2 ) ;
30291: LD_VAR 0 1
30295: PPUSH
30296: LD_INT 2
30298: PPUSH
30299: CALL_OW 336
// end ;
30303: GO 30268
30305: POP
30306: POP
// end ;
30307: PPOPN 2
30309: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30310: LD_EXP 52
30314: PUSH
30315: LD_EXP 105
30319: AND
30320: IFFALSE 30608
30322: GO 30324
30324: DISABLE
30325: LD_INT 0
30327: PPUSH
30328: PPUSH
30329: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30330: LD_OWVAR 2
30334: PPUSH
30335: LD_INT 9
30337: PPUSH
30338: LD_INT 1
30340: PPUSH
30341: LD_INT 1
30343: PPUSH
30344: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30348: LD_INT 9
30350: PPUSH
30351: LD_OWVAR 2
30355: PPUSH
30356: CALL_OW 343
// uc_side := 9 ;
30360: LD_ADDR_OWVAR 20
30364: PUSH
30365: LD_INT 9
30367: ST_TO_ADDR
// uc_nation := 2 ;
30368: LD_ADDR_OWVAR 21
30372: PUSH
30373: LD_INT 2
30375: ST_TO_ADDR
// hc_name := Dark Warrior ;
30376: LD_ADDR_OWVAR 26
30380: PUSH
30381: LD_STRING Dark Warrior
30383: ST_TO_ADDR
// hc_gallery :=  ;
30384: LD_ADDR_OWVAR 33
30388: PUSH
30389: LD_STRING 
30391: ST_TO_ADDR
// hc_noskilllimit := true ;
30392: LD_ADDR_OWVAR 76
30396: PUSH
30397: LD_INT 1
30399: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30400: LD_ADDR_OWVAR 31
30404: PUSH
30405: LD_INT 30
30407: PUSH
30408: LD_INT 30
30410: PUSH
30411: LD_INT 30
30413: PUSH
30414: LD_INT 30
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: ST_TO_ADDR
// un := CreateHuman ;
30423: LD_ADDR_VAR 0 3
30427: PUSH
30428: CALL_OW 44
30432: ST_TO_ADDR
// hc_noskilllimit := false ;
30433: LD_ADDR_OWVAR 76
30437: PUSH
30438: LD_INT 0
30440: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30441: LD_VAR 0 3
30445: PPUSH
30446: LD_INT 1
30448: PPUSH
30449: CALL_OW 51
// ToLua ( playRanger() ) ;
30453: LD_STRING playRanger()
30455: PPUSH
30456: CALL_OW 559
// p := 0 ;
30460: LD_ADDR_VAR 0 2
30464: PUSH
30465: LD_INT 0
30467: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30468: LD_INT 35
30470: PPUSH
30471: CALL_OW 67
// p := p + 1 ;
30475: LD_ADDR_VAR 0 2
30479: PUSH
30480: LD_VAR 0 2
30484: PUSH
30485: LD_INT 1
30487: PLUS
30488: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30489: LD_VAR 0 3
30493: PPUSH
30494: CALL_OW 256
30498: PUSH
30499: LD_INT 1000
30501: LESS
30502: IFFALSE 30516
// SetLives ( un , 1000 ) ;
30504: LD_VAR 0 3
30508: PPUSH
30509: LD_INT 1000
30511: PPUSH
30512: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30516: LD_VAR 0 3
30520: PPUSH
30521: LD_INT 81
30523: PUSH
30524: LD_OWVAR 2
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 91
30535: PUSH
30536: LD_VAR 0 3
30540: PUSH
30541: LD_INT 30
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: LIST
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PPUSH
30553: CALL_OW 69
30557: PPUSH
30558: LD_VAR 0 3
30562: PPUSH
30563: CALL_OW 74
30567: PPUSH
30568: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30572: LD_VAR 0 2
30576: PUSH
30577: LD_INT 80
30579: GREATER
30580: PUSH
30581: LD_VAR 0 3
30585: PPUSH
30586: CALL_OW 301
30590: OR
30591: IFFALSE 30468
// if un then
30593: LD_VAR 0 3
30597: IFFALSE 30608
// RemoveUnit ( un ) ;
30599: LD_VAR 0 3
30603: PPUSH
30604: CALL_OW 64
// end ;
30608: PPOPN 3
30610: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30611: LD_EXP 106
30615: IFFALSE 30731
30617: GO 30619
30619: DISABLE
30620: LD_INT 0
30622: PPUSH
30623: PPUSH
30624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30625: LD_ADDR_VAR 0 2
30629: PUSH
30630: LD_INT 81
30632: PUSH
30633: LD_OWVAR 2
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 21
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PPUSH
30656: CALL_OW 69
30660: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30661: LD_STRING playComputer()
30663: PPUSH
30664: CALL_OW 559
// if not tmp then
30668: LD_VAR 0 2
30672: NOT
30673: IFFALSE 30677
// exit ;
30675: GO 30731
// for i in tmp do
30677: LD_ADDR_VAR 0 1
30681: PUSH
30682: LD_VAR 0 2
30686: PUSH
30687: FOR_IN
30688: IFFALSE 30729
// for j := 1 to 4 do
30690: LD_ADDR_VAR 0 3
30694: PUSH
30695: DOUBLE
30696: LD_INT 1
30698: DEC
30699: ST_TO_ADDR
30700: LD_INT 4
30702: PUSH
30703: FOR_TO
30704: IFFALSE 30725
// SetSkill ( i , j , 10 ) ;
30706: LD_VAR 0 1
30710: PPUSH
30711: LD_VAR 0 3
30715: PPUSH
30716: LD_INT 10
30718: PPUSH
30719: CALL_OW 237
30723: GO 30703
30725: POP
30726: POP
30727: GO 30687
30729: POP
30730: POP
// end ;
30731: PPOPN 3
30733: END
// every 0 0$1 trigger s30 do var i , tmp ;
30734: LD_EXP 107
30738: IFFALSE 30807
30740: GO 30742
30742: DISABLE
30743: LD_INT 0
30745: PPUSH
30746: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30747: LD_ADDR_VAR 0 2
30751: PUSH
30752: LD_INT 22
30754: PUSH
30755: LD_OWVAR 2
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PPUSH
30764: CALL_OW 69
30768: ST_TO_ADDR
// if not tmp then
30769: LD_VAR 0 2
30773: NOT
30774: IFFALSE 30778
// exit ;
30776: GO 30807
// for i in tmp do
30778: LD_ADDR_VAR 0 1
30782: PUSH
30783: LD_VAR 0 2
30787: PUSH
30788: FOR_IN
30789: IFFALSE 30805
// SetLives ( i , 300 ) ;
30791: LD_VAR 0 1
30795: PPUSH
30796: LD_INT 300
30798: PPUSH
30799: CALL_OW 234
30803: GO 30788
30805: POP
30806: POP
// end ;
30807: PPOPN 2
30809: END
// every 0 0$1 trigger s60 do var i , tmp ;
30810: LD_EXP 108
30814: IFFALSE 30883
30816: GO 30818
30818: DISABLE
30819: LD_INT 0
30821: PPUSH
30822: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30823: LD_ADDR_VAR 0 2
30827: PUSH
30828: LD_INT 22
30830: PUSH
30831: LD_OWVAR 2
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PPUSH
30840: CALL_OW 69
30844: ST_TO_ADDR
// if not tmp then
30845: LD_VAR 0 2
30849: NOT
30850: IFFALSE 30854
// exit ;
30852: GO 30883
// for i in tmp do
30854: LD_ADDR_VAR 0 1
30858: PUSH
30859: LD_VAR 0 2
30863: PUSH
30864: FOR_IN
30865: IFFALSE 30881
// SetLives ( i , 600 ) ;
30867: LD_VAR 0 1
30871: PPUSH
30872: LD_INT 600
30874: PPUSH
30875: CALL_OW 234
30879: GO 30864
30881: POP
30882: POP
// end ;
30883: PPOPN 2
30885: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30886: LD_INT 0
30888: PPUSH
// case cmd of 301 :
30889: LD_VAR 0 1
30893: PUSH
30894: LD_INT 301
30896: DOUBLE
30897: EQUAL
30898: IFTRUE 30902
30900: GO 30934
30902: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30903: LD_VAR 0 6
30907: PPUSH
30908: LD_VAR 0 7
30912: PPUSH
30913: LD_VAR 0 8
30917: PPUSH
30918: LD_VAR 0 4
30922: PPUSH
30923: LD_VAR 0 5
30927: PPUSH
30928: CALL 32135 0 5
30932: GO 31055
30934: LD_INT 302
30936: DOUBLE
30937: EQUAL
30938: IFTRUE 30942
30940: GO 30979
30942: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30943: LD_VAR 0 6
30947: PPUSH
30948: LD_VAR 0 7
30952: PPUSH
30953: LD_VAR 0 8
30957: PPUSH
30958: LD_VAR 0 9
30962: PPUSH
30963: LD_VAR 0 4
30967: PPUSH
30968: LD_VAR 0 5
30972: PPUSH
30973: CALL 32226 0 6
30977: GO 31055
30979: LD_INT 303
30981: DOUBLE
30982: EQUAL
30983: IFTRUE 30987
30985: GO 31024
30987: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30988: LD_VAR 0 6
30992: PPUSH
30993: LD_VAR 0 7
30997: PPUSH
30998: LD_VAR 0 8
31002: PPUSH
31003: LD_VAR 0 9
31007: PPUSH
31008: LD_VAR 0 4
31012: PPUSH
31013: LD_VAR 0 5
31017: PPUSH
31018: CALL 31060 0 6
31022: GO 31055
31024: LD_INT 304
31026: DOUBLE
31027: EQUAL
31028: IFTRUE 31032
31030: GO 31054
31032: POP
// hHackTeleport ( unit , x , y ) ; end ;
31033: LD_VAR 0 2
31037: PPUSH
31038: LD_VAR 0 4
31042: PPUSH
31043: LD_VAR 0 5
31047: PPUSH
31048: CALL 32819 0 3
31052: GO 31055
31054: POP
// end ;
31055: LD_VAR 0 12
31059: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31060: LD_INT 0
31062: PPUSH
31063: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31064: LD_VAR 0 1
31068: PUSH
31069: LD_INT 1
31071: LESS
31072: PUSH
31073: LD_VAR 0 1
31077: PUSH
31078: LD_INT 3
31080: GREATER
31081: OR
31082: PUSH
31083: LD_VAR 0 5
31087: PPUSH
31088: LD_VAR 0 6
31092: PPUSH
31093: CALL_OW 428
31097: OR
31098: IFFALSE 31102
// exit ;
31100: GO 31822
// uc_side := your_side ;
31102: LD_ADDR_OWVAR 20
31106: PUSH
31107: LD_OWVAR 2
31111: ST_TO_ADDR
// uc_nation := nation ;
31112: LD_ADDR_OWVAR 21
31116: PUSH
31117: LD_VAR 0 1
31121: ST_TO_ADDR
// bc_level = 1 ;
31122: LD_ADDR_OWVAR 43
31126: PUSH
31127: LD_INT 1
31129: ST_TO_ADDR
// case btype of 1 :
31130: LD_VAR 0 2
31134: PUSH
31135: LD_INT 1
31137: DOUBLE
31138: EQUAL
31139: IFTRUE 31143
31141: GO 31154
31143: POP
// bc_type := b_depot ; 2 :
31144: LD_ADDR_OWVAR 42
31148: PUSH
31149: LD_INT 0
31151: ST_TO_ADDR
31152: GO 31766
31154: LD_INT 2
31156: DOUBLE
31157: EQUAL
31158: IFTRUE 31162
31160: GO 31173
31162: POP
// bc_type := b_warehouse ; 3 :
31163: LD_ADDR_OWVAR 42
31167: PUSH
31168: LD_INT 1
31170: ST_TO_ADDR
31171: GO 31766
31173: LD_INT 3
31175: DOUBLE
31176: EQUAL
31177: IFTRUE 31181
31179: GO 31192
31181: POP
// bc_type := b_lab ; 4 .. 9 :
31182: LD_ADDR_OWVAR 42
31186: PUSH
31187: LD_INT 6
31189: ST_TO_ADDR
31190: GO 31766
31192: LD_INT 4
31194: DOUBLE
31195: GREATEREQUAL
31196: IFFALSE 31204
31198: LD_INT 9
31200: DOUBLE
31201: LESSEQUAL
31202: IFTRUE 31206
31204: GO 31258
31206: POP
// begin bc_type := b_lab_half ;
31207: LD_ADDR_OWVAR 42
31211: PUSH
31212: LD_INT 7
31214: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31215: LD_ADDR_OWVAR 44
31219: PUSH
31220: LD_INT 10
31222: PUSH
31223: LD_INT 11
31225: PUSH
31226: LD_INT 12
31228: PUSH
31229: LD_INT 15
31231: PUSH
31232: LD_INT 14
31234: PUSH
31235: LD_INT 13
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: PUSH
31246: LD_VAR 0 2
31250: PUSH
31251: LD_INT 3
31253: MINUS
31254: ARRAY
31255: ST_TO_ADDR
// end ; 10 .. 13 :
31256: GO 31766
31258: LD_INT 10
31260: DOUBLE
31261: GREATEREQUAL
31262: IFFALSE 31270
31264: LD_INT 13
31266: DOUBLE
31267: LESSEQUAL
31268: IFTRUE 31272
31270: GO 31349
31272: POP
// begin bc_type := b_lab_full ;
31273: LD_ADDR_OWVAR 42
31277: PUSH
31278: LD_INT 8
31280: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31281: LD_ADDR_OWVAR 44
31285: PUSH
31286: LD_INT 10
31288: PUSH
31289: LD_INT 12
31291: PUSH
31292: LD_INT 14
31294: PUSH
31295: LD_INT 13
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: PUSH
31304: LD_VAR 0 2
31308: PUSH
31309: LD_INT 9
31311: MINUS
31312: ARRAY
31313: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31314: LD_ADDR_OWVAR 45
31318: PUSH
31319: LD_INT 11
31321: PUSH
31322: LD_INT 15
31324: PUSH
31325: LD_INT 12
31327: PUSH
31328: LD_INT 15
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: PUSH
31337: LD_VAR 0 2
31341: PUSH
31342: LD_INT 9
31344: MINUS
31345: ARRAY
31346: ST_TO_ADDR
// end ; 14 :
31347: GO 31766
31349: LD_INT 14
31351: DOUBLE
31352: EQUAL
31353: IFTRUE 31357
31355: GO 31368
31357: POP
// bc_type := b_workshop ; 15 :
31358: LD_ADDR_OWVAR 42
31362: PUSH
31363: LD_INT 2
31365: ST_TO_ADDR
31366: GO 31766
31368: LD_INT 15
31370: DOUBLE
31371: EQUAL
31372: IFTRUE 31376
31374: GO 31387
31376: POP
// bc_type := b_factory ; 16 :
31377: LD_ADDR_OWVAR 42
31381: PUSH
31382: LD_INT 3
31384: ST_TO_ADDR
31385: GO 31766
31387: LD_INT 16
31389: DOUBLE
31390: EQUAL
31391: IFTRUE 31395
31393: GO 31406
31395: POP
// bc_type := b_ext_gun ; 17 :
31396: LD_ADDR_OWVAR 42
31400: PUSH
31401: LD_INT 17
31403: ST_TO_ADDR
31404: GO 31766
31406: LD_INT 17
31408: DOUBLE
31409: EQUAL
31410: IFTRUE 31414
31412: GO 31442
31414: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31415: LD_ADDR_OWVAR 42
31419: PUSH
31420: LD_INT 19
31422: PUSH
31423: LD_INT 23
31425: PUSH
31426: LD_INT 19
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: LIST
31433: PUSH
31434: LD_VAR 0 1
31438: ARRAY
31439: ST_TO_ADDR
31440: GO 31766
31442: LD_INT 18
31444: DOUBLE
31445: EQUAL
31446: IFTRUE 31450
31448: GO 31461
31450: POP
// bc_type := b_ext_radar ; 19 :
31451: LD_ADDR_OWVAR 42
31455: PUSH
31456: LD_INT 20
31458: ST_TO_ADDR
31459: GO 31766
31461: LD_INT 19
31463: DOUBLE
31464: EQUAL
31465: IFTRUE 31469
31467: GO 31480
31469: POP
// bc_type := b_ext_radio ; 20 :
31470: LD_ADDR_OWVAR 42
31474: PUSH
31475: LD_INT 22
31477: ST_TO_ADDR
31478: GO 31766
31480: LD_INT 20
31482: DOUBLE
31483: EQUAL
31484: IFTRUE 31488
31486: GO 31499
31488: POP
// bc_type := b_ext_siberium ; 21 :
31489: LD_ADDR_OWVAR 42
31493: PUSH
31494: LD_INT 21
31496: ST_TO_ADDR
31497: GO 31766
31499: LD_INT 21
31501: DOUBLE
31502: EQUAL
31503: IFTRUE 31507
31505: GO 31518
31507: POP
// bc_type := b_ext_computer ; 22 :
31508: LD_ADDR_OWVAR 42
31512: PUSH
31513: LD_INT 24
31515: ST_TO_ADDR
31516: GO 31766
31518: LD_INT 22
31520: DOUBLE
31521: EQUAL
31522: IFTRUE 31526
31524: GO 31537
31526: POP
// bc_type := b_ext_track ; 23 :
31527: LD_ADDR_OWVAR 42
31531: PUSH
31532: LD_INT 16
31534: ST_TO_ADDR
31535: GO 31766
31537: LD_INT 23
31539: DOUBLE
31540: EQUAL
31541: IFTRUE 31545
31543: GO 31556
31545: POP
// bc_type := b_ext_laser ; 24 :
31546: LD_ADDR_OWVAR 42
31550: PUSH
31551: LD_INT 25
31553: ST_TO_ADDR
31554: GO 31766
31556: LD_INT 24
31558: DOUBLE
31559: EQUAL
31560: IFTRUE 31564
31562: GO 31575
31564: POP
// bc_type := b_control_tower ; 25 :
31565: LD_ADDR_OWVAR 42
31569: PUSH
31570: LD_INT 36
31572: ST_TO_ADDR
31573: GO 31766
31575: LD_INT 25
31577: DOUBLE
31578: EQUAL
31579: IFTRUE 31583
31581: GO 31594
31583: POP
// bc_type := b_breastwork ; 26 :
31584: LD_ADDR_OWVAR 42
31588: PUSH
31589: LD_INT 31
31591: ST_TO_ADDR
31592: GO 31766
31594: LD_INT 26
31596: DOUBLE
31597: EQUAL
31598: IFTRUE 31602
31600: GO 31613
31602: POP
// bc_type := b_bunker ; 27 :
31603: LD_ADDR_OWVAR 42
31607: PUSH
31608: LD_INT 32
31610: ST_TO_ADDR
31611: GO 31766
31613: LD_INT 27
31615: DOUBLE
31616: EQUAL
31617: IFTRUE 31621
31619: GO 31632
31621: POP
// bc_type := b_turret ; 28 :
31622: LD_ADDR_OWVAR 42
31626: PUSH
31627: LD_INT 33
31629: ST_TO_ADDR
31630: GO 31766
31632: LD_INT 28
31634: DOUBLE
31635: EQUAL
31636: IFTRUE 31640
31638: GO 31651
31640: POP
// bc_type := b_armoury ; 29 :
31641: LD_ADDR_OWVAR 42
31645: PUSH
31646: LD_INT 4
31648: ST_TO_ADDR
31649: GO 31766
31651: LD_INT 29
31653: DOUBLE
31654: EQUAL
31655: IFTRUE 31659
31657: GO 31670
31659: POP
// bc_type := b_barracks ; 30 :
31660: LD_ADDR_OWVAR 42
31664: PUSH
31665: LD_INT 5
31667: ST_TO_ADDR
31668: GO 31766
31670: LD_INT 30
31672: DOUBLE
31673: EQUAL
31674: IFTRUE 31678
31676: GO 31689
31678: POP
// bc_type := b_solar_power ; 31 :
31679: LD_ADDR_OWVAR 42
31683: PUSH
31684: LD_INT 27
31686: ST_TO_ADDR
31687: GO 31766
31689: LD_INT 31
31691: DOUBLE
31692: EQUAL
31693: IFTRUE 31697
31695: GO 31708
31697: POP
// bc_type := b_oil_power ; 32 :
31698: LD_ADDR_OWVAR 42
31702: PUSH
31703: LD_INT 26
31705: ST_TO_ADDR
31706: GO 31766
31708: LD_INT 32
31710: DOUBLE
31711: EQUAL
31712: IFTRUE 31716
31714: GO 31727
31716: POP
// bc_type := b_siberite_power ; 33 :
31717: LD_ADDR_OWVAR 42
31721: PUSH
31722: LD_INT 28
31724: ST_TO_ADDR
31725: GO 31766
31727: LD_INT 33
31729: DOUBLE
31730: EQUAL
31731: IFTRUE 31735
31733: GO 31746
31735: POP
// bc_type := b_oil_mine ; 34 :
31736: LD_ADDR_OWVAR 42
31740: PUSH
31741: LD_INT 29
31743: ST_TO_ADDR
31744: GO 31766
31746: LD_INT 34
31748: DOUBLE
31749: EQUAL
31750: IFTRUE 31754
31752: GO 31765
31754: POP
// bc_type := b_siberite_mine ; end ;
31755: LD_ADDR_OWVAR 42
31759: PUSH
31760: LD_INT 30
31762: ST_TO_ADDR
31763: GO 31766
31765: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31766: LD_ADDR_VAR 0 8
31770: PUSH
31771: LD_VAR 0 5
31775: PPUSH
31776: LD_VAR 0 6
31780: PPUSH
31781: LD_VAR 0 3
31785: PPUSH
31786: CALL_OW 47
31790: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31791: LD_OWVAR 42
31795: PUSH
31796: LD_INT 32
31798: PUSH
31799: LD_INT 33
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: IN
31806: IFFALSE 31822
// PlaceWeaponTurret ( b , weapon ) ;
31808: LD_VAR 0 8
31812: PPUSH
31813: LD_VAR 0 4
31817: PPUSH
31818: CALL_OW 431
// end ;
31822: LD_VAR 0 7
31826: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31827: LD_INT 0
31829: PPUSH
31830: PPUSH
31831: PPUSH
31832: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31833: LD_ADDR_VAR 0 4
31837: PUSH
31838: LD_INT 22
31840: PUSH
31841: LD_OWVAR 2
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 2
31852: PUSH
31853: LD_INT 30
31855: PUSH
31856: LD_INT 0
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 30
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: LIST
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PPUSH
31882: CALL_OW 69
31886: ST_TO_ADDR
// if not tmp then
31887: LD_VAR 0 4
31891: NOT
31892: IFFALSE 31896
// exit ;
31894: GO 31955
// for i in tmp do
31896: LD_ADDR_VAR 0 2
31900: PUSH
31901: LD_VAR 0 4
31905: PUSH
31906: FOR_IN
31907: IFFALSE 31953
// for j = 1 to 3 do
31909: LD_ADDR_VAR 0 3
31913: PUSH
31914: DOUBLE
31915: LD_INT 1
31917: DEC
31918: ST_TO_ADDR
31919: LD_INT 3
31921: PUSH
31922: FOR_TO
31923: IFFALSE 31949
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31925: LD_VAR 0 2
31929: PPUSH
31930: CALL_OW 274
31934: PPUSH
31935: LD_VAR 0 3
31939: PPUSH
31940: LD_INT 99999
31942: PPUSH
31943: CALL_OW 277
31947: GO 31922
31949: POP
31950: POP
31951: GO 31906
31953: POP
31954: POP
// end ;
31955: LD_VAR 0 1
31959: RET
// export function hHackSetLevel10 ; var i , j ; begin
31960: LD_INT 0
31962: PPUSH
31963: PPUSH
31964: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31965: LD_ADDR_VAR 0 2
31969: PUSH
31970: LD_INT 21
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PPUSH
31980: CALL_OW 69
31984: PUSH
31985: FOR_IN
31986: IFFALSE 32038
// if IsSelected ( i ) then
31988: LD_VAR 0 2
31992: PPUSH
31993: CALL_OW 306
31997: IFFALSE 32036
// begin for j := 1 to 4 do
31999: LD_ADDR_VAR 0 3
32003: PUSH
32004: DOUBLE
32005: LD_INT 1
32007: DEC
32008: ST_TO_ADDR
32009: LD_INT 4
32011: PUSH
32012: FOR_TO
32013: IFFALSE 32034
// SetSkill ( i , j , 10 ) ;
32015: LD_VAR 0 2
32019: PPUSH
32020: LD_VAR 0 3
32024: PPUSH
32025: LD_INT 10
32027: PPUSH
32028: CALL_OW 237
32032: GO 32012
32034: POP
32035: POP
// end ;
32036: GO 31985
32038: POP
32039: POP
// end ;
32040: LD_VAR 0 1
32044: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32045: LD_INT 0
32047: PPUSH
32048: PPUSH
32049: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32050: LD_ADDR_VAR 0 2
32054: PUSH
32055: LD_INT 22
32057: PUSH
32058: LD_OWVAR 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 21
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PPUSH
32081: CALL_OW 69
32085: PUSH
32086: FOR_IN
32087: IFFALSE 32128
// begin for j := 1 to 4 do
32089: LD_ADDR_VAR 0 3
32093: PUSH
32094: DOUBLE
32095: LD_INT 1
32097: DEC
32098: ST_TO_ADDR
32099: LD_INT 4
32101: PUSH
32102: FOR_TO
32103: IFFALSE 32124
// SetSkill ( i , j , 10 ) ;
32105: LD_VAR 0 2
32109: PPUSH
32110: LD_VAR 0 3
32114: PPUSH
32115: LD_INT 10
32117: PPUSH
32118: CALL_OW 237
32122: GO 32102
32124: POP
32125: POP
// end ;
32126: GO 32086
32128: POP
32129: POP
// end ;
32130: LD_VAR 0 1
32134: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32135: LD_INT 0
32137: PPUSH
// uc_side := your_side ;
32138: LD_ADDR_OWVAR 20
32142: PUSH
32143: LD_OWVAR 2
32147: ST_TO_ADDR
// uc_nation := nation ;
32148: LD_ADDR_OWVAR 21
32152: PUSH
32153: LD_VAR 0 1
32157: ST_TO_ADDR
// InitHc ;
32158: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32162: LD_INT 0
32164: PPUSH
32165: LD_VAR 0 2
32169: PPUSH
32170: LD_VAR 0 3
32174: PPUSH
32175: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32179: LD_VAR 0 4
32183: PPUSH
32184: LD_VAR 0 5
32188: PPUSH
32189: CALL_OW 428
32193: PUSH
32194: LD_INT 0
32196: EQUAL
32197: IFFALSE 32221
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32199: CALL_OW 44
32203: PPUSH
32204: LD_VAR 0 4
32208: PPUSH
32209: LD_VAR 0 5
32213: PPUSH
32214: LD_INT 1
32216: PPUSH
32217: CALL_OW 48
// end ;
32221: LD_VAR 0 6
32225: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32226: LD_INT 0
32228: PPUSH
32229: PPUSH
// uc_side := your_side ;
32230: LD_ADDR_OWVAR 20
32234: PUSH
32235: LD_OWVAR 2
32239: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32240: LD_VAR 0 1
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: LD_INT 2
32250: PUSH
32251: LD_INT 3
32253: PUSH
32254: LD_INT 4
32256: PUSH
32257: LD_INT 5
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: IN
32267: IFFALSE 32279
// uc_nation := nation_american else
32269: LD_ADDR_OWVAR 21
32273: PUSH
32274: LD_INT 1
32276: ST_TO_ADDR
32277: GO 32322
// if chassis in [ 11 , 12 , 13 , 14 ] then
32279: LD_VAR 0 1
32283: PUSH
32284: LD_INT 11
32286: PUSH
32287: LD_INT 12
32289: PUSH
32290: LD_INT 13
32292: PUSH
32293: LD_INT 14
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: IN
32302: IFFALSE 32314
// uc_nation := nation_arabian else
32304: LD_ADDR_OWVAR 21
32308: PUSH
32309: LD_INT 2
32311: ST_TO_ADDR
32312: GO 32322
// uc_nation := nation_russian ;
32314: LD_ADDR_OWVAR 21
32318: PUSH
32319: LD_INT 3
32321: ST_TO_ADDR
// vc_chassis := chassis ;
32322: LD_ADDR_OWVAR 37
32326: PUSH
32327: LD_VAR 0 1
32331: ST_TO_ADDR
// vc_engine := engine ;
32332: LD_ADDR_OWVAR 39
32336: PUSH
32337: LD_VAR 0 2
32341: ST_TO_ADDR
// vc_control := control ;
32342: LD_ADDR_OWVAR 38
32346: PUSH
32347: LD_VAR 0 3
32351: ST_TO_ADDR
// vc_weapon := weapon ;
32352: LD_ADDR_OWVAR 40
32356: PUSH
32357: LD_VAR 0 4
32361: ST_TO_ADDR
// un := CreateVehicle ;
32362: LD_ADDR_VAR 0 8
32366: PUSH
32367: CALL_OW 45
32371: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32372: LD_VAR 0 8
32376: PPUSH
32377: LD_INT 0
32379: PPUSH
32380: LD_INT 5
32382: PPUSH
32383: CALL_OW 12
32387: PPUSH
32388: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32392: LD_VAR 0 8
32396: PPUSH
32397: LD_VAR 0 5
32401: PPUSH
32402: LD_VAR 0 6
32406: PPUSH
32407: LD_INT 1
32409: PPUSH
32410: CALL_OW 48
// end ;
32414: LD_VAR 0 7
32418: RET
// export hInvincible ; every 1 do
32419: GO 32421
32421: DISABLE
// hInvincible := [ ] ;
32422: LD_ADDR_EXP 109
32426: PUSH
32427: EMPTY
32428: ST_TO_ADDR
32429: END
// every 10 do var i ;
32430: GO 32432
32432: DISABLE
32433: LD_INT 0
32435: PPUSH
// begin enable ;
32436: ENABLE
// if not hInvincible then
32437: LD_EXP 109
32441: NOT
32442: IFFALSE 32446
// exit ;
32444: GO 32490
// for i in hInvincible do
32446: LD_ADDR_VAR 0 1
32450: PUSH
32451: LD_EXP 109
32455: PUSH
32456: FOR_IN
32457: IFFALSE 32488
// if GetLives ( i ) < 1000 then
32459: LD_VAR 0 1
32463: PPUSH
32464: CALL_OW 256
32468: PUSH
32469: LD_INT 1000
32471: LESS
32472: IFFALSE 32486
// SetLives ( i , 1000 ) ;
32474: LD_VAR 0 1
32478: PPUSH
32479: LD_INT 1000
32481: PPUSH
32482: CALL_OW 234
32486: GO 32456
32488: POP
32489: POP
// end ;
32490: PPOPN 1
32492: END
// export function hHackInvincible ; var i ; begin
32493: LD_INT 0
32495: PPUSH
32496: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32497: LD_ADDR_VAR 0 2
32501: PUSH
32502: LD_INT 2
32504: PUSH
32505: LD_INT 21
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 21
32517: PUSH
32518: LD_INT 2
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: PPUSH
32530: CALL_OW 69
32534: PUSH
32535: FOR_IN
32536: IFFALSE 32597
// if IsSelected ( i ) then
32538: LD_VAR 0 2
32542: PPUSH
32543: CALL_OW 306
32547: IFFALSE 32595
// begin if i in hInvincible then
32549: LD_VAR 0 2
32553: PUSH
32554: LD_EXP 109
32558: IN
32559: IFFALSE 32579
// hInvincible := hInvincible diff i else
32561: LD_ADDR_EXP 109
32565: PUSH
32566: LD_EXP 109
32570: PUSH
32571: LD_VAR 0 2
32575: DIFF
32576: ST_TO_ADDR
32577: GO 32595
// hInvincible := hInvincible union i ;
32579: LD_ADDR_EXP 109
32583: PUSH
32584: LD_EXP 109
32588: PUSH
32589: LD_VAR 0 2
32593: UNION
32594: ST_TO_ADDR
// end ;
32595: GO 32535
32597: POP
32598: POP
// end ;
32599: LD_VAR 0 1
32603: RET
// export function hHackInvisible ; var i , j ; begin
32604: LD_INT 0
32606: PPUSH
32607: PPUSH
32608: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32609: LD_ADDR_VAR 0 2
32613: PUSH
32614: LD_INT 21
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PPUSH
32624: CALL_OW 69
32628: PUSH
32629: FOR_IN
32630: IFFALSE 32654
// if IsSelected ( i ) then
32632: LD_VAR 0 2
32636: PPUSH
32637: CALL_OW 306
32641: IFFALSE 32652
// ComForceInvisible ( i ) ;
32643: LD_VAR 0 2
32647: PPUSH
32648: CALL_OW 496
32652: GO 32629
32654: POP
32655: POP
// end ;
32656: LD_VAR 0 1
32660: RET
// export function hHackChangeYourSide ; begin
32661: LD_INT 0
32663: PPUSH
// if your_side = 8 then
32664: LD_OWVAR 2
32668: PUSH
32669: LD_INT 8
32671: EQUAL
32672: IFFALSE 32684
// your_side := 0 else
32674: LD_ADDR_OWVAR 2
32678: PUSH
32679: LD_INT 0
32681: ST_TO_ADDR
32682: GO 32698
// your_side := your_side + 1 ;
32684: LD_ADDR_OWVAR 2
32688: PUSH
32689: LD_OWVAR 2
32693: PUSH
32694: LD_INT 1
32696: PLUS
32697: ST_TO_ADDR
// end ;
32698: LD_VAR 0 1
32702: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32703: LD_INT 0
32705: PPUSH
32706: PPUSH
32707: PPUSH
// for i in all_units do
32708: LD_ADDR_VAR 0 2
32712: PUSH
32713: LD_OWVAR 3
32717: PUSH
32718: FOR_IN
32719: IFFALSE 32797
// if IsSelected ( i ) then
32721: LD_VAR 0 2
32725: PPUSH
32726: CALL_OW 306
32730: IFFALSE 32795
// begin j := GetSide ( i ) ;
32732: LD_ADDR_VAR 0 3
32736: PUSH
32737: LD_VAR 0 2
32741: PPUSH
32742: CALL_OW 255
32746: ST_TO_ADDR
// if j = 8 then
32747: LD_VAR 0 3
32751: PUSH
32752: LD_INT 8
32754: EQUAL
32755: IFFALSE 32767
// j := 0 else
32757: LD_ADDR_VAR 0 3
32761: PUSH
32762: LD_INT 0
32764: ST_TO_ADDR
32765: GO 32781
// j := j + 1 ;
32767: LD_ADDR_VAR 0 3
32771: PUSH
32772: LD_VAR 0 3
32776: PUSH
32777: LD_INT 1
32779: PLUS
32780: ST_TO_ADDR
// SetSide ( i , j ) ;
32781: LD_VAR 0 2
32785: PPUSH
32786: LD_VAR 0 3
32790: PPUSH
32791: CALL_OW 235
// end ;
32795: GO 32718
32797: POP
32798: POP
// end ;
32799: LD_VAR 0 1
32803: RET
// export function hHackFog ; begin
32804: LD_INT 0
32806: PPUSH
// FogOff ( true ) ;
32807: LD_INT 1
32809: PPUSH
32810: CALL_OW 344
// end ;
32814: LD_VAR 0 1
32818: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32819: LD_INT 0
32821: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32822: LD_VAR 0 1
32826: PPUSH
32827: LD_VAR 0 2
32831: PPUSH
32832: LD_VAR 0 3
32836: PPUSH
32837: LD_INT 1
32839: PPUSH
32840: LD_INT 1
32842: PPUSH
32843: CALL_OW 483
// CenterOnXY ( x , y ) ;
32847: LD_VAR 0 2
32851: PPUSH
32852: LD_VAR 0 3
32856: PPUSH
32857: CALL_OW 84
// end ; end_of_file
32861: LD_VAR 0 4
32865: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32866: LD_INT 0
32868: PPUSH
32869: PPUSH
32870: PPUSH
32871: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32872: LD_VAR 0 1
32876: PPUSH
32877: CALL_OW 264
32881: PUSH
32882: LD_EXP 36
32886: EQUAL
32887: IFFALSE 32959
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32889: LD_INT 68
32891: PPUSH
32892: LD_VAR 0 1
32896: PPUSH
32897: CALL_OW 255
32901: PPUSH
32902: CALL_OW 321
32906: PUSH
32907: LD_INT 2
32909: EQUAL
32910: IFFALSE 32922
// eff := 70 else
32912: LD_ADDR_VAR 0 4
32916: PUSH
32917: LD_INT 70
32919: ST_TO_ADDR
32920: GO 32930
// eff := 30 ;
32922: LD_ADDR_VAR 0 4
32926: PUSH
32927: LD_INT 30
32929: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32930: LD_VAR 0 1
32934: PPUSH
32935: CALL_OW 250
32939: PPUSH
32940: LD_VAR 0 1
32944: PPUSH
32945: CALL_OW 251
32949: PPUSH
32950: LD_VAR 0 4
32954: PPUSH
32955: CALL_OW 495
// end ; end ;
32959: LD_VAR 0 2
32963: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32964: LD_INT 0
32966: PPUSH
// end ;
32967: LD_VAR 0 4
32971: RET
// export function SOS_Command ( cmd ) ; begin
32972: LD_INT 0
32974: PPUSH
// end ;
32975: LD_VAR 0 2
32979: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32980: LD_INT 0
32982: PPUSH
// end ;
32983: LD_VAR 0 6
32987: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32988: LD_INT 0
32990: PPUSH
32991: PPUSH
// if not vehicle or not factory then
32992: LD_VAR 0 1
32996: NOT
32997: PUSH
32998: LD_VAR 0 2
33002: NOT
33003: OR
33004: IFFALSE 33008
// exit ;
33006: GO 33239
// if factoryWaypoints >= factory then
33008: LD_EXP 110
33012: PUSH
33013: LD_VAR 0 2
33017: GREATEREQUAL
33018: IFFALSE 33239
// if factoryWaypoints [ factory ] then
33020: LD_EXP 110
33024: PUSH
33025: LD_VAR 0 2
33029: ARRAY
33030: IFFALSE 33239
// begin if GetControl ( vehicle ) = control_manual then
33032: LD_VAR 0 1
33036: PPUSH
33037: CALL_OW 263
33041: PUSH
33042: LD_INT 1
33044: EQUAL
33045: IFFALSE 33126
// begin driver := IsDrivenBy ( vehicle ) ;
33047: LD_ADDR_VAR 0 4
33051: PUSH
33052: LD_VAR 0 1
33056: PPUSH
33057: CALL_OW 311
33061: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33062: LD_VAR 0 4
33066: PPUSH
33067: LD_EXP 110
33071: PUSH
33072: LD_VAR 0 2
33076: ARRAY
33077: PUSH
33078: LD_INT 3
33080: ARRAY
33081: PPUSH
33082: LD_EXP 110
33086: PUSH
33087: LD_VAR 0 2
33091: ARRAY
33092: PUSH
33093: LD_INT 4
33095: ARRAY
33096: PPUSH
33097: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33101: LD_VAR 0 4
33105: PPUSH
33106: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33110: LD_VAR 0 4
33114: PPUSH
33115: LD_VAR 0 2
33119: PPUSH
33120: CALL_OW 180
// end else
33124: GO 33239
// if GetControl ( vehicle ) = control_remote then
33126: LD_VAR 0 1
33130: PPUSH
33131: CALL_OW 263
33135: PUSH
33136: LD_INT 2
33138: EQUAL
33139: IFFALSE 33200
// begin wait ( 0 0$2 ) ;
33141: LD_INT 70
33143: PPUSH
33144: CALL_OW 67
// if Connect ( vehicle ) then
33148: LD_VAR 0 1
33152: PPUSH
33153: CALL 45463 0 1
33157: IFFALSE 33198
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33159: LD_VAR 0 1
33163: PPUSH
33164: LD_EXP 110
33168: PUSH
33169: LD_VAR 0 2
33173: ARRAY
33174: PUSH
33175: LD_INT 3
33177: ARRAY
33178: PPUSH
33179: LD_EXP 110
33183: PUSH
33184: LD_VAR 0 2
33188: ARRAY
33189: PUSH
33190: LD_INT 4
33192: ARRAY
33193: PPUSH
33194: CALL_OW 171
// end else
33198: GO 33239
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33200: LD_VAR 0 1
33204: PPUSH
33205: LD_EXP 110
33209: PUSH
33210: LD_VAR 0 2
33214: ARRAY
33215: PUSH
33216: LD_INT 3
33218: ARRAY
33219: PPUSH
33220: LD_EXP 110
33224: PUSH
33225: LD_VAR 0 2
33229: ARRAY
33230: PUSH
33231: LD_INT 4
33233: ARRAY
33234: PPUSH
33235: CALL_OW 171
// end ; end ;
33239: LD_VAR 0 3
33243: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33244: LD_INT 0
33246: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33247: LD_VAR 0 1
33251: PUSH
33252: LD_INT 250
33254: EQUAL
33255: PUSH
33256: LD_VAR 0 2
33260: PPUSH
33261: CALL_OW 264
33265: PUSH
33266: LD_EXP 39
33270: EQUAL
33271: AND
33272: IFFALSE 33293
// MinerPlaceMine ( unit , x , y ) ;
33274: LD_VAR 0 2
33278: PPUSH
33279: LD_VAR 0 4
33283: PPUSH
33284: LD_VAR 0 5
33288: PPUSH
33289: CALL 36021 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33293: LD_VAR 0 1
33297: PUSH
33298: LD_INT 251
33300: EQUAL
33301: PUSH
33302: LD_VAR 0 2
33306: PPUSH
33307: CALL_OW 264
33311: PUSH
33312: LD_EXP 39
33316: EQUAL
33317: AND
33318: IFFALSE 33339
// MinerDetonateMine ( unit , x , y ) ;
33320: LD_VAR 0 2
33324: PPUSH
33325: LD_VAR 0 4
33329: PPUSH
33330: LD_VAR 0 5
33334: PPUSH
33335: CALL 36298 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33339: LD_VAR 0 1
33343: PUSH
33344: LD_INT 252
33346: EQUAL
33347: PUSH
33348: LD_VAR 0 2
33352: PPUSH
33353: CALL_OW 264
33357: PUSH
33358: LD_EXP 39
33362: EQUAL
33363: AND
33364: IFFALSE 33385
// MinerCreateMinefield ( unit , x , y ) ;
33366: LD_VAR 0 2
33370: PPUSH
33371: LD_VAR 0 4
33375: PPUSH
33376: LD_VAR 0 5
33380: PPUSH
33381: CALL 36715 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33385: LD_VAR 0 1
33389: PUSH
33390: LD_INT 253
33392: EQUAL
33393: PUSH
33394: LD_VAR 0 2
33398: PPUSH
33399: CALL_OW 257
33403: PUSH
33404: LD_INT 5
33406: EQUAL
33407: AND
33408: IFFALSE 33429
// ComBinocular ( unit , x , y ) ;
33410: LD_VAR 0 2
33414: PPUSH
33415: LD_VAR 0 4
33419: PPUSH
33420: LD_VAR 0 5
33424: PPUSH
33425: CALL 37086 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33429: LD_VAR 0 1
33433: PUSH
33434: LD_INT 254
33436: EQUAL
33437: PUSH
33438: LD_VAR 0 2
33442: PPUSH
33443: CALL_OW 264
33447: PUSH
33448: LD_EXP 34
33452: EQUAL
33453: AND
33454: PUSH
33455: LD_VAR 0 3
33459: PPUSH
33460: CALL_OW 263
33464: PUSH
33465: LD_INT 3
33467: EQUAL
33468: AND
33469: IFFALSE 33485
// HackDestroyVehicle ( unit , selectedUnit ) ;
33471: LD_VAR 0 2
33475: PPUSH
33476: LD_VAR 0 3
33480: PPUSH
33481: CALL 35381 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33485: LD_VAR 0 1
33489: PUSH
33490: LD_INT 255
33492: EQUAL
33493: PUSH
33494: LD_VAR 0 2
33498: PPUSH
33499: CALL_OW 264
33503: PUSH
33504: LD_INT 14
33506: PUSH
33507: LD_INT 53
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: IN
33514: AND
33515: PUSH
33516: LD_VAR 0 4
33520: PPUSH
33521: LD_VAR 0 5
33525: PPUSH
33526: CALL_OW 488
33530: AND
33531: IFFALSE 33555
// CutTreeXYR ( unit , x , y , 12 ) ;
33533: LD_VAR 0 2
33537: PPUSH
33538: LD_VAR 0 4
33542: PPUSH
33543: LD_VAR 0 5
33547: PPUSH
33548: LD_INT 12
33550: PPUSH
33551: CALL 33947 0 4
// if cmd = 256 then
33555: LD_VAR 0 1
33559: PUSH
33560: LD_INT 256
33562: EQUAL
33563: IFFALSE 33584
// SetFactoryWaypoint ( unit , x , y ) ;
33565: LD_VAR 0 2
33569: PPUSH
33570: LD_VAR 0 4
33574: PPUSH
33575: LD_VAR 0 5
33579: PPUSH
33580: CALL 33589 0 3
// end ;
33584: LD_VAR 0 6
33588: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33589: LD_INT 0
33591: PPUSH
33592: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33593: LD_VAR 0 1
33597: NOT
33598: PUSH
33599: LD_VAR 0 2
33603: PPUSH
33604: LD_VAR 0 3
33608: PPUSH
33609: CALL_OW 488
33613: NOT
33614: OR
33615: PUSH
33616: LD_VAR 0 1
33620: PPUSH
33621: CALL_OW 266
33625: PUSH
33626: LD_INT 3
33628: NONEQUAL
33629: PUSH
33630: LD_VAR 0 1
33634: PPUSH
33635: CALL_OW 247
33639: PUSH
33640: LD_INT 1
33642: EQUAL
33643: NOT
33644: AND
33645: OR
33646: IFFALSE 33650
// exit ;
33648: GO 33799
// if GetType ( factory ) = unit_human then
33650: LD_VAR 0 1
33654: PPUSH
33655: CALL_OW 247
33659: PUSH
33660: LD_INT 1
33662: EQUAL
33663: IFFALSE 33680
// factory := IsInUnit ( factory ) ;
33665: LD_ADDR_VAR 0 1
33669: PUSH
33670: LD_VAR 0 1
33674: PPUSH
33675: CALL_OW 310
33679: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33680: LD_VAR 0 1
33684: PPUSH
33685: CALL_OW 266
33689: PUSH
33690: LD_INT 3
33692: NONEQUAL
33693: IFFALSE 33697
// exit ;
33695: GO 33799
// if HexInfo ( x , y ) = factory then
33697: LD_VAR 0 2
33701: PPUSH
33702: LD_VAR 0 3
33706: PPUSH
33707: CALL_OW 428
33711: PUSH
33712: LD_VAR 0 1
33716: EQUAL
33717: IFFALSE 33744
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33719: LD_ADDR_EXP 110
33723: PUSH
33724: LD_EXP 110
33728: PPUSH
33729: LD_VAR 0 1
33733: PPUSH
33734: LD_INT 0
33736: PPUSH
33737: CALL_OW 1
33741: ST_TO_ADDR
33742: GO 33795
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33744: LD_ADDR_EXP 110
33748: PUSH
33749: LD_EXP 110
33753: PPUSH
33754: LD_VAR 0 1
33758: PPUSH
33759: LD_VAR 0 1
33763: PPUSH
33764: CALL_OW 255
33768: PUSH
33769: LD_VAR 0 1
33773: PUSH
33774: LD_VAR 0 2
33778: PUSH
33779: LD_VAR 0 3
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: PPUSH
33790: CALL_OW 1
33794: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33795: CALL 33804 0 0
// end ;
33799: LD_VAR 0 4
33803: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
33804: LD_INT 0
33806: PPUSH
33807: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33808: LD_STRING resetFactoryWaypoint();
33810: PPUSH
33811: CALL_OW 559
// if factoryWaypoints then
33815: LD_EXP 110
33819: IFFALSE 33942
// begin for i := 1 to factoryWaypoints do
33821: LD_ADDR_VAR 0 2
33825: PUSH
33826: DOUBLE
33827: LD_INT 1
33829: DEC
33830: ST_TO_ADDR
33831: LD_EXP 110
33835: PUSH
33836: FOR_TO
33837: IFFALSE 33940
// if factoryWaypoints [ i ] then
33839: LD_EXP 110
33843: PUSH
33844: LD_VAR 0 2
33848: ARRAY
33849: IFFALSE 33938
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
33851: LD_STRING setFactoryWaypointXY(
33853: PUSH
33854: LD_EXP 110
33858: PUSH
33859: LD_VAR 0 2
33863: ARRAY
33864: PUSH
33865: LD_INT 1
33867: ARRAY
33868: STR
33869: PUSH
33870: LD_STRING ,
33872: STR
33873: PUSH
33874: LD_EXP 110
33878: PUSH
33879: LD_VAR 0 2
33883: ARRAY
33884: PUSH
33885: LD_INT 2
33887: ARRAY
33888: STR
33889: PUSH
33890: LD_STRING ,
33892: STR
33893: PUSH
33894: LD_EXP 110
33898: PUSH
33899: LD_VAR 0 2
33903: ARRAY
33904: PUSH
33905: LD_INT 3
33907: ARRAY
33908: STR
33909: PUSH
33910: LD_STRING ,
33912: STR
33913: PUSH
33914: LD_EXP 110
33918: PUSH
33919: LD_VAR 0 2
33923: ARRAY
33924: PUSH
33925: LD_INT 4
33927: ARRAY
33928: STR
33929: PUSH
33930: LD_STRING )
33932: STR
33933: PPUSH
33934: CALL_OW 559
33938: GO 33836
33940: POP
33941: POP
// end ; end ;
33942: LD_VAR 0 1
33946: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33947: LD_INT 0
33949: PPUSH
33950: PPUSH
33951: PPUSH
33952: PPUSH
33953: PPUSH
33954: PPUSH
33955: PPUSH
33956: PPUSH
33957: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33958: LD_VAR 0 1
33962: NOT
33963: PUSH
33964: LD_VAR 0 2
33968: PPUSH
33969: LD_VAR 0 3
33973: PPUSH
33974: CALL_OW 488
33978: NOT
33979: OR
33980: PUSH
33981: LD_VAR 0 4
33985: NOT
33986: OR
33987: IFFALSE 33991
// exit ;
33989: GO 34331
// list := [ ] ;
33991: LD_ADDR_VAR 0 13
33995: PUSH
33996: EMPTY
33997: ST_TO_ADDR
// if x - r < 0 then
33998: LD_VAR 0 2
34002: PUSH
34003: LD_VAR 0 4
34007: MINUS
34008: PUSH
34009: LD_INT 0
34011: LESS
34012: IFFALSE 34024
// min_x := 0 else
34014: LD_ADDR_VAR 0 7
34018: PUSH
34019: LD_INT 0
34021: ST_TO_ADDR
34022: GO 34040
// min_x := x - r ;
34024: LD_ADDR_VAR 0 7
34028: PUSH
34029: LD_VAR 0 2
34033: PUSH
34034: LD_VAR 0 4
34038: MINUS
34039: ST_TO_ADDR
// if y - r < 0 then
34040: LD_VAR 0 3
34044: PUSH
34045: LD_VAR 0 4
34049: MINUS
34050: PUSH
34051: LD_INT 0
34053: LESS
34054: IFFALSE 34066
// min_y := 0 else
34056: LD_ADDR_VAR 0 8
34060: PUSH
34061: LD_INT 0
34063: ST_TO_ADDR
34064: GO 34082
// min_y := y - r ;
34066: LD_ADDR_VAR 0 8
34070: PUSH
34071: LD_VAR 0 3
34075: PUSH
34076: LD_VAR 0 4
34080: MINUS
34081: ST_TO_ADDR
// max_x := x + r ;
34082: LD_ADDR_VAR 0 9
34086: PUSH
34087: LD_VAR 0 2
34091: PUSH
34092: LD_VAR 0 4
34096: PLUS
34097: ST_TO_ADDR
// max_y := y + r ;
34098: LD_ADDR_VAR 0 10
34102: PUSH
34103: LD_VAR 0 3
34107: PUSH
34108: LD_VAR 0 4
34112: PLUS
34113: ST_TO_ADDR
// for _x = min_x to max_x do
34114: LD_ADDR_VAR 0 11
34118: PUSH
34119: DOUBLE
34120: LD_VAR 0 7
34124: DEC
34125: ST_TO_ADDR
34126: LD_VAR 0 9
34130: PUSH
34131: FOR_TO
34132: IFFALSE 34249
// for _y = min_y to max_y do
34134: LD_ADDR_VAR 0 12
34138: PUSH
34139: DOUBLE
34140: LD_VAR 0 8
34144: DEC
34145: ST_TO_ADDR
34146: LD_VAR 0 10
34150: PUSH
34151: FOR_TO
34152: IFFALSE 34245
// begin if not ValidHex ( _x , _y ) then
34154: LD_VAR 0 11
34158: PPUSH
34159: LD_VAR 0 12
34163: PPUSH
34164: CALL_OW 488
34168: NOT
34169: IFFALSE 34173
// continue ;
34171: GO 34151
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34173: LD_VAR 0 11
34177: PPUSH
34178: LD_VAR 0 12
34182: PPUSH
34183: CALL_OW 351
34187: PUSH
34188: LD_VAR 0 11
34192: PPUSH
34193: LD_VAR 0 12
34197: PPUSH
34198: CALL_OW 554
34202: AND
34203: IFFALSE 34243
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34205: LD_ADDR_VAR 0 13
34209: PUSH
34210: LD_VAR 0 13
34214: PPUSH
34215: LD_VAR 0 13
34219: PUSH
34220: LD_INT 1
34222: PLUS
34223: PPUSH
34224: LD_VAR 0 11
34228: PUSH
34229: LD_VAR 0 12
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PPUSH
34238: CALL_OW 2
34242: ST_TO_ADDR
// end ;
34243: GO 34151
34245: POP
34246: POP
34247: GO 34131
34249: POP
34250: POP
// if not list then
34251: LD_VAR 0 13
34255: NOT
34256: IFFALSE 34260
// exit ;
34258: GO 34331
// for i in list do
34260: LD_ADDR_VAR 0 6
34264: PUSH
34265: LD_VAR 0 13
34269: PUSH
34270: FOR_IN
34271: IFFALSE 34329
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34273: LD_VAR 0 1
34277: PPUSH
34278: LD_STRING M
34280: PUSH
34281: LD_VAR 0 6
34285: PUSH
34286: LD_INT 1
34288: ARRAY
34289: PUSH
34290: LD_VAR 0 6
34294: PUSH
34295: LD_INT 2
34297: ARRAY
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: PUSH
34320: EMPTY
34321: LIST
34322: PPUSH
34323: CALL_OW 447
34327: GO 34270
34329: POP
34330: POP
// end ;
34331: LD_VAR 0 5
34335: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34336: LD_EXP 111
34340: NOT
34341: IFFALSE 34391
34343: GO 34345
34345: DISABLE
// begin initHack := true ;
34346: LD_ADDR_EXP 111
34350: PUSH
34351: LD_INT 1
34353: ST_TO_ADDR
// hackTanks := [ ] ;
34354: LD_ADDR_EXP 112
34358: PUSH
34359: EMPTY
34360: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34361: LD_ADDR_EXP 113
34365: PUSH
34366: EMPTY
34367: ST_TO_ADDR
// hackLimit := 3 ;
34368: LD_ADDR_EXP 114
34372: PUSH
34373: LD_INT 3
34375: ST_TO_ADDR
// hackDist := 12 ;
34376: LD_ADDR_EXP 115
34380: PUSH
34381: LD_INT 12
34383: ST_TO_ADDR
// hackCounter := [ ] ;
34384: LD_ADDR_EXP 116
34388: PUSH
34389: EMPTY
34390: ST_TO_ADDR
// end ;
34391: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34392: LD_EXP 111
34396: PUSH
34397: LD_INT 34
34399: PUSH
34400: LD_EXP 34
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PPUSH
34409: CALL_OW 69
34413: AND
34414: IFFALSE 34669
34416: GO 34418
34418: DISABLE
34419: LD_INT 0
34421: PPUSH
34422: PPUSH
// begin enable ;
34423: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34424: LD_ADDR_VAR 0 1
34428: PUSH
34429: LD_INT 34
34431: PUSH
34432: LD_EXP 34
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PPUSH
34441: CALL_OW 69
34445: PUSH
34446: FOR_IN
34447: IFFALSE 34667
// begin if not i in hackTanks then
34449: LD_VAR 0 1
34453: PUSH
34454: LD_EXP 112
34458: IN
34459: NOT
34460: IFFALSE 34543
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34462: LD_ADDR_EXP 112
34466: PUSH
34467: LD_EXP 112
34471: PPUSH
34472: LD_EXP 112
34476: PUSH
34477: LD_INT 1
34479: PLUS
34480: PPUSH
34481: LD_VAR 0 1
34485: PPUSH
34486: CALL_OW 1
34490: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34491: LD_ADDR_EXP 113
34495: PUSH
34496: LD_EXP 113
34500: PPUSH
34501: LD_EXP 113
34505: PUSH
34506: LD_INT 1
34508: PLUS
34509: PPUSH
34510: EMPTY
34511: PPUSH
34512: CALL_OW 1
34516: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34517: LD_ADDR_EXP 116
34521: PUSH
34522: LD_EXP 116
34526: PPUSH
34527: LD_EXP 116
34531: PUSH
34532: LD_INT 1
34534: PLUS
34535: PPUSH
34536: EMPTY
34537: PPUSH
34538: CALL_OW 1
34542: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34543: LD_VAR 0 1
34547: PPUSH
34548: CALL_OW 302
34552: NOT
34553: IFFALSE 34566
// begin HackUnlinkAll ( i ) ;
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL 34672 0 1
// continue ;
34564: GO 34446
// end ; HackCheckCapturedStatus ( i ) ;
34566: LD_VAR 0 1
34570: PPUSH
34571: CALL 35115 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34575: LD_ADDR_VAR 0 2
34579: PUSH
34580: LD_INT 81
34582: PUSH
34583: LD_VAR 0 1
34587: PPUSH
34588: CALL_OW 255
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 33
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 91
34609: PUSH
34610: LD_VAR 0 1
34614: PUSH
34615: LD_EXP 115
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 50
34627: PUSH
34628: EMPTY
34629: LIST
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: PPUSH
34637: CALL_OW 69
34641: ST_TO_ADDR
// if not tmp then
34642: LD_VAR 0 2
34646: NOT
34647: IFFALSE 34651
// continue ;
34649: GO 34446
// HackLink ( i , tmp ) ;
34651: LD_VAR 0 1
34655: PPUSH
34656: LD_VAR 0 2
34660: PPUSH
34661: CALL 34808 0 2
// end ;
34665: GO 34446
34667: POP
34668: POP
// end ;
34669: PPOPN 2
34671: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34672: LD_INT 0
34674: PPUSH
34675: PPUSH
34676: PPUSH
// if not hack in hackTanks then
34677: LD_VAR 0 1
34681: PUSH
34682: LD_EXP 112
34686: IN
34687: NOT
34688: IFFALSE 34692
// exit ;
34690: GO 34803
// index := GetElementIndex ( hackTanks , hack ) ;
34692: LD_ADDR_VAR 0 4
34696: PUSH
34697: LD_EXP 112
34701: PPUSH
34702: LD_VAR 0 1
34706: PPUSH
34707: CALL 42277 0 2
34711: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34712: LD_EXP 113
34716: PUSH
34717: LD_VAR 0 4
34721: ARRAY
34722: IFFALSE 34803
// begin for i in hackTanksCaptured [ index ] do
34724: LD_ADDR_VAR 0 3
34728: PUSH
34729: LD_EXP 113
34733: PUSH
34734: LD_VAR 0 4
34738: ARRAY
34739: PUSH
34740: FOR_IN
34741: IFFALSE 34767
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34743: LD_VAR 0 3
34747: PUSH
34748: LD_INT 1
34750: ARRAY
34751: PPUSH
34752: LD_VAR 0 3
34756: PUSH
34757: LD_INT 2
34759: ARRAY
34760: PPUSH
34761: CALL_OW 235
34765: GO 34740
34767: POP
34768: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34769: LD_ADDR_EXP 113
34773: PUSH
34774: LD_EXP 113
34778: PPUSH
34779: LD_VAR 0 4
34783: PPUSH
34784: EMPTY
34785: PPUSH
34786: CALL_OW 1
34790: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34791: LD_VAR 0 1
34795: PPUSH
34796: LD_INT 0
34798: PPUSH
34799: CALL_OW 505
// end ; end ;
34803: LD_VAR 0 2
34807: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34808: LD_INT 0
34810: PPUSH
34811: PPUSH
34812: PPUSH
// if not hack in hackTanks or not vehicles then
34813: LD_VAR 0 1
34817: PUSH
34818: LD_EXP 112
34822: IN
34823: NOT
34824: PUSH
34825: LD_VAR 0 2
34829: NOT
34830: OR
34831: IFFALSE 34835
// exit ;
34833: GO 35110
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34835: LD_ADDR_VAR 0 2
34839: PUSH
34840: LD_VAR 0 1
34844: PPUSH
34845: LD_VAR 0 2
34849: PPUSH
34850: LD_INT 1
34852: PPUSH
34853: LD_INT 1
34855: PPUSH
34856: CALL 42927 0 4
34860: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34861: LD_ADDR_VAR 0 5
34865: PUSH
34866: LD_EXP 112
34870: PPUSH
34871: LD_VAR 0 1
34875: PPUSH
34876: CALL 42277 0 2
34880: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34881: LD_EXP 113
34885: PUSH
34886: LD_VAR 0 5
34890: ARRAY
34891: PUSH
34892: LD_EXP 114
34896: LESS
34897: IFFALSE 35086
// begin for i := 1 to vehicles do
34899: LD_ADDR_VAR 0 4
34903: PUSH
34904: DOUBLE
34905: LD_INT 1
34907: DEC
34908: ST_TO_ADDR
34909: LD_VAR 0 2
34913: PUSH
34914: FOR_TO
34915: IFFALSE 35084
// begin if hackTanksCaptured [ index ] = hackLimit then
34917: LD_EXP 113
34921: PUSH
34922: LD_VAR 0 5
34926: ARRAY
34927: PUSH
34928: LD_EXP 114
34932: EQUAL
34933: IFFALSE 34937
// break ;
34935: GO 35084
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34937: LD_ADDR_EXP 116
34941: PUSH
34942: LD_EXP 116
34946: PPUSH
34947: LD_VAR 0 5
34951: PPUSH
34952: LD_EXP 116
34956: PUSH
34957: LD_VAR 0 5
34961: ARRAY
34962: PUSH
34963: LD_INT 1
34965: PLUS
34966: PPUSH
34967: CALL_OW 1
34971: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34972: LD_ADDR_EXP 113
34976: PUSH
34977: LD_EXP 113
34981: PPUSH
34982: LD_VAR 0 5
34986: PUSH
34987: LD_EXP 113
34991: PUSH
34992: LD_VAR 0 5
34996: ARRAY
34997: PUSH
34998: LD_INT 1
35000: PLUS
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PPUSH
35006: LD_VAR 0 2
35010: PUSH
35011: LD_VAR 0 4
35015: ARRAY
35016: PUSH
35017: LD_VAR 0 2
35021: PUSH
35022: LD_VAR 0 4
35026: ARRAY
35027: PPUSH
35028: CALL_OW 255
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PPUSH
35037: CALL 42492 0 3
35041: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35042: LD_VAR 0 2
35046: PUSH
35047: LD_VAR 0 4
35051: ARRAY
35052: PPUSH
35053: LD_VAR 0 1
35057: PPUSH
35058: CALL_OW 255
35062: PPUSH
35063: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35067: LD_VAR 0 2
35071: PUSH
35072: LD_VAR 0 4
35076: ARRAY
35077: PPUSH
35078: CALL_OW 141
// end ;
35082: GO 34914
35084: POP
35085: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35086: LD_VAR 0 1
35090: PPUSH
35091: LD_EXP 113
35095: PUSH
35096: LD_VAR 0 5
35100: ARRAY
35101: PUSH
35102: LD_INT 0
35104: PLUS
35105: PPUSH
35106: CALL_OW 505
// end ;
35110: LD_VAR 0 3
35114: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35115: LD_INT 0
35117: PPUSH
35118: PPUSH
35119: PPUSH
35120: PPUSH
// if not hack in hackTanks then
35121: LD_VAR 0 1
35125: PUSH
35126: LD_EXP 112
35130: IN
35131: NOT
35132: IFFALSE 35136
// exit ;
35134: GO 35376
// index := GetElementIndex ( hackTanks , hack ) ;
35136: LD_ADDR_VAR 0 4
35140: PUSH
35141: LD_EXP 112
35145: PPUSH
35146: LD_VAR 0 1
35150: PPUSH
35151: CALL 42277 0 2
35155: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35156: LD_ADDR_VAR 0 3
35160: PUSH
35161: DOUBLE
35162: LD_EXP 113
35166: PUSH
35167: LD_VAR 0 4
35171: ARRAY
35172: INC
35173: ST_TO_ADDR
35174: LD_INT 1
35176: PUSH
35177: FOR_DOWNTO
35178: IFFALSE 35350
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35180: LD_ADDR_VAR 0 5
35184: PUSH
35185: LD_EXP 113
35189: PUSH
35190: LD_VAR 0 4
35194: ARRAY
35195: PUSH
35196: LD_VAR 0 3
35200: ARRAY
35201: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35202: LD_VAR 0 5
35206: PUSH
35207: LD_INT 1
35209: ARRAY
35210: PPUSH
35211: CALL_OW 302
35215: NOT
35216: PUSH
35217: LD_VAR 0 5
35221: PUSH
35222: LD_INT 1
35224: ARRAY
35225: PPUSH
35226: CALL_OW 255
35230: PUSH
35231: LD_VAR 0 1
35235: PPUSH
35236: CALL_OW 255
35240: NONEQUAL
35241: OR
35242: IFFALSE 35348
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35244: LD_VAR 0 5
35248: PUSH
35249: LD_INT 1
35251: ARRAY
35252: PPUSH
35253: CALL_OW 305
35257: PUSH
35258: LD_VAR 0 5
35262: PUSH
35263: LD_INT 1
35265: ARRAY
35266: PPUSH
35267: CALL_OW 255
35271: PUSH
35272: LD_VAR 0 1
35276: PPUSH
35277: CALL_OW 255
35281: EQUAL
35282: AND
35283: IFFALSE 35307
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35285: LD_VAR 0 5
35289: PUSH
35290: LD_INT 1
35292: ARRAY
35293: PPUSH
35294: LD_VAR 0 5
35298: PUSH
35299: LD_INT 2
35301: ARRAY
35302: PPUSH
35303: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35307: LD_ADDR_EXP 113
35311: PUSH
35312: LD_EXP 113
35316: PPUSH
35317: LD_VAR 0 4
35321: PPUSH
35322: LD_EXP 113
35326: PUSH
35327: LD_VAR 0 4
35331: ARRAY
35332: PPUSH
35333: LD_VAR 0 3
35337: PPUSH
35338: CALL_OW 3
35342: PPUSH
35343: CALL_OW 1
35347: ST_TO_ADDR
// end ; end ;
35348: GO 35177
35350: POP
35351: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35352: LD_VAR 0 1
35356: PPUSH
35357: LD_EXP 113
35361: PUSH
35362: LD_VAR 0 4
35366: ARRAY
35367: PUSH
35368: LD_INT 0
35370: PLUS
35371: PPUSH
35372: CALL_OW 505
// end ;
35376: LD_VAR 0 2
35380: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35381: LD_INT 0
35383: PPUSH
35384: PPUSH
35385: PPUSH
35386: PPUSH
// if not hack in hackTanks then
35387: LD_VAR 0 1
35391: PUSH
35392: LD_EXP 112
35396: IN
35397: NOT
35398: IFFALSE 35402
// exit ;
35400: GO 35487
// index := GetElementIndex ( hackTanks , hack ) ;
35402: LD_ADDR_VAR 0 5
35406: PUSH
35407: LD_EXP 112
35411: PPUSH
35412: LD_VAR 0 1
35416: PPUSH
35417: CALL 42277 0 2
35421: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35422: LD_ADDR_VAR 0 4
35426: PUSH
35427: DOUBLE
35428: LD_INT 1
35430: DEC
35431: ST_TO_ADDR
35432: LD_EXP 113
35436: PUSH
35437: LD_VAR 0 5
35441: ARRAY
35442: PUSH
35443: FOR_TO
35444: IFFALSE 35485
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35446: LD_EXP 113
35450: PUSH
35451: LD_VAR 0 5
35455: ARRAY
35456: PUSH
35457: LD_VAR 0 4
35461: ARRAY
35462: PUSH
35463: LD_INT 1
35465: ARRAY
35466: PUSH
35467: LD_VAR 0 2
35471: EQUAL
35472: IFFALSE 35483
// KillUnit ( vehicle ) ;
35474: LD_VAR 0 2
35478: PPUSH
35479: CALL_OW 66
35483: GO 35443
35485: POP
35486: POP
// end ;
35487: LD_VAR 0 3
35491: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35492: LD_EXP 117
35496: NOT
35497: IFFALSE 35532
35499: GO 35501
35501: DISABLE
// begin initMiner := true ;
35502: LD_ADDR_EXP 117
35506: PUSH
35507: LD_INT 1
35509: ST_TO_ADDR
// minersList := [ ] ;
35510: LD_ADDR_EXP 118
35514: PUSH
35515: EMPTY
35516: ST_TO_ADDR
// minerMinesList := [ ] ;
35517: LD_ADDR_EXP 119
35521: PUSH
35522: EMPTY
35523: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35524: LD_ADDR_EXP 120
35528: PUSH
35529: LD_INT 5
35531: ST_TO_ADDR
// end ;
35532: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35533: LD_EXP 117
35537: PUSH
35538: LD_INT 34
35540: PUSH
35541: LD_EXP 39
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PPUSH
35550: CALL_OW 69
35554: AND
35555: IFFALSE 36018
35557: GO 35559
35559: DISABLE
35560: LD_INT 0
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
// begin enable ;
35566: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35567: LD_ADDR_VAR 0 1
35571: PUSH
35572: LD_INT 34
35574: PUSH
35575: LD_EXP 39
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PPUSH
35584: CALL_OW 69
35588: PUSH
35589: FOR_IN
35590: IFFALSE 35662
// begin if not i in minersList then
35592: LD_VAR 0 1
35596: PUSH
35597: LD_EXP 118
35601: IN
35602: NOT
35603: IFFALSE 35660
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35605: LD_ADDR_EXP 118
35609: PUSH
35610: LD_EXP 118
35614: PPUSH
35615: LD_EXP 118
35619: PUSH
35620: LD_INT 1
35622: PLUS
35623: PPUSH
35624: LD_VAR 0 1
35628: PPUSH
35629: CALL_OW 1
35633: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35634: LD_ADDR_EXP 119
35638: PUSH
35639: LD_EXP 119
35643: PPUSH
35644: LD_EXP 119
35648: PUSH
35649: LD_INT 1
35651: PLUS
35652: PPUSH
35653: EMPTY
35654: PPUSH
35655: CALL_OW 1
35659: ST_TO_ADDR
// end end ;
35660: GO 35589
35662: POP
35663: POP
// for i := minerMinesList downto 1 do
35664: LD_ADDR_VAR 0 1
35668: PUSH
35669: DOUBLE
35670: LD_EXP 119
35674: INC
35675: ST_TO_ADDR
35676: LD_INT 1
35678: PUSH
35679: FOR_DOWNTO
35680: IFFALSE 36016
// begin if IsLive ( minersList [ i ] ) then
35682: LD_EXP 118
35686: PUSH
35687: LD_VAR 0 1
35691: ARRAY
35692: PPUSH
35693: CALL_OW 300
35697: IFFALSE 35725
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35699: LD_EXP 118
35703: PUSH
35704: LD_VAR 0 1
35708: ARRAY
35709: PPUSH
35710: LD_EXP 119
35714: PUSH
35715: LD_VAR 0 1
35719: ARRAY
35720: PPUSH
35721: CALL_OW 505
// if not minerMinesList [ i ] then
35725: LD_EXP 119
35729: PUSH
35730: LD_VAR 0 1
35734: ARRAY
35735: NOT
35736: IFFALSE 35740
// continue ;
35738: GO 35679
// for j := minerMinesList [ i ] downto 1 do
35740: LD_ADDR_VAR 0 2
35744: PUSH
35745: DOUBLE
35746: LD_EXP 119
35750: PUSH
35751: LD_VAR 0 1
35755: ARRAY
35756: INC
35757: ST_TO_ADDR
35758: LD_INT 1
35760: PUSH
35761: FOR_DOWNTO
35762: IFFALSE 36012
// begin side := GetSide ( minersList [ i ] ) ;
35764: LD_ADDR_VAR 0 3
35768: PUSH
35769: LD_EXP 118
35773: PUSH
35774: LD_VAR 0 1
35778: ARRAY
35779: PPUSH
35780: CALL_OW 255
35784: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35785: LD_ADDR_VAR 0 4
35789: PUSH
35790: LD_EXP 119
35794: PUSH
35795: LD_VAR 0 1
35799: ARRAY
35800: PUSH
35801: LD_VAR 0 2
35805: ARRAY
35806: PUSH
35807: LD_INT 1
35809: ARRAY
35810: PPUSH
35811: LD_EXP 119
35815: PUSH
35816: LD_VAR 0 1
35820: ARRAY
35821: PUSH
35822: LD_VAR 0 2
35826: ARRAY
35827: PUSH
35828: LD_INT 2
35830: ARRAY
35831: PPUSH
35832: CALL_OW 428
35836: ST_TO_ADDR
// if not tmp then
35837: LD_VAR 0 4
35841: NOT
35842: IFFALSE 35846
// continue ;
35844: GO 35761
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35846: LD_VAR 0 4
35850: PUSH
35851: LD_INT 81
35853: PUSH
35854: LD_VAR 0 3
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PPUSH
35863: CALL_OW 69
35867: IN
35868: PUSH
35869: LD_EXP 119
35873: PUSH
35874: LD_VAR 0 1
35878: ARRAY
35879: PUSH
35880: LD_VAR 0 2
35884: ARRAY
35885: PUSH
35886: LD_INT 1
35888: ARRAY
35889: PPUSH
35890: LD_EXP 119
35894: PUSH
35895: LD_VAR 0 1
35899: ARRAY
35900: PUSH
35901: LD_VAR 0 2
35905: ARRAY
35906: PUSH
35907: LD_INT 2
35909: ARRAY
35910: PPUSH
35911: CALL_OW 458
35915: AND
35916: IFFALSE 36010
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35918: LD_EXP 119
35922: PUSH
35923: LD_VAR 0 1
35927: ARRAY
35928: PUSH
35929: LD_VAR 0 2
35933: ARRAY
35934: PUSH
35935: LD_INT 1
35937: ARRAY
35938: PPUSH
35939: LD_EXP 119
35943: PUSH
35944: LD_VAR 0 1
35948: ARRAY
35949: PUSH
35950: LD_VAR 0 2
35954: ARRAY
35955: PUSH
35956: LD_INT 2
35958: ARRAY
35959: PPUSH
35960: LD_VAR 0 3
35964: PPUSH
35965: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35969: LD_ADDR_EXP 119
35973: PUSH
35974: LD_EXP 119
35978: PPUSH
35979: LD_VAR 0 1
35983: PPUSH
35984: LD_EXP 119
35988: PUSH
35989: LD_VAR 0 1
35993: ARRAY
35994: PPUSH
35995: LD_VAR 0 2
35999: PPUSH
36000: CALL_OW 3
36004: PPUSH
36005: CALL_OW 1
36009: ST_TO_ADDR
// end ; end ;
36010: GO 35761
36012: POP
36013: POP
// end ;
36014: GO 35679
36016: POP
36017: POP
// end ;
36018: PPOPN 4
36020: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36021: LD_INT 0
36023: PPUSH
36024: PPUSH
// result := false ;
36025: LD_ADDR_VAR 0 4
36029: PUSH
36030: LD_INT 0
36032: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36033: LD_VAR 0 1
36037: PPUSH
36038: CALL_OW 264
36042: PUSH
36043: LD_EXP 39
36047: EQUAL
36048: NOT
36049: IFFALSE 36053
// exit ;
36051: GO 36293
// index := GetElementIndex ( minersList , unit ) ;
36053: LD_ADDR_VAR 0 5
36057: PUSH
36058: LD_EXP 118
36062: PPUSH
36063: LD_VAR 0 1
36067: PPUSH
36068: CALL 42277 0 2
36072: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36073: LD_EXP 119
36077: PUSH
36078: LD_VAR 0 5
36082: ARRAY
36083: PUSH
36084: LD_EXP 120
36088: GREATEREQUAL
36089: IFFALSE 36093
// exit ;
36091: GO 36293
// ComMoveXY ( unit , x , y ) ;
36093: LD_VAR 0 1
36097: PPUSH
36098: LD_VAR 0 2
36102: PPUSH
36103: LD_VAR 0 3
36107: PPUSH
36108: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36112: LD_INT 35
36114: PPUSH
36115: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36119: LD_VAR 0 1
36123: PPUSH
36124: LD_VAR 0 2
36128: PPUSH
36129: LD_VAR 0 3
36133: PPUSH
36134: CALL 72996 0 3
36138: NOT
36139: PUSH
36140: LD_VAR 0 1
36144: PPUSH
36145: CALL_OW 314
36149: AND
36150: IFFALSE 36154
// exit ;
36152: GO 36293
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36154: LD_VAR 0 2
36158: PPUSH
36159: LD_VAR 0 3
36163: PPUSH
36164: CALL_OW 428
36168: PUSH
36169: LD_VAR 0 1
36173: EQUAL
36174: PUSH
36175: LD_VAR 0 1
36179: PPUSH
36180: CALL_OW 314
36184: NOT
36185: AND
36186: IFFALSE 36112
// PlaySoundXY ( x , y , PlantMine ) ;
36188: LD_VAR 0 2
36192: PPUSH
36193: LD_VAR 0 3
36197: PPUSH
36198: LD_STRING PlantMine
36200: PPUSH
36201: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36205: LD_VAR 0 2
36209: PPUSH
36210: LD_VAR 0 3
36214: PPUSH
36215: LD_VAR 0 1
36219: PPUSH
36220: CALL_OW 255
36224: PPUSH
36225: LD_INT 0
36227: PPUSH
36228: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36232: LD_ADDR_EXP 119
36236: PUSH
36237: LD_EXP 119
36241: PPUSH
36242: LD_VAR 0 5
36246: PUSH
36247: LD_EXP 119
36251: PUSH
36252: LD_VAR 0 5
36256: ARRAY
36257: PUSH
36258: LD_INT 1
36260: PLUS
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PPUSH
36266: LD_VAR 0 2
36270: PUSH
36271: LD_VAR 0 3
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PPUSH
36280: CALL 42492 0 3
36284: ST_TO_ADDR
// result := true ;
36285: LD_ADDR_VAR 0 4
36289: PUSH
36290: LD_INT 1
36292: ST_TO_ADDR
// end ;
36293: LD_VAR 0 4
36297: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36298: LD_INT 0
36300: PPUSH
36301: PPUSH
36302: PPUSH
// if not unit in minersList then
36303: LD_VAR 0 1
36307: PUSH
36308: LD_EXP 118
36312: IN
36313: NOT
36314: IFFALSE 36318
// exit ;
36316: GO 36710
// index := GetElementIndex ( minersList , unit ) ;
36318: LD_ADDR_VAR 0 6
36322: PUSH
36323: LD_EXP 118
36327: PPUSH
36328: LD_VAR 0 1
36332: PPUSH
36333: CALL 42277 0 2
36337: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36338: LD_ADDR_VAR 0 5
36342: PUSH
36343: DOUBLE
36344: LD_EXP 119
36348: PUSH
36349: LD_VAR 0 6
36353: ARRAY
36354: INC
36355: ST_TO_ADDR
36356: LD_INT 1
36358: PUSH
36359: FOR_DOWNTO
36360: IFFALSE 36521
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36362: LD_EXP 119
36366: PUSH
36367: LD_VAR 0 6
36371: ARRAY
36372: PUSH
36373: LD_VAR 0 5
36377: ARRAY
36378: PUSH
36379: LD_INT 1
36381: ARRAY
36382: PUSH
36383: LD_VAR 0 2
36387: EQUAL
36388: PUSH
36389: LD_EXP 119
36393: PUSH
36394: LD_VAR 0 6
36398: ARRAY
36399: PUSH
36400: LD_VAR 0 5
36404: ARRAY
36405: PUSH
36406: LD_INT 2
36408: ARRAY
36409: PUSH
36410: LD_VAR 0 3
36414: EQUAL
36415: AND
36416: IFFALSE 36519
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36418: LD_EXP 119
36422: PUSH
36423: LD_VAR 0 6
36427: ARRAY
36428: PUSH
36429: LD_VAR 0 5
36433: ARRAY
36434: PUSH
36435: LD_INT 1
36437: ARRAY
36438: PPUSH
36439: LD_EXP 119
36443: PUSH
36444: LD_VAR 0 6
36448: ARRAY
36449: PUSH
36450: LD_VAR 0 5
36454: ARRAY
36455: PUSH
36456: LD_INT 2
36458: ARRAY
36459: PPUSH
36460: LD_VAR 0 1
36464: PPUSH
36465: CALL_OW 255
36469: PPUSH
36470: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36474: LD_ADDR_EXP 119
36478: PUSH
36479: LD_EXP 119
36483: PPUSH
36484: LD_VAR 0 6
36488: PPUSH
36489: LD_EXP 119
36493: PUSH
36494: LD_VAR 0 6
36498: ARRAY
36499: PPUSH
36500: LD_VAR 0 5
36504: PPUSH
36505: CALL_OW 3
36509: PPUSH
36510: CALL_OW 1
36514: ST_TO_ADDR
// exit ;
36515: POP
36516: POP
36517: GO 36710
// end ; end ;
36519: GO 36359
36521: POP
36522: POP
// for i := minerMinesList [ index ] downto 1 do
36523: LD_ADDR_VAR 0 5
36527: PUSH
36528: DOUBLE
36529: LD_EXP 119
36533: PUSH
36534: LD_VAR 0 6
36538: ARRAY
36539: INC
36540: ST_TO_ADDR
36541: LD_INT 1
36543: PUSH
36544: FOR_DOWNTO
36545: IFFALSE 36708
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36547: LD_EXP 119
36551: PUSH
36552: LD_VAR 0 6
36556: ARRAY
36557: PUSH
36558: LD_VAR 0 5
36562: ARRAY
36563: PUSH
36564: LD_INT 1
36566: ARRAY
36567: PPUSH
36568: LD_EXP 119
36572: PUSH
36573: LD_VAR 0 6
36577: ARRAY
36578: PUSH
36579: LD_VAR 0 5
36583: ARRAY
36584: PUSH
36585: LD_INT 2
36587: ARRAY
36588: PPUSH
36589: LD_VAR 0 2
36593: PPUSH
36594: LD_VAR 0 3
36598: PPUSH
36599: CALL_OW 298
36603: PUSH
36604: LD_INT 6
36606: LESS
36607: IFFALSE 36706
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36609: LD_EXP 119
36613: PUSH
36614: LD_VAR 0 6
36618: ARRAY
36619: PUSH
36620: LD_VAR 0 5
36624: ARRAY
36625: PUSH
36626: LD_INT 1
36628: ARRAY
36629: PPUSH
36630: LD_EXP 119
36634: PUSH
36635: LD_VAR 0 6
36639: ARRAY
36640: PUSH
36641: LD_VAR 0 5
36645: ARRAY
36646: PUSH
36647: LD_INT 2
36649: ARRAY
36650: PPUSH
36651: LD_VAR 0 1
36655: PPUSH
36656: CALL_OW 255
36660: PPUSH
36661: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36665: LD_ADDR_EXP 119
36669: PUSH
36670: LD_EXP 119
36674: PPUSH
36675: LD_VAR 0 6
36679: PPUSH
36680: LD_EXP 119
36684: PUSH
36685: LD_VAR 0 6
36689: ARRAY
36690: PPUSH
36691: LD_VAR 0 5
36695: PPUSH
36696: CALL_OW 3
36700: PPUSH
36701: CALL_OW 1
36705: ST_TO_ADDR
// end ; end ;
36706: GO 36544
36708: POP
36709: POP
// end ;
36710: LD_VAR 0 4
36714: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36715: LD_INT 0
36717: PPUSH
36718: PPUSH
36719: PPUSH
36720: PPUSH
36721: PPUSH
36722: PPUSH
36723: PPUSH
36724: PPUSH
36725: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36726: LD_VAR 0 1
36730: PPUSH
36731: CALL_OW 264
36735: PUSH
36736: LD_EXP 39
36740: EQUAL
36741: NOT
36742: PUSH
36743: LD_VAR 0 1
36747: PUSH
36748: LD_EXP 118
36752: IN
36753: NOT
36754: OR
36755: IFFALSE 36759
// exit ;
36757: GO 37081
// index := GetElementIndex ( minersList , unit ) ;
36759: LD_ADDR_VAR 0 6
36763: PUSH
36764: LD_EXP 118
36768: PPUSH
36769: LD_VAR 0 1
36773: PPUSH
36774: CALL 42277 0 2
36778: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36779: LD_ADDR_VAR 0 8
36783: PUSH
36784: LD_EXP 120
36788: PUSH
36789: LD_EXP 119
36793: PUSH
36794: LD_VAR 0 6
36798: ARRAY
36799: MINUS
36800: ST_TO_ADDR
// if not minesFreeAmount then
36801: LD_VAR 0 8
36805: NOT
36806: IFFALSE 36810
// exit ;
36808: GO 37081
// tmp := [ ] ;
36810: LD_ADDR_VAR 0 7
36814: PUSH
36815: EMPTY
36816: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36817: LD_ADDR_VAR 0 5
36821: PUSH
36822: DOUBLE
36823: LD_INT 1
36825: DEC
36826: ST_TO_ADDR
36827: LD_VAR 0 8
36831: PUSH
36832: FOR_TO
36833: IFFALSE 37028
// begin _d := rand ( 0 , 5 ) ;
36835: LD_ADDR_VAR 0 11
36839: PUSH
36840: LD_INT 0
36842: PPUSH
36843: LD_INT 5
36845: PPUSH
36846: CALL_OW 12
36850: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36851: LD_ADDR_VAR 0 12
36855: PUSH
36856: LD_INT 2
36858: PPUSH
36859: LD_INT 6
36861: PPUSH
36862: CALL_OW 12
36866: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36867: LD_ADDR_VAR 0 9
36871: PUSH
36872: LD_VAR 0 2
36876: PPUSH
36877: LD_VAR 0 11
36881: PPUSH
36882: LD_VAR 0 12
36886: PPUSH
36887: CALL_OW 272
36891: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36892: LD_ADDR_VAR 0 10
36896: PUSH
36897: LD_VAR 0 3
36901: PPUSH
36902: LD_VAR 0 11
36906: PPUSH
36907: LD_VAR 0 12
36911: PPUSH
36912: CALL_OW 273
36916: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36917: LD_VAR 0 9
36921: PPUSH
36922: LD_VAR 0 10
36926: PPUSH
36927: CALL_OW 488
36931: PUSH
36932: LD_VAR 0 9
36936: PUSH
36937: LD_VAR 0 10
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_VAR 0 7
36950: IN
36951: NOT
36952: AND
36953: PUSH
36954: LD_VAR 0 9
36958: PPUSH
36959: LD_VAR 0 10
36963: PPUSH
36964: CALL_OW 458
36968: NOT
36969: AND
36970: IFFALSE 37012
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36972: LD_ADDR_VAR 0 7
36976: PUSH
36977: LD_VAR 0 7
36981: PPUSH
36982: LD_VAR 0 7
36986: PUSH
36987: LD_INT 1
36989: PLUS
36990: PPUSH
36991: LD_VAR 0 9
36995: PUSH
36996: LD_VAR 0 10
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PPUSH
37005: CALL_OW 1
37009: ST_TO_ADDR
37010: GO 37026
// i := i - 1 ;
37012: LD_ADDR_VAR 0 5
37016: PUSH
37017: LD_VAR 0 5
37021: PUSH
37022: LD_INT 1
37024: MINUS
37025: ST_TO_ADDR
// end ;
37026: GO 36832
37028: POP
37029: POP
// for i in tmp do
37030: LD_ADDR_VAR 0 5
37034: PUSH
37035: LD_VAR 0 7
37039: PUSH
37040: FOR_IN
37041: IFFALSE 37079
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37043: LD_VAR 0 1
37047: PPUSH
37048: LD_VAR 0 5
37052: PUSH
37053: LD_INT 1
37055: ARRAY
37056: PPUSH
37057: LD_VAR 0 5
37061: PUSH
37062: LD_INT 2
37064: ARRAY
37065: PPUSH
37066: CALL 36021 0 3
37070: NOT
37071: IFFALSE 37077
// exit ;
37073: POP
37074: POP
37075: GO 37081
37077: GO 37040
37079: POP
37080: POP
// end ;
37081: LD_VAR 0 4
37085: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37086: LD_INT 0
37088: PPUSH
37089: PPUSH
37090: PPUSH
37091: PPUSH
37092: PPUSH
37093: PPUSH
37094: PPUSH
// if not GetClass ( unit ) = class_sniper then
37095: LD_VAR 0 1
37099: PPUSH
37100: CALL_OW 257
37104: PUSH
37105: LD_INT 5
37107: EQUAL
37108: NOT
37109: IFFALSE 37113
// exit ;
37111: GO 37501
// dist := 8 ;
37113: LD_ADDR_VAR 0 5
37117: PUSH
37118: LD_INT 8
37120: ST_TO_ADDR
// viewRange := 12 ;
37121: LD_ADDR_VAR 0 7
37125: PUSH
37126: LD_INT 12
37128: ST_TO_ADDR
// side := GetSide ( unit ) ;
37129: LD_ADDR_VAR 0 6
37133: PUSH
37134: LD_VAR 0 1
37138: PPUSH
37139: CALL_OW 255
37143: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37144: LD_INT 61
37146: PPUSH
37147: LD_VAR 0 6
37151: PPUSH
37152: CALL_OW 321
37156: PUSH
37157: LD_INT 2
37159: EQUAL
37160: IFFALSE 37170
// viewRange := 16 ;
37162: LD_ADDR_VAR 0 7
37166: PUSH
37167: LD_INT 16
37169: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37170: LD_VAR 0 1
37174: PPUSH
37175: LD_VAR 0 2
37179: PPUSH
37180: LD_VAR 0 3
37184: PPUSH
37185: CALL_OW 297
37189: PUSH
37190: LD_VAR 0 5
37194: GREATER
37195: IFFALSE 37274
// begin ComMoveXY ( unit , x , y ) ;
37197: LD_VAR 0 1
37201: PPUSH
37202: LD_VAR 0 2
37206: PPUSH
37207: LD_VAR 0 3
37211: PPUSH
37212: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37216: LD_INT 35
37218: PPUSH
37219: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37223: LD_VAR 0 1
37227: PPUSH
37228: LD_VAR 0 2
37232: PPUSH
37233: LD_VAR 0 3
37237: PPUSH
37238: CALL 72996 0 3
37242: NOT
37243: IFFALSE 37247
// exit ;
37245: GO 37501
// until GetDistUnitXY ( unit , x , y ) < dist ;
37247: LD_VAR 0 1
37251: PPUSH
37252: LD_VAR 0 2
37256: PPUSH
37257: LD_VAR 0 3
37261: PPUSH
37262: CALL_OW 297
37266: PUSH
37267: LD_VAR 0 5
37271: LESS
37272: IFFALSE 37216
// end ; ComTurnXY ( unit , x , y ) ;
37274: LD_VAR 0 1
37278: PPUSH
37279: LD_VAR 0 2
37283: PPUSH
37284: LD_VAR 0 3
37288: PPUSH
37289: CALL_OW 118
// wait ( 5 ) ;
37293: LD_INT 5
37295: PPUSH
37296: CALL_OW 67
// _d := GetDir ( unit ) ;
37300: LD_ADDR_VAR 0 10
37304: PUSH
37305: LD_VAR 0 1
37309: PPUSH
37310: CALL_OW 254
37314: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37315: LD_ADDR_VAR 0 8
37319: PUSH
37320: LD_VAR 0 1
37324: PPUSH
37325: CALL_OW 250
37329: PPUSH
37330: LD_VAR 0 10
37334: PPUSH
37335: LD_VAR 0 5
37339: PPUSH
37340: CALL_OW 272
37344: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37345: LD_ADDR_VAR 0 9
37349: PUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 251
37359: PPUSH
37360: LD_VAR 0 10
37364: PPUSH
37365: LD_VAR 0 5
37369: PPUSH
37370: CALL_OW 273
37374: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37375: LD_VAR 0 8
37379: PPUSH
37380: LD_VAR 0 9
37384: PPUSH
37385: CALL_OW 488
37389: NOT
37390: IFFALSE 37394
// exit ;
37392: GO 37501
// ComAnimCustom ( unit , 1 ) ;
37394: LD_VAR 0 1
37398: PPUSH
37399: LD_INT 1
37401: PPUSH
37402: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37406: LD_VAR 0 8
37410: PPUSH
37411: LD_VAR 0 9
37415: PPUSH
37416: LD_VAR 0 6
37420: PPUSH
37421: LD_VAR 0 7
37425: PPUSH
37426: CALL_OW 330
// repeat wait ( 1 ) ;
37430: LD_INT 1
37432: PPUSH
37433: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37437: LD_VAR 0 1
37441: PPUSH
37442: CALL_OW 316
37446: PUSH
37447: LD_VAR 0 1
37451: PPUSH
37452: CALL_OW 314
37456: OR
37457: PUSH
37458: LD_VAR 0 1
37462: PPUSH
37463: CALL_OW 302
37467: NOT
37468: OR
37469: PUSH
37470: LD_VAR 0 1
37474: PPUSH
37475: CALL_OW 301
37479: OR
37480: IFFALSE 37430
// RemoveSeeing ( _x , _y , side ) ;
37482: LD_VAR 0 8
37486: PPUSH
37487: LD_VAR 0 9
37491: PPUSH
37492: LD_VAR 0 6
37496: PPUSH
37497: CALL_OW 331
// end ; end_of_file
37501: LD_VAR 0 4
37505: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37506: LD_INT 0
37508: PPUSH
37509: PPUSH
// if exist_mode then
37510: LD_VAR 0 2
37514: IFFALSE 37539
// unit := CreateCharacter ( prefix & ident ) else
37516: LD_ADDR_VAR 0 5
37520: PUSH
37521: LD_VAR 0 3
37525: PUSH
37526: LD_VAR 0 1
37530: STR
37531: PPUSH
37532: CALL_OW 34
37536: ST_TO_ADDR
37537: GO 37554
// unit := NewCharacter ( ident ) ;
37539: LD_ADDR_VAR 0 5
37543: PUSH
37544: LD_VAR 0 1
37548: PPUSH
37549: CALL_OW 25
37553: ST_TO_ADDR
// result := unit ;
37554: LD_ADDR_VAR 0 4
37558: PUSH
37559: LD_VAR 0 5
37563: ST_TO_ADDR
// end ;
37564: LD_VAR 0 4
37568: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37569: LD_INT 0
37571: PPUSH
37572: PPUSH
// if not side or not nation then
37573: LD_VAR 0 1
37577: NOT
37578: PUSH
37579: LD_VAR 0 2
37583: NOT
37584: OR
37585: IFFALSE 37589
// exit ;
37587: GO 38357
// case nation of nation_american :
37589: LD_VAR 0 2
37593: PUSH
37594: LD_INT 1
37596: DOUBLE
37597: EQUAL
37598: IFTRUE 37602
37600: GO 37816
37602: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37603: LD_ADDR_VAR 0 4
37607: PUSH
37608: LD_INT 35
37610: PUSH
37611: LD_INT 45
37613: PUSH
37614: LD_INT 46
37616: PUSH
37617: LD_INT 47
37619: PUSH
37620: LD_INT 82
37622: PUSH
37623: LD_INT 83
37625: PUSH
37626: LD_INT 84
37628: PUSH
37629: LD_INT 85
37631: PUSH
37632: LD_INT 86
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: LD_INT 2
37640: PUSH
37641: LD_INT 6
37643: PUSH
37644: LD_INT 15
37646: PUSH
37647: LD_INT 16
37649: PUSH
37650: LD_INT 7
37652: PUSH
37653: LD_INT 12
37655: PUSH
37656: LD_INT 13
37658: PUSH
37659: LD_INT 10
37661: PUSH
37662: LD_INT 14
37664: PUSH
37665: LD_INT 20
37667: PUSH
37668: LD_INT 21
37670: PUSH
37671: LD_INT 22
37673: PUSH
37674: LD_INT 25
37676: PUSH
37677: LD_INT 32
37679: PUSH
37680: LD_INT 27
37682: PUSH
37683: LD_INT 36
37685: PUSH
37686: LD_INT 69
37688: PUSH
37689: LD_INT 39
37691: PUSH
37692: LD_INT 34
37694: PUSH
37695: LD_INT 40
37697: PUSH
37698: LD_INT 48
37700: PUSH
37701: LD_INT 49
37703: PUSH
37704: LD_INT 50
37706: PUSH
37707: LD_INT 51
37709: PUSH
37710: LD_INT 52
37712: PUSH
37713: LD_INT 53
37715: PUSH
37716: LD_INT 54
37718: PUSH
37719: LD_INT 55
37721: PUSH
37722: LD_INT 56
37724: PUSH
37725: LD_INT 57
37727: PUSH
37728: LD_INT 58
37730: PUSH
37731: LD_INT 59
37733: PUSH
37734: LD_INT 60
37736: PUSH
37737: LD_INT 61
37739: PUSH
37740: LD_INT 62
37742: PUSH
37743: LD_INT 80
37745: PUSH
37746: LD_INT 82
37748: PUSH
37749: LD_INT 83
37751: PUSH
37752: LD_INT 84
37754: PUSH
37755: LD_INT 85
37757: PUSH
37758: LD_INT 86
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: ST_TO_ADDR
37814: GO 38281
37816: LD_INT 2
37818: DOUBLE
37819: EQUAL
37820: IFTRUE 37824
37822: GO 38050
37824: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37825: LD_ADDR_VAR 0 4
37829: PUSH
37830: LD_INT 35
37832: PUSH
37833: LD_INT 45
37835: PUSH
37836: LD_INT 46
37838: PUSH
37839: LD_INT 47
37841: PUSH
37842: LD_INT 82
37844: PUSH
37845: LD_INT 83
37847: PUSH
37848: LD_INT 84
37850: PUSH
37851: LD_INT 85
37853: PUSH
37854: LD_INT 87
37856: PUSH
37857: LD_INT 70
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: LD_INT 11
37865: PUSH
37866: LD_INT 3
37868: PUSH
37869: LD_INT 4
37871: PUSH
37872: LD_INT 5
37874: PUSH
37875: LD_INT 6
37877: PUSH
37878: LD_INT 15
37880: PUSH
37881: LD_INT 18
37883: PUSH
37884: LD_INT 7
37886: PUSH
37887: LD_INT 17
37889: PUSH
37890: LD_INT 8
37892: PUSH
37893: LD_INT 20
37895: PUSH
37896: LD_INT 21
37898: PUSH
37899: LD_INT 22
37901: PUSH
37902: LD_INT 72
37904: PUSH
37905: LD_INT 26
37907: PUSH
37908: LD_INT 69
37910: PUSH
37911: LD_INT 39
37913: PUSH
37914: LD_INT 40
37916: PUSH
37917: LD_INT 41
37919: PUSH
37920: LD_INT 42
37922: PUSH
37923: LD_INT 43
37925: PUSH
37926: LD_INT 48
37928: PUSH
37929: LD_INT 49
37931: PUSH
37932: LD_INT 50
37934: PUSH
37935: LD_INT 51
37937: PUSH
37938: LD_INT 52
37940: PUSH
37941: LD_INT 53
37943: PUSH
37944: LD_INT 54
37946: PUSH
37947: LD_INT 55
37949: PUSH
37950: LD_INT 56
37952: PUSH
37953: LD_INT 60
37955: PUSH
37956: LD_INT 61
37958: PUSH
37959: LD_INT 62
37961: PUSH
37962: LD_INT 66
37964: PUSH
37965: LD_INT 67
37967: PUSH
37968: LD_INT 68
37970: PUSH
37971: LD_INT 81
37973: PUSH
37974: LD_INT 82
37976: PUSH
37977: LD_INT 83
37979: PUSH
37980: LD_INT 84
37982: PUSH
37983: LD_INT 85
37985: PUSH
37986: LD_INT 87
37988: PUSH
37989: LD_INT 88
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: ST_TO_ADDR
38048: GO 38281
38050: LD_INT 3
38052: DOUBLE
38053: EQUAL
38054: IFTRUE 38058
38056: GO 38280
38058: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38059: LD_ADDR_VAR 0 4
38063: PUSH
38064: LD_INT 46
38066: PUSH
38067: LD_INT 47
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: LD_INT 2
38075: PUSH
38076: LD_INT 82
38078: PUSH
38079: LD_INT 83
38081: PUSH
38082: LD_INT 84
38084: PUSH
38085: LD_INT 85
38087: PUSH
38088: LD_INT 86
38090: PUSH
38091: LD_INT 11
38093: PUSH
38094: LD_INT 9
38096: PUSH
38097: LD_INT 20
38099: PUSH
38100: LD_INT 19
38102: PUSH
38103: LD_INT 21
38105: PUSH
38106: LD_INT 24
38108: PUSH
38109: LD_INT 22
38111: PUSH
38112: LD_INT 25
38114: PUSH
38115: LD_INT 28
38117: PUSH
38118: LD_INT 29
38120: PUSH
38121: LD_INT 30
38123: PUSH
38124: LD_INT 31
38126: PUSH
38127: LD_INT 37
38129: PUSH
38130: LD_INT 38
38132: PUSH
38133: LD_INT 32
38135: PUSH
38136: LD_INT 27
38138: PUSH
38139: LD_INT 33
38141: PUSH
38142: LD_INT 69
38144: PUSH
38145: LD_INT 39
38147: PUSH
38148: LD_INT 34
38150: PUSH
38151: LD_INT 40
38153: PUSH
38154: LD_INT 71
38156: PUSH
38157: LD_INT 23
38159: PUSH
38160: LD_INT 44
38162: PUSH
38163: LD_INT 48
38165: PUSH
38166: LD_INT 49
38168: PUSH
38169: LD_INT 50
38171: PUSH
38172: LD_INT 51
38174: PUSH
38175: LD_INT 52
38177: PUSH
38178: LD_INT 53
38180: PUSH
38181: LD_INT 54
38183: PUSH
38184: LD_INT 55
38186: PUSH
38187: LD_INT 56
38189: PUSH
38190: LD_INT 57
38192: PUSH
38193: LD_INT 58
38195: PUSH
38196: LD_INT 59
38198: PUSH
38199: LD_INT 63
38201: PUSH
38202: LD_INT 64
38204: PUSH
38205: LD_INT 65
38207: PUSH
38208: LD_INT 82
38210: PUSH
38211: LD_INT 83
38213: PUSH
38214: LD_INT 84
38216: PUSH
38217: LD_INT 85
38219: PUSH
38220: LD_INT 86
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: ST_TO_ADDR
38278: GO 38281
38280: POP
// if state > - 1 and state < 3 then
38281: LD_VAR 0 3
38285: PUSH
38286: LD_INT 1
38288: NEG
38289: GREATER
38290: PUSH
38291: LD_VAR 0 3
38295: PUSH
38296: LD_INT 3
38298: LESS
38299: AND
38300: IFFALSE 38357
// for i in result do
38302: LD_ADDR_VAR 0 5
38306: PUSH
38307: LD_VAR 0 4
38311: PUSH
38312: FOR_IN
38313: IFFALSE 38355
// if GetTech ( i , side ) <> state then
38315: LD_VAR 0 5
38319: PPUSH
38320: LD_VAR 0 1
38324: PPUSH
38325: CALL_OW 321
38329: PUSH
38330: LD_VAR 0 3
38334: NONEQUAL
38335: IFFALSE 38353
// result := result diff i ;
38337: LD_ADDR_VAR 0 4
38341: PUSH
38342: LD_VAR 0 4
38346: PUSH
38347: LD_VAR 0 5
38351: DIFF
38352: ST_TO_ADDR
38353: GO 38312
38355: POP
38356: POP
// end ;
38357: LD_VAR 0 4
38361: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38362: LD_INT 0
38364: PPUSH
38365: PPUSH
38366: PPUSH
// result := true ;
38367: LD_ADDR_VAR 0 3
38371: PUSH
38372: LD_INT 1
38374: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38375: LD_ADDR_VAR 0 5
38379: PUSH
38380: LD_VAR 0 2
38384: PPUSH
38385: CALL_OW 480
38389: ST_TO_ADDR
// if not tmp then
38390: LD_VAR 0 5
38394: NOT
38395: IFFALSE 38399
// exit ;
38397: GO 38448
// for i in tmp do
38399: LD_ADDR_VAR 0 4
38403: PUSH
38404: LD_VAR 0 5
38408: PUSH
38409: FOR_IN
38410: IFFALSE 38446
// if GetTech ( i , side ) <> state_researched then
38412: LD_VAR 0 4
38416: PPUSH
38417: LD_VAR 0 1
38421: PPUSH
38422: CALL_OW 321
38426: PUSH
38427: LD_INT 2
38429: NONEQUAL
38430: IFFALSE 38444
// begin result := false ;
38432: LD_ADDR_VAR 0 3
38436: PUSH
38437: LD_INT 0
38439: ST_TO_ADDR
// exit ;
38440: POP
38441: POP
38442: GO 38448
// end ;
38444: GO 38409
38446: POP
38447: POP
// end ;
38448: LD_VAR 0 3
38452: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38453: LD_INT 0
38455: PPUSH
38456: PPUSH
38457: PPUSH
38458: PPUSH
38459: PPUSH
38460: PPUSH
38461: PPUSH
38462: PPUSH
38463: PPUSH
38464: PPUSH
38465: PPUSH
38466: PPUSH
38467: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38468: LD_VAR 0 1
38472: NOT
38473: PUSH
38474: LD_VAR 0 1
38478: PPUSH
38479: CALL_OW 257
38483: PUSH
38484: LD_INT 9
38486: NONEQUAL
38487: OR
38488: IFFALSE 38492
// exit ;
38490: GO 39065
// side := GetSide ( unit ) ;
38492: LD_ADDR_VAR 0 9
38496: PUSH
38497: LD_VAR 0 1
38501: PPUSH
38502: CALL_OW 255
38506: ST_TO_ADDR
// tech_space := tech_spacanom ;
38507: LD_ADDR_VAR 0 12
38511: PUSH
38512: LD_INT 29
38514: ST_TO_ADDR
// tech_time := tech_taurad ;
38515: LD_ADDR_VAR 0 13
38519: PUSH
38520: LD_INT 28
38522: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38523: LD_ADDR_VAR 0 11
38527: PUSH
38528: LD_VAR 0 1
38532: PPUSH
38533: CALL_OW 310
38537: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38538: LD_VAR 0 11
38542: PPUSH
38543: CALL_OW 247
38547: PUSH
38548: LD_INT 2
38550: EQUAL
38551: IFFALSE 38555
// exit ;
38553: GO 39065
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38555: LD_ADDR_VAR 0 8
38559: PUSH
38560: LD_INT 81
38562: PUSH
38563: LD_VAR 0 9
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 3
38574: PUSH
38575: LD_INT 21
38577: PUSH
38578: LD_INT 3
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PPUSH
38593: CALL_OW 69
38597: ST_TO_ADDR
// if not tmp then
38598: LD_VAR 0 8
38602: NOT
38603: IFFALSE 38607
// exit ;
38605: GO 39065
// if in_unit then
38607: LD_VAR 0 11
38611: IFFALSE 38635
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38613: LD_ADDR_VAR 0 10
38617: PUSH
38618: LD_VAR 0 8
38622: PPUSH
38623: LD_VAR 0 11
38627: PPUSH
38628: CALL_OW 74
38632: ST_TO_ADDR
38633: GO 38655
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38635: LD_ADDR_VAR 0 10
38639: PUSH
38640: LD_VAR 0 8
38644: PPUSH
38645: LD_VAR 0 1
38649: PPUSH
38650: CALL_OW 74
38654: ST_TO_ADDR
// if not enemy then
38655: LD_VAR 0 10
38659: NOT
38660: IFFALSE 38664
// exit ;
38662: GO 39065
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38664: LD_VAR 0 11
38668: PUSH
38669: LD_VAR 0 11
38673: PPUSH
38674: LD_VAR 0 10
38678: PPUSH
38679: CALL_OW 296
38683: PUSH
38684: LD_INT 13
38686: GREATER
38687: AND
38688: PUSH
38689: LD_VAR 0 1
38693: PPUSH
38694: LD_VAR 0 10
38698: PPUSH
38699: CALL_OW 296
38703: PUSH
38704: LD_INT 12
38706: GREATER
38707: OR
38708: IFFALSE 38712
// exit ;
38710: GO 39065
// missile := [ 1 ] ;
38712: LD_ADDR_VAR 0 14
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38723: LD_VAR 0 9
38727: PPUSH
38728: LD_VAR 0 12
38732: PPUSH
38733: CALL_OW 325
38737: IFFALSE 38766
// missile := Replace ( missile , missile + 1 , 2 ) ;
38739: LD_ADDR_VAR 0 14
38743: PUSH
38744: LD_VAR 0 14
38748: PPUSH
38749: LD_VAR 0 14
38753: PUSH
38754: LD_INT 1
38756: PLUS
38757: PPUSH
38758: LD_INT 2
38760: PPUSH
38761: CALL_OW 1
38765: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38766: LD_VAR 0 9
38770: PPUSH
38771: LD_VAR 0 13
38775: PPUSH
38776: CALL_OW 325
38780: PUSH
38781: LD_VAR 0 10
38785: PPUSH
38786: CALL_OW 255
38790: PPUSH
38791: LD_VAR 0 13
38795: PPUSH
38796: CALL_OW 325
38800: NOT
38801: AND
38802: IFFALSE 38831
// missile := Replace ( missile , missile + 1 , 3 ) ;
38804: LD_ADDR_VAR 0 14
38808: PUSH
38809: LD_VAR 0 14
38813: PPUSH
38814: LD_VAR 0 14
38818: PUSH
38819: LD_INT 1
38821: PLUS
38822: PPUSH
38823: LD_INT 3
38825: PPUSH
38826: CALL_OW 1
38830: ST_TO_ADDR
// if missile < 2 then
38831: LD_VAR 0 14
38835: PUSH
38836: LD_INT 2
38838: LESS
38839: IFFALSE 38843
// exit ;
38841: GO 39065
// x := GetX ( enemy ) ;
38843: LD_ADDR_VAR 0 4
38847: PUSH
38848: LD_VAR 0 10
38852: PPUSH
38853: CALL_OW 250
38857: ST_TO_ADDR
// y := GetY ( enemy ) ;
38858: LD_ADDR_VAR 0 5
38862: PUSH
38863: LD_VAR 0 10
38867: PPUSH
38868: CALL_OW 251
38872: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38873: LD_ADDR_VAR 0 6
38877: PUSH
38878: LD_VAR 0 4
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PPUSH
38887: LD_INT 1
38889: PPUSH
38890: CALL_OW 12
38894: PLUS
38895: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38896: LD_ADDR_VAR 0 7
38900: PUSH
38901: LD_VAR 0 5
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PPUSH
38910: LD_INT 1
38912: PPUSH
38913: CALL_OW 12
38917: PLUS
38918: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38919: LD_VAR 0 6
38923: PPUSH
38924: LD_VAR 0 7
38928: PPUSH
38929: CALL_OW 488
38933: NOT
38934: IFFALSE 38956
// begin _x := x ;
38936: LD_ADDR_VAR 0 6
38940: PUSH
38941: LD_VAR 0 4
38945: ST_TO_ADDR
// _y := y ;
38946: LD_ADDR_VAR 0 7
38950: PUSH
38951: LD_VAR 0 5
38955: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38956: LD_ADDR_VAR 0 3
38960: PUSH
38961: LD_INT 1
38963: PPUSH
38964: LD_VAR 0 14
38968: PPUSH
38969: CALL_OW 12
38973: ST_TO_ADDR
// case i of 1 :
38974: LD_VAR 0 3
38978: PUSH
38979: LD_INT 1
38981: DOUBLE
38982: EQUAL
38983: IFTRUE 38987
38985: GO 39004
38987: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38988: LD_VAR 0 1
38992: PPUSH
38993: LD_VAR 0 10
38997: PPUSH
38998: CALL_OW 115
39002: GO 39065
39004: LD_INT 2
39006: DOUBLE
39007: EQUAL
39008: IFTRUE 39012
39010: GO 39034
39012: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39013: LD_VAR 0 1
39017: PPUSH
39018: LD_VAR 0 6
39022: PPUSH
39023: LD_VAR 0 7
39027: PPUSH
39028: CALL_OW 153
39032: GO 39065
39034: LD_INT 3
39036: DOUBLE
39037: EQUAL
39038: IFTRUE 39042
39040: GO 39064
39042: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39043: LD_VAR 0 1
39047: PPUSH
39048: LD_VAR 0 6
39052: PPUSH
39053: LD_VAR 0 7
39057: PPUSH
39058: CALL_OW 154
39062: GO 39065
39064: POP
// end ;
39065: LD_VAR 0 2
39069: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39070: LD_INT 0
39072: PPUSH
39073: PPUSH
39074: PPUSH
39075: PPUSH
39076: PPUSH
39077: PPUSH
// if not unit or not building then
39078: LD_VAR 0 1
39082: NOT
39083: PUSH
39084: LD_VAR 0 2
39088: NOT
39089: OR
39090: IFFALSE 39094
// exit ;
39092: GO 39252
// x := GetX ( building ) ;
39094: LD_ADDR_VAR 0 5
39098: PUSH
39099: LD_VAR 0 2
39103: PPUSH
39104: CALL_OW 250
39108: ST_TO_ADDR
// y := GetY ( building ) ;
39109: LD_ADDR_VAR 0 6
39113: PUSH
39114: LD_VAR 0 2
39118: PPUSH
39119: CALL_OW 251
39123: ST_TO_ADDR
// for i = 0 to 5 do
39124: LD_ADDR_VAR 0 4
39128: PUSH
39129: DOUBLE
39130: LD_INT 0
39132: DEC
39133: ST_TO_ADDR
39134: LD_INT 5
39136: PUSH
39137: FOR_TO
39138: IFFALSE 39250
// begin _x := ShiftX ( x , i , 3 ) ;
39140: LD_ADDR_VAR 0 7
39144: PUSH
39145: LD_VAR 0 5
39149: PPUSH
39150: LD_VAR 0 4
39154: PPUSH
39155: LD_INT 3
39157: PPUSH
39158: CALL_OW 272
39162: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39163: LD_ADDR_VAR 0 8
39167: PUSH
39168: LD_VAR 0 6
39172: PPUSH
39173: LD_VAR 0 4
39177: PPUSH
39178: LD_INT 3
39180: PPUSH
39181: CALL_OW 273
39185: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39186: LD_VAR 0 7
39190: PPUSH
39191: LD_VAR 0 8
39195: PPUSH
39196: CALL_OW 488
39200: NOT
39201: IFFALSE 39205
// continue ;
39203: GO 39137
// if HexInfo ( _x , _y ) = 0 then
39205: LD_VAR 0 7
39209: PPUSH
39210: LD_VAR 0 8
39214: PPUSH
39215: CALL_OW 428
39219: PUSH
39220: LD_INT 0
39222: EQUAL
39223: IFFALSE 39248
// begin ComMoveXY ( unit , _x , _y ) ;
39225: LD_VAR 0 1
39229: PPUSH
39230: LD_VAR 0 7
39234: PPUSH
39235: LD_VAR 0 8
39239: PPUSH
39240: CALL_OW 111
// exit ;
39244: POP
39245: POP
39246: GO 39252
// end ; end ;
39248: GO 39137
39250: POP
39251: POP
// end ;
39252: LD_VAR 0 3
39256: RET
// export function ScanBase ( side , base_area ) ; begin
39257: LD_INT 0
39259: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39260: LD_ADDR_VAR 0 3
39264: PUSH
39265: LD_VAR 0 2
39269: PPUSH
39270: LD_INT 81
39272: PUSH
39273: LD_VAR 0 1
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PPUSH
39282: CALL_OW 70
39286: ST_TO_ADDR
// end ;
39287: LD_VAR 0 3
39291: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39292: LD_INT 0
39294: PPUSH
39295: PPUSH
39296: PPUSH
39297: PPUSH
// result := false ;
39298: LD_ADDR_VAR 0 2
39302: PUSH
39303: LD_INT 0
39305: ST_TO_ADDR
// side := GetSide ( unit ) ;
39306: LD_ADDR_VAR 0 3
39310: PUSH
39311: LD_VAR 0 1
39315: PPUSH
39316: CALL_OW 255
39320: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39321: LD_ADDR_VAR 0 4
39325: PUSH
39326: LD_VAR 0 1
39330: PPUSH
39331: CALL_OW 248
39335: ST_TO_ADDR
// case nat of 1 :
39336: LD_VAR 0 4
39340: PUSH
39341: LD_INT 1
39343: DOUBLE
39344: EQUAL
39345: IFTRUE 39349
39347: GO 39360
39349: POP
// tech := tech_lassight ; 2 :
39350: LD_ADDR_VAR 0 5
39354: PUSH
39355: LD_INT 12
39357: ST_TO_ADDR
39358: GO 39399
39360: LD_INT 2
39362: DOUBLE
39363: EQUAL
39364: IFTRUE 39368
39366: GO 39379
39368: POP
// tech := tech_mortar ; 3 :
39369: LD_ADDR_VAR 0 5
39373: PUSH
39374: LD_INT 41
39376: ST_TO_ADDR
39377: GO 39399
39379: LD_INT 3
39381: DOUBLE
39382: EQUAL
39383: IFTRUE 39387
39385: GO 39398
39387: POP
// tech := tech_bazooka ; end ;
39388: LD_ADDR_VAR 0 5
39392: PUSH
39393: LD_INT 44
39395: ST_TO_ADDR
39396: GO 39399
39398: POP
// if Researched ( side , tech ) then
39399: LD_VAR 0 3
39403: PPUSH
39404: LD_VAR 0 5
39408: PPUSH
39409: CALL_OW 325
39413: IFFALSE 39440
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39415: LD_ADDR_VAR 0 2
39419: PUSH
39420: LD_INT 5
39422: PUSH
39423: LD_INT 8
39425: PUSH
39426: LD_INT 9
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: LIST
39433: PUSH
39434: LD_VAR 0 4
39438: ARRAY
39439: ST_TO_ADDR
// end ;
39440: LD_VAR 0 2
39444: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39445: LD_INT 0
39447: PPUSH
39448: PPUSH
39449: PPUSH
// if not mines then
39450: LD_VAR 0 2
39454: NOT
39455: IFFALSE 39459
// exit ;
39457: GO 39603
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39459: LD_ADDR_VAR 0 5
39463: PUSH
39464: LD_INT 81
39466: PUSH
39467: LD_VAR 0 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: LD_INT 21
39481: PUSH
39482: LD_INT 3
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PPUSH
39497: CALL_OW 69
39501: ST_TO_ADDR
// for i in mines do
39502: LD_ADDR_VAR 0 4
39506: PUSH
39507: LD_VAR 0 2
39511: PUSH
39512: FOR_IN
39513: IFFALSE 39601
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39515: LD_VAR 0 4
39519: PUSH
39520: LD_INT 1
39522: ARRAY
39523: PPUSH
39524: LD_VAR 0 4
39528: PUSH
39529: LD_INT 2
39531: ARRAY
39532: PPUSH
39533: CALL_OW 458
39537: NOT
39538: IFFALSE 39542
// continue ;
39540: GO 39512
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39542: LD_VAR 0 4
39546: PUSH
39547: LD_INT 1
39549: ARRAY
39550: PPUSH
39551: LD_VAR 0 4
39555: PUSH
39556: LD_INT 2
39558: ARRAY
39559: PPUSH
39560: CALL_OW 428
39564: PUSH
39565: LD_VAR 0 5
39569: IN
39570: IFFALSE 39599
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39572: LD_VAR 0 4
39576: PUSH
39577: LD_INT 1
39579: ARRAY
39580: PPUSH
39581: LD_VAR 0 4
39585: PUSH
39586: LD_INT 2
39588: ARRAY
39589: PPUSH
39590: LD_VAR 0 1
39594: PPUSH
39595: CALL_OW 456
// end ;
39599: GO 39512
39601: POP
39602: POP
// end ;
39603: LD_VAR 0 3
39607: RET
// export function Count ( array ) ; var i ; begin
39608: LD_INT 0
39610: PPUSH
39611: PPUSH
// result := 0 ;
39612: LD_ADDR_VAR 0 2
39616: PUSH
39617: LD_INT 0
39619: ST_TO_ADDR
// for i in array do
39620: LD_ADDR_VAR 0 3
39624: PUSH
39625: LD_VAR 0 1
39629: PUSH
39630: FOR_IN
39631: IFFALSE 39655
// if i then
39633: LD_VAR 0 3
39637: IFFALSE 39653
// result := result + 1 ;
39639: LD_ADDR_VAR 0 2
39643: PUSH
39644: LD_VAR 0 2
39648: PUSH
39649: LD_INT 1
39651: PLUS
39652: ST_TO_ADDR
39653: GO 39630
39655: POP
39656: POP
// end ;
39657: LD_VAR 0 2
39661: RET
// export function IsEmpty ( building ) ; begin
39662: LD_INT 0
39664: PPUSH
// if not building then
39665: LD_VAR 0 1
39669: NOT
39670: IFFALSE 39674
// exit ;
39672: GO 39717
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39674: LD_ADDR_VAR 0 2
39678: PUSH
39679: LD_VAR 0 1
39683: PUSH
39684: LD_INT 22
39686: PUSH
39687: LD_VAR 0 1
39691: PPUSH
39692: CALL_OW 255
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 58
39703: PUSH
39704: EMPTY
39705: LIST
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PPUSH
39711: CALL_OW 69
39715: IN
39716: ST_TO_ADDR
// end ;
39717: LD_VAR 0 2
39721: RET
// export function IsNotFull ( building ) ; begin
39722: LD_INT 0
39724: PPUSH
// if not building then
39725: LD_VAR 0 1
39729: NOT
39730: IFFALSE 39734
// exit ;
39732: GO 39753
// result := UnitsInside ( building ) < 6 ;
39734: LD_ADDR_VAR 0 2
39738: PUSH
39739: LD_VAR 0 1
39743: PPUSH
39744: CALL_OW 313
39748: PUSH
39749: LD_INT 6
39751: LESS
39752: ST_TO_ADDR
// end ;
39753: LD_VAR 0 2
39757: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39758: LD_INT 0
39760: PPUSH
39761: PPUSH
39762: PPUSH
39763: PPUSH
// tmp := [ ] ;
39764: LD_ADDR_VAR 0 3
39768: PUSH
39769: EMPTY
39770: ST_TO_ADDR
// list := [ ] ;
39771: LD_ADDR_VAR 0 5
39775: PUSH
39776: EMPTY
39777: ST_TO_ADDR
// for i = 16 to 25 do
39778: LD_ADDR_VAR 0 4
39782: PUSH
39783: DOUBLE
39784: LD_INT 16
39786: DEC
39787: ST_TO_ADDR
39788: LD_INT 25
39790: PUSH
39791: FOR_TO
39792: IFFALSE 39865
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39794: LD_ADDR_VAR 0 3
39798: PUSH
39799: LD_VAR 0 3
39803: PUSH
39804: LD_INT 22
39806: PUSH
39807: LD_VAR 0 1
39811: PPUSH
39812: CALL_OW 255
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 91
39823: PUSH
39824: LD_VAR 0 1
39828: PUSH
39829: LD_INT 6
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 30
39839: PUSH
39840: LD_VAR 0 4
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: PUSH
39854: EMPTY
39855: LIST
39856: PPUSH
39857: CALL_OW 69
39861: ADD
39862: ST_TO_ADDR
39863: GO 39791
39865: POP
39866: POP
// for i = 1 to tmp do
39867: LD_ADDR_VAR 0 4
39871: PUSH
39872: DOUBLE
39873: LD_INT 1
39875: DEC
39876: ST_TO_ADDR
39877: LD_VAR 0 3
39881: PUSH
39882: FOR_TO
39883: IFFALSE 39971
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39885: LD_ADDR_VAR 0 5
39889: PUSH
39890: LD_VAR 0 5
39894: PUSH
39895: LD_VAR 0 3
39899: PUSH
39900: LD_VAR 0 4
39904: ARRAY
39905: PPUSH
39906: CALL_OW 266
39910: PUSH
39911: LD_VAR 0 3
39915: PUSH
39916: LD_VAR 0 4
39920: ARRAY
39921: PPUSH
39922: CALL_OW 250
39926: PUSH
39927: LD_VAR 0 3
39931: PUSH
39932: LD_VAR 0 4
39936: ARRAY
39937: PPUSH
39938: CALL_OW 251
39942: PUSH
39943: LD_VAR 0 3
39947: PUSH
39948: LD_VAR 0 4
39952: ARRAY
39953: PPUSH
39954: CALL_OW 254
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: PUSH
39965: EMPTY
39966: LIST
39967: ADD
39968: ST_TO_ADDR
39969: GO 39882
39971: POP
39972: POP
// result := list ;
39973: LD_ADDR_VAR 0 2
39977: PUSH
39978: LD_VAR 0 5
39982: ST_TO_ADDR
// end ;
39983: LD_VAR 0 2
39987: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39988: LD_INT 0
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
39995: PPUSH
39996: PPUSH
// if not factory then
39997: LD_VAR 0 1
40001: NOT
40002: IFFALSE 40006
// exit ;
40004: GO 40599
// if control = control_apeman then
40006: LD_VAR 0 4
40010: PUSH
40011: LD_INT 5
40013: EQUAL
40014: IFFALSE 40123
// begin tmp := UnitsInside ( factory ) ;
40016: LD_ADDR_VAR 0 8
40020: PUSH
40021: LD_VAR 0 1
40025: PPUSH
40026: CALL_OW 313
40030: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40031: LD_VAR 0 8
40035: PPUSH
40036: LD_INT 25
40038: PUSH
40039: LD_INT 12
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PPUSH
40046: CALL_OW 72
40050: NOT
40051: IFFALSE 40061
// control := control_manual ;
40053: LD_ADDR_VAR 0 4
40057: PUSH
40058: LD_INT 1
40060: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40061: LD_ADDR_VAR 0 8
40065: PUSH
40066: LD_VAR 0 1
40070: PPUSH
40071: CALL 39758 0 1
40075: ST_TO_ADDR
// if tmp then
40076: LD_VAR 0 8
40080: IFFALSE 40123
// begin for i in tmp do
40082: LD_ADDR_VAR 0 7
40086: PUSH
40087: LD_VAR 0 8
40091: PUSH
40092: FOR_IN
40093: IFFALSE 40121
// if i [ 1 ] = b_ext_radio then
40095: LD_VAR 0 7
40099: PUSH
40100: LD_INT 1
40102: ARRAY
40103: PUSH
40104: LD_INT 22
40106: EQUAL
40107: IFFALSE 40119
// begin control := control_remote ;
40109: LD_ADDR_VAR 0 4
40113: PUSH
40114: LD_INT 2
40116: ST_TO_ADDR
// break ;
40117: GO 40121
// end ;
40119: GO 40092
40121: POP
40122: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40123: LD_VAR 0 1
40127: PPUSH
40128: LD_VAR 0 2
40132: PPUSH
40133: LD_VAR 0 3
40137: PPUSH
40138: LD_VAR 0 4
40142: PPUSH
40143: LD_VAR 0 5
40147: PPUSH
40148: CALL_OW 448
40152: IFFALSE 40187
// begin result := [ chassis , engine , control , weapon ] ;
40154: LD_ADDR_VAR 0 6
40158: PUSH
40159: LD_VAR 0 2
40163: PUSH
40164: LD_VAR 0 3
40168: PUSH
40169: LD_VAR 0 4
40173: PUSH
40174: LD_VAR 0 5
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: ST_TO_ADDR
// exit ;
40185: GO 40599
// end ; _chassis := AvailableChassisList ( factory ) ;
40187: LD_ADDR_VAR 0 9
40191: PUSH
40192: LD_VAR 0 1
40196: PPUSH
40197: CALL_OW 475
40201: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40202: LD_ADDR_VAR 0 11
40206: PUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 476
40216: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40217: LD_ADDR_VAR 0 12
40221: PUSH
40222: LD_VAR 0 1
40226: PPUSH
40227: CALL_OW 477
40231: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40232: LD_ADDR_VAR 0 10
40236: PUSH
40237: LD_VAR 0 1
40241: PPUSH
40242: CALL_OW 478
40246: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40247: LD_VAR 0 9
40251: NOT
40252: PUSH
40253: LD_VAR 0 11
40257: NOT
40258: OR
40259: PUSH
40260: LD_VAR 0 12
40264: NOT
40265: OR
40266: PUSH
40267: LD_VAR 0 10
40271: NOT
40272: OR
40273: IFFALSE 40308
// begin result := [ chassis , engine , control , weapon ] ;
40275: LD_ADDR_VAR 0 6
40279: PUSH
40280: LD_VAR 0 2
40284: PUSH
40285: LD_VAR 0 3
40289: PUSH
40290: LD_VAR 0 4
40294: PUSH
40295: LD_VAR 0 5
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: ST_TO_ADDR
// exit ;
40306: GO 40599
// end ; if not chassis in _chassis then
40308: LD_VAR 0 2
40312: PUSH
40313: LD_VAR 0 9
40317: IN
40318: NOT
40319: IFFALSE 40345
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40321: LD_ADDR_VAR 0 2
40325: PUSH
40326: LD_VAR 0 9
40330: PUSH
40331: LD_INT 1
40333: PPUSH
40334: LD_VAR 0 9
40338: PPUSH
40339: CALL_OW 12
40343: ARRAY
40344: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40345: LD_VAR 0 2
40349: PPUSH
40350: LD_VAR 0 3
40354: PPUSH
40355: CALL 40604 0 2
40359: NOT
40360: IFFALSE 40419
// repeat engine := _engine [ 1 ] ;
40362: LD_ADDR_VAR 0 3
40366: PUSH
40367: LD_VAR 0 11
40371: PUSH
40372: LD_INT 1
40374: ARRAY
40375: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40376: LD_ADDR_VAR 0 11
40380: PUSH
40381: LD_VAR 0 11
40385: PPUSH
40386: LD_INT 1
40388: PPUSH
40389: CALL_OW 3
40393: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40394: LD_VAR 0 2
40398: PPUSH
40399: LD_VAR 0 3
40403: PPUSH
40404: CALL 40604 0 2
40408: PUSH
40409: LD_VAR 0 11
40413: PUSH
40414: EMPTY
40415: EQUAL
40416: OR
40417: IFFALSE 40362
// if not control in _control then
40419: LD_VAR 0 4
40423: PUSH
40424: LD_VAR 0 12
40428: IN
40429: NOT
40430: IFFALSE 40456
// control := _control [ rand ( 1 , _control ) ] ;
40432: LD_ADDR_VAR 0 4
40436: PUSH
40437: LD_VAR 0 12
40441: PUSH
40442: LD_INT 1
40444: PPUSH
40445: LD_VAR 0 12
40449: PPUSH
40450: CALL_OW 12
40454: ARRAY
40455: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40456: LD_VAR 0 2
40460: PPUSH
40461: LD_VAR 0 5
40465: PPUSH
40466: CALL 40824 0 2
40470: NOT
40471: IFFALSE 40530
// repeat weapon := _weapon [ 1 ] ;
40473: LD_ADDR_VAR 0 5
40477: PUSH
40478: LD_VAR 0 10
40482: PUSH
40483: LD_INT 1
40485: ARRAY
40486: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40487: LD_ADDR_VAR 0 10
40491: PUSH
40492: LD_VAR 0 10
40496: PPUSH
40497: LD_INT 1
40499: PPUSH
40500: CALL_OW 3
40504: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40505: LD_VAR 0 2
40509: PPUSH
40510: LD_VAR 0 5
40514: PPUSH
40515: CALL 40824 0 2
40519: PUSH
40520: LD_VAR 0 10
40524: PUSH
40525: EMPTY
40526: EQUAL
40527: OR
40528: IFFALSE 40473
// result := [ ] ;
40530: LD_ADDR_VAR 0 6
40534: PUSH
40535: EMPTY
40536: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40537: LD_VAR 0 1
40541: PPUSH
40542: LD_VAR 0 2
40546: PPUSH
40547: LD_VAR 0 3
40551: PPUSH
40552: LD_VAR 0 4
40556: PPUSH
40557: LD_VAR 0 5
40561: PPUSH
40562: CALL_OW 448
40566: IFFALSE 40599
// result := [ chassis , engine , control , weapon ] ;
40568: LD_ADDR_VAR 0 6
40572: PUSH
40573: LD_VAR 0 2
40577: PUSH
40578: LD_VAR 0 3
40582: PUSH
40583: LD_VAR 0 4
40587: PUSH
40588: LD_VAR 0 5
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: ST_TO_ADDR
// end ;
40599: LD_VAR 0 6
40603: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40604: LD_INT 0
40606: PPUSH
// if not chassis or not engine then
40607: LD_VAR 0 1
40611: NOT
40612: PUSH
40613: LD_VAR 0 2
40617: NOT
40618: OR
40619: IFFALSE 40623
// exit ;
40621: GO 40819
// case engine of engine_solar :
40623: LD_VAR 0 2
40627: PUSH
40628: LD_INT 2
40630: DOUBLE
40631: EQUAL
40632: IFTRUE 40636
40634: GO 40674
40636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40637: LD_ADDR_VAR 0 3
40641: PUSH
40642: LD_INT 11
40644: PUSH
40645: LD_INT 12
40647: PUSH
40648: LD_INT 13
40650: PUSH
40651: LD_INT 14
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: LD_INT 3
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: ST_TO_ADDR
40672: GO 40803
40674: LD_INT 1
40676: DOUBLE
40677: EQUAL
40678: IFTRUE 40682
40680: GO 40744
40682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40683: LD_ADDR_VAR 0 3
40687: PUSH
40688: LD_INT 11
40690: PUSH
40691: LD_INT 12
40693: PUSH
40694: LD_INT 13
40696: PUSH
40697: LD_INT 14
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: LD_INT 2
40705: PUSH
40706: LD_INT 3
40708: PUSH
40709: LD_INT 4
40711: PUSH
40712: LD_INT 5
40714: PUSH
40715: LD_INT 21
40717: PUSH
40718: LD_INT 23
40720: PUSH
40721: LD_INT 22
40723: PUSH
40724: LD_INT 24
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: ST_TO_ADDR
40742: GO 40803
40744: LD_INT 3
40746: DOUBLE
40747: EQUAL
40748: IFTRUE 40752
40750: GO 40802
40752: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40753: LD_ADDR_VAR 0 3
40757: PUSH
40758: LD_INT 13
40760: PUSH
40761: LD_INT 14
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: LD_INT 4
40772: PUSH
40773: LD_INT 5
40775: PUSH
40776: LD_INT 21
40778: PUSH
40779: LD_INT 22
40781: PUSH
40782: LD_INT 23
40784: PUSH
40785: LD_INT 24
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: ST_TO_ADDR
40800: GO 40803
40802: POP
// result := ( chassis in result ) ;
40803: LD_ADDR_VAR 0 3
40807: PUSH
40808: LD_VAR 0 1
40812: PUSH
40813: LD_VAR 0 3
40817: IN
40818: ST_TO_ADDR
// end ;
40819: LD_VAR 0 3
40823: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40824: LD_INT 0
40826: PPUSH
// if not chassis or not weapon then
40827: LD_VAR 0 1
40831: NOT
40832: PUSH
40833: LD_VAR 0 2
40837: NOT
40838: OR
40839: IFFALSE 40843
// exit ;
40841: GO 41905
// case weapon of us_machine_gun :
40843: LD_VAR 0 2
40847: PUSH
40848: LD_INT 2
40850: DOUBLE
40851: EQUAL
40852: IFTRUE 40856
40854: GO 40886
40856: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40857: LD_ADDR_VAR 0 3
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: LD_INT 3
40870: PUSH
40871: LD_INT 4
40873: PUSH
40874: LD_INT 5
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: ST_TO_ADDR
40884: GO 41889
40886: LD_INT 3
40888: DOUBLE
40889: EQUAL
40890: IFTRUE 40894
40892: GO 40924
40894: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40895: LD_ADDR_VAR 0 3
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: LD_INT 4
40911: PUSH
40912: LD_INT 5
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: ST_TO_ADDR
40922: GO 41889
40924: LD_INT 11
40926: DOUBLE
40927: EQUAL
40928: IFTRUE 40932
40930: GO 40962
40932: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40933: LD_ADDR_VAR 0 3
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: LD_INT 3
40946: PUSH
40947: LD_INT 4
40949: PUSH
40950: LD_INT 5
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: ST_TO_ADDR
40960: GO 41889
40962: LD_INT 4
40964: DOUBLE
40965: EQUAL
40966: IFTRUE 40970
40968: GO 40996
40970: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40971: LD_ADDR_VAR 0 3
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: LD_INT 3
40981: PUSH
40982: LD_INT 4
40984: PUSH
40985: LD_INT 5
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: ST_TO_ADDR
40994: GO 41889
40996: LD_INT 5
40998: DOUBLE
40999: EQUAL
41000: IFTRUE 41004
41002: GO 41030
41004: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41005: LD_ADDR_VAR 0 3
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: LD_INT 3
41015: PUSH
41016: LD_INT 4
41018: PUSH
41019: LD_INT 5
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: ST_TO_ADDR
41028: GO 41889
41030: LD_INT 9
41032: DOUBLE
41033: EQUAL
41034: IFTRUE 41038
41036: GO 41064
41038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41039: LD_ADDR_VAR 0 3
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 3
41049: PUSH
41050: LD_INT 4
41052: PUSH
41053: LD_INT 5
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: ST_TO_ADDR
41062: GO 41889
41064: LD_INT 7
41066: DOUBLE
41067: EQUAL
41068: IFTRUE 41072
41070: GO 41098
41072: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41073: LD_ADDR_VAR 0 3
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: LD_INT 3
41083: PUSH
41084: LD_INT 4
41086: PUSH
41087: LD_INT 5
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: ST_TO_ADDR
41096: GO 41889
41098: LD_INT 12
41100: DOUBLE
41101: EQUAL
41102: IFTRUE 41106
41104: GO 41132
41106: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41107: LD_ADDR_VAR 0 3
41111: PUSH
41112: LD_INT 2
41114: PUSH
41115: LD_INT 3
41117: PUSH
41118: LD_INT 4
41120: PUSH
41121: LD_INT 5
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: ST_TO_ADDR
41130: GO 41889
41132: LD_INT 13
41134: DOUBLE
41135: EQUAL
41136: IFTRUE 41140
41138: GO 41166
41140: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41141: LD_ADDR_VAR 0 3
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 3
41151: PUSH
41152: LD_INT 4
41154: PUSH
41155: LD_INT 5
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: ST_TO_ADDR
41164: GO 41889
41166: LD_INT 14
41168: DOUBLE
41169: EQUAL
41170: IFTRUE 41174
41172: GO 41192
41174: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41175: LD_ADDR_VAR 0 3
41179: PUSH
41180: LD_INT 4
41182: PUSH
41183: LD_INT 5
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: ST_TO_ADDR
41190: GO 41889
41192: LD_INT 6
41194: DOUBLE
41195: EQUAL
41196: IFTRUE 41200
41198: GO 41218
41200: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41201: LD_ADDR_VAR 0 3
41205: PUSH
41206: LD_INT 4
41208: PUSH
41209: LD_INT 5
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: ST_TO_ADDR
41216: GO 41889
41218: LD_INT 10
41220: DOUBLE
41221: EQUAL
41222: IFTRUE 41226
41224: GO 41244
41226: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41227: LD_ADDR_VAR 0 3
41231: PUSH
41232: LD_INT 4
41234: PUSH
41235: LD_INT 5
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: ST_TO_ADDR
41242: GO 41889
41244: LD_INT 22
41246: DOUBLE
41247: EQUAL
41248: IFTRUE 41252
41250: GO 41278
41252: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41253: LD_ADDR_VAR 0 3
41257: PUSH
41258: LD_INT 11
41260: PUSH
41261: LD_INT 12
41263: PUSH
41264: LD_INT 13
41266: PUSH
41267: LD_INT 14
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: ST_TO_ADDR
41276: GO 41889
41278: LD_INT 23
41280: DOUBLE
41281: EQUAL
41282: IFTRUE 41286
41284: GO 41312
41286: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41287: LD_ADDR_VAR 0 3
41291: PUSH
41292: LD_INT 11
41294: PUSH
41295: LD_INT 12
41297: PUSH
41298: LD_INT 13
41300: PUSH
41301: LD_INT 14
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: ST_TO_ADDR
41310: GO 41889
41312: LD_INT 24
41314: DOUBLE
41315: EQUAL
41316: IFTRUE 41320
41318: GO 41346
41320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41321: LD_ADDR_VAR 0 3
41325: PUSH
41326: LD_INT 11
41328: PUSH
41329: LD_INT 12
41331: PUSH
41332: LD_INT 13
41334: PUSH
41335: LD_INT 14
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: ST_TO_ADDR
41344: GO 41889
41346: LD_INT 30
41348: DOUBLE
41349: EQUAL
41350: IFTRUE 41354
41352: GO 41380
41354: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41355: LD_ADDR_VAR 0 3
41359: PUSH
41360: LD_INT 11
41362: PUSH
41363: LD_INT 12
41365: PUSH
41366: LD_INT 13
41368: PUSH
41369: LD_INT 14
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: ST_TO_ADDR
41378: GO 41889
41380: LD_INT 25
41382: DOUBLE
41383: EQUAL
41384: IFTRUE 41388
41386: GO 41406
41388: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41389: LD_ADDR_VAR 0 3
41393: PUSH
41394: LD_INT 13
41396: PUSH
41397: LD_INT 14
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: ST_TO_ADDR
41404: GO 41889
41406: LD_INT 27
41408: DOUBLE
41409: EQUAL
41410: IFTRUE 41414
41412: GO 41432
41414: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41415: LD_ADDR_VAR 0 3
41419: PUSH
41420: LD_INT 13
41422: PUSH
41423: LD_INT 14
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: ST_TO_ADDR
41430: GO 41889
41432: LD_EXP 37
41436: DOUBLE
41437: EQUAL
41438: IFTRUE 41442
41440: GO 41468
41442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41443: LD_ADDR_VAR 0 3
41447: PUSH
41448: LD_INT 11
41450: PUSH
41451: LD_INT 12
41453: PUSH
41454: LD_INT 13
41456: PUSH
41457: LD_INT 14
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: ST_TO_ADDR
41466: GO 41889
41468: LD_INT 28
41470: DOUBLE
41471: EQUAL
41472: IFTRUE 41476
41474: GO 41494
41476: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41477: LD_ADDR_VAR 0 3
41481: PUSH
41482: LD_INT 13
41484: PUSH
41485: LD_INT 14
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: ST_TO_ADDR
41492: GO 41889
41494: LD_INT 29
41496: DOUBLE
41497: EQUAL
41498: IFTRUE 41502
41500: GO 41520
41502: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41503: LD_ADDR_VAR 0 3
41507: PUSH
41508: LD_INT 13
41510: PUSH
41511: LD_INT 14
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: ST_TO_ADDR
41518: GO 41889
41520: LD_INT 31
41522: DOUBLE
41523: EQUAL
41524: IFTRUE 41528
41526: GO 41546
41528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41529: LD_ADDR_VAR 0 3
41533: PUSH
41534: LD_INT 13
41536: PUSH
41537: LD_INT 14
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: ST_TO_ADDR
41544: GO 41889
41546: LD_INT 26
41548: DOUBLE
41549: EQUAL
41550: IFTRUE 41554
41552: GO 41572
41554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41555: LD_ADDR_VAR 0 3
41559: PUSH
41560: LD_INT 13
41562: PUSH
41563: LD_INT 14
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: ST_TO_ADDR
41570: GO 41889
41572: LD_INT 42
41574: DOUBLE
41575: EQUAL
41576: IFTRUE 41580
41578: GO 41606
41580: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41581: LD_ADDR_VAR 0 3
41585: PUSH
41586: LD_INT 21
41588: PUSH
41589: LD_INT 22
41591: PUSH
41592: LD_INT 23
41594: PUSH
41595: LD_INT 24
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: ST_TO_ADDR
41604: GO 41889
41606: LD_INT 43
41608: DOUBLE
41609: EQUAL
41610: IFTRUE 41614
41612: GO 41640
41614: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41615: LD_ADDR_VAR 0 3
41619: PUSH
41620: LD_INT 21
41622: PUSH
41623: LD_INT 22
41625: PUSH
41626: LD_INT 23
41628: PUSH
41629: LD_INT 24
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: ST_TO_ADDR
41638: GO 41889
41640: LD_INT 44
41642: DOUBLE
41643: EQUAL
41644: IFTRUE 41648
41646: GO 41674
41648: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41649: LD_ADDR_VAR 0 3
41653: PUSH
41654: LD_INT 21
41656: PUSH
41657: LD_INT 22
41659: PUSH
41660: LD_INT 23
41662: PUSH
41663: LD_INT 24
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: ST_TO_ADDR
41672: GO 41889
41674: LD_INT 45
41676: DOUBLE
41677: EQUAL
41678: IFTRUE 41682
41680: GO 41708
41682: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41683: LD_ADDR_VAR 0 3
41687: PUSH
41688: LD_INT 21
41690: PUSH
41691: LD_INT 22
41693: PUSH
41694: LD_INT 23
41696: PUSH
41697: LD_INT 24
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: ST_TO_ADDR
41706: GO 41889
41708: LD_INT 49
41710: DOUBLE
41711: EQUAL
41712: IFTRUE 41716
41714: GO 41742
41716: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41717: LD_ADDR_VAR 0 3
41721: PUSH
41722: LD_INT 21
41724: PUSH
41725: LD_INT 22
41727: PUSH
41728: LD_INT 23
41730: PUSH
41731: LD_INT 24
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: ST_TO_ADDR
41740: GO 41889
41742: LD_INT 51
41744: DOUBLE
41745: EQUAL
41746: IFTRUE 41750
41748: GO 41776
41750: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41751: LD_ADDR_VAR 0 3
41755: PUSH
41756: LD_INT 21
41758: PUSH
41759: LD_INT 22
41761: PUSH
41762: LD_INT 23
41764: PUSH
41765: LD_INT 24
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: ST_TO_ADDR
41774: GO 41889
41776: LD_INT 52
41778: DOUBLE
41779: EQUAL
41780: IFTRUE 41784
41782: GO 41810
41784: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41785: LD_ADDR_VAR 0 3
41789: PUSH
41790: LD_INT 21
41792: PUSH
41793: LD_INT 22
41795: PUSH
41796: LD_INT 23
41798: PUSH
41799: LD_INT 24
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: ST_TO_ADDR
41808: GO 41889
41810: LD_INT 53
41812: DOUBLE
41813: EQUAL
41814: IFTRUE 41818
41816: GO 41836
41818: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41819: LD_ADDR_VAR 0 3
41823: PUSH
41824: LD_INT 23
41826: PUSH
41827: LD_INT 24
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: ST_TO_ADDR
41834: GO 41889
41836: LD_INT 46
41838: DOUBLE
41839: EQUAL
41840: IFTRUE 41844
41842: GO 41862
41844: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41845: LD_ADDR_VAR 0 3
41849: PUSH
41850: LD_INT 23
41852: PUSH
41853: LD_INT 24
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: ST_TO_ADDR
41860: GO 41889
41862: LD_INT 47
41864: DOUBLE
41865: EQUAL
41866: IFTRUE 41870
41868: GO 41888
41870: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41871: LD_ADDR_VAR 0 3
41875: PUSH
41876: LD_INT 23
41878: PUSH
41879: LD_INT 24
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: ST_TO_ADDR
41886: GO 41889
41888: POP
// result := ( chassis in result ) ;
41889: LD_ADDR_VAR 0 3
41893: PUSH
41894: LD_VAR 0 1
41898: PUSH
41899: LD_VAR 0 3
41903: IN
41904: ST_TO_ADDR
// end ;
41905: LD_VAR 0 3
41909: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41910: LD_INT 0
41912: PPUSH
41913: PPUSH
41914: PPUSH
41915: PPUSH
41916: PPUSH
41917: PPUSH
41918: PPUSH
// result := array ;
41919: LD_ADDR_VAR 0 5
41923: PUSH
41924: LD_VAR 0 1
41928: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41929: LD_VAR 0 1
41933: NOT
41934: PUSH
41935: LD_VAR 0 2
41939: NOT
41940: OR
41941: PUSH
41942: LD_VAR 0 3
41946: NOT
41947: OR
41948: PUSH
41949: LD_VAR 0 2
41953: PUSH
41954: LD_VAR 0 1
41958: GREATER
41959: OR
41960: PUSH
41961: LD_VAR 0 3
41965: PUSH
41966: LD_VAR 0 1
41970: GREATER
41971: OR
41972: IFFALSE 41976
// exit ;
41974: GO 42272
// if direction then
41976: LD_VAR 0 4
41980: IFFALSE 42044
// begin d := 1 ;
41982: LD_ADDR_VAR 0 9
41986: PUSH
41987: LD_INT 1
41989: ST_TO_ADDR
// if i_from > i_to then
41990: LD_VAR 0 2
41994: PUSH
41995: LD_VAR 0 3
41999: GREATER
42000: IFFALSE 42026
// length := ( array - i_from ) + i_to else
42002: LD_ADDR_VAR 0 11
42006: PUSH
42007: LD_VAR 0 1
42011: PUSH
42012: LD_VAR 0 2
42016: MINUS
42017: PUSH
42018: LD_VAR 0 3
42022: PLUS
42023: ST_TO_ADDR
42024: GO 42042
// length := i_to - i_from ;
42026: LD_ADDR_VAR 0 11
42030: PUSH
42031: LD_VAR 0 3
42035: PUSH
42036: LD_VAR 0 2
42040: MINUS
42041: ST_TO_ADDR
// end else
42042: GO 42105
// begin d := - 1 ;
42044: LD_ADDR_VAR 0 9
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: ST_TO_ADDR
// if i_from > i_to then
42053: LD_VAR 0 2
42057: PUSH
42058: LD_VAR 0 3
42062: GREATER
42063: IFFALSE 42083
// length := i_from - i_to else
42065: LD_ADDR_VAR 0 11
42069: PUSH
42070: LD_VAR 0 2
42074: PUSH
42075: LD_VAR 0 3
42079: MINUS
42080: ST_TO_ADDR
42081: GO 42105
// length := ( array - i_to ) + i_from ;
42083: LD_ADDR_VAR 0 11
42087: PUSH
42088: LD_VAR 0 1
42092: PUSH
42093: LD_VAR 0 3
42097: MINUS
42098: PUSH
42099: LD_VAR 0 2
42103: PLUS
42104: ST_TO_ADDR
// end ; if not length then
42105: LD_VAR 0 11
42109: NOT
42110: IFFALSE 42114
// exit ;
42112: GO 42272
// tmp := array ;
42114: LD_ADDR_VAR 0 10
42118: PUSH
42119: LD_VAR 0 1
42123: ST_TO_ADDR
// for i = 1 to length do
42124: LD_ADDR_VAR 0 6
42128: PUSH
42129: DOUBLE
42130: LD_INT 1
42132: DEC
42133: ST_TO_ADDR
42134: LD_VAR 0 11
42138: PUSH
42139: FOR_TO
42140: IFFALSE 42260
// begin for j = 1 to array do
42142: LD_ADDR_VAR 0 7
42146: PUSH
42147: DOUBLE
42148: LD_INT 1
42150: DEC
42151: ST_TO_ADDR
42152: LD_VAR 0 1
42156: PUSH
42157: FOR_TO
42158: IFFALSE 42246
// begin k := j + d ;
42160: LD_ADDR_VAR 0 8
42164: PUSH
42165: LD_VAR 0 7
42169: PUSH
42170: LD_VAR 0 9
42174: PLUS
42175: ST_TO_ADDR
// if k > array then
42176: LD_VAR 0 8
42180: PUSH
42181: LD_VAR 0 1
42185: GREATER
42186: IFFALSE 42196
// k := 1 ;
42188: LD_ADDR_VAR 0 8
42192: PUSH
42193: LD_INT 1
42195: ST_TO_ADDR
// if not k then
42196: LD_VAR 0 8
42200: NOT
42201: IFFALSE 42213
// k := array ;
42203: LD_ADDR_VAR 0 8
42207: PUSH
42208: LD_VAR 0 1
42212: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42213: LD_ADDR_VAR 0 10
42217: PUSH
42218: LD_VAR 0 10
42222: PPUSH
42223: LD_VAR 0 8
42227: PPUSH
42228: LD_VAR 0 1
42232: PUSH
42233: LD_VAR 0 7
42237: ARRAY
42238: PPUSH
42239: CALL_OW 1
42243: ST_TO_ADDR
// end ;
42244: GO 42157
42246: POP
42247: POP
// array := tmp ;
42248: LD_ADDR_VAR 0 1
42252: PUSH
42253: LD_VAR 0 10
42257: ST_TO_ADDR
// end ;
42258: GO 42139
42260: POP
42261: POP
// result := array ;
42262: LD_ADDR_VAR 0 5
42266: PUSH
42267: LD_VAR 0 1
42271: ST_TO_ADDR
// end ;
42272: LD_VAR 0 5
42276: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42277: LD_INT 0
42279: PPUSH
42280: PPUSH
// result := 0 ;
42281: LD_ADDR_VAR 0 3
42285: PUSH
42286: LD_INT 0
42288: ST_TO_ADDR
// if not array or not value in array then
42289: LD_VAR 0 1
42293: NOT
42294: PUSH
42295: LD_VAR 0 2
42299: PUSH
42300: LD_VAR 0 1
42304: IN
42305: NOT
42306: OR
42307: IFFALSE 42311
// exit ;
42309: GO 42365
// for i = 1 to array do
42311: LD_ADDR_VAR 0 4
42315: PUSH
42316: DOUBLE
42317: LD_INT 1
42319: DEC
42320: ST_TO_ADDR
42321: LD_VAR 0 1
42325: PUSH
42326: FOR_TO
42327: IFFALSE 42363
// if value = array [ i ] then
42329: LD_VAR 0 2
42333: PUSH
42334: LD_VAR 0 1
42338: PUSH
42339: LD_VAR 0 4
42343: ARRAY
42344: EQUAL
42345: IFFALSE 42361
// begin result := i ;
42347: LD_ADDR_VAR 0 3
42351: PUSH
42352: LD_VAR 0 4
42356: ST_TO_ADDR
// exit ;
42357: POP
42358: POP
42359: GO 42365
// end ;
42361: GO 42326
42363: POP
42364: POP
// end ;
42365: LD_VAR 0 3
42369: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42370: LD_INT 0
42372: PPUSH
// vc_chassis := chassis ;
42373: LD_ADDR_OWVAR 37
42377: PUSH
42378: LD_VAR 0 1
42382: ST_TO_ADDR
// vc_engine := engine ;
42383: LD_ADDR_OWVAR 39
42387: PUSH
42388: LD_VAR 0 2
42392: ST_TO_ADDR
// vc_control := control ;
42393: LD_ADDR_OWVAR 38
42397: PUSH
42398: LD_VAR 0 3
42402: ST_TO_ADDR
// vc_weapon := weapon ;
42403: LD_ADDR_OWVAR 40
42407: PUSH
42408: LD_VAR 0 4
42412: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42413: LD_ADDR_OWVAR 41
42417: PUSH
42418: LD_VAR 0 5
42422: ST_TO_ADDR
// end ;
42423: LD_VAR 0 6
42427: RET
// export function WantPlant ( unit ) ; var task ; begin
42428: LD_INT 0
42430: PPUSH
42431: PPUSH
// result := false ;
42432: LD_ADDR_VAR 0 2
42436: PUSH
42437: LD_INT 0
42439: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42440: LD_ADDR_VAR 0 3
42444: PUSH
42445: LD_VAR 0 1
42449: PPUSH
42450: CALL_OW 437
42454: ST_TO_ADDR
// if task then
42455: LD_VAR 0 3
42459: IFFALSE 42487
// if task [ 1 ] [ 1 ] = p then
42461: LD_VAR 0 3
42465: PUSH
42466: LD_INT 1
42468: ARRAY
42469: PUSH
42470: LD_INT 1
42472: ARRAY
42473: PUSH
42474: LD_STRING p
42476: EQUAL
42477: IFFALSE 42487
// result := true ;
42479: LD_ADDR_VAR 0 2
42483: PUSH
42484: LD_INT 1
42486: ST_TO_ADDR
// end ;
42487: LD_VAR 0 2
42491: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42492: LD_INT 0
42494: PPUSH
42495: PPUSH
42496: PPUSH
42497: PPUSH
// if pos < 1 then
42498: LD_VAR 0 2
42502: PUSH
42503: LD_INT 1
42505: LESS
42506: IFFALSE 42510
// exit ;
42508: GO 42813
// if pos = 1 then
42510: LD_VAR 0 2
42514: PUSH
42515: LD_INT 1
42517: EQUAL
42518: IFFALSE 42551
// result := Replace ( arr , pos [ 1 ] , value ) else
42520: LD_ADDR_VAR 0 4
42524: PUSH
42525: LD_VAR 0 1
42529: PPUSH
42530: LD_VAR 0 2
42534: PUSH
42535: LD_INT 1
42537: ARRAY
42538: PPUSH
42539: LD_VAR 0 3
42543: PPUSH
42544: CALL_OW 1
42548: ST_TO_ADDR
42549: GO 42813
// begin tmp := arr ;
42551: LD_ADDR_VAR 0 6
42555: PUSH
42556: LD_VAR 0 1
42560: ST_TO_ADDR
// s_arr := [ tmp ] ;
42561: LD_ADDR_VAR 0 7
42565: PUSH
42566: LD_VAR 0 6
42570: PUSH
42571: EMPTY
42572: LIST
42573: ST_TO_ADDR
// for i = 1 to pos - 1 do
42574: LD_ADDR_VAR 0 5
42578: PUSH
42579: DOUBLE
42580: LD_INT 1
42582: DEC
42583: ST_TO_ADDR
42584: LD_VAR 0 2
42588: PUSH
42589: LD_INT 1
42591: MINUS
42592: PUSH
42593: FOR_TO
42594: IFFALSE 42639
// begin tmp := tmp [ pos [ i ] ] ;
42596: LD_ADDR_VAR 0 6
42600: PUSH
42601: LD_VAR 0 6
42605: PUSH
42606: LD_VAR 0 2
42610: PUSH
42611: LD_VAR 0 5
42615: ARRAY
42616: ARRAY
42617: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42618: LD_ADDR_VAR 0 7
42622: PUSH
42623: LD_VAR 0 7
42627: PUSH
42628: LD_VAR 0 6
42632: PUSH
42633: EMPTY
42634: LIST
42635: ADD
42636: ST_TO_ADDR
// end ;
42637: GO 42593
42639: POP
42640: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42641: LD_ADDR_VAR 0 6
42645: PUSH
42646: LD_VAR 0 6
42650: PPUSH
42651: LD_VAR 0 2
42655: PUSH
42656: LD_VAR 0 2
42660: ARRAY
42661: PPUSH
42662: LD_VAR 0 3
42666: PPUSH
42667: CALL_OW 1
42671: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42672: LD_ADDR_VAR 0 7
42676: PUSH
42677: LD_VAR 0 7
42681: PPUSH
42682: LD_VAR 0 7
42686: PPUSH
42687: LD_VAR 0 6
42691: PPUSH
42692: CALL_OW 1
42696: ST_TO_ADDR
// for i = s_arr downto 2 do
42697: LD_ADDR_VAR 0 5
42701: PUSH
42702: DOUBLE
42703: LD_VAR 0 7
42707: INC
42708: ST_TO_ADDR
42709: LD_INT 2
42711: PUSH
42712: FOR_DOWNTO
42713: IFFALSE 42797
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42715: LD_ADDR_VAR 0 6
42719: PUSH
42720: LD_VAR 0 7
42724: PUSH
42725: LD_VAR 0 5
42729: PUSH
42730: LD_INT 1
42732: MINUS
42733: ARRAY
42734: PPUSH
42735: LD_VAR 0 2
42739: PUSH
42740: LD_VAR 0 5
42744: PUSH
42745: LD_INT 1
42747: MINUS
42748: ARRAY
42749: PPUSH
42750: LD_VAR 0 7
42754: PUSH
42755: LD_VAR 0 5
42759: ARRAY
42760: PPUSH
42761: CALL_OW 1
42765: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42766: LD_ADDR_VAR 0 7
42770: PUSH
42771: LD_VAR 0 7
42775: PPUSH
42776: LD_VAR 0 5
42780: PUSH
42781: LD_INT 1
42783: MINUS
42784: PPUSH
42785: LD_VAR 0 6
42789: PPUSH
42790: CALL_OW 1
42794: ST_TO_ADDR
// end ;
42795: GO 42712
42797: POP
42798: POP
// result := s_arr [ 1 ] ;
42799: LD_ADDR_VAR 0 4
42803: PUSH
42804: LD_VAR 0 7
42808: PUSH
42809: LD_INT 1
42811: ARRAY
42812: ST_TO_ADDR
// end ; end ;
42813: LD_VAR 0 4
42817: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42818: LD_INT 0
42820: PPUSH
42821: PPUSH
// if not list then
42822: LD_VAR 0 1
42826: NOT
42827: IFFALSE 42831
// exit ;
42829: GO 42922
// i := list [ pos1 ] ;
42831: LD_ADDR_VAR 0 5
42835: PUSH
42836: LD_VAR 0 1
42840: PUSH
42841: LD_VAR 0 2
42845: ARRAY
42846: ST_TO_ADDR
// if not i then
42847: LD_VAR 0 5
42851: NOT
42852: IFFALSE 42856
// exit ;
42854: GO 42922
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42856: LD_ADDR_VAR 0 1
42860: PUSH
42861: LD_VAR 0 1
42865: PPUSH
42866: LD_VAR 0 2
42870: PPUSH
42871: LD_VAR 0 1
42875: PUSH
42876: LD_VAR 0 3
42880: ARRAY
42881: PPUSH
42882: CALL_OW 1
42886: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42887: LD_ADDR_VAR 0 1
42891: PUSH
42892: LD_VAR 0 1
42896: PPUSH
42897: LD_VAR 0 3
42901: PPUSH
42902: LD_VAR 0 5
42906: PPUSH
42907: CALL_OW 1
42911: ST_TO_ADDR
// result := list ;
42912: LD_ADDR_VAR 0 4
42916: PUSH
42917: LD_VAR 0 1
42921: ST_TO_ADDR
// end ;
42922: LD_VAR 0 4
42926: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42927: LD_INT 0
42929: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42930: LD_ADDR_VAR 0 5
42934: PUSH
42935: LD_VAR 0 1
42939: PPUSH
42940: CALL_OW 250
42944: PPUSH
42945: LD_VAR 0 1
42949: PPUSH
42950: CALL_OW 251
42954: PPUSH
42955: LD_VAR 0 2
42959: PPUSH
42960: LD_VAR 0 3
42964: PPUSH
42965: LD_VAR 0 4
42969: PPUSH
42970: CALL 42980 0 5
42974: ST_TO_ADDR
// end ;
42975: LD_VAR 0 5
42979: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42980: LD_INT 0
42982: PPUSH
42983: PPUSH
42984: PPUSH
42985: PPUSH
// if not list then
42986: LD_VAR 0 3
42990: NOT
42991: IFFALSE 42995
// exit ;
42993: GO 43383
// result := [ ] ;
42995: LD_ADDR_VAR 0 6
42999: PUSH
43000: EMPTY
43001: ST_TO_ADDR
// for i in list do
43002: LD_ADDR_VAR 0 7
43006: PUSH
43007: LD_VAR 0 3
43011: PUSH
43012: FOR_IN
43013: IFFALSE 43215
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43015: LD_ADDR_VAR 0 9
43019: PUSH
43020: LD_VAR 0 7
43024: PPUSH
43025: LD_VAR 0 1
43029: PPUSH
43030: LD_VAR 0 2
43034: PPUSH
43035: CALL_OW 297
43039: ST_TO_ADDR
// if not result then
43040: LD_VAR 0 6
43044: NOT
43045: IFFALSE 43071
// result := [ [ i , tmp ] ] else
43047: LD_ADDR_VAR 0 6
43051: PUSH
43052: LD_VAR 0 7
43056: PUSH
43057: LD_VAR 0 9
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: EMPTY
43067: LIST
43068: ST_TO_ADDR
43069: GO 43213
// begin if result [ result ] [ 2 ] < tmp then
43071: LD_VAR 0 6
43075: PUSH
43076: LD_VAR 0 6
43080: ARRAY
43081: PUSH
43082: LD_INT 2
43084: ARRAY
43085: PUSH
43086: LD_VAR 0 9
43090: LESS
43091: IFFALSE 43133
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43093: LD_ADDR_VAR 0 6
43097: PUSH
43098: LD_VAR 0 6
43102: PPUSH
43103: LD_VAR 0 6
43107: PUSH
43108: LD_INT 1
43110: PLUS
43111: PPUSH
43112: LD_VAR 0 7
43116: PUSH
43117: LD_VAR 0 9
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PPUSH
43126: CALL_OW 2
43130: ST_TO_ADDR
43131: GO 43213
// for j = 1 to result do
43133: LD_ADDR_VAR 0 8
43137: PUSH
43138: DOUBLE
43139: LD_INT 1
43141: DEC
43142: ST_TO_ADDR
43143: LD_VAR 0 6
43147: PUSH
43148: FOR_TO
43149: IFFALSE 43211
// begin if tmp < result [ j ] [ 2 ] then
43151: LD_VAR 0 9
43155: PUSH
43156: LD_VAR 0 6
43160: PUSH
43161: LD_VAR 0 8
43165: ARRAY
43166: PUSH
43167: LD_INT 2
43169: ARRAY
43170: LESS
43171: IFFALSE 43209
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43173: LD_ADDR_VAR 0 6
43177: PUSH
43178: LD_VAR 0 6
43182: PPUSH
43183: LD_VAR 0 8
43187: PPUSH
43188: LD_VAR 0 7
43192: PUSH
43193: LD_VAR 0 9
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PPUSH
43202: CALL_OW 2
43206: ST_TO_ADDR
// break ;
43207: GO 43211
// end ; end ;
43209: GO 43148
43211: POP
43212: POP
// end ; end ;
43213: GO 43012
43215: POP
43216: POP
// if result and not asc then
43217: LD_VAR 0 6
43221: PUSH
43222: LD_VAR 0 4
43226: NOT
43227: AND
43228: IFFALSE 43303
// begin tmp := result ;
43230: LD_ADDR_VAR 0 9
43234: PUSH
43235: LD_VAR 0 6
43239: ST_TO_ADDR
// for i = tmp downto 1 do
43240: LD_ADDR_VAR 0 7
43244: PUSH
43245: DOUBLE
43246: LD_VAR 0 9
43250: INC
43251: ST_TO_ADDR
43252: LD_INT 1
43254: PUSH
43255: FOR_DOWNTO
43256: IFFALSE 43301
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43258: LD_ADDR_VAR 0 6
43262: PUSH
43263: LD_VAR 0 6
43267: PPUSH
43268: LD_VAR 0 9
43272: PUSH
43273: LD_VAR 0 7
43277: MINUS
43278: PUSH
43279: LD_INT 1
43281: PLUS
43282: PPUSH
43283: LD_VAR 0 9
43287: PUSH
43288: LD_VAR 0 7
43292: ARRAY
43293: PPUSH
43294: CALL_OW 1
43298: ST_TO_ADDR
43299: GO 43255
43301: POP
43302: POP
// end ; tmp := [ ] ;
43303: LD_ADDR_VAR 0 9
43307: PUSH
43308: EMPTY
43309: ST_TO_ADDR
// if mode then
43310: LD_VAR 0 5
43314: IFFALSE 43383
// begin for i = 1 to result do
43316: LD_ADDR_VAR 0 7
43320: PUSH
43321: DOUBLE
43322: LD_INT 1
43324: DEC
43325: ST_TO_ADDR
43326: LD_VAR 0 6
43330: PUSH
43331: FOR_TO
43332: IFFALSE 43371
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43334: LD_ADDR_VAR 0 9
43338: PUSH
43339: LD_VAR 0 9
43343: PPUSH
43344: LD_VAR 0 7
43348: PPUSH
43349: LD_VAR 0 6
43353: PUSH
43354: LD_VAR 0 7
43358: ARRAY
43359: PUSH
43360: LD_INT 1
43362: ARRAY
43363: PPUSH
43364: CALL_OW 1
43368: ST_TO_ADDR
43369: GO 43331
43371: POP
43372: POP
// result := tmp ;
43373: LD_ADDR_VAR 0 6
43377: PUSH
43378: LD_VAR 0 9
43382: ST_TO_ADDR
// end ; end ;
43383: LD_VAR 0 6
43387: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43388: LD_INT 0
43390: PPUSH
43391: PPUSH
43392: PPUSH
43393: PPUSH
43394: PPUSH
43395: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43396: LD_ADDR_VAR 0 5
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: EMPTY
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: ST_TO_ADDR
// if not x or not y then
43418: LD_VAR 0 2
43422: NOT
43423: PUSH
43424: LD_VAR 0 3
43428: NOT
43429: OR
43430: IFFALSE 43434
// exit ;
43432: GO 45086
// if not range then
43434: LD_VAR 0 4
43438: NOT
43439: IFFALSE 43449
// range := 10 ;
43441: LD_ADDR_VAR 0 4
43445: PUSH
43446: LD_INT 10
43448: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43449: LD_ADDR_VAR 0 8
43453: PUSH
43454: LD_INT 81
43456: PUSH
43457: LD_VAR 0 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 92
43468: PUSH
43469: LD_VAR 0 2
43473: PUSH
43474: LD_VAR 0 3
43478: PUSH
43479: LD_VAR 0 4
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 3
43492: PUSH
43493: LD_INT 21
43495: PUSH
43496: LD_INT 3
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: PPUSH
43512: CALL_OW 69
43516: ST_TO_ADDR
// if not tmp then
43517: LD_VAR 0 8
43521: NOT
43522: IFFALSE 43526
// exit ;
43524: GO 45086
// for i in tmp do
43526: LD_ADDR_VAR 0 6
43530: PUSH
43531: LD_VAR 0 8
43535: PUSH
43536: FOR_IN
43537: IFFALSE 45061
// begin points := [ 0 , 0 , 0 ] ;
43539: LD_ADDR_VAR 0 9
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: ST_TO_ADDR
// bpoints := 1 ;
43558: LD_ADDR_VAR 0 10
43562: PUSH
43563: LD_INT 1
43565: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43566: LD_VAR 0 6
43570: PPUSH
43571: CALL_OW 247
43575: PUSH
43576: LD_INT 1
43578: DOUBLE
43579: EQUAL
43580: IFTRUE 43584
43582: GO 44162
43584: POP
// begin if GetClass ( i ) = 1 then
43585: LD_VAR 0 6
43589: PPUSH
43590: CALL_OW 257
43594: PUSH
43595: LD_INT 1
43597: EQUAL
43598: IFFALSE 43619
// points := [ 10 , 5 , 3 ] ;
43600: LD_ADDR_VAR 0 9
43604: PUSH
43605: LD_INT 10
43607: PUSH
43608: LD_INT 5
43610: PUSH
43611: LD_INT 3
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: LIST
43618: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43619: LD_VAR 0 6
43623: PPUSH
43624: CALL_OW 257
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: LD_INT 3
43634: PUSH
43635: LD_INT 4
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: IN
43643: IFFALSE 43664
// points := [ 3 , 2 , 1 ] ;
43645: LD_ADDR_VAR 0 9
43649: PUSH
43650: LD_INT 3
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: LIST
43663: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43664: LD_VAR 0 6
43668: PPUSH
43669: CALL_OW 257
43673: PUSH
43674: LD_INT 5
43676: EQUAL
43677: IFFALSE 43698
// points := [ 130 , 5 , 2 ] ;
43679: LD_ADDR_VAR 0 9
43683: PUSH
43684: LD_INT 130
43686: PUSH
43687: LD_INT 5
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: LIST
43697: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43698: LD_VAR 0 6
43702: PPUSH
43703: CALL_OW 257
43707: PUSH
43708: LD_INT 8
43710: EQUAL
43711: IFFALSE 43732
// points := [ 35 , 35 , 30 ] ;
43713: LD_ADDR_VAR 0 9
43717: PUSH
43718: LD_INT 35
43720: PUSH
43721: LD_INT 35
43723: PUSH
43724: LD_INT 30
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: LIST
43731: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43732: LD_VAR 0 6
43736: PPUSH
43737: CALL_OW 257
43741: PUSH
43742: LD_INT 9
43744: EQUAL
43745: IFFALSE 43766
// points := [ 20 , 55 , 40 ] ;
43747: LD_ADDR_VAR 0 9
43751: PUSH
43752: LD_INT 20
43754: PUSH
43755: LD_INT 55
43757: PUSH
43758: LD_INT 40
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: LIST
43765: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43766: LD_VAR 0 6
43770: PPUSH
43771: CALL_OW 257
43775: PUSH
43776: LD_INT 12
43778: PUSH
43779: LD_INT 16
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: IN
43786: IFFALSE 43807
// points := [ 5 , 3 , 2 ] ;
43788: LD_ADDR_VAR 0 9
43792: PUSH
43793: LD_INT 5
43795: PUSH
43796: LD_INT 3
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: LIST
43806: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43807: LD_VAR 0 6
43811: PPUSH
43812: CALL_OW 257
43816: PUSH
43817: LD_INT 17
43819: EQUAL
43820: IFFALSE 43841
// points := [ 100 , 50 , 75 ] ;
43822: LD_ADDR_VAR 0 9
43826: PUSH
43827: LD_INT 100
43829: PUSH
43830: LD_INT 50
43832: PUSH
43833: LD_INT 75
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43841: LD_VAR 0 6
43845: PPUSH
43846: CALL_OW 257
43850: PUSH
43851: LD_INT 15
43853: EQUAL
43854: IFFALSE 43875
// points := [ 10 , 5 , 3 ] ;
43856: LD_ADDR_VAR 0 9
43860: PUSH
43861: LD_INT 10
43863: PUSH
43864: LD_INT 5
43866: PUSH
43867: LD_INT 3
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: LIST
43874: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43875: LD_VAR 0 6
43879: PPUSH
43880: CALL_OW 257
43884: PUSH
43885: LD_INT 14
43887: EQUAL
43888: IFFALSE 43909
// points := [ 10 , 0 , 0 ] ;
43890: LD_ADDR_VAR 0 9
43894: PUSH
43895: LD_INT 10
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43909: LD_VAR 0 6
43913: PPUSH
43914: CALL_OW 257
43918: PUSH
43919: LD_INT 11
43921: EQUAL
43922: IFFALSE 43943
// points := [ 30 , 10 , 5 ] ;
43924: LD_ADDR_VAR 0 9
43928: PUSH
43929: LD_INT 30
43931: PUSH
43932: LD_INT 10
43934: PUSH
43935: LD_INT 5
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43943: LD_VAR 0 1
43947: PPUSH
43948: LD_INT 5
43950: PPUSH
43951: CALL_OW 321
43955: PUSH
43956: LD_INT 2
43958: EQUAL
43959: IFFALSE 43976
// bpoints := bpoints * 1.8 ;
43961: LD_ADDR_VAR 0 10
43965: PUSH
43966: LD_VAR 0 10
43970: PUSH
43971: LD_REAL  1.80000000000000E+0000
43974: MUL
43975: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43976: LD_VAR 0 6
43980: PPUSH
43981: CALL_OW 257
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: LD_INT 2
43991: PUSH
43992: LD_INT 3
43994: PUSH
43995: LD_INT 4
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: IN
44004: PUSH
44005: LD_VAR 0 1
44009: PPUSH
44010: LD_INT 51
44012: PPUSH
44013: CALL_OW 321
44017: PUSH
44018: LD_INT 2
44020: EQUAL
44021: AND
44022: IFFALSE 44039
// bpoints := bpoints * 1.2 ;
44024: LD_ADDR_VAR 0 10
44028: PUSH
44029: LD_VAR 0 10
44033: PUSH
44034: LD_REAL  1.20000000000000E+0000
44037: MUL
44038: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44039: LD_VAR 0 6
44043: PPUSH
44044: CALL_OW 257
44048: PUSH
44049: LD_INT 5
44051: PUSH
44052: LD_INT 7
44054: PUSH
44055: LD_INT 9
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: LIST
44062: IN
44063: PUSH
44064: LD_VAR 0 1
44068: PPUSH
44069: LD_INT 52
44071: PPUSH
44072: CALL_OW 321
44076: PUSH
44077: LD_INT 2
44079: EQUAL
44080: AND
44081: IFFALSE 44098
// bpoints := bpoints * 1.5 ;
44083: LD_ADDR_VAR 0 10
44087: PUSH
44088: LD_VAR 0 10
44092: PUSH
44093: LD_REAL  1.50000000000000E+0000
44096: MUL
44097: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44098: LD_VAR 0 1
44102: PPUSH
44103: LD_INT 66
44105: PPUSH
44106: CALL_OW 321
44110: PUSH
44111: LD_INT 2
44113: EQUAL
44114: IFFALSE 44131
// bpoints := bpoints * 1.1 ;
44116: LD_ADDR_VAR 0 10
44120: PUSH
44121: LD_VAR 0 10
44125: PUSH
44126: LD_REAL  1.10000000000000E+0000
44129: MUL
44130: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44131: LD_ADDR_VAR 0 10
44135: PUSH
44136: LD_VAR 0 10
44140: PUSH
44141: LD_VAR 0 6
44145: PPUSH
44146: LD_INT 1
44148: PPUSH
44149: CALL_OW 259
44153: PUSH
44154: LD_REAL  1.15000000000000E+0000
44157: MUL
44158: MUL
44159: ST_TO_ADDR
// end ; unit_vehicle :
44160: GO 44990
44162: LD_INT 2
44164: DOUBLE
44165: EQUAL
44166: IFTRUE 44170
44168: GO 44978
44170: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44171: LD_VAR 0 6
44175: PPUSH
44176: CALL_OW 264
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: LD_INT 42
44186: PUSH
44187: LD_INT 24
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: LIST
44194: IN
44195: IFFALSE 44216
// points := [ 25 , 5 , 3 ] ;
44197: LD_ADDR_VAR 0 9
44201: PUSH
44202: LD_INT 25
44204: PUSH
44205: LD_INT 5
44207: PUSH
44208: LD_INT 3
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: LIST
44215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44216: LD_VAR 0 6
44220: PPUSH
44221: CALL_OW 264
44225: PUSH
44226: LD_INT 4
44228: PUSH
44229: LD_INT 43
44231: PUSH
44232: LD_INT 25
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: IN
44240: IFFALSE 44261
// points := [ 40 , 15 , 5 ] ;
44242: LD_ADDR_VAR 0 9
44246: PUSH
44247: LD_INT 40
44249: PUSH
44250: LD_INT 15
44252: PUSH
44253: LD_INT 5
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: LIST
44260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44261: LD_VAR 0 6
44265: PPUSH
44266: CALL_OW 264
44270: PUSH
44271: LD_INT 3
44273: PUSH
44274: LD_INT 23
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: IN
44281: IFFALSE 44302
// points := [ 7 , 25 , 8 ] ;
44283: LD_ADDR_VAR 0 9
44287: PUSH
44288: LD_INT 7
44290: PUSH
44291: LD_INT 25
44293: PUSH
44294: LD_INT 8
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: LIST
44301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44302: LD_VAR 0 6
44306: PPUSH
44307: CALL_OW 264
44311: PUSH
44312: LD_INT 5
44314: PUSH
44315: LD_INT 27
44317: PUSH
44318: LD_INT 44
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: LIST
44325: IN
44326: IFFALSE 44347
// points := [ 14 , 50 , 16 ] ;
44328: LD_ADDR_VAR 0 9
44332: PUSH
44333: LD_INT 14
44335: PUSH
44336: LD_INT 50
44338: PUSH
44339: LD_INT 16
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44347: LD_VAR 0 6
44351: PPUSH
44352: CALL_OW 264
44356: PUSH
44357: LD_INT 6
44359: PUSH
44360: LD_INT 46
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: IN
44367: IFFALSE 44388
// points := [ 32 , 120 , 70 ] ;
44369: LD_ADDR_VAR 0 9
44373: PUSH
44374: LD_INT 32
44376: PUSH
44377: LD_INT 120
44379: PUSH
44380: LD_INT 70
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44388: LD_VAR 0 6
44392: PPUSH
44393: CALL_OW 264
44397: PUSH
44398: LD_INT 7
44400: PUSH
44401: LD_INT 28
44403: PUSH
44404: LD_INT 45
44406: PUSH
44407: LD_EXP 37
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: IN
44418: IFFALSE 44439
// points := [ 35 , 20 , 45 ] ;
44420: LD_ADDR_VAR 0 9
44424: PUSH
44425: LD_INT 35
44427: PUSH
44428: LD_INT 20
44430: PUSH
44431: LD_INT 45
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44439: LD_VAR 0 6
44443: PPUSH
44444: CALL_OW 264
44448: PUSH
44449: LD_INT 47
44451: PUSH
44452: EMPTY
44453: LIST
44454: IN
44455: IFFALSE 44476
// points := [ 67 , 45 , 75 ] ;
44457: LD_ADDR_VAR 0 9
44461: PUSH
44462: LD_INT 67
44464: PUSH
44465: LD_INT 45
44467: PUSH
44468: LD_INT 75
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44476: LD_VAR 0 6
44480: PPUSH
44481: CALL_OW 264
44485: PUSH
44486: LD_INT 26
44488: PUSH
44489: EMPTY
44490: LIST
44491: IN
44492: IFFALSE 44513
// points := [ 120 , 30 , 80 ] ;
44494: LD_ADDR_VAR 0 9
44498: PUSH
44499: LD_INT 120
44501: PUSH
44502: LD_INT 30
44504: PUSH
44505: LD_INT 80
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44513: LD_VAR 0 6
44517: PPUSH
44518: CALL_OW 264
44522: PUSH
44523: LD_INT 22
44525: PUSH
44526: EMPTY
44527: LIST
44528: IN
44529: IFFALSE 44550
// points := [ 40 , 1 , 1 ] ;
44531: LD_ADDR_VAR 0 9
44535: PUSH
44536: LD_INT 40
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44550: LD_VAR 0 6
44554: PPUSH
44555: CALL_OW 264
44559: PUSH
44560: LD_INT 29
44562: PUSH
44563: EMPTY
44564: LIST
44565: IN
44566: IFFALSE 44587
// points := [ 70 , 200 , 400 ] ;
44568: LD_ADDR_VAR 0 9
44572: PUSH
44573: LD_INT 70
44575: PUSH
44576: LD_INT 200
44578: PUSH
44579: LD_INT 400
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: LIST
44586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44587: LD_VAR 0 6
44591: PPUSH
44592: CALL_OW 264
44596: PUSH
44597: LD_INT 14
44599: PUSH
44600: LD_INT 53
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: IN
44607: IFFALSE 44628
// points := [ 40 , 10 , 20 ] ;
44609: LD_ADDR_VAR 0 9
44613: PUSH
44614: LD_INT 40
44616: PUSH
44617: LD_INT 10
44619: PUSH
44620: LD_INT 20
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: LIST
44627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44628: LD_VAR 0 6
44632: PPUSH
44633: CALL_OW 264
44637: PUSH
44638: LD_INT 9
44640: PUSH
44641: EMPTY
44642: LIST
44643: IN
44644: IFFALSE 44665
// points := [ 5 , 70 , 20 ] ;
44646: LD_ADDR_VAR 0 9
44650: PUSH
44651: LD_INT 5
44653: PUSH
44654: LD_INT 70
44656: PUSH
44657: LD_INT 20
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: LIST
44664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44665: LD_VAR 0 6
44669: PPUSH
44670: CALL_OW 264
44674: PUSH
44675: LD_INT 10
44677: PUSH
44678: EMPTY
44679: LIST
44680: IN
44681: IFFALSE 44702
// points := [ 35 , 110 , 70 ] ;
44683: LD_ADDR_VAR 0 9
44687: PUSH
44688: LD_INT 35
44690: PUSH
44691: LD_INT 110
44693: PUSH
44694: LD_INT 70
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: LIST
44701: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44702: LD_VAR 0 6
44706: PPUSH
44707: CALL_OW 265
44711: PUSH
44712: LD_INT 25
44714: EQUAL
44715: IFFALSE 44736
// points := [ 80 , 65 , 100 ] ;
44717: LD_ADDR_VAR 0 9
44721: PUSH
44722: LD_INT 80
44724: PUSH
44725: LD_INT 65
44727: PUSH
44728: LD_INT 100
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44736: LD_VAR 0 6
44740: PPUSH
44741: CALL_OW 263
44745: PUSH
44746: LD_INT 1
44748: EQUAL
44749: IFFALSE 44784
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44751: LD_ADDR_VAR 0 10
44755: PUSH
44756: LD_VAR 0 10
44760: PUSH
44761: LD_VAR 0 6
44765: PPUSH
44766: CALL_OW 311
44770: PPUSH
44771: LD_INT 3
44773: PPUSH
44774: CALL_OW 259
44778: PUSH
44779: LD_INT 4
44781: MUL
44782: MUL
44783: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44784: LD_VAR 0 6
44788: PPUSH
44789: CALL_OW 263
44793: PUSH
44794: LD_INT 2
44796: EQUAL
44797: IFFALSE 44848
// begin j := IsControledBy ( i ) ;
44799: LD_ADDR_VAR 0 7
44803: PUSH
44804: LD_VAR 0 6
44808: PPUSH
44809: CALL_OW 312
44813: ST_TO_ADDR
// if j then
44814: LD_VAR 0 7
44818: IFFALSE 44848
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44820: LD_ADDR_VAR 0 10
44824: PUSH
44825: LD_VAR 0 10
44829: PUSH
44830: LD_VAR 0 7
44834: PPUSH
44835: LD_INT 3
44837: PPUSH
44838: CALL_OW 259
44842: PUSH
44843: LD_INT 3
44845: MUL
44846: MUL
44847: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44848: LD_VAR 0 6
44852: PPUSH
44853: CALL_OW 264
44857: PUSH
44858: LD_INT 5
44860: PUSH
44861: LD_INT 6
44863: PUSH
44864: LD_INT 46
44866: PUSH
44867: LD_INT 44
44869: PUSH
44870: LD_INT 47
44872: PUSH
44873: LD_INT 45
44875: PUSH
44876: LD_INT 28
44878: PUSH
44879: LD_INT 7
44881: PUSH
44882: LD_INT 27
44884: PUSH
44885: LD_INT 29
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: IN
44900: PUSH
44901: LD_VAR 0 1
44905: PPUSH
44906: LD_INT 52
44908: PPUSH
44909: CALL_OW 321
44913: PUSH
44914: LD_INT 2
44916: EQUAL
44917: AND
44918: IFFALSE 44935
// bpoints := bpoints * 1.2 ;
44920: LD_ADDR_VAR 0 10
44924: PUSH
44925: LD_VAR 0 10
44929: PUSH
44930: LD_REAL  1.20000000000000E+0000
44933: MUL
44934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44935: LD_VAR 0 6
44939: PPUSH
44940: CALL_OW 264
44944: PUSH
44945: LD_INT 6
44947: PUSH
44948: LD_INT 46
44950: PUSH
44951: LD_INT 47
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: LIST
44958: IN
44959: IFFALSE 44976
// bpoints := bpoints * 1.2 ;
44961: LD_ADDR_VAR 0 10
44965: PUSH
44966: LD_VAR 0 10
44970: PUSH
44971: LD_REAL  1.20000000000000E+0000
44974: MUL
44975: ST_TO_ADDR
// end ; unit_building :
44976: GO 44990
44978: LD_INT 3
44980: DOUBLE
44981: EQUAL
44982: IFTRUE 44986
44984: GO 44989
44986: POP
// ; end ;
44987: GO 44990
44989: POP
// for j = 1 to 3 do
44990: LD_ADDR_VAR 0 7
44994: PUSH
44995: DOUBLE
44996: LD_INT 1
44998: DEC
44999: ST_TO_ADDR
45000: LD_INT 3
45002: PUSH
45003: FOR_TO
45004: IFFALSE 45057
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45006: LD_ADDR_VAR 0 5
45010: PUSH
45011: LD_VAR 0 5
45015: PPUSH
45016: LD_VAR 0 7
45020: PPUSH
45021: LD_VAR 0 5
45025: PUSH
45026: LD_VAR 0 7
45030: ARRAY
45031: PUSH
45032: LD_VAR 0 9
45036: PUSH
45037: LD_VAR 0 7
45041: ARRAY
45042: PUSH
45043: LD_VAR 0 10
45047: MUL
45048: PLUS
45049: PPUSH
45050: CALL_OW 1
45054: ST_TO_ADDR
45055: GO 45003
45057: POP
45058: POP
// end ;
45059: GO 43536
45061: POP
45062: POP
// result := Replace ( result , 4 , tmp ) ;
45063: LD_ADDR_VAR 0 5
45067: PUSH
45068: LD_VAR 0 5
45072: PPUSH
45073: LD_INT 4
45075: PPUSH
45076: LD_VAR 0 8
45080: PPUSH
45081: CALL_OW 1
45085: ST_TO_ADDR
// end ;
45086: LD_VAR 0 5
45090: RET
// export function DangerAtRange ( unit , range ) ; begin
45091: LD_INT 0
45093: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45094: LD_ADDR_VAR 0 3
45098: PUSH
45099: LD_VAR 0 1
45103: PPUSH
45104: CALL_OW 255
45108: PPUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: CALL_OW 250
45118: PPUSH
45119: LD_VAR 0 1
45123: PPUSH
45124: CALL_OW 251
45128: PPUSH
45129: LD_VAR 0 2
45133: PPUSH
45134: CALL 43388 0 4
45138: ST_TO_ADDR
// end ;
45139: LD_VAR 0 3
45143: RET
// export function DangerInArea ( side , area ) ; begin
45144: LD_INT 0
45146: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45147: LD_ADDR_VAR 0 3
45151: PUSH
45152: LD_VAR 0 2
45156: PPUSH
45157: LD_INT 81
45159: PUSH
45160: LD_VAR 0 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PPUSH
45169: CALL_OW 70
45173: ST_TO_ADDR
// end ;
45174: LD_VAR 0 3
45178: RET
// export function IsExtension ( b ) ; begin
45179: LD_INT 0
45181: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45182: LD_ADDR_VAR 0 2
45186: PUSH
45187: LD_VAR 0 1
45191: PUSH
45192: LD_INT 23
45194: PUSH
45195: LD_INT 20
45197: PUSH
45198: LD_INT 22
45200: PUSH
45201: LD_INT 17
45203: PUSH
45204: LD_INT 24
45206: PUSH
45207: LD_INT 21
45209: PUSH
45210: LD_INT 19
45212: PUSH
45213: LD_INT 16
45215: PUSH
45216: LD_INT 25
45218: PUSH
45219: LD_INT 18
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: IN
45234: ST_TO_ADDR
// end ;
45235: LD_VAR 0 2
45239: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45240: LD_INT 0
45242: PPUSH
45243: PPUSH
45244: PPUSH
// result := [ ] ;
45245: LD_ADDR_VAR 0 4
45249: PUSH
45250: EMPTY
45251: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45252: LD_ADDR_VAR 0 5
45256: PUSH
45257: LD_VAR 0 2
45261: PPUSH
45262: LD_INT 21
45264: PUSH
45265: LD_INT 3
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PPUSH
45272: CALL_OW 70
45276: ST_TO_ADDR
// if not tmp then
45277: LD_VAR 0 5
45281: NOT
45282: IFFALSE 45286
// exit ;
45284: GO 45350
// if checkLink then
45286: LD_VAR 0 3
45290: IFFALSE 45340
// begin for i in tmp do
45292: LD_ADDR_VAR 0 6
45296: PUSH
45297: LD_VAR 0 5
45301: PUSH
45302: FOR_IN
45303: IFFALSE 45338
// if GetBase ( i ) <> base then
45305: LD_VAR 0 6
45309: PPUSH
45310: CALL_OW 274
45314: PUSH
45315: LD_VAR 0 1
45319: NONEQUAL
45320: IFFALSE 45336
// ComLinkToBase ( base , i ) ;
45322: LD_VAR 0 1
45326: PPUSH
45327: LD_VAR 0 6
45331: PPUSH
45332: CALL_OW 169
45336: GO 45302
45338: POP
45339: POP
// end ; result := tmp ;
45340: LD_ADDR_VAR 0 4
45344: PUSH
45345: LD_VAR 0 5
45349: ST_TO_ADDR
// end ;
45350: LD_VAR 0 4
45354: RET
// export function ComComplete ( units , b ) ; var i ; begin
45355: LD_INT 0
45357: PPUSH
45358: PPUSH
// if not units then
45359: LD_VAR 0 1
45363: NOT
45364: IFFALSE 45368
// exit ;
45366: GO 45458
// for i in units do
45368: LD_ADDR_VAR 0 4
45372: PUSH
45373: LD_VAR 0 1
45377: PUSH
45378: FOR_IN
45379: IFFALSE 45456
// if BuildingStatus ( b ) = bs_build then
45381: LD_VAR 0 2
45385: PPUSH
45386: CALL_OW 461
45390: PUSH
45391: LD_INT 1
45393: EQUAL
45394: IFFALSE 45454
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45396: LD_VAR 0 4
45400: PPUSH
45401: LD_STRING h
45403: PUSH
45404: LD_VAR 0 2
45408: PPUSH
45409: CALL_OW 250
45413: PUSH
45414: LD_VAR 0 2
45418: PPUSH
45419: CALL_OW 251
45423: PUSH
45424: LD_VAR 0 2
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: PUSH
45447: EMPTY
45448: LIST
45449: PPUSH
45450: CALL_OW 446
45454: GO 45378
45456: POP
45457: POP
// end ;
45458: LD_VAR 0 3
45462: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45463: LD_INT 0
45465: PPUSH
45466: PPUSH
45467: PPUSH
45468: PPUSH
45469: PPUSH
45470: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45471: LD_VAR 0 1
45475: NOT
45476: PUSH
45477: LD_VAR 0 1
45481: PPUSH
45482: CALL_OW 263
45486: PUSH
45487: LD_INT 2
45489: NONEQUAL
45490: OR
45491: IFFALSE 45495
// exit ;
45493: GO 45811
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45495: LD_ADDR_VAR 0 6
45499: PUSH
45500: LD_INT 22
45502: PUSH
45503: LD_VAR 0 1
45507: PPUSH
45508: CALL_OW 255
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: LD_INT 30
45522: PUSH
45523: LD_INT 36
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 34
45532: PUSH
45533: LD_INT 31
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: LIST
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PPUSH
45549: CALL_OW 69
45553: ST_TO_ADDR
// if not tmp then
45554: LD_VAR 0 6
45558: NOT
45559: IFFALSE 45563
// exit ;
45561: GO 45811
// result := [ ] ;
45563: LD_ADDR_VAR 0 2
45567: PUSH
45568: EMPTY
45569: ST_TO_ADDR
// for i in tmp do
45570: LD_ADDR_VAR 0 3
45574: PUSH
45575: LD_VAR 0 6
45579: PUSH
45580: FOR_IN
45581: IFFALSE 45652
// begin t := UnitsInside ( i ) ;
45583: LD_ADDR_VAR 0 4
45587: PUSH
45588: LD_VAR 0 3
45592: PPUSH
45593: CALL_OW 313
45597: ST_TO_ADDR
// if t then
45598: LD_VAR 0 4
45602: IFFALSE 45650
// for j in t do
45604: LD_ADDR_VAR 0 7
45608: PUSH
45609: LD_VAR 0 4
45613: PUSH
45614: FOR_IN
45615: IFFALSE 45648
// result := Replace ( result , result + 1 , j ) ;
45617: LD_ADDR_VAR 0 2
45621: PUSH
45622: LD_VAR 0 2
45626: PPUSH
45627: LD_VAR 0 2
45631: PUSH
45632: LD_INT 1
45634: PLUS
45635: PPUSH
45636: LD_VAR 0 7
45640: PPUSH
45641: CALL_OW 1
45645: ST_TO_ADDR
45646: GO 45614
45648: POP
45649: POP
// end ;
45650: GO 45580
45652: POP
45653: POP
// if not result then
45654: LD_VAR 0 2
45658: NOT
45659: IFFALSE 45663
// exit ;
45661: GO 45811
// mech := result [ 1 ] ;
45663: LD_ADDR_VAR 0 5
45667: PUSH
45668: LD_VAR 0 2
45672: PUSH
45673: LD_INT 1
45675: ARRAY
45676: ST_TO_ADDR
// if result > 1 then
45677: LD_VAR 0 2
45681: PUSH
45682: LD_INT 1
45684: GREATER
45685: IFFALSE 45797
// begin for i = 2 to result do
45687: LD_ADDR_VAR 0 3
45691: PUSH
45692: DOUBLE
45693: LD_INT 2
45695: DEC
45696: ST_TO_ADDR
45697: LD_VAR 0 2
45701: PUSH
45702: FOR_TO
45703: IFFALSE 45795
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45705: LD_ADDR_VAR 0 4
45709: PUSH
45710: LD_VAR 0 2
45714: PUSH
45715: LD_VAR 0 3
45719: ARRAY
45720: PPUSH
45721: LD_INT 3
45723: PPUSH
45724: CALL_OW 259
45728: PUSH
45729: LD_VAR 0 2
45733: PUSH
45734: LD_VAR 0 3
45738: ARRAY
45739: PPUSH
45740: CALL_OW 432
45744: MINUS
45745: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45746: LD_VAR 0 4
45750: PUSH
45751: LD_VAR 0 5
45755: PPUSH
45756: LD_INT 3
45758: PPUSH
45759: CALL_OW 259
45763: PUSH
45764: LD_VAR 0 5
45768: PPUSH
45769: CALL_OW 432
45773: MINUS
45774: GREATEREQUAL
45775: IFFALSE 45793
// mech := result [ i ] ;
45777: LD_ADDR_VAR 0 5
45781: PUSH
45782: LD_VAR 0 2
45786: PUSH
45787: LD_VAR 0 3
45791: ARRAY
45792: ST_TO_ADDR
// end ;
45793: GO 45702
45795: POP
45796: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45797: LD_VAR 0 1
45801: PPUSH
45802: LD_VAR 0 5
45806: PPUSH
45807: CALL_OW 135
// end ;
45811: LD_VAR 0 2
45815: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45816: LD_INT 0
45818: PPUSH
45819: PPUSH
45820: PPUSH
45821: PPUSH
45822: PPUSH
45823: PPUSH
45824: PPUSH
45825: PPUSH
45826: PPUSH
45827: PPUSH
45828: PPUSH
45829: PPUSH
45830: PPUSH
// result := [ ] ;
45831: LD_ADDR_VAR 0 7
45835: PUSH
45836: EMPTY
45837: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45838: LD_VAR 0 1
45842: PPUSH
45843: CALL_OW 266
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: IN
45858: NOT
45859: IFFALSE 45863
// exit ;
45861: GO 47497
// if name then
45863: LD_VAR 0 3
45867: IFFALSE 45883
// SetBName ( base_dep , name ) ;
45869: LD_VAR 0 1
45873: PPUSH
45874: LD_VAR 0 3
45878: PPUSH
45879: CALL_OW 500
// base := GetBase ( base_dep ) ;
45883: LD_ADDR_VAR 0 15
45887: PUSH
45888: LD_VAR 0 1
45892: PPUSH
45893: CALL_OW 274
45897: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45898: LD_ADDR_VAR 0 16
45902: PUSH
45903: LD_VAR 0 1
45907: PPUSH
45908: CALL_OW 255
45912: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45913: LD_ADDR_VAR 0 17
45917: PUSH
45918: LD_VAR 0 1
45922: PPUSH
45923: CALL_OW 248
45927: ST_TO_ADDR
// if sources then
45928: LD_VAR 0 5
45932: IFFALSE 45979
// for i = 1 to 3 do
45934: LD_ADDR_VAR 0 8
45938: PUSH
45939: DOUBLE
45940: LD_INT 1
45942: DEC
45943: ST_TO_ADDR
45944: LD_INT 3
45946: PUSH
45947: FOR_TO
45948: IFFALSE 45977
// AddResourceType ( base , i , sources [ i ] ) ;
45950: LD_VAR 0 15
45954: PPUSH
45955: LD_VAR 0 8
45959: PPUSH
45960: LD_VAR 0 5
45964: PUSH
45965: LD_VAR 0 8
45969: ARRAY
45970: PPUSH
45971: CALL_OW 276
45975: GO 45947
45977: POP
45978: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45979: LD_ADDR_VAR 0 18
45983: PUSH
45984: LD_VAR 0 15
45988: PPUSH
45989: LD_VAR 0 2
45993: PPUSH
45994: LD_INT 1
45996: PPUSH
45997: CALL 45240 0 3
46001: ST_TO_ADDR
// InitHc ;
46002: CALL_OW 19
// InitUc ;
46006: CALL_OW 18
// uc_side := side ;
46010: LD_ADDR_OWVAR 20
46014: PUSH
46015: LD_VAR 0 16
46019: ST_TO_ADDR
// uc_nation := nation ;
46020: LD_ADDR_OWVAR 21
46024: PUSH
46025: LD_VAR 0 17
46029: ST_TO_ADDR
// if buildings then
46030: LD_VAR 0 18
46034: IFFALSE 47356
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46036: LD_ADDR_VAR 0 19
46040: PUSH
46041: LD_VAR 0 18
46045: PPUSH
46046: LD_INT 2
46048: PUSH
46049: LD_INT 30
46051: PUSH
46052: LD_INT 29
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 30
46061: PUSH
46062: LD_INT 30
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: LIST
46073: PPUSH
46074: CALL_OW 72
46078: ST_TO_ADDR
// if tmp then
46079: LD_VAR 0 19
46083: IFFALSE 46131
// for i in tmp do
46085: LD_ADDR_VAR 0 8
46089: PUSH
46090: LD_VAR 0 19
46094: PUSH
46095: FOR_IN
46096: IFFALSE 46129
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46098: LD_VAR 0 8
46102: PPUSH
46103: CALL_OW 250
46107: PPUSH
46108: LD_VAR 0 8
46112: PPUSH
46113: CALL_OW 251
46117: PPUSH
46118: LD_VAR 0 16
46122: PPUSH
46123: CALL_OW 441
46127: GO 46095
46129: POP
46130: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46131: LD_VAR 0 18
46135: PPUSH
46136: LD_INT 2
46138: PUSH
46139: LD_INT 30
46141: PUSH
46142: LD_INT 32
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 30
46151: PUSH
46152: LD_INT 33
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: LIST
46163: PPUSH
46164: CALL_OW 72
46168: IFFALSE 46256
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46170: LD_ADDR_VAR 0 8
46174: PUSH
46175: LD_VAR 0 18
46179: PPUSH
46180: LD_INT 2
46182: PUSH
46183: LD_INT 30
46185: PUSH
46186: LD_INT 32
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 30
46195: PUSH
46196: LD_INT 33
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: LIST
46207: PPUSH
46208: CALL_OW 72
46212: PUSH
46213: FOR_IN
46214: IFFALSE 46254
// begin if not GetBWeapon ( i ) then
46216: LD_VAR 0 8
46220: PPUSH
46221: CALL_OW 269
46225: NOT
46226: IFFALSE 46252
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46228: LD_VAR 0 8
46232: PPUSH
46233: LD_VAR 0 8
46237: PPUSH
46238: LD_VAR 0 2
46242: PPUSH
46243: CALL 47502 0 2
46247: PPUSH
46248: CALL_OW 431
// end ;
46252: GO 46213
46254: POP
46255: POP
// end ; for i = 1 to personel do
46256: LD_ADDR_VAR 0 8
46260: PUSH
46261: DOUBLE
46262: LD_INT 1
46264: DEC
46265: ST_TO_ADDR
46266: LD_VAR 0 6
46270: PUSH
46271: FOR_TO
46272: IFFALSE 47336
// begin if i > 4 then
46274: LD_VAR 0 8
46278: PUSH
46279: LD_INT 4
46281: GREATER
46282: IFFALSE 46286
// break ;
46284: GO 47336
// case i of 1 :
46286: LD_VAR 0 8
46290: PUSH
46291: LD_INT 1
46293: DOUBLE
46294: EQUAL
46295: IFTRUE 46299
46297: GO 46379
46299: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46300: LD_ADDR_VAR 0 12
46304: PUSH
46305: LD_VAR 0 18
46309: PPUSH
46310: LD_INT 22
46312: PUSH
46313: LD_VAR 0 16
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 58
46324: PUSH
46325: EMPTY
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: LD_INT 30
46333: PUSH
46334: LD_INT 32
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 30
46343: PUSH
46344: LD_INT 4
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 30
46353: PUSH
46354: LD_INT 5
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: PPUSH
46372: CALL_OW 72
46376: ST_TO_ADDR
46377: GO 46601
46379: LD_INT 2
46381: DOUBLE
46382: EQUAL
46383: IFTRUE 46387
46385: GO 46449
46387: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46388: LD_ADDR_VAR 0 12
46392: PUSH
46393: LD_VAR 0 18
46397: PPUSH
46398: LD_INT 22
46400: PUSH
46401: LD_VAR 0 16
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: LD_INT 30
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 30
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PPUSH
46442: CALL_OW 72
46446: ST_TO_ADDR
46447: GO 46601
46449: LD_INT 3
46451: DOUBLE
46452: EQUAL
46453: IFTRUE 46457
46455: GO 46519
46457: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46458: LD_ADDR_VAR 0 12
46462: PUSH
46463: LD_VAR 0 18
46467: PPUSH
46468: LD_INT 22
46470: PUSH
46471: LD_VAR 0 16
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: LD_INT 30
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 30
46495: PUSH
46496: LD_INT 3
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PPUSH
46512: CALL_OW 72
46516: ST_TO_ADDR
46517: GO 46601
46519: LD_INT 4
46521: DOUBLE
46522: EQUAL
46523: IFTRUE 46527
46525: GO 46600
46527: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46528: LD_ADDR_VAR 0 12
46532: PUSH
46533: LD_VAR 0 18
46537: PPUSH
46538: LD_INT 22
46540: PUSH
46541: LD_VAR 0 16
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 30
46555: PUSH
46556: LD_INT 6
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 30
46565: PUSH
46566: LD_INT 7
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 30
46575: PUSH
46576: LD_INT 8
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PPUSH
46593: CALL_OW 72
46597: ST_TO_ADDR
46598: GO 46601
46600: POP
// if i = 1 then
46601: LD_VAR 0 8
46605: PUSH
46606: LD_INT 1
46608: EQUAL
46609: IFFALSE 46720
// begin tmp := [ ] ;
46611: LD_ADDR_VAR 0 19
46615: PUSH
46616: EMPTY
46617: ST_TO_ADDR
// for j in f do
46618: LD_ADDR_VAR 0 9
46622: PUSH
46623: LD_VAR 0 12
46627: PUSH
46628: FOR_IN
46629: IFFALSE 46702
// if GetBType ( j ) = b_bunker then
46631: LD_VAR 0 9
46635: PPUSH
46636: CALL_OW 266
46640: PUSH
46641: LD_INT 32
46643: EQUAL
46644: IFFALSE 46671
// tmp := Insert ( tmp , 1 , j ) else
46646: LD_ADDR_VAR 0 19
46650: PUSH
46651: LD_VAR 0 19
46655: PPUSH
46656: LD_INT 1
46658: PPUSH
46659: LD_VAR 0 9
46663: PPUSH
46664: CALL_OW 2
46668: ST_TO_ADDR
46669: GO 46700
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46671: LD_ADDR_VAR 0 19
46675: PUSH
46676: LD_VAR 0 19
46680: PPUSH
46681: LD_VAR 0 19
46685: PUSH
46686: LD_INT 1
46688: PLUS
46689: PPUSH
46690: LD_VAR 0 9
46694: PPUSH
46695: CALL_OW 2
46699: ST_TO_ADDR
46700: GO 46628
46702: POP
46703: POP
// if tmp then
46704: LD_VAR 0 19
46708: IFFALSE 46720
// f := tmp ;
46710: LD_ADDR_VAR 0 12
46714: PUSH
46715: LD_VAR 0 19
46719: ST_TO_ADDR
// end ; x := personel [ i ] ;
46720: LD_ADDR_VAR 0 13
46724: PUSH
46725: LD_VAR 0 6
46729: PUSH
46730: LD_VAR 0 8
46734: ARRAY
46735: ST_TO_ADDR
// if x = - 1 then
46736: LD_VAR 0 13
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: EQUAL
46745: IFFALSE 46954
// begin for j in f do
46747: LD_ADDR_VAR 0 9
46751: PUSH
46752: LD_VAR 0 12
46756: PUSH
46757: FOR_IN
46758: IFFALSE 46950
// repeat InitHc ;
46760: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46764: LD_VAR 0 9
46768: PPUSH
46769: CALL_OW 266
46773: PUSH
46774: LD_INT 5
46776: EQUAL
46777: IFFALSE 46847
// begin if UnitsInside ( j ) < 3 then
46779: LD_VAR 0 9
46783: PPUSH
46784: CALL_OW 313
46788: PUSH
46789: LD_INT 3
46791: LESS
46792: IFFALSE 46828
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46794: LD_INT 0
46796: PPUSH
46797: LD_INT 5
46799: PUSH
46800: LD_INT 8
46802: PUSH
46803: LD_INT 9
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: LIST
46810: PUSH
46811: LD_VAR 0 17
46815: ARRAY
46816: PPUSH
46817: LD_VAR 0 4
46821: PPUSH
46822: CALL_OW 380
46826: GO 46845
// PrepareHuman ( false , i , skill ) ;
46828: LD_INT 0
46830: PPUSH
46831: LD_VAR 0 8
46835: PPUSH
46836: LD_VAR 0 4
46840: PPUSH
46841: CALL_OW 380
// end else
46845: GO 46864
// PrepareHuman ( false , i , skill ) ;
46847: LD_INT 0
46849: PPUSH
46850: LD_VAR 0 8
46854: PPUSH
46855: LD_VAR 0 4
46859: PPUSH
46860: CALL_OW 380
// un := CreateHuman ;
46864: LD_ADDR_VAR 0 14
46868: PUSH
46869: CALL_OW 44
46873: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46874: LD_ADDR_VAR 0 7
46878: PUSH
46879: LD_VAR 0 7
46883: PPUSH
46884: LD_INT 1
46886: PPUSH
46887: LD_VAR 0 14
46891: PPUSH
46892: CALL_OW 2
46896: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46897: LD_VAR 0 14
46901: PPUSH
46902: LD_VAR 0 9
46906: PPUSH
46907: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46911: LD_VAR 0 9
46915: PPUSH
46916: CALL_OW 313
46920: PUSH
46921: LD_INT 6
46923: EQUAL
46924: PUSH
46925: LD_VAR 0 9
46929: PPUSH
46930: CALL_OW 266
46934: PUSH
46935: LD_INT 32
46937: PUSH
46938: LD_INT 31
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: IN
46945: OR
46946: IFFALSE 46760
46948: GO 46757
46950: POP
46951: POP
// end else
46952: GO 47334
// for j = 1 to x do
46954: LD_ADDR_VAR 0 9
46958: PUSH
46959: DOUBLE
46960: LD_INT 1
46962: DEC
46963: ST_TO_ADDR
46964: LD_VAR 0 13
46968: PUSH
46969: FOR_TO
46970: IFFALSE 47332
// begin InitHc ;
46972: CALL_OW 19
// if not f then
46976: LD_VAR 0 12
46980: NOT
46981: IFFALSE 47070
// begin PrepareHuman ( false , i , skill ) ;
46983: LD_INT 0
46985: PPUSH
46986: LD_VAR 0 8
46990: PPUSH
46991: LD_VAR 0 4
46995: PPUSH
46996: CALL_OW 380
// un := CreateHuman ;
47000: LD_ADDR_VAR 0 14
47004: PUSH
47005: CALL_OW 44
47009: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47010: LD_ADDR_VAR 0 7
47014: PUSH
47015: LD_VAR 0 7
47019: PPUSH
47020: LD_INT 1
47022: PPUSH
47023: LD_VAR 0 14
47027: PPUSH
47028: CALL_OW 2
47032: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47033: LD_VAR 0 14
47037: PPUSH
47038: LD_VAR 0 1
47042: PPUSH
47043: CALL_OW 250
47047: PPUSH
47048: LD_VAR 0 1
47052: PPUSH
47053: CALL_OW 251
47057: PPUSH
47058: LD_INT 10
47060: PPUSH
47061: LD_INT 0
47063: PPUSH
47064: CALL_OW 50
// continue ;
47068: GO 46969
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47070: LD_VAR 0 12
47074: PUSH
47075: LD_INT 1
47077: ARRAY
47078: PPUSH
47079: CALL_OW 313
47083: PUSH
47084: LD_VAR 0 12
47088: PUSH
47089: LD_INT 1
47091: ARRAY
47092: PPUSH
47093: CALL_OW 266
47097: PUSH
47098: LD_INT 32
47100: PUSH
47101: LD_INT 31
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: IN
47108: AND
47109: PUSH
47110: LD_VAR 0 12
47114: PUSH
47115: LD_INT 1
47117: ARRAY
47118: PPUSH
47119: CALL_OW 313
47123: PUSH
47124: LD_INT 6
47126: EQUAL
47127: OR
47128: IFFALSE 47148
// f := Delete ( f , 1 ) ;
47130: LD_ADDR_VAR 0 12
47134: PUSH
47135: LD_VAR 0 12
47139: PPUSH
47140: LD_INT 1
47142: PPUSH
47143: CALL_OW 3
47147: ST_TO_ADDR
// if not f then
47148: LD_VAR 0 12
47152: NOT
47153: IFFALSE 47171
// begin x := x + 2 ;
47155: LD_ADDR_VAR 0 13
47159: PUSH
47160: LD_VAR 0 13
47164: PUSH
47165: LD_INT 2
47167: PLUS
47168: ST_TO_ADDR
// continue ;
47169: GO 46969
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47171: LD_VAR 0 12
47175: PUSH
47176: LD_INT 1
47178: ARRAY
47179: PPUSH
47180: CALL_OW 266
47184: PUSH
47185: LD_INT 5
47187: EQUAL
47188: IFFALSE 47262
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47190: LD_VAR 0 12
47194: PUSH
47195: LD_INT 1
47197: ARRAY
47198: PPUSH
47199: CALL_OW 313
47203: PUSH
47204: LD_INT 3
47206: LESS
47207: IFFALSE 47243
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47209: LD_INT 0
47211: PPUSH
47212: LD_INT 5
47214: PUSH
47215: LD_INT 8
47217: PUSH
47218: LD_INT 9
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: PUSH
47226: LD_VAR 0 17
47230: ARRAY
47231: PPUSH
47232: LD_VAR 0 4
47236: PPUSH
47237: CALL_OW 380
47241: GO 47260
// PrepareHuman ( false , i , skill ) ;
47243: LD_INT 0
47245: PPUSH
47246: LD_VAR 0 8
47250: PPUSH
47251: LD_VAR 0 4
47255: PPUSH
47256: CALL_OW 380
// end else
47260: GO 47279
// PrepareHuman ( false , i , skill ) ;
47262: LD_INT 0
47264: PPUSH
47265: LD_VAR 0 8
47269: PPUSH
47270: LD_VAR 0 4
47274: PPUSH
47275: CALL_OW 380
// un := CreateHuman ;
47279: LD_ADDR_VAR 0 14
47283: PUSH
47284: CALL_OW 44
47288: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47289: LD_ADDR_VAR 0 7
47293: PUSH
47294: LD_VAR 0 7
47298: PPUSH
47299: LD_INT 1
47301: PPUSH
47302: LD_VAR 0 14
47306: PPUSH
47307: CALL_OW 2
47311: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47312: LD_VAR 0 14
47316: PPUSH
47317: LD_VAR 0 12
47321: PUSH
47322: LD_INT 1
47324: ARRAY
47325: PPUSH
47326: CALL_OW 52
// end ;
47330: GO 46969
47332: POP
47333: POP
// end ;
47334: GO 46271
47336: POP
47337: POP
// result := result ^ buildings ;
47338: LD_ADDR_VAR 0 7
47342: PUSH
47343: LD_VAR 0 7
47347: PUSH
47348: LD_VAR 0 18
47352: ADD
47353: ST_TO_ADDR
// end else
47354: GO 47497
// begin for i = 1 to personel do
47356: LD_ADDR_VAR 0 8
47360: PUSH
47361: DOUBLE
47362: LD_INT 1
47364: DEC
47365: ST_TO_ADDR
47366: LD_VAR 0 6
47370: PUSH
47371: FOR_TO
47372: IFFALSE 47495
// begin if i > 4 then
47374: LD_VAR 0 8
47378: PUSH
47379: LD_INT 4
47381: GREATER
47382: IFFALSE 47386
// break ;
47384: GO 47495
// x := personel [ i ] ;
47386: LD_ADDR_VAR 0 13
47390: PUSH
47391: LD_VAR 0 6
47395: PUSH
47396: LD_VAR 0 8
47400: ARRAY
47401: ST_TO_ADDR
// if x = - 1 then
47402: LD_VAR 0 13
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: EQUAL
47411: IFFALSE 47415
// continue ;
47413: GO 47371
// PrepareHuman ( false , i , skill ) ;
47415: LD_INT 0
47417: PPUSH
47418: LD_VAR 0 8
47422: PPUSH
47423: LD_VAR 0 4
47427: PPUSH
47428: CALL_OW 380
// un := CreateHuman ;
47432: LD_ADDR_VAR 0 14
47436: PUSH
47437: CALL_OW 44
47441: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47442: LD_VAR 0 14
47446: PPUSH
47447: LD_VAR 0 1
47451: PPUSH
47452: CALL_OW 250
47456: PPUSH
47457: LD_VAR 0 1
47461: PPUSH
47462: CALL_OW 251
47466: PPUSH
47467: LD_INT 10
47469: PPUSH
47470: LD_INT 0
47472: PPUSH
47473: CALL_OW 50
// result := result ^ un ;
47477: LD_ADDR_VAR 0 7
47481: PUSH
47482: LD_VAR 0 7
47486: PUSH
47487: LD_VAR 0 14
47491: ADD
47492: ST_TO_ADDR
// end ;
47493: GO 47371
47495: POP
47496: POP
// end ; end ;
47497: LD_VAR 0 7
47501: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47502: LD_INT 0
47504: PPUSH
47505: PPUSH
47506: PPUSH
47507: PPUSH
47508: PPUSH
47509: PPUSH
47510: PPUSH
47511: PPUSH
47512: PPUSH
47513: PPUSH
47514: PPUSH
47515: PPUSH
47516: PPUSH
47517: PPUSH
47518: PPUSH
47519: PPUSH
// result := false ;
47520: LD_ADDR_VAR 0 3
47524: PUSH
47525: LD_INT 0
47527: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47528: LD_VAR 0 1
47532: NOT
47533: PUSH
47534: LD_VAR 0 1
47538: PPUSH
47539: CALL_OW 266
47543: PUSH
47544: LD_INT 32
47546: PUSH
47547: LD_INT 33
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: IN
47554: NOT
47555: OR
47556: IFFALSE 47560
// exit ;
47558: GO 48669
// nat := GetNation ( tower ) ;
47560: LD_ADDR_VAR 0 12
47564: PUSH
47565: LD_VAR 0 1
47569: PPUSH
47570: CALL_OW 248
47574: ST_TO_ADDR
// side := GetSide ( tower ) ;
47575: LD_ADDR_VAR 0 16
47579: PUSH
47580: LD_VAR 0 1
47584: PPUSH
47585: CALL_OW 255
47589: ST_TO_ADDR
// x := GetX ( tower ) ;
47590: LD_ADDR_VAR 0 10
47594: PUSH
47595: LD_VAR 0 1
47599: PPUSH
47600: CALL_OW 250
47604: ST_TO_ADDR
// y := GetY ( tower ) ;
47605: LD_ADDR_VAR 0 11
47609: PUSH
47610: LD_VAR 0 1
47614: PPUSH
47615: CALL_OW 251
47619: ST_TO_ADDR
// if not x or not y then
47620: LD_VAR 0 10
47624: NOT
47625: PUSH
47626: LD_VAR 0 11
47630: NOT
47631: OR
47632: IFFALSE 47636
// exit ;
47634: GO 48669
// weapon := 0 ;
47636: LD_ADDR_VAR 0 18
47640: PUSH
47641: LD_INT 0
47643: ST_TO_ADDR
// fac_list := [ ] ;
47644: LD_ADDR_VAR 0 17
47648: PUSH
47649: EMPTY
47650: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47651: LD_ADDR_VAR 0 6
47655: PUSH
47656: LD_VAR 0 1
47660: PPUSH
47661: CALL_OW 274
47665: PPUSH
47666: LD_VAR 0 2
47670: PPUSH
47671: LD_INT 0
47673: PPUSH
47674: CALL 45240 0 3
47678: PPUSH
47679: LD_INT 30
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PPUSH
47689: CALL_OW 72
47693: ST_TO_ADDR
// if not factories then
47694: LD_VAR 0 6
47698: NOT
47699: IFFALSE 47703
// exit ;
47701: GO 48669
// for i in factories do
47703: LD_ADDR_VAR 0 8
47707: PUSH
47708: LD_VAR 0 6
47712: PUSH
47713: FOR_IN
47714: IFFALSE 47739
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47716: LD_ADDR_VAR 0 17
47720: PUSH
47721: LD_VAR 0 17
47725: PUSH
47726: LD_VAR 0 8
47730: PPUSH
47731: CALL_OW 478
47735: UNION
47736: ST_TO_ADDR
47737: GO 47713
47739: POP
47740: POP
// if not fac_list then
47741: LD_VAR 0 17
47745: NOT
47746: IFFALSE 47750
// exit ;
47748: GO 48669
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47750: LD_ADDR_VAR 0 5
47754: PUSH
47755: LD_INT 4
47757: PUSH
47758: LD_INT 5
47760: PUSH
47761: LD_INT 9
47763: PUSH
47764: LD_INT 10
47766: PUSH
47767: LD_INT 6
47769: PUSH
47770: LD_INT 7
47772: PUSH
47773: LD_INT 11
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 27
47787: PUSH
47788: LD_INT 28
47790: PUSH
47791: LD_INT 26
47793: PUSH
47794: LD_INT 30
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 43
47805: PUSH
47806: LD_INT 44
47808: PUSH
47809: LD_INT 46
47811: PUSH
47812: LD_INT 45
47814: PUSH
47815: LD_INT 47
47817: PUSH
47818: LD_INT 49
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: LIST
47833: PUSH
47834: LD_VAR 0 12
47838: ARRAY
47839: ST_TO_ADDR
// list := list isect fac_list ;
47840: LD_ADDR_VAR 0 5
47844: PUSH
47845: LD_VAR 0 5
47849: PUSH
47850: LD_VAR 0 17
47854: ISECT
47855: ST_TO_ADDR
// if not list then
47856: LD_VAR 0 5
47860: NOT
47861: IFFALSE 47865
// exit ;
47863: GO 48669
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47865: LD_VAR 0 12
47869: PUSH
47870: LD_INT 3
47872: EQUAL
47873: PUSH
47874: LD_INT 49
47876: PUSH
47877: LD_VAR 0 5
47881: IN
47882: AND
47883: PUSH
47884: LD_INT 31
47886: PPUSH
47887: LD_VAR 0 16
47891: PPUSH
47892: CALL_OW 321
47896: PUSH
47897: LD_INT 2
47899: EQUAL
47900: AND
47901: IFFALSE 47961
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47903: LD_INT 22
47905: PUSH
47906: LD_VAR 0 16
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 35
47917: PUSH
47918: LD_INT 49
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 91
47927: PUSH
47928: LD_VAR 0 1
47932: PUSH
47933: LD_INT 10
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: LIST
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: LIST
47945: PPUSH
47946: CALL_OW 69
47950: NOT
47951: IFFALSE 47961
// weapon := ru_time_lapser ;
47953: LD_ADDR_VAR 0 18
47957: PUSH
47958: LD_INT 49
47960: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47961: LD_VAR 0 12
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: IN
47976: PUSH
47977: LD_INT 11
47979: PUSH
47980: LD_VAR 0 5
47984: IN
47985: PUSH
47986: LD_INT 30
47988: PUSH
47989: LD_VAR 0 5
47993: IN
47994: OR
47995: AND
47996: PUSH
47997: LD_INT 6
47999: PPUSH
48000: LD_VAR 0 16
48004: PPUSH
48005: CALL_OW 321
48009: PUSH
48010: LD_INT 2
48012: EQUAL
48013: AND
48014: IFFALSE 48179
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48016: LD_INT 22
48018: PUSH
48019: LD_VAR 0 16
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: LD_INT 35
48033: PUSH
48034: LD_INT 11
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 35
48043: PUSH
48044: LD_INT 30
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 91
48058: PUSH
48059: LD_VAR 0 1
48063: PUSH
48064: LD_INT 18
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: LIST
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: LIST
48076: PPUSH
48077: CALL_OW 69
48081: NOT
48082: PUSH
48083: LD_INT 22
48085: PUSH
48086: LD_VAR 0 16
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: LD_INT 30
48100: PUSH
48101: LD_INT 32
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 30
48110: PUSH
48111: LD_INT 33
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 91
48125: PUSH
48126: LD_VAR 0 1
48130: PUSH
48131: LD_INT 12
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: LIST
48143: PUSH
48144: EMPTY
48145: LIST
48146: PPUSH
48147: CALL_OW 69
48151: PUSH
48152: LD_INT 2
48154: GREATER
48155: AND
48156: IFFALSE 48179
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48158: LD_ADDR_VAR 0 18
48162: PUSH
48163: LD_INT 11
48165: PUSH
48166: LD_INT 30
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_VAR 0 12
48177: ARRAY
48178: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48179: LD_VAR 0 18
48183: NOT
48184: PUSH
48185: LD_INT 40
48187: PPUSH
48188: LD_VAR 0 16
48192: PPUSH
48193: CALL_OW 321
48197: PUSH
48198: LD_INT 2
48200: EQUAL
48201: AND
48202: PUSH
48203: LD_INT 7
48205: PUSH
48206: LD_VAR 0 5
48210: IN
48211: PUSH
48212: LD_INT 28
48214: PUSH
48215: LD_VAR 0 5
48219: IN
48220: OR
48221: PUSH
48222: LD_INT 45
48224: PUSH
48225: LD_VAR 0 5
48229: IN
48230: OR
48231: AND
48232: IFFALSE 48486
// begin hex := GetHexInfo ( x , y ) ;
48234: LD_ADDR_VAR 0 4
48238: PUSH
48239: LD_VAR 0 10
48243: PPUSH
48244: LD_VAR 0 11
48248: PPUSH
48249: CALL_OW 546
48253: ST_TO_ADDR
// if hex [ 1 ] then
48254: LD_VAR 0 4
48258: PUSH
48259: LD_INT 1
48261: ARRAY
48262: IFFALSE 48266
// exit ;
48264: GO 48669
// height := hex [ 2 ] ;
48266: LD_ADDR_VAR 0 15
48270: PUSH
48271: LD_VAR 0 4
48275: PUSH
48276: LD_INT 2
48278: ARRAY
48279: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48280: LD_ADDR_VAR 0 14
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: LD_INT 3
48293: PUSH
48294: LD_INT 5
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: ST_TO_ADDR
// for i in tmp do
48303: LD_ADDR_VAR 0 8
48307: PUSH
48308: LD_VAR 0 14
48312: PUSH
48313: FOR_IN
48314: IFFALSE 48484
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48316: LD_ADDR_VAR 0 9
48320: PUSH
48321: LD_VAR 0 10
48325: PPUSH
48326: LD_VAR 0 8
48330: PPUSH
48331: LD_INT 5
48333: PPUSH
48334: CALL_OW 272
48338: PUSH
48339: LD_VAR 0 11
48343: PPUSH
48344: LD_VAR 0 8
48348: PPUSH
48349: LD_INT 5
48351: PPUSH
48352: CALL_OW 273
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48361: LD_VAR 0 9
48365: PUSH
48366: LD_INT 1
48368: ARRAY
48369: PPUSH
48370: LD_VAR 0 9
48374: PUSH
48375: LD_INT 2
48377: ARRAY
48378: PPUSH
48379: CALL_OW 488
48383: IFFALSE 48482
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48385: LD_ADDR_VAR 0 4
48389: PUSH
48390: LD_VAR 0 9
48394: PUSH
48395: LD_INT 1
48397: ARRAY
48398: PPUSH
48399: LD_VAR 0 9
48403: PUSH
48404: LD_INT 2
48406: ARRAY
48407: PPUSH
48408: CALL_OW 546
48412: ST_TO_ADDR
// if hex [ 1 ] then
48413: LD_VAR 0 4
48417: PUSH
48418: LD_INT 1
48420: ARRAY
48421: IFFALSE 48425
// continue ;
48423: GO 48313
// h := hex [ 2 ] ;
48425: LD_ADDR_VAR 0 13
48429: PUSH
48430: LD_VAR 0 4
48434: PUSH
48435: LD_INT 2
48437: ARRAY
48438: ST_TO_ADDR
// if h + 7 < height then
48439: LD_VAR 0 13
48443: PUSH
48444: LD_INT 7
48446: PLUS
48447: PUSH
48448: LD_VAR 0 15
48452: LESS
48453: IFFALSE 48482
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48455: LD_ADDR_VAR 0 18
48459: PUSH
48460: LD_INT 7
48462: PUSH
48463: LD_INT 28
48465: PUSH
48466: LD_INT 45
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: PUSH
48474: LD_VAR 0 12
48478: ARRAY
48479: ST_TO_ADDR
// break ;
48480: GO 48484
// end ; end ; end ;
48482: GO 48313
48484: POP
48485: POP
// end ; if not weapon then
48486: LD_VAR 0 18
48490: NOT
48491: IFFALSE 48551
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48493: LD_ADDR_VAR 0 5
48497: PUSH
48498: LD_VAR 0 5
48502: PUSH
48503: LD_INT 11
48505: PUSH
48506: LD_INT 30
48508: PUSH
48509: LD_INT 49
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: LIST
48516: DIFF
48517: ST_TO_ADDR
// if not list then
48518: LD_VAR 0 5
48522: NOT
48523: IFFALSE 48527
// exit ;
48525: GO 48669
// weapon := list [ rand ( 1 , list ) ] ;
48527: LD_ADDR_VAR 0 18
48531: PUSH
48532: LD_VAR 0 5
48536: PUSH
48537: LD_INT 1
48539: PPUSH
48540: LD_VAR 0 5
48544: PPUSH
48545: CALL_OW 12
48549: ARRAY
48550: ST_TO_ADDR
// end ; if weapon then
48551: LD_VAR 0 18
48555: IFFALSE 48669
// begin tmp := CostOfWeapon ( weapon ) ;
48557: LD_ADDR_VAR 0 14
48561: PUSH
48562: LD_VAR 0 18
48566: PPUSH
48567: CALL_OW 451
48571: ST_TO_ADDR
// j := GetBase ( tower ) ;
48572: LD_ADDR_VAR 0 9
48576: PUSH
48577: LD_VAR 0 1
48581: PPUSH
48582: CALL_OW 274
48586: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48587: LD_VAR 0 9
48591: PPUSH
48592: LD_INT 1
48594: PPUSH
48595: CALL_OW 275
48599: PUSH
48600: LD_VAR 0 14
48604: PUSH
48605: LD_INT 1
48607: ARRAY
48608: GREATEREQUAL
48609: PUSH
48610: LD_VAR 0 9
48614: PPUSH
48615: LD_INT 2
48617: PPUSH
48618: CALL_OW 275
48622: PUSH
48623: LD_VAR 0 14
48627: PUSH
48628: LD_INT 2
48630: ARRAY
48631: GREATEREQUAL
48632: AND
48633: PUSH
48634: LD_VAR 0 9
48638: PPUSH
48639: LD_INT 3
48641: PPUSH
48642: CALL_OW 275
48646: PUSH
48647: LD_VAR 0 14
48651: PUSH
48652: LD_INT 3
48654: ARRAY
48655: GREATEREQUAL
48656: AND
48657: IFFALSE 48669
// result := weapon ;
48659: LD_ADDR_VAR 0 3
48663: PUSH
48664: LD_VAR 0 18
48668: ST_TO_ADDR
// end ; end ;
48669: LD_VAR 0 3
48673: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48674: LD_INT 0
48676: PPUSH
48677: PPUSH
// result := true ;
48678: LD_ADDR_VAR 0 3
48682: PUSH
48683: LD_INT 1
48685: ST_TO_ADDR
// if array1 = array2 then
48686: LD_VAR 0 1
48690: PUSH
48691: LD_VAR 0 2
48695: EQUAL
48696: IFFALSE 48756
// begin for i = 1 to array1 do
48698: LD_ADDR_VAR 0 4
48702: PUSH
48703: DOUBLE
48704: LD_INT 1
48706: DEC
48707: ST_TO_ADDR
48708: LD_VAR 0 1
48712: PUSH
48713: FOR_TO
48714: IFFALSE 48752
// if array1 [ i ] <> array2 [ i ] then
48716: LD_VAR 0 1
48720: PUSH
48721: LD_VAR 0 4
48725: ARRAY
48726: PUSH
48727: LD_VAR 0 2
48731: PUSH
48732: LD_VAR 0 4
48736: ARRAY
48737: NONEQUAL
48738: IFFALSE 48750
// begin result := false ;
48740: LD_ADDR_VAR 0 3
48744: PUSH
48745: LD_INT 0
48747: ST_TO_ADDR
// break ;
48748: GO 48752
// end ;
48750: GO 48713
48752: POP
48753: POP
// end else
48754: GO 48764
// result := false ;
48756: LD_ADDR_VAR 0 3
48760: PUSH
48761: LD_INT 0
48763: ST_TO_ADDR
// end ;
48764: LD_VAR 0 3
48768: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48769: LD_INT 0
48771: PPUSH
48772: PPUSH
// if not array1 or not array2 then
48773: LD_VAR 0 1
48777: NOT
48778: PUSH
48779: LD_VAR 0 2
48783: NOT
48784: OR
48785: IFFALSE 48789
// exit ;
48787: GO 48853
// result := true ;
48789: LD_ADDR_VAR 0 3
48793: PUSH
48794: LD_INT 1
48796: ST_TO_ADDR
// for i = 1 to array1 do
48797: LD_ADDR_VAR 0 4
48801: PUSH
48802: DOUBLE
48803: LD_INT 1
48805: DEC
48806: ST_TO_ADDR
48807: LD_VAR 0 1
48811: PUSH
48812: FOR_TO
48813: IFFALSE 48851
// if array1 [ i ] <> array2 [ i ] then
48815: LD_VAR 0 1
48819: PUSH
48820: LD_VAR 0 4
48824: ARRAY
48825: PUSH
48826: LD_VAR 0 2
48830: PUSH
48831: LD_VAR 0 4
48835: ARRAY
48836: NONEQUAL
48837: IFFALSE 48849
// begin result := false ;
48839: LD_ADDR_VAR 0 3
48843: PUSH
48844: LD_INT 0
48846: ST_TO_ADDR
// break ;
48847: GO 48851
// end ;
48849: GO 48812
48851: POP
48852: POP
// end ;
48853: LD_VAR 0 3
48857: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48858: LD_INT 0
48860: PPUSH
48861: PPUSH
48862: PPUSH
// pom := GetBase ( fac ) ;
48863: LD_ADDR_VAR 0 5
48867: PUSH
48868: LD_VAR 0 1
48872: PPUSH
48873: CALL_OW 274
48877: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48878: LD_ADDR_VAR 0 4
48882: PUSH
48883: LD_VAR 0 2
48887: PUSH
48888: LD_INT 1
48890: ARRAY
48891: PPUSH
48892: LD_VAR 0 2
48896: PUSH
48897: LD_INT 2
48899: ARRAY
48900: PPUSH
48901: LD_VAR 0 2
48905: PUSH
48906: LD_INT 3
48908: ARRAY
48909: PPUSH
48910: LD_VAR 0 2
48914: PUSH
48915: LD_INT 4
48917: ARRAY
48918: PPUSH
48919: CALL_OW 449
48923: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48924: LD_ADDR_VAR 0 3
48928: PUSH
48929: LD_VAR 0 5
48933: PPUSH
48934: LD_INT 1
48936: PPUSH
48937: CALL_OW 275
48941: PUSH
48942: LD_VAR 0 4
48946: PUSH
48947: LD_INT 1
48949: ARRAY
48950: GREATEREQUAL
48951: PUSH
48952: LD_VAR 0 5
48956: PPUSH
48957: LD_INT 2
48959: PPUSH
48960: CALL_OW 275
48964: PUSH
48965: LD_VAR 0 4
48969: PUSH
48970: LD_INT 2
48972: ARRAY
48973: GREATEREQUAL
48974: AND
48975: PUSH
48976: LD_VAR 0 5
48980: PPUSH
48981: LD_INT 3
48983: PPUSH
48984: CALL_OW 275
48988: PUSH
48989: LD_VAR 0 4
48993: PUSH
48994: LD_INT 3
48996: ARRAY
48997: GREATEREQUAL
48998: AND
48999: ST_TO_ADDR
// end ;
49000: LD_VAR 0 3
49004: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49005: LD_INT 0
49007: PPUSH
49008: PPUSH
49009: PPUSH
49010: PPUSH
// pom := GetBase ( building ) ;
49011: LD_ADDR_VAR 0 3
49015: PUSH
49016: LD_VAR 0 1
49020: PPUSH
49021: CALL_OW 274
49025: ST_TO_ADDR
// if not pom then
49026: LD_VAR 0 3
49030: NOT
49031: IFFALSE 49035
// exit ;
49033: GO 49205
// btype := GetBType ( building ) ;
49035: LD_ADDR_VAR 0 5
49039: PUSH
49040: LD_VAR 0 1
49044: PPUSH
49045: CALL_OW 266
49049: ST_TO_ADDR
// if btype = b_armoury then
49050: LD_VAR 0 5
49054: PUSH
49055: LD_INT 4
49057: EQUAL
49058: IFFALSE 49068
// btype := b_barracks ;
49060: LD_ADDR_VAR 0 5
49064: PUSH
49065: LD_INT 5
49067: ST_TO_ADDR
// if btype = b_depot then
49068: LD_VAR 0 5
49072: PUSH
49073: LD_INT 0
49075: EQUAL
49076: IFFALSE 49086
// btype := b_warehouse ;
49078: LD_ADDR_VAR 0 5
49082: PUSH
49083: LD_INT 1
49085: ST_TO_ADDR
// if btype = b_workshop then
49086: LD_VAR 0 5
49090: PUSH
49091: LD_INT 2
49093: EQUAL
49094: IFFALSE 49104
// btype := b_factory ;
49096: LD_ADDR_VAR 0 5
49100: PUSH
49101: LD_INT 3
49103: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49104: LD_ADDR_VAR 0 4
49108: PUSH
49109: LD_VAR 0 5
49113: PPUSH
49114: LD_VAR 0 1
49118: PPUSH
49119: CALL_OW 248
49123: PPUSH
49124: CALL_OW 450
49128: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49129: LD_ADDR_VAR 0 2
49133: PUSH
49134: LD_VAR 0 3
49138: PPUSH
49139: LD_INT 1
49141: PPUSH
49142: CALL_OW 275
49146: PUSH
49147: LD_VAR 0 4
49151: PUSH
49152: LD_INT 1
49154: ARRAY
49155: GREATEREQUAL
49156: PUSH
49157: LD_VAR 0 3
49161: PPUSH
49162: LD_INT 2
49164: PPUSH
49165: CALL_OW 275
49169: PUSH
49170: LD_VAR 0 4
49174: PUSH
49175: LD_INT 2
49177: ARRAY
49178: GREATEREQUAL
49179: AND
49180: PUSH
49181: LD_VAR 0 3
49185: PPUSH
49186: LD_INT 3
49188: PPUSH
49189: CALL_OW 275
49193: PUSH
49194: LD_VAR 0 4
49198: PUSH
49199: LD_INT 3
49201: ARRAY
49202: GREATEREQUAL
49203: AND
49204: ST_TO_ADDR
// end ;
49205: LD_VAR 0 2
49209: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49210: LD_INT 0
49212: PPUSH
49213: PPUSH
49214: PPUSH
// pom := GetBase ( building ) ;
49215: LD_ADDR_VAR 0 4
49219: PUSH
49220: LD_VAR 0 1
49224: PPUSH
49225: CALL_OW 274
49229: ST_TO_ADDR
// if not pom then
49230: LD_VAR 0 4
49234: NOT
49235: IFFALSE 49239
// exit ;
49237: GO 49340
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49239: LD_ADDR_VAR 0 5
49243: PUSH
49244: LD_VAR 0 2
49248: PPUSH
49249: LD_VAR 0 1
49253: PPUSH
49254: CALL_OW 248
49258: PPUSH
49259: CALL_OW 450
49263: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49264: LD_ADDR_VAR 0 3
49268: PUSH
49269: LD_VAR 0 4
49273: PPUSH
49274: LD_INT 1
49276: PPUSH
49277: CALL_OW 275
49281: PUSH
49282: LD_VAR 0 5
49286: PUSH
49287: LD_INT 1
49289: ARRAY
49290: GREATEREQUAL
49291: PUSH
49292: LD_VAR 0 4
49296: PPUSH
49297: LD_INT 2
49299: PPUSH
49300: CALL_OW 275
49304: PUSH
49305: LD_VAR 0 5
49309: PUSH
49310: LD_INT 2
49312: ARRAY
49313: GREATEREQUAL
49314: AND
49315: PUSH
49316: LD_VAR 0 4
49320: PPUSH
49321: LD_INT 3
49323: PPUSH
49324: CALL_OW 275
49328: PUSH
49329: LD_VAR 0 5
49333: PUSH
49334: LD_INT 3
49336: ARRAY
49337: GREATEREQUAL
49338: AND
49339: ST_TO_ADDR
// end ;
49340: LD_VAR 0 3
49344: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49345: LD_INT 0
49347: PPUSH
49348: PPUSH
49349: PPUSH
49350: PPUSH
49351: PPUSH
49352: PPUSH
49353: PPUSH
49354: PPUSH
49355: PPUSH
49356: PPUSH
49357: PPUSH
// result := false ;
49358: LD_ADDR_VAR 0 8
49362: PUSH
49363: LD_INT 0
49365: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49366: LD_VAR 0 5
49370: NOT
49371: PUSH
49372: LD_VAR 0 1
49376: NOT
49377: OR
49378: PUSH
49379: LD_VAR 0 2
49383: NOT
49384: OR
49385: PUSH
49386: LD_VAR 0 3
49390: NOT
49391: OR
49392: IFFALSE 49396
// exit ;
49394: GO 50210
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49396: LD_ADDR_VAR 0 14
49400: PUSH
49401: LD_VAR 0 1
49405: PPUSH
49406: LD_VAR 0 2
49410: PPUSH
49411: LD_VAR 0 3
49415: PPUSH
49416: LD_VAR 0 4
49420: PPUSH
49421: LD_VAR 0 5
49425: PUSH
49426: LD_INT 1
49428: ARRAY
49429: PPUSH
49430: CALL_OW 248
49434: PPUSH
49435: LD_INT 0
49437: PPUSH
49438: CALL 51447 0 6
49442: ST_TO_ADDR
// if not hexes then
49443: LD_VAR 0 14
49447: NOT
49448: IFFALSE 49452
// exit ;
49450: GO 50210
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49452: LD_ADDR_VAR 0 17
49456: PUSH
49457: LD_VAR 0 5
49461: PPUSH
49462: LD_INT 22
49464: PUSH
49465: LD_VAR 0 13
49469: PPUSH
49470: CALL_OW 255
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: LD_INT 30
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 30
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: LIST
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PPUSH
49511: CALL_OW 72
49515: ST_TO_ADDR
// for i = 1 to hexes do
49516: LD_ADDR_VAR 0 9
49520: PUSH
49521: DOUBLE
49522: LD_INT 1
49524: DEC
49525: ST_TO_ADDR
49526: LD_VAR 0 14
49530: PUSH
49531: FOR_TO
49532: IFFALSE 50208
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49534: LD_ADDR_VAR 0 13
49538: PUSH
49539: LD_VAR 0 14
49543: PUSH
49544: LD_VAR 0 9
49548: ARRAY
49549: PUSH
49550: LD_INT 1
49552: ARRAY
49553: PPUSH
49554: LD_VAR 0 14
49558: PUSH
49559: LD_VAR 0 9
49563: ARRAY
49564: PUSH
49565: LD_INT 2
49567: ARRAY
49568: PPUSH
49569: CALL_OW 428
49573: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49574: LD_VAR 0 14
49578: PUSH
49579: LD_VAR 0 9
49583: ARRAY
49584: PUSH
49585: LD_INT 1
49587: ARRAY
49588: PPUSH
49589: LD_VAR 0 14
49593: PUSH
49594: LD_VAR 0 9
49598: ARRAY
49599: PUSH
49600: LD_INT 2
49602: ARRAY
49603: PPUSH
49604: CALL_OW 351
49608: PUSH
49609: LD_VAR 0 14
49613: PUSH
49614: LD_VAR 0 9
49618: ARRAY
49619: PUSH
49620: LD_INT 1
49622: ARRAY
49623: PPUSH
49624: LD_VAR 0 14
49628: PUSH
49629: LD_VAR 0 9
49633: ARRAY
49634: PUSH
49635: LD_INT 2
49637: ARRAY
49638: PPUSH
49639: CALL_OW 488
49643: NOT
49644: OR
49645: PUSH
49646: LD_VAR 0 13
49650: PPUSH
49651: CALL_OW 247
49655: PUSH
49656: LD_INT 3
49658: EQUAL
49659: OR
49660: IFFALSE 49666
// exit ;
49662: POP
49663: POP
49664: GO 50210
// if not tmp then
49666: LD_VAR 0 13
49670: NOT
49671: IFFALSE 49675
// continue ;
49673: GO 49531
// result := true ;
49675: LD_ADDR_VAR 0 8
49679: PUSH
49680: LD_INT 1
49682: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49683: LD_VAR 0 6
49687: PUSH
49688: LD_VAR 0 13
49692: PPUSH
49693: CALL_OW 247
49697: PUSH
49698: LD_INT 2
49700: EQUAL
49701: AND
49702: PUSH
49703: LD_VAR 0 13
49707: PPUSH
49708: CALL_OW 263
49712: PUSH
49713: LD_INT 1
49715: EQUAL
49716: AND
49717: IFFALSE 49881
// begin if IsDrivenBy ( tmp ) then
49719: LD_VAR 0 13
49723: PPUSH
49724: CALL_OW 311
49728: IFFALSE 49732
// continue ;
49730: GO 49531
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49732: LD_VAR 0 6
49736: PPUSH
49737: LD_INT 3
49739: PUSH
49740: LD_INT 60
49742: PUSH
49743: EMPTY
49744: LIST
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 3
49752: PUSH
49753: LD_INT 55
49755: PUSH
49756: EMPTY
49757: LIST
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PPUSH
49767: CALL_OW 72
49771: IFFALSE 49879
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49773: LD_ADDR_VAR 0 18
49777: PUSH
49778: LD_VAR 0 6
49782: PPUSH
49783: LD_INT 3
49785: PUSH
49786: LD_INT 60
49788: PUSH
49789: EMPTY
49790: LIST
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: PUSH
49799: LD_INT 55
49801: PUSH
49802: EMPTY
49803: LIST
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PPUSH
49813: CALL_OW 72
49817: PUSH
49818: LD_INT 1
49820: ARRAY
49821: ST_TO_ADDR
// if IsInUnit ( driver ) then
49822: LD_VAR 0 18
49826: PPUSH
49827: CALL_OW 310
49831: IFFALSE 49842
// ComExit ( driver ) ;
49833: LD_VAR 0 18
49837: PPUSH
49838: CALL 74575 0 1
// AddComEnterUnit ( driver , tmp ) ;
49842: LD_VAR 0 18
49846: PPUSH
49847: LD_VAR 0 13
49851: PPUSH
49852: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49856: LD_VAR 0 18
49860: PPUSH
49861: LD_VAR 0 7
49865: PPUSH
49866: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49870: LD_VAR 0 18
49874: PPUSH
49875: CALL_OW 181
// end ; continue ;
49879: GO 49531
// end ; if not cleaners or not tmp in cleaners then
49881: LD_VAR 0 6
49885: NOT
49886: PUSH
49887: LD_VAR 0 13
49891: PUSH
49892: LD_VAR 0 6
49896: IN
49897: NOT
49898: OR
49899: IFFALSE 50206
// begin if dep then
49901: LD_VAR 0 17
49905: IFFALSE 50041
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49907: LD_ADDR_VAR 0 16
49911: PUSH
49912: LD_VAR 0 17
49916: PUSH
49917: LD_INT 1
49919: ARRAY
49920: PPUSH
49921: CALL_OW 250
49925: PPUSH
49926: LD_VAR 0 17
49930: PUSH
49931: LD_INT 1
49933: ARRAY
49934: PPUSH
49935: CALL_OW 254
49939: PPUSH
49940: LD_INT 5
49942: PPUSH
49943: CALL_OW 272
49947: PUSH
49948: LD_VAR 0 17
49952: PUSH
49953: LD_INT 1
49955: ARRAY
49956: PPUSH
49957: CALL_OW 251
49961: PPUSH
49962: LD_VAR 0 17
49966: PUSH
49967: LD_INT 1
49969: ARRAY
49970: PPUSH
49971: CALL_OW 254
49975: PPUSH
49976: LD_INT 5
49978: PPUSH
49979: CALL_OW 273
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49988: LD_VAR 0 16
49992: PUSH
49993: LD_INT 1
49995: ARRAY
49996: PPUSH
49997: LD_VAR 0 16
50001: PUSH
50002: LD_INT 2
50004: ARRAY
50005: PPUSH
50006: CALL_OW 488
50010: IFFALSE 50041
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50012: LD_VAR 0 13
50016: PPUSH
50017: LD_VAR 0 16
50021: PUSH
50022: LD_INT 1
50024: ARRAY
50025: PPUSH
50026: LD_VAR 0 16
50030: PUSH
50031: LD_INT 2
50033: ARRAY
50034: PPUSH
50035: CALL_OW 111
// continue ;
50039: GO 49531
// end ; end ; r := GetDir ( tmp ) ;
50041: LD_ADDR_VAR 0 15
50045: PUSH
50046: LD_VAR 0 13
50050: PPUSH
50051: CALL_OW 254
50055: ST_TO_ADDR
// if r = 5 then
50056: LD_VAR 0 15
50060: PUSH
50061: LD_INT 5
50063: EQUAL
50064: IFFALSE 50074
// r := 0 ;
50066: LD_ADDR_VAR 0 15
50070: PUSH
50071: LD_INT 0
50073: ST_TO_ADDR
// for j = r to 5 do
50074: LD_ADDR_VAR 0 10
50078: PUSH
50079: DOUBLE
50080: LD_VAR 0 15
50084: DEC
50085: ST_TO_ADDR
50086: LD_INT 5
50088: PUSH
50089: FOR_TO
50090: IFFALSE 50204
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50092: LD_ADDR_VAR 0 11
50096: PUSH
50097: LD_VAR 0 13
50101: PPUSH
50102: CALL_OW 250
50106: PPUSH
50107: LD_VAR 0 10
50111: PPUSH
50112: LD_INT 2
50114: PPUSH
50115: CALL_OW 272
50119: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50120: LD_ADDR_VAR 0 12
50124: PUSH
50125: LD_VAR 0 13
50129: PPUSH
50130: CALL_OW 251
50134: PPUSH
50135: LD_VAR 0 10
50139: PPUSH
50140: LD_INT 2
50142: PPUSH
50143: CALL_OW 273
50147: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50148: LD_VAR 0 11
50152: PPUSH
50153: LD_VAR 0 12
50157: PPUSH
50158: CALL_OW 488
50162: PUSH
50163: LD_VAR 0 11
50167: PPUSH
50168: LD_VAR 0 12
50172: PPUSH
50173: CALL_OW 428
50177: NOT
50178: AND
50179: IFFALSE 50202
// begin ComMoveXY ( tmp , _x , _y ) ;
50181: LD_VAR 0 13
50185: PPUSH
50186: LD_VAR 0 11
50190: PPUSH
50191: LD_VAR 0 12
50195: PPUSH
50196: CALL_OW 111
// break ;
50200: GO 50204
// end ; end ;
50202: GO 50089
50204: POP
50205: POP
// end ; end ;
50206: GO 49531
50208: POP
50209: POP
// end ;
50210: LD_VAR 0 8
50214: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50215: LD_INT 0
50217: PPUSH
// result := true ;
50218: LD_ADDR_VAR 0 3
50222: PUSH
50223: LD_INT 1
50225: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50226: LD_VAR 0 2
50230: PUSH
50231: LD_INT 24
50233: DOUBLE
50234: EQUAL
50235: IFTRUE 50245
50237: LD_INT 33
50239: DOUBLE
50240: EQUAL
50241: IFTRUE 50245
50243: GO 50270
50245: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50246: LD_ADDR_VAR 0 3
50250: PUSH
50251: LD_INT 32
50253: PPUSH
50254: LD_VAR 0 1
50258: PPUSH
50259: CALL_OW 321
50263: PUSH
50264: LD_INT 2
50266: EQUAL
50267: ST_TO_ADDR
50268: GO 50590
50270: LD_INT 20
50272: DOUBLE
50273: EQUAL
50274: IFTRUE 50278
50276: GO 50303
50278: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50279: LD_ADDR_VAR 0 3
50283: PUSH
50284: LD_INT 6
50286: PPUSH
50287: LD_VAR 0 1
50291: PPUSH
50292: CALL_OW 321
50296: PUSH
50297: LD_INT 2
50299: EQUAL
50300: ST_TO_ADDR
50301: GO 50590
50303: LD_INT 22
50305: DOUBLE
50306: EQUAL
50307: IFTRUE 50317
50309: LD_INT 36
50311: DOUBLE
50312: EQUAL
50313: IFTRUE 50317
50315: GO 50342
50317: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50318: LD_ADDR_VAR 0 3
50322: PUSH
50323: LD_INT 15
50325: PPUSH
50326: LD_VAR 0 1
50330: PPUSH
50331: CALL_OW 321
50335: PUSH
50336: LD_INT 2
50338: EQUAL
50339: ST_TO_ADDR
50340: GO 50590
50342: LD_INT 30
50344: DOUBLE
50345: EQUAL
50346: IFTRUE 50350
50348: GO 50375
50350: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50351: LD_ADDR_VAR 0 3
50355: PUSH
50356: LD_INT 20
50358: PPUSH
50359: LD_VAR 0 1
50363: PPUSH
50364: CALL_OW 321
50368: PUSH
50369: LD_INT 2
50371: EQUAL
50372: ST_TO_ADDR
50373: GO 50590
50375: LD_INT 28
50377: DOUBLE
50378: EQUAL
50379: IFTRUE 50389
50381: LD_INT 21
50383: DOUBLE
50384: EQUAL
50385: IFTRUE 50389
50387: GO 50414
50389: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50390: LD_ADDR_VAR 0 3
50394: PUSH
50395: LD_INT 21
50397: PPUSH
50398: LD_VAR 0 1
50402: PPUSH
50403: CALL_OW 321
50407: PUSH
50408: LD_INT 2
50410: EQUAL
50411: ST_TO_ADDR
50412: GO 50590
50414: LD_INT 16
50416: DOUBLE
50417: EQUAL
50418: IFTRUE 50422
50420: GO 50449
50422: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50423: LD_ADDR_VAR 0 3
50427: PUSH
50428: LD_EXP 45
50432: PPUSH
50433: LD_VAR 0 1
50437: PPUSH
50438: CALL_OW 321
50442: PUSH
50443: LD_INT 2
50445: EQUAL
50446: ST_TO_ADDR
50447: GO 50590
50449: LD_INT 19
50451: DOUBLE
50452: EQUAL
50453: IFTRUE 50463
50455: LD_INT 23
50457: DOUBLE
50458: EQUAL
50459: IFTRUE 50463
50461: GO 50490
50463: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50464: LD_ADDR_VAR 0 3
50468: PUSH
50469: LD_EXP 44
50473: PPUSH
50474: LD_VAR 0 1
50478: PPUSH
50479: CALL_OW 321
50483: PUSH
50484: LD_INT 2
50486: EQUAL
50487: ST_TO_ADDR
50488: GO 50590
50490: LD_INT 17
50492: DOUBLE
50493: EQUAL
50494: IFTRUE 50498
50496: GO 50523
50498: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50499: LD_ADDR_VAR 0 3
50503: PUSH
50504: LD_INT 39
50506: PPUSH
50507: LD_VAR 0 1
50511: PPUSH
50512: CALL_OW 321
50516: PUSH
50517: LD_INT 2
50519: EQUAL
50520: ST_TO_ADDR
50521: GO 50590
50523: LD_INT 18
50525: DOUBLE
50526: EQUAL
50527: IFTRUE 50531
50529: GO 50556
50531: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50532: LD_ADDR_VAR 0 3
50536: PUSH
50537: LD_INT 40
50539: PPUSH
50540: LD_VAR 0 1
50544: PPUSH
50545: CALL_OW 321
50549: PUSH
50550: LD_INT 2
50552: EQUAL
50553: ST_TO_ADDR
50554: GO 50590
50556: LD_INT 27
50558: DOUBLE
50559: EQUAL
50560: IFTRUE 50564
50562: GO 50589
50564: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50565: LD_ADDR_VAR 0 3
50569: PUSH
50570: LD_INT 35
50572: PPUSH
50573: LD_VAR 0 1
50577: PPUSH
50578: CALL_OW 321
50582: PUSH
50583: LD_INT 2
50585: EQUAL
50586: ST_TO_ADDR
50587: GO 50590
50589: POP
// end ;
50590: LD_VAR 0 3
50594: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50595: LD_INT 0
50597: PPUSH
50598: PPUSH
50599: PPUSH
50600: PPUSH
50601: PPUSH
50602: PPUSH
50603: PPUSH
50604: PPUSH
50605: PPUSH
50606: PPUSH
50607: PPUSH
// result := false ;
50608: LD_ADDR_VAR 0 6
50612: PUSH
50613: LD_INT 0
50615: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50616: LD_VAR 0 1
50620: NOT
50621: PUSH
50622: LD_VAR 0 1
50626: PPUSH
50627: CALL_OW 266
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: IN
50642: NOT
50643: OR
50644: PUSH
50645: LD_VAR 0 2
50649: NOT
50650: OR
50651: PUSH
50652: LD_VAR 0 5
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: LD_INT 3
50668: PUSH
50669: LD_INT 4
50671: PUSH
50672: LD_INT 5
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: IN
50683: NOT
50684: OR
50685: PUSH
50686: LD_VAR 0 3
50690: PPUSH
50691: LD_VAR 0 4
50695: PPUSH
50696: CALL_OW 488
50700: NOT
50701: OR
50702: IFFALSE 50706
// exit ;
50704: GO 51442
// side := GetSide ( depot ) ;
50706: LD_ADDR_VAR 0 9
50710: PUSH
50711: LD_VAR 0 1
50715: PPUSH
50716: CALL_OW 255
50720: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50721: LD_VAR 0 9
50725: PPUSH
50726: LD_VAR 0 2
50730: PPUSH
50731: CALL 50215 0 2
50735: NOT
50736: IFFALSE 50740
// exit ;
50738: GO 51442
// pom := GetBase ( depot ) ;
50740: LD_ADDR_VAR 0 10
50744: PUSH
50745: LD_VAR 0 1
50749: PPUSH
50750: CALL_OW 274
50754: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50755: LD_ADDR_VAR 0 11
50759: PUSH
50760: LD_VAR 0 2
50764: PPUSH
50765: LD_VAR 0 1
50769: PPUSH
50770: CALL_OW 248
50774: PPUSH
50775: CALL_OW 450
50779: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50780: LD_VAR 0 10
50784: PPUSH
50785: LD_INT 1
50787: PPUSH
50788: CALL_OW 275
50792: PUSH
50793: LD_VAR 0 11
50797: PUSH
50798: LD_INT 1
50800: ARRAY
50801: GREATEREQUAL
50802: PUSH
50803: LD_VAR 0 10
50807: PPUSH
50808: LD_INT 2
50810: PPUSH
50811: CALL_OW 275
50815: PUSH
50816: LD_VAR 0 11
50820: PUSH
50821: LD_INT 2
50823: ARRAY
50824: GREATEREQUAL
50825: AND
50826: PUSH
50827: LD_VAR 0 10
50831: PPUSH
50832: LD_INT 3
50834: PPUSH
50835: CALL_OW 275
50839: PUSH
50840: LD_VAR 0 11
50844: PUSH
50845: LD_INT 3
50847: ARRAY
50848: GREATEREQUAL
50849: AND
50850: NOT
50851: IFFALSE 50855
// exit ;
50853: GO 51442
// if GetBType ( depot ) = b_depot then
50855: LD_VAR 0 1
50859: PPUSH
50860: CALL_OW 266
50864: PUSH
50865: LD_INT 0
50867: EQUAL
50868: IFFALSE 50880
// dist := 28 else
50870: LD_ADDR_VAR 0 14
50874: PUSH
50875: LD_INT 28
50877: ST_TO_ADDR
50878: GO 50888
// dist := 36 ;
50880: LD_ADDR_VAR 0 14
50884: PUSH
50885: LD_INT 36
50887: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50888: LD_VAR 0 1
50892: PPUSH
50893: LD_VAR 0 3
50897: PPUSH
50898: LD_VAR 0 4
50902: PPUSH
50903: CALL_OW 297
50907: PUSH
50908: LD_VAR 0 14
50912: GREATER
50913: IFFALSE 50917
// exit ;
50915: GO 51442
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50917: LD_ADDR_VAR 0 12
50921: PUSH
50922: LD_VAR 0 2
50926: PPUSH
50927: LD_VAR 0 3
50931: PPUSH
50932: LD_VAR 0 4
50936: PPUSH
50937: LD_VAR 0 5
50941: PPUSH
50942: LD_VAR 0 1
50946: PPUSH
50947: CALL_OW 248
50951: PPUSH
50952: LD_INT 0
50954: PPUSH
50955: CALL 51447 0 6
50959: ST_TO_ADDR
// if not hexes then
50960: LD_VAR 0 12
50964: NOT
50965: IFFALSE 50969
// exit ;
50967: GO 51442
// hex := GetHexInfo ( x , y ) ;
50969: LD_ADDR_VAR 0 15
50973: PUSH
50974: LD_VAR 0 3
50978: PPUSH
50979: LD_VAR 0 4
50983: PPUSH
50984: CALL_OW 546
50988: ST_TO_ADDR
// if hex [ 1 ] then
50989: LD_VAR 0 15
50993: PUSH
50994: LD_INT 1
50996: ARRAY
50997: IFFALSE 51001
// exit ;
50999: GO 51442
// height := hex [ 2 ] ;
51001: LD_ADDR_VAR 0 13
51005: PUSH
51006: LD_VAR 0 15
51010: PUSH
51011: LD_INT 2
51013: ARRAY
51014: ST_TO_ADDR
// for i = 1 to hexes do
51015: LD_ADDR_VAR 0 7
51019: PUSH
51020: DOUBLE
51021: LD_INT 1
51023: DEC
51024: ST_TO_ADDR
51025: LD_VAR 0 12
51029: PUSH
51030: FOR_TO
51031: IFFALSE 51361
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51033: LD_VAR 0 12
51037: PUSH
51038: LD_VAR 0 7
51042: ARRAY
51043: PUSH
51044: LD_INT 1
51046: ARRAY
51047: PPUSH
51048: LD_VAR 0 12
51052: PUSH
51053: LD_VAR 0 7
51057: ARRAY
51058: PUSH
51059: LD_INT 2
51061: ARRAY
51062: PPUSH
51063: CALL_OW 488
51067: NOT
51068: PUSH
51069: LD_VAR 0 12
51073: PUSH
51074: LD_VAR 0 7
51078: ARRAY
51079: PUSH
51080: LD_INT 1
51082: ARRAY
51083: PPUSH
51084: LD_VAR 0 12
51088: PUSH
51089: LD_VAR 0 7
51093: ARRAY
51094: PUSH
51095: LD_INT 2
51097: ARRAY
51098: PPUSH
51099: CALL_OW 428
51103: PUSH
51104: LD_INT 0
51106: GREATER
51107: OR
51108: PUSH
51109: LD_VAR 0 12
51113: PUSH
51114: LD_VAR 0 7
51118: ARRAY
51119: PUSH
51120: LD_INT 1
51122: ARRAY
51123: PPUSH
51124: LD_VAR 0 12
51128: PUSH
51129: LD_VAR 0 7
51133: ARRAY
51134: PUSH
51135: LD_INT 2
51137: ARRAY
51138: PPUSH
51139: CALL_OW 351
51143: OR
51144: IFFALSE 51150
// exit ;
51146: POP
51147: POP
51148: GO 51442
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51150: LD_ADDR_VAR 0 8
51154: PUSH
51155: LD_VAR 0 12
51159: PUSH
51160: LD_VAR 0 7
51164: ARRAY
51165: PUSH
51166: LD_INT 1
51168: ARRAY
51169: PPUSH
51170: LD_VAR 0 12
51174: PUSH
51175: LD_VAR 0 7
51179: ARRAY
51180: PUSH
51181: LD_INT 2
51183: ARRAY
51184: PPUSH
51185: CALL_OW 546
51189: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51190: LD_VAR 0 8
51194: PUSH
51195: LD_INT 1
51197: ARRAY
51198: PUSH
51199: LD_VAR 0 8
51203: PUSH
51204: LD_INT 2
51206: ARRAY
51207: PUSH
51208: LD_VAR 0 13
51212: PUSH
51213: LD_INT 2
51215: PLUS
51216: GREATER
51217: OR
51218: PUSH
51219: LD_VAR 0 8
51223: PUSH
51224: LD_INT 2
51226: ARRAY
51227: PUSH
51228: LD_VAR 0 13
51232: PUSH
51233: LD_INT 2
51235: MINUS
51236: LESS
51237: OR
51238: PUSH
51239: LD_VAR 0 8
51243: PUSH
51244: LD_INT 3
51246: ARRAY
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: LD_INT 8
51253: PUSH
51254: LD_INT 9
51256: PUSH
51257: LD_INT 10
51259: PUSH
51260: LD_INT 11
51262: PUSH
51263: LD_INT 12
51265: PUSH
51266: LD_INT 13
51268: PUSH
51269: LD_INT 16
51271: PUSH
51272: LD_INT 17
51274: PUSH
51275: LD_INT 18
51277: PUSH
51278: LD_INT 19
51280: PUSH
51281: LD_INT 20
51283: PUSH
51284: LD_INT 21
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: IN
51302: NOT
51303: OR
51304: PUSH
51305: LD_VAR 0 8
51309: PUSH
51310: LD_INT 5
51312: ARRAY
51313: NOT
51314: OR
51315: PUSH
51316: LD_VAR 0 8
51320: PUSH
51321: LD_INT 6
51323: ARRAY
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: LD_INT 7
51333: PUSH
51334: LD_INT 9
51336: PUSH
51337: LD_INT 10
51339: PUSH
51340: LD_INT 11
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: IN
51351: NOT
51352: OR
51353: IFFALSE 51359
// exit ;
51355: POP
51356: POP
51357: GO 51442
// end ;
51359: GO 51030
51361: POP
51362: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51363: LD_VAR 0 9
51367: PPUSH
51368: LD_VAR 0 3
51372: PPUSH
51373: LD_VAR 0 4
51377: PPUSH
51378: LD_INT 20
51380: PPUSH
51381: CALL 43388 0 4
51385: PUSH
51386: LD_INT 4
51388: ARRAY
51389: IFFALSE 51393
// exit ;
51391: GO 51442
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51393: LD_VAR 0 2
51397: PUSH
51398: LD_INT 29
51400: PUSH
51401: LD_INT 30
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: IN
51408: PUSH
51409: LD_VAR 0 3
51413: PPUSH
51414: LD_VAR 0 4
51418: PPUSH
51419: LD_VAR 0 9
51423: PPUSH
51424: CALL_OW 440
51428: NOT
51429: AND
51430: IFFALSE 51434
// exit ;
51432: GO 51442
// result := true ;
51434: LD_ADDR_VAR 0 6
51438: PUSH
51439: LD_INT 1
51441: ST_TO_ADDR
// end ;
51442: LD_VAR 0 6
51446: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51447: LD_INT 0
51449: PPUSH
51450: PPUSH
51451: PPUSH
51452: PPUSH
51453: PPUSH
51454: PPUSH
51455: PPUSH
51456: PPUSH
51457: PPUSH
51458: PPUSH
51459: PPUSH
51460: PPUSH
51461: PPUSH
51462: PPUSH
51463: PPUSH
51464: PPUSH
51465: PPUSH
51466: PPUSH
51467: PPUSH
51468: PPUSH
51469: PPUSH
51470: PPUSH
51471: PPUSH
51472: PPUSH
51473: PPUSH
51474: PPUSH
51475: PPUSH
51476: PPUSH
51477: PPUSH
51478: PPUSH
51479: PPUSH
51480: PPUSH
51481: PPUSH
51482: PPUSH
51483: PPUSH
51484: PPUSH
51485: PPUSH
51486: PPUSH
51487: PPUSH
51488: PPUSH
51489: PPUSH
51490: PPUSH
51491: PPUSH
51492: PPUSH
51493: PPUSH
51494: PPUSH
51495: PPUSH
51496: PPUSH
51497: PPUSH
51498: PPUSH
51499: PPUSH
51500: PPUSH
51501: PPUSH
51502: PPUSH
51503: PPUSH
51504: PPUSH
51505: PPUSH
51506: PPUSH
// result = [ ] ;
51507: LD_ADDR_VAR 0 7
51511: PUSH
51512: EMPTY
51513: ST_TO_ADDR
// temp_list = [ ] ;
51514: LD_ADDR_VAR 0 9
51518: PUSH
51519: EMPTY
51520: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51521: LD_VAR 0 4
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 3
51537: PUSH
51538: LD_INT 4
51540: PUSH
51541: LD_INT 5
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: IN
51552: NOT
51553: PUSH
51554: LD_VAR 0 1
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: IN
51569: PUSH
51570: LD_VAR 0 5
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: LD_INT 3
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: IN
51589: NOT
51590: AND
51591: OR
51592: IFFALSE 51596
// exit ;
51594: GO 69987
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51596: LD_VAR 0 1
51600: PUSH
51601: LD_INT 6
51603: PUSH
51604: LD_INT 7
51606: PUSH
51607: LD_INT 8
51609: PUSH
51610: LD_INT 13
51612: PUSH
51613: LD_INT 12
51615: PUSH
51616: LD_INT 15
51618: PUSH
51619: LD_INT 11
51621: PUSH
51622: LD_INT 14
51624: PUSH
51625: LD_INT 10
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: IN
51639: IFFALSE 51649
// btype = b_lab ;
51641: LD_ADDR_VAR 0 1
51645: PUSH
51646: LD_INT 6
51648: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51649: LD_VAR 0 6
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: LIST
51667: IN
51668: NOT
51669: PUSH
51670: LD_VAR 0 1
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: LD_INT 6
51689: PUSH
51690: LD_INT 36
51692: PUSH
51693: LD_INT 4
51695: PUSH
51696: LD_INT 5
51698: PUSH
51699: LD_INT 31
51701: PUSH
51702: LD_INT 32
51704: PUSH
51705: LD_INT 33
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: IN
51721: NOT
51722: PUSH
51723: LD_VAR 0 6
51727: PUSH
51728: LD_INT 1
51730: EQUAL
51731: AND
51732: OR
51733: PUSH
51734: LD_VAR 0 1
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: LD_INT 3
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: IN
51749: NOT
51750: PUSH
51751: LD_VAR 0 6
51755: PUSH
51756: LD_INT 2
51758: EQUAL
51759: AND
51760: OR
51761: IFFALSE 51771
// mode = 0 ;
51763: LD_ADDR_VAR 0 6
51767: PUSH
51768: LD_INT 0
51770: ST_TO_ADDR
// case mode of 0 :
51771: LD_VAR 0 6
51775: PUSH
51776: LD_INT 0
51778: DOUBLE
51779: EQUAL
51780: IFTRUE 51784
51782: GO 63237
51784: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51785: LD_ADDR_VAR 0 11
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 3
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 3
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51978: LD_ADDR_VAR 0 12
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 3
52135: NEG
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 3
52146: NEG
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52174: LD_ADDR_VAR 0 13
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 3
52333: NEG
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 3
52345: NEG
52346: PUSH
52347: LD_INT 3
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52373: LD_ADDR_VAR 0 14
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 2
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 3
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 3
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52569: LD_ADDR_VAR 0 15
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52762: LD_ADDR_VAR 0 16
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 3
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 3
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52955: LD_ADDR_VAR 0 17
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53185: LD_ADDR_VAR 0 18
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53415: LD_ADDR_VAR 0 19
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53645: LD_ADDR_VAR 0 20
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: LD_INT 2
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53875: LD_ADDR_VAR 0 21
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54105: LD_ADDR_VAR 0 22
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: LD_INT 2
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54335: LD_ADDR_VAR 0 23
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 3
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 3
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54615: LD_ADDR_VAR 0 24
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 2
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 3
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 3
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54891: LD_ADDR_VAR 0 25
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 2
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 2
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 3
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 3
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55165: LD_ADDR_VAR 0 26
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 3
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55441: LD_ADDR_VAR 0 27
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 3
55674: NEG
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 3
55686: NEG
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55721: LD_ADDR_VAR 0 28
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: NEG
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: NEG
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 3
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 3
55956: NEG
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 3
55968: NEG
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56003: LD_ADDR_VAR 0 29
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: LD_INT 3
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: LD_INT 3
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 3
56247: NEG
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56282: LD_ADDR_VAR 0 30
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: LD_INT 3
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 3
56525: NEG
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56560: LD_ADDR_VAR 0 31
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: NEG
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 3
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 3
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 3
56803: NEG
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56838: LD_ADDR_VAR 0 32
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 3
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: LD_INT 3
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57116: LD_ADDR_VAR 0 33
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 3
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 3
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: NEG
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57395: LD_ADDR_VAR 0 34
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 2
57520: PUSH
57521: LD_INT 2
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: LD_INT 2
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 3
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: LD_INT 3
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: NEG
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57675: LD_ADDR_VAR 0 35
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57787: LD_ADDR_VAR 0 36
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57899: LD_ADDR_VAR 0 37
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58011: LD_ADDR_VAR 0 38
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58123: LD_ADDR_VAR 0 39
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: LD_INT 2
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58235: LD_ADDR_VAR 0 40
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58347: LD_ADDR_VAR 0 41
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: LD_INT 3
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 3
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 3
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 3
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 3
58590: PUSH
58591: LD_INT 3
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 3
58621: NEG
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 3
58632: NEG
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 3
58644: NEG
58645: PUSH
58646: LD_INT 2
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 3
58656: NEG
58657: PUSH
58658: LD_INT 3
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58697: LD_ADDR_VAR 0 42
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 2
58887: NEG
58888: PUSH
58889: LD_INT 3
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 3
58943: PUSH
58944: LD_INT 3
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: LD_INT 3
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 3
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 3
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 3
58994: NEG
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 3
59006: NEG
59007: PUSH
59008: LD_INT 3
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59047: LD_ADDR_VAR 0 43
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: LD_INT 3
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: LD_INT 3
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 3
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 3
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 3
59343: NEG
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 3
59354: NEG
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59395: LD_ADDR_VAR 0 44
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 2
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: NEG
59586: PUSH
59587: LD_INT 3
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 3
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 3
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: LD_INT 2
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: LD_INT 3
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 2
59658: NEG
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 3
59669: NEG
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 3
59680: NEG
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 3
59692: NEG
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 3
59704: NEG
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59745: LD_ADDR_VAR 0 45
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 2
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 2
59870: PUSH
59871: LD_INT 2
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: LD_INT 2
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: LD_INT 3
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: LD_INT 3
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: LD_INT 3
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: LD_INT 3
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 3
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 3
60042: NEG
60043: PUSH
60044: LD_INT 2
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 3
60054: NEG
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60095: LD_ADDR_VAR 0 46
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 2
60272: NEG
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: LD_INT 3
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 3
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 3
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: LD_INT 3
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 3
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: LD_INT 2
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 3
60391: NEG
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60443: LD_ADDR_VAR 0 47
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: LD_INT 2
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60594: LD_ADDR_VAR 0 48
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: LD_INT 2
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 2
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60741: LD_ADDR_VAR 0 49
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: LD_INT 2
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60885: LD_ADDR_VAR 0 50
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: LD_INT 2
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: LD_INT 2
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 2
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61029: LD_ADDR_VAR 0 51
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 2
61141: NEG
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61176: LD_ADDR_VAR 0 52
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: NEG
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 2
61291: NEG
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 2
61303: NEG
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61327: LD_ADDR_VAR 0 53
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: LD_INT 2
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: LD_INT 2
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 2
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: LD_INT 2
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 2
61503: NEG
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 2
61514: NEG
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: LD_INT 2
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61557: LD_ADDR_VAR 0 54
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 2
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 2
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 2
61756: NEG
61757: PUSH
61758: LD_INT 2
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61787: LD_ADDR_VAR 0 55
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 2
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 2
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 2
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 2
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: LD_INT 2
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: LD_INT 2
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 2
61963: NEG
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 2
61974: NEG
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 2
61986: NEG
61987: PUSH
61988: LD_INT 2
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62017: LD_ADDR_VAR 0 56
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 2
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: NEG
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 2
62193: NEG
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 2
62204: NEG
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 2
62216: NEG
62217: PUSH
62218: LD_INT 2
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62247: LD_ADDR_VAR 0 57
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 2
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: LD_INT 2
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 2
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 2
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: LD_INT 2
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 2
62423: NEG
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: LD_INT 1
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: LD_INT 2
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62477: LD_ADDR_VAR 0 58
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 1
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: NEG
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: LD_INT 2
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: LD_INT 2
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 2
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: LD_INT 2
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: LD_INT 2
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 2
62653: NEG
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: LD_INT 2
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62707: LD_ADDR_VAR 0 59
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: NEG
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62795: LD_ADDR_VAR 0 60
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: LD_INT 1
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: LD_INT 1
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62883: LD_ADDR_VAR 0 61
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 1
62941: NEG
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: NEG
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62971: LD_ADDR_VAR 0 62
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63059: LD_ADDR_VAR 0 63
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63147: LD_ADDR_VAR 0 64
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: LD_INT 1
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 1
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: LD_INT 1
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 1
63205: NEG
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 1
63216: NEG
63217: PUSH
63218: LD_INT 1
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: ST_TO_ADDR
// end ; 1 :
63235: GO 69132
63237: LD_INT 1
63239: DOUBLE
63240: EQUAL
63241: IFTRUE 63245
63243: GO 65868
63245: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63246: LD_ADDR_VAR 0 11
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: LD_INT 3
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: LD_INT 3
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: LD_INT 2
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: LIST
63289: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63290: LD_ADDR_VAR 0 12
63294: PUSH
63295: LD_INT 2
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 3
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 3
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63331: LD_ADDR_VAR 0 13
63335: PUSH
63336: LD_INT 3
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 3
63348: PUSH
63349: LD_INT 3
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 2
63358: PUSH
63359: LD_INT 3
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63371: LD_ADDR_VAR 0 14
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 3
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 3
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 1
63398: NEG
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: LIST
63411: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63412: LD_ADDR_VAR 0 15
63416: PUSH
63417: LD_INT 2
63419: NEG
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 3
63430: NEG
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 3
63441: NEG
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: LIST
63455: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63456: LD_ADDR_VAR 0 16
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: LD_INT 3
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 3
63475: NEG
63476: PUSH
63477: LD_INT 2
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 3
63487: NEG
63488: PUSH
63489: LD_INT 3
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: LIST
63501: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63502: LD_ADDR_VAR 0 17
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 3
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 3
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: LD_INT 2
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: LIST
63545: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63546: LD_ADDR_VAR 0 18
63550: PUSH
63551: LD_INT 2
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 3
63564: PUSH
63565: LD_INT 0
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 3
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: LIST
63586: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63587: LD_ADDR_VAR 0 19
63591: PUSH
63592: LD_INT 3
63594: PUSH
63595: LD_INT 2
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 3
63604: PUSH
63605: LD_INT 3
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 2
63614: PUSH
63615: LD_INT 3
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63627: LD_ADDR_VAR 0 20
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: LD_INT 3
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: LD_INT 3
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: LD_INT 2
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63668: LD_ADDR_VAR 0 21
63672: PUSH
63673: LD_INT 2
63675: NEG
63676: PUSH
63677: LD_INT 1
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 3
63686: NEG
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 3
63697: NEG
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: LIST
63711: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63712: LD_ADDR_VAR 0 22
63716: PUSH
63717: LD_INT 2
63719: NEG
63720: PUSH
63721: LD_INT 3
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 3
63731: NEG
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 3
63743: NEG
63744: PUSH
63745: LD_INT 3
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63758: LD_ADDR_VAR 0 23
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: LD_INT 3
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: LD_INT 4
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: LD_INT 3
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: LIST
63801: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63802: LD_ADDR_VAR 0 24
63806: PUSH
63807: LD_INT 3
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: LD_INT 1
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 4
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: LIST
63842: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63843: LD_ADDR_VAR 0 25
63847: PUSH
63848: LD_INT 3
63850: PUSH
63851: LD_INT 3
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 4
63860: PUSH
63861: LD_INT 3
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 3
63870: PUSH
63871: LD_INT 4
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: LIST
63882: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63883: LD_ADDR_VAR 0 26
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: LD_INT 3
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: LD_INT 4
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: LD_INT 3
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63924: LD_ADDR_VAR 0 27
63928: PUSH
63929: LD_INT 3
63931: NEG
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 3
63942: NEG
63943: PUSH
63944: LD_INT 1
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 4
63953: NEG
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: LIST
63967: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63968: LD_ADDR_VAR 0 28
63972: PUSH
63973: LD_INT 3
63975: NEG
63976: PUSH
63977: LD_INT 3
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 3
63987: NEG
63988: PUSH
63989: LD_INT 4
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 4
63999: NEG
64000: PUSH
64001: LD_INT 3
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: LIST
64013: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64014: LD_ADDR_VAR 0 29
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: LD_INT 3
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 3
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: LD_INT 2
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: LD_INT 4
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: LD_INT 4
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: LD_INT 3
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: NEG
64090: PUSH
64091: LD_INT 5
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: LD_INT 5
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: PUSH
64113: LD_INT 4
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: LD_INT 6
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: LD_INT 6
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 1
64146: PUSH
64147: LD_INT 5
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64169: LD_ADDR_VAR 0 30
64173: PUSH
64174: LD_INT 2
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 3
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 3
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 3
64207: PUSH
64208: LD_INT 1
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 4
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 4
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 4
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 5
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 5
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 5
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 6
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 6
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64312: LD_ADDR_VAR 0 31
64316: PUSH
64317: LD_INT 3
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 3
64329: PUSH
64330: LD_INT 3
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 2
64339: PUSH
64340: LD_INT 3
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 4
64349: PUSH
64350: LD_INT 3
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 4
64359: PUSH
64360: LD_INT 4
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 3
64369: PUSH
64370: LD_INT 4
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 5
64379: PUSH
64380: LD_INT 4
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 5
64389: PUSH
64390: LD_INT 5
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 4
64399: PUSH
64400: LD_INT 5
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 6
64409: PUSH
64410: LD_INT 5
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 6
64419: PUSH
64420: LD_INT 6
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 5
64429: PUSH
64430: LD_INT 6
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64451: LD_ADDR_VAR 0 32
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: LD_INT 3
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: LD_INT 3
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: LD_INT 2
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: LD_INT 4
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: LD_INT 4
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: PUSH
64511: LD_INT 3
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 1
64520: PUSH
64521: LD_INT 5
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: LD_INT 5
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: LD_INT 4
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 1
64551: PUSH
64552: LD_INT 6
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: LD_INT 6
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: LD_INT 5
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64594: LD_ADDR_VAR 0 33
64598: PUSH
64599: LD_INT 2
64601: NEG
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 3
64612: NEG
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 3
64623: NEG
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 3
64635: NEG
64636: PUSH
64637: LD_INT 1
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 4
64646: NEG
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 4
64657: NEG
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 4
64669: NEG
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 5
64680: NEG
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 5
64691: NEG
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 5
64703: NEG
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 6
64714: NEG
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 6
64725: NEG
64726: PUSH
64727: LD_INT 1
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64749: LD_ADDR_VAR 0 34
64753: PUSH
64754: LD_INT 2
64756: NEG
64757: PUSH
64758: LD_INT 3
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 3
64768: NEG
64769: PUSH
64770: LD_INT 2
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 3
64780: NEG
64781: PUSH
64782: LD_INT 3
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 3
64792: NEG
64793: PUSH
64794: LD_INT 4
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 4
64804: NEG
64805: PUSH
64806: LD_INT 3
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 4
64816: NEG
64817: PUSH
64818: LD_INT 4
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 4
64828: NEG
64829: PUSH
64830: LD_INT 5
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 5
64840: NEG
64841: PUSH
64842: LD_INT 4
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 5
64852: NEG
64853: PUSH
64854: LD_INT 5
64856: NEG
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 5
64864: NEG
64865: PUSH
64866: LD_INT 6
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 6
64876: NEG
64877: PUSH
64878: LD_INT 5
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 6
64888: NEG
64889: PUSH
64890: LD_INT 6
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64912: LD_ADDR_VAR 0 41
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: LD_INT 2
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: LD_INT 3
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: LD_INT 2
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: LIST
64955: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64956: LD_ADDR_VAR 0 42
64960: PUSH
64961: LD_INT 2
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 2
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 3
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64997: LD_ADDR_VAR 0 43
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: LD_INT 2
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 3
65014: PUSH
65015: LD_INT 2
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 2
65024: PUSH
65025: LD_INT 3
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: LIST
65036: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65037: LD_ADDR_VAR 0 44
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: LD_INT 2
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: LD_INT 3
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 1
65064: NEG
65065: PUSH
65066: LD_INT 2
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65078: LD_ADDR_VAR 0 45
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 2
65096: NEG
65097: PUSH
65098: LD_INT 1
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 3
65107: NEG
65108: PUSH
65109: LD_INT 1
65111: NEG
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: LIST
65121: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65122: LD_ADDR_VAR 0 46
65126: PUSH
65127: LD_INT 2
65129: NEG
65130: PUSH
65131: LD_INT 2
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 2
65141: NEG
65142: PUSH
65143: LD_INT 3
65145: NEG
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 3
65153: NEG
65154: PUSH
65155: LD_INT 2
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: LIST
65167: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65168: LD_ADDR_VAR 0 47
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: LD_INT 3
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: LD_INT 3
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65201: LD_ADDR_VAR 0 48
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: LD_INT 2
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65232: LD_ADDR_VAR 0 49
65236: PUSH
65237: LD_INT 3
65239: PUSH
65240: LD_INT 1
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 3
65249: PUSH
65250: LD_INT 2
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65261: LD_ADDR_VAR 0 50
65265: PUSH
65266: LD_INT 2
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 1
65278: PUSH
65279: LD_INT 3
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65290: LD_ADDR_VAR 0 51
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: LD_INT 1
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65321: LD_ADDR_VAR 0 52
65325: PUSH
65326: LD_INT 3
65328: NEG
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 3
65340: NEG
65341: PUSH
65342: LD_INT 2
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65354: LD_ADDR_VAR 0 53
65358: PUSH
65359: LD_INT 1
65361: NEG
65362: PUSH
65363: LD_INT 3
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: LD_INT 3
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: LD_INT 2
65387: NEG
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: LIST
65397: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65398: LD_ADDR_VAR 0 54
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 3
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 3
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: LIST
65438: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65439: LD_ADDR_VAR 0 55
65443: PUSH
65444: LD_INT 3
65446: PUSH
65447: LD_INT 2
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 3
65456: PUSH
65457: LD_INT 3
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: LD_INT 3
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: LIST
65478: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65479: LD_ADDR_VAR 0 56
65483: PUSH
65484: LD_INT 1
65486: PUSH
65487: LD_INT 3
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: LD_INT 3
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: NEG
65507: PUSH
65508: LD_INT 2
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: LIST
65519: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65520: LD_ADDR_VAR 0 57
65524: PUSH
65525: LD_INT 2
65527: NEG
65528: PUSH
65529: LD_INT 1
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 3
65538: NEG
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 3
65549: NEG
65550: PUSH
65551: LD_INT 1
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: LIST
65563: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65564: LD_ADDR_VAR 0 58
65568: PUSH
65569: LD_INT 2
65571: NEG
65572: PUSH
65573: LD_INT 3
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 3
65583: NEG
65584: PUSH
65585: LD_INT 2
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 3
65595: NEG
65596: PUSH
65597: LD_INT 3
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: LIST
65609: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65610: LD_ADDR_VAR 0 59
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: LD_INT 2
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 0
65629: PUSH
65630: LD_INT 2
65632: NEG
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: LD_INT 1
65643: NEG
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: LIST
65653: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65654: LD_ADDR_VAR 0 60
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: LD_INT 1
65664: NEG
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 2
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 2
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: LIST
65694: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65695: LD_ADDR_VAR 0 61
65699: PUSH
65700: LD_INT 2
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 2
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: LD_INT 2
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: LIST
65734: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65735: LD_ADDR_VAR 0 62
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: LD_INT 2
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: LD_INT 2
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: LD_INT 1
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: LIST
65775: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65776: LD_ADDR_VAR 0 63
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 2
65794: NEG
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 2
65805: NEG
65806: PUSH
65807: LD_INT 1
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: LIST
65819: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65820: LD_ADDR_VAR 0 64
65824: PUSH
65825: LD_INT 1
65827: NEG
65828: PUSH
65829: LD_INT 2
65831: NEG
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 2
65839: NEG
65840: PUSH
65841: LD_INT 1
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 2
65851: NEG
65852: PUSH
65853: LD_INT 2
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: LIST
65865: ST_TO_ADDR
// end ; 2 :
65866: GO 69132
65868: LD_INT 2
65870: DOUBLE
65871: EQUAL
65872: IFTRUE 65876
65874: GO 69131
65876: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65877: LD_ADDR_VAR 0 29
65881: PUSH
65882: LD_INT 4
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 4
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 5
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 5
65915: PUSH
65916: LD_INT 1
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 4
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 3
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 3
65945: PUSH
65946: LD_INT 1
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 3
65956: PUSH
65957: LD_INT 2
65959: NEG
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 5
65967: PUSH
65968: LD_INT 2
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 3
65977: PUSH
65978: LD_INT 3
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 3
65987: PUSH
65988: LD_INT 2
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 4
65997: PUSH
65998: LD_INT 3
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 4
66007: PUSH
66008: LD_INT 4
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 3
66017: PUSH
66018: LD_INT 4
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 2
66027: PUSH
66028: LD_INT 3
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 2
66037: PUSH
66038: LD_INT 2
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 4
66047: PUSH
66048: LD_INT 2
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: LD_INT 4
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: LD_INT 4
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: LD_INT 3
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 1
66087: PUSH
66088: LD_INT 4
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 1
66097: PUSH
66098: LD_INT 5
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 0
66107: PUSH
66108: LD_INT 5
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 1
66117: NEG
66118: PUSH
66119: LD_INT 4
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: LD_INT 3
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 2
66139: PUSH
66140: LD_INT 5
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 2
66149: NEG
66150: PUSH
66151: LD_INT 3
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: NEG
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 3
66171: NEG
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 2
66183: NEG
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 2
66194: NEG
66195: PUSH
66196: LD_INT 1
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 3
66205: NEG
66206: PUSH
66207: LD_INT 1
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 4
66216: NEG
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 4
66227: NEG
66228: PUSH
66229: LD_INT 1
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 4
66239: NEG
66240: PUSH
66241: LD_INT 2
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 2
66251: NEG
66252: PUSH
66253: LD_INT 2
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 4
66262: NEG
66263: PUSH
66264: LD_INT 4
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 4
66274: NEG
66275: PUSH
66276: LD_INT 5
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 3
66286: NEG
66287: PUSH
66288: LD_INT 4
66290: NEG
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 3
66298: NEG
66299: PUSH
66300: LD_INT 3
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 4
66310: NEG
66311: PUSH
66312: LD_INT 3
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 5
66322: NEG
66323: PUSH
66324: LD_INT 4
66326: NEG
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 5
66334: NEG
66335: PUSH
66336: LD_INT 5
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 3
66346: NEG
66347: PUSH
66348: LD_INT 5
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 5
66358: NEG
66359: PUSH
66360: LD_INT 3
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66415: LD_ADDR_VAR 0 30
66419: PUSH
66420: LD_INT 4
66422: PUSH
66423: LD_INT 4
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 4
66432: PUSH
66433: LD_INT 3
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 5
66442: PUSH
66443: LD_INT 4
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 5
66452: PUSH
66453: LD_INT 5
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 4
66462: PUSH
66463: LD_INT 5
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 3
66472: PUSH
66473: LD_INT 4
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 3
66482: PUSH
66483: LD_INT 3
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 5
66492: PUSH
66493: LD_INT 3
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 3
66502: PUSH
66503: LD_INT 5
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 0
66512: PUSH
66513: LD_INT 3
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: PUSH
66533: LD_INT 3
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 1
66542: PUSH
66543: LD_INT 4
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: LD_INT 4
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 1
66562: NEG
66563: PUSH
66564: LD_INT 3
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 1
66573: NEG
66574: PUSH
66575: LD_INT 2
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 2
66584: PUSH
66585: LD_INT 4
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 2
66594: NEG
66595: PUSH
66596: LD_INT 2
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 4
66605: NEG
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 4
66616: NEG
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 3
66628: NEG
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 3
66639: NEG
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 4
66650: NEG
66651: PUSH
66652: LD_INT 1
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 5
66661: NEG
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 5
66672: NEG
66673: PUSH
66674: LD_INT 1
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 5
66684: NEG
66685: PUSH
66686: LD_INT 2
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 3
66696: NEG
66697: PUSH
66698: LD_INT 2
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 3
66707: NEG
66708: PUSH
66709: LD_INT 3
66711: NEG
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 3
66719: NEG
66720: PUSH
66721: LD_INT 4
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 2
66731: NEG
66732: PUSH
66733: LD_INT 3
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 2
66743: NEG
66744: PUSH
66745: LD_INT 2
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 3
66755: NEG
66756: PUSH
66757: LD_INT 2
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 4
66767: NEG
66768: PUSH
66769: LD_INT 3
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 4
66779: NEG
66780: PUSH
66781: LD_INT 4
66783: NEG
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 2
66791: NEG
66792: PUSH
66793: LD_INT 4
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 4
66803: NEG
66804: PUSH
66805: LD_INT 2
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: LD_INT 4
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 0
66826: PUSH
66827: LD_INT 5
66829: NEG
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 1
66837: PUSH
66838: LD_INT 4
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: LD_INT 3
66851: NEG
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 0
66859: PUSH
66860: LD_INT 3
66862: NEG
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 1
66870: NEG
66871: PUSH
66872: LD_INT 4
66874: NEG
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 1
66882: NEG
66883: PUSH
66884: LD_INT 5
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 2
66894: PUSH
66895: LD_INT 3
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 2
66905: NEG
66906: PUSH
66907: LD_INT 5
66909: NEG
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66962: LD_ADDR_VAR 0 31
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: LD_INT 4
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 0
66979: PUSH
66980: LD_INT 3
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: LD_INT 4
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 1
66999: PUSH
67000: LD_INT 5
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: LD_INT 5
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 1
67019: NEG
67020: PUSH
67021: LD_INT 4
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: NEG
67031: PUSH
67032: LD_INT 3
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 2
67041: PUSH
67042: LD_INT 5
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 2
67051: NEG
67052: PUSH
67053: LD_INT 3
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 3
67062: NEG
67063: PUSH
67064: LD_INT 0
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 3
67073: NEG
67074: PUSH
67075: LD_INT 1
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 2
67085: NEG
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 2
67096: NEG
67097: PUSH
67098: LD_INT 1
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 3
67107: NEG
67108: PUSH
67109: LD_INT 1
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 4
67118: NEG
67119: PUSH
67120: LD_INT 0
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 4
67129: NEG
67130: PUSH
67131: LD_INT 1
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 4
67141: NEG
67142: PUSH
67143: LD_INT 2
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 2
67153: NEG
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 4
67164: NEG
67165: PUSH
67166: LD_INT 4
67168: NEG
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 4
67176: NEG
67177: PUSH
67178: LD_INT 5
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 3
67188: NEG
67189: PUSH
67190: LD_INT 4
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 3
67200: NEG
67201: PUSH
67202: LD_INT 3
67204: NEG
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 4
67212: NEG
67213: PUSH
67214: LD_INT 3
67216: NEG
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 5
67224: NEG
67225: PUSH
67226: LD_INT 4
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 5
67236: NEG
67237: PUSH
67238: LD_INT 5
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 3
67248: NEG
67249: PUSH
67250: LD_INT 5
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 5
67260: NEG
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 0
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 0
67283: PUSH
67284: LD_INT 4
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 1
67294: PUSH
67295: LD_INT 3
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 1
67305: PUSH
67306: LD_INT 2
67308: NEG
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 0
67316: PUSH
67317: LD_INT 2
67319: NEG
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: LD_INT 3
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 1
67339: NEG
67340: PUSH
67341: LD_INT 4
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 2
67351: PUSH
67352: LD_INT 2
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 2
67362: NEG
67363: PUSH
67364: LD_INT 4
67366: NEG
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 4
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 4
67384: PUSH
67385: LD_INT 1
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 5
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 5
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 4
67415: PUSH
67416: LD_INT 1
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 3
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 3
67435: PUSH
67436: LD_INT 1
67438: NEG
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 3
67446: PUSH
67447: LD_INT 2
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 5
67457: PUSH
67458: LD_INT 2
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67512: LD_ADDR_VAR 0 32
67516: PUSH
67517: LD_INT 4
67519: NEG
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 4
67530: NEG
67531: PUSH
67532: LD_INT 1
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 3
67542: NEG
67543: PUSH
67544: LD_INT 0
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 3
67553: NEG
67554: PUSH
67555: LD_INT 1
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 4
67564: NEG
67565: PUSH
67566: LD_INT 1
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 5
67575: NEG
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 5
67586: NEG
67587: PUSH
67588: LD_INT 1
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 5
67598: NEG
67599: PUSH
67600: LD_INT 2
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 3
67610: NEG
67611: PUSH
67612: LD_INT 2
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 3
67621: NEG
67622: PUSH
67623: LD_INT 3
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 3
67633: NEG
67634: PUSH
67635: LD_INT 4
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 2
67645: NEG
67646: PUSH
67647: LD_INT 3
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 2
67657: NEG
67658: PUSH
67659: LD_INT 2
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 3
67669: NEG
67670: PUSH
67671: LD_INT 2
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 4
67681: NEG
67682: PUSH
67683: LD_INT 3
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 4
67693: NEG
67694: PUSH
67695: LD_INT 4
67697: NEG
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 2
67705: NEG
67706: PUSH
67707: LD_INT 4
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 4
67717: NEG
67718: PUSH
67719: LD_INT 2
67721: NEG
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: LD_INT 4
67732: NEG
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 0
67740: PUSH
67741: LD_INT 5
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 1
67751: PUSH
67752: LD_INT 4
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 1
67762: PUSH
67763: LD_INT 3
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 0
67773: PUSH
67774: LD_INT 3
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 1
67784: NEG
67785: PUSH
67786: LD_INT 4
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 1
67796: NEG
67797: PUSH
67798: LD_INT 5
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 2
67808: PUSH
67809: LD_INT 3
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 2
67819: NEG
67820: PUSH
67821: LD_INT 5
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 3
67831: PUSH
67832: LD_INT 0
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 3
67841: PUSH
67842: LD_INT 1
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 4
67852: PUSH
67853: LD_INT 0
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 4
67862: PUSH
67863: LD_INT 1
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 3
67872: PUSH
67873: LD_INT 1
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 2
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 2
67892: PUSH
67893: LD_INT 1
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 2
67903: PUSH
67904: LD_INT 2
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 4
67914: PUSH
67915: LD_INT 2
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 4
67924: PUSH
67925: LD_INT 4
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 4
67934: PUSH
67935: LD_INT 3
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 5
67944: PUSH
67945: LD_INT 4
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 5
67954: PUSH
67955: LD_INT 5
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 4
67964: PUSH
67965: LD_INT 5
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 3
67974: PUSH
67975: LD_INT 4
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 3
67984: PUSH
67985: LD_INT 3
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 5
67994: PUSH
67995: LD_INT 3
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 3
68004: PUSH
68005: LD_INT 5
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68059: LD_ADDR_VAR 0 33
68063: PUSH
68064: LD_INT 4
68066: NEG
68067: PUSH
68068: LD_INT 4
68070: NEG
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 4
68078: NEG
68079: PUSH
68080: LD_INT 5
68082: NEG
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 3
68090: NEG
68091: PUSH
68092: LD_INT 4
68094: NEG
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 3
68102: NEG
68103: PUSH
68104: LD_INT 3
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 4
68114: NEG
68115: PUSH
68116: LD_INT 3
68118: NEG
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 5
68126: NEG
68127: PUSH
68128: LD_INT 4
68130: NEG
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 5
68138: NEG
68139: PUSH
68140: LD_INT 5
68142: NEG
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 3
68150: NEG
68151: PUSH
68152: LD_INT 5
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 5
68162: NEG
68163: PUSH
68164: LD_INT 3
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 0
68174: PUSH
68175: LD_INT 3
68177: NEG
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: LD_INT 4
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 1
68196: PUSH
68197: LD_INT 3
68199: NEG
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 1
68207: PUSH
68208: LD_INT 2
68210: NEG
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 0
68218: PUSH
68219: LD_INT 2
68221: NEG
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 1
68229: NEG
68230: PUSH
68231: LD_INT 3
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 1
68241: NEG
68242: PUSH
68243: LD_INT 4
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 2
68253: PUSH
68254: LD_INT 2
68256: NEG
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 2
68264: NEG
68265: PUSH
68266: LD_INT 4
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 4
68276: PUSH
68277: LD_INT 0
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 4
68286: PUSH
68287: LD_INT 1
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 5
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 5
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 4
68317: PUSH
68318: LD_INT 1
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 3
68327: PUSH
68328: LD_INT 0
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 3
68337: PUSH
68338: LD_INT 1
68340: NEG
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 3
68348: PUSH
68349: LD_INT 2
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 5
68359: PUSH
68360: LD_INT 2
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 3
68369: PUSH
68370: LD_INT 3
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 3
68379: PUSH
68380: LD_INT 2
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 4
68389: PUSH
68390: LD_INT 3
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 4
68399: PUSH
68400: LD_INT 4
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 3
68409: PUSH
68410: LD_INT 4
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 2
68419: PUSH
68420: LD_INT 3
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 2
68429: PUSH
68430: LD_INT 2
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 4
68439: PUSH
68440: LD_INT 2
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 2
68449: PUSH
68450: LD_INT 4
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: LD_INT 4
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 0
68469: PUSH
68470: LD_INT 3
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 1
68479: PUSH
68480: LD_INT 4
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 1
68489: PUSH
68490: LD_INT 5
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 0
68499: PUSH
68500: LD_INT 5
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 1
68509: NEG
68510: PUSH
68511: LD_INT 4
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 1
68520: NEG
68521: PUSH
68522: LD_INT 3
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 2
68531: PUSH
68532: LD_INT 5
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 2
68541: NEG
68542: PUSH
68543: LD_INT 3
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68597: LD_ADDR_VAR 0 34
68601: PUSH
68602: LD_INT 0
68604: PUSH
68605: LD_INT 4
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 0
68615: PUSH
68616: LD_INT 5
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 1
68626: PUSH
68627: LD_INT 4
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 1
68637: PUSH
68638: LD_INT 3
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 0
68648: PUSH
68649: LD_INT 3
68651: NEG
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 1
68659: NEG
68660: PUSH
68661: LD_INT 4
68663: NEG
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 1
68671: NEG
68672: PUSH
68673: LD_INT 5
68675: NEG
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 2
68683: PUSH
68684: LD_INT 3
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 2
68694: NEG
68695: PUSH
68696: LD_INT 5
68698: NEG
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 3
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 3
68716: PUSH
68717: LD_INT 1
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 4
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 4
68737: PUSH
68738: LD_INT 1
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: LD_INT 1
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 2
68757: PUSH
68758: LD_INT 0
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 2
68767: PUSH
68768: LD_INT 1
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 2
68778: PUSH
68779: LD_INT 2
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 4
68789: PUSH
68790: LD_INT 2
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 4
68799: PUSH
68800: LD_INT 4
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 4
68809: PUSH
68810: LD_INT 3
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 5
68819: PUSH
68820: LD_INT 4
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 5
68829: PUSH
68830: LD_INT 5
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 4
68839: PUSH
68840: LD_INT 5
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 3
68849: PUSH
68850: LD_INT 4
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 3
68859: PUSH
68860: LD_INT 3
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 5
68869: PUSH
68870: LD_INT 3
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 3
68879: PUSH
68880: LD_INT 5
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 0
68889: PUSH
68890: LD_INT 3
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: LD_INT 2
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 1
68909: PUSH
68910: LD_INT 3
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 1
68919: PUSH
68920: LD_INT 4
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 0
68929: PUSH
68930: LD_INT 4
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 1
68939: NEG
68940: PUSH
68941: LD_INT 3
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 1
68950: NEG
68951: PUSH
68952: LD_INT 2
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 2
68961: PUSH
68962: LD_INT 4
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 2
68971: NEG
68972: PUSH
68973: LD_INT 2
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 4
68982: NEG
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 4
68993: NEG
68994: PUSH
68995: LD_INT 1
68997: NEG
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 3
69005: NEG
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 3
69016: NEG
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 4
69027: NEG
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 5
69038: NEG
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 5
69049: NEG
69050: PUSH
69051: LD_INT 1
69053: NEG
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 5
69061: NEG
69062: PUSH
69063: LD_INT 2
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 3
69073: NEG
69074: PUSH
69075: LD_INT 2
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: ST_TO_ADDR
// end ; end ;
69129: GO 69132
69131: POP
// case btype of b_depot , b_warehouse :
69132: LD_VAR 0 1
69136: PUSH
69137: LD_INT 0
69139: DOUBLE
69140: EQUAL
69141: IFTRUE 69151
69143: LD_INT 1
69145: DOUBLE
69146: EQUAL
69147: IFTRUE 69151
69149: GO 69352
69151: POP
// case nation of nation_american :
69152: LD_VAR 0 5
69156: PUSH
69157: LD_INT 1
69159: DOUBLE
69160: EQUAL
69161: IFTRUE 69165
69163: GO 69221
69165: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69166: LD_ADDR_VAR 0 9
69170: PUSH
69171: LD_VAR 0 11
69175: PUSH
69176: LD_VAR 0 12
69180: PUSH
69181: LD_VAR 0 13
69185: PUSH
69186: LD_VAR 0 14
69190: PUSH
69191: LD_VAR 0 15
69195: PUSH
69196: LD_VAR 0 16
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: PUSH
69209: LD_VAR 0 4
69213: PUSH
69214: LD_INT 1
69216: PLUS
69217: ARRAY
69218: ST_TO_ADDR
69219: GO 69350
69221: LD_INT 2
69223: DOUBLE
69224: EQUAL
69225: IFTRUE 69229
69227: GO 69285
69229: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69230: LD_ADDR_VAR 0 9
69234: PUSH
69235: LD_VAR 0 17
69239: PUSH
69240: LD_VAR 0 18
69244: PUSH
69245: LD_VAR 0 19
69249: PUSH
69250: LD_VAR 0 20
69254: PUSH
69255: LD_VAR 0 21
69259: PUSH
69260: LD_VAR 0 22
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: PUSH
69273: LD_VAR 0 4
69277: PUSH
69278: LD_INT 1
69280: PLUS
69281: ARRAY
69282: ST_TO_ADDR
69283: GO 69350
69285: LD_INT 3
69287: DOUBLE
69288: EQUAL
69289: IFTRUE 69293
69291: GO 69349
69293: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69294: LD_ADDR_VAR 0 9
69298: PUSH
69299: LD_VAR 0 23
69303: PUSH
69304: LD_VAR 0 24
69308: PUSH
69309: LD_VAR 0 25
69313: PUSH
69314: LD_VAR 0 26
69318: PUSH
69319: LD_VAR 0 27
69323: PUSH
69324: LD_VAR 0 28
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: PUSH
69337: LD_VAR 0 4
69341: PUSH
69342: LD_INT 1
69344: PLUS
69345: ARRAY
69346: ST_TO_ADDR
69347: GO 69350
69349: POP
69350: GO 69905
69352: LD_INT 2
69354: DOUBLE
69355: EQUAL
69356: IFTRUE 69366
69358: LD_INT 3
69360: DOUBLE
69361: EQUAL
69362: IFTRUE 69366
69364: GO 69422
69366: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69367: LD_ADDR_VAR 0 9
69371: PUSH
69372: LD_VAR 0 29
69376: PUSH
69377: LD_VAR 0 30
69381: PUSH
69382: LD_VAR 0 31
69386: PUSH
69387: LD_VAR 0 32
69391: PUSH
69392: LD_VAR 0 33
69396: PUSH
69397: LD_VAR 0 34
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: PUSH
69410: LD_VAR 0 4
69414: PUSH
69415: LD_INT 1
69417: PLUS
69418: ARRAY
69419: ST_TO_ADDR
69420: GO 69905
69422: LD_INT 16
69424: DOUBLE
69425: EQUAL
69426: IFTRUE 69484
69428: LD_INT 17
69430: DOUBLE
69431: EQUAL
69432: IFTRUE 69484
69434: LD_INT 18
69436: DOUBLE
69437: EQUAL
69438: IFTRUE 69484
69440: LD_INT 19
69442: DOUBLE
69443: EQUAL
69444: IFTRUE 69484
69446: LD_INT 22
69448: DOUBLE
69449: EQUAL
69450: IFTRUE 69484
69452: LD_INT 20
69454: DOUBLE
69455: EQUAL
69456: IFTRUE 69484
69458: LD_INT 21
69460: DOUBLE
69461: EQUAL
69462: IFTRUE 69484
69464: LD_INT 23
69466: DOUBLE
69467: EQUAL
69468: IFTRUE 69484
69470: LD_INT 24
69472: DOUBLE
69473: EQUAL
69474: IFTRUE 69484
69476: LD_INT 25
69478: DOUBLE
69479: EQUAL
69480: IFTRUE 69484
69482: GO 69540
69484: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69485: LD_ADDR_VAR 0 9
69489: PUSH
69490: LD_VAR 0 35
69494: PUSH
69495: LD_VAR 0 36
69499: PUSH
69500: LD_VAR 0 37
69504: PUSH
69505: LD_VAR 0 38
69509: PUSH
69510: LD_VAR 0 39
69514: PUSH
69515: LD_VAR 0 40
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: PUSH
69528: LD_VAR 0 4
69532: PUSH
69533: LD_INT 1
69535: PLUS
69536: ARRAY
69537: ST_TO_ADDR
69538: GO 69905
69540: LD_INT 6
69542: DOUBLE
69543: EQUAL
69544: IFTRUE 69596
69546: LD_INT 7
69548: DOUBLE
69549: EQUAL
69550: IFTRUE 69596
69552: LD_INT 8
69554: DOUBLE
69555: EQUAL
69556: IFTRUE 69596
69558: LD_INT 13
69560: DOUBLE
69561: EQUAL
69562: IFTRUE 69596
69564: LD_INT 12
69566: DOUBLE
69567: EQUAL
69568: IFTRUE 69596
69570: LD_INT 15
69572: DOUBLE
69573: EQUAL
69574: IFTRUE 69596
69576: LD_INT 11
69578: DOUBLE
69579: EQUAL
69580: IFTRUE 69596
69582: LD_INT 14
69584: DOUBLE
69585: EQUAL
69586: IFTRUE 69596
69588: LD_INT 10
69590: DOUBLE
69591: EQUAL
69592: IFTRUE 69596
69594: GO 69652
69596: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69597: LD_ADDR_VAR 0 9
69601: PUSH
69602: LD_VAR 0 41
69606: PUSH
69607: LD_VAR 0 42
69611: PUSH
69612: LD_VAR 0 43
69616: PUSH
69617: LD_VAR 0 44
69621: PUSH
69622: LD_VAR 0 45
69626: PUSH
69627: LD_VAR 0 46
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: PUSH
69640: LD_VAR 0 4
69644: PUSH
69645: LD_INT 1
69647: PLUS
69648: ARRAY
69649: ST_TO_ADDR
69650: GO 69905
69652: LD_INT 36
69654: DOUBLE
69655: EQUAL
69656: IFTRUE 69660
69658: GO 69716
69660: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69661: LD_ADDR_VAR 0 9
69665: PUSH
69666: LD_VAR 0 47
69670: PUSH
69671: LD_VAR 0 48
69675: PUSH
69676: LD_VAR 0 49
69680: PUSH
69681: LD_VAR 0 50
69685: PUSH
69686: LD_VAR 0 51
69690: PUSH
69691: LD_VAR 0 52
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: PUSH
69704: LD_VAR 0 4
69708: PUSH
69709: LD_INT 1
69711: PLUS
69712: ARRAY
69713: ST_TO_ADDR
69714: GO 69905
69716: LD_INT 4
69718: DOUBLE
69719: EQUAL
69720: IFTRUE 69742
69722: LD_INT 5
69724: DOUBLE
69725: EQUAL
69726: IFTRUE 69742
69728: LD_INT 34
69730: DOUBLE
69731: EQUAL
69732: IFTRUE 69742
69734: LD_INT 37
69736: DOUBLE
69737: EQUAL
69738: IFTRUE 69742
69740: GO 69798
69742: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69743: LD_ADDR_VAR 0 9
69747: PUSH
69748: LD_VAR 0 53
69752: PUSH
69753: LD_VAR 0 54
69757: PUSH
69758: LD_VAR 0 55
69762: PUSH
69763: LD_VAR 0 56
69767: PUSH
69768: LD_VAR 0 57
69772: PUSH
69773: LD_VAR 0 58
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: PUSH
69786: LD_VAR 0 4
69790: PUSH
69791: LD_INT 1
69793: PLUS
69794: ARRAY
69795: ST_TO_ADDR
69796: GO 69905
69798: LD_INT 31
69800: DOUBLE
69801: EQUAL
69802: IFTRUE 69848
69804: LD_INT 32
69806: DOUBLE
69807: EQUAL
69808: IFTRUE 69848
69810: LD_INT 33
69812: DOUBLE
69813: EQUAL
69814: IFTRUE 69848
69816: LD_INT 27
69818: DOUBLE
69819: EQUAL
69820: IFTRUE 69848
69822: LD_INT 26
69824: DOUBLE
69825: EQUAL
69826: IFTRUE 69848
69828: LD_INT 28
69830: DOUBLE
69831: EQUAL
69832: IFTRUE 69848
69834: LD_INT 29
69836: DOUBLE
69837: EQUAL
69838: IFTRUE 69848
69840: LD_INT 30
69842: DOUBLE
69843: EQUAL
69844: IFTRUE 69848
69846: GO 69904
69848: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69849: LD_ADDR_VAR 0 9
69853: PUSH
69854: LD_VAR 0 59
69858: PUSH
69859: LD_VAR 0 60
69863: PUSH
69864: LD_VAR 0 61
69868: PUSH
69869: LD_VAR 0 62
69873: PUSH
69874: LD_VAR 0 63
69878: PUSH
69879: LD_VAR 0 64
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: PUSH
69892: LD_VAR 0 4
69896: PUSH
69897: LD_INT 1
69899: PLUS
69900: ARRAY
69901: ST_TO_ADDR
69902: GO 69905
69904: POP
// temp_list2 = [ ] ;
69905: LD_ADDR_VAR 0 10
69909: PUSH
69910: EMPTY
69911: ST_TO_ADDR
// for i in temp_list do
69912: LD_ADDR_VAR 0 8
69916: PUSH
69917: LD_VAR 0 9
69921: PUSH
69922: FOR_IN
69923: IFFALSE 69975
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69925: LD_ADDR_VAR 0 10
69929: PUSH
69930: LD_VAR 0 10
69934: PUSH
69935: LD_VAR 0 8
69939: PUSH
69940: LD_INT 1
69942: ARRAY
69943: PUSH
69944: LD_VAR 0 2
69948: PLUS
69949: PUSH
69950: LD_VAR 0 8
69954: PUSH
69955: LD_INT 2
69957: ARRAY
69958: PUSH
69959: LD_VAR 0 3
69963: PLUS
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: EMPTY
69970: LIST
69971: ADD
69972: ST_TO_ADDR
69973: GO 69922
69975: POP
69976: POP
// result = temp_list2 ;
69977: LD_ADDR_VAR 0 7
69981: PUSH
69982: LD_VAR 0 10
69986: ST_TO_ADDR
// end ;
69987: LD_VAR 0 7
69991: RET
// export function EnemyInRange ( unit , dist ) ; begin
69992: LD_INT 0
69994: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69995: LD_ADDR_VAR 0 3
69999: PUSH
70000: LD_VAR 0 1
70004: PPUSH
70005: CALL_OW 255
70009: PPUSH
70010: LD_VAR 0 1
70014: PPUSH
70015: CALL_OW 250
70019: PPUSH
70020: LD_VAR 0 1
70024: PPUSH
70025: CALL_OW 251
70029: PPUSH
70030: LD_VAR 0 2
70034: PPUSH
70035: CALL 43388 0 4
70039: PUSH
70040: LD_INT 4
70042: ARRAY
70043: ST_TO_ADDR
// end ;
70044: LD_VAR 0 3
70048: RET
// export function PlayerSeeMe ( unit ) ; begin
70049: LD_INT 0
70051: PPUSH
// result := See ( your_side , unit ) ;
70052: LD_ADDR_VAR 0 2
70056: PUSH
70057: LD_OWVAR 2
70061: PPUSH
70062: LD_VAR 0 1
70066: PPUSH
70067: CALL_OW 292
70071: ST_TO_ADDR
// end ;
70072: LD_VAR 0 2
70076: RET
// export function ReverseDir ( unit ) ; begin
70077: LD_INT 0
70079: PPUSH
// if not unit then
70080: LD_VAR 0 1
70084: NOT
70085: IFFALSE 70089
// exit ;
70087: GO 70112
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70089: LD_ADDR_VAR 0 2
70093: PUSH
70094: LD_VAR 0 1
70098: PPUSH
70099: CALL_OW 254
70103: PUSH
70104: LD_INT 3
70106: PLUS
70107: PUSH
70108: LD_INT 6
70110: MOD
70111: ST_TO_ADDR
// end ;
70112: LD_VAR 0 2
70116: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70117: LD_INT 0
70119: PPUSH
70120: PPUSH
70121: PPUSH
70122: PPUSH
70123: PPUSH
// if not hexes then
70124: LD_VAR 0 2
70128: NOT
70129: IFFALSE 70133
// exit ;
70131: GO 70281
// dist := 9999 ;
70133: LD_ADDR_VAR 0 5
70137: PUSH
70138: LD_INT 9999
70140: ST_TO_ADDR
// for i = 1 to hexes do
70141: LD_ADDR_VAR 0 4
70145: PUSH
70146: DOUBLE
70147: LD_INT 1
70149: DEC
70150: ST_TO_ADDR
70151: LD_VAR 0 2
70155: PUSH
70156: FOR_TO
70157: IFFALSE 70269
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70159: LD_VAR 0 1
70163: PPUSH
70164: LD_VAR 0 2
70168: PUSH
70169: LD_VAR 0 4
70173: ARRAY
70174: PUSH
70175: LD_INT 1
70177: ARRAY
70178: PPUSH
70179: LD_VAR 0 2
70183: PUSH
70184: LD_VAR 0 4
70188: ARRAY
70189: PUSH
70190: LD_INT 2
70192: ARRAY
70193: PPUSH
70194: CALL_OW 297
70198: PUSH
70199: LD_VAR 0 5
70203: LESS
70204: IFFALSE 70267
// begin hex := hexes [ i ] ;
70206: LD_ADDR_VAR 0 7
70210: PUSH
70211: LD_VAR 0 2
70215: PUSH
70216: LD_VAR 0 4
70220: ARRAY
70221: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70222: LD_ADDR_VAR 0 5
70226: PUSH
70227: LD_VAR 0 1
70231: PPUSH
70232: LD_VAR 0 2
70236: PUSH
70237: LD_VAR 0 4
70241: ARRAY
70242: PUSH
70243: LD_INT 1
70245: ARRAY
70246: PPUSH
70247: LD_VAR 0 2
70251: PUSH
70252: LD_VAR 0 4
70256: ARRAY
70257: PUSH
70258: LD_INT 2
70260: ARRAY
70261: PPUSH
70262: CALL_OW 297
70266: ST_TO_ADDR
// end ; end ;
70267: GO 70156
70269: POP
70270: POP
// result := hex ;
70271: LD_ADDR_VAR 0 3
70275: PUSH
70276: LD_VAR 0 7
70280: ST_TO_ADDR
// end ;
70281: LD_VAR 0 3
70285: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70286: LD_INT 0
70288: PPUSH
70289: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70290: LD_VAR 0 1
70294: NOT
70295: PUSH
70296: LD_VAR 0 1
70300: PUSH
70301: LD_INT 21
70303: PUSH
70304: LD_INT 2
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 23
70313: PUSH
70314: LD_INT 2
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PPUSH
70325: CALL_OW 69
70329: IN
70330: NOT
70331: OR
70332: IFFALSE 70336
// exit ;
70334: GO 70383
// for i = 1 to 3 do
70336: LD_ADDR_VAR 0 3
70340: PUSH
70341: DOUBLE
70342: LD_INT 1
70344: DEC
70345: ST_TO_ADDR
70346: LD_INT 3
70348: PUSH
70349: FOR_TO
70350: IFFALSE 70381
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70352: LD_VAR 0 1
70356: PPUSH
70357: CALL_OW 250
70361: PPUSH
70362: LD_VAR 0 1
70366: PPUSH
70367: CALL_OW 251
70371: PPUSH
70372: LD_INT 1
70374: PPUSH
70375: CALL_OW 453
70379: GO 70349
70381: POP
70382: POP
// end ;
70383: LD_VAR 0 2
70387: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70388: LD_INT 0
70390: PPUSH
70391: PPUSH
70392: PPUSH
70393: PPUSH
70394: PPUSH
70395: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70396: LD_VAR 0 1
70400: NOT
70401: PUSH
70402: LD_VAR 0 2
70406: NOT
70407: OR
70408: PUSH
70409: LD_VAR 0 1
70413: PPUSH
70414: CALL_OW 314
70418: OR
70419: IFFALSE 70423
// exit ;
70421: GO 70864
// x := GetX ( enemy_unit ) ;
70423: LD_ADDR_VAR 0 7
70427: PUSH
70428: LD_VAR 0 2
70432: PPUSH
70433: CALL_OW 250
70437: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70438: LD_ADDR_VAR 0 8
70442: PUSH
70443: LD_VAR 0 2
70447: PPUSH
70448: CALL_OW 251
70452: ST_TO_ADDR
// if not x or not y then
70453: LD_VAR 0 7
70457: NOT
70458: PUSH
70459: LD_VAR 0 8
70463: NOT
70464: OR
70465: IFFALSE 70469
// exit ;
70467: GO 70864
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70469: LD_ADDR_VAR 0 6
70473: PUSH
70474: LD_VAR 0 7
70478: PPUSH
70479: LD_INT 0
70481: PPUSH
70482: LD_INT 4
70484: PPUSH
70485: CALL_OW 272
70489: PUSH
70490: LD_VAR 0 8
70494: PPUSH
70495: LD_INT 0
70497: PPUSH
70498: LD_INT 4
70500: PPUSH
70501: CALL_OW 273
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_VAR 0 7
70514: PPUSH
70515: LD_INT 1
70517: PPUSH
70518: LD_INT 4
70520: PPUSH
70521: CALL_OW 272
70525: PUSH
70526: LD_VAR 0 8
70530: PPUSH
70531: LD_INT 1
70533: PPUSH
70534: LD_INT 4
70536: PPUSH
70537: CALL_OW 273
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_VAR 0 7
70550: PPUSH
70551: LD_INT 2
70553: PPUSH
70554: LD_INT 4
70556: PPUSH
70557: CALL_OW 272
70561: PUSH
70562: LD_VAR 0 8
70566: PPUSH
70567: LD_INT 2
70569: PPUSH
70570: LD_INT 4
70572: PPUSH
70573: CALL_OW 273
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_VAR 0 7
70586: PPUSH
70587: LD_INT 3
70589: PPUSH
70590: LD_INT 4
70592: PPUSH
70593: CALL_OW 272
70597: PUSH
70598: LD_VAR 0 8
70602: PPUSH
70603: LD_INT 3
70605: PPUSH
70606: LD_INT 4
70608: PPUSH
70609: CALL_OW 273
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_VAR 0 7
70622: PPUSH
70623: LD_INT 4
70625: PPUSH
70626: LD_INT 4
70628: PPUSH
70629: CALL_OW 272
70633: PUSH
70634: LD_VAR 0 8
70638: PPUSH
70639: LD_INT 4
70641: PPUSH
70642: LD_INT 4
70644: PPUSH
70645: CALL_OW 273
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_VAR 0 7
70658: PPUSH
70659: LD_INT 5
70661: PPUSH
70662: LD_INT 4
70664: PPUSH
70665: CALL_OW 272
70669: PUSH
70670: LD_VAR 0 8
70674: PPUSH
70675: LD_INT 5
70677: PPUSH
70678: LD_INT 4
70680: PPUSH
70681: CALL_OW 273
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: ST_TO_ADDR
// for i = tmp downto 1 do
70698: LD_ADDR_VAR 0 4
70702: PUSH
70703: DOUBLE
70704: LD_VAR 0 6
70708: INC
70709: ST_TO_ADDR
70710: LD_INT 1
70712: PUSH
70713: FOR_DOWNTO
70714: IFFALSE 70815
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70716: LD_VAR 0 6
70720: PUSH
70721: LD_VAR 0 4
70725: ARRAY
70726: PUSH
70727: LD_INT 1
70729: ARRAY
70730: PPUSH
70731: LD_VAR 0 6
70735: PUSH
70736: LD_VAR 0 4
70740: ARRAY
70741: PUSH
70742: LD_INT 2
70744: ARRAY
70745: PPUSH
70746: CALL_OW 488
70750: NOT
70751: PUSH
70752: LD_VAR 0 6
70756: PUSH
70757: LD_VAR 0 4
70761: ARRAY
70762: PUSH
70763: LD_INT 1
70765: ARRAY
70766: PPUSH
70767: LD_VAR 0 6
70771: PUSH
70772: LD_VAR 0 4
70776: ARRAY
70777: PUSH
70778: LD_INT 2
70780: ARRAY
70781: PPUSH
70782: CALL_OW 428
70786: PUSH
70787: LD_INT 0
70789: NONEQUAL
70790: OR
70791: IFFALSE 70813
// tmp := Delete ( tmp , i ) ;
70793: LD_ADDR_VAR 0 6
70797: PUSH
70798: LD_VAR 0 6
70802: PPUSH
70803: LD_VAR 0 4
70807: PPUSH
70808: CALL_OW 3
70812: ST_TO_ADDR
70813: GO 70713
70815: POP
70816: POP
// j := GetClosestHex ( unit , tmp ) ;
70817: LD_ADDR_VAR 0 5
70821: PUSH
70822: LD_VAR 0 1
70826: PPUSH
70827: LD_VAR 0 6
70831: PPUSH
70832: CALL 70117 0 2
70836: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70837: LD_VAR 0 1
70841: PPUSH
70842: LD_VAR 0 5
70846: PUSH
70847: LD_INT 1
70849: ARRAY
70850: PPUSH
70851: LD_VAR 0 5
70855: PUSH
70856: LD_INT 2
70858: ARRAY
70859: PPUSH
70860: CALL_OW 111
// end ;
70864: LD_VAR 0 3
70868: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70869: LD_INT 0
70871: PPUSH
70872: PPUSH
70873: PPUSH
// uc_side = 0 ;
70874: LD_ADDR_OWVAR 20
70878: PUSH
70879: LD_INT 0
70881: ST_TO_ADDR
// uc_nation = 0 ;
70882: LD_ADDR_OWVAR 21
70886: PUSH
70887: LD_INT 0
70889: ST_TO_ADDR
// InitHc_All ( ) ;
70890: CALL_OW 584
// InitVc ;
70894: CALL_OW 20
// if mastodonts then
70898: LD_VAR 0 6
70902: IFFALSE 70969
// for i = 1 to mastodonts do
70904: LD_ADDR_VAR 0 11
70908: PUSH
70909: DOUBLE
70910: LD_INT 1
70912: DEC
70913: ST_TO_ADDR
70914: LD_VAR 0 6
70918: PUSH
70919: FOR_TO
70920: IFFALSE 70967
// begin vc_chassis := 31 ;
70922: LD_ADDR_OWVAR 37
70926: PUSH
70927: LD_INT 31
70929: ST_TO_ADDR
// vc_control := control_rider ;
70930: LD_ADDR_OWVAR 38
70934: PUSH
70935: LD_INT 4
70937: ST_TO_ADDR
// animal := CreateVehicle ;
70938: LD_ADDR_VAR 0 12
70942: PUSH
70943: CALL_OW 45
70947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70948: LD_VAR 0 12
70952: PPUSH
70953: LD_VAR 0 8
70957: PPUSH
70958: LD_INT 0
70960: PPUSH
70961: CALL 73104 0 3
// end ;
70965: GO 70919
70967: POP
70968: POP
// if horses then
70969: LD_VAR 0 5
70973: IFFALSE 71040
// for i = 1 to horses do
70975: LD_ADDR_VAR 0 11
70979: PUSH
70980: DOUBLE
70981: LD_INT 1
70983: DEC
70984: ST_TO_ADDR
70985: LD_VAR 0 5
70989: PUSH
70990: FOR_TO
70991: IFFALSE 71038
// begin hc_class := 21 ;
70993: LD_ADDR_OWVAR 28
70997: PUSH
70998: LD_INT 21
71000: ST_TO_ADDR
// hc_gallery :=  ;
71001: LD_ADDR_OWVAR 33
71005: PUSH
71006: LD_STRING 
71008: ST_TO_ADDR
// animal := CreateHuman ;
71009: LD_ADDR_VAR 0 12
71013: PUSH
71014: CALL_OW 44
71018: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71019: LD_VAR 0 12
71023: PPUSH
71024: LD_VAR 0 8
71028: PPUSH
71029: LD_INT 0
71031: PPUSH
71032: CALL 73104 0 3
// end ;
71036: GO 70990
71038: POP
71039: POP
// if birds then
71040: LD_VAR 0 1
71044: IFFALSE 71111
// for i = 1 to birds do
71046: LD_ADDR_VAR 0 11
71050: PUSH
71051: DOUBLE
71052: LD_INT 1
71054: DEC
71055: ST_TO_ADDR
71056: LD_VAR 0 1
71060: PUSH
71061: FOR_TO
71062: IFFALSE 71109
// begin hc_class = 18 ;
71064: LD_ADDR_OWVAR 28
71068: PUSH
71069: LD_INT 18
71071: ST_TO_ADDR
// hc_gallery =  ;
71072: LD_ADDR_OWVAR 33
71076: PUSH
71077: LD_STRING 
71079: ST_TO_ADDR
// animal := CreateHuman ;
71080: LD_ADDR_VAR 0 12
71084: PUSH
71085: CALL_OW 44
71089: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71090: LD_VAR 0 12
71094: PPUSH
71095: LD_VAR 0 8
71099: PPUSH
71100: LD_INT 0
71102: PPUSH
71103: CALL 73104 0 3
// end ;
71107: GO 71061
71109: POP
71110: POP
// if tigers then
71111: LD_VAR 0 2
71115: IFFALSE 71199
// for i = 1 to tigers do
71117: LD_ADDR_VAR 0 11
71121: PUSH
71122: DOUBLE
71123: LD_INT 1
71125: DEC
71126: ST_TO_ADDR
71127: LD_VAR 0 2
71131: PUSH
71132: FOR_TO
71133: IFFALSE 71197
// begin hc_class = class_tiger ;
71135: LD_ADDR_OWVAR 28
71139: PUSH
71140: LD_INT 14
71142: ST_TO_ADDR
// hc_gallery =  ;
71143: LD_ADDR_OWVAR 33
71147: PUSH
71148: LD_STRING 
71150: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71151: LD_ADDR_OWVAR 35
71155: PUSH
71156: LD_INT 7
71158: NEG
71159: PPUSH
71160: LD_INT 7
71162: PPUSH
71163: CALL_OW 12
71167: ST_TO_ADDR
// animal := CreateHuman ;
71168: LD_ADDR_VAR 0 12
71172: PUSH
71173: CALL_OW 44
71177: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71178: LD_VAR 0 12
71182: PPUSH
71183: LD_VAR 0 8
71187: PPUSH
71188: LD_INT 0
71190: PPUSH
71191: CALL 73104 0 3
// end ;
71195: GO 71132
71197: POP
71198: POP
// if apemans then
71199: LD_VAR 0 3
71203: IFFALSE 71326
// for i = 1 to apemans do
71205: LD_ADDR_VAR 0 11
71209: PUSH
71210: DOUBLE
71211: LD_INT 1
71213: DEC
71214: ST_TO_ADDR
71215: LD_VAR 0 3
71219: PUSH
71220: FOR_TO
71221: IFFALSE 71324
// begin hc_class = class_apeman ;
71223: LD_ADDR_OWVAR 28
71227: PUSH
71228: LD_INT 12
71230: ST_TO_ADDR
// hc_gallery =  ;
71231: LD_ADDR_OWVAR 33
71235: PUSH
71236: LD_STRING 
71238: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71239: LD_ADDR_OWVAR 35
71243: PUSH
71244: LD_INT 2
71246: NEG
71247: PPUSH
71248: LD_INT 2
71250: PPUSH
71251: CALL_OW 12
71255: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71256: LD_ADDR_OWVAR 31
71260: PUSH
71261: LD_INT 1
71263: PPUSH
71264: LD_INT 3
71266: PPUSH
71267: CALL_OW 12
71271: PUSH
71272: LD_INT 1
71274: PPUSH
71275: LD_INT 3
71277: PPUSH
71278: CALL_OW 12
71282: PUSH
71283: LD_INT 0
71285: PUSH
71286: LD_INT 0
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: ST_TO_ADDR
// animal := CreateHuman ;
71295: LD_ADDR_VAR 0 12
71299: PUSH
71300: CALL_OW 44
71304: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71305: LD_VAR 0 12
71309: PPUSH
71310: LD_VAR 0 8
71314: PPUSH
71315: LD_INT 0
71317: PPUSH
71318: CALL 73104 0 3
// end ;
71322: GO 71220
71324: POP
71325: POP
// if enchidnas then
71326: LD_VAR 0 4
71330: IFFALSE 71397
// for i = 1 to enchidnas do
71332: LD_ADDR_VAR 0 11
71336: PUSH
71337: DOUBLE
71338: LD_INT 1
71340: DEC
71341: ST_TO_ADDR
71342: LD_VAR 0 4
71346: PUSH
71347: FOR_TO
71348: IFFALSE 71395
// begin hc_class = 13 ;
71350: LD_ADDR_OWVAR 28
71354: PUSH
71355: LD_INT 13
71357: ST_TO_ADDR
// hc_gallery =  ;
71358: LD_ADDR_OWVAR 33
71362: PUSH
71363: LD_STRING 
71365: ST_TO_ADDR
// animal := CreateHuman ;
71366: LD_ADDR_VAR 0 12
71370: PUSH
71371: CALL_OW 44
71375: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71376: LD_VAR 0 12
71380: PPUSH
71381: LD_VAR 0 8
71385: PPUSH
71386: LD_INT 0
71388: PPUSH
71389: CALL 73104 0 3
// end ;
71393: GO 71347
71395: POP
71396: POP
// if fishes then
71397: LD_VAR 0 7
71401: IFFALSE 71468
// for i = 1 to fishes do
71403: LD_ADDR_VAR 0 11
71407: PUSH
71408: DOUBLE
71409: LD_INT 1
71411: DEC
71412: ST_TO_ADDR
71413: LD_VAR 0 7
71417: PUSH
71418: FOR_TO
71419: IFFALSE 71466
// begin hc_class = 20 ;
71421: LD_ADDR_OWVAR 28
71425: PUSH
71426: LD_INT 20
71428: ST_TO_ADDR
// hc_gallery =  ;
71429: LD_ADDR_OWVAR 33
71433: PUSH
71434: LD_STRING 
71436: ST_TO_ADDR
// animal := CreateHuman ;
71437: LD_ADDR_VAR 0 12
71441: PUSH
71442: CALL_OW 44
71446: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71447: LD_VAR 0 12
71451: PPUSH
71452: LD_VAR 0 9
71456: PPUSH
71457: LD_INT 0
71459: PPUSH
71460: CALL 73104 0 3
// end ;
71464: GO 71418
71466: POP
71467: POP
// end ;
71468: LD_VAR 0 10
71472: RET
// export function WantHeal ( sci , unit ) ; begin
71473: LD_INT 0
71475: PPUSH
// if GetTaskList ( sci ) > 0 then
71476: LD_VAR 0 1
71480: PPUSH
71481: CALL_OW 437
71485: PUSH
71486: LD_INT 0
71488: GREATER
71489: IFFALSE 71559
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71491: LD_VAR 0 1
71495: PPUSH
71496: CALL_OW 437
71500: PUSH
71501: LD_INT 1
71503: ARRAY
71504: PUSH
71505: LD_INT 1
71507: ARRAY
71508: PUSH
71509: LD_STRING l
71511: EQUAL
71512: PUSH
71513: LD_VAR 0 1
71517: PPUSH
71518: CALL_OW 437
71522: PUSH
71523: LD_INT 1
71525: ARRAY
71526: PUSH
71527: LD_INT 4
71529: ARRAY
71530: PUSH
71531: LD_VAR 0 2
71535: EQUAL
71536: AND
71537: IFFALSE 71549
// result := true else
71539: LD_ADDR_VAR 0 3
71543: PUSH
71544: LD_INT 1
71546: ST_TO_ADDR
71547: GO 71557
// result := false ;
71549: LD_ADDR_VAR 0 3
71553: PUSH
71554: LD_INT 0
71556: ST_TO_ADDR
// end else
71557: GO 71567
// result := false ;
71559: LD_ADDR_VAR 0 3
71563: PUSH
71564: LD_INT 0
71566: ST_TO_ADDR
// end ;
71567: LD_VAR 0 3
71571: RET
// export function HealTarget ( sci ) ; begin
71572: LD_INT 0
71574: PPUSH
// if not sci then
71575: LD_VAR 0 1
71579: NOT
71580: IFFALSE 71584
// exit ;
71582: GO 71649
// result := 0 ;
71584: LD_ADDR_VAR 0 2
71588: PUSH
71589: LD_INT 0
71591: ST_TO_ADDR
// if GetTaskList ( sci ) then
71592: LD_VAR 0 1
71596: PPUSH
71597: CALL_OW 437
71601: IFFALSE 71649
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71603: LD_VAR 0 1
71607: PPUSH
71608: CALL_OW 437
71612: PUSH
71613: LD_INT 1
71615: ARRAY
71616: PUSH
71617: LD_INT 1
71619: ARRAY
71620: PUSH
71621: LD_STRING l
71623: EQUAL
71624: IFFALSE 71649
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71626: LD_ADDR_VAR 0 2
71630: PUSH
71631: LD_VAR 0 1
71635: PPUSH
71636: CALL_OW 437
71640: PUSH
71641: LD_INT 1
71643: ARRAY
71644: PUSH
71645: LD_INT 4
71647: ARRAY
71648: ST_TO_ADDR
// end ;
71649: LD_VAR 0 2
71653: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71654: LD_INT 0
71656: PPUSH
71657: PPUSH
71658: PPUSH
71659: PPUSH
// if not base_units then
71660: LD_VAR 0 1
71664: NOT
71665: IFFALSE 71669
// exit ;
71667: GO 71756
// result := false ;
71669: LD_ADDR_VAR 0 2
71673: PUSH
71674: LD_INT 0
71676: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71677: LD_ADDR_VAR 0 5
71681: PUSH
71682: LD_VAR 0 1
71686: PPUSH
71687: LD_INT 21
71689: PUSH
71690: LD_INT 3
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PPUSH
71697: CALL_OW 72
71701: ST_TO_ADDR
// if not tmp then
71702: LD_VAR 0 5
71706: NOT
71707: IFFALSE 71711
// exit ;
71709: GO 71756
// for i in tmp do
71711: LD_ADDR_VAR 0 3
71715: PUSH
71716: LD_VAR 0 5
71720: PUSH
71721: FOR_IN
71722: IFFALSE 71754
// begin result := EnemyInRange ( i , 22 ) ;
71724: LD_ADDR_VAR 0 2
71728: PUSH
71729: LD_VAR 0 3
71733: PPUSH
71734: LD_INT 22
71736: PPUSH
71737: CALL 69992 0 2
71741: ST_TO_ADDR
// if result then
71742: LD_VAR 0 2
71746: IFFALSE 71752
// exit ;
71748: POP
71749: POP
71750: GO 71756
// end ;
71752: GO 71721
71754: POP
71755: POP
// end ;
71756: LD_VAR 0 2
71760: RET
// export function FilterByTag ( units , tag ) ; begin
71761: LD_INT 0
71763: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71764: LD_ADDR_VAR 0 3
71768: PUSH
71769: LD_VAR 0 1
71773: PPUSH
71774: LD_INT 120
71776: PUSH
71777: LD_VAR 0 2
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PPUSH
71786: CALL_OW 72
71790: ST_TO_ADDR
// end ;
71791: LD_VAR 0 3
71795: RET
// export function IsDriver ( un ) ; begin
71796: LD_INT 0
71798: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71799: LD_ADDR_VAR 0 2
71803: PUSH
71804: LD_VAR 0 1
71808: PUSH
71809: LD_INT 55
71811: PUSH
71812: EMPTY
71813: LIST
71814: PPUSH
71815: CALL_OW 69
71819: IN
71820: ST_TO_ADDR
// end ;
71821: LD_VAR 0 2
71825: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71826: LD_INT 0
71828: PPUSH
71829: PPUSH
// list := [ ] ;
71830: LD_ADDR_VAR 0 5
71834: PUSH
71835: EMPTY
71836: ST_TO_ADDR
// case d of 0 :
71837: LD_VAR 0 3
71841: PUSH
71842: LD_INT 0
71844: DOUBLE
71845: EQUAL
71846: IFTRUE 71850
71848: GO 71983
71850: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71851: LD_ADDR_VAR 0 5
71855: PUSH
71856: LD_VAR 0 1
71860: PUSH
71861: LD_INT 4
71863: MINUS
71864: PUSH
71865: LD_VAR 0 2
71869: PUSH
71870: LD_INT 4
71872: MINUS
71873: PUSH
71874: LD_INT 2
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: LIST
71881: PUSH
71882: LD_VAR 0 1
71886: PUSH
71887: LD_INT 3
71889: MINUS
71890: PUSH
71891: LD_VAR 0 2
71895: PUSH
71896: LD_INT 1
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: LIST
71903: PUSH
71904: LD_VAR 0 1
71908: PUSH
71909: LD_INT 4
71911: PLUS
71912: PUSH
71913: LD_VAR 0 2
71917: PUSH
71918: LD_INT 4
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: LIST
71925: PUSH
71926: LD_VAR 0 1
71930: PUSH
71931: LD_INT 3
71933: PLUS
71934: PUSH
71935: LD_VAR 0 2
71939: PUSH
71940: LD_INT 3
71942: PLUS
71943: PUSH
71944: LD_INT 5
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: LIST
71951: PUSH
71952: LD_VAR 0 1
71956: PUSH
71957: LD_VAR 0 2
71961: PUSH
71962: LD_INT 4
71964: PLUS
71965: PUSH
71966: LD_INT 0
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: LIST
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: ST_TO_ADDR
// end ; 1 :
71981: GO 72681
71983: LD_INT 1
71985: DOUBLE
71986: EQUAL
71987: IFTRUE 71991
71989: GO 72124
71991: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71992: LD_ADDR_VAR 0 5
71996: PUSH
71997: LD_VAR 0 1
72001: PUSH
72002: LD_VAR 0 2
72006: PUSH
72007: LD_INT 4
72009: MINUS
72010: PUSH
72011: LD_INT 3
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: LIST
72018: PUSH
72019: LD_VAR 0 1
72023: PUSH
72024: LD_INT 3
72026: MINUS
72027: PUSH
72028: LD_VAR 0 2
72032: PUSH
72033: LD_INT 3
72035: MINUS
72036: PUSH
72037: LD_INT 2
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: LIST
72044: PUSH
72045: LD_VAR 0 1
72049: PUSH
72050: LD_INT 4
72052: MINUS
72053: PUSH
72054: LD_VAR 0 2
72058: PUSH
72059: LD_INT 1
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: LIST
72066: PUSH
72067: LD_VAR 0 1
72071: PUSH
72072: LD_VAR 0 2
72076: PUSH
72077: LD_INT 3
72079: PLUS
72080: PUSH
72081: LD_INT 0
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: LIST
72088: PUSH
72089: LD_VAR 0 1
72093: PUSH
72094: LD_INT 4
72096: PLUS
72097: PUSH
72098: LD_VAR 0 2
72102: PUSH
72103: LD_INT 4
72105: PLUS
72106: PUSH
72107: LD_INT 5
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: LIST
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: ST_TO_ADDR
// end ; 2 :
72122: GO 72681
72124: LD_INT 2
72126: DOUBLE
72127: EQUAL
72128: IFTRUE 72132
72130: GO 72261
72132: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72133: LD_ADDR_VAR 0 5
72137: PUSH
72138: LD_VAR 0 1
72142: PUSH
72143: LD_VAR 0 2
72147: PUSH
72148: LD_INT 3
72150: MINUS
72151: PUSH
72152: LD_INT 3
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: LIST
72159: PUSH
72160: LD_VAR 0 1
72164: PUSH
72165: LD_INT 4
72167: PLUS
72168: PUSH
72169: LD_VAR 0 2
72173: PUSH
72174: LD_INT 4
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: LIST
72181: PUSH
72182: LD_VAR 0 1
72186: PUSH
72187: LD_VAR 0 2
72191: PUSH
72192: LD_INT 4
72194: PLUS
72195: PUSH
72196: LD_INT 0
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: LIST
72203: PUSH
72204: LD_VAR 0 1
72208: PUSH
72209: LD_INT 3
72211: MINUS
72212: PUSH
72213: LD_VAR 0 2
72217: PUSH
72218: LD_INT 1
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: LIST
72225: PUSH
72226: LD_VAR 0 1
72230: PUSH
72231: LD_INT 4
72233: MINUS
72234: PUSH
72235: LD_VAR 0 2
72239: PUSH
72240: LD_INT 4
72242: MINUS
72243: PUSH
72244: LD_INT 2
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: LIST
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: ST_TO_ADDR
// end ; 3 :
72259: GO 72681
72261: LD_INT 3
72263: DOUBLE
72264: EQUAL
72265: IFTRUE 72269
72267: GO 72402
72269: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72270: LD_ADDR_VAR 0 5
72274: PUSH
72275: LD_VAR 0 1
72279: PUSH
72280: LD_INT 3
72282: PLUS
72283: PUSH
72284: LD_VAR 0 2
72288: PUSH
72289: LD_INT 4
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: LIST
72296: PUSH
72297: LD_VAR 0 1
72301: PUSH
72302: LD_INT 4
72304: PLUS
72305: PUSH
72306: LD_VAR 0 2
72310: PUSH
72311: LD_INT 4
72313: PLUS
72314: PUSH
72315: LD_INT 5
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: LIST
72322: PUSH
72323: LD_VAR 0 1
72327: PUSH
72328: LD_INT 4
72330: MINUS
72331: PUSH
72332: LD_VAR 0 2
72336: PUSH
72337: LD_INT 1
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: LIST
72344: PUSH
72345: LD_VAR 0 1
72349: PUSH
72350: LD_VAR 0 2
72354: PUSH
72355: LD_INT 4
72357: MINUS
72358: PUSH
72359: LD_INT 3
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: LIST
72366: PUSH
72367: LD_VAR 0 1
72371: PUSH
72372: LD_INT 3
72374: MINUS
72375: PUSH
72376: LD_VAR 0 2
72380: PUSH
72381: LD_INT 3
72383: MINUS
72384: PUSH
72385: LD_INT 2
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: LIST
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: ST_TO_ADDR
// end ; 4 :
72400: GO 72681
72402: LD_INT 4
72404: DOUBLE
72405: EQUAL
72406: IFTRUE 72410
72408: GO 72543
72410: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72411: LD_ADDR_VAR 0 5
72415: PUSH
72416: LD_VAR 0 1
72420: PUSH
72421: LD_VAR 0 2
72425: PUSH
72426: LD_INT 4
72428: PLUS
72429: PUSH
72430: LD_INT 0
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: LIST
72437: PUSH
72438: LD_VAR 0 1
72442: PUSH
72443: LD_INT 3
72445: PLUS
72446: PUSH
72447: LD_VAR 0 2
72451: PUSH
72452: LD_INT 3
72454: PLUS
72455: PUSH
72456: LD_INT 5
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: LIST
72463: PUSH
72464: LD_VAR 0 1
72468: PUSH
72469: LD_INT 4
72471: PLUS
72472: PUSH
72473: LD_VAR 0 2
72477: PUSH
72478: LD_INT 4
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: LIST
72485: PUSH
72486: LD_VAR 0 1
72490: PUSH
72491: LD_VAR 0 2
72495: PUSH
72496: LD_INT 3
72498: MINUS
72499: PUSH
72500: LD_INT 3
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: LIST
72507: PUSH
72508: LD_VAR 0 1
72512: PUSH
72513: LD_INT 4
72515: MINUS
72516: PUSH
72517: LD_VAR 0 2
72521: PUSH
72522: LD_INT 4
72524: MINUS
72525: PUSH
72526: LD_INT 2
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: LIST
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: ST_TO_ADDR
// end ; 5 :
72541: GO 72681
72543: LD_INT 5
72545: DOUBLE
72546: EQUAL
72547: IFTRUE 72551
72549: GO 72680
72551: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72552: LD_ADDR_VAR 0 5
72556: PUSH
72557: LD_VAR 0 1
72561: PUSH
72562: LD_INT 4
72564: MINUS
72565: PUSH
72566: LD_VAR 0 2
72570: PUSH
72571: LD_INT 1
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: LIST
72578: PUSH
72579: LD_VAR 0 1
72583: PUSH
72584: LD_VAR 0 2
72588: PUSH
72589: LD_INT 4
72591: MINUS
72592: PUSH
72593: LD_INT 3
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: LIST
72600: PUSH
72601: LD_VAR 0 1
72605: PUSH
72606: LD_INT 4
72608: PLUS
72609: PUSH
72610: LD_VAR 0 2
72614: PUSH
72615: LD_INT 4
72617: PLUS
72618: PUSH
72619: LD_INT 5
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: LIST
72626: PUSH
72627: LD_VAR 0 1
72631: PUSH
72632: LD_INT 3
72634: PLUS
72635: PUSH
72636: LD_VAR 0 2
72640: PUSH
72641: LD_INT 4
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: LIST
72648: PUSH
72649: LD_VAR 0 1
72653: PUSH
72654: LD_VAR 0 2
72658: PUSH
72659: LD_INT 3
72661: PLUS
72662: PUSH
72663: LD_INT 0
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: LIST
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: ST_TO_ADDR
// end ; end ;
72678: GO 72681
72680: POP
// result := list ;
72681: LD_ADDR_VAR 0 4
72685: PUSH
72686: LD_VAR 0 5
72690: ST_TO_ADDR
// end ;
72691: LD_VAR 0 4
72695: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72696: LD_INT 0
72698: PPUSH
72699: PPUSH
72700: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72701: LD_VAR 0 1
72705: NOT
72706: PUSH
72707: LD_VAR 0 2
72711: PUSH
72712: LD_INT 1
72714: PUSH
72715: LD_INT 2
72717: PUSH
72718: LD_INT 3
72720: PUSH
72721: LD_INT 4
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: IN
72730: NOT
72731: OR
72732: IFFALSE 72736
// exit ;
72734: GO 72828
// tmp := [ ] ;
72736: LD_ADDR_VAR 0 5
72740: PUSH
72741: EMPTY
72742: ST_TO_ADDR
// for i in units do
72743: LD_ADDR_VAR 0 4
72747: PUSH
72748: LD_VAR 0 1
72752: PUSH
72753: FOR_IN
72754: IFFALSE 72797
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72756: LD_ADDR_VAR 0 5
72760: PUSH
72761: LD_VAR 0 5
72765: PPUSH
72766: LD_VAR 0 5
72770: PUSH
72771: LD_INT 1
72773: PLUS
72774: PPUSH
72775: LD_VAR 0 4
72779: PPUSH
72780: LD_VAR 0 2
72784: PPUSH
72785: CALL_OW 259
72789: PPUSH
72790: CALL_OW 2
72794: ST_TO_ADDR
72795: GO 72753
72797: POP
72798: POP
// if not tmp then
72799: LD_VAR 0 5
72803: NOT
72804: IFFALSE 72808
// exit ;
72806: GO 72828
// result := SortListByListDesc ( units , tmp ) ;
72808: LD_ADDR_VAR 0 3
72812: PUSH
72813: LD_VAR 0 1
72817: PPUSH
72818: LD_VAR 0 5
72822: PPUSH
72823: CALL_OW 77
72827: ST_TO_ADDR
// end ;
72828: LD_VAR 0 3
72832: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72833: LD_INT 0
72835: PPUSH
72836: PPUSH
72837: PPUSH
// result := false ;
72838: LD_ADDR_VAR 0 3
72842: PUSH
72843: LD_INT 0
72845: ST_TO_ADDR
// x := GetX ( building ) ;
72846: LD_ADDR_VAR 0 4
72850: PUSH
72851: LD_VAR 0 2
72855: PPUSH
72856: CALL_OW 250
72860: ST_TO_ADDR
// y := GetY ( building ) ;
72861: LD_ADDR_VAR 0 5
72865: PUSH
72866: LD_VAR 0 2
72870: PPUSH
72871: CALL_OW 251
72875: ST_TO_ADDR
// if not building or not x or not y then
72876: LD_VAR 0 2
72880: NOT
72881: PUSH
72882: LD_VAR 0 4
72886: NOT
72887: OR
72888: PUSH
72889: LD_VAR 0 5
72893: NOT
72894: OR
72895: IFFALSE 72899
// exit ;
72897: GO 72991
// if GetTaskList ( unit ) then
72899: LD_VAR 0 1
72903: PPUSH
72904: CALL_OW 437
72908: IFFALSE 72991
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72910: LD_STRING e
72912: PUSH
72913: LD_VAR 0 1
72917: PPUSH
72918: CALL_OW 437
72922: PUSH
72923: LD_INT 1
72925: ARRAY
72926: PUSH
72927: LD_INT 1
72929: ARRAY
72930: EQUAL
72931: PUSH
72932: LD_VAR 0 4
72936: PUSH
72937: LD_VAR 0 1
72941: PPUSH
72942: CALL_OW 437
72946: PUSH
72947: LD_INT 1
72949: ARRAY
72950: PUSH
72951: LD_INT 2
72953: ARRAY
72954: EQUAL
72955: AND
72956: PUSH
72957: LD_VAR 0 5
72961: PUSH
72962: LD_VAR 0 1
72966: PPUSH
72967: CALL_OW 437
72971: PUSH
72972: LD_INT 1
72974: ARRAY
72975: PUSH
72976: LD_INT 3
72978: ARRAY
72979: EQUAL
72980: AND
72981: IFFALSE 72991
// result := true end ;
72983: LD_ADDR_VAR 0 3
72987: PUSH
72988: LD_INT 1
72990: ST_TO_ADDR
// end ;
72991: LD_VAR 0 3
72995: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72996: LD_INT 0
72998: PPUSH
// result := false ;
72999: LD_ADDR_VAR 0 4
73003: PUSH
73004: LD_INT 0
73006: ST_TO_ADDR
// if GetTaskList ( unit ) then
73007: LD_VAR 0 1
73011: PPUSH
73012: CALL_OW 437
73016: IFFALSE 73099
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73018: LD_STRING M
73020: PUSH
73021: LD_VAR 0 1
73025: PPUSH
73026: CALL_OW 437
73030: PUSH
73031: LD_INT 1
73033: ARRAY
73034: PUSH
73035: LD_INT 1
73037: ARRAY
73038: EQUAL
73039: PUSH
73040: LD_VAR 0 2
73044: PUSH
73045: LD_VAR 0 1
73049: PPUSH
73050: CALL_OW 437
73054: PUSH
73055: LD_INT 1
73057: ARRAY
73058: PUSH
73059: LD_INT 2
73061: ARRAY
73062: EQUAL
73063: AND
73064: PUSH
73065: LD_VAR 0 3
73069: PUSH
73070: LD_VAR 0 1
73074: PPUSH
73075: CALL_OW 437
73079: PUSH
73080: LD_INT 1
73082: ARRAY
73083: PUSH
73084: LD_INT 3
73086: ARRAY
73087: EQUAL
73088: AND
73089: IFFALSE 73099
// result := true ;
73091: LD_ADDR_VAR 0 4
73095: PUSH
73096: LD_INT 1
73098: ST_TO_ADDR
// end ; end ;
73099: LD_VAR 0 4
73103: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73104: LD_INT 0
73106: PPUSH
73107: PPUSH
73108: PPUSH
73109: PPUSH
// if not unit or not area then
73110: LD_VAR 0 1
73114: NOT
73115: PUSH
73116: LD_VAR 0 2
73120: NOT
73121: OR
73122: IFFALSE 73126
// exit ;
73124: GO 73290
// tmp := AreaToList ( area , i ) ;
73126: LD_ADDR_VAR 0 6
73130: PUSH
73131: LD_VAR 0 2
73135: PPUSH
73136: LD_VAR 0 5
73140: PPUSH
73141: CALL_OW 517
73145: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73146: LD_ADDR_VAR 0 5
73150: PUSH
73151: DOUBLE
73152: LD_INT 1
73154: DEC
73155: ST_TO_ADDR
73156: LD_VAR 0 6
73160: PUSH
73161: LD_INT 1
73163: ARRAY
73164: PUSH
73165: FOR_TO
73166: IFFALSE 73288
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73168: LD_ADDR_VAR 0 7
73172: PUSH
73173: LD_VAR 0 6
73177: PUSH
73178: LD_INT 1
73180: ARRAY
73181: PUSH
73182: LD_VAR 0 5
73186: ARRAY
73187: PUSH
73188: LD_VAR 0 6
73192: PUSH
73193: LD_INT 2
73195: ARRAY
73196: PUSH
73197: LD_VAR 0 5
73201: ARRAY
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73207: LD_VAR 0 7
73211: PUSH
73212: LD_INT 1
73214: ARRAY
73215: PPUSH
73216: LD_VAR 0 7
73220: PUSH
73221: LD_INT 2
73223: ARRAY
73224: PPUSH
73225: CALL_OW 428
73229: PUSH
73230: LD_INT 0
73232: EQUAL
73233: IFFALSE 73286
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73235: LD_VAR 0 1
73239: PPUSH
73240: LD_VAR 0 7
73244: PUSH
73245: LD_INT 1
73247: ARRAY
73248: PPUSH
73249: LD_VAR 0 7
73253: PUSH
73254: LD_INT 2
73256: ARRAY
73257: PPUSH
73258: LD_VAR 0 3
73262: PPUSH
73263: CALL_OW 48
// result := IsPlaced ( unit ) ;
73267: LD_ADDR_VAR 0 4
73271: PUSH
73272: LD_VAR 0 1
73276: PPUSH
73277: CALL_OW 305
73281: ST_TO_ADDR
// exit ;
73282: POP
73283: POP
73284: GO 73290
// end ; end ;
73286: GO 73165
73288: POP
73289: POP
// end ;
73290: LD_VAR 0 4
73294: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73295: LD_INT 0
73297: PPUSH
73298: PPUSH
73299: PPUSH
// if not side or side > 8 then
73300: LD_VAR 0 1
73304: NOT
73305: PUSH
73306: LD_VAR 0 1
73310: PUSH
73311: LD_INT 8
73313: GREATER
73314: OR
73315: IFFALSE 73319
// exit ;
73317: GO 73506
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73319: LD_ADDR_VAR 0 4
73323: PUSH
73324: LD_INT 22
73326: PUSH
73327: LD_VAR 0 1
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: PUSH
73336: LD_INT 21
73338: PUSH
73339: LD_INT 3
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PPUSH
73350: CALL_OW 69
73354: ST_TO_ADDR
// if not tmp then
73355: LD_VAR 0 4
73359: NOT
73360: IFFALSE 73364
// exit ;
73362: GO 73506
// enable_addtolog := true ;
73364: LD_ADDR_OWVAR 81
73368: PUSH
73369: LD_INT 1
73371: ST_TO_ADDR
// AddToLog ( [ ) ;
73372: LD_STRING [
73374: PPUSH
73375: CALL_OW 561
// for i in tmp do
73379: LD_ADDR_VAR 0 3
73383: PUSH
73384: LD_VAR 0 4
73388: PUSH
73389: FOR_IN
73390: IFFALSE 73497
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73392: LD_STRING [
73394: PUSH
73395: LD_VAR 0 3
73399: PPUSH
73400: CALL_OW 266
73404: STR
73405: PUSH
73406: LD_STRING , 
73408: STR
73409: PUSH
73410: LD_VAR 0 3
73414: PPUSH
73415: CALL_OW 250
73419: STR
73420: PUSH
73421: LD_STRING , 
73423: STR
73424: PUSH
73425: LD_VAR 0 3
73429: PPUSH
73430: CALL_OW 251
73434: STR
73435: PUSH
73436: LD_STRING , 
73438: STR
73439: PUSH
73440: LD_VAR 0 3
73444: PPUSH
73445: CALL_OW 254
73449: STR
73450: PUSH
73451: LD_STRING , 
73453: STR
73454: PUSH
73455: LD_VAR 0 3
73459: PPUSH
73460: LD_INT 1
73462: PPUSH
73463: CALL_OW 268
73467: STR
73468: PUSH
73469: LD_STRING , 
73471: STR
73472: PUSH
73473: LD_VAR 0 3
73477: PPUSH
73478: LD_INT 2
73480: PPUSH
73481: CALL_OW 268
73485: STR
73486: PUSH
73487: LD_STRING ],
73489: STR
73490: PPUSH
73491: CALL_OW 561
// end ;
73495: GO 73389
73497: POP
73498: POP
// AddToLog ( ]; ) ;
73499: LD_STRING ];
73501: PPUSH
73502: CALL_OW 561
// end ;
73506: LD_VAR 0 2
73510: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73511: LD_INT 0
73513: PPUSH
73514: PPUSH
73515: PPUSH
73516: PPUSH
73517: PPUSH
// if not area or not rate or not max then
73518: LD_VAR 0 1
73522: NOT
73523: PUSH
73524: LD_VAR 0 2
73528: NOT
73529: OR
73530: PUSH
73531: LD_VAR 0 4
73535: NOT
73536: OR
73537: IFFALSE 73541
// exit ;
73539: GO 73730
// while 1 do
73541: LD_INT 1
73543: IFFALSE 73730
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73545: LD_ADDR_VAR 0 9
73549: PUSH
73550: LD_VAR 0 1
73554: PPUSH
73555: LD_INT 1
73557: PPUSH
73558: CALL_OW 287
73562: PUSH
73563: LD_INT 10
73565: MUL
73566: ST_TO_ADDR
// r := rate / 10 ;
73567: LD_ADDR_VAR 0 7
73571: PUSH
73572: LD_VAR 0 2
73576: PUSH
73577: LD_INT 10
73579: DIVREAL
73580: ST_TO_ADDR
// time := 1 1$00 ;
73581: LD_ADDR_VAR 0 8
73585: PUSH
73586: LD_INT 2100
73588: ST_TO_ADDR
// if amount < min then
73589: LD_VAR 0 9
73593: PUSH
73594: LD_VAR 0 3
73598: LESS
73599: IFFALSE 73617
// r := r * 2 else
73601: LD_ADDR_VAR 0 7
73605: PUSH
73606: LD_VAR 0 7
73610: PUSH
73611: LD_INT 2
73613: MUL
73614: ST_TO_ADDR
73615: GO 73643
// if amount > max then
73617: LD_VAR 0 9
73621: PUSH
73622: LD_VAR 0 4
73626: GREATER
73627: IFFALSE 73643
// r := r / 2 ;
73629: LD_ADDR_VAR 0 7
73633: PUSH
73634: LD_VAR 0 7
73638: PUSH
73639: LD_INT 2
73641: DIVREAL
73642: ST_TO_ADDR
// time := time / r ;
73643: LD_ADDR_VAR 0 8
73647: PUSH
73648: LD_VAR 0 8
73652: PUSH
73653: LD_VAR 0 7
73657: DIVREAL
73658: ST_TO_ADDR
// if time < 0 then
73659: LD_VAR 0 8
73663: PUSH
73664: LD_INT 0
73666: LESS
73667: IFFALSE 73684
// time := time * - 1 ;
73669: LD_ADDR_VAR 0 8
73673: PUSH
73674: LD_VAR 0 8
73678: PUSH
73679: LD_INT 1
73681: NEG
73682: MUL
73683: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73684: LD_VAR 0 8
73688: PUSH
73689: LD_INT 35
73691: PPUSH
73692: LD_INT 875
73694: PPUSH
73695: CALL_OW 12
73699: PLUS
73700: PPUSH
73701: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73705: LD_INT 1
73707: PPUSH
73708: LD_INT 5
73710: PPUSH
73711: CALL_OW 12
73715: PPUSH
73716: LD_VAR 0 1
73720: PPUSH
73721: LD_INT 1
73723: PPUSH
73724: CALL_OW 55
// end ;
73728: GO 73541
// end ;
73730: LD_VAR 0 5
73734: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73735: LD_INT 0
73737: PPUSH
73738: PPUSH
73739: PPUSH
73740: PPUSH
73741: PPUSH
73742: PPUSH
73743: PPUSH
73744: PPUSH
// if not turrets or not factories then
73745: LD_VAR 0 1
73749: NOT
73750: PUSH
73751: LD_VAR 0 2
73755: NOT
73756: OR
73757: IFFALSE 73761
// exit ;
73759: GO 74068
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73761: LD_ADDR_VAR 0 10
73765: PUSH
73766: LD_INT 5
73768: PUSH
73769: LD_INT 6
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: LD_INT 2
73778: PUSH
73779: LD_INT 4
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 3
73788: PUSH
73789: LD_INT 5
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: LIST
73800: PUSH
73801: LD_INT 24
73803: PUSH
73804: LD_INT 25
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: PUSH
73811: LD_INT 23
73813: PUSH
73814: LD_INT 27
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: PUSH
73825: LD_INT 42
73827: PUSH
73828: LD_INT 43
73830: PUSH
73831: EMPTY
73832: LIST
73833: LIST
73834: PUSH
73835: LD_INT 44
73837: PUSH
73838: LD_INT 46
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 45
73847: PUSH
73848: LD_INT 47
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: LIST
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: LIST
73864: ST_TO_ADDR
// result := [ ] ;
73865: LD_ADDR_VAR 0 3
73869: PUSH
73870: EMPTY
73871: ST_TO_ADDR
// for i in turrets do
73872: LD_ADDR_VAR 0 4
73876: PUSH
73877: LD_VAR 0 1
73881: PUSH
73882: FOR_IN
73883: IFFALSE 74066
// begin nat := GetNation ( i ) ;
73885: LD_ADDR_VAR 0 7
73889: PUSH
73890: LD_VAR 0 4
73894: PPUSH
73895: CALL_OW 248
73899: ST_TO_ADDR
// weapon := 0 ;
73900: LD_ADDR_VAR 0 8
73904: PUSH
73905: LD_INT 0
73907: ST_TO_ADDR
// if not nat then
73908: LD_VAR 0 7
73912: NOT
73913: IFFALSE 73917
// continue ;
73915: GO 73882
// for j in list [ nat ] do
73917: LD_ADDR_VAR 0 5
73921: PUSH
73922: LD_VAR 0 10
73926: PUSH
73927: LD_VAR 0 7
73931: ARRAY
73932: PUSH
73933: FOR_IN
73934: IFFALSE 73975
// if GetBWeapon ( i ) = j [ 1 ] then
73936: LD_VAR 0 4
73940: PPUSH
73941: CALL_OW 269
73945: PUSH
73946: LD_VAR 0 5
73950: PUSH
73951: LD_INT 1
73953: ARRAY
73954: EQUAL
73955: IFFALSE 73973
// begin weapon := j [ 2 ] ;
73957: LD_ADDR_VAR 0 8
73961: PUSH
73962: LD_VAR 0 5
73966: PUSH
73967: LD_INT 2
73969: ARRAY
73970: ST_TO_ADDR
// break ;
73971: GO 73975
// end ;
73973: GO 73933
73975: POP
73976: POP
// if not weapon then
73977: LD_VAR 0 8
73981: NOT
73982: IFFALSE 73986
// continue ;
73984: GO 73882
// for k in factories do
73986: LD_ADDR_VAR 0 6
73990: PUSH
73991: LD_VAR 0 2
73995: PUSH
73996: FOR_IN
73997: IFFALSE 74062
// begin weapons := AvailableWeaponList ( k ) ;
73999: LD_ADDR_VAR 0 9
74003: PUSH
74004: LD_VAR 0 6
74008: PPUSH
74009: CALL_OW 478
74013: ST_TO_ADDR
// if not weapons then
74014: LD_VAR 0 9
74018: NOT
74019: IFFALSE 74023
// continue ;
74021: GO 73996
// if weapon in weapons then
74023: LD_VAR 0 8
74027: PUSH
74028: LD_VAR 0 9
74032: IN
74033: IFFALSE 74060
// begin result := [ i , weapon ] ;
74035: LD_ADDR_VAR 0 3
74039: PUSH
74040: LD_VAR 0 4
74044: PUSH
74045: LD_VAR 0 8
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: ST_TO_ADDR
// exit ;
74054: POP
74055: POP
74056: POP
74057: POP
74058: GO 74068
// end ; end ;
74060: GO 73996
74062: POP
74063: POP
// end ;
74064: GO 73882
74066: POP
74067: POP
// end ;
74068: LD_VAR 0 3
74072: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74073: LD_INT 0
74075: PPUSH
// if not side or side > 8 then
74076: LD_VAR 0 3
74080: NOT
74081: PUSH
74082: LD_VAR 0 3
74086: PUSH
74087: LD_INT 8
74089: GREATER
74090: OR
74091: IFFALSE 74095
// exit ;
74093: GO 74154
// if not range then
74095: LD_VAR 0 4
74099: NOT
74100: IFFALSE 74111
// range := - 12 ;
74102: LD_ADDR_VAR 0 4
74106: PUSH
74107: LD_INT 12
74109: NEG
74110: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74111: LD_VAR 0 1
74115: PPUSH
74116: LD_VAR 0 2
74120: PPUSH
74121: LD_VAR 0 3
74125: PPUSH
74126: LD_VAR 0 4
74130: PPUSH
74131: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74135: LD_VAR 0 1
74139: PPUSH
74140: LD_VAR 0 2
74144: PPUSH
74145: LD_VAR 0 3
74149: PPUSH
74150: CALL_OW 331
// end ;
74154: LD_VAR 0 5
74158: RET
// export function Video ( mode ) ; begin
74159: LD_INT 0
74161: PPUSH
// ingame_video = mode ;
74162: LD_ADDR_OWVAR 52
74166: PUSH
74167: LD_VAR 0 1
74171: ST_TO_ADDR
// interface_hidden = mode ;
74172: LD_ADDR_OWVAR 54
74176: PUSH
74177: LD_VAR 0 1
74181: ST_TO_ADDR
// end ;
74182: LD_VAR 0 2
74186: RET
// export function Join ( array , element ) ; begin
74187: LD_INT 0
74189: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74190: LD_ADDR_VAR 0 3
74194: PUSH
74195: LD_VAR 0 1
74199: PPUSH
74200: LD_VAR 0 1
74204: PUSH
74205: LD_INT 1
74207: PLUS
74208: PPUSH
74209: LD_VAR 0 2
74213: PPUSH
74214: CALL_OW 1
74218: ST_TO_ADDR
// end ;
74219: LD_VAR 0 3
74223: RET
// export function JoinUnion ( array , element ) ; begin
74224: LD_INT 0
74226: PPUSH
// result := array union element ;
74227: LD_ADDR_VAR 0 3
74231: PUSH
74232: LD_VAR 0 1
74236: PUSH
74237: LD_VAR 0 2
74241: UNION
74242: ST_TO_ADDR
// end ;
74243: LD_VAR 0 3
74247: RET
// export function GetBehemoths ( side ) ; begin
74248: LD_INT 0
74250: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74251: LD_ADDR_VAR 0 2
74255: PUSH
74256: LD_INT 22
74258: PUSH
74259: LD_VAR 0 1
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: LD_INT 31
74270: PUSH
74271: LD_INT 25
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: PPUSH
74282: CALL_OW 69
74286: ST_TO_ADDR
// end ;
74287: LD_VAR 0 2
74291: RET
// export function Shuffle ( array ) ; var i , index ; begin
74292: LD_INT 0
74294: PPUSH
74295: PPUSH
74296: PPUSH
// result := [ ] ;
74297: LD_ADDR_VAR 0 2
74301: PUSH
74302: EMPTY
74303: ST_TO_ADDR
// if not array then
74304: LD_VAR 0 1
74308: NOT
74309: IFFALSE 74313
// exit ;
74311: GO 74412
// Randomize ;
74313: CALL_OW 10
// for i = array downto 1 do
74317: LD_ADDR_VAR 0 3
74321: PUSH
74322: DOUBLE
74323: LD_VAR 0 1
74327: INC
74328: ST_TO_ADDR
74329: LD_INT 1
74331: PUSH
74332: FOR_DOWNTO
74333: IFFALSE 74410
// begin index := rand ( 1 , array ) ;
74335: LD_ADDR_VAR 0 4
74339: PUSH
74340: LD_INT 1
74342: PPUSH
74343: LD_VAR 0 1
74347: PPUSH
74348: CALL_OW 12
74352: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74353: LD_ADDR_VAR 0 2
74357: PUSH
74358: LD_VAR 0 2
74362: PPUSH
74363: LD_VAR 0 2
74367: PUSH
74368: LD_INT 1
74370: PLUS
74371: PPUSH
74372: LD_VAR 0 1
74376: PUSH
74377: LD_VAR 0 4
74381: ARRAY
74382: PPUSH
74383: CALL_OW 2
74387: ST_TO_ADDR
// array := Delete ( array , index ) ;
74388: LD_ADDR_VAR 0 1
74392: PUSH
74393: LD_VAR 0 1
74397: PPUSH
74398: LD_VAR 0 4
74402: PPUSH
74403: CALL_OW 3
74407: ST_TO_ADDR
// end ;
74408: GO 74332
74410: POP
74411: POP
// end ;
74412: LD_VAR 0 2
74416: RET
// export function GetBaseMaterials ( base ) ; begin
74417: LD_INT 0
74419: PPUSH
// result := [ 0 , 0 , 0 ] ;
74420: LD_ADDR_VAR 0 2
74424: PUSH
74425: LD_INT 0
74427: PUSH
74428: LD_INT 0
74430: PUSH
74431: LD_INT 0
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: LIST
74438: ST_TO_ADDR
// if not base then
74439: LD_VAR 0 1
74443: NOT
74444: IFFALSE 74448
// exit ;
74446: GO 74497
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74448: LD_ADDR_VAR 0 2
74452: PUSH
74453: LD_VAR 0 1
74457: PPUSH
74458: LD_INT 1
74460: PPUSH
74461: CALL_OW 275
74465: PUSH
74466: LD_VAR 0 1
74470: PPUSH
74471: LD_INT 2
74473: PPUSH
74474: CALL_OW 275
74478: PUSH
74479: LD_VAR 0 1
74483: PPUSH
74484: LD_INT 3
74486: PPUSH
74487: CALL_OW 275
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: LIST
74496: ST_TO_ADDR
// end ;
74497: LD_VAR 0 2
74501: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74502: LD_INT 0
74504: PPUSH
74505: PPUSH
// result := array ;
74506: LD_ADDR_VAR 0 3
74510: PUSH
74511: LD_VAR 0 1
74515: ST_TO_ADDR
// if size > 0 then
74516: LD_VAR 0 2
74520: PUSH
74521: LD_INT 0
74523: GREATER
74524: IFFALSE 74570
// for i := array downto size do
74526: LD_ADDR_VAR 0 4
74530: PUSH
74531: DOUBLE
74532: LD_VAR 0 1
74536: INC
74537: ST_TO_ADDR
74538: LD_VAR 0 2
74542: PUSH
74543: FOR_DOWNTO
74544: IFFALSE 74568
// result := Delete ( result , result ) ;
74546: LD_ADDR_VAR 0 3
74550: PUSH
74551: LD_VAR 0 3
74555: PPUSH
74556: LD_VAR 0 3
74560: PPUSH
74561: CALL_OW 3
74565: ST_TO_ADDR
74566: GO 74543
74568: POP
74569: POP
// end ;
74570: LD_VAR 0 3
74574: RET
// export function ComExit ( unit ) ; var tmp ; begin
74575: LD_INT 0
74577: PPUSH
74578: PPUSH
// if not IsInUnit ( unit ) then
74579: LD_VAR 0 1
74583: PPUSH
74584: CALL_OW 310
74588: NOT
74589: IFFALSE 74593
// exit ;
74591: GO 74653
// tmp := IsInUnit ( unit ) ;
74593: LD_ADDR_VAR 0 3
74597: PUSH
74598: LD_VAR 0 1
74602: PPUSH
74603: CALL_OW 310
74607: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74608: LD_VAR 0 3
74612: PPUSH
74613: CALL_OW 247
74617: PUSH
74618: LD_INT 2
74620: EQUAL
74621: IFFALSE 74634
// ComExitVehicle ( unit ) else
74623: LD_VAR 0 1
74627: PPUSH
74628: CALL_OW 121
74632: GO 74643
// ComExitBuilding ( unit ) ;
74634: LD_VAR 0 1
74638: PPUSH
74639: CALL_OW 122
// result := tmp ;
74643: LD_ADDR_VAR 0 2
74647: PUSH
74648: LD_VAR 0 3
74652: ST_TO_ADDR
// end ;
74653: LD_VAR 0 2
74657: RET
// export function ComExitAll ( units ) ; var i ; begin
74658: LD_INT 0
74660: PPUSH
74661: PPUSH
// if not units then
74662: LD_VAR 0 1
74666: NOT
74667: IFFALSE 74671
// exit ;
74669: GO 74697
// for i in units do
74671: LD_ADDR_VAR 0 3
74675: PUSH
74676: LD_VAR 0 1
74680: PUSH
74681: FOR_IN
74682: IFFALSE 74695
// ComExit ( i ) ;
74684: LD_VAR 0 3
74688: PPUSH
74689: CALL 74575 0 1
74693: GO 74681
74695: POP
74696: POP
// end ;
74697: LD_VAR 0 2
74701: RET
// export function ResetHc ; begin
74702: LD_INT 0
74704: PPUSH
// InitHc ;
74705: CALL_OW 19
// hc_importance := 0 ;
74709: LD_ADDR_OWVAR 32
74713: PUSH
74714: LD_INT 0
74716: ST_TO_ADDR
// end ;
74717: LD_VAR 0 1
74721: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74722: LD_INT 0
74724: PPUSH
74725: PPUSH
74726: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74727: LD_ADDR_VAR 0 6
74731: PUSH
74732: LD_VAR 0 1
74736: PUSH
74737: LD_VAR 0 3
74741: PLUS
74742: PUSH
74743: LD_INT 2
74745: DIV
74746: ST_TO_ADDR
// if _x < 0 then
74747: LD_VAR 0 6
74751: PUSH
74752: LD_INT 0
74754: LESS
74755: IFFALSE 74772
// _x := _x * - 1 ;
74757: LD_ADDR_VAR 0 6
74761: PUSH
74762: LD_VAR 0 6
74766: PUSH
74767: LD_INT 1
74769: NEG
74770: MUL
74771: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74772: LD_ADDR_VAR 0 7
74776: PUSH
74777: LD_VAR 0 2
74781: PUSH
74782: LD_VAR 0 4
74786: PLUS
74787: PUSH
74788: LD_INT 2
74790: DIV
74791: ST_TO_ADDR
// if _y < 0 then
74792: LD_VAR 0 7
74796: PUSH
74797: LD_INT 0
74799: LESS
74800: IFFALSE 74817
// _y := _y * - 1 ;
74802: LD_ADDR_VAR 0 7
74806: PUSH
74807: LD_VAR 0 7
74811: PUSH
74812: LD_INT 1
74814: NEG
74815: MUL
74816: ST_TO_ADDR
// result := [ _x , _y ] ;
74817: LD_ADDR_VAR 0 5
74821: PUSH
74822: LD_VAR 0 6
74826: PUSH
74827: LD_VAR 0 7
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: ST_TO_ADDR
// end ;
74836: LD_VAR 0 5
74840: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74841: LD_INT 0
74843: PPUSH
74844: PPUSH
74845: PPUSH
74846: PPUSH
// task := GetTaskList ( unit ) ;
74847: LD_ADDR_VAR 0 7
74851: PUSH
74852: LD_VAR 0 1
74856: PPUSH
74857: CALL_OW 437
74861: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74862: LD_VAR 0 7
74866: NOT
74867: PUSH
74868: LD_VAR 0 1
74872: PPUSH
74873: LD_VAR 0 2
74877: PPUSH
74878: CALL_OW 308
74882: NOT
74883: AND
74884: IFFALSE 74888
// exit ;
74886: GO 75006
// if IsInArea ( unit , area ) then
74888: LD_VAR 0 1
74892: PPUSH
74893: LD_VAR 0 2
74897: PPUSH
74898: CALL_OW 308
74902: IFFALSE 74920
// begin ComMoveToArea ( unit , goAway ) ;
74904: LD_VAR 0 1
74908: PPUSH
74909: LD_VAR 0 3
74913: PPUSH
74914: CALL_OW 113
// exit ;
74918: GO 75006
// end ; if task [ 1 ] [ 1 ] <> M then
74920: LD_VAR 0 7
74924: PUSH
74925: LD_INT 1
74927: ARRAY
74928: PUSH
74929: LD_INT 1
74931: ARRAY
74932: PUSH
74933: LD_STRING M
74935: NONEQUAL
74936: IFFALSE 74940
// exit ;
74938: GO 75006
// x := task [ 1 ] [ 2 ] ;
74940: LD_ADDR_VAR 0 5
74944: PUSH
74945: LD_VAR 0 7
74949: PUSH
74950: LD_INT 1
74952: ARRAY
74953: PUSH
74954: LD_INT 2
74956: ARRAY
74957: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74958: LD_ADDR_VAR 0 6
74962: PUSH
74963: LD_VAR 0 7
74967: PUSH
74968: LD_INT 1
74970: ARRAY
74971: PUSH
74972: LD_INT 3
74974: ARRAY
74975: ST_TO_ADDR
// if InArea ( x , y , area ) then
74976: LD_VAR 0 5
74980: PPUSH
74981: LD_VAR 0 6
74985: PPUSH
74986: LD_VAR 0 2
74990: PPUSH
74991: CALL_OW 309
74995: IFFALSE 75006
// ComStop ( unit ) ;
74997: LD_VAR 0 1
75001: PPUSH
75002: CALL_OW 141
// end ;
75006: LD_VAR 0 4
75010: RET
// export function Abs ( value ) ; begin
75011: LD_INT 0
75013: PPUSH
// result := value ;
75014: LD_ADDR_VAR 0 2
75018: PUSH
75019: LD_VAR 0 1
75023: ST_TO_ADDR
// if value < 0 then
75024: LD_VAR 0 1
75028: PUSH
75029: LD_INT 0
75031: LESS
75032: IFFALSE 75049
// result := value * - 1 ;
75034: LD_ADDR_VAR 0 2
75038: PUSH
75039: LD_VAR 0 1
75043: PUSH
75044: LD_INT 1
75046: NEG
75047: MUL
75048: ST_TO_ADDR
// end ;
75049: LD_VAR 0 2
75053: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75054: LD_INT 0
75056: PPUSH
75057: PPUSH
75058: PPUSH
75059: PPUSH
75060: PPUSH
75061: PPUSH
75062: PPUSH
75063: PPUSH
// if not unit or not building then
75064: LD_VAR 0 1
75068: NOT
75069: PUSH
75070: LD_VAR 0 2
75074: NOT
75075: OR
75076: IFFALSE 75080
// exit ;
75078: GO 75306
// x := GetX ( building ) ;
75080: LD_ADDR_VAR 0 4
75084: PUSH
75085: LD_VAR 0 2
75089: PPUSH
75090: CALL_OW 250
75094: ST_TO_ADDR
// y := GetY ( building ) ;
75095: LD_ADDR_VAR 0 6
75099: PUSH
75100: LD_VAR 0 2
75104: PPUSH
75105: CALL_OW 251
75109: ST_TO_ADDR
// d := GetDir ( building ) ;
75110: LD_ADDR_VAR 0 8
75114: PUSH
75115: LD_VAR 0 2
75119: PPUSH
75120: CALL_OW 254
75124: ST_TO_ADDR
// r := 4 ;
75125: LD_ADDR_VAR 0 9
75129: PUSH
75130: LD_INT 4
75132: ST_TO_ADDR
// for i := 1 to 5 do
75133: LD_ADDR_VAR 0 10
75137: PUSH
75138: DOUBLE
75139: LD_INT 1
75141: DEC
75142: ST_TO_ADDR
75143: LD_INT 5
75145: PUSH
75146: FOR_TO
75147: IFFALSE 75304
// begin _x := ShiftX ( x , d , r + i ) ;
75149: LD_ADDR_VAR 0 5
75153: PUSH
75154: LD_VAR 0 4
75158: PPUSH
75159: LD_VAR 0 8
75163: PPUSH
75164: LD_VAR 0 9
75168: PUSH
75169: LD_VAR 0 10
75173: PLUS
75174: PPUSH
75175: CALL_OW 272
75179: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75180: LD_ADDR_VAR 0 7
75184: PUSH
75185: LD_VAR 0 6
75189: PPUSH
75190: LD_VAR 0 8
75194: PPUSH
75195: LD_VAR 0 9
75199: PUSH
75200: LD_VAR 0 10
75204: PLUS
75205: PPUSH
75206: CALL_OW 273
75210: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75211: LD_VAR 0 5
75215: PPUSH
75216: LD_VAR 0 7
75220: PPUSH
75221: CALL_OW 488
75225: PUSH
75226: LD_VAR 0 5
75230: PPUSH
75231: LD_VAR 0 7
75235: PPUSH
75236: CALL_OW 428
75240: PPUSH
75241: CALL_OW 247
75245: PUSH
75246: LD_INT 3
75248: PUSH
75249: LD_INT 2
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: IN
75256: NOT
75257: AND
75258: IFFALSE 75302
// begin ComMoveXY ( unit , _x , _y ) ;
75260: LD_VAR 0 1
75264: PPUSH
75265: LD_VAR 0 5
75269: PPUSH
75270: LD_VAR 0 7
75274: PPUSH
75275: CALL_OW 111
// result := [ _x , _y ] ;
75279: LD_ADDR_VAR 0 3
75283: PUSH
75284: LD_VAR 0 5
75288: PUSH
75289: LD_VAR 0 7
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: ST_TO_ADDR
// exit ;
75298: POP
75299: POP
75300: GO 75306
// end ; end ;
75302: GO 75146
75304: POP
75305: POP
// end ;
75306: LD_VAR 0 3
75310: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75311: LD_INT 0
75313: PPUSH
75314: PPUSH
75315: PPUSH
// result := 0 ;
75316: LD_ADDR_VAR 0 3
75320: PUSH
75321: LD_INT 0
75323: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75324: LD_VAR 0 1
75328: PUSH
75329: LD_INT 0
75331: LESS
75332: PUSH
75333: LD_VAR 0 1
75337: PUSH
75338: LD_INT 8
75340: GREATER
75341: OR
75342: PUSH
75343: LD_VAR 0 2
75347: PUSH
75348: LD_INT 0
75350: LESS
75351: OR
75352: PUSH
75353: LD_VAR 0 2
75357: PUSH
75358: LD_INT 8
75360: GREATER
75361: OR
75362: IFFALSE 75366
// exit ;
75364: GO 75441
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75366: LD_ADDR_VAR 0 4
75370: PUSH
75371: LD_INT 22
75373: PUSH
75374: LD_VAR 0 2
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: PPUSH
75383: CALL_OW 69
75387: PUSH
75388: FOR_IN
75389: IFFALSE 75439
// begin un := UnitShoot ( i ) ;
75391: LD_ADDR_VAR 0 5
75395: PUSH
75396: LD_VAR 0 4
75400: PPUSH
75401: CALL_OW 504
75405: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75406: LD_VAR 0 5
75410: PPUSH
75411: CALL_OW 255
75415: PUSH
75416: LD_VAR 0 1
75420: EQUAL
75421: IFFALSE 75437
// begin result := un ;
75423: LD_ADDR_VAR 0 3
75427: PUSH
75428: LD_VAR 0 5
75432: ST_TO_ADDR
// exit ;
75433: POP
75434: POP
75435: GO 75441
// end ; end ;
75437: GO 75388
75439: POP
75440: POP
// end ;
75441: LD_VAR 0 3
75445: RET
// export function GetCargoBay ( units ) ; begin
75446: LD_INT 0
75448: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75449: LD_ADDR_VAR 0 2
75453: PUSH
75454: LD_VAR 0 1
75458: PPUSH
75459: LD_INT 2
75461: PUSH
75462: LD_INT 34
75464: PUSH
75465: LD_INT 12
75467: PUSH
75468: EMPTY
75469: LIST
75470: LIST
75471: PUSH
75472: LD_INT 34
75474: PUSH
75475: LD_INT 51
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: PUSH
75482: LD_INT 34
75484: PUSH
75485: LD_INT 32
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: PUSH
75492: LD_INT 34
75494: PUSH
75495: LD_EXP 33
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: LIST
75510: PPUSH
75511: CALL_OW 72
75515: ST_TO_ADDR
// end ;
75516: LD_VAR 0 2
75520: RET
// export function Negate ( value ) ; begin
75521: LD_INT 0
75523: PPUSH
// result := not value ;
75524: LD_ADDR_VAR 0 2
75528: PUSH
75529: LD_VAR 0 1
75533: NOT
75534: ST_TO_ADDR
// end ;
75535: LD_VAR 0 2
75539: RET
// export function Inc ( value ) ; begin
75540: LD_INT 0
75542: PPUSH
// result := value + 1 ;
75543: LD_ADDR_VAR 0 2
75547: PUSH
75548: LD_VAR 0 1
75552: PUSH
75553: LD_INT 1
75555: PLUS
75556: ST_TO_ADDR
// end ;
75557: LD_VAR 0 2
75561: RET
// export function Dec ( value ) ; begin
75562: LD_INT 0
75564: PPUSH
// result := value - 1 ;
75565: LD_ADDR_VAR 0 2
75569: PUSH
75570: LD_VAR 0 1
75574: PUSH
75575: LD_INT 1
75577: MINUS
75578: ST_TO_ADDR
// end ;
75579: LD_VAR 0 2
75583: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75584: LD_INT 0
75586: PPUSH
75587: PPUSH
75588: PPUSH
75589: PPUSH
75590: PPUSH
75591: PPUSH
75592: PPUSH
75593: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75594: LD_VAR 0 1
75598: PPUSH
75599: LD_VAR 0 2
75603: PPUSH
75604: CALL_OW 488
75608: NOT
75609: PUSH
75610: LD_VAR 0 3
75614: PPUSH
75615: LD_VAR 0 4
75619: PPUSH
75620: CALL_OW 488
75624: NOT
75625: OR
75626: IFFALSE 75639
// begin result := - 1 ;
75628: LD_ADDR_VAR 0 5
75632: PUSH
75633: LD_INT 1
75635: NEG
75636: ST_TO_ADDR
// exit ;
75637: GO 75874
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75639: LD_ADDR_VAR 0 12
75643: PUSH
75644: LD_VAR 0 1
75648: PPUSH
75649: LD_VAR 0 2
75653: PPUSH
75654: LD_VAR 0 3
75658: PPUSH
75659: LD_VAR 0 4
75663: PPUSH
75664: CALL 74722 0 4
75668: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75669: LD_ADDR_VAR 0 11
75673: PUSH
75674: LD_VAR 0 1
75678: PPUSH
75679: LD_VAR 0 2
75683: PPUSH
75684: LD_VAR 0 12
75688: PUSH
75689: LD_INT 1
75691: ARRAY
75692: PPUSH
75693: LD_VAR 0 12
75697: PUSH
75698: LD_INT 2
75700: ARRAY
75701: PPUSH
75702: CALL_OW 298
75706: ST_TO_ADDR
// distance := 9999 ;
75707: LD_ADDR_VAR 0 10
75711: PUSH
75712: LD_INT 9999
75714: ST_TO_ADDR
// for i := 0 to 5 do
75715: LD_ADDR_VAR 0 6
75719: PUSH
75720: DOUBLE
75721: LD_INT 0
75723: DEC
75724: ST_TO_ADDR
75725: LD_INT 5
75727: PUSH
75728: FOR_TO
75729: IFFALSE 75872
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75731: LD_ADDR_VAR 0 7
75735: PUSH
75736: LD_VAR 0 1
75740: PPUSH
75741: LD_VAR 0 6
75745: PPUSH
75746: LD_VAR 0 11
75750: PPUSH
75751: CALL_OW 272
75755: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75756: LD_ADDR_VAR 0 8
75760: PUSH
75761: LD_VAR 0 2
75765: PPUSH
75766: LD_VAR 0 6
75770: PPUSH
75771: LD_VAR 0 11
75775: PPUSH
75776: CALL_OW 273
75780: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75781: LD_VAR 0 7
75785: PPUSH
75786: LD_VAR 0 8
75790: PPUSH
75791: CALL_OW 488
75795: NOT
75796: IFFALSE 75800
// continue ;
75798: GO 75728
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75800: LD_ADDR_VAR 0 9
75804: PUSH
75805: LD_VAR 0 12
75809: PUSH
75810: LD_INT 1
75812: ARRAY
75813: PPUSH
75814: LD_VAR 0 12
75818: PUSH
75819: LD_INT 2
75821: ARRAY
75822: PPUSH
75823: LD_VAR 0 7
75827: PPUSH
75828: LD_VAR 0 8
75832: PPUSH
75833: CALL_OW 298
75837: ST_TO_ADDR
// if tmp < distance then
75838: LD_VAR 0 9
75842: PUSH
75843: LD_VAR 0 10
75847: LESS
75848: IFFALSE 75870
// begin result := i ;
75850: LD_ADDR_VAR 0 5
75854: PUSH
75855: LD_VAR 0 6
75859: ST_TO_ADDR
// distance := tmp ;
75860: LD_ADDR_VAR 0 10
75864: PUSH
75865: LD_VAR 0 9
75869: ST_TO_ADDR
// end ; end ;
75870: GO 75728
75872: POP
75873: POP
// end ;
75874: LD_VAR 0 5
75878: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75879: LD_INT 0
75881: PPUSH
75882: PPUSH
// if not driver or not IsInUnit ( driver ) then
75883: LD_VAR 0 1
75887: NOT
75888: PUSH
75889: LD_VAR 0 1
75893: PPUSH
75894: CALL_OW 310
75898: NOT
75899: OR
75900: IFFALSE 75904
// exit ;
75902: GO 75994
// vehicle := IsInUnit ( driver ) ;
75904: LD_ADDR_VAR 0 3
75908: PUSH
75909: LD_VAR 0 1
75913: PPUSH
75914: CALL_OW 310
75918: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75919: LD_VAR 0 1
75923: PPUSH
75924: LD_STRING \
75926: PUSH
75927: LD_INT 0
75929: PUSH
75930: LD_INT 0
75932: PUSH
75933: LD_INT 0
75935: PUSH
75936: LD_INT 0
75938: PUSH
75939: LD_INT 0
75941: PUSH
75942: LD_INT 0
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: LIST
75949: LIST
75950: LIST
75951: LIST
75952: LIST
75953: PUSH
75954: LD_STRING E
75956: PUSH
75957: LD_INT 0
75959: PUSH
75960: LD_INT 0
75962: PUSH
75963: LD_VAR 0 3
75967: PUSH
75968: LD_INT 0
75970: PUSH
75971: LD_INT 0
75973: PUSH
75974: LD_INT 0
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: PUSH
75986: EMPTY
75987: LIST
75988: LIST
75989: PPUSH
75990: CALL_OW 446
// end ;
75994: LD_VAR 0 2
75998: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75999: LD_INT 0
76001: PPUSH
76002: PPUSH
// if not driver or not IsInUnit ( driver ) then
76003: LD_VAR 0 1
76007: NOT
76008: PUSH
76009: LD_VAR 0 1
76013: PPUSH
76014: CALL_OW 310
76018: NOT
76019: OR
76020: IFFALSE 76024
// exit ;
76022: GO 76114
// vehicle := IsInUnit ( driver ) ;
76024: LD_ADDR_VAR 0 3
76028: PUSH
76029: LD_VAR 0 1
76033: PPUSH
76034: CALL_OW 310
76038: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76039: LD_VAR 0 1
76043: PPUSH
76044: LD_STRING \
76046: PUSH
76047: LD_INT 0
76049: PUSH
76050: LD_INT 0
76052: PUSH
76053: LD_INT 0
76055: PUSH
76056: LD_INT 0
76058: PUSH
76059: LD_INT 0
76061: PUSH
76062: LD_INT 0
76064: PUSH
76065: EMPTY
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: PUSH
76074: LD_STRING E
76076: PUSH
76077: LD_INT 0
76079: PUSH
76080: LD_INT 0
76082: PUSH
76083: LD_VAR 0 3
76087: PUSH
76088: LD_INT 0
76090: PUSH
76091: LD_INT 0
76093: PUSH
76094: LD_INT 0
76096: PUSH
76097: EMPTY
76098: LIST
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: LIST
76105: PUSH
76106: EMPTY
76107: LIST
76108: LIST
76109: PPUSH
76110: CALL_OW 447
// end ;
76114: LD_VAR 0 2
76118: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76119: LD_INT 0
76121: PPUSH
76122: PPUSH
76123: PPUSH
// tmp := [ ] ;
76124: LD_ADDR_VAR 0 5
76128: PUSH
76129: EMPTY
76130: ST_TO_ADDR
// for i in units do
76131: LD_ADDR_VAR 0 4
76135: PUSH
76136: LD_VAR 0 1
76140: PUSH
76141: FOR_IN
76142: IFFALSE 76180
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76144: LD_ADDR_VAR 0 5
76148: PUSH
76149: LD_VAR 0 5
76153: PPUSH
76154: LD_VAR 0 5
76158: PUSH
76159: LD_INT 1
76161: PLUS
76162: PPUSH
76163: LD_VAR 0 4
76167: PPUSH
76168: CALL_OW 256
76172: PPUSH
76173: CALL_OW 2
76177: ST_TO_ADDR
76178: GO 76141
76180: POP
76181: POP
// if not tmp then
76182: LD_VAR 0 5
76186: NOT
76187: IFFALSE 76191
// exit ;
76189: GO 76239
// if asc then
76191: LD_VAR 0 2
76195: IFFALSE 76219
// result := SortListByListAsc ( units , tmp ) else
76197: LD_ADDR_VAR 0 3
76201: PUSH
76202: LD_VAR 0 1
76206: PPUSH
76207: LD_VAR 0 5
76211: PPUSH
76212: CALL_OW 76
76216: ST_TO_ADDR
76217: GO 76239
// result := SortListByListDesc ( units , tmp ) ;
76219: LD_ADDR_VAR 0 3
76223: PUSH
76224: LD_VAR 0 1
76228: PPUSH
76229: LD_VAR 0 5
76233: PPUSH
76234: CALL_OW 77
76238: ST_TO_ADDR
// end ;
76239: LD_VAR 0 3
76243: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76244: LD_INT 0
76246: PPUSH
76247: PPUSH
// task := GetTaskList ( mech ) ;
76248: LD_ADDR_VAR 0 4
76252: PUSH
76253: LD_VAR 0 1
76257: PPUSH
76258: CALL_OW 437
76262: ST_TO_ADDR
// if not task then
76263: LD_VAR 0 4
76267: NOT
76268: IFFALSE 76272
// exit ;
76270: GO 76314
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76272: LD_ADDR_VAR 0 3
76276: PUSH
76277: LD_VAR 0 4
76281: PUSH
76282: LD_INT 1
76284: ARRAY
76285: PUSH
76286: LD_INT 1
76288: ARRAY
76289: PUSH
76290: LD_STRING r
76292: EQUAL
76293: PUSH
76294: LD_VAR 0 4
76298: PUSH
76299: LD_INT 1
76301: ARRAY
76302: PUSH
76303: LD_INT 4
76305: ARRAY
76306: PUSH
76307: LD_VAR 0 2
76311: EQUAL
76312: AND
76313: ST_TO_ADDR
// end ;
76314: LD_VAR 0 3
76318: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76319: LD_INT 0
76321: PPUSH
// SetDir ( unit , d ) ;
76322: LD_VAR 0 1
76326: PPUSH
76327: LD_VAR 0 4
76331: PPUSH
76332: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76336: LD_VAR 0 1
76340: PPUSH
76341: LD_VAR 0 2
76345: PPUSH
76346: LD_VAR 0 3
76350: PPUSH
76351: LD_VAR 0 5
76355: PPUSH
76356: CALL_OW 48
// end ;
76360: LD_VAR 0 6
76364: RET
// export function ToNaturalNumber ( number ) ; begin
76365: LD_INT 0
76367: PPUSH
// result := number div 1 ;
76368: LD_ADDR_VAR 0 2
76372: PUSH
76373: LD_VAR 0 1
76377: PUSH
76378: LD_INT 1
76380: DIV
76381: ST_TO_ADDR
// if number < 0 then
76382: LD_VAR 0 1
76386: PUSH
76387: LD_INT 0
76389: LESS
76390: IFFALSE 76400
// result := 0 ;
76392: LD_ADDR_VAR 0 2
76396: PUSH
76397: LD_INT 0
76399: ST_TO_ADDR
// end ;
76400: LD_VAR 0 2
76404: RET
// export function SortByClass ( units , class ) ; var un ; begin
76405: LD_INT 0
76407: PPUSH
76408: PPUSH
// if not units or not class then
76409: LD_VAR 0 1
76413: NOT
76414: PUSH
76415: LD_VAR 0 2
76419: NOT
76420: OR
76421: IFFALSE 76425
// exit ;
76423: GO 76520
// result := [ ] ;
76425: LD_ADDR_VAR 0 3
76429: PUSH
76430: EMPTY
76431: ST_TO_ADDR
// for un in units do
76432: LD_ADDR_VAR 0 4
76436: PUSH
76437: LD_VAR 0 1
76441: PUSH
76442: FOR_IN
76443: IFFALSE 76518
// if GetClass ( un ) = class then
76445: LD_VAR 0 4
76449: PPUSH
76450: CALL_OW 257
76454: PUSH
76455: LD_VAR 0 2
76459: EQUAL
76460: IFFALSE 76487
// result := Insert ( result , 1 , un ) else
76462: LD_ADDR_VAR 0 3
76466: PUSH
76467: LD_VAR 0 3
76471: PPUSH
76472: LD_INT 1
76474: PPUSH
76475: LD_VAR 0 4
76479: PPUSH
76480: CALL_OW 2
76484: ST_TO_ADDR
76485: GO 76516
// result := Replace ( result , result + 1 , un ) ;
76487: LD_ADDR_VAR 0 3
76491: PUSH
76492: LD_VAR 0 3
76496: PPUSH
76497: LD_VAR 0 3
76501: PUSH
76502: LD_INT 1
76504: PLUS
76505: PPUSH
76506: LD_VAR 0 4
76510: PPUSH
76511: CALL_OW 1
76515: ST_TO_ADDR
76516: GO 76442
76518: POP
76519: POP
// end ;
76520: LD_VAR 0 3
76524: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76525: LD_INT 0
76527: PPUSH
76528: PPUSH
76529: PPUSH
76530: PPUSH
76531: PPUSH
76532: PPUSH
76533: PPUSH
// result := [ ] ;
76534: LD_ADDR_VAR 0 4
76538: PUSH
76539: EMPTY
76540: ST_TO_ADDR
// if x - r < 0 then
76541: LD_VAR 0 1
76545: PUSH
76546: LD_VAR 0 3
76550: MINUS
76551: PUSH
76552: LD_INT 0
76554: LESS
76555: IFFALSE 76567
// min_x := 0 else
76557: LD_ADDR_VAR 0 8
76561: PUSH
76562: LD_INT 0
76564: ST_TO_ADDR
76565: GO 76583
// min_x := x - r ;
76567: LD_ADDR_VAR 0 8
76571: PUSH
76572: LD_VAR 0 1
76576: PUSH
76577: LD_VAR 0 3
76581: MINUS
76582: ST_TO_ADDR
// if y - r < 0 then
76583: LD_VAR 0 2
76587: PUSH
76588: LD_VAR 0 3
76592: MINUS
76593: PUSH
76594: LD_INT 0
76596: LESS
76597: IFFALSE 76609
// min_y := 0 else
76599: LD_ADDR_VAR 0 7
76603: PUSH
76604: LD_INT 0
76606: ST_TO_ADDR
76607: GO 76625
// min_y := y - r ;
76609: LD_ADDR_VAR 0 7
76613: PUSH
76614: LD_VAR 0 2
76618: PUSH
76619: LD_VAR 0 3
76623: MINUS
76624: ST_TO_ADDR
// max_x := x + r ;
76625: LD_ADDR_VAR 0 9
76629: PUSH
76630: LD_VAR 0 1
76634: PUSH
76635: LD_VAR 0 3
76639: PLUS
76640: ST_TO_ADDR
// max_y := y + r ;
76641: LD_ADDR_VAR 0 10
76645: PUSH
76646: LD_VAR 0 2
76650: PUSH
76651: LD_VAR 0 3
76655: PLUS
76656: ST_TO_ADDR
// for _x = min_x to max_x do
76657: LD_ADDR_VAR 0 5
76661: PUSH
76662: DOUBLE
76663: LD_VAR 0 8
76667: DEC
76668: ST_TO_ADDR
76669: LD_VAR 0 9
76673: PUSH
76674: FOR_TO
76675: IFFALSE 76776
// for _y = min_y to max_y do
76677: LD_ADDR_VAR 0 6
76681: PUSH
76682: DOUBLE
76683: LD_VAR 0 7
76687: DEC
76688: ST_TO_ADDR
76689: LD_VAR 0 10
76693: PUSH
76694: FOR_TO
76695: IFFALSE 76772
// begin if not ValidHex ( _x , _y ) then
76697: LD_VAR 0 5
76701: PPUSH
76702: LD_VAR 0 6
76706: PPUSH
76707: CALL_OW 488
76711: NOT
76712: IFFALSE 76716
// continue ;
76714: GO 76694
// if GetResourceTypeXY ( _x , _y ) then
76716: LD_VAR 0 5
76720: PPUSH
76721: LD_VAR 0 6
76725: PPUSH
76726: CALL_OW 283
76730: IFFALSE 76770
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76732: LD_ADDR_VAR 0 4
76736: PUSH
76737: LD_VAR 0 4
76741: PPUSH
76742: LD_VAR 0 4
76746: PUSH
76747: LD_INT 1
76749: PLUS
76750: PPUSH
76751: LD_VAR 0 5
76755: PUSH
76756: LD_VAR 0 6
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PPUSH
76765: CALL_OW 1
76769: ST_TO_ADDR
// end ;
76770: GO 76694
76772: POP
76773: POP
76774: GO 76674
76776: POP
76777: POP
// end ;
76778: LD_VAR 0 4
76782: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76783: LD_INT 0
76785: PPUSH
76786: PPUSH
76787: PPUSH
76788: PPUSH
76789: PPUSH
76790: PPUSH
76791: PPUSH
76792: PPUSH
// if not units then
76793: LD_VAR 0 1
76797: NOT
76798: IFFALSE 76802
// exit ;
76800: GO 77313
// result := UnitFilter ( units , [ f_ok ] ) ;
76802: LD_ADDR_VAR 0 3
76806: PUSH
76807: LD_VAR 0 1
76811: PPUSH
76812: LD_INT 50
76814: PUSH
76815: EMPTY
76816: LIST
76817: PPUSH
76818: CALL_OW 72
76822: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76823: LD_ADDR_VAR 0 8
76827: PUSH
76828: LD_VAR 0 1
76832: PUSH
76833: LD_INT 1
76835: ARRAY
76836: PPUSH
76837: CALL_OW 255
76841: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76842: LD_ADDR_VAR 0 10
76846: PUSH
76847: LD_INT 29
76849: PUSH
76850: LD_EXP 36
76854: PUSH
76855: LD_INT 49
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: LIST
76862: ST_TO_ADDR
// if not result then
76863: LD_VAR 0 3
76867: NOT
76868: IFFALSE 76872
// exit ;
76870: GO 77313
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76872: LD_ADDR_VAR 0 5
76876: PUSH
76877: LD_INT 81
76879: PUSH
76880: LD_VAR 0 8
76884: PUSH
76885: EMPTY
76886: LIST
76887: LIST
76888: PPUSH
76889: CALL_OW 69
76893: ST_TO_ADDR
// for i in result do
76894: LD_ADDR_VAR 0 4
76898: PUSH
76899: LD_VAR 0 3
76903: PUSH
76904: FOR_IN
76905: IFFALSE 77311
// begin tag := GetTag ( i ) + 1 ;
76907: LD_ADDR_VAR 0 9
76911: PUSH
76912: LD_VAR 0 4
76916: PPUSH
76917: CALL_OW 110
76921: PUSH
76922: LD_INT 1
76924: PLUS
76925: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76926: LD_ADDR_VAR 0 7
76930: PUSH
76931: LD_VAR 0 4
76935: PPUSH
76936: CALL_OW 250
76940: PPUSH
76941: LD_VAR 0 4
76945: PPUSH
76946: CALL_OW 251
76950: PPUSH
76951: LD_INT 6
76953: PPUSH
76954: CALL 76525 0 3
76958: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76959: LD_VAR 0 7
76963: PUSH
76964: LD_VAR 0 4
76968: PPUSH
76969: CALL_OW 264
76973: PUSH
76974: LD_VAR 0 10
76978: IN
76979: NOT
76980: AND
76981: IFFALSE 77020
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76983: LD_VAR 0 4
76987: PPUSH
76988: LD_VAR 0 7
76992: PUSH
76993: LD_INT 1
76995: ARRAY
76996: PUSH
76997: LD_INT 1
76999: ARRAY
77000: PPUSH
77001: LD_VAR 0 7
77005: PUSH
77006: LD_INT 1
77008: ARRAY
77009: PUSH
77010: LD_INT 2
77012: ARRAY
77013: PPUSH
77014: CALL_OW 116
77018: GO 77309
// if path > tag then
77020: LD_VAR 0 2
77024: PUSH
77025: LD_VAR 0 9
77029: GREATER
77030: IFFALSE 77238
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77032: LD_ADDR_VAR 0 6
77036: PUSH
77037: LD_VAR 0 5
77041: PPUSH
77042: LD_INT 91
77044: PUSH
77045: LD_VAR 0 4
77049: PUSH
77050: LD_INT 12
77052: PUSH
77053: EMPTY
77054: LIST
77055: LIST
77056: LIST
77057: PPUSH
77058: CALL_OW 72
77062: ST_TO_ADDR
// if nearEnemy then
77063: LD_VAR 0 6
77067: IFFALSE 77136
// begin if GetWeapon ( i ) = ru_time_lapser then
77069: LD_VAR 0 4
77073: PPUSH
77074: CALL_OW 264
77078: PUSH
77079: LD_INT 49
77081: EQUAL
77082: IFFALSE 77110
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77084: LD_VAR 0 4
77088: PPUSH
77089: LD_VAR 0 6
77093: PPUSH
77094: LD_VAR 0 4
77098: PPUSH
77099: CALL_OW 74
77103: PPUSH
77104: CALL_OW 112
77108: GO 77134
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77110: LD_VAR 0 4
77114: PPUSH
77115: LD_VAR 0 6
77119: PPUSH
77120: LD_VAR 0 4
77124: PPUSH
77125: CALL_OW 74
77129: PPUSH
77130: CALL_OW 115
// end else
77134: GO 77236
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77136: LD_VAR 0 4
77140: PPUSH
77141: LD_VAR 0 2
77145: PUSH
77146: LD_VAR 0 9
77150: ARRAY
77151: PUSH
77152: LD_INT 1
77154: ARRAY
77155: PPUSH
77156: LD_VAR 0 2
77160: PUSH
77161: LD_VAR 0 9
77165: ARRAY
77166: PUSH
77167: LD_INT 2
77169: ARRAY
77170: PPUSH
77171: CALL_OW 297
77175: PUSH
77176: LD_INT 6
77178: GREATER
77179: IFFALSE 77222
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77181: LD_VAR 0 4
77185: PPUSH
77186: LD_VAR 0 2
77190: PUSH
77191: LD_VAR 0 9
77195: ARRAY
77196: PUSH
77197: LD_INT 1
77199: ARRAY
77200: PPUSH
77201: LD_VAR 0 2
77205: PUSH
77206: LD_VAR 0 9
77210: ARRAY
77211: PUSH
77212: LD_INT 2
77214: ARRAY
77215: PPUSH
77216: CALL_OW 114
77220: GO 77236
// SetTag ( i , tag ) ;
77222: LD_VAR 0 4
77226: PPUSH
77227: LD_VAR 0 9
77231: PPUSH
77232: CALL_OW 109
// end else
77236: GO 77309
// if enemy then
77238: LD_VAR 0 5
77242: IFFALSE 77309
// begin if GetWeapon ( i ) = ru_time_lapser then
77244: LD_VAR 0 4
77248: PPUSH
77249: CALL_OW 264
77253: PUSH
77254: LD_INT 49
77256: EQUAL
77257: IFFALSE 77285
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77259: LD_VAR 0 4
77263: PPUSH
77264: LD_VAR 0 5
77268: PPUSH
77269: LD_VAR 0 4
77273: PPUSH
77274: CALL_OW 74
77278: PPUSH
77279: CALL_OW 112
77283: GO 77309
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77285: LD_VAR 0 4
77289: PPUSH
77290: LD_VAR 0 5
77294: PPUSH
77295: LD_VAR 0 4
77299: PPUSH
77300: CALL_OW 74
77304: PPUSH
77305: CALL_OW 115
// end ; end ;
77309: GO 76904
77311: POP
77312: POP
// end ;
77313: LD_VAR 0 3
77317: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77318: LD_INT 0
77320: PPUSH
77321: PPUSH
77322: PPUSH
// if not unit or IsInUnit ( unit ) then
77323: LD_VAR 0 1
77327: NOT
77328: PUSH
77329: LD_VAR 0 1
77333: PPUSH
77334: CALL_OW 310
77338: OR
77339: IFFALSE 77343
// exit ;
77341: GO 77434
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77343: LD_ADDR_VAR 0 4
77347: PUSH
77348: LD_VAR 0 1
77352: PPUSH
77353: CALL_OW 250
77357: PPUSH
77358: LD_VAR 0 2
77362: PPUSH
77363: LD_INT 1
77365: PPUSH
77366: CALL_OW 272
77370: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77371: LD_ADDR_VAR 0 5
77375: PUSH
77376: LD_VAR 0 1
77380: PPUSH
77381: CALL_OW 251
77385: PPUSH
77386: LD_VAR 0 2
77390: PPUSH
77391: LD_INT 1
77393: PPUSH
77394: CALL_OW 273
77398: ST_TO_ADDR
// if ValidHex ( x , y ) then
77399: LD_VAR 0 4
77403: PPUSH
77404: LD_VAR 0 5
77408: PPUSH
77409: CALL_OW 488
77413: IFFALSE 77434
// ComTurnXY ( unit , x , y ) ;
77415: LD_VAR 0 1
77419: PPUSH
77420: LD_VAR 0 4
77424: PPUSH
77425: LD_VAR 0 5
77429: PPUSH
77430: CALL_OW 118
// end ;
77434: LD_VAR 0 3
77438: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77439: LD_INT 0
77441: PPUSH
77442: PPUSH
// result := false ;
77443: LD_ADDR_VAR 0 3
77447: PUSH
77448: LD_INT 0
77450: ST_TO_ADDR
// if not units then
77451: LD_VAR 0 2
77455: NOT
77456: IFFALSE 77460
// exit ;
77458: GO 77505
// for i in units do
77460: LD_ADDR_VAR 0 4
77464: PUSH
77465: LD_VAR 0 2
77469: PUSH
77470: FOR_IN
77471: IFFALSE 77503
// if See ( side , i ) then
77473: LD_VAR 0 1
77477: PPUSH
77478: LD_VAR 0 4
77482: PPUSH
77483: CALL_OW 292
77487: IFFALSE 77501
// begin result := true ;
77489: LD_ADDR_VAR 0 3
77493: PUSH
77494: LD_INT 1
77496: ST_TO_ADDR
// exit ;
77497: POP
77498: POP
77499: GO 77505
// end ;
77501: GO 77470
77503: POP
77504: POP
// end ;
77505: LD_VAR 0 3
77509: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77510: LD_INT 0
77512: PPUSH
77513: PPUSH
77514: PPUSH
77515: PPUSH
// if not unit or not points then
77516: LD_VAR 0 1
77520: NOT
77521: PUSH
77522: LD_VAR 0 2
77526: NOT
77527: OR
77528: IFFALSE 77532
// exit ;
77530: GO 77622
// dist := 99999 ;
77532: LD_ADDR_VAR 0 5
77536: PUSH
77537: LD_INT 99999
77539: ST_TO_ADDR
// for i in points do
77540: LD_ADDR_VAR 0 4
77544: PUSH
77545: LD_VAR 0 2
77549: PUSH
77550: FOR_IN
77551: IFFALSE 77620
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77553: LD_ADDR_VAR 0 6
77557: PUSH
77558: LD_VAR 0 1
77562: PPUSH
77563: LD_VAR 0 4
77567: PUSH
77568: LD_INT 1
77570: ARRAY
77571: PPUSH
77572: LD_VAR 0 4
77576: PUSH
77577: LD_INT 2
77579: ARRAY
77580: PPUSH
77581: CALL_OW 297
77585: ST_TO_ADDR
// if tmpDist < dist then
77586: LD_VAR 0 6
77590: PUSH
77591: LD_VAR 0 5
77595: LESS
77596: IFFALSE 77618
// begin result := i ;
77598: LD_ADDR_VAR 0 3
77602: PUSH
77603: LD_VAR 0 4
77607: ST_TO_ADDR
// dist := tmpDist ;
77608: LD_ADDR_VAR 0 5
77612: PUSH
77613: LD_VAR 0 6
77617: ST_TO_ADDR
// end ; end ;
77618: GO 77550
77620: POP
77621: POP
// end ;
77622: LD_VAR 0 3
77626: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77627: LD_INT 0
77629: PPUSH
// uc_side := side ;
77630: LD_ADDR_OWVAR 20
77634: PUSH
77635: LD_VAR 0 1
77639: ST_TO_ADDR
// uc_nation := 3 ;
77640: LD_ADDR_OWVAR 21
77644: PUSH
77645: LD_INT 3
77647: ST_TO_ADDR
// vc_chassis := 25 ;
77648: LD_ADDR_OWVAR 37
77652: PUSH
77653: LD_INT 25
77655: ST_TO_ADDR
// vc_engine := engine_siberite ;
77656: LD_ADDR_OWVAR 39
77660: PUSH
77661: LD_INT 3
77663: ST_TO_ADDR
// vc_control := control_computer ;
77664: LD_ADDR_OWVAR 38
77668: PUSH
77669: LD_INT 3
77671: ST_TO_ADDR
// vc_weapon := 59 ;
77672: LD_ADDR_OWVAR 40
77676: PUSH
77677: LD_INT 59
77679: ST_TO_ADDR
// result := CreateVehicle ;
77680: LD_ADDR_VAR 0 5
77684: PUSH
77685: CALL_OW 45
77689: ST_TO_ADDR
// SetDir ( result , d ) ;
77690: LD_VAR 0 5
77694: PPUSH
77695: LD_VAR 0 4
77699: PPUSH
77700: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77704: LD_VAR 0 5
77708: PPUSH
77709: LD_VAR 0 2
77713: PPUSH
77714: LD_VAR 0 3
77718: PPUSH
77719: LD_INT 0
77721: PPUSH
77722: CALL_OW 48
// end ;
77726: LD_VAR 0 5
77730: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77731: LD_INT 0
77733: PPUSH
77734: PPUSH
77735: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77736: LD_ADDR_VAR 0 2
77740: PUSH
77741: LD_INT 0
77743: PUSH
77744: LD_INT 0
77746: PUSH
77747: LD_INT 0
77749: PUSH
77750: LD_INT 0
77752: PUSH
77753: EMPTY
77754: LIST
77755: LIST
77756: LIST
77757: LIST
77758: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77759: LD_VAR 0 1
77763: NOT
77764: PUSH
77765: LD_VAR 0 1
77769: PPUSH
77770: CALL_OW 264
77774: PUSH
77775: LD_INT 12
77777: PUSH
77778: LD_INT 51
77780: PUSH
77781: LD_INT 32
77783: PUSH
77784: LD_EXP 33
77788: PUSH
77789: EMPTY
77790: LIST
77791: LIST
77792: LIST
77793: LIST
77794: IN
77795: NOT
77796: OR
77797: IFFALSE 77801
// exit ;
77799: GO 77899
// for i := 1 to 3 do
77801: LD_ADDR_VAR 0 3
77805: PUSH
77806: DOUBLE
77807: LD_INT 1
77809: DEC
77810: ST_TO_ADDR
77811: LD_INT 3
77813: PUSH
77814: FOR_TO
77815: IFFALSE 77897
// begin tmp := GetCargo ( cargo , i ) ;
77817: LD_ADDR_VAR 0 4
77821: PUSH
77822: LD_VAR 0 1
77826: PPUSH
77827: LD_VAR 0 3
77831: PPUSH
77832: CALL_OW 289
77836: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77837: LD_ADDR_VAR 0 2
77841: PUSH
77842: LD_VAR 0 2
77846: PPUSH
77847: LD_VAR 0 3
77851: PPUSH
77852: LD_VAR 0 4
77856: PPUSH
77857: CALL_OW 1
77861: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77862: LD_ADDR_VAR 0 2
77866: PUSH
77867: LD_VAR 0 2
77871: PPUSH
77872: LD_INT 4
77874: PPUSH
77875: LD_VAR 0 2
77879: PUSH
77880: LD_INT 4
77882: ARRAY
77883: PUSH
77884: LD_VAR 0 4
77888: PLUS
77889: PPUSH
77890: CALL_OW 1
77894: ST_TO_ADDR
// end ;
77895: GO 77814
77897: POP
77898: POP
// end ; end_of_file
77899: LD_VAR 0 2
77903: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77904: LD_VAR 0 1
77908: PUSH
77909: LD_INT 200
77911: DOUBLE
77912: GREATEREQUAL
77913: IFFALSE 77921
77915: LD_INT 299
77917: DOUBLE
77918: LESSEQUAL
77919: IFTRUE 77923
77921: GO 77955
77923: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77924: LD_VAR 0 1
77928: PPUSH
77929: LD_VAR 0 2
77933: PPUSH
77934: LD_VAR 0 3
77938: PPUSH
77939: LD_VAR 0 4
77943: PPUSH
77944: LD_VAR 0 5
77948: PPUSH
77949: CALL 33244 0 5
77953: GO 78032
77955: LD_INT 300
77957: DOUBLE
77958: GREATEREQUAL
77959: IFFALSE 77967
77961: LD_INT 399
77963: DOUBLE
77964: LESSEQUAL
77965: IFTRUE 77969
77967: GO 78031
77969: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77970: LD_VAR 0 1
77974: PPUSH
77975: LD_VAR 0 2
77979: PPUSH
77980: LD_VAR 0 3
77984: PPUSH
77985: LD_VAR 0 4
77989: PPUSH
77990: LD_VAR 0 5
77994: PPUSH
77995: LD_VAR 0 6
77999: PPUSH
78000: LD_VAR 0 7
78004: PPUSH
78005: LD_VAR 0 8
78009: PPUSH
78010: LD_VAR 0 9
78014: PPUSH
78015: LD_VAR 0 10
78019: PPUSH
78020: LD_VAR 0 11
78024: PPUSH
78025: CALL 30886 0 11
78029: GO 78032
78031: POP
// end ;
78032: PPOPN 11
78034: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78035: LD_VAR 0 1
78039: PPUSH
78040: LD_VAR 0 2
78044: PPUSH
78045: LD_VAR 0 3
78049: PPUSH
78050: LD_VAR 0 4
78054: PPUSH
78055: LD_VAR 0 5
78059: PPUSH
78060: CALL 32980 0 5
// end ; end_of_file
78064: PPOPN 5
78066: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78067: LD_VAR 0 1
78071: PPUSH
78072: LD_VAR 0 2
78076: PPUSH
78077: LD_VAR 0 3
78081: PPUSH
78082: LD_VAR 0 4
78086: PPUSH
78087: LD_VAR 0 5
78091: PPUSH
78092: LD_VAR 0 6
78096: PPUSH
78097: CALL 18579 0 6
// end ;
78101: PPOPN 6
78103: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78104: LD_INT 0
78106: PPUSH
// begin if not units then
78107: LD_VAR 0 1
78111: NOT
78112: IFFALSE 78116
// exit ;
78114: GO 78204
// if p1 = 1 then
78116: LD_VAR 0 2
78120: PUSH
78121: LD_INT 1
78123: EQUAL
78124: IFFALSE 78204
// begin if p2 = 1 then
78126: LD_VAR 0 3
78130: PUSH
78131: LD_INT 1
78133: EQUAL
78134: IFFALSE 78165
// begin for i in units do
78136: LD_ADDR_VAR 0 7
78140: PUSH
78141: LD_VAR 0 1
78145: PUSH
78146: FOR_IN
78147: IFFALSE 78163
// begin SetUnitAttackType ( i , 3 ) ;
78149: LD_VAR 0 7
78153: PPUSH
78154: LD_INT 3
78156: PPUSH
78157: CALL_OW 603
// end ;
78161: GO 78146
78163: POP
78164: POP
// end ; if p2 = 2 then
78165: LD_VAR 0 3
78169: PUSH
78170: LD_INT 2
78172: EQUAL
78173: IFFALSE 78204
// begin for i in units do
78175: LD_ADDR_VAR 0 7
78179: PUSH
78180: LD_VAR 0 1
78184: PUSH
78185: FOR_IN
78186: IFFALSE 78202
// begin SetUnitAttackType ( i , 1 ) ;
78188: LD_VAR 0 7
78192: PPUSH
78193: LD_INT 1
78195: PPUSH
78196: CALL_OW 603
// end ;
78200: GO 78185
78202: POP
78203: POP
// end ; end ; end ;
78204: PPOPN 7
78206: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78207: CALL 18554 0 0
// end ;
78211: PPOPN 1
78213: END
