// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 225 0 0
// PrepareRussian ;
  23: CALL 8284 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 72400 0 9
// Action ;
  79: CALL 13843 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 10
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 5
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 6
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 7
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 8
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 9
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// end ;
 175: LD_VAR 0 1
 179: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 180: LD_INT 22
 182: PUSH
 183: LD_INT 1
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 34
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: PPUSH
 204: CALL_OW 69
 208: PUSH
 209: LD_INT 6
 211: GREATEREQUAL
 212: IFFALSE 224
 214: GO 216
 216: DISABLE
// SetAchievement ( ACH_ARMOR ) ; end_of_file
 217: LD_STRING ACH_ARMOR
 219: PPUSH
 220: CALL_OW 543
 224: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 225: LD_INT 0
 227: PPUSH
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
// uc_side := 1 ;
 243: LD_ADDR_OWVAR 20
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// uc_nation := 1 ;
 251: LD_ADDR_OWVAR 21
 255: PUSH
 256: LD_INT 1
 258: ST_TO_ADDR
// PrepareGammaBase ;
 259: CALL 2420 0 0
// x := 52 ;
 263: LD_ADDR_VAR 0 13
 267: PUSH
 268: LD_INT 52
 270: ST_TO_ADDR
// y := 16 ;
 271: LD_ADDR_VAR 0 14
 275: PUSH
 276: LD_INT 16
 278: ST_TO_ADDR
// case gammaCommander of 1 :
 279: LD_EXP 10
 283: PUSH
 284: LD_INT 1
 286: DOUBLE
 287: EQUAL
 288: IFTRUE 292
 290: GO 377
 292: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 293: LD_ADDR_EXP 13
 297: PUSH
 298: LD_STRING Donaldson
 300: PPUSH
 301: LD_INT 1
 303: PPUSH
 304: LD_STRING 04_
 306: PPUSH
 307: CALL 38342 0 3
 311: ST_TO_ADDR
// if HexInfo ( x , y ) then
 312: LD_VAR 0 13
 316: PPUSH
 317: LD_VAR 0 14
 321: PPUSH
 322: CALL_OW 428
 326: IFFALSE 344
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 328: LD_EXP 13
 332: PPUSH
 333: LD_EXP 27
 337: PPUSH
 338: CALL_OW 52
 342: GO 366
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 344: LD_EXP 13
 348: PPUSH
 349: LD_VAR 0 13
 353: PPUSH
 354: LD_VAR 0 14
 358: PPUSH
 359: LD_INT 0
 361: PPUSH
 362: CALL_OW 48
// ComHold ( Donaldson ) ;
 366: LD_EXP 13
 370: PPUSH
 371: CALL_OW 140
// end ; 2 :
 375: GO 564
 377: LD_INT 2
 379: DOUBLE
 380: EQUAL
 381: IFTRUE 385
 383: GO 470
 385: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 386: LD_ADDR_EXP 12
 390: PUSH
 391: LD_STRING Brown
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: LD_STRING 04_
 399: PPUSH
 400: CALL 38342 0 3
 404: ST_TO_ADDR
// if HexInfo ( x , y ) then
 405: LD_VAR 0 13
 409: PPUSH
 410: LD_VAR 0 14
 414: PPUSH
 415: CALL_OW 428
 419: IFFALSE 437
// PlaceHumanInUnit ( Brown , amDepot ) else
 421: LD_EXP 12
 425: PPUSH
 426: LD_EXP 27
 430: PPUSH
 431: CALL_OW 52
 435: GO 459
// PlaceUnitXY ( Brown , x , y , false ) ;
 437: LD_EXP 12
 441: PPUSH
 442: LD_VAR 0 13
 446: PPUSH
 447: LD_VAR 0 14
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL_OW 48
// ComHold ( Brown ) ;
 459: LD_EXP 12
 463: PPUSH
 464: CALL_OW 140
// end ; 3 :
 468: GO 564
 470: LD_INT 3
 472: DOUBLE
 473: EQUAL
 474: IFTRUE 478
 476: GO 563
 478: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 479: LD_ADDR_EXP 21
 483: PUSH
 484: LD_STRING VanHouten
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_STRING 
 492: PPUSH
 493: CALL 38342 0 3
 497: ST_TO_ADDR
// if HexInfo ( x , y ) then
 498: LD_VAR 0 13
 502: PPUSH
 503: LD_VAR 0 14
 507: PPUSH
 508: CALL_OW 428
 512: IFFALSE 530
// PlaceHumanInUnit ( Houten , amDepot ) else
 514: LD_EXP 21
 518: PPUSH
 519: LD_EXP 27
 523: PPUSH
 524: CALL_OW 52
 528: GO 552
// PlaceUnitXY ( Houten , x , y , false ) ;
 530: LD_EXP 21
 534: PPUSH
 535: LD_VAR 0 13
 539: PPUSH
 540: LD_VAR 0 14
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL_OW 48
// ComHold ( Houten ) ;
 552: LD_EXP 21
 556: PPUSH
 557: CALL_OW 140
// end ; end ;
 561: GO 564
 563: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 564: LD_ADDR_EXP 25
 568: PUSH
 569: LD_STRING Harisson
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: LD_STRING 
 577: PPUSH
 578: CALL 38342 0 3
 582: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 583: LD_ADDR_EXP 26
 587: PUSH
 588: LD_STRING Powell
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: LD_STRING 
 596: PPUSH
 597: CALL 38342 0 3
 601: ST_TO_ADDR
// tmp := [ ] ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: EMPTY
 608: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 609: LD_STRING 04_Lisa
 611: PUSH
 612: EMPTY
 613: LIST
 614: PPUSH
 615: CALL_OW 28
 619: PUSH
 620: LD_STRING LisaInDelta
 622: PPUSH
 623: LD_INT 0
 625: PPUSH
 626: CALL_OW 30
 630: NOT
 631: AND
 632: PUSH
 633: LD_STRING 07_Lisa
 635: PUSH
 636: EMPTY
 637: LIST
 638: PPUSH
 639: CALL_OW 28
 643: NOT
 644: AND
 645: IFFALSE 688
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 647: LD_ADDR_EXP 16
 651: PUSH
 652: LD_STRING Lisa
 654: PPUSH
 655: LD_INT 1
 657: PPUSH
 658: LD_STRING 04_
 660: PPUSH
 661: CALL 38342 0 3
 665: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 666: LD_ADDR_VAR 0 5
 670: PUSH
 671: LD_VAR 0 5
 675: PPUSH
 676: LD_EXP 16
 680: PPUSH
 681: CALL 75718 0 2
 685: ST_TO_ADDR
// end else
 686: GO 747
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 688: LD_EXP 16
 692: NOT
 693: PUSH
 694: LD_STRING LisaIn07
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 30
 704: NOT
 705: AND
 706: IFFALSE 747
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 708: LD_ADDR_EXP 16
 712: PUSH
 713: LD_STRING Lisa
 715: PPUSH
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING 07_
 721: PPUSH
 722: CALL 38342 0 3
 726: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 727: LD_ADDR_VAR 0 5
 731: PUSH
 732: LD_VAR 0 5
 736: PPUSH
 737: LD_EXP 16
 741: PPUSH
 742: CALL 75718 0 2
 746: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 747: LD_STRING 04_Bobby
 749: PUSH
 750: EMPTY
 751: LIST
 752: PPUSH
 753: CALL_OW 28
 757: PUSH
 758: LD_STRING BobbyInDelta
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: NOT
 769: AND
 770: PUSH
 771: LD_STRING 07_Bobby
 773: PUSH
 774: EMPTY
 775: LIST
 776: PPUSH
 777: CALL_OW 28
 781: NOT
 782: AND
 783: IFFALSE 826
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 785: LD_ADDR_EXP 14
 789: PUSH
 790: LD_STRING Bobby
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: LD_STRING 04_
 798: PPUSH
 799: CALL 38342 0 3
 803: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 804: LD_ADDR_VAR 0 5
 808: PUSH
 809: LD_VAR 0 5
 813: PPUSH
 814: LD_EXP 14
 818: PPUSH
 819: CALL 75718 0 2
 823: ST_TO_ADDR
// end else
 824: GO 885
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 826: LD_EXP 14
 830: NOT
 831: PUSH
 832: LD_STRING BobbyIn07
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: CALL_OW 30
 842: NOT
 843: AND
 844: IFFALSE 885
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 846: LD_ADDR_EXP 14
 850: PUSH
 851: LD_STRING Bobby
 853: PPUSH
 854: LD_INT 1
 856: PPUSH
 857: LD_STRING 07_
 859: PPUSH
 860: CALL 38342 0 3
 864: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 865: LD_ADDR_VAR 0 5
 869: PUSH
 870: LD_VAR 0 5
 874: PPUSH
 875: LD_EXP 14
 879: PPUSH
 880: CALL 75718 0 2
 884: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 885: LD_STRING 04_Cyrus
 887: PUSH
 888: EMPTY
 889: LIST
 890: PPUSH
 891: CALL_OW 28
 895: PUSH
 896: LD_STRING CyrusInDelta
 898: PPUSH
 899: LD_INT 0
 901: PPUSH
 902: CALL_OW 30
 906: NOT
 907: AND
 908: PUSH
 909: LD_STRING 07_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: NOT
 920: AND
 921: IFFALSE 964
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
 923: LD_ADDR_EXP 15
 927: PUSH
 928: LD_STRING Cyrus
 930: PPUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_STRING 04_
 936: PPUSH
 937: CALL 38342 0 3
 941: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 942: LD_ADDR_VAR 0 5
 946: PUSH
 947: LD_VAR 0 5
 951: PPUSH
 952: LD_EXP 15
 956: PPUSH
 957: CALL 75718 0 2
 961: ST_TO_ADDR
// end else
 962: GO 1023
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
 964: LD_EXP 15
 968: NOT
 969: PUSH
 970: LD_STRING CyrusIn07
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: CALL_OW 30
 980: NOT
 981: AND
 982: IFFALSE 1023
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 984: LD_ADDR_EXP 15
 988: PUSH
 989: LD_STRING Cyrus
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: LD_STRING 07_
 997: PPUSH
 998: CALL 38342 0 3
1002: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
1003: LD_ADDR_VAR 0 5
1007: PUSH
1008: LD_VAR 0 5
1012: PPUSH
1013: LD_EXP 15
1017: PPUSH
1018: CALL 75718 0 2
1022: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1023: LD_STRING 04_Brown
1025: PUSH
1026: EMPTY
1027: LIST
1028: PPUSH
1029: CALL_OW 28
1033: PUSH
1034: LD_STRING BrownInDelta
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 30
1044: NOT
1045: AND
1046: PUSH
1047: LD_STRING 07_Brown
1049: PUSH
1050: EMPTY
1051: LIST
1052: PPUSH
1053: CALL_OW 28
1057: NOT
1058: AND
1059: PUSH
1060: LD_EXP 10
1064: PUSH
1065: LD_INT 2
1067: NONEQUAL
1068: AND
1069: IFFALSE 1112
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1071: LD_ADDR_EXP 12
1075: PUSH
1076: LD_STRING Brown
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_STRING 04_
1084: PPUSH
1085: CALL 38342 0 3
1089: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1090: LD_ADDR_VAR 0 5
1094: PUSH
1095: LD_VAR 0 5
1099: PPUSH
1100: LD_EXP 12
1104: PPUSH
1105: CALL 75718 0 2
1109: ST_TO_ADDR
// end else
1110: GO 1181
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1112: LD_EXP 12
1116: NOT
1117: PUSH
1118: LD_STRING BrownIn07
1120: PPUSH
1121: LD_INT 0
1123: PPUSH
1124: CALL_OW 30
1128: NOT
1129: AND
1130: PUSH
1131: LD_EXP 10
1135: PUSH
1136: LD_INT 2
1138: NONEQUAL
1139: AND
1140: IFFALSE 1181
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1142: LD_ADDR_EXP 12
1146: PUSH
1147: LD_STRING Brown
1149: PPUSH
1150: LD_INT 1
1152: PPUSH
1153: LD_STRING 07_
1155: PPUSH
1156: CALL 38342 0 3
1160: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1161: LD_ADDR_VAR 0 5
1165: PUSH
1166: LD_VAR 0 5
1170: PPUSH
1171: LD_EXP 12
1175: PPUSH
1176: CALL 75718 0 2
1180: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1181: LD_STRING 04_Donaldson
1183: PUSH
1184: EMPTY
1185: LIST
1186: PPUSH
1187: CALL_OW 28
1191: PUSH
1192: LD_STRING DonaldsonInDelta
1194: PPUSH
1195: LD_INT 0
1197: PPUSH
1198: CALL_OW 30
1202: NOT
1203: AND
1204: PUSH
1205: LD_STRING 07_Donaldson
1207: PUSH
1208: EMPTY
1209: LIST
1210: PPUSH
1211: CALL_OW 28
1215: NOT
1216: AND
1217: PUSH
1218: LD_EXP 10
1222: PUSH
1223: LD_INT 1
1225: NONEQUAL
1226: AND
1227: IFFALSE 1270
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1229: LD_ADDR_EXP 13
1233: PUSH
1234: LD_STRING Donaldson
1236: PPUSH
1237: LD_INT 1
1239: PPUSH
1240: LD_STRING 04_
1242: PPUSH
1243: CALL 38342 0 3
1247: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1248: LD_ADDR_VAR 0 5
1252: PUSH
1253: LD_VAR 0 5
1257: PPUSH
1258: LD_EXP 13
1262: PPUSH
1263: CALL 75718 0 2
1267: ST_TO_ADDR
// end else
1268: GO 1339
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1270: LD_EXP 13
1274: NOT
1275: PUSH
1276: LD_STRING DonaldsonIn07
1278: PPUSH
1279: LD_INT 0
1281: PPUSH
1282: CALL_OW 30
1286: NOT
1287: AND
1288: PUSH
1289: LD_EXP 10
1293: PUSH
1294: LD_INT 1
1296: NONEQUAL
1297: AND
1298: IFFALSE 1339
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1300: LD_ADDR_EXP 13
1304: PUSH
1305: LD_STRING Donaldson
1307: PPUSH
1308: LD_INT 1
1310: PPUSH
1311: LD_STRING 07_
1313: PPUSH
1314: CALL 38342 0 3
1318: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1319: LD_ADDR_VAR 0 5
1323: PUSH
1324: LD_VAR 0 5
1328: PPUSH
1329: LD_EXP 13
1333: PPUSH
1334: CALL 75718 0 2
1338: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1339: LD_STRING KhatamIn07
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: CALL_OW 30
1349: NOT
1350: IFFALSE 1391
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1352: LD_ADDR_EXP 20
1356: PUSH
1357: LD_STRING Khatam
1359: PPUSH
1360: LD_INT 1
1362: PPUSH
1363: LD_STRING 07_
1365: PPUSH
1366: CALL 38342 0 3
1370: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1371: LD_ADDR_VAR 0 5
1375: PUSH
1376: LD_VAR 0 5
1380: PPUSH
1381: LD_EXP 20
1385: PPUSH
1386: CALL 75718 0 2
1390: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1391: LD_ADDR_VAR 0 6
1395: PUSH
1396: LD_STRING 07_othersGamma
1398: PPUSH
1399: CALL_OW 31
1403: ST_TO_ADDR
// tmp := 5 - others ;
1404: LD_ADDR_VAR 0 4
1408: PUSH
1409: LD_INT 5
1411: PUSH
1412: LD_VAR 0 6
1416: MINUS
1417: ST_TO_ADDR
// if tmp then
1418: LD_VAR 0 4
1422: IFFALSE 1479
// for i := tmp downto 1 do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: DOUBLE
1430: LD_VAR 0 4
1434: INC
1435: ST_TO_ADDR
1436: LD_INT 1
1438: PUSH
1439: FOR_DOWNTO
1440: IFFALSE 1477
// begin PrepareHuman ( false , 1 , 5 ) ;
1442: LD_INT 0
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1455: LD_ADDR_VAR 0 6
1459: PUSH
1460: LD_VAR 0 6
1464: PPUSH
1465: CALL_OW 44
1469: PPUSH
1470: CALL 75718 0 2
1474: ST_TO_ADDR
// end ;
1475: GO 1439
1477: POP
1478: POP
// for i in others do
1479: LD_ADDR_VAR 0 2
1483: PUSH
1484: LD_VAR 0 6
1488: PUSH
1489: FOR_IN
1490: IFFALSE 1506
// SetTag ( i , 106 ) ;
1492: LD_VAR 0 2
1496: PPUSH
1497: LD_INT 106
1499: PPUSH
1500: CALL_OW 109
1504: GO 1489
1506: POP
1507: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1508: LD_ADDR_VAR 0 8
1512: PUSH
1513: LD_INT 22
1515: PUSH
1516: LD_INT 1
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 30
1525: PUSH
1526: LD_INT 31
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PPUSH
1537: CALL_OW 69
1541: ST_TO_ADDR
// for i in bun do
1542: LD_ADDR_VAR 0 2
1546: PUSH
1547: LD_VAR 0 8
1551: PUSH
1552: FOR_IN
1553: IFFALSE 1685
// begin x := GetX ( i ) ;
1555: LD_ADDR_VAR 0 13
1559: PUSH
1560: LD_VAR 0 2
1564: PPUSH
1565: CALL_OW 250
1569: ST_TO_ADDR
// y := GetY ( i ) ;
1570: LD_ADDR_VAR 0 14
1574: PUSH
1575: LD_VAR 0 2
1579: PPUSH
1580: CALL_OW 251
1584: ST_TO_ADDR
// d := GetDir ( i ) ;
1585: LD_ADDR_VAR 0 15
1589: PUSH
1590: LD_VAR 0 2
1594: PPUSH
1595: CALL_OW 254
1599: ST_TO_ADDR
// RemoveUnit ( i ) ;
1600: LD_VAR 0 2
1604: PPUSH
1605: CALL_OW 64
// bc_type := b_bunker ;
1609: LD_ADDR_OWVAR 42
1613: PUSH
1614: LD_INT 32
1616: ST_TO_ADDR
// bc_level := 6 ;
1617: LD_ADDR_OWVAR 43
1621: PUSH
1622: LD_INT 6
1624: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1625: LD_ADDR_VAR 0 16
1629: PUSH
1630: LD_VAR 0 13
1634: PPUSH
1635: LD_VAR 0 14
1639: PPUSH
1640: LD_VAR 0 15
1644: PPUSH
1645: CALL_OW 47
1649: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1650: LD_VAR 0 16
1654: PPUSH
1655: LD_INT 5
1657: PUSH
1658: LD_INT 4
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: LD_VAR 0 2
1669: PUSH
1670: LD_INT 2
1672: MOD
1673: PUSH
1674: LD_INT 1
1676: PLUS
1677: ARRAY
1678: PPUSH
1679: CALL_OW 431
// end ;
1683: GO 1552
1685: POP
1686: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1687: LD_ADDR_VAR 0 7
1691: PUSH
1692: LD_INT 22
1694: PUSH
1695: LD_INT 1
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 30
1704: PUSH
1705: LD_INT 5
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PPUSH
1716: CALL_OW 69
1720: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1721: LD_ADDR_VAR 0 9
1725: PUSH
1726: LD_INT 22
1728: PUSH
1729: LD_INT 1
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 2
1738: PUSH
1739: LD_INT 30
1741: PUSH
1742: LD_INT 6
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 30
1751: PUSH
1752: LD_INT 7
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 30
1761: PUSH
1762: LD_INT 8
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PPUSH
1779: CALL_OW 69
1783: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1784: LD_ADDR_VAR 0 10
1788: PUSH
1789: LD_INT 22
1791: PUSH
1792: LD_INT 1
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 30
1801: PUSH
1802: LD_INT 3
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PPUSH
1813: CALL_OW 69
1817: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1818: LD_ADDR_VAR 0 11
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 30
1835: PUSH
1836: LD_INT 36
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PPUSH
1847: CALL_OW 69
1851: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1852: LD_ADDR_VAR 0 8
1856: PUSH
1857: LD_INT 22
1859: PUSH
1860: LD_INT 1
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: LD_INT 2
1869: PUSH
1870: LD_INT 30
1872: PUSH
1873: LD_INT 31
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 30
1882: PUSH
1883: LD_INT 32
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PPUSH
1899: CALL_OW 69
1903: ST_TO_ADDR
// for i in others union tmp2 do
1904: LD_ADDR_VAR 0 2
1908: PUSH
1909: LD_VAR 0 6
1913: PUSH
1914: LD_VAR 0 5
1918: UNION
1919: PUSH
1920: FOR_IN
1921: IFFALSE 2413
// begin placed := false ;
1923: LD_ADDR_VAR 0 12
1927: PUSH
1928: LD_INT 0
1930: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1931: LD_VAR 0 2
1935: PPUSH
1936: CALL_OW 257
1940: PUSH
1941: LD_INT 1
1943: EQUAL
1944: IFFALSE 2069
// begin if UnitFilter ( bun , [ f_empty ] ) then
1946: LD_VAR 0 8
1950: PPUSH
1951: LD_INT 58
1953: PUSH
1954: EMPTY
1955: LIST
1956: PPUSH
1957: CALL_OW 72
1961: IFFALSE 2000
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1963: LD_VAR 0 2
1967: PPUSH
1968: LD_VAR 0 8
1972: PPUSH
1973: LD_INT 58
1975: PUSH
1976: EMPTY
1977: LIST
1978: PPUSH
1979: CALL_OW 72
1983: PUSH
1984: LD_INT 1
1986: ARRAY
1987: PPUSH
1988: CALL_OW 52
// placed := true ;
1992: LD_ADDR_VAR 0 12
1996: PUSH
1997: LD_INT 1
1999: ST_TO_ADDR
// end ; if arm and not placed then
2000: LD_VAR 0 7
2004: PUSH
2005: LD_VAR 0 12
2009: NOT
2010: AND
2011: IFFALSE 2069
// begin for j in arm do
2013: LD_ADDR_VAR 0 3
2017: PUSH
2018: LD_VAR 0 7
2022: PUSH
2023: FOR_IN
2024: IFFALSE 2067
// if UnitsInside ( j ) < 6 then
2026: LD_VAR 0 3
2030: PPUSH
2031: CALL_OW 313
2035: PUSH
2036: LD_INT 6
2038: LESS
2039: IFFALSE 2065
// begin PlaceHumanInUnit ( i , j ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 3
2050: PPUSH
2051: CALL_OW 52
// placed := true ;
2055: LD_ADDR_VAR 0 12
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// break ;
2063: GO 2067
// end ;
2065: GO 2023
2067: POP
2068: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2069: LD_VAR 0 2
2073: PPUSH
2074: CALL_OW 257
2078: PUSH
2079: LD_INT 2
2081: EQUAL
2082: IFFALSE 2115
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2084: LD_VAR 0 2
2088: PPUSH
2089: LD_INT 52
2091: PPUSH
2092: LD_INT 20
2094: PPUSH
2095: LD_INT 6
2097: PPUSH
2098: LD_INT 0
2100: PPUSH
2101: CALL_OW 50
// placed := true ;
2105: LD_ADDR_VAR 0 12
2109: PUSH
2110: LD_INT 1
2112: ST_TO_ADDR
// continue ;
2113: GO 1920
// end ; if GetClass ( i ) = class_mechanic then
2115: LD_VAR 0 2
2119: PPUSH
2120: CALL_OW 257
2124: PUSH
2125: LD_INT 3
2127: EQUAL
2128: IFFALSE 2232
// begin if fac then
2130: LD_VAR 0 10
2134: IFFALSE 2232
// begin if ct then
2136: LD_VAR 0 11
2140: IFFALSE 2168
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2142: LD_VAR 0 2
2146: PPUSH
2147: LD_VAR 0 11
2151: PUSH
2152: LD_INT 1
2154: ARRAY
2155: PPUSH
2156: CALL_OW 52
// placed := true ;
2160: LD_ADDR_VAR 0 12
2164: PUSH
2165: LD_INT 1
2167: ST_TO_ADDR
// end ; if placed then
2168: LD_VAR 0 12
2172: IFFALSE 2176
// continue ;
2174: GO 1920
// for j in fac do
2176: LD_ADDR_VAR 0 3
2180: PUSH
2181: LD_VAR 0 10
2185: PUSH
2186: FOR_IN
2187: IFFALSE 2230
// if UnitsInside ( j ) < 6 then
2189: LD_VAR 0 3
2193: PPUSH
2194: CALL_OW 313
2198: PUSH
2199: LD_INT 6
2201: LESS
2202: IFFALSE 2228
// begin PlaceHumanInUnit ( i , j ) ;
2204: LD_VAR 0 2
2208: PPUSH
2209: LD_VAR 0 3
2213: PPUSH
2214: CALL_OW 52
// placed := true ;
2218: LD_ADDR_VAR 0 12
2222: PUSH
2223: LD_INT 1
2225: ST_TO_ADDR
// break ;
2226: GO 2230
// end ;
2228: GO 2186
2230: POP
2231: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2232: LD_VAR 0 2
2236: PPUSH
2237: CALL_OW 257
2241: PUSH
2242: LD_INT 4
2244: EQUAL
2245: IFFALSE 2340
// begin if lab then
2247: LD_VAR 0 9
2251: IFFALSE 2309
// begin for j in lab do
2253: LD_ADDR_VAR 0 3
2257: PUSH
2258: LD_VAR 0 9
2262: PUSH
2263: FOR_IN
2264: IFFALSE 2307
// if UnitsInside ( j ) < 6 then
2266: LD_VAR 0 3
2270: PPUSH
2271: CALL_OW 313
2275: PUSH
2276: LD_INT 6
2278: LESS
2279: IFFALSE 2305
// begin PlaceHumanInUnit ( i , j ) ;
2281: LD_VAR 0 2
2285: PPUSH
2286: LD_VAR 0 3
2290: PPUSH
2291: CALL_OW 52
// placed := true ;
2295: LD_ADDR_VAR 0 12
2299: PUSH
2300: LD_INT 1
2302: ST_TO_ADDR
// break ;
2303: GO 2307
// end ;
2305: GO 2263
2307: POP
2308: POP
// end ; if not placed then
2309: LD_VAR 0 12
2313: NOT
2314: IFFALSE 2340
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2316: LD_VAR 0 2
2320: PPUSH
2321: LD_INT 3
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: CALL_OW 49
// ComHold ( i ) ;
2331: LD_VAR 0 2
2335: PPUSH
2336: CALL_OW 140
// end ; end ; if ct then
2340: LD_VAR 0 11
2344: IFFALSE 2411
// if UnitsInside ( ct [ 1 ] ) then
2346: LD_VAR 0 11
2350: PUSH
2351: LD_INT 1
2353: ARRAY
2354: PPUSH
2355: CALL_OW 313
2359: IFFALSE 2411
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2361: LD_ADDR_VAR 0 2
2365: PUSH
2366: LD_INT 22
2368: PUSH
2369: LD_INT 1
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: LD_INT 33
2378: PUSH
2379: LD_INT 2
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PPUSH
2390: CALL_OW 69
2394: PUSH
2395: FOR_IN
2396: IFFALSE 2409
// Connect ( i ) ;
2398: LD_VAR 0 2
2402: PPUSH
2403: CALL 46448 0 1
2407: GO 2395
2409: POP
2410: POP
// end ; end ;
2411: GO 1920
2413: POP
2414: POP
// end ;
2415: LD_VAR 0 1
2419: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2420: LD_INT 0
2422: PPUSH
2423: PPUSH
2424: PPUSH
2425: PPUSH
2426: PPUSH
2427: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2428: LD_INT 71
2430: PPUSH
2431: LD_INT 5
2433: PPUSH
2434: LD_INT 1
2436: PPUSH
2437: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2441: LD_ADDR_VAR 0 2
2445: PUSH
2446: LD_STRING GammaBase
2448: PPUSH
2449: EMPTY
2450: PPUSH
2451: CALL_OW 30
2455: ST_TO_ADDR
// if not blist then
2456: LD_VAR 0 2
2460: NOT
2461: IFFALSE 2501
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2463: LD_ADDR_VAR 0 2
2467: PUSH
2468: LD_INT 1
2470: PUSH
2471: LD_INT 52
2473: PUSH
2474: LD_INT 12
2476: PUSH
2477: LD_INT 3
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 0
2485: PUSH
2486: LD_INT 0
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: ST_TO_ADDR
// uc_side := 1 ;
2501: LD_ADDR_OWVAR 20
2505: PUSH
2506: LD_INT 1
2508: ST_TO_ADDR
// uc_nation := 1 ;
2509: LD_ADDR_OWVAR 21
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// bc_kind1 := - 1 ;
2517: LD_ADDR_OWVAR 44
2521: PUSH
2522: LD_INT 1
2524: NEG
2525: ST_TO_ADDR
// bc_kind2 := - 1 ;
2526: LD_ADDR_OWVAR 45
2530: PUSH
2531: LD_INT 1
2533: NEG
2534: ST_TO_ADDR
// for i in blist do
2535: LD_ADDR_VAR 0 3
2539: PUSH
2540: LD_VAR 0 2
2544: PUSH
2545: FOR_IN
2546: IFFALSE 2822
// begin bc_type := i [ 1 ] ;
2548: LD_ADDR_OWVAR 42
2552: PUSH
2553: LD_VAR 0 3
2557: PUSH
2558: LD_INT 1
2560: ARRAY
2561: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2562: LD_ADDR_OWVAR 43
2566: PUSH
2567: LD_VAR 0 3
2571: PUSH
2572: LD_INT 5
2574: ARRAY
2575: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2576: LD_OWVAR 42
2580: PUSH
2581: LD_INT 6
2583: PUSH
2584: LD_INT 7
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: IN
2591: IFFALSE 2657
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2593: LD_STRING 06_remoteVehs_1
2595: PPUSH
2596: LD_INT 0
2598: PPUSH
2599: CALL_OW 30
2603: NOT
2604: IFFALSE 2632
// begin bc_type := b_lab_full ;
2606: LD_ADDR_OWVAR 42
2610: PUSH
2611: LD_INT 8
2613: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2614: LD_ADDR_OWVAR 44
2618: PUSH
2619: LD_INT 10
2621: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2622: LD_ADDR_OWVAR 45
2626: PUSH
2627: LD_INT 15
2629: ST_TO_ADDR
// end else
2630: GO 2657
// begin bc_type := b_lab_half ;
2632: LD_ADDR_OWVAR 42
2636: PUSH
2637: LD_INT 7
2639: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2640: LD_ADDR_OWVAR 44
2644: PUSH
2645: LD_INT 10
2647: ST_TO_ADDR
// bc_kind2 := - 1 ;
2648: LD_ADDR_OWVAR 45
2652: PUSH
2653: LD_INT 1
2655: NEG
2656: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2657: LD_OWVAR 42
2661: PUSH
2662: LD_INT 2
2664: EQUAL
2665: IFFALSE 2675
// bc_type := b_factory ;
2667: LD_ADDR_OWVAR 42
2671: PUSH
2672: LD_INT 3
2674: ST_TO_ADDR
// if bc_type = b_depot then
2675: LD_OWVAR 42
2679: PUSH
2680: LD_INT 0
2682: EQUAL
2683: IFFALSE 2732
// begin bc_type := b_warehouse ;
2685: LD_ADDR_OWVAR 42
2689: PUSH
2690: LD_INT 1
2692: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2693: LD_ADDR_EXP 27
2697: PUSH
2698: LD_VAR 0 3
2702: PUSH
2703: LD_INT 2
2705: ARRAY
2706: PPUSH
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 3
2714: ARRAY
2715: PPUSH
2716: LD_VAR 0 3
2720: PUSH
2721: LD_INT 4
2723: ARRAY
2724: PPUSH
2725: CALL_OW 47
2729: ST_TO_ADDR
// continue ;
2730: GO 2545
// end ; if bc_type = b_armoury then
2732: LD_OWVAR 42
2736: PUSH
2737: LD_INT 4
2739: EQUAL
2740: IFFALSE 2750
// bc_type = b_barracks ;
2742: LD_ADDR_OWVAR 42
2746: PUSH
2747: LD_INT 5
2749: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2750: LD_ADDR_VAR 0 4
2754: PUSH
2755: LD_VAR 0 3
2759: PUSH
2760: LD_INT 2
2762: ARRAY
2763: PPUSH
2764: LD_VAR 0 3
2768: PUSH
2769: LD_INT 3
2771: ARRAY
2772: PPUSH
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 4
2780: ARRAY
2781: PPUSH
2782: CALL_OW 47
2786: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2787: LD_VAR 0 4
2791: PPUSH
2792: CALL_OW 266
2796: PUSH
2797: LD_INT 32
2799: EQUAL
2800: IFFALSE 2820
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_VAR 0 3
2811: PUSH
2812: LD_INT 7
2814: ARRAY
2815: PPUSH
2816: CALL_OW 431
// end ;
2820: GO 2545
2822: POP
2823: POP
// if not amDepot then
2824: LD_EXP 27
2828: NOT
2829: IFFALSE 2866
// begin bc_type := b_warehouse ;
2831: LD_ADDR_OWVAR 42
2835: PUSH
2836: LD_INT 1
2838: ST_TO_ADDR
// bc_level := 6 ;
2839: LD_ADDR_OWVAR 43
2843: PUSH
2844: LD_INT 6
2846: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2847: LD_ADDR_EXP 27
2851: PUSH
2852: LD_INT 52
2854: PPUSH
2855: LD_INT 12
2857: PPUSH
2858: LD_INT 3
2860: PPUSH
2861: CALL_OW 47
2865: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2866: LD_ADDR_OWVAR 42
2870: PUSH
2871: LD_INT 5
2873: ST_TO_ADDR
// bc_level := 6 ;
2874: LD_ADDR_OWVAR 43
2878: PUSH
2879: LD_INT 6
2881: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2882: LD_INT 61
2884: PPUSH
2885: LD_INT 29
2887: PPUSH
2888: LD_INT 5
2890: PPUSH
2891: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2895: LD_EXP 27
2899: PPUSH
2900: LD_STRING gamma
2902: PPUSH
2903: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2907: LD_EXP 27
2911: PPUSH
2912: CALL_OW 274
2916: PPUSH
2917: LD_INT 1
2919: PPUSH
2920: LD_INT 400
2922: PUSH
2923: LD_INT 320
2925: PUSH
2926: LD_INT 270
2928: PUSH
2929: LD_INT 230
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: PUSH
2938: LD_OWVAR 67
2942: ARRAY
2943: PPUSH
2944: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2948: LD_EXP 27
2952: PPUSH
2953: CALL_OW 274
2957: PPUSH
2958: LD_INT 2
2960: PPUSH
2961: LD_INT 130
2963: PPUSH
2964: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2968: LD_INT 22
2970: PUSH
2971: LD_INT 1
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: LD_INT 30
2980: PUSH
2981: LD_INT 3
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: PPUSH
2992: CALL_OW 69
2996: IFFALSE 3244
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2998: LD_ADDR_VAR 0 4
3002: PUSH
3003: LD_INT 22
3005: PUSH
3006: LD_INT 1
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PUSH
3013: LD_INT 30
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PPUSH
3027: CALL_OW 69
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3036: LD_ADDR_VAR 0 6
3040: PUSH
3041: LD_VAR 0 4
3045: PPUSH
3046: CALL_OW 250
3050: PPUSH
3051: LD_VAR 0 4
3055: PPUSH
3056: CALL_OW 251
3060: PPUSH
3061: LD_VAR 0 4
3065: PPUSH
3066: CALL_OW 254
3070: PPUSH
3071: CALL 73357 0 3
3075: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3076: LD_ADDR_VAR 0 2
3080: PUSH
3081: LD_INT 19
3083: PUSH
3084: LD_INT 17
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3091: LD_STRING 06_remoteVehs_1
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: CALL_OW 30
3101: IFFALSE 3124
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3103: LD_ADDR_VAR 0 2
3107: PUSH
3108: LD_VAR 0 2
3112: PPUSH
3113: LD_INT 1
3115: PPUSH
3116: LD_INT 22
3118: PPUSH
3119: CALL_OW 2
3123: ST_TO_ADDR
// for i in tmp do
3124: LD_ADDR_VAR 0 3
3128: PUSH
3129: LD_VAR 0 6
3133: PUSH
3134: FOR_IN
3135: IFFALSE 3242
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3137: LD_VAR 0 3
3141: PUSH
3142: LD_INT 1
3144: ARRAY
3145: PPUSH
3146: LD_VAR 0 3
3150: PUSH
3151: LD_INT 2
3153: ARRAY
3154: PPUSH
3155: CALL_OW 428
3159: PUSH
3160: LD_INT 0
3162: EQUAL
3163: IFFALSE 3240
// begin bc_type := blist [ 1 ] ;
3165: LD_ADDR_OWVAR 42
3169: PUSH
3170: LD_VAR 0 2
3174: PUSH
3175: LD_INT 1
3177: ARRAY
3178: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3179: LD_VAR 0 3
3183: PUSH
3184: LD_INT 1
3186: ARRAY
3187: PPUSH
3188: LD_VAR 0 3
3192: PUSH
3193: LD_INT 2
3195: ARRAY
3196: PPUSH
3197: LD_VAR 0 3
3201: PUSH
3202: LD_INT 3
3204: ARRAY
3205: PPUSH
3206: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_VAR 0 2
3219: PPUSH
3220: LD_INT 1
3222: PPUSH
3223: CALL_OW 3
3227: ST_TO_ADDR
// if blist = 0 then
3228: LD_VAR 0 2
3232: PUSH
3233: LD_INT 0
3235: EQUAL
3236: IFFALSE 3240
// break ;
3238: GO 3242
// end ;
3240: GO 3134
3242: POP
3243: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3244: LD_STRING 06_remoteVehs_1
3246: PPUSH
3247: LD_INT 0
3249: PPUSH
3250: CALL_OW 30
3254: IFFALSE 3707
// begin bc_type := b_control_tower ;
3256: LD_ADDR_OWVAR 42
3260: PUSH
3261: LD_INT 36
3263: ST_TO_ADDR
// bc_level := 4 ;
3264: LD_ADDR_OWVAR 43
3268: PUSH
3269: LD_INT 4
3271: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3272: LD_EXP 27
3276: PPUSH
3277: LD_INT 36
3279: PPUSH
3280: LD_INT 62
3282: PPUSH
3283: LD_INT 12
3285: PPUSH
3286: LD_INT 3
3288: PPUSH
3289: CALL 51576 0 5
3293: PUSH
3294: LD_INT 92
3296: PUSH
3297: LD_INT 62
3299: PUSH
3300: LD_INT 12
3302: PUSH
3303: LD_INT 3
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: NOT
3317: AND
3318: IFFALSE 3335
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3320: LD_INT 62
3322: PPUSH
3323: LD_INT 12
3325: PPUSH
3326: LD_INT 3
3328: PPUSH
3329: CALL_OW 47
3333: GO 3497
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3335: LD_EXP 27
3339: PPUSH
3340: LD_INT 36
3342: PPUSH
3343: LD_INT 37
3345: PPUSH
3346: LD_INT 18
3348: PPUSH
3349: LD_INT 2
3351: PPUSH
3352: CALL 51576 0 5
3356: PUSH
3357: LD_INT 92
3359: PUSH
3360: LD_INT 37
3362: PUSH
3363: LD_INT 18
3365: PUSH
3366: LD_INT 3
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 69
3379: NOT
3380: AND
3381: IFFALSE 3398
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3383: LD_INT 37
3385: PPUSH
3386: LD_INT 18
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 47
3396: GO 3497
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3398: LD_EXP 27
3402: PPUSH
3403: LD_INT 36
3405: PPUSH
3406: LD_INT 66
3408: PPUSH
3409: LD_INT 14
3411: PPUSH
3412: LD_INT 4
3414: PPUSH
3415: CALL 51576 0 5
3419: PUSH
3420: LD_INT 92
3422: PUSH
3423: LD_INT 66
3425: PUSH
3426: LD_INT 14
3428: PUSH
3429: LD_INT 3
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: PPUSH
3438: CALL_OW 69
3442: NOT
3443: AND
3444: IFFALSE 3461
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3446: LD_INT 66
3448: PPUSH
3449: LD_INT 14
3451: PPUSH
3452: LD_INT 4
3454: PPUSH
3455: CALL_OW 47
3459: GO 3497
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3461: LD_EXP 27
3465: PPUSH
3466: LD_INT 36
3468: PPUSH
3469: LD_INT 74
3471: PPUSH
3472: LD_INT 26
3474: PPUSH
3475: LD_INT 4
3477: PPUSH
3478: CALL 51576 0 5
3482: IFFALSE 3497
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3484: LD_INT 74
3486: PPUSH
3487: LD_INT 26
3489: PPUSH
3490: LD_INT 4
3492: PPUSH
3493: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3497: LD_INT 22
3499: PUSH
3500: LD_INT 1
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: LD_INT 30
3509: PUSH
3510: LD_INT 36
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PPUSH
3521: CALL_OW 69
3525: NOT
3526: IFFALSE 3530
// exit ;
3528: GO 4055
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3530: LD_ADDR_VAR 0 3
3534: PUSH
3535: DOUBLE
3536: LD_INT 1
3538: DEC
3539: ST_TO_ADDR
3540: LD_INT 3
3542: PUSH
3543: LD_INT 2
3545: PUSH
3546: LD_INT 2
3548: PUSH
3549: LD_INT 2
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_OWVAR 67
3562: ARRAY
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3705
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3567: LD_ADDR_OWVAR 37
3571: PUSH
3572: LD_INT 3
3574: PUSH
3575: LD_INT 2
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: CALL_OW 12
3592: ARRAY
3593: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3594: LD_ADDR_OWVAR 39
3598: PUSH
3599: LD_INT 1
3601: PUSH
3602: LD_INT 2
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PUSH
3609: LD_INT 1
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: CALL_OW 12
3619: ARRAY
3620: ST_TO_ADDR
// vc_control := control_remote ;
3621: LD_ADDR_OWVAR 38
3625: PUSH
3626: LD_INT 2
3628: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3629: LD_ADDR_OWVAR 40
3633: PUSH
3634: LD_INT 4
3636: PUSH
3637: LD_INT 3
3639: PUSH
3640: LD_INT 5
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: PUSH
3648: LD_INT 1
3650: PPUSH
3651: LD_INT 3
3653: PPUSH
3654: CALL_OW 12
3658: ARRAY
3659: ST_TO_ADDR
// veh := CreateVehicle ;
3660: LD_ADDR_VAR 0 5
3664: PUSH
3665: CALL_OW 45
3669: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3670: LD_VAR 0 5
3674: PPUSH
3675: LD_INT 3
3677: PPUSH
3678: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3682: LD_VAR 0 5
3686: PPUSH
3687: LD_INT 61
3689: PPUSH
3690: LD_INT 23
3692: PPUSH
3693: LD_INT 9
3695: PPUSH
3696: LD_INT 0
3698: PPUSH
3699: CALL_OW 50
// end ;
3703: GO 3564
3705: POP
3706: POP
// end ; if gammaCommander = 1 then
3707: LD_EXP 10
3711: PUSH
3712: LD_INT 1
3714: EQUAL
3715: IFFALSE 3892
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3717: LD_ADDR_VAR 0 3
3721: PUSH
3722: DOUBLE
3723: LD_INT 1
3725: DEC
3726: ST_TO_ADDR
3727: LD_INT 3
3729: PUSH
3730: LD_INT 3
3732: PUSH
3733: LD_INT 2
3735: PUSH
3736: LD_INT 2
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: PUSH
3745: LD_OWVAR 67
3749: ARRAY
3750: PUSH
3751: FOR_TO
3752: IFFALSE 3888
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3754: LD_ADDR_OWVAR 37
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 1
3771: PPUSH
3772: LD_INT 2
3774: PPUSH
3775: CALL_OW 12
3779: ARRAY
3780: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3781: LD_ADDR_OWVAR 39
3785: PUSH
3786: LD_INT 1
3788: PUSH
3789: LD_INT 2
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 2
3801: PPUSH
3802: CALL_OW 12
3806: ARRAY
3807: ST_TO_ADDR
// vc_control := control_manual ;
3808: LD_ADDR_OWVAR 38
3812: PUSH
3813: LD_INT 1
3815: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3816: LD_ADDR_OWVAR 40
3820: PUSH
3821: LD_INT 4
3823: PUSH
3824: LD_INT 5
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: LD_INT 1
3833: PPUSH
3834: LD_INT 2
3836: PPUSH
3837: CALL_OW 12
3841: ARRAY
3842: ST_TO_ADDR
// veh := CreateVehicle ;
3843: LD_ADDR_VAR 0 5
3847: PUSH
3848: CALL_OW 45
3852: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3853: LD_VAR 0 5
3857: PPUSH
3858: LD_INT 3
3860: PPUSH
3861: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3865: LD_VAR 0 5
3869: PPUSH
3870: LD_INT 61
3872: PPUSH
3873: LD_INT 23
3875: PPUSH
3876: LD_INT 9
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL_OW 50
// end ;
3886: GO 3751
3888: POP
3889: POP
// end else
3890: GO 4055
// if gammaCommander = 2 then
3892: LD_EXP 10
3896: PUSH
3897: LD_INT 2
3899: EQUAL
3900: IFFALSE 4055
// begin bc_type := b_bunker ;
3902: LD_ADDR_OWVAR 42
3906: PUSH
3907: LD_INT 32
3909: ST_TO_ADDR
// bc_level := 6 ;
3910: LD_ADDR_OWVAR 43
3914: PUSH
3915: LD_INT 6
3917: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3918: LD_ADDR_VAR 0 4
3922: PUSH
3923: LD_INT 67
3925: PPUSH
3926: LD_INT 36
3928: PPUSH
3929: LD_INT 5
3931: PPUSH
3932: CALL_OW 47
3936: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3937: LD_VAR 0 4
3941: PPUSH
3942: LD_INT 4
3944: PPUSH
3945: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3949: LD_ADDR_VAR 0 4
3953: PUSH
3954: LD_INT 61
3956: PPUSH
3957: LD_INT 40
3959: PPUSH
3960: LD_INT 5
3962: PPUSH
3963: CALL_OW 47
3967: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3968: LD_VAR 0 4
3972: PPUSH
3973: LD_INT 5
3975: PPUSH
3976: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3980: LD_ADDR_OWVAR 37
3984: PUSH
3985: LD_INT 2
3987: ST_TO_ADDR
// vc_engine := engine_combustion ;
3988: LD_ADDR_OWVAR 39
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_control := control_manual ;
3996: LD_ADDR_OWVAR 38
4000: PUSH
4001: LD_INT 1
4003: ST_TO_ADDR
// vc_weapon := us_crane ;
4004: LD_ADDR_OWVAR 40
4008: PUSH
4009: LD_INT 13
4011: ST_TO_ADDR
// veh := CreateVehicle ;
4012: LD_ADDR_VAR 0 5
4016: PUSH
4017: CALL_OW 45
4021: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4022: LD_VAR 0 5
4026: PPUSH
4027: LD_INT 3
4029: PPUSH
4030: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4034: LD_VAR 0 5
4038: PPUSH
4039: LD_INT 61
4041: PPUSH
4042: LD_INT 23
4044: PPUSH
4045: LD_INT 9
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 50
// end ; end ;
4055: LD_VAR 0 1
4059: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4060: LD_INT 0
4062: PPUSH
4063: PPUSH
4064: PPUSH
4065: PPUSH
// uc_side := 1 ;
4066: LD_ADDR_OWVAR 20
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// uc_nation := 1 ;
4074: LD_ADDR_OWVAR 21
4078: PUSH
4079: LD_INT 1
4081: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4082: LD_ADDR_EXP 22
4086: PUSH
4087: LD_STRING Denis
4089: PPUSH
4090: LD_EXP 1
4094: NOT
4095: PPUSH
4096: LD_STRING 06c_
4098: PPUSH
4099: CALL 38342 0 3
4103: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4104: LD_EXP 22
4108: PPUSH
4109: LD_INT 4
4111: PPUSH
4112: LD_INT 0
4114: PPUSH
4115: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4119: LD_ADDR_EXP 23
4123: PUSH
4124: LD_STRING Joan
4126: PPUSH
4127: LD_EXP 1
4131: NOT
4132: PPUSH
4133: LD_STRING 06c_
4135: PPUSH
4136: CALL 38342 0 3
4140: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4141: LD_EXP 23
4145: PPUSH
4146: LD_INT 4
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4156: LD_STRING GladstoneIn07
4158: PPUSH
4159: LD_INT 0
4161: PPUSH
4162: CALL_OW 30
4166: NOT
4167: IFFALSE 4247
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4169: LD_ADDR_EXP 18
4173: PUSH
4174: LD_STRING Gladstone
4176: PPUSH
4177: LD_EXP 1
4181: NOT
4182: PPUSH
4183: LD_STRING 06c_
4185: PPUSH
4186: CALL 38342 0 3
4190: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4191: LD_EXP 18
4195: NOT
4196: PUSH
4197: LD_STRING GladstoneStayInDelta
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: CALL_OW 30
4207: AND
4208: IFFALSE 4232
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4210: LD_ADDR_EXP 18
4214: PUSH
4215: LD_STRING Gladstone
4217: PPUSH
4218: LD_EXP 1
4222: NOT
4223: PPUSH
4224: LD_STRING 05_
4226: PPUSH
4227: CALL 38342 0 3
4231: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4232: LD_EXP 18
4236: PPUSH
4237: LD_INT 4
4239: PPUSH
4240: LD_INT 0
4242: PPUSH
4243: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4247: LD_STRING LisaStayInDelta
4249: PPUSH
4250: LD_INT 0
4252: PPUSH
4253: CALL_OW 30
4257: IFFALSE 4293
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4259: LD_ADDR_EXP 16
4263: PUSH
4264: LD_STRING Lisa
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: LD_STRING 05_
4272: PPUSH
4273: CALL 38342 0 3
4277: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4278: LD_EXP 16
4282: PPUSH
4283: LD_INT 4
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4293: LD_STRING BobbyStayInDelta
4295: PPUSH
4296: LD_INT 0
4298: PPUSH
4299: CALL_OW 30
4303: IFFALSE 4339
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4305: LD_ADDR_EXP 14
4309: PUSH
4310: LD_STRING Bobby
4312: PPUSH
4313: LD_INT 1
4315: PPUSH
4316: LD_STRING 05_
4318: PPUSH
4319: CALL 38342 0 3
4323: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4324: LD_EXP 14
4328: PPUSH
4329: LD_INT 4
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4339: LD_STRING CyrusStayInDelta
4341: PPUSH
4342: LD_INT 0
4344: PPUSH
4345: CALL_OW 30
4349: IFFALSE 4385
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4351: LD_ADDR_EXP 15
4355: PUSH
4356: LD_STRING Cyrus
4358: PPUSH
4359: LD_INT 1
4361: PPUSH
4362: LD_STRING 05_
4364: PPUSH
4365: CALL 38342 0 3
4369: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4370: LD_EXP 15
4374: PPUSH
4375: LD_INT 4
4377: PPUSH
4378: LD_INT 0
4380: PPUSH
4381: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4385: LD_STRING BrownStayInDelta
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 30
4395: IFFALSE 4431
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4397: LD_ADDR_EXP 12
4401: PUSH
4402: LD_STRING Brown
4404: PPUSH
4405: LD_INT 1
4407: PPUSH
4408: LD_STRING 05_
4410: PPUSH
4411: CALL 38342 0 3
4415: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4416: LD_EXP 12
4420: PPUSH
4421: LD_INT 4
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4431: LD_STRING DonaldsonStayInDelta
4433: PPUSH
4434: LD_INT 0
4436: PPUSH
4437: CALL_OW 30
4441: IFFALSE 4477
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4443: LD_ADDR_EXP 13
4447: PUSH
4448: LD_STRING Donaldson
4450: PPUSH
4451: LD_INT 1
4453: PPUSH
4454: LD_STRING 05_
4456: PPUSH
4457: CALL 38342 0 3
4461: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4462: LD_EXP 13
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4477: LD_ADDR_VAR 0 4
4481: PUSH
4482: LD_STRING OthersStayInDelta
4484: PPUSH
4485: CALL_OW 31
4489: ST_TO_ADDR
// if others > 2 then
4490: LD_VAR 0 4
4494: PUSH
4495: LD_INT 2
4497: GREATER
4498: IFFALSE 4561
// begin for j := 1 to 2 do
4500: LD_ADDR_VAR 0 3
4504: PUSH
4505: DOUBLE
4506: LD_INT 1
4508: DEC
4509: ST_TO_ADDR
4510: LD_INT 2
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4557
// begin SetTag ( others [ j ] , 107 ) ;
4516: LD_VAR 0 4
4520: PUSH
4521: LD_VAR 0 3
4525: ARRAY
4526: PPUSH
4527: LD_INT 107
4529: PPUSH
4530: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4534: LD_VAR 0 4
4538: PUSH
4539: LD_VAR 0 3
4543: ARRAY
4544: PPUSH
4545: LD_INT 4
4547: PPUSH
4548: LD_INT 0
4550: PPUSH
4551: CALL_OW 49
// end ;
4555: GO 4513
4557: POP
4558: POP
// end else
4559: GO 4622
// begin for j := 1 to others do
4561: LD_ADDR_VAR 0 3
4565: PUSH
4566: DOUBLE
4567: LD_INT 1
4569: DEC
4570: ST_TO_ADDR
4571: LD_VAR 0 4
4575: PUSH
4576: FOR_TO
4577: IFFALSE 4620
// begin SetTag ( others [ i ] , 107 ) ;
4579: LD_VAR 0 4
4583: PUSH
4584: LD_VAR 0 2
4588: ARRAY
4589: PPUSH
4590: LD_INT 107
4592: PPUSH
4593: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4597: LD_VAR 0 4
4601: PUSH
4602: LD_VAR 0 3
4606: ARRAY
4607: PPUSH
4608: LD_INT 4
4610: PPUSH
4611: LD_INT 0
4613: PPUSH
4614: CALL_OW 49
// end ;
4618: GO 4576
4620: POP
4621: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4622: LD_ADDR_VAR 0 4
4626: PUSH
4627: LD_STRING 06_other_apemans
4629: PPUSH
4630: CALL_OW 31
4634: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4635: LD_VAR 0 4
4639: PUSH
4640: LD_INT 3
4642: PUSH
4643: LD_INT 2
4645: PUSH
4646: LD_INT 2
4648: PUSH
4649: LD_INT 1
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: PUSH
4658: LD_OWVAR 67
4662: ARRAY
4663: GREATEREQUAL
4664: IFFALSE 4697
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4666: LD_ADDR_VAR 0 3
4670: PUSH
4671: LD_INT 3
4673: PUSH
4674: LD_INT 2
4676: PUSH
4677: LD_INT 2
4679: PUSH
4680: LD_INT 1
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: PUSH
4689: LD_OWVAR 67
4693: ARRAY
4694: ST_TO_ADDR
4695: GO 4707
// j := others ;
4697: LD_ADDR_VAR 0 3
4701: PUSH
4702: LD_VAR 0 4
4706: ST_TO_ADDR
// for i := 1 to j do
4707: LD_ADDR_VAR 0 2
4711: PUSH
4712: DOUBLE
4713: LD_INT 1
4715: DEC
4716: ST_TO_ADDR
4717: LD_VAR 0 3
4721: PUSH
4722: FOR_TO
4723: IFFALSE 4748
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4725: LD_VAR 0 4
4729: PUSH
4730: LD_VAR 0 2
4734: ARRAY
4735: PPUSH
4736: LD_INT 4
4738: PPUSH
4739: LD_INT 0
4741: PPUSH
4742: CALL_OW 49
4746: GO 4722
4748: POP
4749: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4750: LD_INT 4
4752: PPUSH
4753: LD_INT 22
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 1
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PPUSH
4777: CALL_OW 70
4781: PPUSH
4782: LD_INT 53
4784: PPUSH
4785: LD_INT 19
4787: PPUSH
4788: CALL_OW 111
// end ;
4792: LD_VAR 0 1
4796: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4797: LD_INT 0
4799: PPUSH
4800: PPUSH
4801: PPUSH
4802: PPUSH
4803: PPUSH
4804: PPUSH
4805: PPUSH
4806: PPUSH
4807: PPUSH
4808: PPUSH
4809: PPUSH
4810: PPUSH
4811: PPUSH
4812: PPUSH
4813: PPUSH
// prefix := 07c_ ;
4814: LD_ADDR_VAR 0 11
4818: PUSH
4819: LD_STRING 07c_
4821: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4822: LD_ADDR_VAR 0 9
4826: PUSH
4827: LD_STRING 07_vehicles
4829: PPUSH
4830: EMPTY
4831: PPUSH
4832: CALL_OW 30
4836: ST_TO_ADDR
// if not vehicles and debug then
4837: LD_VAR 0 9
4841: NOT
4842: PUSH
4843: LD_EXP 1
4847: AND
4848: IFFALSE 4873
// vehicles := [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ;
4850: LD_ADDR_VAR 0 9
4854: PUSH
4855: LD_INT 2
4857: PUSH
4858: LD_INT 1
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: LD_INT 4
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: ST_TO_ADDR
// if not vehicles then
4873: LD_VAR 0 9
4877: NOT
4878: IFFALSE 4935
// begin area := westGammaSupportArea ;
4880: LD_ADDR_VAR 0 12
4884: PUSH
4885: LD_INT 16
4887: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4888: LD_ADDR_VAR 0 15
4892: PUSH
4893: LD_INT 37
4895: PUSH
4896: LD_INT 70
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4903: LD_ADDR_VAR 0 14
4907: PUSH
4908: LD_INT 43
4910: PUSH
4911: LD_INT 67
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: ST_TO_ADDR
// dir := 1 ;
4918: LD_ADDR_VAR 0 13
4922: PUSH
4923: LD_INT 1
4925: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4926: LD_INT 4200
4928: PPUSH
4929: CALL_OW 67
// end else
4933: GO 4981
// begin area := southGammaSupportArea ;
4935: LD_ADDR_VAR 0 12
4939: PUSH
4940: LD_INT 5
4942: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4943: LD_ADDR_VAR 0 15
4947: PUSH
4948: LD_INT 87
4950: PUSH
4951: LD_INT 147
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4958: LD_ADDR_VAR 0 14
4962: PUSH
4963: LD_INT 74
4965: PUSH
4966: LD_INT 129
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: ST_TO_ADDR
// dir := 0 ;
4973: LD_ADDR_VAR 0 13
4977: PUSH
4978: LD_INT 0
4980: ST_TO_ADDR
// end ; squad := [ ] ;
4981: LD_ADDR_VAR 0 6
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tmp := [ ] ;
4988: LD_ADDR_VAR 0 7
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// tmpVehs := [ ] ;
4995: LD_ADDR_VAR 0 8
4999: PUSH
5000: EMPTY
5001: ST_TO_ADDR
// uc_side := 1 ;
5002: LD_ADDR_OWVAR 20
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// uc_nation := 1 ;
5010: LD_ADDR_OWVAR 21
5014: PUSH
5015: LD_INT 1
5017: ST_TO_ADDR
// if vehicles then
5018: LD_VAR 0 9
5022: IFFALSE 5178
// begin k := 1 ;
5024: LD_ADDR_VAR 0 3
5028: PUSH
5029: LD_INT 1
5031: ST_TO_ADDR
// for i := 1 to vehicles div 4 do
5032: LD_ADDR_VAR 0 2
5036: PUSH
5037: DOUBLE
5038: LD_INT 1
5040: DEC
5041: ST_TO_ADDR
5042: LD_VAR 0 9
5046: PUSH
5047: LD_INT 4
5049: DIV
5050: PUSH
5051: FOR_TO
5052: IFFALSE 5176
// begin vc_chassis := vehicles [ k ] ;
5054: LD_ADDR_OWVAR 37
5058: PUSH
5059: LD_VAR 0 9
5063: PUSH
5064: LD_VAR 0 3
5068: ARRAY
5069: ST_TO_ADDR
// vc_engine := vehicles [ k + 1 ] ;
5070: LD_ADDR_OWVAR 39
5074: PUSH
5075: LD_VAR 0 9
5079: PUSH
5080: LD_VAR 0 3
5084: PUSH
5085: LD_INT 1
5087: PLUS
5088: ARRAY
5089: ST_TO_ADDR
// vc_control := vehicles [ k + 2 ] ;
5090: LD_ADDR_OWVAR 38
5094: PUSH
5095: LD_VAR 0 9
5099: PUSH
5100: LD_VAR 0 3
5104: PUSH
5105: LD_INT 2
5107: PLUS
5108: ARRAY
5109: ST_TO_ADDR
// vc_weapon := vehicles [ k + 3 ] ;
5110: LD_ADDR_OWVAR 40
5114: PUSH
5115: LD_VAR 0 9
5119: PUSH
5120: LD_VAR 0 3
5124: PUSH
5125: LD_INT 3
5127: PLUS
5128: ARRAY
5129: ST_TO_ADDR
// k := k + 4 ;
5130: LD_ADDR_VAR 0 3
5134: PUSH
5135: LD_VAR 0 3
5139: PUSH
5140: LD_INT 4
5142: PLUS
5143: ST_TO_ADDR
// veh := CreateVehicle ;
5144: LD_ADDR_VAR 0 10
5148: PUSH
5149: CALL_OW 45
5153: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5154: LD_ADDR_VAR 0 8
5158: PUSH
5159: LD_VAR 0 8
5163: PPUSH
5164: LD_VAR 0 10
5168: PPUSH
5169: CALL 75718 0 2
5173: ST_TO_ADDR
// end ;
5174: GO 5051
5176: POP
5177: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5178: LD_ADDR_EXP 11
5182: PUSH
5183: LD_STRING JMM
5185: PPUSH
5186: LD_EXP 1
5190: NOT
5191: PPUSH
5192: LD_VAR 0 11
5196: PPUSH
5197: CALL 38342 0 3
5201: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5202: LD_EXP 10
5206: PUSH
5207: LD_INT 1
5209: PUSH
5210: LD_INT 3
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: IN
5217: PUSH
5218: LD_EXP 12
5222: NOT
5223: AND
5224: IFFALSE 5285
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5226: LD_ADDR_EXP 12
5230: PUSH
5231: LD_STRING Brown
5233: PPUSH
5234: LD_EXP 1
5238: NOT
5239: PPUSH
5240: LD_VAR 0 11
5244: PPUSH
5245: CALL 38342 0 3
5249: ST_TO_ADDR
// if Brown then
5250: LD_EXP 12
5254: IFFALSE 5285
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5256: LD_ADDR_VAR 0 7
5260: PUSH
5261: LD_VAR 0 7
5265: PPUSH
5266: LD_VAR 0 7
5270: PUSH
5271: LD_INT 1
5273: PLUS
5274: PPUSH
5275: LD_EXP 12
5279: PPUSH
5280: CALL_OW 1
5284: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5285: LD_EXP 10
5289: PUSH
5290: LD_INT 2
5292: PUSH
5293: LD_INT 3
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: IN
5300: PUSH
5301: LD_EXP 13
5305: NOT
5306: AND
5307: IFFALSE 5368
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5309: LD_ADDR_EXP 13
5313: PUSH
5314: LD_STRING Donaldson
5316: PPUSH
5317: LD_EXP 1
5321: NOT
5322: PPUSH
5323: LD_VAR 0 11
5327: PPUSH
5328: CALL 38342 0 3
5332: ST_TO_ADDR
// if Donaldson then
5333: LD_EXP 13
5337: IFFALSE 5368
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5339: LD_ADDR_VAR 0 7
5343: PUSH
5344: LD_VAR 0 7
5348: PPUSH
5349: LD_VAR 0 7
5353: PUSH
5354: LD_INT 1
5356: PLUS
5357: PPUSH
5358: LD_EXP 13
5362: PPUSH
5363: CALL_OW 1
5367: ST_TO_ADDR
// end ; if not Bobby then
5368: LD_EXP 14
5372: NOT
5373: IFFALSE 5431
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5375: LD_ADDR_EXP 14
5379: PUSH
5380: LD_STRING Bobby
5382: PPUSH
5383: LD_INT 1
5385: PPUSH
5386: LD_VAR 0 11
5390: PPUSH
5391: CALL 38342 0 3
5395: ST_TO_ADDR
// if Bobby then
5396: LD_EXP 14
5400: IFFALSE 5431
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5402: LD_ADDR_VAR 0 7
5406: PUSH
5407: LD_VAR 0 7
5411: PPUSH
5412: LD_VAR 0 7
5416: PUSH
5417: LD_INT 1
5419: PLUS
5420: PPUSH
5421: LD_EXP 14
5425: PPUSH
5426: CALL_OW 1
5430: ST_TO_ADDR
// end ; if not Cyrus then
5431: LD_EXP 15
5435: NOT
5436: IFFALSE 5494
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5438: LD_ADDR_EXP 15
5442: PUSH
5443: LD_STRING Cyrus
5445: PPUSH
5446: LD_INT 1
5448: PPUSH
5449: LD_VAR 0 11
5453: PPUSH
5454: CALL 38342 0 3
5458: ST_TO_ADDR
// if Cyrus then
5459: LD_EXP 15
5463: IFFALSE 5494
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5465: LD_ADDR_VAR 0 7
5469: PUSH
5470: LD_VAR 0 7
5474: PPUSH
5475: LD_VAR 0 7
5479: PUSH
5480: LD_INT 1
5482: PLUS
5483: PPUSH
5484: LD_EXP 15
5488: PPUSH
5489: CALL_OW 1
5493: ST_TO_ADDR
// end ; if not Lisa then
5494: LD_EXP 16
5498: NOT
5499: IFFALSE 5560
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5501: LD_ADDR_EXP 16
5505: PUSH
5506: LD_STRING Lisa
5508: PPUSH
5509: LD_EXP 1
5513: NOT
5514: PPUSH
5515: LD_VAR 0 11
5519: PPUSH
5520: CALL 38342 0 3
5524: ST_TO_ADDR
// if Lisa then
5525: LD_EXP 16
5529: IFFALSE 5560
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5531: LD_ADDR_VAR 0 7
5535: PUSH
5536: LD_VAR 0 7
5540: PPUSH
5541: LD_VAR 0 7
5545: PUSH
5546: LD_INT 1
5548: PLUS
5549: PPUSH
5550: LD_EXP 16
5554: PPUSH
5555: CALL_OW 1
5559: ST_TO_ADDR
// end ; if not Frank then
5560: LD_EXP 17
5564: NOT
5565: IFFALSE 5626
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5567: LD_ADDR_EXP 17
5571: PUSH
5572: LD_STRING Frank
5574: PPUSH
5575: LD_EXP 1
5579: NOT
5580: PPUSH
5581: LD_VAR 0 11
5585: PPUSH
5586: CALL 38342 0 3
5590: ST_TO_ADDR
// if Frank then
5591: LD_EXP 17
5595: IFFALSE 5626
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5597: LD_ADDR_VAR 0 7
5601: PUSH
5602: LD_VAR 0 7
5606: PPUSH
5607: LD_VAR 0 7
5611: PUSH
5612: LD_INT 1
5614: PLUS
5615: PPUSH
5616: LD_EXP 17
5620: PPUSH
5621: CALL_OW 1
5625: ST_TO_ADDR
// end ; if not Kikuchi then
5626: LD_EXP 19
5630: NOT
5631: IFFALSE 5689
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5633: LD_ADDR_EXP 19
5637: PUSH
5638: LD_STRING Kikuchi
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: LD_VAR 0 11
5648: PPUSH
5649: CALL 38342 0 3
5653: ST_TO_ADDR
// if Kikuchi then
5654: LD_EXP 19
5658: IFFALSE 5689
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5660: LD_ADDR_VAR 0 7
5664: PUSH
5665: LD_VAR 0 7
5669: PPUSH
5670: LD_VAR 0 7
5674: PUSH
5675: LD_INT 1
5677: PLUS
5678: PPUSH
5679: LD_EXP 19
5683: PPUSH
5684: CALL_OW 1
5688: ST_TO_ADDR
// end ; if not Gladstone then
5689: LD_EXP 18
5693: NOT
5694: IFFALSE 5755
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5696: LD_ADDR_EXP 18
5700: PUSH
5701: LD_STRING Gladstone
5703: PPUSH
5704: LD_EXP 1
5708: NOT
5709: PPUSH
5710: LD_VAR 0 11
5714: PPUSH
5715: CALL 38342 0 3
5719: ST_TO_ADDR
// if Gladstone then
5720: LD_EXP 18
5724: IFFALSE 5755
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5726: LD_ADDR_VAR 0 7
5730: PUSH
5731: LD_VAR 0 7
5735: PPUSH
5736: LD_VAR 0 7
5740: PUSH
5741: LD_INT 1
5743: PLUS
5744: PPUSH
5745: LD_EXP 18
5749: PPUSH
5750: CALL_OW 1
5754: ST_TO_ADDR
// end ; if not Khatam then
5755: LD_EXP 20
5759: NOT
5760: IFFALSE 5818
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5762: LD_ADDR_EXP 20
5766: PUSH
5767: LD_STRING Khatam
5769: PPUSH
5770: LD_INT 1
5772: PPUSH
5773: LD_VAR 0 11
5777: PPUSH
5778: CALL 38342 0 3
5782: ST_TO_ADDR
// if Khatam then
5783: LD_EXP 20
5787: IFFALSE 5818
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5789: LD_ADDR_VAR 0 7
5793: PUSH
5794: LD_VAR 0 7
5798: PPUSH
5799: LD_VAR 0 7
5803: PUSH
5804: LD_INT 1
5806: PLUS
5807: PPUSH
5808: LD_EXP 20
5812: PPUSH
5813: CALL_OW 1
5817: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5818: LD_ADDR_VAR 0 5
5822: PUSH
5823: LD_STRING 07c_others
5825: PPUSH
5826: CALL_OW 31
5830: ST_TO_ADDR
// squad := others ;
5831: LD_ADDR_VAR 0 6
5835: PUSH
5836: LD_VAR 0 5
5840: ST_TO_ADDR
// if others then
5841: LD_VAR 0 5
5845: IFFALSE 5945
// for i in others do
5847: LD_ADDR_VAR 0 2
5851: PUSH
5852: LD_VAR 0 5
5856: PUSH
5857: FOR_IN
5858: IFFALSE 5943
// begin SetTag ( i , 108 ) ;
5860: LD_VAR 0 2
5864: PPUSH
5865: LD_INT 108
5867: PPUSH
5868: CALL_OW 109
// if GetClass ( i ) = class_mechanic then
5872: LD_VAR 0 2
5876: PPUSH
5877: CALL_OW 257
5881: PUSH
5882: LD_INT 3
5884: EQUAL
5885: IFFALSE 5912
// tmp := Insert ( tmp , 1 , i ) else
5887: LD_ADDR_VAR 0 7
5891: PUSH
5892: LD_VAR 0 7
5896: PPUSH
5897: LD_INT 1
5899: PPUSH
5900: LD_VAR 0 2
5904: PPUSH
5905: CALL_OW 2
5909: ST_TO_ADDR
5910: GO 5941
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5912: LD_ADDR_VAR 0 7
5916: PUSH
5917: LD_VAR 0 7
5921: PPUSH
5922: LD_VAR 0 7
5926: PUSH
5927: LD_INT 1
5929: PLUS
5930: PPUSH
5931: LD_VAR 0 2
5935: PPUSH
5936: CALL_OW 1
5940: ST_TO_ADDR
// end ;
5941: GO 5857
5943: POP
5944: POP
// if tmp then
5945: LD_VAR 0 7
5949: IFFALSE 6149
// begin for i in tmp do
5951: LD_ADDR_VAR 0 2
5955: PUSH
5956: LD_VAR 0 7
5960: PUSH
5961: FOR_IN
5962: IFFALSE 6147
// begin SetDir ( i , dir ) ;
5964: LD_VAR 0 2
5968: PPUSH
5969: LD_VAR 0 13
5973: PPUSH
5974: CALL_OW 233
// if tmpVehs then
5978: LD_VAR 0 8
5982: IFFALSE 6072
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5984: LD_VAR 0 8
5988: PUSH
5989: LD_INT 1
5991: ARRAY
5992: PPUSH
5993: LD_INT 0
5995: PPUSH
5996: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
6000: LD_VAR 0 8
6004: PUSH
6005: LD_INT 1
6007: ARRAY
6008: PPUSH
6009: LD_VAR 0 15
6013: PUSH
6014: LD_INT 1
6016: ARRAY
6017: PPUSH
6018: LD_VAR 0 15
6022: PUSH
6023: LD_INT 2
6025: ARRAY
6026: PPUSH
6027: LD_INT 0
6029: PPUSH
6030: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6034: LD_VAR 0 2
6038: PPUSH
6039: LD_VAR 0 8
6043: PUSH
6044: LD_INT 1
6046: ARRAY
6047: PPUSH
6048: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 8
6061: PPUSH
6062: LD_INT 1
6064: PPUSH
6065: CALL_OW 3
6069: ST_TO_ADDR
// end else
6070: GO 6089
// PlaceUnitArea ( i , area , false ) ;
6072: LD_VAR 0 2
6076: PPUSH
6077: LD_VAR 0 12
6081: PPUSH
6082: LD_INT 0
6084: PPUSH
6085: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6089: LD_VAR 0 2
6093: PPUSH
6094: LD_VAR 0 14
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: LD_VAR 0 14
6107: PUSH
6108: LD_INT 2
6110: ARRAY
6111: PPUSH
6112: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6116: LD_INT 35
6118: PPUSH
6119: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6123: LD_VAR 0 12
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_INT 1
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 70
6142: NOT
6143: IFFALSE 6116
// end ;
6145: GO 5961
6147: POP
6148: POP
// end ; PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6149: LD_EXP 11
6153: PPUSH
6154: LD_VAR 0 15
6158: PUSH
6159: LD_INT 1
6161: ARRAY
6162: PPUSH
6163: LD_VAR 0 15
6167: PUSH
6168: LD_INT 2
6170: ARRAY
6171: PPUSH
6172: LD_INT 0
6174: PPUSH
6175: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6179: LD_EXP 11
6183: PPUSH
6184: LD_VAR 0 14
6188: PUSH
6189: LD_INT 1
6191: ARRAY
6192: PPUSH
6193: LD_VAR 0 14
6197: PUSH
6198: LD_INT 2
6200: ARRAY
6201: PPUSH
6202: CALL_OW 111
// jmmArrival := true ;
6206: LD_ADDR_EXP 7
6210: PUSH
6211: LD_INT 1
6213: ST_TO_ADDR
// end ;
6214: LD_VAR 0 1
6218: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6219: LD_INT 0
6221: PPUSH
6222: PPUSH
6223: PPUSH
6224: PPUSH
6225: PPUSH
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6226: LD_ADDR_VAR 0 5
6230: PUSH
6231: LD_INT 6
6233: PPUSH
6234: LD_INT 3
6236: PUSH
6237: LD_INT 21
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PPUSH
6251: CALL_OW 70
6255: ST_TO_ADDR
// if tmp then
6256: LD_VAR 0 5
6260: IFFALSE 6284
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6262: LD_VAR 0 5
6266: PPUSH
6267: LD_INT 33
6269: PPUSH
6270: LD_INT 39
6272: PPUSH
6273: CALL_OW 111
// wait ( 0 0$3 ) ;
6277: LD_INT 105
6279: PPUSH
6280: CALL_OW 67
// end ; uc_side := 4 ;
6284: LD_ADDR_OWVAR 20
6288: PUSH
6289: LD_INT 4
6291: ST_TO_ADDR
// uc_nation := 1 ;
6292: LD_ADDR_OWVAR 21
6296: PUSH
6297: LD_INT 1
6299: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6300: LD_ADDR_EXP 24
6304: PUSH
6305: LD_STRING Sikorski
6307: PPUSH
6308: LD_INT 0
6310: PPUSH
6311: LD_STRING 
6313: PPUSH
6314: CALL 38342 0 3
6318: ST_TO_ADDR
// vc_engine := engine_combustion ;
6319: LD_ADDR_OWVAR 39
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// vc_control := control_manual ;
6327: LD_ADDR_OWVAR 38
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6335: LD_ADDR_OWVAR 40
6339: PUSH
6340: LD_INT 6
6342: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6343: LD_ADDR_OWVAR 37
6347: PUSH
6348: LD_INT 4
6350: ST_TO_ADDR
// veh := CreateVehicle ;
6351: LD_ADDR_VAR 0 4
6355: PUSH
6356: CALL_OW 45
6360: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6361: LD_VAR 0 4
6365: PPUSH
6366: LD_INT 3
6368: PPUSH
6369: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_INT 4
6380: NEG
6381: PPUSH
6382: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6386: LD_VAR 0 4
6390: PPUSH
6391: LD_INT 70
6393: PPUSH
6394: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6398: LD_VAR 0 4
6402: PPUSH
6403: LD_INT 6
6405: PPUSH
6406: LD_INT 0
6408: PPUSH
6409: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6413: LD_EXP 24
6417: PPUSH
6418: LD_VAR 0 4
6422: PPUSH
6423: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6427: LD_EXP 24
6431: PPUSH
6432: LD_INT 37
6434: PPUSH
6435: LD_INT 30
6437: PPUSH
6438: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6442: LD_INT 10
6444: PPUSH
6445: CALL_OW 67
// InitHc_All ( ) ;
6449: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6453: LD_ADDR_VAR 0 2
6457: PUSH
6458: DOUBLE
6459: LD_INT 1
6461: DEC
6462: ST_TO_ADDR
6463: LD_INT 3
6465: PUSH
6466: LD_INT 2
6468: PUSH
6469: LD_INT 2
6471: PUSH
6472: LD_INT 2
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: PUSH
6481: LD_OWVAR 67
6485: ARRAY
6486: PUSH
6487: FOR_TO
6488: IFFALSE 6600
// begin uc_side := 4 ;
6490: LD_ADDR_OWVAR 20
6494: PUSH
6495: LD_INT 4
6497: ST_TO_ADDR
// uc_nation := 1 ;
6498: LD_ADDR_OWVAR 21
6502: PUSH
6503: LD_INT 1
6505: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6506: LD_INT 0
6508: PPUSH
6509: LD_INT 1
6511: PPUSH
6512: LD_INT 4
6514: PPUSH
6515: LD_INT 7
6517: PPUSH
6518: CALL_OW 12
6522: PPUSH
6523: CALL_OW 380
// un := CreateHuman ;
6527: LD_ADDR_VAR 0 3
6531: PUSH
6532: CALL_OW 44
6536: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6537: LD_VAR 0 3
6541: PPUSH
6542: LD_INT 3
6544: PPUSH
6545: CALL_OW 233
// SetTag ( un , 101 ) ;
6549: LD_VAR 0 3
6553: PPUSH
6554: LD_INT 101
6556: PPUSH
6557: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6561: LD_VAR 0 3
6565: PPUSH
6566: LD_INT 6
6568: PPUSH
6569: LD_INT 0
6571: PPUSH
6572: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6576: LD_VAR 0 3
6580: PPUSH
6581: LD_INT 25
6583: PPUSH
6584: LD_INT 27
6586: PPUSH
6587: CALL_OW 111
// wait ( 0 0$1 ) ;
6591: LD_INT 35
6593: PPUSH
6594: CALL_OW 67
// end ;
6598: GO 6487
6600: POP
6601: POP
// for i := 1 to 2 do
6602: LD_ADDR_VAR 0 2
6606: PUSH
6607: DOUBLE
6608: LD_INT 1
6610: DEC
6611: ST_TO_ADDR
6612: LD_INT 2
6614: PUSH
6615: FOR_TO
6616: IFFALSE 6728
// begin uc_side := 4 ;
6618: LD_ADDR_OWVAR 20
6622: PUSH
6623: LD_INT 4
6625: ST_TO_ADDR
// uc_nation := 1 ;
6626: LD_ADDR_OWVAR 21
6630: PUSH
6631: LD_INT 1
6633: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6634: LD_INT 0
6636: PPUSH
6637: LD_INT 4
6639: PPUSH
6640: LD_INT 3
6642: PPUSH
6643: LD_INT 5
6645: PPUSH
6646: CALL_OW 12
6650: PPUSH
6651: CALL_OW 380
// un := CreateHuman ;
6655: LD_ADDR_VAR 0 3
6659: PUSH
6660: CALL_OW 44
6664: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6665: LD_VAR 0 3
6669: PPUSH
6670: LD_INT 3
6672: PPUSH
6673: CALL_OW 233
// SetTag ( un , 101 ) ;
6677: LD_VAR 0 3
6681: PPUSH
6682: LD_INT 101
6684: PPUSH
6685: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6689: LD_VAR 0 3
6693: PPUSH
6694: LD_INT 6
6696: PPUSH
6697: LD_INT 0
6699: PPUSH
6700: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6704: LD_VAR 0 3
6708: PPUSH
6709: LD_INT 25
6711: PPUSH
6712: LD_INT 27
6714: PPUSH
6715: CALL_OW 111
// wait ( 0 0$1 ) ;
6719: LD_INT 35
6721: PPUSH
6722: CALL_OW 67
// end ;
6726: GO 6615
6728: POP
6729: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6730: LD_ADDR_VAR 0 2
6734: PUSH
6735: DOUBLE
6736: LD_INT 1
6738: DEC
6739: ST_TO_ADDR
6740: LD_INT 5
6742: PUSH
6743: LD_INT 4
6745: PUSH
6746: LD_INT 3
6748: PUSH
6749: LD_INT 3
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: PUSH
6758: LD_OWVAR 67
6762: ARRAY
6763: PUSH
6764: FOR_TO
6765: IFFALSE 7007
// begin uc_side := 4 ;
6767: LD_ADDR_OWVAR 20
6771: PUSH
6772: LD_INT 4
6774: ST_TO_ADDR
// uc_nation := 1 ;
6775: LD_ADDR_OWVAR 21
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// vc_engine := engine_combustion ;
6783: LD_ADDR_OWVAR 39
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// vc_control := control_manual ;
6791: LD_ADDR_OWVAR 38
6795: PUSH
6796: LD_INT 1
6798: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6799: LD_ADDR_OWVAR 40
6803: PUSH
6804: LD_INT 5
6806: PUSH
6807: LD_INT 7
6809: PUSH
6810: LD_INT 5
6812: PUSH
6813: LD_INT 4
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: PUSH
6822: LD_VAR 0 2
6826: PUSH
6827: LD_INT 4
6829: MOD
6830: PUSH
6831: LD_INT 1
6833: PLUS
6834: ARRAY
6835: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6836: LD_ADDR_OWVAR 37
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 4
6849: PUSH
6850: LD_INT 4
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: PUSH
6859: LD_VAR 0 2
6863: PUSH
6864: LD_INT 4
6866: MOD
6867: PUSH
6868: LD_INT 1
6870: PLUS
6871: ARRAY
6872: ST_TO_ADDR
// veh := CreateVehicle ;
6873: LD_ADDR_VAR 0 4
6877: PUSH
6878: CALL_OW 45
6882: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6883: LD_VAR 0 4
6887: PPUSH
6888: LD_INT 3
6890: PPUSH
6891: CALL_OW 233
// SetTag ( veh , 0 ) ;
6895: LD_VAR 0 4
6899: PPUSH
6900: LD_INT 0
6902: PPUSH
6903: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6907: LD_VAR 0 4
6911: PPUSH
6912: LD_INT 70
6914: PPUSH
6915: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6919: LD_VAR 0 4
6923: PPUSH
6924: LD_INT 6
6926: PPUSH
6927: LD_INT 0
6929: PPUSH
6930: CALL_OW 49
// InitHc ;
6934: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
6938: LD_INT 0
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: LD_INT 4
6946: PPUSH
6947: LD_INT 7
6949: PPUSH
6950: CALL_OW 12
6954: PPUSH
6955: CALL_OW 380
// un := CreateHuman ;
6959: LD_ADDR_VAR 0 3
6963: PUSH
6964: CALL_OW 44
6968: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6969: LD_VAR 0 3
6973: PPUSH
6974: LD_VAR 0 4
6978: PPUSH
6979: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
6983: LD_VAR 0 3
6987: PPUSH
6988: LD_INT 30
6990: PPUSH
6991: LD_INT 22
6993: PPUSH
6994: CALL_OW 111
// wait ( 0 0$3 ) ;
6998: LD_INT 105
7000: PPUSH
7001: CALL_OW 67
// end ;
7005: GO 6764
7007: POP
7008: POP
// wait ( 0 0$10 ) ;
7009: LD_INT 350
7011: PPUSH
7012: CALL_OW 67
// end ;
7016: LD_VAR 0 1
7020: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7021: LD_INT 0
7023: PPUSH
7024: PPUSH
7025: PPUSH
7026: PPUSH
// gammaBase := [ ] ;
7027: LD_ADDR_VAR 0 4
7031: PUSH
7032: EMPTY
7033: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7034: LD_ADDR_VAR 0 5
7038: PUSH
7039: LD_VAR 0 1
7043: PPUSH
7044: LD_INT 22
7046: PUSH
7047: LD_INT 1
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 21
7056: PUSH
7057: LD_INT 3
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 50
7066: PUSH
7067: EMPTY
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 70
7079: ST_TO_ADDR
// for i in buildings do
7080: LD_ADDR_VAR 0 3
7084: PUSH
7085: LD_VAR 0 5
7089: PUSH
7090: FOR_IN
7091: IFFALSE 7528
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7093: LD_VAR 0 3
7097: PPUSH
7098: CALL_OW 266
7102: PUSH
7103: LD_INT 6
7105: PUSH
7106: LD_INT 7
7108: PUSH
7109: LD_INT 8
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: LIST
7116: IN
7117: IFFALSE 7231
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7119: LD_ADDR_VAR 0 4
7123: PUSH
7124: LD_VAR 0 4
7128: PUSH
7129: LD_VAR 0 3
7133: PPUSH
7134: CALL_OW 266
7138: PUSH
7139: LD_VAR 0 3
7143: PPUSH
7144: CALL_OW 250
7148: PUSH
7149: LD_VAR 0 3
7153: PPUSH
7154: CALL_OW 251
7158: PUSH
7159: LD_VAR 0 3
7163: PPUSH
7164: CALL_OW 254
7168: PUSH
7169: LD_VAR 0 3
7173: PPUSH
7174: CALL_OW 267
7178: PUSH
7179: LD_VAR 0 3
7183: PPUSH
7184: CALL_OW 248
7188: PUSH
7189: LD_VAR 0 3
7193: PPUSH
7194: LD_INT 1
7196: PPUSH
7197: CALL_OW 268
7201: PUSH
7202: LD_VAR 0 3
7206: PPUSH
7207: LD_INT 2
7209: PPUSH
7210: CALL_OW 268
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: PUSH
7225: EMPTY
7226: LIST
7227: ADD
7228: ST_TO_ADDR
7229: GO 7526
// if GetBType ( i ) = b_bunker then
7231: LD_VAR 0 3
7235: PPUSH
7236: CALL_OW 266
7240: PUSH
7241: LD_INT 32
7243: EQUAL
7244: IFFALSE 7341
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7246: LD_ADDR_VAR 0 4
7250: PUSH
7251: LD_VAR 0 4
7255: PUSH
7256: LD_VAR 0 3
7260: PPUSH
7261: CALL_OW 266
7265: PUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL_OW 250
7275: PUSH
7276: LD_VAR 0 3
7280: PPUSH
7281: CALL_OW 251
7285: PUSH
7286: LD_VAR 0 3
7290: PPUSH
7291: CALL_OW 254
7295: PUSH
7296: LD_VAR 0 3
7300: PPUSH
7301: CALL_OW 267
7305: PUSH
7306: LD_VAR 0 3
7310: PPUSH
7311: CALL_OW 248
7315: PUSH
7316: LD_VAR 0 3
7320: PPUSH
7321: CALL_OW 269
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: PUSH
7335: EMPTY
7336: LIST
7337: ADD
7338: ST_TO_ADDR
7339: GO 7526
// if GetBType ( i ) = b_factory then
7341: LD_VAR 0 3
7345: PPUSH
7346: CALL_OW 266
7350: PUSH
7351: LD_INT 3
7353: EQUAL
7354: IFFALSE 7444
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7356: LD_ADDR_VAR 0 4
7360: PUSH
7361: LD_VAR 0 4
7365: PPUSH
7366: LD_INT 1
7368: PPUSH
7369: LD_VAR 0 3
7373: PPUSH
7374: CALL_OW 266
7378: PUSH
7379: LD_VAR 0 3
7383: PPUSH
7384: CALL_OW 250
7388: PUSH
7389: LD_VAR 0 3
7393: PPUSH
7394: CALL_OW 251
7398: PUSH
7399: LD_VAR 0 3
7403: PPUSH
7404: CALL_OW 254
7408: PUSH
7409: LD_VAR 0 3
7413: PPUSH
7414: CALL_OW 267
7418: PUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 248
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: PPUSH
7437: CALL_OW 2
7441: ST_TO_ADDR
7442: GO 7526
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7444: LD_ADDR_VAR 0 4
7448: PUSH
7449: LD_VAR 0 4
7453: PUSH
7454: LD_VAR 0 3
7458: PPUSH
7459: CALL_OW 266
7463: PUSH
7464: LD_VAR 0 3
7468: PPUSH
7469: CALL_OW 250
7473: PUSH
7474: LD_VAR 0 3
7478: PPUSH
7479: CALL_OW 251
7483: PUSH
7484: LD_VAR 0 3
7488: PPUSH
7489: CALL_OW 254
7493: PUSH
7494: LD_VAR 0 3
7498: PPUSH
7499: CALL_OW 267
7503: PUSH
7504: LD_VAR 0 3
7508: PPUSH
7509: CALL_OW 248
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: ADD
7525: ST_TO_ADDR
// end ;
7526: GO 7090
7528: POP
7529: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7530: LD_VAR 0 4
7534: PPUSH
7535: LD_STRING 08_GammaBase
7537: PPUSH
7538: CALL_OW 39
// end ;
7542: LD_VAR 0 2
7546: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7547: LD_INT 0
7549: PPUSH
7550: PPUSH
7551: PPUSH
7552: PPUSH
7553: PPUSH
7554: PPUSH
7555: PPUSH
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7556: LD_ADDR_VAR 0 3
7560: PUSH
7561: LD_INT 22
7563: PUSH
7564: LD_INT 4
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 69
7575: ST_TO_ADDR
// ComAgressiveMove ( tmp , 55 , 62 ) ;
7576: LD_VAR 0 3
7580: PPUSH
7581: LD_INT 55
7583: PPUSH
7584: LD_INT 62
7586: PPUSH
7587: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
7591: LD_VAR 0 3
7595: PPUSH
7596: LD_INT 175
7598: PPUSH
7599: CALL_OW 202
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
7603: LD_VAR 0 3
7607: PPUSH
7608: LD_INT 120
7610: PUSH
7611: LD_INT 101
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PPUSH
7618: CALL_OW 72
7622: PPUSH
7623: LD_INT 58
7625: PPUSH
7626: LD_INT 96
7628: PPUSH
7629: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
7633: LD_VAR 0 3
7637: PPUSH
7638: LD_INT 120
7640: PUSH
7641: LD_INT 101
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 72
7652: PPUSH
7653: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
7657: LD_VAR 0 3
7661: PPUSH
7662: LD_INT 120
7664: PUSH
7665: LD_INT 101
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 25
7674: PUSH
7675: LD_INT 4
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: PPUSH
7691: LD_INT 52
7693: PPUSH
7694: LD_INT 93
7696: PPUSH
7697: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
7701: LD_VAR 0 3
7705: PPUSH
7706: LD_INT 120
7708: PUSH
7709: LD_INT 101
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 25
7718: PUSH
7719: LD_INT 4
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PPUSH
7730: CALL_OW 72
7734: PPUSH
7735: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
7739: LD_ADDR_VAR 0 7
7743: PUSH
7744: LD_VAR 0 3
7748: PPUSH
7749: LD_INT 21
7751: PUSH
7752: LD_INT 2
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PPUSH
7759: CALL_OW 72
7763: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
7764: LD_ADDR_VAR 0 4
7768: PUSH
7769: LD_INT 81
7771: PUSH
7772: LD_INT 1
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PPUSH
7779: CALL_OW 69
7783: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
7784: LD_ADDR_VAR 0 5
7788: PUSH
7789: LD_INT 57
7791: PUSH
7792: LD_INT 66
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 62
7801: PUSH
7802: LD_INT 58
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7813: LD_INT 35
7815: PPUSH
7816: CALL_OW 67
// for i in filter do
7820: LD_ADDR_VAR 0 2
7824: PUSH
7825: LD_VAR 0 7
7829: PUSH
7830: FOR_IN
7831: IFFALSE 8270
// begin if IsDead ( i ) then
7833: LD_VAR 0 2
7837: PPUSH
7838: CALL_OW 301
7842: IFFALSE 7862
// begin filter := filter diff i ;
7844: LD_ADDR_VAR 0 7
7848: PUSH
7849: LD_VAR 0 7
7853: PUSH
7854: LD_VAR 0 2
7858: DIFF
7859: ST_TO_ADDR
// continue ;
7860: GO 7830
// end ; tmp := IsDrivenBy ( i ) ;
7862: LD_ADDR_VAR 0 3
7866: PUSH
7867: LD_VAR 0 2
7871: PPUSH
7872: CALL_OW 311
7876: ST_TO_ADDR
// if not tmp then
7877: LD_VAR 0 3
7881: NOT
7882: IFFALSE 7886
// continue ;
7884: GO 7830
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
7886: LD_VAR 0 2
7890: PPUSH
7891: CALL_OW 261
7895: PUSH
7896: LD_INT 30
7898: GREATER
7899: PUSH
7900: LD_VAR 0 2
7904: PPUSH
7905: CALL_OW 110
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: AND
7914: IFFALSE 7930
// SetTag ( i , 0 ) else
7916: LD_VAR 0 2
7920: PPUSH
7921: LD_INT 0
7923: PPUSH
7924: CALL_OW 109
7928: GO 7974
// if GetTag ( i ) = 2 then
7930: LD_VAR 0 2
7934: PPUSH
7935: CALL_OW 110
7939: PUSH
7940: LD_INT 2
7942: EQUAL
7943: IFFALSE 7974
// begin ComMoveXY ( i , 52 , 50 ) ;
7945: LD_VAR 0 2
7949: PPUSH
7950: LD_INT 52
7952: PPUSH
7953: LD_INT 50
7955: PPUSH
7956: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
7960: LD_VAR 0 2
7964: PPUSH
7965: LD_EXP 27
7969: PPUSH
7970: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
7974: LD_VAR 0 2
7978: PPUSH
7979: CALL_OW 256
7983: PUSH
7984: LD_INT 600
7986: GREATEREQUAL
7987: PUSH
7988: LD_VAR 0 2
7992: PPUSH
7993: CALL_OW 110
7997: NOT
7998: AND
7999: IFFALSE 8025
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8001: LD_VAR 0 2
8005: PPUSH
8006: LD_VAR 0 4
8010: PPUSH
8011: LD_VAR 0 2
8015: PPUSH
8016: CALL_OW 74
8020: PPUSH
8021: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8025: LD_VAR 0 2
8029: PPUSH
8030: CALL_OW 256
8034: PUSH
8035: LD_INT 600
8037: LESS
8038: PUSH
8039: LD_VAR 0 2
8043: PPUSH
8044: CALL_OW 110
8048: NOT
8049: AND
8050: IFFALSE 8126
// begin SetTag ( i , 1 ) ;
8052: LD_VAR 0 2
8056: PPUSH
8057: LD_INT 1
8059: PPUSH
8060: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8064: LD_ADDR_VAR 0 6
8068: PUSH
8069: LD_VAR 0 2
8073: PPUSH
8074: LD_VAR 0 5
8078: PPUSH
8079: CALL 79062 0 2
8083: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8084: LD_VAR 0 2
8088: PPUSH
8089: LD_VAR 0 6
8093: PUSH
8094: LD_INT 1
8096: ARRAY
8097: PPUSH
8098: LD_VAR 0 6
8102: PUSH
8103: LD_INT 2
8105: ARRAY
8106: PPUSH
8107: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8111: LD_VAR 0 2
8115: PPUSH
8116: LD_INT 40
8118: PPUSH
8119: LD_INT 49
8121: PPUSH
8122: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8126: LD_VAR 0 2
8130: PPUSH
8131: CALL_OW 110
8135: PUSH
8136: LD_INT 1
8138: EQUAL
8139: PUSH
8140: LD_VAR 0 2
8144: PPUSH
8145: LD_INT 40
8147: PPUSH
8148: LD_INT 49
8150: PPUSH
8151: CALL_OW 297
8155: PUSH
8156: LD_INT 9
8158: LESS
8159: AND
8160: PUSH
8161: LD_VAR 0 3
8165: AND
8166: IFFALSE 8268
// begin ComExitVehicle ( tmp ) ;
8168: LD_VAR 0 3
8172: PPUSH
8173: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8177: LD_VAR 0 3
8181: PPUSH
8182: LD_VAR 0 2
8186: PPUSH
8187: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8191: LD_INT 35
8193: PPUSH
8194: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8198: LD_VAR 0 2
8202: PPUSH
8203: CALL_OW 256
8207: PUSH
8208: LD_INT 1000
8210: EQUAL
8211: IFFALSE 8191
// ComEnterUnit ( tmp , i ) ;
8213: LD_VAR 0 3
8217: PPUSH
8218: LD_VAR 0 2
8222: PPUSH
8223: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8227: LD_VAR 0 2
8231: PPUSH
8232: CALL_OW 261
8236: PUSH
8237: LD_INT 40
8239: LESSEQUAL
8240: IFFALSE 8256
// SetTag ( i , 2 ) else
8242: LD_VAR 0 2
8246: PPUSH
8247: LD_INT 2
8249: PPUSH
8250: CALL_OW 109
8254: GO 8268
// SetTag ( i , 0 ) ;
8256: LD_VAR 0 2
8260: PPUSH
8261: LD_INT 0
8263: PPUSH
8264: CALL_OW 109
// end ; end ;
8268: GO 7830
8270: POP
8271: POP
// until not filter ;
8272: LD_VAR 0 7
8276: NOT
8277: IFFALSE 7813
// end ; end_of_file
8279: LD_VAR 0 1
8283: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8284: LD_INT 0
8286: PPUSH
8287: PPUSH
8288: PPUSH
8289: PPUSH
8290: PPUSH
// uc_side := 3 ;
8291: LD_ADDR_OWVAR 20
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// uc_nation := 3 ;
8299: LD_ADDR_OWVAR 21
8303: PUSH
8304: LD_INT 3
8306: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
8307: LD_ADDR_EXP 29
8311: PUSH
8312: LD_INT 8
8314: PUSH
8315: LD_INT 11
8317: PUSH
8318: LD_INT 14
8320: PUSH
8321: LD_INT 17
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: PUSH
8330: LD_OWVAR 67
8334: ARRAY
8335: ST_TO_ADDR
// ruMobile := [ ] ;
8336: LD_ADDR_EXP 30
8340: PUSH
8341: EMPTY
8342: ST_TO_ADDR
// ruBuildList := [ ] ;
8343: LD_ADDR_EXP 31
8347: PUSH
8348: EMPTY
8349: ST_TO_ADDR
// russianAttackers := [ ] ;
8350: LD_ADDR_EXP 32
8354: PUSH
8355: EMPTY
8356: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8357: LD_ADDR_VAR 0 5
8361: PUSH
8362: LD_INT 43
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 46
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: ST_TO_ADDR
// if Difficulty > 2 then
8376: LD_OWVAR 67
8380: PUSH
8381: LD_INT 2
8383: GREATER
8384: IFFALSE 8407
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8386: LD_ADDR_VAR 0 5
8390: PUSH
8391: LD_VAR 0 5
8395: PUSH
8396: LD_INT 45
8398: PUSH
8399: LD_INT 46
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: ADD
8406: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8407: LD_ADDR_EXP 28
8411: PUSH
8412: LD_STRING Borodin
8414: PPUSH
8415: CALL_OW 25
8419: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8420: LD_EXP 28
8424: PPUSH
8425: LD_INT 28
8427: PPUSH
8428: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8432: LD_INT 28
8434: PPUSH
8435: CALL_OW 274
8439: PPUSH
8440: LD_INT 1
8442: PPUSH
8443: LD_INT 3000
8445: PUSH
8446: LD_INT 4000
8448: PUSH
8449: LD_INT 5000
8451: PUSH
8452: LD_INT 6000
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: PUSH
8461: LD_OWVAR 67
8465: ARRAY
8466: PPUSH
8467: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
8471: LD_INT 28
8473: PPUSH
8474: CALL_OW 274
8478: PPUSH
8479: LD_INT 2
8481: PPUSH
8482: LD_INT 1000
8484: PPUSH
8485: CALL_OW 277
// if Difficulty > 2 then
8489: LD_OWVAR 67
8493: PUSH
8494: LD_INT 2
8496: GREATER
8497: IFFALSE 8621
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
8499: LD_ADDR_VAR 0 4
8503: PUSH
8504: LD_INT 99
8506: PUSH
8507: LD_INT 130
8509: PUSH
8510: LD_INT 2
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 121
8520: PUSH
8521: LD_INT 127
8523: PUSH
8524: LD_INT 4
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 117
8534: PUSH
8535: LD_INT 121
8537: PUSH
8538: LD_INT 4
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: LIST
8550: ST_TO_ADDR
// for i in tmp do
8551: LD_ADDR_VAR 0 2
8555: PUSH
8556: LD_VAR 0 4
8560: PUSH
8561: FOR_IN
8562: IFFALSE 8619
// begin bc_type := b_turret ;
8564: LD_ADDR_OWVAR 42
8568: PUSH
8569: LD_INT 33
8571: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
8572: LD_ADDR_OWVAR 43
8576: PUSH
8577: LD_INT 2
8579: PUSH
8580: LD_OWVAR 67
8584: PLUS
8585: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
8586: LD_VAR 0 2
8590: PUSH
8591: LD_INT 1
8593: ARRAY
8594: PPUSH
8595: LD_VAR 0 2
8599: PUSH
8600: LD_INT 2
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_INT 3
8611: ARRAY
8612: PPUSH
8613: CALL_OW 47
// end ;
8617: GO 8561
8619: POP
8620: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
8621: LD_ADDR_VAR 0 2
8625: PUSH
8626: LD_INT 22
8628: PUSH
8629: LD_INT 3
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 21
8638: PUSH
8639: LD_INT 3
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PPUSH
8650: CALL_OW 69
8654: PUSH
8655: FOR_IN
8656: IFFALSE 8678
// SetBLevel ( i , 2 + Difficulty ) ;
8658: LD_VAR 0 2
8662: PPUSH
8663: LD_INT 2
8665: PUSH
8666: LD_OWVAR 67
8670: PLUS
8671: PPUSH
8672: CALL_OW 241
8676: GO 8655
8678: POP
8679: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
8680: LD_ADDR_VAR 0 4
8684: PUSH
8685: LD_INT 22
8687: PUSH
8688: LD_INT 3
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: LD_INT 2
8697: PUSH
8698: LD_INT 30
8700: PUSH
8701: LD_INT 32
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 30
8710: PUSH
8711: LD_INT 33
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: LIST
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PPUSH
8727: CALL_OW 69
8731: ST_TO_ADDR
// for i in tmp do
8732: LD_ADDR_VAR 0 2
8736: PUSH
8737: LD_VAR 0 4
8741: PUSH
8742: FOR_IN
8743: IFFALSE 8775
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
8745: LD_VAR 0 2
8749: PPUSH
8750: LD_VAR 0 5
8754: PUSH
8755: LD_INT 1
8757: PPUSH
8758: LD_VAR 0 5
8762: PPUSH
8763: CALL_OW 12
8767: ARRAY
8768: PPUSH
8769: CALL_OW 431
8773: GO 8742
8775: POP
8776: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
8777: LD_ADDR_VAR 0 2
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 3
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 30
8794: PUSH
8795: LD_INT 32
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: FOR_IN
8812: IFFALSE 8861
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8814: LD_INT 0
8816: PPUSH
8817: LD_INT 5
8819: PUSH
8820: LD_INT 6
8822: PUSH
8823: LD_INT 7
8825: PUSH
8826: LD_INT 8
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: PUSH
8835: LD_OWVAR 67
8839: ARRAY
8840: PPUSH
8841: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8845: CALL_OW 44
8849: PPUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: CALL_OW 52
// end ;
8859: GO 8811
8861: POP
8862: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
8863: LD_ADDR_VAR 0 2
8867: PUSH
8868: LD_INT 22
8870: PUSH
8871: LD_INT 3
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 30
8880: PUSH
8881: LD_INT 5
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PPUSH
8892: CALL_OW 69
8896: PUSH
8897: FOR_IN
8898: IFFALSE 8988
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
8900: LD_ADDR_VAR 0 3
8904: PUSH
8905: DOUBLE
8906: LD_INT 1
8908: DEC
8909: ST_TO_ADDR
8910: LD_INT 2
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: LD_INT 3
8918: PUSH
8919: LD_INT 3
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: PUSH
8928: LD_OWVAR 67
8932: ARRAY
8933: PUSH
8934: FOR_TO
8935: IFFALSE 8984
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8937: LD_INT 0
8939: PPUSH
8940: LD_INT 5
8942: PUSH
8943: LD_INT 6
8945: PUSH
8946: LD_INT 7
8948: PUSH
8949: LD_INT 8
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: PUSH
8958: LD_OWVAR 67
8962: ARRAY
8963: PPUSH
8964: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8968: CALL_OW 44
8972: PPUSH
8973: LD_VAR 0 2
8977: PPUSH
8978: CALL_OW 52
// end ;
8982: GO 8934
8984: POP
8985: POP
// end ;
8986: GO 8897
8988: POP
8989: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
8990: LD_ADDR_VAR 0 2
8994: PUSH
8995: DOUBLE
8996: LD_INT 1
8998: DEC
8999: ST_TO_ADDR
9000: LD_INT 3
9002: PUSH
9003: LD_INT 4
9005: PUSH
9006: LD_INT 5
9008: PUSH
9009: LD_INT 5
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: PUSH
9018: LD_OWVAR 67
9022: ARRAY
9023: PUSH
9024: FOR_TO
9025: IFFALSE 9072
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9027: LD_INT 0
9029: PPUSH
9030: LD_INT 4
9032: PUSH
9033: LD_INT 5
9035: PUSH
9036: LD_INT 5
9038: PUSH
9039: LD_INT 6
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: PUSH
9048: LD_OWVAR 67
9052: ARRAY
9053: PPUSH
9054: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9058: CALL_OW 44
9062: PPUSH
9063: LD_INT 28
9065: PPUSH
9066: CALL_OW 52
// end ;
9070: GO 9024
9072: POP
9073: POP
// for i := 1 to 2 do
9074: LD_ADDR_VAR 0 2
9078: PUSH
9079: DOUBLE
9080: LD_INT 1
9082: DEC
9083: ST_TO_ADDR
9084: LD_INT 2
9086: PUSH
9087: FOR_TO
9088: IFFALSE 9122
// begin PrepareScientist ( false , 6 ) ;
9090: LD_INT 0
9092: PPUSH
9093: LD_INT 6
9095: PPUSH
9096: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9100: CALL_OW 44
9104: PPUSH
9105: LD_INT 81
9107: PPUSH
9108: LD_INT 93
9110: PPUSH
9111: CALL_OW 428
9115: PPUSH
9116: CALL_OW 52
// end ;
9120: GO 9087
9122: POP
9123: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9124: LD_INT 22
9126: PPUSH
9127: LD_INT 1
9129: PPUSH
9130: LD_INT 3
9132: PPUSH
9133: LD_INT 51
9135: PPUSH
9136: LD_INT 100
9138: PPUSH
9139: CALL 43357 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9143: CALL_OW 45
9147: PPUSH
9148: LD_INT 91
9150: PPUSH
9151: LD_INT 94
9153: PPUSH
9154: LD_INT 3
9156: PPUSH
9157: LD_INT 0
9159: PPUSH
9160: CALL_OW 50
// for i := 1 to 2 do
9164: LD_ADDR_VAR 0 2
9168: PUSH
9169: DOUBLE
9170: LD_INT 1
9172: DEC
9173: ST_TO_ADDR
9174: LD_INT 2
9176: PUSH
9177: FOR_TO
9178: IFFALSE 9222
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9180: LD_INT 22
9182: PPUSH
9183: LD_INT 1
9185: PPUSH
9186: LD_INT 3
9188: PPUSH
9189: LD_INT 52
9191: PPUSH
9192: LD_INT 100
9194: PPUSH
9195: CALL 43357 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9199: CALL_OW 45
9203: PPUSH
9204: LD_INT 91
9206: PPUSH
9207: LD_INT 94
9209: PPUSH
9210: LD_INT 4
9212: PPUSH
9213: LD_INT 0
9215: PPUSH
9216: CALL_OW 50
// end ;
9220: GO 9177
9222: POP
9223: POP
// end ;
9224: LD_VAR 0 1
9228: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9229: LD_INT 0
9231: PPUSH
9232: PPUSH
9233: PPUSH
9234: PPUSH
9235: PPUSH
// uc_side := 3 ;
9236: LD_ADDR_OWVAR 20
9240: PUSH
9241: LD_INT 3
9243: ST_TO_ADDR
// uc_nation := 3 ;
9244: LD_ADDR_OWVAR 21
9248: PUSH
9249: LD_INT 3
9251: ST_TO_ADDR
// for i := 1 to 4 do
9252: LD_ADDR_VAR 0 2
9256: PUSH
9257: DOUBLE
9258: LD_INT 1
9260: DEC
9261: ST_TO_ADDR
9262: LD_INT 4
9264: PUSH
9265: FOR_TO
9266: IFFALSE 9393
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9268: LD_INT 22
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: LD_INT 1
9276: PPUSH
9277: LD_INT 42
9279: PUSH
9280: LD_INT 43
9282: PUSH
9283: LD_INT 44
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: PUSH
9291: LD_INT 1
9293: PPUSH
9294: LD_INT 3
9296: PPUSH
9297: CALL_OW 12
9301: ARRAY
9302: PPUSH
9303: LD_INT 40
9305: PPUSH
9306: CALL 43357 0 5
// veh := CreateVehicle ;
9310: LD_ADDR_VAR 0 4
9314: PUSH
9315: CALL_OW 45
9319: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9320: LD_VAR 0 4
9324: PPUSH
9325: LD_INT 5
9327: PPUSH
9328: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9332: LD_VAR 0 4
9336: PPUSH
9337: LD_INT 7
9339: PPUSH
9340: LD_INT 0
9342: PPUSH
9343: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9347: LD_INT 0
9349: PPUSH
9350: LD_INT 5
9352: PPUSH
9353: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9357: CALL_OW 44
9361: PPUSH
9362: LD_VAR 0 4
9366: PPUSH
9367: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9371: LD_ADDR_VAR 0 5
9375: PUSH
9376: LD_VAR 0 5
9380: PPUSH
9381: LD_VAR 0 4
9385: PPUSH
9386: CALL 75718 0 2
9390: ST_TO_ADDR
// end ;
9391: GO 9265
9393: POP
9394: POP
// for i := 1 to 3 do
9395: LD_ADDR_VAR 0 2
9399: PUSH
9400: DOUBLE
9401: LD_INT 1
9403: DEC
9404: ST_TO_ADDR
9405: LD_INT 3
9407: PUSH
9408: FOR_TO
9409: IFFALSE 9536
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9411: LD_INT 22
9413: PPUSH
9414: LD_INT 1
9416: PPUSH
9417: LD_INT 1
9419: PPUSH
9420: LD_INT 42
9422: PUSH
9423: LD_INT 43
9425: PUSH
9426: LD_INT 44
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 1
9436: PPUSH
9437: LD_INT 3
9439: PPUSH
9440: CALL_OW 12
9444: ARRAY
9445: PPUSH
9446: LD_INT 40
9448: PPUSH
9449: CALL 43357 0 5
// veh := CreateVehicle ;
9453: LD_ADDR_VAR 0 4
9457: PUSH
9458: CALL_OW 45
9462: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9463: LD_VAR 0 4
9467: PPUSH
9468: LD_INT 5
9470: PPUSH
9471: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
9475: LD_VAR 0 4
9479: PPUSH
9480: LD_INT 8
9482: PPUSH
9483: LD_INT 0
9485: PPUSH
9486: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9490: LD_INT 0
9492: PPUSH
9493: LD_INT 5
9495: PPUSH
9496: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9500: CALL_OW 44
9504: PPUSH
9505: LD_VAR 0 4
9509: PPUSH
9510: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9514: LD_ADDR_VAR 0 5
9518: PUSH
9519: LD_VAR 0 5
9523: PPUSH
9524: LD_VAR 0 4
9528: PPUSH
9529: CALL 75718 0 2
9533: ST_TO_ADDR
// end ;
9534: GO 9408
9536: POP
9537: POP
// for i := 1 to 2 do
9538: LD_ADDR_VAR 0 2
9542: PUSH
9543: DOUBLE
9544: LD_INT 1
9546: DEC
9547: ST_TO_ADDR
9548: LD_INT 2
9550: PUSH
9551: FOR_TO
9552: IFFALSE 9611
// begin PrepareSoldier ( false , 5 ) ;
9554: LD_INT 0
9556: PPUSH
9557: LD_INT 5
9559: PPUSH
9560: CALL_OW 381
// un := CreateHuman ;
9564: LD_ADDR_VAR 0 3
9568: PUSH
9569: CALL_OW 44
9573: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
9574: LD_VAR 0 3
9578: PPUSH
9579: LD_INT 8
9581: PPUSH
9582: LD_INT 0
9584: PPUSH
9585: CALL_OW 49
// tmp := Join ( tmp , un ) ;
9589: LD_ADDR_VAR 0 5
9593: PUSH
9594: LD_VAR 0 5
9598: PPUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: CALL 75718 0 2
9608: ST_TO_ADDR
// end ;
9609: GO 9551
9611: POP
9612: POP
// for i in tmp do
9613: LD_ADDR_VAR 0 2
9617: PUSH
9618: LD_VAR 0 5
9622: PUSH
9623: FOR_IN
9624: IFFALSE 9643
// ComAgressiveMove ( i , 51 , 16 ) ;
9626: LD_VAR 0 2
9630: PPUSH
9631: LD_INT 51
9633: PPUSH
9634: LD_INT 16
9636: PPUSH
9637: CALL_OW 114
9641: GO 9623
9643: POP
9644: POP
// end ;
9645: LD_VAR 0 1
9649: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
9650: LD_EXP 30
9654: IFFALSE 10229
9656: GO 9658
9658: DISABLE
9659: LD_INT 0
9661: PPUSH
9662: PPUSH
9663: PPUSH
// begin enable ;
9664: ENABLE
// if not ruMobile then
9665: LD_EXP 30
9669: NOT
9670: IFFALSE 9674
// exit ;
9672: GO 10229
// for i in ruMobile do
9674: LD_ADDR_VAR 0 1
9678: PUSH
9679: LD_EXP 30
9683: PUSH
9684: FOR_IN
9685: IFFALSE 10227
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
9687: LD_VAR 0 1
9691: PPUSH
9692: CALL_OW 302
9696: NOT
9697: PUSH
9698: LD_VAR 0 1
9702: PPUSH
9703: CALL_OW 255
9707: PUSH
9708: LD_INT 3
9710: NONEQUAL
9711: OR
9712: IFFALSE 9732
// begin ruMobile := ruMobile diff i ;
9714: LD_ADDR_EXP 30
9718: PUSH
9719: LD_EXP 30
9723: PUSH
9724: LD_VAR 0 1
9728: DIFF
9729: ST_TO_ADDR
// continue ;
9730: GO 9684
// end ; if GetTag ( i ) = 300 then
9732: LD_VAR 0 1
9736: PPUSH
9737: CALL_OW 110
9741: PUSH
9742: LD_INT 300
9744: EQUAL
9745: IFFALSE 9860
// begin if GetFuel ( i ) < 50 then
9747: LD_VAR 0 1
9751: PPUSH
9752: CALL_OW 261
9756: PUSH
9757: LD_INT 50
9759: LESS
9760: IFFALSE 9819
// begin ComMoveXY ( i , 93 , 100 ) ;
9762: LD_VAR 0 1
9766: PPUSH
9767: LD_INT 93
9769: PPUSH
9770: LD_INT 100
9772: PPUSH
9773: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9777: LD_INT 35
9779: PPUSH
9780: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
9784: LD_VAR 0 1
9788: PPUSH
9789: LD_INT 93
9791: PPUSH
9792: LD_INT 100
9794: PPUSH
9795: CALL_OW 297
9799: PUSH
9800: LD_INT 4
9802: LESS
9803: IFFALSE 9777
// SetFuel ( i , 100 ) ;
9805: LD_VAR 0 1
9809: PPUSH
9810: LD_INT 100
9812: PPUSH
9813: CALL_OW 240
// end else
9817: GO 9860
// if not IsInArea ( i , ruParkingArea ) then
9819: LD_VAR 0 1
9823: PPUSH
9824: LD_INT 10
9826: PPUSH
9827: CALL_OW 308
9831: NOT
9832: IFFALSE 9848
// ComMoveToArea ( i , ruParkingArea ) else
9834: LD_VAR 0 1
9838: PPUSH
9839: LD_INT 10
9841: PPUSH
9842: CALL_OW 113
9846: GO 9860
// SetTag ( i , 301 ) ;
9848: LD_VAR 0 1
9852: PPUSH
9853: LD_INT 301
9855: PPUSH
9856: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
9860: LD_VAR 0 1
9864: PPUSH
9865: CALL_OW 110
9869: PUSH
9870: LD_INT 301
9872: EQUAL
9873: IFFALSE 10003
// begin if GetLives ( i ) < 1000 then
9875: LD_VAR 0 1
9879: PPUSH
9880: CALL_OW 256
9884: PUSH
9885: LD_INT 1000
9887: LESS
9888: IFFALSE 9980
// begin if not IsDrivenBy ( i ) then
9890: LD_VAR 0 1
9894: PPUSH
9895: CALL_OW 311
9899: NOT
9900: IFFALSE 9904
// continue ;
9902: GO 9684
// mech := IsDrivenBy ( i ) ;
9904: LD_ADDR_VAR 0 2
9908: PUSH
9909: LD_VAR 0 1
9913: PPUSH
9914: CALL_OW 311
9918: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9919: LD_VAR 0 2
9923: PPUSH
9924: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9928: LD_VAR 0 2
9932: PPUSH
9933: LD_VAR 0 1
9937: PPUSH
9938: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9942: LD_INT 35
9944: PPUSH
9945: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9949: LD_VAR 0 1
9953: PPUSH
9954: CALL_OW 256
9958: PUSH
9959: LD_INT 1000
9961: EQUAL
9962: IFFALSE 9942
// ComEnterUnit ( mech , i ) ;
9964: LD_VAR 0 2
9968: PPUSH
9969: LD_VAR 0 1
9973: PPUSH
9974: CALL_OW 120
// end else
9978: GO 10003
// if IsDrivenBy ( i ) then
9980: LD_VAR 0 1
9984: PPUSH
9985: CALL_OW 311
9989: IFFALSE 10003
// SetTag ( i , 0 ) ;
9991: LD_VAR 0 1
9995: PPUSH
9996: LD_INT 0
9998: PPUSH
9999: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10003: LD_VAR 0 1
10007: PPUSH
10008: CALL_OW 110
10012: PUSH
10013: LD_INT 300
10015: LESS
10016: IFFALSE 10225
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10018: LD_ADDR_VAR 0 3
10022: PUSH
10023: LD_INT 11
10025: PPUSH
10026: LD_INT 81
10028: PUSH
10029: LD_INT 3
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PPUSH
10036: CALL_OW 70
10040: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10041: LD_VAR 0 1
10045: PPUSH
10046: CALL_OW 256
10050: PUSH
10051: LD_INT 650
10053: LESS
10054: IFFALSE 10079
// begin ComStop ( i ) ;
10056: LD_VAR 0 1
10060: PPUSH
10061: CALL_OW 141
// SetTag ( i , 300 ) ;
10065: LD_VAR 0 1
10069: PPUSH
10070: LD_INT 300
10072: PPUSH
10073: CALL_OW 109
// continue ;
10077: GO 9684
// end ; if enemy then
10079: LD_VAR 0 3
10083: IFFALSE 10123
// begin if not HasTask ( i ) then
10085: LD_VAR 0 1
10089: PPUSH
10090: CALL_OW 314
10094: NOT
10095: IFFALSE 10121
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10097: LD_VAR 0 1
10101: PPUSH
10102: LD_VAR 0 3
10106: PPUSH
10107: LD_VAR 0 1
10111: PPUSH
10112: CALL_OW 74
10116: PPUSH
10117: CALL_OW 115
// end else
10121: GO 10225
// if ruMobile > 2 then
10123: LD_EXP 30
10127: PUSH
10128: LD_INT 2
10130: GREATER
10131: IFFALSE 10225
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10133: LD_ADDR_VAR 0 3
10137: PUSH
10138: LD_INT 81
10140: PUSH
10141: LD_INT 3
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PPUSH
10148: CALL_OW 69
10152: ST_TO_ADDR
// if enemy then
10153: LD_VAR 0 3
10157: IFFALSE 10225
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10159: LD_VAR 0 1
10163: PPUSH
10164: LD_INT 116
10166: PUSH
10167: LD_INT 95
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: LD_INT 84
10176: PUSH
10177: LD_INT 68
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 58
10186: PUSH
10187: LD_INT 53
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 44
10196: PUSH
10197: LD_INT 35
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 45
10206: PUSH
10207: LD_INT 23
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: PPUSH
10221: CALL 78322 0 2
// end ; end ; end ;
10225: GO 9684
10227: POP
10228: POP
// end ;
10229: PPOPN 3
10231: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10232: LD_INT 3
10234: PUSH
10235: LD_INT 22
10237: PUSH
10238: LD_INT 1
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 32
10251: PUSH
10252: LD_INT 1
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PPUSH
10263: CALL_OW 69
10267: IFFALSE 10351
10269: GO 10271
10271: DISABLE
10272: LD_INT 0
10274: PPUSH
// begin enable ;
10275: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10276: LD_ADDR_VAR 0 1
10280: PUSH
10281: LD_INT 3
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 1
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 32
10300: PUSH
10301: LD_INT 1
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: FOR_IN
10318: IFFALSE 10349
// if GetFuel ( i ) < 3 then
10320: LD_VAR 0 1
10324: PPUSH
10325: CALL_OW 261
10329: PUSH
10330: LD_INT 3
10332: LESS
10333: IFFALSE 10347
// SetFuel ( i , 3 ) ;
10335: LD_VAR 0 1
10339: PPUSH
10340: LD_INT 3
10342: PPUSH
10343: CALL_OW 240
10347: GO 10317
10349: POP
10350: POP
// end ;
10351: PPOPN 1
10353: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10354: LD_INT 29
10356: PPUSH
10357: CALL_OW 302
10361: PUSH
10362: LD_INT 29
10364: PPUSH
10365: CALL_OW 461
10369: PUSH
10370: LD_INT 2
10372: EQUAL
10373: AND
10374: IFFALSE 10607
10376: GO 10378
10378: DISABLE
10379: LD_INT 0
10381: PPUSH
10382: PPUSH
// begin enable ;
10383: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10384: LD_ADDR_VAR 0 1
10388: PUSH
10389: LD_INT 21
10391: PUSH
10392: LD_INT 22
10394: PUSH
10395: LD_INT 23
10397: PUSH
10398: LD_INT 24
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 1
10409: PPUSH
10410: LD_INT 4
10412: PPUSH
10413: CALL_OW 12
10417: ARRAY
10418: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10419: LD_ADDR_VAR 0 2
10423: PUSH
10424: LD_INT 42
10426: PUSH
10427: LD_INT 44
10429: PUSH
10430: LD_INT 43
10432: PUSH
10433: LD_INT 46
10435: PUSH
10436: LD_INT 45
10438: PUSH
10439: LD_INT 46
10441: PUSH
10442: LD_INT 45
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: PUSH
10454: LD_OWVAR 67
10458: PUSH
10459: LD_INT 0
10461: PPUSH
10462: LD_INT 3
10464: PPUSH
10465: CALL_OW 12
10469: PLUS
10470: ARRAY
10471: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
10472: LD_VAR 0 1
10476: PUSH
10477: LD_INT 21
10479: PUSH
10480: LD_INT 22
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: IN
10487: PUSH
10488: LD_VAR 0 2
10492: PUSH
10493: LD_INT 46
10495: EQUAL
10496: AND
10497: IFFALSE 10526
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10499: LD_ADDR_VAR 0 2
10503: PUSH
10504: LD_INT 44
10506: PUSH
10507: LD_INT 45
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 1
10516: PPUSH
10517: LD_INT 2
10519: PPUSH
10520: CALL_OW 12
10524: ARRAY
10525: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
10526: LD_OWVAR 1
10530: PUSH
10531: LD_INT 31500
10533: PUSH
10534: LD_INT 27300
10536: PUSH
10537: LD_INT 23100
10539: PUSH
10540: LD_INT 21000
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: PUSH
10549: LD_OWVAR 67
10553: ARRAY
10554: LESS
10555: IFFALSE 10584
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
10557: LD_ADDR_VAR 0 2
10561: PUSH
10562: LD_INT 44
10564: PUSH
10565: LD_INT 43
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 1
10574: PPUSH
10575: LD_INT 2
10577: PPUSH
10578: CALL_OW 12
10582: ARRAY
10583: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
10584: LD_INT 29
10586: PPUSH
10587: LD_VAR 0 1
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: LD_INT 1
10597: PPUSH
10598: LD_VAR 0 2
10602: PPUSH
10603: CALL_OW 185
// end ;
10607: PPOPN 2
10609: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
10610: LD_INT 28
10612: PPUSH
10613: CALL_OW 302
10617: IFFALSE 11456
10619: GO 10621
10621: DISABLE
10622: LD_INT 0
10624: PPUSH
10625: PPUSH
10626: PPUSH
10627: PPUSH
10628: PPUSH
10629: PPUSH
10630: PPUSH
10631: PPUSH
// begin enable ;
10632: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
10633: LD_ADDR_VAR 0 3
10637: PUSH
10638: LD_INT 12
10640: PPUSH
10641: LD_INT 3
10643: PUSH
10644: LD_INT 24
10646: PUSH
10647: LD_INT 1000
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 21
10660: PUSH
10661: LD_INT 3
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 70
10676: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10677: LD_ADDR_VAR 0 4
10681: PUSH
10682: LD_INT 22
10684: PUSH
10685: LD_INT 3
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: LD_INT 25
10694: PUSH
10695: LD_INT 2
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 69
10710: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
10711: LD_ADDR_VAR 0 5
10715: PUSH
10716: LD_INT 22
10718: PUSH
10719: LD_INT 3
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: LD_INT 34
10728: PUSH
10729: LD_INT 52
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
10745: LD_ADDR_VAR 0 7
10749: PUSH
10750: LD_INT 22
10752: PUSH
10753: LD_INT 3
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 25
10762: PUSH
10763: LD_INT 4
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PPUSH
10774: CALL_OW 69
10778: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
10779: LD_ADDR_VAR 0 8
10783: PUSH
10784: LD_INT 81
10786: PPUSH
10787: LD_INT 93
10789: PPUSH
10790: CALL_OW 428
10794: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
10795: LD_VAR 0 7
10799: PUSH
10800: LD_VAR 0 4
10804: PPUSH
10805: LD_INT 120
10807: PUSH
10808: LD_INT 2
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: PPUSH
10815: CALL_OW 72
10819: AND
10820: IFFALSE 10833
// ComExitAll ( sci ) else
10822: LD_VAR 0 7
10826: PPUSH
10827: CALL 76199 0 1
10831: GO 10906
// if sci then
10833: LD_VAR 0 7
10837: IFFALSE 10906
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
10839: LD_VAR 0 7
10843: PPUSH
10844: LD_INT 3
10846: PUSH
10847: LD_INT 54
10849: PUSH
10850: EMPTY
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 72
10861: PUSH
10862: LD_VAR 0 8
10866: PPUSH
10867: CALL_OW 302
10871: AND
10872: IFFALSE 10906
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
10874: LD_VAR 0 7
10878: PPUSH
10879: LD_INT 3
10881: PUSH
10882: LD_INT 54
10884: PUSH
10885: EMPTY
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PPUSH
10892: CALL_OW 72
10896: PPUSH
10897: LD_VAR 0 8
10901: PPUSH
10902: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
10906: LD_VAR 0 5
10910: PPUSH
10911: LD_INT 50
10913: PUSH
10914: EMPTY
10915: LIST
10916: PPUSH
10917: CALL_OW 72
10921: PUSH
10922: LD_VAR 0 3
10926: AND
10927: IFFALSE 10958
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
10929: LD_VAR 0 5
10933: PPUSH
10934: LD_INT 50
10936: PUSH
10937: EMPTY
10938: LIST
10939: PPUSH
10940: CALL_OW 72
10944: PPUSH
10945: LD_VAR 0 3
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PPUSH
10954: CALL_OW 130
// if eng then
10958: LD_VAR 0 4
10962: IFFALSE 11456
// begin for i in eng do
10964: LD_ADDR_VAR 0 1
10968: PUSH
10969: LD_VAR 0 4
10973: PUSH
10974: FOR_IN
10975: IFFALSE 11454
// begin tag := GetTag ( i ) ;
10977: LD_ADDR_VAR 0 6
10981: PUSH
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 110
10991: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
10992: LD_VAR 0 3
10996: NOT
10997: PUSH
10998: LD_EXP 31
11002: NOT
11003: AND
11004: PUSH
11005: LD_VAR 0 6
11009: PUSH
11010: LD_INT 1
11012: EQUAL
11013: AND
11014: IFFALSE 11040
// begin SetTag ( i , 0 ) ;
11016: LD_VAR 0 1
11020: PPUSH
11021: LD_INT 0
11023: PPUSH
11024: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
11028: LD_VAR 0 1
11032: PPUSH
11033: LD_INT 28
11035: PPUSH
11036: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
11040: LD_VAR 0 3
11044: PUSH
11045: LD_EXP 31
11049: OR
11050: PUSH
11051: LD_VAR 0 6
11055: PUSH
11056: LD_INT 0
11058: EQUAL
11059: AND
11060: IFFALSE 11074
// SetTag ( i , 1 ) ;
11062: LD_VAR 0 1
11066: PPUSH
11067: LD_INT 1
11069: PPUSH
11070: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 310
11083: PUSH
11084: LD_VAR 0 6
11088: PUSH
11089: LD_INT 1
11091: EQUAL
11092: AND
11093: IFFALSE 11104
// ComExit ( i ) ;
11095: LD_VAR 0 1
11099: PPUSH
11100: CALL 76116 0 1
// if GetLives ( i ) < 500 and tag = 1 then
11104: LD_VAR 0 1
11108: PPUSH
11109: CALL_OW 256
11113: PUSH
11114: LD_INT 500
11116: LESS
11117: PUSH
11118: LD_VAR 0 6
11122: PUSH
11123: LD_INT 1
11125: EQUAL
11126: AND
11127: IFFALSE 11141
// SetTag ( i , 2 ) ;
11129: LD_VAR 0 1
11133: PPUSH
11134: LD_INT 2
11136: PPUSH
11137: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
11141: LD_VAR 0 1
11145: PPUSH
11146: CALL_OW 256
11150: PUSH
11151: LD_INT 1000
11153: EQUAL
11154: PUSH
11155: LD_VAR 0 6
11159: PUSH
11160: LD_INT 2
11162: EQUAL
11163: AND
11164: IFFALSE 11178
// SetTag ( i , 1 ) ;
11166: LD_VAR 0 1
11170: PPUSH
11171: LD_INT 1
11173: PPUSH
11174: CALL_OW 109
// if tag = 2 then
11178: LD_VAR 0 6
11182: PUSH
11183: LD_INT 2
11185: EQUAL
11186: IFFALSE 11233
// begin if GetDistUnitXY ( i , 84 , 93 ) > 6 then
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_INT 84
11195: PPUSH
11196: LD_INT 93
11198: PPUSH
11199: CALL_OW 297
11203: PUSH
11204: LD_INT 6
11206: GREATER
11207: IFFALSE 11233
// begin ComMoveXY ( i , 84 , 93 ) ;
11209: LD_VAR 0 1
11213: PPUSH
11214: LD_INT 84
11216: PPUSH
11217: LD_INT 93
11219: PPUSH
11220: CALL_OW 111
// AddComHold ( i ) ;
11224: LD_VAR 0 1
11228: PPUSH
11229: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
11233: LD_VAR 0 1
11237: PPUSH
11238: LD_INT 11
11240: PPUSH
11241: CALL_OW 308
11245: IFFALSE 11259
// ComMoveToArea ( i , ruBaseArea ) ;
11247: LD_VAR 0 1
11251: PPUSH
11252: LD_INT 12
11254: PPUSH
11255: CALL_OW 113
// if tag = 1 then
11259: LD_VAR 0 6
11263: PUSH
11264: LD_INT 1
11266: EQUAL
11267: IFFALSE 11452
// begin if b then
11269: LD_VAR 0 3
11273: IFFALSE 11301
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
11275: LD_VAR 0 1
11279: PPUSH
11280: LD_VAR 0 3
11284: PPUSH
11285: LD_VAR 0 1
11289: PPUSH
11290: CALL_OW 74
11294: PPUSH
11295: CALL_OW 130
11299: GO 11452
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11301: LD_EXP 31
11305: PUSH
11306: LD_INT 11
11308: PPUSH
11309: LD_INT 81
11311: PUSH
11312: LD_INT 3
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PPUSH
11319: CALL_OW 70
11323: PUSH
11324: LD_INT 0
11326: EQUAL
11327: AND
11328: PUSH
11329: LD_INT 28
11331: PPUSH
11332: LD_EXP 31
11336: PUSH
11337: LD_INT 1
11339: ARRAY
11340: PUSH
11341: LD_INT 1
11343: ARRAY
11344: PPUSH
11345: LD_EXP 31
11349: PUSH
11350: LD_INT 1
11352: ARRAY
11353: PUSH
11354: LD_INT 2
11356: ARRAY
11357: PPUSH
11358: LD_EXP 31
11362: PUSH
11363: LD_INT 1
11365: ARRAY
11366: PUSH
11367: LD_INT 3
11369: ARRAY
11370: PPUSH
11371: LD_EXP 31
11375: PUSH
11376: LD_INT 1
11378: ARRAY
11379: PUSH
11380: LD_INT 4
11382: ARRAY
11383: PPUSH
11384: CALL 51576 0 5
11388: AND
11389: IFFALSE 11452
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11391: LD_VAR 0 1
11395: PPUSH
11396: LD_EXP 31
11400: PUSH
11401: LD_INT 1
11403: ARRAY
11404: PUSH
11405: LD_INT 1
11407: ARRAY
11408: PPUSH
11409: LD_EXP 31
11413: PUSH
11414: LD_INT 1
11416: ARRAY
11417: PUSH
11418: LD_INT 2
11420: ARRAY
11421: PPUSH
11422: LD_EXP 31
11426: PUSH
11427: LD_INT 1
11429: ARRAY
11430: PUSH
11431: LD_INT 3
11433: ARRAY
11434: PPUSH
11435: LD_EXP 31
11439: PUSH
11440: LD_INT 1
11442: ARRAY
11443: PUSH
11444: LD_INT 4
11446: ARRAY
11447: PPUSH
11448: CALL_OW 145
// end ; end ;
11452: GO 10974
11454: POP
11455: POP
// end ; end ;
11456: PPOPN 8
11458: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
11459: LD_INT 0
11461: PPUSH
11462: PPUSH
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
11467: LD_ADDR_VAR 0 3
11471: PUSH
11472: DOUBLE
11473: LD_INT 1
11475: DEC
11476: ST_TO_ADDR
11477: LD_INT 3
11479: PUSH
11480: LD_INT 4
11482: PUSH
11483: LD_INT 5
11485: PUSH
11486: LD_INT 6
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: PUSH
11495: LD_OWVAR 67
11499: ARRAY
11500: PUSH
11501: LD_VAR 0 1
11505: PLUS
11506: PUSH
11507: FOR_TO
11508: IFFALSE 11825
// begin uc_side := 6 ;
11510: LD_ADDR_OWVAR 20
11514: PUSH
11515: LD_INT 6
11517: ST_TO_ADDR
// uc_nation := 3 ;
11518: LD_ADDR_OWVAR 21
11522: PUSH
11523: LD_INT 3
11525: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11526: LD_ADDR_VAR 0 6
11530: PUSH
11531: LD_INT 21
11533: PUSH
11534: LD_INT 22
11536: PUSH
11537: LD_INT 23
11539: PUSH
11540: LD_INT 24
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 1
11551: PPUSH
11552: LD_INT 4
11554: PPUSH
11555: CALL_OW 12
11559: ARRAY
11560: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11561: LD_ADDR_VAR 0 7
11565: PUSH
11566: LD_INT 42
11568: PUSH
11569: LD_INT 44
11571: PUSH
11572: LD_INT 43
11574: PUSH
11575: LD_INT 46
11577: PUSH
11578: LD_INT 45
11580: PUSH
11581: LD_INT 46
11583: PUSH
11584: LD_INT 45
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: PUSH
11596: LD_OWVAR 67
11600: PUSH
11601: LD_INT 0
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: CALL_OW 12
11611: PLUS
11612: ARRAY
11613: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11614: LD_VAR 0 6
11618: PUSH
11619: LD_INT 21
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: IN
11629: PUSH
11630: LD_VAR 0 7
11634: PUSH
11635: LD_INT 46
11637: EQUAL
11638: AND
11639: IFFALSE 11668
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11641: LD_ADDR_VAR 0 7
11645: PUSH
11646: LD_INT 44
11648: PUSH
11649: LD_INT 45
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 1
11658: PPUSH
11659: LD_INT 2
11661: PPUSH
11662: CALL_OW 12
11666: ARRAY
11667: ST_TO_ADDR
// if tick < [ 17 17$00 , 15 15$00 , 13 13$00 , 11 11$00 ] [ Difficulty ] then
11668: LD_OWVAR 1
11672: PUSH
11673: LD_INT 35700
11675: PUSH
11676: LD_INT 31500
11678: PUSH
11679: LD_INT 27300
11681: PUSH
11682: LD_INT 23100
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: PUSH
11691: LD_OWVAR 67
11695: ARRAY
11696: LESS
11697: IFFALSE 11730
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
11699: LD_ADDR_VAR 0 7
11703: PUSH
11704: LD_INT 44
11706: PUSH
11707: LD_INT 43
11709: PUSH
11710: LD_INT 42
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: PUSH
11718: LD_INT 1
11720: PPUSH
11721: LD_INT 3
11723: PPUSH
11724: CALL_OW 12
11728: ARRAY
11729: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
11730: LD_VAR 0 6
11734: PPUSH
11735: LD_INT 1
11737: PPUSH
11738: LD_INT 3
11740: PPUSH
11741: LD_VAR 0 7
11745: PPUSH
11746: LD_INT 90
11748: PPUSH
11749: CALL 43357 0 5
// un := CreateVehicle ;
11753: LD_ADDR_VAR 0 4
11757: PUSH
11758: CALL_OW 45
11762: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
11763: LD_VAR 0 4
11767: PPUSH
11768: LD_INT 140
11770: PPUSH
11771: LD_INT 146
11773: PPUSH
11774: LD_INT 0
11776: PPUSH
11777: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
11781: LD_VAR 0 4
11785: PPUSH
11786: LD_INT 131
11788: PPUSH
11789: LD_INT 128
11791: PPUSH
11792: CALL_OW 111
// wait ( 0 0$3 ) ;
11796: LD_INT 105
11798: PPUSH
11799: CALL_OW 67
// tmp := Join ( tmp , un ) ;
11803: LD_ADDR_VAR 0 5
11807: PUSH
11808: LD_VAR 0 5
11812: PPUSH
11813: LD_VAR 0 4
11817: PPUSH
11818: CALL 75718 0 2
11822: ST_TO_ADDR
// end ;
11823: GO 11507
11825: POP
11826: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
11827: LD_ADDR_EXP 32
11831: PUSH
11832: LD_EXP 32
11836: PPUSH
11837: LD_VAR 0 5
11841: PPUSH
11842: CALL 75755 0 2
11846: ST_TO_ADDR
// end ;
11847: LD_VAR 0 2
11851: RET
// every 0 0$3 trigger russianAttackers do
11852: LD_EXP 32
11856: IFFALSE 11939
11858: GO 11860
11860: DISABLE
// begin enable ;
11861: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
11862: LD_EXP 32
11866: PPUSH
11867: LD_INT 126
11869: PUSH
11870: LD_INT 108
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 107
11879: PUSH
11880: LD_INT 85
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: LD_INT 82
11889: PUSH
11890: LD_INT 62
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 73
11899: PUSH
11900: LD_INT 46
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 62
11909: PUSH
11910: LD_INT 31
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 52
11919: PUSH
11920: LD_INT 17
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL 78322 0 2
// end ; end_of_file
11939: END
// on SailEvent ( event ) do begin if event = 1 then
11940: LD_VAR 0 1
11944: PUSH
11945: LD_INT 1
11947: EQUAL
11948: IFFALSE 11963
// PrepareRussianAttack ( Difficulty + 3 ) ;
11950: LD_OWVAR 67
11954: PUSH
11955: LD_INT 3
11957: PLUS
11958: PPUSH
11959: CALL 11459 0 1
// end ;
11963: PPOPN 1
11965: END
// on UnitDestroyed ( un ) do var tmp , chassis , weapon , btype ;
11966: LD_INT 0
11968: PPUSH
11969: PPUSH
11970: PPUSH
11971: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL 34053 0 1
// if un = JMM then
11981: LD_VAR 0 1
11985: PUSH
11986: LD_EXP 11
11990: EQUAL
11991: IFFALSE 12000
// YouLost ( JMM ) ;
11993: LD_STRING JMM
11995: PPUSH
11996: CALL_OW 104
// if un = Sikorski then
12000: LD_VAR 0 1
12004: PUSH
12005: LD_EXP 24
12009: EQUAL
12010: IFFALSE 12036
// if sikorskiStatus = 0 then
12012: LD_EXP 8
12016: PUSH
12017: LD_INT 0
12019: EQUAL
12020: IFFALSE 12028
// SikorskiKilledInAction else
12022: CALL 16928 0 0
12026: GO 12036
// sikorskiIsKilled := true ;
12028: LD_ADDR_EXP 9
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12036: LD_VAR 0 1
12040: PPUSH
12041: CALL_OW 255
12045: PUSH
12046: LD_INT 1
12048: EQUAL
12049: PUSH
12050: LD_VAR 0 1
12054: PPUSH
12055: CALL_OW 266
12059: PUSH
12060: LD_INT 0
12062: PUSH
12063: LD_INT 1
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: IN
12070: AND
12071: IFFALSE 12080
// YouLost ( Destroyed ) ;
12073: LD_STRING Destroyed
12075: PPUSH
12076: CALL_OW 104
// if un in ruMobile then
12080: LD_VAR 0 1
12084: PUSH
12085: LD_EXP 30
12089: IN
12090: IFFALSE 12108
// ruMobile := ruMobile diff un ;
12092: LD_ADDR_EXP 30
12096: PUSH
12097: LD_EXP 30
12101: PUSH
12102: LD_VAR 0 1
12106: DIFF
12107: ST_TO_ADDR
// if GetSide ( un ) = 3 then
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 255
12117: PUSH
12118: LD_INT 3
12120: EQUAL
12121: IFFALSE 12699
// begin if GetType ( un ) = unit_building then
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 247
12132: PUSH
12133: LD_INT 3
12135: EQUAL
12136: IFFALSE 12272
// begin btype := GetBType ( un ) ;
12138: LD_ADDR_VAR 0 5
12142: PUSH
12143: LD_VAR 0 1
12147: PPUSH
12148: CALL_OW 266
12152: ST_TO_ADDR
// if btype = b_warehouse then
12153: LD_VAR 0 5
12157: PUSH
12158: LD_INT 1
12160: EQUAL
12161: IFFALSE 12171
// btype := b_depot ;
12163: LD_ADDR_VAR 0 5
12167: PUSH
12168: LD_INT 0
12170: ST_TO_ADDR
// if btype = b_barracks then
12171: LD_VAR 0 5
12175: PUSH
12176: LD_INT 5
12178: EQUAL
12179: IFFALSE 12189
// btype := b_armoury ;
12181: LD_ADDR_VAR 0 5
12185: PUSH
12186: LD_INT 4
12188: ST_TO_ADDR
// if btype = b_lab_full then
12189: LD_VAR 0 5
12193: PUSH
12194: LD_INT 8
12196: EQUAL
12197: IFFALSE 12207
// btype := b_lab ;
12199: LD_ADDR_VAR 0 5
12203: PUSH
12204: LD_INT 6
12206: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
12207: LD_ADDR_EXP 31
12211: PUSH
12212: LD_EXP 31
12216: PPUSH
12217: LD_EXP 31
12221: PUSH
12222: LD_INT 1
12224: PLUS
12225: PPUSH
12226: LD_VAR 0 5
12230: PUSH
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL_OW 250
12240: PUSH
12241: LD_VAR 0 1
12245: PPUSH
12246: CALL_OW 251
12250: PUSH
12251: LD_VAR 0 1
12255: PPUSH
12256: CALL_OW 254
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: PPUSH
12267: CALL_OW 1
12271: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12272: LD_VAR 0 1
12276: PPUSH
12277: CALL_OW 247
12281: PUSH
12282: LD_INT 2
12284: EQUAL
12285: IFFALSE 12560
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
12287: LD_VAR 0 1
12291: PPUSH
12292: CALL_OW 264
12296: PUSH
12297: LD_INT 52
12299: PUSH
12300: LD_INT 51
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: IN
12307: IFFALSE 12337
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
12309: LD_INT 29
12311: PPUSH
12312: LD_INT 22
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: LD_INT 3
12320: PPUSH
12321: LD_VAR 0 1
12325: PPUSH
12326: CALL_OW 264
12330: PPUSH
12331: CALL_OW 185
// end else
12335: GO 12560
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12337: LD_ADDR_VAR 0 3
12341: PUSH
12342: LD_INT 21
12344: PUSH
12345: LD_INT 22
12347: PUSH
12348: LD_INT 23
12350: PUSH
12351: LD_INT 24
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 1
12362: PPUSH
12363: LD_INT 4
12365: PPUSH
12366: CALL_OW 12
12370: ARRAY
12371: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12372: LD_ADDR_VAR 0 4
12376: PUSH
12377: LD_INT 42
12379: PUSH
12380: LD_INT 44
12382: PUSH
12383: LD_INT 43
12385: PUSH
12386: LD_INT 46
12388: PUSH
12389: LD_INT 45
12391: PUSH
12392: LD_INT 46
12394: PUSH
12395: LD_INT 45
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: PUSH
12407: LD_OWVAR 67
12411: PUSH
12412: LD_INT 0
12414: PPUSH
12415: LD_INT 3
12417: PPUSH
12418: CALL_OW 12
12422: PLUS
12423: ARRAY
12424: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 21
12432: PUSH
12433: LD_INT 22
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: IN
12440: PUSH
12441: LD_VAR 0 4
12445: PUSH
12446: LD_INT 46
12448: EQUAL
12449: AND
12450: IFFALSE 12479
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12452: LD_ADDR_VAR 0 4
12456: PUSH
12457: LD_INT 44
12459: PUSH
12460: LD_INT 45
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 1
12469: PPUSH
12470: LD_INT 2
12472: PPUSH
12473: CALL_OW 12
12477: ARRAY
12478: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
12479: LD_OWVAR 1
12483: PUSH
12484: LD_INT 31500
12486: PUSH
12487: LD_INT 27300
12489: PUSH
12490: LD_INT 23100
12492: PUSH
12493: LD_INT 21000
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: PUSH
12502: LD_OWVAR 67
12506: ARRAY
12507: LESS
12508: IFFALSE 12537
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
12510: LD_ADDR_VAR 0 4
12514: PUSH
12515: LD_INT 44
12517: PUSH
12518: LD_INT 43
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: LD_INT 1
12527: PPUSH
12528: LD_INT 2
12530: PPUSH
12531: CALL_OW 12
12535: ARRAY
12536: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
12537: LD_INT 29
12539: PPUSH
12540: LD_VAR 0 3
12544: PPUSH
12545: LD_INT 1
12547: PPUSH
12548: LD_INT 1
12550: PPUSH
12551: LD_VAR 0 4
12555: PPUSH
12556: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
12560: LD_VAR 0 1
12564: PPUSH
12565: CALL_OW 257
12569: PUSH
12570: LD_INT 3
12572: EQUAL
12573: IFFALSE 12699
// begin if ruMechCounter = 0 or not IsOk ( ruFac ) then
12575: LD_EXP 29
12579: PUSH
12580: LD_INT 0
12582: EQUAL
12583: PUSH
12584: LD_INT 29
12586: PPUSH
12587: CALL_OW 302
12591: NOT
12592: OR
12593: IFFALSE 12597
// exit ;
12595: GO 12699
// ruMechCounter := Dec ( ruMechCounter ) ;
12597: LD_ADDR_EXP 29
12601: PUSH
12602: LD_EXP 29
12606: PPUSH
12607: CALL 77101 0 1
12611: ST_TO_ADDR
// uc_side := 3 ;
12612: LD_ADDR_OWVAR 20
12616: PUSH
12617: LD_INT 3
12619: ST_TO_ADDR
// uc_nation := 3 ;
12620: LD_ADDR_OWVAR 21
12624: PUSH
12625: LD_INT 3
12627: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
12628: LD_INT 0
12630: PPUSH
12631: LD_INT 5
12633: PUSH
12634: LD_INT 6
12636: PUSH
12637: LD_INT 7
12639: PUSH
12640: LD_INT 8
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: PUSH
12649: LD_OWVAR 67
12653: ARRAY
12654: PPUSH
12655: CALL_OW 383
// tmp := CreateHuman ;
12659: LD_ADDR_VAR 0 2
12663: PUSH
12664: CALL_OW 44
12668: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
12669: LD_VAR 0 2
12673: PPUSH
12674: LD_INT 145
12676: PPUSH
12677: LD_INT 133
12679: PPUSH
12680: LD_INT 0
12682: PPUSH
12683: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
12687: LD_VAR 0 2
12691: PPUSH
12692: LD_INT 29
12694: PPUSH
12695: CALL_OW 120
// end ; end ; end ;
12699: PPOPN 5
12701: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
12702: LD_VAR 0 1
12706: PPUSH
12707: CALL_OW 255
12711: PUSH
12712: LD_INT 4
12714: EQUAL
12715: IFFALSE 12732
// ComMoveXY ( driver , 40 , 47 ) ;
12717: LD_VAR 0 1
12721: PPUSH
12722: LD_INT 40
12724: PPUSH
12725: LD_INT 47
12727: PPUSH
12728: CALL_OW 111
// if GetSide ( driver ) = 3 then
12732: LD_VAR 0 1
12736: PPUSH
12737: CALL_OW 255
12741: PUSH
12742: LD_INT 3
12744: EQUAL
12745: IFFALSE 12969
// begin ComMoveXY ( driver , 90 , 97 ) ;
12747: LD_VAR 0 1
12751: PPUSH
12752: LD_INT 90
12754: PPUSH
12755: LD_INT 97
12757: PPUSH
12758: CALL_OW 111
// if IsOk ( ruFac ) then
12762: LD_INT 29
12764: PPUSH
12765: CALL_OW 302
12769: IFFALSE 12893
// begin repeat wait ( 0 0$1 ) ;
12771: LD_INT 35
12773: PPUSH
12774: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
12778: LD_INT 29
12780: PPUSH
12781: CALL_OW 313
12785: PUSH
12786: LD_INT 6
12788: LESS
12789: PUSH
12790: LD_VAR 0 1
12794: PPUSH
12795: CALL_OW 301
12799: OR
12800: IFFALSE 12771
// if IsDead ( driver ) then
12802: LD_VAR 0 1
12806: PPUSH
12807: CALL_OW 301
12811: IFFALSE 12815
// exit ;
12813: GO 12969
// repeat wait ( 0 0$10 ) ;
12815: LD_INT 350
12817: PPUSH
12818: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
12822: LD_VAR 0 1
12826: PPUSH
12827: CALL_OW 314
12831: NOT
12832: PUSH
12833: LD_INT 29
12835: PPUSH
12836: CALL_OW 313
12840: PUSH
12841: LD_INT 6
12843: LESS
12844: AND
12845: IFFALSE 12859
// ComEnterUnit ( driver , ruFac ) ;
12847: LD_VAR 0 1
12851: PPUSH
12852: LD_INT 29
12854: PPUSH
12855: CALL_OW 120
// until not IsOk ( ruFac ) or IsDead ( driver ) or IsInUnit ( driver ) ;
12859: LD_INT 29
12861: PPUSH
12862: CALL_OW 302
12866: NOT
12867: PUSH
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 301
12877: OR
12878: PUSH
12879: LD_VAR 0 1
12883: PPUSH
12884: CALL_OW 310
12888: OR
12889: IFFALSE 12815
// end else
12891: GO 12969
// begin ComMoveXY ( driver , 142 , 148 ) ;
12893: LD_VAR 0 1
12897: PPUSH
12898: LD_INT 142
12900: PPUSH
12901: LD_INT 148
12903: PPUSH
12904: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12908: LD_INT 35
12910: PPUSH
12911: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
12915: LD_VAR 0 1
12919: PPUSH
12920: CALL_OW 301
12924: PUSH
12925: LD_VAR 0 1
12929: PPUSH
12930: LD_INT 142
12932: PPUSH
12933: LD_INT 148
12935: PPUSH
12936: CALL_OW 307
12940: OR
12941: IFFALSE 12908
// if IsAt ( driver , 142 , 148 ) then
12943: LD_VAR 0 1
12947: PPUSH
12948: LD_INT 142
12950: PPUSH
12951: LD_INT 148
12953: PPUSH
12954: CALL_OW 307
12958: IFFALSE 12969
// RemoveUnit ( driver ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: CALL_OW 64
// end ; end ; end ;
12969: PPOPN 4
12971: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
12972: LD_VAR 0 2
12976: PPUSH
12977: CALL_OW 257
12981: PUSH
12982: LD_INT 3
12984: EQUAL
12985: PUSH
12986: LD_VAR 0 1
12990: PPUSH
12991: CALL_OW 255
12995: PUSH
12996: LD_INT 3
12998: EQUAL
12999: AND
13000: PUSH
13001: LD_VAR 0 1
13005: PUSH
13006: LD_INT 29
13008: EQUAL
13009: AND
13010: IFFALSE 13024
// SetLives ( un , 1000 ) ;
13012: LD_VAR 0 2
13016: PPUSH
13017: LD_INT 1000
13019: PPUSH
13020: CALL_OW 234
// end ;
13024: PPOPN 2
13026: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
13027: LD_INT 0
13029: PPUSH
13030: PPUSH
// begin if GetSide ( b ) = 3 then
13031: LD_VAR 0 1
13035: PPUSH
13036: CALL_OW 255
13040: PUSH
13041: LD_INT 3
13043: EQUAL
13044: IFFALSE 13275
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
13046: LD_VAR 0 1
13050: PPUSH
13051: CALL_OW 266
13055: PUSH
13056: LD_INT 32
13058: PUSH
13059: LD_INT 5
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: IN
13066: IFFALSE 13275
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
13068: LD_ADDR_VAR 0 4
13072: PUSH
13073: LD_INT 22
13075: PUSH
13076: LD_INT 3
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 50
13085: PUSH
13086: EMPTY
13087: LIST
13088: PUSH
13089: LD_INT 30
13091: PUSH
13092: LD_INT 32
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 58
13101: PUSH
13102: EMPTY
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: PPUSH
13111: CALL_OW 69
13115: ST_TO_ADDR
// if tmp then
13116: LD_VAR 0 4
13120: IFFALSE 13142
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
13122: LD_VAR 0 2
13126: PPUSH
13127: LD_VAR 0 4
13131: PUSH
13132: LD_INT 1
13134: ARRAY
13135: PPUSH
13136: CALL_OW 120
// exit ;
13140: GO 13275
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13142: LD_ADDR_VAR 0 4
13146: PUSH
13147: LD_INT 22
13149: PUSH
13150: LD_INT 3
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 50
13159: PUSH
13160: EMPTY
13161: LIST
13162: PUSH
13163: LD_INT 2
13165: PUSH
13166: LD_INT 30
13168: PUSH
13169: LD_INT 4
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 30
13178: PUSH
13179: LD_INT 5
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: PPUSH
13196: CALL_OW 69
13200: ST_TO_ADDR
// if not tmp then
13201: LD_VAR 0 4
13205: NOT
13206: IFFALSE 13225
// begin ComMoveXY ( un , 92 , 99 ) ;
13208: LD_VAR 0 2
13212: PPUSH
13213: LD_INT 92
13215: PPUSH
13216: LD_INT 99
13218: PPUSH
13219: CALL_OW 111
// exit ;
13223: GO 13275
// end ; for i in tmp do
13225: LD_ADDR_VAR 0 3
13229: PUSH
13230: LD_VAR 0 4
13234: PUSH
13235: FOR_IN
13236: IFFALSE 13273
// if UnitsInside ( i ) < 6 then
13238: LD_VAR 0 3
13242: PPUSH
13243: CALL_OW 313
13247: PUSH
13248: LD_INT 6
13250: LESS
13251: IFFALSE 13271
// begin ComEnterUnit ( un , i ) ;
13253: LD_VAR 0 2
13257: PPUSH
13258: LD_VAR 0 3
13262: PPUSH
13263: CALL_OW 120
// exit ;
13267: POP
13268: POP
13269: GO 13275
// end ;
13271: GO 13235
13273: POP
13274: POP
// end ; end ; end ;
13275: PPOPN 4
13277: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
13278: LD_VAR 0 1
13282: PPUSH
13283: CALL_OW 255
13287: PUSH
13288: LD_INT 3
13290: PUSH
13291: LD_INT 6
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: IN
13298: PUSH
13299: LD_VAR 0 1
13303: PPUSH
13304: CALL_OW 263
13308: PUSH
13309: LD_INT 3
13311: EQUAL
13312: AND
13313: PUSH
13314: LD_EXP 6
13318: NOT
13319: AND
13320: IFFALSE 13339
// begin seenComputer := true ;
13322: LD_ADDR_EXP 6
13326: PUSH
13327: LD_INT 1
13329: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
13330: LD_VAR 0 1
13334: PPUSH
13335: CALL 16255 0 1
// end ; end ;
13339: PPOPN 1
13341: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
13342: LD_INT 0
13344: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
13345: LD_VAR 0 1
13349: PPUSH
13350: LD_VAR 0 2
13354: PPUSH
13355: CALL 34173 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
13359: LD_VAR 0 1
13363: PPUSH
13364: CALL_OW 255
13368: PUSH
13369: LD_INT 3
13371: EQUAL
13372: PUSH
13373: LD_VAR 0 1
13377: PPUSH
13378: CALL_OW 263
13382: PUSH
13383: LD_INT 1
13385: EQUAL
13386: AND
13387: PUSH
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 264
13397: PUSH
13398: LD_INT 42
13400: PUSH
13401: LD_INT 43
13403: PUSH
13404: LD_INT 44
13406: PUSH
13407: LD_INT 46
13409: PUSH
13410: LD_INT 45
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: IN
13420: AND
13421: IFFALSE 13451
// begin SetTag ( vehicle , 300 ) ;
13423: LD_VAR 0 1
13427: PPUSH
13428: LD_INT 300
13430: PPUSH
13431: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
13435: LD_ADDR_EXP 30
13439: PUSH
13440: LD_EXP 30
13444: PUSH
13445: LD_VAR 0 1
13449: UNION
13450: ST_TO_ADDR
// end ; end ;
13451: PPOPN 3
13453: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
13454: LD_INT 0
13456: PPUSH
// begin if InArea ( x , y , ruCrates ) then
13457: LD_VAR 0 2
13461: PPUSH
13462: LD_VAR 0 3
13466: PPUSH
13467: LD_INT 13
13469: PPUSH
13470: CALL_OW 309
13474: IFFALSE 13605
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
13476: LD_ADDR_VAR 0 6
13480: PUSH
13481: LD_INT 22
13483: PUSH
13484: LD_INT 3
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 50
13493: PUSH
13494: EMPTY
13495: LIST
13496: PUSH
13497: LD_INT 34
13499: PUSH
13500: LD_INT 51
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: PPUSH
13512: CALL_OW 69
13516: ST_TO_ADDR
// if not cargo then
13517: LD_VAR 0 6
13521: NOT
13522: IFFALSE 13526
// exit ;
13524: GO 13605
// wait ( 0 0$5 ) ;
13526: LD_INT 175
13528: PPUSH
13529: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
13533: LD_VAR 0 6
13537: PUSH
13538: LD_INT 1
13540: ARRAY
13541: PPUSH
13542: LD_INT 28
13544: PPUSH
13545: CALL_OW 296
13549: PUSH
13550: LD_INT 6
13552: LESS
13553: PUSH
13554: LD_VAR 0 6
13558: PUSH
13559: LD_INT 1
13561: ARRAY
13562: PPUSH
13563: CALL_OW 261
13567: PUSH
13568: LD_INT 50
13570: LESS
13571: AND
13572: IFFALSE 13586
// ComMoveUnit ( cargo , ruDep ) ;
13574: LD_VAR 0 6
13578: PPUSH
13579: LD_INT 28
13581: PPUSH
13582: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
13586: LD_VAR 0 6
13590: PPUSH
13591: LD_VAR 0 2
13595: PPUSH
13596: LD_VAR 0 3
13600: PPUSH
13601: CALL_OW 177
// end ; end ;
13605: PPOPN 6
13607: END
// on BuildingComplete ( b ) do var i , tmp ;
13608: LD_INT 0
13610: PPUSH
13611: PPUSH
// begin if GetSide ( b ) = 3 then
13612: LD_VAR 0 1
13616: PPUSH
13617: CALL_OW 255
13621: PUSH
13622: LD_INT 3
13624: EQUAL
13625: IFFALSE 13840
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
13627: LD_ADDR_EXP 31
13631: PUSH
13632: LD_EXP 31
13636: PPUSH
13637: LD_INT 1
13639: PPUSH
13640: CALL_OW 3
13644: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
13645: LD_VAR 0 1
13649: PPUSH
13650: CALL_OW 266
13654: PUSH
13655: LD_INT 32
13657: PUSH
13658: LD_INT 33
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: IN
13665: IFFALSE 13840
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
13667: LD_VAR 0 1
13671: PPUSH
13672: LD_INT 46
13674: PUSH
13675: LD_INT 45
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 1
13684: PPUSH
13685: LD_INT 2
13687: PPUSH
13688: CALL_OW 12
13692: ARRAY
13693: PPUSH
13694: CALL_OW 208
// if GetBType ( b ) = b_bunker then
13698: LD_VAR 0 1
13702: PPUSH
13703: CALL_OW 266
13707: PUSH
13708: LD_INT 32
13710: EQUAL
13711: IFFALSE 13840
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_INT 22
13720: PUSH
13721: LD_INT 3
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 25
13730: PUSH
13731: LD_INT 1
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 120
13740: PUSH
13741: LD_INT 0
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: PPUSH
13753: CALL_OW 69
13757: ST_TO_ADDR
// if tmp then
13758: LD_VAR 0 3
13762: IFFALSE 13840
// for i in tmp do
13764: LD_ADDR_VAR 0 2
13768: PUSH
13769: LD_VAR 0 3
13773: PUSH
13774: FOR_IN
13775: IFFALSE 13838
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
13777: LD_VAR 0 2
13781: PPUSH
13782: CALL_OW 310
13786: NOT
13787: PUSH
13788: LD_VAR 0 2
13792: PPUSH
13793: CALL_OW 310
13797: PPUSH
13798: CALL_OW 266
13802: PUSH
13803: LD_INT 32
13805: NONEQUAL
13806: OR
13807: IFFALSE 13836
// begin ComExit ( i ) ;
13809: LD_VAR 0 2
13813: PPUSH
13814: CALL 76116 0 1
// AddComEnterUnit ( i , b ) ;
13818: LD_VAR 0 2
13822: PPUSH
13823: LD_VAR 0 1
13827: PPUSH
13828: CALL_OW 180
// exit ;
13832: POP
13833: POP
13834: GO 13840
// end ;
13836: GO 13774
13838: POP
13839: POP
// end ; end ; end ; end ; end_of_file
13840: PPOPN 3
13842: END
// export function Action ; var i , tmp , un , inUnit ; begin
13843: LD_INT 0
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
// Video ( true ) ;
13850: LD_INT 1
13852: PPUSH
13853: CALL 75690 0 1
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
13857: LD_INT 50
13859: PPUSH
13860: LD_INT 12
13862: PPUSH
13863: LD_INT 1
13865: PPUSH
13866: LD_INT 56
13868: NEG
13869: PPUSH
13870: CALL 75604 0 4
// CenterOnXY ( 50 , 12 ) ;
13874: LD_INT 50
13876: PPUSH
13877: LD_INT 12
13879: PPUSH
13880: CALL_OW 84
// wait ( 0 0$3 ) ;
13884: LD_INT 105
13886: PPUSH
13887: CALL_OW 67
// PrepareStartRussianAttack ;
13891: CALL 9229 0 0
// CenterOnXY ( 66 , 47 ) ;
13895: LD_INT 66
13897: PPUSH
13898: LD_INT 47
13900: PPUSH
13901: CALL_OW 84
// wait ( 0 0$5 ) ;
13905: LD_INT 175
13907: PPUSH
13908: CALL_OW 67
// case gammaCommander of 1 :
13912: LD_EXP 10
13916: PUSH
13917: LD_INT 1
13919: DOUBLE
13920: EQUAL
13921: IFTRUE 13925
13923: GO 13940
13925: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
13926: LD_EXP 13
13930: PPUSH
13931: LD_STRING D1-Don-1
13933: PPUSH
13934: CALL_OW 88
13938: GO 13987
13940: LD_INT 2
13942: DOUBLE
13943: EQUAL
13944: IFTRUE 13948
13946: GO 13963
13948: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
13949: LD_EXP 12
13953: PPUSH
13954: LD_STRING D1-Brown-1
13956: PPUSH
13957: CALL_OW 88
13961: GO 13987
13963: LD_INT 3
13965: DOUBLE
13966: EQUAL
13967: IFTRUE 13971
13969: GO 13986
13971: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
13972: LD_EXP 21
13976: PPUSH
13977: LD_STRING D1-VanH-1
13979: PPUSH
13980: CALL_OW 88
13984: GO 13987
13986: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
13987: LD_ADDR_VAR 0 3
13991: PUSH
13992: LD_INT 22
13994: PUSH
13995: LD_INT 1
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 33
14004: PUSH
14005: LD_INT 2
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 61
14014: PUSH
14015: EMPTY
14016: LIST
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: LIST
14022: PPUSH
14023: CALL_OW 69
14027: ST_TO_ADDR
// if tmp then
14028: LD_VAR 0 3
14032: IFFALSE 14049
// ComAgressiveMove ( tmp , 74 , 44 ) ;
14034: LD_VAR 0 3
14038: PPUSH
14039: LD_INT 74
14041: PPUSH
14042: LD_INT 44
14044: PPUSH
14045: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
14049: LD_ADDR_VAR 0 3
14053: PUSH
14054: LD_INT 22
14056: PUSH
14057: LD_INT 1
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 25
14066: PUSH
14067: LD_INT 1
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PPUSH
14078: CALL_OW 69
14082: PUSH
14083: LD_EXP 13
14087: PUSH
14088: LD_EXP 12
14092: PUSH
14093: LD_EXP 21
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: DIFF
14103: ST_TO_ADDR
// if tmp then
14104: LD_VAR 0 3
14108: IFFALSE 14186
// for i in tmp do
14110: LD_ADDR_VAR 0 2
14114: PUSH
14115: LD_VAR 0 3
14119: PUSH
14120: FOR_IN
14121: IFFALSE 14184
// begin inUnit := IsInUnit ( i ) ;
14123: LD_ADDR_VAR 0 5
14127: PUSH
14128: LD_VAR 0 2
14132: PPUSH
14133: CALL_OW 310
14137: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
14138: LD_VAR 0 5
14142: PUSH
14143: LD_VAR 0 5
14147: PPUSH
14148: CALL_OW 266
14152: PUSH
14153: LD_INT 32
14155: PUSH
14156: LD_INT 31
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: IN
14163: AND
14164: IFFALSE 14182
// tmp := tmp diff i ;
14166: LD_ADDR_VAR 0 3
14170: PUSH
14171: LD_VAR 0 3
14175: PUSH
14176: LD_VAR 0 2
14180: DIFF
14181: ST_TO_ADDR
// end ;
14182: GO 14120
14184: POP
14185: POP
// if tmp then
14186: LD_VAR 0 3
14190: IFFALSE 14280
// begin ComExitAll ( tmp ) ;
14192: LD_VAR 0 3
14196: PPUSH
14197: CALL 76199 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
14201: LD_VAR 0 3
14205: PPUSH
14206: LD_INT 74
14208: PPUSH
14209: LD_INT 44
14211: PPUSH
14212: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
14216: LD_ADDR_VAR 0 3
14220: PUSH
14221: LD_INT 22
14223: PUSH
14224: LD_INT 1
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 25
14233: PUSH
14234: LD_INT 4
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PPUSH
14245: CALL_OW 69
14249: ST_TO_ADDR
// if tmp then
14250: LD_VAR 0 3
14254: IFFALSE 14280
// begin ComExitAll ( tmp ) ;
14256: LD_VAR 0 3
14260: PPUSH
14261: CALL 76199 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
14265: LD_VAR 0 3
14269: PPUSH
14270: LD_INT 66
14272: PPUSH
14273: LD_INT 28
14275: PPUSH
14276: CALL_OW 171
// end ; end ; game_speed := 4 ;
14280: LD_ADDR_OWVAR 65
14284: PUSH
14285: LD_INT 4
14287: ST_TO_ADDR
// wait ( 0 0$2 ) ;
14288: LD_INT 70
14290: PPUSH
14291: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
14295: LD_EXP 25
14299: PPUSH
14300: LD_STRING D1-Har-1
14302: PPUSH
14303: CALL_OW 94
// case gammaCommander of 1 :
14307: LD_EXP 10
14311: PUSH
14312: LD_INT 1
14314: DOUBLE
14315: EQUAL
14316: IFTRUE 14320
14318: GO 14335
14320: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
14321: LD_EXP 13
14325: PPUSH
14326: LD_STRING D1-Don-2
14328: PPUSH
14329: CALL_OW 88
14333: GO 14382
14335: LD_INT 2
14337: DOUBLE
14338: EQUAL
14339: IFTRUE 14343
14341: GO 14358
14343: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
14344: LD_EXP 12
14348: PPUSH
14349: LD_STRING D1-Brown-2
14351: PPUSH
14352: CALL_OW 88
14356: GO 14382
14358: LD_INT 3
14360: DOUBLE
14361: EQUAL
14362: IFTRUE 14366
14364: GO 14381
14366: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
14367: LD_EXP 21
14371: PPUSH
14372: LD_STRING D1-VanH-2
14374: PPUSH
14375: CALL_OW 88
14379: GO 14382
14381: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
14382: LD_EXP 25
14386: PPUSH
14387: LD_STRING D1-Har-2
14389: PPUSH
14390: CALL_OW 94
// Video ( false ) ;
14394: LD_INT 0
14396: PPUSH
14397: CALL 75690 0 1
// ChangeMissionObjectives ( M1 ) ;
14401: LD_STRING M1
14403: PPUSH
14404: CALL_OW 337
// SaveForQuickRestart ;
14408: CALL_OW 22
// wait ( 2 2$30 ) ;
14412: LD_INT 5250
14414: PPUSH
14415: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
14419: LD_INT 1
14421: PPUSH
14422: CALL 11459 0 1
// wait ( 4 4$30 ) ;
14426: LD_INT 9450
14428: PPUSH
14429: CALL_OW 67
// if Difficulty > 2 then
14433: LD_OWVAR 67
14437: PUSH
14438: LD_INT 2
14440: GREATER
14441: IFFALSE 14450
// PrepareRussianAttack ( 2 ) ;
14443: LD_INT 2
14445: PPUSH
14446: CALL 11459 0 1
// if Difficulty > 3 then
14450: LD_OWVAR 67
14454: PUSH
14455: LD_INT 3
14457: GREATER
14458: IFFALSE 14617
// begin for i := 1 to 4 do
14460: LD_ADDR_VAR 0 2
14464: PUSH
14465: DOUBLE
14466: LD_INT 1
14468: DEC
14469: ST_TO_ADDR
14470: LD_INT 4
14472: PUSH
14473: FOR_TO
14474: IFFALSE 14559
// begin uc_side := 6 ;
14476: LD_ADDR_OWVAR 20
14480: PUSH
14481: LD_INT 6
14483: ST_TO_ADDR
// uc_nation := 3 ;
14484: LD_ADDR_OWVAR 21
14488: PUSH
14489: LD_INT 3
14491: ST_TO_ADDR
// PrepareSoldier ( false , 6 ) ;
14492: LD_INT 0
14494: PPUSH
14495: LD_INT 6
14497: PPUSH
14498: CALL_OW 381
// un := CreateHuman ;
14502: LD_ADDR_VAR 0 4
14506: PUSH
14507: CALL_OW 44
14511: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14512: LD_VAR 0 4
14516: PPUSH
14517: LD_INT 122
14519: PPUSH
14520: LD_INT 89
14522: PPUSH
14523: LD_INT 3
14525: PPUSH
14526: LD_INT 0
14528: PPUSH
14529: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
14533: LD_VAR 0 4
14537: PPUSH
14538: LD_INT 88
14540: PPUSH
14541: LD_INT 42
14543: PPUSH
14544: CALL_OW 114
// AddComHold ( un ) ;
14548: LD_VAR 0 4
14552: PPUSH
14553: CALL_OW 200
// end ;
14557: GO 14473
14559: POP
14560: POP
// PrepareScientist ( false , 6 ) ;
14561: LD_INT 0
14563: PPUSH
14564: LD_INT 6
14566: PPUSH
14567: CALL_OW 384
// un := CreateHuman ;
14571: LD_ADDR_VAR 0 4
14575: PUSH
14576: CALL_OW 44
14580: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14581: LD_VAR 0 4
14585: PPUSH
14586: LD_INT 122
14588: PPUSH
14589: LD_INT 89
14591: PPUSH
14592: LD_INT 3
14594: PPUSH
14595: LD_INT 0
14597: PPUSH
14598: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
14602: LD_VAR 0 4
14606: PPUSH
14607: LD_INT 91
14609: PPUSH
14610: LD_INT 48
14612: PPUSH
14613: CALL_OW 111
// end ; end ;
14617: LD_VAR 0 1
14621: RET
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 3 ] ] ) = 0 and tick > 5 5$00 do var dialog , p ;
14622: LD_INT 22
14624: PUSH
14625: LD_INT 1
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 101
14634: PUSH
14635: LD_INT 3
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PPUSH
14646: CALL_OW 69
14650: PUSH
14651: LD_INT 0
14653: EQUAL
14654: PUSH
14655: LD_OWVAR 1
14659: PUSH
14660: LD_INT 10500
14662: GREATER
14663: AND
14664: IFFALSE 16252
14666: GO 14668
14668: DISABLE
14669: LD_INT 0
14671: PPUSH
14672: PPUSH
// begin PrepareSupportFromDelta ;
14673: CALL 4060 0 0
// deltaSupport := true ;
14677: LD_ADDR_EXP 5
14681: PUSH
14682: LD_INT 1
14684: ST_TO_ADDR
// dialog := false ;
14685: LD_ADDR_VAR 0 1
14689: PUSH
14690: LD_INT 0
14692: ST_TO_ADDR
// if IsOk ( Gladstone ) then
14693: LD_EXP 18
14697: PPUSH
14698: CALL_OW 302
14702: IFFALSE 14724
// dialog := Say ( Gladstone , D2-Glad-1 ) else
14704: LD_ADDR_VAR 0 1
14708: PUSH
14709: LD_EXP 18
14713: PPUSH
14714: LD_STRING D2-Glad-1
14716: PPUSH
14717: CALL_OW 88
14721: ST_TO_ADDR
14722: GO 14806
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
14724: LD_ADDR_VAR 0 1
14728: PUSH
14729: LD_INT 22
14731: PUSH
14732: LD_INT 1
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 120
14741: PUSH
14742: LD_INT 107
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 21
14751: PUSH
14752: LD_INT 1
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 23
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: PPUSH
14775: CALL_OW 69
14779: PUSH
14780: LD_EXP 23
14784: PUSH
14785: LD_EXP 22
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: DIFF
14794: PPUSH
14795: LD_STRING D2-Sol1-1
14797: PPUSH
14798: LD_STRING D2-FSol1-1
14800: PPUSH
14801: CALL 18261 0 3
14805: ST_TO_ADDR
// if dialog then
14806: LD_VAR 0 1
14810: IFFALSE 14911
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
14812: LD_EXP 13
14816: PPUSH
14817: CALL_OW 302
14821: PUSH
14822: LD_EXP 10
14826: PUSH
14827: LD_INT 1
14829: EQUAL
14830: AND
14831: IFFALSE 14845
// Say ( Donaldson , D2-Don-1 ) ;
14833: LD_EXP 13
14837: PPUSH
14838: LD_STRING D2-Don-1
14840: PPUSH
14841: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
14845: LD_EXP 12
14849: PPUSH
14850: CALL_OW 302
14854: PUSH
14855: LD_EXP 10
14859: PUSH
14860: LD_INT 2
14862: EQUAL
14863: AND
14864: IFFALSE 14878
// Say ( Brown , D2-Brown-1 ) ;
14866: LD_EXP 12
14870: PPUSH
14871: LD_STRING D2-Brown-1
14873: PPUSH
14874: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
14878: LD_EXP 21
14882: PPUSH
14883: CALL_OW 302
14887: PUSH
14888: LD_EXP 10
14892: PUSH
14893: LD_INT 3
14895: EQUAL
14896: AND
14897: IFFALSE 14911
// Say ( Houten , D2-VanH-1 ) ;
14899: LD_EXP 21
14903: PPUSH
14904: LD_STRING D2-VanH-1
14906: PPUSH
14907: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
14911: LD_INT 3
14913: PPUSH
14914: CALL 11459 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
14918: LD_STRING 07_time
14920: PPUSH
14921: LD_INT 18900
14923: PPUSH
14924: CALL_OW 30
14928: PUSH
14929: LD_INT 3
14931: DIV
14932: PPUSH
14933: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
14937: LD_INT 34
14939: PPUSH
14940: LD_INT 1
14942: PPUSH
14943: CALL_OW 321
14947: PUSH
14948: LD_INT 2
14950: EQUAL
14951: IFFALSE 14960
// SetAchievement ( ACH_HEAVYGUN ) ;
14953: LD_STRING ACH_HEAVYGUN
14955: PPUSH
14956: CALL_OW 543
// PrepareMacmillanSquad ;
14960: CALL 4797 0 0
// CenterNowOnUnits ( JMM ) ;
14964: LD_EXP 11
14968: PPUSH
14969: CALL_OW 87
// wait ( 0 0$10 ) ;
14973: LD_INT 350
14975: PPUSH
14976: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
14980: LD_INT 1
14982: PPUSH
14983: CALL_OW 427
// p := 0 ;
14987: LD_ADDR_VAR 0 2
14991: PUSH
14992: LD_INT 0
14994: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14995: LD_INT 35
14997: PPUSH
14998: CALL_OW 67
// p := Inc ( p ) ;
15002: LD_ADDR_VAR 0 2
15006: PUSH
15007: LD_VAR 0 2
15011: PPUSH
15012: CALL 77079 0 1
15016: ST_TO_ADDR
// if p > 100 then
15017: LD_VAR 0 2
15021: PUSH
15022: LD_INT 100
15024: GREATER
15025: IFFALSE 15029
// exit ;
15027: GO 16252
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
15029: LD_EXP 11
15033: PPUSH
15034: LD_INT 15
15036: PPUSH
15037: CALL_OW 308
15041: PUSH
15042: LD_EXP 11
15046: PPUSH
15047: CALL_OW 310
15051: PPUSH
15052: LD_INT 15
15054: PPUSH
15055: CALL_OW 308
15059: OR
15060: PUSH
15061: LD_EXP 11
15065: PPUSH
15066: LD_EXP 23
15070: PPUSH
15071: CALL_OW 296
15075: PUSH
15076: LD_INT 10
15078: LESS
15079: OR
15080: PUSH
15081: LD_INT 22
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: LD_INT 120
15096: PUSH
15097: LD_INT 106
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 120
15106: PUSH
15107: LD_INT 107
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 91
15121: PUSH
15122: LD_EXP 11
15126: PUSH
15127: LD_INT 12
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: PPUSH
15140: CALL_OW 69
15144: OR
15145: IFFALSE 14995
// DialogueOn ;
15147: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
15151: LD_EXP 11
15155: PPUSH
15156: LD_STRING D3-JMM-1
15158: PPUSH
15159: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15163: LD_EXP 13
15167: PPUSH
15168: CALL_OW 302
15172: PUSH
15173: LD_EXP 10
15177: PUSH
15178: LD_INT 1
15180: EQUAL
15181: AND
15182: IFFALSE 15198
// Say ( Donaldson , D3-Don-1 ) else
15184: LD_EXP 13
15188: PPUSH
15189: LD_STRING D3-Don-1
15191: PPUSH
15192: CALL_OW 88
15196: GO 15294
// begin if gammaCommander = 1 then
15198: LD_EXP 10
15202: PUSH
15203: LD_INT 1
15205: EQUAL
15206: IFFALSE 15294
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
15208: LD_INT 22
15210: PUSH
15211: LD_INT 1
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 21
15220: PUSH
15221: LD_INT 1
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 23
15230: PUSH
15231: LD_INT 1
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 120
15240: PUSH
15241: LD_INT 106
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 26
15250: PUSH
15251: LD_INT 1
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: PPUSH
15265: CALL_OW 69
15269: PPUSH
15270: LD_STRING D3-Sol1-1
15272: PPUSH
15273: LD_STRING 
15275: PPUSH
15276: CALL 18261 0 3
15280: IFFALSE 15294
// Say ( JMM , D3-JMM-2 ) ;
15282: LD_EXP 11
15286: PPUSH
15287: LD_STRING D3-JMM-2
15289: PPUSH
15290: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15294: LD_EXP 12
15298: PPUSH
15299: CALL_OW 302
15303: PUSH
15304: LD_EXP 10
15308: PUSH
15309: LD_INT 2
15311: EQUAL
15312: AND
15313: IFFALSE 15329
// Say ( Brown , D3-Brown-1 ) else
15315: LD_EXP 12
15319: PPUSH
15320: LD_STRING D3-Brown-1
15322: PPUSH
15323: CALL_OW 88
15327: GO 15425
// begin if gammaCommander = 2 then
15329: LD_EXP 10
15333: PUSH
15334: LD_INT 2
15336: EQUAL
15337: IFFALSE 15425
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
15339: LD_INT 22
15341: PUSH
15342: LD_INT 1
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 21
15351: PUSH
15352: LD_INT 1
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 23
15361: PUSH
15362: LD_INT 1
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 120
15371: PUSH
15372: LD_INT 106
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 26
15381: PUSH
15382: LD_INT 1
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: PPUSH
15396: CALL_OW 69
15400: PPUSH
15401: LD_STRING D3-Sol1-1a
15403: PPUSH
15404: LD_STRING 
15406: PPUSH
15407: CALL 18261 0 3
15411: IFFALSE 15425
// Say ( JMM , D3-JMM-2 ) ;
15413: LD_EXP 11
15417: PPUSH
15418: LD_STRING D3-JMM-2
15420: PPUSH
15421: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15425: LD_EXP 21
15429: PPUSH
15430: CALL_OW 302
15434: PUSH
15435: LD_EXP 10
15439: PUSH
15440: LD_INT 3
15442: EQUAL
15443: AND
15444: IFFALSE 15460
// Say ( Houten , D3-VanH-1 ) else
15446: LD_EXP 21
15450: PPUSH
15451: LD_STRING D3-VanH-1
15453: PPUSH
15454: CALL_OW 88
15458: GO 15556
// begin if gammaCommander = 3 then
15460: LD_EXP 10
15464: PUSH
15465: LD_INT 3
15467: EQUAL
15468: IFFALSE 15556
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
15470: LD_INT 22
15472: PUSH
15473: LD_INT 1
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: LD_INT 21
15482: PUSH
15483: LD_INT 1
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 23
15492: PUSH
15493: LD_INT 1
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 120
15502: PUSH
15503: LD_INT 106
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 26
15512: PUSH
15513: LD_INT 1
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: PPUSH
15527: CALL_OW 69
15531: PPUSH
15532: LD_STRING D3-Sol1-1b
15534: PPUSH
15535: LD_STRING 
15537: PPUSH
15538: CALL 18261 0 3
15542: IFFALSE 15556
// Say ( JMM , D3-JMM-2 ) ;
15544: LD_EXP 11
15548: PPUSH
15549: LD_STRING D3-JMM-2
15551: PPUSH
15552: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15556: LD_EXP 23
15560: PPUSH
15561: CALL_OW 302
15565: IFFALSE 15593
// begin Say ( Joan , D3a-Joan-1 ) ;
15567: LD_EXP 23
15571: PPUSH
15572: LD_STRING D3a-Joan-1
15574: PPUSH
15575: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15579: LD_EXP 11
15583: PPUSH
15584: LD_STRING D3a-JMM-1
15586: PPUSH
15587: CALL_OW 88
// end else
15591: GO 16027
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15593: LD_STRING 06_JoanStatus_1
15595: PPUSH
15596: LD_INT 0
15598: PPUSH
15599: CALL_OW 30
15603: PUSH
15604: LD_INT 1
15606: EQUAL
15607: IFFALSE 16027
// begin Say ( JMM , D3b-JMM-1 ) ;
15609: LD_EXP 11
15613: PPUSH
15614: LD_STRING D3b-JMM-1
15616: PPUSH
15617: CALL_OW 88
// dialog := false ;
15621: LD_ADDR_VAR 0 1
15625: PUSH
15626: LD_INT 0
15628: ST_TO_ADDR
// if gammaCommander = 1 then
15629: LD_EXP 10
15633: PUSH
15634: LD_INT 1
15636: EQUAL
15637: IFFALSE 15748
// if IsOK ( Donaldson ) then
15639: LD_EXP 13
15643: PPUSH
15644: CALL_OW 302
15648: IFFALSE 15670
// dialog := Say ( Donaldson , D3b-Don-1 ) else
15650: LD_ADDR_VAR 0 1
15654: PUSH
15655: LD_EXP 13
15659: PPUSH
15660: LD_STRING D3b-Don-1
15662: PPUSH
15663: CALL_OW 88
15667: ST_TO_ADDR
15668: GO 15748
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15670: LD_ADDR_VAR 0 1
15674: PUSH
15675: LD_INT 22
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 21
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 23
15697: PUSH
15698: LD_INT 1
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 120
15707: PUSH
15708: LD_INT 106
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 26
15717: PUSH
15718: LD_INT 1
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: PPUSH
15737: LD_STRING D3b-Sol1-1
15739: PPUSH
15740: LD_STRING 
15742: PPUSH
15743: CALL 18261 0 3
15747: ST_TO_ADDR
// if gammaCommander = 2 then
15748: LD_EXP 10
15752: PUSH
15753: LD_INT 2
15755: EQUAL
15756: IFFALSE 15867
// if IsOk ( Brown ) then
15758: LD_EXP 12
15762: PPUSH
15763: CALL_OW 302
15767: IFFALSE 15789
// dialog := Say ( Brown , D3b-Brown-1 ) else
15769: LD_ADDR_VAR 0 1
15773: PUSH
15774: LD_EXP 12
15778: PPUSH
15779: LD_STRING D3b-Brown-1
15781: PPUSH
15782: CALL_OW 88
15786: ST_TO_ADDR
15787: GO 15867
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15789: LD_ADDR_VAR 0 1
15793: PUSH
15794: LD_INT 22
15796: PUSH
15797: LD_INT 1
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 21
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 23
15816: PUSH
15817: LD_INT 1
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 120
15826: PUSH
15827: LD_INT 106
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 26
15836: PUSH
15837: LD_INT 1
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 69
15855: PPUSH
15856: LD_STRING D3b-Sol1-1
15858: PPUSH
15859: LD_STRING 
15861: PPUSH
15862: CALL 18261 0 3
15866: ST_TO_ADDR
// if gammaCommander = 3 then
15867: LD_EXP 10
15871: PUSH
15872: LD_INT 3
15874: EQUAL
15875: IFFALSE 15986
// if IsOk ( Houten ) then
15877: LD_EXP 21
15881: PPUSH
15882: CALL_OW 302
15886: IFFALSE 15908
// dialog := Say ( Houten , D3b-VanH-1 ) else
15888: LD_ADDR_VAR 0 1
15892: PUSH
15893: LD_EXP 21
15897: PPUSH
15898: LD_STRING D3b-VanH-1
15900: PPUSH
15901: CALL_OW 88
15905: ST_TO_ADDR
15906: GO 15986
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15908: LD_ADDR_VAR 0 1
15912: PUSH
15913: LD_INT 22
15915: PUSH
15916: LD_INT 1
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 23
15935: PUSH
15936: LD_INT 1
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 120
15945: PUSH
15946: LD_INT 106
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 26
15955: PUSH
15956: LD_INT 1
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: PPUSH
15970: CALL_OW 69
15974: PPUSH
15975: LD_STRING D3b-Sol1-1
15977: PPUSH
15978: LD_STRING 
15980: PPUSH
15981: CALL 18261 0 3
15985: ST_TO_ADDR
// if dialog then
15986: LD_VAR 0 1
15990: IFFALSE 16027
// begin Say ( JMM , D3b-JMM-2 ) ;
15992: LD_EXP 11
15996: PPUSH
15997: LD_STRING D3b-JMM-2
15999: PPUSH
16000: CALL_OW 88
// if IsOK ( Lisa ) then
16004: LD_EXP 16
16008: PPUSH
16009: CALL_OW 302
16013: IFFALSE 16027
// Say ( Lisa , D3b-Lisa-2 ) ;
16015: LD_EXP 16
16019: PPUSH
16020: LD_STRING D3b-Lisa-2
16022: PPUSH
16023: CALL_OW 88
// end ; end ; end ; if not seenComputer then
16027: LD_EXP 6
16031: NOT
16032: IFFALSE 16040
// begin DialogueOff ;
16034: CALL_OW 7
// exit ;
16038: GO 16252
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
16040: LD_INT 22
16042: PUSH
16043: LD_INT 1
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 21
16052: PUSH
16053: LD_INT 1
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: LD_INT 23
16062: PUSH
16063: LD_INT 1
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 2
16072: PUSH
16073: LD_INT 120
16075: PUSH
16076: LD_INT 106
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: LD_INT 120
16085: PUSH
16086: LD_INT 107
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 26
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: PPUSH
16115: CALL_OW 69
16119: PPUSH
16120: LD_STRING DCa-Sol1-1
16122: PPUSH
16123: LD_STRING 
16125: PPUSH
16126: CALL 18261 0 3
16130: IFFALSE 16144
// Say ( JMM , DCb-JMM-1 ) ;
16132: LD_EXP 11
16136: PPUSH
16137: LD_STRING DCb-JMM-1
16139: PPUSH
16140: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
16144: LD_INT 22
16146: PUSH
16147: LD_INT 1
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 21
16156: PUSH
16157: LD_INT 1
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 23
16166: PUSH
16167: LD_INT 1
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 2
16176: PUSH
16177: LD_INT 120
16179: PUSH
16180: LD_INT 106
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 120
16189: PUSH
16190: LD_INT 107
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 26
16204: PUSH
16205: LD_INT 1
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: PPUSH
16219: CALL_OW 69
16223: PPUSH
16224: LD_STRING DCb-Sol1-1
16226: PPUSH
16227: LD_STRING 
16229: PPUSH
16230: CALL 18261 0 3
16234: IFFALSE 16248
// Say ( JMM , DCb-JMM-2 ) ;
16236: LD_EXP 11
16240: PPUSH
16241: LD_STRING DCb-JMM-2
16243: PPUSH
16244: CALL_OW 88
// DialogueOff ;
16248: CALL_OW 7
// end ;
16252: PPOPN 2
16254: END
// export function DialogSeenComputer ( un ) ; begin
16255: LD_INT 0
16257: PPUSH
// if jmmArrival then
16258: LD_EXP 7
16262: IFFALSE 16266
// exit ;
16264: GO 16332
// CenterOnUnits ( un ) ;
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
16275: LD_INT 22
16277: PUSH
16278: LD_INT 1
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 2
16287: PUSH
16288: LD_INT 120
16290: PUSH
16291: LD_INT 106
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 120
16300: PUSH
16301: LD_INT 107
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 69
16321: PPUSH
16322: LD_STRING DC-Sol1-1
16324: PPUSH
16325: LD_STRING DC-FSol1-1
16327: PPUSH
16328: CALL 18261 0 3
// end ;
16332: LD_VAR 0 2
16336: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
16337: LD_EXP 7
16341: PUSH
16342: LD_OWVAR 1
16346: PUSH
16347: LD_INT 48300
16349: GREATEREQUAL
16350: AND
16351: PUSH
16352: LD_EXP 11
16356: PPUSH
16357: CALL_OW 302
16361: AND
16362: IFFALSE 16712
16364: GO 16366
16366: DISABLE
// begin wait ( 2 2$00 ) ;
16367: LD_INT 4200
16369: PPUSH
16370: CALL_OW 67
// DialogueOn ;
16374: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
16378: LD_EXP 26
16382: PPUSH
16383: LD_STRING D4-Pow-1
16385: PPUSH
16386: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
16390: LD_EXP 11
16394: PPUSH
16395: LD_STRING D4-JMM-1
16397: PPUSH
16398: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
16402: LD_EXP 26
16406: PPUSH
16407: LD_STRING D4-Pow-2
16409: PPUSH
16410: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
16414: LD_EXP 11
16418: PPUSH
16419: LD_STRING D4-JMM-2
16421: PPUSH
16422: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
16426: LD_EXP 26
16430: PPUSH
16431: LD_STRING D4-Pow-3
16433: PPUSH
16434: CALL_OW 94
// DialogueOff ;
16438: CALL_OW 7
// wait ( 1 1$00 ) ;
16442: LD_INT 2100
16444: PPUSH
16445: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16449: LD_INT 1
16451: PPUSH
16452: CALL_OW 427
// wait ( 7 7$30 ) ;
16456: LD_INT 15750
16458: PPUSH
16459: CALL_OW 67
// DialogueOn ;
16463: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16467: LD_EXP 26
16471: PPUSH
16472: LD_STRING D4a-Pow-1
16474: PPUSH
16475: CALL_OW 94
// DialogueOff ;
16479: CALL_OW 7
// SikorskiCounter ;
16483: CALL 18045 0 0
// PrepareSikorsky ;
16487: CALL 6219 0 0
// CenterNowOnUnits ( Sikorski ) ;
16491: LD_EXP 24
16495: PPUSH
16496: CALL_OW 87
// DialogueOn ;
16500: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
16504: LD_EXP 24
16508: PPUSH
16509: LD_STRING D5-Sik-1
16511: PPUSH
16512: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
16516: LD_EXP 11
16520: PPUSH
16521: LD_STRING D5-JMM-1a
16523: PPUSH
16524: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
16528: LD_EXP 24
16532: PPUSH
16533: LD_STRING D5-Sik-2
16535: PPUSH
16536: CALL_OW 88
// case Query ( QSikorski ) of 1 :
16540: LD_STRING QSikorski
16542: PPUSH
16543: CALL_OW 97
16547: PUSH
16548: LD_INT 1
16550: DOUBLE
16551: EQUAL
16552: IFTRUE 16556
16554: GO 16579
16556: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16557: LD_EXP 24
16561: PPUSH
16562: LD_STRING D5a-Sik-1
16564: PPUSH
16565: CALL_OW 88
// sikorskiWait := 1 1$00 ;
16569: LD_ADDR_EXP 4
16573: PUSH
16574: LD_INT 2100
16576: ST_TO_ADDR
// end ; 2 :
16577: GO 16666
16579: LD_INT 2
16581: DOUBLE
16582: EQUAL
16583: IFTRUE 16587
16585: GO 16610
16587: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16588: LD_EXP 24
16592: PPUSH
16593: LD_STRING D5b-Sik-1
16595: PPUSH
16596: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16600: LD_ADDR_EXP 4
16604: PUSH
16605: LD_INT 10500
16607: ST_TO_ADDR
// end ; 3 :
16608: GO 16666
16610: LD_INT 3
16612: DOUBLE
16613: EQUAL
16614: IFTRUE 16618
16616: GO 16665
16618: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16619: LD_EXP 24
16623: PPUSH
16624: LD_STRING D5c-Sik-1
16626: PPUSH
16627: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16631: LD_EXP 11
16635: PPUSH
16636: LD_STRING D5c-JMM-1
16638: PPUSH
16639: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16643: LD_EXP 24
16647: PPUSH
16648: LD_STRING D5c-Sik-2
16650: PPUSH
16651: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16655: LD_ADDR_EXP 4
16659: PUSH
16660: LD_INT 10500
16662: ST_TO_ADDR
// end ; end ;
16663: GO 16666
16665: POP
// DialogueOff ;
16666: CALL_OW 7
// SikorskiWaitCounter ;
16670: CALL 18108 0 0
// DialogueOn ;
16674: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16678: LD_EXP 24
16682: PPUSH
16683: LD_STRING D6-Sik-1
16685: PPUSH
16686: CALL_OW 88
// DialogueOff ;
16690: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
16694: LD_STRING M2
16696: PPUSH
16697: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
16701: LD_INT 1
16703: PPUSH
16704: CALL_OW 427
// SikorskiAttack ;
16708: CALL 7547 0 0
// end ;
16712: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
16713: LD_INT 11
16715: PPUSH
16716: LD_INT 22
16718: PUSH
16719: LD_INT 4
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PPUSH
16726: CALL_OW 70
16730: PUSH
16731: LD_INT 2
16733: GREATER
16734: IFFALSE 16927
16736: GO 16738
16738: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16739: LD_EXP 24
16743: PPUSH
16744: LD_STRING D7-Sik-1
16746: PPUSH
16747: CALL_OW 88
// wait ( 0 0$10 ) ;
16751: LD_INT 350
16753: PPUSH
16754: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
16758: LD_EXP 11
16762: PPUSH
16763: LD_INT 11
16765: PPUSH
16766: CALL_OW 308
16770: PUSH
16771: LD_EXP 11
16775: PPUSH
16776: CALL_OW 310
16780: PPUSH
16781: LD_INT 11
16783: PPUSH
16784: CALL_OW 308
16788: OR
16789: IFFALSE 16813
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16791: LD_EXP 24
16795: PPUSH
16796: LD_STRING D7a-Sik-1
16798: PPUSH
16799: CALL_OW 88
// sikorskiStatus := 1 ;
16803: LD_ADDR_EXP 8
16807: PUSH
16808: LD_INT 1
16810: ST_TO_ADDR
// end else
16811: GO 16833
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16813: LD_EXP 24
16817: PPUSH
16818: LD_STRING D7b-Sik-1
16820: PPUSH
16821: CALL_OW 88
// sikorskiStatus := 0 ;
16825: LD_ADDR_EXP 8
16829: PUSH
16830: LD_INT 0
16832: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
16833: LD_INT 1575
16835: PPUSH
16836: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
16840: LD_EXP 11
16844: PPUSH
16845: LD_INT 11
16847: PPUSH
16848: CALL_OW 308
16852: PUSH
16853: LD_EXP 11
16857: PPUSH
16858: CALL_OW 310
16862: PPUSH
16863: LD_INT 11
16865: PPUSH
16866: CALL_OW 308
16870: OR
16871: PUSH
16872: LD_EXP 11
16876: PPUSH
16877: CALL_OW 302
16881: NOT
16882: OR
16883: IFFALSE 16907
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16885: LD_EXP 24
16889: PPUSH
16890: LD_STRING D7a-Sik-1
16892: PPUSH
16893: CALL_OW 88
// sikorskiStatus := 1 ;
16897: LD_ADDR_EXP 8
16901: PUSH
16902: LD_INT 1
16904: ST_TO_ADDR
// end else
16905: GO 16927
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16907: LD_EXP 24
16911: PPUSH
16912: LD_STRING D7b-Sik-1
16914: PPUSH
16915: CALL_OW 88
// sikorskiStatus := 0 ;
16919: LD_ADDR_EXP 8
16923: PUSH
16924: LD_INT 0
16926: ST_TO_ADDR
// end ; end ;
16927: END
// export function SikorskiKilledInAction ; begin
16928: LD_INT 0
16930: PPUSH
// wait ( 0 0$2 ) ;
16931: LD_INT 70
16933: PPUSH
16934: CALL_OW 67
// DialogueOn ;
16938: CALL_OW 6
// dwait ( 0 0$1 ) ;
16942: LD_INT 35
16944: PPUSH
16945: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
16949: LD_EXP 26
16953: PPUSH
16954: LD_STRING D8b-Pow-1
16956: PPUSH
16957: CALL_OW 94
// YouLost ( Dismissed ) ;
16961: LD_STRING Dismissed
16963: PPUSH
16964: CALL_OW 104
// DialogueOff ;
16968: CALL_OW 7
// end ;
16972: LD_VAR 0 1
16976: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
16977: LD_EXP 7
16981: PUSH
16982: LD_INT 28
16984: PPUSH
16985: CALL_OW 301
16989: AND
16990: PUSH
16991: LD_EXP 28
16995: PPUSH
16996: CALL_OW 301
17000: AND
17001: PUSH
17002: LD_INT 22
17004: PUSH
17005: LD_INT 3
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 30
17014: PUSH
17015: LD_INT 5
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PPUSH
17026: CALL_OW 69
17030: PUSH
17031: LD_INT 0
17033: EQUAL
17034: AND
17035: IFFALSE 18042
17037: GO 17039
17039: DISABLE
17040: LD_INT 0
17042: PPUSH
17043: PPUSH
17044: PPUSH
// begin Video ( true ) ;
17045: LD_INT 1
17047: PPUSH
17048: CALL 75690 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
17052: LD_INT 104
17054: PPUSH
17055: LD_INT 108
17057: PPUSH
17058: LD_INT 1
17060: PPUSH
17061: LD_INT 36
17063: NEG
17064: PPUSH
17065: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
17069: LD_INT 104
17071: PPUSH
17072: LD_INT 108
17074: PPUSH
17075: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
17079: LD_ADDR_VAR 0 2
17083: PUSH
17084: LD_INT 22
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 21
17096: PUSH
17097: LD_INT 1
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 3
17106: PUSH
17107: LD_INT 24
17109: PUSH
17110: LD_INT 249
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: LIST
17125: PPUSH
17126: CALL_OW 69
17130: ST_TO_ADDR
// if tmp then
17131: LD_VAR 0 2
17135: IFFALSE 17166
// for i in tmp do
17137: LD_ADDR_VAR 0 1
17141: PUSH
17142: LD_VAR 0 2
17146: PUSH
17147: FOR_IN
17148: IFFALSE 17164
// SetLives ( i , 249 ) ;
17150: LD_VAR 0 1
17154: PPUSH
17155: LD_INT 249
17157: PPUSH
17158: CALL_OW 234
17162: GO 17147
17164: POP
17165: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
17166: LD_ADDR_VAR 0 1
17170: PUSH
17171: LD_INT 22
17173: PUSH
17174: LD_INT 3
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 21
17183: PUSH
17184: LD_INT 1
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PPUSH
17195: CALL_OW 69
17199: PUSH
17200: FOR_IN
17201: IFFALSE 17244
// begin ComExit ( i ) ;
17203: LD_VAR 0 1
17207: PPUSH
17208: CALL 76116 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
17212: LD_VAR 0 1
17216: PPUSH
17217: LD_INT 131
17219: PPUSH
17220: LD_INT 127
17222: PPUSH
17223: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
17227: LD_VAR 0 1
17231: PPUSH
17232: LD_INT 141
17234: PPUSH
17235: LD_INT 147
17237: PPUSH
17238: CALL_OW 171
// end ;
17242: GO 17200
17244: POP
17245: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
17246: LD_INT 81
17248: PUSH
17249: LD_INT 3
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 3
17258: PUSH
17259: LD_INT 21
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PPUSH
17277: CALL_OW 69
17281: PPUSH
17282: LD_INT 131
17284: PPUSH
17285: LD_INT 127
17287: PPUSH
17288: CALL_OW 174
// wait ( 0 0$08 ) ;
17292: LD_INT 280
17294: PPUSH
17295: CALL_OW 67
// DialogueOn ;
17299: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
17303: LD_EXP 8
17307: PUSH
17308: LD_INT 1
17310: EQUAL
17311: PUSH
17312: LD_EXP 24
17316: PPUSH
17317: CALL_OW 302
17321: AND
17322: IFFALSE 17336
// Say ( Sikorski , D9-Sik-1 ) ;
17324: LD_EXP 24
17328: PPUSH
17329: LD_STRING D9-Sik-1
17331: PPUSH
17332: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
17336: LD_INT 22
17338: PUSH
17339: LD_INT 4
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PPUSH
17346: CALL_OW 69
17350: PUSH
17351: LD_INT 0
17353: EQUAL
17354: PUSH
17355: LD_EXP 3
17359: AND
17360: IFFALSE 17369
// SetAchievement ( ACH_BLITZKRIEG ) ;
17362: LD_STRING ACH_BLITZKRIEG
17364: PPUSH
17365: CALL_OW 543
// if tick <= 25 25$08 then
17369: LD_OWVAR 1
17373: PUSH
17374: LD_INT 52780
17376: LESSEQUAL
17377: IFFALSE 17393
// begin wait ( 3 ) ;
17379: LD_INT 3
17381: PPUSH
17382: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
17386: LD_STRING ACH_ASPEED_8
17388: PPUSH
17389: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
17393: LD_STRING med1
17395: PPUSH
17396: LD_INT 1
17398: PPUSH
17399: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
17403: LD_STRING med2
17405: PPUSH
17406: LD_INT 1
17408: PPUSH
17409: CALL_OW 101
// if sikorskiStatus = 1 then
17413: LD_EXP 8
17417: PUSH
17418: LD_INT 1
17420: EQUAL
17421: IFFALSE 17435
// AddMedal ( perfect , 1 ) else
17423: LD_STRING perfect
17425: PPUSH
17426: LD_INT 1
17428: PPUSH
17429: CALL_OW 101
17433: GO 17446
// AddMedal ( perfect , - 1 ) ;
17435: LD_STRING perfect
17437: PPUSH
17438: LD_INT 1
17440: NEG
17441: PPUSH
17442: CALL_OW 101
// if Difficulty >= 3 then
17446: LD_OWVAR 67
17450: PUSH
17451: LD_INT 3
17453: GREATEREQUAL
17454: IFFALSE 17466
// SetAchievementEX ( ACH_AMER , 8 ) ;
17456: LD_STRING ACH_AMER
17458: PPUSH
17459: LD_INT 8
17461: PPUSH
17462: CALL_OW 564
// GiveMedals ( Main ) ;
17466: LD_STRING Main
17468: PPUSH
17469: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
17473: LD_INT 22
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 23
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 21
17495: PUSH
17496: LD_INT 1
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: LIST
17507: PPUSH
17508: CALL_OW 69
17512: PPUSH
17513: CALL_OW 43
// prefix := 08_ ;
17517: LD_ADDR_VAR 0 3
17521: PUSH
17522: LD_STRING 08_
17524: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
17525: LD_EXP 11
17529: PPUSH
17530: LD_VAR 0 3
17534: PUSH
17535: LD_STRING JMM
17537: STR
17538: PPUSH
17539: CALL_OW 38
// if IsLive ( Brown ) then
17543: LD_EXP 12
17547: PPUSH
17548: CALL_OW 300
17552: IFFALSE 17572
// SaveCharacters ( Brown , prefix & Brown ) ;
17554: LD_EXP 12
17558: PPUSH
17559: LD_VAR 0 3
17563: PUSH
17564: LD_STRING Brown
17566: STR
17567: PPUSH
17568: CALL_OW 38
// if IsLive ( Donaldson ) then
17572: LD_EXP 13
17576: PPUSH
17577: CALL_OW 300
17581: IFFALSE 17601
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
17583: LD_EXP 13
17587: PPUSH
17588: LD_VAR 0 3
17592: PUSH
17593: LD_STRING Donaldson
17595: STR
17596: PPUSH
17597: CALL_OW 38
// if IsLive ( Bobby ) then
17601: LD_EXP 14
17605: PPUSH
17606: CALL_OW 300
17610: IFFALSE 17630
// SaveCharacters ( Bobby , prefix & Bobby ) ;
17612: LD_EXP 14
17616: PPUSH
17617: LD_VAR 0 3
17621: PUSH
17622: LD_STRING Bobby
17624: STR
17625: PPUSH
17626: CALL_OW 38
// if IsLive ( Cyrus ) then
17630: LD_EXP 15
17634: PPUSH
17635: CALL_OW 300
17639: IFFALSE 17659
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
17641: LD_EXP 15
17645: PPUSH
17646: LD_VAR 0 3
17650: PUSH
17651: LD_STRING Cyrus
17653: STR
17654: PPUSH
17655: CALL_OW 38
// if IsLive ( Lisa ) then
17659: LD_EXP 16
17663: PPUSH
17664: CALL_OW 300
17668: IFFALSE 17688
// SaveCharacters ( Lisa , prefix & Lisa ) ;
17670: LD_EXP 16
17674: PPUSH
17675: LD_VAR 0 3
17679: PUSH
17680: LD_STRING Lisa
17682: STR
17683: PPUSH
17684: CALL_OW 38
// if IsLive ( Frank ) then
17688: LD_EXP 17
17692: PPUSH
17693: CALL_OW 300
17697: IFFALSE 17717
// SaveCharacters ( Frank , prefix & Frank ) ;
17699: LD_EXP 17
17703: PPUSH
17704: LD_VAR 0 3
17708: PUSH
17709: LD_STRING Frank
17711: STR
17712: PPUSH
17713: CALL_OW 38
// if IsLive ( Gladstone ) then
17717: LD_EXP 18
17721: PPUSH
17722: CALL_OW 300
17726: IFFALSE 17746
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
17728: LD_EXP 18
17732: PPUSH
17733: LD_VAR 0 3
17737: PUSH
17738: LD_STRING Gladstone
17740: STR
17741: PPUSH
17742: CALL_OW 38
// if IsLive ( Kikuchi ) then
17746: LD_EXP 19
17750: PPUSH
17751: CALL_OW 300
17755: IFFALSE 17775
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
17757: LD_EXP 19
17761: PPUSH
17762: LD_VAR 0 3
17766: PUSH
17767: LD_STRING Kikuchi
17769: STR
17770: PPUSH
17771: CALL_OW 38
// if IsLive ( Denis ) then
17775: LD_EXP 22
17779: PPUSH
17780: CALL_OW 300
17784: IFFALSE 17804
// SaveCharacters ( Denis , prefix & Denis ) ;
17786: LD_EXP 22
17790: PPUSH
17791: LD_VAR 0 3
17795: PUSH
17796: LD_STRING Denis
17798: STR
17799: PPUSH
17800: CALL_OW 38
// if IsLive ( Joan ) then
17804: LD_EXP 23
17808: PPUSH
17809: CALL_OW 300
17813: IFFALSE 17833
// SaveCharacters ( Joan , prefix & Joan ) ;
17815: LD_EXP 23
17819: PPUSH
17820: LD_VAR 0 3
17824: PUSH
17825: LD_STRING Joan
17827: STR
17828: PPUSH
17829: CALL_OW 38
// if IsLive ( Khatam ) then
17833: LD_EXP 20
17837: PPUSH
17838: CALL_OW 300
17842: IFFALSE 17862
// SaveCharacters ( Khatam , prefix & Khatam ) ;
17844: LD_EXP 20
17848: PPUSH
17849: LD_VAR 0 3
17853: PUSH
17854: LD_STRING Khatam
17856: STR
17857: PPUSH
17858: CALL_OW 38
// if IsLive ( Houten ) then
17862: LD_EXP 21
17866: PPUSH
17867: CALL_OW 300
17871: IFFALSE 17891
// SaveCharacters ( Houten , prefix & Houten ) ;
17873: LD_EXP 21
17877: PPUSH
17878: LD_VAR 0 3
17882: PUSH
17883: LD_STRING Houten
17885: STR
17886: PPUSH
17887: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
17891: LD_INT 22
17893: PUSH
17894: LD_INT 1
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: LD_INT 21
17903: PUSH
17904: LD_INT 1
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 23
17913: PUSH
17914: LD_INT 1
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: LIST
17925: PPUSH
17926: CALL_OW 69
17930: PUSH
17931: LD_EXP 11
17935: PUSH
17936: LD_EXP 12
17940: PUSH
17941: LD_EXP 13
17945: PUSH
17946: LD_EXP 14
17950: PUSH
17951: LD_EXP 15
17955: PUSH
17956: LD_EXP 16
17960: PUSH
17961: LD_EXP 17
17965: PUSH
17966: LD_EXP 18
17970: PUSH
17971: LD_EXP 19
17975: PUSH
17976: LD_EXP 22
17980: PUSH
17981: LD_EXP 23
17985: PUSH
17986: LD_EXP 21
17990: PUSH
17991: LD_EXP 20
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: DIFF
18011: PPUSH
18012: LD_STRING 08_other_survivors
18014: PPUSH
18015: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
18019: LD_INT 15
18021: PPUSH
18022: CALL 7021 0 1
// SaveVariable ( sikorskiIsKilled , 08_SikorskiStatus ) ;
18026: LD_EXP 9
18030: PPUSH
18031: LD_STRING 08_SikorskiStatus
18033: PPUSH
18034: CALL_OW 39
// YouWin ;
18038: CALL_OW 103
// end ; end_of_file
18042: PPOPN 3
18044: END
// export function SikorskiCounter ; begin
18045: LD_INT 0
18047: PPUSH
// repeat wait ( 0 0$1 ) ;
18048: LD_INT 35
18050: PPUSH
18051: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
18055: LD_ADDR_OWVAR 47
18059: PUSH
18060: LD_STRING #Am08-2
18062: PUSH
18063: LD_EXP 3
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
18072: LD_ADDR_EXP 3
18076: PUSH
18077: LD_EXP 3
18081: PUSH
18082: LD_INT 35
18084: MINUS
18085: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
18086: LD_EXP 3
18090: PUSH
18091: LD_INT 0
18093: EQUAL
18094: IFFALSE 18048
// display_strings := [ ] ;
18096: LD_ADDR_OWVAR 47
18100: PUSH
18101: EMPTY
18102: ST_TO_ADDR
// end ;
18103: LD_VAR 0 1
18107: RET
// export function SikorskiWaitCounter ; begin
18108: LD_INT 0
18110: PPUSH
// repeat wait ( 0 0$1 ) ;
18111: LD_INT 35
18113: PPUSH
18114: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
18118: LD_ADDR_OWVAR 47
18122: PUSH
18123: LD_STRING #Am08-1
18125: PUSH
18126: LD_EXP 4
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
18135: LD_ADDR_EXP 4
18139: PUSH
18140: LD_EXP 4
18144: PUSH
18145: LD_INT 35
18147: MINUS
18148: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
18149: LD_EXP 4
18153: PUSH
18154: LD_INT 0
18156: EQUAL
18157: IFFALSE 18111
// display_strings := [ ] ;
18159: LD_ADDR_OWVAR 47
18163: PUSH
18164: EMPTY
18165: ST_TO_ADDR
// end ; end_of_file
18166: LD_VAR 0 1
18170: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
18171: LD_EXP 3
18175: IFFALSE 18215
18177: GO 18179
18179: DISABLE
// begin enable ;
18180: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
18181: LD_INT 14
18183: PPUSH
18184: CALL_OW 435
18188: PUSH
18189: LD_INT 10
18191: LESS
18192: IFFALSE 18215
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
18194: LD_INT 1
18196: PPUSH
18197: LD_INT 5
18199: PPUSH
18200: CALL_OW 12
18204: PPUSH
18205: LD_INT 14
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL_OW 55
// end ;
18215: END
// every 0 0$55 trigger sikorskiArriveCounter do
18216: LD_EXP 3
18220: IFFALSE 18260
18222: GO 18224
18224: DISABLE
// begin enable ;
18225: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
18226: LD_INT 13
18228: PPUSH
18229: CALL_OW 435
18233: PUSH
18234: LD_INT 10
18236: LESS
18237: IFFALSE 18260
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
18239: LD_INT 1
18241: PPUSH
18242: LD_INT 5
18244: PPUSH
18245: CALL_OW 12
18249: PPUSH
18250: LD_INT 13
18252: PPUSH
18253: LD_INT 1
18255: PPUSH
18256: CALL_OW 55
// end ; end_of_file
18260: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
18261: LD_INT 0
18263: PPUSH
18264: PPUSH
// if not units then
18265: LD_VAR 0 1
18269: NOT
18270: IFFALSE 18274
// exit ;
18272: GO 18399
// result := false ;
18274: LD_ADDR_VAR 0 4
18278: PUSH
18279: LD_INT 0
18281: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
18282: LD_ADDR_VAR 0 5
18286: PUSH
18287: LD_VAR 0 1
18291: PPUSH
18292: LD_INT 26
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PPUSH
18302: CALL_OW 72
18306: ST_TO_ADDR
// if tmp then
18307: LD_VAR 0 5
18311: IFFALSE 18337
// result := Say ( tmp [ 1 ] , menDialog ) ;
18313: LD_ADDR_VAR 0 4
18317: PUSH
18318: LD_VAR 0 5
18322: PUSH
18323: LD_INT 1
18325: ARRAY
18326: PPUSH
18327: LD_VAR 0 2
18331: PPUSH
18332: CALL_OW 88
18336: ST_TO_ADDR
// if not result then
18337: LD_VAR 0 4
18341: NOT
18342: IFFALSE 18399
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
18344: LD_ADDR_VAR 0 5
18348: PUSH
18349: LD_VAR 0 1
18353: PPUSH
18354: LD_INT 26
18356: PUSH
18357: LD_INT 2
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PPUSH
18364: CALL_OW 72
18368: ST_TO_ADDR
// if tmp then
18369: LD_VAR 0 5
18373: IFFALSE 18399
// result := Say ( tmp [ 1 ] , womenDialog ) ;
18375: LD_ADDR_VAR 0 4
18379: PUSH
18380: LD_VAR 0 5
18384: PUSH
18385: LD_INT 1
18387: ARRAY
18388: PPUSH
18389: LD_VAR 0 3
18393: PPUSH
18394: CALL_OW 88
18398: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
18399: LD_VAR 0 4
18403: RET
// every 0 0$1 do
18404: GO 18406
18406: DISABLE
// begin enable ;
18407: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18408: LD_STRING updateTimer(
18410: PUSH
18411: LD_OWVAR 1
18415: STR
18416: PUSH
18417: LD_STRING );
18419: STR
18420: PPUSH
18421: CALL_OW 559
// end ;
18425: END
// export function SOS_MapStart ( ) ; begin
18426: LD_INT 0
18428: PPUSH
// if streamModeActive then
18429: LD_EXP 33
18433: IFFALSE 18442
// DefineStreamItems ( true ) ;
18435: LD_INT 1
18437: PPUSH
18438: CALL 20096 0 1
// UpdateFactoryWaypoints ( ) ;
18442: CALL 32957 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18446: CALL 33214 0 0
// end ;
18450: LD_VAR 0 1
18454: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18455: LD_INT 0
18457: PPUSH
// if p2 = 100 then
18458: LD_VAR 0 2
18462: PUSH
18463: LD_INT 100
18465: EQUAL
18466: IFFALSE 19469
// begin if not StreamModeActive then
18468: LD_EXP 33
18472: NOT
18473: IFFALSE 18483
// StreamModeActive := true ;
18475: LD_ADDR_EXP 33
18479: PUSH
18480: LD_INT 1
18482: ST_TO_ADDR
// if p3 = 0 then
18483: LD_VAR 0 3
18487: PUSH
18488: LD_INT 0
18490: EQUAL
18491: IFFALSE 18497
// InitStreamMode ;
18493: CALL 19632 0 0
// if p3 = 1 then
18497: LD_VAR 0 3
18501: PUSH
18502: LD_INT 1
18504: EQUAL
18505: IFFALSE 18515
// sRocket := true ;
18507: LD_ADDR_EXP 38
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// if p3 = 2 then
18515: LD_VAR 0 3
18519: PUSH
18520: LD_INT 2
18522: EQUAL
18523: IFFALSE 18533
// sSpeed := true ;
18525: LD_ADDR_EXP 37
18529: PUSH
18530: LD_INT 1
18532: ST_TO_ADDR
// if p3 = 3 then
18533: LD_VAR 0 3
18537: PUSH
18538: LD_INT 3
18540: EQUAL
18541: IFFALSE 18551
// sEngine := true ;
18543: LD_ADDR_EXP 39
18547: PUSH
18548: LD_INT 1
18550: ST_TO_ADDR
// if p3 = 4 then
18551: LD_VAR 0 3
18555: PUSH
18556: LD_INT 4
18558: EQUAL
18559: IFFALSE 18569
// sSpec := true ;
18561: LD_ADDR_EXP 36
18565: PUSH
18566: LD_INT 1
18568: ST_TO_ADDR
// if p3 = 5 then
18569: LD_VAR 0 3
18573: PUSH
18574: LD_INT 5
18576: EQUAL
18577: IFFALSE 18587
// sLevel := true ;
18579: LD_ADDR_EXP 40
18583: PUSH
18584: LD_INT 1
18586: ST_TO_ADDR
// if p3 = 6 then
18587: LD_VAR 0 3
18591: PUSH
18592: LD_INT 6
18594: EQUAL
18595: IFFALSE 18605
// sArmoury := true ;
18597: LD_ADDR_EXP 41
18601: PUSH
18602: LD_INT 1
18604: ST_TO_ADDR
// if p3 = 7 then
18605: LD_VAR 0 3
18609: PUSH
18610: LD_INT 7
18612: EQUAL
18613: IFFALSE 18623
// sRadar := true ;
18615: LD_ADDR_EXP 42
18619: PUSH
18620: LD_INT 1
18622: ST_TO_ADDR
// if p3 = 8 then
18623: LD_VAR 0 3
18627: PUSH
18628: LD_INT 8
18630: EQUAL
18631: IFFALSE 18641
// sBunker := true ;
18633: LD_ADDR_EXP 43
18637: PUSH
18638: LD_INT 1
18640: ST_TO_ADDR
// if p3 = 9 then
18641: LD_VAR 0 3
18645: PUSH
18646: LD_INT 9
18648: EQUAL
18649: IFFALSE 18659
// sHack := true ;
18651: LD_ADDR_EXP 44
18655: PUSH
18656: LD_INT 1
18658: ST_TO_ADDR
// if p3 = 10 then
18659: LD_VAR 0 3
18663: PUSH
18664: LD_INT 10
18666: EQUAL
18667: IFFALSE 18677
// sFire := true ;
18669: LD_ADDR_EXP 45
18673: PUSH
18674: LD_INT 1
18676: ST_TO_ADDR
// if p3 = 11 then
18677: LD_VAR 0 3
18681: PUSH
18682: LD_INT 11
18684: EQUAL
18685: IFFALSE 18695
// sRefresh := true ;
18687: LD_ADDR_EXP 46
18691: PUSH
18692: LD_INT 1
18694: ST_TO_ADDR
// if p3 = 12 then
18695: LD_VAR 0 3
18699: PUSH
18700: LD_INT 12
18702: EQUAL
18703: IFFALSE 18713
// sExp := true ;
18705: LD_ADDR_EXP 47
18709: PUSH
18710: LD_INT 1
18712: ST_TO_ADDR
// if p3 = 13 then
18713: LD_VAR 0 3
18717: PUSH
18718: LD_INT 13
18720: EQUAL
18721: IFFALSE 18731
// sDepot := true ;
18723: LD_ADDR_EXP 48
18727: PUSH
18728: LD_INT 1
18730: ST_TO_ADDR
// if p3 = 14 then
18731: LD_VAR 0 3
18735: PUSH
18736: LD_INT 14
18738: EQUAL
18739: IFFALSE 18749
// sFlag := true ;
18741: LD_ADDR_EXP 49
18745: PUSH
18746: LD_INT 1
18748: ST_TO_ADDR
// if p3 = 15 then
18749: LD_VAR 0 3
18753: PUSH
18754: LD_INT 15
18756: EQUAL
18757: IFFALSE 18767
// sKamikadze := true ;
18759: LD_ADDR_EXP 57
18763: PUSH
18764: LD_INT 1
18766: ST_TO_ADDR
// if p3 = 16 then
18767: LD_VAR 0 3
18771: PUSH
18772: LD_INT 16
18774: EQUAL
18775: IFFALSE 18785
// sTroll := true ;
18777: LD_ADDR_EXP 58
18781: PUSH
18782: LD_INT 1
18784: ST_TO_ADDR
// if p3 = 17 then
18785: LD_VAR 0 3
18789: PUSH
18790: LD_INT 17
18792: EQUAL
18793: IFFALSE 18803
// sSlow := true ;
18795: LD_ADDR_EXP 59
18799: PUSH
18800: LD_INT 1
18802: ST_TO_ADDR
// if p3 = 18 then
18803: LD_VAR 0 3
18807: PUSH
18808: LD_INT 18
18810: EQUAL
18811: IFFALSE 18821
// sLack := true ;
18813: LD_ADDR_EXP 60
18817: PUSH
18818: LD_INT 1
18820: ST_TO_ADDR
// if p3 = 19 then
18821: LD_VAR 0 3
18825: PUSH
18826: LD_INT 19
18828: EQUAL
18829: IFFALSE 18839
// sTank := true ;
18831: LD_ADDR_EXP 62
18835: PUSH
18836: LD_INT 1
18838: ST_TO_ADDR
// if p3 = 20 then
18839: LD_VAR 0 3
18843: PUSH
18844: LD_INT 20
18846: EQUAL
18847: IFFALSE 18857
// sRemote := true ;
18849: LD_ADDR_EXP 63
18853: PUSH
18854: LD_INT 1
18856: ST_TO_ADDR
// if p3 = 21 then
18857: LD_VAR 0 3
18861: PUSH
18862: LD_INT 21
18864: EQUAL
18865: IFFALSE 18875
// sPowell := true ;
18867: LD_ADDR_EXP 64
18871: PUSH
18872: LD_INT 1
18874: ST_TO_ADDR
// if p3 = 22 then
18875: LD_VAR 0 3
18879: PUSH
18880: LD_INT 22
18882: EQUAL
18883: IFFALSE 18893
// sTeleport := true ;
18885: LD_ADDR_EXP 67
18889: PUSH
18890: LD_INT 1
18892: ST_TO_ADDR
// if p3 = 23 then
18893: LD_VAR 0 3
18897: PUSH
18898: LD_INT 23
18900: EQUAL
18901: IFFALSE 18911
// sOilTower := true ;
18903: LD_ADDR_EXP 69
18907: PUSH
18908: LD_INT 1
18910: ST_TO_ADDR
// if p3 = 24 then
18911: LD_VAR 0 3
18915: PUSH
18916: LD_INT 24
18918: EQUAL
18919: IFFALSE 18929
// sShovel := true ;
18921: LD_ADDR_EXP 70
18925: PUSH
18926: LD_INT 1
18928: ST_TO_ADDR
// if p3 = 25 then
18929: LD_VAR 0 3
18933: PUSH
18934: LD_INT 25
18936: EQUAL
18937: IFFALSE 18947
// sSheik := true ;
18939: LD_ADDR_EXP 71
18943: PUSH
18944: LD_INT 1
18946: ST_TO_ADDR
// if p3 = 26 then
18947: LD_VAR 0 3
18951: PUSH
18952: LD_INT 26
18954: EQUAL
18955: IFFALSE 18965
// sEarthquake := true ;
18957: LD_ADDR_EXP 73
18961: PUSH
18962: LD_INT 1
18964: ST_TO_ADDR
// if p3 = 27 then
18965: LD_VAR 0 3
18969: PUSH
18970: LD_INT 27
18972: EQUAL
18973: IFFALSE 18983
// sAI := true ;
18975: LD_ADDR_EXP 74
18979: PUSH
18980: LD_INT 1
18982: ST_TO_ADDR
// if p3 = 28 then
18983: LD_VAR 0 3
18987: PUSH
18988: LD_INT 28
18990: EQUAL
18991: IFFALSE 19001
// sCargo := true ;
18993: LD_ADDR_EXP 77
18997: PUSH
18998: LD_INT 1
19000: ST_TO_ADDR
// if p3 = 29 then
19001: LD_VAR 0 3
19005: PUSH
19006: LD_INT 29
19008: EQUAL
19009: IFFALSE 19019
// sDLaser := true ;
19011: LD_ADDR_EXP 78
19015: PUSH
19016: LD_INT 1
19018: ST_TO_ADDR
// if p3 = 30 then
19019: LD_VAR 0 3
19023: PUSH
19024: LD_INT 30
19026: EQUAL
19027: IFFALSE 19037
// sExchange := true ;
19029: LD_ADDR_EXP 79
19033: PUSH
19034: LD_INT 1
19036: ST_TO_ADDR
// if p3 = 31 then
19037: LD_VAR 0 3
19041: PUSH
19042: LD_INT 31
19044: EQUAL
19045: IFFALSE 19055
// sFac := true ;
19047: LD_ADDR_EXP 80
19051: PUSH
19052: LD_INT 1
19054: ST_TO_ADDR
// if p3 = 32 then
19055: LD_VAR 0 3
19059: PUSH
19060: LD_INT 32
19062: EQUAL
19063: IFFALSE 19073
// sPower := true ;
19065: LD_ADDR_EXP 81
19069: PUSH
19070: LD_INT 1
19072: ST_TO_ADDR
// if p3 = 33 then
19073: LD_VAR 0 3
19077: PUSH
19078: LD_INT 33
19080: EQUAL
19081: IFFALSE 19091
// sRandom := true ;
19083: LD_ADDR_EXP 82
19087: PUSH
19088: LD_INT 1
19090: ST_TO_ADDR
// if p3 = 34 then
19091: LD_VAR 0 3
19095: PUSH
19096: LD_INT 34
19098: EQUAL
19099: IFFALSE 19109
// sShield := true ;
19101: LD_ADDR_EXP 83
19105: PUSH
19106: LD_INT 1
19108: ST_TO_ADDR
// if p3 = 35 then
19109: LD_VAR 0 3
19113: PUSH
19114: LD_INT 35
19116: EQUAL
19117: IFFALSE 19127
// sTime := true ;
19119: LD_ADDR_EXP 84
19123: PUSH
19124: LD_INT 1
19126: ST_TO_ADDR
// if p3 = 36 then
19127: LD_VAR 0 3
19131: PUSH
19132: LD_INT 36
19134: EQUAL
19135: IFFALSE 19145
// sTools := true ;
19137: LD_ADDR_EXP 85
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// if p3 = 101 then
19145: LD_VAR 0 3
19149: PUSH
19150: LD_INT 101
19152: EQUAL
19153: IFFALSE 19163
// sSold := true ;
19155: LD_ADDR_EXP 50
19159: PUSH
19160: LD_INT 1
19162: ST_TO_ADDR
// if p3 = 102 then
19163: LD_VAR 0 3
19167: PUSH
19168: LD_INT 102
19170: EQUAL
19171: IFFALSE 19181
// sDiff := true ;
19173: LD_ADDR_EXP 51
19177: PUSH
19178: LD_INT 1
19180: ST_TO_ADDR
// if p3 = 103 then
19181: LD_VAR 0 3
19185: PUSH
19186: LD_INT 103
19188: EQUAL
19189: IFFALSE 19199
// sFog := true ;
19191: LD_ADDR_EXP 54
19195: PUSH
19196: LD_INT 1
19198: ST_TO_ADDR
// if p3 = 104 then
19199: LD_VAR 0 3
19203: PUSH
19204: LD_INT 104
19206: EQUAL
19207: IFFALSE 19217
// sReset := true ;
19209: LD_ADDR_EXP 55
19213: PUSH
19214: LD_INT 1
19216: ST_TO_ADDR
// if p3 = 105 then
19217: LD_VAR 0 3
19221: PUSH
19222: LD_INT 105
19224: EQUAL
19225: IFFALSE 19235
// sSun := true ;
19227: LD_ADDR_EXP 56
19231: PUSH
19232: LD_INT 1
19234: ST_TO_ADDR
// if p3 = 106 then
19235: LD_VAR 0 3
19239: PUSH
19240: LD_INT 106
19242: EQUAL
19243: IFFALSE 19253
// sTiger := true ;
19245: LD_ADDR_EXP 52
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if p3 = 107 then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_INT 107
19260: EQUAL
19261: IFFALSE 19271
// sBomb := true ;
19263: LD_ADDR_EXP 53
19267: PUSH
19268: LD_INT 1
19270: ST_TO_ADDR
// if p3 = 108 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 108
19278: EQUAL
19279: IFFALSE 19289
// sWound := true ;
19281: LD_ADDR_EXP 61
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 109 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 109
19296: EQUAL
19297: IFFALSE 19307
// sBetray := true ;
19299: LD_ADDR_EXP 65
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 110 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 110
19314: EQUAL
19315: IFFALSE 19325
// sContamin := true ;
19317: LD_ADDR_EXP 66
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 111 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 111
19332: EQUAL
19333: IFFALSE 19343
// sOil := true ;
19335: LD_ADDR_EXP 68
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 112 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 112
19350: EQUAL
19351: IFFALSE 19361
// sStu := true ;
19353: LD_ADDR_EXP 72
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 113 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 113
19368: EQUAL
19369: IFFALSE 19379
// sBazooka := true ;
19371: LD_ADDR_EXP 75
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 114 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 114
19386: EQUAL
19387: IFFALSE 19397
// sMortar := true ;
19389: LD_ADDR_EXP 76
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 115 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 115
19404: EQUAL
19405: IFFALSE 19415
// sRanger := true ;
19407: LD_ADDR_EXP 86
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 116 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 116
19422: EQUAL
19423: IFFALSE 19433
// sComputer := true ;
19425: LD_ADDR_EXP 87
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 117 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 117
19440: EQUAL
19441: IFFALSE 19451
// s30 := true ;
19443: LD_ADDR_EXP 88
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 118 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 118
19458: EQUAL
19459: IFFALSE 19469
// s60 := true ;
19461: LD_ADDR_EXP 89
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// end ; if p2 = 101 then
19469: LD_VAR 0 2
19473: PUSH
19474: LD_INT 101
19476: EQUAL
19477: IFFALSE 19605
// begin case p3 of 1 :
19479: LD_VAR 0 3
19483: PUSH
19484: LD_INT 1
19486: DOUBLE
19487: EQUAL
19488: IFTRUE 19492
19490: GO 19499
19492: POP
// hHackUnlimitedResources ; 2 :
19493: CALL 31703 0 0
19497: GO 19605
19499: LD_INT 2
19501: DOUBLE
19502: EQUAL
19503: IFTRUE 19507
19505: GO 19514
19507: POP
// hHackSetLevel10 ; 3 :
19508: CALL 31836 0 0
19512: GO 19605
19514: LD_INT 3
19516: DOUBLE
19517: EQUAL
19518: IFTRUE 19522
19520: GO 19529
19522: POP
// hHackSetLevel10YourUnits ; 4 :
19523: CALL 31921 0 0
19527: GO 19605
19529: LD_INT 4
19531: DOUBLE
19532: EQUAL
19533: IFTRUE 19537
19535: GO 19544
19537: POP
// hHackInvincible ; 5 :
19538: CALL 32369 0 0
19542: GO 19605
19544: LD_INT 5
19546: DOUBLE
19547: EQUAL
19548: IFTRUE 19552
19550: GO 19559
19552: POP
// hHackInvisible ; 6 :
19553: CALL 32480 0 0
19557: GO 19605
19559: LD_INT 6
19561: DOUBLE
19562: EQUAL
19563: IFTRUE 19567
19565: GO 19574
19567: POP
// hHackChangeYourSide ; 7 :
19568: CALL 32537 0 0
19572: GO 19605
19574: LD_INT 7
19576: DOUBLE
19577: EQUAL
19578: IFTRUE 19582
19580: GO 19589
19582: POP
// hHackChangeUnitSide ; 8 :
19583: CALL 32579 0 0
19587: GO 19605
19589: LD_INT 8
19591: DOUBLE
19592: EQUAL
19593: IFTRUE 19597
19595: GO 19604
19597: POP
// hHackFog ; end ;
19598: CALL 32680 0 0
19602: GO 19605
19604: POP
// end ; end ;
19605: LD_VAR 0 7
19609: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19610: GO 19612
19612: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19613: LD_STRING initStreamRollete();
19615: PPUSH
19616: CALL_OW 559
// InitStreamMode ;
19620: CALL 19632 0 0
// DefineStreamItems ( false ) ;
19624: LD_INT 0
19626: PPUSH
19627: CALL 20096 0 1
// end ;
19631: END
// function InitStreamMode ; begin
19632: LD_INT 0
19634: PPUSH
// streamModeActive := false ;
19635: LD_ADDR_EXP 33
19639: PUSH
19640: LD_INT 0
19642: ST_TO_ADDR
// normalCounter := 36 ;
19643: LD_ADDR_EXP 34
19647: PUSH
19648: LD_INT 36
19650: ST_TO_ADDR
// hardcoreCounter := 18 ;
19651: LD_ADDR_EXP 35
19655: PUSH
19656: LD_INT 18
19658: ST_TO_ADDR
// sRocket := false ;
19659: LD_ADDR_EXP 38
19663: PUSH
19664: LD_INT 0
19666: ST_TO_ADDR
// sSpeed := false ;
19667: LD_ADDR_EXP 37
19671: PUSH
19672: LD_INT 0
19674: ST_TO_ADDR
// sEngine := false ;
19675: LD_ADDR_EXP 39
19679: PUSH
19680: LD_INT 0
19682: ST_TO_ADDR
// sSpec := false ;
19683: LD_ADDR_EXP 36
19687: PUSH
19688: LD_INT 0
19690: ST_TO_ADDR
// sLevel := false ;
19691: LD_ADDR_EXP 40
19695: PUSH
19696: LD_INT 0
19698: ST_TO_ADDR
// sArmoury := false ;
19699: LD_ADDR_EXP 41
19703: PUSH
19704: LD_INT 0
19706: ST_TO_ADDR
// sRadar := false ;
19707: LD_ADDR_EXP 42
19711: PUSH
19712: LD_INT 0
19714: ST_TO_ADDR
// sBunker := false ;
19715: LD_ADDR_EXP 43
19719: PUSH
19720: LD_INT 0
19722: ST_TO_ADDR
// sHack := false ;
19723: LD_ADDR_EXP 44
19727: PUSH
19728: LD_INT 0
19730: ST_TO_ADDR
// sFire := false ;
19731: LD_ADDR_EXP 45
19735: PUSH
19736: LD_INT 0
19738: ST_TO_ADDR
// sRefresh := false ;
19739: LD_ADDR_EXP 46
19743: PUSH
19744: LD_INT 0
19746: ST_TO_ADDR
// sExp := false ;
19747: LD_ADDR_EXP 47
19751: PUSH
19752: LD_INT 0
19754: ST_TO_ADDR
// sDepot := false ;
19755: LD_ADDR_EXP 48
19759: PUSH
19760: LD_INT 0
19762: ST_TO_ADDR
// sFlag := false ;
19763: LD_ADDR_EXP 49
19767: PUSH
19768: LD_INT 0
19770: ST_TO_ADDR
// sKamikadze := false ;
19771: LD_ADDR_EXP 57
19775: PUSH
19776: LD_INT 0
19778: ST_TO_ADDR
// sTroll := false ;
19779: LD_ADDR_EXP 58
19783: PUSH
19784: LD_INT 0
19786: ST_TO_ADDR
// sSlow := false ;
19787: LD_ADDR_EXP 59
19791: PUSH
19792: LD_INT 0
19794: ST_TO_ADDR
// sLack := false ;
19795: LD_ADDR_EXP 60
19799: PUSH
19800: LD_INT 0
19802: ST_TO_ADDR
// sTank := false ;
19803: LD_ADDR_EXP 62
19807: PUSH
19808: LD_INT 0
19810: ST_TO_ADDR
// sRemote := false ;
19811: LD_ADDR_EXP 63
19815: PUSH
19816: LD_INT 0
19818: ST_TO_ADDR
// sPowell := false ;
19819: LD_ADDR_EXP 64
19823: PUSH
19824: LD_INT 0
19826: ST_TO_ADDR
// sTeleport := false ;
19827: LD_ADDR_EXP 67
19831: PUSH
19832: LD_INT 0
19834: ST_TO_ADDR
// sOilTower := false ;
19835: LD_ADDR_EXP 69
19839: PUSH
19840: LD_INT 0
19842: ST_TO_ADDR
// sShovel := false ;
19843: LD_ADDR_EXP 70
19847: PUSH
19848: LD_INT 0
19850: ST_TO_ADDR
// sSheik := false ;
19851: LD_ADDR_EXP 71
19855: PUSH
19856: LD_INT 0
19858: ST_TO_ADDR
// sEarthquake := false ;
19859: LD_ADDR_EXP 73
19863: PUSH
19864: LD_INT 0
19866: ST_TO_ADDR
// sAI := false ;
19867: LD_ADDR_EXP 74
19871: PUSH
19872: LD_INT 0
19874: ST_TO_ADDR
// sCargo := false ;
19875: LD_ADDR_EXP 77
19879: PUSH
19880: LD_INT 0
19882: ST_TO_ADDR
// sDLaser := false ;
19883: LD_ADDR_EXP 78
19887: PUSH
19888: LD_INT 0
19890: ST_TO_ADDR
// sExchange := false ;
19891: LD_ADDR_EXP 79
19895: PUSH
19896: LD_INT 0
19898: ST_TO_ADDR
// sFac := false ;
19899: LD_ADDR_EXP 80
19903: PUSH
19904: LD_INT 0
19906: ST_TO_ADDR
// sPower := false ;
19907: LD_ADDR_EXP 81
19911: PUSH
19912: LD_INT 0
19914: ST_TO_ADDR
// sRandom := false ;
19915: LD_ADDR_EXP 82
19919: PUSH
19920: LD_INT 0
19922: ST_TO_ADDR
// sShield := false ;
19923: LD_ADDR_EXP 83
19927: PUSH
19928: LD_INT 0
19930: ST_TO_ADDR
// sTime := false ;
19931: LD_ADDR_EXP 84
19935: PUSH
19936: LD_INT 0
19938: ST_TO_ADDR
// sTools := false ;
19939: LD_ADDR_EXP 85
19943: PUSH
19944: LD_INT 0
19946: ST_TO_ADDR
// sSold := false ;
19947: LD_ADDR_EXP 50
19951: PUSH
19952: LD_INT 0
19954: ST_TO_ADDR
// sDiff := false ;
19955: LD_ADDR_EXP 51
19959: PUSH
19960: LD_INT 0
19962: ST_TO_ADDR
// sFog := false ;
19963: LD_ADDR_EXP 54
19967: PUSH
19968: LD_INT 0
19970: ST_TO_ADDR
// sReset := false ;
19971: LD_ADDR_EXP 55
19975: PUSH
19976: LD_INT 0
19978: ST_TO_ADDR
// sSun := false ;
19979: LD_ADDR_EXP 56
19983: PUSH
19984: LD_INT 0
19986: ST_TO_ADDR
// sTiger := false ;
19987: LD_ADDR_EXP 52
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// sBomb := false ;
19995: LD_ADDR_EXP 53
19999: PUSH
20000: LD_INT 0
20002: ST_TO_ADDR
// sWound := false ;
20003: LD_ADDR_EXP 61
20007: PUSH
20008: LD_INT 0
20010: ST_TO_ADDR
// sBetray := false ;
20011: LD_ADDR_EXP 65
20015: PUSH
20016: LD_INT 0
20018: ST_TO_ADDR
// sContamin := false ;
20019: LD_ADDR_EXP 66
20023: PUSH
20024: LD_INT 0
20026: ST_TO_ADDR
// sOil := false ;
20027: LD_ADDR_EXP 68
20031: PUSH
20032: LD_INT 0
20034: ST_TO_ADDR
// sStu := false ;
20035: LD_ADDR_EXP 72
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
// sBazooka := false ;
20043: LD_ADDR_EXP 75
20047: PUSH
20048: LD_INT 0
20050: ST_TO_ADDR
// sMortar := false ;
20051: LD_ADDR_EXP 76
20055: PUSH
20056: LD_INT 0
20058: ST_TO_ADDR
// sRanger := false ;
20059: LD_ADDR_EXP 86
20063: PUSH
20064: LD_INT 0
20066: ST_TO_ADDR
// sComputer := false ;
20067: LD_ADDR_EXP 87
20071: PUSH
20072: LD_INT 0
20074: ST_TO_ADDR
// s30 := false ;
20075: LD_ADDR_EXP 88
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// s60 := false ;
20083: LD_ADDR_EXP 89
20087: PUSH
20088: LD_INT 0
20090: ST_TO_ADDR
// end ;
20091: LD_VAR 0 1
20095: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20096: LD_INT 0
20098: PPUSH
20099: PPUSH
20100: PPUSH
20101: PPUSH
20102: PPUSH
20103: PPUSH
20104: PPUSH
// result := [ ] ;
20105: LD_ADDR_VAR 0 2
20109: PUSH
20110: EMPTY
20111: ST_TO_ADDR
// if campaign_id = 1 then
20112: LD_OWVAR 69
20116: PUSH
20117: LD_INT 1
20119: EQUAL
20120: IFFALSE 23286
// begin case mission_number of 1 :
20122: LD_OWVAR 70
20126: PUSH
20127: LD_INT 1
20129: DOUBLE
20130: EQUAL
20131: IFTRUE 20135
20133: GO 20211
20135: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20136: LD_ADDR_VAR 0 2
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: LD_INT 4
20146: PUSH
20147: LD_INT 11
20149: PUSH
20150: LD_INT 12
20152: PUSH
20153: LD_INT 15
20155: PUSH
20156: LD_INT 16
20158: PUSH
20159: LD_INT 22
20161: PUSH
20162: LD_INT 23
20164: PUSH
20165: LD_INT 26
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 101
20181: PUSH
20182: LD_INT 102
20184: PUSH
20185: LD_INT 106
20187: PUSH
20188: LD_INT 116
20190: PUSH
20191: LD_INT 117
20193: PUSH
20194: LD_INT 118
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: ST_TO_ADDR
20209: GO 23284
20211: LD_INT 2
20213: DOUBLE
20214: EQUAL
20215: IFTRUE 20219
20217: GO 20303
20219: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20220: LD_ADDR_VAR 0 2
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: LD_INT 4
20230: PUSH
20231: LD_INT 11
20233: PUSH
20234: LD_INT 12
20236: PUSH
20237: LD_INT 15
20239: PUSH
20240: LD_INT 16
20242: PUSH
20243: LD_INT 22
20245: PUSH
20246: LD_INT 23
20248: PUSH
20249: LD_INT 26
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 101
20265: PUSH
20266: LD_INT 102
20268: PUSH
20269: LD_INT 105
20271: PUSH
20272: LD_INT 106
20274: PUSH
20275: LD_INT 108
20277: PUSH
20278: LD_INT 116
20280: PUSH
20281: LD_INT 117
20283: PUSH
20284: LD_INT 118
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: ST_TO_ADDR
20301: GO 23284
20303: LD_INT 3
20305: DOUBLE
20306: EQUAL
20307: IFTRUE 20311
20309: GO 20399
20311: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20312: LD_ADDR_VAR 0 2
20316: PUSH
20317: LD_INT 2
20319: PUSH
20320: LD_INT 4
20322: PUSH
20323: LD_INT 5
20325: PUSH
20326: LD_INT 11
20328: PUSH
20329: LD_INT 12
20331: PUSH
20332: LD_INT 15
20334: PUSH
20335: LD_INT 16
20337: PUSH
20338: LD_INT 22
20340: PUSH
20341: LD_INT 26
20343: PUSH
20344: LD_INT 36
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 101
20361: PUSH
20362: LD_INT 102
20364: PUSH
20365: LD_INT 105
20367: PUSH
20368: LD_INT 106
20370: PUSH
20371: LD_INT 108
20373: PUSH
20374: LD_INT 116
20376: PUSH
20377: LD_INT 117
20379: PUSH
20380: LD_INT 118
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: ST_TO_ADDR
20397: GO 23284
20399: LD_INT 4
20401: DOUBLE
20402: EQUAL
20403: IFTRUE 20407
20405: GO 20503
20407: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20408: LD_ADDR_VAR 0 2
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: LD_INT 4
20418: PUSH
20419: LD_INT 5
20421: PUSH
20422: LD_INT 8
20424: PUSH
20425: LD_INT 11
20427: PUSH
20428: LD_INT 12
20430: PUSH
20431: LD_INT 15
20433: PUSH
20434: LD_INT 16
20436: PUSH
20437: LD_INT 22
20439: PUSH
20440: LD_INT 23
20442: PUSH
20443: LD_INT 26
20445: PUSH
20446: LD_INT 36
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 101
20465: PUSH
20466: LD_INT 102
20468: PUSH
20469: LD_INT 105
20471: PUSH
20472: LD_INT 106
20474: PUSH
20475: LD_INT 108
20477: PUSH
20478: LD_INT 116
20480: PUSH
20481: LD_INT 117
20483: PUSH
20484: LD_INT 118
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: ST_TO_ADDR
20501: GO 23284
20503: LD_INT 5
20505: DOUBLE
20506: EQUAL
20507: IFTRUE 20511
20509: GO 20623
20511: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20512: LD_ADDR_VAR 0 2
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 4
20522: PUSH
20523: LD_INT 5
20525: PUSH
20526: LD_INT 6
20528: PUSH
20529: LD_INT 8
20531: PUSH
20532: LD_INT 11
20534: PUSH
20535: LD_INT 12
20537: PUSH
20538: LD_INT 15
20540: PUSH
20541: LD_INT 16
20543: PUSH
20544: LD_INT 22
20546: PUSH
20547: LD_INT 23
20549: PUSH
20550: LD_INT 25
20552: PUSH
20553: LD_INT 26
20555: PUSH
20556: LD_INT 36
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 101
20577: PUSH
20578: LD_INT 102
20580: PUSH
20581: LD_INT 105
20583: PUSH
20584: LD_INT 106
20586: PUSH
20587: LD_INT 108
20589: PUSH
20590: LD_INT 109
20592: PUSH
20593: LD_INT 112
20595: PUSH
20596: LD_INT 116
20598: PUSH
20599: LD_INT 117
20601: PUSH
20602: LD_INT 118
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: ST_TO_ADDR
20621: GO 23284
20623: LD_INT 6
20625: DOUBLE
20626: EQUAL
20627: IFTRUE 20631
20629: GO 20763
20631: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20632: LD_ADDR_VAR 0 2
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 4
20642: PUSH
20643: LD_INT 5
20645: PUSH
20646: LD_INT 6
20648: PUSH
20649: LD_INT 8
20651: PUSH
20652: LD_INT 11
20654: PUSH
20655: LD_INT 12
20657: PUSH
20658: LD_INT 15
20660: PUSH
20661: LD_INT 16
20663: PUSH
20664: LD_INT 20
20666: PUSH
20667: LD_INT 21
20669: PUSH
20670: LD_INT 22
20672: PUSH
20673: LD_INT 23
20675: PUSH
20676: LD_INT 25
20678: PUSH
20679: LD_INT 26
20681: PUSH
20682: LD_INT 30
20684: PUSH
20685: LD_INT 31
20687: PUSH
20688: LD_INT 32
20690: PUSH
20691: LD_INT 36
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 101
20717: PUSH
20718: LD_INT 102
20720: PUSH
20721: LD_INT 105
20723: PUSH
20724: LD_INT 106
20726: PUSH
20727: LD_INT 108
20729: PUSH
20730: LD_INT 109
20732: PUSH
20733: LD_INT 112
20735: PUSH
20736: LD_INT 116
20738: PUSH
20739: LD_INT 117
20741: PUSH
20742: LD_INT 118
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: ST_TO_ADDR
20761: GO 23284
20763: LD_INT 7
20765: DOUBLE
20766: EQUAL
20767: IFTRUE 20771
20769: GO 20883
20771: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20772: LD_ADDR_VAR 0 2
20776: PUSH
20777: LD_INT 2
20779: PUSH
20780: LD_INT 4
20782: PUSH
20783: LD_INT 5
20785: PUSH
20786: LD_INT 7
20788: PUSH
20789: LD_INT 11
20791: PUSH
20792: LD_INT 12
20794: PUSH
20795: LD_INT 15
20797: PUSH
20798: LD_INT 16
20800: PUSH
20801: LD_INT 20
20803: PUSH
20804: LD_INT 21
20806: PUSH
20807: LD_INT 22
20809: PUSH
20810: LD_INT 23
20812: PUSH
20813: LD_INT 25
20815: PUSH
20816: LD_INT 26
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 101
20837: PUSH
20838: LD_INT 102
20840: PUSH
20841: LD_INT 103
20843: PUSH
20844: LD_INT 105
20846: PUSH
20847: LD_INT 106
20849: PUSH
20850: LD_INT 108
20852: PUSH
20853: LD_INT 112
20855: PUSH
20856: LD_INT 116
20858: PUSH
20859: LD_INT 117
20861: PUSH
20862: LD_INT 118
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: ST_TO_ADDR
20881: GO 23284
20883: LD_INT 8
20885: DOUBLE
20886: EQUAL
20887: IFTRUE 20891
20889: GO 21031
20891: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20892: LD_ADDR_VAR 0 2
20896: PUSH
20897: LD_INT 2
20899: PUSH
20900: LD_INT 4
20902: PUSH
20903: LD_INT 5
20905: PUSH
20906: LD_INT 6
20908: PUSH
20909: LD_INT 7
20911: PUSH
20912: LD_INT 8
20914: PUSH
20915: LD_INT 11
20917: PUSH
20918: LD_INT 12
20920: PUSH
20921: LD_INT 15
20923: PUSH
20924: LD_INT 16
20926: PUSH
20927: LD_INT 20
20929: PUSH
20930: LD_INT 21
20932: PUSH
20933: LD_INT 22
20935: PUSH
20936: LD_INT 23
20938: PUSH
20939: LD_INT 25
20941: PUSH
20942: LD_INT 26
20944: PUSH
20945: LD_INT 30
20947: PUSH
20948: LD_INT 31
20950: PUSH
20951: LD_INT 32
20953: PUSH
20954: LD_INT 36
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 101
20981: PUSH
20982: LD_INT 102
20984: PUSH
20985: LD_INT 103
20987: PUSH
20988: LD_INT 105
20990: PUSH
20991: LD_INT 106
20993: PUSH
20994: LD_INT 108
20996: PUSH
20997: LD_INT 109
20999: PUSH
21000: LD_INT 112
21002: PUSH
21003: LD_INT 116
21005: PUSH
21006: LD_INT 117
21008: PUSH
21009: LD_INT 118
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: ST_TO_ADDR
21029: GO 23284
21031: LD_INT 9
21033: DOUBLE
21034: EQUAL
21035: IFTRUE 21039
21037: GO 21187
21039: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21040: LD_ADDR_VAR 0 2
21044: PUSH
21045: LD_INT 2
21047: PUSH
21048: LD_INT 4
21050: PUSH
21051: LD_INT 5
21053: PUSH
21054: LD_INT 6
21056: PUSH
21057: LD_INT 7
21059: PUSH
21060: LD_INT 8
21062: PUSH
21063: LD_INT 11
21065: PUSH
21066: LD_INT 12
21068: PUSH
21069: LD_INT 15
21071: PUSH
21072: LD_INT 16
21074: PUSH
21075: LD_INT 20
21077: PUSH
21078: LD_INT 21
21080: PUSH
21081: LD_INT 22
21083: PUSH
21084: LD_INT 23
21086: PUSH
21087: LD_INT 25
21089: PUSH
21090: LD_INT 26
21092: PUSH
21093: LD_INT 28
21095: PUSH
21096: LD_INT 30
21098: PUSH
21099: LD_INT 31
21101: PUSH
21102: LD_INT 32
21104: PUSH
21105: LD_INT 36
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 101
21133: PUSH
21134: LD_INT 102
21136: PUSH
21137: LD_INT 103
21139: PUSH
21140: LD_INT 105
21142: PUSH
21143: LD_INT 106
21145: PUSH
21146: LD_INT 108
21148: PUSH
21149: LD_INT 109
21151: PUSH
21152: LD_INT 112
21154: PUSH
21155: LD_INT 114
21157: PUSH
21158: LD_INT 116
21160: PUSH
21161: LD_INT 117
21163: PUSH
21164: LD_INT 118
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: ST_TO_ADDR
21185: GO 23284
21187: LD_INT 10
21189: DOUBLE
21190: EQUAL
21191: IFTRUE 21195
21193: GO 21391
21195: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21196: LD_ADDR_VAR 0 2
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: LD_INT 4
21206: PUSH
21207: LD_INT 5
21209: PUSH
21210: LD_INT 6
21212: PUSH
21213: LD_INT 7
21215: PUSH
21216: LD_INT 8
21218: PUSH
21219: LD_INT 9
21221: PUSH
21222: LD_INT 10
21224: PUSH
21225: LD_INT 11
21227: PUSH
21228: LD_INT 12
21230: PUSH
21231: LD_INT 13
21233: PUSH
21234: LD_INT 14
21236: PUSH
21237: LD_INT 15
21239: PUSH
21240: LD_INT 16
21242: PUSH
21243: LD_INT 17
21245: PUSH
21246: LD_INT 18
21248: PUSH
21249: LD_INT 19
21251: PUSH
21252: LD_INT 20
21254: PUSH
21255: LD_INT 21
21257: PUSH
21258: LD_INT 22
21260: PUSH
21261: LD_INT 23
21263: PUSH
21264: LD_INT 24
21266: PUSH
21267: LD_INT 25
21269: PUSH
21270: LD_INT 26
21272: PUSH
21273: LD_INT 28
21275: PUSH
21276: LD_INT 30
21278: PUSH
21279: LD_INT 31
21281: PUSH
21282: LD_INT 32
21284: PUSH
21285: LD_INT 36
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 101
21321: PUSH
21322: LD_INT 102
21324: PUSH
21325: LD_INT 103
21327: PUSH
21328: LD_INT 104
21330: PUSH
21331: LD_INT 105
21333: PUSH
21334: LD_INT 106
21336: PUSH
21337: LD_INT 107
21339: PUSH
21340: LD_INT 108
21342: PUSH
21343: LD_INT 109
21345: PUSH
21346: LD_INT 110
21348: PUSH
21349: LD_INT 111
21351: PUSH
21352: LD_INT 112
21354: PUSH
21355: LD_INT 114
21357: PUSH
21358: LD_INT 116
21360: PUSH
21361: LD_INT 117
21363: PUSH
21364: LD_INT 118
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: ST_TO_ADDR
21389: GO 23284
21391: LD_INT 11
21393: DOUBLE
21394: EQUAL
21395: IFTRUE 21399
21397: GO 21603
21399: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21400: LD_ADDR_VAR 0 2
21404: PUSH
21405: LD_INT 2
21407: PUSH
21408: LD_INT 3
21410: PUSH
21411: LD_INT 4
21413: PUSH
21414: LD_INT 5
21416: PUSH
21417: LD_INT 6
21419: PUSH
21420: LD_INT 7
21422: PUSH
21423: LD_INT 8
21425: PUSH
21426: LD_INT 9
21428: PUSH
21429: LD_INT 10
21431: PUSH
21432: LD_INT 11
21434: PUSH
21435: LD_INT 12
21437: PUSH
21438: LD_INT 13
21440: PUSH
21441: LD_INT 14
21443: PUSH
21444: LD_INT 15
21446: PUSH
21447: LD_INT 16
21449: PUSH
21450: LD_INT 17
21452: PUSH
21453: LD_INT 18
21455: PUSH
21456: LD_INT 19
21458: PUSH
21459: LD_INT 20
21461: PUSH
21462: LD_INT 21
21464: PUSH
21465: LD_INT 22
21467: PUSH
21468: LD_INT 23
21470: PUSH
21471: LD_INT 24
21473: PUSH
21474: LD_INT 25
21476: PUSH
21477: LD_INT 26
21479: PUSH
21480: LD_INT 28
21482: PUSH
21483: LD_INT 30
21485: PUSH
21486: LD_INT 31
21488: PUSH
21489: LD_INT 32
21491: PUSH
21492: LD_INT 34
21494: PUSH
21495: LD_INT 36
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 101
21533: PUSH
21534: LD_INT 102
21536: PUSH
21537: LD_INT 103
21539: PUSH
21540: LD_INT 104
21542: PUSH
21543: LD_INT 105
21545: PUSH
21546: LD_INT 106
21548: PUSH
21549: LD_INT 107
21551: PUSH
21552: LD_INT 108
21554: PUSH
21555: LD_INT 109
21557: PUSH
21558: LD_INT 110
21560: PUSH
21561: LD_INT 111
21563: PUSH
21564: LD_INT 112
21566: PUSH
21567: LD_INT 114
21569: PUSH
21570: LD_INT 116
21572: PUSH
21573: LD_INT 117
21575: PUSH
21576: LD_INT 118
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: ST_TO_ADDR
21601: GO 23284
21603: LD_INT 12
21605: DOUBLE
21606: EQUAL
21607: IFTRUE 21611
21609: GO 21831
21611: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21612: LD_ADDR_VAR 0 2
21616: PUSH
21617: LD_INT 1
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: LD_INT 3
21625: PUSH
21626: LD_INT 4
21628: PUSH
21629: LD_INT 5
21631: PUSH
21632: LD_INT 6
21634: PUSH
21635: LD_INT 7
21637: PUSH
21638: LD_INT 8
21640: PUSH
21641: LD_INT 9
21643: PUSH
21644: LD_INT 10
21646: PUSH
21647: LD_INT 11
21649: PUSH
21650: LD_INT 12
21652: PUSH
21653: LD_INT 13
21655: PUSH
21656: LD_INT 14
21658: PUSH
21659: LD_INT 15
21661: PUSH
21662: LD_INT 16
21664: PUSH
21665: LD_INT 17
21667: PUSH
21668: LD_INT 18
21670: PUSH
21671: LD_INT 19
21673: PUSH
21674: LD_INT 20
21676: PUSH
21677: LD_INT 21
21679: PUSH
21680: LD_INT 22
21682: PUSH
21683: LD_INT 23
21685: PUSH
21686: LD_INT 24
21688: PUSH
21689: LD_INT 25
21691: PUSH
21692: LD_INT 26
21694: PUSH
21695: LD_INT 27
21697: PUSH
21698: LD_INT 28
21700: PUSH
21701: LD_INT 30
21703: PUSH
21704: LD_INT 31
21706: PUSH
21707: LD_INT 32
21709: PUSH
21710: LD_INT 33
21712: PUSH
21713: LD_INT 34
21715: PUSH
21716: LD_INT 36
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 101
21757: PUSH
21758: LD_INT 102
21760: PUSH
21761: LD_INT 103
21763: PUSH
21764: LD_INT 104
21766: PUSH
21767: LD_INT 105
21769: PUSH
21770: LD_INT 106
21772: PUSH
21773: LD_INT 107
21775: PUSH
21776: LD_INT 108
21778: PUSH
21779: LD_INT 109
21781: PUSH
21782: LD_INT 110
21784: PUSH
21785: LD_INT 111
21787: PUSH
21788: LD_INT 112
21790: PUSH
21791: LD_INT 113
21793: PUSH
21794: LD_INT 114
21796: PUSH
21797: LD_INT 116
21799: PUSH
21800: LD_INT 117
21802: PUSH
21803: LD_INT 118
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: ST_TO_ADDR
21829: GO 23284
21831: LD_INT 13
21833: DOUBLE
21834: EQUAL
21835: IFTRUE 21839
21837: GO 22047
21839: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21840: LD_ADDR_VAR 0 2
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: LD_INT 2
21850: PUSH
21851: LD_INT 3
21853: PUSH
21854: LD_INT 4
21856: PUSH
21857: LD_INT 5
21859: PUSH
21860: LD_INT 8
21862: PUSH
21863: LD_INT 9
21865: PUSH
21866: LD_INT 10
21868: PUSH
21869: LD_INT 11
21871: PUSH
21872: LD_INT 12
21874: PUSH
21875: LD_INT 14
21877: PUSH
21878: LD_INT 15
21880: PUSH
21881: LD_INT 16
21883: PUSH
21884: LD_INT 17
21886: PUSH
21887: LD_INT 18
21889: PUSH
21890: LD_INT 19
21892: PUSH
21893: LD_INT 20
21895: PUSH
21896: LD_INT 21
21898: PUSH
21899: LD_INT 22
21901: PUSH
21902: LD_INT 23
21904: PUSH
21905: LD_INT 24
21907: PUSH
21908: LD_INT 25
21910: PUSH
21911: LD_INT 26
21913: PUSH
21914: LD_INT 27
21916: PUSH
21917: LD_INT 28
21919: PUSH
21920: LD_INT 30
21922: PUSH
21923: LD_INT 31
21925: PUSH
21926: LD_INT 32
21928: PUSH
21929: LD_INT 33
21931: PUSH
21932: LD_INT 34
21934: PUSH
21935: LD_INT 36
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 101
21973: PUSH
21974: LD_INT 102
21976: PUSH
21977: LD_INT 103
21979: PUSH
21980: LD_INT 104
21982: PUSH
21983: LD_INT 105
21985: PUSH
21986: LD_INT 106
21988: PUSH
21989: LD_INT 107
21991: PUSH
21992: LD_INT 108
21994: PUSH
21995: LD_INT 109
21997: PUSH
21998: LD_INT 110
22000: PUSH
22001: LD_INT 111
22003: PUSH
22004: LD_INT 112
22006: PUSH
22007: LD_INT 113
22009: PUSH
22010: LD_INT 114
22012: PUSH
22013: LD_INT 116
22015: PUSH
22016: LD_INT 117
22018: PUSH
22019: LD_INT 118
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: ST_TO_ADDR
22045: GO 23284
22047: LD_INT 14
22049: DOUBLE
22050: EQUAL
22051: IFTRUE 22055
22053: GO 22279
22055: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22056: LD_ADDR_VAR 0 2
22060: PUSH
22061: LD_INT 1
22063: PUSH
22064: LD_INT 2
22066: PUSH
22067: LD_INT 3
22069: PUSH
22070: LD_INT 4
22072: PUSH
22073: LD_INT 5
22075: PUSH
22076: LD_INT 6
22078: PUSH
22079: LD_INT 7
22081: PUSH
22082: LD_INT 8
22084: PUSH
22085: LD_INT 9
22087: PUSH
22088: LD_INT 10
22090: PUSH
22091: LD_INT 11
22093: PUSH
22094: LD_INT 12
22096: PUSH
22097: LD_INT 13
22099: PUSH
22100: LD_INT 14
22102: PUSH
22103: LD_INT 15
22105: PUSH
22106: LD_INT 16
22108: PUSH
22109: LD_INT 17
22111: PUSH
22112: LD_INT 18
22114: PUSH
22115: LD_INT 19
22117: PUSH
22118: LD_INT 20
22120: PUSH
22121: LD_INT 21
22123: PUSH
22124: LD_INT 22
22126: PUSH
22127: LD_INT 23
22129: PUSH
22130: LD_INT 24
22132: PUSH
22133: LD_INT 25
22135: PUSH
22136: LD_INT 26
22138: PUSH
22139: LD_INT 27
22141: PUSH
22142: LD_INT 28
22144: PUSH
22145: LD_INT 29
22147: PUSH
22148: LD_INT 30
22150: PUSH
22151: LD_INT 31
22153: PUSH
22154: LD_INT 32
22156: PUSH
22157: LD_INT 33
22159: PUSH
22160: LD_INT 34
22162: PUSH
22163: LD_INT 36
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 101
22205: PUSH
22206: LD_INT 102
22208: PUSH
22209: LD_INT 103
22211: PUSH
22212: LD_INT 104
22214: PUSH
22215: LD_INT 105
22217: PUSH
22218: LD_INT 106
22220: PUSH
22221: LD_INT 107
22223: PUSH
22224: LD_INT 108
22226: PUSH
22227: LD_INT 109
22229: PUSH
22230: LD_INT 110
22232: PUSH
22233: LD_INT 111
22235: PUSH
22236: LD_INT 112
22238: PUSH
22239: LD_INT 113
22241: PUSH
22242: LD_INT 114
22244: PUSH
22245: LD_INT 116
22247: PUSH
22248: LD_INT 117
22250: PUSH
22251: LD_INT 118
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: ST_TO_ADDR
22277: GO 23284
22279: LD_INT 15
22281: DOUBLE
22282: EQUAL
22283: IFTRUE 22287
22285: GO 22511
22287: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22288: LD_ADDR_VAR 0 2
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: LD_INT 3
22301: PUSH
22302: LD_INT 4
22304: PUSH
22305: LD_INT 5
22307: PUSH
22308: LD_INT 6
22310: PUSH
22311: LD_INT 7
22313: PUSH
22314: LD_INT 8
22316: PUSH
22317: LD_INT 9
22319: PUSH
22320: LD_INT 10
22322: PUSH
22323: LD_INT 11
22325: PUSH
22326: LD_INT 12
22328: PUSH
22329: LD_INT 13
22331: PUSH
22332: LD_INT 14
22334: PUSH
22335: LD_INT 15
22337: PUSH
22338: LD_INT 16
22340: PUSH
22341: LD_INT 17
22343: PUSH
22344: LD_INT 18
22346: PUSH
22347: LD_INT 19
22349: PUSH
22350: LD_INT 20
22352: PUSH
22353: LD_INT 21
22355: PUSH
22356: LD_INT 22
22358: PUSH
22359: LD_INT 23
22361: PUSH
22362: LD_INT 24
22364: PUSH
22365: LD_INT 25
22367: PUSH
22368: LD_INT 26
22370: PUSH
22371: LD_INT 27
22373: PUSH
22374: LD_INT 28
22376: PUSH
22377: LD_INT 29
22379: PUSH
22380: LD_INT 30
22382: PUSH
22383: LD_INT 31
22385: PUSH
22386: LD_INT 32
22388: PUSH
22389: LD_INT 33
22391: PUSH
22392: LD_INT 34
22394: PUSH
22395: LD_INT 36
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 101
22437: PUSH
22438: LD_INT 102
22440: PUSH
22441: LD_INT 103
22443: PUSH
22444: LD_INT 104
22446: PUSH
22447: LD_INT 105
22449: PUSH
22450: LD_INT 106
22452: PUSH
22453: LD_INT 107
22455: PUSH
22456: LD_INT 108
22458: PUSH
22459: LD_INT 109
22461: PUSH
22462: LD_INT 110
22464: PUSH
22465: LD_INT 111
22467: PUSH
22468: LD_INT 112
22470: PUSH
22471: LD_INT 113
22473: PUSH
22474: LD_INT 114
22476: PUSH
22477: LD_INT 116
22479: PUSH
22480: LD_INT 117
22482: PUSH
22483: LD_INT 118
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: ST_TO_ADDR
22509: GO 23284
22511: LD_INT 16
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22655
22519: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22520: LD_ADDR_VAR 0 2
22524: PUSH
22525: LD_INT 2
22527: PUSH
22528: LD_INT 4
22530: PUSH
22531: LD_INT 5
22533: PUSH
22534: LD_INT 7
22536: PUSH
22537: LD_INT 11
22539: PUSH
22540: LD_INT 12
22542: PUSH
22543: LD_INT 15
22545: PUSH
22546: LD_INT 16
22548: PUSH
22549: LD_INT 20
22551: PUSH
22552: LD_INT 21
22554: PUSH
22555: LD_INT 22
22557: PUSH
22558: LD_INT 23
22560: PUSH
22561: LD_INT 25
22563: PUSH
22564: LD_INT 26
22566: PUSH
22567: LD_INT 30
22569: PUSH
22570: LD_INT 31
22572: PUSH
22573: LD_INT 32
22575: PUSH
22576: LD_INT 33
22578: PUSH
22579: LD_INT 34
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 101
22605: PUSH
22606: LD_INT 102
22608: PUSH
22609: LD_INT 103
22611: PUSH
22612: LD_INT 106
22614: PUSH
22615: LD_INT 108
22617: PUSH
22618: LD_INT 112
22620: PUSH
22621: LD_INT 113
22623: PUSH
22624: LD_INT 114
22626: PUSH
22627: LD_INT 116
22629: PUSH
22630: LD_INT 117
22632: PUSH
22633: LD_INT 118
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: ST_TO_ADDR
22653: GO 23284
22655: LD_INT 17
22657: DOUBLE
22658: EQUAL
22659: IFTRUE 22663
22661: GO 22887
22663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22664: LD_ADDR_VAR 0 2
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: LD_INT 2
22674: PUSH
22675: LD_INT 3
22677: PUSH
22678: LD_INT 4
22680: PUSH
22681: LD_INT 5
22683: PUSH
22684: LD_INT 6
22686: PUSH
22687: LD_INT 7
22689: PUSH
22690: LD_INT 8
22692: PUSH
22693: LD_INT 9
22695: PUSH
22696: LD_INT 10
22698: PUSH
22699: LD_INT 11
22701: PUSH
22702: LD_INT 12
22704: PUSH
22705: LD_INT 13
22707: PUSH
22708: LD_INT 14
22710: PUSH
22711: LD_INT 15
22713: PUSH
22714: LD_INT 16
22716: PUSH
22717: LD_INT 17
22719: PUSH
22720: LD_INT 18
22722: PUSH
22723: LD_INT 19
22725: PUSH
22726: LD_INT 20
22728: PUSH
22729: LD_INT 21
22731: PUSH
22732: LD_INT 22
22734: PUSH
22735: LD_INT 23
22737: PUSH
22738: LD_INT 24
22740: PUSH
22741: LD_INT 25
22743: PUSH
22744: LD_INT 26
22746: PUSH
22747: LD_INT 27
22749: PUSH
22750: LD_INT 28
22752: PUSH
22753: LD_INT 29
22755: PUSH
22756: LD_INT 30
22758: PUSH
22759: LD_INT 31
22761: PUSH
22762: LD_INT 32
22764: PUSH
22765: LD_INT 33
22767: PUSH
22768: LD_INT 34
22770: PUSH
22771: LD_INT 36
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 101
22813: PUSH
22814: LD_INT 102
22816: PUSH
22817: LD_INT 103
22819: PUSH
22820: LD_INT 104
22822: PUSH
22823: LD_INT 105
22825: PUSH
22826: LD_INT 106
22828: PUSH
22829: LD_INT 107
22831: PUSH
22832: LD_INT 108
22834: PUSH
22835: LD_INT 109
22837: PUSH
22838: LD_INT 110
22840: PUSH
22841: LD_INT 111
22843: PUSH
22844: LD_INT 112
22846: PUSH
22847: LD_INT 113
22849: PUSH
22850: LD_INT 114
22852: PUSH
22853: LD_INT 116
22855: PUSH
22856: LD_INT 117
22858: PUSH
22859: LD_INT 118
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: ST_TO_ADDR
22885: GO 23284
22887: LD_INT 18
22889: DOUBLE
22890: EQUAL
22891: IFTRUE 22895
22893: GO 23043
22895: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22896: LD_ADDR_VAR 0 2
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: LD_INT 4
22906: PUSH
22907: LD_INT 5
22909: PUSH
22910: LD_INT 7
22912: PUSH
22913: LD_INT 11
22915: PUSH
22916: LD_INT 12
22918: PUSH
22919: LD_INT 15
22921: PUSH
22922: LD_INT 16
22924: PUSH
22925: LD_INT 20
22927: PUSH
22928: LD_INT 21
22930: PUSH
22931: LD_INT 22
22933: PUSH
22934: LD_INT 23
22936: PUSH
22937: LD_INT 25
22939: PUSH
22940: LD_INT 26
22942: PUSH
22943: LD_INT 30
22945: PUSH
22946: LD_INT 31
22948: PUSH
22949: LD_INT 32
22951: PUSH
22952: LD_INT 33
22954: PUSH
22955: LD_INT 34
22957: PUSH
22958: LD_INT 35
22960: PUSH
22961: LD_INT 36
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 101
22989: PUSH
22990: LD_INT 102
22992: PUSH
22993: LD_INT 103
22995: PUSH
22996: LD_INT 106
22998: PUSH
22999: LD_INT 108
23001: PUSH
23002: LD_INT 112
23004: PUSH
23005: LD_INT 113
23007: PUSH
23008: LD_INT 114
23010: PUSH
23011: LD_INT 115
23013: PUSH
23014: LD_INT 116
23016: PUSH
23017: LD_INT 117
23019: PUSH
23020: LD_INT 118
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: ST_TO_ADDR
23041: GO 23284
23043: LD_INT 19
23045: DOUBLE
23046: EQUAL
23047: IFTRUE 23051
23049: GO 23283
23051: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23052: LD_ADDR_VAR 0 2
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: LD_INT 2
23062: PUSH
23063: LD_INT 3
23065: PUSH
23066: LD_INT 4
23068: PUSH
23069: LD_INT 5
23071: PUSH
23072: LD_INT 6
23074: PUSH
23075: LD_INT 7
23077: PUSH
23078: LD_INT 8
23080: PUSH
23081: LD_INT 9
23083: PUSH
23084: LD_INT 10
23086: PUSH
23087: LD_INT 11
23089: PUSH
23090: LD_INT 12
23092: PUSH
23093: LD_INT 13
23095: PUSH
23096: LD_INT 14
23098: PUSH
23099: LD_INT 15
23101: PUSH
23102: LD_INT 16
23104: PUSH
23105: LD_INT 17
23107: PUSH
23108: LD_INT 18
23110: PUSH
23111: LD_INT 19
23113: PUSH
23114: LD_INT 20
23116: PUSH
23117: LD_INT 21
23119: PUSH
23120: LD_INT 22
23122: PUSH
23123: LD_INT 23
23125: PUSH
23126: LD_INT 24
23128: PUSH
23129: LD_INT 25
23131: PUSH
23132: LD_INT 26
23134: PUSH
23135: LD_INT 27
23137: PUSH
23138: LD_INT 28
23140: PUSH
23141: LD_INT 29
23143: PUSH
23144: LD_INT 30
23146: PUSH
23147: LD_INT 31
23149: PUSH
23150: LD_INT 32
23152: PUSH
23153: LD_INT 33
23155: PUSH
23156: LD_INT 34
23158: PUSH
23159: LD_INT 35
23161: PUSH
23162: LD_INT 36
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 101
23205: PUSH
23206: LD_INT 102
23208: PUSH
23209: LD_INT 103
23211: PUSH
23212: LD_INT 104
23214: PUSH
23215: LD_INT 105
23217: PUSH
23218: LD_INT 106
23220: PUSH
23221: LD_INT 107
23223: PUSH
23224: LD_INT 108
23226: PUSH
23227: LD_INT 109
23229: PUSH
23230: LD_INT 110
23232: PUSH
23233: LD_INT 111
23235: PUSH
23236: LD_INT 112
23238: PUSH
23239: LD_INT 113
23241: PUSH
23242: LD_INT 114
23244: PUSH
23245: LD_INT 115
23247: PUSH
23248: LD_INT 116
23250: PUSH
23251: LD_INT 117
23253: PUSH
23254: LD_INT 118
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: ST_TO_ADDR
23281: GO 23284
23283: POP
// end else
23284: GO 23515
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23286: LD_ADDR_VAR 0 2
23290: PUSH
23291: LD_INT 1
23293: PUSH
23294: LD_INT 2
23296: PUSH
23297: LD_INT 3
23299: PUSH
23300: LD_INT 4
23302: PUSH
23303: LD_INT 5
23305: PUSH
23306: LD_INT 6
23308: PUSH
23309: LD_INT 7
23311: PUSH
23312: LD_INT 8
23314: PUSH
23315: LD_INT 9
23317: PUSH
23318: LD_INT 10
23320: PUSH
23321: LD_INT 11
23323: PUSH
23324: LD_INT 12
23326: PUSH
23327: LD_INT 13
23329: PUSH
23330: LD_INT 14
23332: PUSH
23333: LD_INT 15
23335: PUSH
23336: LD_INT 16
23338: PUSH
23339: LD_INT 17
23341: PUSH
23342: LD_INT 18
23344: PUSH
23345: LD_INT 19
23347: PUSH
23348: LD_INT 20
23350: PUSH
23351: LD_INT 21
23353: PUSH
23354: LD_INT 22
23356: PUSH
23357: LD_INT 23
23359: PUSH
23360: LD_INT 24
23362: PUSH
23363: LD_INT 25
23365: PUSH
23366: LD_INT 26
23368: PUSH
23369: LD_INT 27
23371: PUSH
23372: LD_INT 28
23374: PUSH
23375: LD_INT 29
23377: PUSH
23378: LD_INT 30
23380: PUSH
23381: LD_INT 31
23383: PUSH
23384: LD_INT 32
23386: PUSH
23387: LD_INT 33
23389: PUSH
23390: LD_INT 34
23392: PUSH
23393: LD_INT 35
23395: PUSH
23396: LD_INT 36
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 101
23439: PUSH
23440: LD_INT 102
23442: PUSH
23443: LD_INT 103
23445: PUSH
23446: LD_INT 104
23448: PUSH
23449: LD_INT 105
23451: PUSH
23452: LD_INT 106
23454: PUSH
23455: LD_INT 107
23457: PUSH
23458: LD_INT 108
23460: PUSH
23461: LD_INT 109
23463: PUSH
23464: LD_INT 110
23466: PUSH
23467: LD_INT 111
23469: PUSH
23470: LD_INT 112
23472: PUSH
23473: LD_INT 113
23475: PUSH
23476: LD_INT 114
23478: PUSH
23479: LD_INT 115
23481: PUSH
23482: LD_INT 116
23484: PUSH
23485: LD_INT 117
23487: PUSH
23488: LD_INT 118
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: ST_TO_ADDR
// if result then
23515: LD_VAR 0 2
23519: IFFALSE 24305
// begin normal :=  ;
23521: LD_ADDR_VAR 0 5
23525: PUSH
23526: LD_STRING 
23528: ST_TO_ADDR
// hardcore :=  ;
23529: LD_ADDR_VAR 0 6
23533: PUSH
23534: LD_STRING 
23536: ST_TO_ADDR
// active :=  ;
23537: LD_ADDR_VAR 0 7
23541: PUSH
23542: LD_STRING 
23544: ST_TO_ADDR
// for i = 1 to normalCounter do
23545: LD_ADDR_VAR 0 8
23549: PUSH
23550: DOUBLE
23551: LD_INT 1
23553: DEC
23554: ST_TO_ADDR
23555: LD_EXP 34
23559: PUSH
23560: FOR_TO
23561: IFFALSE 23662
// begin tmp := 0 ;
23563: LD_ADDR_VAR 0 3
23567: PUSH
23568: LD_STRING 0
23570: ST_TO_ADDR
// if result [ 1 ] then
23571: LD_VAR 0 2
23575: PUSH
23576: LD_INT 1
23578: ARRAY
23579: IFFALSE 23644
// if result [ 1 ] [ 1 ] = i then
23581: LD_VAR 0 2
23585: PUSH
23586: LD_INT 1
23588: ARRAY
23589: PUSH
23590: LD_INT 1
23592: ARRAY
23593: PUSH
23594: LD_VAR 0 8
23598: EQUAL
23599: IFFALSE 23644
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23601: LD_ADDR_VAR 0 2
23605: PUSH
23606: LD_VAR 0 2
23610: PPUSH
23611: LD_INT 1
23613: PPUSH
23614: LD_VAR 0 2
23618: PUSH
23619: LD_INT 1
23621: ARRAY
23622: PPUSH
23623: LD_INT 1
23625: PPUSH
23626: CALL_OW 3
23630: PPUSH
23631: CALL_OW 1
23635: ST_TO_ADDR
// tmp := 1 ;
23636: LD_ADDR_VAR 0 3
23640: PUSH
23641: LD_STRING 1
23643: ST_TO_ADDR
// end ; normal := normal & tmp ;
23644: LD_ADDR_VAR 0 5
23648: PUSH
23649: LD_VAR 0 5
23653: PUSH
23654: LD_VAR 0 3
23658: STR
23659: ST_TO_ADDR
// end ;
23660: GO 23560
23662: POP
23663: POP
// for i = 1 to hardcoreCounter do
23664: LD_ADDR_VAR 0 8
23668: PUSH
23669: DOUBLE
23670: LD_INT 1
23672: DEC
23673: ST_TO_ADDR
23674: LD_EXP 35
23678: PUSH
23679: FOR_TO
23680: IFFALSE 23785
// begin tmp := 0 ;
23682: LD_ADDR_VAR 0 3
23686: PUSH
23687: LD_STRING 0
23689: ST_TO_ADDR
// if result [ 2 ] then
23690: LD_VAR 0 2
23694: PUSH
23695: LD_INT 2
23697: ARRAY
23698: IFFALSE 23767
// if result [ 2 ] [ 1 ] = 100 + i then
23700: LD_VAR 0 2
23704: PUSH
23705: LD_INT 2
23707: ARRAY
23708: PUSH
23709: LD_INT 1
23711: ARRAY
23712: PUSH
23713: LD_INT 100
23715: PUSH
23716: LD_VAR 0 8
23720: PLUS
23721: EQUAL
23722: IFFALSE 23767
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23724: LD_ADDR_VAR 0 2
23728: PUSH
23729: LD_VAR 0 2
23733: PPUSH
23734: LD_INT 2
23736: PPUSH
23737: LD_VAR 0 2
23741: PUSH
23742: LD_INT 2
23744: ARRAY
23745: PPUSH
23746: LD_INT 1
23748: PPUSH
23749: CALL_OW 3
23753: PPUSH
23754: CALL_OW 1
23758: ST_TO_ADDR
// tmp := 1 ;
23759: LD_ADDR_VAR 0 3
23763: PUSH
23764: LD_STRING 1
23766: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23767: LD_ADDR_VAR 0 6
23771: PUSH
23772: LD_VAR 0 6
23776: PUSH
23777: LD_VAR 0 3
23781: STR
23782: ST_TO_ADDR
// end ;
23783: GO 23679
23785: POP
23786: POP
// if isGameLoad then
23787: LD_VAR 0 1
23791: IFFALSE 24266
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23793: LD_ADDR_VAR 0 4
23797: PUSH
23798: LD_EXP 38
23802: PUSH
23803: LD_EXP 37
23807: PUSH
23808: LD_EXP 39
23812: PUSH
23813: LD_EXP 36
23817: PUSH
23818: LD_EXP 40
23822: PUSH
23823: LD_EXP 41
23827: PUSH
23828: LD_EXP 42
23832: PUSH
23833: LD_EXP 43
23837: PUSH
23838: LD_EXP 44
23842: PUSH
23843: LD_EXP 45
23847: PUSH
23848: LD_EXP 46
23852: PUSH
23853: LD_EXP 47
23857: PUSH
23858: LD_EXP 48
23862: PUSH
23863: LD_EXP 49
23867: PUSH
23868: LD_EXP 57
23872: PUSH
23873: LD_EXP 58
23877: PUSH
23878: LD_EXP 59
23882: PUSH
23883: LD_EXP 60
23887: PUSH
23888: LD_EXP 62
23892: PUSH
23893: LD_EXP 63
23897: PUSH
23898: LD_EXP 64
23902: PUSH
23903: LD_EXP 67
23907: PUSH
23908: LD_EXP 69
23912: PUSH
23913: LD_EXP 70
23917: PUSH
23918: LD_EXP 71
23922: PUSH
23923: LD_EXP 73
23927: PUSH
23928: LD_EXP 74
23932: PUSH
23933: LD_EXP 77
23937: PUSH
23938: LD_EXP 78
23942: PUSH
23943: LD_EXP 79
23947: PUSH
23948: LD_EXP 80
23952: PUSH
23953: LD_EXP 81
23957: PUSH
23958: LD_EXP 82
23962: PUSH
23963: LD_EXP 83
23967: PUSH
23968: LD_EXP 84
23972: PUSH
23973: LD_EXP 85
23977: PUSH
23978: LD_EXP 50
23982: PUSH
23983: LD_EXP 51
23987: PUSH
23988: LD_EXP 54
23992: PUSH
23993: LD_EXP 55
23997: PUSH
23998: LD_EXP 56
24002: PUSH
24003: LD_EXP 52
24007: PUSH
24008: LD_EXP 53
24012: PUSH
24013: LD_EXP 61
24017: PUSH
24018: LD_EXP 65
24022: PUSH
24023: LD_EXP 66
24027: PUSH
24028: LD_EXP 68
24032: PUSH
24033: LD_EXP 72
24037: PUSH
24038: LD_EXP 75
24042: PUSH
24043: LD_EXP 76
24047: PUSH
24048: LD_EXP 86
24052: PUSH
24053: LD_EXP 87
24057: PUSH
24058: LD_EXP 88
24062: PUSH
24063: LD_EXP 89
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: ST_TO_ADDR
// tmp :=  ;
24124: LD_ADDR_VAR 0 3
24128: PUSH
24129: LD_STRING 
24131: ST_TO_ADDR
// for i = 1 to normalCounter do
24132: LD_ADDR_VAR 0 8
24136: PUSH
24137: DOUBLE
24138: LD_INT 1
24140: DEC
24141: ST_TO_ADDR
24142: LD_EXP 34
24146: PUSH
24147: FOR_TO
24148: IFFALSE 24184
// begin if flags [ i ] then
24150: LD_VAR 0 4
24154: PUSH
24155: LD_VAR 0 8
24159: ARRAY
24160: IFFALSE 24182
// tmp := tmp & i & ; ;
24162: LD_ADDR_VAR 0 3
24166: PUSH
24167: LD_VAR 0 3
24171: PUSH
24172: LD_VAR 0 8
24176: STR
24177: PUSH
24178: LD_STRING ;
24180: STR
24181: ST_TO_ADDR
// end ;
24182: GO 24147
24184: POP
24185: POP
// for i = 1 to hardcoreCounter do
24186: LD_ADDR_VAR 0 8
24190: PUSH
24191: DOUBLE
24192: LD_INT 1
24194: DEC
24195: ST_TO_ADDR
24196: LD_EXP 35
24200: PUSH
24201: FOR_TO
24202: IFFALSE 24248
// begin if flags [ normalCounter + i ] then
24204: LD_VAR 0 4
24208: PUSH
24209: LD_EXP 34
24213: PUSH
24214: LD_VAR 0 8
24218: PLUS
24219: ARRAY
24220: IFFALSE 24246
// tmp := tmp & ( 100 + i ) & ; ;
24222: LD_ADDR_VAR 0 3
24226: PUSH
24227: LD_VAR 0 3
24231: PUSH
24232: LD_INT 100
24234: PUSH
24235: LD_VAR 0 8
24239: PLUS
24240: STR
24241: PUSH
24242: LD_STRING ;
24244: STR
24245: ST_TO_ADDR
// end ;
24246: GO 24201
24248: POP
24249: POP
// if tmp then
24250: LD_VAR 0 3
24254: IFFALSE 24266
// active := tmp ;
24256: LD_ADDR_VAR 0 7
24260: PUSH
24261: LD_VAR 0 3
24265: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24266: LD_STRING getStreamItemsFromMission("
24268: PUSH
24269: LD_VAR 0 5
24273: STR
24274: PUSH
24275: LD_STRING ","
24277: STR
24278: PUSH
24279: LD_VAR 0 6
24283: STR
24284: PUSH
24285: LD_STRING ","
24287: STR
24288: PUSH
24289: LD_VAR 0 7
24293: STR
24294: PUSH
24295: LD_STRING ")
24297: STR
24298: PPUSH
24299: CALL_OW 559
// end else
24303: GO 24312
// ToLua ( getStreamItemsFromMission("","","") ) ;
24305: LD_STRING getStreamItemsFromMission("","","")
24307: PPUSH
24308: CALL_OW 559
// end ;
24312: LD_VAR 0 2
24316: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24317: LD_EXP 33
24321: PUSH
24322: LD_EXP 38
24326: AND
24327: IFFALSE 24451
24329: GO 24331
24331: DISABLE
24332: LD_INT 0
24334: PPUSH
24335: PPUSH
// begin enable ;
24336: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24337: LD_ADDR_VAR 0 2
24341: PUSH
24342: LD_INT 22
24344: PUSH
24345: LD_OWVAR 2
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: LD_INT 34
24359: PUSH
24360: LD_INT 7
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 34
24369: PUSH
24370: LD_INT 45
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 34
24379: PUSH
24380: LD_INT 28
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 34
24389: PUSH
24390: LD_INT 47
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PPUSH
24408: CALL_OW 69
24412: ST_TO_ADDR
// if not tmp then
24413: LD_VAR 0 2
24417: NOT
24418: IFFALSE 24422
// exit ;
24420: GO 24451
// for i in tmp do
24422: LD_ADDR_VAR 0 1
24426: PUSH
24427: LD_VAR 0 2
24431: PUSH
24432: FOR_IN
24433: IFFALSE 24449
// begin SetLives ( i , 0 ) ;
24435: LD_VAR 0 1
24439: PPUSH
24440: LD_INT 0
24442: PPUSH
24443: CALL_OW 234
// end ;
24447: GO 24432
24449: POP
24450: POP
// end ;
24451: PPOPN 2
24453: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24454: LD_EXP 33
24458: PUSH
24459: LD_EXP 39
24463: AND
24464: IFFALSE 24548
24466: GO 24468
24468: DISABLE
24469: LD_INT 0
24471: PPUSH
24472: PPUSH
// begin enable ;
24473: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24474: LD_ADDR_VAR 0 2
24478: PUSH
24479: LD_INT 22
24481: PUSH
24482: LD_OWVAR 2
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 32
24493: PUSH
24494: LD_INT 3
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PPUSH
24505: CALL_OW 69
24509: ST_TO_ADDR
// if not tmp then
24510: LD_VAR 0 2
24514: NOT
24515: IFFALSE 24519
// exit ;
24517: GO 24548
// for i in tmp do
24519: LD_ADDR_VAR 0 1
24523: PUSH
24524: LD_VAR 0 2
24528: PUSH
24529: FOR_IN
24530: IFFALSE 24546
// begin SetLives ( i , 0 ) ;
24532: LD_VAR 0 1
24536: PPUSH
24537: LD_INT 0
24539: PPUSH
24540: CALL_OW 234
// end ;
24544: GO 24529
24546: POP
24547: POP
// end ;
24548: PPOPN 2
24550: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24551: LD_EXP 33
24555: PUSH
24556: LD_EXP 36
24560: AND
24561: IFFALSE 24654
24563: GO 24565
24565: DISABLE
24566: LD_INT 0
24568: PPUSH
// begin enable ;
24569: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24570: LD_ADDR_VAR 0 1
24574: PUSH
24575: LD_INT 22
24577: PUSH
24578: LD_OWVAR 2
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 2
24589: PUSH
24590: LD_INT 25
24592: PUSH
24593: LD_INT 5
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 25
24602: PUSH
24603: LD_INT 9
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 25
24612: PUSH
24613: LD_INT 8
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PPUSH
24630: CALL_OW 69
24634: PUSH
24635: FOR_IN
24636: IFFALSE 24652
// begin SetClass ( i , 1 ) ;
24638: LD_VAR 0 1
24642: PPUSH
24643: LD_INT 1
24645: PPUSH
24646: CALL_OW 336
// end ;
24650: GO 24635
24652: POP
24653: POP
// end ;
24654: PPOPN 1
24656: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24657: LD_EXP 33
24661: PUSH
24662: LD_EXP 37
24666: AND
24667: PUSH
24668: LD_OWVAR 65
24672: PUSH
24673: LD_INT 7
24675: LESS
24676: AND
24677: IFFALSE 24691
24679: GO 24681
24681: DISABLE
// begin enable ;
24682: ENABLE
// game_speed := 7 ;
24683: LD_ADDR_OWVAR 65
24687: PUSH
24688: LD_INT 7
24690: ST_TO_ADDR
// end ;
24691: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24692: LD_EXP 33
24696: PUSH
24697: LD_EXP 40
24701: AND
24702: IFFALSE 24904
24704: GO 24706
24706: DISABLE
24707: LD_INT 0
24709: PPUSH
24710: PPUSH
24711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24712: LD_ADDR_VAR 0 3
24716: PUSH
24717: LD_INT 81
24719: PUSH
24720: LD_OWVAR 2
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 21
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PPUSH
24743: CALL_OW 69
24747: ST_TO_ADDR
// if not tmp then
24748: LD_VAR 0 3
24752: NOT
24753: IFFALSE 24757
// exit ;
24755: GO 24904
// if tmp > 5 then
24757: LD_VAR 0 3
24761: PUSH
24762: LD_INT 5
24764: GREATER
24765: IFFALSE 24777
// k := 5 else
24767: LD_ADDR_VAR 0 2
24771: PUSH
24772: LD_INT 5
24774: ST_TO_ADDR
24775: GO 24787
// k := tmp ;
24777: LD_ADDR_VAR 0 2
24781: PUSH
24782: LD_VAR 0 3
24786: ST_TO_ADDR
// for i := 1 to k do
24787: LD_ADDR_VAR 0 1
24791: PUSH
24792: DOUBLE
24793: LD_INT 1
24795: DEC
24796: ST_TO_ADDR
24797: LD_VAR 0 2
24801: PUSH
24802: FOR_TO
24803: IFFALSE 24902
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24805: LD_VAR 0 3
24809: PUSH
24810: LD_VAR 0 1
24814: ARRAY
24815: PPUSH
24816: LD_VAR 0 1
24820: PUSH
24821: LD_INT 4
24823: MOD
24824: PUSH
24825: LD_INT 1
24827: PLUS
24828: PPUSH
24829: CALL_OW 259
24833: PUSH
24834: LD_INT 10
24836: LESS
24837: IFFALSE 24900
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24839: LD_VAR 0 3
24843: PUSH
24844: LD_VAR 0 1
24848: ARRAY
24849: PPUSH
24850: LD_VAR 0 1
24854: PUSH
24855: LD_INT 4
24857: MOD
24858: PUSH
24859: LD_INT 1
24861: PLUS
24862: PPUSH
24863: LD_VAR 0 3
24867: PUSH
24868: LD_VAR 0 1
24872: ARRAY
24873: PPUSH
24874: LD_VAR 0 1
24878: PUSH
24879: LD_INT 4
24881: MOD
24882: PUSH
24883: LD_INT 1
24885: PLUS
24886: PPUSH
24887: CALL_OW 259
24891: PUSH
24892: LD_INT 1
24894: PLUS
24895: PPUSH
24896: CALL_OW 237
24900: GO 24802
24902: POP
24903: POP
// end ;
24904: PPOPN 3
24906: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24907: LD_EXP 33
24911: PUSH
24912: LD_EXP 41
24916: AND
24917: IFFALSE 24937
24919: GO 24921
24921: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24922: LD_INT 4
24924: PPUSH
24925: LD_OWVAR 2
24929: PPUSH
24930: LD_INT 0
24932: PPUSH
24933: CALL_OW 324
24937: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24938: LD_EXP 33
24942: PUSH
24943: LD_EXP 70
24947: AND
24948: IFFALSE 24968
24950: GO 24952
24952: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24953: LD_INT 19
24955: PPUSH
24956: LD_OWVAR 2
24960: PPUSH
24961: LD_INT 0
24963: PPUSH
24964: CALL_OW 324
24968: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24969: LD_EXP 33
24973: PUSH
24974: LD_EXP 42
24978: AND
24979: IFFALSE 25081
24981: GO 24983
24983: DISABLE
24984: LD_INT 0
24986: PPUSH
24987: PPUSH
// begin enable ;
24988: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24989: LD_ADDR_VAR 0 2
24993: PUSH
24994: LD_INT 22
24996: PUSH
24997: LD_OWVAR 2
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: LD_INT 34
25011: PUSH
25012: LD_INT 11
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 34
25021: PUSH
25022: LD_INT 30
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: LIST
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PPUSH
25038: CALL_OW 69
25042: ST_TO_ADDR
// if not tmp then
25043: LD_VAR 0 2
25047: NOT
25048: IFFALSE 25052
// exit ;
25050: GO 25081
// for i in tmp do
25052: LD_ADDR_VAR 0 1
25056: PUSH
25057: LD_VAR 0 2
25061: PUSH
25062: FOR_IN
25063: IFFALSE 25079
// begin SetLives ( i , 0 ) ;
25065: LD_VAR 0 1
25069: PPUSH
25070: LD_INT 0
25072: PPUSH
25073: CALL_OW 234
// end ;
25077: GO 25062
25079: POP
25080: POP
// end ;
25081: PPOPN 2
25083: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25084: LD_EXP 33
25088: PUSH
25089: LD_EXP 43
25093: AND
25094: IFFALSE 25114
25096: GO 25098
25098: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25099: LD_INT 32
25101: PPUSH
25102: LD_OWVAR 2
25106: PPUSH
25107: LD_INT 0
25109: PPUSH
25110: CALL_OW 324
25114: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25115: LD_EXP 33
25119: PUSH
25120: LD_EXP 44
25124: AND
25125: IFFALSE 25306
25127: GO 25129
25129: DISABLE
25130: LD_INT 0
25132: PPUSH
25133: PPUSH
25134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25135: LD_ADDR_VAR 0 2
25139: PUSH
25140: LD_INT 22
25142: PUSH
25143: LD_OWVAR 2
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 33
25154: PUSH
25155: LD_INT 3
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PPUSH
25166: CALL_OW 69
25170: ST_TO_ADDR
// if not tmp then
25171: LD_VAR 0 2
25175: NOT
25176: IFFALSE 25180
// exit ;
25178: GO 25306
// side := 0 ;
25180: LD_ADDR_VAR 0 3
25184: PUSH
25185: LD_INT 0
25187: ST_TO_ADDR
// for i := 1 to 8 do
25188: LD_ADDR_VAR 0 1
25192: PUSH
25193: DOUBLE
25194: LD_INT 1
25196: DEC
25197: ST_TO_ADDR
25198: LD_INT 8
25200: PUSH
25201: FOR_TO
25202: IFFALSE 25250
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25204: LD_OWVAR 2
25208: PUSH
25209: LD_VAR 0 1
25213: NONEQUAL
25214: PUSH
25215: LD_OWVAR 2
25219: PPUSH
25220: LD_VAR 0 1
25224: PPUSH
25225: CALL_OW 81
25229: PUSH
25230: LD_INT 2
25232: EQUAL
25233: AND
25234: IFFALSE 25248
// begin side := i ;
25236: LD_ADDR_VAR 0 3
25240: PUSH
25241: LD_VAR 0 1
25245: ST_TO_ADDR
// break ;
25246: GO 25250
// end ;
25248: GO 25201
25250: POP
25251: POP
// if not side then
25252: LD_VAR 0 3
25256: NOT
25257: IFFALSE 25261
// exit ;
25259: GO 25306
// for i := 1 to tmp do
25261: LD_ADDR_VAR 0 1
25265: PUSH
25266: DOUBLE
25267: LD_INT 1
25269: DEC
25270: ST_TO_ADDR
25271: LD_VAR 0 2
25275: PUSH
25276: FOR_TO
25277: IFFALSE 25304
// if Prob ( 60 ) then
25279: LD_INT 60
25281: PPUSH
25282: CALL_OW 13
25286: IFFALSE 25302
// SetSide ( i , side ) ;
25288: LD_VAR 0 1
25292: PPUSH
25293: LD_VAR 0 3
25297: PPUSH
25298: CALL_OW 235
25302: GO 25276
25304: POP
25305: POP
// end ;
25306: PPOPN 3
25308: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25309: LD_EXP 33
25313: PUSH
25314: LD_EXP 46
25318: AND
25319: IFFALSE 25438
25321: GO 25323
25323: DISABLE
25324: LD_INT 0
25326: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25327: LD_ADDR_VAR 0 1
25331: PUSH
25332: LD_INT 22
25334: PUSH
25335: LD_OWVAR 2
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 21
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 3
25356: PUSH
25357: LD_INT 23
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: LIST
25375: PPUSH
25376: CALL_OW 69
25380: PUSH
25381: FOR_IN
25382: IFFALSE 25436
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25384: LD_VAR 0 1
25388: PPUSH
25389: CALL_OW 257
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: LD_INT 2
25399: PUSH
25400: LD_INT 3
25402: PUSH
25403: LD_INT 4
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: IN
25412: IFFALSE 25434
// SetClass ( un , rand ( 1 , 4 ) ) ;
25414: LD_VAR 0 1
25418: PPUSH
25419: LD_INT 1
25421: PPUSH
25422: LD_INT 4
25424: PPUSH
25425: CALL_OW 12
25429: PPUSH
25430: CALL_OW 336
25434: GO 25381
25436: POP
25437: POP
// end ;
25438: PPOPN 1
25440: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25441: LD_EXP 33
25445: PUSH
25446: LD_EXP 45
25450: AND
25451: IFFALSE 25530
25453: GO 25455
25455: DISABLE
25456: LD_INT 0
25458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25459: LD_ADDR_VAR 0 1
25463: PUSH
25464: LD_INT 22
25466: PUSH
25467: LD_OWVAR 2
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 21
25478: PUSH
25479: LD_INT 3
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PPUSH
25490: CALL_OW 69
25494: ST_TO_ADDR
// if not tmp then
25495: LD_VAR 0 1
25499: NOT
25500: IFFALSE 25504
// exit ;
25502: GO 25530
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25504: LD_VAR 0 1
25508: PUSH
25509: LD_INT 1
25511: PPUSH
25512: LD_VAR 0 1
25516: PPUSH
25517: CALL_OW 12
25521: ARRAY
25522: PPUSH
25523: LD_INT 100
25525: PPUSH
25526: CALL_OW 234
// end ;
25530: PPOPN 1
25532: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25533: LD_EXP 33
25537: PUSH
25538: LD_EXP 47
25542: AND
25543: IFFALSE 25641
25545: GO 25547
25547: DISABLE
25548: LD_INT 0
25550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25551: LD_ADDR_VAR 0 1
25555: PUSH
25556: LD_INT 22
25558: PUSH
25559: LD_OWVAR 2
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 21
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PPUSH
25582: CALL_OW 69
25586: ST_TO_ADDR
// if not tmp then
25587: LD_VAR 0 1
25591: NOT
25592: IFFALSE 25596
// exit ;
25594: GO 25641
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25596: LD_VAR 0 1
25600: PUSH
25601: LD_INT 1
25603: PPUSH
25604: LD_VAR 0 1
25608: PPUSH
25609: CALL_OW 12
25613: ARRAY
25614: PPUSH
25615: LD_INT 1
25617: PPUSH
25618: LD_INT 4
25620: PPUSH
25621: CALL_OW 12
25625: PPUSH
25626: LD_INT 3000
25628: PPUSH
25629: LD_INT 9000
25631: PPUSH
25632: CALL_OW 12
25636: PPUSH
25637: CALL_OW 492
// end ;
25641: PPOPN 1
25643: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25644: LD_EXP 33
25648: PUSH
25649: LD_EXP 48
25653: AND
25654: IFFALSE 25674
25656: GO 25658
25658: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25659: LD_INT 1
25661: PPUSH
25662: LD_OWVAR 2
25666: PPUSH
25667: LD_INT 0
25669: PPUSH
25670: CALL_OW 324
25674: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25675: LD_EXP 33
25679: PUSH
25680: LD_EXP 49
25684: AND
25685: IFFALSE 25768
25687: GO 25689
25689: DISABLE
25690: LD_INT 0
25692: PPUSH
25693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25694: LD_ADDR_VAR 0 2
25698: PUSH
25699: LD_INT 22
25701: PUSH
25702: LD_OWVAR 2
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 21
25713: PUSH
25714: LD_INT 3
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PPUSH
25725: CALL_OW 69
25729: ST_TO_ADDR
// if not tmp then
25730: LD_VAR 0 2
25734: NOT
25735: IFFALSE 25739
// exit ;
25737: GO 25768
// for i in tmp do
25739: LD_ADDR_VAR 0 1
25743: PUSH
25744: LD_VAR 0 2
25748: PUSH
25749: FOR_IN
25750: IFFALSE 25766
// SetBLevel ( i , 10 ) ;
25752: LD_VAR 0 1
25756: PPUSH
25757: LD_INT 10
25759: PPUSH
25760: CALL_OW 241
25764: GO 25749
25766: POP
25767: POP
// end ;
25768: PPOPN 2
25770: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25771: LD_EXP 33
25775: PUSH
25776: LD_EXP 50
25780: AND
25781: IFFALSE 25892
25783: GO 25785
25785: DISABLE
25786: LD_INT 0
25788: PPUSH
25789: PPUSH
25790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25791: LD_ADDR_VAR 0 3
25795: PUSH
25796: LD_INT 22
25798: PUSH
25799: LD_OWVAR 2
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 25
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PPUSH
25822: CALL_OW 69
25826: ST_TO_ADDR
// if not tmp then
25827: LD_VAR 0 3
25831: NOT
25832: IFFALSE 25836
// exit ;
25834: GO 25892
// un := tmp [ rand ( 1 , tmp ) ] ;
25836: LD_ADDR_VAR 0 2
25840: PUSH
25841: LD_VAR 0 3
25845: PUSH
25846: LD_INT 1
25848: PPUSH
25849: LD_VAR 0 3
25853: PPUSH
25854: CALL_OW 12
25858: ARRAY
25859: ST_TO_ADDR
// if Crawls ( un ) then
25860: LD_VAR 0 2
25864: PPUSH
25865: CALL_OW 318
25869: IFFALSE 25880
// ComWalk ( un ) ;
25871: LD_VAR 0 2
25875: PPUSH
25876: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25880: LD_VAR 0 2
25884: PPUSH
25885: LD_INT 5
25887: PPUSH
25888: CALL_OW 336
// end ;
25892: PPOPN 3
25894: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25895: LD_EXP 33
25899: PUSH
25900: LD_EXP 51
25904: AND
25905: PUSH
25906: LD_OWVAR 67
25910: PUSH
25911: LD_INT 4
25913: LESS
25914: AND
25915: IFFALSE 25934
25917: GO 25919
25919: DISABLE
// begin Difficulty := Difficulty + 1 ;
25920: LD_ADDR_OWVAR 67
25924: PUSH
25925: LD_OWVAR 67
25929: PUSH
25930: LD_INT 1
25932: PLUS
25933: ST_TO_ADDR
// end ;
25934: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25935: LD_EXP 33
25939: PUSH
25940: LD_EXP 52
25944: AND
25945: IFFALSE 26048
25947: GO 25949
25949: DISABLE
25950: LD_INT 0
25952: PPUSH
// begin for i := 1 to 5 do
25953: LD_ADDR_VAR 0 1
25957: PUSH
25958: DOUBLE
25959: LD_INT 1
25961: DEC
25962: ST_TO_ADDR
25963: LD_INT 5
25965: PUSH
25966: FOR_TO
25967: IFFALSE 26046
// begin uc_nation := nation_nature ;
25969: LD_ADDR_OWVAR 21
25973: PUSH
25974: LD_INT 0
25976: ST_TO_ADDR
// uc_side := 0 ;
25977: LD_ADDR_OWVAR 20
25981: PUSH
25982: LD_INT 0
25984: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25985: LD_ADDR_OWVAR 29
25989: PUSH
25990: LD_INT 12
25992: PUSH
25993: LD_INT 12
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: ST_TO_ADDR
// hc_agressivity := 20 ;
26000: LD_ADDR_OWVAR 35
26004: PUSH
26005: LD_INT 20
26007: ST_TO_ADDR
// hc_class := class_tiger ;
26008: LD_ADDR_OWVAR 28
26012: PUSH
26013: LD_INT 14
26015: ST_TO_ADDR
// hc_gallery :=  ;
26016: LD_ADDR_OWVAR 33
26020: PUSH
26021: LD_STRING 
26023: ST_TO_ADDR
// hc_name :=  ;
26024: LD_ADDR_OWVAR 26
26028: PUSH
26029: LD_STRING 
26031: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26032: CALL_OW 44
26036: PPUSH
26037: LD_INT 0
26039: PPUSH
26040: CALL_OW 51
// end ;
26044: GO 25966
26046: POP
26047: POP
// end ;
26048: PPOPN 1
26050: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26051: LD_EXP 33
26055: PUSH
26056: LD_EXP 53
26060: AND
26061: IFFALSE 26070
26063: GO 26065
26065: DISABLE
// StreamSibBomb ;
26066: CALL 26071 0 0
26070: END
// export function StreamSibBomb ; var i , x , y ; begin
26071: LD_INT 0
26073: PPUSH
26074: PPUSH
26075: PPUSH
26076: PPUSH
// result := false ;
26077: LD_ADDR_VAR 0 1
26081: PUSH
26082: LD_INT 0
26084: ST_TO_ADDR
// for i := 1 to 16 do
26085: LD_ADDR_VAR 0 2
26089: PUSH
26090: DOUBLE
26091: LD_INT 1
26093: DEC
26094: ST_TO_ADDR
26095: LD_INT 16
26097: PUSH
26098: FOR_TO
26099: IFFALSE 26298
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26101: LD_ADDR_VAR 0 3
26105: PUSH
26106: LD_INT 10
26108: PUSH
26109: LD_INT 20
26111: PUSH
26112: LD_INT 30
26114: PUSH
26115: LD_INT 40
26117: PUSH
26118: LD_INT 50
26120: PUSH
26121: LD_INT 60
26123: PUSH
26124: LD_INT 70
26126: PUSH
26127: LD_INT 80
26129: PUSH
26130: LD_INT 90
26132: PUSH
26133: LD_INT 100
26135: PUSH
26136: LD_INT 110
26138: PUSH
26139: LD_INT 120
26141: PUSH
26142: LD_INT 130
26144: PUSH
26145: LD_INT 140
26147: PUSH
26148: LD_INT 150
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: PPUSH
26171: LD_INT 15
26173: PPUSH
26174: CALL_OW 12
26178: ARRAY
26179: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26180: LD_ADDR_VAR 0 4
26184: PUSH
26185: LD_INT 10
26187: PUSH
26188: LD_INT 20
26190: PUSH
26191: LD_INT 30
26193: PUSH
26194: LD_INT 40
26196: PUSH
26197: LD_INT 50
26199: PUSH
26200: LD_INT 60
26202: PUSH
26203: LD_INT 70
26205: PUSH
26206: LD_INT 80
26208: PUSH
26209: LD_INT 90
26211: PUSH
26212: LD_INT 100
26214: PUSH
26215: LD_INT 110
26217: PUSH
26218: LD_INT 120
26220: PUSH
26221: LD_INT 130
26223: PUSH
26224: LD_INT 140
26226: PUSH
26227: LD_INT 150
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: PPUSH
26250: LD_INT 15
26252: PPUSH
26253: CALL_OW 12
26257: ARRAY
26258: ST_TO_ADDR
// if ValidHex ( x , y ) then
26259: LD_VAR 0 3
26263: PPUSH
26264: LD_VAR 0 4
26268: PPUSH
26269: CALL_OW 488
26273: IFFALSE 26296
// begin result := [ x , y ] ;
26275: LD_ADDR_VAR 0 1
26279: PUSH
26280: LD_VAR 0 3
26284: PUSH
26285: LD_VAR 0 4
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: ST_TO_ADDR
// break ;
26294: GO 26298
// end ; end ;
26296: GO 26098
26298: POP
26299: POP
// if result then
26300: LD_VAR 0 1
26304: IFFALSE 26364
// begin ToLua ( playSibBomb() ) ;
26306: LD_STRING playSibBomb()
26308: PPUSH
26309: CALL_OW 559
// wait ( 0 0$14 ) ;
26313: LD_INT 490
26315: PPUSH
26316: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26320: LD_VAR 0 1
26324: PUSH
26325: LD_INT 1
26327: ARRAY
26328: PPUSH
26329: LD_VAR 0 1
26333: PUSH
26334: LD_INT 2
26336: ARRAY
26337: PPUSH
26338: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26342: LD_VAR 0 1
26346: PUSH
26347: LD_INT 1
26349: ARRAY
26350: PPUSH
26351: LD_VAR 0 1
26355: PUSH
26356: LD_INT 2
26358: ARRAY
26359: PPUSH
26360: CALL_OW 429
// end ; end ;
26364: LD_VAR 0 1
26368: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26369: LD_EXP 33
26373: PUSH
26374: LD_EXP 55
26378: AND
26379: IFFALSE 26391
26381: GO 26383
26383: DISABLE
// YouLost (  ) ;
26384: LD_STRING 
26386: PPUSH
26387: CALL_OW 104
26391: END
// every 0 0$1 trigger StreamModeActive and sFog do
26392: LD_EXP 33
26396: PUSH
26397: LD_EXP 54
26401: AND
26402: IFFALSE 26416
26404: GO 26406
26406: DISABLE
// FogOff ( your_side ) ;
26407: LD_OWVAR 2
26411: PPUSH
26412: CALL_OW 344
26416: END
// every 0 0$1 trigger StreamModeActive and sSun do
26417: LD_EXP 33
26421: PUSH
26422: LD_EXP 56
26426: AND
26427: IFFALSE 26455
26429: GO 26431
26431: DISABLE
// begin solar_recharge_percent := 0 ;
26432: LD_ADDR_OWVAR 79
26436: PUSH
26437: LD_INT 0
26439: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26440: LD_INT 10500
26442: PPUSH
26443: CALL_OW 67
// solar_recharge_percent := 100 ;
26447: LD_ADDR_OWVAR 79
26451: PUSH
26452: LD_INT 100
26454: ST_TO_ADDR
// end ;
26455: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26456: LD_EXP 33
26460: PUSH
26461: LD_EXP 57
26465: AND
26466: IFFALSE 26705
26468: GO 26470
26470: DISABLE
26471: LD_INT 0
26473: PPUSH
26474: PPUSH
26475: PPUSH
// begin tmp := [ ] ;
26476: LD_ADDR_VAR 0 3
26480: PUSH
26481: EMPTY
26482: ST_TO_ADDR
// for i := 1 to 6 do
26483: LD_ADDR_VAR 0 1
26487: PUSH
26488: DOUBLE
26489: LD_INT 1
26491: DEC
26492: ST_TO_ADDR
26493: LD_INT 6
26495: PUSH
26496: FOR_TO
26497: IFFALSE 26602
// begin uc_nation := nation_nature ;
26499: LD_ADDR_OWVAR 21
26503: PUSH
26504: LD_INT 0
26506: ST_TO_ADDR
// uc_side := 0 ;
26507: LD_ADDR_OWVAR 20
26511: PUSH
26512: LD_INT 0
26514: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26515: LD_ADDR_OWVAR 29
26519: PUSH
26520: LD_INT 12
26522: PUSH
26523: LD_INT 12
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: ST_TO_ADDR
// hc_agressivity := 20 ;
26530: LD_ADDR_OWVAR 35
26534: PUSH
26535: LD_INT 20
26537: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26538: LD_ADDR_OWVAR 28
26542: PUSH
26543: LD_INT 17
26545: ST_TO_ADDR
// hc_gallery :=  ;
26546: LD_ADDR_OWVAR 33
26550: PUSH
26551: LD_STRING 
26553: ST_TO_ADDR
// hc_name :=  ;
26554: LD_ADDR_OWVAR 26
26558: PUSH
26559: LD_STRING 
26561: ST_TO_ADDR
// un := CreateHuman ;
26562: LD_ADDR_VAR 0 2
26566: PUSH
26567: CALL_OW 44
26571: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26572: LD_VAR 0 2
26576: PPUSH
26577: LD_INT 1
26579: PPUSH
26580: CALL_OW 51
// tmp := tmp ^ un ;
26584: LD_ADDR_VAR 0 3
26588: PUSH
26589: LD_VAR 0 3
26593: PUSH
26594: LD_VAR 0 2
26598: ADD
26599: ST_TO_ADDR
// end ;
26600: GO 26496
26602: POP
26603: POP
// repeat wait ( 0 0$1 ) ;
26604: LD_INT 35
26606: PPUSH
26607: CALL_OW 67
// for un in tmp do
26611: LD_ADDR_VAR 0 2
26615: PUSH
26616: LD_VAR 0 3
26620: PUSH
26621: FOR_IN
26622: IFFALSE 26696
// begin if IsDead ( un ) then
26624: LD_VAR 0 2
26628: PPUSH
26629: CALL_OW 301
26633: IFFALSE 26653
// begin tmp := tmp diff un ;
26635: LD_ADDR_VAR 0 3
26639: PUSH
26640: LD_VAR 0 3
26644: PUSH
26645: LD_VAR 0 2
26649: DIFF
26650: ST_TO_ADDR
// continue ;
26651: GO 26621
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26653: LD_VAR 0 2
26657: PPUSH
26658: LD_INT 3
26660: PUSH
26661: LD_INT 22
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PPUSH
26675: CALL_OW 69
26679: PPUSH
26680: LD_VAR 0 2
26684: PPUSH
26685: CALL_OW 74
26689: PPUSH
26690: CALL_OW 115
// end ;
26694: GO 26621
26696: POP
26697: POP
// until not tmp ;
26698: LD_VAR 0 3
26702: NOT
26703: IFFALSE 26604
// end ;
26705: PPOPN 3
26707: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26708: LD_EXP 33
26712: PUSH
26713: LD_EXP 58
26717: AND
26718: IFFALSE 26772
26720: GO 26722
26722: DISABLE
// begin ToLua ( displayTroll(); ) ;
26723: LD_STRING displayTroll();
26725: PPUSH
26726: CALL_OW 559
// wait ( 3 3$00 ) ;
26730: LD_INT 6300
26732: PPUSH
26733: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26737: LD_STRING hideTroll();
26739: PPUSH
26740: CALL_OW 559
// wait ( 1 1$00 ) ;
26744: LD_INT 2100
26746: PPUSH
26747: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26751: LD_STRING displayTroll();
26753: PPUSH
26754: CALL_OW 559
// wait ( 1 1$00 ) ;
26758: LD_INT 2100
26760: PPUSH
26761: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26765: LD_STRING hideTroll();
26767: PPUSH
26768: CALL_OW 559
// end ;
26772: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26773: LD_EXP 33
26777: PUSH
26778: LD_EXP 59
26782: AND
26783: IFFALSE 26846
26785: GO 26787
26787: DISABLE
26788: LD_INT 0
26790: PPUSH
// begin p := 0 ;
26791: LD_ADDR_VAR 0 1
26795: PUSH
26796: LD_INT 0
26798: ST_TO_ADDR
// repeat game_speed := 1 ;
26799: LD_ADDR_OWVAR 65
26803: PUSH
26804: LD_INT 1
26806: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26807: LD_INT 35
26809: PPUSH
26810: CALL_OW 67
// p := p + 1 ;
26814: LD_ADDR_VAR 0 1
26818: PUSH
26819: LD_VAR 0 1
26823: PUSH
26824: LD_INT 1
26826: PLUS
26827: ST_TO_ADDR
// until p >= 60 ;
26828: LD_VAR 0 1
26832: PUSH
26833: LD_INT 60
26835: GREATEREQUAL
26836: IFFALSE 26799
// game_speed := 4 ;
26838: LD_ADDR_OWVAR 65
26842: PUSH
26843: LD_INT 4
26845: ST_TO_ADDR
// end ;
26846: PPOPN 1
26848: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26849: LD_EXP 33
26853: PUSH
26854: LD_EXP 60
26858: AND
26859: IFFALSE 27005
26861: GO 26863
26863: DISABLE
26864: LD_INT 0
26866: PPUSH
26867: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26868: LD_ADDR_VAR 0 1
26872: PUSH
26873: LD_INT 22
26875: PUSH
26876: LD_OWVAR 2
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 2
26887: PUSH
26888: LD_INT 30
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 30
26900: PUSH
26901: LD_INT 1
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: LIST
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PPUSH
26917: CALL_OW 69
26921: ST_TO_ADDR
// if not depot then
26922: LD_VAR 0 1
26926: NOT
26927: IFFALSE 26931
// exit ;
26929: GO 27005
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26931: LD_ADDR_VAR 0 2
26935: PUSH
26936: LD_VAR 0 1
26940: PUSH
26941: LD_INT 1
26943: PPUSH
26944: LD_VAR 0 1
26948: PPUSH
26949: CALL_OW 12
26953: ARRAY
26954: PPUSH
26955: CALL_OW 274
26959: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26960: LD_VAR 0 2
26964: PPUSH
26965: LD_INT 1
26967: PPUSH
26968: LD_INT 0
26970: PPUSH
26971: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26975: LD_VAR 0 2
26979: PPUSH
26980: LD_INT 2
26982: PPUSH
26983: LD_INT 0
26985: PPUSH
26986: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26990: LD_VAR 0 2
26994: PPUSH
26995: LD_INT 3
26997: PPUSH
26998: LD_INT 0
27000: PPUSH
27001: CALL_OW 277
// end ;
27005: PPOPN 2
27007: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27008: LD_EXP 33
27012: PUSH
27013: LD_EXP 61
27017: AND
27018: IFFALSE 27115
27020: GO 27022
27022: DISABLE
27023: LD_INT 0
27025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27026: LD_ADDR_VAR 0 1
27030: PUSH
27031: LD_INT 22
27033: PUSH
27034: LD_OWVAR 2
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 21
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 3
27055: PUSH
27056: LD_INT 23
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: PPUSH
27075: CALL_OW 69
27079: ST_TO_ADDR
// if not tmp then
27080: LD_VAR 0 1
27084: NOT
27085: IFFALSE 27089
// exit ;
27087: GO 27115
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27089: LD_VAR 0 1
27093: PUSH
27094: LD_INT 1
27096: PPUSH
27097: LD_VAR 0 1
27101: PPUSH
27102: CALL_OW 12
27106: ARRAY
27107: PPUSH
27108: LD_INT 200
27110: PPUSH
27111: CALL_OW 234
// end ;
27115: PPOPN 1
27117: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27118: LD_EXP 33
27122: PUSH
27123: LD_EXP 62
27127: AND
27128: IFFALSE 27207
27130: GO 27132
27132: DISABLE
27133: LD_INT 0
27135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27136: LD_ADDR_VAR 0 1
27140: PUSH
27141: LD_INT 22
27143: PUSH
27144: LD_OWVAR 2
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 21
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PPUSH
27167: CALL_OW 69
27171: ST_TO_ADDR
// if not tmp then
27172: LD_VAR 0 1
27176: NOT
27177: IFFALSE 27181
// exit ;
27179: GO 27207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27181: LD_VAR 0 1
27185: PUSH
27186: LD_INT 1
27188: PPUSH
27189: LD_VAR 0 1
27193: PPUSH
27194: CALL_OW 12
27198: ARRAY
27199: PPUSH
27200: LD_INT 60
27202: PPUSH
27203: CALL_OW 234
// end ;
27207: PPOPN 1
27209: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27210: LD_EXP 33
27214: PUSH
27215: LD_EXP 63
27219: AND
27220: IFFALSE 27319
27222: GO 27224
27224: DISABLE
27225: LD_INT 0
27227: PPUSH
27228: PPUSH
// begin enable ;
27229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27230: LD_ADDR_VAR 0 1
27234: PUSH
27235: LD_INT 22
27237: PUSH
27238: LD_OWVAR 2
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 61
27249: PUSH
27250: EMPTY
27251: LIST
27252: PUSH
27253: LD_INT 33
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: LIST
27267: PPUSH
27268: CALL_OW 69
27272: ST_TO_ADDR
// if not tmp then
27273: LD_VAR 0 1
27277: NOT
27278: IFFALSE 27282
// exit ;
27280: GO 27319
// for i in tmp do
27282: LD_ADDR_VAR 0 2
27286: PUSH
27287: LD_VAR 0 1
27291: PUSH
27292: FOR_IN
27293: IFFALSE 27317
// if IsControledBy ( i ) then
27295: LD_VAR 0 2
27299: PPUSH
27300: CALL_OW 312
27304: IFFALSE 27315
// ComUnlink ( i ) ;
27306: LD_VAR 0 2
27310: PPUSH
27311: CALL_OW 136
27315: GO 27292
27317: POP
27318: POP
// end ;
27319: PPOPN 2
27321: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27322: LD_EXP 33
27326: PUSH
27327: LD_EXP 64
27331: AND
27332: IFFALSE 27472
27334: GO 27336
27336: DISABLE
27337: LD_INT 0
27339: PPUSH
27340: PPUSH
// begin ToLua ( displayPowell(); ) ;
27341: LD_STRING displayPowell();
27343: PPUSH
27344: CALL_OW 559
// uc_side := 0 ;
27348: LD_ADDR_OWVAR 20
27352: PUSH
27353: LD_INT 0
27355: ST_TO_ADDR
// uc_nation := 2 ;
27356: LD_ADDR_OWVAR 21
27360: PUSH
27361: LD_INT 2
27363: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27364: LD_ADDR_OWVAR 37
27368: PUSH
27369: LD_INT 14
27371: ST_TO_ADDR
// vc_engine := engine_siberite ;
27372: LD_ADDR_OWVAR 39
27376: PUSH
27377: LD_INT 3
27379: ST_TO_ADDR
// vc_control := control_apeman ;
27380: LD_ADDR_OWVAR 38
27384: PUSH
27385: LD_INT 5
27387: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27388: LD_ADDR_OWVAR 40
27392: PUSH
27393: LD_INT 29
27395: ST_TO_ADDR
// un := CreateVehicle ;
27396: LD_ADDR_VAR 0 2
27400: PUSH
27401: CALL_OW 45
27405: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27406: LD_VAR 0 2
27410: PPUSH
27411: LD_INT 1
27413: PPUSH
27414: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27418: LD_INT 35
27420: PPUSH
27421: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27425: LD_VAR 0 2
27429: PPUSH
27430: LD_INT 22
27432: PUSH
27433: LD_OWVAR 2
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PPUSH
27442: CALL_OW 69
27446: PPUSH
27447: LD_VAR 0 2
27451: PPUSH
27452: CALL_OW 74
27456: PPUSH
27457: CALL_OW 115
// until IsDead ( un ) ;
27461: LD_VAR 0 2
27465: PPUSH
27466: CALL_OW 301
27470: IFFALSE 27418
// end ;
27472: PPOPN 2
27474: END
// every 0 0$1 trigger StreamModeActive and sStu do
27475: LD_EXP 33
27479: PUSH
27480: LD_EXP 72
27484: AND
27485: IFFALSE 27501
27487: GO 27489
27489: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27490: LD_STRING displayStucuk();
27492: PPUSH
27493: CALL_OW 559
// ResetFog ;
27497: CALL_OW 335
// end ;
27501: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27502: LD_EXP 33
27506: PUSH
27507: LD_EXP 65
27511: AND
27512: IFFALSE 27653
27514: GO 27516
27516: DISABLE
27517: LD_INT 0
27519: PPUSH
27520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27521: LD_ADDR_VAR 0 2
27525: PUSH
27526: LD_INT 22
27528: PUSH
27529: LD_OWVAR 2
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 21
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PPUSH
27552: CALL_OW 69
27556: ST_TO_ADDR
// if not tmp then
27557: LD_VAR 0 2
27561: NOT
27562: IFFALSE 27566
// exit ;
27564: GO 27653
// un := tmp [ rand ( 1 , tmp ) ] ;
27566: LD_ADDR_VAR 0 1
27570: PUSH
27571: LD_VAR 0 2
27575: PUSH
27576: LD_INT 1
27578: PPUSH
27579: LD_VAR 0 2
27583: PPUSH
27584: CALL_OW 12
27588: ARRAY
27589: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27590: LD_VAR 0 1
27594: PPUSH
27595: LD_INT 0
27597: PPUSH
27598: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27602: LD_VAR 0 1
27606: PPUSH
27607: LD_OWVAR 3
27611: PUSH
27612: LD_VAR 0 1
27616: DIFF
27617: PPUSH
27618: LD_VAR 0 1
27622: PPUSH
27623: CALL_OW 74
27627: PPUSH
27628: CALL_OW 115
// wait ( 0 0$20 ) ;
27632: LD_INT 700
27634: PPUSH
27635: CALL_OW 67
// SetSide ( un , your_side ) ;
27639: LD_VAR 0 1
27643: PPUSH
27644: LD_OWVAR 2
27648: PPUSH
27649: CALL_OW 235
// end ;
27653: PPOPN 2
27655: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27656: LD_EXP 33
27660: PUSH
27661: LD_EXP 66
27665: AND
27666: IFFALSE 27772
27668: GO 27670
27670: DISABLE
27671: LD_INT 0
27673: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27674: LD_ADDR_VAR 0 1
27678: PUSH
27679: LD_INT 22
27681: PUSH
27682: LD_OWVAR 2
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: LD_INT 30
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 30
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: LIST
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PPUSH
27723: CALL_OW 69
27727: ST_TO_ADDR
// if not depot then
27728: LD_VAR 0 1
27732: NOT
27733: IFFALSE 27737
// exit ;
27735: GO 27772
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27737: LD_VAR 0 1
27741: PUSH
27742: LD_INT 1
27744: ARRAY
27745: PPUSH
27746: CALL_OW 250
27750: PPUSH
27751: LD_VAR 0 1
27755: PUSH
27756: LD_INT 1
27758: ARRAY
27759: PPUSH
27760: CALL_OW 251
27764: PPUSH
27765: LD_INT 70
27767: PPUSH
27768: CALL_OW 495
// end ;
27772: PPOPN 1
27774: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27775: LD_EXP 33
27779: PUSH
27780: LD_EXP 67
27784: AND
27785: IFFALSE 27996
27787: GO 27789
27789: DISABLE
27790: LD_INT 0
27792: PPUSH
27793: PPUSH
27794: PPUSH
27795: PPUSH
27796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27797: LD_ADDR_VAR 0 5
27801: PUSH
27802: LD_INT 22
27804: PUSH
27805: LD_OWVAR 2
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 21
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PPUSH
27828: CALL_OW 69
27832: ST_TO_ADDR
// if not tmp then
27833: LD_VAR 0 5
27837: NOT
27838: IFFALSE 27842
// exit ;
27840: GO 27996
// for i in tmp do
27842: LD_ADDR_VAR 0 1
27846: PUSH
27847: LD_VAR 0 5
27851: PUSH
27852: FOR_IN
27853: IFFALSE 27994
// begin d := rand ( 0 , 5 ) ;
27855: LD_ADDR_VAR 0 4
27859: PUSH
27860: LD_INT 0
27862: PPUSH
27863: LD_INT 5
27865: PPUSH
27866: CALL_OW 12
27870: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27871: LD_ADDR_VAR 0 2
27875: PUSH
27876: LD_VAR 0 1
27880: PPUSH
27881: CALL_OW 250
27885: PPUSH
27886: LD_VAR 0 4
27890: PPUSH
27891: LD_INT 3
27893: PPUSH
27894: LD_INT 12
27896: PPUSH
27897: CALL_OW 12
27901: PPUSH
27902: CALL_OW 272
27906: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27907: LD_ADDR_VAR 0 3
27911: PUSH
27912: LD_VAR 0 1
27916: PPUSH
27917: CALL_OW 251
27921: PPUSH
27922: LD_VAR 0 4
27926: PPUSH
27927: LD_INT 3
27929: PPUSH
27930: LD_INT 12
27932: PPUSH
27933: CALL_OW 12
27937: PPUSH
27938: CALL_OW 273
27942: ST_TO_ADDR
// if ValidHex ( x , y ) then
27943: LD_VAR 0 2
27947: PPUSH
27948: LD_VAR 0 3
27952: PPUSH
27953: CALL_OW 488
27957: IFFALSE 27992
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27959: LD_VAR 0 1
27963: PPUSH
27964: LD_VAR 0 2
27968: PPUSH
27969: LD_VAR 0 3
27973: PPUSH
27974: LD_INT 3
27976: PPUSH
27977: LD_INT 6
27979: PPUSH
27980: CALL_OW 12
27984: PPUSH
27985: LD_INT 1
27987: PPUSH
27988: CALL_OW 483
// end ;
27992: GO 27852
27994: POP
27995: POP
// end ;
27996: PPOPN 5
27998: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27999: LD_EXP 33
28003: PUSH
28004: LD_EXP 68
28008: AND
28009: IFFALSE 28103
28011: GO 28013
28013: DISABLE
28014: LD_INT 0
28016: PPUSH
28017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28018: LD_ADDR_VAR 0 2
28022: PUSH
28023: LD_INT 22
28025: PUSH
28026: LD_OWVAR 2
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 32
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 21
28047: PUSH
28048: LD_INT 2
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: LIST
28059: PPUSH
28060: CALL_OW 69
28064: ST_TO_ADDR
// if not tmp then
28065: LD_VAR 0 2
28069: NOT
28070: IFFALSE 28074
// exit ;
28072: GO 28103
// for i in tmp do
28074: LD_ADDR_VAR 0 1
28078: PUSH
28079: LD_VAR 0 2
28083: PUSH
28084: FOR_IN
28085: IFFALSE 28101
// SetFuel ( i , 0 ) ;
28087: LD_VAR 0 1
28091: PPUSH
28092: LD_INT 0
28094: PPUSH
28095: CALL_OW 240
28099: GO 28084
28101: POP
28102: POP
// end ;
28103: PPOPN 2
28105: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28106: LD_EXP 33
28110: PUSH
28111: LD_EXP 69
28115: AND
28116: IFFALSE 28182
28118: GO 28120
28120: DISABLE
28121: LD_INT 0
28123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28124: LD_ADDR_VAR 0 1
28128: PUSH
28129: LD_INT 22
28131: PUSH
28132: LD_OWVAR 2
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 30
28143: PUSH
28144: LD_INT 29
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PPUSH
28155: CALL_OW 69
28159: ST_TO_ADDR
// if not tmp then
28160: LD_VAR 0 1
28164: NOT
28165: IFFALSE 28169
// exit ;
28167: GO 28182
// DestroyUnit ( tmp [ 1 ] ) ;
28169: LD_VAR 0 1
28173: PUSH
28174: LD_INT 1
28176: ARRAY
28177: PPUSH
28178: CALL_OW 65
// end ;
28182: PPOPN 1
28184: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28185: LD_EXP 33
28189: PUSH
28190: LD_EXP 71
28194: AND
28195: IFFALSE 28324
28197: GO 28199
28199: DISABLE
28200: LD_INT 0
28202: PPUSH
// begin uc_side := 0 ;
28203: LD_ADDR_OWVAR 20
28207: PUSH
28208: LD_INT 0
28210: ST_TO_ADDR
// uc_nation := nation_arabian ;
28211: LD_ADDR_OWVAR 21
28215: PUSH
28216: LD_INT 2
28218: ST_TO_ADDR
// hc_gallery :=  ;
28219: LD_ADDR_OWVAR 33
28223: PUSH
28224: LD_STRING 
28226: ST_TO_ADDR
// hc_name :=  ;
28227: LD_ADDR_OWVAR 26
28231: PUSH
28232: LD_STRING 
28234: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28235: LD_INT 1
28237: PPUSH
28238: LD_INT 11
28240: PPUSH
28241: LD_INT 10
28243: PPUSH
28244: CALL_OW 380
// un := CreateHuman ;
28248: LD_ADDR_VAR 0 1
28252: PUSH
28253: CALL_OW 44
28257: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28258: LD_VAR 0 1
28262: PPUSH
28263: LD_INT 1
28265: PPUSH
28266: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28270: LD_INT 35
28272: PPUSH
28273: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28277: LD_VAR 0 1
28281: PPUSH
28282: LD_INT 22
28284: PUSH
28285: LD_OWVAR 2
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PPUSH
28294: CALL_OW 69
28298: PPUSH
28299: LD_VAR 0 1
28303: PPUSH
28304: CALL_OW 74
28308: PPUSH
28309: CALL_OW 115
// until IsDead ( un ) ;
28313: LD_VAR 0 1
28317: PPUSH
28318: CALL_OW 301
28322: IFFALSE 28270
// end ;
28324: PPOPN 1
28326: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28327: LD_EXP 33
28331: PUSH
28332: LD_EXP 73
28336: AND
28337: IFFALSE 28349
28339: GO 28341
28341: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28342: LD_STRING earthquake(getX(game), 0, 32)
28344: PPUSH
28345: CALL_OW 559
28349: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28350: LD_EXP 33
28354: PUSH
28355: LD_EXP 74
28359: AND
28360: IFFALSE 28451
28362: GO 28364
28364: DISABLE
28365: LD_INT 0
28367: PPUSH
// begin enable ;
28368: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28369: LD_ADDR_VAR 0 1
28373: PUSH
28374: LD_INT 22
28376: PUSH
28377: LD_OWVAR 2
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 21
28388: PUSH
28389: LD_INT 2
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 33
28398: PUSH
28399: LD_INT 3
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: LIST
28410: PPUSH
28411: CALL_OW 69
28415: ST_TO_ADDR
// if not tmp then
28416: LD_VAR 0 1
28420: NOT
28421: IFFALSE 28425
// exit ;
28423: GO 28451
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28425: LD_VAR 0 1
28429: PUSH
28430: LD_INT 1
28432: PPUSH
28433: LD_VAR 0 1
28437: PPUSH
28438: CALL_OW 12
28442: ARRAY
28443: PPUSH
28444: LD_INT 1
28446: PPUSH
28447: CALL_OW 234
// end ;
28451: PPOPN 1
28453: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28454: LD_EXP 33
28458: PUSH
28459: LD_EXP 75
28463: AND
28464: IFFALSE 28605
28466: GO 28468
28468: DISABLE
28469: LD_INT 0
28471: PPUSH
28472: PPUSH
28473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28474: LD_ADDR_VAR 0 3
28478: PUSH
28479: LD_INT 22
28481: PUSH
28482: LD_OWVAR 2
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 25
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PPUSH
28505: CALL_OW 69
28509: ST_TO_ADDR
// if not tmp then
28510: LD_VAR 0 3
28514: NOT
28515: IFFALSE 28519
// exit ;
28517: GO 28605
// un := tmp [ rand ( 1 , tmp ) ] ;
28519: LD_ADDR_VAR 0 2
28523: PUSH
28524: LD_VAR 0 3
28528: PUSH
28529: LD_INT 1
28531: PPUSH
28532: LD_VAR 0 3
28536: PPUSH
28537: CALL_OW 12
28541: ARRAY
28542: ST_TO_ADDR
// if Crawls ( un ) then
28543: LD_VAR 0 2
28547: PPUSH
28548: CALL_OW 318
28552: IFFALSE 28563
// ComWalk ( un ) ;
28554: LD_VAR 0 2
28558: PPUSH
28559: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28563: LD_VAR 0 2
28567: PPUSH
28568: LD_INT 9
28570: PPUSH
28571: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28575: LD_INT 28
28577: PPUSH
28578: LD_OWVAR 2
28582: PPUSH
28583: LD_INT 2
28585: PPUSH
28586: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28590: LD_INT 29
28592: PPUSH
28593: LD_OWVAR 2
28597: PPUSH
28598: LD_INT 2
28600: PPUSH
28601: CALL_OW 322
// end ;
28605: PPOPN 3
28607: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28608: LD_EXP 33
28612: PUSH
28613: LD_EXP 76
28617: AND
28618: IFFALSE 28729
28620: GO 28622
28622: DISABLE
28623: LD_INT 0
28625: PPUSH
28626: PPUSH
28627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28628: LD_ADDR_VAR 0 3
28632: PUSH
28633: LD_INT 22
28635: PUSH
28636: LD_OWVAR 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 25
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PPUSH
28659: CALL_OW 69
28663: ST_TO_ADDR
// if not tmp then
28664: LD_VAR 0 3
28668: NOT
28669: IFFALSE 28673
// exit ;
28671: GO 28729
// un := tmp [ rand ( 1 , tmp ) ] ;
28673: LD_ADDR_VAR 0 2
28677: PUSH
28678: LD_VAR 0 3
28682: PUSH
28683: LD_INT 1
28685: PPUSH
28686: LD_VAR 0 3
28690: PPUSH
28691: CALL_OW 12
28695: ARRAY
28696: ST_TO_ADDR
// if Crawls ( un ) then
28697: LD_VAR 0 2
28701: PPUSH
28702: CALL_OW 318
28706: IFFALSE 28717
// ComWalk ( un ) ;
28708: LD_VAR 0 2
28712: PPUSH
28713: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28717: LD_VAR 0 2
28721: PPUSH
28722: LD_INT 8
28724: PPUSH
28725: CALL_OW 336
// end ;
28729: PPOPN 3
28731: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28732: LD_EXP 33
28736: PUSH
28737: LD_EXP 77
28741: AND
28742: IFFALSE 28886
28744: GO 28746
28746: DISABLE
28747: LD_INT 0
28749: PPUSH
28750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28751: LD_ADDR_VAR 0 2
28755: PUSH
28756: LD_INT 22
28758: PUSH
28759: LD_OWVAR 2
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 21
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: LD_INT 34
28783: PUSH
28784: LD_INT 12
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 34
28793: PUSH
28794: LD_INT 51
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 34
28803: PUSH
28804: LD_INT 32
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: LIST
28821: PPUSH
28822: CALL_OW 69
28826: ST_TO_ADDR
// if not tmp then
28827: LD_VAR 0 2
28831: NOT
28832: IFFALSE 28836
// exit ;
28834: GO 28886
// for i in tmp do
28836: LD_ADDR_VAR 0 1
28840: PUSH
28841: LD_VAR 0 2
28845: PUSH
28846: FOR_IN
28847: IFFALSE 28884
// if GetCargo ( i , mat_artifact ) = 0 then
28849: LD_VAR 0 1
28853: PPUSH
28854: LD_INT 4
28856: PPUSH
28857: CALL_OW 289
28861: PUSH
28862: LD_INT 0
28864: EQUAL
28865: IFFALSE 28882
// SetCargo ( i , mat_siberit , 100 ) ;
28867: LD_VAR 0 1
28871: PPUSH
28872: LD_INT 3
28874: PPUSH
28875: LD_INT 100
28877: PPUSH
28878: CALL_OW 290
28882: GO 28846
28884: POP
28885: POP
// end ;
28886: PPOPN 2
28888: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28889: LD_EXP 33
28893: PUSH
28894: LD_EXP 78
28898: AND
28899: IFFALSE 29082
28901: GO 28903
28903: DISABLE
28904: LD_INT 0
28906: PPUSH
28907: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28908: LD_ADDR_VAR 0 2
28912: PUSH
28913: LD_INT 22
28915: PUSH
28916: LD_OWVAR 2
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PPUSH
28925: CALL_OW 69
28929: ST_TO_ADDR
// if not tmp then
28930: LD_VAR 0 2
28934: NOT
28935: IFFALSE 28939
// exit ;
28937: GO 29082
// for i := 1 to 2 do
28939: LD_ADDR_VAR 0 1
28943: PUSH
28944: DOUBLE
28945: LD_INT 1
28947: DEC
28948: ST_TO_ADDR
28949: LD_INT 2
28951: PUSH
28952: FOR_TO
28953: IFFALSE 29080
// begin uc_side := your_side ;
28955: LD_ADDR_OWVAR 20
28959: PUSH
28960: LD_OWVAR 2
28964: ST_TO_ADDR
// uc_nation := nation_american ;
28965: LD_ADDR_OWVAR 21
28969: PUSH
28970: LD_INT 1
28972: ST_TO_ADDR
// vc_chassis := us_morphling ;
28973: LD_ADDR_OWVAR 37
28977: PUSH
28978: LD_INT 5
28980: ST_TO_ADDR
// vc_engine := engine_siberite ;
28981: LD_ADDR_OWVAR 39
28985: PUSH
28986: LD_INT 3
28988: ST_TO_ADDR
// vc_control := control_computer ;
28989: LD_ADDR_OWVAR 38
28993: PUSH
28994: LD_INT 3
28996: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28997: LD_ADDR_OWVAR 40
29001: PUSH
29002: LD_INT 10
29004: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29005: LD_VAR 0 2
29009: PUSH
29010: LD_INT 1
29012: ARRAY
29013: PPUSH
29014: CALL_OW 310
29018: NOT
29019: IFFALSE 29066
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29021: CALL_OW 45
29025: PPUSH
29026: LD_VAR 0 2
29030: PUSH
29031: LD_INT 1
29033: ARRAY
29034: PPUSH
29035: CALL_OW 250
29039: PPUSH
29040: LD_VAR 0 2
29044: PUSH
29045: LD_INT 1
29047: ARRAY
29048: PPUSH
29049: CALL_OW 251
29053: PPUSH
29054: LD_INT 12
29056: PPUSH
29057: LD_INT 1
29059: PPUSH
29060: CALL_OW 50
29064: GO 29078
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29066: CALL_OW 45
29070: PPUSH
29071: LD_INT 1
29073: PPUSH
29074: CALL_OW 51
// end ;
29078: GO 28952
29080: POP
29081: POP
// end ;
29082: PPOPN 2
29084: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29085: LD_EXP 33
29089: PUSH
29090: LD_EXP 79
29094: AND
29095: IFFALSE 29317
29097: GO 29099
29099: DISABLE
29100: LD_INT 0
29102: PPUSH
29103: PPUSH
29104: PPUSH
29105: PPUSH
29106: PPUSH
29107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29108: LD_ADDR_VAR 0 6
29112: PUSH
29113: LD_INT 22
29115: PUSH
29116: LD_OWVAR 2
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 21
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 3
29137: PUSH
29138: LD_INT 23
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: LIST
29156: PPUSH
29157: CALL_OW 69
29161: ST_TO_ADDR
// if not tmp then
29162: LD_VAR 0 6
29166: NOT
29167: IFFALSE 29171
// exit ;
29169: GO 29317
// s1 := rand ( 1 , 4 ) ;
29171: LD_ADDR_VAR 0 2
29175: PUSH
29176: LD_INT 1
29178: PPUSH
29179: LD_INT 4
29181: PPUSH
29182: CALL_OW 12
29186: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29187: LD_ADDR_VAR 0 4
29191: PUSH
29192: LD_VAR 0 6
29196: PUSH
29197: LD_INT 1
29199: ARRAY
29200: PPUSH
29201: LD_VAR 0 2
29205: PPUSH
29206: CALL_OW 259
29210: ST_TO_ADDR
// if s1 = 1 then
29211: LD_VAR 0 2
29215: PUSH
29216: LD_INT 1
29218: EQUAL
29219: IFFALSE 29239
// s2 := rand ( 2 , 4 ) else
29221: LD_ADDR_VAR 0 3
29225: PUSH
29226: LD_INT 2
29228: PPUSH
29229: LD_INT 4
29231: PPUSH
29232: CALL_OW 12
29236: ST_TO_ADDR
29237: GO 29247
// s2 := 1 ;
29239: LD_ADDR_VAR 0 3
29243: PUSH
29244: LD_INT 1
29246: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29247: LD_ADDR_VAR 0 5
29251: PUSH
29252: LD_VAR 0 6
29256: PUSH
29257: LD_INT 1
29259: ARRAY
29260: PPUSH
29261: LD_VAR 0 3
29265: PPUSH
29266: CALL_OW 259
29270: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29271: LD_VAR 0 6
29275: PUSH
29276: LD_INT 1
29278: ARRAY
29279: PPUSH
29280: LD_VAR 0 2
29284: PPUSH
29285: LD_VAR 0 5
29289: PPUSH
29290: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29294: LD_VAR 0 6
29298: PUSH
29299: LD_INT 1
29301: ARRAY
29302: PPUSH
29303: LD_VAR 0 3
29307: PPUSH
29308: LD_VAR 0 4
29312: PPUSH
29313: CALL_OW 237
// end ;
29317: PPOPN 6
29319: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29320: LD_EXP 33
29324: PUSH
29325: LD_EXP 80
29329: AND
29330: IFFALSE 29409
29332: GO 29334
29334: DISABLE
29335: LD_INT 0
29337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29338: LD_ADDR_VAR 0 1
29342: PUSH
29343: LD_INT 22
29345: PUSH
29346: LD_OWVAR 2
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 30
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PPUSH
29369: CALL_OW 69
29373: ST_TO_ADDR
// if not tmp then
29374: LD_VAR 0 1
29378: NOT
29379: IFFALSE 29383
// exit ;
29381: GO 29409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29383: LD_VAR 0 1
29387: PUSH
29388: LD_INT 1
29390: PPUSH
29391: LD_VAR 0 1
29395: PPUSH
29396: CALL_OW 12
29400: ARRAY
29401: PPUSH
29402: LD_INT 1
29404: PPUSH
29405: CALL_OW 234
// end ;
29409: PPOPN 1
29411: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29412: LD_EXP 33
29416: PUSH
29417: LD_EXP 81
29421: AND
29422: IFFALSE 29534
29424: GO 29426
29426: DISABLE
29427: LD_INT 0
29429: PPUSH
29430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29431: LD_ADDR_VAR 0 2
29435: PUSH
29436: LD_INT 22
29438: PUSH
29439: LD_OWVAR 2
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 2
29450: PUSH
29451: LD_INT 30
29453: PUSH
29454: LD_INT 27
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 30
29463: PUSH
29464: LD_INT 26
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 30
29473: PUSH
29474: LD_INT 28
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PPUSH
29491: CALL_OW 69
29495: ST_TO_ADDR
// if not tmp then
29496: LD_VAR 0 2
29500: NOT
29501: IFFALSE 29505
// exit ;
29503: GO 29534
// for i in tmp do
29505: LD_ADDR_VAR 0 1
29509: PUSH
29510: LD_VAR 0 2
29514: PUSH
29515: FOR_IN
29516: IFFALSE 29532
// SetLives ( i , 1 ) ;
29518: LD_VAR 0 1
29522: PPUSH
29523: LD_INT 1
29525: PPUSH
29526: CALL_OW 234
29530: GO 29515
29532: POP
29533: POP
// end ;
29534: PPOPN 2
29536: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29537: LD_EXP 33
29541: PUSH
29542: LD_EXP 82
29546: AND
29547: IFFALSE 29834
29549: GO 29551
29551: DISABLE
29552: LD_INT 0
29554: PPUSH
29555: PPUSH
29556: PPUSH
// begin i := rand ( 1 , 7 ) ;
29557: LD_ADDR_VAR 0 1
29561: PUSH
29562: LD_INT 1
29564: PPUSH
29565: LD_INT 7
29567: PPUSH
29568: CALL_OW 12
29572: ST_TO_ADDR
// case i of 1 :
29573: LD_VAR 0 1
29577: PUSH
29578: LD_INT 1
29580: DOUBLE
29581: EQUAL
29582: IFTRUE 29586
29584: GO 29596
29586: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29587: LD_STRING earthquake(getX(game), 0, 32)
29589: PPUSH
29590: CALL_OW 559
29594: GO 29834
29596: LD_INT 2
29598: DOUBLE
29599: EQUAL
29600: IFTRUE 29604
29602: GO 29618
29604: POP
// begin ToLua ( displayStucuk(); ) ;
29605: LD_STRING displayStucuk();
29607: PPUSH
29608: CALL_OW 559
// ResetFog ;
29612: CALL_OW 335
// end ; 3 :
29616: GO 29834
29618: LD_INT 3
29620: DOUBLE
29621: EQUAL
29622: IFTRUE 29626
29624: GO 29730
29626: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29627: LD_ADDR_VAR 0 2
29631: PUSH
29632: LD_INT 22
29634: PUSH
29635: LD_OWVAR 2
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 25
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PPUSH
29658: CALL_OW 69
29662: ST_TO_ADDR
// if not tmp then
29663: LD_VAR 0 2
29667: NOT
29668: IFFALSE 29672
// exit ;
29670: GO 29834
// un := tmp [ rand ( 1 , tmp ) ] ;
29672: LD_ADDR_VAR 0 3
29676: PUSH
29677: LD_VAR 0 2
29681: PUSH
29682: LD_INT 1
29684: PPUSH
29685: LD_VAR 0 2
29689: PPUSH
29690: CALL_OW 12
29694: ARRAY
29695: ST_TO_ADDR
// if Crawls ( un ) then
29696: LD_VAR 0 3
29700: PPUSH
29701: CALL_OW 318
29705: IFFALSE 29716
// ComWalk ( un ) ;
29707: LD_VAR 0 3
29711: PPUSH
29712: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29716: LD_VAR 0 3
29720: PPUSH
29721: LD_INT 8
29723: PPUSH
29724: CALL_OW 336
// end ; 4 :
29728: GO 29834
29730: LD_INT 4
29732: DOUBLE
29733: EQUAL
29734: IFTRUE 29738
29736: GO 29812
29738: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29739: LD_ADDR_VAR 0 2
29743: PUSH
29744: LD_INT 22
29746: PUSH
29747: LD_OWVAR 2
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 30
29758: PUSH
29759: LD_INT 29
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PPUSH
29770: CALL_OW 69
29774: ST_TO_ADDR
// if not tmp then
29775: LD_VAR 0 2
29779: NOT
29780: IFFALSE 29784
// exit ;
29782: GO 29834
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29784: LD_VAR 0 2
29788: PUSH
29789: LD_INT 1
29791: ARRAY
29792: PPUSH
29793: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29797: LD_VAR 0 2
29801: PUSH
29802: LD_INT 1
29804: ARRAY
29805: PPUSH
29806: CALL_OW 65
// end ; 5 .. 7 :
29810: GO 29834
29812: LD_INT 5
29814: DOUBLE
29815: GREATEREQUAL
29816: IFFALSE 29824
29818: LD_INT 7
29820: DOUBLE
29821: LESSEQUAL
29822: IFTRUE 29826
29824: GO 29833
29826: POP
// StreamSibBomb ; end ;
29827: CALL 26071 0 0
29831: GO 29834
29833: POP
// end ;
29834: PPOPN 3
29836: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29837: LD_EXP 33
29841: PUSH
29842: LD_EXP 83
29846: AND
29847: IFFALSE 30003
29849: GO 29851
29851: DISABLE
29852: LD_INT 0
29854: PPUSH
29855: PPUSH
29856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29857: LD_ADDR_VAR 0 2
29861: PUSH
29862: LD_INT 81
29864: PUSH
29865: LD_OWVAR 2
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 2
29876: PUSH
29877: LD_INT 21
29879: PUSH
29880: LD_INT 1
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 21
29889: PUSH
29890: LD_INT 2
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: LIST
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PPUSH
29906: CALL_OW 69
29910: ST_TO_ADDR
// if not tmp then
29911: LD_VAR 0 2
29915: NOT
29916: IFFALSE 29920
// exit ;
29918: GO 30003
// p := 0 ;
29920: LD_ADDR_VAR 0 3
29924: PUSH
29925: LD_INT 0
29927: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29928: LD_INT 35
29930: PPUSH
29931: CALL_OW 67
// p := p + 1 ;
29935: LD_ADDR_VAR 0 3
29939: PUSH
29940: LD_VAR 0 3
29944: PUSH
29945: LD_INT 1
29947: PLUS
29948: ST_TO_ADDR
// for i in tmp do
29949: LD_ADDR_VAR 0 1
29953: PUSH
29954: LD_VAR 0 2
29958: PUSH
29959: FOR_IN
29960: IFFALSE 29991
// if GetLives ( i ) < 1000 then
29962: LD_VAR 0 1
29966: PPUSH
29967: CALL_OW 256
29971: PUSH
29972: LD_INT 1000
29974: LESS
29975: IFFALSE 29989
// SetLives ( i , 1000 ) ;
29977: LD_VAR 0 1
29981: PPUSH
29982: LD_INT 1000
29984: PPUSH
29985: CALL_OW 234
29989: GO 29959
29991: POP
29992: POP
// until p > 20 ;
29993: LD_VAR 0 3
29997: PUSH
29998: LD_INT 20
30000: GREATER
30001: IFFALSE 29928
// end ;
30003: PPOPN 3
30005: END
// every 0 0$1 trigger StreamModeActive and sTime do
30006: LD_EXP 33
30010: PUSH
30011: LD_EXP 84
30015: AND
30016: IFFALSE 30051
30018: GO 30020
30020: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30021: LD_INT 28
30023: PPUSH
30024: LD_OWVAR 2
30028: PPUSH
30029: LD_INT 2
30031: PPUSH
30032: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30036: LD_INT 30
30038: PPUSH
30039: LD_OWVAR 2
30043: PPUSH
30044: LD_INT 2
30046: PPUSH
30047: CALL_OW 322
// end ;
30051: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30052: LD_EXP 33
30056: PUSH
30057: LD_EXP 85
30061: AND
30062: IFFALSE 30183
30064: GO 30066
30066: DISABLE
30067: LD_INT 0
30069: PPUSH
30070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30071: LD_ADDR_VAR 0 2
30075: PUSH
30076: LD_INT 22
30078: PUSH
30079: LD_OWVAR 2
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 21
30090: PUSH
30091: LD_INT 1
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 3
30100: PUSH
30101: LD_INT 23
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: LIST
30119: PPUSH
30120: CALL_OW 69
30124: ST_TO_ADDR
// if not tmp then
30125: LD_VAR 0 2
30129: NOT
30130: IFFALSE 30134
// exit ;
30132: GO 30183
// for i in tmp do
30134: LD_ADDR_VAR 0 1
30138: PUSH
30139: LD_VAR 0 2
30143: PUSH
30144: FOR_IN
30145: IFFALSE 30181
// begin if Crawls ( i ) then
30147: LD_VAR 0 1
30151: PPUSH
30152: CALL_OW 318
30156: IFFALSE 30167
// ComWalk ( i ) ;
30158: LD_VAR 0 1
30162: PPUSH
30163: CALL_OW 138
// SetClass ( i , 2 ) ;
30167: LD_VAR 0 1
30171: PPUSH
30172: LD_INT 2
30174: PPUSH
30175: CALL_OW 336
// end ;
30179: GO 30144
30181: POP
30182: POP
// end ;
30183: PPOPN 2
30185: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30186: LD_EXP 33
30190: PUSH
30191: LD_EXP 86
30195: AND
30196: IFFALSE 30484
30198: GO 30200
30200: DISABLE
30201: LD_INT 0
30203: PPUSH
30204: PPUSH
30205: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30206: LD_OWVAR 2
30210: PPUSH
30211: LD_INT 9
30213: PPUSH
30214: LD_INT 1
30216: PPUSH
30217: LD_INT 1
30219: PPUSH
30220: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30224: LD_INT 9
30226: PPUSH
30227: LD_OWVAR 2
30231: PPUSH
30232: CALL_OW 343
// uc_side := 9 ;
30236: LD_ADDR_OWVAR 20
30240: PUSH
30241: LD_INT 9
30243: ST_TO_ADDR
// uc_nation := 2 ;
30244: LD_ADDR_OWVAR 21
30248: PUSH
30249: LD_INT 2
30251: ST_TO_ADDR
// hc_name := Dark Warrior ;
30252: LD_ADDR_OWVAR 26
30256: PUSH
30257: LD_STRING Dark Warrior
30259: ST_TO_ADDR
// hc_gallery :=  ;
30260: LD_ADDR_OWVAR 33
30264: PUSH
30265: LD_STRING 
30267: ST_TO_ADDR
// hc_noskilllimit := true ;
30268: LD_ADDR_OWVAR 76
30272: PUSH
30273: LD_INT 1
30275: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30276: LD_ADDR_OWVAR 31
30280: PUSH
30281: LD_INT 30
30283: PUSH
30284: LD_INT 30
30286: PUSH
30287: LD_INT 30
30289: PUSH
30290: LD_INT 30
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: ST_TO_ADDR
// un := CreateHuman ;
30299: LD_ADDR_VAR 0 3
30303: PUSH
30304: CALL_OW 44
30308: ST_TO_ADDR
// hc_noskilllimit := false ;
30309: LD_ADDR_OWVAR 76
30313: PUSH
30314: LD_INT 0
30316: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30317: LD_VAR 0 3
30321: PPUSH
30322: LD_INT 1
30324: PPUSH
30325: CALL_OW 51
// ToLua ( playRanger() ) ;
30329: LD_STRING playRanger()
30331: PPUSH
30332: CALL_OW 559
// p := 0 ;
30336: LD_ADDR_VAR 0 2
30340: PUSH
30341: LD_INT 0
30343: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30344: LD_INT 35
30346: PPUSH
30347: CALL_OW 67
// p := p + 1 ;
30351: LD_ADDR_VAR 0 2
30355: PUSH
30356: LD_VAR 0 2
30360: PUSH
30361: LD_INT 1
30363: PLUS
30364: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30365: LD_VAR 0 3
30369: PPUSH
30370: CALL_OW 256
30374: PUSH
30375: LD_INT 1000
30377: LESS
30378: IFFALSE 30392
// SetLives ( un , 1000 ) ;
30380: LD_VAR 0 3
30384: PPUSH
30385: LD_INT 1000
30387: PPUSH
30388: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30392: LD_VAR 0 3
30396: PPUSH
30397: LD_INT 81
30399: PUSH
30400: LD_OWVAR 2
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 91
30411: PUSH
30412: LD_VAR 0 3
30416: PUSH
30417: LD_INT 30
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PPUSH
30429: CALL_OW 69
30433: PPUSH
30434: LD_VAR 0 3
30438: PPUSH
30439: CALL_OW 74
30443: PPUSH
30444: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30448: LD_VAR 0 2
30452: PUSH
30453: LD_INT 80
30455: GREATER
30456: PUSH
30457: LD_VAR 0 3
30461: PPUSH
30462: CALL_OW 301
30466: OR
30467: IFFALSE 30344
// if un then
30469: LD_VAR 0 3
30473: IFFALSE 30484
// RemoveUnit ( un ) ;
30475: LD_VAR 0 3
30479: PPUSH
30480: CALL_OW 64
// end ;
30484: PPOPN 3
30486: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30487: LD_EXP 87
30491: IFFALSE 30607
30493: GO 30495
30495: DISABLE
30496: LD_INT 0
30498: PPUSH
30499: PPUSH
30500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30501: LD_ADDR_VAR 0 2
30505: PUSH
30506: LD_INT 81
30508: PUSH
30509: LD_OWVAR 2
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 21
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PPUSH
30532: CALL_OW 69
30536: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30537: LD_STRING playComputer()
30539: PPUSH
30540: CALL_OW 559
// if not tmp then
30544: LD_VAR 0 2
30548: NOT
30549: IFFALSE 30553
// exit ;
30551: GO 30607
// for i in tmp do
30553: LD_ADDR_VAR 0 1
30557: PUSH
30558: LD_VAR 0 2
30562: PUSH
30563: FOR_IN
30564: IFFALSE 30605
// for j := 1 to 4 do
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: DOUBLE
30572: LD_INT 1
30574: DEC
30575: ST_TO_ADDR
30576: LD_INT 4
30578: PUSH
30579: FOR_TO
30580: IFFALSE 30601
// SetSkill ( i , j , 10 ) ;
30582: LD_VAR 0 1
30586: PPUSH
30587: LD_VAR 0 3
30591: PPUSH
30592: LD_INT 10
30594: PPUSH
30595: CALL_OW 237
30599: GO 30579
30601: POP
30602: POP
30603: GO 30563
30605: POP
30606: POP
// end ;
30607: PPOPN 3
30609: END
// every 0 0$1 trigger s30 do var i , tmp ;
30610: LD_EXP 88
30614: IFFALSE 30683
30616: GO 30618
30618: DISABLE
30619: LD_INT 0
30621: PPUSH
30622: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30623: LD_ADDR_VAR 0 2
30627: PUSH
30628: LD_INT 22
30630: PUSH
30631: LD_OWVAR 2
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PPUSH
30640: CALL_OW 69
30644: ST_TO_ADDR
// if not tmp then
30645: LD_VAR 0 2
30649: NOT
30650: IFFALSE 30654
// exit ;
30652: GO 30683
// for i in tmp do
30654: LD_ADDR_VAR 0 1
30658: PUSH
30659: LD_VAR 0 2
30663: PUSH
30664: FOR_IN
30665: IFFALSE 30681
// SetLives ( i , 300 ) ;
30667: LD_VAR 0 1
30671: PPUSH
30672: LD_INT 300
30674: PPUSH
30675: CALL_OW 234
30679: GO 30664
30681: POP
30682: POP
// end ;
30683: PPOPN 2
30685: END
// every 0 0$1 trigger s60 do var i , tmp ;
30686: LD_EXP 89
30690: IFFALSE 30759
30692: GO 30694
30694: DISABLE
30695: LD_INT 0
30697: PPUSH
30698: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30699: LD_ADDR_VAR 0 2
30703: PUSH
30704: LD_INT 22
30706: PUSH
30707: LD_OWVAR 2
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PPUSH
30716: CALL_OW 69
30720: ST_TO_ADDR
// if not tmp then
30721: LD_VAR 0 2
30725: NOT
30726: IFFALSE 30730
// exit ;
30728: GO 30759
// for i in tmp do
30730: LD_ADDR_VAR 0 1
30734: PUSH
30735: LD_VAR 0 2
30739: PUSH
30740: FOR_IN
30741: IFFALSE 30757
// SetLives ( i , 600 ) ;
30743: LD_VAR 0 1
30747: PPUSH
30748: LD_INT 600
30750: PPUSH
30751: CALL_OW 234
30755: GO 30740
30757: POP
30758: POP
// end ;
30759: PPOPN 2
30761: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30762: LD_INT 0
30764: PPUSH
// case cmd of 301 :
30765: LD_VAR 0 1
30769: PUSH
30770: LD_INT 301
30772: DOUBLE
30773: EQUAL
30774: IFTRUE 30778
30776: GO 30810
30778: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30779: LD_VAR 0 6
30783: PPUSH
30784: LD_VAR 0 7
30788: PPUSH
30789: LD_VAR 0 8
30793: PPUSH
30794: LD_VAR 0 4
30798: PPUSH
30799: LD_VAR 0 5
30803: PPUSH
30804: CALL 32011 0 5
30808: GO 30931
30810: LD_INT 302
30812: DOUBLE
30813: EQUAL
30814: IFTRUE 30818
30816: GO 30855
30818: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30819: LD_VAR 0 6
30823: PPUSH
30824: LD_VAR 0 7
30828: PPUSH
30829: LD_VAR 0 8
30833: PPUSH
30834: LD_VAR 0 9
30838: PPUSH
30839: LD_VAR 0 4
30843: PPUSH
30844: LD_VAR 0 5
30848: PPUSH
30849: CALL 32102 0 6
30853: GO 30931
30855: LD_INT 303
30857: DOUBLE
30858: EQUAL
30859: IFTRUE 30863
30861: GO 30900
30863: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30864: LD_VAR 0 6
30868: PPUSH
30869: LD_VAR 0 7
30873: PPUSH
30874: LD_VAR 0 8
30878: PPUSH
30879: LD_VAR 0 9
30883: PPUSH
30884: LD_VAR 0 4
30888: PPUSH
30889: LD_VAR 0 5
30893: PPUSH
30894: CALL 30936 0 6
30898: GO 30931
30900: LD_INT 304
30902: DOUBLE
30903: EQUAL
30904: IFTRUE 30908
30906: GO 30930
30908: POP
// hHackTeleport ( unit , x , y ) ; end ;
30909: LD_VAR 0 2
30913: PPUSH
30914: LD_VAR 0 4
30918: PPUSH
30919: LD_VAR 0 5
30923: PPUSH
30924: CALL 32695 0 3
30928: GO 30931
30930: POP
// end ;
30931: LD_VAR 0 12
30935: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30936: LD_INT 0
30938: PPUSH
30939: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30940: LD_VAR 0 1
30944: PUSH
30945: LD_INT 1
30947: LESS
30948: PUSH
30949: LD_VAR 0 1
30953: PUSH
30954: LD_INT 3
30956: GREATER
30957: OR
30958: PUSH
30959: LD_VAR 0 5
30963: PPUSH
30964: LD_VAR 0 6
30968: PPUSH
30969: CALL_OW 428
30973: OR
30974: IFFALSE 30978
// exit ;
30976: GO 31698
// uc_side := your_side ;
30978: LD_ADDR_OWVAR 20
30982: PUSH
30983: LD_OWVAR 2
30987: ST_TO_ADDR
// uc_nation := nation ;
30988: LD_ADDR_OWVAR 21
30992: PUSH
30993: LD_VAR 0 1
30997: ST_TO_ADDR
// bc_level = 1 ;
30998: LD_ADDR_OWVAR 43
31002: PUSH
31003: LD_INT 1
31005: ST_TO_ADDR
// case btype of 1 :
31006: LD_VAR 0 2
31010: PUSH
31011: LD_INT 1
31013: DOUBLE
31014: EQUAL
31015: IFTRUE 31019
31017: GO 31030
31019: POP
// bc_type := b_depot ; 2 :
31020: LD_ADDR_OWVAR 42
31024: PUSH
31025: LD_INT 0
31027: ST_TO_ADDR
31028: GO 31642
31030: LD_INT 2
31032: DOUBLE
31033: EQUAL
31034: IFTRUE 31038
31036: GO 31049
31038: POP
// bc_type := b_warehouse ; 3 :
31039: LD_ADDR_OWVAR 42
31043: PUSH
31044: LD_INT 1
31046: ST_TO_ADDR
31047: GO 31642
31049: LD_INT 3
31051: DOUBLE
31052: EQUAL
31053: IFTRUE 31057
31055: GO 31068
31057: POP
// bc_type := b_lab ; 4 .. 9 :
31058: LD_ADDR_OWVAR 42
31062: PUSH
31063: LD_INT 6
31065: ST_TO_ADDR
31066: GO 31642
31068: LD_INT 4
31070: DOUBLE
31071: GREATEREQUAL
31072: IFFALSE 31080
31074: LD_INT 9
31076: DOUBLE
31077: LESSEQUAL
31078: IFTRUE 31082
31080: GO 31134
31082: POP
// begin bc_type := b_lab_half ;
31083: LD_ADDR_OWVAR 42
31087: PUSH
31088: LD_INT 7
31090: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31091: LD_ADDR_OWVAR 44
31095: PUSH
31096: LD_INT 10
31098: PUSH
31099: LD_INT 11
31101: PUSH
31102: LD_INT 12
31104: PUSH
31105: LD_INT 15
31107: PUSH
31108: LD_INT 14
31110: PUSH
31111: LD_INT 13
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: PUSH
31122: LD_VAR 0 2
31126: PUSH
31127: LD_INT 3
31129: MINUS
31130: ARRAY
31131: ST_TO_ADDR
// end ; 10 .. 13 :
31132: GO 31642
31134: LD_INT 10
31136: DOUBLE
31137: GREATEREQUAL
31138: IFFALSE 31146
31140: LD_INT 13
31142: DOUBLE
31143: LESSEQUAL
31144: IFTRUE 31148
31146: GO 31225
31148: POP
// begin bc_type := b_lab_full ;
31149: LD_ADDR_OWVAR 42
31153: PUSH
31154: LD_INT 8
31156: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31157: LD_ADDR_OWVAR 44
31161: PUSH
31162: LD_INT 10
31164: PUSH
31165: LD_INT 12
31167: PUSH
31168: LD_INT 14
31170: PUSH
31171: LD_INT 13
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: PUSH
31180: LD_VAR 0 2
31184: PUSH
31185: LD_INT 9
31187: MINUS
31188: ARRAY
31189: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31190: LD_ADDR_OWVAR 45
31194: PUSH
31195: LD_INT 11
31197: PUSH
31198: LD_INT 15
31200: PUSH
31201: LD_INT 12
31203: PUSH
31204: LD_INT 15
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: PUSH
31213: LD_VAR 0 2
31217: PUSH
31218: LD_INT 9
31220: MINUS
31221: ARRAY
31222: ST_TO_ADDR
// end ; 14 :
31223: GO 31642
31225: LD_INT 14
31227: DOUBLE
31228: EQUAL
31229: IFTRUE 31233
31231: GO 31244
31233: POP
// bc_type := b_workshop ; 15 :
31234: LD_ADDR_OWVAR 42
31238: PUSH
31239: LD_INT 2
31241: ST_TO_ADDR
31242: GO 31642
31244: LD_INT 15
31246: DOUBLE
31247: EQUAL
31248: IFTRUE 31252
31250: GO 31263
31252: POP
// bc_type := b_factory ; 16 :
31253: LD_ADDR_OWVAR 42
31257: PUSH
31258: LD_INT 3
31260: ST_TO_ADDR
31261: GO 31642
31263: LD_INT 16
31265: DOUBLE
31266: EQUAL
31267: IFTRUE 31271
31269: GO 31282
31271: POP
// bc_type := b_ext_gun ; 17 :
31272: LD_ADDR_OWVAR 42
31276: PUSH
31277: LD_INT 17
31279: ST_TO_ADDR
31280: GO 31642
31282: LD_INT 17
31284: DOUBLE
31285: EQUAL
31286: IFTRUE 31290
31288: GO 31318
31290: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31291: LD_ADDR_OWVAR 42
31295: PUSH
31296: LD_INT 19
31298: PUSH
31299: LD_INT 23
31301: PUSH
31302: LD_INT 19
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: PUSH
31310: LD_VAR 0 1
31314: ARRAY
31315: ST_TO_ADDR
31316: GO 31642
31318: LD_INT 18
31320: DOUBLE
31321: EQUAL
31322: IFTRUE 31326
31324: GO 31337
31326: POP
// bc_type := b_ext_radar ; 19 :
31327: LD_ADDR_OWVAR 42
31331: PUSH
31332: LD_INT 20
31334: ST_TO_ADDR
31335: GO 31642
31337: LD_INT 19
31339: DOUBLE
31340: EQUAL
31341: IFTRUE 31345
31343: GO 31356
31345: POP
// bc_type := b_ext_radio ; 20 :
31346: LD_ADDR_OWVAR 42
31350: PUSH
31351: LD_INT 22
31353: ST_TO_ADDR
31354: GO 31642
31356: LD_INT 20
31358: DOUBLE
31359: EQUAL
31360: IFTRUE 31364
31362: GO 31375
31364: POP
// bc_type := b_ext_siberium ; 21 :
31365: LD_ADDR_OWVAR 42
31369: PUSH
31370: LD_INT 21
31372: ST_TO_ADDR
31373: GO 31642
31375: LD_INT 21
31377: DOUBLE
31378: EQUAL
31379: IFTRUE 31383
31381: GO 31394
31383: POP
// bc_type := b_ext_computer ; 22 :
31384: LD_ADDR_OWVAR 42
31388: PUSH
31389: LD_INT 24
31391: ST_TO_ADDR
31392: GO 31642
31394: LD_INT 22
31396: DOUBLE
31397: EQUAL
31398: IFTRUE 31402
31400: GO 31413
31402: POP
// bc_type := b_ext_track ; 23 :
31403: LD_ADDR_OWVAR 42
31407: PUSH
31408: LD_INT 16
31410: ST_TO_ADDR
31411: GO 31642
31413: LD_INT 23
31415: DOUBLE
31416: EQUAL
31417: IFTRUE 31421
31419: GO 31432
31421: POP
// bc_type := b_ext_laser ; 24 :
31422: LD_ADDR_OWVAR 42
31426: PUSH
31427: LD_INT 25
31429: ST_TO_ADDR
31430: GO 31642
31432: LD_INT 24
31434: DOUBLE
31435: EQUAL
31436: IFTRUE 31440
31438: GO 31451
31440: POP
// bc_type := b_control_tower ; 25 :
31441: LD_ADDR_OWVAR 42
31445: PUSH
31446: LD_INT 36
31448: ST_TO_ADDR
31449: GO 31642
31451: LD_INT 25
31453: DOUBLE
31454: EQUAL
31455: IFTRUE 31459
31457: GO 31470
31459: POP
// bc_type := b_breastwork ; 26 :
31460: LD_ADDR_OWVAR 42
31464: PUSH
31465: LD_INT 31
31467: ST_TO_ADDR
31468: GO 31642
31470: LD_INT 26
31472: DOUBLE
31473: EQUAL
31474: IFTRUE 31478
31476: GO 31489
31478: POP
// bc_type := b_bunker ; 27 :
31479: LD_ADDR_OWVAR 42
31483: PUSH
31484: LD_INT 32
31486: ST_TO_ADDR
31487: GO 31642
31489: LD_INT 27
31491: DOUBLE
31492: EQUAL
31493: IFTRUE 31497
31495: GO 31508
31497: POP
// bc_type := b_turret ; 28 :
31498: LD_ADDR_OWVAR 42
31502: PUSH
31503: LD_INT 33
31505: ST_TO_ADDR
31506: GO 31642
31508: LD_INT 28
31510: DOUBLE
31511: EQUAL
31512: IFTRUE 31516
31514: GO 31527
31516: POP
// bc_type := b_armoury ; 29 :
31517: LD_ADDR_OWVAR 42
31521: PUSH
31522: LD_INT 4
31524: ST_TO_ADDR
31525: GO 31642
31527: LD_INT 29
31529: DOUBLE
31530: EQUAL
31531: IFTRUE 31535
31533: GO 31546
31535: POP
// bc_type := b_barracks ; 30 :
31536: LD_ADDR_OWVAR 42
31540: PUSH
31541: LD_INT 5
31543: ST_TO_ADDR
31544: GO 31642
31546: LD_INT 30
31548: DOUBLE
31549: EQUAL
31550: IFTRUE 31554
31552: GO 31565
31554: POP
// bc_type := b_solar_power ; 31 :
31555: LD_ADDR_OWVAR 42
31559: PUSH
31560: LD_INT 27
31562: ST_TO_ADDR
31563: GO 31642
31565: LD_INT 31
31567: DOUBLE
31568: EQUAL
31569: IFTRUE 31573
31571: GO 31584
31573: POP
// bc_type := b_oil_power ; 32 :
31574: LD_ADDR_OWVAR 42
31578: PUSH
31579: LD_INT 26
31581: ST_TO_ADDR
31582: GO 31642
31584: LD_INT 32
31586: DOUBLE
31587: EQUAL
31588: IFTRUE 31592
31590: GO 31603
31592: POP
// bc_type := b_siberite_power ; 33 :
31593: LD_ADDR_OWVAR 42
31597: PUSH
31598: LD_INT 28
31600: ST_TO_ADDR
31601: GO 31642
31603: LD_INT 33
31605: DOUBLE
31606: EQUAL
31607: IFTRUE 31611
31609: GO 31622
31611: POP
// bc_type := b_oil_mine ; 34 :
31612: LD_ADDR_OWVAR 42
31616: PUSH
31617: LD_INT 29
31619: ST_TO_ADDR
31620: GO 31642
31622: LD_INT 34
31624: DOUBLE
31625: EQUAL
31626: IFTRUE 31630
31628: GO 31641
31630: POP
// bc_type := b_siberite_mine ; end ;
31631: LD_ADDR_OWVAR 42
31635: PUSH
31636: LD_INT 30
31638: ST_TO_ADDR
31639: GO 31642
31641: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31642: LD_ADDR_VAR 0 8
31646: PUSH
31647: LD_VAR 0 5
31651: PPUSH
31652: LD_VAR 0 6
31656: PPUSH
31657: LD_VAR 0 3
31661: PPUSH
31662: CALL_OW 47
31666: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31667: LD_OWVAR 42
31671: PUSH
31672: LD_INT 32
31674: PUSH
31675: LD_INT 33
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: IN
31682: IFFALSE 31698
// PlaceWeaponTurret ( b , weapon ) ;
31684: LD_VAR 0 8
31688: PPUSH
31689: LD_VAR 0 4
31693: PPUSH
31694: CALL_OW 431
// end ;
31698: LD_VAR 0 7
31702: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31703: LD_INT 0
31705: PPUSH
31706: PPUSH
31707: PPUSH
31708: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31709: LD_ADDR_VAR 0 4
31713: PUSH
31714: LD_INT 22
31716: PUSH
31717: LD_OWVAR 2
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 2
31728: PUSH
31729: LD_INT 30
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 30
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: LIST
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PPUSH
31758: CALL_OW 69
31762: ST_TO_ADDR
// if not tmp then
31763: LD_VAR 0 4
31767: NOT
31768: IFFALSE 31772
// exit ;
31770: GO 31831
// for i in tmp do
31772: LD_ADDR_VAR 0 2
31776: PUSH
31777: LD_VAR 0 4
31781: PUSH
31782: FOR_IN
31783: IFFALSE 31829
// for j = 1 to 3 do
31785: LD_ADDR_VAR 0 3
31789: PUSH
31790: DOUBLE
31791: LD_INT 1
31793: DEC
31794: ST_TO_ADDR
31795: LD_INT 3
31797: PUSH
31798: FOR_TO
31799: IFFALSE 31825
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31801: LD_VAR 0 2
31805: PPUSH
31806: CALL_OW 274
31810: PPUSH
31811: LD_VAR 0 3
31815: PPUSH
31816: LD_INT 99999
31818: PPUSH
31819: CALL_OW 277
31823: GO 31798
31825: POP
31826: POP
31827: GO 31782
31829: POP
31830: POP
// end ;
31831: LD_VAR 0 1
31835: RET
// export function hHackSetLevel10 ; var i , j ; begin
31836: LD_INT 0
31838: PPUSH
31839: PPUSH
31840: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31841: LD_ADDR_VAR 0 2
31845: PUSH
31846: LD_INT 21
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PPUSH
31856: CALL_OW 69
31860: PUSH
31861: FOR_IN
31862: IFFALSE 31914
// if IsSelected ( i ) then
31864: LD_VAR 0 2
31868: PPUSH
31869: CALL_OW 306
31873: IFFALSE 31912
// begin for j := 1 to 4 do
31875: LD_ADDR_VAR 0 3
31879: PUSH
31880: DOUBLE
31881: LD_INT 1
31883: DEC
31884: ST_TO_ADDR
31885: LD_INT 4
31887: PUSH
31888: FOR_TO
31889: IFFALSE 31910
// SetSkill ( i , j , 10 ) ;
31891: LD_VAR 0 2
31895: PPUSH
31896: LD_VAR 0 3
31900: PPUSH
31901: LD_INT 10
31903: PPUSH
31904: CALL_OW 237
31908: GO 31888
31910: POP
31911: POP
// end ;
31912: GO 31861
31914: POP
31915: POP
// end ;
31916: LD_VAR 0 1
31920: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31921: LD_INT 0
31923: PPUSH
31924: PPUSH
31925: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31926: LD_ADDR_VAR 0 2
31930: PUSH
31931: LD_INT 22
31933: PUSH
31934: LD_OWVAR 2
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 21
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PPUSH
31957: CALL_OW 69
31961: PUSH
31962: FOR_IN
31963: IFFALSE 32004
// begin for j := 1 to 4 do
31965: LD_ADDR_VAR 0 3
31969: PUSH
31970: DOUBLE
31971: LD_INT 1
31973: DEC
31974: ST_TO_ADDR
31975: LD_INT 4
31977: PUSH
31978: FOR_TO
31979: IFFALSE 32000
// SetSkill ( i , j , 10 ) ;
31981: LD_VAR 0 2
31985: PPUSH
31986: LD_VAR 0 3
31990: PPUSH
31991: LD_INT 10
31993: PPUSH
31994: CALL_OW 237
31998: GO 31978
32000: POP
32001: POP
// end ;
32002: GO 31962
32004: POP
32005: POP
// end ;
32006: LD_VAR 0 1
32010: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32011: LD_INT 0
32013: PPUSH
// uc_side := your_side ;
32014: LD_ADDR_OWVAR 20
32018: PUSH
32019: LD_OWVAR 2
32023: ST_TO_ADDR
// uc_nation := nation ;
32024: LD_ADDR_OWVAR 21
32028: PUSH
32029: LD_VAR 0 1
32033: ST_TO_ADDR
// InitHc ;
32034: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32038: LD_INT 0
32040: PPUSH
32041: LD_VAR 0 2
32045: PPUSH
32046: LD_VAR 0 3
32050: PPUSH
32051: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32055: LD_VAR 0 4
32059: PPUSH
32060: LD_VAR 0 5
32064: PPUSH
32065: CALL_OW 428
32069: PUSH
32070: LD_INT 0
32072: EQUAL
32073: IFFALSE 32097
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32075: CALL_OW 44
32079: PPUSH
32080: LD_VAR 0 4
32084: PPUSH
32085: LD_VAR 0 5
32089: PPUSH
32090: LD_INT 1
32092: PPUSH
32093: CALL_OW 48
// end ;
32097: LD_VAR 0 6
32101: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32102: LD_INT 0
32104: PPUSH
32105: PPUSH
// uc_side := your_side ;
32106: LD_ADDR_OWVAR 20
32110: PUSH
32111: LD_OWVAR 2
32115: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32116: LD_VAR 0 1
32120: PUSH
32121: LD_INT 1
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: LD_INT 3
32129: PUSH
32130: LD_INT 4
32132: PUSH
32133: LD_INT 5
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: IN
32143: IFFALSE 32155
// uc_nation := nation_american else
32145: LD_ADDR_OWVAR 21
32149: PUSH
32150: LD_INT 1
32152: ST_TO_ADDR
32153: GO 32198
// if chassis in [ 11 , 12 , 13 , 14 ] then
32155: LD_VAR 0 1
32159: PUSH
32160: LD_INT 11
32162: PUSH
32163: LD_INT 12
32165: PUSH
32166: LD_INT 13
32168: PUSH
32169: LD_INT 14
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: IN
32178: IFFALSE 32190
// uc_nation := nation_arabian else
32180: LD_ADDR_OWVAR 21
32184: PUSH
32185: LD_INT 2
32187: ST_TO_ADDR
32188: GO 32198
// uc_nation := nation_russian ;
32190: LD_ADDR_OWVAR 21
32194: PUSH
32195: LD_INT 3
32197: ST_TO_ADDR
// vc_chassis := chassis ;
32198: LD_ADDR_OWVAR 37
32202: PUSH
32203: LD_VAR 0 1
32207: ST_TO_ADDR
// vc_engine := engine ;
32208: LD_ADDR_OWVAR 39
32212: PUSH
32213: LD_VAR 0 2
32217: ST_TO_ADDR
// vc_control := control ;
32218: LD_ADDR_OWVAR 38
32222: PUSH
32223: LD_VAR 0 3
32227: ST_TO_ADDR
// vc_weapon := weapon ;
32228: LD_ADDR_OWVAR 40
32232: PUSH
32233: LD_VAR 0 4
32237: ST_TO_ADDR
// un := CreateVehicle ;
32238: LD_ADDR_VAR 0 8
32242: PUSH
32243: CALL_OW 45
32247: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32248: LD_VAR 0 8
32252: PPUSH
32253: LD_INT 0
32255: PPUSH
32256: LD_INT 5
32258: PPUSH
32259: CALL_OW 12
32263: PPUSH
32264: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32268: LD_VAR 0 8
32272: PPUSH
32273: LD_VAR 0 5
32277: PPUSH
32278: LD_VAR 0 6
32282: PPUSH
32283: LD_INT 1
32285: PPUSH
32286: CALL_OW 48
// end ;
32290: LD_VAR 0 7
32294: RET
// export hInvincible ; every 1 do
32295: GO 32297
32297: DISABLE
// hInvincible := [ ] ;
32298: LD_ADDR_EXP 90
32302: PUSH
32303: EMPTY
32304: ST_TO_ADDR
32305: END
// every 10 do var i ;
32306: GO 32308
32308: DISABLE
32309: LD_INT 0
32311: PPUSH
// begin enable ;
32312: ENABLE
// if not hInvincible then
32313: LD_EXP 90
32317: NOT
32318: IFFALSE 32322
// exit ;
32320: GO 32366
// for i in hInvincible do
32322: LD_ADDR_VAR 0 1
32326: PUSH
32327: LD_EXP 90
32331: PUSH
32332: FOR_IN
32333: IFFALSE 32364
// if GetLives ( i ) < 1000 then
32335: LD_VAR 0 1
32339: PPUSH
32340: CALL_OW 256
32344: PUSH
32345: LD_INT 1000
32347: LESS
32348: IFFALSE 32362
// SetLives ( i , 1000 ) ;
32350: LD_VAR 0 1
32354: PPUSH
32355: LD_INT 1000
32357: PPUSH
32358: CALL_OW 234
32362: GO 32332
32364: POP
32365: POP
// end ;
32366: PPOPN 1
32368: END
// export function hHackInvincible ; var i ; begin
32369: LD_INT 0
32371: PPUSH
32372: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32373: LD_ADDR_VAR 0 2
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: LD_INT 21
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 21
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: LIST
32405: PPUSH
32406: CALL_OW 69
32410: PUSH
32411: FOR_IN
32412: IFFALSE 32473
// if IsSelected ( i ) then
32414: LD_VAR 0 2
32418: PPUSH
32419: CALL_OW 306
32423: IFFALSE 32471
// begin if i in hInvincible then
32425: LD_VAR 0 2
32429: PUSH
32430: LD_EXP 90
32434: IN
32435: IFFALSE 32455
// hInvincible := hInvincible diff i else
32437: LD_ADDR_EXP 90
32441: PUSH
32442: LD_EXP 90
32446: PUSH
32447: LD_VAR 0 2
32451: DIFF
32452: ST_TO_ADDR
32453: GO 32471
// hInvincible := hInvincible union i ;
32455: LD_ADDR_EXP 90
32459: PUSH
32460: LD_EXP 90
32464: PUSH
32465: LD_VAR 0 2
32469: UNION
32470: ST_TO_ADDR
// end ;
32471: GO 32411
32473: POP
32474: POP
// end ;
32475: LD_VAR 0 1
32479: RET
// export function hHackInvisible ; var i , j ; begin
32480: LD_INT 0
32482: PPUSH
32483: PPUSH
32484: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32485: LD_ADDR_VAR 0 2
32489: PUSH
32490: LD_INT 21
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PPUSH
32500: CALL_OW 69
32504: PUSH
32505: FOR_IN
32506: IFFALSE 32530
// if IsSelected ( i ) then
32508: LD_VAR 0 2
32512: PPUSH
32513: CALL_OW 306
32517: IFFALSE 32528
// ComForceInvisible ( i ) ;
32519: LD_VAR 0 2
32523: PPUSH
32524: CALL_OW 496
32528: GO 32505
32530: POP
32531: POP
// end ;
32532: LD_VAR 0 1
32536: RET
// export function hHackChangeYourSide ; begin
32537: LD_INT 0
32539: PPUSH
// if your_side = 8 then
32540: LD_OWVAR 2
32544: PUSH
32545: LD_INT 8
32547: EQUAL
32548: IFFALSE 32560
// your_side := 0 else
32550: LD_ADDR_OWVAR 2
32554: PUSH
32555: LD_INT 0
32557: ST_TO_ADDR
32558: GO 32574
// your_side := your_side + 1 ;
32560: LD_ADDR_OWVAR 2
32564: PUSH
32565: LD_OWVAR 2
32569: PUSH
32570: LD_INT 1
32572: PLUS
32573: ST_TO_ADDR
// end ;
32574: LD_VAR 0 1
32578: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32579: LD_INT 0
32581: PPUSH
32582: PPUSH
32583: PPUSH
// for i in all_units do
32584: LD_ADDR_VAR 0 2
32588: PUSH
32589: LD_OWVAR 3
32593: PUSH
32594: FOR_IN
32595: IFFALSE 32673
// if IsSelected ( i ) then
32597: LD_VAR 0 2
32601: PPUSH
32602: CALL_OW 306
32606: IFFALSE 32671
// begin j := GetSide ( i ) ;
32608: LD_ADDR_VAR 0 3
32612: PUSH
32613: LD_VAR 0 2
32617: PPUSH
32618: CALL_OW 255
32622: ST_TO_ADDR
// if j = 8 then
32623: LD_VAR 0 3
32627: PUSH
32628: LD_INT 8
32630: EQUAL
32631: IFFALSE 32643
// j := 0 else
32633: LD_ADDR_VAR 0 3
32637: PUSH
32638: LD_INT 0
32640: ST_TO_ADDR
32641: GO 32657
// j := j + 1 ;
32643: LD_ADDR_VAR 0 3
32647: PUSH
32648: LD_VAR 0 3
32652: PUSH
32653: LD_INT 1
32655: PLUS
32656: ST_TO_ADDR
// SetSide ( i , j ) ;
32657: LD_VAR 0 2
32661: PPUSH
32662: LD_VAR 0 3
32666: PPUSH
32667: CALL_OW 235
// end ;
32671: GO 32594
32673: POP
32674: POP
// end ;
32675: LD_VAR 0 1
32679: RET
// export function hHackFog ; begin
32680: LD_INT 0
32682: PPUSH
// FogOff ( true ) ;
32683: LD_INT 1
32685: PPUSH
32686: CALL_OW 344
// end ;
32690: LD_VAR 0 1
32694: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32695: LD_INT 0
32697: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32698: LD_VAR 0 1
32702: PPUSH
32703: LD_VAR 0 2
32707: PPUSH
32708: LD_VAR 0 3
32712: PPUSH
32713: LD_INT 1
32715: PPUSH
32716: LD_INT 1
32718: PPUSH
32719: CALL_OW 483
// CenterOnXY ( x , y ) ;
32723: LD_VAR 0 2
32727: PPUSH
32728: LD_VAR 0 3
32732: PPUSH
32733: CALL_OW 84
// end ;
32737: LD_VAR 0 4
32741: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32742: LD_INT 0
32744: PPUSH
32745: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32746: LD_VAR 0 1
32750: NOT
32751: PUSH
32752: LD_VAR 0 2
32756: PPUSH
32757: LD_VAR 0 3
32761: PPUSH
32762: CALL_OW 488
32766: NOT
32767: OR
32768: PUSH
32769: LD_VAR 0 1
32773: PPUSH
32774: CALL_OW 266
32778: PUSH
32779: LD_INT 3
32781: NONEQUAL
32782: PUSH
32783: LD_VAR 0 1
32787: PPUSH
32788: CALL_OW 247
32792: PUSH
32793: LD_INT 1
32795: EQUAL
32796: NOT
32797: AND
32798: OR
32799: IFFALSE 32803
// exit ;
32801: GO 32952
// if GetType ( factory ) = unit_human then
32803: LD_VAR 0 1
32807: PPUSH
32808: CALL_OW 247
32812: PUSH
32813: LD_INT 1
32815: EQUAL
32816: IFFALSE 32833
// factory := IsInUnit ( factory ) ;
32818: LD_ADDR_VAR 0 1
32822: PUSH
32823: LD_VAR 0 1
32827: PPUSH
32828: CALL_OW 310
32832: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32833: LD_VAR 0 1
32837: PPUSH
32838: CALL_OW 266
32842: PUSH
32843: LD_INT 3
32845: NONEQUAL
32846: IFFALSE 32850
// exit ;
32848: GO 32952
// if HexInfo ( x , y ) = factory then
32850: LD_VAR 0 2
32854: PPUSH
32855: LD_VAR 0 3
32859: PPUSH
32860: CALL_OW 428
32864: PUSH
32865: LD_VAR 0 1
32869: EQUAL
32870: IFFALSE 32897
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32872: LD_ADDR_EXP 91
32876: PUSH
32877: LD_EXP 91
32881: PPUSH
32882: LD_VAR 0 1
32886: PPUSH
32887: LD_INT 0
32889: PPUSH
32890: CALL_OW 1
32894: ST_TO_ADDR
32895: GO 32948
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32897: LD_ADDR_EXP 91
32901: PUSH
32902: LD_EXP 91
32906: PPUSH
32907: LD_VAR 0 1
32911: PPUSH
32912: LD_VAR 0 1
32916: PPUSH
32917: CALL_OW 255
32921: PUSH
32922: LD_VAR 0 1
32926: PUSH
32927: LD_VAR 0 2
32931: PUSH
32932: LD_VAR 0 3
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: PPUSH
32943: CALL_OW 1
32947: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32948: CALL 32957 0 0
// end ;
32952: LD_VAR 0 4
32956: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32957: LD_INT 0
32959: PPUSH
32960: PPUSH
32961: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32962: LD_STRING resetFactoryWaypoint();
32964: PPUSH
32965: CALL_OW 559
// if factoryWaypoints then
32969: LD_EXP 91
32973: IFFALSE 33099
// begin list := PrepareArray ( factoryWaypoints ) ;
32975: LD_ADDR_VAR 0 3
32979: PUSH
32980: LD_EXP 91
32984: PPUSH
32985: CALL 79476 0 1
32989: ST_TO_ADDR
// for i := 1 to list do
32990: LD_ADDR_VAR 0 2
32994: PUSH
32995: DOUBLE
32996: LD_INT 1
32998: DEC
32999: ST_TO_ADDR
33000: LD_VAR 0 3
33004: PUSH
33005: FOR_TO
33006: IFFALSE 33097
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33008: LD_STRING setFactoryWaypointXY(
33010: PUSH
33011: LD_VAR 0 3
33015: PUSH
33016: LD_VAR 0 2
33020: ARRAY
33021: PUSH
33022: LD_INT 1
33024: ARRAY
33025: STR
33026: PUSH
33027: LD_STRING ,
33029: STR
33030: PUSH
33031: LD_VAR 0 3
33035: PUSH
33036: LD_VAR 0 2
33040: ARRAY
33041: PUSH
33042: LD_INT 2
33044: ARRAY
33045: STR
33046: PUSH
33047: LD_STRING ,
33049: STR
33050: PUSH
33051: LD_VAR 0 3
33055: PUSH
33056: LD_VAR 0 2
33060: ARRAY
33061: PUSH
33062: LD_INT 3
33064: ARRAY
33065: STR
33066: PUSH
33067: LD_STRING ,
33069: STR
33070: PUSH
33071: LD_VAR 0 3
33075: PUSH
33076: LD_VAR 0 2
33080: ARRAY
33081: PUSH
33082: LD_INT 4
33084: ARRAY
33085: STR
33086: PUSH
33087: LD_STRING )
33089: STR
33090: PPUSH
33091: CALL_OW 559
33095: GO 33005
33097: POP
33098: POP
// end ; end ;
33099: LD_VAR 0 1
33103: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33104: LD_INT 0
33106: PPUSH
// if HexInfo ( x , y ) = warehouse then
33107: LD_VAR 0 2
33111: PPUSH
33112: LD_VAR 0 3
33116: PPUSH
33117: CALL_OW 428
33121: PUSH
33122: LD_VAR 0 1
33126: EQUAL
33127: IFFALSE 33154
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33129: LD_ADDR_EXP 92
33133: PUSH
33134: LD_EXP 92
33138: PPUSH
33139: LD_VAR 0 1
33143: PPUSH
33144: LD_INT 0
33146: PPUSH
33147: CALL_OW 1
33151: ST_TO_ADDR
33152: GO 33205
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33154: LD_ADDR_EXP 92
33158: PUSH
33159: LD_EXP 92
33163: PPUSH
33164: LD_VAR 0 1
33168: PPUSH
33169: LD_VAR 0 1
33173: PPUSH
33174: CALL_OW 255
33178: PUSH
33179: LD_VAR 0 1
33183: PUSH
33184: LD_VAR 0 2
33188: PUSH
33189: LD_VAR 0 3
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: PPUSH
33200: CALL_OW 1
33204: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33205: CALL 33214 0 0
// end ;
33209: LD_VAR 0 4
33213: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33214: LD_INT 0
33216: PPUSH
33217: PPUSH
33218: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33219: LD_STRING resetWarehouseGatheringPoints();
33221: PPUSH
33222: CALL_OW 559
// if warehouseGatheringPoints then
33226: LD_EXP 92
33230: IFFALSE 33356
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33232: LD_ADDR_VAR 0 3
33236: PUSH
33237: LD_EXP 92
33241: PPUSH
33242: CALL 79476 0 1
33246: ST_TO_ADDR
// for i := 1 to list do
33247: LD_ADDR_VAR 0 2
33251: PUSH
33252: DOUBLE
33253: LD_INT 1
33255: DEC
33256: ST_TO_ADDR
33257: LD_VAR 0 3
33261: PUSH
33262: FOR_TO
33263: IFFALSE 33354
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33265: LD_STRING setWarehouseGatheringPointXY(
33267: PUSH
33268: LD_VAR 0 3
33272: PUSH
33273: LD_VAR 0 2
33277: ARRAY
33278: PUSH
33279: LD_INT 1
33281: ARRAY
33282: STR
33283: PUSH
33284: LD_STRING ,
33286: STR
33287: PUSH
33288: LD_VAR 0 3
33292: PUSH
33293: LD_VAR 0 2
33297: ARRAY
33298: PUSH
33299: LD_INT 2
33301: ARRAY
33302: STR
33303: PUSH
33304: LD_STRING ,
33306: STR
33307: PUSH
33308: LD_VAR 0 3
33312: PUSH
33313: LD_VAR 0 2
33317: ARRAY
33318: PUSH
33319: LD_INT 3
33321: ARRAY
33322: STR
33323: PUSH
33324: LD_STRING ,
33326: STR
33327: PUSH
33328: LD_VAR 0 3
33332: PUSH
33333: LD_VAR 0 2
33337: ARRAY
33338: PUSH
33339: LD_INT 4
33341: ARRAY
33342: STR
33343: PUSH
33344: LD_STRING )
33346: STR
33347: PPUSH
33348: CALL_OW 559
33352: GO 33262
33354: POP
33355: POP
// end ; end ;
33356: LD_VAR 0 1
33360: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33361: LD_EXP 92
33365: IFFALSE 34050
33367: GO 33369
33369: DISABLE
33370: LD_INT 0
33372: PPUSH
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
33378: PPUSH
33379: PPUSH
33380: PPUSH
// begin enable ;
33381: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33382: LD_ADDR_VAR 0 3
33386: PUSH
33387: LD_EXP 92
33391: PPUSH
33392: CALL 79476 0 1
33396: ST_TO_ADDR
// if not list then
33397: LD_VAR 0 3
33401: NOT
33402: IFFALSE 33406
// exit ;
33404: GO 34050
// for i := 1 to list do
33406: LD_ADDR_VAR 0 1
33410: PUSH
33411: DOUBLE
33412: LD_INT 1
33414: DEC
33415: ST_TO_ADDR
33416: LD_VAR 0 3
33420: PUSH
33421: FOR_TO
33422: IFFALSE 34048
// begin depot := list [ i ] [ 2 ] ;
33424: LD_ADDR_VAR 0 8
33428: PUSH
33429: LD_VAR 0 3
33433: PUSH
33434: LD_VAR 0 1
33438: ARRAY
33439: PUSH
33440: LD_INT 2
33442: ARRAY
33443: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33444: LD_ADDR_VAR 0 5
33448: PUSH
33449: LD_VAR 0 3
33453: PUSH
33454: LD_VAR 0 1
33458: ARRAY
33459: PUSH
33460: LD_INT 1
33462: ARRAY
33463: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33464: LD_VAR 0 8
33468: PPUSH
33469: CALL_OW 301
33473: PUSH
33474: LD_VAR 0 5
33478: PUSH
33479: LD_VAR 0 8
33483: PPUSH
33484: CALL_OW 255
33488: NONEQUAL
33489: OR
33490: IFFALSE 33519
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33492: LD_ADDR_EXP 92
33496: PUSH
33497: LD_EXP 92
33501: PPUSH
33502: LD_VAR 0 8
33506: PPUSH
33507: LD_INT 0
33509: PPUSH
33510: CALL_OW 1
33514: ST_TO_ADDR
// exit ;
33515: POP
33516: POP
33517: GO 34050
// end ; x := list [ i ] [ 3 ] ;
33519: LD_ADDR_VAR 0 6
33523: PUSH
33524: LD_VAR 0 3
33528: PUSH
33529: LD_VAR 0 1
33533: ARRAY
33534: PUSH
33535: LD_INT 3
33537: ARRAY
33538: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33539: LD_ADDR_VAR 0 7
33543: PUSH
33544: LD_VAR 0 3
33548: PUSH
33549: LD_VAR 0 1
33553: ARRAY
33554: PUSH
33555: LD_INT 4
33557: ARRAY
33558: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33559: LD_ADDR_VAR 0 9
33563: PUSH
33564: LD_VAR 0 6
33568: PPUSH
33569: LD_VAR 0 7
33573: PPUSH
33574: LD_INT 16
33576: PPUSH
33577: CALL 78064 0 3
33581: ST_TO_ADDR
// if not cratesNearbyPoint then
33582: LD_VAR 0 9
33586: NOT
33587: IFFALSE 33593
// exit ;
33589: POP
33590: POP
33591: GO 34050
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33593: LD_ADDR_VAR 0 4
33597: PUSH
33598: LD_INT 22
33600: PUSH
33601: LD_VAR 0 5
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 3
33612: PUSH
33613: LD_INT 60
33615: PUSH
33616: EMPTY
33617: LIST
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 91
33625: PUSH
33626: LD_VAR 0 8
33630: PUSH
33631: LD_INT 6
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 2
33641: PUSH
33642: LD_INT 25
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 25
33654: PUSH
33655: LD_INT 16
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: PPUSH
33673: CALL_OW 69
33677: PUSH
33678: LD_VAR 0 8
33682: PPUSH
33683: CALL_OW 313
33687: PPUSH
33688: LD_INT 3
33690: PUSH
33691: LD_INT 60
33693: PUSH
33694: EMPTY
33695: LIST
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 2
33703: PUSH
33704: LD_INT 25
33706: PUSH
33707: LD_INT 2
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 25
33716: PUSH
33717: LD_INT 16
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PPUSH
33733: CALL_OW 72
33737: UNION
33738: ST_TO_ADDR
// if tmp then
33739: LD_VAR 0 4
33743: IFFALSE 33823
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33745: LD_ADDR_VAR 0 4
33749: PUSH
33750: LD_VAR 0 4
33754: PPUSH
33755: LD_INT 3
33757: PPUSH
33758: CALL 76033 0 2
33762: ST_TO_ADDR
// for j in tmp do
33763: LD_ADDR_VAR 0 2
33767: PUSH
33768: LD_VAR 0 4
33772: PUSH
33773: FOR_IN
33774: IFFALSE 33817
// begin if IsInUnit ( j ) then
33776: LD_VAR 0 2
33780: PPUSH
33781: CALL_OW 310
33785: IFFALSE 33796
// ComExit ( j ) ;
33787: LD_VAR 0 2
33791: PPUSH
33792: CALL 76116 0 1
// AddComCollect ( j , x , y ) ;
33796: LD_VAR 0 2
33800: PPUSH
33801: LD_VAR 0 6
33805: PPUSH
33806: LD_VAR 0 7
33810: PPUSH
33811: CALL_OW 177
// end ;
33815: GO 33773
33817: POP
33818: POP
// exit ;
33819: POP
33820: POP
33821: GO 34050
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33823: LD_ADDR_VAR 0 4
33827: PUSH
33828: LD_INT 22
33830: PUSH
33831: LD_VAR 0 5
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 91
33842: PUSH
33843: LD_VAR 0 8
33847: PUSH
33848: LD_INT 8
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: LD_INT 34
33861: PUSH
33862: LD_INT 12
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 34
33871: PUSH
33872: LD_INT 51
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 34
33881: PUSH
33882: LD_INT 32
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 34
33891: PUSH
33892: LD_INT 89
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: PPUSH
33911: CALL_OW 69
33915: ST_TO_ADDR
// if tmp then
33916: LD_VAR 0 4
33920: IFFALSE 34046
// begin for j in tmp do
33922: LD_ADDR_VAR 0 2
33926: PUSH
33927: LD_VAR 0 4
33931: PUSH
33932: FOR_IN
33933: IFFALSE 34044
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33935: LD_VAR 0 2
33939: PPUSH
33940: CALL_OW 262
33944: PUSH
33945: LD_INT 3
33947: EQUAL
33948: PUSH
33949: LD_VAR 0 2
33953: PPUSH
33954: CALL_OW 261
33958: PUSH
33959: LD_INT 20
33961: GREATER
33962: OR
33963: PUSH
33964: LD_VAR 0 2
33968: PPUSH
33969: CALL_OW 314
33973: NOT
33974: AND
33975: PUSH
33976: LD_VAR 0 2
33980: PPUSH
33981: CALL_OW 263
33985: PUSH
33986: LD_INT 1
33988: NONEQUAL
33989: PUSH
33990: LD_VAR 0 2
33994: PPUSH
33995: CALL_OW 311
33999: OR
34000: AND
34001: IFFALSE 34042
// begin ComCollect ( j , x , y ) ;
34003: LD_VAR 0 2
34007: PPUSH
34008: LD_VAR 0 6
34012: PPUSH
34013: LD_VAR 0 7
34017: PPUSH
34018: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34022: LD_VAR 0 2
34026: PPUSH
34027: LD_VAR 0 8
34031: PPUSH
34032: CALL_OW 172
// exit ;
34036: POP
34037: POP
34038: POP
34039: POP
34040: GO 34050
// end ;
34042: GO 33932
34044: POP
34045: POP
// end ; end ;
34046: GO 33421
34048: POP
34049: POP
// end ; end_of_file
34050: PPOPN 9
34052: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34053: LD_INT 0
34055: PPUSH
34056: PPUSH
34057: PPUSH
34058: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34059: LD_VAR 0 1
34063: PPUSH
34064: CALL_OW 264
34068: PUSH
34069: LD_INT 91
34071: EQUAL
34072: IFFALSE 34144
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34074: LD_INT 68
34076: PPUSH
34077: LD_VAR 0 1
34081: PPUSH
34082: CALL_OW 255
34086: PPUSH
34087: CALL_OW 321
34091: PUSH
34092: LD_INT 2
34094: EQUAL
34095: IFFALSE 34107
// eff := 70 else
34097: LD_ADDR_VAR 0 4
34101: PUSH
34102: LD_INT 70
34104: ST_TO_ADDR
34105: GO 34115
// eff := 30 ;
34107: LD_ADDR_VAR 0 4
34111: PUSH
34112: LD_INT 30
34114: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34115: LD_VAR 0 1
34119: PPUSH
34120: CALL_OW 250
34124: PPUSH
34125: LD_VAR 0 1
34129: PPUSH
34130: CALL_OW 251
34134: PPUSH
34135: LD_VAR 0 4
34139: PPUSH
34140: CALL_OW 495
// end ; end ;
34144: LD_VAR 0 2
34148: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34149: LD_INT 0
34151: PPUSH
// end ;
34152: LD_VAR 0 4
34156: RET
// export function SOS_Command ( cmd ) ; begin
34157: LD_INT 0
34159: PPUSH
// end ;
34160: LD_VAR 0 2
34164: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34165: LD_INT 0
34167: PPUSH
// end ;
34168: LD_VAR 0 6
34172: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34173: LD_INT 0
34175: PPUSH
34176: PPUSH
// if not vehicle or not factory then
34177: LD_VAR 0 1
34181: NOT
34182: PUSH
34183: LD_VAR 0 2
34187: NOT
34188: OR
34189: IFFALSE 34193
// exit ;
34191: GO 34424
// if factoryWaypoints >= factory then
34193: LD_EXP 91
34197: PUSH
34198: LD_VAR 0 2
34202: GREATEREQUAL
34203: IFFALSE 34424
// if factoryWaypoints [ factory ] then
34205: LD_EXP 91
34209: PUSH
34210: LD_VAR 0 2
34214: ARRAY
34215: IFFALSE 34424
// begin if GetControl ( vehicle ) = control_manual then
34217: LD_VAR 0 1
34221: PPUSH
34222: CALL_OW 263
34226: PUSH
34227: LD_INT 1
34229: EQUAL
34230: IFFALSE 34311
// begin driver := IsDrivenBy ( vehicle ) ;
34232: LD_ADDR_VAR 0 4
34236: PUSH
34237: LD_VAR 0 1
34241: PPUSH
34242: CALL_OW 311
34246: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34247: LD_VAR 0 4
34251: PPUSH
34252: LD_EXP 91
34256: PUSH
34257: LD_VAR 0 2
34261: ARRAY
34262: PUSH
34263: LD_INT 3
34265: ARRAY
34266: PPUSH
34267: LD_EXP 91
34271: PUSH
34272: LD_VAR 0 2
34276: ARRAY
34277: PUSH
34278: LD_INT 4
34280: ARRAY
34281: PPUSH
34282: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34286: LD_VAR 0 4
34290: PPUSH
34291: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34295: LD_VAR 0 4
34299: PPUSH
34300: LD_VAR 0 2
34304: PPUSH
34305: CALL_OW 180
// end else
34309: GO 34424
// if GetControl ( vehicle ) = control_remote then
34311: LD_VAR 0 1
34315: PPUSH
34316: CALL_OW 263
34320: PUSH
34321: LD_INT 2
34323: EQUAL
34324: IFFALSE 34385
// begin wait ( 0 0$2 ) ;
34326: LD_INT 70
34328: PPUSH
34329: CALL_OW 67
// if Connect ( vehicle ) then
34333: LD_VAR 0 1
34337: PPUSH
34338: CALL 46448 0 1
34342: IFFALSE 34383
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34344: LD_VAR 0 1
34348: PPUSH
34349: LD_EXP 91
34353: PUSH
34354: LD_VAR 0 2
34358: ARRAY
34359: PUSH
34360: LD_INT 3
34362: ARRAY
34363: PPUSH
34364: LD_EXP 91
34368: PUSH
34369: LD_VAR 0 2
34373: ARRAY
34374: PUSH
34375: LD_INT 4
34377: ARRAY
34378: PPUSH
34379: CALL_OW 171
// end else
34383: GO 34424
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34385: LD_VAR 0 1
34389: PPUSH
34390: LD_EXP 91
34394: PUSH
34395: LD_VAR 0 2
34399: ARRAY
34400: PUSH
34401: LD_INT 3
34403: ARRAY
34404: PPUSH
34405: LD_EXP 91
34409: PUSH
34410: LD_VAR 0 2
34414: ARRAY
34415: PUSH
34416: LD_INT 4
34418: ARRAY
34419: PPUSH
34420: CALL_OW 171
// end ; end ;
34424: LD_VAR 0 3
34428: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34429: LD_INT 0
34431: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34432: LD_VAR 0 1
34436: PUSH
34437: LD_INT 250
34439: EQUAL
34440: PUSH
34441: LD_VAR 0 2
34445: PPUSH
34446: CALL_OW 264
34450: PUSH
34451: LD_INT 81
34453: EQUAL
34454: AND
34455: IFFALSE 34476
// MinerPlaceMine ( unit , x , y ) ;
34457: LD_VAR 0 2
34461: PPUSH
34462: LD_VAR 0 4
34466: PPUSH
34467: LD_VAR 0 5
34471: PPUSH
34472: CALL 36861 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34476: LD_VAR 0 1
34480: PUSH
34481: LD_INT 251
34483: EQUAL
34484: PUSH
34485: LD_VAR 0 2
34489: PPUSH
34490: CALL_OW 264
34494: PUSH
34495: LD_INT 81
34497: EQUAL
34498: AND
34499: IFFALSE 34520
// MinerDetonateMine ( unit , x , y ) ;
34501: LD_VAR 0 2
34505: PPUSH
34506: LD_VAR 0 4
34510: PPUSH
34511: LD_VAR 0 5
34515: PPUSH
34516: CALL 37136 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34520: LD_VAR 0 1
34524: PUSH
34525: LD_INT 252
34527: EQUAL
34528: PUSH
34529: LD_VAR 0 2
34533: PPUSH
34534: CALL_OW 264
34538: PUSH
34539: LD_INT 81
34541: EQUAL
34542: AND
34543: IFFALSE 34564
// MinerCreateMinefield ( unit , x , y ) ;
34545: LD_VAR 0 2
34549: PPUSH
34550: LD_VAR 0 4
34554: PPUSH
34555: LD_VAR 0 5
34559: PPUSH
34560: CALL 37553 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34564: LD_VAR 0 1
34568: PUSH
34569: LD_INT 253
34571: EQUAL
34572: PUSH
34573: LD_VAR 0 2
34577: PPUSH
34578: CALL_OW 257
34582: PUSH
34583: LD_INT 5
34585: EQUAL
34586: AND
34587: IFFALSE 34608
// ComBinocular ( unit , x , y ) ;
34589: LD_VAR 0 2
34593: PPUSH
34594: LD_VAR 0 4
34598: PPUSH
34599: LD_VAR 0 5
34603: PPUSH
34604: CALL 37922 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34608: LD_VAR 0 1
34612: PUSH
34613: LD_INT 254
34615: EQUAL
34616: PUSH
34617: LD_VAR 0 2
34621: PPUSH
34622: CALL_OW 264
34626: PUSH
34627: LD_INT 99
34629: EQUAL
34630: AND
34631: PUSH
34632: LD_VAR 0 3
34636: PPUSH
34637: CALL_OW 263
34641: PUSH
34642: LD_INT 3
34644: EQUAL
34645: AND
34646: IFFALSE 34662
// HackDestroyVehicle ( unit , selectedUnit ) ;
34648: LD_VAR 0 2
34652: PPUSH
34653: LD_VAR 0 3
34657: PPUSH
34658: CALL 36225 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34662: LD_VAR 0 1
34666: PUSH
34667: LD_INT 255
34669: EQUAL
34670: PUSH
34671: LD_VAR 0 2
34675: PPUSH
34676: CALL_OW 264
34680: PUSH
34681: LD_INT 14
34683: PUSH
34684: LD_INT 53
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: IN
34691: AND
34692: PUSH
34693: LD_VAR 0 4
34697: PPUSH
34698: LD_VAR 0 5
34702: PPUSH
34703: CALL_OW 488
34707: AND
34708: IFFALSE 34732
// CutTreeXYR ( unit , x , y , 12 ) ;
34710: LD_VAR 0 2
34714: PPUSH
34715: LD_VAR 0 4
34719: PPUSH
34720: LD_VAR 0 5
34724: PPUSH
34725: LD_INT 12
34727: PPUSH
34728: CALL 34795 0 4
// if cmd = 256 then
34732: LD_VAR 0 1
34736: PUSH
34737: LD_INT 256
34739: EQUAL
34740: IFFALSE 34761
// SetFactoryWaypoint ( unit , x , y ) ;
34742: LD_VAR 0 2
34746: PPUSH
34747: LD_VAR 0 4
34751: PPUSH
34752: LD_VAR 0 5
34756: PPUSH
34757: CALL 32742 0 3
// if cmd = 257 then
34761: LD_VAR 0 1
34765: PUSH
34766: LD_INT 257
34768: EQUAL
34769: IFFALSE 34790
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34771: LD_VAR 0 2
34775: PPUSH
34776: LD_VAR 0 4
34780: PPUSH
34781: LD_VAR 0 5
34785: PPUSH
34786: CALL 33104 0 3
// end ;
34790: LD_VAR 0 6
34794: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34795: LD_INT 0
34797: PPUSH
34798: PPUSH
34799: PPUSH
34800: PPUSH
34801: PPUSH
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34806: LD_VAR 0 1
34810: NOT
34811: PUSH
34812: LD_VAR 0 2
34816: PPUSH
34817: LD_VAR 0 3
34821: PPUSH
34822: CALL_OW 488
34826: NOT
34827: OR
34828: PUSH
34829: LD_VAR 0 4
34833: NOT
34834: OR
34835: IFFALSE 34839
// exit ;
34837: GO 35179
// list := [ ] ;
34839: LD_ADDR_VAR 0 13
34843: PUSH
34844: EMPTY
34845: ST_TO_ADDR
// if x - r < 0 then
34846: LD_VAR 0 2
34850: PUSH
34851: LD_VAR 0 4
34855: MINUS
34856: PUSH
34857: LD_INT 0
34859: LESS
34860: IFFALSE 34872
// min_x := 0 else
34862: LD_ADDR_VAR 0 7
34866: PUSH
34867: LD_INT 0
34869: ST_TO_ADDR
34870: GO 34888
// min_x := x - r ;
34872: LD_ADDR_VAR 0 7
34876: PUSH
34877: LD_VAR 0 2
34881: PUSH
34882: LD_VAR 0 4
34886: MINUS
34887: ST_TO_ADDR
// if y - r < 0 then
34888: LD_VAR 0 3
34892: PUSH
34893: LD_VAR 0 4
34897: MINUS
34898: PUSH
34899: LD_INT 0
34901: LESS
34902: IFFALSE 34914
// min_y := 0 else
34904: LD_ADDR_VAR 0 8
34908: PUSH
34909: LD_INT 0
34911: ST_TO_ADDR
34912: GO 34930
// min_y := y - r ;
34914: LD_ADDR_VAR 0 8
34918: PUSH
34919: LD_VAR 0 3
34923: PUSH
34924: LD_VAR 0 4
34928: MINUS
34929: ST_TO_ADDR
// max_x := x + r ;
34930: LD_ADDR_VAR 0 9
34934: PUSH
34935: LD_VAR 0 2
34939: PUSH
34940: LD_VAR 0 4
34944: PLUS
34945: ST_TO_ADDR
// max_y := y + r ;
34946: LD_ADDR_VAR 0 10
34950: PUSH
34951: LD_VAR 0 3
34955: PUSH
34956: LD_VAR 0 4
34960: PLUS
34961: ST_TO_ADDR
// for _x = min_x to max_x do
34962: LD_ADDR_VAR 0 11
34966: PUSH
34967: DOUBLE
34968: LD_VAR 0 7
34972: DEC
34973: ST_TO_ADDR
34974: LD_VAR 0 9
34978: PUSH
34979: FOR_TO
34980: IFFALSE 35097
// for _y = min_y to max_y do
34982: LD_ADDR_VAR 0 12
34986: PUSH
34987: DOUBLE
34988: LD_VAR 0 8
34992: DEC
34993: ST_TO_ADDR
34994: LD_VAR 0 10
34998: PUSH
34999: FOR_TO
35000: IFFALSE 35093
// begin if not ValidHex ( _x , _y ) then
35002: LD_VAR 0 11
35006: PPUSH
35007: LD_VAR 0 12
35011: PPUSH
35012: CALL_OW 488
35016: NOT
35017: IFFALSE 35021
// continue ;
35019: GO 34999
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35021: LD_VAR 0 11
35025: PPUSH
35026: LD_VAR 0 12
35030: PPUSH
35031: CALL_OW 351
35035: PUSH
35036: LD_VAR 0 11
35040: PPUSH
35041: LD_VAR 0 12
35045: PPUSH
35046: CALL_OW 554
35050: AND
35051: IFFALSE 35091
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35053: LD_ADDR_VAR 0 13
35057: PUSH
35058: LD_VAR 0 13
35062: PPUSH
35063: LD_VAR 0 13
35067: PUSH
35068: LD_INT 1
35070: PLUS
35071: PPUSH
35072: LD_VAR 0 11
35076: PUSH
35077: LD_VAR 0 12
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PPUSH
35086: CALL_OW 2
35090: ST_TO_ADDR
// end ;
35091: GO 34999
35093: POP
35094: POP
35095: GO 34979
35097: POP
35098: POP
// if not list then
35099: LD_VAR 0 13
35103: NOT
35104: IFFALSE 35108
// exit ;
35106: GO 35179
// for i in list do
35108: LD_ADDR_VAR 0 6
35112: PUSH
35113: LD_VAR 0 13
35117: PUSH
35118: FOR_IN
35119: IFFALSE 35177
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35121: LD_VAR 0 1
35125: PPUSH
35126: LD_STRING M
35128: PUSH
35129: LD_VAR 0 6
35133: PUSH
35134: LD_INT 1
35136: ARRAY
35137: PUSH
35138: LD_VAR 0 6
35142: PUSH
35143: LD_INT 2
35145: ARRAY
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: PUSH
35168: EMPTY
35169: LIST
35170: PPUSH
35171: CALL_OW 447
35175: GO 35118
35177: POP
35178: POP
// end ;
35179: LD_VAR 0 5
35183: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35184: LD_EXP 94
35188: NOT
35189: IFFALSE 35239
35191: GO 35193
35193: DISABLE
// begin initHack := true ;
35194: LD_ADDR_EXP 94
35198: PUSH
35199: LD_INT 1
35201: ST_TO_ADDR
// hackTanks := [ ] ;
35202: LD_ADDR_EXP 95
35206: PUSH
35207: EMPTY
35208: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35209: LD_ADDR_EXP 96
35213: PUSH
35214: EMPTY
35215: ST_TO_ADDR
// hackLimit := 3 ;
35216: LD_ADDR_EXP 97
35220: PUSH
35221: LD_INT 3
35223: ST_TO_ADDR
// hackDist := 12 ;
35224: LD_ADDR_EXP 98
35228: PUSH
35229: LD_INT 12
35231: ST_TO_ADDR
// hackCounter := [ ] ;
35232: LD_ADDR_EXP 99
35236: PUSH
35237: EMPTY
35238: ST_TO_ADDR
// end ;
35239: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35240: LD_EXP 94
35244: PUSH
35245: LD_INT 34
35247: PUSH
35248: LD_INT 99
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PPUSH
35255: CALL_OW 69
35259: AND
35260: IFFALSE 35513
35262: GO 35264
35264: DISABLE
35265: LD_INT 0
35267: PPUSH
35268: PPUSH
// begin enable ;
35269: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35270: LD_ADDR_VAR 0 1
35274: PUSH
35275: LD_INT 34
35277: PUSH
35278: LD_INT 99
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PPUSH
35285: CALL_OW 69
35289: PUSH
35290: FOR_IN
35291: IFFALSE 35511
// begin if not i in hackTanks then
35293: LD_VAR 0 1
35297: PUSH
35298: LD_EXP 95
35302: IN
35303: NOT
35304: IFFALSE 35387
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35306: LD_ADDR_EXP 95
35310: PUSH
35311: LD_EXP 95
35315: PPUSH
35316: LD_EXP 95
35320: PUSH
35321: LD_INT 1
35323: PLUS
35324: PPUSH
35325: LD_VAR 0 1
35329: PPUSH
35330: CALL_OW 1
35334: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35335: LD_ADDR_EXP 96
35339: PUSH
35340: LD_EXP 96
35344: PPUSH
35345: LD_EXP 96
35349: PUSH
35350: LD_INT 1
35352: PLUS
35353: PPUSH
35354: EMPTY
35355: PPUSH
35356: CALL_OW 1
35360: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35361: LD_ADDR_EXP 99
35365: PUSH
35366: LD_EXP 99
35370: PPUSH
35371: LD_EXP 99
35375: PUSH
35376: LD_INT 1
35378: PLUS
35379: PPUSH
35380: EMPTY
35381: PPUSH
35382: CALL_OW 1
35386: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35387: LD_VAR 0 1
35391: PPUSH
35392: CALL_OW 302
35396: NOT
35397: IFFALSE 35410
// begin HackUnlinkAll ( i ) ;
35399: LD_VAR 0 1
35403: PPUSH
35404: CALL 35516 0 1
// continue ;
35408: GO 35290
// end ; HackCheckCapturedStatus ( i ) ;
35410: LD_VAR 0 1
35414: PPUSH
35415: CALL 35959 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35419: LD_ADDR_VAR 0 2
35423: PUSH
35424: LD_INT 81
35426: PUSH
35427: LD_VAR 0 1
35431: PPUSH
35432: CALL_OW 255
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 33
35443: PUSH
35444: LD_INT 3
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 91
35453: PUSH
35454: LD_VAR 0 1
35458: PUSH
35459: LD_EXP 98
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 50
35471: PUSH
35472: EMPTY
35473: LIST
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: PPUSH
35481: CALL_OW 69
35485: ST_TO_ADDR
// if not tmp then
35486: LD_VAR 0 2
35490: NOT
35491: IFFALSE 35495
// continue ;
35493: GO 35290
// HackLink ( i , tmp ) ;
35495: LD_VAR 0 1
35499: PPUSH
35500: LD_VAR 0 2
35504: PPUSH
35505: CALL 35652 0 2
// end ;
35509: GO 35290
35511: POP
35512: POP
// end ;
35513: PPOPN 2
35515: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35516: LD_INT 0
35518: PPUSH
35519: PPUSH
35520: PPUSH
// if not hack in hackTanks then
35521: LD_VAR 0 1
35525: PUSH
35526: LD_EXP 95
35530: IN
35531: NOT
35532: IFFALSE 35536
// exit ;
35534: GO 35647
// index := GetElementIndex ( hackTanks , hack ) ;
35536: LD_ADDR_VAR 0 4
35540: PUSH
35541: LD_EXP 95
35545: PPUSH
35546: LD_VAR 0 1
35550: PPUSH
35551: CALL 43264 0 2
35555: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35556: LD_EXP 96
35560: PUSH
35561: LD_VAR 0 4
35565: ARRAY
35566: IFFALSE 35647
// begin for i in hackTanksCaptured [ index ] do
35568: LD_ADDR_VAR 0 3
35572: PUSH
35573: LD_EXP 96
35577: PUSH
35578: LD_VAR 0 4
35582: ARRAY
35583: PUSH
35584: FOR_IN
35585: IFFALSE 35611
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35587: LD_VAR 0 3
35591: PUSH
35592: LD_INT 1
35594: ARRAY
35595: PPUSH
35596: LD_VAR 0 3
35600: PUSH
35601: LD_INT 2
35603: ARRAY
35604: PPUSH
35605: CALL_OW 235
35609: GO 35584
35611: POP
35612: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35613: LD_ADDR_EXP 96
35617: PUSH
35618: LD_EXP 96
35622: PPUSH
35623: LD_VAR 0 4
35627: PPUSH
35628: EMPTY
35629: PPUSH
35630: CALL_OW 1
35634: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35635: LD_VAR 0 1
35639: PPUSH
35640: LD_INT 0
35642: PPUSH
35643: CALL_OW 505
// end ; end ;
35647: LD_VAR 0 2
35651: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35652: LD_INT 0
35654: PPUSH
35655: PPUSH
35656: PPUSH
// if not hack in hackTanks or not vehicles then
35657: LD_VAR 0 1
35661: PUSH
35662: LD_EXP 95
35666: IN
35667: NOT
35668: PUSH
35669: LD_VAR 0 2
35673: NOT
35674: OR
35675: IFFALSE 35679
// exit ;
35677: GO 35954
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35679: LD_ADDR_VAR 0 2
35683: PUSH
35684: LD_VAR 0 1
35688: PPUSH
35689: LD_VAR 0 2
35693: PPUSH
35694: LD_INT 1
35696: PPUSH
35697: LD_INT 1
35699: PPUSH
35700: CALL 43914 0 4
35704: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35705: LD_ADDR_VAR 0 5
35709: PUSH
35710: LD_EXP 95
35714: PPUSH
35715: LD_VAR 0 1
35719: PPUSH
35720: CALL 43264 0 2
35724: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35725: LD_EXP 96
35729: PUSH
35730: LD_VAR 0 5
35734: ARRAY
35735: PUSH
35736: LD_EXP 97
35740: LESS
35741: IFFALSE 35930
// begin for i := 1 to vehicles do
35743: LD_ADDR_VAR 0 4
35747: PUSH
35748: DOUBLE
35749: LD_INT 1
35751: DEC
35752: ST_TO_ADDR
35753: LD_VAR 0 2
35757: PUSH
35758: FOR_TO
35759: IFFALSE 35928
// begin if hackTanksCaptured [ index ] = hackLimit then
35761: LD_EXP 96
35765: PUSH
35766: LD_VAR 0 5
35770: ARRAY
35771: PUSH
35772: LD_EXP 97
35776: EQUAL
35777: IFFALSE 35781
// break ;
35779: GO 35928
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35781: LD_ADDR_EXP 99
35785: PUSH
35786: LD_EXP 99
35790: PPUSH
35791: LD_VAR 0 5
35795: PPUSH
35796: LD_EXP 99
35800: PUSH
35801: LD_VAR 0 5
35805: ARRAY
35806: PUSH
35807: LD_INT 1
35809: PLUS
35810: PPUSH
35811: CALL_OW 1
35815: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35816: LD_ADDR_EXP 96
35820: PUSH
35821: LD_EXP 96
35825: PPUSH
35826: LD_VAR 0 5
35830: PUSH
35831: LD_EXP 96
35835: PUSH
35836: LD_VAR 0 5
35840: ARRAY
35841: PUSH
35842: LD_INT 1
35844: PLUS
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PPUSH
35850: LD_VAR 0 2
35854: PUSH
35855: LD_VAR 0 4
35859: ARRAY
35860: PUSH
35861: LD_VAR 0 2
35865: PUSH
35866: LD_VAR 0 4
35870: ARRAY
35871: PPUSH
35872: CALL_OW 255
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PPUSH
35881: CALL 43479 0 3
35885: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35886: LD_VAR 0 2
35890: PUSH
35891: LD_VAR 0 4
35895: ARRAY
35896: PPUSH
35897: LD_VAR 0 1
35901: PPUSH
35902: CALL_OW 255
35906: PPUSH
35907: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35911: LD_VAR 0 2
35915: PUSH
35916: LD_VAR 0 4
35920: ARRAY
35921: PPUSH
35922: CALL_OW 141
// end ;
35926: GO 35758
35928: POP
35929: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35930: LD_VAR 0 1
35934: PPUSH
35935: LD_EXP 96
35939: PUSH
35940: LD_VAR 0 5
35944: ARRAY
35945: PUSH
35946: LD_INT 0
35948: PLUS
35949: PPUSH
35950: CALL_OW 505
// end ;
35954: LD_VAR 0 3
35958: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35959: LD_INT 0
35961: PPUSH
35962: PPUSH
35963: PPUSH
35964: PPUSH
// if not hack in hackTanks then
35965: LD_VAR 0 1
35969: PUSH
35970: LD_EXP 95
35974: IN
35975: NOT
35976: IFFALSE 35980
// exit ;
35978: GO 36220
// index := GetElementIndex ( hackTanks , hack ) ;
35980: LD_ADDR_VAR 0 4
35984: PUSH
35985: LD_EXP 95
35989: PPUSH
35990: LD_VAR 0 1
35994: PPUSH
35995: CALL 43264 0 2
35999: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36000: LD_ADDR_VAR 0 3
36004: PUSH
36005: DOUBLE
36006: LD_EXP 96
36010: PUSH
36011: LD_VAR 0 4
36015: ARRAY
36016: INC
36017: ST_TO_ADDR
36018: LD_INT 1
36020: PUSH
36021: FOR_DOWNTO
36022: IFFALSE 36194
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36024: LD_ADDR_VAR 0 5
36028: PUSH
36029: LD_EXP 96
36033: PUSH
36034: LD_VAR 0 4
36038: ARRAY
36039: PUSH
36040: LD_VAR 0 3
36044: ARRAY
36045: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36046: LD_VAR 0 5
36050: PUSH
36051: LD_INT 1
36053: ARRAY
36054: PPUSH
36055: CALL_OW 302
36059: NOT
36060: PUSH
36061: LD_VAR 0 5
36065: PUSH
36066: LD_INT 1
36068: ARRAY
36069: PPUSH
36070: CALL_OW 255
36074: PUSH
36075: LD_VAR 0 1
36079: PPUSH
36080: CALL_OW 255
36084: NONEQUAL
36085: OR
36086: IFFALSE 36192
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36088: LD_VAR 0 5
36092: PUSH
36093: LD_INT 1
36095: ARRAY
36096: PPUSH
36097: CALL_OW 305
36101: PUSH
36102: LD_VAR 0 5
36106: PUSH
36107: LD_INT 1
36109: ARRAY
36110: PPUSH
36111: CALL_OW 255
36115: PUSH
36116: LD_VAR 0 1
36120: PPUSH
36121: CALL_OW 255
36125: EQUAL
36126: AND
36127: IFFALSE 36151
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36129: LD_VAR 0 5
36133: PUSH
36134: LD_INT 1
36136: ARRAY
36137: PPUSH
36138: LD_VAR 0 5
36142: PUSH
36143: LD_INT 2
36145: ARRAY
36146: PPUSH
36147: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36151: LD_ADDR_EXP 96
36155: PUSH
36156: LD_EXP 96
36160: PPUSH
36161: LD_VAR 0 4
36165: PPUSH
36166: LD_EXP 96
36170: PUSH
36171: LD_VAR 0 4
36175: ARRAY
36176: PPUSH
36177: LD_VAR 0 3
36181: PPUSH
36182: CALL_OW 3
36186: PPUSH
36187: CALL_OW 1
36191: ST_TO_ADDR
// end ; end ;
36192: GO 36021
36194: POP
36195: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36196: LD_VAR 0 1
36200: PPUSH
36201: LD_EXP 96
36205: PUSH
36206: LD_VAR 0 4
36210: ARRAY
36211: PUSH
36212: LD_INT 0
36214: PLUS
36215: PPUSH
36216: CALL_OW 505
// end ;
36220: LD_VAR 0 2
36224: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36225: LD_INT 0
36227: PPUSH
36228: PPUSH
36229: PPUSH
36230: PPUSH
// if not hack in hackTanks then
36231: LD_VAR 0 1
36235: PUSH
36236: LD_EXP 95
36240: IN
36241: NOT
36242: IFFALSE 36246
// exit ;
36244: GO 36331
// index := GetElementIndex ( hackTanks , hack ) ;
36246: LD_ADDR_VAR 0 5
36250: PUSH
36251: LD_EXP 95
36255: PPUSH
36256: LD_VAR 0 1
36260: PPUSH
36261: CALL 43264 0 2
36265: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36266: LD_ADDR_VAR 0 4
36270: PUSH
36271: DOUBLE
36272: LD_INT 1
36274: DEC
36275: ST_TO_ADDR
36276: LD_EXP 96
36280: PUSH
36281: LD_VAR 0 5
36285: ARRAY
36286: PUSH
36287: FOR_TO
36288: IFFALSE 36329
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36290: LD_EXP 96
36294: PUSH
36295: LD_VAR 0 5
36299: ARRAY
36300: PUSH
36301: LD_VAR 0 4
36305: ARRAY
36306: PUSH
36307: LD_INT 1
36309: ARRAY
36310: PUSH
36311: LD_VAR 0 2
36315: EQUAL
36316: IFFALSE 36327
// KillUnit ( vehicle ) ;
36318: LD_VAR 0 2
36322: PPUSH
36323: CALL_OW 66
36327: GO 36287
36329: POP
36330: POP
// end ;
36331: LD_VAR 0 3
36335: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36336: LD_EXP 100
36340: NOT
36341: IFFALSE 36376
36343: GO 36345
36345: DISABLE
// begin initMiner := true ;
36346: LD_ADDR_EXP 100
36350: PUSH
36351: LD_INT 1
36353: ST_TO_ADDR
// minersList := [ ] ;
36354: LD_ADDR_EXP 101
36358: PUSH
36359: EMPTY
36360: ST_TO_ADDR
// minerMinesList := [ ] ;
36361: LD_ADDR_EXP 102
36365: PUSH
36366: EMPTY
36367: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36368: LD_ADDR_EXP 103
36372: PUSH
36373: LD_INT 5
36375: ST_TO_ADDR
// end ;
36376: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36377: LD_EXP 100
36381: PUSH
36382: LD_INT 34
36384: PUSH
36385: LD_INT 81
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PPUSH
36392: CALL_OW 69
36396: AND
36397: IFFALSE 36858
36399: GO 36401
36401: DISABLE
36402: LD_INT 0
36404: PPUSH
36405: PPUSH
36406: PPUSH
36407: PPUSH
// begin enable ;
36408: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36409: LD_ADDR_VAR 0 1
36413: PUSH
36414: LD_INT 34
36416: PUSH
36417: LD_INT 81
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PPUSH
36424: CALL_OW 69
36428: PUSH
36429: FOR_IN
36430: IFFALSE 36502
// begin if not i in minersList then
36432: LD_VAR 0 1
36436: PUSH
36437: LD_EXP 101
36441: IN
36442: NOT
36443: IFFALSE 36500
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36445: LD_ADDR_EXP 101
36449: PUSH
36450: LD_EXP 101
36454: PPUSH
36455: LD_EXP 101
36459: PUSH
36460: LD_INT 1
36462: PLUS
36463: PPUSH
36464: LD_VAR 0 1
36468: PPUSH
36469: CALL_OW 1
36473: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36474: LD_ADDR_EXP 102
36478: PUSH
36479: LD_EXP 102
36483: PPUSH
36484: LD_EXP 102
36488: PUSH
36489: LD_INT 1
36491: PLUS
36492: PPUSH
36493: EMPTY
36494: PPUSH
36495: CALL_OW 1
36499: ST_TO_ADDR
// end end ;
36500: GO 36429
36502: POP
36503: POP
// for i := minerMinesList downto 1 do
36504: LD_ADDR_VAR 0 1
36508: PUSH
36509: DOUBLE
36510: LD_EXP 102
36514: INC
36515: ST_TO_ADDR
36516: LD_INT 1
36518: PUSH
36519: FOR_DOWNTO
36520: IFFALSE 36856
// begin if IsLive ( minersList [ i ] ) then
36522: LD_EXP 101
36526: PUSH
36527: LD_VAR 0 1
36531: ARRAY
36532: PPUSH
36533: CALL_OW 300
36537: IFFALSE 36565
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36539: LD_EXP 101
36543: PUSH
36544: LD_VAR 0 1
36548: ARRAY
36549: PPUSH
36550: LD_EXP 102
36554: PUSH
36555: LD_VAR 0 1
36559: ARRAY
36560: PPUSH
36561: CALL_OW 505
// if not minerMinesList [ i ] then
36565: LD_EXP 102
36569: PUSH
36570: LD_VAR 0 1
36574: ARRAY
36575: NOT
36576: IFFALSE 36580
// continue ;
36578: GO 36519
// for j := minerMinesList [ i ] downto 1 do
36580: LD_ADDR_VAR 0 2
36584: PUSH
36585: DOUBLE
36586: LD_EXP 102
36590: PUSH
36591: LD_VAR 0 1
36595: ARRAY
36596: INC
36597: ST_TO_ADDR
36598: LD_INT 1
36600: PUSH
36601: FOR_DOWNTO
36602: IFFALSE 36852
// begin side := GetSide ( minersList [ i ] ) ;
36604: LD_ADDR_VAR 0 3
36608: PUSH
36609: LD_EXP 101
36613: PUSH
36614: LD_VAR 0 1
36618: ARRAY
36619: PPUSH
36620: CALL_OW 255
36624: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36625: LD_ADDR_VAR 0 4
36629: PUSH
36630: LD_EXP 102
36634: PUSH
36635: LD_VAR 0 1
36639: ARRAY
36640: PUSH
36641: LD_VAR 0 2
36645: ARRAY
36646: PUSH
36647: LD_INT 1
36649: ARRAY
36650: PPUSH
36651: LD_EXP 102
36655: PUSH
36656: LD_VAR 0 1
36660: ARRAY
36661: PUSH
36662: LD_VAR 0 2
36666: ARRAY
36667: PUSH
36668: LD_INT 2
36670: ARRAY
36671: PPUSH
36672: CALL_OW 428
36676: ST_TO_ADDR
// if not tmp then
36677: LD_VAR 0 4
36681: NOT
36682: IFFALSE 36686
// continue ;
36684: GO 36601
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36686: LD_VAR 0 4
36690: PUSH
36691: LD_INT 81
36693: PUSH
36694: LD_VAR 0 3
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PPUSH
36703: CALL_OW 69
36707: IN
36708: PUSH
36709: LD_EXP 102
36713: PUSH
36714: LD_VAR 0 1
36718: ARRAY
36719: PUSH
36720: LD_VAR 0 2
36724: ARRAY
36725: PUSH
36726: LD_INT 1
36728: ARRAY
36729: PPUSH
36730: LD_EXP 102
36734: PUSH
36735: LD_VAR 0 1
36739: ARRAY
36740: PUSH
36741: LD_VAR 0 2
36745: ARRAY
36746: PUSH
36747: LD_INT 2
36749: ARRAY
36750: PPUSH
36751: CALL_OW 458
36755: AND
36756: IFFALSE 36850
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36758: LD_EXP 102
36762: PUSH
36763: LD_VAR 0 1
36767: ARRAY
36768: PUSH
36769: LD_VAR 0 2
36773: ARRAY
36774: PUSH
36775: LD_INT 1
36777: ARRAY
36778: PPUSH
36779: LD_EXP 102
36783: PUSH
36784: LD_VAR 0 1
36788: ARRAY
36789: PUSH
36790: LD_VAR 0 2
36794: ARRAY
36795: PUSH
36796: LD_INT 2
36798: ARRAY
36799: PPUSH
36800: LD_VAR 0 3
36804: PPUSH
36805: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36809: LD_ADDR_EXP 102
36813: PUSH
36814: LD_EXP 102
36818: PPUSH
36819: LD_VAR 0 1
36823: PPUSH
36824: LD_EXP 102
36828: PUSH
36829: LD_VAR 0 1
36833: ARRAY
36834: PPUSH
36835: LD_VAR 0 2
36839: PPUSH
36840: CALL_OW 3
36844: PPUSH
36845: CALL_OW 1
36849: ST_TO_ADDR
// end ; end ;
36850: GO 36601
36852: POP
36853: POP
// end ;
36854: GO 36519
36856: POP
36857: POP
// end ;
36858: PPOPN 4
36860: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36861: LD_INT 0
36863: PPUSH
36864: PPUSH
// result := false ;
36865: LD_ADDR_VAR 0 4
36869: PUSH
36870: LD_INT 0
36872: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL_OW 264
36882: PUSH
36883: LD_INT 81
36885: EQUAL
36886: NOT
36887: IFFALSE 36891
// exit ;
36889: GO 37131
// index := GetElementIndex ( minersList , unit ) ;
36891: LD_ADDR_VAR 0 5
36895: PUSH
36896: LD_EXP 101
36900: PPUSH
36901: LD_VAR 0 1
36905: PPUSH
36906: CALL 43264 0 2
36910: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36911: LD_EXP 102
36915: PUSH
36916: LD_VAR 0 5
36920: ARRAY
36921: PUSH
36922: LD_EXP 103
36926: GREATEREQUAL
36927: IFFALSE 36931
// exit ;
36929: GO 37131
// ComMoveXY ( unit , x , y ) ;
36931: LD_VAR 0 1
36935: PPUSH
36936: LD_VAR 0 2
36940: PPUSH
36941: LD_VAR 0 3
36945: PPUSH
36946: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36950: LD_INT 35
36952: PPUSH
36953: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36957: LD_VAR 0 1
36961: PPUSH
36962: LD_VAR 0 2
36966: PPUSH
36967: LD_VAR 0 3
36971: PPUSH
36972: CALL 74527 0 3
36976: NOT
36977: PUSH
36978: LD_VAR 0 1
36982: PPUSH
36983: CALL_OW 314
36987: AND
36988: IFFALSE 36992
// exit ;
36990: GO 37131
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36992: LD_VAR 0 2
36996: PPUSH
36997: LD_VAR 0 3
37001: PPUSH
37002: CALL_OW 428
37006: PUSH
37007: LD_VAR 0 1
37011: EQUAL
37012: PUSH
37013: LD_VAR 0 1
37017: PPUSH
37018: CALL_OW 314
37022: NOT
37023: AND
37024: IFFALSE 36950
// PlaySoundXY ( x , y , PlantMine ) ;
37026: LD_VAR 0 2
37030: PPUSH
37031: LD_VAR 0 3
37035: PPUSH
37036: LD_STRING PlantMine
37038: PPUSH
37039: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37043: LD_VAR 0 2
37047: PPUSH
37048: LD_VAR 0 3
37052: PPUSH
37053: LD_VAR 0 1
37057: PPUSH
37058: CALL_OW 255
37062: PPUSH
37063: LD_INT 0
37065: PPUSH
37066: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37070: LD_ADDR_EXP 102
37074: PUSH
37075: LD_EXP 102
37079: PPUSH
37080: LD_VAR 0 5
37084: PUSH
37085: LD_EXP 102
37089: PUSH
37090: LD_VAR 0 5
37094: ARRAY
37095: PUSH
37096: LD_INT 1
37098: PLUS
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PPUSH
37104: LD_VAR 0 2
37108: PUSH
37109: LD_VAR 0 3
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PPUSH
37118: CALL 43479 0 3
37122: ST_TO_ADDR
// result := true ;
37123: LD_ADDR_VAR 0 4
37127: PUSH
37128: LD_INT 1
37130: ST_TO_ADDR
// end ;
37131: LD_VAR 0 4
37135: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37136: LD_INT 0
37138: PPUSH
37139: PPUSH
37140: PPUSH
// if not unit in minersList then
37141: LD_VAR 0 1
37145: PUSH
37146: LD_EXP 101
37150: IN
37151: NOT
37152: IFFALSE 37156
// exit ;
37154: GO 37548
// index := GetElementIndex ( minersList , unit ) ;
37156: LD_ADDR_VAR 0 6
37160: PUSH
37161: LD_EXP 101
37165: PPUSH
37166: LD_VAR 0 1
37170: PPUSH
37171: CALL 43264 0 2
37175: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37176: LD_ADDR_VAR 0 5
37180: PUSH
37181: DOUBLE
37182: LD_EXP 102
37186: PUSH
37187: LD_VAR 0 6
37191: ARRAY
37192: INC
37193: ST_TO_ADDR
37194: LD_INT 1
37196: PUSH
37197: FOR_DOWNTO
37198: IFFALSE 37359
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37200: LD_EXP 102
37204: PUSH
37205: LD_VAR 0 6
37209: ARRAY
37210: PUSH
37211: LD_VAR 0 5
37215: ARRAY
37216: PUSH
37217: LD_INT 1
37219: ARRAY
37220: PUSH
37221: LD_VAR 0 2
37225: EQUAL
37226: PUSH
37227: LD_EXP 102
37231: PUSH
37232: LD_VAR 0 6
37236: ARRAY
37237: PUSH
37238: LD_VAR 0 5
37242: ARRAY
37243: PUSH
37244: LD_INT 2
37246: ARRAY
37247: PUSH
37248: LD_VAR 0 3
37252: EQUAL
37253: AND
37254: IFFALSE 37357
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37256: LD_EXP 102
37260: PUSH
37261: LD_VAR 0 6
37265: ARRAY
37266: PUSH
37267: LD_VAR 0 5
37271: ARRAY
37272: PUSH
37273: LD_INT 1
37275: ARRAY
37276: PPUSH
37277: LD_EXP 102
37281: PUSH
37282: LD_VAR 0 6
37286: ARRAY
37287: PUSH
37288: LD_VAR 0 5
37292: ARRAY
37293: PUSH
37294: LD_INT 2
37296: ARRAY
37297: PPUSH
37298: LD_VAR 0 1
37302: PPUSH
37303: CALL_OW 255
37307: PPUSH
37308: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37312: LD_ADDR_EXP 102
37316: PUSH
37317: LD_EXP 102
37321: PPUSH
37322: LD_VAR 0 6
37326: PPUSH
37327: LD_EXP 102
37331: PUSH
37332: LD_VAR 0 6
37336: ARRAY
37337: PPUSH
37338: LD_VAR 0 5
37342: PPUSH
37343: CALL_OW 3
37347: PPUSH
37348: CALL_OW 1
37352: ST_TO_ADDR
// exit ;
37353: POP
37354: POP
37355: GO 37548
// end ; end ;
37357: GO 37197
37359: POP
37360: POP
// for i := minerMinesList [ index ] downto 1 do
37361: LD_ADDR_VAR 0 5
37365: PUSH
37366: DOUBLE
37367: LD_EXP 102
37371: PUSH
37372: LD_VAR 0 6
37376: ARRAY
37377: INC
37378: ST_TO_ADDR
37379: LD_INT 1
37381: PUSH
37382: FOR_DOWNTO
37383: IFFALSE 37546
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37385: LD_EXP 102
37389: PUSH
37390: LD_VAR 0 6
37394: ARRAY
37395: PUSH
37396: LD_VAR 0 5
37400: ARRAY
37401: PUSH
37402: LD_INT 1
37404: ARRAY
37405: PPUSH
37406: LD_EXP 102
37410: PUSH
37411: LD_VAR 0 6
37415: ARRAY
37416: PUSH
37417: LD_VAR 0 5
37421: ARRAY
37422: PUSH
37423: LD_INT 2
37425: ARRAY
37426: PPUSH
37427: LD_VAR 0 2
37431: PPUSH
37432: LD_VAR 0 3
37436: PPUSH
37437: CALL_OW 298
37441: PUSH
37442: LD_INT 6
37444: LESS
37445: IFFALSE 37544
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37447: LD_EXP 102
37451: PUSH
37452: LD_VAR 0 6
37456: ARRAY
37457: PUSH
37458: LD_VAR 0 5
37462: ARRAY
37463: PUSH
37464: LD_INT 1
37466: ARRAY
37467: PPUSH
37468: LD_EXP 102
37472: PUSH
37473: LD_VAR 0 6
37477: ARRAY
37478: PUSH
37479: LD_VAR 0 5
37483: ARRAY
37484: PUSH
37485: LD_INT 2
37487: ARRAY
37488: PPUSH
37489: LD_VAR 0 1
37493: PPUSH
37494: CALL_OW 255
37498: PPUSH
37499: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37503: LD_ADDR_EXP 102
37507: PUSH
37508: LD_EXP 102
37512: PPUSH
37513: LD_VAR 0 6
37517: PPUSH
37518: LD_EXP 102
37522: PUSH
37523: LD_VAR 0 6
37527: ARRAY
37528: PPUSH
37529: LD_VAR 0 5
37533: PPUSH
37534: CALL_OW 3
37538: PPUSH
37539: CALL_OW 1
37543: ST_TO_ADDR
// end ; end ;
37544: GO 37382
37546: POP
37547: POP
// end ;
37548: LD_VAR 0 4
37552: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37553: LD_INT 0
37555: PPUSH
37556: PPUSH
37557: PPUSH
37558: PPUSH
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37564: LD_VAR 0 1
37568: PPUSH
37569: CALL_OW 264
37573: PUSH
37574: LD_INT 81
37576: EQUAL
37577: NOT
37578: PUSH
37579: LD_VAR 0 1
37583: PUSH
37584: LD_EXP 101
37588: IN
37589: NOT
37590: OR
37591: IFFALSE 37595
// exit ;
37593: GO 37917
// index := GetElementIndex ( minersList , unit ) ;
37595: LD_ADDR_VAR 0 6
37599: PUSH
37600: LD_EXP 101
37604: PPUSH
37605: LD_VAR 0 1
37609: PPUSH
37610: CALL 43264 0 2
37614: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37615: LD_ADDR_VAR 0 8
37619: PUSH
37620: LD_EXP 103
37624: PUSH
37625: LD_EXP 102
37629: PUSH
37630: LD_VAR 0 6
37634: ARRAY
37635: MINUS
37636: ST_TO_ADDR
// if not minesFreeAmount then
37637: LD_VAR 0 8
37641: NOT
37642: IFFALSE 37646
// exit ;
37644: GO 37917
// tmp := [ ] ;
37646: LD_ADDR_VAR 0 7
37650: PUSH
37651: EMPTY
37652: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37653: LD_ADDR_VAR 0 5
37657: PUSH
37658: DOUBLE
37659: LD_INT 1
37661: DEC
37662: ST_TO_ADDR
37663: LD_VAR 0 8
37667: PUSH
37668: FOR_TO
37669: IFFALSE 37864
// begin _d := rand ( 0 , 5 ) ;
37671: LD_ADDR_VAR 0 11
37675: PUSH
37676: LD_INT 0
37678: PPUSH
37679: LD_INT 5
37681: PPUSH
37682: CALL_OW 12
37686: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37687: LD_ADDR_VAR 0 12
37691: PUSH
37692: LD_INT 2
37694: PPUSH
37695: LD_INT 6
37697: PPUSH
37698: CALL_OW 12
37702: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37703: LD_ADDR_VAR 0 9
37707: PUSH
37708: LD_VAR 0 2
37712: PPUSH
37713: LD_VAR 0 11
37717: PPUSH
37718: LD_VAR 0 12
37722: PPUSH
37723: CALL_OW 272
37727: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37728: LD_ADDR_VAR 0 10
37732: PUSH
37733: LD_VAR 0 3
37737: PPUSH
37738: LD_VAR 0 11
37742: PPUSH
37743: LD_VAR 0 12
37747: PPUSH
37748: CALL_OW 273
37752: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37753: LD_VAR 0 9
37757: PPUSH
37758: LD_VAR 0 10
37762: PPUSH
37763: CALL_OW 488
37767: PUSH
37768: LD_VAR 0 9
37772: PUSH
37773: LD_VAR 0 10
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_VAR 0 7
37786: IN
37787: NOT
37788: AND
37789: PUSH
37790: LD_VAR 0 9
37794: PPUSH
37795: LD_VAR 0 10
37799: PPUSH
37800: CALL_OW 458
37804: NOT
37805: AND
37806: IFFALSE 37848
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37808: LD_ADDR_VAR 0 7
37812: PUSH
37813: LD_VAR 0 7
37817: PPUSH
37818: LD_VAR 0 7
37822: PUSH
37823: LD_INT 1
37825: PLUS
37826: PPUSH
37827: LD_VAR 0 9
37831: PUSH
37832: LD_VAR 0 10
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PPUSH
37841: CALL_OW 1
37845: ST_TO_ADDR
37846: GO 37862
// i := i - 1 ;
37848: LD_ADDR_VAR 0 5
37852: PUSH
37853: LD_VAR 0 5
37857: PUSH
37858: LD_INT 1
37860: MINUS
37861: ST_TO_ADDR
// end ;
37862: GO 37668
37864: POP
37865: POP
// for i in tmp do
37866: LD_ADDR_VAR 0 5
37870: PUSH
37871: LD_VAR 0 7
37875: PUSH
37876: FOR_IN
37877: IFFALSE 37915
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37879: LD_VAR 0 1
37883: PPUSH
37884: LD_VAR 0 5
37888: PUSH
37889: LD_INT 1
37891: ARRAY
37892: PPUSH
37893: LD_VAR 0 5
37897: PUSH
37898: LD_INT 2
37900: ARRAY
37901: PPUSH
37902: CALL 36861 0 3
37906: NOT
37907: IFFALSE 37913
// exit ;
37909: POP
37910: POP
37911: GO 37917
37913: GO 37876
37915: POP
37916: POP
// end ;
37917: LD_VAR 0 4
37921: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37922: LD_INT 0
37924: PPUSH
37925: PPUSH
37926: PPUSH
37927: PPUSH
37928: PPUSH
37929: PPUSH
37930: PPUSH
// if not GetClass ( unit ) = class_sniper then
37931: LD_VAR 0 1
37935: PPUSH
37936: CALL_OW 257
37940: PUSH
37941: LD_INT 5
37943: EQUAL
37944: NOT
37945: IFFALSE 37949
// exit ;
37947: GO 38337
// dist := 8 ;
37949: LD_ADDR_VAR 0 5
37953: PUSH
37954: LD_INT 8
37956: ST_TO_ADDR
// viewRange := 12 ;
37957: LD_ADDR_VAR 0 7
37961: PUSH
37962: LD_INT 12
37964: ST_TO_ADDR
// side := GetSide ( unit ) ;
37965: LD_ADDR_VAR 0 6
37969: PUSH
37970: LD_VAR 0 1
37974: PPUSH
37975: CALL_OW 255
37979: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37980: LD_INT 61
37982: PPUSH
37983: LD_VAR 0 6
37987: PPUSH
37988: CALL_OW 321
37992: PUSH
37993: LD_INT 2
37995: EQUAL
37996: IFFALSE 38006
// viewRange := 16 ;
37998: LD_ADDR_VAR 0 7
38002: PUSH
38003: LD_INT 16
38005: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38006: LD_VAR 0 1
38010: PPUSH
38011: LD_VAR 0 2
38015: PPUSH
38016: LD_VAR 0 3
38020: PPUSH
38021: CALL_OW 297
38025: PUSH
38026: LD_VAR 0 5
38030: GREATER
38031: IFFALSE 38110
// begin ComMoveXY ( unit , x , y ) ;
38033: LD_VAR 0 1
38037: PPUSH
38038: LD_VAR 0 2
38042: PPUSH
38043: LD_VAR 0 3
38047: PPUSH
38048: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38052: LD_INT 35
38054: PPUSH
38055: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38059: LD_VAR 0 1
38063: PPUSH
38064: LD_VAR 0 2
38068: PPUSH
38069: LD_VAR 0 3
38073: PPUSH
38074: CALL 74527 0 3
38078: NOT
38079: IFFALSE 38083
// exit ;
38081: GO 38337
// until GetDistUnitXY ( unit , x , y ) < dist ;
38083: LD_VAR 0 1
38087: PPUSH
38088: LD_VAR 0 2
38092: PPUSH
38093: LD_VAR 0 3
38097: PPUSH
38098: CALL_OW 297
38102: PUSH
38103: LD_VAR 0 5
38107: LESS
38108: IFFALSE 38052
// end ; ComTurnXY ( unit , x , y ) ;
38110: LD_VAR 0 1
38114: PPUSH
38115: LD_VAR 0 2
38119: PPUSH
38120: LD_VAR 0 3
38124: PPUSH
38125: CALL_OW 118
// wait ( 5 ) ;
38129: LD_INT 5
38131: PPUSH
38132: CALL_OW 67
// _d := GetDir ( unit ) ;
38136: LD_ADDR_VAR 0 10
38140: PUSH
38141: LD_VAR 0 1
38145: PPUSH
38146: CALL_OW 254
38150: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38151: LD_ADDR_VAR 0 8
38155: PUSH
38156: LD_VAR 0 1
38160: PPUSH
38161: CALL_OW 250
38165: PPUSH
38166: LD_VAR 0 10
38170: PPUSH
38171: LD_VAR 0 5
38175: PPUSH
38176: CALL_OW 272
38180: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38181: LD_ADDR_VAR 0 9
38185: PUSH
38186: LD_VAR 0 1
38190: PPUSH
38191: CALL_OW 251
38195: PPUSH
38196: LD_VAR 0 10
38200: PPUSH
38201: LD_VAR 0 5
38205: PPUSH
38206: CALL_OW 273
38210: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38211: LD_VAR 0 8
38215: PPUSH
38216: LD_VAR 0 9
38220: PPUSH
38221: CALL_OW 488
38225: NOT
38226: IFFALSE 38230
// exit ;
38228: GO 38337
// ComAnimCustom ( unit , 1 ) ;
38230: LD_VAR 0 1
38234: PPUSH
38235: LD_INT 1
38237: PPUSH
38238: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38242: LD_VAR 0 8
38246: PPUSH
38247: LD_VAR 0 9
38251: PPUSH
38252: LD_VAR 0 6
38256: PPUSH
38257: LD_VAR 0 7
38261: PPUSH
38262: CALL_OW 330
// repeat wait ( 1 ) ;
38266: LD_INT 1
38268: PPUSH
38269: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38273: LD_VAR 0 1
38277: PPUSH
38278: CALL_OW 316
38282: PUSH
38283: LD_VAR 0 1
38287: PPUSH
38288: CALL_OW 314
38292: OR
38293: PUSH
38294: LD_VAR 0 1
38298: PPUSH
38299: CALL_OW 302
38303: NOT
38304: OR
38305: PUSH
38306: LD_VAR 0 1
38310: PPUSH
38311: CALL_OW 301
38315: OR
38316: IFFALSE 38266
// RemoveSeeing ( _x , _y , side ) ;
38318: LD_VAR 0 8
38322: PPUSH
38323: LD_VAR 0 9
38327: PPUSH
38328: LD_VAR 0 6
38332: PPUSH
38333: CALL_OW 331
// end ; end_of_file
38337: LD_VAR 0 4
38341: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38342: LD_INT 0
38344: PPUSH
38345: PPUSH
// if exist_mode then
38346: LD_VAR 0 2
38350: IFFALSE 38375
// unit := CreateCharacter ( prefix & ident ) else
38352: LD_ADDR_VAR 0 5
38356: PUSH
38357: LD_VAR 0 3
38361: PUSH
38362: LD_VAR 0 1
38366: STR
38367: PPUSH
38368: CALL_OW 34
38372: ST_TO_ADDR
38373: GO 38390
// unit := NewCharacter ( ident ) ;
38375: LD_ADDR_VAR 0 5
38379: PUSH
38380: LD_VAR 0 1
38384: PPUSH
38385: CALL_OW 25
38389: ST_TO_ADDR
// result := unit ;
38390: LD_ADDR_VAR 0 4
38394: PUSH
38395: LD_VAR 0 5
38399: ST_TO_ADDR
// end ;
38400: LD_VAR 0 4
38404: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38405: LD_INT 0
38407: PPUSH
38408: PPUSH
// if not side or not nation then
38409: LD_VAR 0 1
38413: NOT
38414: PUSH
38415: LD_VAR 0 2
38419: NOT
38420: OR
38421: IFFALSE 38425
// exit ;
38423: GO 39193
// case nation of nation_american :
38425: LD_VAR 0 2
38429: PUSH
38430: LD_INT 1
38432: DOUBLE
38433: EQUAL
38434: IFTRUE 38438
38436: GO 38652
38438: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38439: LD_ADDR_VAR 0 4
38443: PUSH
38444: LD_INT 35
38446: PUSH
38447: LD_INT 45
38449: PUSH
38450: LD_INT 46
38452: PUSH
38453: LD_INT 47
38455: PUSH
38456: LD_INT 82
38458: PUSH
38459: LD_INT 83
38461: PUSH
38462: LD_INT 84
38464: PUSH
38465: LD_INT 85
38467: PUSH
38468: LD_INT 86
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: LD_INT 6
38479: PUSH
38480: LD_INT 15
38482: PUSH
38483: LD_INT 16
38485: PUSH
38486: LD_INT 7
38488: PUSH
38489: LD_INT 12
38491: PUSH
38492: LD_INT 13
38494: PUSH
38495: LD_INT 10
38497: PUSH
38498: LD_INT 14
38500: PUSH
38501: LD_INT 20
38503: PUSH
38504: LD_INT 21
38506: PUSH
38507: LD_INT 22
38509: PUSH
38510: LD_INT 25
38512: PUSH
38513: LD_INT 32
38515: PUSH
38516: LD_INT 27
38518: PUSH
38519: LD_INT 36
38521: PUSH
38522: LD_INT 69
38524: PUSH
38525: LD_INT 39
38527: PUSH
38528: LD_INT 34
38530: PUSH
38531: LD_INT 40
38533: PUSH
38534: LD_INT 48
38536: PUSH
38537: LD_INT 49
38539: PUSH
38540: LD_INT 50
38542: PUSH
38543: LD_INT 51
38545: PUSH
38546: LD_INT 52
38548: PUSH
38549: LD_INT 53
38551: PUSH
38552: LD_INT 54
38554: PUSH
38555: LD_INT 55
38557: PUSH
38558: LD_INT 56
38560: PUSH
38561: LD_INT 57
38563: PUSH
38564: LD_INT 58
38566: PUSH
38567: LD_INT 59
38569: PUSH
38570: LD_INT 60
38572: PUSH
38573: LD_INT 61
38575: PUSH
38576: LD_INT 62
38578: PUSH
38579: LD_INT 80
38581: PUSH
38582: LD_INT 82
38584: PUSH
38585: LD_INT 83
38587: PUSH
38588: LD_INT 84
38590: PUSH
38591: LD_INT 85
38593: PUSH
38594: LD_INT 86
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: ST_TO_ADDR
38650: GO 39117
38652: LD_INT 2
38654: DOUBLE
38655: EQUAL
38656: IFTRUE 38660
38658: GO 38886
38660: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38661: LD_ADDR_VAR 0 4
38665: PUSH
38666: LD_INT 35
38668: PUSH
38669: LD_INT 45
38671: PUSH
38672: LD_INT 46
38674: PUSH
38675: LD_INT 47
38677: PUSH
38678: LD_INT 82
38680: PUSH
38681: LD_INT 83
38683: PUSH
38684: LD_INT 84
38686: PUSH
38687: LD_INT 85
38689: PUSH
38690: LD_INT 87
38692: PUSH
38693: LD_INT 70
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 11
38701: PUSH
38702: LD_INT 3
38704: PUSH
38705: LD_INT 4
38707: PUSH
38708: LD_INT 5
38710: PUSH
38711: LD_INT 6
38713: PUSH
38714: LD_INT 15
38716: PUSH
38717: LD_INT 18
38719: PUSH
38720: LD_INT 7
38722: PUSH
38723: LD_INT 17
38725: PUSH
38726: LD_INT 8
38728: PUSH
38729: LD_INT 20
38731: PUSH
38732: LD_INT 21
38734: PUSH
38735: LD_INT 22
38737: PUSH
38738: LD_INT 72
38740: PUSH
38741: LD_INT 26
38743: PUSH
38744: LD_INT 69
38746: PUSH
38747: LD_INT 39
38749: PUSH
38750: LD_INT 40
38752: PUSH
38753: LD_INT 41
38755: PUSH
38756: LD_INT 42
38758: PUSH
38759: LD_INT 43
38761: PUSH
38762: LD_INT 48
38764: PUSH
38765: LD_INT 49
38767: PUSH
38768: LD_INT 50
38770: PUSH
38771: LD_INT 51
38773: PUSH
38774: LD_INT 52
38776: PUSH
38777: LD_INT 53
38779: PUSH
38780: LD_INT 54
38782: PUSH
38783: LD_INT 55
38785: PUSH
38786: LD_INT 56
38788: PUSH
38789: LD_INT 60
38791: PUSH
38792: LD_INT 61
38794: PUSH
38795: LD_INT 62
38797: PUSH
38798: LD_INT 66
38800: PUSH
38801: LD_INT 67
38803: PUSH
38804: LD_INT 68
38806: PUSH
38807: LD_INT 81
38809: PUSH
38810: LD_INT 82
38812: PUSH
38813: LD_INT 83
38815: PUSH
38816: LD_INT 84
38818: PUSH
38819: LD_INT 85
38821: PUSH
38822: LD_INT 87
38824: PUSH
38825: LD_INT 88
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: ST_TO_ADDR
38884: GO 39117
38886: LD_INT 3
38888: DOUBLE
38889: EQUAL
38890: IFTRUE 38894
38892: GO 39116
38894: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38895: LD_ADDR_VAR 0 4
38899: PUSH
38900: LD_INT 46
38902: PUSH
38903: LD_INT 47
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: LD_INT 2
38911: PUSH
38912: LD_INT 82
38914: PUSH
38915: LD_INT 83
38917: PUSH
38918: LD_INT 84
38920: PUSH
38921: LD_INT 85
38923: PUSH
38924: LD_INT 86
38926: PUSH
38927: LD_INT 11
38929: PUSH
38930: LD_INT 9
38932: PUSH
38933: LD_INT 20
38935: PUSH
38936: LD_INT 19
38938: PUSH
38939: LD_INT 21
38941: PUSH
38942: LD_INT 24
38944: PUSH
38945: LD_INT 22
38947: PUSH
38948: LD_INT 25
38950: PUSH
38951: LD_INT 28
38953: PUSH
38954: LD_INT 29
38956: PUSH
38957: LD_INT 30
38959: PUSH
38960: LD_INT 31
38962: PUSH
38963: LD_INT 37
38965: PUSH
38966: LD_INT 38
38968: PUSH
38969: LD_INT 32
38971: PUSH
38972: LD_INT 27
38974: PUSH
38975: LD_INT 33
38977: PUSH
38978: LD_INT 69
38980: PUSH
38981: LD_INT 39
38983: PUSH
38984: LD_INT 34
38986: PUSH
38987: LD_INT 40
38989: PUSH
38990: LD_INT 71
38992: PUSH
38993: LD_INT 23
38995: PUSH
38996: LD_INT 44
38998: PUSH
38999: LD_INT 48
39001: PUSH
39002: LD_INT 49
39004: PUSH
39005: LD_INT 50
39007: PUSH
39008: LD_INT 51
39010: PUSH
39011: LD_INT 52
39013: PUSH
39014: LD_INT 53
39016: PUSH
39017: LD_INT 54
39019: PUSH
39020: LD_INT 55
39022: PUSH
39023: LD_INT 56
39025: PUSH
39026: LD_INT 57
39028: PUSH
39029: LD_INT 58
39031: PUSH
39032: LD_INT 59
39034: PUSH
39035: LD_INT 63
39037: PUSH
39038: LD_INT 64
39040: PUSH
39041: LD_INT 65
39043: PUSH
39044: LD_INT 82
39046: PUSH
39047: LD_INT 83
39049: PUSH
39050: LD_INT 84
39052: PUSH
39053: LD_INT 85
39055: PUSH
39056: LD_INT 86
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: ST_TO_ADDR
39114: GO 39117
39116: POP
// if state > - 1 and state < 3 then
39117: LD_VAR 0 3
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: GREATER
39126: PUSH
39127: LD_VAR 0 3
39131: PUSH
39132: LD_INT 3
39134: LESS
39135: AND
39136: IFFALSE 39193
// for i in result do
39138: LD_ADDR_VAR 0 5
39142: PUSH
39143: LD_VAR 0 4
39147: PUSH
39148: FOR_IN
39149: IFFALSE 39191
// if GetTech ( i , side ) <> state then
39151: LD_VAR 0 5
39155: PPUSH
39156: LD_VAR 0 1
39160: PPUSH
39161: CALL_OW 321
39165: PUSH
39166: LD_VAR 0 3
39170: NONEQUAL
39171: IFFALSE 39189
// result := result diff i ;
39173: LD_ADDR_VAR 0 4
39177: PUSH
39178: LD_VAR 0 4
39182: PUSH
39183: LD_VAR 0 5
39187: DIFF
39188: ST_TO_ADDR
39189: GO 39148
39191: POP
39192: POP
// end ;
39193: LD_VAR 0 4
39197: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39198: LD_INT 0
39200: PPUSH
39201: PPUSH
39202: PPUSH
// result := true ;
39203: LD_ADDR_VAR 0 3
39207: PUSH
39208: LD_INT 1
39210: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39211: LD_ADDR_VAR 0 5
39215: PUSH
39216: LD_VAR 0 2
39220: PPUSH
39221: CALL_OW 480
39225: ST_TO_ADDR
// if not tmp then
39226: LD_VAR 0 5
39230: NOT
39231: IFFALSE 39235
// exit ;
39233: GO 39284
// for i in tmp do
39235: LD_ADDR_VAR 0 4
39239: PUSH
39240: LD_VAR 0 5
39244: PUSH
39245: FOR_IN
39246: IFFALSE 39282
// if GetTech ( i , side ) <> state_researched then
39248: LD_VAR 0 4
39252: PPUSH
39253: LD_VAR 0 1
39257: PPUSH
39258: CALL_OW 321
39262: PUSH
39263: LD_INT 2
39265: NONEQUAL
39266: IFFALSE 39280
// begin result := false ;
39268: LD_ADDR_VAR 0 3
39272: PUSH
39273: LD_INT 0
39275: ST_TO_ADDR
// exit ;
39276: POP
39277: POP
39278: GO 39284
// end ;
39280: GO 39245
39282: POP
39283: POP
// end ;
39284: LD_VAR 0 3
39288: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39289: LD_INT 0
39291: PPUSH
39292: PPUSH
39293: PPUSH
39294: PPUSH
39295: PPUSH
39296: PPUSH
39297: PPUSH
39298: PPUSH
39299: PPUSH
39300: PPUSH
39301: PPUSH
39302: PPUSH
39303: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39304: LD_VAR 0 1
39308: NOT
39309: PUSH
39310: LD_VAR 0 1
39314: PPUSH
39315: CALL_OW 257
39319: PUSH
39320: LD_INT 9
39322: NONEQUAL
39323: OR
39324: IFFALSE 39328
// exit ;
39326: GO 39901
// side := GetSide ( unit ) ;
39328: LD_ADDR_VAR 0 9
39332: PUSH
39333: LD_VAR 0 1
39337: PPUSH
39338: CALL_OW 255
39342: ST_TO_ADDR
// tech_space := tech_spacanom ;
39343: LD_ADDR_VAR 0 12
39347: PUSH
39348: LD_INT 29
39350: ST_TO_ADDR
// tech_time := tech_taurad ;
39351: LD_ADDR_VAR 0 13
39355: PUSH
39356: LD_INT 28
39358: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39359: LD_ADDR_VAR 0 11
39363: PUSH
39364: LD_VAR 0 1
39368: PPUSH
39369: CALL_OW 310
39373: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39374: LD_VAR 0 11
39378: PPUSH
39379: CALL_OW 247
39383: PUSH
39384: LD_INT 2
39386: EQUAL
39387: IFFALSE 39391
// exit ;
39389: GO 39901
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39391: LD_ADDR_VAR 0 8
39395: PUSH
39396: LD_INT 81
39398: PUSH
39399: LD_VAR 0 9
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 3
39410: PUSH
39411: LD_INT 21
39413: PUSH
39414: LD_INT 3
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PPUSH
39429: CALL_OW 69
39433: ST_TO_ADDR
// if not tmp then
39434: LD_VAR 0 8
39438: NOT
39439: IFFALSE 39443
// exit ;
39441: GO 39901
// if in_unit then
39443: LD_VAR 0 11
39447: IFFALSE 39471
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39449: LD_ADDR_VAR 0 10
39453: PUSH
39454: LD_VAR 0 8
39458: PPUSH
39459: LD_VAR 0 11
39463: PPUSH
39464: CALL_OW 74
39468: ST_TO_ADDR
39469: GO 39491
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39471: LD_ADDR_VAR 0 10
39475: PUSH
39476: LD_VAR 0 8
39480: PPUSH
39481: LD_VAR 0 1
39485: PPUSH
39486: CALL_OW 74
39490: ST_TO_ADDR
// if not enemy then
39491: LD_VAR 0 10
39495: NOT
39496: IFFALSE 39500
// exit ;
39498: GO 39901
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39500: LD_VAR 0 11
39504: PUSH
39505: LD_VAR 0 11
39509: PPUSH
39510: LD_VAR 0 10
39514: PPUSH
39515: CALL_OW 296
39519: PUSH
39520: LD_INT 13
39522: GREATER
39523: AND
39524: PUSH
39525: LD_VAR 0 1
39529: PPUSH
39530: LD_VAR 0 10
39534: PPUSH
39535: CALL_OW 296
39539: PUSH
39540: LD_INT 12
39542: GREATER
39543: OR
39544: IFFALSE 39548
// exit ;
39546: GO 39901
// missile := [ 1 ] ;
39548: LD_ADDR_VAR 0 14
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: EMPTY
39557: LIST
39558: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39559: LD_VAR 0 9
39563: PPUSH
39564: LD_VAR 0 12
39568: PPUSH
39569: CALL_OW 325
39573: IFFALSE 39602
// missile := Replace ( missile , missile + 1 , 2 ) ;
39575: LD_ADDR_VAR 0 14
39579: PUSH
39580: LD_VAR 0 14
39584: PPUSH
39585: LD_VAR 0 14
39589: PUSH
39590: LD_INT 1
39592: PLUS
39593: PPUSH
39594: LD_INT 2
39596: PPUSH
39597: CALL_OW 1
39601: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39602: LD_VAR 0 9
39606: PPUSH
39607: LD_VAR 0 13
39611: PPUSH
39612: CALL_OW 325
39616: PUSH
39617: LD_VAR 0 10
39621: PPUSH
39622: CALL_OW 255
39626: PPUSH
39627: LD_VAR 0 13
39631: PPUSH
39632: CALL_OW 325
39636: NOT
39637: AND
39638: IFFALSE 39667
// missile := Replace ( missile , missile + 1 , 3 ) ;
39640: LD_ADDR_VAR 0 14
39644: PUSH
39645: LD_VAR 0 14
39649: PPUSH
39650: LD_VAR 0 14
39654: PUSH
39655: LD_INT 1
39657: PLUS
39658: PPUSH
39659: LD_INT 3
39661: PPUSH
39662: CALL_OW 1
39666: ST_TO_ADDR
// if missile < 2 then
39667: LD_VAR 0 14
39671: PUSH
39672: LD_INT 2
39674: LESS
39675: IFFALSE 39679
// exit ;
39677: GO 39901
// x := GetX ( enemy ) ;
39679: LD_ADDR_VAR 0 4
39683: PUSH
39684: LD_VAR 0 10
39688: PPUSH
39689: CALL_OW 250
39693: ST_TO_ADDR
// y := GetY ( enemy ) ;
39694: LD_ADDR_VAR 0 5
39698: PUSH
39699: LD_VAR 0 10
39703: PPUSH
39704: CALL_OW 251
39708: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39709: LD_ADDR_VAR 0 6
39713: PUSH
39714: LD_VAR 0 4
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PPUSH
39723: LD_INT 1
39725: PPUSH
39726: CALL_OW 12
39730: PLUS
39731: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39732: LD_ADDR_VAR 0 7
39736: PUSH
39737: LD_VAR 0 5
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PPUSH
39746: LD_INT 1
39748: PPUSH
39749: CALL_OW 12
39753: PLUS
39754: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39755: LD_VAR 0 6
39759: PPUSH
39760: LD_VAR 0 7
39764: PPUSH
39765: CALL_OW 488
39769: NOT
39770: IFFALSE 39792
// begin _x := x ;
39772: LD_ADDR_VAR 0 6
39776: PUSH
39777: LD_VAR 0 4
39781: ST_TO_ADDR
// _y := y ;
39782: LD_ADDR_VAR 0 7
39786: PUSH
39787: LD_VAR 0 5
39791: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39792: LD_ADDR_VAR 0 3
39796: PUSH
39797: LD_INT 1
39799: PPUSH
39800: LD_VAR 0 14
39804: PPUSH
39805: CALL_OW 12
39809: ST_TO_ADDR
// case i of 1 :
39810: LD_VAR 0 3
39814: PUSH
39815: LD_INT 1
39817: DOUBLE
39818: EQUAL
39819: IFTRUE 39823
39821: GO 39840
39823: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39824: LD_VAR 0 1
39828: PPUSH
39829: LD_VAR 0 10
39833: PPUSH
39834: CALL_OW 115
39838: GO 39901
39840: LD_INT 2
39842: DOUBLE
39843: EQUAL
39844: IFTRUE 39848
39846: GO 39870
39848: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39849: LD_VAR 0 1
39853: PPUSH
39854: LD_VAR 0 6
39858: PPUSH
39859: LD_VAR 0 7
39863: PPUSH
39864: CALL_OW 153
39868: GO 39901
39870: LD_INT 3
39872: DOUBLE
39873: EQUAL
39874: IFTRUE 39878
39876: GO 39900
39878: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39879: LD_VAR 0 1
39883: PPUSH
39884: LD_VAR 0 6
39888: PPUSH
39889: LD_VAR 0 7
39893: PPUSH
39894: CALL_OW 154
39898: GO 39901
39900: POP
// end ;
39901: LD_VAR 0 2
39905: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39906: LD_INT 0
39908: PPUSH
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
39913: PPUSH
// if not unit or not building then
39914: LD_VAR 0 1
39918: NOT
39919: PUSH
39920: LD_VAR 0 2
39924: NOT
39925: OR
39926: IFFALSE 39930
// exit ;
39928: GO 40088
// x := GetX ( building ) ;
39930: LD_ADDR_VAR 0 5
39934: PUSH
39935: LD_VAR 0 2
39939: PPUSH
39940: CALL_OW 250
39944: ST_TO_ADDR
// y := GetY ( building ) ;
39945: LD_ADDR_VAR 0 6
39949: PUSH
39950: LD_VAR 0 2
39954: PPUSH
39955: CALL_OW 251
39959: ST_TO_ADDR
// for i = 0 to 5 do
39960: LD_ADDR_VAR 0 4
39964: PUSH
39965: DOUBLE
39966: LD_INT 0
39968: DEC
39969: ST_TO_ADDR
39970: LD_INT 5
39972: PUSH
39973: FOR_TO
39974: IFFALSE 40086
// begin _x := ShiftX ( x , i , 3 ) ;
39976: LD_ADDR_VAR 0 7
39980: PUSH
39981: LD_VAR 0 5
39985: PPUSH
39986: LD_VAR 0 4
39990: PPUSH
39991: LD_INT 3
39993: PPUSH
39994: CALL_OW 272
39998: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39999: LD_ADDR_VAR 0 8
40003: PUSH
40004: LD_VAR 0 6
40008: PPUSH
40009: LD_VAR 0 4
40013: PPUSH
40014: LD_INT 3
40016: PPUSH
40017: CALL_OW 273
40021: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40022: LD_VAR 0 7
40026: PPUSH
40027: LD_VAR 0 8
40031: PPUSH
40032: CALL_OW 488
40036: NOT
40037: IFFALSE 40041
// continue ;
40039: GO 39973
// if HexInfo ( _x , _y ) = 0 then
40041: LD_VAR 0 7
40045: PPUSH
40046: LD_VAR 0 8
40050: PPUSH
40051: CALL_OW 428
40055: PUSH
40056: LD_INT 0
40058: EQUAL
40059: IFFALSE 40084
// begin ComMoveXY ( unit , _x , _y ) ;
40061: LD_VAR 0 1
40065: PPUSH
40066: LD_VAR 0 7
40070: PPUSH
40071: LD_VAR 0 8
40075: PPUSH
40076: CALL_OW 111
// exit ;
40080: POP
40081: POP
40082: GO 40088
// end ; end ;
40084: GO 39973
40086: POP
40087: POP
// end ;
40088: LD_VAR 0 3
40092: RET
// export function ScanBase ( side , base_area ) ; begin
40093: LD_INT 0
40095: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40096: LD_ADDR_VAR 0 3
40100: PUSH
40101: LD_VAR 0 2
40105: PPUSH
40106: LD_INT 81
40108: PUSH
40109: LD_VAR 0 1
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PPUSH
40118: CALL_OW 70
40122: ST_TO_ADDR
// end ;
40123: LD_VAR 0 3
40127: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40128: LD_INT 0
40130: PPUSH
40131: PPUSH
40132: PPUSH
40133: PPUSH
// result := false ;
40134: LD_ADDR_VAR 0 2
40138: PUSH
40139: LD_INT 0
40141: ST_TO_ADDR
// side := GetSide ( unit ) ;
40142: LD_ADDR_VAR 0 3
40146: PUSH
40147: LD_VAR 0 1
40151: PPUSH
40152: CALL_OW 255
40156: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40157: LD_ADDR_VAR 0 4
40161: PUSH
40162: LD_VAR 0 1
40166: PPUSH
40167: CALL_OW 248
40171: ST_TO_ADDR
// case nat of 1 :
40172: LD_VAR 0 4
40176: PUSH
40177: LD_INT 1
40179: DOUBLE
40180: EQUAL
40181: IFTRUE 40185
40183: GO 40196
40185: POP
// tech := tech_lassight ; 2 :
40186: LD_ADDR_VAR 0 5
40190: PUSH
40191: LD_INT 12
40193: ST_TO_ADDR
40194: GO 40235
40196: LD_INT 2
40198: DOUBLE
40199: EQUAL
40200: IFTRUE 40204
40202: GO 40215
40204: POP
// tech := tech_mortar ; 3 :
40205: LD_ADDR_VAR 0 5
40209: PUSH
40210: LD_INT 41
40212: ST_TO_ADDR
40213: GO 40235
40215: LD_INT 3
40217: DOUBLE
40218: EQUAL
40219: IFTRUE 40223
40221: GO 40234
40223: POP
// tech := tech_bazooka ; end ;
40224: LD_ADDR_VAR 0 5
40228: PUSH
40229: LD_INT 44
40231: ST_TO_ADDR
40232: GO 40235
40234: POP
// if Researched ( side , tech ) then
40235: LD_VAR 0 3
40239: PPUSH
40240: LD_VAR 0 5
40244: PPUSH
40245: CALL_OW 325
40249: IFFALSE 40276
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40251: LD_ADDR_VAR 0 2
40255: PUSH
40256: LD_INT 5
40258: PUSH
40259: LD_INT 8
40261: PUSH
40262: LD_INT 9
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: LIST
40269: PUSH
40270: LD_VAR 0 4
40274: ARRAY
40275: ST_TO_ADDR
// end ;
40276: LD_VAR 0 2
40280: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40281: LD_INT 0
40283: PPUSH
40284: PPUSH
40285: PPUSH
// if not mines then
40286: LD_VAR 0 2
40290: NOT
40291: IFFALSE 40295
// exit ;
40293: GO 40439
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40295: LD_ADDR_VAR 0 5
40299: PUSH
40300: LD_INT 81
40302: PUSH
40303: LD_VAR 0 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 3
40314: PUSH
40315: LD_INT 21
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PPUSH
40333: CALL_OW 69
40337: ST_TO_ADDR
// for i in mines do
40338: LD_ADDR_VAR 0 4
40342: PUSH
40343: LD_VAR 0 2
40347: PUSH
40348: FOR_IN
40349: IFFALSE 40437
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40351: LD_VAR 0 4
40355: PUSH
40356: LD_INT 1
40358: ARRAY
40359: PPUSH
40360: LD_VAR 0 4
40364: PUSH
40365: LD_INT 2
40367: ARRAY
40368: PPUSH
40369: CALL_OW 458
40373: NOT
40374: IFFALSE 40378
// continue ;
40376: GO 40348
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40378: LD_VAR 0 4
40382: PUSH
40383: LD_INT 1
40385: ARRAY
40386: PPUSH
40387: LD_VAR 0 4
40391: PUSH
40392: LD_INT 2
40394: ARRAY
40395: PPUSH
40396: CALL_OW 428
40400: PUSH
40401: LD_VAR 0 5
40405: IN
40406: IFFALSE 40435
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40408: LD_VAR 0 4
40412: PUSH
40413: LD_INT 1
40415: ARRAY
40416: PPUSH
40417: LD_VAR 0 4
40421: PUSH
40422: LD_INT 2
40424: ARRAY
40425: PPUSH
40426: LD_VAR 0 1
40430: PPUSH
40431: CALL_OW 456
// end ;
40435: GO 40348
40437: POP
40438: POP
// end ;
40439: LD_VAR 0 3
40443: RET
// export function Count ( array ) ; var i ; begin
40444: LD_INT 0
40446: PPUSH
40447: PPUSH
// result := 0 ;
40448: LD_ADDR_VAR 0 2
40452: PUSH
40453: LD_INT 0
40455: ST_TO_ADDR
// for i in array do
40456: LD_ADDR_VAR 0 3
40460: PUSH
40461: LD_VAR 0 1
40465: PUSH
40466: FOR_IN
40467: IFFALSE 40491
// if i then
40469: LD_VAR 0 3
40473: IFFALSE 40489
// result := result + 1 ;
40475: LD_ADDR_VAR 0 2
40479: PUSH
40480: LD_VAR 0 2
40484: PUSH
40485: LD_INT 1
40487: PLUS
40488: ST_TO_ADDR
40489: GO 40466
40491: POP
40492: POP
// end ;
40493: LD_VAR 0 2
40497: RET
// export function IsEmpty ( building ) ; begin
40498: LD_INT 0
40500: PPUSH
// if not building then
40501: LD_VAR 0 1
40505: NOT
40506: IFFALSE 40510
// exit ;
40508: GO 40553
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40510: LD_ADDR_VAR 0 2
40514: PUSH
40515: LD_VAR 0 1
40519: PUSH
40520: LD_INT 22
40522: PUSH
40523: LD_VAR 0 1
40527: PPUSH
40528: CALL_OW 255
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 58
40539: PUSH
40540: EMPTY
40541: LIST
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PPUSH
40547: CALL_OW 69
40551: IN
40552: ST_TO_ADDR
// end ;
40553: LD_VAR 0 2
40557: RET
// export function IsNotFull ( building ) ; var places ; begin
40558: LD_INT 0
40560: PPUSH
40561: PPUSH
// if not building then
40562: LD_VAR 0 1
40566: NOT
40567: IFFALSE 40571
// exit ;
40569: GO 40742
// result := false ;
40571: LD_ADDR_VAR 0 2
40575: PUSH
40576: LD_INT 0
40578: ST_TO_ADDR
// places := 0 ;
40579: LD_ADDR_VAR 0 3
40583: PUSH
40584: LD_INT 0
40586: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
40587: LD_VAR 0 1
40591: PPUSH
40592: CALL_OW 266
40596: PUSH
40597: LD_INT 0
40599: DOUBLE
40600: EQUAL
40601: IFTRUE 40659
40603: LD_INT 1
40605: DOUBLE
40606: EQUAL
40607: IFTRUE 40659
40609: LD_INT 6
40611: DOUBLE
40612: EQUAL
40613: IFTRUE 40659
40615: LD_INT 7
40617: DOUBLE
40618: EQUAL
40619: IFTRUE 40659
40621: LD_INT 8
40623: DOUBLE
40624: EQUAL
40625: IFTRUE 40659
40627: LD_INT 4
40629: DOUBLE
40630: EQUAL
40631: IFTRUE 40659
40633: LD_INT 5
40635: DOUBLE
40636: EQUAL
40637: IFTRUE 40659
40639: LD_INT 2
40641: DOUBLE
40642: EQUAL
40643: IFTRUE 40659
40645: LD_INT 3
40647: DOUBLE
40648: EQUAL
40649: IFTRUE 40659
40651: LD_INT 35
40653: DOUBLE
40654: EQUAL
40655: IFTRUE 40659
40657: GO 40670
40659: POP
// places := 6 ; b_bunker , b_breastwork :
40660: LD_ADDR_VAR 0 3
40664: PUSH
40665: LD_INT 6
40667: ST_TO_ADDR
40668: GO 40715
40670: LD_INT 32
40672: DOUBLE
40673: EQUAL
40674: IFTRUE 40684
40676: LD_INT 31
40678: DOUBLE
40679: EQUAL
40680: IFTRUE 40684
40682: GO 40695
40684: POP
// places := 1 ; b_control_tower :
40685: LD_ADDR_VAR 0 3
40689: PUSH
40690: LD_INT 1
40692: ST_TO_ADDR
40693: GO 40715
40695: LD_INT 36
40697: DOUBLE
40698: EQUAL
40699: IFTRUE 40703
40701: GO 40714
40703: POP
// places := 3 ; end ;
40704: LD_ADDR_VAR 0 3
40708: PUSH
40709: LD_INT 3
40711: ST_TO_ADDR
40712: GO 40715
40714: POP
// if places then
40715: LD_VAR 0 3
40719: IFFALSE 40742
// result := UnitsInside ( building ) < places ;
40721: LD_ADDR_VAR 0 2
40725: PUSH
40726: LD_VAR 0 1
40730: PPUSH
40731: CALL_OW 313
40735: PUSH
40736: LD_VAR 0 3
40740: LESS
40741: ST_TO_ADDR
// end ;
40742: LD_VAR 0 2
40746: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40747: LD_INT 0
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
// tmp := [ ] ;
40753: LD_ADDR_VAR 0 3
40757: PUSH
40758: EMPTY
40759: ST_TO_ADDR
// list := [ ] ;
40760: LD_ADDR_VAR 0 5
40764: PUSH
40765: EMPTY
40766: ST_TO_ADDR
// for i = 16 to 25 do
40767: LD_ADDR_VAR 0 4
40771: PUSH
40772: DOUBLE
40773: LD_INT 16
40775: DEC
40776: ST_TO_ADDR
40777: LD_INT 25
40779: PUSH
40780: FOR_TO
40781: IFFALSE 40854
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40783: LD_ADDR_VAR 0 3
40787: PUSH
40788: LD_VAR 0 3
40792: PUSH
40793: LD_INT 22
40795: PUSH
40796: LD_VAR 0 1
40800: PPUSH
40801: CALL_OW 255
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 91
40812: PUSH
40813: LD_VAR 0 1
40817: PUSH
40818: LD_INT 6
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 30
40828: PUSH
40829: LD_VAR 0 4
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: PPUSH
40846: CALL_OW 69
40850: ADD
40851: ST_TO_ADDR
40852: GO 40780
40854: POP
40855: POP
// for i = 1 to tmp do
40856: LD_ADDR_VAR 0 4
40860: PUSH
40861: DOUBLE
40862: LD_INT 1
40864: DEC
40865: ST_TO_ADDR
40866: LD_VAR 0 3
40870: PUSH
40871: FOR_TO
40872: IFFALSE 40960
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40874: LD_ADDR_VAR 0 5
40878: PUSH
40879: LD_VAR 0 5
40883: PUSH
40884: LD_VAR 0 3
40888: PUSH
40889: LD_VAR 0 4
40893: ARRAY
40894: PPUSH
40895: CALL_OW 266
40899: PUSH
40900: LD_VAR 0 3
40904: PUSH
40905: LD_VAR 0 4
40909: ARRAY
40910: PPUSH
40911: CALL_OW 250
40915: PUSH
40916: LD_VAR 0 3
40920: PUSH
40921: LD_VAR 0 4
40925: ARRAY
40926: PPUSH
40927: CALL_OW 251
40931: PUSH
40932: LD_VAR 0 3
40936: PUSH
40937: LD_VAR 0 4
40941: ARRAY
40942: PPUSH
40943: CALL_OW 254
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: PUSH
40954: EMPTY
40955: LIST
40956: ADD
40957: ST_TO_ADDR
40958: GO 40871
40960: POP
40961: POP
// result := list ;
40962: LD_ADDR_VAR 0 2
40966: PUSH
40967: LD_VAR 0 5
40971: ST_TO_ADDR
// end ;
40972: LD_VAR 0 2
40976: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40977: LD_INT 0
40979: PPUSH
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
// if not factory then
40986: LD_VAR 0 1
40990: NOT
40991: IFFALSE 40995
// exit ;
40993: GO 41588
// if control = control_apeman then
40995: LD_VAR 0 4
40999: PUSH
41000: LD_INT 5
41002: EQUAL
41003: IFFALSE 41112
// begin tmp := UnitsInside ( factory ) ;
41005: LD_ADDR_VAR 0 8
41009: PUSH
41010: LD_VAR 0 1
41014: PPUSH
41015: CALL_OW 313
41019: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41020: LD_VAR 0 8
41024: PPUSH
41025: LD_INT 25
41027: PUSH
41028: LD_INT 12
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PPUSH
41035: CALL_OW 72
41039: NOT
41040: IFFALSE 41050
// control := control_manual ;
41042: LD_ADDR_VAR 0 4
41046: PUSH
41047: LD_INT 1
41049: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41050: LD_ADDR_VAR 0 8
41054: PUSH
41055: LD_VAR 0 1
41059: PPUSH
41060: CALL 40747 0 1
41064: ST_TO_ADDR
// if tmp then
41065: LD_VAR 0 8
41069: IFFALSE 41112
// begin for i in tmp do
41071: LD_ADDR_VAR 0 7
41075: PUSH
41076: LD_VAR 0 8
41080: PUSH
41081: FOR_IN
41082: IFFALSE 41110
// if i [ 1 ] = b_ext_radio then
41084: LD_VAR 0 7
41088: PUSH
41089: LD_INT 1
41091: ARRAY
41092: PUSH
41093: LD_INT 22
41095: EQUAL
41096: IFFALSE 41108
// begin control := control_remote ;
41098: LD_ADDR_VAR 0 4
41102: PUSH
41103: LD_INT 2
41105: ST_TO_ADDR
// break ;
41106: GO 41110
// end ;
41108: GO 41081
41110: POP
41111: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41112: LD_VAR 0 1
41116: PPUSH
41117: LD_VAR 0 2
41121: PPUSH
41122: LD_VAR 0 3
41126: PPUSH
41127: LD_VAR 0 4
41131: PPUSH
41132: LD_VAR 0 5
41136: PPUSH
41137: CALL_OW 448
41141: IFFALSE 41176
// begin result := [ chassis , engine , control , weapon ] ;
41143: LD_ADDR_VAR 0 6
41147: PUSH
41148: LD_VAR 0 2
41152: PUSH
41153: LD_VAR 0 3
41157: PUSH
41158: LD_VAR 0 4
41162: PUSH
41163: LD_VAR 0 5
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: ST_TO_ADDR
// exit ;
41174: GO 41588
// end ; _chassis := AvailableChassisList ( factory ) ;
41176: LD_ADDR_VAR 0 9
41180: PUSH
41181: LD_VAR 0 1
41185: PPUSH
41186: CALL_OW 475
41190: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41191: LD_ADDR_VAR 0 11
41195: PUSH
41196: LD_VAR 0 1
41200: PPUSH
41201: CALL_OW 476
41205: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41206: LD_ADDR_VAR 0 12
41210: PUSH
41211: LD_VAR 0 1
41215: PPUSH
41216: CALL_OW 477
41220: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41221: LD_ADDR_VAR 0 10
41225: PUSH
41226: LD_VAR 0 1
41230: PPUSH
41231: CALL_OW 478
41235: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41236: LD_VAR 0 9
41240: NOT
41241: PUSH
41242: LD_VAR 0 11
41246: NOT
41247: OR
41248: PUSH
41249: LD_VAR 0 12
41253: NOT
41254: OR
41255: PUSH
41256: LD_VAR 0 10
41260: NOT
41261: OR
41262: IFFALSE 41297
// begin result := [ chassis , engine , control , weapon ] ;
41264: LD_ADDR_VAR 0 6
41268: PUSH
41269: LD_VAR 0 2
41273: PUSH
41274: LD_VAR 0 3
41278: PUSH
41279: LD_VAR 0 4
41283: PUSH
41284: LD_VAR 0 5
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: ST_TO_ADDR
// exit ;
41295: GO 41588
// end ; if not chassis in _chassis then
41297: LD_VAR 0 2
41301: PUSH
41302: LD_VAR 0 9
41306: IN
41307: NOT
41308: IFFALSE 41334
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41310: LD_ADDR_VAR 0 2
41314: PUSH
41315: LD_VAR 0 9
41319: PUSH
41320: LD_INT 1
41322: PPUSH
41323: LD_VAR 0 9
41327: PPUSH
41328: CALL_OW 12
41332: ARRAY
41333: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41334: LD_VAR 0 2
41338: PPUSH
41339: LD_VAR 0 3
41343: PPUSH
41344: CALL 41593 0 2
41348: NOT
41349: IFFALSE 41408
// repeat engine := _engine [ 1 ] ;
41351: LD_ADDR_VAR 0 3
41355: PUSH
41356: LD_VAR 0 11
41360: PUSH
41361: LD_INT 1
41363: ARRAY
41364: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41365: LD_ADDR_VAR 0 11
41369: PUSH
41370: LD_VAR 0 11
41374: PPUSH
41375: LD_INT 1
41377: PPUSH
41378: CALL_OW 3
41382: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41383: LD_VAR 0 2
41387: PPUSH
41388: LD_VAR 0 3
41392: PPUSH
41393: CALL 41593 0 2
41397: PUSH
41398: LD_VAR 0 11
41402: PUSH
41403: EMPTY
41404: EQUAL
41405: OR
41406: IFFALSE 41351
// if not control in _control then
41408: LD_VAR 0 4
41412: PUSH
41413: LD_VAR 0 12
41417: IN
41418: NOT
41419: IFFALSE 41445
// control := _control [ rand ( 1 , _control ) ] ;
41421: LD_ADDR_VAR 0 4
41425: PUSH
41426: LD_VAR 0 12
41430: PUSH
41431: LD_INT 1
41433: PPUSH
41434: LD_VAR 0 12
41438: PPUSH
41439: CALL_OW 12
41443: ARRAY
41444: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41445: LD_VAR 0 2
41449: PPUSH
41450: LD_VAR 0 5
41454: PPUSH
41455: CALL 41813 0 2
41459: NOT
41460: IFFALSE 41519
// repeat weapon := _weapon [ 1 ] ;
41462: LD_ADDR_VAR 0 5
41466: PUSH
41467: LD_VAR 0 10
41471: PUSH
41472: LD_INT 1
41474: ARRAY
41475: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41476: LD_ADDR_VAR 0 10
41480: PUSH
41481: LD_VAR 0 10
41485: PPUSH
41486: LD_INT 1
41488: PPUSH
41489: CALL_OW 3
41493: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41494: LD_VAR 0 2
41498: PPUSH
41499: LD_VAR 0 5
41503: PPUSH
41504: CALL 41813 0 2
41508: PUSH
41509: LD_VAR 0 10
41513: PUSH
41514: EMPTY
41515: EQUAL
41516: OR
41517: IFFALSE 41462
// result := [ ] ;
41519: LD_ADDR_VAR 0 6
41523: PUSH
41524: EMPTY
41525: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41526: LD_VAR 0 1
41530: PPUSH
41531: LD_VAR 0 2
41535: PPUSH
41536: LD_VAR 0 3
41540: PPUSH
41541: LD_VAR 0 4
41545: PPUSH
41546: LD_VAR 0 5
41550: PPUSH
41551: CALL_OW 448
41555: IFFALSE 41588
// result := [ chassis , engine , control , weapon ] ;
41557: LD_ADDR_VAR 0 6
41561: PUSH
41562: LD_VAR 0 2
41566: PUSH
41567: LD_VAR 0 3
41571: PUSH
41572: LD_VAR 0 4
41576: PUSH
41577: LD_VAR 0 5
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: ST_TO_ADDR
// end ;
41588: LD_VAR 0 6
41592: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41593: LD_INT 0
41595: PPUSH
// if not chassis or not engine then
41596: LD_VAR 0 1
41600: NOT
41601: PUSH
41602: LD_VAR 0 2
41606: NOT
41607: OR
41608: IFFALSE 41612
// exit ;
41610: GO 41808
// case engine of engine_solar :
41612: LD_VAR 0 2
41616: PUSH
41617: LD_INT 2
41619: DOUBLE
41620: EQUAL
41621: IFTRUE 41625
41623: GO 41663
41625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41626: LD_ADDR_VAR 0 3
41630: PUSH
41631: LD_INT 11
41633: PUSH
41634: LD_INT 12
41636: PUSH
41637: LD_INT 13
41639: PUSH
41640: LD_INT 14
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 3
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: ST_TO_ADDR
41661: GO 41792
41663: LD_INT 1
41665: DOUBLE
41666: EQUAL
41667: IFTRUE 41671
41669: GO 41733
41671: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41672: LD_ADDR_VAR 0 3
41676: PUSH
41677: LD_INT 11
41679: PUSH
41680: LD_INT 12
41682: PUSH
41683: LD_INT 13
41685: PUSH
41686: LD_INT 14
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: LD_INT 4
41700: PUSH
41701: LD_INT 5
41703: PUSH
41704: LD_INT 21
41706: PUSH
41707: LD_INT 23
41709: PUSH
41710: LD_INT 22
41712: PUSH
41713: LD_INT 24
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: ST_TO_ADDR
41731: GO 41792
41733: LD_INT 3
41735: DOUBLE
41736: EQUAL
41737: IFTRUE 41741
41739: GO 41791
41741: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41742: LD_ADDR_VAR 0 3
41746: PUSH
41747: LD_INT 13
41749: PUSH
41750: LD_INT 14
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: LD_INT 3
41758: PUSH
41759: LD_INT 4
41761: PUSH
41762: LD_INT 5
41764: PUSH
41765: LD_INT 21
41767: PUSH
41768: LD_INT 22
41770: PUSH
41771: LD_INT 23
41773: PUSH
41774: LD_INT 24
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: ST_TO_ADDR
41789: GO 41792
41791: POP
// result := ( chassis in result ) ;
41792: LD_ADDR_VAR 0 3
41796: PUSH
41797: LD_VAR 0 1
41801: PUSH
41802: LD_VAR 0 3
41806: IN
41807: ST_TO_ADDR
// end ;
41808: LD_VAR 0 3
41812: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41813: LD_INT 0
41815: PPUSH
// if not chassis or not weapon then
41816: LD_VAR 0 1
41820: NOT
41821: PUSH
41822: LD_VAR 0 2
41826: NOT
41827: OR
41828: IFFALSE 41832
// exit ;
41830: GO 42892
// case weapon of us_machine_gun :
41832: LD_VAR 0 2
41836: PUSH
41837: LD_INT 2
41839: DOUBLE
41840: EQUAL
41841: IFTRUE 41845
41843: GO 41875
41845: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41846: LD_ADDR_VAR 0 3
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: LD_INT 3
41859: PUSH
41860: LD_INT 4
41862: PUSH
41863: LD_INT 5
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: ST_TO_ADDR
41873: GO 42876
41875: LD_INT 3
41877: DOUBLE
41878: EQUAL
41879: IFTRUE 41883
41881: GO 41913
41883: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41884: LD_ADDR_VAR 0 3
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: LD_INT 3
41897: PUSH
41898: LD_INT 4
41900: PUSH
41901: LD_INT 5
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: ST_TO_ADDR
41911: GO 42876
41913: LD_INT 11
41915: DOUBLE
41916: EQUAL
41917: IFTRUE 41921
41919: GO 41951
41921: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41922: LD_ADDR_VAR 0 3
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: LD_INT 3
41935: PUSH
41936: LD_INT 4
41938: PUSH
41939: LD_INT 5
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: ST_TO_ADDR
41949: GO 42876
41951: LD_INT 4
41953: DOUBLE
41954: EQUAL
41955: IFTRUE 41959
41957: GO 41985
41959: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41960: LD_ADDR_VAR 0 3
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: LD_INT 3
41970: PUSH
41971: LD_INT 4
41973: PUSH
41974: LD_INT 5
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: ST_TO_ADDR
41983: GO 42876
41985: LD_INT 5
41987: DOUBLE
41988: EQUAL
41989: IFTRUE 41993
41991: GO 42019
41993: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41994: LD_ADDR_VAR 0 3
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: LD_INT 4
42007: PUSH
42008: LD_INT 5
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: ST_TO_ADDR
42017: GO 42876
42019: LD_INT 9
42021: DOUBLE
42022: EQUAL
42023: IFTRUE 42027
42025: GO 42053
42027: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42028: LD_ADDR_VAR 0 3
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: LD_INT 3
42038: PUSH
42039: LD_INT 4
42041: PUSH
42042: LD_INT 5
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: ST_TO_ADDR
42051: GO 42876
42053: LD_INT 7
42055: DOUBLE
42056: EQUAL
42057: IFTRUE 42061
42059: GO 42087
42061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42062: LD_ADDR_VAR 0 3
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: LD_INT 4
42075: PUSH
42076: LD_INT 5
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: ST_TO_ADDR
42085: GO 42876
42087: LD_INT 12
42089: DOUBLE
42090: EQUAL
42091: IFTRUE 42095
42093: GO 42121
42095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42096: LD_ADDR_VAR 0 3
42100: PUSH
42101: LD_INT 2
42103: PUSH
42104: LD_INT 3
42106: PUSH
42107: LD_INT 4
42109: PUSH
42110: LD_INT 5
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: ST_TO_ADDR
42119: GO 42876
42121: LD_INT 13
42123: DOUBLE
42124: EQUAL
42125: IFTRUE 42129
42127: GO 42155
42129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42130: LD_ADDR_VAR 0 3
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: LD_INT 3
42140: PUSH
42141: LD_INT 4
42143: PUSH
42144: LD_INT 5
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: ST_TO_ADDR
42153: GO 42876
42155: LD_INT 14
42157: DOUBLE
42158: EQUAL
42159: IFTRUE 42163
42161: GO 42181
42163: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42164: LD_ADDR_VAR 0 3
42168: PUSH
42169: LD_INT 4
42171: PUSH
42172: LD_INT 5
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: ST_TO_ADDR
42179: GO 42876
42181: LD_INT 6
42183: DOUBLE
42184: EQUAL
42185: IFTRUE 42189
42187: GO 42207
42189: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42190: LD_ADDR_VAR 0 3
42194: PUSH
42195: LD_INT 4
42197: PUSH
42198: LD_INT 5
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: ST_TO_ADDR
42205: GO 42876
42207: LD_INT 10
42209: DOUBLE
42210: EQUAL
42211: IFTRUE 42215
42213: GO 42233
42215: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42216: LD_ADDR_VAR 0 3
42220: PUSH
42221: LD_INT 4
42223: PUSH
42224: LD_INT 5
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: ST_TO_ADDR
42231: GO 42876
42233: LD_INT 22
42235: DOUBLE
42236: EQUAL
42237: IFTRUE 42241
42239: GO 42267
42241: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42242: LD_ADDR_VAR 0 3
42246: PUSH
42247: LD_INT 11
42249: PUSH
42250: LD_INT 12
42252: PUSH
42253: LD_INT 13
42255: PUSH
42256: LD_INT 14
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: ST_TO_ADDR
42265: GO 42876
42267: LD_INT 23
42269: DOUBLE
42270: EQUAL
42271: IFTRUE 42275
42273: GO 42301
42275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42276: LD_ADDR_VAR 0 3
42280: PUSH
42281: LD_INT 11
42283: PUSH
42284: LD_INT 12
42286: PUSH
42287: LD_INT 13
42289: PUSH
42290: LD_INT 14
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: ST_TO_ADDR
42299: GO 42876
42301: LD_INT 24
42303: DOUBLE
42304: EQUAL
42305: IFTRUE 42309
42307: GO 42335
42309: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42310: LD_ADDR_VAR 0 3
42314: PUSH
42315: LD_INT 11
42317: PUSH
42318: LD_INT 12
42320: PUSH
42321: LD_INT 13
42323: PUSH
42324: LD_INT 14
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: ST_TO_ADDR
42333: GO 42876
42335: LD_INT 30
42337: DOUBLE
42338: EQUAL
42339: IFTRUE 42343
42341: GO 42369
42343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42344: LD_ADDR_VAR 0 3
42348: PUSH
42349: LD_INT 11
42351: PUSH
42352: LD_INT 12
42354: PUSH
42355: LD_INT 13
42357: PUSH
42358: LD_INT 14
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: ST_TO_ADDR
42367: GO 42876
42369: LD_INT 25
42371: DOUBLE
42372: EQUAL
42373: IFTRUE 42377
42375: GO 42395
42377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42378: LD_ADDR_VAR 0 3
42382: PUSH
42383: LD_INT 13
42385: PUSH
42386: LD_INT 14
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: ST_TO_ADDR
42393: GO 42876
42395: LD_INT 27
42397: DOUBLE
42398: EQUAL
42399: IFTRUE 42403
42401: GO 42421
42403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42404: LD_ADDR_VAR 0 3
42408: PUSH
42409: LD_INT 13
42411: PUSH
42412: LD_INT 14
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: ST_TO_ADDR
42419: GO 42876
42421: LD_INT 92
42423: DOUBLE
42424: EQUAL
42425: IFTRUE 42429
42427: GO 42455
42429: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42430: LD_ADDR_VAR 0 3
42434: PUSH
42435: LD_INT 11
42437: PUSH
42438: LD_INT 12
42440: PUSH
42441: LD_INT 13
42443: PUSH
42444: LD_INT 14
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: ST_TO_ADDR
42453: GO 42876
42455: LD_INT 28
42457: DOUBLE
42458: EQUAL
42459: IFTRUE 42463
42461: GO 42481
42463: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42464: LD_ADDR_VAR 0 3
42468: PUSH
42469: LD_INT 13
42471: PUSH
42472: LD_INT 14
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: ST_TO_ADDR
42479: GO 42876
42481: LD_INT 29
42483: DOUBLE
42484: EQUAL
42485: IFTRUE 42489
42487: GO 42507
42489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42490: LD_ADDR_VAR 0 3
42494: PUSH
42495: LD_INT 13
42497: PUSH
42498: LD_INT 14
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: ST_TO_ADDR
42505: GO 42876
42507: LD_INT 31
42509: DOUBLE
42510: EQUAL
42511: IFTRUE 42515
42513: GO 42533
42515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42516: LD_ADDR_VAR 0 3
42520: PUSH
42521: LD_INT 13
42523: PUSH
42524: LD_INT 14
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: ST_TO_ADDR
42531: GO 42876
42533: LD_INT 26
42535: DOUBLE
42536: EQUAL
42537: IFTRUE 42541
42539: GO 42559
42541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42542: LD_ADDR_VAR 0 3
42546: PUSH
42547: LD_INT 13
42549: PUSH
42550: LD_INT 14
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: ST_TO_ADDR
42557: GO 42876
42559: LD_INT 42
42561: DOUBLE
42562: EQUAL
42563: IFTRUE 42567
42565: GO 42593
42567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42568: LD_ADDR_VAR 0 3
42572: PUSH
42573: LD_INT 21
42575: PUSH
42576: LD_INT 22
42578: PUSH
42579: LD_INT 23
42581: PUSH
42582: LD_INT 24
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: ST_TO_ADDR
42591: GO 42876
42593: LD_INT 43
42595: DOUBLE
42596: EQUAL
42597: IFTRUE 42601
42599: GO 42627
42601: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42602: LD_ADDR_VAR 0 3
42606: PUSH
42607: LD_INT 21
42609: PUSH
42610: LD_INT 22
42612: PUSH
42613: LD_INT 23
42615: PUSH
42616: LD_INT 24
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: ST_TO_ADDR
42625: GO 42876
42627: LD_INT 44
42629: DOUBLE
42630: EQUAL
42631: IFTRUE 42635
42633: GO 42661
42635: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42636: LD_ADDR_VAR 0 3
42640: PUSH
42641: LD_INT 21
42643: PUSH
42644: LD_INT 22
42646: PUSH
42647: LD_INT 23
42649: PUSH
42650: LD_INT 24
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: ST_TO_ADDR
42659: GO 42876
42661: LD_INT 45
42663: DOUBLE
42664: EQUAL
42665: IFTRUE 42669
42667: GO 42695
42669: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42670: LD_ADDR_VAR 0 3
42674: PUSH
42675: LD_INT 21
42677: PUSH
42678: LD_INT 22
42680: PUSH
42681: LD_INT 23
42683: PUSH
42684: LD_INT 24
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: ST_TO_ADDR
42693: GO 42876
42695: LD_INT 49
42697: DOUBLE
42698: EQUAL
42699: IFTRUE 42703
42701: GO 42729
42703: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42704: LD_ADDR_VAR 0 3
42708: PUSH
42709: LD_INT 21
42711: PUSH
42712: LD_INT 22
42714: PUSH
42715: LD_INT 23
42717: PUSH
42718: LD_INT 24
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: ST_TO_ADDR
42727: GO 42876
42729: LD_INT 51
42731: DOUBLE
42732: EQUAL
42733: IFTRUE 42737
42735: GO 42763
42737: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42738: LD_ADDR_VAR 0 3
42742: PUSH
42743: LD_INT 21
42745: PUSH
42746: LD_INT 22
42748: PUSH
42749: LD_INT 23
42751: PUSH
42752: LD_INT 24
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: ST_TO_ADDR
42761: GO 42876
42763: LD_INT 52
42765: DOUBLE
42766: EQUAL
42767: IFTRUE 42771
42769: GO 42797
42771: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42772: LD_ADDR_VAR 0 3
42776: PUSH
42777: LD_INT 21
42779: PUSH
42780: LD_INT 22
42782: PUSH
42783: LD_INT 23
42785: PUSH
42786: LD_INT 24
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: ST_TO_ADDR
42795: GO 42876
42797: LD_INT 53
42799: DOUBLE
42800: EQUAL
42801: IFTRUE 42805
42803: GO 42823
42805: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: LD_INT 23
42813: PUSH
42814: LD_INT 24
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: ST_TO_ADDR
42821: GO 42876
42823: LD_INT 46
42825: DOUBLE
42826: EQUAL
42827: IFTRUE 42831
42829: GO 42849
42831: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42832: LD_ADDR_VAR 0 3
42836: PUSH
42837: LD_INT 23
42839: PUSH
42840: LD_INT 24
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: ST_TO_ADDR
42847: GO 42876
42849: LD_INT 47
42851: DOUBLE
42852: EQUAL
42853: IFTRUE 42857
42855: GO 42875
42857: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42858: LD_ADDR_VAR 0 3
42862: PUSH
42863: LD_INT 23
42865: PUSH
42866: LD_INT 24
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: ST_TO_ADDR
42873: GO 42876
42875: POP
// result := ( chassis in result ) ;
42876: LD_ADDR_VAR 0 3
42880: PUSH
42881: LD_VAR 0 1
42885: PUSH
42886: LD_VAR 0 3
42890: IN
42891: ST_TO_ADDR
// end ;
42892: LD_VAR 0 3
42896: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42897: LD_INT 0
42899: PPUSH
42900: PPUSH
42901: PPUSH
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
// result := array ;
42906: LD_ADDR_VAR 0 5
42910: PUSH
42911: LD_VAR 0 1
42915: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42916: LD_VAR 0 1
42920: NOT
42921: PUSH
42922: LD_VAR 0 2
42926: NOT
42927: OR
42928: PUSH
42929: LD_VAR 0 3
42933: NOT
42934: OR
42935: PUSH
42936: LD_VAR 0 2
42940: PUSH
42941: LD_VAR 0 1
42945: GREATER
42946: OR
42947: PUSH
42948: LD_VAR 0 3
42952: PUSH
42953: LD_VAR 0 1
42957: GREATER
42958: OR
42959: IFFALSE 42963
// exit ;
42961: GO 43259
// if direction then
42963: LD_VAR 0 4
42967: IFFALSE 43031
// begin d := 1 ;
42969: LD_ADDR_VAR 0 9
42973: PUSH
42974: LD_INT 1
42976: ST_TO_ADDR
// if i_from > i_to then
42977: LD_VAR 0 2
42981: PUSH
42982: LD_VAR 0 3
42986: GREATER
42987: IFFALSE 43013
// length := ( array - i_from ) + i_to else
42989: LD_ADDR_VAR 0 11
42993: PUSH
42994: LD_VAR 0 1
42998: PUSH
42999: LD_VAR 0 2
43003: MINUS
43004: PUSH
43005: LD_VAR 0 3
43009: PLUS
43010: ST_TO_ADDR
43011: GO 43029
// length := i_to - i_from ;
43013: LD_ADDR_VAR 0 11
43017: PUSH
43018: LD_VAR 0 3
43022: PUSH
43023: LD_VAR 0 2
43027: MINUS
43028: ST_TO_ADDR
// end else
43029: GO 43092
// begin d := - 1 ;
43031: LD_ADDR_VAR 0 9
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: ST_TO_ADDR
// if i_from > i_to then
43040: LD_VAR 0 2
43044: PUSH
43045: LD_VAR 0 3
43049: GREATER
43050: IFFALSE 43070
// length := i_from - i_to else
43052: LD_ADDR_VAR 0 11
43056: PUSH
43057: LD_VAR 0 2
43061: PUSH
43062: LD_VAR 0 3
43066: MINUS
43067: ST_TO_ADDR
43068: GO 43092
// length := ( array - i_to ) + i_from ;
43070: LD_ADDR_VAR 0 11
43074: PUSH
43075: LD_VAR 0 1
43079: PUSH
43080: LD_VAR 0 3
43084: MINUS
43085: PUSH
43086: LD_VAR 0 2
43090: PLUS
43091: ST_TO_ADDR
// end ; if not length then
43092: LD_VAR 0 11
43096: NOT
43097: IFFALSE 43101
// exit ;
43099: GO 43259
// tmp := array ;
43101: LD_ADDR_VAR 0 10
43105: PUSH
43106: LD_VAR 0 1
43110: ST_TO_ADDR
// for i = 1 to length do
43111: LD_ADDR_VAR 0 6
43115: PUSH
43116: DOUBLE
43117: LD_INT 1
43119: DEC
43120: ST_TO_ADDR
43121: LD_VAR 0 11
43125: PUSH
43126: FOR_TO
43127: IFFALSE 43247
// begin for j = 1 to array do
43129: LD_ADDR_VAR 0 7
43133: PUSH
43134: DOUBLE
43135: LD_INT 1
43137: DEC
43138: ST_TO_ADDR
43139: LD_VAR 0 1
43143: PUSH
43144: FOR_TO
43145: IFFALSE 43233
// begin k := j + d ;
43147: LD_ADDR_VAR 0 8
43151: PUSH
43152: LD_VAR 0 7
43156: PUSH
43157: LD_VAR 0 9
43161: PLUS
43162: ST_TO_ADDR
// if k > array then
43163: LD_VAR 0 8
43167: PUSH
43168: LD_VAR 0 1
43172: GREATER
43173: IFFALSE 43183
// k := 1 ;
43175: LD_ADDR_VAR 0 8
43179: PUSH
43180: LD_INT 1
43182: ST_TO_ADDR
// if not k then
43183: LD_VAR 0 8
43187: NOT
43188: IFFALSE 43200
// k := array ;
43190: LD_ADDR_VAR 0 8
43194: PUSH
43195: LD_VAR 0 1
43199: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43200: LD_ADDR_VAR 0 10
43204: PUSH
43205: LD_VAR 0 10
43209: PPUSH
43210: LD_VAR 0 8
43214: PPUSH
43215: LD_VAR 0 1
43219: PUSH
43220: LD_VAR 0 7
43224: ARRAY
43225: PPUSH
43226: CALL_OW 1
43230: ST_TO_ADDR
// end ;
43231: GO 43144
43233: POP
43234: POP
// array := tmp ;
43235: LD_ADDR_VAR 0 1
43239: PUSH
43240: LD_VAR 0 10
43244: ST_TO_ADDR
// end ;
43245: GO 43126
43247: POP
43248: POP
// result := array ;
43249: LD_ADDR_VAR 0 5
43253: PUSH
43254: LD_VAR 0 1
43258: ST_TO_ADDR
// end ;
43259: LD_VAR 0 5
43263: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43264: LD_INT 0
43266: PPUSH
43267: PPUSH
// result := 0 ;
43268: LD_ADDR_VAR 0 3
43272: PUSH
43273: LD_INT 0
43275: ST_TO_ADDR
// if not array or not value in array then
43276: LD_VAR 0 1
43280: NOT
43281: PUSH
43282: LD_VAR 0 2
43286: PUSH
43287: LD_VAR 0 1
43291: IN
43292: NOT
43293: OR
43294: IFFALSE 43298
// exit ;
43296: GO 43352
// for i = 1 to array do
43298: LD_ADDR_VAR 0 4
43302: PUSH
43303: DOUBLE
43304: LD_INT 1
43306: DEC
43307: ST_TO_ADDR
43308: LD_VAR 0 1
43312: PUSH
43313: FOR_TO
43314: IFFALSE 43350
// if value = array [ i ] then
43316: LD_VAR 0 2
43320: PUSH
43321: LD_VAR 0 1
43325: PUSH
43326: LD_VAR 0 4
43330: ARRAY
43331: EQUAL
43332: IFFALSE 43348
// begin result := i ;
43334: LD_ADDR_VAR 0 3
43338: PUSH
43339: LD_VAR 0 4
43343: ST_TO_ADDR
// exit ;
43344: POP
43345: POP
43346: GO 43352
// end ;
43348: GO 43313
43350: POP
43351: POP
// end ;
43352: LD_VAR 0 3
43356: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43357: LD_INT 0
43359: PPUSH
// vc_chassis := chassis ;
43360: LD_ADDR_OWVAR 37
43364: PUSH
43365: LD_VAR 0 1
43369: ST_TO_ADDR
// vc_engine := engine ;
43370: LD_ADDR_OWVAR 39
43374: PUSH
43375: LD_VAR 0 2
43379: ST_TO_ADDR
// vc_control := control ;
43380: LD_ADDR_OWVAR 38
43384: PUSH
43385: LD_VAR 0 3
43389: ST_TO_ADDR
// vc_weapon := weapon ;
43390: LD_ADDR_OWVAR 40
43394: PUSH
43395: LD_VAR 0 4
43399: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43400: LD_ADDR_OWVAR 41
43404: PUSH
43405: LD_VAR 0 5
43409: ST_TO_ADDR
// end ;
43410: LD_VAR 0 6
43414: RET
// export function WantPlant ( unit ) ; var task ; begin
43415: LD_INT 0
43417: PPUSH
43418: PPUSH
// result := false ;
43419: LD_ADDR_VAR 0 2
43423: PUSH
43424: LD_INT 0
43426: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43427: LD_ADDR_VAR 0 3
43431: PUSH
43432: LD_VAR 0 1
43436: PPUSH
43437: CALL_OW 437
43441: ST_TO_ADDR
// if task then
43442: LD_VAR 0 3
43446: IFFALSE 43474
// if task [ 1 ] [ 1 ] = p then
43448: LD_VAR 0 3
43452: PUSH
43453: LD_INT 1
43455: ARRAY
43456: PUSH
43457: LD_INT 1
43459: ARRAY
43460: PUSH
43461: LD_STRING p
43463: EQUAL
43464: IFFALSE 43474
// result := true ;
43466: LD_ADDR_VAR 0 2
43470: PUSH
43471: LD_INT 1
43473: ST_TO_ADDR
// end ;
43474: LD_VAR 0 2
43478: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43479: LD_INT 0
43481: PPUSH
43482: PPUSH
43483: PPUSH
43484: PPUSH
// if pos < 1 then
43485: LD_VAR 0 2
43489: PUSH
43490: LD_INT 1
43492: LESS
43493: IFFALSE 43497
// exit ;
43495: GO 43800
// if pos = 1 then
43497: LD_VAR 0 2
43501: PUSH
43502: LD_INT 1
43504: EQUAL
43505: IFFALSE 43538
// result := Replace ( arr , pos [ 1 ] , value ) else
43507: LD_ADDR_VAR 0 4
43511: PUSH
43512: LD_VAR 0 1
43516: PPUSH
43517: LD_VAR 0 2
43521: PUSH
43522: LD_INT 1
43524: ARRAY
43525: PPUSH
43526: LD_VAR 0 3
43530: PPUSH
43531: CALL_OW 1
43535: ST_TO_ADDR
43536: GO 43800
// begin tmp := arr ;
43538: LD_ADDR_VAR 0 6
43542: PUSH
43543: LD_VAR 0 1
43547: ST_TO_ADDR
// s_arr := [ tmp ] ;
43548: LD_ADDR_VAR 0 7
43552: PUSH
43553: LD_VAR 0 6
43557: PUSH
43558: EMPTY
43559: LIST
43560: ST_TO_ADDR
// for i = 1 to pos - 1 do
43561: LD_ADDR_VAR 0 5
43565: PUSH
43566: DOUBLE
43567: LD_INT 1
43569: DEC
43570: ST_TO_ADDR
43571: LD_VAR 0 2
43575: PUSH
43576: LD_INT 1
43578: MINUS
43579: PUSH
43580: FOR_TO
43581: IFFALSE 43626
// begin tmp := tmp [ pos [ i ] ] ;
43583: LD_ADDR_VAR 0 6
43587: PUSH
43588: LD_VAR 0 6
43592: PUSH
43593: LD_VAR 0 2
43597: PUSH
43598: LD_VAR 0 5
43602: ARRAY
43603: ARRAY
43604: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43605: LD_ADDR_VAR 0 7
43609: PUSH
43610: LD_VAR 0 7
43614: PUSH
43615: LD_VAR 0 6
43619: PUSH
43620: EMPTY
43621: LIST
43622: ADD
43623: ST_TO_ADDR
// end ;
43624: GO 43580
43626: POP
43627: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43628: LD_ADDR_VAR 0 6
43632: PUSH
43633: LD_VAR 0 6
43637: PPUSH
43638: LD_VAR 0 2
43642: PUSH
43643: LD_VAR 0 2
43647: ARRAY
43648: PPUSH
43649: LD_VAR 0 3
43653: PPUSH
43654: CALL_OW 1
43658: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43659: LD_ADDR_VAR 0 7
43663: PUSH
43664: LD_VAR 0 7
43668: PPUSH
43669: LD_VAR 0 7
43673: PPUSH
43674: LD_VAR 0 6
43678: PPUSH
43679: CALL_OW 1
43683: ST_TO_ADDR
// for i = s_arr downto 2 do
43684: LD_ADDR_VAR 0 5
43688: PUSH
43689: DOUBLE
43690: LD_VAR 0 7
43694: INC
43695: ST_TO_ADDR
43696: LD_INT 2
43698: PUSH
43699: FOR_DOWNTO
43700: IFFALSE 43784
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43702: LD_ADDR_VAR 0 6
43706: PUSH
43707: LD_VAR 0 7
43711: PUSH
43712: LD_VAR 0 5
43716: PUSH
43717: LD_INT 1
43719: MINUS
43720: ARRAY
43721: PPUSH
43722: LD_VAR 0 2
43726: PUSH
43727: LD_VAR 0 5
43731: PUSH
43732: LD_INT 1
43734: MINUS
43735: ARRAY
43736: PPUSH
43737: LD_VAR 0 7
43741: PUSH
43742: LD_VAR 0 5
43746: ARRAY
43747: PPUSH
43748: CALL_OW 1
43752: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43753: LD_ADDR_VAR 0 7
43757: PUSH
43758: LD_VAR 0 7
43762: PPUSH
43763: LD_VAR 0 5
43767: PUSH
43768: LD_INT 1
43770: MINUS
43771: PPUSH
43772: LD_VAR 0 6
43776: PPUSH
43777: CALL_OW 1
43781: ST_TO_ADDR
// end ;
43782: GO 43699
43784: POP
43785: POP
// result := s_arr [ 1 ] ;
43786: LD_ADDR_VAR 0 4
43790: PUSH
43791: LD_VAR 0 7
43795: PUSH
43796: LD_INT 1
43798: ARRAY
43799: ST_TO_ADDR
// end ; end ;
43800: LD_VAR 0 4
43804: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43805: LD_INT 0
43807: PPUSH
43808: PPUSH
// if not list then
43809: LD_VAR 0 1
43813: NOT
43814: IFFALSE 43818
// exit ;
43816: GO 43909
// i := list [ pos1 ] ;
43818: LD_ADDR_VAR 0 5
43822: PUSH
43823: LD_VAR 0 1
43827: PUSH
43828: LD_VAR 0 2
43832: ARRAY
43833: ST_TO_ADDR
// if not i then
43834: LD_VAR 0 5
43838: NOT
43839: IFFALSE 43843
// exit ;
43841: GO 43909
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43843: LD_ADDR_VAR 0 1
43847: PUSH
43848: LD_VAR 0 1
43852: PPUSH
43853: LD_VAR 0 2
43857: PPUSH
43858: LD_VAR 0 1
43862: PUSH
43863: LD_VAR 0 3
43867: ARRAY
43868: PPUSH
43869: CALL_OW 1
43873: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43874: LD_ADDR_VAR 0 1
43878: PUSH
43879: LD_VAR 0 1
43883: PPUSH
43884: LD_VAR 0 3
43888: PPUSH
43889: LD_VAR 0 5
43893: PPUSH
43894: CALL_OW 1
43898: ST_TO_ADDR
// result := list ;
43899: LD_ADDR_VAR 0 4
43903: PUSH
43904: LD_VAR 0 1
43908: ST_TO_ADDR
// end ;
43909: LD_VAR 0 4
43913: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43914: LD_INT 0
43916: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43917: LD_ADDR_VAR 0 5
43921: PUSH
43922: LD_VAR 0 1
43926: PPUSH
43927: CALL_OW 250
43931: PPUSH
43932: LD_VAR 0 1
43936: PPUSH
43937: CALL_OW 251
43941: PPUSH
43942: LD_VAR 0 2
43946: PPUSH
43947: LD_VAR 0 3
43951: PPUSH
43952: LD_VAR 0 4
43956: PPUSH
43957: CALL 43967 0 5
43961: ST_TO_ADDR
// end ;
43962: LD_VAR 0 5
43966: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43967: LD_INT 0
43969: PPUSH
43970: PPUSH
43971: PPUSH
43972: PPUSH
// if not list then
43973: LD_VAR 0 3
43977: NOT
43978: IFFALSE 43982
// exit ;
43980: GO 44370
// result := [ ] ;
43982: LD_ADDR_VAR 0 6
43986: PUSH
43987: EMPTY
43988: ST_TO_ADDR
// for i in list do
43989: LD_ADDR_VAR 0 7
43993: PUSH
43994: LD_VAR 0 3
43998: PUSH
43999: FOR_IN
44000: IFFALSE 44202
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44002: LD_ADDR_VAR 0 9
44006: PUSH
44007: LD_VAR 0 7
44011: PPUSH
44012: LD_VAR 0 1
44016: PPUSH
44017: LD_VAR 0 2
44021: PPUSH
44022: CALL_OW 297
44026: ST_TO_ADDR
// if not result then
44027: LD_VAR 0 6
44031: NOT
44032: IFFALSE 44058
// result := [ [ i , tmp ] ] else
44034: LD_ADDR_VAR 0 6
44038: PUSH
44039: LD_VAR 0 7
44043: PUSH
44044: LD_VAR 0 9
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: ST_TO_ADDR
44056: GO 44200
// begin if result [ result ] [ 2 ] < tmp then
44058: LD_VAR 0 6
44062: PUSH
44063: LD_VAR 0 6
44067: ARRAY
44068: PUSH
44069: LD_INT 2
44071: ARRAY
44072: PUSH
44073: LD_VAR 0 9
44077: LESS
44078: IFFALSE 44120
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44080: LD_ADDR_VAR 0 6
44084: PUSH
44085: LD_VAR 0 6
44089: PPUSH
44090: LD_VAR 0 6
44094: PUSH
44095: LD_INT 1
44097: PLUS
44098: PPUSH
44099: LD_VAR 0 7
44103: PUSH
44104: LD_VAR 0 9
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PPUSH
44113: CALL_OW 2
44117: ST_TO_ADDR
44118: GO 44200
// for j = 1 to result do
44120: LD_ADDR_VAR 0 8
44124: PUSH
44125: DOUBLE
44126: LD_INT 1
44128: DEC
44129: ST_TO_ADDR
44130: LD_VAR 0 6
44134: PUSH
44135: FOR_TO
44136: IFFALSE 44198
// begin if tmp < result [ j ] [ 2 ] then
44138: LD_VAR 0 9
44142: PUSH
44143: LD_VAR 0 6
44147: PUSH
44148: LD_VAR 0 8
44152: ARRAY
44153: PUSH
44154: LD_INT 2
44156: ARRAY
44157: LESS
44158: IFFALSE 44196
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44160: LD_ADDR_VAR 0 6
44164: PUSH
44165: LD_VAR 0 6
44169: PPUSH
44170: LD_VAR 0 8
44174: PPUSH
44175: LD_VAR 0 7
44179: PUSH
44180: LD_VAR 0 9
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PPUSH
44189: CALL_OW 2
44193: ST_TO_ADDR
// break ;
44194: GO 44198
// end ; end ;
44196: GO 44135
44198: POP
44199: POP
// end ; end ;
44200: GO 43999
44202: POP
44203: POP
// if result and not asc then
44204: LD_VAR 0 6
44208: PUSH
44209: LD_VAR 0 4
44213: NOT
44214: AND
44215: IFFALSE 44290
// begin tmp := result ;
44217: LD_ADDR_VAR 0 9
44221: PUSH
44222: LD_VAR 0 6
44226: ST_TO_ADDR
// for i = tmp downto 1 do
44227: LD_ADDR_VAR 0 7
44231: PUSH
44232: DOUBLE
44233: LD_VAR 0 9
44237: INC
44238: ST_TO_ADDR
44239: LD_INT 1
44241: PUSH
44242: FOR_DOWNTO
44243: IFFALSE 44288
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44245: LD_ADDR_VAR 0 6
44249: PUSH
44250: LD_VAR 0 6
44254: PPUSH
44255: LD_VAR 0 9
44259: PUSH
44260: LD_VAR 0 7
44264: MINUS
44265: PUSH
44266: LD_INT 1
44268: PLUS
44269: PPUSH
44270: LD_VAR 0 9
44274: PUSH
44275: LD_VAR 0 7
44279: ARRAY
44280: PPUSH
44281: CALL_OW 1
44285: ST_TO_ADDR
44286: GO 44242
44288: POP
44289: POP
// end ; tmp := [ ] ;
44290: LD_ADDR_VAR 0 9
44294: PUSH
44295: EMPTY
44296: ST_TO_ADDR
// if mode then
44297: LD_VAR 0 5
44301: IFFALSE 44370
// begin for i = 1 to result do
44303: LD_ADDR_VAR 0 7
44307: PUSH
44308: DOUBLE
44309: LD_INT 1
44311: DEC
44312: ST_TO_ADDR
44313: LD_VAR 0 6
44317: PUSH
44318: FOR_TO
44319: IFFALSE 44358
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44321: LD_ADDR_VAR 0 9
44325: PUSH
44326: LD_VAR 0 9
44330: PPUSH
44331: LD_VAR 0 7
44335: PPUSH
44336: LD_VAR 0 6
44340: PUSH
44341: LD_VAR 0 7
44345: ARRAY
44346: PUSH
44347: LD_INT 1
44349: ARRAY
44350: PPUSH
44351: CALL_OW 1
44355: ST_TO_ADDR
44356: GO 44318
44358: POP
44359: POP
// result := tmp ;
44360: LD_ADDR_VAR 0 6
44364: PUSH
44365: LD_VAR 0 9
44369: ST_TO_ADDR
// end ; end ;
44370: LD_VAR 0 6
44374: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44375: LD_INT 0
44377: PPUSH
44378: PPUSH
44379: PPUSH
44380: PPUSH
44381: PPUSH
44382: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44383: LD_ADDR_VAR 0 5
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: ST_TO_ADDR
// if not x or not y then
44405: LD_VAR 0 2
44409: NOT
44410: PUSH
44411: LD_VAR 0 3
44415: NOT
44416: OR
44417: IFFALSE 44421
// exit ;
44419: GO 46071
// if not range then
44421: LD_VAR 0 4
44425: NOT
44426: IFFALSE 44436
// range := 10 ;
44428: LD_ADDR_VAR 0 4
44432: PUSH
44433: LD_INT 10
44435: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44436: LD_ADDR_VAR 0 8
44440: PUSH
44441: LD_INT 81
44443: PUSH
44444: LD_VAR 0 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 92
44455: PUSH
44456: LD_VAR 0 2
44460: PUSH
44461: LD_VAR 0 3
44465: PUSH
44466: LD_VAR 0 4
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 3
44479: PUSH
44480: LD_INT 21
44482: PUSH
44483: LD_INT 3
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: LIST
44498: PPUSH
44499: CALL_OW 69
44503: ST_TO_ADDR
// if not tmp then
44504: LD_VAR 0 8
44508: NOT
44509: IFFALSE 44513
// exit ;
44511: GO 46071
// for i in tmp do
44513: LD_ADDR_VAR 0 6
44517: PUSH
44518: LD_VAR 0 8
44522: PUSH
44523: FOR_IN
44524: IFFALSE 46046
// begin points := [ 0 , 0 , 0 ] ;
44526: LD_ADDR_VAR 0 9
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: LIST
44544: ST_TO_ADDR
// bpoints := 1 ;
44545: LD_ADDR_VAR 0 10
44549: PUSH
44550: LD_INT 1
44552: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44553: LD_VAR 0 6
44557: PPUSH
44558: CALL_OW 247
44562: PUSH
44563: LD_INT 1
44565: DOUBLE
44566: EQUAL
44567: IFTRUE 44571
44569: GO 45149
44571: POP
// begin if GetClass ( i ) = 1 then
44572: LD_VAR 0 6
44576: PPUSH
44577: CALL_OW 257
44581: PUSH
44582: LD_INT 1
44584: EQUAL
44585: IFFALSE 44606
// points := [ 10 , 5 , 3 ] ;
44587: LD_ADDR_VAR 0 9
44591: PUSH
44592: LD_INT 10
44594: PUSH
44595: LD_INT 5
44597: PUSH
44598: LD_INT 3
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: LIST
44605: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44606: LD_VAR 0 6
44610: PPUSH
44611: CALL_OW 257
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: LD_INT 3
44621: PUSH
44622: LD_INT 4
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: LIST
44629: IN
44630: IFFALSE 44651
// points := [ 3 , 2 , 1 ] ;
44632: LD_ADDR_VAR 0 9
44636: PUSH
44637: LD_INT 3
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: LIST
44650: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44651: LD_VAR 0 6
44655: PPUSH
44656: CALL_OW 257
44660: PUSH
44661: LD_INT 5
44663: EQUAL
44664: IFFALSE 44685
// points := [ 130 , 5 , 2 ] ;
44666: LD_ADDR_VAR 0 9
44670: PUSH
44671: LD_INT 130
44673: PUSH
44674: LD_INT 5
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: LIST
44684: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44685: LD_VAR 0 6
44689: PPUSH
44690: CALL_OW 257
44694: PUSH
44695: LD_INT 8
44697: EQUAL
44698: IFFALSE 44719
// points := [ 35 , 35 , 30 ] ;
44700: LD_ADDR_VAR 0 9
44704: PUSH
44705: LD_INT 35
44707: PUSH
44708: LD_INT 35
44710: PUSH
44711: LD_INT 30
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: LIST
44718: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44719: LD_VAR 0 6
44723: PPUSH
44724: CALL_OW 257
44728: PUSH
44729: LD_INT 9
44731: EQUAL
44732: IFFALSE 44753
// points := [ 20 , 55 , 40 ] ;
44734: LD_ADDR_VAR 0 9
44738: PUSH
44739: LD_INT 20
44741: PUSH
44742: LD_INT 55
44744: PUSH
44745: LD_INT 40
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: LIST
44752: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44753: LD_VAR 0 6
44757: PPUSH
44758: CALL_OW 257
44762: PUSH
44763: LD_INT 12
44765: PUSH
44766: LD_INT 16
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: IN
44773: IFFALSE 44794
// points := [ 5 , 3 , 2 ] ;
44775: LD_ADDR_VAR 0 9
44779: PUSH
44780: LD_INT 5
44782: PUSH
44783: LD_INT 3
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44794: LD_VAR 0 6
44798: PPUSH
44799: CALL_OW 257
44803: PUSH
44804: LD_INT 17
44806: EQUAL
44807: IFFALSE 44828
// points := [ 100 , 50 , 75 ] ;
44809: LD_ADDR_VAR 0 9
44813: PUSH
44814: LD_INT 100
44816: PUSH
44817: LD_INT 50
44819: PUSH
44820: LD_INT 75
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44828: LD_VAR 0 6
44832: PPUSH
44833: CALL_OW 257
44837: PUSH
44838: LD_INT 15
44840: EQUAL
44841: IFFALSE 44862
// points := [ 10 , 5 , 3 ] ;
44843: LD_ADDR_VAR 0 9
44847: PUSH
44848: LD_INT 10
44850: PUSH
44851: LD_INT 5
44853: PUSH
44854: LD_INT 3
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: LIST
44861: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44862: LD_VAR 0 6
44866: PPUSH
44867: CALL_OW 257
44871: PUSH
44872: LD_INT 14
44874: EQUAL
44875: IFFALSE 44896
// points := [ 10 , 0 , 0 ] ;
44877: LD_ADDR_VAR 0 9
44881: PUSH
44882: LD_INT 10
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44896: LD_VAR 0 6
44900: PPUSH
44901: CALL_OW 257
44905: PUSH
44906: LD_INT 11
44908: EQUAL
44909: IFFALSE 44930
// points := [ 30 , 10 , 5 ] ;
44911: LD_ADDR_VAR 0 9
44915: PUSH
44916: LD_INT 30
44918: PUSH
44919: LD_INT 10
44921: PUSH
44922: LD_INT 5
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: LIST
44929: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44930: LD_VAR 0 1
44934: PPUSH
44935: LD_INT 5
44937: PPUSH
44938: CALL_OW 321
44942: PUSH
44943: LD_INT 2
44945: EQUAL
44946: IFFALSE 44963
// bpoints := bpoints * 1.8 ;
44948: LD_ADDR_VAR 0 10
44952: PUSH
44953: LD_VAR 0 10
44957: PUSH
44958: LD_REAL  1.80000000000000E+0000
44961: MUL
44962: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44963: LD_VAR 0 6
44967: PPUSH
44968: CALL_OW 257
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: LD_INT 3
44981: PUSH
44982: LD_INT 4
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: IN
44991: PUSH
44992: LD_VAR 0 1
44996: PPUSH
44997: LD_INT 51
44999: PPUSH
45000: CALL_OW 321
45004: PUSH
45005: LD_INT 2
45007: EQUAL
45008: AND
45009: IFFALSE 45026
// bpoints := bpoints * 1.2 ;
45011: LD_ADDR_VAR 0 10
45015: PUSH
45016: LD_VAR 0 10
45020: PUSH
45021: LD_REAL  1.20000000000000E+0000
45024: MUL
45025: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45026: LD_VAR 0 6
45030: PPUSH
45031: CALL_OW 257
45035: PUSH
45036: LD_INT 5
45038: PUSH
45039: LD_INT 7
45041: PUSH
45042: LD_INT 9
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: IN
45050: PUSH
45051: LD_VAR 0 1
45055: PPUSH
45056: LD_INT 52
45058: PPUSH
45059: CALL_OW 321
45063: PUSH
45064: LD_INT 2
45066: EQUAL
45067: AND
45068: IFFALSE 45085
// bpoints := bpoints * 1.5 ;
45070: LD_ADDR_VAR 0 10
45074: PUSH
45075: LD_VAR 0 10
45079: PUSH
45080: LD_REAL  1.50000000000000E+0000
45083: MUL
45084: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45085: LD_VAR 0 1
45089: PPUSH
45090: LD_INT 66
45092: PPUSH
45093: CALL_OW 321
45097: PUSH
45098: LD_INT 2
45100: EQUAL
45101: IFFALSE 45118
// bpoints := bpoints * 1.1 ;
45103: LD_ADDR_VAR 0 10
45107: PUSH
45108: LD_VAR 0 10
45112: PUSH
45113: LD_REAL  1.10000000000000E+0000
45116: MUL
45117: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45118: LD_ADDR_VAR 0 10
45122: PUSH
45123: LD_VAR 0 10
45127: PUSH
45128: LD_VAR 0 6
45132: PPUSH
45133: LD_INT 1
45135: PPUSH
45136: CALL_OW 259
45140: PUSH
45141: LD_REAL  1.15000000000000E+0000
45144: MUL
45145: MUL
45146: ST_TO_ADDR
// end ; unit_vehicle :
45147: GO 45975
45149: LD_INT 2
45151: DOUBLE
45152: EQUAL
45153: IFTRUE 45157
45155: GO 45963
45157: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45158: LD_VAR 0 6
45162: PPUSH
45163: CALL_OW 264
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: LD_INT 42
45173: PUSH
45174: LD_INT 24
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: LIST
45181: IN
45182: IFFALSE 45203
// points := [ 25 , 5 , 3 ] ;
45184: LD_ADDR_VAR 0 9
45188: PUSH
45189: LD_INT 25
45191: PUSH
45192: LD_INT 5
45194: PUSH
45195: LD_INT 3
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: LIST
45202: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45203: LD_VAR 0 6
45207: PPUSH
45208: CALL_OW 264
45212: PUSH
45213: LD_INT 4
45215: PUSH
45216: LD_INT 43
45218: PUSH
45219: LD_INT 25
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: LIST
45226: IN
45227: IFFALSE 45248
// points := [ 40 , 15 , 5 ] ;
45229: LD_ADDR_VAR 0 9
45233: PUSH
45234: LD_INT 40
45236: PUSH
45237: LD_INT 15
45239: PUSH
45240: LD_INT 5
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: LIST
45247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45248: LD_VAR 0 6
45252: PPUSH
45253: CALL_OW 264
45257: PUSH
45258: LD_INT 3
45260: PUSH
45261: LD_INT 23
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: IN
45268: IFFALSE 45289
// points := [ 7 , 25 , 8 ] ;
45270: LD_ADDR_VAR 0 9
45274: PUSH
45275: LD_INT 7
45277: PUSH
45278: LD_INT 25
45280: PUSH
45281: LD_INT 8
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: LIST
45288: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45289: LD_VAR 0 6
45293: PPUSH
45294: CALL_OW 264
45298: PUSH
45299: LD_INT 5
45301: PUSH
45302: LD_INT 27
45304: PUSH
45305: LD_INT 44
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: IN
45313: IFFALSE 45334
// points := [ 14 , 50 , 16 ] ;
45315: LD_ADDR_VAR 0 9
45319: PUSH
45320: LD_INT 14
45322: PUSH
45323: LD_INT 50
45325: PUSH
45326: LD_INT 16
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: LIST
45333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45334: LD_VAR 0 6
45338: PPUSH
45339: CALL_OW 264
45343: PUSH
45344: LD_INT 6
45346: PUSH
45347: LD_INT 46
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: IN
45354: IFFALSE 45375
// points := [ 32 , 120 , 70 ] ;
45356: LD_ADDR_VAR 0 9
45360: PUSH
45361: LD_INT 32
45363: PUSH
45364: LD_INT 120
45366: PUSH
45367: LD_INT 70
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: LIST
45374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45375: LD_VAR 0 6
45379: PPUSH
45380: CALL_OW 264
45384: PUSH
45385: LD_INT 7
45387: PUSH
45388: LD_INT 28
45390: PUSH
45391: LD_INT 45
45393: PUSH
45394: LD_INT 92
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: IN
45403: IFFALSE 45424
// points := [ 35 , 20 , 45 ] ;
45405: LD_ADDR_VAR 0 9
45409: PUSH
45410: LD_INT 35
45412: PUSH
45413: LD_INT 20
45415: PUSH
45416: LD_INT 45
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45424: LD_VAR 0 6
45428: PPUSH
45429: CALL_OW 264
45433: PUSH
45434: LD_INT 47
45436: PUSH
45437: EMPTY
45438: LIST
45439: IN
45440: IFFALSE 45461
// points := [ 67 , 45 , 75 ] ;
45442: LD_ADDR_VAR 0 9
45446: PUSH
45447: LD_INT 67
45449: PUSH
45450: LD_INT 45
45452: PUSH
45453: LD_INT 75
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: LIST
45460: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45461: LD_VAR 0 6
45465: PPUSH
45466: CALL_OW 264
45470: PUSH
45471: LD_INT 26
45473: PUSH
45474: EMPTY
45475: LIST
45476: IN
45477: IFFALSE 45498
// points := [ 120 , 30 , 80 ] ;
45479: LD_ADDR_VAR 0 9
45483: PUSH
45484: LD_INT 120
45486: PUSH
45487: LD_INT 30
45489: PUSH
45490: LD_INT 80
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45498: LD_VAR 0 6
45502: PPUSH
45503: CALL_OW 264
45507: PUSH
45508: LD_INT 22
45510: PUSH
45511: EMPTY
45512: LIST
45513: IN
45514: IFFALSE 45535
// points := [ 40 , 1 , 1 ] ;
45516: LD_ADDR_VAR 0 9
45520: PUSH
45521: LD_INT 40
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45535: LD_VAR 0 6
45539: PPUSH
45540: CALL_OW 264
45544: PUSH
45545: LD_INT 29
45547: PUSH
45548: EMPTY
45549: LIST
45550: IN
45551: IFFALSE 45572
// points := [ 70 , 200 , 400 ] ;
45553: LD_ADDR_VAR 0 9
45557: PUSH
45558: LD_INT 70
45560: PUSH
45561: LD_INT 200
45563: PUSH
45564: LD_INT 400
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45572: LD_VAR 0 6
45576: PPUSH
45577: CALL_OW 264
45581: PUSH
45582: LD_INT 14
45584: PUSH
45585: LD_INT 53
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: IN
45592: IFFALSE 45613
// points := [ 40 , 10 , 20 ] ;
45594: LD_ADDR_VAR 0 9
45598: PUSH
45599: LD_INT 40
45601: PUSH
45602: LD_INT 10
45604: PUSH
45605: LD_INT 20
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: LIST
45612: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45613: LD_VAR 0 6
45617: PPUSH
45618: CALL_OW 264
45622: PUSH
45623: LD_INT 9
45625: PUSH
45626: EMPTY
45627: LIST
45628: IN
45629: IFFALSE 45650
// points := [ 5 , 70 , 20 ] ;
45631: LD_ADDR_VAR 0 9
45635: PUSH
45636: LD_INT 5
45638: PUSH
45639: LD_INT 70
45641: PUSH
45642: LD_INT 20
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: LIST
45649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45650: LD_VAR 0 6
45654: PPUSH
45655: CALL_OW 264
45659: PUSH
45660: LD_INT 10
45662: PUSH
45663: EMPTY
45664: LIST
45665: IN
45666: IFFALSE 45687
// points := [ 35 , 110 , 70 ] ;
45668: LD_ADDR_VAR 0 9
45672: PUSH
45673: LD_INT 35
45675: PUSH
45676: LD_INT 110
45678: PUSH
45679: LD_INT 70
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: LIST
45686: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45687: LD_VAR 0 6
45691: PPUSH
45692: CALL_OW 265
45696: PUSH
45697: LD_INT 25
45699: EQUAL
45700: IFFALSE 45721
// points := [ 80 , 65 , 100 ] ;
45702: LD_ADDR_VAR 0 9
45706: PUSH
45707: LD_INT 80
45709: PUSH
45710: LD_INT 65
45712: PUSH
45713: LD_INT 100
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45721: LD_VAR 0 6
45725: PPUSH
45726: CALL_OW 263
45730: PUSH
45731: LD_INT 1
45733: EQUAL
45734: IFFALSE 45769
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45736: LD_ADDR_VAR 0 10
45740: PUSH
45741: LD_VAR 0 10
45745: PUSH
45746: LD_VAR 0 6
45750: PPUSH
45751: CALL_OW 311
45755: PPUSH
45756: LD_INT 3
45758: PPUSH
45759: CALL_OW 259
45763: PUSH
45764: LD_INT 4
45766: MUL
45767: MUL
45768: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45769: LD_VAR 0 6
45773: PPUSH
45774: CALL_OW 263
45778: PUSH
45779: LD_INT 2
45781: EQUAL
45782: IFFALSE 45833
// begin j := IsControledBy ( i ) ;
45784: LD_ADDR_VAR 0 7
45788: PUSH
45789: LD_VAR 0 6
45793: PPUSH
45794: CALL_OW 312
45798: ST_TO_ADDR
// if j then
45799: LD_VAR 0 7
45803: IFFALSE 45833
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45805: LD_ADDR_VAR 0 10
45809: PUSH
45810: LD_VAR 0 10
45814: PUSH
45815: LD_VAR 0 7
45819: PPUSH
45820: LD_INT 3
45822: PPUSH
45823: CALL_OW 259
45827: PUSH
45828: LD_INT 3
45830: MUL
45831: MUL
45832: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45833: LD_VAR 0 6
45837: PPUSH
45838: CALL_OW 264
45842: PUSH
45843: LD_INT 5
45845: PUSH
45846: LD_INT 6
45848: PUSH
45849: LD_INT 46
45851: PUSH
45852: LD_INT 44
45854: PUSH
45855: LD_INT 47
45857: PUSH
45858: LD_INT 45
45860: PUSH
45861: LD_INT 28
45863: PUSH
45864: LD_INT 7
45866: PUSH
45867: LD_INT 27
45869: PUSH
45870: LD_INT 29
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: IN
45885: PUSH
45886: LD_VAR 0 1
45890: PPUSH
45891: LD_INT 52
45893: PPUSH
45894: CALL_OW 321
45898: PUSH
45899: LD_INT 2
45901: EQUAL
45902: AND
45903: IFFALSE 45920
// bpoints := bpoints * 1.2 ;
45905: LD_ADDR_VAR 0 10
45909: PUSH
45910: LD_VAR 0 10
45914: PUSH
45915: LD_REAL  1.20000000000000E+0000
45918: MUL
45919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45920: LD_VAR 0 6
45924: PPUSH
45925: CALL_OW 264
45929: PUSH
45930: LD_INT 6
45932: PUSH
45933: LD_INT 46
45935: PUSH
45936: LD_INT 47
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: IN
45944: IFFALSE 45961
// bpoints := bpoints * 1.2 ;
45946: LD_ADDR_VAR 0 10
45950: PUSH
45951: LD_VAR 0 10
45955: PUSH
45956: LD_REAL  1.20000000000000E+0000
45959: MUL
45960: ST_TO_ADDR
// end ; unit_building :
45961: GO 45975
45963: LD_INT 3
45965: DOUBLE
45966: EQUAL
45967: IFTRUE 45971
45969: GO 45974
45971: POP
// ; end ;
45972: GO 45975
45974: POP
// for j = 1 to 3 do
45975: LD_ADDR_VAR 0 7
45979: PUSH
45980: DOUBLE
45981: LD_INT 1
45983: DEC
45984: ST_TO_ADDR
45985: LD_INT 3
45987: PUSH
45988: FOR_TO
45989: IFFALSE 46042
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45991: LD_ADDR_VAR 0 5
45995: PUSH
45996: LD_VAR 0 5
46000: PPUSH
46001: LD_VAR 0 7
46005: PPUSH
46006: LD_VAR 0 5
46010: PUSH
46011: LD_VAR 0 7
46015: ARRAY
46016: PUSH
46017: LD_VAR 0 9
46021: PUSH
46022: LD_VAR 0 7
46026: ARRAY
46027: PUSH
46028: LD_VAR 0 10
46032: MUL
46033: PLUS
46034: PPUSH
46035: CALL_OW 1
46039: ST_TO_ADDR
46040: GO 45988
46042: POP
46043: POP
// end ;
46044: GO 44523
46046: POP
46047: POP
// result := Replace ( result , 4 , tmp ) ;
46048: LD_ADDR_VAR 0 5
46052: PUSH
46053: LD_VAR 0 5
46057: PPUSH
46058: LD_INT 4
46060: PPUSH
46061: LD_VAR 0 8
46065: PPUSH
46066: CALL_OW 1
46070: ST_TO_ADDR
// end ;
46071: LD_VAR 0 5
46075: RET
// export function DangerAtRange ( unit , range ) ; begin
46076: LD_INT 0
46078: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46079: LD_ADDR_VAR 0 3
46083: PUSH
46084: LD_VAR 0 1
46088: PPUSH
46089: CALL_OW 255
46093: PPUSH
46094: LD_VAR 0 1
46098: PPUSH
46099: CALL_OW 250
46103: PPUSH
46104: LD_VAR 0 1
46108: PPUSH
46109: CALL_OW 251
46113: PPUSH
46114: LD_VAR 0 2
46118: PPUSH
46119: CALL 44375 0 4
46123: ST_TO_ADDR
// end ;
46124: LD_VAR 0 3
46128: RET
// export function DangerInArea ( side , area ) ; begin
46129: LD_INT 0
46131: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46132: LD_ADDR_VAR 0 3
46136: PUSH
46137: LD_VAR 0 2
46141: PPUSH
46142: LD_INT 81
46144: PUSH
46145: LD_VAR 0 1
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PPUSH
46154: CALL_OW 70
46158: ST_TO_ADDR
// end ;
46159: LD_VAR 0 3
46163: RET
// export function IsExtension ( b ) ; begin
46164: LD_INT 0
46166: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46167: LD_ADDR_VAR 0 2
46171: PUSH
46172: LD_VAR 0 1
46176: PUSH
46177: LD_INT 23
46179: PUSH
46180: LD_INT 20
46182: PUSH
46183: LD_INT 22
46185: PUSH
46186: LD_INT 17
46188: PUSH
46189: LD_INT 24
46191: PUSH
46192: LD_INT 21
46194: PUSH
46195: LD_INT 19
46197: PUSH
46198: LD_INT 16
46200: PUSH
46201: LD_INT 25
46203: PUSH
46204: LD_INT 18
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: IN
46219: ST_TO_ADDR
// end ;
46220: LD_VAR 0 2
46224: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46225: LD_INT 0
46227: PPUSH
46228: PPUSH
46229: PPUSH
// result := [ ] ;
46230: LD_ADDR_VAR 0 4
46234: PUSH
46235: EMPTY
46236: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46237: LD_ADDR_VAR 0 5
46241: PUSH
46242: LD_VAR 0 2
46246: PPUSH
46247: LD_INT 21
46249: PUSH
46250: LD_INT 3
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PPUSH
46257: CALL_OW 70
46261: ST_TO_ADDR
// if not tmp then
46262: LD_VAR 0 5
46266: NOT
46267: IFFALSE 46271
// exit ;
46269: GO 46335
// if checkLink then
46271: LD_VAR 0 3
46275: IFFALSE 46325
// begin for i in tmp do
46277: LD_ADDR_VAR 0 6
46281: PUSH
46282: LD_VAR 0 5
46286: PUSH
46287: FOR_IN
46288: IFFALSE 46323
// if GetBase ( i ) <> base then
46290: LD_VAR 0 6
46294: PPUSH
46295: CALL_OW 274
46299: PUSH
46300: LD_VAR 0 1
46304: NONEQUAL
46305: IFFALSE 46321
// ComLinkToBase ( base , i ) ;
46307: LD_VAR 0 1
46311: PPUSH
46312: LD_VAR 0 6
46316: PPUSH
46317: CALL_OW 169
46321: GO 46287
46323: POP
46324: POP
// end ; result := tmp ;
46325: LD_ADDR_VAR 0 4
46329: PUSH
46330: LD_VAR 0 5
46334: ST_TO_ADDR
// end ;
46335: LD_VAR 0 4
46339: RET
// export function ComComplete ( units , b ) ; var i ; begin
46340: LD_INT 0
46342: PPUSH
46343: PPUSH
// if not units then
46344: LD_VAR 0 1
46348: NOT
46349: IFFALSE 46353
// exit ;
46351: GO 46443
// for i in units do
46353: LD_ADDR_VAR 0 4
46357: PUSH
46358: LD_VAR 0 1
46362: PUSH
46363: FOR_IN
46364: IFFALSE 46441
// if BuildingStatus ( b ) = bs_build then
46366: LD_VAR 0 2
46370: PPUSH
46371: CALL_OW 461
46375: PUSH
46376: LD_INT 1
46378: EQUAL
46379: IFFALSE 46439
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46381: LD_VAR 0 4
46385: PPUSH
46386: LD_STRING h
46388: PUSH
46389: LD_VAR 0 2
46393: PPUSH
46394: CALL_OW 250
46398: PUSH
46399: LD_VAR 0 2
46403: PPUSH
46404: CALL_OW 251
46408: PUSH
46409: LD_VAR 0 2
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: PUSH
46432: EMPTY
46433: LIST
46434: PPUSH
46435: CALL_OW 446
46439: GO 46363
46441: POP
46442: POP
// end ;
46443: LD_VAR 0 3
46447: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46448: LD_INT 0
46450: PPUSH
46451: PPUSH
46452: PPUSH
46453: PPUSH
46454: PPUSH
46455: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46456: LD_VAR 0 1
46460: NOT
46461: PUSH
46462: LD_VAR 0 1
46466: PPUSH
46467: CALL_OW 263
46471: PUSH
46472: LD_INT 2
46474: NONEQUAL
46475: OR
46476: IFFALSE 46480
// exit ;
46478: GO 46796
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46480: LD_ADDR_VAR 0 6
46484: PUSH
46485: LD_INT 22
46487: PUSH
46488: LD_VAR 0 1
46492: PPUSH
46493: CALL_OW 255
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 30
46507: PUSH
46508: LD_INT 36
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 34
46517: PUSH
46518: LD_INT 31
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: LIST
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PPUSH
46534: CALL_OW 69
46538: ST_TO_ADDR
// if not tmp then
46539: LD_VAR 0 6
46543: NOT
46544: IFFALSE 46548
// exit ;
46546: GO 46796
// result := [ ] ;
46548: LD_ADDR_VAR 0 2
46552: PUSH
46553: EMPTY
46554: ST_TO_ADDR
// for i in tmp do
46555: LD_ADDR_VAR 0 3
46559: PUSH
46560: LD_VAR 0 6
46564: PUSH
46565: FOR_IN
46566: IFFALSE 46637
// begin t := UnitsInside ( i ) ;
46568: LD_ADDR_VAR 0 4
46572: PUSH
46573: LD_VAR 0 3
46577: PPUSH
46578: CALL_OW 313
46582: ST_TO_ADDR
// if t then
46583: LD_VAR 0 4
46587: IFFALSE 46635
// for j in t do
46589: LD_ADDR_VAR 0 7
46593: PUSH
46594: LD_VAR 0 4
46598: PUSH
46599: FOR_IN
46600: IFFALSE 46633
// result := Replace ( result , result + 1 , j ) ;
46602: LD_ADDR_VAR 0 2
46606: PUSH
46607: LD_VAR 0 2
46611: PPUSH
46612: LD_VAR 0 2
46616: PUSH
46617: LD_INT 1
46619: PLUS
46620: PPUSH
46621: LD_VAR 0 7
46625: PPUSH
46626: CALL_OW 1
46630: ST_TO_ADDR
46631: GO 46599
46633: POP
46634: POP
// end ;
46635: GO 46565
46637: POP
46638: POP
// if not result then
46639: LD_VAR 0 2
46643: NOT
46644: IFFALSE 46648
// exit ;
46646: GO 46796
// mech := result [ 1 ] ;
46648: LD_ADDR_VAR 0 5
46652: PUSH
46653: LD_VAR 0 2
46657: PUSH
46658: LD_INT 1
46660: ARRAY
46661: ST_TO_ADDR
// if result > 1 then
46662: LD_VAR 0 2
46666: PUSH
46667: LD_INT 1
46669: GREATER
46670: IFFALSE 46782
// begin for i = 2 to result do
46672: LD_ADDR_VAR 0 3
46676: PUSH
46677: DOUBLE
46678: LD_INT 2
46680: DEC
46681: ST_TO_ADDR
46682: LD_VAR 0 2
46686: PUSH
46687: FOR_TO
46688: IFFALSE 46780
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46690: LD_ADDR_VAR 0 4
46694: PUSH
46695: LD_VAR 0 2
46699: PUSH
46700: LD_VAR 0 3
46704: ARRAY
46705: PPUSH
46706: LD_INT 3
46708: PPUSH
46709: CALL_OW 259
46713: PUSH
46714: LD_VAR 0 2
46718: PUSH
46719: LD_VAR 0 3
46723: ARRAY
46724: PPUSH
46725: CALL_OW 432
46729: MINUS
46730: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46731: LD_VAR 0 4
46735: PUSH
46736: LD_VAR 0 5
46740: PPUSH
46741: LD_INT 3
46743: PPUSH
46744: CALL_OW 259
46748: PUSH
46749: LD_VAR 0 5
46753: PPUSH
46754: CALL_OW 432
46758: MINUS
46759: GREATEREQUAL
46760: IFFALSE 46778
// mech := result [ i ] ;
46762: LD_ADDR_VAR 0 5
46766: PUSH
46767: LD_VAR 0 2
46771: PUSH
46772: LD_VAR 0 3
46776: ARRAY
46777: ST_TO_ADDR
// end ;
46778: GO 46687
46780: POP
46781: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46782: LD_VAR 0 1
46786: PPUSH
46787: LD_VAR 0 5
46791: PPUSH
46792: CALL_OW 135
// end ;
46796: LD_VAR 0 2
46800: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46801: LD_INT 0
46803: PPUSH
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
46811: PPUSH
46812: PPUSH
46813: PPUSH
46814: PPUSH
46815: PPUSH
// result := [ ] ;
46816: LD_ADDR_VAR 0 7
46820: PUSH
46821: EMPTY
46822: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46823: LD_VAR 0 1
46827: PPUSH
46828: CALL_OW 266
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: IN
46843: NOT
46844: IFFALSE 46848
// exit ;
46846: GO 48482
// if name then
46848: LD_VAR 0 3
46852: IFFALSE 46868
// SetBName ( base_dep , name ) ;
46854: LD_VAR 0 1
46858: PPUSH
46859: LD_VAR 0 3
46863: PPUSH
46864: CALL_OW 500
// base := GetBase ( base_dep ) ;
46868: LD_ADDR_VAR 0 15
46872: PUSH
46873: LD_VAR 0 1
46877: PPUSH
46878: CALL_OW 274
46882: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46883: LD_ADDR_VAR 0 16
46887: PUSH
46888: LD_VAR 0 1
46892: PPUSH
46893: CALL_OW 255
46897: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46898: LD_ADDR_VAR 0 17
46902: PUSH
46903: LD_VAR 0 1
46907: PPUSH
46908: CALL_OW 248
46912: ST_TO_ADDR
// if sources then
46913: LD_VAR 0 5
46917: IFFALSE 46964
// for i = 1 to 3 do
46919: LD_ADDR_VAR 0 8
46923: PUSH
46924: DOUBLE
46925: LD_INT 1
46927: DEC
46928: ST_TO_ADDR
46929: LD_INT 3
46931: PUSH
46932: FOR_TO
46933: IFFALSE 46962
// AddResourceType ( base , i , sources [ i ] ) ;
46935: LD_VAR 0 15
46939: PPUSH
46940: LD_VAR 0 8
46944: PPUSH
46945: LD_VAR 0 5
46949: PUSH
46950: LD_VAR 0 8
46954: ARRAY
46955: PPUSH
46956: CALL_OW 276
46960: GO 46932
46962: POP
46963: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46964: LD_ADDR_VAR 0 18
46968: PUSH
46969: LD_VAR 0 15
46973: PPUSH
46974: LD_VAR 0 2
46978: PPUSH
46979: LD_INT 1
46981: PPUSH
46982: CALL 46225 0 3
46986: ST_TO_ADDR
// InitHc ;
46987: CALL_OW 19
// InitUc ;
46991: CALL_OW 18
// uc_side := side ;
46995: LD_ADDR_OWVAR 20
46999: PUSH
47000: LD_VAR 0 16
47004: ST_TO_ADDR
// uc_nation := nation ;
47005: LD_ADDR_OWVAR 21
47009: PUSH
47010: LD_VAR 0 17
47014: ST_TO_ADDR
// if buildings then
47015: LD_VAR 0 18
47019: IFFALSE 48341
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47021: LD_ADDR_VAR 0 19
47025: PUSH
47026: LD_VAR 0 18
47030: PPUSH
47031: LD_INT 2
47033: PUSH
47034: LD_INT 30
47036: PUSH
47037: LD_INT 29
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 30
47046: PUSH
47047: LD_INT 30
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: LIST
47058: PPUSH
47059: CALL_OW 72
47063: ST_TO_ADDR
// if tmp then
47064: LD_VAR 0 19
47068: IFFALSE 47116
// for i in tmp do
47070: LD_ADDR_VAR 0 8
47074: PUSH
47075: LD_VAR 0 19
47079: PUSH
47080: FOR_IN
47081: IFFALSE 47114
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47083: LD_VAR 0 8
47087: PPUSH
47088: CALL_OW 250
47092: PPUSH
47093: LD_VAR 0 8
47097: PPUSH
47098: CALL_OW 251
47102: PPUSH
47103: LD_VAR 0 16
47107: PPUSH
47108: CALL_OW 441
47112: GO 47080
47114: POP
47115: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47116: LD_VAR 0 18
47120: PPUSH
47121: LD_INT 2
47123: PUSH
47124: LD_INT 30
47126: PUSH
47127: LD_INT 32
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 30
47136: PUSH
47137: LD_INT 33
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: LIST
47148: PPUSH
47149: CALL_OW 72
47153: IFFALSE 47241
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47155: LD_ADDR_VAR 0 8
47159: PUSH
47160: LD_VAR 0 18
47164: PPUSH
47165: LD_INT 2
47167: PUSH
47168: LD_INT 30
47170: PUSH
47171: LD_INT 32
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 30
47180: PUSH
47181: LD_INT 33
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: LIST
47192: PPUSH
47193: CALL_OW 72
47197: PUSH
47198: FOR_IN
47199: IFFALSE 47239
// begin if not GetBWeapon ( i ) then
47201: LD_VAR 0 8
47205: PPUSH
47206: CALL_OW 269
47210: NOT
47211: IFFALSE 47237
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47213: LD_VAR 0 8
47217: PPUSH
47218: LD_VAR 0 8
47222: PPUSH
47223: LD_VAR 0 2
47227: PPUSH
47228: CALL 48487 0 2
47232: PPUSH
47233: CALL_OW 431
// end ;
47237: GO 47198
47239: POP
47240: POP
// end ; for i = 1 to personel do
47241: LD_ADDR_VAR 0 8
47245: PUSH
47246: DOUBLE
47247: LD_INT 1
47249: DEC
47250: ST_TO_ADDR
47251: LD_VAR 0 6
47255: PUSH
47256: FOR_TO
47257: IFFALSE 48321
// begin if i > 4 then
47259: LD_VAR 0 8
47263: PUSH
47264: LD_INT 4
47266: GREATER
47267: IFFALSE 47271
// break ;
47269: GO 48321
// case i of 1 :
47271: LD_VAR 0 8
47275: PUSH
47276: LD_INT 1
47278: DOUBLE
47279: EQUAL
47280: IFTRUE 47284
47282: GO 47364
47284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47285: LD_ADDR_VAR 0 12
47289: PUSH
47290: LD_VAR 0 18
47294: PPUSH
47295: LD_INT 22
47297: PUSH
47298: LD_VAR 0 16
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 58
47309: PUSH
47310: EMPTY
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: LD_INT 30
47318: PUSH
47319: LD_INT 32
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 30
47328: PUSH
47329: LD_INT 4
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 30
47338: PUSH
47339: LD_INT 5
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: PPUSH
47357: CALL_OW 72
47361: ST_TO_ADDR
47362: GO 47586
47364: LD_INT 2
47366: DOUBLE
47367: EQUAL
47368: IFTRUE 47372
47370: GO 47434
47372: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47373: LD_ADDR_VAR 0 12
47377: PUSH
47378: LD_VAR 0 18
47382: PPUSH
47383: LD_INT 22
47385: PUSH
47386: LD_VAR 0 16
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 30
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 30
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PPUSH
47427: CALL_OW 72
47431: ST_TO_ADDR
47432: GO 47586
47434: LD_INT 3
47436: DOUBLE
47437: EQUAL
47438: IFTRUE 47442
47440: GO 47504
47442: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47443: LD_ADDR_VAR 0 12
47447: PUSH
47448: LD_VAR 0 18
47452: PPUSH
47453: LD_INT 22
47455: PUSH
47456: LD_VAR 0 16
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 30
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 30
47480: PUSH
47481: LD_INT 3
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: LIST
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PPUSH
47497: CALL_OW 72
47501: ST_TO_ADDR
47502: GO 47586
47504: LD_INT 4
47506: DOUBLE
47507: EQUAL
47508: IFTRUE 47512
47510: GO 47585
47512: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47513: LD_ADDR_VAR 0 12
47517: PUSH
47518: LD_VAR 0 18
47522: PPUSH
47523: LD_INT 22
47525: PUSH
47526: LD_VAR 0 16
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: LD_INT 30
47540: PUSH
47541: LD_INT 6
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 30
47550: PUSH
47551: LD_INT 7
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 30
47560: PUSH
47561: LD_INT 8
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PPUSH
47578: CALL_OW 72
47582: ST_TO_ADDR
47583: GO 47586
47585: POP
// if i = 1 then
47586: LD_VAR 0 8
47590: PUSH
47591: LD_INT 1
47593: EQUAL
47594: IFFALSE 47705
// begin tmp := [ ] ;
47596: LD_ADDR_VAR 0 19
47600: PUSH
47601: EMPTY
47602: ST_TO_ADDR
// for j in f do
47603: LD_ADDR_VAR 0 9
47607: PUSH
47608: LD_VAR 0 12
47612: PUSH
47613: FOR_IN
47614: IFFALSE 47687
// if GetBType ( j ) = b_bunker then
47616: LD_VAR 0 9
47620: PPUSH
47621: CALL_OW 266
47625: PUSH
47626: LD_INT 32
47628: EQUAL
47629: IFFALSE 47656
// tmp := Insert ( tmp , 1 , j ) else
47631: LD_ADDR_VAR 0 19
47635: PUSH
47636: LD_VAR 0 19
47640: PPUSH
47641: LD_INT 1
47643: PPUSH
47644: LD_VAR 0 9
47648: PPUSH
47649: CALL_OW 2
47653: ST_TO_ADDR
47654: GO 47685
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47656: LD_ADDR_VAR 0 19
47660: PUSH
47661: LD_VAR 0 19
47665: PPUSH
47666: LD_VAR 0 19
47670: PUSH
47671: LD_INT 1
47673: PLUS
47674: PPUSH
47675: LD_VAR 0 9
47679: PPUSH
47680: CALL_OW 2
47684: ST_TO_ADDR
47685: GO 47613
47687: POP
47688: POP
// if tmp then
47689: LD_VAR 0 19
47693: IFFALSE 47705
// f := tmp ;
47695: LD_ADDR_VAR 0 12
47699: PUSH
47700: LD_VAR 0 19
47704: ST_TO_ADDR
// end ; x := personel [ i ] ;
47705: LD_ADDR_VAR 0 13
47709: PUSH
47710: LD_VAR 0 6
47714: PUSH
47715: LD_VAR 0 8
47719: ARRAY
47720: ST_TO_ADDR
// if x = - 1 then
47721: LD_VAR 0 13
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: EQUAL
47730: IFFALSE 47939
// begin for j in f do
47732: LD_ADDR_VAR 0 9
47736: PUSH
47737: LD_VAR 0 12
47741: PUSH
47742: FOR_IN
47743: IFFALSE 47935
// repeat InitHc ;
47745: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47749: LD_VAR 0 9
47753: PPUSH
47754: CALL_OW 266
47758: PUSH
47759: LD_INT 5
47761: EQUAL
47762: IFFALSE 47832
// begin if UnitsInside ( j ) < 3 then
47764: LD_VAR 0 9
47768: PPUSH
47769: CALL_OW 313
47773: PUSH
47774: LD_INT 3
47776: LESS
47777: IFFALSE 47813
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47779: LD_INT 0
47781: PPUSH
47782: LD_INT 5
47784: PUSH
47785: LD_INT 8
47787: PUSH
47788: LD_INT 9
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: PUSH
47796: LD_VAR 0 17
47800: ARRAY
47801: PPUSH
47802: LD_VAR 0 4
47806: PPUSH
47807: CALL_OW 380
47811: GO 47830
// PrepareHuman ( false , i , skill ) ;
47813: LD_INT 0
47815: PPUSH
47816: LD_VAR 0 8
47820: PPUSH
47821: LD_VAR 0 4
47825: PPUSH
47826: CALL_OW 380
// end else
47830: GO 47849
// PrepareHuman ( false , i , skill ) ;
47832: LD_INT 0
47834: PPUSH
47835: LD_VAR 0 8
47839: PPUSH
47840: LD_VAR 0 4
47844: PPUSH
47845: CALL_OW 380
// un := CreateHuman ;
47849: LD_ADDR_VAR 0 14
47853: PUSH
47854: CALL_OW 44
47858: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47859: LD_ADDR_VAR 0 7
47863: PUSH
47864: LD_VAR 0 7
47868: PPUSH
47869: LD_INT 1
47871: PPUSH
47872: LD_VAR 0 14
47876: PPUSH
47877: CALL_OW 2
47881: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47882: LD_VAR 0 14
47886: PPUSH
47887: LD_VAR 0 9
47891: PPUSH
47892: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47896: LD_VAR 0 9
47900: PPUSH
47901: CALL_OW 313
47905: PUSH
47906: LD_INT 6
47908: EQUAL
47909: PUSH
47910: LD_VAR 0 9
47914: PPUSH
47915: CALL_OW 266
47919: PUSH
47920: LD_INT 32
47922: PUSH
47923: LD_INT 31
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: IN
47930: OR
47931: IFFALSE 47745
47933: GO 47742
47935: POP
47936: POP
// end else
47937: GO 48319
// for j = 1 to x do
47939: LD_ADDR_VAR 0 9
47943: PUSH
47944: DOUBLE
47945: LD_INT 1
47947: DEC
47948: ST_TO_ADDR
47949: LD_VAR 0 13
47953: PUSH
47954: FOR_TO
47955: IFFALSE 48317
// begin InitHc ;
47957: CALL_OW 19
// if not f then
47961: LD_VAR 0 12
47965: NOT
47966: IFFALSE 48055
// begin PrepareHuman ( false , i , skill ) ;
47968: LD_INT 0
47970: PPUSH
47971: LD_VAR 0 8
47975: PPUSH
47976: LD_VAR 0 4
47980: PPUSH
47981: CALL_OW 380
// un := CreateHuman ;
47985: LD_ADDR_VAR 0 14
47989: PUSH
47990: CALL_OW 44
47994: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47995: LD_ADDR_VAR 0 7
47999: PUSH
48000: LD_VAR 0 7
48004: PPUSH
48005: LD_INT 1
48007: PPUSH
48008: LD_VAR 0 14
48012: PPUSH
48013: CALL_OW 2
48017: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48018: LD_VAR 0 14
48022: PPUSH
48023: LD_VAR 0 1
48027: PPUSH
48028: CALL_OW 250
48032: PPUSH
48033: LD_VAR 0 1
48037: PPUSH
48038: CALL_OW 251
48042: PPUSH
48043: LD_INT 10
48045: PPUSH
48046: LD_INT 0
48048: PPUSH
48049: CALL_OW 50
// continue ;
48053: GO 47954
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48055: LD_VAR 0 12
48059: PUSH
48060: LD_INT 1
48062: ARRAY
48063: PPUSH
48064: CALL_OW 313
48068: PUSH
48069: LD_VAR 0 12
48073: PUSH
48074: LD_INT 1
48076: ARRAY
48077: PPUSH
48078: CALL_OW 266
48082: PUSH
48083: LD_INT 32
48085: PUSH
48086: LD_INT 31
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: IN
48093: AND
48094: PUSH
48095: LD_VAR 0 12
48099: PUSH
48100: LD_INT 1
48102: ARRAY
48103: PPUSH
48104: CALL_OW 313
48108: PUSH
48109: LD_INT 6
48111: EQUAL
48112: OR
48113: IFFALSE 48133
// f := Delete ( f , 1 ) ;
48115: LD_ADDR_VAR 0 12
48119: PUSH
48120: LD_VAR 0 12
48124: PPUSH
48125: LD_INT 1
48127: PPUSH
48128: CALL_OW 3
48132: ST_TO_ADDR
// if not f then
48133: LD_VAR 0 12
48137: NOT
48138: IFFALSE 48156
// begin x := x + 2 ;
48140: LD_ADDR_VAR 0 13
48144: PUSH
48145: LD_VAR 0 13
48149: PUSH
48150: LD_INT 2
48152: PLUS
48153: ST_TO_ADDR
// continue ;
48154: GO 47954
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48156: LD_VAR 0 12
48160: PUSH
48161: LD_INT 1
48163: ARRAY
48164: PPUSH
48165: CALL_OW 266
48169: PUSH
48170: LD_INT 5
48172: EQUAL
48173: IFFALSE 48247
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48175: LD_VAR 0 12
48179: PUSH
48180: LD_INT 1
48182: ARRAY
48183: PPUSH
48184: CALL_OW 313
48188: PUSH
48189: LD_INT 3
48191: LESS
48192: IFFALSE 48228
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48194: LD_INT 0
48196: PPUSH
48197: LD_INT 5
48199: PUSH
48200: LD_INT 8
48202: PUSH
48203: LD_INT 9
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: PUSH
48211: LD_VAR 0 17
48215: ARRAY
48216: PPUSH
48217: LD_VAR 0 4
48221: PPUSH
48222: CALL_OW 380
48226: GO 48245
// PrepareHuman ( false , i , skill ) ;
48228: LD_INT 0
48230: PPUSH
48231: LD_VAR 0 8
48235: PPUSH
48236: LD_VAR 0 4
48240: PPUSH
48241: CALL_OW 380
// end else
48245: GO 48264
// PrepareHuman ( false , i , skill ) ;
48247: LD_INT 0
48249: PPUSH
48250: LD_VAR 0 8
48254: PPUSH
48255: LD_VAR 0 4
48259: PPUSH
48260: CALL_OW 380
// un := CreateHuman ;
48264: LD_ADDR_VAR 0 14
48268: PUSH
48269: CALL_OW 44
48273: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48274: LD_ADDR_VAR 0 7
48278: PUSH
48279: LD_VAR 0 7
48283: PPUSH
48284: LD_INT 1
48286: PPUSH
48287: LD_VAR 0 14
48291: PPUSH
48292: CALL_OW 2
48296: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48297: LD_VAR 0 14
48301: PPUSH
48302: LD_VAR 0 12
48306: PUSH
48307: LD_INT 1
48309: ARRAY
48310: PPUSH
48311: CALL_OW 52
// end ;
48315: GO 47954
48317: POP
48318: POP
// end ;
48319: GO 47256
48321: POP
48322: POP
// result := result ^ buildings ;
48323: LD_ADDR_VAR 0 7
48327: PUSH
48328: LD_VAR 0 7
48332: PUSH
48333: LD_VAR 0 18
48337: ADD
48338: ST_TO_ADDR
// end else
48339: GO 48482
// begin for i = 1 to personel do
48341: LD_ADDR_VAR 0 8
48345: PUSH
48346: DOUBLE
48347: LD_INT 1
48349: DEC
48350: ST_TO_ADDR
48351: LD_VAR 0 6
48355: PUSH
48356: FOR_TO
48357: IFFALSE 48480
// begin if i > 4 then
48359: LD_VAR 0 8
48363: PUSH
48364: LD_INT 4
48366: GREATER
48367: IFFALSE 48371
// break ;
48369: GO 48480
// x := personel [ i ] ;
48371: LD_ADDR_VAR 0 13
48375: PUSH
48376: LD_VAR 0 6
48380: PUSH
48381: LD_VAR 0 8
48385: ARRAY
48386: ST_TO_ADDR
// if x = - 1 then
48387: LD_VAR 0 13
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: EQUAL
48396: IFFALSE 48400
// continue ;
48398: GO 48356
// PrepareHuman ( false , i , skill ) ;
48400: LD_INT 0
48402: PPUSH
48403: LD_VAR 0 8
48407: PPUSH
48408: LD_VAR 0 4
48412: PPUSH
48413: CALL_OW 380
// un := CreateHuman ;
48417: LD_ADDR_VAR 0 14
48421: PUSH
48422: CALL_OW 44
48426: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48427: LD_VAR 0 14
48431: PPUSH
48432: LD_VAR 0 1
48436: PPUSH
48437: CALL_OW 250
48441: PPUSH
48442: LD_VAR 0 1
48446: PPUSH
48447: CALL_OW 251
48451: PPUSH
48452: LD_INT 10
48454: PPUSH
48455: LD_INT 0
48457: PPUSH
48458: CALL_OW 50
// result := result ^ un ;
48462: LD_ADDR_VAR 0 7
48466: PUSH
48467: LD_VAR 0 7
48471: PUSH
48472: LD_VAR 0 14
48476: ADD
48477: ST_TO_ADDR
// end ;
48478: GO 48356
48480: POP
48481: POP
// end ; end ;
48482: LD_VAR 0 7
48486: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48487: LD_INT 0
48489: PPUSH
48490: PPUSH
48491: PPUSH
48492: PPUSH
48493: PPUSH
48494: PPUSH
48495: PPUSH
48496: PPUSH
48497: PPUSH
48498: PPUSH
48499: PPUSH
48500: PPUSH
48501: PPUSH
48502: PPUSH
48503: PPUSH
48504: PPUSH
// result := false ;
48505: LD_ADDR_VAR 0 3
48509: PUSH
48510: LD_INT 0
48512: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48513: LD_VAR 0 1
48517: NOT
48518: PUSH
48519: LD_VAR 0 1
48523: PPUSH
48524: CALL_OW 266
48528: PUSH
48529: LD_INT 32
48531: PUSH
48532: LD_INT 33
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: IN
48539: NOT
48540: OR
48541: IFFALSE 48545
// exit ;
48543: GO 49654
// nat := GetNation ( tower ) ;
48545: LD_ADDR_VAR 0 12
48549: PUSH
48550: LD_VAR 0 1
48554: PPUSH
48555: CALL_OW 248
48559: ST_TO_ADDR
// side := GetSide ( tower ) ;
48560: LD_ADDR_VAR 0 16
48564: PUSH
48565: LD_VAR 0 1
48569: PPUSH
48570: CALL_OW 255
48574: ST_TO_ADDR
// x := GetX ( tower ) ;
48575: LD_ADDR_VAR 0 10
48579: PUSH
48580: LD_VAR 0 1
48584: PPUSH
48585: CALL_OW 250
48589: ST_TO_ADDR
// y := GetY ( tower ) ;
48590: LD_ADDR_VAR 0 11
48594: PUSH
48595: LD_VAR 0 1
48599: PPUSH
48600: CALL_OW 251
48604: ST_TO_ADDR
// if not x or not y then
48605: LD_VAR 0 10
48609: NOT
48610: PUSH
48611: LD_VAR 0 11
48615: NOT
48616: OR
48617: IFFALSE 48621
// exit ;
48619: GO 49654
// weapon := 0 ;
48621: LD_ADDR_VAR 0 18
48625: PUSH
48626: LD_INT 0
48628: ST_TO_ADDR
// fac_list := [ ] ;
48629: LD_ADDR_VAR 0 17
48633: PUSH
48634: EMPTY
48635: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48636: LD_ADDR_VAR 0 6
48640: PUSH
48641: LD_VAR 0 1
48645: PPUSH
48646: CALL_OW 274
48650: PPUSH
48651: LD_VAR 0 2
48655: PPUSH
48656: LD_INT 0
48658: PPUSH
48659: CALL 46225 0 3
48663: PPUSH
48664: LD_INT 30
48666: PUSH
48667: LD_INT 3
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PPUSH
48674: CALL_OW 72
48678: ST_TO_ADDR
// if not factories then
48679: LD_VAR 0 6
48683: NOT
48684: IFFALSE 48688
// exit ;
48686: GO 49654
// for i in factories do
48688: LD_ADDR_VAR 0 8
48692: PUSH
48693: LD_VAR 0 6
48697: PUSH
48698: FOR_IN
48699: IFFALSE 48724
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48701: LD_ADDR_VAR 0 17
48705: PUSH
48706: LD_VAR 0 17
48710: PUSH
48711: LD_VAR 0 8
48715: PPUSH
48716: CALL_OW 478
48720: UNION
48721: ST_TO_ADDR
48722: GO 48698
48724: POP
48725: POP
// if not fac_list then
48726: LD_VAR 0 17
48730: NOT
48731: IFFALSE 48735
// exit ;
48733: GO 49654
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48735: LD_ADDR_VAR 0 5
48739: PUSH
48740: LD_INT 4
48742: PUSH
48743: LD_INT 5
48745: PUSH
48746: LD_INT 9
48748: PUSH
48749: LD_INT 10
48751: PUSH
48752: LD_INT 6
48754: PUSH
48755: LD_INT 7
48757: PUSH
48758: LD_INT 11
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 27
48772: PUSH
48773: LD_INT 28
48775: PUSH
48776: LD_INT 26
48778: PUSH
48779: LD_INT 30
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 43
48790: PUSH
48791: LD_INT 44
48793: PUSH
48794: LD_INT 46
48796: PUSH
48797: LD_INT 45
48799: PUSH
48800: LD_INT 47
48802: PUSH
48803: LD_INT 49
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: LIST
48818: PUSH
48819: LD_VAR 0 12
48823: ARRAY
48824: ST_TO_ADDR
// list := list isect fac_list ;
48825: LD_ADDR_VAR 0 5
48829: PUSH
48830: LD_VAR 0 5
48834: PUSH
48835: LD_VAR 0 17
48839: ISECT
48840: ST_TO_ADDR
// if not list then
48841: LD_VAR 0 5
48845: NOT
48846: IFFALSE 48850
// exit ;
48848: GO 49654
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48850: LD_VAR 0 12
48854: PUSH
48855: LD_INT 3
48857: EQUAL
48858: PUSH
48859: LD_INT 49
48861: PUSH
48862: LD_VAR 0 5
48866: IN
48867: AND
48868: PUSH
48869: LD_INT 31
48871: PPUSH
48872: LD_VAR 0 16
48876: PPUSH
48877: CALL_OW 321
48881: PUSH
48882: LD_INT 2
48884: EQUAL
48885: AND
48886: IFFALSE 48946
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48888: LD_INT 22
48890: PUSH
48891: LD_VAR 0 16
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 35
48902: PUSH
48903: LD_INT 49
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 91
48912: PUSH
48913: LD_VAR 0 1
48917: PUSH
48918: LD_INT 10
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: LIST
48930: PPUSH
48931: CALL_OW 69
48935: NOT
48936: IFFALSE 48946
// weapon := ru_time_lapser ;
48938: LD_ADDR_VAR 0 18
48942: PUSH
48943: LD_INT 49
48945: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48946: LD_VAR 0 12
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: IN
48961: PUSH
48962: LD_INT 11
48964: PUSH
48965: LD_VAR 0 5
48969: IN
48970: PUSH
48971: LD_INT 30
48973: PUSH
48974: LD_VAR 0 5
48978: IN
48979: OR
48980: AND
48981: PUSH
48982: LD_INT 6
48984: PPUSH
48985: LD_VAR 0 16
48989: PPUSH
48990: CALL_OW 321
48994: PUSH
48995: LD_INT 2
48997: EQUAL
48998: AND
48999: IFFALSE 49164
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49001: LD_INT 22
49003: PUSH
49004: LD_VAR 0 16
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 35
49018: PUSH
49019: LD_INT 11
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 35
49028: PUSH
49029: LD_INT 30
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 91
49043: PUSH
49044: LD_VAR 0 1
49048: PUSH
49049: LD_INT 18
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: LIST
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: LIST
49061: PPUSH
49062: CALL_OW 69
49066: NOT
49067: PUSH
49068: LD_INT 22
49070: PUSH
49071: LD_VAR 0 16
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 30
49085: PUSH
49086: LD_INT 32
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 30
49095: PUSH
49096: LD_INT 33
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 91
49110: PUSH
49111: LD_VAR 0 1
49115: PUSH
49116: LD_INT 12
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: LIST
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: PUSH
49129: EMPTY
49130: LIST
49131: PPUSH
49132: CALL_OW 69
49136: PUSH
49137: LD_INT 2
49139: GREATER
49140: AND
49141: IFFALSE 49164
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49143: LD_ADDR_VAR 0 18
49147: PUSH
49148: LD_INT 11
49150: PUSH
49151: LD_INT 30
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_VAR 0 12
49162: ARRAY
49163: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49164: LD_VAR 0 18
49168: NOT
49169: PUSH
49170: LD_INT 40
49172: PPUSH
49173: LD_VAR 0 16
49177: PPUSH
49178: CALL_OW 321
49182: PUSH
49183: LD_INT 2
49185: EQUAL
49186: AND
49187: PUSH
49188: LD_INT 7
49190: PUSH
49191: LD_VAR 0 5
49195: IN
49196: PUSH
49197: LD_INT 28
49199: PUSH
49200: LD_VAR 0 5
49204: IN
49205: OR
49206: PUSH
49207: LD_INT 45
49209: PUSH
49210: LD_VAR 0 5
49214: IN
49215: OR
49216: AND
49217: IFFALSE 49471
// begin hex := GetHexInfo ( x , y ) ;
49219: LD_ADDR_VAR 0 4
49223: PUSH
49224: LD_VAR 0 10
49228: PPUSH
49229: LD_VAR 0 11
49233: PPUSH
49234: CALL_OW 546
49238: ST_TO_ADDR
// if hex [ 1 ] then
49239: LD_VAR 0 4
49243: PUSH
49244: LD_INT 1
49246: ARRAY
49247: IFFALSE 49251
// exit ;
49249: GO 49654
// height := hex [ 2 ] ;
49251: LD_ADDR_VAR 0 15
49255: PUSH
49256: LD_VAR 0 4
49260: PUSH
49261: LD_INT 2
49263: ARRAY
49264: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49265: LD_ADDR_VAR 0 14
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: LD_INT 3
49278: PUSH
49279: LD_INT 5
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: ST_TO_ADDR
// for i in tmp do
49288: LD_ADDR_VAR 0 8
49292: PUSH
49293: LD_VAR 0 14
49297: PUSH
49298: FOR_IN
49299: IFFALSE 49469
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49301: LD_ADDR_VAR 0 9
49305: PUSH
49306: LD_VAR 0 10
49310: PPUSH
49311: LD_VAR 0 8
49315: PPUSH
49316: LD_INT 5
49318: PPUSH
49319: CALL_OW 272
49323: PUSH
49324: LD_VAR 0 11
49328: PPUSH
49329: LD_VAR 0 8
49333: PPUSH
49334: LD_INT 5
49336: PPUSH
49337: CALL_OW 273
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49346: LD_VAR 0 9
49350: PUSH
49351: LD_INT 1
49353: ARRAY
49354: PPUSH
49355: LD_VAR 0 9
49359: PUSH
49360: LD_INT 2
49362: ARRAY
49363: PPUSH
49364: CALL_OW 488
49368: IFFALSE 49467
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49370: LD_ADDR_VAR 0 4
49374: PUSH
49375: LD_VAR 0 9
49379: PUSH
49380: LD_INT 1
49382: ARRAY
49383: PPUSH
49384: LD_VAR 0 9
49388: PUSH
49389: LD_INT 2
49391: ARRAY
49392: PPUSH
49393: CALL_OW 546
49397: ST_TO_ADDR
// if hex [ 1 ] then
49398: LD_VAR 0 4
49402: PUSH
49403: LD_INT 1
49405: ARRAY
49406: IFFALSE 49410
// continue ;
49408: GO 49298
// h := hex [ 2 ] ;
49410: LD_ADDR_VAR 0 13
49414: PUSH
49415: LD_VAR 0 4
49419: PUSH
49420: LD_INT 2
49422: ARRAY
49423: ST_TO_ADDR
// if h + 7 < height then
49424: LD_VAR 0 13
49428: PUSH
49429: LD_INT 7
49431: PLUS
49432: PUSH
49433: LD_VAR 0 15
49437: LESS
49438: IFFALSE 49467
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49440: LD_ADDR_VAR 0 18
49444: PUSH
49445: LD_INT 7
49447: PUSH
49448: LD_INT 28
49450: PUSH
49451: LD_INT 45
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: LIST
49458: PUSH
49459: LD_VAR 0 12
49463: ARRAY
49464: ST_TO_ADDR
// break ;
49465: GO 49469
// end ; end ; end ;
49467: GO 49298
49469: POP
49470: POP
// end ; if not weapon then
49471: LD_VAR 0 18
49475: NOT
49476: IFFALSE 49536
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49478: LD_ADDR_VAR 0 5
49482: PUSH
49483: LD_VAR 0 5
49487: PUSH
49488: LD_INT 11
49490: PUSH
49491: LD_INT 30
49493: PUSH
49494: LD_INT 49
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: LIST
49501: DIFF
49502: ST_TO_ADDR
// if not list then
49503: LD_VAR 0 5
49507: NOT
49508: IFFALSE 49512
// exit ;
49510: GO 49654
// weapon := list [ rand ( 1 , list ) ] ;
49512: LD_ADDR_VAR 0 18
49516: PUSH
49517: LD_VAR 0 5
49521: PUSH
49522: LD_INT 1
49524: PPUSH
49525: LD_VAR 0 5
49529: PPUSH
49530: CALL_OW 12
49534: ARRAY
49535: ST_TO_ADDR
// end ; if weapon then
49536: LD_VAR 0 18
49540: IFFALSE 49654
// begin tmp := CostOfWeapon ( weapon ) ;
49542: LD_ADDR_VAR 0 14
49546: PUSH
49547: LD_VAR 0 18
49551: PPUSH
49552: CALL_OW 451
49556: ST_TO_ADDR
// j := GetBase ( tower ) ;
49557: LD_ADDR_VAR 0 9
49561: PUSH
49562: LD_VAR 0 1
49566: PPUSH
49567: CALL_OW 274
49571: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49572: LD_VAR 0 9
49576: PPUSH
49577: LD_INT 1
49579: PPUSH
49580: CALL_OW 275
49584: PUSH
49585: LD_VAR 0 14
49589: PUSH
49590: LD_INT 1
49592: ARRAY
49593: GREATEREQUAL
49594: PUSH
49595: LD_VAR 0 9
49599: PPUSH
49600: LD_INT 2
49602: PPUSH
49603: CALL_OW 275
49607: PUSH
49608: LD_VAR 0 14
49612: PUSH
49613: LD_INT 2
49615: ARRAY
49616: GREATEREQUAL
49617: AND
49618: PUSH
49619: LD_VAR 0 9
49623: PPUSH
49624: LD_INT 3
49626: PPUSH
49627: CALL_OW 275
49631: PUSH
49632: LD_VAR 0 14
49636: PUSH
49637: LD_INT 3
49639: ARRAY
49640: GREATEREQUAL
49641: AND
49642: IFFALSE 49654
// result := weapon ;
49644: LD_ADDR_VAR 0 3
49648: PUSH
49649: LD_VAR 0 18
49653: ST_TO_ADDR
// end ; end ;
49654: LD_VAR 0 3
49658: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49659: LD_INT 0
49661: PPUSH
49662: PPUSH
// result := true ;
49663: LD_ADDR_VAR 0 3
49667: PUSH
49668: LD_INT 1
49670: ST_TO_ADDR
// if array1 = array2 then
49671: LD_VAR 0 1
49675: PUSH
49676: LD_VAR 0 2
49680: EQUAL
49681: IFFALSE 49741
// begin for i = 1 to array1 do
49683: LD_ADDR_VAR 0 4
49687: PUSH
49688: DOUBLE
49689: LD_INT 1
49691: DEC
49692: ST_TO_ADDR
49693: LD_VAR 0 1
49697: PUSH
49698: FOR_TO
49699: IFFALSE 49737
// if array1 [ i ] <> array2 [ i ] then
49701: LD_VAR 0 1
49705: PUSH
49706: LD_VAR 0 4
49710: ARRAY
49711: PUSH
49712: LD_VAR 0 2
49716: PUSH
49717: LD_VAR 0 4
49721: ARRAY
49722: NONEQUAL
49723: IFFALSE 49735
// begin result := false ;
49725: LD_ADDR_VAR 0 3
49729: PUSH
49730: LD_INT 0
49732: ST_TO_ADDR
// break ;
49733: GO 49737
// end ;
49735: GO 49698
49737: POP
49738: POP
// end else
49739: GO 49749
// result := false ;
49741: LD_ADDR_VAR 0 3
49745: PUSH
49746: LD_INT 0
49748: ST_TO_ADDR
// end ;
49749: LD_VAR 0 3
49753: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49754: LD_INT 0
49756: PPUSH
49757: PPUSH
// if not array1 or not array2 then
49758: LD_VAR 0 1
49762: NOT
49763: PUSH
49764: LD_VAR 0 2
49768: NOT
49769: OR
49770: IFFALSE 49774
// exit ;
49772: GO 49838
// result := true ;
49774: LD_ADDR_VAR 0 3
49778: PUSH
49779: LD_INT 1
49781: ST_TO_ADDR
// for i = 1 to array1 do
49782: LD_ADDR_VAR 0 4
49786: PUSH
49787: DOUBLE
49788: LD_INT 1
49790: DEC
49791: ST_TO_ADDR
49792: LD_VAR 0 1
49796: PUSH
49797: FOR_TO
49798: IFFALSE 49836
// if array1 [ i ] <> array2 [ i ] then
49800: LD_VAR 0 1
49804: PUSH
49805: LD_VAR 0 4
49809: ARRAY
49810: PUSH
49811: LD_VAR 0 2
49815: PUSH
49816: LD_VAR 0 4
49820: ARRAY
49821: NONEQUAL
49822: IFFALSE 49834
// begin result := false ;
49824: LD_ADDR_VAR 0 3
49828: PUSH
49829: LD_INT 0
49831: ST_TO_ADDR
// break ;
49832: GO 49836
// end ;
49834: GO 49797
49836: POP
49837: POP
// end ;
49838: LD_VAR 0 3
49842: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49843: LD_INT 0
49845: PPUSH
49846: PPUSH
49847: PPUSH
// pom := GetBase ( fac ) ;
49848: LD_ADDR_VAR 0 5
49852: PUSH
49853: LD_VAR 0 1
49857: PPUSH
49858: CALL_OW 274
49862: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49863: LD_ADDR_VAR 0 4
49867: PUSH
49868: LD_VAR 0 2
49872: PUSH
49873: LD_INT 1
49875: ARRAY
49876: PPUSH
49877: LD_VAR 0 2
49881: PUSH
49882: LD_INT 2
49884: ARRAY
49885: PPUSH
49886: LD_VAR 0 2
49890: PUSH
49891: LD_INT 3
49893: ARRAY
49894: PPUSH
49895: LD_VAR 0 2
49899: PUSH
49900: LD_INT 4
49902: ARRAY
49903: PPUSH
49904: CALL_OW 449
49908: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49909: LD_ADDR_VAR 0 3
49913: PUSH
49914: LD_VAR 0 5
49918: PPUSH
49919: LD_INT 1
49921: PPUSH
49922: CALL_OW 275
49926: PUSH
49927: LD_VAR 0 4
49931: PUSH
49932: LD_INT 1
49934: ARRAY
49935: GREATEREQUAL
49936: PUSH
49937: LD_VAR 0 5
49941: PPUSH
49942: LD_INT 2
49944: PPUSH
49945: CALL_OW 275
49949: PUSH
49950: LD_VAR 0 4
49954: PUSH
49955: LD_INT 2
49957: ARRAY
49958: GREATEREQUAL
49959: AND
49960: PUSH
49961: LD_VAR 0 5
49965: PPUSH
49966: LD_INT 3
49968: PPUSH
49969: CALL_OW 275
49973: PUSH
49974: LD_VAR 0 4
49978: PUSH
49979: LD_INT 3
49981: ARRAY
49982: GREATEREQUAL
49983: AND
49984: ST_TO_ADDR
// end ;
49985: LD_VAR 0 3
49989: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49990: LD_INT 0
49992: PPUSH
49993: PPUSH
49994: PPUSH
49995: PPUSH
// pom := GetBase ( building ) ;
49996: LD_ADDR_VAR 0 3
50000: PUSH
50001: LD_VAR 0 1
50005: PPUSH
50006: CALL_OW 274
50010: ST_TO_ADDR
// if not pom then
50011: LD_VAR 0 3
50015: NOT
50016: IFFALSE 50020
// exit ;
50018: GO 50190
// btype := GetBType ( building ) ;
50020: LD_ADDR_VAR 0 5
50024: PUSH
50025: LD_VAR 0 1
50029: PPUSH
50030: CALL_OW 266
50034: ST_TO_ADDR
// if btype = b_armoury then
50035: LD_VAR 0 5
50039: PUSH
50040: LD_INT 4
50042: EQUAL
50043: IFFALSE 50053
// btype := b_barracks ;
50045: LD_ADDR_VAR 0 5
50049: PUSH
50050: LD_INT 5
50052: ST_TO_ADDR
// if btype = b_depot then
50053: LD_VAR 0 5
50057: PUSH
50058: LD_INT 0
50060: EQUAL
50061: IFFALSE 50071
// btype := b_warehouse ;
50063: LD_ADDR_VAR 0 5
50067: PUSH
50068: LD_INT 1
50070: ST_TO_ADDR
// if btype = b_workshop then
50071: LD_VAR 0 5
50075: PUSH
50076: LD_INT 2
50078: EQUAL
50079: IFFALSE 50089
// btype := b_factory ;
50081: LD_ADDR_VAR 0 5
50085: PUSH
50086: LD_INT 3
50088: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50089: LD_ADDR_VAR 0 4
50093: PUSH
50094: LD_VAR 0 5
50098: PPUSH
50099: LD_VAR 0 1
50103: PPUSH
50104: CALL_OW 248
50108: PPUSH
50109: CALL_OW 450
50113: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50114: LD_ADDR_VAR 0 2
50118: PUSH
50119: LD_VAR 0 3
50123: PPUSH
50124: LD_INT 1
50126: PPUSH
50127: CALL_OW 275
50131: PUSH
50132: LD_VAR 0 4
50136: PUSH
50137: LD_INT 1
50139: ARRAY
50140: GREATEREQUAL
50141: PUSH
50142: LD_VAR 0 3
50146: PPUSH
50147: LD_INT 2
50149: PPUSH
50150: CALL_OW 275
50154: PUSH
50155: LD_VAR 0 4
50159: PUSH
50160: LD_INT 2
50162: ARRAY
50163: GREATEREQUAL
50164: AND
50165: PUSH
50166: LD_VAR 0 3
50170: PPUSH
50171: LD_INT 3
50173: PPUSH
50174: CALL_OW 275
50178: PUSH
50179: LD_VAR 0 4
50183: PUSH
50184: LD_INT 3
50186: ARRAY
50187: GREATEREQUAL
50188: AND
50189: ST_TO_ADDR
// end ;
50190: LD_VAR 0 2
50194: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50195: LD_INT 0
50197: PPUSH
50198: PPUSH
50199: PPUSH
// pom := GetBase ( building ) ;
50200: LD_ADDR_VAR 0 4
50204: PUSH
50205: LD_VAR 0 1
50209: PPUSH
50210: CALL_OW 274
50214: ST_TO_ADDR
// if not pom then
50215: LD_VAR 0 4
50219: NOT
50220: IFFALSE 50224
// exit ;
50222: GO 50325
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50224: LD_ADDR_VAR 0 5
50228: PUSH
50229: LD_VAR 0 2
50233: PPUSH
50234: LD_VAR 0 1
50238: PPUSH
50239: CALL_OW 248
50243: PPUSH
50244: CALL_OW 450
50248: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50249: LD_ADDR_VAR 0 3
50253: PUSH
50254: LD_VAR 0 4
50258: PPUSH
50259: LD_INT 1
50261: PPUSH
50262: CALL_OW 275
50266: PUSH
50267: LD_VAR 0 5
50271: PUSH
50272: LD_INT 1
50274: ARRAY
50275: GREATEREQUAL
50276: PUSH
50277: LD_VAR 0 4
50281: PPUSH
50282: LD_INT 2
50284: PPUSH
50285: CALL_OW 275
50289: PUSH
50290: LD_VAR 0 5
50294: PUSH
50295: LD_INT 2
50297: ARRAY
50298: GREATEREQUAL
50299: AND
50300: PUSH
50301: LD_VAR 0 4
50305: PPUSH
50306: LD_INT 3
50308: PPUSH
50309: CALL_OW 275
50313: PUSH
50314: LD_VAR 0 5
50318: PUSH
50319: LD_INT 3
50321: ARRAY
50322: GREATEREQUAL
50323: AND
50324: ST_TO_ADDR
// end ;
50325: LD_VAR 0 3
50329: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50330: LD_INT 0
50332: PPUSH
50333: PPUSH
50334: PPUSH
50335: PPUSH
50336: PPUSH
50337: PPUSH
50338: PPUSH
50339: PPUSH
50340: PPUSH
50341: PPUSH
50342: PPUSH
// result := false ;
50343: LD_ADDR_VAR 0 8
50347: PUSH
50348: LD_INT 0
50350: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50351: LD_VAR 0 5
50355: NOT
50356: PUSH
50357: LD_VAR 0 1
50361: NOT
50362: OR
50363: PUSH
50364: LD_VAR 0 2
50368: NOT
50369: OR
50370: PUSH
50371: LD_VAR 0 3
50375: NOT
50376: OR
50377: IFFALSE 50381
// exit ;
50379: GO 51195
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50381: LD_ADDR_VAR 0 14
50385: PUSH
50386: LD_VAR 0 1
50390: PPUSH
50391: LD_VAR 0 2
50395: PPUSH
50396: LD_VAR 0 3
50400: PPUSH
50401: LD_VAR 0 4
50405: PPUSH
50406: LD_VAR 0 5
50410: PUSH
50411: LD_INT 1
50413: ARRAY
50414: PPUSH
50415: CALL_OW 248
50419: PPUSH
50420: LD_INT 0
50422: PPUSH
50423: CALL 52428 0 6
50427: ST_TO_ADDR
// if not hexes then
50428: LD_VAR 0 14
50432: NOT
50433: IFFALSE 50437
// exit ;
50435: GO 51195
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50437: LD_ADDR_VAR 0 17
50441: PUSH
50442: LD_VAR 0 5
50446: PPUSH
50447: LD_INT 22
50449: PUSH
50450: LD_VAR 0 13
50454: PPUSH
50455: CALL_OW 255
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 30
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 30
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: LIST
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PPUSH
50496: CALL_OW 72
50500: ST_TO_ADDR
// for i = 1 to hexes do
50501: LD_ADDR_VAR 0 9
50505: PUSH
50506: DOUBLE
50507: LD_INT 1
50509: DEC
50510: ST_TO_ADDR
50511: LD_VAR 0 14
50515: PUSH
50516: FOR_TO
50517: IFFALSE 51193
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50519: LD_ADDR_VAR 0 13
50523: PUSH
50524: LD_VAR 0 14
50528: PUSH
50529: LD_VAR 0 9
50533: ARRAY
50534: PUSH
50535: LD_INT 1
50537: ARRAY
50538: PPUSH
50539: LD_VAR 0 14
50543: PUSH
50544: LD_VAR 0 9
50548: ARRAY
50549: PUSH
50550: LD_INT 2
50552: ARRAY
50553: PPUSH
50554: CALL_OW 428
50558: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50559: LD_VAR 0 14
50563: PUSH
50564: LD_VAR 0 9
50568: ARRAY
50569: PUSH
50570: LD_INT 1
50572: ARRAY
50573: PPUSH
50574: LD_VAR 0 14
50578: PUSH
50579: LD_VAR 0 9
50583: ARRAY
50584: PUSH
50585: LD_INT 2
50587: ARRAY
50588: PPUSH
50589: CALL_OW 351
50593: PUSH
50594: LD_VAR 0 14
50598: PUSH
50599: LD_VAR 0 9
50603: ARRAY
50604: PUSH
50605: LD_INT 1
50607: ARRAY
50608: PPUSH
50609: LD_VAR 0 14
50613: PUSH
50614: LD_VAR 0 9
50618: ARRAY
50619: PUSH
50620: LD_INT 2
50622: ARRAY
50623: PPUSH
50624: CALL_OW 488
50628: NOT
50629: OR
50630: PUSH
50631: LD_VAR 0 13
50635: PPUSH
50636: CALL_OW 247
50640: PUSH
50641: LD_INT 3
50643: EQUAL
50644: OR
50645: IFFALSE 50651
// exit ;
50647: POP
50648: POP
50649: GO 51195
// if not tmp then
50651: LD_VAR 0 13
50655: NOT
50656: IFFALSE 50660
// continue ;
50658: GO 50516
// result := true ;
50660: LD_ADDR_VAR 0 8
50664: PUSH
50665: LD_INT 1
50667: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50668: LD_VAR 0 6
50672: PUSH
50673: LD_VAR 0 13
50677: PPUSH
50678: CALL_OW 247
50682: PUSH
50683: LD_INT 2
50685: EQUAL
50686: AND
50687: PUSH
50688: LD_VAR 0 13
50692: PPUSH
50693: CALL_OW 263
50697: PUSH
50698: LD_INT 1
50700: EQUAL
50701: AND
50702: IFFALSE 50866
// begin if IsDrivenBy ( tmp ) then
50704: LD_VAR 0 13
50708: PPUSH
50709: CALL_OW 311
50713: IFFALSE 50717
// continue ;
50715: GO 50516
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50717: LD_VAR 0 6
50721: PPUSH
50722: LD_INT 3
50724: PUSH
50725: LD_INT 60
50727: PUSH
50728: EMPTY
50729: LIST
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 3
50737: PUSH
50738: LD_INT 55
50740: PUSH
50741: EMPTY
50742: LIST
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PPUSH
50752: CALL_OW 72
50756: IFFALSE 50864
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50758: LD_ADDR_VAR 0 18
50762: PUSH
50763: LD_VAR 0 6
50767: PPUSH
50768: LD_INT 3
50770: PUSH
50771: LD_INT 60
50773: PUSH
50774: EMPTY
50775: LIST
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: LD_INT 55
50786: PUSH
50787: EMPTY
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PPUSH
50798: CALL_OW 72
50802: PUSH
50803: LD_INT 1
50805: ARRAY
50806: ST_TO_ADDR
// if IsInUnit ( driver ) then
50807: LD_VAR 0 18
50811: PPUSH
50812: CALL_OW 310
50816: IFFALSE 50827
// ComExit ( driver ) ;
50818: LD_VAR 0 18
50822: PPUSH
50823: CALL 76116 0 1
// AddComEnterUnit ( driver , tmp ) ;
50827: LD_VAR 0 18
50831: PPUSH
50832: LD_VAR 0 13
50836: PPUSH
50837: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50841: LD_VAR 0 18
50845: PPUSH
50846: LD_VAR 0 7
50850: PPUSH
50851: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50855: LD_VAR 0 18
50859: PPUSH
50860: CALL_OW 181
// end ; continue ;
50864: GO 50516
// end ; if not cleaners or not tmp in cleaners then
50866: LD_VAR 0 6
50870: NOT
50871: PUSH
50872: LD_VAR 0 13
50876: PUSH
50877: LD_VAR 0 6
50881: IN
50882: NOT
50883: OR
50884: IFFALSE 51191
// begin if dep then
50886: LD_VAR 0 17
50890: IFFALSE 51026
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50892: LD_ADDR_VAR 0 16
50896: PUSH
50897: LD_VAR 0 17
50901: PUSH
50902: LD_INT 1
50904: ARRAY
50905: PPUSH
50906: CALL_OW 250
50910: PPUSH
50911: LD_VAR 0 17
50915: PUSH
50916: LD_INT 1
50918: ARRAY
50919: PPUSH
50920: CALL_OW 254
50924: PPUSH
50925: LD_INT 5
50927: PPUSH
50928: CALL_OW 272
50932: PUSH
50933: LD_VAR 0 17
50937: PUSH
50938: LD_INT 1
50940: ARRAY
50941: PPUSH
50942: CALL_OW 251
50946: PPUSH
50947: LD_VAR 0 17
50951: PUSH
50952: LD_INT 1
50954: ARRAY
50955: PPUSH
50956: CALL_OW 254
50960: PPUSH
50961: LD_INT 5
50963: PPUSH
50964: CALL_OW 273
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50973: LD_VAR 0 16
50977: PUSH
50978: LD_INT 1
50980: ARRAY
50981: PPUSH
50982: LD_VAR 0 16
50986: PUSH
50987: LD_INT 2
50989: ARRAY
50990: PPUSH
50991: CALL_OW 488
50995: IFFALSE 51026
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50997: LD_VAR 0 13
51001: PPUSH
51002: LD_VAR 0 16
51006: PUSH
51007: LD_INT 1
51009: ARRAY
51010: PPUSH
51011: LD_VAR 0 16
51015: PUSH
51016: LD_INT 2
51018: ARRAY
51019: PPUSH
51020: CALL_OW 111
// continue ;
51024: GO 50516
// end ; end ; r := GetDir ( tmp ) ;
51026: LD_ADDR_VAR 0 15
51030: PUSH
51031: LD_VAR 0 13
51035: PPUSH
51036: CALL_OW 254
51040: ST_TO_ADDR
// if r = 5 then
51041: LD_VAR 0 15
51045: PUSH
51046: LD_INT 5
51048: EQUAL
51049: IFFALSE 51059
// r := 0 ;
51051: LD_ADDR_VAR 0 15
51055: PUSH
51056: LD_INT 0
51058: ST_TO_ADDR
// for j = r to 5 do
51059: LD_ADDR_VAR 0 10
51063: PUSH
51064: DOUBLE
51065: LD_VAR 0 15
51069: DEC
51070: ST_TO_ADDR
51071: LD_INT 5
51073: PUSH
51074: FOR_TO
51075: IFFALSE 51189
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51077: LD_ADDR_VAR 0 11
51081: PUSH
51082: LD_VAR 0 13
51086: PPUSH
51087: CALL_OW 250
51091: PPUSH
51092: LD_VAR 0 10
51096: PPUSH
51097: LD_INT 2
51099: PPUSH
51100: CALL_OW 272
51104: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51105: LD_ADDR_VAR 0 12
51109: PUSH
51110: LD_VAR 0 13
51114: PPUSH
51115: CALL_OW 251
51119: PPUSH
51120: LD_VAR 0 10
51124: PPUSH
51125: LD_INT 2
51127: PPUSH
51128: CALL_OW 273
51132: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51133: LD_VAR 0 11
51137: PPUSH
51138: LD_VAR 0 12
51142: PPUSH
51143: CALL_OW 488
51147: PUSH
51148: LD_VAR 0 11
51152: PPUSH
51153: LD_VAR 0 12
51157: PPUSH
51158: CALL_OW 428
51162: NOT
51163: AND
51164: IFFALSE 51187
// begin ComMoveXY ( tmp , _x , _y ) ;
51166: LD_VAR 0 13
51170: PPUSH
51171: LD_VAR 0 11
51175: PPUSH
51176: LD_VAR 0 12
51180: PPUSH
51181: CALL_OW 111
// break ;
51185: GO 51189
// end ; end ;
51187: GO 51074
51189: POP
51190: POP
// end ; end ;
51191: GO 50516
51193: POP
51194: POP
// end ;
51195: LD_VAR 0 8
51199: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51200: LD_INT 0
51202: PPUSH
// result := true ;
51203: LD_ADDR_VAR 0 3
51207: PUSH
51208: LD_INT 1
51210: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51211: LD_VAR 0 2
51215: PUSH
51216: LD_INT 24
51218: DOUBLE
51219: EQUAL
51220: IFTRUE 51230
51222: LD_INT 33
51224: DOUBLE
51225: EQUAL
51226: IFTRUE 51230
51228: GO 51255
51230: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51231: LD_ADDR_VAR 0 3
51235: PUSH
51236: LD_INT 32
51238: PPUSH
51239: LD_VAR 0 1
51243: PPUSH
51244: CALL_OW 321
51248: PUSH
51249: LD_INT 2
51251: EQUAL
51252: ST_TO_ADDR
51253: GO 51571
51255: LD_INT 20
51257: DOUBLE
51258: EQUAL
51259: IFTRUE 51263
51261: GO 51288
51263: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51264: LD_ADDR_VAR 0 3
51268: PUSH
51269: LD_INT 6
51271: PPUSH
51272: LD_VAR 0 1
51276: PPUSH
51277: CALL_OW 321
51281: PUSH
51282: LD_INT 2
51284: EQUAL
51285: ST_TO_ADDR
51286: GO 51571
51288: LD_INT 22
51290: DOUBLE
51291: EQUAL
51292: IFTRUE 51302
51294: LD_INT 36
51296: DOUBLE
51297: EQUAL
51298: IFTRUE 51302
51300: GO 51327
51302: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51303: LD_ADDR_VAR 0 3
51307: PUSH
51308: LD_INT 15
51310: PPUSH
51311: LD_VAR 0 1
51315: PPUSH
51316: CALL_OW 321
51320: PUSH
51321: LD_INT 2
51323: EQUAL
51324: ST_TO_ADDR
51325: GO 51571
51327: LD_INT 30
51329: DOUBLE
51330: EQUAL
51331: IFTRUE 51335
51333: GO 51360
51335: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51336: LD_ADDR_VAR 0 3
51340: PUSH
51341: LD_INT 20
51343: PPUSH
51344: LD_VAR 0 1
51348: PPUSH
51349: CALL_OW 321
51353: PUSH
51354: LD_INT 2
51356: EQUAL
51357: ST_TO_ADDR
51358: GO 51571
51360: LD_INT 28
51362: DOUBLE
51363: EQUAL
51364: IFTRUE 51374
51366: LD_INT 21
51368: DOUBLE
51369: EQUAL
51370: IFTRUE 51374
51372: GO 51399
51374: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51375: LD_ADDR_VAR 0 3
51379: PUSH
51380: LD_INT 21
51382: PPUSH
51383: LD_VAR 0 1
51387: PPUSH
51388: CALL_OW 321
51392: PUSH
51393: LD_INT 2
51395: EQUAL
51396: ST_TO_ADDR
51397: GO 51571
51399: LD_INT 16
51401: DOUBLE
51402: EQUAL
51403: IFTRUE 51407
51405: GO 51432
51407: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51408: LD_ADDR_VAR 0 3
51412: PUSH
51413: LD_INT 84
51415: PPUSH
51416: LD_VAR 0 1
51420: PPUSH
51421: CALL_OW 321
51425: PUSH
51426: LD_INT 2
51428: EQUAL
51429: ST_TO_ADDR
51430: GO 51571
51432: LD_INT 19
51434: DOUBLE
51435: EQUAL
51436: IFTRUE 51446
51438: LD_INT 23
51440: DOUBLE
51441: EQUAL
51442: IFTRUE 51446
51444: GO 51471
51446: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51447: LD_ADDR_VAR 0 3
51451: PUSH
51452: LD_INT 83
51454: PPUSH
51455: LD_VAR 0 1
51459: PPUSH
51460: CALL_OW 321
51464: PUSH
51465: LD_INT 2
51467: EQUAL
51468: ST_TO_ADDR
51469: GO 51571
51471: LD_INT 17
51473: DOUBLE
51474: EQUAL
51475: IFTRUE 51479
51477: GO 51504
51479: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51480: LD_ADDR_VAR 0 3
51484: PUSH
51485: LD_INT 39
51487: PPUSH
51488: LD_VAR 0 1
51492: PPUSH
51493: CALL_OW 321
51497: PUSH
51498: LD_INT 2
51500: EQUAL
51501: ST_TO_ADDR
51502: GO 51571
51504: LD_INT 18
51506: DOUBLE
51507: EQUAL
51508: IFTRUE 51512
51510: GO 51537
51512: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51513: LD_ADDR_VAR 0 3
51517: PUSH
51518: LD_INT 40
51520: PPUSH
51521: LD_VAR 0 1
51525: PPUSH
51526: CALL_OW 321
51530: PUSH
51531: LD_INT 2
51533: EQUAL
51534: ST_TO_ADDR
51535: GO 51571
51537: LD_INT 27
51539: DOUBLE
51540: EQUAL
51541: IFTRUE 51545
51543: GO 51570
51545: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51546: LD_ADDR_VAR 0 3
51550: PUSH
51551: LD_INT 35
51553: PPUSH
51554: LD_VAR 0 1
51558: PPUSH
51559: CALL_OW 321
51563: PUSH
51564: LD_INT 2
51566: EQUAL
51567: ST_TO_ADDR
51568: GO 51571
51570: POP
// end ;
51571: LD_VAR 0 3
51575: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51576: LD_INT 0
51578: PPUSH
51579: PPUSH
51580: PPUSH
51581: PPUSH
51582: PPUSH
51583: PPUSH
51584: PPUSH
51585: PPUSH
51586: PPUSH
51587: PPUSH
51588: PPUSH
// result := false ;
51589: LD_ADDR_VAR 0 6
51593: PUSH
51594: LD_INT 0
51596: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51597: LD_VAR 0 1
51601: NOT
51602: PUSH
51603: LD_VAR 0 1
51607: PPUSH
51608: CALL_OW 266
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: IN
51623: NOT
51624: OR
51625: PUSH
51626: LD_VAR 0 2
51630: NOT
51631: OR
51632: PUSH
51633: LD_VAR 0 5
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 3
51649: PUSH
51650: LD_INT 4
51652: PUSH
51653: LD_INT 5
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: IN
51664: NOT
51665: OR
51666: PUSH
51667: LD_VAR 0 3
51671: PPUSH
51672: LD_VAR 0 4
51676: PPUSH
51677: CALL_OW 488
51681: NOT
51682: OR
51683: IFFALSE 51687
// exit ;
51685: GO 52423
// side := GetSide ( depot ) ;
51687: LD_ADDR_VAR 0 9
51691: PUSH
51692: LD_VAR 0 1
51696: PPUSH
51697: CALL_OW 255
51701: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51702: LD_VAR 0 9
51706: PPUSH
51707: LD_VAR 0 2
51711: PPUSH
51712: CALL 51200 0 2
51716: NOT
51717: IFFALSE 51721
// exit ;
51719: GO 52423
// pom := GetBase ( depot ) ;
51721: LD_ADDR_VAR 0 10
51725: PUSH
51726: LD_VAR 0 1
51730: PPUSH
51731: CALL_OW 274
51735: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51736: LD_ADDR_VAR 0 11
51740: PUSH
51741: LD_VAR 0 2
51745: PPUSH
51746: LD_VAR 0 1
51750: PPUSH
51751: CALL_OW 248
51755: PPUSH
51756: CALL_OW 450
51760: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51761: LD_VAR 0 10
51765: PPUSH
51766: LD_INT 1
51768: PPUSH
51769: CALL_OW 275
51773: PUSH
51774: LD_VAR 0 11
51778: PUSH
51779: LD_INT 1
51781: ARRAY
51782: GREATEREQUAL
51783: PUSH
51784: LD_VAR 0 10
51788: PPUSH
51789: LD_INT 2
51791: PPUSH
51792: CALL_OW 275
51796: PUSH
51797: LD_VAR 0 11
51801: PUSH
51802: LD_INT 2
51804: ARRAY
51805: GREATEREQUAL
51806: AND
51807: PUSH
51808: LD_VAR 0 10
51812: PPUSH
51813: LD_INT 3
51815: PPUSH
51816: CALL_OW 275
51820: PUSH
51821: LD_VAR 0 11
51825: PUSH
51826: LD_INT 3
51828: ARRAY
51829: GREATEREQUAL
51830: AND
51831: NOT
51832: IFFALSE 51836
// exit ;
51834: GO 52423
// if GetBType ( depot ) = b_depot then
51836: LD_VAR 0 1
51840: PPUSH
51841: CALL_OW 266
51845: PUSH
51846: LD_INT 0
51848: EQUAL
51849: IFFALSE 51861
// dist := 28 else
51851: LD_ADDR_VAR 0 14
51855: PUSH
51856: LD_INT 28
51858: ST_TO_ADDR
51859: GO 51869
// dist := 36 ;
51861: LD_ADDR_VAR 0 14
51865: PUSH
51866: LD_INT 36
51868: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51869: LD_VAR 0 1
51873: PPUSH
51874: LD_VAR 0 3
51878: PPUSH
51879: LD_VAR 0 4
51883: PPUSH
51884: CALL_OW 297
51888: PUSH
51889: LD_VAR 0 14
51893: GREATER
51894: IFFALSE 51898
// exit ;
51896: GO 52423
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51898: LD_ADDR_VAR 0 12
51902: PUSH
51903: LD_VAR 0 2
51907: PPUSH
51908: LD_VAR 0 3
51912: PPUSH
51913: LD_VAR 0 4
51917: PPUSH
51918: LD_VAR 0 5
51922: PPUSH
51923: LD_VAR 0 1
51927: PPUSH
51928: CALL_OW 248
51932: PPUSH
51933: LD_INT 0
51935: PPUSH
51936: CALL 52428 0 6
51940: ST_TO_ADDR
// if not hexes then
51941: LD_VAR 0 12
51945: NOT
51946: IFFALSE 51950
// exit ;
51948: GO 52423
// hex := GetHexInfo ( x , y ) ;
51950: LD_ADDR_VAR 0 15
51954: PUSH
51955: LD_VAR 0 3
51959: PPUSH
51960: LD_VAR 0 4
51964: PPUSH
51965: CALL_OW 546
51969: ST_TO_ADDR
// if hex [ 1 ] then
51970: LD_VAR 0 15
51974: PUSH
51975: LD_INT 1
51977: ARRAY
51978: IFFALSE 51982
// exit ;
51980: GO 52423
// height := hex [ 2 ] ;
51982: LD_ADDR_VAR 0 13
51986: PUSH
51987: LD_VAR 0 15
51991: PUSH
51992: LD_INT 2
51994: ARRAY
51995: ST_TO_ADDR
// for i = 1 to hexes do
51996: LD_ADDR_VAR 0 7
52000: PUSH
52001: DOUBLE
52002: LD_INT 1
52004: DEC
52005: ST_TO_ADDR
52006: LD_VAR 0 12
52010: PUSH
52011: FOR_TO
52012: IFFALSE 52342
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52014: LD_VAR 0 12
52018: PUSH
52019: LD_VAR 0 7
52023: ARRAY
52024: PUSH
52025: LD_INT 1
52027: ARRAY
52028: PPUSH
52029: LD_VAR 0 12
52033: PUSH
52034: LD_VAR 0 7
52038: ARRAY
52039: PUSH
52040: LD_INT 2
52042: ARRAY
52043: PPUSH
52044: CALL_OW 488
52048: NOT
52049: PUSH
52050: LD_VAR 0 12
52054: PUSH
52055: LD_VAR 0 7
52059: ARRAY
52060: PUSH
52061: LD_INT 1
52063: ARRAY
52064: PPUSH
52065: LD_VAR 0 12
52069: PUSH
52070: LD_VAR 0 7
52074: ARRAY
52075: PUSH
52076: LD_INT 2
52078: ARRAY
52079: PPUSH
52080: CALL_OW 428
52084: PUSH
52085: LD_INT 0
52087: GREATER
52088: OR
52089: PUSH
52090: LD_VAR 0 12
52094: PUSH
52095: LD_VAR 0 7
52099: ARRAY
52100: PUSH
52101: LD_INT 1
52103: ARRAY
52104: PPUSH
52105: LD_VAR 0 12
52109: PUSH
52110: LD_VAR 0 7
52114: ARRAY
52115: PUSH
52116: LD_INT 2
52118: ARRAY
52119: PPUSH
52120: CALL_OW 351
52124: OR
52125: IFFALSE 52131
// exit ;
52127: POP
52128: POP
52129: GO 52423
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52131: LD_ADDR_VAR 0 8
52135: PUSH
52136: LD_VAR 0 12
52140: PUSH
52141: LD_VAR 0 7
52145: ARRAY
52146: PUSH
52147: LD_INT 1
52149: ARRAY
52150: PPUSH
52151: LD_VAR 0 12
52155: PUSH
52156: LD_VAR 0 7
52160: ARRAY
52161: PUSH
52162: LD_INT 2
52164: ARRAY
52165: PPUSH
52166: CALL_OW 546
52170: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52171: LD_VAR 0 8
52175: PUSH
52176: LD_INT 1
52178: ARRAY
52179: PUSH
52180: LD_VAR 0 8
52184: PUSH
52185: LD_INT 2
52187: ARRAY
52188: PUSH
52189: LD_VAR 0 13
52193: PUSH
52194: LD_INT 2
52196: PLUS
52197: GREATER
52198: OR
52199: PUSH
52200: LD_VAR 0 8
52204: PUSH
52205: LD_INT 2
52207: ARRAY
52208: PUSH
52209: LD_VAR 0 13
52213: PUSH
52214: LD_INT 2
52216: MINUS
52217: LESS
52218: OR
52219: PUSH
52220: LD_VAR 0 8
52224: PUSH
52225: LD_INT 3
52227: ARRAY
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 8
52234: PUSH
52235: LD_INT 9
52237: PUSH
52238: LD_INT 10
52240: PUSH
52241: LD_INT 11
52243: PUSH
52244: LD_INT 12
52246: PUSH
52247: LD_INT 13
52249: PUSH
52250: LD_INT 16
52252: PUSH
52253: LD_INT 17
52255: PUSH
52256: LD_INT 18
52258: PUSH
52259: LD_INT 19
52261: PUSH
52262: LD_INT 20
52264: PUSH
52265: LD_INT 21
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: IN
52283: NOT
52284: OR
52285: PUSH
52286: LD_VAR 0 8
52290: PUSH
52291: LD_INT 5
52293: ARRAY
52294: NOT
52295: OR
52296: PUSH
52297: LD_VAR 0 8
52301: PUSH
52302: LD_INT 6
52304: ARRAY
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 7
52314: PUSH
52315: LD_INT 9
52317: PUSH
52318: LD_INT 10
52320: PUSH
52321: LD_INT 11
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: IN
52332: NOT
52333: OR
52334: IFFALSE 52340
// exit ;
52336: POP
52337: POP
52338: GO 52423
// end ;
52340: GO 52011
52342: POP
52343: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52344: LD_VAR 0 9
52348: PPUSH
52349: LD_VAR 0 3
52353: PPUSH
52354: LD_VAR 0 4
52358: PPUSH
52359: LD_INT 20
52361: PPUSH
52362: CALL 44375 0 4
52366: PUSH
52367: LD_INT 4
52369: ARRAY
52370: IFFALSE 52374
// exit ;
52372: GO 52423
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52374: LD_VAR 0 2
52378: PUSH
52379: LD_INT 29
52381: PUSH
52382: LD_INT 30
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: IN
52389: PUSH
52390: LD_VAR 0 3
52394: PPUSH
52395: LD_VAR 0 4
52399: PPUSH
52400: LD_VAR 0 9
52404: PPUSH
52405: CALL_OW 440
52409: NOT
52410: AND
52411: IFFALSE 52415
// exit ;
52413: GO 52423
// result := true ;
52415: LD_ADDR_VAR 0 6
52419: PUSH
52420: LD_INT 1
52422: ST_TO_ADDR
// end ;
52423: LD_VAR 0 6
52427: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52428: LD_INT 0
52430: PPUSH
52431: PPUSH
52432: PPUSH
52433: PPUSH
52434: PPUSH
52435: PPUSH
52436: PPUSH
52437: PPUSH
52438: PPUSH
52439: PPUSH
52440: PPUSH
52441: PPUSH
52442: PPUSH
52443: PPUSH
52444: PPUSH
52445: PPUSH
52446: PPUSH
52447: PPUSH
52448: PPUSH
52449: PPUSH
52450: PPUSH
52451: PPUSH
52452: PPUSH
52453: PPUSH
52454: PPUSH
52455: PPUSH
52456: PPUSH
52457: PPUSH
52458: PPUSH
52459: PPUSH
52460: PPUSH
52461: PPUSH
52462: PPUSH
52463: PPUSH
52464: PPUSH
52465: PPUSH
52466: PPUSH
52467: PPUSH
52468: PPUSH
52469: PPUSH
52470: PPUSH
52471: PPUSH
52472: PPUSH
52473: PPUSH
52474: PPUSH
52475: PPUSH
52476: PPUSH
52477: PPUSH
52478: PPUSH
52479: PPUSH
52480: PPUSH
52481: PPUSH
52482: PPUSH
52483: PPUSH
52484: PPUSH
52485: PPUSH
52486: PPUSH
52487: PPUSH
// result = [ ] ;
52488: LD_ADDR_VAR 0 7
52492: PUSH
52493: EMPTY
52494: ST_TO_ADDR
// temp_list = [ ] ;
52495: LD_ADDR_VAR 0 9
52499: PUSH
52500: EMPTY
52501: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52502: LD_VAR 0 4
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: LD_INT 3
52518: PUSH
52519: LD_INT 4
52521: PUSH
52522: LD_INT 5
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: IN
52533: NOT
52534: PUSH
52535: LD_VAR 0 1
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: IN
52550: PUSH
52551: LD_VAR 0 5
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: IN
52570: NOT
52571: AND
52572: OR
52573: IFFALSE 52577
// exit ;
52575: GO 70968
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52577: LD_VAR 0 1
52581: PUSH
52582: LD_INT 6
52584: PUSH
52585: LD_INT 7
52587: PUSH
52588: LD_INT 8
52590: PUSH
52591: LD_INT 13
52593: PUSH
52594: LD_INT 12
52596: PUSH
52597: LD_INT 15
52599: PUSH
52600: LD_INT 11
52602: PUSH
52603: LD_INT 14
52605: PUSH
52606: LD_INT 10
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: IN
52620: IFFALSE 52630
// btype = b_lab ;
52622: LD_ADDR_VAR 0 1
52626: PUSH
52627: LD_INT 6
52629: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52630: LD_VAR 0 6
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: LIST
52648: IN
52649: NOT
52650: PUSH
52651: LD_VAR 0 1
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: LD_INT 6
52670: PUSH
52671: LD_INT 36
52673: PUSH
52674: LD_INT 4
52676: PUSH
52677: LD_INT 5
52679: PUSH
52680: LD_INT 31
52682: PUSH
52683: LD_INT 32
52685: PUSH
52686: LD_INT 33
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: IN
52702: NOT
52703: PUSH
52704: LD_VAR 0 6
52708: PUSH
52709: LD_INT 1
52711: EQUAL
52712: AND
52713: OR
52714: PUSH
52715: LD_VAR 0 1
52719: PUSH
52720: LD_INT 2
52722: PUSH
52723: LD_INT 3
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: IN
52730: NOT
52731: PUSH
52732: LD_VAR 0 6
52736: PUSH
52737: LD_INT 2
52739: EQUAL
52740: AND
52741: OR
52742: IFFALSE 52752
// mode = 0 ;
52744: LD_ADDR_VAR 0 6
52748: PUSH
52749: LD_INT 0
52751: ST_TO_ADDR
// case mode of 0 :
52752: LD_VAR 0 6
52756: PUSH
52757: LD_INT 0
52759: DOUBLE
52760: EQUAL
52761: IFTRUE 52765
52763: GO 64218
52765: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52766: LD_ADDR_VAR 0 11
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 3
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 2
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52959: LD_ADDR_VAR 0 12
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 3
53116: NEG
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 3
53127: NEG
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53155: LD_ADDR_VAR 0 13
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 3
53314: NEG
53315: PUSH
53316: LD_INT 2
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 3
53326: NEG
53327: PUSH
53328: LD_INT 3
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53354: LD_ADDR_VAR 0 14
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 3
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 3
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53550: LD_ADDR_VAR 0 15
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53743: LD_ADDR_VAR 0 16
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 2
53866: NEG
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: NEG
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 3
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 3
53900: PUSH
53901: LD_INT 3
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53936: LD_ADDR_VAR 0 17
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54166: LD_ADDR_VAR 0 18
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54396: LD_ADDR_VAR 0 19
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54626: LD_ADDR_VAR 0 20
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54856: LD_ADDR_VAR 0 21
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55086: LD_ADDR_VAR 0 22
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: LD_INT 2
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55316: LD_ADDR_VAR 0 23
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: LD_INT 3
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: LD_INT 3
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55596: LD_ADDR_VAR 0 24
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 3
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 3
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55872: LD_ADDR_VAR 0 25
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: LD_INT 2
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 3
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 3
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 3
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 3
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56146: LD_ADDR_VAR 0 26
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 2
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: LD_INT 3
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 3
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56422: LD_ADDR_VAR 0 27
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 2
56609: NEG
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: NEG
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 3
56655: NEG
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 3
56667: NEG
56668: PUSH
56669: LD_INT 2
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56702: LD_ADDR_VAR 0 28
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: NEG
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 2
56889: NEG
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: LD_INT 2
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 2
56913: NEG
56914: PUSH
56915: LD_INT 3
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 3
56949: NEG
56950: PUSH
56951: LD_INT 2
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56984: LD_ADDR_VAR 0 29
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 2
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 2
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 2
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: LD_INT 3
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57263: LD_ADDR_VAR 0 30
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 2
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: LD_INT 2
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: LD_INT 3
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 3
57506: NEG
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57541: LD_ADDR_VAR 0 31
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: LD_INT 2
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: LD_INT 2
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57819: LD_ADDR_VAR 0 32
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: PUSH
57945: LD_INT 2
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 2
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 2
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: LD_INT 3
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: LD_INT 3
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 3
58062: NEG
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58097: LD_ADDR_VAR 0 33
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: LD_INT 3
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 3
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: LD_INT 3
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: NEG
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58376: LD_ADDR_VAR 0 34
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 2
58543: NEG
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: LD_INT 3
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 2
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 3
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 3
58621: NEG
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58656: LD_ADDR_VAR 0 35
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58768: LD_ADDR_VAR 0 36
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 1
58849: NEG
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58880: LD_ADDR_VAR 0 37
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58992: LD_ADDR_VAR 0 38
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 2
59083: NEG
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59104: LD_ADDR_VAR 0 39
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59216: LD_ADDR_VAR 0 40
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 1
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59328: LD_ADDR_VAR 0 41
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 3
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 3
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 3
59571: PUSH
59572: LD_INT 3
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: LD_INT 3
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 3
59602: NEG
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 3
59637: NEG
59638: PUSH
59639: LD_INT 3
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59678: LD_ADDR_VAR 0 42
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: NEG
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: NEG
59869: PUSH
59870: LD_INT 3
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: LD_INT 3
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_INT 3
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 3
59924: PUSH
59925: LD_INT 3
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: LD_INT 3
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: PUSH
59945: LD_INT 3
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: LD_INT 2
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 3
59975: NEG
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 3
59987: NEG
59988: PUSH
59989: LD_INT 3
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60028: LD_ADDR_VAR 0 43
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 2
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 3
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: LD_INT 3
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: LD_INT 3
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 2
60313: NEG
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 3
60324: NEG
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60376: LD_ADDR_VAR 0 44
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 2
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: LD_INT 2
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 2
60554: NEG
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 2
60566: NEG
60567: PUSH
60568: LD_INT 3
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 3
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 3
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 3
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 3
60619: PUSH
60620: LD_INT 3
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: LD_INT 3
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 3
60650: NEG
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 3
60661: NEG
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 3
60673: NEG
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 3
60685: NEG
60686: PUSH
60687: LD_INT 3
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60726: LD_ADDR_VAR 0 45
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: LD_INT 2
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: NEG
60929: PUSH
60930: LD_INT 3
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 3
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: LD_INT 2
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: LD_INT 2
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 3
60972: PUSH
60973: LD_INT 3
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: LD_INT 3
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 3
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 3
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: LD_INT 2
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 3
61023: NEG
61024: PUSH
61025: LD_INT 2
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 3
61035: NEG
61036: PUSH
61037: LD_INT 3
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61076: LD_ADDR_VAR 0 46
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 3
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: LD_INT 3
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: LD_INT 2
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 2
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: LD_INT 2
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 2
61361: NEG
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 3
61383: NEG
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61424: LD_ADDR_VAR 0 47
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 1
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 2
61539: NEG
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 2
61551: NEG
61552: PUSH
61553: LD_INT 2
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61575: LD_ADDR_VAR 0 48
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: LD_INT 2
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 2
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61722: LD_ADDR_VAR 0 49
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 1
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 2
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 2
61834: PUSH
61835: LD_INT 2
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61866: LD_ADDR_VAR 0 50
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: LD_INT 2
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62010: LD_ADDR_VAR 0 51
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: NEG
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: LD_INT 2
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 2
62122: NEG
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 2
62133: NEG
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62157: LD_ADDR_VAR 0 52
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: LD_INT 1
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 2
62261: NEG
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 2
62272: NEG
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: LD_INT 2
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62308: LD_ADDR_VAR 0 53
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: NEG
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: NEG
62390: PUSH
62391: LD_INT 2
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 2
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 2
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: LD_INT 2
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: LD_INT 2
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: LD_INT 1
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 2
62484: NEG
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 2
62495: NEG
62496: PUSH
62497: LD_INT 1
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 2
62507: NEG
62508: PUSH
62509: LD_INT 2
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62538: LD_ADDR_VAR 0 54
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 2
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: LD_INT 2
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 2
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 2
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: LD_INT 2
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 1
62703: NEG
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 2
62714: NEG
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: NEG
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 2
62737: NEG
62738: PUSH
62739: LD_INT 2
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62768: LD_ADDR_VAR 0 55
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 1
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: LD_INT 1
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 1
62849: NEG
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: LD_INT 2
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 2
62903: PUSH
62904: LD_INT 2
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: LD_INT 2
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 1
62933: NEG
62934: PUSH
62935: LD_INT 1
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 2
62944: NEG
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: NEG
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 2
62967: NEG
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62998: LD_ADDR_VAR 0 56
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 2
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: LD_INT 2
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 2
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 2
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: LD_INT 2
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 2
63185: NEG
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 2
63197: NEG
63198: PUSH
63199: LD_INT 2
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63228: LD_ADDR_VAR 0 57
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 0
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: LD_INT 1
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 2
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: LD_INT 1
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 2
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 2
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 2
63363: PUSH
63364: LD_INT 2
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: LD_INT 2
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: LD_INT 2
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: LD_INT 1
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 2
63404: NEG
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 2
63415: NEG
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: NEG
63428: PUSH
63429: LD_INT 2
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63458: LD_ADDR_VAR 0 58
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: LD_INT 2
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_INT 2
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 2
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: LD_INT 2
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: NEG
63624: PUSH
63625: LD_INT 1
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 2
63634: NEG
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 2
63645: NEG
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: NEG
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63688: LD_ADDR_VAR 0 59
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: NEG
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63776: LD_ADDR_VAR 0 60
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63864: LD_ADDR_VAR 0 61
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: NEG
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 1
63933: NEG
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63952: LD_ADDR_VAR 0 62
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 1
64010: NEG
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64040: LD_ADDR_VAR 0 63
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: LD_INT 1
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: LD_INT 1
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 0
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 1
64109: NEG
64110: PUSH
64111: LD_INT 1
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64128: LD_ADDR_VAR 0 64
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 1
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 1
64166: PUSH
64167: LD_INT 1
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 0
64176: PUSH
64177: LD_INT 1
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 1
64197: NEG
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: ST_TO_ADDR
// end ; 1 :
64216: GO 70113
64218: LD_INT 1
64220: DOUBLE
64221: EQUAL
64222: IFTRUE 64226
64224: GO 66849
64226: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64227: LD_ADDR_VAR 0 11
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: LD_INT 3
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: LD_INT 3
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: LD_INT 2
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: LIST
64270: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64271: LD_ADDR_VAR 0 12
64275: PUSH
64276: LD_INT 2
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 3
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 3
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: LIST
64311: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64312: LD_ADDR_VAR 0 13
64316: PUSH
64317: LD_INT 3
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 3
64329: PUSH
64330: LD_INT 3
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 2
64339: PUSH
64340: LD_INT 3
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: LIST
64351: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64352: LD_ADDR_VAR 0 14
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 3
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: LD_INT 2
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64393: LD_ADDR_VAR 0 15
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 3
64411: NEG
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 3
64422: NEG
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: LIST
64436: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64437: LD_ADDR_VAR 0 16
64441: PUSH
64442: LD_INT 2
64444: NEG
64445: PUSH
64446: LD_INT 3
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 3
64456: NEG
64457: PUSH
64458: LD_INT 2
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 3
64468: NEG
64469: PUSH
64470: LD_INT 3
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64483: LD_ADDR_VAR 0 17
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: LD_INT 3
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 3
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: LD_INT 2
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: LIST
64526: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64527: LD_ADDR_VAR 0 18
64531: PUSH
64532: LD_INT 2
64534: PUSH
64535: LD_INT 1
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 3
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 3
64555: PUSH
64556: LD_INT 1
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: LIST
64567: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64568: LD_ADDR_VAR 0 19
64572: PUSH
64573: LD_INT 3
64575: PUSH
64576: LD_INT 2
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 3
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 2
64595: PUSH
64596: LD_INT 3
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64608: LD_ADDR_VAR 0 20
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: LD_INT 3
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: LD_INT 3
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 2
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: LIST
64648: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64649: LD_ADDR_VAR 0 21
64653: PUSH
64654: LD_INT 2
64656: NEG
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 3
64667: NEG
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 3
64678: NEG
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: LIST
64692: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64693: LD_ADDR_VAR 0 22
64697: PUSH
64698: LD_INT 2
64700: NEG
64701: PUSH
64702: LD_INT 3
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: NEG
64713: PUSH
64714: LD_INT 2
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 3
64724: NEG
64725: PUSH
64726: LD_INT 3
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: LIST
64738: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64739: LD_ADDR_VAR 0 23
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: LD_INT 3
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: LD_INT 4
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: LD_INT 3
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: LIST
64782: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64783: LD_ADDR_VAR 0 24
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 3
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 4
64811: PUSH
64812: LD_INT 1
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: LIST
64823: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64824: LD_ADDR_VAR 0 25
64828: PUSH
64829: LD_INT 3
64831: PUSH
64832: LD_INT 3
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 4
64841: PUSH
64842: LD_INT 3
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 3
64851: PUSH
64852: LD_INT 4
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64864: LD_ADDR_VAR 0 26
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: LD_INT 3
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: LD_INT 4
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: LD_INT 3
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: LIST
64904: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64905: LD_ADDR_VAR 0 27
64909: PUSH
64910: LD_INT 3
64912: NEG
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 3
64923: NEG
64924: PUSH
64925: LD_INT 1
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 4
64934: NEG
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: LIST
64948: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64949: LD_ADDR_VAR 0 28
64953: PUSH
64954: LD_INT 3
64956: NEG
64957: PUSH
64958: LD_INT 3
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 3
64968: NEG
64969: PUSH
64970: LD_INT 4
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 4
64980: NEG
64981: PUSH
64982: LD_INT 3
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: LIST
64994: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64995: LD_ADDR_VAR 0 29
64999: PUSH
65000: LD_INT 1
65002: NEG
65003: PUSH
65004: LD_INT 3
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 3
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: LD_INT 2
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: NEG
65037: PUSH
65038: LD_INT 4
65040: NEG
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: LD_INT 4
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 1
65059: PUSH
65060: LD_INT 3
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 1
65070: NEG
65071: PUSH
65072: LD_INT 5
65074: NEG
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 0
65082: PUSH
65083: LD_INT 5
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: LD_INT 4
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: NEG
65105: PUSH
65106: LD_INT 6
65108: NEG
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 6
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 1
65127: PUSH
65128: LD_INT 5
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65150: LD_ADDR_VAR 0 30
65154: PUSH
65155: LD_INT 2
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 3
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 3
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 3
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 4
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 4
65209: PUSH
65210: LD_INT 1
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 4
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 5
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 5
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 5
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 6
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 6
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65293: LD_ADDR_VAR 0 31
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: LD_INT 2
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 3
65310: PUSH
65311: LD_INT 3
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 2
65320: PUSH
65321: LD_INT 3
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 4
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 4
65340: PUSH
65341: LD_INT 4
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 3
65350: PUSH
65351: LD_INT 4
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 5
65360: PUSH
65361: LD_INT 4
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 5
65370: PUSH
65371: LD_INT 5
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 4
65380: PUSH
65381: LD_INT 5
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 6
65390: PUSH
65391: LD_INT 5
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 6
65400: PUSH
65401: LD_INT 6
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 5
65410: PUSH
65411: LD_INT 6
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65432: LD_ADDR_VAR 0 32
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: LD_INT 3
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: LD_INT 2
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: LD_INT 4
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: LD_INT 4
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: LD_INT 3
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: LD_INT 5
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: LD_INT 5
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: LD_INT 4
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: PUSH
65533: LD_INT 6
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: LD_INT 6
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: LD_INT 5
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65575: LD_ADDR_VAR 0 33
65579: PUSH
65580: LD_INT 2
65582: NEG
65583: PUSH
65584: LD_INT 1
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 3
65593: NEG
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 3
65604: NEG
65605: PUSH
65606: LD_INT 1
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 3
65616: NEG
65617: PUSH
65618: LD_INT 1
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 4
65627: NEG
65628: PUSH
65629: LD_INT 0
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 4
65638: NEG
65639: PUSH
65640: LD_INT 1
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 4
65650: NEG
65651: PUSH
65652: LD_INT 1
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 5
65661: NEG
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 5
65672: NEG
65673: PUSH
65674: LD_INT 1
65676: NEG
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 5
65684: NEG
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 6
65695: NEG
65696: PUSH
65697: LD_INT 0
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 6
65706: NEG
65707: PUSH
65708: LD_INT 1
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65730: LD_ADDR_VAR 0 34
65734: PUSH
65735: LD_INT 2
65737: NEG
65738: PUSH
65739: LD_INT 3
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 3
65749: NEG
65750: PUSH
65751: LD_INT 2
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 3
65761: NEG
65762: PUSH
65763: LD_INT 3
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 3
65773: NEG
65774: PUSH
65775: LD_INT 4
65777: NEG
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 4
65785: NEG
65786: PUSH
65787: LD_INT 3
65789: NEG
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 4
65797: NEG
65798: PUSH
65799: LD_INT 4
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 4
65809: NEG
65810: PUSH
65811: LD_INT 5
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 5
65821: NEG
65822: PUSH
65823: LD_INT 4
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 5
65833: NEG
65834: PUSH
65835: LD_INT 5
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 5
65845: NEG
65846: PUSH
65847: LD_INT 6
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 6
65857: NEG
65858: PUSH
65859: LD_INT 5
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 6
65869: NEG
65870: PUSH
65871: LD_INT 6
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65893: LD_ADDR_VAR 0 41
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: LD_INT 2
65903: NEG
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 1
65911: NEG
65912: PUSH
65913: LD_INT 3
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 1
65923: PUSH
65924: LD_INT 2
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: LIST
65936: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65937: LD_ADDR_VAR 0 42
65941: PUSH
65942: LD_INT 2
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: LD_INT 1
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 3
65965: PUSH
65966: LD_INT 1
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: LIST
65977: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65978: LD_ADDR_VAR 0 43
65982: PUSH
65983: LD_INT 2
65985: PUSH
65986: LD_INT 2
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 3
65995: PUSH
65996: LD_INT 2
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 2
66005: PUSH
66006: LD_INT 3
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: LIST
66017: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66018: LD_ADDR_VAR 0 44
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: LD_INT 2
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 1
66035: PUSH
66036: LD_INT 3
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: LD_INT 2
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: LIST
66058: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66059: LD_ADDR_VAR 0 45
66063: PUSH
66064: LD_INT 2
66066: NEG
66067: PUSH
66068: LD_INT 0
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 2
66077: NEG
66078: PUSH
66079: LD_INT 1
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 3
66088: NEG
66089: PUSH
66090: LD_INT 1
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: LIST
66102: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66103: LD_ADDR_VAR 0 46
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: LD_INT 2
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 2
66122: NEG
66123: PUSH
66124: LD_INT 3
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 3
66134: NEG
66135: PUSH
66136: LD_INT 2
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: LIST
66148: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66149: LD_ADDR_VAR 0 47
66153: PUSH
66154: LD_INT 2
66156: NEG
66157: PUSH
66158: LD_INT 3
66160: NEG
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 1
66168: NEG
66169: PUSH
66170: LD_INT 3
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66182: LD_ADDR_VAR 0 48
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: LD_INT 2
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 2
66200: PUSH
66201: LD_INT 1
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66213: LD_ADDR_VAR 0 49
66217: PUSH
66218: LD_INT 3
66220: PUSH
66221: LD_INT 1
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 3
66230: PUSH
66231: LD_INT 2
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66242: LD_ADDR_VAR 0 50
66246: PUSH
66247: LD_INT 2
66249: PUSH
66250: LD_INT 3
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: PUSH
66260: LD_INT 3
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66271: LD_ADDR_VAR 0 51
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: LD_INT 2
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 2
66289: NEG
66290: PUSH
66291: LD_INT 1
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66302: LD_ADDR_VAR 0 52
66306: PUSH
66307: LD_INT 3
66309: NEG
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 3
66321: NEG
66322: PUSH
66323: LD_INT 2
66325: NEG
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66335: LD_ADDR_VAR 0 53
66339: PUSH
66340: LD_INT 1
66342: NEG
66343: PUSH
66344: LD_INT 3
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: LD_INT 3
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 1
66365: PUSH
66366: LD_INT 2
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: LIST
66378: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66379: LD_ADDR_VAR 0 54
66383: PUSH
66384: LD_INT 2
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 3
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 3
66407: PUSH
66408: LD_INT 1
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: LIST
66419: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66420: LD_ADDR_VAR 0 55
66424: PUSH
66425: LD_INT 3
66427: PUSH
66428: LD_INT 2
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 3
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 2
66447: PUSH
66448: LD_INT 3
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: LIST
66459: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66460: LD_ADDR_VAR 0 56
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: LD_INT 3
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: LD_INT 2
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: LIST
66500: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66501: LD_ADDR_VAR 0 57
66505: PUSH
66506: LD_INT 2
66508: NEG
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 3
66519: NEG
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 3
66530: NEG
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66545: LD_ADDR_VAR 0 58
66549: PUSH
66550: LD_INT 2
66552: NEG
66553: PUSH
66554: LD_INT 3
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 3
66564: NEG
66565: PUSH
66566: LD_INT 2
66568: NEG
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 3
66576: NEG
66577: PUSH
66578: LD_INT 3
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: LIST
66590: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66591: LD_ADDR_VAR 0 59
66595: PUSH
66596: LD_INT 1
66598: NEG
66599: PUSH
66600: LD_INT 2
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: LD_INT 2
66613: NEG
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 1
66621: PUSH
66622: LD_INT 1
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: LIST
66634: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66635: LD_ADDR_VAR 0 60
66639: PUSH
66640: LD_INT 1
66642: PUSH
66643: LD_INT 1
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 2
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 2
66663: PUSH
66664: LD_INT 1
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: LIST
66675: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66676: LD_ADDR_VAR 0 61
66680: PUSH
66681: LD_INT 2
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 2
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: LD_INT 2
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: LIST
66715: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66716: LD_ADDR_VAR 0 62
66720: PUSH
66721: LD_INT 1
66723: PUSH
66724: LD_INT 2
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: LD_INT 2
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: LIST
66756: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66757: LD_ADDR_VAR 0 63
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: PUSH
66766: LD_INT 1
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 2
66775: NEG
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 2
66786: NEG
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: LIST
66800: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66801: LD_ADDR_VAR 0 64
66805: PUSH
66806: LD_INT 1
66808: NEG
66809: PUSH
66810: LD_INT 2
66812: NEG
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 2
66820: NEG
66821: PUSH
66822: LD_INT 1
66824: NEG
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 2
66832: NEG
66833: PUSH
66834: LD_INT 2
66836: NEG
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: LIST
66846: ST_TO_ADDR
// end ; 2 :
66847: GO 70113
66849: LD_INT 2
66851: DOUBLE
66852: EQUAL
66853: IFTRUE 66857
66855: GO 70112
66857: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66858: LD_ADDR_VAR 0 29
66862: PUSH
66863: LD_INT 4
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 4
66875: PUSH
66876: LD_INT 1
66878: NEG
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 5
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 5
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 4
66906: PUSH
66907: LD_INT 1
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 3
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 3
66926: PUSH
66927: LD_INT 1
66929: NEG
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 3
66937: PUSH
66938: LD_INT 2
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 5
66948: PUSH
66949: LD_INT 2
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 3
66958: PUSH
66959: LD_INT 3
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 3
66968: PUSH
66969: LD_INT 2
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 4
66978: PUSH
66979: LD_INT 3
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 4
66988: PUSH
66989: LD_INT 4
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 3
66998: PUSH
66999: LD_INT 4
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 2
67008: PUSH
67009: LD_INT 3
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 2
67018: PUSH
67019: LD_INT 2
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 4
67028: PUSH
67029: LD_INT 2
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 2
67038: PUSH
67039: LD_INT 4
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: LD_INT 4
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 0
67058: PUSH
67059: LD_INT 3
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 1
67068: PUSH
67069: LD_INT 4
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: LD_INT 5
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 0
67088: PUSH
67089: LD_INT 5
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 1
67098: NEG
67099: PUSH
67100: LD_INT 4
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 1
67109: NEG
67110: PUSH
67111: LD_INT 3
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 2
67120: PUSH
67121: LD_INT 5
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 2
67130: NEG
67131: PUSH
67132: LD_INT 3
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 3
67141: NEG
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 3
67152: NEG
67153: PUSH
67154: LD_INT 1
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 2
67164: NEG
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 2
67175: NEG
67176: PUSH
67177: LD_INT 1
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 3
67186: NEG
67187: PUSH
67188: LD_INT 1
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 4
67197: NEG
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 4
67208: NEG
67209: PUSH
67210: LD_INT 1
67212: NEG
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 4
67220: NEG
67221: PUSH
67222: LD_INT 2
67224: NEG
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 2
67232: NEG
67233: PUSH
67234: LD_INT 2
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 4
67243: NEG
67244: PUSH
67245: LD_INT 4
67247: NEG
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 4
67255: NEG
67256: PUSH
67257: LD_INT 5
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 3
67267: NEG
67268: PUSH
67269: LD_INT 4
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 3
67279: NEG
67280: PUSH
67281: LD_INT 3
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 4
67291: NEG
67292: PUSH
67293: LD_INT 3
67295: NEG
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 5
67303: NEG
67304: PUSH
67305: LD_INT 4
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 5
67315: NEG
67316: PUSH
67317: LD_INT 5
67319: NEG
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 3
67327: NEG
67328: PUSH
67329: LD_INT 5
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 5
67339: NEG
67340: PUSH
67341: LD_INT 3
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67396: LD_ADDR_VAR 0 30
67400: PUSH
67401: LD_INT 4
67403: PUSH
67404: LD_INT 4
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 4
67413: PUSH
67414: LD_INT 3
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 5
67423: PUSH
67424: LD_INT 4
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 5
67433: PUSH
67434: LD_INT 5
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 4
67443: PUSH
67444: LD_INT 5
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 3
67453: PUSH
67454: LD_INT 4
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 3
67463: PUSH
67464: LD_INT 3
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 5
67473: PUSH
67474: LD_INT 3
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: LD_INT 5
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: LD_INT 3
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: LD_INT 2
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 1
67513: PUSH
67514: LD_INT 3
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 1
67523: PUSH
67524: LD_INT 4
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 0
67533: PUSH
67534: LD_INT 4
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 1
67543: NEG
67544: PUSH
67545: LD_INT 3
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 1
67554: NEG
67555: PUSH
67556: LD_INT 2
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 2
67565: PUSH
67566: LD_INT 4
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 2
67575: NEG
67576: PUSH
67577: LD_INT 2
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 4
67586: NEG
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 4
67597: NEG
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 3
67609: NEG
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 3
67620: NEG
67621: PUSH
67622: LD_INT 1
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 4
67631: NEG
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 5
67642: NEG
67643: PUSH
67644: LD_INT 0
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 5
67653: NEG
67654: PUSH
67655: LD_INT 1
67657: NEG
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 5
67665: NEG
67666: PUSH
67667: LD_INT 2
67669: NEG
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 3
67677: NEG
67678: PUSH
67679: LD_INT 2
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 3
67688: NEG
67689: PUSH
67690: LD_INT 3
67692: NEG
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 3
67700: NEG
67701: PUSH
67702: LD_INT 4
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 2
67712: NEG
67713: PUSH
67714: LD_INT 3
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 2
67724: NEG
67725: PUSH
67726: LD_INT 2
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 3
67736: NEG
67737: PUSH
67738: LD_INT 2
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 4
67748: NEG
67749: PUSH
67750: LD_INT 3
67752: NEG
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 4
67760: NEG
67761: PUSH
67762: LD_INT 4
67764: NEG
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 2
67772: NEG
67773: PUSH
67774: LD_INT 4
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 4
67784: NEG
67785: PUSH
67786: LD_INT 2
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: LD_INT 4
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: LD_INT 5
67810: NEG
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 1
67818: PUSH
67819: LD_INT 4
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 1
67829: PUSH
67830: LD_INT 3
67832: NEG
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 0
67840: PUSH
67841: LD_INT 3
67843: NEG
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 1
67851: NEG
67852: PUSH
67853: LD_INT 4
67855: NEG
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 1
67863: NEG
67864: PUSH
67865: LD_INT 5
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 2
67875: PUSH
67876: LD_INT 3
67878: NEG
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 2
67886: NEG
67887: PUSH
67888: LD_INT 5
67890: NEG
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67943: LD_ADDR_VAR 0 31
67947: PUSH
67948: LD_INT 0
67950: PUSH
67951: LD_INT 4
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: LD_INT 3
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 1
67970: PUSH
67971: LD_INT 4
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: LD_INT 5
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 0
67990: PUSH
67991: LD_INT 5
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 1
68000: NEG
68001: PUSH
68002: LD_INT 4
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 1
68011: NEG
68012: PUSH
68013: LD_INT 3
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 2
68022: PUSH
68023: LD_INT 5
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 2
68032: NEG
68033: PUSH
68034: LD_INT 3
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 3
68043: NEG
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 3
68054: NEG
68055: PUSH
68056: LD_INT 1
68058: NEG
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 2
68066: NEG
68067: PUSH
68068: LD_INT 0
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 2
68077: NEG
68078: PUSH
68079: LD_INT 1
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 3
68088: NEG
68089: PUSH
68090: LD_INT 1
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 4
68099: NEG
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 4
68110: NEG
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 4
68122: NEG
68123: PUSH
68124: LD_INT 2
68126: NEG
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 2
68134: NEG
68135: PUSH
68136: LD_INT 2
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 4
68145: NEG
68146: PUSH
68147: LD_INT 4
68149: NEG
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 4
68157: NEG
68158: PUSH
68159: LD_INT 5
68161: NEG
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 3
68169: NEG
68170: PUSH
68171: LD_INT 4
68173: NEG
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 3
68181: NEG
68182: PUSH
68183: LD_INT 3
68185: NEG
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 4
68193: NEG
68194: PUSH
68195: LD_INT 3
68197: NEG
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 5
68205: NEG
68206: PUSH
68207: LD_INT 4
68209: NEG
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 5
68217: NEG
68218: PUSH
68219: LD_INT 5
68221: NEG
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 3
68229: NEG
68230: PUSH
68231: LD_INT 5
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 5
68241: NEG
68242: PUSH
68243: LD_INT 3
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 0
68253: PUSH
68254: LD_INT 3
68256: NEG
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 0
68264: PUSH
68265: LD_INT 4
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 1
68275: PUSH
68276: LD_INT 3
68278: NEG
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 1
68286: PUSH
68287: LD_INT 2
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: LD_INT 2
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: PUSH
68310: LD_INT 3
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 1
68320: NEG
68321: PUSH
68322: LD_INT 4
68324: NEG
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 2
68332: PUSH
68333: LD_INT 2
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 2
68343: NEG
68344: PUSH
68345: LD_INT 4
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 4
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 4
68365: PUSH
68366: LD_INT 1
68368: NEG
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 5
68376: PUSH
68377: LD_INT 0
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 5
68386: PUSH
68387: LD_INT 1
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 4
68396: PUSH
68397: LD_INT 1
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 3
68406: PUSH
68407: LD_INT 0
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 3
68416: PUSH
68417: LD_INT 1
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 3
68427: PUSH
68428: LD_INT 2
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 5
68438: PUSH
68439: LD_INT 2
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68493: LD_ADDR_VAR 0 32
68497: PUSH
68498: LD_INT 4
68500: NEG
68501: PUSH
68502: LD_INT 0
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 4
68511: NEG
68512: PUSH
68513: LD_INT 1
68515: NEG
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 3
68523: NEG
68524: PUSH
68525: LD_INT 0
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 3
68534: NEG
68535: PUSH
68536: LD_INT 1
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 4
68545: NEG
68546: PUSH
68547: LD_INT 1
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 5
68556: NEG
68557: PUSH
68558: LD_INT 0
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 5
68567: NEG
68568: PUSH
68569: LD_INT 1
68571: NEG
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 5
68579: NEG
68580: PUSH
68581: LD_INT 2
68583: NEG
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 3
68591: NEG
68592: PUSH
68593: LD_INT 2
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 3
68602: NEG
68603: PUSH
68604: LD_INT 3
68606: NEG
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 3
68614: NEG
68615: PUSH
68616: LD_INT 4
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 2
68626: NEG
68627: PUSH
68628: LD_INT 3
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 2
68638: NEG
68639: PUSH
68640: LD_INT 2
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 3
68650: NEG
68651: PUSH
68652: LD_INT 2
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 4
68662: NEG
68663: PUSH
68664: LD_INT 3
68666: NEG
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 4
68674: NEG
68675: PUSH
68676: LD_INT 4
68678: NEG
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 2
68686: NEG
68687: PUSH
68688: LD_INT 4
68690: NEG
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 4
68698: NEG
68699: PUSH
68700: LD_INT 2
68702: NEG
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 0
68710: PUSH
68711: LD_INT 4
68713: NEG
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 0
68721: PUSH
68722: LD_INT 5
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 1
68732: PUSH
68733: LD_INT 4
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 1
68743: PUSH
68744: LD_INT 3
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 0
68754: PUSH
68755: LD_INT 3
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 1
68765: NEG
68766: PUSH
68767: LD_INT 4
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 1
68777: NEG
68778: PUSH
68779: LD_INT 5
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 2
68789: PUSH
68790: LD_INT 3
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 2
68800: NEG
68801: PUSH
68802: LD_INT 5
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 3
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 3
68822: PUSH
68823: LD_INT 1
68825: NEG
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 4
68833: PUSH
68834: LD_INT 0
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 4
68843: PUSH
68844: LD_INT 1
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 3
68853: PUSH
68854: LD_INT 1
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 2
68863: PUSH
68864: LD_INT 0
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 2
68873: PUSH
68874: LD_INT 1
68876: NEG
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 2
68884: PUSH
68885: LD_INT 2
68887: NEG
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 4
68895: PUSH
68896: LD_INT 2
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 4
68905: PUSH
68906: LD_INT 4
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 4
68915: PUSH
68916: LD_INT 3
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 5
68925: PUSH
68926: LD_INT 4
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 5
68935: PUSH
68936: LD_INT 5
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 4
68945: PUSH
68946: LD_INT 5
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 3
68955: PUSH
68956: LD_INT 4
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 3
68965: PUSH
68966: LD_INT 3
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 5
68975: PUSH
68976: LD_INT 3
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 3
68985: PUSH
68986: LD_INT 5
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69040: LD_ADDR_VAR 0 33
69044: PUSH
69045: LD_INT 4
69047: NEG
69048: PUSH
69049: LD_INT 4
69051: NEG
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 4
69059: NEG
69060: PUSH
69061: LD_INT 5
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 3
69071: NEG
69072: PUSH
69073: LD_INT 4
69075: NEG
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 3
69083: NEG
69084: PUSH
69085: LD_INT 3
69087: NEG
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 4
69095: NEG
69096: PUSH
69097: LD_INT 3
69099: NEG
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 5
69107: NEG
69108: PUSH
69109: LD_INT 4
69111: NEG
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 5
69119: NEG
69120: PUSH
69121: LD_INT 5
69123: NEG
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 3
69131: NEG
69132: PUSH
69133: LD_INT 5
69135: NEG
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 5
69143: NEG
69144: PUSH
69145: LD_INT 3
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 0
69155: PUSH
69156: LD_INT 3
69158: NEG
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 0
69166: PUSH
69167: LD_INT 4
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 1
69177: PUSH
69178: LD_INT 3
69180: NEG
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 1
69188: PUSH
69189: LD_INT 2
69191: NEG
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: LD_INT 2
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 1
69210: NEG
69211: PUSH
69212: LD_INT 3
69214: NEG
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 1
69222: NEG
69223: PUSH
69224: LD_INT 4
69226: NEG
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 2
69234: PUSH
69235: LD_INT 2
69237: NEG
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 2
69245: NEG
69246: PUSH
69247: LD_INT 4
69249: NEG
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 4
69257: PUSH
69258: LD_INT 0
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 4
69267: PUSH
69268: LD_INT 1
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 5
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 5
69288: PUSH
69289: LD_INT 1
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 4
69298: PUSH
69299: LD_INT 1
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 3
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 3
69318: PUSH
69319: LD_INT 1
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 3
69329: PUSH
69330: LD_INT 2
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 5
69340: PUSH
69341: LD_INT 2
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 3
69350: PUSH
69351: LD_INT 3
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 3
69360: PUSH
69361: LD_INT 2
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 4
69370: PUSH
69371: LD_INT 3
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 4
69380: PUSH
69381: LD_INT 4
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 3
69390: PUSH
69391: LD_INT 4
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 2
69400: PUSH
69401: LD_INT 3
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 2
69410: PUSH
69411: LD_INT 2
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 4
69420: PUSH
69421: LD_INT 2
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 2
69430: PUSH
69431: LD_INT 4
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 0
69440: PUSH
69441: LD_INT 4
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 0
69450: PUSH
69451: LD_INT 3
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 1
69460: PUSH
69461: LD_INT 4
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 1
69470: PUSH
69471: LD_INT 5
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 0
69480: PUSH
69481: LD_INT 5
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: LD_INT 4
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 1
69501: NEG
69502: PUSH
69503: LD_INT 3
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 2
69512: PUSH
69513: LD_INT 5
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 2
69522: NEG
69523: PUSH
69524: LD_INT 3
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69578: LD_ADDR_VAR 0 34
69582: PUSH
69583: LD_INT 0
69585: PUSH
69586: LD_INT 4
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: LD_INT 5
69599: NEG
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 1
69607: PUSH
69608: LD_INT 4
69610: NEG
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 1
69618: PUSH
69619: LD_INT 3
69621: NEG
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 0
69629: PUSH
69630: LD_INT 3
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 1
69640: NEG
69641: PUSH
69642: LD_INT 4
69644: NEG
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 1
69652: NEG
69653: PUSH
69654: LD_INT 5
69656: NEG
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 2
69664: PUSH
69665: LD_INT 3
69667: NEG
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 2
69675: NEG
69676: PUSH
69677: LD_INT 5
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 3
69687: PUSH
69688: LD_INT 0
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 3
69697: PUSH
69698: LD_INT 1
69700: NEG
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 4
69708: PUSH
69709: LD_INT 0
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 4
69718: PUSH
69719: LD_INT 1
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 3
69728: PUSH
69729: LD_INT 1
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 2
69738: PUSH
69739: LD_INT 0
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 2
69748: PUSH
69749: LD_INT 1
69751: NEG
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 2
69759: PUSH
69760: LD_INT 2
69762: NEG
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 4
69770: PUSH
69771: LD_INT 2
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 4
69780: PUSH
69781: LD_INT 4
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 4
69790: PUSH
69791: LD_INT 3
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 5
69800: PUSH
69801: LD_INT 4
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 5
69810: PUSH
69811: LD_INT 5
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 4
69820: PUSH
69821: LD_INT 5
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 3
69830: PUSH
69831: LD_INT 4
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 3
69840: PUSH
69841: LD_INT 3
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 5
69850: PUSH
69851: LD_INT 3
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 3
69860: PUSH
69861: LD_INT 5
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 0
69870: PUSH
69871: LD_INT 3
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 0
69880: PUSH
69881: LD_INT 2
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 1
69890: PUSH
69891: LD_INT 3
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 1
69900: PUSH
69901: LD_INT 4
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 0
69910: PUSH
69911: LD_INT 4
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 1
69920: NEG
69921: PUSH
69922: LD_INT 3
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 1
69931: NEG
69932: PUSH
69933: LD_INT 2
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: LD_INT 4
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 2
69952: NEG
69953: PUSH
69954: LD_INT 2
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 4
69963: NEG
69964: PUSH
69965: LD_INT 0
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 4
69974: NEG
69975: PUSH
69976: LD_INT 1
69978: NEG
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 3
69986: NEG
69987: PUSH
69988: LD_INT 0
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 3
69997: NEG
69998: PUSH
69999: LD_INT 1
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 4
70008: NEG
70009: PUSH
70010: LD_INT 1
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 5
70019: NEG
70020: PUSH
70021: LD_INT 0
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 5
70030: NEG
70031: PUSH
70032: LD_INT 1
70034: NEG
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 5
70042: NEG
70043: PUSH
70044: LD_INT 2
70046: NEG
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 3
70054: NEG
70055: PUSH
70056: LD_INT 2
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: ST_TO_ADDR
// end ; end ;
70110: GO 70113
70112: POP
// case btype of b_depot , b_warehouse :
70113: LD_VAR 0 1
70117: PUSH
70118: LD_INT 0
70120: DOUBLE
70121: EQUAL
70122: IFTRUE 70132
70124: LD_INT 1
70126: DOUBLE
70127: EQUAL
70128: IFTRUE 70132
70130: GO 70333
70132: POP
// case nation of nation_american :
70133: LD_VAR 0 5
70137: PUSH
70138: LD_INT 1
70140: DOUBLE
70141: EQUAL
70142: IFTRUE 70146
70144: GO 70202
70146: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70147: LD_ADDR_VAR 0 9
70151: PUSH
70152: LD_VAR 0 11
70156: PUSH
70157: LD_VAR 0 12
70161: PUSH
70162: LD_VAR 0 13
70166: PUSH
70167: LD_VAR 0 14
70171: PUSH
70172: LD_VAR 0 15
70176: PUSH
70177: LD_VAR 0 16
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: PUSH
70190: LD_VAR 0 4
70194: PUSH
70195: LD_INT 1
70197: PLUS
70198: ARRAY
70199: ST_TO_ADDR
70200: GO 70331
70202: LD_INT 2
70204: DOUBLE
70205: EQUAL
70206: IFTRUE 70210
70208: GO 70266
70210: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70211: LD_ADDR_VAR 0 9
70215: PUSH
70216: LD_VAR 0 17
70220: PUSH
70221: LD_VAR 0 18
70225: PUSH
70226: LD_VAR 0 19
70230: PUSH
70231: LD_VAR 0 20
70235: PUSH
70236: LD_VAR 0 21
70240: PUSH
70241: LD_VAR 0 22
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: PUSH
70254: LD_VAR 0 4
70258: PUSH
70259: LD_INT 1
70261: PLUS
70262: ARRAY
70263: ST_TO_ADDR
70264: GO 70331
70266: LD_INT 3
70268: DOUBLE
70269: EQUAL
70270: IFTRUE 70274
70272: GO 70330
70274: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70275: LD_ADDR_VAR 0 9
70279: PUSH
70280: LD_VAR 0 23
70284: PUSH
70285: LD_VAR 0 24
70289: PUSH
70290: LD_VAR 0 25
70294: PUSH
70295: LD_VAR 0 26
70299: PUSH
70300: LD_VAR 0 27
70304: PUSH
70305: LD_VAR 0 28
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: PUSH
70318: LD_VAR 0 4
70322: PUSH
70323: LD_INT 1
70325: PLUS
70326: ARRAY
70327: ST_TO_ADDR
70328: GO 70331
70330: POP
70331: GO 70886
70333: LD_INT 2
70335: DOUBLE
70336: EQUAL
70337: IFTRUE 70347
70339: LD_INT 3
70341: DOUBLE
70342: EQUAL
70343: IFTRUE 70347
70345: GO 70403
70347: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70348: LD_ADDR_VAR 0 9
70352: PUSH
70353: LD_VAR 0 29
70357: PUSH
70358: LD_VAR 0 30
70362: PUSH
70363: LD_VAR 0 31
70367: PUSH
70368: LD_VAR 0 32
70372: PUSH
70373: LD_VAR 0 33
70377: PUSH
70378: LD_VAR 0 34
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: PUSH
70391: LD_VAR 0 4
70395: PUSH
70396: LD_INT 1
70398: PLUS
70399: ARRAY
70400: ST_TO_ADDR
70401: GO 70886
70403: LD_INT 16
70405: DOUBLE
70406: EQUAL
70407: IFTRUE 70465
70409: LD_INT 17
70411: DOUBLE
70412: EQUAL
70413: IFTRUE 70465
70415: LD_INT 18
70417: DOUBLE
70418: EQUAL
70419: IFTRUE 70465
70421: LD_INT 19
70423: DOUBLE
70424: EQUAL
70425: IFTRUE 70465
70427: LD_INT 22
70429: DOUBLE
70430: EQUAL
70431: IFTRUE 70465
70433: LD_INT 20
70435: DOUBLE
70436: EQUAL
70437: IFTRUE 70465
70439: LD_INT 21
70441: DOUBLE
70442: EQUAL
70443: IFTRUE 70465
70445: LD_INT 23
70447: DOUBLE
70448: EQUAL
70449: IFTRUE 70465
70451: LD_INT 24
70453: DOUBLE
70454: EQUAL
70455: IFTRUE 70465
70457: LD_INT 25
70459: DOUBLE
70460: EQUAL
70461: IFTRUE 70465
70463: GO 70521
70465: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70466: LD_ADDR_VAR 0 9
70470: PUSH
70471: LD_VAR 0 35
70475: PUSH
70476: LD_VAR 0 36
70480: PUSH
70481: LD_VAR 0 37
70485: PUSH
70486: LD_VAR 0 38
70490: PUSH
70491: LD_VAR 0 39
70495: PUSH
70496: LD_VAR 0 40
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: PUSH
70509: LD_VAR 0 4
70513: PUSH
70514: LD_INT 1
70516: PLUS
70517: ARRAY
70518: ST_TO_ADDR
70519: GO 70886
70521: LD_INT 6
70523: DOUBLE
70524: EQUAL
70525: IFTRUE 70577
70527: LD_INT 7
70529: DOUBLE
70530: EQUAL
70531: IFTRUE 70577
70533: LD_INT 8
70535: DOUBLE
70536: EQUAL
70537: IFTRUE 70577
70539: LD_INT 13
70541: DOUBLE
70542: EQUAL
70543: IFTRUE 70577
70545: LD_INT 12
70547: DOUBLE
70548: EQUAL
70549: IFTRUE 70577
70551: LD_INT 15
70553: DOUBLE
70554: EQUAL
70555: IFTRUE 70577
70557: LD_INT 11
70559: DOUBLE
70560: EQUAL
70561: IFTRUE 70577
70563: LD_INT 14
70565: DOUBLE
70566: EQUAL
70567: IFTRUE 70577
70569: LD_INT 10
70571: DOUBLE
70572: EQUAL
70573: IFTRUE 70577
70575: GO 70633
70577: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70578: LD_ADDR_VAR 0 9
70582: PUSH
70583: LD_VAR 0 41
70587: PUSH
70588: LD_VAR 0 42
70592: PUSH
70593: LD_VAR 0 43
70597: PUSH
70598: LD_VAR 0 44
70602: PUSH
70603: LD_VAR 0 45
70607: PUSH
70608: LD_VAR 0 46
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: PUSH
70621: LD_VAR 0 4
70625: PUSH
70626: LD_INT 1
70628: PLUS
70629: ARRAY
70630: ST_TO_ADDR
70631: GO 70886
70633: LD_INT 36
70635: DOUBLE
70636: EQUAL
70637: IFTRUE 70641
70639: GO 70697
70641: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70642: LD_ADDR_VAR 0 9
70646: PUSH
70647: LD_VAR 0 47
70651: PUSH
70652: LD_VAR 0 48
70656: PUSH
70657: LD_VAR 0 49
70661: PUSH
70662: LD_VAR 0 50
70666: PUSH
70667: LD_VAR 0 51
70671: PUSH
70672: LD_VAR 0 52
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: PUSH
70685: LD_VAR 0 4
70689: PUSH
70690: LD_INT 1
70692: PLUS
70693: ARRAY
70694: ST_TO_ADDR
70695: GO 70886
70697: LD_INT 4
70699: DOUBLE
70700: EQUAL
70701: IFTRUE 70723
70703: LD_INT 5
70705: DOUBLE
70706: EQUAL
70707: IFTRUE 70723
70709: LD_INT 34
70711: DOUBLE
70712: EQUAL
70713: IFTRUE 70723
70715: LD_INT 37
70717: DOUBLE
70718: EQUAL
70719: IFTRUE 70723
70721: GO 70779
70723: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70724: LD_ADDR_VAR 0 9
70728: PUSH
70729: LD_VAR 0 53
70733: PUSH
70734: LD_VAR 0 54
70738: PUSH
70739: LD_VAR 0 55
70743: PUSH
70744: LD_VAR 0 56
70748: PUSH
70749: LD_VAR 0 57
70753: PUSH
70754: LD_VAR 0 58
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: PUSH
70767: LD_VAR 0 4
70771: PUSH
70772: LD_INT 1
70774: PLUS
70775: ARRAY
70776: ST_TO_ADDR
70777: GO 70886
70779: LD_INT 31
70781: DOUBLE
70782: EQUAL
70783: IFTRUE 70829
70785: LD_INT 32
70787: DOUBLE
70788: EQUAL
70789: IFTRUE 70829
70791: LD_INT 33
70793: DOUBLE
70794: EQUAL
70795: IFTRUE 70829
70797: LD_INT 27
70799: DOUBLE
70800: EQUAL
70801: IFTRUE 70829
70803: LD_INT 26
70805: DOUBLE
70806: EQUAL
70807: IFTRUE 70829
70809: LD_INT 28
70811: DOUBLE
70812: EQUAL
70813: IFTRUE 70829
70815: LD_INT 29
70817: DOUBLE
70818: EQUAL
70819: IFTRUE 70829
70821: LD_INT 30
70823: DOUBLE
70824: EQUAL
70825: IFTRUE 70829
70827: GO 70885
70829: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70830: LD_ADDR_VAR 0 9
70834: PUSH
70835: LD_VAR 0 59
70839: PUSH
70840: LD_VAR 0 60
70844: PUSH
70845: LD_VAR 0 61
70849: PUSH
70850: LD_VAR 0 62
70854: PUSH
70855: LD_VAR 0 63
70859: PUSH
70860: LD_VAR 0 64
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: PUSH
70873: LD_VAR 0 4
70877: PUSH
70878: LD_INT 1
70880: PLUS
70881: ARRAY
70882: ST_TO_ADDR
70883: GO 70886
70885: POP
// temp_list2 = [ ] ;
70886: LD_ADDR_VAR 0 10
70890: PUSH
70891: EMPTY
70892: ST_TO_ADDR
// for i in temp_list do
70893: LD_ADDR_VAR 0 8
70897: PUSH
70898: LD_VAR 0 9
70902: PUSH
70903: FOR_IN
70904: IFFALSE 70956
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70906: LD_ADDR_VAR 0 10
70910: PUSH
70911: LD_VAR 0 10
70915: PUSH
70916: LD_VAR 0 8
70920: PUSH
70921: LD_INT 1
70923: ARRAY
70924: PUSH
70925: LD_VAR 0 2
70929: PLUS
70930: PUSH
70931: LD_VAR 0 8
70935: PUSH
70936: LD_INT 2
70938: ARRAY
70939: PUSH
70940: LD_VAR 0 3
70944: PLUS
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: EMPTY
70951: LIST
70952: ADD
70953: ST_TO_ADDR
70954: GO 70903
70956: POP
70957: POP
// result = temp_list2 ;
70958: LD_ADDR_VAR 0 7
70962: PUSH
70963: LD_VAR 0 10
70967: ST_TO_ADDR
// end ;
70968: LD_VAR 0 7
70972: RET
// export function EnemyInRange ( unit , dist ) ; begin
70973: LD_INT 0
70975: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70976: LD_ADDR_VAR 0 3
70980: PUSH
70981: LD_VAR 0 1
70985: PPUSH
70986: CALL_OW 255
70990: PPUSH
70991: LD_VAR 0 1
70995: PPUSH
70996: CALL_OW 250
71000: PPUSH
71001: LD_VAR 0 1
71005: PPUSH
71006: CALL_OW 251
71010: PPUSH
71011: LD_VAR 0 2
71015: PPUSH
71016: CALL 44375 0 4
71020: PUSH
71021: LD_INT 4
71023: ARRAY
71024: ST_TO_ADDR
// end ;
71025: LD_VAR 0 3
71029: RET
// export function PlayerSeeMe ( unit ) ; begin
71030: LD_INT 0
71032: PPUSH
// result := See ( your_side , unit ) ;
71033: LD_ADDR_VAR 0 2
71037: PUSH
71038: LD_OWVAR 2
71042: PPUSH
71043: LD_VAR 0 1
71047: PPUSH
71048: CALL_OW 292
71052: ST_TO_ADDR
// end ;
71053: LD_VAR 0 2
71057: RET
// export function ReverseDir ( unit ) ; begin
71058: LD_INT 0
71060: PPUSH
// if not unit then
71061: LD_VAR 0 1
71065: NOT
71066: IFFALSE 71070
// exit ;
71068: GO 71093
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71070: LD_ADDR_VAR 0 2
71074: PUSH
71075: LD_VAR 0 1
71079: PPUSH
71080: CALL_OW 254
71084: PUSH
71085: LD_INT 3
71087: PLUS
71088: PUSH
71089: LD_INT 6
71091: MOD
71092: ST_TO_ADDR
// end ;
71093: LD_VAR 0 2
71097: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71098: LD_INT 0
71100: PPUSH
71101: PPUSH
71102: PPUSH
71103: PPUSH
71104: PPUSH
71105: PPUSH
// if not unit or not hexes then
71106: LD_VAR 0 1
71110: NOT
71111: PUSH
71112: LD_VAR 0 2
71116: NOT
71117: OR
71118: IFFALSE 71122
// exit ;
71120: GO 71245
// dist := 9999 ;
71122: LD_ADDR_VAR 0 5
71126: PUSH
71127: LD_INT 9999
71129: ST_TO_ADDR
// for i = 1 to hexes do
71130: LD_ADDR_VAR 0 4
71134: PUSH
71135: DOUBLE
71136: LD_INT 1
71138: DEC
71139: ST_TO_ADDR
71140: LD_VAR 0 2
71144: PUSH
71145: FOR_TO
71146: IFFALSE 71233
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71148: LD_ADDR_VAR 0 6
71152: PUSH
71153: LD_VAR 0 1
71157: PPUSH
71158: LD_VAR 0 2
71162: PUSH
71163: LD_VAR 0 4
71167: ARRAY
71168: PUSH
71169: LD_INT 1
71171: ARRAY
71172: PPUSH
71173: LD_VAR 0 2
71177: PUSH
71178: LD_VAR 0 4
71182: ARRAY
71183: PUSH
71184: LD_INT 2
71186: ARRAY
71187: PPUSH
71188: CALL_OW 297
71192: ST_TO_ADDR
// if tdist < dist then
71193: LD_VAR 0 6
71197: PUSH
71198: LD_VAR 0 5
71202: LESS
71203: IFFALSE 71231
// begin hex := hexes [ i ] ;
71205: LD_ADDR_VAR 0 8
71209: PUSH
71210: LD_VAR 0 2
71214: PUSH
71215: LD_VAR 0 4
71219: ARRAY
71220: ST_TO_ADDR
// dist := tdist ;
71221: LD_ADDR_VAR 0 5
71225: PUSH
71226: LD_VAR 0 6
71230: ST_TO_ADDR
// end ; end ;
71231: GO 71145
71233: POP
71234: POP
// result := hex ;
71235: LD_ADDR_VAR 0 3
71239: PUSH
71240: LD_VAR 0 8
71244: ST_TO_ADDR
// end ;
71245: LD_VAR 0 3
71249: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71250: LD_INT 0
71252: PPUSH
71253: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71254: LD_VAR 0 1
71258: NOT
71259: PUSH
71260: LD_VAR 0 1
71264: PUSH
71265: LD_INT 21
71267: PUSH
71268: LD_INT 2
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 23
71277: PUSH
71278: LD_INT 2
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PPUSH
71289: CALL_OW 69
71293: IN
71294: NOT
71295: OR
71296: IFFALSE 71300
// exit ;
71298: GO 71347
// for i = 1 to 3 do
71300: LD_ADDR_VAR 0 3
71304: PUSH
71305: DOUBLE
71306: LD_INT 1
71308: DEC
71309: ST_TO_ADDR
71310: LD_INT 3
71312: PUSH
71313: FOR_TO
71314: IFFALSE 71345
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71316: LD_VAR 0 1
71320: PPUSH
71321: CALL_OW 250
71325: PPUSH
71326: LD_VAR 0 1
71330: PPUSH
71331: CALL_OW 251
71335: PPUSH
71336: LD_INT 1
71338: PPUSH
71339: CALL_OW 453
71343: GO 71313
71345: POP
71346: POP
// end ;
71347: LD_VAR 0 2
71351: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71352: LD_INT 0
71354: PPUSH
71355: PPUSH
71356: PPUSH
71357: PPUSH
71358: PPUSH
71359: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71360: LD_VAR 0 1
71364: NOT
71365: PUSH
71366: LD_VAR 0 2
71370: NOT
71371: OR
71372: PUSH
71373: LD_VAR 0 1
71377: PPUSH
71378: CALL_OW 314
71382: OR
71383: IFFALSE 71387
// exit ;
71385: GO 71828
// x := GetX ( enemy_unit ) ;
71387: LD_ADDR_VAR 0 7
71391: PUSH
71392: LD_VAR 0 2
71396: PPUSH
71397: CALL_OW 250
71401: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71402: LD_ADDR_VAR 0 8
71406: PUSH
71407: LD_VAR 0 2
71411: PPUSH
71412: CALL_OW 251
71416: ST_TO_ADDR
// if not x or not y then
71417: LD_VAR 0 7
71421: NOT
71422: PUSH
71423: LD_VAR 0 8
71427: NOT
71428: OR
71429: IFFALSE 71433
// exit ;
71431: GO 71828
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71433: LD_ADDR_VAR 0 6
71437: PUSH
71438: LD_VAR 0 7
71442: PPUSH
71443: LD_INT 0
71445: PPUSH
71446: LD_INT 4
71448: PPUSH
71449: CALL_OW 272
71453: PUSH
71454: LD_VAR 0 8
71458: PPUSH
71459: LD_INT 0
71461: PPUSH
71462: LD_INT 4
71464: PPUSH
71465: CALL_OW 273
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_VAR 0 7
71478: PPUSH
71479: LD_INT 1
71481: PPUSH
71482: LD_INT 4
71484: PPUSH
71485: CALL_OW 272
71489: PUSH
71490: LD_VAR 0 8
71494: PPUSH
71495: LD_INT 1
71497: PPUSH
71498: LD_INT 4
71500: PPUSH
71501: CALL_OW 273
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_VAR 0 7
71514: PPUSH
71515: LD_INT 2
71517: PPUSH
71518: LD_INT 4
71520: PPUSH
71521: CALL_OW 272
71525: PUSH
71526: LD_VAR 0 8
71530: PPUSH
71531: LD_INT 2
71533: PPUSH
71534: LD_INT 4
71536: PPUSH
71537: CALL_OW 273
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_VAR 0 7
71550: PPUSH
71551: LD_INT 3
71553: PPUSH
71554: LD_INT 4
71556: PPUSH
71557: CALL_OW 272
71561: PUSH
71562: LD_VAR 0 8
71566: PPUSH
71567: LD_INT 3
71569: PPUSH
71570: LD_INT 4
71572: PPUSH
71573: CALL_OW 273
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_VAR 0 7
71586: PPUSH
71587: LD_INT 4
71589: PPUSH
71590: LD_INT 4
71592: PPUSH
71593: CALL_OW 272
71597: PUSH
71598: LD_VAR 0 8
71602: PPUSH
71603: LD_INT 4
71605: PPUSH
71606: LD_INT 4
71608: PPUSH
71609: CALL_OW 273
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_VAR 0 7
71622: PPUSH
71623: LD_INT 5
71625: PPUSH
71626: LD_INT 4
71628: PPUSH
71629: CALL_OW 272
71633: PUSH
71634: LD_VAR 0 8
71638: PPUSH
71639: LD_INT 5
71641: PPUSH
71642: LD_INT 4
71644: PPUSH
71645: CALL_OW 273
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: ST_TO_ADDR
// for i = tmp downto 1 do
71662: LD_ADDR_VAR 0 4
71666: PUSH
71667: DOUBLE
71668: LD_VAR 0 6
71672: INC
71673: ST_TO_ADDR
71674: LD_INT 1
71676: PUSH
71677: FOR_DOWNTO
71678: IFFALSE 71779
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71680: LD_VAR 0 6
71684: PUSH
71685: LD_VAR 0 4
71689: ARRAY
71690: PUSH
71691: LD_INT 1
71693: ARRAY
71694: PPUSH
71695: LD_VAR 0 6
71699: PUSH
71700: LD_VAR 0 4
71704: ARRAY
71705: PUSH
71706: LD_INT 2
71708: ARRAY
71709: PPUSH
71710: CALL_OW 488
71714: NOT
71715: PUSH
71716: LD_VAR 0 6
71720: PUSH
71721: LD_VAR 0 4
71725: ARRAY
71726: PUSH
71727: LD_INT 1
71729: ARRAY
71730: PPUSH
71731: LD_VAR 0 6
71735: PUSH
71736: LD_VAR 0 4
71740: ARRAY
71741: PUSH
71742: LD_INT 2
71744: ARRAY
71745: PPUSH
71746: CALL_OW 428
71750: PUSH
71751: LD_INT 0
71753: NONEQUAL
71754: OR
71755: IFFALSE 71777
// tmp := Delete ( tmp , i ) ;
71757: LD_ADDR_VAR 0 6
71761: PUSH
71762: LD_VAR 0 6
71766: PPUSH
71767: LD_VAR 0 4
71771: PPUSH
71772: CALL_OW 3
71776: ST_TO_ADDR
71777: GO 71677
71779: POP
71780: POP
// j := GetClosestHex ( unit , tmp ) ;
71781: LD_ADDR_VAR 0 5
71785: PUSH
71786: LD_VAR 0 1
71790: PPUSH
71791: LD_VAR 0 6
71795: PPUSH
71796: CALL 71098 0 2
71800: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71801: LD_VAR 0 1
71805: PPUSH
71806: LD_VAR 0 5
71810: PUSH
71811: LD_INT 1
71813: ARRAY
71814: PPUSH
71815: LD_VAR 0 5
71819: PUSH
71820: LD_INT 2
71822: ARRAY
71823: PPUSH
71824: CALL_OW 111
// end ;
71828: LD_VAR 0 3
71832: RET
// export function PrepareApemanSoldier ( ) ; begin
71833: LD_INT 0
71835: PPUSH
// uc_nation := 0 ;
71836: LD_ADDR_OWVAR 21
71840: PUSH
71841: LD_INT 0
71843: ST_TO_ADDR
// hc_sex := sex_male ;
71844: LD_ADDR_OWVAR 27
71848: PUSH
71849: LD_INT 1
71851: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71852: LD_ADDR_OWVAR 28
71856: PUSH
71857: LD_INT 15
71859: ST_TO_ADDR
// hc_gallery :=  ;
71860: LD_ADDR_OWVAR 33
71864: PUSH
71865: LD_STRING 
71867: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71868: LD_ADDR_OWVAR 31
71872: PUSH
71873: LD_INT 0
71875: PPUSH
71876: LD_INT 3
71878: PPUSH
71879: CALL_OW 12
71883: PUSH
71884: LD_INT 0
71886: PPUSH
71887: LD_INT 3
71889: PPUSH
71890: CALL_OW 12
71894: PUSH
71895: LD_INT 0
71897: PUSH
71898: LD_INT 0
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: ST_TO_ADDR
// end ;
71907: LD_VAR 0 1
71911: RET
// export function PrepareApemanEngineer ( ) ; begin
71912: LD_INT 0
71914: PPUSH
// uc_nation := 0 ;
71915: LD_ADDR_OWVAR 21
71919: PUSH
71920: LD_INT 0
71922: ST_TO_ADDR
// hc_sex := sex_male ;
71923: LD_ADDR_OWVAR 27
71927: PUSH
71928: LD_INT 1
71930: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71931: LD_ADDR_OWVAR 28
71935: PUSH
71936: LD_INT 16
71938: ST_TO_ADDR
// hc_gallery :=  ;
71939: LD_ADDR_OWVAR 33
71943: PUSH
71944: LD_STRING 
71946: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71947: LD_ADDR_OWVAR 31
71951: PUSH
71952: LD_INT 0
71954: PPUSH
71955: LD_INT 3
71957: PPUSH
71958: CALL_OW 12
71962: PUSH
71963: LD_INT 0
71965: PPUSH
71966: LD_INT 3
71968: PPUSH
71969: CALL_OW 12
71973: PUSH
71974: LD_INT 0
71976: PUSH
71977: LD_INT 0
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: ST_TO_ADDR
// end ;
71986: LD_VAR 0 1
71990: RET
// export function PrepareApeman ( agressivity ) ; begin
71991: LD_INT 0
71993: PPUSH
// uc_side := 0 ;
71994: LD_ADDR_OWVAR 20
71998: PUSH
71999: LD_INT 0
72001: ST_TO_ADDR
// uc_nation := 0 ;
72002: LD_ADDR_OWVAR 21
72006: PUSH
72007: LD_INT 0
72009: ST_TO_ADDR
// hc_sex := sex_male ;
72010: LD_ADDR_OWVAR 27
72014: PUSH
72015: LD_INT 1
72017: ST_TO_ADDR
// hc_class := class_apeman ;
72018: LD_ADDR_OWVAR 28
72022: PUSH
72023: LD_INT 12
72025: ST_TO_ADDR
// hc_gallery :=  ;
72026: LD_ADDR_OWVAR 33
72030: PUSH
72031: LD_STRING 
72033: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72034: LD_ADDR_OWVAR 35
72038: PUSH
72039: LD_VAR 0 1
72043: NEG
72044: PPUSH
72045: LD_VAR 0 1
72049: PPUSH
72050: CALL_OW 12
72054: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72055: LD_ADDR_OWVAR 31
72059: PUSH
72060: LD_INT 0
72062: PPUSH
72063: LD_INT 3
72065: PPUSH
72066: CALL_OW 12
72070: PUSH
72071: LD_INT 0
72073: PPUSH
72074: LD_INT 3
72076: PPUSH
72077: CALL_OW 12
72081: PUSH
72082: LD_INT 0
72084: PUSH
72085: LD_INT 0
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: ST_TO_ADDR
// end ;
72094: LD_VAR 0 2
72098: RET
// export function PrepareTiger ( agressivity ) ; begin
72099: LD_INT 0
72101: PPUSH
// uc_side := 0 ;
72102: LD_ADDR_OWVAR 20
72106: PUSH
72107: LD_INT 0
72109: ST_TO_ADDR
// uc_nation := 0 ;
72110: LD_ADDR_OWVAR 21
72114: PUSH
72115: LD_INT 0
72117: ST_TO_ADDR
// hc_class := class_tiger ;
72118: LD_ADDR_OWVAR 28
72122: PUSH
72123: LD_INT 14
72125: ST_TO_ADDR
// hc_gallery :=  ;
72126: LD_ADDR_OWVAR 33
72130: PUSH
72131: LD_STRING 
72133: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72134: LD_ADDR_OWVAR 35
72138: PUSH
72139: LD_VAR 0 1
72143: NEG
72144: PPUSH
72145: LD_VAR 0 1
72149: PPUSH
72150: CALL_OW 12
72154: ST_TO_ADDR
// end ;
72155: LD_VAR 0 2
72159: RET
// export function PrepareEnchidna ( ) ; begin
72160: LD_INT 0
72162: PPUSH
// uc_side := 0 ;
72163: LD_ADDR_OWVAR 20
72167: PUSH
72168: LD_INT 0
72170: ST_TO_ADDR
// uc_nation := 0 ;
72171: LD_ADDR_OWVAR 21
72175: PUSH
72176: LD_INT 0
72178: ST_TO_ADDR
// hc_class := class_baggie ;
72179: LD_ADDR_OWVAR 28
72183: PUSH
72184: LD_INT 13
72186: ST_TO_ADDR
// hc_gallery :=  ;
72187: LD_ADDR_OWVAR 33
72191: PUSH
72192: LD_STRING 
72194: ST_TO_ADDR
// end ;
72195: LD_VAR 0 1
72199: RET
// export function PrepareFrog ( ) ; begin
72200: LD_INT 0
72202: PPUSH
// uc_side := 0 ;
72203: LD_ADDR_OWVAR 20
72207: PUSH
72208: LD_INT 0
72210: ST_TO_ADDR
// uc_nation := 0 ;
72211: LD_ADDR_OWVAR 21
72215: PUSH
72216: LD_INT 0
72218: ST_TO_ADDR
// hc_class := class_frog ;
72219: LD_ADDR_OWVAR 28
72223: PUSH
72224: LD_INT 19
72226: ST_TO_ADDR
// hc_gallery :=  ;
72227: LD_ADDR_OWVAR 33
72231: PUSH
72232: LD_STRING 
72234: ST_TO_ADDR
// end ;
72235: LD_VAR 0 1
72239: RET
// export function PrepareFish ( ) ; begin
72240: LD_INT 0
72242: PPUSH
// uc_side := 0 ;
72243: LD_ADDR_OWVAR 20
72247: PUSH
72248: LD_INT 0
72250: ST_TO_ADDR
// uc_nation := 0 ;
72251: LD_ADDR_OWVAR 21
72255: PUSH
72256: LD_INT 0
72258: ST_TO_ADDR
// hc_class := class_fish ;
72259: LD_ADDR_OWVAR 28
72263: PUSH
72264: LD_INT 20
72266: ST_TO_ADDR
// hc_gallery :=  ;
72267: LD_ADDR_OWVAR 33
72271: PUSH
72272: LD_STRING 
72274: ST_TO_ADDR
// end ;
72275: LD_VAR 0 1
72279: RET
// export function PrepareBird ( ) ; begin
72280: LD_INT 0
72282: PPUSH
// uc_side := 0 ;
72283: LD_ADDR_OWVAR 20
72287: PUSH
72288: LD_INT 0
72290: ST_TO_ADDR
// uc_nation := 0 ;
72291: LD_ADDR_OWVAR 21
72295: PUSH
72296: LD_INT 0
72298: ST_TO_ADDR
// hc_class := class_phororhacos ;
72299: LD_ADDR_OWVAR 28
72303: PUSH
72304: LD_INT 18
72306: ST_TO_ADDR
// hc_gallery :=  ;
72307: LD_ADDR_OWVAR 33
72311: PUSH
72312: LD_STRING 
72314: ST_TO_ADDR
// end ;
72315: LD_VAR 0 1
72319: RET
// export function PrepareHorse ( ) ; begin
72320: LD_INT 0
72322: PPUSH
// uc_side := 0 ;
72323: LD_ADDR_OWVAR 20
72327: PUSH
72328: LD_INT 0
72330: ST_TO_ADDR
// uc_nation := 0 ;
72331: LD_ADDR_OWVAR 21
72335: PUSH
72336: LD_INT 0
72338: ST_TO_ADDR
// hc_class := class_horse ;
72339: LD_ADDR_OWVAR 28
72343: PUSH
72344: LD_INT 21
72346: ST_TO_ADDR
// hc_gallery :=  ;
72347: LD_ADDR_OWVAR 33
72351: PUSH
72352: LD_STRING 
72354: ST_TO_ADDR
// end ;
72355: LD_VAR 0 1
72359: RET
// export function PrepareMastodont ( ) ; begin
72360: LD_INT 0
72362: PPUSH
// uc_side := 0 ;
72363: LD_ADDR_OWVAR 20
72367: PUSH
72368: LD_INT 0
72370: ST_TO_ADDR
// uc_nation := 0 ;
72371: LD_ADDR_OWVAR 21
72375: PUSH
72376: LD_INT 0
72378: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72379: LD_ADDR_OWVAR 37
72383: PUSH
72384: LD_INT 31
72386: ST_TO_ADDR
// vc_control := control_rider ;
72387: LD_ADDR_OWVAR 38
72391: PUSH
72392: LD_INT 4
72394: ST_TO_ADDR
// end ;
72395: LD_VAR 0 1
72399: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72400: LD_INT 0
72402: PPUSH
72403: PPUSH
72404: PPUSH
// uc_side = 0 ;
72405: LD_ADDR_OWVAR 20
72409: PUSH
72410: LD_INT 0
72412: ST_TO_ADDR
// uc_nation = 0 ;
72413: LD_ADDR_OWVAR 21
72417: PUSH
72418: LD_INT 0
72420: ST_TO_ADDR
// InitHc_All ( ) ;
72421: CALL_OW 584
// InitVc ;
72425: CALL_OW 20
// if mastodonts then
72429: LD_VAR 0 6
72433: IFFALSE 72500
// for i = 1 to mastodonts do
72435: LD_ADDR_VAR 0 11
72439: PUSH
72440: DOUBLE
72441: LD_INT 1
72443: DEC
72444: ST_TO_ADDR
72445: LD_VAR 0 6
72449: PUSH
72450: FOR_TO
72451: IFFALSE 72498
// begin vc_chassis := 31 ;
72453: LD_ADDR_OWVAR 37
72457: PUSH
72458: LD_INT 31
72460: ST_TO_ADDR
// vc_control := control_rider ;
72461: LD_ADDR_OWVAR 38
72465: PUSH
72466: LD_INT 4
72468: ST_TO_ADDR
// animal := CreateVehicle ;
72469: LD_ADDR_VAR 0 12
72473: PUSH
72474: CALL_OW 45
72478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72479: LD_VAR 0 12
72483: PPUSH
72484: LD_VAR 0 8
72488: PPUSH
72489: LD_INT 0
72491: PPUSH
72492: CALL 74635 0 3
// end ;
72496: GO 72450
72498: POP
72499: POP
// if horses then
72500: LD_VAR 0 5
72504: IFFALSE 72571
// for i = 1 to horses do
72506: LD_ADDR_VAR 0 11
72510: PUSH
72511: DOUBLE
72512: LD_INT 1
72514: DEC
72515: ST_TO_ADDR
72516: LD_VAR 0 5
72520: PUSH
72521: FOR_TO
72522: IFFALSE 72569
// begin hc_class := 21 ;
72524: LD_ADDR_OWVAR 28
72528: PUSH
72529: LD_INT 21
72531: ST_TO_ADDR
// hc_gallery :=  ;
72532: LD_ADDR_OWVAR 33
72536: PUSH
72537: LD_STRING 
72539: ST_TO_ADDR
// animal := CreateHuman ;
72540: LD_ADDR_VAR 0 12
72544: PUSH
72545: CALL_OW 44
72549: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72550: LD_VAR 0 12
72554: PPUSH
72555: LD_VAR 0 8
72559: PPUSH
72560: LD_INT 0
72562: PPUSH
72563: CALL 74635 0 3
// end ;
72567: GO 72521
72569: POP
72570: POP
// if birds then
72571: LD_VAR 0 1
72575: IFFALSE 72642
// for i = 1 to birds do
72577: LD_ADDR_VAR 0 11
72581: PUSH
72582: DOUBLE
72583: LD_INT 1
72585: DEC
72586: ST_TO_ADDR
72587: LD_VAR 0 1
72591: PUSH
72592: FOR_TO
72593: IFFALSE 72640
// begin hc_class = 18 ;
72595: LD_ADDR_OWVAR 28
72599: PUSH
72600: LD_INT 18
72602: ST_TO_ADDR
// hc_gallery =  ;
72603: LD_ADDR_OWVAR 33
72607: PUSH
72608: LD_STRING 
72610: ST_TO_ADDR
// animal := CreateHuman ;
72611: LD_ADDR_VAR 0 12
72615: PUSH
72616: CALL_OW 44
72620: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72621: LD_VAR 0 12
72625: PPUSH
72626: LD_VAR 0 8
72630: PPUSH
72631: LD_INT 0
72633: PPUSH
72634: CALL 74635 0 3
// end ;
72638: GO 72592
72640: POP
72641: POP
// if tigers then
72642: LD_VAR 0 2
72646: IFFALSE 72730
// for i = 1 to tigers do
72648: LD_ADDR_VAR 0 11
72652: PUSH
72653: DOUBLE
72654: LD_INT 1
72656: DEC
72657: ST_TO_ADDR
72658: LD_VAR 0 2
72662: PUSH
72663: FOR_TO
72664: IFFALSE 72728
// begin hc_class = class_tiger ;
72666: LD_ADDR_OWVAR 28
72670: PUSH
72671: LD_INT 14
72673: ST_TO_ADDR
// hc_gallery =  ;
72674: LD_ADDR_OWVAR 33
72678: PUSH
72679: LD_STRING 
72681: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72682: LD_ADDR_OWVAR 35
72686: PUSH
72687: LD_INT 7
72689: NEG
72690: PPUSH
72691: LD_INT 7
72693: PPUSH
72694: CALL_OW 12
72698: ST_TO_ADDR
// animal := CreateHuman ;
72699: LD_ADDR_VAR 0 12
72703: PUSH
72704: CALL_OW 44
72708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72709: LD_VAR 0 12
72713: PPUSH
72714: LD_VAR 0 8
72718: PPUSH
72719: LD_INT 0
72721: PPUSH
72722: CALL 74635 0 3
// end ;
72726: GO 72663
72728: POP
72729: POP
// if apemans then
72730: LD_VAR 0 3
72734: IFFALSE 72857
// for i = 1 to apemans do
72736: LD_ADDR_VAR 0 11
72740: PUSH
72741: DOUBLE
72742: LD_INT 1
72744: DEC
72745: ST_TO_ADDR
72746: LD_VAR 0 3
72750: PUSH
72751: FOR_TO
72752: IFFALSE 72855
// begin hc_class = class_apeman ;
72754: LD_ADDR_OWVAR 28
72758: PUSH
72759: LD_INT 12
72761: ST_TO_ADDR
// hc_gallery =  ;
72762: LD_ADDR_OWVAR 33
72766: PUSH
72767: LD_STRING 
72769: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72770: LD_ADDR_OWVAR 35
72774: PUSH
72775: LD_INT 2
72777: NEG
72778: PPUSH
72779: LD_INT 2
72781: PPUSH
72782: CALL_OW 12
72786: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72787: LD_ADDR_OWVAR 31
72791: PUSH
72792: LD_INT 1
72794: PPUSH
72795: LD_INT 3
72797: PPUSH
72798: CALL_OW 12
72802: PUSH
72803: LD_INT 1
72805: PPUSH
72806: LD_INT 3
72808: PPUSH
72809: CALL_OW 12
72813: PUSH
72814: LD_INT 0
72816: PUSH
72817: LD_INT 0
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: ST_TO_ADDR
// animal := CreateHuman ;
72826: LD_ADDR_VAR 0 12
72830: PUSH
72831: CALL_OW 44
72835: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72836: LD_VAR 0 12
72840: PPUSH
72841: LD_VAR 0 8
72845: PPUSH
72846: LD_INT 0
72848: PPUSH
72849: CALL 74635 0 3
// end ;
72853: GO 72751
72855: POP
72856: POP
// if enchidnas then
72857: LD_VAR 0 4
72861: IFFALSE 72928
// for i = 1 to enchidnas do
72863: LD_ADDR_VAR 0 11
72867: PUSH
72868: DOUBLE
72869: LD_INT 1
72871: DEC
72872: ST_TO_ADDR
72873: LD_VAR 0 4
72877: PUSH
72878: FOR_TO
72879: IFFALSE 72926
// begin hc_class = 13 ;
72881: LD_ADDR_OWVAR 28
72885: PUSH
72886: LD_INT 13
72888: ST_TO_ADDR
// hc_gallery =  ;
72889: LD_ADDR_OWVAR 33
72893: PUSH
72894: LD_STRING 
72896: ST_TO_ADDR
// animal := CreateHuman ;
72897: LD_ADDR_VAR 0 12
72901: PUSH
72902: CALL_OW 44
72906: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72907: LD_VAR 0 12
72911: PPUSH
72912: LD_VAR 0 8
72916: PPUSH
72917: LD_INT 0
72919: PPUSH
72920: CALL 74635 0 3
// end ;
72924: GO 72878
72926: POP
72927: POP
// if fishes then
72928: LD_VAR 0 7
72932: IFFALSE 72999
// for i = 1 to fishes do
72934: LD_ADDR_VAR 0 11
72938: PUSH
72939: DOUBLE
72940: LD_INT 1
72942: DEC
72943: ST_TO_ADDR
72944: LD_VAR 0 7
72948: PUSH
72949: FOR_TO
72950: IFFALSE 72997
// begin hc_class = 20 ;
72952: LD_ADDR_OWVAR 28
72956: PUSH
72957: LD_INT 20
72959: ST_TO_ADDR
// hc_gallery =  ;
72960: LD_ADDR_OWVAR 33
72964: PUSH
72965: LD_STRING 
72967: ST_TO_ADDR
// animal := CreateHuman ;
72968: LD_ADDR_VAR 0 12
72972: PUSH
72973: CALL_OW 44
72977: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72978: LD_VAR 0 12
72982: PPUSH
72983: LD_VAR 0 9
72987: PPUSH
72988: LD_INT 0
72990: PPUSH
72991: CALL 74635 0 3
// end ;
72995: GO 72949
72997: POP
72998: POP
// end ;
72999: LD_VAR 0 10
73003: RET
// export function WantHeal ( sci , unit ) ; begin
73004: LD_INT 0
73006: PPUSH
// if GetTaskList ( sci ) > 0 then
73007: LD_VAR 0 1
73011: PPUSH
73012: CALL_OW 437
73016: PUSH
73017: LD_INT 0
73019: GREATER
73020: IFFALSE 73090
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73022: LD_VAR 0 1
73026: PPUSH
73027: CALL_OW 437
73031: PUSH
73032: LD_INT 1
73034: ARRAY
73035: PUSH
73036: LD_INT 1
73038: ARRAY
73039: PUSH
73040: LD_STRING l
73042: EQUAL
73043: PUSH
73044: LD_VAR 0 1
73048: PPUSH
73049: CALL_OW 437
73053: PUSH
73054: LD_INT 1
73056: ARRAY
73057: PUSH
73058: LD_INT 4
73060: ARRAY
73061: PUSH
73062: LD_VAR 0 2
73066: EQUAL
73067: AND
73068: IFFALSE 73080
// result := true else
73070: LD_ADDR_VAR 0 3
73074: PUSH
73075: LD_INT 1
73077: ST_TO_ADDR
73078: GO 73088
// result := false ;
73080: LD_ADDR_VAR 0 3
73084: PUSH
73085: LD_INT 0
73087: ST_TO_ADDR
// end else
73088: GO 73098
// result := false ;
73090: LD_ADDR_VAR 0 3
73094: PUSH
73095: LD_INT 0
73097: ST_TO_ADDR
// end ;
73098: LD_VAR 0 3
73102: RET
// export function HealTarget ( sci ) ; begin
73103: LD_INT 0
73105: PPUSH
// if not sci then
73106: LD_VAR 0 1
73110: NOT
73111: IFFALSE 73115
// exit ;
73113: GO 73180
// result := 0 ;
73115: LD_ADDR_VAR 0 2
73119: PUSH
73120: LD_INT 0
73122: ST_TO_ADDR
// if GetTaskList ( sci ) then
73123: LD_VAR 0 1
73127: PPUSH
73128: CALL_OW 437
73132: IFFALSE 73180
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73134: LD_VAR 0 1
73138: PPUSH
73139: CALL_OW 437
73143: PUSH
73144: LD_INT 1
73146: ARRAY
73147: PUSH
73148: LD_INT 1
73150: ARRAY
73151: PUSH
73152: LD_STRING l
73154: EQUAL
73155: IFFALSE 73180
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73157: LD_ADDR_VAR 0 2
73161: PUSH
73162: LD_VAR 0 1
73166: PPUSH
73167: CALL_OW 437
73171: PUSH
73172: LD_INT 1
73174: ARRAY
73175: PUSH
73176: LD_INT 4
73178: ARRAY
73179: ST_TO_ADDR
// end ;
73180: LD_VAR 0 2
73184: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73185: LD_INT 0
73187: PPUSH
73188: PPUSH
73189: PPUSH
73190: PPUSH
// if not base_units then
73191: LD_VAR 0 1
73195: NOT
73196: IFFALSE 73200
// exit ;
73198: GO 73287
// result := false ;
73200: LD_ADDR_VAR 0 2
73204: PUSH
73205: LD_INT 0
73207: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73208: LD_ADDR_VAR 0 5
73212: PUSH
73213: LD_VAR 0 1
73217: PPUSH
73218: LD_INT 21
73220: PUSH
73221: LD_INT 3
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PPUSH
73228: CALL_OW 72
73232: ST_TO_ADDR
// if not tmp then
73233: LD_VAR 0 5
73237: NOT
73238: IFFALSE 73242
// exit ;
73240: GO 73287
// for i in tmp do
73242: LD_ADDR_VAR 0 3
73246: PUSH
73247: LD_VAR 0 5
73251: PUSH
73252: FOR_IN
73253: IFFALSE 73285
// begin result := EnemyInRange ( i , 22 ) ;
73255: LD_ADDR_VAR 0 2
73259: PUSH
73260: LD_VAR 0 3
73264: PPUSH
73265: LD_INT 22
73267: PPUSH
73268: CALL 70973 0 2
73272: ST_TO_ADDR
// if result then
73273: LD_VAR 0 2
73277: IFFALSE 73283
// exit ;
73279: POP
73280: POP
73281: GO 73287
// end ;
73283: GO 73252
73285: POP
73286: POP
// end ;
73287: LD_VAR 0 2
73291: RET
// export function FilterByTag ( units , tag ) ; begin
73292: LD_INT 0
73294: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73295: LD_ADDR_VAR 0 3
73299: PUSH
73300: LD_VAR 0 1
73304: PPUSH
73305: LD_INT 120
73307: PUSH
73308: LD_VAR 0 2
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PPUSH
73317: CALL_OW 72
73321: ST_TO_ADDR
// end ;
73322: LD_VAR 0 3
73326: RET
// export function IsDriver ( un ) ; begin
73327: LD_INT 0
73329: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73330: LD_ADDR_VAR 0 2
73334: PUSH
73335: LD_VAR 0 1
73339: PUSH
73340: LD_INT 55
73342: PUSH
73343: EMPTY
73344: LIST
73345: PPUSH
73346: CALL_OW 69
73350: IN
73351: ST_TO_ADDR
// end ;
73352: LD_VAR 0 2
73356: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73357: LD_INT 0
73359: PPUSH
73360: PPUSH
// list := [ ] ;
73361: LD_ADDR_VAR 0 5
73365: PUSH
73366: EMPTY
73367: ST_TO_ADDR
// case d of 0 :
73368: LD_VAR 0 3
73372: PUSH
73373: LD_INT 0
73375: DOUBLE
73376: EQUAL
73377: IFTRUE 73381
73379: GO 73514
73381: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73382: LD_ADDR_VAR 0 5
73386: PUSH
73387: LD_VAR 0 1
73391: PUSH
73392: LD_INT 4
73394: MINUS
73395: PUSH
73396: LD_VAR 0 2
73400: PUSH
73401: LD_INT 4
73403: MINUS
73404: PUSH
73405: LD_INT 2
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: LIST
73412: PUSH
73413: LD_VAR 0 1
73417: PUSH
73418: LD_INT 3
73420: MINUS
73421: PUSH
73422: LD_VAR 0 2
73426: PUSH
73427: LD_INT 1
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: LIST
73434: PUSH
73435: LD_VAR 0 1
73439: PUSH
73440: LD_INT 4
73442: PLUS
73443: PUSH
73444: LD_VAR 0 2
73448: PUSH
73449: LD_INT 4
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: LIST
73456: PUSH
73457: LD_VAR 0 1
73461: PUSH
73462: LD_INT 3
73464: PLUS
73465: PUSH
73466: LD_VAR 0 2
73470: PUSH
73471: LD_INT 3
73473: PLUS
73474: PUSH
73475: LD_INT 5
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: LIST
73482: PUSH
73483: LD_VAR 0 1
73487: PUSH
73488: LD_VAR 0 2
73492: PUSH
73493: LD_INT 4
73495: PLUS
73496: PUSH
73497: LD_INT 0
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: LIST
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: LIST
73509: LIST
73510: LIST
73511: ST_TO_ADDR
// end ; 1 :
73512: GO 74212
73514: LD_INT 1
73516: DOUBLE
73517: EQUAL
73518: IFTRUE 73522
73520: GO 73655
73522: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73523: LD_ADDR_VAR 0 5
73527: PUSH
73528: LD_VAR 0 1
73532: PUSH
73533: LD_VAR 0 2
73537: PUSH
73538: LD_INT 4
73540: MINUS
73541: PUSH
73542: LD_INT 3
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: LIST
73549: PUSH
73550: LD_VAR 0 1
73554: PUSH
73555: LD_INT 3
73557: MINUS
73558: PUSH
73559: LD_VAR 0 2
73563: PUSH
73564: LD_INT 3
73566: MINUS
73567: PUSH
73568: LD_INT 2
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: LIST
73575: PUSH
73576: LD_VAR 0 1
73580: PUSH
73581: LD_INT 4
73583: MINUS
73584: PUSH
73585: LD_VAR 0 2
73589: PUSH
73590: LD_INT 1
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: LIST
73597: PUSH
73598: LD_VAR 0 1
73602: PUSH
73603: LD_VAR 0 2
73607: PUSH
73608: LD_INT 3
73610: PLUS
73611: PUSH
73612: LD_INT 0
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: LIST
73619: PUSH
73620: LD_VAR 0 1
73624: PUSH
73625: LD_INT 4
73627: PLUS
73628: PUSH
73629: LD_VAR 0 2
73633: PUSH
73634: LD_INT 4
73636: PLUS
73637: PUSH
73638: LD_INT 5
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: LIST
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: ST_TO_ADDR
// end ; 2 :
73653: GO 74212
73655: LD_INT 2
73657: DOUBLE
73658: EQUAL
73659: IFTRUE 73663
73661: GO 73792
73663: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73664: LD_ADDR_VAR 0 5
73668: PUSH
73669: LD_VAR 0 1
73673: PUSH
73674: LD_VAR 0 2
73678: PUSH
73679: LD_INT 3
73681: MINUS
73682: PUSH
73683: LD_INT 3
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: LIST
73690: PUSH
73691: LD_VAR 0 1
73695: PUSH
73696: LD_INT 4
73698: PLUS
73699: PUSH
73700: LD_VAR 0 2
73704: PUSH
73705: LD_INT 4
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: LIST
73712: PUSH
73713: LD_VAR 0 1
73717: PUSH
73718: LD_VAR 0 2
73722: PUSH
73723: LD_INT 4
73725: PLUS
73726: PUSH
73727: LD_INT 0
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: LIST
73734: PUSH
73735: LD_VAR 0 1
73739: PUSH
73740: LD_INT 3
73742: MINUS
73743: PUSH
73744: LD_VAR 0 2
73748: PUSH
73749: LD_INT 1
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: LIST
73756: PUSH
73757: LD_VAR 0 1
73761: PUSH
73762: LD_INT 4
73764: MINUS
73765: PUSH
73766: LD_VAR 0 2
73770: PUSH
73771: LD_INT 4
73773: MINUS
73774: PUSH
73775: LD_INT 2
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: LIST
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: ST_TO_ADDR
// end ; 3 :
73790: GO 74212
73792: LD_INT 3
73794: DOUBLE
73795: EQUAL
73796: IFTRUE 73800
73798: GO 73933
73800: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73801: LD_ADDR_VAR 0 5
73805: PUSH
73806: LD_VAR 0 1
73810: PUSH
73811: LD_INT 3
73813: PLUS
73814: PUSH
73815: LD_VAR 0 2
73819: PUSH
73820: LD_INT 4
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: LIST
73827: PUSH
73828: LD_VAR 0 1
73832: PUSH
73833: LD_INT 4
73835: PLUS
73836: PUSH
73837: LD_VAR 0 2
73841: PUSH
73842: LD_INT 4
73844: PLUS
73845: PUSH
73846: LD_INT 5
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: LIST
73853: PUSH
73854: LD_VAR 0 1
73858: PUSH
73859: LD_INT 4
73861: MINUS
73862: PUSH
73863: LD_VAR 0 2
73867: PUSH
73868: LD_INT 1
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: LIST
73875: PUSH
73876: LD_VAR 0 1
73880: PUSH
73881: LD_VAR 0 2
73885: PUSH
73886: LD_INT 4
73888: MINUS
73889: PUSH
73890: LD_INT 3
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: LIST
73897: PUSH
73898: LD_VAR 0 1
73902: PUSH
73903: LD_INT 3
73905: MINUS
73906: PUSH
73907: LD_VAR 0 2
73911: PUSH
73912: LD_INT 3
73914: MINUS
73915: PUSH
73916: LD_INT 2
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: LIST
73923: PUSH
73924: EMPTY
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: ST_TO_ADDR
// end ; 4 :
73931: GO 74212
73933: LD_INT 4
73935: DOUBLE
73936: EQUAL
73937: IFTRUE 73941
73939: GO 74074
73941: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73942: LD_ADDR_VAR 0 5
73946: PUSH
73947: LD_VAR 0 1
73951: PUSH
73952: LD_VAR 0 2
73956: PUSH
73957: LD_INT 4
73959: PLUS
73960: PUSH
73961: LD_INT 0
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: LIST
73968: PUSH
73969: LD_VAR 0 1
73973: PUSH
73974: LD_INT 3
73976: PLUS
73977: PUSH
73978: LD_VAR 0 2
73982: PUSH
73983: LD_INT 3
73985: PLUS
73986: PUSH
73987: LD_INT 5
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: LIST
73994: PUSH
73995: LD_VAR 0 1
73999: PUSH
74000: LD_INT 4
74002: PLUS
74003: PUSH
74004: LD_VAR 0 2
74008: PUSH
74009: LD_INT 4
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: LIST
74016: PUSH
74017: LD_VAR 0 1
74021: PUSH
74022: LD_VAR 0 2
74026: PUSH
74027: LD_INT 3
74029: MINUS
74030: PUSH
74031: LD_INT 3
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: LIST
74038: PUSH
74039: LD_VAR 0 1
74043: PUSH
74044: LD_INT 4
74046: MINUS
74047: PUSH
74048: LD_VAR 0 2
74052: PUSH
74053: LD_INT 4
74055: MINUS
74056: PUSH
74057: LD_INT 2
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: LIST
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: LIST
74069: LIST
74070: LIST
74071: ST_TO_ADDR
// end ; 5 :
74072: GO 74212
74074: LD_INT 5
74076: DOUBLE
74077: EQUAL
74078: IFTRUE 74082
74080: GO 74211
74082: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74083: LD_ADDR_VAR 0 5
74087: PUSH
74088: LD_VAR 0 1
74092: PUSH
74093: LD_INT 4
74095: MINUS
74096: PUSH
74097: LD_VAR 0 2
74101: PUSH
74102: LD_INT 1
74104: PUSH
74105: EMPTY
74106: LIST
74107: LIST
74108: LIST
74109: PUSH
74110: LD_VAR 0 1
74114: PUSH
74115: LD_VAR 0 2
74119: PUSH
74120: LD_INT 4
74122: MINUS
74123: PUSH
74124: LD_INT 3
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: LIST
74131: PUSH
74132: LD_VAR 0 1
74136: PUSH
74137: LD_INT 4
74139: PLUS
74140: PUSH
74141: LD_VAR 0 2
74145: PUSH
74146: LD_INT 4
74148: PLUS
74149: PUSH
74150: LD_INT 5
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: LIST
74157: PUSH
74158: LD_VAR 0 1
74162: PUSH
74163: LD_INT 3
74165: PLUS
74166: PUSH
74167: LD_VAR 0 2
74171: PUSH
74172: LD_INT 4
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: LIST
74179: PUSH
74180: LD_VAR 0 1
74184: PUSH
74185: LD_VAR 0 2
74189: PUSH
74190: LD_INT 3
74192: PLUS
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: LIST
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: ST_TO_ADDR
// end ; end ;
74209: GO 74212
74211: POP
// result := list ;
74212: LD_ADDR_VAR 0 4
74216: PUSH
74217: LD_VAR 0 5
74221: ST_TO_ADDR
// end ;
74222: LD_VAR 0 4
74226: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74227: LD_INT 0
74229: PPUSH
74230: PPUSH
74231: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74232: LD_VAR 0 1
74236: NOT
74237: PUSH
74238: LD_VAR 0 2
74242: PUSH
74243: LD_INT 1
74245: PUSH
74246: LD_INT 2
74248: PUSH
74249: LD_INT 3
74251: PUSH
74252: LD_INT 4
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: IN
74261: NOT
74262: OR
74263: IFFALSE 74267
// exit ;
74265: GO 74359
// tmp := [ ] ;
74267: LD_ADDR_VAR 0 5
74271: PUSH
74272: EMPTY
74273: ST_TO_ADDR
// for i in units do
74274: LD_ADDR_VAR 0 4
74278: PUSH
74279: LD_VAR 0 1
74283: PUSH
74284: FOR_IN
74285: IFFALSE 74328
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74287: LD_ADDR_VAR 0 5
74291: PUSH
74292: LD_VAR 0 5
74296: PPUSH
74297: LD_VAR 0 5
74301: PUSH
74302: LD_INT 1
74304: PLUS
74305: PPUSH
74306: LD_VAR 0 4
74310: PPUSH
74311: LD_VAR 0 2
74315: PPUSH
74316: CALL_OW 259
74320: PPUSH
74321: CALL_OW 2
74325: ST_TO_ADDR
74326: GO 74284
74328: POP
74329: POP
// if not tmp then
74330: LD_VAR 0 5
74334: NOT
74335: IFFALSE 74339
// exit ;
74337: GO 74359
// result := SortListByListDesc ( units , tmp ) ;
74339: LD_ADDR_VAR 0 3
74343: PUSH
74344: LD_VAR 0 1
74348: PPUSH
74349: LD_VAR 0 5
74353: PPUSH
74354: CALL_OW 77
74358: ST_TO_ADDR
// end ;
74359: LD_VAR 0 3
74363: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74364: LD_INT 0
74366: PPUSH
74367: PPUSH
74368: PPUSH
// result := false ;
74369: LD_ADDR_VAR 0 3
74373: PUSH
74374: LD_INT 0
74376: ST_TO_ADDR
// x := GetX ( building ) ;
74377: LD_ADDR_VAR 0 4
74381: PUSH
74382: LD_VAR 0 2
74386: PPUSH
74387: CALL_OW 250
74391: ST_TO_ADDR
// y := GetY ( building ) ;
74392: LD_ADDR_VAR 0 5
74396: PUSH
74397: LD_VAR 0 2
74401: PPUSH
74402: CALL_OW 251
74406: ST_TO_ADDR
// if not building or not x or not y then
74407: LD_VAR 0 2
74411: NOT
74412: PUSH
74413: LD_VAR 0 4
74417: NOT
74418: OR
74419: PUSH
74420: LD_VAR 0 5
74424: NOT
74425: OR
74426: IFFALSE 74430
// exit ;
74428: GO 74522
// if GetTaskList ( unit ) then
74430: LD_VAR 0 1
74434: PPUSH
74435: CALL_OW 437
74439: IFFALSE 74522
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74441: LD_STRING e
74443: PUSH
74444: LD_VAR 0 1
74448: PPUSH
74449: CALL_OW 437
74453: PUSH
74454: LD_INT 1
74456: ARRAY
74457: PUSH
74458: LD_INT 1
74460: ARRAY
74461: EQUAL
74462: PUSH
74463: LD_VAR 0 4
74467: PUSH
74468: LD_VAR 0 1
74472: PPUSH
74473: CALL_OW 437
74477: PUSH
74478: LD_INT 1
74480: ARRAY
74481: PUSH
74482: LD_INT 2
74484: ARRAY
74485: EQUAL
74486: AND
74487: PUSH
74488: LD_VAR 0 5
74492: PUSH
74493: LD_VAR 0 1
74497: PPUSH
74498: CALL_OW 437
74502: PUSH
74503: LD_INT 1
74505: ARRAY
74506: PUSH
74507: LD_INT 3
74509: ARRAY
74510: EQUAL
74511: AND
74512: IFFALSE 74522
// result := true end ;
74514: LD_ADDR_VAR 0 3
74518: PUSH
74519: LD_INT 1
74521: ST_TO_ADDR
// end ;
74522: LD_VAR 0 3
74526: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74527: LD_INT 0
74529: PPUSH
// result := false ;
74530: LD_ADDR_VAR 0 4
74534: PUSH
74535: LD_INT 0
74537: ST_TO_ADDR
// if GetTaskList ( unit ) then
74538: LD_VAR 0 1
74542: PPUSH
74543: CALL_OW 437
74547: IFFALSE 74630
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74549: LD_STRING M
74551: PUSH
74552: LD_VAR 0 1
74556: PPUSH
74557: CALL_OW 437
74561: PUSH
74562: LD_INT 1
74564: ARRAY
74565: PUSH
74566: LD_INT 1
74568: ARRAY
74569: EQUAL
74570: PUSH
74571: LD_VAR 0 2
74575: PUSH
74576: LD_VAR 0 1
74580: PPUSH
74581: CALL_OW 437
74585: PUSH
74586: LD_INT 1
74588: ARRAY
74589: PUSH
74590: LD_INT 2
74592: ARRAY
74593: EQUAL
74594: AND
74595: PUSH
74596: LD_VAR 0 3
74600: PUSH
74601: LD_VAR 0 1
74605: PPUSH
74606: CALL_OW 437
74610: PUSH
74611: LD_INT 1
74613: ARRAY
74614: PUSH
74615: LD_INT 3
74617: ARRAY
74618: EQUAL
74619: AND
74620: IFFALSE 74630
// result := true ;
74622: LD_ADDR_VAR 0 4
74626: PUSH
74627: LD_INT 1
74629: ST_TO_ADDR
// end ; end ;
74630: LD_VAR 0 4
74634: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74635: LD_INT 0
74637: PPUSH
74638: PPUSH
74639: PPUSH
74640: PPUSH
// if not unit or not area then
74641: LD_VAR 0 1
74645: NOT
74646: PUSH
74647: LD_VAR 0 2
74651: NOT
74652: OR
74653: IFFALSE 74657
// exit ;
74655: GO 74821
// tmp := AreaToList ( area , i ) ;
74657: LD_ADDR_VAR 0 6
74661: PUSH
74662: LD_VAR 0 2
74666: PPUSH
74667: LD_VAR 0 5
74671: PPUSH
74672: CALL_OW 517
74676: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74677: LD_ADDR_VAR 0 5
74681: PUSH
74682: DOUBLE
74683: LD_INT 1
74685: DEC
74686: ST_TO_ADDR
74687: LD_VAR 0 6
74691: PUSH
74692: LD_INT 1
74694: ARRAY
74695: PUSH
74696: FOR_TO
74697: IFFALSE 74819
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74699: LD_ADDR_VAR 0 7
74703: PUSH
74704: LD_VAR 0 6
74708: PUSH
74709: LD_INT 1
74711: ARRAY
74712: PUSH
74713: LD_VAR 0 5
74717: ARRAY
74718: PUSH
74719: LD_VAR 0 6
74723: PUSH
74724: LD_INT 2
74726: ARRAY
74727: PUSH
74728: LD_VAR 0 5
74732: ARRAY
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74738: LD_VAR 0 7
74742: PUSH
74743: LD_INT 1
74745: ARRAY
74746: PPUSH
74747: LD_VAR 0 7
74751: PUSH
74752: LD_INT 2
74754: ARRAY
74755: PPUSH
74756: CALL_OW 428
74760: PUSH
74761: LD_INT 0
74763: EQUAL
74764: IFFALSE 74817
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74766: LD_VAR 0 1
74770: PPUSH
74771: LD_VAR 0 7
74775: PUSH
74776: LD_INT 1
74778: ARRAY
74779: PPUSH
74780: LD_VAR 0 7
74784: PUSH
74785: LD_INT 2
74787: ARRAY
74788: PPUSH
74789: LD_VAR 0 3
74793: PPUSH
74794: CALL_OW 48
// result := IsPlaced ( unit ) ;
74798: LD_ADDR_VAR 0 4
74802: PUSH
74803: LD_VAR 0 1
74807: PPUSH
74808: CALL_OW 305
74812: ST_TO_ADDR
// exit ;
74813: POP
74814: POP
74815: GO 74821
// end ; end ;
74817: GO 74696
74819: POP
74820: POP
// end ;
74821: LD_VAR 0 4
74825: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74826: LD_INT 0
74828: PPUSH
74829: PPUSH
74830: PPUSH
// if not side or side > 8 then
74831: LD_VAR 0 1
74835: NOT
74836: PUSH
74837: LD_VAR 0 1
74841: PUSH
74842: LD_INT 8
74844: GREATER
74845: OR
74846: IFFALSE 74850
// exit ;
74848: GO 75037
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74850: LD_ADDR_VAR 0 4
74854: PUSH
74855: LD_INT 22
74857: PUSH
74858: LD_VAR 0 1
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: PUSH
74867: LD_INT 21
74869: PUSH
74870: LD_INT 3
74872: PUSH
74873: EMPTY
74874: LIST
74875: LIST
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PPUSH
74881: CALL_OW 69
74885: ST_TO_ADDR
// if not tmp then
74886: LD_VAR 0 4
74890: NOT
74891: IFFALSE 74895
// exit ;
74893: GO 75037
// enable_addtolog := true ;
74895: LD_ADDR_OWVAR 81
74899: PUSH
74900: LD_INT 1
74902: ST_TO_ADDR
// AddToLog ( [ ) ;
74903: LD_STRING [
74905: PPUSH
74906: CALL_OW 561
// for i in tmp do
74910: LD_ADDR_VAR 0 3
74914: PUSH
74915: LD_VAR 0 4
74919: PUSH
74920: FOR_IN
74921: IFFALSE 75028
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74923: LD_STRING [
74925: PUSH
74926: LD_VAR 0 3
74930: PPUSH
74931: CALL_OW 266
74935: STR
74936: PUSH
74937: LD_STRING , 
74939: STR
74940: PUSH
74941: LD_VAR 0 3
74945: PPUSH
74946: CALL_OW 250
74950: STR
74951: PUSH
74952: LD_STRING , 
74954: STR
74955: PUSH
74956: LD_VAR 0 3
74960: PPUSH
74961: CALL_OW 251
74965: STR
74966: PUSH
74967: LD_STRING , 
74969: STR
74970: PUSH
74971: LD_VAR 0 3
74975: PPUSH
74976: CALL_OW 254
74980: STR
74981: PUSH
74982: LD_STRING , 
74984: STR
74985: PUSH
74986: LD_VAR 0 3
74990: PPUSH
74991: LD_INT 1
74993: PPUSH
74994: CALL_OW 268
74998: STR
74999: PUSH
75000: LD_STRING , 
75002: STR
75003: PUSH
75004: LD_VAR 0 3
75008: PPUSH
75009: LD_INT 2
75011: PPUSH
75012: CALL_OW 268
75016: STR
75017: PUSH
75018: LD_STRING ],
75020: STR
75021: PPUSH
75022: CALL_OW 561
// end ;
75026: GO 74920
75028: POP
75029: POP
// AddToLog ( ]; ) ;
75030: LD_STRING ];
75032: PPUSH
75033: CALL_OW 561
// end ;
75037: LD_VAR 0 2
75041: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75042: LD_INT 0
75044: PPUSH
75045: PPUSH
75046: PPUSH
75047: PPUSH
75048: PPUSH
// if not area or not rate or not max then
75049: LD_VAR 0 1
75053: NOT
75054: PUSH
75055: LD_VAR 0 2
75059: NOT
75060: OR
75061: PUSH
75062: LD_VAR 0 4
75066: NOT
75067: OR
75068: IFFALSE 75072
// exit ;
75070: GO 75261
// while 1 do
75072: LD_INT 1
75074: IFFALSE 75261
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75076: LD_ADDR_VAR 0 9
75080: PUSH
75081: LD_VAR 0 1
75085: PPUSH
75086: LD_INT 1
75088: PPUSH
75089: CALL_OW 287
75093: PUSH
75094: LD_INT 10
75096: MUL
75097: ST_TO_ADDR
// r := rate / 10 ;
75098: LD_ADDR_VAR 0 7
75102: PUSH
75103: LD_VAR 0 2
75107: PUSH
75108: LD_INT 10
75110: DIVREAL
75111: ST_TO_ADDR
// time := 1 1$00 ;
75112: LD_ADDR_VAR 0 8
75116: PUSH
75117: LD_INT 2100
75119: ST_TO_ADDR
// if amount < min then
75120: LD_VAR 0 9
75124: PUSH
75125: LD_VAR 0 3
75129: LESS
75130: IFFALSE 75148
// r := r * 2 else
75132: LD_ADDR_VAR 0 7
75136: PUSH
75137: LD_VAR 0 7
75141: PUSH
75142: LD_INT 2
75144: MUL
75145: ST_TO_ADDR
75146: GO 75174
// if amount > max then
75148: LD_VAR 0 9
75152: PUSH
75153: LD_VAR 0 4
75157: GREATER
75158: IFFALSE 75174
// r := r / 2 ;
75160: LD_ADDR_VAR 0 7
75164: PUSH
75165: LD_VAR 0 7
75169: PUSH
75170: LD_INT 2
75172: DIVREAL
75173: ST_TO_ADDR
// time := time / r ;
75174: LD_ADDR_VAR 0 8
75178: PUSH
75179: LD_VAR 0 8
75183: PUSH
75184: LD_VAR 0 7
75188: DIVREAL
75189: ST_TO_ADDR
// if time < 0 then
75190: LD_VAR 0 8
75194: PUSH
75195: LD_INT 0
75197: LESS
75198: IFFALSE 75215
// time := time * - 1 ;
75200: LD_ADDR_VAR 0 8
75204: PUSH
75205: LD_VAR 0 8
75209: PUSH
75210: LD_INT 1
75212: NEG
75213: MUL
75214: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75215: LD_VAR 0 8
75219: PUSH
75220: LD_INT 35
75222: PPUSH
75223: LD_INT 875
75225: PPUSH
75226: CALL_OW 12
75230: PLUS
75231: PPUSH
75232: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75236: LD_INT 1
75238: PPUSH
75239: LD_INT 5
75241: PPUSH
75242: CALL_OW 12
75246: PPUSH
75247: LD_VAR 0 1
75251: PPUSH
75252: LD_INT 1
75254: PPUSH
75255: CALL_OW 55
// end ;
75259: GO 75072
// end ;
75261: LD_VAR 0 5
75265: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75266: LD_INT 0
75268: PPUSH
75269: PPUSH
75270: PPUSH
75271: PPUSH
75272: PPUSH
75273: PPUSH
75274: PPUSH
75275: PPUSH
// if not turrets or not factories then
75276: LD_VAR 0 1
75280: NOT
75281: PUSH
75282: LD_VAR 0 2
75286: NOT
75287: OR
75288: IFFALSE 75292
// exit ;
75290: GO 75599
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75292: LD_ADDR_VAR 0 10
75296: PUSH
75297: LD_INT 5
75299: PUSH
75300: LD_INT 6
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PUSH
75307: LD_INT 2
75309: PUSH
75310: LD_INT 4
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: PUSH
75317: LD_INT 3
75319: PUSH
75320: LD_INT 5
75322: PUSH
75323: EMPTY
75324: LIST
75325: LIST
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: LIST
75331: PUSH
75332: LD_INT 24
75334: PUSH
75335: LD_INT 25
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: LD_INT 23
75344: PUSH
75345: LD_INT 27
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PUSH
75352: EMPTY
75353: LIST
75354: LIST
75355: PUSH
75356: LD_INT 42
75358: PUSH
75359: LD_INT 43
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: PUSH
75366: LD_INT 44
75368: PUSH
75369: LD_INT 46
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PUSH
75376: LD_INT 45
75378: PUSH
75379: LD_INT 47
75381: PUSH
75382: EMPTY
75383: LIST
75384: LIST
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: LIST
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: LIST
75395: ST_TO_ADDR
// result := [ ] ;
75396: LD_ADDR_VAR 0 3
75400: PUSH
75401: EMPTY
75402: ST_TO_ADDR
// for i in turrets do
75403: LD_ADDR_VAR 0 4
75407: PUSH
75408: LD_VAR 0 1
75412: PUSH
75413: FOR_IN
75414: IFFALSE 75597
// begin nat := GetNation ( i ) ;
75416: LD_ADDR_VAR 0 7
75420: PUSH
75421: LD_VAR 0 4
75425: PPUSH
75426: CALL_OW 248
75430: ST_TO_ADDR
// weapon := 0 ;
75431: LD_ADDR_VAR 0 8
75435: PUSH
75436: LD_INT 0
75438: ST_TO_ADDR
// if not nat then
75439: LD_VAR 0 7
75443: NOT
75444: IFFALSE 75448
// continue ;
75446: GO 75413
// for j in list [ nat ] do
75448: LD_ADDR_VAR 0 5
75452: PUSH
75453: LD_VAR 0 10
75457: PUSH
75458: LD_VAR 0 7
75462: ARRAY
75463: PUSH
75464: FOR_IN
75465: IFFALSE 75506
// if GetBWeapon ( i ) = j [ 1 ] then
75467: LD_VAR 0 4
75471: PPUSH
75472: CALL_OW 269
75476: PUSH
75477: LD_VAR 0 5
75481: PUSH
75482: LD_INT 1
75484: ARRAY
75485: EQUAL
75486: IFFALSE 75504
// begin weapon := j [ 2 ] ;
75488: LD_ADDR_VAR 0 8
75492: PUSH
75493: LD_VAR 0 5
75497: PUSH
75498: LD_INT 2
75500: ARRAY
75501: ST_TO_ADDR
// break ;
75502: GO 75506
// end ;
75504: GO 75464
75506: POP
75507: POP
// if not weapon then
75508: LD_VAR 0 8
75512: NOT
75513: IFFALSE 75517
// continue ;
75515: GO 75413
// for k in factories do
75517: LD_ADDR_VAR 0 6
75521: PUSH
75522: LD_VAR 0 2
75526: PUSH
75527: FOR_IN
75528: IFFALSE 75593
// begin weapons := AvailableWeaponList ( k ) ;
75530: LD_ADDR_VAR 0 9
75534: PUSH
75535: LD_VAR 0 6
75539: PPUSH
75540: CALL_OW 478
75544: ST_TO_ADDR
// if not weapons then
75545: LD_VAR 0 9
75549: NOT
75550: IFFALSE 75554
// continue ;
75552: GO 75527
// if weapon in weapons then
75554: LD_VAR 0 8
75558: PUSH
75559: LD_VAR 0 9
75563: IN
75564: IFFALSE 75591
// begin result := [ i , weapon ] ;
75566: LD_ADDR_VAR 0 3
75570: PUSH
75571: LD_VAR 0 4
75575: PUSH
75576: LD_VAR 0 8
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: ST_TO_ADDR
// exit ;
75585: POP
75586: POP
75587: POP
75588: POP
75589: GO 75599
// end ; end ;
75591: GO 75527
75593: POP
75594: POP
// end ;
75595: GO 75413
75597: POP
75598: POP
// end ;
75599: LD_VAR 0 3
75603: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75604: LD_INT 0
75606: PPUSH
// if not side or side > 8 then
75607: LD_VAR 0 3
75611: NOT
75612: PUSH
75613: LD_VAR 0 3
75617: PUSH
75618: LD_INT 8
75620: GREATER
75621: OR
75622: IFFALSE 75626
// exit ;
75624: GO 75685
// if not range then
75626: LD_VAR 0 4
75630: NOT
75631: IFFALSE 75642
// range := - 12 ;
75633: LD_ADDR_VAR 0 4
75637: PUSH
75638: LD_INT 12
75640: NEG
75641: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75642: LD_VAR 0 1
75646: PPUSH
75647: LD_VAR 0 2
75651: PPUSH
75652: LD_VAR 0 3
75656: PPUSH
75657: LD_VAR 0 4
75661: PPUSH
75662: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75666: LD_VAR 0 1
75670: PPUSH
75671: LD_VAR 0 2
75675: PPUSH
75676: LD_VAR 0 3
75680: PPUSH
75681: CALL_OW 331
// end ;
75685: LD_VAR 0 5
75689: RET
// export function Video ( mode ) ; begin
75690: LD_INT 0
75692: PPUSH
// ingame_video = mode ;
75693: LD_ADDR_OWVAR 52
75697: PUSH
75698: LD_VAR 0 1
75702: ST_TO_ADDR
// interface_hidden = mode ;
75703: LD_ADDR_OWVAR 54
75707: PUSH
75708: LD_VAR 0 1
75712: ST_TO_ADDR
// end ;
75713: LD_VAR 0 2
75717: RET
// export function Join ( array , element ) ; begin
75718: LD_INT 0
75720: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75721: LD_ADDR_VAR 0 3
75725: PUSH
75726: LD_VAR 0 1
75730: PPUSH
75731: LD_VAR 0 1
75735: PUSH
75736: LD_INT 1
75738: PLUS
75739: PPUSH
75740: LD_VAR 0 2
75744: PPUSH
75745: CALL_OW 1
75749: ST_TO_ADDR
// end ;
75750: LD_VAR 0 3
75754: RET
// export function JoinUnion ( array , element ) ; begin
75755: LD_INT 0
75757: PPUSH
// result := array union element ;
75758: LD_ADDR_VAR 0 3
75762: PUSH
75763: LD_VAR 0 1
75767: PUSH
75768: LD_VAR 0 2
75772: UNION
75773: ST_TO_ADDR
// end ;
75774: LD_VAR 0 3
75778: RET
// export function GetBehemoths ( side ) ; begin
75779: LD_INT 0
75781: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75782: LD_ADDR_VAR 0 2
75786: PUSH
75787: LD_INT 22
75789: PUSH
75790: LD_VAR 0 1
75794: PUSH
75795: EMPTY
75796: LIST
75797: LIST
75798: PUSH
75799: LD_INT 31
75801: PUSH
75802: LD_INT 25
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: PUSH
75809: EMPTY
75810: LIST
75811: LIST
75812: PPUSH
75813: CALL_OW 69
75817: ST_TO_ADDR
// end ;
75818: LD_VAR 0 2
75822: RET
// export function Shuffle ( array ) ; var i , index ; begin
75823: LD_INT 0
75825: PPUSH
75826: PPUSH
75827: PPUSH
// result := [ ] ;
75828: LD_ADDR_VAR 0 2
75832: PUSH
75833: EMPTY
75834: ST_TO_ADDR
// if not array then
75835: LD_VAR 0 1
75839: NOT
75840: IFFALSE 75844
// exit ;
75842: GO 75943
// Randomize ;
75844: CALL_OW 10
// for i = array downto 1 do
75848: LD_ADDR_VAR 0 3
75852: PUSH
75853: DOUBLE
75854: LD_VAR 0 1
75858: INC
75859: ST_TO_ADDR
75860: LD_INT 1
75862: PUSH
75863: FOR_DOWNTO
75864: IFFALSE 75941
// begin index := rand ( 1 , array ) ;
75866: LD_ADDR_VAR 0 4
75870: PUSH
75871: LD_INT 1
75873: PPUSH
75874: LD_VAR 0 1
75878: PPUSH
75879: CALL_OW 12
75883: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75884: LD_ADDR_VAR 0 2
75888: PUSH
75889: LD_VAR 0 2
75893: PPUSH
75894: LD_VAR 0 2
75898: PUSH
75899: LD_INT 1
75901: PLUS
75902: PPUSH
75903: LD_VAR 0 1
75907: PUSH
75908: LD_VAR 0 4
75912: ARRAY
75913: PPUSH
75914: CALL_OW 2
75918: ST_TO_ADDR
// array := Delete ( array , index ) ;
75919: LD_ADDR_VAR 0 1
75923: PUSH
75924: LD_VAR 0 1
75928: PPUSH
75929: LD_VAR 0 4
75933: PPUSH
75934: CALL_OW 3
75938: ST_TO_ADDR
// end ;
75939: GO 75863
75941: POP
75942: POP
// end ;
75943: LD_VAR 0 2
75947: RET
// export function GetBaseMaterials ( base ) ; begin
75948: LD_INT 0
75950: PPUSH
// result := [ 0 , 0 , 0 ] ;
75951: LD_ADDR_VAR 0 2
75955: PUSH
75956: LD_INT 0
75958: PUSH
75959: LD_INT 0
75961: PUSH
75962: LD_INT 0
75964: PUSH
75965: EMPTY
75966: LIST
75967: LIST
75968: LIST
75969: ST_TO_ADDR
// if not base then
75970: LD_VAR 0 1
75974: NOT
75975: IFFALSE 75979
// exit ;
75977: GO 76028
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75979: LD_ADDR_VAR 0 2
75983: PUSH
75984: LD_VAR 0 1
75988: PPUSH
75989: LD_INT 1
75991: PPUSH
75992: CALL_OW 275
75996: PUSH
75997: LD_VAR 0 1
76001: PPUSH
76002: LD_INT 2
76004: PPUSH
76005: CALL_OW 275
76009: PUSH
76010: LD_VAR 0 1
76014: PPUSH
76015: LD_INT 3
76017: PPUSH
76018: CALL_OW 275
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: LIST
76027: ST_TO_ADDR
// end ;
76028: LD_VAR 0 2
76032: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76033: LD_INT 0
76035: PPUSH
76036: PPUSH
// result := array ;
76037: LD_ADDR_VAR 0 3
76041: PUSH
76042: LD_VAR 0 1
76046: ST_TO_ADDR
// if size >= result then
76047: LD_VAR 0 2
76051: PUSH
76052: LD_VAR 0 3
76056: GREATEREQUAL
76057: IFFALSE 76061
// exit ;
76059: GO 76111
// if size then
76061: LD_VAR 0 2
76065: IFFALSE 76111
// for i := array downto size do
76067: LD_ADDR_VAR 0 4
76071: PUSH
76072: DOUBLE
76073: LD_VAR 0 1
76077: INC
76078: ST_TO_ADDR
76079: LD_VAR 0 2
76083: PUSH
76084: FOR_DOWNTO
76085: IFFALSE 76109
// result := Delete ( result , result ) ;
76087: LD_ADDR_VAR 0 3
76091: PUSH
76092: LD_VAR 0 3
76096: PPUSH
76097: LD_VAR 0 3
76101: PPUSH
76102: CALL_OW 3
76106: ST_TO_ADDR
76107: GO 76084
76109: POP
76110: POP
// end ;
76111: LD_VAR 0 3
76115: RET
// export function ComExit ( unit ) ; var tmp ; begin
76116: LD_INT 0
76118: PPUSH
76119: PPUSH
// if not IsInUnit ( unit ) then
76120: LD_VAR 0 1
76124: PPUSH
76125: CALL_OW 310
76129: NOT
76130: IFFALSE 76134
// exit ;
76132: GO 76194
// tmp := IsInUnit ( unit ) ;
76134: LD_ADDR_VAR 0 3
76138: PUSH
76139: LD_VAR 0 1
76143: PPUSH
76144: CALL_OW 310
76148: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76149: LD_VAR 0 3
76153: PPUSH
76154: CALL_OW 247
76158: PUSH
76159: LD_INT 2
76161: EQUAL
76162: IFFALSE 76175
// ComExitVehicle ( unit ) else
76164: LD_VAR 0 1
76168: PPUSH
76169: CALL_OW 121
76173: GO 76184
// ComExitBuilding ( unit ) ;
76175: LD_VAR 0 1
76179: PPUSH
76180: CALL_OW 122
// result := tmp ;
76184: LD_ADDR_VAR 0 2
76188: PUSH
76189: LD_VAR 0 3
76193: ST_TO_ADDR
// end ;
76194: LD_VAR 0 2
76198: RET
// export function ComExitAll ( units ) ; var i ; begin
76199: LD_INT 0
76201: PPUSH
76202: PPUSH
// if not units then
76203: LD_VAR 0 1
76207: NOT
76208: IFFALSE 76212
// exit ;
76210: GO 76238
// for i in units do
76212: LD_ADDR_VAR 0 3
76216: PUSH
76217: LD_VAR 0 1
76221: PUSH
76222: FOR_IN
76223: IFFALSE 76236
// ComExit ( i ) ;
76225: LD_VAR 0 3
76229: PPUSH
76230: CALL 76116 0 1
76234: GO 76222
76236: POP
76237: POP
// end ;
76238: LD_VAR 0 2
76242: RET
// export function ResetHc ; begin
76243: LD_INT 0
76245: PPUSH
// InitHc ;
76246: CALL_OW 19
// hc_importance := 0 ;
76250: LD_ADDR_OWVAR 32
76254: PUSH
76255: LD_INT 0
76257: ST_TO_ADDR
// end ;
76258: LD_VAR 0 1
76262: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76263: LD_INT 0
76265: PPUSH
76266: PPUSH
76267: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76268: LD_ADDR_VAR 0 6
76272: PUSH
76273: LD_VAR 0 1
76277: PUSH
76278: LD_VAR 0 3
76282: PLUS
76283: PUSH
76284: LD_INT 2
76286: DIV
76287: ST_TO_ADDR
// if _x < 0 then
76288: LD_VAR 0 6
76292: PUSH
76293: LD_INT 0
76295: LESS
76296: IFFALSE 76313
// _x := _x * - 1 ;
76298: LD_ADDR_VAR 0 6
76302: PUSH
76303: LD_VAR 0 6
76307: PUSH
76308: LD_INT 1
76310: NEG
76311: MUL
76312: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76313: LD_ADDR_VAR 0 7
76317: PUSH
76318: LD_VAR 0 2
76322: PUSH
76323: LD_VAR 0 4
76327: PLUS
76328: PUSH
76329: LD_INT 2
76331: DIV
76332: ST_TO_ADDR
// if _y < 0 then
76333: LD_VAR 0 7
76337: PUSH
76338: LD_INT 0
76340: LESS
76341: IFFALSE 76358
// _y := _y * - 1 ;
76343: LD_ADDR_VAR 0 7
76347: PUSH
76348: LD_VAR 0 7
76352: PUSH
76353: LD_INT 1
76355: NEG
76356: MUL
76357: ST_TO_ADDR
// result := [ _x , _y ] ;
76358: LD_ADDR_VAR 0 5
76362: PUSH
76363: LD_VAR 0 6
76367: PUSH
76368: LD_VAR 0 7
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: ST_TO_ADDR
// end ;
76377: LD_VAR 0 5
76381: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76382: LD_INT 0
76384: PPUSH
76385: PPUSH
76386: PPUSH
76387: PPUSH
// task := GetTaskList ( unit ) ;
76388: LD_ADDR_VAR 0 7
76392: PUSH
76393: LD_VAR 0 1
76397: PPUSH
76398: CALL_OW 437
76402: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76403: LD_VAR 0 7
76407: NOT
76408: PUSH
76409: LD_VAR 0 1
76413: PPUSH
76414: LD_VAR 0 2
76418: PPUSH
76419: CALL_OW 308
76423: NOT
76424: AND
76425: IFFALSE 76429
// exit ;
76427: GO 76547
// if IsInArea ( unit , area ) then
76429: LD_VAR 0 1
76433: PPUSH
76434: LD_VAR 0 2
76438: PPUSH
76439: CALL_OW 308
76443: IFFALSE 76461
// begin ComMoveToArea ( unit , goAway ) ;
76445: LD_VAR 0 1
76449: PPUSH
76450: LD_VAR 0 3
76454: PPUSH
76455: CALL_OW 113
// exit ;
76459: GO 76547
// end ; if task [ 1 ] [ 1 ] <> M then
76461: LD_VAR 0 7
76465: PUSH
76466: LD_INT 1
76468: ARRAY
76469: PUSH
76470: LD_INT 1
76472: ARRAY
76473: PUSH
76474: LD_STRING M
76476: NONEQUAL
76477: IFFALSE 76481
// exit ;
76479: GO 76547
// x := task [ 1 ] [ 2 ] ;
76481: LD_ADDR_VAR 0 5
76485: PUSH
76486: LD_VAR 0 7
76490: PUSH
76491: LD_INT 1
76493: ARRAY
76494: PUSH
76495: LD_INT 2
76497: ARRAY
76498: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76499: LD_ADDR_VAR 0 6
76503: PUSH
76504: LD_VAR 0 7
76508: PUSH
76509: LD_INT 1
76511: ARRAY
76512: PUSH
76513: LD_INT 3
76515: ARRAY
76516: ST_TO_ADDR
// if InArea ( x , y , area ) then
76517: LD_VAR 0 5
76521: PPUSH
76522: LD_VAR 0 6
76526: PPUSH
76527: LD_VAR 0 2
76531: PPUSH
76532: CALL_OW 309
76536: IFFALSE 76547
// ComStop ( unit ) ;
76538: LD_VAR 0 1
76542: PPUSH
76543: CALL_OW 141
// end ;
76547: LD_VAR 0 4
76551: RET
// export function Abs ( value ) ; begin
76552: LD_INT 0
76554: PPUSH
// result := value ;
76555: LD_ADDR_VAR 0 2
76559: PUSH
76560: LD_VAR 0 1
76564: ST_TO_ADDR
// if value < 0 then
76565: LD_VAR 0 1
76569: PUSH
76570: LD_INT 0
76572: LESS
76573: IFFALSE 76590
// result := value * - 1 ;
76575: LD_ADDR_VAR 0 2
76579: PUSH
76580: LD_VAR 0 1
76584: PUSH
76585: LD_INT 1
76587: NEG
76588: MUL
76589: ST_TO_ADDR
// end ;
76590: LD_VAR 0 2
76594: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76595: LD_INT 0
76597: PPUSH
76598: PPUSH
76599: PPUSH
76600: PPUSH
76601: PPUSH
76602: PPUSH
76603: PPUSH
76604: PPUSH
// if not unit or not building then
76605: LD_VAR 0 1
76609: NOT
76610: PUSH
76611: LD_VAR 0 2
76615: NOT
76616: OR
76617: IFFALSE 76621
// exit ;
76619: GO 76847
// x := GetX ( building ) ;
76621: LD_ADDR_VAR 0 4
76625: PUSH
76626: LD_VAR 0 2
76630: PPUSH
76631: CALL_OW 250
76635: ST_TO_ADDR
// y := GetY ( building ) ;
76636: LD_ADDR_VAR 0 6
76640: PUSH
76641: LD_VAR 0 2
76645: PPUSH
76646: CALL_OW 251
76650: ST_TO_ADDR
// d := GetDir ( building ) ;
76651: LD_ADDR_VAR 0 8
76655: PUSH
76656: LD_VAR 0 2
76660: PPUSH
76661: CALL_OW 254
76665: ST_TO_ADDR
// r := 4 ;
76666: LD_ADDR_VAR 0 9
76670: PUSH
76671: LD_INT 4
76673: ST_TO_ADDR
// for i := 1 to 5 do
76674: LD_ADDR_VAR 0 10
76678: PUSH
76679: DOUBLE
76680: LD_INT 1
76682: DEC
76683: ST_TO_ADDR
76684: LD_INT 5
76686: PUSH
76687: FOR_TO
76688: IFFALSE 76845
// begin _x := ShiftX ( x , d , r + i ) ;
76690: LD_ADDR_VAR 0 5
76694: PUSH
76695: LD_VAR 0 4
76699: PPUSH
76700: LD_VAR 0 8
76704: PPUSH
76705: LD_VAR 0 9
76709: PUSH
76710: LD_VAR 0 10
76714: PLUS
76715: PPUSH
76716: CALL_OW 272
76720: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76721: LD_ADDR_VAR 0 7
76725: PUSH
76726: LD_VAR 0 6
76730: PPUSH
76731: LD_VAR 0 8
76735: PPUSH
76736: LD_VAR 0 9
76740: PUSH
76741: LD_VAR 0 10
76745: PLUS
76746: PPUSH
76747: CALL_OW 273
76751: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76752: LD_VAR 0 5
76756: PPUSH
76757: LD_VAR 0 7
76761: PPUSH
76762: CALL_OW 488
76766: PUSH
76767: LD_VAR 0 5
76771: PPUSH
76772: LD_VAR 0 7
76776: PPUSH
76777: CALL_OW 428
76781: PPUSH
76782: CALL_OW 247
76786: PUSH
76787: LD_INT 3
76789: PUSH
76790: LD_INT 2
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: IN
76797: NOT
76798: AND
76799: IFFALSE 76843
// begin ComMoveXY ( unit , _x , _y ) ;
76801: LD_VAR 0 1
76805: PPUSH
76806: LD_VAR 0 5
76810: PPUSH
76811: LD_VAR 0 7
76815: PPUSH
76816: CALL_OW 111
// result := [ _x , _y ] ;
76820: LD_ADDR_VAR 0 3
76824: PUSH
76825: LD_VAR 0 5
76829: PUSH
76830: LD_VAR 0 7
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: ST_TO_ADDR
// exit ;
76839: POP
76840: POP
76841: GO 76847
// end ; end ;
76843: GO 76687
76845: POP
76846: POP
// end ;
76847: LD_VAR 0 3
76851: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76852: LD_INT 0
76854: PPUSH
76855: PPUSH
76856: PPUSH
// result := 0 ;
76857: LD_ADDR_VAR 0 3
76861: PUSH
76862: LD_INT 0
76864: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76865: LD_VAR 0 1
76869: PUSH
76870: LD_INT 0
76872: LESS
76873: PUSH
76874: LD_VAR 0 1
76878: PUSH
76879: LD_INT 8
76881: GREATER
76882: OR
76883: PUSH
76884: LD_VAR 0 2
76888: PUSH
76889: LD_INT 0
76891: LESS
76892: OR
76893: PUSH
76894: LD_VAR 0 2
76898: PUSH
76899: LD_INT 8
76901: GREATER
76902: OR
76903: IFFALSE 76907
// exit ;
76905: GO 76982
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76907: LD_ADDR_VAR 0 4
76911: PUSH
76912: LD_INT 22
76914: PUSH
76915: LD_VAR 0 2
76919: PUSH
76920: EMPTY
76921: LIST
76922: LIST
76923: PPUSH
76924: CALL_OW 69
76928: PUSH
76929: FOR_IN
76930: IFFALSE 76980
// begin un := UnitShoot ( i ) ;
76932: LD_ADDR_VAR 0 5
76936: PUSH
76937: LD_VAR 0 4
76941: PPUSH
76942: CALL_OW 504
76946: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76947: LD_VAR 0 5
76951: PPUSH
76952: CALL_OW 255
76956: PUSH
76957: LD_VAR 0 1
76961: EQUAL
76962: IFFALSE 76978
// begin result := un ;
76964: LD_ADDR_VAR 0 3
76968: PUSH
76969: LD_VAR 0 5
76973: ST_TO_ADDR
// exit ;
76974: POP
76975: POP
76976: GO 76982
// end ; end ;
76978: GO 76929
76980: POP
76981: POP
// end ;
76982: LD_VAR 0 3
76986: RET
// export function GetCargoBay ( units ) ; begin
76987: LD_INT 0
76989: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76990: LD_ADDR_VAR 0 2
76994: PUSH
76995: LD_VAR 0 1
76999: PPUSH
77000: LD_INT 2
77002: PUSH
77003: LD_INT 34
77005: PUSH
77006: LD_INT 12
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: LD_INT 34
77015: PUSH
77016: LD_INT 51
77018: PUSH
77019: EMPTY
77020: LIST
77021: LIST
77022: PUSH
77023: LD_INT 34
77025: PUSH
77026: LD_INT 32
77028: PUSH
77029: EMPTY
77030: LIST
77031: LIST
77032: PUSH
77033: LD_INT 34
77035: PUSH
77036: LD_INT 89
77038: PUSH
77039: EMPTY
77040: LIST
77041: LIST
77042: PUSH
77043: EMPTY
77044: LIST
77045: LIST
77046: LIST
77047: LIST
77048: LIST
77049: PPUSH
77050: CALL_OW 72
77054: ST_TO_ADDR
// end ;
77055: LD_VAR 0 2
77059: RET
// export function Negate ( value ) ; begin
77060: LD_INT 0
77062: PPUSH
// result := not value ;
77063: LD_ADDR_VAR 0 2
77067: PUSH
77068: LD_VAR 0 1
77072: NOT
77073: ST_TO_ADDR
// end ;
77074: LD_VAR 0 2
77078: RET
// export function Inc ( value ) ; begin
77079: LD_INT 0
77081: PPUSH
// result := value + 1 ;
77082: LD_ADDR_VAR 0 2
77086: PUSH
77087: LD_VAR 0 1
77091: PUSH
77092: LD_INT 1
77094: PLUS
77095: ST_TO_ADDR
// end ;
77096: LD_VAR 0 2
77100: RET
// export function Dec ( value ) ; begin
77101: LD_INT 0
77103: PPUSH
// result := value - 1 ;
77104: LD_ADDR_VAR 0 2
77108: PUSH
77109: LD_VAR 0 1
77113: PUSH
77114: LD_INT 1
77116: MINUS
77117: ST_TO_ADDR
// end ;
77118: LD_VAR 0 2
77122: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77123: LD_INT 0
77125: PPUSH
77126: PPUSH
77127: PPUSH
77128: PPUSH
77129: PPUSH
77130: PPUSH
77131: PPUSH
77132: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77133: LD_VAR 0 1
77137: PPUSH
77138: LD_VAR 0 2
77142: PPUSH
77143: CALL_OW 488
77147: NOT
77148: PUSH
77149: LD_VAR 0 3
77153: PPUSH
77154: LD_VAR 0 4
77158: PPUSH
77159: CALL_OW 488
77163: NOT
77164: OR
77165: IFFALSE 77178
// begin result := - 1 ;
77167: LD_ADDR_VAR 0 5
77171: PUSH
77172: LD_INT 1
77174: NEG
77175: ST_TO_ADDR
// exit ;
77176: GO 77413
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77178: LD_ADDR_VAR 0 12
77182: PUSH
77183: LD_VAR 0 1
77187: PPUSH
77188: LD_VAR 0 2
77192: PPUSH
77193: LD_VAR 0 3
77197: PPUSH
77198: LD_VAR 0 4
77202: PPUSH
77203: CALL 76263 0 4
77207: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77208: LD_ADDR_VAR 0 11
77212: PUSH
77213: LD_VAR 0 1
77217: PPUSH
77218: LD_VAR 0 2
77222: PPUSH
77223: LD_VAR 0 12
77227: PUSH
77228: LD_INT 1
77230: ARRAY
77231: PPUSH
77232: LD_VAR 0 12
77236: PUSH
77237: LD_INT 2
77239: ARRAY
77240: PPUSH
77241: CALL_OW 298
77245: ST_TO_ADDR
// distance := 9999 ;
77246: LD_ADDR_VAR 0 10
77250: PUSH
77251: LD_INT 9999
77253: ST_TO_ADDR
// for i := 0 to 5 do
77254: LD_ADDR_VAR 0 6
77258: PUSH
77259: DOUBLE
77260: LD_INT 0
77262: DEC
77263: ST_TO_ADDR
77264: LD_INT 5
77266: PUSH
77267: FOR_TO
77268: IFFALSE 77411
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77270: LD_ADDR_VAR 0 7
77274: PUSH
77275: LD_VAR 0 1
77279: PPUSH
77280: LD_VAR 0 6
77284: PPUSH
77285: LD_VAR 0 11
77289: PPUSH
77290: CALL_OW 272
77294: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77295: LD_ADDR_VAR 0 8
77299: PUSH
77300: LD_VAR 0 2
77304: PPUSH
77305: LD_VAR 0 6
77309: PPUSH
77310: LD_VAR 0 11
77314: PPUSH
77315: CALL_OW 273
77319: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77320: LD_VAR 0 7
77324: PPUSH
77325: LD_VAR 0 8
77329: PPUSH
77330: CALL_OW 488
77334: NOT
77335: IFFALSE 77339
// continue ;
77337: GO 77267
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77339: LD_ADDR_VAR 0 9
77343: PUSH
77344: LD_VAR 0 12
77348: PUSH
77349: LD_INT 1
77351: ARRAY
77352: PPUSH
77353: LD_VAR 0 12
77357: PUSH
77358: LD_INT 2
77360: ARRAY
77361: PPUSH
77362: LD_VAR 0 7
77366: PPUSH
77367: LD_VAR 0 8
77371: PPUSH
77372: CALL_OW 298
77376: ST_TO_ADDR
// if tmp < distance then
77377: LD_VAR 0 9
77381: PUSH
77382: LD_VAR 0 10
77386: LESS
77387: IFFALSE 77409
// begin result := i ;
77389: LD_ADDR_VAR 0 5
77393: PUSH
77394: LD_VAR 0 6
77398: ST_TO_ADDR
// distance := tmp ;
77399: LD_ADDR_VAR 0 10
77403: PUSH
77404: LD_VAR 0 9
77408: ST_TO_ADDR
// end ; end ;
77409: GO 77267
77411: POP
77412: POP
// end ;
77413: LD_VAR 0 5
77417: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77418: LD_INT 0
77420: PPUSH
77421: PPUSH
// if not driver or not IsInUnit ( driver ) then
77422: LD_VAR 0 1
77426: NOT
77427: PUSH
77428: LD_VAR 0 1
77432: PPUSH
77433: CALL_OW 310
77437: NOT
77438: OR
77439: IFFALSE 77443
// exit ;
77441: GO 77533
// vehicle := IsInUnit ( driver ) ;
77443: LD_ADDR_VAR 0 3
77447: PUSH
77448: LD_VAR 0 1
77452: PPUSH
77453: CALL_OW 310
77457: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77458: LD_VAR 0 1
77462: PPUSH
77463: LD_STRING \
77465: PUSH
77466: LD_INT 0
77468: PUSH
77469: LD_INT 0
77471: PUSH
77472: LD_INT 0
77474: PUSH
77475: LD_INT 0
77477: PUSH
77478: LD_INT 0
77480: PUSH
77481: LD_INT 0
77483: PUSH
77484: EMPTY
77485: LIST
77486: LIST
77487: LIST
77488: LIST
77489: LIST
77490: LIST
77491: LIST
77492: PUSH
77493: LD_STRING E
77495: PUSH
77496: LD_INT 0
77498: PUSH
77499: LD_INT 0
77501: PUSH
77502: LD_VAR 0 3
77506: PUSH
77507: LD_INT 0
77509: PUSH
77510: LD_INT 0
77512: PUSH
77513: LD_INT 0
77515: PUSH
77516: EMPTY
77517: LIST
77518: LIST
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: PPUSH
77529: CALL_OW 446
// end ;
77533: LD_VAR 0 2
77537: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77538: LD_INT 0
77540: PPUSH
77541: PPUSH
// if not driver or not IsInUnit ( driver ) then
77542: LD_VAR 0 1
77546: NOT
77547: PUSH
77548: LD_VAR 0 1
77552: PPUSH
77553: CALL_OW 310
77557: NOT
77558: OR
77559: IFFALSE 77563
// exit ;
77561: GO 77653
// vehicle := IsInUnit ( driver ) ;
77563: LD_ADDR_VAR 0 3
77567: PUSH
77568: LD_VAR 0 1
77572: PPUSH
77573: CALL_OW 310
77577: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77578: LD_VAR 0 1
77582: PPUSH
77583: LD_STRING \
77585: PUSH
77586: LD_INT 0
77588: PUSH
77589: LD_INT 0
77591: PUSH
77592: LD_INT 0
77594: PUSH
77595: LD_INT 0
77597: PUSH
77598: LD_INT 0
77600: PUSH
77601: LD_INT 0
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: LIST
77608: LIST
77609: LIST
77610: LIST
77611: LIST
77612: PUSH
77613: LD_STRING E
77615: PUSH
77616: LD_INT 0
77618: PUSH
77619: LD_INT 0
77621: PUSH
77622: LD_VAR 0 3
77626: PUSH
77627: LD_INT 0
77629: PUSH
77630: LD_INT 0
77632: PUSH
77633: LD_INT 0
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: LIST
77640: LIST
77641: LIST
77642: LIST
77643: LIST
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: PPUSH
77649: CALL_OW 447
// end ;
77653: LD_VAR 0 2
77657: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77658: LD_INT 0
77660: PPUSH
77661: PPUSH
77662: PPUSH
// tmp := [ ] ;
77663: LD_ADDR_VAR 0 5
77667: PUSH
77668: EMPTY
77669: ST_TO_ADDR
// for i in units do
77670: LD_ADDR_VAR 0 4
77674: PUSH
77675: LD_VAR 0 1
77679: PUSH
77680: FOR_IN
77681: IFFALSE 77719
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77683: LD_ADDR_VAR 0 5
77687: PUSH
77688: LD_VAR 0 5
77692: PPUSH
77693: LD_VAR 0 5
77697: PUSH
77698: LD_INT 1
77700: PLUS
77701: PPUSH
77702: LD_VAR 0 4
77706: PPUSH
77707: CALL_OW 256
77711: PPUSH
77712: CALL_OW 2
77716: ST_TO_ADDR
77717: GO 77680
77719: POP
77720: POP
// if not tmp then
77721: LD_VAR 0 5
77725: NOT
77726: IFFALSE 77730
// exit ;
77728: GO 77778
// if asc then
77730: LD_VAR 0 2
77734: IFFALSE 77758
// result := SortListByListAsc ( units , tmp ) else
77736: LD_ADDR_VAR 0 3
77740: PUSH
77741: LD_VAR 0 1
77745: PPUSH
77746: LD_VAR 0 5
77750: PPUSH
77751: CALL_OW 76
77755: ST_TO_ADDR
77756: GO 77778
// result := SortListByListDesc ( units , tmp ) ;
77758: LD_ADDR_VAR 0 3
77762: PUSH
77763: LD_VAR 0 1
77767: PPUSH
77768: LD_VAR 0 5
77772: PPUSH
77773: CALL_OW 77
77777: ST_TO_ADDR
// end ;
77778: LD_VAR 0 3
77782: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77783: LD_INT 0
77785: PPUSH
77786: PPUSH
// task := GetTaskList ( mech ) ;
77787: LD_ADDR_VAR 0 4
77791: PUSH
77792: LD_VAR 0 1
77796: PPUSH
77797: CALL_OW 437
77801: ST_TO_ADDR
// if not task then
77802: LD_VAR 0 4
77806: NOT
77807: IFFALSE 77811
// exit ;
77809: GO 77853
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77811: LD_ADDR_VAR 0 3
77815: PUSH
77816: LD_VAR 0 4
77820: PUSH
77821: LD_INT 1
77823: ARRAY
77824: PUSH
77825: LD_INT 1
77827: ARRAY
77828: PUSH
77829: LD_STRING r
77831: EQUAL
77832: PUSH
77833: LD_VAR 0 4
77837: PUSH
77838: LD_INT 1
77840: ARRAY
77841: PUSH
77842: LD_INT 4
77844: ARRAY
77845: PUSH
77846: LD_VAR 0 2
77850: EQUAL
77851: AND
77852: ST_TO_ADDR
// end ;
77853: LD_VAR 0 3
77857: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77858: LD_INT 0
77860: PPUSH
// SetDir ( unit , d ) ;
77861: LD_VAR 0 1
77865: PPUSH
77866: LD_VAR 0 4
77870: PPUSH
77871: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77875: LD_VAR 0 1
77879: PPUSH
77880: LD_VAR 0 2
77884: PPUSH
77885: LD_VAR 0 3
77889: PPUSH
77890: LD_VAR 0 5
77894: PPUSH
77895: CALL_OW 48
// end ;
77899: LD_VAR 0 6
77903: RET
// export function ToNaturalNumber ( number ) ; begin
77904: LD_INT 0
77906: PPUSH
// result := number div 1 ;
77907: LD_ADDR_VAR 0 2
77911: PUSH
77912: LD_VAR 0 1
77916: PUSH
77917: LD_INT 1
77919: DIV
77920: ST_TO_ADDR
// if number < 0 then
77921: LD_VAR 0 1
77925: PUSH
77926: LD_INT 0
77928: LESS
77929: IFFALSE 77939
// result := 0 ;
77931: LD_ADDR_VAR 0 2
77935: PUSH
77936: LD_INT 0
77938: ST_TO_ADDR
// end ;
77939: LD_VAR 0 2
77943: RET
// export function SortByClass ( units , class ) ; var un ; begin
77944: LD_INT 0
77946: PPUSH
77947: PPUSH
// if not units or not class then
77948: LD_VAR 0 1
77952: NOT
77953: PUSH
77954: LD_VAR 0 2
77958: NOT
77959: OR
77960: IFFALSE 77964
// exit ;
77962: GO 78059
// result := [ ] ;
77964: LD_ADDR_VAR 0 3
77968: PUSH
77969: EMPTY
77970: ST_TO_ADDR
// for un in units do
77971: LD_ADDR_VAR 0 4
77975: PUSH
77976: LD_VAR 0 1
77980: PUSH
77981: FOR_IN
77982: IFFALSE 78057
// if GetClass ( un ) = class then
77984: LD_VAR 0 4
77988: PPUSH
77989: CALL_OW 257
77993: PUSH
77994: LD_VAR 0 2
77998: EQUAL
77999: IFFALSE 78026
// result := Insert ( result , 1 , un ) else
78001: LD_ADDR_VAR 0 3
78005: PUSH
78006: LD_VAR 0 3
78010: PPUSH
78011: LD_INT 1
78013: PPUSH
78014: LD_VAR 0 4
78018: PPUSH
78019: CALL_OW 2
78023: ST_TO_ADDR
78024: GO 78055
// result := Replace ( result , result + 1 , un ) ;
78026: LD_ADDR_VAR 0 3
78030: PUSH
78031: LD_VAR 0 3
78035: PPUSH
78036: LD_VAR 0 3
78040: PUSH
78041: LD_INT 1
78043: PLUS
78044: PPUSH
78045: LD_VAR 0 4
78049: PPUSH
78050: CALL_OW 1
78054: ST_TO_ADDR
78055: GO 77981
78057: POP
78058: POP
// end ;
78059: LD_VAR 0 3
78063: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78064: LD_INT 0
78066: PPUSH
78067: PPUSH
78068: PPUSH
78069: PPUSH
78070: PPUSH
78071: PPUSH
78072: PPUSH
// result := [ ] ;
78073: LD_ADDR_VAR 0 4
78077: PUSH
78078: EMPTY
78079: ST_TO_ADDR
// if x - r < 0 then
78080: LD_VAR 0 1
78084: PUSH
78085: LD_VAR 0 3
78089: MINUS
78090: PUSH
78091: LD_INT 0
78093: LESS
78094: IFFALSE 78106
// min_x := 0 else
78096: LD_ADDR_VAR 0 8
78100: PUSH
78101: LD_INT 0
78103: ST_TO_ADDR
78104: GO 78122
// min_x := x - r ;
78106: LD_ADDR_VAR 0 8
78110: PUSH
78111: LD_VAR 0 1
78115: PUSH
78116: LD_VAR 0 3
78120: MINUS
78121: ST_TO_ADDR
// if y - r < 0 then
78122: LD_VAR 0 2
78126: PUSH
78127: LD_VAR 0 3
78131: MINUS
78132: PUSH
78133: LD_INT 0
78135: LESS
78136: IFFALSE 78148
// min_y := 0 else
78138: LD_ADDR_VAR 0 7
78142: PUSH
78143: LD_INT 0
78145: ST_TO_ADDR
78146: GO 78164
// min_y := y - r ;
78148: LD_ADDR_VAR 0 7
78152: PUSH
78153: LD_VAR 0 2
78157: PUSH
78158: LD_VAR 0 3
78162: MINUS
78163: ST_TO_ADDR
// max_x := x + r ;
78164: LD_ADDR_VAR 0 9
78168: PUSH
78169: LD_VAR 0 1
78173: PUSH
78174: LD_VAR 0 3
78178: PLUS
78179: ST_TO_ADDR
// max_y := y + r ;
78180: LD_ADDR_VAR 0 10
78184: PUSH
78185: LD_VAR 0 2
78189: PUSH
78190: LD_VAR 0 3
78194: PLUS
78195: ST_TO_ADDR
// for _x = min_x to max_x do
78196: LD_ADDR_VAR 0 5
78200: PUSH
78201: DOUBLE
78202: LD_VAR 0 8
78206: DEC
78207: ST_TO_ADDR
78208: LD_VAR 0 9
78212: PUSH
78213: FOR_TO
78214: IFFALSE 78315
// for _y = min_y to max_y do
78216: LD_ADDR_VAR 0 6
78220: PUSH
78221: DOUBLE
78222: LD_VAR 0 7
78226: DEC
78227: ST_TO_ADDR
78228: LD_VAR 0 10
78232: PUSH
78233: FOR_TO
78234: IFFALSE 78311
// begin if not ValidHex ( _x , _y ) then
78236: LD_VAR 0 5
78240: PPUSH
78241: LD_VAR 0 6
78245: PPUSH
78246: CALL_OW 488
78250: NOT
78251: IFFALSE 78255
// continue ;
78253: GO 78233
// if GetResourceTypeXY ( _x , _y ) then
78255: LD_VAR 0 5
78259: PPUSH
78260: LD_VAR 0 6
78264: PPUSH
78265: CALL_OW 283
78269: IFFALSE 78309
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78271: LD_ADDR_VAR 0 4
78275: PUSH
78276: LD_VAR 0 4
78280: PPUSH
78281: LD_VAR 0 4
78285: PUSH
78286: LD_INT 1
78288: PLUS
78289: PPUSH
78290: LD_VAR 0 5
78294: PUSH
78295: LD_VAR 0 6
78299: PUSH
78300: EMPTY
78301: LIST
78302: LIST
78303: PPUSH
78304: CALL_OW 1
78308: ST_TO_ADDR
// end ;
78309: GO 78233
78311: POP
78312: POP
78313: GO 78213
78315: POP
78316: POP
// end ;
78317: LD_VAR 0 4
78321: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78322: LD_INT 0
78324: PPUSH
78325: PPUSH
78326: PPUSH
78327: PPUSH
78328: PPUSH
78329: PPUSH
78330: PPUSH
78331: PPUSH
// if not units then
78332: LD_VAR 0 1
78336: NOT
78337: IFFALSE 78341
// exit ;
78339: GO 78865
// result := UnitFilter ( units , [ f_ok ] ) ;
78341: LD_ADDR_VAR 0 3
78345: PUSH
78346: LD_VAR 0 1
78350: PPUSH
78351: LD_INT 50
78353: PUSH
78354: EMPTY
78355: LIST
78356: PPUSH
78357: CALL_OW 72
78361: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78362: LD_ADDR_VAR 0 8
78366: PUSH
78367: LD_VAR 0 1
78371: PUSH
78372: LD_INT 1
78374: ARRAY
78375: PPUSH
78376: CALL_OW 255
78380: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78381: LD_ADDR_VAR 0 10
78385: PUSH
78386: LD_INT 29
78388: PUSH
78389: LD_INT 91
78391: PUSH
78392: LD_INT 49
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: LIST
78399: ST_TO_ADDR
// if not result then
78400: LD_VAR 0 3
78404: NOT
78405: IFFALSE 78409
// exit ;
78407: GO 78865
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78409: LD_ADDR_VAR 0 5
78413: PUSH
78414: LD_INT 81
78416: PUSH
78417: LD_VAR 0 8
78421: PUSH
78422: EMPTY
78423: LIST
78424: LIST
78425: PPUSH
78426: CALL_OW 69
78430: ST_TO_ADDR
// for i in result do
78431: LD_ADDR_VAR 0 4
78435: PUSH
78436: LD_VAR 0 3
78440: PUSH
78441: FOR_IN
78442: IFFALSE 78863
// begin tag := GetTag ( i ) + 1 ;
78444: LD_ADDR_VAR 0 9
78448: PUSH
78449: LD_VAR 0 4
78453: PPUSH
78454: CALL_OW 110
78458: PUSH
78459: LD_INT 1
78461: PLUS
78462: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78463: LD_ADDR_VAR 0 7
78467: PUSH
78468: LD_VAR 0 4
78472: PPUSH
78473: CALL_OW 250
78477: PPUSH
78478: LD_VAR 0 4
78482: PPUSH
78483: CALL_OW 251
78487: PPUSH
78488: LD_INT 6
78490: PPUSH
78491: CALL 78064 0 3
78495: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78496: LD_VAR 0 4
78500: PPUSH
78501: CALL_OW 247
78505: PUSH
78506: LD_INT 2
78508: EQUAL
78509: PUSH
78510: LD_VAR 0 7
78514: AND
78515: PUSH
78516: LD_VAR 0 4
78520: PPUSH
78521: CALL_OW 264
78525: PUSH
78526: LD_VAR 0 10
78530: IN
78531: NOT
78532: AND
78533: IFFALSE 78572
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78535: LD_VAR 0 4
78539: PPUSH
78540: LD_VAR 0 7
78544: PUSH
78545: LD_INT 1
78547: ARRAY
78548: PUSH
78549: LD_INT 1
78551: ARRAY
78552: PPUSH
78553: LD_VAR 0 7
78557: PUSH
78558: LD_INT 1
78560: ARRAY
78561: PUSH
78562: LD_INT 2
78564: ARRAY
78565: PPUSH
78566: CALL_OW 116
78570: GO 78861
// if path > tag then
78572: LD_VAR 0 2
78576: PUSH
78577: LD_VAR 0 9
78581: GREATER
78582: IFFALSE 78790
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78584: LD_ADDR_VAR 0 6
78588: PUSH
78589: LD_VAR 0 5
78593: PPUSH
78594: LD_INT 91
78596: PUSH
78597: LD_VAR 0 4
78601: PUSH
78602: LD_INT 8
78604: PUSH
78605: EMPTY
78606: LIST
78607: LIST
78608: LIST
78609: PPUSH
78610: CALL_OW 72
78614: ST_TO_ADDR
// if nearEnemy then
78615: LD_VAR 0 6
78619: IFFALSE 78688
// begin if GetWeapon ( i ) = ru_time_lapser then
78621: LD_VAR 0 4
78625: PPUSH
78626: CALL_OW 264
78630: PUSH
78631: LD_INT 49
78633: EQUAL
78634: IFFALSE 78662
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78636: LD_VAR 0 4
78640: PPUSH
78641: LD_VAR 0 6
78645: PPUSH
78646: LD_VAR 0 4
78650: PPUSH
78651: CALL_OW 74
78655: PPUSH
78656: CALL_OW 112
78660: GO 78686
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78662: LD_VAR 0 4
78666: PPUSH
78667: LD_VAR 0 6
78671: PPUSH
78672: LD_VAR 0 4
78676: PPUSH
78677: CALL_OW 74
78681: PPUSH
78682: CALL_OW 115
// end else
78686: GO 78788
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78688: LD_VAR 0 4
78692: PPUSH
78693: LD_VAR 0 2
78697: PUSH
78698: LD_VAR 0 9
78702: ARRAY
78703: PUSH
78704: LD_INT 1
78706: ARRAY
78707: PPUSH
78708: LD_VAR 0 2
78712: PUSH
78713: LD_VAR 0 9
78717: ARRAY
78718: PUSH
78719: LD_INT 2
78721: ARRAY
78722: PPUSH
78723: CALL_OW 297
78727: PUSH
78728: LD_INT 6
78730: GREATER
78731: IFFALSE 78774
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78733: LD_VAR 0 4
78737: PPUSH
78738: LD_VAR 0 2
78742: PUSH
78743: LD_VAR 0 9
78747: ARRAY
78748: PUSH
78749: LD_INT 1
78751: ARRAY
78752: PPUSH
78753: LD_VAR 0 2
78757: PUSH
78758: LD_VAR 0 9
78762: ARRAY
78763: PUSH
78764: LD_INT 2
78766: ARRAY
78767: PPUSH
78768: CALL_OW 114
78772: GO 78788
// SetTag ( i , tag ) ;
78774: LD_VAR 0 4
78778: PPUSH
78779: LD_VAR 0 9
78783: PPUSH
78784: CALL_OW 109
// end else
78788: GO 78861
// if enemy then
78790: LD_VAR 0 5
78794: IFFALSE 78861
// begin if GetWeapon ( i ) = ru_time_lapser then
78796: LD_VAR 0 4
78800: PPUSH
78801: CALL_OW 264
78805: PUSH
78806: LD_INT 49
78808: EQUAL
78809: IFFALSE 78837
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78811: LD_VAR 0 4
78815: PPUSH
78816: LD_VAR 0 5
78820: PPUSH
78821: LD_VAR 0 4
78825: PPUSH
78826: CALL_OW 74
78830: PPUSH
78831: CALL_OW 112
78835: GO 78861
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78837: LD_VAR 0 4
78841: PPUSH
78842: LD_VAR 0 5
78846: PPUSH
78847: LD_VAR 0 4
78851: PPUSH
78852: CALL_OW 74
78856: PPUSH
78857: CALL_OW 115
// end ; end ;
78861: GO 78441
78863: POP
78864: POP
// end ;
78865: LD_VAR 0 3
78869: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78870: LD_INT 0
78872: PPUSH
78873: PPUSH
78874: PPUSH
// if not unit or IsInUnit ( unit ) then
78875: LD_VAR 0 1
78879: NOT
78880: PUSH
78881: LD_VAR 0 1
78885: PPUSH
78886: CALL_OW 310
78890: OR
78891: IFFALSE 78895
// exit ;
78893: GO 78986
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78895: LD_ADDR_VAR 0 4
78899: PUSH
78900: LD_VAR 0 1
78904: PPUSH
78905: CALL_OW 250
78909: PPUSH
78910: LD_VAR 0 2
78914: PPUSH
78915: LD_INT 1
78917: PPUSH
78918: CALL_OW 272
78922: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78923: LD_ADDR_VAR 0 5
78927: PUSH
78928: LD_VAR 0 1
78932: PPUSH
78933: CALL_OW 251
78937: PPUSH
78938: LD_VAR 0 2
78942: PPUSH
78943: LD_INT 1
78945: PPUSH
78946: CALL_OW 273
78950: ST_TO_ADDR
// if ValidHex ( x , y ) then
78951: LD_VAR 0 4
78955: PPUSH
78956: LD_VAR 0 5
78960: PPUSH
78961: CALL_OW 488
78965: IFFALSE 78986
// ComTurnXY ( unit , x , y ) ;
78967: LD_VAR 0 1
78971: PPUSH
78972: LD_VAR 0 4
78976: PPUSH
78977: LD_VAR 0 5
78981: PPUSH
78982: CALL_OW 118
// end ;
78986: LD_VAR 0 3
78990: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78991: LD_INT 0
78993: PPUSH
78994: PPUSH
// result := false ;
78995: LD_ADDR_VAR 0 3
78999: PUSH
79000: LD_INT 0
79002: ST_TO_ADDR
// if not units then
79003: LD_VAR 0 2
79007: NOT
79008: IFFALSE 79012
// exit ;
79010: GO 79057
// for i in units do
79012: LD_ADDR_VAR 0 4
79016: PUSH
79017: LD_VAR 0 2
79021: PUSH
79022: FOR_IN
79023: IFFALSE 79055
// if See ( side , i ) then
79025: LD_VAR 0 1
79029: PPUSH
79030: LD_VAR 0 4
79034: PPUSH
79035: CALL_OW 292
79039: IFFALSE 79053
// begin result := true ;
79041: LD_ADDR_VAR 0 3
79045: PUSH
79046: LD_INT 1
79048: ST_TO_ADDR
// exit ;
79049: POP
79050: POP
79051: GO 79057
// end ;
79053: GO 79022
79055: POP
79056: POP
// end ;
79057: LD_VAR 0 3
79061: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79062: LD_INT 0
79064: PPUSH
79065: PPUSH
79066: PPUSH
79067: PPUSH
// if not unit or not points then
79068: LD_VAR 0 1
79072: NOT
79073: PUSH
79074: LD_VAR 0 2
79078: NOT
79079: OR
79080: IFFALSE 79084
// exit ;
79082: GO 79174
// dist := 99999 ;
79084: LD_ADDR_VAR 0 5
79088: PUSH
79089: LD_INT 99999
79091: ST_TO_ADDR
// for i in points do
79092: LD_ADDR_VAR 0 4
79096: PUSH
79097: LD_VAR 0 2
79101: PUSH
79102: FOR_IN
79103: IFFALSE 79172
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79105: LD_ADDR_VAR 0 6
79109: PUSH
79110: LD_VAR 0 1
79114: PPUSH
79115: LD_VAR 0 4
79119: PUSH
79120: LD_INT 1
79122: ARRAY
79123: PPUSH
79124: LD_VAR 0 4
79128: PUSH
79129: LD_INT 2
79131: ARRAY
79132: PPUSH
79133: CALL_OW 297
79137: ST_TO_ADDR
// if tmpDist < dist then
79138: LD_VAR 0 6
79142: PUSH
79143: LD_VAR 0 5
79147: LESS
79148: IFFALSE 79170
// begin result := i ;
79150: LD_ADDR_VAR 0 3
79154: PUSH
79155: LD_VAR 0 4
79159: ST_TO_ADDR
// dist := tmpDist ;
79160: LD_ADDR_VAR 0 5
79164: PUSH
79165: LD_VAR 0 6
79169: ST_TO_ADDR
// end ; end ;
79170: GO 79102
79172: POP
79173: POP
// end ;
79174: LD_VAR 0 3
79178: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79179: LD_INT 0
79181: PPUSH
// uc_side := side ;
79182: LD_ADDR_OWVAR 20
79186: PUSH
79187: LD_VAR 0 1
79191: ST_TO_ADDR
// uc_nation := 3 ;
79192: LD_ADDR_OWVAR 21
79196: PUSH
79197: LD_INT 3
79199: ST_TO_ADDR
// vc_chassis := 25 ;
79200: LD_ADDR_OWVAR 37
79204: PUSH
79205: LD_INT 25
79207: ST_TO_ADDR
// vc_engine := engine_siberite ;
79208: LD_ADDR_OWVAR 39
79212: PUSH
79213: LD_INT 3
79215: ST_TO_ADDR
// vc_control := control_computer ;
79216: LD_ADDR_OWVAR 38
79220: PUSH
79221: LD_INT 3
79223: ST_TO_ADDR
// vc_weapon := 59 ;
79224: LD_ADDR_OWVAR 40
79228: PUSH
79229: LD_INT 59
79231: ST_TO_ADDR
// result := CreateVehicle ;
79232: LD_ADDR_VAR 0 5
79236: PUSH
79237: CALL_OW 45
79241: ST_TO_ADDR
// SetDir ( result , d ) ;
79242: LD_VAR 0 5
79246: PPUSH
79247: LD_VAR 0 4
79251: PPUSH
79252: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79256: LD_VAR 0 5
79260: PPUSH
79261: LD_VAR 0 2
79265: PPUSH
79266: LD_VAR 0 3
79270: PPUSH
79271: LD_INT 0
79273: PPUSH
79274: CALL_OW 48
// end ;
79278: LD_VAR 0 5
79282: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79283: LD_INT 0
79285: PPUSH
79286: PPUSH
79287: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79288: LD_ADDR_VAR 0 2
79292: PUSH
79293: LD_INT 0
79295: PUSH
79296: LD_INT 0
79298: PUSH
79299: LD_INT 0
79301: PUSH
79302: LD_INT 0
79304: PUSH
79305: EMPTY
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79311: LD_VAR 0 1
79315: NOT
79316: PUSH
79317: LD_VAR 0 1
79321: PPUSH
79322: CALL_OW 264
79326: PUSH
79327: LD_INT 12
79329: PUSH
79330: LD_INT 51
79332: PUSH
79333: LD_INT 32
79335: PUSH
79336: LD_INT 89
79338: PUSH
79339: EMPTY
79340: LIST
79341: LIST
79342: LIST
79343: LIST
79344: IN
79345: NOT
79346: OR
79347: IFFALSE 79351
// exit ;
79349: GO 79449
// for i := 1 to 3 do
79351: LD_ADDR_VAR 0 3
79355: PUSH
79356: DOUBLE
79357: LD_INT 1
79359: DEC
79360: ST_TO_ADDR
79361: LD_INT 3
79363: PUSH
79364: FOR_TO
79365: IFFALSE 79447
// begin tmp := GetCargo ( cargo , i ) ;
79367: LD_ADDR_VAR 0 4
79371: PUSH
79372: LD_VAR 0 1
79376: PPUSH
79377: LD_VAR 0 3
79381: PPUSH
79382: CALL_OW 289
79386: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79387: LD_ADDR_VAR 0 2
79391: PUSH
79392: LD_VAR 0 2
79396: PPUSH
79397: LD_VAR 0 3
79401: PPUSH
79402: LD_VAR 0 4
79406: PPUSH
79407: CALL_OW 1
79411: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79412: LD_ADDR_VAR 0 2
79416: PUSH
79417: LD_VAR 0 2
79421: PPUSH
79422: LD_INT 4
79424: PPUSH
79425: LD_VAR 0 2
79429: PUSH
79430: LD_INT 4
79432: ARRAY
79433: PUSH
79434: LD_VAR 0 4
79438: PLUS
79439: PPUSH
79440: CALL_OW 1
79444: ST_TO_ADDR
// end ;
79445: GO 79364
79447: POP
79448: POP
// end ;
79449: LD_VAR 0 2
79453: RET
// export function Length ( array ) ; begin
79454: LD_INT 0
79456: PPUSH
// result := array + 0 ;
79457: LD_ADDR_VAR 0 2
79461: PUSH
79462: LD_VAR 0 1
79466: PUSH
79467: LD_INT 0
79469: PLUS
79470: ST_TO_ADDR
// end ;
79471: LD_VAR 0 2
79475: RET
// export function PrepareArray ( array ) ; begin
79476: LD_INT 0
79478: PPUSH
// result := array diff 0 ;
79479: LD_ADDR_VAR 0 2
79483: PUSH
79484: LD_VAR 0 1
79488: PUSH
79489: LD_INT 0
79491: DIFF
79492: ST_TO_ADDR
// if not result [ 1 ] then
79493: LD_VAR 0 2
79497: PUSH
79498: LD_INT 1
79500: ARRAY
79501: NOT
79502: IFFALSE 79522
// result := Delete ( result , 1 ) ;
79504: LD_ADDR_VAR 0 2
79508: PUSH
79509: LD_VAR 0 2
79513: PPUSH
79514: LD_INT 1
79516: PPUSH
79517: CALL_OW 3
79521: ST_TO_ADDR
// end ; end_of_file
79522: LD_VAR 0 2
79526: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79527: LD_VAR 0 1
79531: PUSH
79532: LD_INT 200
79534: DOUBLE
79535: GREATEREQUAL
79536: IFFALSE 79544
79538: LD_INT 299
79540: DOUBLE
79541: LESSEQUAL
79542: IFTRUE 79546
79544: GO 79578
79546: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79547: LD_VAR 0 1
79551: PPUSH
79552: LD_VAR 0 2
79556: PPUSH
79557: LD_VAR 0 3
79561: PPUSH
79562: LD_VAR 0 4
79566: PPUSH
79567: LD_VAR 0 5
79571: PPUSH
79572: CALL 34429 0 5
79576: GO 79655
79578: LD_INT 300
79580: DOUBLE
79581: GREATEREQUAL
79582: IFFALSE 79590
79584: LD_INT 399
79586: DOUBLE
79587: LESSEQUAL
79588: IFTRUE 79592
79590: GO 79654
79592: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79593: LD_VAR 0 1
79597: PPUSH
79598: LD_VAR 0 2
79602: PPUSH
79603: LD_VAR 0 3
79607: PPUSH
79608: LD_VAR 0 4
79612: PPUSH
79613: LD_VAR 0 5
79617: PPUSH
79618: LD_VAR 0 6
79622: PPUSH
79623: LD_VAR 0 7
79627: PPUSH
79628: LD_VAR 0 8
79632: PPUSH
79633: LD_VAR 0 9
79637: PPUSH
79638: LD_VAR 0 10
79642: PPUSH
79643: LD_VAR 0 11
79647: PPUSH
79648: CALL 30762 0 11
79652: GO 79655
79654: POP
// end ;
79655: PPOPN 11
79657: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79658: LD_VAR 0 1
79662: PPUSH
79663: LD_VAR 0 2
79667: PPUSH
79668: LD_VAR 0 3
79672: PPUSH
79673: LD_VAR 0 4
79677: PPUSH
79678: LD_VAR 0 5
79682: PPUSH
79683: CALL 34165 0 5
// end ; end_of_file
79687: PPOPN 5
79689: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79690: LD_VAR 0 1
79694: PPUSH
79695: LD_VAR 0 2
79699: PPUSH
79700: LD_VAR 0 3
79704: PPUSH
79705: LD_VAR 0 4
79709: PPUSH
79710: LD_VAR 0 5
79714: PPUSH
79715: LD_VAR 0 6
79719: PPUSH
79720: CALL 18455 0 6
// end ;
79724: PPOPN 6
79726: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79727: LD_INT 0
79729: PPUSH
// begin if not units then
79730: LD_VAR 0 1
79734: NOT
79735: IFFALSE 79739
// exit ;
79737: GO 79739
// end ;
79739: PPOPN 7
79741: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79742: CALL 18426 0 0
// end ;
79746: PPOPN 1
79748: END
