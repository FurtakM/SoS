// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 , 14 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: LD_INT 14
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: ST_TO_ADDR
// debugMode = 0 ;
 186: LD_ADDR_EXP 45
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// PrepareDifficulty ;
 194: CALL 7766 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 198: LD_INT 43
 200: PPUSH
 201: LD_INT 22
 203: PPUSH
 204: LD_INT 1
 206: PPUSH
 207: LD_INT 333
 209: NEG
 210: PPUSH
 211: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 215: LD_INT 43
 217: PPUSH
 218: LD_INT 22
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 331
// PrepareGammaBase ;
 228: CALL 2639 0 0
// PrepareHeroes ;
 232: CALL 575 0 0
// PrepareRussianCommander ;
 236: CALL 6622 0 0
// PrepareRussians ;
 240: CALL 6940 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 244: LD_INT 22
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: PUSH
 254: LD_INT 25
 256: PUSH
 257: LD_INT 2
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PPUSH
 268: CALL_OW 69
 272: PPUSH
 273: LD_INT 0
 275: PPUSH
 276: LD_INT 90
 278: PPUSH
 279: LD_INT 86
 281: PPUSH
 282: LD_INT 3
 284: PPUSH
 285: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 289: LD_INT 3
 291: PPUSH
 292: LD_INT 24
 294: PPUSH
 295: LD_INT 3
 297: PPUSH
 298: LD_EXP 25
 302: PPUSH
 303: LD_EXP 26
 307: PPUSH
 308: CALL_OW 12
 312: PPUSH
 313: LD_INT 6
 315: PPUSH
 316: LD_INT 4
 318: PPUSH
 319: CALL 9191 0 6
// PrepareCutsceneAttack ;
 323: CALL 6674 0 0
// end ;
 327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 328: LD_INT 22
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 34
 340: PUSH
 341: LD_INT 6
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PPUSH
 352: CALL_OW 69
 356: PUSH
 357: LD_INT 6
 359: GREATEREQUAL
 360: IFFALSE 372
 362: GO 364
 364: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 365: LD_STRING ACH_ARMOR
 367: PPUSH
 368: CALL_OW 543
 372: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 373: LD_EXP 45
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 572
 383: GO 385
 385: DISABLE
 386: LD_INT 0
 388: PPUSH
// begin enable ;
 389: ENABLE
// fogoff ( true ) ;
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 397: LD_ADDR_VAR 0 1
 401: PUSH
 402: LD_INT 22
 404: PUSH
 405: LD_INT 1
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: PUSH
 412: LD_INT 21
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: FOR_IN
 432: IFFALSE 448
// SetLives ( i , 1000 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: LD_INT 1000
 441: PPUSH
 442: CALL_OW 234
 446: GO 431
 448: POP
 449: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 450: LD_ADDR_VAR 0 1
 454: PUSH
 455: LD_INT 22
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: FOR_IN
 485: IFFALSE 509
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 274
 496: PPUSH
 497: LD_INT 1
 499: PPUSH
 500: LD_INT 9999
 502: PPUSH
 503: CALL_OW 277
 507: GO 484
 509: POP
 510: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 511: LD_ADDR_VAR 0 1
 515: PUSH
 516: LD_INT 22
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 30
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PPUSH
 540: CALL_OW 69
 544: PUSH
 545: FOR_IN
 546: IFFALSE 570
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: CALL_OW 274
 557: PPUSH
 558: LD_INT 2
 560: PPUSH
 561: LD_INT 9999
 563: PPUSH
 564: CALL_OW 277
 568: GO 545
 570: POP
 571: POP
// end ; end_of_file
 572: PPOPN 1
 574: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 575: LD_INT 0
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
 588: PPUSH
 589: PPUSH
 590: PPUSH
 591: PPUSH
// uc_side = 1 ;
 592: LD_ADDR_OWVAR 20
 596: PUSH
 597: LD_INT 1
 599: ST_TO_ADDR
// uc_nation = 1 ;
 600: LD_ADDR_OWVAR 21
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// if gammaCommander = 1 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 1
 615: EQUAL
 616: IFFALSE 667
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 618: LD_ADDR_EXP 3
 622: PUSH
 623: LD_STRING Donaldson
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: LD_STRING 04_
 631: PPUSH
 632: CALL 45030 0 3
 636: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 637: LD_EXP 3
 641: PPUSH
 642: LD_INT 54
 644: PPUSH
 645: LD_INT 25
 647: PPUSH
 648: LD_INT 8
 650: PPUSH
 651: LD_INT 0
 653: PPUSH
 654: CALL_OW 50
// ComHold ( Donaldson ) ;
 658: LD_EXP 3
 662: PPUSH
 663: CALL_OW 140
// end ; if gammaCommander = 2 then
 667: LD_EXP 12
 671: PUSH
 672: LD_INT 2
 674: EQUAL
 675: IFFALSE 726
// begin Brown = PrepareUnit ( Brown , true , 04_ ) ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_STRING Brown
 684: PPUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_STRING 04_
 690: PPUSH
 691: CALL 45030 0 3
 695: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 696: LD_EXP 2
 700: PPUSH
 701: LD_INT 54
 703: PPUSH
 704: LD_INT 25
 706: PPUSH
 707: LD_INT 8
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 50
// ComHold ( Brown ) ;
 717: LD_EXP 2
 721: PPUSH
 722: CALL_OW 140
// end ; if gammaCommander = 3 then
 726: LD_EXP 12
 730: PUSH
 731: LD_INT 3
 733: EQUAL
 734: IFFALSE 785
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 736: LD_ADDR_EXP 13
 740: PUSH
 741: LD_STRING VanHouten
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: LD_STRING 
 749: PPUSH
 750: CALL 45030 0 3
 754: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 755: LD_EXP 13
 759: PPUSH
 760: LD_INT 54
 762: PPUSH
 763: LD_INT 25
 765: PPUSH
 766: LD_INT 8
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 50
// ComHold ( Houten ) ;
 776: LD_EXP 13
 780: PPUSH
 781: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 785: LD_ADDR_EXP 22
 789: PUSH
 790: LD_STRING Harisson
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: LD_STRING 
 798: PPUSH
 799: CALL 45030 0 3
 803: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 804: LD_ADDR_EXP 23
 808: PUSH
 809: LD_STRING Powell
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: LD_STRING 
 817: PPUSH
 818: CALL 45030 0 3
 822: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 823: LD_STRING 04_Lisa
 825: PUSH
 826: EMPTY
 827: LIST
 828: PPUSH
 829: CALL_OW 28
 833: PUSH
 834: LD_STRING LisaInDelta
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 30
 844: NOT
 845: AND
 846: PUSH
 847: LD_STRING 07_Lisa
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: NOT
 858: AND
 859: IFFALSE 898
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 861: LD_ADDR_EXP 6
 865: PUSH
 866: LD_STRING Lisa
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_STRING 04_
 874: PPUSH
 875: CALL 45030 0 3
 879: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 880: LD_ADDR_VAR 0 15
 884: PUSH
 885: LD_VAR 0 15
 889: PUSH
 890: LD_EXP 6
 894: ADD
 895: ST_TO_ADDR
// end else
 896: GO 953
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 898: LD_EXP 6
 902: NOT
 903: PUSH
 904: LD_STRING LisaIn07
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 30
 914: NOT
 915: AND
 916: IFFALSE 953
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 918: LD_ADDR_EXP 6
 922: PUSH
 923: LD_STRING Lisa
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: LD_STRING 07_
 931: PPUSH
 932: CALL 45030 0 3
 936: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 937: LD_ADDR_VAR 0 15
 941: PUSH
 942: LD_VAR 0 15
 946: PUSH
 947: LD_EXP 6
 951: ADD
 952: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 953: LD_STRING 04_Bobby
 955: PUSH
 956: EMPTY
 957: LIST
 958: PPUSH
 959: CALL_OW 28
 963: PUSH
 964: LD_STRING BobbyInDelta
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 30
 974: NOT
 975: AND
 976: PUSH
 977: LD_STRING 07_Bobby
 979: PUSH
 980: EMPTY
 981: LIST
 982: PPUSH
 983: CALL_OW 28
 987: NOT
 988: AND
 989: IFFALSE 1028
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 991: LD_ADDR_EXP 4
 995: PUSH
 996: LD_STRING Bobby
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: LD_STRING 04_
1004: PPUSH
1005: CALL 45030 0 3
1009: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1010: LD_ADDR_VAR 0 15
1014: PUSH
1015: LD_VAR 0 15
1019: PUSH
1020: LD_EXP 4
1024: ADD
1025: ST_TO_ADDR
// end else
1026: GO 1083
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1028: LD_EXP 4
1032: NOT
1033: PUSH
1034: LD_STRING BobbyIn07
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 30
1044: NOT
1045: AND
1046: IFFALSE 1083
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1048: LD_ADDR_EXP 4
1052: PUSH
1053: LD_STRING Bobby
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: LD_STRING 07_
1061: PPUSH
1062: CALL 45030 0 3
1066: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1067: LD_ADDR_VAR 0 15
1071: PUSH
1072: LD_VAR 0 15
1076: PUSH
1077: LD_EXP 4
1081: ADD
1082: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1083: LD_STRING 04_Cyrus
1085: PUSH
1086: EMPTY
1087: LIST
1088: PPUSH
1089: CALL_OW 28
1093: PUSH
1094: LD_STRING CyrusInDelta
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 30
1104: NOT
1105: AND
1106: PUSH
1107: LD_STRING 07_Cyrus
1109: PUSH
1110: EMPTY
1111: LIST
1112: PPUSH
1113: CALL_OW 28
1117: NOT
1118: AND
1119: IFFALSE 1158
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1121: LD_ADDR_EXP 5
1125: PUSH
1126: LD_STRING Cyrus
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: LD_STRING 04_
1134: PPUSH
1135: CALL 45030 0 3
1139: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1140: LD_ADDR_VAR 0 15
1144: PUSH
1145: LD_VAR 0 15
1149: PUSH
1150: LD_EXP 5
1154: ADD
1155: ST_TO_ADDR
// end else
1156: GO 1213
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1158: LD_EXP 5
1162: NOT
1163: PUSH
1164: LD_STRING CyrusIn07
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 30
1174: NOT
1175: AND
1176: IFFALSE 1213
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1178: LD_ADDR_EXP 5
1182: PUSH
1183: LD_STRING Cyrus
1185: PPUSH
1186: LD_INT 1
1188: PPUSH
1189: LD_STRING 07_
1191: PPUSH
1192: CALL 45030 0 3
1196: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1197: LD_ADDR_VAR 0 15
1201: PUSH
1202: LD_VAR 0 15
1206: PUSH
1207: LD_EXP 5
1211: ADD
1212: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1213: LD_STRING 04_Brown
1215: PUSH
1216: EMPTY
1217: LIST
1218: PPUSH
1219: CALL_OW 28
1223: PUSH
1224: LD_STRING BrownInDelta
1226: PPUSH
1227: LD_INT 0
1229: PPUSH
1230: CALL_OW 30
1234: NOT
1235: AND
1236: PUSH
1237: LD_STRING 07_Brown
1239: PUSH
1240: EMPTY
1241: LIST
1242: PPUSH
1243: CALL_OW 28
1247: NOT
1248: AND
1249: PUSH
1250: LD_EXP 12
1254: PUSH
1255: LD_INT 2
1257: NONEQUAL
1258: AND
1259: IFFALSE 1298
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1261: LD_ADDR_EXP 2
1265: PUSH
1266: LD_STRING Brown
1268: PPUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_STRING 04_
1274: PPUSH
1275: CALL 45030 0 3
1279: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1280: LD_ADDR_VAR 0 15
1284: PUSH
1285: LD_VAR 0 15
1289: PUSH
1290: LD_EXP 2
1294: ADD
1295: ST_TO_ADDR
// end else
1296: GO 1363
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1298: LD_EXP 2
1302: NOT
1303: PUSH
1304: LD_STRING BrownIn07
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 30
1314: NOT
1315: AND
1316: PUSH
1317: LD_EXP 12
1321: PUSH
1322: LD_INT 2
1324: NONEQUAL
1325: AND
1326: IFFALSE 1363
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1328: LD_ADDR_EXP 2
1332: PUSH
1333: LD_STRING Brown
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_STRING 07_
1341: PPUSH
1342: CALL 45030 0 3
1346: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1347: LD_ADDR_VAR 0 15
1351: PUSH
1352: LD_VAR 0 15
1356: PUSH
1357: LD_EXP 2
1361: ADD
1362: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1363: LD_STRING 04_Donaldson
1365: PUSH
1366: EMPTY
1367: LIST
1368: PPUSH
1369: CALL_OW 28
1373: PUSH
1374: LD_STRING DonaldsonInDelta
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL_OW 30
1384: NOT
1385: AND
1386: PUSH
1387: LD_STRING 07_Donaldson
1389: PUSH
1390: EMPTY
1391: LIST
1392: PPUSH
1393: CALL_OW 28
1397: NOT
1398: AND
1399: PUSH
1400: LD_EXP 12
1404: PUSH
1405: LD_INT 1
1407: NONEQUAL
1408: AND
1409: IFFALSE 1448
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1411: LD_ADDR_EXP 3
1415: PUSH
1416: LD_STRING Donaldson
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: LD_STRING 04_
1424: PPUSH
1425: CALL 45030 0 3
1429: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1430: LD_ADDR_VAR 0 15
1434: PUSH
1435: LD_VAR 0 15
1439: PUSH
1440: LD_EXP 3
1444: ADD
1445: ST_TO_ADDR
// end else
1446: GO 1513
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1448: LD_EXP 3
1452: NOT
1453: PUSH
1454: LD_STRING DonaldsonIn07
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 30
1464: NOT
1465: AND
1466: PUSH
1467: LD_EXP 12
1471: PUSH
1472: LD_INT 1
1474: NONEQUAL
1475: AND
1476: IFFALSE 1513
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1478: LD_ADDR_EXP 3
1482: PUSH
1483: LD_STRING Donaldson
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_STRING 07_
1491: PPUSH
1492: CALL 45030 0 3
1496: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1497: LD_ADDR_VAR 0 15
1501: PUSH
1502: LD_VAR 0 15
1506: PUSH
1507: LD_EXP 3
1511: ADD
1512: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1513: LD_STRING KhatamIn07
1515: PPUSH
1516: LD_INT 0
1518: PPUSH
1519: CALL_OW 30
1523: NOT
1524: IFFALSE 1561
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1526: LD_ADDR_EXP 10
1530: PUSH
1531: LD_STRING Khatam
1533: PPUSH
1534: LD_INT 1
1536: PPUSH
1537: LD_STRING 07_
1539: PPUSH
1540: CALL 45030 0 3
1544: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1545: LD_ADDR_VAR 0 15
1549: PUSH
1550: LD_VAR 0 15
1554: PUSH
1555: LD_EXP 10
1559: ADD
1560: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1561: LD_ADDR_EXP 11
1565: PUSH
1566: LD_STRING 07_othersGamma
1568: PPUSH
1569: CALL_OW 31
1573: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1574: LD_ADDR_VAR 0 14
1578: PUSH
1579: LD_INT 8
1581: PUSH
1582: LD_EXP 11
1586: MINUS
1587: ST_TO_ADDR
// if tmp then
1588: LD_VAR 0 14
1592: IFFALSE 1645
// for i = 1 to tmp do
1594: LD_ADDR_VAR 0 2
1598: PUSH
1599: DOUBLE
1600: LD_INT 1
1602: DEC
1603: ST_TO_ADDR
1604: LD_VAR 0 14
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1643
// begin PrepareHuman ( false , 1 , 5 ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 5
1620: PPUSH
1621: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1625: LD_ADDR_EXP 11
1629: PUSH
1630: LD_EXP 11
1634: PUSH
1635: CALL_OW 44
1639: ADD
1640: ST_TO_ADDR
// end ;
1641: GO 1609
1643: POP
1644: POP
// if HexInfo ( 61 , 29 ) = 0 then
1645: LD_INT 61
1647: PPUSH
1648: LD_INT 29
1650: PPUSH
1651: CALL_OW 428
1655: PUSH
1656: LD_INT 0
1658: EQUAL
1659: IFFALSE 1690
// begin bc_type := b_barracks ;
1661: LD_ADDR_OWVAR 42
1665: PUSH
1666: LD_INT 5
1668: ST_TO_ADDR
// bc_level := 6 ;
1669: LD_ADDR_OWVAR 43
1673: PUSH
1674: LD_INT 6
1676: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1677: LD_INT 61
1679: PPUSH
1680: LD_INT 29
1682: PPUSH
1683: LD_INT 5
1685: PPUSH
1686: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1690: LD_ADDR_VAR 0 13
1694: PUSH
1695: LD_INT 22
1697: PUSH
1698: LD_INT 1
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 31
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PPUSH
1719: CALL_OW 69
1723: ST_TO_ADDR
// for i in bun do
1724: LD_ADDR_VAR 0 2
1728: PUSH
1729: LD_VAR 0 13
1733: PUSH
1734: FOR_IN
1735: IFFALSE 1867
// begin x := GetX ( i ) ;
1737: LD_ADDR_VAR 0 3
1741: PUSH
1742: LD_VAR 0 2
1746: PPUSH
1747: CALL_OW 250
1751: ST_TO_ADDR
// y := GetY ( i ) ;
1752: LD_ADDR_VAR 0 4
1756: PUSH
1757: LD_VAR 0 2
1761: PPUSH
1762: CALL_OW 251
1766: ST_TO_ADDR
// d := GetDir ( i ) ;
1767: LD_ADDR_VAR 0 5
1771: PUSH
1772: LD_VAR 0 2
1776: PPUSH
1777: CALL_OW 254
1781: ST_TO_ADDR
// RemoveUnit ( i ) ;
1782: LD_VAR 0 2
1786: PPUSH
1787: CALL_OW 64
// bc_type := b_bunker ;
1791: LD_ADDR_OWVAR 42
1795: PUSH
1796: LD_INT 32
1798: ST_TO_ADDR
// bc_level := 6 ;
1799: LD_ADDR_OWVAR 43
1803: PUSH
1804: LD_INT 6
1806: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1807: LD_ADDR_VAR 0 6
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: LD_VAR 0 5
1826: PPUSH
1827: CALL_OW 47
1831: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1832: LD_VAR 0 6
1836: PPUSH
1837: LD_INT 5
1839: PUSH
1840: LD_INT 4
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: LD_VAR 0 2
1851: PUSH
1852: LD_INT 2
1854: MOD
1855: PUSH
1856: LD_INT 1
1858: PLUS
1859: ARRAY
1860: PPUSH
1861: CALL_OW 431
// end ;
1865: GO 1734
1867: POP
1868: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1869: LD_ADDR_VAR 0 9
1873: PUSH
1874: LD_INT 22
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 30
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PPUSH
1898: CALL_OW 69
1902: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1903: LD_ADDR_VAR 0 8
1907: PUSH
1908: LD_INT 22
1910: PUSH
1911: LD_INT 1
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: LD_INT 30
1923: PUSH
1924: LD_INT 6
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 30
1933: PUSH
1934: LD_INT 7
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 30
1943: PUSH
1944: LD_INT 8
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PPUSH
1961: CALL_OW 69
1965: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1966: LD_ADDR_VAR 0 7
1970: PUSH
1971: LD_INT 22
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PUSH
1981: LD_INT 30
1983: PUSH
1984: LD_INT 3
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 30
2017: PUSH
2018: LD_INT 36
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2034: LD_ADDR_VAR 0 13
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 2
2051: PUSH
2052: LD_INT 30
2054: PUSH
2055: LD_INT 31
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 30
2064: PUSH
2065: LD_INT 32
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: LD_EXP 11
2095: PUSH
2096: LD_VAR 0 15
2100: ADD
2101: PUSH
2102: FOR_IN
2103: IFFALSE 2524
// begin placed := false ;
2105: LD_ADDR_VAR 0 11
2109: PUSH
2110: LD_INT 0
2112: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2113: LD_VAR 0 2
2117: PPUSH
2118: CALL_OW 257
2122: PUSH
2123: LD_INT 1
2125: EQUAL
2126: IFFALSE 2251
// begin if UnitFilter ( bun , [ f_empty ] ) then
2128: LD_VAR 0 13
2132: PPUSH
2133: LD_INT 58
2135: PUSH
2136: EMPTY
2137: LIST
2138: PPUSH
2139: CALL_OW 72
2143: IFFALSE 2182
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2145: LD_VAR 0 2
2149: PPUSH
2150: LD_VAR 0 13
2154: PPUSH
2155: LD_INT 58
2157: PUSH
2158: EMPTY
2159: LIST
2160: PPUSH
2161: CALL_OW 72
2165: PUSH
2166: LD_INT 1
2168: ARRAY
2169: PPUSH
2170: CALL_OW 52
// placed := true ;
2174: LD_ADDR_VAR 0 11
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// end ; if arm and not placed then
2182: LD_VAR 0 9
2186: PUSH
2187: LD_VAR 0 11
2191: NOT
2192: AND
2193: IFFALSE 2251
// begin for j in arm do
2195: LD_ADDR_VAR 0 10
2199: PUSH
2200: LD_VAR 0 9
2204: PUSH
2205: FOR_IN
2206: IFFALSE 2249
// if UnitsInside ( j ) < 6 then
2208: LD_VAR 0 10
2212: PPUSH
2213: CALL_OW 313
2217: PUSH
2218: LD_INT 6
2220: LESS
2221: IFFALSE 2247
// begin PlaceHumanInUnit ( i , j ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_VAR 0 10
2232: PPUSH
2233: CALL_OW 52
// placed := true ;
2237: LD_ADDR_VAR 0 11
2241: PUSH
2242: LD_INT 1
2244: ST_TO_ADDR
// break ;
2245: GO 2249
// end ;
2247: GO 2205
2249: POP
2250: POP
// end ; end ; if GetClass ( i ) = 2 then
2251: LD_VAR 0 2
2255: PPUSH
2256: CALL_OW 257
2260: PUSH
2261: LD_INT 2
2263: EQUAL
2264: IFFALSE 2297
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2266: LD_VAR 0 2
2270: PPUSH
2271: LD_INT 52
2273: PPUSH
2274: LD_INT 20
2276: PPUSH
2277: LD_INT 6
2279: PPUSH
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 50
// placed := true ;
2287: LD_ADDR_VAR 0 11
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// continue ;
2295: GO 2102
// end ; if GetClass ( i ) = 3 then
2297: LD_VAR 0 2
2301: PPUSH
2302: CALL_OW 257
2306: PUSH
2307: LD_INT 3
2309: EQUAL
2310: IFFALSE 2414
// if fac then
2312: LD_VAR 0 7
2316: IFFALSE 2414
// begin if ct then
2318: LD_VAR 0 12
2322: IFFALSE 2350
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_VAR 0 12
2333: PUSH
2334: LD_INT 1
2336: ARRAY
2337: PPUSH
2338: CALL_OW 52
// placed := true ;
2342: LD_ADDR_VAR 0 11
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// end ; if placed then
2350: LD_VAR 0 11
2354: IFFALSE 2358
// continue ;
2356: GO 2102
// for j in fac do
2358: LD_ADDR_VAR 0 10
2362: PUSH
2363: LD_VAR 0 7
2367: PUSH
2368: FOR_IN
2369: IFFALSE 2412
// if UnitsInside ( j ) < 6 then
2371: LD_VAR 0 10
2375: PPUSH
2376: CALL_OW 313
2380: PUSH
2381: LD_INT 6
2383: LESS
2384: IFFALSE 2410
// begin PlaceHumanInUnit ( i , j ) ;
2386: LD_VAR 0 2
2390: PPUSH
2391: LD_VAR 0 10
2395: PPUSH
2396: CALL_OW 52
// placed := true ;
2400: LD_ADDR_VAR 0 11
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// break ;
2408: GO 2412
// end ;
2410: GO 2368
2412: POP
2413: POP
// end ; if GetClass ( i ) = 4 then
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL_OW 257
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2491
// if lab then
2429: LD_VAR 0 8
2433: IFFALSE 2491
// begin for j in lab do
2435: LD_ADDR_VAR 0 10
2439: PUSH
2440: LD_VAR 0 8
2444: PUSH
2445: FOR_IN
2446: IFFALSE 2489
// if UnitsInside ( j ) < 6 then
2448: LD_VAR 0 10
2452: PPUSH
2453: CALL_OW 313
2457: PUSH
2458: LD_INT 6
2460: LESS
2461: IFFALSE 2487
// begin PlaceHumanInUnit ( i , j ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 10
2472: PPUSH
2473: CALL_OW 52
// placed := true ;
2477: LD_ADDR_VAR 0 11
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// break ;
2485: GO 2489
// end ;
2487: GO 2445
2489: POP
2490: POP
// end ; if not placed then
2491: LD_VAR 0 11
2495: NOT
2496: IFFALSE 2522
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 5
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: CALL_OW 49
// ComHold ( i ) ;
2513: LD_VAR 0 2
2517: PPUSH
2518: CALL_OW 140
// end ; end ;
2522: GO 2102
2524: POP
2525: POP
// if ct then
2526: LD_VAR 0 12
2530: IFFALSE 2634
// if UnitsInside ( ct [ 1 ] ) then
2532: LD_VAR 0 12
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 313
2545: IFFALSE 2634
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2547: LD_ADDR_VAR 0 2
2551: PUSH
2552: LD_INT 22
2554: PUSH
2555: LD_INT 1
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 33
2564: PUSH
2565: LD_INT 2
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PUSH
2581: FOR_IN
2582: IFFALSE 2632
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_VAR 0 12
2593: PUSH
2594: LD_INT 1
2596: ARRAY
2597: PPUSH
2598: CALL_OW 313
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_VAR 0 12
2610: PUSH
2611: LD_INT 1
2613: ARRAY
2614: PPUSH
2615: CALL_OW 313
2619: PPUSH
2620: CALL_OW 12
2624: ARRAY
2625: PPUSH
2626: CALL_OW 135
2630: GO 2581
2632: POP
2633: POP
// end ; end ;
2634: LD_VAR 0 1
2638: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2639: LD_INT 0
2641: PPUSH
2642: PPUSH
2643: PPUSH
2644: PPUSH
2645: PPUSH
2646: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2647: LD_INT 71
2649: PPUSH
2650: LD_INT 5
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: LD_STRING GammaBase
2667: PPUSH
2668: EMPTY
2669: PPUSH
2670: CALL_OW 30
2674: ST_TO_ADDR
// if not blist then
2675: LD_VAR 0 2
2679: NOT
2680: IFFALSE 2720
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2682: LD_ADDR_VAR 0 2
2686: PUSH
2687: LD_INT 1
2689: PUSH
2690: LD_INT 52
2692: PUSH
2693: LD_INT 12
2695: PUSH
2696: LD_INT 3
2698: PUSH
2699: LD_INT 3
2701: PUSH
2702: LD_INT 0
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: ST_TO_ADDR
// uc_side := 1 ;
2720: LD_ADDR_OWVAR 20
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// uc_nation := 1 ;
2728: LD_ADDR_OWVAR 21
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// bc_kind1 := - 1 ;
2736: LD_ADDR_OWVAR 44
2740: PUSH
2741: LD_INT 1
2743: NEG
2744: ST_TO_ADDR
// bc_kind2 := - 1 ;
2745: LD_ADDR_OWVAR 45
2749: PUSH
2750: LD_INT 1
2752: NEG
2753: ST_TO_ADDR
// for i in blist do
2754: LD_ADDR_VAR 0 3
2758: PUSH
2759: LD_VAR 0 2
2763: PUSH
2764: FOR_IN
2765: IFFALSE 3041
// begin bc_type := i [ 1 ] ;
2767: LD_ADDR_OWVAR 42
2771: PUSH
2772: LD_VAR 0 3
2776: PUSH
2777: LD_INT 1
2779: ARRAY
2780: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2781: LD_ADDR_OWVAR 43
2785: PUSH
2786: LD_VAR 0 3
2790: PUSH
2791: LD_INT 5
2793: ARRAY
2794: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2795: LD_OWVAR 42
2799: PUSH
2800: LD_INT 6
2802: PUSH
2803: LD_INT 7
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: IN
2810: IFFALSE 2876
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2812: LD_STRING 06_remoteVehs_1
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 30
2822: NOT
2823: IFFALSE 2851
// begin bc_type := b_lab_full ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 8
2832: ST_TO_ADDR
// bc_kind1 := 10 ;
2833: LD_ADDR_OWVAR 44
2837: PUSH
2838: LD_INT 10
2840: ST_TO_ADDR
// bc_kind2 := 15 ;
2841: LD_ADDR_OWVAR 45
2845: PUSH
2846: LD_INT 15
2848: ST_TO_ADDR
// end else
2849: GO 2876
// begin bc_type := b_lab_half ;
2851: LD_ADDR_OWVAR 42
2855: PUSH
2856: LD_INT 7
2858: ST_TO_ADDR
// bc_kind1 := 10 ;
2859: LD_ADDR_OWVAR 44
2863: PUSH
2864: LD_INT 10
2866: ST_TO_ADDR
// bc_kind2 := - 1 ;
2867: LD_ADDR_OWVAR 45
2871: PUSH
2872: LD_INT 1
2874: NEG
2875: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2876: LD_OWVAR 42
2880: PUSH
2881: LD_INT 2
2883: EQUAL
2884: IFFALSE 2894
// bc_type := b_factory ;
2886: LD_ADDR_OWVAR 42
2890: PUSH
2891: LD_INT 3
2893: ST_TO_ADDR
// if bc_type = b_depot then
2894: LD_OWVAR 42
2898: PUSH
2899: LD_INT 0
2901: EQUAL
2902: IFFALSE 2951
// begin bc_type := b_warehouse ;
2904: LD_ADDR_OWVAR 42
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2912: LD_ADDR_EXP 37
2916: PUSH
2917: LD_VAR 0 3
2921: PUSH
2922: LD_INT 2
2924: ARRAY
2925: PPUSH
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 3
2933: ARRAY
2934: PPUSH
2935: LD_VAR 0 3
2939: PUSH
2940: LD_INT 4
2942: ARRAY
2943: PPUSH
2944: CALL_OW 47
2948: ST_TO_ADDR
// continue ;
2949: GO 2764
// end ; if bc_type = b_armoury then
2951: LD_OWVAR 42
2955: PUSH
2956: LD_INT 4
2958: EQUAL
2959: IFFALSE 2969
// bc_type = b_barracks ;
2961: LD_ADDR_OWVAR 42
2965: PUSH
2966: LD_INT 5
2968: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2969: LD_ADDR_VAR 0 4
2973: PUSH
2974: LD_VAR 0 3
2978: PUSH
2979: LD_INT 2
2981: ARRAY
2982: PPUSH
2983: LD_VAR 0 3
2987: PUSH
2988: LD_INT 3
2990: ARRAY
2991: PPUSH
2992: LD_VAR 0 3
2996: PUSH
2997: LD_INT 4
2999: ARRAY
3000: PPUSH
3001: CALL_OW 47
3005: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3006: LD_VAR 0 4
3010: PPUSH
3011: CALL_OW 266
3015: PUSH
3016: LD_INT 32
3018: EQUAL
3019: IFFALSE 3039
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 7
3033: ARRAY
3034: PPUSH
3035: CALL_OW 431
// end ;
3039: GO 2764
3041: POP
3042: POP
// if not amDepot then
3043: LD_EXP 37
3047: NOT
3048: IFFALSE 3085
// begin bc_type := b_warehouse ;
3050: LD_ADDR_OWVAR 42
3054: PUSH
3055: LD_INT 1
3057: ST_TO_ADDR
// bc_level := 6 ;
3058: LD_ADDR_OWVAR 43
3062: PUSH
3063: LD_INT 6
3065: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3066: LD_ADDR_EXP 37
3070: PUSH
3071: LD_INT 52
3073: PPUSH
3074: LD_INT 12
3076: PPUSH
3077: LD_INT 3
3079: PPUSH
3080: CALL_OW 47
3084: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3085: LD_EXP 37
3089: PPUSH
3090: LD_STRING gamma
3092: PPUSH
3093: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 , 280 ] [ Difficulty ] ) ;
3097: LD_EXP 37
3101: PPUSH
3102: CALL_OW 274
3106: PPUSH
3107: LD_INT 1
3109: PPUSH
3110: LD_INT 500
3112: PUSH
3113: LD_INT 420
3115: PUSH
3116: LD_INT 350
3118: PUSH
3119: LD_INT 280
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_OWVAR 67
3132: ARRAY
3133: PPUSH
3134: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3138: LD_EXP 37
3142: PPUSH
3143: CALL_OW 274
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 200
3153: PPUSH
3154: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3158: LD_INT 22
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 30
3170: PUSH
3171: LD_INT 3
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: IFFALSE 3434
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3188: LD_ADDR_VAR 0 4
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 30
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PPUSH
3217: CALL_OW 69
3221: PUSH
3222: LD_INT 1
3224: ARRAY
3225: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3226: LD_ADDR_VAR 0 6
3230: PUSH
3231: LD_VAR 0 4
3235: PPUSH
3236: CALL_OW 250
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: CALL_OW 251
3250: PPUSH
3251: LD_VAR 0 4
3255: PPUSH
3256: CALL_OW 254
3260: PPUSH
3261: CALL 79403 0 3
3265: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3266: LD_ADDR_VAR 0 2
3270: PUSH
3271: LD_INT 19
3273: PUSH
3274: LD_INT 17
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3281: LD_STRING 06_remoteVehs_1
3283: PPUSH
3284: LD_INT 0
3286: PPUSH
3287: CALL_OW 30
3291: IFFALSE 3314
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3293: LD_ADDR_VAR 0 2
3297: PUSH
3298: LD_VAR 0 2
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 22
3308: PPUSH
3309: CALL_OW 2
3313: ST_TO_ADDR
// for i in tmp do
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: LD_VAR 0 6
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3432
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3327: LD_VAR 0 3
3331: PUSH
3332: LD_INT 1
3334: ARRAY
3335: PPUSH
3336: LD_VAR 0 3
3340: PUSH
3341: LD_INT 2
3343: ARRAY
3344: PPUSH
3345: CALL_OW 428
3349: PUSH
3350: LD_INT 0
3352: EQUAL
3353: IFFALSE 3430
// begin bc_type := blist [ 1 ] ;
3355: LD_ADDR_OWVAR 42
3359: PUSH
3360: LD_VAR 0 2
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_VAR 0 3
3382: PUSH
3383: LD_INT 2
3385: ARRAY
3386: PPUSH
3387: LD_VAR 0 3
3391: PUSH
3392: LD_INT 3
3394: ARRAY
3395: PPUSH
3396: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: LD_VAR 0 2
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: CALL_OW 3
3417: ST_TO_ADDR
// if blist = 0 then
3418: LD_VAR 0 2
3422: PUSH
3423: LD_INT 0
3425: EQUAL
3426: IFFALSE 3430
// break ;
3428: GO 3432
// end ;
3430: GO 3324
3432: POP
3433: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3434: LD_STRING 06_remoteVehs_1
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 30
3444: IFFALSE 3911
// begin bc_type = 36 ;
3446: LD_ADDR_OWVAR 42
3450: PUSH
3451: LD_INT 36
3453: ST_TO_ADDR
// bc_level = 4 ;
3454: LD_ADDR_OWVAR 43
3458: PUSH
3459: LD_INT 4
3461: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3462: LD_EXP 37
3466: PPUSH
3467: LD_INT 36
3469: PPUSH
3470: LD_INT 62
3472: PPUSH
3473: LD_INT 12
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL 17162 0 6
3486: PUSH
3487: LD_INT 92
3489: PUSH
3490: LD_INT 62
3492: PUSH
3493: LD_INT 12
3495: PUSH
3496: LD_INT 3
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: NOT
3510: AND
3511: IFFALSE 3528
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3513: LD_INT 62
3515: PPUSH
3516: LD_INT 12
3518: PPUSH
3519: LD_INT 3
3521: PPUSH
3522: CALL_OW 47
3526: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3528: LD_EXP 37
3532: PPUSH
3533: LD_INT 36
3535: PPUSH
3536: LD_INT 37
3538: PPUSH
3539: LD_INT 18
3541: PPUSH
3542: LD_INT 2
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL 17162 0 6
3552: PUSH
3553: LD_INT 92
3555: PUSH
3556: LD_INT 37
3558: PUSH
3559: LD_INT 18
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: PPUSH
3571: CALL_OW 69
3575: NOT
3576: AND
3577: IFFALSE 3594
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3579: LD_INT 37
3581: PPUSH
3582: LD_INT 18
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: CALL_OW 47
3592: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3594: LD_EXP 37
3598: PPUSH
3599: LD_INT 36
3601: PPUSH
3602: LD_INT 66
3604: PPUSH
3605: LD_INT 14
3607: PPUSH
3608: LD_INT 4
3610: PPUSH
3611: LD_INT 0
3613: PPUSH
3614: CALL 17162 0 6
3618: PUSH
3619: LD_INT 92
3621: PUSH
3622: LD_INT 66
3624: PUSH
3625: LD_INT 14
3627: PUSH
3628: LD_INT 3
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 69
3641: NOT
3642: AND
3643: IFFALSE 3660
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3645: LD_INT 66
3647: PPUSH
3648: LD_INT 14
3650: PPUSH
3651: LD_INT 4
3653: PPUSH
3654: CALL_OW 47
3658: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3660: LD_EXP 37
3664: PPUSH
3665: LD_INT 36
3667: PPUSH
3668: LD_INT 74
3670: PPUSH
3671: LD_INT 26
3673: PPUSH
3674: LD_INT 4
3676: PPUSH
3677: LD_INT 0
3679: PPUSH
3680: CALL 17162 0 6
3684: IFFALSE 3699
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3686: LD_INT 74
3688: PPUSH
3689: LD_INT 26
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3699: LD_INT 22
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: LD_INT 30
3711: PUSH
3712: LD_INT 36
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PPUSH
3723: CALL_OW 69
3727: NOT
3728: IFFALSE 3732
// exit ;
3730: GO 3911
// for i := 1 to [ 3 , 2 , 2 , 1 ] [ Difficulty ] do
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: DOUBLE
3738: LD_INT 1
3740: DEC
3741: ST_TO_ADDR
3742: LD_INT 3
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: LD_INT 2
3750: PUSH
3751: LD_INT 1
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: PUSH
3760: LD_OWVAR 67
3764: ARRAY
3765: PUSH
3766: FOR_TO
3767: IFFALSE 3909
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 , 2 ] [ Difficulty ] ;
3769: LD_ADDR_OWVAR 37
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: LD_INT 3
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 1
3789: PPUSH
3790: LD_INT 2
3792: PPUSH
3793: CALL_OW 12
3797: ARRAY
3798: PUSH
3799: LD_INT 2
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: PUSH
3811: LD_OWVAR 67
3815: ARRAY
3816: ST_TO_ADDR
// vc_engine = 1 ;
3817: LD_ADDR_OWVAR 39
3821: PUSH
3822: LD_INT 1
3824: ST_TO_ADDR
// vc_control = 2 ;
3825: LD_ADDR_OWVAR 38
3829: PUSH
3830: LD_INT 2
3832: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3833: LD_ADDR_OWVAR 40
3837: PUSH
3838: LD_INT 3
3840: PUSH
3841: LD_INT 4
3843: PUSH
3844: LD_INT 5
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_INT 3
3857: PPUSH
3858: CALL_OW 12
3862: ARRAY
3863: ST_TO_ADDR
// veh = CreateVehicle ;
3864: LD_ADDR_VAR 0 5
3868: PUSH
3869: CALL_OW 45
3873: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3874: LD_VAR 0 5
3878: PPUSH
3879: LD_INT 4
3881: PPUSH
3882: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3886: LD_VAR 0 5
3890: PPUSH
3891: LD_INT 56
3893: PPUSH
3894: LD_INT 17
3896: PPUSH
3897: LD_INT 9
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 50
// end ;
3907: GO 3766
3909: POP
3910: POP
// end ; end ;
3911: LD_VAR 0 1
3915: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
3921: PPUSH
// uc_side = 1 ;
3922: LD_ADDR_OWVAR 20
3926: PUSH
3927: LD_INT 1
3929: ST_TO_ADDR
// uc_nation = 1 ;
3930: LD_ADDR_OWVAR 21
3934: PUSH
3935: LD_INT 1
3937: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3938: LD_ADDR_EXP 14
3942: PUSH
3943: LD_STRING Denis
3945: PPUSH
3946: LD_INT 1
3948: PPUSH
3949: LD_STRING 06c_
3951: PPUSH
3952: CALL 45030 0 3
3956: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3957: LD_EXP 14
3961: PPUSH
3962: LD_INT 4
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3972: LD_ADDR_EXP 15
3976: PUSH
3977: LD_STRING Joan
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_STRING 06c_
3985: PPUSH
3986: CALL 45030 0 3
3990: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3991: LD_EXP 15
3995: PPUSH
3996: LD_INT 4
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4006: LD_STRING GladstoneIn07
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 30
4016: NOT
4017: IFFALSE 4091
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4019: LD_ADDR_EXP 8
4023: PUSH
4024: LD_STRING Gladstone
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_STRING 06c_
4032: PPUSH
4033: CALL 45030 0 3
4037: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4038: LD_EXP 8
4042: NOT
4043: PUSH
4044: LD_STRING GladstoneStayInDelta
4046: PPUSH
4047: LD_INT 0
4049: PPUSH
4050: CALL_OW 30
4054: AND
4055: IFFALSE 4076
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4057: LD_ADDR_EXP 8
4061: PUSH
4062: LD_STRING Gladstone
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: LD_STRING 05_
4070: PPUSH
4071: CALL 45030 0 3
4075: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4076: LD_EXP 8
4080: PPUSH
4081: LD_INT 4
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4091: LD_STRING LisaStayInDelta
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 30
4101: IFFALSE 4137
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4103: LD_ADDR_EXP 6
4107: PUSH
4108: LD_STRING Lisa
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_STRING 05_
4116: PPUSH
4117: CALL 45030 0 3
4121: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4122: LD_EXP 6
4126: PPUSH
4127: LD_INT 4
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4137: LD_STRING BobbyStayInDelta
4139: PPUSH
4140: LD_INT 0
4142: PPUSH
4143: CALL_OW 30
4147: IFFALSE 4183
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4149: LD_ADDR_EXP 4
4153: PUSH
4154: LD_STRING Bobby
4156: PPUSH
4157: LD_INT 1
4159: PPUSH
4160: LD_STRING 05_
4162: PPUSH
4163: CALL 45030 0 3
4167: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4168: LD_EXP 4
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4183: LD_STRING CyrusStayInDelta
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 30
4193: IFFALSE 4229
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4195: LD_ADDR_EXP 5
4199: PUSH
4200: LD_STRING Cyrus
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: LD_STRING 05_
4208: PPUSH
4209: CALL 45030 0 3
4213: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4214: LD_EXP 5
4218: PPUSH
4219: LD_INT 4
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4229: LD_STRING BrownStayInDelta
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 30
4239: IFFALSE 4275
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4241: LD_ADDR_EXP 2
4245: PUSH
4246: LD_STRING Brown
4248: PPUSH
4249: LD_INT 1
4251: PPUSH
4252: LD_STRING 05_
4254: PPUSH
4255: CALL 45030 0 3
4259: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4260: LD_EXP 2
4264: PPUSH
4265: LD_INT 4
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4275: LD_STRING DonaldsonStayInDelta
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 30
4285: IFFALSE 4321
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4287: LD_ADDR_EXP 3
4291: PUSH
4292: LD_STRING Donaldson
4294: PPUSH
4295: LD_INT 1
4297: PPUSH
4298: LD_STRING 05_
4300: PPUSH
4301: CALL 45030 0 3
4305: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4306: LD_EXP 3
4310: PPUSH
4311: LD_INT 4
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: LD_STRING OthersStayInDelta
4328: PPUSH
4329: CALL_OW 31
4333: ST_TO_ADDR
// if other > 2 then
4334: LD_VAR 0 4
4338: PUSH
4339: LD_INT 2
4341: GREATER
4342: IFFALSE 4387
// begin for j = 1 to 2 do
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: DOUBLE
4350: LD_INT 1
4352: DEC
4353: ST_TO_ADDR
4354: LD_INT 2
4356: PUSH
4357: FOR_TO
4358: IFFALSE 4383
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4360: LD_VAR 0 4
4364: PUSH
4365: LD_VAR 0 3
4369: ARRAY
4370: PPUSH
4371: LD_INT 4
4373: PPUSH
4374: LD_INT 0
4376: PPUSH
4377: CALL_OW 49
4381: GO 4357
4383: POP
4384: POP
// end else
4385: GO 4430
// begin for j = 1 to other do
4387: LD_ADDR_VAR 0 3
4391: PUSH
4392: DOUBLE
4393: LD_INT 1
4395: DEC
4396: ST_TO_ADDR
4397: LD_VAR 0 4
4401: PUSH
4402: FOR_TO
4403: IFFALSE 4428
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4405: LD_VAR 0 4
4409: PUSH
4410: LD_VAR 0 3
4414: ARRAY
4415: PPUSH
4416: LD_INT 4
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL_OW 49
4426: GO 4402
4428: POP
4429: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4430: LD_ADDR_VAR 0 4
4434: PUSH
4435: LD_STRING 06_other_apemans
4437: PPUSH
4438: CALL_OW 31
4442: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
4443: LD_VAR 0 4
4447: PUSH
4448: LD_INT 5
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: LD_INT 3
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PUSH
4466: LD_OWVAR 67
4470: ARRAY
4471: GREATEREQUAL
4472: IFFALSE 4505
// j := [ 5 , 4 , 3 , 3 ] [ Difficulty ] else
4474: LD_ADDR_VAR 0 3
4478: PUSH
4479: LD_INT 5
4481: PUSH
4482: LD_INT 4
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 3
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_OWVAR 67
4501: ARRAY
4502: ST_TO_ADDR
4503: GO 4515
// j := other ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: LD_VAR 0 4
4514: ST_TO_ADDR
// for i = 1 to j do
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_VAR 0 3
4529: PUSH
4530: FOR_TO
4531: IFFALSE 4556
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4533: LD_VAR 0 4
4537: PUSH
4538: LD_VAR 0 2
4542: ARRAY
4543: PPUSH
4544: LD_INT 4
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
4554: GO 4530
4556: POP
4557: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4558: LD_INT 4
4560: PPUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 70
4589: PPUSH
4590: LD_INT 53
4592: PPUSH
4593: LD_INT 19
4595: PPUSH
4596: CALL_OW 111
// firstAttack = 1 ;
4600: LD_ADDR_EXP 33
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// end ;
4608: LD_VAR 0 1
4612: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4613: LD_INT 0
4615: PPUSH
4616: PPUSH
4617: PPUSH
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4624: LD_ADDR_VAR 0 8
4628: PUSH
4629: LD_STRING 07_vehicles
4631: PPUSH
4632: EMPTY
4633: PPUSH
4634: CALL_OW 30
4638: ST_TO_ADDR
// macmilan_squad := [ ] ;
4639: LD_ADDR_EXP 42
4643: PUSH
4644: EMPTY
4645: ST_TO_ADDR
// tmp := [ ] ;
4646: LD_ADDR_VAR 0 6
4650: PUSH
4651: EMPTY
4652: ST_TO_ADDR
// tmp_vehs := [ ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: EMPTY
4659: ST_TO_ADDR
// uc_side := 1 ;
4660: LD_ADDR_OWVAR 20
4664: PUSH
4665: LD_INT 1
4667: ST_TO_ADDR
// uc_nation := 1 ;
4668: LD_ADDR_OWVAR 21
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// if vehicles then
4676: LD_VAR 0 8
4680: IFFALSE 4839
// begin k := 1 ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_VAR 0 8
4704: PUSH
4705: LD_INT 4
4707: DIV
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4837
// begin vc_chassis = vehicles [ k ] ;
4712: LD_ADDR_OWVAR 37
4716: PUSH
4717: LD_VAR 0 8
4721: PUSH
4722: LD_VAR 0 3
4726: ARRAY
4727: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4728: LD_ADDR_OWVAR 39
4732: PUSH
4733: LD_VAR 0 8
4737: PUSH
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 1
4745: PLUS
4746: ARRAY
4747: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4748: LD_ADDR_OWVAR 38
4752: PUSH
4753: LD_VAR 0 8
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_INT 2
4765: PLUS
4766: ARRAY
4767: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4768: LD_ADDR_OWVAR 40
4772: PUSH
4773: LD_VAR 0 8
4777: PUSH
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 3
4785: PLUS
4786: ARRAY
4787: ST_TO_ADDR
// k := k + 4 ;
4788: LD_ADDR_VAR 0 3
4792: PUSH
4793: LD_VAR 0 3
4797: PUSH
4798: LD_INT 4
4800: PLUS
4801: ST_TO_ADDR
// veh := CreateVehicle ;
4802: LD_ADDR_VAR 0 9
4806: PUSH
4807: CALL_OW 45
4811: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4812: LD_ADDR_VAR 0 7
4816: PUSH
4817: LD_VAR 0 7
4821: PPUSH
4822: LD_INT 1
4824: PPUSH
4825: LD_VAR 0 9
4829: PPUSH
4830: CALL_OW 2
4834: ST_TO_ADDR
// end ;
4835: GO 4709
4837: POP
4838: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4839: LD_ADDR_EXP 1
4843: PUSH
4844: LD_STRING JMM
4846: PPUSH
4847: LD_INT 1
4849: PPUSH
4850: LD_EXP 44
4854: PPUSH
4855: CALL 45030 0 3
4859: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4860: LD_EXP 12
4864: PUSH
4865: LD_INT 1
4867: EQUAL
4868: PUSH
4869: LD_EXP 12
4873: PUSH
4874: LD_INT 3
4876: EQUAL
4877: OR
4878: PUSH
4879: LD_EXP 2
4883: NOT
4884: AND
4885: IFFALSE 4943
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4887: LD_ADDR_EXP 2
4891: PUSH
4892: LD_STRING Brown
4894: PPUSH
4895: LD_INT 1
4897: PPUSH
4898: LD_EXP 44
4902: PPUSH
4903: CALL 45030 0 3
4907: ST_TO_ADDR
// if Brown then
4908: LD_EXP 2
4912: IFFALSE 4943
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_VAR 0 6
4923: PPUSH
4924: LD_VAR 0 6
4928: PUSH
4929: LD_INT 1
4931: PLUS
4932: PPUSH
4933: LD_EXP 2
4937: PPUSH
4938: CALL_OW 1
4942: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4943: LD_EXP 12
4947: PUSH
4948: LD_INT 2
4950: EQUAL
4951: PUSH
4952: LD_EXP 12
4956: PUSH
4957: LD_INT 3
4959: EQUAL
4960: OR
4961: PUSH
4962: LD_EXP 3
4966: NOT
4967: AND
4968: IFFALSE 5026
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4970: LD_ADDR_EXP 3
4974: PUSH
4975: LD_STRING Donaldson
4977: PPUSH
4978: LD_INT 1
4980: PPUSH
4981: LD_EXP 44
4985: PPUSH
4986: CALL 45030 0 3
4990: ST_TO_ADDR
// if Donaldson then
4991: LD_EXP 3
4995: IFFALSE 5026
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
4997: LD_ADDR_VAR 0 6
5001: PUSH
5002: LD_VAR 0 6
5006: PPUSH
5007: LD_VAR 0 6
5011: PUSH
5012: LD_INT 1
5014: PLUS
5015: PPUSH
5016: LD_EXP 3
5020: PPUSH
5021: CALL_OW 1
5025: ST_TO_ADDR
// end ; if not Bobby then
5026: LD_EXP 4
5030: NOT
5031: IFFALSE 5089
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
5033: LD_ADDR_EXP 4
5037: PUSH
5038: LD_STRING Bobby
5040: PPUSH
5041: LD_INT 1
5043: PPUSH
5044: LD_EXP 44
5048: PPUSH
5049: CALL 45030 0 3
5053: ST_TO_ADDR
// if Bobby then
5054: LD_EXP 4
5058: IFFALSE 5089
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5060: LD_ADDR_VAR 0 6
5064: PUSH
5065: LD_VAR 0 6
5069: PPUSH
5070: LD_VAR 0 6
5074: PUSH
5075: LD_INT 1
5077: PLUS
5078: PPUSH
5079: LD_EXP 4
5083: PPUSH
5084: CALL_OW 1
5088: ST_TO_ADDR
// end ; if not Cyrus then
5089: LD_EXP 5
5093: NOT
5094: IFFALSE 5152
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5096: LD_ADDR_EXP 5
5100: PUSH
5101: LD_STRING Cyrus
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_EXP 44
5111: PPUSH
5112: CALL 45030 0 3
5116: ST_TO_ADDR
// if Cyrus then
5117: LD_EXP 5
5121: IFFALSE 5152
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5123: LD_ADDR_VAR 0 6
5127: PUSH
5128: LD_VAR 0 6
5132: PPUSH
5133: LD_VAR 0 6
5137: PUSH
5138: LD_INT 1
5140: PLUS
5141: PPUSH
5142: LD_EXP 5
5146: PPUSH
5147: CALL_OW 1
5151: ST_TO_ADDR
// end ; if not Lisa then
5152: LD_EXP 6
5156: NOT
5157: IFFALSE 5215
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5159: LD_ADDR_EXP 6
5163: PUSH
5164: LD_STRING Lisa
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: LD_EXP 44
5174: PPUSH
5175: CALL 45030 0 3
5179: ST_TO_ADDR
// if Lisa then
5180: LD_EXP 6
5184: IFFALSE 5215
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5186: LD_ADDR_VAR 0 6
5190: PUSH
5191: LD_VAR 0 6
5195: PPUSH
5196: LD_VAR 0 6
5200: PUSH
5201: LD_INT 1
5203: PLUS
5204: PPUSH
5205: LD_EXP 6
5209: PPUSH
5210: CALL_OW 1
5214: ST_TO_ADDR
// end ; if not Frank then
5215: LD_EXP 7
5219: NOT
5220: IFFALSE 5278
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5222: LD_ADDR_EXP 7
5226: PUSH
5227: LD_STRING Frank
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: LD_EXP 44
5237: PPUSH
5238: CALL 45030 0 3
5242: ST_TO_ADDR
// if Frank then
5243: LD_EXP 7
5247: IFFALSE 5278
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5249: LD_ADDR_VAR 0 6
5253: PUSH
5254: LD_VAR 0 6
5258: PPUSH
5259: LD_VAR 0 6
5263: PUSH
5264: LD_INT 1
5266: PLUS
5267: PPUSH
5268: LD_EXP 7
5272: PPUSH
5273: CALL_OW 1
5277: ST_TO_ADDR
// end ; if not Kikuchi then
5278: LD_EXP 9
5282: NOT
5283: IFFALSE 5341
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5285: LD_ADDR_EXP 9
5289: PUSH
5290: LD_STRING Kikuchi
5292: PPUSH
5293: LD_INT 1
5295: PPUSH
5296: LD_EXP 44
5300: PPUSH
5301: CALL 45030 0 3
5305: ST_TO_ADDR
// if Kikuchi then
5306: LD_EXP 9
5310: IFFALSE 5341
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5312: LD_ADDR_VAR 0 6
5316: PUSH
5317: LD_VAR 0 6
5321: PPUSH
5322: LD_VAR 0 6
5326: PUSH
5327: LD_INT 1
5329: PLUS
5330: PPUSH
5331: LD_EXP 9
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// end ; if not Gladstone then
5341: LD_EXP 8
5345: NOT
5346: IFFALSE 5404
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5348: LD_ADDR_EXP 8
5352: PUSH
5353: LD_STRING Gladstone
5355: PPUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_EXP 44
5363: PPUSH
5364: CALL 45030 0 3
5368: ST_TO_ADDR
// if Gladstone then
5369: LD_EXP 8
5373: IFFALSE 5404
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5375: LD_ADDR_VAR 0 6
5379: PUSH
5380: LD_VAR 0 6
5384: PPUSH
5385: LD_VAR 0 6
5389: PUSH
5390: LD_INT 1
5392: PLUS
5393: PPUSH
5394: LD_EXP 8
5398: PPUSH
5399: CALL_OW 1
5403: ST_TO_ADDR
// end ; if not Khatam then
5404: LD_EXP 10
5408: NOT
5409: IFFALSE 5467
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5411: LD_ADDR_EXP 10
5415: PUSH
5416: LD_STRING Khatam
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: LD_EXP 44
5426: PPUSH
5427: CALL 45030 0 3
5431: ST_TO_ADDR
// if Khatam then
5432: LD_EXP 10
5436: IFFALSE 5467
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5438: LD_ADDR_VAR 0 6
5442: PUSH
5443: LD_VAR 0 6
5447: PPUSH
5448: LD_VAR 0 6
5452: PUSH
5453: LD_INT 1
5455: PLUS
5456: PPUSH
5457: LD_EXP 10
5461: PPUSH
5462: CALL_OW 1
5466: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5467: LD_ADDR_VAR 0 5
5471: PUSH
5472: LD_STRING 07c_others
5474: PPUSH
5475: CALL_OW 31
5479: ST_TO_ADDR
// macmilan_squad := others ;
5480: LD_ADDR_EXP 42
5484: PUSH
5485: LD_VAR 0 5
5489: ST_TO_ADDR
// if others then
5490: LD_VAR 0 5
5494: IFFALSE 5582
// for i in others do
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_VAR 0 5
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5580
// if GetClass ( i ) = 3 then
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 257
5518: PUSH
5519: LD_INT 3
5521: EQUAL
5522: IFFALSE 5549
// tmp := Insert ( tmp , 1 , i ) else
5524: LD_ADDR_VAR 0 6
5528: PUSH
5529: LD_VAR 0 6
5533: PPUSH
5534: LD_INT 1
5536: PPUSH
5537: LD_VAR 0 2
5541: PPUSH
5542: CALL_OW 2
5546: ST_TO_ADDR
5547: GO 5578
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5549: LD_ADDR_VAR 0 6
5553: PUSH
5554: LD_VAR 0 6
5558: PPUSH
5559: LD_VAR 0 6
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: PPUSH
5568: LD_VAR 0 2
5572: PPUSH
5573: CALL_OW 1
5577: ST_TO_ADDR
5578: GO 5506
5580: POP
5581: POP
// if FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) then
5582: LD_INT 4
5584: PPUSH
5585: LD_INT 21
5587: PUSH
5588: LD_INT 3
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 70
5599: IFFALSE 5640
// for i in FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) do
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 21
5611: PUSH
5612: LD_INT 3
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 70
5623: PUSH
5624: FOR_IN
5625: IFFALSE 5638
// RemoveUnit ( i ) ;
5627: LD_VAR 0 2
5631: PPUSH
5632: CALL_OW 64
5636: GO 5624
5638: POP
5639: POP
// wait ( 0 0$1 ) ;
5640: LD_INT 35
5642: PPUSH
5643: CALL_OW 67
// if tmp then
5647: LD_VAR 0 6
5651: IFFALSE 5836
// begin for i in tmp do
5653: LD_ADDR_VAR 0 2
5657: PUSH
5658: LD_VAR 0 6
5662: PUSH
5663: FOR_IN
5664: IFFALSE 5834
// begin SetDir ( i , 3 ) ;
5666: LD_VAR 0 2
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 233
// if tmp_vehs then
5678: LD_VAR 0 7
5682: IFFALSE 5760
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5684: LD_VAR 0 7
5688: PUSH
5689: LD_INT 1
5691: ARRAY
5692: PPUSH
5693: LD_INT 3
5695: PPUSH
5696: CALL_OW 233
// PlaceUnitXY ( tmp_vehs [ 1 ] , 78 , 5 , false ) ;
5700: LD_VAR 0 7
5704: PUSH
5705: LD_INT 1
5707: ARRAY
5708: PPUSH
5709: LD_INT 78
5711: PPUSH
5712: LD_INT 5
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 48
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5722: LD_VAR 0 2
5726: PPUSH
5727: LD_VAR 0 7
5731: PUSH
5732: LD_INT 1
5734: ARRAY
5735: PPUSH
5736: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5740: LD_ADDR_VAR 0 7
5744: PUSH
5745: LD_VAR 0 7
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 3
5757: ST_TO_ADDR
// end else
5758: GO 5775
// PlaceUnitArea ( i , GammaSupport , false ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: LD_INT 4
5767: PPUSH
5768: LD_INT 0
5770: PPUSH
5771: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5775: LD_VAR 0 2
5779: PPUSH
5780: LD_INT 77
5782: PPUSH
5783: LD_INT 16
5785: PPUSH
5786: CALL_OW 111
// AddComMoveXY ( i , 65 , 24 ) ;
5790: LD_VAR 0 2
5794: PPUSH
5795: LD_INT 65
5797: PPUSH
5798: LD_INT 24
5800: PPUSH
5801: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5805: LD_INT 35
5807: PPUSH
5808: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5812: LD_INT 4
5814: PPUSH
5815: LD_INT 22
5817: PUSH
5818: LD_INT 1
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 70
5829: NOT
5830: IFFALSE 5805
// end ;
5832: GO 5663
5834: POP
5835: POP
// end ; PlaceUnitArea ( JMM , GammaSupport , false ) ;
5836: LD_EXP 1
5840: PPUSH
5841: LD_INT 4
5843: PPUSH
5844: LD_INT 0
5846: PPUSH
5847: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_INT 77
5858: PPUSH
5859: LD_INT 16
5861: PPUSH
5862: CALL_OW 111
// end ;
5866: LD_VAR 0 1
5870: RET
// export function PrepareSikorsky ; begin
5871: LD_INT 0
5873: PPUSH
// uc_side = 4 ;
5874: LD_ADDR_OWVAR 20
5878: PUSH
5879: LD_INT 4
5881: ST_TO_ADDR
// uc_nation = 1 ;
5882: LD_ADDR_OWVAR 21
5886: PUSH
5887: LD_INT 1
5889: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5890: LD_ADDR_EXP 16
5894: PUSH
5895: LD_STRING Sikorski
5897: PPUSH
5898: LD_INT 0
5900: PPUSH
5901: LD_STRING 
5903: PPUSH
5904: CALL 45030 0 3
5908: ST_TO_ADDR
// vc_engine = 1 ;
5909: LD_ADDR_OWVAR 39
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_control = 1 ;
5917: LD_ADDR_OWVAR 38
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 , 4 ] [ Difficulty ] ;
5925: LD_ADDR_OWVAR 40
5929: PUSH
5930: LD_INT 5
5932: PUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: LD_OWVAR 67
5952: ARRAY
5953: ST_TO_ADDR
// vc_chassis = 4 ;
5954: LD_ADDR_OWVAR 37
5958: PUSH
5959: LD_INT 4
5961: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5962: LD_ADDR_EXP 17
5966: PUSH
5967: CALL_OW 45
5971: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5972: LD_EXP 17
5976: PPUSH
5977: LD_INT 3
5979: PPUSH
5980: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5984: LD_INT 35
5986: PPUSH
5987: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5991: LD_EXP 17
5995: PPUSH
5996: LD_INT 18
5998: PPUSH
5999: LD_INT 5
6001: PPUSH
6002: LD_INT 0
6004: PPUSH
6005: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
6009: LD_EXP 17
6013: PPUSH
6014: CALL_OW 305
6018: IFFALSE 5984
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
6020: LD_EXP 16
6024: PPUSH
6025: LD_EXP 17
6029: PPUSH
6030: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
6034: LD_EXP 17
6038: PPUSH
6039: LD_INT 5
6041: PPUSH
6042: CALL_OW 113
// end ;
6046: LD_VAR 0 1
6050: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
6051: LD_INT 0
6053: PPUSH
6054: PPUSH
6055: PPUSH
6056: PPUSH
// InitHc ;
6057: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 , 3 ] [ Difficulty ] do
6061: LD_ADDR_VAR 0 2
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_INT 5
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: LD_INT 4
6079: PUSH
6080: LD_INT 3
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_OWVAR 67
6093: ARRAY
6094: PUSH
6095: FOR_TO
6096: IFFALSE 6212
// begin uc_side = 4 ;
6098: LD_ADDR_OWVAR 20
6102: PUSH
6103: LD_INT 4
6105: ST_TO_ADDR
// uc_nation = 1 ;
6106: LD_ADDR_OWVAR 21
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// hc_name =  ;
6114: LD_ADDR_OWVAR 26
6118: PUSH
6119: LD_STRING 
6121: ST_TO_ADDR
// hc_gallery =  ;
6122: LD_ADDR_OWVAR 33
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6130: LD_INT 0
6132: PPUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_INT 5
6138: PPUSH
6139: LD_INT 8
6141: PPUSH
6142: CALL_OW 12
6146: PPUSH
6147: CALL_OW 380
// un = CreateHuman ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: CALL_OW 44
6160: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6161: LD_VAR 0 3
6165: PPUSH
6166: LD_INT 3
6168: PPUSH
6169: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_INT 9
6180: PPUSH
6181: LD_INT 0
6183: PPUSH
6184: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6188: LD_VAR 0 3
6192: PPUSH
6193: LD_INT 53
6195: PPUSH
6196: LD_INT 23
6198: PPUSH
6199: CALL_OW 111
// wait ( 0 0$1 ) ;
6203: LD_INT 35
6205: PPUSH
6206: CALL_OW 67
// end ;
6210: GO 6095
6212: POP
6213: POP
// for i = 1 to 2 do
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: DOUBLE
6220: LD_INT 1
6222: DEC
6223: ST_TO_ADDR
6224: LD_INT 2
6226: PUSH
6227: FOR_TO
6228: IFFALSE 6344
// begin uc_side = 4 ;
6230: LD_ADDR_OWVAR 20
6234: PUSH
6235: LD_INT 4
6237: ST_TO_ADDR
// uc_nation = 1 ;
6238: LD_ADDR_OWVAR 21
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// hc_name =  ;
6246: LD_ADDR_OWVAR 26
6250: PUSH
6251: LD_STRING 
6253: ST_TO_ADDR
// hc_gallery =  ;
6254: LD_ADDR_OWVAR 33
6258: PUSH
6259: LD_STRING 
6261: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 4
6267: PPUSH
6268: LD_INT 5
6270: PPUSH
6271: LD_INT 8
6273: PPUSH
6274: CALL_OW 12
6278: PPUSH
6279: CALL_OW 380
// un = CreateHuman ;
6283: LD_ADDR_VAR 0 3
6287: PUSH
6288: CALL_OW 44
6292: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6293: LD_VAR 0 3
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6305: LD_VAR 0 3
6309: PPUSH
6310: LD_INT 9
6312: PPUSH
6313: LD_INT 0
6315: PPUSH
6316: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6320: LD_VAR 0 3
6324: PPUSH
6325: LD_INT 53
6327: PPUSH
6328: LD_INT 23
6330: PPUSH
6331: CALL_OW 111
// wait ( 0 0$1 ) ;
6335: LD_INT 35
6337: PPUSH
6338: CALL_OW 67
// end ;
6342: GO 6227
6344: POP
6345: POP
// for i = 1 to [ 5 , 5 , 4 , 3 ] [ Difficulty ] do
6346: LD_ADDR_VAR 0 2
6350: PUSH
6351: DOUBLE
6352: LD_INT 1
6354: DEC
6355: ST_TO_ADDR
6356: LD_INT 5
6358: PUSH
6359: LD_INT 5
6361: PUSH
6362: LD_INT 4
6364: PUSH
6365: LD_INT 3
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: LD_OWVAR 67
6378: ARRAY
6379: PUSH
6380: FOR_TO
6381: IFFALSE 6615
// begin uc_side = 4 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 4
6390: ST_TO_ADDR
// uc_nation = 1 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// vc_engine = 1 ;
6399: LD_ADDR_OWVAR 39
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// vc_control = 1 ;
6407: LD_ADDR_OWVAR 38
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6415: LD_ADDR_OWVAR 40
6419: PUSH
6420: LD_INT 7
6422: PUSH
6423: LD_INT 4
6425: PUSH
6426: LD_INT 5
6428: PUSH
6429: LD_INT 6
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_VAR 0 2
6442: PUSH
6443: LD_INT 4
6445: MOD
6446: PUSH
6447: LD_INT 1
6449: PLUS
6450: ARRAY
6451: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6452: LD_ADDR_OWVAR 37
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 3
6462: PUSH
6463: LD_INT 4
6465: PUSH
6466: LD_INT 4
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_VAR 0 2
6479: PUSH
6480: LD_INT 4
6482: MOD
6483: PUSH
6484: LD_INT 1
6486: PLUS
6487: ARRAY
6488: ST_TO_ADDR
// veh = CreateVehicle ;
6489: LD_ADDR_VAR 0 4
6493: PUSH
6494: CALL_OW 45
6498: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 3
6506: PPUSH
6507: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 9
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// InitHc ;
6526: CALL_OW 19
// hc_name =  ;
6530: LD_ADDR_OWVAR 26
6534: PUSH
6535: LD_STRING 
6537: ST_TO_ADDR
// hc_gallery =  ;
6538: LD_ADDR_OWVAR 33
6542: PUSH
6543: LD_STRING 
6545: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6546: LD_INT 0
6548: PPUSH
6549: LD_INT 3
6551: PPUSH
6552: LD_INT 5
6554: PPUSH
6555: LD_INT 8
6557: PPUSH
6558: CALL_OW 12
6562: PPUSH
6563: CALL_OW 380
// un = CreateHuman ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: CALL_OW 44
6576: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6577: LD_VAR 0 3
6581: PPUSH
6582: LD_VAR 0 4
6586: PPUSH
6587: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6591: LD_VAR 0 3
6595: PPUSH
6596: LD_INT 53
6598: PPUSH
6599: LD_INT 23
6601: PPUSH
6602: CALL_OW 111
// wait ( 0 0$5 ) ;
6606: LD_INT 175
6608: PPUSH
6609: CALL_OW 67
// end ;
6613: GO 6380
6615: POP
6616: POP
// end ; end_of_file
6617: LD_VAR 0 1
6621: RET
// export function PrepareRussianCommander ; begin
6622: LD_INT 0
6624: PPUSH
// uc_side = 3 ;
6625: LD_ADDR_OWVAR 20
6629: PUSH
6630: LD_INT 3
6632: ST_TO_ADDR
// uc_nation = 3 ;
6633: LD_ADDR_OWVAR 21
6637: PUSH
6638: LD_INT 3
6640: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6641: LD_ADDR_EXP 24
6645: PUSH
6646: LD_STRING Borodin
6648: PPUSH
6649: CALL_OW 25
6653: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6654: LD_EXP 24
6658: PPUSH
6659: LD_INT 25
6661: PPUSH
6662: LD_INT 0
6664: PPUSH
6665: CALL_OW 49
// end ;
6669: LD_VAR 0 1
6673: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6674: LD_INT 0
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
// for i = 1 to 10 do
6680: LD_ADDR_VAR 0 2
6684: PUSH
6685: DOUBLE
6686: LD_INT 1
6688: DEC
6689: ST_TO_ADDR
6690: LD_INT 10
6692: PUSH
6693: FOR_TO
6694: IFFALSE 6768
// begin uc_side = 6 ;
6696: LD_ADDR_OWVAR 20
6700: PUSH
6701: LD_INT 6
6703: ST_TO_ADDR
// uc_nation = 3 ;
6704: LD_ADDR_OWVAR 21
6708: PUSH
6709: LD_INT 3
6711: ST_TO_ADDR
// hc_gallery =  ;
6712: LD_ADDR_OWVAR 33
6716: PUSH
6717: LD_STRING 
6719: ST_TO_ADDR
// hc_name =  ;
6720: LD_ADDR_OWVAR 26
6724: PUSH
6725: LD_STRING 
6727: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6728: LD_INT 0
6730: PPUSH
6731: LD_INT 1
6733: PPUSH
6734: LD_INT 3
6736: PPUSH
6737: CALL_OW 380
// un = CreateHuman ;
6741: LD_ADDR_VAR 0 3
6745: PUSH
6746: CALL_OW 44
6750: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6751: LD_VAR 0 3
6755: PPUSH
6756: LD_INT 1
6758: PPUSH
6759: LD_INT 0
6761: PPUSH
6762: CALL_OW 49
// end ;
6766: GO 6693
6768: POP
6769: POP
// for i = 1 to 3 do
6770: LD_ADDR_VAR 0 2
6774: PUSH
6775: DOUBLE
6776: LD_INT 1
6778: DEC
6779: ST_TO_ADDR
6780: LD_INT 3
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6933
// begin uc_side = 6 ;
6786: LD_ADDR_OWVAR 20
6790: PUSH
6791: LD_INT 6
6793: ST_TO_ADDR
// uc_nation = 3 ;
6794: LD_ADDR_OWVAR 21
6798: PUSH
6799: LD_INT 3
6801: ST_TO_ADDR
// vc_engine = 1 ;
6802: LD_ADDR_OWVAR 39
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// vc_control = 1 ;
6810: LD_ADDR_OWVAR 38
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6818: LD_ADDR_OWVAR 40
6822: PUSH
6823: LD_INT 43
6825: PUSH
6826: LD_INT 44
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 1
6835: PPUSH
6836: LD_INT 2
6838: PPUSH
6839: CALL_OW 12
6843: ARRAY
6844: ST_TO_ADDR
// vc_chassis = 22 ;
6845: LD_ADDR_OWVAR 37
6849: PUSH
6850: LD_INT 22
6852: ST_TO_ADDR
// veh = CreateVehicle ;
6853: LD_ADDR_VAR 0 4
6857: PUSH
6858: CALL_OW 45
6862: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6863: LD_VAR 0 4
6867: PPUSH
6868: LD_INT 2
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: CALL_OW 49
// hc_gallery =  ;
6878: LD_ADDR_OWVAR 33
6882: PUSH
6883: LD_STRING 
6885: ST_TO_ADDR
// hc_name =  ;
6886: LD_ADDR_OWVAR 26
6890: PUSH
6891: LD_STRING 
6893: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6894: LD_INT 0
6896: PPUSH
6897: LD_INT 3
6899: PPUSH
6900: LD_INT 4
6902: PPUSH
6903: CALL_OW 380
// un = CreateHuman ;
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: CALL_OW 44
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_VAR 0 4
6926: PPUSH
6927: CALL_OW 52
// end ;
6931: GO 6783
6933: POP
6934: POP
// end ;
6935: LD_VAR 0 1
6939: RET
// export function PrepareRussians ; var i , un ; begin
6940: LD_INT 0
6942: PPUSH
6943: PPUSH
6944: PPUSH
// for i = 1 to 8 do
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_INT 8
6957: PUSH
6958: FOR_TO
6959: IFFALSE 7045
// begin uc_side = 3 ;
6961: LD_ADDR_OWVAR 20
6965: PUSH
6966: LD_INT 3
6968: ST_TO_ADDR
// uc_nation = 3 ;
6969: LD_ADDR_OWVAR 21
6973: PUSH
6974: LD_INT 3
6976: ST_TO_ADDR
// hc_gallery =  ;
6977: LD_ADDR_OWVAR 33
6981: PUSH
6982: LD_STRING 
6984: ST_TO_ADDR
// hc_name =  ;
6985: LD_ADDR_OWVAR 26
6989: PUSH
6990: LD_STRING 
6992: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6993: LD_INT 0
6995: PPUSH
6996: LD_INT 1
6998: PPUSH
6999: LD_EXP 25
7003: PPUSH
7004: LD_EXP 26
7008: PPUSH
7009: CALL_OW 12
7013: PPUSH
7014: CALL_OW 380
// un = CreateHuman ;
7018: LD_ADDR_VAR 0 3
7022: PUSH
7023: CALL_OW 44
7027: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7028: LD_VAR 0 3
7032: PPUSH
7033: LD_INT 3
7035: PPUSH
7036: LD_INT 0
7038: PPUSH
7039: CALL_OW 49
// end ;
7043: GO 6958
7045: POP
7046: POP
// for i = 1 to 4 do
7047: LD_ADDR_VAR 0 2
7051: PUSH
7052: DOUBLE
7053: LD_INT 1
7055: DEC
7056: ST_TO_ADDR
7057: LD_INT 4
7059: PUSH
7060: FOR_TO
7061: IFFALSE 7147
// begin uc_side = 3 ;
7063: LD_ADDR_OWVAR 20
7067: PUSH
7068: LD_INT 3
7070: ST_TO_ADDR
// uc_nation = 3 ;
7071: LD_ADDR_OWVAR 21
7075: PUSH
7076: LD_INT 3
7078: ST_TO_ADDR
// hc_gallery =  ;
7079: LD_ADDR_OWVAR 33
7083: PUSH
7084: LD_STRING 
7086: ST_TO_ADDR
// hc_name =  ;
7087: LD_ADDR_OWVAR 26
7091: PUSH
7092: LD_STRING 
7094: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7095: LD_INT 0
7097: PPUSH
7098: LD_INT 2
7100: PPUSH
7101: LD_EXP 25
7105: PPUSH
7106: LD_EXP 26
7110: PPUSH
7111: CALL_OW 12
7115: PPUSH
7116: CALL_OW 380
// un = CreateHuman ;
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: CALL_OW 44
7129: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7130: LD_VAR 0 3
7134: PPUSH
7135: LD_INT 3
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7060
7147: POP
7148: POP
// for i = 1 to 3 do
7149: LD_ADDR_VAR 0 2
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_INT 3
7161: PUSH
7162: FOR_TO
7163: IFFALSE 7249
// begin uc_side = 3 ;
7165: LD_ADDR_OWVAR 20
7169: PUSH
7170: LD_INT 3
7172: ST_TO_ADDR
// uc_nation = 3 ;
7173: LD_ADDR_OWVAR 21
7177: PUSH
7178: LD_INT 3
7180: ST_TO_ADDR
// hc_gallery =  ;
7181: LD_ADDR_OWVAR 33
7185: PUSH
7186: LD_STRING 
7188: ST_TO_ADDR
// hc_name =  ;
7189: LD_ADDR_OWVAR 26
7193: PUSH
7194: LD_STRING 
7196: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7197: LD_INT 0
7199: PPUSH
7200: LD_INT 3
7202: PPUSH
7203: LD_EXP 25
7207: PPUSH
7208: LD_EXP 26
7212: PPUSH
7213: CALL_OW 12
7217: PPUSH
7218: CALL_OW 380
// un = CreateHuman ;
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: CALL_OW 44
7231: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7232: LD_VAR 0 3
7236: PPUSH
7237: LD_INT 3
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: CALL_OW 49
// end ;
7247: GO 7162
7249: POP
7250: POP
// for i = 1 to 2 do
7251: LD_ADDR_VAR 0 2
7255: PUSH
7256: DOUBLE
7257: LD_INT 1
7259: DEC
7260: ST_TO_ADDR
7261: LD_INT 2
7263: PUSH
7264: FOR_TO
7265: IFFALSE 7351
// begin uc_side = 3 ;
7267: LD_ADDR_OWVAR 20
7271: PUSH
7272: LD_INT 3
7274: ST_TO_ADDR
// uc_nation = 3 ;
7275: LD_ADDR_OWVAR 21
7279: PUSH
7280: LD_INT 3
7282: ST_TO_ADDR
// hc_gallery =  ;
7283: LD_ADDR_OWVAR 33
7287: PUSH
7288: LD_STRING 
7290: ST_TO_ADDR
// hc_name =  ;
7291: LD_ADDR_OWVAR 26
7295: PUSH
7296: LD_STRING 
7298: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7299: LD_INT 0
7301: PPUSH
7302: LD_INT 4
7304: PPUSH
7305: LD_EXP 25
7309: PPUSH
7310: LD_EXP 26
7314: PPUSH
7315: CALL_OW 12
7319: PPUSH
7320: CALL_OW 380
// un = CreateHuman ;
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: CALL_OW 44
7333: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7334: LD_VAR 0 3
7338: PPUSH
7339: LD_INT 3
7341: PPUSH
7342: LD_INT 0
7344: PPUSH
7345: CALL_OW 49
// end ;
7349: GO 7264
7351: POP
7352: POP
// end ; end_of_file
7353: LD_VAR 0 1
7357: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7358: LD_INT 0
7360: PPUSH
7361: PPUSH
7362: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7363: LD_ADDR_VAR 0 1
7367: PUSH
7368: LD_VAR 0 1
7372: PUSH
7373: LD_EXP 1
7377: PUSH
7378: LD_EXP 2
7382: PUSH
7383: LD_EXP 3
7387: PUSH
7388: LD_EXP 4
7392: PUSH
7393: LD_EXP 5
7397: PUSH
7398: LD_EXP 6
7402: PUSH
7403: LD_EXP 7
7407: PUSH
7408: LD_EXP 8
7412: PUSH
7413: LD_EXP 9
7417: PUSH
7418: LD_EXP 10
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: DIFF
7435: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_VAR 0 1
7453: PPUSH
7454: CALL_OW 12
7458: ARRAY
7459: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7460: LD_VAR 0 6
7464: PPUSH
7465: CALL_OW 258
7469: PUSH
7470: LD_INT 1
7472: EQUAL
7473: IFFALSE 7491
// Say ( speaker , dialogMID ) else
7475: LD_VAR 0 6
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL_OW 88
7489: GO 7505
// Say ( speaker , dialogFID ) ;
7491: LD_VAR 0 6
7495: PPUSH
7496: LD_VAR 0 3
7500: PPUSH
7501: CALL_OW 88
// result := speaker ;
7505: LD_ADDR_VAR 0 4
7509: PUSH
7510: LD_VAR 0 6
7514: ST_TO_ADDR
// end ;
7515: LD_VAR 0 4
7519: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7520: LD_INT 0
7522: PPUSH
7523: PPUSH
7524: PPUSH
// uc_side := GetSide ( b ) ;
7525: LD_ADDR_OWVAR 20
7529: PUSH
7530: LD_VAR 0 2
7534: PPUSH
7535: CALL_OW 255
7539: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7540: LD_ADDR_OWVAR 21
7544: PUSH
7545: LD_VAR 0 2
7549: PPUSH
7550: CALL_OW 248
7554: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7555: LD_INT 0
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: LD_VAR 0 1
7565: PPUSH
7566: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7570: LD_ADDR_VAR 0 5
7574: PUSH
7575: LD_VAR 0 2
7579: PPUSH
7580: CALL_OW 254
7584: PUSH
7585: LD_INT 3
7587: MINUS
7588: ST_TO_ADDR
// if dir < 0 then
7589: LD_VAR 0 5
7593: PUSH
7594: LD_INT 0
7596: LESS
7597: IFFALSE 7613
// dir := 6 + dir ;
7599: LD_ADDR_VAR 0 5
7603: PUSH
7604: LD_INT 6
7606: PUSH
7607: LD_VAR 0 5
7611: PLUS
7612: ST_TO_ADDR
// un := CreateHuman ;
7613: LD_ADDR_VAR 0 4
7617: PUSH
7618: CALL_OW 44
7622: ST_TO_ADDR
// SetDir ( un , dir ) ;
7623: LD_VAR 0 4
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7637: LD_VAR 0 4
7641: PPUSH
7642: LD_VAR 0 2
7646: PPUSH
7647: CALL_OW 52
// end ;
7651: LD_VAR 0 3
7655: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7656: LD_INT 0
7658: PPUSH
7659: PPUSH
7660: PPUSH
7661: PPUSH
// for i = 1 to count do
7662: LD_ADDR_VAR 0 8
7666: PUSH
7667: DOUBLE
7668: LD_INT 1
7670: DEC
7671: ST_TO_ADDR
7672: LD_VAR 0 6
7676: PUSH
7677: FOR_TO
7678: IFFALSE 7759
// begin uc_side = side ;
7680: LD_ADDR_OWVAR 20
7684: PUSH
7685: LD_VAR 0 1
7689: ST_TO_ADDR
// uc_nation = nation ;
7690: LD_ADDR_OWVAR 21
7694: PUSH
7695: LD_VAR 0 2
7699: ST_TO_ADDR
// hc_gallery =  ;
7700: LD_ADDR_OWVAR 33
7704: PUSH
7705: LD_STRING 
7707: ST_TO_ADDR
// hc_name =  ;
7708: LD_ADDR_OWVAR 26
7712: PUSH
7713: LD_STRING 
7715: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7716: LD_INT 0
7718: PPUSH
7719: LD_VAR 0 5
7723: PPUSH
7724: LD_VAR 0 4
7728: PPUSH
7729: CALL_OW 380
// un = CreateHuman ;
7733: LD_ADDR_VAR 0 10
7737: PUSH
7738: CALL_OW 44
7742: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7743: LD_VAR 0 10
7747: PPUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: CALL_OW 52
// end ;
7757: GO 7677
7759: POP
7760: POP
// end ;
7761: LD_VAR 0 7
7765: RET
// export function PrepareDifficulty ; begin
7766: LD_INT 0
7768: PPUSH
// case Difficulty of 1 :
7769: LD_OWVAR 67
7773: PUSH
7774: LD_INT 1
7776: DOUBLE
7777: EQUAL
7778: IFTRUE 7782
7780: GO 7801
7782: POP
// begin RuSolMinLevel = 3 ;
7783: LD_ADDR_EXP 25
7787: PUSH
7788: LD_INT 3
7790: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7791: LD_ADDR_EXP 26
7795: PUSH
7796: LD_INT 5
7798: ST_TO_ADDR
// end ; 2 :
7799: GO 7979
7801: LD_INT 2
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7880
7809: POP
// begin RuSolMinLevel = 5 ;
7810: LD_ADDR_EXP 25
7814: PUSH
7815: LD_INT 5
7817: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7818: LD_ADDR_EXP 26
7822: PUSH
7823: LD_INT 6
7825: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7826: LD_INT 51
7828: PPUSH
7829: LD_INT 3
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7839: LD_INT 57
7841: PPUSH
7842: LD_INT 3
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7852: LD_INT 57
7854: PPUSH
7855: LD_INT 6
7857: PPUSH
7858: LD_INT 2
7860: PPUSH
7861: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7865: LD_INT 51
7867: PPUSH
7868: LD_INT 6
7870: PPUSH
7871: LD_INT 2
7873: PPUSH
7874: CALL_OW 322
// end ; 3 .. 4 :
7878: GO 7979
7880: LD_INT 3
7882: DOUBLE
7883: GREATEREQUAL
7884: IFFALSE 7892
7886: LD_INT 4
7888: DOUBLE
7889: LESSEQUAL
7890: IFTRUE 7894
7892: GO 7978
7894: POP
// begin RuSolMinLevel = 5 ;
7895: LD_ADDR_EXP 25
7899: PUSH
7900: LD_INT 5
7902: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7903: LD_ADDR_EXP 26
7907: PUSH
7908: LD_INT 6
7910: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7911: LD_INT 57
7913: PPUSH
7914: LD_INT 3
7916: PPUSH
7917: LD_INT 1
7919: PPUSH
7920: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7924: LD_INT 51
7926: PPUSH
7927: LD_INT 3
7929: PPUSH
7930: LD_INT 1
7932: PPUSH
7933: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7937: LD_INT 52
7939: PPUSH
7940: LD_INT 3
7942: PPUSH
7943: LD_INT 1
7945: PPUSH
7946: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7950: LD_INT 57
7952: PPUSH
7953: LD_INT 6
7955: PPUSH
7956: LD_INT 2
7958: PPUSH
7959: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7963: LD_INT 52
7965: PPUSH
7966: LD_INT 6
7968: PPUSH
7969: LD_INT 2
7971: PPUSH
7972: CALL_OW 322
// end ; end ;
7976: GO 7979
7978: POP
// end ;
7979: LD_VAR 0 1
7983: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7984: LD_INT 0
7986: PPUSH
7987: PPUSH
7988: PPUSH
7989: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7990: LD_ADDR_VAR 0 3
7994: PUSH
7995: LD_INT 22
7997: PUSH
7998: LD_INT 3
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 25
8007: PUSH
8008: LD_INT 2
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 69
8023: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
8024: LD_ADDR_VAR 0 4
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: LD_INT 75
8034: PUSH
8035: LD_INT 79
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: LD_INT 113
8052: PUSH
8053: LD_INT 94
8055: PUSH
8056: LD_INT 4
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 29
8067: PUSH
8068: LD_INT 106
8070: PUSH
8071: LD_INT 97
8073: PUSH
8074: LD_INT 3
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 26
8085: PUSH
8086: LD_INT 93
8088: PUSH
8089: LD_INT 97
8091: PUSH
8092: LD_INT 5
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 100
8106: PUSH
8107: LD_INT 89
8109: PUSH
8110: LD_INT 3
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 17
8121: PUSH
8122: LD_INT 96
8124: PUSH
8125: LD_INT 89
8127: PUSH
8128: LD_INT 1
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 32
8139: PUSH
8140: LD_INT 78
8142: PUSH
8143: LD_INT 94
8145: PUSH
8146: LD_INT 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 32
8157: PUSH
8158: LD_INT 95
8160: PUSH
8161: LD_INT 82
8163: PUSH
8164: LD_INT 3
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 32
8175: PUSH
8176: LD_INT 104
8178: PUSH
8179: LD_INT 85
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 32
8193: PUSH
8194: LD_INT 81
8196: PUSH
8197: LD_INT 78
8199: PUSH
8200: LD_INT 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 33
8211: PUSH
8212: LD_INT 109
8214: PUSH
8215: LD_INT 90
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 33
8229: PUSH
8230: LD_INT 88
8232: PUSH
8233: LD_INT 79
8235: PUSH
8236: LD_INT 3
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 33
8247: PUSH
8248: LD_INT 76
8250: PUSH
8251: LD_INT 87
8253: PUSH
8254: LD_INT 1
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 26
8265: PUSH
8266: LD_INT 96
8268: PUSH
8269: LD_INT 97
8271: PUSH
8272: LD_INT 5
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 26
8283: PUSH
8284: LD_INT 85
8286: PUSH
8287: LD_INT 84
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 6
8301: PUSH
8302: LD_INT 88
8304: PUSH
8305: LD_INT 95
8307: PUSH
8308: LD_INT 0
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 19
8319: PUSH
8320: LD_INT 103
8322: PUSH
8323: LD_INT 89
8325: PUSH
8326: LD_INT 4
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 16
8337: PUSH
8338: LD_INT 97
8340: PUSH
8341: LD_INT 86
8343: PUSH
8344: LD_INT 2
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 24
8355: PUSH
8356: LD_INT 100
8358: PUSH
8359: LD_INT 85
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: ST_TO_ADDR
// for i := 1 to buildingsTab do
8392: LD_ADDR_VAR 0 2
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_VAR 0 4
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8481
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8410: LD_VAR 0 3
8414: PPUSH
8415: LD_VAR 0 4
8419: PUSH
8420: LD_VAR 0 2
8424: ARRAY
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 4
8434: PUSH
8435: LD_VAR 0 2
8439: ARRAY
8440: PUSH
8441: LD_INT 2
8443: ARRAY
8444: PPUSH
8445: LD_VAR 0 4
8449: PUSH
8450: LD_VAR 0 2
8454: ARRAY
8455: PUSH
8456: LD_INT 3
8458: ARRAY
8459: PPUSH
8460: LD_VAR 0 4
8464: PUSH
8465: LD_VAR 0 2
8469: ARRAY
8470: PUSH
8471: LD_INT 4
8473: ARRAY
8474: PPUSH
8475: CALL_OW 205
8479: GO 8407
8481: POP
8482: POP
// end ;
8483: LD_VAR 0 1
8487: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8488: LD_INT 0
8490: PPUSH
8491: PPUSH
// for i in charactersList do
8492: LD_ADDR_VAR 0 4
8496: PUSH
8497: LD_VAR 0 1
8501: PUSH
8502: FOR_IN
8503: IFFALSE 8521
// SaveCharacters ( i , ident ) ;
8505: LD_VAR 0 4
8509: PPUSH
8510: LD_VAR 0 2
8514: PPUSH
8515: CALL_OW 38
8519: GO 8502
8521: POP
8522: POP
// end ;
8523: LD_VAR 0 3
8527: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8528: LD_INT 0
8530: PPUSH
8531: PPUSH
8532: PPUSH
8533: PPUSH
8534: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8535: LD_ADDR_VAR 0 8
8539: PUSH
8540: LD_INT 48
8542: PUSH
8543: LD_INT 49
8545: PUSH
8546: LD_INT 50
8548: PUSH
8549: LD_INT 20
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: LD_INT 51
8557: PUSH
8558: LD_INT 52
8560: PUSH
8561: LD_INT 69
8563: PUSH
8564: LD_INT 39
8566: PUSH
8567: LD_INT 34
8569: PUSH
8570: LD_INT 40
8572: PUSH
8573: LD_INT 53
8575: PUSH
8576: LD_INT 71
8578: PUSH
8579: LD_INT 57
8581: PUSH
8582: LD_INT 58
8584: PUSH
8585: LD_INT 44
8587: PUSH
8588: LD_INT 32
8590: PUSH
8591: LD_INT 27
8593: PUSH
8594: LD_INT 23
8596: PUSH
8597: LD_INT 33
8599: PUSH
8600: LD_INT 59
8602: PUSH
8603: LD_INT 54
8605: PUSH
8606: LD_INT 55
8608: PUSH
8609: LD_INT 56
8611: PUSH
8612: LD_INT 63
8614: PUSH
8615: LD_INT 64
8617: PUSH
8618: LD_INT 65
8620: PUSH
8621: LD_INT 30
8623: PUSH
8624: LD_INT 31
8626: PUSH
8627: LD_INT 21
8629: PUSH
8630: LD_INT 22
8632: PUSH
8633: LD_INT 25
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8670: LD_ADDR_VAR 0 5
8674: PUSH
8675: DOUBLE
8676: LD_INT 1
8678: DEC
8679: ST_TO_ADDR
8680: LD_VAR 0 8
8684: PUSH
8685: FOR_TO
8686: IFFALSE 8762
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8688: LD_VAR 0 8
8692: PUSH
8693: LD_VAR 0 5
8697: ARRAY
8698: PPUSH
8699: LD_VAR 0 1
8703: PPUSH
8704: CALL_OW 321
8708: PUSH
8709: LD_INT 1
8711: EQUAL
8712: PUSH
8713: LD_VAR 0 8
8717: PUSH
8718: LD_VAR 0 5
8722: ARRAY
8723: PPUSH
8724: LD_VAR 0 3
8728: PPUSH
8729: CALL_OW 482
8733: PUSH
8734: LD_INT 1
8736: EQUAL
8737: AND
8738: IFFALSE 8760
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8740: LD_VAR 0 2
8744: PPUSH
8745: LD_VAR 0 8
8749: PUSH
8750: LD_VAR 0 5
8754: ARRAY
8755: PPUSH
8756: CALL_OW 184
8760: GO 8685
8762: POP
8763: POP
// end ;
8764: LD_VAR 0 4
8768: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8769: LD_INT 0
8771: PPUSH
8772: PPUSH
8773: PPUSH
8774: PPUSH
8775: PPUSH
8776: PPUSH
8777: PPUSH
8778: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8779: LD_ADDR_VAR 0 6
8783: PUSH
8784: LD_VAR 0 2
8788: PPUSH
8789: LD_INT 22
8791: PUSH
8792: LD_VAR 0 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 56
8803: PUSH
8804: EMPTY
8805: LIST
8806: PUSH
8807: LD_INT 24
8809: PUSH
8810: LD_INT 700
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: LD_INT 60
8822: PUSH
8823: EMPTY
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 2
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 25
8845: PUSH
8846: LD_INT 5
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 25
8855: PUSH
8856: LD_INT 8
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 25
8865: PUSH
8866: LD_INT 9
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 70
8891: PUSH
8892: LD_EXP 24
8896: PUSH
8897: EMPTY
8898: LIST
8899: DIFF
8900: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8901: LD_ADDR_VAR 0 7
8905: PUSH
8906: LD_VAR 0 2
8910: PPUSH
8911: LD_INT 22
8913: PUSH
8914: LD_VAR 0 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 30
8925: PUSH
8926: LD_INT 32
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 58
8935: PUSH
8936: EMPTY
8937: LIST
8938: PUSH
8939: LD_INT 24
8941: PUSH
8942: LD_INT 251
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: PPUSH
8955: CALL_OW 70
8959: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8960: LD_ADDR_VAR 0 9
8964: PUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_INT 22
8972: PUSH
8973: LD_VAR 0 1
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: LD_INT 30
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 30
8997: PUSH
8998: LD_INT 5
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 24
9012: PUSH
9013: LD_INT 251
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 70
9029: ST_TO_ADDR
// if barrackList > 0 then
9030: LD_VAR 0 9
9034: PUSH
9035: LD_INT 0
9037: GREATER
9038: IFFALSE 9186
// begin if turretList = 0 then
9040: LD_VAR 0 7
9044: PUSH
9045: LD_INT 0
9047: EQUAL
9048: IFFALSE 9090
// begin if soldiers_list > 0 then
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 0
9057: GREATER
9058: IFFALSE 9088
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9060: LD_VAR 0 6
9064: PPUSH
9065: LD_VAR 0 9
9069: PUSH
9070: LD_INT 1
9072: PPUSH
9073: LD_VAR 0 9
9077: PPUSH
9078: CALL_OW 12
9082: ARRAY
9083: PPUSH
9084: CALL_OW 120
// end else
9088: GO 9186
// begin for i in barrackList do
9090: LD_ADDR_VAR 0 4
9094: PUSH
9095: LD_VAR 0 9
9099: PUSH
9100: FOR_IN
9101: IFFALSE 9184
// begin insideUnits = UnitsInside ( i ) ;
9103: LD_ADDR_VAR 0 10
9107: PUSH
9108: LD_VAR 0 4
9112: PPUSH
9113: CALL_OW 313
9117: ST_TO_ADDR
// if insideUnits > 0 then
9118: LD_VAR 0 10
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: IFFALSE 9150
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9128: LD_VAR 0 10
9132: PUSH
9133: LD_INT 1
9135: ARRAY
9136: PPUSH
9137: LD_VAR 0 7
9141: PUSH
9142: LD_INT 1
9144: ARRAY
9145: PPUSH
9146: CALL_OW 120
// if soldiers_list > 0 then
9150: LD_VAR 0 6
9154: PUSH
9155: LD_INT 0
9157: GREATER
9158: IFFALSE 9182
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9160: LD_VAR 0 6
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: LD_VAR 0 7
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: CALL_OW 120
// end ;
9182: GO 9100
9184: POP
9185: POP
// end ; end ; end ;
9186: LD_VAR 0 3
9190: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9191: LD_INT 0
9193: PPUSH
9194: PPUSH
9195: PPUSH
9196: PPUSH
9197: PPUSH
9198: PPUSH
// for i = 1 to vehCount do
9199: LD_ADDR_VAR 0 8
9203: PUSH
9204: DOUBLE
9205: LD_INT 1
9207: DEC
9208: ST_TO_ADDR
9209: LD_VAR 0 6
9213: PUSH
9214: FOR_TO
9215: IFFALSE 9422
// begin uc_side = side ;
9217: LD_ADDR_OWVAR 20
9221: PUSH
9222: LD_VAR 0 1
9226: ST_TO_ADDR
// uc_nation = nation ;
9227: LD_ADDR_OWVAR 21
9231: PUSH
9232: LD_VAR 0 3
9236: ST_TO_ADDR
// vc_Chassis = 22 ;
9237: LD_ADDR_OWVAR 37
9241: PUSH
9242: LD_INT 22
9244: ST_TO_ADDR
// vc_engine = 1 ;
9245: LD_ADDR_OWVAR 39
9249: PUSH
9250: LD_INT 1
9252: ST_TO_ADDR
// vc_control = 1 ;
9253: LD_ADDR_OWVAR 38
9257: PUSH
9258: LD_INT 1
9260: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9261: LD_ADDR_OWVAR 40
9265: PUSH
9266: LD_INT 43
9268: PUSH
9269: LD_INT 44
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 1
9278: PPUSH
9279: LD_INT 2
9281: PPUSH
9282: CALL_OW 12
9286: ARRAY
9287: ST_TO_ADDR
// veh = CreateVehicle ;
9288: LD_ADDR_VAR 0 12
9292: PUSH
9293: CALL_OW 45
9297: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9298: LD_VAR 0 12
9302: PPUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: LD_INT 0
9310: PPUSH
9311: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9315: LD_ADDR_EXP 32
9319: PUSH
9320: LD_EXP 32
9324: PUSH
9325: LD_VAR 0 12
9329: ADD
9330: ST_TO_ADDR
// hc_class = 3 ;
9331: LD_ADDR_OWVAR 28
9335: PUSH
9336: LD_INT 3
9338: ST_TO_ADDR
// hc_name =  ;
9339: LD_ADDR_OWVAR 26
9343: PUSH
9344: LD_STRING 
9346: ST_TO_ADDR
// hc_gallery =  ;
9347: LD_ADDR_OWVAR 33
9351: PUSH
9352: LD_STRING 
9354: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9355: LD_INT 0
9357: PPUSH
9358: LD_INT 3
9360: PPUSH
9361: LD_EXP 25
9365: PPUSH
9366: LD_EXP 26
9370: PPUSH
9371: CALL_OW 12
9375: PPUSH
9376: CALL_OW 380
// un = CreateHuman ;
9380: LD_ADDR_VAR 0 10
9384: PUSH
9385: CALL_OW 44
9389: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9390: LD_VAR 0 10
9394: PPUSH
9395: LD_VAR 0 12
9399: PPUSH
9400: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9404: LD_ADDR_EXP 32
9408: PUSH
9409: LD_EXP 32
9413: PUSH
9414: LD_VAR 0 10
9418: ADD
9419: ST_TO_ADDR
// end ;
9420: GO 9214
9422: POP
9423: POP
// end ;
9424: LD_VAR 0 7
9428: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9429: LD_INT 0
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9437: LD_VAR 0 2
9441: PPUSH
9442: LD_INT 22
9444: PUSH
9445: LD_VAR 0 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: EMPTY
9455: LIST
9456: PPUSH
9457: CALL_OW 70
9461: PUSH
9462: LD_INT 0
9464: EQUAL
9465: PUSH
9466: LD_EXP 32
9470: AND
9471: IFFALSE 9758
// begin for i in defenders_list do
9473: LD_ADDR_VAR 0 4
9477: PUSH
9478: LD_EXP 32
9482: PUSH
9483: FOR_IN
9484: IFFALSE 9756
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9486: LD_VAR 0 4
9490: PPUSH
9491: LD_INT 63
9493: PPUSH
9494: LD_INT 75
9496: PPUSH
9497: CALL_OW 297
9501: PUSH
9502: LD_INT 8
9504: GREATER
9505: PUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 314
9515: NOT
9516: AND
9517: IFFALSE 9536
// ComMoveXY ( i , 63 , 75 ) else
9519: LD_VAR 0 4
9523: PPUSH
9524: LD_INT 63
9526: PPUSH
9527: LD_INT 75
9529: PPUSH
9530: CALL_OW 111
9534: GO 9754
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9536: LD_VAR 0 4
9540: PPUSH
9541: CALL_OW 257
9545: PUSH
9546: LD_INT 3
9548: EQUAL
9549: PUSH
9550: LD_VAR 0 4
9554: PPUSH
9555: CALL_OW 310
9559: NOT
9560: AND
9561: PUSH
9562: LD_VAR 0 4
9566: PPUSH
9567: CALL_OW 314
9571: NOT
9572: AND
9573: IFFALSE 9626
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9575: LD_VAR 0 4
9579: PPUSH
9580: LD_EXP 32
9584: PPUSH
9585: LD_INT 58
9587: PUSH
9588: EMPTY
9589: LIST
9590: PUSH
9591: LD_INT 24
9593: PUSH
9594: LD_INT 1000
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 72
9609: PPUSH
9610: LD_VAR 0 4
9614: PPUSH
9615: CALL_OW 74
9619: PPUSH
9620: CALL_OW 120
9624: GO 9754
// if GetFuel ( i ) < 100 then
9626: LD_VAR 0 4
9630: PPUSH
9631: CALL_OW 261
9635: PUSH
9636: LD_INT 100
9638: LESS
9639: IFFALSE 9655
// SetFuel ( defenders_list , 100 ) else
9641: LD_EXP 32
9645: PPUSH
9646: LD_INT 100
9648: PPUSH
9649: CALL_OW 240
9653: GO 9754
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9655: LD_VAR 0 4
9659: PPUSH
9660: CALL_OW 263
9664: PUSH
9665: LD_INT 1
9667: EQUAL
9668: PUSH
9669: LD_VAR 0 4
9673: PPUSH
9674: CALL_OW 256
9678: PUSH
9679: LD_INT 990
9681: LESS
9682: AND
9683: IFFALSE 9754
// begin veh := i ;
9685: LD_ADDR_VAR 0 7
9689: PUSH
9690: LD_VAR 0 4
9694: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9695: LD_ADDR_VAR 0 8
9699: PUSH
9700: LD_VAR 0 4
9704: PPUSH
9705: CALL_OW 311
9709: ST_TO_ADDR
// if veh then
9710: LD_VAR 0 7
9714: IFFALSE 9754
// begin ComMoveXY ( i , 63 , 75 ) ;
9716: LD_VAR 0 4
9720: PPUSH
9721: LD_INT 63
9723: PPUSH
9724: LD_INT 75
9726: PPUSH
9727: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9731: LD_VAR 0 7
9735: PPUSH
9736: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9740: LD_VAR 0 8
9744: PPUSH
9745: LD_VAR 0 7
9749: PPUSH
9750: CALL_OW 189
// end ; end ; end ;
9754: GO 9483
9756: POP
9757: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9758: LD_ADDR_VAR 0 6
9762: PUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: LD_INT 22
9770: PUSH
9771: LD_VAR 0 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: PPUSH
9783: CALL_OW 70
9787: ST_TO_ADDR
// if tmp and defenders_list then
9788: LD_VAR 0 6
9792: PUSH
9793: LD_EXP 32
9797: AND
9798: IFFALSE 9967
// for i in defenders_list do
9800: LD_ADDR_VAR 0 4
9804: PUSH
9805: LD_EXP 32
9809: PUSH
9810: FOR_IN
9811: IFFALSE 9965
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9813: LD_VAR 0 4
9817: PPUSH
9818: CALL_OW 257
9822: PUSH
9823: LD_INT 3
9825: EQUAL
9826: PUSH
9827: LD_VAR 0 4
9831: PPUSH
9832: CALL_OW 310
9836: NOT
9837: AND
9838: IFFALSE 9877
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9840: LD_VAR 0 4
9844: PPUSH
9845: LD_EXP 32
9849: PPUSH
9850: LD_INT 58
9852: PUSH
9853: EMPTY
9854: LIST
9855: PPUSH
9856: CALL_OW 72
9860: PPUSH
9861: LD_VAR 0 4
9865: PPUSH
9866: CALL_OW 74
9870: PPUSH
9871: CALL_OW 120
9875: GO 9963
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9877: LD_VAR 0 4
9881: PPUSH
9882: CALL_OW 314
9886: NOT
9887: PUSH
9888: LD_VAR 0 4
9892: PPUSH
9893: LD_VAR 0 2
9897: PPUSH
9898: CALL_OW 308
9902: AND
9903: IFFALSE 9931
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9905: LD_VAR 0 4
9909: PPUSH
9910: LD_VAR 0 6
9914: PPUSH
9915: LD_VAR 0 4
9919: PPUSH
9920: CALL_OW 74
9924: PPUSH
9925: CALL_OW 115
9929: GO 9963
// if not IsInArea ( i , defenseArea ) then
9931: LD_VAR 0 4
9935: PPUSH
9936: LD_VAR 0 2
9940: PPUSH
9941: CALL_OW 308
9945: NOT
9946: IFFALSE 9963
// ComMoveXY ( i , 63 , 75 ) ;
9948: LD_VAR 0 4
9952: PPUSH
9953: LD_INT 63
9955: PPUSH
9956: LD_INT 75
9958: PPUSH
9959: CALL_OW 111
// end ;
9963: GO 9810
9965: POP
9966: POP
// end ;
9967: LD_VAR 0 3
9971: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9972: LD_INT 0
9974: PPUSH
9975: PPUSH
9976: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9977: LD_INT 22
9979: PUSH
9980: LD_VAR 0 1
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 21
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_VAR 0 3
10012: LESSEQUAL
10013: IFFALSE 10121
// begin for i = 1 to vehCount do
10015: LD_ADDR_VAR 0 9
10019: PUSH
10020: DOUBLE
10021: LD_INT 1
10023: DEC
10024: ST_TO_ADDR
10025: LD_VAR 0 3
10029: PUSH
10030: FOR_TO
10031: IFFALSE 10119
// begin weapon = weaponTab [ i ] ;
10033: LD_ADDR_VAR 0 10
10037: PUSH
10038: LD_VAR 0 4
10042: PUSH
10043: LD_VAR 0 9
10047: ARRAY
10048: ST_TO_ADDR
// if weapon = 46 then
10049: LD_VAR 0 10
10053: PUSH
10054: LD_INT 46
10056: EQUAL
10057: IFFALSE 10088
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
10059: LD_VAR 0 2
10063: PPUSH
10064: LD_INT 24
10066: PPUSH
10067: LD_VAR 0 5
10071: PPUSH
10072: LD_VAR 0 6
10076: PPUSH
10077: LD_VAR 0 10
10081: PPUSH
10082: CALL_OW 185
// end else
10086: GO 10117
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_VAR 0 7
10097: PPUSH
10098: LD_VAR 0 5
10102: PPUSH
10103: LD_VAR 0 6
10107: PPUSH
10108: LD_VAR 0 10
10112: PPUSH
10113: CALL_OW 185
// end ; end ;
10117: GO 10030
10119: POP
10120: POP
// end ; end ;
10121: LD_VAR 0 8
10125: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
10126: LD_INT 0
10128: PPUSH
10129: PPUSH
10130: PPUSH
10131: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
10132: LD_ADDR_VAR 0 8
10136: PUSH
10137: LD_INT 22
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 21
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 3
10161: PUSH
10162: LD_INT 24
10164: PUSH
10165: LD_INT 650
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: ST_TO_ADDR
// if damageVehicles > 0 then
10186: LD_VAR 0 8
10190: PUSH
10191: LD_INT 0
10193: GREATER
10194: IFFALSE 10215
// ComMoveXY ( damageVehicles , repX , repY ) ;
10196: LD_VAR 0 8
10200: PPUSH
10201: LD_VAR 0 3
10205: PPUSH
10206: LD_VAR 0 4
10210: PPUSH
10211: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10215: LD_VAR 0 8
10219: PPUSH
10220: LD_INT 95
10222: PUSH
10223: LD_VAR 0 2
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 3
10234: PUSH
10235: LD_INT 58
10237: PUSH
10238: EMPTY
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PPUSH
10249: CALL_OW 72
10253: PUSH
10254: LD_INT 0
10256: GREATER
10257: IFFALSE 10324
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10259: LD_ADDR_VAR 0 6
10263: PUSH
10264: LD_VAR 0 8
10268: PPUSH
10269: LD_INT 95
10271: PUSH
10272: LD_VAR 0 2
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 3
10283: PUSH
10284: LD_INT 58
10286: PUSH
10287: EMPTY
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: PUSH
10303: FOR_IN
10304: IFFALSE 10322
// ComExitVehicle ( UnitsInside ( i ) ) ;
10306: LD_VAR 0 6
10310: PPUSH
10311: CALL_OW 313
10315: PPUSH
10316: CALL_OW 121
10320: GO 10303
10322: POP
10323: POP
// end ;
10324: LD_VAR 0 5
10328: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10329: LD_INT 0
10331: PPUSH
10332: PPUSH
10333: PPUSH
10334: PPUSH
10335: PPUSH
10336: PPUSH
10337: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10338: LD_ADDR_VAR 0 8
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_VAR 0 1
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 21
10357: PUSH
10358: LD_INT 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 24
10367: PUSH
10368: LD_INT 250
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 58
10380: PUSH
10381: EMPTY
10382: LIST
10383: PUSH
10384: LD_INT 2
10386: PUSH
10387: LD_INT 34
10389: PUSH
10390: LD_INT 43
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 44
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 34
10409: PUSH
10410: LD_INT 46
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 , 7 ] [ Difficulty ] then
10439: LD_INT 22
10441: PUSH
10442: LD_VAR 0 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 2
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 24
10463: PUSH
10464: LD_INT 1000
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: LD_INT 58
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 34
10485: PUSH
10486: LD_INT 43
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 34
10495: PUSH
10496: LD_INT 44
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 34
10505: PUSH
10506: LD_INT 46
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 69
10534: PUSH
10535: LD_INT 5
10537: PUSH
10538: LD_INT 6
10540: PUSH
10541: LD_INT 7
10543: PUSH
10544: LD_INT 7
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_OWVAR 67
10557: ARRAY
10558: GREATEREQUAL
10559: IFFALSE 11124
// repeat wait ( 0 0$1 ) ;
10561: LD_INT 35
10563: PPUSH
10564: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10568: LD_ADDR_VAR 0 8
10572: PUSH
10573: LD_INT 22
10575: PUSH
10576: LD_VAR 0 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 21
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 24
10597: PUSH
10598: LD_INT 250
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 34
10610: PUSH
10611: LD_INT 43
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 34
10620: PUSH
10621: LD_INT 44
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 34
10630: PUSH
10631: LD_INT 46
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 3
10646: PUSH
10647: LD_INT 58
10649: PUSH
10650: EMPTY
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 69
10668: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10669: LD_INT 22
10671: PUSH
10672: LD_VAR 0 1
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 95
10683: PUSH
10684: LD_VAR 0 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PPUSH
10697: CALL_OW 69
10701: NOT
10702: PUSH
10703: LD_VAR 0 11
10707: PUSH
10708: LD_INT 0
10710: EQUAL
10711: AND
10712: IFFALSE 10767
// for i := 1 to wayX do
10714: LD_ADDR_VAR 0 6
10718: PUSH
10719: DOUBLE
10720: LD_INT 1
10722: DEC
10723: ST_TO_ADDR
10724: LD_VAR 0 3
10728: PUSH
10729: FOR_TO
10730: IFFALSE 10765
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10732: LD_VAR 0 8
10736: PPUSH
10737: LD_VAR 0 3
10741: PUSH
10742: LD_VAR 0 6
10746: ARRAY
10747: PPUSH
10748: LD_VAR 0 4
10752: PUSH
10753: LD_VAR 0 6
10757: ARRAY
10758: PPUSH
10759: CALL_OW 114
10763: GO 10729
10765: POP
10766: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10767: LD_INT 22
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 95
10781: PUSH
10782: LD_VAR 0 2
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PPUSH
10795: CALL_OW 69
10799: IFFALSE 11023
// begin seeEnemy = 1 ;
10801: LD_ADDR_VAR 0 11
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// for j in vehiclesOK do
10809: LD_ADDR_VAR 0 7
10813: PUSH
10814: LD_VAR 0 8
10818: PUSH
10819: FOR_IN
10820: IFFALSE 11021
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10822: LD_ADDR_VAR 0 9
10826: PUSH
10827: LD_INT 81
10829: PUSH
10830: LD_VAR 0 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 101
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: PPUSH
10858: LD_VAR 0 7
10862: PPUSH
10863: CALL_OW 74
10867: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10868: LD_ADDR_VAR 0 10
10872: PUSH
10873: LD_INT 81
10875: PUSH
10876: LD_VAR 0 1
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: LD_INT 101
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: LD_INT 59
10900: PUSH
10901: EMPTY
10902: LIST
10903: PUSH
10904: LD_INT 21
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 21
10916: PUSH
10917: LD_INT 2
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: PPUSH
10938: CALL_OW 69
10942: PPUSH
10943: LD_VAR 0 7
10947: PPUSH
10948: CALL_OW 74
10952: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10953: LD_VAR 0 7
10957: PPUSH
10958: LD_VAR 0 9
10962: PPUSH
10963: CALL_OW 296
10967: PUSH
10968: LD_INT 8
10970: PLUS
10971: PUSH
10972: LD_VAR 0 7
10976: PPUSH
10977: LD_VAR 0 10
10981: PPUSH
10982: CALL_OW 296
10986: LESS
10987: IFFALSE 11005
// ComAttackUnit ( j , target1 ) else
10989: LD_VAR 0 7
10993: PPUSH
10994: LD_VAR 0 9
10998: PPUSH
10999: CALL_OW 115
11003: GO 11019
// ComAttackUnit ( j , target2 ) ;
11005: LD_VAR 0 7
11009: PPUSH
11010: LD_VAR 0 10
11014: PPUSH
11015: CALL_OW 115
// end ;
11019: GO 10819
11021: POP
11022: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11023: LD_INT 22
11025: PUSH
11026: LD_VAR 0 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 2
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 24
11047: PUSH
11048: LD_INT 250
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: LD_INT 34
11060: PUSH
11061: LD_INT 43
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 34
11070: PUSH
11071: LD_INT 44
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 34
11080: PUSH
11081: LD_INT 46
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: LD_INT 58
11099: PUSH
11100: EMPTY
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 69
11118: PUSH
11119: LD_INT 0
11121: EQUAL
11122: IFFALSE 10561
// seeEnemy = 0 ;
11124: LD_ADDR_VAR 0 11
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// end ;
11132: LD_VAR 0 5
11136: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
11137: LD_INT 0
11139: PPUSH
11140: PPUSH
11141: PPUSH
11142: PPUSH
11143: PPUSH
11144: PPUSH
// repeat wait ( 0 0$1 ) ;
11145: LD_INT 35
11147: PPUSH
11148: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
11152: LD_ADDR_VAR 0 7
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_VAR 0 1
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 21
11171: PUSH
11172: LD_INT 2
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 24
11181: PUSH
11182: LD_INT 651
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: ST_TO_ADDR
// for j in vehiclesOK do
11199: LD_ADDR_VAR 0 4
11203: PUSH
11204: LD_VAR 0 7
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11411
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11212: LD_ADDR_VAR 0 5
11216: PUSH
11217: LD_INT 81
11219: PUSH
11220: LD_VAR 0 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 101
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 69
11247: PPUSH
11248: LD_VAR 0 4
11252: PPUSH
11253: CALL_OW 74
11257: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11258: LD_ADDR_VAR 0 6
11262: PUSH
11263: LD_INT 81
11265: PUSH
11266: LD_VAR 0 1
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 101
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: LD_INT 59
11290: PUSH
11291: EMPTY
11292: LIST
11293: PUSH
11294: LD_INT 21
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 21
11306: PUSH
11307: LD_INT 2
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: PPUSH
11333: LD_VAR 0 4
11337: PPUSH
11338: CALL_OW 74
11342: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11343: LD_VAR 0 4
11347: PPUSH
11348: LD_VAR 0 5
11352: PPUSH
11353: CALL_OW 296
11357: PUSH
11358: LD_INT 8
11360: PLUS
11361: PUSH
11362: LD_VAR 0 4
11366: PPUSH
11367: LD_VAR 0 6
11371: PPUSH
11372: CALL_OW 296
11376: LESS
11377: IFFALSE 11395
// ComAttackUnit ( j , target1 ) else
11379: LD_VAR 0 4
11383: PPUSH
11384: LD_VAR 0 5
11388: PPUSH
11389: CALL_OW 115
11393: GO 11409
// ComAttackUnit ( j , target2 ) ;
11395: LD_VAR 0 4
11399: PPUSH
11400: LD_VAR 0 6
11404: PPUSH
11405: CALL_OW 115
// end ;
11409: GO 11209
11411: POP
11412: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11413: LD_INT 22
11415: PUSH
11416: LD_VAR 0 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 2
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 24
11437: PUSH
11438: LD_INT 250
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: LD_INT 0
11457: EQUAL
11458: IFFALSE 11145
// end ;
11460: LD_VAR 0 2
11464: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11465: LD_INT 0
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
11472: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11473: LD_ADDR_VAR 0 8
11477: PUSH
11478: LD_VAR 0 2
11482: PPUSH
11483: CALL_OW 313
11487: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11488: LD_ADDR_VAR 0 9
11492: PUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 22
11500: PUSH
11501: LD_VAR 0 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 25
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 24
11522: PUSH
11523: LD_INT 750
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 3
11532: PUSH
11533: LD_INT 54
11535: PUSH
11536: EMPTY
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 70
11553: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11554: LD_ADDR_VAR 0 6
11558: PUSH
11559: LD_VAR 0 3
11563: PPUSH
11564: LD_INT 22
11566: PUSH
11567: LD_VAR 0 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 21
11578: PUSH
11579: LD_INT 3
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 3
11588: PUSH
11589: LD_INT 24
11591: PUSH
11592: LD_INT 1000
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: PPUSH
11611: CALL_OW 70
11615: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11616: LD_VAR 0 6
11620: NOT
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: LD_VAR 0 1
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: LD_INT 25
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 24
11646: PUSH
11647: LD_INT 250
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 69
11663: NOT
11664: AND
11665: IFFALSE 11669
// exit ;
11667: GO 11866
// if buildings_list > 0 and engineerOkInside then
11669: LD_VAR 0 6
11673: PUSH
11674: LD_INT 0
11676: GREATER
11677: PUSH
11678: LD_VAR 0 8
11682: AND
11683: IFFALSE 11709
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11685: LD_VAR 0 8
11689: PPUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 72
11704: PPUSH
11705: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11709: LD_VAR 0 6
11713: PUSH
11714: LD_INT 0
11716: GREATER
11717: PUSH
11718: LD_VAR 0 9
11722: PUSH
11723: LD_INT 0
11725: GREATER
11726: AND
11727: IFFALSE 11747
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11729: LD_VAR 0 9
11733: PPUSH
11734: LD_VAR 0 6
11738: PUSH
11739: LD_INT 1
11741: ARRAY
11742: PPUSH
11743: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11747: LD_VAR 0 6
11751: PUSH
11752: LD_INT 0
11754: EQUAL
11755: PUSH
11756: LD_VAR 0 4
11760: PUSH
11761: LD_INT 0
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_VAR 0 9
11770: PUSH
11771: LD_INT 0
11773: GREATER
11774: AND
11775: IFFALSE 11791
// ComEnterUnit ( engineerOkOutside , building ) ;
11777: LD_VAR 0 9
11781: PPUSH
11782: LD_VAR 0 2
11786: PPUSH
11787: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11791: LD_VAR 0 9
11795: PUSH
11796: LD_INT 0
11798: GREATER
11799: PUSH
11800: LD_VAR 0 6
11804: PUSH
11805: LD_INT 0
11807: EQUAL
11808: AND
11809: PUSH
11810: LD_VAR 0 4
11814: PUSH
11815: LD_INT 0
11817: GREATER
11818: AND
11819: IFFALSE 11866
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11821: LD_VAR 0 9
11825: PPUSH
11826: LD_VAR 0 4
11830: PUSH
11831: LD_INT 1
11833: ARRAY
11834: PPUSH
11835: LD_VAR 0 4
11839: PUSH
11840: LD_INT 2
11842: ARRAY
11843: PPUSH
11844: LD_VAR 0 4
11848: PUSH
11849: LD_INT 3
11851: ARRAY
11852: PPUSH
11853: LD_VAR 0 4
11857: PUSH
11858: LD_INT 4
11860: ARRAY
11861: PPUSH
11862: CALL_OW 145
// end ;
11866: LD_VAR 0 5
11870: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11871: LD_INT 0
11873: PPUSH
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
11881: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11882: LD_ADDR_VAR 0 6
11886: PUSH
11887: LD_INT 22
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 25
11901: PUSH
11902: LD_INT 4
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 23
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 24
11921: PUSH
11922: LD_INT 251
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11940: LD_ADDR_VAR 0 7
11944: PUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: LD_INT 22
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 23
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 25
11974: PUSH
11975: LD_INT 4
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 50
11984: PUSH
11985: EMPTY
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PPUSH
11994: CALL_OW 70
11998: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11999: LD_ADDR_VAR 0 10
12003: PUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 22
12011: PUSH
12012: LD_VAR 0 1
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 3
12033: PUSH
12034: LD_INT 25
12036: PUSH
12037: LD_INT 3
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 3
12050: PUSH
12051: LD_INT 24
12053: PUSH
12054: LD_INT 750
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 70
12075: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12076: LD_ADDR_VAR 0 11
12080: PUSH
12081: LD_VAR 0 2
12085: PPUSH
12086: LD_INT 22
12088: PUSH
12089: LD_VAR 0 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 21
12100: PUSH
12101: LD_INT 1
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 3
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 3
12127: PUSH
12128: LD_INT 24
12130: PUSH
12131: LD_INT 1000
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PPUSH
12148: CALL_OW 70
12152: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
12153: LD_VAR 0 10
12157: NOT
12158: PUSH
12159: LD_VAR 0 11
12163: NOT
12164: AND
12165: PUSH
12166: LD_VAR 0 6
12170: NOT
12171: AND
12172: IFFALSE 12176
// exit ;
12174: GO 12410
// if damageUnits > 0 and sci_list > 0 then
12176: LD_VAR 0 10
12180: PUSH
12181: LD_INT 0
12183: GREATER
12184: PUSH
12185: LD_VAR 0 6
12189: PUSH
12190: LD_INT 0
12192: GREATER
12193: AND
12194: IFFALSE 12210
// ComMoveToArea ( damageUnits , healArea ) ;
12196: LD_VAR 0 10
12200: PPUSH
12201: LD_VAR 0 2
12205: PPUSH
12206: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12210: LD_VAR 0 11
12214: PUSH
12215: LD_INT 0
12217: GREATER
12218: PUSH
12219: LD_VAR 0 6
12223: PUSH
12224: LD_INT 0
12226: GREATER
12227: AND
12228: IFFALSE 12239
// ComExitBuilding ( sci_list ) ;
12230: LD_VAR 0 6
12234: PPUSH
12235: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12239: LD_VAR 0 11
12243: PUSH
12244: LD_INT 0
12246: GREATER
12247: PUSH
12248: LD_VAR 0 7
12252: PUSH
12253: LD_INT 0
12255: GREATER
12256: AND
12257: IFFALSE 12277
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12259: LD_VAR 0 7
12263: PPUSH
12264: LD_VAR 0 11
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12277: LD_VAR 0 10
12281: PUSH
12282: LD_INT 0
12284: EQUAL
12285: PUSH
12286: LD_VAR 0 11
12290: PUSH
12291: LD_INT 0
12293: EQUAL
12294: AND
12295: PUSH
12296: LD_VAR 0 7
12300: PUSH
12301: LD_INT 0
12303: GREATER
12304: AND
12305: IFFALSE 12410
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12307: LD_ADDR_VAR 0 12
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_VAR 0 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 3
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 30
12336: PUSH
12337: LD_INT 8
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12354: LD_ADDR_VAR 0 13
12358: PUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_VAR 0 12
12366: PPUSH
12367: CALL_OW 12
12371: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12372: LD_VAR 0 7
12376: PPUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 60
12382: PUSH
12383: EMPTY
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 72
12394: PPUSH
12395: LD_VAR 0 12
12399: PUSH
12400: LD_VAR 0 13
12404: ARRAY
12405: PPUSH
12406: CALL_OW 120
// end ; end ;
12410: LD_VAR 0 5
12414: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12415: LD_INT 0
12417: PPUSH
12418: PPUSH
12419: PPUSH
12420: PPUSH
12421: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12422: LD_ADDR_VAR 0 6
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_VAR 0 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: LD_INT 30
12444: PUSH
12445: LD_INT 31
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 30
12454: PUSH
12455: LD_INT 32
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 33
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 30
12484: PUSH
12485: LD_INT 5
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 69
12508: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12509: LD_ADDR_VAR 0 7
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_VAR 0 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 3
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 58
12538: PUSH
12539: EMPTY
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12552: LD_VAR 0 6
12556: PUSH
12557: LD_INT 0
12559: GREATER
12560: PUSH
12561: LD_VAR 0 7
12565: PUSH
12566: LD_INT 0
12568: GREATER
12569: AND
12570: IFFALSE 12640
// begin for i in turretsList do
12572: LD_ADDR_VAR 0 4
12576: PUSH
12577: LD_VAR 0 6
12581: PUSH
12582: FOR_IN
12583: IFFALSE 12638
// begin for j in enemyBuildings do
12585: LD_ADDR_VAR 0 5
12589: PUSH
12590: LD_VAR 0 7
12594: PUSH
12595: FOR_IN
12596: IFFALSE 12634
// begin if GetDistUnits ( i , j ) < 20 then
12598: LD_VAR 0 4
12602: PPUSH
12603: LD_VAR 0 5
12607: PPUSH
12608: CALL_OW 296
12612: PUSH
12613: LD_INT 20
12615: LESS
12616: IFFALSE 12632
// begin ComAttackUnit ( i , j ) ;
12618: LD_VAR 0 4
12622: PPUSH
12623: LD_VAR 0 5
12627: PPUSH
12628: CALL_OW 115
// end ; end ;
12632: GO 12595
12634: POP
12635: POP
// end ;
12636: GO 12582
12638: POP
12639: POP
// end ; end ;
12640: LD_VAR 0 3
12644: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12645: LD_INT 0
12647: PPUSH
12648: PPUSH
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
// for i = 1 to medicCount do
12658: LD_ADDR_VAR 0 14
12662: PUSH
12663: DOUBLE
12664: LD_INT 1
12666: DEC
12667: ST_TO_ADDR
12668: LD_VAR 0 7
12672: PUSH
12673: FOR_TO
12674: IFFALSE 12756
// begin uc_side = side ;
12676: LD_ADDR_OWVAR 20
12680: PUSH
12681: LD_VAR 0 1
12685: ST_TO_ADDR
// uc_nation = nation ;
12686: LD_ADDR_OWVAR 21
12690: PUSH
12691: LD_VAR 0 2
12695: ST_TO_ADDR
// hc_name =  ;
12696: LD_ADDR_OWVAR 26
12700: PUSH
12701: LD_STRING 
12703: ST_TO_ADDR
// hc_gallery =  ;
12704: LD_ADDR_OWVAR 33
12708: PUSH
12709: LD_STRING 
12711: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12712: LD_INT 0
12714: PPUSH
12715: LD_INT 4
12717: PPUSH
12718: LD_VAR 0 8
12722: PPUSH
12723: CALL_OW 380
// un = CreateHuman ;
12727: LD_ADDR_VAR 0 16
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12737: LD_VAR 0 16
12741: PPUSH
12742: LD_VAR 0 9
12746: PPUSH
12747: LD_INT 0
12749: PPUSH
12750: CALL_OW 49
// end ;
12754: GO 12673
12756: POP
12757: POP
// for i = 1 to soldierCount do
12758: LD_ADDR_VAR 0 14
12762: PUSH
12763: DOUBLE
12764: LD_INT 1
12766: DEC
12767: ST_TO_ADDR
12768: LD_VAR 0 3
12772: PUSH
12773: FOR_TO
12774: IFFALSE 12856
// begin uc_side = side ;
12776: LD_ADDR_OWVAR 20
12780: PUSH
12781: LD_VAR 0 1
12785: ST_TO_ADDR
// uc_nation = nation ;
12786: LD_ADDR_OWVAR 21
12790: PUSH
12791: LD_VAR 0 2
12795: ST_TO_ADDR
// hc_name =  ;
12796: LD_ADDR_OWVAR 26
12800: PUSH
12801: LD_STRING 
12803: ST_TO_ADDR
// hc_gallery =  ;
12804: LD_ADDR_OWVAR 33
12808: PUSH
12809: LD_STRING 
12811: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12812: LD_INT 0
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: LD_VAR 0 8
12822: PPUSH
12823: CALL_OW 380
// un = CreateHuman ;
12827: LD_ADDR_VAR 0 16
12831: PUSH
12832: CALL_OW 44
12836: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12837: LD_VAR 0 16
12841: PPUSH
12842: LD_VAR 0 9
12846: PPUSH
12847: LD_INT 0
12849: PPUSH
12850: CALL_OW 49
// end ;
12854: GO 12773
12856: POP
12857: POP
// for i = 1 to sniperCount do
12858: LD_ADDR_VAR 0 14
12862: PUSH
12863: DOUBLE
12864: LD_INT 1
12866: DEC
12867: ST_TO_ADDR
12868: LD_VAR 0 4
12872: PUSH
12873: FOR_TO
12874: IFFALSE 12956
// begin uc_side = side ;
12876: LD_ADDR_OWVAR 20
12880: PUSH
12881: LD_VAR 0 1
12885: ST_TO_ADDR
// uc_nation = nation ;
12886: LD_ADDR_OWVAR 21
12890: PUSH
12891: LD_VAR 0 2
12895: ST_TO_ADDR
// hc_name =  ;
12896: LD_ADDR_OWVAR 26
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// hc_gallery =  ;
12904: LD_ADDR_OWVAR 33
12908: PUSH
12909: LD_STRING 
12911: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12912: LD_INT 0
12914: PPUSH
12915: LD_INT 5
12917: PPUSH
12918: LD_VAR 0 8
12922: PPUSH
12923: CALL_OW 380
// un = CreateHuman ;
12927: LD_ADDR_VAR 0 16
12931: PUSH
12932: CALL_OW 44
12936: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12937: LD_VAR 0 16
12941: PPUSH
12942: LD_VAR 0 9
12946: PPUSH
12947: LD_INT 0
12949: PPUSH
12950: CALL_OW 49
// end ;
12954: GO 12873
12956: POP
12957: POP
// for i = 1 to bazookCount do
12958: LD_ADDR_VAR 0 14
12962: PUSH
12963: DOUBLE
12964: LD_INT 1
12966: DEC
12967: ST_TO_ADDR
12968: LD_VAR 0 5
12972: PUSH
12973: FOR_TO
12974: IFFALSE 13056
// begin uc_side = side ;
12976: LD_ADDR_OWVAR 20
12980: PUSH
12981: LD_VAR 0 1
12985: ST_TO_ADDR
// uc_nation = nation ;
12986: LD_ADDR_OWVAR 21
12990: PUSH
12991: LD_VAR 0 2
12995: ST_TO_ADDR
// hc_name =  ;
12996: LD_ADDR_OWVAR 26
13000: PUSH
13001: LD_STRING 
13003: ST_TO_ADDR
// hc_gallery =  ;
13004: LD_ADDR_OWVAR 33
13008: PUSH
13009: LD_STRING 
13011: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
13012: LD_INT 0
13014: PPUSH
13015: LD_INT 9
13017: PPUSH
13018: LD_VAR 0 8
13022: PPUSH
13023: CALL_OW 380
// un = CreateHuman ;
13027: LD_ADDR_VAR 0 16
13031: PUSH
13032: CALL_OW 44
13036: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13037: LD_VAR 0 16
13041: PPUSH
13042: LD_VAR 0 9
13046: PPUSH
13047: LD_INT 0
13049: PPUSH
13050: CALL_OW 49
// end ;
13054: GO 12973
13056: POP
13057: POP
// for i = 1 to mortalCount do
13058: LD_ADDR_VAR 0 14
13062: PUSH
13063: DOUBLE
13064: LD_INT 1
13066: DEC
13067: ST_TO_ADDR
13068: LD_VAR 0 6
13072: PUSH
13073: FOR_TO
13074: IFFALSE 13156
// begin uc_side = side ;
13076: LD_ADDR_OWVAR 20
13080: PUSH
13081: LD_VAR 0 1
13085: ST_TO_ADDR
// uc_nation = nation ;
13086: LD_ADDR_OWVAR 21
13090: PUSH
13091: LD_VAR 0 2
13095: ST_TO_ADDR
// hc_name =  ;
13096: LD_ADDR_OWVAR 26
13100: PUSH
13101: LD_STRING 
13103: ST_TO_ADDR
// hc_gallery =  ;
13104: LD_ADDR_OWVAR 33
13108: PUSH
13109: LD_STRING 
13111: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
13112: LD_INT 0
13114: PPUSH
13115: LD_INT 8
13117: PPUSH
13118: LD_VAR 0 8
13122: PPUSH
13123: CALL_OW 380
// un = CreateHuman ;
13127: LD_ADDR_VAR 0 16
13131: PUSH
13132: CALL_OW 44
13136: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13137: LD_VAR 0 16
13141: PPUSH
13142: LD_VAR 0 9
13146: PPUSH
13147: LD_INT 0
13149: PPUSH
13150: CALL_OW 49
// end ;
13154: GO 13073
13156: POP
13157: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13158: LD_ADDR_VAR 0 19
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_VAR 0 1
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 25
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 25
13190: PUSH
13191: LD_INT 5
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 25
13200: PUSH
13201: LD_INT 8
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 25
13210: PUSH
13211: LD_INT 9
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13234: LD_ADDR_VAR 0 18
13238: PUSH
13239: LD_INT 22
13241: PUSH
13242: LD_VAR 0 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 4
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// for i in medic_list do
13270: LD_ADDR_VAR 0 14
13274: PUSH
13275: LD_VAR 0 18
13279: PUSH
13280: FOR_IN
13281: IFFALSE 13299
// ComMoveToArea ( i , healArea ) ;
13283: LD_VAR 0 14
13287: PPUSH
13288: LD_VAR 0 10
13292: PPUSH
13293: CALL_OW 113
13297: GO 13280
13299: POP
13300: POP
// if strategy = 1 then
13301: LD_VAR 0 12
13305: PUSH
13306: LD_INT 1
13308: EQUAL
13309: IFFALSE 13855
// begin repeat wait ( 0 0$3 ) ;
13311: LD_INT 105
13313: PPUSH
13314: CALL_OW 67
// for i in soldiersOK_list do
13318: LD_ADDR_VAR 0 14
13322: PUSH
13323: LD_VAR 0 19
13327: PUSH
13328: FOR_IN
13329: IFFALSE 13393
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13331: LD_VAR 0 14
13335: PPUSH
13336: LD_INT 91
13338: PPUSH
13339: LD_INT 63
13341: PPUSH
13342: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13346: LD_VAR 0 14
13350: PPUSH
13351: LD_INT 101
13353: PPUSH
13354: LD_INT 53
13356: PPUSH
13357: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13361: LD_VAR 0 14
13365: PPUSH
13366: LD_INT 75
13368: PPUSH
13369: LD_INT 23
13371: PPUSH
13372: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13376: LD_VAR 0 14
13380: PPUSH
13381: LD_INT 78
13383: PPUSH
13384: LD_INT 8
13386: PPUSH
13387: CALL_OW 174
// end ;
13391: GO 13328
13393: POP
13394: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13395: LD_INT 12
13397: PPUSH
13398: LD_INT 22
13400: PUSH
13401: LD_VAR 0 1
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: PUSH
13415: LD_INT 2
13417: GREATER
13418: IFFALSE 13311
// repeat wait ( 0 0$1 ) ;
13420: LD_INT 35
13422: PPUSH
13423: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13427: LD_ADDR_VAR 0 17
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_VAR 0 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 1
13446: PUSH
13447: LD_INT 3
13449: PUSH
13450: LD_INT 24
13452: PUSH
13453: LD_INT 550
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 24
13466: PUSH
13467: LD_INT 250
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 69
13487: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13488: LD_ADDR_VAR 0 19
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_VAR 0 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 25
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 25
13520: PUSH
13521: LD_INT 5
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 25
13530: PUSH
13531: LD_INT 8
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 9
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 24
13557: PUSH
13558: LD_INT 1000
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: ST_TO_ADDR
// if medicCount > 0 then
13575: LD_VAR 0 7
13579: PUSH
13580: LD_INT 0
13582: GREATER
13583: IFFALSE 13657
// begin if damageUnit_list > 0 then
13585: LD_VAR 0 17
13589: PUSH
13590: LD_INT 0
13592: GREATER
13593: IFFALSE 13657
// begin for i in damageUnit_list do
13595: LD_ADDR_VAR 0 14
13599: PUSH
13600: LD_VAR 0 17
13604: PUSH
13605: FOR_IN
13606: IFFALSE 13655
// begin ComMoveToArea ( i , healArea ) ;
13608: LD_VAR 0 14
13612: PPUSH
13613: LD_VAR 0 10
13617: PPUSH
13618: CALL_OW 113
// for j in medic_list do
13622: LD_ADDR_VAR 0 15
13626: PUSH
13627: LD_VAR 0 18
13631: PUSH
13632: FOR_IN
13633: IFFALSE 13651
// AddComHeal ( j , i ) ;
13635: LD_VAR 0 15
13639: PPUSH
13640: LD_VAR 0 14
13644: PPUSH
13645: CALL_OW 188
13649: GO 13632
13651: POP
13652: POP
// end ;
13653: GO 13605
13655: POP
13656: POP
// end ; end ; for i in soldiersOK_list do
13657: LD_ADDR_VAR 0 14
13661: PUSH
13662: LD_VAR 0 19
13666: PUSH
13667: FOR_IN
13668: IFFALSE 13844
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13670: LD_ADDR_VAR 0 22
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_VAR 0 11
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PPUSH
13692: LD_VAR 0 14
13696: PPUSH
13697: CALL_OW 74
13701: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13702: LD_ADDR_VAR 0 23
13706: PUSH
13707: LD_INT 22
13709: PUSH
13710: LD_VAR 0 11
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: LD_INT 59
13724: PUSH
13725: EMPTY
13726: LIST
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 1
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 21
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: EMPTY
13759: LIST
13760: PPUSH
13761: CALL_OW 69
13765: PPUSH
13766: LD_VAR 0 14
13770: PPUSH
13771: CALL_OW 74
13775: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13776: LD_VAR 0 14
13780: PPUSH
13781: LD_VAR 0 22
13785: PPUSH
13786: CALL_OW 296
13790: PUSH
13791: LD_INT 6
13793: PLUS
13794: PUSH
13795: LD_VAR 0 14
13799: PPUSH
13800: LD_VAR 0 23
13804: PPUSH
13805: CALL_OW 296
13809: LESS
13810: IFFALSE 13828
// begin ComAttackUnit ( i , target1 ) ;
13812: LD_VAR 0 14
13816: PPUSH
13817: LD_VAR 0 22
13821: PPUSH
13822: CALL_OW 115
// end else
13826: GO 13842
// begin ComAttackUnit ( i , target2 ) ;
13828: LD_VAR 0 14
13832: PPUSH
13833: LD_VAR 0 23
13837: PPUSH
13838: CALL_OW 115
// end ; end ;
13842: GO 13667
13844: POP
13845: POP
// until soldiersOK_list = [ ] ;
13846: LD_VAR 0 19
13850: PUSH
13851: EMPTY
13852: EQUAL
13853: IFFALSE 13420
// end ; if strategy = 2 then
13855: LD_VAR 0 12
13859: PUSH
13860: LD_INT 2
13862: EQUAL
13863: IFFALSE 14379
// begin repeat wait ( 0 0$1 ) ;
13865: LD_INT 35
13867: PPUSH
13868: CALL_OW 67
// for i in soldiersOK_list do
13872: LD_ADDR_VAR 0 14
13876: PUSH
13877: LD_VAR 0 19
13881: PUSH
13882: FOR_IN
13883: IFFALSE 13917
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13885: LD_VAR 0 14
13889: PPUSH
13890: LD_INT 91
13892: PPUSH
13893: LD_INT 63
13895: PPUSH
13896: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13900: LD_VAR 0 14
13904: PPUSH
13905: LD_INT 75
13907: PPUSH
13908: LD_INT 33
13910: PPUSH
13911: CALL_OW 174
// end ;
13915: GO 13882
13917: POP
13918: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13919: LD_INT 13
13921: PPUSH
13922: LD_INT 22
13924: PUSH
13925: LD_VAR 0 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 70
13938: PUSH
13939: LD_INT 2
13941: GREATER
13942: IFFALSE 13865
// repeat wait ( 0 0$3 ) ;
13944: LD_INT 105
13946: PPUSH
13947: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13951: LD_ADDR_VAR 0 17
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_VAR 0 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 1
13970: PUSH
13971: LD_INT 3
13973: PUSH
13974: LD_INT 24
13976: PUSH
13977: LD_INT 550
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 24
13990: PUSH
13991: LD_INT 250
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 69
14011: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14012: LD_ADDR_VAR 0 19
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_VAR 0 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: LD_INT 25
14034: PUSH
14035: LD_INT 1
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 25
14044: PUSH
14045: LD_INT 5
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 8
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 25
14064: PUSH
14065: LD_INT 9
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 24
14081: PUSH
14082: LD_INT 1000
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: ST_TO_ADDR
// if medicCount > 0 then
14099: LD_VAR 0 7
14103: PUSH
14104: LD_INT 0
14106: GREATER
14107: IFFALSE 14181
// begin if damageUnit_list > 0 then
14109: LD_VAR 0 17
14113: PUSH
14114: LD_INT 0
14116: GREATER
14117: IFFALSE 14181
// begin for i in damageUnit_list do
14119: LD_ADDR_VAR 0 14
14123: PUSH
14124: LD_VAR 0 17
14128: PUSH
14129: FOR_IN
14130: IFFALSE 14179
// begin ComMoveToArea ( i , healArea ) ;
14132: LD_VAR 0 14
14136: PPUSH
14137: LD_VAR 0 10
14141: PPUSH
14142: CALL_OW 113
// for j in medic_list do
14146: LD_ADDR_VAR 0 15
14150: PUSH
14151: LD_VAR 0 18
14155: PUSH
14156: FOR_IN
14157: IFFALSE 14175
// AddComHeal ( j , i ) ;
14159: LD_VAR 0 15
14163: PPUSH
14164: LD_VAR 0 14
14168: PPUSH
14169: CALL_OW 188
14173: GO 14156
14175: POP
14176: POP
// end ;
14177: GO 14129
14179: POP
14180: POP
// end ; end ; for i in soldiersOK_list do
14181: LD_ADDR_VAR 0 14
14185: PUSH
14186: LD_VAR 0 19
14190: PUSH
14191: FOR_IN
14192: IFFALSE 14368
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14194: LD_ADDR_VAR 0 22
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_VAR 0 11
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PPUSH
14211: CALL_OW 69
14215: PPUSH
14216: LD_VAR 0 14
14220: PPUSH
14221: CALL_OW 74
14225: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14226: LD_ADDR_VAR 0 23
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_VAR 0 11
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: LD_INT 59
14248: PUSH
14249: EMPTY
14250: LIST
14251: PUSH
14252: LD_INT 21
14254: PUSH
14255: LD_INT 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 21
14264: PUSH
14265: LD_INT 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: PPUSH
14290: LD_VAR 0 14
14294: PPUSH
14295: CALL_OW 74
14299: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14300: LD_VAR 0 14
14304: PPUSH
14305: LD_VAR 0 22
14309: PPUSH
14310: CALL_OW 296
14314: PUSH
14315: LD_INT 6
14317: PLUS
14318: PUSH
14319: LD_VAR 0 14
14323: PPUSH
14324: LD_VAR 0 23
14328: PPUSH
14329: CALL_OW 296
14333: LESS
14334: IFFALSE 14352
// begin ComAttackUnit ( i , target1 ) ;
14336: LD_VAR 0 14
14340: PPUSH
14341: LD_VAR 0 22
14345: PPUSH
14346: CALL_OW 115
// end else
14350: GO 14366
// begin ComAttackUnit ( i , target2 ) ;
14352: LD_VAR 0 14
14356: PPUSH
14357: LD_VAR 0 23
14361: PPUSH
14362: CALL_OW 115
// end ; end ;
14366: GO 14191
14368: POP
14369: POP
// until soldiersOK_list = [ ] ;
14370: LD_VAR 0 19
14374: PUSH
14375: EMPTY
14376: EQUAL
14377: IFFALSE 13944
// end ; if strategy = 3 then
14379: LD_VAR 0 12
14383: PUSH
14384: LD_INT 3
14386: EQUAL
14387: IFFALSE 14933
// begin repeat wait ( 0 0$3 ) ;
14389: LD_INT 105
14391: PPUSH
14392: CALL_OW 67
// for i in soldiersOK_list do
14396: LD_ADDR_VAR 0 14
14400: PUSH
14401: LD_VAR 0 19
14405: PUSH
14406: FOR_IN
14407: IFFALSE 14471
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14409: LD_VAR 0 14
14413: PPUSH
14414: LD_INT 63
14416: PPUSH
14417: LD_INT 71
14419: PPUSH
14420: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14424: LD_VAR 0 14
14428: PPUSH
14429: LD_INT 35
14431: PPUSH
14432: LD_INT 44
14434: PPUSH
14435: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14439: LD_VAR 0 14
14443: PPUSH
14444: LD_INT 23
14446: PPUSH
14447: LD_INT 18
14449: PPUSH
14450: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14454: LD_VAR 0 14
14458: PPUSH
14459: LD_INT 26
14461: PPUSH
14462: LD_INT 12
14464: PPUSH
14465: CALL_OW 174
// end ;
14469: GO 14406
14471: POP
14472: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14473: LD_INT 14
14475: PPUSH
14476: LD_INT 22
14478: PUSH
14479: LD_VAR 0 1
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 70
14492: PUSH
14493: LD_INT 2
14495: GREATER
14496: IFFALSE 14389
// repeat wait ( 0 0$1 ) ;
14498: LD_INT 35
14500: PPUSH
14501: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14505: LD_ADDR_VAR 0 17
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_VAR 0 1
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: LD_INT 3
14527: PUSH
14528: LD_INT 24
14530: PUSH
14531: LD_INT 550
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 24
14544: PUSH
14545: LD_INT 250
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 69
14565: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14566: LD_ADDR_VAR 0 19
14570: PUSH
14571: LD_INT 22
14573: PUSH
14574: LD_VAR 0 1
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 25
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 25
14598: PUSH
14599: LD_INT 5
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 25
14608: PUSH
14609: LD_INT 8
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 25
14618: PUSH
14619: LD_INT 9
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 24
14635: PUSH
14636: LD_INT 1000
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: PPUSH
14648: CALL_OW 69
14652: ST_TO_ADDR
// if medicCount > 0 then
14653: LD_VAR 0 7
14657: PUSH
14658: LD_INT 0
14660: GREATER
14661: IFFALSE 14735
// begin if damageUnit_list > 0 then
14663: LD_VAR 0 17
14667: PUSH
14668: LD_INT 0
14670: GREATER
14671: IFFALSE 14735
// begin for i in damageUnit_list do
14673: LD_ADDR_VAR 0 14
14677: PUSH
14678: LD_VAR 0 17
14682: PUSH
14683: FOR_IN
14684: IFFALSE 14733
// begin ComMoveToArea ( i , healArea ) ;
14686: LD_VAR 0 14
14690: PPUSH
14691: LD_VAR 0 10
14695: PPUSH
14696: CALL_OW 113
// for j in medic_list do
14700: LD_ADDR_VAR 0 15
14704: PUSH
14705: LD_VAR 0 18
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14729
// AddComHeal ( j , i ) ;
14713: LD_VAR 0 15
14717: PPUSH
14718: LD_VAR 0 14
14722: PPUSH
14723: CALL_OW 188
14727: GO 14710
14729: POP
14730: POP
// end ;
14731: GO 14683
14733: POP
14734: POP
// end ; end ; for i in soldiersOK_list do
14735: LD_ADDR_VAR 0 14
14739: PUSH
14740: LD_VAR 0 19
14744: PUSH
14745: FOR_IN
14746: IFFALSE 14922
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14748: LD_ADDR_VAR 0 22
14752: PUSH
14753: LD_INT 22
14755: PUSH
14756: LD_VAR 0 11
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: PPUSH
14770: LD_VAR 0 14
14774: PPUSH
14775: CALL_OW 74
14779: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14780: LD_ADDR_VAR 0 23
14784: PUSH
14785: LD_INT 22
14787: PUSH
14788: LD_VAR 0 11
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: LD_INT 59
14802: PUSH
14803: EMPTY
14804: LIST
14805: PUSH
14806: LD_INT 21
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 21
14818: PUSH
14819: LD_INT 2
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: PPUSH
14844: LD_VAR 0 14
14848: PPUSH
14849: CALL_OW 74
14853: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14854: LD_VAR 0 14
14858: PPUSH
14859: LD_VAR 0 22
14863: PPUSH
14864: CALL_OW 296
14868: PUSH
14869: LD_INT 6
14871: PLUS
14872: PUSH
14873: LD_VAR 0 14
14877: PPUSH
14878: LD_VAR 0 23
14882: PPUSH
14883: CALL_OW 296
14887: LESS
14888: IFFALSE 14906
// begin ComAttackUnit ( i , target1 ) ;
14890: LD_VAR 0 14
14894: PPUSH
14895: LD_VAR 0 22
14899: PPUSH
14900: CALL_OW 115
// end else
14904: GO 14920
// begin ComAttackUnit ( i , target2 ) ;
14906: LD_VAR 0 14
14910: PPUSH
14911: LD_VAR 0 23
14915: PPUSH
14916: CALL_OW 115
// end ; end ;
14920: GO 14745
14922: POP
14923: POP
// until soldiersOK_list = [ ] ;
14924: LD_VAR 0 19
14928: PUSH
14929: EMPTY
14930: EQUAL
14931: IFFALSE 14498
// end ; end ;
14933: LD_VAR 0 13
14937: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
14948: PPUSH
14949: PPUSH
14950: PPUSH
// amChassisTab = [ ] ;
14951: LD_ADDR_VAR 0 19
14955: PUSH
14956: EMPTY
14957: ST_TO_ADDR
// arChassisTab = [ ] ;
14958: LD_ADDR_VAR 0 18
14962: PUSH
14963: EMPTY
14964: ST_TO_ADDR
// ruChassisTab = [ ] ;
14965: LD_ADDR_VAR 0 17
14969: PUSH
14970: EMPTY
14971: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14972: LD_INT 35
14974: PPUSH
14975: CALL_OW 67
// if nation = 1 then
14979: LD_VAR 0 5
14983: PUSH
14984: LD_INT 1
14986: EQUAL
14987: IFFALSE 15478
// begin uc_side = side ;
14989: LD_ADDR_OWVAR 20
14993: PUSH
14994: LD_VAR 0 2
14998: ST_TO_ADDR
// uc_nation = nation ;
14999: LD_ADDR_OWVAR 21
15003: PUSH
15004: LD_VAR 0 5
15008: ST_TO_ADDR
// vc_engine = vehengine ;
15009: LD_ADDR_OWVAR 39
15013: PUSH
15014: LD_VAR 0 6
15018: ST_TO_ADDR
// vc_control = vehcontrol ;
15019: LD_ADDR_OWVAR 38
15023: PUSH
15024: LD_VAR 0 7
15028: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15029: LD_ADDR_OWVAR 40
15033: PUSH
15034: LD_VAR 0 10
15038: PUSH
15039: LD_INT 1
15041: PPUSH
15042: LD_VAR 0 10
15046: PPUSH
15047: CALL_OW 12
15051: ARRAY
15052: ST_TO_ADDR
// for j = 1 to AMWeapon do
15053: LD_ADDR_VAR 0 14
15057: PUSH
15058: DOUBLE
15059: LD_INT 1
15061: DEC
15062: ST_TO_ADDR
15063: LD_VAR 0 10
15067: PUSH
15068: FOR_TO
15069: IFFALSE 15370
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15071: LD_VAR 0 10
15075: PUSH
15076: LD_VAR 0 14
15080: ARRAY
15081: PUSH
15082: LD_INT 2
15084: EQUAL
15085: PUSH
15086: LD_VAR 0 10
15090: PUSH
15091: LD_VAR 0 14
15095: ARRAY
15096: PUSH
15097: LD_INT 3
15099: EQUAL
15100: OR
15101: IFFALSE 15154
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15103: LD_ADDR_VAR 0 19
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: LD_INT 4
15119: PUSH
15120: LD_INT 5
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15130: LD_ADDR_OWVAR 37
15134: PUSH
15135: LD_VAR 0 19
15139: PUSH
15140: LD_INT 1
15142: PPUSH
15143: LD_VAR 0 19
15147: PPUSH
15148: CALL_OW 12
15152: ARRAY
15153: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15154: LD_VAR 0 10
15158: PUSH
15159: LD_VAR 0 14
15163: ARRAY
15164: PUSH
15165: LD_INT 4
15167: EQUAL
15168: PUSH
15169: LD_VAR 0 10
15173: PUSH
15174: LD_VAR 0 14
15178: ARRAY
15179: PUSH
15180: LD_INT 5
15182: EQUAL
15183: OR
15184: PUSH
15185: LD_VAR 0 10
15189: PUSH
15190: LD_VAR 0 14
15194: ARRAY
15195: PUSH
15196: LD_INT 9
15198: EQUAL
15199: OR
15200: PUSH
15201: LD_VAR 0 10
15205: PUSH
15206: LD_VAR 0 14
15210: ARRAY
15211: PUSH
15212: LD_INT 11
15214: EQUAL
15215: OR
15216: PUSH
15217: LD_VAR 0 10
15221: PUSH
15222: LD_VAR 0 14
15226: ARRAY
15227: PUSH
15228: LD_INT 7
15230: EQUAL
15231: OR
15232: IFFALSE 15281
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15234: LD_ADDR_VAR 0 19
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: LD_INT 3
15244: PUSH
15245: LD_INT 4
15247: PUSH
15248: LD_INT 5
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15257: LD_ADDR_OWVAR 37
15261: PUSH
15262: LD_VAR 0 19
15266: PUSH
15267: LD_INT 1
15269: PPUSH
15270: LD_VAR 0 19
15274: PPUSH
15275: CALL_OW 12
15279: ARRAY
15280: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15281: LD_VAR 0 10
15285: PUSH
15286: LD_VAR 0 14
15290: ARRAY
15291: PUSH
15292: LD_INT 8
15294: EQUAL
15295: PUSH
15296: LD_VAR 0 10
15300: PUSH
15301: LD_VAR 0 14
15305: ARRAY
15306: PUSH
15307: LD_INT 6
15309: EQUAL
15310: OR
15311: PUSH
15312: LD_VAR 0 10
15316: PUSH
15317: LD_VAR 0 14
15321: ARRAY
15322: PUSH
15323: LD_INT 10
15325: EQUAL
15326: OR
15327: IFFALSE 15368
// begin amChassisTab = [ 4 , 5 ] ;
15329: LD_ADDR_VAR 0 19
15333: PUSH
15334: LD_INT 4
15336: PUSH
15337: LD_INT 5
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15344: LD_ADDR_OWVAR 37
15348: PUSH
15349: LD_VAR 0 19
15353: PUSH
15354: LD_INT 1
15356: PPUSH
15357: LD_VAR 0 19
15361: PPUSH
15362: CALL_OW 12
15366: ARRAY
15367: ST_TO_ADDR
// end ; end ;
15368: GO 15068
15370: POP
15371: POP
// veh = CreateVehicle ;
15372: LD_ADDR_VAR 0 16
15376: PUSH
15377: CALL_OW 45
15381: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15382: LD_VAR 0 16
15386: PPUSH
15387: LD_VAR 0 1
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL_OW 49
// if vehControl = 1 then
15399: LD_VAR 0 7
15403: PUSH
15404: LD_INT 1
15406: EQUAL
15407: IFFALSE 15464
// begin hc_gallery =  ;
15409: LD_ADDR_OWVAR 33
15413: PUSH
15414: LD_STRING 
15416: ST_TO_ADDR
// hc_name =  ;
15417: LD_ADDR_OWVAR 26
15421: PUSH
15422: LD_STRING 
15424: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15425: LD_INT 0
15427: PPUSH
15428: LD_INT 3
15430: PPUSH
15431: LD_VAR 0 4
15435: PPUSH
15436: CALL_OW 380
// un = CreateHuman ;
15440: LD_ADDR_VAR 0 15
15444: PUSH
15445: CALL_OW 44
15449: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15450: LD_VAR 0 15
15454: PPUSH
15455: LD_VAR 0 16
15459: PPUSH
15460: CALL_OW 52
// end ; i = i + 1 ;
15464: LD_ADDR_VAR 0 13
15468: PUSH
15469: LD_VAR 0 13
15473: PUSH
15474: LD_INT 1
15476: PLUS
15477: ST_TO_ADDR
// end ; if nation = 2 then
15478: LD_VAR 0 5
15482: PUSH
15483: LD_INT 2
15485: EQUAL
15486: IFFALSE 15910
// begin uc_side = side ;
15488: LD_ADDR_OWVAR 20
15492: PUSH
15493: LD_VAR 0 2
15497: ST_TO_ADDR
// uc_nation = nation ;
15498: LD_ADDR_OWVAR 21
15502: PUSH
15503: LD_VAR 0 5
15507: ST_TO_ADDR
// vc_engine = vehengine ;
15508: LD_ADDR_OWVAR 39
15512: PUSH
15513: LD_VAR 0 6
15517: ST_TO_ADDR
// vc_control = vehcontrol ;
15518: LD_ADDR_OWVAR 38
15522: PUSH
15523: LD_VAR 0 7
15527: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15528: LD_ADDR_OWVAR 40
15532: PUSH
15533: LD_VAR 0 9
15537: PUSH
15538: LD_INT 1
15540: PPUSH
15541: LD_VAR 0 9
15545: PPUSH
15546: CALL_OW 12
15550: ARRAY
15551: ST_TO_ADDR
// for j = 1 to ARWeapons do
15552: LD_ADDR_VAR 0 14
15556: PUSH
15557: DOUBLE
15558: LD_INT 1
15560: DEC
15561: ST_TO_ADDR
15562: LD_VAR 0 9
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15802
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15570: LD_VAR 0 9
15574: PUSH
15575: LD_VAR 0 14
15579: ARRAY
15580: PUSH
15581: LD_INT 24
15583: EQUAL
15584: PUSH
15585: LD_VAR 0 9
15589: PUSH
15590: LD_VAR 0 14
15594: ARRAY
15595: PUSH
15596: LD_INT 22
15598: EQUAL
15599: OR
15600: PUSH
15601: LD_VAR 0 9
15605: PUSH
15606: LD_VAR 0 14
15610: ARRAY
15611: PUSH
15612: LD_INT 23
15614: EQUAL
15615: OR
15616: PUSH
15617: LD_VAR 0 9
15621: PUSH
15622: LD_VAR 0 14
15626: ARRAY
15627: PUSH
15628: LD_INT 30
15630: EQUAL
15631: OR
15632: IFFALSE 15681
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15634: LD_ADDR_VAR 0 18
15638: PUSH
15639: LD_INT 11
15641: PUSH
15642: LD_INT 12
15644: PUSH
15645: LD_INT 13
15647: PUSH
15648: LD_INT 14
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15657: LD_ADDR_OWVAR 37
15661: PUSH
15662: LD_VAR 0 18
15666: PUSH
15667: LD_INT 1
15669: PPUSH
15670: LD_VAR 0 18
15674: PPUSH
15675: CALL_OW 12
15679: ARRAY
15680: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15681: LD_VAR 0 9
15685: PUSH
15686: LD_VAR 0 14
15690: ARRAY
15691: PUSH
15692: LD_INT 29
15694: EQUAL
15695: PUSH
15696: LD_VAR 0 9
15700: PUSH
15701: LD_VAR 0 14
15705: ARRAY
15706: PUSH
15707: LD_INT 28
15709: EQUAL
15710: OR
15711: PUSH
15712: LD_VAR 0 9
15716: PUSH
15717: LD_VAR 0 14
15721: ARRAY
15722: PUSH
15723: LD_INT 27
15725: EQUAL
15726: OR
15727: PUSH
15728: LD_VAR 0 9
15732: PUSH
15733: LD_VAR 0 14
15737: ARRAY
15738: PUSH
15739: LD_INT 26
15741: EQUAL
15742: OR
15743: PUSH
15744: LD_VAR 0 9
15748: PUSH
15749: LD_VAR 0 14
15753: ARRAY
15754: PUSH
15755: LD_INT 25
15757: EQUAL
15758: OR
15759: IFFALSE 15800
// begin arChassisTab = [ 13 , 14 ] ;
15761: LD_ADDR_VAR 0 18
15765: PUSH
15766: LD_INT 13
15768: PUSH
15769: LD_INT 14
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15776: LD_ADDR_OWVAR 37
15780: PUSH
15781: LD_VAR 0 18
15785: PUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_VAR 0 18
15793: PPUSH
15794: CALL_OW 12
15798: ARRAY
15799: ST_TO_ADDR
// end ; end ;
15800: GO 15567
15802: POP
15803: POP
// veh = CreateVehicle ;
15804: LD_ADDR_VAR 0 16
15808: PUSH
15809: CALL_OW 45
15813: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15814: LD_VAR 0 16
15818: PPUSH
15819: LD_VAR 0 1
15823: PPUSH
15824: LD_INT 0
15826: PPUSH
15827: CALL_OW 49
// if vehcontrol = 1 then
15831: LD_VAR 0 7
15835: PUSH
15836: LD_INT 1
15838: EQUAL
15839: IFFALSE 15896
// begin hc_gallery =  ;
15841: LD_ADDR_OWVAR 33
15845: PUSH
15846: LD_STRING 
15848: ST_TO_ADDR
// hc_name =  ;
15849: LD_ADDR_OWVAR 26
15853: PUSH
15854: LD_STRING 
15856: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 3
15862: PPUSH
15863: LD_VAR 0 4
15867: PPUSH
15868: CALL_OW 380
// un = CreateHuman ;
15872: LD_ADDR_VAR 0 15
15876: PUSH
15877: CALL_OW 44
15881: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15882: LD_VAR 0 15
15886: PPUSH
15887: LD_VAR 0 16
15891: PPUSH
15892: CALL_OW 52
// end ; i = i + 1 ;
15896: LD_ADDR_VAR 0 13
15900: PUSH
15901: LD_VAR 0 13
15905: PUSH
15906: LD_INT 1
15908: PLUS
15909: ST_TO_ADDR
// end ; if nation = 3 then
15910: LD_VAR 0 5
15914: PUSH
15915: LD_INT 3
15917: EQUAL
15918: IFFALSE 16310
// begin uc_side = side ;
15920: LD_ADDR_OWVAR 20
15924: PUSH
15925: LD_VAR 0 2
15929: ST_TO_ADDR
// uc_nation = nation ;
15930: LD_ADDR_OWVAR 21
15934: PUSH
15935: LD_VAR 0 5
15939: ST_TO_ADDR
// vc_engine = vehengine ;
15940: LD_ADDR_OWVAR 39
15944: PUSH
15945: LD_VAR 0 6
15949: ST_TO_ADDR
// vc_control = vehcontrol ;
15950: LD_ADDR_OWVAR 38
15954: PUSH
15955: LD_VAR 0 7
15959: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15960: LD_ADDR_OWVAR 40
15964: PUSH
15965: LD_VAR 0 8
15969: PUSH
15970: LD_INT 1
15972: PPUSH
15973: LD_VAR 0 8
15977: PPUSH
15978: CALL_OW 12
15982: ARRAY
15983: ST_TO_ADDR
// for j = 1 to RuWeapons do
15984: LD_ADDR_VAR 0 14
15988: PUSH
15989: DOUBLE
15990: LD_INT 1
15992: DEC
15993: ST_TO_ADDR
15994: LD_VAR 0 8
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16202
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16002: LD_VAR 0 8
16006: PUSH
16007: LD_VAR 0 14
16011: ARRAY
16012: PUSH
16013: LD_INT 42
16015: EQUAL
16016: PUSH
16017: LD_VAR 0 8
16021: PUSH
16022: LD_VAR 0 14
16026: ARRAY
16027: PUSH
16028: LD_INT 43
16030: EQUAL
16031: OR
16032: PUSH
16033: LD_VAR 0 8
16037: PUSH
16038: LD_VAR 0 14
16042: ARRAY
16043: PUSH
16044: LD_INT 44
16046: EQUAL
16047: OR
16048: PUSH
16049: LD_VAR 0 8
16053: PUSH
16054: LD_VAR 0 14
16058: ARRAY
16059: PUSH
16060: LD_INT 45
16062: EQUAL
16063: OR
16064: PUSH
16065: LD_VAR 0 8
16069: PUSH
16070: LD_VAR 0 14
16074: ARRAY
16075: PUSH
16076: LD_INT 49
16078: EQUAL
16079: OR
16080: IFFALSE 16129
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16082: LD_ADDR_VAR 0 17
16086: PUSH
16087: LD_INT 21
16089: PUSH
16090: LD_INT 22
16092: PUSH
16093: LD_INT 23
16095: PUSH
16096: LD_INT 24
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16105: LD_ADDR_OWVAR 37
16109: PUSH
16110: LD_VAR 0 17
16114: PUSH
16115: LD_INT 1
16117: PPUSH
16118: LD_VAR 0 17
16122: PPUSH
16123: CALL_OW 12
16127: ARRAY
16128: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16129: LD_VAR 0 8
16133: PUSH
16134: LD_VAR 0 14
16138: ARRAY
16139: PUSH
16140: LD_INT 46
16142: EQUAL
16143: PUSH
16144: LD_VAR 0 8
16148: PUSH
16149: LD_VAR 0 14
16153: ARRAY
16154: PUSH
16155: LD_INT 47
16157: EQUAL
16158: OR
16159: IFFALSE 16200
// begin ruChassisTab = [ 23 , 24 ] ;
16161: LD_ADDR_VAR 0 17
16165: PUSH
16166: LD_INT 23
16168: PUSH
16169: LD_INT 24
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16176: LD_ADDR_OWVAR 37
16180: PUSH
16181: LD_VAR 0 17
16185: PUSH
16186: LD_INT 1
16188: PPUSH
16189: LD_VAR 0 17
16193: PPUSH
16194: CALL_OW 12
16198: ARRAY
16199: ST_TO_ADDR
// end ; end ;
16200: GO 15999
16202: POP
16203: POP
// veh = CreateVehicle ;
16204: LD_ADDR_VAR 0 16
16208: PUSH
16209: CALL_OW 45
16213: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16214: LD_VAR 0 16
16218: PPUSH
16219: LD_VAR 0 1
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// if vehcontrol = 1 then
16231: LD_VAR 0 7
16235: PUSH
16236: LD_INT 1
16238: EQUAL
16239: IFFALSE 16296
// begin hc_gallery =  ;
16241: LD_ADDR_OWVAR 33
16245: PUSH
16246: LD_STRING 
16248: ST_TO_ADDR
// hc_name =  ;
16249: LD_ADDR_OWVAR 26
16253: PUSH
16254: LD_STRING 
16256: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16257: LD_INT 0
16259: PPUSH
16260: LD_INT 3
16262: PPUSH
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 380
// un = CreateHuman ;
16272: LD_ADDR_VAR 0 15
16276: PUSH
16277: CALL_OW 44
16281: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16282: LD_VAR 0 15
16286: PPUSH
16287: LD_VAR 0 16
16291: PPUSH
16292: CALL_OW 52
// end ; i = i + 1 ;
16296: LD_ADDR_VAR 0 13
16300: PUSH
16301: LD_VAR 0 13
16305: PUSH
16306: LD_INT 1
16308: PLUS
16309: ST_TO_ADDR
// end ; until i = vehCount ;
16310: LD_VAR 0 13
16314: PUSH
16315: LD_VAR 0 3
16319: EQUAL
16320: IFFALSE 14972
// repeat wait ( 0 0$1 ) ;
16322: LD_INT 35
16324: PPUSH
16325: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16329: LD_ADDR_VAR 0 20
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_VAR 0 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 21
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 24
16358: PUSH
16359: LD_INT 250
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: PPUSH
16371: CALL_OW 69
16375: ST_TO_ADDR
// if vehicleOK_list > 0 then
16376: LD_VAR 0 20
16380: PUSH
16381: LD_INT 0
16383: GREATER
16384: IFFALSE 16575
// begin for i in vehicleOK_list do
16386: LD_ADDR_VAR 0 13
16390: PUSH
16391: LD_VAR 0 20
16395: PUSH
16396: FOR_IN
16397: IFFALSE 16573
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16399: LD_ADDR_VAR 0 21
16403: PUSH
16404: LD_INT 22
16406: PUSH
16407: LD_VAR 0 11
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: PPUSH
16421: LD_VAR 0 13
16425: PPUSH
16426: CALL_OW 74
16430: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16431: LD_ADDR_VAR 0 22
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_VAR 0 11
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 59
16453: PUSH
16454: EMPTY
16455: LIST
16456: PUSH
16457: LD_INT 21
16459: PUSH
16460: LD_INT 1
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 21
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: PPUSH
16495: LD_VAR 0 13
16499: PPUSH
16500: CALL_OW 74
16504: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16505: LD_VAR 0 13
16509: PPUSH
16510: LD_VAR 0 21
16514: PPUSH
16515: CALL_OW 296
16519: PUSH
16520: LD_INT 6
16522: PLUS
16523: PUSH
16524: LD_VAR 0 13
16528: PPUSH
16529: LD_VAR 0 22
16533: PPUSH
16534: CALL_OW 296
16538: LESS
16539: IFFALSE 16557
// begin ComAttackUnit ( i , target1 ) ;
16541: LD_VAR 0 13
16545: PPUSH
16546: LD_VAR 0 21
16550: PPUSH
16551: CALL_OW 115
// end else
16555: GO 16571
// begin ComAttackUnit ( i , target2 ) ;
16557: LD_VAR 0 13
16561: PPUSH
16562: LD_VAR 0 22
16566: PPUSH
16567: CALL_OW 115
// end ; end ;
16571: GO 16396
16573: POP
16574: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16575: LD_INT 22
16577: PUSH
16578: LD_VAR 0 2
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 21
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 24
16599: PUSH
16600: LD_INT 250
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: PUSH
16617: LD_INT 0
16619: EQUAL
16620: IFFALSE 16322
// end ;
16622: LD_VAR 0 12
16626: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16627: LD_INT 0
16629: PPUSH
16630: PPUSH
16631: PPUSH
16632: PPUSH
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16637: LD_ADDR_VAR 0 7
16641: PUSH
16642: LD_INT 22
16644: PUSH
16645: LD_VAR 0 1
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: LD_INT 3
16659: PUSH
16660: LD_INT 24
16662: PUSH
16663: LD_INT 550
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 24
16676: PUSH
16677: LD_INT 250
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16698: LD_ADDR_VAR 0 8
16702: PUSH
16703: LD_INT 22
16705: PUSH
16706: LD_VAR 0 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: LD_INT 25
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 25
16730: PUSH
16731: LD_INT 5
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 25
16740: PUSH
16741: LD_INT 8
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 25
16750: PUSH
16751: LD_INT 9
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 24
16767: PUSH
16768: LD_INT 1000
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: PPUSH
16780: CALL_OW 69
16784: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16785: LD_ADDR_VAR 0 9
16789: PUSH
16790: LD_INT 22
16792: PUSH
16793: LD_VAR 0 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 25
16804: PUSH
16805: LD_INT 4
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PPUSH
16816: CALL_OW 69
16820: ST_TO_ADDR
// if medicCount > 0 then
16821: LD_VAR 0 9
16825: PUSH
16826: LD_INT 0
16828: GREATER
16829: IFFALSE 16903
// begin if damageUnit_list > 0 then
16831: LD_VAR 0 7
16835: PUSH
16836: LD_INT 0
16838: GREATER
16839: IFFALSE 16903
// begin for i in damageUnit_list do
16841: LD_ADDR_VAR 0 5
16845: PUSH
16846: LD_VAR 0 7
16850: PUSH
16851: FOR_IN
16852: IFFALSE 16901
// begin ComMoveToArea ( i , healArea ) ;
16854: LD_VAR 0 5
16858: PPUSH
16859: LD_VAR 0 2
16863: PPUSH
16864: CALL_OW 113
// for j in medicCount do
16868: LD_ADDR_VAR 0 6
16872: PUSH
16873: LD_VAR 0 9
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16897
// AddComHeal ( j , i ) ;
16881: LD_VAR 0 6
16885: PPUSH
16886: LD_VAR 0 5
16890: PPUSH
16891: CALL_OW 188
16895: GO 16878
16897: POP
16898: POP
// end ;
16899: GO 16851
16901: POP
16902: POP
// end ; end ; if soldiersOK_list > 0 then
16903: LD_VAR 0 8
16907: PUSH
16908: LD_INT 0
16910: GREATER
16911: IFFALSE 17102
// begin for i in soldiersOK_list do
16913: LD_ADDR_VAR 0 5
16917: PUSH
16918: LD_VAR 0 8
16922: PUSH
16923: FOR_IN
16924: IFFALSE 17100
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16926: LD_ADDR_VAR 0 10
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_VAR 0 3
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PPUSH
16943: CALL_OW 69
16947: PPUSH
16948: LD_VAR 0 5
16952: PPUSH
16953: CALL_OW 74
16957: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16958: LD_ADDR_VAR 0 11
16962: PUSH
16963: LD_INT 22
16965: PUSH
16966: LD_VAR 0 3
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: LD_INT 59
16980: PUSH
16981: EMPTY
16982: LIST
16983: PUSH
16984: LD_INT 21
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: PPUSH
17017: CALL_OW 69
17021: PPUSH
17022: LD_VAR 0 5
17026: PPUSH
17027: CALL_OW 74
17031: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17032: LD_VAR 0 5
17036: PPUSH
17037: LD_VAR 0 10
17041: PPUSH
17042: CALL_OW 296
17046: PUSH
17047: LD_INT 8
17049: PLUS
17050: PUSH
17051: LD_VAR 0 5
17055: PPUSH
17056: LD_VAR 0 11
17060: PPUSH
17061: CALL_OW 296
17065: LESS
17066: IFFALSE 17084
// begin ComAttackUnit ( i , target1 ) ;
17068: LD_VAR 0 5
17072: PPUSH
17073: LD_VAR 0 10
17077: PPUSH
17078: CALL_OW 115
// end else
17082: GO 17098
// begin ComAttackUnit ( i , target2 ) ;
17084: LD_VAR 0 5
17088: PPUSH
17089: LD_VAR 0 11
17093: PPUSH
17094: CALL_OW 115
// end ; end ;
17098: GO 16923
17100: POP
17101: POP
// end ; end ;
17102: LD_VAR 0 4
17106: RET
// export function GetDriverVehicle ( unit ) ; begin
17107: LD_INT 0
17109: PPUSH
// if not unit then
17110: LD_VAR 0 1
17114: NOT
17115: IFFALSE 17119
// exit ;
17117: GO 17157
// result := IsInUnit ( unit ) ;
17119: LD_ADDR_VAR 0 2
17123: PUSH
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 310
17133: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
17134: LD_VAR 0 2
17138: PPUSH
17139: CALL_OW 247
17143: PUSH
17144: LD_INT 2
17146: NONEQUAL
17147: IFFALSE 17157
// result := 0 ;
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: LD_INT 0
17156: ST_TO_ADDR
// end ;
17157: LD_VAR 0 2
17161: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17162: LD_INT 0
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
// result := false ;
17173: LD_ADDR_VAR 0 7
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17181: LD_VAR 0 1
17185: NOT
17186: PUSH
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 266
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: IN
17207: NOT
17208: OR
17209: PUSH
17210: LD_VAR 0 2
17214: NOT
17215: OR
17216: PUSH
17217: LD_VAR 0 5
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: LD_INT 3
17233: PUSH
17234: LD_INT 4
17236: PUSH
17237: LD_INT 5
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: IN
17248: NOT
17249: OR
17250: PUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_VAR 0 4
17260: PPUSH
17261: CALL_OW 488
17265: NOT
17266: OR
17267: IFFALSE 17271
// exit ;
17269: GO 17952
// pom := GetBase ( bdepot ) ;
17271: LD_ADDR_VAR 0 10
17275: PUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 274
17285: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17286: LD_ADDR_VAR 0 11
17290: PUSH
17291: LD_VAR 0 2
17295: PPUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 248
17305: PPUSH
17306: CALL_OW 450
17310: ST_TO_ADDR
// if check_cost then
17311: LD_VAR 0 6
17315: IFFALSE 17392
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17317: LD_VAR 0 10
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 275
17329: PUSH
17330: LD_VAR 0 11
17334: PUSH
17335: LD_INT 1
17337: ARRAY
17338: GREATEREQUAL
17339: PUSH
17340: LD_VAR 0 10
17344: PPUSH
17345: LD_INT 2
17347: PPUSH
17348: CALL_OW 275
17352: PUSH
17353: LD_VAR 0 11
17357: PUSH
17358: LD_INT 2
17360: ARRAY
17361: GREATEREQUAL
17362: AND
17363: PUSH
17364: LD_VAR 0 10
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: CALL_OW 275
17376: PUSH
17377: LD_VAR 0 11
17381: PUSH
17382: LD_INT 3
17384: ARRAY
17385: GREATEREQUAL
17386: AND
17387: NOT
17388: IFFALSE 17392
// exit ;
17390: GO 17952
// if GetBType ( bdepot ) = b_depot then
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 266
17401: PUSH
17402: LD_INT 0
17404: EQUAL
17405: IFFALSE 17417
// dist := 28 else
17407: LD_ADDR_VAR 0 14
17411: PUSH
17412: LD_INT 28
17414: ST_TO_ADDR
17415: GO 17425
// dist := 36 ;
17417: LD_ADDR_VAR 0 14
17421: PUSH
17422: LD_INT 36
17424: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17425: LD_VAR 0 1
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: CALL_OW 297
17444: PUSH
17445: LD_VAR 0 14
17449: GREATER
17450: IFFALSE 17454
// exit ;
17452: GO 17952
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17454: LD_ADDR_VAR 0 12
17458: PUSH
17459: LD_VAR 0 2
17463: PPUSH
17464: LD_VAR 0 3
17468: PPUSH
17469: LD_VAR 0 4
17473: PPUSH
17474: LD_VAR 0 5
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 248
17488: PPUSH
17489: LD_INT 0
17491: PPUSH
17492: CALL 58971 0 6
17496: ST_TO_ADDR
// if not hexes then
17497: LD_VAR 0 12
17501: NOT
17502: IFFALSE 17506
// exit ;
17504: GO 17952
// hex := GetHexInfo ( x , y ) ;
17506: LD_ADDR_VAR 0 15
17510: PUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: LD_VAR 0 4
17520: PPUSH
17521: CALL_OW 546
17525: ST_TO_ADDR
// if hex [ 1 ] then
17526: LD_VAR 0 15
17530: PUSH
17531: LD_INT 1
17533: ARRAY
17534: IFFALSE 17538
// exit ;
17536: GO 17952
// height := hex [ 2 ] ;
17538: LD_ADDR_VAR 0 13
17542: PUSH
17543: LD_VAR 0 15
17547: PUSH
17548: LD_INT 2
17550: ARRAY
17551: ST_TO_ADDR
// for i = 1 to hexes do
17552: LD_ADDR_VAR 0 8
17556: PUSH
17557: DOUBLE
17558: LD_INT 1
17560: DEC
17561: ST_TO_ADDR
17562: LD_VAR 0 12
17566: PUSH
17567: FOR_TO
17568: IFFALSE 17896
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17570: LD_VAR 0 12
17574: PUSH
17575: LD_VAR 0 8
17579: ARRAY
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: LD_VAR 0 12
17589: PUSH
17590: LD_VAR 0 8
17594: ARRAY
17595: PUSH
17596: LD_INT 2
17598: ARRAY
17599: PPUSH
17600: CALL_OW 488
17604: NOT
17605: IFFALSE 17609
// continue ;
17607: GO 17567
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17609: LD_ADDR_VAR 0 9
17613: PUSH
17614: LD_VAR 0 12
17618: PUSH
17619: LD_VAR 0 8
17623: ARRAY
17624: PUSH
17625: LD_INT 1
17627: ARRAY
17628: PPUSH
17629: LD_VAR 0 12
17633: PUSH
17634: LD_VAR 0 8
17638: ARRAY
17639: PUSH
17640: LD_INT 2
17642: ARRAY
17643: PPUSH
17644: CALL_OW 546
17648: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17649: LD_VAR 0 9
17653: PUSH
17654: LD_INT 1
17656: ARRAY
17657: PUSH
17658: LD_VAR 0 9
17662: PUSH
17663: LD_INT 2
17665: ARRAY
17666: PUSH
17667: LD_VAR 0 13
17671: PUSH
17672: LD_INT 2
17674: PLUS
17675: GREATER
17676: OR
17677: PUSH
17678: LD_VAR 0 9
17682: PUSH
17683: LD_INT 2
17685: ARRAY
17686: PUSH
17687: LD_VAR 0 13
17691: PUSH
17692: LD_INT 2
17694: MINUS
17695: LESS
17696: OR
17697: PUSH
17698: LD_VAR 0 9
17702: PUSH
17703: LD_INT 3
17705: ARRAY
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: LD_INT 8
17712: PUSH
17713: LD_INT 9
17715: PUSH
17716: LD_INT 10
17718: PUSH
17719: LD_INT 11
17721: PUSH
17722: LD_INT 12
17724: PUSH
17725: LD_INT 13
17727: PUSH
17728: LD_INT 16
17730: PUSH
17731: LD_INT 17
17733: PUSH
17734: LD_INT 18
17736: PUSH
17737: LD_INT 19
17739: PUSH
17740: LD_INT 20
17742: PUSH
17743: LD_INT 21
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: IN
17761: NOT
17762: OR
17763: PUSH
17764: LD_VAR 0 9
17768: PUSH
17769: LD_INT 5
17771: ARRAY
17772: NOT
17773: OR
17774: PUSH
17775: LD_VAR 0 9
17779: PUSH
17780: LD_INT 6
17782: ARRAY
17783: PUSH
17784: LD_INT 1
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 7
17792: PUSH
17793: LD_INT 9
17795: PUSH
17796: LD_INT 10
17798: PUSH
17799: LD_INT 11
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: IN
17810: NOT
17811: OR
17812: PUSH
17813: LD_VAR 0 12
17817: PUSH
17818: LD_VAR 0 8
17822: ARRAY
17823: PUSH
17824: LD_INT 1
17826: ARRAY
17827: PPUSH
17828: LD_VAR 0 12
17832: PUSH
17833: LD_VAR 0 8
17837: ARRAY
17838: PUSH
17839: LD_INT 2
17841: ARRAY
17842: PPUSH
17843: CALL_OW 428
17847: PUSH
17848: LD_INT 0
17850: GREATER
17851: OR
17852: PUSH
17853: LD_VAR 0 12
17857: PUSH
17858: LD_VAR 0 8
17862: ARRAY
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PPUSH
17868: LD_VAR 0 12
17872: PUSH
17873: LD_VAR 0 8
17877: ARRAY
17878: PUSH
17879: LD_INT 2
17881: ARRAY
17882: PPUSH
17883: CALL_OW 351
17887: OR
17888: IFFALSE 17894
// exit ;
17890: POP
17891: POP
17892: GO 17952
// end ;
17894: GO 17567
17896: POP
17897: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17898: LD_VAR 0 2
17902: PUSH
17903: LD_INT 29
17905: PUSH
17906: LD_INT 30
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: IN
17913: PUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_VAR 0 1
17928: PPUSH
17929: CALL_OW 255
17933: PPUSH
17934: CALL_OW 440
17938: NOT
17939: AND
17940: IFFALSE 17944
// exit ;
17942: GO 17952
// result := true ;
17944: LD_ADDR_VAR 0 7
17948: PUSH
17949: LD_INT 1
17951: ST_TO_ADDR
// end ; end_of_file
17952: LD_VAR 0 7
17956: RET
// every 1 do var i ;
17957: GO 17959
17959: DISABLE
17960: LD_INT 0
17962: PPUSH
// begin Video ( true ) ;
17963: LD_INT 1
17965: PPUSH
17966: CALL 81739 0 1
// CenterOnXY ( 53 , 40 ) ;
17970: LD_INT 53
17972: PPUSH
17973: LD_INT 40
17975: PPUSH
17976: CALL_OW 84
// wait ( 0 0$5 ) ;
17980: LD_INT 175
17982: PPUSH
17983: CALL_OW 67
// if gammaCommander = 1 then
17987: LD_EXP 12
17991: PUSH
17992: LD_INT 1
17994: EQUAL
17995: IFFALSE 18009
// Say ( Donaldson , D1-Don-1 ) ;
17997: LD_EXP 3
18001: PPUSH
18002: LD_STRING D1-Don-1
18004: PPUSH
18005: CALL_OW 88
// if gammaCommander = 2 then
18009: LD_EXP 12
18013: PUSH
18014: LD_INT 2
18016: EQUAL
18017: IFFALSE 18031
// Say ( Brown , D1-Brown-1 ) ;
18019: LD_EXP 2
18023: PPUSH
18024: LD_STRING D1-Brown-1
18026: PPUSH
18027: CALL_OW 88
// if gammaCommander = 3 then
18031: LD_EXP 12
18035: PUSH
18036: LD_INT 3
18038: EQUAL
18039: IFFALSE 18053
// Say ( Houten , D1-VanH-1 ) ;
18041: LD_EXP 13
18045: PPUSH
18046: LD_STRING D1-VanH-1
18048: PPUSH
18049: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
18053: LD_EXP 22
18057: PPUSH
18058: LD_STRING D1-Har-1
18060: PPUSH
18061: CALL_OW 94
// if gammaCommander = 1 then
18065: LD_EXP 12
18069: PUSH
18070: LD_INT 1
18072: EQUAL
18073: IFFALSE 18087
// Say ( Donaldson , D1-Don-2 ) ;
18075: LD_EXP 3
18079: PPUSH
18080: LD_STRING D1-Don-2
18082: PPUSH
18083: CALL_OW 88
// if gammaCommander = 2 then
18087: LD_EXP 12
18091: PUSH
18092: LD_INT 2
18094: EQUAL
18095: IFFALSE 18109
// Say ( Brown , D1-Brown-2 ) ;
18097: LD_EXP 2
18101: PPUSH
18102: LD_STRING D1-Brown-2
18104: PPUSH
18105: CALL_OW 88
// if gammaCommander = 3 then
18109: LD_EXP 12
18113: PUSH
18114: LD_INT 3
18116: EQUAL
18117: IFFALSE 18131
// Say ( Houten , D1-VanH-2 ) ;
18119: LD_EXP 13
18123: PPUSH
18124: LD_STRING D1-VanH-2
18126: PPUSH
18127: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
18131: LD_EXP 22
18135: PPUSH
18136: LD_STRING D1-Har-2
18138: PPUSH
18139: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
18143: LD_INT 22
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 33
18155: PUSH
18156: LD_INT 2
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 61
18165: PUSH
18166: EMPTY
18167: LIST
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: PPUSH
18174: CALL_OW 69
18178: IFFALSE 18243
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
18180: LD_ADDR_VAR 0 1
18184: PUSH
18185: LD_INT 22
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 33
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 61
18207: PUSH
18208: EMPTY
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18241
// ComAgressiveMove ( i , 70 , 41 ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_INT 70
18231: PPUSH
18232: LD_INT 41
18234: PPUSH
18235: CALL_OW 114
18239: GO 18221
18241: POP
18242: POP
// repeat wait ( 0 0$1 ) ;
18243: LD_INT 35
18245: PPUSH
18246: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18250: LD_ADDR_VAR 0 1
18254: PUSH
18255: LD_INT 22
18257: PUSH
18258: LD_INT 6
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: PUSH
18273: FOR_IN
18274: IFFALSE 18293
// ComAgressiveMove ( i , 54 , 20 ) ;
18276: LD_VAR 0 1
18280: PPUSH
18281: LD_INT 54
18283: PPUSH
18284: LD_INT 20
18286: PPUSH
18287: CALL_OW 114
18291: GO 18273
18293: POP
18294: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18295: LD_ADDR_VAR 0 1
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 25
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 3
18322: PUSH
18323: LD_INT 54
18325: PUSH
18326: EMPTY
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: PPUSH
18338: CALL_OW 69
18342: PUSH
18343: FOR_IN
18344: IFFALSE 18378
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18346: LD_VAR 0 1
18350: PPUSH
18351: LD_INT 70
18353: PPUSH
18354: LD_INT 41
18356: PPUSH
18357: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18361: LD_VAR 0 1
18365: PPUSH
18366: LD_INT 46
18368: PPUSH
18369: LD_INT 39
18371: PPUSH
18372: CALL_OW 174
// end ;
18376: GO 18343
18378: POP
18379: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18380: LD_ADDR_VAR 0 1
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 21
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 3
18407: PUSH
18408: LD_INT 24
18410: PUSH
18411: LD_INT 500
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 69
18431: PUSH
18432: FOR_IN
18433: IFFALSE 18466
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18435: LD_VAR 0 1
18439: PPUSH
18440: LD_EXP 37
18444: PPUSH
18445: CALL_OW 250
18449: PPUSH
18450: LD_EXP 37
18454: PPUSH
18455: CALL_OW 251
18459: PPUSH
18460: CALL_OW 111
18464: GO 18432
18466: POP
18467: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18468: LD_INT 22
18470: PUSH
18471: LD_INT 6
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 24
18490: PUSH
18491: LD_INT 250
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: PUSH
18508: LD_INT 5
18510: LESS
18511: IFFALSE 18243
// Video ( false ) ;
18513: LD_INT 0
18515: PPUSH
18516: CALL 81739 0 1
// ChangeMissionObjectives ( M1 ) ;
18520: LD_STRING M1
18522: PPUSH
18523: CALL_OW 337
// wait ( 0 0$2 ) ;
18527: LD_INT 70
18529: PPUSH
18530: CALL_OW 67
// SaveForQuickRestart ;
18534: CALL_OW 22
// startCutscene = 0 ;
18538: LD_ADDR_EXP 38
18542: PUSH
18543: LD_INT 0
18545: ST_TO_ADDR
// end ;
18546: PPOPN 1
18548: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18549: LD_EXP 38
18553: IFFALSE 18644
18555: GO 18557
18557: DISABLE
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
// begin enable ;
18562: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18563: LD_ADDR_VAR 0 1
18567: PUSH
18568: LD_INT 22
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 21
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: LD_INT 24
18593: PUSH
18594: LD_INT 700
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ST_TO_ADDR
// for i in tmp do
18615: LD_ADDR_VAR 0 2
18619: PUSH
18620: LD_VAR 0 1
18624: PUSH
18625: FOR_IN
18626: IFFALSE 18642
// SetLives ( i , 700 ) ;
18628: LD_VAR 0 2
18632: PPUSH
18633: LD_INT 700
18635: PPUSH
18636: CALL_OW 234
18640: GO 18625
18642: POP
18643: POP
// end ;
18644: PPOPN 2
18646: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18647: LD_INT 22
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 101
18659: PUSH
18660: LD_INT 6
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: PUSH
18676: LD_INT 0
18678: EQUAL
18679: PUSH
18680: LD_OWVAR 1
18684: PUSH
18685: LD_INT 6300
18687: GREATER
18688: OR
18689: IFFALSE 18938
18691: GO 18693
18693: DISABLE
// begin PrepareSupportFromDelta ;
18694: CALL 3916 0 0
// firstAttack = 1 ;
18698: LD_ADDR_EXP 33
18702: PUSH
18703: LD_INT 1
18705: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18706: LD_EXP 8
18710: PPUSH
18711: CALL_OW 302
18715: IFFALSE 18731
// Say ( Gladstone , D2-Glad-1 ) else
18717: LD_EXP 8
18721: PPUSH
18722: LD_STRING D2-Glad-1
18724: PPUSH
18725: CALL_OW 88
18729: GO 18839
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18731: LD_INT 4
18733: PPUSH
18734: LD_INT 22
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 21
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 25
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 25
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 25
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 25
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 70
18813: PUSH
18814: LD_EXP 15
18818: PUSH
18819: LD_EXP 14
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: DIFF
18828: PPUSH
18829: LD_STRING D2-Sol1-1
18831: PPUSH
18832: LD_STRING D2-FSol1-1
18834: PPUSH
18835: CALL 7358 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18839: LD_EXP 3
18843: PPUSH
18844: CALL_OW 302
18848: PUSH
18849: LD_EXP 12
18853: PUSH
18854: LD_INT 1
18856: EQUAL
18857: AND
18858: IFFALSE 18872
// Say ( Donaldson , D2-Don-1 ) ;
18860: LD_EXP 3
18864: PPUSH
18865: LD_STRING D2-Don-1
18867: PPUSH
18868: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18872: LD_EXP 2
18876: PPUSH
18877: CALL_OW 302
18881: PUSH
18882: LD_EXP 12
18886: PUSH
18887: LD_INT 2
18889: EQUAL
18890: AND
18891: IFFALSE 18905
// Say ( Brown , D2-Brown-1 ) ;
18893: LD_EXP 2
18897: PPUSH
18898: LD_STRING D2-Brown-1
18900: PPUSH
18901: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18905: LD_EXP 13
18909: PPUSH
18910: CALL_OW 302
18914: PUSH
18915: LD_EXP 12
18919: PUSH
18920: LD_INT 3
18922: EQUAL
18923: AND
18924: IFFALSE 18938
// Say ( Houten , D2-VanH-1 ) ;
18926: LD_EXP 13
18930: PPUSH
18931: LD_STRING D2-VanH-1
18933: PPUSH
18934: CALL_OW 88
// end ;
18938: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18939: LD_OWVAR 1
18943: PUSH
18944: LD_INT 6300
18946: GREATER
18947: IFFALSE 20001
18949: GO 18951
18951: DISABLE
18952: LD_INT 0
18954: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18955: LD_STRING 07_time
18957: PPUSH
18958: LD_INT 12600
18960: PPUSH
18961: CALL_OW 30
18965: PUSH
18966: LD_INT 3
18968: DIV
18969: PPUSH
18970: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18974: LD_INT 34
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 321
18984: PUSH
18985: LD_INT 2
18987: EQUAL
18988: IFFALSE 18997
// SetAchievement ( ACH_HEAVYGUN ) ;
18990: LD_STRING ACH_HEAVYGUN
18992: PPUSH
18993: CALL_OW 543
// PrepareMacmillanSquad ;
18997: CALL 4613 0 0
// CenterNowOnUnits ( JMM ) ;
19001: LD_EXP 1
19005: PPUSH
19006: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
19010: LD_EXP 1
19014: PPUSH
19015: LD_STRING D3-JMM-1
19017: PPUSH
19018: CALL_OW 88
// JMMArrive = 1 ;
19022: LD_ADDR_EXP 39
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
19030: LD_EXP 3
19034: PPUSH
19035: CALL_OW 302
19039: PUSH
19040: LD_EXP 12
19044: PUSH
19045: LD_INT 1
19047: EQUAL
19048: AND
19049: IFFALSE 19065
// begin Say ( Donaldson , D3-Don-1 ) ;
19051: LD_EXP 3
19055: PPUSH
19056: LD_STRING D3-Don-1
19058: PPUSH
19059: CALL_OW 88
// end else
19063: GO 19117
// begin if gammaCommander = 1 then
19065: LD_EXP 12
19069: PUSH
19070: LD_INT 1
19072: EQUAL
19073: IFFALSE 19117
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
19075: LD_EXP 11
19079: PPUSH
19080: LD_INT 26
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 72
19094: PPUSH
19095: LD_STRING D3-Sol1-1
19097: PPUSH
19098: LD_STRING D3-Sol1-1
19100: PPUSH
19101: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19105: LD_EXP 1
19109: PPUSH
19110: LD_STRING D3-JMM-2
19112: PPUSH
19113: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
19117: LD_EXP 2
19121: PPUSH
19122: CALL_OW 302
19126: PUSH
19127: LD_EXP 12
19131: PUSH
19132: LD_INT 2
19134: EQUAL
19135: AND
19136: IFFALSE 19152
// begin Say ( Brown , D3-Brown-1 ) ;
19138: LD_EXP 2
19142: PPUSH
19143: LD_STRING D3-Brown-1
19145: PPUSH
19146: CALL_OW 88
// end else
19150: GO 19204
// begin if gammaCommander = 2 then
19152: LD_EXP 12
19156: PUSH
19157: LD_INT 2
19159: EQUAL
19160: IFFALSE 19204
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
19162: LD_EXP 11
19166: PPUSH
19167: LD_INT 26
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 72
19181: PPUSH
19182: LD_STRING D3-Sol1-1a
19184: PPUSH
19185: LD_STRING D3-Sol1-1a
19187: PPUSH
19188: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19192: LD_EXP 1
19196: PPUSH
19197: LD_STRING D3-JMM-2
19199: PPUSH
19200: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19204: LD_EXP 13
19208: PPUSH
19209: CALL_OW 302
19213: PUSH
19214: LD_EXP 12
19218: PUSH
19219: LD_INT 3
19221: EQUAL
19222: AND
19223: IFFALSE 19239
// begin Say ( Houten , D3-VanH-1 ) ;
19225: LD_EXP 13
19229: PPUSH
19230: LD_STRING D3-VanH-1
19232: PPUSH
19233: CALL_OW 88
// end else
19237: GO 19291
// begin if gammaCommander = 3 then
19239: LD_EXP 12
19243: PUSH
19244: LD_INT 3
19246: EQUAL
19247: IFFALSE 19291
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19249: LD_EXP 11
19253: PPUSH
19254: LD_INT 26
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL_OW 72
19268: PPUSH
19269: LD_STRING D3-Sol1-1b
19271: PPUSH
19272: LD_STRING D3-Sol1-1b
19274: PPUSH
19275: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19279: LD_EXP 1
19283: PPUSH
19284: LD_STRING D3-JMM-2
19286: PPUSH
19287: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19291: LD_EXP 15
19295: PPUSH
19296: CALL_OW 302
19300: IFFALSE 19328
// begin Say ( Joan , D3a-Joan-1 ) ;
19302: LD_EXP 15
19306: PPUSH
19307: LD_STRING D3a-Joan-1
19309: PPUSH
19310: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19314: LD_EXP 1
19318: PPUSH
19319: LD_STRING D3a-JMM-1
19321: PPUSH
19322: CALL_OW 88
// end else
19326: GO 19670
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19328: LD_STRING 06_JoanStatus_1
19330: PPUSH
19331: LD_INT 0
19333: PPUSH
19334: CALL_OW 30
19338: PUSH
19339: LD_INT 1
19341: EQUAL
19342: IFFALSE 19670
// begin Say ( JMM , D3b-JMM-1 ) ;
19344: LD_EXP 1
19348: PPUSH
19349: LD_STRING D3b-JMM-1
19351: PPUSH
19352: CALL_OW 88
// if gammaCommander = 1 then
19356: LD_EXP 12
19360: PUSH
19361: LD_INT 1
19363: EQUAL
19364: IFFALSE 19421
// if IsOK ( Donaldson ) then
19366: LD_EXP 3
19370: PPUSH
19371: CALL_OW 302
19375: IFFALSE 19391
// Say ( Donaldson , D3b-Don-1 ) else
19377: LD_EXP 3
19381: PPUSH
19382: LD_STRING D3b-Don-1
19384: PPUSH
19385: CALL_OW 88
19389: GO 19421
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19391: LD_EXP 11
19395: PPUSH
19396: LD_INT 26
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 72
19410: PPUSH
19411: LD_STRING D3b-Sol1-1
19413: PPUSH
19414: LD_STRING D3b-Sol1-1
19416: PPUSH
19417: CALL 7358 0 3
// if gammaCommander = 2 then
19421: LD_EXP 12
19425: PUSH
19426: LD_INT 2
19428: EQUAL
19429: IFFALSE 19486
// if IsOk ( Brown ) then
19431: LD_EXP 2
19435: PPUSH
19436: CALL_OW 302
19440: IFFALSE 19456
// Say ( Brown , D3b-Brown-1 ) else
19442: LD_EXP 2
19446: PPUSH
19447: LD_STRING D3b-Brown-1
19449: PPUSH
19450: CALL_OW 88
19454: GO 19486
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19456: LD_EXP 11
19460: PPUSH
19461: LD_INT 26
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PPUSH
19471: CALL_OW 72
19475: PPUSH
19476: LD_STRING D3b-Sol1-1
19478: PPUSH
19479: LD_STRING D3b-Sol1-1
19481: PPUSH
19482: CALL 7358 0 3
// if gammaCommander = 3 then
19486: LD_EXP 12
19490: PUSH
19491: LD_INT 3
19493: EQUAL
19494: IFFALSE 19551
// if IsOk ( Houten ) then
19496: LD_EXP 13
19500: PPUSH
19501: CALL_OW 302
19505: IFFALSE 19521
// Say ( Houten , D3b-VanH-1 ) else
19507: LD_EXP 13
19511: PPUSH
19512: LD_STRING D3b-VanH-1
19514: PPUSH
19515: CALL_OW 88
19519: GO 19551
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19521: LD_EXP 11
19525: PPUSH
19526: LD_INT 26
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PPUSH
19536: CALL_OW 72
19540: PPUSH
19541: LD_STRING D3b-Sol1-1
19543: PPUSH
19544: LD_STRING D3b-Sol1-1
19546: PPUSH
19547: CALL 7358 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19551: LD_EXP 11
19555: PPUSH
19556: LD_INT 26
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 72
19570: PUSH
19571: LD_EXP 12
19575: PUSH
19576: LD_INT 1
19578: EQUAL
19579: PUSH
19580: LD_EXP 3
19584: PPUSH
19585: CALL_OW 302
19589: AND
19590: OR
19591: PUSH
19592: LD_EXP 12
19596: PUSH
19597: LD_INT 2
19599: EQUAL
19600: PUSH
19601: LD_EXP 2
19605: PPUSH
19606: CALL_OW 302
19610: AND
19611: OR
19612: PUSH
19613: LD_EXP 12
19617: PUSH
19618: LD_INT 3
19620: EQUAL
19621: PUSH
19622: LD_EXP 13
19626: PPUSH
19627: CALL_OW 302
19631: AND
19632: OR
19633: IFFALSE 19647
// Say ( JMM , D3b-JMM-2 ) ;
19635: LD_EXP 1
19639: PPUSH
19640: LD_STRING D3b-JMM-2
19642: PPUSH
19643: CALL_OW 88
// if IsOK ( Lisa ) then
19647: LD_EXP 6
19651: PPUSH
19652: CALL_OW 302
19656: IFFALSE 19670
// Say ( Lisa , D3b-Lisa-2 ) ;
19658: LD_EXP 6
19662: PPUSH
19663: LD_STRING D3b-Lisa-2
19665: PPUSH
19666: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19670: LD_ADDR_VAR 0 1
19674: PUSH
19675: LD_EXP 1
19679: PUSH
19680: LD_EXP 2
19684: PUSH
19685: LD_EXP 3
19689: PUSH
19690: LD_EXP 4
19694: PUSH
19695: LD_EXP 5
19699: PUSH
19700: LD_EXP 6
19704: PUSH
19705: LD_EXP 7
19709: PUSH
19710: LD_EXP 8
19714: PUSH
19715: LD_EXP 9
19719: PUSH
19720: LD_EXP 10
19724: PUSH
19725: LD_EXP 15
19729: PUSH
19730: LD_EXP 14
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: LD_EXP 42
19753: ADD
19754: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19755: LD_INT 22
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 21
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 26
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 25
19790: PUSH
19791: LD_INT 1
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 25
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 25
19810: PUSH
19811: LD_INT 3
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 25
19820: PUSH
19821: LD_INT 4
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: PPUSH
19841: CALL_OW 69
19845: PUSH
19846: LD_VAR 0 1
19850: DIFF
19851: PPUSH
19852: LD_STRING DCa-Sol1-1
19854: PPUSH
19855: LD_STRING DCa-Sol1-1
19857: PPUSH
19858: CALL 7358 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19862: LD_EXP 1
19866: PPUSH
19867: LD_STRING DCb-JMM-1
19869: PPUSH
19870: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19874: LD_INT 22
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 21
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 26
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 25
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 25
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 25
19939: PUSH
19940: LD_INT 4
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: PPUSH
19960: CALL_OW 69
19964: PUSH
19965: LD_VAR 0 1
19969: DIFF
19970: PPUSH
19971: LD_STRING DCb-Sol1-1
19973: PPUSH
19974: LD_STRING DCb-Sol1-1
19976: PPUSH
19977: CALL 7358 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19981: LD_EXP 1
19985: PPUSH
19986: LD_STRING DCb-JMM-2
19988: PPUSH
19989: CALL_OW 88
// secondAttack = 1 ;
19993: LD_ADDR_EXP 34
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// end ;
20001: PPOPN 1
20003: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
20004: LD_EXP 39
20008: PUSH
20009: LD_INT 1
20011: EQUAL
20012: PUSH
20013: LD_OWVAR 1
20017: PUSH
20018: LD_INT 37800
20020: GREATEREQUAL
20021: AND
20022: IFFALSE 20095
20024: GO 20026
20026: DISABLE
// begin DialogueOn ;
20027: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
20031: LD_EXP 23
20035: PPUSH
20036: LD_STRING D4-Pow-1
20038: PPUSH
20039: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
20043: LD_EXP 1
20047: PPUSH
20048: LD_STRING D4-JMM-1
20050: PPUSH
20051: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
20055: LD_EXP 23
20059: PPUSH
20060: LD_STRING D4-Pow-2
20062: PPUSH
20063: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
20067: LD_EXP 1
20071: PPUSH
20072: LD_STRING D4-JMM-2
20074: PPUSH
20075: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
20079: LD_EXP 23
20083: PPUSH
20084: LD_STRING D4-Pow-3
20086: PPUSH
20087: CALL_OW 94
// DialogueOff ;
20091: CALL_OW 7
// end ;
20095: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
20096: LD_EXP 39
20100: PUSH
20101: LD_INT 1
20103: EQUAL
20104: PUSH
20105: LD_OWVAR 1
20109: PUSH
20110: LD_INT 50400
20112: GREATEREQUAL
20113: AND
20114: IFFALSE 20139
20116: GO 20118
20118: DISABLE
// begin DialogueOn ;
20119: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
20123: LD_EXP 23
20127: PPUSH
20128: LD_STRING D4a-Pow-1
20130: PPUSH
20131: CALL_OW 94
// DialogueOff ;
20135: CALL_OW 7
// end ;
20139: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
20140: LD_EXP 39
20144: PUSH
20145: LD_INT 1
20147: EQUAL
20148: PUSH
20149: LD_OWVAR 1
20153: PUSH
20154: LD_INT 73500
20156: GREATEREQUAL
20157: AND
20158: IFFALSE 20179
20160: GO 20162
20162: DISABLE
// begin PrepareSikorsky ;
20163: CALL 5871 0 0
// SikorskyArrive = 1 ;
20167: LD_ADDR_EXP 18
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// PrepareSikorskyArmy ;
20175: CALL 6051 0 0
// end ;
20179: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
20180: LD_EXP 17
20184: PPUSH
20185: LD_INT 5
20187: PPUSH
20188: CALL_OW 308
20192: IFFALSE 20384
20194: GO 20196
20196: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
20197: LD_EXP 17
20201: PPUSH
20202: CALL_OW 87
// DialogueOn ;
20206: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20210: LD_EXP 16
20214: PPUSH
20215: LD_STRING D5-Sik-1
20217: PPUSH
20218: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20222: LD_EXP 1
20226: PPUSH
20227: LD_STRING D5-JMM-1a
20229: PPUSH
20230: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20234: LD_EXP 16
20238: PPUSH
20239: LD_STRING D5-Sik-2
20241: PPUSH
20242: CALL_OW 88
// case query ( QSikorski ) of 1 :
20246: LD_STRING QSikorski
20248: PPUSH
20249: CALL_OW 97
20253: PUSH
20254: LD_INT 1
20256: DOUBLE
20257: EQUAL
20258: IFTRUE 20262
20260: GO 20285
20262: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20263: LD_EXP 16
20267: PPUSH
20268: LD_STRING D5a-Sik-1
20270: PPUSH
20271: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20275: LD_ADDR_EXP 19
20279: PUSH
20280: LD_INT 2100
20282: ST_TO_ADDR
// end ; 2 :
20283: GO 20372
20285: LD_INT 2
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20316
20293: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20294: LD_EXP 16
20298: PPUSH
20299: LD_STRING D5b-Sik-1
20301: PPUSH
20302: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20306: LD_ADDR_EXP 19
20310: PUSH
20311: LD_INT 10500
20313: ST_TO_ADDR
// end ; 3 :
20314: GO 20372
20316: LD_INT 3
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20371
20324: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20325: LD_EXP 16
20329: PPUSH
20330: LD_STRING D5c-Sik-1
20332: PPUSH
20333: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20337: LD_EXP 1
20341: PPUSH
20342: LD_STRING D5c-JMM-1
20344: PPUSH
20345: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20349: LD_EXP 16
20353: PPUSH
20354: LD_STRING D5c-Sik-2
20356: PPUSH
20357: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20361: LD_ADDR_EXP 19
20365: PUSH
20366: LD_INT 10500
20368: ST_TO_ADDR
// end ; end ;
20369: GO 20372
20371: POP
// DialogueOff ;
20372: CALL_OW 7
// timerStatus = 1 ;
20376: LD_ADDR_EXP 35
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// end ;
20384: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20385: LD_EXP 19
20389: PUSH
20390: LD_INT 35
20392: LESS
20393: IFFALSE 20441
20395: GO 20397
20397: DISABLE
// begin timerStatus = 0 ;
20398: LD_ADDR_EXP 35
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// DialogueOn ;
20406: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20410: LD_EXP 16
20414: PPUSH
20415: LD_STRING D6-Sik-1
20417: PPUSH
20418: CALL_OW 88
// DialogueOff ;
20422: CALL_OW 7
// SikorskyAI = 1 ;
20426: LD_ADDR_EXP 20
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20434: LD_STRING M2
20436: PPUSH
20437: CALL_OW 337
// end ;
20441: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20442: LD_EXP 17
20446: PPUSH
20447: LD_INT 18
20449: PPUSH
20450: CALL_OW 308
20454: IFFALSE 20564
20456: GO 20458
20458: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20459: LD_EXP 16
20463: PPUSH
20464: LD_STRING D7-Sik-1
20466: PPUSH
20467: CALL_OW 88
// wait ( 0 0$10 ) ;
20471: LD_INT 350
20473: PPUSH
20474: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20478: LD_EXP 1
20482: PPUSH
20483: LD_INT 24
20485: PPUSH
20486: CALL_OW 308
20490: PUSH
20491: LD_EXP 1
20495: PPUSH
20496: CALL 17107 0 1
20500: PUSH
20501: LD_EXP 1
20505: PPUSH
20506: CALL 17107 0 1
20510: PPUSH
20511: LD_INT 24
20513: PPUSH
20514: CALL_OW 308
20518: AND
20519: OR
20520: IFFALSE 20544
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20522: LD_EXP 16
20526: PPUSH
20527: LD_STRING D7a-Sik-1
20529: PPUSH
20530: CALL_OW 88
// SikorskyStatus = 1 ;
20534: LD_ADDR_EXP 21
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// end else
20542: GO 20564
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20544: LD_EXP 16
20548: PPUSH
20549: LD_STRING D7b-Sik-1
20551: PPUSH
20552: CALL_OW 88
// SikorskyStatus = 2 ;
20556: LD_ADDR_EXP 21
20560: PUSH
20561: LD_INT 2
20563: ST_TO_ADDR
// end ; end ; end_of_file
20564: END
// on BuildingComplete ( building ) do var tmp , un ;
20565: LD_INT 0
20567: PPUSH
20568: PPUSH
// begin if GetSide ( building ) = 3 then
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 255
20578: PUSH
20579: LD_INT 3
20581: EQUAL
20582: IFFALSE 21119
// begin if GetBType ( building ) = b_depot then
20584: LD_VAR 0 1
20588: PPUSH
20589: CALL_OW 266
20593: PUSH
20594: LD_INT 0
20596: EQUAL
20597: IFFALSE 20665
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 274
20608: PPUSH
20609: LD_INT 1
20611: PPUSH
20612: LD_INT 5000
20614: PPUSH
20615: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 274
20628: PPUSH
20629: LD_INT 2
20631: PPUSH
20632: LD_INT 5000
20634: PPUSH
20635: CALL_OW 277
// SetBName ( building , konev ) ;
20639: LD_VAR 0 1
20643: PPUSH
20644: LD_STRING konev
20646: PPUSH
20647: CALL_OW 500
// ruDepot = building ;
20651: LD_ADDR_EXP 28
20655: PUSH
20656: LD_VAR 0 1
20660: ST_TO_ADDR
// BuildRussianBase ;
20661: CALL 7984 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL_OW 266
20674: PUSH
20675: LD_INT 0
20677: EQUAL
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: CALL_OW 266
20688: PUSH
20689: LD_INT 2
20691: EQUAL
20692: OR
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 266
20703: PUSH
20704: LD_INT 4
20706: EQUAL
20707: OR
20708: IFFALSE 20719
// ComUpgrade ( building ) ;
20710: LD_VAR 0 1
20714: PPUSH
20715: CALL_OW 146
// if GetBType ( building ) = b_lab then
20719: LD_VAR 0 1
20723: PPUSH
20724: CALL_OW 266
20728: PUSH
20729: LD_INT 6
20731: EQUAL
20732: IFFALSE 20783
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20734: LD_VAR 0 1
20738: PPUSH
20739: LD_INT 10
20741: PPUSH
20742: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20746: LD_VAR 0 1
20750: PPUSH
20751: LD_INT 12
20753: PPUSH
20754: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20758: LD_INT 3
20760: PPUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: LD_INT 3
20768: PPUSH
20769: CALL 8528 0 3
// ruLab = building ;
20773: LD_ADDR_EXP 29
20777: PUSH
20778: LD_VAR 0 1
20782: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 266
20792: PUSH
20793: LD_INT 32
20795: EQUAL
20796: IFFALSE 20914
// begin uc_side = 3 ;
20798: LD_ADDR_OWVAR 20
20802: PUSH
20803: LD_INT 3
20805: ST_TO_ADDR
// uc_nation = 3 ;
20806: LD_ADDR_OWVAR 21
20810: PUSH
20811: LD_INT 3
20813: ST_TO_ADDR
// hc_gallery =  ;
20814: LD_ADDR_OWVAR 33
20818: PUSH
20819: LD_STRING 
20821: ST_TO_ADDR
// hc_name =  ;
20822: LD_ADDR_OWVAR 26
20826: PUSH
20827: LD_STRING 
20829: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20830: LD_INT 0
20832: PPUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_EXP 25
20840: PPUSH
20841: LD_EXP 26
20845: PPUSH
20846: CALL_OW 12
20850: PPUSH
20851: CALL_OW 380
// un = CreateHuman ;
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: CALL_OW 44
20864: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20865: LD_VAR 0 3
20869: PPUSH
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20879: LD_VAR 0 1
20883: PPUSH
20884: LD_INT 43
20886: PUSH
20887: LD_INT 44
20889: PUSH
20890: LD_INT 46
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PPUSH
20901: LD_INT 3
20903: PPUSH
20904: CALL_OW 12
20908: ARRAY
20909: PPUSH
20910: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20914: LD_VAR 0 1
20918: PPUSH
20919: CALL_OW 266
20923: PUSH
20924: LD_INT 33
20926: EQUAL
20927: IFFALSE 20964
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20929: LD_VAR 0 1
20933: PPUSH
20934: LD_INT 43
20936: PUSH
20937: LD_INT 44
20939: PUSH
20940: LD_INT 46
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: PPUSH
20951: LD_INT 3
20953: PPUSH
20954: CALL_OW 12
20958: ARRAY
20959: PPUSH
20960: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20964: LD_VAR 0 1
20968: PPUSH
20969: CALL_OW 266
20973: PUSH
20974: LD_INT 32
20976: EQUAL
20977: IFFALSE 21014
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20979: LD_VAR 0 1
20983: PPUSH
20984: LD_INT 43
20986: PUSH
20987: LD_INT 44
20989: PUSH
20990: LD_INT 46
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: PPUSH
21001: LD_INT 3
21003: PPUSH
21004: CALL_OW 12
21008: ARRAY
21009: PPUSH
21010: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21014: LD_VAR 0 1
21018: PPUSH
21019: CALL_OW 266
21023: PUSH
21024: LD_INT 24
21026: EQUAL
21027: IFFALSE 21037
// russianAI = 1 ;
21029: LD_ADDR_EXP 27
21033: PUSH
21034: LD_INT 1
21036: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
21037: LD_EXP 31
21041: PUSH
21042: LD_INT 0
21044: GREATER
21045: IFFALSE 21119
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21047: LD_ADDR_EXP 31
21051: PUSH
21052: LD_EXP 31
21056: PPUSH
21057: LD_INT 1
21059: PPUSH
21060: CALL_OW 3
21064: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21065: LD_ADDR_EXP 31
21069: PUSH
21070: LD_EXP 31
21074: PPUSH
21075: LD_INT 1
21077: PPUSH
21078: CALL_OW 3
21082: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21083: LD_ADDR_EXP 31
21087: PUSH
21088: LD_EXP 31
21092: PPUSH
21093: LD_INT 1
21095: PPUSH
21096: CALL_OW 3
21100: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21101: LD_ADDR_EXP 31
21105: PUSH
21106: LD_EXP 31
21110: PPUSH
21111: LD_INT 1
21113: PPUSH
21114: CALL_OW 3
21118: ST_TO_ADDR
// end ; end ; end ;
21119: PPOPN 3
21121: END
// on UpgradeComplete ( building ) do var i ;
21122: LD_INT 0
21124: PPUSH
// begin if GetSide ( building ) = 3 then
21125: LD_VAR 0 1
21129: PPUSH
21130: CALL_OW 255
21134: PUSH
21135: LD_INT 3
21137: EQUAL
21138: IFFALSE 21319
// begin if GetBType ( building ) = b_factory then
21140: LD_VAR 0 1
21144: PPUSH
21145: CALL_OW 266
21149: PUSH
21150: LD_INT 3
21152: EQUAL
21153: IFFALSE 21220
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
21155: LD_ADDR_VAR 0 2
21159: PUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 25
21172: PUSH
21173: LD_INT 3
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: PUSH
21189: FOR_IN
21190: IFFALSE 21208
// ComEnterUnit ( i , building ) ;
21192: LD_VAR 0 2
21196: PPUSH
21197: LD_VAR 0 1
21201: PPUSH
21202: CALL_OW 120
21206: GO 21189
21208: POP
21209: POP
// ruFab = building ;
21210: LD_ADDR_EXP 30
21214: PUSH
21215: LD_VAR 0 1
21219: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21220: LD_VAR 0 1
21224: PPUSH
21225: CALL_OW 266
21229: PUSH
21230: LD_INT 8
21232: EQUAL
21233: IFFALSE 21290
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21235: LD_ADDR_VAR 0 2
21239: PUSH
21240: LD_INT 22
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 25
21252: PUSH
21253: LD_INT 4
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PPUSH
21264: CALL_OW 69
21268: PUSH
21269: FOR_IN
21270: IFFALSE 21288
// ComEnterUnit ( i , building ) ;
21272: LD_VAR 0 2
21276: PPUSH
21277: LD_VAR 0 1
21281: PPUSH
21282: CALL_OW 120
21286: GO 21269
21288: POP
21289: POP
// if GetBType ( building ) = b_warehouse then
21290: LD_VAR 0 1
21294: PPUSH
21295: CALL_OW 266
21299: PUSH
21300: LD_INT 1
21302: EQUAL
21303: IFFALSE 21319
// begin ComEnterUnit ( Borodin , building ) ;
21305: LD_EXP 24
21309: PPUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL_OW 120
// end ; end ; end ;
21319: PPOPN 2
21321: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 247
21331: PUSH
21332: LD_INT 2
21334: EQUAL
21335: PUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 263
21345: PUSH
21346: LD_INT 3
21348: EQUAL
21349: AND
21350: PUSH
21351: LD_EXP 41
21355: PUSH
21356: LD_INT 0
21358: EQUAL
21359: AND
21360: IFFALSE 21478
// begin varEvent1 = 1 ;
21362: LD_ADDR_EXP 41
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21370: LD_VAR 0 1
21374: PPUSH
21375: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21379: LD_INT 22
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 21
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 25
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 25
21414: PUSH
21415: LD_INT 2
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 25
21424: PUSH
21425: LD_INT 3
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 25
21434: PUSH
21435: LD_INT 4
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: PPUSH
21454: CALL_OW 69
21458: PUSH
21459: LD_EXP 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: DIFF
21467: PPUSH
21468: LD_STRING DC-Sol1-1
21470: PPUSH
21471: LD_STRING DC-FSol1-1
21473: PPUSH
21474: CALL 7358 0 3
// end ; end ;
21478: PPOPN 1
21480: END
// on UnitDestroyed ( unit ) do var i ;
21481: LD_INT 0
21483: PPUSH
// begin if unit = Joan then
21484: LD_VAR 0 1
21488: PUSH
21489: LD_EXP 15
21493: EQUAL
21494: IFFALSE 21503
// DeleteCharacters ( Joan ) ;
21496: LD_STRING Joan
21498: PPUSH
21499: CALL_OW 40
// if GetSide ( unit ) = 3 then
21503: LD_VAR 0 1
21507: PPUSH
21508: CALL_OW 255
21512: PUSH
21513: LD_INT 3
21515: EQUAL
21516: IFFALSE 22286
// begin if GetType ( unit ) = unit_building then
21518: LD_VAR 0 1
21522: PPUSH
21523: CALL_OW 247
21527: PUSH
21528: LD_INT 3
21530: EQUAL
21531: IFFALSE 22223
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21533: LD_VAR 0 1
21537: PPUSH
21538: CALL_OW 266
21542: PUSH
21543: LD_INT 31
21545: EQUAL
21546: PUSH
21547: LD_VAR 0 1
21551: PPUSH
21552: CALL_OW 266
21556: PUSH
21557: LD_INT 32
21559: EQUAL
21560: OR
21561: PUSH
21562: LD_VAR 0 1
21566: PPUSH
21567: CALL_OW 266
21571: PUSH
21572: LD_INT 36
21574: EQUAL
21575: OR
21576: PUSH
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 266
21586: PUSH
21587: LD_INT 0
21589: EQUAL
21590: OR
21591: PUSH
21592: LD_VAR 0 1
21596: PPUSH
21597: CALL_OW 266
21601: PUSH
21602: LD_INT 24
21604: EQUAL
21605: OR
21606: PUSH
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL_OW 266
21616: PUSH
21617: LD_INT 17
21619: EQUAL
21620: OR
21621: PUSH
21622: LD_VAR 0 1
21626: PPUSH
21627: CALL_OW 266
21631: PUSH
21632: LD_INT 25
21634: EQUAL
21635: OR
21636: PUSH
21637: LD_VAR 0 1
21641: PPUSH
21642: CALL_OW 266
21646: PUSH
21647: LD_INT 19
21649: EQUAL
21650: OR
21651: PUSH
21652: LD_VAR 0 1
21656: PPUSH
21657: CALL_OW 266
21661: PUSH
21662: LD_INT 20
21664: EQUAL
21665: OR
21666: PUSH
21667: LD_VAR 0 1
21671: PPUSH
21672: CALL_OW 266
21676: PUSH
21677: LD_INT 18
21679: EQUAL
21680: OR
21681: PUSH
21682: LD_VAR 0 1
21686: PPUSH
21687: CALL_OW 266
21691: PUSH
21692: LD_INT 21
21694: EQUAL
21695: OR
21696: PUSH
21697: LD_VAR 0 1
21701: PPUSH
21702: CALL_OW 266
21706: PUSH
21707: LD_INT 23
21709: EQUAL
21710: OR
21711: PUSH
21712: LD_VAR 0 1
21716: PPUSH
21717: CALL_OW 266
21721: PUSH
21722: LD_INT 16
21724: EQUAL
21725: OR
21726: PUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 266
21736: PUSH
21737: LD_INT 6
21739: EQUAL
21740: OR
21741: PUSH
21742: LD_VAR 0 1
21746: PPUSH
21747: CALL_OW 266
21751: PUSH
21752: LD_INT 29
21754: EQUAL
21755: OR
21756: PUSH
21757: LD_VAR 0 1
21761: PPUSH
21762: CALL_OW 266
21766: PUSH
21767: LD_INT 26
21769: EQUAL
21770: OR
21771: PUSH
21772: LD_VAR 0 1
21776: PPUSH
21777: CALL_OW 266
21781: PUSH
21782: LD_INT 30
21784: EQUAL
21785: OR
21786: PUSH
21787: LD_VAR 0 1
21791: PPUSH
21792: CALL_OW 266
21796: PUSH
21797: LD_INT 28
21799: EQUAL
21800: OR
21801: PUSH
21802: LD_VAR 0 1
21806: PPUSH
21807: CALL_OW 266
21811: PUSH
21812: LD_INT 27
21814: EQUAL
21815: OR
21816: PUSH
21817: LD_VAR 0 1
21821: PPUSH
21822: CALL_OW 266
21826: PUSH
21827: LD_INT 33
21829: EQUAL
21830: OR
21831: PUSH
21832: LD_VAR 0 1
21836: PPUSH
21837: CALL_OW 266
21841: PUSH
21842: LD_INT 2
21844: EQUAL
21845: OR
21846: PUSH
21847: LD_VAR 0 1
21851: PPUSH
21852: CALL_OW 266
21856: PUSH
21857: LD_INT 4
21859: EQUAL
21860: OR
21861: IFFALSE 21947
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21863: LD_ADDR_EXP 31
21867: PUSH
21868: LD_EXP 31
21872: PUSH
21873: LD_VAR 0 1
21877: PPUSH
21878: CALL_OW 266
21882: ADD
21883: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21884: LD_ADDR_EXP 31
21888: PUSH
21889: LD_EXP 31
21893: PUSH
21894: LD_VAR 0 1
21898: PPUSH
21899: CALL_OW 250
21903: ADD
21904: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21905: LD_ADDR_EXP 31
21909: PUSH
21910: LD_EXP 31
21914: PUSH
21915: LD_VAR 0 1
21919: PPUSH
21920: CALL_OW 251
21924: ADD
21925: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21926: LD_ADDR_EXP 31
21930: PUSH
21931: LD_EXP 31
21935: PUSH
21936: LD_VAR 0 1
21940: PPUSH
21941: CALL_OW 254
21945: ADD
21946: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21947: LD_VAR 0 1
21951: PPUSH
21952: CALL_OW 266
21956: PUSH
21957: LD_INT 1
21959: EQUAL
21960: IFFALSE 22039
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21962: LD_ADDR_EXP 31
21966: PUSH
21967: LD_EXP 31
21971: PUSH
21972: LD_INT 0
21974: ADD
21975: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21976: LD_ADDR_EXP 31
21980: PUSH
21981: LD_EXP 31
21985: PUSH
21986: LD_VAR 0 1
21990: PPUSH
21991: CALL_OW 250
21995: ADD
21996: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21997: LD_ADDR_EXP 31
22001: PUSH
22002: LD_EXP 31
22006: PUSH
22007: LD_VAR 0 1
22011: PPUSH
22012: CALL_OW 251
22016: ADD
22017: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22018: LD_ADDR_EXP 31
22022: PUSH
22023: LD_EXP 31
22027: PUSH
22028: LD_VAR 0 1
22032: PPUSH
22033: CALL_OW 254
22037: ADD
22038: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
22039: LD_VAR 0 1
22043: PPUSH
22044: CALL_OW 266
22048: PUSH
22049: LD_INT 3
22051: EQUAL
22052: IFFALSE 22131
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
22054: LD_ADDR_EXP 31
22058: PUSH
22059: LD_EXP 31
22063: PUSH
22064: LD_INT 2
22066: ADD
22067: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22068: LD_ADDR_EXP 31
22072: PUSH
22073: LD_EXP 31
22077: PUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: CALL_OW 250
22087: ADD
22088: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22089: LD_ADDR_EXP 31
22093: PUSH
22094: LD_EXP 31
22098: PUSH
22099: LD_VAR 0 1
22103: PPUSH
22104: CALL_OW 251
22108: ADD
22109: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22110: LD_ADDR_EXP 31
22114: PUSH
22115: LD_EXP 31
22119: PUSH
22120: LD_VAR 0 1
22124: PPUSH
22125: CALL_OW 254
22129: ADD
22130: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
22131: LD_VAR 0 1
22135: PPUSH
22136: CALL_OW 266
22140: PUSH
22141: LD_INT 5
22143: EQUAL
22144: IFFALSE 22223
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
22146: LD_ADDR_EXP 31
22150: PUSH
22151: LD_EXP 31
22155: PUSH
22156: LD_INT 4
22158: ADD
22159: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22160: LD_ADDR_EXP 31
22164: PUSH
22165: LD_EXP 31
22169: PUSH
22170: LD_VAR 0 1
22174: PPUSH
22175: CALL_OW 250
22179: ADD
22180: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22181: LD_ADDR_EXP 31
22185: PUSH
22186: LD_EXP 31
22190: PUSH
22191: LD_VAR 0 1
22195: PPUSH
22196: CALL_OW 251
22200: ADD
22201: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22202: LD_ADDR_EXP 31
22206: PUSH
22207: LD_EXP 31
22211: PUSH
22212: LD_VAR 0 1
22216: PPUSH
22217: CALL_OW 254
22221: ADD
22222: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22223: LD_VAR 0 1
22227: PPUSH
22228: CALL_OW 247
22232: PUSH
22233: LD_INT 1
22235: EQUAL
22236: IFFALSE 22286
// begin for i in defenders_list do
22238: LD_ADDR_VAR 0 2
22242: PUSH
22243: LD_EXP 32
22247: PUSH
22248: FOR_IN
22249: IFFALSE 22284
// if i = unit then
22251: LD_VAR 0 2
22255: PUSH
22256: LD_VAR 0 1
22260: EQUAL
22261: IFFALSE 22282
// defenders_list = defenders_list diff [ unit ] ;
22263: LD_ADDR_EXP 32
22267: PUSH
22268: LD_EXP 32
22272: PUSH
22273: LD_VAR 0 1
22277: PUSH
22278: EMPTY
22279: LIST
22280: DIFF
22281: ST_TO_ADDR
22282: GO 22248
22284: POP
22285: POP
// end ; end ; end ;
22286: PPOPN 2
22288: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22289: LD_VAR 0 1
22293: PPUSH
22294: CALL 41131 0 1
// end ; end_of_file
22298: PPOPN 1
22300: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22301: GO 22303
22303: DISABLE
22304: LD_INT 0
22306: PPUSH
// begin enemyWayX = [ ] ;
22307: LD_ADDR_EXP 46
22311: PUSH
22312: EMPTY
22313: ST_TO_ADDR
// enemyWayY = [ ] ;
22314: LD_ADDR_EXP 47
22318: PUSH
22319: EMPTY
22320: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22321: LD_ADDR_VAR 0 1
22325: PUSH
22326: LD_INT 1
22328: PPUSH
22329: LD_INT 3
22331: PPUSH
22332: CALL_OW 12
22336: ST_TO_ADDR
// if rnd = 1 then
22337: LD_VAR 0 1
22341: PUSH
22342: LD_INT 1
22344: EQUAL
22345: IFFALSE 22385
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22347: LD_ADDR_EXP 46
22351: PUSH
22352: LD_INT 73
22354: PUSH
22355: LD_INT 46
22357: PUSH
22358: LD_INT 29
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: LIST
22365: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22366: LD_ADDR_EXP 47
22370: PUSH
22371: LD_INT 71
22373: PUSH
22374: LD_INT 43
22376: PUSH
22377: LD_INT 29
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: LIST
22384: ST_TO_ADDR
// end ; if rnd = 2 then
22385: LD_VAR 0 1
22389: PUSH
22390: LD_INT 2
22392: EQUAL
22393: IFFALSE 22417
// begin enemyWayX = [ 64 ] ;
22395: LD_ADDR_EXP 46
22399: PUSH
22400: LD_INT 64
22402: PUSH
22403: EMPTY
22404: LIST
22405: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22406: LD_ADDR_EXP 47
22410: PUSH
22411: LD_INT 43
22413: PUSH
22414: EMPTY
22415: LIST
22416: ST_TO_ADDR
// end ; if rnd = 3 then
22417: LD_VAR 0 1
22421: PUSH
22422: LD_INT 3
22424: EQUAL
22425: IFFALSE 22449
// begin enemyWayX = [ 80 ] ;
22427: LD_ADDR_EXP 46
22431: PUSH
22432: LD_INT 80
22434: PUSH
22435: EMPTY
22436: LIST
22437: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22438: LD_ADDR_EXP 47
22442: PUSH
22443: LD_INT 28
22445: PUSH
22446: EMPTY
22447: LIST
22448: ST_TO_ADDR
// end ; enable ;
22449: ENABLE
// end ;
22450: PPOPN 1
22452: END
// every 0 0$1 do
22453: GO 22455
22455: DISABLE
// begin enable ;
22456: ENABLE
// if escapeAvalaible = 0 then
22457: LD_EXP 36
22461: PUSH
22462: LD_INT 0
22464: EQUAL
22465: IFFALSE 22477
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22467: LD_INT 3
22469: PPUSH
22470: LD_INT 6
22472: PPUSH
22473: CALL 8769 0 2
// if escapeAvalaible = 0 then
22477: LD_EXP 36
22481: PUSH
22482: LD_INT 0
22484: EQUAL
22485: IFFALSE 22497
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22487: LD_INT 1
22489: PPUSH
22490: LD_INT 24
22492: PPUSH
22493: CALL 9429 0 2
// if russianAI = 1 then
22497: LD_EXP 27
22501: PUSH
22502: LD_INT 1
22504: EQUAL
22505: IFFALSE 22575
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22507: LD_INT 3
22509: PPUSH
22510: LD_INT 7
22512: PPUSH
22513: LD_INT 6
22515: PPUSH
22516: LD_EXP 29
22520: PPUSH
22521: CALL 11871 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22525: LD_INT 3
22527: PPUSH
22528: LD_EXP 28
22532: PPUSH
22533: LD_INT 6
22535: PPUSH
22536: LD_EXP 31
22540: PPUSH
22541: CALL 11465 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22545: LD_INT 3
22547: PPUSH
22548: LD_INT 26
22550: PPUSH
22551: LD_EXP 46
22555: PPUSH
22556: LD_EXP 47
22560: PPUSH
22561: CALL 10329 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22565: LD_INT 3
22567: PPUSH
22568: LD_INT 1
22570: PPUSH
22571: CALL 12415 0 2
// end ; if SikorskyArrive = 1 then
22575: LD_EXP 18
22579: PUSH
22580: LD_INT 1
22582: EQUAL
22583: IFFALSE 22601
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22585: LD_INT 3
22587: PPUSH
22588: LD_INT 10
22590: PPUSH
22591: LD_INT 53
22593: PPUSH
22594: LD_INT 59
22596: PPUSH
22597: CALL 10126 0 4
// end ;
22601: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22602: LD_EXP 27
22606: PUSH
22607: LD_INT 1
22609: EQUAL
22610: IFFALSE 22886
22612: GO 22614
22614: DISABLE
22615: LD_INT 0
22617: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22618: LD_ADDR_VAR 0 1
22622: PUSH
22623: LD_INT 22
22625: PUSH
22626: LD_INT 3
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 21
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 30
22645: PUSH
22646: LD_INT 32
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 3
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: LD_INT 35
22661: PUSH
22662: LD_INT 43
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 35
22671: PUSH
22672: LD_INT 44
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 35
22681: PUSH
22682: LD_INT 46
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: PPUSH
22705: CALL_OW 69
22709: PUSH
22710: FOR_IN
22711: IFFALSE 22750
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22713: LD_VAR 0 1
22717: PPUSH
22718: LD_INT 43
22720: PUSH
22721: LD_INT 44
22723: PUSH
22724: LD_INT 46
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 1
22734: PPUSH
22735: LD_INT 3
22737: PPUSH
22738: CALL_OW 12
22742: ARRAY
22743: PPUSH
22744: CALL_OW 431
22748: GO 22710
22750: POP
22751: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22752: LD_ADDR_VAR 0 1
22756: PUSH
22757: LD_INT 22
22759: PUSH
22760: LD_INT 3
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 21
22769: PUSH
22770: LD_INT 3
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 30
22779: PUSH
22780: LD_INT 33
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 3
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: LD_INT 35
22795: PUSH
22796: LD_INT 43
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 35
22805: PUSH
22806: LD_INT 44
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 35
22815: PUSH
22816: LD_INT 46
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: PPUSH
22839: CALL_OW 69
22843: PUSH
22844: FOR_IN
22845: IFFALSE 22884
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22847: LD_VAR 0 1
22851: PPUSH
22852: LD_INT 43
22854: PUSH
22855: LD_INT 44
22857: PUSH
22858: LD_INT 46
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: PPUSH
22869: LD_INT 3
22871: PPUSH
22872: CALL_OW 12
22876: ARRAY
22877: PPUSH
22878: CALL_OW 431
22882: GO 22844
22884: POP
22885: POP
// end ;
22886: PPOPN 1
22888: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22889: LD_EXP 24
22893: PPUSH
22894: CALL_OW 310
22898: NOT
22899: PUSH
22900: LD_EXP 28
22904: PPUSH
22905: CALL_OW 302
22909: AND
22910: PUSH
22911: LD_EXP 28
22915: PPUSH
22916: CALL_OW 255
22920: PUSH
22921: LD_INT 3
22923: EQUAL
22924: AND
22925: IFFALSE 22945
22927: GO 22929
22929: DISABLE
// begin enable ;
22930: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22931: LD_EXP 24
22935: PPUSH
22936: LD_EXP 28
22940: PPUSH
22941: CALL_OW 120
// end ;
22945: END
// every 0 0$1 trigger SikorskyAI = 1 do
22946: LD_EXP 20
22950: PUSH
22951: LD_INT 1
22953: EQUAL
22954: IFFALSE 22989
22956: GO 22958
22958: DISABLE
// begin enable ;
22959: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22960: LD_INT 4
22962: PPUSH
22963: LD_INT 10
22965: PPUSH
22966: LD_INT 93
22968: PPUSH
22969: LD_INT 93
22971: PPUSH
22972: CALL 10126 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
22976: LD_INT 4
22978: PPUSH
22979: LD_INT 11
22981: PPUSH
22982: LD_INT 3
22984: PPUSH
22985: CALL 16627 0 3
// end ;
22989: END
// every 0 0$1 trigger SikorskyAI = 1 do
22990: LD_EXP 20
22994: PUSH
22995: LD_INT 1
22997: EQUAL
22998: IFFALSE 23010
23000: GO 23002
23002: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
23003: LD_INT 4
23005: PPUSH
23006: CALL 11137 0 1
23010: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
23011: LD_EXP 27
23015: PUSH
23016: LD_INT 1
23018: EQUAL
23019: PUSH
23020: LD_EXP 30
23024: PPUSH
23025: CALL_OW 302
23029: AND
23030: PUSH
23031: LD_EXP 30
23035: PPUSH
23036: CALL_OW 255
23040: PUSH
23041: LD_INT 3
23043: EQUAL
23044: AND
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_INT 3
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 21
23058: PUSH
23059: LD_INT 2
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 33
23068: PUSH
23069: LD_INT 3
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: PPUSH
23081: CALL_OW 69
23085: PUSH
23086: LD_INT 0
23088: EQUAL
23089: AND
23090: IFFALSE 23324
23092: GO 23094
23094: DISABLE
// begin enable ;
23095: ENABLE
// if Difficulty = 1 then
23096: LD_OWVAR 67
23100: PUSH
23101: LD_INT 1
23103: EQUAL
23104: IFFALSE 23172
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
23106: LD_INT 3
23108: PPUSH
23109: LD_EXP 30
23113: PPUSH
23114: LD_INT 5
23116: PPUSH
23117: LD_INT 8
23119: PPUSH
23120: CALL_OW 12
23124: PPUSH
23125: LD_INT 43
23127: PUSH
23128: LD_INT 43
23130: PUSH
23131: LD_INT 43
23133: PUSH
23134: LD_INT 43
23136: PUSH
23137: LD_INT 44
23139: PUSH
23140: LD_INT 44
23142: PUSH
23143: LD_INT 44
23145: PUSH
23146: LD_INT 46
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: PPUSH
23159: LD_INT 1
23161: PPUSH
23162: LD_INT 3
23164: PPUSH
23165: LD_INT 24
23167: PPUSH
23168: CALL 9972 0 7
// if Difficulty = 2 then
23172: LD_OWVAR 67
23176: PUSH
23177: LD_INT 2
23179: EQUAL
23180: IFFALSE 23248
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
23182: LD_INT 3
23184: PPUSH
23185: LD_EXP 30
23189: PPUSH
23190: LD_INT 6
23192: PPUSH
23193: LD_INT 8
23195: PPUSH
23196: CALL_OW 12
23200: PPUSH
23201: LD_INT 43
23203: PUSH
23204: LD_INT 43
23206: PUSH
23207: LD_INT 44
23209: PUSH
23210: LD_INT 44
23212: PUSH
23213: LD_INT 44
23215: PUSH
23216: LD_INT 44
23218: PUSH
23219: LD_INT 46
23221: PUSH
23222: LD_INT 46
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: PPUSH
23235: LD_INT 1
23237: PPUSH
23238: LD_INT 3
23240: PPUSH
23241: LD_INT 24
23243: PPUSH
23244: CALL 9972 0 7
// if Difficulty >= 3 then
23248: LD_OWVAR 67
23252: PUSH
23253: LD_INT 3
23255: GREATEREQUAL
23256: IFFALSE 23324
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23258: LD_INT 3
23260: PPUSH
23261: LD_EXP 30
23265: PPUSH
23266: LD_INT 7
23268: PPUSH
23269: LD_INT 8
23271: PPUSH
23272: CALL_OW 12
23276: PPUSH
23277: LD_INT 43
23279: PUSH
23280: LD_INT 43
23282: PUSH
23283: LD_INT 44
23285: PUSH
23286: LD_INT 44
23288: PUSH
23289: LD_INT 44
23291: PUSH
23292: LD_INT 46
23294: PUSH
23295: LD_INT 46
23297: PUSH
23298: LD_INT 46
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: PPUSH
23311: LD_INT 1
23313: PPUSH
23314: LD_INT 3
23316: PPUSH
23317: LD_INT 24
23319: PPUSH
23320: CALL 9972 0 7
// end ;
23324: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23325: LD_EXP 38
23329: PUSH
23330: LD_INT 1
23332: EQUAL
23333: IFFALSE 23415
23335: GO 23337
23337: DISABLE
23338: LD_INT 0
23340: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23341: LD_ADDR_VAR 0 1
23345: PUSH
23346: LD_INT 22
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 21
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 3
23368: PUSH
23369: LD_INT 24
23371: PUSH
23372: LD_INT 650
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: LIST
23387: PPUSH
23388: CALL_OW 69
23392: PUSH
23393: FOR_IN
23394: IFFALSE 23413
// ComMoveXY ( i , 51 , 12 ) ;
23396: LD_VAR 0 1
23400: PPUSH
23401: LD_INT 51
23403: PPUSH
23404: LD_INT 12
23406: PPUSH
23407: CALL_OW 111
23411: GO 23393
23413: POP
23414: POP
// end ; end_of_file
23415: PPOPN 1
23417: END
// every 1 1$20 trigger firstAttack = 1 do
23418: LD_EXP 33
23422: PUSH
23423: LD_INT 1
23425: EQUAL
23426: IFFALSE 23536
23428: GO 23430
23430: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23431: LD_INT 6
23433: PPUSH
23434: LD_INT 3
23436: PPUSH
23437: LD_INT 3
23439: PPUSH
23440: LD_INT 4
23442: PPUSH
23443: CALL_OW 12
23447: PUSH
23448: LD_INT 4
23450: PPUSH
23451: LD_INT 6
23453: PPUSH
23454: CALL_OW 12
23458: PUSH
23459: LD_INT 5
23461: PPUSH
23462: LD_INT 6
23464: PPUSH
23465: CALL_OW 12
23469: PUSH
23470: LD_INT 6
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: PUSH
23479: LD_OWVAR 67
23483: ARRAY
23484: PPUSH
23485: LD_INT 0
23487: PPUSH
23488: LD_INT 0
23490: PPUSH
23491: LD_INT 0
23493: PPUSH
23494: LD_INT 0
23496: PPUSH
23497: LD_EXP 25
23501: PPUSH
23502: LD_EXP 26
23506: PPUSH
23507: CALL_OW 12
23511: PPUSH
23512: LD_INT 16
23514: PPUSH
23515: LD_INT 7
23517: PPUSH
23518: LD_INT 1
23520: PPUSH
23521: LD_INT 1
23523: PPUSH
23524: LD_INT 3
23526: PPUSH
23527: CALL_OW 12
23531: PPUSH
23532: CALL 12645 0 12
23536: END
// every 1 1$40 trigger firstAttack = 1 do
23537: LD_EXP 33
23541: PUSH
23542: LD_INT 1
23544: EQUAL
23545: IFFALSE 23641
23547: GO 23549
23549: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23550: LD_INT 16
23552: PPUSH
23553: LD_INT 6
23555: PPUSH
23556: LD_INT 3
23558: PPUSH
23559: LD_INT 4
23561: PPUSH
23562: CALL_OW 12
23566: PUSH
23567: LD_INT 4
23569: PPUSH
23570: LD_INT 5
23572: PPUSH
23573: CALL_OW 12
23577: PUSH
23578: LD_INT 5
23580: PUSH
23581: LD_INT 6
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: PUSH
23590: LD_OWVAR 67
23594: ARRAY
23595: PPUSH
23596: LD_EXP 25
23600: PPUSH
23601: LD_EXP 26
23605: PPUSH
23606: CALL_OW 12
23610: PPUSH
23611: LD_INT 3
23613: PPUSH
23614: LD_INT 1
23616: PPUSH
23617: LD_INT 3
23619: PPUSH
23620: LD_INT 44
23622: PUSH
23623: LD_INT 46
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PPUSH
23630: EMPTY
23631: PPUSH
23632: EMPTY
23633: PPUSH
23634: LD_INT 1
23636: PPUSH
23637: CALL 14938 0 11
23641: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23642: LD_EXP 33
23646: PUSH
23647: LD_INT 1
23649: EQUAL
23650: PUSH
23651: LD_EXP 39
23655: PUSH
23656: LD_INT 0
23658: EQUAL
23659: AND
23660: IFFALSE 23770
23662: GO 23664
23664: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23665: LD_INT 6
23667: PPUSH
23668: LD_INT 3
23670: PPUSH
23671: LD_INT 4
23673: PPUSH
23674: LD_INT 5
23676: PPUSH
23677: CALL_OW 12
23681: PUSH
23682: LD_INT 5
23684: PPUSH
23685: LD_INT 6
23687: PPUSH
23688: CALL_OW 12
23692: PUSH
23693: LD_INT 5
23695: PPUSH
23696: LD_INT 6
23698: PPUSH
23699: CALL_OW 12
23703: PUSH
23704: LD_INT 6
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: PUSH
23713: LD_OWVAR 67
23717: ARRAY
23718: PPUSH
23719: LD_INT 0
23721: PPUSH
23722: LD_INT 0
23724: PPUSH
23725: LD_INT 0
23727: PPUSH
23728: LD_INT 0
23730: PPUSH
23731: LD_EXP 25
23735: PPUSH
23736: LD_EXP 26
23740: PPUSH
23741: CALL_OW 12
23745: PPUSH
23746: LD_INT 16
23748: PPUSH
23749: LD_INT 7
23751: PPUSH
23752: LD_INT 1
23754: PPUSH
23755: LD_INT 1
23757: PPUSH
23758: LD_INT 3
23760: PPUSH
23761: CALL_OW 12
23765: PPUSH
23766: CALL 12645 0 12
23770: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23771: LD_EXP 33
23775: PUSH
23776: LD_INT 1
23778: EQUAL
23779: PUSH
23780: LD_EXP 39
23784: PUSH
23785: LD_INT 0
23787: EQUAL
23788: AND
23789: IFFALSE 23889
23791: GO 23793
23793: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23794: LD_INT 16
23796: PPUSH
23797: LD_INT 6
23799: PPUSH
23800: LD_INT 4
23802: PPUSH
23803: LD_INT 5
23805: PPUSH
23806: CALL_OW 12
23810: PUSH
23811: LD_INT 6
23813: PPUSH
23814: LD_INT 7
23816: PPUSH
23817: CALL_OW 12
23821: PUSH
23822: LD_INT 7
23824: PUSH
23825: LD_INT 7
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: PUSH
23834: LD_OWVAR 67
23838: ARRAY
23839: PPUSH
23840: LD_EXP 25
23844: PPUSH
23845: LD_EXP 26
23849: PPUSH
23850: CALL_OW 12
23854: PPUSH
23855: LD_INT 3
23857: PPUSH
23858: LD_INT 1
23860: PPUSH
23861: LD_INT 3
23863: PPUSH
23864: LD_INT 43
23866: PUSH
23867: LD_INT 44
23869: PUSH
23870: LD_INT 46
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: PPUSH
23878: EMPTY
23879: PPUSH
23880: EMPTY
23881: PPUSH
23882: LD_INT 1
23884: PPUSH
23885: CALL 14938 0 11
23889: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23890: LD_EXP 33
23894: PUSH
23895: LD_INT 1
23897: EQUAL
23898: PUSH
23899: LD_EXP 39
23903: PUSH
23904: LD_INT 0
23906: EQUAL
23907: AND
23908: IFFALSE 24008
23910: GO 23912
23912: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23913: LD_INT 16
23915: PPUSH
23916: LD_INT 6
23918: PPUSH
23919: LD_INT 4
23921: PPUSH
23922: LD_INT 5
23924: PPUSH
23925: CALL_OW 12
23929: PUSH
23930: LD_INT 6
23932: PPUSH
23933: LD_INT 7
23935: PPUSH
23936: CALL_OW 12
23940: PUSH
23941: LD_INT 7
23943: PUSH
23944: LD_INT 8
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: PUSH
23953: LD_OWVAR 67
23957: ARRAY
23958: PPUSH
23959: LD_EXP 25
23963: PPUSH
23964: LD_EXP 26
23968: PPUSH
23969: CALL_OW 12
23973: PPUSH
23974: LD_INT 3
23976: PPUSH
23977: LD_INT 1
23979: PPUSH
23980: LD_INT 3
23982: PPUSH
23983: LD_INT 43
23985: PUSH
23986: LD_INT 44
23988: PUSH
23989: LD_INT 46
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: PPUSH
23997: EMPTY
23998: PPUSH
23999: EMPTY
24000: PPUSH
24001: LD_INT 1
24003: PPUSH
24004: CALL 14938 0 11
24008: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
24009: LD_EXP 33
24013: PUSH
24014: LD_INT 1
24016: EQUAL
24017: PUSH
24018: LD_EXP 39
24022: PUSH
24023: LD_INT 0
24025: EQUAL
24026: AND
24027: IFFALSE 24107
24029: GO 24031
24031: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24032: LD_INT 16
24034: PPUSH
24035: LD_INT 6
24037: PPUSH
24038: LD_INT 4
24040: PUSH
24041: LD_INT 6
24043: PUSH
24044: LD_INT 7
24046: PUSH
24047: LD_INT 8
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: PUSH
24056: LD_OWVAR 67
24060: ARRAY
24061: PPUSH
24062: LD_EXP 25
24066: PPUSH
24067: LD_EXP 26
24071: PPUSH
24072: CALL_OW 12
24076: PPUSH
24077: LD_INT 3
24079: PPUSH
24080: LD_INT 1
24082: PPUSH
24083: LD_INT 3
24085: PPUSH
24086: LD_INT 44
24088: PUSH
24089: LD_INT 46
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PPUSH
24096: EMPTY
24097: PPUSH
24098: EMPTY
24099: PPUSH
24100: LD_INT 1
24102: PPUSH
24103: CALL 14938 0 11
24107: END
// every 1 1$00 trigger secondAttack = 1 do
24108: LD_EXP 34
24112: PUSH
24113: LD_INT 1
24115: EQUAL
24116: IFFALSE 24202
24118: GO 24120
24120: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24121: LD_INT 6
24123: PPUSH
24124: LD_INT 3
24126: PPUSH
24127: LD_INT 3
24129: PUSH
24130: LD_INT 4
24132: PUSH
24133: LD_INT 5
24135: PUSH
24136: LD_INT 6
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: PUSH
24145: LD_OWVAR 67
24149: ARRAY
24150: PPUSH
24151: LD_INT 0
24153: PPUSH
24154: LD_INT 0
24156: PPUSH
24157: LD_INT 0
24159: PPUSH
24160: LD_INT 0
24162: PPUSH
24163: LD_EXP 25
24167: PPUSH
24168: LD_EXP 26
24172: PPUSH
24173: CALL_OW 12
24177: PPUSH
24178: LD_INT 16
24180: PPUSH
24181: LD_INT 7
24183: PPUSH
24184: LD_INT 1
24186: PPUSH
24187: LD_INT 1
24189: PPUSH
24190: LD_INT 3
24192: PPUSH
24193: CALL_OW 12
24197: PPUSH
24198: CALL 12645 0 12
24202: END
// every 1 1$00 trigger secondAttack = 1 do
24203: LD_EXP 34
24207: PUSH
24208: LD_INT 1
24210: EQUAL
24211: IFFALSE 24319
24213: GO 24215
24215: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
24216: LD_INT 16
24218: PPUSH
24219: LD_INT 6
24221: PPUSH
24222: LD_INT 5
24224: PPUSH
24225: LD_INT 6
24227: PPUSH
24228: CALL_OW 12
24232: PUSH
24233: LD_INT 6
24235: PPUSH
24236: LD_INT 9
24238: PPUSH
24239: CALL_OW 12
24243: PUSH
24244: LD_INT 7
24246: PPUSH
24247: LD_INT 9
24249: PPUSH
24250: CALL_OW 12
24254: PUSH
24255: LD_INT 9
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: PUSH
24264: LD_OWVAR 67
24268: ARRAY
24269: PPUSH
24270: LD_EXP 25
24274: PPUSH
24275: LD_EXP 26
24279: PPUSH
24280: CALL_OW 12
24284: PPUSH
24285: LD_INT 3
24287: PPUSH
24288: LD_INT 1
24290: PPUSH
24291: LD_INT 3
24293: PPUSH
24294: LD_INT 43
24296: PUSH
24297: LD_INT 44
24299: PUSH
24300: LD_INT 46
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: PPUSH
24308: EMPTY
24309: PPUSH
24310: EMPTY
24311: PPUSH
24312: LD_INT 1
24314: PPUSH
24315: CALL 14938 0 11
24319: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24320: LD_EXP 18
24324: PUSH
24325: LD_INT 0
24327: EQUAL
24328: IFFALSE 24410
24330: GO 24332
24332: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24333: LD_INT 6
24335: PPUSH
24336: LD_INT 3
24338: PPUSH
24339: LD_INT 3
24341: PUSH
24342: LD_INT 4
24344: PUSH
24345: LD_INT 5
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: LIST
24352: PUSH
24353: LD_OWVAR 67
24357: ARRAY
24358: PPUSH
24359: LD_INT 0
24361: PPUSH
24362: LD_INT 0
24364: PPUSH
24365: LD_INT 0
24367: PPUSH
24368: LD_INT 0
24370: PPUSH
24371: LD_EXP 25
24375: PPUSH
24376: LD_EXP 26
24380: PPUSH
24381: CALL_OW 12
24385: PPUSH
24386: LD_INT 16
24388: PPUSH
24389: LD_INT 7
24391: PPUSH
24392: LD_INT 1
24394: PPUSH
24395: LD_INT 1
24397: PPUSH
24398: LD_INT 3
24400: PPUSH
24401: CALL_OW 12
24405: PPUSH
24406: CALL 12645 0 12
24410: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24411: LD_EXP 18
24415: PUSH
24416: LD_INT 0
24418: EQUAL
24419: IFFALSE 24523
24421: GO 24423
24423: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24424: LD_INT 16
24426: PPUSH
24427: LD_INT 6
24429: PPUSH
24430: LD_INT 5
24432: PPUSH
24433: LD_INT 6
24435: PPUSH
24436: CALL_OW 12
24440: PUSH
24441: LD_INT 6
24443: PPUSH
24444: LD_INT 9
24446: PPUSH
24447: CALL_OW 12
24451: PUSH
24452: LD_INT 7
24454: PPUSH
24455: LD_INT 9
24457: PPUSH
24458: CALL_OW 12
24462: PUSH
24463: LD_INT 9
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: PUSH
24472: LD_OWVAR 67
24476: ARRAY
24477: PPUSH
24478: LD_EXP 25
24482: PPUSH
24483: LD_EXP 26
24487: PPUSH
24488: CALL_OW 12
24492: PPUSH
24493: LD_INT 3
24495: PPUSH
24496: LD_INT 1
24498: PPUSH
24499: LD_INT 3
24501: PPUSH
24502: LD_INT 44
24504: PUSH
24505: LD_INT 46
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PPUSH
24512: EMPTY
24513: PPUSH
24514: EMPTY
24515: PPUSH
24516: LD_INT 1
24518: PPUSH
24519: CALL 14938 0 11
24523: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24524: LD_EXP 18
24528: PUSH
24529: LD_INT 0
24531: EQUAL
24532: IFFALSE 24614
24534: GO 24536
24536: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24537: LD_INT 6
24539: PPUSH
24540: LD_INT 3
24542: PPUSH
24543: LD_INT 3
24545: PUSH
24546: LD_INT 4
24548: PUSH
24549: LD_INT 5
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: PUSH
24557: LD_OWVAR 67
24561: ARRAY
24562: PPUSH
24563: LD_INT 0
24565: PPUSH
24566: LD_INT 0
24568: PPUSH
24569: LD_INT 0
24571: PPUSH
24572: LD_INT 0
24574: PPUSH
24575: LD_EXP 25
24579: PPUSH
24580: LD_EXP 26
24584: PPUSH
24585: CALL_OW 12
24589: PPUSH
24590: LD_INT 16
24592: PPUSH
24593: LD_INT 7
24595: PPUSH
24596: LD_INT 1
24598: PPUSH
24599: LD_INT 1
24601: PPUSH
24602: LD_INT 3
24604: PPUSH
24605: CALL_OW 12
24609: PPUSH
24610: CALL 12645 0 12
24614: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24615: LD_EXP 18
24619: PUSH
24620: LD_INT 0
24622: EQUAL
24623: IFFALSE 24727
24625: GO 24627
24627: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24628: LD_INT 16
24630: PPUSH
24631: LD_INT 6
24633: PPUSH
24634: LD_INT 5
24636: PPUSH
24637: LD_INT 6
24639: PPUSH
24640: CALL_OW 12
24644: PUSH
24645: LD_INT 6
24647: PPUSH
24648: LD_INT 9
24650: PPUSH
24651: CALL_OW 12
24655: PUSH
24656: LD_INT 7
24658: PPUSH
24659: LD_INT 9
24661: PPUSH
24662: CALL_OW 12
24666: PUSH
24667: LD_INT 9
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: PUSH
24676: LD_OWVAR 67
24680: ARRAY
24681: PPUSH
24682: LD_EXP 25
24686: PPUSH
24687: LD_EXP 26
24691: PPUSH
24692: CALL_OW 12
24696: PPUSH
24697: LD_INT 3
24699: PPUSH
24700: LD_INT 1
24702: PPUSH
24703: LD_INT 3
24705: PPUSH
24706: LD_INT 44
24708: PUSH
24709: LD_INT 46
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PPUSH
24716: EMPTY
24717: PPUSH
24718: EMPTY
24719: PPUSH
24720: LD_INT 1
24722: PPUSH
24723: CALL 14938 0 11
24727: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24728: LD_EXP 18
24732: PUSH
24733: LD_INT 0
24735: EQUAL
24736: IFFALSE 24822
24738: GO 24740
24740: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24741: LD_INT 6
24743: PPUSH
24744: LD_INT 3
24746: PPUSH
24747: LD_INT 3
24749: PUSH
24750: LD_INT 4
24752: PUSH
24753: LD_INT 5
24755: PUSH
24756: LD_INT 6
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: PUSH
24765: LD_OWVAR 67
24769: ARRAY
24770: PPUSH
24771: LD_INT 0
24773: PPUSH
24774: LD_INT 0
24776: PPUSH
24777: LD_INT 0
24779: PPUSH
24780: LD_INT 0
24782: PPUSH
24783: LD_EXP 25
24787: PPUSH
24788: LD_EXP 26
24792: PPUSH
24793: CALL_OW 12
24797: PPUSH
24798: LD_INT 16
24800: PPUSH
24801: LD_INT 7
24803: PPUSH
24804: LD_INT 1
24806: PPUSH
24807: LD_INT 1
24809: PPUSH
24810: LD_INT 3
24812: PPUSH
24813: CALL_OW 12
24817: PPUSH
24818: CALL 12645 0 12
24822: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24823: LD_EXP 18
24827: PUSH
24828: LD_INT 0
24830: EQUAL
24831: IFFALSE 24911
24833: GO 24835
24835: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24836: LD_INT 16
24838: PPUSH
24839: LD_INT 6
24841: PPUSH
24842: LD_INT 7
24844: PUSH
24845: LD_INT 8
24847: PUSH
24848: LD_INT 9
24850: PUSH
24851: LD_INT 10
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: PUSH
24860: LD_OWVAR 67
24864: ARRAY
24865: PPUSH
24866: LD_EXP 25
24870: PPUSH
24871: LD_EXP 26
24875: PPUSH
24876: CALL_OW 12
24880: PPUSH
24881: LD_INT 3
24883: PPUSH
24884: LD_INT 1
24886: PPUSH
24887: LD_INT 3
24889: PPUSH
24890: LD_INT 44
24892: PUSH
24893: LD_INT 46
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PPUSH
24900: EMPTY
24901: PPUSH
24902: EMPTY
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: CALL 14938 0 11
24911: END
// every 0 0$1 trigger timerStatus = 1 do
24912: LD_EXP 35
24916: PUSH
24917: LD_INT 1
24919: EQUAL
24920: IFFALSE 24980
24922: GO 24924
24924: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24925: LD_INT 35
24927: PPUSH
24928: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24932: LD_ADDR_OWVAR 47
24936: PUSH
24937: LD_STRING #Am08-1
24939: PUSH
24940: LD_EXP 19
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24949: LD_ADDR_EXP 19
24953: PUSH
24954: LD_EXP 19
24958: PUSH
24959: LD_INT 35
24961: MINUS
24962: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
24963: LD_EXP 19
24967: PUSH
24968: LD_INT 0
24970: EQUAL
24971: IFFALSE 24925
// display_strings := [ ] ;
24973: LD_ADDR_OWVAR 47
24977: PUSH
24978: EMPTY
24979: ST_TO_ADDR
// end ; end_of_file
24980: END
// every 1 1$0 do
24981: GO 24983
24983: DISABLE
// begin if supply <= 13 and supply > 7 then
24984: LD_EXP 40
24988: PUSH
24989: LD_INT 13
24991: LESSEQUAL
24992: PUSH
24993: LD_EXP 40
24997: PUSH
24998: LD_INT 7
25000: GREATER
25001: AND
25002: IFFALSE 25025
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
25004: LD_INT 3
25006: PPUSH
25007: LD_INT 5
25009: PPUSH
25010: CALL_OW 12
25014: PPUSH
25015: LD_INT 5
25017: PPUSH
25018: LD_INT 1
25020: PPUSH
25021: CALL_OW 55
// if supply <= 7 and supply > 4 then
25025: LD_EXP 40
25029: PUSH
25030: LD_INT 7
25032: LESSEQUAL
25033: PUSH
25034: LD_EXP 40
25038: PUSH
25039: LD_INT 4
25041: GREATER
25042: AND
25043: IFFALSE 25066
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
25045: LD_INT 3
25047: PPUSH
25048: LD_INT 5
25050: PPUSH
25051: CALL_OW 12
25055: PPUSH
25056: LD_INT 20
25058: PPUSH
25059: LD_INT 1
25061: PPUSH
25062: CALL_OW 55
// if supply <= 4 and supply > 0 then
25066: LD_EXP 40
25070: PUSH
25071: LD_INT 4
25073: LESSEQUAL
25074: PUSH
25075: LD_EXP 40
25079: PUSH
25080: LD_INT 0
25082: GREATER
25083: AND
25084: IFFALSE 25107
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
25086: LD_INT 3
25088: PPUSH
25089: LD_INT 5
25091: PPUSH
25092: CALL_OW 12
25096: PPUSH
25097: LD_INT 21
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: CALL_OW 55
// if supply > 0 then
25107: LD_EXP 40
25111: PUSH
25112: LD_INT 0
25114: GREATER
25115: IFFALSE 25132
// begin supply = supply - 1 ;
25117: LD_ADDR_EXP 40
25121: PUSH
25122: LD_EXP 40
25126: PUSH
25127: LD_INT 1
25129: MINUS
25130: ST_TO_ADDR
// enable ;
25131: ENABLE
// end ; end ; end_of_file
25132: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
25133: LD_EXP 39
25137: PUSH
25138: LD_INT 1
25140: EQUAL
25141: PUSH
25142: LD_EXP 1
25146: PPUSH
25147: CALL_OW 301
25151: AND
25152: IFFALSE 25164
25154: GO 25156
25156: DISABLE
// YouLost ( JMM ) ;
25157: LD_STRING JMM
25159: PPUSH
25160: CALL_OW 104
25164: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
25165: LD_EXP 18
25169: PUSH
25170: LD_INT 1
25172: EQUAL
25173: PUSH
25174: LD_EXP 16
25178: PPUSH
25179: CALL_OW 301
25183: AND
25184: IFFALSE 25216
25186: GO 25188
25188: DISABLE
// begin DialogueOn ;
25189: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
25193: LD_EXP 23
25197: PPUSH
25198: LD_STRING D8a-Pow-1
25200: PPUSH
25201: CALL_OW 94
// DialogueOff ;
25205: CALL_OW 7
// YouLost ( Dismissed ) ;
25209: LD_STRING Dismissed
25211: PPUSH
25212: CALL_OW 104
// end ;
25216: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
25217: LD_INT 22
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: LD_INT 30
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 30
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: LIST
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PPUSH
25259: CALL_OW 69
25263: PUSH
25264: LD_INT 0
25266: EQUAL
25267: IFFALSE 25279
25269: GO 25271
25271: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25272: LD_STRING Destroyed
25274: PPUSH
25275: CALL_OW 104
25279: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25280: LD_EXP 24
25284: PPUSH
25285: CALL_OW 301
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_INT 3
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 21
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: PUSH
25319: LD_INT 7
25321: PUSH
25322: LD_INT 6
25324: PUSH
25325: LD_INT 5
25327: PUSH
25328: LD_INT 5
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: PUSH
25337: LD_OWVAR 67
25341: ARRAY
25342: LESS
25343: AND
25344: PUSH
25345: LD_EXP 1
25349: PPUSH
25350: CALL_OW 305
25354: AND
25355: IFFALSE 25911
25357: GO 25359
25359: DISABLE
25360: LD_INT 0
25362: PPUSH
25363: PPUSH
25364: PPUSH
// begin russianAI = 0 ;
25365: LD_ADDR_EXP 27
25369: PUSH
25370: LD_INT 0
25372: ST_TO_ADDR
// escapeAvalaible = 1 ;
25373: LD_ADDR_EXP 36
25377: PUSH
25378: LD_INT 1
25380: ST_TO_ADDR
// Video ( true ) ;
25381: LD_INT 1
25383: PPUSH
25384: CALL 81739 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25388: LD_INT 3
25390: PPUSH
25391: LD_INT 1
25393: PPUSH
25394: LD_INT 1
25396: PPUSH
25397: LD_INT 0
25399: PPUSH
25400: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25404: LD_INT 6
25406: PPUSH
25407: LD_INT 1
25409: PPUSH
25410: LD_INT 1
25412: PPUSH
25413: LD_INT 0
25415: PPUSH
25416: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25420: LD_INT 3
25422: PPUSH
25423: LD_INT 1
25425: PPUSH
25426: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25430: LD_INT 97
25432: PPUSH
25433: LD_INT 91
25435: PPUSH
25436: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25440: LD_INT 22
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 21
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PPUSH
25464: CALL_OW 69
25468: PPUSH
25469: CALL_OW 121
// wait ( 0 0$01 ) ;
25473: LD_INT 35
25475: PPUSH
25476: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25480: LD_INT 22
25482: PUSH
25483: LD_INT 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 21
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PPUSH
25504: CALL_OW 69
25508: PPUSH
25509: LD_INT 124
25511: PPUSH
25512: LD_INT 98
25514: PPUSH
25515: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25519: LD_INT 22
25521: PUSH
25522: LD_INT 6
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 21
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PPUSH
25543: CALL_OW 69
25547: PPUSH
25548: CALL_OW 121
// wait ( 0 0$01 ) ;
25552: LD_INT 35
25554: PPUSH
25555: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25559: LD_INT 22
25561: PUSH
25562: LD_INT 6
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 21
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PPUSH
25583: CALL_OW 69
25587: PPUSH
25588: LD_INT 124
25590: PPUSH
25591: LD_INT 98
25593: PPUSH
25594: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25598: LD_INT 22
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 21
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 3
25620: PUSH
25621: LD_INT 54
25623: PUSH
25624: EMPTY
25625: LIST
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: PPUSH
25636: CALL_OW 69
25640: PPUSH
25641: LD_INT 124
25643: PPUSH
25644: LD_INT 98
25646: PPUSH
25647: CALL_OW 114
// wait ( 0 0$4 ) ;
25651: LD_INT 140
25653: PPUSH
25654: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25658: LD_INT 124
25660: PPUSH
25661: LD_INT 98
25663: PPUSH
25664: CALL_OW 84
// if SikorskyStatus = 1 then
25668: LD_EXP 21
25672: PUSH
25673: LD_INT 1
25675: EQUAL
25676: IFFALSE 25690
// Say ( Sikorski , D9-Sik-1 ) ;
25678: LD_EXP 16
25682: PPUSH
25683: LD_STRING D9-Sik-1
25685: PPUSH
25686: CALL_OW 88
// if SikorskyStatus = 2 then
25690: LD_EXP 21
25694: PUSH
25695: LD_INT 2
25697: EQUAL
25698: IFFALSE 25719
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25700: LD_EXP 23
25704: PPUSH
25705: LD_STRING D8b-Pow-1
25707: PPUSH
25708: CALL_OW 94
// YouLost ( Dismissed ) ;
25712: LD_STRING Dismissed
25714: PPUSH
25715: CALL_OW 104
// end ; p := 0 0$0 ;
25719: LD_ADDR_VAR 0 3
25723: PUSH
25724: LD_INT 0
25726: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25727: LD_ADDR_VAR 0 2
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: LD_INT 22
25737: PUSH
25738: LD_INT 3
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 22
25747: PUSH
25748: LD_INT 6
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 21
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PPUSH
25774: CALL_OW 69
25778: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25779: LD_INT 35
25781: PPUSH
25782: CALL_OW 67
// p := p + 0 0$1 ;
25786: LD_ADDR_VAR 0 3
25790: PUSH
25791: LD_VAR 0 3
25795: PUSH
25796: LD_INT 35
25798: PLUS
25799: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25800: LD_VAR 0 2
25804: PPUSH
25805: LD_INT 22
25807: PPUSH
25808: CALL_OW 113
// for i in tmp do
25812: LD_ADDR_VAR 0 1
25816: PUSH
25817: LD_VAR 0 2
25821: PUSH
25822: FOR_IN
25823: IFFALSE 25850
// if IsInArea ( i , RussianEscape ) then
25825: LD_VAR 0 1
25829: PPUSH
25830: LD_INT 22
25832: PPUSH
25833: CALL_OW 308
25837: IFFALSE 25848
// RemoveUnit ( i ) ;
25839: LD_VAR 0 1
25843: PPUSH
25844: CALL_OW 64
25848: GO 25822
25850: POP
25851: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25852: LD_INT 23
25854: PUSH
25855: LD_INT 3
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 21
25864: PUSH
25865: LD_INT 1
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 24
25874: PUSH
25875: LD_INT 250
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: PPUSH
25887: CALL_OW 69
25891: PUSH
25892: LD_INT 0
25894: EQUAL
25895: PUSH
25896: LD_VAR 0 3
25900: PUSH
25901: LD_INT 245
25903: GREATEREQUAL
25904: OR
25905: IFFALSE 25779
// FinishMission ;
25907: CALL 25914 0 0
// end ;
25911: PPOPN 3
25913: END
// export function FinishMission ; var tmp ; begin
25914: LD_INT 0
25916: PPUSH
25917: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25918: LD_INT 22
25920: PUSH
25921: LD_INT 4
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PPUSH
25928: CALL_OW 69
25932: PUSH
25933: LD_INT 0
25935: EQUAL
25936: IFFALSE 25945
// SetAchievement ( ACH_BLITZKRIEG ) ;
25938: LD_STRING ACH_BLITZKRIEG
25940: PPUSH
25941: CALL_OW 543
// if tick <= 25 25$00 then
25945: LD_OWVAR 1
25949: PUSH
25950: LD_INT 52500
25952: LESSEQUAL
25953: IFFALSE 25969
// begin wait ( 3 ) ;
25955: LD_INT 3
25957: PPUSH
25958: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
25962: LD_STRING ACH_ASPEED_8
25964: PPUSH
25965: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
25969: LD_STRING med1
25971: PPUSH
25972: LD_INT 1
25974: PPUSH
25975: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
25979: LD_STRING med2
25981: PPUSH
25982: LD_INT 1
25984: PPUSH
25985: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
25989: LD_STRING perfect
25991: PPUSH
25992: LD_INT 1
25994: PPUSH
25995: CALL_OW 101
// if Difficulty >= 3 then
25999: LD_OWVAR 67
26003: PUSH
26004: LD_INT 3
26006: GREATEREQUAL
26007: IFFALSE 26019
// SetAchievementEX ( ACH_AMER , 8 ) ;
26009: LD_STRING ACH_AMER
26011: PPUSH
26012: LD_INT 8
26014: PPUSH
26015: CALL_OW 564
// GiveMedals ( Main ) ;
26019: LD_STRING Main
26021: PPUSH
26022: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
26026: LD_INT 22
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 23
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 21
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: LD_INT 25
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 25
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 25
26081: PUSH
26082: LD_INT 3
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 25
26091: PUSH
26092: LD_INT 4
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: PPUSH
26112: CALL_OW 69
26116: PPUSH
26117: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26121: LD_EXP 1
26125: PPUSH
26126: LD_EXP 43
26130: PUSH
26131: LD_STRING JMM
26133: STR
26134: PPUSH
26135: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26139: LD_EXP 2
26143: PPUSH
26144: LD_EXP 43
26148: PUSH
26149: LD_STRING Brown
26151: STR
26152: PPUSH
26153: CALL 8488 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26157: LD_EXP 3
26161: PPUSH
26162: LD_EXP 43
26166: PUSH
26167: LD_STRING Donaldson
26169: STR
26170: PPUSH
26171: CALL 8488 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26175: LD_EXP 4
26179: PPUSH
26180: LD_EXP 43
26184: PUSH
26185: LD_STRING Bobby
26187: STR
26188: PPUSH
26189: CALL 8488 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26193: LD_EXP 5
26197: PPUSH
26198: LD_EXP 43
26202: PUSH
26203: LD_STRING Cyrus
26205: STR
26206: PPUSH
26207: CALL 8488 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26211: LD_EXP 6
26215: PPUSH
26216: LD_EXP 43
26220: PUSH
26221: LD_STRING Lisa
26223: STR
26224: PPUSH
26225: CALL 8488 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26229: LD_EXP 7
26233: PPUSH
26234: LD_EXP 43
26238: PUSH
26239: LD_STRING Frank
26241: STR
26242: PPUSH
26243: CALL 8488 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26247: LD_EXP 8
26251: PPUSH
26252: LD_EXP 43
26256: PUSH
26257: LD_STRING Gladstone
26259: STR
26260: PPUSH
26261: CALL 8488 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26265: LD_EXP 9
26269: PPUSH
26270: LD_EXP 43
26274: PUSH
26275: LD_STRING Kikuchi
26277: STR
26278: PPUSH
26279: CALL 8488 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26283: LD_EXP 14
26287: PPUSH
26288: LD_EXP 43
26292: PUSH
26293: LD_STRING Denis
26295: STR
26296: PPUSH
26297: CALL 8488 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26301: LD_EXP 15
26305: PPUSH
26306: LD_EXP 43
26310: PUSH
26311: LD_STRING Joan
26313: STR
26314: PPUSH
26315: CALL 8488 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26319: LD_EXP 10
26323: PPUSH
26324: LD_EXP 43
26328: PUSH
26329: LD_STRING Khatam
26331: STR
26332: PPUSH
26333: CALL 8488 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26337: LD_EXP 13
26341: PPUSH
26342: LD_EXP 43
26346: PUSH
26347: LD_STRING Houten
26349: STR
26350: PPUSH
26351: CALL 8488 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26355: LD_INT 50
26357: PUSH
26358: EMPTY
26359: LIST
26360: PUSH
26361: LD_INT 22
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 21
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 25
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 25
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 25
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 25
26416: PUSH
26417: LD_INT 4
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: PPUSH
26437: CALL_OW 69
26441: PUSH
26442: LD_EXP 1
26446: PUSH
26447: LD_EXP 2
26451: PUSH
26452: LD_EXP 3
26456: PUSH
26457: LD_EXP 4
26461: PUSH
26462: LD_EXP 5
26466: PUSH
26467: LD_EXP 6
26471: PUSH
26472: LD_EXP 7
26476: PUSH
26477: LD_EXP 8
26481: PUSH
26482: LD_EXP 9
26486: PUSH
26487: LD_EXP 14
26491: PUSH
26492: LD_EXP 15
26496: PUSH
26497: LD_EXP 13
26501: PUSH
26502: LD_EXP 10
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: DIFF
26522: PPUSH
26523: LD_STRING 08_other_survivors
26525: PPUSH
26526: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26530: LD_INT 23
26532: PPUSH
26533: CALL 26546 0 1
// YouWin ;
26537: CALL_OW 103
// end ;
26541: LD_VAR 0 1
26545: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26546: LD_INT 0
26548: PPUSH
26549: PPUSH
26550: PPUSH
26551: PPUSH
// gammaBase = [ ] ;
26552: LD_ADDR_VAR 0 4
26556: PUSH
26557: EMPTY
26558: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26559: LD_ADDR_VAR 0 5
26563: PUSH
26564: LD_VAR 0 1
26568: PPUSH
26569: LD_INT 22
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 21
26581: PUSH
26582: LD_INT 3
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 50
26591: PUSH
26592: EMPTY
26593: LIST
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: LIST
26599: PPUSH
26600: CALL_OW 70
26604: ST_TO_ADDR
// for i in buildings do
26605: LD_ADDR_VAR 0 3
26609: PUSH
26610: LD_VAR 0 5
26614: PUSH
26615: FOR_IN
26616: IFFALSE 27053
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26618: LD_VAR 0 3
26622: PPUSH
26623: CALL_OW 266
26627: PUSH
26628: LD_INT 6
26630: PUSH
26631: LD_INT 7
26633: PUSH
26634: LD_INT 8
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: IN
26642: IFFALSE 26756
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26644: LD_ADDR_VAR 0 4
26648: PUSH
26649: LD_VAR 0 4
26653: PUSH
26654: LD_VAR 0 3
26658: PPUSH
26659: CALL_OW 266
26663: PUSH
26664: LD_VAR 0 3
26668: PPUSH
26669: CALL_OW 250
26673: PUSH
26674: LD_VAR 0 3
26678: PPUSH
26679: CALL_OW 251
26683: PUSH
26684: LD_VAR 0 3
26688: PPUSH
26689: CALL_OW 254
26693: PUSH
26694: LD_VAR 0 3
26698: PPUSH
26699: CALL_OW 267
26703: PUSH
26704: LD_VAR 0 3
26708: PPUSH
26709: CALL_OW 248
26713: PUSH
26714: LD_VAR 0 3
26718: PPUSH
26719: LD_INT 1
26721: PPUSH
26722: CALL_OW 268
26726: PUSH
26727: LD_VAR 0 3
26731: PPUSH
26732: LD_INT 2
26734: PPUSH
26735: CALL_OW 268
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: ADD
26753: ST_TO_ADDR
26754: GO 27051
// if GetBType ( i ) = b_bunker then
26756: LD_VAR 0 3
26760: PPUSH
26761: CALL_OW 266
26765: PUSH
26766: LD_INT 32
26768: EQUAL
26769: IFFALSE 26866
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26771: LD_ADDR_VAR 0 4
26775: PUSH
26776: LD_VAR 0 4
26780: PUSH
26781: LD_VAR 0 3
26785: PPUSH
26786: CALL_OW 266
26790: PUSH
26791: LD_VAR 0 3
26795: PPUSH
26796: CALL_OW 250
26800: PUSH
26801: LD_VAR 0 3
26805: PPUSH
26806: CALL_OW 251
26810: PUSH
26811: LD_VAR 0 3
26815: PPUSH
26816: CALL_OW 254
26820: PUSH
26821: LD_VAR 0 3
26825: PPUSH
26826: CALL_OW 267
26830: PUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: CALL_OW 248
26840: PUSH
26841: LD_VAR 0 3
26845: PPUSH
26846: CALL_OW 269
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: PUSH
26860: EMPTY
26861: LIST
26862: ADD
26863: ST_TO_ADDR
26864: GO 27051
// if GetBType ( i ) = b_factory then
26866: LD_VAR 0 3
26870: PPUSH
26871: CALL_OW 266
26875: PUSH
26876: LD_INT 3
26878: EQUAL
26879: IFFALSE 26969
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26881: LD_ADDR_VAR 0 4
26885: PUSH
26886: LD_VAR 0 4
26890: PPUSH
26891: LD_INT 1
26893: PPUSH
26894: LD_VAR 0 3
26898: PPUSH
26899: CALL_OW 266
26903: PUSH
26904: LD_VAR 0 3
26908: PPUSH
26909: CALL_OW 250
26913: PUSH
26914: LD_VAR 0 3
26918: PPUSH
26919: CALL_OW 251
26923: PUSH
26924: LD_VAR 0 3
26928: PPUSH
26929: CALL_OW 254
26933: PUSH
26934: LD_VAR 0 3
26938: PPUSH
26939: CALL_OW 267
26943: PUSH
26944: LD_VAR 0 3
26948: PPUSH
26949: CALL_OW 248
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: PPUSH
26962: CALL_OW 2
26966: ST_TO_ADDR
26967: GO 27051
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26969: LD_ADDR_VAR 0 4
26973: PUSH
26974: LD_VAR 0 4
26978: PUSH
26979: LD_VAR 0 3
26983: PPUSH
26984: CALL_OW 266
26988: PUSH
26989: LD_VAR 0 3
26993: PPUSH
26994: CALL_OW 250
26998: PUSH
26999: LD_VAR 0 3
27003: PPUSH
27004: CALL_OW 251
27008: PUSH
27009: LD_VAR 0 3
27013: PPUSH
27014: CALL_OW 254
27018: PUSH
27019: LD_VAR 0 3
27023: PPUSH
27024: CALL_OW 267
27028: PUSH
27029: LD_VAR 0 3
27033: PPUSH
27034: CALL_OW 248
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: PUSH
27047: EMPTY
27048: LIST
27049: ADD
27050: ST_TO_ADDR
// end ;
27051: GO 26615
27053: POP
27054: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
27055: LD_VAR 0 4
27059: PPUSH
27060: LD_STRING 08_GammaBase
27062: PPUSH
27063: CALL_OW 39
// end ; end_of_file
27067: LD_VAR 0 2
27071: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27072: LD_INT 0
27074: PPUSH
// ar_miner := 81 ;
27075: LD_ADDR_EXP 55
27079: PUSH
27080: LD_INT 81
27082: ST_TO_ADDR
// ar_crane := 88 ;
27083: LD_ADDR_EXP 54
27087: PUSH
27088: LD_INT 88
27090: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27091: LD_ADDR_EXP 49
27095: PUSH
27096: LD_INT 89
27098: ST_TO_ADDR
// us_hack := 99 ;
27099: LD_ADDR_EXP 50
27103: PUSH
27104: LD_INT 99
27106: ST_TO_ADDR
// us_artillery := 97 ;
27107: LD_ADDR_EXP 51
27111: PUSH
27112: LD_INT 97
27114: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27115: LD_ADDR_EXP 52
27119: PUSH
27120: LD_INT 91
27122: ST_TO_ADDR
// ar_mortar := 92 ;
27123: LD_ADDR_EXP 53
27127: PUSH
27128: LD_INT 92
27130: ST_TO_ADDR
// ru_radar := 98 ;
27131: LD_ADDR_EXP 48
27135: PUSH
27136: LD_INT 98
27138: ST_TO_ADDR
// tech_Artillery := 80 ;
27139: LD_ADDR_EXP 56
27143: PUSH
27144: LD_INT 80
27146: ST_TO_ADDR
// tech_RadMat := 81 ;
27147: LD_ADDR_EXP 57
27151: PUSH
27152: LD_INT 81
27154: ST_TO_ADDR
// tech_BasicTools := 82 ;
27155: LD_ADDR_EXP 58
27159: PUSH
27160: LD_INT 82
27162: ST_TO_ADDR
// tech_Cargo := 83 ;
27163: LD_ADDR_EXP 59
27167: PUSH
27168: LD_INT 83
27170: ST_TO_ADDR
// tech_Track := 84 ;
27171: LD_ADDR_EXP 60
27175: PUSH
27176: LD_INT 84
27178: ST_TO_ADDR
// tech_Crane := 85 ;
27179: LD_ADDR_EXP 61
27183: PUSH
27184: LD_INT 85
27186: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27187: LD_ADDR_EXP 62
27191: PUSH
27192: LD_INT 86
27194: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27195: LD_ADDR_EXP 63
27199: PUSH
27200: LD_INT 87
27202: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27203: LD_ADDR_EXP 64
27207: PUSH
27208: LD_INT 88
27210: ST_TO_ADDR
// class_mastodont := 31 ;
27211: LD_ADDR_EXP 65
27215: PUSH
27216: LD_INT 31
27218: ST_TO_ADDR
// class_horse := 21 ;
27219: LD_ADDR_EXP 66
27223: PUSH
27224: LD_INT 21
27226: ST_TO_ADDR
// end ;
27227: LD_VAR 0 1
27231: RET
// every 1 do
27232: GO 27234
27234: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
27235: CALL 27072 0 0
27239: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27240: LD_INT 0
27242: PPUSH
// if p2 = 100 then
27243: LD_VAR 0 2
27247: PUSH
27248: LD_INT 100
27250: EQUAL
27251: IFFALSE 28254
// begin if not StreamModeActive then
27253: LD_EXP 67
27257: NOT
27258: IFFALSE 27268
// StreamModeActive := true ;
27260: LD_ADDR_EXP 67
27264: PUSH
27265: LD_INT 1
27267: ST_TO_ADDR
// if p3 = 0 then
27268: LD_VAR 0 3
27272: PUSH
27273: LD_INT 0
27275: EQUAL
27276: IFFALSE 27282
// InitStreamMode ;
27278: CALL 28414 0 0
// if p3 = 1 then
27282: LD_VAR 0 3
27286: PUSH
27287: LD_INT 1
27289: EQUAL
27290: IFFALSE 27300
// sRocket := true ;
27292: LD_ADDR_EXP 72
27296: PUSH
27297: LD_INT 1
27299: ST_TO_ADDR
// if p3 = 2 then
27300: LD_VAR 0 3
27304: PUSH
27305: LD_INT 2
27307: EQUAL
27308: IFFALSE 27318
// sSpeed := true ;
27310: LD_ADDR_EXP 71
27314: PUSH
27315: LD_INT 1
27317: ST_TO_ADDR
// if p3 = 3 then
27318: LD_VAR 0 3
27322: PUSH
27323: LD_INT 3
27325: EQUAL
27326: IFFALSE 27336
// sEngine := true ;
27328: LD_ADDR_EXP 73
27332: PUSH
27333: LD_INT 1
27335: ST_TO_ADDR
// if p3 = 4 then
27336: LD_VAR 0 3
27340: PUSH
27341: LD_INT 4
27343: EQUAL
27344: IFFALSE 27354
// sSpec := true ;
27346: LD_ADDR_EXP 70
27350: PUSH
27351: LD_INT 1
27353: ST_TO_ADDR
// if p3 = 5 then
27354: LD_VAR 0 3
27358: PUSH
27359: LD_INT 5
27361: EQUAL
27362: IFFALSE 27372
// sLevel := true ;
27364: LD_ADDR_EXP 74
27368: PUSH
27369: LD_INT 1
27371: ST_TO_ADDR
// if p3 = 6 then
27372: LD_VAR 0 3
27376: PUSH
27377: LD_INT 6
27379: EQUAL
27380: IFFALSE 27390
// sArmoury := true ;
27382: LD_ADDR_EXP 75
27386: PUSH
27387: LD_INT 1
27389: ST_TO_ADDR
// if p3 = 7 then
27390: LD_VAR 0 3
27394: PUSH
27395: LD_INT 7
27397: EQUAL
27398: IFFALSE 27408
// sRadar := true ;
27400: LD_ADDR_EXP 76
27404: PUSH
27405: LD_INT 1
27407: ST_TO_ADDR
// if p3 = 8 then
27408: LD_VAR 0 3
27412: PUSH
27413: LD_INT 8
27415: EQUAL
27416: IFFALSE 27426
// sBunker := true ;
27418: LD_ADDR_EXP 77
27422: PUSH
27423: LD_INT 1
27425: ST_TO_ADDR
// if p3 = 9 then
27426: LD_VAR 0 3
27430: PUSH
27431: LD_INT 9
27433: EQUAL
27434: IFFALSE 27444
// sHack := true ;
27436: LD_ADDR_EXP 78
27440: PUSH
27441: LD_INT 1
27443: ST_TO_ADDR
// if p3 = 10 then
27444: LD_VAR 0 3
27448: PUSH
27449: LD_INT 10
27451: EQUAL
27452: IFFALSE 27462
// sFire := true ;
27454: LD_ADDR_EXP 79
27458: PUSH
27459: LD_INT 1
27461: ST_TO_ADDR
// if p3 = 11 then
27462: LD_VAR 0 3
27466: PUSH
27467: LD_INT 11
27469: EQUAL
27470: IFFALSE 27480
// sRefresh := true ;
27472: LD_ADDR_EXP 80
27476: PUSH
27477: LD_INT 1
27479: ST_TO_ADDR
// if p3 = 12 then
27480: LD_VAR 0 3
27484: PUSH
27485: LD_INT 12
27487: EQUAL
27488: IFFALSE 27498
// sExp := true ;
27490: LD_ADDR_EXP 81
27494: PUSH
27495: LD_INT 1
27497: ST_TO_ADDR
// if p3 = 13 then
27498: LD_VAR 0 3
27502: PUSH
27503: LD_INT 13
27505: EQUAL
27506: IFFALSE 27516
// sDepot := true ;
27508: LD_ADDR_EXP 82
27512: PUSH
27513: LD_INT 1
27515: ST_TO_ADDR
// if p3 = 14 then
27516: LD_VAR 0 3
27520: PUSH
27521: LD_INT 14
27523: EQUAL
27524: IFFALSE 27534
// sFlag := true ;
27526: LD_ADDR_EXP 83
27530: PUSH
27531: LD_INT 1
27533: ST_TO_ADDR
// if p3 = 15 then
27534: LD_VAR 0 3
27538: PUSH
27539: LD_INT 15
27541: EQUAL
27542: IFFALSE 27552
// sKamikadze := true ;
27544: LD_ADDR_EXP 91
27548: PUSH
27549: LD_INT 1
27551: ST_TO_ADDR
// if p3 = 16 then
27552: LD_VAR 0 3
27556: PUSH
27557: LD_INT 16
27559: EQUAL
27560: IFFALSE 27570
// sTroll := true ;
27562: LD_ADDR_EXP 92
27566: PUSH
27567: LD_INT 1
27569: ST_TO_ADDR
// if p3 = 17 then
27570: LD_VAR 0 3
27574: PUSH
27575: LD_INT 17
27577: EQUAL
27578: IFFALSE 27588
// sSlow := true ;
27580: LD_ADDR_EXP 93
27584: PUSH
27585: LD_INT 1
27587: ST_TO_ADDR
// if p3 = 18 then
27588: LD_VAR 0 3
27592: PUSH
27593: LD_INT 18
27595: EQUAL
27596: IFFALSE 27606
// sLack := true ;
27598: LD_ADDR_EXP 94
27602: PUSH
27603: LD_INT 1
27605: ST_TO_ADDR
// if p3 = 19 then
27606: LD_VAR 0 3
27610: PUSH
27611: LD_INT 19
27613: EQUAL
27614: IFFALSE 27624
// sTank := true ;
27616: LD_ADDR_EXP 96
27620: PUSH
27621: LD_INT 1
27623: ST_TO_ADDR
// if p3 = 20 then
27624: LD_VAR 0 3
27628: PUSH
27629: LD_INT 20
27631: EQUAL
27632: IFFALSE 27642
// sRemote := true ;
27634: LD_ADDR_EXP 97
27638: PUSH
27639: LD_INT 1
27641: ST_TO_ADDR
// if p3 = 21 then
27642: LD_VAR 0 3
27646: PUSH
27647: LD_INT 21
27649: EQUAL
27650: IFFALSE 27660
// sPowell := true ;
27652: LD_ADDR_EXP 98
27656: PUSH
27657: LD_INT 1
27659: ST_TO_ADDR
// if p3 = 22 then
27660: LD_VAR 0 3
27664: PUSH
27665: LD_INT 22
27667: EQUAL
27668: IFFALSE 27678
// sTeleport := true ;
27670: LD_ADDR_EXP 101
27674: PUSH
27675: LD_INT 1
27677: ST_TO_ADDR
// if p3 = 23 then
27678: LD_VAR 0 3
27682: PUSH
27683: LD_INT 23
27685: EQUAL
27686: IFFALSE 27696
// sOilTower := true ;
27688: LD_ADDR_EXP 103
27692: PUSH
27693: LD_INT 1
27695: ST_TO_ADDR
// if p3 = 24 then
27696: LD_VAR 0 3
27700: PUSH
27701: LD_INT 24
27703: EQUAL
27704: IFFALSE 27714
// sShovel := true ;
27706: LD_ADDR_EXP 104
27710: PUSH
27711: LD_INT 1
27713: ST_TO_ADDR
// if p3 = 25 then
27714: LD_VAR 0 3
27718: PUSH
27719: LD_INT 25
27721: EQUAL
27722: IFFALSE 27732
// sSheik := true ;
27724: LD_ADDR_EXP 105
27728: PUSH
27729: LD_INT 1
27731: ST_TO_ADDR
// if p3 = 26 then
27732: LD_VAR 0 3
27736: PUSH
27737: LD_INT 26
27739: EQUAL
27740: IFFALSE 27750
// sEarthquake := true ;
27742: LD_ADDR_EXP 107
27746: PUSH
27747: LD_INT 1
27749: ST_TO_ADDR
// if p3 = 27 then
27750: LD_VAR 0 3
27754: PUSH
27755: LD_INT 27
27757: EQUAL
27758: IFFALSE 27768
// sAI := true ;
27760: LD_ADDR_EXP 108
27764: PUSH
27765: LD_INT 1
27767: ST_TO_ADDR
// if p3 = 28 then
27768: LD_VAR 0 3
27772: PUSH
27773: LD_INT 28
27775: EQUAL
27776: IFFALSE 27786
// sCargo := true ;
27778: LD_ADDR_EXP 111
27782: PUSH
27783: LD_INT 1
27785: ST_TO_ADDR
// if p3 = 29 then
27786: LD_VAR 0 3
27790: PUSH
27791: LD_INT 29
27793: EQUAL
27794: IFFALSE 27804
// sDLaser := true ;
27796: LD_ADDR_EXP 112
27800: PUSH
27801: LD_INT 1
27803: ST_TO_ADDR
// if p3 = 30 then
27804: LD_VAR 0 3
27808: PUSH
27809: LD_INT 30
27811: EQUAL
27812: IFFALSE 27822
// sExchange := true ;
27814: LD_ADDR_EXP 113
27818: PUSH
27819: LD_INT 1
27821: ST_TO_ADDR
// if p3 = 31 then
27822: LD_VAR 0 3
27826: PUSH
27827: LD_INT 31
27829: EQUAL
27830: IFFALSE 27840
// sFac := true ;
27832: LD_ADDR_EXP 114
27836: PUSH
27837: LD_INT 1
27839: ST_TO_ADDR
// if p3 = 32 then
27840: LD_VAR 0 3
27844: PUSH
27845: LD_INT 32
27847: EQUAL
27848: IFFALSE 27858
// sPower := true ;
27850: LD_ADDR_EXP 115
27854: PUSH
27855: LD_INT 1
27857: ST_TO_ADDR
// if p3 = 33 then
27858: LD_VAR 0 3
27862: PUSH
27863: LD_INT 33
27865: EQUAL
27866: IFFALSE 27876
// sRandom := true ;
27868: LD_ADDR_EXP 116
27872: PUSH
27873: LD_INT 1
27875: ST_TO_ADDR
// if p3 = 34 then
27876: LD_VAR 0 3
27880: PUSH
27881: LD_INT 34
27883: EQUAL
27884: IFFALSE 27894
// sShield := true ;
27886: LD_ADDR_EXP 117
27890: PUSH
27891: LD_INT 1
27893: ST_TO_ADDR
// if p3 = 35 then
27894: LD_VAR 0 3
27898: PUSH
27899: LD_INT 35
27901: EQUAL
27902: IFFALSE 27912
// sTime := true ;
27904: LD_ADDR_EXP 118
27908: PUSH
27909: LD_INT 1
27911: ST_TO_ADDR
// if p3 = 36 then
27912: LD_VAR 0 3
27916: PUSH
27917: LD_INT 36
27919: EQUAL
27920: IFFALSE 27930
// sTools := true ;
27922: LD_ADDR_EXP 119
27926: PUSH
27927: LD_INT 1
27929: ST_TO_ADDR
// if p3 = 101 then
27930: LD_VAR 0 3
27934: PUSH
27935: LD_INT 101
27937: EQUAL
27938: IFFALSE 27948
// sSold := true ;
27940: LD_ADDR_EXP 84
27944: PUSH
27945: LD_INT 1
27947: ST_TO_ADDR
// if p3 = 102 then
27948: LD_VAR 0 3
27952: PUSH
27953: LD_INT 102
27955: EQUAL
27956: IFFALSE 27966
// sDiff := true ;
27958: LD_ADDR_EXP 85
27962: PUSH
27963: LD_INT 1
27965: ST_TO_ADDR
// if p3 = 103 then
27966: LD_VAR 0 3
27970: PUSH
27971: LD_INT 103
27973: EQUAL
27974: IFFALSE 27984
// sFog := true ;
27976: LD_ADDR_EXP 88
27980: PUSH
27981: LD_INT 1
27983: ST_TO_ADDR
// if p3 = 104 then
27984: LD_VAR 0 3
27988: PUSH
27989: LD_INT 104
27991: EQUAL
27992: IFFALSE 28002
// sReset := true ;
27994: LD_ADDR_EXP 89
27998: PUSH
27999: LD_INT 1
28001: ST_TO_ADDR
// if p3 = 105 then
28002: LD_VAR 0 3
28006: PUSH
28007: LD_INT 105
28009: EQUAL
28010: IFFALSE 28020
// sSun := true ;
28012: LD_ADDR_EXP 90
28016: PUSH
28017: LD_INT 1
28019: ST_TO_ADDR
// if p3 = 106 then
28020: LD_VAR 0 3
28024: PUSH
28025: LD_INT 106
28027: EQUAL
28028: IFFALSE 28038
// sTiger := true ;
28030: LD_ADDR_EXP 86
28034: PUSH
28035: LD_INT 1
28037: ST_TO_ADDR
// if p3 = 107 then
28038: LD_VAR 0 3
28042: PUSH
28043: LD_INT 107
28045: EQUAL
28046: IFFALSE 28056
// sBomb := true ;
28048: LD_ADDR_EXP 87
28052: PUSH
28053: LD_INT 1
28055: ST_TO_ADDR
// if p3 = 108 then
28056: LD_VAR 0 3
28060: PUSH
28061: LD_INT 108
28063: EQUAL
28064: IFFALSE 28074
// sWound := true ;
28066: LD_ADDR_EXP 95
28070: PUSH
28071: LD_INT 1
28073: ST_TO_ADDR
// if p3 = 109 then
28074: LD_VAR 0 3
28078: PUSH
28079: LD_INT 109
28081: EQUAL
28082: IFFALSE 28092
// sBetray := true ;
28084: LD_ADDR_EXP 99
28088: PUSH
28089: LD_INT 1
28091: ST_TO_ADDR
// if p3 = 110 then
28092: LD_VAR 0 3
28096: PUSH
28097: LD_INT 110
28099: EQUAL
28100: IFFALSE 28110
// sContamin := true ;
28102: LD_ADDR_EXP 100
28106: PUSH
28107: LD_INT 1
28109: ST_TO_ADDR
// if p3 = 111 then
28110: LD_VAR 0 3
28114: PUSH
28115: LD_INT 111
28117: EQUAL
28118: IFFALSE 28128
// sOil := true ;
28120: LD_ADDR_EXP 102
28124: PUSH
28125: LD_INT 1
28127: ST_TO_ADDR
// if p3 = 112 then
28128: LD_VAR 0 3
28132: PUSH
28133: LD_INT 112
28135: EQUAL
28136: IFFALSE 28146
// sStu := true ;
28138: LD_ADDR_EXP 106
28142: PUSH
28143: LD_INT 1
28145: ST_TO_ADDR
// if p3 = 113 then
28146: LD_VAR 0 3
28150: PUSH
28151: LD_INT 113
28153: EQUAL
28154: IFFALSE 28164
// sBazooka := true ;
28156: LD_ADDR_EXP 109
28160: PUSH
28161: LD_INT 1
28163: ST_TO_ADDR
// if p3 = 114 then
28164: LD_VAR 0 3
28168: PUSH
28169: LD_INT 114
28171: EQUAL
28172: IFFALSE 28182
// sMortar := true ;
28174: LD_ADDR_EXP 110
28178: PUSH
28179: LD_INT 1
28181: ST_TO_ADDR
// if p3 = 115 then
28182: LD_VAR 0 3
28186: PUSH
28187: LD_INT 115
28189: EQUAL
28190: IFFALSE 28200
// sRanger := true ;
28192: LD_ADDR_EXP 120
28196: PUSH
28197: LD_INT 1
28199: ST_TO_ADDR
// if p3 = 116 then
28200: LD_VAR 0 3
28204: PUSH
28205: LD_INT 116
28207: EQUAL
28208: IFFALSE 28218
// sComputer := true ;
28210: LD_ADDR_EXP 121
28214: PUSH
28215: LD_INT 1
28217: ST_TO_ADDR
// if p3 = 117 then
28218: LD_VAR 0 3
28222: PUSH
28223: LD_INT 117
28225: EQUAL
28226: IFFALSE 28236
// s30 := true ;
28228: LD_ADDR_EXP 122
28232: PUSH
28233: LD_INT 1
28235: ST_TO_ADDR
// if p3 = 118 then
28236: LD_VAR 0 3
28240: PUSH
28241: LD_INT 118
28243: EQUAL
28244: IFFALSE 28254
// s60 := true ;
28246: LD_ADDR_EXP 123
28250: PUSH
28251: LD_INT 1
28253: ST_TO_ADDR
// end ; if p2 = 101 then
28254: LD_VAR 0 2
28258: PUSH
28259: LD_INT 101
28261: EQUAL
28262: IFFALSE 28390
// begin case p3 of 1 :
28264: LD_VAR 0 3
28268: PUSH
28269: LD_INT 1
28271: DOUBLE
28272: EQUAL
28273: IFTRUE 28277
28275: GO 28284
28277: POP
// hHackUnlimitedResources ; 2 :
28278: CALL 39986 0 0
28282: GO 28390
28284: LD_INT 2
28286: DOUBLE
28287: EQUAL
28288: IFTRUE 28292
28290: GO 28299
28292: POP
// hHackSetLevel10 ; 3 :
28293: CALL 40119 0 0
28297: GO 28390
28299: LD_INT 3
28301: DOUBLE
28302: EQUAL
28303: IFTRUE 28307
28305: GO 28314
28307: POP
// hHackSetLevel10YourUnits ; 4 :
28308: CALL 40204 0 0
28312: GO 28390
28314: LD_INT 4
28316: DOUBLE
28317: EQUAL
28318: IFTRUE 28322
28320: GO 28329
28322: POP
// hHackInvincible ; 5 :
28323: CALL 40652 0 0
28327: GO 28390
28329: LD_INT 5
28331: DOUBLE
28332: EQUAL
28333: IFTRUE 28337
28335: GO 28344
28337: POP
// hHackInvisible ; 6 :
28338: CALL 40763 0 0
28342: GO 28390
28344: LD_INT 6
28346: DOUBLE
28347: EQUAL
28348: IFTRUE 28352
28350: GO 28359
28352: POP
// hHackChangeYourSide ; 7 :
28353: CALL 40820 0 0
28357: GO 28390
28359: LD_INT 7
28361: DOUBLE
28362: EQUAL
28363: IFTRUE 28367
28365: GO 28374
28367: POP
// hHackChangeUnitSide ; 8 :
28368: CALL 40862 0 0
28372: GO 28390
28374: LD_INT 8
28376: DOUBLE
28377: EQUAL
28378: IFTRUE 28382
28380: GO 28389
28382: POP
// hHackFog ; end ;
28383: CALL 40963 0 0
28387: GO 28390
28389: POP
// end ; end ;
28390: LD_VAR 0 7
28394: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
28395: GO 28397
28397: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28398: LD_STRING initStreamRollete();
28400: PPUSH
28401: CALL_OW 559
// InitStreamMode ;
28405: CALL 28414 0 0
// DefineStreamItems ( ) ;
28409: CALL 28878 0 0
// end ;
28413: END
// function InitStreamMode ; begin
28414: LD_INT 0
28416: PPUSH
// streamModeActive := false ;
28417: LD_ADDR_EXP 67
28421: PUSH
28422: LD_INT 0
28424: ST_TO_ADDR
// normalCounter := 36 ;
28425: LD_ADDR_EXP 68
28429: PUSH
28430: LD_INT 36
28432: ST_TO_ADDR
// hardcoreCounter := 16 ;
28433: LD_ADDR_EXP 69
28437: PUSH
28438: LD_INT 16
28440: ST_TO_ADDR
// sRocket := false ;
28441: LD_ADDR_EXP 72
28445: PUSH
28446: LD_INT 0
28448: ST_TO_ADDR
// sSpeed := false ;
28449: LD_ADDR_EXP 71
28453: PUSH
28454: LD_INT 0
28456: ST_TO_ADDR
// sEngine := false ;
28457: LD_ADDR_EXP 73
28461: PUSH
28462: LD_INT 0
28464: ST_TO_ADDR
// sSpec := false ;
28465: LD_ADDR_EXP 70
28469: PUSH
28470: LD_INT 0
28472: ST_TO_ADDR
// sLevel := false ;
28473: LD_ADDR_EXP 74
28477: PUSH
28478: LD_INT 0
28480: ST_TO_ADDR
// sArmoury := false ;
28481: LD_ADDR_EXP 75
28485: PUSH
28486: LD_INT 0
28488: ST_TO_ADDR
// sRadar := false ;
28489: LD_ADDR_EXP 76
28493: PUSH
28494: LD_INT 0
28496: ST_TO_ADDR
// sBunker := false ;
28497: LD_ADDR_EXP 77
28501: PUSH
28502: LD_INT 0
28504: ST_TO_ADDR
// sHack := false ;
28505: LD_ADDR_EXP 78
28509: PUSH
28510: LD_INT 0
28512: ST_TO_ADDR
// sFire := false ;
28513: LD_ADDR_EXP 79
28517: PUSH
28518: LD_INT 0
28520: ST_TO_ADDR
// sRefresh := false ;
28521: LD_ADDR_EXP 80
28525: PUSH
28526: LD_INT 0
28528: ST_TO_ADDR
// sExp := false ;
28529: LD_ADDR_EXP 81
28533: PUSH
28534: LD_INT 0
28536: ST_TO_ADDR
// sDepot := false ;
28537: LD_ADDR_EXP 82
28541: PUSH
28542: LD_INT 0
28544: ST_TO_ADDR
// sFlag := false ;
28545: LD_ADDR_EXP 83
28549: PUSH
28550: LD_INT 0
28552: ST_TO_ADDR
// sKamikadze := false ;
28553: LD_ADDR_EXP 91
28557: PUSH
28558: LD_INT 0
28560: ST_TO_ADDR
// sTroll := false ;
28561: LD_ADDR_EXP 92
28565: PUSH
28566: LD_INT 0
28568: ST_TO_ADDR
// sSlow := false ;
28569: LD_ADDR_EXP 93
28573: PUSH
28574: LD_INT 0
28576: ST_TO_ADDR
// sLack := false ;
28577: LD_ADDR_EXP 94
28581: PUSH
28582: LD_INT 0
28584: ST_TO_ADDR
// sTank := false ;
28585: LD_ADDR_EXP 96
28589: PUSH
28590: LD_INT 0
28592: ST_TO_ADDR
// sRemote := false ;
28593: LD_ADDR_EXP 97
28597: PUSH
28598: LD_INT 0
28600: ST_TO_ADDR
// sPowell := false ;
28601: LD_ADDR_EXP 98
28605: PUSH
28606: LD_INT 0
28608: ST_TO_ADDR
// sTeleport := false ;
28609: LD_ADDR_EXP 101
28613: PUSH
28614: LD_INT 0
28616: ST_TO_ADDR
// sOilTower := false ;
28617: LD_ADDR_EXP 103
28621: PUSH
28622: LD_INT 0
28624: ST_TO_ADDR
// sShovel := false ;
28625: LD_ADDR_EXP 104
28629: PUSH
28630: LD_INT 0
28632: ST_TO_ADDR
// sSheik := false ;
28633: LD_ADDR_EXP 105
28637: PUSH
28638: LD_INT 0
28640: ST_TO_ADDR
// sEarthquake := false ;
28641: LD_ADDR_EXP 107
28645: PUSH
28646: LD_INT 0
28648: ST_TO_ADDR
// sAI := false ;
28649: LD_ADDR_EXP 108
28653: PUSH
28654: LD_INT 0
28656: ST_TO_ADDR
// sCargo := false ;
28657: LD_ADDR_EXP 111
28661: PUSH
28662: LD_INT 0
28664: ST_TO_ADDR
// sDLaser := false ;
28665: LD_ADDR_EXP 112
28669: PUSH
28670: LD_INT 0
28672: ST_TO_ADDR
// sExchange := false ;
28673: LD_ADDR_EXP 113
28677: PUSH
28678: LD_INT 0
28680: ST_TO_ADDR
// sFac := false ;
28681: LD_ADDR_EXP 114
28685: PUSH
28686: LD_INT 0
28688: ST_TO_ADDR
// sPower := false ;
28689: LD_ADDR_EXP 115
28693: PUSH
28694: LD_INT 0
28696: ST_TO_ADDR
// sRandom := false ;
28697: LD_ADDR_EXP 116
28701: PUSH
28702: LD_INT 0
28704: ST_TO_ADDR
// sShield := false ;
28705: LD_ADDR_EXP 117
28709: PUSH
28710: LD_INT 0
28712: ST_TO_ADDR
// sTime := false ;
28713: LD_ADDR_EXP 118
28717: PUSH
28718: LD_INT 0
28720: ST_TO_ADDR
// sTools := false ;
28721: LD_ADDR_EXP 119
28725: PUSH
28726: LD_INT 0
28728: ST_TO_ADDR
// sSold := false ;
28729: LD_ADDR_EXP 84
28733: PUSH
28734: LD_INT 0
28736: ST_TO_ADDR
// sDiff := false ;
28737: LD_ADDR_EXP 85
28741: PUSH
28742: LD_INT 0
28744: ST_TO_ADDR
// sFog := false ;
28745: LD_ADDR_EXP 88
28749: PUSH
28750: LD_INT 0
28752: ST_TO_ADDR
// sReset := false ;
28753: LD_ADDR_EXP 89
28757: PUSH
28758: LD_INT 0
28760: ST_TO_ADDR
// sSun := false ;
28761: LD_ADDR_EXP 90
28765: PUSH
28766: LD_INT 0
28768: ST_TO_ADDR
// sTiger := false ;
28769: LD_ADDR_EXP 86
28773: PUSH
28774: LD_INT 0
28776: ST_TO_ADDR
// sBomb := false ;
28777: LD_ADDR_EXP 87
28781: PUSH
28782: LD_INT 0
28784: ST_TO_ADDR
// sWound := false ;
28785: LD_ADDR_EXP 95
28789: PUSH
28790: LD_INT 0
28792: ST_TO_ADDR
// sBetray := false ;
28793: LD_ADDR_EXP 99
28797: PUSH
28798: LD_INT 0
28800: ST_TO_ADDR
// sContamin := false ;
28801: LD_ADDR_EXP 100
28805: PUSH
28806: LD_INT 0
28808: ST_TO_ADDR
// sOil := false ;
28809: LD_ADDR_EXP 102
28813: PUSH
28814: LD_INT 0
28816: ST_TO_ADDR
// sStu := false ;
28817: LD_ADDR_EXP 106
28821: PUSH
28822: LD_INT 0
28824: ST_TO_ADDR
// sBazooka := false ;
28825: LD_ADDR_EXP 109
28829: PUSH
28830: LD_INT 0
28832: ST_TO_ADDR
// sMortar := false ;
28833: LD_ADDR_EXP 110
28837: PUSH
28838: LD_INT 0
28840: ST_TO_ADDR
// sRanger := false ;
28841: LD_ADDR_EXP 120
28845: PUSH
28846: LD_INT 0
28848: ST_TO_ADDR
// sComputer := false ;
28849: LD_ADDR_EXP 121
28853: PUSH
28854: LD_INT 0
28856: ST_TO_ADDR
// s30 := false ;
28857: LD_ADDR_EXP 122
28861: PUSH
28862: LD_INT 0
28864: ST_TO_ADDR
// s60 := false ;
28865: LD_ADDR_EXP 123
28869: PUSH
28870: LD_INT 0
28872: ST_TO_ADDR
// end ;
28873: LD_VAR 0 1
28877: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
28878: LD_INT 0
28880: PPUSH
28881: PPUSH
28882: PPUSH
28883: PPUSH
28884: PPUSH
// result := [ ] ;
28885: LD_ADDR_VAR 0 1
28889: PUSH
28890: EMPTY
28891: ST_TO_ADDR
// if campaign_id = 1 then
28892: LD_OWVAR 69
28896: PUSH
28897: LD_INT 1
28899: EQUAL
28900: IFFALSE 32066
// begin case mission_number of 1 :
28902: LD_OWVAR 70
28906: PUSH
28907: LD_INT 1
28909: DOUBLE
28910: EQUAL
28911: IFTRUE 28915
28913: GO 28991
28915: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
28916: LD_ADDR_VAR 0 1
28920: PUSH
28921: LD_INT 2
28923: PUSH
28924: LD_INT 4
28926: PUSH
28927: LD_INT 11
28929: PUSH
28930: LD_INT 12
28932: PUSH
28933: LD_INT 15
28935: PUSH
28936: LD_INT 16
28938: PUSH
28939: LD_INT 22
28941: PUSH
28942: LD_INT 23
28944: PUSH
28945: LD_INT 26
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 101
28961: PUSH
28962: LD_INT 102
28964: PUSH
28965: LD_INT 106
28967: PUSH
28968: LD_INT 116
28970: PUSH
28971: LD_INT 117
28973: PUSH
28974: LD_INT 118
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: ST_TO_ADDR
28989: GO 32064
28991: LD_INT 2
28993: DOUBLE
28994: EQUAL
28995: IFTRUE 28999
28997: GO 29083
28999: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
29000: LD_ADDR_VAR 0 1
29004: PUSH
29005: LD_INT 2
29007: PUSH
29008: LD_INT 4
29010: PUSH
29011: LD_INT 11
29013: PUSH
29014: LD_INT 12
29016: PUSH
29017: LD_INT 15
29019: PUSH
29020: LD_INT 16
29022: PUSH
29023: LD_INT 22
29025: PUSH
29026: LD_INT 23
29028: PUSH
29029: LD_INT 26
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 101
29045: PUSH
29046: LD_INT 102
29048: PUSH
29049: LD_INT 105
29051: PUSH
29052: LD_INT 106
29054: PUSH
29055: LD_INT 108
29057: PUSH
29058: LD_INT 116
29060: PUSH
29061: LD_INT 117
29063: PUSH
29064: LD_INT 118
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: ST_TO_ADDR
29081: GO 32064
29083: LD_INT 3
29085: DOUBLE
29086: EQUAL
29087: IFTRUE 29091
29089: GO 29179
29091: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
29092: LD_ADDR_VAR 0 1
29096: PUSH
29097: LD_INT 2
29099: PUSH
29100: LD_INT 4
29102: PUSH
29103: LD_INT 5
29105: PUSH
29106: LD_INT 11
29108: PUSH
29109: LD_INT 12
29111: PUSH
29112: LD_INT 15
29114: PUSH
29115: LD_INT 16
29117: PUSH
29118: LD_INT 22
29120: PUSH
29121: LD_INT 26
29123: PUSH
29124: LD_INT 36
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 101
29141: PUSH
29142: LD_INT 102
29144: PUSH
29145: LD_INT 105
29147: PUSH
29148: LD_INT 106
29150: PUSH
29151: LD_INT 108
29153: PUSH
29154: LD_INT 116
29156: PUSH
29157: LD_INT 117
29159: PUSH
29160: LD_INT 118
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: ST_TO_ADDR
29177: GO 32064
29179: LD_INT 4
29181: DOUBLE
29182: EQUAL
29183: IFTRUE 29187
29185: GO 29283
29187: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
29188: LD_ADDR_VAR 0 1
29192: PUSH
29193: LD_INT 2
29195: PUSH
29196: LD_INT 4
29198: PUSH
29199: LD_INT 5
29201: PUSH
29202: LD_INT 8
29204: PUSH
29205: LD_INT 11
29207: PUSH
29208: LD_INT 12
29210: PUSH
29211: LD_INT 15
29213: PUSH
29214: LD_INT 16
29216: PUSH
29217: LD_INT 22
29219: PUSH
29220: LD_INT 23
29222: PUSH
29223: LD_INT 26
29225: PUSH
29226: LD_INT 36
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 101
29245: PUSH
29246: LD_INT 102
29248: PUSH
29249: LD_INT 105
29251: PUSH
29252: LD_INT 106
29254: PUSH
29255: LD_INT 108
29257: PUSH
29258: LD_INT 116
29260: PUSH
29261: LD_INT 117
29263: PUSH
29264: LD_INT 118
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: ST_TO_ADDR
29281: GO 32064
29283: LD_INT 5
29285: DOUBLE
29286: EQUAL
29287: IFTRUE 29291
29289: GO 29403
29291: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
29292: LD_ADDR_VAR 0 1
29296: PUSH
29297: LD_INT 2
29299: PUSH
29300: LD_INT 4
29302: PUSH
29303: LD_INT 5
29305: PUSH
29306: LD_INT 6
29308: PUSH
29309: LD_INT 8
29311: PUSH
29312: LD_INT 11
29314: PUSH
29315: LD_INT 12
29317: PUSH
29318: LD_INT 15
29320: PUSH
29321: LD_INT 16
29323: PUSH
29324: LD_INT 22
29326: PUSH
29327: LD_INT 23
29329: PUSH
29330: LD_INT 25
29332: PUSH
29333: LD_INT 26
29335: PUSH
29336: LD_INT 36
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 101
29357: PUSH
29358: LD_INT 102
29360: PUSH
29361: LD_INT 105
29363: PUSH
29364: LD_INT 106
29366: PUSH
29367: LD_INT 108
29369: PUSH
29370: LD_INT 109
29372: PUSH
29373: LD_INT 112
29375: PUSH
29376: LD_INT 116
29378: PUSH
29379: LD_INT 117
29381: PUSH
29382: LD_INT 118
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: ST_TO_ADDR
29401: GO 32064
29403: LD_INT 6
29405: DOUBLE
29406: EQUAL
29407: IFTRUE 29411
29409: GO 29543
29411: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
29412: LD_ADDR_VAR 0 1
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: LD_INT 4
29422: PUSH
29423: LD_INT 5
29425: PUSH
29426: LD_INT 6
29428: PUSH
29429: LD_INT 8
29431: PUSH
29432: LD_INT 11
29434: PUSH
29435: LD_INT 12
29437: PUSH
29438: LD_INT 15
29440: PUSH
29441: LD_INT 16
29443: PUSH
29444: LD_INT 20
29446: PUSH
29447: LD_INT 21
29449: PUSH
29450: LD_INT 22
29452: PUSH
29453: LD_INT 23
29455: PUSH
29456: LD_INT 25
29458: PUSH
29459: LD_INT 26
29461: PUSH
29462: LD_INT 30
29464: PUSH
29465: LD_INT 31
29467: PUSH
29468: LD_INT 32
29470: PUSH
29471: LD_INT 36
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 101
29497: PUSH
29498: LD_INT 102
29500: PUSH
29501: LD_INT 105
29503: PUSH
29504: LD_INT 106
29506: PUSH
29507: LD_INT 108
29509: PUSH
29510: LD_INT 109
29512: PUSH
29513: LD_INT 112
29515: PUSH
29516: LD_INT 116
29518: PUSH
29519: LD_INT 117
29521: PUSH
29522: LD_INT 118
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: ST_TO_ADDR
29541: GO 32064
29543: LD_INT 7
29545: DOUBLE
29546: EQUAL
29547: IFTRUE 29551
29549: GO 29663
29551: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
29552: LD_ADDR_VAR 0 1
29556: PUSH
29557: LD_INT 2
29559: PUSH
29560: LD_INT 4
29562: PUSH
29563: LD_INT 5
29565: PUSH
29566: LD_INT 7
29568: PUSH
29569: LD_INT 11
29571: PUSH
29572: LD_INT 12
29574: PUSH
29575: LD_INT 15
29577: PUSH
29578: LD_INT 16
29580: PUSH
29581: LD_INT 20
29583: PUSH
29584: LD_INT 21
29586: PUSH
29587: LD_INT 22
29589: PUSH
29590: LD_INT 23
29592: PUSH
29593: LD_INT 25
29595: PUSH
29596: LD_INT 26
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 101
29617: PUSH
29618: LD_INT 102
29620: PUSH
29621: LD_INT 103
29623: PUSH
29624: LD_INT 105
29626: PUSH
29627: LD_INT 106
29629: PUSH
29630: LD_INT 108
29632: PUSH
29633: LD_INT 112
29635: PUSH
29636: LD_INT 116
29638: PUSH
29639: LD_INT 117
29641: PUSH
29642: LD_INT 118
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: ST_TO_ADDR
29661: GO 32064
29663: LD_INT 8
29665: DOUBLE
29666: EQUAL
29667: IFTRUE 29671
29669: GO 29811
29671: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
29672: LD_ADDR_VAR 0 1
29676: PUSH
29677: LD_INT 2
29679: PUSH
29680: LD_INT 4
29682: PUSH
29683: LD_INT 5
29685: PUSH
29686: LD_INT 6
29688: PUSH
29689: LD_INT 7
29691: PUSH
29692: LD_INT 8
29694: PUSH
29695: LD_INT 11
29697: PUSH
29698: LD_INT 12
29700: PUSH
29701: LD_INT 15
29703: PUSH
29704: LD_INT 16
29706: PUSH
29707: LD_INT 20
29709: PUSH
29710: LD_INT 21
29712: PUSH
29713: LD_INT 22
29715: PUSH
29716: LD_INT 23
29718: PUSH
29719: LD_INT 25
29721: PUSH
29722: LD_INT 26
29724: PUSH
29725: LD_INT 30
29727: PUSH
29728: LD_INT 31
29730: PUSH
29731: LD_INT 32
29733: PUSH
29734: LD_INT 36
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 101
29761: PUSH
29762: LD_INT 102
29764: PUSH
29765: LD_INT 103
29767: PUSH
29768: LD_INT 105
29770: PUSH
29771: LD_INT 106
29773: PUSH
29774: LD_INT 108
29776: PUSH
29777: LD_INT 109
29779: PUSH
29780: LD_INT 112
29782: PUSH
29783: LD_INT 116
29785: PUSH
29786: LD_INT 117
29788: PUSH
29789: LD_INT 118
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: ST_TO_ADDR
29809: GO 32064
29811: LD_INT 9
29813: DOUBLE
29814: EQUAL
29815: IFTRUE 29819
29817: GO 29967
29819: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
29820: LD_ADDR_VAR 0 1
29824: PUSH
29825: LD_INT 2
29827: PUSH
29828: LD_INT 4
29830: PUSH
29831: LD_INT 5
29833: PUSH
29834: LD_INT 6
29836: PUSH
29837: LD_INT 7
29839: PUSH
29840: LD_INT 8
29842: PUSH
29843: LD_INT 11
29845: PUSH
29846: LD_INT 12
29848: PUSH
29849: LD_INT 15
29851: PUSH
29852: LD_INT 16
29854: PUSH
29855: LD_INT 20
29857: PUSH
29858: LD_INT 21
29860: PUSH
29861: LD_INT 22
29863: PUSH
29864: LD_INT 23
29866: PUSH
29867: LD_INT 25
29869: PUSH
29870: LD_INT 26
29872: PUSH
29873: LD_INT 28
29875: PUSH
29876: LD_INT 30
29878: PUSH
29879: LD_INT 31
29881: PUSH
29882: LD_INT 32
29884: PUSH
29885: LD_INT 36
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 101
29913: PUSH
29914: LD_INT 102
29916: PUSH
29917: LD_INT 103
29919: PUSH
29920: LD_INT 105
29922: PUSH
29923: LD_INT 106
29925: PUSH
29926: LD_INT 108
29928: PUSH
29929: LD_INT 109
29931: PUSH
29932: LD_INT 112
29934: PUSH
29935: LD_INT 114
29937: PUSH
29938: LD_INT 116
29940: PUSH
29941: LD_INT 117
29943: PUSH
29944: LD_INT 118
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: ST_TO_ADDR
29965: GO 32064
29967: LD_INT 10
29969: DOUBLE
29970: EQUAL
29971: IFTRUE 29975
29973: GO 30171
29975: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
29976: LD_ADDR_VAR 0 1
29980: PUSH
29981: LD_INT 2
29983: PUSH
29984: LD_INT 4
29986: PUSH
29987: LD_INT 5
29989: PUSH
29990: LD_INT 6
29992: PUSH
29993: LD_INT 7
29995: PUSH
29996: LD_INT 8
29998: PUSH
29999: LD_INT 9
30001: PUSH
30002: LD_INT 10
30004: PUSH
30005: LD_INT 11
30007: PUSH
30008: LD_INT 12
30010: PUSH
30011: LD_INT 13
30013: PUSH
30014: LD_INT 14
30016: PUSH
30017: LD_INT 15
30019: PUSH
30020: LD_INT 16
30022: PUSH
30023: LD_INT 17
30025: PUSH
30026: LD_INT 18
30028: PUSH
30029: LD_INT 19
30031: PUSH
30032: LD_INT 20
30034: PUSH
30035: LD_INT 21
30037: PUSH
30038: LD_INT 22
30040: PUSH
30041: LD_INT 23
30043: PUSH
30044: LD_INT 24
30046: PUSH
30047: LD_INT 25
30049: PUSH
30050: LD_INT 26
30052: PUSH
30053: LD_INT 28
30055: PUSH
30056: LD_INT 30
30058: PUSH
30059: LD_INT 31
30061: PUSH
30062: LD_INT 32
30064: PUSH
30065: LD_INT 36
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 101
30101: PUSH
30102: LD_INT 102
30104: PUSH
30105: LD_INT 103
30107: PUSH
30108: LD_INT 104
30110: PUSH
30111: LD_INT 105
30113: PUSH
30114: LD_INT 106
30116: PUSH
30117: LD_INT 107
30119: PUSH
30120: LD_INT 108
30122: PUSH
30123: LD_INT 109
30125: PUSH
30126: LD_INT 110
30128: PUSH
30129: LD_INT 111
30131: PUSH
30132: LD_INT 112
30134: PUSH
30135: LD_INT 114
30137: PUSH
30138: LD_INT 116
30140: PUSH
30141: LD_INT 117
30143: PUSH
30144: LD_INT 118
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: ST_TO_ADDR
30169: GO 32064
30171: LD_INT 11
30173: DOUBLE
30174: EQUAL
30175: IFTRUE 30179
30177: GO 30383
30179: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
30180: LD_ADDR_VAR 0 1
30184: PUSH
30185: LD_INT 2
30187: PUSH
30188: LD_INT 3
30190: PUSH
30191: LD_INT 4
30193: PUSH
30194: LD_INT 5
30196: PUSH
30197: LD_INT 6
30199: PUSH
30200: LD_INT 7
30202: PUSH
30203: LD_INT 8
30205: PUSH
30206: LD_INT 9
30208: PUSH
30209: LD_INT 10
30211: PUSH
30212: LD_INT 11
30214: PUSH
30215: LD_INT 12
30217: PUSH
30218: LD_INT 13
30220: PUSH
30221: LD_INT 14
30223: PUSH
30224: LD_INT 15
30226: PUSH
30227: LD_INT 16
30229: PUSH
30230: LD_INT 17
30232: PUSH
30233: LD_INT 18
30235: PUSH
30236: LD_INT 19
30238: PUSH
30239: LD_INT 20
30241: PUSH
30242: LD_INT 21
30244: PUSH
30245: LD_INT 22
30247: PUSH
30248: LD_INT 23
30250: PUSH
30251: LD_INT 24
30253: PUSH
30254: LD_INT 25
30256: PUSH
30257: LD_INT 26
30259: PUSH
30260: LD_INT 28
30262: PUSH
30263: LD_INT 30
30265: PUSH
30266: LD_INT 31
30268: PUSH
30269: LD_INT 32
30271: PUSH
30272: LD_INT 34
30274: PUSH
30275: LD_INT 36
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 101
30313: PUSH
30314: LD_INT 102
30316: PUSH
30317: LD_INT 103
30319: PUSH
30320: LD_INT 104
30322: PUSH
30323: LD_INT 105
30325: PUSH
30326: LD_INT 106
30328: PUSH
30329: LD_INT 107
30331: PUSH
30332: LD_INT 108
30334: PUSH
30335: LD_INT 109
30337: PUSH
30338: LD_INT 110
30340: PUSH
30341: LD_INT 111
30343: PUSH
30344: LD_INT 112
30346: PUSH
30347: LD_INT 114
30349: PUSH
30350: LD_INT 116
30352: PUSH
30353: LD_INT 117
30355: PUSH
30356: LD_INT 118
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: ST_TO_ADDR
30381: GO 32064
30383: LD_INT 12
30385: DOUBLE
30386: EQUAL
30387: IFTRUE 30391
30389: GO 30611
30391: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
30392: LD_ADDR_VAR 0 1
30396: PUSH
30397: LD_INT 1
30399: PUSH
30400: LD_INT 2
30402: PUSH
30403: LD_INT 3
30405: PUSH
30406: LD_INT 4
30408: PUSH
30409: LD_INT 5
30411: PUSH
30412: LD_INT 6
30414: PUSH
30415: LD_INT 7
30417: PUSH
30418: LD_INT 8
30420: PUSH
30421: LD_INT 9
30423: PUSH
30424: LD_INT 10
30426: PUSH
30427: LD_INT 11
30429: PUSH
30430: LD_INT 12
30432: PUSH
30433: LD_INT 13
30435: PUSH
30436: LD_INT 14
30438: PUSH
30439: LD_INT 15
30441: PUSH
30442: LD_INT 16
30444: PUSH
30445: LD_INT 17
30447: PUSH
30448: LD_INT 18
30450: PUSH
30451: LD_INT 19
30453: PUSH
30454: LD_INT 20
30456: PUSH
30457: LD_INT 21
30459: PUSH
30460: LD_INT 22
30462: PUSH
30463: LD_INT 23
30465: PUSH
30466: LD_INT 24
30468: PUSH
30469: LD_INT 25
30471: PUSH
30472: LD_INT 26
30474: PUSH
30475: LD_INT 27
30477: PUSH
30478: LD_INT 28
30480: PUSH
30481: LD_INT 30
30483: PUSH
30484: LD_INT 31
30486: PUSH
30487: LD_INT 32
30489: PUSH
30490: LD_INT 33
30492: PUSH
30493: LD_INT 34
30495: PUSH
30496: LD_INT 36
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 101
30537: PUSH
30538: LD_INT 102
30540: PUSH
30541: LD_INT 103
30543: PUSH
30544: LD_INT 104
30546: PUSH
30547: LD_INT 105
30549: PUSH
30550: LD_INT 106
30552: PUSH
30553: LD_INT 107
30555: PUSH
30556: LD_INT 108
30558: PUSH
30559: LD_INT 109
30561: PUSH
30562: LD_INT 110
30564: PUSH
30565: LD_INT 111
30567: PUSH
30568: LD_INT 112
30570: PUSH
30571: LD_INT 113
30573: PUSH
30574: LD_INT 114
30576: PUSH
30577: LD_INT 116
30579: PUSH
30580: LD_INT 117
30582: PUSH
30583: LD_INT 118
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: ST_TO_ADDR
30609: GO 32064
30611: LD_INT 13
30613: DOUBLE
30614: EQUAL
30615: IFTRUE 30619
30617: GO 30827
30619: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
30620: LD_ADDR_VAR 0 1
30624: PUSH
30625: LD_INT 1
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: LD_INT 3
30633: PUSH
30634: LD_INT 4
30636: PUSH
30637: LD_INT 5
30639: PUSH
30640: LD_INT 8
30642: PUSH
30643: LD_INT 9
30645: PUSH
30646: LD_INT 10
30648: PUSH
30649: LD_INT 11
30651: PUSH
30652: LD_INT 12
30654: PUSH
30655: LD_INT 14
30657: PUSH
30658: LD_INT 15
30660: PUSH
30661: LD_INT 16
30663: PUSH
30664: LD_INT 17
30666: PUSH
30667: LD_INT 18
30669: PUSH
30670: LD_INT 19
30672: PUSH
30673: LD_INT 20
30675: PUSH
30676: LD_INT 21
30678: PUSH
30679: LD_INT 22
30681: PUSH
30682: LD_INT 23
30684: PUSH
30685: LD_INT 24
30687: PUSH
30688: LD_INT 25
30690: PUSH
30691: LD_INT 26
30693: PUSH
30694: LD_INT 27
30696: PUSH
30697: LD_INT 28
30699: PUSH
30700: LD_INT 30
30702: PUSH
30703: LD_INT 31
30705: PUSH
30706: LD_INT 32
30708: PUSH
30709: LD_INT 33
30711: PUSH
30712: LD_INT 34
30714: PUSH
30715: LD_INT 36
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 101
30753: PUSH
30754: LD_INT 102
30756: PUSH
30757: LD_INT 103
30759: PUSH
30760: LD_INT 104
30762: PUSH
30763: LD_INT 105
30765: PUSH
30766: LD_INT 106
30768: PUSH
30769: LD_INT 107
30771: PUSH
30772: LD_INT 108
30774: PUSH
30775: LD_INT 109
30777: PUSH
30778: LD_INT 110
30780: PUSH
30781: LD_INT 111
30783: PUSH
30784: LD_INT 112
30786: PUSH
30787: LD_INT 113
30789: PUSH
30790: LD_INT 114
30792: PUSH
30793: LD_INT 116
30795: PUSH
30796: LD_INT 117
30798: PUSH
30799: LD_INT 118
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: ST_TO_ADDR
30825: GO 32064
30827: LD_INT 14
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 31059
30835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
30836: LD_ADDR_VAR 0 1
30840: PUSH
30841: LD_INT 1
30843: PUSH
30844: LD_INT 2
30846: PUSH
30847: LD_INT 3
30849: PUSH
30850: LD_INT 4
30852: PUSH
30853: LD_INT 5
30855: PUSH
30856: LD_INT 6
30858: PUSH
30859: LD_INT 7
30861: PUSH
30862: LD_INT 8
30864: PUSH
30865: LD_INT 9
30867: PUSH
30868: LD_INT 10
30870: PUSH
30871: LD_INT 11
30873: PUSH
30874: LD_INT 12
30876: PUSH
30877: LD_INT 13
30879: PUSH
30880: LD_INT 14
30882: PUSH
30883: LD_INT 15
30885: PUSH
30886: LD_INT 16
30888: PUSH
30889: LD_INT 17
30891: PUSH
30892: LD_INT 18
30894: PUSH
30895: LD_INT 19
30897: PUSH
30898: LD_INT 20
30900: PUSH
30901: LD_INT 21
30903: PUSH
30904: LD_INT 22
30906: PUSH
30907: LD_INT 23
30909: PUSH
30910: LD_INT 24
30912: PUSH
30913: LD_INT 25
30915: PUSH
30916: LD_INT 26
30918: PUSH
30919: LD_INT 27
30921: PUSH
30922: LD_INT 28
30924: PUSH
30925: LD_INT 29
30927: PUSH
30928: LD_INT 30
30930: PUSH
30931: LD_INT 31
30933: PUSH
30934: LD_INT 32
30936: PUSH
30937: LD_INT 33
30939: PUSH
30940: LD_INT 34
30942: PUSH
30943: LD_INT 36
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 101
30985: PUSH
30986: LD_INT 102
30988: PUSH
30989: LD_INT 103
30991: PUSH
30992: LD_INT 104
30994: PUSH
30995: LD_INT 105
30997: PUSH
30998: LD_INT 106
31000: PUSH
31001: LD_INT 107
31003: PUSH
31004: LD_INT 108
31006: PUSH
31007: LD_INT 109
31009: PUSH
31010: LD_INT 110
31012: PUSH
31013: LD_INT 111
31015: PUSH
31016: LD_INT 112
31018: PUSH
31019: LD_INT 113
31021: PUSH
31022: LD_INT 114
31024: PUSH
31025: LD_INT 116
31027: PUSH
31028: LD_INT 117
31030: PUSH
31031: LD_INT 118
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: ST_TO_ADDR
31057: GO 32064
31059: LD_INT 15
31061: DOUBLE
31062: EQUAL
31063: IFTRUE 31067
31065: GO 31291
31067: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
31068: LD_ADDR_VAR 0 1
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: LD_INT 2
31078: PUSH
31079: LD_INT 3
31081: PUSH
31082: LD_INT 4
31084: PUSH
31085: LD_INT 5
31087: PUSH
31088: LD_INT 6
31090: PUSH
31091: LD_INT 7
31093: PUSH
31094: LD_INT 8
31096: PUSH
31097: LD_INT 9
31099: PUSH
31100: LD_INT 10
31102: PUSH
31103: LD_INT 11
31105: PUSH
31106: LD_INT 12
31108: PUSH
31109: LD_INT 13
31111: PUSH
31112: LD_INT 14
31114: PUSH
31115: LD_INT 15
31117: PUSH
31118: LD_INT 16
31120: PUSH
31121: LD_INT 17
31123: PUSH
31124: LD_INT 18
31126: PUSH
31127: LD_INT 19
31129: PUSH
31130: LD_INT 20
31132: PUSH
31133: LD_INT 21
31135: PUSH
31136: LD_INT 22
31138: PUSH
31139: LD_INT 23
31141: PUSH
31142: LD_INT 24
31144: PUSH
31145: LD_INT 25
31147: PUSH
31148: LD_INT 26
31150: PUSH
31151: LD_INT 27
31153: PUSH
31154: LD_INT 28
31156: PUSH
31157: LD_INT 29
31159: PUSH
31160: LD_INT 30
31162: PUSH
31163: LD_INT 31
31165: PUSH
31166: LD_INT 32
31168: PUSH
31169: LD_INT 33
31171: PUSH
31172: LD_INT 34
31174: PUSH
31175: LD_INT 36
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 101
31217: PUSH
31218: LD_INT 102
31220: PUSH
31221: LD_INT 103
31223: PUSH
31224: LD_INT 104
31226: PUSH
31227: LD_INT 105
31229: PUSH
31230: LD_INT 106
31232: PUSH
31233: LD_INT 107
31235: PUSH
31236: LD_INT 108
31238: PUSH
31239: LD_INT 109
31241: PUSH
31242: LD_INT 110
31244: PUSH
31245: LD_INT 111
31247: PUSH
31248: LD_INT 112
31250: PUSH
31251: LD_INT 113
31253: PUSH
31254: LD_INT 114
31256: PUSH
31257: LD_INT 116
31259: PUSH
31260: LD_INT 117
31262: PUSH
31263: LD_INT 118
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: ST_TO_ADDR
31289: GO 32064
31291: LD_INT 16
31293: DOUBLE
31294: EQUAL
31295: IFTRUE 31299
31297: GO 31435
31299: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
31300: LD_ADDR_VAR 0 1
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: LD_INT 4
31310: PUSH
31311: LD_INT 5
31313: PUSH
31314: LD_INT 7
31316: PUSH
31317: LD_INT 11
31319: PUSH
31320: LD_INT 12
31322: PUSH
31323: LD_INT 15
31325: PUSH
31326: LD_INT 16
31328: PUSH
31329: LD_INT 20
31331: PUSH
31332: LD_INT 21
31334: PUSH
31335: LD_INT 22
31337: PUSH
31338: LD_INT 23
31340: PUSH
31341: LD_INT 25
31343: PUSH
31344: LD_INT 26
31346: PUSH
31347: LD_INT 30
31349: PUSH
31350: LD_INT 31
31352: PUSH
31353: LD_INT 32
31355: PUSH
31356: LD_INT 33
31358: PUSH
31359: LD_INT 34
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 101
31385: PUSH
31386: LD_INT 102
31388: PUSH
31389: LD_INT 103
31391: PUSH
31392: LD_INT 106
31394: PUSH
31395: LD_INT 108
31397: PUSH
31398: LD_INT 112
31400: PUSH
31401: LD_INT 113
31403: PUSH
31404: LD_INT 114
31406: PUSH
31407: LD_INT 116
31409: PUSH
31410: LD_INT 117
31412: PUSH
31413: LD_INT 118
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: ST_TO_ADDR
31433: GO 32064
31435: LD_INT 17
31437: DOUBLE
31438: EQUAL
31439: IFTRUE 31443
31441: GO 31667
31443: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
31444: LD_ADDR_VAR 0 1
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: LD_INT 3
31457: PUSH
31458: LD_INT 4
31460: PUSH
31461: LD_INT 5
31463: PUSH
31464: LD_INT 6
31466: PUSH
31467: LD_INT 7
31469: PUSH
31470: LD_INT 8
31472: PUSH
31473: LD_INT 9
31475: PUSH
31476: LD_INT 10
31478: PUSH
31479: LD_INT 11
31481: PUSH
31482: LD_INT 12
31484: PUSH
31485: LD_INT 13
31487: PUSH
31488: LD_INT 14
31490: PUSH
31491: LD_INT 15
31493: PUSH
31494: LD_INT 16
31496: PUSH
31497: LD_INT 17
31499: PUSH
31500: LD_INT 18
31502: PUSH
31503: LD_INT 19
31505: PUSH
31506: LD_INT 20
31508: PUSH
31509: LD_INT 21
31511: PUSH
31512: LD_INT 22
31514: PUSH
31515: LD_INT 23
31517: PUSH
31518: LD_INT 24
31520: PUSH
31521: LD_INT 25
31523: PUSH
31524: LD_INT 26
31526: PUSH
31527: LD_INT 27
31529: PUSH
31530: LD_INT 28
31532: PUSH
31533: LD_INT 29
31535: PUSH
31536: LD_INT 30
31538: PUSH
31539: LD_INT 31
31541: PUSH
31542: LD_INT 32
31544: PUSH
31545: LD_INT 33
31547: PUSH
31548: LD_INT 34
31550: PUSH
31551: LD_INT 36
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 101
31593: PUSH
31594: LD_INT 102
31596: PUSH
31597: LD_INT 103
31599: PUSH
31600: LD_INT 104
31602: PUSH
31603: LD_INT 105
31605: PUSH
31606: LD_INT 106
31608: PUSH
31609: LD_INT 107
31611: PUSH
31612: LD_INT 108
31614: PUSH
31615: LD_INT 109
31617: PUSH
31618: LD_INT 110
31620: PUSH
31621: LD_INT 111
31623: PUSH
31624: LD_INT 112
31626: PUSH
31627: LD_INT 113
31629: PUSH
31630: LD_INT 114
31632: PUSH
31633: LD_INT 116
31635: PUSH
31636: LD_INT 117
31638: PUSH
31639: LD_INT 118
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: ST_TO_ADDR
31665: GO 32064
31667: LD_INT 18
31669: DOUBLE
31670: EQUAL
31671: IFTRUE 31675
31673: GO 31823
31675: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
31676: LD_ADDR_VAR 0 1
31680: PUSH
31681: LD_INT 2
31683: PUSH
31684: LD_INT 4
31686: PUSH
31687: LD_INT 5
31689: PUSH
31690: LD_INT 7
31692: PUSH
31693: LD_INT 11
31695: PUSH
31696: LD_INT 12
31698: PUSH
31699: LD_INT 15
31701: PUSH
31702: LD_INT 16
31704: PUSH
31705: LD_INT 20
31707: PUSH
31708: LD_INT 21
31710: PUSH
31711: LD_INT 22
31713: PUSH
31714: LD_INT 23
31716: PUSH
31717: LD_INT 25
31719: PUSH
31720: LD_INT 26
31722: PUSH
31723: LD_INT 30
31725: PUSH
31726: LD_INT 31
31728: PUSH
31729: LD_INT 32
31731: PUSH
31732: LD_INT 33
31734: PUSH
31735: LD_INT 34
31737: PUSH
31738: LD_INT 35
31740: PUSH
31741: LD_INT 36
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 101
31769: PUSH
31770: LD_INT 102
31772: PUSH
31773: LD_INT 103
31775: PUSH
31776: LD_INT 106
31778: PUSH
31779: LD_INT 108
31781: PUSH
31782: LD_INT 112
31784: PUSH
31785: LD_INT 113
31787: PUSH
31788: LD_INT 114
31790: PUSH
31791: LD_INT 115
31793: PUSH
31794: LD_INT 116
31796: PUSH
31797: LD_INT 117
31799: PUSH
31800: LD_INT 118
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: ST_TO_ADDR
31821: GO 32064
31823: LD_INT 19
31825: DOUBLE
31826: EQUAL
31827: IFTRUE 31831
31829: GO 32063
31831: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
31832: LD_ADDR_VAR 0 1
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 2
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: LD_INT 4
31848: PUSH
31849: LD_INT 5
31851: PUSH
31852: LD_INT 6
31854: PUSH
31855: LD_INT 7
31857: PUSH
31858: LD_INT 8
31860: PUSH
31861: LD_INT 9
31863: PUSH
31864: LD_INT 10
31866: PUSH
31867: LD_INT 11
31869: PUSH
31870: LD_INT 12
31872: PUSH
31873: LD_INT 13
31875: PUSH
31876: LD_INT 14
31878: PUSH
31879: LD_INT 15
31881: PUSH
31882: LD_INT 16
31884: PUSH
31885: LD_INT 17
31887: PUSH
31888: LD_INT 18
31890: PUSH
31891: LD_INT 19
31893: PUSH
31894: LD_INT 20
31896: PUSH
31897: LD_INT 21
31899: PUSH
31900: LD_INT 22
31902: PUSH
31903: LD_INT 23
31905: PUSH
31906: LD_INT 24
31908: PUSH
31909: LD_INT 25
31911: PUSH
31912: LD_INT 26
31914: PUSH
31915: LD_INT 27
31917: PUSH
31918: LD_INT 28
31920: PUSH
31921: LD_INT 29
31923: PUSH
31924: LD_INT 30
31926: PUSH
31927: LD_INT 31
31929: PUSH
31930: LD_INT 32
31932: PUSH
31933: LD_INT 33
31935: PUSH
31936: LD_INT 34
31938: PUSH
31939: LD_INT 35
31941: PUSH
31942: LD_INT 36
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 101
31985: PUSH
31986: LD_INT 102
31988: PUSH
31989: LD_INT 103
31991: PUSH
31992: LD_INT 104
31994: PUSH
31995: LD_INT 105
31997: PUSH
31998: LD_INT 106
32000: PUSH
32001: LD_INT 107
32003: PUSH
32004: LD_INT 108
32006: PUSH
32007: LD_INT 109
32009: PUSH
32010: LD_INT 110
32012: PUSH
32013: LD_INT 111
32015: PUSH
32016: LD_INT 112
32018: PUSH
32019: LD_INT 113
32021: PUSH
32022: LD_INT 114
32024: PUSH
32025: LD_INT 115
32027: PUSH
32028: LD_INT 116
32030: PUSH
32031: LD_INT 117
32033: PUSH
32034: LD_INT 118
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: ST_TO_ADDR
32061: GO 32064
32063: POP
// end else
32064: GO 32295
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
32066: LD_ADDR_VAR 0 1
32070: PUSH
32071: LD_INT 1
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: LD_INT 3
32079: PUSH
32080: LD_INT 4
32082: PUSH
32083: LD_INT 5
32085: PUSH
32086: LD_INT 6
32088: PUSH
32089: LD_INT 7
32091: PUSH
32092: LD_INT 8
32094: PUSH
32095: LD_INT 9
32097: PUSH
32098: LD_INT 10
32100: PUSH
32101: LD_INT 11
32103: PUSH
32104: LD_INT 12
32106: PUSH
32107: LD_INT 13
32109: PUSH
32110: LD_INT 14
32112: PUSH
32113: LD_INT 15
32115: PUSH
32116: LD_INT 16
32118: PUSH
32119: LD_INT 17
32121: PUSH
32122: LD_INT 18
32124: PUSH
32125: LD_INT 19
32127: PUSH
32128: LD_INT 20
32130: PUSH
32131: LD_INT 21
32133: PUSH
32134: LD_INT 22
32136: PUSH
32137: LD_INT 23
32139: PUSH
32140: LD_INT 24
32142: PUSH
32143: LD_INT 25
32145: PUSH
32146: LD_INT 26
32148: PUSH
32149: LD_INT 27
32151: PUSH
32152: LD_INT 28
32154: PUSH
32155: LD_INT 29
32157: PUSH
32158: LD_INT 30
32160: PUSH
32161: LD_INT 31
32163: PUSH
32164: LD_INT 32
32166: PUSH
32167: LD_INT 33
32169: PUSH
32170: LD_INT 34
32172: PUSH
32173: LD_INT 35
32175: PUSH
32176: LD_INT 36
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 101
32219: PUSH
32220: LD_INT 102
32222: PUSH
32223: LD_INT 103
32225: PUSH
32226: LD_INT 104
32228: PUSH
32229: LD_INT 105
32231: PUSH
32232: LD_INT 106
32234: PUSH
32235: LD_INT 107
32237: PUSH
32238: LD_INT 108
32240: PUSH
32241: LD_INT 109
32243: PUSH
32244: LD_INT 110
32246: PUSH
32247: LD_INT 111
32249: PUSH
32250: LD_INT 112
32252: PUSH
32253: LD_INT 113
32255: PUSH
32256: LD_INT 114
32258: PUSH
32259: LD_INT 115
32261: PUSH
32262: LD_INT 116
32264: PUSH
32265: LD_INT 117
32267: PUSH
32268: LD_INT 118
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: ST_TO_ADDR
// if result then
32295: LD_VAR 0 1
32299: IFFALSE 32588
// begin normal :=  ;
32301: LD_ADDR_VAR 0 3
32305: PUSH
32306: LD_STRING 
32308: ST_TO_ADDR
// hardcore :=  ;
32309: LD_ADDR_VAR 0 4
32313: PUSH
32314: LD_STRING 
32316: ST_TO_ADDR
// for i = 1 to normalCounter do
32317: LD_ADDR_VAR 0 5
32321: PUSH
32322: DOUBLE
32323: LD_INT 1
32325: DEC
32326: ST_TO_ADDR
32327: LD_EXP 68
32331: PUSH
32332: FOR_TO
32333: IFFALSE 32434
// begin tmp := 0 ;
32335: LD_ADDR_VAR 0 2
32339: PUSH
32340: LD_STRING 0
32342: ST_TO_ADDR
// if result [ 1 ] then
32343: LD_VAR 0 1
32347: PUSH
32348: LD_INT 1
32350: ARRAY
32351: IFFALSE 32416
// if result [ 1 ] [ 1 ] = i then
32353: LD_VAR 0 1
32357: PUSH
32358: LD_INT 1
32360: ARRAY
32361: PUSH
32362: LD_INT 1
32364: ARRAY
32365: PUSH
32366: LD_VAR 0 5
32370: EQUAL
32371: IFFALSE 32416
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
32373: LD_ADDR_VAR 0 1
32377: PUSH
32378: LD_VAR 0 1
32382: PPUSH
32383: LD_INT 1
32385: PPUSH
32386: LD_VAR 0 1
32390: PUSH
32391: LD_INT 1
32393: ARRAY
32394: PPUSH
32395: LD_INT 1
32397: PPUSH
32398: CALL_OW 3
32402: PPUSH
32403: CALL_OW 1
32407: ST_TO_ADDR
// tmp := 1 ;
32408: LD_ADDR_VAR 0 2
32412: PUSH
32413: LD_STRING 1
32415: ST_TO_ADDR
// end ; normal := normal & tmp ;
32416: LD_ADDR_VAR 0 3
32420: PUSH
32421: LD_VAR 0 3
32425: PUSH
32426: LD_VAR 0 2
32430: STR
32431: ST_TO_ADDR
// end ;
32432: GO 32332
32434: POP
32435: POP
// for i = 1 to hardcoreCounter do
32436: LD_ADDR_VAR 0 5
32440: PUSH
32441: DOUBLE
32442: LD_INT 1
32444: DEC
32445: ST_TO_ADDR
32446: LD_EXP 69
32450: PUSH
32451: FOR_TO
32452: IFFALSE 32557
// begin tmp := 0 ;
32454: LD_ADDR_VAR 0 2
32458: PUSH
32459: LD_STRING 0
32461: ST_TO_ADDR
// if result [ 2 ] then
32462: LD_VAR 0 1
32466: PUSH
32467: LD_INT 2
32469: ARRAY
32470: IFFALSE 32539
// if result [ 2 ] [ 1 ] = 100 + i then
32472: LD_VAR 0 1
32476: PUSH
32477: LD_INT 2
32479: ARRAY
32480: PUSH
32481: LD_INT 1
32483: ARRAY
32484: PUSH
32485: LD_INT 100
32487: PUSH
32488: LD_VAR 0 5
32492: PLUS
32493: EQUAL
32494: IFFALSE 32539
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32496: LD_ADDR_VAR 0 1
32500: PUSH
32501: LD_VAR 0 1
32505: PPUSH
32506: LD_INT 2
32508: PPUSH
32509: LD_VAR 0 1
32513: PUSH
32514: LD_INT 2
32516: ARRAY
32517: PPUSH
32518: LD_INT 1
32520: PPUSH
32521: CALL_OW 3
32525: PPUSH
32526: CALL_OW 1
32530: ST_TO_ADDR
// tmp := 1 ;
32531: LD_ADDR_VAR 0 2
32535: PUSH
32536: LD_STRING 1
32538: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32539: LD_ADDR_VAR 0 4
32543: PUSH
32544: LD_VAR 0 4
32548: PUSH
32549: LD_VAR 0 2
32553: STR
32554: ST_TO_ADDR
// end ;
32555: GO 32451
32557: POP
32558: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
32559: LD_STRING getStreamItemsFromMission("
32561: PUSH
32562: LD_VAR 0 3
32566: STR
32567: PUSH
32568: LD_STRING ","
32570: STR
32571: PUSH
32572: LD_VAR 0 4
32576: STR
32577: PUSH
32578: LD_STRING ")
32580: STR
32581: PPUSH
32582: CALL_OW 559
// end else
32586: GO 32595
// ToLua ( getStreamItemsFromMission("","") ) ;
32588: LD_STRING getStreamItemsFromMission("","")
32590: PPUSH
32591: CALL_OW 559
// end ;
32595: LD_VAR 0 1
32599: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32600: LD_EXP 67
32604: PUSH
32605: LD_EXP 72
32609: AND
32610: IFFALSE 32734
32612: GO 32614
32614: DISABLE
32615: LD_INT 0
32617: PPUSH
32618: PPUSH
// begin enable ;
32619: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
32620: LD_ADDR_VAR 0 2
32624: PUSH
32625: LD_INT 22
32627: PUSH
32628: LD_OWVAR 2
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: LD_INT 34
32642: PUSH
32643: LD_INT 7
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 34
32652: PUSH
32653: LD_INT 45
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 34
32662: PUSH
32663: LD_INT 28
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 34
32672: PUSH
32673: LD_INT 47
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PPUSH
32691: CALL_OW 69
32695: ST_TO_ADDR
// if not tmp then
32696: LD_VAR 0 2
32700: NOT
32701: IFFALSE 32705
// exit ;
32703: GO 32734
// for i in tmp do
32705: LD_ADDR_VAR 0 1
32709: PUSH
32710: LD_VAR 0 2
32714: PUSH
32715: FOR_IN
32716: IFFALSE 32732
// begin SetLives ( i , 0 ) ;
32718: LD_VAR 0 1
32722: PPUSH
32723: LD_INT 0
32725: PPUSH
32726: CALL_OW 234
// end ;
32730: GO 32715
32732: POP
32733: POP
// end ;
32734: PPOPN 2
32736: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
32737: LD_EXP 67
32741: PUSH
32742: LD_EXP 73
32746: AND
32747: IFFALSE 32831
32749: GO 32751
32751: DISABLE
32752: LD_INT 0
32754: PPUSH
32755: PPUSH
// begin enable ;
32756: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
32757: LD_ADDR_VAR 0 2
32761: PUSH
32762: LD_INT 22
32764: PUSH
32765: LD_OWVAR 2
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 32
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PPUSH
32788: CALL_OW 69
32792: ST_TO_ADDR
// if not tmp then
32793: LD_VAR 0 2
32797: NOT
32798: IFFALSE 32802
// exit ;
32800: GO 32831
// for i in tmp do
32802: LD_ADDR_VAR 0 1
32806: PUSH
32807: LD_VAR 0 2
32811: PUSH
32812: FOR_IN
32813: IFFALSE 32829
// begin SetLives ( i , 0 ) ;
32815: LD_VAR 0 1
32819: PPUSH
32820: LD_INT 0
32822: PPUSH
32823: CALL_OW 234
// end ;
32827: GO 32812
32829: POP
32830: POP
// end ;
32831: PPOPN 2
32833: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
32834: LD_EXP 67
32838: PUSH
32839: LD_EXP 70
32843: AND
32844: IFFALSE 32937
32846: GO 32848
32848: DISABLE
32849: LD_INT 0
32851: PPUSH
// begin enable ;
32852: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
32853: LD_ADDR_VAR 0 1
32857: PUSH
32858: LD_INT 22
32860: PUSH
32861: LD_OWVAR 2
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: LD_INT 25
32875: PUSH
32876: LD_INT 5
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 25
32885: PUSH
32886: LD_INT 9
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 25
32895: PUSH
32896: LD_INT 8
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PPUSH
32913: CALL_OW 69
32917: PUSH
32918: FOR_IN
32919: IFFALSE 32935
// begin SetClass ( i , 1 ) ;
32921: LD_VAR 0 1
32925: PPUSH
32926: LD_INT 1
32928: PPUSH
32929: CALL_OW 336
// end ;
32933: GO 32918
32935: POP
32936: POP
// end ;
32937: PPOPN 1
32939: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
32940: LD_EXP 67
32944: PUSH
32945: LD_EXP 71
32949: AND
32950: PUSH
32951: LD_OWVAR 65
32955: PUSH
32956: LD_INT 7
32958: LESS
32959: AND
32960: IFFALSE 32974
32962: GO 32964
32964: DISABLE
// begin enable ;
32965: ENABLE
// game_speed := 7 ;
32966: LD_ADDR_OWVAR 65
32970: PUSH
32971: LD_INT 7
32973: ST_TO_ADDR
// end ;
32974: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
32975: LD_EXP 67
32979: PUSH
32980: LD_EXP 74
32984: AND
32985: IFFALSE 33187
32987: GO 32989
32989: DISABLE
32990: LD_INT 0
32992: PPUSH
32993: PPUSH
32994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32995: LD_ADDR_VAR 0 3
32999: PUSH
33000: LD_INT 81
33002: PUSH
33003: LD_OWVAR 2
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 21
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PPUSH
33026: CALL_OW 69
33030: ST_TO_ADDR
// if not tmp then
33031: LD_VAR 0 3
33035: NOT
33036: IFFALSE 33040
// exit ;
33038: GO 33187
// if tmp > 5 then
33040: LD_VAR 0 3
33044: PUSH
33045: LD_INT 5
33047: GREATER
33048: IFFALSE 33060
// k := 5 else
33050: LD_ADDR_VAR 0 2
33054: PUSH
33055: LD_INT 5
33057: ST_TO_ADDR
33058: GO 33070
// k := tmp ;
33060: LD_ADDR_VAR 0 2
33064: PUSH
33065: LD_VAR 0 3
33069: ST_TO_ADDR
// for i := 1 to k do
33070: LD_ADDR_VAR 0 1
33074: PUSH
33075: DOUBLE
33076: LD_INT 1
33078: DEC
33079: ST_TO_ADDR
33080: LD_VAR 0 2
33084: PUSH
33085: FOR_TO
33086: IFFALSE 33185
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
33088: LD_VAR 0 3
33092: PUSH
33093: LD_VAR 0 1
33097: ARRAY
33098: PPUSH
33099: LD_VAR 0 1
33103: PUSH
33104: LD_INT 4
33106: MOD
33107: PUSH
33108: LD_INT 1
33110: PLUS
33111: PPUSH
33112: CALL_OW 259
33116: PUSH
33117: LD_INT 10
33119: LESS
33120: IFFALSE 33183
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
33122: LD_VAR 0 3
33126: PUSH
33127: LD_VAR 0 1
33131: ARRAY
33132: PPUSH
33133: LD_VAR 0 1
33137: PUSH
33138: LD_INT 4
33140: MOD
33141: PUSH
33142: LD_INT 1
33144: PLUS
33145: PPUSH
33146: LD_VAR 0 3
33150: PUSH
33151: LD_VAR 0 1
33155: ARRAY
33156: PPUSH
33157: LD_VAR 0 1
33161: PUSH
33162: LD_INT 4
33164: MOD
33165: PUSH
33166: LD_INT 1
33168: PLUS
33169: PPUSH
33170: CALL_OW 259
33174: PUSH
33175: LD_INT 1
33177: PLUS
33178: PPUSH
33179: CALL_OW 237
33183: GO 33085
33185: POP
33186: POP
// end ;
33187: PPOPN 3
33189: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
33190: LD_EXP 67
33194: PUSH
33195: LD_EXP 75
33199: AND
33200: IFFALSE 33220
33202: GO 33204
33204: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
33205: LD_INT 4
33207: PPUSH
33208: LD_OWVAR 2
33212: PPUSH
33213: LD_INT 0
33215: PPUSH
33216: CALL_OW 324
33220: END
// every 0 0$1 trigger StreamModeActive and sShovel do
33221: LD_EXP 67
33225: PUSH
33226: LD_EXP 104
33230: AND
33231: IFFALSE 33251
33233: GO 33235
33235: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
33236: LD_INT 19
33238: PPUSH
33239: LD_OWVAR 2
33243: PPUSH
33244: LD_INT 0
33246: PPUSH
33247: CALL_OW 324
33251: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
33252: LD_EXP 67
33256: PUSH
33257: LD_EXP 76
33261: AND
33262: IFFALSE 33364
33264: GO 33266
33266: DISABLE
33267: LD_INT 0
33269: PPUSH
33270: PPUSH
// begin enable ;
33271: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
33272: LD_ADDR_VAR 0 2
33276: PUSH
33277: LD_INT 22
33279: PUSH
33280: LD_OWVAR 2
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: LD_INT 34
33294: PUSH
33295: LD_INT 11
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 34
33304: PUSH
33305: LD_INT 30
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: LIST
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PPUSH
33321: CALL_OW 69
33325: ST_TO_ADDR
// if not tmp then
33326: LD_VAR 0 2
33330: NOT
33331: IFFALSE 33335
// exit ;
33333: GO 33364
// for i in tmp do
33335: LD_ADDR_VAR 0 1
33339: PUSH
33340: LD_VAR 0 2
33344: PUSH
33345: FOR_IN
33346: IFFALSE 33362
// begin SetLives ( i , 0 ) ;
33348: LD_VAR 0 1
33352: PPUSH
33353: LD_INT 0
33355: PPUSH
33356: CALL_OW 234
// end ;
33360: GO 33345
33362: POP
33363: POP
// end ;
33364: PPOPN 2
33366: END
// every 0 0$1 trigger StreamModeActive and sBunker do
33367: LD_EXP 67
33371: PUSH
33372: LD_EXP 77
33376: AND
33377: IFFALSE 33397
33379: GO 33381
33381: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
33382: LD_INT 32
33384: PPUSH
33385: LD_OWVAR 2
33389: PPUSH
33390: LD_INT 0
33392: PPUSH
33393: CALL_OW 324
33397: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
33398: LD_EXP 67
33402: PUSH
33403: LD_EXP 78
33407: AND
33408: IFFALSE 33589
33410: GO 33412
33412: DISABLE
33413: LD_INT 0
33415: PPUSH
33416: PPUSH
33417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
33418: LD_ADDR_VAR 0 2
33422: PUSH
33423: LD_INT 22
33425: PUSH
33426: LD_OWVAR 2
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 33
33437: PUSH
33438: LD_INT 3
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PPUSH
33449: CALL_OW 69
33453: ST_TO_ADDR
// if not tmp then
33454: LD_VAR 0 2
33458: NOT
33459: IFFALSE 33463
// exit ;
33461: GO 33589
// side := 0 ;
33463: LD_ADDR_VAR 0 3
33467: PUSH
33468: LD_INT 0
33470: ST_TO_ADDR
// for i := 1 to 8 do
33471: LD_ADDR_VAR 0 1
33475: PUSH
33476: DOUBLE
33477: LD_INT 1
33479: DEC
33480: ST_TO_ADDR
33481: LD_INT 8
33483: PUSH
33484: FOR_TO
33485: IFFALSE 33533
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
33487: LD_OWVAR 2
33491: PUSH
33492: LD_VAR 0 1
33496: NONEQUAL
33497: PUSH
33498: LD_OWVAR 2
33502: PPUSH
33503: LD_VAR 0 1
33507: PPUSH
33508: CALL_OW 81
33512: PUSH
33513: LD_INT 2
33515: EQUAL
33516: AND
33517: IFFALSE 33531
// begin side := i ;
33519: LD_ADDR_VAR 0 3
33523: PUSH
33524: LD_VAR 0 1
33528: ST_TO_ADDR
// break ;
33529: GO 33533
// end ;
33531: GO 33484
33533: POP
33534: POP
// if not side then
33535: LD_VAR 0 3
33539: NOT
33540: IFFALSE 33544
// exit ;
33542: GO 33589
// for i := 1 to tmp do
33544: LD_ADDR_VAR 0 1
33548: PUSH
33549: DOUBLE
33550: LD_INT 1
33552: DEC
33553: ST_TO_ADDR
33554: LD_VAR 0 2
33558: PUSH
33559: FOR_TO
33560: IFFALSE 33587
// if Prob ( 60 ) then
33562: LD_INT 60
33564: PPUSH
33565: CALL_OW 13
33569: IFFALSE 33585
// SetSide ( i , side ) ;
33571: LD_VAR 0 1
33575: PPUSH
33576: LD_VAR 0 3
33580: PPUSH
33581: CALL_OW 235
33585: GO 33559
33587: POP
33588: POP
// end ;
33589: PPOPN 3
33591: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
33592: LD_EXP 67
33596: PUSH
33597: LD_EXP 80
33601: AND
33602: IFFALSE 33721
33604: GO 33606
33606: DISABLE
33607: LD_INT 0
33609: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33610: LD_ADDR_VAR 0 1
33614: PUSH
33615: LD_INT 22
33617: PUSH
33618: LD_OWVAR 2
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 21
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 3
33639: PUSH
33640: LD_INT 23
33642: PUSH
33643: LD_INT 0
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: PPUSH
33659: CALL_OW 69
33663: PUSH
33664: FOR_IN
33665: IFFALSE 33719
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
33667: LD_VAR 0 1
33671: PPUSH
33672: CALL_OW 257
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: LD_INT 2
33682: PUSH
33683: LD_INT 3
33685: PUSH
33686: LD_INT 4
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: IN
33695: IFFALSE 33717
// SetClass ( un , rand ( 1 , 4 ) ) ;
33697: LD_VAR 0 1
33701: PPUSH
33702: LD_INT 1
33704: PPUSH
33705: LD_INT 4
33707: PPUSH
33708: CALL_OW 12
33712: PPUSH
33713: CALL_OW 336
33717: GO 33664
33719: POP
33720: POP
// end ;
33721: PPOPN 1
33723: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
33724: LD_EXP 67
33728: PUSH
33729: LD_EXP 79
33733: AND
33734: IFFALSE 33813
33736: GO 33738
33738: DISABLE
33739: LD_INT 0
33741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33742: LD_ADDR_VAR 0 1
33746: PUSH
33747: LD_INT 22
33749: PUSH
33750: LD_OWVAR 2
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 21
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PPUSH
33773: CALL_OW 69
33777: ST_TO_ADDR
// if not tmp then
33778: LD_VAR 0 1
33782: NOT
33783: IFFALSE 33787
// exit ;
33785: GO 33813
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
33787: LD_VAR 0 1
33791: PUSH
33792: LD_INT 1
33794: PPUSH
33795: LD_VAR 0 1
33799: PPUSH
33800: CALL_OW 12
33804: ARRAY
33805: PPUSH
33806: LD_INT 100
33808: PPUSH
33809: CALL_OW 234
// end ;
33813: PPOPN 1
33815: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
33816: LD_EXP 67
33820: PUSH
33821: LD_EXP 81
33825: AND
33826: IFFALSE 33924
33828: GO 33830
33830: DISABLE
33831: LD_INT 0
33833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33834: LD_ADDR_VAR 0 1
33838: PUSH
33839: LD_INT 22
33841: PUSH
33842: LD_OWVAR 2
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 21
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PPUSH
33865: CALL_OW 69
33869: ST_TO_ADDR
// if not tmp then
33870: LD_VAR 0 1
33874: NOT
33875: IFFALSE 33879
// exit ;
33877: GO 33924
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
33879: LD_VAR 0 1
33883: PUSH
33884: LD_INT 1
33886: PPUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 12
33896: ARRAY
33897: PPUSH
33898: LD_INT 1
33900: PPUSH
33901: LD_INT 4
33903: PPUSH
33904: CALL_OW 12
33908: PPUSH
33909: LD_INT 3000
33911: PPUSH
33912: LD_INT 9000
33914: PPUSH
33915: CALL_OW 12
33919: PPUSH
33920: CALL_OW 492
// end ;
33924: PPOPN 1
33926: END
// every 0 0$1 trigger StreamModeActive and sDepot do
33927: LD_EXP 67
33931: PUSH
33932: LD_EXP 82
33936: AND
33937: IFFALSE 33957
33939: GO 33941
33941: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
33942: LD_INT 1
33944: PPUSH
33945: LD_OWVAR 2
33949: PPUSH
33950: LD_INT 0
33952: PPUSH
33953: CALL_OW 324
33957: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
33958: LD_EXP 67
33962: PUSH
33963: LD_EXP 83
33967: AND
33968: IFFALSE 34051
33970: GO 33972
33972: DISABLE
33973: LD_INT 0
33975: PPUSH
33976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33977: LD_ADDR_VAR 0 2
33981: PUSH
33982: LD_INT 22
33984: PUSH
33985: LD_OWVAR 2
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 21
33996: PUSH
33997: LD_INT 3
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PPUSH
34008: CALL_OW 69
34012: ST_TO_ADDR
// if not tmp then
34013: LD_VAR 0 2
34017: NOT
34018: IFFALSE 34022
// exit ;
34020: GO 34051
// for i in tmp do
34022: LD_ADDR_VAR 0 1
34026: PUSH
34027: LD_VAR 0 2
34031: PUSH
34032: FOR_IN
34033: IFFALSE 34049
// SetBLevel ( i , 10 ) ;
34035: LD_VAR 0 1
34039: PPUSH
34040: LD_INT 10
34042: PPUSH
34043: CALL_OW 241
34047: GO 34032
34049: POP
34050: POP
// end ;
34051: PPOPN 2
34053: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
34054: LD_EXP 67
34058: PUSH
34059: LD_EXP 84
34063: AND
34064: IFFALSE 34175
34066: GO 34068
34068: DISABLE
34069: LD_INT 0
34071: PPUSH
34072: PPUSH
34073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34074: LD_ADDR_VAR 0 3
34078: PUSH
34079: LD_INT 22
34081: PUSH
34082: LD_OWVAR 2
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 25
34093: PUSH
34094: LD_INT 1
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PPUSH
34105: CALL_OW 69
34109: ST_TO_ADDR
// if not tmp then
34110: LD_VAR 0 3
34114: NOT
34115: IFFALSE 34119
// exit ;
34117: GO 34175
// un := tmp [ rand ( 1 , tmp ) ] ;
34119: LD_ADDR_VAR 0 2
34123: PUSH
34124: LD_VAR 0 3
34128: PUSH
34129: LD_INT 1
34131: PPUSH
34132: LD_VAR 0 3
34136: PPUSH
34137: CALL_OW 12
34141: ARRAY
34142: ST_TO_ADDR
// if Crawls ( un ) then
34143: LD_VAR 0 2
34147: PPUSH
34148: CALL_OW 318
34152: IFFALSE 34163
// ComWalk ( un ) ;
34154: LD_VAR 0 2
34158: PPUSH
34159: CALL_OW 138
// SetClass ( un , class_sniper ) ;
34163: LD_VAR 0 2
34167: PPUSH
34168: LD_INT 5
34170: PPUSH
34171: CALL_OW 336
// end ;
34175: PPOPN 3
34177: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
34178: LD_EXP 67
34182: PUSH
34183: LD_EXP 85
34187: AND
34188: PUSH
34189: LD_OWVAR 67
34193: PUSH
34194: LD_INT 4
34196: LESS
34197: AND
34198: IFFALSE 34217
34200: GO 34202
34202: DISABLE
// begin Difficulty := Difficulty + 1 ;
34203: LD_ADDR_OWVAR 67
34207: PUSH
34208: LD_OWVAR 67
34212: PUSH
34213: LD_INT 1
34215: PLUS
34216: ST_TO_ADDR
// end ;
34217: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
34218: LD_EXP 67
34222: PUSH
34223: LD_EXP 86
34227: AND
34228: IFFALSE 34331
34230: GO 34232
34232: DISABLE
34233: LD_INT 0
34235: PPUSH
// begin for i := 1 to 5 do
34236: LD_ADDR_VAR 0 1
34240: PUSH
34241: DOUBLE
34242: LD_INT 1
34244: DEC
34245: ST_TO_ADDR
34246: LD_INT 5
34248: PUSH
34249: FOR_TO
34250: IFFALSE 34329
// begin uc_nation := nation_nature ;
34252: LD_ADDR_OWVAR 21
34256: PUSH
34257: LD_INT 0
34259: ST_TO_ADDR
// uc_side := 0 ;
34260: LD_ADDR_OWVAR 20
34264: PUSH
34265: LD_INT 0
34267: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34268: LD_ADDR_OWVAR 29
34272: PUSH
34273: LD_INT 12
34275: PUSH
34276: LD_INT 12
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: ST_TO_ADDR
// hc_agressivity := 20 ;
34283: LD_ADDR_OWVAR 35
34287: PUSH
34288: LD_INT 20
34290: ST_TO_ADDR
// hc_class := class_tiger ;
34291: LD_ADDR_OWVAR 28
34295: PUSH
34296: LD_INT 14
34298: ST_TO_ADDR
// hc_gallery :=  ;
34299: LD_ADDR_OWVAR 33
34303: PUSH
34304: LD_STRING 
34306: ST_TO_ADDR
// hc_name :=  ;
34307: LD_ADDR_OWVAR 26
34311: PUSH
34312: LD_STRING 
34314: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
34315: CALL_OW 44
34319: PPUSH
34320: LD_INT 0
34322: PPUSH
34323: CALL_OW 51
// end ;
34327: GO 34249
34329: POP
34330: POP
// end ;
34331: PPOPN 1
34333: END
// every 0 0$1 trigger StreamModeActive and sBomb do
34334: LD_EXP 67
34338: PUSH
34339: LD_EXP 87
34343: AND
34344: IFFALSE 34353
34346: GO 34348
34348: DISABLE
// StreamSibBomb ;
34349: CALL 34354 0 0
34353: END
// export function StreamSibBomb ; var i , x , y ; begin
34354: LD_INT 0
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
// result := false ;
34360: LD_ADDR_VAR 0 1
34364: PUSH
34365: LD_INT 0
34367: ST_TO_ADDR
// for i := 1 to 16 do
34368: LD_ADDR_VAR 0 2
34372: PUSH
34373: DOUBLE
34374: LD_INT 1
34376: DEC
34377: ST_TO_ADDR
34378: LD_INT 16
34380: PUSH
34381: FOR_TO
34382: IFFALSE 34581
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34384: LD_ADDR_VAR 0 3
34388: PUSH
34389: LD_INT 10
34391: PUSH
34392: LD_INT 20
34394: PUSH
34395: LD_INT 30
34397: PUSH
34398: LD_INT 40
34400: PUSH
34401: LD_INT 50
34403: PUSH
34404: LD_INT 60
34406: PUSH
34407: LD_INT 70
34409: PUSH
34410: LD_INT 80
34412: PUSH
34413: LD_INT 90
34415: PUSH
34416: LD_INT 100
34418: PUSH
34419: LD_INT 110
34421: PUSH
34422: LD_INT 120
34424: PUSH
34425: LD_INT 130
34427: PUSH
34428: LD_INT 140
34430: PUSH
34431: LD_INT 150
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: PPUSH
34454: LD_INT 15
34456: PPUSH
34457: CALL_OW 12
34461: ARRAY
34462: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34463: LD_ADDR_VAR 0 4
34467: PUSH
34468: LD_INT 10
34470: PUSH
34471: LD_INT 20
34473: PUSH
34474: LD_INT 30
34476: PUSH
34477: LD_INT 40
34479: PUSH
34480: LD_INT 50
34482: PUSH
34483: LD_INT 60
34485: PUSH
34486: LD_INT 70
34488: PUSH
34489: LD_INT 80
34491: PUSH
34492: LD_INT 90
34494: PUSH
34495: LD_INT 100
34497: PUSH
34498: LD_INT 110
34500: PUSH
34501: LD_INT 120
34503: PUSH
34504: LD_INT 130
34506: PUSH
34507: LD_INT 140
34509: PUSH
34510: LD_INT 150
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: PPUSH
34533: LD_INT 15
34535: PPUSH
34536: CALL_OW 12
34540: ARRAY
34541: ST_TO_ADDR
// if ValidHex ( x , y ) then
34542: LD_VAR 0 3
34546: PPUSH
34547: LD_VAR 0 4
34551: PPUSH
34552: CALL_OW 488
34556: IFFALSE 34579
// begin result := [ x , y ] ;
34558: LD_ADDR_VAR 0 1
34562: PUSH
34563: LD_VAR 0 3
34567: PUSH
34568: LD_VAR 0 4
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: ST_TO_ADDR
// break ;
34577: GO 34581
// end ; end ;
34579: GO 34381
34581: POP
34582: POP
// if result then
34583: LD_VAR 0 1
34587: IFFALSE 34647
// begin ToLua ( playSibBomb() ) ;
34589: LD_STRING playSibBomb()
34591: PPUSH
34592: CALL_OW 559
// wait ( 0 0$14 ) ;
34596: LD_INT 490
34598: PPUSH
34599: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34603: LD_VAR 0 1
34607: PUSH
34608: LD_INT 1
34610: ARRAY
34611: PPUSH
34612: LD_VAR 0 1
34616: PUSH
34617: LD_INT 2
34619: ARRAY
34620: PPUSH
34621: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
34625: LD_VAR 0 1
34629: PUSH
34630: LD_INT 1
34632: ARRAY
34633: PPUSH
34634: LD_VAR 0 1
34638: PUSH
34639: LD_INT 2
34641: ARRAY
34642: PPUSH
34643: CALL_OW 429
// end ; end ;
34647: LD_VAR 0 1
34651: RET
// every 0 0$1 trigger StreamModeActive and sReset do
34652: LD_EXP 67
34656: PUSH
34657: LD_EXP 89
34661: AND
34662: IFFALSE 34674
34664: GO 34666
34666: DISABLE
// YouLost (  ) ;
34667: LD_STRING 
34669: PPUSH
34670: CALL_OW 104
34674: END
// every 0 0$1 trigger StreamModeActive and sFog do
34675: LD_EXP 67
34679: PUSH
34680: LD_EXP 88
34684: AND
34685: IFFALSE 34699
34687: GO 34689
34689: DISABLE
// FogOff ( your_side ) ;
34690: LD_OWVAR 2
34694: PPUSH
34695: CALL_OW 344
34699: END
// every 0 0$1 trigger StreamModeActive and sSun do
34700: LD_EXP 67
34704: PUSH
34705: LD_EXP 90
34709: AND
34710: IFFALSE 34738
34712: GO 34714
34714: DISABLE
// begin solar_recharge_percent := 0 ;
34715: LD_ADDR_OWVAR 79
34719: PUSH
34720: LD_INT 0
34722: ST_TO_ADDR
// wait ( 5 5$00 ) ;
34723: LD_INT 10500
34725: PPUSH
34726: CALL_OW 67
// solar_recharge_percent := 100 ;
34730: LD_ADDR_OWVAR 79
34734: PUSH
34735: LD_INT 100
34737: ST_TO_ADDR
// end ;
34738: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
34739: LD_EXP 67
34743: PUSH
34744: LD_EXP 91
34748: AND
34749: IFFALSE 34988
34751: GO 34753
34753: DISABLE
34754: LD_INT 0
34756: PPUSH
34757: PPUSH
34758: PPUSH
// begin tmp := [ ] ;
34759: LD_ADDR_VAR 0 3
34763: PUSH
34764: EMPTY
34765: ST_TO_ADDR
// for i := 1 to 6 do
34766: LD_ADDR_VAR 0 1
34770: PUSH
34771: DOUBLE
34772: LD_INT 1
34774: DEC
34775: ST_TO_ADDR
34776: LD_INT 6
34778: PUSH
34779: FOR_TO
34780: IFFALSE 34885
// begin uc_nation := nation_nature ;
34782: LD_ADDR_OWVAR 21
34786: PUSH
34787: LD_INT 0
34789: ST_TO_ADDR
// uc_side := 0 ;
34790: LD_ADDR_OWVAR 20
34794: PUSH
34795: LD_INT 0
34797: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34798: LD_ADDR_OWVAR 29
34802: PUSH
34803: LD_INT 12
34805: PUSH
34806: LD_INT 12
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: ST_TO_ADDR
// hc_agressivity := 20 ;
34813: LD_ADDR_OWVAR 35
34817: PUSH
34818: LD_INT 20
34820: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
34821: LD_ADDR_OWVAR 28
34825: PUSH
34826: LD_INT 17
34828: ST_TO_ADDR
// hc_gallery :=  ;
34829: LD_ADDR_OWVAR 33
34833: PUSH
34834: LD_STRING 
34836: ST_TO_ADDR
// hc_name :=  ;
34837: LD_ADDR_OWVAR 26
34841: PUSH
34842: LD_STRING 
34844: ST_TO_ADDR
// un := CreateHuman ;
34845: LD_ADDR_VAR 0 2
34849: PUSH
34850: CALL_OW 44
34854: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
34855: LD_VAR 0 2
34859: PPUSH
34860: LD_INT 1
34862: PPUSH
34863: CALL_OW 51
// tmp := tmp ^ un ;
34867: LD_ADDR_VAR 0 3
34871: PUSH
34872: LD_VAR 0 3
34876: PUSH
34877: LD_VAR 0 2
34881: ADD
34882: ST_TO_ADDR
// end ;
34883: GO 34779
34885: POP
34886: POP
// repeat wait ( 0 0$1 ) ;
34887: LD_INT 35
34889: PPUSH
34890: CALL_OW 67
// for un in tmp do
34894: LD_ADDR_VAR 0 2
34898: PUSH
34899: LD_VAR 0 3
34903: PUSH
34904: FOR_IN
34905: IFFALSE 34979
// begin if IsDead ( un ) then
34907: LD_VAR 0 2
34911: PPUSH
34912: CALL_OW 301
34916: IFFALSE 34936
// begin tmp := tmp diff un ;
34918: LD_ADDR_VAR 0 3
34922: PUSH
34923: LD_VAR 0 3
34927: PUSH
34928: LD_VAR 0 2
34932: DIFF
34933: ST_TO_ADDR
// continue ;
34934: GO 34904
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
34936: LD_VAR 0 2
34940: PPUSH
34941: LD_INT 3
34943: PUSH
34944: LD_INT 22
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PPUSH
34958: CALL_OW 69
34962: PPUSH
34963: LD_VAR 0 2
34967: PPUSH
34968: CALL_OW 74
34972: PPUSH
34973: CALL_OW 115
// end ;
34977: GO 34904
34979: POP
34980: POP
// until not tmp ;
34981: LD_VAR 0 3
34985: NOT
34986: IFFALSE 34887
// end ;
34988: PPOPN 3
34990: END
// every 0 0$1 trigger StreamModeActive and sTroll do
34991: LD_EXP 67
34995: PUSH
34996: LD_EXP 92
35000: AND
35001: IFFALSE 35055
35003: GO 35005
35005: DISABLE
// begin ToLua ( displayTroll(); ) ;
35006: LD_STRING displayTroll();
35008: PPUSH
35009: CALL_OW 559
// wait ( 3 3$00 ) ;
35013: LD_INT 6300
35015: PPUSH
35016: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35020: LD_STRING hideTroll();
35022: PPUSH
35023: CALL_OW 559
// wait ( 1 1$00 ) ;
35027: LD_INT 2100
35029: PPUSH
35030: CALL_OW 67
// ToLua ( displayTroll(); ) ;
35034: LD_STRING displayTroll();
35036: PPUSH
35037: CALL_OW 559
// wait ( 1 1$00 ) ;
35041: LD_INT 2100
35043: PPUSH
35044: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35048: LD_STRING hideTroll();
35050: PPUSH
35051: CALL_OW 559
// end ;
35055: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
35056: LD_EXP 67
35060: PUSH
35061: LD_EXP 93
35065: AND
35066: IFFALSE 35129
35068: GO 35070
35070: DISABLE
35071: LD_INT 0
35073: PPUSH
// begin p := 0 ;
35074: LD_ADDR_VAR 0 1
35078: PUSH
35079: LD_INT 0
35081: ST_TO_ADDR
// repeat game_speed := 1 ;
35082: LD_ADDR_OWVAR 65
35086: PUSH
35087: LD_INT 1
35089: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35090: LD_INT 35
35092: PPUSH
35093: CALL_OW 67
// p := p + 1 ;
35097: LD_ADDR_VAR 0 1
35101: PUSH
35102: LD_VAR 0 1
35106: PUSH
35107: LD_INT 1
35109: PLUS
35110: ST_TO_ADDR
// until p >= 60 ;
35111: LD_VAR 0 1
35115: PUSH
35116: LD_INT 60
35118: GREATEREQUAL
35119: IFFALSE 35082
// game_speed := 4 ;
35121: LD_ADDR_OWVAR 65
35125: PUSH
35126: LD_INT 4
35128: ST_TO_ADDR
// end ;
35129: PPOPN 1
35131: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
35132: LD_EXP 67
35136: PUSH
35137: LD_EXP 94
35141: AND
35142: IFFALSE 35288
35144: GO 35146
35146: DISABLE
35147: LD_INT 0
35149: PPUSH
35150: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35151: LD_ADDR_VAR 0 1
35155: PUSH
35156: LD_INT 22
35158: PUSH
35159: LD_OWVAR 2
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 2
35170: PUSH
35171: LD_INT 30
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 30
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: LIST
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PPUSH
35200: CALL_OW 69
35204: ST_TO_ADDR
// if not depot then
35205: LD_VAR 0 1
35209: NOT
35210: IFFALSE 35214
// exit ;
35212: GO 35288
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
35214: LD_ADDR_VAR 0 2
35218: PUSH
35219: LD_VAR 0 1
35223: PUSH
35224: LD_INT 1
35226: PPUSH
35227: LD_VAR 0 1
35231: PPUSH
35232: CALL_OW 12
35236: ARRAY
35237: PPUSH
35238: CALL_OW 274
35242: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
35243: LD_VAR 0 2
35247: PPUSH
35248: LD_INT 1
35250: PPUSH
35251: LD_INT 0
35253: PPUSH
35254: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
35258: LD_VAR 0 2
35262: PPUSH
35263: LD_INT 2
35265: PPUSH
35266: LD_INT 0
35268: PPUSH
35269: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
35273: LD_VAR 0 2
35277: PPUSH
35278: LD_INT 3
35280: PPUSH
35281: LD_INT 0
35283: PPUSH
35284: CALL_OW 277
// end ;
35288: PPOPN 2
35290: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
35291: LD_EXP 67
35295: PUSH
35296: LD_EXP 95
35300: AND
35301: IFFALSE 35398
35303: GO 35305
35305: DISABLE
35306: LD_INT 0
35308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35309: LD_ADDR_VAR 0 1
35313: PUSH
35314: LD_INT 22
35316: PUSH
35317: LD_OWVAR 2
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 21
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 3
35338: PUSH
35339: LD_INT 23
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: PPUSH
35358: CALL_OW 69
35362: ST_TO_ADDR
// if not tmp then
35363: LD_VAR 0 1
35367: NOT
35368: IFFALSE 35372
// exit ;
35370: GO 35398
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
35372: LD_VAR 0 1
35376: PUSH
35377: LD_INT 1
35379: PPUSH
35380: LD_VAR 0 1
35384: PPUSH
35385: CALL_OW 12
35389: ARRAY
35390: PPUSH
35391: LD_INT 200
35393: PPUSH
35394: CALL_OW 234
// end ;
35398: PPOPN 1
35400: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
35401: LD_EXP 67
35405: PUSH
35406: LD_EXP 96
35410: AND
35411: IFFALSE 35490
35413: GO 35415
35415: DISABLE
35416: LD_INT 0
35418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
35419: LD_ADDR_VAR 0 1
35423: PUSH
35424: LD_INT 22
35426: PUSH
35427: LD_OWVAR 2
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 21
35438: PUSH
35439: LD_INT 2
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PPUSH
35450: CALL_OW 69
35454: ST_TO_ADDR
// if not tmp then
35455: LD_VAR 0 1
35459: NOT
35460: IFFALSE 35464
// exit ;
35462: GO 35490
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
35464: LD_VAR 0 1
35468: PUSH
35469: LD_INT 1
35471: PPUSH
35472: LD_VAR 0 1
35476: PPUSH
35477: CALL_OW 12
35481: ARRAY
35482: PPUSH
35483: LD_INT 60
35485: PPUSH
35486: CALL_OW 234
// end ;
35490: PPOPN 1
35492: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
35493: LD_EXP 67
35497: PUSH
35498: LD_EXP 97
35502: AND
35503: IFFALSE 35602
35505: GO 35507
35507: DISABLE
35508: LD_INT 0
35510: PPUSH
35511: PPUSH
// begin enable ;
35512: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
35513: LD_ADDR_VAR 0 1
35517: PUSH
35518: LD_INT 22
35520: PUSH
35521: LD_OWVAR 2
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 61
35532: PUSH
35533: EMPTY
35534: LIST
35535: PUSH
35536: LD_INT 33
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: LIST
35550: PPUSH
35551: CALL_OW 69
35555: ST_TO_ADDR
// if not tmp then
35556: LD_VAR 0 1
35560: NOT
35561: IFFALSE 35565
// exit ;
35563: GO 35602
// for i in tmp do
35565: LD_ADDR_VAR 0 2
35569: PUSH
35570: LD_VAR 0 1
35574: PUSH
35575: FOR_IN
35576: IFFALSE 35600
// if IsControledBy ( i ) then
35578: LD_VAR 0 2
35582: PPUSH
35583: CALL_OW 312
35587: IFFALSE 35598
// ComUnlink ( i ) ;
35589: LD_VAR 0 2
35593: PPUSH
35594: CALL_OW 136
35598: GO 35575
35600: POP
35601: POP
// end ;
35602: PPOPN 2
35604: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35605: LD_EXP 67
35609: PUSH
35610: LD_EXP 98
35614: AND
35615: IFFALSE 35755
35617: GO 35619
35619: DISABLE
35620: LD_INT 0
35622: PPUSH
35623: PPUSH
// begin ToLua ( displayPowell(); ) ;
35624: LD_STRING displayPowell();
35626: PPUSH
35627: CALL_OW 559
// uc_side := 0 ;
35631: LD_ADDR_OWVAR 20
35635: PUSH
35636: LD_INT 0
35638: ST_TO_ADDR
// uc_nation := 2 ;
35639: LD_ADDR_OWVAR 21
35643: PUSH
35644: LD_INT 2
35646: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
35647: LD_ADDR_OWVAR 37
35651: PUSH
35652: LD_INT 14
35654: ST_TO_ADDR
// vc_engine := engine_siberite ;
35655: LD_ADDR_OWVAR 39
35659: PUSH
35660: LD_INT 3
35662: ST_TO_ADDR
// vc_control := control_apeman ;
35663: LD_ADDR_OWVAR 38
35667: PUSH
35668: LD_INT 5
35670: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
35671: LD_ADDR_OWVAR 40
35675: PUSH
35676: LD_INT 29
35678: ST_TO_ADDR
// un := CreateVehicle ;
35679: LD_ADDR_VAR 0 2
35683: PUSH
35684: CALL_OW 45
35688: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35689: LD_VAR 0 2
35693: PPUSH
35694: LD_INT 1
35696: PPUSH
35697: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
35701: LD_INT 35
35703: PPUSH
35704: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
35708: LD_VAR 0 2
35712: PPUSH
35713: LD_INT 22
35715: PUSH
35716: LD_OWVAR 2
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PPUSH
35725: CALL_OW 69
35729: PPUSH
35730: LD_VAR 0 2
35734: PPUSH
35735: CALL_OW 74
35739: PPUSH
35740: CALL_OW 115
// until IsDead ( un ) ;
35744: LD_VAR 0 2
35748: PPUSH
35749: CALL_OW 301
35753: IFFALSE 35701
// end ;
35755: PPOPN 2
35757: END
// every 0 0$1 trigger StreamModeActive and sStu do
35758: LD_EXP 67
35762: PUSH
35763: LD_EXP 106
35767: AND
35768: IFFALSE 35784
35770: GO 35772
35772: DISABLE
// begin ToLua ( displayStucuk(); ) ;
35773: LD_STRING displayStucuk();
35775: PPUSH
35776: CALL_OW 559
// ResetFog ;
35780: CALL_OW 335
// end ;
35784: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
35785: LD_EXP 67
35789: PUSH
35790: LD_EXP 99
35794: AND
35795: IFFALSE 35936
35797: GO 35799
35799: DISABLE
35800: LD_INT 0
35802: PPUSH
35803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35804: LD_ADDR_VAR 0 2
35808: PUSH
35809: LD_INT 22
35811: PUSH
35812: LD_OWVAR 2
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 21
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PPUSH
35835: CALL_OW 69
35839: ST_TO_ADDR
// if not tmp then
35840: LD_VAR 0 2
35844: NOT
35845: IFFALSE 35849
// exit ;
35847: GO 35936
// un := tmp [ rand ( 1 , tmp ) ] ;
35849: LD_ADDR_VAR 0 1
35853: PUSH
35854: LD_VAR 0 2
35858: PUSH
35859: LD_INT 1
35861: PPUSH
35862: LD_VAR 0 2
35866: PPUSH
35867: CALL_OW 12
35871: ARRAY
35872: ST_TO_ADDR
// SetSide ( un , 0 ) ;
35873: LD_VAR 0 1
35877: PPUSH
35878: LD_INT 0
35880: PPUSH
35881: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
35885: LD_VAR 0 1
35889: PPUSH
35890: LD_OWVAR 3
35894: PUSH
35895: LD_VAR 0 1
35899: DIFF
35900: PPUSH
35901: LD_VAR 0 1
35905: PPUSH
35906: CALL_OW 74
35910: PPUSH
35911: CALL_OW 115
// wait ( 0 0$20 ) ;
35915: LD_INT 700
35917: PPUSH
35918: CALL_OW 67
// SetSide ( un , your_side ) ;
35922: LD_VAR 0 1
35926: PPUSH
35927: LD_OWVAR 2
35931: PPUSH
35932: CALL_OW 235
// end ;
35936: PPOPN 2
35938: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
35939: LD_EXP 67
35943: PUSH
35944: LD_EXP 100
35948: AND
35949: IFFALSE 36055
35951: GO 35953
35953: DISABLE
35954: LD_INT 0
35956: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35957: LD_ADDR_VAR 0 1
35961: PUSH
35962: LD_INT 22
35964: PUSH
35965: LD_OWVAR 2
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: LD_INT 30
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 30
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: LIST
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PPUSH
36006: CALL_OW 69
36010: ST_TO_ADDR
// if not depot then
36011: LD_VAR 0 1
36015: NOT
36016: IFFALSE 36020
// exit ;
36018: GO 36055
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
36020: LD_VAR 0 1
36024: PUSH
36025: LD_INT 1
36027: ARRAY
36028: PPUSH
36029: CALL_OW 250
36033: PPUSH
36034: LD_VAR 0 1
36038: PUSH
36039: LD_INT 1
36041: ARRAY
36042: PPUSH
36043: CALL_OW 251
36047: PPUSH
36048: LD_INT 70
36050: PPUSH
36051: CALL_OW 495
// end ;
36055: PPOPN 1
36057: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
36058: LD_EXP 67
36062: PUSH
36063: LD_EXP 101
36067: AND
36068: IFFALSE 36279
36070: GO 36072
36072: DISABLE
36073: LD_INT 0
36075: PPUSH
36076: PPUSH
36077: PPUSH
36078: PPUSH
36079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36080: LD_ADDR_VAR 0 5
36084: PUSH
36085: LD_INT 22
36087: PUSH
36088: LD_OWVAR 2
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 21
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PPUSH
36111: CALL_OW 69
36115: ST_TO_ADDR
// if not tmp then
36116: LD_VAR 0 5
36120: NOT
36121: IFFALSE 36125
// exit ;
36123: GO 36279
// for i in tmp do
36125: LD_ADDR_VAR 0 1
36129: PUSH
36130: LD_VAR 0 5
36134: PUSH
36135: FOR_IN
36136: IFFALSE 36277
// begin d := rand ( 0 , 5 ) ;
36138: LD_ADDR_VAR 0 4
36142: PUSH
36143: LD_INT 0
36145: PPUSH
36146: LD_INT 5
36148: PPUSH
36149: CALL_OW 12
36153: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
36154: LD_ADDR_VAR 0 2
36158: PUSH
36159: LD_VAR 0 1
36163: PPUSH
36164: CALL_OW 250
36168: PPUSH
36169: LD_VAR 0 4
36173: PPUSH
36174: LD_INT 3
36176: PPUSH
36177: LD_INT 12
36179: PPUSH
36180: CALL_OW 12
36184: PPUSH
36185: CALL_OW 272
36189: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
36190: LD_ADDR_VAR 0 3
36194: PUSH
36195: LD_VAR 0 1
36199: PPUSH
36200: CALL_OW 251
36204: PPUSH
36205: LD_VAR 0 4
36209: PPUSH
36210: LD_INT 3
36212: PPUSH
36213: LD_INT 12
36215: PPUSH
36216: CALL_OW 12
36220: PPUSH
36221: CALL_OW 273
36225: ST_TO_ADDR
// if ValidHex ( x , y ) then
36226: LD_VAR 0 2
36230: PPUSH
36231: LD_VAR 0 3
36235: PPUSH
36236: CALL_OW 488
36240: IFFALSE 36275
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
36242: LD_VAR 0 1
36246: PPUSH
36247: LD_VAR 0 2
36251: PPUSH
36252: LD_VAR 0 3
36256: PPUSH
36257: LD_INT 3
36259: PPUSH
36260: LD_INT 6
36262: PPUSH
36263: CALL_OW 12
36267: PPUSH
36268: LD_INT 1
36270: PPUSH
36271: CALL_OW 483
// end ;
36275: GO 36135
36277: POP
36278: POP
// end ;
36279: PPOPN 5
36281: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
36282: LD_EXP 67
36286: PUSH
36287: LD_EXP 102
36291: AND
36292: IFFALSE 36386
36294: GO 36296
36296: DISABLE
36297: LD_INT 0
36299: PPUSH
36300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
36301: LD_ADDR_VAR 0 2
36305: PUSH
36306: LD_INT 22
36308: PUSH
36309: LD_OWVAR 2
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 32
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 21
36330: PUSH
36331: LD_INT 2
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: LIST
36342: PPUSH
36343: CALL_OW 69
36347: ST_TO_ADDR
// if not tmp then
36348: LD_VAR 0 2
36352: NOT
36353: IFFALSE 36357
// exit ;
36355: GO 36386
// for i in tmp do
36357: LD_ADDR_VAR 0 1
36361: PUSH
36362: LD_VAR 0 2
36366: PUSH
36367: FOR_IN
36368: IFFALSE 36384
// SetFuel ( i , 0 ) ;
36370: LD_VAR 0 1
36374: PPUSH
36375: LD_INT 0
36377: PPUSH
36378: CALL_OW 240
36382: GO 36367
36384: POP
36385: POP
// end ;
36386: PPOPN 2
36388: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
36389: LD_EXP 67
36393: PUSH
36394: LD_EXP 103
36398: AND
36399: IFFALSE 36465
36401: GO 36403
36403: DISABLE
36404: LD_INT 0
36406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
36407: LD_ADDR_VAR 0 1
36411: PUSH
36412: LD_INT 22
36414: PUSH
36415: LD_OWVAR 2
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 30
36426: PUSH
36427: LD_INT 29
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PPUSH
36438: CALL_OW 69
36442: ST_TO_ADDR
// if not tmp then
36443: LD_VAR 0 1
36447: NOT
36448: IFFALSE 36452
// exit ;
36450: GO 36465
// DestroyUnit ( tmp [ 1 ] ) ;
36452: LD_VAR 0 1
36456: PUSH
36457: LD_INT 1
36459: ARRAY
36460: PPUSH
36461: CALL_OW 65
// end ;
36465: PPOPN 1
36467: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
36468: LD_EXP 67
36472: PUSH
36473: LD_EXP 105
36477: AND
36478: IFFALSE 36607
36480: GO 36482
36482: DISABLE
36483: LD_INT 0
36485: PPUSH
// begin uc_side := 0 ;
36486: LD_ADDR_OWVAR 20
36490: PUSH
36491: LD_INT 0
36493: ST_TO_ADDR
// uc_nation := nation_arabian ;
36494: LD_ADDR_OWVAR 21
36498: PUSH
36499: LD_INT 2
36501: ST_TO_ADDR
// hc_gallery :=  ;
36502: LD_ADDR_OWVAR 33
36506: PUSH
36507: LD_STRING 
36509: ST_TO_ADDR
// hc_name :=  ;
36510: LD_ADDR_OWVAR 26
36514: PUSH
36515: LD_STRING 
36517: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
36518: LD_INT 1
36520: PPUSH
36521: LD_INT 11
36523: PPUSH
36524: LD_INT 10
36526: PPUSH
36527: CALL_OW 380
// un := CreateHuman ;
36531: LD_ADDR_VAR 0 1
36535: PUSH
36536: CALL_OW 44
36540: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36541: LD_VAR 0 1
36545: PPUSH
36546: LD_INT 1
36548: PPUSH
36549: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36553: LD_INT 35
36555: PPUSH
36556: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36560: LD_VAR 0 1
36564: PPUSH
36565: LD_INT 22
36567: PUSH
36568: LD_OWVAR 2
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PPUSH
36577: CALL_OW 69
36581: PPUSH
36582: LD_VAR 0 1
36586: PPUSH
36587: CALL_OW 74
36591: PPUSH
36592: CALL_OW 115
// until IsDead ( un ) ;
36596: LD_VAR 0 1
36600: PPUSH
36601: CALL_OW 301
36605: IFFALSE 36553
// end ;
36607: PPOPN 1
36609: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36610: LD_EXP 67
36614: PUSH
36615: LD_EXP 107
36619: AND
36620: IFFALSE 36632
36622: GO 36624
36624: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
36625: LD_STRING earthquake(getX(game), 0, 32)
36627: PPUSH
36628: CALL_OW 559
36632: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
36633: LD_EXP 67
36637: PUSH
36638: LD_EXP 108
36642: AND
36643: IFFALSE 36734
36645: GO 36647
36647: DISABLE
36648: LD_INT 0
36650: PPUSH
// begin enable ;
36651: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
36652: LD_ADDR_VAR 0 1
36656: PUSH
36657: LD_INT 22
36659: PUSH
36660: LD_OWVAR 2
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 21
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 33
36681: PUSH
36682: LD_INT 3
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: PPUSH
36694: CALL_OW 69
36698: ST_TO_ADDR
// if not tmp then
36699: LD_VAR 0 1
36703: NOT
36704: IFFALSE 36708
// exit ;
36706: GO 36734
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
36708: LD_VAR 0 1
36712: PUSH
36713: LD_INT 1
36715: PPUSH
36716: LD_VAR 0 1
36720: PPUSH
36721: CALL_OW 12
36725: ARRAY
36726: PPUSH
36727: LD_INT 1
36729: PPUSH
36730: CALL_OW 234
// end ;
36734: PPOPN 1
36736: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
36737: LD_EXP 67
36741: PUSH
36742: LD_EXP 109
36746: AND
36747: IFFALSE 36888
36749: GO 36751
36751: DISABLE
36752: LD_INT 0
36754: PPUSH
36755: PPUSH
36756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36757: LD_ADDR_VAR 0 3
36761: PUSH
36762: LD_INT 22
36764: PUSH
36765: LD_OWVAR 2
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 25
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PPUSH
36788: CALL_OW 69
36792: ST_TO_ADDR
// if not tmp then
36793: LD_VAR 0 3
36797: NOT
36798: IFFALSE 36802
// exit ;
36800: GO 36888
// un := tmp [ rand ( 1 , tmp ) ] ;
36802: LD_ADDR_VAR 0 2
36806: PUSH
36807: LD_VAR 0 3
36811: PUSH
36812: LD_INT 1
36814: PPUSH
36815: LD_VAR 0 3
36819: PPUSH
36820: CALL_OW 12
36824: ARRAY
36825: ST_TO_ADDR
// if Crawls ( un ) then
36826: LD_VAR 0 2
36830: PPUSH
36831: CALL_OW 318
36835: IFFALSE 36846
// ComWalk ( un ) ;
36837: LD_VAR 0 2
36841: PPUSH
36842: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
36846: LD_VAR 0 2
36850: PPUSH
36851: LD_INT 9
36853: PPUSH
36854: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
36858: LD_INT 28
36860: PPUSH
36861: LD_OWVAR 2
36865: PPUSH
36866: LD_INT 2
36868: PPUSH
36869: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
36873: LD_INT 29
36875: PPUSH
36876: LD_OWVAR 2
36880: PPUSH
36881: LD_INT 2
36883: PPUSH
36884: CALL_OW 322
// end ;
36888: PPOPN 3
36890: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
36891: LD_EXP 67
36895: PUSH
36896: LD_EXP 110
36900: AND
36901: IFFALSE 37012
36903: GO 36905
36905: DISABLE
36906: LD_INT 0
36908: PPUSH
36909: PPUSH
36910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36911: LD_ADDR_VAR 0 3
36915: PUSH
36916: LD_INT 22
36918: PUSH
36919: LD_OWVAR 2
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 25
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PPUSH
36942: CALL_OW 69
36946: ST_TO_ADDR
// if not tmp then
36947: LD_VAR 0 3
36951: NOT
36952: IFFALSE 36956
// exit ;
36954: GO 37012
// un := tmp [ rand ( 1 , tmp ) ] ;
36956: LD_ADDR_VAR 0 2
36960: PUSH
36961: LD_VAR 0 3
36965: PUSH
36966: LD_INT 1
36968: PPUSH
36969: LD_VAR 0 3
36973: PPUSH
36974: CALL_OW 12
36978: ARRAY
36979: ST_TO_ADDR
// if Crawls ( un ) then
36980: LD_VAR 0 2
36984: PPUSH
36985: CALL_OW 318
36989: IFFALSE 37000
// ComWalk ( un ) ;
36991: LD_VAR 0 2
36995: PPUSH
36996: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37000: LD_VAR 0 2
37004: PPUSH
37005: LD_INT 8
37007: PPUSH
37008: CALL_OW 336
// end ;
37012: PPOPN 3
37014: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
37015: LD_EXP 67
37019: PUSH
37020: LD_EXP 111
37024: AND
37025: IFFALSE 37169
37027: GO 37029
37029: DISABLE
37030: LD_INT 0
37032: PPUSH
37033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
37034: LD_ADDR_VAR 0 2
37038: PUSH
37039: LD_INT 22
37041: PUSH
37042: LD_OWVAR 2
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 21
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 2
37063: PUSH
37064: LD_INT 34
37066: PUSH
37067: LD_INT 12
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 34
37076: PUSH
37077: LD_INT 51
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 34
37086: PUSH
37087: LD_INT 32
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: LIST
37104: PPUSH
37105: CALL_OW 69
37109: ST_TO_ADDR
// if not tmp then
37110: LD_VAR 0 2
37114: NOT
37115: IFFALSE 37119
// exit ;
37117: GO 37169
// for i in tmp do
37119: LD_ADDR_VAR 0 1
37123: PUSH
37124: LD_VAR 0 2
37128: PUSH
37129: FOR_IN
37130: IFFALSE 37167
// if GetCargo ( i , mat_artifact ) = 0 then
37132: LD_VAR 0 1
37136: PPUSH
37137: LD_INT 4
37139: PPUSH
37140: CALL_OW 289
37144: PUSH
37145: LD_INT 0
37147: EQUAL
37148: IFFALSE 37165
// SetCargo ( i , mat_siberit , 100 ) ;
37150: LD_VAR 0 1
37154: PPUSH
37155: LD_INT 3
37157: PPUSH
37158: LD_INT 100
37160: PPUSH
37161: CALL_OW 290
37165: GO 37129
37167: POP
37168: POP
// end ;
37169: PPOPN 2
37171: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
37172: LD_EXP 67
37176: PUSH
37177: LD_EXP 112
37181: AND
37182: IFFALSE 37365
37184: GO 37186
37186: DISABLE
37187: LD_INT 0
37189: PPUSH
37190: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
37191: LD_ADDR_VAR 0 2
37195: PUSH
37196: LD_INT 22
37198: PUSH
37199: LD_OWVAR 2
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PPUSH
37208: CALL_OW 69
37212: ST_TO_ADDR
// if not tmp then
37213: LD_VAR 0 2
37217: NOT
37218: IFFALSE 37222
// exit ;
37220: GO 37365
// for i := 1 to 2 do
37222: LD_ADDR_VAR 0 1
37226: PUSH
37227: DOUBLE
37228: LD_INT 1
37230: DEC
37231: ST_TO_ADDR
37232: LD_INT 2
37234: PUSH
37235: FOR_TO
37236: IFFALSE 37363
// begin uc_side := your_side ;
37238: LD_ADDR_OWVAR 20
37242: PUSH
37243: LD_OWVAR 2
37247: ST_TO_ADDR
// uc_nation := nation_american ;
37248: LD_ADDR_OWVAR 21
37252: PUSH
37253: LD_INT 1
37255: ST_TO_ADDR
// vc_chassis := us_morphling ;
37256: LD_ADDR_OWVAR 37
37260: PUSH
37261: LD_INT 5
37263: ST_TO_ADDR
// vc_engine := engine_siberite ;
37264: LD_ADDR_OWVAR 39
37268: PUSH
37269: LD_INT 3
37271: ST_TO_ADDR
// vc_control := control_computer ;
37272: LD_ADDR_OWVAR 38
37276: PUSH
37277: LD_INT 3
37279: ST_TO_ADDR
// vc_weapon := us_double_laser ;
37280: LD_ADDR_OWVAR 40
37284: PUSH
37285: LD_INT 10
37287: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
37288: LD_VAR 0 2
37292: PUSH
37293: LD_INT 1
37295: ARRAY
37296: PPUSH
37297: CALL_OW 310
37301: NOT
37302: IFFALSE 37349
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
37304: CALL_OW 45
37308: PPUSH
37309: LD_VAR 0 2
37313: PUSH
37314: LD_INT 1
37316: ARRAY
37317: PPUSH
37318: CALL_OW 250
37322: PPUSH
37323: LD_VAR 0 2
37327: PUSH
37328: LD_INT 1
37330: ARRAY
37331: PPUSH
37332: CALL_OW 251
37336: PPUSH
37337: LD_INT 12
37339: PPUSH
37340: LD_INT 1
37342: PPUSH
37343: CALL_OW 50
37347: GO 37361
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
37349: CALL_OW 45
37353: PPUSH
37354: LD_INT 1
37356: PPUSH
37357: CALL_OW 51
// end ;
37361: GO 37235
37363: POP
37364: POP
// end ;
37365: PPOPN 2
37367: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
37368: LD_EXP 67
37372: PUSH
37373: LD_EXP 113
37377: AND
37378: IFFALSE 37600
37380: GO 37382
37382: DISABLE
37383: LD_INT 0
37385: PPUSH
37386: PPUSH
37387: PPUSH
37388: PPUSH
37389: PPUSH
37390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37391: LD_ADDR_VAR 0 6
37395: PUSH
37396: LD_INT 22
37398: PUSH
37399: LD_OWVAR 2
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 21
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 3
37420: PUSH
37421: LD_INT 23
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: PPUSH
37440: CALL_OW 69
37444: ST_TO_ADDR
// if not tmp then
37445: LD_VAR 0 6
37449: NOT
37450: IFFALSE 37454
// exit ;
37452: GO 37600
// s1 := rand ( 1 , 4 ) ;
37454: LD_ADDR_VAR 0 2
37458: PUSH
37459: LD_INT 1
37461: PPUSH
37462: LD_INT 4
37464: PPUSH
37465: CALL_OW 12
37469: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
37470: LD_ADDR_VAR 0 4
37474: PUSH
37475: LD_VAR 0 6
37479: PUSH
37480: LD_INT 1
37482: ARRAY
37483: PPUSH
37484: LD_VAR 0 2
37488: PPUSH
37489: CALL_OW 259
37493: ST_TO_ADDR
// if s1 = 1 then
37494: LD_VAR 0 2
37498: PUSH
37499: LD_INT 1
37501: EQUAL
37502: IFFALSE 37522
// s2 := rand ( 2 , 4 ) else
37504: LD_ADDR_VAR 0 3
37508: PUSH
37509: LD_INT 2
37511: PPUSH
37512: LD_INT 4
37514: PPUSH
37515: CALL_OW 12
37519: ST_TO_ADDR
37520: GO 37530
// s2 := 1 ;
37522: LD_ADDR_VAR 0 3
37526: PUSH
37527: LD_INT 1
37529: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
37530: LD_ADDR_VAR 0 5
37534: PUSH
37535: LD_VAR 0 6
37539: PUSH
37540: LD_INT 1
37542: ARRAY
37543: PPUSH
37544: LD_VAR 0 3
37548: PPUSH
37549: CALL_OW 259
37553: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
37554: LD_VAR 0 6
37558: PUSH
37559: LD_INT 1
37561: ARRAY
37562: PPUSH
37563: LD_VAR 0 2
37567: PPUSH
37568: LD_VAR 0 5
37572: PPUSH
37573: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
37577: LD_VAR 0 6
37581: PUSH
37582: LD_INT 1
37584: ARRAY
37585: PPUSH
37586: LD_VAR 0 3
37590: PPUSH
37591: LD_VAR 0 4
37595: PPUSH
37596: CALL_OW 237
// end ;
37600: PPOPN 6
37602: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37603: LD_EXP 67
37607: PUSH
37608: LD_EXP 114
37612: AND
37613: IFFALSE 37692
37615: GO 37617
37617: DISABLE
37618: LD_INT 0
37620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
37621: LD_ADDR_VAR 0 1
37625: PUSH
37626: LD_INT 22
37628: PUSH
37629: LD_OWVAR 2
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 30
37640: PUSH
37641: LD_INT 3
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PPUSH
37652: CALL_OW 69
37656: ST_TO_ADDR
// if not tmp then
37657: LD_VAR 0 1
37661: NOT
37662: IFFALSE 37666
// exit ;
37664: GO 37692
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37666: LD_VAR 0 1
37670: PUSH
37671: LD_INT 1
37673: PPUSH
37674: LD_VAR 0 1
37678: PPUSH
37679: CALL_OW 12
37683: ARRAY
37684: PPUSH
37685: LD_INT 1
37687: PPUSH
37688: CALL_OW 234
// end ;
37692: PPOPN 1
37694: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
37695: LD_EXP 67
37699: PUSH
37700: LD_EXP 115
37704: AND
37705: IFFALSE 37817
37707: GO 37709
37709: DISABLE
37710: LD_INT 0
37712: PPUSH
37713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
37714: LD_ADDR_VAR 0 2
37718: PUSH
37719: LD_INT 22
37721: PUSH
37722: LD_OWVAR 2
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: LD_INT 30
37736: PUSH
37737: LD_INT 27
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 30
37746: PUSH
37747: LD_INT 26
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 30
37756: PUSH
37757: LD_INT 28
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PPUSH
37774: CALL_OW 69
37778: ST_TO_ADDR
// if not tmp then
37779: LD_VAR 0 2
37783: NOT
37784: IFFALSE 37788
// exit ;
37786: GO 37817
// for i in tmp do
37788: LD_ADDR_VAR 0 1
37792: PUSH
37793: LD_VAR 0 2
37797: PUSH
37798: FOR_IN
37799: IFFALSE 37815
// SetLives ( i , 1 ) ;
37801: LD_VAR 0 1
37805: PPUSH
37806: LD_INT 1
37808: PPUSH
37809: CALL_OW 234
37813: GO 37798
37815: POP
37816: POP
// end ;
37817: PPOPN 2
37819: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
37820: LD_EXP 67
37824: PUSH
37825: LD_EXP 116
37829: AND
37830: IFFALSE 38117
37832: GO 37834
37834: DISABLE
37835: LD_INT 0
37837: PPUSH
37838: PPUSH
37839: PPUSH
// begin i := rand ( 1 , 7 ) ;
37840: LD_ADDR_VAR 0 1
37844: PUSH
37845: LD_INT 1
37847: PPUSH
37848: LD_INT 7
37850: PPUSH
37851: CALL_OW 12
37855: ST_TO_ADDR
// case i of 1 :
37856: LD_VAR 0 1
37860: PUSH
37861: LD_INT 1
37863: DOUBLE
37864: EQUAL
37865: IFTRUE 37869
37867: GO 37879
37869: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
37870: LD_STRING earthquake(getX(game), 0, 32)
37872: PPUSH
37873: CALL_OW 559
37877: GO 38117
37879: LD_INT 2
37881: DOUBLE
37882: EQUAL
37883: IFTRUE 37887
37885: GO 37901
37887: POP
// begin ToLua ( displayStucuk(); ) ;
37888: LD_STRING displayStucuk();
37890: PPUSH
37891: CALL_OW 559
// ResetFog ;
37895: CALL_OW 335
// end ; 3 :
37899: GO 38117
37901: LD_INT 3
37903: DOUBLE
37904: EQUAL
37905: IFTRUE 37909
37907: GO 38013
37909: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37910: LD_ADDR_VAR 0 2
37914: PUSH
37915: LD_INT 22
37917: PUSH
37918: LD_OWVAR 2
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 25
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PPUSH
37941: CALL_OW 69
37945: ST_TO_ADDR
// if not tmp then
37946: LD_VAR 0 2
37950: NOT
37951: IFFALSE 37955
// exit ;
37953: GO 38117
// un := tmp [ rand ( 1 , tmp ) ] ;
37955: LD_ADDR_VAR 0 3
37959: PUSH
37960: LD_VAR 0 2
37964: PUSH
37965: LD_INT 1
37967: PPUSH
37968: LD_VAR 0 2
37972: PPUSH
37973: CALL_OW 12
37977: ARRAY
37978: ST_TO_ADDR
// if Crawls ( un ) then
37979: LD_VAR 0 3
37983: PPUSH
37984: CALL_OW 318
37988: IFFALSE 37999
// ComWalk ( un ) ;
37990: LD_VAR 0 3
37994: PPUSH
37995: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37999: LD_VAR 0 3
38003: PPUSH
38004: LD_INT 8
38006: PPUSH
38007: CALL_OW 336
// end ; 4 :
38011: GO 38117
38013: LD_INT 4
38015: DOUBLE
38016: EQUAL
38017: IFTRUE 38021
38019: GO 38095
38021: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38022: LD_ADDR_VAR 0 2
38026: PUSH
38027: LD_INT 22
38029: PUSH
38030: LD_OWVAR 2
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 30
38041: PUSH
38042: LD_INT 29
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PPUSH
38053: CALL_OW 69
38057: ST_TO_ADDR
// if not tmp then
38058: LD_VAR 0 2
38062: NOT
38063: IFFALSE 38067
// exit ;
38065: GO 38117
// CenterNowOnUnits ( tmp [ 1 ] ) ;
38067: LD_VAR 0 2
38071: PUSH
38072: LD_INT 1
38074: ARRAY
38075: PPUSH
38076: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
38080: LD_VAR 0 2
38084: PUSH
38085: LD_INT 1
38087: ARRAY
38088: PPUSH
38089: CALL_OW 65
// end ; 5 .. 7 :
38093: GO 38117
38095: LD_INT 5
38097: DOUBLE
38098: GREATEREQUAL
38099: IFFALSE 38107
38101: LD_INT 7
38103: DOUBLE
38104: LESSEQUAL
38105: IFTRUE 38109
38107: GO 38116
38109: POP
// StreamSibBomb ; end ;
38110: CALL 34354 0 0
38114: GO 38117
38116: POP
// end ;
38117: PPOPN 3
38119: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
38120: LD_EXP 67
38124: PUSH
38125: LD_EXP 117
38129: AND
38130: IFFALSE 38286
38132: GO 38134
38134: DISABLE
38135: LD_INT 0
38137: PPUSH
38138: PPUSH
38139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
38140: LD_ADDR_VAR 0 2
38144: PUSH
38145: LD_INT 81
38147: PUSH
38148: LD_OWVAR 2
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: LD_INT 21
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 21
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PPUSH
38189: CALL_OW 69
38193: ST_TO_ADDR
// if not tmp then
38194: LD_VAR 0 2
38198: NOT
38199: IFFALSE 38203
// exit ;
38201: GO 38286
// p := 0 ;
38203: LD_ADDR_VAR 0 3
38207: PUSH
38208: LD_INT 0
38210: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38211: LD_INT 35
38213: PPUSH
38214: CALL_OW 67
// p := p + 1 ;
38218: LD_ADDR_VAR 0 3
38222: PUSH
38223: LD_VAR 0 3
38227: PUSH
38228: LD_INT 1
38230: PLUS
38231: ST_TO_ADDR
// for i in tmp do
38232: LD_ADDR_VAR 0 1
38236: PUSH
38237: LD_VAR 0 2
38241: PUSH
38242: FOR_IN
38243: IFFALSE 38274
// if GetLives ( i ) < 1000 then
38245: LD_VAR 0 1
38249: PPUSH
38250: CALL_OW 256
38254: PUSH
38255: LD_INT 1000
38257: LESS
38258: IFFALSE 38272
// SetLives ( i , 1000 ) ;
38260: LD_VAR 0 1
38264: PPUSH
38265: LD_INT 1000
38267: PPUSH
38268: CALL_OW 234
38272: GO 38242
38274: POP
38275: POP
// until p > 20 ;
38276: LD_VAR 0 3
38280: PUSH
38281: LD_INT 20
38283: GREATER
38284: IFFALSE 38211
// end ;
38286: PPOPN 3
38288: END
// every 0 0$1 trigger StreamModeActive and sTime do
38289: LD_EXP 67
38293: PUSH
38294: LD_EXP 118
38298: AND
38299: IFFALSE 38334
38301: GO 38303
38303: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
38304: LD_INT 28
38306: PPUSH
38307: LD_OWVAR 2
38311: PPUSH
38312: LD_INT 2
38314: PPUSH
38315: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
38319: LD_INT 30
38321: PPUSH
38322: LD_OWVAR 2
38326: PPUSH
38327: LD_INT 2
38329: PPUSH
38330: CALL_OW 322
// end ;
38334: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
38335: LD_EXP 67
38339: PUSH
38340: LD_EXP 119
38344: AND
38345: IFFALSE 38466
38347: GO 38349
38349: DISABLE
38350: LD_INT 0
38352: PPUSH
38353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38354: LD_ADDR_VAR 0 2
38358: PUSH
38359: LD_INT 22
38361: PUSH
38362: LD_OWVAR 2
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 21
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 3
38383: PUSH
38384: LD_INT 23
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: PPUSH
38403: CALL_OW 69
38407: ST_TO_ADDR
// if not tmp then
38408: LD_VAR 0 2
38412: NOT
38413: IFFALSE 38417
// exit ;
38415: GO 38466
// for i in tmp do
38417: LD_ADDR_VAR 0 1
38421: PUSH
38422: LD_VAR 0 2
38426: PUSH
38427: FOR_IN
38428: IFFALSE 38464
// begin if Crawls ( i ) then
38430: LD_VAR 0 1
38434: PPUSH
38435: CALL_OW 318
38439: IFFALSE 38450
// ComWalk ( i ) ;
38441: LD_VAR 0 1
38445: PPUSH
38446: CALL_OW 138
// SetClass ( i , 2 ) ;
38450: LD_VAR 0 1
38454: PPUSH
38455: LD_INT 2
38457: PPUSH
38458: CALL_OW 336
// end ;
38462: GO 38427
38464: POP
38465: POP
// end ;
38466: PPOPN 2
38468: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
38469: LD_EXP 67
38473: PUSH
38474: LD_EXP 120
38478: AND
38479: IFFALSE 38767
38481: GO 38483
38483: DISABLE
38484: LD_INT 0
38486: PPUSH
38487: PPUSH
38488: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
38489: LD_OWVAR 2
38493: PPUSH
38494: LD_INT 9
38496: PPUSH
38497: LD_INT 1
38499: PPUSH
38500: LD_INT 1
38502: PPUSH
38503: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
38507: LD_INT 9
38509: PPUSH
38510: LD_OWVAR 2
38514: PPUSH
38515: CALL_OW 343
// uc_side := 9 ;
38519: LD_ADDR_OWVAR 20
38523: PUSH
38524: LD_INT 9
38526: ST_TO_ADDR
// uc_nation := 2 ;
38527: LD_ADDR_OWVAR 21
38531: PUSH
38532: LD_INT 2
38534: ST_TO_ADDR
// hc_name := Dark Warrior ;
38535: LD_ADDR_OWVAR 26
38539: PUSH
38540: LD_STRING Dark Warrior
38542: ST_TO_ADDR
// hc_gallery :=  ;
38543: LD_ADDR_OWVAR 33
38547: PUSH
38548: LD_STRING 
38550: ST_TO_ADDR
// hc_noskilllimit := true ;
38551: LD_ADDR_OWVAR 76
38555: PUSH
38556: LD_INT 1
38558: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
38559: LD_ADDR_OWVAR 31
38563: PUSH
38564: LD_INT 30
38566: PUSH
38567: LD_INT 30
38569: PUSH
38570: LD_INT 30
38572: PUSH
38573: LD_INT 30
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: ST_TO_ADDR
// un := CreateHuman ;
38582: LD_ADDR_VAR 0 3
38586: PUSH
38587: CALL_OW 44
38591: ST_TO_ADDR
// hc_noskilllimit := false ;
38592: LD_ADDR_OWVAR 76
38596: PUSH
38597: LD_INT 0
38599: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38600: LD_VAR 0 3
38604: PPUSH
38605: LD_INT 1
38607: PPUSH
38608: CALL_OW 51
// ToLua ( playRanger() ) ;
38612: LD_STRING playRanger()
38614: PPUSH
38615: CALL_OW 559
// p := 0 ;
38619: LD_ADDR_VAR 0 2
38623: PUSH
38624: LD_INT 0
38626: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38627: LD_INT 35
38629: PPUSH
38630: CALL_OW 67
// p := p + 1 ;
38634: LD_ADDR_VAR 0 2
38638: PUSH
38639: LD_VAR 0 2
38643: PUSH
38644: LD_INT 1
38646: PLUS
38647: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
38648: LD_VAR 0 3
38652: PPUSH
38653: CALL_OW 256
38657: PUSH
38658: LD_INT 1000
38660: LESS
38661: IFFALSE 38675
// SetLives ( un , 1000 ) ;
38663: LD_VAR 0 3
38667: PPUSH
38668: LD_INT 1000
38670: PPUSH
38671: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
38675: LD_VAR 0 3
38679: PPUSH
38680: LD_INT 81
38682: PUSH
38683: LD_OWVAR 2
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 91
38694: PUSH
38695: LD_VAR 0 3
38699: PUSH
38700: LD_INT 30
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PPUSH
38712: CALL_OW 69
38716: PPUSH
38717: LD_VAR 0 3
38721: PPUSH
38722: CALL_OW 74
38726: PPUSH
38727: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
38731: LD_VAR 0 2
38735: PUSH
38736: LD_INT 80
38738: GREATER
38739: PUSH
38740: LD_VAR 0 3
38744: PPUSH
38745: CALL_OW 301
38749: OR
38750: IFFALSE 38627
// if un then
38752: LD_VAR 0 3
38756: IFFALSE 38767
// RemoveUnit ( un ) ;
38758: LD_VAR 0 3
38762: PPUSH
38763: CALL_OW 64
// end ;
38767: PPOPN 3
38769: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
38770: LD_EXP 121
38774: IFFALSE 38890
38776: GO 38778
38778: DISABLE
38779: LD_INT 0
38781: PPUSH
38782: PPUSH
38783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
38784: LD_ADDR_VAR 0 2
38788: PUSH
38789: LD_INT 81
38791: PUSH
38792: LD_OWVAR 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 21
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PPUSH
38815: CALL_OW 69
38819: ST_TO_ADDR
// ToLua ( playComputer() ) ;
38820: LD_STRING playComputer()
38822: PPUSH
38823: CALL_OW 559
// if not tmp then
38827: LD_VAR 0 2
38831: NOT
38832: IFFALSE 38836
// exit ;
38834: GO 38890
// for i in tmp do
38836: LD_ADDR_VAR 0 1
38840: PUSH
38841: LD_VAR 0 2
38845: PUSH
38846: FOR_IN
38847: IFFALSE 38888
// for j := 1 to 4 do
38849: LD_ADDR_VAR 0 3
38853: PUSH
38854: DOUBLE
38855: LD_INT 1
38857: DEC
38858: ST_TO_ADDR
38859: LD_INT 4
38861: PUSH
38862: FOR_TO
38863: IFFALSE 38884
// SetSkill ( i , j , 10 ) ;
38865: LD_VAR 0 1
38869: PPUSH
38870: LD_VAR 0 3
38874: PPUSH
38875: LD_INT 10
38877: PPUSH
38878: CALL_OW 237
38882: GO 38862
38884: POP
38885: POP
38886: GO 38846
38888: POP
38889: POP
// end ;
38890: PPOPN 3
38892: END
// every 0 0$1 trigger s30 do var i , tmp ;
38893: LD_EXP 122
38897: IFFALSE 38966
38899: GO 38901
38901: DISABLE
38902: LD_INT 0
38904: PPUSH
38905: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
38906: LD_ADDR_VAR 0 2
38910: PUSH
38911: LD_INT 22
38913: PUSH
38914: LD_OWVAR 2
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PPUSH
38923: CALL_OW 69
38927: ST_TO_ADDR
// if not tmp then
38928: LD_VAR 0 2
38932: NOT
38933: IFFALSE 38937
// exit ;
38935: GO 38966
// for i in tmp do
38937: LD_ADDR_VAR 0 1
38941: PUSH
38942: LD_VAR 0 2
38946: PUSH
38947: FOR_IN
38948: IFFALSE 38964
// SetLives ( i , 300 ) ;
38950: LD_VAR 0 1
38954: PPUSH
38955: LD_INT 300
38957: PPUSH
38958: CALL_OW 234
38962: GO 38947
38964: POP
38965: POP
// end ;
38966: PPOPN 2
38968: END
// every 0 0$1 trigger s60 do var i , tmp ;
38969: LD_EXP 123
38973: IFFALSE 39042
38975: GO 38977
38977: DISABLE
38978: LD_INT 0
38980: PPUSH
38981: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
38982: LD_ADDR_VAR 0 2
38986: PUSH
38987: LD_INT 22
38989: PUSH
38990: LD_OWVAR 2
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PPUSH
38999: CALL_OW 69
39003: ST_TO_ADDR
// if not tmp then
39004: LD_VAR 0 2
39008: NOT
39009: IFFALSE 39013
// exit ;
39011: GO 39042
// for i in tmp do
39013: LD_ADDR_VAR 0 1
39017: PUSH
39018: LD_VAR 0 2
39022: PUSH
39023: FOR_IN
39024: IFFALSE 39040
// SetLives ( i , 600 ) ;
39026: LD_VAR 0 1
39030: PPUSH
39031: LD_INT 600
39033: PPUSH
39034: CALL_OW 234
39038: GO 39023
39040: POP
39041: POP
// end ;
39042: PPOPN 2
39044: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
39045: LD_INT 0
39047: PPUSH
// case cmd of 301 :
39048: LD_VAR 0 1
39052: PUSH
39053: LD_INT 301
39055: DOUBLE
39056: EQUAL
39057: IFTRUE 39061
39059: GO 39093
39061: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
39062: LD_VAR 0 6
39066: PPUSH
39067: LD_VAR 0 7
39071: PPUSH
39072: LD_VAR 0 8
39076: PPUSH
39077: LD_VAR 0 4
39081: PPUSH
39082: LD_VAR 0 5
39086: PPUSH
39087: CALL 40294 0 5
39091: GO 39214
39093: LD_INT 302
39095: DOUBLE
39096: EQUAL
39097: IFTRUE 39101
39099: GO 39138
39101: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
39102: LD_VAR 0 6
39106: PPUSH
39107: LD_VAR 0 7
39111: PPUSH
39112: LD_VAR 0 8
39116: PPUSH
39117: LD_VAR 0 9
39121: PPUSH
39122: LD_VAR 0 4
39126: PPUSH
39127: LD_VAR 0 5
39131: PPUSH
39132: CALL 40385 0 6
39136: GO 39214
39138: LD_INT 303
39140: DOUBLE
39141: EQUAL
39142: IFTRUE 39146
39144: GO 39183
39146: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
39147: LD_VAR 0 6
39151: PPUSH
39152: LD_VAR 0 7
39156: PPUSH
39157: LD_VAR 0 8
39161: PPUSH
39162: LD_VAR 0 9
39166: PPUSH
39167: LD_VAR 0 4
39171: PPUSH
39172: LD_VAR 0 5
39176: PPUSH
39177: CALL 39219 0 6
39181: GO 39214
39183: LD_INT 304
39185: DOUBLE
39186: EQUAL
39187: IFTRUE 39191
39189: GO 39213
39191: POP
// hHackTeleport ( unit , x , y ) ; end ;
39192: LD_VAR 0 2
39196: PPUSH
39197: LD_VAR 0 4
39201: PPUSH
39202: LD_VAR 0 5
39206: PPUSH
39207: CALL 40978 0 3
39211: GO 39214
39213: POP
// end ;
39214: LD_VAR 0 12
39218: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
39219: LD_INT 0
39221: PPUSH
39222: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
39223: LD_VAR 0 1
39227: PUSH
39228: LD_INT 1
39230: LESS
39231: PUSH
39232: LD_VAR 0 1
39236: PUSH
39237: LD_INT 3
39239: GREATER
39240: OR
39241: PUSH
39242: LD_VAR 0 5
39246: PPUSH
39247: LD_VAR 0 6
39251: PPUSH
39252: CALL_OW 428
39256: OR
39257: IFFALSE 39261
// exit ;
39259: GO 39981
// uc_side := your_side ;
39261: LD_ADDR_OWVAR 20
39265: PUSH
39266: LD_OWVAR 2
39270: ST_TO_ADDR
// uc_nation := nation ;
39271: LD_ADDR_OWVAR 21
39275: PUSH
39276: LD_VAR 0 1
39280: ST_TO_ADDR
// bc_level = 1 ;
39281: LD_ADDR_OWVAR 43
39285: PUSH
39286: LD_INT 1
39288: ST_TO_ADDR
// case btype of 1 :
39289: LD_VAR 0 2
39293: PUSH
39294: LD_INT 1
39296: DOUBLE
39297: EQUAL
39298: IFTRUE 39302
39300: GO 39313
39302: POP
// bc_type := b_depot ; 2 :
39303: LD_ADDR_OWVAR 42
39307: PUSH
39308: LD_INT 0
39310: ST_TO_ADDR
39311: GO 39925
39313: LD_INT 2
39315: DOUBLE
39316: EQUAL
39317: IFTRUE 39321
39319: GO 39332
39321: POP
// bc_type := b_warehouse ; 3 :
39322: LD_ADDR_OWVAR 42
39326: PUSH
39327: LD_INT 1
39329: ST_TO_ADDR
39330: GO 39925
39332: LD_INT 3
39334: DOUBLE
39335: EQUAL
39336: IFTRUE 39340
39338: GO 39351
39340: POP
// bc_type := b_lab ; 4 .. 9 :
39341: LD_ADDR_OWVAR 42
39345: PUSH
39346: LD_INT 6
39348: ST_TO_ADDR
39349: GO 39925
39351: LD_INT 4
39353: DOUBLE
39354: GREATEREQUAL
39355: IFFALSE 39363
39357: LD_INT 9
39359: DOUBLE
39360: LESSEQUAL
39361: IFTRUE 39365
39363: GO 39417
39365: POP
// begin bc_type := b_lab_half ;
39366: LD_ADDR_OWVAR 42
39370: PUSH
39371: LD_INT 7
39373: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
39374: LD_ADDR_OWVAR 44
39378: PUSH
39379: LD_INT 10
39381: PUSH
39382: LD_INT 11
39384: PUSH
39385: LD_INT 12
39387: PUSH
39388: LD_INT 15
39390: PUSH
39391: LD_INT 14
39393: PUSH
39394: LD_INT 13
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: PUSH
39405: LD_VAR 0 2
39409: PUSH
39410: LD_INT 3
39412: MINUS
39413: ARRAY
39414: ST_TO_ADDR
// end ; 10 .. 13 :
39415: GO 39925
39417: LD_INT 10
39419: DOUBLE
39420: GREATEREQUAL
39421: IFFALSE 39429
39423: LD_INT 13
39425: DOUBLE
39426: LESSEQUAL
39427: IFTRUE 39431
39429: GO 39508
39431: POP
// begin bc_type := b_lab_full ;
39432: LD_ADDR_OWVAR 42
39436: PUSH
39437: LD_INT 8
39439: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
39440: LD_ADDR_OWVAR 44
39444: PUSH
39445: LD_INT 10
39447: PUSH
39448: LD_INT 12
39450: PUSH
39451: LD_INT 14
39453: PUSH
39454: LD_INT 13
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: PUSH
39463: LD_VAR 0 2
39467: PUSH
39468: LD_INT 9
39470: MINUS
39471: ARRAY
39472: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
39473: LD_ADDR_OWVAR 45
39477: PUSH
39478: LD_INT 11
39480: PUSH
39481: LD_INT 15
39483: PUSH
39484: LD_INT 12
39486: PUSH
39487: LD_INT 15
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: PUSH
39496: LD_VAR 0 2
39500: PUSH
39501: LD_INT 9
39503: MINUS
39504: ARRAY
39505: ST_TO_ADDR
// end ; 14 :
39506: GO 39925
39508: LD_INT 14
39510: DOUBLE
39511: EQUAL
39512: IFTRUE 39516
39514: GO 39527
39516: POP
// bc_type := b_workshop ; 15 :
39517: LD_ADDR_OWVAR 42
39521: PUSH
39522: LD_INT 2
39524: ST_TO_ADDR
39525: GO 39925
39527: LD_INT 15
39529: DOUBLE
39530: EQUAL
39531: IFTRUE 39535
39533: GO 39546
39535: POP
// bc_type := b_factory ; 16 :
39536: LD_ADDR_OWVAR 42
39540: PUSH
39541: LD_INT 3
39543: ST_TO_ADDR
39544: GO 39925
39546: LD_INT 16
39548: DOUBLE
39549: EQUAL
39550: IFTRUE 39554
39552: GO 39565
39554: POP
// bc_type := b_ext_gun ; 17 :
39555: LD_ADDR_OWVAR 42
39559: PUSH
39560: LD_INT 17
39562: ST_TO_ADDR
39563: GO 39925
39565: LD_INT 17
39567: DOUBLE
39568: EQUAL
39569: IFTRUE 39573
39571: GO 39601
39573: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
39574: LD_ADDR_OWVAR 42
39578: PUSH
39579: LD_INT 19
39581: PUSH
39582: LD_INT 23
39584: PUSH
39585: LD_INT 19
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: LIST
39592: PUSH
39593: LD_VAR 0 1
39597: ARRAY
39598: ST_TO_ADDR
39599: GO 39925
39601: LD_INT 18
39603: DOUBLE
39604: EQUAL
39605: IFTRUE 39609
39607: GO 39620
39609: POP
// bc_type := b_ext_radar ; 19 :
39610: LD_ADDR_OWVAR 42
39614: PUSH
39615: LD_INT 20
39617: ST_TO_ADDR
39618: GO 39925
39620: LD_INT 19
39622: DOUBLE
39623: EQUAL
39624: IFTRUE 39628
39626: GO 39639
39628: POP
// bc_type := b_ext_radio ; 20 :
39629: LD_ADDR_OWVAR 42
39633: PUSH
39634: LD_INT 22
39636: ST_TO_ADDR
39637: GO 39925
39639: LD_INT 20
39641: DOUBLE
39642: EQUAL
39643: IFTRUE 39647
39645: GO 39658
39647: POP
// bc_type := b_ext_siberium ; 21 :
39648: LD_ADDR_OWVAR 42
39652: PUSH
39653: LD_INT 21
39655: ST_TO_ADDR
39656: GO 39925
39658: LD_INT 21
39660: DOUBLE
39661: EQUAL
39662: IFTRUE 39666
39664: GO 39677
39666: POP
// bc_type := b_ext_computer ; 22 :
39667: LD_ADDR_OWVAR 42
39671: PUSH
39672: LD_INT 24
39674: ST_TO_ADDR
39675: GO 39925
39677: LD_INT 22
39679: DOUBLE
39680: EQUAL
39681: IFTRUE 39685
39683: GO 39696
39685: POP
// bc_type := b_ext_track ; 23 :
39686: LD_ADDR_OWVAR 42
39690: PUSH
39691: LD_INT 16
39693: ST_TO_ADDR
39694: GO 39925
39696: LD_INT 23
39698: DOUBLE
39699: EQUAL
39700: IFTRUE 39704
39702: GO 39715
39704: POP
// bc_type := b_ext_laser ; 24 :
39705: LD_ADDR_OWVAR 42
39709: PUSH
39710: LD_INT 25
39712: ST_TO_ADDR
39713: GO 39925
39715: LD_INT 24
39717: DOUBLE
39718: EQUAL
39719: IFTRUE 39723
39721: GO 39734
39723: POP
// bc_type := b_control_tower ; 25 :
39724: LD_ADDR_OWVAR 42
39728: PUSH
39729: LD_INT 36
39731: ST_TO_ADDR
39732: GO 39925
39734: LD_INT 25
39736: DOUBLE
39737: EQUAL
39738: IFTRUE 39742
39740: GO 39753
39742: POP
// bc_type := b_breastwork ; 26 :
39743: LD_ADDR_OWVAR 42
39747: PUSH
39748: LD_INT 31
39750: ST_TO_ADDR
39751: GO 39925
39753: LD_INT 26
39755: DOUBLE
39756: EQUAL
39757: IFTRUE 39761
39759: GO 39772
39761: POP
// bc_type := b_bunker ; 27 :
39762: LD_ADDR_OWVAR 42
39766: PUSH
39767: LD_INT 32
39769: ST_TO_ADDR
39770: GO 39925
39772: LD_INT 27
39774: DOUBLE
39775: EQUAL
39776: IFTRUE 39780
39778: GO 39791
39780: POP
// bc_type := b_turret ; 28 :
39781: LD_ADDR_OWVAR 42
39785: PUSH
39786: LD_INT 33
39788: ST_TO_ADDR
39789: GO 39925
39791: LD_INT 28
39793: DOUBLE
39794: EQUAL
39795: IFTRUE 39799
39797: GO 39810
39799: POP
// bc_type := b_armoury ; 29 :
39800: LD_ADDR_OWVAR 42
39804: PUSH
39805: LD_INT 4
39807: ST_TO_ADDR
39808: GO 39925
39810: LD_INT 29
39812: DOUBLE
39813: EQUAL
39814: IFTRUE 39818
39816: GO 39829
39818: POP
// bc_type := b_barracks ; 30 :
39819: LD_ADDR_OWVAR 42
39823: PUSH
39824: LD_INT 5
39826: ST_TO_ADDR
39827: GO 39925
39829: LD_INT 30
39831: DOUBLE
39832: EQUAL
39833: IFTRUE 39837
39835: GO 39848
39837: POP
// bc_type := b_solar_power ; 31 :
39838: LD_ADDR_OWVAR 42
39842: PUSH
39843: LD_INT 27
39845: ST_TO_ADDR
39846: GO 39925
39848: LD_INT 31
39850: DOUBLE
39851: EQUAL
39852: IFTRUE 39856
39854: GO 39867
39856: POP
// bc_type := b_oil_power ; 32 :
39857: LD_ADDR_OWVAR 42
39861: PUSH
39862: LD_INT 26
39864: ST_TO_ADDR
39865: GO 39925
39867: LD_INT 32
39869: DOUBLE
39870: EQUAL
39871: IFTRUE 39875
39873: GO 39886
39875: POP
// bc_type := b_siberite_power ; 33 :
39876: LD_ADDR_OWVAR 42
39880: PUSH
39881: LD_INT 28
39883: ST_TO_ADDR
39884: GO 39925
39886: LD_INT 33
39888: DOUBLE
39889: EQUAL
39890: IFTRUE 39894
39892: GO 39905
39894: POP
// bc_type := b_oil_mine ; 34 :
39895: LD_ADDR_OWVAR 42
39899: PUSH
39900: LD_INT 29
39902: ST_TO_ADDR
39903: GO 39925
39905: LD_INT 34
39907: DOUBLE
39908: EQUAL
39909: IFTRUE 39913
39911: GO 39924
39913: POP
// bc_type := b_siberite_mine ; end ;
39914: LD_ADDR_OWVAR 42
39918: PUSH
39919: LD_INT 30
39921: ST_TO_ADDR
39922: GO 39925
39924: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
39925: LD_ADDR_VAR 0 8
39929: PUSH
39930: LD_VAR 0 5
39934: PPUSH
39935: LD_VAR 0 6
39939: PPUSH
39940: LD_VAR 0 3
39944: PPUSH
39945: CALL_OW 47
39949: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
39950: LD_OWVAR 42
39954: PUSH
39955: LD_INT 32
39957: PUSH
39958: LD_INT 33
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: IN
39965: IFFALSE 39981
// PlaceWeaponTurret ( b , weapon ) ;
39967: LD_VAR 0 8
39971: PPUSH
39972: LD_VAR 0 4
39976: PPUSH
39977: CALL_OW 431
// end ;
39981: LD_VAR 0 7
39985: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
39986: LD_INT 0
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39992: LD_ADDR_VAR 0 4
39996: PUSH
39997: LD_INT 22
39999: PUSH
40000: LD_OWVAR 2
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: PUSH
40012: LD_INT 30
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 30
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PPUSH
40041: CALL_OW 69
40045: ST_TO_ADDR
// if not tmp then
40046: LD_VAR 0 4
40050: NOT
40051: IFFALSE 40055
// exit ;
40053: GO 40114
// for i in tmp do
40055: LD_ADDR_VAR 0 2
40059: PUSH
40060: LD_VAR 0 4
40064: PUSH
40065: FOR_IN
40066: IFFALSE 40112
// for j = 1 to 3 do
40068: LD_ADDR_VAR 0 3
40072: PUSH
40073: DOUBLE
40074: LD_INT 1
40076: DEC
40077: ST_TO_ADDR
40078: LD_INT 3
40080: PUSH
40081: FOR_TO
40082: IFFALSE 40108
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
40084: LD_VAR 0 2
40088: PPUSH
40089: CALL_OW 274
40093: PPUSH
40094: LD_VAR 0 3
40098: PPUSH
40099: LD_INT 99999
40101: PPUSH
40102: CALL_OW 277
40106: GO 40081
40108: POP
40109: POP
40110: GO 40065
40112: POP
40113: POP
// end ;
40114: LD_VAR 0 1
40118: RET
// export function hHackSetLevel10 ; var i , j ; begin
40119: LD_INT 0
40121: PPUSH
40122: PPUSH
40123: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40124: LD_ADDR_VAR 0 2
40128: PUSH
40129: LD_INT 21
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PPUSH
40139: CALL_OW 69
40143: PUSH
40144: FOR_IN
40145: IFFALSE 40197
// if IsSelected ( i ) then
40147: LD_VAR 0 2
40151: PPUSH
40152: CALL_OW 306
40156: IFFALSE 40195
// begin for j := 1 to 4 do
40158: LD_ADDR_VAR 0 3
40162: PUSH
40163: DOUBLE
40164: LD_INT 1
40166: DEC
40167: ST_TO_ADDR
40168: LD_INT 4
40170: PUSH
40171: FOR_TO
40172: IFFALSE 40193
// SetSkill ( i , j , 10 ) ;
40174: LD_VAR 0 2
40178: PPUSH
40179: LD_VAR 0 3
40183: PPUSH
40184: LD_INT 10
40186: PPUSH
40187: CALL_OW 237
40191: GO 40171
40193: POP
40194: POP
// end ;
40195: GO 40144
40197: POP
40198: POP
// end ;
40199: LD_VAR 0 1
40203: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
40204: LD_INT 0
40206: PPUSH
40207: PPUSH
40208: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
40209: LD_ADDR_VAR 0 2
40213: PUSH
40214: LD_INT 22
40216: PUSH
40217: LD_OWVAR 2
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 21
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PPUSH
40240: CALL_OW 69
40244: PUSH
40245: FOR_IN
40246: IFFALSE 40287
// begin for j := 1 to 4 do
40248: LD_ADDR_VAR 0 3
40252: PUSH
40253: DOUBLE
40254: LD_INT 1
40256: DEC
40257: ST_TO_ADDR
40258: LD_INT 4
40260: PUSH
40261: FOR_TO
40262: IFFALSE 40283
// SetSkill ( i , j , 10 ) ;
40264: LD_VAR 0 2
40268: PPUSH
40269: LD_VAR 0 3
40273: PPUSH
40274: LD_INT 10
40276: PPUSH
40277: CALL_OW 237
40281: GO 40261
40283: POP
40284: POP
// end ;
40285: GO 40245
40287: POP
40288: POP
// end ;
40289: LD_VAR 0 1
40293: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
40294: LD_INT 0
40296: PPUSH
// uc_side := your_side ;
40297: LD_ADDR_OWVAR 20
40301: PUSH
40302: LD_OWVAR 2
40306: ST_TO_ADDR
// uc_nation := nation ;
40307: LD_ADDR_OWVAR 21
40311: PUSH
40312: LD_VAR 0 1
40316: ST_TO_ADDR
// InitHc ;
40317: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
40321: LD_INT 0
40323: PPUSH
40324: LD_VAR 0 2
40328: PPUSH
40329: LD_VAR 0 3
40333: PPUSH
40334: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
40338: LD_VAR 0 4
40342: PPUSH
40343: LD_VAR 0 5
40347: PPUSH
40348: CALL_OW 428
40352: PUSH
40353: LD_INT 0
40355: EQUAL
40356: IFFALSE 40380
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
40358: CALL_OW 44
40362: PPUSH
40363: LD_VAR 0 4
40367: PPUSH
40368: LD_VAR 0 5
40372: PPUSH
40373: LD_INT 1
40375: PPUSH
40376: CALL_OW 48
// end ;
40380: LD_VAR 0 6
40384: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
40385: LD_INT 0
40387: PPUSH
40388: PPUSH
// uc_side := your_side ;
40389: LD_ADDR_OWVAR 20
40393: PUSH
40394: LD_OWVAR 2
40398: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
40399: LD_VAR 0 1
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 3
40412: PUSH
40413: LD_INT 4
40415: PUSH
40416: LD_INT 5
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: IN
40426: IFFALSE 40438
// uc_nation := nation_american else
40428: LD_ADDR_OWVAR 21
40432: PUSH
40433: LD_INT 1
40435: ST_TO_ADDR
40436: GO 40481
// if chassis in [ 11 , 12 , 13 , 14 ] then
40438: LD_VAR 0 1
40442: PUSH
40443: LD_INT 11
40445: PUSH
40446: LD_INT 12
40448: PUSH
40449: LD_INT 13
40451: PUSH
40452: LD_INT 14
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: IN
40461: IFFALSE 40473
// uc_nation := nation_arabian else
40463: LD_ADDR_OWVAR 21
40467: PUSH
40468: LD_INT 2
40470: ST_TO_ADDR
40471: GO 40481
// uc_nation := nation_russian ;
40473: LD_ADDR_OWVAR 21
40477: PUSH
40478: LD_INT 3
40480: ST_TO_ADDR
// vc_chassis := chassis ;
40481: LD_ADDR_OWVAR 37
40485: PUSH
40486: LD_VAR 0 1
40490: ST_TO_ADDR
// vc_engine := engine ;
40491: LD_ADDR_OWVAR 39
40495: PUSH
40496: LD_VAR 0 2
40500: ST_TO_ADDR
// vc_control := control ;
40501: LD_ADDR_OWVAR 38
40505: PUSH
40506: LD_VAR 0 3
40510: ST_TO_ADDR
// vc_weapon := weapon ;
40511: LD_ADDR_OWVAR 40
40515: PUSH
40516: LD_VAR 0 4
40520: ST_TO_ADDR
// un := CreateVehicle ;
40521: LD_ADDR_VAR 0 8
40525: PUSH
40526: CALL_OW 45
40530: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
40531: LD_VAR 0 8
40535: PPUSH
40536: LD_INT 0
40538: PPUSH
40539: LD_INT 5
40541: PPUSH
40542: CALL_OW 12
40546: PPUSH
40547: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
40551: LD_VAR 0 8
40555: PPUSH
40556: LD_VAR 0 5
40560: PPUSH
40561: LD_VAR 0 6
40565: PPUSH
40566: LD_INT 1
40568: PPUSH
40569: CALL_OW 48
// end ;
40573: LD_VAR 0 7
40577: RET
// export hInvincible ; every 1 do
40578: GO 40580
40580: DISABLE
// hInvincible := [ ] ;
40581: LD_ADDR_EXP 124
40585: PUSH
40586: EMPTY
40587: ST_TO_ADDR
40588: END
// every 10 do var i ;
40589: GO 40591
40591: DISABLE
40592: LD_INT 0
40594: PPUSH
// begin enable ;
40595: ENABLE
// if not hInvincible then
40596: LD_EXP 124
40600: NOT
40601: IFFALSE 40605
// exit ;
40603: GO 40649
// for i in hInvincible do
40605: LD_ADDR_VAR 0 1
40609: PUSH
40610: LD_EXP 124
40614: PUSH
40615: FOR_IN
40616: IFFALSE 40647
// if GetLives ( i ) < 1000 then
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 256
40627: PUSH
40628: LD_INT 1000
40630: LESS
40631: IFFALSE 40645
// SetLives ( i , 1000 ) ;
40633: LD_VAR 0 1
40637: PPUSH
40638: LD_INT 1000
40640: PPUSH
40641: CALL_OW 234
40645: GO 40615
40647: POP
40648: POP
// end ;
40649: PPOPN 1
40651: END
// export function hHackInvincible ; var i ; begin
40652: LD_INT 0
40654: PPUSH
40655: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
40656: LD_ADDR_VAR 0 2
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 21
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 21
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: PPUSH
40689: CALL_OW 69
40693: PUSH
40694: FOR_IN
40695: IFFALSE 40756
// if IsSelected ( i ) then
40697: LD_VAR 0 2
40701: PPUSH
40702: CALL_OW 306
40706: IFFALSE 40754
// begin if i in hInvincible then
40708: LD_VAR 0 2
40712: PUSH
40713: LD_EXP 124
40717: IN
40718: IFFALSE 40738
// hInvincible := hInvincible diff i else
40720: LD_ADDR_EXP 124
40724: PUSH
40725: LD_EXP 124
40729: PUSH
40730: LD_VAR 0 2
40734: DIFF
40735: ST_TO_ADDR
40736: GO 40754
// hInvincible := hInvincible union i ;
40738: LD_ADDR_EXP 124
40742: PUSH
40743: LD_EXP 124
40747: PUSH
40748: LD_VAR 0 2
40752: UNION
40753: ST_TO_ADDR
// end ;
40754: GO 40694
40756: POP
40757: POP
// end ;
40758: LD_VAR 0 1
40762: RET
// export function hHackInvisible ; var i , j ; begin
40763: LD_INT 0
40765: PPUSH
40766: PPUSH
40767: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40768: LD_ADDR_VAR 0 2
40772: PUSH
40773: LD_INT 21
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PPUSH
40783: CALL_OW 69
40787: PUSH
40788: FOR_IN
40789: IFFALSE 40813
// if IsSelected ( i ) then
40791: LD_VAR 0 2
40795: PPUSH
40796: CALL_OW 306
40800: IFFALSE 40811
// ComForceInvisible ( i ) ;
40802: LD_VAR 0 2
40806: PPUSH
40807: CALL_OW 496
40811: GO 40788
40813: POP
40814: POP
// end ;
40815: LD_VAR 0 1
40819: RET
// export function hHackChangeYourSide ; begin
40820: LD_INT 0
40822: PPUSH
// if your_side = 8 then
40823: LD_OWVAR 2
40827: PUSH
40828: LD_INT 8
40830: EQUAL
40831: IFFALSE 40843
// your_side := 0 else
40833: LD_ADDR_OWVAR 2
40837: PUSH
40838: LD_INT 0
40840: ST_TO_ADDR
40841: GO 40857
// your_side := your_side + 1 ;
40843: LD_ADDR_OWVAR 2
40847: PUSH
40848: LD_OWVAR 2
40852: PUSH
40853: LD_INT 1
40855: PLUS
40856: ST_TO_ADDR
// end ;
40857: LD_VAR 0 1
40861: RET
// export function hHackChangeUnitSide ; var i , j ; begin
40862: LD_INT 0
40864: PPUSH
40865: PPUSH
40866: PPUSH
// for i in all_units do
40867: LD_ADDR_VAR 0 2
40871: PUSH
40872: LD_OWVAR 3
40876: PUSH
40877: FOR_IN
40878: IFFALSE 40956
// if IsSelected ( i ) then
40880: LD_VAR 0 2
40884: PPUSH
40885: CALL_OW 306
40889: IFFALSE 40954
// begin j := GetSide ( i ) ;
40891: LD_ADDR_VAR 0 3
40895: PUSH
40896: LD_VAR 0 2
40900: PPUSH
40901: CALL_OW 255
40905: ST_TO_ADDR
// if j = 8 then
40906: LD_VAR 0 3
40910: PUSH
40911: LD_INT 8
40913: EQUAL
40914: IFFALSE 40926
// j := 0 else
40916: LD_ADDR_VAR 0 3
40920: PUSH
40921: LD_INT 0
40923: ST_TO_ADDR
40924: GO 40940
// j := j + 1 ;
40926: LD_ADDR_VAR 0 3
40930: PUSH
40931: LD_VAR 0 3
40935: PUSH
40936: LD_INT 1
40938: PLUS
40939: ST_TO_ADDR
// SetSide ( i , j ) ;
40940: LD_VAR 0 2
40944: PPUSH
40945: LD_VAR 0 3
40949: PPUSH
40950: CALL_OW 235
// end ;
40954: GO 40877
40956: POP
40957: POP
// end ;
40958: LD_VAR 0 1
40962: RET
// export function hHackFog ; begin
40963: LD_INT 0
40965: PPUSH
// FogOff ( true ) ;
40966: LD_INT 1
40968: PPUSH
40969: CALL_OW 344
// end ;
40973: LD_VAR 0 1
40977: RET
// export function hHackTeleport ( unit , x , y ) ; begin
40978: LD_INT 0
40980: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
40981: LD_VAR 0 1
40985: PPUSH
40986: LD_VAR 0 2
40990: PPUSH
40991: LD_VAR 0 3
40995: PPUSH
40996: LD_INT 1
40998: PPUSH
40999: LD_INT 1
41001: PPUSH
41002: CALL_OW 483
// CenterOnXY ( x , y ) ;
41006: LD_VAR 0 2
41010: PPUSH
41011: LD_VAR 0 3
41015: PPUSH
41016: CALL_OW 84
// end ; end_of_file
41020: LD_VAR 0 4
41024: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
41025: LD_INT 0
41027: PPUSH
41028: PPUSH
41029: PPUSH
41030: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
41031: LD_VAR 0 1
41035: PPUSH
41036: CALL_OW 264
41040: PUSH
41041: LD_EXP 52
41045: EQUAL
41046: IFFALSE 41118
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
41048: LD_INT 68
41050: PPUSH
41051: LD_VAR 0 1
41055: PPUSH
41056: CALL_OW 255
41060: PPUSH
41061: CALL_OW 321
41065: PUSH
41066: LD_INT 2
41068: EQUAL
41069: IFFALSE 41081
// eff := 70 else
41071: LD_ADDR_VAR 0 4
41075: PUSH
41076: LD_INT 70
41078: ST_TO_ADDR
41079: GO 41089
// eff := 30 ;
41081: LD_ADDR_VAR 0 4
41085: PUSH
41086: LD_INT 30
41088: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
41089: LD_VAR 0 1
41093: PPUSH
41094: CALL_OW 250
41098: PPUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 251
41108: PPUSH
41109: LD_VAR 0 4
41113: PPUSH
41114: CALL_OW 495
// end ; end ;
41118: LD_VAR 0 2
41122: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
41123: LD_INT 0
41125: PPUSH
// end ;
41126: LD_VAR 0 4
41130: RET
// export function SOS_Command ( cmd ) ; begin
41131: LD_INT 0
41133: PPUSH
// end ;
41134: LD_VAR 0 2
41138: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
41139: LD_INT 0
41141: PPUSH
// end ;
41142: LD_VAR 0 6
41146: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
41147: LD_INT 0
41149: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
41150: LD_VAR 0 1
41154: PUSH
41155: LD_INT 250
41157: EQUAL
41158: PUSH
41159: LD_VAR 0 2
41163: PPUSH
41164: CALL_OW 264
41168: PUSH
41169: LD_EXP 55
41173: EQUAL
41174: AND
41175: IFFALSE 41196
// MinerPlaceMine ( unit , x , y ) ;
41177: LD_VAR 0 2
41181: PPUSH
41182: LD_VAR 0 4
41186: PPUSH
41187: LD_VAR 0 5
41191: PPUSH
41192: CALL 43545 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
41196: LD_VAR 0 1
41200: PUSH
41201: LD_INT 251
41203: EQUAL
41204: PUSH
41205: LD_VAR 0 2
41209: PPUSH
41210: CALL_OW 264
41214: PUSH
41215: LD_EXP 55
41219: EQUAL
41220: AND
41221: IFFALSE 41242
// MinerDetonateMine ( unit , x , y ) ;
41223: LD_VAR 0 2
41227: PPUSH
41228: LD_VAR 0 4
41232: PPUSH
41233: LD_VAR 0 5
41237: PPUSH
41238: CALL 43822 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
41242: LD_VAR 0 1
41246: PUSH
41247: LD_INT 252
41249: EQUAL
41250: PUSH
41251: LD_VAR 0 2
41255: PPUSH
41256: CALL_OW 264
41260: PUSH
41261: LD_EXP 55
41265: EQUAL
41266: AND
41267: IFFALSE 41288
// MinerCreateMinefield ( unit , x , y ) ;
41269: LD_VAR 0 2
41273: PPUSH
41274: LD_VAR 0 4
41278: PPUSH
41279: LD_VAR 0 5
41283: PPUSH
41284: CALL 44239 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
41288: LD_VAR 0 1
41292: PUSH
41293: LD_INT 253
41295: EQUAL
41296: PUSH
41297: LD_VAR 0 2
41301: PPUSH
41302: CALL_OW 257
41306: PUSH
41307: LD_INT 5
41309: EQUAL
41310: AND
41311: IFFALSE 41332
// ComBinocular ( unit , x , y ) ;
41313: LD_VAR 0 2
41317: PPUSH
41318: LD_VAR 0 4
41322: PPUSH
41323: LD_VAR 0 5
41327: PPUSH
41328: CALL 44610 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
41332: LD_VAR 0 1
41336: PUSH
41337: LD_INT 254
41339: EQUAL
41340: PUSH
41341: LD_VAR 0 2
41345: PPUSH
41346: CALL_OW 264
41350: PUSH
41351: LD_EXP 50
41355: EQUAL
41356: AND
41357: PUSH
41358: LD_VAR 0 3
41362: PPUSH
41363: CALL_OW 263
41367: PUSH
41368: LD_INT 3
41370: EQUAL
41371: AND
41372: IFFALSE 41388
// HackDestroyVehicle ( unit , selectedUnit ) ;
41374: LD_VAR 0 2
41378: PPUSH
41379: LD_VAR 0 3
41383: PPUSH
41384: CALL 42905 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
41388: LD_VAR 0 1
41392: PUSH
41393: LD_INT 255
41395: EQUAL
41396: PUSH
41397: LD_VAR 0 2
41401: PPUSH
41402: CALL_OW 264
41406: PUSH
41407: LD_INT 14
41409: PUSH
41410: LD_INT 53
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: IN
41417: AND
41418: PUSH
41419: LD_VAR 0 4
41423: PPUSH
41424: LD_VAR 0 5
41428: PPUSH
41429: CALL_OW 488
41433: AND
41434: IFFALSE 41458
// CutTreeXYR ( unit , x , y , 12 ) ;
41436: LD_VAR 0 2
41440: PPUSH
41441: LD_VAR 0 4
41445: PPUSH
41446: LD_VAR 0 5
41450: PPUSH
41451: LD_INT 12
41453: PPUSH
41454: CALL 41471 0 4
// end ;
41458: LD_VAR 0 6
41462: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
41463: LD_INT 0
41465: PPUSH
// end ;
41466: LD_VAR 0 4
41470: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
41471: LD_INT 0
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
41482: LD_VAR 0 1
41486: NOT
41487: PUSH
41488: LD_VAR 0 2
41492: PPUSH
41493: LD_VAR 0 3
41497: PPUSH
41498: CALL_OW 488
41502: NOT
41503: OR
41504: PUSH
41505: LD_VAR 0 4
41509: NOT
41510: OR
41511: IFFALSE 41515
// exit ;
41513: GO 41855
// list := [ ] ;
41515: LD_ADDR_VAR 0 13
41519: PUSH
41520: EMPTY
41521: ST_TO_ADDR
// if x - r < 0 then
41522: LD_VAR 0 2
41526: PUSH
41527: LD_VAR 0 4
41531: MINUS
41532: PUSH
41533: LD_INT 0
41535: LESS
41536: IFFALSE 41548
// min_x := 0 else
41538: LD_ADDR_VAR 0 7
41542: PUSH
41543: LD_INT 0
41545: ST_TO_ADDR
41546: GO 41564
// min_x := x - r ;
41548: LD_ADDR_VAR 0 7
41552: PUSH
41553: LD_VAR 0 2
41557: PUSH
41558: LD_VAR 0 4
41562: MINUS
41563: ST_TO_ADDR
// if y - r < 0 then
41564: LD_VAR 0 3
41568: PUSH
41569: LD_VAR 0 4
41573: MINUS
41574: PUSH
41575: LD_INT 0
41577: LESS
41578: IFFALSE 41590
// min_y := 0 else
41580: LD_ADDR_VAR 0 8
41584: PUSH
41585: LD_INT 0
41587: ST_TO_ADDR
41588: GO 41606
// min_y := y - r ;
41590: LD_ADDR_VAR 0 8
41594: PUSH
41595: LD_VAR 0 3
41599: PUSH
41600: LD_VAR 0 4
41604: MINUS
41605: ST_TO_ADDR
// max_x := x + r ;
41606: LD_ADDR_VAR 0 9
41610: PUSH
41611: LD_VAR 0 2
41615: PUSH
41616: LD_VAR 0 4
41620: PLUS
41621: ST_TO_ADDR
// max_y := y + r ;
41622: LD_ADDR_VAR 0 10
41626: PUSH
41627: LD_VAR 0 3
41631: PUSH
41632: LD_VAR 0 4
41636: PLUS
41637: ST_TO_ADDR
// for _x = min_x to max_x do
41638: LD_ADDR_VAR 0 11
41642: PUSH
41643: DOUBLE
41644: LD_VAR 0 7
41648: DEC
41649: ST_TO_ADDR
41650: LD_VAR 0 9
41654: PUSH
41655: FOR_TO
41656: IFFALSE 41773
// for _y = min_y to max_y do
41658: LD_ADDR_VAR 0 12
41662: PUSH
41663: DOUBLE
41664: LD_VAR 0 8
41668: DEC
41669: ST_TO_ADDR
41670: LD_VAR 0 10
41674: PUSH
41675: FOR_TO
41676: IFFALSE 41769
// begin if not ValidHex ( _x , _y ) then
41678: LD_VAR 0 11
41682: PPUSH
41683: LD_VAR 0 12
41687: PPUSH
41688: CALL_OW 488
41692: NOT
41693: IFFALSE 41697
// continue ;
41695: GO 41675
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
41697: LD_VAR 0 11
41701: PPUSH
41702: LD_VAR 0 12
41706: PPUSH
41707: CALL_OW 351
41711: PUSH
41712: LD_VAR 0 11
41716: PPUSH
41717: LD_VAR 0 12
41721: PPUSH
41722: CALL_OW 554
41726: AND
41727: IFFALSE 41767
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
41729: LD_ADDR_VAR 0 13
41733: PUSH
41734: LD_VAR 0 13
41738: PPUSH
41739: LD_VAR 0 13
41743: PUSH
41744: LD_INT 1
41746: PLUS
41747: PPUSH
41748: LD_VAR 0 11
41752: PUSH
41753: LD_VAR 0 12
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PPUSH
41762: CALL_OW 2
41766: ST_TO_ADDR
// end ;
41767: GO 41675
41769: POP
41770: POP
41771: GO 41655
41773: POP
41774: POP
// if not list then
41775: LD_VAR 0 13
41779: NOT
41780: IFFALSE 41784
// exit ;
41782: GO 41855
// for i in list do
41784: LD_ADDR_VAR 0 6
41788: PUSH
41789: LD_VAR 0 13
41793: PUSH
41794: FOR_IN
41795: IFFALSE 41853
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
41797: LD_VAR 0 1
41801: PPUSH
41802: LD_STRING M
41804: PUSH
41805: LD_VAR 0 6
41809: PUSH
41810: LD_INT 1
41812: ARRAY
41813: PUSH
41814: LD_VAR 0 6
41818: PUSH
41819: LD_INT 2
41821: ARRAY
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: PUSH
41844: EMPTY
41845: LIST
41846: PPUSH
41847: CALL_OW 447
41851: GO 41794
41853: POP
41854: POP
// end ;
41855: LD_VAR 0 5
41859: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
41860: LD_EXP 127
41864: NOT
41865: IFFALSE 41915
41867: GO 41869
41869: DISABLE
// begin initHack := true ;
41870: LD_ADDR_EXP 127
41874: PUSH
41875: LD_INT 1
41877: ST_TO_ADDR
// hackTanks := [ ] ;
41878: LD_ADDR_EXP 128
41882: PUSH
41883: EMPTY
41884: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
41885: LD_ADDR_EXP 129
41889: PUSH
41890: EMPTY
41891: ST_TO_ADDR
// hackLimit := 3 ;
41892: LD_ADDR_EXP 130
41896: PUSH
41897: LD_INT 3
41899: ST_TO_ADDR
// hackDist := 12 ;
41900: LD_ADDR_EXP 131
41904: PUSH
41905: LD_INT 12
41907: ST_TO_ADDR
// hackCounter := [ ] ;
41908: LD_ADDR_EXP 132
41912: PUSH
41913: EMPTY
41914: ST_TO_ADDR
// end ;
41915: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41916: LD_EXP 127
41920: PUSH
41921: LD_INT 34
41923: PUSH
41924: LD_EXP 50
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PPUSH
41933: CALL_OW 69
41937: AND
41938: IFFALSE 42193
41940: GO 41942
41942: DISABLE
41943: LD_INT 0
41945: PPUSH
41946: PPUSH
// begin enable ;
41947: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41948: LD_ADDR_VAR 0 1
41952: PUSH
41953: LD_INT 34
41955: PUSH
41956: LD_EXP 50
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PPUSH
41965: CALL_OW 69
41969: PUSH
41970: FOR_IN
41971: IFFALSE 42191
// begin if not i in hackTanks then
41973: LD_VAR 0 1
41977: PUSH
41978: LD_EXP 128
41982: IN
41983: NOT
41984: IFFALSE 42067
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
41986: LD_ADDR_EXP 128
41990: PUSH
41991: LD_EXP 128
41995: PPUSH
41996: LD_EXP 128
42000: PUSH
42001: LD_INT 1
42003: PLUS
42004: PPUSH
42005: LD_VAR 0 1
42009: PPUSH
42010: CALL_OW 1
42014: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
42015: LD_ADDR_EXP 129
42019: PUSH
42020: LD_EXP 129
42024: PPUSH
42025: LD_EXP 129
42029: PUSH
42030: LD_INT 1
42032: PLUS
42033: PPUSH
42034: EMPTY
42035: PPUSH
42036: CALL_OW 1
42040: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
42041: LD_ADDR_EXP 132
42045: PUSH
42046: LD_EXP 132
42050: PPUSH
42051: LD_EXP 132
42055: PUSH
42056: LD_INT 1
42058: PLUS
42059: PPUSH
42060: EMPTY
42061: PPUSH
42062: CALL_OW 1
42066: ST_TO_ADDR
// end ; if not IsOk ( i ) then
42067: LD_VAR 0 1
42071: PPUSH
42072: CALL_OW 302
42076: NOT
42077: IFFALSE 42090
// begin HackUnlinkAll ( i ) ;
42079: LD_VAR 0 1
42083: PPUSH
42084: CALL 42196 0 1
// continue ;
42088: GO 41970
// end ; HackCheckCapturedStatus ( i ) ;
42090: LD_VAR 0 1
42094: PPUSH
42095: CALL 42639 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
42099: LD_ADDR_VAR 0 2
42103: PUSH
42104: LD_INT 81
42106: PUSH
42107: LD_VAR 0 1
42111: PPUSH
42112: CALL_OW 255
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 33
42123: PUSH
42124: LD_INT 3
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 91
42133: PUSH
42134: LD_VAR 0 1
42138: PUSH
42139: LD_EXP 131
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 50
42151: PUSH
42152: EMPTY
42153: LIST
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: PPUSH
42161: CALL_OW 69
42165: ST_TO_ADDR
// if not tmp then
42166: LD_VAR 0 2
42170: NOT
42171: IFFALSE 42175
// continue ;
42173: GO 41970
// HackLink ( i , tmp ) ;
42175: LD_VAR 0 1
42179: PPUSH
42180: LD_VAR 0 2
42184: PPUSH
42185: CALL 42332 0 2
// end ;
42189: GO 41970
42191: POP
42192: POP
// end ;
42193: PPOPN 2
42195: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
42196: LD_INT 0
42198: PPUSH
42199: PPUSH
42200: PPUSH
// if not hack in hackTanks then
42201: LD_VAR 0 1
42205: PUSH
42206: LD_EXP 128
42210: IN
42211: NOT
42212: IFFALSE 42216
// exit ;
42214: GO 42327
// index := GetElementIndex ( hackTanks , hack ) ;
42216: LD_ADDR_VAR 0 4
42220: PUSH
42221: LD_EXP 128
42225: PPUSH
42226: LD_VAR 0 1
42230: PPUSH
42231: CALL 49801 0 2
42235: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
42236: LD_EXP 129
42240: PUSH
42241: LD_VAR 0 4
42245: ARRAY
42246: IFFALSE 42327
// begin for i in hackTanksCaptured [ index ] do
42248: LD_ADDR_VAR 0 3
42252: PUSH
42253: LD_EXP 129
42257: PUSH
42258: LD_VAR 0 4
42262: ARRAY
42263: PUSH
42264: FOR_IN
42265: IFFALSE 42291
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
42267: LD_VAR 0 3
42271: PUSH
42272: LD_INT 1
42274: ARRAY
42275: PPUSH
42276: LD_VAR 0 3
42280: PUSH
42281: LD_INT 2
42283: ARRAY
42284: PPUSH
42285: CALL_OW 235
42289: GO 42264
42291: POP
42292: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
42293: LD_ADDR_EXP 129
42297: PUSH
42298: LD_EXP 129
42302: PPUSH
42303: LD_VAR 0 4
42307: PPUSH
42308: EMPTY
42309: PPUSH
42310: CALL_OW 1
42314: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
42315: LD_VAR 0 1
42319: PPUSH
42320: LD_INT 0
42322: PPUSH
42323: CALL_OW 505
// end ; end ;
42327: LD_VAR 0 2
42331: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
42332: LD_INT 0
42334: PPUSH
42335: PPUSH
42336: PPUSH
// if not hack in hackTanks or not vehicles then
42337: LD_VAR 0 1
42341: PUSH
42342: LD_EXP 128
42346: IN
42347: NOT
42348: PUSH
42349: LD_VAR 0 2
42353: NOT
42354: OR
42355: IFFALSE 42359
// exit ;
42357: GO 42634
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
42359: LD_ADDR_VAR 0 2
42363: PUSH
42364: LD_VAR 0 1
42368: PPUSH
42369: LD_VAR 0 2
42373: PPUSH
42374: LD_INT 1
42376: PPUSH
42377: LD_INT 1
42379: PPUSH
42380: CALL 50451 0 4
42384: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
42385: LD_ADDR_VAR 0 5
42389: PUSH
42390: LD_EXP 128
42394: PPUSH
42395: LD_VAR 0 1
42399: PPUSH
42400: CALL 49801 0 2
42404: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
42405: LD_EXP 129
42409: PUSH
42410: LD_VAR 0 5
42414: ARRAY
42415: PUSH
42416: LD_EXP 130
42420: LESS
42421: IFFALSE 42610
// begin for i := 1 to vehicles do
42423: LD_ADDR_VAR 0 4
42427: PUSH
42428: DOUBLE
42429: LD_INT 1
42431: DEC
42432: ST_TO_ADDR
42433: LD_VAR 0 2
42437: PUSH
42438: FOR_TO
42439: IFFALSE 42608
// begin if hackTanksCaptured [ index ] = hackLimit then
42441: LD_EXP 129
42445: PUSH
42446: LD_VAR 0 5
42450: ARRAY
42451: PUSH
42452: LD_EXP 130
42456: EQUAL
42457: IFFALSE 42461
// break ;
42459: GO 42608
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
42461: LD_ADDR_EXP 132
42465: PUSH
42466: LD_EXP 132
42470: PPUSH
42471: LD_VAR 0 5
42475: PPUSH
42476: LD_EXP 132
42480: PUSH
42481: LD_VAR 0 5
42485: ARRAY
42486: PUSH
42487: LD_INT 1
42489: PLUS
42490: PPUSH
42491: CALL_OW 1
42495: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
42496: LD_ADDR_EXP 129
42500: PUSH
42501: LD_EXP 129
42505: PPUSH
42506: LD_VAR 0 5
42510: PUSH
42511: LD_EXP 129
42515: PUSH
42516: LD_VAR 0 5
42520: ARRAY
42521: PUSH
42522: LD_INT 1
42524: PLUS
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PPUSH
42530: LD_VAR 0 2
42534: PUSH
42535: LD_VAR 0 4
42539: ARRAY
42540: PUSH
42541: LD_VAR 0 2
42545: PUSH
42546: LD_VAR 0 4
42550: ARRAY
42551: PPUSH
42552: CALL_OW 255
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PPUSH
42561: CALL 50016 0 3
42565: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
42566: LD_VAR 0 2
42570: PUSH
42571: LD_VAR 0 4
42575: ARRAY
42576: PPUSH
42577: LD_VAR 0 1
42581: PPUSH
42582: CALL_OW 255
42586: PPUSH
42587: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
42591: LD_VAR 0 2
42595: PUSH
42596: LD_VAR 0 4
42600: ARRAY
42601: PPUSH
42602: CALL_OW 141
// end ;
42606: GO 42438
42608: POP
42609: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42610: LD_VAR 0 1
42614: PPUSH
42615: LD_EXP 129
42619: PUSH
42620: LD_VAR 0 5
42624: ARRAY
42625: PUSH
42626: LD_INT 0
42628: PLUS
42629: PPUSH
42630: CALL_OW 505
// end ;
42634: LD_VAR 0 3
42638: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
42639: LD_INT 0
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
// if not hack in hackTanks then
42645: LD_VAR 0 1
42649: PUSH
42650: LD_EXP 128
42654: IN
42655: NOT
42656: IFFALSE 42660
// exit ;
42658: GO 42900
// index := GetElementIndex ( hackTanks , hack ) ;
42660: LD_ADDR_VAR 0 4
42664: PUSH
42665: LD_EXP 128
42669: PPUSH
42670: LD_VAR 0 1
42674: PPUSH
42675: CALL 49801 0 2
42679: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
42680: LD_ADDR_VAR 0 3
42684: PUSH
42685: DOUBLE
42686: LD_EXP 129
42690: PUSH
42691: LD_VAR 0 4
42695: ARRAY
42696: INC
42697: ST_TO_ADDR
42698: LD_INT 1
42700: PUSH
42701: FOR_DOWNTO
42702: IFFALSE 42874
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
42704: LD_ADDR_VAR 0 5
42708: PUSH
42709: LD_EXP 129
42713: PUSH
42714: LD_VAR 0 4
42718: ARRAY
42719: PUSH
42720: LD_VAR 0 3
42724: ARRAY
42725: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
42726: LD_VAR 0 5
42730: PUSH
42731: LD_INT 1
42733: ARRAY
42734: PPUSH
42735: CALL_OW 302
42739: NOT
42740: PUSH
42741: LD_VAR 0 5
42745: PUSH
42746: LD_INT 1
42748: ARRAY
42749: PPUSH
42750: CALL_OW 255
42754: PUSH
42755: LD_VAR 0 1
42759: PPUSH
42760: CALL_OW 255
42764: NONEQUAL
42765: OR
42766: IFFALSE 42872
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
42768: LD_VAR 0 5
42772: PUSH
42773: LD_INT 1
42775: ARRAY
42776: PPUSH
42777: CALL_OW 305
42781: PUSH
42782: LD_VAR 0 5
42786: PUSH
42787: LD_INT 1
42789: ARRAY
42790: PPUSH
42791: CALL_OW 255
42795: PUSH
42796: LD_VAR 0 1
42800: PPUSH
42801: CALL_OW 255
42805: EQUAL
42806: AND
42807: IFFALSE 42831
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
42809: LD_VAR 0 5
42813: PUSH
42814: LD_INT 1
42816: ARRAY
42817: PPUSH
42818: LD_VAR 0 5
42822: PUSH
42823: LD_INT 2
42825: ARRAY
42826: PPUSH
42827: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
42831: LD_ADDR_EXP 129
42835: PUSH
42836: LD_EXP 129
42840: PPUSH
42841: LD_VAR 0 4
42845: PPUSH
42846: LD_EXP 129
42850: PUSH
42851: LD_VAR 0 4
42855: ARRAY
42856: PPUSH
42857: LD_VAR 0 3
42861: PPUSH
42862: CALL_OW 3
42866: PPUSH
42867: CALL_OW 1
42871: ST_TO_ADDR
// end ; end ;
42872: GO 42701
42874: POP
42875: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42876: LD_VAR 0 1
42880: PPUSH
42881: LD_EXP 129
42885: PUSH
42886: LD_VAR 0 4
42890: ARRAY
42891: PUSH
42892: LD_INT 0
42894: PLUS
42895: PPUSH
42896: CALL_OW 505
// end ;
42900: LD_VAR 0 2
42904: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
42905: LD_INT 0
42907: PPUSH
42908: PPUSH
42909: PPUSH
42910: PPUSH
// if not hack in hackTanks then
42911: LD_VAR 0 1
42915: PUSH
42916: LD_EXP 128
42920: IN
42921: NOT
42922: IFFALSE 42926
// exit ;
42924: GO 43011
// index := GetElementIndex ( hackTanks , hack ) ;
42926: LD_ADDR_VAR 0 5
42930: PUSH
42931: LD_EXP 128
42935: PPUSH
42936: LD_VAR 0 1
42940: PPUSH
42941: CALL 49801 0 2
42945: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42946: LD_ADDR_VAR 0 4
42950: PUSH
42951: DOUBLE
42952: LD_INT 1
42954: DEC
42955: ST_TO_ADDR
42956: LD_EXP 129
42960: PUSH
42961: LD_VAR 0 5
42965: ARRAY
42966: PUSH
42967: FOR_TO
42968: IFFALSE 43009
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42970: LD_EXP 129
42974: PUSH
42975: LD_VAR 0 5
42979: ARRAY
42980: PUSH
42981: LD_VAR 0 4
42985: ARRAY
42986: PUSH
42987: LD_INT 1
42989: ARRAY
42990: PUSH
42991: LD_VAR 0 2
42995: EQUAL
42996: IFFALSE 43007
// KillUnit ( vehicle ) ;
42998: LD_VAR 0 2
43002: PPUSH
43003: CALL_OW 66
43007: GO 42967
43009: POP
43010: POP
// end ;
43011: LD_VAR 0 3
43015: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
43016: LD_EXP 133
43020: NOT
43021: IFFALSE 43056
43023: GO 43025
43025: DISABLE
// begin initMiner := true ;
43026: LD_ADDR_EXP 133
43030: PUSH
43031: LD_INT 1
43033: ST_TO_ADDR
// minersList := [ ] ;
43034: LD_ADDR_EXP 134
43038: PUSH
43039: EMPTY
43040: ST_TO_ADDR
// minerMinesList := [ ] ;
43041: LD_ADDR_EXP 135
43045: PUSH
43046: EMPTY
43047: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
43048: LD_ADDR_EXP 136
43052: PUSH
43053: LD_INT 5
43055: ST_TO_ADDR
// end ;
43056: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
43057: LD_EXP 133
43061: PUSH
43062: LD_INT 34
43064: PUSH
43065: LD_EXP 55
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PPUSH
43074: CALL_OW 69
43078: AND
43079: IFFALSE 43542
43081: GO 43083
43083: DISABLE
43084: LD_INT 0
43086: PPUSH
43087: PPUSH
43088: PPUSH
43089: PPUSH
// begin enable ;
43090: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
43091: LD_ADDR_VAR 0 1
43095: PUSH
43096: LD_INT 34
43098: PUSH
43099: LD_EXP 55
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PPUSH
43108: CALL_OW 69
43112: PUSH
43113: FOR_IN
43114: IFFALSE 43186
// begin if not i in minersList then
43116: LD_VAR 0 1
43120: PUSH
43121: LD_EXP 134
43125: IN
43126: NOT
43127: IFFALSE 43184
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
43129: LD_ADDR_EXP 134
43133: PUSH
43134: LD_EXP 134
43138: PPUSH
43139: LD_EXP 134
43143: PUSH
43144: LD_INT 1
43146: PLUS
43147: PPUSH
43148: LD_VAR 0 1
43152: PPUSH
43153: CALL_OW 1
43157: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
43158: LD_ADDR_EXP 135
43162: PUSH
43163: LD_EXP 135
43167: PPUSH
43168: LD_EXP 135
43172: PUSH
43173: LD_INT 1
43175: PLUS
43176: PPUSH
43177: EMPTY
43178: PPUSH
43179: CALL_OW 1
43183: ST_TO_ADDR
// end end ;
43184: GO 43113
43186: POP
43187: POP
// for i := minerMinesList downto 1 do
43188: LD_ADDR_VAR 0 1
43192: PUSH
43193: DOUBLE
43194: LD_EXP 135
43198: INC
43199: ST_TO_ADDR
43200: LD_INT 1
43202: PUSH
43203: FOR_DOWNTO
43204: IFFALSE 43540
// begin if IsLive ( minersList [ i ] ) then
43206: LD_EXP 134
43210: PUSH
43211: LD_VAR 0 1
43215: ARRAY
43216: PPUSH
43217: CALL_OW 300
43221: IFFALSE 43249
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
43223: LD_EXP 134
43227: PUSH
43228: LD_VAR 0 1
43232: ARRAY
43233: PPUSH
43234: LD_EXP 135
43238: PUSH
43239: LD_VAR 0 1
43243: ARRAY
43244: PPUSH
43245: CALL_OW 505
// if not minerMinesList [ i ] then
43249: LD_EXP 135
43253: PUSH
43254: LD_VAR 0 1
43258: ARRAY
43259: NOT
43260: IFFALSE 43264
// continue ;
43262: GO 43203
// for j := minerMinesList [ i ] downto 1 do
43264: LD_ADDR_VAR 0 2
43268: PUSH
43269: DOUBLE
43270: LD_EXP 135
43274: PUSH
43275: LD_VAR 0 1
43279: ARRAY
43280: INC
43281: ST_TO_ADDR
43282: LD_INT 1
43284: PUSH
43285: FOR_DOWNTO
43286: IFFALSE 43536
// begin side := GetSide ( minersList [ i ] ) ;
43288: LD_ADDR_VAR 0 3
43292: PUSH
43293: LD_EXP 134
43297: PUSH
43298: LD_VAR 0 1
43302: ARRAY
43303: PPUSH
43304: CALL_OW 255
43308: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
43309: LD_ADDR_VAR 0 4
43313: PUSH
43314: LD_EXP 135
43318: PUSH
43319: LD_VAR 0 1
43323: ARRAY
43324: PUSH
43325: LD_VAR 0 2
43329: ARRAY
43330: PUSH
43331: LD_INT 1
43333: ARRAY
43334: PPUSH
43335: LD_EXP 135
43339: PUSH
43340: LD_VAR 0 1
43344: ARRAY
43345: PUSH
43346: LD_VAR 0 2
43350: ARRAY
43351: PUSH
43352: LD_INT 2
43354: ARRAY
43355: PPUSH
43356: CALL_OW 428
43360: ST_TO_ADDR
// if not tmp then
43361: LD_VAR 0 4
43365: NOT
43366: IFFALSE 43370
// continue ;
43368: GO 43285
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
43370: LD_VAR 0 4
43374: PUSH
43375: LD_INT 81
43377: PUSH
43378: LD_VAR 0 3
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PPUSH
43387: CALL_OW 69
43391: IN
43392: PUSH
43393: LD_EXP 135
43397: PUSH
43398: LD_VAR 0 1
43402: ARRAY
43403: PUSH
43404: LD_VAR 0 2
43408: ARRAY
43409: PUSH
43410: LD_INT 1
43412: ARRAY
43413: PPUSH
43414: LD_EXP 135
43418: PUSH
43419: LD_VAR 0 1
43423: ARRAY
43424: PUSH
43425: LD_VAR 0 2
43429: ARRAY
43430: PUSH
43431: LD_INT 2
43433: ARRAY
43434: PPUSH
43435: CALL_OW 458
43439: AND
43440: IFFALSE 43534
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
43442: LD_EXP 135
43446: PUSH
43447: LD_VAR 0 1
43451: ARRAY
43452: PUSH
43453: LD_VAR 0 2
43457: ARRAY
43458: PUSH
43459: LD_INT 1
43461: ARRAY
43462: PPUSH
43463: LD_EXP 135
43467: PUSH
43468: LD_VAR 0 1
43472: ARRAY
43473: PUSH
43474: LD_VAR 0 2
43478: ARRAY
43479: PUSH
43480: LD_INT 2
43482: ARRAY
43483: PPUSH
43484: LD_VAR 0 3
43488: PPUSH
43489: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
43493: LD_ADDR_EXP 135
43497: PUSH
43498: LD_EXP 135
43502: PPUSH
43503: LD_VAR 0 1
43507: PPUSH
43508: LD_EXP 135
43512: PUSH
43513: LD_VAR 0 1
43517: ARRAY
43518: PPUSH
43519: LD_VAR 0 2
43523: PPUSH
43524: CALL_OW 3
43528: PPUSH
43529: CALL_OW 1
43533: ST_TO_ADDR
// end ; end ;
43534: GO 43285
43536: POP
43537: POP
// end ;
43538: GO 43203
43540: POP
43541: POP
// end ;
43542: PPOPN 4
43544: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
43545: LD_INT 0
43547: PPUSH
43548: PPUSH
// result := false ;
43549: LD_ADDR_VAR 0 4
43553: PUSH
43554: LD_INT 0
43556: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
43557: LD_VAR 0 1
43561: PPUSH
43562: CALL_OW 264
43566: PUSH
43567: LD_EXP 55
43571: EQUAL
43572: NOT
43573: IFFALSE 43577
// exit ;
43575: GO 43817
// index := GetElementIndex ( minersList , unit ) ;
43577: LD_ADDR_VAR 0 5
43581: PUSH
43582: LD_EXP 134
43586: PPUSH
43587: LD_VAR 0 1
43591: PPUSH
43592: CALL 49801 0 2
43596: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
43597: LD_EXP 135
43601: PUSH
43602: LD_VAR 0 5
43606: ARRAY
43607: PUSH
43608: LD_EXP 136
43612: GREATEREQUAL
43613: IFFALSE 43617
// exit ;
43615: GO 43817
// ComMoveXY ( unit , x , y ) ;
43617: LD_VAR 0 1
43621: PPUSH
43622: LD_VAR 0 2
43626: PPUSH
43627: LD_VAR 0 3
43631: PPUSH
43632: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43636: LD_INT 35
43638: PPUSH
43639: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
43643: LD_VAR 0 1
43647: PPUSH
43648: LD_VAR 0 2
43652: PPUSH
43653: LD_VAR 0 3
43657: PPUSH
43658: CALL 80573 0 3
43662: NOT
43663: PUSH
43664: LD_VAR 0 1
43668: PPUSH
43669: CALL_OW 314
43673: AND
43674: IFFALSE 43678
// exit ;
43676: GO 43817
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
43678: LD_VAR 0 2
43682: PPUSH
43683: LD_VAR 0 3
43687: PPUSH
43688: CALL_OW 428
43692: PUSH
43693: LD_VAR 0 1
43697: EQUAL
43698: PUSH
43699: LD_VAR 0 1
43703: PPUSH
43704: CALL_OW 314
43708: NOT
43709: AND
43710: IFFALSE 43636
// PlaySoundXY ( x , y , PlantMine ) ;
43712: LD_VAR 0 2
43716: PPUSH
43717: LD_VAR 0 3
43721: PPUSH
43722: LD_STRING PlantMine
43724: PPUSH
43725: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
43729: LD_VAR 0 2
43733: PPUSH
43734: LD_VAR 0 3
43738: PPUSH
43739: LD_VAR 0 1
43743: PPUSH
43744: CALL_OW 255
43748: PPUSH
43749: LD_INT 0
43751: PPUSH
43752: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
43756: LD_ADDR_EXP 135
43760: PUSH
43761: LD_EXP 135
43765: PPUSH
43766: LD_VAR 0 5
43770: PUSH
43771: LD_EXP 135
43775: PUSH
43776: LD_VAR 0 5
43780: ARRAY
43781: PUSH
43782: LD_INT 1
43784: PLUS
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PPUSH
43790: LD_VAR 0 2
43794: PUSH
43795: LD_VAR 0 3
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PPUSH
43804: CALL 50016 0 3
43808: ST_TO_ADDR
// result := true ;
43809: LD_ADDR_VAR 0 4
43813: PUSH
43814: LD_INT 1
43816: ST_TO_ADDR
// end ;
43817: LD_VAR 0 4
43821: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
43822: LD_INT 0
43824: PPUSH
43825: PPUSH
43826: PPUSH
// if not unit in minersList then
43827: LD_VAR 0 1
43831: PUSH
43832: LD_EXP 134
43836: IN
43837: NOT
43838: IFFALSE 43842
// exit ;
43840: GO 44234
// index := GetElementIndex ( minersList , unit ) ;
43842: LD_ADDR_VAR 0 6
43846: PUSH
43847: LD_EXP 134
43851: PPUSH
43852: LD_VAR 0 1
43856: PPUSH
43857: CALL 49801 0 2
43861: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
43862: LD_ADDR_VAR 0 5
43866: PUSH
43867: DOUBLE
43868: LD_EXP 135
43872: PUSH
43873: LD_VAR 0 6
43877: ARRAY
43878: INC
43879: ST_TO_ADDR
43880: LD_INT 1
43882: PUSH
43883: FOR_DOWNTO
43884: IFFALSE 44045
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
43886: LD_EXP 135
43890: PUSH
43891: LD_VAR 0 6
43895: ARRAY
43896: PUSH
43897: LD_VAR 0 5
43901: ARRAY
43902: PUSH
43903: LD_INT 1
43905: ARRAY
43906: PUSH
43907: LD_VAR 0 2
43911: EQUAL
43912: PUSH
43913: LD_EXP 135
43917: PUSH
43918: LD_VAR 0 6
43922: ARRAY
43923: PUSH
43924: LD_VAR 0 5
43928: ARRAY
43929: PUSH
43930: LD_INT 2
43932: ARRAY
43933: PUSH
43934: LD_VAR 0 3
43938: EQUAL
43939: AND
43940: IFFALSE 44043
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43942: LD_EXP 135
43946: PUSH
43947: LD_VAR 0 6
43951: ARRAY
43952: PUSH
43953: LD_VAR 0 5
43957: ARRAY
43958: PUSH
43959: LD_INT 1
43961: ARRAY
43962: PPUSH
43963: LD_EXP 135
43967: PUSH
43968: LD_VAR 0 6
43972: ARRAY
43973: PUSH
43974: LD_VAR 0 5
43978: ARRAY
43979: PUSH
43980: LD_INT 2
43982: ARRAY
43983: PPUSH
43984: LD_VAR 0 1
43988: PPUSH
43989: CALL_OW 255
43993: PPUSH
43994: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43998: LD_ADDR_EXP 135
44002: PUSH
44003: LD_EXP 135
44007: PPUSH
44008: LD_VAR 0 6
44012: PPUSH
44013: LD_EXP 135
44017: PUSH
44018: LD_VAR 0 6
44022: ARRAY
44023: PPUSH
44024: LD_VAR 0 5
44028: PPUSH
44029: CALL_OW 3
44033: PPUSH
44034: CALL_OW 1
44038: ST_TO_ADDR
// exit ;
44039: POP
44040: POP
44041: GO 44234
// end ; end ;
44043: GO 43883
44045: POP
44046: POP
// for i := minerMinesList [ index ] downto 1 do
44047: LD_ADDR_VAR 0 5
44051: PUSH
44052: DOUBLE
44053: LD_EXP 135
44057: PUSH
44058: LD_VAR 0 6
44062: ARRAY
44063: INC
44064: ST_TO_ADDR
44065: LD_INT 1
44067: PUSH
44068: FOR_DOWNTO
44069: IFFALSE 44232
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
44071: LD_EXP 135
44075: PUSH
44076: LD_VAR 0 6
44080: ARRAY
44081: PUSH
44082: LD_VAR 0 5
44086: ARRAY
44087: PUSH
44088: LD_INT 1
44090: ARRAY
44091: PPUSH
44092: LD_EXP 135
44096: PUSH
44097: LD_VAR 0 6
44101: ARRAY
44102: PUSH
44103: LD_VAR 0 5
44107: ARRAY
44108: PUSH
44109: LD_INT 2
44111: ARRAY
44112: PPUSH
44113: LD_VAR 0 2
44117: PPUSH
44118: LD_VAR 0 3
44122: PPUSH
44123: CALL_OW 298
44127: PUSH
44128: LD_INT 6
44130: LESS
44131: IFFALSE 44230
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
44133: LD_EXP 135
44137: PUSH
44138: LD_VAR 0 6
44142: ARRAY
44143: PUSH
44144: LD_VAR 0 5
44148: ARRAY
44149: PUSH
44150: LD_INT 1
44152: ARRAY
44153: PPUSH
44154: LD_EXP 135
44158: PUSH
44159: LD_VAR 0 6
44163: ARRAY
44164: PUSH
44165: LD_VAR 0 5
44169: ARRAY
44170: PUSH
44171: LD_INT 2
44173: ARRAY
44174: PPUSH
44175: LD_VAR 0 1
44179: PPUSH
44180: CALL_OW 255
44184: PPUSH
44185: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
44189: LD_ADDR_EXP 135
44193: PUSH
44194: LD_EXP 135
44198: PPUSH
44199: LD_VAR 0 6
44203: PPUSH
44204: LD_EXP 135
44208: PUSH
44209: LD_VAR 0 6
44213: ARRAY
44214: PPUSH
44215: LD_VAR 0 5
44219: PPUSH
44220: CALL_OW 3
44224: PPUSH
44225: CALL_OW 1
44229: ST_TO_ADDR
// end ; end ;
44230: GO 44068
44232: POP
44233: POP
// end ;
44234: LD_VAR 0 4
44238: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
44239: LD_INT 0
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
44250: LD_VAR 0 1
44254: PPUSH
44255: CALL_OW 264
44259: PUSH
44260: LD_EXP 55
44264: EQUAL
44265: NOT
44266: PUSH
44267: LD_VAR 0 1
44271: PUSH
44272: LD_EXP 134
44276: IN
44277: NOT
44278: OR
44279: IFFALSE 44283
// exit ;
44281: GO 44605
// index := GetElementIndex ( minersList , unit ) ;
44283: LD_ADDR_VAR 0 6
44287: PUSH
44288: LD_EXP 134
44292: PPUSH
44293: LD_VAR 0 1
44297: PPUSH
44298: CALL 49801 0 2
44302: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
44303: LD_ADDR_VAR 0 8
44307: PUSH
44308: LD_EXP 136
44312: PUSH
44313: LD_EXP 135
44317: PUSH
44318: LD_VAR 0 6
44322: ARRAY
44323: MINUS
44324: ST_TO_ADDR
// if not minesFreeAmount then
44325: LD_VAR 0 8
44329: NOT
44330: IFFALSE 44334
// exit ;
44332: GO 44605
// tmp := [ ] ;
44334: LD_ADDR_VAR 0 7
44338: PUSH
44339: EMPTY
44340: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
44341: LD_ADDR_VAR 0 5
44345: PUSH
44346: DOUBLE
44347: LD_INT 1
44349: DEC
44350: ST_TO_ADDR
44351: LD_VAR 0 8
44355: PUSH
44356: FOR_TO
44357: IFFALSE 44552
// begin _d := rand ( 0 , 5 ) ;
44359: LD_ADDR_VAR 0 11
44363: PUSH
44364: LD_INT 0
44366: PPUSH
44367: LD_INT 5
44369: PPUSH
44370: CALL_OW 12
44374: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
44375: LD_ADDR_VAR 0 12
44379: PUSH
44380: LD_INT 2
44382: PPUSH
44383: LD_INT 6
44385: PPUSH
44386: CALL_OW 12
44390: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
44391: LD_ADDR_VAR 0 9
44395: PUSH
44396: LD_VAR 0 2
44400: PPUSH
44401: LD_VAR 0 11
44405: PPUSH
44406: LD_VAR 0 12
44410: PPUSH
44411: CALL_OW 272
44415: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
44416: LD_ADDR_VAR 0 10
44420: PUSH
44421: LD_VAR 0 3
44425: PPUSH
44426: LD_VAR 0 11
44430: PPUSH
44431: LD_VAR 0 12
44435: PPUSH
44436: CALL_OW 273
44440: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
44441: LD_VAR 0 9
44445: PPUSH
44446: LD_VAR 0 10
44450: PPUSH
44451: CALL_OW 488
44455: PUSH
44456: LD_VAR 0 9
44460: PUSH
44461: LD_VAR 0 10
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_VAR 0 7
44474: IN
44475: NOT
44476: AND
44477: PUSH
44478: LD_VAR 0 9
44482: PPUSH
44483: LD_VAR 0 10
44487: PPUSH
44488: CALL_OW 458
44492: NOT
44493: AND
44494: IFFALSE 44536
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
44496: LD_ADDR_VAR 0 7
44500: PUSH
44501: LD_VAR 0 7
44505: PPUSH
44506: LD_VAR 0 7
44510: PUSH
44511: LD_INT 1
44513: PLUS
44514: PPUSH
44515: LD_VAR 0 9
44519: PUSH
44520: LD_VAR 0 10
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PPUSH
44529: CALL_OW 1
44533: ST_TO_ADDR
44534: GO 44550
// i := i - 1 ;
44536: LD_ADDR_VAR 0 5
44540: PUSH
44541: LD_VAR 0 5
44545: PUSH
44546: LD_INT 1
44548: MINUS
44549: ST_TO_ADDR
// end ;
44550: GO 44356
44552: POP
44553: POP
// for i in tmp do
44554: LD_ADDR_VAR 0 5
44558: PUSH
44559: LD_VAR 0 7
44563: PUSH
44564: FOR_IN
44565: IFFALSE 44603
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
44567: LD_VAR 0 1
44571: PPUSH
44572: LD_VAR 0 5
44576: PUSH
44577: LD_INT 1
44579: ARRAY
44580: PPUSH
44581: LD_VAR 0 5
44585: PUSH
44586: LD_INT 2
44588: ARRAY
44589: PPUSH
44590: CALL 43545 0 3
44594: NOT
44595: IFFALSE 44601
// exit ;
44597: POP
44598: POP
44599: GO 44605
44601: GO 44564
44603: POP
44604: POP
// end ;
44605: LD_VAR 0 4
44609: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
44610: LD_INT 0
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
// if not GetClass ( unit ) = class_sniper then
44619: LD_VAR 0 1
44623: PPUSH
44624: CALL_OW 257
44628: PUSH
44629: LD_INT 5
44631: EQUAL
44632: NOT
44633: IFFALSE 44637
// exit ;
44635: GO 45025
// dist := 8 ;
44637: LD_ADDR_VAR 0 5
44641: PUSH
44642: LD_INT 8
44644: ST_TO_ADDR
// viewRange := 12 ;
44645: LD_ADDR_VAR 0 7
44649: PUSH
44650: LD_INT 12
44652: ST_TO_ADDR
// side := GetSide ( unit ) ;
44653: LD_ADDR_VAR 0 6
44657: PUSH
44658: LD_VAR 0 1
44662: PPUSH
44663: CALL_OW 255
44667: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
44668: LD_INT 61
44670: PPUSH
44671: LD_VAR 0 6
44675: PPUSH
44676: CALL_OW 321
44680: PUSH
44681: LD_INT 2
44683: EQUAL
44684: IFFALSE 44694
// viewRange := 16 ;
44686: LD_ADDR_VAR 0 7
44690: PUSH
44691: LD_INT 16
44693: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
44694: LD_VAR 0 1
44698: PPUSH
44699: LD_VAR 0 2
44703: PPUSH
44704: LD_VAR 0 3
44708: PPUSH
44709: CALL_OW 297
44713: PUSH
44714: LD_VAR 0 5
44718: GREATER
44719: IFFALSE 44798
// begin ComMoveXY ( unit , x , y ) ;
44721: LD_VAR 0 1
44725: PPUSH
44726: LD_VAR 0 2
44730: PPUSH
44731: LD_VAR 0 3
44735: PPUSH
44736: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
44740: LD_INT 35
44742: PPUSH
44743: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
44747: LD_VAR 0 1
44751: PPUSH
44752: LD_VAR 0 2
44756: PPUSH
44757: LD_VAR 0 3
44761: PPUSH
44762: CALL 80573 0 3
44766: NOT
44767: IFFALSE 44771
// exit ;
44769: GO 45025
// until GetDistUnitXY ( unit , x , y ) < dist ;
44771: LD_VAR 0 1
44775: PPUSH
44776: LD_VAR 0 2
44780: PPUSH
44781: LD_VAR 0 3
44785: PPUSH
44786: CALL_OW 297
44790: PUSH
44791: LD_VAR 0 5
44795: LESS
44796: IFFALSE 44740
// end ; ComTurnXY ( unit , x , y ) ;
44798: LD_VAR 0 1
44802: PPUSH
44803: LD_VAR 0 2
44807: PPUSH
44808: LD_VAR 0 3
44812: PPUSH
44813: CALL_OW 118
// wait ( 5 ) ;
44817: LD_INT 5
44819: PPUSH
44820: CALL_OW 67
// _d := GetDir ( unit ) ;
44824: LD_ADDR_VAR 0 10
44828: PUSH
44829: LD_VAR 0 1
44833: PPUSH
44834: CALL_OW 254
44838: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
44839: LD_ADDR_VAR 0 8
44843: PUSH
44844: LD_VAR 0 1
44848: PPUSH
44849: CALL_OW 250
44853: PPUSH
44854: LD_VAR 0 10
44858: PPUSH
44859: LD_VAR 0 5
44863: PPUSH
44864: CALL_OW 272
44868: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
44869: LD_ADDR_VAR 0 9
44873: PUSH
44874: LD_VAR 0 1
44878: PPUSH
44879: CALL_OW 251
44883: PPUSH
44884: LD_VAR 0 10
44888: PPUSH
44889: LD_VAR 0 5
44893: PPUSH
44894: CALL_OW 273
44898: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44899: LD_VAR 0 8
44903: PPUSH
44904: LD_VAR 0 9
44908: PPUSH
44909: CALL_OW 488
44913: NOT
44914: IFFALSE 44918
// exit ;
44916: GO 45025
// ComAnimCustom ( unit , 1 ) ;
44918: LD_VAR 0 1
44922: PPUSH
44923: LD_INT 1
44925: PPUSH
44926: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44930: LD_VAR 0 8
44934: PPUSH
44935: LD_VAR 0 9
44939: PPUSH
44940: LD_VAR 0 6
44944: PPUSH
44945: LD_VAR 0 7
44949: PPUSH
44950: CALL_OW 330
// repeat wait ( 1 ) ;
44954: LD_INT 1
44956: PPUSH
44957: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44961: LD_VAR 0 1
44965: PPUSH
44966: CALL_OW 316
44970: PUSH
44971: LD_VAR 0 1
44975: PPUSH
44976: CALL_OW 314
44980: OR
44981: PUSH
44982: LD_VAR 0 1
44986: PPUSH
44987: CALL_OW 302
44991: NOT
44992: OR
44993: PUSH
44994: LD_VAR 0 1
44998: PPUSH
44999: CALL_OW 301
45003: OR
45004: IFFALSE 44954
// RemoveSeeing ( _x , _y , side ) ;
45006: LD_VAR 0 8
45010: PPUSH
45011: LD_VAR 0 9
45015: PPUSH
45016: LD_VAR 0 6
45020: PPUSH
45021: CALL_OW 331
// end ; end_of_file
45025: LD_VAR 0 4
45029: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
45030: LD_INT 0
45032: PPUSH
45033: PPUSH
// if exist_mode then
45034: LD_VAR 0 2
45038: IFFALSE 45063
// unit := CreateCharacter ( prefix & ident ) else
45040: LD_ADDR_VAR 0 5
45044: PUSH
45045: LD_VAR 0 3
45049: PUSH
45050: LD_VAR 0 1
45054: STR
45055: PPUSH
45056: CALL_OW 34
45060: ST_TO_ADDR
45061: GO 45078
// unit := NewCharacter ( ident ) ;
45063: LD_ADDR_VAR 0 5
45067: PUSH
45068: LD_VAR 0 1
45072: PPUSH
45073: CALL_OW 25
45077: ST_TO_ADDR
// result := unit ;
45078: LD_ADDR_VAR 0 4
45082: PUSH
45083: LD_VAR 0 5
45087: ST_TO_ADDR
// end ;
45088: LD_VAR 0 4
45092: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
45093: LD_INT 0
45095: PPUSH
45096: PPUSH
// if not side or not nation then
45097: LD_VAR 0 1
45101: NOT
45102: PUSH
45103: LD_VAR 0 2
45107: NOT
45108: OR
45109: IFFALSE 45113
// exit ;
45111: GO 45881
// case nation of nation_american :
45113: LD_VAR 0 2
45117: PUSH
45118: LD_INT 1
45120: DOUBLE
45121: EQUAL
45122: IFTRUE 45126
45124: GO 45340
45126: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
45127: LD_ADDR_VAR 0 4
45131: PUSH
45132: LD_INT 35
45134: PUSH
45135: LD_INT 45
45137: PUSH
45138: LD_INT 46
45140: PUSH
45141: LD_INT 47
45143: PUSH
45144: LD_INT 82
45146: PUSH
45147: LD_INT 83
45149: PUSH
45150: LD_INT 84
45152: PUSH
45153: LD_INT 85
45155: PUSH
45156: LD_INT 86
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 6
45167: PUSH
45168: LD_INT 15
45170: PUSH
45171: LD_INT 16
45173: PUSH
45174: LD_INT 7
45176: PUSH
45177: LD_INT 12
45179: PUSH
45180: LD_INT 13
45182: PUSH
45183: LD_INT 10
45185: PUSH
45186: LD_INT 14
45188: PUSH
45189: LD_INT 20
45191: PUSH
45192: LD_INT 21
45194: PUSH
45195: LD_INT 22
45197: PUSH
45198: LD_INT 25
45200: PUSH
45201: LD_INT 32
45203: PUSH
45204: LD_INT 27
45206: PUSH
45207: LD_INT 36
45209: PUSH
45210: LD_INT 69
45212: PUSH
45213: LD_INT 39
45215: PUSH
45216: LD_INT 34
45218: PUSH
45219: LD_INT 40
45221: PUSH
45222: LD_INT 48
45224: PUSH
45225: LD_INT 49
45227: PUSH
45228: LD_INT 50
45230: PUSH
45231: LD_INT 51
45233: PUSH
45234: LD_INT 52
45236: PUSH
45237: LD_INT 53
45239: PUSH
45240: LD_INT 54
45242: PUSH
45243: LD_INT 55
45245: PUSH
45246: LD_INT 56
45248: PUSH
45249: LD_INT 57
45251: PUSH
45252: LD_INT 58
45254: PUSH
45255: LD_INT 59
45257: PUSH
45258: LD_INT 60
45260: PUSH
45261: LD_INT 61
45263: PUSH
45264: LD_INT 62
45266: PUSH
45267: LD_INT 80
45269: PUSH
45270: LD_INT 82
45272: PUSH
45273: LD_INT 83
45275: PUSH
45276: LD_INT 84
45278: PUSH
45279: LD_INT 85
45281: PUSH
45282: LD_INT 86
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: ST_TO_ADDR
45338: GO 45805
45340: LD_INT 2
45342: DOUBLE
45343: EQUAL
45344: IFTRUE 45348
45346: GO 45574
45348: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
45349: LD_ADDR_VAR 0 4
45353: PUSH
45354: LD_INT 35
45356: PUSH
45357: LD_INT 45
45359: PUSH
45360: LD_INT 46
45362: PUSH
45363: LD_INT 47
45365: PUSH
45366: LD_INT 82
45368: PUSH
45369: LD_INT 83
45371: PUSH
45372: LD_INT 84
45374: PUSH
45375: LD_INT 85
45377: PUSH
45378: LD_INT 87
45380: PUSH
45381: LD_INT 70
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 11
45389: PUSH
45390: LD_INT 3
45392: PUSH
45393: LD_INT 4
45395: PUSH
45396: LD_INT 5
45398: PUSH
45399: LD_INT 6
45401: PUSH
45402: LD_INT 15
45404: PUSH
45405: LD_INT 18
45407: PUSH
45408: LD_INT 7
45410: PUSH
45411: LD_INT 17
45413: PUSH
45414: LD_INT 8
45416: PUSH
45417: LD_INT 20
45419: PUSH
45420: LD_INT 21
45422: PUSH
45423: LD_INT 22
45425: PUSH
45426: LD_INT 72
45428: PUSH
45429: LD_INT 26
45431: PUSH
45432: LD_INT 69
45434: PUSH
45435: LD_INT 39
45437: PUSH
45438: LD_INT 40
45440: PUSH
45441: LD_INT 41
45443: PUSH
45444: LD_INT 42
45446: PUSH
45447: LD_INT 43
45449: PUSH
45450: LD_INT 48
45452: PUSH
45453: LD_INT 49
45455: PUSH
45456: LD_INT 50
45458: PUSH
45459: LD_INT 51
45461: PUSH
45462: LD_INT 52
45464: PUSH
45465: LD_INT 53
45467: PUSH
45468: LD_INT 54
45470: PUSH
45471: LD_INT 55
45473: PUSH
45474: LD_INT 56
45476: PUSH
45477: LD_INT 60
45479: PUSH
45480: LD_INT 61
45482: PUSH
45483: LD_INT 62
45485: PUSH
45486: LD_INT 66
45488: PUSH
45489: LD_INT 67
45491: PUSH
45492: LD_INT 68
45494: PUSH
45495: LD_INT 81
45497: PUSH
45498: LD_INT 82
45500: PUSH
45501: LD_INT 83
45503: PUSH
45504: LD_INT 84
45506: PUSH
45507: LD_INT 85
45509: PUSH
45510: LD_INT 87
45512: PUSH
45513: LD_INT 88
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: ST_TO_ADDR
45572: GO 45805
45574: LD_INT 3
45576: DOUBLE
45577: EQUAL
45578: IFTRUE 45582
45580: GO 45804
45582: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
45583: LD_ADDR_VAR 0 4
45587: PUSH
45588: LD_INT 46
45590: PUSH
45591: LD_INT 47
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: LD_INT 82
45602: PUSH
45603: LD_INT 83
45605: PUSH
45606: LD_INT 84
45608: PUSH
45609: LD_INT 85
45611: PUSH
45612: LD_INT 86
45614: PUSH
45615: LD_INT 11
45617: PUSH
45618: LD_INT 9
45620: PUSH
45621: LD_INT 20
45623: PUSH
45624: LD_INT 19
45626: PUSH
45627: LD_INT 21
45629: PUSH
45630: LD_INT 24
45632: PUSH
45633: LD_INT 22
45635: PUSH
45636: LD_INT 25
45638: PUSH
45639: LD_INT 28
45641: PUSH
45642: LD_INT 29
45644: PUSH
45645: LD_INT 30
45647: PUSH
45648: LD_INT 31
45650: PUSH
45651: LD_INT 37
45653: PUSH
45654: LD_INT 38
45656: PUSH
45657: LD_INT 32
45659: PUSH
45660: LD_INT 27
45662: PUSH
45663: LD_INT 33
45665: PUSH
45666: LD_INT 69
45668: PUSH
45669: LD_INT 39
45671: PUSH
45672: LD_INT 34
45674: PUSH
45675: LD_INT 40
45677: PUSH
45678: LD_INT 71
45680: PUSH
45681: LD_INT 23
45683: PUSH
45684: LD_INT 44
45686: PUSH
45687: LD_INT 48
45689: PUSH
45690: LD_INT 49
45692: PUSH
45693: LD_INT 50
45695: PUSH
45696: LD_INT 51
45698: PUSH
45699: LD_INT 52
45701: PUSH
45702: LD_INT 53
45704: PUSH
45705: LD_INT 54
45707: PUSH
45708: LD_INT 55
45710: PUSH
45711: LD_INT 56
45713: PUSH
45714: LD_INT 57
45716: PUSH
45717: LD_INT 58
45719: PUSH
45720: LD_INT 59
45722: PUSH
45723: LD_INT 63
45725: PUSH
45726: LD_INT 64
45728: PUSH
45729: LD_INT 65
45731: PUSH
45732: LD_INT 82
45734: PUSH
45735: LD_INT 83
45737: PUSH
45738: LD_INT 84
45740: PUSH
45741: LD_INT 85
45743: PUSH
45744: LD_INT 86
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: ST_TO_ADDR
45802: GO 45805
45804: POP
// if state > - 1 and state < 3 then
45805: LD_VAR 0 3
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: GREATER
45814: PUSH
45815: LD_VAR 0 3
45819: PUSH
45820: LD_INT 3
45822: LESS
45823: AND
45824: IFFALSE 45881
// for i in result do
45826: LD_ADDR_VAR 0 5
45830: PUSH
45831: LD_VAR 0 4
45835: PUSH
45836: FOR_IN
45837: IFFALSE 45879
// if GetTech ( i , side ) <> state then
45839: LD_VAR 0 5
45843: PPUSH
45844: LD_VAR 0 1
45848: PPUSH
45849: CALL_OW 321
45853: PUSH
45854: LD_VAR 0 3
45858: NONEQUAL
45859: IFFALSE 45877
// result := result diff i ;
45861: LD_ADDR_VAR 0 4
45865: PUSH
45866: LD_VAR 0 4
45870: PUSH
45871: LD_VAR 0 5
45875: DIFF
45876: ST_TO_ADDR
45877: GO 45836
45879: POP
45880: POP
// end ;
45881: LD_VAR 0 4
45885: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45886: LD_INT 0
45888: PPUSH
45889: PPUSH
45890: PPUSH
// result := true ;
45891: LD_ADDR_VAR 0 3
45895: PUSH
45896: LD_INT 1
45898: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45899: LD_ADDR_VAR 0 5
45903: PUSH
45904: LD_VAR 0 2
45908: PPUSH
45909: CALL_OW 480
45913: ST_TO_ADDR
// if not tmp then
45914: LD_VAR 0 5
45918: NOT
45919: IFFALSE 45923
// exit ;
45921: GO 45972
// for i in tmp do
45923: LD_ADDR_VAR 0 4
45927: PUSH
45928: LD_VAR 0 5
45932: PUSH
45933: FOR_IN
45934: IFFALSE 45970
// if GetTech ( i , side ) <> state_researched then
45936: LD_VAR 0 4
45940: PPUSH
45941: LD_VAR 0 1
45945: PPUSH
45946: CALL_OW 321
45950: PUSH
45951: LD_INT 2
45953: NONEQUAL
45954: IFFALSE 45968
// begin result := false ;
45956: LD_ADDR_VAR 0 3
45960: PUSH
45961: LD_INT 0
45963: ST_TO_ADDR
// exit ;
45964: POP
45965: POP
45966: GO 45972
// end ;
45968: GO 45933
45970: POP
45971: POP
// end ;
45972: LD_VAR 0 3
45976: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45977: LD_INT 0
45979: PPUSH
45980: PPUSH
45981: PPUSH
45982: PPUSH
45983: PPUSH
45984: PPUSH
45985: PPUSH
45986: PPUSH
45987: PPUSH
45988: PPUSH
45989: PPUSH
45990: PPUSH
45991: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45992: LD_VAR 0 1
45996: NOT
45997: PUSH
45998: LD_VAR 0 1
46002: PPUSH
46003: CALL_OW 257
46007: PUSH
46008: LD_INT 9
46010: NONEQUAL
46011: OR
46012: IFFALSE 46016
// exit ;
46014: GO 46589
// side := GetSide ( unit ) ;
46016: LD_ADDR_VAR 0 9
46020: PUSH
46021: LD_VAR 0 1
46025: PPUSH
46026: CALL_OW 255
46030: ST_TO_ADDR
// tech_space := tech_spacanom ;
46031: LD_ADDR_VAR 0 12
46035: PUSH
46036: LD_INT 29
46038: ST_TO_ADDR
// tech_time := tech_taurad ;
46039: LD_ADDR_VAR 0 13
46043: PUSH
46044: LD_INT 28
46046: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
46047: LD_ADDR_VAR 0 11
46051: PUSH
46052: LD_VAR 0 1
46056: PPUSH
46057: CALL_OW 310
46061: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
46062: LD_VAR 0 11
46066: PPUSH
46067: CALL_OW 247
46071: PUSH
46072: LD_INT 2
46074: EQUAL
46075: IFFALSE 46079
// exit ;
46077: GO 46589
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46079: LD_ADDR_VAR 0 8
46083: PUSH
46084: LD_INT 81
46086: PUSH
46087: LD_VAR 0 9
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 3
46098: PUSH
46099: LD_INT 21
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PPUSH
46117: CALL_OW 69
46121: ST_TO_ADDR
// if not tmp then
46122: LD_VAR 0 8
46126: NOT
46127: IFFALSE 46131
// exit ;
46129: GO 46589
// if in_unit then
46131: LD_VAR 0 11
46135: IFFALSE 46159
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
46137: LD_ADDR_VAR 0 10
46141: PUSH
46142: LD_VAR 0 8
46146: PPUSH
46147: LD_VAR 0 11
46151: PPUSH
46152: CALL_OW 74
46156: ST_TO_ADDR
46157: GO 46179
// enemy := NearestUnitToUnit ( tmp , unit ) ;
46159: LD_ADDR_VAR 0 10
46163: PUSH
46164: LD_VAR 0 8
46168: PPUSH
46169: LD_VAR 0 1
46173: PPUSH
46174: CALL_OW 74
46178: ST_TO_ADDR
// if not enemy then
46179: LD_VAR 0 10
46183: NOT
46184: IFFALSE 46188
// exit ;
46186: GO 46589
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
46188: LD_VAR 0 11
46192: PUSH
46193: LD_VAR 0 11
46197: PPUSH
46198: LD_VAR 0 10
46202: PPUSH
46203: CALL_OW 296
46207: PUSH
46208: LD_INT 13
46210: GREATER
46211: AND
46212: PUSH
46213: LD_VAR 0 1
46217: PPUSH
46218: LD_VAR 0 10
46222: PPUSH
46223: CALL_OW 296
46227: PUSH
46228: LD_INT 12
46230: GREATER
46231: OR
46232: IFFALSE 46236
// exit ;
46234: GO 46589
// missile := [ 1 ] ;
46236: LD_ADDR_VAR 0 14
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: ST_TO_ADDR
// if Researched ( side , tech_space ) then
46247: LD_VAR 0 9
46251: PPUSH
46252: LD_VAR 0 12
46256: PPUSH
46257: CALL_OW 325
46261: IFFALSE 46290
// missile := Insert ( missile , missile + 1 , 2 ) ;
46263: LD_ADDR_VAR 0 14
46267: PUSH
46268: LD_VAR 0 14
46272: PPUSH
46273: LD_VAR 0 14
46277: PUSH
46278: LD_INT 1
46280: PLUS
46281: PPUSH
46282: LD_INT 2
46284: PPUSH
46285: CALL_OW 2
46289: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
46290: LD_VAR 0 9
46294: PPUSH
46295: LD_VAR 0 13
46299: PPUSH
46300: CALL_OW 325
46304: PUSH
46305: LD_VAR 0 10
46309: PPUSH
46310: CALL_OW 255
46314: PPUSH
46315: LD_VAR 0 13
46319: PPUSH
46320: CALL_OW 325
46324: NOT
46325: AND
46326: IFFALSE 46355
// missile := Insert ( missile , missile + 1 , 3 ) ;
46328: LD_ADDR_VAR 0 14
46332: PUSH
46333: LD_VAR 0 14
46337: PPUSH
46338: LD_VAR 0 14
46342: PUSH
46343: LD_INT 1
46345: PLUS
46346: PPUSH
46347: LD_INT 3
46349: PPUSH
46350: CALL_OW 2
46354: ST_TO_ADDR
// if missile < 2 then
46355: LD_VAR 0 14
46359: PUSH
46360: LD_INT 2
46362: LESS
46363: IFFALSE 46367
// exit ;
46365: GO 46589
// x := GetX ( enemy ) ;
46367: LD_ADDR_VAR 0 4
46371: PUSH
46372: LD_VAR 0 10
46376: PPUSH
46377: CALL_OW 250
46381: ST_TO_ADDR
// y := GetY ( enemy ) ;
46382: LD_ADDR_VAR 0 5
46386: PUSH
46387: LD_VAR 0 10
46391: PPUSH
46392: CALL_OW 251
46396: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
46397: LD_ADDR_VAR 0 6
46401: PUSH
46402: LD_VAR 0 4
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PPUSH
46411: LD_INT 1
46413: PPUSH
46414: CALL_OW 12
46418: PLUS
46419: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
46420: LD_ADDR_VAR 0 7
46424: PUSH
46425: LD_VAR 0 5
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PPUSH
46434: LD_INT 1
46436: PPUSH
46437: CALL_OW 12
46441: PLUS
46442: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46443: LD_VAR 0 6
46447: PPUSH
46448: LD_VAR 0 7
46452: PPUSH
46453: CALL_OW 488
46457: NOT
46458: IFFALSE 46480
// begin _x := x ;
46460: LD_ADDR_VAR 0 6
46464: PUSH
46465: LD_VAR 0 4
46469: ST_TO_ADDR
// _y := y ;
46470: LD_ADDR_VAR 0 7
46474: PUSH
46475: LD_VAR 0 5
46479: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
46480: LD_ADDR_VAR 0 3
46484: PUSH
46485: LD_INT 1
46487: PPUSH
46488: LD_VAR 0 14
46492: PPUSH
46493: CALL_OW 12
46497: ST_TO_ADDR
// case i of 1 :
46498: LD_VAR 0 3
46502: PUSH
46503: LD_INT 1
46505: DOUBLE
46506: EQUAL
46507: IFTRUE 46511
46509: GO 46528
46511: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
46512: LD_VAR 0 1
46516: PPUSH
46517: LD_VAR 0 10
46521: PPUSH
46522: CALL_OW 115
46526: GO 46589
46528: LD_INT 2
46530: DOUBLE
46531: EQUAL
46532: IFTRUE 46536
46534: GO 46558
46536: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
46537: LD_VAR 0 1
46541: PPUSH
46542: LD_VAR 0 6
46546: PPUSH
46547: LD_VAR 0 7
46551: PPUSH
46552: CALL_OW 153
46556: GO 46589
46558: LD_INT 3
46560: DOUBLE
46561: EQUAL
46562: IFTRUE 46566
46564: GO 46588
46566: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
46567: LD_VAR 0 1
46571: PPUSH
46572: LD_VAR 0 6
46576: PPUSH
46577: LD_VAR 0 7
46581: PPUSH
46582: CALL_OW 154
46586: GO 46589
46588: POP
// end ;
46589: LD_VAR 0 2
46593: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
46594: LD_INT 0
46596: PPUSH
46597: PPUSH
46598: PPUSH
46599: PPUSH
46600: PPUSH
46601: PPUSH
// if not unit or not building then
46602: LD_VAR 0 1
46606: NOT
46607: PUSH
46608: LD_VAR 0 2
46612: NOT
46613: OR
46614: IFFALSE 46618
// exit ;
46616: GO 46776
// x := GetX ( building ) ;
46618: LD_ADDR_VAR 0 5
46622: PUSH
46623: LD_VAR 0 2
46627: PPUSH
46628: CALL_OW 250
46632: ST_TO_ADDR
// y := GetY ( building ) ;
46633: LD_ADDR_VAR 0 6
46637: PUSH
46638: LD_VAR 0 2
46642: PPUSH
46643: CALL_OW 251
46647: ST_TO_ADDR
// for i = 0 to 5 do
46648: LD_ADDR_VAR 0 4
46652: PUSH
46653: DOUBLE
46654: LD_INT 0
46656: DEC
46657: ST_TO_ADDR
46658: LD_INT 5
46660: PUSH
46661: FOR_TO
46662: IFFALSE 46774
// begin _x := ShiftX ( x , i , 3 ) ;
46664: LD_ADDR_VAR 0 7
46668: PUSH
46669: LD_VAR 0 5
46673: PPUSH
46674: LD_VAR 0 4
46678: PPUSH
46679: LD_INT 3
46681: PPUSH
46682: CALL_OW 272
46686: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
46687: LD_ADDR_VAR 0 8
46691: PUSH
46692: LD_VAR 0 6
46696: PPUSH
46697: LD_VAR 0 4
46701: PPUSH
46702: LD_INT 3
46704: PPUSH
46705: CALL_OW 273
46709: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46710: LD_VAR 0 7
46714: PPUSH
46715: LD_VAR 0 8
46719: PPUSH
46720: CALL_OW 488
46724: NOT
46725: IFFALSE 46729
// continue ;
46727: GO 46661
// if HexInfo ( _x , _y ) = 0 then
46729: LD_VAR 0 7
46733: PPUSH
46734: LD_VAR 0 8
46738: PPUSH
46739: CALL_OW 428
46743: PUSH
46744: LD_INT 0
46746: EQUAL
46747: IFFALSE 46772
// begin ComMoveXY ( unit , _x , _y ) ;
46749: LD_VAR 0 1
46753: PPUSH
46754: LD_VAR 0 7
46758: PPUSH
46759: LD_VAR 0 8
46763: PPUSH
46764: CALL_OW 111
// exit ;
46768: POP
46769: POP
46770: GO 46776
// end ; end ;
46772: GO 46661
46774: POP
46775: POP
// end ;
46776: LD_VAR 0 3
46780: RET
// export function ScanBase ( side , base_area ) ; begin
46781: LD_INT 0
46783: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
46784: LD_ADDR_VAR 0 3
46788: PUSH
46789: LD_VAR 0 2
46793: PPUSH
46794: LD_INT 81
46796: PUSH
46797: LD_VAR 0 1
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PPUSH
46806: CALL_OW 70
46810: ST_TO_ADDR
// end ;
46811: LD_VAR 0 3
46815: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
46816: LD_INT 0
46818: PPUSH
46819: PPUSH
46820: PPUSH
46821: PPUSH
// result := false ;
46822: LD_ADDR_VAR 0 2
46826: PUSH
46827: LD_INT 0
46829: ST_TO_ADDR
// side := GetSide ( unit ) ;
46830: LD_ADDR_VAR 0 3
46834: PUSH
46835: LD_VAR 0 1
46839: PPUSH
46840: CALL_OW 255
46844: ST_TO_ADDR
// nat := GetNation ( unit ) ;
46845: LD_ADDR_VAR 0 4
46849: PUSH
46850: LD_VAR 0 1
46854: PPUSH
46855: CALL_OW 248
46859: ST_TO_ADDR
// case nat of 1 :
46860: LD_VAR 0 4
46864: PUSH
46865: LD_INT 1
46867: DOUBLE
46868: EQUAL
46869: IFTRUE 46873
46871: GO 46884
46873: POP
// tech := tech_lassight ; 2 :
46874: LD_ADDR_VAR 0 5
46878: PUSH
46879: LD_INT 12
46881: ST_TO_ADDR
46882: GO 46923
46884: LD_INT 2
46886: DOUBLE
46887: EQUAL
46888: IFTRUE 46892
46890: GO 46903
46892: POP
// tech := tech_mortar ; 3 :
46893: LD_ADDR_VAR 0 5
46897: PUSH
46898: LD_INT 41
46900: ST_TO_ADDR
46901: GO 46923
46903: LD_INT 3
46905: DOUBLE
46906: EQUAL
46907: IFTRUE 46911
46909: GO 46922
46911: POP
// tech := tech_bazooka ; end ;
46912: LD_ADDR_VAR 0 5
46916: PUSH
46917: LD_INT 44
46919: ST_TO_ADDR
46920: GO 46923
46922: POP
// if Researched ( side , tech ) then
46923: LD_VAR 0 3
46927: PPUSH
46928: LD_VAR 0 5
46932: PPUSH
46933: CALL_OW 325
46937: IFFALSE 46964
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46939: LD_ADDR_VAR 0 2
46943: PUSH
46944: LD_INT 5
46946: PUSH
46947: LD_INT 8
46949: PUSH
46950: LD_INT 9
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: LIST
46957: PUSH
46958: LD_VAR 0 4
46962: ARRAY
46963: ST_TO_ADDR
// end ;
46964: LD_VAR 0 2
46968: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46969: LD_INT 0
46971: PPUSH
46972: PPUSH
46973: PPUSH
// if not mines then
46974: LD_VAR 0 2
46978: NOT
46979: IFFALSE 46983
// exit ;
46981: GO 47127
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46983: LD_ADDR_VAR 0 5
46987: PUSH
46988: LD_INT 81
46990: PUSH
46991: LD_VAR 0 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 3
47002: PUSH
47003: LD_INT 21
47005: PUSH
47006: LD_INT 3
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PPUSH
47021: CALL_OW 69
47025: ST_TO_ADDR
// for i in mines do
47026: LD_ADDR_VAR 0 4
47030: PUSH
47031: LD_VAR 0 2
47035: PUSH
47036: FOR_IN
47037: IFFALSE 47125
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
47039: LD_VAR 0 4
47043: PUSH
47044: LD_INT 1
47046: ARRAY
47047: PPUSH
47048: LD_VAR 0 4
47052: PUSH
47053: LD_INT 2
47055: ARRAY
47056: PPUSH
47057: CALL_OW 458
47061: NOT
47062: IFFALSE 47066
// continue ;
47064: GO 47036
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
47066: LD_VAR 0 4
47070: PUSH
47071: LD_INT 1
47073: ARRAY
47074: PPUSH
47075: LD_VAR 0 4
47079: PUSH
47080: LD_INT 2
47082: ARRAY
47083: PPUSH
47084: CALL_OW 428
47088: PUSH
47089: LD_VAR 0 5
47093: IN
47094: IFFALSE 47123
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
47096: LD_VAR 0 4
47100: PUSH
47101: LD_INT 1
47103: ARRAY
47104: PPUSH
47105: LD_VAR 0 4
47109: PUSH
47110: LD_INT 2
47112: ARRAY
47113: PPUSH
47114: LD_VAR 0 1
47118: PPUSH
47119: CALL_OW 456
// end ;
47123: GO 47036
47125: POP
47126: POP
// end ;
47127: LD_VAR 0 3
47131: RET
// export function Count ( array ) ; var i ; begin
47132: LD_INT 0
47134: PPUSH
47135: PPUSH
// result := 0 ;
47136: LD_ADDR_VAR 0 2
47140: PUSH
47141: LD_INT 0
47143: ST_TO_ADDR
// for i in array do
47144: LD_ADDR_VAR 0 3
47148: PUSH
47149: LD_VAR 0 1
47153: PUSH
47154: FOR_IN
47155: IFFALSE 47179
// if i then
47157: LD_VAR 0 3
47161: IFFALSE 47177
// result := result + 1 ;
47163: LD_ADDR_VAR 0 2
47167: PUSH
47168: LD_VAR 0 2
47172: PUSH
47173: LD_INT 1
47175: PLUS
47176: ST_TO_ADDR
47177: GO 47154
47179: POP
47180: POP
// end ;
47181: LD_VAR 0 2
47185: RET
// export function IsEmpty ( building ) ; begin
47186: LD_INT 0
47188: PPUSH
// if not building then
47189: LD_VAR 0 1
47193: NOT
47194: IFFALSE 47198
// exit ;
47196: GO 47241
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
47198: LD_ADDR_VAR 0 2
47202: PUSH
47203: LD_VAR 0 1
47207: PUSH
47208: LD_INT 22
47210: PUSH
47211: LD_VAR 0 1
47215: PPUSH
47216: CALL_OW 255
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 58
47227: PUSH
47228: EMPTY
47229: LIST
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PPUSH
47235: CALL_OW 69
47239: IN
47240: ST_TO_ADDR
// end ;
47241: LD_VAR 0 2
47245: RET
// export function IsNotFull ( building ) ; begin
47246: LD_INT 0
47248: PPUSH
// if not building then
47249: LD_VAR 0 1
47253: NOT
47254: IFFALSE 47258
// exit ;
47256: GO 47277
// result := UnitsInside ( building ) < 6 ;
47258: LD_ADDR_VAR 0 2
47262: PUSH
47263: LD_VAR 0 1
47267: PPUSH
47268: CALL_OW 313
47272: PUSH
47273: LD_INT 6
47275: LESS
47276: ST_TO_ADDR
// end ;
47277: LD_VAR 0 2
47281: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
47282: LD_INT 0
47284: PPUSH
47285: PPUSH
47286: PPUSH
47287: PPUSH
// tmp := [ ] ;
47288: LD_ADDR_VAR 0 3
47292: PUSH
47293: EMPTY
47294: ST_TO_ADDR
// list := [ ] ;
47295: LD_ADDR_VAR 0 5
47299: PUSH
47300: EMPTY
47301: ST_TO_ADDR
// for i = 16 to 25 do
47302: LD_ADDR_VAR 0 4
47306: PUSH
47307: DOUBLE
47308: LD_INT 16
47310: DEC
47311: ST_TO_ADDR
47312: LD_INT 25
47314: PUSH
47315: FOR_TO
47316: IFFALSE 47389
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
47318: LD_ADDR_VAR 0 3
47322: PUSH
47323: LD_VAR 0 3
47327: PUSH
47328: LD_INT 22
47330: PUSH
47331: LD_VAR 0 1
47335: PPUSH
47336: CALL_OW 255
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 91
47347: PUSH
47348: LD_VAR 0 1
47352: PUSH
47353: LD_INT 6
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 30
47363: PUSH
47364: LD_VAR 0 4
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: LIST
47377: PUSH
47378: EMPTY
47379: LIST
47380: PPUSH
47381: CALL_OW 69
47385: ADD
47386: ST_TO_ADDR
47387: GO 47315
47389: POP
47390: POP
// for i = 1 to tmp do
47391: LD_ADDR_VAR 0 4
47395: PUSH
47396: DOUBLE
47397: LD_INT 1
47399: DEC
47400: ST_TO_ADDR
47401: LD_VAR 0 3
47405: PUSH
47406: FOR_TO
47407: IFFALSE 47495
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
47409: LD_ADDR_VAR 0 5
47413: PUSH
47414: LD_VAR 0 5
47418: PUSH
47419: LD_VAR 0 3
47423: PUSH
47424: LD_VAR 0 4
47428: ARRAY
47429: PPUSH
47430: CALL_OW 266
47434: PUSH
47435: LD_VAR 0 3
47439: PUSH
47440: LD_VAR 0 4
47444: ARRAY
47445: PPUSH
47446: CALL_OW 250
47450: PUSH
47451: LD_VAR 0 3
47455: PUSH
47456: LD_VAR 0 4
47460: ARRAY
47461: PPUSH
47462: CALL_OW 251
47466: PUSH
47467: LD_VAR 0 3
47471: PUSH
47472: LD_VAR 0 4
47476: ARRAY
47477: PPUSH
47478: CALL_OW 254
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: PUSH
47489: EMPTY
47490: LIST
47491: ADD
47492: ST_TO_ADDR
47493: GO 47406
47495: POP
47496: POP
// result := list ;
47497: LD_ADDR_VAR 0 2
47501: PUSH
47502: LD_VAR 0 5
47506: ST_TO_ADDR
// end ;
47507: LD_VAR 0 2
47511: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
47512: LD_INT 0
47514: PPUSH
47515: PPUSH
47516: PPUSH
47517: PPUSH
47518: PPUSH
47519: PPUSH
47520: PPUSH
// if not factory then
47521: LD_VAR 0 1
47525: NOT
47526: IFFALSE 47530
// exit ;
47528: GO 48123
// if control = control_apeman then
47530: LD_VAR 0 4
47534: PUSH
47535: LD_INT 5
47537: EQUAL
47538: IFFALSE 47647
// begin tmp := UnitsInside ( factory ) ;
47540: LD_ADDR_VAR 0 8
47544: PUSH
47545: LD_VAR 0 1
47549: PPUSH
47550: CALL_OW 313
47554: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
47555: LD_VAR 0 8
47559: PPUSH
47560: LD_INT 25
47562: PUSH
47563: LD_INT 12
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PPUSH
47570: CALL_OW 72
47574: NOT
47575: IFFALSE 47585
// control := control_manual ;
47577: LD_ADDR_VAR 0 4
47581: PUSH
47582: LD_INT 1
47584: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
47585: LD_ADDR_VAR 0 8
47589: PUSH
47590: LD_VAR 0 1
47594: PPUSH
47595: CALL 47282 0 1
47599: ST_TO_ADDR
// if tmp then
47600: LD_VAR 0 8
47604: IFFALSE 47647
// begin for i in tmp do
47606: LD_ADDR_VAR 0 7
47610: PUSH
47611: LD_VAR 0 8
47615: PUSH
47616: FOR_IN
47617: IFFALSE 47645
// if i [ 1 ] = b_ext_radio then
47619: LD_VAR 0 7
47623: PUSH
47624: LD_INT 1
47626: ARRAY
47627: PUSH
47628: LD_INT 22
47630: EQUAL
47631: IFFALSE 47643
// begin control := control_remote ;
47633: LD_ADDR_VAR 0 4
47637: PUSH
47638: LD_INT 2
47640: ST_TO_ADDR
// break ;
47641: GO 47645
// end ;
47643: GO 47616
47645: POP
47646: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47647: LD_VAR 0 1
47651: PPUSH
47652: LD_VAR 0 2
47656: PPUSH
47657: LD_VAR 0 3
47661: PPUSH
47662: LD_VAR 0 4
47666: PPUSH
47667: LD_VAR 0 5
47671: PPUSH
47672: CALL_OW 448
47676: IFFALSE 47711
// begin result := [ chassis , engine , control , weapon ] ;
47678: LD_ADDR_VAR 0 6
47682: PUSH
47683: LD_VAR 0 2
47687: PUSH
47688: LD_VAR 0 3
47692: PUSH
47693: LD_VAR 0 4
47697: PUSH
47698: LD_VAR 0 5
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// exit ;
47709: GO 48123
// end ; _chassis := AvailableChassisList ( factory ) ;
47711: LD_ADDR_VAR 0 9
47715: PUSH
47716: LD_VAR 0 1
47720: PPUSH
47721: CALL_OW 475
47725: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
47726: LD_ADDR_VAR 0 11
47730: PUSH
47731: LD_VAR 0 1
47735: PPUSH
47736: CALL_OW 476
47740: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
47741: LD_ADDR_VAR 0 12
47745: PUSH
47746: LD_VAR 0 1
47750: PPUSH
47751: CALL_OW 477
47755: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
47756: LD_ADDR_VAR 0 10
47760: PUSH
47761: LD_VAR 0 1
47765: PPUSH
47766: CALL_OW 478
47770: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
47771: LD_VAR 0 9
47775: NOT
47776: PUSH
47777: LD_VAR 0 11
47781: NOT
47782: OR
47783: PUSH
47784: LD_VAR 0 12
47788: NOT
47789: OR
47790: PUSH
47791: LD_VAR 0 10
47795: NOT
47796: OR
47797: IFFALSE 47832
// begin result := [ chassis , engine , control , weapon ] ;
47799: LD_ADDR_VAR 0 6
47803: PUSH
47804: LD_VAR 0 2
47808: PUSH
47809: LD_VAR 0 3
47813: PUSH
47814: LD_VAR 0 4
47818: PUSH
47819: LD_VAR 0 5
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: ST_TO_ADDR
// exit ;
47830: GO 48123
// end ; if not chassis in _chassis then
47832: LD_VAR 0 2
47836: PUSH
47837: LD_VAR 0 9
47841: IN
47842: NOT
47843: IFFALSE 47869
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
47845: LD_ADDR_VAR 0 2
47849: PUSH
47850: LD_VAR 0 9
47854: PUSH
47855: LD_INT 1
47857: PPUSH
47858: LD_VAR 0 9
47862: PPUSH
47863: CALL_OW 12
47867: ARRAY
47868: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
47869: LD_VAR 0 2
47873: PPUSH
47874: LD_VAR 0 3
47878: PPUSH
47879: CALL 48128 0 2
47883: NOT
47884: IFFALSE 47943
// repeat engine := _engine [ 1 ] ;
47886: LD_ADDR_VAR 0 3
47890: PUSH
47891: LD_VAR 0 11
47895: PUSH
47896: LD_INT 1
47898: ARRAY
47899: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
47900: LD_ADDR_VAR 0 11
47904: PUSH
47905: LD_VAR 0 11
47909: PPUSH
47910: LD_INT 1
47912: PPUSH
47913: CALL_OW 3
47917: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
47918: LD_VAR 0 2
47922: PPUSH
47923: LD_VAR 0 3
47927: PPUSH
47928: CALL 48128 0 2
47932: PUSH
47933: LD_VAR 0 11
47937: PUSH
47938: EMPTY
47939: EQUAL
47940: OR
47941: IFFALSE 47886
// if not control in _control then
47943: LD_VAR 0 4
47947: PUSH
47948: LD_VAR 0 12
47952: IN
47953: NOT
47954: IFFALSE 47980
// control := _control [ rand ( 1 , _control ) ] ;
47956: LD_ADDR_VAR 0 4
47960: PUSH
47961: LD_VAR 0 12
47965: PUSH
47966: LD_INT 1
47968: PPUSH
47969: LD_VAR 0 12
47973: PPUSH
47974: CALL_OW 12
47978: ARRAY
47979: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
47980: LD_VAR 0 2
47984: PPUSH
47985: LD_VAR 0 5
47989: PPUSH
47990: CALL 48348 0 2
47994: NOT
47995: IFFALSE 48054
// repeat weapon := _weapon [ 1 ] ;
47997: LD_ADDR_VAR 0 5
48001: PUSH
48002: LD_VAR 0 10
48006: PUSH
48007: LD_INT 1
48009: ARRAY
48010: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
48011: LD_ADDR_VAR 0 10
48015: PUSH
48016: LD_VAR 0 10
48020: PPUSH
48021: LD_INT 1
48023: PPUSH
48024: CALL_OW 3
48028: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
48029: LD_VAR 0 2
48033: PPUSH
48034: LD_VAR 0 5
48038: PPUSH
48039: CALL 48348 0 2
48043: PUSH
48044: LD_VAR 0 10
48048: PUSH
48049: EMPTY
48050: EQUAL
48051: OR
48052: IFFALSE 47997
// result := [ ] ;
48054: LD_ADDR_VAR 0 6
48058: PUSH
48059: EMPTY
48060: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
48061: LD_VAR 0 1
48065: PPUSH
48066: LD_VAR 0 2
48070: PPUSH
48071: LD_VAR 0 3
48075: PPUSH
48076: LD_VAR 0 4
48080: PPUSH
48081: LD_VAR 0 5
48085: PPUSH
48086: CALL_OW 448
48090: IFFALSE 48123
// result := [ chassis , engine , control , weapon ] ;
48092: LD_ADDR_VAR 0 6
48096: PUSH
48097: LD_VAR 0 2
48101: PUSH
48102: LD_VAR 0 3
48106: PUSH
48107: LD_VAR 0 4
48111: PUSH
48112: LD_VAR 0 5
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: ST_TO_ADDR
// end ;
48123: LD_VAR 0 6
48127: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
48128: LD_INT 0
48130: PPUSH
// if not chassis or not engine then
48131: LD_VAR 0 1
48135: NOT
48136: PUSH
48137: LD_VAR 0 2
48141: NOT
48142: OR
48143: IFFALSE 48147
// exit ;
48145: GO 48343
// case engine of engine_solar :
48147: LD_VAR 0 2
48151: PUSH
48152: LD_INT 2
48154: DOUBLE
48155: EQUAL
48156: IFTRUE 48160
48158: GO 48198
48160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
48161: LD_ADDR_VAR 0 3
48165: PUSH
48166: LD_INT 11
48168: PUSH
48169: LD_INT 12
48171: PUSH
48172: LD_INT 13
48174: PUSH
48175: LD_INT 14
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 3
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: ST_TO_ADDR
48196: GO 48327
48198: LD_INT 1
48200: DOUBLE
48201: EQUAL
48202: IFTRUE 48206
48204: GO 48268
48206: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
48207: LD_ADDR_VAR 0 3
48211: PUSH
48212: LD_INT 11
48214: PUSH
48215: LD_INT 12
48217: PUSH
48218: LD_INT 13
48220: PUSH
48221: LD_INT 14
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: LD_INT 4
48235: PUSH
48236: LD_INT 5
48238: PUSH
48239: LD_INT 21
48241: PUSH
48242: LD_INT 23
48244: PUSH
48245: LD_INT 22
48247: PUSH
48248: LD_INT 24
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: ST_TO_ADDR
48266: GO 48327
48268: LD_INT 3
48270: DOUBLE
48271: EQUAL
48272: IFTRUE 48276
48274: GO 48326
48276: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48277: LD_ADDR_VAR 0 3
48281: PUSH
48282: LD_INT 13
48284: PUSH
48285: LD_INT 14
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: LD_INT 3
48293: PUSH
48294: LD_INT 4
48296: PUSH
48297: LD_INT 5
48299: PUSH
48300: LD_INT 21
48302: PUSH
48303: LD_INT 22
48305: PUSH
48306: LD_INT 23
48308: PUSH
48309: LD_INT 24
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: ST_TO_ADDR
48324: GO 48327
48326: POP
// result := ( chassis in result ) ;
48327: LD_ADDR_VAR 0 3
48331: PUSH
48332: LD_VAR 0 1
48336: PUSH
48337: LD_VAR 0 3
48341: IN
48342: ST_TO_ADDR
// end ;
48343: LD_VAR 0 3
48347: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
48348: LD_INT 0
48350: PPUSH
// if not chassis or not weapon then
48351: LD_VAR 0 1
48355: NOT
48356: PUSH
48357: LD_VAR 0 2
48361: NOT
48362: OR
48363: IFFALSE 48367
// exit ;
48365: GO 49429
// case weapon of us_machine_gun :
48367: LD_VAR 0 2
48371: PUSH
48372: LD_INT 2
48374: DOUBLE
48375: EQUAL
48376: IFTRUE 48380
48378: GO 48410
48380: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
48381: LD_ADDR_VAR 0 3
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: LD_INT 3
48394: PUSH
48395: LD_INT 4
48397: PUSH
48398: LD_INT 5
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
48408: GO 49413
48410: LD_INT 3
48412: DOUBLE
48413: EQUAL
48414: IFTRUE 48418
48416: GO 48448
48418: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
48419: LD_ADDR_VAR 0 3
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 3
48432: PUSH
48433: LD_INT 4
48435: PUSH
48436: LD_INT 5
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: ST_TO_ADDR
48446: GO 49413
48448: LD_INT 11
48450: DOUBLE
48451: EQUAL
48452: IFTRUE 48456
48454: GO 48486
48456: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
48457: LD_ADDR_VAR 0 3
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: LD_INT 3
48470: PUSH
48471: LD_INT 4
48473: PUSH
48474: LD_INT 5
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: ST_TO_ADDR
48484: GO 49413
48486: LD_INT 4
48488: DOUBLE
48489: EQUAL
48490: IFTRUE 48494
48492: GO 48520
48494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
48495: LD_ADDR_VAR 0 3
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: LD_INT 4
48508: PUSH
48509: LD_INT 5
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: ST_TO_ADDR
48518: GO 49413
48520: LD_INT 5
48522: DOUBLE
48523: EQUAL
48524: IFTRUE 48528
48526: GO 48554
48528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
48529: LD_ADDR_VAR 0 3
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: LD_INT 3
48539: PUSH
48540: LD_INT 4
48542: PUSH
48543: LD_INT 5
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: ST_TO_ADDR
48552: GO 49413
48554: LD_INT 9
48556: DOUBLE
48557: EQUAL
48558: IFTRUE 48562
48560: GO 48588
48562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
48563: LD_ADDR_VAR 0 3
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: LD_INT 3
48573: PUSH
48574: LD_INT 4
48576: PUSH
48577: LD_INT 5
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: ST_TO_ADDR
48586: GO 49413
48588: LD_INT 7
48590: DOUBLE
48591: EQUAL
48592: IFTRUE 48596
48594: GO 48622
48596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
48597: LD_ADDR_VAR 0 3
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: LD_INT 3
48607: PUSH
48608: LD_INT 4
48610: PUSH
48611: LD_INT 5
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: ST_TO_ADDR
48620: GO 49413
48622: LD_INT 12
48624: DOUBLE
48625: EQUAL
48626: IFTRUE 48630
48628: GO 48656
48630: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
48631: LD_ADDR_VAR 0 3
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: LD_INT 3
48641: PUSH
48642: LD_INT 4
48644: PUSH
48645: LD_INT 5
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: ST_TO_ADDR
48654: GO 49413
48656: LD_INT 13
48658: DOUBLE
48659: EQUAL
48660: IFTRUE 48664
48662: GO 48690
48664: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
48665: LD_ADDR_VAR 0 3
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: LD_INT 4
48678: PUSH
48679: LD_INT 5
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: ST_TO_ADDR
48688: GO 49413
48690: LD_INT 14
48692: DOUBLE
48693: EQUAL
48694: IFTRUE 48698
48696: GO 48716
48698: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
48699: LD_ADDR_VAR 0 3
48703: PUSH
48704: LD_INT 4
48706: PUSH
48707: LD_INT 5
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: ST_TO_ADDR
48714: GO 49413
48716: LD_INT 6
48718: DOUBLE
48719: EQUAL
48720: IFTRUE 48724
48722: GO 48742
48724: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
48725: LD_ADDR_VAR 0 3
48729: PUSH
48730: LD_INT 4
48732: PUSH
48733: LD_INT 5
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: ST_TO_ADDR
48740: GO 49413
48742: LD_INT 10
48744: DOUBLE
48745: EQUAL
48746: IFTRUE 48750
48748: GO 48768
48750: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
48751: LD_ADDR_VAR 0 3
48755: PUSH
48756: LD_INT 4
48758: PUSH
48759: LD_INT 5
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: ST_TO_ADDR
48766: GO 49413
48768: LD_INT 22
48770: DOUBLE
48771: EQUAL
48772: IFTRUE 48776
48774: GO 48802
48776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
48777: LD_ADDR_VAR 0 3
48781: PUSH
48782: LD_INT 11
48784: PUSH
48785: LD_INT 12
48787: PUSH
48788: LD_INT 13
48790: PUSH
48791: LD_INT 14
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: ST_TO_ADDR
48800: GO 49413
48802: LD_INT 23
48804: DOUBLE
48805: EQUAL
48806: IFTRUE 48810
48808: GO 48836
48810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
48811: LD_ADDR_VAR 0 3
48815: PUSH
48816: LD_INT 11
48818: PUSH
48819: LD_INT 12
48821: PUSH
48822: LD_INT 13
48824: PUSH
48825: LD_INT 14
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: ST_TO_ADDR
48834: GO 49413
48836: LD_INT 24
48838: DOUBLE
48839: EQUAL
48840: IFTRUE 48844
48842: GO 48870
48844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
48845: LD_ADDR_VAR 0 3
48849: PUSH
48850: LD_INT 11
48852: PUSH
48853: LD_INT 12
48855: PUSH
48856: LD_INT 13
48858: PUSH
48859: LD_INT 14
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: ST_TO_ADDR
48868: GO 49413
48870: LD_INT 30
48872: DOUBLE
48873: EQUAL
48874: IFTRUE 48878
48876: GO 48904
48878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
48879: LD_ADDR_VAR 0 3
48883: PUSH
48884: LD_INT 11
48886: PUSH
48887: LD_INT 12
48889: PUSH
48890: LD_INT 13
48892: PUSH
48893: LD_INT 14
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: ST_TO_ADDR
48902: GO 49413
48904: LD_INT 25
48906: DOUBLE
48907: EQUAL
48908: IFTRUE 48912
48910: GO 48930
48912: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
48913: LD_ADDR_VAR 0 3
48917: PUSH
48918: LD_INT 13
48920: PUSH
48921: LD_INT 14
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: ST_TO_ADDR
48928: GO 49413
48930: LD_INT 27
48932: DOUBLE
48933: EQUAL
48934: IFTRUE 48938
48936: GO 48956
48938: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
48939: LD_ADDR_VAR 0 3
48943: PUSH
48944: LD_INT 13
48946: PUSH
48947: LD_INT 14
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: ST_TO_ADDR
48954: GO 49413
48956: LD_EXP 53
48960: DOUBLE
48961: EQUAL
48962: IFTRUE 48966
48964: GO 48992
48966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48967: LD_ADDR_VAR 0 3
48971: PUSH
48972: LD_INT 11
48974: PUSH
48975: LD_INT 12
48977: PUSH
48978: LD_INT 13
48980: PUSH
48981: LD_INT 14
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: ST_TO_ADDR
48990: GO 49413
48992: LD_INT 28
48994: DOUBLE
48995: EQUAL
48996: IFTRUE 49000
48998: GO 49018
49000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
49001: LD_ADDR_VAR 0 3
49005: PUSH
49006: LD_INT 13
49008: PUSH
49009: LD_INT 14
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: ST_TO_ADDR
49016: GO 49413
49018: LD_INT 29
49020: DOUBLE
49021: EQUAL
49022: IFTRUE 49026
49024: GO 49044
49026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
49027: LD_ADDR_VAR 0 3
49031: PUSH
49032: LD_INT 13
49034: PUSH
49035: LD_INT 14
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: ST_TO_ADDR
49042: GO 49413
49044: LD_INT 31
49046: DOUBLE
49047: EQUAL
49048: IFTRUE 49052
49050: GO 49070
49052: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
49053: LD_ADDR_VAR 0 3
49057: PUSH
49058: LD_INT 13
49060: PUSH
49061: LD_INT 14
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: ST_TO_ADDR
49068: GO 49413
49070: LD_INT 26
49072: DOUBLE
49073: EQUAL
49074: IFTRUE 49078
49076: GO 49096
49078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
49079: LD_ADDR_VAR 0 3
49083: PUSH
49084: LD_INT 13
49086: PUSH
49087: LD_INT 14
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: ST_TO_ADDR
49094: GO 49413
49096: LD_INT 42
49098: DOUBLE
49099: EQUAL
49100: IFTRUE 49104
49102: GO 49130
49104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
49105: LD_ADDR_VAR 0 3
49109: PUSH
49110: LD_INT 21
49112: PUSH
49113: LD_INT 22
49115: PUSH
49116: LD_INT 23
49118: PUSH
49119: LD_INT 24
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: ST_TO_ADDR
49128: GO 49413
49130: LD_INT 43
49132: DOUBLE
49133: EQUAL
49134: IFTRUE 49138
49136: GO 49164
49138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
49139: LD_ADDR_VAR 0 3
49143: PUSH
49144: LD_INT 21
49146: PUSH
49147: LD_INT 22
49149: PUSH
49150: LD_INT 23
49152: PUSH
49153: LD_INT 24
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: ST_TO_ADDR
49162: GO 49413
49164: LD_INT 44
49166: DOUBLE
49167: EQUAL
49168: IFTRUE 49172
49170: GO 49198
49172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
49173: LD_ADDR_VAR 0 3
49177: PUSH
49178: LD_INT 21
49180: PUSH
49181: LD_INT 22
49183: PUSH
49184: LD_INT 23
49186: PUSH
49187: LD_INT 24
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: ST_TO_ADDR
49196: GO 49413
49198: LD_INT 45
49200: DOUBLE
49201: EQUAL
49202: IFTRUE 49206
49204: GO 49232
49206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
49207: LD_ADDR_VAR 0 3
49211: PUSH
49212: LD_INT 21
49214: PUSH
49215: LD_INT 22
49217: PUSH
49218: LD_INT 23
49220: PUSH
49221: LD_INT 24
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: ST_TO_ADDR
49230: GO 49413
49232: LD_INT 49
49234: DOUBLE
49235: EQUAL
49236: IFTRUE 49240
49238: GO 49266
49240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
49241: LD_ADDR_VAR 0 3
49245: PUSH
49246: LD_INT 21
49248: PUSH
49249: LD_INT 22
49251: PUSH
49252: LD_INT 23
49254: PUSH
49255: LD_INT 24
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: ST_TO_ADDR
49264: GO 49413
49266: LD_INT 51
49268: DOUBLE
49269: EQUAL
49270: IFTRUE 49274
49272: GO 49300
49274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
49275: LD_ADDR_VAR 0 3
49279: PUSH
49280: LD_INT 21
49282: PUSH
49283: LD_INT 22
49285: PUSH
49286: LD_INT 23
49288: PUSH
49289: LD_INT 24
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: ST_TO_ADDR
49298: GO 49413
49300: LD_INT 52
49302: DOUBLE
49303: EQUAL
49304: IFTRUE 49308
49306: GO 49334
49308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
49309: LD_ADDR_VAR 0 3
49313: PUSH
49314: LD_INT 21
49316: PUSH
49317: LD_INT 22
49319: PUSH
49320: LD_INT 23
49322: PUSH
49323: LD_INT 24
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: ST_TO_ADDR
49332: GO 49413
49334: LD_INT 53
49336: DOUBLE
49337: EQUAL
49338: IFTRUE 49342
49340: GO 49360
49342: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
49343: LD_ADDR_VAR 0 3
49347: PUSH
49348: LD_INT 23
49350: PUSH
49351: LD_INT 24
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: ST_TO_ADDR
49358: GO 49413
49360: LD_INT 46
49362: DOUBLE
49363: EQUAL
49364: IFTRUE 49368
49366: GO 49386
49368: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
49369: LD_ADDR_VAR 0 3
49373: PUSH
49374: LD_INT 23
49376: PUSH
49377: LD_INT 24
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: ST_TO_ADDR
49384: GO 49413
49386: LD_INT 47
49388: DOUBLE
49389: EQUAL
49390: IFTRUE 49394
49392: GO 49412
49394: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49395: LD_ADDR_VAR 0 3
49399: PUSH
49400: LD_INT 23
49402: PUSH
49403: LD_INT 24
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: ST_TO_ADDR
49410: GO 49413
49412: POP
// result := ( chassis in result ) ;
49413: LD_ADDR_VAR 0 3
49417: PUSH
49418: LD_VAR 0 1
49422: PUSH
49423: LD_VAR 0 3
49427: IN
49428: ST_TO_ADDR
// end ;
49429: LD_VAR 0 3
49433: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
49434: LD_INT 0
49436: PPUSH
49437: PPUSH
49438: PPUSH
49439: PPUSH
49440: PPUSH
49441: PPUSH
49442: PPUSH
// result := array ;
49443: LD_ADDR_VAR 0 5
49447: PUSH
49448: LD_VAR 0 1
49452: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
49453: LD_VAR 0 1
49457: NOT
49458: PUSH
49459: LD_VAR 0 2
49463: NOT
49464: OR
49465: PUSH
49466: LD_VAR 0 3
49470: NOT
49471: OR
49472: PUSH
49473: LD_VAR 0 2
49477: PUSH
49478: LD_VAR 0 1
49482: GREATER
49483: OR
49484: PUSH
49485: LD_VAR 0 3
49489: PUSH
49490: LD_VAR 0 1
49494: GREATER
49495: OR
49496: IFFALSE 49500
// exit ;
49498: GO 49796
// if direction then
49500: LD_VAR 0 4
49504: IFFALSE 49568
// begin d := 1 ;
49506: LD_ADDR_VAR 0 9
49510: PUSH
49511: LD_INT 1
49513: ST_TO_ADDR
// if i_from > i_to then
49514: LD_VAR 0 2
49518: PUSH
49519: LD_VAR 0 3
49523: GREATER
49524: IFFALSE 49550
// length := ( array - i_from ) + i_to else
49526: LD_ADDR_VAR 0 11
49530: PUSH
49531: LD_VAR 0 1
49535: PUSH
49536: LD_VAR 0 2
49540: MINUS
49541: PUSH
49542: LD_VAR 0 3
49546: PLUS
49547: ST_TO_ADDR
49548: GO 49566
// length := i_to - i_from ;
49550: LD_ADDR_VAR 0 11
49554: PUSH
49555: LD_VAR 0 3
49559: PUSH
49560: LD_VAR 0 2
49564: MINUS
49565: ST_TO_ADDR
// end else
49566: GO 49629
// begin d := - 1 ;
49568: LD_ADDR_VAR 0 9
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: ST_TO_ADDR
// if i_from > i_to then
49577: LD_VAR 0 2
49581: PUSH
49582: LD_VAR 0 3
49586: GREATER
49587: IFFALSE 49607
// length := i_from - i_to else
49589: LD_ADDR_VAR 0 11
49593: PUSH
49594: LD_VAR 0 2
49598: PUSH
49599: LD_VAR 0 3
49603: MINUS
49604: ST_TO_ADDR
49605: GO 49629
// length := ( array - i_to ) + i_from ;
49607: LD_ADDR_VAR 0 11
49611: PUSH
49612: LD_VAR 0 1
49616: PUSH
49617: LD_VAR 0 3
49621: MINUS
49622: PUSH
49623: LD_VAR 0 2
49627: PLUS
49628: ST_TO_ADDR
// end ; if not length then
49629: LD_VAR 0 11
49633: NOT
49634: IFFALSE 49638
// exit ;
49636: GO 49796
// tmp := array ;
49638: LD_ADDR_VAR 0 10
49642: PUSH
49643: LD_VAR 0 1
49647: ST_TO_ADDR
// for i = 1 to length do
49648: LD_ADDR_VAR 0 6
49652: PUSH
49653: DOUBLE
49654: LD_INT 1
49656: DEC
49657: ST_TO_ADDR
49658: LD_VAR 0 11
49662: PUSH
49663: FOR_TO
49664: IFFALSE 49784
// begin for j = 1 to array do
49666: LD_ADDR_VAR 0 7
49670: PUSH
49671: DOUBLE
49672: LD_INT 1
49674: DEC
49675: ST_TO_ADDR
49676: LD_VAR 0 1
49680: PUSH
49681: FOR_TO
49682: IFFALSE 49770
// begin k := j + d ;
49684: LD_ADDR_VAR 0 8
49688: PUSH
49689: LD_VAR 0 7
49693: PUSH
49694: LD_VAR 0 9
49698: PLUS
49699: ST_TO_ADDR
// if k > array then
49700: LD_VAR 0 8
49704: PUSH
49705: LD_VAR 0 1
49709: GREATER
49710: IFFALSE 49720
// k := 1 ;
49712: LD_ADDR_VAR 0 8
49716: PUSH
49717: LD_INT 1
49719: ST_TO_ADDR
// if not k then
49720: LD_VAR 0 8
49724: NOT
49725: IFFALSE 49737
// k := array ;
49727: LD_ADDR_VAR 0 8
49731: PUSH
49732: LD_VAR 0 1
49736: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
49737: LD_ADDR_VAR 0 10
49741: PUSH
49742: LD_VAR 0 10
49746: PPUSH
49747: LD_VAR 0 8
49751: PPUSH
49752: LD_VAR 0 1
49756: PUSH
49757: LD_VAR 0 7
49761: ARRAY
49762: PPUSH
49763: CALL_OW 1
49767: ST_TO_ADDR
// end ;
49768: GO 49681
49770: POP
49771: POP
// array := tmp ;
49772: LD_ADDR_VAR 0 1
49776: PUSH
49777: LD_VAR 0 10
49781: ST_TO_ADDR
// end ;
49782: GO 49663
49784: POP
49785: POP
// result := array ;
49786: LD_ADDR_VAR 0 5
49790: PUSH
49791: LD_VAR 0 1
49795: ST_TO_ADDR
// end ;
49796: LD_VAR 0 5
49800: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
49801: LD_INT 0
49803: PPUSH
49804: PPUSH
// result := 0 ;
49805: LD_ADDR_VAR 0 3
49809: PUSH
49810: LD_INT 0
49812: ST_TO_ADDR
// if not array or not value in array then
49813: LD_VAR 0 1
49817: NOT
49818: PUSH
49819: LD_VAR 0 2
49823: PUSH
49824: LD_VAR 0 1
49828: IN
49829: NOT
49830: OR
49831: IFFALSE 49835
// exit ;
49833: GO 49889
// for i = 1 to array do
49835: LD_ADDR_VAR 0 4
49839: PUSH
49840: DOUBLE
49841: LD_INT 1
49843: DEC
49844: ST_TO_ADDR
49845: LD_VAR 0 1
49849: PUSH
49850: FOR_TO
49851: IFFALSE 49887
// if value = array [ i ] then
49853: LD_VAR 0 2
49857: PUSH
49858: LD_VAR 0 1
49862: PUSH
49863: LD_VAR 0 4
49867: ARRAY
49868: EQUAL
49869: IFFALSE 49885
// begin result := i ;
49871: LD_ADDR_VAR 0 3
49875: PUSH
49876: LD_VAR 0 4
49880: ST_TO_ADDR
// exit ;
49881: POP
49882: POP
49883: GO 49889
// end ;
49885: GO 49850
49887: POP
49888: POP
// end ;
49889: LD_VAR 0 3
49893: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
49894: LD_INT 0
49896: PPUSH
// vc_chassis := chassis ;
49897: LD_ADDR_OWVAR 37
49901: PUSH
49902: LD_VAR 0 1
49906: ST_TO_ADDR
// vc_engine := engine ;
49907: LD_ADDR_OWVAR 39
49911: PUSH
49912: LD_VAR 0 2
49916: ST_TO_ADDR
// vc_control := control ;
49917: LD_ADDR_OWVAR 38
49921: PUSH
49922: LD_VAR 0 3
49926: ST_TO_ADDR
// vc_weapon := weapon ;
49927: LD_ADDR_OWVAR 40
49931: PUSH
49932: LD_VAR 0 4
49936: ST_TO_ADDR
// vc_fuel_battery := fuel ;
49937: LD_ADDR_OWVAR 41
49941: PUSH
49942: LD_VAR 0 5
49946: ST_TO_ADDR
// end ;
49947: LD_VAR 0 6
49951: RET
// export function WantPlant ( unit ) ; var task ; begin
49952: LD_INT 0
49954: PPUSH
49955: PPUSH
// result := false ;
49956: LD_ADDR_VAR 0 2
49960: PUSH
49961: LD_INT 0
49963: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49964: LD_ADDR_VAR 0 3
49968: PUSH
49969: LD_VAR 0 1
49973: PPUSH
49974: CALL_OW 437
49978: ST_TO_ADDR
// if task then
49979: LD_VAR 0 3
49983: IFFALSE 50011
// if task [ 1 ] [ 1 ] = p then
49985: LD_VAR 0 3
49989: PUSH
49990: LD_INT 1
49992: ARRAY
49993: PUSH
49994: LD_INT 1
49996: ARRAY
49997: PUSH
49998: LD_STRING p
50000: EQUAL
50001: IFFALSE 50011
// result := true ;
50003: LD_ADDR_VAR 0 2
50007: PUSH
50008: LD_INT 1
50010: ST_TO_ADDR
// end ;
50011: LD_VAR 0 2
50015: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
50016: LD_INT 0
50018: PPUSH
50019: PPUSH
50020: PPUSH
50021: PPUSH
// if pos < 1 then
50022: LD_VAR 0 2
50026: PUSH
50027: LD_INT 1
50029: LESS
50030: IFFALSE 50034
// exit ;
50032: GO 50337
// if pos = 1 then
50034: LD_VAR 0 2
50038: PUSH
50039: LD_INT 1
50041: EQUAL
50042: IFFALSE 50075
// result := Replace ( arr , pos [ 1 ] , value ) else
50044: LD_ADDR_VAR 0 4
50048: PUSH
50049: LD_VAR 0 1
50053: PPUSH
50054: LD_VAR 0 2
50058: PUSH
50059: LD_INT 1
50061: ARRAY
50062: PPUSH
50063: LD_VAR 0 3
50067: PPUSH
50068: CALL_OW 1
50072: ST_TO_ADDR
50073: GO 50337
// begin tmp := arr ;
50075: LD_ADDR_VAR 0 6
50079: PUSH
50080: LD_VAR 0 1
50084: ST_TO_ADDR
// s_arr := [ tmp ] ;
50085: LD_ADDR_VAR 0 7
50089: PUSH
50090: LD_VAR 0 6
50094: PUSH
50095: EMPTY
50096: LIST
50097: ST_TO_ADDR
// for i = 1 to pos - 1 do
50098: LD_ADDR_VAR 0 5
50102: PUSH
50103: DOUBLE
50104: LD_INT 1
50106: DEC
50107: ST_TO_ADDR
50108: LD_VAR 0 2
50112: PUSH
50113: LD_INT 1
50115: MINUS
50116: PUSH
50117: FOR_TO
50118: IFFALSE 50163
// begin tmp := tmp [ pos [ i ] ] ;
50120: LD_ADDR_VAR 0 6
50124: PUSH
50125: LD_VAR 0 6
50129: PUSH
50130: LD_VAR 0 2
50134: PUSH
50135: LD_VAR 0 5
50139: ARRAY
50140: ARRAY
50141: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
50142: LD_ADDR_VAR 0 7
50146: PUSH
50147: LD_VAR 0 7
50151: PUSH
50152: LD_VAR 0 6
50156: PUSH
50157: EMPTY
50158: LIST
50159: ADD
50160: ST_TO_ADDR
// end ;
50161: GO 50117
50163: POP
50164: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
50165: LD_ADDR_VAR 0 6
50169: PUSH
50170: LD_VAR 0 6
50174: PPUSH
50175: LD_VAR 0 2
50179: PUSH
50180: LD_VAR 0 2
50184: ARRAY
50185: PPUSH
50186: LD_VAR 0 3
50190: PPUSH
50191: CALL_OW 1
50195: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
50196: LD_ADDR_VAR 0 7
50200: PUSH
50201: LD_VAR 0 7
50205: PPUSH
50206: LD_VAR 0 7
50210: PPUSH
50211: LD_VAR 0 6
50215: PPUSH
50216: CALL_OW 1
50220: ST_TO_ADDR
// for i = s_arr downto 2 do
50221: LD_ADDR_VAR 0 5
50225: PUSH
50226: DOUBLE
50227: LD_VAR 0 7
50231: INC
50232: ST_TO_ADDR
50233: LD_INT 2
50235: PUSH
50236: FOR_DOWNTO
50237: IFFALSE 50321
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
50239: LD_ADDR_VAR 0 6
50243: PUSH
50244: LD_VAR 0 7
50248: PUSH
50249: LD_VAR 0 5
50253: PUSH
50254: LD_INT 1
50256: MINUS
50257: ARRAY
50258: PPUSH
50259: LD_VAR 0 2
50263: PUSH
50264: LD_VAR 0 5
50268: PUSH
50269: LD_INT 1
50271: MINUS
50272: ARRAY
50273: PPUSH
50274: LD_VAR 0 7
50278: PUSH
50279: LD_VAR 0 5
50283: ARRAY
50284: PPUSH
50285: CALL_OW 1
50289: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
50290: LD_ADDR_VAR 0 7
50294: PUSH
50295: LD_VAR 0 7
50299: PPUSH
50300: LD_VAR 0 5
50304: PUSH
50305: LD_INT 1
50307: MINUS
50308: PPUSH
50309: LD_VAR 0 6
50313: PPUSH
50314: CALL_OW 1
50318: ST_TO_ADDR
// end ;
50319: GO 50236
50321: POP
50322: POP
// result := s_arr [ 1 ] ;
50323: LD_ADDR_VAR 0 4
50327: PUSH
50328: LD_VAR 0 7
50332: PUSH
50333: LD_INT 1
50335: ARRAY
50336: ST_TO_ADDR
// end ; end ;
50337: LD_VAR 0 4
50341: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
50342: LD_INT 0
50344: PPUSH
50345: PPUSH
// if not list then
50346: LD_VAR 0 1
50350: NOT
50351: IFFALSE 50355
// exit ;
50353: GO 50446
// i := list [ pos1 ] ;
50355: LD_ADDR_VAR 0 5
50359: PUSH
50360: LD_VAR 0 1
50364: PUSH
50365: LD_VAR 0 2
50369: ARRAY
50370: ST_TO_ADDR
// if not i then
50371: LD_VAR 0 5
50375: NOT
50376: IFFALSE 50380
// exit ;
50378: GO 50446
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
50380: LD_ADDR_VAR 0 1
50384: PUSH
50385: LD_VAR 0 1
50389: PPUSH
50390: LD_VAR 0 2
50394: PPUSH
50395: LD_VAR 0 1
50399: PUSH
50400: LD_VAR 0 3
50404: ARRAY
50405: PPUSH
50406: CALL_OW 1
50410: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
50411: LD_ADDR_VAR 0 1
50415: PUSH
50416: LD_VAR 0 1
50420: PPUSH
50421: LD_VAR 0 3
50425: PPUSH
50426: LD_VAR 0 5
50430: PPUSH
50431: CALL_OW 1
50435: ST_TO_ADDR
// result := list ;
50436: LD_ADDR_VAR 0 4
50440: PUSH
50441: LD_VAR 0 1
50445: ST_TO_ADDR
// end ;
50446: LD_VAR 0 4
50450: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
50451: LD_INT 0
50453: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
50454: LD_ADDR_VAR 0 5
50458: PUSH
50459: LD_VAR 0 1
50463: PPUSH
50464: CALL_OW 250
50468: PPUSH
50469: LD_VAR 0 1
50473: PPUSH
50474: CALL_OW 251
50478: PPUSH
50479: LD_VAR 0 2
50483: PPUSH
50484: LD_VAR 0 3
50488: PPUSH
50489: LD_VAR 0 4
50493: PPUSH
50494: CALL 50504 0 5
50498: ST_TO_ADDR
// end ;
50499: LD_VAR 0 5
50503: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
50504: LD_INT 0
50506: PPUSH
50507: PPUSH
50508: PPUSH
50509: PPUSH
// if not list then
50510: LD_VAR 0 3
50514: NOT
50515: IFFALSE 50519
// exit ;
50517: GO 50907
// result := [ ] ;
50519: LD_ADDR_VAR 0 6
50523: PUSH
50524: EMPTY
50525: ST_TO_ADDR
// for i in list do
50526: LD_ADDR_VAR 0 7
50530: PUSH
50531: LD_VAR 0 3
50535: PUSH
50536: FOR_IN
50537: IFFALSE 50739
// begin tmp := GetDistUnitXY ( i , x , y ) ;
50539: LD_ADDR_VAR 0 9
50543: PUSH
50544: LD_VAR 0 7
50548: PPUSH
50549: LD_VAR 0 1
50553: PPUSH
50554: LD_VAR 0 2
50558: PPUSH
50559: CALL_OW 297
50563: ST_TO_ADDR
// if not result then
50564: LD_VAR 0 6
50568: NOT
50569: IFFALSE 50595
// result := [ [ i , tmp ] ] else
50571: LD_ADDR_VAR 0 6
50575: PUSH
50576: LD_VAR 0 7
50580: PUSH
50581: LD_VAR 0 9
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: EMPTY
50591: LIST
50592: ST_TO_ADDR
50593: GO 50737
// begin if result [ result ] [ 2 ] < tmp then
50595: LD_VAR 0 6
50599: PUSH
50600: LD_VAR 0 6
50604: ARRAY
50605: PUSH
50606: LD_INT 2
50608: ARRAY
50609: PUSH
50610: LD_VAR 0 9
50614: LESS
50615: IFFALSE 50657
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
50617: LD_ADDR_VAR 0 6
50621: PUSH
50622: LD_VAR 0 6
50626: PPUSH
50627: LD_VAR 0 6
50631: PUSH
50632: LD_INT 1
50634: PLUS
50635: PPUSH
50636: LD_VAR 0 7
50640: PUSH
50641: LD_VAR 0 9
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PPUSH
50650: CALL_OW 2
50654: ST_TO_ADDR
50655: GO 50737
// for j = 1 to result do
50657: LD_ADDR_VAR 0 8
50661: PUSH
50662: DOUBLE
50663: LD_INT 1
50665: DEC
50666: ST_TO_ADDR
50667: LD_VAR 0 6
50671: PUSH
50672: FOR_TO
50673: IFFALSE 50735
// begin if tmp < result [ j ] [ 2 ] then
50675: LD_VAR 0 9
50679: PUSH
50680: LD_VAR 0 6
50684: PUSH
50685: LD_VAR 0 8
50689: ARRAY
50690: PUSH
50691: LD_INT 2
50693: ARRAY
50694: LESS
50695: IFFALSE 50733
// begin result := Insert ( result , j , [ i , tmp ] ) ;
50697: LD_ADDR_VAR 0 6
50701: PUSH
50702: LD_VAR 0 6
50706: PPUSH
50707: LD_VAR 0 8
50711: PPUSH
50712: LD_VAR 0 7
50716: PUSH
50717: LD_VAR 0 9
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PPUSH
50726: CALL_OW 2
50730: ST_TO_ADDR
// break ;
50731: GO 50735
// end ; end ;
50733: GO 50672
50735: POP
50736: POP
// end ; end ;
50737: GO 50536
50739: POP
50740: POP
// if result and not asc then
50741: LD_VAR 0 6
50745: PUSH
50746: LD_VAR 0 4
50750: NOT
50751: AND
50752: IFFALSE 50827
// begin tmp := result ;
50754: LD_ADDR_VAR 0 9
50758: PUSH
50759: LD_VAR 0 6
50763: ST_TO_ADDR
// for i = tmp downto 1 do
50764: LD_ADDR_VAR 0 7
50768: PUSH
50769: DOUBLE
50770: LD_VAR 0 9
50774: INC
50775: ST_TO_ADDR
50776: LD_INT 1
50778: PUSH
50779: FOR_DOWNTO
50780: IFFALSE 50825
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
50782: LD_ADDR_VAR 0 6
50786: PUSH
50787: LD_VAR 0 6
50791: PPUSH
50792: LD_VAR 0 9
50796: PUSH
50797: LD_VAR 0 7
50801: MINUS
50802: PUSH
50803: LD_INT 1
50805: PLUS
50806: PPUSH
50807: LD_VAR 0 9
50811: PUSH
50812: LD_VAR 0 7
50816: ARRAY
50817: PPUSH
50818: CALL_OW 1
50822: ST_TO_ADDR
50823: GO 50779
50825: POP
50826: POP
// end ; tmp := [ ] ;
50827: LD_ADDR_VAR 0 9
50831: PUSH
50832: EMPTY
50833: ST_TO_ADDR
// if mode then
50834: LD_VAR 0 5
50838: IFFALSE 50907
// begin for i = 1 to result do
50840: LD_ADDR_VAR 0 7
50844: PUSH
50845: DOUBLE
50846: LD_INT 1
50848: DEC
50849: ST_TO_ADDR
50850: LD_VAR 0 6
50854: PUSH
50855: FOR_TO
50856: IFFALSE 50895
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
50858: LD_ADDR_VAR 0 9
50862: PUSH
50863: LD_VAR 0 9
50867: PPUSH
50868: LD_VAR 0 7
50872: PPUSH
50873: LD_VAR 0 6
50877: PUSH
50878: LD_VAR 0 7
50882: ARRAY
50883: PUSH
50884: LD_INT 1
50886: ARRAY
50887: PPUSH
50888: CALL_OW 1
50892: ST_TO_ADDR
50893: GO 50855
50895: POP
50896: POP
// result := tmp ;
50897: LD_ADDR_VAR 0 6
50901: PUSH
50902: LD_VAR 0 9
50906: ST_TO_ADDR
// end ; end ;
50907: LD_VAR 0 6
50911: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
50912: LD_INT 0
50914: PPUSH
50915: PPUSH
50916: PPUSH
50917: PPUSH
50918: PPUSH
50919: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
50920: LD_ADDR_VAR 0 5
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: ST_TO_ADDR
// if not x or not y then
50942: LD_VAR 0 2
50946: NOT
50947: PUSH
50948: LD_VAR 0 3
50952: NOT
50953: OR
50954: IFFALSE 50958
// exit ;
50956: GO 52610
// if not range then
50958: LD_VAR 0 4
50962: NOT
50963: IFFALSE 50973
// range := 10 ;
50965: LD_ADDR_VAR 0 4
50969: PUSH
50970: LD_INT 10
50972: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50973: LD_ADDR_VAR 0 8
50977: PUSH
50978: LD_INT 81
50980: PUSH
50981: LD_VAR 0 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 92
50992: PUSH
50993: LD_VAR 0 2
50997: PUSH
50998: LD_VAR 0 3
51002: PUSH
51003: LD_VAR 0 4
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 3
51016: PUSH
51017: LD_INT 21
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: PPUSH
51036: CALL_OW 69
51040: ST_TO_ADDR
// if not tmp then
51041: LD_VAR 0 8
51045: NOT
51046: IFFALSE 51050
// exit ;
51048: GO 52610
// for i in tmp do
51050: LD_ADDR_VAR 0 6
51054: PUSH
51055: LD_VAR 0 8
51059: PUSH
51060: FOR_IN
51061: IFFALSE 52585
// begin points := [ 0 , 0 , 0 ] ;
51063: LD_ADDR_VAR 0 9
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: LIST
51081: ST_TO_ADDR
// bpoints := 1 ;
51082: LD_ADDR_VAR 0 10
51086: PUSH
51087: LD_INT 1
51089: ST_TO_ADDR
// case GetType ( i ) of unit_human :
51090: LD_VAR 0 6
51094: PPUSH
51095: CALL_OW 247
51099: PUSH
51100: LD_INT 1
51102: DOUBLE
51103: EQUAL
51104: IFTRUE 51108
51106: GO 51686
51108: POP
// begin if GetClass ( i ) = 1 then
51109: LD_VAR 0 6
51113: PPUSH
51114: CALL_OW 257
51118: PUSH
51119: LD_INT 1
51121: EQUAL
51122: IFFALSE 51143
// points := [ 10 , 5 , 3 ] ;
51124: LD_ADDR_VAR 0 9
51128: PUSH
51129: LD_INT 10
51131: PUSH
51132: LD_INT 5
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: LIST
51142: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
51143: LD_VAR 0 6
51147: PPUSH
51148: CALL_OW 257
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: LD_INT 4
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: IN
51167: IFFALSE 51188
// points := [ 3 , 2 , 1 ] ;
51169: LD_ADDR_VAR 0 9
51173: PUSH
51174: LD_INT 3
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: ST_TO_ADDR
// if GetClass ( i ) = 5 then
51188: LD_VAR 0 6
51192: PPUSH
51193: CALL_OW 257
51197: PUSH
51198: LD_INT 5
51200: EQUAL
51201: IFFALSE 51222
// points := [ 130 , 5 , 2 ] ;
51203: LD_ADDR_VAR 0 9
51207: PUSH
51208: LD_INT 130
51210: PUSH
51211: LD_INT 5
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: LIST
51221: ST_TO_ADDR
// if GetClass ( i ) = 8 then
51222: LD_VAR 0 6
51226: PPUSH
51227: CALL_OW 257
51231: PUSH
51232: LD_INT 8
51234: EQUAL
51235: IFFALSE 51256
// points := [ 35 , 35 , 30 ] ;
51237: LD_ADDR_VAR 0 9
51241: PUSH
51242: LD_INT 35
51244: PUSH
51245: LD_INT 35
51247: PUSH
51248: LD_INT 30
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: ST_TO_ADDR
// if GetClass ( i ) = 9 then
51256: LD_VAR 0 6
51260: PPUSH
51261: CALL_OW 257
51265: PUSH
51266: LD_INT 9
51268: EQUAL
51269: IFFALSE 51290
// points := [ 20 , 55 , 40 ] ;
51271: LD_ADDR_VAR 0 9
51275: PUSH
51276: LD_INT 20
51278: PUSH
51279: LD_INT 55
51281: PUSH
51282: LD_INT 40
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
51290: LD_VAR 0 6
51294: PPUSH
51295: CALL_OW 257
51299: PUSH
51300: LD_INT 12
51302: PUSH
51303: LD_INT 16
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: IN
51310: IFFALSE 51331
// points := [ 5 , 3 , 2 ] ;
51312: LD_ADDR_VAR 0 9
51316: PUSH
51317: LD_INT 5
51319: PUSH
51320: LD_INT 3
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: LIST
51330: ST_TO_ADDR
// if GetClass ( i ) = 17 then
51331: LD_VAR 0 6
51335: PPUSH
51336: CALL_OW 257
51340: PUSH
51341: LD_INT 17
51343: EQUAL
51344: IFFALSE 51365
// points := [ 100 , 50 , 75 ] ;
51346: LD_ADDR_VAR 0 9
51350: PUSH
51351: LD_INT 100
51353: PUSH
51354: LD_INT 50
51356: PUSH
51357: LD_INT 75
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: ST_TO_ADDR
// if GetClass ( i ) = 15 then
51365: LD_VAR 0 6
51369: PPUSH
51370: CALL_OW 257
51374: PUSH
51375: LD_INT 15
51377: EQUAL
51378: IFFALSE 51399
// points := [ 10 , 5 , 3 ] ;
51380: LD_ADDR_VAR 0 9
51384: PUSH
51385: LD_INT 10
51387: PUSH
51388: LD_INT 5
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// if GetClass ( i ) = 14 then
51399: LD_VAR 0 6
51403: PPUSH
51404: CALL_OW 257
51408: PUSH
51409: LD_INT 14
51411: EQUAL
51412: IFFALSE 51433
// points := [ 10 , 0 , 0 ] ;
51414: LD_ADDR_VAR 0 9
51418: PUSH
51419: LD_INT 10
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: ST_TO_ADDR
// if GetClass ( i ) = 11 then
51433: LD_VAR 0 6
51437: PPUSH
51438: CALL_OW 257
51442: PUSH
51443: LD_INT 11
51445: EQUAL
51446: IFFALSE 51467
// points := [ 30 , 10 , 5 ] ;
51448: LD_ADDR_VAR 0 9
51452: PUSH
51453: LD_INT 30
51455: PUSH
51456: LD_INT 10
51458: PUSH
51459: LD_INT 5
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
51467: LD_VAR 0 1
51471: PPUSH
51472: LD_INT 5
51474: PPUSH
51475: CALL_OW 321
51479: PUSH
51480: LD_INT 2
51482: EQUAL
51483: IFFALSE 51500
// bpoints := bpoints * 1.8 ;
51485: LD_ADDR_VAR 0 10
51489: PUSH
51490: LD_VAR 0 10
51494: PUSH
51495: LD_REAL  1.80000000000000E+0000
51498: MUL
51499: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
51500: LD_VAR 0 6
51504: PPUSH
51505: CALL_OW 257
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: LD_INT 3
51518: PUSH
51519: LD_INT 4
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: IN
51528: PUSH
51529: LD_VAR 0 1
51533: PPUSH
51534: LD_INT 51
51536: PPUSH
51537: CALL_OW 321
51541: PUSH
51542: LD_INT 2
51544: EQUAL
51545: AND
51546: IFFALSE 51563
// bpoints := bpoints * 1.2 ;
51548: LD_ADDR_VAR 0 10
51552: PUSH
51553: LD_VAR 0 10
51557: PUSH
51558: LD_REAL  1.20000000000000E+0000
51561: MUL
51562: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
51563: LD_VAR 0 6
51567: PPUSH
51568: CALL_OW 257
51572: PUSH
51573: LD_INT 5
51575: PUSH
51576: LD_INT 7
51578: PUSH
51579: LD_INT 9
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: LIST
51586: IN
51587: PUSH
51588: LD_VAR 0 1
51592: PPUSH
51593: LD_INT 52
51595: PPUSH
51596: CALL_OW 321
51600: PUSH
51601: LD_INT 2
51603: EQUAL
51604: AND
51605: IFFALSE 51622
// bpoints := bpoints * 1.5 ;
51607: LD_ADDR_VAR 0 10
51611: PUSH
51612: LD_VAR 0 10
51616: PUSH
51617: LD_REAL  1.50000000000000E+0000
51620: MUL
51621: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
51622: LD_VAR 0 1
51626: PPUSH
51627: LD_INT 66
51629: PPUSH
51630: CALL_OW 321
51634: PUSH
51635: LD_INT 2
51637: EQUAL
51638: IFFALSE 51655
// bpoints := bpoints * 1.1 ;
51640: LD_ADDR_VAR 0 10
51644: PUSH
51645: LD_VAR 0 10
51649: PUSH
51650: LD_REAL  1.10000000000000E+0000
51653: MUL
51654: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
51655: LD_ADDR_VAR 0 10
51659: PUSH
51660: LD_VAR 0 10
51664: PUSH
51665: LD_VAR 0 6
51669: PPUSH
51670: LD_INT 1
51672: PPUSH
51673: CALL_OW 259
51677: PUSH
51678: LD_REAL  1.15000000000000E+0000
51681: MUL
51682: MUL
51683: ST_TO_ADDR
// end ; unit_vehicle :
51684: GO 52514
51686: LD_INT 2
51688: DOUBLE
51689: EQUAL
51690: IFTRUE 51694
51692: GO 52502
51694: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
51695: LD_VAR 0 6
51699: PPUSH
51700: CALL_OW 264
51704: PUSH
51705: LD_INT 2
51707: PUSH
51708: LD_INT 42
51710: PUSH
51711: LD_INT 24
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: IN
51719: IFFALSE 51740
// points := [ 25 , 5 , 3 ] ;
51721: LD_ADDR_VAR 0 9
51725: PUSH
51726: LD_INT 25
51728: PUSH
51729: LD_INT 5
51731: PUSH
51732: LD_INT 3
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: LIST
51739: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
51740: LD_VAR 0 6
51744: PPUSH
51745: CALL_OW 264
51749: PUSH
51750: LD_INT 4
51752: PUSH
51753: LD_INT 43
51755: PUSH
51756: LD_INT 25
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: LIST
51763: IN
51764: IFFALSE 51785
// points := [ 40 , 15 , 5 ] ;
51766: LD_ADDR_VAR 0 9
51770: PUSH
51771: LD_INT 40
51773: PUSH
51774: LD_INT 15
51776: PUSH
51777: LD_INT 5
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: LIST
51784: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
51785: LD_VAR 0 6
51789: PPUSH
51790: CALL_OW 264
51794: PUSH
51795: LD_INT 3
51797: PUSH
51798: LD_INT 23
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: IN
51805: IFFALSE 51826
// points := [ 7 , 25 , 8 ] ;
51807: LD_ADDR_VAR 0 9
51811: PUSH
51812: LD_INT 7
51814: PUSH
51815: LD_INT 25
51817: PUSH
51818: LD_INT 8
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
51826: LD_VAR 0 6
51830: PPUSH
51831: CALL_OW 264
51835: PUSH
51836: LD_INT 5
51838: PUSH
51839: LD_INT 27
51841: PUSH
51842: LD_INT 44
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: IN
51850: IFFALSE 51871
// points := [ 14 , 50 , 16 ] ;
51852: LD_ADDR_VAR 0 9
51856: PUSH
51857: LD_INT 14
51859: PUSH
51860: LD_INT 50
51862: PUSH
51863: LD_INT 16
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: LIST
51870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
51871: LD_VAR 0 6
51875: PPUSH
51876: CALL_OW 264
51880: PUSH
51881: LD_INT 6
51883: PUSH
51884: LD_INT 46
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: IN
51891: IFFALSE 51912
// points := [ 32 , 120 , 70 ] ;
51893: LD_ADDR_VAR 0 9
51897: PUSH
51898: LD_INT 32
51900: PUSH
51901: LD_INT 120
51903: PUSH
51904: LD_INT 70
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
51912: LD_VAR 0 6
51916: PPUSH
51917: CALL_OW 264
51921: PUSH
51922: LD_INT 7
51924: PUSH
51925: LD_INT 28
51927: PUSH
51928: LD_INT 45
51930: PUSH
51931: LD_EXP 53
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: IN
51942: IFFALSE 51963
// points := [ 35 , 20 , 45 ] ;
51944: LD_ADDR_VAR 0 9
51948: PUSH
51949: LD_INT 35
51951: PUSH
51952: LD_INT 20
51954: PUSH
51955: LD_INT 45
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: LIST
51962: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
51963: LD_VAR 0 6
51967: PPUSH
51968: CALL_OW 264
51972: PUSH
51973: LD_INT 47
51975: PUSH
51976: EMPTY
51977: LIST
51978: IN
51979: IFFALSE 52000
// points := [ 67 , 45 , 75 ] ;
51981: LD_ADDR_VAR 0 9
51985: PUSH
51986: LD_INT 67
51988: PUSH
51989: LD_INT 45
51991: PUSH
51992: LD_INT 75
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: LIST
51999: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
52000: LD_VAR 0 6
52004: PPUSH
52005: CALL_OW 264
52009: PUSH
52010: LD_INT 26
52012: PUSH
52013: EMPTY
52014: LIST
52015: IN
52016: IFFALSE 52037
// points := [ 120 , 30 , 80 ] ;
52018: LD_ADDR_VAR 0 9
52022: PUSH
52023: LD_INT 120
52025: PUSH
52026: LD_INT 30
52028: PUSH
52029: LD_INT 80
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: LIST
52036: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
52037: LD_VAR 0 6
52041: PPUSH
52042: CALL_OW 264
52046: PUSH
52047: LD_INT 22
52049: PUSH
52050: EMPTY
52051: LIST
52052: IN
52053: IFFALSE 52074
// points := [ 40 , 1 , 1 ] ;
52055: LD_ADDR_VAR 0 9
52059: PUSH
52060: LD_INT 40
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
52074: LD_VAR 0 6
52078: PPUSH
52079: CALL_OW 264
52083: PUSH
52084: LD_INT 29
52086: PUSH
52087: EMPTY
52088: LIST
52089: IN
52090: IFFALSE 52111
// points := [ 70 , 200 , 400 ] ;
52092: LD_ADDR_VAR 0 9
52096: PUSH
52097: LD_INT 70
52099: PUSH
52100: LD_INT 200
52102: PUSH
52103: LD_INT 400
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: LIST
52110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
52111: LD_VAR 0 6
52115: PPUSH
52116: CALL_OW 264
52120: PUSH
52121: LD_INT 14
52123: PUSH
52124: LD_INT 53
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: IN
52131: IFFALSE 52152
// points := [ 40 , 10 , 20 ] ;
52133: LD_ADDR_VAR 0 9
52137: PUSH
52138: LD_INT 40
52140: PUSH
52141: LD_INT 10
52143: PUSH
52144: LD_INT 20
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: LIST
52151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
52152: LD_VAR 0 6
52156: PPUSH
52157: CALL_OW 264
52161: PUSH
52162: LD_INT 9
52164: PUSH
52165: EMPTY
52166: LIST
52167: IN
52168: IFFALSE 52189
// points := [ 5 , 70 , 20 ] ;
52170: LD_ADDR_VAR 0 9
52174: PUSH
52175: LD_INT 5
52177: PUSH
52178: LD_INT 70
52180: PUSH
52181: LD_INT 20
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
52189: LD_VAR 0 6
52193: PPUSH
52194: CALL_OW 264
52198: PUSH
52199: LD_INT 10
52201: PUSH
52202: EMPTY
52203: LIST
52204: IN
52205: IFFALSE 52226
// points := [ 35 , 110 , 70 ] ;
52207: LD_ADDR_VAR 0 9
52211: PUSH
52212: LD_INT 35
52214: PUSH
52215: LD_INT 110
52217: PUSH
52218: LD_INT 70
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
52226: LD_VAR 0 6
52230: PPUSH
52231: CALL_OW 265
52235: PUSH
52236: LD_INT 25
52238: EQUAL
52239: IFFALSE 52260
// points := [ 80 , 65 , 100 ] ;
52241: LD_ADDR_VAR 0 9
52245: PUSH
52246: LD_INT 80
52248: PUSH
52249: LD_INT 65
52251: PUSH
52252: LD_INT 100
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
52260: LD_VAR 0 6
52264: PPUSH
52265: CALL_OW 263
52269: PUSH
52270: LD_INT 1
52272: EQUAL
52273: IFFALSE 52308
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
52275: LD_ADDR_VAR 0 10
52279: PUSH
52280: LD_VAR 0 10
52284: PUSH
52285: LD_VAR 0 6
52289: PPUSH
52290: CALL_OW 311
52294: PPUSH
52295: LD_INT 3
52297: PPUSH
52298: CALL_OW 259
52302: PUSH
52303: LD_INT 4
52305: MUL
52306: MUL
52307: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
52308: LD_VAR 0 6
52312: PPUSH
52313: CALL_OW 263
52317: PUSH
52318: LD_INT 2
52320: EQUAL
52321: IFFALSE 52372
// begin j := IsControledBy ( i ) ;
52323: LD_ADDR_VAR 0 7
52327: PUSH
52328: LD_VAR 0 6
52332: PPUSH
52333: CALL_OW 312
52337: ST_TO_ADDR
// if j then
52338: LD_VAR 0 7
52342: IFFALSE 52372
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
52344: LD_ADDR_VAR 0 10
52348: PUSH
52349: LD_VAR 0 10
52353: PUSH
52354: LD_VAR 0 7
52358: PPUSH
52359: LD_INT 3
52361: PPUSH
52362: CALL_OW 259
52366: PUSH
52367: LD_INT 3
52369: MUL
52370: MUL
52371: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
52372: LD_VAR 0 6
52376: PPUSH
52377: CALL_OW 264
52381: PUSH
52382: LD_INT 5
52384: PUSH
52385: LD_INT 6
52387: PUSH
52388: LD_INT 46
52390: PUSH
52391: LD_INT 44
52393: PUSH
52394: LD_INT 47
52396: PUSH
52397: LD_INT 45
52399: PUSH
52400: LD_INT 28
52402: PUSH
52403: LD_INT 7
52405: PUSH
52406: LD_INT 27
52408: PUSH
52409: LD_INT 29
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: IN
52424: PUSH
52425: LD_VAR 0 1
52429: PPUSH
52430: LD_INT 52
52432: PPUSH
52433: CALL_OW 321
52437: PUSH
52438: LD_INT 2
52440: EQUAL
52441: AND
52442: IFFALSE 52459
// bpoints := bpoints * 1.2 ;
52444: LD_ADDR_VAR 0 10
52448: PUSH
52449: LD_VAR 0 10
52453: PUSH
52454: LD_REAL  1.20000000000000E+0000
52457: MUL
52458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
52459: LD_VAR 0 6
52463: PPUSH
52464: CALL_OW 264
52468: PUSH
52469: LD_INT 6
52471: PUSH
52472: LD_INT 46
52474: PUSH
52475: LD_INT 47
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: IN
52483: IFFALSE 52500
// bpoints := bpoints * 1.2 ;
52485: LD_ADDR_VAR 0 10
52489: PUSH
52490: LD_VAR 0 10
52494: PUSH
52495: LD_REAL  1.20000000000000E+0000
52498: MUL
52499: ST_TO_ADDR
// end ; unit_building :
52500: GO 52514
52502: LD_INT 3
52504: DOUBLE
52505: EQUAL
52506: IFTRUE 52510
52508: GO 52513
52510: POP
// ; end ;
52511: GO 52514
52513: POP
// for j = 1 to 3 do
52514: LD_ADDR_VAR 0 7
52518: PUSH
52519: DOUBLE
52520: LD_INT 1
52522: DEC
52523: ST_TO_ADDR
52524: LD_INT 3
52526: PUSH
52527: FOR_TO
52528: IFFALSE 52581
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
52530: LD_ADDR_VAR 0 5
52534: PUSH
52535: LD_VAR 0 5
52539: PPUSH
52540: LD_VAR 0 7
52544: PPUSH
52545: LD_VAR 0 5
52549: PUSH
52550: LD_VAR 0 7
52554: ARRAY
52555: PUSH
52556: LD_VAR 0 9
52560: PUSH
52561: LD_VAR 0 7
52565: ARRAY
52566: PUSH
52567: LD_VAR 0 10
52571: MUL
52572: PLUS
52573: PPUSH
52574: CALL_OW 1
52578: ST_TO_ADDR
52579: GO 52527
52581: POP
52582: POP
// end ;
52583: GO 51060
52585: POP
52586: POP
// result := Replace ( result , 4 , tmp ) ;
52587: LD_ADDR_VAR 0 5
52591: PUSH
52592: LD_VAR 0 5
52596: PPUSH
52597: LD_INT 4
52599: PPUSH
52600: LD_VAR 0 8
52604: PPUSH
52605: CALL_OW 1
52609: ST_TO_ADDR
// end ;
52610: LD_VAR 0 5
52614: RET
// export function DangerAtRange ( unit , range ) ; begin
52615: LD_INT 0
52617: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
52618: LD_ADDR_VAR 0 3
52622: PUSH
52623: LD_VAR 0 1
52627: PPUSH
52628: CALL_OW 255
52632: PPUSH
52633: LD_VAR 0 1
52637: PPUSH
52638: CALL_OW 250
52642: PPUSH
52643: LD_VAR 0 1
52647: PPUSH
52648: CALL_OW 251
52652: PPUSH
52653: LD_VAR 0 2
52657: PPUSH
52658: CALL 50912 0 4
52662: ST_TO_ADDR
// end ;
52663: LD_VAR 0 3
52667: RET
// export function DangerInArea ( side , area ) ; begin
52668: LD_INT 0
52670: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
52671: LD_ADDR_VAR 0 3
52675: PUSH
52676: LD_VAR 0 2
52680: PPUSH
52681: LD_INT 81
52683: PUSH
52684: LD_VAR 0 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PPUSH
52693: CALL_OW 70
52697: ST_TO_ADDR
// end ;
52698: LD_VAR 0 3
52702: RET
// export function IsExtension ( b ) ; begin
52703: LD_INT 0
52705: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
52706: LD_ADDR_VAR 0 2
52710: PUSH
52711: LD_VAR 0 1
52715: PUSH
52716: LD_INT 23
52718: PUSH
52719: LD_INT 20
52721: PUSH
52722: LD_INT 22
52724: PUSH
52725: LD_INT 17
52727: PUSH
52728: LD_INT 24
52730: PUSH
52731: LD_INT 21
52733: PUSH
52734: LD_INT 19
52736: PUSH
52737: LD_INT 16
52739: PUSH
52740: LD_INT 25
52742: PUSH
52743: LD_INT 18
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: IN
52758: ST_TO_ADDR
// end ;
52759: LD_VAR 0 2
52763: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
52764: LD_INT 0
52766: PPUSH
52767: PPUSH
52768: PPUSH
// result := [ ] ;
52769: LD_ADDR_VAR 0 4
52773: PUSH
52774: EMPTY
52775: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
52776: LD_ADDR_VAR 0 5
52780: PUSH
52781: LD_VAR 0 2
52785: PPUSH
52786: LD_INT 21
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PPUSH
52796: CALL_OW 70
52800: ST_TO_ADDR
// if not tmp then
52801: LD_VAR 0 5
52805: NOT
52806: IFFALSE 52810
// exit ;
52808: GO 52874
// if checkLink then
52810: LD_VAR 0 3
52814: IFFALSE 52864
// begin for i in tmp do
52816: LD_ADDR_VAR 0 6
52820: PUSH
52821: LD_VAR 0 5
52825: PUSH
52826: FOR_IN
52827: IFFALSE 52862
// if GetBase ( i ) <> base then
52829: LD_VAR 0 6
52833: PPUSH
52834: CALL_OW 274
52838: PUSH
52839: LD_VAR 0 1
52843: NONEQUAL
52844: IFFALSE 52860
// ComLinkToBase ( base , i ) ;
52846: LD_VAR 0 1
52850: PPUSH
52851: LD_VAR 0 6
52855: PPUSH
52856: CALL_OW 169
52860: GO 52826
52862: POP
52863: POP
// end ; result := tmp ;
52864: LD_ADDR_VAR 0 4
52868: PUSH
52869: LD_VAR 0 5
52873: ST_TO_ADDR
// end ;
52874: LD_VAR 0 4
52878: RET
// export function ComComplete ( units , b ) ; var i ; begin
52879: LD_INT 0
52881: PPUSH
52882: PPUSH
// if not units then
52883: LD_VAR 0 1
52887: NOT
52888: IFFALSE 52892
// exit ;
52890: GO 52982
// for i in units do
52892: LD_ADDR_VAR 0 4
52896: PUSH
52897: LD_VAR 0 1
52901: PUSH
52902: FOR_IN
52903: IFFALSE 52980
// if BuildingStatus ( b ) = bs_build then
52905: LD_VAR 0 2
52909: PPUSH
52910: CALL_OW 461
52914: PUSH
52915: LD_INT 1
52917: EQUAL
52918: IFFALSE 52978
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
52920: LD_VAR 0 4
52924: PPUSH
52925: LD_STRING h
52927: PUSH
52928: LD_VAR 0 2
52932: PPUSH
52933: CALL_OW 250
52937: PUSH
52938: LD_VAR 0 2
52942: PPUSH
52943: CALL_OW 251
52947: PUSH
52948: LD_VAR 0 2
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: PUSH
52971: EMPTY
52972: LIST
52973: PPUSH
52974: CALL_OW 446
52978: GO 52902
52980: POP
52981: POP
// end ;
52982: LD_VAR 0 3
52986: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
52987: LD_INT 0
52989: PPUSH
52990: PPUSH
52991: PPUSH
52992: PPUSH
52993: PPUSH
52994: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
52995: LD_VAR 0 1
52999: NOT
53000: PUSH
53001: LD_VAR 0 1
53005: PPUSH
53006: CALL_OW 263
53010: PUSH
53011: LD_INT 2
53013: NONEQUAL
53014: OR
53015: IFFALSE 53019
// exit ;
53017: GO 53335
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
53019: LD_ADDR_VAR 0 6
53023: PUSH
53024: LD_INT 22
53026: PUSH
53027: LD_VAR 0 1
53031: PPUSH
53032: CALL_OW 255
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 30
53046: PUSH
53047: LD_INT 36
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 34
53056: PUSH
53057: LD_INT 31
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: LIST
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PPUSH
53073: CALL_OW 69
53077: ST_TO_ADDR
// if not tmp then
53078: LD_VAR 0 6
53082: NOT
53083: IFFALSE 53087
// exit ;
53085: GO 53335
// result := [ ] ;
53087: LD_ADDR_VAR 0 2
53091: PUSH
53092: EMPTY
53093: ST_TO_ADDR
// for i in tmp do
53094: LD_ADDR_VAR 0 3
53098: PUSH
53099: LD_VAR 0 6
53103: PUSH
53104: FOR_IN
53105: IFFALSE 53176
// begin t := UnitsInside ( i ) ;
53107: LD_ADDR_VAR 0 4
53111: PUSH
53112: LD_VAR 0 3
53116: PPUSH
53117: CALL_OW 313
53121: ST_TO_ADDR
// if t then
53122: LD_VAR 0 4
53126: IFFALSE 53174
// for j in t do
53128: LD_ADDR_VAR 0 7
53132: PUSH
53133: LD_VAR 0 4
53137: PUSH
53138: FOR_IN
53139: IFFALSE 53172
// result := Replace ( result , result + 1 , j ) ;
53141: LD_ADDR_VAR 0 2
53145: PUSH
53146: LD_VAR 0 2
53150: PPUSH
53151: LD_VAR 0 2
53155: PUSH
53156: LD_INT 1
53158: PLUS
53159: PPUSH
53160: LD_VAR 0 7
53164: PPUSH
53165: CALL_OW 1
53169: ST_TO_ADDR
53170: GO 53138
53172: POP
53173: POP
// end ;
53174: GO 53104
53176: POP
53177: POP
// if not result then
53178: LD_VAR 0 2
53182: NOT
53183: IFFALSE 53187
// exit ;
53185: GO 53335
// mech := result [ 1 ] ;
53187: LD_ADDR_VAR 0 5
53191: PUSH
53192: LD_VAR 0 2
53196: PUSH
53197: LD_INT 1
53199: ARRAY
53200: ST_TO_ADDR
// if result > 1 then
53201: LD_VAR 0 2
53205: PUSH
53206: LD_INT 1
53208: GREATER
53209: IFFALSE 53321
// begin for i = 2 to result do
53211: LD_ADDR_VAR 0 3
53215: PUSH
53216: DOUBLE
53217: LD_INT 2
53219: DEC
53220: ST_TO_ADDR
53221: LD_VAR 0 2
53225: PUSH
53226: FOR_TO
53227: IFFALSE 53319
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
53229: LD_ADDR_VAR 0 4
53233: PUSH
53234: LD_VAR 0 2
53238: PUSH
53239: LD_VAR 0 3
53243: ARRAY
53244: PPUSH
53245: LD_INT 3
53247: PPUSH
53248: CALL_OW 259
53252: PUSH
53253: LD_VAR 0 2
53257: PUSH
53258: LD_VAR 0 3
53262: ARRAY
53263: PPUSH
53264: CALL_OW 432
53268: MINUS
53269: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
53270: LD_VAR 0 4
53274: PUSH
53275: LD_VAR 0 5
53279: PPUSH
53280: LD_INT 3
53282: PPUSH
53283: CALL_OW 259
53287: PUSH
53288: LD_VAR 0 5
53292: PPUSH
53293: CALL_OW 432
53297: MINUS
53298: GREATEREQUAL
53299: IFFALSE 53317
// mech := result [ i ] ;
53301: LD_ADDR_VAR 0 5
53305: PUSH
53306: LD_VAR 0 2
53310: PUSH
53311: LD_VAR 0 3
53315: ARRAY
53316: ST_TO_ADDR
// end ;
53317: GO 53226
53319: POP
53320: POP
// end ; ComLinkTo ( vehicle , mech ) ;
53321: LD_VAR 0 1
53325: PPUSH
53326: LD_VAR 0 5
53330: PPUSH
53331: CALL_OW 135
// end ;
53335: LD_VAR 0 2
53339: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
53340: LD_INT 0
53342: PPUSH
53343: PPUSH
53344: PPUSH
53345: PPUSH
53346: PPUSH
53347: PPUSH
53348: PPUSH
53349: PPUSH
53350: PPUSH
53351: PPUSH
53352: PPUSH
53353: PPUSH
53354: PPUSH
// result := [ ] ;
53355: LD_ADDR_VAR 0 7
53359: PUSH
53360: EMPTY
53361: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
53362: LD_VAR 0 1
53366: PPUSH
53367: CALL_OW 266
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: IN
53382: NOT
53383: IFFALSE 53387
// exit ;
53385: GO 55021
// if name then
53387: LD_VAR 0 3
53391: IFFALSE 53407
// SetBName ( base_dep , name ) ;
53393: LD_VAR 0 1
53397: PPUSH
53398: LD_VAR 0 3
53402: PPUSH
53403: CALL_OW 500
// base := GetBase ( base_dep ) ;
53407: LD_ADDR_VAR 0 15
53411: PUSH
53412: LD_VAR 0 1
53416: PPUSH
53417: CALL_OW 274
53421: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
53422: LD_ADDR_VAR 0 16
53426: PUSH
53427: LD_VAR 0 1
53431: PPUSH
53432: CALL_OW 255
53436: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
53437: LD_ADDR_VAR 0 17
53441: PUSH
53442: LD_VAR 0 1
53446: PPUSH
53447: CALL_OW 248
53451: ST_TO_ADDR
// if sources then
53452: LD_VAR 0 5
53456: IFFALSE 53503
// for i = 1 to 3 do
53458: LD_ADDR_VAR 0 8
53462: PUSH
53463: DOUBLE
53464: LD_INT 1
53466: DEC
53467: ST_TO_ADDR
53468: LD_INT 3
53470: PUSH
53471: FOR_TO
53472: IFFALSE 53501
// AddResourceType ( base , i , sources [ i ] ) ;
53474: LD_VAR 0 15
53478: PPUSH
53479: LD_VAR 0 8
53483: PPUSH
53484: LD_VAR 0 5
53488: PUSH
53489: LD_VAR 0 8
53493: ARRAY
53494: PPUSH
53495: CALL_OW 276
53499: GO 53471
53501: POP
53502: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
53503: LD_ADDR_VAR 0 18
53507: PUSH
53508: LD_VAR 0 15
53512: PPUSH
53513: LD_VAR 0 2
53517: PPUSH
53518: LD_INT 1
53520: PPUSH
53521: CALL 52764 0 3
53525: ST_TO_ADDR
// InitHc ;
53526: CALL_OW 19
// InitUc ;
53530: CALL_OW 18
// uc_side := side ;
53534: LD_ADDR_OWVAR 20
53538: PUSH
53539: LD_VAR 0 16
53543: ST_TO_ADDR
// uc_nation := nation ;
53544: LD_ADDR_OWVAR 21
53548: PUSH
53549: LD_VAR 0 17
53553: ST_TO_ADDR
// if buildings then
53554: LD_VAR 0 18
53558: IFFALSE 54880
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
53560: LD_ADDR_VAR 0 19
53564: PUSH
53565: LD_VAR 0 18
53569: PPUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 30
53575: PUSH
53576: LD_INT 29
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 30
53585: PUSH
53586: LD_INT 30
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: LIST
53597: PPUSH
53598: CALL_OW 72
53602: ST_TO_ADDR
// if tmp then
53603: LD_VAR 0 19
53607: IFFALSE 53655
// for i in tmp do
53609: LD_ADDR_VAR 0 8
53613: PUSH
53614: LD_VAR 0 19
53618: PUSH
53619: FOR_IN
53620: IFFALSE 53653
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
53622: LD_VAR 0 8
53626: PPUSH
53627: CALL_OW 250
53631: PPUSH
53632: LD_VAR 0 8
53636: PPUSH
53637: CALL_OW 251
53641: PPUSH
53642: LD_VAR 0 16
53646: PPUSH
53647: CALL_OW 441
53651: GO 53619
53653: POP
53654: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
53655: LD_VAR 0 18
53659: PPUSH
53660: LD_INT 2
53662: PUSH
53663: LD_INT 30
53665: PUSH
53666: LD_INT 32
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 30
53675: PUSH
53676: LD_INT 33
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: LIST
53687: PPUSH
53688: CALL_OW 72
53692: IFFALSE 53780
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
53694: LD_ADDR_VAR 0 8
53698: PUSH
53699: LD_VAR 0 18
53703: PPUSH
53704: LD_INT 2
53706: PUSH
53707: LD_INT 30
53709: PUSH
53710: LD_INT 32
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 30
53719: PUSH
53720: LD_INT 33
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: LIST
53731: PPUSH
53732: CALL_OW 72
53736: PUSH
53737: FOR_IN
53738: IFFALSE 53778
// begin if not GetBWeapon ( i ) then
53740: LD_VAR 0 8
53744: PPUSH
53745: CALL_OW 269
53749: NOT
53750: IFFALSE 53776
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
53752: LD_VAR 0 8
53756: PPUSH
53757: LD_VAR 0 8
53761: PPUSH
53762: LD_VAR 0 2
53766: PPUSH
53767: CALL 55026 0 2
53771: PPUSH
53772: CALL_OW 431
// end ;
53776: GO 53737
53778: POP
53779: POP
// end ; for i = 1 to personel do
53780: LD_ADDR_VAR 0 8
53784: PUSH
53785: DOUBLE
53786: LD_INT 1
53788: DEC
53789: ST_TO_ADDR
53790: LD_VAR 0 6
53794: PUSH
53795: FOR_TO
53796: IFFALSE 54860
// begin if i > 4 then
53798: LD_VAR 0 8
53802: PUSH
53803: LD_INT 4
53805: GREATER
53806: IFFALSE 53810
// break ;
53808: GO 54860
// case i of 1 :
53810: LD_VAR 0 8
53814: PUSH
53815: LD_INT 1
53817: DOUBLE
53818: EQUAL
53819: IFTRUE 53823
53821: GO 53903
53823: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
53824: LD_ADDR_VAR 0 12
53828: PUSH
53829: LD_VAR 0 18
53833: PPUSH
53834: LD_INT 22
53836: PUSH
53837: LD_VAR 0 16
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 58
53848: PUSH
53849: EMPTY
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: LD_INT 30
53857: PUSH
53858: LD_INT 32
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 30
53867: PUSH
53868: LD_INT 4
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 30
53877: PUSH
53878: LD_INT 5
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: LIST
53895: PPUSH
53896: CALL_OW 72
53900: ST_TO_ADDR
53901: GO 54125
53903: LD_INT 2
53905: DOUBLE
53906: EQUAL
53907: IFTRUE 53911
53909: GO 53973
53911: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
53912: LD_ADDR_VAR 0 12
53916: PUSH
53917: LD_VAR 0 18
53921: PPUSH
53922: LD_INT 22
53924: PUSH
53925: LD_VAR 0 16
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: LD_INT 30
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 30
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PPUSH
53966: CALL_OW 72
53970: ST_TO_ADDR
53971: GO 54125
53973: LD_INT 3
53975: DOUBLE
53976: EQUAL
53977: IFTRUE 53981
53979: GO 54043
53981: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
53982: LD_ADDR_VAR 0 12
53986: PUSH
53987: LD_VAR 0 18
53991: PPUSH
53992: LD_INT 22
53994: PUSH
53995: LD_VAR 0 16
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: LD_INT 30
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 30
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: LIST
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PPUSH
54036: CALL_OW 72
54040: ST_TO_ADDR
54041: GO 54125
54043: LD_INT 4
54045: DOUBLE
54046: EQUAL
54047: IFTRUE 54051
54049: GO 54124
54051: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
54052: LD_ADDR_VAR 0 12
54056: PUSH
54057: LD_VAR 0 18
54061: PPUSH
54062: LD_INT 22
54064: PUSH
54065: LD_VAR 0 16
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: LD_INT 30
54079: PUSH
54080: LD_INT 6
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 30
54089: PUSH
54090: LD_INT 7
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 30
54099: PUSH
54100: LD_INT 8
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PPUSH
54117: CALL_OW 72
54121: ST_TO_ADDR
54122: GO 54125
54124: POP
// if i = 1 then
54125: LD_VAR 0 8
54129: PUSH
54130: LD_INT 1
54132: EQUAL
54133: IFFALSE 54244
// begin tmp := [ ] ;
54135: LD_ADDR_VAR 0 19
54139: PUSH
54140: EMPTY
54141: ST_TO_ADDR
// for j in f do
54142: LD_ADDR_VAR 0 9
54146: PUSH
54147: LD_VAR 0 12
54151: PUSH
54152: FOR_IN
54153: IFFALSE 54226
// if GetBType ( j ) = b_bunker then
54155: LD_VAR 0 9
54159: PPUSH
54160: CALL_OW 266
54164: PUSH
54165: LD_INT 32
54167: EQUAL
54168: IFFALSE 54195
// tmp := Insert ( tmp , 1 , j ) else
54170: LD_ADDR_VAR 0 19
54174: PUSH
54175: LD_VAR 0 19
54179: PPUSH
54180: LD_INT 1
54182: PPUSH
54183: LD_VAR 0 9
54187: PPUSH
54188: CALL_OW 2
54192: ST_TO_ADDR
54193: GO 54224
// tmp := Insert ( tmp , tmp + 1 , j ) ;
54195: LD_ADDR_VAR 0 19
54199: PUSH
54200: LD_VAR 0 19
54204: PPUSH
54205: LD_VAR 0 19
54209: PUSH
54210: LD_INT 1
54212: PLUS
54213: PPUSH
54214: LD_VAR 0 9
54218: PPUSH
54219: CALL_OW 2
54223: ST_TO_ADDR
54224: GO 54152
54226: POP
54227: POP
// if tmp then
54228: LD_VAR 0 19
54232: IFFALSE 54244
// f := tmp ;
54234: LD_ADDR_VAR 0 12
54238: PUSH
54239: LD_VAR 0 19
54243: ST_TO_ADDR
// end ; x := personel [ i ] ;
54244: LD_ADDR_VAR 0 13
54248: PUSH
54249: LD_VAR 0 6
54253: PUSH
54254: LD_VAR 0 8
54258: ARRAY
54259: ST_TO_ADDR
// if x = - 1 then
54260: LD_VAR 0 13
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: EQUAL
54269: IFFALSE 54478
// begin for j in f do
54271: LD_ADDR_VAR 0 9
54275: PUSH
54276: LD_VAR 0 12
54280: PUSH
54281: FOR_IN
54282: IFFALSE 54474
// repeat InitHc ;
54284: CALL_OW 19
// if GetBType ( j ) = b_barracks then
54288: LD_VAR 0 9
54292: PPUSH
54293: CALL_OW 266
54297: PUSH
54298: LD_INT 5
54300: EQUAL
54301: IFFALSE 54371
// begin if UnitsInside ( j ) < 3 then
54303: LD_VAR 0 9
54307: PPUSH
54308: CALL_OW 313
54312: PUSH
54313: LD_INT 3
54315: LESS
54316: IFFALSE 54352
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54318: LD_INT 0
54320: PPUSH
54321: LD_INT 5
54323: PUSH
54324: LD_INT 8
54326: PUSH
54327: LD_INT 9
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: LIST
54334: PUSH
54335: LD_VAR 0 17
54339: ARRAY
54340: PPUSH
54341: LD_VAR 0 4
54345: PPUSH
54346: CALL_OW 380
54350: GO 54369
// PrepareHuman ( false , i , skill ) ;
54352: LD_INT 0
54354: PPUSH
54355: LD_VAR 0 8
54359: PPUSH
54360: LD_VAR 0 4
54364: PPUSH
54365: CALL_OW 380
// end else
54369: GO 54388
// PrepareHuman ( false , i , skill ) ;
54371: LD_INT 0
54373: PPUSH
54374: LD_VAR 0 8
54378: PPUSH
54379: LD_VAR 0 4
54383: PPUSH
54384: CALL_OW 380
// un := CreateHuman ;
54388: LD_ADDR_VAR 0 14
54392: PUSH
54393: CALL_OW 44
54397: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54398: LD_ADDR_VAR 0 7
54402: PUSH
54403: LD_VAR 0 7
54407: PPUSH
54408: LD_INT 1
54410: PPUSH
54411: LD_VAR 0 14
54415: PPUSH
54416: CALL_OW 2
54420: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
54421: LD_VAR 0 14
54425: PPUSH
54426: LD_VAR 0 9
54430: PPUSH
54431: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
54435: LD_VAR 0 9
54439: PPUSH
54440: CALL_OW 313
54444: PUSH
54445: LD_INT 6
54447: EQUAL
54448: PUSH
54449: LD_VAR 0 9
54453: PPUSH
54454: CALL_OW 266
54458: PUSH
54459: LD_INT 32
54461: PUSH
54462: LD_INT 31
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: IN
54469: OR
54470: IFFALSE 54284
54472: GO 54281
54474: POP
54475: POP
// end else
54476: GO 54858
// for j = 1 to x do
54478: LD_ADDR_VAR 0 9
54482: PUSH
54483: DOUBLE
54484: LD_INT 1
54486: DEC
54487: ST_TO_ADDR
54488: LD_VAR 0 13
54492: PUSH
54493: FOR_TO
54494: IFFALSE 54856
// begin InitHc ;
54496: CALL_OW 19
// if not f then
54500: LD_VAR 0 12
54504: NOT
54505: IFFALSE 54594
// begin PrepareHuman ( false , i , skill ) ;
54507: LD_INT 0
54509: PPUSH
54510: LD_VAR 0 8
54514: PPUSH
54515: LD_VAR 0 4
54519: PPUSH
54520: CALL_OW 380
// un := CreateHuman ;
54524: LD_ADDR_VAR 0 14
54528: PUSH
54529: CALL_OW 44
54533: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54534: LD_ADDR_VAR 0 7
54538: PUSH
54539: LD_VAR 0 7
54543: PPUSH
54544: LD_INT 1
54546: PPUSH
54547: LD_VAR 0 14
54551: PPUSH
54552: CALL_OW 2
54556: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54557: LD_VAR 0 14
54561: PPUSH
54562: LD_VAR 0 1
54566: PPUSH
54567: CALL_OW 250
54571: PPUSH
54572: LD_VAR 0 1
54576: PPUSH
54577: CALL_OW 251
54581: PPUSH
54582: LD_INT 10
54584: PPUSH
54585: LD_INT 0
54587: PPUSH
54588: CALL_OW 50
// continue ;
54592: GO 54493
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
54594: LD_VAR 0 12
54598: PUSH
54599: LD_INT 1
54601: ARRAY
54602: PPUSH
54603: CALL_OW 313
54607: PUSH
54608: LD_VAR 0 12
54612: PUSH
54613: LD_INT 1
54615: ARRAY
54616: PPUSH
54617: CALL_OW 266
54621: PUSH
54622: LD_INT 32
54624: PUSH
54625: LD_INT 31
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: IN
54632: AND
54633: PUSH
54634: LD_VAR 0 12
54638: PUSH
54639: LD_INT 1
54641: ARRAY
54642: PPUSH
54643: CALL_OW 313
54647: PUSH
54648: LD_INT 6
54650: EQUAL
54651: OR
54652: IFFALSE 54672
// f := Delete ( f , 1 ) ;
54654: LD_ADDR_VAR 0 12
54658: PUSH
54659: LD_VAR 0 12
54663: PPUSH
54664: LD_INT 1
54666: PPUSH
54667: CALL_OW 3
54671: ST_TO_ADDR
// if not f then
54672: LD_VAR 0 12
54676: NOT
54677: IFFALSE 54695
// begin x := x + 2 ;
54679: LD_ADDR_VAR 0 13
54683: PUSH
54684: LD_VAR 0 13
54688: PUSH
54689: LD_INT 2
54691: PLUS
54692: ST_TO_ADDR
// continue ;
54693: GO 54493
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
54695: LD_VAR 0 12
54699: PUSH
54700: LD_INT 1
54702: ARRAY
54703: PPUSH
54704: CALL_OW 266
54708: PUSH
54709: LD_INT 5
54711: EQUAL
54712: IFFALSE 54786
// begin if UnitsInside ( f [ 1 ] ) < 3 then
54714: LD_VAR 0 12
54718: PUSH
54719: LD_INT 1
54721: ARRAY
54722: PPUSH
54723: CALL_OW 313
54727: PUSH
54728: LD_INT 3
54730: LESS
54731: IFFALSE 54767
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54733: LD_INT 0
54735: PPUSH
54736: LD_INT 5
54738: PUSH
54739: LD_INT 8
54741: PUSH
54742: LD_INT 9
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: LIST
54749: PUSH
54750: LD_VAR 0 17
54754: ARRAY
54755: PPUSH
54756: LD_VAR 0 4
54760: PPUSH
54761: CALL_OW 380
54765: GO 54784
// PrepareHuman ( false , i , skill ) ;
54767: LD_INT 0
54769: PPUSH
54770: LD_VAR 0 8
54774: PPUSH
54775: LD_VAR 0 4
54779: PPUSH
54780: CALL_OW 380
// end else
54784: GO 54803
// PrepareHuman ( false , i , skill ) ;
54786: LD_INT 0
54788: PPUSH
54789: LD_VAR 0 8
54793: PPUSH
54794: LD_VAR 0 4
54798: PPUSH
54799: CALL_OW 380
// un := CreateHuman ;
54803: LD_ADDR_VAR 0 14
54807: PUSH
54808: CALL_OW 44
54812: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54813: LD_ADDR_VAR 0 7
54817: PUSH
54818: LD_VAR 0 7
54822: PPUSH
54823: LD_INT 1
54825: PPUSH
54826: LD_VAR 0 14
54830: PPUSH
54831: CALL_OW 2
54835: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
54836: LD_VAR 0 14
54840: PPUSH
54841: LD_VAR 0 12
54845: PUSH
54846: LD_INT 1
54848: ARRAY
54849: PPUSH
54850: CALL_OW 52
// end ;
54854: GO 54493
54856: POP
54857: POP
// end ;
54858: GO 53795
54860: POP
54861: POP
// result := result ^ buildings ;
54862: LD_ADDR_VAR 0 7
54866: PUSH
54867: LD_VAR 0 7
54871: PUSH
54872: LD_VAR 0 18
54876: ADD
54877: ST_TO_ADDR
// end else
54878: GO 55021
// begin for i = 1 to personel do
54880: LD_ADDR_VAR 0 8
54884: PUSH
54885: DOUBLE
54886: LD_INT 1
54888: DEC
54889: ST_TO_ADDR
54890: LD_VAR 0 6
54894: PUSH
54895: FOR_TO
54896: IFFALSE 55019
// begin if i > 4 then
54898: LD_VAR 0 8
54902: PUSH
54903: LD_INT 4
54905: GREATER
54906: IFFALSE 54910
// break ;
54908: GO 55019
// x := personel [ i ] ;
54910: LD_ADDR_VAR 0 13
54914: PUSH
54915: LD_VAR 0 6
54919: PUSH
54920: LD_VAR 0 8
54924: ARRAY
54925: ST_TO_ADDR
// if x = - 1 then
54926: LD_VAR 0 13
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: EQUAL
54935: IFFALSE 54939
// continue ;
54937: GO 54895
// PrepareHuman ( false , i , skill ) ;
54939: LD_INT 0
54941: PPUSH
54942: LD_VAR 0 8
54946: PPUSH
54947: LD_VAR 0 4
54951: PPUSH
54952: CALL_OW 380
// un := CreateHuman ;
54956: LD_ADDR_VAR 0 14
54960: PUSH
54961: CALL_OW 44
54965: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54966: LD_VAR 0 14
54970: PPUSH
54971: LD_VAR 0 1
54975: PPUSH
54976: CALL_OW 250
54980: PPUSH
54981: LD_VAR 0 1
54985: PPUSH
54986: CALL_OW 251
54990: PPUSH
54991: LD_INT 10
54993: PPUSH
54994: LD_INT 0
54996: PPUSH
54997: CALL_OW 50
// result := result ^ un ;
55001: LD_ADDR_VAR 0 7
55005: PUSH
55006: LD_VAR 0 7
55010: PUSH
55011: LD_VAR 0 14
55015: ADD
55016: ST_TO_ADDR
// end ;
55017: GO 54895
55019: POP
55020: POP
// end ; end ;
55021: LD_VAR 0 7
55025: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
55026: LD_INT 0
55028: PPUSH
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
// result := false ;
55044: LD_ADDR_VAR 0 3
55048: PUSH
55049: LD_INT 0
55051: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
55052: LD_VAR 0 1
55056: NOT
55057: PUSH
55058: LD_VAR 0 1
55062: PPUSH
55063: CALL_OW 266
55067: PUSH
55068: LD_INT 32
55070: PUSH
55071: LD_INT 33
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: IN
55078: NOT
55079: OR
55080: IFFALSE 55084
// exit ;
55082: GO 56193
// nat := GetNation ( tower ) ;
55084: LD_ADDR_VAR 0 12
55088: PUSH
55089: LD_VAR 0 1
55093: PPUSH
55094: CALL_OW 248
55098: ST_TO_ADDR
// side := GetSide ( tower ) ;
55099: LD_ADDR_VAR 0 16
55103: PUSH
55104: LD_VAR 0 1
55108: PPUSH
55109: CALL_OW 255
55113: ST_TO_ADDR
// x := GetX ( tower ) ;
55114: LD_ADDR_VAR 0 10
55118: PUSH
55119: LD_VAR 0 1
55123: PPUSH
55124: CALL_OW 250
55128: ST_TO_ADDR
// y := GetY ( tower ) ;
55129: LD_ADDR_VAR 0 11
55133: PUSH
55134: LD_VAR 0 1
55138: PPUSH
55139: CALL_OW 251
55143: ST_TO_ADDR
// if not x or not y then
55144: LD_VAR 0 10
55148: NOT
55149: PUSH
55150: LD_VAR 0 11
55154: NOT
55155: OR
55156: IFFALSE 55160
// exit ;
55158: GO 56193
// weapon := 0 ;
55160: LD_ADDR_VAR 0 18
55164: PUSH
55165: LD_INT 0
55167: ST_TO_ADDR
// fac_list := [ ] ;
55168: LD_ADDR_VAR 0 17
55172: PUSH
55173: EMPTY
55174: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
55175: LD_ADDR_VAR 0 6
55179: PUSH
55180: LD_VAR 0 1
55184: PPUSH
55185: CALL_OW 274
55189: PPUSH
55190: LD_VAR 0 2
55194: PPUSH
55195: LD_INT 0
55197: PPUSH
55198: CALL 52764 0 3
55202: PPUSH
55203: LD_INT 30
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PPUSH
55213: CALL_OW 72
55217: ST_TO_ADDR
// if not factories then
55218: LD_VAR 0 6
55222: NOT
55223: IFFALSE 55227
// exit ;
55225: GO 56193
// for i in factories do
55227: LD_ADDR_VAR 0 8
55231: PUSH
55232: LD_VAR 0 6
55236: PUSH
55237: FOR_IN
55238: IFFALSE 55263
// fac_list := fac_list union AvailableWeaponList ( i ) ;
55240: LD_ADDR_VAR 0 17
55244: PUSH
55245: LD_VAR 0 17
55249: PUSH
55250: LD_VAR 0 8
55254: PPUSH
55255: CALL_OW 478
55259: UNION
55260: ST_TO_ADDR
55261: GO 55237
55263: POP
55264: POP
// if not fac_list then
55265: LD_VAR 0 17
55269: NOT
55270: IFFALSE 55274
// exit ;
55272: GO 56193
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
55274: LD_ADDR_VAR 0 5
55278: PUSH
55279: LD_INT 4
55281: PUSH
55282: LD_INT 5
55284: PUSH
55285: LD_INT 9
55287: PUSH
55288: LD_INT 10
55290: PUSH
55291: LD_INT 6
55293: PUSH
55294: LD_INT 7
55296: PUSH
55297: LD_INT 11
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 27
55311: PUSH
55312: LD_INT 28
55314: PUSH
55315: LD_INT 26
55317: PUSH
55318: LD_INT 30
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 43
55329: PUSH
55330: LD_INT 44
55332: PUSH
55333: LD_INT 46
55335: PUSH
55336: LD_INT 45
55338: PUSH
55339: LD_INT 47
55341: PUSH
55342: LD_INT 49
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: LIST
55357: PUSH
55358: LD_VAR 0 12
55362: ARRAY
55363: ST_TO_ADDR
// list := list isect fac_list ;
55364: LD_ADDR_VAR 0 5
55368: PUSH
55369: LD_VAR 0 5
55373: PUSH
55374: LD_VAR 0 17
55378: ISECT
55379: ST_TO_ADDR
// if not list then
55380: LD_VAR 0 5
55384: NOT
55385: IFFALSE 55389
// exit ;
55387: GO 56193
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
55389: LD_VAR 0 12
55393: PUSH
55394: LD_INT 3
55396: EQUAL
55397: PUSH
55398: LD_INT 49
55400: PUSH
55401: LD_VAR 0 5
55405: IN
55406: AND
55407: PUSH
55408: LD_INT 31
55410: PPUSH
55411: LD_VAR 0 16
55415: PPUSH
55416: CALL_OW 321
55420: PUSH
55421: LD_INT 2
55423: EQUAL
55424: AND
55425: IFFALSE 55485
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
55427: LD_INT 22
55429: PUSH
55430: LD_VAR 0 16
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 35
55441: PUSH
55442: LD_INT 49
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 91
55451: PUSH
55452: LD_VAR 0 1
55456: PUSH
55457: LD_INT 10
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: LIST
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: LIST
55469: PPUSH
55470: CALL_OW 69
55474: NOT
55475: IFFALSE 55485
// weapon := ru_time_lapser ;
55477: LD_ADDR_VAR 0 18
55481: PUSH
55482: LD_INT 49
55484: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
55485: LD_VAR 0 12
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: IN
55500: PUSH
55501: LD_INT 11
55503: PUSH
55504: LD_VAR 0 5
55508: IN
55509: PUSH
55510: LD_INT 30
55512: PUSH
55513: LD_VAR 0 5
55517: IN
55518: OR
55519: AND
55520: PUSH
55521: LD_INT 6
55523: PPUSH
55524: LD_VAR 0 16
55528: PPUSH
55529: CALL_OW 321
55533: PUSH
55534: LD_INT 2
55536: EQUAL
55537: AND
55538: IFFALSE 55703
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
55540: LD_INT 22
55542: PUSH
55543: LD_VAR 0 16
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: LD_INT 35
55557: PUSH
55558: LD_INT 11
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 35
55567: PUSH
55568: LD_INT 30
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 91
55582: PUSH
55583: LD_VAR 0 1
55587: PUSH
55588: LD_INT 18
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: LIST
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: LIST
55600: PPUSH
55601: CALL_OW 69
55605: NOT
55606: PUSH
55607: LD_INT 22
55609: PUSH
55610: LD_VAR 0 16
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: LD_INT 30
55624: PUSH
55625: LD_INT 32
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 30
55634: PUSH
55635: LD_INT 33
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 91
55649: PUSH
55650: LD_VAR 0 1
55654: PUSH
55655: LD_INT 12
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: LIST
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: LIST
55667: PUSH
55668: EMPTY
55669: LIST
55670: PPUSH
55671: CALL_OW 69
55675: PUSH
55676: LD_INT 2
55678: GREATER
55679: AND
55680: IFFALSE 55703
// weapon := [ us_radar , ar_radar ] [ nat ] ;
55682: LD_ADDR_VAR 0 18
55686: PUSH
55687: LD_INT 11
55689: PUSH
55690: LD_INT 30
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_VAR 0 12
55701: ARRAY
55702: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
55703: LD_VAR 0 18
55707: NOT
55708: PUSH
55709: LD_INT 40
55711: PPUSH
55712: LD_VAR 0 16
55716: PPUSH
55717: CALL_OW 321
55721: PUSH
55722: LD_INT 2
55724: EQUAL
55725: AND
55726: PUSH
55727: LD_INT 7
55729: PUSH
55730: LD_VAR 0 5
55734: IN
55735: PUSH
55736: LD_INT 28
55738: PUSH
55739: LD_VAR 0 5
55743: IN
55744: OR
55745: PUSH
55746: LD_INT 45
55748: PUSH
55749: LD_VAR 0 5
55753: IN
55754: OR
55755: AND
55756: IFFALSE 56010
// begin hex := GetHexInfo ( x , y ) ;
55758: LD_ADDR_VAR 0 4
55762: PUSH
55763: LD_VAR 0 10
55767: PPUSH
55768: LD_VAR 0 11
55772: PPUSH
55773: CALL_OW 546
55777: ST_TO_ADDR
// if hex [ 1 ] then
55778: LD_VAR 0 4
55782: PUSH
55783: LD_INT 1
55785: ARRAY
55786: IFFALSE 55790
// exit ;
55788: GO 56193
// height := hex [ 2 ] ;
55790: LD_ADDR_VAR 0 15
55794: PUSH
55795: LD_VAR 0 4
55799: PUSH
55800: LD_INT 2
55802: ARRAY
55803: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
55804: LD_ADDR_VAR 0 14
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: LD_INT 5
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: ST_TO_ADDR
// for i in tmp do
55827: LD_ADDR_VAR 0 8
55831: PUSH
55832: LD_VAR 0 14
55836: PUSH
55837: FOR_IN
55838: IFFALSE 56008
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
55840: LD_ADDR_VAR 0 9
55844: PUSH
55845: LD_VAR 0 10
55849: PPUSH
55850: LD_VAR 0 8
55854: PPUSH
55855: LD_INT 5
55857: PPUSH
55858: CALL_OW 272
55862: PUSH
55863: LD_VAR 0 11
55867: PPUSH
55868: LD_VAR 0 8
55872: PPUSH
55873: LD_INT 5
55875: PPUSH
55876: CALL_OW 273
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
55885: LD_VAR 0 9
55889: PUSH
55890: LD_INT 1
55892: ARRAY
55893: PPUSH
55894: LD_VAR 0 9
55898: PUSH
55899: LD_INT 2
55901: ARRAY
55902: PPUSH
55903: CALL_OW 488
55907: IFFALSE 56006
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
55909: LD_ADDR_VAR 0 4
55913: PUSH
55914: LD_VAR 0 9
55918: PUSH
55919: LD_INT 1
55921: ARRAY
55922: PPUSH
55923: LD_VAR 0 9
55927: PUSH
55928: LD_INT 2
55930: ARRAY
55931: PPUSH
55932: CALL_OW 546
55936: ST_TO_ADDR
// if hex [ 1 ] then
55937: LD_VAR 0 4
55941: PUSH
55942: LD_INT 1
55944: ARRAY
55945: IFFALSE 55949
// continue ;
55947: GO 55837
// h := hex [ 2 ] ;
55949: LD_ADDR_VAR 0 13
55953: PUSH
55954: LD_VAR 0 4
55958: PUSH
55959: LD_INT 2
55961: ARRAY
55962: ST_TO_ADDR
// if h + 7 < height then
55963: LD_VAR 0 13
55967: PUSH
55968: LD_INT 7
55970: PLUS
55971: PUSH
55972: LD_VAR 0 15
55976: LESS
55977: IFFALSE 56006
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
55979: LD_ADDR_VAR 0 18
55983: PUSH
55984: LD_INT 7
55986: PUSH
55987: LD_INT 28
55989: PUSH
55990: LD_INT 45
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: PUSH
55998: LD_VAR 0 12
56002: ARRAY
56003: ST_TO_ADDR
// break ;
56004: GO 56008
// end ; end ; end ;
56006: GO 55837
56008: POP
56009: POP
// end ; if not weapon then
56010: LD_VAR 0 18
56014: NOT
56015: IFFALSE 56075
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
56017: LD_ADDR_VAR 0 5
56021: PUSH
56022: LD_VAR 0 5
56026: PUSH
56027: LD_INT 11
56029: PUSH
56030: LD_INT 30
56032: PUSH
56033: LD_INT 49
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: LIST
56040: DIFF
56041: ST_TO_ADDR
// if not list then
56042: LD_VAR 0 5
56046: NOT
56047: IFFALSE 56051
// exit ;
56049: GO 56193
// weapon := list [ rand ( 1 , list ) ] ;
56051: LD_ADDR_VAR 0 18
56055: PUSH
56056: LD_VAR 0 5
56060: PUSH
56061: LD_INT 1
56063: PPUSH
56064: LD_VAR 0 5
56068: PPUSH
56069: CALL_OW 12
56073: ARRAY
56074: ST_TO_ADDR
// end ; if weapon then
56075: LD_VAR 0 18
56079: IFFALSE 56193
// begin tmp := CostOfWeapon ( weapon ) ;
56081: LD_ADDR_VAR 0 14
56085: PUSH
56086: LD_VAR 0 18
56090: PPUSH
56091: CALL_OW 451
56095: ST_TO_ADDR
// j := GetBase ( tower ) ;
56096: LD_ADDR_VAR 0 9
56100: PUSH
56101: LD_VAR 0 1
56105: PPUSH
56106: CALL_OW 274
56110: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
56111: LD_VAR 0 9
56115: PPUSH
56116: LD_INT 1
56118: PPUSH
56119: CALL_OW 275
56123: PUSH
56124: LD_VAR 0 14
56128: PUSH
56129: LD_INT 1
56131: ARRAY
56132: GREATEREQUAL
56133: PUSH
56134: LD_VAR 0 9
56138: PPUSH
56139: LD_INT 2
56141: PPUSH
56142: CALL_OW 275
56146: PUSH
56147: LD_VAR 0 14
56151: PUSH
56152: LD_INT 2
56154: ARRAY
56155: GREATEREQUAL
56156: AND
56157: PUSH
56158: LD_VAR 0 9
56162: PPUSH
56163: LD_INT 3
56165: PPUSH
56166: CALL_OW 275
56170: PUSH
56171: LD_VAR 0 14
56175: PUSH
56176: LD_INT 3
56178: ARRAY
56179: GREATEREQUAL
56180: AND
56181: IFFALSE 56193
// result := weapon ;
56183: LD_ADDR_VAR 0 3
56187: PUSH
56188: LD_VAR 0 18
56192: ST_TO_ADDR
// end ; end ;
56193: LD_VAR 0 3
56197: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
56198: LD_INT 0
56200: PPUSH
56201: PPUSH
// result := true ;
56202: LD_ADDR_VAR 0 3
56206: PUSH
56207: LD_INT 1
56209: ST_TO_ADDR
// if array1 = array2 then
56210: LD_VAR 0 1
56214: PUSH
56215: LD_VAR 0 2
56219: EQUAL
56220: IFFALSE 56280
// begin for i = 1 to array1 do
56222: LD_ADDR_VAR 0 4
56226: PUSH
56227: DOUBLE
56228: LD_INT 1
56230: DEC
56231: ST_TO_ADDR
56232: LD_VAR 0 1
56236: PUSH
56237: FOR_TO
56238: IFFALSE 56276
// if array1 [ i ] <> array2 [ i ] then
56240: LD_VAR 0 1
56244: PUSH
56245: LD_VAR 0 4
56249: ARRAY
56250: PUSH
56251: LD_VAR 0 2
56255: PUSH
56256: LD_VAR 0 4
56260: ARRAY
56261: NONEQUAL
56262: IFFALSE 56274
// begin result := false ;
56264: LD_ADDR_VAR 0 3
56268: PUSH
56269: LD_INT 0
56271: ST_TO_ADDR
// break ;
56272: GO 56276
// end ;
56274: GO 56237
56276: POP
56277: POP
// end else
56278: GO 56288
// result := false ;
56280: LD_ADDR_VAR 0 3
56284: PUSH
56285: LD_INT 0
56287: ST_TO_ADDR
// end ;
56288: LD_VAR 0 3
56292: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
56293: LD_INT 0
56295: PPUSH
56296: PPUSH
// if not array1 or not array2 then
56297: LD_VAR 0 1
56301: NOT
56302: PUSH
56303: LD_VAR 0 2
56307: NOT
56308: OR
56309: IFFALSE 56313
// exit ;
56311: GO 56377
// result := true ;
56313: LD_ADDR_VAR 0 3
56317: PUSH
56318: LD_INT 1
56320: ST_TO_ADDR
// for i = 1 to array1 do
56321: LD_ADDR_VAR 0 4
56325: PUSH
56326: DOUBLE
56327: LD_INT 1
56329: DEC
56330: ST_TO_ADDR
56331: LD_VAR 0 1
56335: PUSH
56336: FOR_TO
56337: IFFALSE 56375
// if array1 [ i ] <> array2 [ i ] then
56339: LD_VAR 0 1
56343: PUSH
56344: LD_VAR 0 4
56348: ARRAY
56349: PUSH
56350: LD_VAR 0 2
56354: PUSH
56355: LD_VAR 0 4
56359: ARRAY
56360: NONEQUAL
56361: IFFALSE 56373
// begin result := false ;
56363: LD_ADDR_VAR 0 3
56367: PUSH
56368: LD_INT 0
56370: ST_TO_ADDR
// break ;
56371: GO 56375
// end ;
56373: GO 56336
56375: POP
56376: POP
// end ;
56377: LD_VAR 0 3
56381: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
56382: LD_INT 0
56384: PPUSH
56385: PPUSH
56386: PPUSH
// pom := GetBase ( fac ) ;
56387: LD_ADDR_VAR 0 5
56391: PUSH
56392: LD_VAR 0 1
56396: PPUSH
56397: CALL_OW 274
56401: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
56402: LD_ADDR_VAR 0 4
56406: PUSH
56407: LD_VAR 0 2
56411: PUSH
56412: LD_INT 1
56414: ARRAY
56415: PPUSH
56416: LD_VAR 0 2
56420: PUSH
56421: LD_INT 2
56423: ARRAY
56424: PPUSH
56425: LD_VAR 0 2
56429: PUSH
56430: LD_INT 3
56432: ARRAY
56433: PPUSH
56434: LD_VAR 0 2
56438: PUSH
56439: LD_INT 4
56441: ARRAY
56442: PPUSH
56443: CALL_OW 449
56447: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56448: LD_ADDR_VAR 0 3
56452: PUSH
56453: LD_VAR 0 5
56457: PPUSH
56458: LD_INT 1
56460: PPUSH
56461: CALL_OW 275
56465: PUSH
56466: LD_VAR 0 4
56470: PUSH
56471: LD_INT 1
56473: ARRAY
56474: GREATEREQUAL
56475: PUSH
56476: LD_VAR 0 5
56480: PPUSH
56481: LD_INT 2
56483: PPUSH
56484: CALL_OW 275
56488: PUSH
56489: LD_VAR 0 4
56493: PUSH
56494: LD_INT 2
56496: ARRAY
56497: GREATEREQUAL
56498: AND
56499: PUSH
56500: LD_VAR 0 5
56504: PPUSH
56505: LD_INT 3
56507: PPUSH
56508: CALL_OW 275
56512: PUSH
56513: LD_VAR 0 4
56517: PUSH
56518: LD_INT 3
56520: ARRAY
56521: GREATEREQUAL
56522: AND
56523: ST_TO_ADDR
// end ;
56524: LD_VAR 0 3
56528: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
56529: LD_INT 0
56531: PPUSH
56532: PPUSH
56533: PPUSH
56534: PPUSH
// pom := GetBase ( building ) ;
56535: LD_ADDR_VAR 0 3
56539: PUSH
56540: LD_VAR 0 1
56544: PPUSH
56545: CALL_OW 274
56549: ST_TO_ADDR
// if not pom then
56550: LD_VAR 0 3
56554: NOT
56555: IFFALSE 56559
// exit ;
56557: GO 56729
// btype := GetBType ( building ) ;
56559: LD_ADDR_VAR 0 5
56563: PUSH
56564: LD_VAR 0 1
56568: PPUSH
56569: CALL_OW 266
56573: ST_TO_ADDR
// if btype = b_armoury then
56574: LD_VAR 0 5
56578: PUSH
56579: LD_INT 4
56581: EQUAL
56582: IFFALSE 56592
// btype := b_barracks ;
56584: LD_ADDR_VAR 0 5
56588: PUSH
56589: LD_INT 5
56591: ST_TO_ADDR
// if btype = b_depot then
56592: LD_VAR 0 5
56596: PUSH
56597: LD_INT 0
56599: EQUAL
56600: IFFALSE 56610
// btype := b_warehouse ;
56602: LD_ADDR_VAR 0 5
56606: PUSH
56607: LD_INT 1
56609: ST_TO_ADDR
// if btype = b_workshop then
56610: LD_VAR 0 5
56614: PUSH
56615: LD_INT 2
56617: EQUAL
56618: IFFALSE 56628
// btype := b_factory ;
56620: LD_ADDR_VAR 0 5
56624: PUSH
56625: LD_INT 3
56627: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56628: LD_ADDR_VAR 0 4
56632: PUSH
56633: LD_VAR 0 5
56637: PPUSH
56638: LD_VAR 0 1
56642: PPUSH
56643: CALL_OW 248
56647: PPUSH
56648: CALL_OW 450
56652: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56653: LD_ADDR_VAR 0 2
56657: PUSH
56658: LD_VAR 0 3
56662: PPUSH
56663: LD_INT 1
56665: PPUSH
56666: CALL_OW 275
56670: PUSH
56671: LD_VAR 0 4
56675: PUSH
56676: LD_INT 1
56678: ARRAY
56679: GREATEREQUAL
56680: PUSH
56681: LD_VAR 0 3
56685: PPUSH
56686: LD_INT 2
56688: PPUSH
56689: CALL_OW 275
56693: PUSH
56694: LD_VAR 0 4
56698: PUSH
56699: LD_INT 2
56701: ARRAY
56702: GREATEREQUAL
56703: AND
56704: PUSH
56705: LD_VAR 0 3
56709: PPUSH
56710: LD_INT 3
56712: PPUSH
56713: CALL_OW 275
56717: PUSH
56718: LD_VAR 0 4
56722: PUSH
56723: LD_INT 3
56725: ARRAY
56726: GREATEREQUAL
56727: AND
56728: ST_TO_ADDR
// end ;
56729: LD_VAR 0 2
56733: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
56734: LD_INT 0
56736: PPUSH
56737: PPUSH
56738: PPUSH
// pom := GetBase ( building ) ;
56739: LD_ADDR_VAR 0 4
56743: PUSH
56744: LD_VAR 0 1
56748: PPUSH
56749: CALL_OW 274
56753: ST_TO_ADDR
// if not pom then
56754: LD_VAR 0 4
56758: NOT
56759: IFFALSE 56763
// exit ;
56761: GO 56864
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56763: LD_ADDR_VAR 0 5
56767: PUSH
56768: LD_VAR 0 2
56772: PPUSH
56773: LD_VAR 0 1
56777: PPUSH
56778: CALL_OW 248
56782: PPUSH
56783: CALL_OW 450
56787: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56788: LD_ADDR_VAR 0 3
56792: PUSH
56793: LD_VAR 0 4
56797: PPUSH
56798: LD_INT 1
56800: PPUSH
56801: CALL_OW 275
56805: PUSH
56806: LD_VAR 0 5
56810: PUSH
56811: LD_INT 1
56813: ARRAY
56814: GREATEREQUAL
56815: PUSH
56816: LD_VAR 0 4
56820: PPUSH
56821: LD_INT 2
56823: PPUSH
56824: CALL_OW 275
56828: PUSH
56829: LD_VAR 0 5
56833: PUSH
56834: LD_INT 2
56836: ARRAY
56837: GREATEREQUAL
56838: AND
56839: PUSH
56840: LD_VAR 0 4
56844: PPUSH
56845: LD_INT 3
56847: PPUSH
56848: CALL_OW 275
56852: PUSH
56853: LD_VAR 0 5
56857: PUSH
56858: LD_INT 3
56860: ARRAY
56861: GREATEREQUAL
56862: AND
56863: ST_TO_ADDR
// end ;
56864: LD_VAR 0 3
56868: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
56869: LD_INT 0
56871: PPUSH
56872: PPUSH
56873: PPUSH
56874: PPUSH
56875: PPUSH
56876: PPUSH
56877: PPUSH
56878: PPUSH
56879: PPUSH
56880: PPUSH
56881: PPUSH
// result := false ;
56882: LD_ADDR_VAR 0 8
56886: PUSH
56887: LD_INT 0
56889: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
56890: LD_VAR 0 5
56894: NOT
56895: PUSH
56896: LD_VAR 0 1
56900: NOT
56901: OR
56902: PUSH
56903: LD_VAR 0 2
56907: NOT
56908: OR
56909: PUSH
56910: LD_VAR 0 3
56914: NOT
56915: OR
56916: IFFALSE 56920
// exit ;
56918: GO 57734
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
56920: LD_ADDR_VAR 0 14
56924: PUSH
56925: LD_VAR 0 1
56929: PPUSH
56930: LD_VAR 0 2
56934: PPUSH
56935: LD_VAR 0 3
56939: PPUSH
56940: LD_VAR 0 4
56944: PPUSH
56945: LD_VAR 0 5
56949: PUSH
56950: LD_INT 1
56952: ARRAY
56953: PPUSH
56954: CALL_OW 248
56958: PPUSH
56959: LD_INT 0
56961: PPUSH
56962: CALL 58971 0 6
56966: ST_TO_ADDR
// if not hexes then
56967: LD_VAR 0 14
56971: NOT
56972: IFFALSE 56976
// exit ;
56974: GO 57734
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56976: LD_ADDR_VAR 0 17
56980: PUSH
56981: LD_VAR 0 5
56985: PPUSH
56986: LD_INT 22
56988: PUSH
56989: LD_VAR 0 13
56993: PPUSH
56994: CALL_OW 255
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: LD_INT 30
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 30
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: LIST
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PPUSH
57035: CALL_OW 72
57039: ST_TO_ADDR
// for i = 1 to hexes do
57040: LD_ADDR_VAR 0 9
57044: PUSH
57045: DOUBLE
57046: LD_INT 1
57048: DEC
57049: ST_TO_ADDR
57050: LD_VAR 0 14
57054: PUSH
57055: FOR_TO
57056: IFFALSE 57732
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57058: LD_ADDR_VAR 0 13
57062: PUSH
57063: LD_VAR 0 14
57067: PUSH
57068: LD_VAR 0 9
57072: ARRAY
57073: PUSH
57074: LD_INT 1
57076: ARRAY
57077: PPUSH
57078: LD_VAR 0 14
57082: PUSH
57083: LD_VAR 0 9
57087: ARRAY
57088: PUSH
57089: LD_INT 2
57091: ARRAY
57092: PPUSH
57093: CALL_OW 428
57097: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
57098: LD_VAR 0 14
57102: PUSH
57103: LD_VAR 0 9
57107: ARRAY
57108: PUSH
57109: LD_INT 1
57111: ARRAY
57112: PPUSH
57113: LD_VAR 0 14
57117: PUSH
57118: LD_VAR 0 9
57122: ARRAY
57123: PUSH
57124: LD_INT 2
57126: ARRAY
57127: PPUSH
57128: CALL_OW 351
57132: PUSH
57133: LD_VAR 0 14
57137: PUSH
57138: LD_VAR 0 9
57142: ARRAY
57143: PUSH
57144: LD_INT 1
57146: ARRAY
57147: PPUSH
57148: LD_VAR 0 14
57152: PUSH
57153: LD_VAR 0 9
57157: ARRAY
57158: PUSH
57159: LD_INT 2
57161: ARRAY
57162: PPUSH
57163: CALL_OW 488
57167: NOT
57168: OR
57169: PUSH
57170: LD_VAR 0 13
57174: PPUSH
57175: CALL_OW 247
57179: PUSH
57180: LD_INT 3
57182: EQUAL
57183: OR
57184: IFFALSE 57190
// exit ;
57186: POP
57187: POP
57188: GO 57734
// if not tmp then
57190: LD_VAR 0 13
57194: NOT
57195: IFFALSE 57199
// continue ;
57197: GO 57055
// result := true ;
57199: LD_ADDR_VAR 0 8
57203: PUSH
57204: LD_INT 1
57206: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
57207: LD_VAR 0 6
57211: PUSH
57212: LD_VAR 0 13
57216: PPUSH
57217: CALL_OW 247
57221: PUSH
57222: LD_INT 2
57224: EQUAL
57225: AND
57226: PUSH
57227: LD_VAR 0 13
57231: PPUSH
57232: CALL_OW 263
57236: PUSH
57237: LD_INT 1
57239: EQUAL
57240: AND
57241: IFFALSE 57405
// begin if IsDrivenBy ( tmp ) then
57243: LD_VAR 0 13
57247: PPUSH
57248: CALL_OW 311
57252: IFFALSE 57256
// continue ;
57254: GO 57055
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
57256: LD_VAR 0 6
57260: PPUSH
57261: LD_INT 3
57263: PUSH
57264: LD_INT 60
57266: PUSH
57267: EMPTY
57268: LIST
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 3
57276: PUSH
57277: LD_INT 55
57279: PUSH
57280: EMPTY
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PPUSH
57291: CALL_OW 72
57295: IFFALSE 57403
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
57297: LD_ADDR_VAR 0 18
57301: PUSH
57302: LD_VAR 0 6
57306: PPUSH
57307: LD_INT 3
57309: PUSH
57310: LD_INT 60
57312: PUSH
57313: EMPTY
57314: LIST
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 3
57322: PUSH
57323: LD_INT 55
57325: PUSH
57326: EMPTY
57327: LIST
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PPUSH
57337: CALL_OW 72
57341: PUSH
57342: LD_INT 1
57344: ARRAY
57345: ST_TO_ADDR
// if IsInUnit ( driver ) then
57346: LD_VAR 0 18
57350: PPUSH
57351: CALL_OW 310
57355: IFFALSE 57366
// ComExit ( driver ) ;
57357: LD_VAR 0 18
57361: PPUSH
57362: CALL 82155 0 1
// AddComEnterUnit ( driver , tmp ) ;
57366: LD_VAR 0 18
57370: PPUSH
57371: LD_VAR 0 13
57375: PPUSH
57376: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
57380: LD_VAR 0 18
57384: PPUSH
57385: LD_VAR 0 7
57389: PPUSH
57390: CALL_OW 173
// AddComExitVehicle ( driver ) ;
57394: LD_VAR 0 18
57398: PPUSH
57399: CALL_OW 181
// end ; continue ;
57403: GO 57055
// end ; if not cleaners or not tmp in cleaners then
57405: LD_VAR 0 6
57409: NOT
57410: PUSH
57411: LD_VAR 0 13
57415: PUSH
57416: LD_VAR 0 6
57420: IN
57421: NOT
57422: OR
57423: IFFALSE 57730
// begin if dep then
57425: LD_VAR 0 17
57429: IFFALSE 57565
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
57431: LD_ADDR_VAR 0 16
57435: PUSH
57436: LD_VAR 0 17
57440: PUSH
57441: LD_INT 1
57443: ARRAY
57444: PPUSH
57445: CALL_OW 250
57449: PPUSH
57450: LD_VAR 0 17
57454: PUSH
57455: LD_INT 1
57457: ARRAY
57458: PPUSH
57459: CALL_OW 254
57463: PPUSH
57464: LD_INT 5
57466: PPUSH
57467: CALL_OW 272
57471: PUSH
57472: LD_VAR 0 17
57476: PUSH
57477: LD_INT 1
57479: ARRAY
57480: PPUSH
57481: CALL_OW 251
57485: PPUSH
57486: LD_VAR 0 17
57490: PUSH
57491: LD_INT 1
57493: ARRAY
57494: PPUSH
57495: CALL_OW 254
57499: PPUSH
57500: LD_INT 5
57502: PPUSH
57503: CALL_OW 273
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
57512: LD_VAR 0 16
57516: PUSH
57517: LD_INT 1
57519: ARRAY
57520: PPUSH
57521: LD_VAR 0 16
57525: PUSH
57526: LD_INT 2
57528: ARRAY
57529: PPUSH
57530: CALL_OW 488
57534: IFFALSE 57565
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
57536: LD_VAR 0 13
57540: PPUSH
57541: LD_VAR 0 16
57545: PUSH
57546: LD_INT 1
57548: ARRAY
57549: PPUSH
57550: LD_VAR 0 16
57554: PUSH
57555: LD_INT 2
57557: ARRAY
57558: PPUSH
57559: CALL_OW 111
// continue ;
57563: GO 57055
// end ; end ; r := GetDir ( tmp ) ;
57565: LD_ADDR_VAR 0 15
57569: PUSH
57570: LD_VAR 0 13
57574: PPUSH
57575: CALL_OW 254
57579: ST_TO_ADDR
// if r = 5 then
57580: LD_VAR 0 15
57584: PUSH
57585: LD_INT 5
57587: EQUAL
57588: IFFALSE 57598
// r := 0 ;
57590: LD_ADDR_VAR 0 15
57594: PUSH
57595: LD_INT 0
57597: ST_TO_ADDR
// for j = r to 5 do
57598: LD_ADDR_VAR 0 10
57602: PUSH
57603: DOUBLE
57604: LD_VAR 0 15
57608: DEC
57609: ST_TO_ADDR
57610: LD_INT 5
57612: PUSH
57613: FOR_TO
57614: IFFALSE 57728
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
57616: LD_ADDR_VAR 0 11
57620: PUSH
57621: LD_VAR 0 13
57625: PPUSH
57626: CALL_OW 250
57630: PPUSH
57631: LD_VAR 0 10
57635: PPUSH
57636: LD_INT 2
57638: PPUSH
57639: CALL_OW 272
57643: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
57644: LD_ADDR_VAR 0 12
57648: PUSH
57649: LD_VAR 0 13
57653: PPUSH
57654: CALL_OW 251
57658: PPUSH
57659: LD_VAR 0 10
57663: PPUSH
57664: LD_INT 2
57666: PPUSH
57667: CALL_OW 273
57671: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
57672: LD_VAR 0 11
57676: PPUSH
57677: LD_VAR 0 12
57681: PPUSH
57682: CALL_OW 488
57686: PUSH
57687: LD_VAR 0 11
57691: PPUSH
57692: LD_VAR 0 12
57696: PPUSH
57697: CALL_OW 428
57701: NOT
57702: AND
57703: IFFALSE 57726
// begin ComMoveXY ( tmp , _x , _y ) ;
57705: LD_VAR 0 13
57709: PPUSH
57710: LD_VAR 0 11
57714: PPUSH
57715: LD_VAR 0 12
57719: PPUSH
57720: CALL_OW 111
// break ;
57724: GO 57728
// end ; end ;
57726: GO 57613
57728: POP
57729: POP
// end ; end ;
57730: GO 57055
57732: POP
57733: POP
// end ;
57734: LD_VAR 0 8
57738: RET
// export function BuildingTechInvented ( side , btype ) ; begin
57739: LD_INT 0
57741: PPUSH
// result := true ;
57742: LD_ADDR_VAR 0 3
57746: PUSH
57747: LD_INT 1
57749: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
57750: LD_VAR 0 2
57754: PUSH
57755: LD_INT 24
57757: DOUBLE
57758: EQUAL
57759: IFTRUE 57769
57761: LD_INT 33
57763: DOUBLE
57764: EQUAL
57765: IFTRUE 57769
57767: GO 57794
57769: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
57770: LD_ADDR_VAR 0 3
57774: PUSH
57775: LD_INT 32
57777: PPUSH
57778: LD_VAR 0 1
57782: PPUSH
57783: CALL_OW 321
57787: PUSH
57788: LD_INT 2
57790: EQUAL
57791: ST_TO_ADDR
57792: GO 58114
57794: LD_INT 20
57796: DOUBLE
57797: EQUAL
57798: IFTRUE 57802
57800: GO 57827
57802: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
57803: LD_ADDR_VAR 0 3
57807: PUSH
57808: LD_INT 6
57810: PPUSH
57811: LD_VAR 0 1
57815: PPUSH
57816: CALL_OW 321
57820: PUSH
57821: LD_INT 2
57823: EQUAL
57824: ST_TO_ADDR
57825: GO 58114
57827: LD_INT 22
57829: DOUBLE
57830: EQUAL
57831: IFTRUE 57841
57833: LD_INT 36
57835: DOUBLE
57836: EQUAL
57837: IFTRUE 57841
57839: GO 57866
57841: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
57842: LD_ADDR_VAR 0 3
57846: PUSH
57847: LD_INT 15
57849: PPUSH
57850: LD_VAR 0 1
57854: PPUSH
57855: CALL_OW 321
57859: PUSH
57860: LD_INT 2
57862: EQUAL
57863: ST_TO_ADDR
57864: GO 58114
57866: LD_INT 30
57868: DOUBLE
57869: EQUAL
57870: IFTRUE 57874
57872: GO 57899
57874: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
57875: LD_ADDR_VAR 0 3
57879: PUSH
57880: LD_INT 20
57882: PPUSH
57883: LD_VAR 0 1
57887: PPUSH
57888: CALL_OW 321
57892: PUSH
57893: LD_INT 2
57895: EQUAL
57896: ST_TO_ADDR
57897: GO 58114
57899: LD_INT 28
57901: DOUBLE
57902: EQUAL
57903: IFTRUE 57913
57905: LD_INT 21
57907: DOUBLE
57908: EQUAL
57909: IFTRUE 57913
57911: GO 57938
57913: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
57914: LD_ADDR_VAR 0 3
57918: PUSH
57919: LD_INT 21
57921: PPUSH
57922: LD_VAR 0 1
57926: PPUSH
57927: CALL_OW 321
57931: PUSH
57932: LD_INT 2
57934: EQUAL
57935: ST_TO_ADDR
57936: GO 58114
57938: LD_INT 16
57940: DOUBLE
57941: EQUAL
57942: IFTRUE 57946
57944: GO 57973
57946: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
57947: LD_ADDR_VAR 0 3
57951: PUSH
57952: LD_EXP 60
57956: PPUSH
57957: LD_VAR 0 1
57961: PPUSH
57962: CALL_OW 321
57966: PUSH
57967: LD_INT 2
57969: EQUAL
57970: ST_TO_ADDR
57971: GO 58114
57973: LD_INT 19
57975: DOUBLE
57976: EQUAL
57977: IFTRUE 57987
57979: LD_INT 23
57981: DOUBLE
57982: EQUAL
57983: IFTRUE 57987
57985: GO 58014
57987: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
57988: LD_ADDR_VAR 0 3
57992: PUSH
57993: LD_EXP 59
57997: PPUSH
57998: LD_VAR 0 1
58002: PPUSH
58003: CALL_OW 321
58007: PUSH
58008: LD_INT 2
58010: EQUAL
58011: ST_TO_ADDR
58012: GO 58114
58014: LD_INT 17
58016: DOUBLE
58017: EQUAL
58018: IFTRUE 58022
58020: GO 58047
58022: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
58023: LD_ADDR_VAR 0 3
58027: PUSH
58028: LD_INT 39
58030: PPUSH
58031: LD_VAR 0 1
58035: PPUSH
58036: CALL_OW 321
58040: PUSH
58041: LD_INT 2
58043: EQUAL
58044: ST_TO_ADDR
58045: GO 58114
58047: LD_INT 18
58049: DOUBLE
58050: EQUAL
58051: IFTRUE 58055
58053: GO 58080
58055: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
58056: LD_ADDR_VAR 0 3
58060: PUSH
58061: LD_INT 40
58063: PPUSH
58064: LD_VAR 0 1
58068: PPUSH
58069: CALL_OW 321
58073: PUSH
58074: LD_INT 2
58076: EQUAL
58077: ST_TO_ADDR
58078: GO 58114
58080: LD_INT 27
58082: DOUBLE
58083: EQUAL
58084: IFTRUE 58088
58086: GO 58113
58088: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
58089: LD_ADDR_VAR 0 3
58093: PUSH
58094: LD_INT 35
58096: PPUSH
58097: LD_VAR 0 1
58101: PPUSH
58102: CALL_OW 321
58106: PUSH
58107: LD_INT 2
58109: EQUAL
58110: ST_TO_ADDR
58111: GO 58114
58113: POP
// end ;
58114: LD_VAR 0 3
58118: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
58119: LD_INT 0
58121: PPUSH
58122: PPUSH
58123: PPUSH
58124: PPUSH
58125: PPUSH
58126: PPUSH
58127: PPUSH
58128: PPUSH
58129: PPUSH
58130: PPUSH
58131: PPUSH
// result := false ;
58132: LD_ADDR_VAR 0 6
58136: PUSH
58137: LD_INT 0
58139: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
58140: LD_VAR 0 1
58144: NOT
58145: PUSH
58146: LD_VAR 0 1
58150: PPUSH
58151: CALL_OW 266
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: IN
58166: NOT
58167: OR
58168: PUSH
58169: LD_VAR 0 2
58173: NOT
58174: OR
58175: PUSH
58176: LD_VAR 0 5
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: LD_INT 3
58192: PUSH
58193: LD_INT 4
58195: PUSH
58196: LD_INT 5
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: IN
58207: NOT
58208: OR
58209: PUSH
58210: LD_VAR 0 3
58214: PPUSH
58215: LD_VAR 0 4
58219: PPUSH
58220: CALL_OW 488
58224: NOT
58225: OR
58226: IFFALSE 58230
// exit ;
58228: GO 58966
// side := GetSide ( depot ) ;
58230: LD_ADDR_VAR 0 9
58234: PUSH
58235: LD_VAR 0 1
58239: PPUSH
58240: CALL_OW 255
58244: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
58245: LD_VAR 0 9
58249: PPUSH
58250: LD_VAR 0 2
58254: PPUSH
58255: CALL 57739 0 2
58259: NOT
58260: IFFALSE 58264
// exit ;
58262: GO 58966
// pom := GetBase ( depot ) ;
58264: LD_ADDR_VAR 0 10
58268: PUSH
58269: LD_VAR 0 1
58273: PPUSH
58274: CALL_OW 274
58278: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58279: LD_ADDR_VAR 0 11
58283: PUSH
58284: LD_VAR 0 2
58288: PPUSH
58289: LD_VAR 0 1
58293: PPUSH
58294: CALL_OW 248
58298: PPUSH
58299: CALL_OW 450
58303: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
58304: LD_VAR 0 10
58308: PPUSH
58309: LD_INT 1
58311: PPUSH
58312: CALL_OW 275
58316: PUSH
58317: LD_VAR 0 11
58321: PUSH
58322: LD_INT 1
58324: ARRAY
58325: GREATEREQUAL
58326: PUSH
58327: LD_VAR 0 10
58331: PPUSH
58332: LD_INT 2
58334: PPUSH
58335: CALL_OW 275
58339: PUSH
58340: LD_VAR 0 11
58344: PUSH
58345: LD_INT 2
58347: ARRAY
58348: GREATEREQUAL
58349: AND
58350: PUSH
58351: LD_VAR 0 10
58355: PPUSH
58356: LD_INT 3
58358: PPUSH
58359: CALL_OW 275
58363: PUSH
58364: LD_VAR 0 11
58368: PUSH
58369: LD_INT 3
58371: ARRAY
58372: GREATEREQUAL
58373: AND
58374: NOT
58375: IFFALSE 58379
// exit ;
58377: GO 58966
// if GetBType ( depot ) = b_depot then
58379: LD_VAR 0 1
58383: PPUSH
58384: CALL_OW 266
58388: PUSH
58389: LD_INT 0
58391: EQUAL
58392: IFFALSE 58404
// dist := 28 else
58394: LD_ADDR_VAR 0 14
58398: PUSH
58399: LD_INT 28
58401: ST_TO_ADDR
58402: GO 58412
// dist := 36 ;
58404: LD_ADDR_VAR 0 14
58408: PUSH
58409: LD_INT 36
58411: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
58412: LD_VAR 0 1
58416: PPUSH
58417: LD_VAR 0 3
58421: PPUSH
58422: LD_VAR 0 4
58426: PPUSH
58427: CALL_OW 297
58431: PUSH
58432: LD_VAR 0 14
58436: GREATER
58437: IFFALSE 58441
// exit ;
58439: GO 58966
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
58441: LD_ADDR_VAR 0 12
58445: PUSH
58446: LD_VAR 0 2
58450: PPUSH
58451: LD_VAR 0 3
58455: PPUSH
58456: LD_VAR 0 4
58460: PPUSH
58461: LD_VAR 0 5
58465: PPUSH
58466: LD_VAR 0 1
58470: PPUSH
58471: CALL_OW 248
58475: PPUSH
58476: LD_INT 0
58478: PPUSH
58479: CALL 58971 0 6
58483: ST_TO_ADDR
// if not hexes then
58484: LD_VAR 0 12
58488: NOT
58489: IFFALSE 58493
// exit ;
58491: GO 58966
// hex := GetHexInfo ( x , y ) ;
58493: LD_ADDR_VAR 0 15
58497: PUSH
58498: LD_VAR 0 3
58502: PPUSH
58503: LD_VAR 0 4
58507: PPUSH
58508: CALL_OW 546
58512: ST_TO_ADDR
// if hex [ 1 ] then
58513: LD_VAR 0 15
58517: PUSH
58518: LD_INT 1
58520: ARRAY
58521: IFFALSE 58525
// exit ;
58523: GO 58966
// height := hex [ 2 ] ;
58525: LD_ADDR_VAR 0 13
58529: PUSH
58530: LD_VAR 0 15
58534: PUSH
58535: LD_INT 2
58537: ARRAY
58538: ST_TO_ADDR
// for i = 1 to hexes do
58539: LD_ADDR_VAR 0 7
58543: PUSH
58544: DOUBLE
58545: LD_INT 1
58547: DEC
58548: ST_TO_ADDR
58549: LD_VAR 0 12
58553: PUSH
58554: FOR_TO
58555: IFFALSE 58885
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
58557: LD_VAR 0 12
58561: PUSH
58562: LD_VAR 0 7
58566: ARRAY
58567: PUSH
58568: LD_INT 1
58570: ARRAY
58571: PPUSH
58572: LD_VAR 0 12
58576: PUSH
58577: LD_VAR 0 7
58581: ARRAY
58582: PUSH
58583: LD_INT 2
58585: ARRAY
58586: PPUSH
58587: CALL_OW 488
58591: NOT
58592: PUSH
58593: LD_VAR 0 12
58597: PUSH
58598: LD_VAR 0 7
58602: ARRAY
58603: PUSH
58604: LD_INT 1
58606: ARRAY
58607: PPUSH
58608: LD_VAR 0 12
58612: PUSH
58613: LD_VAR 0 7
58617: ARRAY
58618: PUSH
58619: LD_INT 2
58621: ARRAY
58622: PPUSH
58623: CALL_OW 428
58627: PUSH
58628: LD_INT 0
58630: GREATER
58631: OR
58632: PUSH
58633: LD_VAR 0 12
58637: PUSH
58638: LD_VAR 0 7
58642: ARRAY
58643: PUSH
58644: LD_INT 1
58646: ARRAY
58647: PPUSH
58648: LD_VAR 0 12
58652: PUSH
58653: LD_VAR 0 7
58657: ARRAY
58658: PUSH
58659: LD_INT 2
58661: ARRAY
58662: PPUSH
58663: CALL_OW 351
58667: OR
58668: IFFALSE 58674
// exit ;
58670: POP
58671: POP
58672: GO 58966
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58674: LD_ADDR_VAR 0 8
58678: PUSH
58679: LD_VAR 0 12
58683: PUSH
58684: LD_VAR 0 7
58688: ARRAY
58689: PUSH
58690: LD_INT 1
58692: ARRAY
58693: PPUSH
58694: LD_VAR 0 12
58698: PUSH
58699: LD_VAR 0 7
58703: ARRAY
58704: PUSH
58705: LD_INT 2
58707: ARRAY
58708: PPUSH
58709: CALL_OW 546
58713: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
58714: LD_VAR 0 8
58718: PUSH
58719: LD_INT 1
58721: ARRAY
58722: PUSH
58723: LD_VAR 0 8
58727: PUSH
58728: LD_INT 2
58730: ARRAY
58731: PUSH
58732: LD_VAR 0 13
58736: PUSH
58737: LD_INT 2
58739: PLUS
58740: GREATER
58741: OR
58742: PUSH
58743: LD_VAR 0 8
58747: PUSH
58748: LD_INT 2
58750: ARRAY
58751: PUSH
58752: LD_VAR 0 13
58756: PUSH
58757: LD_INT 2
58759: MINUS
58760: LESS
58761: OR
58762: PUSH
58763: LD_VAR 0 8
58767: PUSH
58768: LD_INT 3
58770: ARRAY
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: LD_INT 8
58777: PUSH
58778: LD_INT 9
58780: PUSH
58781: LD_INT 10
58783: PUSH
58784: LD_INT 11
58786: PUSH
58787: LD_INT 12
58789: PUSH
58790: LD_INT 13
58792: PUSH
58793: LD_INT 16
58795: PUSH
58796: LD_INT 17
58798: PUSH
58799: LD_INT 18
58801: PUSH
58802: LD_INT 19
58804: PUSH
58805: LD_INT 20
58807: PUSH
58808: LD_INT 21
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: IN
58826: NOT
58827: OR
58828: PUSH
58829: LD_VAR 0 8
58833: PUSH
58834: LD_INT 5
58836: ARRAY
58837: NOT
58838: OR
58839: PUSH
58840: LD_VAR 0 8
58844: PUSH
58845: LD_INT 6
58847: ARRAY
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: LD_INT 7
58857: PUSH
58858: LD_INT 9
58860: PUSH
58861: LD_INT 10
58863: PUSH
58864: LD_INT 11
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: IN
58875: NOT
58876: OR
58877: IFFALSE 58883
// exit ;
58879: POP
58880: POP
58881: GO 58966
// end ;
58883: GO 58554
58885: POP
58886: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
58887: LD_VAR 0 9
58891: PPUSH
58892: LD_VAR 0 3
58896: PPUSH
58897: LD_VAR 0 4
58901: PPUSH
58902: LD_INT 20
58904: PPUSH
58905: CALL 50912 0 4
58909: PUSH
58910: LD_INT 4
58912: ARRAY
58913: IFFALSE 58917
// exit ;
58915: GO 58966
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
58917: LD_VAR 0 2
58921: PUSH
58922: LD_INT 29
58924: PUSH
58925: LD_INT 30
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: IN
58932: PUSH
58933: LD_VAR 0 3
58937: PPUSH
58938: LD_VAR 0 4
58942: PPUSH
58943: LD_VAR 0 9
58947: PPUSH
58948: CALL_OW 440
58952: NOT
58953: AND
58954: IFFALSE 58958
// exit ;
58956: GO 58966
// result := true ;
58958: LD_ADDR_VAR 0 6
58962: PUSH
58963: LD_INT 1
58965: ST_TO_ADDR
// end ;
58966: LD_VAR 0 6
58970: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
58971: LD_INT 0
58973: PPUSH
58974: PPUSH
58975: PPUSH
58976: PPUSH
58977: PPUSH
58978: PPUSH
58979: PPUSH
58980: PPUSH
58981: PPUSH
58982: PPUSH
58983: PPUSH
58984: PPUSH
58985: PPUSH
58986: PPUSH
58987: PPUSH
58988: PPUSH
58989: PPUSH
58990: PPUSH
58991: PPUSH
58992: PPUSH
58993: PPUSH
58994: PPUSH
58995: PPUSH
58996: PPUSH
58997: PPUSH
58998: PPUSH
58999: PPUSH
59000: PPUSH
59001: PPUSH
59002: PPUSH
59003: PPUSH
59004: PPUSH
59005: PPUSH
59006: PPUSH
59007: PPUSH
59008: PPUSH
59009: PPUSH
59010: PPUSH
59011: PPUSH
59012: PPUSH
59013: PPUSH
59014: PPUSH
59015: PPUSH
59016: PPUSH
59017: PPUSH
59018: PPUSH
59019: PPUSH
59020: PPUSH
59021: PPUSH
59022: PPUSH
59023: PPUSH
59024: PPUSH
59025: PPUSH
59026: PPUSH
59027: PPUSH
59028: PPUSH
59029: PPUSH
59030: PPUSH
// result = [ ] ;
59031: LD_ADDR_VAR 0 7
59035: PUSH
59036: EMPTY
59037: ST_TO_ADDR
// temp_list = [ ] ;
59038: LD_ADDR_VAR 0 9
59042: PUSH
59043: EMPTY
59044: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
59045: LD_VAR 0 4
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 3
59061: PUSH
59062: LD_INT 4
59064: PUSH
59065: LD_INT 5
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: IN
59076: NOT
59077: PUSH
59078: LD_VAR 0 1
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: IN
59093: PUSH
59094: LD_VAR 0 5
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: LD_INT 3
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: LIST
59112: IN
59113: NOT
59114: AND
59115: OR
59116: IFFALSE 59120
// exit ;
59118: GO 77511
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
59120: LD_VAR 0 1
59124: PUSH
59125: LD_INT 6
59127: PUSH
59128: LD_INT 7
59130: PUSH
59131: LD_INT 8
59133: PUSH
59134: LD_INT 13
59136: PUSH
59137: LD_INT 12
59139: PUSH
59140: LD_INT 15
59142: PUSH
59143: LD_INT 11
59145: PUSH
59146: LD_INT 14
59148: PUSH
59149: LD_INT 10
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: IN
59163: IFFALSE 59173
// btype = b_lab ;
59165: LD_ADDR_VAR 0 1
59169: PUSH
59170: LD_INT 6
59172: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
59173: LD_VAR 0 6
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: LIST
59191: IN
59192: NOT
59193: PUSH
59194: LD_VAR 0 1
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: LD_INT 3
59210: PUSH
59211: LD_INT 6
59213: PUSH
59214: LD_INT 36
59216: PUSH
59217: LD_INT 4
59219: PUSH
59220: LD_INT 5
59222: PUSH
59223: LD_INT 31
59225: PUSH
59226: LD_INT 32
59228: PUSH
59229: LD_INT 33
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: IN
59245: NOT
59246: PUSH
59247: LD_VAR 0 6
59251: PUSH
59252: LD_INT 1
59254: EQUAL
59255: AND
59256: OR
59257: PUSH
59258: LD_VAR 0 1
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 3
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: IN
59273: NOT
59274: PUSH
59275: LD_VAR 0 6
59279: PUSH
59280: LD_INT 2
59282: EQUAL
59283: AND
59284: OR
59285: IFFALSE 59295
// mode = 0 ;
59287: LD_ADDR_VAR 0 6
59291: PUSH
59292: LD_INT 0
59294: ST_TO_ADDR
// case mode of 0 :
59295: LD_VAR 0 6
59299: PUSH
59300: LD_INT 0
59302: DOUBLE
59303: EQUAL
59304: IFTRUE 59308
59306: GO 70761
59308: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59309: LD_ADDR_VAR 0 11
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 3
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 3
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59502: LD_ADDR_VAR 0 12
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 2
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 3
59659: NEG
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 3
59670: NEG
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59698: LD_ADDR_VAR 0 13
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 2
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: LD_INT 3
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 3
59869: NEG
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59897: LD_ADDR_VAR 0 14
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 2
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: LD_INT 3
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 2
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60093: LD_ADDR_VAR 0 15
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 2
60227: NEG
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 3
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60286: LD_ADDR_VAR 0 16
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: LD_INT 2
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: LD_INT 1
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 3
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 2
60453: PUSH
60454: LD_INT 3
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60479: LD_ADDR_VAR 0 17
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 2
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 2
60655: NEG
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: NEG
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60709: LD_ADDR_VAR 0 18
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: LD_INT 2
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 2
60885: NEG
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: LD_INT 2
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60939: LD_ADDR_VAR 0 19
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: LD_INT 2
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61169: LD_ADDR_VAR 0 20
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: LD_INT 2
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 2
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 2
61304: PUSH
61305: LD_INT 2
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: LD_INT 2
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 1
61334: NEG
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: NEG
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: LD_INT 2
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61399: LD_ADDR_VAR 0 21
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: LD_INT 1
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: LD_INT 2
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: LD_INT 1
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 2
61598: NEG
61599: PUSH
61600: LD_INT 2
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61629: LD_ADDR_VAR 0 22
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 2
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: LD_INT 2
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 2
61805: NEG
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 2
61816: NEG
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 2
61828: NEG
61829: PUSH
61830: LD_INT 2
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61859: LD_ADDR_VAR 0 23
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: LD_INT 2
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: LD_INT 2
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: LD_INT 1
61966: NEG
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 2
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: LD_INT 2
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: LD_INT 2
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 1
62024: NEG
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 2
62035: NEG
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 2
62046: NEG
62047: PUSH
62048: LD_INT 1
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: NEG
62059: PUSH
62060: LD_INT 2
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 2
62070: NEG
62071: PUSH
62072: LD_INT 3
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: LD_INT 3
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 2
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
62139: LD_ADDR_VAR 0 24
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: LD_INT 0
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: LD_INT 0
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: LD_INT 2
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: LD_INT 2
62235: NEG
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 2
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 2
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: LD_INT 2
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: LD_INT 2
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: NEG
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: NEG
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 2
62338: NEG
62339: PUSH
62340: LD_INT 2
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: LD_INT 1
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 3
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 3
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
62415: LD_ADDR_VAR 0 25
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: LD_INT 1
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: LD_INT 2
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 2
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 2
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 2
62550: PUSH
62551: LD_INT 2
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: LD_INT 2
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: LD_INT 2
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 1
62580: NEG
62581: PUSH
62582: LD_INT 1
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 2
62591: NEG
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: LD_INT 1
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 2
62614: NEG
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 3
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 3
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 2
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: PUSH
62657: LD_INT 3
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62689: LD_ADDR_VAR 0 26
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 1
62747: NEG
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: NEG
62771: PUSH
62772: LD_INT 2
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: LD_INT 1
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 2
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 2
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 2
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 2
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 2
62865: NEG
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 2
62876: NEG
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: LD_INT 2
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 2
62900: PUSH
62901: LD_INT 3
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: LD_INT 3
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: LD_INT 2
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 2
62931: NEG
62932: PUSH
62933: LD_INT 1
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62965: LD_ADDR_VAR 0 27
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 1
63034: NEG
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: LD_INT 2
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: LD_INT 2
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 1
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 2
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 2
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: LD_INT 2
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: LD_INT 2
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 1
63130: NEG
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: LD_INT 1
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 2
63164: NEG
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 2
63187: NEG
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 3
63210: NEG
63211: PUSH
63212: LD_INT 2
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63245: LD_ADDR_VAR 0 28
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: LD_INT 1
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: NEG
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: PUSH
63328: LD_INT 2
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: LD_INT 2
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: LD_INT 1
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 2
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: PUSH
63381: LD_INT 2
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: LD_INT 2
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 1
63410: NEG
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 2
63421: NEG
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 2
63432: NEG
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 2
63444: NEG
63445: PUSH
63446: LD_INT 2
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 2
63456: NEG
63457: PUSH
63458: LD_INT 3
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: NEG
63469: PUSH
63470: LD_INT 3
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 3
63480: NEG
63481: PUSH
63482: LD_INT 1
63484: NEG
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 3
63492: NEG
63493: PUSH
63494: LD_INT 2
63496: NEG
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63527: LD_ADDR_VAR 0 29
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 1
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: NEG
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: LD_INT 2
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: LD_INT 2
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: LD_INT 1
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: LD_INT 2
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 2
63693: NEG
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 2
63705: NEG
63706: PUSH
63707: LD_INT 2
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: LD_INT 3
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: LD_INT 1
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 3
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 1
63750: PUSH
63751: LD_INT 3
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 3
63771: NEG
63772: PUSH
63773: LD_INT 2
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63806: LD_ADDR_VAR 0 30
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 1
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: NEG
63888: PUSH
63889: LD_INT 2
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 2
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 2
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 2
63941: PUSH
63942: LD_INT 2
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: LD_INT 2
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: NEG
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: LD_INT 3
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: LD_INT 2
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 3
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 2
64028: PUSH
64029: LD_INT 3
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 2
64038: NEG
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 3
64049: NEG
64050: PUSH
64051: LD_INT 1
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64084: LD_ADDR_VAR 0 31
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: LD_INT 0
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 1
64142: NEG
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: LD_INT 1
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: LD_INT 2
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: LD_INT 1
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 2
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 2
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 2
64208: PUSH
64209: LD_INT 2
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: LD_INT 2
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: LD_INT 2
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: LD_INT 1
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 2
64249: NEG
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 2
64261: NEG
64262: PUSH
64263: LD_INT 2
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 2
64273: NEG
64274: PUSH
64275: LD_INT 3
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 2
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 3
64296: PUSH
64297: LD_INT 1
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 1
64306: PUSH
64307: LD_INT 3
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 3
64327: NEG
64328: PUSH
64329: LD_INT 2
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64362: LD_ADDR_VAR 0 32
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 1
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 1
64400: PUSH
64401: LD_INT 1
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: LD_INT 1
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 1
64431: NEG
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: LD_INT 2
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: LD_INT 1
64469: NEG
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 2
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 2
64487: PUSH
64488: LD_INT 2
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: LD_INT 2
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 2
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: NEG
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 2
64528: NEG
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 2
64539: NEG
64540: PUSH
64541: LD_INT 1
64543: NEG
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 1
64551: NEG
64552: PUSH
64553: LD_INT 3
64555: NEG
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: PUSH
64564: LD_INT 2
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 3
64574: PUSH
64575: LD_INT 2
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 2
64584: PUSH
64585: LD_INT 3
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 2
64594: NEG
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 3
64605: NEG
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64640: LD_ADDR_VAR 0 33
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 1
64698: NEG
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 1
64709: NEG
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 1
64721: NEG
64722: PUSH
64723: LD_INT 2
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 1
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 2
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 2
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: LD_INT 2
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: LD_INT 2
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 2
64795: NEG
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 2
64806: NEG
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: LD_INT 2
64822: NEG
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 2
64830: NEG
64831: PUSH
64832: LD_INT 3
64834: NEG
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 2
64842: PUSH
64843: LD_INT 1
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 3
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: NEG
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 3
64884: NEG
64885: PUSH
64886: LD_INT 2
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64919: LD_ADDR_VAR 0 34
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: LD_INT 1
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: LD_INT 1
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: PUSH
65002: LD_INT 2
65004: NEG
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 1
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 2
65034: PUSH
65035: LD_INT 1
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 2
65044: PUSH
65045: LD_INT 2
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: LD_INT 2
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 1
65064: NEG
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 2
65075: NEG
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 2
65086: NEG
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 2
65098: NEG
65099: PUSH
65100: LD_INT 2
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: LD_INT 3
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: LD_INT 2
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 3
65133: PUSH
65134: LD_INT 2
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 2
65143: PUSH
65144: LD_INT 3
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 2
65153: NEG
65154: PUSH
65155: LD_INT 1
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 3
65164: NEG
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65199: LD_ADDR_VAR 0 35
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: LD_INT 1
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 1
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 1
65257: NEG
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 1
65268: NEG
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 2
65280: PUSH
65281: LD_INT 1
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 2
65290: NEG
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65311: LD_ADDR_VAR 0 36
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: LD_INT 1
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: NEG
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 1
65392: NEG
65393: PUSH
65394: LD_INT 2
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: PUSH
65405: LD_INT 2
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65423: LD_ADDR_VAR 0 37
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 0
65440: PUSH
65441: LD_INT 1
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: LD_INT 1
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: LD_INT 1
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: LD_INT 1
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: LD_INT 1
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65535: LD_ADDR_VAR 0 38
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: LD_INT 0
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: LD_INT 1
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: LD_INT 1
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: LD_INT 1
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 1
65593: NEG
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 1
65604: NEG
65605: PUSH
65606: LD_INT 1
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: LD_INT 1
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 2
65626: NEG
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65647: LD_ADDR_VAR 0 39
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 1
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 1
65716: NEG
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: LD_INT 2
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: LD_INT 2
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65759: LD_ADDR_VAR 0 40
65763: PUSH
65764: LD_INT 0
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 0
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 1
65797: PUSH
65798: LD_INT 1
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: LD_INT 1
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 1
65817: NEG
65818: PUSH
65819: LD_INT 0
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 1
65828: NEG
65829: PUSH
65830: LD_INT 1
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: LD_INT 1
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 1
65851: NEG
65852: PUSH
65853: LD_INT 1
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65871: LD_ADDR_VAR 0 41
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: LD_INT 1
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: LD_INT 0
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 1
65929: NEG
65930: PUSH
65931: LD_INT 0
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 1
65940: NEG
65941: PUSH
65942: LD_INT 1
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: LD_INT 2
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 1
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 2
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 2
65985: PUSH
65986: LD_INT 1
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: LD_INT 2
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 1
66005: PUSH
66006: LD_INT 2
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: NEG
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 2
66026: NEG
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 2
66037: NEG
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 2
66049: NEG
66050: PUSH
66051: LD_INT 2
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 2
66061: NEG
66062: PUSH
66063: LD_INT 3
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 2
66073: PUSH
66074: LD_INT 1
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 3
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 3
66094: PUSH
66095: LD_INT 1
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 3
66104: PUSH
66105: LD_INT 2
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 3
66114: PUSH
66115: LD_INT 3
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 2
66124: PUSH
66125: LD_INT 3
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 2
66134: NEG
66135: PUSH
66136: LD_INT 1
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 3
66145: NEG
66146: PUSH
66147: LD_INT 0
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 3
66156: NEG
66157: PUSH
66158: LD_INT 1
66160: NEG
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 3
66168: NEG
66169: PUSH
66170: LD_INT 2
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 3
66180: NEG
66181: PUSH
66182: LD_INT 3
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66221: LD_ADDR_VAR 0 42
66225: PUSH
66226: LD_INT 0
66228: PUSH
66229: LD_INT 0
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 0
66238: PUSH
66239: LD_INT 1
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 1
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 0
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: LD_INT 0
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 1
66290: NEG
66291: PUSH
66292: LD_INT 1
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: LD_INT 2
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: LD_INT 2
66317: NEG
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: PUSH
66337: LD_INT 1
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 2
66346: PUSH
66347: LD_INT 2
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 1
66356: PUSH
66357: LD_INT 2
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: LD_INT 2
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: NEG
66377: PUSH
66378: LD_INT 1
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 2
66387: NEG
66388: PUSH
66389: LD_INT 1
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 2
66399: NEG
66400: PUSH
66401: LD_INT 2
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 2
66411: NEG
66412: PUSH
66413: LD_INT 3
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 1
66423: NEG
66424: PUSH
66425: LD_INT 3
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 3
66438: NEG
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 1
66446: PUSH
66447: LD_INT 2
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 3
66457: PUSH
66458: LD_INT 2
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 3
66467: PUSH
66468: LD_INT 3
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 2
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: PUSH
66488: LD_INT 3
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: LD_INT 3
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: LD_INT 2
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 3
66518: NEG
66519: PUSH
66520: LD_INT 2
66522: NEG
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 3
66530: NEG
66531: PUSH
66532: LD_INT 3
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66571: LD_ADDR_VAR 0 43
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 1
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 1
66629: NEG
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 1
66640: NEG
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: LD_INT 2
66656: NEG
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: LD_INT 2
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 1
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: LD_INT 1
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 2
66737: NEG
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 2
66748: NEG
66749: PUSH
66750: LD_INT 1
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 1
66760: NEG
66761: PUSH
66762: LD_INT 3
66764: NEG
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 0
66772: PUSH
66773: LD_INT 3
66775: NEG
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 1
66783: PUSH
66784: LD_INT 2
66786: NEG
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 2
66794: PUSH
66795: LD_INT 1
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 3
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 3
66815: PUSH
66816: LD_INT 1
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: LD_INT 3
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: LD_INT 3
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 1
66845: NEG
66846: PUSH
66847: LD_INT 2
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 2
66856: NEG
66857: PUSH
66858: LD_INT 1
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 3
66867: NEG
66868: PUSH
66869: LD_INT 0
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: NEG
66879: PUSH
66880: LD_INT 1
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66919: LD_ADDR_VAR 0 44
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: LD_INT 0
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: LD_INT 1
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 1
66947: PUSH
66948: LD_INT 0
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: LD_INT 1
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: LD_INT 1
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: LD_INT 1
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 1
67000: NEG
67001: PUSH
67002: LD_INT 2
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 1
67012: PUSH
67013: LD_INT 1
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: LD_INT 0
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 2
67033: PUSH
67034: LD_INT 1
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 2
67043: PUSH
67044: LD_INT 2
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 1
67053: PUSH
67054: LD_INT 2
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 1
67063: NEG
67064: PUSH
67065: LD_INT 1
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 2
67074: NEG
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 2
67085: NEG
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 2
67097: NEG
67098: PUSH
67099: LD_INT 2
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 2
67109: NEG
67110: PUSH
67111: LD_INT 3
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 2
67121: PUSH
67122: LD_INT 1
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 3
67132: PUSH
67133: LD_INT 0
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: LD_INT 1
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 3
67152: PUSH
67153: LD_INT 2
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 3
67162: PUSH
67163: LD_INT 3
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 2
67172: PUSH
67173: LD_INT 3
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 2
67182: NEG
67183: PUSH
67184: LD_INT 1
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 3
67193: NEG
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 3
67204: NEG
67205: PUSH
67206: LD_INT 1
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 3
67216: NEG
67217: PUSH
67218: LD_INT 2
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 3
67228: NEG
67229: PUSH
67230: LD_INT 3
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67269: LD_ADDR_VAR 0 45
67273: PUSH
67274: LD_INT 0
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 0
67286: PUSH
67287: LD_INT 1
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 1
67297: PUSH
67298: LD_INT 0
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 1
67307: PUSH
67308: LD_INT 1
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 0
67317: PUSH
67318: LD_INT 1
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: LD_INT 0
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: LD_INT 1
67342: NEG
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: LD_INT 2
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: LD_INT 2
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 1
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 2
67384: PUSH
67385: LD_INT 1
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 2
67394: PUSH
67395: LD_INT 2
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 1
67404: PUSH
67405: LD_INT 2
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 0
67414: PUSH
67415: LD_INT 2
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 1
67424: NEG
67425: PUSH
67426: LD_INT 1
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 2
67435: NEG
67436: PUSH
67437: LD_INT 1
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 2
67447: NEG
67448: PUSH
67449: LD_INT 2
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 2
67459: NEG
67460: PUSH
67461: LD_INT 3
67463: NEG
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 1
67471: NEG
67472: PUSH
67473: LD_INT 3
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 0
67483: PUSH
67484: LD_INT 3
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 1
67494: PUSH
67495: LD_INT 2
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 3
67505: PUSH
67506: LD_INT 2
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 3
67515: PUSH
67516: LD_INT 3
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: LD_INT 3
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 1
67535: PUSH
67536: LD_INT 3
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 0
67545: PUSH
67546: LD_INT 3
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 1
67555: NEG
67556: PUSH
67557: LD_INT 2
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 3
67566: NEG
67567: PUSH
67568: LD_INT 2
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 3
67578: NEG
67579: PUSH
67580: LD_INT 3
67582: NEG
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67619: LD_ADDR_VAR 0 46
67623: PUSH
67624: LD_INT 0
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: LD_INT 1
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 1
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 1
67657: PUSH
67658: LD_INT 1
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 0
67667: PUSH
67668: LD_INT 1
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 1
67677: NEG
67678: PUSH
67679: LD_INT 0
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 1
67688: NEG
67689: PUSH
67690: LD_INT 1
67692: NEG
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 1
67700: NEG
67701: PUSH
67702: LD_INT 2
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 0
67712: PUSH
67713: LD_INT 2
67715: NEG
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: LD_INT 1
67726: NEG
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 2
67734: PUSH
67735: LD_INT 0
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 2
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 1
67754: PUSH
67755: LD_INT 2
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: LD_INT 2
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 1
67774: NEG
67775: PUSH
67776: LD_INT 1
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 2
67785: NEG
67786: PUSH
67787: LD_INT 0
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 2
67796: NEG
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 1
67808: NEG
67809: PUSH
67810: LD_INT 3
67812: NEG
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 0
67820: PUSH
67821: LD_INT 3
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 1
67831: PUSH
67832: LD_INT 2
67834: NEG
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 2
67842: PUSH
67843: LD_INT 1
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 3
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 3
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 1
67873: PUSH
67874: LD_INT 3
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: LD_INT 3
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 1
67893: NEG
67894: PUSH
67895: LD_INT 2
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 2
67904: NEG
67905: PUSH
67906: LD_INT 1
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 3
67915: NEG
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 3
67926: NEG
67927: PUSH
67928: LD_INT 1
67930: NEG
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67967: LD_ADDR_VAR 0 47
67971: PUSH
67972: LD_INT 0
67974: PUSH
67975: LD_INT 0
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 0
67984: PUSH
67985: LD_INT 1
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 1
67995: PUSH
67996: LD_INT 0
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 1
68005: PUSH
68006: LD_INT 1
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 0
68015: PUSH
68016: LD_INT 1
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 1
68025: NEG
68026: PUSH
68027: LD_INT 0
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 1
68036: NEG
68037: PUSH
68038: LD_INT 1
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 1
68048: NEG
68049: PUSH
68050: LD_INT 2
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 0
68060: PUSH
68061: LD_INT 2
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 1
68071: PUSH
68072: LD_INT 1
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 2
68082: NEG
68083: PUSH
68084: LD_INT 1
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 2
68094: NEG
68095: PUSH
68096: LD_INT 2
68098: NEG
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68118: LD_ADDR_VAR 0 48
68122: PUSH
68123: LD_INT 0
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: LD_INT 1
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 1
68146: PUSH
68147: LD_INT 0
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 1
68156: PUSH
68157: LD_INT 1
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 0
68166: PUSH
68167: LD_INT 1
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 1
68176: NEG
68177: PUSH
68178: LD_INT 0
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 1
68187: NEG
68188: PUSH
68189: LD_INT 1
68191: NEG
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: NEG
68200: PUSH
68201: LD_INT 2
68203: NEG
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: PUSH
68223: LD_INT 1
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 2
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 2
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68265: LD_ADDR_VAR 0 49
68269: PUSH
68270: LD_INT 0
68272: PUSH
68273: LD_INT 0
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: LD_INT 1
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: LD_INT 0
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 1
68303: PUSH
68304: LD_INT 1
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 0
68313: PUSH
68314: LD_INT 1
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 1
68323: NEG
68324: PUSH
68325: LD_INT 0
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 1
68334: NEG
68335: PUSH
68336: LD_INT 1
68338: NEG
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 1
68346: PUSH
68347: LD_INT 1
68349: NEG
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 2
68357: PUSH
68358: LD_INT 0
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 2
68367: PUSH
68368: LD_INT 1
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 2
68377: PUSH
68378: LD_INT 2
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 1
68387: PUSH
68388: LD_INT 2
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68409: LD_ADDR_VAR 0 50
68413: PUSH
68414: LD_INT 0
68416: PUSH
68417: LD_INT 0
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: LD_INT 1
68429: NEG
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 1
68437: PUSH
68438: LD_INT 0
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 1
68447: PUSH
68448: LD_INT 1
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 0
68457: PUSH
68458: LD_INT 1
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 1
68467: NEG
68468: PUSH
68469: LD_INT 0
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 1
68478: NEG
68479: PUSH
68480: LD_INT 1
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 2
68490: PUSH
68491: LD_INT 1
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 2
68500: PUSH
68501: LD_INT 2
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 1
68510: PUSH
68511: LD_INT 2
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 0
68520: PUSH
68521: LD_INT 2
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 1
68530: NEG
68531: PUSH
68532: LD_INT 1
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68553: LD_ADDR_VAR 0 51
68557: PUSH
68558: LD_INT 0
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 0
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 1
68581: PUSH
68582: LD_INT 0
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 1
68591: PUSH
68592: LD_INT 1
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: LD_INT 1
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 1
68611: NEG
68612: PUSH
68613: LD_INT 0
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 1
68622: NEG
68623: PUSH
68624: LD_INT 1
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 1
68634: PUSH
68635: LD_INT 2
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 0
68644: PUSH
68645: LD_INT 2
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 1
68654: NEG
68655: PUSH
68656: LD_INT 1
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 2
68665: NEG
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 2
68676: NEG
68677: PUSH
68678: LD_INT 1
68680: NEG
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68700: LD_ADDR_VAR 0 52
68704: PUSH
68705: LD_INT 0
68707: PUSH
68708: LD_INT 0
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 0
68717: PUSH
68718: LD_INT 1
68720: NEG
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 1
68728: PUSH
68729: LD_INT 0
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 1
68738: PUSH
68739: LD_INT 1
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 0
68748: PUSH
68749: LD_INT 1
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 1
68758: NEG
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 1
68769: NEG
68770: PUSH
68771: LD_INT 1
68773: NEG
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 1
68781: NEG
68782: PUSH
68783: LD_INT 2
68785: NEG
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 1
68793: NEG
68794: PUSH
68795: LD_INT 1
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 2
68804: NEG
68805: PUSH
68806: LD_INT 0
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 2
68815: NEG
68816: PUSH
68817: LD_INT 1
68819: NEG
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 2
68827: NEG
68828: PUSH
68829: LD_INT 2
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68851: LD_ADDR_VAR 0 53
68855: PUSH
68856: LD_INT 0
68858: PUSH
68859: LD_INT 0
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 0
68868: PUSH
68869: LD_INT 1
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 1
68879: PUSH
68880: LD_INT 0
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: LD_INT 1
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: LD_INT 1
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 1
68909: NEG
68910: PUSH
68911: LD_INT 0
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 1
68920: NEG
68921: PUSH
68922: LD_INT 1
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 1
68932: NEG
68933: PUSH
68934: LD_INT 2
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 0
68944: PUSH
68945: LD_INT 2
68947: NEG
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 1
68955: PUSH
68956: LD_INT 1
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 2
68966: PUSH
68967: LD_INT 0
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 2
68976: PUSH
68977: LD_INT 1
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 2
68986: PUSH
68987: LD_INT 2
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 1
68996: PUSH
68997: LD_INT 2
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 0
69006: PUSH
69007: LD_INT 2
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 2
69027: NEG
69028: PUSH
69029: LD_INT 0
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 2
69038: NEG
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 2
69050: NEG
69051: PUSH
69052: LD_INT 2
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69081: LD_ADDR_VAR 0 54
69085: PUSH
69086: LD_INT 0
69088: PUSH
69089: LD_INT 0
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 0
69098: PUSH
69099: LD_INT 1
69101: NEG
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 1
69109: PUSH
69110: LD_INT 0
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 1
69119: PUSH
69120: LD_INT 1
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 0
69129: PUSH
69130: LD_INT 1
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 1
69139: NEG
69140: PUSH
69141: LD_INT 0
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 1
69150: NEG
69151: PUSH
69152: LD_INT 1
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 1
69162: NEG
69163: PUSH
69164: LD_INT 2
69166: NEG
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 0
69174: PUSH
69175: LD_INT 2
69177: NEG
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 1
69185: PUSH
69186: LD_INT 1
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 2
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 2
69206: PUSH
69207: LD_INT 1
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 2
69216: PUSH
69217: LD_INT 2
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 1
69226: PUSH
69227: LD_INT 2
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 0
69236: PUSH
69237: LD_INT 2
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 1
69246: NEG
69247: PUSH
69248: LD_INT 1
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 2
69257: NEG
69258: PUSH
69259: LD_INT 0
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 2
69268: NEG
69269: PUSH
69270: LD_INT 1
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 2
69280: NEG
69281: PUSH
69282: LD_INT 2
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69311: LD_ADDR_VAR 0 55
69315: PUSH
69316: LD_INT 0
69318: PUSH
69319: LD_INT 0
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: LD_INT 1
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 1
69339: PUSH
69340: LD_INT 0
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 1
69349: PUSH
69350: LD_INT 1
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 0
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 1
69369: NEG
69370: PUSH
69371: LD_INT 0
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 1
69380: NEG
69381: PUSH
69382: LD_INT 1
69384: NEG
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 1
69392: NEG
69393: PUSH
69394: LD_INT 2
69396: NEG
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 0
69404: PUSH
69405: LD_INT 2
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 1
69415: PUSH
69416: LD_INT 1
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 2
69426: PUSH
69427: LD_INT 0
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 2
69436: PUSH
69437: LD_INT 1
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 2
69446: PUSH
69447: LD_INT 2
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 1
69456: PUSH
69457: LD_INT 2
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 0
69466: PUSH
69467: LD_INT 2
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 1
69476: NEG
69477: PUSH
69478: LD_INT 1
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 2
69487: NEG
69488: PUSH
69489: LD_INT 0
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 2
69498: NEG
69499: PUSH
69500: LD_INT 1
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 2
69510: NEG
69511: PUSH
69512: LD_INT 2
69514: NEG
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69541: LD_ADDR_VAR 0 56
69545: PUSH
69546: LD_INT 0
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 0
69558: PUSH
69559: LD_INT 1
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: LD_INT 0
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 1
69579: PUSH
69580: LD_INT 1
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: LD_INT 1
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: PUSH
69601: LD_INT 0
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 1
69610: NEG
69611: PUSH
69612: LD_INT 1
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 1
69622: NEG
69623: PUSH
69624: LD_INT 2
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 0
69634: PUSH
69635: LD_INT 2
69637: NEG
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 1
69645: PUSH
69646: LD_INT 1
69648: NEG
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 2
69656: PUSH
69657: LD_INT 0
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 2
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 2
69676: PUSH
69677: LD_INT 2
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 1
69686: PUSH
69687: LD_INT 2
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: LD_INT 2
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 1
69706: NEG
69707: PUSH
69708: LD_INT 1
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 2
69717: NEG
69718: PUSH
69719: LD_INT 0
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 2
69728: NEG
69729: PUSH
69730: LD_INT 1
69732: NEG
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 2
69740: NEG
69741: PUSH
69742: LD_INT 2
69744: NEG
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69771: LD_ADDR_VAR 0 57
69775: PUSH
69776: LD_INT 0
69778: PUSH
69779: LD_INT 0
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 0
69788: PUSH
69789: LD_INT 1
69791: NEG
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 1
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 1
69809: PUSH
69810: LD_INT 1
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 0
69819: PUSH
69820: LD_INT 1
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 1
69829: NEG
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 1
69840: NEG
69841: PUSH
69842: LD_INT 1
69844: NEG
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 1
69852: NEG
69853: PUSH
69854: LD_INT 2
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 0
69864: PUSH
69865: LD_INT 2
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 1
69875: PUSH
69876: LD_INT 1
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 2
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 2
69896: PUSH
69897: LD_INT 1
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 2
69906: PUSH
69907: LD_INT 2
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 1
69916: PUSH
69917: LD_INT 2
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 0
69926: PUSH
69927: LD_INT 2
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 1
69936: NEG
69937: PUSH
69938: LD_INT 1
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 2
69947: NEG
69948: PUSH
69949: LD_INT 0
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 2
69958: NEG
69959: PUSH
69960: LD_INT 1
69962: NEG
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 2
69970: NEG
69971: PUSH
69972: LD_INT 2
69974: NEG
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70001: LD_ADDR_VAR 0 58
70005: PUSH
70006: LD_INT 0
70008: PUSH
70009: LD_INT 0
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 0
70018: PUSH
70019: LD_INT 1
70021: NEG
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 1
70029: PUSH
70030: LD_INT 0
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 1
70039: PUSH
70040: LD_INT 1
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 0
70049: PUSH
70050: LD_INT 1
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 1
70059: NEG
70060: PUSH
70061: LD_INT 0
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 1
70070: NEG
70071: PUSH
70072: LD_INT 1
70074: NEG
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 1
70082: NEG
70083: PUSH
70084: LD_INT 2
70086: NEG
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 0
70094: PUSH
70095: LD_INT 2
70097: NEG
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 1
70105: PUSH
70106: LD_INT 1
70108: NEG
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 2
70116: PUSH
70117: LD_INT 0
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 2
70126: PUSH
70127: LD_INT 1
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 2
70136: PUSH
70137: LD_INT 2
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 1
70146: PUSH
70147: LD_INT 2
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 0
70156: PUSH
70157: LD_INT 2
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 1
70166: NEG
70167: PUSH
70168: LD_INT 1
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 2
70177: NEG
70178: PUSH
70179: LD_INT 0
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 2
70188: NEG
70189: PUSH
70190: LD_INT 1
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 2
70200: NEG
70201: PUSH
70202: LD_INT 2
70204: NEG
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70231: LD_ADDR_VAR 0 59
70235: PUSH
70236: LD_INT 0
70238: PUSH
70239: LD_INT 0
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: LD_INT 1
70251: NEG
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 1
70259: PUSH
70260: LD_INT 0
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 1
70269: PUSH
70270: LD_INT 1
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 0
70279: PUSH
70280: LD_INT 1
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 1
70289: NEG
70290: PUSH
70291: LD_INT 0
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 1
70300: NEG
70301: PUSH
70302: LD_INT 1
70304: NEG
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70319: LD_ADDR_VAR 0 60
70323: PUSH
70324: LD_INT 0
70326: PUSH
70327: LD_INT 0
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: LD_INT 1
70339: NEG
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 1
70347: PUSH
70348: LD_INT 0
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 1
70357: PUSH
70358: LD_INT 1
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 0
70367: PUSH
70368: LD_INT 1
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 1
70377: NEG
70378: PUSH
70379: LD_INT 0
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 1
70388: NEG
70389: PUSH
70390: LD_INT 1
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70407: LD_ADDR_VAR 0 61
70411: PUSH
70412: LD_INT 0
70414: PUSH
70415: LD_INT 0
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 0
70424: PUSH
70425: LD_INT 1
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 1
70435: PUSH
70436: LD_INT 0
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 1
70445: PUSH
70446: LD_INT 1
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 0
70455: PUSH
70456: LD_INT 1
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 1
70465: NEG
70466: PUSH
70467: LD_INT 0
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 1
70476: NEG
70477: PUSH
70478: LD_INT 1
70480: NEG
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70495: LD_ADDR_VAR 0 62
70499: PUSH
70500: LD_INT 0
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 0
70512: PUSH
70513: LD_INT 1
70515: NEG
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 1
70523: PUSH
70524: LD_INT 0
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 1
70533: PUSH
70534: LD_INT 1
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 0
70543: PUSH
70544: LD_INT 1
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 1
70553: NEG
70554: PUSH
70555: LD_INT 0
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 1
70564: NEG
70565: PUSH
70566: LD_INT 1
70568: NEG
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70583: LD_ADDR_VAR 0 63
70587: PUSH
70588: LD_INT 0
70590: PUSH
70591: LD_INT 0
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 0
70600: PUSH
70601: LD_INT 1
70603: NEG
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 1
70611: PUSH
70612: LD_INT 0
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 1
70621: PUSH
70622: LD_INT 1
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 0
70631: PUSH
70632: LD_INT 1
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 1
70641: NEG
70642: PUSH
70643: LD_INT 0
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 1
70652: NEG
70653: PUSH
70654: LD_INT 1
70656: NEG
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70671: LD_ADDR_VAR 0 64
70675: PUSH
70676: LD_INT 0
70678: PUSH
70679: LD_INT 0
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 0
70688: PUSH
70689: LD_INT 1
70691: NEG
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 1
70699: PUSH
70700: LD_INT 0
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 1
70709: PUSH
70710: LD_INT 1
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 0
70719: PUSH
70720: LD_INT 1
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 1
70729: NEG
70730: PUSH
70731: LD_INT 0
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 1
70740: NEG
70741: PUSH
70742: LD_INT 1
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: ST_TO_ADDR
// end ; 1 :
70759: GO 76656
70761: LD_INT 1
70763: DOUBLE
70764: EQUAL
70765: IFTRUE 70769
70767: GO 73392
70769: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70770: LD_ADDR_VAR 0 11
70774: PUSH
70775: LD_INT 1
70777: NEG
70778: PUSH
70779: LD_INT 3
70781: NEG
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 0
70789: PUSH
70790: LD_INT 3
70792: NEG
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 1
70800: PUSH
70801: LD_INT 2
70803: NEG
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: LIST
70813: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70814: LD_ADDR_VAR 0 12
70818: PUSH
70819: LD_INT 2
70821: PUSH
70822: LD_INT 1
70824: NEG
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 3
70832: PUSH
70833: LD_INT 0
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 3
70842: PUSH
70843: LD_INT 1
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: LIST
70854: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70855: LD_ADDR_VAR 0 13
70859: PUSH
70860: LD_INT 3
70862: PUSH
70863: LD_INT 2
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 3
70872: PUSH
70873: LD_INT 3
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 2
70882: PUSH
70883: LD_INT 3
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: LIST
70894: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70895: LD_ADDR_VAR 0 14
70899: PUSH
70900: LD_INT 1
70902: PUSH
70903: LD_INT 3
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 0
70912: PUSH
70913: LD_INT 3
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 1
70922: NEG
70923: PUSH
70924: LD_INT 2
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: LIST
70935: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70936: LD_ADDR_VAR 0 15
70940: PUSH
70941: LD_INT 2
70943: NEG
70944: PUSH
70945: LD_INT 1
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 3
70954: NEG
70955: PUSH
70956: LD_INT 0
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 3
70965: NEG
70966: PUSH
70967: LD_INT 1
70969: NEG
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: LIST
70979: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70980: LD_ADDR_VAR 0 16
70984: PUSH
70985: LD_INT 2
70987: NEG
70988: PUSH
70989: LD_INT 3
70991: NEG
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 3
70999: NEG
71000: PUSH
71001: LD_INT 2
71003: NEG
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 3
71011: NEG
71012: PUSH
71013: LD_INT 3
71015: NEG
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: LIST
71025: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71026: LD_ADDR_VAR 0 17
71030: PUSH
71031: LD_INT 1
71033: NEG
71034: PUSH
71035: LD_INT 3
71037: NEG
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 0
71045: PUSH
71046: LD_INT 3
71048: NEG
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 1
71056: PUSH
71057: LD_INT 2
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: LIST
71069: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71070: LD_ADDR_VAR 0 18
71074: PUSH
71075: LD_INT 2
71077: PUSH
71078: LD_INT 1
71080: NEG
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 3
71088: PUSH
71089: LD_INT 0
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 3
71098: PUSH
71099: LD_INT 1
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: LIST
71110: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71111: LD_ADDR_VAR 0 19
71115: PUSH
71116: LD_INT 3
71118: PUSH
71119: LD_INT 2
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 3
71128: PUSH
71129: LD_INT 3
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 2
71138: PUSH
71139: LD_INT 3
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: LIST
71150: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71151: LD_ADDR_VAR 0 20
71155: PUSH
71156: LD_INT 1
71158: PUSH
71159: LD_INT 3
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 0
71168: PUSH
71169: LD_INT 3
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 1
71178: NEG
71179: PUSH
71180: LD_INT 2
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: LIST
71191: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71192: LD_ADDR_VAR 0 21
71196: PUSH
71197: LD_INT 2
71199: NEG
71200: PUSH
71201: LD_INT 1
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 3
71210: NEG
71211: PUSH
71212: LD_INT 0
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 3
71221: NEG
71222: PUSH
71223: LD_INT 1
71225: NEG
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: LIST
71235: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71236: LD_ADDR_VAR 0 22
71240: PUSH
71241: LD_INT 2
71243: NEG
71244: PUSH
71245: LD_INT 3
71247: NEG
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 3
71255: NEG
71256: PUSH
71257: LD_INT 2
71259: NEG
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 3
71267: NEG
71268: PUSH
71269: LD_INT 3
71271: NEG
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: LIST
71281: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
71282: LD_ADDR_VAR 0 23
71286: PUSH
71287: LD_INT 0
71289: PUSH
71290: LD_INT 3
71292: NEG
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 1
71300: NEG
71301: PUSH
71302: LD_INT 4
71304: NEG
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 1
71312: PUSH
71313: LD_INT 3
71315: NEG
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: LIST
71325: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
71326: LD_ADDR_VAR 0 24
71330: PUSH
71331: LD_INT 3
71333: PUSH
71334: LD_INT 0
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 3
71343: PUSH
71344: LD_INT 1
71346: NEG
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 4
71354: PUSH
71355: LD_INT 1
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: LIST
71366: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
71367: LD_ADDR_VAR 0 25
71371: PUSH
71372: LD_INT 3
71374: PUSH
71375: LD_INT 3
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 4
71384: PUSH
71385: LD_INT 3
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 3
71394: PUSH
71395: LD_INT 4
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: LIST
71406: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
71407: LD_ADDR_VAR 0 26
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: LD_INT 3
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 1
71424: PUSH
71425: LD_INT 4
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 1
71434: NEG
71435: PUSH
71436: LD_INT 3
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: LIST
71447: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
71448: LD_ADDR_VAR 0 27
71452: PUSH
71453: LD_INT 3
71455: NEG
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 3
71466: NEG
71467: PUSH
71468: LD_INT 1
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 4
71477: NEG
71478: PUSH
71479: LD_INT 1
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: LIST
71491: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
71492: LD_ADDR_VAR 0 28
71496: PUSH
71497: LD_INT 3
71499: NEG
71500: PUSH
71501: LD_INT 3
71503: NEG
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 3
71511: NEG
71512: PUSH
71513: LD_INT 4
71515: NEG
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 4
71523: NEG
71524: PUSH
71525: LD_INT 3
71527: NEG
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: LIST
71537: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
71538: LD_ADDR_VAR 0 29
71542: PUSH
71543: LD_INT 1
71545: NEG
71546: PUSH
71547: LD_INT 3
71549: NEG
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 0
71557: PUSH
71558: LD_INT 3
71560: NEG
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: LD_INT 1
71568: PUSH
71569: LD_INT 2
71571: NEG
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 1
71579: NEG
71580: PUSH
71581: LD_INT 4
71583: NEG
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 0
71591: PUSH
71592: LD_INT 4
71594: NEG
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 1
71602: PUSH
71603: LD_INT 3
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 1
71613: NEG
71614: PUSH
71615: LD_INT 5
71617: NEG
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 0
71625: PUSH
71626: LD_INT 5
71628: NEG
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 1
71636: PUSH
71637: LD_INT 4
71639: NEG
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 1
71647: NEG
71648: PUSH
71649: LD_INT 6
71651: NEG
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 0
71659: PUSH
71660: LD_INT 6
71662: NEG
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 1
71670: PUSH
71671: LD_INT 5
71673: NEG
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
71693: LD_ADDR_VAR 0 30
71697: PUSH
71698: LD_INT 2
71700: PUSH
71701: LD_INT 1
71703: NEG
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 3
71711: PUSH
71712: LD_INT 0
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 3
71721: PUSH
71722: LD_INT 1
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 3
71731: PUSH
71732: LD_INT 1
71734: NEG
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 4
71742: PUSH
71743: LD_INT 0
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 4
71752: PUSH
71753: LD_INT 1
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 4
71762: PUSH
71763: LD_INT 1
71765: NEG
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 5
71773: PUSH
71774: LD_INT 0
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 5
71783: PUSH
71784: LD_INT 1
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 5
71793: PUSH
71794: LD_INT 1
71796: NEG
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 6
71804: PUSH
71805: LD_INT 0
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 6
71814: PUSH
71815: LD_INT 1
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
71836: LD_ADDR_VAR 0 31
71840: PUSH
71841: LD_INT 3
71843: PUSH
71844: LD_INT 2
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 3
71853: PUSH
71854: LD_INT 3
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: PUSH
71861: LD_INT 2
71863: PUSH
71864: LD_INT 3
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 4
71873: PUSH
71874: LD_INT 3
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 4
71883: PUSH
71884: LD_INT 4
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 3
71893: PUSH
71894: LD_INT 4
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 5
71903: PUSH
71904: LD_INT 4
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 5
71913: PUSH
71914: LD_INT 5
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 4
71923: PUSH
71924: LD_INT 5
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 6
71933: PUSH
71934: LD_INT 5
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: LD_INT 6
71943: PUSH
71944: LD_INT 6
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: PUSH
71951: LD_INT 5
71953: PUSH
71954: LD_INT 6
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
71975: LD_ADDR_VAR 0 32
71979: PUSH
71980: LD_INT 1
71982: PUSH
71983: LD_INT 3
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 0
71992: PUSH
71993: LD_INT 3
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 1
72002: NEG
72003: PUSH
72004: LD_INT 2
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 1
72013: PUSH
72014: LD_INT 4
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 0
72023: PUSH
72024: LD_INT 4
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 1
72033: NEG
72034: PUSH
72035: LD_INT 3
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 1
72044: PUSH
72045: LD_INT 5
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 0
72054: PUSH
72055: LD_INT 5
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 1
72064: NEG
72065: PUSH
72066: LD_INT 4
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 1
72075: PUSH
72076: LD_INT 6
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 0
72085: PUSH
72086: LD_INT 6
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 1
72095: NEG
72096: PUSH
72097: LD_INT 5
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
72118: LD_ADDR_VAR 0 33
72122: PUSH
72123: LD_INT 2
72125: NEG
72126: PUSH
72127: LD_INT 1
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 3
72136: NEG
72137: PUSH
72138: LD_INT 0
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: PUSH
72145: LD_INT 3
72147: NEG
72148: PUSH
72149: LD_INT 1
72151: NEG
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: PUSH
72157: LD_INT 3
72159: NEG
72160: PUSH
72161: LD_INT 1
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 4
72170: NEG
72171: PUSH
72172: LD_INT 0
72174: PUSH
72175: EMPTY
72176: LIST
72177: LIST
72178: PUSH
72179: LD_INT 4
72181: NEG
72182: PUSH
72183: LD_INT 1
72185: NEG
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_INT 4
72193: NEG
72194: PUSH
72195: LD_INT 1
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 5
72204: NEG
72205: PUSH
72206: LD_INT 0
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 5
72215: NEG
72216: PUSH
72217: LD_INT 1
72219: NEG
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 5
72227: NEG
72228: PUSH
72229: LD_INT 1
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: LD_INT 6
72238: NEG
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 6
72249: NEG
72250: PUSH
72251: LD_INT 1
72253: NEG
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
72273: LD_ADDR_VAR 0 34
72277: PUSH
72278: LD_INT 2
72280: NEG
72281: PUSH
72282: LD_INT 3
72284: NEG
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_INT 3
72292: NEG
72293: PUSH
72294: LD_INT 2
72296: NEG
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 3
72304: NEG
72305: PUSH
72306: LD_INT 3
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 3
72316: NEG
72317: PUSH
72318: LD_INT 4
72320: NEG
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 4
72328: NEG
72329: PUSH
72330: LD_INT 3
72332: NEG
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 4
72340: NEG
72341: PUSH
72342: LD_INT 4
72344: NEG
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 4
72352: NEG
72353: PUSH
72354: LD_INT 5
72356: NEG
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 5
72364: NEG
72365: PUSH
72366: LD_INT 4
72368: NEG
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 5
72376: NEG
72377: PUSH
72378: LD_INT 5
72380: NEG
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 5
72388: NEG
72389: PUSH
72390: LD_INT 6
72392: NEG
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 6
72400: NEG
72401: PUSH
72402: LD_INT 5
72404: NEG
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 6
72412: NEG
72413: PUSH
72414: LD_INT 6
72416: NEG
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
72436: LD_ADDR_VAR 0 41
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: LD_INT 2
72446: NEG
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 1
72454: NEG
72455: PUSH
72456: LD_INT 3
72458: NEG
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 1
72466: PUSH
72467: LD_INT 2
72469: NEG
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: LIST
72479: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
72480: LD_ADDR_VAR 0 42
72484: PUSH
72485: LD_INT 2
72487: PUSH
72488: LD_INT 0
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 2
72497: PUSH
72498: LD_INT 1
72500: NEG
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: LD_INT 3
72508: PUSH
72509: LD_INT 1
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: LIST
72520: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
72521: LD_ADDR_VAR 0 43
72525: PUSH
72526: LD_INT 2
72528: PUSH
72529: LD_INT 2
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 3
72538: PUSH
72539: LD_INT 2
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 2
72548: PUSH
72549: LD_INT 3
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: LIST
72560: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
72561: LD_ADDR_VAR 0 44
72565: PUSH
72566: LD_INT 0
72568: PUSH
72569: LD_INT 2
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 1
72578: PUSH
72579: LD_INT 3
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 1
72588: NEG
72589: PUSH
72590: LD_INT 2
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: LIST
72601: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
72602: LD_ADDR_VAR 0 45
72606: PUSH
72607: LD_INT 2
72609: NEG
72610: PUSH
72611: LD_INT 0
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 2
72620: NEG
72621: PUSH
72622: LD_INT 1
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 3
72631: NEG
72632: PUSH
72633: LD_INT 1
72635: NEG
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: LIST
72645: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
72646: LD_ADDR_VAR 0 46
72650: PUSH
72651: LD_INT 2
72653: NEG
72654: PUSH
72655: LD_INT 2
72657: NEG
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: LD_INT 2
72665: NEG
72666: PUSH
72667: LD_INT 3
72669: NEG
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 3
72677: NEG
72678: PUSH
72679: LD_INT 2
72681: NEG
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: LIST
72691: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
72692: LD_ADDR_VAR 0 47
72696: PUSH
72697: LD_INT 2
72699: NEG
72700: PUSH
72701: LD_INT 3
72703: NEG
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 1
72711: NEG
72712: PUSH
72713: LD_INT 3
72715: NEG
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
72725: LD_ADDR_VAR 0 48
72729: PUSH
72730: LD_INT 1
72732: PUSH
72733: LD_INT 2
72735: NEG
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 2
72743: PUSH
72744: LD_INT 1
72746: NEG
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
72756: LD_ADDR_VAR 0 49
72760: PUSH
72761: LD_INT 3
72763: PUSH
72764: LD_INT 1
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: PUSH
72771: LD_INT 3
72773: PUSH
72774: LD_INT 2
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
72785: LD_ADDR_VAR 0 50
72789: PUSH
72790: LD_INT 2
72792: PUSH
72793: LD_INT 3
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 1
72802: PUSH
72803: LD_INT 3
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72814: LD_ADDR_VAR 0 51
72818: PUSH
72819: LD_INT 1
72821: NEG
72822: PUSH
72823: LD_INT 2
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 2
72832: NEG
72833: PUSH
72834: LD_INT 1
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72845: LD_ADDR_VAR 0 52
72849: PUSH
72850: LD_INT 3
72852: NEG
72853: PUSH
72854: LD_INT 1
72856: NEG
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: LD_INT 3
72864: NEG
72865: PUSH
72866: LD_INT 2
72868: NEG
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72878: LD_ADDR_VAR 0 53
72882: PUSH
72883: LD_INT 1
72885: NEG
72886: PUSH
72887: LD_INT 3
72889: NEG
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 0
72897: PUSH
72898: LD_INT 3
72900: NEG
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 1
72908: PUSH
72909: LD_INT 2
72911: NEG
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: LIST
72921: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72922: LD_ADDR_VAR 0 54
72926: PUSH
72927: LD_INT 2
72929: PUSH
72930: LD_INT 1
72932: NEG
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 3
72940: PUSH
72941: LD_INT 0
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 3
72950: PUSH
72951: LD_INT 1
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: LIST
72962: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72963: LD_ADDR_VAR 0 55
72967: PUSH
72968: LD_INT 3
72970: PUSH
72971: LD_INT 2
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 3
72980: PUSH
72981: LD_INT 3
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 2
72990: PUSH
72991: LD_INT 3
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: LIST
73002: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73003: LD_ADDR_VAR 0 56
73007: PUSH
73008: LD_INT 1
73010: PUSH
73011: LD_INT 3
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 0
73020: PUSH
73021: LD_INT 3
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 1
73030: NEG
73031: PUSH
73032: LD_INT 2
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: LIST
73043: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73044: LD_ADDR_VAR 0 57
73048: PUSH
73049: LD_INT 2
73051: NEG
73052: PUSH
73053: LD_INT 1
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 3
73062: NEG
73063: PUSH
73064: LD_INT 0
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: LD_INT 3
73073: NEG
73074: PUSH
73075: LD_INT 1
73077: NEG
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: LIST
73087: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73088: LD_ADDR_VAR 0 58
73092: PUSH
73093: LD_INT 2
73095: NEG
73096: PUSH
73097: LD_INT 3
73099: NEG
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: LD_INT 3
73107: NEG
73108: PUSH
73109: LD_INT 2
73111: NEG
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 3
73119: NEG
73120: PUSH
73121: LD_INT 3
73123: NEG
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: LIST
73133: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
73134: LD_ADDR_VAR 0 59
73138: PUSH
73139: LD_INT 1
73141: NEG
73142: PUSH
73143: LD_INT 2
73145: NEG
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: LD_INT 0
73153: PUSH
73154: LD_INT 2
73156: NEG
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PUSH
73162: LD_INT 1
73164: PUSH
73165: LD_INT 1
73167: NEG
73168: PUSH
73169: EMPTY
73170: LIST
73171: LIST
73172: PUSH
73173: EMPTY
73174: LIST
73175: LIST
73176: LIST
73177: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73178: LD_ADDR_VAR 0 60
73182: PUSH
73183: LD_INT 1
73185: PUSH
73186: LD_INT 1
73188: NEG
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: PUSH
73194: LD_INT 2
73196: PUSH
73197: LD_INT 0
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: PUSH
73204: LD_INT 2
73206: PUSH
73207: LD_INT 1
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: LIST
73218: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73219: LD_ADDR_VAR 0 61
73223: PUSH
73224: LD_INT 2
73226: PUSH
73227: LD_INT 1
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 2
73236: PUSH
73237: LD_INT 2
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: PUSH
73244: LD_INT 1
73246: PUSH
73247: LD_INT 2
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: LIST
73258: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73259: LD_ADDR_VAR 0 62
73263: PUSH
73264: LD_INT 1
73266: PUSH
73267: LD_INT 2
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 0
73276: PUSH
73277: LD_INT 2
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: LD_INT 1
73286: NEG
73287: PUSH
73288: LD_INT 1
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: LIST
73299: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73300: LD_ADDR_VAR 0 63
73304: PUSH
73305: LD_INT 1
73307: NEG
73308: PUSH
73309: LD_INT 1
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 2
73318: NEG
73319: PUSH
73320: LD_INT 0
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: PUSH
73327: LD_INT 2
73329: NEG
73330: PUSH
73331: LD_INT 1
73333: NEG
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: LIST
73343: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73344: LD_ADDR_VAR 0 64
73348: PUSH
73349: LD_INT 1
73351: NEG
73352: PUSH
73353: LD_INT 2
73355: NEG
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: PUSH
73361: LD_INT 2
73363: NEG
73364: PUSH
73365: LD_INT 1
73367: NEG
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: PUSH
73373: LD_INT 2
73375: NEG
73376: PUSH
73377: LD_INT 2
73379: NEG
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: LIST
73389: ST_TO_ADDR
// end ; 2 :
73390: GO 76656
73392: LD_INT 2
73394: DOUBLE
73395: EQUAL
73396: IFTRUE 73400
73398: GO 76655
73400: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
73401: LD_ADDR_VAR 0 29
73405: PUSH
73406: LD_INT 4
73408: PUSH
73409: LD_INT 0
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 4
73418: PUSH
73419: LD_INT 1
73421: NEG
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 5
73429: PUSH
73430: LD_INT 0
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PUSH
73437: LD_INT 5
73439: PUSH
73440: LD_INT 1
73442: PUSH
73443: EMPTY
73444: LIST
73445: LIST
73446: PUSH
73447: LD_INT 4
73449: PUSH
73450: LD_INT 1
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: PUSH
73457: LD_INT 3
73459: PUSH
73460: LD_INT 0
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 3
73469: PUSH
73470: LD_INT 1
73472: NEG
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: PUSH
73478: LD_INT 3
73480: PUSH
73481: LD_INT 2
73483: NEG
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PUSH
73489: LD_INT 5
73491: PUSH
73492: LD_INT 2
73494: PUSH
73495: EMPTY
73496: LIST
73497: LIST
73498: PUSH
73499: LD_INT 3
73501: PUSH
73502: LD_INT 3
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: PUSH
73509: LD_INT 3
73511: PUSH
73512: LD_INT 2
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: PUSH
73519: LD_INT 4
73521: PUSH
73522: LD_INT 3
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PUSH
73529: LD_INT 4
73531: PUSH
73532: LD_INT 4
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: LD_INT 3
73541: PUSH
73542: LD_INT 4
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: PUSH
73549: LD_INT 2
73551: PUSH
73552: LD_INT 3
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: PUSH
73559: LD_INT 2
73561: PUSH
73562: LD_INT 2
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: PUSH
73569: LD_INT 4
73571: PUSH
73572: LD_INT 2
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: PUSH
73579: LD_INT 2
73581: PUSH
73582: LD_INT 4
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: PUSH
73589: LD_INT 0
73591: PUSH
73592: LD_INT 4
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 0
73601: PUSH
73602: LD_INT 3
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 1
73611: PUSH
73612: LD_INT 4
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PUSH
73619: LD_INT 1
73621: PUSH
73622: LD_INT 5
73624: PUSH
73625: EMPTY
73626: LIST
73627: LIST
73628: PUSH
73629: LD_INT 0
73631: PUSH
73632: LD_INT 5
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: PUSH
73639: LD_INT 1
73641: NEG
73642: PUSH
73643: LD_INT 4
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 1
73652: NEG
73653: PUSH
73654: LD_INT 3
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: PUSH
73661: LD_INT 2
73663: PUSH
73664: LD_INT 5
73666: PUSH
73667: EMPTY
73668: LIST
73669: LIST
73670: PUSH
73671: LD_INT 2
73673: NEG
73674: PUSH
73675: LD_INT 3
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: PUSH
73682: LD_INT 3
73684: NEG
73685: PUSH
73686: LD_INT 0
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 3
73695: NEG
73696: PUSH
73697: LD_INT 1
73699: NEG
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: LD_INT 2
73707: NEG
73708: PUSH
73709: LD_INT 0
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 2
73718: NEG
73719: PUSH
73720: LD_INT 1
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 3
73729: NEG
73730: PUSH
73731: LD_INT 1
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 4
73740: NEG
73741: PUSH
73742: LD_INT 0
73744: PUSH
73745: EMPTY
73746: LIST
73747: LIST
73748: PUSH
73749: LD_INT 4
73751: NEG
73752: PUSH
73753: LD_INT 1
73755: NEG
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 4
73763: NEG
73764: PUSH
73765: LD_INT 2
73767: NEG
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 2
73775: NEG
73776: PUSH
73777: LD_INT 2
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 4
73786: NEG
73787: PUSH
73788: LD_INT 4
73790: NEG
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 4
73798: NEG
73799: PUSH
73800: LD_INT 5
73802: NEG
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: PUSH
73808: LD_INT 3
73810: NEG
73811: PUSH
73812: LD_INT 4
73814: NEG
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: LD_INT 3
73822: NEG
73823: PUSH
73824: LD_INT 3
73826: NEG
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 4
73834: NEG
73835: PUSH
73836: LD_INT 3
73838: NEG
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PUSH
73844: LD_INT 5
73846: NEG
73847: PUSH
73848: LD_INT 4
73850: NEG
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: LD_INT 5
73858: NEG
73859: PUSH
73860: LD_INT 5
73862: NEG
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: PUSH
73868: LD_INT 3
73870: NEG
73871: PUSH
73872: LD_INT 5
73874: NEG
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: PUSH
73880: LD_INT 5
73882: NEG
73883: PUSH
73884: LD_INT 3
73886: NEG
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: LIST
73935: LIST
73936: LIST
73937: LIST
73938: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
73939: LD_ADDR_VAR 0 30
73943: PUSH
73944: LD_INT 4
73946: PUSH
73947: LD_INT 4
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PUSH
73954: LD_INT 4
73956: PUSH
73957: LD_INT 3
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: PUSH
73964: LD_INT 5
73966: PUSH
73967: LD_INT 4
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: PUSH
73974: LD_INT 5
73976: PUSH
73977: LD_INT 5
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: PUSH
73984: LD_INT 4
73986: PUSH
73987: LD_INT 5
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: PUSH
73994: LD_INT 3
73996: PUSH
73997: LD_INT 4
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: PUSH
74004: LD_INT 3
74006: PUSH
74007: LD_INT 3
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: PUSH
74014: LD_INT 5
74016: PUSH
74017: LD_INT 3
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: PUSH
74024: LD_INT 3
74026: PUSH
74027: LD_INT 5
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PUSH
74034: LD_INT 0
74036: PUSH
74037: LD_INT 3
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: LD_INT 0
74046: PUSH
74047: LD_INT 2
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PUSH
74054: LD_INT 1
74056: PUSH
74057: LD_INT 3
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: PUSH
74064: LD_INT 1
74066: PUSH
74067: LD_INT 4
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: LD_INT 0
74076: PUSH
74077: LD_INT 4
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 1
74086: NEG
74087: PUSH
74088: LD_INT 3
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 1
74097: NEG
74098: PUSH
74099: LD_INT 2
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: PUSH
74106: LD_INT 2
74108: PUSH
74109: LD_INT 4
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: PUSH
74116: LD_INT 2
74118: NEG
74119: PUSH
74120: LD_INT 2
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 4
74129: NEG
74130: PUSH
74131: LD_INT 0
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 4
74140: NEG
74141: PUSH
74142: LD_INT 1
74144: NEG
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: PUSH
74150: LD_INT 3
74152: NEG
74153: PUSH
74154: LD_INT 0
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: PUSH
74161: LD_INT 3
74163: NEG
74164: PUSH
74165: LD_INT 1
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: PUSH
74172: LD_INT 4
74174: NEG
74175: PUSH
74176: LD_INT 1
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: PUSH
74183: LD_INT 5
74185: NEG
74186: PUSH
74187: LD_INT 0
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: PUSH
74194: LD_INT 5
74196: NEG
74197: PUSH
74198: LD_INT 1
74200: NEG
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 5
74208: NEG
74209: PUSH
74210: LD_INT 2
74212: NEG
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: LD_INT 3
74220: NEG
74221: PUSH
74222: LD_INT 2
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PUSH
74229: LD_INT 3
74231: NEG
74232: PUSH
74233: LD_INT 3
74235: NEG
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: PUSH
74241: LD_INT 3
74243: NEG
74244: PUSH
74245: LD_INT 4
74247: NEG
74248: PUSH
74249: EMPTY
74250: LIST
74251: LIST
74252: PUSH
74253: LD_INT 2
74255: NEG
74256: PUSH
74257: LD_INT 3
74259: NEG
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: PUSH
74265: LD_INT 2
74267: NEG
74268: PUSH
74269: LD_INT 2
74271: NEG
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: LD_INT 3
74279: NEG
74280: PUSH
74281: LD_INT 2
74283: NEG
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PUSH
74289: LD_INT 4
74291: NEG
74292: PUSH
74293: LD_INT 3
74295: NEG
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: PUSH
74301: LD_INT 4
74303: NEG
74304: PUSH
74305: LD_INT 4
74307: NEG
74308: PUSH
74309: EMPTY
74310: LIST
74311: LIST
74312: PUSH
74313: LD_INT 2
74315: NEG
74316: PUSH
74317: LD_INT 4
74319: NEG
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 4
74327: NEG
74328: PUSH
74329: LD_INT 2
74331: NEG
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PUSH
74337: LD_INT 0
74339: PUSH
74340: LD_INT 4
74342: NEG
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: PUSH
74348: LD_INT 0
74350: PUSH
74351: LD_INT 5
74353: NEG
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 1
74361: PUSH
74362: LD_INT 4
74364: NEG
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: LD_INT 1
74372: PUSH
74373: LD_INT 3
74375: NEG
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: LD_INT 0
74383: PUSH
74384: LD_INT 3
74386: NEG
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: PUSH
74392: LD_INT 1
74394: NEG
74395: PUSH
74396: LD_INT 4
74398: NEG
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: PUSH
74404: LD_INT 1
74406: NEG
74407: PUSH
74408: LD_INT 5
74410: NEG
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: PUSH
74416: LD_INT 2
74418: PUSH
74419: LD_INT 3
74421: NEG
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: PUSH
74427: LD_INT 2
74429: NEG
74430: PUSH
74431: LD_INT 5
74433: NEG
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: LIST
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
74486: LD_ADDR_VAR 0 31
74490: PUSH
74491: LD_INT 0
74493: PUSH
74494: LD_INT 4
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PUSH
74501: LD_INT 0
74503: PUSH
74504: LD_INT 3
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: PUSH
74511: LD_INT 1
74513: PUSH
74514: LD_INT 4
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: PUSH
74521: LD_INT 1
74523: PUSH
74524: LD_INT 5
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: PUSH
74531: LD_INT 0
74533: PUSH
74534: LD_INT 5
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PUSH
74541: LD_INT 1
74543: NEG
74544: PUSH
74545: LD_INT 4
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: PUSH
74552: LD_INT 1
74554: NEG
74555: PUSH
74556: LD_INT 3
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: PUSH
74563: LD_INT 2
74565: PUSH
74566: LD_INT 5
74568: PUSH
74569: EMPTY
74570: LIST
74571: LIST
74572: PUSH
74573: LD_INT 2
74575: NEG
74576: PUSH
74577: LD_INT 3
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: PUSH
74584: LD_INT 3
74586: NEG
74587: PUSH
74588: LD_INT 0
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: LD_INT 3
74597: NEG
74598: PUSH
74599: LD_INT 1
74601: NEG
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 2
74609: NEG
74610: PUSH
74611: LD_INT 0
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: PUSH
74618: LD_INT 2
74620: NEG
74621: PUSH
74622: LD_INT 1
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 3
74631: NEG
74632: PUSH
74633: LD_INT 1
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: LD_INT 4
74642: NEG
74643: PUSH
74644: LD_INT 0
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 4
74653: NEG
74654: PUSH
74655: LD_INT 1
74657: NEG
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: LD_INT 4
74665: NEG
74666: PUSH
74667: LD_INT 2
74669: NEG
74670: PUSH
74671: EMPTY
74672: LIST
74673: LIST
74674: PUSH
74675: LD_INT 2
74677: NEG
74678: PUSH
74679: LD_INT 2
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PUSH
74686: LD_INT 4
74688: NEG
74689: PUSH
74690: LD_INT 4
74692: NEG
74693: PUSH
74694: EMPTY
74695: LIST
74696: LIST
74697: PUSH
74698: LD_INT 4
74700: NEG
74701: PUSH
74702: LD_INT 5
74704: NEG
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PUSH
74710: LD_INT 3
74712: NEG
74713: PUSH
74714: LD_INT 4
74716: NEG
74717: PUSH
74718: EMPTY
74719: LIST
74720: LIST
74721: PUSH
74722: LD_INT 3
74724: NEG
74725: PUSH
74726: LD_INT 3
74728: NEG
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PUSH
74734: LD_INT 4
74736: NEG
74737: PUSH
74738: LD_INT 3
74740: NEG
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: PUSH
74746: LD_INT 5
74748: NEG
74749: PUSH
74750: LD_INT 4
74752: NEG
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: PUSH
74758: LD_INT 5
74760: NEG
74761: PUSH
74762: LD_INT 5
74764: NEG
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: LD_INT 3
74772: NEG
74773: PUSH
74774: LD_INT 5
74776: NEG
74777: PUSH
74778: EMPTY
74779: LIST
74780: LIST
74781: PUSH
74782: LD_INT 5
74784: NEG
74785: PUSH
74786: LD_INT 3
74788: NEG
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: PUSH
74794: LD_INT 0
74796: PUSH
74797: LD_INT 3
74799: NEG
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: LD_INT 0
74807: PUSH
74808: LD_INT 4
74810: NEG
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: PUSH
74816: LD_INT 1
74818: PUSH
74819: LD_INT 3
74821: NEG
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PUSH
74827: LD_INT 1
74829: PUSH
74830: LD_INT 2
74832: NEG
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: LD_INT 0
74840: PUSH
74841: LD_INT 2
74843: NEG
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: PUSH
74849: LD_INT 1
74851: NEG
74852: PUSH
74853: LD_INT 3
74855: NEG
74856: PUSH
74857: EMPTY
74858: LIST
74859: LIST
74860: PUSH
74861: LD_INT 1
74863: NEG
74864: PUSH
74865: LD_INT 4
74867: NEG
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: PUSH
74873: LD_INT 2
74875: PUSH
74876: LD_INT 2
74878: NEG
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: PUSH
74884: LD_INT 2
74886: NEG
74887: PUSH
74888: LD_INT 4
74890: NEG
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: PUSH
74896: LD_INT 4
74898: PUSH
74899: LD_INT 0
74901: PUSH
74902: EMPTY
74903: LIST
74904: LIST
74905: PUSH
74906: LD_INT 4
74908: PUSH
74909: LD_INT 1
74911: NEG
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: PUSH
74917: LD_INT 5
74919: PUSH
74920: LD_INT 0
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PUSH
74927: LD_INT 5
74929: PUSH
74930: LD_INT 1
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: PUSH
74937: LD_INT 4
74939: PUSH
74940: LD_INT 1
74942: PUSH
74943: EMPTY
74944: LIST
74945: LIST
74946: PUSH
74947: LD_INT 3
74949: PUSH
74950: LD_INT 0
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: PUSH
74957: LD_INT 3
74959: PUSH
74960: LD_INT 1
74962: NEG
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: PUSH
74968: LD_INT 3
74970: PUSH
74971: LD_INT 2
74973: NEG
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: PUSH
74979: LD_INT 5
74981: PUSH
74982: LD_INT 2
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: PUSH
74989: EMPTY
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: LIST
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
75036: LD_ADDR_VAR 0 32
75040: PUSH
75041: LD_INT 4
75043: NEG
75044: PUSH
75045: LD_INT 0
75047: PUSH
75048: EMPTY
75049: LIST
75050: LIST
75051: PUSH
75052: LD_INT 4
75054: NEG
75055: PUSH
75056: LD_INT 1
75058: NEG
75059: PUSH
75060: EMPTY
75061: LIST
75062: LIST
75063: PUSH
75064: LD_INT 3
75066: NEG
75067: PUSH
75068: LD_INT 0
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: PUSH
75075: LD_INT 3
75077: NEG
75078: PUSH
75079: LD_INT 1
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: PUSH
75086: LD_INT 4
75088: NEG
75089: PUSH
75090: LD_INT 1
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PUSH
75097: LD_INT 5
75099: NEG
75100: PUSH
75101: LD_INT 0
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: PUSH
75108: LD_INT 5
75110: NEG
75111: PUSH
75112: LD_INT 1
75114: NEG
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 5
75122: NEG
75123: PUSH
75124: LD_INT 2
75126: NEG
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: PUSH
75132: LD_INT 3
75134: NEG
75135: PUSH
75136: LD_INT 2
75138: PUSH
75139: EMPTY
75140: LIST
75141: LIST
75142: PUSH
75143: LD_INT 3
75145: NEG
75146: PUSH
75147: LD_INT 3
75149: NEG
75150: PUSH
75151: EMPTY
75152: LIST
75153: LIST
75154: PUSH
75155: LD_INT 3
75157: NEG
75158: PUSH
75159: LD_INT 4
75161: NEG
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: PUSH
75167: LD_INT 2
75169: NEG
75170: PUSH
75171: LD_INT 3
75173: NEG
75174: PUSH
75175: EMPTY
75176: LIST
75177: LIST
75178: PUSH
75179: LD_INT 2
75181: NEG
75182: PUSH
75183: LD_INT 2
75185: NEG
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 3
75193: NEG
75194: PUSH
75195: LD_INT 2
75197: NEG
75198: PUSH
75199: EMPTY
75200: LIST
75201: LIST
75202: PUSH
75203: LD_INT 4
75205: NEG
75206: PUSH
75207: LD_INT 3
75209: NEG
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PUSH
75215: LD_INT 4
75217: NEG
75218: PUSH
75219: LD_INT 4
75221: NEG
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: PUSH
75227: LD_INT 2
75229: NEG
75230: PUSH
75231: LD_INT 4
75233: NEG
75234: PUSH
75235: EMPTY
75236: LIST
75237: LIST
75238: PUSH
75239: LD_INT 4
75241: NEG
75242: PUSH
75243: LD_INT 2
75245: NEG
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PUSH
75251: LD_INT 0
75253: PUSH
75254: LD_INT 4
75256: NEG
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: PUSH
75262: LD_INT 0
75264: PUSH
75265: LD_INT 5
75267: NEG
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: LD_INT 1
75275: PUSH
75276: LD_INT 4
75278: NEG
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: PUSH
75284: LD_INT 1
75286: PUSH
75287: LD_INT 3
75289: NEG
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 0
75297: PUSH
75298: LD_INT 3
75300: NEG
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: PUSH
75306: LD_INT 1
75308: NEG
75309: PUSH
75310: LD_INT 4
75312: NEG
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: PUSH
75318: LD_INT 1
75320: NEG
75321: PUSH
75322: LD_INT 5
75324: NEG
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: PUSH
75330: LD_INT 2
75332: PUSH
75333: LD_INT 3
75335: NEG
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: PUSH
75341: LD_INT 2
75343: NEG
75344: PUSH
75345: LD_INT 5
75347: NEG
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: PUSH
75353: LD_INT 3
75355: PUSH
75356: LD_INT 0
75358: PUSH
75359: EMPTY
75360: LIST
75361: LIST
75362: PUSH
75363: LD_INT 3
75365: PUSH
75366: LD_INT 1
75368: NEG
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: PUSH
75374: LD_INT 4
75376: PUSH
75377: LD_INT 0
75379: PUSH
75380: EMPTY
75381: LIST
75382: LIST
75383: PUSH
75384: LD_INT 4
75386: PUSH
75387: LD_INT 1
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: PUSH
75394: LD_INT 3
75396: PUSH
75397: LD_INT 1
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: PUSH
75404: LD_INT 2
75406: PUSH
75407: LD_INT 0
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PUSH
75414: LD_INT 2
75416: PUSH
75417: LD_INT 1
75419: NEG
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: PUSH
75425: LD_INT 2
75427: PUSH
75428: LD_INT 2
75430: NEG
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 4
75438: PUSH
75439: LD_INT 2
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: LD_INT 4
75448: PUSH
75449: LD_INT 4
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: PUSH
75456: LD_INT 4
75458: PUSH
75459: LD_INT 3
75461: PUSH
75462: EMPTY
75463: LIST
75464: LIST
75465: PUSH
75466: LD_INT 5
75468: PUSH
75469: LD_INT 4
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: PUSH
75476: LD_INT 5
75478: PUSH
75479: LD_INT 5
75481: PUSH
75482: EMPTY
75483: LIST
75484: LIST
75485: PUSH
75486: LD_INT 4
75488: PUSH
75489: LD_INT 5
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: PUSH
75496: LD_INT 3
75498: PUSH
75499: LD_INT 4
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: PUSH
75506: LD_INT 3
75508: PUSH
75509: LD_INT 3
75511: PUSH
75512: EMPTY
75513: LIST
75514: LIST
75515: PUSH
75516: LD_INT 5
75518: PUSH
75519: LD_INT 3
75521: PUSH
75522: EMPTY
75523: LIST
75524: LIST
75525: PUSH
75526: LD_INT 3
75528: PUSH
75529: LD_INT 5
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: LIST
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: LIST
75548: LIST
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: LIST
75554: LIST
75555: LIST
75556: LIST
75557: LIST
75558: LIST
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: LIST
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
75583: LD_ADDR_VAR 0 33
75587: PUSH
75588: LD_INT 4
75590: NEG
75591: PUSH
75592: LD_INT 4
75594: NEG
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: PUSH
75600: LD_INT 4
75602: NEG
75603: PUSH
75604: LD_INT 5
75606: NEG
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: PUSH
75612: LD_INT 3
75614: NEG
75615: PUSH
75616: LD_INT 4
75618: NEG
75619: PUSH
75620: EMPTY
75621: LIST
75622: LIST
75623: PUSH
75624: LD_INT 3
75626: NEG
75627: PUSH
75628: LD_INT 3
75630: NEG
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: PUSH
75636: LD_INT 4
75638: NEG
75639: PUSH
75640: LD_INT 3
75642: NEG
75643: PUSH
75644: EMPTY
75645: LIST
75646: LIST
75647: PUSH
75648: LD_INT 5
75650: NEG
75651: PUSH
75652: LD_INT 4
75654: NEG
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: PUSH
75660: LD_INT 5
75662: NEG
75663: PUSH
75664: LD_INT 5
75666: NEG
75667: PUSH
75668: EMPTY
75669: LIST
75670: LIST
75671: PUSH
75672: LD_INT 3
75674: NEG
75675: PUSH
75676: LD_INT 5
75678: NEG
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: LD_INT 5
75686: NEG
75687: PUSH
75688: LD_INT 3
75690: NEG
75691: PUSH
75692: EMPTY
75693: LIST
75694: LIST
75695: PUSH
75696: LD_INT 0
75698: PUSH
75699: LD_INT 3
75701: NEG
75702: PUSH
75703: EMPTY
75704: LIST
75705: LIST
75706: PUSH
75707: LD_INT 0
75709: PUSH
75710: LD_INT 4
75712: NEG
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: LD_INT 1
75720: PUSH
75721: LD_INT 3
75723: NEG
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: PUSH
75729: LD_INT 1
75731: PUSH
75732: LD_INT 2
75734: NEG
75735: PUSH
75736: EMPTY
75737: LIST
75738: LIST
75739: PUSH
75740: LD_INT 0
75742: PUSH
75743: LD_INT 2
75745: NEG
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: PUSH
75751: LD_INT 1
75753: NEG
75754: PUSH
75755: LD_INT 3
75757: NEG
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: LD_INT 1
75765: NEG
75766: PUSH
75767: LD_INT 4
75769: NEG
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: PUSH
75775: LD_INT 2
75777: PUSH
75778: LD_INT 2
75780: NEG
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: PUSH
75786: LD_INT 2
75788: NEG
75789: PUSH
75790: LD_INT 4
75792: NEG
75793: PUSH
75794: EMPTY
75795: LIST
75796: LIST
75797: PUSH
75798: LD_INT 4
75800: PUSH
75801: LD_INT 0
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: PUSH
75808: LD_INT 4
75810: PUSH
75811: LD_INT 1
75813: NEG
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: PUSH
75819: LD_INT 5
75821: PUSH
75822: LD_INT 0
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PUSH
75829: LD_INT 5
75831: PUSH
75832: LD_INT 1
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: PUSH
75839: LD_INT 4
75841: PUSH
75842: LD_INT 1
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: PUSH
75849: LD_INT 3
75851: PUSH
75852: LD_INT 0
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PUSH
75859: LD_INT 3
75861: PUSH
75862: LD_INT 1
75864: NEG
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: PUSH
75870: LD_INT 3
75872: PUSH
75873: LD_INT 2
75875: NEG
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: PUSH
75881: LD_INT 5
75883: PUSH
75884: LD_INT 2
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PUSH
75891: LD_INT 3
75893: PUSH
75894: LD_INT 3
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: LD_INT 3
75903: PUSH
75904: LD_INT 2
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: PUSH
75911: LD_INT 4
75913: PUSH
75914: LD_INT 3
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: PUSH
75921: LD_INT 4
75923: PUSH
75924: LD_INT 4
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: PUSH
75931: LD_INT 3
75933: PUSH
75934: LD_INT 4
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: PUSH
75941: LD_INT 2
75943: PUSH
75944: LD_INT 3
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: PUSH
75951: LD_INT 2
75953: PUSH
75954: LD_INT 2
75956: PUSH
75957: EMPTY
75958: LIST
75959: LIST
75960: PUSH
75961: LD_INT 4
75963: PUSH
75964: LD_INT 2
75966: PUSH
75967: EMPTY
75968: LIST
75969: LIST
75970: PUSH
75971: LD_INT 2
75973: PUSH
75974: LD_INT 4
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: PUSH
75981: LD_INT 0
75983: PUSH
75984: LD_INT 4
75986: PUSH
75987: EMPTY
75988: LIST
75989: LIST
75990: PUSH
75991: LD_INT 0
75993: PUSH
75994: LD_INT 3
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: PUSH
76001: LD_INT 1
76003: PUSH
76004: LD_INT 4
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: PUSH
76011: LD_INT 1
76013: PUSH
76014: LD_INT 5
76016: PUSH
76017: EMPTY
76018: LIST
76019: LIST
76020: PUSH
76021: LD_INT 0
76023: PUSH
76024: LD_INT 5
76026: PUSH
76027: EMPTY
76028: LIST
76029: LIST
76030: PUSH
76031: LD_INT 1
76033: NEG
76034: PUSH
76035: LD_INT 4
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: PUSH
76042: LD_INT 1
76044: NEG
76045: PUSH
76046: LD_INT 3
76048: PUSH
76049: EMPTY
76050: LIST
76051: LIST
76052: PUSH
76053: LD_INT 2
76055: PUSH
76056: LD_INT 5
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: PUSH
76063: LD_INT 2
76065: NEG
76066: PUSH
76067: LD_INT 3
76069: PUSH
76070: EMPTY
76071: LIST
76072: LIST
76073: PUSH
76074: EMPTY
76075: LIST
76076: LIST
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: LIST
76089: LIST
76090: LIST
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: LIST
76098: LIST
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: LIST
76109: LIST
76110: LIST
76111: LIST
76112: LIST
76113: LIST
76114: LIST
76115: LIST
76116: LIST
76117: LIST
76118: LIST
76119: LIST
76120: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
76121: LD_ADDR_VAR 0 34
76125: PUSH
76126: LD_INT 0
76128: PUSH
76129: LD_INT 4
76131: NEG
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: PUSH
76137: LD_INT 0
76139: PUSH
76140: LD_INT 5
76142: NEG
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: PUSH
76148: LD_INT 1
76150: PUSH
76151: LD_INT 4
76153: NEG
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: PUSH
76159: LD_INT 1
76161: PUSH
76162: LD_INT 3
76164: NEG
76165: PUSH
76166: EMPTY
76167: LIST
76168: LIST
76169: PUSH
76170: LD_INT 0
76172: PUSH
76173: LD_INT 3
76175: NEG
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: PUSH
76181: LD_INT 1
76183: NEG
76184: PUSH
76185: LD_INT 4
76187: NEG
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PUSH
76193: LD_INT 1
76195: NEG
76196: PUSH
76197: LD_INT 5
76199: NEG
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PUSH
76205: LD_INT 2
76207: PUSH
76208: LD_INT 3
76210: NEG
76211: PUSH
76212: EMPTY
76213: LIST
76214: LIST
76215: PUSH
76216: LD_INT 2
76218: NEG
76219: PUSH
76220: LD_INT 5
76222: NEG
76223: PUSH
76224: EMPTY
76225: LIST
76226: LIST
76227: PUSH
76228: LD_INT 3
76230: PUSH
76231: LD_INT 0
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: PUSH
76238: LD_INT 3
76240: PUSH
76241: LD_INT 1
76243: NEG
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: PUSH
76249: LD_INT 4
76251: PUSH
76252: LD_INT 0
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: PUSH
76259: LD_INT 4
76261: PUSH
76262: LD_INT 1
76264: PUSH
76265: EMPTY
76266: LIST
76267: LIST
76268: PUSH
76269: LD_INT 3
76271: PUSH
76272: LD_INT 1
76274: PUSH
76275: EMPTY
76276: LIST
76277: LIST
76278: PUSH
76279: LD_INT 2
76281: PUSH
76282: LD_INT 0
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: PUSH
76289: LD_INT 2
76291: PUSH
76292: LD_INT 1
76294: NEG
76295: PUSH
76296: EMPTY
76297: LIST
76298: LIST
76299: PUSH
76300: LD_INT 2
76302: PUSH
76303: LD_INT 2
76305: NEG
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: PUSH
76311: LD_INT 4
76313: PUSH
76314: LD_INT 2
76316: PUSH
76317: EMPTY
76318: LIST
76319: LIST
76320: PUSH
76321: LD_INT 4
76323: PUSH
76324: LD_INT 4
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: PUSH
76331: LD_INT 4
76333: PUSH
76334: LD_INT 3
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: PUSH
76341: LD_INT 5
76343: PUSH
76344: LD_INT 4
76346: PUSH
76347: EMPTY
76348: LIST
76349: LIST
76350: PUSH
76351: LD_INT 5
76353: PUSH
76354: LD_INT 5
76356: PUSH
76357: EMPTY
76358: LIST
76359: LIST
76360: PUSH
76361: LD_INT 4
76363: PUSH
76364: LD_INT 5
76366: PUSH
76367: EMPTY
76368: LIST
76369: LIST
76370: PUSH
76371: LD_INT 3
76373: PUSH
76374: LD_INT 4
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: PUSH
76381: LD_INT 3
76383: PUSH
76384: LD_INT 3
76386: PUSH
76387: EMPTY
76388: LIST
76389: LIST
76390: PUSH
76391: LD_INT 5
76393: PUSH
76394: LD_INT 3
76396: PUSH
76397: EMPTY
76398: LIST
76399: LIST
76400: PUSH
76401: LD_INT 3
76403: PUSH
76404: LD_INT 5
76406: PUSH
76407: EMPTY
76408: LIST
76409: LIST
76410: PUSH
76411: LD_INT 0
76413: PUSH
76414: LD_INT 3
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: PUSH
76421: LD_INT 0
76423: PUSH
76424: LD_INT 2
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: PUSH
76431: LD_INT 1
76433: PUSH
76434: LD_INT 3
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PUSH
76441: LD_INT 1
76443: PUSH
76444: LD_INT 4
76446: PUSH
76447: EMPTY
76448: LIST
76449: LIST
76450: PUSH
76451: LD_INT 0
76453: PUSH
76454: LD_INT 4
76456: PUSH
76457: EMPTY
76458: LIST
76459: LIST
76460: PUSH
76461: LD_INT 1
76463: NEG
76464: PUSH
76465: LD_INT 3
76467: PUSH
76468: EMPTY
76469: LIST
76470: LIST
76471: PUSH
76472: LD_INT 1
76474: NEG
76475: PUSH
76476: LD_INT 2
76478: PUSH
76479: EMPTY
76480: LIST
76481: LIST
76482: PUSH
76483: LD_INT 2
76485: PUSH
76486: LD_INT 4
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: PUSH
76493: LD_INT 2
76495: NEG
76496: PUSH
76497: LD_INT 2
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: LD_INT 4
76506: NEG
76507: PUSH
76508: LD_INT 0
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: PUSH
76515: LD_INT 4
76517: NEG
76518: PUSH
76519: LD_INT 1
76521: NEG
76522: PUSH
76523: EMPTY
76524: LIST
76525: LIST
76526: PUSH
76527: LD_INT 3
76529: NEG
76530: PUSH
76531: LD_INT 0
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: PUSH
76538: LD_INT 3
76540: NEG
76541: PUSH
76542: LD_INT 1
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PUSH
76549: LD_INT 4
76551: NEG
76552: PUSH
76553: LD_INT 1
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: PUSH
76560: LD_INT 5
76562: NEG
76563: PUSH
76564: LD_INT 0
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: PUSH
76571: LD_INT 5
76573: NEG
76574: PUSH
76575: LD_INT 1
76577: NEG
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: PUSH
76583: LD_INT 5
76585: NEG
76586: PUSH
76587: LD_INT 2
76589: NEG
76590: PUSH
76591: EMPTY
76592: LIST
76593: LIST
76594: PUSH
76595: LD_INT 3
76597: NEG
76598: PUSH
76599: LD_INT 2
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: PUSH
76606: EMPTY
76607: LIST
76608: LIST
76609: LIST
76610: LIST
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: LIST
76617: LIST
76618: LIST
76619: LIST
76620: LIST
76621: LIST
76622: LIST
76623: LIST
76624: LIST
76625: LIST
76626: LIST
76627: LIST
76628: LIST
76629: LIST
76630: LIST
76631: LIST
76632: LIST
76633: LIST
76634: LIST
76635: LIST
76636: LIST
76637: LIST
76638: LIST
76639: LIST
76640: LIST
76641: LIST
76642: LIST
76643: LIST
76644: LIST
76645: LIST
76646: LIST
76647: LIST
76648: LIST
76649: LIST
76650: LIST
76651: LIST
76652: ST_TO_ADDR
// end ; end ;
76653: GO 76656
76655: POP
// case btype of b_depot , b_warehouse :
76656: LD_VAR 0 1
76660: PUSH
76661: LD_INT 0
76663: DOUBLE
76664: EQUAL
76665: IFTRUE 76675
76667: LD_INT 1
76669: DOUBLE
76670: EQUAL
76671: IFTRUE 76675
76673: GO 76876
76675: POP
// case nation of nation_american :
76676: LD_VAR 0 5
76680: PUSH
76681: LD_INT 1
76683: DOUBLE
76684: EQUAL
76685: IFTRUE 76689
76687: GO 76745
76689: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
76690: LD_ADDR_VAR 0 9
76694: PUSH
76695: LD_VAR 0 11
76699: PUSH
76700: LD_VAR 0 12
76704: PUSH
76705: LD_VAR 0 13
76709: PUSH
76710: LD_VAR 0 14
76714: PUSH
76715: LD_VAR 0 15
76719: PUSH
76720: LD_VAR 0 16
76724: PUSH
76725: EMPTY
76726: LIST
76727: LIST
76728: LIST
76729: LIST
76730: LIST
76731: LIST
76732: PUSH
76733: LD_VAR 0 4
76737: PUSH
76738: LD_INT 1
76740: PLUS
76741: ARRAY
76742: ST_TO_ADDR
76743: GO 76874
76745: LD_INT 2
76747: DOUBLE
76748: EQUAL
76749: IFTRUE 76753
76751: GO 76809
76753: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
76754: LD_ADDR_VAR 0 9
76758: PUSH
76759: LD_VAR 0 17
76763: PUSH
76764: LD_VAR 0 18
76768: PUSH
76769: LD_VAR 0 19
76773: PUSH
76774: LD_VAR 0 20
76778: PUSH
76779: LD_VAR 0 21
76783: PUSH
76784: LD_VAR 0 22
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: LIST
76796: PUSH
76797: LD_VAR 0 4
76801: PUSH
76802: LD_INT 1
76804: PLUS
76805: ARRAY
76806: ST_TO_ADDR
76807: GO 76874
76809: LD_INT 3
76811: DOUBLE
76812: EQUAL
76813: IFTRUE 76817
76815: GO 76873
76817: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
76818: LD_ADDR_VAR 0 9
76822: PUSH
76823: LD_VAR 0 23
76827: PUSH
76828: LD_VAR 0 24
76832: PUSH
76833: LD_VAR 0 25
76837: PUSH
76838: LD_VAR 0 26
76842: PUSH
76843: LD_VAR 0 27
76847: PUSH
76848: LD_VAR 0 28
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: LIST
76857: LIST
76858: LIST
76859: LIST
76860: PUSH
76861: LD_VAR 0 4
76865: PUSH
76866: LD_INT 1
76868: PLUS
76869: ARRAY
76870: ST_TO_ADDR
76871: GO 76874
76873: POP
76874: GO 77429
76876: LD_INT 2
76878: DOUBLE
76879: EQUAL
76880: IFTRUE 76890
76882: LD_INT 3
76884: DOUBLE
76885: EQUAL
76886: IFTRUE 76890
76888: GO 76946
76890: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
76891: LD_ADDR_VAR 0 9
76895: PUSH
76896: LD_VAR 0 29
76900: PUSH
76901: LD_VAR 0 30
76905: PUSH
76906: LD_VAR 0 31
76910: PUSH
76911: LD_VAR 0 32
76915: PUSH
76916: LD_VAR 0 33
76920: PUSH
76921: LD_VAR 0 34
76925: PUSH
76926: EMPTY
76927: LIST
76928: LIST
76929: LIST
76930: LIST
76931: LIST
76932: LIST
76933: PUSH
76934: LD_VAR 0 4
76938: PUSH
76939: LD_INT 1
76941: PLUS
76942: ARRAY
76943: ST_TO_ADDR
76944: GO 77429
76946: LD_INT 16
76948: DOUBLE
76949: EQUAL
76950: IFTRUE 77008
76952: LD_INT 17
76954: DOUBLE
76955: EQUAL
76956: IFTRUE 77008
76958: LD_INT 18
76960: DOUBLE
76961: EQUAL
76962: IFTRUE 77008
76964: LD_INT 19
76966: DOUBLE
76967: EQUAL
76968: IFTRUE 77008
76970: LD_INT 22
76972: DOUBLE
76973: EQUAL
76974: IFTRUE 77008
76976: LD_INT 20
76978: DOUBLE
76979: EQUAL
76980: IFTRUE 77008
76982: LD_INT 21
76984: DOUBLE
76985: EQUAL
76986: IFTRUE 77008
76988: LD_INT 23
76990: DOUBLE
76991: EQUAL
76992: IFTRUE 77008
76994: LD_INT 24
76996: DOUBLE
76997: EQUAL
76998: IFTRUE 77008
77000: LD_INT 25
77002: DOUBLE
77003: EQUAL
77004: IFTRUE 77008
77006: GO 77064
77008: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
77009: LD_ADDR_VAR 0 9
77013: PUSH
77014: LD_VAR 0 35
77018: PUSH
77019: LD_VAR 0 36
77023: PUSH
77024: LD_VAR 0 37
77028: PUSH
77029: LD_VAR 0 38
77033: PUSH
77034: LD_VAR 0 39
77038: PUSH
77039: LD_VAR 0 40
77043: PUSH
77044: EMPTY
77045: LIST
77046: LIST
77047: LIST
77048: LIST
77049: LIST
77050: LIST
77051: PUSH
77052: LD_VAR 0 4
77056: PUSH
77057: LD_INT 1
77059: PLUS
77060: ARRAY
77061: ST_TO_ADDR
77062: GO 77429
77064: LD_INT 6
77066: DOUBLE
77067: EQUAL
77068: IFTRUE 77120
77070: LD_INT 7
77072: DOUBLE
77073: EQUAL
77074: IFTRUE 77120
77076: LD_INT 8
77078: DOUBLE
77079: EQUAL
77080: IFTRUE 77120
77082: LD_INT 13
77084: DOUBLE
77085: EQUAL
77086: IFTRUE 77120
77088: LD_INT 12
77090: DOUBLE
77091: EQUAL
77092: IFTRUE 77120
77094: LD_INT 15
77096: DOUBLE
77097: EQUAL
77098: IFTRUE 77120
77100: LD_INT 11
77102: DOUBLE
77103: EQUAL
77104: IFTRUE 77120
77106: LD_INT 14
77108: DOUBLE
77109: EQUAL
77110: IFTRUE 77120
77112: LD_INT 10
77114: DOUBLE
77115: EQUAL
77116: IFTRUE 77120
77118: GO 77176
77120: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
77121: LD_ADDR_VAR 0 9
77125: PUSH
77126: LD_VAR 0 41
77130: PUSH
77131: LD_VAR 0 42
77135: PUSH
77136: LD_VAR 0 43
77140: PUSH
77141: LD_VAR 0 44
77145: PUSH
77146: LD_VAR 0 45
77150: PUSH
77151: LD_VAR 0 46
77155: PUSH
77156: EMPTY
77157: LIST
77158: LIST
77159: LIST
77160: LIST
77161: LIST
77162: LIST
77163: PUSH
77164: LD_VAR 0 4
77168: PUSH
77169: LD_INT 1
77171: PLUS
77172: ARRAY
77173: ST_TO_ADDR
77174: GO 77429
77176: LD_INT 36
77178: DOUBLE
77179: EQUAL
77180: IFTRUE 77184
77182: GO 77240
77184: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
77185: LD_ADDR_VAR 0 9
77189: PUSH
77190: LD_VAR 0 47
77194: PUSH
77195: LD_VAR 0 48
77199: PUSH
77200: LD_VAR 0 49
77204: PUSH
77205: LD_VAR 0 50
77209: PUSH
77210: LD_VAR 0 51
77214: PUSH
77215: LD_VAR 0 52
77219: PUSH
77220: EMPTY
77221: LIST
77222: LIST
77223: LIST
77224: LIST
77225: LIST
77226: LIST
77227: PUSH
77228: LD_VAR 0 4
77232: PUSH
77233: LD_INT 1
77235: PLUS
77236: ARRAY
77237: ST_TO_ADDR
77238: GO 77429
77240: LD_INT 4
77242: DOUBLE
77243: EQUAL
77244: IFTRUE 77266
77246: LD_INT 5
77248: DOUBLE
77249: EQUAL
77250: IFTRUE 77266
77252: LD_INT 34
77254: DOUBLE
77255: EQUAL
77256: IFTRUE 77266
77258: LD_INT 37
77260: DOUBLE
77261: EQUAL
77262: IFTRUE 77266
77264: GO 77322
77266: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
77267: LD_ADDR_VAR 0 9
77271: PUSH
77272: LD_VAR 0 53
77276: PUSH
77277: LD_VAR 0 54
77281: PUSH
77282: LD_VAR 0 55
77286: PUSH
77287: LD_VAR 0 56
77291: PUSH
77292: LD_VAR 0 57
77296: PUSH
77297: LD_VAR 0 58
77301: PUSH
77302: EMPTY
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: PUSH
77310: LD_VAR 0 4
77314: PUSH
77315: LD_INT 1
77317: PLUS
77318: ARRAY
77319: ST_TO_ADDR
77320: GO 77429
77322: LD_INT 31
77324: DOUBLE
77325: EQUAL
77326: IFTRUE 77372
77328: LD_INT 32
77330: DOUBLE
77331: EQUAL
77332: IFTRUE 77372
77334: LD_INT 33
77336: DOUBLE
77337: EQUAL
77338: IFTRUE 77372
77340: LD_INT 27
77342: DOUBLE
77343: EQUAL
77344: IFTRUE 77372
77346: LD_INT 26
77348: DOUBLE
77349: EQUAL
77350: IFTRUE 77372
77352: LD_INT 28
77354: DOUBLE
77355: EQUAL
77356: IFTRUE 77372
77358: LD_INT 29
77360: DOUBLE
77361: EQUAL
77362: IFTRUE 77372
77364: LD_INT 30
77366: DOUBLE
77367: EQUAL
77368: IFTRUE 77372
77370: GO 77428
77372: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
77373: LD_ADDR_VAR 0 9
77377: PUSH
77378: LD_VAR 0 59
77382: PUSH
77383: LD_VAR 0 60
77387: PUSH
77388: LD_VAR 0 61
77392: PUSH
77393: LD_VAR 0 62
77397: PUSH
77398: LD_VAR 0 63
77402: PUSH
77403: LD_VAR 0 64
77407: PUSH
77408: EMPTY
77409: LIST
77410: LIST
77411: LIST
77412: LIST
77413: LIST
77414: LIST
77415: PUSH
77416: LD_VAR 0 4
77420: PUSH
77421: LD_INT 1
77423: PLUS
77424: ARRAY
77425: ST_TO_ADDR
77426: GO 77429
77428: POP
// temp_list2 = [ ] ;
77429: LD_ADDR_VAR 0 10
77433: PUSH
77434: EMPTY
77435: ST_TO_ADDR
// for i in temp_list do
77436: LD_ADDR_VAR 0 8
77440: PUSH
77441: LD_VAR 0 9
77445: PUSH
77446: FOR_IN
77447: IFFALSE 77499
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
77449: LD_ADDR_VAR 0 10
77453: PUSH
77454: LD_VAR 0 10
77458: PUSH
77459: LD_VAR 0 8
77463: PUSH
77464: LD_INT 1
77466: ARRAY
77467: PUSH
77468: LD_VAR 0 2
77472: PLUS
77473: PUSH
77474: LD_VAR 0 8
77478: PUSH
77479: LD_INT 2
77481: ARRAY
77482: PUSH
77483: LD_VAR 0 3
77487: PLUS
77488: PUSH
77489: EMPTY
77490: LIST
77491: LIST
77492: PUSH
77493: EMPTY
77494: LIST
77495: ADD
77496: ST_TO_ADDR
77497: GO 77446
77499: POP
77500: POP
// result = temp_list2 ;
77501: LD_ADDR_VAR 0 7
77505: PUSH
77506: LD_VAR 0 10
77510: ST_TO_ADDR
// end ;
77511: LD_VAR 0 7
77515: RET
// export function EnemyInRange ( unit , dist ) ; begin
77516: LD_INT 0
77518: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
77519: LD_ADDR_VAR 0 3
77523: PUSH
77524: LD_VAR 0 1
77528: PPUSH
77529: CALL_OW 255
77533: PPUSH
77534: LD_VAR 0 1
77538: PPUSH
77539: CALL_OW 250
77543: PPUSH
77544: LD_VAR 0 1
77548: PPUSH
77549: CALL_OW 251
77553: PPUSH
77554: LD_VAR 0 2
77558: PPUSH
77559: CALL 50912 0 4
77563: PUSH
77564: LD_INT 4
77566: ARRAY
77567: ST_TO_ADDR
// end ;
77568: LD_VAR 0 3
77572: RET
// export function PlayerSeeMe ( unit ) ; begin
77573: LD_INT 0
77575: PPUSH
// result := See ( your_side , unit ) ;
77576: LD_ADDR_VAR 0 2
77580: PUSH
77581: LD_OWVAR 2
77585: PPUSH
77586: LD_VAR 0 1
77590: PPUSH
77591: CALL_OW 292
77595: ST_TO_ADDR
// end ;
77596: LD_VAR 0 2
77600: RET
// export function ReverseDir ( unit ) ; begin
77601: LD_INT 0
77603: PPUSH
// if not unit then
77604: LD_VAR 0 1
77608: NOT
77609: IFFALSE 77613
// exit ;
77611: GO 77636
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
77613: LD_ADDR_VAR 0 2
77617: PUSH
77618: LD_VAR 0 1
77622: PPUSH
77623: CALL_OW 254
77627: PUSH
77628: LD_INT 3
77630: PLUS
77631: PUSH
77632: LD_INT 6
77634: MOD
77635: ST_TO_ADDR
// end ;
77636: LD_VAR 0 2
77640: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
77641: LD_INT 0
77643: PPUSH
77644: PPUSH
77645: PPUSH
77646: PPUSH
77647: PPUSH
// if not hexes then
77648: LD_VAR 0 2
77652: NOT
77653: IFFALSE 77657
// exit ;
77655: GO 77805
// dist := 9999 ;
77657: LD_ADDR_VAR 0 5
77661: PUSH
77662: LD_INT 9999
77664: ST_TO_ADDR
// for i = 1 to hexes do
77665: LD_ADDR_VAR 0 4
77669: PUSH
77670: DOUBLE
77671: LD_INT 1
77673: DEC
77674: ST_TO_ADDR
77675: LD_VAR 0 2
77679: PUSH
77680: FOR_TO
77681: IFFALSE 77793
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
77683: LD_VAR 0 1
77687: PPUSH
77688: LD_VAR 0 2
77692: PUSH
77693: LD_VAR 0 4
77697: ARRAY
77698: PUSH
77699: LD_INT 1
77701: ARRAY
77702: PPUSH
77703: LD_VAR 0 2
77707: PUSH
77708: LD_VAR 0 4
77712: ARRAY
77713: PUSH
77714: LD_INT 2
77716: ARRAY
77717: PPUSH
77718: CALL_OW 297
77722: PUSH
77723: LD_VAR 0 5
77727: LESS
77728: IFFALSE 77791
// begin hex := hexes [ i ] ;
77730: LD_ADDR_VAR 0 7
77734: PUSH
77735: LD_VAR 0 2
77739: PUSH
77740: LD_VAR 0 4
77744: ARRAY
77745: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
77746: LD_ADDR_VAR 0 5
77750: PUSH
77751: LD_VAR 0 1
77755: PPUSH
77756: LD_VAR 0 2
77760: PUSH
77761: LD_VAR 0 4
77765: ARRAY
77766: PUSH
77767: LD_INT 1
77769: ARRAY
77770: PPUSH
77771: LD_VAR 0 2
77775: PUSH
77776: LD_VAR 0 4
77780: ARRAY
77781: PUSH
77782: LD_INT 2
77784: ARRAY
77785: PPUSH
77786: CALL_OW 297
77790: ST_TO_ADDR
// end ; end ;
77791: GO 77680
77793: POP
77794: POP
// result := hex ;
77795: LD_ADDR_VAR 0 3
77799: PUSH
77800: LD_VAR 0 7
77804: ST_TO_ADDR
// end ;
77805: LD_VAR 0 3
77809: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
77810: LD_INT 0
77812: PPUSH
77813: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
77814: LD_VAR 0 1
77818: NOT
77819: PUSH
77820: LD_VAR 0 1
77824: PUSH
77825: LD_INT 21
77827: PUSH
77828: LD_INT 2
77830: PUSH
77831: EMPTY
77832: LIST
77833: LIST
77834: PUSH
77835: LD_INT 23
77837: PUSH
77838: LD_INT 2
77840: PUSH
77841: EMPTY
77842: LIST
77843: LIST
77844: PUSH
77845: EMPTY
77846: LIST
77847: LIST
77848: PPUSH
77849: CALL_OW 69
77853: IN
77854: NOT
77855: OR
77856: IFFALSE 77860
// exit ;
77858: GO 77907
// for i = 1 to 3 do
77860: LD_ADDR_VAR 0 3
77864: PUSH
77865: DOUBLE
77866: LD_INT 1
77868: DEC
77869: ST_TO_ADDR
77870: LD_INT 3
77872: PUSH
77873: FOR_TO
77874: IFFALSE 77905
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
77876: LD_VAR 0 1
77880: PPUSH
77881: CALL_OW 250
77885: PPUSH
77886: LD_VAR 0 1
77890: PPUSH
77891: CALL_OW 251
77895: PPUSH
77896: LD_INT 1
77898: PPUSH
77899: CALL_OW 453
77903: GO 77873
77905: POP
77906: POP
// end ;
77907: LD_VAR 0 2
77911: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
77912: LD_INT 0
77914: PPUSH
77915: PPUSH
77916: PPUSH
77917: PPUSH
77918: PPUSH
77919: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
77920: LD_VAR 0 1
77924: NOT
77925: PUSH
77926: LD_VAR 0 2
77930: NOT
77931: OR
77932: PUSH
77933: LD_VAR 0 1
77937: PPUSH
77938: CALL_OW 314
77942: OR
77943: IFFALSE 77947
// exit ;
77945: GO 78388
// x := GetX ( enemy_unit ) ;
77947: LD_ADDR_VAR 0 7
77951: PUSH
77952: LD_VAR 0 2
77956: PPUSH
77957: CALL_OW 250
77961: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
77962: LD_ADDR_VAR 0 8
77966: PUSH
77967: LD_VAR 0 2
77971: PPUSH
77972: CALL_OW 251
77976: ST_TO_ADDR
// if not x or not y then
77977: LD_VAR 0 7
77981: NOT
77982: PUSH
77983: LD_VAR 0 8
77987: NOT
77988: OR
77989: IFFALSE 77993
// exit ;
77991: GO 78388
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
77993: LD_ADDR_VAR 0 6
77997: PUSH
77998: LD_VAR 0 7
78002: PPUSH
78003: LD_INT 0
78005: PPUSH
78006: LD_INT 4
78008: PPUSH
78009: CALL_OW 272
78013: PUSH
78014: LD_VAR 0 8
78018: PPUSH
78019: LD_INT 0
78021: PPUSH
78022: LD_INT 4
78024: PPUSH
78025: CALL_OW 273
78029: PUSH
78030: EMPTY
78031: LIST
78032: LIST
78033: PUSH
78034: LD_VAR 0 7
78038: PPUSH
78039: LD_INT 1
78041: PPUSH
78042: LD_INT 4
78044: PPUSH
78045: CALL_OW 272
78049: PUSH
78050: LD_VAR 0 8
78054: PPUSH
78055: LD_INT 1
78057: PPUSH
78058: LD_INT 4
78060: PPUSH
78061: CALL_OW 273
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: PUSH
78070: LD_VAR 0 7
78074: PPUSH
78075: LD_INT 2
78077: PPUSH
78078: LD_INT 4
78080: PPUSH
78081: CALL_OW 272
78085: PUSH
78086: LD_VAR 0 8
78090: PPUSH
78091: LD_INT 2
78093: PPUSH
78094: LD_INT 4
78096: PPUSH
78097: CALL_OW 273
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: PUSH
78106: LD_VAR 0 7
78110: PPUSH
78111: LD_INT 3
78113: PPUSH
78114: LD_INT 4
78116: PPUSH
78117: CALL_OW 272
78121: PUSH
78122: LD_VAR 0 8
78126: PPUSH
78127: LD_INT 3
78129: PPUSH
78130: LD_INT 4
78132: PPUSH
78133: CALL_OW 273
78137: PUSH
78138: EMPTY
78139: LIST
78140: LIST
78141: PUSH
78142: LD_VAR 0 7
78146: PPUSH
78147: LD_INT 4
78149: PPUSH
78150: LD_INT 4
78152: PPUSH
78153: CALL_OW 272
78157: PUSH
78158: LD_VAR 0 8
78162: PPUSH
78163: LD_INT 4
78165: PPUSH
78166: LD_INT 4
78168: PPUSH
78169: CALL_OW 273
78173: PUSH
78174: EMPTY
78175: LIST
78176: LIST
78177: PUSH
78178: LD_VAR 0 7
78182: PPUSH
78183: LD_INT 5
78185: PPUSH
78186: LD_INT 4
78188: PPUSH
78189: CALL_OW 272
78193: PUSH
78194: LD_VAR 0 8
78198: PPUSH
78199: LD_INT 5
78201: PPUSH
78202: LD_INT 4
78204: PPUSH
78205: CALL_OW 273
78209: PUSH
78210: EMPTY
78211: LIST
78212: LIST
78213: PUSH
78214: EMPTY
78215: LIST
78216: LIST
78217: LIST
78218: LIST
78219: LIST
78220: LIST
78221: ST_TO_ADDR
// for i = tmp downto 1 do
78222: LD_ADDR_VAR 0 4
78226: PUSH
78227: DOUBLE
78228: LD_VAR 0 6
78232: INC
78233: ST_TO_ADDR
78234: LD_INT 1
78236: PUSH
78237: FOR_DOWNTO
78238: IFFALSE 78339
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
78240: LD_VAR 0 6
78244: PUSH
78245: LD_VAR 0 4
78249: ARRAY
78250: PUSH
78251: LD_INT 1
78253: ARRAY
78254: PPUSH
78255: LD_VAR 0 6
78259: PUSH
78260: LD_VAR 0 4
78264: ARRAY
78265: PUSH
78266: LD_INT 2
78268: ARRAY
78269: PPUSH
78270: CALL_OW 488
78274: NOT
78275: PUSH
78276: LD_VAR 0 6
78280: PUSH
78281: LD_VAR 0 4
78285: ARRAY
78286: PUSH
78287: LD_INT 1
78289: ARRAY
78290: PPUSH
78291: LD_VAR 0 6
78295: PUSH
78296: LD_VAR 0 4
78300: ARRAY
78301: PUSH
78302: LD_INT 2
78304: ARRAY
78305: PPUSH
78306: CALL_OW 428
78310: PUSH
78311: LD_INT 0
78313: NONEQUAL
78314: OR
78315: IFFALSE 78337
// tmp := Delete ( tmp , i ) ;
78317: LD_ADDR_VAR 0 6
78321: PUSH
78322: LD_VAR 0 6
78326: PPUSH
78327: LD_VAR 0 4
78331: PPUSH
78332: CALL_OW 3
78336: ST_TO_ADDR
78337: GO 78237
78339: POP
78340: POP
// j := GetClosestHex ( unit , tmp ) ;
78341: LD_ADDR_VAR 0 5
78345: PUSH
78346: LD_VAR 0 1
78350: PPUSH
78351: LD_VAR 0 6
78355: PPUSH
78356: CALL 77641 0 2
78360: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
78361: LD_VAR 0 1
78365: PPUSH
78366: LD_VAR 0 5
78370: PUSH
78371: LD_INT 1
78373: ARRAY
78374: PPUSH
78375: LD_VAR 0 5
78379: PUSH
78380: LD_INT 2
78382: ARRAY
78383: PPUSH
78384: CALL_OW 111
// end ;
78388: LD_VAR 0 3
78392: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
78393: LD_INT 0
78395: PPUSH
78396: PPUSH
78397: PPUSH
// uc_side = 0 ;
78398: LD_ADDR_OWVAR 20
78402: PUSH
78403: LD_INT 0
78405: ST_TO_ADDR
// uc_nation = 0 ;
78406: LD_ADDR_OWVAR 21
78410: PUSH
78411: LD_INT 0
78413: ST_TO_ADDR
// InitHc_All ( ) ;
78414: CALL_OW 584
// InitVc ;
78418: CALL_OW 20
// if mastodonts then
78422: LD_VAR 0 6
78426: IFFALSE 78493
// for i = 1 to mastodonts do
78428: LD_ADDR_VAR 0 11
78432: PUSH
78433: DOUBLE
78434: LD_INT 1
78436: DEC
78437: ST_TO_ADDR
78438: LD_VAR 0 6
78442: PUSH
78443: FOR_TO
78444: IFFALSE 78491
// begin vc_chassis := 31 ;
78446: LD_ADDR_OWVAR 37
78450: PUSH
78451: LD_INT 31
78453: ST_TO_ADDR
// vc_control := control_rider ;
78454: LD_ADDR_OWVAR 38
78458: PUSH
78459: LD_INT 4
78461: ST_TO_ADDR
// animal := CreateVehicle ;
78462: LD_ADDR_VAR 0 12
78466: PUSH
78467: CALL_OW 45
78471: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78472: LD_VAR 0 12
78476: PPUSH
78477: LD_VAR 0 8
78481: PPUSH
78482: LD_INT 0
78484: PPUSH
78485: CALL 80681 0 3
// end ;
78489: GO 78443
78491: POP
78492: POP
// if horses then
78493: LD_VAR 0 5
78497: IFFALSE 78564
// for i = 1 to horses do
78499: LD_ADDR_VAR 0 11
78503: PUSH
78504: DOUBLE
78505: LD_INT 1
78507: DEC
78508: ST_TO_ADDR
78509: LD_VAR 0 5
78513: PUSH
78514: FOR_TO
78515: IFFALSE 78562
// begin hc_class := 21 ;
78517: LD_ADDR_OWVAR 28
78521: PUSH
78522: LD_INT 21
78524: ST_TO_ADDR
// hc_gallery :=  ;
78525: LD_ADDR_OWVAR 33
78529: PUSH
78530: LD_STRING 
78532: ST_TO_ADDR
// animal := CreateHuman ;
78533: LD_ADDR_VAR 0 12
78537: PUSH
78538: CALL_OW 44
78542: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78543: LD_VAR 0 12
78547: PPUSH
78548: LD_VAR 0 8
78552: PPUSH
78553: LD_INT 0
78555: PPUSH
78556: CALL 80681 0 3
// end ;
78560: GO 78514
78562: POP
78563: POP
// if birds then
78564: LD_VAR 0 1
78568: IFFALSE 78635
// for i = 1 to birds do
78570: LD_ADDR_VAR 0 11
78574: PUSH
78575: DOUBLE
78576: LD_INT 1
78578: DEC
78579: ST_TO_ADDR
78580: LD_VAR 0 1
78584: PUSH
78585: FOR_TO
78586: IFFALSE 78633
// begin hc_class = 18 ;
78588: LD_ADDR_OWVAR 28
78592: PUSH
78593: LD_INT 18
78595: ST_TO_ADDR
// hc_gallery =  ;
78596: LD_ADDR_OWVAR 33
78600: PUSH
78601: LD_STRING 
78603: ST_TO_ADDR
// animal := CreateHuman ;
78604: LD_ADDR_VAR 0 12
78608: PUSH
78609: CALL_OW 44
78613: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78614: LD_VAR 0 12
78618: PPUSH
78619: LD_VAR 0 8
78623: PPUSH
78624: LD_INT 0
78626: PPUSH
78627: CALL 80681 0 3
// end ;
78631: GO 78585
78633: POP
78634: POP
// if tigers then
78635: LD_VAR 0 2
78639: IFFALSE 78723
// for i = 1 to tigers do
78641: LD_ADDR_VAR 0 11
78645: PUSH
78646: DOUBLE
78647: LD_INT 1
78649: DEC
78650: ST_TO_ADDR
78651: LD_VAR 0 2
78655: PUSH
78656: FOR_TO
78657: IFFALSE 78721
// begin hc_class = class_tiger ;
78659: LD_ADDR_OWVAR 28
78663: PUSH
78664: LD_INT 14
78666: ST_TO_ADDR
// hc_gallery =  ;
78667: LD_ADDR_OWVAR 33
78671: PUSH
78672: LD_STRING 
78674: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78675: LD_ADDR_OWVAR 35
78679: PUSH
78680: LD_INT 7
78682: NEG
78683: PPUSH
78684: LD_INT 7
78686: PPUSH
78687: CALL_OW 12
78691: ST_TO_ADDR
// animal := CreateHuman ;
78692: LD_ADDR_VAR 0 12
78696: PUSH
78697: CALL_OW 44
78701: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78702: LD_VAR 0 12
78706: PPUSH
78707: LD_VAR 0 8
78711: PPUSH
78712: LD_INT 0
78714: PPUSH
78715: CALL 80681 0 3
// end ;
78719: GO 78656
78721: POP
78722: POP
// if apemans then
78723: LD_VAR 0 3
78727: IFFALSE 78850
// for i = 1 to apemans do
78729: LD_ADDR_VAR 0 11
78733: PUSH
78734: DOUBLE
78735: LD_INT 1
78737: DEC
78738: ST_TO_ADDR
78739: LD_VAR 0 3
78743: PUSH
78744: FOR_TO
78745: IFFALSE 78848
// begin hc_class = class_apeman ;
78747: LD_ADDR_OWVAR 28
78751: PUSH
78752: LD_INT 12
78754: ST_TO_ADDR
// hc_gallery =  ;
78755: LD_ADDR_OWVAR 33
78759: PUSH
78760: LD_STRING 
78762: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78763: LD_ADDR_OWVAR 35
78767: PUSH
78768: LD_INT 2
78770: NEG
78771: PPUSH
78772: LD_INT 2
78774: PPUSH
78775: CALL_OW 12
78779: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78780: LD_ADDR_OWVAR 31
78784: PUSH
78785: LD_INT 1
78787: PPUSH
78788: LD_INT 3
78790: PPUSH
78791: CALL_OW 12
78795: PUSH
78796: LD_INT 1
78798: PPUSH
78799: LD_INT 3
78801: PPUSH
78802: CALL_OW 12
78806: PUSH
78807: LD_INT 0
78809: PUSH
78810: LD_INT 0
78812: PUSH
78813: EMPTY
78814: LIST
78815: LIST
78816: LIST
78817: LIST
78818: ST_TO_ADDR
// animal := CreateHuman ;
78819: LD_ADDR_VAR 0 12
78823: PUSH
78824: CALL_OW 44
78828: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78829: LD_VAR 0 12
78833: PPUSH
78834: LD_VAR 0 8
78838: PPUSH
78839: LD_INT 0
78841: PPUSH
78842: CALL 80681 0 3
// end ;
78846: GO 78744
78848: POP
78849: POP
// if enchidnas then
78850: LD_VAR 0 4
78854: IFFALSE 78921
// for i = 1 to enchidnas do
78856: LD_ADDR_VAR 0 11
78860: PUSH
78861: DOUBLE
78862: LD_INT 1
78864: DEC
78865: ST_TO_ADDR
78866: LD_VAR 0 4
78870: PUSH
78871: FOR_TO
78872: IFFALSE 78919
// begin hc_class = 13 ;
78874: LD_ADDR_OWVAR 28
78878: PUSH
78879: LD_INT 13
78881: ST_TO_ADDR
// hc_gallery =  ;
78882: LD_ADDR_OWVAR 33
78886: PUSH
78887: LD_STRING 
78889: ST_TO_ADDR
// animal := CreateHuman ;
78890: LD_ADDR_VAR 0 12
78894: PUSH
78895: CALL_OW 44
78899: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78900: LD_VAR 0 12
78904: PPUSH
78905: LD_VAR 0 8
78909: PPUSH
78910: LD_INT 0
78912: PPUSH
78913: CALL 80681 0 3
// end ;
78917: GO 78871
78919: POP
78920: POP
// if fishes then
78921: LD_VAR 0 7
78925: IFFALSE 78992
// for i = 1 to fishes do
78927: LD_ADDR_VAR 0 11
78931: PUSH
78932: DOUBLE
78933: LD_INT 1
78935: DEC
78936: ST_TO_ADDR
78937: LD_VAR 0 7
78941: PUSH
78942: FOR_TO
78943: IFFALSE 78990
// begin hc_class = 20 ;
78945: LD_ADDR_OWVAR 28
78949: PUSH
78950: LD_INT 20
78952: ST_TO_ADDR
// hc_gallery =  ;
78953: LD_ADDR_OWVAR 33
78957: PUSH
78958: LD_STRING 
78960: ST_TO_ADDR
// animal := CreateHuman ;
78961: LD_ADDR_VAR 0 12
78965: PUSH
78966: CALL_OW 44
78970: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78971: LD_VAR 0 12
78975: PPUSH
78976: LD_VAR 0 9
78980: PPUSH
78981: LD_INT 0
78983: PPUSH
78984: CALL 80681 0 3
// end ;
78988: GO 78942
78990: POP
78991: POP
// end ;
78992: LD_VAR 0 10
78996: RET
// export function WantHeal ( sci , unit ) ; begin
78997: LD_INT 0
78999: PPUSH
// if GetTaskList ( sci ) > 0 then
79000: LD_VAR 0 1
79004: PPUSH
79005: CALL_OW 437
79009: PUSH
79010: LD_INT 0
79012: GREATER
79013: IFFALSE 79083
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
79015: LD_VAR 0 1
79019: PPUSH
79020: CALL_OW 437
79024: PUSH
79025: LD_INT 1
79027: ARRAY
79028: PUSH
79029: LD_INT 1
79031: ARRAY
79032: PUSH
79033: LD_STRING l
79035: EQUAL
79036: PUSH
79037: LD_VAR 0 1
79041: PPUSH
79042: CALL_OW 437
79046: PUSH
79047: LD_INT 1
79049: ARRAY
79050: PUSH
79051: LD_INT 4
79053: ARRAY
79054: PUSH
79055: LD_VAR 0 2
79059: EQUAL
79060: AND
79061: IFFALSE 79073
// result := true else
79063: LD_ADDR_VAR 0 3
79067: PUSH
79068: LD_INT 1
79070: ST_TO_ADDR
79071: GO 79081
// result := false ;
79073: LD_ADDR_VAR 0 3
79077: PUSH
79078: LD_INT 0
79080: ST_TO_ADDR
// end else
79081: GO 79091
// result := false ;
79083: LD_ADDR_VAR 0 3
79087: PUSH
79088: LD_INT 0
79090: ST_TO_ADDR
// end ;
79091: LD_VAR 0 3
79095: RET
// export function HealTarget ( sci ) ; begin
79096: LD_INT 0
79098: PPUSH
// if not sci then
79099: LD_VAR 0 1
79103: NOT
79104: IFFALSE 79108
// exit ;
79106: GO 79173
// result := 0 ;
79108: LD_ADDR_VAR 0 2
79112: PUSH
79113: LD_INT 0
79115: ST_TO_ADDR
// if GetTaskList ( sci ) then
79116: LD_VAR 0 1
79120: PPUSH
79121: CALL_OW 437
79125: IFFALSE 79173
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
79127: LD_VAR 0 1
79131: PPUSH
79132: CALL_OW 437
79136: PUSH
79137: LD_INT 1
79139: ARRAY
79140: PUSH
79141: LD_INT 1
79143: ARRAY
79144: PUSH
79145: LD_STRING l
79147: EQUAL
79148: IFFALSE 79173
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
79150: LD_ADDR_VAR 0 2
79154: PUSH
79155: LD_VAR 0 1
79159: PPUSH
79160: CALL_OW 437
79164: PUSH
79165: LD_INT 1
79167: ARRAY
79168: PUSH
79169: LD_INT 4
79171: ARRAY
79172: ST_TO_ADDR
// end ;
79173: LD_VAR 0 2
79177: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
79178: LD_INT 0
79180: PPUSH
79181: PPUSH
79182: PPUSH
79183: PPUSH
// if not base_units then
79184: LD_VAR 0 1
79188: NOT
79189: IFFALSE 79193
// exit ;
79191: GO 79280
// result := false ;
79193: LD_ADDR_VAR 0 2
79197: PUSH
79198: LD_INT 0
79200: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
79201: LD_ADDR_VAR 0 5
79205: PUSH
79206: LD_VAR 0 1
79210: PPUSH
79211: LD_INT 21
79213: PUSH
79214: LD_INT 3
79216: PUSH
79217: EMPTY
79218: LIST
79219: LIST
79220: PPUSH
79221: CALL_OW 72
79225: ST_TO_ADDR
// if not tmp then
79226: LD_VAR 0 5
79230: NOT
79231: IFFALSE 79235
// exit ;
79233: GO 79280
// for i in tmp do
79235: LD_ADDR_VAR 0 3
79239: PUSH
79240: LD_VAR 0 5
79244: PUSH
79245: FOR_IN
79246: IFFALSE 79278
// begin result := EnemyInRange ( i , 22 ) ;
79248: LD_ADDR_VAR 0 2
79252: PUSH
79253: LD_VAR 0 3
79257: PPUSH
79258: LD_INT 22
79260: PPUSH
79261: CALL 77516 0 2
79265: ST_TO_ADDR
// if result then
79266: LD_VAR 0 2
79270: IFFALSE 79276
// exit ;
79272: POP
79273: POP
79274: GO 79280
// end ;
79276: GO 79245
79278: POP
79279: POP
// end ;
79280: LD_VAR 0 2
79284: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
79285: LD_INT 0
79287: PPUSH
79288: PPUSH
// if not units then
79289: LD_VAR 0 1
79293: NOT
79294: IFFALSE 79298
// exit ;
79296: GO 79368
// result := [ ] ;
79298: LD_ADDR_VAR 0 3
79302: PUSH
79303: EMPTY
79304: ST_TO_ADDR
// for i in units do
79305: LD_ADDR_VAR 0 4
79309: PUSH
79310: LD_VAR 0 1
79314: PUSH
79315: FOR_IN
79316: IFFALSE 79366
// if GetTag ( i ) = tag then
79318: LD_VAR 0 4
79322: PPUSH
79323: CALL_OW 110
79327: PUSH
79328: LD_VAR 0 2
79332: EQUAL
79333: IFFALSE 79364
// result := Replace ( result , result + 1 , i ) ;
79335: LD_ADDR_VAR 0 3
79339: PUSH
79340: LD_VAR 0 3
79344: PPUSH
79345: LD_VAR 0 3
79349: PUSH
79350: LD_INT 1
79352: PLUS
79353: PPUSH
79354: LD_VAR 0 4
79358: PPUSH
79359: CALL_OW 1
79363: ST_TO_ADDR
79364: GO 79315
79366: POP
79367: POP
// end ;
79368: LD_VAR 0 3
79372: RET
// export function IsDriver ( un ) ; begin
79373: LD_INT 0
79375: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
79376: LD_ADDR_VAR 0 2
79380: PUSH
79381: LD_VAR 0 1
79385: PUSH
79386: LD_INT 55
79388: PUSH
79389: EMPTY
79390: LIST
79391: PPUSH
79392: CALL_OW 69
79396: IN
79397: ST_TO_ADDR
// end ;
79398: LD_VAR 0 2
79402: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
79403: LD_INT 0
79405: PPUSH
79406: PPUSH
// list := [ ] ;
79407: LD_ADDR_VAR 0 5
79411: PUSH
79412: EMPTY
79413: ST_TO_ADDR
// case d of 0 :
79414: LD_VAR 0 3
79418: PUSH
79419: LD_INT 0
79421: DOUBLE
79422: EQUAL
79423: IFTRUE 79427
79425: GO 79560
79427: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
79428: LD_ADDR_VAR 0 5
79432: PUSH
79433: LD_VAR 0 1
79437: PUSH
79438: LD_INT 4
79440: MINUS
79441: PUSH
79442: LD_VAR 0 2
79446: PUSH
79447: LD_INT 4
79449: MINUS
79450: PUSH
79451: LD_INT 2
79453: PUSH
79454: EMPTY
79455: LIST
79456: LIST
79457: LIST
79458: PUSH
79459: LD_VAR 0 1
79463: PUSH
79464: LD_INT 3
79466: MINUS
79467: PUSH
79468: LD_VAR 0 2
79472: PUSH
79473: LD_INT 1
79475: PUSH
79476: EMPTY
79477: LIST
79478: LIST
79479: LIST
79480: PUSH
79481: LD_VAR 0 1
79485: PUSH
79486: LD_INT 4
79488: PLUS
79489: PUSH
79490: LD_VAR 0 2
79494: PUSH
79495: LD_INT 4
79497: PUSH
79498: EMPTY
79499: LIST
79500: LIST
79501: LIST
79502: PUSH
79503: LD_VAR 0 1
79507: PUSH
79508: LD_INT 3
79510: PLUS
79511: PUSH
79512: LD_VAR 0 2
79516: PUSH
79517: LD_INT 3
79519: PLUS
79520: PUSH
79521: LD_INT 5
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: LIST
79528: PUSH
79529: LD_VAR 0 1
79533: PUSH
79534: LD_VAR 0 2
79538: PUSH
79539: LD_INT 4
79541: PLUS
79542: PUSH
79543: LD_INT 0
79545: PUSH
79546: EMPTY
79547: LIST
79548: LIST
79549: LIST
79550: PUSH
79551: EMPTY
79552: LIST
79553: LIST
79554: LIST
79555: LIST
79556: LIST
79557: ST_TO_ADDR
// end ; 1 :
79558: GO 80258
79560: LD_INT 1
79562: DOUBLE
79563: EQUAL
79564: IFTRUE 79568
79566: GO 79701
79568: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
79569: LD_ADDR_VAR 0 5
79573: PUSH
79574: LD_VAR 0 1
79578: PUSH
79579: LD_VAR 0 2
79583: PUSH
79584: LD_INT 4
79586: MINUS
79587: PUSH
79588: LD_INT 3
79590: PUSH
79591: EMPTY
79592: LIST
79593: LIST
79594: LIST
79595: PUSH
79596: LD_VAR 0 1
79600: PUSH
79601: LD_INT 3
79603: MINUS
79604: PUSH
79605: LD_VAR 0 2
79609: PUSH
79610: LD_INT 3
79612: MINUS
79613: PUSH
79614: LD_INT 2
79616: PUSH
79617: EMPTY
79618: LIST
79619: LIST
79620: LIST
79621: PUSH
79622: LD_VAR 0 1
79626: PUSH
79627: LD_INT 4
79629: MINUS
79630: PUSH
79631: LD_VAR 0 2
79635: PUSH
79636: LD_INT 1
79638: PUSH
79639: EMPTY
79640: LIST
79641: LIST
79642: LIST
79643: PUSH
79644: LD_VAR 0 1
79648: PUSH
79649: LD_VAR 0 2
79653: PUSH
79654: LD_INT 3
79656: PLUS
79657: PUSH
79658: LD_INT 0
79660: PUSH
79661: EMPTY
79662: LIST
79663: LIST
79664: LIST
79665: PUSH
79666: LD_VAR 0 1
79670: PUSH
79671: LD_INT 4
79673: PLUS
79674: PUSH
79675: LD_VAR 0 2
79679: PUSH
79680: LD_INT 4
79682: PLUS
79683: PUSH
79684: LD_INT 5
79686: PUSH
79687: EMPTY
79688: LIST
79689: LIST
79690: LIST
79691: PUSH
79692: EMPTY
79693: LIST
79694: LIST
79695: LIST
79696: LIST
79697: LIST
79698: ST_TO_ADDR
// end ; 2 :
79699: GO 80258
79701: LD_INT 2
79703: DOUBLE
79704: EQUAL
79705: IFTRUE 79709
79707: GO 79838
79709: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79710: LD_ADDR_VAR 0 5
79714: PUSH
79715: LD_VAR 0 1
79719: PUSH
79720: LD_VAR 0 2
79724: PUSH
79725: LD_INT 3
79727: MINUS
79728: PUSH
79729: LD_INT 3
79731: PUSH
79732: EMPTY
79733: LIST
79734: LIST
79735: LIST
79736: PUSH
79737: LD_VAR 0 1
79741: PUSH
79742: LD_INT 4
79744: PLUS
79745: PUSH
79746: LD_VAR 0 2
79750: PUSH
79751: LD_INT 4
79753: PUSH
79754: EMPTY
79755: LIST
79756: LIST
79757: LIST
79758: PUSH
79759: LD_VAR 0 1
79763: PUSH
79764: LD_VAR 0 2
79768: PUSH
79769: LD_INT 4
79771: PLUS
79772: PUSH
79773: LD_INT 0
79775: PUSH
79776: EMPTY
79777: LIST
79778: LIST
79779: LIST
79780: PUSH
79781: LD_VAR 0 1
79785: PUSH
79786: LD_INT 3
79788: MINUS
79789: PUSH
79790: LD_VAR 0 2
79794: PUSH
79795: LD_INT 1
79797: PUSH
79798: EMPTY
79799: LIST
79800: LIST
79801: LIST
79802: PUSH
79803: LD_VAR 0 1
79807: PUSH
79808: LD_INT 4
79810: MINUS
79811: PUSH
79812: LD_VAR 0 2
79816: PUSH
79817: LD_INT 4
79819: MINUS
79820: PUSH
79821: LD_INT 2
79823: PUSH
79824: EMPTY
79825: LIST
79826: LIST
79827: LIST
79828: PUSH
79829: EMPTY
79830: LIST
79831: LIST
79832: LIST
79833: LIST
79834: LIST
79835: ST_TO_ADDR
// end ; 3 :
79836: GO 80258
79838: LD_INT 3
79840: DOUBLE
79841: EQUAL
79842: IFTRUE 79846
79844: GO 79979
79846: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79847: LD_ADDR_VAR 0 5
79851: PUSH
79852: LD_VAR 0 1
79856: PUSH
79857: LD_INT 3
79859: PLUS
79860: PUSH
79861: LD_VAR 0 2
79865: PUSH
79866: LD_INT 4
79868: PUSH
79869: EMPTY
79870: LIST
79871: LIST
79872: LIST
79873: PUSH
79874: LD_VAR 0 1
79878: PUSH
79879: LD_INT 4
79881: PLUS
79882: PUSH
79883: LD_VAR 0 2
79887: PUSH
79888: LD_INT 4
79890: PLUS
79891: PUSH
79892: LD_INT 5
79894: PUSH
79895: EMPTY
79896: LIST
79897: LIST
79898: LIST
79899: PUSH
79900: LD_VAR 0 1
79904: PUSH
79905: LD_INT 4
79907: MINUS
79908: PUSH
79909: LD_VAR 0 2
79913: PUSH
79914: LD_INT 1
79916: PUSH
79917: EMPTY
79918: LIST
79919: LIST
79920: LIST
79921: PUSH
79922: LD_VAR 0 1
79926: PUSH
79927: LD_VAR 0 2
79931: PUSH
79932: LD_INT 4
79934: MINUS
79935: PUSH
79936: LD_INT 3
79938: PUSH
79939: EMPTY
79940: LIST
79941: LIST
79942: LIST
79943: PUSH
79944: LD_VAR 0 1
79948: PUSH
79949: LD_INT 3
79951: MINUS
79952: PUSH
79953: LD_VAR 0 2
79957: PUSH
79958: LD_INT 3
79960: MINUS
79961: PUSH
79962: LD_INT 2
79964: PUSH
79965: EMPTY
79966: LIST
79967: LIST
79968: LIST
79969: PUSH
79970: EMPTY
79971: LIST
79972: LIST
79973: LIST
79974: LIST
79975: LIST
79976: ST_TO_ADDR
// end ; 4 :
79977: GO 80258
79979: LD_INT 4
79981: DOUBLE
79982: EQUAL
79983: IFTRUE 79987
79985: GO 80120
79987: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79988: LD_ADDR_VAR 0 5
79992: PUSH
79993: LD_VAR 0 1
79997: PUSH
79998: LD_VAR 0 2
80002: PUSH
80003: LD_INT 4
80005: PLUS
80006: PUSH
80007: LD_INT 0
80009: PUSH
80010: EMPTY
80011: LIST
80012: LIST
80013: LIST
80014: PUSH
80015: LD_VAR 0 1
80019: PUSH
80020: LD_INT 3
80022: PLUS
80023: PUSH
80024: LD_VAR 0 2
80028: PUSH
80029: LD_INT 3
80031: PLUS
80032: PUSH
80033: LD_INT 5
80035: PUSH
80036: EMPTY
80037: LIST
80038: LIST
80039: LIST
80040: PUSH
80041: LD_VAR 0 1
80045: PUSH
80046: LD_INT 4
80048: PLUS
80049: PUSH
80050: LD_VAR 0 2
80054: PUSH
80055: LD_INT 4
80057: PUSH
80058: EMPTY
80059: LIST
80060: LIST
80061: LIST
80062: PUSH
80063: LD_VAR 0 1
80067: PUSH
80068: LD_VAR 0 2
80072: PUSH
80073: LD_INT 3
80075: MINUS
80076: PUSH
80077: LD_INT 3
80079: PUSH
80080: EMPTY
80081: LIST
80082: LIST
80083: LIST
80084: PUSH
80085: LD_VAR 0 1
80089: PUSH
80090: LD_INT 4
80092: MINUS
80093: PUSH
80094: LD_VAR 0 2
80098: PUSH
80099: LD_INT 4
80101: MINUS
80102: PUSH
80103: LD_INT 2
80105: PUSH
80106: EMPTY
80107: LIST
80108: LIST
80109: LIST
80110: PUSH
80111: EMPTY
80112: LIST
80113: LIST
80114: LIST
80115: LIST
80116: LIST
80117: ST_TO_ADDR
// end ; 5 :
80118: GO 80258
80120: LD_INT 5
80122: DOUBLE
80123: EQUAL
80124: IFTRUE 80128
80126: GO 80257
80128: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
80129: LD_ADDR_VAR 0 5
80133: PUSH
80134: LD_VAR 0 1
80138: PUSH
80139: LD_INT 4
80141: MINUS
80142: PUSH
80143: LD_VAR 0 2
80147: PUSH
80148: LD_INT 1
80150: PUSH
80151: EMPTY
80152: LIST
80153: LIST
80154: LIST
80155: PUSH
80156: LD_VAR 0 1
80160: PUSH
80161: LD_VAR 0 2
80165: PUSH
80166: LD_INT 4
80168: MINUS
80169: PUSH
80170: LD_INT 3
80172: PUSH
80173: EMPTY
80174: LIST
80175: LIST
80176: LIST
80177: PUSH
80178: LD_VAR 0 1
80182: PUSH
80183: LD_INT 4
80185: PLUS
80186: PUSH
80187: LD_VAR 0 2
80191: PUSH
80192: LD_INT 4
80194: PLUS
80195: PUSH
80196: LD_INT 5
80198: PUSH
80199: EMPTY
80200: LIST
80201: LIST
80202: LIST
80203: PUSH
80204: LD_VAR 0 1
80208: PUSH
80209: LD_INT 3
80211: PLUS
80212: PUSH
80213: LD_VAR 0 2
80217: PUSH
80218: LD_INT 4
80220: PUSH
80221: EMPTY
80222: LIST
80223: LIST
80224: LIST
80225: PUSH
80226: LD_VAR 0 1
80230: PUSH
80231: LD_VAR 0 2
80235: PUSH
80236: LD_INT 3
80238: PLUS
80239: PUSH
80240: LD_INT 0
80242: PUSH
80243: EMPTY
80244: LIST
80245: LIST
80246: LIST
80247: PUSH
80248: EMPTY
80249: LIST
80250: LIST
80251: LIST
80252: LIST
80253: LIST
80254: ST_TO_ADDR
// end ; end ;
80255: GO 80258
80257: POP
// result := list ;
80258: LD_ADDR_VAR 0 4
80262: PUSH
80263: LD_VAR 0 5
80267: ST_TO_ADDR
// end ;
80268: LD_VAR 0 4
80272: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
80273: LD_INT 0
80275: PPUSH
80276: PPUSH
80277: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
80278: LD_VAR 0 1
80282: NOT
80283: PUSH
80284: LD_VAR 0 2
80288: PUSH
80289: LD_INT 1
80291: PUSH
80292: LD_INT 2
80294: PUSH
80295: LD_INT 3
80297: PUSH
80298: LD_INT 4
80300: PUSH
80301: EMPTY
80302: LIST
80303: LIST
80304: LIST
80305: LIST
80306: IN
80307: NOT
80308: OR
80309: IFFALSE 80313
// exit ;
80311: GO 80405
// tmp := [ ] ;
80313: LD_ADDR_VAR 0 5
80317: PUSH
80318: EMPTY
80319: ST_TO_ADDR
// for i in units do
80320: LD_ADDR_VAR 0 4
80324: PUSH
80325: LD_VAR 0 1
80329: PUSH
80330: FOR_IN
80331: IFFALSE 80374
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
80333: LD_ADDR_VAR 0 5
80337: PUSH
80338: LD_VAR 0 5
80342: PPUSH
80343: LD_VAR 0 5
80347: PUSH
80348: LD_INT 1
80350: PLUS
80351: PPUSH
80352: LD_VAR 0 4
80356: PPUSH
80357: LD_VAR 0 2
80361: PPUSH
80362: CALL_OW 259
80366: PPUSH
80367: CALL_OW 2
80371: ST_TO_ADDR
80372: GO 80330
80374: POP
80375: POP
// if not tmp then
80376: LD_VAR 0 5
80380: NOT
80381: IFFALSE 80385
// exit ;
80383: GO 80405
// result := SortListByListDesc ( units , tmp ) ;
80385: LD_ADDR_VAR 0 3
80389: PUSH
80390: LD_VAR 0 1
80394: PPUSH
80395: LD_VAR 0 5
80399: PPUSH
80400: CALL_OW 77
80404: ST_TO_ADDR
// end ;
80405: LD_VAR 0 3
80409: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
80410: LD_INT 0
80412: PPUSH
80413: PPUSH
80414: PPUSH
// result := false ;
80415: LD_ADDR_VAR 0 3
80419: PUSH
80420: LD_INT 0
80422: ST_TO_ADDR
// x := GetX ( building ) ;
80423: LD_ADDR_VAR 0 4
80427: PUSH
80428: LD_VAR 0 2
80432: PPUSH
80433: CALL_OW 250
80437: ST_TO_ADDR
// y := GetY ( building ) ;
80438: LD_ADDR_VAR 0 5
80442: PUSH
80443: LD_VAR 0 2
80447: PPUSH
80448: CALL_OW 251
80452: ST_TO_ADDR
// if not building or not x or not y then
80453: LD_VAR 0 2
80457: NOT
80458: PUSH
80459: LD_VAR 0 4
80463: NOT
80464: OR
80465: PUSH
80466: LD_VAR 0 5
80470: NOT
80471: OR
80472: IFFALSE 80476
// exit ;
80474: GO 80568
// if GetTaskList ( unit ) then
80476: LD_VAR 0 1
80480: PPUSH
80481: CALL_OW 437
80485: IFFALSE 80568
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80487: LD_STRING e
80489: PUSH
80490: LD_VAR 0 1
80494: PPUSH
80495: CALL_OW 437
80499: PUSH
80500: LD_INT 1
80502: ARRAY
80503: PUSH
80504: LD_INT 1
80506: ARRAY
80507: EQUAL
80508: PUSH
80509: LD_VAR 0 4
80513: PUSH
80514: LD_VAR 0 1
80518: PPUSH
80519: CALL_OW 437
80523: PUSH
80524: LD_INT 1
80526: ARRAY
80527: PUSH
80528: LD_INT 2
80530: ARRAY
80531: EQUAL
80532: AND
80533: PUSH
80534: LD_VAR 0 5
80538: PUSH
80539: LD_VAR 0 1
80543: PPUSH
80544: CALL_OW 437
80548: PUSH
80549: LD_INT 1
80551: ARRAY
80552: PUSH
80553: LD_INT 3
80555: ARRAY
80556: EQUAL
80557: AND
80558: IFFALSE 80568
// result := true end ;
80560: LD_ADDR_VAR 0 3
80564: PUSH
80565: LD_INT 1
80567: ST_TO_ADDR
// end ;
80568: LD_VAR 0 3
80572: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
80573: LD_INT 0
80575: PPUSH
// result := false ;
80576: LD_ADDR_VAR 0 4
80580: PUSH
80581: LD_INT 0
80583: ST_TO_ADDR
// if GetTaskList ( unit ) then
80584: LD_VAR 0 1
80588: PPUSH
80589: CALL_OW 437
80593: IFFALSE 80676
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80595: LD_STRING M
80597: PUSH
80598: LD_VAR 0 1
80602: PPUSH
80603: CALL_OW 437
80607: PUSH
80608: LD_INT 1
80610: ARRAY
80611: PUSH
80612: LD_INT 1
80614: ARRAY
80615: EQUAL
80616: PUSH
80617: LD_VAR 0 2
80621: PUSH
80622: LD_VAR 0 1
80626: PPUSH
80627: CALL_OW 437
80631: PUSH
80632: LD_INT 1
80634: ARRAY
80635: PUSH
80636: LD_INT 2
80638: ARRAY
80639: EQUAL
80640: AND
80641: PUSH
80642: LD_VAR 0 3
80646: PUSH
80647: LD_VAR 0 1
80651: PPUSH
80652: CALL_OW 437
80656: PUSH
80657: LD_INT 1
80659: ARRAY
80660: PUSH
80661: LD_INT 3
80663: ARRAY
80664: EQUAL
80665: AND
80666: IFFALSE 80676
// result := true ;
80668: LD_ADDR_VAR 0 4
80672: PUSH
80673: LD_INT 1
80675: ST_TO_ADDR
// end ; end ;
80676: LD_VAR 0 4
80680: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80681: LD_INT 0
80683: PPUSH
80684: PPUSH
80685: PPUSH
80686: PPUSH
// if not unit or not area then
80687: LD_VAR 0 1
80691: NOT
80692: PUSH
80693: LD_VAR 0 2
80697: NOT
80698: OR
80699: IFFALSE 80703
// exit ;
80701: GO 80867
// tmp := AreaToList ( area , i ) ;
80703: LD_ADDR_VAR 0 6
80707: PUSH
80708: LD_VAR 0 2
80712: PPUSH
80713: LD_VAR 0 5
80717: PPUSH
80718: CALL_OW 517
80722: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80723: LD_ADDR_VAR 0 5
80727: PUSH
80728: DOUBLE
80729: LD_INT 1
80731: DEC
80732: ST_TO_ADDR
80733: LD_VAR 0 6
80737: PUSH
80738: LD_INT 1
80740: ARRAY
80741: PUSH
80742: FOR_TO
80743: IFFALSE 80865
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80745: LD_ADDR_VAR 0 7
80749: PUSH
80750: LD_VAR 0 6
80754: PUSH
80755: LD_INT 1
80757: ARRAY
80758: PUSH
80759: LD_VAR 0 5
80763: ARRAY
80764: PUSH
80765: LD_VAR 0 6
80769: PUSH
80770: LD_INT 2
80772: ARRAY
80773: PUSH
80774: LD_VAR 0 5
80778: ARRAY
80779: PUSH
80780: EMPTY
80781: LIST
80782: LIST
80783: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
80784: LD_VAR 0 7
80788: PUSH
80789: LD_INT 1
80791: ARRAY
80792: PPUSH
80793: LD_VAR 0 7
80797: PUSH
80798: LD_INT 2
80800: ARRAY
80801: PPUSH
80802: CALL_OW 428
80806: PUSH
80807: LD_INT 0
80809: EQUAL
80810: IFFALSE 80863
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80812: LD_VAR 0 1
80816: PPUSH
80817: LD_VAR 0 7
80821: PUSH
80822: LD_INT 1
80824: ARRAY
80825: PPUSH
80826: LD_VAR 0 7
80830: PUSH
80831: LD_INT 2
80833: ARRAY
80834: PPUSH
80835: LD_VAR 0 3
80839: PPUSH
80840: CALL_OW 48
// result := IsPlaced ( unit ) ;
80844: LD_ADDR_VAR 0 4
80848: PUSH
80849: LD_VAR 0 1
80853: PPUSH
80854: CALL_OW 305
80858: ST_TO_ADDR
// exit ;
80859: POP
80860: POP
80861: GO 80867
// end ; end ;
80863: GO 80742
80865: POP
80866: POP
// end ;
80867: LD_VAR 0 4
80871: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80872: LD_INT 0
80874: PPUSH
80875: PPUSH
80876: PPUSH
// if not side or side > 8 then
80877: LD_VAR 0 1
80881: NOT
80882: PUSH
80883: LD_VAR 0 1
80887: PUSH
80888: LD_INT 8
80890: GREATER
80891: OR
80892: IFFALSE 80896
// exit ;
80894: GO 81083
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80896: LD_ADDR_VAR 0 4
80900: PUSH
80901: LD_INT 22
80903: PUSH
80904: LD_VAR 0 1
80908: PUSH
80909: EMPTY
80910: LIST
80911: LIST
80912: PUSH
80913: LD_INT 21
80915: PUSH
80916: LD_INT 3
80918: PUSH
80919: EMPTY
80920: LIST
80921: LIST
80922: PUSH
80923: EMPTY
80924: LIST
80925: LIST
80926: PPUSH
80927: CALL_OW 69
80931: ST_TO_ADDR
// if not tmp then
80932: LD_VAR 0 4
80936: NOT
80937: IFFALSE 80941
// exit ;
80939: GO 81083
// enable_addtolog := true ;
80941: LD_ADDR_OWVAR 81
80945: PUSH
80946: LD_INT 1
80948: ST_TO_ADDR
// AddToLog ( [ ) ;
80949: LD_STRING [
80951: PPUSH
80952: CALL_OW 561
// for i in tmp do
80956: LD_ADDR_VAR 0 3
80960: PUSH
80961: LD_VAR 0 4
80965: PUSH
80966: FOR_IN
80967: IFFALSE 81074
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80969: LD_STRING [
80971: PUSH
80972: LD_VAR 0 3
80976: PPUSH
80977: CALL_OW 266
80981: STR
80982: PUSH
80983: LD_STRING , 
80985: STR
80986: PUSH
80987: LD_VAR 0 3
80991: PPUSH
80992: CALL_OW 250
80996: STR
80997: PUSH
80998: LD_STRING , 
81000: STR
81001: PUSH
81002: LD_VAR 0 3
81006: PPUSH
81007: CALL_OW 251
81011: STR
81012: PUSH
81013: LD_STRING , 
81015: STR
81016: PUSH
81017: LD_VAR 0 3
81021: PPUSH
81022: CALL_OW 254
81026: STR
81027: PUSH
81028: LD_STRING , 
81030: STR
81031: PUSH
81032: LD_VAR 0 3
81036: PPUSH
81037: LD_INT 1
81039: PPUSH
81040: CALL_OW 268
81044: STR
81045: PUSH
81046: LD_STRING , 
81048: STR
81049: PUSH
81050: LD_VAR 0 3
81054: PPUSH
81055: LD_INT 2
81057: PPUSH
81058: CALL_OW 268
81062: STR
81063: PUSH
81064: LD_STRING ],
81066: STR
81067: PPUSH
81068: CALL_OW 561
// end ;
81072: GO 80966
81074: POP
81075: POP
// AddToLog ( ]; ) ;
81076: LD_STRING ];
81078: PPUSH
81079: CALL_OW 561
// end ;
81083: LD_VAR 0 2
81087: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
81088: LD_INT 0
81090: PPUSH
81091: PPUSH
81092: PPUSH
81093: PPUSH
81094: PPUSH
// if not area or not rate or not max then
81095: LD_VAR 0 1
81099: NOT
81100: PUSH
81101: LD_VAR 0 2
81105: NOT
81106: OR
81107: PUSH
81108: LD_VAR 0 4
81112: NOT
81113: OR
81114: IFFALSE 81118
// exit ;
81116: GO 81310
// while 1 do
81118: LD_INT 1
81120: IFFALSE 81310
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
81122: LD_ADDR_VAR 0 9
81126: PUSH
81127: LD_VAR 0 1
81131: PPUSH
81132: LD_INT 1
81134: PPUSH
81135: CALL_OW 287
81139: PUSH
81140: LD_INT 10
81142: MUL
81143: ST_TO_ADDR
// r := rate / 10 ;
81144: LD_ADDR_VAR 0 7
81148: PUSH
81149: LD_VAR 0 2
81153: PUSH
81154: LD_INT 10
81156: DIVREAL
81157: ST_TO_ADDR
// time := 1 1$00 ;
81158: LD_ADDR_VAR 0 8
81162: PUSH
81163: LD_INT 2100
81165: ST_TO_ADDR
// if amount < min then
81166: LD_VAR 0 9
81170: PUSH
81171: LD_VAR 0 3
81175: LESS
81176: IFFALSE 81194
// r := r * 2 else
81178: LD_ADDR_VAR 0 7
81182: PUSH
81183: LD_VAR 0 7
81187: PUSH
81188: LD_INT 2
81190: MUL
81191: ST_TO_ADDR
81192: GO 81220
// if amount > max then
81194: LD_VAR 0 9
81198: PUSH
81199: LD_VAR 0 4
81203: GREATER
81204: IFFALSE 81220
// r := r / 2 ;
81206: LD_ADDR_VAR 0 7
81210: PUSH
81211: LD_VAR 0 7
81215: PUSH
81216: LD_INT 2
81218: DIVREAL
81219: ST_TO_ADDR
// time := time / r ;
81220: LD_ADDR_VAR 0 8
81224: PUSH
81225: LD_VAR 0 8
81229: PUSH
81230: LD_VAR 0 7
81234: DIVREAL
81235: ST_TO_ADDR
// if time < 0 then
81236: LD_VAR 0 8
81240: PUSH
81241: LD_INT 0
81243: LESS
81244: IFFALSE 81261
// time := time * - 1 ;
81246: LD_ADDR_VAR 0 8
81250: PUSH
81251: LD_VAR 0 8
81255: PUSH
81256: LD_INT 1
81258: NEG
81259: MUL
81260: ST_TO_ADDR
// wait ( time ) ;
81261: LD_VAR 0 8
81265: PPUSH
81266: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
81270: LD_INT 35
81272: PPUSH
81273: LD_INT 875
81275: PPUSH
81276: CALL_OW 12
81280: PPUSH
81281: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
81285: LD_INT 1
81287: PPUSH
81288: LD_INT 5
81290: PPUSH
81291: CALL_OW 12
81295: PPUSH
81296: LD_VAR 0 1
81300: PPUSH
81301: LD_INT 1
81303: PPUSH
81304: CALL_OW 55
// end ;
81308: GO 81118
// end ;
81310: LD_VAR 0 5
81314: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
81315: LD_INT 0
81317: PPUSH
81318: PPUSH
81319: PPUSH
81320: PPUSH
81321: PPUSH
81322: PPUSH
81323: PPUSH
81324: PPUSH
// if not turrets or not factories then
81325: LD_VAR 0 1
81329: NOT
81330: PUSH
81331: LD_VAR 0 2
81335: NOT
81336: OR
81337: IFFALSE 81341
// exit ;
81339: GO 81648
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
81341: LD_ADDR_VAR 0 10
81345: PUSH
81346: LD_INT 5
81348: PUSH
81349: LD_INT 6
81351: PUSH
81352: EMPTY
81353: LIST
81354: LIST
81355: PUSH
81356: LD_INT 2
81358: PUSH
81359: LD_INT 4
81361: PUSH
81362: EMPTY
81363: LIST
81364: LIST
81365: PUSH
81366: LD_INT 3
81368: PUSH
81369: LD_INT 5
81371: PUSH
81372: EMPTY
81373: LIST
81374: LIST
81375: PUSH
81376: EMPTY
81377: LIST
81378: LIST
81379: LIST
81380: PUSH
81381: LD_INT 24
81383: PUSH
81384: LD_INT 25
81386: PUSH
81387: EMPTY
81388: LIST
81389: LIST
81390: PUSH
81391: LD_INT 23
81393: PUSH
81394: LD_INT 27
81396: PUSH
81397: EMPTY
81398: LIST
81399: LIST
81400: PUSH
81401: EMPTY
81402: LIST
81403: LIST
81404: PUSH
81405: LD_INT 42
81407: PUSH
81408: LD_INT 43
81410: PUSH
81411: EMPTY
81412: LIST
81413: LIST
81414: PUSH
81415: LD_INT 44
81417: PUSH
81418: LD_INT 46
81420: PUSH
81421: EMPTY
81422: LIST
81423: LIST
81424: PUSH
81425: LD_INT 45
81427: PUSH
81428: LD_INT 47
81430: PUSH
81431: EMPTY
81432: LIST
81433: LIST
81434: PUSH
81435: EMPTY
81436: LIST
81437: LIST
81438: LIST
81439: PUSH
81440: EMPTY
81441: LIST
81442: LIST
81443: LIST
81444: ST_TO_ADDR
// result := [ ] ;
81445: LD_ADDR_VAR 0 3
81449: PUSH
81450: EMPTY
81451: ST_TO_ADDR
// for i in turrets do
81452: LD_ADDR_VAR 0 4
81456: PUSH
81457: LD_VAR 0 1
81461: PUSH
81462: FOR_IN
81463: IFFALSE 81646
// begin nat := GetNation ( i ) ;
81465: LD_ADDR_VAR 0 7
81469: PUSH
81470: LD_VAR 0 4
81474: PPUSH
81475: CALL_OW 248
81479: ST_TO_ADDR
// weapon := 0 ;
81480: LD_ADDR_VAR 0 8
81484: PUSH
81485: LD_INT 0
81487: ST_TO_ADDR
// if not nat then
81488: LD_VAR 0 7
81492: NOT
81493: IFFALSE 81497
// continue ;
81495: GO 81462
// for j in list [ nat ] do
81497: LD_ADDR_VAR 0 5
81501: PUSH
81502: LD_VAR 0 10
81506: PUSH
81507: LD_VAR 0 7
81511: ARRAY
81512: PUSH
81513: FOR_IN
81514: IFFALSE 81555
// if GetBWeapon ( i ) = j [ 1 ] then
81516: LD_VAR 0 4
81520: PPUSH
81521: CALL_OW 269
81525: PUSH
81526: LD_VAR 0 5
81530: PUSH
81531: LD_INT 1
81533: ARRAY
81534: EQUAL
81535: IFFALSE 81553
// begin weapon := j [ 2 ] ;
81537: LD_ADDR_VAR 0 8
81541: PUSH
81542: LD_VAR 0 5
81546: PUSH
81547: LD_INT 2
81549: ARRAY
81550: ST_TO_ADDR
// break ;
81551: GO 81555
// end ;
81553: GO 81513
81555: POP
81556: POP
// if not weapon then
81557: LD_VAR 0 8
81561: NOT
81562: IFFALSE 81566
// continue ;
81564: GO 81462
// for k in factories do
81566: LD_ADDR_VAR 0 6
81570: PUSH
81571: LD_VAR 0 2
81575: PUSH
81576: FOR_IN
81577: IFFALSE 81642
// begin weapons := AvailableWeaponList ( k ) ;
81579: LD_ADDR_VAR 0 9
81583: PUSH
81584: LD_VAR 0 6
81588: PPUSH
81589: CALL_OW 478
81593: ST_TO_ADDR
// if not weapons then
81594: LD_VAR 0 9
81598: NOT
81599: IFFALSE 81603
// continue ;
81601: GO 81576
// if weapon in weapons then
81603: LD_VAR 0 8
81607: PUSH
81608: LD_VAR 0 9
81612: IN
81613: IFFALSE 81640
// begin result := [ i , weapon ] ;
81615: LD_ADDR_VAR 0 3
81619: PUSH
81620: LD_VAR 0 4
81624: PUSH
81625: LD_VAR 0 8
81629: PUSH
81630: EMPTY
81631: LIST
81632: LIST
81633: ST_TO_ADDR
// exit ;
81634: POP
81635: POP
81636: POP
81637: POP
81638: GO 81648
// end ; end ;
81640: GO 81576
81642: POP
81643: POP
// end ;
81644: GO 81462
81646: POP
81647: POP
// end ;
81648: LD_VAR 0 3
81652: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
81653: LD_INT 0
81655: PPUSH
// if not side or side > 8 then
81656: LD_VAR 0 3
81660: NOT
81661: PUSH
81662: LD_VAR 0 3
81666: PUSH
81667: LD_INT 8
81669: GREATER
81670: OR
81671: IFFALSE 81675
// exit ;
81673: GO 81734
// if not range then
81675: LD_VAR 0 4
81679: NOT
81680: IFFALSE 81691
// range := - 12 ;
81682: LD_ADDR_VAR 0 4
81686: PUSH
81687: LD_INT 12
81689: NEG
81690: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81691: LD_VAR 0 1
81695: PPUSH
81696: LD_VAR 0 2
81700: PPUSH
81701: LD_VAR 0 3
81705: PPUSH
81706: LD_VAR 0 4
81710: PPUSH
81711: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81715: LD_VAR 0 1
81719: PPUSH
81720: LD_VAR 0 2
81724: PPUSH
81725: LD_VAR 0 3
81729: PPUSH
81730: CALL_OW 331
// end ;
81734: LD_VAR 0 5
81738: RET
// export function Video ( mode ) ; begin
81739: LD_INT 0
81741: PPUSH
// ingame_video = mode ;
81742: LD_ADDR_OWVAR 52
81746: PUSH
81747: LD_VAR 0 1
81751: ST_TO_ADDR
// interface_hidden = mode ;
81752: LD_ADDR_OWVAR 54
81756: PUSH
81757: LD_VAR 0 1
81761: ST_TO_ADDR
// end ;
81762: LD_VAR 0 2
81766: RET
// export function Join ( array , element ) ; begin
81767: LD_INT 0
81769: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81770: LD_ADDR_VAR 0 3
81774: PUSH
81775: LD_VAR 0 1
81779: PPUSH
81780: LD_VAR 0 1
81784: PUSH
81785: LD_INT 1
81787: PLUS
81788: PPUSH
81789: LD_VAR 0 2
81793: PPUSH
81794: CALL_OW 1
81798: ST_TO_ADDR
// end ;
81799: LD_VAR 0 3
81803: RET
// export function JoinUnion ( array , element ) ; begin
81804: LD_INT 0
81806: PPUSH
// result := array union element ;
81807: LD_ADDR_VAR 0 3
81811: PUSH
81812: LD_VAR 0 1
81816: PUSH
81817: LD_VAR 0 2
81821: UNION
81822: ST_TO_ADDR
// end ;
81823: LD_VAR 0 3
81827: RET
// export function GetBehemoths ( side ) ; begin
81828: LD_INT 0
81830: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
81831: LD_ADDR_VAR 0 2
81835: PUSH
81836: LD_INT 22
81838: PUSH
81839: LD_VAR 0 1
81843: PUSH
81844: EMPTY
81845: LIST
81846: LIST
81847: PUSH
81848: LD_INT 31
81850: PUSH
81851: LD_INT 25
81853: PUSH
81854: EMPTY
81855: LIST
81856: LIST
81857: PUSH
81858: EMPTY
81859: LIST
81860: LIST
81861: PPUSH
81862: CALL_OW 69
81866: ST_TO_ADDR
// end ;
81867: LD_VAR 0 2
81871: RET
// export function Shuffle ( array ) ; var i , index ; begin
81872: LD_INT 0
81874: PPUSH
81875: PPUSH
81876: PPUSH
// result := [ ] ;
81877: LD_ADDR_VAR 0 2
81881: PUSH
81882: EMPTY
81883: ST_TO_ADDR
// if not array then
81884: LD_VAR 0 1
81888: NOT
81889: IFFALSE 81893
// exit ;
81891: GO 81992
// Randomize ;
81893: CALL_OW 10
// for i = array downto 1 do
81897: LD_ADDR_VAR 0 3
81901: PUSH
81902: DOUBLE
81903: LD_VAR 0 1
81907: INC
81908: ST_TO_ADDR
81909: LD_INT 1
81911: PUSH
81912: FOR_DOWNTO
81913: IFFALSE 81990
// begin index := rand ( 1 , array ) ;
81915: LD_ADDR_VAR 0 4
81919: PUSH
81920: LD_INT 1
81922: PPUSH
81923: LD_VAR 0 1
81927: PPUSH
81928: CALL_OW 12
81932: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81933: LD_ADDR_VAR 0 2
81937: PUSH
81938: LD_VAR 0 2
81942: PPUSH
81943: LD_VAR 0 2
81947: PUSH
81948: LD_INT 1
81950: PLUS
81951: PPUSH
81952: LD_VAR 0 1
81956: PUSH
81957: LD_VAR 0 4
81961: ARRAY
81962: PPUSH
81963: CALL_OW 2
81967: ST_TO_ADDR
// array := Delete ( array , index ) ;
81968: LD_ADDR_VAR 0 1
81972: PUSH
81973: LD_VAR 0 1
81977: PPUSH
81978: LD_VAR 0 4
81982: PPUSH
81983: CALL_OW 3
81987: ST_TO_ADDR
// end ;
81988: GO 81912
81990: POP
81991: POP
// end ;
81992: LD_VAR 0 2
81996: RET
// export function GetBaseMaterials ( base ) ; begin
81997: LD_INT 0
81999: PPUSH
// result := [ 0 , 0 , 0 ] ;
82000: LD_ADDR_VAR 0 2
82004: PUSH
82005: LD_INT 0
82007: PUSH
82008: LD_INT 0
82010: PUSH
82011: LD_INT 0
82013: PUSH
82014: EMPTY
82015: LIST
82016: LIST
82017: LIST
82018: ST_TO_ADDR
// if not base then
82019: LD_VAR 0 1
82023: NOT
82024: IFFALSE 82028
// exit ;
82026: GO 82077
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
82028: LD_ADDR_VAR 0 2
82032: PUSH
82033: LD_VAR 0 1
82037: PPUSH
82038: LD_INT 1
82040: PPUSH
82041: CALL_OW 275
82045: PUSH
82046: LD_VAR 0 1
82050: PPUSH
82051: LD_INT 2
82053: PPUSH
82054: CALL_OW 275
82058: PUSH
82059: LD_VAR 0 1
82063: PPUSH
82064: LD_INT 3
82066: PPUSH
82067: CALL_OW 275
82071: PUSH
82072: EMPTY
82073: LIST
82074: LIST
82075: LIST
82076: ST_TO_ADDR
// end ;
82077: LD_VAR 0 2
82081: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
82082: LD_INT 0
82084: PPUSH
82085: PPUSH
// result := array ;
82086: LD_ADDR_VAR 0 3
82090: PUSH
82091: LD_VAR 0 1
82095: ST_TO_ADDR
// if size > 0 then
82096: LD_VAR 0 2
82100: PUSH
82101: LD_INT 0
82103: GREATER
82104: IFFALSE 82150
// for i := array downto size do
82106: LD_ADDR_VAR 0 4
82110: PUSH
82111: DOUBLE
82112: LD_VAR 0 1
82116: INC
82117: ST_TO_ADDR
82118: LD_VAR 0 2
82122: PUSH
82123: FOR_DOWNTO
82124: IFFALSE 82148
// result := Delete ( result , result ) ;
82126: LD_ADDR_VAR 0 3
82130: PUSH
82131: LD_VAR 0 3
82135: PPUSH
82136: LD_VAR 0 3
82140: PPUSH
82141: CALL_OW 3
82145: ST_TO_ADDR
82146: GO 82123
82148: POP
82149: POP
// end ;
82150: LD_VAR 0 3
82154: RET
// export function ComExit ( unit ) ; var tmp ; begin
82155: LD_INT 0
82157: PPUSH
82158: PPUSH
// if not IsInUnit ( unit ) then
82159: LD_VAR 0 1
82163: PPUSH
82164: CALL_OW 310
82168: NOT
82169: IFFALSE 82173
// exit ;
82171: GO 82233
// tmp := IsInUnit ( unit ) ;
82173: LD_ADDR_VAR 0 3
82177: PUSH
82178: LD_VAR 0 1
82182: PPUSH
82183: CALL_OW 310
82187: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
82188: LD_VAR 0 3
82192: PPUSH
82193: CALL_OW 247
82197: PUSH
82198: LD_INT 2
82200: EQUAL
82201: IFFALSE 82214
// ComExitVehicle ( unit ) else
82203: LD_VAR 0 1
82207: PPUSH
82208: CALL_OW 121
82212: GO 82223
// ComExitBuilding ( unit ) ;
82214: LD_VAR 0 1
82218: PPUSH
82219: CALL_OW 122
// result := tmp ;
82223: LD_ADDR_VAR 0 2
82227: PUSH
82228: LD_VAR 0 3
82232: ST_TO_ADDR
// end ;
82233: LD_VAR 0 2
82237: RET
// export function ComExitAll ( units ) ; var i ; begin
82238: LD_INT 0
82240: PPUSH
82241: PPUSH
// if not units then
82242: LD_VAR 0 1
82246: NOT
82247: IFFALSE 82251
// exit ;
82249: GO 82277
// for i in units do
82251: LD_ADDR_VAR 0 3
82255: PUSH
82256: LD_VAR 0 1
82260: PUSH
82261: FOR_IN
82262: IFFALSE 82275
// ComExit ( i ) ;
82264: LD_VAR 0 3
82268: PPUSH
82269: CALL 82155 0 1
82273: GO 82261
82275: POP
82276: POP
// end ;
82277: LD_VAR 0 2
82281: RET
// export function ResetHc ; begin
82282: LD_INT 0
82284: PPUSH
// InitHc ;
82285: CALL_OW 19
// hc_importance := 0 ;
82289: LD_ADDR_OWVAR 32
82293: PUSH
82294: LD_INT 0
82296: ST_TO_ADDR
// end ;
82297: LD_VAR 0 1
82301: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
82302: LD_INT 0
82304: PPUSH
82305: PPUSH
82306: PPUSH
// _x := ( x1 + x2 ) div 2 ;
82307: LD_ADDR_VAR 0 6
82311: PUSH
82312: LD_VAR 0 1
82316: PUSH
82317: LD_VAR 0 3
82321: PLUS
82322: PUSH
82323: LD_INT 2
82325: DIV
82326: ST_TO_ADDR
// if _x < 0 then
82327: LD_VAR 0 6
82331: PUSH
82332: LD_INT 0
82334: LESS
82335: IFFALSE 82352
// _x := _x * - 1 ;
82337: LD_ADDR_VAR 0 6
82341: PUSH
82342: LD_VAR 0 6
82346: PUSH
82347: LD_INT 1
82349: NEG
82350: MUL
82351: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
82352: LD_ADDR_VAR 0 7
82356: PUSH
82357: LD_VAR 0 2
82361: PUSH
82362: LD_VAR 0 4
82366: PLUS
82367: PUSH
82368: LD_INT 2
82370: DIV
82371: ST_TO_ADDR
// if _y < 0 then
82372: LD_VAR 0 7
82376: PUSH
82377: LD_INT 0
82379: LESS
82380: IFFALSE 82397
// _y := _y * - 1 ;
82382: LD_ADDR_VAR 0 7
82386: PUSH
82387: LD_VAR 0 7
82391: PUSH
82392: LD_INT 1
82394: NEG
82395: MUL
82396: ST_TO_ADDR
// result := [ _x , _y ] ;
82397: LD_ADDR_VAR 0 5
82401: PUSH
82402: LD_VAR 0 6
82406: PUSH
82407: LD_VAR 0 7
82411: PUSH
82412: EMPTY
82413: LIST
82414: LIST
82415: ST_TO_ADDR
// end ;
82416: LD_VAR 0 5
82420: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
82421: LD_INT 0
82423: PPUSH
82424: PPUSH
82425: PPUSH
82426: PPUSH
// task := GetTaskList ( unit ) ;
82427: LD_ADDR_VAR 0 7
82431: PUSH
82432: LD_VAR 0 1
82436: PPUSH
82437: CALL_OW 437
82441: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
82442: LD_VAR 0 7
82446: NOT
82447: PUSH
82448: LD_VAR 0 1
82452: PPUSH
82453: LD_VAR 0 2
82457: PPUSH
82458: CALL_OW 308
82462: NOT
82463: AND
82464: IFFALSE 82468
// exit ;
82466: GO 82586
// if IsInArea ( unit , area ) then
82468: LD_VAR 0 1
82472: PPUSH
82473: LD_VAR 0 2
82477: PPUSH
82478: CALL_OW 308
82482: IFFALSE 82500
// begin ComMoveToArea ( unit , goAway ) ;
82484: LD_VAR 0 1
82488: PPUSH
82489: LD_VAR 0 3
82493: PPUSH
82494: CALL_OW 113
// exit ;
82498: GO 82586
// end ; if task [ 1 ] [ 1 ] <> M then
82500: LD_VAR 0 7
82504: PUSH
82505: LD_INT 1
82507: ARRAY
82508: PUSH
82509: LD_INT 1
82511: ARRAY
82512: PUSH
82513: LD_STRING M
82515: NONEQUAL
82516: IFFALSE 82520
// exit ;
82518: GO 82586
// x := task [ 1 ] [ 2 ] ;
82520: LD_ADDR_VAR 0 5
82524: PUSH
82525: LD_VAR 0 7
82529: PUSH
82530: LD_INT 1
82532: ARRAY
82533: PUSH
82534: LD_INT 2
82536: ARRAY
82537: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
82538: LD_ADDR_VAR 0 6
82542: PUSH
82543: LD_VAR 0 7
82547: PUSH
82548: LD_INT 1
82550: ARRAY
82551: PUSH
82552: LD_INT 3
82554: ARRAY
82555: ST_TO_ADDR
// if InArea ( x , y , area ) then
82556: LD_VAR 0 5
82560: PPUSH
82561: LD_VAR 0 6
82565: PPUSH
82566: LD_VAR 0 2
82570: PPUSH
82571: CALL_OW 309
82575: IFFALSE 82586
// ComStop ( unit ) ;
82577: LD_VAR 0 1
82581: PPUSH
82582: CALL_OW 141
// end ;
82586: LD_VAR 0 4
82590: RET
// export function Abs ( value ) ; begin
82591: LD_INT 0
82593: PPUSH
// result := value ;
82594: LD_ADDR_VAR 0 2
82598: PUSH
82599: LD_VAR 0 1
82603: ST_TO_ADDR
// if value < 0 then
82604: LD_VAR 0 1
82608: PUSH
82609: LD_INT 0
82611: LESS
82612: IFFALSE 82629
// result := value * - 1 ;
82614: LD_ADDR_VAR 0 2
82618: PUSH
82619: LD_VAR 0 1
82623: PUSH
82624: LD_INT 1
82626: NEG
82627: MUL
82628: ST_TO_ADDR
// end ;
82629: LD_VAR 0 2
82633: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
82634: LD_INT 0
82636: PPUSH
82637: PPUSH
82638: PPUSH
82639: PPUSH
82640: PPUSH
82641: PPUSH
82642: PPUSH
82643: PPUSH
// if not unit or not building then
82644: LD_VAR 0 1
82648: NOT
82649: PUSH
82650: LD_VAR 0 2
82654: NOT
82655: OR
82656: IFFALSE 82660
// exit ;
82658: GO 82886
// x := GetX ( building ) ;
82660: LD_ADDR_VAR 0 4
82664: PUSH
82665: LD_VAR 0 2
82669: PPUSH
82670: CALL_OW 250
82674: ST_TO_ADDR
// y := GetY ( building ) ;
82675: LD_ADDR_VAR 0 6
82679: PUSH
82680: LD_VAR 0 2
82684: PPUSH
82685: CALL_OW 251
82689: ST_TO_ADDR
// d := GetDir ( building ) ;
82690: LD_ADDR_VAR 0 8
82694: PUSH
82695: LD_VAR 0 2
82699: PPUSH
82700: CALL_OW 254
82704: ST_TO_ADDR
// r := 4 ;
82705: LD_ADDR_VAR 0 9
82709: PUSH
82710: LD_INT 4
82712: ST_TO_ADDR
// for i := 1 to 5 do
82713: LD_ADDR_VAR 0 10
82717: PUSH
82718: DOUBLE
82719: LD_INT 1
82721: DEC
82722: ST_TO_ADDR
82723: LD_INT 5
82725: PUSH
82726: FOR_TO
82727: IFFALSE 82884
// begin _x := ShiftX ( x , d , r + i ) ;
82729: LD_ADDR_VAR 0 5
82733: PUSH
82734: LD_VAR 0 4
82738: PPUSH
82739: LD_VAR 0 8
82743: PPUSH
82744: LD_VAR 0 9
82748: PUSH
82749: LD_VAR 0 10
82753: PLUS
82754: PPUSH
82755: CALL_OW 272
82759: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82760: LD_ADDR_VAR 0 7
82764: PUSH
82765: LD_VAR 0 6
82769: PPUSH
82770: LD_VAR 0 8
82774: PPUSH
82775: LD_VAR 0 9
82779: PUSH
82780: LD_VAR 0 10
82784: PLUS
82785: PPUSH
82786: CALL_OW 273
82790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82791: LD_VAR 0 5
82795: PPUSH
82796: LD_VAR 0 7
82800: PPUSH
82801: CALL_OW 488
82805: PUSH
82806: LD_VAR 0 5
82810: PPUSH
82811: LD_VAR 0 7
82815: PPUSH
82816: CALL_OW 428
82820: PPUSH
82821: CALL_OW 247
82825: PUSH
82826: LD_INT 3
82828: PUSH
82829: LD_INT 2
82831: PUSH
82832: EMPTY
82833: LIST
82834: LIST
82835: IN
82836: NOT
82837: AND
82838: IFFALSE 82882
// begin ComMoveXY ( unit , _x , _y ) ;
82840: LD_VAR 0 1
82844: PPUSH
82845: LD_VAR 0 5
82849: PPUSH
82850: LD_VAR 0 7
82854: PPUSH
82855: CALL_OW 111
// result := [ _x , _y ] ;
82859: LD_ADDR_VAR 0 3
82863: PUSH
82864: LD_VAR 0 5
82868: PUSH
82869: LD_VAR 0 7
82873: PUSH
82874: EMPTY
82875: LIST
82876: LIST
82877: ST_TO_ADDR
// exit ;
82878: POP
82879: POP
82880: GO 82886
// end ; end ;
82882: GO 82726
82884: POP
82885: POP
// end ;
82886: LD_VAR 0 3
82890: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82891: LD_INT 0
82893: PPUSH
82894: PPUSH
82895: PPUSH
// result := 0 ;
82896: LD_ADDR_VAR 0 3
82900: PUSH
82901: LD_INT 0
82903: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82904: LD_VAR 0 1
82908: PUSH
82909: LD_INT 0
82911: LESS
82912: PUSH
82913: LD_VAR 0 1
82917: PUSH
82918: LD_INT 8
82920: GREATER
82921: OR
82922: PUSH
82923: LD_VAR 0 2
82927: PUSH
82928: LD_INT 0
82930: LESS
82931: OR
82932: PUSH
82933: LD_VAR 0 2
82937: PUSH
82938: LD_INT 8
82940: GREATER
82941: OR
82942: IFFALSE 82946
// exit ;
82944: GO 83021
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82946: LD_ADDR_VAR 0 4
82950: PUSH
82951: LD_INT 22
82953: PUSH
82954: LD_VAR 0 2
82958: PUSH
82959: EMPTY
82960: LIST
82961: LIST
82962: PPUSH
82963: CALL_OW 69
82967: PUSH
82968: FOR_IN
82969: IFFALSE 83019
// begin un := UnitShoot ( i ) ;
82971: LD_ADDR_VAR 0 5
82975: PUSH
82976: LD_VAR 0 4
82980: PPUSH
82981: CALL_OW 504
82985: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82986: LD_VAR 0 5
82990: PPUSH
82991: CALL_OW 255
82995: PUSH
82996: LD_VAR 0 1
83000: EQUAL
83001: IFFALSE 83017
// begin result := un ;
83003: LD_ADDR_VAR 0 3
83007: PUSH
83008: LD_VAR 0 5
83012: ST_TO_ADDR
// exit ;
83013: POP
83014: POP
83015: GO 83021
// end ; end ;
83017: GO 82968
83019: POP
83020: POP
// end ;
83021: LD_VAR 0 3
83025: RET
// export function GetCargoBay ( units ) ; begin
83026: LD_INT 0
83028: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
83029: LD_ADDR_VAR 0 2
83033: PUSH
83034: LD_VAR 0 1
83038: PPUSH
83039: LD_INT 2
83041: PUSH
83042: LD_INT 34
83044: PUSH
83045: LD_INT 12
83047: PUSH
83048: EMPTY
83049: LIST
83050: LIST
83051: PUSH
83052: LD_INT 34
83054: PUSH
83055: LD_INT 51
83057: PUSH
83058: EMPTY
83059: LIST
83060: LIST
83061: PUSH
83062: LD_INT 34
83064: PUSH
83065: LD_INT 32
83067: PUSH
83068: EMPTY
83069: LIST
83070: LIST
83071: PUSH
83072: LD_INT 34
83074: PUSH
83075: LD_EXP 49
83079: PUSH
83080: EMPTY
83081: LIST
83082: LIST
83083: PUSH
83084: EMPTY
83085: LIST
83086: LIST
83087: LIST
83088: LIST
83089: LIST
83090: PPUSH
83091: CALL_OW 72
83095: ST_TO_ADDR
// end ;
83096: LD_VAR 0 2
83100: RET
// export function Negate ( value ) ; begin
83101: LD_INT 0
83103: PPUSH
// result := not value ;
83104: LD_ADDR_VAR 0 2
83108: PUSH
83109: LD_VAR 0 1
83113: NOT
83114: ST_TO_ADDR
// end ;
83115: LD_VAR 0 2
83119: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
83120: LD_INT 0
83122: PPUSH
// if x1 = x2 then
83123: LD_VAR 0 1
83127: PUSH
83128: LD_VAR 0 3
83132: EQUAL
83133: IFFALSE 83167
// begin if y1 > y2 then
83135: LD_VAR 0 2
83139: PUSH
83140: LD_VAR 0 4
83144: GREATER
83145: IFFALSE 83157
// result := 0 else
83147: LD_ADDR_VAR 0 5
83151: PUSH
83152: LD_INT 0
83154: ST_TO_ADDR
83155: GO 83165
// result := 3 ;
83157: LD_ADDR_VAR 0 5
83161: PUSH
83162: LD_INT 3
83164: ST_TO_ADDR
// exit ;
83165: GO 83253
// end ; if y1 = y2 then
83167: LD_VAR 0 2
83171: PUSH
83172: LD_VAR 0 4
83176: EQUAL
83177: IFFALSE 83211
// begin if x1 > x2 then
83179: LD_VAR 0 1
83183: PUSH
83184: LD_VAR 0 3
83188: GREATER
83189: IFFALSE 83201
// result := 1 else
83191: LD_ADDR_VAR 0 5
83195: PUSH
83196: LD_INT 1
83198: ST_TO_ADDR
83199: GO 83209
// result := 4 ;
83201: LD_ADDR_VAR 0 5
83205: PUSH
83206: LD_INT 4
83208: ST_TO_ADDR
// exit ;
83209: GO 83253
// end ; if x1 > x2 and y1 > y2 then
83211: LD_VAR 0 1
83215: PUSH
83216: LD_VAR 0 3
83220: GREATER
83221: PUSH
83222: LD_VAR 0 2
83226: PUSH
83227: LD_VAR 0 4
83231: GREATER
83232: AND
83233: IFFALSE 83245
// result := 2 else
83235: LD_ADDR_VAR 0 5
83239: PUSH
83240: LD_INT 2
83242: ST_TO_ADDR
83243: GO 83253
// result := 5 ;
83245: LD_ADDR_VAR 0 5
83249: PUSH
83250: LD_INT 5
83252: ST_TO_ADDR
// end ;
83253: LD_VAR 0 5
83257: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83258: LD_INT 0
83260: PPUSH
83261: PPUSH
// if not driver or not IsInUnit ( driver ) then
83262: LD_VAR 0 1
83266: NOT
83267: PUSH
83268: LD_VAR 0 1
83272: PPUSH
83273: CALL_OW 310
83277: NOT
83278: OR
83279: IFFALSE 83283
// exit ;
83281: GO 83373
// vehicle := IsInUnit ( driver ) ;
83283: LD_ADDR_VAR 0 3
83287: PUSH
83288: LD_VAR 0 1
83292: PPUSH
83293: CALL_OW 310
83297: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83298: LD_VAR 0 1
83302: PPUSH
83303: LD_STRING \
83305: PUSH
83306: LD_INT 0
83308: PUSH
83309: LD_INT 0
83311: PUSH
83312: LD_INT 0
83314: PUSH
83315: LD_INT 0
83317: PUSH
83318: LD_INT 0
83320: PUSH
83321: LD_INT 0
83323: PUSH
83324: EMPTY
83325: LIST
83326: LIST
83327: LIST
83328: LIST
83329: LIST
83330: LIST
83331: LIST
83332: PUSH
83333: LD_STRING E
83335: PUSH
83336: LD_INT 0
83338: PUSH
83339: LD_INT 0
83341: PUSH
83342: LD_VAR 0 3
83346: PUSH
83347: LD_INT 0
83349: PUSH
83350: LD_INT 0
83352: PUSH
83353: LD_INT 0
83355: PUSH
83356: EMPTY
83357: LIST
83358: LIST
83359: LIST
83360: LIST
83361: LIST
83362: LIST
83363: LIST
83364: PUSH
83365: EMPTY
83366: LIST
83367: LIST
83368: PPUSH
83369: CALL_OW 446
// end ;
83373: LD_VAR 0 2
83377: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83378: LD_INT 0
83380: PPUSH
83381: PPUSH
// if not driver or not IsInUnit ( driver ) then
83382: LD_VAR 0 1
83386: NOT
83387: PUSH
83388: LD_VAR 0 1
83392: PPUSH
83393: CALL_OW 310
83397: NOT
83398: OR
83399: IFFALSE 83403
// exit ;
83401: GO 83493
// vehicle := IsInUnit ( driver ) ;
83403: LD_ADDR_VAR 0 3
83407: PUSH
83408: LD_VAR 0 1
83412: PPUSH
83413: CALL_OW 310
83417: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83418: LD_VAR 0 1
83422: PPUSH
83423: LD_STRING \
83425: PUSH
83426: LD_INT 0
83428: PUSH
83429: LD_INT 0
83431: PUSH
83432: LD_INT 0
83434: PUSH
83435: LD_INT 0
83437: PUSH
83438: LD_INT 0
83440: PUSH
83441: LD_INT 0
83443: PUSH
83444: EMPTY
83445: LIST
83446: LIST
83447: LIST
83448: LIST
83449: LIST
83450: LIST
83451: LIST
83452: PUSH
83453: LD_STRING E
83455: PUSH
83456: LD_INT 0
83458: PUSH
83459: LD_INT 0
83461: PUSH
83462: LD_VAR 0 3
83466: PUSH
83467: LD_INT 0
83469: PUSH
83470: LD_INT 0
83472: PUSH
83473: LD_INT 0
83475: PUSH
83476: EMPTY
83477: LIST
83478: LIST
83479: LIST
83480: LIST
83481: LIST
83482: LIST
83483: LIST
83484: PUSH
83485: EMPTY
83486: LIST
83487: LIST
83488: PPUSH
83489: CALL_OW 447
// end ;
83493: LD_VAR 0 2
83497: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83498: LD_INT 0
83500: PPUSH
83501: PPUSH
83502: PPUSH
// tmp := [ ] ;
83503: LD_ADDR_VAR 0 5
83507: PUSH
83508: EMPTY
83509: ST_TO_ADDR
// for i in units do
83510: LD_ADDR_VAR 0 4
83514: PUSH
83515: LD_VAR 0 1
83519: PUSH
83520: FOR_IN
83521: IFFALSE 83559
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83523: LD_ADDR_VAR 0 5
83527: PUSH
83528: LD_VAR 0 5
83532: PPUSH
83533: LD_VAR 0 5
83537: PUSH
83538: LD_INT 1
83540: PLUS
83541: PPUSH
83542: LD_VAR 0 4
83546: PPUSH
83547: CALL_OW 256
83551: PPUSH
83552: CALL_OW 2
83556: ST_TO_ADDR
83557: GO 83520
83559: POP
83560: POP
// if not tmp then
83561: LD_VAR 0 5
83565: NOT
83566: IFFALSE 83570
// exit ;
83568: GO 83618
// if asc then
83570: LD_VAR 0 2
83574: IFFALSE 83598
// result := SortListByListAsc ( units , tmp ) else
83576: LD_ADDR_VAR 0 3
83580: PUSH
83581: LD_VAR 0 1
83585: PPUSH
83586: LD_VAR 0 5
83590: PPUSH
83591: CALL_OW 76
83595: ST_TO_ADDR
83596: GO 83618
// result := SortListByListDesc ( units , tmp ) ;
83598: LD_ADDR_VAR 0 3
83602: PUSH
83603: LD_VAR 0 1
83607: PPUSH
83608: LD_VAR 0 5
83612: PPUSH
83613: CALL_OW 77
83617: ST_TO_ADDR
// end ;
83618: LD_VAR 0 3
83622: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83623: LD_INT 0
83625: PPUSH
83626: PPUSH
// task := GetTaskList ( mech ) ;
83627: LD_ADDR_VAR 0 4
83631: PUSH
83632: LD_VAR 0 1
83636: PPUSH
83637: CALL_OW 437
83641: ST_TO_ADDR
// if not task then
83642: LD_VAR 0 4
83646: NOT
83647: IFFALSE 83651
// exit ;
83649: GO 83693
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83651: LD_ADDR_VAR 0 3
83655: PUSH
83656: LD_VAR 0 4
83660: PUSH
83661: LD_INT 1
83663: ARRAY
83664: PUSH
83665: LD_INT 1
83667: ARRAY
83668: PUSH
83669: LD_STRING r
83671: EQUAL
83672: PUSH
83673: LD_VAR 0 4
83677: PUSH
83678: LD_INT 1
83680: ARRAY
83681: PUSH
83682: LD_INT 4
83684: ARRAY
83685: PUSH
83686: LD_VAR 0 2
83690: EQUAL
83691: AND
83692: ST_TO_ADDR
// end ;
83693: LD_VAR 0 3
83697: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83698: LD_INT 0
83700: PPUSH
// SetDir ( unit , d ) ;
83701: LD_VAR 0 1
83705: PPUSH
83706: LD_VAR 0 4
83710: PPUSH
83711: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
83715: LD_VAR 0 1
83719: PPUSH
83720: LD_VAR 0 2
83724: PPUSH
83725: LD_VAR 0 3
83729: PPUSH
83730: LD_VAR 0 5
83734: PPUSH
83735: CALL_OW 48
// end ;
83739: LD_VAR 0 6
83743: RET
// export function ToNaturalNumber ( number ) ; begin
83744: LD_INT 0
83746: PPUSH
// result := number div 1 ;
83747: LD_ADDR_VAR 0 2
83751: PUSH
83752: LD_VAR 0 1
83756: PUSH
83757: LD_INT 1
83759: DIV
83760: ST_TO_ADDR
// if number < 0 then
83761: LD_VAR 0 1
83765: PUSH
83766: LD_INT 0
83768: LESS
83769: IFFALSE 83779
// result := 0 ;
83771: LD_ADDR_VAR 0 2
83775: PUSH
83776: LD_INT 0
83778: ST_TO_ADDR
// end ;
83779: LD_VAR 0 2
83783: RET
// export function SortByClass ( units , class ) ; var un ; begin
83784: LD_INT 0
83786: PPUSH
83787: PPUSH
// if not units or not class then
83788: LD_VAR 0 1
83792: NOT
83793: PUSH
83794: LD_VAR 0 2
83798: NOT
83799: OR
83800: IFFALSE 83804
// exit ;
83802: GO 83899
// result := [ ] ;
83804: LD_ADDR_VAR 0 3
83808: PUSH
83809: EMPTY
83810: ST_TO_ADDR
// for un in units do
83811: LD_ADDR_VAR 0 4
83815: PUSH
83816: LD_VAR 0 1
83820: PUSH
83821: FOR_IN
83822: IFFALSE 83897
// if GetClass ( un ) = class then
83824: LD_VAR 0 4
83828: PPUSH
83829: CALL_OW 257
83833: PUSH
83834: LD_VAR 0 2
83838: EQUAL
83839: IFFALSE 83866
// result := Insert ( result , 1 , un ) else
83841: LD_ADDR_VAR 0 3
83845: PUSH
83846: LD_VAR 0 3
83850: PPUSH
83851: LD_INT 1
83853: PPUSH
83854: LD_VAR 0 4
83858: PPUSH
83859: CALL_OW 2
83863: ST_TO_ADDR
83864: GO 83895
// result := Replace ( result , result + 1 , un ) ;
83866: LD_ADDR_VAR 0 3
83870: PUSH
83871: LD_VAR 0 3
83875: PPUSH
83876: LD_VAR 0 3
83880: PUSH
83881: LD_INT 1
83883: PLUS
83884: PPUSH
83885: LD_VAR 0 4
83889: PPUSH
83890: CALL_OW 1
83894: ST_TO_ADDR
83895: GO 83821
83897: POP
83898: POP
// end ;
83899: LD_VAR 0 3
83903: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83904: LD_INT 0
83906: PPUSH
83907: PPUSH
83908: PPUSH
83909: PPUSH
83910: PPUSH
83911: PPUSH
83912: PPUSH
// result := [ ] ;
83913: LD_ADDR_VAR 0 4
83917: PUSH
83918: EMPTY
83919: ST_TO_ADDR
// if x - r < 0 then
83920: LD_VAR 0 1
83924: PUSH
83925: LD_VAR 0 3
83929: MINUS
83930: PUSH
83931: LD_INT 0
83933: LESS
83934: IFFALSE 83946
// min_x := 0 else
83936: LD_ADDR_VAR 0 8
83940: PUSH
83941: LD_INT 0
83943: ST_TO_ADDR
83944: GO 83962
// min_x := x - r ;
83946: LD_ADDR_VAR 0 8
83950: PUSH
83951: LD_VAR 0 1
83955: PUSH
83956: LD_VAR 0 3
83960: MINUS
83961: ST_TO_ADDR
// if y - r < 0 then
83962: LD_VAR 0 2
83966: PUSH
83967: LD_VAR 0 3
83971: MINUS
83972: PUSH
83973: LD_INT 0
83975: LESS
83976: IFFALSE 83988
// min_y := 0 else
83978: LD_ADDR_VAR 0 7
83982: PUSH
83983: LD_INT 0
83985: ST_TO_ADDR
83986: GO 84004
// min_y := y - r ;
83988: LD_ADDR_VAR 0 7
83992: PUSH
83993: LD_VAR 0 2
83997: PUSH
83998: LD_VAR 0 3
84002: MINUS
84003: ST_TO_ADDR
// max_x := x + r ;
84004: LD_ADDR_VAR 0 9
84008: PUSH
84009: LD_VAR 0 1
84013: PUSH
84014: LD_VAR 0 3
84018: PLUS
84019: ST_TO_ADDR
// max_y := y + r ;
84020: LD_ADDR_VAR 0 10
84024: PUSH
84025: LD_VAR 0 2
84029: PUSH
84030: LD_VAR 0 3
84034: PLUS
84035: ST_TO_ADDR
// for _x = min_x to max_x do
84036: LD_ADDR_VAR 0 5
84040: PUSH
84041: DOUBLE
84042: LD_VAR 0 8
84046: DEC
84047: ST_TO_ADDR
84048: LD_VAR 0 9
84052: PUSH
84053: FOR_TO
84054: IFFALSE 84155
// for _y = min_y to max_y do
84056: LD_ADDR_VAR 0 6
84060: PUSH
84061: DOUBLE
84062: LD_VAR 0 7
84066: DEC
84067: ST_TO_ADDR
84068: LD_VAR 0 10
84072: PUSH
84073: FOR_TO
84074: IFFALSE 84151
// begin if not ValidHex ( _x , _y ) then
84076: LD_VAR 0 5
84080: PPUSH
84081: LD_VAR 0 6
84085: PPUSH
84086: CALL_OW 488
84090: NOT
84091: IFFALSE 84095
// continue ;
84093: GO 84073
// if GetResourceTypeXY ( _x , _y ) then
84095: LD_VAR 0 5
84099: PPUSH
84100: LD_VAR 0 6
84104: PPUSH
84105: CALL_OW 283
84109: IFFALSE 84149
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
84111: LD_ADDR_VAR 0 4
84115: PUSH
84116: LD_VAR 0 4
84120: PPUSH
84121: LD_VAR 0 4
84125: PUSH
84126: LD_INT 1
84128: PLUS
84129: PPUSH
84130: LD_VAR 0 5
84134: PUSH
84135: LD_VAR 0 6
84139: PUSH
84140: EMPTY
84141: LIST
84142: LIST
84143: PPUSH
84144: CALL_OW 1
84148: ST_TO_ADDR
// end ;
84149: GO 84073
84151: POP
84152: POP
84153: GO 84053
84155: POP
84156: POP
// end ;
84157: LD_VAR 0 4
84161: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
84162: LD_INT 0
84164: PPUSH
84165: PPUSH
84166: PPUSH
84167: PPUSH
84168: PPUSH
84169: PPUSH
// if not units then
84170: LD_VAR 0 1
84174: NOT
84175: IFFALSE 84179
// exit ;
84177: GO 84580
// result := UnitFilter ( units , [ f_ok ] ) ;
84179: LD_ADDR_VAR 0 3
84183: PUSH
84184: LD_VAR 0 1
84188: PPUSH
84189: LD_INT 50
84191: PUSH
84192: EMPTY
84193: LIST
84194: PPUSH
84195: CALL_OW 72
84199: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
84200: LD_ADDR_VAR 0 7
84204: PUSH
84205: LD_VAR 0 1
84209: PUSH
84210: LD_INT 1
84212: ARRAY
84213: PPUSH
84214: CALL_OW 255
84218: ST_TO_ADDR
// if not result then
84219: LD_VAR 0 3
84223: NOT
84224: IFFALSE 84228
// exit ;
84226: GO 84580
// for i in result do
84228: LD_ADDR_VAR 0 4
84232: PUSH
84233: LD_VAR 0 3
84237: PUSH
84238: FOR_IN
84239: IFFALSE 84578
// begin tag := GetTag ( i ) + 1 ;
84241: LD_ADDR_VAR 0 8
84245: PUSH
84246: LD_VAR 0 4
84250: PPUSH
84251: CALL_OW 110
84255: PUSH
84256: LD_INT 1
84258: PLUS
84259: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
84260: LD_ADDR_VAR 0 6
84264: PUSH
84265: LD_VAR 0 4
84269: PPUSH
84270: CALL_OW 250
84274: PPUSH
84275: LD_VAR 0 4
84279: PPUSH
84280: CALL_OW 251
84284: PPUSH
84285: LD_INT 6
84287: PPUSH
84288: CALL 83904 0 3
84292: ST_TO_ADDR
// if cr then
84293: LD_VAR 0 6
84297: IFFALSE 84336
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
84299: LD_VAR 0 4
84303: PPUSH
84304: LD_VAR 0 6
84308: PUSH
84309: LD_INT 1
84311: ARRAY
84312: PUSH
84313: LD_INT 1
84315: ARRAY
84316: PPUSH
84317: LD_VAR 0 6
84321: PUSH
84322: LD_INT 1
84324: ARRAY
84325: PUSH
84326: LD_INT 2
84328: ARRAY
84329: PPUSH
84330: CALL_OW 116
84334: GO 84576
// if path > tag then
84336: LD_VAR 0 2
84340: PUSH
84341: LD_VAR 0 8
84345: GREATER
84346: IFFALSE 84524
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
84348: LD_ADDR_VAR 0 5
84352: PUSH
84353: LD_INT 81
84355: PUSH
84356: LD_VAR 0 7
84360: PUSH
84361: EMPTY
84362: LIST
84363: LIST
84364: PUSH
84365: LD_INT 91
84367: PUSH
84368: LD_VAR 0 4
84372: PUSH
84373: LD_INT 12
84375: PUSH
84376: EMPTY
84377: LIST
84378: LIST
84379: LIST
84380: PUSH
84381: EMPTY
84382: LIST
84383: LIST
84384: PPUSH
84385: CALL_OW 69
84389: ST_TO_ADDR
// if enemy then
84390: LD_VAR 0 5
84394: IFFALSE 84422
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84396: LD_VAR 0 4
84400: PPUSH
84401: LD_VAR 0 5
84405: PPUSH
84406: LD_VAR 0 4
84410: PPUSH
84411: CALL_OW 74
84415: PPUSH
84416: CALL_OW 115
84420: GO 84522
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84422: LD_VAR 0 4
84426: PPUSH
84427: LD_VAR 0 2
84431: PUSH
84432: LD_VAR 0 8
84436: ARRAY
84437: PUSH
84438: LD_INT 1
84440: ARRAY
84441: PPUSH
84442: LD_VAR 0 2
84446: PUSH
84447: LD_VAR 0 8
84451: ARRAY
84452: PUSH
84453: LD_INT 2
84455: ARRAY
84456: PPUSH
84457: CALL_OW 297
84461: PUSH
84462: LD_INT 6
84464: GREATER
84465: IFFALSE 84508
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84467: LD_VAR 0 4
84471: PPUSH
84472: LD_VAR 0 2
84476: PUSH
84477: LD_VAR 0 8
84481: ARRAY
84482: PUSH
84483: LD_INT 1
84485: ARRAY
84486: PPUSH
84487: LD_VAR 0 2
84491: PUSH
84492: LD_VAR 0 8
84496: ARRAY
84497: PUSH
84498: LD_INT 2
84500: ARRAY
84501: PPUSH
84502: CALL_OW 114
84506: GO 84522
// SetTag ( i , tag ) ;
84508: LD_VAR 0 4
84512: PPUSH
84513: LD_VAR 0 8
84517: PPUSH
84518: CALL_OW 109
// end else
84522: GO 84576
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
84524: LD_ADDR_VAR 0 5
84528: PUSH
84529: LD_INT 81
84531: PUSH
84532: LD_VAR 0 7
84536: PUSH
84537: EMPTY
84538: LIST
84539: LIST
84540: PPUSH
84541: CALL_OW 69
84545: ST_TO_ADDR
// if enemy then
84546: LD_VAR 0 5
84550: IFFALSE 84576
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84552: LD_VAR 0 4
84556: PPUSH
84557: LD_VAR 0 5
84561: PPUSH
84562: LD_VAR 0 4
84566: PPUSH
84567: CALL_OW 74
84571: PPUSH
84572: CALL_OW 115
// end ; end ;
84576: GO 84238
84578: POP
84579: POP
// end ; end_of_file
84580: LD_VAR 0 3
84584: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84585: LD_VAR 0 1
84589: PUSH
84590: LD_INT 200
84592: DOUBLE
84593: GREATEREQUAL
84594: IFFALSE 84602
84596: LD_INT 299
84598: DOUBLE
84599: LESSEQUAL
84600: IFTRUE 84604
84602: GO 84636
84604: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84605: LD_VAR 0 1
84609: PPUSH
84610: LD_VAR 0 2
84614: PPUSH
84615: LD_VAR 0 3
84619: PPUSH
84620: LD_VAR 0 4
84624: PPUSH
84625: LD_VAR 0 5
84629: PPUSH
84630: CALL 41147 0 5
84634: GO 84713
84636: LD_INT 300
84638: DOUBLE
84639: GREATEREQUAL
84640: IFFALSE 84648
84642: LD_INT 399
84644: DOUBLE
84645: LESSEQUAL
84646: IFTRUE 84650
84648: GO 84712
84650: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84651: LD_VAR 0 1
84655: PPUSH
84656: LD_VAR 0 2
84660: PPUSH
84661: LD_VAR 0 3
84665: PPUSH
84666: LD_VAR 0 4
84670: PPUSH
84671: LD_VAR 0 5
84675: PPUSH
84676: LD_VAR 0 6
84680: PPUSH
84681: LD_VAR 0 7
84685: PPUSH
84686: LD_VAR 0 8
84690: PPUSH
84691: LD_VAR 0 9
84695: PPUSH
84696: LD_VAR 0 10
84700: PPUSH
84701: LD_VAR 0 11
84705: PPUSH
84706: CALL 39045 0 11
84710: GO 84713
84712: POP
// end ;
84713: PPOPN 11
84715: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84716: LD_VAR 0 1
84720: PPUSH
84721: LD_VAR 0 2
84725: PPUSH
84726: LD_VAR 0 3
84730: PPUSH
84731: LD_VAR 0 4
84735: PPUSH
84736: LD_VAR 0 5
84740: PPUSH
84741: CALL 41139 0 5
// end ; end_of_file
84745: PPOPN 5
84747: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84748: LD_VAR 0 1
84752: PPUSH
84753: LD_VAR 0 2
84757: PPUSH
84758: LD_VAR 0 3
84762: PPUSH
84763: LD_VAR 0 4
84767: PPUSH
84768: LD_VAR 0 5
84772: PPUSH
84773: LD_VAR 0 6
84777: PPUSH
84778: CALL 27240 0 6
// end ;
84782: PPOPN 6
84784: END
